{"pr_number": 4731, "pr_title": "[JENKINS-62345] Introduce FingerprintStorage API in core", "pr_createdAt": "2020-05-18T18:37:42Z", "pr_url": "https://github.com/jenkinsci/jenkins/pull/4731", "timeline": [{"oid": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "url": "https://github.com/jenkinsci/jenkins/commit/faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "message": "Suppress fingerprint cleanup thread when external storage is configured", "committedDate": "2020-06-10T07:42:32Z", "type": "commit"}, {"oid": "b6e6cba58c4493be3ba2b3a8c7d655d06a8f1d9e", "url": "https://github.com/jenkinsci/jenkins/commit/b6e6cba58c4493be3ba2b3a8c7d655d06a8f1d9e", "message": "Merge remote-tracking branch 'upstream/master' into external-fingerprint-storage", "committedDate": "2020-06-10T09:05:48Z", "type": "commit"}, {"oid": "815f3d7ee1281da2f32250096469cd771ebaaead", "url": "https://github.com/jenkinsci/jenkins/commit/815f3d7ee1281da2f32250096469cd771ebaaead", "message": "Add TODO", "committedDate": "2020-06-10T09:10:00Z", "type": "commit"}, {"oid": "09f594f8d1adddeecf634b0d400736b44177363f", "url": "https://github.com/jenkinsci/jenkins/commit/09f594f8d1adddeecf634b0d400736b44177363f", "message": "Fix negation bug", "committedDate": "2020-06-10T19:31:46Z", "type": "commit"}, {"oid": "2463bcdaa03f8ce16f007ea8bbad6db3041fba88", "url": "https://github.com/jenkinsci/jenkins/commit/2463bcdaa03f8ce16f007ea8bbad6db3041fba88", "message": "Move FingerprintCleanupThreadTest from core to test (needs JTH)", "committedDate": "2020-06-10T19:37:10Z", "type": "commit"}, {"oid": "70da6e9398629eda41d8a169965b58d2686929a8", "url": "https://github.com/jenkinsci/jenkins/commit/70da6e9398629eda41d8a169965b58d2686929a8", "message": "Revert to using ordinal for extension", "committedDate": "2020-06-12T06:55:12Z", "type": "commit"}, {"oid": "cc7670c98b313c1f9da6b682aca956369e791648", "url": "https://github.com/jenkinsci/jenkins/commit/cc7670c98b313c1f9da6b682aca956369e791648", "message": "Remove redundant import", "committedDate": "2020-06-12T06:55:49Z", "type": "commit"}, {"oid": "472883515e96b7436f19b87a24c3dcc79f4b79f3", "url": "https://github.com/jenkinsci/jenkins/commit/472883515e96b7436f19b87a24c3dcc79f4b79f3", "message": "Add note on ID", "committedDate": "2020-06-12T15:01:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODY1MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439478651", "bodyText": "Still todo? This seems like a simple getter :)", "author": "afalko", "createdAt": "2020-06-12T15:10:37Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1193,6 +1189,15 @@ public int size() {\n         };\n     }\n \n+    /**\n+     * Returns the persisted facets.\n+     *\n+     * @since TODO", "originalCommit": "472883515e96b7436f19b87a24c3dcc79f4b79f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4NDI0Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439484247", "bodyText": "Hi @afalko, this method is not TODO, this is just a new public API that is being offered, so when it gets released it will automatically be replaced by the Jenkins version (kind of an annotation)", "author": "stellargo", "createdAt": "2020-06-12T15:20:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODY1MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODkzNg==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439478936", "bodyText": "Curlies around this if please", "author": "afalko", "createdAt": "2020-06-12T15:11:07Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1239,34 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) {\n+            return;\n+        }\n \n-        long start=0;\n+        long start = 0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n-        File file = getFingerprintFile(md5sum);\n-        save(file);\n-        SaveableListener.fireOnChange(this, getConfigFile(file));\n+        // Implementations are expected to invoke SaveableListener on their own if relevant\n+        // TODO: Consider improving Saveable Listener API: https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        FingerprintStorage.get().save(this);\n \n         if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Saving fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            logger.fine(\"Saving fingerprint \" + getHashString() + \" took \" + (System.currentTimeMillis() - start) + \"ms\");", "originalCommit": "472883515e96b7436f19b87a24c3dcc79f4b79f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5ODIzNQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439498235", "bodyText": "@afalko thanks for reviewing :)\nI want to avoid this because of #4731 (comment).\nBut I am happy to add them if you feel", "author": "stellargo", "createdAt": "2020-06-12T15:46:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NTMyMA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439565320", "bodyText": "So long as you do it a follow up PR, I'm fine with it", "author": "afalko", "createdAt": "2020-06-12T17:57:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODkzNg=="}], "type": "inlineReview", "revised_code": {"commit": "de7a107343f9f67da4ff22863c76ae71109a1af6", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex 17391ccac0..e73d277882 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -1247,7 +1247,7 @@ public class Fingerprint implements ModelObject, Saveable {\n             return;\n         }\n \n-        long start = 0;\n+        long start=0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MDIwMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439480201", "bodyText": "I think the style is to add spaces around the ==", "author": "afalko", "createdAt": "2020-06-12T15:13:24Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(NoExternalUse.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists()) {\n+            return null;\n+        }\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {", "originalCommit": "472883515e96b7436f19b87a24c3dcc79f4b79f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e713c9215a102d075f22c913354228d36cd07e1", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nindex b1128b741e..b9e5058f44 100644\n--- a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n\n@@ -83,7 +83,7 @@ public class FileFingerprintStorage extends FingerprintStorage {\n             Fingerprint f = (Fingerprint) loaded;\n             return f;\n         } catch (IOException e) {\n-            if(file.exists() && file.length()==0) {\n+            if(file.exists() && file.length() == 0) {\n                 // Despite the use of AtomicFile, there are reports indicating that people often see\n                 // empty XML file, presumably either due to file system corruption (perhaps by sudden\n                 // power loss, etc.) or abnormal program termination.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MDk2OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439480968", "bodyText": "Do we need to check for null lookup?", "author": "afalko", "createdAt": "2020-06-12T15:14:41Z", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ * Note: The ID supplied as arguments in various methods to uniquely identify fingerprints should not contain the\n+ * character '|'.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        return ExtensionList.lookup(FingerprintStorage.class).get(0);", "originalCommit": "472883515e96b7436f19b87a24c3dcc79f4b79f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MTY5Mg==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439491692", "bodyText": "AFAICT, we should not need to because FileFingerprintStorage will get loaded before due to it's ordinality unconditionally, and it should get returned.", "author": "stellargo", "createdAt": "2020-06-12T15:34:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MDk2OA=="}], "type": "inlineReview", "revised_code": {"commit": "36ab9b326954df2f9e0d2c3c24ad17402b941701", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\nindex e9ed326d2b..83240ce7d3 100644\n--- a/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n\n@@ -35,8 +35,6 @@ import org.kohsuke.accmod.Restricted;\n \n /**\n  * Pluggable fingerprint storage API for fingerprints.\n- * Note: The ID supplied as arguments in various methods to uniquely identify fingerprints should not contain the\n- * character '|'.\n  *\n  * @author Sumit Sarin\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MTgxNw==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439481817", "bodyText": "better to name jenkinsRule", "author": "afalko", "createdAt": "2020-06-12T15:16:13Z", "path": "test/src/test/java/hudson/model/FingerprintCleanupThreadTest.java", "diffHunk": "@@ -52,6 +54,9 @@\n     private Path tempDirectory;\n     private Path fpFile;\n \n+    @Rule\n+    public JenkinsRule j = new JenkinsRule();", "originalCommit": "472883515e96b7436f19b87a24c3dcc79f4b79f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4Njg4OQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439486889", "bodyText": "@afalko I would agree with naming it jenkinsRule, but it seems like this is pretty common (standard-ish) in the codebase [src] .\nLet me know your thoughts, I have no issues in changing :)", "author": "stellargo", "createdAt": "2020-06-12T15:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MTgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MTE4NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439491185", "bodyText": "Sheep will follow other sheep off a cliff :p. Its not a big deal in this case, and is a non-blocking suggestion.", "author": "afalko", "createdAt": "2020-06-12T15:33:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MTgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MzM0OQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439493349", "bodyText": "I have tended to use r FWIW.", "author": "jglick", "createdAt": "2020-06-12T15:37:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MTgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNDM0NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439714345", "bodyText": "Thanks @afalko I have updated it to jenkinsRule :)", "author": "stellargo", "createdAt": "2020-06-13T06:29:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MTgxNw=="}], "type": "inlineReview", "revised_code": {"commit": "0b4bc56ce9536aa47ca90f71f1b1ba309737d822", "chunk": "diff --git a/test/src/test/java/hudson/model/FingerprintCleanupThreadTest.java b/test/src/test/java/hudson/model/FingerprintCleanupThreadTest.java\nindex c517571c3d..fce710dbd8 100644\n--- a/test/src/test/java/hudson/model/FingerprintCleanupThreadTest.java\n+++ b/test/src/test/java/hudson/model/FingerprintCleanupThreadTest.java\n\n@@ -55,7 +55,7 @@ public class FingerprintCleanupThreadTest {\n     private Path fpFile;\n \n     @Rule\n-    public JenkinsRule j = new JenkinsRule();\n+    public JenkinsRule jenkinsRule = new JenkinsRule();\n \n     @Test\n     public void testDoesNotLogUnimportantExcessiveLogMessage() throws IOException {\n"}}, {"oid": "de7a107343f9f67da4ff22863c76ae71109a1af6", "url": "https://github.com/jenkinsci/jenkins/commit/de7a107343f9f67da4ff22863c76ae71109a1af6", "message": "spacing changes", "committedDate": "2020-06-12T15:28:28Z", "type": "commit"}, {"oid": "9e713c9215a102d075f22c913354228d36cd07e1", "url": "https://github.com/jenkinsci/jenkins/commit/9e713c9215a102d075f22c913354228d36cd07e1", "message": "Add spacing", "committedDate": "2020-06-12T15:30:02Z", "type": "commit"}, {"oid": "db532e9c174e1cbf2b32a00040a809f7c33e36ae", "url": "https://github.com/jenkinsci/jenkins/commit/db532e9c174e1cbf2b32a00040a809f7c33e36ae", "message": "Add ordinal to extension", "committedDate": "2020-06-12T15:32:38Z", "type": "commit"}, {"oid": "e35c664db263ef1ee41f999daa79b29b110d2efa", "url": "https://github.com/jenkinsci/jenkins/commit/e35c664db263ef1ee41f999daa79b29b110d2efa", "message": "Add curlies", "committedDate": "2020-06-12T15:41:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NDA0Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439494046", "bodyText": "Why is that? Could the reference implementation simply escape such a character if it is ever used?", "author": "jglick", "createdAt": "2020-06-12T15:38:33Z", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -30,12 +30,13 @@\n import java.io.IOException;\n \n import hudson.model.Fingerprint;\n-import jenkins.util.SystemProperties;\n import org.kohsuke.accmod.restrictions.Beta;\n import org.kohsuke.accmod.Restricted;\n \n /**\n  * Pluggable fingerprint storage API for fingerprints.\n+ * Note: The ID supplied as arguments in various methods to uniquely identify fingerprints should not contain the\n+ * character '|'.", "originalCommit": "db532e9c174e1cbf2b32a00040a809f7c33e36ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyMDU2MA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439720560", "bodyText": "The reason is that I need a safe delimeter for combining instance ID with the fingerprint ID.\nIIUC, if I escape all | I could do something like\nString id= \"004|034556\"; // Fingerprint's ID\nString instanceID = \"abcdef\"; // safe\nString identifier = id.replace(\"|\",\"\\\\|\") + \"|\" + instanceID; // Escaped the character |\n\n// store identifier\n// ...\n// fetch identifier\n\nString parts = identifier.split(\"(?<!\\\\\\\\)\\\\|\"); // Split on unescaped |\nString id = parts[0].replace(\"\\\\|\", \"|\"); // Unescape\nString identifier = parts[1];\n\nCC @oleg-nenashev @afalko @mikecirioli", "author": "stellargo", "createdAt": "2020-06-13T08:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NDA0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "36ab9b326954df2f9e0d2c3c24ad17402b941701", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\nindex e9ed326d2b..83240ce7d3 100644\n--- a/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n\n@@ -35,8 +35,6 @@ import org.kohsuke.accmod.Restricted;\n \n /**\n  * Pluggable fingerprint storage API for fingerprints.\n- * Note: The ID supplied as arguments in various methods to uniquely identify fingerprints should not contain the\n- * character '|'.\n  *\n  * @author Sumit Sarin\n  */\n"}}, {"oid": "ae82e0e14ba29a829b0edec46bbce2468ca7adbb", "url": "https://github.com/jenkinsci/jenkins/commit/ae82e0e14ba29a829b0edec46bbce2468ca7adbb", "message": "remove curlies", "committedDate": "2020-06-12T15:43:49Z", "type": "commit"}, {"oid": "0b4bc56ce9536aa47ca90f71f1b1ba309737d822", "url": "https://github.com/jenkinsci/jenkins/commit/0b4bc56ce9536aa47ca90f71f1b1ba309737d822", "message": "j -> jenkinsRule", "committedDate": "2020-06-13T06:29:03Z", "type": "commit"}, {"oid": "36ab9b326954df2f9e0d2c3c24ad17402b941701", "url": "https://github.com/jenkinsci/jenkins/commit/36ab9b326954df2f9e0d2c3c24ad17402b941701", "message": "Remove note on | delimeter", "committedDate": "2020-06-16T07:43:50Z", "type": "commit"}, {"oid": "7923ce298718a663628fbba731e1735fc1553be8", "url": "https://github.com/jenkinsci/jenkins/commit/7923ce298718a663628fbba731e1735fc1553be8", "message": "Merge remote-tracking branch 'upstream/master' into external-fingerprint-storage", "committedDate": "2020-06-16T08:21:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4MzExMg==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r440683112", "bodyText": "It is rather important to provide guidelines what to do here.", "author": "oleg-nenashev", "createdAt": "2020-06-16T08:38:34Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1239,34 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) {\n+            return;\n+        }\n \n         long start=0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n-        File file = getFingerprintFile(md5sum);\n-        save(file);\n-        SaveableListener.fireOnChange(this, getConfigFile(file));\n+        // Implementations are expected to invoke SaveableListener on their own if relevant\n+        // TODO: Consider improving Saveable Listener API: https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        FingerprintStorage.get().save(this);\n \n         if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Saving fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            logger.fine(\"Saving fingerprint \" + getHashString() + \" took \" + (System.currentTimeMillis() - start) + \"ms\");\n     }\n \n+    /**\n+     * Save the Fingerprint in the given file locally\n+     * @throws IOException Save error\n+     * @deprecated as of TODO", "originalCommit": "7923ce298718a663628fbba731e1735fc1553be8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9aa86ef29991ce56b19a1eb95fa24df33ed91e81", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex e73d277882..b45d102a30 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -1262,7 +1262,7 @@ public class Fingerprint implements ModelObject, Saveable {\n     /**\n      * Save the Fingerprint in the given file locally\n      * @throws IOException Save error\n-     * @deprecated as of TODO\n+     * @deprecated as of TODO. Use {@link #save()} instead.\n      */\n     @Deprecated\n     void save(File file) throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4MzMxMA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r440683310", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n          \n          \n            \n                 * @return Loaded {@link Fingerprint}. {@code null} if the config file does not exist or", "author": "oleg-nenashev", "createdAt": "2020-06-16T08:38:52Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,83 +1313,64 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or", "originalCommit": "7923ce298718a663628fbba731e1735fc1553be8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f0d44bce44008b4f275da4c9bf74292a313c03a0", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex e73d277882..020892e32b 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -1314,7 +1314,7 @@ public class Fingerprint implements ModelObject, Saveable {\n \n     /**\n      * Loads a {@link Fingerprint} from the Storage with the given unique id.\n-     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * @return Loaded {@link Fingerprint}. {@code null} if the config file does not exist or\n      * malformed.\n      */\n     public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4NDAwMA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r440684000", "bodyText": "Same as above, guidelines are needed. I would also keep the existing API documentation even if it is deprecated\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @deprecated as of TODO\n          \n          \n            \n                 * Determines the file name from md5sum.\n          \n          \n            \n                 * @deprecated as of TODO", "author": "oleg-nenashev", "createdAt": "2020-06-16T08:39:56Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,83 +1313,64 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE)) {\n+            start = System.currentTimeMillis();\n+        }\n+\n+        Fingerprint loaded = FingerprintStorage.get().load(id);\n+        initFacets(loaded);\n+\n+        if(logger.isLoggable(Level.FINE)) {\n+            logger.fine(\"Loading fingerprint took \" + (System.currentTimeMillis() - start) + \"ms\");\n+        }\n+\n+        return loaded;\n     }\n \n     /**\n-     * Determines the file name from md5sum.\n+     * @deprecated as of TODO", "originalCommit": "7923ce298718a663628fbba731e1735fc1553be8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f0d44bce44008b4f275da4c9bf74292a313c03a0", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex e73d277882..020892e32b 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -1314,7 +1314,7 @@ public class Fingerprint implements ModelObject, Saveable {\n \n     /**\n      * Loads a {@link Fingerprint} from the Storage with the given unique id.\n-     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * @return Loaded {@link Fingerprint}. {@code null} if the config file does not exist or\n      * malformed.\n      */\n     public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4NDExOA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r440684118", "bodyText": "same", "author": "oleg-nenashev", "createdAt": "2020-06-16T08:40:07Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,83 +1313,64 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE)) {\n+            start = System.currentTimeMillis();\n+        }\n+\n+        Fingerprint loaded = FingerprintStorage.get().load(id);\n+        initFacets(loaded);\n+\n+        if(logger.isLoggable(Level.FINE)) {\n+            logger.fine(\"Loading fingerprint took \" + (System.currentTimeMillis() - start) + \"ms\");\n+        }\n+\n+        return loaded;\n     }\n \n     /**\n-     * Determines the file name from md5sum.\n+     * @deprecated as of TODO\n      */\n-    private static @NonNull File getFingerprintFile(@NonNull byte[] md5sum) {\n-        assert md5sum.length==16;\n-        return new File( Jenkins.get().getRootDir(),\n-            \"fingerprints/\"+ Util.toHexString(md5sum,0,1)+'/'+Util.toHexString(md5sum,1,1)+'/'+Util.toHexString(md5sum,2,md5sum.length-2)+\".xml\");\n+    @Deprecated\n+    /*package*/ static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+        return load(Util.toHexString(md5sum));\n     }\n \n     /**\n-     * Loads a {@link Fingerprint} from a file in the image.\n-     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n-     * malformed.\n+     * @deprecated as of TODO", "originalCommit": "7923ce298718a663628fbba731e1735fc1553be8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f0d44bce44008b4f275da4c9bf74292a313c03a0", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex e73d277882..020892e32b 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -1314,7 +1314,7 @@ public class Fingerprint implements ModelObject, Saveable {\n \n     /**\n      * Loads a {@link Fingerprint} from the Storage with the given unique id.\n-     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * @return Loaded {@link Fingerprint}. {@code null} if the config file does not exist or\n      * malformed.\n      */\n     public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n"}}, {"oid": "9aa86ef29991ce56b19a1eb95fa24df33ed91e81", "url": "https://github.com/jenkinsci/jenkins/commit/9aa86ef29991ce56b19a1eb95fa24df33ed91e81", "message": "Improve docstring", "committedDate": "2020-06-16T09:11:26Z", "type": "commit"}, {"oid": "f0d44bce44008b4f275da4c9bf74292a313c03a0", "url": "https://github.com/jenkinsci/jenkins/commit/f0d44bce44008b4f275da4c9bf74292a313c03a0", "message": "null -> {@code null}", "committedDate": "2020-06-16T09:11:41Z", "type": "commit"}, {"oid": "16e9d6560104b2068ad4879d1ec24aa81083f9ea", "url": "https://github.com/jenkinsci/jenkins/commit/16e9d6560104b2068ad4879d1ec24aa81083f9ea", "message": "Improve docstring", "committedDate": "2020-06-16T09:14:54Z", "type": "commit"}, {"oid": "e1fbc87eeca1920d9a0c5d5cd4887e30ed25a67a", "url": "https://github.com/jenkinsci/jenkins/commit/e1fbc87eeca1920d9a0c5d5cd4887e30ed25a67a", "message": "Improve documentation", "committedDate": "2020-06-16T09:55:55Z", "type": "commit"}, {"oid": "b2306ff578289cb9e1ce75c69bba9202b55c93af", "url": "https://github.com/jenkinsci/jenkins/commit/b2306ff578289cb9e1ce75c69bba9202b55c93af", "message": "Fix typos", "committedDate": "2020-06-16T09:58:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5OTg4Mg==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442299882", "bodyText": "is there no API for this in external or just not needed?", "author": "timja", "createdAt": "2020-06-18T15:09:03Z", "path": "core/src/main/java/hudson/model/FingerprintCleanupThread.java", "diffHunk": "@@ -71,6 +75,12 @@ private static FingerprintCleanupThread getInstance() {\n     }\n \n     public void execute(TaskListener listener) {\n+        Object fingerprintStorage = FingerprintStorage.get();\n+        if (!(fingerprintStorage instanceof FileFingerprintStorage)) {\n+            LOGGER.fine(\"External fingerprint storage is configured. Skipping execution\");", "originalCommit": "b2306ff578289cb9e1ce75c69bba9202b55c93af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwMDk0NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442400945", "bodyText": "@timja thanks for reviewing :) We currently do not have an API that can support fingerprint cleanup in external storages, something we will be tackling in the next few weeks :)\nAs of now, we limit the execution of fingerprint cleanup only when the default file based storage is configured", "author": "stellargo", "createdAt": "2020-06-18T17:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5OTg4Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMDg1Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442300856", "bodyText": "could update this reference while moving it\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n          \n          \n            \n                            // but if the file size is 0, which is what's reported in JENKINS-2012, then it seems", "author": "timja", "createdAt": "2020-06-18T15:10:33Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(NoExternalUse.class)\n+@Extension(ordinal=-100)\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists()) {\n+            return null;\n+        }\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length() == 0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems", "originalCommit": "b2306ff578289cb9e1ce75c69bba9202b55c93af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "67db5b1f00e9658dd8cd4035876c86c7d84b8cc3", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nindex 5225f01084..21e8a4357a 100644\n--- a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n\n@@ -88,7 +88,7 @@ public class FileFingerprintStorage extends FingerprintStorage {\n                 // empty XML file, presumably either due to file system corruption (perhaps by sudden\n                 // power loss, etc.) or abnormal program termination.\n                 // generally we don't want to wipe out user data just because we can't load it,\n-                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // but if the file size is 0, which is what's reported in JENKINS-2012, then it seems\n                 // like recovering it silently by deleting the file is not a bad idea.\n                 logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n                 file.delete();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMjEyNg==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442302126", "bodyText": "there's certainly nicer ways to print this, but not worth doing in this PR \ud83d\udc4d", "author": "timja", "createdAt": "2020-06-18T15:12:23Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(NoExternalUse.class)\n+@Extension(ordinal=-100)\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists()) {\n+            return null;\n+        }\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length() == 0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \" + configFile, e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");", "originalCommit": "b2306ff578289cb9e1ce75c69bba9202b55c93af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwMjc1Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442402756", "bodyText": "I agree, this is just code that has been moved to a new class, so don't want to break what works :P", "author": "stellargo", "createdAt": "2020-06-18T17:53:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMjEyNg=="}], "type": "inlineReview", "revised_code": {"commit": "67db5b1f00e9658dd8cd4035876c86c7d84b8cc3", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nindex 5225f01084..21e8a4357a 100644\n--- a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n\n@@ -88,7 +88,7 @@ public class FileFingerprintStorage extends FingerprintStorage {\n                 // empty XML file, presumably either due to file system corruption (perhaps by sudden\n                 // power loss, etc.) or abnormal program termination.\n                 // generally we don't want to wipe out user data just because we can't load it,\n-                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // but if the file size is 0, which is what's reported in JENKINS-2012, then it seems\n                 // like recovering it silently by deleting the file is not a bad idea.\n                 logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n                 file.delete();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMjUwMg==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442302502", "bodyText": "could rename this var to follow java naming standards\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String[] inner_files = inner.list();\n          \n          \n            \n                    String[] innerFiles = inner.list();", "author": "timja", "createdAt": "2020-06-18T15:12:57Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(NoExternalUse.class)\n+@Extension(ordinal=-100)\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists()) {\n+            return null;\n+        }\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length() == 0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \" + configFile, e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) throws IOException {\n+        File file = getFingerprintFile(id);\n+        if (!file.exists()) {\n+            return;\n+        }\n+\n+        if (!file.delete()) {\n+            throw new IOException(\"Error occurred in deleting Fingerprint \" + id);\n+        }\n+\n+        File inner = new File(Jenkins.get().getRootDir(), \"fingerprints/\" + id.substring(0,2) + \"/\" + id.substring(2,4));\n+        String[] inner_files = inner.list();", "originalCommit": "b2306ff578289cb9e1ce75c69bba9202b55c93af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "67db5b1f00e9658dd8cd4035876c86c7d84b8cc3", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nindex 5225f01084..21e8a4357a 100644\n--- a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n\n@@ -88,7 +88,7 @@ public class FileFingerprintStorage extends FingerprintStorage {\n                 // empty XML file, presumably either due to file system corruption (perhaps by sudden\n                 // power loss, etc.) or abnormal program termination.\n                 // generally we don't want to wipe out user data just because we can't load it,\n-                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // but if the file size is 0, which is what's reported in JENKINS-2012, then it seems\n                 // like recovering it silently by deleting the file is not a bad idea.\n                 logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n                 file.delete();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMzc2NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442303764", "bodyText": "This doesn't seem to be the configured one? afaict it's the first one and you've set the file one to have low priority so that an external one gets picked up first\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns the configured FingerprintStorage for the instance.\n          \n          \n            \n                 * Returns the first implementation of FingerprintStorage for the instance.\n          \n          \n            \n                 * Implementation ordering is done via the ordinal attribute on the Extension", "author": "timja", "createdAt": "2020-06-18T15:14:53Z", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.", "originalCommit": "b2306ff578289cb9e1ce75c69bba9202b55c93af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwNDY5OQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r442404699", "bodyText": "Thanks for pointing that out @timja!", "author": "stellargo", "createdAt": "2020-06-18T17:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMzc2NA=="}], "type": "inlineReview", "revised_code": {"commit": "b40ecd1844fc5a250fb1f0a3e0c71ebc5dfd22c4", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\nindex 5608ec008d..bb86a6c796 100644\n--- a/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n\n@@ -42,7 +42,8 @@ import org.kohsuke.accmod.Restricted;\n public abstract class FingerprintStorage implements ExtensionPoint {\n \n     /**\n-     * Returns the configured FingerprintStorage for the instance.\n+     * Returns the first implementation of FingerprintStorage for the instance.\n+     * External storage plugins which implement FingerprintStorage are given a higher priority.\n      */\n     public static FingerprintStorage get() {\n         return ExtensionList.lookup(FingerprintStorage.class).get(0);\n"}}, {"oid": "67db5b1f00e9658dd8cd4035876c86c7d84b8cc3", "url": "https://github.com/jenkinsci/jenkins/commit/67db5b1f00e9658dd8cd4035876c86c7d84b8cc3", "message": "Minor changes to variable names and docstrings", "committedDate": "2020-06-18T17:55:07Z", "type": "commit"}, {"oid": "b40ecd1844fc5a250fb1f0a3e0c71ebc5dfd22c4", "url": "https://github.com/jenkinsci/jenkins/commit/b40ecd1844fc5a250fb1f0a3e0c71ebc5dfd22c4", "message": "Update docstring", "committedDate": "2020-06-18T17:56:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcyNDc0NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r460724745", "bodyText": "This entire class needs an @since TODO, same with FileFingerprintStorage.", "author": "daniel-beck", "createdAt": "2020-07-27T08:23:22Z", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin", "originalCommit": "b40ecd1844fc5a250fb1f0a3e0c71ebc5dfd22c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcyNjE4Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r460726187", "bodyText": "@since?", "author": "daniel-beck", "createdAt": "2020-07-27T08:25:49Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,83 +1313,68 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. {@code null} if the config file does not exist or\n+     * malformed.", "originalCommit": "b40ecd1844fc5a250fb1f0a3e0c71ebc5dfd22c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxMTI2OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r426911268", "bodyText": "Please rather get used to setters./getters in the code. Public fields are nightmare in Java when it comes to maintaining binary compatibility", "author": "oleg-nenashev", "createdAt": "2020-05-18T21:48:05Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -851,30 +851,32 @@ private void locationChanged(Item item, String oldName, String newName) {\n     /**\n      * Time when the fingerprint has been captured.\n      */\n-    private final @Nonnull Date timestamp;\n+    public final @Nonnull Date timestamp;", "originalCommit": "13889975d1e03f00e41f92bf6f67ebb6f73946f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0NDIyOA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r427144228", "bodyText": "@oleg-nenashev Got it :) Made the requested changes!", "author": "stellargo", "createdAt": "2020-05-19T09:01:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxMTI2OA=="}], "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex a11e89e684..17391ccac0 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -851,38 +847,36 @@ public class Fingerprint implements ModelObject, Saveable {\n     /**\n      * Time when the fingerprint has been captured.\n      */\n-    public final @Nonnull Date timestamp;\n+    private final @NonNull Date timestamp;\n \n     /**\n      * Null if this fingerprint is for a file that's\n      * apparently produced outside.\n      */\n-    public final @CheckForNull BuildPtr original;\n+    private final @CheckForNull BuildPtr original;\n \n-    public final byte[] md5sum;\n+    private final byte[] md5sum;\n \n-    public final String fileName;\n+    private final String fileName;\n \n     /**\n      * Range of builds that use this file keyed by a job full name.\n      */\n-    public Hashtable<String,RangeSet> usages = new Hashtable<>();\n+    private Hashtable<String,RangeSet> usages = new Hashtable<>();\n \n-    public PersistedList<FingerprintFacet> facets = new PersistedList<>(this);\n+    PersistedList<FingerprintFacet> facets = new PersistedList<>(this);\n \n     /**\n      * Lazily computed immutable {@link FingerprintFacet}s created from {@link TransientFingerprintFacetFactory}.\n      */\n     private transient volatile List<FingerprintFacet> transientFacets = null;\n \n-    private FileFingerprintStorage fileFingerprintStorage = new FileFingerprintStorage();\n-\n-    public Fingerprint(@CheckForNull Run build, @Nonnull String fileName, @Nonnull byte[] md5sum) throws IOException {\n+    public Fingerprint(@CheckForNull Run build, @NonNull String fileName, @NonNull byte[] md5sum) throws IOException {\n         this(build==null ? null : new BuildPtr(build), fileName, md5sum);\n         save();\n     }\n \n-    Fingerprint(@CheckForNull BuildPtr original, @Nonnull String fileName, @Nonnull byte[] md5sum) {\n+    Fingerprint(@CheckForNull BuildPtr original, @NonNull String fileName, @NonNull byte[] md5sum) {\n         this.original = original;\n         this.md5sum = md5sum;\n         this.fileName = fileName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0MjU5NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r427142595", "bodyText": "Unless there are startup sequence related issues, this should be fairly straightforward to do in a \"Jenkins\" way:\n\nRemove the field in Fingerprint.\nAnnotate this class @Extension(ordinal=100) after making sure it has a no-arg constructor.\nAdd an abstract superclass FingerprintStorage implements ExtensionPoint and extend it here.\nHave a static FingerprintStorage get() in the superclass that returns ExtensionList.lookup(FingerprintStorage.class).get(0).\n\nAny @Extension WhateverFingerprintStorage extends FingerprintStorage will take precedence.\nEven if the final PR looks nothing like I write above, looking into these Jenkins-isms if you don't know them yet will prepare you for writing code \"the Jenkins way\" \ud83d\ude03", "author": "daniel-beck", "createdAt": "2020-05-19T08:59:17Z", "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package hudson.model;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.BulkChange;\n+import hudson.Util;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+public class FileFingerprintStorage {", "originalCommit": "13889975d1e03f00e41f92bf6f67ebb6f73946f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0ODA5Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r427148096", "bodyText": "Hi @daniel-beck Thanks a lot for the review :) Implementing the Extension point is my next step, but you gave me such good precise and clear direction! Thanks a ton!\nPreparing for \"the Jenkins way\" is indeed what I am here to learn! :)", "author": "stellargo", "createdAt": "2020-05-19T09:07:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0MjU5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1MjU1OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r427152558", "bodyText": "Would also recommend looking into https://javadoc.jenkins.io/jenkins/model/ArtifactManagerConfiguration.html and implementations of https://www.jenkins.io/doc/developer/extensions/jenkins-core/#artifactmanagerfactory -- seems they are fairly similar to what you're doing here.", "author": "daniel-beck", "createdAt": "2020-05-19T09:14:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0MjU5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/FileFingerprintStorage.java b/core/src/main/java/hudson/model/FileFingerprintStorage.java\ndeleted file mode 100644\nindex bb261ea8d5..0000000000\n--- a/core/src/main/java/hudson/model/FileFingerprintStorage.java\n+++ /dev/null\n\n@@ -1,90 +0,0 @@\n-package hudson.model;\n-\n-import com.thoughtworks.xstream.converters.basic.DateConverter;\n-import hudson.BulkChange;\n-import hudson.Util;\n-import hudson.model.listeners.SaveableListener;\n-import hudson.util.AtomicFileWriter;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.util.Map;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-\n-public class FileFingerprintStorage {\n-\n-    private static final Logger logger = Logger.getLogger(Fingerprint.class.getName());\n-    private static final DateConverter DATE_CONVERTER = new DateConverter();\n-\n-    public synchronized void save(Fingerprint fp) throws IOException {\n-        if(BulkChange.contains(fp))\n-            return;\n-\n-        long start=0;\n-        if(logger.isLoggable(Level.FINE))\n-            start = System.currentTimeMillis();\n-\n-        File file = Fingerprint.getFingerprintFile(fp.md5sum);\n-        save(fp, file);\n-        SaveableListener.fireOnChange(fp, Fingerprint.getConfigFile(file));\n-\n-        if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Saving fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n-    }\n-\n-    public void save(Fingerprint fp, File file) throws IOException {\n-        if (fp.facets.isEmpty()) {\n-            file.getParentFile().mkdirs();\n-            // JENKINS-16301: fast path for the common case.\n-            AtomicFileWriter afw = new AtomicFileWriter(file);\n-            try {\n-                PrintWriter w = new PrintWriter(afw);\n-                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n-                w.println(\"<fingerprint>\");\n-                w.print(\"  <timestamp>\");\n-                w.print(DATE_CONVERTER.toString(fp.timestamp));\n-                w.println(\"</timestamp>\");\n-                if (fp.original != null) {\n-                    w.println(\"  <original>\");\n-                    w.print(\"    <name>\");\n-                    w.print(Util.xmlEscape(fp.original.name));\n-                    w.println(\"</name>\");\n-                    w.print(\"    <number>\");\n-                    w.print(fp.original.number);\n-                    w.println(\"</number>\");\n-                    w.println(\"  </original>\");\n-                }\n-                w.print(\"  <md5sum>\");\n-                w.print(Util.toHexString(fp.md5sum));\n-                w.println(\"</md5sum>\");\n-                w.print(\"  <fileName>\");\n-                w.print(Util.xmlEscape(fp.fileName));\n-                w.println(\"</fileName>\");\n-                w.println(\"  <usages>\");\n-                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.usages.entrySet()) {\n-                    w.println(\"    <entry>\");\n-                    w.print(\"      <string>\");\n-                    w.print(Util.xmlEscape(e.getKey()));\n-                    w.println(\"</string>\");\n-                    w.print(\"      <ranges>\");\n-                    w.print(Fingerprint.RangeSet.ConverterImpl.serialize(e.getValue()));\n-                    w.println(\"</ranges>\");\n-                    w.println(\"    </entry>\");\n-                }\n-                w.println(\"  </usages>\");\n-                w.println(\"  <facets/>\");\n-                w.print(\"</fingerprint>\");\n-                w.flush();\n-                afw.commit();\n-            } finally {\n-                afw.abort();\n-            }\n-        } else {\n-            // Slower fallback that can persist facets.\n-            Fingerprint.getConfigFile(file).write(fp);\n-        }\n-    }\n-\n-}\n"}}, {"oid": "6b873a4f6e8e7eab97d05b3091b2fbbb31033793", "url": "https://github.com/jenkinsci/jenkins/commit/6b873a4f6e8e7eab97d05b3091b2fbbb31033793", "message": "[JENKINS-62345] Introduce FingerprintStorage API", "committedDate": "2020-05-20T17:03:48Z", "type": "forcePushed"}, {"oid": "8801887d2fbabc2d9eef8ea0ea657564d55f7d16", "url": "https://github.com/jenkinsci/jenkins/commit/8801887d2fbabc2d9eef8ea0ea657564d55f7d16", "message": "[JENKINS-62345] Introduce FingerprintStorage API", "committedDate": "2020-05-22T12:10:25Z", "type": "commit"}, {"oid": "4cab3222063b5b2bc68bfce05f87d426f74f8b18", "url": "https://github.com/jenkinsci/jenkins/commit/4cab3222063b5b2bc68bfce05f87d426f74f8b18", "message": "Fix FingerprintTest by adding JenkinsRule", "committedDate": "2020-05-22T12:10:25Z", "type": "commit"}, {"oid": "baddacd1780837ad75d02d870c67878ecef13b91", "url": "https://github.com/jenkinsci/jenkins/commit/baddacd1780837ad75d02d870c67878ecef13b91", "message": "Add licenses", "committedDate": "2020-05-22T12:10:25Z", "type": "commit"}, {"oid": "f5dfcf32865ae12c26177414fb3be4cc0ced33d5", "url": "https://github.com/jenkinsci/jenkins/commit/f5dfcf32865ae12c26177414fb3be4cc0ced33d5", "message": "Undo Adding JTH to core", "committedDate": "2020-05-22T12:10:25Z", "type": "commit"}, {"oid": "22ceaab9ac147e65ebfb0e7dcb9ee734eb57c68e", "url": "https://github.com/jenkinsci/jenkins/commit/22ceaab9ac147e65ebfb0e7dcb9ee734eb57c68e", "message": "Move roundTrip test to JTH", "committedDate": "2020-05-22T12:10:25Z", "type": "commit"}, {"oid": "a98412fd0c81974986bf4288dbad5c646ef2a1ed", "url": "https://github.com/jenkinsci/jenkins/commit/a98412fd0c81974986bf4288dbad5c646ef2a1ed", "message": "Move toByteArray method to Fingerprint class", "committedDate": "2020-05-22T12:11:30Z", "type": "commit"}, {"oid": "a98412fd0c81974986bf4288dbad5c646ef2a1ed", "url": "https://github.com/jenkinsci/jenkins/commit/a98412fd0c81974986bf4288dbad5c646ef2a1ed", "message": "Move toByteArray method to Fingerprint class", "committedDate": "2020-05-22T12:11:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NDMyMw==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r429474323", "bodyText": "Maybe something to leave within the abstraction. It is hard to expect the implementations to handle it correctly", "author": "oleg-nenashev", "createdAt": "2020-05-22T22:06:24Z", "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package hudson.model;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.BulkChange;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+import hudson.util.PersistedList;\n+import jenkins.model.FingerprintFacet;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(Fingerprint.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    public @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+        return load(Fingerprint.getFingerprintFile(md5sum));\n+    }\n+\n+    static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = Fingerprint.getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))\n+            start = System.currentTimeMillis();\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            if(logger.isLoggable(Level.FINE))\n+                logger.fine(\"Loading fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            if (f.facets==null)\n+                f.facets = new PersistedList<>(f);\n+            for (FingerprintFacet facet : f.facets)\n+                facet._setOwner(f);\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = Fingerprint.messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        if(BulkChange.contains(fp))", "originalCommit": "a98412fd0c81974986bf4288dbad5c646ef2a1ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/FileFingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nsimilarity index 53%\nrename from core/src/main/java/hudson/model/FileFingerprintStorage.java\nrename to core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nindex 603d7b4663..b1128b741e 100644\n--- a/core/src/main/java/hudson/model/FileFingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n\n@@ -21,20 +21,24 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package hudson.model;\n+package jenkins.fingerprints;\n \n import com.thoughtworks.xstream.converters.basic.DateConverter;\n-import hudson.BulkChange;\n import hudson.Extension;\n import hudson.Util;\n import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n import hudson.model.listeners.SaveableListener;\n import hudson.util.AtomicFileWriter;\n-import hudson.util.PersistedList;\n-import jenkins.model.FingerprintFacet;\n \n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n import java.io.File;\n import java.io.IOException;\n import java.io.PrintWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NDUyNQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r429474525", "bodyText": "Something to leave in the abstraction as well?", "author": "oleg-nenashev", "createdAt": "2020-05-22T22:07:26Z", "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package hudson.model;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.BulkChange;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+import hudson.util.PersistedList;\n+import jenkins.model.FingerprintFacet;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(Fingerprint.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    public @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+        return load(Fingerprint.getFingerprintFile(md5sum));\n+    }\n+\n+    static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = Fingerprint.getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))\n+            start = System.currentTimeMillis();\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            if(logger.isLoggable(Level.FINE))\n+                logger.fine(\"Loading fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            if (f.facets==null)\n+                f.facets = new PersistedList<>(f);\n+            for (FingerprintFacet facet : f.facets)\n+                facet._setOwner(f);\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = Fingerprint.messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        if(BulkChange.contains(fp))\n+            return;\n+\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))\n+            start = System.currentTimeMillis();\n+\n+        File file = Fingerprint.getFingerprintFile(Fingerprint.toByteArray(fp.getHashString()));\n+        save(fp, file);\n+        SaveableListener.fireOnChange(fp, Fingerprint.getConfigFile(file));\n+\n+        if(logger.isLoggable(Level.FINE))", "originalCommit": "a98412fd0c81974986bf4288dbad5c646ef2a1ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/FileFingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nsimilarity index 53%\nrename from core/src/main/java/hudson/model/FileFingerprintStorage.java\nrename to core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nindex 603d7b4663..b1128b741e 100644\n--- a/core/src/main/java/hudson/model/FileFingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n\n@@ -21,20 +21,24 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package hudson.model;\n+package jenkins.fingerprints;\n \n import com.thoughtworks.xstream.converters.basic.DateConverter;\n-import hudson.BulkChange;\n import hudson.Extension;\n import hudson.Util;\n import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n import hudson.model.listeners.SaveableListener;\n import hudson.util.AtomicFileWriter;\n-import hudson.util.PersistedList;\n-import jenkins.model.FingerprintFacet;\n \n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n import java.io.File;\n import java.io.IOException;\n import java.io.PrintWriter;\n"}}, {"oid": "92b10ec9218e83ed372f36517b8fe711dc87e399", "url": "https://github.com/jenkinsci/jenkins/commit/92b10ec9218e83ed372f36517b8fe711dc87e399", "message": "Decrease extension ordinal value for FileFingerprintStorage", "committedDate": "2020-05-23T10:32:38Z", "type": "commit"}, {"oid": "61dbf95009596cb922068b4a622c61772b573cb8", "url": "https://github.com/jenkinsci/jenkins/commit/61dbf95009596cb922068b4a622c61772b573cb8", "message": "abstract logging and bulkchange into fingerprint class", "committedDate": "2020-05-23T10:40:35Z", "type": "commit"}, {"oid": "a9ca3b8fd5c9f9acaf7672311cdab6fccbc42c36", "url": "https://github.com/jenkinsci/jenkins/commit/a9ca3b8fd5c9f9acaf7672311cdab6fccbc42c36", "message": "Move loading logs into Fingerprint", "committedDate": "2020-05-23T11:54:10Z", "type": "commit"}, {"oid": "2dfa5369253fde8baf0adbd54acce047a25551db", "url": "https://github.com/jenkinsci/jenkins/commit/2dfa5369253fde8baf0adbd54acce047a25551db", "message": "Expose setPersistedFacets in Fingerprint class", "committedDate": "2020-05-24T06:46:43Z", "type": "commit"}, {"oid": "563c280a55881be4a5637dafc3c91b8794bf5131", "url": "https://github.com/jenkinsci/jenkins/commit/563c280a55881be4a5637dafc3c91b8794bf5131", "message": "Annotate FingerprintStorage as Beta", "committedDate": "2020-05-24T07:08:40Z", "type": "commit"}, {"oid": "afaa0eb6a3a7e54c8243fd211e087d3756ac87c9", "url": "https://github.com/jenkinsci/jenkins/commit/afaa0eb6a3a7e54c8243fd211e087d3756ac87c9", "message": "Add docstring for FingerprintStorage and FileFingerprintStorage", "committedDate": "2020-05-24T08:18:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDM3Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r429654376", "bodyText": "Been a while for such conversions for me, but do you need to watch for any overflows or anything?", "author": "afalko", "createdAt": "2020-05-24T16:44:06Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -927,6 +923,18 @@ public Fingerprint(@CheckForNull Run build, @NonNull String fileName, @NonNull b\n         return Util.toHexString(md5sum);\n     }\n \n+    /**\n+     * Converts md5 hash string to byte array.\n+     *\n+     * @since TODO\n+     */\n+    public static byte[] toByteArray(String md5sum) {\n+        byte[] data = new byte[16];\n+        for( int i=0; i<md5sum.length(); i+=2 )\n+            data[i/2] = (byte)Integer.parseInt(md5sum.substring(i,i+2),16);", "originalCommit": "afaa0eb6a3a7e54c8243fd211e087d3756ac87c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAwMDczMg==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r430000732", "bodyText": "Hi @afalko, Actually this piece of code I ported from the tests because it has use with other classes too. Ill comment back after having properly investigated it", "author": "stellargo", "createdAt": "2020-05-25T15:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDM3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex cb5132bb0c..17391ccac0 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -923,18 +923,6 @@ public class Fingerprint implements ModelObject, Saveable {\n         return Util.toHexString(md5sum);\n     }\n \n-    /**\n-     * Converts md5 hash string to byte array.\n-     *\n-     * @since TODO\n-     */\n-    public static byte[] toByteArray(String md5sum) {\n-        byte[] data = new byte[16];\n-        for( int i=0; i<md5sum.length(); i+=2 )\n-            data[i/2] = (byte)Integer.parseInt(md5sum.substring(i,i+2),16);\n-        return data;\n-    }\n-\n     /**\n      * Gets the timestamp when this record is created.\n      */\n"}}, {"oid": "8ef152b652405f78a0098fb77bddc1beab2d4731", "url": "https://github.com/jenkinsci/jenkins/commit/8ef152b652405f78a0098fb77bddc1beab2d4731", "message": "Merge remote-tracking branch 'upstream/master' into external-fingerprint-storage", "committedDate": "2020-05-25T15:10:14Z", "type": "commit"}, {"oid": "34559a937753b4c8cb4c4c8fd03f4b7955869f79", "url": "https://github.com/jenkinsci/jenkins/commit/34559a937753b4c8cb4c4c8fd03f4b7955869f79", "message": "Remove nonnull annotation from getPersistedFacets", "committedDate": "2020-05-26T17:55:06Z", "type": "commit"}, {"oid": "0c9dd59f0096e1e1edee2799fd929dbe593b8d87", "url": "https://github.com/jenkinsci/jenkins/commit/0c9dd59f0096e1e1edee2799fd929dbe593b8d87", "message": "Add System property to choose FingerprintStorage engine", "committedDate": "2020-05-26T18:52:52Z", "type": "commit"}, {"oid": "dffa0e5e4bb308b7c6d50541e361cdd2d7e5fede", "url": "https://github.com/jenkinsci/jenkins/commit/dffa0e5e4bb308b7c6d50541e361cdd2d7e5fede", "message": "Introduce initFacets method for abstraction", "committedDate": "2020-05-26T20:30:20Z", "type": "commit"}, {"oid": "37bb27ceaadbab448bb7beab0191ae491cc51b35", "url": "https://github.com/jenkinsci/jenkins/commit/37bb27ceaadbab448bb7beab0191ae491cc51b35", "message": "Remove setPersistedFacets method", "committedDate": "2020-05-26T20:33:36Z", "type": "commit"}, {"oid": "19d37c9031cf055dfb933cbe6b854e66886bbeae", "url": "https://github.com/jenkinsci/jenkins/commit/19d37c9031cf055dfb933cbe6b854e66886bbeae", "message": "Change scope of getPersistedFacets to default", "committedDate": "2020-05-26T20:42:59Z", "type": "commit"}, {"oid": "a454a6513f1df1cb9762c7c6822e4266a709d261", "url": "https://github.com/jenkinsci/jenkins/commit/a454a6513f1df1cb9762c7c6822e4266a709d261", "message": "Single line return statement", "committedDate": "2020-05-26T20:52:36Z", "type": "commit"}, {"oid": "ac199863e8af51bf97bf07bdc60d2bb50d81c466", "url": "https://github.com/jenkinsci/jenkins/commit/ac199863e8af51bf97bf07bdc60d2bb50d81c466", "message": "Add check for null", "committedDate": "2020-05-27T07:07:18Z", "type": "commit"}, {"oid": "c9e0e60d3a7946631780031096fd260388a0d870", "url": "https://github.com/jenkinsci/jenkins/commit/c9e0e60d3a7946631780031096fd260388a0d870", "message": "Remove checkForNull annotation from initFacets", "committedDate": "2020-05-27T07:10:57Z", "type": "commit"}, {"oid": "1f404266f82545cd865c53036a33c926914c6c9a", "url": "https://github.com/jenkinsci/jenkins/commit/1f404266f82545cd865c53036a33c926914c6c9a", "message": "change access scope from package to public for load", "committedDate": "2020-05-29T12:04:36Z", "type": "commit"}, {"oid": "b75a3b85c5d1c09b60ee077888b9ce719a1a925e", "url": "https://github.com/jenkinsci/jenkins/commit/b75a3b85c5d1c09b60ee077888b9ce719a1a925e", "message": "Merge remote-tracking branch 'upstream/master' into external-fingerprint-storage", "committedDate": "2020-05-29T15:13:50Z", "type": "commit"}, {"oid": "4b73a56821050651229d8d483f9968e1b8f7fa62", "url": "https://github.com/jenkinsci/jenkins/commit/4b73a56821050651229d8d483f9968e1b8f7fa62", "message": "Remove No external use from FingerprintStorageEngine", "committedDate": "2020-05-30T06:25:21Z", "type": "commit"}, {"oid": "984b8fb41b61c6139d959e489576c61d249c37e1", "url": "https://github.com/jenkinsci/jenkins/commit/984b8fb41b61c6139d959e489576c61d249c37e1", "message": "fingerprintStorageEngine moved inside constructor", "committedDate": "2020-05-30T09:54:09Z", "type": "commit"}, {"oid": "544476c34a3ae0cc75616875aef879469abf864b", "url": "https://github.com/jenkinsci/jenkins/commit/544476c34a3ae0cc75616875aef879469abf864b", "message": "Make get function static", "committedDate": "2020-05-30T09:57:59Z", "type": "commit"}, {"oid": "39b42fd80428cc902cc771f25c51208600bbc44c", "url": "https://github.com/jenkinsci/jenkins/commit/39b42fd80428cc902cc771f25c51208600bbc44c", "message": "Remove ordinal value", "committedDate": "2020-05-30T10:06:59Z", "type": "commit"}, {"oid": "bf4b124aa40bf09df8c81f30970ef4200485a2ae", "url": "https://github.com/jenkinsci/jenkins/commit/bf4b124aa40bf09df8c81f30970ef4200485a2ae", "message": "Make get method public", "committedDate": "2020-05-30T10:43:21Z", "type": "commit"}, {"oid": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9", "url": "https://github.com/jenkinsci/jenkins/commit/1c1f9e7741d0fd2987cee12678bc17eb75d82cb9", "message": "make getPersistedFacets public", "committedDate": "2020-06-01T05:58:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NjEyMA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433076120", "bodyText": "+1 to what @StefanSpieker proposed. Please put all new code within the jenkins.* namespace. FileFingerprintStorage  is not actually a part of the Data Model, so I would rather suggest creating a new jenkins.fingerprints package for the implementations. No strong opinion.", "author": "oleg-nenashev", "createdAt": "2020-06-01T07:11:12Z", "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package hudson.model;", "originalCommit": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/FileFingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nsimilarity index 54%\nrename from core/src/main/java/hudson/model/FileFingerprintStorage.java\nrename to core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nindex 6d248dd049..b1128b741e 100644\n--- a/core/src/main/java/hudson/model/FileFingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n\n@@ -21,19 +21,24 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package hudson.model;\n+package jenkins.fingerprints;\n \n import com.thoughtworks.xstream.converters.basic.DateConverter;\n import hudson.Extension;\n import hudson.Util;\n import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n import hudson.model.listeners.SaveableListener;\n import hudson.util.AtomicFileWriter;\n-import hudson.util.PersistedList;\n-import jenkins.model.FingerprintFacet;\n \n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n import java.io.File;\n import java.io.IOException;\n import java.io.PrintWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NjE3NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433076175", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Extension()\n          \n          \n            \n            @Extension", "author": "oleg-nenashev", "createdAt": "2020-06-01T07:11:21Z", "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package hudson.model;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+import hudson.util.PersistedList;\n+import jenkins.model.FingerprintFacet;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Extension()", "originalCommit": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/FileFingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nsimilarity index 54%\nrename from core/src/main/java/hudson/model/FileFingerprintStorage.java\nrename to core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nindex 6d248dd049..b1128b741e 100644\n--- a/core/src/main/java/hudson/model/FileFingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n\n@@ -21,19 +21,24 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package hudson.model;\n+package jenkins.fingerprints;\n \n import com.thoughtworks.xstream.converters.basic.DateConverter;\n import hudson.Extension;\n import hudson.Util;\n import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n import hudson.model.listeners.SaveableListener;\n import hudson.util.AtomicFileWriter;\n-import hudson.util.PersistedList;\n-import jenkins.model.FingerprintFacet;\n \n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n import java.io.File;\n import java.io.IOException;\n import java.io.PrintWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NjQwMw==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433076403", "bodyText": "It would make sense to at least restrict the API as Beta.\nhttps://www.jenkins.io/blog/2018/04/30/using-the-beta-annotation/", "author": "oleg-nenashev", "createdAt": "2020-06-01T07:12:08Z", "path": "core/src/main/java/hudson/model/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package hudson.model;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+import hudson.util.PersistedList;\n+import jenkins.model.FingerprintFacet;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Extension()\n+public class FileFingerprintStorage extends FingerprintStorage {", "originalCommit": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5NjA3Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439996077", "bodyText": "@oleg-nenashev #4731 (comment) was changed accordingly", "author": "stellargo", "createdAt": "2020-06-15T08:00:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NjQwMw=="}], "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/FileFingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nsimilarity index 54%\nrename from core/src/main/java/hudson/model/FileFingerprintStorage.java\nrename to core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nindex 6d248dd049..b1128b741e 100644\n--- a/core/src/main/java/hudson/model/FileFingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n\n@@ -21,19 +21,24 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package hudson.model;\n+package jenkins.fingerprints;\n \n import com.thoughtworks.xstream.converters.basic.DateConverter;\n import hudson.Extension;\n import hudson.Util;\n import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n import hudson.model.listeners.SaveableListener;\n import hudson.util.AtomicFileWriter;\n-import hudson.util.PersistedList;\n-import jenkins.model.FingerprintFacet;\n \n import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n import java.io.File;\n import java.io.IOException;\n import java.io.PrintWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzIwMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433077201", "bodyText": "What does block you from using string.getBytes() with a 8-bit encoding? Why would it need a manual implementation?|", "author": "oleg-nenashev", "createdAt": "2020-06-01T07:14:25Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -927,6 +923,18 @@ public Fingerprint(@CheckForNull Run build, @NonNull String fileName, @NonNull b\n         return Util.toHexString(md5sum);\n     }\n \n+    /**\n+     * Converts md5 hash string to byte array.\n+     *\n+     * @since TODO\n+     */\n+    public static byte[] toByteArray(String md5sum) {", "originalCommit": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex 52e066c506..17391ccac0 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -923,18 +923,6 @@ public class Fingerprint implements ModelObject, Saveable {\n         return Util.toHexString(md5sum);\n     }\n \n-    /**\n-     * Converts md5 hash string to byte array.\n-     *\n-     * @since TODO\n-     */\n-    public static byte[] toByteArray(String md5sum) {\n-        byte[] data = new byte[16];\n-        for( int i=0; i<md5sum.length(); i+=2 )\n-            data[i/2] = (byte)Integer.parseInt(md5sum.substring(i,i+2),16);\n-        return data;\n-    }\n-\n     /**\n      * Gets the timestamp when this record is created.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzYxNQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433077615", "bodyText": "It still needs some kind of fingerprint identifier in the message, e.g. just its ID/hash", "author": "oleg-nenashev", "createdAt": "2020-06-01T07:15:35Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1251,28 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) return;\n \n         long start=0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n-        File file = getFingerprintFile(md5sum);\n-        save(file);\n-        SaveableListener.fireOnChange(this, getConfigFile(file));\n+        FingerprintStorage.get().save(this);\n \n         if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Saving fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            logger.fine(\"Saving fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");", "originalCommit": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex 52e066c506..17391ccac0 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -1255,22 +1243,28 @@ public class Fingerprint implements ModelObject, Saveable {\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this)) return;\n+        if(BulkChange.contains(this)) {\n+            return;\n+        }\n \n-        long start=0;\n+        long start = 0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n+        // Implementations are expected to invoke SaveableListener on their own if relevant\n+        // TODO: Consider improving Saveable Listener API: https://issues.jenkins-ci.org/browse/JENKINS-62543\n         FingerprintStorage.get().save(this);\n \n         if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Saving fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            logger.fine(\"Saving fingerprint \" + getHashString() + \" took \" + (System.currentTimeMillis() - start) + \"ms\");\n     }\n \n     /**\n      * Save the Fingerprint in the given file locally\n      * @throws IOException Save error\n+     * @deprecated as of TODO\n      */\n+    @Deprecated\n     void save(File file) throws IOException {\n         FileFingerprintStorage.save(this, file);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3ODIzNQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433078235", "bodyText": "It is not a public method though it can be accessed from the same package in plugins. Do you see examples of that?\n\nIf yes, then it makes sense to deprecate the method\nIf not, we could consider removing it entirely", "author": "oleg-nenashev", "createdAt": "2020-06-01T07:17:30Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1251,28 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) return;\n \n         long start=0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n-        File file = getFingerprintFile(md5sum);\n-        save(file);\n-        SaveableListener.fireOnChange(this, getConfigFile(file));\n+        FingerprintStorage.get().save(this);\n \n         if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Saving fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            logger.fine(\"Saving fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");\n     }\n \n+    /**\n+     * Save the Fingerprint in the given file locally\n+     * @throws IOException Save error\n+     */\n     void save(File file) throws IOException {", "originalCommit": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM2MzU0MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433363541", "bodyText": "@oleg-nenashev I can see examples of it being used in the tests. Marking it as deprecated.", "author": "stellargo", "createdAt": "2020-06-01T16:57:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3ODIzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex 52e066c506..17391ccac0 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -1255,22 +1243,28 @@ public class Fingerprint implements ModelObject, Saveable {\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this)) return;\n+        if(BulkChange.contains(this)) {\n+            return;\n+        }\n \n-        long start=0;\n+        long start = 0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n+        // Implementations are expected to invoke SaveableListener on their own if relevant\n+        // TODO: Consider improving Saveable Listener API: https://issues.jenkins-ci.org/browse/JENKINS-62543\n         FingerprintStorage.get().save(this);\n \n         if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Saving fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            logger.fine(\"Saving fingerprint \" + getHashString() + \" took \" + (System.currentTimeMillis() - start) + \"ms\");\n     }\n \n     /**\n      * Save the Fingerprint in the given file locally\n      * @throws IOException Save error\n+     * @deprecated as of TODO\n      */\n+    @Deprecated\n     void save(File file) throws IOException {\n         FileFingerprintStorage.save(this, file);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3ODg0Mg==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433078842", "bodyText": "It does not look to be a good public API. Why would you need it here? Could it be just moved to the storage?", "author": "oleg-nenashev", "createdAt": "2020-06-01T07:19:07Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1350,14 +1321,14 @@ public Api getApi() {\n     /**\n      * The file we save our configuration.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {", "originalCommit": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex 52e066c506..17391ccac0 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -1319,67 +1313,65 @@ public class Fingerprint implements ModelObject, Saveable {\n     }\n \n     /**\n-     * The file we save our configuration.\n-     */\n-    public static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n-    }\n-\n-    /**\n-     * Determines the file name from md5sum.\n-     */\n-    public static @NonNull File getFingerprintFile(@NonNull byte[] md5sum) {\n-        assert md5sum.length==16;\n-        return new File( Jenkins.get().getRootDir(),\n-            \"fingerprints/\"+ Util.toHexString(md5sum,0,1)+'/'+Util.toHexString(md5sum,1,1)+'/'+Util.toHexString(md5sum,2,md5sum.length-2)+\".xml\");\n-    }\n-\n-    /**\n-     * Loads a {@link Fingerprint} from a file in the image.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n      * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n      * malformed.\n      */\n-    public static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n         long start=0;\n-        if(logger.isLoggable(Level.FINE))\n+        if(logger.isLoggable(Level.FINE)) {\n             start = System.currentTimeMillis();\n+        }\n \n-        Fingerprint loaded = FingerprintStorage.get().load(md5sum);\n+        Fingerprint loaded = FingerprintStorage.get().load(id);\n         initFacets(loaded);\n \n-        if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Loading fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");\n+        if(logger.isLoggable(Level.FINE)) {\n+            logger.fine(\"Loading fingerprint took \" + (System.currentTimeMillis() - start) + \"ms\");\n+        }\n \n         return loaded;\n     }\n+\n+    /**\n+     * @deprecated as of TODO\n+     */\n+    @Deprecated\n+    /*package*/ static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+        return load(Util.toHexString(md5sum));\n+    }\n+\n+    /**\n+     * @deprecated as of TODO\n+     */\n+    @Deprecated\n     /*package*/ static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n         Fingerprint fingerprint = FileFingerprintStorage.load(file);\n         initFacets(fingerprint);\n \n         return fingerprint;\n     }\n-    static String messageOfParseException(Throwable t) {\n-        if (t instanceof XmlPullParserException || t instanceof EOFException) {\n-            return t.getMessage();\n-        }\n-        Throwable t2 = t.getCause();\n-        if (t2 != null) {\n-            return messageOfParseException(t2);\n-        } else {\n-            return null;\n-        }\n+\n+    /**\n+     * Deletes the {@link Fingerprint} in the Storage with the given unique id.\n+     *\n+     * @since TODO\n+     */\n+    public static void delete(@NonNull String id) throws IOException {\n+        FingerprintStorage.get().delete(id);\n     }\n \n     /**\n-     * Performs Initialization of facets on a new loaded Fingerprint.\n+     * Performs Initialization of facets on a newly loaded Fingerprint.\n      */\n-    private static void initFacets(Fingerprint fingerprint){\n-        if (fingerprint==null) return;\n+    private static void initFacets(@CheckForNull Fingerprint fingerprint) {\n+        if (fingerprint == null) {\n+            return;\n+        }\n \n-        if (fingerprint.facets==null)\n-            fingerprint.facets = new PersistedList<>(fingerprint);\n-        for (FingerprintFacet facet : fingerprint.facets)\n+        for (FingerprintFacet facet : fingerprint.facets) {\n             facet._setOwner(fingerprint);\n+        }\n     }\n \n     @Override public String toString() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3ODg3MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433078871", "bodyText": "same", "author": "oleg-nenashev", "createdAt": "2020-06-01T07:19:12Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1350,14 +1321,14 @@ public Api getApi() {\n     /**\n      * The file we save our configuration.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n+    public static @NonNull XmlFile getConfigFile(@NonNull File file) {\n         return new XmlFile(XSTREAM,file);\n     }\n \n     /**\n      * Determines the file name from md5sum.\n      */\n-    private static @NonNull File getFingerprintFile(@NonNull byte[] md5sum) {\n+    public static @NonNull File getFingerprintFile(@NonNull byte[] md5sum) {", "originalCommit": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex 52e066c506..17391ccac0 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -1319,67 +1313,65 @@ public class Fingerprint implements ModelObject, Saveable {\n     }\n \n     /**\n-     * The file we save our configuration.\n-     */\n-    public static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n-    }\n-\n-    /**\n-     * Determines the file name from md5sum.\n-     */\n-    public static @NonNull File getFingerprintFile(@NonNull byte[] md5sum) {\n-        assert md5sum.length==16;\n-        return new File( Jenkins.get().getRootDir(),\n-            \"fingerprints/\"+ Util.toHexString(md5sum,0,1)+'/'+Util.toHexString(md5sum,1,1)+'/'+Util.toHexString(md5sum,2,md5sum.length-2)+\".xml\");\n-    }\n-\n-    /**\n-     * Loads a {@link Fingerprint} from a file in the image.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n      * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n      * malformed.\n      */\n-    public static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n         long start=0;\n-        if(logger.isLoggable(Level.FINE))\n+        if(logger.isLoggable(Level.FINE)) {\n             start = System.currentTimeMillis();\n+        }\n \n-        Fingerprint loaded = FingerprintStorage.get().load(md5sum);\n+        Fingerprint loaded = FingerprintStorage.get().load(id);\n         initFacets(loaded);\n \n-        if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Loading fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");\n+        if(logger.isLoggable(Level.FINE)) {\n+            logger.fine(\"Loading fingerprint took \" + (System.currentTimeMillis() - start) + \"ms\");\n+        }\n \n         return loaded;\n     }\n+\n+    /**\n+     * @deprecated as of TODO\n+     */\n+    @Deprecated\n+    /*package*/ static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+        return load(Util.toHexString(md5sum));\n+    }\n+\n+    /**\n+     * @deprecated as of TODO\n+     */\n+    @Deprecated\n     /*package*/ static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n         Fingerprint fingerprint = FileFingerprintStorage.load(file);\n         initFacets(fingerprint);\n \n         return fingerprint;\n     }\n-    static String messageOfParseException(Throwable t) {\n-        if (t instanceof XmlPullParserException || t instanceof EOFException) {\n-            return t.getMessage();\n-        }\n-        Throwable t2 = t.getCause();\n-        if (t2 != null) {\n-            return messageOfParseException(t2);\n-        } else {\n-            return null;\n-        }\n+\n+    /**\n+     * Deletes the {@link Fingerprint} in the Storage with the given unique id.\n+     *\n+     * @since TODO\n+     */\n+    public static void delete(@NonNull String id) throws IOException {\n+        FingerprintStorage.get().delete(id);\n     }\n \n     /**\n-     * Performs Initialization of facets on a new loaded Fingerprint.\n+     * Performs Initialization of facets on a newly loaded Fingerprint.\n      */\n-    private static void initFacets(Fingerprint fingerprint){\n-        if (fingerprint==null) return;\n+    private static void initFacets(@CheckForNull Fingerprint fingerprint) {\n+        if (fingerprint == null) {\n+            return;\n+        }\n \n-        if (fingerprint.facets==null)\n-            fingerprint.facets = new PersistedList<>(fingerprint);\n-        for (FingerprintFacet facet : fingerprint.facets)\n+        for (FingerprintFacet facet : fingerprint.facets) {\n             facet._setOwner(fingerprint);\n+        }\n     }\n \n     @Override public String toString() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3OTE2Mg==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433079162", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Performs Initialization of facets on a new loaded Fingerprint.\n          \n          \n            \n                 * Performs Initialization of facets on a newly loaded Fingerprint.", "author": "oleg-nenashev", "createdAt": "2020-06-01T07:20:03Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1428,6 +1370,18 @@ private static String messageOfParseException(Throwable t) {\n         }\n     }\n \n+    /**\n+     * Performs Initialization of facets on a new loaded Fingerprint.", "originalCommit": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex 52e066c506..17391ccac0 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -1319,67 +1313,65 @@ public class Fingerprint implements ModelObject, Saveable {\n     }\n \n     /**\n-     * The file we save our configuration.\n-     */\n-    public static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n-    }\n-\n-    /**\n-     * Determines the file name from md5sum.\n-     */\n-    public static @NonNull File getFingerprintFile(@NonNull byte[] md5sum) {\n-        assert md5sum.length==16;\n-        return new File( Jenkins.get().getRootDir(),\n-            \"fingerprints/\"+ Util.toHexString(md5sum,0,1)+'/'+Util.toHexString(md5sum,1,1)+'/'+Util.toHexString(md5sum,2,md5sum.length-2)+\".xml\");\n-    }\n-\n-    /**\n-     * Loads a {@link Fingerprint} from a file in the image.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n      * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n      * malformed.\n      */\n-    public static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n         long start=0;\n-        if(logger.isLoggable(Level.FINE))\n+        if(logger.isLoggable(Level.FINE)) {\n             start = System.currentTimeMillis();\n+        }\n \n-        Fingerprint loaded = FingerprintStorage.get().load(md5sum);\n+        Fingerprint loaded = FingerprintStorage.get().load(id);\n         initFacets(loaded);\n \n-        if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Loading fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");\n+        if(logger.isLoggable(Level.FINE)) {\n+            logger.fine(\"Loading fingerprint took \" + (System.currentTimeMillis() - start) + \"ms\");\n+        }\n \n         return loaded;\n     }\n+\n+    /**\n+     * @deprecated as of TODO\n+     */\n+    @Deprecated\n+    /*package*/ static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+        return load(Util.toHexString(md5sum));\n+    }\n+\n+    /**\n+     * @deprecated as of TODO\n+     */\n+    @Deprecated\n     /*package*/ static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n         Fingerprint fingerprint = FileFingerprintStorage.load(file);\n         initFacets(fingerprint);\n \n         return fingerprint;\n     }\n-    static String messageOfParseException(Throwable t) {\n-        if (t instanceof XmlPullParserException || t instanceof EOFException) {\n-            return t.getMessage();\n-        }\n-        Throwable t2 = t.getCause();\n-        if (t2 != null) {\n-            return messageOfParseException(t2);\n-        } else {\n-            return null;\n-        }\n+\n+    /**\n+     * Deletes the {@link Fingerprint} in the Storage with the given unique id.\n+     *\n+     * @since TODO\n+     */\n+    public static void delete(@NonNull String id) throws IOException {\n+        FingerprintStorage.get().delete(id);\n     }\n \n     /**\n-     * Performs Initialization of facets on a new loaded Fingerprint.\n+     * Performs Initialization of facets on a newly loaded Fingerprint.\n      */\n-    private static void initFacets(Fingerprint fingerprint){\n-        if (fingerprint==null) return;\n+    private static void initFacets(@CheckForNull Fingerprint fingerprint) {\n+        if (fingerprint == null) {\n+            return;\n+        }\n \n-        if (fingerprint.facets==null)\n-            fingerprint.facets = new PersistedList<>(fingerprint);\n-        for (FingerprintFacet facet : fingerprint.facets)\n+        for (FingerprintFacet facet : fingerprint.facets) {\n             facet._setOwner(fingerprint);\n+        }\n     }\n \n     @Override public String toString() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3OTg3MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433079871", "bodyText": "As discussed on Thursday, I suggest to avoid using explicit MD5 references in the API. We would rather need a variable-length key with a transformation on the storage level. E.g. we already have an issue with Docker image/container fingerprints which much longer IDs than md5", "author": "oleg-nenashev", "createdAt": "2020-06-01T07:22:06Z", "path": "core/src/main/java/hudson/model/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package hudson.model;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import jenkins.util.SystemProperties;\n+\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get(){\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"hudson.model.FileFingerprintStorage\");\n+        return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in the storage.\n+     */\n+    public abstract void save(Fingerprint fp) throws IOException;\n+\n+    /**\n+     * Returns the Fingerprint with the given MD5.", "originalCommit": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/FingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\nsimilarity index 71%\nrename from core/src/main/java/hudson/model/FingerprintStorage.java\nrename to core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\nindex de9735f24a..5291f97034 100644\n--- a/core/src/main/java/hudson/model/FingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n\n@@ -21,17 +21,17 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package hudson.model;\n+package jenkins.fingerprints;\n \n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n import hudson.ExtensionList;\n import hudson.ExtensionPoint;\n \n import java.io.IOException;\n \n+import hudson.model.Fingerprint;\n import jenkins.util.SystemProperties;\n-\n import org.kohsuke.accmod.restrictions.Beta;\n-import org.kohsuke.accmod.restrictions.NoExternalUse;\n import org.kohsuke.accmod.Restricted;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4MDI3Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433080276", "bodyText": "make it final? I doubt there is a need to override them.\nAlso, for such new APIs it makes sense to explicitly document nullness via FindBugs annotations", "author": "oleg-nenashev", "createdAt": "2020-06-01T07:23:12Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1193,6 +1201,15 @@ public int size() {\n         };\n     }\n \n+    /**\n+     * Returns the persisted facets.\n+     *\n+     * @since TODO\n+     */\n+    public PersistedList<FingerprintFacet> getPersistedFacets() {", "originalCommit": "1c1f9e7741d0fd2987cee12678bc17eb75d82cb9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex 52e066c506..17391ccac0 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -1206,7 +1194,7 @@ public class Fingerprint implements ModelObject, Saveable {\n      *\n      * @since TODO\n      */\n-    public PersistedList<FingerprintFacet> getPersistedFacets() {\n+    public final @NonNull PersistedList<FingerprintFacet> getPersistedFacets() {\n         return facets;\n     }\n \n"}}, {"oid": "f2d84a0be68ceb14153f20121d373e7a2920dbfa", "url": "https://github.com/jenkinsci/jenkins/commit/f2d84a0be68ceb14153f20121d373e7a2920dbfa", "message": "Remove brackets from Extension", "committedDate": "2020-06-01T16:12:20Z", "type": "commit"}, {"oid": "441b848459447f254b18e5bf78a9c1b587b5e452", "url": "https://github.com/jenkinsci/jenkins/commit/441b848459447f254b18e5bf78a9c1b587b5e452", "message": "Mark FileFingerprintStorage Beta", "committedDate": "2020-06-01T16:13:33Z", "type": "commit"}, {"oid": "3024f798d52f6dcd22a04e12a27c9d18b0c7b76c", "url": "https://github.com/jenkinsci/jenkins/commit/3024f798d52f6dcd22a04e12a27c9d18b0c7b76c", "message": "Add fingerprint's hash to logging", "committedDate": "2020-06-01T16:54:24Z", "type": "commit"}, {"oid": "8f3e26efce47dad9385a60129ae14944f502e65b", "url": "https://github.com/jenkinsci/jenkins/commit/8f3e26efce47dad9385a60129ae14944f502e65b", "message": "Spelling fix", "committedDate": "2020-06-01T17:01:48Z", "type": "commit"}, {"oid": "82fe6973cb48f32384e9803f8d6312921c4909bc", "url": "https://github.com/jenkinsci/jenkins/commit/82fe6973cb48f32384e9803f8d6312921c4909bc", "message": "Remove toByteArray method", "committedDate": "2020-06-01T17:08:03Z", "type": "commit"}, {"oid": "38be5bf6d4b332dcdabb9ad6cc321a54d0b3dfa1", "url": "https://github.com/jenkinsci/jenkins/commit/38be5bf6d4b332dcdabb9ad6cc321a54d0b3dfa1", "message": "Move getConfigFile and getFingerprintFile to FileFingerprintStorage", "committedDate": "2020-06-01T18:34:00Z", "type": "commit"}, {"oid": "60df0b865126924fc039b3fe2ebb178847b9805d", "url": "https://github.com/jenkinsci/jenkins/commit/60df0b865126924fc039b3fe2ebb178847b9805d", "message": "Annotate and make final: getPersistedFacets", "committedDate": "2020-06-01T18:34:33Z", "type": "commit"}, {"oid": "58f77a6edafc4a8d53a646582d9d25595aa962c6", "url": "https://github.com/jenkinsci/jenkins/commit/58f77a6edafc4a8d53a646582d9d25595aa962c6", "message": "getBytes -> fromHex", "committedDate": "2020-06-01T21:32:43Z", "type": "commit"}, {"oid": "6dfd288ef9f79f18e93a4160a7b274dea393a5e8", "url": "https://github.com/jenkinsci/jenkins/commit/6dfd288ef9f79f18e93a4160a7b274dea393a5e8", "message": "Deprecate Fingerprint.save(File file)", "committedDate": "2020-06-01T22:19:02Z", "type": "commit"}, {"oid": "0b05d292008f949d0dcacbfff4169511e9b709bd", "url": "https://github.com/jenkinsci/jenkins/commit/0b05d292008f949d0dcacbfff4169511e9b709bd", "message": "add version since deprecated", "committedDate": "2020-06-01T22:20:21Z", "type": "commit"}, {"oid": "217310c998d75c305253f5459be903b0f2969aaa", "url": "https://github.com/jenkinsci/jenkins/commit/217310c998d75c305253f5459be903b0f2969aaa", "message": "Deprecate Fingerprint.load(file) method", "committedDate": "2020-06-02T06:04:25Z", "type": "commit"}, {"oid": "7b2d3a0600534a665cba742b59299f63da78c24e", "url": "https://github.com/jenkinsci/jenkins/commit/7b2d3a0600534a665cba742b59299f63da78c24e", "message": "Move FingerprintStorage,FileFingerprintStorage -> jenkins.fingerprints package", "committedDate": "2020-06-02T06:48:33Z", "type": "commit"}, {"oid": "beba5cb64caac0de8e5cfd215b6acdf771507260", "url": "https://github.com/jenkinsci/jenkins/commit/beba5cb64caac0de8e5cfd215b6acdf771507260", "message": "Merge remote-tracking branch 'upstream/master' into external-fingerprint-storage", "committedDate": "2020-06-02T06:48:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY4OTg0NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433689844", "bodyText": "Please also move the test to the jenkins package.", "author": "StefanSpieker", "createdAt": "2020-06-02T07:58:06Z", "path": "test/src/test/java/hudson/model/FingerprintTest.java", "diffHunk": "@@ -23,6 +23,7 @@\n  */\n package hudson.model;", "originalCommit": "beba5cb64caac0de8e5cfd215b6acdf771507260", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcwMTIxMA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r433701210", "bodyText": "Hi @StefanSpieker thanks for reviewing :)\nFingerprintTest is for Fingerprint class, which resides in hudson.model . Should it also be moved to Jenkins package?", "author": "stellargo", "createdAt": "2020-06-02T08:18:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY4OTg0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NTA1MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r436555051", "bodyText": "Sorry, my bad, then please keep it there.", "author": "StefanSpieker", "createdAt": "2020-06-08T09:07:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY4OTg0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU2Mzk1Mg==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r436563952", "bodyText": "No worries, thanks for reviewing :)", "author": "stellargo", "createdAt": "2020-06-08T09:22:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY4OTg0NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "f12fb8ba78ec42600ae1571185bd23aef8351c1e", "url": "https://github.com/jenkinsci/jenkins/commit/f12fb8ba78ec42600ae1571185bd23aef8351c1e", "message": "Deprecate Fingerprint load(@NonNull byte[] md5sum) and move to String id", "committedDate": "2020-06-03T11:04:58Z", "type": "commit"}, {"oid": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98", "url": "https://github.com/jenkinsci/jenkins/commit/2a099808f55a9f82b1e4d93c9b3d33a02a336b98", "message": "Merge remote-tracking branch 'upstream/master' into external-fingerprint-storage", "committedDate": "2020-06-03T11:09:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwOTY4Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434509686", "bodyText": "If you make an API public, it needs to be documented.", "author": "oleg-nenashev", "createdAt": "2020-06-03T11:53:14Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -774,7 +772,7 @@ public static RangeSet fromString(String list, boolean skipError) {\n             return rs;\n         }\n \n-        static final class ConverterImpl implements Converter {\n+        public static final class ConverterImpl implements Converter {", "originalCommit": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex 945c134948..17391ccac0 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -772,7 +770,7 @@ public class Fingerprint implements ModelObject, Saveable {\n             return rs;\n         }\n \n-        public static final class ConverterImpl implements Converter {\n+        static final class ConverterImpl implements Converter {\n             private final Converter collectionConv; // used to convert ArrayList in it\n \n             public ConverterImpl(Converter collectionConv) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxNDQxNg==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434514416", "bodyText": "I would say that it is a Jenkins API issue. SaveableListener is equipped to work only with the Filesystem storage. It might be out of the scope for this project, so I raised https://issues.jenkins-ci.org/browse/JENKINS-62543 . It would be great to add a TODO comment to the code so that visitors\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    FingerprintStorage.get().save(this);\n          \n          \n            \n                    // Implementations are expected to invoke SaveableListener on their own if relevant\n          \n          \n            \n                    // TODO: Consider improving Saveable Listener API: https://issues.jenkins-ci.org/browse/JENKINS-62543\n          \n          \n            \n                    FingerprintStorage.get().save(this);", "author": "oleg-nenashev", "createdAt": "2020-06-03T12:01:56Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1241,30 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) return;\n \n         long start=0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n-        File file = getFingerprintFile(md5sum);\n-        save(file);\n-        SaveableListener.fireOnChange(this, getConfigFile(file));\n+        FingerprintStorage.get().save(this);", "originalCommit": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex 945c134948..17391ccac0 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -1245,16 +1243,20 @@ public class Fingerprint implements ModelObject, Saveable {\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this)) return;\n+        if(BulkChange.contains(this)) {\n+            return;\n+        }\n \n-        long start=0;\n+        long start = 0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n+        // Implementations are expected to invoke SaveableListener on their own if relevant\n+        // TODO: Consider improving Saveable Listener API: https://issues.jenkins-ci.org/browse/JENKINS-62543\n         FingerprintStorage.get().save(this);\n \n         if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Saving fingerprint \"+getHashString()+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n+            logger.fine(\"Saving fingerprint \" + getHashString() + \" took \" + (System.currentTimeMillis() - start) + \"ms\");\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxNDc4MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434514781", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    SaveableListener.fireOnChange(fp, getConfigFile(file));\n          \n          \n            \n                    // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations. https://issues.jenkins-ci.org/browse/JENKINS-62543 \n          \n          \n            \n                    SaveableListener.fireOnChange(fp, getConfigFile(file));", "author": "oleg-nenashev", "createdAt": "2020-06-03T12:02:42Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));", "originalCommit": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nindex 782bd38b57..b1128b741e 100644\n--- a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n\n@@ -35,7 +35,7 @@ import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n import jenkins.model.Jenkins;\n import org.kohsuke.accmod.Restricted;\n-import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n import org.xmlpull.v1.XmlPullParserException;\n \n import java.io.EOFException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxNTcwNA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434515704", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static void initFacets(Fingerprint fingerprint){\n          \n          \n            \n                private static void initFacets(@CheckForNull Fingerprint fingerprint){", "author": "oleg-nenashev", "createdAt": "2020-06-03T12:04:36Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1428,6 +1364,16 @@ private static String messageOfParseException(Throwable t) {\n         }\n     }\n \n+    /**\n+     * Performs Initialization of facets on a newly loaded Fingerprint.\n+     */\n+    private static void initFacets(Fingerprint fingerprint){", "originalCommit": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex 945c134948..17391ccac0 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -1349,29 +1353,25 @@ public class Fingerprint implements ModelObject, Saveable {\n     }\n \n     /**\n-     * @deprecated as of TODO\n+     * Deletes the {@link Fingerprint} in the Storage with the given unique id.\n+     *\n+     * @since TODO\n      */\n-    @Deprecated\n-    static String messageOfParseException(Throwable t) {\n-        if (t instanceof XmlPullParserException || t instanceof EOFException) {\n-            return t.getMessage();\n-        }\n-        Throwable t2 = t.getCause();\n-        if (t2 != null) {\n-            return messageOfParseException(t2);\n-        } else {\n-            return null;\n-        }\n+    public static void delete(@NonNull String id) throws IOException {\n+        FingerprintStorage.get().delete(id);\n     }\n \n     /**\n      * Performs Initialization of facets on a newly loaded Fingerprint.\n      */\n-    private static void initFacets(Fingerprint fingerprint){\n-        if (fingerprint==null) return;\n+    private static void initFacets(@CheckForNull Fingerprint fingerprint) {\n+        if (fingerprint == null) {\n+            return;\n+        }\n \n-        for (FingerprintFacet facet : fingerprint.facets)\n+        for (FingerprintFacet facet : fingerprint.facets) {\n             facet._setOwner(fingerprint);\n+        }\n     }\n \n     @Override public String toString() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxNjEzMA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434516130", "bodyText": "This method was prvate before. No need to deprecate it, you can just remove it", "author": "oleg-nenashev", "createdAt": "2020-06-03T12:05:23Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,75 +1311,48 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))\n+            start = System.currentTimeMillis();\n+\n+        Fingerprint loaded = FingerprintStorage.get().load(id);\n+        initFacets(loaded);\n+\n+        if(logger.isLoggable(Level.FINE))\n+            logger.fine(\"Loading fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");\n+\n+        return loaded;\n     }\n \n     /**\n-     * Determines the file name from md5sum.\n+     * @deprecated as of TODO\n      */\n-    private static @NonNull File getFingerprintFile(@NonNull byte[] md5sum) {\n-        assert md5sum.length==16;\n-        return new File( Jenkins.get().getRootDir(),\n-            \"fingerprints/\"+ Util.toHexString(md5sum,0,1)+'/'+Util.toHexString(md5sum,1,1)+'/'+Util.toHexString(md5sum,2,md5sum.length-2)+\".xml\");\n+    @Deprecated\n+    /*package*/ static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+        return load(Util.toHexString(md5sum));\n     }\n \n     /**\n-     * Loads a {@link Fingerprint} from a file in the image.\n-     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n-     * malformed.\n+     * @deprecated as of TODO\n      */\n-    /*package*/ static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n-        return load(getFingerprintFile(md5sum));\n-    }\n+    @Deprecated\n     /*package*/ static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n-        XmlFile configFile = getConfigFile(file);\n-        if(!configFile.exists())\n-            return null;\n-\n-        long start=0;\n-        if(logger.isLoggable(Level.FINE))\n-            start = System.currentTimeMillis();\n+        Fingerprint fingerprint = FileFingerprintStorage.load(file);\n+        initFacets(fingerprint);\n \n-        try {\n-            Object loaded = configFile.read();\n-            if (!(loaded instanceof Fingerprint)) {\n-                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n-                        + (loaded != null ? loaded.getClass() : \"null\"));\n-            }\n-            Fingerprint f = (Fingerprint) loaded;\n-            if(logger.isLoggable(Level.FINE))\n-                logger.fine(\"Loading fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n-            if (f.facets==null)\n-                f.facets = new PersistedList<>(f);\n-            for (FingerprintFacet facet : f.facets)\n-                facet._setOwner(f);\n-            return f;\n-        } catch (IOException e) {\n-            if(file.exists() && file.length()==0) {\n-                // Despite the use of AtomicFile, there are reports indicating that people often see\n-                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n-                // power loss, etc.) or abnormal program termination.\n-                // generally we don't want to wipe out user data just because we can't load it,\n-                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n-                // like recovering it silently by deleting the file is not a bad idea.\n-                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n-                file.delete();\n-                return null;\n-            }\n-            String parseError = messageOfParseException(e);\n-            if (parseError != null) {\n-                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n-                file.delete();\n-                return null;\n-            }\n-            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n-            throw e;\n-        }\n+        return fingerprint;\n     }\n-    private static String messageOfParseException(Throwable t) {\n+\n+    /**\n+     * @deprecated as of TODO\n+     */\n+    @Deprecated\n+    static String messageOfParseException(Throwable t) {", "originalCommit": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex 945c134948..17391ccac0 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -1317,14 +1319,16 @@ public class Fingerprint implements ModelObject, Saveable {\n      */\n     public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n         long start=0;\n-        if(logger.isLoggable(Level.FINE))\n+        if(logger.isLoggable(Level.FINE)) {\n             start = System.currentTimeMillis();\n+        }\n \n         Fingerprint loaded = FingerprintStorage.get().load(id);\n         initFacets(loaded);\n \n-        if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Loading fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");\n+        if(logger.isLoggable(Level.FINE)) {\n+            logger.fine(\"Loading fingerprint took \" + (System.currentTimeMillis() - start) + \"ms\");\n+        }\n \n         return loaded;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxODMyMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434518321", "bodyText": "This tag might become a source of confusion later if the fingerprint size is expanded. Anyway, we can worry about it when we get there.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            w.print(\"  <md5sum>\");\n          \n          \n            \n                            // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n          \n          \n            \n                            w.print(\"  <md5sum>\");", "author": "oleg-nenashev", "createdAt": "2020-06-03T12:09:26Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                w.print(\"  <md5sum>\");", "originalCommit": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1ODE0Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434658147", "bodyText": "I absolutely agree :) TODO added", "author": "stellargo", "createdAt": "2020-06-03T15:32:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxODMyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nindex 782bd38b57..b1128b741e 100644\n--- a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n\n@@ -35,7 +35,7 @@ import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n import jenkins.model.Jenkins;\n import org.kohsuke.accmod.Restricted;\n-import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n import org.xmlpull.v1.XmlPullParserException;\n \n import java.io.EOFException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyMDIzMA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434520230", "bodyText": "Do we need to introduce methods which iterate fingerprints without loading them?\nAFAICT they are required for effective implementations of  https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/FingerprintMap.java . Same might be needed for bulk loading which is a common use-case for Jenkins Web UI\nCan be done later from what I can dell", "author": "oleg-nenashev", "createdAt": "2020-06-03T12:12:59Z", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {", "originalCommit": "2a099808f55a9f82b1e4d93c9b3d33a02a336b98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5NTkxMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r434695911", "bodyText": "I'll investigate this properly, and then comment back", "author": "stellargo", "createdAt": "2020-06-03T16:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyMDIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0NTI1Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r436245257", "bodyText": "@oleg-nenashev I am understanding the concept, but it would be very helpful if you could point me exactly where such implementation has been made, because I was unable to find it.\nFrom what I can understand, FingerprintMap is ensuring no two Fingerprint objects for the same ID in memory, and that also memory conservation by making these Fingerprints SoftReference.", "author": "stellargo", "createdAt": "2020-06-06T06:57:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyMDIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NDMwOA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437374308", "bodyText": "At any rate, seems that at least FingerprintMap.isReady needs to be amended.", "author": "jglick", "createdAt": "2020-06-09T12:31:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyMDIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxMzg0NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439713844", "bodyText": "FingerprintMap.isReady has now been updated", "author": "stellargo", "createdAt": "2020-06-13T06:20:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyMDIzMA=="}], "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\nindex 5e8e8e0c2d..5291f97034 100644\n--- a/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n\n@@ -23,6 +23,7 @@\n  */\n package jenkins.fingerprints;\n \n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n import hudson.ExtensionList;\n import hudson.ExtensionPoint;\n \n"}}, {"oid": "8758fc5ddafc7eb4451b72d42981034f44be9d09", "url": "https://github.com/jenkinsci/jenkins/commit/8758fc5ddafc7eb4451b72d42981034f44be9d09", "message": "Delete private deprecated method", "committedDate": "2020-06-03T12:44:03Z", "type": "commit"}, {"oid": "99722d6d5a036c0efef7e69c2ebbea4ec91c1cbb", "url": "https://github.com/jenkinsci/jenkins/commit/99722d6d5a036c0efef7e69c2ebbea4ec91c1cbb", "message": "CheckForNull added", "committedDate": "2020-06-03T12:45:47Z", "type": "commit"}, {"oid": "3b8ec4b16e5be0224093e5a478f12039b6701c53", "url": "https://github.com/jenkinsci/jenkins/commit/3b8ec4b16e5be0224093e5a478f12039b6701c53", "message": "Add comments about implementing Saveable Listener", "committedDate": "2020-06-03T12:47:52Z", "type": "commit"}, {"oid": "e18c45fc589c8e9794b70531400cb6774dcf4143", "url": "https://github.com/jenkinsci/jenkins/commit/e18c45fc589c8e9794b70531400cb6774dcf4143", "message": "Add TODO for Saveable Listener", "committedDate": "2020-06-03T12:49:42Z", "type": "commit"}, {"oid": "7a728fb12c9759478373ebe6c532278186efcfe7", "url": "https://github.com/jenkinsci/jenkins/commit/7a728fb12c9759478373ebe6c532278186efcfe7", "message": "Add TODO for renaming md5 in xml", "committedDate": "2020-06-03T12:52:40Z", "type": "commit"}, {"oid": "28df37bf16699049bb8cf7e2be67afb07d096449", "url": "https://github.com/jenkinsci/jenkins/commit/28df37bf16699049bb8cf7e2be67afb07d096449", "message": "Move serialize to FileFingerprintStorage", "committedDate": "2020-06-03T16:12:29Z", "type": "commit"}, {"oid": "fa3bcac940b993c00b81b2c0d1926510df407d0c", "url": "https://github.com/jenkinsci/jenkins/commit/fa3bcac940b993c00b81b2c0d1926510df407d0c", "message": "Make serialize method private", "committedDate": "2020-06-03T16:13:20Z", "type": "commit"}, {"oid": "7c743d539363f6a727543327703232528f46c56a", "url": "https://github.com/jenkinsci/jenkins/commit/7c743d539363f6a727543327703232528f46c56a", "message": "Add docstrings", "committedDate": "2020-06-03T16:18:18Z", "type": "commit"}, {"oid": "f74d7a0139cc9398526158899ccf87999ee918f0", "url": "https://github.com/jenkinsci/jenkins/commit/f74d7a0139cc9398526158899ccf87999ee918f0", "message": "Revert serialize to static", "committedDate": "2020-06-03T16:19:49Z", "type": "commit"}, {"oid": "6d6cd230202529277c004c335183f5f59b0bdcbb", "url": "https://github.com/jenkinsci/jenkins/commit/6d6cd230202529277c004c335183f5f59b0bdcbb", "message": "Introduce deletion in the API", "committedDate": "2020-06-03T20:15:09Z", "type": "commit"}, {"oid": "9e620e5156485916c221b3ec22da9087cc77a62e", "url": "https://github.com/jenkinsci/jenkins/commit/9e620e5156485916c221b3ec22da9087cc77a62e", "message": "Merge remote-tracking branch 'upstream/master' into external-fingerprint-storage", "committedDate": "2020-06-03T20:16:22Z", "type": "commit"}, {"oid": "7576931c2afd98729cb0de412086899079bcf2c4", "url": "https://github.com/jenkinsci/jenkins/commit/7576931c2afd98729cb0de412086899079bcf2c4", "message": "Make messageOfParseException private", "committedDate": "2020-06-03T20:22:55Z", "type": "commit"}, {"oid": "1fc92c6950c14bc33f507fcc1d6fbe4c87f8b7dc", "url": "https://github.com/jenkinsci/jenkins/commit/1fc92c6950c14bc33f507fcc1d6fbe4c87f8b7dc", "message": "Remove Redundant imports", "committedDate": "2020-06-03T20:29:58Z", "type": "commit"}, {"oid": "b911586bc9c729487c5ae137119d073124004857", "url": "https://github.com/jenkinsci/jenkins/commit/b911586bc9c729487c5ae137119d073124004857", "message": "Add test for fingerprint deletion", "committedDate": "2020-06-04T09:57:15Z", "type": "commit"}, {"oid": "3770b3739d7efa0ad25cb2a6b2f702fd51df151d", "url": "https://github.com/jenkinsci/jenkins/commit/3770b3739d7efa0ad25cb2a6b2f702fd51df151d", "message": "Make methods private", "committedDate": "2020-06-04T10:01:34Z", "type": "commit"}, {"oid": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a", "url": "https://github.com/jenkinsci/jenkins/commit/387b2491bbe8e7486c5de9834cc9c81d4e327d6a", "message": "Move deletion test to FingerprintTest", "committedDate": "2020-06-04T10:09:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3NjQzNw==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435276437", "bodyText": "Use curlies on split-line ifs", "author": "afalko", "createdAt": "2020-06-04T13:54:57Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,84 +1311,60 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))", "originalCommit": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex 27172bca75..17391ccac0 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -1317,14 +1319,16 @@ public class Fingerprint implements ModelObject, Saveable {\n      */\n     public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n         long start=0;\n-        if(logger.isLoggable(Level.FINE))\n+        if(logger.isLoggable(Level.FINE)) {\n             start = System.currentTimeMillis();\n+        }\n \n         Fingerprint loaded = FingerprintStorage.get().load(id);\n         initFacets(loaded);\n \n-        if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Loading fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");\n+        if(logger.isLoggable(Level.FINE)) {\n+            logger.fine(\"Loading fingerprint took \" + (System.currentTimeMillis() - start) + \"ms\");\n+        }\n \n         return loaded;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3NjcwMg==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435276702", "bodyText": "Curlies on split-line ifs please", "author": "afalko", "createdAt": "2020-06-04T13:55:15Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,84 +1311,60 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))\n+            start = System.currentTimeMillis();\n+\n+        Fingerprint loaded = FingerprintStorage.get().load(id);\n+        initFacets(loaded);\n+\n+        if(logger.isLoggable(Level.FINE))", "originalCommit": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex 27172bca75..17391ccac0 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -1317,14 +1319,16 @@ public class Fingerprint implements ModelObject, Saveable {\n      */\n     public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n         long start=0;\n-        if(logger.isLoggable(Level.FINE))\n+        if(logger.isLoggable(Level.FINE)) {\n             start = System.currentTimeMillis();\n+        }\n \n         Fingerprint loaded = FingerprintStorage.get().load(id);\n         initFacets(loaded);\n \n-        if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Loading fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");\n+        if(logger.isLoggable(Level.FINE)) {\n+            logger.fine(\"Loading fingerprint took \" + (System.currentTimeMillis() - start) + \"ms\");\n+        }\n \n         return loaded;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3OTIwNw==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435279207", "bodyText": "Please add curlies here", "author": "afalko", "createdAt": "2020-06-04T13:58:37Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,84 +1311,60 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;\n+        if(logger.isLoggable(Level.FINE))\n+            start = System.currentTimeMillis();\n+\n+        Fingerprint loaded = FingerprintStorage.get().load(id);\n+        initFacets(loaded);\n+\n+        if(logger.isLoggable(Level.FINE))\n+            logger.fine(\"Loading fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");\n+\n+        return loaded;\n     }\n \n     /**\n-     * Determines the file name from md5sum.\n+     * @deprecated as of TODO\n      */\n-    private static @NonNull File getFingerprintFile(@NonNull byte[] md5sum) {\n-        assert md5sum.length==16;\n-        return new File( Jenkins.get().getRootDir(),\n-            \"fingerprints/\"+ Util.toHexString(md5sum,0,1)+'/'+Util.toHexString(md5sum,1,1)+'/'+Util.toHexString(md5sum,2,md5sum.length-2)+\".xml\");\n+    @Deprecated\n+    /*package*/ static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n+        return load(Util.toHexString(md5sum));\n     }\n \n     /**\n-     * Loads a {@link Fingerprint} from a file in the image.\n-     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n-     * malformed.\n+     * @deprecated as of TODO\n      */\n-    /*package*/ static @CheckForNull Fingerprint load(@NonNull byte[] md5sum) throws IOException {\n-        return load(getFingerprintFile(md5sum));\n-    }\n+    @Deprecated\n     /*package*/ static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n-        XmlFile configFile = getConfigFile(file);\n-        if(!configFile.exists())\n-            return null;\n+        Fingerprint fingerprint = FileFingerprintStorage.load(file);\n+        initFacets(fingerprint);\n \n-        long start=0;\n-        if(logger.isLoggable(Level.FINE))\n-            start = System.currentTimeMillis();\n+        return fingerprint;\n+    }\n \n-        try {\n-            Object loaded = configFile.read();\n-            if (!(loaded instanceof Fingerprint)) {\n-                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n-                        + (loaded != null ? loaded.getClass() : \"null\"));\n-            }\n-            Fingerprint f = (Fingerprint) loaded;\n-            if(logger.isLoggable(Level.FINE))\n-                logger.fine(\"Loading fingerprint \"+file+\" took \"+(System.currentTimeMillis()-start)+\"ms\");\n-            if (f.facets==null)\n-                f.facets = new PersistedList<>(f);\n-            for (FingerprintFacet facet : f.facets)\n-                facet._setOwner(f);\n-            return f;\n-        } catch (IOException e) {\n-            if(file.exists() && file.length()==0) {\n-                // Despite the use of AtomicFile, there are reports indicating that people often see\n-                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n-                // power loss, etc.) or abnormal program termination.\n-                // generally we don't want to wipe out user data just because we can't load it,\n-                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n-                // like recovering it silently by deleting the file is not a bad idea.\n-                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n-                file.delete();\n-                return null;\n-            }\n-            String parseError = messageOfParseException(e);\n-            if (parseError != null) {\n-                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n-                file.delete();\n-                return null;\n-            }\n-            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n-            throw e;\n-        }\n+    /**\n+     * Deletes the {@link Fingerprint} in the Storage with the given unique id.\n+     *\n+     * @since TODO\n+     */\n+    public static void delete(@NonNull String id) {\n+        FingerprintStorage.get().delete(id);\n     }\n-    private static String messageOfParseException(Throwable t) {\n-        if (t instanceof XmlPullParserException || t instanceof EOFException) {\n-            return t.getMessage();\n-        }\n-        Throwable t2 = t.getCause();\n-        if (t2 != null) {\n-            return messageOfParseException(t2);\n-        } else {\n-            return null;\n-        }\n+\n+    /**\n+     * Performs Initialization of facets on a newly loaded Fingerprint.\n+     */\n+    private static void initFacets(@CheckForNull Fingerprint fingerprint){\n+        if (fingerprint==null) return;\n+\n+        for (FingerprintFacet facet : fingerprint.facets)", "originalCommit": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex 27172bca75..17391ccac0 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -1317,14 +1319,16 @@ public class Fingerprint implements ModelObject, Saveable {\n      */\n     public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n         long start=0;\n-        if(logger.isLoggable(Level.FINE))\n+        if(logger.isLoggable(Level.FINE)) {\n             start = System.currentTimeMillis();\n+        }\n \n         Fingerprint loaded = FingerprintStorage.get().load(id);\n         initFacets(loaded);\n \n-        if(logger.isLoggable(Level.FINE))\n-            logger.fine(\"Loading fingerprint took \"+(System.currentTimeMillis()-start)+\"ms\");\n+        if(logger.isLoggable(Level.FINE)) {\n+            logger.fine(\"Loading fingerprint took \" + (System.currentTimeMillis() - start) + \"ms\");\n+        }\n \n         return loaded;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3OTM4NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435279384", "bodyText": "Curlies", "author": "afalko", "createdAt": "2020-06-04T13:58:50Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())", "originalCommit": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nindex 0f40d7b456..b1128b741e 100644\n--- a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n\n@@ -35,7 +35,7 @@ import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n import jenkins.model.Jenkins;\n import org.kohsuke.accmod.Restricted;\n-import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n import org.xmlpull.v1.XmlPullParserException;\n \n import java.io.EOFException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4MzI1NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435283255", "bodyText": "Do we need to valid that delete was successful?", "author": "afalko", "createdAt": "2020-06-04T14:03:48Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) {\n+        File file = getFingerprintFile(id);\n+        file.delete();", "originalCommit": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcwMzk0MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435703941", "bodyText": "@afalko Thanks, I have added created some exceptions for the same, on the same pattern as the other methods of this class, and delete of the FingerprintCleanupThread class.\nLet me know what you think :)", "author": "stellargo", "createdAt": "2020-06-05T05:53:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4MzI1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyMzk3MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r436023971", "bodyText": "This is mostly as-is I guess. I think as a user, I'll see an exception in the logs for this. This is probably fine for now :)", "author": "afalko", "createdAt": "2020-06-05T16:14:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4MzI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nindex 0f40d7b456..b1128b741e 100644\n--- a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n\n@@ -35,7 +35,7 @@ import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n import jenkins.model.Jenkins;\n import org.kohsuke.accmod.Restricted;\n-import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n import org.xmlpull.v1.XmlPullParserException;\n \n import java.io.EOFException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NDEwNg==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435284106", "bodyText": "Can we use Paths.get to put the path together? What you are doing right now won't be portable to Windows systems.", "author": "afalko", "createdAt": "2020-06-04T14:04:51Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) {\n+        File file = getFingerprintFile(id);\n+        file.delete();\n+\n+        File inner = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2)+\"/\"+id.substring(2,4));", "originalCommit": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nindex 0f40d7b456..b1128b741e 100644\n--- a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n\n@@ -35,7 +35,7 @@ import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n import jenkins.model.Jenkins;\n import org.kohsuke.accmod.Restricted;\n-import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n import org.xmlpull.v1.XmlPullParserException;\n \n import java.io.EOFException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NDY0Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435284646", "bodyText": "Same comment here: non-portable path concatenation", "author": "afalko", "createdAt": "2020-06-04T14:05:34Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) {\n+        File file = getFingerprintFile(id);\n+        file.delete();\n+\n+        File inner = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2)+\"/\"+id.substring(2,4));\n+        String[] inner_files = inner.list();\n+        if (inner_files!=null && inner_files.length==0) inner.delete();\n+\n+        File outer = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2));\n+        String[] outer_files = outer.list();\n+        if (outer_files!=null && outer_files.length==0) outer.delete();\n+    }\n+\n+    /**\n+     * The file we save our configuration.\n+     */\n+    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n+        return new XmlFile(Fingerprint.getXStream(), file);\n+    }\n+\n+    /**\n+     * Determines the file name from unique id (md5sum).\n+     */\n+    private static @NonNull File getFingerprintFile(@NonNull String id) {\n+        return new File( Jenkins.get().getRootDir(),\n+                \"fingerprints/\"+id.substring(0,2)+'/'+id.substring(2,4)+'/'+id.substring(4)+\".xml\");", "originalCommit": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUzMjU2NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435532564", "bodyText": "@afalko I agree with you, but interestingly, in the Jenkins core codebase, I can mostly find non-portable path concatenation being used.\nCC @oleg-nenashev some insights would helpful :)", "author": "stellargo", "createdAt": "2020-06-04T20:33:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NDY0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nindex 0f40d7b456..b1128b741e 100644\n--- a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n\n@@ -35,7 +35,7 @@ import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n import jenkins.model.Jenkins;\n import org.kohsuke.accmod.Restricted;\n-import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n import org.xmlpull.v1.XmlPullParserException;\n \n import java.io.EOFException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NTA1OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435285058", "bodyText": "Improve the variable names t and t2", "author": "afalko", "createdAt": "2020-06-04T14:06:05Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) {\n+        File file = getFingerprintFile(id);\n+        file.delete();\n+\n+        File inner = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2)+\"/\"+id.substring(2,4));\n+        String[] inner_files = inner.list();\n+        if (inner_files!=null && inner_files.length==0) inner.delete();\n+\n+        File outer = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2));\n+        String[] outer_files = outer.list();\n+        if (outer_files!=null && outer_files.length==0) outer.delete();\n+    }\n+\n+    /**\n+     * The file we save our configuration.\n+     */\n+    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n+        return new XmlFile(Fingerprint.getXStream(), file);\n+    }\n+\n+    /**\n+     * Determines the file name from unique id (md5sum).\n+     */\n+    private static @NonNull File getFingerprintFile(@NonNull String id) {\n+        return new File( Jenkins.get().getRootDir(),\n+                \"fingerprints/\"+id.substring(0,2)+'/'+id.substring(2,4)+'/'+id.substring(4)+\".xml\");\n+    }\n+\n+    private static String messageOfParseException(Throwable t) {\n+        if (t instanceof XmlPullParserException || t instanceof EOFException) {", "originalCommit": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nindex 0f40d7b456..b1128b741e 100644\n--- a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n\n@@ -35,7 +35,7 @@ import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n import jenkins.model.Jenkins;\n import org.kohsuke.accmod.Restricted;\n-import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n import org.xmlpull.v1.XmlPullParserException;\n \n import java.io.EOFException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NTcyOA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435285728", "bodyText": "In the comment can you give an example input and output?", "author": "afalko", "createdAt": "2020-06-04T14:06:53Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+@Extension\n+public class FileFingerprintStorage extends FingerprintStorage {\n+\n+    private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n+    private static final DateConverter DATE_CONVERTER = new DateConverter();\n+\n+    /**\n+     * Load the Fingerprint with the given unique id.\n+     */\n+    public @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        return load(getFingerprintFile(id));\n+    }\n+\n+    /**\n+     * Load the Fingerprint stored inside the given file.\n+     */\n+    public static @CheckForNull Fingerprint load(@NonNull File file) throws IOException {\n+        XmlFile configFile = getConfigFile(file);\n+        if(!configFile.exists())\n+            return null;\n+\n+        try {\n+            Object loaded = configFile.read();\n+            if (!(loaded instanceof Fingerprint)) {\n+                throw new IOException(\"Unexpected Fingerprint type. Expected \" + Fingerprint.class + \" or subclass but got \"\n+                        + (loaded != null ? loaded.getClass() : \"null\"));\n+            }\n+            Fingerprint f = (Fingerprint) loaded;\n+            return f;\n+        } catch (IOException e) {\n+            if(file.exists() && file.length()==0) {\n+                // Despite the use of AtomicFile, there are reports indicating that people often see\n+                // empty XML file, presumably either due to file system corruption (perhaps by sudden\n+                // power loss, etc.) or abnormal program termination.\n+                // generally we don't want to wipe out user data just because we can't load it,\n+                // but if the file size is 0, which is what's reported in HUDSON-2012, then it seems\n+                // like recovering it silently by deleting the file is not a bad idea.\n+                logger.log(Level.WARNING, \"Size zero fingerprint. Disk corruption? {0}\", configFile);\n+                file.delete();\n+                return null;\n+            }\n+            String parseError = messageOfParseException(e);\n+            if (parseError != null) {\n+                logger.log(Level.WARNING, \"Malformed XML in {0}: {1}\", new Object[] {configFile, parseError});\n+                file.delete();\n+                return null;\n+            }\n+            logger.log(Level.WARNING, \"Failed to load \"+configFile,e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in local XML-based database.\n+     */\n+    public synchronized void save(Fingerprint fp) throws IOException {\n+        File file = getFingerprintFile(fp.getHashString());\n+        save(fp, file);\n+        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations.\n+        //  https://issues.jenkins-ci.org/browse/JENKINS-62543\n+        SaveableListener.fireOnChange(fp, getConfigFile(file));\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint as XML inside file.\n+     */\n+    public static void save(Fingerprint fp, File file) throws IOException {\n+        if (fp.getPersistedFacets().isEmpty()) {\n+            file.getParentFile().mkdirs();\n+            // JENKINS-16301: fast path for the common case.\n+            AtomicFileWriter afw = new AtomicFileWriter(file);\n+            try {\n+                PrintWriter w = new PrintWriter(afw);\n+                w.println(\"<?xml version='1.1' encoding='UTF-8'?>\");\n+                w.println(\"<fingerprint>\");\n+                w.print(\"  <timestamp>\");\n+                w.print(DATE_CONVERTER.toString(fp.getTimestamp()));\n+                w.println(\"</timestamp>\");\n+                if (fp.getOriginal() != null) {\n+                    w.println(\"  <original>\");\n+                    w.print(\"    <name>\");\n+                    w.print(Util.xmlEscape(fp.getOriginal().getName()));\n+                    w.println(\"</name>\");\n+                    w.print(\"    <number>\");\n+                    w.print(fp.getOriginal().getNumber());\n+                    w.println(\"</number>\");\n+                    w.println(\"  </original>\");\n+                }\n+                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\n+                w.print(\"  <md5sum>\");\n+                w.print(fp.getHashString());\n+                w.println(\"</md5sum>\");\n+                w.print(\"  <fileName>\");\n+                w.print(Util.xmlEscape(fp.getFileName()));\n+                w.println(\"</fileName>\");\n+                w.println(\"  <usages>\");\n+                for (Map.Entry<String, Fingerprint.RangeSet> e : fp.getUsages().entrySet()) {\n+                    w.println(\"    <entry>\");\n+                    w.print(\"      <string>\");\n+                    w.print(Util.xmlEscape(e.getKey()));\n+                    w.println(\"</string>\");\n+                    w.print(\"      <ranges>\");\n+                    w.print(serialize(e.getValue()));\n+                    w.println(\"</ranges>\");\n+                    w.println(\"    </entry>\");\n+                }\n+                w.println(\"  </usages>\");\n+                w.println(\"  <facets/>\");\n+                w.print(\"</fingerprint>\");\n+                w.flush();\n+                afw.commit();\n+            } finally {\n+                afw.abort();\n+            }\n+        } else {\n+            // Slower fallback that can persist facets.\n+            getConfigFile(file).write(fp);\n+        }\n+    }\n+\n+    /**\n+     * Deletes the Fingerprint with the given unique ID.\n+     */\n+    public void delete(String id) {\n+        File file = getFingerprintFile(id);\n+        file.delete();\n+\n+        File inner = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2)+\"/\"+id.substring(2,4));\n+        String[] inner_files = inner.list();\n+        if (inner_files!=null && inner_files.length==0) inner.delete();\n+\n+        File outer = new File(Jenkins.get().getRootDir(), \"fingerprints/\"+id.substring(0,2));\n+        String[] outer_files = outer.list();\n+        if (outer_files!=null && outer_files.length==0) outer.delete();\n+    }\n+\n+    /**\n+     * The file we save our configuration.\n+     */\n+    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n+        return new XmlFile(Fingerprint.getXStream(), file);\n+    }\n+\n+    /**\n+     * Determines the file name from unique id (md5sum).\n+     */\n+    private static @NonNull File getFingerprintFile(@NonNull String id) {\n+        return new File( Jenkins.get().getRootDir(),\n+                \"fingerprints/\"+id.substring(0,2)+'/'+id.substring(2,4)+'/'+id.substring(4)+\".xml\");\n+    }\n+\n+    private static String messageOfParseException(Throwable t) {\n+        if (t instanceof XmlPullParserException || t instanceof EOFException) {\n+            return t.getMessage();\n+        }\n+        Throwable t2 = t.getCause();\n+        if (t2 != null) {\n+            return messageOfParseException(t2);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Used to serialize the range sets (builds) of the fingerprint.", "originalCommit": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nindex 0f40d7b456..b1128b741e 100644\n--- a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n\n@@ -35,7 +35,7 @@ import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n import jenkins.model.Jenkins;\n import org.kohsuke.accmod.Restricted;\n-import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n import org.xmlpull.v1.XmlPullParserException;\n \n import java.io.EOFException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NjI3OQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r435286279", "bodyText": "nit: space between get() and {", "author": "afalko", "createdAt": "2020-06-04T14:07:31Z", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get(){", "originalCommit": "387b2491bbe8e7486c5de9834cc9c81d4e327d6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\nindex f9a1656256..5291f97034 100644\n--- a/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n\n@@ -23,6 +23,7 @@\n  */\n package jenkins.fingerprints;\n \n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n import hudson.ExtensionList;\n import hudson.ExtensionPoint;\n \n"}}, {"oid": "d27f46cb3a27ee538fa90042786d600ea08c50d8", "url": "https://github.com/jenkinsci/jenkins/commit/d27f46cb3a27ee538fa90042786d600ea08c50d8", "message": "Improve code style", "committedDate": "2020-06-04T19:45:12Z", "type": "commit"}, {"oid": "d81767f7e06876cbdc3864d7ffa991ae4d4fd0f7", "url": "https://github.com/jenkinsci/jenkins/commit/d81767f7e06876cbdc3864d7ffa991ae4d4fd0f7", "message": "Improve code style", "committedDate": "2020-06-04T19:51:20Z", "type": "commit"}, {"oid": "e0e3c7a8a878a4245549001b69ac2847225012b2", "url": "https://github.com/jenkinsci/jenkins/commit/e0e3c7a8a878a4245549001b69ac2847225012b2", "message": "Add deletion errors in FileFingerprintStorage#delete", "committedDate": "2020-06-04T20:19:25Z", "type": "commit"}, {"oid": "ccf31bb21b0fc2cb8d31d7d3fb21473a2e6f94d8", "url": "https://github.com/jenkinsci/jenkins/commit/ccf31bb21b0fc2cb8d31d7d3fb21473a2e6f94d8", "message": "Add spaces", "committedDate": "2020-06-04T20:20:52Z", "type": "commit"}, {"oid": "51664e011730eb97a5cecdf666776be2da4cc4a9", "url": "https://github.com/jenkinsci/jenkins/commit/51664e011730eb97a5cecdf666776be2da4cc4a9", "message": "Remove extra empty line", "committedDate": "2020-06-04T20:37:11Z", "type": "commit"}, {"oid": "7dfc22fd0537b8402664081e0f7982aa1e17bc03", "url": "https://github.com/jenkinsci/jenkins/commit/7dfc22fd0537b8402664081e0f7982aa1e17bc03", "message": "Merge remote-tracking branch 'upstream/master' into external-fingerprint-storage", "committedDate": "2020-06-05T05:47:52Z", "type": "commit"}, {"oid": "d4e5c6a37256b2c2feed64d7a20a3e0db87fa572", "url": "https://github.com/jenkinsci/jenkins/commit/d4e5c6a37256b2c2feed64d7a20a3e0db87fa572", "message": "Merge remote-tracking branch 'upstream/master' into external-fingerprint-storage", "committedDate": "2020-06-06T08:39:39Z", "type": "commit"}, {"oid": "2e759ffff07e7c07fd4818139b95523035c2cb71", "url": "https://github.com/jenkinsci/jenkins/commit/2e759ffff07e7c07fd4818139b95523035c2cb71", "message": "Variable renaming", "committedDate": "2020-06-07T11:47:08Z", "type": "commit"}, {"oid": "b5e973b183481900b47ec0c2533de9efa138a270", "url": "https://github.com/jenkinsci/jenkins/commit/b5e973b183481900b47ec0c2533de9efa138a270", "message": "Add documentation", "committedDate": "2020-06-07T11:51:37Z", "type": "commit"}, {"oid": "5d30cf15c0bf3626ec06de2c04fa9a50bf4071ed", "url": "https://github.com/jenkinsci/jenkins/commit/5d30cf15c0bf3626ec06de2c04fa9a50bf4071ed", "message": "Merge remote-tracking branch 'upstream/master' into external-fingerprint-storage", "committedDate": "2020-06-07T11:51:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NzkyOA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r436557928", "bodyText": "please stick to the same format:\nstart = 0;", "author": "StefanSpieker", "createdAt": "2020-06-08T09:11:35Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1348,83 +1313,64 @@ public Api getApi() {\n     }\n \n     /**\n-     * The file we save our configuration.\n+     * Loads a {@link Fingerprint} from the Storage with the given unique id.\n+     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * malformed.\n      */\n-    private static @NonNull XmlFile getConfigFile(@NonNull File file) {\n-        return new XmlFile(XSTREAM,file);\n+    public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n+        long start=0;", "originalCommit": "5d30cf15c0bf3626ec06de2c04fa9a50bf4071ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU2MzAwNg==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r436563006", "bodyText": "@StefanSpieker Thanks for pointing it out :) Fixed!", "author": "stellargo", "createdAt": "2020-06-08T09:20:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NzkyOA=="}], "type": "inlineReview", "revised_code": {"commit": "f0d44bce44008b4f275da4c9bf74292a313c03a0", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex 17391ccac0..020892e32b 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -1314,7 +1314,7 @@ public class Fingerprint implements ModelObject, Saveable {\n \n     /**\n      * Loads a {@link Fingerprint} from the Storage with the given unique id.\n-     * @return Loaded {@link Fingerprint}. Null if the config file does not exist or\n+     * @return Loaded {@link Fingerprint}. {@code null} if the config file does not exist or\n      * malformed.\n      */\n     public static @CheckForNull Fingerprint load(@NonNull String id) throws IOException {\n"}}, {"oid": "542e8614ae4c26244f7fc9b29b561b74fa415532", "url": "https://github.com/jenkinsci/jenkins/commit/542e8614ae4c26244f7fc9b29b561b74fa415532", "message": "Add spacing", "committedDate": "2020-06-08T09:19:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2ODIyNg==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437368226", "bodyText": "BTW please avoid gratuitous reformatting of otherwise untouched code.", "author": "jglick", "createdAt": "2020-06-09T12:24:40Z", "path": "core/src/main/java/hudson/model/Fingerprint.java", "diffHunk": "@@ -1234,74 +1239,34 @@ public int compare(FingerprintFacet o1, FingerprintFacet o2) {\n     }\n \n     /**\n-     * Save the settings to a file.\n+     * Save the Fingerprint in the Fingerprint Storage\n      * @throws IOException Save error\n      */\n     public synchronized void save() throws IOException {\n-        if(BulkChange.contains(this))   return;\n+        if(BulkChange.contains(this)) {\n+            return;\n+        }\n \n-        long start=0;\n+        long start = 0;", "originalCommit": "542e8614ae4c26244f7fc9b29b561b74fa415532", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwMzE1Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437403153", "bodyText": "@jglick Thank you so much for reviewing! #4731 (comment)\nI changed it because of feedback, Ill change it back, no worries :)", "author": "stellargo", "createdAt": "2020-06-09T13:09:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2ODIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxMTEzMg==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437411132", "bodyText": "To be clear, the new format is closer to typical styleguides, I just advise keeping PR diffs as small as practical; if there is a desire to clean up formatting of code, better to do that in dedicated PRs.", "author": "jglick", "createdAt": "2020-06-09T13:20:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2ODIyNg=="}], "type": "inlineReview", "revised_code": {"commit": "de7a107343f9f67da4ff22863c76ae71109a1af6", "chunk": "diff --git a/core/src/main/java/hudson/model/Fingerprint.java b/core/src/main/java/hudson/model/Fingerprint.java\nindex 0ae934dabc..e73d277882 100644\n--- a/core/src/main/java/hudson/model/Fingerprint.java\n+++ b/core/src/main/java/hudson/model/Fingerprint.java\n\n@@ -1247,7 +1247,7 @@ public class Fingerprint implements ModelObject, Saveable {\n             return;\n         }\n \n-        long start = 0;\n+        long start=0;\n         if(logger.isLoggable(Level.FINE))\n             start = System.currentTimeMillis();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3MDYyMw==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437370623", "bodyText": "This whole task should be suppressed if not using FileFingerprintStorage.", "author": "jglick", "createdAt": "2020-06-09T12:27:18Z", "path": "core/src/main/java/hudson/model/FingerprintCleanupThread.java", "diffHunk": "@@ -130,7 +131,7 @@ private boolean check(File fingerprintFile, TaskListener listener) {\n     }\n \n     protected Fingerprint loadFingerprint(File fingerprintFile) throws IOException {\n-        return Fingerprint.load(fingerprintFile);\n+        return FileFingerprintStorage.load(fingerprintFile);", "originalCommit": "542e8614ae4c26244f7fc9b29b561b74fa415532", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3MDk2Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437370967", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Restricted(Beta.class)\n          \n          \n            \n            @Restricted(NoExternalUse.class)", "author": "jglick", "createdAt": "2020-06-09T12:27:40Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import com.thoughtworks.xstream.converters.basic.DateConverter;\n+import hudson.Extension;\n+import hudson.Util;\n+import hudson.XmlFile;\n+import hudson.model.Fingerprint;\n+import hudson.model.listeners.SaveableListener;\n+import hudson.util.AtomicFileWriter;\n+\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import jenkins.model.Jenkins;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import java.io.EOFException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default file system storage implementation for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)", "originalCommit": "542e8614ae4c26244f7fc9b29b561b74fa415532", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\nindex 6c6dcd04f6..b1128b741e 100644\n--- a/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java\n\n@@ -35,7 +35,7 @@ import edu.umd.cs.findbugs.annotations.CheckForNull;\n import edu.umd.cs.findbugs.annotations.NonNull;\n import jenkins.model.Jenkins;\n import org.kohsuke.accmod.Restricted;\n-import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.restrictions.NoExternalUse;\n import org.xmlpull.v1.XmlPullParserException;\n \n import java.io.EOFException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NTA4MA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437375080", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"jenkins.fingerprints.FileFingerprintStorage\");\n          \n          \n            \n                            FileFingerprintStorage.class.getName());", "author": "jglick", "createdAt": "2020-06-09T12:32:18Z", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"jenkins.fingerprints.FileFingerprintStorage\");", "originalCommit": "542e8614ae4c26244f7fc9b29b561b74fa415532", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\nindex 36ace2ee0c..5291f97034 100644\n--- a/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n\n@@ -23,6 +23,7 @@\n  */\n package jenkins.fingerprints;\n \n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n import hudson.ExtensionList;\n import hudson.ExtensionPoint;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NjQ1Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437376457", "bodyText": "Unsafe, this will return null rather than fall back to FileFingerprintStorage. I would suggest simply\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);\n          \n          \n            \n                    return ExtensionList.lookup(FingerprintStorage.class).get(0);\n          \n      \n    \n    \n  \n\nand let Extension.ordinal be used to control which implementation is used. If you want users to select a storage system beyond merely installing a plugin, then introduce a GlobalConfiguration.", "author": "jglick", "createdAt": "2020-06-09T12:33:53Z", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"jenkins.fingerprints.FileFingerprintStorage\");\n+        return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);", "originalCommit": "542e8614ae4c26244f7fc9b29b561b74fa415532", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\nindex 36ace2ee0c..5291f97034 100644\n--- a/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n\n@@ -23,6 +23,7 @@\n  */\n package jenkins.fingerprints;\n \n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n import hudson.ExtensionList;\n import hudson.ExtensionPoint;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3Njc0Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437376743", "bodyText": "Define the ID. @link etc.", "author": "jglick", "createdAt": "2020-06-09T12:34:11Z", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"jenkins.fingerprints.FileFingerprintStorage\");\n+        return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in the storage.\n+     */\n+    public abstract void save(Fingerprint fp) throws IOException;\n+\n+    /**\n+     * Returns the Fingerprint with the given unique ID.", "originalCommit": "542e8614ae4c26244f7fc9b29b561b74fa415532", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\nindex 36ace2ee0c..5291f97034 100644\n--- a/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n\n@@ -23,6 +23,7 @@\n  */\n package jenkins.fingerprints;\n \n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n import hudson.ExtensionList;\n import hudson.ExtensionPoint;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzAyMA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437377020", "bodyText": "Can this return null?", "author": "jglick", "createdAt": "2020-06-09T12:34:39Z", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"jenkins.fingerprints.FileFingerprintStorage\");\n+        return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in the storage.\n+     */\n+    public abstract void save(Fingerprint fp) throws IOException;\n+\n+    /**\n+     * Returns the Fingerprint with the given unique ID.\n+     */\n+    public abstract Fingerprint load(String id) throws IOException;", "originalCommit": "542e8614ae4c26244f7fc9b29b561b74fa415532", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3MTQ4MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437671481", "bodyText": "Yes, added annotation", "author": "stellargo", "createdAt": "2020-06-09T19:37:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzAyMA=="}], "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\nindex 36ace2ee0c..5291f97034 100644\n--- a/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n\n@@ -23,6 +23,7 @@\n  */\n package jenkins.fingerprints;\n \n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n import hudson.ExtensionList;\n import hudson.ExtensionPoint;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzMzMw==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437377333", "bodyText": "Is this a blocking operation\u2014does it really need to throw IOException or can we just assume it is queued for save?", "author": "jglick", "createdAt": "2020-06-09T12:35:10Z", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Sumit Sarin and Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+\n+import java.io.IOException;\n+\n+import hudson.model.Fingerprint;\n+import jenkins.util.SystemProperties;\n+import org.kohsuke.accmod.restrictions.Beta;\n+import org.kohsuke.accmod.Restricted;\n+\n+/**\n+ * Pluggable fingerprint storage API for fingerprints.\n+ *\n+ * @author Sumit Sarin\n+ */\n+@Restricted(Beta.class)\n+public abstract class FingerprintStorage implements ExtensionPoint {\n+\n+    /**\n+     * Returns the configured FingerprintStorage for the instance.\n+     */\n+    public static FingerprintStorage get() {\n+        String fingerprintStorageEngine = SystemProperties.getString(\"FingerprintStorageEngine\",\n+                \"jenkins.fingerprints.FileFingerprintStorage\");\n+        return ExtensionList.lookup(FingerprintStorage.class).getDynamic(fingerprintStorageEngine);\n+    }\n+\n+    /**\n+     * Saves the given Fingerprint in the storage.\n+     */\n+    public abstract void save(Fingerprint fp) throws IOException;", "originalCommit": "542e8614ae4c26244f7fc9b29b561b74fa415532", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3MTMyOQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437671329", "bodyText": "IIUC it doesn't seem to get queued for saving. In the old implementation also it throws IOException", "author": "stellargo", "createdAt": "2020-06-09T19:36:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzMzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NjYxOA==", "url": "https://github.com/jenkinsci/jenkins/pull/4731#discussion_r439496618", "bodyText": "Suggest documenting expectations around the behavior of this method. Is it required to flush data to durable storage, or can it just add the fingerprint to a save queue?", "author": "jglick", "createdAt": "2020-06-12T15:43:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzMzMw=="}], "type": "inlineReview", "revised_code": {"commit": "faa89b3756fc00a2c06361b6dae6e5cdeed2960d", "chunk": "diff --git a/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\nindex 36ace2ee0c..5291f97034 100644\n--- a/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n+++ b/core/src/main/java/jenkins/fingerprints/FingerprintStorage.java\n\n@@ -23,6 +23,7 @@\n  */\n package jenkins.fingerprints;\n \n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n import hudson.ExtensionList;\n import hudson.ExtensionPoint;\n \n"}}, {"oid": "d82300e17452ecc8c6b35e73d29abd4b0930e625", "url": "https://github.com/jenkinsci/jenkins/commit/d82300e17452ecc8c6b35e73d29abd4b0930e625", "message": "Remove spacing", "committedDate": "2020-06-09T18:13:41Z", "type": "commit"}, {"oid": "d1de00d183e7bc6d3a4c5c58ce372ee18d7dc30e", "url": "https://github.com/jenkinsci/jenkins/commit/d1de00d183e7bc6d3a4c5c58ce372ee18d7dc30e", "message": "Beta -> NoExternalUse", "committedDate": "2020-06-09T18:33:48Z", "type": "commit"}, {"oid": "19c4bc1aaec858086265373fba6a8667078008b4", "url": "https://github.com/jenkinsci/jenkins/commit/19c4bc1aaec858086265373fba6a8667078008b4", "message": "Refactoring", "committedDate": "2020-06-09T19:27:47Z", "type": "commit"}, {"oid": "0ba36ebc6a037c4295c12565c69dd950c7dd2700", "url": "https://github.com/jenkinsci/jenkins/commit/0ba36ebc6a037c4295c12565c69dd950c7dd2700", "message": "Add CheckForNull annotation in save method", "committedDate": "2020-06-09T19:34:07Z", "type": "commit"}, {"oid": "17bb8a73b539bb5f93df206e15e1d6aa86313e7f", "url": "https://github.com/jenkinsci/jenkins/commit/17bb8a73b539bb5f93df206e15e1d6aa86313e7f", "message": "Add documentation", "committedDate": "2020-06-10T07:14:32Z", "type": "commit"}, {"oid": "9f8266d7b05a9ee5b0f07b9cb34a2a83569189aa", "url": "https://github.com/jenkinsci/jenkins/commit/9f8266d7b05a9ee5b0f07b9cb34a2a83569189aa", "message": "Refactor FingerprintMap#isReady to FingerprintStorage", "committedDate": "2020-06-10T07:22:50Z", "type": "commit"}]}