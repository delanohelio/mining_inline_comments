{"pr_number": 4655, "pr_title": "[JENKINS-61841] Limit the number of exceptions stored by CompositeIOException", "pr_createdAt": "2020-04-14T21:53:55Z", "pr_url": "https://github.com/jenkinsci/jenkins/pull/4655", "timeline": [{"oid": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7", "url": "https://github.com/jenkinsci/jenkins/commit/acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7", "message": "[JENKINS-61841] Limit the number of exceptions stored by CompositeIOException", "committedDate": "2020-04-14T21:48:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1OTMyOA==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r408459328", "bodyText": "Not strictly necessary, but seemed better to be safe than sorry in case someone makes a change that affects the auto-computed serialVersionUID in the future.", "author": "dwnusbaum", "createdAt": "2020-04-14T21:54:52Z", "path": "core/src/main/java/jenkins/util/io/CompositeIOException.java", "diffHunk": "@@ -30,19 +30,52 @@\n import edu.umd.cs.findbugs.annotations.NonNull;\n import java.io.IOException;\n import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n @Restricted(NoExternalUse.class)\n public class CompositeIOException extends IOException {\n+    private static final long serialVersionUID = 121943141387608148L;", "originalCommit": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "341ffa9f115fce24e94db295f9291d69a1ecb4e5", "chunk": "diff --git a/core/src/main/java/jenkins/util/io/CompositeIOException.java b/core/src/main/java/jenkins/util/io/CompositeIOException.java\nindex fb325870f6..d1ff484c91 100644\n--- a/core/src/main/java/jenkins/util/io/CompositeIOException.java\n+++ b/core/src/main/java/jenkins/util/io/CompositeIOException.java\n\n@@ -43,7 +43,7 @@ public class CompositeIOException extends IOException {\n      * {@code CompositeIOException}.\n      * <p>\n      * The number of exceptions is limited to avoid pathological cases where\n-     * where a huge number of exceptions could lead to excessive memory usage.\n+     * a huge number of exceptions could lead to excessive memory usage.\n      * For example, if the number of exceptions was unlimited, a call to\n      * {@code Util.deleteRecursive} could fail with a\n      * {@code CompositeIOException} that contains an exception for every\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1OTU3OQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r408459579", "bodyText": "Not sure about naming, maybe EXCEPTIONS_LIMIT or MAX_REPORTED_EXCEPTIONS would be better. Same with the limit, maybe 15 or 20 would be a better default?", "author": "dwnusbaum", "createdAt": "2020-04-14T21:55:26Z", "path": "core/src/main/java/jenkins/util/io/CompositeIOException.java", "diffHunk": "@@ -30,19 +30,52 @@\n import edu.umd.cs.findbugs.annotations.NonNull;\n import java.io.IOException;\n import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n @Restricted(NoExternalUse.class)\n public class CompositeIOException extends IOException {\n+    private static final long serialVersionUID = 121943141387608148L;\n+\n+    /**\n+     * The maximum number of exceptions that can be reported by a single\n+     * {@code CompositeIOException}.\n+     * <p>\n+     * The number of exceptions is limited to avoid pathological cases where\n+     * where a huge number of exceptions could lead to excessive memory usage.\n+     * For example, if the number of exceptions was unlimited, a call to\n+     * {@code Util.deleteRecursive} could fail with a\n+     * {@code CompositeIOException} that contains an exception for every\n+     * single file inside of the directory.\n+     */\n+    public static final int EXCEPTION_LIMIT = 10;", "originalCommit": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MzUzMg==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r408463532", "bodyText": "Unclear why this is public. And if it's final, Groovy cannot change it.", "author": "daniel-beck", "createdAt": "2020-04-14T22:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1OTU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUyMDI1NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r408520254", "bodyText": "I think its because its used in tests", "author": "res0nance", "createdAt": "2020-04-15T00:58:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1OTU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg0OTYxNA==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r408849614", "bodyText": "Yes, it is public because it is used in tests. The class itself is annotated with @Restricted(NoExternalUse.class). I made it final because it does not seem to me like something that would be useful for users to change, but like I mentioned in the PR description, if anyone thinks it is important to make it configurable I can make it non-final and allow it to be initialized via system property.", "author": "dwnusbaum", "createdAt": "2020-04-15T13:40:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1OTU3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "341ffa9f115fce24e94db295f9291d69a1ecb4e5", "chunk": "diff --git a/core/src/main/java/jenkins/util/io/CompositeIOException.java b/core/src/main/java/jenkins/util/io/CompositeIOException.java\nindex fb325870f6..d1ff484c91 100644\n--- a/core/src/main/java/jenkins/util/io/CompositeIOException.java\n+++ b/core/src/main/java/jenkins/util/io/CompositeIOException.java\n\n@@ -43,7 +43,7 @@ public class CompositeIOException extends IOException {\n      * {@code CompositeIOException}.\n      * <p>\n      * The number of exceptions is limited to avoid pathological cases where\n-     * where a huge number of exceptions could lead to excessive memory usage.\n+     * a huge number of exceptions could lead to excessive memory usage.\n      * For example, if the number of exceptions was unlimited, a call to\n      * {@code Util.deleteRecursive} could fail with a\n      * {@code CompositeIOException} that contains an exception for every\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MDA3Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r408460076", "bodyText": "I think that it is important to show users that there were more errors that are not being reported, but IDK if this is the best way to do it. We could also append a message to the message of the CompositeIOException itself.", "author": "dwnusbaum", "createdAt": "2020-04-14T21:56:36Z", "path": "core/src/main/java/jenkins/util/io/CompositeIOException.java", "diffHunk": "@@ -30,19 +30,52 @@\n import edu.umd.cs.findbugs.annotations.NonNull;\n import java.io.IOException;\n import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n @Restricted(NoExternalUse.class)\n public class CompositeIOException extends IOException {\n+    private static final long serialVersionUID = 121943141387608148L;\n+\n+    /**\n+     * The maximum number of exceptions that can be reported by a single\n+     * {@code CompositeIOException}.\n+     * <p>\n+     * The number of exceptions is limited to avoid pathological cases where\n+     * where a huge number of exceptions could lead to excessive memory usage.\n+     * For example, if the number of exceptions was unlimited, a call to\n+     * {@code Util.deleteRecursive} could fail with a\n+     * {@code CompositeIOException} that contains an exception for every\n+     * single file inside of the directory.\n+     */\n+    public static final int EXCEPTION_LIMIT = 10;\n+\n     private final List<IOException> exceptions;\n \n+    /**\n+     * Construct a new {@code CompositeIOException} where the given list of\n+     * exceptions are added as suppressed exceptions to the new exception.\n+     * <p>\n+     * If the given list of exceptions is longer than {@link #EXCEPTION_LIMIT},\n+     * the list will be truncated to that length, and an exception whose message\n+     * contains the number of exceptions that were removed will be added as a\n+     * suppressed exception to the new exception.\n+     */\n     public CompositeIOException(String message, @NonNull List<IOException> exceptions) {\n         super(message);\n-        this.exceptions = exceptions;\n-        exceptions.forEach(this::addSuppressed);\n+        if (exceptions.size() > EXCEPTION_LIMIT) {\n+            this.exceptions = new ArrayList<>(exceptions.subList(0, EXCEPTION_LIMIT));\n+            this.exceptions.add(new ExceptionLimitReached(exceptions.size() - EXCEPTION_LIMIT));", "originalCommit": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NDY4Mg==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r409064682", "bodyText": "better to add to the message imo, seems weird to have another object for this", "author": "timja", "createdAt": "2020-04-15T18:57:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MDA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExNjk3Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r409116977", "bodyText": "Yeah, my thought was just that it seems kind of random to have the outer error message include the number of exceptions that were removed, and this way you only see that there are unreported errors in contexts were you are looking at a full stack trace, which seems like the only time you would care, but maybe that doesn't really matter.\nAny thoughts on the phrasing of the message? Maybe something like \"... ($EXCEPTION_LIMIT of $TOTAL suppressed exceptions were recorded)\"?", "author": "dwnusbaum", "createdAt": "2020-04-15T20:34:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MDA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExODA4OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r409118088", "bodyText": "what about?\n\nSuppressed <#> exceptions", "author": "timja", "createdAt": "2020-04-15T20:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MDA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyMTE1MA==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r409121150", "bodyText": "Would that number be the total number of exceptions passed to CompositeIOException (of which EXCEPTION_LIMIT are recorded as suppressed exceptions), or the number that were removed?", "author": "dwnusbaum", "createdAt": "2020-04-15T20:42:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MDA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyMzkxNQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r409123915", "bodyText": "I would show the # of exceptions that the stacktrace has been discarded for total - exception limit if > 0", "author": "timja", "createdAt": "2020-04-15T20:47:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MDA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyNTczOA==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r409125738", "bodyText": "How about using \"discarded\" to avoid ambiguity with what \"suppressed\" refers to?\n\nDiscarded (TOTAL - EXCEPTION_LIMIT) additional exceptions.", "author": "dwnusbaum", "createdAt": "2020-04-15T20:50:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MDA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyNzA2NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r409127064", "bodyText": "\ud83d\udc4d", "author": "timja", "createdAt": "2020-04-15T20:52:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MDA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1NDU5MA==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r409454590", "bodyText": "Seems reasonable!", "author": "varyvol", "createdAt": "2020-04-16T10:34:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MDA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0Njk5NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r409846995", "bodyText": "I changed to modifying the outer exception's message in 341ffa9.", "author": "dwnusbaum", "createdAt": "2020-04-16T21:03:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MDA3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "341ffa9f115fce24e94db295f9291d69a1ecb4e5", "chunk": "diff --git a/core/src/main/java/jenkins/util/io/CompositeIOException.java b/core/src/main/java/jenkins/util/io/CompositeIOException.java\nindex fb325870f6..d1ff484c91 100644\n--- a/core/src/main/java/jenkins/util/io/CompositeIOException.java\n+++ b/core/src/main/java/jenkins/util/io/CompositeIOException.java\n\n@@ -43,7 +43,7 @@ public class CompositeIOException extends IOException {\n      * {@code CompositeIOException}.\n      * <p>\n      * The number of exceptions is limited to avoid pathological cases where\n-     * where a huge number of exceptions could lead to excessive memory usage.\n+     * a huge number of exceptions could lead to excessive memory usage.\n      * For example, if the number of exceptions was unlimited, a call to\n      * {@code Util.deleteRecursive} could fail with a\n      * {@code CompositeIOException} that contains an exception for every\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MDI4NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r408460285", "bodyText": "Not sure how to test this on other platforms without a ton of mocking, which I wanted to avoid.", "author": "dwnusbaum", "createdAt": "2020-04-14T21:57:05Z", "path": "core/src/test/java/jenkins/util/io/PathRemoverTest.java", "diffHunk": "@@ -418,6 +424,34 @@ public void testForceRemoveRecursive_ParentIsSymbolicLink() throws IOException {\n         assertFalse(d1.exists());\n     }\n \n+    @Test\n+    @Issue(\"JENKINS-55448\")\n+    public void testForceRemoveRecursive_TruncatesNumberOfExceptions() throws IOException {\n+        assumeTrue(Functions.isWindows());", "originalCommit": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "341ffa9f115fce24e94db295f9291d69a1ecb4e5", "chunk": "diff --git a/core/src/test/java/jenkins/util/io/PathRemoverTest.java b/core/src/test/java/jenkins/util/io/PathRemoverTest.java\nindex 6a309cca68..f7754f75d2 100644\n--- a/core/src/test/java/jenkins/util/io/PathRemoverTest.java\n+++ b/core/src/test/java/jenkins/util/io/PathRemoverTest.java\n\n@@ -444,9 +445,8 @@ public class PathRemoverTest {\n             PathRemover.newSimpleRemover().forceRemoveRecursive(dir.toPath());\n             fail(\"Deletion should have failed\");\n         } catch (CompositeIOException e) {\n-            assertThat(e.getSuppressed(), arrayWithSize(maxExceptions + 1));\n-            assertThat(e.getSuppressed()[maxExceptions].getMessage(),\n-                    containsString((lockedFiles + 1 - maxExceptions) + \" additional exceptions\"));\n+            assertThat(e.getSuppressed(), arrayWithSize(maxExceptions));\n+            assertThat(e.getMessage(), endsWith(\"(Discarded\" + (lockedFiles + 1 - maxExceptions) + \" additional exceptions)\"));\n         }\n         assertTrue(dir.exists());\n         assertThat(dir.listFiles().length, equalTo(lockedFiles));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MTQzNQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r408461435", "bodyText": "Now that org.junit.Assert.assertThat is deprecated, we have to import all of the methods individually so that we can import and use org.hamcrest.MatcherAssert.assertThat to avoid deprecation warnings without having to write that out fully-qualified every time.", "author": "dwnusbaum", "createdAt": "2020-04-14T21:59:32Z", "path": "core/src/test/java/jenkins/util/io/PathRemoverTest.java", "diffHunk": "@@ -51,10 +51,16 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.arrayWithSize;\n import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.hasItem;\n-import static org.junit.Assert.*;", "originalCommit": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4MTg2Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r408481863", "bodyText": "Wildcard import of org.hamcrest.MatcherAssert.* has been the preferred technique for me thus far.  That prepares for JUnit 5 (a long ways away for us because we need JenkinsRule).\nCan you help me understand why the wildcard import of org.hamcrest.MatcherAssert.* won't work in this case?", "author": "MarkEWaite", "createdAt": "2020-04-14T22:52:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MTQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1NTU3Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r408855576", "bodyText": "It looks like MatcherAssert  only provides assertThat, but existing tests in this file are using assertTrue, assertFalse, etc. from org.junit.Assert, so we still need to pull in those methods somehow. org.junit.Assert also provides assertThat, but that method is deprecated, so we can't do a wildcard import of org.junit.Assert.* if we want to use assertThat from MatcherAssert without having to fully-qualify it at every call site.\nWe could convert all of the tests in this file to use assertThat so we could just import org.hamcrest.MatcherAssert.* and not anything in the org.junit.Assert package, but that seems like something best left for a different PR.", "author": "dwnusbaum", "createdAt": "2020-04-15T13:48:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MTQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMTc3OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r408921778", "bodyText": "Very good point.  I've used the deprecation of org.junit.Assert assertions as a good excuse to replace assertTrue and assertFalse with assertThat.  The resulting failure messages tend to be better with assertThat than they were with assertFalse and assertTrue..\nAgreed wholeheartedly that changing the assertions in tests is for a separate PR, unrelated to this PR.", "author": "MarkEWaite", "createdAt": "2020-04-15T15:14:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MTQzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "341ffa9f115fce24e94db295f9291d69a1ecb4e5", "chunk": "diff --git a/core/src/test/java/jenkins/util/io/PathRemoverTest.java b/core/src/test/java/jenkins/util/io/PathRemoverTest.java\nindex 6a309cca68..f7754f75d2 100644\n--- a/core/src/test/java/jenkins/util/io/PathRemoverTest.java\n+++ b/core/src/test/java/jenkins/util/io/PathRemoverTest.java\n\n@@ -55,6 +55,7 @@ import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.allOf;\n import static org.hamcrest.Matchers.arrayWithSize;\n import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.endsWith;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.hasItem;\n import static org.junit.Assert.assertFalse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2NTQzOA==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r408865438", "bodyText": "Notably in this case, the suppressed exceptions in the outer CompositeIOException are actually instances of CompositeIOException themselves because of the fallback behavior in PathRemover.removeOrMakeRemovableThenRemove, each with two suppressed instances of FileSystemException. That means that the worst-case number of exceptions in a single CompositeIOException for the deletion operations in PathRemover with this patch is actually CompositeIOException.EXCEPTION_LIMIT * 3.", "author": "dwnusbaum", "createdAt": "2020-04-15T14:01:02Z", "path": "core/src/test/java/jenkins/util/io/PathRemoverTest.java", "diffHunk": "@@ -418,6 +424,34 @@ public void testForceRemoveRecursive_ParentIsSymbolicLink() throws IOException {\n         assertFalse(d1.exists());\n     }\n \n+    @Test\n+    @Issue(\"JENKINS-55448\")\n+    public void testForceRemoveRecursive_TruncatesNumberOfExceptions() throws IOException {\n+        assumeTrue(Functions.isWindows());\n+        final int maxExceptions = CompositeIOException.EXCEPTION_LIMIT;\n+        final int lockedFiles = maxExceptions + 5;\n+        final int totalFiles = lockedFiles + 5;\n+        File dir = tmp.newFolder();\n+        File[] files = new File[totalFiles];\n+        for (int i = 0; i < totalFiles; i++) {\n+            files[i] = new File(dir, \"f\" + i);\n+        }\n+        touchWithFileName(files);\n+        for (int i = 0; i < lockedFiles; i++) {\n+            locker.acquireLock(files[i]);\n+        }\n+        try {\n+            PathRemover.newSimpleRemover().forceRemoveRecursive(dir.toPath());\n+            fail(\"Deletion should have failed\");\n+        } catch (CompositeIOException e) {\n+            assertThat(e.getSuppressed(), arrayWithSize(maxExceptions + 1));", "originalCommit": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "341ffa9f115fce24e94db295f9291d69a1ecb4e5", "chunk": "diff --git a/core/src/test/java/jenkins/util/io/PathRemoverTest.java b/core/src/test/java/jenkins/util/io/PathRemoverTest.java\nindex 6a309cca68..f7754f75d2 100644\n--- a/core/src/test/java/jenkins/util/io/PathRemoverTest.java\n+++ b/core/src/test/java/jenkins/util/io/PathRemoverTest.java\n\n@@ -444,9 +445,8 @@ public class PathRemoverTest {\n             PathRemover.newSimpleRemover().forceRemoveRecursive(dir.toPath());\n             fail(\"Deletion should have failed\");\n         } catch (CompositeIOException e) {\n-            assertThat(e.getSuppressed(), arrayWithSize(maxExceptions + 1));\n-            assertThat(e.getSuppressed()[maxExceptions].getMessage(),\n-                    containsString((lockedFiles + 1 - maxExceptions) + \" additional exceptions\"));\n+            assertThat(e.getSuppressed(), arrayWithSize(maxExceptions));\n+            assertThat(e.getMessage(), endsWith(\"(Discarded\" + (lockedFiles + 1 - maxExceptions) + \" additional exceptions)\"));\n         }\n         assertTrue(dir.exists());\n         assertThat(dir.listFiles().length, equalTo(lockedFiles));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1Mjc5OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r409452798", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * where a huge number of exceptions could lead to excessive memory usage.\n          \n          \n            \n                 * a huge number of exceptions could lead to excessive memory usage.", "author": "varyvol", "createdAt": "2020-04-16T10:31:52Z", "path": "core/src/main/java/jenkins/util/io/CompositeIOException.java", "diffHunk": "@@ -30,19 +30,52 @@\n import edu.umd.cs.findbugs.annotations.NonNull;\n import java.io.IOException;\n import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n @Restricted(NoExternalUse.class)\n public class CompositeIOException extends IOException {\n+    private static final long serialVersionUID = 121943141387608148L;\n+\n+    /**\n+     * The maximum number of exceptions that can be reported by a single\n+     * {@code CompositeIOException}.\n+     * <p>\n+     * The number of exceptions is limited to avoid pathological cases where\n+     * where a huge number of exceptions could lead to excessive memory usage.", "originalCommit": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0NzA4NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r409847085", "bodyText": "Fixed in 341ffa9, thanks!", "author": "dwnusbaum", "createdAt": "2020-04-16T21:04:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1Mjc5OA=="}], "type": "inlineReview", "revised_code": {"commit": "341ffa9f115fce24e94db295f9291d69a1ecb4e5", "chunk": "diff --git a/core/src/main/java/jenkins/util/io/CompositeIOException.java b/core/src/main/java/jenkins/util/io/CompositeIOException.java\nindex fb325870f6..d1ff484c91 100644\n--- a/core/src/main/java/jenkins/util/io/CompositeIOException.java\n+++ b/core/src/main/java/jenkins/util/io/CompositeIOException.java\n\n@@ -43,7 +43,7 @@ public class CompositeIOException extends IOException {\n      * {@code CompositeIOException}.\n      * <p>\n      * The number of exceptions is limited to avoid pathological cases where\n-     * where a huge number of exceptions could lead to excessive memory usage.\n+     * a huge number of exceptions could lead to excessive memory usage.\n      * For example, if the number of exceptions was unlimited, a call to\n      * {@code Util.deleteRecursive} could fail with a\n      * {@code CompositeIOException} that contains an exception for every\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1NDExNw==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r409454117", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * where a huge number of exceptions could lead to excessive memory usage.\n          \n          \n            \n                 * a huge number of exceptions could lead to excessive memory usage.", "author": "MRamonLeon", "createdAt": "2020-04-16T10:34:05Z", "path": "core/src/main/java/jenkins/util/io/CompositeIOException.java", "diffHunk": "@@ -30,19 +30,52 @@\n import edu.umd.cs.findbugs.annotations.NonNull;\n import java.io.IOException;\n import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n @Restricted(NoExternalUse.class)\n public class CompositeIOException extends IOException {\n+    private static final long serialVersionUID = 121943141387608148L;\n+\n+    /**\n+     * The maximum number of exceptions that can be reported by a single\n+     * {@code CompositeIOException}.\n+     * <p>\n+     * The number of exceptions is limited to avoid pathological cases where\n+     * where a huge number of exceptions could lead to excessive memory usage.", "originalCommit": "acb2ff00de50f4e2ad7c9cfe5a9b5297aa64e8d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0NzE5OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4655#discussion_r409847198", "bodyText": "Fixed in 341ffa9, thanks!", "author": "dwnusbaum", "createdAt": "2020-04-16T21:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1NDExNw=="}], "type": "inlineReview", "revised_code": {"commit": "341ffa9f115fce24e94db295f9291d69a1ecb4e5", "chunk": "diff --git a/core/src/main/java/jenkins/util/io/CompositeIOException.java b/core/src/main/java/jenkins/util/io/CompositeIOException.java\nindex fb325870f6..d1ff484c91 100644\n--- a/core/src/main/java/jenkins/util/io/CompositeIOException.java\n+++ b/core/src/main/java/jenkins/util/io/CompositeIOException.java\n\n@@ -43,7 +43,7 @@ public class CompositeIOException extends IOException {\n      * {@code CompositeIOException}.\n      * <p>\n      * The number of exceptions is limited to avoid pathological cases where\n-     * where a huge number of exceptions could lead to excessive memory usage.\n+     * a huge number of exceptions could lead to excessive memory usage.\n      * For example, if the number of exceptions was unlimited, a call to\n      * {@code Util.deleteRecursive} could fail with a\n      * {@code CompositeIOException} that contains an exception for every\n"}}, {"oid": "341ffa9f115fce24e94db295f9291d69a1ecb4e5", "url": "https://github.com/jenkinsci/jenkins/commit/341ffa9f115fce24e94db295f9291d69a1ecb4e5", "message": "[JENKINS-61481] Note the number of discarded exceptions in the message of the CompositeIOException", "committedDate": "2020-04-16T21:01:54Z", "type": "commit"}, {"oid": "3f9550468f49fc12cd3abcdc1e650ef982e2318a", "url": "https://github.com/jenkinsci/jenkins/commit/3f9550468f49fc12cd3abcdc1e650ef982e2318a", "message": "[JENKINS-61841] Fix testForceRemoveRecursive_TruncatesNumberOfExceptions", "committedDate": "2020-04-17T14:31:08Z", "type": "commit"}]}