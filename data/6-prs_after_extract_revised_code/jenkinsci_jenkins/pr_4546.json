{"pr_number": 4546, "pr_title": "Manage Jenkins with flow layout and categories", "pr_createdAt": "2020-03-05T18:33:13Z", "pr_url": "https://github.com/jenkinsci/jenkins/pull/4546", "timeline": [{"oid": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa", "url": "https://github.com/jenkinsci/jenkins/commit/61dfeaf113eaa3c8d475f2d90b2263f650f32eaa", "message": "Manage Jenkins with flow layout and categories\n\nCo-authored-by: F\u00e9lix Queiruga <fqueiruga@cloudbees.com>", "committedDate": "2020-03-05T18:31:26Z", "type": "commit"}, {"oid": "5c8165285ec0fe352da6c71acda1321e8d9f08b8", "url": "https://github.com/jenkinsci/jenkins/commit/5c8165285ec0fe352da6c71acda1321e8d9f08b8", "message": "Adapt XPath to handle additional classes in HTML", "committedDate": "2020-03-05T21:18:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1NjAyOQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388556029", "bodyText": "allowing older plugins to do this means we loose the possibility of using an enum for ever.\nhow about a protected method getCategoryString() that subclasses can implement that returns the string and this method calls that, or document some reflection in this javadoc that they can use?\n/**\n * @deprecated only use this if you want to defined a category for a managementLink and not depend on a newer core.\n */\nprotected String getCategoryString() {\n  return Category.UNCATEGORIZED.toString();\n}\n\npublic @nonnull String getCategory() {\n   try { \n       return Category.valueOf(getCategoryString());\n    } catch (IllegalArgumentException | NullPointerExcepton ex) {\n        Logger.log(Level.WARNING, \"invalid category {0} for class {1}\", new Object[]{getCategoryString() , this.getClass().getName()});\n    }\n        return Category.UNCATEGORIZED;\n}\nor\n/**\n * Category for management link.\n * to define a category without depending on a newer core version use the following code.\n * {@code  /* left as an excersize if deemed this is a useful way forward */ }\n */\npublic @nonnull String getCategory() {\n   return Category.UNCATEGORIZED;;\n}", "author": "jtnord", "createdAt": "2020-03-05T20:47:31Z", "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.", "originalCommit": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MDQyNA==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388580424", "bodyText": "I like this. We can even @Restricted(NoExternalUse.class) the getCategoryName() to ensure migration when updating core dependencies.", "author": "daniel-beck", "createdAt": "2020-03-05T21:37:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1NjAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5ODI5Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388598293", "bodyText": "\u2026 except it doesn't seem to work for overrides.", "author": "daniel-beck", "createdAt": "2020-03-05T22:13:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1NjAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwOTg1MA==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388609850", "bodyText": "well it is better than not having anything....", "author": "jtnord", "createdAt": "2020-03-05T22:43:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1NjAyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9", "chunk": "diff --git a/core/src/main/java/hudson/model/ManagementLink.java b/core/src/main/java/hudson/model/ManagementLink.java\nindex 8da0477483..1c5849b267 100644\n--- a/core/src/main/java/hudson/model/ManagementLink.java\n+++ b/core/src/main/java/hudson/model/ManagementLink.java\n\n@@ -134,14 +138,31 @@ public abstract class ManagementLink implements ExtensionPoint, Action {\n         return false;\n     }\n \n+    /**\n+     * Name of the category for this management link. Exists so that plugins with core dependency pre-dating the version\n+     * when this was introduced can define a category. Plugins with newer core dependency override {@link #getCategory()} instead.\n+     *\n+     * @return name of the desired category, one of the enum values of {@link Category}, e.g. {@code STATUS}.\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class) // TODO I don't think this works\n+    protected @Nonnull String getCategoryName() {\n+        return \"UNCATEGORIZED\";\n+    }\n+\n     /**\n      * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n      *\n      * @return An enum value of {@link Category}.\n      * @since TODO\n      */\n-    public @Nonnull String getCategory() {\n-        return Category.UNCATEGORIZED.toString();\n+    public @Nonnull Category getCategory() {\n+        try {\n+            return Category.valueOf(getCategoryName());\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.WARNING, \"invalid category {0} for class {1}\", new Object[]{getCategoryName() , this.getClass().getName()});\n+            return Category.UNCATEGORIZED;\n+        }\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1NjI2Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388556266", "bodyText": "implying you can add more - which means the string return above may return something that is not even in the enum from a \"bad\" plugin..", "author": "jtnord", "createdAt": "2020-03-05T20:48:00Z", "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull String getCategory() {\n+        return Category.UNCATEGORIZED.toString();\n+    }\n+\n+    /**\n+     * Categories supported by this version of core.", "originalCommit": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3NTcxMw==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388575713", "bodyText": "may return something that is not even in the enum from a \"bad\" plugin..\n\nHence https://github.com/jenkinsci/jenkins/pull/4546/files#diff-9e24c3bccc9e921f1a5cc216abc25d03R4722-R4725", "author": "daniel-beck", "createdAt": "2020-03-05T21:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1NjI2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9", "chunk": "diff --git a/core/src/main/java/hudson/model/ManagementLink.java b/core/src/main/java/hudson/model/ManagementLink.java\nindex 8da0477483..1c5849b267 100644\n--- a/core/src/main/java/hudson/model/ManagementLink.java\n+++ b/core/src/main/java/hudson/model/ManagementLink.java\n\n@@ -134,14 +138,31 @@ public abstract class ManagementLink implements ExtensionPoint, Action {\n         return false;\n     }\n \n+    /**\n+     * Name of the category for this management link. Exists so that plugins with core dependency pre-dating the version\n+     * when this was introduced can define a category. Plugins with newer core dependency override {@link #getCategory()} instead.\n+     *\n+     * @return name of the desired category, one of the enum values of {@link Category}, e.g. {@code STATUS}.\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class) // TODO I don't think this works\n+    protected @Nonnull String getCategoryName() {\n+        return \"UNCATEGORIZED\";\n+    }\n+\n     /**\n      * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n      *\n      * @return An enum value of {@link Category}.\n      * @since TODO\n      */\n-    public @Nonnull String getCategory() {\n-        return Category.UNCATEGORIZED.toString();\n+    public @Nonnull Category getCategory() {\n+        try {\n+            return Category.valueOf(getCategoryName());\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.WARNING, \"invalid category {0} for class {1}\", new Object[]{getCategoryName() , this.getClass().getName()});\n+            return Category.UNCATEGORIZED;\n+        }\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1ODkxNA==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388558914", "bodyText": "just inline this in the enum?\n    public enum Category {\n        CONFIGURATION(Messages._ManagementLink_Category_CONFIGURATION()),\n        SECURITY(Messages._ManagementLink_Category_SECURITY());\n        //.....\n        \n        private Localizable label;\n\n        Category(Localizable label) {\n           this.label = label);\n        }\n        public Sting getLabel() {\n            return label.toString();\n        }\n}", "author": "jtnord", "createdAt": "2020-03-05T20:52:54Z", "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull String getCategory() {\n+        return Category.UNCATEGORIZED.toString();\n+    }\n+\n+    /**\n+     * Categories supported by this version of core.\n+     *\n+     * @since TODO\n+     */\n+    public enum Category {\n+        CONFIGURATION,\n+        SECURITY,\n+        STATUS,\n+        TROUBLESHOOTING,\n+        TOOLS,\n+        MISC,\n+        UNCATEGORIZED;\n+\n+        public @Nonnull String getLabel() {", "originalCommit": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3NTU0Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388575546", "bodyText": "Seemed redundant. OTOH, benefit of not using reflection\u2026", "author": "daniel-beck", "createdAt": "2020-03-05T21:27:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1ODkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3OTUzMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388579531", "bodyText": "benefit of not using reflection\n\nthat was what I was trying to avoid :-)", "author": "jtnord", "createdAt": "2020-03-05T21:35:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1ODkxNA=="}], "type": "inlineReview", "revised_code": {"commit": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9", "chunk": "diff --git a/core/src/main/java/hudson/model/ManagementLink.java b/core/src/main/java/hudson/model/ManagementLink.java\nindex 8da0477483..1c5849b267 100644\n--- a/core/src/main/java/hudson/model/ManagementLink.java\n+++ b/core/src/main/java/hudson/model/ManagementLink.java\n\n@@ -134,14 +138,31 @@ public abstract class ManagementLink implements ExtensionPoint, Action {\n         return false;\n     }\n \n+    /**\n+     * Name of the category for this management link. Exists so that plugins with core dependency pre-dating the version\n+     * when this was introduced can define a category. Plugins with newer core dependency override {@link #getCategory()} instead.\n+     *\n+     * @return name of the desired category, one of the enum values of {@link Category}, e.g. {@code STATUS}.\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class) // TODO I don't think this works\n+    protected @Nonnull String getCategoryName() {\n+        return \"UNCATEGORIZED\";\n+    }\n+\n     /**\n      * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n      *\n      * @return An enum value of {@link Category}.\n      * @since TODO\n      */\n-    public @Nonnull String getCategory() {\n-        return Category.UNCATEGORIZED.toString();\n+    public @Nonnull Category getCategory() {\n+        try {\n+            return Category.valueOf(getCategoryName());\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.WARNING, \"invalid category {0} for class {1}\", new Object[]{getCategoryName() , this.getClass().getName()});\n+            return Category.UNCATEGORIZED;\n+        }\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTM3Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388565377", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    MISC,\n          \n          \n            \n                    MISCELLANEOUS,", "author": "jtnord", "createdAt": "2020-03-05T21:06:12Z", "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +133,37 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull String getCategory() {\n+        return Category.UNCATEGORIZED.toString();\n+    }\n+\n+    /**\n+     * Categories supported by this version of core.\n+     *\n+     * @since TODO\n+     */\n+    public enum Category {\n+        CONFIGURATION,\n+        SECURITY,\n+        STATUS,\n+        TROUBLESHOOTING,\n+        TOOLS,\n+        MISC,", "originalCommit": "61dfeaf113eaa3c8d475f2d90b2263f650f32eaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3NTg2NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388575864", "bodyText": "Invites typos in plugins.", "author": "daniel-beck", "createdAt": "2020-03-05T21:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3OTE2MA==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388579160", "bodyText": "you an argue the same for CONFIGURATION vs CONFIG?", "author": "jtnord", "createdAt": "2020-03-05T21:34:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MTg0MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388581841", "bodyText": "No, much more common term, especially in the group I expect to type this in successfully.", "author": "daniel-beck", "createdAt": "2020-03-05T21:40:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTM3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9", "chunk": "diff --git a/core/src/main/java/hudson/model/ManagementLink.java b/core/src/main/java/hudson/model/ManagementLink.java\nindex 8da0477483..1c5849b267 100644\n--- a/core/src/main/java/hudson/model/ManagementLink.java\n+++ b/core/src/main/java/hudson/model/ManagementLink.java\n\n@@ -134,14 +138,31 @@ public abstract class ManagementLink implements ExtensionPoint, Action {\n         return false;\n     }\n \n+    /**\n+     * Name of the category for this management link. Exists so that plugins with core dependency pre-dating the version\n+     * when this was introduced can define a category. Plugins with newer core dependency override {@link #getCategory()} instead.\n+     *\n+     * @return name of the desired category, one of the enum values of {@link Category}, e.g. {@code STATUS}.\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class) // TODO I don't think this works\n+    protected @Nonnull String getCategoryName() {\n+        return \"UNCATEGORIZED\";\n+    }\n+\n     /**\n      * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n      *\n      * @return An enum value of {@link Category}.\n      * @since TODO\n      */\n-    public @Nonnull String getCategory() {\n-        return Category.UNCATEGORIZED.toString();\n+    public @Nonnull Category getCategory() {\n+        try {\n+            return Category.valueOf(getCategoryName());\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.WARNING, \"invalid category {0} for class {1}\", new Object[]{getCategoryName() , this.getClass().getName()});\n+            return Category.UNCATEGORIZED;\n+        }\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3NzY3MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388577671", "bodyText": "need to catch nullPointerException unless you switch to my proposed way (as there are no annotations for plugins not upgrading core and they could heaven forbid return null without any compiler warnng)", "author": "jtnord", "createdAt": "2020-03-05T21:31:24Z", "path": "core/src/main/java/jenkins/model/Jenkins.java", "diffHunk": "@@ -4705,6 +4705,29 @@ public DependencyGraph getDependencyGraph() {\n     public List<ManagementLink> getManagementLinks() {\n         return ManagementLink.all();\n     }\n+\n+    // for Jelly\n+    @Restricted(NoExternalUse.class)\n+    public Map<ManagementLink.Category, List<ManagementLink>> getCategorizedManagementLinks() {\n+        Map<ManagementLink.Category, List<ManagementLink>> byCategory = new TreeMap<>();\n+        for (ManagementLink link : ManagementLink.all()) {\n+            if (link.getIconFileName() == null) {\n+                continue;\n+            }\n+            if (!Jenkins.get().hasPermission(link.getRequiredPermission())) {\n+                continue;\n+            }\n+            String categoryName = link.getCategory();\n+            ManagementLink.Category category;\n+            try {\n+                category = ManagementLink.Category.valueOf(categoryName);\n+            } catch (IllegalArgumentException ex) {", "originalCommit": "5c8165285ec0fe352da6c71acda1321e8d9f08b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9", "chunk": "diff --git a/core/src/main/java/jenkins/model/Jenkins.java b/core/src/main/java/jenkins/model/Jenkins.java\nindex 4d37a5540f..ff74bb1c3a 100644\n--- a/core/src/main/java/jenkins/model/Jenkins.java\n+++ b/core/src/main/java/jenkins/model/Jenkins.java\n\n@@ -4717,14 +4717,7 @@ public class Jenkins extends AbstractCIBase implements DirectlyModifiableTopLeve\n             if (!Jenkins.get().hasPermission(link.getRequiredPermission())) {\n                 continue;\n             }\n-            String categoryName = link.getCategory();\n-            ManagementLink.Category category;\n-            try {\n-                category = ManagementLink.Category.valueOf(categoryName);\n-            } catch (IllegalArgumentException ex) {\n-                category = ManagementLink.Category.UNCATEGORIZED;\n-            }\n-            byCategory.computeIfAbsent(category, c -> new ArrayList<>()).add(link);\n+            byCategory.computeIfAbsent(link.getCategory(), c -> new ArrayList<>()).add(link);\n         }\n         return byCategory;\n     }\n"}}, {"oid": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9", "url": "https://github.com/jenkinsci/jenkins/commit/1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9", "message": "Make this less stringy\n\nCo-authored-by: James Nord <jtnord@users.noreply.github.com>", "committedDate": "2020-03-05T22:13:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMTU0Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388601546", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (RuntimeException e) {\n          \n          \n            \n                    } catch (RuntimeException | NullPointerException e) {\n          \n      \n    \n    \n  \n\ngiven the plugins are not overriding getCategoryName as far as javac is concerned at compile time. (better than blowing up...)", "author": "jtnord", "createdAt": "2020-03-05T22:21:30Z", "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +137,58 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Name of the category for this management link. Exists so that plugins with core dependency pre-dating the version\n+     * when this was introduced can define a category. Plugins with newer core dependency override {@link #getCategory()} instead.\n+     *\n+     * @return name of the desired category, one of the enum values of {@link Category}, e.g. {@code STATUS}.\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class) // TODO I don't think this works\n+    protected @Nonnull String getCategoryName() {\n+        return \"UNCATEGORIZED\";\n+    }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull Category getCategory() {\n+        try {\n+            return Category.valueOf(getCategoryName());\n+        } catch (RuntimeException e) {", "originalCommit": "1fd7decd0d0cfa34731dcfa6d52ae18cb8da13f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxNzA4NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388617085", "bodyText": "NullPointerException extends RuntimeException", "author": "daniel-beck", "createdAt": "2020-03-05T23:02:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMTU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxNzg1Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388617853", "bodyText": "urg yeah.. thought you where catching IllegalArgumentException \ud83e\udd26\u200d\u2642", "author": "jtnord", "createdAt": "2020-03-05T23:04:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMTU0Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "d112c015de1663b31dd602631fa67547d3469d8d", "url": "https://github.com/jenkinsci/jenkins/commit/d112c015de1663b31dd602631fa67547d3469d8d", "message": "Remove unnecessary TODOs\n\nCo-authored-by: F\u00e9lix Queiruga <fqueiruga@cloudbees.com>", "committedDate": "2020-03-06T12:18:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3ODEyMw==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388978123", "bodyText": "does it work or not? \ud83d\ude04", "author": "timja", "createdAt": "2020-03-06T15:44:10Z", "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +137,58 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Name of the category for this management link. Exists so that plugins with core dependency pre-dating the version\n+     * when this was introduced can define a category. Plugins with newer core dependency override {@link #getCategory()} instead.\n+     *\n+     * @return name of the desired category, one of the enum values of {@link Category}, e.g. {@code STATUS}.\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class) // TODO I don't think this works", "originalCommit": "d112c015de1663b31dd602631fa67547d3469d8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3OTg1MA==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388979850", "bodyText": "It doesn't, but since it's a client-side bug in access-checker, it still makes sense to leave the annotation in. Perhaps this?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Restricted(NoExternalUse.class) // TODO I don't think this works\n          \n          \n            \n                @Restricted(NoExternalUse.class) // Doesn't work as of 2020-03 due to https://github.com/kohsuke/access-modifier/issues/21 but annotate anyway", "author": "daniel-beck", "createdAt": "2020-03-06T15:47:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3ODEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk4MDc4Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r388980787", "bodyText": "ah ok, yeah perfect", "author": "timja", "createdAt": "2020-03-06T15:48:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3ODEyMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4OTA0Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r438289047", "bodyText": "Now that I think about this, it seems like an oversight as GlobalConfiguration already had a category:\nhttps://github.com/jenkinsci/jenkins/blob/449c5aced523a6e66fe3d6a804e5dbfd5c5c67c6/core/src/main/java/jenkins/model/GlobalConfigurationCategory.java\ncc @basil", "author": "jetersen", "createdAt": "2020-06-10T17:23:19Z", "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -131,4 +137,58 @@ public boolean getRequiresConfirmation() {\n     public boolean getRequiresPOST() {\n         return false;\n     }\n+\n+    /**\n+     * Name of the category for this management link. Exists so that plugins with core dependency pre-dating the version\n+     * when this was introduced can define a category. Plugins with newer core dependency override {@link #getCategory()} instead.\n+     *\n+     * @return name of the desired category, one of the enum values of {@link Category}, e.g. {@code STATUS}.\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class) // TODO I don't think this works\n+    protected @Nonnull String getCategoryName() {\n+        return \"UNCATEGORIZED\";\n+    }\n+\n+    /**\n+     * Category for management link, uses {@code String} so it can be done with core dependency pre-dating the version this feature was added.\n+     *\n+     * @return An enum value of {@link Category}.\n+     * @since TODO\n+     */\n+    public @Nonnull Category getCategory() {\n+        try {\n+            return Category.valueOf(getCategoryName());\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.WARNING, \"invalid category {0} for class {1}\", new Object[]{getCategoryName() , this.getClass().getName()});\n+            return Category.UNCATEGORIZED;\n+        }\n+    }\n+\n+    /**\n+     * Categories supported by this version of core.\n+     *\n+     * @since TODO\n+     */\n+    public enum Category {\n+        CONFIGURATION(Messages._ManagementLink_Category_CONFIGURATION()),\n+        SECURITY(Messages._ManagementLink_Category_SECURITY()),\n+        STATUS(Messages._ManagementLink_Category_STATUS()),\n+        TROUBLESHOOTING(Messages._ManagementLink_Category_TROUBLESHOOTING()),\n+        TOOLS(Messages._ManagementLink_Category_TOOLS()),\n+        MISC(Messages._ManagementLink_Category_MISC()),\n+        UNCATEGORIZED(Messages._ManagementLink_Category_UNCATEGORIZED());", "originalCommit": "d112c015de1663b31dd602631fa67547d3469d8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI5MzAyMg==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r438293022", "bodyText": "Great! It looks like these categories are relatively new (appearing first in Jenkins 2.226) and have not yet made it to an LTS release. Once my plugin's minimum required Jenkins version contains these new categories, I will start using them.", "author": "basil", "createdAt": "2020-06-10T17:29:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4OTA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI5NTM4NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4546#discussion_r438295385", "bodyText": "Sorry, I misunderstood. Indeed, I now see that I cannot use these categories because they are of type ManagementLink.Category rather than GlobalConfigurationCategory. Anyway, seems outside the scope of JENKINS-62445. If and when there is a working solution for plugin developers to follow regarding CasC categories, I will adopt it.", "author": "basil", "createdAt": "2020-06-10T17:33:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4OTA0Nw=="}], "type": "inlineReview", "revised_code": null}]}