{"pr_number": 4506, "pr_title": "JEP-224 Minimal system read", "pr_createdAt": "2020-02-18T20:49:01Z", "pr_url": "https://github.com/jenkinsci/jenkins/pull/4506", "timeline": [{"oid": "dc396ab1124b220e9cb0668fe4ac25bc1544f1bb", "url": "https://github.com/jenkinsci/jenkins/commit/dc396ab1124b220e9cb0668fe4ac25bc1544f1bb", "message": "Prototype: JEP-223 with JEP-224", "committedDate": "2020-02-18T19:10:10Z", "type": "commit"}, {"oid": "8e57b9d452de0ffb807d9879d84f8773da8e68ae", "url": "https://github.com/jenkinsci/jenkins/commit/8e57b9d452de0ffb807d9879d84f8773da8e68ae", "message": "Implement minimal system read", "committedDate": "2020-02-18T20:43:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzMTY0OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380931648", "bodyText": "I like Oleg's idea of just using Overall/Read here. That might actually make isShowLink unnecessary (for now).", "author": "daniel-beck", "createdAt": "2020-02-18T20:59:55Z", "path": "core/src/main/java/jenkins/management/ConfigureLink.java", "diffHunk": "@@ -52,10 +49,10 @@ public String getDescription() {\n         return Messages.ConfigureLink_Description();\n     }\n \n-    @Nonnull\n     @Override\n-    public Permission getRequiredPermission() {\n-        return Jenkins.MANAGE;", "originalCommit": "8e57b9d452de0ffb807d9879d84f8773da8e68ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3b27277f194f8f82622b3d04fadd9a8b01e15241", "chunk": "diff --git a/core/src/main/java/jenkins/management/ConfigureLink.java b/core/src/main/java/jenkins/management/ConfigureLink.java\nindex da523fde0a..4302912820 100644\n--- a/core/src/main/java/jenkins/management/ConfigureLink.java\n+++ b/core/src/main/java/jenkins/management/ConfigureLink.java\n\n@@ -49,10 +51,10 @@ public class ConfigureLink extends ManagementLink {\n         return Messages.ConfigureLink_Description();\n     }\n \n+    @Nonnull\n     @Override\n-    public boolean isShowLink() {\n-        final Jenkins j = Jenkins.get();\n-        return j.hasPermission(Jenkins.MANAGE) || j.hasPermission(Jenkins.SYSTEM_READ);\n+    public Permission getRequiredPermission() {\n+        return Jenkins.READ;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzMjA3MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380932071", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * but that options editable by users with {@link #MANAGE} only remain editable.\n          \n          \n            \n                 * but that only options editable by users with {@link #MANAGE} are editable.", "author": "daniel-beck", "createdAt": "2020-02-18T21:00:46Z", "path": "core/src/main/java/jenkins/model/Jenkins.java", "diffHunk": "@@ -5263,6 +5263,22 @@ private static void computeVersion(ServletContext context) {\n             SystemProperties.getBoolean(\"jenkins.security.ManagePermission\"),\n             new PermissionScope[]{PermissionScope.JENKINS});\n \n+    /**\n+     * Allows read-only access to large parts of the system configuration.\n+     *\n+     * When combined with {@link #MANAGE}, it is expected that everything is shown as if only {@link #SYSTEM_READ} was granted,\n+     * but that options editable by users with {@link #MANAGE} only remain editable.", "originalCommit": "8e57b9d452de0ffb807d9879d84f8773da8e68ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6396f189d1aa72349455b647b6350d4291939af1", "chunk": "diff --git a/core/src/main/java/jenkins/model/Jenkins.java b/core/src/main/java/jenkins/model/Jenkins.java\nindex c6def9f2c6..4e07bba0ec 100644\n--- a/core/src/main/java/jenkins/model/Jenkins.java\n+++ b/core/src/main/java/jenkins/model/Jenkins.java\n\n@@ -5267,7 +5267,7 @@ public class Jenkins extends AbstractCIBase implements DirectlyModifiableTopLeve\n      * Allows read-only access to large parts of the system configuration.\n      *\n      * When combined with {@link #MANAGE}, it is expected that everything is shown as if only {@link #SYSTEM_READ} was granted,\n-     * but that options editable by users with {@link #MANAGE} only remain editable.\n+     * but that only options editable by users with {@link #MANAGE} are editable.\n      */\n     @Restricted(Beta.class)\n     public static final Permission SYSTEM_READ = new Permission(PERMISSIONS, \"SystemRead\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzMzc5NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380933795", "bodyText": "I think this is wrong (there's also tool configurations). Better to retain the existing behavior and just adapt the Predicate as needed.", "author": "daniel-beck", "createdAt": "2020-02-18T21:04:32Z", "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1082,29 +1078,55 @@ public static String getFooterURL() {\n      * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but with a constant truth predicate, to include all descriptors.\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());\n+        return getSortedDescriptorsForGlobalConfig(descriptor -> true);\n     }\n \n     /**\n      * @deprecated This is rather meaningless.\n      */\n     @Deprecated\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));\n+        return getSortedDescriptorsForGlobalConfigUnclassified();", "originalCommit": "8e57b9d452de0ffb807d9879d84f8773da8e68ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1e378093dccbb5896188f7723d2cd6531557e3c", "chunk": "diff --git a/core/src/main/java/hudson/Functions.java b/core/src/main/java/hudson/Functions.java\nindex 2d261cc308..edbfeb2f97 100644\n--- a/core/src/main/java/hudson/Functions.java\n+++ b/core/src/main/java/hudson/Functions.java\n\n@@ -1112,7 +1112,7 @@ public class Functions {\n \n     @Restricted(NoExternalUse.class)\n     public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {\n-        if (permissions == null) {\n+        if (permissions == null || permissions.length == 0) {\n             return;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNTE2OQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380935169", "bodyText": "requiredPermission == null\n\nI don't think this is possible anymore.\nAlso, this method may no longer be even needed if instead checking for Overall/Read in getRequiredPermission.", "author": "daniel-beck", "createdAt": "2020-02-18T21:07:39Z", "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -122,6 +122,16 @@ public boolean getRequiresConfirmation() {\n         return Jenkins.ADMINISTER;\n     }\n \n+    /**\n+     * Whether to show this link on /manage\n+     *\n+     * @return true if and only if the link should be shown\n+     */\n+    public boolean isShowLink() {\n+        final Permission requiredPermission = getRequiredPermission();\n+        return requiredPermission == null || Jenkins.get().hasPermission(requiredPermission);", "originalCommit": "8e57b9d452de0ffb807d9879d84f8773da8e68ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NDAzNw==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380944037", "bodyText": "correct, intellij says this is impossible", "author": "timja", "createdAt": "2020-02-18T21:25:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNTE2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d1e378093dccbb5896188f7723d2cd6531557e3c", "chunk": "diff --git a/core/src/main/java/hudson/model/ManagementLink.java b/core/src/main/java/hudson/model/ManagementLink.java\nindex 61df858b41..a104741cd1 100644\n--- a/core/src/main/java/hudson/model/ManagementLink.java\n+++ b/core/src/main/java/hudson/model/ManagementLink.java\n\n@@ -129,7 +129,7 @@ public abstract class ManagementLink implements ExtensionPoint, Action {\n      */\n     public boolean isShowLink() {\n         final Permission requiredPermission = getRequiredPermission();\n-        return requiredPermission == null || Jenkins.get().hasPermission(requiredPermission);\n+        return Jenkins.get().hasPermission(requiredPermission);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzOTM5NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380939394", "bodyText": "Array can be empty too.", "author": "daniel-beck", "createdAt": "2020-02-18T21:16:05Z", "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1082,29 +1078,55 @@ public static String getFooterURL() {\n      * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but with a constant truth predicate, to include all descriptors.\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());\n+        return getSortedDescriptorsForGlobalConfig(descriptor -> true);\n     }\n \n     /**\n      * @deprecated This is rather meaningless.\n      */\n     @Deprecated\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));\n+        return getSortedDescriptorsForGlobalConfigUnclassified();\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but for unclassified descriptors only.\n+     * Descriptors in the global configuration form that users with {@link Jenkins#MANAGE} permission can configure.\n+     *\n      * @since 1.506\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {\n-        return getSortedDescriptorsForGlobalConfig(new Predicate<GlobalConfigurationCategory>() {\n-            public boolean apply(GlobalConfigurationCategory cat) {\n-                return cat instanceof GlobalConfigurationCategory.Unclassified;\n+        return getSortedDescriptorsForGlobalConfig(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()));\n+    }\n+\n+    /**\n+     * Descriptors shown in the global configuration form to users with {@link Jenkins#SYSTEM_READ} permission.\n+     *\n+     * @return\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class)\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassifiedReadable() {\n+        return getSortedDescriptorsForGlobalConfig(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && (\n+                Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ)));\n+    }\n+\n+    @Restricted(NoExternalUse.class)\n+    public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {\n+        if (permissions == null) {", "originalCommit": "8e57b9d452de0ffb807d9879d84f8773da8e68ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1e378093dccbb5896188f7723d2cd6531557e3c", "chunk": "diff --git a/core/src/main/java/hudson/Functions.java b/core/src/main/java/hudson/Functions.java\nindex 2d261cc308..edbfeb2f97 100644\n--- a/core/src/main/java/hudson/Functions.java\n+++ b/core/src/main/java/hudson/Functions.java\n\n@@ -1112,7 +1112,7 @@ public class Functions {\n \n     @Restricted(NoExternalUse.class)\n     public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {\n-        if (permissions == null) {\n+        if (permissions == null || permissions.length == 0) {\n             return;\n         }\n \n"}}, {"oid": "6396f189d1aa72349455b647b6350d4291939af1", "url": "https://github.com/jenkinsci/jenkins/commit/6396f189d1aa72349455b647b6350d4291939af1", "message": "Apply suggestions from code review\n\nCo-Authored-By: Daniel Beck <1831569+daniel-beck@users.noreply.github.com>", "committedDate": "2020-02-18T21:24:14Z", "type": "commit"}, {"oid": "d1e378093dccbb5896188f7723d2cd6531557e3c", "url": "https://github.com/jenkinsci/jenkins/commit/d1e378093dccbb5896188f7723d2cd6531557e3c", "message": "Review comments", "committedDate": "2020-02-18T21:27:22Z", "type": "commit"}, {"oid": "e9bb249f7094219b95daabfbd9cb1fc7ab994d18", "url": "https://github.com/jenkinsci/jenkins/commit/e9bb249f7094219b95daabfbd9cb1fc7ab994d18", "message": "Update reference", "committedDate": "2020-02-18T21:28:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzMzM4Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380933383", "bodyText": "?", "author": "jtnord", "createdAt": "2020-02-18T21:03:41Z", "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1082,29 +1078,55 @@ public static String getFooterURL() {\n      * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but with a constant truth predicate, to include all descriptors.\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());\n+        return getSortedDescriptorsForGlobalConfig(descriptor -> true);\n     }\n \n     /**\n      * @deprecated This is rather meaningless.\n      */\n     @Deprecated\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));\n+        return getSortedDescriptorsForGlobalConfigUnclassified();\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but for unclassified descriptors only.\n+     * Descriptors in the global configuration form that users with {@link Jenkins#MANAGE} permission can configure.\n+     *\n      * @since 1.506\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {\n-        return getSortedDescriptorsForGlobalConfig(new Predicate<GlobalConfigurationCategory>() {\n-            public boolean apply(GlobalConfigurationCategory cat) {\n-                return cat instanceof GlobalConfigurationCategory.Unclassified;\n+        return getSortedDescriptorsForGlobalConfig(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()));\n+    }\n+\n+    /**\n+     * Descriptors shown in the global configuration form to users with {@link Jenkins#SYSTEM_READ} permission.\n+     *\n+     * @return", "originalCommit": "8e57b9d452de0ffb807d9879d84f8773da8e68ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1e378093dccbb5896188f7723d2cd6531557e3c", "chunk": "diff --git a/core/src/main/java/hudson/Functions.java b/core/src/main/java/hudson/Functions.java\nindex 2d261cc308..edbfeb2f97 100644\n--- a/core/src/main/java/hudson/Functions.java\n+++ b/core/src/main/java/hudson/Functions.java\n\n@@ -1112,7 +1112,7 @@ public class Functions {\n \n     @Restricted(NoExternalUse.class)\n     public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {\n-        if (permissions == null) {\n+        if (permissions == null || permissions.length == 0) {\n             return;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNjc3NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380936774", "bodyText": "isn't this going to break callers that pass in something expectiing to be called with a GlobalConfigurationCategory?\nI found a few calls in the jenkinsci org.\nnoteably the credentials plugin here", "author": "jtnord", "createdAt": "2020-02-18T21:10:47Z", "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1051,22 +1051,18 @@ public static String getFooterURL() {\n      * we needed this for {@link GlobalConfiguration}s are for backward compatibility.\n      *\n      * @param predicate\n-     *      Filter the descriptors based on {@link GlobalConfigurationCategory}\n+     *      Filter the descriptors based on this predicate\n      * @since 1.494\n      */\n-    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig(Predicate<GlobalConfigurationCategory> predicate) {\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig(Predicate<Descriptor> predicate) {", "originalCommit": "8e57b9d452de0ffb807d9879d84f8773da8e68ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2OTk2MA==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380969960", "bodyText": "Oh no \ud83d\ude2d", "author": "daniel-beck", "createdAt": "2020-02-18T22:19:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNjc3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUyMDA3Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381520073", "bodyText": "very much broken \ud83d\ude22 , two references I can see, credentials and aws-global-configuration-plugin", "author": "timja", "createdAt": "2020-02-19T20:16:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNjc3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUyMzM5MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381523391", "bodyText": "anyone got an idea on the best option?\ncould update both plugins, but it'd be a compatibility break \ud83d\ude22", "author": "timja", "createdAt": "2020-02-19T20:23:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNjc3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg2MTA1Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381861057", "bodyText": "Can we introduce this as a new function and leave the old function alone but deprecate and restrict it?", "author": "res0nance", "createdAt": "2020-02-20T08:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNjc3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg3NzE3NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381877174", "bodyText": "that was that I was thinking, there's ~4 functions, I need to check each one to see if all of them would need the same treatment,\n(for background the change is required so we can get the descriptors required permission due to the manage permission)", "author": "timja", "createdAt": "2020-02-20T09:26:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNjc3NA=="}], "type": "inlineReview", "revised_code": {"commit": "4f21916a0199897fc1beffb4565b9bec932467b1", "chunk": "diff --git a/core/src/main/java/hudson/Functions.java b/core/src/main/java/hudson/Functions.java\nindex 2d261cc308..9271e133a3 100644\n--- a/core/src/main/java/hudson/Functions.java\n+++ b/core/src/main/java/hudson/Functions.java\n\n@@ -1053,8 +1053,52 @@ public class Functions {\n      * @param predicate\n      *      Filter the descriptors based on this predicate\n      * @since 1.494\n+     * @deprecated use {@link #getSortedDescriptorsForGlobalConfigByDescriptor(Predicate)}\n      */\n-    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig(Predicate<Descriptor> predicate) {\n+    @Deprecated\n+    @Restricted(NoExternalUse.class)\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig(com.google.common.base.Predicate<GlobalConfigurationCategory> predicate) {\n+        ExtensionList<Descriptor> exts = ExtensionList.lookup(Descriptor.class);\n+        List<Tag> r = new ArrayList<>(exts.size());\n+\n+        for (ExtensionComponent<Descriptor> c : exts.getComponents()) {\n+            Descriptor d = c.getInstance();\n+            if (d.getGlobalConfigPage()==null)  continue;\n+\n+            if (!Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission())) {\n+                continue;\n+            }\n+\n+            if (predicate.apply(d.getCategory())) {\n+                r.add(new Tag(c.ordinal(), d));\n+            }\n+        }\n+        Collections.sort(r);\n+\n+        List<Descriptor> answer = new ArrayList<>(r.size());\n+        for (Tag d : r) answer.add(d.d);\n+\n+        return DescriptorVisibilityFilter.apply(Jenkins.get(),answer);\n+    }\n+\n+    /**\n+     * Gets all the descriptors sorted by their inheritance tree of {@link Describable}\n+     * so that descriptors of similar types come nearby.\n+     *\n+     * <p>\n+     * We sort them by {@link Extension#ordinal()} but only for {@link GlobalConfiguration}s,\n+     * as the value is normally used to compare similar kinds of extensions, and we needed\n+     * {@link GlobalConfiguration}s to be able to position themselves in a layer above.\n+     * This however creates some asymmetry between regular {@link Descriptor}s and {@link GlobalConfiguration}s.\n+     * Perhaps it is better to introduce another annotation element? But then,\n+     * extensions shouldn't normally concern themselves about ordering too much, and the only reason\n+     * we needed this for {@link GlobalConfiguration}s are for backward compatibility.\n+     *\n+     * @param predicate\n+     *      Filter the descriptors based on this predicate\n+     * @since TODO\n+     */\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigByDescriptor(Predicate<Descriptor> predicate) {\n         ExtensionList<Descriptor> exts = ExtensionList.lookup(Descriptor.class);\n         List<Tag> r = new ArrayList<>(exts.size());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNzc5OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380937798", "bodyText": "ArrayIndexOutOfBOundsException if passed in a zero length array.", "author": "jtnord", "createdAt": "2020-02-18T21:12:38Z", "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1082,29 +1078,55 @@ public static String getFooterURL() {\n      * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but with a constant truth predicate, to include all descriptors.\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());\n+        return getSortedDescriptorsForGlobalConfig(descriptor -> true);\n     }\n \n     /**\n      * @deprecated This is rather meaningless.\n      */\n     @Deprecated\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));\n+        return getSortedDescriptorsForGlobalConfigUnclassified();\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but for unclassified descriptors only.\n+     * Descriptors in the global configuration form that users with {@link Jenkins#MANAGE} permission can configure.\n+     *\n      * @since 1.506\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {\n-        return getSortedDescriptorsForGlobalConfig(new Predicate<GlobalConfigurationCategory>() {\n-            public boolean apply(GlobalConfigurationCategory cat) {\n-                return cat instanceof GlobalConfigurationCategory.Unclassified;\n+        return getSortedDescriptorsForGlobalConfig(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()));\n+    }\n+\n+    /**\n+     * Descriptors shown in the global configuration form to users with {@link Jenkins#SYSTEM_READ} permission.\n+     *\n+     * @return\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class)\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassifiedReadable() {\n+        return getSortedDescriptorsForGlobalConfig(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && (\n+                Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ)));\n+    }\n+\n+    @Restricted(NoExternalUse.class)\n+    public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {\n+        if (permissions == null) {\n+            return;\n+        }\n+\n+        boolean failed = true;\n+        for (Permission permission : permissions) {\n+            if (ac.hasPermission(permission)) {\n+                failed = false;\n             }\n-        });\n+        }\n+        if (failed) {\n+            ac.checkPermission(permissions[0]);", "originalCommit": "8e57b9d452de0ffb807d9879d84f8773da8e68ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyMzI3NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381123275", "bodyText": "https://github.com/jenkinsci/jenkins/pull/4506/files#diff-841df66889e3c3214c68de134dfe05beR1115\nchanged it earlier", "author": "timja", "createdAt": "2020-02-19T07:48:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNzc5OA=="}], "type": "inlineReview", "revised_code": {"commit": "d1e378093dccbb5896188f7723d2cd6531557e3c", "chunk": "diff --git a/core/src/main/java/hudson/Functions.java b/core/src/main/java/hudson/Functions.java\nindex 2d261cc308..edbfeb2f97 100644\n--- a/core/src/main/java/hudson/Functions.java\n+++ b/core/src/main/java/hudson/Functions.java\n\n@@ -1112,7 +1112,7 @@ public class Functions {\n \n     @Restricted(NoExternalUse.class)\n     public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {\n-        if (permissions == null) {\n+        if (permissions == null || permissions.length == 0) {\n             return;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzOTIwMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380939201", "bodyText": "if you only want to see if any permission matches break the loop (or return) after the fist match.\nthe error here is looking not so good.  whilst the exception would show user is missing foobar permision they may only need wibble permission.  can we be explicit in the error that they are missing any of the permissions by throwing a AUthZ exception with a populated message?", "author": "jtnord", "createdAt": "2020-02-18T21:15:45Z", "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1082,29 +1078,55 @@ public static String getFooterURL() {\n      * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but with a constant truth predicate, to include all descriptors.\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());\n+        return getSortedDescriptorsForGlobalConfig(descriptor -> true);\n     }\n \n     /**\n      * @deprecated This is rather meaningless.\n      */\n     @Deprecated\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));\n+        return getSortedDescriptorsForGlobalConfigUnclassified();\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but for unclassified descriptors only.\n+     * Descriptors in the global configuration form that users with {@link Jenkins#MANAGE} permission can configure.\n+     *\n      * @since 1.506\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {\n-        return getSortedDescriptorsForGlobalConfig(new Predicate<GlobalConfigurationCategory>() {\n-            public boolean apply(GlobalConfigurationCategory cat) {\n-                return cat instanceof GlobalConfigurationCategory.Unclassified;\n+        return getSortedDescriptorsForGlobalConfig(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()));\n+    }\n+\n+    /**\n+     * Descriptors shown in the global configuration form to users with {@link Jenkins#SYSTEM_READ} permission.\n+     *\n+     * @return\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class)\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassifiedReadable() {\n+        return getSortedDescriptorsForGlobalConfig(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && (\n+                Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ)));\n+    }\n+\n+    @Restricted(NoExternalUse.class)\n+    public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {\n+        if (permissions == null) {\n+            return;\n+        }\n+\n+        boolean failed = true;\n+        for (Permission permission : permissions) {\n+            if (ac.hasPermission(permission)) {\n+                failed = false;\n             }\n-        });\n+        }\n+        if (failed) {\n+            ac.checkPermission(permissions[0]);\n+        }", "originalCommit": "8e57b9d452de0ffb807d9879d84f8773da8e68ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwNDY2Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381204667", "bodyText": "should be simpler now,", "author": "timja", "createdAt": "2020-02-19T10:28:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzOTIwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "d1e378093dccbb5896188f7723d2cd6531557e3c", "chunk": "diff --git a/core/src/main/java/hudson/Functions.java b/core/src/main/java/hudson/Functions.java\nindex 2d261cc308..edbfeb2f97 100644\n--- a/core/src/main/java/hudson/Functions.java\n+++ b/core/src/main/java/hudson/Functions.java\n\n@@ -1112,7 +1112,7 @@ public class Functions {\n \n     @Restricted(NoExternalUse.class)\n     public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {\n-        if (permissions == null) {\n+        if (permissions == null || permissions.length == 0) {\n             return;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDY1Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380940657", "bodyText": "could we instead add 2 new methods to AccessControlled  hasAnyPermission(Permission... permission) / checkAnyPermission(Permission ... permission)?\nthat would also make https://github.com/jenkinsci/jenkins/pull/4506/files#diff-841df66889e3c3214c68de134dfe05beR1114 more elegant", "author": "jtnord", "createdAt": "2020-02-18T21:18:39Z", "path": "core/src/main/java/hudson/model/ManageJenkinsAction.java", "diffHunk": "@@ -35,7 +35,7 @@\n @Extension(ordinal=100) @Symbol(\"manageJenkins\")\n public class ManageJenkinsAction implements RootAction {\n     public String getIconFileName() {\n-        if (Jenkins.get().hasPermission(Jenkins.MANAGE))\n+        if (Jenkins.get().hasPermission(Jenkins.MANAGE) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ))", "originalCommit": "8e57b9d452de0ffb807d9879d84f8773da8e68ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2ODUwMA==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380968500", "bodyText": "that would also make https://github.com/jenkinsci/jenkins/pull/4506/files#diff-841df66889e3c3214c68de134dfe05beR1114 more elegant\n\nIt wouldn't because Jelly doesn't like varargs. That was my first try.", "author": "daniel-beck", "createdAt": "2020-02-18T22:16:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3MDM3NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380970375", "bodyText": "I also gave varargs a go and wasn\u2019t able to make it work", "author": "timja", "createdAt": "2020-02-18T22:20:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwNjg5OQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381206899", "bodyText": "improving this anyway, there's a special method in functions for jelly, the rest of the code can be nice", "author": "timja", "createdAt": "2020-02-19T10:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMwMDM4OQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381300389", "bodyText": "s/vararg/array/ ?  or can you not do arrays in jelly either?", "author": "jtnord", "createdAt": "2020-02-19T13:49:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMwNjUxOQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381306519", "bodyText": "jelly can do an array (which is what's currently being done), but not varargs", "author": "timja", "createdAt": "2020-02-19T13:59:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMwODQxMA==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381308410", "bodyText": "so can we have 2 new methods to AccessControlled hasAnyPermission(Permission[] permissions) / checkAnyPermission(Permission[] permissions)`?\nStrange jelly can not do varargs - you can call a vararg method with an array (in java) if that enables a single varags method rather than an array based one.", "author": "jtnord", "createdAt": "2020-02-19T14:02:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMxMTAwNw==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381311007", "bodyText": "https://github.com/jenkinsci/jenkins/pull/4506/files#diff-416282a0bfa144ea94854dff20c12b67R82-R134\nthose methods are there,\nYes I know it's weird, DB tried it first, and then I also tried =/", "author": "timja", "createdAt": "2020-02-19T14:06:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzODI3Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381338277", "bodyText": "Strange jelly can not do varargs\n\nIIRC it was even stranger: It worked (i.e. correct result wrt permissions) but spewed exceptions.", "author": "daniel-beck", "createdAt": "2020-02-19T14:48:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDY1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e808a64485eac9555dc22c2bff71c2100b833ef0", "chunk": "diff --git a/core/src/main/java/hudson/model/ManageJenkinsAction.java b/core/src/main/java/hudson/model/ManageJenkinsAction.java\nindex 68c107caee..81b331dedb 100644\n--- a/core/src/main/java/hudson/model/ManageJenkinsAction.java\n+++ b/core/src/main/java/hudson/model/ManageJenkinsAction.java\n\n@@ -35,7 +35,7 @@ import org.jenkinsci.Symbol;\n @Extension(ordinal=100) @Symbol(\"manageJenkins\")\n public class ManageJenkinsAction implements RootAction {\n     public String getIconFileName() {\n-        if (Jenkins.get().hasPermission(Jenkins.MANAGE) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ))\n+        if (Jenkins.get().hasAnyPermission(Jenkins.MANAGE, Jenkins.SYSTEM_READ))\n             return \"gear2.png\";\n         else\n             return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MTYxMg==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380941612", "bodyText": "I beleive this is incorrect with the rephrasing of the javadoc for getRequiredPermission", "author": "jtnord", "createdAt": "2020-02-18T21:20:43Z", "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -122,6 +122,16 @@ public boolean getRequiresConfirmation() {\n         return Jenkins.ADMINISTER;\n     }\n \n+    /**\n+     * Whether to show this link on /manage\n+     *\n+     * @return true if and only if the link should be shown\n+     */\n+    public boolean isShowLink() {\n+        final Permission requiredPermission = getRequiredPermission();\n+        return requiredPermission == null || Jenkins.get().hasPermission(requiredPermission);", "originalCommit": "8e57b9d452de0ffb807d9879d84f8773da8e68ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NTQ1OQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380945459", "bodyText": "there is a lot of boilerplate repeated here, wonder if the base class could be changed to use have public Permission[] getRequiredPermissions() {...} which defaulted to calling getRequiredPermission() then all we need to call is hasAnyPermission(getRequiredPermissions())?", "author": "jtnord", "createdAt": "2020-02-18T21:28:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MTYxMg=="}], "type": "inlineReview", "revised_code": {"commit": "d1e378093dccbb5896188f7723d2cd6531557e3c", "chunk": "diff --git a/core/src/main/java/hudson/model/ManagementLink.java b/core/src/main/java/hudson/model/ManagementLink.java\nindex 61df858b41..a104741cd1 100644\n--- a/core/src/main/java/hudson/model/ManagementLink.java\n+++ b/core/src/main/java/hudson/model/ManagementLink.java\n\n@@ -129,7 +129,7 @@ public abstract class ManagementLink implements ExtensionPoint, Action {\n      */\n     public boolean isShowLink() {\n         final Permission requiredPermission = getRequiredPermission();\n-        return requiredPermission == null || Jenkins.get().hasPermission(requiredPermission);\n+        return Jenkins.get().hasPermission(requiredPermission);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MzE1NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380943154", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return true if and only if the link should be shown\n          \n          \n            \n                 * @return {@code true} iff the link should be shown.", "author": "jtnord", "createdAt": "2020-02-18T21:23:51Z", "path": "core/src/main/java/hudson/model/ManagementLink.java", "diffHunk": "@@ -122,6 +122,16 @@ public boolean getRequiresConfirmation() {\n         return Jenkins.ADMINISTER;\n     }\n \n+    /**\n+     * Whether to show this link on /manage\n+     *\n+     * @return true if and only if the link should be shown", "originalCommit": "8e57b9d452de0ffb807d9879d84f8773da8e68ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2OTQ0OQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r380969449", "bodyText": "I used to do that and was sick of code reviews claiming it's a typo. Accessibility > academic superiority.", "author": "daniel-beck", "createdAt": "2020-02-18T22:18:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MzE1NA=="}], "type": "inlineReview", "revised_code": {"commit": "d1e378093dccbb5896188f7723d2cd6531557e3c", "chunk": "diff --git a/core/src/main/java/hudson/model/ManagementLink.java b/core/src/main/java/hudson/model/ManagementLink.java\nindex 61df858b41..a104741cd1 100644\n--- a/core/src/main/java/hudson/model/ManagementLink.java\n+++ b/core/src/main/java/hudson/model/ManagementLink.java\n\n@@ -129,7 +129,7 @@ public abstract class ManagementLink implements ExtensionPoint, Action {\n      */\n     public boolean isShowLink() {\n         final Permission requiredPermission = getRequiredPermission();\n-        return requiredPermission == null || Jenkins.get().hasPermission(requiredPermission);\n+        return Jenkins.get().hasPermission(requiredPermission);\n     }\n \n     /**\n"}}, {"oid": "3b27277f194f8f82622b3d04fadd9a8b01e15241", "url": "https://github.com/jenkinsci/jenkins/commit/3b27277f194f8f82622b3d04fadd9a8b01e15241", "message": "Improve error message for checkAnyPermission", "committedDate": "2020-02-19T10:28:14Z", "type": "commit"}, {"oid": "147ef295ff583762f9fa9ae116535baaf9af3f1a", "url": "https://github.com/jenkinsci/jenkins/commit/147ef295ff583762f9fa9ae116535baaf9af3f1a", "message": "Remove temp text", "committedDate": "2020-02-19T10:29:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwNTgxNw==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381205817", "bodyText": "@jtnord this is what the error message looks like now", "author": "timja", "createdAt": "2020-02-19T10:31:04Z", "path": "test/src/test/java/hudson/security/ACLTest.java", "diffHunk": "@@ -53,6 +61,54 @@ public void bypassStrategyOnSystem() throws Exception {\n         assertEquals(Collections.singletonList(p), r.jenkins.getAllItems());\n     }\n \n+    @Test\n+    public void checkAnyPermissionPassedIfOneIsValid() throws Exception {\n+        Jenkins jenkins = r.jenkins;\n+        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n+        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n+                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n+        );\n+\n+        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n+        try (ACLContext ignored = ACL.as(manager.impersonate())) {\n+            jenkins.getACL().checkAnyPermission(Jenkins.MANAGE);\n+        }\n+    }\n+\n+    @Test\n+    public void checkAnyPermissionThrowsIfPermissionIsMissing() throws Exception {\n+        Jenkins jenkins = r.jenkins;\n+        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n+        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n+                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n+        );\n+\n+        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n+\n+        expectedException.expectMessage(\"manager is missing the Overall/Administer permission\");\n+        expectedException.expect(AccessDeniedException.class);\n+        try (ACLContext ignored = ACL.as(manager.impersonate())) {\n+            jenkins.getACL().checkAnyPermission(Jenkins.ADMINISTER);\n+        }\n+    }\n+\n+    @Test\n+    public void checkAnyPermissionThrowsIfMissingMoreThanOne() throws Exception {\n+        Jenkins jenkins = r.jenkins;\n+        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n+        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n+                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n+        );\n+\n+        final User manager = User.getOrCreateByIdOrFullName(\"manager\");\n+\n+        expectedException.expectMessage(\"manager is missing a permission, one of Overall/Administer, Overall/Read is required\");", "originalCommit": "147ef295ff583762f9fa9ae116535baaf9af3f1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65ca299465812898eeb44d86b6bc9a17e3a56ed9", "chunk": "diff --git a/test/src/test/java/hudson/security/ACLTest.java b/test/src/test/java/hudson/security/ACLTest.java\nindex 5a8ba2cc40..fb59064410 100644\n--- a/test/src/test/java/hudson/security/ACLTest.java\n+++ b/test/src/test/java/hudson/security/ACLTest.java\n\n@@ -109,6 +109,18 @@ public class ACLTest {\n         }\n     }\n \n+    @Test\n+    public void hasAnyPermissionThrowsIfNoPermissionProvided() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        r.jenkins.getACL().hasAnyPermission();\n+    }\n+\n+    @Test\n+    public void checkAnyPermissionThrowsIfNoPermissionProvided() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        r.jenkins.getACL().checkAnyPermission();\n+    }\n+\n     private static class DoNotBotherMe extends AuthorizationStrategy {\n \n         @Override\n"}}, {"oid": "e808a64485eac9555dc22c2bff71c2100b833ef0", "url": "https://github.com/jenkinsci/jenkins/commit/e808a64485eac9555dc22c2bff71c2100b833ef0", "message": "hasAnyPermission refactor", "committedDate": "2020-02-19T10:52:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM0MDQ5MA==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381340490", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                default void checkAnyPermission(@Nonnull Permission... permission) throws AccessDeniedException {\n          \n          \n            \n                /**\n          \n          \n            \n                 * Convenient short-cut for {@code getACL().checkAnyPermission(permission)}\n          \n          \n            \n                 * @see ACL#checkAnyPermission(Permission)\n          \n          \n            \n                 */\n          \n          \n            \n                default void checkAnyPermission(@Nonnull Permission... permission) throws AccessDeniedException {\n          \n      \n    \n    \n  \n\n(NB: untested suggestion link needs to be checked.)", "author": "jtnord", "createdAt": "2020-02-19T14:51:24Z", "path": "core/src/main/java/hudson/security/AccessControlled.java", "diffHunk": "@@ -47,13 +47,24 @@ default void checkPermission(@Nonnull Permission permission) throws AccessDenied\n         getACL().checkPermission(permission);\n     }\n \n+    default void checkAnyPermission(@Nonnull Permission... permission) throws AccessDeniedException {", "originalCommit": "e808a64485eac9555dc22c2bff71c2100b833ef0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ5MTMzOQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381491339", "bodyText": "close, was missing ... on the Permission on line 52", "author": "timja", "createdAt": "2020-02-19T19:21:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM0MDQ5MA=="}], "type": "inlineReview", "revised_code": {"commit": "2ca68efac0bed814b8b3c1fe9d479ca61d3e5b2d", "chunk": "diff --git a/core/src/main/java/hudson/security/AccessControlled.java b/core/src/main/java/hudson/security/AccessControlled.java\nindex c489fa47d6..a94a9c6d69 100644\n--- a/core/src/main/java/hudson/security/AccessControlled.java\n+++ b/core/src/main/java/hudson/security/AccessControlled.java\n\n@@ -47,6 +47,10 @@ public interface AccessControlled {\n         getACL().checkPermission(permission);\n     }\n \n+    /**\n+     * Convenient short-cut for {@code getACL().checkAnyPermission(permission)}\n+     * @see ACL#checkAnyPermission(Permission...)\n+     */\n     default void checkAnyPermission(@Nonnull Permission... permission) throws AccessDeniedException {\n         getACL().checkAnyPermission(permission);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM0MjUzMA==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381342530", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 */\n          \n          \n            \n                      * @see ACL#hasAnyPermission(Permission...)\n          \n          \n            \n                      */\n          \n      \n    \n    \n  \n\n(NB: untested see reference)", "author": "jtnord", "createdAt": "2020-02-19T14:54:06Z", "path": "core/src/main/java/hudson/security/AccessControlled.java", "diffHunk": "@@ -47,13 +47,24 @@ default void checkPermission(@Nonnull Permission permission) throws AccessDenied\n         getACL().checkPermission(permission);\n     }\n \n+    default void checkAnyPermission(@Nonnull Permission... permission) throws AccessDeniedException {\n+        getACL().checkAnyPermission(permission);\n+    }\n+\n     /**\n      * Convenient short-cut for {@code getACL().hasPermission(permission)}\n      */\n     default boolean hasPermission(@Nonnull Permission permission) {\n         return getACL().hasPermission(permission);\n     }\n \n+    /**\n+     * Convenient short-cut for {@code getACL().hasAnyPermission(permission)}\n+     */", "originalCommit": "e808a64485eac9555dc22c2bff71c2100b833ef0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ca68efac0bed814b8b3c1fe9d479ca61d3e5b2d", "chunk": "diff --git a/core/src/main/java/hudson/security/AccessControlled.java b/core/src/main/java/hudson/security/AccessControlled.java\nindex c489fa47d6..a94a9c6d69 100644\n--- a/core/src/main/java/hudson/security/AccessControlled.java\n+++ b/core/src/main/java/hudson/security/AccessControlled.java\n\n@@ -47,6 +47,10 @@ public interface AccessControlled {\n         getACL().checkPermission(permission);\n     }\n \n+    /**\n+     * Convenient short-cut for {@code getACL().checkAnyPermission(permission)}\n+     * @see ACL#checkAnyPermission(Permission...)\n+     */\n     default void checkAnyPermission(@Nonnull Permission... permission) throws AccessDeniedException {\n         getACL().checkAnyPermission(permission);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM0NTg1MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381345851", "bodyText": "Not sure this would work in the case that there are no Permissions?   (hasAnyPermission())\nin this case permissions is non null but has a length of zero.\nthus it think it will return false whereas logically you may expect it to do the oposite.\nI'm fine with false - but this should probably be added to the javadoc if this is intentional (and maybe covered by a unit test to make sure it does not change and introduce a securioty issue in some plugin in the future if it changes?)", "author": "jtnord", "createdAt": "2020-02-19T14:58:29Z", "path": "core/src/main/java/hudson/security/ACL.java", "diffHunk": "@@ -91,6 +113,26 @@ public final boolean hasPermission(@Nonnull Permission p) {\n         return hasPermission(a, p);\n     }\n \n+    /**\n+     * Checks if the current security principal has any of the permissions.\n+     *\n+     * @return false\n+     *      if the user doesn't have one of the required permissions.\n+     */\n+    public final boolean hasAnyPermission(@Nonnull Permission... permissions) {", "originalCommit": "e808a64485eac9555dc22c2bff71c2100b833ef0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ5NTY3Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381495673", "bodyText": "this method now throws an exception in that case", "author": "timja", "createdAt": "2020-02-19T19:29:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM0NTg1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2ca68efac0bed814b8b3c1fe9d479ca61d3e5b2d", "chunk": "diff --git a/core/src/main/java/hudson/security/ACL.java b/core/src/main/java/hudson/security/ACL.java\nindex 517ba48e9c..9690efc236 100644\n--- a/core/src/main/java/hudson/security/ACL.java\n+++ b/core/src/main/java/hudson/security/ACL.java\n\n@@ -118,8 +133,15 @@ public abstract class ACL {\n      *\n      * @return false\n      *      if the user doesn't have one of the required permissions.\n+     *\n+     * @throws IllegalArgumentException\n+     *      if no permissions are provided\n      */\n     public final boolean hasAnyPermission(@Nonnull Permission... permissions) {\n+        if (permissions.length == 0) {\n+            throw new IllegalArgumentException(\"At least one permission must be provided\");\n+        }\n+\n         Authentication a = Jenkins.getAuthentication();\n         if (a == SYSTEM) {\n             return true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM1MTI3MA==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381351270", "bodyText": "if an empty set of permissions was passed in does this work as expected?  (permissionsDisplayName would be an empty string) - so would the error message be correct?", "author": "jtnord", "createdAt": "2020-02-19T15:05:36Z", "path": "core/src/main/java/hudson/security/ACL.java", "diffHunk": "@@ -77,6 +79,26 @@ public final void checkPermission(@Nonnull Permission p) {\n         }\n     }\n \n+    public final void checkAnyPermission(@Nonnull Permission... permissions) {\n+        boolean failed = !hasAnyPermission(permissions);\n+\n+        Authentication authentication = Jenkins.getAuthentication();\n+        if (failed) {\n+            String permissionsDisplayName = Arrays.stream(permissions)", "originalCommit": "e808a64485eac9555dc22c2bff71c2100b833ef0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ5NTUzOQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381495539", "bodyText": "this method now throws an exception in that case", "author": "timja", "createdAt": "2020-02-19T19:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM1MTI3MA=="}], "type": "inlineReview", "revised_code": {"commit": "2ca68efac0bed814b8b3c1fe9d479ca61d3e5b2d", "chunk": "diff --git a/core/src/main/java/hudson/security/ACL.java b/core/src/main/java/hudson/security/ACL.java\nindex 517ba48e9c..9690efc236 100644\n--- a/core/src/main/java/hudson/security/ACL.java\n+++ b/core/src/main/java/hudson/security/ACL.java\n\n@@ -79,7 +79,22 @@ public abstract class ACL {\n         }\n     }\n \n+    /**\n+     * Checks if the current security principal has one of the supplied permissions.\n+     *\n+     * <p>\n+     * This is just a convenience function.\n+     *\n+     * @throws AccessDeniedException\n+     *      if the user doesn't have the permission.\n+     * @throws IllegalArgumentException\n+     *      if no permissions are provided\n+     */\n     public final void checkAnyPermission(@Nonnull Permission... permissions) {\n+        if (permissions.length == 0) {\n+            throw new IllegalArgumentException(\"At least one permission must be provided\");\n+        }\n+\n         boolean failed = !hasAnyPermission(permissions);\n \n         Authentication authentication = Jenkins.getAuthentication();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM1MTMxNw==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r381351317", "bodyText": "Not sure this would work in the case that there are no Permissions?   (hasAnyPermission())\nin this case permissions is non null but has a length of zero.\nthus it think it will return false whereas logically you may expect it to do the oposite.\nI'm fine with false - but this should probably be added to the javadoc if this is intentional (and maybe covered by a unit test to make sure it does not change and introduce a securioty issue in some plugin in the future if it changes?)", "author": "jtnord", "createdAt": "2020-02-19T15:05:41Z", "path": "core/src/main/java/hudson/security/ACL.java", "diffHunk": "@@ -91,6 +113,26 @@ public final boolean hasPermission(@Nonnull Permission p) {\n         return hasPermission(a, p);\n     }\n \n+    /**\n+     * Checks if the current security principal has any of the permissions.\n+     *\n+     * @return false\n+     *      if the user doesn't have one of the required permissions.\n+     */\n+    public final boolean hasAnyPermission(@Nonnull Permission... permissions) {", "originalCommit": "e808a64485eac9555dc22c2bff71c2100b833ef0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ca68efac0bed814b8b3c1fe9d479ca61d3e5b2d", "chunk": "diff --git a/core/src/main/java/hudson/security/ACL.java b/core/src/main/java/hudson/security/ACL.java\nindex 517ba48e9c..9690efc236 100644\n--- a/core/src/main/java/hudson/security/ACL.java\n+++ b/core/src/main/java/hudson/security/ACL.java\n\n@@ -118,8 +133,15 @@ public abstract class ACL {\n      *\n      * @return false\n      *      if the user doesn't have one of the required permissions.\n+     *\n+     * @throws IllegalArgumentException\n+     *      if no permissions are provided\n      */\n     public final boolean hasAnyPermission(@Nonnull Permission... permissions) {\n+        if (permissions.length == 0) {\n+            throw new IllegalArgumentException(\"At least one permission must be provided\");\n+        }\n+\n         Authentication a = Jenkins.getAuthentication();\n         if (a == SYSTEM) {\n             return true;\n"}}, {"oid": "2ca68efac0bed814b8b3c1fe9d479ca61d3e5b2d", "url": "https://github.com/jenkinsci/jenkins/commit/2ca68efac0bed814b8b3c1fe9d479ca61d3e5b2d", "message": "Address review comments", "committedDate": "2020-02-19T19:26:54Z", "type": "commit"}, {"oid": "65ca299465812898eeb44d86b6bc9a17e3a56ed9", "url": "https://github.com/jenkinsci/jenkins/commit/65ca299465812898eeb44d86b6bc9a17e3a56ed9", "message": "Add more ACLTests", "committedDate": "2020-02-20T07:52:36Z", "type": "commit"}, {"oid": "0bb73a7f5e69e49bbed92ca7156256cec234d4eb", "url": "https://github.com/jenkinsci/jenkins/commit/0bb73a7f5e69e49bbed92ca7156256cec234d4eb", "message": "Fix test", "committedDate": "2020-02-20T08:16:32Z", "type": "commit"}, {"oid": "09b7a9ed2700e48f4b424283ed176329056664f8", "url": "https://github.com/jenkinsci/jenkins/commit/09b7a9ed2700e48f4b424283ed176329056664f8", "message": "Rerun CI", "committedDate": "2020-02-20T11:03:04Z", "type": "commit"}, {"oid": "4f21916a0199897fc1beffb4565b9bec932467b1", "url": "https://github.com/jenkinsci/jenkins/commit/4f21916a0199897fc1beffb4565b9bec932467b1", "message": "Resolve compatibility breakage", "committedDate": "2020-02-20T16:51:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0MDY3OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382140678", "bodyText": "this has different behaviour that ACL.checkAnyPermission in the face of an zero length Permission[].  not a bug in itself but would not be obvious and could potentially cause some fun security issues?", "author": "jtnord", "createdAt": "2020-02-20T17:15:24Z", "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1079,32 +1082,92 @@ public static String getFooterURL() {\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but with a constant truth predicate, to include all descriptors.\n+     * Gets all the descriptors sorted by their inheritance tree of {@link Describable}\n+     * so that descriptors of similar types come nearby.\n+     *\n+     * <p>\n+     * We sort them by {@link Extension#ordinal()} but only for {@link GlobalConfiguration}s,\n+     * as the value is normally used to compare similar kinds of extensions, and we needed\n+     * {@link GlobalConfiguration}s to be able to position themselves in a layer above.\n+     * This however creates some asymmetry between regular {@link Descriptor}s and {@link GlobalConfiguration}s.\n+     * Perhaps it is better to introduce another annotation element? But then,\n+     * extensions shouldn't normally concern themselves about ordering too much, and the only reason\n+     * we needed this for {@link GlobalConfiguration}s are for backward compatibility.\n+     *\n+     * @param predicate\n+     *      Filter the descriptors based on this predicate\n+     * @since TODO\n      */\n-    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigByDescriptor(Predicate<Descriptor> predicate) {\n+        ExtensionList<Descriptor> exts = ExtensionList.lookup(Descriptor.class);\n+        List<Tag> r = new ArrayList<>(exts.size());\n+\n+        for (ExtensionComponent<Descriptor> c : exts.getComponents()) {\n+            Descriptor d = c.getInstance();\n+            if (d.getGlobalConfigPage()==null)  continue;\n+\n+            if (predicate.test(d)) {\n+                r.add(new Tag(c.ordinal(), d));\n+            }\n+        }\n+        Collections.sort(r);\n+\n+        List<Descriptor> answer = new ArrayList<>(r.size());\n+        for (Tag d : r) answer.add(d.d);\n+\n+        return DescriptorVisibilityFilter.apply(Jenkins.get(),answer);\n+    }\n+\n+    /**\n+     * Like {@link #getSortedDescriptorsForGlobalConfigByDescriptor(Predicate)} but with a constant truth predicate, to include all descriptors.\n+     */\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigByDescriptor() {\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(descriptor -> true);\n     }\n \n     /**\n      * @deprecated This is rather meaningless.\n      */\n     @Deprecated\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d != GlobalSecurityConfiguration.FILTER);\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but for unclassified descriptors only.\n+     * Descriptors in the global configuration form that users with {@link Jenkins#MANAGE} permission can configure.\n+     *\n      * @since 1.506\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {\n-        return getSortedDescriptorsForGlobalConfig(new Predicate<GlobalConfigurationCategory>() {\n-            public boolean apply(GlobalConfigurationCategory cat) {\n-                return cat instanceof GlobalConfigurationCategory.Unclassified;\n-            }\n-        });\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()));\n     }\n-    \n+\n+    /**\n+     * Descriptors shown in the global configuration form to users with {@link Jenkins#SYSTEM_READ} permission.\n+     *\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class)\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassifiedReadable() {\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && (\n+                Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ)));\n+    }\n+\n+    /**\n+     * Checks if the current security principal has one of the supplied permissions.\n+     *\n+     * @throws AccessDeniedException\n+     *      if the user doesn't have the permission.\n+     */\n+    @Restricted(NoExternalUse.class)\n+    public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {\n+        if (permissions == null || permissions.length == 0) {", "originalCommit": "4f21916a0199897fc1beffb4565b9bec932467b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE1Mjk4OQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382152989", "bodyText": "I think it can be probably removed, it was added to make jelly more forgiving, similar functions in this class have it I believe, I\u2019ll try remove it later on and check it behaves fine", "author": "timja", "createdAt": "2020-02-20T17:37:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0MDY3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIzNzM5Mg==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382237392", "bodyText": "this is needed as both checkPermission and checkAnyPermission are always called in l:layout,\nWithout this check logging in causes:\nFeb 20, 2020 8:21:21 PM hudson.ExpressionFactory2$JexlExpression evaluate\nWARNING: Caught exception evaluating: h.checkAnyPermission(it, permissions) in /jenkins/. Reason: java.lang.NullPointerException\njava.lang.NullPointerException\n\tat hudson.security.ACL.checkAnyPermission(ACL.java:94)\n\tat hudson.security.AccessControlled.checkAnyPermission(AccessControlled.java:55)\n\tat hudson.Functions.checkAnyPermission(Functions.java:1164)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\nnote checkPermission has the same behaviour", "author": "timja", "createdAt": "2020-02-20T20:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0MDY3OA=="}], "type": "inlineReview", "revised_code": {"commit": "8c9b6ecf664f948b5b664f88266894be79a6e049", "chunk": "diff --git a/core/src/main/java/hudson/Functions.java b/core/src/main/java/hudson/Functions.java\nindex 9271e133a3..12ffcbe5a6 100644\n--- a/core/src/main/java/hudson/Functions.java\n+++ b/core/src/main/java/hudson/Functions.java\n\n@@ -1158,13 +1158,12 @@ public class Functions {\n      *\n      * @throws AccessDeniedException\n      *      if the user doesn't have the permission.\n+     *\n+     * @throws IllegalArgumentException\n+     *      if no permissions are provided.\n      */\n     @Restricted(NoExternalUse.class)\n     public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {\n-        if (permissions == null || permissions.length == 0) {\n-            return;\n-        }\n-\n         ac.checkAnyPermission(permissions);\n     }\n \n"}}, {"oid": "8c9b6ecf664f948b5b664f88266894be79a6e049", "url": "https://github.com/jenkinsci/jenkins/commit/8c9b6ecf664f948b5b664f88266894be79a6e049", "message": "Remove null / empty check", "committedDate": "2020-02-20T19:15:11Z", "type": "commit"}, {"oid": "b61e3daf29a022ee02cf6c525e7e904c7567c530", "url": "https://github.com/jenkinsci/jenkins/commit/b61e3daf29a022ee02cf6c525e7e904c7567c530", "message": "Revert \"Remove null / empty check\"\n\nThis reverts commit 8c9b6ecf664f948b5b664f88266894be79a6e049.", "committedDate": "2020-02-20T20:21:41Z", "type": "commit"}, {"oid": "22dfb552895b25cc4bbf1066947c2ed2fe8f7a72", "url": "https://github.com/jenkinsci/jenkins/commit/22dfb552895b25cc4bbf1066947c2ed2fe8f7a72", "message": "Fix predicate (tbh could remove, this method isn't used)", "committedDate": "2020-02-20T20:40:36Z", "type": "commit"}, {"oid": "ae4b9d8677f6f27881fe949699fb4763c093a965", "url": "https://github.com/jenkinsci/jenkins/commit/ae4b9d8677f6f27881fe949699fb4763c093a965", "message": ":facepalm:", "committedDate": "2020-02-20T20:59:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2NTE2MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382265161", "bodyText": "Strictly speaking, this is an incompatible change. Are we OK with that?", "author": "daniel-beck", "createdAt": "2020-02-20T21:22:59Z", "path": "core/src/main/java/hudson/security/GlobalSecurityConfiguration.java", "diffHunk": "@@ -184,15 +185,13 @@ public Permission getRequiredPermission() {\n         return Jenkins.ADMINISTER;\n     }\n \n-    public static Predicate<GlobalConfigurationCategory> FILTER = new Predicate<GlobalConfigurationCategory>() {\n-        public boolean apply(GlobalConfigurationCategory input) {\n-            return input instanceof GlobalConfigurationCategory.Security;\n-        }\n-    };\n+    @Restricted(NoExternalUse.class)\n+    @RestrictedSince(\"TODO\")\n+    public static Predicate<Descriptor> FILTER = input -> input.getCategory() instanceof GlobalConfigurationCategory.Security;", "originalCommit": "ae4b9d8677f6f27881fe949699fb4763c093a965", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQzNzg4Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382437887", "bodyText": "I can only see mentions of this class in core: https://github.com/search?q=org%3Ajenkinsci+GlobalSecurityConfiguration&type=Code\nand manual testing didn't show any issues", "author": "timja", "createdAt": "2020-02-21T07:48:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2NTE2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxMzAzMA==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382513030", "bodyText": "More of a question for @oleg-nenashev who wasn't happy with our recent unnecessary breakages.", "author": "daniel-beck", "createdAt": "2020-02-21T10:41:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2NTE2MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2NTMyNg==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382265326", "bodyText": "Nit: Unnecessary change.", "author": "daniel-beck", "createdAt": "2020-02-20T21:23:20Z", "path": "core/src/main/java/jenkins/management/ConfigureLink.java", "diffHunk": "@@ -27,11 +27,10 @@\n import hudson.Extension;\n import hudson.model.ManagementLink;\n import hudson.security.Permission;\n+import javax.annotation.Nonnull;\n import jenkins.model.Jenkins;\n import org.jenkinsci.Symbol;\n \n-import javax.annotation.Nonnull;", "originalCommit": "ae4b9d8677f6f27881fe949699fb4763c093a965", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adda058b6865bc65ea63b9cc79af5985956e89f3", "chunk": "diff --git a/core/src/main/java/jenkins/management/ConfigureLink.java b/core/src/main/java/jenkins/management/ConfigureLink.java\nindex 4302912820..eaa5fe1383 100644\n--- a/core/src/main/java/jenkins/management/ConfigureLink.java\n+++ b/core/src/main/java/jenkins/management/ConfigureLink.java\n\n@@ -31,6 +31,8 @@ import javax.annotation.Nonnull;\n import jenkins.model.Jenkins;\n import org.jenkinsci.Symbol;\n \n+import javax.annotation.Nonnull;\n+\n /**\n  * @author <a href=\"mailto:nicolas.deloof@gmail.com\">Nicolas De Loof</a>\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2NTk1MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382265951", "bodyText": "(Note to self: Not an incompatible change because the entire class is @Restricted.)", "author": "daniel-beck", "createdAt": "2020-02-20T21:24:42Z", "path": "core/src/main/java/jenkins/tools/GlobalToolConfiguration.java", "diffHunk": "@@ -101,11 +100,7 @@ private boolean configureDescriptor(StaplerRequest req, JSONObject json, Descrip\n         return d.configure(req, js);\n     }\n \n-    public static Predicate<GlobalConfigurationCategory> FILTER = new Predicate<GlobalConfigurationCategory>() {\n-        public boolean apply(GlobalConfigurationCategory input) {\n-            return input instanceof ToolConfigurationCategory;\n-        }\n-    };\n+    public static Predicate<Descriptor> FILTER = input -> input.getCategory() instanceof ToolConfigurationCategory;", "originalCommit": "ae4b9d8677f6f27881fe949699fb4763c093a965", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2NzA5Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382267093", "bodyText": "(Note to self: This change makes sense since the old method is being deprecated.)", "author": "daniel-beck", "createdAt": "2020-02-20T21:27:21Z", "path": "core/src/main/java/jenkins/tools/GlobalToolConfiguration.java", "diffHunk": "@@ -81,12 +80,12 @@ public synchronized void doConfigure(StaplerRequest req, StaplerResponse rsp) th\n         FormApply.success(req.getContextPath() + \"/manage\").generateResponse(req, rsp, null);\n     }\n \n-    private boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException, IOException {\n+    private boolean configure(StaplerRequest req, JSONObject json) throws Descriptor.FormException, IOException {\n         Jenkins j = Jenkins.get();\n         j.checkPermission(Jenkins.ADMINISTER);\n \n         boolean result = true;\n-        for(Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfig(FILTER)){\n+        for (Descriptor<?> d : Functions.getSortedDescriptorsForGlobalConfigByDescriptor(FILTER)) {", "originalCommit": "ae4b9d8677f6f27881fe949699fb4763c093a965", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2OTYyNQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382269625", "bodyText": "@since TODO", "author": "daniel-beck", "createdAt": "2020-02-20T21:33:22Z", "path": "core/src/main/java/hudson/security/AccessControlled.java", "diffHunk": "@@ -47,13 +47,29 @@ default void checkPermission(@Nonnull Permission permission) throws AccessDenied\n         getACL().checkPermission(permission);\n     }\n \n+    /**\n+     * Convenient short-cut for {@code getACL().checkAnyPermission(permission)}\n+     * @see ACL#checkAnyPermission(Permission...)\n+     */", "originalCommit": "ae4b9d8677f6f27881fe949699fb4763c093a965", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adda058b6865bc65ea63b9cc79af5985956e89f3", "chunk": "diff --git a/core/src/main/java/hudson/security/AccessControlled.java b/core/src/main/java/hudson/security/AccessControlled.java\nindex a94a9c6d69..d16494563a 100644\n--- a/core/src/main/java/hudson/security/AccessControlled.java\n+++ b/core/src/main/java/hudson/security/AccessControlled.java\n\n@@ -50,6 +50,8 @@ public interface AccessControlled {\n     /**\n      * Convenient short-cut for {@code getACL().checkAnyPermission(permission)}\n      * @see ACL#checkAnyPermission(Permission...)\n+     *\n+     * @since TODO\n      */\n     default void checkAnyPermission(@Nonnull Permission... permission) throws AccessDeniedException {\n         getACL().checkAnyPermission(permission);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2OTY3NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382269675", "bodyText": "@since TODO", "author": "daniel-beck", "createdAt": "2020-02-20T21:33:29Z", "path": "core/src/main/java/hudson/security/AccessControlled.java", "diffHunk": "@@ -47,13 +47,29 @@ default void checkPermission(@Nonnull Permission permission) throws AccessDenied\n         getACL().checkPermission(permission);\n     }\n \n+    /**\n+     * Convenient short-cut for {@code getACL().checkAnyPermission(permission)}\n+     * @see ACL#checkAnyPermission(Permission...)\n+     */\n+    default void checkAnyPermission(@Nonnull Permission... permission) throws AccessDeniedException {\n+        getACL().checkAnyPermission(permission);\n+    }\n+\n     /**\n      * Convenient short-cut for {@code getACL().hasPermission(permission)}\n      */\n     default boolean hasPermission(@Nonnull Permission permission) {\n         return getACL().hasPermission(permission);\n     }\n \n+    /**\n+     * Convenient short-cut for {@code getACL().hasAnyPermission(permission)}\n+     * @see ACL#hasAnyPermission(Permission...)\n+     */", "originalCommit": "ae4b9d8677f6f27881fe949699fb4763c093a965", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adda058b6865bc65ea63b9cc79af5985956e89f3", "chunk": "diff --git a/core/src/main/java/hudson/security/AccessControlled.java b/core/src/main/java/hudson/security/AccessControlled.java\nindex a94a9c6d69..d16494563a 100644\n--- a/core/src/main/java/hudson/security/AccessControlled.java\n+++ b/core/src/main/java/hudson/security/AccessControlled.java\n\n@@ -50,6 +50,8 @@ public interface AccessControlled {\n     /**\n      * Convenient short-cut for {@code getACL().checkAnyPermission(permission)}\n      * @see ACL#checkAnyPermission(Permission...)\n+     *\n+     * @since TODO\n      */\n     default void checkAnyPermission(@Nonnull Permission... permission) throws AccessDeniedException {\n         getACL().checkAnyPermission(permission);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2OTgwNw==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382269807", "bodyText": "@since TODO", "author": "daniel-beck", "createdAt": "2020-02-20T21:33:46Z", "path": "core/src/main/java/hudson/security/ACL.java", "diffHunk": "@@ -77,6 +79,41 @@ public final void checkPermission(@Nonnull Permission p) {\n         }\n     }\n \n+    /**\n+     * Checks if the current security principal has one of the supplied permissions.\n+     *\n+     * <p>\n+     * This is just a convenience function.\n+     *\n+     * @throws AccessDeniedException\n+     *      if the user doesn't have the permission.\n+     * @throws IllegalArgumentException\n+     *      if no permissions are provided\n+     */", "originalCommit": "ae4b9d8677f6f27881fe949699fb4763c093a965", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adda058b6865bc65ea63b9cc79af5985956e89f3", "chunk": "diff --git a/core/src/main/java/hudson/security/ACL.java b/core/src/main/java/hudson/security/ACL.java\nindex 9690efc236..ade421f44b 100644\n--- a/core/src/main/java/hudson/security/ACL.java\n+++ b/core/src/main/java/hudson/security/ACL.java\n\n@@ -89,6 +89,8 @@ public abstract class ACL {\n      *      if the user doesn't have the permission.\n      * @throws IllegalArgumentException\n      *      if no permissions are provided\n+     *\n+     * @since TODO\n      */\n     public final void checkAnyPermission(@Nonnull Permission... permissions) {\n         if (permissions.length == 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2OTg0Mg==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382269842", "bodyText": "@since TODO", "author": "daniel-beck", "createdAt": "2020-02-20T21:33:51Z", "path": "core/src/main/java/hudson/security/ACL.java", "diffHunk": "@@ -91,6 +128,33 @@ public final boolean hasPermission(@Nonnull Permission p) {\n         return hasPermission(a, p);\n     }\n \n+    /**\n+     * Checks if the current security principal has any of the permissions.\n+     *\n+     * @return false\n+     *      if the user doesn't have one of the required permissions.\n+     *\n+     * @throws IllegalArgumentException\n+     *      if no permissions are provided\n+     */", "originalCommit": "ae4b9d8677f6f27881fe949699fb4763c093a965", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "656f1d85087c1e870092eeebe8ed2f6ec78fd836", "chunk": "diff --git a/core/src/main/java/hudson/security/ACL.java b/core/src/main/java/hudson/security/ACL.java\nindex 9690efc236..6074e38064 100644\n--- a/core/src/main/java/hudson/security/ACL.java\n+++ b/core/src/main/java/hudson/security/ACL.java\n\n@@ -131,7 +132,7 @@ public abstract class ACL {\n     /**\n      * Checks if the current security principal has any of the permissions.\n      *\n-     * @return false\n+     * @return {@code false}\n      *      if the user doesn't have one of the required permissions.\n      *\n      * @throws IllegalArgumentException\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI3MDIwOQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382270209", "bodyText": "Really? Isn't this convenient elsewhere too? Or are we just relying on it not being checked from Jelly?", "author": "daniel-beck", "createdAt": "2020-02-20T21:34:40Z", "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1079,32 +1082,92 @@ public static String getFooterURL() {\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but with a constant truth predicate, to include all descriptors.\n+     * Gets all the descriptors sorted by their inheritance tree of {@link Describable}\n+     * so that descriptors of similar types come nearby.\n+     *\n+     * <p>\n+     * We sort them by {@link Extension#ordinal()} but only for {@link GlobalConfiguration}s,\n+     * as the value is normally used to compare similar kinds of extensions, and we needed\n+     * {@link GlobalConfiguration}s to be able to position themselves in a layer above.\n+     * This however creates some asymmetry between regular {@link Descriptor}s and {@link GlobalConfiguration}s.\n+     * Perhaps it is better to introduce another annotation element? But then,\n+     * extensions shouldn't normally concern themselves about ordering too much, and the only reason\n+     * we needed this for {@link GlobalConfiguration}s are for backward compatibility.\n+     *\n+     * @param predicate\n+     *      Filter the descriptors based on this predicate\n+     * @since TODO\n      */\n-    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigByDescriptor(Predicate<Descriptor> predicate) {\n+        ExtensionList<Descriptor> exts = ExtensionList.lookup(Descriptor.class);\n+        List<Tag> r = new ArrayList<>(exts.size());\n+\n+        for (ExtensionComponent<Descriptor> c : exts.getComponents()) {\n+            Descriptor d = c.getInstance();\n+            if (d.getGlobalConfigPage()==null)  continue;\n+\n+            if (predicate.test(d)) {\n+                r.add(new Tag(c.ordinal(), d));\n+            }\n+        }\n+        Collections.sort(r);\n+\n+        List<Descriptor> answer = new ArrayList<>(r.size());\n+        for (Tag d : r) answer.add(d.d);\n+\n+        return DescriptorVisibilityFilter.apply(Jenkins.get(),answer);\n+    }\n+\n+    /**\n+     * Like {@link #getSortedDescriptorsForGlobalConfigByDescriptor(Predicate)} but with a constant truth predicate, to include all descriptors.\n+     */\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigByDescriptor() {\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(descriptor -> true);\n     }\n \n     /**\n      * @deprecated This is rather meaningless.\n      */\n     @Deprecated\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> GlobalSecurityConfiguration.FILTER.negate().test(d));\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but for unclassified descriptors only.\n+     * Descriptors in the global configuration form that users with {@link Jenkins#MANAGE} permission can configure.\n+     *\n      * @since 1.506\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {\n-        return getSortedDescriptorsForGlobalConfig(new Predicate<GlobalConfigurationCategory>() {\n-            public boolean apply(GlobalConfigurationCategory cat) {\n-                return cat instanceof GlobalConfigurationCategory.Unclassified;\n-            }\n-        });\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()));\n     }\n-    \n+\n+    /**\n+     * Descriptors shown in the global configuration form to users with {@link Jenkins#SYSTEM_READ} permission.\n+     *\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class)\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassifiedReadable() {\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && (\n+                Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ)));\n+    }\n+\n+    /**\n+     * Checks if the current security principal has one of the supplied permissions.\n+     *\n+     * @throws AccessDeniedException\n+     *      if the user doesn't have the permission.\n+     */\n+    @Restricted(NoExternalUse.class)", "originalCommit": "ae4b9d8677f6f27881fe949699fb4763c093a965", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adda058b6865bc65ea63b9cc79af5985956e89f3", "chunk": "diff --git a/core/src/main/java/hudson/Functions.java b/core/src/main/java/hudson/Functions.java\nindex a2deabff43..1b356abd25 100644\n--- a/core/src/main/java/hudson/Functions.java\n+++ b/core/src/main/java/hudson/Functions.java\n\n@@ -1158,8 +1158,9 @@ public class Functions {\n      *\n      * @throws AccessDeniedException\n      *      if the user doesn't have the permission.\n+     *\n+     * @since TODO\n      */\n-    @Restricted(NoExternalUse.class)\n     public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {\n         if (permissions == null || permissions.length == 0) {\n             return;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI3MDI5Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382270293", "bodyText": "@since TODO since strictly speaking, it's Jelly API.", "author": "daniel-beck", "createdAt": "2020-02-20T21:34:50Z", "path": "core/src/main/java/hudson/Functions.java", "diffHunk": "@@ -1079,32 +1082,92 @@ public static String getFooterURL() {\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but with a constant truth predicate, to include all descriptors.\n+     * Gets all the descriptors sorted by their inheritance tree of {@link Describable}\n+     * so that descriptors of similar types come nearby.\n+     *\n+     * <p>\n+     * We sort them by {@link Extension#ordinal()} but only for {@link GlobalConfiguration}s,\n+     * as the value is normally used to compare similar kinds of extensions, and we needed\n+     * {@link GlobalConfiguration}s to be able to position themselves in a layer above.\n+     * This however creates some asymmetry between regular {@link Descriptor}s and {@link GlobalConfiguration}s.\n+     * Perhaps it is better to introduce another annotation element? But then,\n+     * extensions shouldn't normally concern themselves about ordering too much, and the only reason\n+     * we needed this for {@link GlobalConfiguration}s are for backward compatibility.\n+     *\n+     * @param predicate\n+     *      Filter the descriptors based on this predicate\n+     * @since TODO\n      */\n-    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigByDescriptor(Predicate<Descriptor> predicate) {\n+        ExtensionList<Descriptor> exts = ExtensionList.lookup(Descriptor.class);\n+        List<Tag> r = new ArrayList<>(exts.size());\n+\n+        for (ExtensionComponent<Descriptor> c : exts.getComponents()) {\n+            Descriptor d = c.getInstance();\n+            if (d.getGlobalConfigPage()==null)  continue;\n+\n+            if (predicate.test(d)) {\n+                r.add(new Tag(c.ordinal(), d));\n+            }\n+        }\n+        Collections.sort(r);\n+\n+        List<Descriptor> answer = new ArrayList<>(r.size());\n+        for (Tag d : r) answer.add(d.d);\n+\n+        return DescriptorVisibilityFilter.apply(Jenkins.get(),answer);\n+    }\n+\n+    /**\n+     * Like {@link #getSortedDescriptorsForGlobalConfigByDescriptor(Predicate)} but with a constant truth predicate, to include all descriptors.\n+     */\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigByDescriptor() {\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(descriptor -> true);\n     }\n \n     /**\n      * @deprecated This is rather meaningless.\n      */\n     @Deprecated\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {\n-        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> GlobalSecurityConfiguration.FILTER.negate().test(d));\n     }\n \n     /**\n-     * Like {@link #getSortedDescriptorsForGlobalConfig(Predicate)} but for unclassified descriptors only.\n+     * Descriptors in the global configuration form that users with {@link Jenkins#MANAGE} permission can configure.\n+     *\n      * @since 1.506\n      */\n     public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {\n-        return getSortedDescriptorsForGlobalConfig(new Predicate<GlobalConfigurationCategory>() {\n-            public boolean apply(GlobalConfigurationCategory cat) {\n-                return cat instanceof GlobalConfigurationCategory.Unclassified;\n-            }\n-        });\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()));\n     }\n-    \n+\n+    /**\n+     * Descriptors shown in the global configuration form to users with {@link Jenkins#SYSTEM_READ} permission.\n+     *\n+     * @since TODO\n+     */\n+    @Restricted(NoExternalUse.class)\n+    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassifiedReadable() {\n+        return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && (\n+                Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()) || Jenkins.get().hasPermission(Jenkins.SYSTEM_READ)));\n+    }\n+\n+    /**\n+     * Checks if the current security principal has one of the supplied permissions.\n+     *\n+     * @throws AccessDeniedException\n+     *      if the user doesn't have the permission.\n+     */", "originalCommit": "ae4b9d8677f6f27881fe949699fb4763c093a965", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adda058b6865bc65ea63b9cc79af5985956e89f3", "chunk": "diff --git a/core/src/main/java/hudson/Functions.java b/core/src/main/java/hudson/Functions.java\nindex a2deabff43..1b356abd25 100644\n--- a/core/src/main/java/hudson/Functions.java\n+++ b/core/src/main/java/hudson/Functions.java\n\n@@ -1158,8 +1158,9 @@ public class Functions {\n      *\n      * @throws AccessDeniedException\n      *      if the user doesn't have the permission.\n+     *\n+     * @since TODO\n      */\n-    @Restricted(NoExternalUse.class)\n     public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {\n         if (permissions == null || permissions.length == 0) {\n             return;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI3MjY0Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382272643", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String SYSTEM_READER = \"systemReader\";\n          \n          \n            \n                private static final String SYSTEM_READER_AND_MANAGER = \"systemReaderAndManager\";\n          \n      \n    \n    \n  \n\nPlus corresponding changes.", "author": "daniel-beck", "createdAt": "2020-02-20T21:40:11Z", "path": "test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package jenkins.model;\n+\n+import com.gargoylesoftware.htmlunit.html.HtmlForm;\n+import com.gargoylesoftware.htmlunit.html.HtmlPage;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.jvnet.hudson.test.JenkinsRule;\n+import org.jvnet.hudson.test.MockAuthorizationStrategy;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class JenkinsSystemReadAndManagePermissionTest {\n+\n+    private static final String SYSTEM_READER = \"systemReader\";", "originalCommit": "ae4b9d8677f6f27881fe949699fb4763c093a965", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adda058b6865bc65ea63b9cc79af5985956e89f3", "chunk": "diff --git a/test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java b/test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java\nindex ffc2406596..3bb7d83a8e 100644\n--- a/test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java\n+++ b/test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java\n\n@@ -15,7 +15,7 @@ import static org.junit.Assert.assertThat;\n \n public class JenkinsSystemReadAndManagePermissionTest {\n \n-    private static final String SYSTEM_READER = \"systemReader\";\n+    private static final String SYSTEM_READER_AND_MANAGER = \"systemReaderAndManager\";\n \n     @BeforeClass\n     public static void enablePermissions() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI3MzUyMg==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382273522", "bodyText": "Could we get a test that ensures that non-editable fields remain so (e.g. master executors), and that manipulated form submissions aren't effective. Basically, test the \u2026Unclassified/\u2026UnclassifiedReadable separation.\nProbably easiest with a test-only descriptor whose global.jelly bypasses the read-only mode, and sets its non-default value directly on the Jelly/Groovy view, so no messing around with the UI in HTMLUnit is needed.", "author": "daniel-beck", "createdAt": "2020-02-20T21:42:06Z", "path": "test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package jenkins.model;\n+\n+import com.gargoylesoftware.htmlunit.html.HtmlForm;\n+import com.gargoylesoftware.htmlunit.html.HtmlPage;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.jvnet.hudson.test.JenkinsRule;\n+import org.jvnet.hudson.test.MockAuthorizationStrategy;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class JenkinsSystemReadAndManagePermissionTest {\n+\n+    private static final String SYSTEM_READER = \"systemReader\";\n+\n+    @BeforeClass\n+    public static void enablePermissions() {\n+        System.setProperty(\"jenkins.security.SystemReadPermission\", \"true\");\n+        System.setProperty(\"jenkins.security.ManagePermission\", \"true\");\n+    }\n+\n+    @AfterClass\n+    public static void disablePermissions() {\n+        System.clearProperty(\"jenkins.security.SystemReadPermission\");\n+        System.clearProperty(\"jenkins.security.ManagePermission\");\n+    }\n+\n+    @ClassRule\n+    public static JenkinsRule j = new JenkinsRule();\n+\n+    private JenkinsRule.WebClient webClient;\n+\n+    @Before\n+    public void setup() {\n+        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n+        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n+                .grant(Jenkins.MANAGE, Jenkins.SYSTEM_READ, Jenkins.READ).everywhere().to(SYSTEM_READER));\n+\n+        webClient = j.createWebClient();\n+        webClient.setThrowExceptionOnFailingStatusCode(false);\n+    }\n+\n+    @Test\n+    public void configureReadAllowedWithSystemReadAndManagePermission() throws Exception {\n+        HtmlPage configure = webClient.login(SYSTEM_READER)\n+                .goTo(\"configure\");\n+        assertThat(configure.getWebResponse().getStatusCode(), is(200));\n+    }\n+\n+    @Test\n+    public void configureConfigSubmitAllowedWithSystemReadAndManagePermission() throws Exception {\n+        HtmlPage configure = webClient.login(SYSTEM_READER)\n+                .goTo(\"configure\");\n+        assertThat(configure.getWebResponse().getStatusCode(), is(200));\n+\n+        HtmlForm configureForm = configure.getFormByName(\"config\");\n+        HtmlPage submit = j.submit(configureForm);", "originalCommit": "ae4b9d8677f6f27881fe949699fb4763c093a965", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4Njc0MA==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382486740", "bodyText": "done, please check it covers what you wanted", "author": "timja", "createdAt": "2020-02-21T09:45:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI3MzUyMg=="}], "type": "inlineReview", "revised_code": {"commit": "adda058b6865bc65ea63b9cc79af5985956e89f3", "chunk": "diff --git a/test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java b/test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java\nindex ffc2406596..3bb7d83a8e 100644\n--- a/test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java\n+++ b/test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java\n\n@@ -15,7 +15,7 @@ import static org.junit.Assert.assertThat;\n \n public class JenkinsSystemReadAndManagePermissionTest {\n \n-    private static final String SYSTEM_READER = \"systemReader\";\n+    private static final String SYSTEM_READER_AND_MANAGER = \"systemReaderAndManager\";\n \n     @BeforeClass\n     public static void enablePermissions() {\n"}}, {"oid": "adda058b6865bc65ea63b9cc79af5985956e89f3", "url": "https://github.com/jenkinsci/jenkins/commit/adda058b6865bc65ea63b9cc79af5985956e89f3", "message": "Fix up nits", "committedDate": "2020-02-21T07:45:49Z", "type": "commit"}, {"oid": "d2372c516030c03165a60ef8f3bbc2ea5cf05fbd", "url": "https://github.com/jenkinsci/jenkins/commit/d2372c516030c03165a60ef8f3bbc2ea5cf05fbd", "message": "Add test demonstrating read only fields can't be updated", "committedDate": "2020-02-21T09:43:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMzkxNA==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382523914", "bodyText": "Very nice \ud83d\udc4d\nTested locally with\n        public Permission getRequiredGlobalConfigPagePermission() {\n            return Jenkins.MANAGE;\n        }\n\nAnd it failed as expected \ud83d\ude03", "author": "daniel-beck", "createdAt": "2020-02-21T11:05:31Z", "path": "test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java", "diffHunk": "@@ -62,4 +65,40 @@ public void configureConfigSubmitAllowedWithSystemReadAndManagePermission() thro\n \n         assertThat(submit.getWebResponse().getStatusCode(), is(200));\n     }\n+\n+    @Test\n+    public void cannotModifyReadOnlyConfiguration() throws Exception {\n+        HtmlPage configure = webClient.login(SYSTEM_READER_AND_MANAGER)\n+                .goTo(\"configure\");\n+\n+        //GIVEN the Global Configuration Form, with some changes unsaved\n+        HtmlForm form = configure.getFormByName(\"config\");\n+\n+        // WHEN a user with Jenkins.MANAGE and Jenkins.SYSTEM_READ permission tries to save the changes\n+        j.submit(form);\n+        // THEN the changes on fields forbidden to a Jenkins.MANAGE permission are not saved\n+        Config config = GlobalConfiguration.all().get(Config.class);\n+\n+        assert config != null;\n+        assertNull(\"shouldn't be allowed to change the number of executors\", config.getNumber());", "originalCommit": "d2372c516030c03165a60ef8f3bbc2ea5cf05fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c9ec7bee8e1fd8002330bcf278d13a1739cc23ab", "chunk": "diff --git a/test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java b/test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java\nindex 5edb51c4dc..67c954ca6e 100644\n--- a/test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java\n+++ b/test/src/test/java/jenkins/model/JenkinsSystemReadAndManagePermissionTest.java\n\n@@ -80,7 +80,7 @@ public class JenkinsSystemReadAndManagePermissionTest {\n         Config config = GlobalConfiguration.all().get(Config.class);\n \n         assert config != null;\n-        assertNull(\"shouldn't be allowed to change the number of executors\", config.getNumber());\n+        assertNull(\"shouldn't be allowed to change a GlobalConfiguration that needs Overall/Administer\", config.getNumber());\n     }\n \n     @TestExtension\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyNTA4MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382525081", "bodyText": "Should have been removed from line 30 too, sorry I wasn't clear.", "author": "daniel-beck", "createdAt": "2020-02-21T11:08:23Z", "path": "core/src/main/java/jenkins/management/ConfigureLink.java", "diffHunk": "@@ -31,6 +31,8 @@\n import jenkins.model.Jenkins;\n import org.jenkinsci.Symbol;\n \n+import javax.annotation.Nonnull;\n+", "originalCommit": "d2372c516030c03165a60ef8f3bbc2ea5cf05fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c9ec7bee8e1fd8002330bcf278d13a1739cc23ab", "chunk": "diff --git a/core/src/main/java/jenkins/management/ConfigureLink.java b/core/src/main/java/jenkins/management/ConfigureLink.java\nindex eaa5fe1383..3b04dab5f5 100644\n--- a/core/src/main/java/jenkins/management/ConfigureLink.java\n+++ b/core/src/main/java/jenkins/management/ConfigureLink.java\n\n@@ -27,7 +27,6 @@ package jenkins.management;\n import hudson.Extension;\n import hudson.model.ManagementLink;\n import hudson.security.Permission;\n-import javax.annotation.Nonnull;\n import jenkins.model.Jenkins;\n import org.jenkinsci.Symbol;\n \n"}}, {"oid": "c9ec7bee8e1fd8002330bcf278d13a1739cc23ab", "url": "https://github.com/jenkinsci/jenkins/commit/c9ec7bee8e1fd8002330bcf278d13a1739cc23ab", "message": "Fix misleading message, remove duplicate import", "committedDate": "2020-02-21T11:29:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYzMjk4Mg==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382632982", "bodyText": "Not needed. Javadoc will consider the first sentence as a summary anyway", "author": "oleg-nenashev", "createdAt": "2020-02-21T15:09:02Z", "path": "core/src/main/java/hudson/security/ACL.java", "diffHunk": "@@ -77,6 +79,43 @@ public final void checkPermission(@Nonnull Permission p) {\n         }\n     }\n \n+    /**\n+     * Checks if the current security principal has one of the supplied permissions.\n+     *\n+     * <p>", "originalCommit": "c9ec7bee8e1fd8002330bcf278d13a1739cc23ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "656f1d85087c1e870092eeebe8ed2f6ec78fd836", "chunk": "diff --git a/core/src/main/java/hudson/security/ACL.java b/core/src/main/java/hudson/security/ACL.java\nindex ade421f44b..6074e38064 100644\n--- a/core/src/main/java/hudson/security/ACL.java\n+++ b/core/src/main/java/hudson/security/ACL.java\n\n@@ -82,7 +82,6 @@ public abstract class ACL {\n     /**\n      * Checks if the current security principal has one of the supplied permissions.\n      *\n-     * <p>\n      * This is just a convenience function.\n      *\n      * @throws AccessDeniedException\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYzMzM0MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4506#discussion_r382633341", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return false\n          \n          \n            \n                 * @return {@code false}", "author": "oleg-nenashev", "createdAt": "2020-02-21T15:09:45Z", "path": "core/src/main/java/hudson/security/ACL.java", "diffHunk": "@@ -91,6 +130,33 @@ public final boolean hasPermission(@Nonnull Permission p) {\n         return hasPermission(a, p);\n     }\n \n+    /**\n+     * Checks if the current security principal has any of the permissions.\n+     *\n+     * @return false", "originalCommit": "c9ec7bee8e1fd8002330bcf278d13a1739cc23ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "656f1d85087c1e870092eeebe8ed2f6ec78fd836", "chunk": "diff --git a/core/src/main/java/hudson/security/ACL.java b/core/src/main/java/hudson/security/ACL.java\nindex ade421f44b..6074e38064 100644\n--- a/core/src/main/java/hudson/security/ACL.java\n+++ b/core/src/main/java/hudson/security/ACL.java\n\n@@ -133,7 +132,7 @@ public abstract class ACL {\n     /**\n      * Checks if the current security principal has any of the permissions.\n      *\n-     * @return false\n+     * @return {@code false}\n      *      if the user doesn't have one of the required permissions.\n      *\n      * @throws IllegalArgumentException\n"}}, {"oid": "656f1d85087c1e870092eeebe8ed2f6ec78fd836", "url": "https://github.com/jenkinsci/jenkins/commit/656f1d85087c1e870092eeebe8ed2f6ec78fd836", "message": "Javadoc cleanup", "committedDate": "2020-02-21T15:13:44Z", "type": "commit"}, {"oid": "589eb334cc27c82c4835e70e9182853258ec3314", "url": "https://github.com/jenkinsci/jenkins/commit/589eb334cc27c82c4835e70e9182853258ec3314", "message": "Merge branch 'jep-224-systemread' of github.com:timja/jenkins into jep-224-systemread", "committedDate": "2020-02-21T15:15:22Z", "type": "commit"}]}