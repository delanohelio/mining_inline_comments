{"pr_number": 4718, "pr_title": "[JENKINS-62231] OldDataMonitor avoids Jenkins from loading a plugin", "pr_createdAt": "2020-05-10T15:14:00Z", "pr_url": "https://github.com/jenkinsci/jenkins/pull/4718", "timeline": [{"oid": "f621e5b68b59219394e8b0fc1d56d46d557f0619", "url": "https://github.com/jenkinsci/jenkins/commit/f621e5b68b59219394e8b0fc1d56d46d557f0619", "message": "[JENKINS-62231] Avoid OldDataMonitor avoids Jenkins load a plugin", "committedDate": "2020-05-10T15:06:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDk5MA==", "url": "https://github.com/jenkinsci/jenkins/pull/4718#discussion_r422660990", "bodyText": "is this worth logging somewhere even at fine?", "author": "timja", "createdAt": "2020-05-10T15:33:20Z", "path": "core/src/main/java/hudson/util/RobustReflectionConverter.java", "diffHunk": "@@ -365,7 +365,15 @@ public Object doUnmarshal(final Object result, final HierarchicalStreamReader re\n \n         // Report any class/field errors in Saveable objects\n         if (context.get(\"ReadError\") != null && context.get(\"Saveable\") == result) {\n-            OldDataMonitor.report((Saveable)result, (ArrayList<Throwable>)context.get(\"ReadError\"));\n+            // Avoid any error in OldDataMonitor to be catastrophic. See JENKINS-62231 and JENKINS-59582\n+            // The root cause is the OldDataMonitor extension is not ready before a plugin triggers an error, for \n+            // example when trying to load a field that was created by a new version and you downgrade to the previous\n+            // one.\n+            try {\n+                OldDataMonitor.report((Saveable) result, (ArrayList<Throwable>) context.get(\"ReadError\"));\n+            } catch (Throwable ignored) {\n+                // it should be already reported", "originalCommit": "f621e5b68b59219394e8b0fc1d56d46d557f0619", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1MTIzOA==", "url": "https://github.com/jenkinsci/jenkins/pull/4718#discussion_r422951238", "bodyText": "done", "author": "MRamonLeon", "createdAt": "2020-05-11T10:45:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDk5MA=="}], "type": "inlineReview", "revised_code": {"commit": "943fbcd40c50ac0808f765fd064a2397584ebd7a", "chunk": "diff --git a/core/src/main/java/hudson/util/RobustReflectionConverter.java b/core/src/main/java/hudson/util/RobustReflectionConverter.java\nindex 3535e90fa8..7bd0c8d0a1 100644\n--- a/core/src/main/java/hudson/util/RobustReflectionConverter.java\n+++ b/core/src/main/java/hudson/util/RobustReflectionConverter.java\n\n@@ -371,8 +373,9 @@ public class RobustReflectionConverter implements Converter {\n             // one.\n             try {\n                 OldDataMonitor.report((Saveable) result, (ArrayList<Throwable>) context.get(\"ReadError\"));\n-            } catch (Throwable ignored) {\n-                // it should be already reported\n+            } catch (Throwable t) {\n+                // it should be already reported, but we report with INFO just in case\n+                LOGGER.log(Level.INFO, \"There was a problem reporting unmarshalling field errors\", t);\n             }\n             context.put(\"ReadError\", null);\n         }\n"}}, {"oid": "943fbcd40c50ac0808f765fd064a2397584ebd7a", "url": "https://github.com/jenkinsci/jenkins/commit/943fbcd40c50ac0808f765fd064a2397584ebd7a", "message": "[JENKINS-62231] Log a report problem with info", "committedDate": "2020-05-11T10:43:02Z", "type": "commit"}, {"oid": "5d40c424f02fc511f5e9096ca9c16162c9fd862a", "url": "https://github.com/jenkinsci/jenkins/commit/5d40c424f02fc511f5e9096ca9c16162c9fd862a", "message": "[JENKINS-61920] Add more information", "committedDate": "2020-05-11T15:33:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0NTEzMw==", "url": "https://github.com/jenkinsci/jenkins/pull/4718#discussion_r423545133", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String additionalMessage = \". Be sure this code is executed after InitMilestone.EXTENSIONS_AUGMENTED stage, for example in Plugin#postInitialize instead of Plugin#start\";\n          \n          \n            \n                            String additionalMessage = \". Make sure this code is executed after InitMilestone.EXTENSIONS_AUGMENTED stage, for example in Plugin#postInitialize instead of Plugin#start\";", "author": "varyvol", "createdAt": "2020-05-12T08:13:07Z", "path": "core/src/main/java/hudson/util/RobustReflectionConverter.java", "diffHunk": "@@ -365,7 +367,22 @@ public Object doUnmarshal(final Object result, final HierarchicalStreamReader re\n \n         // Report any class/field errors in Saveable objects\n         if (context.get(\"ReadError\") != null && context.get(\"Saveable\") == result) {\n-            OldDataMonitor.report((Saveable)result, (ArrayList<Throwable>)context.get(\"ReadError\"));\n+            // Avoid any error in OldDataMonitor to be catastrophic. See JENKINS-62231 and JENKINS-59582\n+            // The root cause is the OldDataMonitor extension is not ready before a plugin triggers an error, for \n+            // example when trying to load a field that was created by a new version and you downgrade to the previous\n+            // one.\n+            try {\n+                OldDataMonitor.report((Saveable) result, (ArrayList<Throwable>) context.get(\"ReadError\"));\n+            } catch (Throwable t) {\n+                // it should be already reported, but we report with INFO just in case\n+                StringBuilder message = new StringBuilder(\"There was a problem reporting unmarshalling field errors\");\n+                String additionalMessage = \". Be sure this code is executed after InitMilestone.EXTENSIONS_AUGMENTED stage, for example in Plugin#postInitialize instead of Plugin#start\";", "originalCommit": "5d40c424f02fc511f5e9096ca9c16162c9fd862a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU3Mzg0Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4718#discussion_r423573843", "bodyText": "Changed, thanks", "author": "MRamonLeon", "createdAt": "2020-05-12T08:56:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0NTEzMw=="}], "type": "inlineReview", "revised_code": {"commit": "a69a9a24e9b369fa9b54c008f0a9ca4f5c956cef", "chunk": "diff --git a/core/src/main/java/hudson/util/RobustReflectionConverter.java b/core/src/main/java/hudson/util/RobustReflectionConverter.java\nindex eb954d74f5..8d006d89ad 100644\n--- a/core/src/main/java/hudson/util/RobustReflectionConverter.java\n+++ b/core/src/main/java/hudson/util/RobustReflectionConverter.java\n\n@@ -376,11 +376,10 @@ public class RobustReflectionConverter implements Converter {\n             } catch (Throwable t) {\n                 // it should be already reported, but we report with INFO just in case\n                 StringBuilder message = new StringBuilder(\"There was a problem reporting unmarshalling field errors\");\n-                String additionalMessage = \". Be sure this code is executed after InitMilestone.EXTENSIONS_AUGMENTED stage, for example in Plugin#postInitialize instead of Plugin#start\";\n                 if (t instanceof IllegalStateException && t.getMessage().contains(\"Expected 1 instance of \" + OldDataMonitor.class.getName())) {\n-                    // it should be already reported, but we report with INFO just in case\n-                    message.append(additionalMessage);\n+                    message.append(\". Make sure this code is executed after InitMilestone.EXTENSIONS_AUGMENTED stage, for example in Plugin#postInitialize instead of Plugin#start\");\n                 }\n+                // it should be already reported, but we report with INFO just in case\n                 LOGGER.log(Level.INFO, message.toString(), t);\n             }\n             context.put(\"ReadError\", null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0NTMxMg==", "url": "https://github.com/jenkinsci/jenkins/pull/4718#discussion_r423545312", "bodyText": "Better if you declare the variable inside the if clase, where you are actually using it?", "author": "varyvol", "createdAt": "2020-05-12T08:13:26Z", "path": "core/src/main/java/hudson/util/RobustReflectionConverter.java", "diffHunk": "@@ -365,7 +367,22 @@ public Object doUnmarshal(final Object result, final HierarchicalStreamReader re\n \n         // Report any class/field errors in Saveable objects\n         if (context.get(\"ReadError\") != null && context.get(\"Saveable\") == result) {\n-            OldDataMonitor.report((Saveable)result, (ArrayList<Throwable>)context.get(\"ReadError\"));\n+            // Avoid any error in OldDataMonitor to be catastrophic. See JENKINS-62231 and JENKINS-59582\n+            // The root cause is the OldDataMonitor extension is not ready before a plugin triggers an error, for \n+            // example when trying to load a field that was created by a new version and you downgrade to the previous\n+            // one.\n+            try {\n+                OldDataMonitor.report((Saveable) result, (ArrayList<Throwable>) context.get(\"ReadError\"));\n+            } catch (Throwable t) {\n+                // it should be already reported, but we report with INFO just in case\n+                StringBuilder message = new StringBuilder(\"There was a problem reporting unmarshalling field errors\");\n+                String additionalMessage = \". Be sure this code is executed after InitMilestone.EXTENSIONS_AUGMENTED stage, for example in Plugin#postInitialize instead of Plugin#start\";", "originalCommit": "5d40c424f02fc511f5e9096ca9c16162c9fd862a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU3NDA4MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4718#discussion_r423574081", "bodyText": "done by removing the var and using the string directly", "author": "MRamonLeon", "createdAt": "2020-05-12T08:57:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0NTMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "a69a9a24e9b369fa9b54c008f0a9ca4f5c956cef", "chunk": "diff --git a/core/src/main/java/hudson/util/RobustReflectionConverter.java b/core/src/main/java/hudson/util/RobustReflectionConverter.java\nindex eb954d74f5..8d006d89ad 100644\n--- a/core/src/main/java/hudson/util/RobustReflectionConverter.java\n+++ b/core/src/main/java/hudson/util/RobustReflectionConverter.java\n\n@@ -376,11 +376,10 @@ public class RobustReflectionConverter implements Converter {\n             } catch (Throwable t) {\n                 // it should be already reported, but we report with INFO just in case\n                 StringBuilder message = new StringBuilder(\"There was a problem reporting unmarshalling field errors\");\n-                String additionalMessage = \". Be sure this code is executed after InitMilestone.EXTENSIONS_AUGMENTED stage, for example in Plugin#postInitialize instead of Plugin#start\";\n                 if (t instanceof IllegalStateException && t.getMessage().contains(\"Expected 1 instance of \" + OldDataMonitor.class.getName())) {\n-                    // it should be already reported, but we report with INFO just in case\n-                    message.append(additionalMessage);\n+                    message.append(\". Make sure this code is executed after InitMilestone.EXTENSIONS_AUGMENTED stage, for example in Plugin#postInitialize instead of Plugin#start\");\n                 }\n+                // it should be already reported, but we report with INFO just in case\n                 LOGGER.log(Level.INFO, message.toString(), t);\n             }\n             context.put(\"ReadError\", null);\n"}}, {"oid": "a69a9a24e9b369fa9b54c008f0a9ca4f5c956cef", "url": "https://github.com/jenkinsci/jenkins/commit/a69a9a24e9b369fa9b54c008f0a9ca4f5c956cef", "message": "[JENKINS-62231] Optimize catch code", "committedDate": "2020-05-12T08:55:46Z", "type": "commit"}, {"oid": "f914170e32aaa67c1734a003dcbdcf8e21e80b03", "url": "https://github.com/jenkinsci/jenkins/commit/f914170e32aaa67c1734a003dcbdcf8e21e80b03", "message": "[JENKINS-62231] Adjust level depending on the case", "committedDate": "2020-05-15T06:57:43Z", "type": "commit"}]}