{"pr_number": 4496, "pr_title": "Follow up optimizations to getAllItems() and getItems()", "pr_createdAt": "2020-02-14T02:29:44Z", "pr_url": "https://github.com/jenkinsci/jenkins/pull/4496", "timeline": [{"oid": "e93e236d8452df68126ceecd094a317a74cb8b2f", "url": "https://github.com/jenkinsci/jenkins/commit/e93e236d8452df68126ceecd094a317a74cb8b2f", "message": "Optimize getAllItems()", "committedDate": "2020-02-14T02:01:28Z", "type": "commit"}, {"oid": "57d8045e8d777f61246737ed06e33d7ae7be3648", "url": "https://github.com/jenkinsci/jenkins/commit/57d8045e8d777f61246737ed06e33d7ae7be3648", "message": "Use predicate form in getItems(Class)\n\nSigned-off-by: Raihaan Shouhell <raihaan.shouhell@autodesk.com>", "committedDate": "2020-02-14T06:52:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyNzUxMg==", "url": "https://github.com/jenkinsci/jenkins/pull/4496#discussion_r379927512", "bodyText": "Do we need all checks below after adding these predicates?", "author": "oleg-nenashev", "createdAt": "2020-02-16T19:36:49Z", "path": "core/src/main/java/hudson/model/Items.java", "diffHunk": "@@ -421,7 +421,7 @@ public static XmlFile getConfigFile(Item item) {\n         return r;\n     }\n     private static <T extends Item> void getAllItems(final ItemGroup root, Class<T> type, List<T> r, Predicate<T> pred) {\n-        List<Item> items = new ArrayList<>(((ItemGroup<?>) root).getItems());\n+        List<Item> items = new ArrayList<>(((ItemGroup<?>) root).getItems(t -> t instanceof ItemGroup || (type.isInstance(t) && pred.test(type.cast(t)))));\n         // because we add items depth first, we can use the quicker BY_NAME comparison", "originalCommit": "57d8045e8d777f61246737ed06e33d7ae7be3648", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk1NjM4OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4496#discussion_r379956388", "bodyText": "Yes there is a sneaky edge case where type is an ItemGroup.  Now that I think about it I've forgotten to add a test for this and will be adding one. The test does cover this case due to folders", "author": "res0nance", "createdAt": "2020-02-17T01:42:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyNzUxMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkwMTA1OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4496#discussion_r381901058", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (TopLevelItem i : getItems(type::isInstance))\n          \n          \n            \n                    for (TopLevelItem i : getItems(type::isInstance)) {", "author": "alecharp", "createdAt": "2020-02-20T10:09:04Z", "path": "core/src/main/java/jenkins/model/Jenkins.java", "diffHunk": "@@ -1796,9 +1796,8 @@ public String getFullDisplayName() {\n      */\n     public <T> List<T> getItems(Class<T> type) {\n         List<T> r = new ArrayList<>();\n-        for (TopLevelItem i : getItems())\n-            if (type.isInstance(i))\n-                 r.add(type.cast(i));\n+        for (TopLevelItem i : getItems(type::isInstance))", "originalCommit": "57d8045e8d777f61246737ed06e33d7ae7be3648", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "48ed32ba11758812dc1aec8cb2cf10a62cb4a95c", "chunk": "diff --git a/core/src/main/java/jenkins/model/Jenkins.java b/core/src/main/java/jenkins/model/Jenkins.java\nindex 76f756ff8a..53277fe8b9 100644\n--- a/core/src/main/java/jenkins/model/Jenkins.java\n+++ b/core/src/main/java/jenkins/model/Jenkins.java\n\n@@ -1796,8 +1796,9 @@ public class Jenkins extends AbstractCIBase implements DirectlyModifiableTopLeve\n      */\n     public <T> List<T> getItems(Class<T> type) {\n         List<T> r = new ArrayList<>();\n-        for (TopLevelItem i : getItems(type::isInstance))\n+        for (TopLevelItem i : getItems(type::isInstance)) {\n              r.add(type.cast(i));\n+         }\n         return r;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkwMTIzNQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4496#discussion_r381901235", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                         r.add(type.cast(i));\n          \n          \n            \n                         r.add(type.cast(i));\n          \n          \n            \n                     }", "author": "alecharp", "createdAt": "2020-02-20T10:09:21Z", "path": "core/src/main/java/jenkins/model/Jenkins.java", "diffHunk": "@@ -1796,9 +1796,8 @@ public String getFullDisplayName() {\n      */\n     public <T> List<T> getItems(Class<T> type) {\n         List<T> r = new ArrayList<>();\n-        for (TopLevelItem i : getItems())\n-            if (type.isInstance(i))\n-                 r.add(type.cast(i));\n+        for (TopLevelItem i : getItems(type::isInstance))\n+             r.add(type.cast(i));", "originalCommit": "57d8045e8d777f61246737ed06e33d7ae7be3648", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "48ed32ba11758812dc1aec8cb2cf10a62cb4a95c", "chunk": "diff --git a/core/src/main/java/jenkins/model/Jenkins.java b/core/src/main/java/jenkins/model/Jenkins.java\nindex 76f756ff8a..53277fe8b9 100644\n--- a/core/src/main/java/jenkins/model/Jenkins.java\n+++ b/core/src/main/java/jenkins/model/Jenkins.java\n\n@@ -1796,8 +1796,9 @@ public class Jenkins extends AbstractCIBase implements DirectlyModifiableTopLeve\n      */\n     public <T> List<T> getItems(Class<T> type) {\n         List<T> r = new ArrayList<>();\n-        for (TopLevelItem i : getItems(type::isInstance))\n+        for (TopLevelItem i : getItems(type::isInstance)) {\n              r.add(type.cast(i));\n+         }\n         return r;\n     }\n \n"}}, {"oid": "48ed32ba11758812dc1aec8cb2cf10a62cb4a95c", "url": "https://github.com/jenkinsci/jenkins/commit/48ed32ba11758812dc1aec8cb2cf10a62cb4a95c", "message": "Apply suggestions from code review\n\nCo-Authored-By: Adrien Lecharpentier <adrien.lecharpentier@gmail.com>", "committedDate": "2020-02-20T12:17:40Z", "type": "commit"}]}