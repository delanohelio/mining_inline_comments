{"pr_number": 4940, "pr_title": "Fix error message", "pr_createdAt": "2020-09-20T11:35:48Z", "pr_url": "https://github.com/jenkinsci/jenkins/pull/4940", "timeline": [{"oid": "e93a1cee558897e23b31fe37d2d2c85617cd5a5a", "url": "https://github.com/jenkinsci/jenkins/commit/e93a1cee558897e23b31fe37d2d2c85617cd5a5a", "message": "Fix error message", "committedDate": "2020-09-20T10:58:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY5NjA1Mg==", "url": "https://github.com/jenkinsci/jenkins/pull/4940#discussion_r491696052", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // happens only if the subtype fails to override neither decorateLogger method\n          \n          \n            \n                        // happens only if the subtype fails to override either decorateLogger method", "author": "daniel-beck", "createdAt": "2020-09-20T14:19:21Z", "path": "core/src/main/java/hudson/console/ConsoleLogFilter.java", "diffHunk": "@@ -69,7 +69,7 @@ public OutputStream decorateLogger(AbstractBuild build, OutputStream logger) thr\n             // happens only if the subtype fails to override neither decorateLogger method", "originalCommit": "e93a1cee558897e23b31fe37d2d2c85617cd5a5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66cc266962b7d523b06028039dfb58d50ec26d32", "chunk": "diff --git a/core/src/main/java/hudson/console/ConsoleLogFilter.java b/core/src/main/java/hudson/console/ConsoleLogFilter.java\nindex 2077f4660c..7eeb7b66bd 100644\n--- a/core/src/main/java/hudson/console/ConsoleLogFilter.java\n+++ b/core/src/main/java/hudson/console/ConsoleLogFilter.java\n\n@@ -66,7 +66,7 @@ public abstract class ConsoleLogFilter implements ExtensionPoint {\n             // old client calling newer implementation. forward the call.\n             return decorateLogger((Run) build, logger);\n         } else {\n-            // happens only if the subtype fails to override neither decorateLogger method\n+            // happens only if the subtype fails to override either decorateLogger method\n             throw new AssertionError(\"The plugin '\" + this.getClass().getName() + \"' still uses \" +\n                     \"deprecated decorateLogger(AbstractBuild,OutputStream) method. \" +\n                     \"Update the plugin to use decorateLogger(Run,OutputStream) instead.\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY5NjIzMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4940#discussion_r491696231", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                \"Update the plugin to use decorateLogger(Run,OutputStream) instead.\");\n          \n          \n            \n                                \"Update the plugin to call #decorateLogger(Run,OutputStream) instead.\");\n          \n      \n    \n    \n  \n\nIt was unclear to me what is meant here because I first thought it was referring to what was implemented (and that seemed to contradict the comment above). \"Call\" would be clearer.\nOTOH, why would you report the current class's name if you're interested in the caller of a public method? Something's weird here.", "author": "daniel-beck", "createdAt": "2020-09-20T14:21:01Z", "path": "core/src/main/java/hudson/console/ConsoleLogFilter.java", "diffHunk": "@@ -69,7 +69,7 @@ public OutputStream decorateLogger(AbstractBuild build, OutputStream logger) thr\n             // happens only if the subtype fails to override neither decorateLogger method\n             throw new AssertionError(\"The plugin '\" + this.getClass().getName() + \"' still uses \" +\n                     \"deprecated decorateLogger(AbstractBuild,OutputStream) method. \" +\n-                    \"Update the plugin to use setUp(Run,OutputStream) instead.\");\n+                    \"Update the plugin to use decorateLogger(Run,OutputStream) instead.\");", "originalCommit": "e93a1cee558897e23b31fe37d2d2c85617cd5a5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY5OTMxMA==", "url": "https://github.com/jenkinsci/jenkins/pull/4940#discussion_r491699310", "bodyText": "Not sure I'd add the # because this isn't JavaDoc, but not against it either.\nAdding the class name would be OK, but it would be reported next to the message in the exception's stack trace too.\nAs for the rest of the wording, there are many similar pieces of code similar to this (hence the copy/paste error of the method name in the first place), so if that's getting changed, it should probably be changed across the board.", "author": "Zastai", "createdAt": "2020-09-20T14:56:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY5NjIzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcwMDMzNg==", "url": "https://github.com/jenkinsci/jenkins/pull/4940#discussion_r491700336", "bodyText": "Actually, that branch is reached when a ConsoleFilter overrides neither method, which is logically an AbstractMethodError().\nSo if anything, it should be \"implement\" or \"override\" instead of \"use\" or \"call\".\nOr just drop the AssertionError and throw AbstractMethodException instead, which is what SimpleBuildStep does.\nWhatever change is made should then also be made in BuildWrapper (looks like it's where this was copied from).", "author": "Zastai", "createdAt": "2020-09-20T15:07:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY5NjIzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcwMzA2Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4940#discussion_r491703066", "bodyText": "Actually, that branch is reached when a ConsoleFilter overrides neither method, which is logically an AbstractMethodError().\n\nRight, but then the message is just plain wrong and misleading: The mentioned method isn't overridden (\"used\") either.", "author": "daniel-beck", "createdAt": "2020-09-20T15:37:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY5NjIzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTczNjk1MA==", "url": "https://github.com/jenkinsci/jenkins/pull/4940#discussion_r491736950", "bodyText": "I've changed both places to use AbstractMethodError with a better message.", "author": "Zastai", "createdAt": "2020-09-20T21:32:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY5NjIzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "66cc266962b7d523b06028039dfb58d50ec26d32", "chunk": "diff --git a/core/src/main/java/hudson/console/ConsoleLogFilter.java b/core/src/main/java/hudson/console/ConsoleLogFilter.java\nindex 2077f4660c..7eeb7b66bd 100644\n--- a/core/src/main/java/hudson/console/ConsoleLogFilter.java\n+++ b/core/src/main/java/hudson/console/ConsoleLogFilter.java\n\n@@ -66,7 +66,7 @@ public abstract class ConsoleLogFilter implements ExtensionPoint {\n             // old client calling newer implementation. forward the call.\n             return decorateLogger((Run) build, logger);\n         } else {\n-            // happens only if the subtype fails to override neither decorateLogger method\n+            // happens only if the subtype fails to override either decorateLogger method\n             throw new AssertionError(\"The plugin '\" + this.getClass().getName() + \"' still uses \" +\n                     \"deprecated decorateLogger(AbstractBuild,OutputStream) method. \" +\n                     \"Update the plugin to use decorateLogger(Run,OutputStream) instead.\");\n"}}, {"oid": "66cc266962b7d523b06028039dfb58d50ec26d32", "url": "https://github.com/jenkinsci/jenkins/commit/66cc266962b7d523b06028039dfb58d50ec26d32", "message": "Fix English-o\n\nCo-authored-by: Daniel Beck <1831569+daniel-beck@users.noreply.github.com>", "committedDate": "2020-09-20T15:02:05Z", "type": "commit"}, {"oid": "0f23e720aa81d4001234959e6ec6d8dc3f3ee955", "url": "https://github.com/jenkinsci/jenkins/commit/0f23e720aa81d4001234959e6ec6d8dc3f3ee955", "message": "Use AbstractMethodError\n\nFor both ConsoleLogFilter and BuildWrapper, to better describe what the\nproblem is.", "committedDate": "2020-09-20T21:31:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1NDM5NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4940#discussion_r494354395", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                \"either overload of the decorateLogger method.\");\n          \n          \n            \n                                \"either overload the decorateLogger method.\");", "author": "MRamonLeon", "createdAt": "2020-09-24T14:14:12Z", "path": "core/src/main/java/hudson/console/ConsoleLogFilter.java", "diffHunk": "@@ -66,10 +66,9 @@ public OutputStream decorateLogger(AbstractBuild build, OutputStream logger) thr\n             // old client calling newer implementation. forward the call.\n             return decorateLogger((Run) build, logger);\n         } else {\n-            // happens only if the subtype fails to override neither decorateLogger method\n-            throw new AssertionError(\"The plugin '\" + this.getClass().getName() + \"' still uses \" +\n-                    \"deprecated decorateLogger(AbstractBuild,OutputStream) method. \" +\n-                    \"Update the plugin to use setUp(Run,OutputStream) instead.\");\n+            // happens only if the subtype fails to override either decorateLogger method\n+            throw new AbstractMethodError(\"Plugin class '\" + this.getClass().getName() + \"' does not override \" +\n+                    \"either overload of the decorateLogger method.\");", "originalCommit": "0f23e720aa81d4001234959e6ec6d8dc3f3ee955", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NTg5Mg==", "url": "https://github.com/jenkinsci/jenkins/pull/4940#discussion_r494365892", "bodyText": "Wrong, overload here is a noun.", "author": "daniel-beck", "createdAt": "2020-09-24T14:28:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1NDM5NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1NTEzNg==", "url": "https://github.com/jenkinsci/jenkins/pull/4940#discussion_r494355136", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                \"either overload of the setUp method.\");\n          \n          \n            \n                                \"either overload the setUp method.\");", "author": "MRamonLeon", "createdAt": "2020-09-24T14:15:09Z", "path": "core/src/main/java/hudson/tasks/BuildWrapper.java", "diffHunk": "@@ -140,10 +140,9 @@ public boolean tearDown( Build build, BuildListener listener ) throws IOExceptio\n     public Environment setUp( AbstractBuild build, Launcher launcher, BuildListener listener ) throws IOException, InterruptedException {\n         if (build instanceof Build)\n             return setUp((Build)build,launcher,listener);\n-        else\n-            throw new AssertionError(\"The plugin '\" + this.getClass().getName() + \"' still uses \" +\n-                    \"deprecated setUp(Build,Launcher,BuildListener) method. \" +\n-                    \"Update the plugin to use setUp(AbstractBuild, Launcher, BuildListener) instead.\");\n+        else // neither overload was overridden\n+            throw new AbstractMethodError(\"Plugin class '\" + this.getClass().getName() + \"' does not override \" +\n+                    \"either overload of the setUp method.\");", "originalCommit": "0f23e720aa81d4001234959e6ec6d8dc3f3ee955", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NTk2Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4940#discussion_r494365966", "bodyText": "Wrong, overload here is a noun.", "author": "daniel-beck", "createdAt": "2020-09-24T14:28:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1NTEzNg=="}], "type": "inlineReview", "revised_code": {"commit": "6ffad43f75764154b1af4127add28b38d0f325a3", "chunk": "diff --git a/core/src/main/java/hudson/tasks/BuildWrapper.java b/core/src/main/java/hudson/tasks/BuildWrapper.java\nindex 3174de5eea..3d4497ffeb 100644\n--- a/core/src/main/java/hudson/tasks/BuildWrapper.java\n+++ b/core/src/main/java/hudson/tasks/BuildWrapper.java\n\n@@ -133,25 +134,38 @@ public abstract class BuildWrapper extends AbstractDescribableImpl<BuildWrapper>\n      *      non-null if the build can continue, null if there was an error\n      *      and the build needs to be aborted.\n      * @throws IOException\n-     *      terminates the build abnormally. Hudson will handle the exception\n-     *      and reports a nice error message.\n+     *      terminates the build abnormally. Jenkins will handle the exception\n+     *      and report a nice error message.\n+     * @throws UnsupportedOperationException\n+     *      when a plugin does not support this type of build.\n      * @since 1.150\n      */\n     public Environment setUp( AbstractBuild build, Launcher launcher, BuildListener listener ) throws IOException, InterruptedException {\n-        if (build instanceof Build)\n+        // If it's a Build, and the plugin implements the deprecated API, use it.\n+        if (build instanceof Build && Util.isOverridden(BuildWrapper.class, getClass(), \"setUp\", Build.class, Launcher.class, OutputStream.class))\n             return setUp((Build)build,launcher,listener);\n-        else // neither overload was overridden\n-            throw new AbstractMethodError(\"Plugin class '\" + this.getClass().getName() + \"' does not override \" +\n-                    \"either overload of the setUp method.\");\n+        else // not a supported build type\n+            throw new UnsupportedOperationException(\"Plugin class '\" + this.getClass().getName() +\n+                    \"' does not support a build of type '\" + build.getClass().getName() + \"'.\");\n     }\n \n     /**\n+     * @throws AbstractMethodError\n+     *     when a plugin overrides neither this method nor {@link #setUp(AbstractBuild, Launcher, BuildListener)}.\n+     *\n      * @deprecated since 2007-10-28.\n      *      Use {@link #setUp(AbstractBuild, Launcher, BuildListener)} instead.\n      */\n     @Deprecated\n     public Environment setUp( Build build, Launcher launcher, BuildListener listener ) throws IOException, InterruptedException {\n-        throw new UnsupportedOperationException(getClass()+\" needs to implement the setUp method\");\n+        if (Util.isOverridden(BuildWrapper.class, getClass(), \"setUp\", AbstractBuild.class, Launcher.class, BuildListener.class)) {\n+            // old client calling newer implementation. forward the call.\n+            return setUp((AbstractBuild)build, launcher, listener);\n+        } else {\n+            // happens only if the subtype fails to override either setUp method\n+            throw new AbstractMethodError(\"Plugin class '\" + this.getClass().getName() + \"' does not override \" +\n+                    \"either overload of the setUp method.\");\n+        }\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1NTUyMw==", "url": "https://github.com/jenkinsci/jenkins/pull/4940#discussion_r494355523", "bodyText": "don't we want this information?", "author": "MRamonLeon", "createdAt": "2020-09-24T14:15:38Z", "path": "core/src/main/java/hudson/tasks/BuildWrapper.java", "diffHunk": "@@ -140,10 +140,9 @@ public boolean tearDown( Build build, BuildListener listener ) throws IOExceptio\n     public Environment setUp( AbstractBuild build, Launcher launcher, BuildListener listener ) throws IOException, InterruptedException {\n         if (build instanceof Build)\n             return setUp((Build)build,launcher,listener);\n-        else\n-            throw new AssertionError(\"The plugin '\" + this.getClass().getName() + \"' still uses \" +\n-                    \"deprecated setUp(Build,Launcher,BuildListener) method. \" +\n-                    \"Update the plugin to use setUp(AbstractBuild, Launcher, BuildListener) instead.\");", "originalCommit": "0f23e720aa81d4001234959e6ec6d8dc3f3ee955", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NjYwMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4940#discussion_r494366601", "bodyText": "As above.", "author": "daniel-beck", "createdAt": "2020-09-24T14:29:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1NTUyMw=="}], "type": "inlineReview", "revised_code": {"commit": "6ffad43f75764154b1af4127add28b38d0f325a3", "chunk": "diff --git a/core/src/main/java/hudson/tasks/BuildWrapper.java b/core/src/main/java/hudson/tasks/BuildWrapper.java\nindex 3174de5eea..3d4497ffeb 100644\n--- a/core/src/main/java/hudson/tasks/BuildWrapper.java\n+++ b/core/src/main/java/hudson/tasks/BuildWrapper.java\n\n@@ -133,25 +134,38 @@ public abstract class BuildWrapper extends AbstractDescribableImpl<BuildWrapper>\n      *      non-null if the build can continue, null if there was an error\n      *      and the build needs to be aborted.\n      * @throws IOException\n-     *      terminates the build abnormally. Hudson will handle the exception\n-     *      and reports a nice error message.\n+     *      terminates the build abnormally. Jenkins will handle the exception\n+     *      and report a nice error message.\n+     * @throws UnsupportedOperationException\n+     *      when a plugin does not support this type of build.\n      * @since 1.150\n      */\n     public Environment setUp( AbstractBuild build, Launcher launcher, BuildListener listener ) throws IOException, InterruptedException {\n-        if (build instanceof Build)\n+        // If it's a Build, and the plugin implements the deprecated API, use it.\n+        if (build instanceof Build && Util.isOverridden(BuildWrapper.class, getClass(), \"setUp\", Build.class, Launcher.class, OutputStream.class))\n             return setUp((Build)build,launcher,listener);\n-        else // neither overload was overridden\n-            throw new AbstractMethodError(\"Plugin class '\" + this.getClass().getName() + \"' does not override \" +\n-                    \"either overload of the setUp method.\");\n+        else // not a supported build type\n+            throw new UnsupportedOperationException(\"Plugin class '\" + this.getClass().getName() +\n+                    \"' does not support a build of type '\" + build.getClass().getName() + \"'.\");\n     }\n \n     /**\n+     * @throws AbstractMethodError\n+     *     when a plugin overrides neither this method nor {@link #setUp(AbstractBuild, Launcher, BuildListener)}.\n+     *\n      * @deprecated since 2007-10-28.\n      *      Use {@link #setUp(AbstractBuild, Launcher, BuildListener)} instead.\n      */\n     @Deprecated\n     public Environment setUp( Build build, Launcher launcher, BuildListener listener ) throws IOException, InterruptedException {\n-        throw new UnsupportedOperationException(getClass()+\" needs to implement the setUp method\");\n+        if (Util.isOverridden(BuildWrapper.class, getClass(), \"setUp\", AbstractBuild.class, Launcher.class, BuildListener.class)) {\n+            // old client calling newer implementation. forward the call.\n+            return setUp((AbstractBuild)build, launcher, listener);\n+        } else {\n+            // happens only if the subtype fails to override either setUp method\n+            throw new AbstractMethodError(\"Plugin class '\" + this.getClass().getName() + \"' does not override \" +\n+                    \"either overload of the setUp method.\");\n+        }\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1NTU5NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4940#discussion_r494355595", "bodyText": "don't we want this information?", "author": "MRamonLeon", "createdAt": "2020-09-24T14:15:44Z", "path": "core/src/main/java/hudson/console/ConsoleLogFilter.java", "diffHunk": "@@ -66,10 +66,9 @@ public OutputStream decorateLogger(AbstractBuild build, OutputStream logger) thr\n             // old client calling newer implementation. forward the call.\n             return decorateLogger((Run) build, logger);\n         } else {\n-            // happens only if the subtype fails to override neither decorateLogger method\n-            throw new AssertionError(\"The plugin '\" + this.getClass().getName() + \"' still uses \" +\n-                    \"deprecated decorateLogger(AbstractBuild,OutputStream) method. \" +\n-                    \"Update the plugin to use setUp(Run,OutputStream) instead.\");", "originalCommit": "0f23e720aa81d4001234959e6ec6d8dc3f3ee955", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NjUyMg==", "url": "https://github.com/jenkinsci/jenkins/pull/4940#discussion_r494366522", "bodyText": "It's wrong.", "author": "daniel-beck", "createdAt": "2020-09-24T14:29:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1NTU5NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQzODg2MA==", "url": "https://github.com/jenkinsci/jenkins/pull/4940#discussion_r497438860", "bodyText": "Add to Javadoc?", "author": "oleg-nenashev", "createdAt": "2020-09-30T11:33:55Z", "path": "core/src/main/java/hudson/tasks/BuildWrapper.java", "diffHunk": "@@ -140,10 +140,9 @@ public boolean tearDown( Build build, BuildListener listener ) throws IOExceptio\n     public Environment setUp( AbstractBuild build, Launcher launcher, BuildListener listener ) throws IOException, InterruptedException {\n         if (build instanceof Build)\n             return setUp((Build)build,launcher,listener);\n-        else\n-            throw new AssertionError(\"The plugin '\" + this.getClass().getName() + \"' still uses \" +\n-                    \"deprecated setUp(Build,Launcher,BuildListener) method. \" +\n-                    \"Update the plugin to use setUp(AbstractBuild, Launcher, BuildListener) instead.\");\n+        else // neither overload was overridden\n+            throw new AbstractMethodError(\"Plugin class '\" + this.getClass().getName() + \"' does not override \" +", "originalCommit": "0f23e720aa81d4001234959e6ec6d8dc3f3ee955", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ1NTY0Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4940#discussion_r497455643", "bodyText": "Done.", "author": "Zastai", "createdAt": "2020-09-30T12:05:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQzODg2MA=="}], "type": "inlineReview", "revised_code": {"commit": "6ffad43f75764154b1af4127add28b38d0f325a3", "chunk": "diff --git a/core/src/main/java/hudson/tasks/BuildWrapper.java b/core/src/main/java/hudson/tasks/BuildWrapper.java\nindex 3174de5eea..3d4497ffeb 100644\n--- a/core/src/main/java/hudson/tasks/BuildWrapper.java\n+++ b/core/src/main/java/hudson/tasks/BuildWrapper.java\n\n@@ -133,25 +134,38 @@ public abstract class BuildWrapper extends AbstractDescribableImpl<BuildWrapper>\n      *      non-null if the build can continue, null if there was an error\n      *      and the build needs to be aborted.\n      * @throws IOException\n-     *      terminates the build abnormally. Hudson will handle the exception\n-     *      and reports a nice error message.\n+     *      terminates the build abnormally. Jenkins will handle the exception\n+     *      and report a nice error message.\n+     * @throws UnsupportedOperationException\n+     *      when a plugin does not support this type of build.\n      * @since 1.150\n      */\n     public Environment setUp( AbstractBuild build, Launcher launcher, BuildListener listener ) throws IOException, InterruptedException {\n-        if (build instanceof Build)\n+        // If it's a Build, and the plugin implements the deprecated API, use it.\n+        if (build instanceof Build && Util.isOverridden(BuildWrapper.class, getClass(), \"setUp\", Build.class, Launcher.class, OutputStream.class))\n             return setUp((Build)build,launcher,listener);\n-        else // neither overload was overridden\n-            throw new AbstractMethodError(\"Plugin class '\" + this.getClass().getName() + \"' does not override \" +\n-                    \"either overload of the setUp method.\");\n+        else // not a supported build type\n+            throw new UnsupportedOperationException(\"Plugin class '\" + this.getClass().getName() +\n+                    \"' does not support a build of type '\" + build.getClass().getName() + \"'.\");\n     }\n \n     /**\n+     * @throws AbstractMethodError\n+     *     when a plugin overrides neither this method nor {@link #setUp(AbstractBuild, Launcher, BuildListener)}.\n+     *\n      * @deprecated since 2007-10-28.\n      *      Use {@link #setUp(AbstractBuild, Launcher, BuildListener)} instead.\n      */\n     @Deprecated\n     public Environment setUp( Build build, Launcher launcher, BuildListener listener ) throws IOException, InterruptedException {\n-        throw new UnsupportedOperationException(getClass()+\" needs to implement the setUp method\");\n+        if (Util.isOverridden(BuildWrapper.class, getClass(), \"setUp\", AbstractBuild.class, Launcher.class, BuildListener.class)) {\n+            // old client calling newer implementation. forward the call.\n+            return setUp((AbstractBuild)build, launcher, listener);\n+        } else {\n+            // happens only if the subtype fails to override either setUp method\n+            throw new AbstractMethodError(\"Plugin class '\" + this.getClass().getName() + \"' does not override \" +\n+                    \"either overload of the setUp method.\");\n+        }\n     }\n \n     /**\n"}}, {"oid": "4048ba84075653cbcb62c8d21c22b21f6f9f6bb9", "url": "https://github.com/jenkinsci/jenkins/commit/4048ba84075653cbcb62c8d21c22b21f6f9f6bb9", "message": "Document the exception", "committedDate": "2020-09-30T12:00:25Z", "type": "commit"}, {"oid": "6ffad43f75764154b1af4127add28b38d0f325a3", "url": "https://github.com/jenkinsci/jenkins/commit/6ffad43f75764154b1af4127add28b38d0f325a3", "message": "Adjust the error handling for BuildWrapper.setUp\n\nThis adds an override check to the deprecated overload, moving the\nAbstractMethodError there to match.\nThe error in the new API is now an UnsupportedOperationException\nbecause it's a case of an old plugin (supporting only Build) being\ncalled for a non-Build build (e.g. MavenBuild).", "committedDate": "2020-09-30T12:04:43Z", "type": "commit"}, {"oid": "464ebc3e8ed48e228d9b1abb33f02820a94c88f4", "url": "https://github.com/jenkinsci/jenkins/commit/464ebc3e8ed48e228d9b1abb33f02820a94c88f4", "message": "Correct class name", "committedDate": "2020-09-30T12:15:26Z", "type": "commit"}]}