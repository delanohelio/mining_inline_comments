{"pr_number": 1890, "pr_title": "Added JSON and CSV parsing examples", "pr_createdAt": "2020-01-29T13:18:54Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/1890", "timeline": [{"oid": "5ee718c260fbcce2fe192a9ee842219591631053", "url": "https://github.com/hazelcast/hazelcast-jet/commit/5ee718c260fbcce2fe192a9ee842219591631053", "message": "Added JSON and CSV parsing examples", "committedDate": "2020-01-29T13:18:35Z", "type": "commit"}, {"oid": "c6a194c231c403da5198dd49c52832e534970550", "url": "https://github.com/hazelcast/hazelcast-jet/commit/c6a194c231c403da5198dd49c52832e534970550", "message": "WIP", "committedDate": "2020-01-29T15:37:48Z", "type": "commit"}, {"oid": "e57471928a06174b67878461ff7a7da774c6d28a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/e57471928a06174b67878461ff7a7da774c6d28a", "message": "Don't fully read the file, use UTF-8", "committedDate": "2020-01-29T16:03:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQyMTc2Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1890#discussion_r372421762", "bodyText": "UTF-8 is required for JSON data, not the platform encoding.", "author": "viliam-durina", "createdAt": "2020-01-29T14:42:42Z", "path": "examples/files/src/main/java/com/hazelcast/jet/examples/files/SalesJsonAnalyzer.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.files;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.stream.JsonReader;\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.aggregate.AggregateOperations;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.Sources;\n+\n+import java.io.FileReader;\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Demonstrates the usage of the file {@link Sources#filesBuilder sources}\n+ * in a job that reads a sales records in a JSON file, filters possible contactless\n+ * transactions, aggregates transaction counts per payment type and prints\n+ * the results to standard output.\n+ * <p>\n+ * The sample JSON file is in {@code {module.dir}/data/sales.json}.\n+ */\n+public class SalesJsonAnalyzer {\n+\n+    private static Pipeline buildPipeline(String sourceDir) {\n+        Pipeline p = Pipeline.create();\n+\n+        BatchSource<SalesRecord> source = Sources.filesBuilder(sourceDir)\n+                                                 .glob(\"*.json\")\n+                                                 .build(path -> {\n+                                                         Gson gson = new Gson();\n+                                                         JsonReader reader = new JsonReader(new FileReader(path.toFile()));", "originalCommit": "5ee718c260fbcce2fe192a9ee842219591631053", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c6a194c231c403da5198dd49c52832e534970550", "chunk": "diff --git a/examples/files/src/main/java/com/hazelcast/jet/examples/files/SalesJsonAnalyzer.java b/examples/files/src/main/java/com/hazelcast/jet/examples/files/SalesJsonAnalyzer.java\nindex 85244c57e..a46c89ee3 100644\n--- a/examples/files/src/main/java/com/hazelcast/jet/examples/files/SalesJsonAnalyzer.java\n+++ b/examples/files/src/main/java/com/hazelcast/jet/examples/files/SalesJsonAnalyzer.java\n\n@@ -26,9 +26,15 @@ import com.hazelcast.jet.pipeline.Pipeline;\n import com.hazelcast.jet.pipeline.Sinks;\n import com.hazelcast.jet.pipeline.Sources;\n \n-import java.io.FileReader;\n+import java.io.IOException;\n import java.io.Serializable;\n-import java.util.stream.Stream;\n+import java.nio.file.Files;\n+import java.util.Iterator;\n+import java.util.Spliterator;\n+import java.util.Spliterators;\n+import java.util.stream.StreamSupport;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n \n /**\n  * Demonstrates the usage of the file {@link Sources#filesBuilder sources}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ5ODQzOA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1890#discussion_r372498438", "bodyText": "do we need to close the file?", "author": "cangencer", "createdAt": "2020-01-29T16:41:35Z", "path": "examples/files/src/main/java/com/hazelcast/jet/examples/files/SalesJsonAnalyzer.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.files;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.stream.JsonReader;\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.aggregate.AggregateOperations;\n+import com.hazelcast.jet.pipeline.BatchSource;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.Sources;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.lang.reflect.Type;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Iterator;\n+import java.util.Spliterator;\n+import java.util.Spliterators;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Demonstrates the usage of the file {@link Sources#filesBuilder sources}\n+ * in a job that reads a sales records in a JSON file, filters possible contactless\n+ * transactions, aggregates transaction counts per payment type and prints\n+ * the results to standard output.\n+ * <p>\n+ * The sample JSON file is in {@code {module.dir}/data/sales.json}.\n+ */\n+public class SalesJsonAnalyzer {\n+\n+    private static Pipeline buildPipeline(String sourceDir) {\n+        Pipeline p = Pipeline.create();\n+\n+        BatchSource<SalesRecord> source = Sources.filesBuilder(sourceDir)\n+            .glob(\"*.json\")\n+            .build(path -> readJsonArray(path, SalesRecord.class));\n+        p.readFrom(source)\n+         .filter(record -> record.getPrice() < 30)\n+         .groupingKey(SalesRecord::getPaymentType)\n+         .aggregate(AggregateOperations.counting())\n+         .writeTo(Sinks.logger());\n+\n+        return p;\n+    }\n+\n+    /**\n+     * Read a file denoted by the given {@code filePath} that contains a single\n+     * JSON array of objects of type {@code type}. Returns the file contents as\n+     * a {@code Stream}.\n+     */\n+    private static <T> Stream<T> readJsonArray(Path filePath, Type type) throws IOException {\n+        Gson gson = new Gson();\n+        JsonReader reader = new JsonReader(Files.newBufferedReader(filePath, UTF_8));", "originalCommit": "e57471928a06174b67878461ff7a7da774c6d28a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUwNjcxMw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1890#discussion_r372506713", "bodyText": "Good point, fixed", "author": "viliam-durina", "createdAt": "2020-01-29T16:55:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ5ODQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "f473e3694718c9af37667cb967dd502c766b3393", "chunk": "diff --git a/examples/files/src/main/java/com/hazelcast/jet/examples/files/SalesJsonAnalyzer.java b/examples/files/src/main/java/com/hazelcast/jet/examples/files/SalesJsonAnalyzer.java\nindex 5fe7bd055..7a0d51076 100644\n--- a/examples/files/src/main/java/com/hazelcast/jet/examples/files/SalesJsonAnalyzer.java\n+++ b/examples/files/src/main/java/com/hazelcast/jet/examples/files/SalesJsonAnalyzer.java\n\n@@ -21,6 +21,7 @@ import com.google.gson.stream.JsonReader;\n import com.hazelcast.jet.Jet;\n import com.hazelcast.jet.JetInstance;\n import com.hazelcast.jet.aggregate.AggregateOperations;\n+import com.hazelcast.jet.function.RunnableEx;\n import com.hazelcast.jet.pipeline.BatchSource;\n import com.hazelcast.jet.pipeline.Pipeline;\n import com.hazelcast.jet.pipeline.Sinks;\n"}}, {"oid": "f473e3694718c9af37667cb967dd502c766b3393", "url": "https://github.com/hazelcast/hazelcast-jet/commit/f473e3694718c9af37667cb967dd502c766b3393", "message": "Close the file when done", "committedDate": "2020-01-29T16:55:24Z", "type": "commit"}]}