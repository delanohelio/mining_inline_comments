{"pr_number": 2248, "pr_title": "[005] - Fix problems in productionalized CDC code", "pr_createdAt": "2020-05-12T12:11:03Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2248", "timeline": [{"oid": "60c326b25c9a7e1bc56a4ac7c317287653a7218a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/60c326b25c9a7e1bc56a4ac7c317287653a7218a", "message": "Set Jet version for website replacement script", "committedDate": "2020-05-12T06:30:15Z", "type": "commit"}, {"oid": "4edb48ed6e9d387a08aa24246580e4ce39c88547", "url": "https://github.com/hazelcast/hazelcast-jet/commit/4edb48ed6e9d387a08aa24246580e4ce39c88547", "message": "Change type of serialization used", "committedDate": "2020-05-12T06:40:30Z", "type": "commit"}, {"oid": "a53fbbfaaa376eaae975cbc12064e7cdf4d26e7f", "url": "https://github.com/hazelcast/hazelcast-jet/commit/a53fbbfaaa376eaae975cbc12064e7cdf4d26e7f", "message": "Use JSON convenience instead of Jackson jr", "committedDate": "2020-05-12T10:08:13Z", "type": "commit"}, {"oid": "73bd41ca81629a4ce2c59acdd9a557aa8e1b49e9", "url": "https://github.com/hazelcast/hazelcast-jet/commit/73bd41ca81629a4ce2c59acdd9a557aa8e1b49e9", "message": "Fix jar assembly", "committedDate": "2020-05-12T10:08:43Z", "type": "commit"}, {"oid": "2e5db9ffd16579bfd386113e97f85c706a266132", "url": "https://github.com/hazelcast/hazelcast-jet/commit/2e5db9ffd16579bfd386113e97f85c706a266132", "message": "Remove redundant cast", "committedDate": "2020-05-12T11:24:18Z", "type": "commit"}, {"oid": "3d0a87e2beb2efa4299bf0fb3bc6c44e039a3956", "url": "https://github.com/hazelcast/hazelcast-jet/commit/3d0a87e2beb2efa4299bf0fb3bc6c44e039a3956", "message": "Fix some website content", "committedDate": "2020-05-13T11:47:48Z", "type": "commit"}, {"oid": "fe83154cda3fbf649a35994a18c295ed92b89a71", "url": "https://github.com/hazelcast/hazelcast-jet/commit/fe83154cda3fbf649a35994a18c295ed92b89a71", "message": "Re-implement CDC specific map sinks", "committedDate": "2020-05-14T11:24:03Z", "type": "commit"}, {"oid": "413937b2cb6b7317e5c84509fce6c631d61927cf", "url": "https://github.com/hazelcast/hazelcast-jet/commit/413937b2cb6b7317e5c84509fce6c631d61927cf", "message": "Make jackson annotations part of the main CDC jar", "committedDate": "2020-05-14T11:57:38Z", "type": "commit"}, {"oid": "16ad3b0872c4b895e546b27645847a70e402d886", "url": "https://github.com/hazelcast/hazelcast-jet/commit/16ad3b0872c4b895e546b27645847a70e402d886", "message": "Adjust tutorial to latest changes", "committedDate": "2020-05-14T12:05:45Z", "type": "commit"}, {"oid": "a59106887703490494daac5408771f3c49d8de01", "url": "https://github.com/hazelcast/hazelcast-jet/commit/a59106887703490494daac5408771f3c49d8de01", "message": "Merge branch 'master' into cdc-fixes", "committedDate": "2020-05-14T13:17:46Z", "type": "commit"}, {"oid": "701f42a903d2d35ecef0908a59673c69b4011caa", "url": "https://github.com/hazelcast/hazelcast-jet/commit/701f42a903d2d35ecef0908a59673c69b4011caa", "message": "Adapt to latest json convenience changes", "committedDate": "2020-05-15T05:28:37Z", "type": "commit"}, {"oid": "9ef66ff6aa2402357010fa73701d2629aa37ef96", "url": "https://github.com/hazelcast/hazelcast-jet/commit/9ef66ff6aa2402357010fa73701d2629aa37ef96", "message": "Add CDC map sink to sources & sinks page", "committedDate": "2020-05-15T06:39:11Z", "type": "commit"}, {"oid": "4bb9f77b46043deed30f5f479e44492cd5396d39", "url": "https://github.com/hazelcast/hazelcast-jet/commit/4bb9f77b46043deed30f5f479e44492cd5396d39", "message": "Revert some changes in the tutorial", "committedDate": "2020-05-15T06:54:09Z", "type": "commit"}, {"oid": "ce0aca55ed49d9ebf81d29f0b7d19c9d46f75191", "url": "https://github.com/hazelcast/hazelcast-jet/commit/ce0aca55ed49d9ebf81d29f0b7d19c9d46f75191", "message": "Change licensing of the CDC modules", "committedDate": "2020-05-15T07:29:37Z", "type": "commit"}, {"oid": "df1d4e6be0596f6ee1cc8216c22629a70eaf5c24", "url": "https://github.com/hazelcast/hazelcast-jet/commit/df1d4e6be0596f6ee1cc8216c22629a70eaf5c24", "message": "Fix javadoc", "committedDate": "2020-05-15T08:13:59Z", "type": "commit"}, {"oid": "6f1dd23fd08921e489c04cabbd48b1549fc85822", "url": "https://github.com/hazelcast/hazelcast-jet/commit/6f1dd23fd08921e489c04cabbd48b1549fc85822", "message": "Extract some common processor code", "committedDate": "2020-05-15T11:07:10Z", "type": "commit"}, {"oid": "2574aadd70d20f8eddcba4b4eae81585da8ad60f", "url": "https://github.com/hazelcast/hazelcast-jet/commit/2574aadd70d20f8eddcba4b4eae81585da8ad60f", "message": "Force total parallelism of sink to 1", "committedDate": "2020-05-18T06:50:26Z", "type": "commit"}, {"oid": "e04c2b46a5ec47e783aed646821b32bb59401168", "url": "https://github.com/hazelcast/hazelcast-jet/commit/e04c2b46a5ec47e783aed646821b32bb59401168", "message": "Merge branch 'master' into cdc-fixes", "committedDate": "2020-05-18T06:55:54Z", "type": "commit"}, {"oid": "dafdb7c8c76c887a2fe1d0a99bc9648d771e0ce2", "url": "https://github.com/hazelcast/hazelcast-jet/commit/dafdb7c8c76c887a2fe1d0a99bc9648d771e0ce2", "message": "Re-add dependency exclusion from master", "committedDate": "2020-05-18T07:40:39Z", "type": "commit"}, {"oid": "ecb771581dff407afb78761b76f47006964c1cf1", "url": "https://github.com/hazelcast/hazelcast-jet/commit/ecb771581dff407afb78761b76f47006964c1cf1", "message": "Proper fix for licenses", "committedDate": "2020-05-18T07:53:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5MjM4NA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2248#discussion_r426592384", "bodyText": "this method can be inlined into the serializer", "author": "cangencer", "createdAt": "2020-05-18T12:35:43Z", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/ChangeRecordImpl.java", "diffHunk": "@@ -102,26 +98,15 @@ public String toString() {\n         return toJson();\n     }\n \n-    @Override\n-    public int getFactoryId() {\n-        return CdcJsonDataSerializerHook.FACTORY_ID;\n-    }\n-\n-    @Override\n-    public int getClassId() {\n-        return CdcJsonDataSerializerHook.CHANGE_RECORD;\n-    }\n-\n-    @Override\n-    public void writeData(ObjectDataOutput out) throws IOException {\n+    void writeData(ObjectDataOutput out) throws IOException {\n         out.writeUTF(keyJson);\n         out.writeUTF(valueJson);\n     }\n \n-    @Override\n-    public void readData(ObjectDataInput in) throws IOException {\n-        keyJson = in.readUTF();\n-        valueJson = in.readUTF();\n+    static ChangeRecordImpl readData(ObjectDataInput in) throws IOException {\n+        String keyJson = in.readUTF();", "originalCommit": "ecb771581dff407afb78761b76f47006964c1cf1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY2NDAxNQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2248#discussion_r426664015", "bodyText": "The fields used are implementation details (to some extent) and I didn't want to add getters for them (that aren't part of the interface). The read/write methods seemed a better solution to me (they aren't the overriding ones from the other serialization, but are similar and confusing maybe) and I used them everywhere for consistency. Will inline them.", "author": "jbartok", "createdAt": "2020-05-18T14:23:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5MjM4NA=="}], "type": "inlineReview", "revised_code": {"commit": "e826cc53ba19537cc6daf529887258139074c8ce", "chunk": "diff --git a/extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/ChangeRecordImpl.java b/extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/ChangeRecordImpl.java\nindex bb5660622..05c0909c9 100644\n--- a/extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/ChangeRecordImpl.java\n+++ b/extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/ChangeRecordImpl.java\n\n@@ -93,20 +90,17 @@ public class ChangeRecordImpl implements ChangeRecord {\n         return json;\n     }\n \n-    @Override\n-    public String toString() {\n-        return toJson();\n+    public String getKeyJson() {\n+        return keyJson;\n     }\n \n-    void writeData(ObjectDataOutput out) throws IOException {\n-        out.writeUTF(keyJson);\n-        out.writeUTF(valueJson);\n+    public String getValueJson() {\n+        return valueJson;\n     }\n \n-    static ChangeRecordImpl readData(ObjectDataInput in) throws IOException {\n-        String keyJson = in.readUTF();\n-        String valueJson = in.readUTF();\n-        return new ChangeRecordImpl(keyJson, valueJson);\n+    @Override\n+    public String toString() {\n+        return toJson();\n     }\n \n     private static <T> T get(Map<String, Object> map, String key, Class<T> clazz) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5MjU4Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2248#discussion_r426592586", "bodyText": "it would be better to inline the serialization methods if you're using StreamSerializer", "author": "cangencer", "createdAt": "2020-05-18T12:36:05Z", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java", "diffHunk": "@@ -234,26 +233,16 @@ public void setOffset(Map<String, ?> partition, Map<String, ?> offset) {\n             partitionsToOffset.put(partition, offset);\n         }\n \n-        @Override\n-        public int getFactoryId() {\n-            return CdcJsonDataSerializerHook.FACTORY_ID;\n-        }\n-\n-        @Override\n-        public int getClassId() {\n-            return CdcJsonDataSerializerHook.SOURCE_STATE;\n-        }\n-\n-        @Override\n-        public void writeData(ObjectDataOutput out) throws IOException {\n+        void writeData(ObjectDataOutput out) throws IOException {", "originalCommit": "ecb771581dff407afb78761b76f47006964c1cf1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e826cc53ba19537cc6daf529887258139074c8ce", "chunk": "diff --git a/extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java b/extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java\nindex 639aae53c..43953e52c 100644\n--- a/extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java\n+++ b/extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java\n\n@@ -233,16 +240,12 @@ public class CdcSource {\n             partitionsToOffset.put(partition, offset);\n         }\n \n-        void writeData(ObjectDataOutput out) throws IOException {\n-            out.writeObject(partitionsToOffset);\n-            out.writeObject(historyRecords);\n+        Map<Map<String, ?>, Map<String, ?>> getPartitionsToOffset() {\n+            return partitionsToOffset;\n         }\n \n-        static State readData(ObjectDataInput in) throws IOException {\n-            State state = new State();\n-            state.partitionsToOffset.putAll(in.readObject());\n-            state.historyRecords.addAll(in.readObject());\n-            return state;\n+        List<byte[]> getHistoryRecords() {\n+            return historyRecords;\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5NjYzNw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2248#discussion_r426596637", "bodyText": "again can be inlined", "author": "cangencer", "createdAt": "2020-05-18T12:43:05Z", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/RecordPartImpl.java", "diffHunk": "@@ -77,23 +79,13 @@ public String toString() {\n         return toJson();\n     }\n \n-    @Override\n-    public int getFactoryId() {\n-        return CdcJsonDataSerializerHook.FACTORY_ID;\n-    }\n-\n-    @Override\n-    public int getClassId() {\n-        return CdcJsonDataSerializerHook.RECORD_PART;\n-    }\n-\n-    @Override\n-    public void writeData(ObjectDataOutput out) throws IOException {\n+    void writeData(ObjectDataOutput out) throws IOException {\n         out.writeUTF(json);\n     }\n \n-    @Override\n-    public void readData(ObjectDataInput in) throws IOException {\n-        json = in.readUTF();\n+    static RecordPartImpl readData(ObjectDataInput in) throws IOException {\n+        String json = in.readUTF();", "originalCommit": "ecb771581dff407afb78761b76f47006964c1cf1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e826cc53ba19537cc6daf529887258139074c8ce", "chunk": "diff --git a/extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/RecordPartImpl.java b/extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/RecordPartImpl.java\nindex 2eae6ce87..d43b8b411 100644\n--- a/extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/RecordPartImpl.java\n+++ b/extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/RecordPartImpl.java\n\n@@ -79,13 +77,4 @@ class RecordPartImpl implements RecordPart {\n         return toJson();\n     }\n \n-    void writeData(ObjectDataOutput out) throws IOException {\n-        out.writeUTF(json);\n-    }\n-\n-    static RecordPartImpl readData(ObjectDataInput in) throws IOException {\n-        String json = in.readUTF();\n-        return new RecordPartImpl(json);\n-    }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5ODMzNA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2248#discussion_r426598334", "bodyText": "too much duplication with UpdateMapP", "author": "cangencer", "createdAt": "2020-05-18T12:45:58Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/UpdateMapWithMaterializedValuesP.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.connector;\n+\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.internal.serialization.SerializationService;\n+import com.hazelcast.jet.core.Inbox;\n+import com.hazelcast.jet.core.JetDataSerializerHook;\n+import com.hazelcast.jet.core.Outbox;\n+import com.hazelcast.jet.core.Processor;\n+import com.hazelcast.map.EntryProcessor;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+\n+import javax.annotation.CheckReturnValue;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class UpdateMapWithMaterializedValuesP<T, K, V> extends AsyncHazelcastWriterP {", "originalCommit": "ecb771581dff407afb78761b76f47006964c1cf1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0NjExOQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2248#discussion_r426646119", "bodyText": "My opinion was (and is) that forcing further reuse/code share would hurt understandability greatly, but on the other hand I can definitely give it one more try.", "author": "jbartok", "createdAt": "2020-05-18T13:58:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5ODMzNA=="}], "type": "inlineReview", "revised_code": {"commit": "cb1ddb0f7aaa5619c0f705aba0531894173991de", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/UpdateMapWithMaterializedValuesP.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/UpdateMapWithMaterializedValuesP.java\ndeleted file mode 100644\nindex 818045811..000000000\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/UpdateMapWithMaterializedValuesP.java\n+++ /dev/null\n\n@@ -1,217 +0,0 @@\n-/*\n- * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.jet.impl.connector;\n-\n-import com.hazelcast.core.HazelcastInstance;\n-import com.hazelcast.function.FunctionEx;\n-import com.hazelcast.internal.serialization.SerializationService;\n-import com.hazelcast.jet.core.Inbox;\n-import com.hazelcast.jet.core.JetDataSerializerHook;\n-import com.hazelcast.jet.core.Outbox;\n-import com.hazelcast.jet.core.Processor;\n-import com.hazelcast.map.EntryProcessor;\n-import com.hazelcast.map.IMap;\n-import com.hazelcast.nio.ObjectDataInput;\n-import com.hazelcast.nio.ObjectDataOutput;\n-import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n-\n-import javax.annotation.CheckReturnValue;\n-import javax.annotation.Nonnull;\n-import javax.annotation.Nullable;\n-import java.io.IOException;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-public class UpdateMapWithMaterializedValuesP<T, K, V> extends AsyncHazelcastWriterP {\n-\n-    private static final int PENDING_ITEM_COUNT_LIMIT = 1024;\n-\n-    private final String mapName;\n-    private final FunctionEx<? super T, ? extends K> keyFn;\n-    private final FunctionEx<? super T, ? extends V> valueFn;\n-\n-    private PartitionInfo partitionInfo;\n-    private IMap<K, V> map;\n-\n-    // one map per partition to store the updates\n-    private Map<K, V>[] tmpMaps;\n-    // count how many pending actual items are in each map\n-    private int[] tmpCounts;\n-\n-    private int pendingItemCount;\n-    private int currentPartitionId;\n-\n-    UpdateMapWithMaterializedValuesP(HazelcastInstance instance,\n-                                     int maxParallelAsyncOps,\n-                                     String mapName,\n-                                     @Nonnull FunctionEx<? super T, ? extends K> keyFn,\n-                                     @Nonnull FunctionEx<? super T, ? extends V> valueFn) {\n-        super(instance, maxParallelAsyncOps);\n-        this.mapName = mapName;\n-        this.keyFn = keyFn;\n-        this.valueFn = valueFn;\n-    }\n-\n-    @Override\n-    public void init(@Nonnull Outbox outbox, @Nonnull Context context) {\n-        map = instance().getMap(mapName);\n-        partitionInfo = new PartitionInfo(instance());\n-\n-        int partitionCount = partitionInfo.getPartitionCount();\n-        tmpMaps = new Map[partitionCount];\n-        tmpCounts = new int[partitionCount];\n-        for (int i = 0; i < partitionCount; i++) {\n-            tmpMaps[i] = new HashMap<>();\n-        }\n-    }\n-\n-    @Override\n-    protected void processInternal(Inbox inbox) {\n-        if (pendingItemCount < PENDING_ITEM_COUNT_LIMIT) {\n-            inbox.drain(this::addToBuffer);\n-        }\n-        submitPending();\n-    }\n-\n-    @Override\n-    protected boolean flushInternal() {\n-        return submitPending();\n-    }\n-\n-    // returns if we were able to submit all pending items\n-    private boolean submitPending() {\n-        if (pendingItemCount == 0) {\n-            return true;\n-        }\n-        for (int i = 0; i < tmpMaps.length; i++, currentPartitionId = incrCircular(currentPartitionId, tmpMaps.length)) {\n-            if (tmpMaps[currentPartitionId].isEmpty()) {\n-                continue;\n-            }\n-            if (!tryAcquirePermit()) {\n-                return false;\n-            }\n-\n-            Map<K, V> updates = tmpMaps[currentPartitionId];\n-            ApplyMaterializedValuesEntryProcessor<K, V> entryProcessor =\n-                    new ApplyMaterializedValuesEntryProcessor<>(updates);\n-            setCallback(map.submitToKeys(updates.keySet(), entryProcessor));\n-            pendingItemCount -= tmpCounts[currentPartitionId];\n-            tmpCounts[currentPartitionId] = 0;\n-            tmpMaps[currentPartitionId] = new HashMap<>();\n-        }\n-        if (currentPartitionId == tmpMaps.length) {\n-            currentPartitionId = 0;\n-        }\n-        assert pendingItemCount == 0 : \"pending item count should be 0, but was \" + pendingItemCount;\n-        return true;\n-    }\n-\n-    private void addToBuffer(T item) {\n-        K key = keyFn.apply(item);\n-        V value = valueFn.apply(item);\n-\n-        int partitionId = partitionInfo.getPartitionId(key);\n-\n-        Map<K, V> tmpMap = tmpMaps[partitionId];\n-        if (!tmpMap.containsKey(key)) {\n-            tmpCounts[partitionId]++;\n-            pendingItemCount++;\n-        }\n-        tmpMap.put(key, value);\n-    }\n-\n-    /**\n-     * Returns {@code v+1} or 0, if {@code v+1 == limit}.\n-     */\n-    @CheckReturnValue\n-    private static int incrCircular(int v, int limit) {\n-        v++;\n-        if (v == limit) {\n-            v = 0;\n-        }\n-        return v;\n-    }\n-\n-    public static class Supplier<T, K, V> extends AbstractHazelcastConnectorSupplier {\n-\n-        static final long serialVersionUID = 1L;\n-\n-        private String name;\n-        private final FunctionEx<? super T, ? extends K> toKeyFn;\n-        private final FunctionEx<? super T, ? extends V> valueFn;\n-\n-        public Supplier(\n-                @Nullable String clientXml,\n-                @Nonnull String name,\n-                @Nonnull FunctionEx<? super T, ? extends K> toKeyFn,\n-                @Nonnull FunctionEx<? super T, ? extends V> valueFn\n-        ) {\n-            super(clientXml);\n-            this.name = name;\n-            this.toKeyFn = toKeyFn;\n-            this.valueFn = valueFn;\n-        }\n-\n-        @Override\n-        protected Processor createProcessor(HazelcastInstance instance, SerializationService serializationService) {\n-            return new UpdateMapWithMaterializedValuesP<T, K, V>(\n-                    instance, MAX_PARALLEL_ASYNC_OPS_DEFAULT, name, toKeyFn, valueFn\n-            );\n-        }\n-    }\n-\n-    public static class ApplyMaterializedValuesEntryProcessor<K, V>\n-            implements EntryProcessor<K, V, Object>, IdentifiedDataSerializable {\n-\n-        private Map<K, V> updates;\n-\n-        public ApplyMaterializedValuesEntryProcessor() { //needed for (de)serialization\n-        }\n-\n-        public ApplyMaterializedValuesEntryProcessor(Map<K, V> updates) {\n-            this.updates = updates;\n-        }\n-\n-        @Override\n-        public Object process(Map.Entry<K, V> entry) {\n-            K key = entry.getKey();\n-            V newValue = updates.get(key);\n-            entry.setValue(newValue);\n-            return null;\n-        }\n-\n-        @Override\n-        public void writeData(ObjectDataOutput out) throws IOException {\n-            out.writeObject(updates);\n-        }\n-\n-        @Override\n-        public void readData(ObjectDataInput in) throws IOException {\n-            updates = in.readObject();\n-        }\n-\n-        @Override\n-        public int getFactoryId() {\n-            return JetDataSerializerHook.FACTORY_ID;\n-        }\n-\n-        @Override\n-        public int getClassId() {\n-            return JetDataSerializerHook.APPLY_MATERIALIZED_VALUE_ENTRY_PROCESSOR;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYwMDI2OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2248#discussion_r426600269", "bodyText": "would be better to call this PartitionService, and then you can initialize it in init() automatically and allow it to be used from subclasses automatically.", "author": "cangencer", "createdAt": "2020-05-18T12:49:03Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/AsyncHazelcastWriterP.java", "diffHunk": "@@ -158,4 +164,32 @@ private boolean asyncCallsDone() {\n         checkError();\n         return allWritten;\n     }\n+\n+    static class PartitionInfo {", "originalCommit": "ecb771581dff407afb78761b76f47006964c1cf1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb1ddb0f7aaa5619c0f705aba0531894173991de", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/AsyncHazelcastWriterP.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/AsyncHazelcastWriterP.java\nindex db66a46d2..c7130b373 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/AsyncHazelcastWriterP.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/AsyncHazelcastWriterP.java\n\n@@ -164,32 +158,4 @@ public abstract class AsyncHazelcastWriterP implements Processor {\n         checkError();\n         return allWritten;\n     }\n-\n-    static class PartitionInfo {\n-\n-        private final IntSupplier count;\n-        private final ToIntFunction<Object> ids;\n-\n-        PartitionInfo(HazelcastInstance instance) {\n-            if (ImdgUtil.isMemberInstance(instance)) {\n-                HazelcastInstanceImpl castInstance = (HazelcastInstanceImpl) instance;\n-                IPartitionService memberPartitionService = castInstance.node.nodeEngine.getPartitionService();\n-                count = memberPartitionService::getPartitionCount;\n-                ids = memberPartitionService::getPartitionId;\n-            } else {\n-                HazelcastClientProxy clientProxy = (HazelcastClientProxy) instance;\n-                ClientPartitionService clientPartitionService = clientProxy.client.getClientPartitionService();\n-                count = clientPartitionService::getPartitionCount;\n-                ids = clientPartitionService::getPartitionId;\n-            }\n-        }\n-\n-        int getPartitionCount() {\n-            return count.getAsInt();\n-        }\n-\n-        int getPartitionId(Object key) {\n-            return ids.applyAsInt(key);\n-        }\n-    }\n }\n"}}, {"oid": "e826cc53ba19537cc6daf529887258139074c8ce", "url": "https://github.com/hazelcast/hazelcast-jet/commit/e826cc53ba19537cc6daf529887258139074c8ce", "message": "Inline some methods used for serialization", "committedDate": "2020-05-18T14:37:24Z", "type": "commit"}, {"oid": "fb6f9f81f8b67dd53d59f6980749ff5c1be3fe8e", "url": "https://github.com/hazelcast/hazelcast-jet/commit/fb6f9f81f8b67dd53d59f6980749ff5c1be3fe8e", "message": "Rename Apache license header file", "committedDate": "2020-05-19T05:55:34Z", "type": "commit"}, {"oid": "5f497ad9817cb0126691cec52ebb1ec51084eb55", "url": "https://github.com/hazelcast/hazelcast-jet/commit/5f497ad9817cb0126691cec52ebb1ec51084eb55", "message": "Merge branch 'master' into cdc-fixes", "committedDate": "2020-05-19T06:35:14Z", "type": "commit"}, {"oid": "b49840fc7f61bf2e501d493a077943e3048c8084", "url": "https://github.com/hazelcast/hazelcast-jet/commit/b49840fc7f61bf2e501d493a077943e3048c8084", "message": "Adapt to latest changes", "committedDate": "2020-05-19T06:36:36Z", "type": "commit"}, {"oid": "cb1ddb0f7aaa5619c0f705aba0531894173991de", "url": "https://github.com/hazelcast/hazelcast-jet/commit/cb1ddb0f7aaa5619c0f705aba0531894173991de", "message": "Move CdcSinks to another PR", "committedDate": "2020-05-19T07:52:08Z", "type": "commit"}]}