{"pr_number": 2061, "pr_title": "Improve serialization exceptions", "pr_createdAt": "2020-03-13T11:41:29Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2061", "timeline": [{"oid": "817a6a92e132b0ba1e5c3fd2b022efa142f18b0c", "url": "https://github.com/hazelcast/hazelcast-jet/commit/817a6a92e132b0ba1e5c3fd2b022efa142f18b0c", "message": "Refactor DelegatingSerializationService", "committedDate": "2020-03-13T11:31:43Z", "type": "commit"}, {"oid": "fcf8b154f73a6c51ba7f9e92367faa1dfcfdaf99", "url": "https://github.com/hazelcast/hazelcast-jet/commit/fcf8b154f73a6c51ba7f9e92367faa1dfcfdaf99", "message": "Fix tests", "committedDate": "2020-03-13T12:05:08Z", "type": "commit"}, {"oid": "3f2da481b8b6bfc0c54118a82ed40ef76b249c8f", "url": "https://github.com/hazelcast/hazelcast-jet/commit/3f2da481b8b6bfc0c54118a82ed40ef76b249c8f", "message": "Fix tests", "committedDate": "2020-03-13T12:13:16Z", "type": "commit"}, {"oid": "d70a9c39bba5b44476af3ad75dec618ff9170c04", "url": "https://github.com/hazelcast/hazelcast-jet/commit/d70a9c39bba5b44476af3ad75dec618ff9170c04", "message": "Handle null object", "committedDate": "2020-03-14T15:40:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkyNTMyMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2061#discussion_r392925320", "bodyText": "We should not depend on the exact text from the superclass. We also lose the stack trace of the original exc.\nI'd rather just wrap the caught exception, use the original message and append a text to it.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw handle(typeId, hse);\n          \n          \n            \n                            throw new HazelcastSerializationException(hse.getMessage() + \". You can register a job-specific serializer using JobConfig.registerSerializer()\", hse);\n          \n      \n    \n    \n  \n\nIf we also dispose the delegate (which we should), we wouldn't have to handle the inactive case: the delegate will throw HazelcastInstanceNotActiveException directly.", "author": "viliam-durina", "createdAt": "2020-03-16T10:40:05Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/serialization/DelegatingSerializationService.java", "diffHunk": "@@ -108,33 +108,57 @@ public PortableContext getPortableContext() {\n \n     @Override\n     public SerializerAdapter serializerFor(Object object) {\n-        Class<?> clazz = object.getClass();\n-        SerializerAdapter serializer = serializersByClass.get(clazz);\n+        Class<?> clazz = object == null ? null : object.getClass();\n+\n+        SerializerAdapter serializer = null;\n+        if (clazz != null) {\n+            serializer = serializersByClass.get(clazz);\n+        }\n         if (serializer == null) {\n-            serializer = delegate.serializerFor(object);\n-            if (serializer == null) {\n-                throw active ?\n-                        new HazelcastSerializationException(\"There is no suitable serializer for \" + clazz) :\n-                        new HazelcastInstanceNotActiveException();\n+            try {\n+                serializer = delegate.serializerFor(object);\n+            } catch (HazelcastSerializationException hse) {\n+                throw handle(clazz, hse);\n             }\n         }\n+        if (serializer == null) {\n+            throw active ? new MissingSerializer(clazz) : new HazelcastInstanceNotActiveException();\n+        }\n         return serializer;\n     }\n \n+    private RuntimeException handle(Class<?> clazz, HazelcastSerializationException e) {\n+        String message = e.getMessage();\n+        if (message != null && message.startsWith(\"There is no suitable serializer for\")) {\n+            return new MissingSerializer(clazz);\n+        }\n+        return e;\n+    }\n+\n     @Override\n     public SerializerAdapter serializerFor(int typeId) {\n         SerializerAdapter serializer = serializersById.get(typeId);\n         if (serializer == null) {\n-            serializer = delegate.serializerFor(typeId);\n-            if (serializer == null) {\n-                throw active ?\n-                        newHazelcastSerializationException(typeId) :\n-                        new HazelcastInstanceNotActiveException();\n+            try {\n+                serializer = delegate.serializerFor(typeId);\n+            } catch (HazelcastSerializationException hse) {\n+                throw handle(typeId, hse);", "originalCommit": "d70a9c39bba5b44476af3ad75dec618ff9170c04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0ODA2NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2061#discussion_r392948065", "bodyText": "We should not dispose() delegate as it's a global serializer. I have addressed the remaining comment.", "author": "gierlachg", "createdAt": "2020-03-16T11:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkyNTMyMA=="}], "type": "inlineReview", "revised_code": {"commit": "41c1a5b76a111db96b18e515dbf47c6e37de5aae", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/serialization/DelegatingSerializationService.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/serialization/DelegatingSerializationService.java\nindex 76e6f1f96..83f91887d 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/serialization/DelegatingSerializationService.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/serialization/DelegatingSerializationService.java\n\n@@ -118,23 +118,15 @@ public class DelegatingSerializationService extends AbstractSerializationService\n             try {\n                 serializer = delegate.serializerFor(object);\n             } catch (HazelcastSerializationException hse) {\n-                throw handle(clazz, hse);\n+                throw new SerializationFailure(clazz, hse);\n             }\n         }\n         if (serializer == null) {\n-            throw active ? new MissingSerializer(clazz) : new HazelcastInstanceNotActiveException();\n+            throw active ? new SerializationFailure(clazz) : new HazelcastInstanceNotActiveException();\n         }\n         return serializer;\n     }\n \n-    private RuntimeException handle(Class<?> clazz, HazelcastSerializationException e) {\n-        String message = e.getMessage();\n-        if (message != null && message.startsWith(\"There is no suitable serializer for\")) {\n-            return new MissingSerializer(clazz);\n-        }\n-        return e;\n-    }\n-\n     @Override\n     public SerializerAdapter serializerFor(int typeId) {\n         SerializerAdapter serializer = serializersById.get(typeId);\n"}}, {"oid": "41c1a5b76a111db96b18e515dbf47c6e37de5aae", "url": "https://github.com/hazelcast/hazelcast-jet/commit/41c1a5b76a111db96b18e515dbf47c6e37de5aae", "message": "Simplify exception handling", "committedDate": "2020-03-16T11:22:21Z", "type": "commit"}, {"oid": "005afd15d73219e24629943b3ae50695fcfd6fa7", "url": "https://github.com/hazelcast/hazelcast-jet/commit/005afd15d73219e24629943b3ae50695fcfd6fa7", "message": "Simplify exception handling", "committedDate": "2020-03-16T11:24:18Z", "type": "commit"}, {"oid": "69bc4e5c715455fb053d2a7506f6397314d4849a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/69bc4e5c715455fb053d2a7506f6397314d4849a", "message": "Simplify exception handling", "committedDate": "2020-03-16T12:30:44Z", "type": "commit"}]}