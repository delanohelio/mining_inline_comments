{"pr_number": 2030, "pr_title": "Improve WordCount example", "pr_createdAt": "2020-02-28T14:32:22Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2030", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyOTMxOQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2030#discussion_r385729319", "bodyText": "Is there any await() available? Forced sleeps don't provide best experience.", "author": "gierlachg", "createdAt": "2020-02-28T14:37:19Z", "path": "examples/wordcount/src/main/java/com/hazelcast/jet/examples/wordcount/WordCount.java", "diffHunk": "@@ -72,18 +72,19 @@ public static void main(String[] args) throws Exception {\n     /**\n      * This code illustrates a few more things about Jet, new in 0.5. See comments.\n      */\n-    private void go() {\n+    private void go() throws InterruptedException {\n         try {\n             setup();\n-            System.out.print(\"\\nCounting words... \");\n+            System.out.println(\"\\nCounting words... \");\n             long start = System.nanoTime();\n             Pipeline p = buildPipeline();\n             Observable<Entry<String, Long>> observable = jet.getObservable(COUNTS);\n             observable.toFuture(s -> s.collect(toMap(Entry::getKey, Entry::getValue)))\n                     .thenApply(WordCount::checkResults)\n                     .thenAccept(WordCount::printResults);\n             jet.newJob(p).join();\n-            System.out.print(\"done in \" + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start) + \" milliseconds.\");\n+            System.out.println(\"done in \" + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start) + \" milliseconds.\");\n+            Thread.sleep(5_000);", "originalCommit": "4a10492703f8451fac4e2f6f21b3ae6bcf908c3b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3b27e06471e5d8d8dc4ea22e53568e80378d4ee8", "chunk": "diff --git a/examples/wordcount/src/main/java/com/hazelcast/jet/examples/wordcount/WordCount.java b/examples/wordcount/src/main/java/com/hazelcast/jet/examples/wordcount/WordCount.java\nindex 28bac1ee0..a18a7e8e8 100644\n--- a/examples/wordcount/src/main/java/com/hazelcast/jet/examples/wordcount/WordCount.java\n+++ b/examples/wordcount/src/main/java/com/hazelcast/jet/examples/wordcount/WordCount.java\n\n@@ -72,19 +73,20 @@ public class WordCount {\n     /**\n      * This code illustrates a few more things about Jet, new in 0.5. See comments.\n      */\n-    private void go() throws InterruptedException {\n+    private void go() throws Exception {\n         try {\n             setup();\n             System.out.println(\"\\nCounting words... \");\n             long start = System.nanoTime();\n             Pipeline p = buildPipeline();\n             Observable<Entry<String, Long>> observable = jet.getObservable(COUNTS);\n-            observable.toFuture(s -> s.collect(toMap(Entry::getKey, Entry::getValue)))\n-                    .thenApply(WordCount::checkResults)\n-                    .thenAccept(WordCount::printResults);\n+            CompletableFuture<Map<String, Long>> f\n+                    = observable.toFuture(s -> s.collect(toMap(Entry::getKey, Entry::getValue)));\n             jet.newJob(p).join();\n             System.out.println(\"done in \" + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start) + \" milliseconds.\");\n-            Thread.sleep(5_000);\n+            Map<String, Long> results = f.get();\n+            checkResults(results);\n+            printResults(results);\n         } finally {\n             Jet.shutdownAll();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyOTg2NA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2030#discussion_r385729864", "bodyText": "it would be better to take the future, and then just print the values, rather than calling thenAccept\nyou can just do\nFuture f = observable.toFuture(..);\n..\njet.submitJob(..)\n..\nMap<> results = f.get()\ncheckResults(results);\nprintResults(results);", "author": "cangencer", "createdAt": "2020-02-28T14:38:25Z", "path": "examples/wordcount/src/main/java/com/hazelcast/jet/examples/wordcount/WordCount.java", "diffHunk": "@@ -72,18 +72,19 @@ public static void main(String[] args) throws Exception {\n     /**\n      * This code illustrates a few more things about Jet, new in 0.5. See comments.\n      */\n-    private void go() {\n+    private void go() throws InterruptedException {\n         try {\n             setup();\n-            System.out.print(\"\\nCounting words... \");\n+            System.out.println(\"\\nCounting words... \");\n             long start = System.nanoTime();\n             Pipeline p = buildPipeline();\n             Observable<Entry<String, Long>> observable = jet.getObservable(COUNTS);\n             observable.toFuture(s -> s.collect(toMap(Entry::getKey, Entry::getValue)))", "originalCommit": "4a10492703f8451fac4e2f6f21b3ae6bcf908c3b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3b27e06471e5d8d8dc4ea22e53568e80378d4ee8", "chunk": "diff --git a/examples/wordcount/src/main/java/com/hazelcast/jet/examples/wordcount/WordCount.java b/examples/wordcount/src/main/java/com/hazelcast/jet/examples/wordcount/WordCount.java\nindex 28bac1ee0..a18a7e8e8 100644\n--- a/examples/wordcount/src/main/java/com/hazelcast/jet/examples/wordcount/WordCount.java\n+++ b/examples/wordcount/src/main/java/com/hazelcast/jet/examples/wordcount/WordCount.java\n\n@@ -72,19 +73,20 @@ public class WordCount {\n     /**\n      * This code illustrates a few more things about Jet, new in 0.5. See comments.\n      */\n-    private void go() throws InterruptedException {\n+    private void go() throws Exception {\n         try {\n             setup();\n             System.out.println(\"\\nCounting words... \");\n             long start = System.nanoTime();\n             Pipeline p = buildPipeline();\n             Observable<Entry<String, Long>> observable = jet.getObservable(COUNTS);\n-            observable.toFuture(s -> s.collect(toMap(Entry::getKey, Entry::getValue)))\n-                    .thenApply(WordCount::checkResults)\n-                    .thenAccept(WordCount::printResults);\n+            CompletableFuture<Map<String, Long>> f\n+                    = observable.toFuture(s -> s.collect(toMap(Entry::getKey, Entry::getValue)));\n             jet.newJob(p).join();\n             System.out.println(\"done in \" + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start) + \" milliseconds.\");\n-            Thread.sleep(5_000);\n+            Map<String, Long> results = f.get();\n+            checkResults(results);\n+            printResults(results);\n         } finally {\n             Jet.shutdownAll();\n         }\n"}}, {"oid": "3b27e06471e5d8d8dc4ea22e53568e80378d4ee8", "url": "https://github.com/hazelcast/hazelcast-jet/commit/3b27e06471e5d8d8dc4ea22e53568e80378d4ee8", "message": "Improve WordCount example", "committedDate": "2020-02-28T14:48:08Z", "type": "commit"}, {"oid": "3b27e06471e5d8d8dc4ea22e53568e80378d4ee8", "url": "https://github.com/hazelcast/hazelcast-jet/commit/3b27e06471e5d8d8dc4ea22e53568e80378d4ee8", "message": "Improve WordCount example", "committedDate": "2020-02-28T14:48:08Z", "type": "forcePushed"}]}