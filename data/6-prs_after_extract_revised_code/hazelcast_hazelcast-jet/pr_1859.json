{"pr_number": 1859, "pr_title": "Make TestSourceTest more tolerant to hiccups", "pr_createdAt": "2020-01-20T08:53:43Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/1859", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3MzE3Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368473176", "bodyText": "I'd prefer not to depend on Guava for tests, you can rewrite this easily using IntStream.range(). Also it's not clear why you're asserting itemsPerSecond - 1 or itemsPerSecond + 1, maybe the test should be rewritten completely in a more deterministic way.", "author": "cangencer", "createdAt": "2020-01-20T10:28:42Z", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java", "diffHunk": "@@ -75,9 +76,11 @@ public void test_itemStream_withWindowing() throws Throwable {\n          .window(WindowDefinition.tumbling(1000))\n          .aggregate(AggregateOperations.counting())\n          .apply(assertCollectedEventually(10, windowResults -> {\n-             // find any window that has 10 items, some may be incomplete due to hiccups\n-             boolean matched = windowResults.stream().anyMatch(r -> r.result() == itemsPerSecond);\n-             assertTrue(\"Did not find any window with 10 items: \" + windowResults, matched);\n+             Range<Integer> range = Range.closed(itemsPerSecond - 1, itemsPerSecond + 1);", "originalCommit": "14b5395bfa75ea9c477470cab616454fe35ee950", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3MzU4Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368473583", "bodyText": "Ok", "author": "jbartok", "createdAt": "2020-01-20T10:29:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3MzE3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4d5aee782adeca3306e00b60c827900e171c614e", "chunk": "diff --git a/hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java b/hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java\nindex 938d4d317..d6e1c03a5 100644\n--- a/hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java\n+++ b/hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java\n\n@@ -75,12 +74,24 @@ public class TestSourcesTest extends PipelineTestSupport {\n          .withNativeTimestamps(0)\n          .window(WindowDefinition.tumbling(1000))\n          .aggregate(AggregateOperations.counting())\n-         .apply(assertCollectedEventually(10, windowResults -> {\n-             Range<Integer> range = Range.closed(itemsPerSecond - 1, itemsPerSecond + 1);\n-             int total = windowResults.size();\n-             int matched = (int) windowResults.stream().filter(r -> range.contains(r.result().intValue())).count();\n-             assertTrue(String.format(\"Did not find enough good windows, only %d out of %d: %s\",\n-                     matched, total, windowResults), matched >= 0.5d * total);\n+         .apply(assertCollectedEventually(60, windowResults -> {\n+             //look at last 5 windows at most\n+             int windowsToConsider = Math.min(5, windowResults.size());\n+\n+             //count the total no. of items emitted in those windows\n+             int totalItems = windowResults.stream()\n+                     .skip(windowResults.size() - windowsToConsider)\n+                     .mapToInt(r -> r.result().intValue())\n+                     .sum();\n+\n+             //compute their average\n+             double avgItems = (double) totalItems / windowsToConsider;\n+\n+             //compute how far the actual average is from the desired one\n+             double deviationFromTarget = Math.abs(avgItems - itemsPerSecond);\n+\n+             assertTrue(String.format(\"Average items per second (%.2f) too far from target (%d)\",\n+                     avgItems, itemsPerSecond), deviationFromTarget <= 0.1d);\n          }));\n \n         expectedException.expectMessage(AssertionCompletedException.class.getName());\n"}}, {"oid": "dd80a58bfcb599c9d090983bf5d206a4da81b05a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/dd80a58bfcb599c9d090983bf5d206a4da81b05a", "message": "Make test more tolerant to hick-ups", "committedDate": "2020-01-20T11:14:08Z", "type": "commit"}, {"oid": "4d5aee782adeca3306e00b60c827900e171c614e", "url": "https://github.com/hazelcast/hazelcast-jet/commit/4d5aee782adeca3306e00b60c827900e171c614e", "message": "Improve test", "committedDate": "2020-01-20T11:14:08Z", "type": "commit"}, {"oid": "4d5aee782adeca3306e00b60c827900e171c614e", "url": "https://github.com/hazelcast/hazelcast-jet/commit/4d5aee782adeca3306e00b60c827900e171c614e", "message": "Improve test", "committedDate": "2020-01-20T11:14:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzODc4OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368538789", "bodyText": "this will throw IllegalArgumentException because you can get a negative number here", "author": "cangencer", "createdAt": "2020-01-20T13:09:29Z", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java", "diffHunk": "@@ -74,10 +74,24 @@ public void test_itemStream_withWindowing() throws Throwable {\n          .withNativeTimestamps(0)\n          .window(WindowDefinition.tumbling(1000))\n          .aggregate(AggregateOperations.counting())\n-         .apply(assertCollectedEventually(10, windowResults -> {\n-             // find any window that has 10 items, some may be incomplete due to hiccups\n-             boolean matched = windowResults.stream().anyMatch(r -> r.result() == itemsPerSecond);\n-             assertTrue(\"Did not find any window with 10 items: \" + windowResults, matched);\n+         .apply(assertCollectedEventually(60, windowResults -> {\n+             //look at last 5 windows at most\n+             int windowsToConsider = Math.min(5, windowResults.size());\n+\n+             //count the total no. of items emitted in those windows\n+             int totalItems = windowResults.stream()\n+                     .skip(windowResults.size() - windowsToConsider)", "originalCommit": "4d5aee782adeca3306e00b60c827900e171c614e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4MDE3Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368580172", "bodyText": "I don't see how I could get a negative number there, until windowsToConsider = Math.min(5, windowResults.size()).", "author": "jbartok", "createdAt": "2020-01-20T14:38:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzODc4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4NTIyNQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368585225", "bodyText": "yes, you are right, my bad", "author": "cangencer", "createdAt": "2020-01-20T14:47:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzODc4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c0e7623194262c99086ac1a78e85a2843b40cb17", "chunk": "diff --git a/hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java b/hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java\nindex d6e1c03a5..aa56a2d53 100644\n--- a/hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java\n+++ b/hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java\n\n@@ -75,8 +75,8 @@ public class TestSourcesTest extends PipelineTestSupport {\n          .window(WindowDefinition.tumbling(1000))\n          .aggregate(AggregateOperations.counting())\n          .apply(assertCollectedEventually(60, windowResults -> {\n-             //look at last 5 windows at most\n-             int windowsToConsider = Math.min(5, windowResults.size());\n+             //look at last 5 windows at most, always ignore first\n+             int windowsToConsider = Math.min(5, Math.max(windowResults.size() - 1, 0));\n \n              //count the total no. of items emitted in those windows\n              int totalItems = windowResults.stream()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MDA4MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368540080", "bodyText": "now if there is just 1 window and it has 9 items, the test will pass. That's not a very strong assertion.", "author": "cangencer", "createdAt": "2020-01-20T13:12:41Z", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java", "diffHunk": "@@ -74,10 +74,24 @@ public void test_itemStream_withWindowing() throws Throwable {\n          .withNativeTimestamps(0)\n          .window(WindowDefinition.tumbling(1000))\n          .aggregate(AggregateOperations.counting())\n-         .apply(assertCollectedEventually(10, windowResults -> {\n-             // find any window that has 10 items, some may be incomplete due to hiccups\n-             boolean matched = windowResults.stream().anyMatch(r -> r.result() == itemsPerSecond);\n-             assertTrue(\"Did not find any window with 10 items: \" + windowResults, matched);\n+         .apply(assertCollectedEventually(60, windowResults -> {\n+             //look at last 5 windows at most\n+             int windowsToConsider = Math.min(5, windowResults.size());", "originalCommit": "4d5aee782adeca3306e00b60c827900e171c614e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4MTE4MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368581180", "bodyText": "If there is 1 window with 9 items, then deviationFromTarget = 1, which is not smaller than the allowed tolerance of 0.1, so it won't pass, but wait for more windows.", "author": "jbartok", "createdAt": "2020-01-20T14:39:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MDA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4NTU3OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368585578", "bodyText": "ok, again I read it thinking it was a percentage, but it's actually an absolute value.", "author": "cangencer", "createdAt": "2020-01-20T14:48:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MDA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4NTk3OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368585978", "bodyText": "how long does the test take to pass?", "author": "cangencer", "createdAt": "2020-01-20T14:49:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MDA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4ODM2OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368588369", "bodyText": "On my machine it always takes 5 seconds to pass, but unfortunately it's not the test that's bad, but the first window always has way less values than it should, usually at most 7, instead of 10.\nAnd that usually only in the \"member\" mode, the subsequent \"client\" mode is better, usually starts with a 9.\nFeels like a warmup, but I'm not sure what it is. Looking at it.", "author": "jbartok", "createdAt": "2020-01-20T14:54:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MDA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5MjE3MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368592170", "bodyText": "how about we always skip the first window?", "author": "cangencer", "createdAt": "2020-01-20T15:01:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MDA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5NTIwMQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368595201", "bodyText": "Good idea, pushed that version, much better.", "author": "jbartok", "createdAt": "2020-01-20T15:07:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MDA4MA=="}], "type": "inlineReview", "revised_code": {"commit": "c0e7623194262c99086ac1a78e85a2843b40cb17", "chunk": "diff --git a/hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java b/hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java\nindex d6e1c03a5..aa56a2d53 100644\n--- a/hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java\n+++ b/hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java\n\n@@ -75,8 +75,8 @@ public class TestSourcesTest extends PipelineTestSupport {\n          .window(WindowDefinition.tumbling(1000))\n          .aggregate(AggregateOperations.counting())\n          .apply(assertCollectedEventually(60, windowResults -> {\n-             //look at last 5 windows at most\n-             int windowsToConsider = Math.min(5, windowResults.size());\n+             //look at last 5 windows at most, always ignore first\n+             int windowsToConsider = Math.min(5, Math.max(windowResults.size() - 1, 0));\n \n              //count the total no. of items emitted in those windows\n              int totalItems = windowResults.stream()\n"}}, {"oid": "c0e7623194262c99086ac1a78e85a2843b40cb17", "url": "https://github.com/hazelcast/hazelcast-jet/commit/c0e7623194262c99086ac1a78e85a2843b40cb17", "message": "Improve test", "committedDate": "2020-01-20T15:06:38Z", "type": "commit"}]}