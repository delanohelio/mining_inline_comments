{"pr_number": 2669, "pr_title": "Document function need to be stateless, cooperative", "pr_createdAt": "2020-11-16T15:57:40Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2669", "timeline": [{"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "url": "https://github.com/hazelcast/hazelcast-jet/commit/41a8543778454fef9ed43d91a3b486bbc7e9f702", "message": "Document function need to be stateless, cooperative\n\nFixes #2661", "committedDate": "2020-11-16T15:57:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ2NTE1Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529465153", "bodyText": "There's an extra indenting space here (and elsewhere).", "author": "mtopolnik", "createdAt": "2020-11-24T11:12:53Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation.java", "diffHunk": "@@ -124,8 +128,11 @@\n      * properly implement {@code equals()}. See {@link #deductFn()} for an\n      * explanation.\n      * <p>\n-     * The returned accumulator must be serializable. For performance, you\n-     * should prefer Hazelcast custom serialization.\n+     * The accumulator produced by the supplier must be serializable. For\n+     * performance, you should prefer Hazelcast custom serialization.\n+     * <p>\n+     *  The supplier must be stateless and {@linkplain Processor#isCooperative()", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "50a0a1376e90da4436d8964641df98c430d7ff12", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation.java\nindex 176cd2a9da..923f0c459f 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation.java\n\n@@ -131,8 +131,8 @@ public interface AggregateOperation<A, R> extends Serializable {\n      * The accumulator produced by the supplier must be serializable. For\n      * performance, you should prefer Hazelcast custom serialization.\n      * <p>\n-     *  The supplier must be stateless and {@linkplain Processor#isCooperative()\n-     *  cooperative}.\n+     * The supplier must be stateless and {@linkplain Processor#isCooperative()\n+     * cooperative}.\n      */\n     @Nonnull\n     SupplierEx<A> createFn();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ2NTQ5MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529465490", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * from the results. I.e.:\n          \n          \n            \n                 * from the results. For example:", "author": "mtopolnik", "createdAt": "2020-11-24T11:13:29Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation.java", "diffHunk": "@@ -188,7 +204,16 @@\n      * to determine whether the accumulator is now \"empty\" (i.e., equal to a\n      * fresh instance), which signals that the current window contains no more\n      * items with the associated grouping key and the entry must be removed\n-     * from the results.\n+     * from the results. I.e.:", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation.java\nindex 176cd2a9da..4ab0414b1a 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation.java\n\n@@ -204,7 +204,7 @@ public interface AggregateOperation<A, R> extends Serializable {\n      * to determine whether the accumulator is now \"empty\" (i.e., equal to a\n      * fresh instance), which signals that the current window contains no more\n      * items with the associated grouping key and the entry must be removed\n-     * from the results. I.e.:\n+     * from the results. For example:\n      * <pre>\n      *     acc = create();\n      *     combine(acc, x);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MDYwMQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529470601", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                  Jet's {@link Traverser}. It must not return null traverser, but can\n          \n          \n            \n                 *                  Jet's {@link Traverser}. It must not return a null traverser, but can", "author": "mtopolnik", "createdAt": "2020-11-24T11:22:14Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/GeneralStage.java", "diffHunk": "@@ -102,10 +105,10 @@\n      * stage.flatMap(sentence -> traverseArray(sentence.split(\"\\\\W+\")))\n      * }</pre>\n      *\n-     * @param flatMapFn a stateless flatmapping function, whose result type is\n-     *                  Jet's {@link Traverser}. It must not return null\n-     *                  traverser, but can return an {@linkplain\n-     *                  Traversers#empty() empty traverser}.\n+     * @param flatMapFn a flatmapping function, whose result type is\n+     *                  Jet's {@link Traverser}. It must not return null traverser, but can", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/GeneralStage.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/GeneralStage.java\nindex e00dcbc506..ec7b9b1e28 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/GeneralStage.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/GeneralStage.java\n\n@@ -106,7 +106,7 @@ public interface GeneralStage<T> extends Stage {\n      * }</pre>\n      *\n      * @param flatMapFn a flatmapping function, whose result type is\n-     *                  Jet's {@link Traverser}. It must not return null traverser, but can\n+     *                  Jet's {@link Traverser}. It must not return a null traverser, but can\n      *                  return an {@linkplain Traversers#empty() empty traverser}. It must be\n      *                  stateless and {@linkplain Processor#isCooperative() cooperative}\n      * @param <R> the type of items in the result's traversers\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MTc2MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529471761", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                        Jet member. It must be stateless\n          \n          \n            \n                 *                        Jet member. It must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:24:20Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java", "diffHunk": "@@ -138,10 +138,10 @@ private ServiceFactories() { }\n      * for blocking code.\n      *\n      * @param createServiceFn the function that creates the service. It will be called once on each\n-     *                        Jet member.\n+     *                        Jet member. It must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java\nindex 46b763a8e7..829ce3dae5 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java\n\n@@ -138,10 +138,10 @@ public final class ServiceFactories {\n      * for blocking code.\n      *\n      * @param createServiceFn the function that creates the service. It will be called once on each\n-     *                        Jet member. It must be stateless\n+     *                        Jet member. It must be stateless.\n      * @param destroyServiceFn the function that destroys the service. It will be called once on each\n      *                         Jet member. It can be used to tear down any resources acquired by the\n-     *                         service. It must be stateless\n+     *                         service. It must be stateless.\n      * @param <S> type of the service object\n      *\n      * @see #nonSharedService(FunctionEx, ConsumerEx)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MTgyOA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529471828", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                         service. It must be stateless\n          \n          \n            \n                 *                         service. It must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:24:28Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java", "diffHunk": "@@ -138,10 +138,10 @@ private ServiceFactories() { }\n      * for blocking code.\n      *\n      * @param createServiceFn the function that creates the service. It will be called once on each\n-     *                        Jet member.\n+     *                        Jet member. It must be stateless\n      * @param destroyServiceFn the function that destroys the service. It will be called once on each\n      *                         Jet member. It can be used to tear down any resources acquired by the\n-     *                         service.\n+     *                         service. It must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java\nindex 46b763a8e7..829ce3dae5 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java\n\n@@ -138,10 +138,10 @@ public final class ServiceFactories {\n      * for blocking code.\n      *\n      * @param createServiceFn the function that creates the service. It will be called once on each\n-     *                        Jet member. It must be stateless\n+     *                        Jet member. It must be stateless.\n      * @param destroyServiceFn the function that destroys the service. It will be called once on each\n      *                         Jet member. It can be used to tear down any resources acquired by the\n-     *                         service. It must be stateless\n+     *                         service. It must be stateless.\n      * @param <S> type of the service object\n      *\n      * @see #nonSharedService(FunctionEx, ConsumerEx)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MjMzNg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472336", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                        processor instance. It must be stateless\n          \n          \n            \n                 *                        processor instance. It must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:25:16Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java", "diffHunk": "@@ -199,10 +199,10 @@ private ServiceFactories() { }\n      * for blocking code.\n      *\n      * @param createServiceFn the function that creates the service. It will be called once per\n-     *                        processor instance.\n+     *                        processor instance. It must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java\nindex 46b763a8e7..829ce3dae5 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java\n\n@@ -199,10 +199,10 @@ public final class ServiceFactories {\n      * for blocking code.\n      *\n      * @param createServiceFn the function that creates the service. It will be called once per\n-     *                        processor instance. It must be stateless\n+     *                        processor instance. It must be stateless.\n      * @param destroyServiceFn the function that destroys the service. It will be called once per\n      *                         processor instance. It can be used to tear down any resources\n-     *                         acquired by the service. It must be stateless\n+     *                         acquired by the service. It must be stateless.\n      *\n      * @param <S> type of the service object\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MjQzNQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472435", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                         acquired by the service. It must be stateless\n          \n          \n            \n                 *                         acquired by the service. It must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:25:22Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java", "diffHunk": "@@ -199,10 +199,10 @@ private ServiceFactories() { }\n      * for blocking code.\n      *\n      * @param createServiceFn the function that creates the service. It will be called once per\n-     *                        processor instance.\n+     *                        processor instance. It must be stateless\n      * @param destroyServiceFn the function that destroys the service. It will be called once per\n      *                         processor instance. It can be used to tear down any resources\n-     *                         acquired by the service.\n+     *                         acquired by the service. It must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java\nindex 46b763a8e7..829ce3dae5 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java\n\n@@ -199,10 +199,10 @@ public final class ServiceFactories {\n      * for blocking code.\n      *\n      * @param createServiceFn the function that creates the service. It will be called once per\n-     *                        processor instance. It must be stateless\n+     *                        processor instance. It must be stateless.\n      * @param destroyServiceFn the function that destroys the service. It will be called once per\n      *                         processor instance. It can be used to tear down any resources\n-     *                         acquired by the service. It must be stateless\n+     *                         acquired by the service. It must be stateless.\n      *\n      * @param <S> type of the service object\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MjU4NA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472584", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                        stateless\n          \n          \n            \n                 *                        stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:25:35Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java", "diffHunk": "@@ -137,7 +137,8 @@ private ServiceFactory(@Nonnull FunctionEx<? super ProcessorSupplier.Context, ?\n      * for blocking code.\n      *\n      * @param createContextFn the function to create new context object, given a {@link\n-     *                        ProcessorSupplier.Context}. Called once per Jet member.\n+     *                        ProcessorSupplier.Context}. Called once per Jet member. It must be\n+     *                        stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java\nindex e69e637fe1..292bbfbd52 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java\n\n@@ -138,7 +138,7 @@ public final class ServiceFactory<C, S> implements Serializable, Cloneable {\n      *\n      * @param createContextFn the function to create new context object, given a {@link\n      *                        ProcessorSupplier.Context}. Called once per Jet member. It must be\n-     *                        stateless\n+     *                        stateless.\n      * @param <C> type of the service context instance\n      *\n      * @return a new factory instance, not yet ready to use (needs the {@code\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MjY3Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472677", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     context. It must be stateless\n          \n          \n            \n                 *     context. It must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:25:44Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java", "diffHunk": "@@ -158,7 +159,8 @@ private ServiceFactory(@Nonnull FunctionEx<? super ProcessorSupplier.Context, ?\n      * Jet calls this function at the end of the job for each shared context\n      * object it created (one on each cluster member).\n      *\n-     * @param destroyContextFn the function to destroy the shared service context\n+     * @param destroyContextFn the function to destroy the shared service\n+     *     context. It must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java\nindex e69e637fe1..292bbfbd52 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java\n\n@@ -160,7 +160,7 @@ public final class ServiceFactory<C, S> implements Serializable, Cloneable {\n      * object it created (one on each cluster member).\n      *\n      * @param destroyContextFn the function to destroy the shared service\n-     *     context. It must be stateless\n+     *     context. It must be stateless.\n      * @return a copy of this factory with the supplied destroy-function\n      */\n     @Nonnull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Mjc0Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472747", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     It must be stateless\n          \n          \n            \n                 *     It must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:25:50Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java", "diffHunk": "@@ -186,7 +188,8 @@ private ServiceFactory(@Nonnull FunctionEx<? super ProcessorSupplier.Context, ?\n      * this method resets any pre-existing {@code destroyService} function to a\n      * no-op.\n      *\n-     * @param createServiceFn the function that creates the service instance\n+     * @param createServiceFn the function that creates the service instance.\n+     *     It must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java\nindex e69e637fe1..292bbfbd52 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java\n\n@@ -189,7 +189,7 @@ public final class ServiceFactory<C, S> implements Serializable, Cloneable {\n      * no-op.\n      *\n      * @param createServiceFn the function that creates the service instance.\n-     *     It must be stateless\n+     *     It must be stateless.\n      * @return a copy of this factory with the supplied create-service-function\n      */\n     @Nonnull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MjgwNQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472805", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                         stateless\n          \n          \n            \n                 *                         stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:25:57Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java", "diffHunk": "@@ -208,7 +211,8 @@ private ServiceFactory(@Nonnull FunctionEx<? super ProcessorSupplier.Context, ?\n      * created services objects.\n      *\n      * @param destroyServiceFn the function to destroy the service instance.\n-     *                         This function is called once per processor instance\n+     *                         This function is called once per processor instance. It must be\n+     *                         stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java\nindex e69e637fe1..292bbfbd52 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java\n\n@@ -212,7 +212,7 @@ public final class ServiceFactory<C, S> implements Serializable, Cloneable {\n      *\n      * @param destroyServiceFn the function to destroy the service instance.\n      *                         This function is called once per processor instance. It must be\n-     *                         stateless\n+     *                         stateless.\n      * @return a copy of this factory with the supplied destroy-function\n      */\n     @Nonnull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MjkwMQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472901", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     processor context. It must be stateless\n          \n          \n            \n                 *     processor context. It must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:26:09Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java", "diffHunk": "@@ -82,14 +82,20 @@ private SinkBuilder(\n      * </li><li>\n      *     {@code destroyFn} destroys the context. This component is optional.\n      * </li></ol>\n+     *\n      * The returned sink will be non-cooperative and will have preferred local\n      * parallelism of 1. It doesn't participate in the fault-tolerance protocol,\n      * which means you can't remember across a job restart which items you\n      * already received. The sink will still receive each item at least once,\n      * thus complying with the <em>at-least-once</em> processing guarantee. If\n      * the sink is idempotent (suppresses duplicate items), it will also be\n      * compatible with the <em>exactly-once</em> guarantee.\n+     * <p>\n+     * All the functions must be stateless.\n      *\n+     * @param name the name of the processor\n+     * @param createFn the function to create the sink context, given a\n+     *     processor context. It must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java\nindex edacc4ce10..3129dddd8c 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java\n\n@@ -95,7 +95,7 @@ public final class SinkBuilder<C, T> {\n      *\n      * @param name the name of the processor\n      * @param createFn the function to create the sink context, given a\n-     *     processor context. It must be stateless\n+     *     processor context. It must be stateless.\n      * @param <C> type of the context object\n      *\n      * @since 3.0\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Mjk5Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472993", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     stateless\n          \n          \n            \n                 *     stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:26:18Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java", "diffHunk": "@@ -131,7 +138,8 @@ private SinkBuilder(\n      * You are not required to provide this function in case your implementation\n      * doesn't need it.\n      *\n-     * @param flushFn the optional \"flush the context\" function\n+     * @param flushFn the optional \"flush the context\" function. It must be\n+     *     stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java\nindex edacc4ce10..3129dddd8c 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java\n\n@@ -139,7 +139,7 @@ public final class SinkBuilder<C, T> {\n      * doesn't need it.\n      *\n      * @param flushFn the optional \"flush the context\" function. It must be\n-     *     stateless\n+     *     stateless.\n      */\n     @Nonnull\n     public SinkBuilder<C, T> flushFn(@Nonnull ConsumerEx<? super C> flushFn) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzAzNQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473035", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:26:24Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java", "diffHunk": "@@ -149,7 +157,8 @@ private SinkBuilder(\n      * You are not required to provide this function in case your implementation\n      * doesn't need it.\n      *\n-     * @param destroyFn the optional \"destroy the context object\" function\n+     * @param destroyFn the optional \"destroy the context object\" function. It\n+     *     must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java\nindex edacc4ce10..3129dddd8c 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java\n\n@@ -158,7 +158,7 @@ public final class SinkBuilder<C, T> {\n      * doesn't need it.\n      *\n      * @param destroyFn the optional \"destroy the context object\" function. It\n-     *     must be stateless\n+     *     must be stateless.\n      */\n     @Nonnull\n     public SinkBuilder<C, T> destroyFn(@Nonnull ConsumerEx<? super C> destroyFn) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzE3OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473179", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     cooperative}\n          \n          \n            \n                 *     cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:26:38Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -107,7 +108,9 @@ private Sinks() {\n      *\n      * @param sinkName user-friendly sink name\n      * @param metaSupplier the processor meta-supplier\n-     * @param partitionKeyFn key extractor function for partitioning edges to sink\n+     * @param partitionKeyFn key extractor function for partitioning edges to\n+     *     sink. It must be stateless and {@linkplain Processor#isCooperative()\n+     *     cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\nindex 38e6e074d5..de4d0c810c 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\n\n@@ -110,7 +110,7 @@ public final class Sinks {\n      * @param metaSupplier the processor meta-supplier\n      * @param partitionKeyFn key extractor function for partitioning edges to\n      *     sink. It must be stateless and {@linkplain Processor#isCooperative()\n-     *     cooperative}\n+     *     cooperative}.\n      */\n     @Nonnull\n     public static <T> Sink<T> fromProcessor(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzY1Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473657", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:27:24Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -872,6 +902,12 @@ private Sinks() {\n      * guarantee.\n      * <p>\n      * The default local parallelism for this sink is 1.\n+     *\n+     * @param host the host to connect to\n+     * @param port the target port\n+     * @param toStringFn a function to convert received items to string. It\n+     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\nindex 38e6e074d5..de4d0c810c 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\n\n@@ -906,7 +906,7 @@ public final class Sinks {\n      * @param host the host to connect to\n      * @param port the target port\n      * @param toStringFn a function to convert received items to string. It\n-     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}.\n      * @param charset charset used to convert the string to bytes\n      */\n     @Nonnull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzcyOA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473728", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:27:32Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -1022,7 +1058,9 @@ private Sinks() {\n      * <p>\n      * The default local parallelism for this sink is 1.\n      *\n-     * @param toStringFn a function that returns a string representation of a stream item\n+     * @param toStringFn a function that returns a string representation of a\n+     *     stream item. It must be stateless and {@linkplain\n+     *     Processor#isCooperative() cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\nindex 38e6e074d5..de4d0c810c 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\n\n@@ -1060,7 +1060,7 @@ public final class Sinks {\n      *\n      * @param toStringFn a function that returns a string representation of a\n      *     stream item. It must be stateless and {@linkplain\n-     *     Processor#isCooperative() cooperative}\n+     *     Processor#isCooperative() cooperative}.\n      * @param <T> stream item type\n      */\n     @Nonnull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzgwMQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473801", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:27:41Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -1054,7 +1092,8 @@ private Sinks() {\n      * item.toString()} into a {@link javax.jms.TextMessage}.\n      *\n      * @param queueName the name of the queue\n-     * @param factorySupplier supplier to obtain JMS connection factory\n+     * @param factorySupplier supplier to obtain JMS connection factory. It\n+     *     must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\nindex 38e6e074d5..de4d0c810c 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\n\n@@ -1093,7 +1093,7 @@ public final class Sinks {\n      *\n      * @param queueName the name of the queue\n      * @param factorySupplier supplier to obtain JMS connection factory. It\n-     *     must be stateless\n+     *     must be stateless.\n      */\n     @Nonnull\n     public static <T> Sink<T> jmsQueue(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Mzg4NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473885", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *      javax.jms.XAConnectionFactory}. It must be stateless\n          \n          \n            \n                 *      javax.jms.XAConnectionFactory}. It must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:27:52Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -1110,7 +1149,7 @@ private Sinks() {\n      *\n      * @param factorySupplier supplier to obtain JMS connection factory. For\n      *      exactly-once the factory must implement {@link\n-     *      javax.jms.XAConnectionFactory}\n+     *      javax.jms.XAConnectionFactory}. It must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\nindex 38e6e074d5..de4d0c810c 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\n\n@@ -1149,7 +1149,7 @@ public final class Sinks {\n      *\n      * @param factorySupplier supplier to obtain JMS connection factory. For\n      *      exactly-once the factory must implement {@link\n-     *      javax.jms.XAConnectionFactory}. It must be stateless\n+     *      javax.jms.XAConnectionFactory}. It must be stateless.\n      * @param <T> type of the items the sink accepts\n      */\n     @Nonnull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzkzMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473930", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *      javax.jms.XAConnectionFactory}. It must be stateless\n          \n          \n            \n                 *      javax.jms.XAConnectionFactory}. It must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:27:57Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -1131,7 +1170,7 @@ private Sinks() {\n      * @param topicName the name of the queue\n      * @param factorySupplier supplier to obtain JMS connection factory. For\n      *      exactly-once the factory must implement {@link\n-     *      javax.jms.XAConnectionFactory}\n+     *      javax.jms.XAConnectionFactory}. It must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\nindex 38e6e074d5..de4d0c810c 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\n\n@@ -1170,7 +1170,7 @@ public final class Sinks {\n      * @param topicName the name of the queue\n      * @param factorySupplier supplier to obtain JMS connection factory. For\n      *      exactly-once the factory must implement {@link\n-     *      javax.jms.XAConnectionFactory}. It must be stateless\n+     *      javax.jms.XAConnectionFactory}. It must be stateless.\n      */\n     @Nonnull\n     public static <T> Sink<T> jmsTopic(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Mzk5OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473999", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:28:03Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -1182,6 +1221,8 @@ private Sinks() {\n      * <p>\n      * The default local parallelism for this processor is 1.\n      *\n+     * @param factorySupplier supplier to obtain JMS connection factory. It\n+     *     must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\nindex 38e6e074d5..de4d0c810c 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java\n\n@@ -1222,7 +1222,7 @@ public final class Sinks {\n      * The default local parallelism for this processor is 1.\n      *\n      * @param factorySupplier supplier to obtain JMS connection factory. It\n-     *     must be stateless\n+     *     must be stateless.\n      * @param <T> type of the items the sink accepts\n      */\n     @Nonnull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDA3NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529474075", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                 must be stateless\n          \n          \n            \n                 *                 must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:28:12Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -187,7 +187,8 @@ private SourceBuilder(\n      * }</pre>\n      *\n      * @param name     a descriptive name for the source (for diagnostic purposes)\n-     * @param createFn a function that creates the source's context object\n+     * @param createFn a function that creates the source's context object. It\n+     *                 must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\nindex a48fe79ed6..42795c97fc 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\n\n@@ -188,7 +188,7 @@ public final class SourceBuilder<C> {\n      *\n      * @param name     a descriptive name for the source (for diagnostic purposes)\n      * @param createFn a function that creates the source's context object. It\n-     *                 must be stateless\n+     *                 must be stateless.\n      * @param <C>      type of the context object\n      *\n      * @since 3.0\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDEyNg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529474126", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                 must be stateless\n          \n          \n            \n                 *                 must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:28:17Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -247,7 +248,8 @@ private SourceBuilder(\n      * }</pre>\n      *\n      * @param name     a descriptive name for the source (for diagnostic purposes)\n-     * @param createFn a function that creates the source's context object\n+     * @param createFn a function that creates the source's context object. It\n+     *                 must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\nindex a48fe79ed6..42795c97fc 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\n\n@@ -249,7 +249,7 @@ public final class SourceBuilder<C> {\n      *\n      * @param name     a descriptive name for the source (for diagnostic purposes)\n      * @param createFn a function that creates the source's context object. It\n-     *                 must be stateless\n+     *                 must be stateless.\n      * @param <C>      type of the context object\n      *\n      * @since 3.0\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDE4Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529474183", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:28:24Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -330,7 +332,8 @@ private SourceBuilder(\n      * if you need to coalesce watermarks from multiple partitions.\n      *\n      * @param name a descriptive name for the source (for diagnostic purposes)\n-     * @param createFn a function that creates the source's context object\n+     * @param createFn a function that creates the source's context object. It\n+     *     must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\nindex a48fe79ed6..42795c97fc 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\n\n@@ -333,7 +333,7 @@ public final class SourceBuilder<C> {\n      *\n      * @param name a descriptive name for the source (for diagnostic purposes)\n      * @param createFn a function that creates the source's context object. It\n-     *     must be stateless\n+     *     must be stateless.\n      * @param <C> type of the context object\n      *\n      * @since 3.0\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDI1Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529474257", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     state snapshot. It must be stateless\n          \n          \n            \n                     *     state snapshot. It must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:28:31Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -416,6 +421,8 @@ private Base() {\n          *         .build();\n          * }</pre>\n          *\n+         * @param createSnapshotFn a function to create an object to store in the\n+         *     state snapshot. It must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\nindex a48fe79ed6..42795c97fc 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\n\n@@ -422,7 +422,7 @@ public final class SourceBuilder<C> {\n          * }</pre>\n          *\n          * @param createSnapshotFn a function to create an object to store in the\n-         *     state snapshot. It must be stateless\n+         *     state snapshot. It must be stateless.\n          * @param <S> type of the snapshot object\n          *\n          * @since 3.1\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NTAwNQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529475005", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     must be stateless\n          \n          \n            \n                     *     must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:29:48Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -446,7 +453,8 @@ private BaseNoTimestamps() {\n          * it to other threads. For example, you shouldn't add to it in a\n          * callback of an asynchronous operation.\n          *\n-         * @param fillBufferFn function that fills the buffer with source data\n+         * @param fillBufferFn function that fills the buffer with source data. It\n+         *     must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\nindex a48fe79ed6..42795c97fc 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\n\n@@ -454,7 +454,7 @@ public final class SourceBuilder<C> {\n          * callback of an asynchronous operation.\n          *\n          * @param fillBufferFn function that fills the buffer with source data. It\n-         *     must be stateless\n+         *     must be stateless.\n          * @param <T_NEW> type of the emitted items\n          * @return this builder with the item type reset to the one inferred from\n          *         {@code fillBufferFn}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NjgwNQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529476805", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     must be stateless\n          \n          \n            \n                     *     must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:32:58Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -605,7 +613,8 @@ private TimestampedStream() {\n          * shouldn't pass it to other threads. For example, you shouldn't add\n          * to it in a callback of an asynchronous operation.\n          *\n-         * @param fillBufferFn function that fills the buffer with source data\n+         * @param fillBufferFn function that fills the buffer with source data. It\n+         *     must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\nindex a48fe79ed6..42795c97fc 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\n\n@@ -614,7 +614,7 @@ public final class SourceBuilder<C> {\n          * to it in a callback of an asynchronous operation.\n          *\n          * @param fillBufferFn function that fills the buffer with source data. It\n-         *     must be stateless\n+         *     must be stateless.\n          * @param <T_NEW> type of the emitted items\n          * @return this builder with the item type reset to the one inferred from\n          *         {@code fillBufferFn}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Njg2Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529476863", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     context. It must be stateless\n          \n          \n            \n                     *     context. It must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:33:05Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -699,6 +708,9 @@ private FaultTolerant(B parentBuilder, FunctionEx<? super C, ? extends S> create\n          * figure out which part of the snapshot data pertains to it and it can\n          * do so as explained {@link Base#distributed here}.\n          *\n+         * @param restoreSnapshotFn the function to restore the state into the\n+         *     context. It must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\nindex a48fe79ed6..42795c97fc 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java\n\n@@ -709,7 +709,7 @@ public final class SourceBuilder<C> {\n          * do so as explained {@link Base#distributed here}.\n          *\n          * @param restoreSnapshotFn the function to restore the state into the\n-         *     context. It must be stateless\n+         *     context. It must be stateless.\n          *\n          * @since 3.1\n          */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzAxNQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477015", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                  Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                  Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:33:20Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -240,12 +241,13 @@ private Sources() {\n      *\n      * @param mapName the name of the map\n      * @param predicate the predicate to filter the events. If you want to specify just the\n-     *                  projection, use {@link\n-     *                  Predicates#alwaysTrue()} as a pass-through\n-     *                  predicate\n+     *                  projection, use {@link Predicates#alwaysTrue()} as a pass-through\n+     *                  predicate. It must be stateless and {@linkplain\n+     *                  Processor#isCooperative() cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\nindex ac144004a8..15dc5d6327 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n\n@@ -243,11 +243,11 @@ public final class Sources {\n      * @param predicate the predicate to filter the events. If you want to specify just the\n      *                  projection, use {@link Predicates#alwaysTrue()} as a pass-through\n      *                  predicate. It must be stateless and {@linkplain\n-     *                  Processor#isCooperative() cooperative}\n+     *                  Processor#isCooperative() cooperative}.\n      * @param projection the projection to map the events. If the projection returns a {@code\n      *                   null} for an item, that item will be filtered out. If you want to\n      *                   specify just the predicate, use {@link Projections#identity()}. It must\n-     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}.\n      * @param <T> type of emitted item\n      */\n     @Nonnull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzA2MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477060", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                   be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                   be stateless and {@linkplain Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:33:25Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -240,12 +241,13 @@ private Sources() {\n      *\n      * @param mapName the name of the map\n      * @param predicate the predicate to filter the events. If you want to specify just the\n-     *                  projection, use {@link\n-     *                  Predicates#alwaysTrue()} as a pass-through\n-     *                  predicate\n+     *                  projection, use {@link Predicates#alwaysTrue()} as a pass-through\n+     *                  predicate. It must be stateless and {@linkplain\n+     *                  Processor#isCooperative() cooperative}\n      * @param projection the projection to map the events. If the projection returns a {@code\n      *                   null} for an item, that item will be filtered out. If you want to\n-     *                   specify just the predicate, use {@link Projections#identity()}.\n+     *                   specify just the predicate, use {@link Projections#identity()}. It must\n+     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\nindex ac144004a8..15dc5d6327 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n\n@@ -243,11 +243,11 @@ public final class Sources {\n      * @param predicate the predicate to filter the events. If you want to specify just the\n      *                  projection, use {@link Predicates#alwaysTrue()} as a pass-through\n      *                  predicate. It must be stateless and {@linkplain\n-     *                  Processor#isCooperative() cooperative}\n+     *                  Processor#isCooperative() cooperative}.\n      * @param projection the projection to map the events. If the projection returns a {@code\n      *                   null} for an item, that item will be filtered out. If you want to\n      *                   specify just the predicate, use {@link Projections#identity()}. It must\n-     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}.\n      * @param <T> type of emitted item\n      */\n     @Nonnull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzEyMw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477123", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                   Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                   Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:33:32Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -306,12 +308,13 @@ private Sources() {\n      *\n      * @param map        the Hazelcast map to read data from\n      * @param predicate  the predicate to filter the events. If you want to specify just the\n-     *                   projection, use {@link\n-     *                   Predicates#alwaysTrue()} as a pass-through\n-     *                   predicate\n+     *                   projection, use {@link Predicates#alwaysTrue()} as a pass-through\n+     *                   predicate. It must be stateless and {@linkplain\n+     *                   Processor#isCooperative() cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\nindex ac144004a8..15dc5d6327 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n\n@@ -310,11 +310,11 @@ public final class Sources {\n      * @param predicate  the predicate to filter the events. If you want to specify just the\n      *                   projection, use {@link Predicates#alwaysTrue()} as a pass-through\n      *                   predicate. It must be stateless and {@linkplain\n-     *                   Processor#isCooperative() cooperative}\n+     *                   Processor#isCooperative() cooperative}.\n      * @param projection the projection to map the events. If the projection returns a {@code\n      *                   null} for an item, that item will be filtered out. If you want to\n      *                   specify just the predicate, use {@link Projections#identity()}. It must\n-     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}.\n      * @param <T>        type of emitted item\n      */\n     @Nonnull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzE3NA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477174", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                   be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                   be stateless and {@linkplain Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:33:37Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -306,12 +308,13 @@ private Sources() {\n      *\n      * @param map        the Hazelcast map to read data from\n      * @param predicate  the predicate to filter the events. If you want to specify just the\n-     *                   projection, use {@link\n-     *                   Predicates#alwaysTrue()} as a pass-through\n-     *                   predicate\n+     *                   projection, use {@link Predicates#alwaysTrue()} as a pass-through\n+     *                   predicate. It must be stateless and {@linkplain\n+     *                   Processor#isCooperative() cooperative}\n      * @param projection the projection to map the events. If the projection returns a {@code\n      *                   null} for an item, that item will be filtered out. If you want to\n-     *                   specify just the predicate, use {@link Projections#identity()}.\n+     *                   specify just the predicate, use {@link Projections#identity()}. It must\n+     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\nindex ac144004a8..15dc5d6327 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n\n@@ -310,11 +310,11 @@ public final class Sources {\n      * @param predicate  the predicate to filter the events. If you want to specify just the\n      *                   projection, use {@link Predicates#alwaysTrue()} as a pass-through\n      *                   predicate. It must be stateless and {@linkplain\n-     *                   Processor#isCooperative() cooperative}\n+     *                   Processor#isCooperative() cooperative}.\n      * @param projection the projection to map the events. If the projection returns a {@code\n      *                   null} for an item, that item will be filtered out. If you want to\n      *                   specify just the predicate, use {@link Projections#identity()}. It must\n-     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}.\n      * @param <T>        type of emitted item\n      */\n     @Nonnull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzI5Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477292", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *                     Processor#isCooperative() cooperative}\n          \n          \n            \n            *                     Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:33:51Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -366,11 +369,13 @@ private Sources() {\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n *                     null} for an item, that item will be filtered out. You may use {@link\n *                     Util#mapEventToEntry()} to extract just the key and\n-*                     the new value.\n+*                     the new value. It must be stateless and {@linkplain\n+*                     Processor#isCooperative() cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\nindex ac144004a8..15dc5d6327 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n\n@@ -370,12 +370,12 @@ public final class Sources {\n *                     null} for an item, that item will be filtered out. You may use {@link\n *                     Util#mapEventToEntry()} to extract just the key and\n *                     the new value. It must be stateless and {@linkplain\n-*                     Processor#isCooperative() cooperative}\n+*                     Processor#isCooperative() cooperative}.\n      * @param predicateFn  the predicate to filter the events. If you want to specify just the\n *                     projection, use {@link Util#mapPutEvents} to pass\n *                     only {@link EntryEventType#ADDED ADDED} and\n *                     {@link EntryEventType#UPDATED UPDATED} events. It must be stateless and\n-*                     {@linkplain Processor#isCooperative() cooperative}\n+*                     {@linkplain Processor#isCooperative() cooperative}.\n      */\n     @Nonnull\n     public static <T, K, V> StreamSource<T> mapJournal(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzM1Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477352", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *                     {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n            *                     {@linkplain Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:33:57Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -366,11 +369,13 @@ private Sources() {\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n *                     null} for an item, that item will be filtered out. You may use {@link\n *                     Util#mapEventToEntry()} to extract just the key and\n-*                     the new value.\n+*                     the new value. It must be stateless and {@linkplain\n+*                     Processor#isCooperative() cooperative}\n      * @param predicateFn  the predicate to filter the events. If you want to specify just the\n *                     projection, use {@link Util#mapPutEvents} to pass\n *                     only {@link EntryEventType#ADDED ADDED} and\n-*                     {@link EntryEventType#UPDATED UPDATED} events.\n+*                     {@link EntryEventType#UPDATED UPDATED} events. It must be stateless and\n+*                     {@linkplain Processor#isCooperative() cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\nindex ac144004a8..15dc5d6327 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n\n@@ -370,12 +370,12 @@ public final class Sources {\n *                     null} for an item, that item will be filtered out. You may use {@link\n *                     Util#mapEventToEntry()} to extract just the key and\n *                     the new value. It must be stateless and {@linkplain\n-*                     Processor#isCooperative() cooperative}\n+*                     Processor#isCooperative() cooperative}.\n      * @param predicateFn  the predicate to filter the events. If you want to specify just the\n *                     projection, use {@link Util#mapPutEvents} to pass\n *                     only {@link EntryEventType#ADDED ADDED} and\n *                     {@link EntryEventType#UPDATED UPDATED} events. It must be stateless and\n-*                     {@linkplain Processor#isCooperative() cooperative}\n+*                     {@linkplain Processor#isCooperative() cooperative}.\n      */\n     @Nonnull\n     public static <T, K, V> StreamSource<T> mapJournal(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzY1Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477652", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:34:27Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -446,13 +451,14 @@ private Sources() {\n      * @param map          the map to read data from\n      * @param initialPos   describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#mapEventToEntry()} to extract just the key and\n-*                     the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#mapEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\nindex ac144004a8..15dc5d6327 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n\n@@ -453,12 +453,12 @@ public final class Sources {\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n      *                     null} for an item, that item will be filtered out. You may use {@link\n      *                     Util#mapEventToEntry()} to extract just the key and the new value. It\n-     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}.\n      * @param predicateFn  the predicate to filter the events. If you want to specify just the\n      *                     projection, use {@link Util#mapPutEvents} to pass only {@link\n      *                     EntryEventType#ADDED ADDED} and {@link EntryEventType#UPDATED UPDATED}\n      *                     events. It must be stateless and {@linkplain Processor#isCooperative()\n-     *                     cooperative}\n+     *                     cooperative}.\n      */\n     @Nonnull\n     public static <T, K, V> StreamSource<T> mapJournal(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzcyNA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477724", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                     cooperative}\n          \n          \n            \n                 *                     cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:34:35Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -446,13 +451,14 @@ private Sources() {\n      * @param map          the map to read data from\n      * @param initialPos   describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#mapEventToEntry()} to extract just the key and\n-*                     the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#mapEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n      * @param predicateFn  the predicate to filter the events. If you want to specify just the\n-*                     projection, use {@link Util#mapPutEvents} to pass\n-*                     only {@link EntryEventType#ADDED ADDED} and\n-*                     {@link EntryEventType#UPDATED UPDATED} events.\n+     *                     projection, use {@link Util#mapPutEvents} to pass only {@link\n+     *                     EntryEventType#ADDED ADDED} and {@link EntryEventType#UPDATED UPDATED}\n+     *                     events. It must be stateless and {@linkplain Processor#isCooperative()\n+     *                     cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\nindex ac144004a8..15dc5d6327 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n\n@@ -453,12 +453,12 @@ public final class Sources {\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n      *                     null} for an item, that item will be filtered out. You may use {@link\n      *                     Util#mapEventToEntry()} to extract just the key and the new value. It\n-     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}.\n      * @param predicateFn  the predicate to filter the events. If you want to specify just the\n      *                     projection, use {@link Util#mapPutEvents} to pass only {@link\n      *                     EntryEventType#ADDED ADDED} and {@link EntryEventType#UPDATED UPDATED}\n      *                     events. It must be stateless and {@linkplain Processor#isCooperative()\n-     *                     cooperative}\n+     *                     cooperative}.\n      */\n     @Nonnull\n     public static <T, K, V> StreamSource<T> mapJournal(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Nzg0MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477840", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                  Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                  Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:34:46Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -569,11 +575,13 @@ private Sources() {\n      *\n      * @param mapName the name of the map\n      * @param predicate the predicate to filter the events. If you want to specify just the\n-     *                  projection, use {@link Predicates#alwaysTrue()}\n-     *                  as a pass-through predicate\n+     *                  projection, use {@link Predicates#alwaysTrue()} as a pass-through\n+     *                  predicate. It must be stateless and {@linkplain\n+     *                  Processor#isCooperative() cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\nindex ac144004a8..15dc5d6327 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n\n@@ -577,11 +577,11 @@ public final class Sources {\n      * @param predicate the predicate to filter the events. If you want to specify just the\n      *                  projection, use {@link Predicates#alwaysTrue()} as a pass-through\n      *                  predicate. It must be stateless and {@linkplain\n-     *                  Processor#isCooperative() cooperative}\n+     *                  Processor#isCooperative() cooperative}.\n      * @param projection the projection to map the events. If the projection returns a {@code\n      *                   null} for an item, that item will be filtered out. If you want to\n      *                   specify just the predicate, use {@link Projections#identity()}. It must\n-     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}.\n      * @param <T> type of emitted item\n      */\n     @Nonnull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Nzg5Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477896", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                   be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                   be stateless and {@linkplain Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:34:51Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -569,11 +575,13 @@ private Sources() {\n      *\n      * @param mapName the name of the map\n      * @param predicate the predicate to filter the events. If you want to specify just the\n-     *                  projection, use {@link Predicates#alwaysTrue()}\n-     *                  as a pass-through predicate\n+     *                  projection, use {@link Predicates#alwaysTrue()} as a pass-through\n+     *                  predicate. It must be stateless and {@linkplain\n+     *                  Processor#isCooperative() cooperative}\n      * @param projection the projection to map the events. If the projection returns a {@code\n      *                   null} for an item, that item will be filtered out. If you want to\n-     *                   specify just the predicate, use {@link Projections#identity()}.\n+     *                   specify just the predicate, use {@link Projections#identity()}. It must\n+     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\nindex ac144004a8..15dc5d6327 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n\n@@ -577,11 +577,11 @@ public final class Sources {\n      * @param predicate the predicate to filter the events. If you want to specify just the\n      *                  projection, use {@link Predicates#alwaysTrue()} as a pass-through\n      *                  predicate. It must be stateless and {@linkplain\n-     *                  Processor#isCooperative() cooperative}\n+     *                  Processor#isCooperative() cooperative}.\n      * @param projection the projection to map the events. If the projection returns a {@code\n      *                   null} for an item, that item will be filtered out. If you want to\n      *                   specify just the predicate, use {@link Projections#identity()}. It must\n-     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}.\n      * @param <T> type of emitted item\n      */\n     @Nonnull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Nzk3MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477970", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:34:58Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -627,13 +635,13 @@ private Sources() {\n      * @param clientConfig configuration for the client to connect to the remote cluster\n      * @param initialPos describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#mapEventToEntry()} to extract just the key and\n-*                     the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#mapEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\nindex ac144004a8..15dc5d6327 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n\n@@ -637,11 +637,11 @@ public final class Sources {\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n      *                     null} for an item, that item will be filtered out. You may use {@link\n      *                     Util#mapEventToEntry()} to extract just the key and the new value. It\n-     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}.\n      * @param predicateFn the predicate to filter the events. You may use {@link\n      *                    Util#mapPutEvents} to pass only {@link EntryEventType#ADDED ADDED} and\n      *                    {@link EntryEventType#UPDATED UPDATED} events. It must be stateless and\n-     *                    {@linkplain Processor#isCooperative() cooperative}\n+     *                    {@linkplain Processor#isCooperative() cooperative}.\n      */\n     @Nonnull\n     public static <T, K, V> StreamSource<T> remoteMapJournal(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODA0Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478043", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                    {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                    {@linkplain Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:35:04Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -627,13 +635,13 @@ private Sources() {\n      * @param clientConfig configuration for the client to connect to the remote cluster\n      * @param initialPos describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#mapEventToEntry()} to extract just the key and\n-*                     the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#mapEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n      * @param predicateFn the predicate to filter the events. You may use {@link\n-*                    Util#mapPutEvents} to pass only {@link\n-*                    EntryEventType#ADDED ADDED} and {@link EntryEventType#UPDATED UPDATED}\n-*                    events.\n+     *                    Util#mapPutEvents} to pass only {@link EntryEventType#ADDED ADDED} and\n+     *                    {@link EntryEventType#UPDATED UPDATED} events. It must be stateless and\n+     *                    {@linkplain Processor#isCooperative() cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\nindex ac144004a8..15dc5d6327 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n\n@@ -637,11 +637,11 @@ public final class Sources {\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n      *                     null} for an item, that item will be filtered out. You may use {@link\n      *                     Util#mapEventToEntry()} to extract just the key and the new value. It\n-     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}.\n      * @param predicateFn the predicate to filter the events. You may use {@link\n      *                    Util#mapPutEvents} to pass only {@link EntryEventType#ADDED ADDED} and\n      *                    {@link EntryEventType#UPDATED UPDATED} events. It must be stateless and\n-     *                    {@linkplain Processor#isCooperative() cooperative}\n+     *                    {@linkplain Processor#isCooperative() cooperative}.\n      */\n     @Nonnull\n     public static <T, K, V> StreamSource<T> remoteMapJournal(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODA5NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478095", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:35:09Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -725,13 +733,13 @@ private Sources() {\n      * @param cacheName the name of the cache\n      * @param initialPos describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#cacheEventToEntry()} to extract just the key\n-*                     and the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#cacheEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\nindex ac144004a8..15dc5d6327 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n\n@@ -735,11 +735,11 @@ public final class Sources {\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n      *                     null} for an item, that item will be filtered out. You may use {@link\n      *                     Util#cacheEventToEntry()} to extract just the key and the new value. It\n-     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}.\n      * @param predicateFn the predicate to filter the events. You may use {@link\n      *                    Util#cachePutEvents()} to pass only {@link CacheEventType#CREATED\n      *                    CREATED} and {@link CacheEventType#UPDATED UPDATED} events. It must be\n-     *                    stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *                    stateless and {@linkplain Processor#isCooperative() cooperative}.\n      */\n     @Nonnull\n     public static <T, K, V> StreamSource<T> cacheJournal(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODE3Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478177", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                    stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                    stateless and {@linkplain Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:35:17Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -725,13 +733,13 @@ private Sources() {\n      * @param cacheName the name of the cache\n      * @param initialPos describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#cacheEventToEntry()} to extract just the key\n-*                     and the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#cacheEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n      * @param predicateFn the predicate to filter the events. You may use {@link\n-*                    Util#cachePutEvents()} to pass only {@link\n-*                    CacheEventType#CREATED CREATED} and {@link\n-*                    CacheEventType#UPDATED UPDATED} events.\n+     *                    Util#cachePutEvents()} to pass only {@link CacheEventType#CREATED\n+     *                    CREATED} and {@link CacheEventType#UPDATED UPDATED} events. It must be\n+     *                    stateless and {@linkplain Processor#isCooperative() cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\nindex ac144004a8..15dc5d6327 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n\n@@ -735,11 +735,11 @@ public final class Sources {\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n      *                     null} for an item, that item will be filtered out. You may use {@link\n      *                     Util#cacheEventToEntry()} to extract just the key and the new value. It\n-     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}.\n      * @param predicateFn the predicate to filter the events. You may use {@link\n      *                    Util#cachePutEvents()} to pass only {@link CacheEventType#CREATED\n      *                    CREATED} and {@link CacheEventType#UPDATED UPDATED} events. It must be\n-     *                    stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *                    stateless and {@linkplain Processor#isCooperative() cooperative}.\n      */\n     @Nonnull\n     public static <T, K, V> StreamSource<T> cacheJournal(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODIyNg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478226", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:35:23Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -821,13 +829,13 @@ private Sources() {\n      * @param clientConfig configuration for the client to connect to the remote cluster\n      * @param initialPos describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#cacheEventToEntry()} to extract just the key\n-*                     and the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#cacheEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\nindex ac144004a8..15dc5d6327 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n\n@@ -831,11 +831,11 @@ public final class Sources {\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n      *                     null} for an item, that item will be filtered out. You may use {@link\n      *                     Util#cacheEventToEntry()} to extract just the key and the new value. It\n-     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}.\n      * @param predicateFn the predicate to filter the events. You may use {@link\n      *                    Util#cachePutEvents()} to pass only {@link CacheEventType#CREATED\n      *                    CREATED} and {@link CacheEventType#UPDATED UPDATED} events. It must be\n-     *                    stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *                    stateless and {@linkplain Processor#isCooperative() cooperative}.\n      */\n     @Nonnull\n     public static <T, K, V> StreamSource<T> remoteCacheJournal(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODI4Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478282", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                    stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                    stateless and {@linkplain Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:35:30Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -821,13 +829,13 @@ private Sources() {\n      * @param clientConfig configuration for the client to connect to the remote cluster\n      * @param initialPos describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#cacheEventToEntry()} to extract just the key\n-*                     and the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#cacheEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n      * @param predicateFn the predicate to filter the events. You may use {@link\n-*                    Util#cachePutEvents()} to pass only {@link\n-*                    CacheEventType#CREATED CREATED} and {@link\n-*                    CacheEventType#UPDATED UPDATED} events.\n+     *                    Util#cachePutEvents()} to pass only {@link CacheEventType#CREATED\n+     *                    CREATED} and {@link CacheEventType#UPDATED UPDATED} events. It must be\n+     *                    stateless and {@linkplain Processor#isCooperative() cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\nindex ac144004a8..15dc5d6327 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n\n@@ -831,11 +831,11 @@ public final class Sources {\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n      *                     null} for an item, that item will be filtered out. You may use {@link\n      *                     Util#cacheEventToEntry()} to extract just the key and the new value. It\n-     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}.\n      * @param predicateFn the predicate to filter the events. You may use {@link\n      *                    Util#cachePutEvents()} to pass only {@link CacheEventType#CREATED\n      *                    CREATED} and {@link CacheEventType#UPDATED UPDATED} events. It must be\n-     *                    stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *                    stateless and {@linkplain Processor#isCooperative() cooperative}.\n      */\n     @Nonnull\n     public static <T, K, V> StreamSource<T> remoteCacheJournal(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODMyOA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478328", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:35:36Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -1137,7 +1145,8 @@ public static FileSourceBuilder filesBuilder(@Nonnull String directory) {\n      * builder} and add a projection.\n      *\n      * @param name            the name of the queue\n-     * @param factorySupplier supplier to obtain JMS connection factory\n+     * @param factorySupplier supplier to obtain JMS connection factory. It\n+     *     must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\nindex ac144004a8..15dc5d6327 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n\n@@ -1146,7 +1146,7 @@ public final class Sources {\n      *\n      * @param name            the name of the queue\n      * @param factorySupplier supplier to obtain JMS connection factory. It\n-     *     must be stateless\n+     *     must be stateless.\n      *\n      * @since 4.1\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODQwNw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478407", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:35:43Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -1170,6 +1179,9 @@ public static FileSourceBuilder filesBuilder(@Nonnull String directory) {\n      * provider documentation for details.\n      * <p>\n      * The default local parallelism for this processor is 1.\n+     *\n+     * @param factorySupplier supplier to obtain JMS connection factory. It\n+     *     must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\nindex ac144004a8..15dc5d6327 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n\n@@ -1181,7 +1181,7 @@ public final class Sources {\n      * The default local parallelism for this processor is 1.\n      *\n      * @param factorySupplier supplier to obtain JMS connection factory. It\n-     *     must be stateless\n+     *     must be stateless.\n      */\n     @Nonnull\n     public static JmsSourceBuilder jmsQueueBuilder(SupplierEx<? extends ConnectionFactory> factorySupplier) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODQ3MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478470", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:35:50Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -1206,7 +1218,8 @@ public static JmsSourceBuilder jmsQueueBuilder(SupplierEx<? extends ConnectionFa\n      * builder} and add a projection.\n      *\n      * @param name            the name of the queue\n-     * @param factorySupplier supplier to obtain JMS connection factory\n+     * @param factorySupplier supplier to obtain JMS connection factory. It\n+     *     must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\nindex ac144004a8..15dc5d6327 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n\n@@ -1219,7 +1219,7 @@ public final class Sources {\n      *\n      * @param name            the name of the queue\n      * @param factorySupplier supplier to obtain JMS connection factory. It\n-     *     must be stateless\n+     *     must be stateless.\n      *\n      * @since 4.1\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODU1MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478551", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "author": "mtopolnik", "createdAt": "2020-11-24T11:35:57Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -1244,6 +1257,9 @@ public static JmsSourceBuilder jmsQueueBuilder(SupplierEx<? extends ConnectionFa\n      * provider documentation for details.\n      * <p>\n      * The default local parallelism for this processor is 1.\n+     *\n+     * @param factorySupplier supplier to obtain JMS connection factory. It\n+     *     must be stateless", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\nindex ac144004a8..15dc5d6327 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java\n\n@@ -1259,7 +1259,7 @@ public final class Sources {\n      * The default local parallelism for this processor is 1.\n      *\n      * @param factorySupplier supplier to obtain JMS connection factory. It\n-     *     must be stateless\n+     *     must be stateless.\n      */\n     @Nonnull\n     public static JmsSourceBuilder jmsTopicBuilder(SupplierEx<? extends ConnectionFactory> factorySupplier) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODY3MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478670", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     stateless and {@linkplain Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:36:10Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StageWithWindow.java", "diffHunk": "@@ -66,7 +67,8 @@\n      * job otherwise. Also make sure that it implements {@code equals()} and\n      * {@code hashCode()}.\n      *\n-     * @param keyFn function that extracts the grouping key\n+     * @param keyFn function that extracts the grouping key. It must be\n+     *     stateless and {@linkplain Processor#isCooperative() cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StageWithWindow.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StageWithWindow.java\nindex 0c881324db..728bf2180b 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StageWithWindow.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StageWithWindow.java\n\n@@ -68,7 +68,7 @@ public interface StageWithWindow<T> {\n      * {@code hashCode()}.\n      *\n      * @param keyFn function that extracts the grouping key. It must be\n-     *     stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *     stateless and {@linkplain Processor#isCooperative() cooperative}.\n      * @param <K> type of the key\n      */\n     @Nonnull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODc3Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478773", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     stateless and {@linkplain Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:36:19Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StreamHashJoinBuilder.java", "diffHunk": "@@ -47,6 +48,8 @@\n      * Builds a new pipeline stage that performs the hash-join operation. Attaches\n      * the stage to all the contributing stages.\n      *\n+     * @param mapToOutputFn the function to map the output item. It must be\n+     *     stateless and {@linkplain Processor#isCooperative() cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StreamHashJoinBuilder.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StreamHashJoinBuilder.java\nindex 0e9161804b..f61a2e072c 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StreamHashJoinBuilder.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StreamHashJoinBuilder.java\n\n@@ -49,7 +49,7 @@ public class StreamHashJoinBuilder<T0> extends GeneralHashJoinBuilder<T0> {\n      * the stage to all the contributing stages.\n      *\n      * @param mapToOutputFn the function to map the output item. It must be\n-     *     stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *     stateless and {@linkplain Processor#isCooperative() cooperative}.\n      * @return the new hash-join pipeline stage\n      */\n     public <R> StreamStage<R> build(BiFunctionEx<T0, ItemsByTag, R> mapToOutputFn) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODg5MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478891", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                    Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                    Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T11:36:29Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StreamSourceStage.java", "diffHunk": "@@ -113,7 +114,8 @@\n      * #withIngestionTimestamps()}.\n      *\n      * @param timestampFn a function that returns the timestamp for each item, typically in\n-     *                    milliseconds\n+     *                    milliseconds. It must be stateless and {@linkplain\n+     *                    Processor#isCooperative() cooperative}", "originalCommit": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2e87d795eb6c323884c8158c16f60295e62258", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StreamSourceStage.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StreamSourceStage.java\nindex e695e3c3d2..c8b59489ba 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StreamSourceStage.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StreamSourceStage.java\n\n@@ -115,7 +115,7 @@ public interface StreamSourceStage<T> {\n      *\n      * @param timestampFn a function that returns the timestamp for each item, typically in\n      *                    milliseconds. It must be stateless and {@linkplain\n-     *                    Processor#isCooperative() cooperative}\n+     *                    Processor#isCooperative() cooperative}.\n      * @param allowedLag the allowed lag of a given event's timestamp behind the top\n      *                   timestamp value observed so far. The time unit is\n      *                   the same as the unit used by {@code timestampFn}\n"}}, {"oid": "ff2e87d795eb6c323884c8158c16f60295e62258", "url": "https://github.com/hazelcast/hazelcast-jet/commit/ff2e87d795eb6c323884c8158c16f60295e62258", "message": "Apply suggestions from code review\n\nCo-authored-by: Marko Topolnik <marko@hazelcast.com>", "committedDate": "2020-11-24T12:52:08Z", "type": "commit"}, {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12", "url": "https://github.com/hazelcast/hazelcast-jet/commit/50a0a1376e90da4436d8964641df98c430d7ff12", "message": "Fix extra space", "committedDate": "2020-11-24T12:52:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MTg0Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529581847", "bodyText": "Extra indent here.", "author": "mtopolnik", "createdAt": "2020-11-24T14:22:33Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation1.java", "diffHunk": "@@ -41,13 +45,19 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "originalCommit": "50a0a1376e90da4436d8964641df98c430d7ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c47b4dafa4f4174d27729c988f7818a9d8d3a77a", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation1.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation1.java\nindex de931b54f8..c027ef33e2 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation1.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation1.java\n\n@@ -46,8 +46,8 @@ public interface AggregateOperation1<T, A, R> extends AggregateOperation<A, R> {\n      * A primitive that updates the accumulator state to account for a new\n      * item.\n      * <p>\n-     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n-     *  cooperative}.\n+     * The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     * cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T> accumulateFn();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MTkxMw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529581913", "bodyText": "Extra indent here.", "author": "mtopolnik", "createdAt": "2020-11-24T14:22:37Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation1.java", "diffHunk": "@@ -41,13 +45,19 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T> accumulateFn();\n \n     /**\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive replaced with the one supplied here.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "originalCommit": "50a0a1376e90da4436d8964641df98c430d7ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c47b4dafa4f4174d27729c988f7818a9d8d3a77a", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation1.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation1.java\nindex de931b54f8..c027ef33e2 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation1.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation1.java\n\n@@ -46,8 +46,8 @@ public interface AggregateOperation1<T, A, R> extends AggregateOperation<A, R> {\n      * A primitive that updates the accumulator state to account for a new\n      * item.\n      * <p>\n-     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n-     *  cooperative}.\n+     * The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     * cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T> accumulateFn();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjA1MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582051", "bodyText": "Extra indent here.", "author": "mtopolnik", "createdAt": "2020-11-24T14:22:49Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java", "diffHunk": "@@ -51,20 +55,29 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "originalCommit": "50a0a1376e90da4436d8964641df98c430d7ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c47b4dafa4f4174d27729c988f7818a9d8d3a77a", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java\nindex c23dc60daa..ebb3995127 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java\n\n@@ -56,8 +56,8 @@ public interface AggregateOperation2<T0, T1, A, R> extends AggregateOperation<A,\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n      * <p>\n-     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n-     *  cooperative}.\n+     * The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     * cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjEwMw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582103", "bodyText": "Extra indent here.", "author": "mtopolnik", "createdAt": "2020-11-24T14:22:54Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java", "diffHunk": "@@ -51,20 +55,29 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-1.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "originalCommit": "50a0a1376e90da4436d8964641df98c430d7ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c47b4dafa4f4174d27729c988f7818a9d8d3a77a", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java\nindex c23dc60daa..ebb3995127 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java\n\n@@ -56,8 +56,8 @@ public interface AggregateOperation2<T0, T1, A, R> extends AggregateOperation<A,\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n      * <p>\n-     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n-     *  cooperative}.\n+     * The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     * cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjE2OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582168", "bodyText": "Extra indent here.", "author": "mtopolnik", "createdAt": "2020-11-24T14:23:00Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java", "diffHunk": "@@ -51,20 +55,29 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-1.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T1> accumulateFn1();\n \n     /**\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive at index 0 replaced with the one supplied here.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "originalCommit": "50a0a1376e90da4436d8964641df98c430d7ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c47b4dafa4f4174d27729c988f7818a9d8d3a77a", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java\nindex c23dc60daa..ebb3995127 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java\n\n@@ -56,8 +56,8 @@ public interface AggregateOperation2<T0, T1, A, R> extends AggregateOperation<A,\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n      * <p>\n-     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n-     *  cooperative}.\n+     * The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     * cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjIyMQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582221", "bodyText": "Extra indent here.", "author": "mtopolnik", "createdAt": "2020-11-24T14:23:04Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java", "diffHunk": "@@ -74,6 +87,9 @@\n     /**\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive at index 1 replaced with the one supplied here.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "originalCommit": "50a0a1376e90da4436d8964641df98c430d7ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c47b4dafa4f4174d27729c988f7818a9d8d3a77a", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java\nindex c23dc60daa..ebb3995127 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java\n\n@@ -88,8 +88,8 @@ public interface AggregateOperation2<T0, T1, A, R> extends AggregateOperation<A,\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive at index 1 replaced with the one supplied here.\n      * <p>\n-     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n-     *  cooperative}.\n+     * The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     * cooperative}.\n      */\n     @Nonnull\n     <T1_NEW> AggregateOperation2<T0, T1_NEW, A, R> withAccumulateFn1(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjMxMw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582313", "bodyText": "Extra indent here.", "author": "mtopolnik", "createdAt": "2020-11-24T14:23:13Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "diffHunk": "@@ -53,27 +57,39 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "originalCommit": "50a0a1376e90da4436d8964641df98c430d7ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c47b4dafa4f4174d27729c988f7818a9d8d3a77a", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java\nindex f70ad26a57..833fda59a2 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java\n\n@@ -58,8 +58,8 @@ public interface AggregateOperation3<T0, T1, T2, A, R> extends AggregateOperatio\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n      * <p>\n-     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n-     *  cooperative}.\n+     * The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     * cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjM2MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582361", "bodyText": "Extra indent here.", "author": "mtopolnik", "createdAt": "2020-11-24T14:23:17Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "diffHunk": "@@ -53,27 +57,39 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-1.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "originalCommit": "50a0a1376e90da4436d8964641df98c430d7ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c47b4dafa4f4174d27729c988f7818a9d8d3a77a", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java\nindex f70ad26a57..833fda59a2 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java\n\n@@ -58,8 +58,8 @@ public interface AggregateOperation3<T0, T1, T2, A, R> extends AggregateOperatio\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n      * <p>\n-     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n-     *  cooperative}.\n+     * The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     * cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjQwMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582400", "bodyText": "Extra indent here.", "author": "mtopolnik", "createdAt": "2020-11-24T14:23:20Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "diffHunk": "@@ -53,27 +57,39 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-1.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T1> accumulateFn1();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-2.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "originalCommit": "50a0a1376e90da4436d8964641df98c430d7ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c47b4dafa4f4174d27729c988f7818a9d8d3a77a", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java\nindex f70ad26a57..833fda59a2 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java\n\n@@ -58,8 +58,8 @@ public interface AggregateOperation3<T0, T1, T2, A, R> extends AggregateOperatio\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n      * <p>\n-     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n-     *  cooperative}.\n+     * The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     * cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjQ1Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582456", "bodyText": "Extra indent here.", "author": "mtopolnik", "createdAt": "2020-11-24T14:23:25Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "diffHunk": "@@ -53,27 +57,39 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-1.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T1> accumulateFn1();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-2.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T2> accumulateFn2();\n \n     /**\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive at index 0 replaced with the one supplied here.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "originalCommit": "50a0a1376e90da4436d8964641df98c430d7ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c47b4dafa4f4174d27729c988f7818a9d8d3a77a", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java\nindex f70ad26a57..833fda59a2 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java\n\n@@ -58,8 +58,8 @@ public interface AggregateOperation3<T0, T1, T2, A, R> extends AggregateOperatio\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n      * <p>\n-     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n-     *  cooperative}.\n+     * The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     * cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjQ5Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582493", "bodyText": "Extra indent here.", "author": "mtopolnik", "createdAt": "2020-11-24T14:23:28Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "diffHunk": "@@ -83,6 +99,9 @@\n     /**\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive at index 1 replaced with the one supplied here.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "originalCommit": "50a0a1376e90da4436d8964641df98c430d7ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c47b4dafa4f4174d27729c988f7818a9d8d3a77a", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java\nindex f70ad26a57..833fda59a2 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java\n\n@@ -100,8 +100,8 @@ public interface AggregateOperation3<T0, T1, T2, A, R> extends AggregateOperatio\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive at index 1 replaced with the one supplied here.\n      * <p>\n-     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n-     *  cooperative}.\n+     * The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     * cooperative}.\n      */\n     @Nonnull\n     <T1_NEW> AggregateOperation3<T0, T1_NEW, T2, A, R> withAccumulateFn1(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjUyOQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582529", "bodyText": "Extra indent here.", "author": "mtopolnik", "createdAt": "2020-11-24T14:23:31Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "diffHunk": "@@ -92,6 +111,9 @@\n     /**\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive at index 2 replaced with the one supplied here.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "originalCommit": "50a0a1376e90da4436d8964641df98c430d7ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c47b4dafa4f4174d27729c988f7818a9d8d3a77a", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java\nindex f70ad26a57..833fda59a2 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java\n\n@@ -112,8 +112,8 @@ public interface AggregateOperation3<T0, T1, T2, A, R> extends AggregateOperatio\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive at index 2 replaced with the one supplied here.\n      * <p>\n-     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n-     *  cooperative}.\n+     * The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     * cooperative}.\n      */\n     @Nonnull\n     <T2_NEW> AggregateOperation3<T0, T1, T2_NEW, A, R> withAccumulateFn2(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4Mjc0Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582743", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *              Processor#isCooperative() cooperative}\n          \n          \n            \n                 *              Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T14:23:48Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "diffHunk": "@@ -63,7 +64,8 @@\n      * aggregate operation.\n      *\n      * @param accumulateFn the {@code accumulate} primitive, parameters are\n-     *              {@code (accumulator, item)}\n+     *              {@code (accumulator, item)}. It must be stateless and {@linkplain\n+     *              Processor#isCooperative() cooperative}", "originalCommit": "50a0a1376e90da4436d8964641df98c430d7ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b940fc304374847e7f3eb02040113ca31029aa23", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java\nindex ac26494d90..bb850f6d75 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java\n\n@@ -65,7 +65,7 @@ public final class AggregateOperationBuilder<A> {\n      *\n      * @param accumulateFn the {@code accumulate} primitive, parameters are\n      *              {@code (accumulator, item)}. It must be stateless and {@linkplain\n-     *              Processor#isCooperative() cooperative}\n+     *              Processor#isCooperative() cooperative}.\n      * @param <T> the expected type of input item\n      * @return a new builder object that captures the {@code T0} type parameter\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjgzMg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582832", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T14:23:56Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "diffHunk": "@@ -78,7 +80,8 @@\n      * primitive for stream-0. Also selects the fixed-arity variant of the\n      * aggregate operation.\n      *\n-     * @param accumulateFn0 the {@code accumulate} primitive for stream-0\n+     * @param accumulateFn0 the {@code accumulate} primitive for stream-0. It\n+     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "originalCommit": "50a0a1376e90da4436d8964641df98c430d7ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b940fc304374847e7f3eb02040113ca31029aa23", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java\nindex ac26494d90..bb850f6d75 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java\n\n@@ -81,7 +81,7 @@ public final class AggregateOperationBuilder<A> {\n      * aggregate operation.\n      *\n      * @param accumulateFn0 the {@code accumulate} primitive for stream-0. It\n-     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}.\n      * @param <T0> the expected type of item in stream-0\n      * @return a new builder object that captures the {@code T0} type parameter\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjkxMg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582912", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     stateless and {@linkplain Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T14:24:02Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "diffHunk": "@@ -104,7 +107,8 @@\n      * variable-arity variant of the aggregate operation.\n      *\n      * @param tag the tag of the associated input stream\n-     * @param accumulateFn the {@code accumulate} primitive\n+     * @param accumulateFn the {@code accumulate} primitive. It must be\n+     *     stateless and {@linkplain Processor#isCooperative() cooperative}", "originalCommit": "50a0a1376e90da4436d8964641df98c430d7ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b940fc304374847e7f3eb02040113ca31029aa23", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java\nindex ac26494d90..bb850f6d75 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java\n\n@@ -108,7 +108,7 @@ public final class AggregateOperationBuilder<A> {\n      *\n      * @param tag the tag of the associated input stream\n      * @param accumulateFn the {@code accumulate} primitive. It must be\n-     *     stateless and {@linkplain Processor#isCooperative() cooperative}\n+     *     stateless and {@linkplain Processor#isCooperative() cooperative}.\n      * @param <T> the expected type of input item\n      * @return a new builder object for variable-arity aggregate operations which has\n      *         the {@code createFn} of the current builder\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4Mjk4Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582982", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T14:24:07Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "diffHunk": "@@ -146,7 +150,8 @@\n          * Registers the {@link AggregateOperation2#accumulateFn1()} accumulate}\n          * primitive for stream-1, returning the arity-2 variant of the builder.\n          *\n-         * @param accumulateFn1 the {@code accumulate} primitive for stream-1\n+         * @param accumulateFn1 the {@code accumulate} primitive for stream-1. It\n+         *     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "originalCommit": "50a0a1376e90da4436d8964641df98c430d7ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b940fc304374847e7f3eb02040113ca31029aa23", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java\nindex ac26494d90..bb850f6d75 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java\n\n@@ -151,7 +151,7 @@ public final class AggregateOperationBuilder<A> {\n          * primitive for stream-1, returning the arity-2 variant of the builder.\n          *\n          * @param accumulateFn1 the {@code accumulate} primitive for stream-1. It\n-         *     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n+         *     must be stateless and {@linkplain Processor#isCooperative() cooperative}.\n          * @param <T1> the expected type of item in stream-1\n          * @return a new builder object that captures the {@code T1} type parameter\n          */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MzE1Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529583156", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T14:24:22Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "diffHunk": "@@ -268,7 +288,8 @@\n          * Registers the {@link AggregateOperation3#accumulateFn2() accumulate}\n          * primitive for stream-2, returning the arity-3 variant of the builder.\n          *\n-         * @param accumulateFn2 the {@code accumulate} primitive for stream-2\n+         * @param accumulateFn2 the {@code accumulate} primitive for stream-2. It\n+         *     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "originalCommit": "50a0a1376e90da4436d8964641df98c430d7ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b940fc304374847e7f3eb02040113ca31029aa23", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java\nindex ac26494d90..bb850f6d75 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java\n\n@@ -289,7 +289,7 @@ public final class AggregateOperationBuilder<A> {\n          * primitive for stream-2, returning the arity-3 variant of the builder.\n          *\n          * @param accumulateFn2 the {@code accumulate} primitive for stream-2. It\n-         *     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n+         *     must be stateless and {@linkplain Processor#isCooperative() cooperative}.\n          * @param <T2> the expected type of item in stream-2\n          * @return a new builder object that captures the {@code T2} type parameter\n          */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MzM0Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529583346", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                     *     stateless and {@linkplain Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T14:24:37Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "diffHunk": "@@ -496,7 +547,8 @@\n          * primitive for the stream tagged with the supplied tag.\n          *\n          * @param tag the tag of the associated input stream\n-         * @param accumulateFn the {@code accumulate} primitive\n+         * @param accumulateFn the {@code accumulate} primitive. It must be\n+         *     stateless and {@linkplain Processor#isCooperative() cooperative}", "originalCommit": "50a0a1376e90da4436d8964641df98c430d7ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b940fc304374847e7f3eb02040113ca31029aa23", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java\nindex ac26494d90..bb850f6d75 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java\n\n@@ -548,7 +548,7 @@ public final class AggregateOperationBuilder<A> {\n          *\n          * @param tag the tag of the associated input stream\n          * @param accumulateFn the {@code accumulate} primitive. It must be\n-         *     stateless and {@linkplain Processor#isCooperative() cooperative}\n+         *     stateless and {@linkplain Processor#isCooperative() cooperative}.\n          * @param <T> the expected type of input item\n          * @return this\n          */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MzU0MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529583540", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     Processor#isCooperative() cooperative}.", "author": "mtopolnik", "createdAt": "2020-11-24T14:24:51Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperations.java", "diffHunk": "@@ -115,7 +116,9 @@ private AggregateOperations() {\n      * <strong>Note:</strong> if the sum exceeds {@code Long.MAX_VALUE}, the job\n      * will fail with an {@code ArithmeticException}.\n      *\n-     * @param getLongValueFn function that extracts the {@code long} values you want to sum\n+     * @param getLongValueFn function that extracts the {@code long} values you\n+     *     want to sum. It must be stateless and {@linkplain\n+     *     Processor#isCooperative() cooperative}", "originalCommit": "50a0a1376e90da4436d8964641df98c430d7ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b940fc304374847e7f3eb02040113ca31029aa23", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperations.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperations.java\nindex 4a6a77ae8f..eb7eb94d1c 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperations.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperations.java\n\n@@ -118,7 +118,7 @@ public final class AggregateOperations {\n      *\n      * @param getLongValueFn function that extracts the {@code long} values you\n      *     want to sum. It must be stateless and {@linkplain\n-     *     Processor#isCooperative() cooperative}\n+     *     Processor#isCooperative() cooperative}.\n      * @param <T> type of the input item\n      */\n     @Nonnull\n"}}, {"oid": "9ec7e2a441e99043698a9fb45fe8c4f5f4940ab6", "url": "https://github.com/hazelcast/hazelcast-jet/commit/9ec7e2a441e99043698a9fb45fe8c4f5f4940ab6", "message": "Merge branch 'master' into cooperative-doc", "committedDate": "2020-11-24T14:31:38Z", "type": "commit"}, {"oid": "c47b4dafa4f4174d27729c988f7818a9d8d3a77a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/c47b4dafa4f4174d27729c988f7818a9d8d3a77a", "message": "Fix yet more extra indents", "committedDate": "2020-11-24T14:34:28Z", "type": "commit"}, {"oid": "b940fc304374847e7f3eb02040113ca31029aa23", "url": "https://github.com/hazelcast/hazelcast-jet/commit/b940fc304374847e7f3eb02040113ca31029aa23", "message": "Apply suggestions from code review #2\n\nCo-authored-by: Marko Topolnik <marko@hazelcast.com>", "committedDate": "2020-11-24T14:35:49Z", "type": "commit"}, {"oid": "c66fe272c141f1cd9254fd5e73c42569cc021e1c", "url": "https://github.com/hazelcast/hazelcast-jet/commit/c66fe272c141f1cd9254fd5e73c42569cc021e1c", "message": "Merge branch 'cooperative-doc' of ssh://github.com/viliam-durina/hazelcast-jet into cooperative-doc", "committedDate": "2020-11-24T14:36:31Z", "type": "commit"}, {"oid": "1cb21947902a6aa1db3a989c93fca5ebfa9505f2", "url": "https://github.com/hazelcast/hazelcast-jet/commit/1cb21947902a6aa1db3a989c93fca5ebfa9505f2", "message": "Merge branch 'master' into cooperative-doc", "committedDate": "2020-11-30T14:56:29Z", "type": "commit"}, {"oid": "ae050ef99037c99ff32ffeb0fe556bb96add33fa", "url": "https://github.com/hazelcast/hazelcast-jet/commit/ae050ef99037c99ff32ffeb0fe556bb96add33fa", "message": "Add .", "committedDate": "2020-11-30T15:05:41Z", "type": "commit"}]}