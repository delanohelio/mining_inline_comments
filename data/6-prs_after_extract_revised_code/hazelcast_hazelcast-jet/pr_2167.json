{"pr_number": 2167, "pr_title": "Shutdown gRPC channels cleanly", "pr_createdAt": "2020-04-14T18:51:49Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2167", "timeline": [{"oid": "d791aab9726e8c94c942529e385e25059173510c", "url": "https://github.com/hazelcast/hazelcast-jet/commit/d791aab9726e8c94c942529e385e25059173510c", "message": "Shutdown gRPC channels cleanly\n\nSeveral fixes\n- closing channels doesn't happen imediatelly - added awatTermination\n- Server stored in local variable not shutdown at end of test\n- onCompleted should call onCompleted on responseObserver", "committedDate": "2020-04-14T18:48:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTMxMg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2167#discussion_r408599312", "bodyText": "what happens if times out 5 seconds?", "author": "cangencer", "createdAt": "2020-04-15T06:02:02Z", "path": "extensions/grpc/src/main/java/com/hazelcast/jet/grpc/GrpcServices.java", "diffHunk": "@@ -107,7 +108,7 @@ private GrpcServices() {\n                 .withCreateContextFn(ctx -> channelFn.get().build())\n                 .withCreateServiceFn((ctx, channel) -> new UnaryService<>(channel, callStubFn))\n                 .withDestroyServiceFn(UnaryService::destroy)\n-                .withDestroyContextFn(ManagedChannel::shutdown);\n+                .withDestroyContextFn(channel -> channel.shutdown().awaitTermination(5, TimeUnit.SECONDS));", "originalCommit": "d791aab9726e8c94c942529e385e25059173510c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMTUwMQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2167#discussion_r408631501", "bodyText": "Ha! I thought it throws TimeoutException, but it just returns true/false if it managed to shutdown in time.\nWhat should we do? Throw the exception ourselves?", "author": "frant-hartm", "createdAt": "2020-04-15T07:20:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTMxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMTgzOA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2167#discussion_r408631838", "bodyText": "is there some way to terminate it not so gracefully?", "author": "cangencer", "createdAt": "2020-04-15T07:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "bc58ee4611892e013f7e2f6b102a983fbc18a44a", "chunk": "diff --git a/extensions/grpc/src/main/java/com/hazelcast/jet/grpc/GrpcServices.java b/extensions/grpc/src/main/java/com/hazelcast/jet/grpc/GrpcServices.java\nindex 4493327a7a..c6f3747f73 100644\n--- a/extensions/grpc/src/main/java/com/hazelcast/jet/grpc/GrpcServices.java\n+++ b/extensions/grpc/src/main/java/com/hazelcast/jet/grpc/GrpcServices.java\n\n@@ -108,7 +112,7 @@ public final class GrpcServices {\n                 .withCreateContextFn(ctx -> channelFn.get().build())\n                 .withCreateServiceFn((ctx, channel) -> new UnaryService<>(channel, callStubFn))\n                 .withDestroyServiceFn(UnaryService::destroy)\n-                .withDestroyContextFn(channel -> channel.shutdown().awaitTermination(5, TimeUnit.SECONDS));\n+                .withDestroyContextFn(channel -> GrpcUtil.shutdownChannel(channel, logger));\n     }\n \n     /**\n"}}, {"oid": "bc58ee4611892e013f7e2f6b102a983fbc18a44a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/bc58ee4611892e013f7e2f6b102a983fbc18a44a", "message": "Add forceful shutdown when normal shutdown doesn't terminate.\nExtract shutdown to GrpcUtil.", "committedDate": "2020-04-15T07:57:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NDA5Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2167#discussion_r408694092", "bodyText": "it would be better to use the logger from ctx, you can do this by making createContextFn return tuple2(channel, logger) , kind of ugly, but it should be fine.", "author": "cangencer", "createdAt": "2020-04-15T09:08:58Z", "path": "extensions/grpc/src/main/java/com/hazelcast/jet/grpc/GrpcServices.java", "diffHunk": "@@ -107,7 +112,7 @@ private GrpcServices() {\n                 .withCreateContextFn(ctx -> channelFn.get().build())\n                 .withCreateServiceFn((ctx, channel) -> new UnaryService<>(channel, callStubFn))\n                 .withDestroyServiceFn(UnaryService::destroy)\n-                .withDestroyContextFn(ManagedChannel::shutdown);\n+                .withDestroyContextFn(channel -> GrpcUtil.shutdownChannel(channel, logger));", "originalCommit": "bc58ee4611892e013f7e2f6b102a983fbc18a44a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c0112a7bd4bfe9b93024d627d8b4ecd19f0bc10a", "chunk": "diff --git a/extensions/grpc/src/main/java/com/hazelcast/jet/grpc/GrpcServices.java b/extensions/grpc/src/main/java/com/hazelcast/jet/grpc/GrpcServices.java\nindex c6f3747f73..da9adb0f9f 100644\n--- a/extensions/grpc/src/main/java/com/hazelcast/jet/grpc/GrpcServices.java\n+++ b/extensions/grpc/src/main/java/com/hazelcast/jet/grpc/GrpcServices.java\n\n@@ -109,10 +107,10 @@ public final class GrpcServices {\n             @Nonnull FunctionEx<? super ManagedChannel, ? extends BiConsumerEx<T, StreamObserver<R>>> callStubFn\n     ) {\n         return ServiceFactory\n-                .withCreateContextFn(ctx -> channelFn.get().build())\n-                .withCreateServiceFn((ctx, channel) -> new UnaryService<>(channel, callStubFn))\n+                .withCreateContextFn(ctx -> tuple2(channelFn.get().build(), ctx.logger()))\n+                .withCreateServiceFn((ctx, tuple) -> new UnaryService<>(tuple.f0(), callStubFn))\n                 .withDestroyServiceFn(UnaryService::destroy)\n-                .withDestroyContextFn(channel -> GrpcUtil.shutdownChannel(channel, logger));\n+                .withDestroyContextFn(tuple -> GrpcUtil.shutdownChannel(tuple.f0(), tuple.f1()));\n     }\n \n     /**\n"}}, {"oid": "c0112a7bd4bfe9b93024d627d8b4ecd19f0bc10a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/c0112a7bd4bfe9b93024d627d8b4ecd19f0bc10a", "message": "Add logger to context", "committedDate": "2020-04-15T09:20:17Z", "type": "commit"}]}