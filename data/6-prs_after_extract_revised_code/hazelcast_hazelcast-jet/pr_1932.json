{"pr_number": 1932, "pr_title": "Add nested classes & packages to JobConfig", "pr_createdAt": "2020-02-06T08:33:40Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/1932", "timeline": [{"oid": "caf398b66256802838dec2a6eceefbbdee3af2de", "url": "https://github.com/hazelcast/hazelcast-jet/commit/caf398b66256802838dec2a6eceefbbdee3af2de", "message": "Add nested classes to Jet job.", "committedDate": "2020-02-06T08:28:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgzNzU3Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r375837573", "bodyText": "can we add a test with anonymous class too", "author": "gurbuzali", "createdAt": "2020-02-06T13:39:10Z", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/config/ResourceConfigTest.java", "diffHunk": "@@ -1024,4 +1033,9 @@ private File createDirectory(String path) {\n         assertTrue(\"Failed to create directory \" + dirFile, dirFile.mkdirs());\n         return dirFile;\n     }\n+\n+    private static class BaseClass {\n+        private static class NestedClass {", "originalCommit": "caf398b66256802838dec2a6eceefbbdee3af2de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgzODA1MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r375838051", "bodyText": "Actually, anonymous class case is not covered yet, I'm working on it right now - will do.", "author": "gierlachg", "createdAt": "2020-02-06T13:40:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgzNzU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg1MTA3Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r375851072", "bodyText": "Could you also test with Kotlin - since Kotlin lambdas are always created as anonymous classes.", "author": "cangencer", "createdAt": "2020-02-06T14:04:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgzNzU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg5NTkzNA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r375895934", "bodyText": "Do you mean actually adding kotlin as test dependency or just make sure it works with it? Adding kotlin tests might further slow down the build?", "author": "gierlachg", "createdAt": "2020-02-06T15:18:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgzNzU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIzNDgwOQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r376234809", "bodyText": "Maybe just test it for now - I don't know how complicated it would be to add it as a full dependency and some tests. It's a nice to have.", "author": "cangencer", "createdAt": "2020-02-07T06:40:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgzNzU3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "593776b2b3be9307468b2a21e8c5e27dbc164dbb", "chunk": "diff --git a/hazelcast-jet-core/src/test/java/com/hazelcast/jet/config/ResourceConfigTest.java b/hazelcast-jet-core/src/test/java/com/hazelcast/jet/config/ResourceConfigTest.java\nindex 0bfc2dd77..23d415ddf 100644\n--- a/hazelcast-jet-core/src/test/java/com/hazelcast/jet/config/ResourceConfigTest.java\n+++ b/hazelcast-jet-core/src/test/java/com/hazelcast/jet/config/ResourceConfigTest.java\n\n@@ -1034,7 +1035,13 @@ public class ResourceConfigTest extends JetTestSupport {\n         return dirFile;\n     }\n \n+    @SuppressWarnings(\"unused\")\n     private static class BaseClass {\n+        private void method() {\n+            new Object() {\n+            };\n+        }\n+\n         private static class NestedClass {\n         }\n     }\n"}}, {"oid": "593776b2b3be9307468b2a21e8c5e27dbc164dbb", "url": "https://github.com/hazelcast/hazelcast-jet/commit/593776b2b3be9307468b2a21e8c5e27dbc164dbb", "message": "Add support for anonymous classes.", "committedDate": "2020-02-06T15:17:35Z", "type": "commit"}, {"oid": "e2ad989baa9d9377b48c555fad479b5f3a9354a9", "url": "https://github.com/hazelcast/hazelcast-jet/commit/e2ad989baa9d9377b48c555fad479b5f3a9354a9", "message": "Merge branch 'master' into job_classes", "committedDate": "2020-02-06T15:23:01Z", "type": "commit"}, {"oid": "b48db6d1bb576467565c46fa004b87f475067267", "url": "https://github.com/hazelcast/hazelcast-jet/commit/b48db6d1bb576467565c46fa004b87f475067267", "message": "Merge branch 'master' into job_classes", "committedDate": "2020-02-06T15:29:46Z", "type": "commit"}, {"oid": "2e09bd83815280b56724154f8f608ee465030de8", "url": "https://github.com/hazelcast/hazelcast-jet/commit/2e09bd83815280b56724154f8f608ee465030de8", "message": "Merge remote-tracking branch 'origin/job_classes' into job_classes", "committedDate": "2020-02-06T15:30:02Z", "type": "commit"}, {"oid": "6414fc873a99f120adf5011a0d97102c6405bd21", "url": "https://github.com/hazelcast/hazelcast-jet/commit/6414fc873a99f120adf5011a0d97102c6405bd21", "message": "Fix spotbugs error.", "committedDate": "2020-02-06T15:34:35Z", "type": "commit"}, {"oid": "d3ed4d23d5fdf5dd65c0a755ca35d3e8a28d0b87", "url": "https://github.com/hazelcast/hazelcast-jet/commit/d3ed4d23d5fdf5dd65c0a755ca35d3e8a28d0b87", "message": "Cleanup JobConfig.addClass() test.", "committedDate": "2020-02-06T15:37:57Z", "type": "commit"}, {"oid": "3e6413cb47616c97bf62f9c32a70001eb1731463", "url": "https://github.com/hazelcast/hazelcast-jet/commit/3e6413cb47616c97bf62f9c32a70001eb1731463", "message": "Fix spotbugs error.", "committedDate": "2020-02-06T15:38:40Z", "type": "commit"}, {"oid": "043595624e9afc2f84e6ef45ed58a1de7cd89506", "url": "https://github.com/hazelcast/hazelcast-jet/commit/043595624e9afc2f84e6ef45ed58a1de7cd89506", "message": "Filter out non-class nested resources.", "committedDate": "2020-02-06T16:54:21Z", "type": "commit"}, {"oid": "f5862d59c13d0fb3b2a8d3187524898176c2eccc", "url": "https://github.com/hazelcast/hazelcast-jet/commit/f5862d59c13d0fb3b2a8d3187524898176c2eccc", "message": "Format.", "committedDate": "2020-02-06T16:55:36Z", "type": "commit"}, {"oid": "8d69f3f631dc06d4ab3dda592083a979bd526613", "url": "https://github.com/hazelcast/hazelcast-jet/commit/8d69f3f631dc06d4ab3dda592083a979bd526613", "message": "Naming.", "committedDate": "2020-02-06T16:59:04Z", "type": "commit"}, {"oid": "000b222c815f274f1af3a7dfea6e0e4dd37b4951", "url": "https://github.com/hazelcast/hazelcast-jet/commit/000b222c815f274f1af3a7dfea6e0e4dd37b4951", "message": "Merge remote-tracking branch 'upstream/master' into job_classes", "committedDate": "2020-02-07T07:21:34Z", "type": "commit"}, {"oid": "f2890b5ad630373c7524982e6c54b03a10fb3052", "url": "https://github.com/hazelcast/hazelcast-jet/commit/f2890b5ad630373c7524982e6c54b03a10fb3052", "message": "Handle no package case.", "committedDate": "2020-02-07T08:26:32Z", "type": "commit"}, {"oid": "6be14a08cbe110a8c5938212de34dfbe77fa2cdb", "url": "https://github.com/hazelcast/hazelcast-jet/commit/6be14a08cbe110a8c5938212de34dfbe77fa2cdb", "message": "Add kotlin resource test.", "committedDate": "2020-02-07T08:27:27Z", "type": "commit"}, {"oid": "28c6302a5dafc1e42e906e474aa8ef6d17948e58", "url": "https://github.com/hazelcast/hazelcast-jet/commit/28c6302a5dafc1e42e906e474aa8ef6d17948e58", "message": "Merge remote-tracking branch 'upstream/master' into job_classes", "committedDate": "2020-02-07T08:35:51Z", "type": "commit"}, {"oid": "866584797f6af4d15b3220efbace2ee55d076361", "url": "https://github.com/hazelcast/hazelcast-jet/commit/866584797f6af4d15b3220efbace2ee55d076361", "message": "Suppress SpotBugs false positive on JDK11.", "committedDate": "2020-02-07T08:44:34Z", "type": "commit"}, {"oid": "ca4036daa7f613b209f55220d61357937bd7f775", "url": "https://github.com/hazelcast/hazelcast-jet/commit/ca4036daa7f613b209f55220d61357937bd7f775", "message": "Merge remote-tracking branch 'upstream/master' into job_classes", "committedDate": "2020-02-07T09:22:09Z", "type": "commit"}, {"oid": "e02e7e2eec2cbe74efb7c01014737b7b76955c55", "url": "https://github.com/hazelcast/hazelcast-jet/commit/e02e7e2eec2cbe74efb7c01014737b7b76955c55", "message": "Fix build.", "committedDate": "2020-02-07T10:46:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMyOTI4Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r376329286", "bodyText": "You can simplify this by first building a literal class string (no escaping) and then calling Pattern.quote() on it.", "author": "mtopolnik", "createdAt": "2020-02-07T10:49:39Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "diffHunk": "@@ -232,10 +241,26 @@ public JobConfig setSnapshotIntervalMillis(long snapshotInterval) {\n     @Nonnull\n     @SuppressWarnings(\"rawtypes\")\n     public JobConfig addClass(@Nonnull Class... classes) {\n-        checkNotNull(classes, \"Classes can not be null\");\n+        checkNotNull(classes, \"Classes cannot be null\");\n         for (Class<?> clazz : classes) {\n             ResourceConfig cfg = new ResourceConfig(clazz);\n             resourceConfigs.put(cfg.getId(), cfg);\n+\n+            ClassLoader classLoader = clazz.getClassLoader();\n+            String packagePrefixPath = Optional.ofNullable(clazz.getPackage())\n+                                               .map(pakage -> pakage.getName().replace('.', '/') + \"/\")\n+                                               .orElse(\"\");\n+            Pattern nestedPattern = Pattern.compile(clazz.getName()\n+                                                         .replace(\".\", \"\\\\/\")\n+                                                         .replace(\"$\", \"\\\\$\") + \"\\\\$.+\" + \"\\\\.class\");", "originalCommit": "e02e7e2eec2cbe74efb7c01014737b7b76955c55", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "049e0a5b7565a43041a67a296f1bc0b402b86e79", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java\nindex 43b616580..a2abb7d97 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java\n\n@@ -250,15 +250,13 @@ public class JobConfig implements IdentifiedDataSerializable {\n             String packagePrefixPath = Optional.ofNullable(clazz.getPackage())\n                                                .map(pakage -> pakage.getName().replace('.', '/') + \"/\")\n                                                .orElse(\"\");\n-            Pattern nestedPattern = Pattern.compile(clazz.getName()\n-                                                         .replace(\".\", \"\\\\/\")\n-                                                         .replace(\"$\", \"\\\\$\") + \"\\\\$.+\" + \"\\\\.class\");\n+            Pattern nestedPattern = Pattern.compile(Pattern.quote(clazz.getName().replace('.', '/')) + \"\\\\$.+\" + \"\\\\.class\");\n             resources(classLoader, packagePrefixPath)\n                     .stream()\n                     .map(resource -> packagePrefixPath + resource)\n                     .filter(resource -> nestedPattern.matcher(resource).matches())\n                     .forEach(resource -> {\n-                        URL url = classLoader.getResource(resource);\n+                        URL url = Objects.requireNonNull(classLoader.getResource(resource));\n                         add(url, resource, ResourceType.CLASS);\n                     });\n         }\n"}}, {"oid": "049e0a5b7565a43041a67a296f1bc0b402b86e79", "url": "https://github.com/hazelcast/hazelcast-jet/commit/049e0a5b7565a43041a67a296f1bc0b402b86e79", "message": "Address PR reviews.", "committedDate": "2020-02-07T10:59:25Z", "type": "commit"}, {"oid": "692eab70cb6708f182e26bc2fedd4520a916a458", "url": "https://github.com/hazelcast/hazelcast-jet/commit/692eab70cb6708f182e26bc2fedd4520a916a458", "message": "Fix checkstyle.", "committedDate": "2020-02-07T11:10:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM0MjIwMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r376342200", "bodyText": "minor, but Javadoc should be wrapped at 72 chars (net)", "author": "cangencer", "createdAt": "2020-02-07T11:22:33Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "diffHunk": "@@ -219,8 +228,8 @@ public JobConfig setSnapshotIntervalMillis(long snapshotInterval) {\n     }\n \n     /**\n-     * Adds the given classes to the Jet job's classpath. They will be\n-     * accessible to all the code attached to the underlying pipeline or DAG,\n+     * Adds the given classes and recursively all their nested classes to the Jet job's classpath.", "originalCommit": "692eab70cb6708f182e26bc2fedd4520a916a458", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa8ee78776bac6d808d02ad2e7ebeb41f758fec7", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java\nindex 261394f74..d4865ad03 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java\n\n@@ -228,11 +228,11 @@ public class JobConfig implements IdentifiedDataSerializable {\n     }\n \n     /**\n-     * Adds the given classes and recursively all their nested classes to the Jet job's classpath.\n-     * They will be accessible to all the code attached to the underlying pipeline or DAG,\n-     * but not to any other code. (An important example is the {@code IMap} data\n-     * source, which can instantiate only the classes from the Jet instance's\n-     * classpath.)\n+     * Adds the given classes and recursively all their nested classes to the\n+     * Jet job's classpath. They will be accessible to all the code attached\n+     * to the underlying pipeline or DAG, but not to any other code.\n+     * (An important example is the {@code IMap} data source, which can\n+     * instantiate only the classes from the Jet instance's classpath.)\n      * <p>\n      * See also {@link #addJar} and {@link #addClasspathResource}.\n      *\n"}}, {"oid": "fa8ee78776bac6d808d02ad2e7ebeb41f758fec7", "url": "https://github.com/hazelcast/hazelcast-jet/commit/fa8ee78776bac6d808d02ad2e7ebeb41f758fec7", "message": "Fix Javadoc formatting.", "committedDate": "2020-02-07T11:26:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NjU0Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r376356543", "bodyText": "this does not work if the class is coming from a dependency. I've created a jar which contains the OuterClass and added that jar as a dependency to my project. When I called addClass, the returned resource list is empty.", "author": "gurbuzali", "createdAt": "2020-02-07T12:02:13Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "diffHunk": "@@ -232,10 +241,26 @@ public JobConfig setSnapshotIntervalMillis(long snapshotInterval) {\n     @Nonnull\n     @SuppressWarnings(\"rawtypes\")\n     public JobConfig addClass(@Nonnull Class... classes) {\n-        checkNotNull(classes, \"Classes can not be null\");\n+        checkNotNull(classes, \"Classes cannot be null\");\n         for (Class<?> clazz : classes) {\n             ResourceConfig cfg = new ResourceConfig(clazz);\n             resourceConfigs.put(cfg.getId(), cfg);\n+\n+            ClassLoader classLoader = clazz.getClassLoader();\n+            String packagePrefixPath = Optional.ofNullable(clazz.getPackage())\n+                                               .map(pakage -> pakage.getName().replace('.', '/') + \"/\")\n+                                               .orElse(\"\");\n+            Pattern nestedPattern = Pattern.compile(\n+                    Pattern.quote(clazz.getName().replace('.', '/')) + \"\\\\$.+\" + \"\\\\.class\"\n+            );\n+            resources(classLoader, packagePrefixPath)", "originalCommit": "fa8ee78776bac6d808d02ad2e7ebeb41f758fec7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6cb890319be6048ed278006d49b0046415cd784d", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java\nindex d4865ad03..33c548d32 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java\n\n@@ -242,26 +234,33 @@ public class JobConfig implements IdentifiedDataSerializable {\n     @SuppressWarnings(\"rawtypes\")\n     public JobConfig addClass(@Nonnull Class... classes) {\n         checkNotNull(classes, \"Classes cannot be null\");\n-        for (Class<?> clazz : classes) {\n-            ResourceConfig cfg = new ResourceConfig(clazz);\n-            resourceConfigs.put(cfg.getId(), cfg);\n-\n-            ClassLoader classLoader = clazz.getClassLoader();\n-            String packagePrefixPath = Optional.ofNullable(clazz.getPackage())\n-                                               .map(pakage -> pakage.getName().replace('.', '/') + \"/\")\n-                                               .orElse(\"\");\n-            Pattern nestedPattern = Pattern.compile(\n-                    Pattern.quote(clazz.getName().replace('.', '/')) + \"\\\\$.+\" + \"\\\\.class\"\n-            );\n-            resources(classLoader, packagePrefixPath)\n-                    .stream()\n-                    .map(resource -> packagePrefixPath + resource)\n-                    .filter(resource -> nestedPattern.matcher(resource).matches())\n-                    .forEach(resource -> {\n-                        URL url = Objects.requireNonNull(classLoader.getResource(resource));\n-                        add(url, resource, ResourceType.CLASS);\n-                    });\n-        }\n+        Reflections.memberClassesOf(classes)\n+                   .forEach(clazz -> {\n+                       ResourceConfig cfg = new ResourceConfig(clazz);\n+                       resourceConfigs.put(cfg.getId(), cfg);\n+                   });\n+        return this;\n+    }\n+\n+    /**\n+     * Adds recursively all the classes in given packages to the Jet job's\n+     * classpath. They will be accessible to all the code attached to the\n+     * underlying pipeline or DAG, but not to any other code.\n+     * (An important example is the {@code IMap} data source, which can\n+     * instantiate only the classes from the Jet instance's classpath.)\n+     * <p>\n+     * See also {@link #addJar} and {@link #addClasspathResource}.\n+     *\n+     * @return {@code this} instance for fluent API\n+     */\n+    @Nonnull\n+    public JobConfig addPackage(@Nonnull Package... packages) {\n+        checkNotNull(packages, \"Packages cannot be null\");\n+        Reflections.memberClassesOf(packages)\n+                   .forEach(clazz -> {\n+                       ResourceConfig cfg = new ResourceConfig(clazz);\n+                       resourceConfigs.put(cfg.getId(), cfg);\n+                   });\n         return this;\n     }\n \n"}}, {"oid": "6cb890319be6048ed278006d49b0046415cd784d", "url": "https://github.com/hazelcast/hazelcast-jet/commit/6cb890319be6048ed278006d49b0046415cd784d", "message": "Add class discovery using 'classgraph'.", "committedDate": "2020-02-10T10:17:16Z", "type": "commit"}, {"oid": "0af77d4615c2203dd6c152a89671c0ed9fac906d", "url": "https://github.com/hazelcast/hazelcast-jet/commit/0af77d4615c2203dd6c152a89671c0ed9fac906d", "message": "Merge branch 'master' into job_classes", "committedDate": "2020-02-10T10:17:59Z", "type": "commit"}, {"oid": "4ad9484fdb73fc03b7c8c6ad0746a46913e3a02a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/4ad9484fdb73fc03b7c8c6ad0746a46913e3a02a", "message": "Accept String as package name & move ReflectionUtils to config package.", "committedDate": "2020-02-10T11:00:30Z", "type": "commit"}, {"oid": "e9e0352a8817d2225ea14b9eff5b51250ca75c59", "url": "https://github.com/hazelcast/hazelcast-jet/commit/e9e0352a8817d2225ea14b9eff5b51250ca75c59", "message": "Add non-class resources together with addPackage().", "committedDate": "2020-02-10T12:28:47Z", "type": "commit"}, {"oid": "48d36312df2277e8b7323532d59b7a8d855e9e5d", "url": "https://github.com/hazelcast/hazelcast-jet/commit/48d36312df2277e8b7323532d59b7a8d855e9e5d", "message": "Remove redundant public modifier.", "committedDate": "2020-02-10T12:56:06Z", "type": "commit"}, {"oid": "9c9ed5cfcaed6a5016544a96a14784e2cd893498", "url": "https://github.com/hazelcast/hazelcast-jet/commit/9c9ed5cfcaed6a5016544a96a14784e2cd893498", "message": "Merge ReflectionUtils classes.", "committedDate": "2020-02-10T14:00:29Z", "type": "commit"}, {"oid": "75df1f314ceb01878df4aec9c0862bde80a97a3f", "url": "https://github.com/hazelcast/hazelcast-jet/commit/75df1f314ceb01878df4aec9c0862bde80a97a3f", "message": "Merge ReflectionUtils classes.", "committedDate": "2020-02-10T14:02:27Z", "type": "commit"}, {"oid": "6e5c4da577d694d8ea477d647e16c02fe834bb14", "url": "https://github.com/hazelcast/hazelcast-jet/commit/6e5c4da577d694d8ea477d647e16c02fe834bb14", "message": "Mark class as final.", "committedDate": "2020-02-10T14:09:34Z", "type": "commit"}, {"oid": "3671331be999d9e549f08aa39217c9974f5075c6", "url": "https://github.com/hazelcast/hazelcast-jet/commit/3671331be999d9e549f08aa39217c9974f5075c6", "message": "Merge branch 'master' into job_classes", "committedDate": "2020-02-10T19:18:56Z", "type": "commit"}, {"oid": "11e3eea39db06d521e61abcc8ebba07eb22d6715", "url": "https://github.com/hazelcast/hazelcast-jet/commit/11e3eea39db06d521e61abcc8ebba07eb22d6715", "message": "Shade classgraph & naming.", "committedDate": "2020-02-10T19:41:29Z", "type": "commit"}, {"oid": "50b27c0e115f9a55296b8127e2867b2f424dfe28", "url": "https://github.com/hazelcast/hazelcast-jet/commit/50b27c0e115f9a55296b8127e2867b2f424dfe28", "message": "Add notice about usage of classgraph.", "committedDate": "2020-02-11T08:01:31Z", "type": "commit"}, {"oid": "89c3e615287329686681d16ebf16eb250e44430d", "url": "https://github.com/hazelcast/hazelcast-jet/commit/89c3e615287329686681d16ebf16eb250e44430d", "message": "Merge branch 'master' into job_classes\n\n# Conflicts:\n#\thazelcast-jet-core/pom.xml", "committedDate": "2020-02-24T08:27:08Z", "type": "commit"}, {"oid": "ca553b6bf3ec72944a5b80ef3cd7d831cf585145", "url": "https://github.com/hazelcast/hazelcast-jet/commit/ca553b6bf3ec72944a5b80ef3cd7d831cf585145", "message": "Merge branch 'master' into job_classes\n\n# Conflicts:\n# hazelcast-jet-core/pom.xml", "committedDate": "2020-02-24T08:43:56Z", "type": "commit"}, {"oid": "f613aaa1cad9c475118cdb39e8f2e888b47384ae", "url": "https://github.com/hazelcast/hazelcast-jet/commit/f613aaa1cad9c475118cdb39e8f2e888b47384ae", "message": "Merge branch 'master' into job_classes\n\n# Conflicts:\n# hazelcast-jet-core/pom.xml", "committedDate": "2020-02-24T09:13:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3NzgzNg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r383777836", "bodyText": "Do we really have to double-check a @Nonnull parameter?", "author": "mtopolnik", "createdAt": "2020-02-25T10:06:10Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "diffHunk": "@@ -238,11 +240,40 @@ public JobConfig setSnapshotIntervalMillis(long snapshotInterval) {\n     @Nonnull\n     @SuppressWarnings(\"rawtypes\")\n     public JobConfig addClass(@Nonnull Class... classes) {\n-        checkNotNull(classes, \"Classes can not be null\");\n-        for (Class<?> clazz : classes) {\n+        checkNotNull(classes, \"Classes cannot be null\");", "originalCommit": "f613aaa1cad9c475118cdb39e8f2e888b47384ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "849a0a32fc63828d91ed9a37a54830b5417fb860", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java\nindex 0a9ad1d18..a0a5448ba 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java\n\n@@ -240,7 +240,6 @@ public class JobConfig implements IdentifiedDataSerializable {\n     @Nonnull\n     @SuppressWarnings(\"rawtypes\")\n     public JobConfig addClass(@Nonnull Class... classes) {\n-        checkNotNull(classes, \"Classes cannot be null\");\n         ReflectionUtils.nestedClassesOf(classes).forEach(clazz -> {\n             ResourceConfig cfg = new ResourceConfig(clazz);\n             resourceConfigs.put(cfg.getId(), cfg);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4MzYzOA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r383783638", "bodyText": "The when_<PRECONDITION>_then_<POSTCONDITION> name pattern is more useful. This name could be when_nestedClassesOf_then_returnsAllNestedClasses.", "author": "mtopolnik", "createdAt": "2020-02-25T10:16:52Z", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/ReflectionUtilsTest.java", "diffHunk": "@@ -50,9 +63,49 @@ public void readStaticFieldOrNull_readFromPublicField() {\n         assertEquals(\"staticPublicFieldContent\", field);\n     }\n \n+    @Test\n+    public void shouldDiscoverAllNestedClasses() throws ClassNotFoundException {", "originalCommit": "f613aaa1cad9c475118cdb39e8f2e888b47384ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "849a0a32fc63828d91ed9a37a54830b5417fb860", "chunk": "diff --git a/hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/ReflectionUtilsTest.java b/hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/ReflectionUtilsTest.java\nindex e15441cbb..deae497fa 100644\n--- a/hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/ReflectionUtilsTest.java\n+++ b/hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/ReflectionUtilsTest.java\n\n@@ -64,7 +64,7 @@ public class ReflectionUtilsTest {\n     }\n \n     @Test\n-    public void shouldDiscoverAllNestedClasses() throws ClassNotFoundException {\n+    public void when_nestedClassesOf_then_returnsAllNestedClasses() throws ClassNotFoundException {\n         // When\n         Collection<Class<?>> classes = ReflectionUtils.nestedClassesOf(OuterClass.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4Mzg5NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r383783895", "bodyText": "This should assert that the nested class is also there.", "author": "mtopolnik", "createdAt": "2020-02-25T10:17:18Z", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/ReflectionUtilsTest.java", "diffHunk": "@@ -50,9 +63,49 @@ public void readStaticFieldOrNull_readFromPublicField() {\n         assertEquals(\"staticPublicFieldContent\", field);\n     }\n \n+    @Test\n+    public void shouldDiscoverAllNestedClasses() throws ClassNotFoundException {\n+        // When\n+        Collection<Class<?>> classes = ReflectionUtils.nestedClassesOf(OuterClass.class);\n+\n+        // Then\n+        assertThat(classes, hasSize(3));\n+        assertThat(classes, containsInAnyOrder(\n+                OuterClass.class,\n+                OuterClass.NestedClass.class,\n+                Class.forName(\"com.hazelcast.jet.impl.util.ReflectionUtilsTest$OuterClass$1\")\n+        ));\n+    }\n+\n+    @Test\n+    public void shouldDiscoverAllClassesAndResourcesInAPackage() {", "originalCommit": "f613aaa1cad9c475118cdb39e8f2e888b47384ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4ODkxNg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r383788916", "bodyText": "Then we would actually test whether JVM creates nested classes in the same package as the root class which is not really the goal here.", "author": "gierlachg", "createdAt": "2020-02-25T10:25:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4Mzg5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg1NDkxMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r383854910", "bodyText": "It definitely is in the same package, and if it's not included, then addPackages is broken, going back to the place we were before this PR.", "author": "mtopolnik", "createdAt": "2020-02-25T12:43:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4Mzg5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg1ODE2MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r383858161", "bodyText": "What I mean is - there are many more classes in this package, the nested class is just one of them, in the context of this test nested class is no different from the regular class, I guess to properly test it I should create a separate package with known classes in it and ensure all of them are listed, I was thinking about it but then didn't like the idea of creating yet another package... WDYT?", "author": "gierlachg", "createdAt": "2020-02-25T12:50:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4Mzg5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NjU0OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1932#discussion_r383876549", "bodyText": "My thinking was explicitly look for the nested classes that you already look for in addClass.", "author": "mtopolnik", "createdAt": "2020-02-25T13:27:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4Mzg5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "849a0a32fc63828d91ed9a37a54830b5417fb860", "chunk": "diff --git a/hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/ReflectionUtilsTest.java b/hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/ReflectionUtilsTest.java\nindex e15441cbb..deae497fa 100644\n--- a/hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/ReflectionUtilsTest.java\n+++ b/hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/util/ReflectionUtilsTest.java\n\n@@ -64,7 +64,7 @@ public class ReflectionUtilsTest {\n     }\n \n     @Test\n-    public void shouldDiscoverAllNestedClasses() throws ClassNotFoundException {\n+    public void when_nestedClassesOf_then_returnsAllNestedClasses() throws ClassNotFoundException {\n         // When\n         Collection<Class<?>> classes = ReflectionUtils.nestedClassesOf(OuterClass.class);\n \n"}}, {"oid": "849a0a32fc63828d91ed9a37a54830b5417fb860", "url": "https://github.com/hazelcast/hazelcast-jet/commit/849a0a32fc63828d91ed9a37a54830b5417fb860", "message": "Address review comments.", "committedDate": "2020-02-25T10:29:47Z", "type": "commit"}, {"oid": "a6d21f5327fdd36b5d8c63eb999defcc7552ba7f", "url": "https://github.com/hazelcast/hazelcast-jet/commit/a6d21f5327fdd36b5d8c63eb999defcc7552ba7f", "message": "Address review comments.", "committedDate": "2020-02-25T13:30:20Z", "type": "commit"}]}