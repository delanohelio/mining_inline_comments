{"pr_number": 2354, "pr_title": "Add retry logic to elastic client calls", "pr_createdAt": "2020-06-24T09:32:07Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2354", "timeline": [{"oid": "3819af684a094e1858deaafa9d9105b7f21d6cae", "url": "https://github.com/hazelcast/hazelcast-jet/commit/3819af684a094e1858deaafa9d9105b7f21d6cae", "message": "Add retry logic to elastic client calls\n\nElastic client tries to connect to a node only once for each request\n(meaning a call to the client here, not actuall HTTP request). When a\nrequest fails the node is marked dead and is not retried for the\nrequest.\n\nThis causes issues with single node cluster or small clusters where all\nnodes become unreacheble for short amount of time).\n\nFor different requests\n- the dead nodes are retried after 1 m.\n- when all nodes are marked dead one of the dead nodes is retried.", "committedDate": "2020-06-24T07:25:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU1NDA2Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2354#discussion_r445554063", "bodyText": "length of the lines are smaller than 72, but we use the this limit after *  so it is actually 80 :)", "author": "gurbuzali", "createdAt": "2020-06-25T13:23:23Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java", "diffHunk": "@@ -166,6 +169,27 @@\n         return this;\n     }\n \n+    /**", "originalCommit": "3819af684a094e1858deaafa9d9105b7f21d6cae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd21c3490fb740ee3a467881f2f16f2d4cbc97ba", "chunk": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 67e6bd9c5..a5feace97 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n\n@@ -170,22 +170,25 @@ public final class ElasticSinkBuilder<T> implements Serializable {\n     }\n \n     /**\n-     * Number of retries the connector will do in addition to Elastic\n-     * client retries\n+     * Number of retries the connector will do in addition to Elastic client\n+     * retries\n      *\n-     * Elastic client tries to connect to a node only once for each\n-     * request. When a request fails the node is marked dead and is\n-     * not retried again for the request. This causes problems with\n-     * single node clusters or in a situation where whole cluster\n-     * becomes unavailable at the same time (e.g. due to a network\n-     * issue).\n+     * Elastic client tries to connect to a node only once for each request.\n+     * When a request fails the node is marked dead and is not retried again\n+     * for the request. This causes problems with single node clusters or in a\n+     * situation where whole cluster becomes unavailable at the same time (e.g.\n+     * due to a network issue).\n      *\n-     * The initial delay is 2s, increasing by factor of 2 with each retry (4s, 8s, 16s, ..).\n+     * The initial delay is 2s, increasing by factor of 2 with each retry (4s,\n+     * 8s, 16s, ..).\n      *\n      * @param retries number of retries, defaults to 5\n      */\n     @Nonnull\n     public ElasticSinkBuilder<T> retries(int retries) {\n+        if (retries < 0) {\n+            throw new IllegalArgumentException(\"retries must be positive\");\n+        }\n         this.retries = retries;\n         return this;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU1NDM5OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2354#discussion_r445554398", "bodyText": "we can check for negative here", "author": "gurbuzali", "createdAt": "2020-06-25T13:23:51Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java", "diffHunk": "@@ -166,6 +169,27 @@\n         return this;\n     }\n \n+    /**\n+     * Number of retries the connector will do in addition to Elastic\n+     * client retries\n+     *\n+     * Elastic client tries to connect to a node only once for each\n+     * request. When a request fails the node is marked dead and is\n+     * not retried again for the request. This causes problems with\n+     * single node clusters or in a situation where whole cluster\n+     * becomes unavailable at the same time (e.g. due to a network\n+     * issue).\n+     *\n+     * The initial delay is 2s, increasing by factor of 2 with each retry (4s, 8s, 16s, ..).\n+     *\n+     * @param retries number of retries, defaults to 5\n+     */\n+    @Nonnull\n+    public ElasticSinkBuilder<T> retries(int retries) {\n+        this.retries = retries;", "originalCommit": "3819af684a094e1858deaafa9d9105b7f21d6cae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd21c3490fb740ee3a467881f2f16f2d4cbc97ba", "chunk": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\nindex 67e6bd9c5..a5feace97 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSinkBuilder.java\n\n@@ -170,22 +170,25 @@ public final class ElasticSinkBuilder<T> implements Serializable {\n     }\n \n     /**\n-     * Number of retries the connector will do in addition to Elastic\n-     * client retries\n+     * Number of retries the connector will do in addition to Elastic client\n+     * retries\n      *\n-     * Elastic client tries to connect to a node only once for each\n-     * request. When a request fails the node is marked dead and is\n-     * not retried again for the request. This causes problems with\n-     * single node clusters or in a situation where whole cluster\n-     * becomes unavailable at the same time (e.g. due to a network\n-     * issue).\n+     * Elastic client tries to connect to a node only once for each request.\n+     * When a request fails the node is marked dead and is not retried again\n+     * for the request. This causes problems with single node clusters or in a\n+     * situation where whole cluster becomes unavailable at the same time (e.g.\n+     * due to a network issue).\n      *\n-     * The initial delay is 2s, increasing by factor of 2 with each retry (4s, 8s, 16s, ..).\n+     * The initial delay is 2s, increasing by factor of 2 with each retry (4s,\n+     * 8s, 16s, ..).\n      *\n      * @param retries number of retries, defaults to 5\n      */\n     @Nonnull\n     public ElasticSinkBuilder<T> retries(int retries) {\n+        if (retries < 0) {\n+            throw new IllegalArgumentException(\"retries must be positive\");\n+        }\n         this.retries = retries;\n         return this;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU2NzkzNA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2354#discussion_r445567934", "bodyText": "check for negative", "author": "gurbuzali", "createdAt": "2020-06-25T13:42:55Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java", "diffHunk": "@@ -229,4 +231,24 @@\n         return this;\n     }\n \n+    /**\n+     * Number of retries the connector will do in addition to Elastic\n+     * client retries\n+     *\n+     * Elastic client tries to connect to a node only once for each\n+     * request. When a request fails the node is marked dead and is\n+     * not retried again for the request. This causes problems with\n+     * single node clusters or in a situation where whole cluster\n+     * becomes unavailable at the same time (e.g. due to a network\n+     * issue).\n+     *\n+     * The initial delay is 2s, increasing by factor of 2 with each retry (4s, 8s, 16s, ..).\n+     *\n+     * @param retries number of retries, defaults to 5\n+     */\n+    @Nonnull\n+    public ElasticSourceBuilder<T> retries(int retries) {\n+        this.retries = retries;", "originalCommit": "3819af684a094e1858deaafa9d9105b7f21d6cae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd21c3490fb740ee3a467881f2f16f2d4cbc97ba", "chunk": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\nindex 9805dbe0b..5e9372f5f 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/ElasticSourceBuilder.java\n\n@@ -248,6 +248,9 @@ public final class ElasticSourceBuilder<T> {\n      */\n     @Nonnull\n     public ElasticSourceBuilder<T> retries(int retries) {\n+        if (retries < 0) {\n+            throw new IllegalArgumentException(\"retries must be positive\");\n+        }\n         this.retries = retries;\n         return this;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3MjE4Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2354#discussion_r445572187", "bodyText": "we normally arrange parameters so that non-function parameters are at the beginning", "author": "gurbuzali", "createdAt": "2020-06-25T13:48:52Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/ElasticSourceConfiguration.java", "diffHunk": "@@ -45,21 +45,24 @@\n     private final boolean slicing;\n     private final boolean coLocatedReading;\n     private final String scrollKeepAlive;\n-\n-    public ElasticSourceConfiguration(SupplierEx<RestHighLevelClient> clientFn,\n-                                      SupplierEx<SearchRequest> searchRequestFn,\n-                                      FunctionEx<? super ActionRequest, RequestOptions> optionsFn,\n-                                      FunctionEx<? super SearchHit, T> mapToItemFn,\n-                                      boolean slicing, boolean coLocatedReading,\n-                                      String scrollKeepAlive) {\n-\n+    private final int retries;\n+\n+    public ElasticSourceConfiguration(\n+            SupplierEx<RestHighLevelClient> clientFn,", "originalCommit": "3819af684a094e1858deaafa9d9105b7f21d6cae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwMzMxNA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2354#discussion_r445603314", "bodyText": "This is sorted by required/more important first, less important last.", "author": "frant-hartm", "createdAt": "2020-06-25T14:31:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3MjE4Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3NjU4MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2354#discussion_r445576581", "bodyText": "how about naming this to executeWithRetry?\nyes it is longer and not so elegant but while reading the code when I see a retry I kind of think that previously a call made but failed and now I'm retrying it.\nanother point is to add a variant of this method which retries only for IOException. from what I gather we only check for IOException for now and this would simplify the code a bit.", "author": "gurbuzali", "createdAt": "2020-06-25T13:54:39Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/RetryUtils.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import com.hazelcast.core.HazelcastException;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.concurrent.Callable;\n+\n+import static com.hazelcast.jet.impl.util.ExceptionUtil.sneakyThrow;\n+\n+/**\n+ * Static utility class to retry operations related to connecting to AWS Services.\n+ */\n+public final class RetryUtils {\n+    static final long INITIAL_BACKOFF_MS = 2000L;\n+    static final long MAX_BACKOFF_MS = 5 * 60 * 1000L;\n+    static final double BACKOFF_MULTIPLIER = 2;\n+\n+    private static final ILogger LOGGER = Logger.getLogger(RetryUtils.class);\n+\n+    private static final long MS_IN_SECOND = 1000L;\n+\n+    private RetryUtils() {\n+    }\n+\n+    /**\n+     * Calls {@code callable.call()} until it does not throw an exception (but no more than {@code retries} times).\n+     * <p>\n+     * If {@code callable} throws an unchecked exception, it is wrapped into {@link HazelcastException}.\n+     */\n+    @SafeVarargs\n+    public static <T> T retry(Callable<T> callable, int retries, Class<? extends Exception> ... exceptions) {", "originalCommit": "3819af684a094e1858deaafa9d9105b7f21d6cae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd21c3490fb740ee3a467881f2f16f2d4cbc97ba", "chunk": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/RetryUtils.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/RetryUtils.java\nindex 4ae0cab89..bd2ddd335 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/RetryUtils.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/RetryUtils.java\n\n@@ -20,6 +20,7 @@ import com.hazelcast.core.HazelcastException;\n import com.hazelcast.logging.ILogger;\n import com.hazelcast.logging.Logger;\n \n+import java.io.IOException;\n import java.util.concurrent.Callable;\n \n import static com.hazelcast.jet.impl.util.ExceptionUtil.sneakyThrow;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4MDQzOA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2354#discussion_r445580438", "bodyText": "how about calculating the backoff time with Math.min(MAX_BACKOFF_MS, 2<<retryCount) ?", "author": "gurbuzali", "createdAt": "2020-06-25T13:59:44Z", "path": "extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/RetryUtils.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Hazelcast Inc.\n+ *\n+ * Licensed under the Hazelcast Community License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://hazelcast.com/hazelcast-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.elastic.impl;\n+\n+import com.hazelcast.core.HazelcastException;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+import java.util.concurrent.Callable;\n+\n+import static com.hazelcast.jet.impl.util.ExceptionUtil.sneakyThrow;\n+\n+/**\n+ * Static utility class to retry operations related to connecting to AWS Services.\n+ */\n+public final class RetryUtils {\n+    static final long INITIAL_BACKOFF_MS = 2000L;\n+    static final long MAX_BACKOFF_MS = 5 * 60 * 1000L;\n+    static final double BACKOFF_MULTIPLIER = 2;\n+\n+    private static final ILogger LOGGER = Logger.getLogger(RetryUtils.class);\n+\n+    private static final long MS_IN_SECOND = 1000L;\n+\n+    private RetryUtils() {\n+    }\n+\n+    /**\n+     * Calls {@code callable.call()} until it does not throw an exception (but no more than {@code retries} times).\n+     * <p>\n+     * If {@code callable} throws an unchecked exception, it is wrapped into {@link HazelcastException}.\n+     */\n+    @SafeVarargs\n+    public static <T> T retry(Callable<T> callable, int retries, Class<? extends Exception> ... exceptions) {\n+        int retryCount = 0;\n+        while (true) {\n+            try {\n+                return callable.call();\n+            } catch (Exception e) {\n+                if (anyOf(e, exceptions)) {\n+                    retryCount++;\n+                    if (retryCount > retries) {\n+                        throw sneakyThrow(e);\n+                    }\n+                    long waitIntervalMs = backoffIntervalForRetry(retryCount);\n+                    LOGGER.fine(String.format(\"Couldn't connect to Elastic, [%s] retrying in %s seconds...\", retryCount,\n+                            waitIntervalMs / MS_IN_SECOND));\n+                    sleep(waitIntervalMs);\n+                } else {\n+                    throw sneakyThrow(e);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static boolean anyOf(Exception e, Class<? extends Exception>[] exceptions) {\n+        for (Class<? extends Exception> exception : exceptions) {\n+            if (exception.isAssignableFrom(e.getClass())) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static long backoffIntervalForRetry(int retryCount) {\n+        long result = INITIAL_BACKOFF_MS;", "originalCommit": "3819af684a094e1858deaafa9d9105b7f21d6cae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd21c3490fb740ee3a467881f2f16f2d4cbc97ba", "chunk": "diff --git a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/RetryUtils.java b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/RetryUtils.java\nindex 4ae0cab89..bd2ddd335 100644\n--- a/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/RetryUtils.java\n+++ b/extensions/elasticsearch/elasticsearch-7/src/main/java/com/hazelcast/jet/elastic/impl/RetryUtils.java\n\n@@ -20,6 +20,7 @@ import com.hazelcast.core.HazelcastException;\n import com.hazelcast.logging.ILogger;\n import com.hazelcast.logging.Logger;\n \n+import java.io.IOException;\n import java.util.concurrent.Callable;\n \n import static com.hazelcast.jet.impl.util.ExceptionUtil.sneakyThrow;\n"}}, {"oid": "bd21c3490fb740ee3a467881f2f16f2d4cbc97ba", "url": "https://github.com/hazelcast/hazelcast-jet/commit/bd21c3490fb740ee3a467881f2f16f2d4cbc97ba", "message": "Address review", "committedDate": "2020-06-25T19:04:44Z", "type": "commit"}, {"oid": "72d859c0ac2a8bb6bf42637bd6f4ae996e7001da", "url": "https://github.com/hazelcast/hazelcast-jet/commit/72d859c0ac2a8bb6bf42637bd6f4ae996e7001da", "message": "Backport to elastic 6", "committedDate": "2020-06-25T21:43:07Z", "type": "commit"}, {"oid": "841af1f70e8494d4e257c9b190214ca2256a3c4b", "url": "https://github.com/hazelcast/hazelcast-jet/commit/841af1f70e8494d4e257c9b190214ca2256a3c4b", "message": "Backport to elastic 5", "committedDate": "2020-06-25T21:45:03Z", "type": "commit"}]}