{"pr_number": 2082, "pr_title": "Enable job-level serializer for IMDG Lists", "pr_createdAt": "2020-03-20T13:27:16Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2082", "timeline": [{"oid": "00604d6435d3131f529666c69ee372dffa77b17f", "url": "https://github.com/hazelcast/hazelcast-jet/commit/00604d6435d3131f529666c69ee372dffa77b17f", "message": "Enable job-level serializer for IMDG Lists", "committedDate": "2020-03-20T13:26:15Z", "type": "commit"}, {"oid": "0b01d57a7cff488f762869a72bb5adcd1372f6b7", "url": "https://github.com/hazelcast/hazelcast-jet/commit/0b01d57a7cff488f762869a72bb5adcd1372f6b7", "message": "Merge branch 'master' into job_list\n\n# Conflicts:\n#\thazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/HazelcastWriters.java\n#\thazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/WriteMapP.java\n#\thazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/WriteObservableP.java", "committedDate": "2020-03-24T10:19:41Z", "type": "commit"}, {"oid": "4d037632636d7efc87fe039f4974e2325f89ff43", "url": "https://github.com/hazelcast/hazelcast-jet/commit/4d037632636d7efc87fe039f4974e2325f89ff43", "message": "Merge branch 'master' into job_list", "committedDate": "2020-03-25T07:19:26Z", "type": "commit"}, {"oid": "fd76257672d9d20da89c50268e87ec15f6d3d368", "url": "https://github.com/hazelcast/hazelcast-jet/commit/fd76257672d9d20da89c50268e87ec15f6d3d368", "message": "Add tests", "committedDate": "2020-03-25T07:41:46Z", "type": "commit"}, {"oid": "d338e886f3f9208dc8372b713fb4102350d9a931", "url": "https://github.com/hazelcast/hazelcast-jet/commit/d338e886f3f9208dc8372b713fb4102350d9a931", "message": "Merge branch 'master' into job_list", "committedDate": "2020-03-26T14:16:01Z", "type": "commit"}, {"oid": "79487b009f7e9679cee1f5d7b5ce4617a316a8ab", "url": "https://github.com/hazelcast/hazelcast-jet/commit/79487b009f7e9679cee1f5d7b5ce4617a316a8ab", "message": "Formatting", "committedDate": "2020-03-26T14:53:01Z", "type": "commit"}, {"oid": "834ef529e5865963ef3e835defb7faef1eced5bd", "url": "https://github.com/hazelcast/hazelcast-jet/commit/834ef529e5865963ef3e835defb7faef1eced5bd", "message": "Fix tests", "committedDate": "2020-03-26T15:54:45Z", "type": "commit"}, {"oid": "78719f6e0b306a44d6e0c15e310ff933b37f9304", "url": "https://github.com/hazelcast/hazelcast-jet/commit/78719f6e0b306a44d6e0c15e310ff933b37f9304", "message": "Fix checkstyle", "committedDate": "2020-03-26T17:20:52Z", "type": "commit"}, {"oid": "f473b2a1d9d47ca32f7fd9be887a960c1397c996", "url": "https://github.com/hazelcast/hazelcast-jet/commit/f473b2a1d9d47ca32f7fd9be887a960c1397c996", "message": "Javadoc", "committedDate": "2020-03-26T17:22:03Z", "type": "commit"}, {"oid": "0a07420aba42d0fcdad11b9149d15a252d05ff2e", "url": "https://github.com/hazelcast/hazelcast-jet/commit/0a07420aba42d0fcdad11b9149d15a252d05ff2e", "message": "Fix test", "committedDate": "2020-03-26T17:53:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1MDQ4MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2082#discussion_r400150481", "bodyText": "did we really need both data iterator and sublist here? seems unnecessary. you can just get sublist(0, size) when size <= FETCH_SIZE", "author": "cangencer", "createdAt": "2020-03-30T12:26:35Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/ReadIListP.java", "diffHunk": "@@ -52,18 +64,40 @@ public boolean isCooperative() {\n     @Override\n     protected void init(@Nonnull Context context) {\n         HazelcastInstance instance;\n+        SerializationService serializationService;\n         if (isRemote()) {\n             instance = client = newHazelcastClient(asClientConfig(clientXml));\n+            serializationService = ((HazelcastClientProxy) instance).getSerializationService();\n         } else {\n             instance = context.jetInstance().getHazelcastInstance();\n+            serializationService = ((ProcCtx) context).serializationService();\n         }\n-        IList<Object> list = instance.getList(name);\n-        final int size = list.size();\n-        traverser = size <= FETCH_SIZE ?\n-                traverseIterable(list)\n-                :\n+        traverser = createTraverser(instance, name).map(serializationService::toObject);\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private Traverser<Data> createTraverser(HazelcastInstance instance, String name) {\n+        IList<Data> list = instance.getList(name);\n+        int size = list.size();\n+\n+        if (list instanceof ClientListProxy) {\n+            ClientListProxy proxy = (ClientListProxy) list;\n+            return createTraverser(size, proxy::dataIterator, proxy::dataSubList);\n+        } else if (list instanceof ListProxyImpl) {\n+            ListProxyImpl proxy = (ListProxyImpl) list;\n+            return createTraverser(size, proxy::dataIterator, proxy::dataSubList);\n+        } else {\n+            throw new RuntimeException(\"Unexpected list class: \" + list.getClass().getName());\n+        }\n+    }\n+\n+    private Traverser<Data> createTraverser(int size,\n+                                            Supplier<Iterator<Data>> iteratorSupplier,\n+                                            BiFunction<Integer, Integer, List<Data>> subListSupplier) {\n+        return size <= FETCH_SIZE ?", "originalCommit": "0a07420aba42d0fcdad11b9149d15a252d05ff2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1NTQwMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2082#discussion_r400155400", "bodyText": "I wanted to keep the existing behavior but maybe it could be simplified indeed.... \ud83e\udd14", "author": "gierlachg", "createdAt": "2020-03-30T12:34:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1MDQ4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "03f94ddc81ecdd8de379ebae1d70800e064512b7", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/ReadIListP.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/ReadIListP.java\nindex 745e263946..8f3049a894 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/ReadIListP.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/ReadIListP.java\n\n@@ -82,20 +79,19 @@ public final class ReadIListP extends AbstractProcessor {\n \n         if (list instanceof ClientListProxy) {\n             ClientListProxy proxy = (ClientListProxy) list;\n-            return createTraverser(size, proxy::dataIterator, proxy::dataSubList);\n+            return createTraverser(size, proxy::dataSubList);\n         } else if (list instanceof ListProxyImpl) {\n             ListProxyImpl proxy = (ListProxyImpl) list;\n-            return createTraverser(size, proxy::dataIterator, proxy::dataSubList);\n+            return createTraverser(size, proxy::dataSubList);\n         } else {\n             throw new RuntimeException(\"Unexpected list class: \" + list.getClass().getName());\n         }\n     }\n \n     private Traverser<Data> createTraverser(int size,\n-                                            Supplier<Iterator<Data>> iteratorSupplier,\n                                             BiFunction<Integer, Integer, List<Data>> subListSupplier) {\n         return size <= FETCH_SIZE ?\n-                traverseIterator(iteratorSupplier.get()) :\n+                traverseIterable(subListSupplier.apply(0, size)) :\n                 traverseStream(rangeClosed(0, size / FETCH_SIZE).mapToObj(chunkIndex -> chunkIndex * FETCH_SIZE))\n                         .flatMap(start -> traverseIterable(subListSupplier.apply(start, min(start + FETCH_SIZE, size))));\n     }\n"}}, {"oid": "03f94ddc81ecdd8de379ebae1d70800e064512b7", "url": "https://github.com/hazelcast/hazelcast-jet/commit/03f94ddc81ecdd8de379ebae1d70800e064512b7", "message": "Simplify ReadListP", "committedDate": "2020-03-30T12:41:10Z", "type": "commit"}]}