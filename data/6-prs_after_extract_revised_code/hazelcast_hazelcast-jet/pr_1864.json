{"pr_number": 1864, "pr_title": "Don't call Processor.close on cooperative thread", "pr_createdAt": "2020-01-20T16:46:17Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/1864", "timeline": [{"oid": "63f81f62120539ab53bd1d0f67f8934bb0dbc626", "url": "https://github.com/hazelcast/hazelcast-jet/commit/63f81f62120539ab53bd1d0f67f8934bb0dbc626", "message": "Don't call Processor.close on cooperative thread\n\nFixes #1793", "committedDate": "2020-01-20T16:45:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY2Mzk3MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1864#discussion_r368663971", "bodyText": "I wonder if this will slow down job completion, since most processors will have a noop close implementation?", "author": "cangencer", "createdAt": "2020-01-20T17:35:03Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ProcessorTasklet.java", "diffHunk": "@@ -343,11 +344,29 @@ private void stateMachineStep() {\n             case EMIT_DONE_ITEM:\n                 if (outbox.offerToEdgesAndSnapshot(DONE_ITEM)) {\n                     ssContext.processorTaskletDone();\n-                    state = END;\n-                    progTracker.done();\n+                    progTracker.madeProgress();\n+                    state = CLOSE;\n+                    stateMachineStep();\n                 }\n                 return;\n \n+            case CLOSE:\n+                if (isCooperative()) {\n+                    if (closeFuture == null) {\n+                        closeFuture = executionService.submit(this::closeProcessor);", "originalCommit": "63f81f62120539ab53bd1d0f67f8934bb0dbc626", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg1OTE2Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1864#discussion_r368859163", "bodyText": "Maybe we can have a no-op constant that we recognize and short-circuit this?", "author": "mtopolnik", "createdAt": "2020-01-21T08:16:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY2Mzk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzOTExMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1864#discussion_r369039110", "bodyText": "@cangencer Using JMH submitting 100 no-op tasks to ForkJoinPool.commonPool and waiting for their completion by checking future.isDone takes on average 300\u03bcs. So it's not that much pain.\n@mtopolnik It's not a lambda, but a method we call. We can check if the declaringClass of close method is the Processor class:\nif (p.getClass().getMethod(\"close\").getDeclaringClass() == Processor.class)\n    // ignore the close method\nI benchmarked this too. This check took 1.3\u03bcs, while directly executing a no-op runnable took 1.7\u03bcs. I think it's not worth the complexity, we're not on a hot path.", "author": "viliam-durina", "createdAt": "2020-01-21T14:40:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY2Mzk3MQ=="}], "type": "inlineReview", "revised_code": null}]}