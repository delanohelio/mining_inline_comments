{"pr_number": 2096, "pr_title": "Add cooperative warning to mapUsingService", "pr_createdAt": "2020-03-25T17:26:38Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2096", "timeline": [{"oid": "62c1c7f5eba7467a78d2496c0e4b844c218dc001", "url": "https://github.com/hazelcast/hazelcast-jet/commit/62c1c7f5eba7467a78d2496c0e4b844c218dc001", "message": "Add cooperative warning to mapUsingService", "committedDate": "2020-03-25T17:24:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM5NTE4MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2096#discussion_r398395180", "bodyText": "I think it would be good to point to Processor.isCooperative() javadoc. The cooperative contract is explained there in more detail.", "author": "viliam-durina", "createdAt": "2020-03-26T08:35:07Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java", "diffHunk": "@@ -98,6 +98,17 @@ private ServiceFactories() { }\n      * A variant of {@link #sharedService(FunctionEx, ConsumerEx)\n      * sharedService(createFn, destroyFn)} with a no-op {@code\n      * destroyFn}.\n+     * <p>\n+     * <strong>Note:</strong> if your service has a blocking API (e.g., doing\n+     * synchronous IO or acquiring locks), you must call {@link\n+     * ServiceFactory#toNonCooperative()} as a hint to the Jet execution engine\n+     * to start a dedicated thread for those calls. Failing to do this can\n+     * cause severe performance problems. You should also carefully consider\n+     * how much local parallelism you need for this step since each parallel\n+     * tasklet needs its own thread. Call {@code GeneralStage#setLocalParallelism\n+     * stage.setLocalParallelism()} to set an explicit level, otherwise it will\n+     * depend on the number of cores on the Jet machine, which makes no sense\n+     * for blocking code.", "originalCommit": "62c1c7f5eba7467a78d2496c0e4b844c218dc001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyMjE1NA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2096#discussion_r398422154", "bodyText": "ServiceFactory#toNonCooperative leads to there already.", "author": "mtopolnik", "createdAt": "2020-03-26T09:20:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM5NTE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "9c9d6d73614f844f40e840599a920efd4a70cfcd", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java\nindex 058404c3bc..6535830967 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java\n\n@@ -105,7 +105,7 @@ public final class ServiceFactories {\n      * to start a dedicated thread for those calls. Failing to do this can\n      * cause severe performance problems. You should also carefully consider\n      * how much local parallelism you need for this step since each parallel\n-     * tasklet needs its own thread. Call {@code GeneralStage#setLocalParallelism\n+     * tasklet needs its own thread. Call {@link GeneralStage#setLocalParallelism\n      * stage.setLocalParallelism()} to set an explicit level, otherwise it will\n      * depend on the number of cores on the Jet machine, which makes no sense\n      * for blocking code.\n"}}, {"oid": "9c9d6d73614f844f40e840599a920efd4a70cfcd", "url": "https://github.com/hazelcast/hazelcast-jet/commit/9c9d6d73614f844f40e840599a920efd4a70cfcd", "message": "Fix {@code } -> {@link }", "committedDate": "2020-03-26T09:32:40Z", "type": "commit"}]}