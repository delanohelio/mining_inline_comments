{"pr_number": 1917, "pr_title": "Python Code Sample and Reference Manual, Plus Some Improvements", "pr_createdAt": "2020-01-31T16:17:34Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/1917", "timeline": [{"oid": "f4aa9ce606db5cb0660cd4b0a097f0662fa26a0f", "url": "https://github.com/hazelcast/hazelcast-jet/commit/f4aa9ce606db5cb0660cd4b0a097f0662fa26a0f", "message": "Default Python function name + more Javadoc", "committedDate": "2020-02-03T11:45:15Z", "type": "forcePushed"}, {"oid": "68787035fcc4b1b1e374b08c547715ea547e7d0b", "url": "https://github.com/hazelcast/hazelcast-jet/commit/68787035fcc4b1b1e374b08c547715ea547e7d0b", "message": "Default Python function name + more Javadoc", "committedDate": "2020-02-03T11:46:49Z", "type": "forcePushed"}, {"oid": "c893ceddef670e5ad816fa3570a7e02c802d12e6", "url": "https://github.com/hazelcast/hazelcast-jet/commit/c893ceddef670e5ad816fa3570a7e02c802d12e6", "message": "Python code sample", "committedDate": "2020-02-03T14:40:00Z", "type": "forcePushed"}, {"oid": "fdd4265c1d426239938d07458140fb8d978ea3f9", "url": "https://github.com/hazelcast/hazelcast-jet/commit/fdd4265c1d426239938d07458140fb8d978ea3f9", "message": "Add Reference Manual content", "committedDate": "2020-02-04T15:00:41Z", "type": "forcePushed"}, {"oid": "80165e87ff924db9355f04e5a6c2fb2da1efa72a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/80165e87ff924db9355f04e5a6c2fb2da1efa72a", "message": "Add Reference Manual content", "committedDate": "2020-02-05T13:26:33Z", "type": "forcePushed"}, {"oid": "01052136c9b259683c3076deccc61a83c5350273", "url": "https://github.com/hazelcast/hazelcast-jet/commit/01052136c9b259683c3076deccc61a83c5350273", "message": "Nicer logger name for Python related messages", "committedDate": "2020-02-05T16:42:58Z", "type": "commit"}, {"oid": "931615c02c1eb0d979c1a7c8658627485f8faad4", "url": "https://github.com/hazelcast/hazelcast-jet/commit/931615c02c1eb0d979c1a7c8658627485f8faad4", "message": "Check handler file for readability", "committedDate": "2020-02-05T16:42:58Z", "type": "commit"}, {"oid": "46e82af681585a09c7422afe59570f4ee481d473", "url": "https://github.com/hazelcast/hazelcast-jet/commit/46e82af681585a09c7422afe59570f4ee481d473", "message": "Fix newJobIfAbsent, it didn't attach files", "committedDate": "2020-02-05T16:42:58Z", "type": "commit"}, {"oid": "52856ca535d690bd913f6898c318867d2f4c6e04", "url": "https://github.com/hazelcast/hazelcast-jet/commit/52856ca535d690bd913f6898c318867d2f4c6e04", "message": "More robustness in PythonService", "committedDate": "2020-02-05T16:42:58Z", "type": "commit"}, {"oid": "dc197442a26a4aab30a38928c776f375fdc99b9e", "url": "https://github.com/hazelcast/hazelcast-jet/commit/dc197442a26a4aab30a38928c776f375fdc99b9e", "message": "Default Python function name + more Javadoc", "committedDate": "2020-02-05T16:42:58Z", "type": "commit"}, {"oid": "5ed81aedf6e0eeebb4a4f79ef3b65da315c79aa0", "url": "https://github.com/hazelcast/hazelcast-jet/commit/5ed81aedf6e0eeebb4a4f79ef3b65da315c79aa0", "message": "Python code sample", "committedDate": "2020-02-05T16:43:45Z", "type": "commit"}, {"oid": "f81968012762b65cd0c2c965e1552d12baa81c28", "url": "https://github.com/hazelcast/hazelcast-jet/commit/f81968012762b65cd0c2c965e1552d12baa81c28", "message": "Add Reference Manual content", "committedDate": "2020-02-05T16:43:45Z", "type": "commit"}, {"oid": "f81968012762b65cd0c2c965e1552d12baa81c28", "url": "https://github.com/hazelcast/hazelcast-jet/commit/f81968012762b65cd0c2c965e1552d12baa81c28", "message": "Add Reference Manual content", "committedDate": "2020-02-05T16:43:45Z", "type": "forcePushed"}, {"oid": "fc482affbd883efc685f05bd87d9f691a8d76a5d", "url": "https://github.com/hazelcast/hazelcast-jet/commit/fc482affbd883efc685f05bd87d9f691a8d76a5d", "message": "Merge remote-tracking branch 'upstream/master' into python-improve", "committedDate": "2020-02-06T07:56:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY4NTcxNQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1917#discussion_r375685715", "bodyText": "I think we should say what the pipeline does, rather than just \"process data\". It's better to lead by describing the actual processing that is done", "author": "cangencer", "createdAt": "2020-02-06T08:02:30Z", "path": "examples/python/src/main/java/com/hazelcast/jet/examples/python/Python.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.python;\n+\n+import com.hazelcast.internal.nio.IOUtil;\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Observable;\n+import com.hazelcast.jet.config.JobConfig;\n+import com.hazelcast.jet.function.Observer;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.test.TestSources;\n+import com.hazelcast.jet.python.PythonServiceConfig;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Objects;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Stream;\n+\n+import static com.hazelcast.jet.impl.util.Util.uncheckRun;\n+import static com.hazelcast.jet.python.PythonTransforms.mapUsingPython;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * This example shows you how to invoke a Python function to process the", "originalCommit": "f81968012762b65cd0c2c965e1552d12baa81c28", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c73191f188d2c21b4f939b935d9c35414420a6d9", "chunk": "diff --git a/examples/python/src/main/java/com/hazelcast/jet/examples/python/Python.java b/examples/python/src/main/java/com/hazelcast/jet/examples/python/Python.java\nindex 79c5a0fc8..f4ce502d8 100644\n--- a/examples/python/src/main/java/com/hazelcast/jet/examples/python/Python.java\n+++ b/examples/python/src/main/java/com/hazelcast/jet/examples/python/Python.java\n\n@@ -21,7 +21,6 @@ import com.hazelcast.jet.Jet;\n import com.hazelcast.jet.JetInstance;\n import com.hazelcast.jet.Observable;\n import com.hazelcast.jet.config.JobConfig;\n-import com.hazelcast.jet.function.Observer;\n import com.hazelcast.jet.pipeline.Pipeline;\n import com.hazelcast.jet.pipeline.Sinks;\n import com.hazelcast.jet.pipeline.test.TestSources;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY4NTk0MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1917#discussion_r375685940", "bodyText": "This seem rather like boilerplate and a lot of code.. could we move it somewhere else perhaps? as a util method on Python?", "author": "cangencer", "createdAt": "2020-02-06T08:03:10Z", "path": "examples/python/src/main/java/com/hazelcast/jet/examples/python/Python.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.python;\n+\n+import com.hazelcast.internal.nio.IOUtil;\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Observable;\n+import com.hazelcast.jet.config.JobConfig;\n+import com.hazelcast.jet.function.Observer;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.test.TestSources;\n+import com.hazelcast.jet.python.PythonServiceConfig;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Objects;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Stream;\n+\n+import static com.hazelcast.jet.impl.util.Util.uncheckRun;\n+import static com.hazelcast.jet.python.PythonTransforms.mapUsingPython;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * This example shows you how to invoke a Python function to process the\n+ * data in the Jet pipeline. The function gets a batch of items in a list\n+ * and must return a list of result items.\n+ * <p>\n+ * The provided code uses {@code src/main/resources/python} in this project\n+ * as the Python project directory. There are two files there:\n+ * {@code requirements.txt} that declares NumPy as a dependency and\n+ * {@code take_sqrt.py} that defines the {@code transform_list} function\n+ * that Jet will call with the pipeline data. The function uses uses the\n+ * NumPy library to transform the input list by taking the square root of\n+ * each element.\n+ */\n+public class Python {\n+\n+    private static final String RESULTS = \"python_results\";\n+\n+    private static Pipeline buildPipeline(String baseDir) {\n+        Pipeline p = Pipeline.create();\n+        p.readFrom(TestSources.itemStream(10, (ts, seq) -> bigRandomNumberAsString()))\n+         .withoutTimestamps()\n+         .apply(mapUsingPython(new PythonServiceConfig()\n+                 .setBaseDir(baseDir)\n+                 .setHandlerModule(\"take_sqrt\")))\n+         .setLocalParallelism(1) // controls how many Python processes will be used\n+         .writeTo(Sinks.observable(RESULTS));\n+        return p;\n+    }\n+\n+    private static String bigRandomNumberAsString() {\n+        ThreadLocalRandom rnd = ThreadLocalRandom.current();\n+        return \"\" + rnd.nextLong(Long.MAX_VALUE) + rnd.nextLong(Long.MAX_VALUE)\n+                + rnd.nextLong(Long.MAX_VALUE) + rnd.nextLong(Long.MAX_VALUE);\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        Path baseDir = Files.createTempDirectory(\"jet-python-sample-\");\n+        copyClasspathResourcesToDirectory(\"python\", baseDir);\n+        Pipeline p = buildPipeline(baseDir.toString());\n+\n+        JetInstance jet = Jet.bootstrappedInstance();\n+        try {\n+            Observable<String> observable = jet.getObservable(RESULTS);\n+            observable.addObserver(Observer.of(System.out::println));\n+            JobConfig config = new JobConfig().setName(\"python-mapping\");\n+            jet.newJobIfAbsent(p, config).join();\n+        } finally {\n+            IOUtil.delete(baseDir);\n+            Jet.shutdownAll();\n+        }\n+    }\n+\n+    private static void copyClasspathResourcesToDirectory(String sourcePath, Path destPath) throws IOException {", "originalCommit": "f81968012762b65cd0c2c965e1552d12baa81c28", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c73191f188d2c21b4f939b935d9c35414420a6d9", "chunk": "diff --git a/examples/python/src/main/java/com/hazelcast/jet/examples/python/Python.java b/examples/python/src/main/java/com/hazelcast/jet/examples/python/Python.java\nindex 79c5a0fc8..f4ce502d8 100644\n--- a/examples/python/src/main/java/com/hazelcast/jet/examples/python/Python.java\n+++ b/examples/python/src/main/java/com/hazelcast/jet/examples/python/Python.java\n\n@@ -21,7 +21,6 @@ import com.hazelcast.jet.Jet;\n import com.hazelcast.jet.JetInstance;\n import com.hazelcast.jet.Observable;\n import com.hazelcast.jet.config.JobConfig;\n-import com.hazelcast.jet.function.Observer;\n import com.hazelcast.jet.pipeline.Pipeline;\n import com.hazelcast.jet.pipeline.Sinks;\n import com.hazelcast.jet.pipeline.test.TestSources;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY4NzkxNw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1917#discussion_r375687917", "bodyText": "this one is missing a test", "author": "cangencer", "createdAt": "2020-02-06T08:08:53Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/config/JobConfig.java", "diffHunk": "@@ -688,6 +689,32 @@ public JobConfig attachDirectory(@Nonnull File file, @Nonnull String id) {\n         return attachDirectory(fileToUrl(file), id);\n     }\n \n+    /**\n+     * Attaches all the files/directories in the supplied map, as if by calling\n+     * {@link #attachDirectory(File, String) attachDirectory(dir, id)} for every\n+     * entry that resolves to a directory and {@link #attachFile(File, String)\n+     * attachFile(file, id)} for every entry that resolves to a regular file.\n+     *\n+     * @return {@code this} instance for fluent API\n+     */\n+    @Nonnull\n+    public JobConfig attachAll(@Nonnull Map<String, File> idToFile) {", "originalCommit": "f81968012762b65cd0c2c965e1552d12baa81c28", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "c73191f188d2c21b4f939b935d9c35414420a6d9", "url": "https://github.com/hazelcast/hazelcast-jet/commit/c73191f188d2c21b4f939b935d9c35414420a6d9", "message": "Minor tweaks", "committedDate": "2020-02-06T08:20:14Z", "type": "commit"}, {"oid": "fd3abf5035519c034dffb09ddf7620fdb17e953a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/fd3abf5035519c034dffb09ddf7620fdb17e953a", "message": "Address review", "committedDate": "2020-02-06T10:15:38Z", "type": "commit"}, {"oid": "fd3abf5035519c034dffb09ddf7620fdb17e953a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/fd3abf5035519c034dffb09ddf7620fdb17e953a", "message": "Address review", "committedDate": "2020-02-06T10:15:38Z", "type": "forcePushed"}, {"oid": "1e3aac12493def3e4e020474ddbdd7dcd0a3d4f4", "url": "https://github.com/hazelcast/hazelcast-jet/commit/1e3aac12493def3e4e020474ddbdd7dcd0a3d4f4", "message": "Test and fix materializeClasspathDirectory", "committedDate": "2020-02-06T13:35:51Z", "type": "forcePushed"}, {"oid": "4282279201379874fd6d0c96e27d2c005f453104", "url": "https://github.com/hazelcast/hazelcast-jet/commit/4282279201379874fd6d0c96e27d2c005f453104", "message": "Test and fix materializeClasspathDirectory", "committedDate": "2020-02-06T13:43:43Z", "type": "commit"}, {"oid": "4282279201379874fd6d0c96e27d2c005f453104", "url": "https://github.com/hazelcast/hazelcast-jet/commit/4282279201379874fd6d0c96e27d2c005f453104", "message": "Test and fix materializeClasspathDirectory", "committedDate": "2020-02-06T13:43:43Z", "type": "forcePushed"}, {"oid": "feebc43f26dd3762b7edf326972074bfa22c315a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/feebc43f26dd3762b7edf326972074bfa22c315a", "message": "Rename materializeClasspathToDirectory", "committedDate": "2020-02-06T14:16:28Z", "type": "commit"}]}