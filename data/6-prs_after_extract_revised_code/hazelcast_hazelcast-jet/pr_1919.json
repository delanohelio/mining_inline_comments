{"pr_number": 1919, "pr_title": "Service async cleanup", "pr_createdAt": "2020-01-31T17:14:58Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/1919", "timeline": [{"oid": "b678338e6314a276c8bb49596bea655a0d79d791", "url": "https://github.com/hazelcast/hazelcast-jet/commit/b678338e6314a276c8bb49596bea655a0d79d791", "message": "Remove filterUsingServiceAsync", "committedDate": "2020-01-31T11:27:56Z", "type": "commit"}, {"oid": "76f8c034fc90d2e4e152ec6d491b8b6da6e4038a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/76f8c034fc90d2e4e152ec6d491b8b6da6e4038a", "message": "Remove flatMapUsingServiceAsync", "committedDate": "2020-01-31T17:10:09Z", "type": "commit"}, {"oid": "b6841b641f93ec352814411e83b220b344edb828", "url": "https://github.com/hazelcast/hazelcast-jet/commit/b6841b641f93ec352814411e83b220b344edb828", "message": "Move maxAsyncOperations out of ServiceFactory", "committedDate": "2020-01-31T17:10:09Z", "type": "commit"}, {"oid": "e35228b55ee849343b3b1e48d3e7208552403f5b", "url": "https://github.com/hazelcast/hazelcast-jet/commit/e35228b55ee849343b3b1e48d3e7208552403f5b", "message": "Move orderedAsyncResponses out of ServiceFactory", "committedDate": "2020-02-03T09:26:26Z", "type": "commit"}, {"oid": "2c0498169e5ffbf0c2293adc23dbaf3378c7fc81", "url": "https://github.com/hazelcast/hazelcast-jet/commit/2c0498169e5ffbf0c2293adc23dbaf3378c7fc81", "message": "Hardcode maxAsyncOps for mapUsingServiceAsyncBatched", "committedDate": "2020-02-03T09:32:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwNzA0OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1919#discussion_r374007048", "bodyText": "how about preserveOrder ?", "author": "cangencer", "createdAt": "2020-02-03T09:50:49Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java", "diffHunk": "@@ -901,11 +902,16 @@ private Processors() {\n     @Nonnull\n     public static <C, S, T, K, R> ProcessorSupplier mapUsingServiceAsyncP(\n             @Nonnull ServiceFactory<C, S> serviceFactory,\n+            int maxAsyncOps,\n+            boolean orderedAsyncResponses,", "originalCommit": "2c0498169e5ffbf0c2293adc23dbaf3378c7fc81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dd75ed69ba8e24f27b4a9085f295421ee56e1004", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java\nindex 852c7d92e..c7cd45232 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java\n\n@@ -902,16 +902,18 @@ public final class Processors {\n     @Nonnull\n     public static <C, S, T, K, R> ProcessorSupplier mapUsingServiceAsyncP(\n             @Nonnull ServiceFactory<C, S> serviceFactory,\n-            int maxAsyncOps,\n-            boolean orderedAsyncResponses,\n+            int maxConcurrentOps,\n+            boolean preserveOrder,\n             @Nonnull FunctionEx<T, K> extractKeyFn,\n             @Nonnull BiFunctionEx<? super S, ? super T, CompletableFuture<R>> mapAsyncFn\n     ) {\n         BiFunctionEx<S, T, CompletableFuture<Traverser<R>>> flatMapAsyncFn = (s, t) ->\n                 mapAsyncFn.apply(s, t).thenApply(Traversers::singleton);\n-        return orderedAsyncResponses\n-                ? AsyncTransformUsingServiceOrderedP.supplier(serviceFactory, maxAsyncOps, flatMapAsyncFn)\n-                : AsyncTransformUsingServiceUnorderedP.supplier(serviceFactory, maxAsyncOps, flatMapAsyncFn, extractKeyFn);\n+        return preserveOrder\n+                ? AsyncTransformUsingServiceOrderedP.supplier(\n+                        serviceFactory, maxConcurrentOps, flatMapAsyncFn)\n+                : AsyncTransformUsingServiceUnorderedP.supplier(\n+                        serviceFactory, maxConcurrentOps, flatMapAsyncFn, extractKeyFn);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwNzQ1Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1919#discussion_r374007453", "bodyText": "maxConcurrentOps perhaps?", "author": "cangencer", "createdAt": "2020-02-03T09:51:33Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java", "diffHunk": "@@ -901,11 +902,16 @@ private Processors() {\n     @Nonnull\n     public static <C, S, T, K, R> ProcessorSupplier mapUsingServiceAsyncP(\n             @Nonnull ServiceFactory<C, S> serviceFactory,\n+            int maxAsyncOps,", "originalCommit": "2c0498169e5ffbf0c2293adc23dbaf3378c7fc81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dd75ed69ba8e24f27b4a9085f295421ee56e1004", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java\nindex 852c7d92e..c7cd45232 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java\n\n@@ -902,16 +902,18 @@ public final class Processors {\n     @Nonnull\n     public static <C, S, T, K, R> ProcessorSupplier mapUsingServiceAsyncP(\n             @Nonnull ServiceFactory<C, S> serviceFactory,\n-            int maxAsyncOps,\n-            boolean orderedAsyncResponses,\n+            int maxConcurrentOps,\n+            boolean preserveOrder,\n             @Nonnull FunctionEx<T, K> extractKeyFn,\n             @Nonnull BiFunctionEx<? super S, ? super T, CompletableFuture<R>> mapAsyncFn\n     ) {\n         BiFunctionEx<S, T, CompletableFuture<Traverser<R>>> flatMapAsyncFn = (s, t) ->\n                 mapAsyncFn.apply(s, t).thenApply(Traversers::singleton);\n-        return orderedAsyncResponses\n-                ? AsyncTransformUsingServiceOrderedP.supplier(serviceFactory, maxAsyncOps, flatMapAsyncFn)\n-                : AsyncTransformUsingServiceUnorderedP.supplier(serviceFactory, maxAsyncOps, flatMapAsyncFn, extractKeyFn);\n+        return preserveOrder\n+                ? AsyncTransformUsingServiceOrderedP.supplier(\n+                        serviceFactory, maxConcurrentOps, flatMapAsyncFn)\n+                : AsyncTransformUsingServiceUnorderedP.supplier(\n+                        serviceFactory, maxConcurrentOps, flatMapAsyncFn, extractKeyFn);\n     }\n \n     /**\n"}}, {"oid": "dd75ed69ba8e24f27b4a9085f295421ee56e1004", "url": "https://github.com/hazelcast/hazelcast-jet/commit/dd75ed69ba8e24f27b4a9085f295421ee56e1004", "message": "Rename async parameters", "committedDate": "2020-02-03T12:29:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE1MjI0OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1919#discussion_r374152248", "bodyText": "This 2 is burried to deeply, should extract a descriptive constant", "author": "mtopolnik", "createdAt": "2020-02-03T15:03:11Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/ComputeStageImplBase.java", "diffHunk": "@@ -298,7 +302,7 @@\n \n         return (RET) attach(\n                 flatMapUsingServiceAsyncBatchedTransform(\n-                        transform, operationName, serviceFactory, maxBatchSize, flattenedFn),\n+                        transform, operationName, serviceFactory, 2, maxBatchSize, flattenedFn),", "originalCommit": "dd75ed69ba8e24f27b4a9085f295421ee56e1004", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "457f11fc529a334171fe902a149864aa233ba411", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/ComputeStageImplBase.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/ComputeStageImplBase.java\nindex ea719d638..29e7137df 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/ComputeStageImplBase.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/ComputeStageImplBase.java\n\n@@ -302,7 +303,7 @@ public abstract class ComputeStageImplBase<T> extends AbstractStage {\n \n         return (RET) attach(\n                 flatMapUsingServiceAsyncBatchedTransform(\n-                        transform, operationName, serviceFactory, 2, maxBatchSize, flattenedFn),\n+                        transform, operationName, serviceFactory, MAX_CONCURRENT_ASYNC_BATCHES, maxBatchSize, flattenedFn),\n                 fnAdapter);\n     }\n \n"}}, {"oid": "457f11fc529a334171fe902a149864aa233ba411", "url": "https://github.com/hazelcast/hazelcast-jet/commit/457f11fc529a334171fe902a149864aa233ba411", "message": "Introduce descriptive constant for magic number", "committedDate": "2020-02-04T08:00:28Z", "type": "commit"}, {"oid": "457f11fc529a334171fe902a149864aa233ba411", "url": "https://github.com/hazelcast/hazelcast-jet/commit/457f11fc529a334171fe902a149864aa233ba411", "message": "Introduce descriptive constant for magic number", "committedDate": "2020-02-04T08:00:28Z", "type": "forcePushed"}]}