{"pr_number": 1947, "pr_title": "Add migration guide to RefMan", "pr_createdAt": "2020-02-08T16:31:28Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/1947", "timeline": [{"oid": "6d6d75e7e3996fa24ff1a14a394071036eb427c4", "url": "https://github.com/hazelcast/hazelcast-jet/commit/6d6d75e7e3996fa24ff1a14a394071036eb427c4", "message": "Write a migration guide", "committedDate": "2020-02-08T16:29:03Z", "type": "commit"}, {"oid": "1424ef9ae2fa96f2846b9f199d8168301fe1bc99", "url": "https://github.com/hazelcast/hazelcast-jet/commit/1424ef9ae2fa96f2846b9f199d8168301fe1bc99", "message": "Extend migration guide", "committedDate": "2020-02-10T09:35:27Z", "type": "commit"}, {"oid": "b8d470a6ca4ade66c3470d22f717053a93cac5f8", "url": "https://github.com/hazelcast/hazelcast-jet/commit/b8d470a6ca4ade66c3470d22f717053a93cac5f8", "message": "Address review concerns", "committedDate": "2020-02-11T09:14:34Z", "type": "commit"}, {"oid": "181df683bf5cf8975803619b6fa94722591b81c6", "url": "https://github.com/hazelcast/hazelcast-jet/commit/181df683bf5cf8975803619b6fa94722591b81c6", "message": "Address review concerns", "committedDate": "2020-02-11T11:45:34Z", "type": "commit"}, {"oid": "e9dd69dea97bd0c4f14e2345ee3288424195efde", "url": "https://github.com/hazelcast/hazelcast-jet/commit/e9dd69dea97bd0c4f14e2345ee3288424195efde", "message": "Address review concerns", "committedDate": "2020-02-11T11:48:38Z", "type": "commit"}, {"oid": "7e821e6a806f61efe96029c416bfb190f6d42637", "url": "https://github.com/hazelcast/hazelcast-jet/commit/7e821e6a806f61efe96029c416bfb190f6d42637", "message": "Wrap around column 72", "committedDate": "2020-02-12T09:04:10Z", "type": "commit"}, {"oid": "cf2d56917c2dfbd00fee94bf708284b6ea51af35", "url": "https://github.com/hazelcast/hazelcast-jet/commit/cf2d56917c2dfbd00fee94bf708284b6ea51af35", "message": "Accomodate review changes", "committedDate": "2020-02-12T09:36:11Z", "type": "commit"}, {"oid": "9d29dc618fdf86503bba08427205597a278108c6", "url": "https://github.com/hazelcast/hazelcast-jet/commit/9d29dc618fdf86503bba08427205597a278108c6", "message": "Rewrite to active voice", "committedDate": "2020-02-12T10:40:28Z", "type": "commit"}, {"oid": "1ea9e5a4419a04de54f7bb9030d6a31619a918e8", "url": "https://github.com/hazelcast/hazelcast-jet/commit/1ea9e5a4419a04de54f7bb9030d6a31619a918e8", "message": "Fix minor mistakes", "committedDate": "2020-02-12T12:32:53Z", "type": "commit"}, {"oid": "6201af694b08689c9af0cb6e78992db67f8bd3e3", "url": "https://github.com/hazelcast/hazelcast-jet/commit/6201af694b08689c9af0cb6e78992db67f8bd3e3", "message": "Push key words to the start of bullet points", "committedDate": "2020-02-12T15:35:42Z", "type": "commit"}, {"oid": "0f354ae66e9a6527ac9872966fc0152c23439cce", "url": "https://github.com/hazelcast/hazelcast-jet/commit/0f354ae66e9a6527ac9872966fc0152c23439cce", "message": "Add missing items", "committedDate": "2020-02-13T08:38:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc2NjAwOA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1947#discussion_r378766008", "bodyText": "it would be better to return a List<> and then use Traversers.traverseIterable() in the following step", "author": "cangencer", "createdAt": "2020-02-13T10:13:44Z", "path": "reference-manual/src/main/java/migration/Migration.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package migration;\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.function.ConsumerEx;\n+import com.hazelcast.function.FunctionEx;\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Traverser;\n+import com.hazelcast.jet.config.JetConfig;\n+import com.hazelcast.jet.pipeline.BatchStage;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.ServiceFactories;\n+import com.hazelcast.jet.pipeline.ServiceFactory;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.StreamStage;\n+import com.hazelcast.jet.pipeline.test.SimpleEvent;\n+import com.hazelcast.jet.pipeline.test.TestSources;\n+import com.hazelcast.map.EntryProcessor;\n+import com.hazelcast.map.IMap;\n+\n+import java.time.format.DateTimeFormatter;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import static com.hazelcast.jet.Traversers.traverseItems;\n+\n+class Migration {\n+\n+    static void config() {\n+        ClientConfig clientConfig = new ClientConfig();\n+        //tag::config1[]\n+        clientConfig.setClusterName(\"cluster_name\");\n+        //clientConfig.getGroupConfig().setName(\"cluster_name\")\n+        //end::config1[]\n+\n+        Config config = new Config();\n+        //tag::config2[]\n+        config.getMapConfig(\"map_name\").getEventJournalConfig();\n+        //config.getMapEventJournalConfig(\"map_name\")\n+        //end::config2[]\n+\n+        JetConfig jetConfig = new JetConfig();\n+        //tag::config3[]\n+        jetConfig.getHazelcastConfig().getMetricsConfig().setCollectionFrequencySeconds(1);\n+        //jetConfig.getMetricsConfig().setCollectionIntervalSeconds(1);\n+        //end::config3[]\n+    }\n+\n+    static void pipeline() {\n+        Pipeline pipeline = Pipeline.create();\n+        //tag::pipeline1[]\n+        pipeline.readFrom(TestSources.items(1, 2, 3)).writeTo(Sinks.logger());\n+        //pipeline.drawFrom(TestSources.items(1, 2, 3)).drainTo(Sinks.logger());\n+        //end::pipeline1[]\n+\n+        //tag::pipeline2[]\n+        pipeline.readFrom(TestSources.items(1, 2, 3))\n+                .filterUsingService(\n+                        ServiceFactories.sharedService(pctx -> 1),\n+                        (svc, i) -> i % 2 == svc)\n+                .writeTo(Sinks.logger());\n+\n+        /*\n+        pipeline.drawFrom(TestSources.items(1, 2, 3))\n+                .filterUsingContext(\n+                        ContextFactory.withCreateFn(i -> 1),\n+                        (ctx, i) -> i % 2 == ctx)\n+                .drainTo(Sinks.logger());\n+        */\n+        //end::pipeline2[]\n+    }\n+\n+    static void entryProcessor() {\n+        JetInstance jet = Jet.newJetInstance();\n+        IMap<Object, Object> map = jet.getMap(\"map\");\n+\n+        //tag::entryProcessor1[]\n+        FunctionEx<Map.Entry<String, Integer>, EntryProcessor<String, Integer, Void>> entryProcFn =\n+                entry ->\n+                        (EntryProcessor<String, Integer, Void>) e -> {\n+                            e.setValue(e.getValue() == null ? 1 : e.getValue() + 1);\n+                            return null;\n+                        };\n+        Sinks.mapWithEntryProcessor(map, Map.Entry::getKey, entryProcFn);\n+\n+        /*\n+        FunctionEx<Map.Entry<String, Integer>, EntryProcessor<String, Integer>> entryProcFn =\n+                entry ->\n+                        (EntryProcessor<String, Integer>) e -> {\n+                            e.setValue(e.getValue() == null ? 1 : e.getValue() + 1);\n+                            return null;\n+                        };\n+        Sinks.mapWithEntryProcessor(map, Map.Entry::getKey, entryProcFn);\n+        */\n+        //end::entryProcessor1[]\n+    }\n+\n+    static void serviceFactory() {\n+        //tag::serviceFactory1[]\n+        ServiceFactories.sharedService(ctx -> Executors.newFixedThreadPool(8), ExecutorService::shutdown);\n+        //ContextFactory.withCreateFn(jet -> Executors.newFixedThreadPool(8)).withLocalSharing();\n+\n+        ServiceFactories.nonSharedService(ctx -> DateTimeFormatter.ofPattern(\"HH:mm:ss.SSS\"), ConsumerEx.noop());\n+        //ContextFactory.withCreateFn(jet -> DateTimeFormatter.ofPattern(\"HH:mm:ss.SSS\"))\n+        //end::serviceFactory1[]\n+\n+        Pipeline pipeline = Pipeline.create();\n+        BatchStage<Runnable> stage = pipeline.readFrom(TestSources.items(1, 2, 3)).map(i -> (Runnable) () -> {});\n+\n+        //tag::serviceFactory2[]\n+        stage.mapUsingServiceAsync(\n+                ServiceFactories.sharedService(ctx -> Executors.newFixedThreadPool(8)),\n+                2,\n+                false,\n+                (exec, task) -> CompletableFuture.supplyAsync(() -> task, exec)\n+        );\n+\n+        /*\n+        stage.mapUsingContextAsync(\n+                ContextFactory.withCreateFn(jet -> Executors.newFixedThreadPool(8))\n+                        .withMaxPendingCallsPerProcessor(2)\n+                        .withUnorderedAsyncResponses(),\n+                (exec, task) -> CompletableFuture.supplyAsync(() -> task, exec)\n+        );\n+        */\n+        //end::serviceFactory2[]\n+    }\n+\n+    static void async() {\n+        Pipeline p = Pipeline.create();\n+        ServiceFactory<?, ExecutorService> serviceFactory = ServiceFactories.sharedService(ctx -> Executors.newFixedThreadPool(8));\n+\n+        StreamStage<Long> stage = p.readFrom(TestSources.itemStream(3))\n+                .withoutTimestamps()\n+                .map(SimpleEvent::sequence);\n+\n+        //tag::async1[]\n+        stage.mapUsingServiceAsync(serviceFactory,\n+                (executor, item) -> {\n+                    CompletableFuture<Traverser<String>> f = new CompletableFuture<>();\n+                    executor.submit(() -> f.complete(traverseItems(item + \"-1\", item + \"-2\", item + \"-3\")));", "originalCommit": "0f354ae66e9a6527ac9872966fc0152c23439cce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc3d7386686b40990d039acabd53333fdeb861e1", "chunk": "diff --git a/reference-manual/src/main/java/migration/Migration.java b/reference-manual/src/main/java/migration/Migration.java\nindex c26480349..7f5633dd9 100644\n--- a/reference-manual/src/main/java/migration/Migration.java\n+++ b/reference-manual/src/main/java/migration/Migration.java\n\n@@ -22,7 +22,7 @@ import com.hazelcast.function.ConsumerEx;\n import com.hazelcast.function.FunctionEx;\n import com.hazelcast.jet.Jet;\n import com.hazelcast.jet.JetInstance;\n-import com.hazelcast.jet.Traverser;\n+import com.hazelcast.jet.Traversers;\n import com.hazelcast.jet.config.JetConfig;\n import com.hazelcast.jet.pipeline.BatchStage;\n import com.hazelcast.jet.pipeline.Pipeline;\n"}}, {"oid": "dc3d7386686b40990d039acabd53333fdeb861e1", "url": "https://github.com/hazelcast/hazelcast-jet/commit/dc3d7386686b40990d039acabd53333fdeb861e1", "message": "Adjust code sample", "committedDate": "2020-02-13T10:26:23Z", "type": "commit"}]}