{"pr_number": 2469, "pr_title": "BatchStage.sort()", "pr_createdAt": "2020-08-27T08:00:54Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2469", "timeline": [{"oid": "cfcd5fe8a8ea2daeedc165a3709e81caefc6d00e", "url": "https://github.com/hazelcast/hazelcast-jet/commit/cfcd5fe8a8ea2daeedc165a3709e81caefc6d00e", "message": "add in-memory sort", "committedDate": "2020-08-26T13:39:00Z", "type": "commit"}, {"oid": "25cfa0f11365586fcf2da5e7f80b03c8f453865c", "url": "https://github.com/hazelcast/hazelcast-jet/commit/25cfa0f11365586fcf2da5e7f80b03c8f453865c", "message": "add in-memory sort", "committedDate": "2020-08-27T05:09:09Z", "type": "commit"}, {"oid": "7478050c6a689836c9b5a95eee2e86c79870471b", "url": "https://github.com/hazelcast/hazelcast-jet/commit/7478050c6a689836c9b5a95eee2e86c79870471b", "message": "Merge remote-tracking branch 'origin/in-memory-sorting' into in-memory-sorting\n\n# Conflicts:\n#\thazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java\n#\thazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/EdgeDef.java", "committedDate": "2020-08-27T05:16:53Z", "type": "commit"}, {"oid": "26e76f729c8c12192db35ee3de058ca966a292f1", "url": "https://github.com/hazelcast/hazelcast-jet/commit/26e76f729c8c12192db35ee3de058ca966a292f1", "message": "remove SerializableComparator", "committedDate": "2020-08-27T05:48:46Z", "type": "commit"}, {"oid": "139910da8fb215b56ed4e42e54f72e1e0fc63088", "url": "https://github.com/hazelcast/hazelcast-jet/commit/139910da8fb215b56ed4e42e54f72e1e0fc63088", "message": "replace TreeMap with TreeSet", "committedDate": "2020-08-27T06:08:16Z", "type": "commit"}, {"oid": "b7e239333bf5bd89f85f9e2eec7aa7692156eb75", "url": "https://github.com/hazelcast/hazelcast-jet/commit/b7e239333bf5bd89f85f9e2eec7aa7692156eb75", "message": "replace ComparatorEx by Comparator in SortPrepareP", "committedDate": "2020-08-27T07:50:19Z", "type": "commit"}, {"oid": "8d4013f2b5b32a2c12d15ab9412e9db80c014d54", "url": "https://github.com/hazelcast/hazelcast-jet/commit/8d4013f2b5b32a2c12d15ab9412e9db80c014d54", "message": "add @NonNull/@Nullable\nadd @since\ncleanup", "committedDate": "2020-08-27T09:21:48Z", "type": "commit"}, {"oid": "a1e488d574d325209c632adc4e4d4ee480ca53e4", "url": "https://github.com/hazelcast/hazelcast-jet/commit/a1e488d574d325209c632adc4e4d4ee480ca53e4", "message": "add BatchStage.sort()", "committedDate": "2020-08-29T12:20:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAxOTE5Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r480019192", "bodyText": "You may already have made progress by consuming some items in previous while loop iterations.", "author": "mtopolnik", "createdAt": "2020-08-31T09:51:46Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ConcurrentInboundEdgeStream.java", "diffHunk": "@@ -165,6 +177,51 @@ public ProgressState drainTo(Predicate<Object> dest) {\n         return tracker.toProgressState();\n     }\n \n+    private ProgressState drainToWithComparator(Predicate<Object> dest) {\n+        int batchSize = -1;\n+        while (true) {\n+            int minIndex = 0;\n+            Object minItem = null;\n+            for (int queueIndex = 0; queueIndex < conveyor.queueCount(); queueIndex++) {\n+                final QueuedPipe<Object> q = conveyor.queue(queueIndex);\n+                if (q == null) {\n+                    continue;\n+                }\n+                Object headObject = q.peek();\n+                Object headItem;\n+                if (headObject instanceof ObjectWithPartitionId) {\n+                    headItem = ((ObjectWithPartitionId) headObject).getItem();\n+                } else {\n+                    headItem = headObject;\n+                }\n+                if (headItem == null) {\n+                    return NO_PROGRESS;", "originalCommit": "a1e488d574d325209c632adc4e4d4ee480ca53e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIyODE3Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r480228176", "bodyText": "Done", "author": "MohamedMandouh", "createdAt": "2020-08-31T15:59:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAxOTE5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1176d4387732bb6efbf5e56263e4d709a0153365", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ConcurrentInboundEdgeStream.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ConcurrentInboundEdgeStream.java\nindex 895efc4cd..47d6112bd 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ConcurrentInboundEdgeStream.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ConcurrentInboundEdgeStream.java\n\n@@ -195,7 +195,10 @@ public class ConcurrentInboundEdgeStream implements InboundEdgeStream {\n                     headItem = headObject;\n                 }\n                 if (headItem == null) {\n-                    return NO_PROGRESS;\n+                    if(batchSize == -1) {\n+                        return NO_PROGRESS;\n+                    }\n+                    return MADE_PROGRESS;\n                 }\n                 if (headItem == DONE_ITEM) {\n                     conveyor.removeQueue(queueIndex);\n"}}, {"oid": "1176d4387732bb6efbf5e56263e4d709a0153365", "url": "https://github.com/hazelcast/hazelcast-jet/commit/1176d4387732bb6efbf5e56263e4d709a0153365", "message": "fix returning NO_PROGRESS whenever a queue returns null", "committedDate": "2020-08-31T15:56:59Z", "type": "commit"}, {"oid": "4c8897d18bf2616969b8edad54f30fab61a2c2b4", "url": "https://github.com/hazelcast/hazelcast-jet/commit/4c8897d18bf2616969b8edad54f30fab61a2c2b4", "message": "pass checkstyle", "committedDate": "2020-08-31T16:02:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwMjY2OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r480302668", "bodyText": "we could add a reference back to monoticOrder here", "author": "cangencer", "createdAt": "2020-08-31T18:15:06Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java", "diffHunk": "@@ -371,6 +373,27 @@ public Edge isolated() {\n         return partitioner;\n     }\n \n+    /**\n+     * Sets a comparator on this edge. The comparator is used by {@link ConcurrentInboundEdgeStream}\n+     * to determine which cluster member to receive the next item from over this edge.\n+     *\n+     * @since 4.3\n+     */\n+    public Edge monotonicOrder(@Nonnull ComparatorEx<Object> comparator) {\n+        this.comparator = comparator;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the comparator defined on this edge.", "originalCommit": "4c8897d18bf2616969b8edad54f30fab61a2c2b4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f4a0b158c907ca467164d23f68c312e2a5cb81a", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java\nindex 916843125..5af76f442 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/Edge.java\n\n@@ -385,7 +385,7 @@ public class Edge implements IdentifiedDataSerializable {\n     }\n \n     /**\n-     * Returns the comparator defined on this edge.\n+     * Returns the comparator defined on this edge using {@link #monotonicOrder(ComparatorEx)}.\n      *\n      * @since 4.3\n      **/\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwMzQxMQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r480303411", "bodyText": "should be ? super T", "author": "cangencer", "createdAt": "2020-08-31T18:16:29Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/BatchStage.java", "diffHunk": "@@ -66,6 +67,22 @@\n     @Nonnull @Override\n     BatchStage<T> rebalance();\n \n+    /**\n+     * Attaches a stage that sorts items based on their natural ordering.\n+     *\n+     * @since 4.3\n+     */\n+    @Nonnull\n+    BatchStage<T> sort();\n+\n+    /**\n+     * Attaches a stage that sorts the items based on user-defined comparator.\n+     *\n+     * @since 4.3\n+     */\n+    @Nonnull\n+    BatchStage<T> sort(@Nonnull ComparatorEx<T> comparator);", "originalCommit": "4c8897d18bf2616969b8edad54f30fab61a2c2b4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f4a0b158c907ca467164d23f68c312e2a5cb81a", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/BatchStage.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/BatchStage.java\nindex 2a69d0e8d..b24de9f76 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/BatchStage.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/BatchStage.java\n\n@@ -81,7 +81,7 @@ public interface BatchStage<T> extends GeneralStage<T> {\n      * @since 4.3\n      */\n     @Nonnull\n-    BatchStage<T> sort(@Nonnull ComparatorEx<T> comparator);\n+    BatchStage<T> sort(@Nonnull ComparatorEx<? extends T> comparator);\n \n     @Nonnull @Override\n     <R> BatchStage<R> map(@Nonnull FunctionEx<? super T, ? extends R> mapFn);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwMzY1OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r480303659", "bodyText": "should use T here instead of V", "author": "cangencer", "createdAt": "2020-08-31T18:16:56Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/transform/SortTransform.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.pipeline.transform;\n+\n+import com.hazelcast.function.ComparatorEx;\n+import com.hazelcast.jet.core.ProcessorMetaSupplier;\n+import com.hazelcast.jet.core.ProcessorSupplier;\n+import com.hazelcast.jet.core.Vertex;\n+import com.hazelcast.jet.core.processor.Processors;\n+import com.hazelcast.jet.impl.pipeline.Planner;\n+import com.hazelcast.jet.impl.pipeline.Planner.PlannerVertex;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static com.hazelcast.function.FunctionEx.identity;\n+import static com.hazelcast.jet.core.Edge.between;\n+import static com.hazelcast.jet.core.processor.Processors.sortPrepareP;\n+\n+\n+public class SortTransform<V> extends AbstractTransform {", "originalCommit": "4c8897d18bf2616969b8edad54f30fab61a2c2b4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f4a0b158c907ca467164d23f68c312e2a5cb81a", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/transform/SortTransform.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/transform/SortTransform.java\nindex 5f111ddcc..ad0d4f56e 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/transform/SortTransform.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/transform/SortTransform.java\n\n@@ -32,15 +32,15 @@ import static com.hazelcast.jet.core.Edge.between;\n import static com.hazelcast.jet.core.processor.Processors.sortPrepareP;\n \n \n-public class SortTransform<V> extends AbstractTransform {\n+public class SortTransform<T> extends AbstractTransform {\n \n     private static final String FIRST_STAGE_VERTEX_NAME_SUFFIX = \"-prepare\";\n-    private final ComparatorEx<V> comparator;\n+    private final ComparatorEx<T> comparator;\n \n-    public SortTransform(@Nonnull Transform upstream, @Nullable ComparatorEx<V> comparator) {\n+    public SortTransform(@Nonnull Transform upstream, @Nullable ComparatorEx<T> comparator) {\n         super(\"sort\", upstream);\n         if (comparator == null) {\n-            this.comparator = (ComparatorEx<V>) (o1, o2) -> ((Comparable<V>) o1).compareTo(o2);\n+            this.comparator = (ComparatorEx<T>) (o1, o2) -> ((Comparable<T>) o1).compareTo(o2);\n         } else {\n             this.comparator = comparator;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNDY5NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r480304695", "bodyText": "I don't think using SortedSet is correct here. It will skip duplicates. PriorityQueue would be more correct.", "author": "cangencer", "createdAt": "2020-08-31T18:19:01Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/processor/SortPrepareP.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.processor;\n+\n+import com.hazelcast.jet.Traverser;\n+import com.hazelcast.jet.core.AbstractProcessor;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.Comparator;\n+import java.util.Iterator;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n+public class SortPrepareP<V> extends AbstractProcessor {\n+    private final SortedSet<V> set;", "originalCommit": "4c8897d18bf2616969b8edad54f30fab61a2c2b4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f4a0b158c907ca467164d23f68c312e2a5cb81a", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/processor/SortPrepareP.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/processor/SortPrepareP.java\nindex 074f37eb2..b05a12268 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/processor/SortPrepareP.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/processor/SortPrepareP.java\n\n@@ -23,19 +23,18 @@ import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n import java.util.Comparator;\n import java.util.Iterator;\n-import java.util.SortedSet;\n-import java.util.TreeSet;\n+import java.util.PriorityQueue;\n \n public class SortPrepareP<V> extends AbstractProcessor {\n-    private final SortedSet<V> set;\n+    private final PriorityQueue<V> priorityQueue;\n     private ResultTraverser resultTraverser;\n \n     public SortPrepareP(@Nullable Comparator<V> comparator) {\n-        this.set = new TreeSet<>(comparator);\n+        this.priorityQueue = new PriorityQueue<>(comparator);\n     }\n \n     protected boolean tryProcess0(@Nonnull Object item) {\n-        set.add((V) item);\n+        priorityQueue.add((V) item);\n         return true;\n     }\n \n"}}, {"oid": "9f4a0b158c907ca467164d23f68c312e2a5cb81a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/9f4a0b158c907ca467164d23f68c312e2a5cb81a", "message": "apply requested changes", "committedDate": "2020-09-02T09:53:10Z", "type": "commit"}, {"oid": "9b9cba52a7c5500babe6079b8ee6d157b2ccddc8", "url": "https://github.com/hazelcast/hazelcast-jet/commit/9b9cba52a7c5500babe6079b8ee6d157b2ccddc8", "message": "Add @Nonnull", "committedDate": "2020-09-03T12:23:15Z", "type": "commit"}, {"oid": "532e4ab79ea3d2352cbf39ce4724cfd03f217749", "url": "https://github.com/hazelcast/hazelcast-jet/commit/532e4ab79ea3d2352cbf39ce4724cfd03f217749", "message": "Remove the requirement for Comparator<Object>", "committedDate": "2020-09-03T14:04:10Z", "type": "commit"}, {"oid": "1c8a39d1b1c074a72130485ae9b1dc1dc91d525e", "url": "https://github.com/hazelcast/hazelcast-jet/commit/1c8a39d1b1c074a72130485ae9b1dc1dc91d525e", "message": "Improve Javadoc", "committedDate": "2020-09-03T14:04:30Z", "type": "commit"}, {"oid": "a7b9ea5a0df3f9821f096d4129edad7f29800704", "url": "https://github.com/hazelcast/hazelcast-jet/commit/a7b9ea5a0df3f9821f096d4129edad7f29800704", "message": "Assert monotonic order in CIES", "committedDate": "2020-09-03T14:05:14Z", "type": "commit"}, {"oid": "18a7d4fe06cdd3ace4ed350cde623fcf0fe2d94b", "url": "https://github.com/hazelcast/hazelcast-jet/commit/18a7d4fe06cdd3ace4ed350cde623fcf0fe2d94b", "message": "Simplify draining logic in CIES", "committedDate": "2020-09-03T14:05:48Z", "type": "commit"}, {"oid": "ca6439638cdee433a514857ae5b0c3b590b32652", "url": "https://github.com/hazelcast/hazelcast-jet/commit/ca6439638cdee433a514857ae5b0c3b590b32652", "message": "Remove numActiveQueues", "committedDate": "2020-09-03T14:16:31Z", "type": "commit"}, {"oid": "8b884ea5c5b7f779e562bd5f6fa6adaacfdf09c8", "url": "https://github.com/hazelcast/hazelcast-jet/commit/8b884ea5c5b7f779e562bd5f6fa6adaacfdf09c8", "message": "Merge nested ifs", "committedDate": "2020-09-03T14:16:37Z", "type": "commit"}, {"oid": "a6ad9b298479cb28711a325d95d19a2ce8aa3fd0", "url": "https://github.com/hazelcast/hazelcast-jet/commit/a6ad9b298479cb28711a325d95d19a2ce8aa3fd0", "message": "Upgraded deps in NOTICE", "committedDate": "2020-09-04T12:07:36Z", "type": "commit"}, {"oid": "9499597afb0dea4996675ec4a8184176fd9ba0b9", "url": "https://github.com/hazelcast/hazelcast-jet/commit/9499597afb0dea4996675ec4a8184176fd9ba0b9", "message": "Improve Javadoc of Processors.sortPrepareP", "committedDate": "2020-09-04T12:09:42Z", "type": "commit"}, {"oid": "193663d7577d222eeee295b8d7b6c03ebf296398", "url": "https://github.com/hazelcast/hazelcast-jet/commit/193663d7577d222eeee295b8d7b6c03ebf296398", "message": "Improve generic type treatment", "committedDate": "2020-09-04T12:09:57Z", "type": "commit"}, {"oid": "c02162c7a2c5d9419f371fc5696da44bdc0d717a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/c02162c7a2c5d9419f371fc5696da44bdc0d717a", "message": "Simplify SortPrepareP", "committedDate": "2020-09-04T12:10:08Z", "type": "commit"}, {"oid": "89d51090958c5ad6eca9de6ca96f2680714bf546", "url": "https://github.com/hazelcast/hazelcast-jet/commit/89d51090958c5ad6eca9de6ca96f2680714bf546", "message": "Rename SortPrepareP -> SortP", "committedDate": "2020-09-04T12:17:25Z", "type": "commit"}, {"oid": "bf4907a3866331a686df133d09e018abbc99f002", "url": "https://github.com/hazelcast/hazelcast-jet/commit/bf4907a3866331a686df133d09e018abbc99f002", "message": "Fix generics", "committedDate": "2020-09-04T12:46:13Z", "type": "commit"}, {"oid": "4f30b5ce3f83ae9ed6487ef4bfc3f16c262dcb13", "url": "https://github.com/hazelcast/hazelcast-jet/commit/4f30b5ce3f83ae9ed6487ef4bfc3f16c262dcb13", "message": "Merge branch 'master' into in-memory-sorting", "committedDate": "2020-09-04T13:19:36Z", "type": "commit"}, {"oid": "2a3be9689b4ee40e6c0ac1399988de18408f18a2", "url": "https://github.com/hazelcast/hazelcast-jet/commit/2a3be9689b4ee40e6c0ac1399988de18408f18a2", "message": "Work around JDK 8 compiler bug", "committedDate": "2020-09-04T13:43:40Z", "type": "commit"}, {"oid": "8cb38972bfe409df8c0942841aa7ed781d7ab6a1", "url": "https://github.com/hazelcast/hazelcast-jet/commit/8cb38972bfe409df8c0942841aa7ed781d7ab6a1", "message": "Fix two bugs", "committedDate": "2020-09-05T13:53:53Z", "type": "commit"}, {"oid": "f1bbf30ad991a38e30134207565b2b9e03882afb", "url": "https://github.com/hazelcast/hazelcast-jet/commit/f1bbf30ad991a38e30134207565b2b9e03882afb", "message": "Add BatchStageTest.sort()", "committedDate": "2020-09-05T13:54:02Z", "type": "commit"}, {"oid": "d629a5cac935303213d1b8d4a3a693c9082b8943", "url": "https://github.com/hazelcast/hazelcast-jet/commit/d629a5cac935303213d1b8d4a3a693c9082b8943", "message": "add ProcessorsTest.sort", "committedDate": "2020-09-05T14:10:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3NDgxOA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r484274818", "bodyText": "Override annotation is missing here.", "author": "ufukyilmaz", "createdAt": "2020-09-07T08:29:55Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/processor/SortP.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.processor;\n+\n+import com.hazelcast.jet.Traverser;\n+import com.hazelcast.jet.core.AbstractProcessor;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.Comparator;\n+import java.util.PriorityQueue;\n+\n+public class SortP<T> extends AbstractProcessor {\n+    private final PriorityQueue<T> priorityQueue;\n+    private final Traverser<T> resultTraverser;\n+\n+    public SortP(@Nullable Comparator<T> comparator) {\n+        this.priorityQueue = new PriorityQueue<>(comparator);\n+        this.resultTraverser = priorityQueue::poll;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")", "originalCommit": "d629a5cac935303213d1b8d4a3a693c9082b8943", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a23a817651a3733d23a8a928a0ad104051220edc", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/processor/SortP.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/processor/SortP.java\nindex 1836bfe1e..da8ae6cec 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/processor/SortP.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/processor/SortP.java\n\n@@ -33,6 +33,7 @@ public class SortP<T> extends AbstractProcessor {\n         this.resultTraverser = priorityQueue::poll;\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     protected boolean tryProcess0(@Nonnull Object item) {\n         priorityQueue.add((T) item);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5MzY0Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r484293643", "bodyText": "Can you explain which kind of input data this processor can effectively sort (It seems to me that it cannot sort the streaming data completely, but I'm not sure.)?\nIs this processor's only use case to sort the data completely or can it be used for other purposes such as partial sorting?\nAlso, could you document what the comparator parameter does and what the type parameter is?", "author": "ufukyilmaz", "createdAt": "2020-09-07T09:01:34Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java", "diffHunk": "@@ -972,6 +976,22 @@ private Processors() {\n                 (singletonTraverser, service, item) -> flatMapFn.apply(service, item));\n     }\n \n+    /**\n+     * Returns a supplier of processors for a vertex that sorts its input using\n+     * a {@link PriorityQueue} and emits it in the {@code complete} phase.\n+     * <p>\n+     * The output edge of this vertex should be {@link Edge#distributed\n+     * distributed} {@link Edge#monotonicOrder monotonicOrder} {@link\n+     * Edge#allToOne allToOne} so it preserves the ordering when merging\n+     * the data from all upstream processors.\n+     *\n+     * @since 4.3", "originalCommit": "d629a5cac935303213d1b8d4a3a693c9082b8943", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMzMTM3Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r484331377", "bodyText": "Also, we should change V to T for consistency.", "author": "mtopolnik", "createdAt": "2020-09-07T10:05:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5MzY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1NDMyMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r485054320", "bodyText": "It's only meant for batch use cases, it's not meant to be available in StreamingStage interface.", "author": "MohamedMandouh", "createdAt": "2020-09-08T16:36:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5MzY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4OTM4Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r485189383", "bodyText": "I think we should add this information to this processor's javadoc.", "author": "ufukyilmaz", "createdAt": "2020-09-08T20:52:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5MzY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQxOTI1Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r487419256", "bodyText": "Actually, this inspires adding a new Edge property that's a limit on the number of items allowed to travel over it.\nThis simple change introduces partial sorting to Jet!\nusage:\nitems.partialSort(10),\nitems.partialSort(ComparatorEx.reverseOrder(), 10)", "author": "MohamedMandouh", "createdAt": "2020-09-12T15:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5MzY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxODQ5Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r487618492", "bodyText": "I guess partial sorting could still be done using stage.sort().aggregate(topN()) or stage.sort().aggregate(bottomN()).\nBut that means sending all data first to the target member that does global sorting to complete the sorting stage then choosing top or bottom N items from them which should be cost more comparing to only retrieving the N items you want from other cluster members.\nAlso because topN() and bottomN() will sort the data again at the target member by inserting the already sorted data in a priority queue which is added cost.\nThat's why I suggested introducing stage.partialSort()", "author": "MohamedMandouh", "createdAt": "2020-09-14T02:21:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5MzY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a23a817651a3733d23a8a928a0ad104051220edc", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java\nindex aef82911a..c6395e7ff 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/core/processor/Processors.java\n\n@@ -988,7 +988,7 @@ public final class Processors {\n      * @since 4.3\n      */\n     @Nonnull\n-    public static <V> SupplierEx<Processor> sortP(Comparator<V> comparator) {\n+    public static <T> SupplierEx<Processor> sortP(Comparator<T> comparator) {\n         return () -> new SortP<>(comparator);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMwMjM2MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2469#discussion_r484302360", "bodyText": "Public APIs should include a detailed explanation, sample usage, and parameter and return value descriptions. Could you add them? You can refer to the methods in the GeneralStage interface.", "author": "ufukyilmaz", "createdAt": "2020-09-07T09:15:46Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/BatchStage.java", "diffHunk": "@@ -66,6 +67,23 @@\n     @Nonnull @Override\n     BatchStage<T> rebalance();\n \n+    /**", "originalCommit": "d629a5cac935303213d1b8d4a3a693c9082b8943", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb6751d9c157eed144c1ec163f2b8a66315ed6e6", "chunk": "diff --git a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/BatchStage.java b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/BatchStage.java\nindex b5783eb99..bca1beb6b 100644\n--- a/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/BatchStage.java\n+++ b/hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/BatchStage.java\n\n@@ -68,17 +68,30 @@ public interface BatchStage<T> extends GeneralStage<T> {\n     BatchStage<T> rebalance();\n \n     /**\n-     * Attaches a stage that sorts the items according to their natural order.\n+     * Attaches a stage that sorts the input items according to their natural order.\n+     * <p>\n+     * Sample usage:\n+     * <pre>{@code\n+     * items.sort()\n+     * }</pre>\n      *\n+     * @return the newly attached stage\n      * @since 4.3\n      */\n     @Nonnull\n     BatchStage<T> sort();\n \n     /**\n-     * Attaches a stage that sorts the items according to the supplied\n+     * Attaches a stage that sorts the input items according to the supplied\n      * comparator.\n+     * <p>\n+     * Sample usage:\n+     * <pre>{@code\n+     * items.sort(ComparatorEx::reverseOrder)\n+     * }</pre>\n      *\n+     * @param comparator the user provided comparator that will be used for sorting.\n+     * @return the newly attached stage\n      * @since 4.3\n      */\n     @Nonnull\n"}}, {"oid": "a23a817651a3733d23a8a928a0ad104051220edc", "url": "https://github.com/hazelcast/hazelcast-jet/commit/a23a817651a3733d23a8a928a0ad104051220edc", "message": "add missing Override", "committedDate": "2020-09-08T15:27:30Z", "type": "commit"}, {"oid": "eb6751d9c157eed144c1ec163f2b8a66315ed6e6", "url": "https://github.com/hazelcast/hazelcast-jet/commit/eb6751d9c157eed144c1ec163f2b8a66315ed6e6", "message": "add sample usage, param and return annotaitions", "committedDate": "2020-09-08T15:54:20Z", "type": "commit"}, {"oid": "5f59a0dde50041f563acc9e5227ef8c0174ae641", "url": "https://github.com/hazelcast/hazelcast-jet/commit/5f59a0dde50041f563acc9e5227ef8c0174ae641", "message": "add \"only available for batch\" in javadoc", "committedDate": "2020-09-12T12:43:47Z", "type": "commit"}, {"oid": "0e381704740418cd7eee743c4b283cfb4eb69904", "url": "https://github.com/hazelcast/hazelcast-jet/commit/0e381704740418cd7eee743c4b283cfb4eb69904", "message": "introduce BatchStage.partialSort", "committedDate": "2020-09-12T15:20:00Z", "type": "commit"}, {"oid": "c0d102bbe1c9d9923150042b46f1cb407fcef3ab", "url": "https://github.com/hazelcast/hazelcast-jet/commit/c0d102bbe1c9d9923150042b46f1cb407fcef3ab", "message": "cleanup", "committedDate": "2020-09-14T04:04:58Z", "type": "commit"}, {"oid": "029432bc0e714faa32b9063d41040a9fe0c659b5", "url": "https://github.com/hazelcast/hazelcast-jet/commit/029432bc0e714faa32b9063d41040a9fe0c659b5", "message": "Revert \"cleanup\"\n\nThis reverts commit c0d102bb", "committedDate": "2020-09-14T13:25:20Z", "type": "commit"}, {"oid": "a045a23916482180f76e098d0e2fdb6b1fddca6d", "url": "https://github.com/hazelcast/hazelcast-jet/commit/a045a23916482180f76e098d0e2fdb6b1fddca6d", "message": "Revert \"introduce BatchStage.partialSort\"\n\nThis reverts commit 0e381704", "committedDate": "2020-09-14T13:25:38Z", "type": "commit"}, {"oid": "b3d124d28d06cbd9c01c40298f41f2efdee174da", "url": "https://github.com/hazelcast/hazelcast-jet/commit/b3d124d28d06cbd9c01c40298f41f2efdee174da", "message": "Improve Javadoc", "committedDate": "2020-09-14T14:17:26Z", "type": "commit"}, {"oid": "85a31da26087ea42a806a4c51a4e7d05edd67836", "url": "https://github.com/hazelcast/hazelcast-jet/commit/85a31da26087ea42a806a4c51a4e7d05edd67836", "message": "Improved Edge doc", "committedDate": "2020-09-14T14:19:54Z", "type": "commit"}, {"oid": "befdc1d9d7bfc6aa4166a41fcb0aebebfe1d547a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/befdc1d9d7bfc6aa4166a41fcb0aebebfe1d547a", "message": "Add jet-start.sh docs", "committedDate": "2020-09-16T08:50:30Z", "type": "commit"}]}