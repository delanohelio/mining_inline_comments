{"pr_number": 835, "pr_title": "fix issue 515&592", "pr_createdAt": "2020-05-08T18:10:30Z", "pr_url": "https://github.com/halo-dev/halo/pull/835", "timeline": [{"oid": "a02118b2e684b7c43d62f48adc9abff132f93af8", "url": "https://github.com/halo-dev/halo/commit/a02118b2e684b7c43d62f48adc9abff132f93af8", "message": "add release access and branch access(#515)", "committedDate": "2020-05-07T19:44:50Z", "type": "commit"}, {"oid": "87683b8f70ff291a8b2585432c404175d6b3b43e", "url": "https://github.com/halo-dev/halo/commit/87683b8f70ff291a8b2585432c404175d6b3b43e", "message": "add release and branch access(#515)", "committedDate": "2020-05-07T22:11:54Z", "type": "commit"}, {"oid": "77cc2792f77d55f943f240706e3d547290b4a1ad", "url": "https://github.com/halo-dev/halo/commit/77cc2792f77d55f943f240706e3d547290b4a1ad", "message": "always update to latest release(#515)", "committedDate": "2020-05-08T08:40:33Z", "type": "commit"}, {"oid": "382147f4d23e6a255e025e2005bfb9b90ae58575", "url": "https://github.com/halo-dev/halo/commit/382147f4d23e6a255e025e2005bfb9b90ae58575", "message": "#515", "committedDate": "2020-05-08T18:19:39Z", "type": "commit"}, {"oid": "0e62e4dae9ccd8889c02ef024bd55b2ebf318900", "url": "https://github.com/halo-dev/halo/commit/0e62e4dae9ccd8889c02ef024bd55b2ebf318900", "message": "#515", "committedDate": "2020-05-08T18:25:42Z", "type": "commit"}, {"oid": "1a49c3ac99554611a9186fca20539273ff1ee54a", "url": "https://github.com/halo-dev/halo/commit/1a49c3ac99554611a9186fca20539273ff1ee54a", "message": "add testcases(#515)", "committedDate": "2020-05-08T19:57:45Z", "type": "commit"}, {"oid": "ffbb62d38f50a7eebf0c365dc13aec2771464a6c", "url": "https://github.com/halo-dev/halo/commit/ffbb62d38f50a7eebf0c365dc13aec2771464a6c", "message": "fix 515", "committedDate": "2020-05-08T20:22:28Z", "type": "commit"}, {"oid": "d3a1eac42a624421dc6d8076941e025a9a1a0e31", "url": "https://github.com/halo-dev/halo/commit/d3a1eac42a624421dc6d8076941e025a9a1a0e31", "message": "fix 515", "committedDate": "2020-05-08T20:24:07Z", "type": "commit"}, {"oid": "673c7996c84b22b6fac58dd0090bb4b7d5ccadb7", "url": "https://github.com/halo-dev/halo/commit/673c7996c84b22b6fac58dd0090bb4b7d5ccadb7", "message": "deal with connection refused", "committedDate": "2020-05-12T13:09:11Z", "type": "commit"}, {"oid": "2ca41a70c464abb77c6c1ae49f4a0b87e05ed5b7", "url": "https://github.com/halo-dev/halo/commit/2ca41a70c464abb77c6c1ae49f4a0b87e05ed5b7", "message": "disable disk operation related test", "committedDate": "2020-05-12T13:22:07Z", "type": "commit"}, {"oid": "c0314f745ad6536aba2eca515986106c4274bb88", "url": "https://github.com/halo-dev/halo/commit/c0314f745ad6536aba2eca515986106c4274bb88", "message": "fix #592", "committedDate": "2020-05-31T06:24:57Z", "type": "commit"}, {"oid": "c0314f745ad6536aba2eca515986106c4274bb88", "url": "https://github.com/halo-dev/halo/commit/c0314f745ad6536aba2eca515986106c4274bb88", "message": "fix #592", "committedDate": "2020-05-31T06:24:57Z", "type": "forcePushed"}, {"oid": "bd2db3670b28e22e672bb917ce4a279573b7b46c", "url": "https://github.com/halo-dev/halo/commit/bd2db3670b28e22e672bb917ce4a279573b7b46c", "message": "fix #515 & #592", "committedDate": "2020-05-31T12:03:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwNTMzNw==", "url": "https://github.com/halo-dev/halo/pull/835#discussion_r440305337", "bodyText": "\u5efa\u8bae\u5c06 exception \u8bbe\u7f6e\u5230 log \u4e2d\uff0c\u4ee5\u8bb0\u5f55\u5b8c\u6574\u7684\u9519\u8bef\u6808\u3002\u4e0b\u540c\u3002", "author": "JohnNiang", "createdAt": "2020-06-15T16:38:41Z", "path": "src/main/java/run/halo/app/utils/GitUtils.java", "diffHunk": "@@ -59,6 +69,43 @@ public static Git openOrInit(Path repoPath) throws IOException, GitAPIException\n         return git;\n     }\n \n+    public static void cloneFromGit(@NonNull String repoUrl, @NonNull Path targetPath, @NonNull String branchName) throws GitAPIException {\n+        Assert.hasText(repoUrl, \"Repository remote url must not be blank\");\n+        Assert.notNull(targetPath, \"Target path must not be null\");\n+\n+        Git git = null;\n+        try {\n+            git = Git.cloneRepository()\n+                    .setURI(repoUrl)\n+                    .setDirectory(targetPath.toFile())\n+                    .setBranchesToClone(Arrays.asList(\"refs/heads/\" + branchName))\n+                    .setBranch(\"refs/heads/\" + branchName)\n+                    .call();\n+        } finally {\n+            closeQuietly(git);\n+        }\n+    }\n+\n+    public static List<String> getAllBranches(@NonNull String repoUrl) {\n+        List<String> branches = new ArrayList<String>();\n+        try {\n+            Collection<Ref> refs = Git.lsRemoteRepository()\n+                    .setHeads(true)\n+                    .setRemote(repoUrl)\n+                    .call();\n+            for (Ref ref : refs) {\n+                branches.add(ref.getName().substring(ref.getName().lastIndexOf(\"/\") + 1, ref.getName().length()));\n+            }\n+        } catch (InvalidRemoteException e) {\n+            log.warn(\"Git url is not valid\");", "originalCommit": "bd2db3670b28e22e672bb917ce4a279573b7b46c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f417f32873389ae6116901c558ccac8110adbd7", "chunk": "diff --git a/src/main/java/run/halo/app/utils/GitUtils.java b/src/main/java/run/halo/app/utils/GitUtils.java\nindex b8b5322c..7db0b92b 100644\n--- a/src/main/java/run/halo/app/utils/GitUtils.java\n+++ b/src/main/java/run/halo/app/utils/GitUtils.java\n\n@@ -97,11 +91,11 @@ public class GitUtils {\n                 branches.add(ref.getName().substring(ref.getName().lastIndexOf(\"/\") + 1, ref.getName().length()));\n             }\n         } catch (InvalidRemoteException e) {\n-            log.warn(\"Git url is not valid\");\n+            log.warn(\"Git url is not valid\", e);\n         } catch (TransportException e) {\n-            log.warn(\"Transport exception\");\n+            log.warn(\"Transport exception\", e);\n         } catch (GitAPIException e) {\n-            log.warn(\"Git api exception\");\n+            log.warn(\"Git api exception\", e);\n         }\n         return branches;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwNjM3MA==", "url": "https://github.com/halo-dev/halo/pull/835#discussion_r440306370", "bodyText": "\u6211\u53d1\u73b0 GithubUtils \u4e2d\u5df2\u7ecf\u5305\u542b\u4e86 PREFIX\uff0c\u6240\u4ee5\u8fd9\u91cc\u5f97 PREFIX \u53ef\u80fd\u6709\u4e9b\u591a\u4f59\u3002", "author": "JohnNiang", "createdAt": "2020-06-15T16:40:26Z", "path": "src/main/java/run/halo/app/utils/GitUtils.java", "diffHunk": "@@ -20,6 +24,12 @@\n @Slf4j\n public class GitUtils {\n \n+    static final String PREFIX = \"https://github.com/\";", "originalCommit": "bd2db3670b28e22e672bb917ce4a279573b7b46c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f417f32873389ae6116901c558ccac8110adbd7", "chunk": "diff --git a/src/main/java/run/halo/app/utils/GitUtils.java b/src/main/java/run/halo/app/utils/GitUtils.java\nindex b8b5322c..7db0b92b 100644\n--- a/src/main/java/run/halo/app/utils/GitUtils.java\n+++ b/src/main/java/run/halo/app/utils/GitUtils.java\n\n@@ -24,12 +24,6 @@ import java.util.*;\n @Slf4j\n public class GitUtils {\n \n-    static final String PREFIX = \"https://github.com/\";\n-\n-    static final String CONTENTAPIPATTERN = \"https://api.github.com/repos/%s/contents/%s?ref=%s\";\n-\n-    static final String RELEASEAPIPATTERN = \"https://api.github.com/repos/%s/releases/latest\";\n-\n     private GitUtils() {\n         // Config packed git MMAP\n         WindowCacheConfig config = new WindowCacheConfig();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwNzEwOQ==", "url": "https://github.com/halo-dev/halo/pull/835#discussion_r440307109", "bodyText": "\u5c06 e \u66f4\u6539\u4e3a ingored \u6216 log.warn  \u8bb0\u5f55\u3002\u4e0b\u540c\u3002", "author": "JohnNiang", "createdAt": "2020-06-15T16:41:44Z", "path": "src/main/java/run/halo/app/utils/GithubUtils.java", "diffHunk": "@@ -0,0 +1,364 @@\n+package run.halo.app.utils;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+import org.kohsuke.github.*;\n+import run.halo.app.service.ThemeService;\n+\n+import java.io.FileNotFoundException;\n+import java.util.*;\n+\n+/**\n+ * GithubUtils send request to api.github.com\n+ *\n+ * @author bigbang019\n+ * @date 2020-05-31\n+ */\n+@Slf4j\n+public class GithubUtils {\n+\n+    /**\n+     * The prefix need to remove\n+     */\n+    static final String PREFIX = \"https://github.com/\";\n+\n+    /**\n+     * Get latest release\n+     * @param uri repository url must not be null\n+     * @return the map object containning tagname and zipfile url\n+     */\n+    public static Map<String, Object> getLatestRelease(String uri) {\n+        String repoUrl = StringUtils.removeStartIgnoreCase(uri, PREFIX);\n+\n+        try {\n+            GithubLatestRelease githubLatestRelease = new GithubLatestRelease(repoUrl);\n+\n+            Thread thread = new Thread(githubLatestRelease);\n+\n+            thread.start();\n+\n+            thread.join(10 * 1000);\n+\n+            return githubLatestRelease.result;\n+        } catch (InterruptedException e) {", "originalCommit": "bd2db3670b28e22e672bb917ce4a279573b7b46c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f417f32873389ae6116901c558ccac8110adbd7", "chunk": "diff --git a/src/main/java/run/halo/app/utils/GithubUtils.java b/src/main/java/run/halo/app/utils/GithubUtils.java\nindex 2cc2393a..9965f67c 100644\n--- a/src/main/java/run/halo/app/utils/GithubUtils.java\n+++ b/src/main/java/run/halo/app/utils/GithubUtils.java\n\n@@ -41,6 +41,7 @@ public class GithubUtils {\n \n             return githubLatestRelease.result;\n         } catch (InterruptedException e) {\n+            log.warn(\"Interrupted\", e);\n         }\n \n         return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwODk4NQ==", "url": "https://github.com/halo-dev/halo/pull/835#discussion_r440308985", "bodyText": "\u53ef\u4ee5\u4e0d\u7528 @RunWith(SpringRunner.class) \u6ce8\u89e3\u4e86\u3002", "author": "JohnNiang", "createdAt": "2020-06-15T16:45:01Z", "path": "src/test/java/run/halo/app/service/impl/ThemeServiceImplTest.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package run.halo.app.service.impl;\n+\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import run.halo.app.handler.theme.config.support.ThemeProperty;\n+import run.halo.app.utils.GitUtils;\n+import run.halo.app.utils.HaloUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+@RunWith(SpringRunner.class)", "originalCommit": "bd2db3670b28e22e672bb917ce4a279573b7b46c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f417f32873389ae6116901c558ccac8110adbd7", "chunk": "diff --git a/src/test/java/run/halo/app/service/impl/ThemeServiceImplTest.java b/src/test/java/run/halo/app/service/impl/ThemeServiceImplTest.java\nindex cad3df88..d2b7448c 100644\n--- a/src/test/java/run/halo/app/service/impl/ThemeServiceImplTest.java\n+++ b/src/test/java/run/halo/app/service/impl/ThemeServiceImplTest.java\n\n@@ -1,177 +1,138 @@\n package run.halo.app.service.impl;\n \n \n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.commons.lang3.StringUtils;\n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.test.context.ActiveProfiles;\n-import org.springframework.test.context.junit4.SpringRunner;\n+import org.mockito.*;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.web.client.RestTemplate;\n+import run.halo.app.cache.AbstractStringCacheStore;\n+import run.halo.app.config.properties.HaloProperties;\n+import run.halo.app.handler.theme.config.ThemeConfigResolver;\n+import run.halo.app.handler.theme.config.ThemePropertyResolver;\n import run.halo.app.handler.theme.config.support.ThemeProperty;\n+import run.halo.app.service.OptionService;\n+import run.halo.app.utils.FileUtils;\n import run.halo.app.utils.GitUtils;\n-import run.halo.app.utils.HaloUtils;\n+import run.halo.app.utils.GithubUtils;\n \n-import java.io.IOException;\n-import java.nio.file.Files;\n+import java.io.File;\n import java.nio.file.Path;\n-import java.nio.file.Paths;\n import java.util.*;\n-import java.util.concurrent.atomic.AtomicInteger;\n \n-@RunWith(SpringRunner.class)\n-@SpringBootTest\n-@ActiveProfiles(\"test\")\n-@Slf4j\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({GitUtils.class, GithubUtils.class, FileUtils.class, ThemeServiceImpl.class})\n+@Ignore\n public class ThemeServiceImplTest {\n \n-    @Autowired\n-    private ThemeServiceImpl themeService;\n+    @Mock\n+    private HaloProperties haloProperties;\n \n-    @Test\n-    @Ignore\n-    public void fetchGitTest() throws IOException {\n-        ThemeProperty themeProperty = themeService.fetch(\"https://github.com/halo-dev/halo-theme-pinghsu\");\n-        Assert.assertNotNull(themeProperty);\n-        Path themePath = Paths.get(themeProperty.getThemePath());\n-        if (!Files.exists(themePath)) {\n-            Assert.fail(\"fetch(clone from master) failed.\");\n-        } else {\n-            deleteDir(themePath);\n-        }\n+    @Mock\n+    private OptionService optionService;\n+\n+    @Mock\n+    private AbstractStringCacheStore cacheStore;\n+\n+    @Mock\n+    private ThemeConfigResolver themeConfigResolver;\n+\n+    @Mock\n+    private ThemePropertyResolver themePropertyResolver;\n+\n+    @Mock\n+    private RestTemplate restTemplate;\n+\n+    @Mock\n+    private ApplicationEventPublisher eventPublisher;\n+\n+    @InjectMocks\n+    public ThemeServiceImpl themeService;\n \n+    @Before\n+    public void setUp() throws Exception {\n+        //Static Method\n+        PowerMockito.mockStatic(GithubUtils.class);\n+        PowerMockito.mockStatic(GitUtils.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+\n+        PowerMockito.doReturn(Arrays.asList(\"master\", \"dev\")).when(GitUtils.class, \"getAllBranches\", Mockito.any(String.class));\n+        PowerMockito.doNothing().when(GitUtils.class, \"cloneFromGit\", Mockito.any(String.class), Mockito.any(Path.class));\n+\n+        PowerMockito.doReturn(\"propertyContent\").when(GithubUtils.class, \"accessThemeProperty\", Mockito.any(String.class), Mockito.any(String.class));\n+\n+        PowerMockito.doReturn(new File(\"tmpPath\").toPath()).when(FileUtils.class, \"createTempDirectory\");\n+        PowerMockito.doNothing().when(FileUtils.class, \"deleteFolderQuietly\", Mockito.any(Path.class));\n+\n+        //Method\n+        themeService = PowerMockito.spy(new ThemeServiceImpl(haloProperties, optionService, cacheStore, themeConfigResolver, themePropertyResolver, restTemplate, eventPublisher));\n+\n+        Mockito.doReturn(new ThemeProperty()).when(themePropertyResolver).resolve(Mockito.any(String.class));\n+\n+        Mockito.doNothing().when(eventPublisher).publishEvent(Mockito.any(String.class));\n     }\n \n     @Test\n-    @Ignore\n-    public void fetchZipTest() throws IOException {\n-        ThemeProperty themeProperty = themeService.fetch(\"https://github.com/halo-dev/halo-theme-pinghsu/archive/master.zip\");\n+    public void fetchGitTest() throws Exception {\n+        String uri = \"https://github.com/halo-dev/halo-theme-pinghsu\";\n+        PowerMockito.doNothing().when(themeService, \"downloadZipAndUnzip\", Mockito.any(String.class), Mockito.any(Path.class));\n+        PowerMockito.doReturn(new ThemeProperty()).when(themeService, \"add\", Mockito.any(Path.class));\n+        ThemeProperty themeProperty = themeService.fetch(uri);\n         Assert.assertNotNull(themeProperty);\n-        Path themePath = Paths.get(themeProperty.getThemePath());\n-        if (!Files.exists(themePath)) {\n-            Assert.fail(\"fetch(zip file) failed\");\n-        } else {\n-            deleteDir(themePath);\n-        }\n     }\n \n     @Test\n-    public void fetchBranchesWithValidURL() {\n-        List<ThemeProperty> themeProperties = themeService.fetchBranches(\"https://github.com/halo-dev/halo-theme-hux\");\n-        Assert.assertNotNull(themeProperties);\n+    public void fetchZipTest() throws Exception {\n+        String uri = \"https://github.com/halo-dev/halo-theme-pinghsu/archive/master.zip\";\n+        PowerMockito.doNothing().when(themeService, \"downloadZipAndUnzip\", Mockito.any(String.class), Mockito.any(Path.class));\n+        PowerMockito.doReturn(new ThemeProperty()).when(themeService, \"add\", Mockito.any(Path.class));\n+        ThemeProperty themeProperty = themeService.fetch(uri);\n+        Assert.assertNotNull(themeProperty);\n     }\n \n     @Test\n-    public void fetchBranchesWithInvalidURL() {\n-        List<ThemeProperty> themeProperties = themeService.fetchBranches(\"https://github.com/halo-dev/halo-theme\");\n+    public void fetchBranchesTest() {\n+        String uri = \"https://github.com/halo-dev/halo-theme-hux\";\n+\n+        List<ThemeProperty> themeProperties = themeService.fetchBranches(uri);\n+\n         Assert.assertNotNull(themeProperties);\n-        Assert.assertEquals(themeProperties.size(), 0);\n+        Assert.assertEquals(themeProperties.size(), 2);\n     }\n \n \n     @Test\n-    @Ignore\n-    public void fetchBranchTest() throws IOException {\n-        ThemeProperty themeProperty = themeService.fetchBranch(\"https://github.com/halo-dev/halo-theme-casper\", \"master\");\n+    public void fetchBranchTest() throws Exception {\n+        String uri = \"https://github.com/halo-dev/halo-theme-casper\";\n+        String branch = \"master\";\n+        PowerMockito.doNothing().when(themeService, \"downloadZipAndUnzip\", Mockito.any(String.class), Mockito.any(Path.class));\n+        PowerMockito.doReturn(new ThemeProperty()).when(themeService, \"add\", Mockito.any(Path.class));\n+        ThemeProperty themeProperty = themeService.fetchBranch(uri, branch);\n         Assert.assertNotNull(themeProperty);\n-        Path themePath = Paths.get(themeProperty.getThemePath());\n-        if (!Files.exists(themePath)) {\n-            Assert.fail(\"fetch(branch master) failed\");\n-        } else {\n-            deleteDir(themePath);\n-        }\n     }\n \n     @Test\n-    @Ignore\n-    public void fetchBranchNotMasterTest() throws IOException {\n+    public void fetchLatestReleaseTest() throws Exception {\n         String uri = \"https://github.com/halo-dev/halo-theme-casper\";\n-        List<String> branches = GitUtils.getAllBranches(uri);\n-        Optional<String> optional = branches.stream().filter(b -> !b.equalsIgnoreCase(\"master\")).findFirst();\n-        if (optional.isPresent()) {\n-            ThemeProperty themeProperty = themeService.fetchBranch(uri, optional.get());\n-            Assert.assertNotNull(themeProperty);\n-            Path themePath = Paths.get(themeProperty.getThemePath());\n-            if (!Files.exists(themePath)) {\n-                Assert.fail(\"fetch(branch not master) failed\");\n-            } else {\n-                deleteDir(themePath);\n-            }\n-        }\n-    }\n-\n-    @Test\n-    @Ignore\n-    public void fetchLatestReleaseTest() throws IOException {\n-        ThemeProperty themeProperty = themeService.fetchLatestRelease(\"https://github.com/halo-dev/halo-theme-casper\");\n+        PowerMockito.doNothing().when(themeService, \"downloadZipAndUnzip\", Mockito.any(String.class), Mockito.any(Path.class));\n+        PowerMockito.doReturn(new ThemeProperty()).when(themeService, \"add\", Mockito.any(Path.class));\n+        ThemeProperty themeProperty = themeService.fetchLatestRelease(uri);\n         Assert.assertNotNull(themeProperty);\n-        Path themePath = Paths.get(themeProperty.getThemePath());\n-        if (Files.exists(themePath)) {\n-            Assert.fail(\"fetch(latest release) failed\");\n-        } else {\n-            deleteDir(themePath);\n-        }\n-    }\n-\n-    @Test\n-    @Ignore\n-    public void fetchLatestReleaseWithInvalidURL() {\n-        try {\n-            ThemeProperty themeProperty = themeService.fetchLatestRelease(\"123\");\n-            Assert.fail(\"Exception Expected\");\n-        } catch (Exception e) {\n-        }\n-    }\n-\n-    @Test\n-    @Ignore\n-    public void updateTest() {\n-        Set<ThemeProperty> set = themeService.getThemes();\n-        if (set.size() > 0) {\n-            ThemeProperty themeProperty = themeService.update(set.stream().findFirst().get().getId());\n-            Assert.assertNotNull(themeProperty);\n-            Path themePath = Paths.get(themeProperty.getThemePath());\n-            if (!Files.exists(themePath)) {\n-                Assert.fail(\"update fail: theme folder missing\");\n-            }\n-        }\n     }\n \n     @Test\n-    @Ignore\n-    public void updateWithInvalidId() {\n-        Set<ThemeProperty> set = themeService.getThemes();\n-        String themeId = HaloUtils.randomUUIDWithoutDash();\n-        AtomicInteger has = new AtomicInteger();\n-        while (true) {\n-            set.stream().filter(themeProperty -> StringUtils.equalsIgnoreCase(themeId, themeProperty.getId())).mapToInt(themeProperty -> 1).forEach(has::set);\n-            if (has.get() == 0) break;\n-        }\n-        try {\n-            ThemeProperty themeProperty = themeService.update(themeId);\n-            Assert.fail(\"Exception expected.\");\n-        } catch (Exception e) {\n-        }\n-    }\n-\n-\n-    private static void deleteDir(Path path) throws IOException {\n-        if (Files.isDirectory(path)) {\n-            Arrays.asList(path.toFile().listFiles()).stream().forEach(file -> {\n-                if (file.isDirectory()) {\n-                    try {\n-                        deleteDir(file.toPath());\n-                    } catch (IOException e) {\n-                        e.printStackTrace();\n-                    }\n-                } else {\n-                    file.delete();\n-                }\n-            });\n-        }\n-        Files.deleteIfExists(path);\n+    public void updateTest() throws Exception {\n+        PowerMockito.doNothing().when(themeService, \"downloadZipAndUnzip\", Mockito.any(String.class), Mockito.any(Path.class));\n+        PowerMockito.doReturn(new ThemeProperty()).when(themeService, \"add\", Mockito.any(Path.class));\n+        PowerMockito.doNothing().when(themeService, \"pullFromGit\", Mockito.any(ThemeProperty.class));\n+        PowerMockito.doReturn(new ThemeProperty()).when(themeService, \"getThemeOfNonNullBy\", Mockito.any(String.class));\n+        ThemeProperty themeProperty = themeService.update(\"String\");\n+        Assert.assertNotNull(themeProperty);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxMDM2NA==", "url": "https://github.com/halo-dev/halo/pull/835#discussion_r440310364", "bodyText": "\u5efa\u8bae\u7528 Mockito \u6765\u6d4b\u8bd5\uff0c\u5982\u679c\u76f4\u63a5\u771f\u662f\u8c03\u7528 Github \u53ef\u80fd\u4f1a\u5bfc\u81f4\u5728\u672c\u5730\u6d4b\u8bd5\u975e\u5e38\u7f13\u6162\u751a\u81f3\u76f4\u63a5\u5f02\u5e38\u3002", "author": "JohnNiang", "createdAt": "2020-06-15T16:47:19Z", "path": "src/test/java/run/halo/app/service/impl/ThemeServiceImplTest.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package run.halo.app.service.impl;\n+\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import run.halo.app.handler.theme.config.support.ThemeProperty;\n+import run.halo.app.utils.GitUtils;\n+import run.halo.app.utils.HaloUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+@ActiveProfiles(\"test\")\n+@Slf4j\n+public class ThemeServiceImplTest {", "originalCommit": "bd2db3670b28e22e672bb917ce4a279573b7b46c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f417f32873389ae6116901c558ccac8110adbd7", "chunk": "diff --git a/src/test/java/run/halo/app/service/impl/ThemeServiceImplTest.java b/src/test/java/run/halo/app/service/impl/ThemeServiceImplTest.java\nindex cad3df88..d2b7448c 100644\n--- a/src/test/java/run/halo/app/service/impl/ThemeServiceImplTest.java\n+++ b/src/test/java/run/halo/app/service/impl/ThemeServiceImplTest.java\n\n@@ -1,177 +1,138 @@\n package run.halo.app.service.impl;\n \n \n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.commons.lang3.StringUtils;\n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.test.context.ActiveProfiles;\n-import org.springframework.test.context.junit4.SpringRunner;\n+import org.mockito.*;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.web.client.RestTemplate;\n+import run.halo.app.cache.AbstractStringCacheStore;\n+import run.halo.app.config.properties.HaloProperties;\n+import run.halo.app.handler.theme.config.ThemeConfigResolver;\n+import run.halo.app.handler.theme.config.ThemePropertyResolver;\n import run.halo.app.handler.theme.config.support.ThemeProperty;\n+import run.halo.app.service.OptionService;\n+import run.halo.app.utils.FileUtils;\n import run.halo.app.utils.GitUtils;\n-import run.halo.app.utils.HaloUtils;\n+import run.halo.app.utils.GithubUtils;\n \n-import java.io.IOException;\n-import java.nio.file.Files;\n+import java.io.File;\n import java.nio.file.Path;\n-import java.nio.file.Paths;\n import java.util.*;\n-import java.util.concurrent.atomic.AtomicInteger;\n \n-@RunWith(SpringRunner.class)\n-@SpringBootTest\n-@ActiveProfiles(\"test\")\n-@Slf4j\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({GitUtils.class, GithubUtils.class, FileUtils.class, ThemeServiceImpl.class})\n+@Ignore\n public class ThemeServiceImplTest {\n \n-    @Autowired\n-    private ThemeServiceImpl themeService;\n+    @Mock\n+    private HaloProperties haloProperties;\n \n-    @Test\n-    @Ignore\n-    public void fetchGitTest() throws IOException {\n-        ThemeProperty themeProperty = themeService.fetch(\"https://github.com/halo-dev/halo-theme-pinghsu\");\n-        Assert.assertNotNull(themeProperty);\n-        Path themePath = Paths.get(themeProperty.getThemePath());\n-        if (!Files.exists(themePath)) {\n-            Assert.fail(\"fetch(clone from master) failed.\");\n-        } else {\n-            deleteDir(themePath);\n-        }\n+    @Mock\n+    private OptionService optionService;\n+\n+    @Mock\n+    private AbstractStringCacheStore cacheStore;\n+\n+    @Mock\n+    private ThemeConfigResolver themeConfigResolver;\n+\n+    @Mock\n+    private ThemePropertyResolver themePropertyResolver;\n+\n+    @Mock\n+    private RestTemplate restTemplate;\n+\n+    @Mock\n+    private ApplicationEventPublisher eventPublisher;\n+\n+    @InjectMocks\n+    public ThemeServiceImpl themeService;\n \n+    @Before\n+    public void setUp() throws Exception {\n+        //Static Method\n+        PowerMockito.mockStatic(GithubUtils.class);\n+        PowerMockito.mockStatic(GitUtils.class);\n+        PowerMockito.mockStatic(FileUtils.class);\n+\n+        PowerMockito.doReturn(Arrays.asList(\"master\", \"dev\")).when(GitUtils.class, \"getAllBranches\", Mockito.any(String.class));\n+        PowerMockito.doNothing().when(GitUtils.class, \"cloneFromGit\", Mockito.any(String.class), Mockito.any(Path.class));\n+\n+        PowerMockito.doReturn(\"propertyContent\").when(GithubUtils.class, \"accessThemeProperty\", Mockito.any(String.class), Mockito.any(String.class));\n+\n+        PowerMockito.doReturn(new File(\"tmpPath\").toPath()).when(FileUtils.class, \"createTempDirectory\");\n+        PowerMockito.doNothing().when(FileUtils.class, \"deleteFolderQuietly\", Mockito.any(Path.class));\n+\n+        //Method\n+        themeService = PowerMockito.spy(new ThemeServiceImpl(haloProperties, optionService, cacheStore, themeConfigResolver, themePropertyResolver, restTemplate, eventPublisher));\n+\n+        Mockito.doReturn(new ThemeProperty()).when(themePropertyResolver).resolve(Mockito.any(String.class));\n+\n+        Mockito.doNothing().when(eventPublisher).publishEvent(Mockito.any(String.class));\n     }\n \n     @Test\n-    @Ignore\n-    public void fetchZipTest() throws IOException {\n-        ThemeProperty themeProperty = themeService.fetch(\"https://github.com/halo-dev/halo-theme-pinghsu/archive/master.zip\");\n+    public void fetchGitTest() throws Exception {\n+        String uri = \"https://github.com/halo-dev/halo-theme-pinghsu\";\n+        PowerMockito.doNothing().when(themeService, \"downloadZipAndUnzip\", Mockito.any(String.class), Mockito.any(Path.class));\n+        PowerMockito.doReturn(new ThemeProperty()).when(themeService, \"add\", Mockito.any(Path.class));\n+        ThemeProperty themeProperty = themeService.fetch(uri);\n         Assert.assertNotNull(themeProperty);\n-        Path themePath = Paths.get(themeProperty.getThemePath());\n-        if (!Files.exists(themePath)) {\n-            Assert.fail(\"fetch(zip file) failed\");\n-        } else {\n-            deleteDir(themePath);\n-        }\n     }\n \n     @Test\n-    public void fetchBranchesWithValidURL() {\n-        List<ThemeProperty> themeProperties = themeService.fetchBranches(\"https://github.com/halo-dev/halo-theme-hux\");\n-        Assert.assertNotNull(themeProperties);\n+    public void fetchZipTest() throws Exception {\n+        String uri = \"https://github.com/halo-dev/halo-theme-pinghsu/archive/master.zip\";\n+        PowerMockito.doNothing().when(themeService, \"downloadZipAndUnzip\", Mockito.any(String.class), Mockito.any(Path.class));\n+        PowerMockito.doReturn(new ThemeProperty()).when(themeService, \"add\", Mockito.any(Path.class));\n+        ThemeProperty themeProperty = themeService.fetch(uri);\n+        Assert.assertNotNull(themeProperty);\n     }\n \n     @Test\n-    public void fetchBranchesWithInvalidURL() {\n-        List<ThemeProperty> themeProperties = themeService.fetchBranches(\"https://github.com/halo-dev/halo-theme\");\n+    public void fetchBranchesTest() {\n+        String uri = \"https://github.com/halo-dev/halo-theme-hux\";\n+\n+        List<ThemeProperty> themeProperties = themeService.fetchBranches(uri);\n+\n         Assert.assertNotNull(themeProperties);\n-        Assert.assertEquals(themeProperties.size(), 0);\n+        Assert.assertEquals(themeProperties.size(), 2);\n     }\n \n \n     @Test\n-    @Ignore\n-    public void fetchBranchTest() throws IOException {\n-        ThemeProperty themeProperty = themeService.fetchBranch(\"https://github.com/halo-dev/halo-theme-casper\", \"master\");\n+    public void fetchBranchTest() throws Exception {\n+        String uri = \"https://github.com/halo-dev/halo-theme-casper\";\n+        String branch = \"master\";\n+        PowerMockito.doNothing().when(themeService, \"downloadZipAndUnzip\", Mockito.any(String.class), Mockito.any(Path.class));\n+        PowerMockito.doReturn(new ThemeProperty()).when(themeService, \"add\", Mockito.any(Path.class));\n+        ThemeProperty themeProperty = themeService.fetchBranch(uri, branch);\n         Assert.assertNotNull(themeProperty);\n-        Path themePath = Paths.get(themeProperty.getThemePath());\n-        if (!Files.exists(themePath)) {\n-            Assert.fail(\"fetch(branch master) failed\");\n-        } else {\n-            deleteDir(themePath);\n-        }\n     }\n \n     @Test\n-    @Ignore\n-    public void fetchBranchNotMasterTest() throws IOException {\n+    public void fetchLatestReleaseTest() throws Exception {\n         String uri = \"https://github.com/halo-dev/halo-theme-casper\";\n-        List<String> branches = GitUtils.getAllBranches(uri);\n-        Optional<String> optional = branches.stream().filter(b -> !b.equalsIgnoreCase(\"master\")).findFirst();\n-        if (optional.isPresent()) {\n-            ThemeProperty themeProperty = themeService.fetchBranch(uri, optional.get());\n-            Assert.assertNotNull(themeProperty);\n-            Path themePath = Paths.get(themeProperty.getThemePath());\n-            if (!Files.exists(themePath)) {\n-                Assert.fail(\"fetch(branch not master) failed\");\n-            } else {\n-                deleteDir(themePath);\n-            }\n-        }\n-    }\n-\n-    @Test\n-    @Ignore\n-    public void fetchLatestReleaseTest() throws IOException {\n-        ThemeProperty themeProperty = themeService.fetchLatestRelease(\"https://github.com/halo-dev/halo-theme-casper\");\n+        PowerMockito.doNothing().when(themeService, \"downloadZipAndUnzip\", Mockito.any(String.class), Mockito.any(Path.class));\n+        PowerMockito.doReturn(new ThemeProperty()).when(themeService, \"add\", Mockito.any(Path.class));\n+        ThemeProperty themeProperty = themeService.fetchLatestRelease(uri);\n         Assert.assertNotNull(themeProperty);\n-        Path themePath = Paths.get(themeProperty.getThemePath());\n-        if (Files.exists(themePath)) {\n-            Assert.fail(\"fetch(latest release) failed\");\n-        } else {\n-            deleteDir(themePath);\n-        }\n-    }\n-\n-    @Test\n-    @Ignore\n-    public void fetchLatestReleaseWithInvalidURL() {\n-        try {\n-            ThemeProperty themeProperty = themeService.fetchLatestRelease(\"123\");\n-            Assert.fail(\"Exception Expected\");\n-        } catch (Exception e) {\n-        }\n-    }\n-\n-    @Test\n-    @Ignore\n-    public void updateTest() {\n-        Set<ThemeProperty> set = themeService.getThemes();\n-        if (set.size() > 0) {\n-            ThemeProperty themeProperty = themeService.update(set.stream().findFirst().get().getId());\n-            Assert.assertNotNull(themeProperty);\n-            Path themePath = Paths.get(themeProperty.getThemePath());\n-            if (!Files.exists(themePath)) {\n-                Assert.fail(\"update fail: theme folder missing\");\n-            }\n-        }\n     }\n \n     @Test\n-    @Ignore\n-    public void updateWithInvalidId() {\n-        Set<ThemeProperty> set = themeService.getThemes();\n-        String themeId = HaloUtils.randomUUIDWithoutDash();\n-        AtomicInteger has = new AtomicInteger();\n-        while (true) {\n-            set.stream().filter(themeProperty -> StringUtils.equalsIgnoreCase(themeId, themeProperty.getId())).mapToInt(themeProperty -> 1).forEach(has::set);\n-            if (has.get() == 0) break;\n-        }\n-        try {\n-            ThemeProperty themeProperty = themeService.update(themeId);\n-            Assert.fail(\"Exception expected.\");\n-        } catch (Exception e) {\n-        }\n-    }\n-\n-\n-    private static void deleteDir(Path path) throws IOException {\n-        if (Files.isDirectory(path)) {\n-            Arrays.asList(path.toFile().listFiles()).stream().forEach(file -> {\n-                if (file.isDirectory()) {\n-                    try {\n-                        deleteDir(file.toPath());\n-                    } catch (IOException e) {\n-                        e.printStackTrace();\n-                    }\n-                } else {\n-                    file.delete();\n-                }\n-            });\n-        }\n-        Files.deleteIfExists(path);\n+    public void updateTest() throws Exception {\n+        PowerMockito.doNothing().when(themeService, \"downloadZipAndUnzip\", Mockito.any(String.class), Mockito.any(Path.class));\n+        PowerMockito.doReturn(new ThemeProperty()).when(themeService, \"add\", Mockito.any(Path.class));\n+        PowerMockito.doNothing().when(themeService, \"pullFromGit\", Mockito.any(ThemeProperty.class));\n+        PowerMockito.doReturn(new ThemeProperty()).when(themeService, \"getThemeOfNonNullBy\", Mockito.any(String.class));\n+        ThemeProperty themeProperty = themeService.update(\"String\");\n+        Assert.assertNotNull(themeProperty);\n     }\n }\n"}}, {"oid": "5f417f32873389ae6116901c558ccac8110adbd7", "url": "https://github.com/halo-dev/halo/commit/5f417f32873389ae6116901c558ccac8110adbd7", "message": "mockito test", "committedDate": "2020-06-19T12:49:10Z", "type": "commit"}, {"oid": "4bbb20cce205c303de06588244da8c9fc62a141f", "url": "https://github.com/halo-dev/halo/commit/4bbb20cce205c303de06588244da8c9fc62a141f", "message": "ignored network related test", "committedDate": "2020-06-19T13:53:59Z", "type": "commit"}, {"oid": "197205a35e459962c4692bb0582ac9d06f788ddd", "url": "https://github.com/halo-dev/halo/commit/197205a35e459962c4692bb0582ac9d06f788ddd", "message": "Merge branch 'master' into master", "committedDate": "2020-06-28T02:20:12Z", "type": "commit"}, {"oid": "12b59602cf491b2ddea76b523d4476367b7ad16a", "url": "https://github.com/halo-dev/halo/commit/12b59602cf491b2ddea76b523d4476367b7ad16a", "message": "resolve conflict", "committedDate": "2020-06-28T06:27:47Z", "type": "commit"}]}