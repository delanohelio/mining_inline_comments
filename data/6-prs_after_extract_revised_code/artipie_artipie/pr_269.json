{"pr_number": 269, "pr_title": "#231 - Added ResponseMetricsSlice", "pr_createdAt": "2020-07-07T10:27:57Z", "pr_url": "https://github.com/artipie/artipie/pull/269", "timeline": [{"oid": "1daa6fc552e942d99ede1ab19249aa95d74d7db0", "url": "https://github.com/artipie/artipie/commit/1daa6fc552e942d99ede1ab19249aa95d74d7db0", "message": "#231 - Added ResponseMetricsSlice", "committedDate": "2020-07-07T10:57:26Z", "type": "forcePushed"}, {"oid": "1daa6fc552e942d99ede1ab19249aa95d74d7db0", "url": "https://github.com/artipie/artipie/commit/1daa6fc552e942d99ede1ab19249aa95d74d7db0", "message": "#231 - Added ResponseMetricsSlice", "committedDate": "2020-07-07T10:57:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3NjA5NA==", "url": "https://github.com/artipie/artipie/pull/269#discussion_r450776094", "bodyText": "@olegmoz let's send request twice to verify that counter does change incrementally", "author": "Vatavuk", "createdAt": "2020-07-07T10:50:16Z", "path": "src/test/java/com/artipie/ResponseMetricsSliceTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.artipie.http.Headers;\n+import com.artipie.http.Response;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqMethod;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import com.artipie.metrics.memory.InMemoryMetrics;\n+import io.reactivex.Flowable;\n+import java.util.concurrent.CompletableFuture;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test for {@link ResponseMetricsSlice}.\n+ *\n+ * @since 0.9\n+ */\n+class ResponseMetricsSliceTest {\n+\n+    /**\n+     * Metrics collected in tests.\n+     */\n+    private InMemoryMetrics metrics;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        this.metrics = new InMemoryMetrics();\n+    }\n+\n+    @Test\n+    public void shouldReportSuccessResponse() {\n+        this.send(RqMethod.GET, new RsWithStatus(RsStatus.OK));", "originalCommit": "bc590fe365d655fab1efd6286b13baad56b47cdf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54e0f85b097343391e435f17ae3b70a954f54042", "chunk": "diff --git a/src/test/java/com/artipie/ResponseMetricsSliceTest.java b/src/test/java/com/artipie/ResponseMetricsSliceTest.java\nindex f7f8265..36a4102 100644\n--- a/src/test/java/com/artipie/ResponseMetricsSliceTest.java\n+++ b/src/test/java/com/artipie/ResponseMetricsSliceTest.java\n\n@@ -56,19 +56,31 @@ class ResponseMetricsSliceTest {\n \n     @Test\n     public void shouldReportSuccessResponse() {\n+        this.send(RqMethod.GET, new RsWithStatus(RsStatus.OK));\n         this.send(RqMethod.GET, new RsWithStatus(RsStatus.OK));\n         MatcherAssert.assertThat(\n-            this.metrics.counter(\"get.success\").value(),\n-            new IsEqual<>(1L)\n+            this.metrics.counter(\"http.response.get.success\").value(),\n+            new IsEqual<>(2L)\n         );\n     }\n \n     @Test\n-    public void shouldReportErrorResponse() {\n+    public void shouldReportInternalErrorResponse() {\n+        this.send(RqMethod.POST, new RsWithStatus(RsStatus.INTERNAL_ERROR));\n         this.send(RqMethod.POST, new RsWithStatus(RsStatus.INTERNAL_ERROR));\n         MatcherAssert.assertThat(\n-            this.metrics.counter(\"post.error\").value(),\n-            new IsEqual<>(1L)\n+            this.metrics.counter(\"http.response.post.error\").value(),\n+            new IsEqual<>(2L)\n+        );\n+    }\n+\n+    @Test\n+    public void shouldReportNotFoundResponse() {\n+        this.send(RqMethod.HEAD, new RsWithStatus(RsStatus.NOT_FOUND));\n+        this.send(RqMethod.HEAD, new RsWithStatus(RsStatus.NOT_FOUND));\n+        MatcherAssert.assertThat(\n+            this.metrics.counter(\"http.response.head.error\").value(),\n+            new IsEqual<>(2L)\n         );\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3NjEyMQ==", "url": "https://github.com/artipie/artipie/pull/269#discussion_r450776121", "bodyText": "@olegmoz let's send request twice to verify that counter does change incrementally", "author": "Vatavuk", "createdAt": "2020-07-07T10:50:20Z", "path": "src/test/java/com/artipie/ResponseMetricsSliceTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.artipie.http.Headers;\n+import com.artipie.http.Response;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqMethod;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import com.artipie.metrics.memory.InMemoryMetrics;\n+import io.reactivex.Flowable;\n+import java.util.concurrent.CompletableFuture;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test for {@link ResponseMetricsSlice}.\n+ *\n+ * @since 0.9\n+ */\n+class ResponseMetricsSliceTest {\n+\n+    /**\n+     * Metrics collected in tests.\n+     */\n+    private InMemoryMetrics metrics;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        this.metrics = new InMemoryMetrics();\n+    }\n+\n+    @Test\n+    public void shouldReportSuccessResponse() {\n+        this.send(RqMethod.GET, new RsWithStatus(RsStatus.OK));\n+        MatcherAssert.assertThat(\n+            this.metrics.counter(\"get.success\").value(),\n+            new IsEqual<>(1L)\n+        );\n+    }\n+\n+    @Test\n+    public void shouldReportErrorResponse() {\n+        this.send(RqMethod.POST, new RsWithStatus(RsStatus.INTERNAL_ERROR));", "originalCommit": "bc590fe365d655fab1efd6286b13baad56b47cdf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54e0f85b097343391e435f17ae3b70a954f54042", "chunk": "diff --git a/src/test/java/com/artipie/ResponseMetricsSliceTest.java b/src/test/java/com/artipie/ResponseMetricsSliceTest.java\nindex f7f8265..36a4102 100644\n--- a/src/test/java/com/artipie/ResponseMetricsSliceTest.java\n+++ b/src/test/java/com/artipie/ResponseMetricsSliceTest.java\n\n@@ -56,19 +56,31 @@ class ResponseMetricsSliceTest {\n \n     @Test\n     public void shouldReportSuccessResponse() {\n+        this.send(RqMethod.GET, new RsWithStatus(RsStatus.OK));\n         this.send(RqMethod.GET, new RsWithStatus(RsStatus.OK));\n         MatcherAssert.assertThat(\n-            this.metrics.counter(\"get.success\").value(),\n-            new IsEqual<>(1L)\n+            this.metrics.counter(\"http.response.get.success\").value(),\n+            new IsEqual<>(2L)\n         );\n     }\n \n     @Test\n-    public void shouldReportErrorResponse() {\n+    public void shouldReportInternalErrorResponse() {\n+        this.send(RqMethod.POST, new RsWithStatus(RsStatus.INTERNAL_ERROR));\n         this.send(RqMethod.POST, new RsWithStatus(RsStatus.INTERNAL_ERROR));\n         MatcherAssert.assertThat(\n-            this.metrics.counter(\"post.error\").value(),\n-            new IsEqual<>(1L)\n+            this.metrics.counter(\"http.response.post.error\").value(),\n+            new IsEqual<>(2L)\n+        );\n+    }\n+\n+    @Test\n+    public void shouldReportNotFoundResponse() {\n+        this.send(RqMethod.HEAD, new RsWithStatus(RsStatus.NOT_FOUND));\n+        this.send(RqMethod.HEAD, new RsWithStatus(RsStatus.NOT_FOUND));\n+        MatcherAssert.assertThat(\n+            this.metrics.counter(\"http.response.head.error\").value(),\n+            new IsEqual<>(2L)\n         );\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4MzQyMw==", "url": "https://github.com/artipie/artipie/pull/269#discussion_r450783423", "bodyText": "@olegmoz add one test for 4xx status code", "author": "Vatavuk", "createdAt": "2020-07-07T11:04:55Z", "path": "src/test/java/com/artipie/ResponseMetricsSliceTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.artipie.http.Headers;\n+import com.artipie.http.Response;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqMethod;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import com.artipie.metrics.memory.InMemoryMetrics;\n+import io.reactivex.Flowable;\n+import java.util.concurrent.CompletableFuture;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test for {@link ResponseMetricsSlice}.\n+ *\n+ * @since 0.9\n+ */\n+class ResponseMetricsSliceTest {\n+\n+    /**\n+     * Metrics collected in tests.\n+     */\n+    private InMemoryMetrics metrics;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        this.metrics = new InMemoryMetrics();\n+    }\n+\n+    @Test\n+    public void shouldReportSuccessResponse() {\n+        this.send(RqMethod.GET, new RsWithStatus(RsStatus.OK));\n+        MatcherAssert.assertThat(\n+            this.metrics.counter(\"get.success\").value(),\n+            new IsEqual<>(1L)\n+        );\n+    }\n+\n+    @Test\n+    public void shouldReportErrorResponse() {", "originalCommit": "1daa6fc552e942d99ede1ab19249aa95d74d7db0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54e0f85b097343391e435f17ae3b70a954f54042", "chunk": "diff --git a/src/test/java/com/artipie/ResponseMetricsSliceTest.java b/src/test/java/com/artipie/ResponseMetricsSliceTest.java\nindex f7f8265..36a4102 100644\n--- a/src/test/java/com/artipie/ResponseMetricsSliceTest.java\n+++ b/src/test/java/com/artipie/ResponseMetricsSliceTest.java\n\n@@ -56,19 +56,31 @@ class ResponseMetricsSliceTest {\n \n     @Test\n     public void shouldReportSuccessResponse() {\n+        this.send(RqMethod.GET, new RsWithStatus(RsStatus.OK));\n         this.send(RqMethod.GET, new RsWithStatus(RsStatus.OK));\n         MatcherAssert.assertThat(\n-            this.metrics.counter(\"get.success\").value(),\n-            new IsEqual<>(1L)\n+            this.metrics.counter(\"http.response.get.success\").value(),\n+            new IsEqual<>(2L)\n         );\n     }\n \n     @Test\n-    public void shouldReportErrorResponse() {\n+    public void shouldReportInternalErrorResponse() {\n+        this.send(RqMethod.POST, new RsWithStatus(RsStatus.INTERNAL_ERROR));\n         this.send(RqMethod.POST, new RsWithStatus(RsStatus.INTERNAL_ERROR));\n         MatcherAssert.assertThat(\n-            this.metrics.counter(\"post.error\").value(),\n-            new IsEqual<>(1L)\n+            this.metrics.counter(\"http.response.post.error\").value(),\n+            new IsEqual<>(2L)\n+        );\n+    }\n+\n+    @Test\n+    public void shouldReportNotFoundResponse() {\n+        this.send(RqMethod.HEAD, new RsWithStatus(RsStatus.NOT_FOUND));\n+        this.send(RqMethod.HEAD, new RsWithStatus(RsStatus.NOT_FOUND));\n+        MatcherAssert.assertThat(\n+            this.metrics.counter(\"http.response.head.error\").value(),\n+            new IsEqual<>(2L)\n         );\n     }\n \n"}}, {"oid": "54e0f85b097343391e435f17ae3b70a954f54042", "url": "https://github.com/artipie/artipie/commit/54e0f85b097343391e435f17ae3b70a954f54042", "message": "#231 - Changes by review", "committedDate": "2020-07-07T11:15:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MDY1Mw==", "url": "https://github.com/artipie/artipie/pull/269#discussion_r450790653", "bodyText": "@olegmoz puzzles are grouped by indentation, like python code. It should be:\n@todo #213:30min Puzzle1\n Puzzle1 body line 1\n Puzzle1 body line 2\n@todo #231:30min Puzzle2\n Puzzle2 body line 1\n Puzzle2 body line 2", "author": "g4s8", "createdAt": "2020-07-07T11:19:58Z", "path": "src/main/java/com/artipie/ResponseMetricsSlice.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.metrics.Metrics;\n+import java.nio.ByteBuffer;\n+import java.util.Locale;\n+import java.util.Map;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice reporting response metrics.\n+ * Requests and responses are forwarded to origin {@link Slice}.\n+ * Returned response reported to metrics as success or error if it's status code is 4xx or 5xx.\n+ *\n+ * @since 0.9\n+ * @todo #231:30min Test request and response forwarding in `ResponseMetricsSlice`.\n+ * Test that request coming to `ResponseMetricsSlice` are forwarded as-is to origin slice,\n+ * response generated by origin slice is sent to connection as-is.\n+ * @todo #231:30min Report exceptions as errors in `ResponseMetricsSlice`.\n+ * In case of exceptions in origin slice handling or sending to `Connection` nothing is reported\n+ * to `Metrics`. It needs to be fixed, so if origin slice fails or we failed to send response\n+ * then error is sent to `Metrics`.", "originalCommit": "54e0f85b097343391e435f17ae3b70a954f54042", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwNjY0Mg==", "url": "https://github.com/artipie/artipie/pull/269#discussion_r450806642", "bodyText": "@g4s8 fixed it, thanks", "author": "olegmoz", "createdAt": "2020-07-07T11:52:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MDY1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7ccf45b8eccdee363a0db1d8df40c3a6ec9fc6c8", "chunk": "diff --git a/src/main/java/com/artipie/ResponseMetricsSlice.java b/src/main/java/com/artipie/ResponseMetricsSlice.java\nindex b2c834f..a10db5e 100644\n--- a/src/main/java/com/artipie/ResponseMetricsSlice.java\n+++ b/src/main/java/com/artipie/ResponseMetricsSlice.java\n\n@@ -40,12 +40,12 @@ import org.reactivestreams.Publisher;\n  *\n  * @since 0.9\n  * @todo #231:30min Test request and response forwarding in `ResponseMetricsSlice`.\n- * Test that request coming to `ResponseMetricsSlice` are forwarded as-is to origin slice,\n- * response generated by origin slice is sent to connection as-is.\n+ *  Test that request coming to `ResponseMetricsSlice` are forwarded as-is to origin slice,\n+ *  response generated by origin slice is sent to connection as-is.\n  * @todo #231:30min Report exceptions as errors in `ResponseMetricsSlice`.\n- * In case of exceptions in origin slice handling or sending to `Connection` nothing is reported\n- * to `Metrics`. It needs to be fixed, so if origin slice fails or we failed to send response\n- * then error is sent to `Metrics`.\n+ *  In case of exceptions in origin slice handling or sending to `Connection` nothing is reported\n+ *  to `Metrics`. It needs to be fixed, so if origin slice fails or we failed to send response\n+ *  then error is sent to `Metrics`.\n  */\n public final class ResponseMetricsSlice implements Slice {\n \n"}}, {"oid": "7ccf45b8eccdee363a0db1d8df40c3a6ec9fc6c8", "url": "https://github.com/artipie/artipie/commit/7ccf45b8eccdee363a0db1d8df40c3a6ec9fc6c8", "message": "#231 - Puzzles formatting fixed", "committedDate": "2020-07-07T11:52:21Z", "type": "commit"}]}