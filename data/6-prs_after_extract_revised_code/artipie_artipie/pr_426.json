{"pr_number": 426, "pr_title": "Collected traffic metrics from requests and responses", "pr_createdAt": "2020-08-07T07:47:21Z", "pr_url": "https://github.com/artipie/artipie/pull/426", "timeline": [{"oid": "00f3ecddf3f66d79ad288001265cfee1786d16ec", "url": "https://github.com/artipie/artipie/commit/00f3ecddf3f66d79ad288001265cfee1786d16ec", "message": "#425 - collected traffic metrics from requests and responses", "committedDate": "2020-08-07T07:45:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg4NjkyMA==", "url": "https://github.com/artipie/artipie/pull/426#discussion_r466886920", "bodyText": "@g4s8 you may pass Counter to this class instead of two fields", "author": "olegmoz", "createdAt": "2020-08-07T08:03:48Z", "path": "src/main/java/com/artipie/http/TrafficMetricSlice.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http;\n+\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.metrics.Metrics;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Calculated uploaded and downloaded body size for all requests.\n+ * @since 0.10\n+ */\n+public final class TrafficMetricSlice implements Slice {\n+\n+    /**\n+     * Origin slice.\n+     */\n+    private final Slice origin;\n+\n+    /**\n+     * Metrics to update.\n+     */\n+    private final Metrics metrics;\n+\n+    /**\n+     * Update traffic metrics on requests and responses.\n+     * @param origin Origin slice to decorate\n+     * @param metrics Metrics to update\n+     */\n+    public TrafficMetricSlice(final Slice origin, final Metrics metrics) {\n+        this.origin = origin;\n+        this.metrics = metrics;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> head,\n+        final Publisher<ByteBuffer> body) {\n+        return new MetricsResponse(\n+            this.origin.response(\n+                line, head,\n+                new MetricsPublisher(body, this.metrics, \"request.body.size\")\n+            ),\n+            this.metrics\n+        );\n+    }\n+\n+    /**\n+     * Response which sends itself to connection with metrics.\n+     * @since 0.10\n+     */\n+    private static final class MetricsResponse implements Response {\n+\n+        /**\n+         * Origin response.\n+         */\n+        private final Response origin;\n+\n+        /**\n+         * Metrics to update.\n+         */\n+        private final Metrics metrics;\n+\n+        /**\n+         * Wraps response.\n+         * @param response Origin response\n+         * @param metrics Metrics to update\n+         */\n+        MetricsResponse(final Response response, final Metrics metrics) {\n+            this.origin = response;\n+            this.metrics = metrics;\n+        }\n+\n+        @Override\n+        public CompletionStage<Void> send(final Connection connection) {\n+            return this.origin.send(new MetricsConnection(connection, this.metrics));\n+        }\n+\n+        /**\n+         * Response connection which updates metrics on accept.\n+         * @since 0.10\n+         */\n+        private static final class MetricsConnection implements Connection {\n+\n+            /**\n+             * Origin connection.\n+             */\n+            private final Connection origin;\n+\n+            /**\n+             * Metrics to update.\n+             */\n+            private final Metrics metrics;\n+\n+            /**\n+             * Wrap connection.\n+             * @param origin Origin connection\n+             * @param metrics Metrics to send\n+             */\n+            MetricsConnection(final Connection origin, final Metrics metrics) {\n+                this.origin = origin;\n+                this.metrics = metrics;\n+            }\n+\n+            @Override\n+            public CompletionStage<Void> accept(final RsStatus status, final Headers headers,\n+                final Publisher<ByteBuffer> body) {\n+                return this.origin.accept(\n+                    status, headers,\n+                    new MetricsPublisher(body, this.metrics, \"response.body.size\")\n+                );\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Byte-buffer publisher which decorates subscriber on subscribe with\n+     * {@link MetricsSubscriber}.\n+     * @since 0.10\n+     */\n+    private static final class MetricsPublisher implements Publisher<ByteBuffer> {\n+\n+        /**\n+         * Origin publisher.\n+         */\n+        private final Publisher<ByteBuffer> origin;\n+\n+        /**\n+         * Metrics to update.\n+         */\n+        private final Metrics metrics;\n+\n+        /**\n+         * Metrics name to update.\n+         */\n+        private final String name;", "originalCommit": "00f3ecddf3f66d79ad288001265cfee1786d16ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc1edb9da949e0a61b38d65e8b778f8d2ae1f47f", "chunk": "diff --git a/src/main/java/com/artipie/http/TrafficMetricSlice.java b/src/main/java/com/artipie/http/TrafficMetricSlice.java\nindex 211f669..bbe63e3 100644\n--- a/src/main/java/com/artipie/http/TrafficMetricSlice.java\n+++ b/src/main/java/com/artipie/http/TrafficMetricSlice.java\n\n@@ -24,6 +24,7 @@\n package com.artipie.http;\n \n import com.artipie.http.rs.RsStatus;\n+import com.artipie.metrics.Counter;\n import com.artipie.metrics.Metrics;\n import java.nio.ByteBuffer;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg4ODM1NA==", "url": "https://github.com/artipie/artipie/pull/426#discussion_r466888354", "bodyText": "@g4s8 it seems that this code block is not needed and so may be removed. It would be even better to throw an exception here, because we do not expect the slice to update any gauges.", "author": "olegmoz", "createdAt": "2020-08-07T08:06:49Z", "path": "src/test/java/com/artipie/http/TrafficMetricSliceTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http;\n+\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqMethod;\n+import com.artipie.http.rs.RsWithBody;\n+import com.artipie.metrics.Metrics;\n+import com.artipie.metrics.memory.InMemoryMetrics;\n+import com.artipie.metrics.publish.MetricsOutput;\n+import hu.akarnokd.rxjava2.interop.CompletableInterop;\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link TrafficMetricSlice}.\n+ *\n+ * @since 0.10\n+ */\n+final class TrafficMetricSliceTest {\n+\n+    /**\n+     * Request metrics key.\n+     */\n+    private static final String KEY_REQ = \"request.body.size\";\n+\n+    /**\n+     * Response metrics key.\n+     */\n+    private static final String KEY_RSP = \"response.body.size\";\n+\n+    @Test\n+    void updatesMetrics() throws Exception {\n+        final Metrics metrics = new InMemoryMetrics();\n+        final int size = 100;\n+        new TrafficMetricSlice((line, head, body) -> new RsWithBody(body), metrics)\n+            .response(\n+                new RequestLine(RqMethod.GET, \"/foo\").toString(),\n+                Collections.emptyList(),\n+                Flowable.just(ByteBuffer.wrap(new byte[size]))\n+            )\n+            .send(\n+                (status, headers, body) ->\n+                    Flowable.fromPublisher(body).ignoreElements().to(CompletableInterop.await())\n+            ).toCompletableFuture().get();\n+        final AtomicLong request = new AtomicLong();\n+        final AtomicLong response = new AtomicLong();\n+        metrics.publish(\n+            // @checkstyle AnonInnerLengthCheck (22 lines)\n+            new MetricsOutput() {\n+                @Override\n+                public void counters(final Map<String, Long> data) {\n+                    if (data.containsKey(TrafficMetricSliceTest.KEY_REQ)) {\n+                        request.addAndGet(data.get(TrafficMetricSliceTest.KEY_REQ));\n+                    }\n+                    if (data.containsKey(TrafficMetricSliceTest.KEY_RSP)) {\n+                        response.addAndGet(data.get(TrafficMetricSliceTest.KEY_RSP));\n+                    }\n+                }\n+\n+                @Override\n+                public void gauges(final Map<String, Long> data) {\n+                    if (data.containsKey(TrafficMetricSliceTest.KEY_REQ)) {\n+                        request.set(data.get(TrafficMetricSliceTest.KEY_REQ));\n+                    }\n+                    if (data.containsKey(TrafficMetricSliceTest.KEY_RSP)) {\n+                        response.set(data.get(TrafficMetricSliceTest.KEY_RSP));\n+                    }", "originalCommit": "00f3ecddf3f66d79ad288001265cfee1786d16ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc1edb9da949e0a61b38d65e8b778f8d2ae1f47f", "chunk": "diff --git a/src/test/java/com/artipie/http/TrafficMetricSliceTest.java b/src/test/java/com/artipie/http/TrafficMetricSliceTest.java\nindex 507aab5..2a5f3eb 100644\n--- a/src/test/java/com/artipie/http/TrafficMetricSliceTest.java\n+++ b/src/test/java/com/artipie/http/TrafficMetricSliceTest.java\n\n@@ -28,13 +28,11 @@ import com.artipie.http.rq.RqMethod;\n import com.artipie.http.rs.RsWithBody;\n import com.artipie.metrics.Metrics;\n import com.artipie.metrics.memory.InMemoryMetrics;\n-import com.artipie.metrics.publish.MetricsOutput;\n+import com.artipie.metrics.memory.TestMetricsOutput;\n import hu.akarnokd.rxjava2.interop.CompletableInterop;\n import io.reactivex.Flowable;\n import java.nio.ByteBuffer;\n import java.util.Collections;\n-import java.util.Map;\n-import java.util.concurrent.atomic.AtomicLong;\n import org.hamcrest.MatcherAssert;\n import org.hamcrest.Matchers;\n import org.junit.jupiter.api.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg5MDMzMA==", "url": "https://github.com/artipie/artipie/pull/426#discussion_r466890330", "bodyText": "@g4s8 I'd suggest to have different size for request and response, otherwise we may mix up response and request in metrics and never know", "author": "olegmoz", "createdAt": "2020-08-07T08:11:07Z", "path": "src/test/java/com/artipie/http/TrafficMetricSliceTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http;\n+\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqMethod;\n+import com.artipie.http.rs.RsWithBody;\n+import com.artipie.metrics.Metrics;\n+import com.artipie.metrics.memory.InMemoryMetrics;\n+import com.artipie.metrics.publish.MetricsOutput;\n+import hu.akarnokd.rxjava2.interop.CompletableInterop;\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link TrafficMetricSlice}.\n+ *\n+ * @since 0.10\n+ */\n+final class TrafficMetricSliceTest {\n+\n+    /**\n+     * Request metrics key.\n+     */\n+    private static final String KEY_REQ = \"request.body.size\";\n+\n+    /**\n+     * Response metrics key.\n+     */\n+    private static final String KEY_RSP = \"response.body.size\";\n+\n+    @Test\n+    void updatesMetrics() throws Exception {\n+        final Metrics metrics = new InMemoryMetrics();\n+        final int size = 100;\n+        new TrafficMetricSlice((line, head, body) -> new RsWithBody(body), metrics)\n+            .response(\n+                new RequestLine(RqMethod.GET, \"/foo\").toString(),\n+                Collections.emptyList(),\n+                Flowable.just(ByteBuffer.wrap(new byte[size]))", "originalCommit": "00f3ecddf3f66d79ad288001265cfee1786d16ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc1edb9da949e0a61b38d65e8b778f8d2ae1f47f", "chunk": "diff --git a/src/test/java/com/artipie/http/TrafficMetricSliceTest.java b/src/test/java/com/artipie/http/TrafficMetricSliceTest.java\nindex 507aab5..2a5f3eb 100644\n--- a/src/test/java/com/artipie/http/TrafficMetricSliceTest.java\n+++ b/src/test/java/com/artipie/http/TrafficMetricSliceTest.java\n\n@@ -28,13 +28,11 @@ import com.artipie.http.rq.RqMethod;\n import com.artipie.http.rs.RsWithBody;\n import com.artipie.metrics.Metrics;\n import com.artipie.metrics.memory.InMemoryMetrics;\n-import com.artipie.metrics.publish.MetricsOutput;\n+import com.artipie.metrics.memory.TestMetricsOutput;\n import hu.akarnokd.rxjava2.interop.CompletableInterop;\n import io.reactivex.Flowable;\n import java.nio.ByteBuffer;\n import java.util.Collections;\n-import java.util.Map;\n-import java.util.concurrent.atomic.AtomicLong;\n import org.hamcrest.MatcherAssert;\n import org.hamcrest.Matchers;\n import org.junit.jupiter.api.Test;\n"}}, {"oid": "bc1edb9da949e0a61b38d65e8b778f8d2ae1f47f", "url": "https://github.com/artipie/artipie/commit/bc1edb9da949e0a61b38d65e8b778f8d2ae1f47f", "message": "#425 - review fixes", "committedDate": "2020-08-07T09:35:51Z", "type": "commit"}, {"oid": "58d1bcc7023227d202fa830ba19d5b954bd88fc3", "url": "https://github.com/artipie/artipie/commit/58d1bcc7023227d202fa830ba19d5b954bd88fc3", "message": "Merge branch 'master' into 425-collect-traffic-metric", "committedDate": "2020-08-07T09:37:01Z", "type": "commit"}]}