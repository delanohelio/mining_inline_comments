{"pr_number": 662, "pr_title": "#652 - Verify install for pypi", "pr_createdAt": "2020-10-06T06:58:54Z", "pr_url": "https://github.com/artipie/artipie/pull/662", "timeline": [{"oid": "bc3dfbe0f04dba227930eee9eebd40be8551627e", "url": "https://github.com/artipie/artipie/commit/bc3dfbe0f04dba227930eee9eebd40be8551627e", "message": "#652 - Verify install for pypi", "committedDate": "2020-10-06T06:53:19Z", "type": "commit"}, {"oid": "2c6d722758c5d2503d854ee83d16ecd98340e13b", "url": "https://github.com/artipie/artipie/commit/2c6d722758c5d2503d854ee83d16ecd98340e13b", "message": "#652 - Exclude directory", "committedDate": "2020-10-06T07:06:40Z", "type": "commit"}, {"oid": "73f1d6b89d6b99183e56d4a226206c2110538676", "url": "https://github.com/artipie/artipie/commit/73f1d6b89d6b99183e56d4a226206c2110538676", "message": "#652 - Exclude directory", "committedDate": "2020-10-06T07:10:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA3NDk1OA==", "url": "https://github.com/artipie/artipie/pull/662#discussion_r500074958", "bodyText": "@genryxy I'd suggest to inline this variable and extract host host.testcontainers.internal into constant as it's used twice here and will be used in the future tests", "author": "olenagerasimova", "createdAt": "2020-10-06T07:53:15Z", "path": "src/test/java/com/artipie/pypi/PypiITCase.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.pypi;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.ArtipieServer;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.jcabi.log.Logger;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.GenericContainer;\n+\n+/**\n+ * Integration tests for Pypi repository.\n+ * @since 0.12\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+@EnabledOnOs({OS.LINUX, OS.MAC})\n+final class PypiITCase {\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Container.\n+     */\n+    private GenericContainer<?> cntn;\n+\n+    /**\n+     * Storage.\n+     */\n+    private Storage storage;\n+\n+    /**\n+     * Artipie server port.\n+     */\n+    private int port;\n+\n+    @BeforeEach\n+    void init() throws IOException, InterruptedException {\n+        this.storage = new FileStorage(this.tmp);\n+        this.server = new ArtipieServer(this.tmp, \"my-pypi\", this.config());\n+        this.port = this.server.start();\n+        Testcontainers.exposeHostPorts(this.port);\n+        this.cntn = new GenericContainer<>(\"python:3\")\n+            .withCommand(\"tail\", \"-f\", \"/dev/null\")\n+            .withWorkingDirectory(\"/home/\")\n+            .withFileSystemBind(this.tmp.toString(), \"/home\");\n+        this.cntn.start();\n+    }\n+\n+    @Test\n+    void pypiInstall() throws Exception {\n+        final String url = String.format(\n+            \"http://host.testcontainers.internal:%d/my-pypi/\", this.port", "originalCommit": "73f1d6b89d6b99183e56d4a226206c2110538676", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72c62a807c2f4717886b3b794a76a06bd91242d2", "chunk": "diff --git a/src/test/java/com/artipie/pypi/PypiITCase.java b/src/test/java/com/artipie/pypi/PypiITCase.java\nindex 4fd5bef..361df46 100644\n--- a/src/test/java/com/artipie/pypi/PypiITCase.java\n+++ b/src/test/java/com/artipie/pypi/PypiITCase.java\n\n@@ -51,6 +51,11 @@ import org.testcontainers.containers.GenericContainer;\n @EnabledOnOs({OS.LINUX, OS.MAC})\n final class PypiITCase {\n \n+    /**\n+     * Host.\n+     */\n+    private static final String HOST = \"host.testcontainers.internal\";\n+\n     /**\n      * Temporary directory for all tests.\n      * @checkstyle VisibilityModifierCheck (3 lines)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA3NTY4MQ==", "url": "https://github.com/artipie/artipie/pull/662#discussion_r500075681", "bodyText": "@genryxy this method has just one expression, I'd suggest to inline it", "author": "olenagerasimova", "createdAt": "2020-10-06T07:54:36Z", "path": "src/test/java/com/artipie/pypi/PypiITCase.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.pypi;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.ArtipieServer;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.jcabi.log.Logger;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.GenericContainer;\n+\n+/**\n+ * Integration tests for Pypi repository.\n+ * @since 0.12\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+@EnabledOnOs({OS.LINUX, OS.MAC})\n+final class PypiITCase {\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Container.\n+     */\n+    private GenericContainer<?> cntn;\n+\n+    /**\n+     * Storage.\n+     */\n+    private Storage storage;\n+\n+    /**\n+     * Artipie server port.\n+     */\n+    private int port;\n+\n+    @BeforeEach\n+    void init() throws IOException, InterruptedException {\n+        this.storage = new FileStorage(this.tmp);\n+        this.server = new ArtipieServer(this.tmp, \"my-pypi\", this.config());\n+        this.port = this.server.start();\n+        Testcontainers.exposeHostPorts(this.port);\n+        this.cntn = new GenericContainer<>(\"python:3\")\n+            .withCommand(\"tail\", \"-f\", \"/dev/null\")\n+            .withWorkingDirectory(\"/home/\")\n+            .withFileSystemBind(this.tmp.toString(), \"/home\");\n+        this.cntn.start();\n+    }\n+\n+    @Test\n+    void pypiInstall() throws Exception {\n+        final String url = String.format(\n+            \"http://host.testcontainers.internal:%d/my-pypi/\", this.port\n+        );\n+        this.addPackageToStorage();\n+        MatcherAssert.assertThat(\n+            this.exec(\n+                \"pip\", \"install\", \"--verbose\", \"--index-url\",  url, \"--no-deps\",\n+                \"--trusted-host\", \"host.testcontainers.internal\", \"alarmtime==0.1.5\"\n+            ),\n+            Matchers.containsString(\"Successfully installed alarmtime-0.1.5\")\n+        );\n+    }\n+\n+    @AfterEach\n+    void release() {\n+        this.server.stop();\n+        this.cntn.stop();\n+    }\n+\n+    private String exec(final String... command) throws Exception {\n+        Logger.debug(this, \"Command:\\n%s\", String.join(\" \", command));\n+        return this.cntn.execInContainer(command).getStdout();\n+    }\n+\n+    private String config() {\n+        return Yaml.createYamlMappingBuilder().add(\n+            \"repo\",\n+            Yaml.createYamlMappingBuilder()\n+                .add(\"type\", \"pypi\")\n+                .add(\n+                    \"storage\",\n+                    Yaml.createYamlMappingBuilder()\n+                        .add(\"type\", \"fs\")\n+                        .add(\"path\", this.tmp.resolve(\"repos\").toString())\n+                        .build()\n+                )\n+                .build()\n+        ).build().toString();\n+    }\n+\n+    private void addPackageToStorage() {\n+        new TestResource(\"pypi-repo/alarmtime-0.1.5.tar.gz\")", "originalCommit": "73f1d6b89d6b99183e56d4a226206c2110538676", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72c62a807c2f4717886b3b794a76a06bd91242d2", "chunk": "diff --git a/src/test/java/com/artipie/pypi/PypiITCase.java b/src/test/java/com/artipie/pypi/PypiITCase.java\nindex 4fd5bef..361df46 100644\n--- a/src/test/java/com/artipie/pypi/PypiITCase.java\n+++ b/src/test/java/com/artipie/pypi/PypiITCase.java\n\n@@ -51,6 +51,11 @@ import org.testcontainers.containers.GenericContainer;\n @EnabledOnOs({OS.LINUX, OS.MAC})\n final class PypiITCase {\n \n+    /**\n+     * Host.\n+     */\n+    private static final String HOST = \"host.testcontainers.internal\";\n+\n     /**\n      * Temporary directory for all tests.\n      * @checkstyle VisibilityModifierCheck (3 lines)\n"}}, {"oid": "72c62a807c2f4717886b3b794a76a06bd91242d2", "url": "https://github.com/artipie/artipie/commit/72c62a807c2f4717886b3b794a76a06bd91242d2", "message": "#652 - Review fixes", "committedDate": "2020-10-06T08:19:45Z", "type": "commit"}, {"oid": "1685a551457ed518caeb0f7f62c35f01b84653db", "url": "https://github.com/artipie/artipie/commit/1685a551457ed518caeb0f7f62c35f01b84653db", "message": "Merge branch 'master' into 652-install-pypiIT", "committedDate": "2020-10-06T14:44:12Z", "type": "commit"}]}