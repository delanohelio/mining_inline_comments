{"pr_number": 491, "pr_title": "#484 - Add UserFromRqLine", "pr_createdAt": "2020-08-24T15:13:46Z", "pr_url": "https://github.com/artipie/artipie/pull/491", "timeline": [{"oid": "87299d144291735c3cbb46594b47219cee5a6ebd", "url": "https://github.com/artipie/artipie/commit/87299d144291735c3cbb46594b47219cee5a6ebd", "message": "#484 - Add UserFromRqLine", "committedDate": "2020-08-24T15:11:21Z", "type": "commit"}, {"oid": "e09c6351fdcb3990bcc2702b2cfc2d80c65b158f", "url": "https://github.com/artipie/artipie/commit/e09c6351fdcb3990bcc2702b2cfc2d80c65b158f", "message": "#484 - Remove todo", "committedDate": "2020-08-24T15:16:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxMjQyNQ==", "url": "https://github.com/artipie/artipie/pull/491#discussion_r476212425", "bodyText": "@genryxy please, add test for this class", "author": "olenagerasimova", "createdAt": "2020-08-25T06:42:47Z", "path": "src/main/java/com/artipie/api/artifactory/UserFromRqLine.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.api.artifactory;\n+\n+import com.artipie.http.rq.RequestLineFrom;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Class for receiving username from the request line.\n+ * The request line should match pattern to get username.\n+ * @since 0.10\n+ */\n+final class UserFromRqLine {", "originalCommit": "e09c6351fdcb3990bcc2702b2cfc2d80c65b158f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "ddb5516fa75a637b6e88f7fb2df722d0a29ae60f", "url": "https://github.com/artipie/artipie/commit/ddb5516fa75a637b6e88f7fb2df722d0a29ae60f", "message": "#484 - Add test", "committedDate": "2020-08-25T07:08:39Z", "type": "commit"}, {"oid": "78fa1fa7459f0ed3a8acaf7b1730a3c44dab4db1", "url": "https://github.com/artipie/artipie/commit/78fa1fa7459f0ed3a8acaf7b1730a3c44dab4db1", "message": "#484 - Add test", "committedDate": "2020-08-25T07:09:10Z", "type": "commit"}, {"oid": "03e8afffe870eb9ad936357e821d990620ec67ef", "url": "https://github.com/artipie/artipie/commit/03e8afffe870eb9ad936357e821d990620ec67ef", "message": "Merge branch 'master' into 484-UserFromRqLine", "committedDate": "2020-08-25T07:11:18Z", "type": "commit"}, {"oid": "03acc8f9d6b6476161d341584334b41ce884a20b", "url": "https://github.com/artipie/artipie/commit/03acc8f9d6b6476161d341584334b41ce884a20b", "message": "Merge branch 'master' into 484-UserFromRqLine", "committedDate": "2020-08-25T08:44:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NTQ0Mg==", "url": "https://github.com/artipie/artipie/pull/491#discussion_r476285442", "bodyText": "@genryxy you may return new RsWithStatus(RsStatus.BAD_REQUEST) without wrapping it into CompletableFuture and then into AsyncResponse.", "author": "olegmoz", "createdAt": "2020-08-25T08:50:30Z", "path": "src/main/java/com/artipie/api/artifactory/AddUpdateUserSlice.java", "diffHunk": "@@ -68,26 +66,23 @@ public AddUpdateUserSlice(final Settings settings) {\n     @Override\n     public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n         final Publisher<ByteBuffer> body) {\n-        final Response res;\n-        final Matcher matcher = GetUserSlice.PTRN.matcher(\n-            new RequestLineFrom(line).uri().toString()\n-        );\n-        if (matcher.matches()) {\n-            final CompletionStage<Optional<String>> pswd = AddUpdateUserSlice.password(body);\n-            final String username = matcher.group(\"username\");\n-            res = new AsyncResponse(\n-                pswd.thenCompose(\n-                    passw -> passw.map(\n-                        haspassw -> this.settings.credentials()\n-                            .thenCompose(\n-                                cred -> cred.add(username, haspassw)\n-                                    .thenApply(ok -> new RsWithStatus(RsStatus.OK)))\n+        final Optional<String> user = new UserFromRqLine(line).get();\n+        return user.map(\n+            username -> new AsyncResponse(\n+                AddUpdateUserSlice.password(body)\n+                    .thenCompose(\n+                        passw -> passw.map(\n+                            haspassw -> this.settings.credentials()\n+                                .thenCompose(\n+                                    cred -> cred.add(username, haspassw)\n+                                        .thenApply(ok -> new RsWithStatus(RsStatus.OK)))\n                 ).orElse(CompletableFuture.completedFuture(new RsWithStatus(RsStatus.NOT_FOUND))))\n-            );\n-        } else {\n-            res = new RsWithStatus(RsStatus.BAD_REQUEST);\n-        }\n-        return res;\n+            )\n+        ).orElse(\n+            new AsyncResponse(\n+                CompletableFuture.completedFuture(new RsWithStatus(RsStatus.BAD_REQUEST))\n+            )", "originalCommit": "03acc8f9d6b6476161d341584334b41ce884a20b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5NzQ3Mw==", "url": "https://github.com/artipie/artipie/pull/491#discussion_r476497473", "bodyText": "@olegmoz thanks, sorry for the delaying. If I remove both wrappers, it doesn't compile.", "author": "genryxy", "createdAt": "2020-08-25T14:34:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NTQ0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUxOTkyNA==", "url": "https://github.com/artipie/artipie/pull/491#discussion_r476519924", "bodyText": "@genryxy probably you need to specify <Response> type explicitly for Optional.map method call. Otherwise it is resoled automatically to AsyncResponse and then AsyncResponse is expected to be returned in orElse", "author": "olegmoz", "createdAt": "2020-08-25T15:03:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NTQ0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUyMjc0OQ==", "url": "https://github.com/artipie/artipie/pull/491#discussion_r476522749", "bodyText": "@olegmoz yes, you're right, my bad", "author": "genryxy", "createdAt": "2020-08-25T15:06:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NTQ0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "43e20aa0aed1fd3235e8ea47d2c04af348c85f09", "chunk": "diff --git a/src/main/java/com/artipie/api/artifactory/AddUpdateUserSlice.java b/src/main/java/com/artipie/api/artifactory/AddUpdateUserSlice.java\nindex 5c90ad8..47343d5 100644\n--- a/src/main/java/com/artipie/api/artifactory/AddUpdateUserSlice.java\n+++ b/src/main/java/com/artipie/api/artifactory/AddUpdateUserSlice.java\n\n@@ -67,7 +67,7 @@ public final class AddUpdateUserSlice implements Slice {\n     public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n         final Publisher<ByteBuffer> body) {\n         final Optional<String> user = new UserFromRqLine(line).get();\n-        return user.map(\n+        return user.<Response>map(\n             username -> new AsyncResponse(\n                 AddUpdateUserSlice.password(body)\n                     .thenCompose(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NTY0NA==", "url": "https://github.com/artipie/artipie/pull/491#discussion_r476285644", "bodyText": "@genryxy same, no need to wrap into CompletableFuture", "author": "olegmoz", "createdAt": "2020-08-25T08:50:50Z", "path": "src/main/java/com/artipie/api/artifactory/DeleteUserSlice.java", "diffHunk": "@@ -90,10 +79,11 @@ public Response response(final String line, final Iterable<Map.Entry<String, Str\n                         }\n                     )\n                 )\n-            );\n-        } else {\n-            res = new RsWithStatus(RsStatus.BAD_REQUEST);\n-        }\n-        return res;\n+            )\n+        ).orElse(\n+            new AsyncResponse(\n+                CompletableFuture.completedFuture(new RsWithStatus(RsStatus.BAD_REQUEST))\n+            )", "originalCommit": "03acc8f9d6b6476161d341584334b41ce884a20b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43e20aa0aed1fd3235e8ea47d2c04af348c85f09", "chunk": "diff --git a/src/main/java/com/artipie/api/artifactory/DeleteUserSlice.java b/src/main/java/com/artipie/api/artifactory/DeleteUserSlice.java\nindex a686e10..769a4a9 100644\n--- a/src/main/java/com/artipie/api/artifactory/DeleteUserSlice.java\n+++ b/src/main/java/com/artipie/api/artifactory/DeleteUserSlice.java\n\n@@ -80,10 +80,6 @@ public final class DeleteUserSlice implements Slice {\n                     )\n                 )\n             )\n-        ).orElse(\n-            new AsyncResponse(\n-                CompletableFuture.completedFuture(new RsWithStatus(RsStatus.BAD_REQUEST))\n-            )\n-        );\n+        ).orElse(new RsWithStatus(RsStatus.BAD_REQUEST));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NTgzOA==", "url": "https://github.com/artipie/artipie/pull/491#discussion_r476285838", "bodyText": "@genryxy same, no need to wrap into CompletableFuture", "author": "olegmoz", "createdAt": "2020-08-25T08:51:08Z", "path": "src/main/java/com/artipie/api/artifactory/GetUserSlice.java", "diffHunk": "@@ -65,41 +65,33 @@ public GetUserSlice(final Settings settings) {\n     @Override\n     public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n         final Publisher<ByteBuffer> body) {\n-        final Response res;\n-        final Matcher matcher = GetUserSlice.PTRN.matcher(\n-            new RequestLineFrom(line).uri().toString()\n-        );\n-        if (matcher.matches()) {\n-            final String username = matcher.group(\"username\");\n-            res =\n-                new AsyncResponse(\n-                    this.settings.credentials().thenCompose(\n-                        cred ->  cred.users().thenApply(\n-                            users -> users.contains(username)\n-                        ).thenApply(\n-                            has -> {\n-                                final Response resp;\n-                                if (has) {\n-                                    resp = new RsJson(\n-                                        () -> Json.createObjectBuilder()\n-                                            .add(\"name\", username)\n-                                            .add(\"email\", String.format(\"%s@artipie.com\", username))\n-                                            .add(\"lastLoggedIn\", \"2020-01-01T01:01:01.000+01:00\")\n-                                            .add(\"realm\", \"Internal\")\n-                                            .build(),\n-                                        StandardCharsets.UTF_8\n-                                    );\n-                                } else {\n-                                    resp = StandardRs.NOT_FOUND;\n-                                }\n-                                return resp;\n+        final Optional<String> user = new UserFromRqLine(line).get();\n+        return user.map(\n+            username -> new AsyncResponse(\n+                this.settings.credentials().thenCompose(\n+                    cred ->  cred.users().thenApply(\n+                        users -> users.contains(username)\n+                    ).thenApply(\n+                        has -> {\n+                            final Response resp;\n+                            if (has) {\n+                                resp = new RsJson(\n+                                    () -> Json.createObjectBuilder()\n+                                        .add(\"name\", username)\n+                                        .add(\"email\", String.format(\"%s@artipie.com\", username))\n+                                        .add(\"lastLoggedIn\", \"2020-01-01T01:01:01.000+01:00\")\n+                                        .add(\"realm\", \"Internal\")\n+                                        .build(),\n+                                    StandardCharsets.UTF_8\n+                                );\n+                            } else {\n+                                resp = StandardRs.NOT_FOUND;\n                             }\n-                        )\n+                            return resp;\n+                        }\n                     )\n-                );\n-        } else {\n-            res = StandardRs.NOT_FOUND;\n-        }\n-        return res;\n+                )\n+            )\n+        ).orElse(new AsyncResponse(CompletableFuture.completedFuture(StandardRs.NOT_FOUND)));", "originalCommit": "03acc8f9d6b6476161d341584334b41ce884a20b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43e20aa0aed1fd3235e8ea47d2c04af348c85f09", "chunk": "diff --git a/src/main/java/com/artipie/api/artifactory/GetUserSlice.java b/src/main/java/com/artipie/api/artifactory/GetUserSlice.java\nindex c1b375e..7ceef6a 100644\n--- a/src/main/java/com/artipie/api/artifactory/GetUserSlice.java\n+++ b/src/main/java/com/artipie/api/artifactory/GetUserSlice.java\n\n@@ -66,7 +65,7 @@ public final class GetUserSlice implements Slice {\n     public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n         final Publisher<ByteBuffer> body) {\n         final Optional<String> user = new UserFromRqLine(line).get();\n-        return user.map(\n+        return user.<Response>map(\n             username -> new AsyncResponse(\n                 this.settings.credentials().thenCompose(\n                     cred ->  cred.users().thenApply(\n"}}, {"oid": "43e20aa0aed1fd3235e8ea47d2c04af348c85f09", "url": "https://github.com/artipie/artipie/commit/43e20aa0aed1fd3235e8ea47d2c04af348c85f09", "message": "#484 - Remove wrappers", "committedDate": "2020-08-25T15:10:58Z", "type": "commit"}, {"oid": "f9d99907e9f84ebbaf339588c3035f6bd5813e48", "url": "https://github.com/artipie/artipie/commit/f9d99907e9f84ebbaf339588c3035f6bd5813e48", "message": "Merge branch 'master' into 484-UserFromRqLine", "committedDate": "2020-08-25T15:11:24Z", "type": "commit"}, {"oid": "bbebad62d0754d866e3b2c626497480cf14baf93", "url": "https://github.com/artipie/artipie/commit/bbebad62d0754d866e3b2c626497480cf14baf93", "message": "Merge branch 'master' into 484-UserFromRqLine", "committedDate": "2020-08-26T07:54:20Z", "type": "commit"}]}