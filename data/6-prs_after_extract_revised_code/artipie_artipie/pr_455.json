{"pr_number": 455, "pr_title": "#444 - GetUserSlice introduced", "pr_createdAt": "2020-08-18T13:17:54Z", "pr_url": "https://github.com/artipie/artipie/pull/455", "timeline": [{"oid": "a5d871779f04426d299f5f8624d671cebe8aa8ef", "url": "https://github.com/artipie/artipie/commit/a5d871779f04426d299f5f8624d671cebe8aa8ef", "message": "#444 - GetUserSlice introduced", "committedDate": "2020-08-18T13:12:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgyMjA2OQ==", "url": "https://github.com/artipie/artipie/pull/455#discussion_r472822069", "bodyText": "@olenagerasimova you can use new RsJson() here from artipie/http", "author": "g4s8", "createdAt": "2020-08-19T07:49:15Z", "path": "src/main/java/com/artipie/api/artifactory/GetUserSlice.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.api.artifactory;\n+\n+import com.artipie.Settings;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.async.AsyncResponse;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithBody;\n+import com.artipie.http.rs.RsWithStatus;\n+import com.artipie.http.rs.StandardRs;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.json.Json;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Artifactory `GET /api/security/users/{userName}` endpoint, returns user information.\n+ * @since 0.10\n+ */\n+public final class GetUserSlice implements Slice {\n+\n+    /**\n+     * Request line pattern to get username.\n+     */\n+    private static final Pattern PTRN = Pattern.compile(\"/api/security/users/(?<username>[^/.]+)\");\n+\n+    /**\n+     * Artipie settings.\n+     */\n+    private final Settings settings;\n+\n+    /**\n+     * Ctor.\n+     * @param settings Artipie setting\n+     */\n+    public GetUserSlice(final Settings settings) {\n+        this.settings = settings;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final Response res;\n+        final Matcher matcher = GetUserSlice.PTRN.matcher(\n+            new RequestLineFrom(line).uri().toString()\n+        );\n+        if (matcher.matches()) {\n+            final String username = matcher.group(\"username\");\n+            res =\n+                new AsyncResponse(\n+                    this.settings.credentials().thenApply(\n+                        cred -> cred.map(\n+                            yaml -> Optional.ofNullable(yaml.yamlMapping(username))\n+                            .<Response>map(\n+                                ignored ->\n+                                    new RsWithBody(\n+                                        new RsWithStatus(RsStatus.OK),\n+                                        ByteBuffer.wrap(", "originalCommit": "a5d871779f04426d299f5f8624d671cebe8aa8ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12831431f32fdae0f7560428604dd6194e7ab427", "chunk": "diff --git a/src/main/java/com/artipie/api/artifactory/GetUserSlice.java b/src/main/java/com/artipie/api/artifactory/GetUserSlice.java\nindex 8d7be2f..03783c9 100644\n--- a/src/main/java/com/artipie/api/artifactory/GetUserSlice.java\n+++ b/src/main/java/com/artipie/api/artifactory/GetUserSlice.java\n\n@@ -24,13 +24,11 @@\n package com.artipie.api.artifactory;\n \n import com.artipie.Settings;\n+import com.artipie.api.RsJson;\n import com.artipie.http.Response;\n import com.artipie.http.Slice;\n import com.artipie.http.async.AsyncResponse;\n import com.artipie.http.rq.RequestLineFrom;\n-import com.artipie.http.rs.RsStatus;\n-import com.artipie.http.rs.RsWithBody;\n-import com.artipie.http.rs.RsWithStatus;\n import com.artipie.http.rs.StandardRs;\n import java.nio.ByteBuffer;\n import java.nio.charset.StandardCharsets;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgyMzE1MQ==", "url": "https://github.com/artipie/artipie/pull/455#discussion_r472823151", "bodyText": "@olenagerasimova let's put required field such as lastLoggedIn and realm with stub values", "author": "g4s8", "createdAt": "2020-08-19T07:50:30Z", "path": "src/main/java/com/artipie/api/artifactory/GetUserSlice.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.api.artifactory;\n+\n+import com.artipie.Settings;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.async.AsyncResponse;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithBody;\n+import com.artipie.http.rs.RsWithStatus;\n+import com.artipie.http.rs.StandardRs;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.json.Json;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Artifactory `GET /api/security/users/{userName}` endpoint, returns user information.\n+ * @since 0.10\n+ */\n+public final class GetUserSlice implements Slice {\n+\n+    /**\n+     * Request line pattern to get username.\n+     */\n+    private static final Pattern PTRN = Pattern.compile(\"/api/security/users/(?<username>[^/.]+)\");\n+\n+    /**\n+     * Artipie settings.\n+     */\n+    private final Settings settings;\n+\n+    /**\n+     * Ctor.\n+     * @param settings Artipie setting\n+     */\n+    public GetUserSlice(final Settings settings) {\n+        this.settings = settings;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final Response res;\n+        final Matcher matcher = GetUserSlice.PTRN.matcher(\n+            new RequestLineFrom(line).uri().toString()\n+        );\n+        if (matcher.matches()) {\n+            final String username = matcher.group(\"username\");\n+            res =\n+                new AsyncResponse(\n+                    this.settings.credentials().thenApply(\n+                        cred -> cred.map(\n+                            yaml -> Optional.ofNullable(yaml.yamlMapping(username))\n+                            .<Response>map(\n+                                ignored ->\n+                                    new RsWithBody(\n+                                        new RsWithStatus(RsStatus.OK),\n+                                        ByteBuffer.wrap(\n+                                            Json.createObjectBuilder()\n+                                                .add(\"name\", username)\n+                                                .add(", "originalCommit": "a5d871779f04426d299f5f8624d671cebe8aa8ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12831431f32fdae0f7560428604dd6194e7ab427", "chunk": "diff --git a/src/main/java/com/artipie/api/artifactory/GetUserSlice.java b/src/main/java/com/artipie/api/artifactory/GetUserSlice.java\nindex 8d7be2f..03783c9 100644\n--- a/src/main/java/com/artipie/api/artifactory/GetUserSlice.java\n+++ b/src/main/java/com/artipie/api/artifactory/GetUserSlice.java\n\n@@ -24,13 +24,11 @@\n package com.artipie.api.artifactory;\n \n import com.artipie.Settings;\n+import com.artipie.api.RsJson;\n import com.artipie.http.Response;\n import com.artipie.http.Slice;\n import com.artipie.http.async.AsyncResponse;\n import com.artipie.http.rq.RequestLineFrom;\n-import com.artipie.http.rs.RsStatus;\n-import com.artipie.http.rs.RsWithBody;\n-import com.artipie.http.rs.RsWithStatus;\n import com.artipie.http.rs.StandardRs;\n import java.nio.ByteBuffer;\n import java.nio.charset.StandardCharsets;\n"}}, {"oid": "12831431f32fdae0f7560428604dd6194e7ab427", "url": "https://github.com/artipie/artipie/commit/12831431f32fdae0f7560428604dd6194e7ab427", "message": "#444 - CR", "committedDate": "2020-08-19T08:26:39Z", "type": "commit"}, {"oid": "132ee80e8f1f160f629781f867a3f21bf1f40a27", "url": "https://github.com/artipie/artipie/commit/132ee80e8f1f160f629781f867a3f21bf1f40a27", "message": "Merge branch 'master' of https://github.com/artipie/artipie into 444-get-user-slice\n\n\u0001 Conflicts:\n\u0001\tsrc/main/java/com/artipie/YamlSettings.java", "committedDate": "2020-08-19T08:41:45Z", "type": "commit"}, {"oid": "686dd4b2966c42411196685a46480c1002460fe0", "url": "https://github.com/artipie/artipie/commit/686dd4b2966c42411196685a46480c1002460fe0", "message": "Merge branch 'master' into 444-get-user-slice", "committedDate": "2020-08-19T10:58:31Z", "type": "commit"}, {"oid": "b570d9c03543115a2603de25258729ff0befeebc", "url": "https://github.com/artipie/artipie/commit/b570d9c03543115a2603de25258729ff0befeebc", "message": "Merge branch 'master' into 444-get-user-slice", "committedDate": "2020-08-19T12:01:10Z", "type": "commit"}, {"oid": "13ed3564189e85940bfd8f955be6fc4f9444640a", "url": "https://github.com/artipie/artipie/commit/13ed3564189e85940bfd8f955be6fc4f9444640a", "message": "Merge branch 'master' into 444-get-user-slice", "committedDate": "2020-08-19T12:24:55Z", "type": "commit"}]}