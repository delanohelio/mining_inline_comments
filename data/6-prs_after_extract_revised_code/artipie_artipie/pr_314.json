{"pr_number": 314, "pr_title": "#313 - Support for authentication for Docker proxy repository", "pr_createdAt": "2020-07-13T11:33:20Z", "pr_url": "https://github.com/artipie/artipie/pull/314", "timeline": [{"oid": "05ec639469da43277cfcaf801a30f6730dcff7da", "url": "https://github.com/artipie/artipie/commit/05ec639469da43277cfcaf801a30f6730dcff7da", "message": "#313 - Support for authentication in Docker proxy repository", "committedDate": "2020-07-13T11:34:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyMDExNw==", "url": "https://github.com/artipie/artipie/pull/314#discussion_r453820117", "bodyText": "@olegmoz I'd suggest to extract this method into separate class and properly unit test it", "author": "olenagerasimova", "createdAt": "2020-07-13T17:42:23Z", "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -273,4 +269,41 @@ static Slice build(final Settings settings, final Authentication auth,\n             .<Slice>map(limit -> new ContentLengthRestriction(slice, limit))\n             .orElse(slice);\n     }\n+\n+    /**\n+     * Creates Docker proxy repository slice from configuration.\n+     *\n+     * @param cfg Repository configuration.\n+     * @return Docker proxy slice.\n+     */\n+    private static Slice dockerProxy(final RepoConfig cfg) {", "originalCommit": "05ec639469da43277cfcaf801a30f6730dcff7da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ecb801d7f76141ebd7587a9557d67865b9c3fbb2", "chunk": "diff --git a/src/main/java/com/artipie/SliceFromConfig.java b/src/main/java/com/artipie/SliceFromConfig.java\nindex c32f65f..a532eb8 100644\n--- a/src/main/java/com/artipie/SliceFromConfig.java\n+++ b/src/main/java/com/artipie/SliceFromConfig.java\n\n@@ -269,41 +263,4 @@ public final class SliceFromConfig extends Slice.Wrap {\n             .<Slice>map(limit -> new ContentLengthRestriction(slice, limit))\n             .orElse(slice);\n     }\n-\n-    /**\n-     * Creates Docker proxy repository slice from configuration.\n-     *\n-     * @param cfg Repository configuration.\n-     * @return Docker proxy slice.\n-     */\n-    private static Slice dockerProxy(final RepoConfig cfg) {\n-        final YamlMapping settings = cfg.settings()\n-            .orElseThrow(() -> new IllegalStateException(\"Repo settings not found\"));\n-        final String host = settings.string(\"host\");\n-        if (host == null) {\n-            throw new IllegalStateException(\"`host` is not specified in settings\");\n-        }\n-        final Credentials credentials;\n-        final String username = settings.string(\"username\");\n-        final String password = settings.string(\"password\");\n-        if (username == null && password == null) {\n-            credentials = Credentials.ANONYMOUS;\n-        } else {\n-            if (username == null) {\n-                throw new IllegalStateException(\"`username` is not specified in settings\");\n-            }\n-            if (password == null) {\n-                throw new IllegalStateException(\"`password` is not specified in settings\");\n-            }\n-            credentials = new Credentials.Basic(username, password);\n-        }\n-        final ClientSlices client = new ClientSlices(SliceFromConfig.HTTP);\n-        final Docker proxy = new ProxyDocker(\n-            new AuthClientSlice(client, client.slice(host), credentials)\n-        );\n-        final Docker docker = cfg.storageOpt()\n-            .<Docker>map(cache -> new CacheDocker(proxy, new AstoDocker(cache)))\n-            .orElse(proxy);\n-        return new DockerSlice(cfg.path(), docker);\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyMzIxNA==", "url": "https://github.com/artipie/artipie/pull/314#discussion_r453823214", "bodyText": "@olegmoz also I'd suggest to extend exception messages with repository type, otherwise it may not be clear what setting to check", "author": "olenagerasimova", "createdAt": "2020-07-13T17:47:29Z", "path": "src/main/java/com/artipie/SliceFromConfig.java", "diffHunk": "@@ -273,4 +269,41 @@ static Slice build(final Settings settings, final Authentication auth,\n             .<Slice>map(limit -> new ContentLengthRestriction(slice, limit))\n             .orElse(slice);\n     }\n+\n+    /**\n+     * Creates Docker proxy repository slice from configuration.\n+     *\n+     * @param cfg Repository configuration.\n+     * @return Docker proxy slice.\n+     */\n+    private static Slice dockerProxy(final RepoConfig cfg) {\n+        final YamlMapping settings = cfg.settings()\n+            .orElseThrow(() -> new IllegalStateException(\"Repo settings not found\"));\n+        final String host = settings.string(\"host\");\n+        if (host == null) {\n+            throw new IllegalStateException(\"`host` is not specified in settings\");\n+        }\n+        final Credentials credentials;\n+        final String username = settings.string(\"username\");\n+        final String password = settings.string(\"password\");\n+        if (username == null && password == null) {\n+            credentials = Credentials.ANONYMOUS;\n+        } else {\n+            if (username == null) {\n+                throw new IllegalStateException(\"`username` is not specified in settings\");\n+            }\n+            if (password == null) {\n+                throw new IllegalStateException(\"`password` is not specified in settings\");\n+            }", "originalCommit": "05ec639469da43277cfcaf801a30f6730dcff7da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ecb801d7f76141ebd7587a9557d67865b9c3fbb2", "chunk": "diff --git a/src/main/java/com/artipie/SliceFromConfig.java b/src/main/java/com/artipie/SliceFromConfig.java\nindex c32f65f..a532eb8 100644\n--- a/src/main/java/com/artipie/SliceFromConfig.java\n+++ b/src/main/java/com/artipie/SliceFromConfig.java\n\n@@ -269,41 +263,4 @@ public final class SliceFromConfig extends Slice.Wrap {\n             .<Slice>map(limit -> new ContentLengthRestriction(slice, limit))\n             .orElse(slice);\n     }\n-\n-    /**\n-     * Creates Docker proxy repository slice from configuration.\n-     *\n-     * @param cfg Repository configuration.\n-     * @return Docker proxy slice.\n-     */\n-    private static Slice dockerProxy(final RepoConfig cfg) {\n-        final YamlMapping settings = cfg.settings()\n-            .orElseThrow(() -> new IllegalStateException(\"Repo settings not found\"));\n-        final String host = settings.string(\"host\");\n-        if (host == null) {\n-            throw new IllegalStateException(\"`host` is not specified in settings\");\n-        }\n-        final Credentials credentials;\n-        final String username = settings.string(\"username\");\n-        final String password = settings.string(\"password\");\n-        if (username == null && password == null) {\n-            credentials = Credentials.ANONYMOUS;\n-        } else {\n-            if (username == null) {\n-                throw new IllegalStateException(\"`username` is not specified in settings\");\n-            }\n-            if (password == null) {\n-                throw new IllegalStateException(\"`password` is not specified in settings\");\n-            }\n-            credentials = new Credentials.Basic(username, password);\n-        }\n-        final ClientSlices client = new ClientSlices(SliceFromConfig.HTTP);\n-        final Docker proxy = new ProxyDocker(\n-            new AuthClientSlice(client, client.slice(host), credentials)\n-        );\n-        final Docker docker = cfg.storageOpt()\n-            .<Docker>map(cache -> new CacheDocker(proxy, new AstoDocker(cache)))\n-            .orElse(proxy);\n-        return new DockerSlice(cfg.path(), docker);\n-    }\n }\n"}}, {"oid": "ecb801d7f76141ebd7587a9557d67865b9c3fbb2", "url": "https://github.com/artipie/artipie/commit/ecb801d7f76141ebd7587a9557d67865b9c3fbb2", "message": "#313 - DockerProxy extracted from SliceFromConfig", "committedDate": "2020-07-14T14:08:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MzA2Nw==", "url": "https://github.com/artipie/artipie/pull/314#discussion_r454393067", "bodyText": "@olegmoz let's mention here docker proxy too", "author": "olenagerasimova", "createdAt": "2020-07-14T14:21:48Z", "path": "src/main/java/com/artipie/docker/DockerProxy.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.docker;\n+\n+import com.amihaiemil.eoyaml.YamlMapping;\n+import com.artipie.RepoConfig;\n+import com.artipie.docker.asto.AstoDocker;\n+import com.artipie.docker.cache.CacheDocker;\n+import com.artipie.docker.http.DockerSlice;\n+import com.artipie.docker.proxy.AuthClientSlice;\n+import com.artipie.docker.proxy.ClientSlices;\n+import com.artipie.docker.proxy.Credentials;\n+import com.artipie.docker.proxy.ProxyDocker;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Docker proxy slice created from config.\n+ *\n+ * @since 0.9\n+ * @todo #313:30min Unit test coverage for `DockerProxy` class\n+ *  `DockerProxy` class lacks unit test coverage. It should be tested that slice is built properly\n+ *  from configuration (e.g. handles simple response like 'GET /v2/') and fails any request for bad\n+ *  configuration (some required settings are missing).\n+ */\n+public class DockerProxy implements Slice {\n+\n+    /**\n+     * HTTP client.\n+     */\n+    private final HttpClient client;\n+\n+    /**\n+     * Repository configuration.\n+     */\n+    private final RepoConfig cfg;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param client HTTP client.\n+     * @param cfg Repository configuration.\n+     */\n+    public DockerProxy(final HttpClient client, final RepoConfig cfg) {\n+        this.client = client;\n+        this.cfg = cfg;\n+    }\n+\n+    @Override\n+    public Response response(\n+        final String line,\n+        final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body\n+    ) {\n+        return this.delegate().response(line, headers, body);\n+    }\n+\n+    /**\n+     * Creates Docker proxy repository slice from configuration.\n+     *\n+     * @return Docker proxy slice.\n+     */\n+    private Slice delegate() {\n+        final YamlMapping settings = this.cfg.settings()\n+            .orElseThrow(() -> new IllegalStateException(\"Repo settings not found\"));", "originalCommit": "ecb801d7f76141ebd7587a9557d67865b9c3fbb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5ODY0Ng==", "url": "https://github.com/artipie/artipie/pull/314#discussion_r454398646", "bodyText": "@olenagerasimova done, thanks", "author": "olegmoz", "createdAt": "2020-07-14T14:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MzA2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "26f9cb78c5af2d00e2ecc13827115be65c133874", "chunk": "diff --git a/src/main/java/com/artipie/docker/DockerProxy.java b/src/main/java/com/artipie/docker/DockerProxy.java\nindex 6292e2d..1966299 100644\n--- a/src/main/java/com/artipie/docker/DockerProxy.java\n+++ b/src/main/java/com/artipie/docker/DockerProxy.java\n\n@@ -87,7 +87,7 @@ public class DockerProxy implements Slice {\n      */\n     private Slice delegate() {\n         final YamlMapping settings = this.cfg.settings()\n-            .orElseThrow(() -> new IllegalStateException(\"Repo settings not found\"));\n+            .orElseThrow(() -> new IllegalStateException(\"Settings not found for Docker proxy\"));\n         final String host = settings.string(\"host\");\n         if (host == null) {\n             throw new IllegalStateException(\"`host` is not specified in settings for Docker proxy\");\n"}}, {"oid": "26f9cb78c5af2d00e2ecc13827115be65c133874", "url": "https://github.com/artipie/artipie/commit/26f9cb78c5af2d00e2ecc13827115be65c133874", "message": "#313 - Changes by review", "committedDate": "2020-07-14T14:31:22Z", "type": "commit"}, {"oid": "92b722e6876467b5f815f32d191e354bd9914e3a", "url": "https://github.com/artipie/artipie/commit/92b722e6876467b5f815f32d191e354bd9914e3a", "message": "#313 - Code style fix", "committedDate": "2020-07-14T15:26:02Z", "type": "commit"}, {"oid": "8a153ef8f97cc455963a68c62ce4cac1a4e8db06", "url": "https://github.com/artipie/artipie/commit/8a153ef8f97cc455963a68c62ce4cac1a4e8db06", "message": "Merge branch 'master' into 313-docker-proxy-auth", "committedDate": "2020-07-14T15:23:56Z", "type": "commit"}, {"oid": "c818ce49541ad1524f6cb7f5293a27615a166b7a", "url": "https://github.com/artipie/artipie/commit/c818ce49541ad1524f6cb7f5293a27615a166b7a", "message": "Merge branch 'master' into 313-docker-proxy-auth", "committedDate": "2020-07-15T07:44:56Z", "type": "commit"}, {"oid": "9f013591007749f44ea27abecd314aa1df0fa4c1", "url": "https://github.com/artipie/artipie/commit/9f013591007749f44ea27abecd314aa1df0fa4c1", "message": "Merge branch 'master' into 313-docker-proxy-auth\n\n# Conflicts:\n#\tsrc/main/java/com/artipie/SliceFromConfig.java", "committedDate": "2020-07-15T09:48:26Z", "type": "commit"}, {"oid": "4129e760a1f7fe8adb6be998f11aaeb2eb6632f4", "url": "https://github.com/artipie/artipie/commit/4129e760a1f7fe8adb6be998f11aaeb2eb6632f4", "message": "Merge branch 'master' into 313-docker-proxy-auth", "committedDate": "2020-07-15T11:09:17Z", "type": "commit"}, {"oid": "23b4dd10b32fbbd8bfd3afd6488ae8124a0b1f7f", "url": "https://github.com/artipie/artipie/commit/23b4dd10b32fbbd8bfd3afd6488ae8124a0b1f7f", "message": "Merge branch 'master' into 313-docker-proxy-auth\n\n# Conflicts:\n#\tREADME.md", "committedDate": "2020-07-15T13:38:54Z", "type": "commit"}]}