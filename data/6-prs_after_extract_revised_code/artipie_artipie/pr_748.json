{"pr_number": 748, "pr_title": "#730 - artipie API slices changed", "pr_createdAt": "2020-11-11T16:18:27Z", "pr_url": "https://github.com/artipie/artipie/pull/748", "timeline": [{"oid": "5705a7104e1ec558bae0ee889deb3bc185b23776", "url": "https://github.com/artipie/artipie/commit/5705a7104e1ec558bae0ee889deb3bc185b23776", "message": "#730 - artipie API slices changed", "committedDate": "2020-11-11T16:13:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ5MjYwMQ==", "url": "https://github.com/artipie/artipie/pull/748#discussion_r521492601", "bodyText": "@olenagerasimova do not really understand why it is needed to keep this Single.fromCallable(...) part, it could be simplified to new RxStorageWrapper(this.storage).exists().map(...)", "author": "olegmoz", "createdAt": "2020-11-11T16:45:45Z", "path": "src/main/java/com/artipie/api/ApiRepoCreateSlice.java", "diffHunk": "@@ -86,13 +86,13 @@ public Response response(final String line,\n         // @checkstyle LineLengthCheck (50 lines)\n         // @checkstyle ReturnCountCheck (50 lines)\n         return new AsyncResponse(\n-            Single.fromCallable(this.settings::storage).map(RxStorageWrapper::new).flatMap(\n-                storage -> storage.exists(key).flatMap(\n+            Single.fromCallable(() -> this.storage).map(RxStorageWrapper::new).flatMap(", "originalCommit": "5705a7104e1ec558bae0ee889deb3bc185b23776", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cca9554c88ab005788a60b3607d2d06f93221e23", "chunk": "diff --git a/src/main/java/com/artipie/api/ApiRepoCreateSlice.java b/src/main/java/com/artipie/api/ApiRepoCreateSlice.java\nindex 7ba5769..3b0bdc7 100644\n--- a/src/main/java/com/artipie/api/ApiRepoCreateSlice.java\n+++ b/src/main/java/com/artipie/api/ApiRepoCreateSlice.java\n\n@@ -83,48 +85,47 @@ final class ApiRepoCreateSlice implements Slice {\n         }\n         final String name = matcher.group(\"key\");\n         final Key.From key = new Key.From(String.format(\"%s.yaml\", name));\n+        final RxStorage rxstorage = new RxStorageWrapper(this.storage);\n         // @checkstyle LineLengthCheck (50 lines)\n         // @checkstyle ReturnCountCheck (50 lines)\n         return new AsyncResponse(\n-            Single.fromCallable(() -> this.storage).map(RxStorageWrapper::new).flatMap(\n-                rxstorage -> rxstorage.exists(key).flatMap(\n-                    exist -> {\n-                        if (exist) {\n-                            return Single.just(new RsWithStatus(RsStatus.CONFLICT));\n-                        } else {\n-                            return rxstorage.save(\n-                                key,\n-                                new Content.From(\n-                                    new Concatenation(body).single().map(buf -> new Remaining(buf).bytes())\n-                                        .map(bytes -> Yaml.createYamlInput(new String(bytes, StandardCharsets.UTF_8)).readYamlMapping())\n-                                        .map(\n-                                            yaml -> {\n-                                                final YamlMapping repo = yaml.yamlMapping(\"repo\");\n-                                                final YamlNode type = repo.value(\"type\");\n-                                                if (type == null || !Scalar.class.isAssignableFrom(type.getClass())) {\n-                                                    throw new IllegalStateException(\"Repository type required\");\n-                                                }\n-                                                final YamlNode stor = repo.value(\"storage\");\n-                                                if (stor == null || !Scalar.class.isAssignableFrom(stor.getClass())) {\n-                                                    throw new IllegalStateException(\"Repository storage is required\");\n-                                                }\n-                                                return Yaml.createYamlMappingBuilder().add(\n-                                                    \"repo\",\n-                                                    Yaml.createYamlMappingBuilder()\n-                                                        .add(\"type\", type)\n-                                                        .add(\"storage\", stor)\n-                                                        .add(\"permissions\", repo.value(\"permissions\"))\n-                                                        .build()\n-                                                ).build()\n-                                                    .toString()\n-                                                    .getBytes(StandardCharsets.UTF_8);\n+            rxstorage.exists(key).flatMap(\n+                exist -> {\n+                    if (exist) {\n+                        return Single.just(new RsWithStatus(RsStatus.CONFLICT));\n+                    } else {\n+                        return rxstorage.save(\n+                            key,\n+                            new Content.From(\n+                                new Concatenation(body).single().map(buf -> new Remaining(buf).bytes())\n+                                    .map(bytes -> Yaml.createYamlInput(new String(bytes, StandardCharsets.UTF_8)).readYamlMapping())\n+                                    .map(\n+                                        yaml -> {\n+                                            final YamlMapping repo = yaml.yamlMapping(\"repo\");\n+                                            final YamlNode type = repo.value(\"type\");\n+                                            if (type == null || !Scalar.class.isAssignableFrom(type.getClass())) {\n+                                                throw new IllegalStateException(\"Repository type required\");\n                                             }\n-                                        ).flatMapPublisher(bytes -> Flowable.just(ByteBuffer.wrap(bytes)))\n-                                )\n-                            ).andThen(Single.just(new RsWithStatus(RsStatus.OK)));\n-                        }\n+                                            final YamlNode stor = repo.value(\"storage\");\n+                                            if (stor == null || !Scalar.class.isAssignableFrom(stor.getClass())) {\n+                                                throw new IllegalStateException(\"Repository storage is required\");\n+                                            }\n+                                            return Yaml.createYamlMappingBuilder().add(\n+                                                \"repo\",\n+                                                Yaml.createYamlMappingBuilder()\n+                                                    .add(\"type\", type)\n+                                                    .add(\"storage\", stor)\n+                                                    .add(\"permissions\", repo.value(\"permissions\"))\n+                                                    .build()\n+                                            ).build()\n+                                                .toString()\n+                                                .getBytes(StandardCharsets.UTF_8);\n+                                        }\n+                                    ).flatMapPublisher(bytes -> Flowable.just(ByteBuffer.wrap(bytes)))\n+                            )\n+                        ).andThen(Single.just(new RsWithStatus(RsStatus.OK)));\n                     }\n-                )\n+                }\n             ).to(SingleInterop.get())\n         );\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ5Mjc4NQ==", "url": "https://github.com/artipie/artipie/pull/748#discussion_r521492785", "bodyText": "@olenagerasimova same concern here", "author": "olegmoz", "createdAt": "2020-11-11T16:46:02Z", "path": "src/main/java/com/artipie/api/ApiRepoGetSlice.java", "diffHunk": "@@ -83,10 +83,10 @@ public Response response(final String line, final Iterable<Map.Entry<String, Str\n         final Key.From key = new Key.From(String.format(\"%s.yaml\", name));\n         // @checkstyle LineLengthCheck (50 lines)\n         return new AsyncResponse(\n-            Single.fromCallable(this.settings::storage).map(RxStorageWrapper::new).flatMap(\n-                storage -> storage.exists(key).filter(exists -> exists)\n+            Single.fromCallable(() -> this.storage).map(RxStorageWrapper::new).flatMap(", "originalCommit": "5705a7104e1ec558bae0ee889deb3bc185b23776", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cca9554c88ab005788a60b3607d2d06f93221e23", "chunk": "diff --git a/src/main/java/com/artipie/api/ApiRepoGetSlice.java b/src/main/java/com/artipie/api/ApiRepoGetSlice.java\nindex fddc81c..7c18acc 100644\n--- a/src/main/java/com/artipie/api/ApiRepoGetSlice.java\n+++ b/src/main/java/com/artipie/api/ApiRepoGetSlice.java\n\n@@ -81,32 +81,31 @@ final class ApiRepoGetSlice implements Slice {\n         }\n         final String name = matcher.group(\"key\");\n         final Key.From key = new Key.From(String.format(\"%s.yaml\", name));\n+        final RxStorage rxstorage = new RxStorageWrapper(this.storage);\n         // @checkstyle LineLengthCheck (50 lines)\n         return new AsyncResponse(\n-            Single.fromCallable(() -> this.storage).map(RxStorageWrapper::new).flatMap(\n-                rxstorage -> rxstorage.exists(key).filter(exists -> exists)\n-                    .flatMapSingleElement(\n-                        ignore -> rxstorage.value(key)\n-                            .flatMap(pub -> new Concatenation(pub).single())\n-                            .map(\n-                                data -> Yaml.createYamlInput(\n-                                    new String(new Remaining(data).bytes(), StandardCharsets.UTF_8)\n-                                ).readYamlMapping()\n-                            ).map(\n-                                config -> {\n-                                    final YamlMapping repo = config.yamlMapping(\"repo\");\n-                                    YamlMappingBuilder builder = Yaml.createYamlMappingBuilder();\n-                                    builder = builder.add(\"type\", repo.value(\"type\"));\n-                                    if (repo.value(\"storage\") != null\n-                                        && Scalar.class.isAssignableFrom(repo.value(\"storage\").getClass())) {\n-                                        builder = builder.add(\"storage\", repo.value(\"storage\"));\n-                                    }\n-                                    builder = builder.add(\"permissions\", repo.value(\"permissions\"));\n-                                    return Yaml.createYamlMappingBuilder().add(\"repo\", builder.build()).build();\n+            new RxStorageWrapper(this.storage).exists(key).filter(exists -> exists)\n+                .flatMapSingleElement(\n+                    ignore -> rxstorage.value(key)\n+                        .flatMap(pub -> new Concatenation(pub).single())\n+                        .map(\n+                            data -> Yaml.createYamlInput(\n+                                new String(new Remaining(data).bytes(), StandardCharsets.UTF_8)\n+                            ).readYamlMapping()\n+                        ).map(\n+                            config -> {\n+                                final YamlMapping repo = config.yamlMapping(\"repo\");\n+                                YamlMappingBuilder builder = Yaml.createYamlMappingBuilder();\n+                                builder = builder.add(\"type\", repo.value(\"type\"));\n+                                if (repo.value(\"storage\") != null\n+                                    && Scalar.class.isAssignableFrom(repo.value(\"storage\").getClass())) {\n+                                    builder = builder.add(\"storage\", repo.value(\"storage\"));\n                                 }\n-                            ).<Response>map(RsYaml::new)\n-                    ).switchIfEmpty(Single.just(new RsWithStatus(RsStatus.NOT_FOUND)))\n-            ).to(SingleInterop.get())\n+                                builder = builder.add(\"permissions\", repo.value(\"permissions\"));\n+                                return Yaml.createYamlMappingBuilder().add(\"repo\", builder.build()).build();\n+                            }\n+                        ).<Response>map(RsYaml::new)\n+                ).switchIfEmpty(Single.just(new RsWithStatus(RsStatus.NOT_FOUND)))\n         );\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ5MzA5NA==", "url": "https://github.com/artipie/artipie/pull/748#discussion_r521493094", "bodyText": "@olenagerasimova and here", "author": "olegmoz", "createdAt": "2020-11-11T16:46:31Z", "path": "src/main/java/com/artipie/api/ApiRepoListSlice.java", "diffHunk": "@@ -74,7 +74,7 @@ public Response response(final String line, final Iterable<Map.Entry<String, Str\n         }\n         final String user = matcher.group(\"user\");\n         return new AsyncResponse(\n-            Single.fromCallable(this.settings::storage)\n+            Single.fromCallable(() -> this.storage)", "originalCommit": "5705a7104e1ec558bae0ee889deb3bc185b23776", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cca9554c88ab005788a60b3607d2d06f93221e23", "chunk": "diff --git a/src/main/java/com/artipie/api/ApiRepoListSlice.java b/src/main/java/com/artipie/api/ApiRepoListSlice.java\nindex 6bd345b..88c043b 100644\n--- a/src/main/java/com/artipie/api/ApiRepoListSlice.java\n+++ b/src/main/java/com/artipie/api/ApiRepoListSlice.java\n\n@@ -73,22 +73,21 @@ final class ApiRepoListSlice implements Slice {\n             throw new IllegalStateException(\"Should match\");\n         }\n         final String user = matcher.group(\"user\");\n+        final RxStorage rxstorage = new RxStorageWrapper(this.storage);\n         return new AsyncResponse(\n-            Single.fromCallable(() -> this.storage)\n-                .map(RxStorageWrapper::new)\n-                .flatMap(str -> str.list(new Key.From(user)))\n-                .map(\n-                    repos -> {\n-                        final JsonObjectBuilder json = Json.createObjectBuilder()\n-                            .add(\"user\", user);\n-                        final JsonArrayBuilder arr = Json.createArrayBuilder();\n-                        for (final Key key : repos) {\n-                            arr.add(key.string().replace(\".yaml\", \"\"));\n-                        }\n-                        json.add(\"repositories\", arr);\n-                        return json;\n+            rxstorage.list(new Key.From(user))\n+            .map(\n+                repos -> {\n+                    final JsonObjectBuilder json = Json.createObjectBuilder()\n+                        .add(\"user\", user);\n+                    final JsonArrayBuilder arr = Json.createArrayBuilder();\n+                    for (final Key key : repos) {\n+                        arr.add(key.string().replace(\".yaml\", \"\"));\n                     }\n-                ).map(builder -> new RsJson(builder::build))\n+                    json.add(\"repositories\", arr);\n+                    return json;\n+                }\n+            ).map(builder -> new RsJson(builder::build))\n         );\n     }\n }\n"}}, {"oid": "cca9554c88ab005788a60b3607d2d06f93221e23", "url": "https://github.com/artipie/artipie/commit/cca9554c88ab005788a60b3607d2d06f93221e23", "message": "#730 - CR", "committedDate": "2020-11-11T17:08:02Z", "type": "commit"}]}