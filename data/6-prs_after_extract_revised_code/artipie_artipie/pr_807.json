{"pr_number": 807, "pr_title": "#797 - Check existing, trim filename for different extensions", "pr_createdAt": "2020-12-14T11:58:51Z", "pr_url": "https://github.com/artipie/artipie/pull/807", "timeline": [{"oid": "c8ff652f2d77e0cc71baad10d8bf8a576cec17c2", "url": "https://github.com/artipie/artipie/commit/c8ff652f2d77e0cc71baad10d8bf8a576cec17c2", "message": "#798 - Check existing, trim filename for different extensions", "committedDate": "2020-12-14T11:56:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM1MzU0Nw==", "url": "https://github.com/artipie/artipie/pull/807#discussion_r542353547", "bodyText": "@genryxy ConfigFilesExtensions.Trim this class name does not look like name of an object, but looks more like a verb. I'd suggest to try come up with some better design", "author": "olegmoz", "createdAt": "2020-12-14T12:42:19Z", "path": "src/main/java/com/artipie/VertxMain.java", "diffHunk": "@@ -194,9 +195,10 @@ private void startRepos(final Settings settings, final Metrics metrics) {\n         final String yaml = \".yaml\";\n         final Collection<RepoConfig> configs = storage.list(Key.ROOT).thenApply(\n             keys -> keys.stream().map(Key::string)\n-                .filter(name -> name.endsWith(yaml) && name.charAt(0) != '_')\n-                .map(name -> name.substring(0, name.length() - yaml.length()))\n-                .map(name -> new RepositoriesFromStorage(storage).config(name))\n+                .filter(name -> name.charAt(0) != '_')\n+                .map(name -> new ConfigFilesExtensions.Trim(name).value())", "originalCommit": "c8ff652f2d77e0cc71baad10d8bf8a576cec17c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77ae0a599c1965e070d27993eaa952c6a9844b06", "chunk": "diff --git a/src/main/java/com/artipie/VertxMain.java b/src/main/java/com/artipie/VertxMain.java\nindex 7489509..1a972b7 100644\n--- a/src/main/java/com/artipie/VertxMain.java\n+++ b/src/main/java/com/artipie/VertxMain.java\n\n@@ -192,11 +192,10 @@ public final class VertxMain {\n      */\n     private void startRepos(final Settings settings, final Metrics metrics) {\n         final Storage storage = settings.storage();\n-        final String yaml = \".yaml\";\n         final Collection<RepoConfig> configs = storage.list(Key.ROOT).thenApply(\n-            keys -> keys.stream().map(Key::string)\n-                .filter(name -> name.charAt(0) != '_')\n-                .map(name -> new ConfigFilesExtensions.Trim(name).value())\n+            keys -> keys.stream()\n+                .filter(name -> name.string().charAt(0) != '_')\n+                .map(name -> new ConfigFile(name).trimExtension())\n                 .filter(Optional::isPresent)\n                 .map(name -> new RepositoriesFromStorage(storage).config(name.get()))\n                 .map(stage -> stage.toCompletableFuture().join())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM1NDcwMw==", "url": "https://github.com/artipie/artipie/pull/807#discussion_r542354703", "bodyText": "@genryxy again here \"ConfigFilesExtensions\" checking that \"exists\" does not make sense to me, I'd suggest to make class redesign", "author": "olegmoz", "createdAt": "2020-12-14T12:44:26Z", "path": "src/main/java/com/artipie/http/ArtipieRepositories.java", "diffHunk": "@@ -67,7 +68,7 @@ public ArtipieRepositories(final Settings settings) {\n     public Slice slice(final Key name, final boolean standalone) {\n         final Storage storage = this.settings.storage();\n         return new AsyncSlice(\n-            storage.exists(new Key.From(String.format(\"%s.yaml\", name.string()))).thenCompose(\n+            new ConfigFilesExtensions(name.toString()).exists(storage).thenCompose(", "originalCommit": "c8ff652f2d77e0cc71baad10d8bf8a576cec17c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77ae0a599c1965e070d27993eaa952c6a9844b06", "chunk": "diff --git a/src/main/java/com/artipie/http/ArtipieRepositories.java b/src/main/java/com/artipie/http/ArtipieRepositories.java\nindex 3af8a7c..ed4fd5b 100644\n--- a/src/main/java/com/artipie/http/ArtipieRepositories.java\n+++ b/src/main/java/com/artipie/http/ArtipieRepositories.java\n\n@@ -68,7 +68,7 @@ public final class ArtipieRepositories {\n     public Slice slice(final Key name, final boolean standalone) {\n         final Storage storage = this.settings.storage();\n         return new AsyncSlice(\n-            new ConfigFilesExtensions(name.toString()).exists(storage).thenCompose(\n+            new ConfigFile(name).existsIn(storage).thenCompose(\n                 exists -> {\n                     final CompletionStage<Slice> res;\n                     if (exists) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM1NTY5MQ==", "url": "https://github.com/artipie/artipie/pull/807#discussion_r542355691", "bodyText": "@genryxy please do not use Key.toString method here, Key.string should be used in business logic and keep toString for debug print/logging only", "author": "olegmoz", "createdAt": "2020-12-14T12:46:10Z", "path": "src/main/java/com/artipie/http/ArtipieRepositories.java", "diffHunk": "@@ -67,7 +68,7 @@ public ArtipieRepositories(final Settings settings) {\n     public Slice slice(final Key name, final boolean standalone) {\n         final Storage storage = this.settings.storage();\n         return new AsyncSlice(\n-            storage.exists(new Key.From(String.format(\"%s.yaml\", name.string()))).thenCompose(\n+            new ConfigFilesExtensions(name.toString()).exists(storage).thenCompose(", "originalCommit": "c8ff652f2d77e0cc71baad10d8bf8a576cec17c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77ae0a599c1965e070d27993eaa952c6a9844b06", "chunk": "diff --git a/src/main/java/com/artipie/http/ArtipieRepositories.java b/src/main/java/com/artipie/http/ArtipieRepositories.java\nindex 3af8a7c..ed4fd5b 100644\n--- a/src/main/java/com/artipie/http/ArtipieRepositories.java\n+++ b/src/main/java/com/artipie/http/ArtipieRepositories.java\n\n@@ -68,7 +68,7 @@ public final class ArtipieRepositories {\n     public Slice slice(final Key name, final boolean standalone) {\n         final Storage storage = this.settings.storage();\n         return new AsyncSlice(\n-            new ConfigFilesExtensions(name.toString()).exists(storage).thenCompose(\n+            new ConfigFile(name).existsIn(storage).thenCompose(\n                 exists -> {\n                     final CompletionStage<Slice> res;\n                     if (exists) {\n"}}, {"oid": "77ae0a599c1965e070d27993eaa952c6a9844b06", "url": "https://github.com/artipie/artipie/commit/77ae0a599c1965e070d27993eaa952c6a9844b06", "message": "#797 - Changes by review", "committedDate": "2020-12-14T13:57:31Z", "type": "commit"}, {"oid": "bfbbd4bd5b1403ad1b56135a4a2ca261ab287d3b", "url": "https://github.com/artipie/artipie/commit/bfbbd4bd5b1403ad1b56135a4a2ca261ab287d3b", "message": "#797 - Fix for empty case", "committedDate": "2020-12-14T14:30:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExNTgxNA==", "url": "https://github.com/artipie/artipie/pull/807#discussion_r543115814", "bodyText": "@genryxy I think this method does not belong to this pull request. It does not have proper implementation yet, so I'd suggest to add it later with proper usage and tests", "author": "olegmoz", "createdAt": "2020-12-15T07:44:47Z", "path": "src/main/java/com/artipie/repo/ConfigFile.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.repo;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Supporting several config files extensions (e.g. `.yaml` and `.yml`).\n+ *\n+ * @since 0.14\n+ */\n+public final class ConfigFile {\n+\n+    /**\n+     * Pattern to divide filename into two groups: name and extension.\n+     */\n+    private static final Pattern PTN = Pattern.compile(\"(?<name>.*)(\\\\.yaml|\\\\.yml)$\");\n+\n+    /**\n+     * Filename.\n+     */\n+    private final String filename;\n+\n+    /**\n+     * Ctor.\n+     * @param filename Filename\n+     */\n+    public ConfigFile(final String filename) {\n+        this.filename = filename;\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param filename Filename\n+     */\n+    public ConfigFile(final Key filename) {\n+        this(filename.string());\n+    }\n+\n+    /**\n+     * Does file exist in the specified storage?\n+     * @param storage Storage where the file with different extensions is checked for existence\n+     * @return True if a file with either of the two extensions exists, false otherwise.\n+     */\n+    public CompletionStage<Boolean> existsIn(final Storage storage) {\n+        final String name = this.trimExtension().orElse(this.filename);\n+        final Key yaml = new Key.From(String.format(\"%s.yaml\", name));\n+        return storage.exists(yaml)\n+            .thenCompose(\n+                exist -> {\n+                    final CompletionStage<Boolean> result;\n+                    if (exist) {\n+                        result = CompletableFuture.completedFuture(true);\n+                    } else {\n+                        final Key yml = new Key.From(String.format(\"%s.yml\", name));\n+                        result = storage.exists(yml);\n+                    }\n+                    return result;\n+                }\n+            );\n+    }\n+\n+    /**\n+     * Obtains contents from the specified storage.\n+     * @return Content of the file.\n+     */\n+    public CompletableFuture<Content> valueFrom() {\n+        throw new UnsupportedOperationException();\n+    }", "originalCommit": "bfbbd4bd5b1403ad1b56135a4a2ca261ab287d3b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee30fa030f7d359fda49ab40b7fe43a91d79f363", "chunk": "diff --git a/src/main/java/com/artipie/repo/ConfigFile.java b/src/main/java/com/artipie/repo/ConfigFile.java\nindex b51d83a..fa30490 100644\n--- a/src/main/java/com/artipie/repo/ConfigFile.java\n+++ b/src/main/java/com/artipie/repo/ConfigFile.java\n\n@@ -23,10 +23,8 @@\n  */\n package com.artipie.repo;\n \n-import com.artipie.asto.Content;\n import com.artipie.asto.Key;\n import com.artipie.asto.Storage;\n-import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.CompletionStage;\n import java.util.regex.Matcher;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExNjc2NA==", "url": "https://github.com/artipie/artipie/pull/807#discussion_r543116764", "bodyText": "@genryxy please provide better description here. Now the docs contain only details about extensions, which I think belong to trimExtensions method. For example existsIn method does nto care about extensions at all. And class instance might be created for any file name with extension or without it.", "author": "olegmoz", "createdAt": "2020-12-15T07:46:32Z", "path": "src/main/java/com/artipie/repo/ConfigFile.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.repo;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Supporting several config files extensions (e.g. `.yaml` and `.yml`).", "originalCommit": "bfbbd4bd5b1403ad1b56135a4a2ca261ab287d3b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee30fa030f7d359fda49ab40b7fe43a91d79f363", "chunk": "diff --git a/src/main/java/com/artipie/repo/ConfigFile.java b/src/main/java/com/artipie/repo/ConfigFile.java\nindex b51d83a..fa30490 100644\n--- a/src/main/java/com/artipie/repo/ConfigFile.java\n+++ b/src/main/java/com/artipie/repo/ConfigFile.java\n\n@@ -23,10 +23,8 @@\n  */\n package com.artipie.repo;\n \n-import com.artipie.asto.Content;\n import com.artipie.asto.Key;\n import com.artipie.asto.Storage;\n-import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.CompletionStage;\n import java.util.regex.Matcher;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExOTEwMA==", "url": "https://github.com/artipie/artipie/pull/807#discussion_r543119100", "bodyText": "@genryxy right now it is not really clear what this method returns. Does it trims name and return the extension or does it trim extension or return the name? Method name is trimExtension yet comment states \"Trim name\". This is misleading.\nI'd suggest to split the method into two: isYaml for filtering files and name that returns String without extension (or full name if it has no extension). I think it would be easier to understand this way.", "author": "olegmoz", "createdAt": "2020-12-15T07:50:49Z", "path": "src/main/java/com/artipie/repo/ConfigFile.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.repo;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Supporting several config files extensions (e.g. `.yaml` and `.yml`).\n+ *\n+ * @since 0.14\n+ */\n+public final class ConfigFile {\n+\n+    /**\n+     * Pattern to divide filename into two groups: name and extension.\n+     */\n+    private static final Pattern PTN = Pattern.compile(\"(?<name>.*)(\\\\.yaml|\\\\.yml)$\");\n+\n+    /**\n+     * Filename.\n+     */\n+    private final String filename;\n+\n+    /**\n+     * Ctor.\n+     * @param filename Filename\n+     */\n+    public ConfigFile(final String filename) {\n+        this.filename = filename;\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param filename Filename\n+     */\n+    public ConfigFile(final Key filename) {\n+        this(filename.string());\n+    }\n+\n+    /**\n+     * Does file exist in the specified storage?\n+     * @param storage Storage where the file with different extensions is checked for existence\n+     * @return True if a file with either of the two extensions exists, false otherwise.\n+     */\n+    public CompletionStage<Boolean> existsIn(final Storage storage) {\n+        final String name = this.trimExtension().orElse(this.filename);\n+        final Key yaml = new Key.From(String.format(\"%s.yaml\", name));\n+        return storage.exists(yaml)\n+            .thenCompose(\n+                exist -> {\n+                    final CompletionStage<Boolean> result;\n+                    if (exist) {\n+                        result = CompletableFuture.completedFuture(true);\n+                    } else {\n+                        final Key yml = new Key.From(String.format(\"%s.yml\", name));\n+                        result = storage.exists(yml);\n+                    }\n+                    return result;\n+                }\n+            );\n+    }\n+\n+    /**\n+     * Obtains contents from the specified storage.\n+     * @return Content of the file.\n+     */\n+    public CompletableFuture<Content> valueFrom() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Trim name of the config file.\n+     * @return Filename without extensions if a filename ends with either of\n+     *  the two extensions, otherwise empty.\n+     */\n+    public Optional<String> trimExtension() {", "originalCommit": "bfbbd4bd5b1403ad1b56135a4a2ca261ab287d3b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee30fa030f7d359fda49ab40b7fe43a91d79f363", "chunk": "diff --git a/src/main/java/com/artipie/repo/ConfigFile.java b/src/main/java/com/artipie/repo/ConfigFile.java\nindex b51d83a..fa30490 100644\n--- a/src/main/java/com/artipie/repo/ConfigFile.java\n+++ b/src/main/java/com/artipie/repo/ConfigFile.java\n\n@@ -23,10 +23,8 @@\n  */\n package com.artipie.repo;\n \n-import com.artipie.asto.Content;\n import com.artipie.asto.Key;\n import com.artipie.asto.Storage;\n-import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.CompletionStage;\n import java.util.regex.Matcher;\n"}}, {"oid": "ee30fa030f7d359fda49ab40b7fe43a91d79f363", "url": "https://github.com/artipie/artipie/commit/ee30fa030f7d359fda49ab40b7fe43a91d79f363", "message": "#797 - Changes by review", "committedDate": "2020-12-15T11:32:51Z", "type": "commit"}, {"oid": "609922fac7bc0c7e7dace8335c959f1045c140f1", "url": "https://github.com/artipie/artipie/commit/609922fac7bc0c7e7dace8335c959f1045c140f1", "message": "#797 - Change answer for bad extensions", "committedDate": "2020-12-15T11:41:50Z", "type": "commit"}, {"oid": "79f84655c44b011ccd0e4904be662abdc61b585a", "url": "https://github.com/artipie/artipie/commit/79f84655c44b011ccd0e4904be662abdc61b585a", "message": "#797 - Fix comment", "committedDate": "2020-12-15T11:47:13Z", "type": "commit"}, {"oid": "7ab964b682df1bcb67d408a1d3b1f4b7548463c8", "url": "https://github.com/artipie/artipie/commit/7ab964b682df1bcb67d408a1d3b1f4b7548463c8", "message": "Merge branch 'master' into 797-exists-and-trim-different-extensions", "committedDate": "2020-12-15T12:13:32Z", "type": "commit"}]}