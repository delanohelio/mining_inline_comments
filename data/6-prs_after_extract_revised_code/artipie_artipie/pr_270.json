{"pr_number": 270, "pr_title": "Refactored HTTP layer", "pr_createdAt": "2020-07-07T10:30:38Z", "pr_url": "https://github.com/artipie/artipie/pull/270", "timeline": [{"oid": "6dfc77ddb78b0ac680f1a90570c8c7043230ecdc", "url": "https://github.com/artipie/artipie/commit/6dfc77ddb78b0ac680f1a90570c8c7043230ecdc", "message": "#258 - refactored http layer", "committedDate": "2020-07-07T10:29:52Z", "type": "commit"}, {"oid": "f824786f009d49437ef6999bbe7e71ea9cbdab23", "url": "https://github.com/artipie/artipie/commit/f824786f009d49437ef6999bbe7e71ea9cbdab23", "message": "Merge branch 'master' into 258", "committedDate": "2020-07-07T13:31:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg4Mjg5MQ==", "url": "https://github.com/artipie/artipie/pull/270#discussion_r450882891", "bodyText": "@g4s8 extract this to a private method to make it more readable", "author": "Vatavuk", "createdAt": "2020-07-07T13:55:13Z", "path": "src/main/java/com/artipie/http/ArtipieRepositories.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http;\n+\n+import com.artipie.RepoConfig;\n+import com.artipie.Settings;\n+import com.artipie.SliceFromConfig;\n+import com.artipie.StorageAliases;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.async.AsyncSlice;\n+import com.artipie.http.rs.RsWithBody;\n+import com.artipie.http.rs.StandardRs;\n+import com.artipie.http.slice.SliceSimple;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+/**\n+ * Artipie repositories implementation.\n+ * @since 0.9\n+ */\n+final class ArtipieRepositories implements Repositories {\n+\n+    /**\n+     * Artipie settings.\n+     */\n+    private final Settings settings;\n+\n+    /**\n+     * New Artipie repositories.\n+     * @param settings Artipie settings\n+     */\n+    ArtipieRepositories(final Settings settings) {\n+        this.settings = settings;\n+    }\n+\n+    @Override\n+    public Slice slice(final Key name) throws IOException {\n+        final Storage storage = this.settings.storage();\n+        final Key.From key = new Key.From(String.format(\"%s.yaml\", name.string()));\n+        return new AsyncSlice(\n+            storage.exists(key).thenCompose(\n+                exists -> {\n+                    final CompletionStage<Slice> res;\n+                    if (exists) {\n+                        res = storage.value(key).thenCompose(\n+                            pub -> StorageAliases.find(storage, name).thenCompose(", "originalCommit": "f824786f009d49437ef6999bbe7e71ea9cbdab23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01550e2aecf3be2bfd47375773b554b9a15a9439", "chunk": "diff --git a/src/main/java/com/artipie/http/ArtipieRepositories.java b/src/main/java/com/artipie/http/ArtipieRepositories.java\nindex 31ad6fa..5ea851b 100644\n--- a/src/main/java/com/artipie/http/ArtipieRepositories.java\n+++ b/src/main/java/com/artipie/http/ArtipieRepositories.java\n\n@@ -33,6 +33,8 @@ import com.artipie.http.async.AsyncSlice;\n import com.artipie.http.rs.RsWithBody;\n import com.artipie.http.rs.StandardRs;\n import com.artipie.http.slice.SliceSimple;\n+import hu.akarnokd.rxjava2.interop.SingleInterop;\n+import io.reactivex.Single;\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.concurrent.CompletableFuture;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg4MzIyMg==", "url": "https://github.com/artipie/artipie/pull/270#discussion_r450883222", "bodyText": "@g4s8 since 0.9", "author": "Vatavuk", "createdAt": "2020-07-07T13:55:40Z", "path": "src/main/java/com/artipie/http/Pie.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http;\n+\n+import com.artipie.Settings;\n+import com.artipie.api.ArtipieApi;\n+import com.artipie.dashboard.DashboardSlice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import com.artipie.http.rt.RtPath;\n+import com.artipie.http.rt.RtRule;\n+import com.artipie.http.rt.RtRulePath;\n+import com.artipie.http.rt.SliceRoute;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Pie of slices.\n+ * @since 1.0", "originalCommit": "f824786f009d49437ef6999bbe7e71ea9cbdab23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01550e2aecf3be2bfd47375773b554b9a15a9439", "chunk": "diff --git a/src/main/java/com/artipie/http/Pie.java b/src/main/java/com/artipie/http/Pie.java\nindex 15eeee0..c5fcb9c 100644\n--- a/src/main/java/com/artipie/http/Pie.java\n+++ b/src/main/java/com/artipie/http/Pie.java\n\n@@ -39,7 +39,7 @@ import java.util.regex.Pattern;\n \n /**\n  * Pie of slices.\n- * @since 1.0\n+ * @since 0.1\n  * @checkstyle ReturnCountCheck (500 lines)\n  * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkyMzUyMA==", "url": "https://github.com/artipie/artipie/pull/270#discussion_r450923520", "bodyText": "@g4s8 I would rename this class to SafeSlice to be consistent with rest of the naming convention", "author": "Vatavuk", "createdAt": "2020-07-07T14:48:47Z", "path": "src/main/java/com/artipie/http/SliceSafe.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http;\n+\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithBody;\n+import com.artipie.http.rs.RsWithStatus;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice which handles all exceptions and respond with 500 error in that case.\n+ * @since 0.9\n+ * @checkstyle IllegalCatchCheck (500 lines)\n+ * @checkstyle ReturnCountCheck (500 lines)\n+ */\n+@SuppressWarnings({\"PMD.OnlyOneReturn\", \"PMD.AvoidCatchingGenericException\"})\n+final class SliceSafe implements Slice {", "originalCommit": "f824786f009d49437ef6999bbe7e71ea9cbdab23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01550e2aecf3be2bfd47375773b554b9a15a9439", "chunk": "diff --git a/src/main/java/com/artipie/http/SliceSafe.java b/src/main/java/com/artipie/http/SafeSlice.java\nsimilarity index 98%\nrename from src/main/java/com/artipie/http/SliceSafe.java\nrename to src/main/java/com/artipie/http/SafeSlice.java\nindex c5cbc95..61a7315 100644\n--- a/src/main/java/com/artipie/http/SliceSafe.java\n+++ b/src/main/java/com/artipie/http/SafeSlice.java\n\n@@ -40,7 +40,7 @@ import org.reactivestreams.Publisher;\n  * @checkstyle ReturnCountCheck (500 lines)\n  */\n @SuppressWarnings({\"PMD.OnlyOneReturn\", \"PMD.AvoidCatchingGenericException\"})\n-final class SliceSafe implements Slice {\n+final class SafeSlice implements Slice {\n \n     /**\n      * Origin slice.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkzMDgwNQ==", "url": "https://github.com/artipie/artipie/pull/270#discussion_r450930805", "bodyText": "@g4s8 we should add a check for split size to avoid indexoutofbouds", "author": "Vatavuk", "createdAt": "2020-07-07T14:58:20Z", "path": "src/main/java/com/artipie/http/SliceByPath.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http;\n+\n+import com.artipie.Settings;\n+import com.artipie.asto.Key;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithBody;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice which finds repository by path.\n+ * @since 0.9\n+ */\n+final class SliceByPath implements Slice {\n+\n+    /**\n+     * Artipie settings.\n+     */\n+    private final Settings settings;\n+\n+    /**\n+     * Repositories.\n+     */\n+    private final Repositories repositories;\n+\n+    /**\n+     * New slice from settings.\n+     * @param settings Artipie settings\n+     */\n+    SliceByPath(final Settings settings) {\n+        this(settings, new ArtipieRepositories(settings));\n+    }\n+\n+    /**\n+     * New slice from settings and repositories.\n+     * @param settings Artipie settings\n+     * @param repositories Repositories provider\n+     */\n+    SliceByPath(final Settings settings, final Repositories repositories) {\n+        this.settings = settings;\n+        this.repositories = repositories;\n+    }\n+\n+    // @checkstyle ReturnCountCheck (20 lines)\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final Key key;\n+        try {\n+            final String[] split = new RequestLineFrom(line).uri().getPath()\n+                .replaceAll(\"^/+\", \"\").split(\"/\");\n+            if (this.settings.layout().equals(\"org\")) {\n+                key = new Key.From(split[0], split[1]);", "originalCommit": "f824786f009d49437ef6999bbe7e71ea9cbdab23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01550e2aecf3be2bfd47375773b554b9a15a9439", "chunk": "diff --git a/src/main/java/com/artipie/http/SliceByPath.java b/src/main/java/com/artipie/http/SliceByPath.java\nindex 4d9ee99..2e82fd7 100644\n--- a/src/main/java/com/artipie/http/SliceByPath.java\n+++ b/src/main/java/com/artipie/http/SliceByPath.java\n\n@@ -79,8 +79,14 @@ final class SliceByPath implements Slice {\n             final String[] split = new RequestLineFrom(line).uri().getPath()\n                 .replaceAll(\"^/+\", \"\").split(\"/\");\n             if (this.settings.layout().equals(\"org\")) {\n+                if (split.length < 2) {\n+                    throw new IllegalStateException(\"Expected at least 2 path segments\");\n+                }\n                 key = new Key.From(split[0], split[1]);\n             } else {\n+                if (split.length < 1) {\n+                    throw new IllegalStateException(\"Expected at least 1 path segment\");\n+                }\n                 key = new Key.From(split[0]);\n             }\n             return this.repositories.slice(key).response(line, headers, body);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkzMTA0NQ==", "url": "https://github.com/artipie/artipie/pull/270#discussion_r450931045", "bodyText": "@g4s8 we should add a check for split size to avoid indexoutofbouds", "author": "Vatavuk", "createdAt": "2020-07-07T14:58:36Z", "path": "src/main/java/com/artipie/http/SliceByPath.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http;\n+\n+import com.artipie.Settings;\n+import com.artipie.asto.Key;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithBody;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice which finds repository by path.\n+ * @since 0.9\n+ */\n+final class SliceByPath implements Slice {\n+\n+    /**\n+     * Artipie settings.\n+     */\n+    private final Settings settings;\n+\n+    /**\n+     * Repositories.\n+     */\n+    private final Repositories repositories;\n+\n+    /**\n+     * New slice from settings.\n+     * @param settings Artipie settings\n+     */\n+    SliceByPath(final Settings settings) {\n+        this(settings, new ArtipieRepositories(settings));\n+    }\n+\n+    /**\n+     * New slice from settings and repositories.\n+     * @param settings Artipie settings\n+     * @param repositories Repositories provider\n+     */\n+    SliceByPath(final Settings settings, final Repositories repositories) {\n+        this.settings = settings;\n+        this.repositories = repositories;\n+    }\n+\n+    // @checkstyle ReturnCountCheck (20 lines)\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        final Key key;\n+        try {\n+            final String[] split = new RequestLineFrom(line).uri().getPath()\n+                .replaceAll(\"^/+\", \"\").split(\"/\");\n+            if (this.settings.layout().equals(\"org\")) {\n+                key = new Key.From(split[0], split[1]);\n+            } else {\n+                key = new Key.From(split[0]);", "originalCommit": "f824786f009d49437ef6999bbe7e71ea9cbdab23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01550e2aecf3be2bfd47375773b554b9a15a9439", "chunk": "diff --git a/src/main/java/com/artipie/http/SliceByPath.java b/src/main/java/com/artipie/http/SliceByPath.java\nindex 4d9ee99..2e82fd7 100644\n--- a/src/main/java/com/artipie/http/SliceByPath.java\n+++ b/src/main/java/com/artipie/http/SliceByPath.java\n\n@@ -79,8 +79,14 @@ final class SliceByPath implements Slice {\n             final String[] split = new RequestLineFrom(line).uri().getPath()\n                 .replaceAll(\"^/+\", \"\").split(\"/\");\n             if (this.settings.layout().equals(\"org\")) {\n+                if (split.length < 2) {\n+                    throw new IllegalStateException(\"Expected at least 2 path segments\");\n+                }\n                 key = new Key.From(split[0], split[1]);\n             } else {\n+                if (split.length < 1) {\n+                    throw new IllegalStateException(\"Expected at least 1 path segment\");\n+                }\n                 key = new Key.From(split[0]);\n             }\n             return this.repositories.slice(key).response(line, headers, body);\n"}}, {"oid": "01550e2aecf3be2bfd47375773b554b9a15a9439", "url": "https://github.com/artipie/artipie/commit/01550e2aecf3be2bfd47375773b554b9a15a9439", "message": "#258 - review fixes", "committedDate": "2020-07-08T14:26:52Z", "type": "commit"}, {"oid": "ee3dc12d1545a47919868d5f1124df20ff48fe10", "url": "https://github.com/artipie/artipie/commit/ee3dc12d1545a47919868d5f1124df20ff48fe10", "message": "Merge branch 'master' into 258", "committedDate": "2020-07-08T15:09:26Z", "type": "commit"}]}