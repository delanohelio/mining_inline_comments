{"pr_number": 475, "pr_title": "#447 - Add MetricSliceTest", "pr_createdAt": "2020-08-20T12:45:22Z", "pr_url": "https://github.com/artipie/artipie/pull/475", "timeline": [{"oid": "a7c194185fbff7525bd4a1b32e778731e9af5afb", "url": "https://github.com/artipie/artipie/commit/a7c194185fbff7525bd4a1b32e778731e9af5afb", "message": "#447 - Add MetricSliceTest", "committedDate": "2020-08-20T12:44:02Z", "type": "commit"}, {"oid": "9ce766903726ff4369dc88ecb1c039ea690d54d3", "url": "https://github.com/artipie/artipie/commit/9ce766903726ff4369dc88ecb1c039ea690d54d3", "message": "#447 - Fix order", "committedDate": "2020-08-20T13:00:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0NTgzMg==", "url": "https://github.com/artipie/artipie/pull/475#discussion_r473945832", "bodyText": "@genryxy test method name is not informative, please elaborate what's being tested here", "author": "olegmoz", "createdAt": "2020-08-20T12:52:53Z", "path": "src/test/java/com/artipie/metrics/MetricSliceTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.hm.RsHasBody;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.hm.SliceHasResponse;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqMethod;\n+import com.artipie.http.rs.RsStatus;\n+import java.nio.charset.StandardCharsets;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link MetricSlice}.\n+ *\n+ * @since 0.10\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+final class MetricSliceTest {\n+    @Test\n+    void test() {", "originalCommit": "a7c194185fbff7525bd4a1b32e778731e9af5afb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1MTM1MQ==", "url": "https://github.com/artipie/artipie/pull/475#discussion_r473951351", "bodyText": "@olegmoz yes, sorry", "author": "genryxy", "createdAt": "2020-08-20T13:01:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0NTgzMg=="}], "type": "inlineReview", "revised_code": {"commit": "9ce766903726ff4369dc88ecb1c039ea690d54d3", "chunk": "diff --git a/src/test/java/com/artipie/metrics/MetricSliceTest.java b/src/test/java/com/artipie/metrics/MetricSliceTest.java\nindex 86ec956..76854c2 100644\n--- a/src/test/java/com/artipie/metrics/MetricSliceTest.java\n+++ b/src/test/java/com/artipie/metrics/MetricSliceTest.java\n\n@@ -49,17 +49,19 @@ final class MetricSliceTest {\n     void test() {\n         final byte[] dataone = \"1\".getBytes();\n         final byte[] datatwo = \"2\".getBytes();\n+        final String dirorder = \"[{\\\"key\\\":\\\"one\\\",\\\"value\\\":1},{\\\"key\\\":\\\"two\\\",\\\"value\\\":2}]\";\n+        final String revorder = \"[{\\\"key\\\":\\\"two\\\",\\\"value\\\":2},{\\\"key\\\":\\\"one\\\",\\\"value\\\":1}]\";\n         final Storage storage = new InMemoryStorage();\n-        storage.save(new Key.From(\"two\"), new Content.From(datatwo));\n         storage.save(new Key.From(\"one\"), new Content.From(dataone));\n+        storage.save(new Key.From(\"two\"), new Content.From(datatwo));\n         MatcherAssert.assertThat(\n             new MetricSlice(storage),\n             new SliceHasResponse(\n                 Matchers.allOf(\n                     new RsHasStatus(RsStatus.OK),\n-                    new RsHasBody(\n-                        \"[{\\\"key\\\":\\\"two\\\",\\\"value\\\":2},{\\\"key\\\":\\\"one\\\",\\\"value\\\":1}]\",\n-                        StandardCharsets.UTF_8\n+                    Matchers.anyOf(\n+                        new RsHasBody(dirorder, StandardCharsets.UTF_8),\n+                        new RsHasBody(revorder, StandardCharsets.UTF_8)\n                     )\n                 ),\n                 new RequestLine(RqMethod.GET, \"/api/repositories/\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0NzM1OQ==", "url": "https://github.com/artipie/artipie/pull/475#discussion_r473947359", "bodyText": "@genryxy there is even better way to verify JSON using wtf.g4s8.hamcrest.json library, you can find usage example here https://github.com/artipie/nuget-adapter/blob/master/src/test/java/com/artipie/nuget/http/metadata/RegistrationPageTest.java\nUsing specialized matchers we do not enforce formatting and semantically identical JSON with different formatting will be considered equal.", "author": "olegmoz", "createdAt": "2020-08-20T12:55:13Z", "path": "src/test/java/com/artipie/metrics/MetricSliceTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.hm.RsHasBody;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.hm.SliceHasResponse;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqMethod;\n+import com.artipie.http.rs.RsStatus;\n+import java.nio.charset.StandardCharsets;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link MetricSlice}.\n+ *\n+ * @since 0.10\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+final class MetricSliceTest {\n+    @Test\n+    void test() {\n+        final byte[] dataone = \"1\".getBytes();\n+        final byte[] datatwo = \"2\".getBytes();\n+        final Storage storage = new InMemoryStorage();\n+        storage.save(new Key.From(\"two\"), new Content.From(datatwo));\n+        storage.save(new Key.From(\"one\"), new Content.From(dataone));\n+        MatcherAssert.assertThat(\n+            new MetricSlice(storage),\n+            new SliceHasResponse(\n+                Matchers.allOf(\n+                    new RsHasStatus(RsStatus.OK),\n+                    new RsHasBody(\n+                        \"[{\\\"key\\\":\\\"two\\\",\\\"value\\\":2},{\\\"key\\\":\\\"one\\\",\\\"value\\\":1}]\",\n+                        StandardCharsets.UTF_8\n+                    )", "originalCommit": "a7c194185fbff7525bd4a1b32e778731e9af5afb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA0NjA3NQ==", "url": "https://github.com/artipie/artipie/pull/475#discussion_r474046075", "bodyText": "@genryxy another example of JSON response matching: https://github.com/artipie/docker-adapter/blob/master/src/test/java/com/artipie/docker/http/IsErrorsResponse.java", "author": "olegmoz", "createdAt": "2020-08-20T14:55:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0NzM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1NzI0MQ==", "url": "https://github.com/artipie/artipie/pull/475#discussion_r474457241", "bodyText": "@olegmoz thanks, I've implemented (probably not quite right) matchers with this approach but problem with order remain.\n        MatcherAssert.assertThat(\n            new MetricSlice(storage).response(\n                new RequestLine(RqMethod.GET, \"/api/repositories/\").toString(),\n                Headers.EMPTY,\n                Flowable.empty()\n            ),\n            new AllOf<>(\n                Arrays.asList(\n                    new RsHasStatus(RsStatus.OK),\n                    new RsHasBody(\n                        new IsJson(\n                            new JsonContains(\n                                new AllOf<>(\n                                    Arrays.asList(\n                                        new JsonHas(\"key\", new JsonValueIs(keyone)),\n                                        new JsonHas(\"value\", new JsonValueIs(valone))\n                                    )\n                                ),\n                                new AllOf<>(\n                                    Arrays.asList(\n                                        new JsonHas(\"key\", new JsonValueIs(keytwo)),\n                                        new JsonHas(\"value\", new JsonValueIs(valtwo))\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        );", "author": "genryxy", "createdAt": "2020-08-21T07:14:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0NzM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ4NDEwOA==", "url": "https://github.com/artipie/artipie/pull/475#discussion_r474484108", "bodyText": "@genryxy yeah, I see now that JsonContains lacks option to match the array ignoring order. Nothing to do about it now. Good thing is that order of keys is guaranteed by Storage.list method, so order is not likely to change", "author": "olegmoz", "createdAt": "2020-08-21T07:46:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0NzM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ5MTg5OA==", "url": "https://github.com/artipie/artipie/pull/475#discussion_r474491898", "bodyText": "@olegmoz Could I implement this checking with anyOf<>() matcher? Something like this:\nnew AnyOf<>(\n    Arrays.asList(\n        new RsHasBody(dirorder, StandardCharsets.UTF_8),\n        new RsHasBody(revorder, StandardCharsets.UTF_8)\n     )\n)", "author": "genryxy", "createdAt": "2020-08-21T07:56:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0NzM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ5MzQyNg==", "url": "https://github.com/artipie/artipie/pull/475#discussion_r474493426", "bodyText": "@genryxy yes, sure", "author": "olegmoz", "createdAt": "2020-08-21T07:57:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0NzM1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9ce766903726ff4369dc88ecb1c039ea690d54d3", "chunk": "diff --git a/src/test/java/com/artipie/metrics/MetricSliceTest.java b/src/test/java/com/artipie/metrics/MetricSliceTest.java\nindex 86ec956..76854c2 100644\n--- a/src/test/java/com/artipie/metrics/MetricSliceTest.java\n+++ b/src/test/java/com/artipie/metrics/MetricSliceTest.java\n\n@@ -49,17 +49,19 @@ final class MetricSliceTest {\n     void test() {\n         final byte[] dataone = \"1\".getBytes();\n         final byte[] datatwo = \"2\".getBytes();\n+        final String dirorder = \"[{\\\"key\\\":\\\"one\\\",\\\"value\\\":1},{\\\"key\\\":\\\"two\\\",\\\"value\\\":2}]\";\n+        final String revorder = \"[{\\\"key\\\":\\\"two\\\",\\\"value\\\":2},{\\\"key\\\":\\\"one\\\",\\\"value\\\":1}]\";\n         final Storage storage = new InMemoryStorage();\n-        storage.save(new Key.From(\"two\"), new Content.From(datatwo));\n         storage.save(new Key.From(\"one\"), new Content.From(dataone));\n+        storage.save(new Key.From(\"two\"), new Content.From(datatwo));\n         MatcherAssert.assertThat(\n             new MetricSlice(storage),\n             new SliceHasResponse(\n                 Matchers.allOf(\n                     new RsHasStatus(RsStatus.OK),\n-                    new RsHasBody(\n-                        \"[{\\\"key\\\":\\\"two\\\",\\\"value\\\":2},{\\\"key\\\":\\\"one\\\",\\\"value\\\":1}]\",\n-                        StandardCharsets.UTF_8\n+                    Matchers.anyOf(\n+                        new RsHasBody(dirorder, StandardCharsets.UTF_8),\n+                        new RsHasBody(revorder, StandardCharsets.UTF_8)\n                     )\n                 ),\n                 new RequestLine(RqMethod.GET, \"/api/repositories/\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1MDI0Ng==", "url": "https://github.com/artipie/artipie/pull/475#discussion_r473950246", "bodyText": "@genryxy creating matchers using constructors is preferred in this project over creation using static methods, so it will be better to use new AllOf<> here", "author": "olegmoz", "createdAt": "2020-08-20T13:00:02Z", "path": "src/test/java/com/artipie/metrics/MetricSliceTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.hm.RsHasBody;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.hm.SliceHasResponse;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqMethod;\n+import com.artipie.http.rs.RsStatus;\n+import java.nio.charset.StandardCharsets;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link MetricSlice}.\n+ *\n+ * @since 0.10\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+final class MetricSliceTest {\n+    @Test\n+    void test() {\n+        final byte[] dataone = \"1\".getBytes();\n+        final byte[] datatwo = \"2\".getBytes();\n+        final Storage storage = new InMemoryStorage();\n+        storage.save(new Key.From(\"two\"), new Content.From(datatwo));\n+        storage.save(new Key.From(\"one\"), new Content.From(dataone));\n+        MatcherAssert.assertThat(\n+            new MetricSlice(storage),\n+            new SliceHasResponse(\n+                Matchers.allOf(", "originalCommit": "a7c194185fbff7525bd4a1b32e778731e9af5afb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ce766903726ff4369dc88ecb1c039ea690d54d3", "chunk": "diff --git a/src/test/java/com/artipie/metrics/MetricSliceTest.java b/src/test/java/com/artipie/metrics/MetricSliceTest.java\nindex 86ec956..76854c2 100644\n--- a/src/test/java/com/artipie/metrics/MetricSliceTest.java\n+++ b/src/test/java/com/artipie/metrics/MetricSliceTest.java\n\n@@ -49,17 +49,19 @@ final class MetricSliceTest {\n     void test() {\n         final byte[] dataone = \"1\".getBytes();\n         final byte[] datatwo = \"2\".getBytes();\n+        final String dirorder = \"[{\\\"key\\\":\\\"one\\\",\\\"value\\\":1},{\\\"key\\\":\\\"two\\\",\\\"value\\\":2}]\";\n+        final String revorder = \"[{\\\"key\\\":\\\"two\\\",\\\"value\\\":2},{\\\"key\\\":\\\"one\\\",\\\"value\\\":1}]\";\n         final Storage storage = new InMemoryStorage();\n-        storage.save(new Key.From(\"two\"), new Content.From(datatwo));\n         storage.save(new Key.From(\"one\"), new Content.From(dataone));\n+        storage.save(new Key.From(\"two\"), new Content.From(datatwo));\n         MatcherAssert.assertThat(\n             new MetricSlice(storage),\n             new SliceHasResponse(\n                 Matchers.allOf(\n                     new RsHasStatus(RsStatus.OK),\n-                    new RsHasBody(\n-                        \"[{\\\"key\\\":\\\"two\\\",\\\"value\\\":2},{\\\"key\\\":\\\"one\\\",\\\"value\\\":1}]\",\n-                        StandardCharsets.UTF_8\n+                    Matchers.anyOf(\n+                        new RsHasBody(dirorder, StandardCharsets.UTF_8),\n+                        new RsHasBody(revorder, StandardCharsets.UTF_8)\n                     )\n                 ),\n                 new RequestLine(RqMethod.GET, \"/api/repositories/\")\n"}}, {"oid": "a76b29f462461323f9c3c2065edf40909cc9a4e7", "url": "https://github.com/artipie/artipie/commit/a76b29f462461323f9c3c2065edf40909cc9a4e7", "message": "#447 - Review fixes", "committedDate": "2020-08-21T08:12:28Z", "type": "commit"}, {"oid": "3efc18fb4cd690dbe9efe53689b9b93cb20144bf", "url": "https://github.com/artipie/artipie/commit/3efc18fb4cd690dbe9efe53689b9b93cb20144bf", "message": "Merge remote-tracking branch 'upstream/master' into 447-MetricSliceTest", "committedDate": "2020-08-21T08:12:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxNDY3MQ==", "url": "https://github.com/artipie/artipie/pull/475#discussion_r474514671", "bodyText": "@genryxy it seems that this method is always used to create Content, so I think it might return Content and be renamed accordingly", "author": "olegmoz", "createdAt": "2020-08-21T08:22:38Z", "path": "src/test/java/com/artipie/metrics/MetricSliceTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.metrics;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.hm.RsHasBody;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.hm.SliceHasResponse;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqMethod;\n+import com.artipie.http.rs.RsStatus;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.AllOf;\n+import org.hamcrest.core.AnyOf;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link MetricSlice}.\n+ *\n+ * @since 0.10\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+final class MetricSliceTest {\n+    @Test\n+    void shouldReturnMetricsInJsonArray() {\n+        final String keyone = \"one\";\n+        final String keytwo = \"two\";\n+        final String json = \"[{\\\"key\\\":\\\"%s\\\",\\\"value\\\":%s},{\\\"key\\\":\\\"%s\\\",\\\"value\\\":%s}]\";\n+        final long valone = 1;\n+        final long valtwo = 2;\n+        final String dirorder = String.format(json, keyone, valone, keytwo, valtwo);\n+        final String revorder = String.format(json, keytwo, valtwo, keyone, valone);\n+        final Storage storage = new InMemoryStorage();\n+        storage.save(new Key.From(keyone), new Content.From(this.getBytes(valone)));\n+        storage.save(new Key.From(keytwo), new Content.From(this.getBytes(valtwo)));\n+        MatcherAssert.assertThat(\n+            new MetricSlice(storage),\n+            new SliceHasResponse(\n+                new AllOf<>(\n+                    Arrays.asList(\n+                        new RsHasStatus(RsStatus.OK),\n+                        new AnyOf<>(\n+                            Arrays.asList(\n+                                new RsHasBody(dirorder, StandardCharsets.UTF_8),\n+                                new RsHasBody(revorder, StandardCharsets.UTF_8)\n+                            )\n+                        )\n+                    )\n+                ),\n+                new RequestLine(RqMethod.GET, \"/api/repositories/\")\n+            )\n+        );\n+    }\n+\n+    /**\n+     * Get array of bytes of the string.\n+     *\n+     * @param number Number The number to get an array of bytes\n+     * @return Array of bytes.\n+     */\n+    private byte[] getBytes(final long number) {", "originalCommit": "3efc18fb4cd690dbe9efe53689b9b93cb20144bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d92aa7e620f635fdfb70185f90801f53d7c3ede0", "chunk": "diff --git a/src/test/java/com/artipie/metrics/MetricSliceTest.java b/src/test/java/com/artipie/metrics/MetricSliceTest.java\nindex 0da9cb4..ff2319d 100644\n--- a/src/test/java/com/artipie/metrics/MetricSliceTest.java\n+++ b/src/test/java/com/artipie/metrics/MetricSliceTest.java\n\n@@ -57,8 +57,8 @@ final class MetricSliceTest {\n         final String dirorder = String.format(json, keyone, valone, keytwo, valtwo);\n         final String revorder = String.format(json, keytwo, valtwo, keyone, valone);\n         final Storage storage = new InMemoryStorage();\n-        storage.save(new Key.From(keyone), new Content.From(this.getBytes(valone)));\n-        storage.save(new Key.From(keytwo), new Content.From(this.getBytes(valtwo)));\n+        storage.save(new Key.From(keyone), this.getContent(valone));\n+        storage.save(new Key.From(keytwo), this.getContent(valtwo));\n         MatcherAssert.assertThat(\n             new MetricSlice(storage),\n             new SliceHasResponse(\n"}}, {"oid": "d92aa7e620f635fdfb70185f90801f53d7c3ede0", "url": "https://github.com/artipie/artipie/commit/d92aa7e620f635fdfb70185f90801f53d7c3ede0", "message": "#447 - Remove dependency, modify method", "committedDate": "2020-08-21T08:33:19Z", "type": "commit"}]}