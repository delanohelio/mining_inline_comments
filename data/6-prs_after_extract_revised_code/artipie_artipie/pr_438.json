{"pr_number": 438, "pr_title": "#272 - extend ResponseMetricsSlice test", "pr_createdAt": "2020-08-13T06:09:22Z", "pr_url": "https://github.com/artipie/artipie/pull/438", "timeline": [{"oid": "0cb903d806150e09219a985defe311116c5135ab", "url": "https://github.com/artipie/artipie/commit/0cb903d806150e09219a985defe311116c5135ab", "message": "#272 - extend ResponseMetricsSlice test", "committedDate": "2020-08-13T06:08:12Z", "type": "commit"}, {"oid": "10180c4fb96e9d245150f547608a3ab326b47cdf", "url": "https://github.com/artipie/artipie/commit/10180c4fb96e9d245150f547608a3ab326b47cdf", "message": "#272 - unused import removed", "committedDate": "2020-08-13T06:12:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgxMTE1NA==", "url": "https://github.com/artipie/artipie/pull/438#discussion_r469811154", "bodyText": "@olenagerasimova I'd use SliceHasResponse + RsHasStatus, RsHasHeaders and RsHasBody matchers instead of checking it inside the callback, since it can be never called and test passes.", "author": "g4s8", "createdAt": "2020-08-13T09:12:12Z", "path": "src/test/java/com/artipie/ResponseMetricsSliceTest.java", "diffHunk": "@@ -113,6 +122,57 @@ public void shouldReportBadAuthResponse() {\n         );\n     }\n \n+    @Test\n+    void shouldForwardRequestUnmodified() {\n+        final String line = new RequestLine(RqMethod.POST, \"/some_upload.war\").toString();\n+        final Header header = new Header(\"header1\", \"value1\");\n+        final byte[] body = \"some code\".getBytes();\n+        new ResponseMetricsSlice(\n+            (rqline, rqheaders, rqbody) -> {\n+                MatcherAssert.assertThat(\n+                    \"Request line is forwarded as is\",\n+                    rqline,\n+                    new IsEqual<>(line)\n+                );\n+                MatcherAssert.assertThat(\n+                    \"Headers are forwarded unmodified\",\n+                    rqheaders,\n+                    Matchers.containsInAnyOrder(header)\n+                );\n+                MatcherAssert.assertThat(\n+                    \"Body is forwarded unmodified\",\n+                    new PublisherAs(rqbody).bytes().toCompletableFuture().join(),\n+                    new IsEqual<>(body)\n+                );", "originalCommit": "10180c4fb96e9d245150f547608a3ab326b47cdf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f19b782b2e1ccff92df36a82a829103e1429d98b", "chunk": "diff --git a/src/test/java/com/artipie/ResponseMetricsSliceTest.java b/src/test/java/com/artipie/ResponseMetricsSliceTest.java\nindex 4371a52..570cb5d 100644\n--- a/src/test/java/com/artipie/ResponseMetricsSliceTest.java\n+++ b/src/test/java/com/artipie/ResponseMetricsSliceTest.java\n\n@@ -124,34 +121,23 @@ class ResponseMetricsSliceTest {\n \n     @Test\n     void shouldForwardRequestUnmodified() {\n-        final String line = new RequestLine(RqMethod.POST, \"/some_upload.war\").toString();\n         final Header header = new Header(\"header1\", \"value1\");\n         final byte[] body = \"some code\".getBytes();\n-        new ResponseMetricsSlice(\n-            (rqline, rqheaders, rqbody) -> {\n-                MatcherAssert.assertThat(\n-                    \"Request line is forwarded as is\",\n-                    rqline,\n-                    new IsEqual<>(line)\n-                );\n-                MatcherAssert.assertThat(\n-                    \"Headers are forwarded unmodified\",\n-                    rqheaders,\n-                    Matchers.containsInAnyOrder(header)\n-                );\n-                MatcherAssert.assertThat(\n-                    \"Body is forwarded unmodified\",\n-                    new PublisherAs(rqbody).bytes().toCompletableFuture().join(),\n-                    new IsEqual<>(body)\n-                );\n-                return StandardRs.OK;\n-            },\n-            this.metrics\n-        ).response(\n-            line, new Headers.From(header), Flowable.just(ByteBuffer.wrap(body))\n-        ).send(\n-            (status, rsheaders, rsbody) -> CompletableFuture.allOf()\n-        ).toCompletableFuture().join();\n+        final RsStatus status = RsStatus.CREATED;\n+        MatcherAssert.assertThat(\n+            new ResponseMetricsSlice(\n+                (rsline, rsheaders, rsbody) -> new RsFull(\n+                    status,\n+                    rsheaders,\n+                    rsbody\n+                ),\n+                this.metrics\n+            ).response(\n+                new RequestLine(RqMethod.POST, \"/some_upload.war\").toString(),\n+                new Headers.From(header), Flowable.just(ByteBuffer.wrap(body))\n+            ),\n+            new ResponseMatcher(status, body, header)\n+        );\n     }\n \n     @Test\n"}}, {"oid": "f19b782b2e1ccff92df36a82a829103e1429d98b", "url": "https://github.com/artipie/artipie/commit/f19b782b2e1ccff92df36a82a829103e1429d98b", "message": "#272 - CR", "committedDate": "2020-08-13T10:07:16Z", "type": "commit"}, {"oid": "f804ce4dcf4a2a95e517fbd216ef87ecab4517f1", "url": "https://github.com/artipie/artipie/commit/f804ce4dcf4a2a95e517fbd216ef87ecab4517f1", "message": "Merge branch 'master' into 272", "committedDate": "2020-08-13T14:35:42Z", "type": "commit"}]}