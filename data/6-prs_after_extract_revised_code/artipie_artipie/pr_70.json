{"pr_number": 70, "pr_title": "#69 Auth: test for repo permissions", "pr_createdAt": "2020-04-13T07:26:02Z", "pr_url": "https://github.com/artipie/artipie/pull/70", "timeline": [{"oid": "1e9b41ce1d79e09c2d45160be10e01b4a461ca27", "url": "https://github.com/artipie/artipie/commit/1e9b41ce1d79e09c2d45160be10e01b4a461ca27", "message": "#69 Auth: test for repo permissions", "committedDate": "2020-04-13T07:23:08Z", "type": "commit"}, {"oid": "0d14797b9fc12f7e28285aa96a5cd7995c3eddde", "url": "https://github.com/artipie/artipie/commit/0d14797b9fc12f7e28285aa96a5cd7995c3eddde", "message": "Merge branch 'master' of https://github.com/artipie/artipie into 69", "committedDate": "2020-04-13T07:26:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4MTYxNA==", "url": "https://github.com/artipie/artipie/pull/70#discussion_r407681614", "bodyText": "@olenagerasimova I believe we should assert * instead of anyone. Anyone can be a valid username.", "author": "Vatavuk", "createdAt": "2020-04-13T19:51:17Z", "path": "src/test/java/com/artipie/RpPermissionsTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import java.io.File;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.AllOf;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.MatcherOf;\n+\n+/**\n+ * Test for {@link RpPermissions}.\n+ * @since 0.2\n+ * @checkstyle LeftCurlyCheck (500 lines)\n+ */\n+@Disabled\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+class RpPermissionsTest {\n+\n+    /**\n+     * Test configuration file location.\n+     */\n+    private static final String CONF_YAML = \"src/test/resources/repo_permissions.yml\";\n+\n+    @Test\n+    void johnCanDownloadDeployAndDelete() {\n+        final String uname = \"John\";\n+        MatcherAssert.assertThat(\n+            new RpPermissions(new File(RpPermissionsTest.CONF_YAML)),\n+            new AllOf<>(\n+                new ListOf<>(\n+                    new MatcherOf<>(perm -> { return perm.allowed(uname, \"delete\"); }),\n+                    new MatcherOf<>(perm -> { return perm.allowed(uname, \"deploy\"); }),\n+                    new MatcherOf<>(perm -> { return perm.allowed(uname, \"download\"); }),\n+                    new MatcherOf<>(perm -> { return !perm.allowed(uname, \"install\"); })\n+                )\n+            )\n+        );\n+    }\n+\n+    @Test\n+    void anyoneCanDownload() {\n+        MatcherAssert.assertThat(\n+            new RpPermissions(new File(RpPermissionsTest.CONF_YAML)).allowed(\"anyone\", \"download\"),", "originalCommit": "0d14797b9fc12f7e28285aa96a5cd7995c3eddde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4NzU0Mg==", "url": "https://github.com/artipie/artipie/pull/70#discussion_r407887542", "bodyText": "@Vatavuk hm, as far as I understand * is special symbol for settings in config file, when Permissions implementation should check permissions for real users and actions, so * is not supposed to be passed to this implementations. @g4s8 could you please help as here? Can * be passed to Permissions#allowed as user name?", "author": "olenagerasimova", "createdAt": "2020-04-14T06:06:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4MTYxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwNjQyMQ==", "url": "https://github.com/artipie/artipie/pull/70#discussion_r407906421", "bodyText": "@olenagerasimova no, * means \"any user\" for settings, but it's not a valid username. If we have permission settings like:\nrepo:\n  permissions:\n    - \"*\":\n      - download\nthen we should allow download for any user (any username)", "author": "g4s8", "createdAt": "2020-04-14T06:56:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4MTYxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxOTY1MQ==", "url": "https://github.com/artipie/artipie/pull/70#discussion_r407919651", "bodyText": "@g4s8 thanks\n@Vatavuk please check the answers, do you have any more questions?", "author": "olenagerasimova", "createdAt": "2020-04-14T07:23:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4MTYxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3MDE4Mg==", "url": "https://github.com/artipie/artipie/pull/70#discussion_r407970182", "bodyText": "@olenagerasimova my bad, I've mixed up what are we testing/asserting. No further comments from my side.", "author": "Vatavuk", "createdAt": "2020-04-14T08:49:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4MTYxNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3NjkxMA==", "url": "https://github.com/artipie/artipie/pull/70#discussion_r407976910", "bodyText": "@olenagerasimova it can be simplified to new MatcherOf<>(perm -> perm.allowed(uname, \"delete\")),", "author": "g4s8", "createdAt": "2020-04-14T08:59:34Z", "path": "src/test/java/com/artipie/RpPermissionsTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import java.io.File;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.AllOf;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.MatcherOf;\n+\n+/**\n+ * Test for {@link RpPermissions}.\n+ * @since 0.2\n+ * @checkstyle LeftCurlyCheck (500 lines)\n+ */\n+@Disabled\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+class RpPermissionsTest {\n+\n+    /**\n+     * Test configuration file location.\n+     */\n+    private static final String CONF_YAML = \"src/test/resources/repo_permissions.yml\";\n+\n+    @Test\n+    void johnCanDownloadDeployAndDelete() {\n+        final String uname = \"John\";\n+        MatcherAssert.assertThat(\n+            new RpPermissions(new File(RpPermissionsTest.CONF_YAML)),\n+            new AllOf<>(\n+                new ListOf<>(\n+                    new MatcherOf<>(perm -> { return perm.allowed(uname, \"delete\"); }),", "originalCommit": "0d14797b9fc12f7e28285aa96a5cd7995c3eddde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5ODIzNA==", "url": "https://github.com/artipie/artipie/pull/70#discussion_r407998234", "bodyText": "@g4s8 it cannot, unfortunately, because of the ambiguous reference:\nError:(56, 21) java: reference to MatcherOf is ambiguous\n  both constructor <T>MatcherOf(org.cactoos.Proc<T>) in org.llorllale.cactoos.matchers.MatcherOf and constructor <T>MatcherOf(org.cactoos.Func<T,java.lang.Boolean>) in org.llorllale.cactoos.matchers.MatcherOf match", "author": "olenagerasimova", "createdAt": "2020-04-14T09:32:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3NjkxMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3NzY1MA==", "url": "https://github.com/artipie/artipie/pull/70#discussion_r407977650", "bodyText": "@olenagerasimova same here, lambda can be used without brackets", "author": "g4s8", "createdAt": "2020-04-14T09:00:40Z", "path": "src/test/java/com/artipie/RpPermissionsTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie;\n+\n+import java.io.File;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.AllOf;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.MatcherOf;\n+\n+/**\n+ * Test for {@link RpPermissions}.\n+ * @since 0.2\n+ * @checkstyle LeftCurlyCheck (500 lines)\n+ */\n+@Disabled\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+class RpPermissionsTest {\n+\n+    /**\n+     * Test configuration file location.\n+     */\n+    private static final String CONF_YAML = \"src/test/resources/repo_permissions.yml\";\n+\n+    @Test\n+    void johnCanDownloadDeployAndDelete() {\n+        final String uname = \"John\";\n+        MatcherAssert.assertThat(\n+            new RpPermissions(new File(RpPermissionsTest.CONF_YAML)),\n+            new AllOf<>(\n+                new ListOf<>(\n+                    new MatcherOf<>(perm -> { return perm.allowed(uname, \"delete\"); }),\n+                    new MatcherOf<>(perm -> { return perm.allowed(uname, \"deploy\"); }),\n+                    new MatcherOf<>(perm -> { return perm.allowed(uname, \"download\"); }),\n+                    new MatcherOf<>(perm -> { return !perm.allowed(uname, \"install\"); })\n+                )\n+            )\n+        );\n+    }\n+\n+    @Test\n+    void anyoneCanDownload() {\n+        MatcherAssert.assertThat(\n+            new RpPermissions(new File(RpPermissionsTest.CONF_YAML)).allowed(\"anyone\", \"download\"),\n+            new IsEqual<>(true)\n+        );\n+    }\n+\n+    @Test\n+    void adminCanDoAnything() {\n+        final String uname = \"admin\";\n+        MatcherAssert.assertThat(\n+            new RpPermissions(new File(RpPermissionsTest.CONF_YAML)),\n+            new AllOf<>(\n+                new ListOf<>(\n+                    new MatcherOf<>(perm -> { return perm.allowed(uname, \"delete\"); }),", "originalCommit": "0d14797b9fc12f7e28285aa96a5cd7995c3eddde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5OTM4Mw==", "url": "https://github.com/artipie/artipie/pull/70#discussion_r407999383", "bodyText": "@g4s8 same here", "author": "olenagerasimova", "createdAt": "2020-04-14T09:34:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3NzY1MA=="}], "type": "inlineReview", "revised_code": null}]}