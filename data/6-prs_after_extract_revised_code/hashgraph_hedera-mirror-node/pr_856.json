{"pr_number": 856, "pr_title": "Support topic message fragmentation with chunking of messages", "pr_createdAt": "2020-07-07T18:23:12Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/856", "timeline": [{"oid": "70ea7bcc87d11681d66c1ac7ca54ebcb1a697575", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/70ea7bcc87d11681d66c1ac7ca54ebcb1a697575", "message": "Support topic message fragmentaton with chunking of messages in importer and grpc\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-09T02:51:11Z", "type": "commit"}, {"oid": "92787414a29857f3b9251d1ebc9ce91792d9411b", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/92787414a29857f3b9251d1ebc9ce91792d9411b", "message": "Address nullable chunk info in tests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-09T02:51:11Z", "type": "commit"}, {"oid": "70d730f5389c080a0de5f047dd711fea25e10f2b", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/70d730f5389c080a0de5f047dd711fea25e10f2b", "message": "Fix broken grpc tests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-09T02:51:11Z", "type": "commit"}, {"oid": "1689f35328cf3d38842ab4e395dbe2477dcf7ae7", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1689f35328cf3d38842ab4e395dbe2477dcf7ae7", "message": "Added additional tests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-09T02:51:11Z", "type": "commit"}, {"oid": "87da46c57166db44fe48404c6baf3899eb763663", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/87da46c57166db44fe48404c6baf3899eb763663", "message": "Removed extra out of order message in test\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-09T02:51:11Z", "type": "commit"}, {"oid": "87da46c57166db44fe48404c6baf3899eb763663", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/87da46c57166db44fe48404c6baf3899eb763663", "message": "Removed extra out of order message in test\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-09T02:51:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzNTI5Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/856#discussion_r452335293", "bodyText": "We don't need to explicitly set null values as they are the default. Though we should consider populating real data here to test all fields.", "author": "steven-sheehy", "createdAt": "2020-07-09T16:16:51Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/domain/DomainBuilder.java", "diffHunk": "@@ -93,7 +93,11 @@ void setup() {\n                 .runningHash(new byte[] {3, 4, 5})\n                 .sequenceNumber(++sequenceNumber)\n                 .topicNum(0)\n-                .runningHashVersion(2);\n+                .runningHashVersion(2)\n+                .payerAccountId(null)", "originalCommit": "87da46c57166db44fe48404c6baf3899eb763663", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5NTk1NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/856#discussion_r452495954", "bodyText": "True. Since we're expecting null to be default scenario this works and we can rely on tests specifically setting the chunking cases.", "author": "Nana-EC", "createdAt": "2020-07-09T21:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzNTI5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3b652222744dd4c55b464d02a792a8f60cf59c2f", "chunk": "diff --git a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/domain/DomainBuilder.java b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/domain/DomainBuilder.java\nindex 41cd5c238..df9c7d718 100644\n--- a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/domain/DomainBuilder.java\n+++ b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/domain/DomainBuilder.java\n\n@@ -93,11 +93,7 @@ public class DomainBuilder {\n                 .runningHash(new byte[] {3, 4, 5})\n                 .sequenceNumber(++sequenceNumber)\n                 .topicNum(0)\n-                .runningHashVersion(2)\n-                .payerAccountId(null)\n-                .validStartTimestamp(null)\n-                .chunkTotal(null)\n-                .chunkNum(null);\n+                .runningHashVersion(2);\n \n         customizer.accept(builder);\n         TopicMessage topicMessage = builder.build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0MzM4OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/856#discussion_r452343389", "bodyText": "I'm not a fan of all these overloaded methods to create a topic message. The whole point of constructing the DomainBuilder was to avoid this by using a single method to construct and passing a consumer to customize extra fields.", "author": "steven-sheehy", "createdAt": "2020-07-09T16:29:58Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/service/TopicMessageServiceTest.java", "diffHunk": "@@ -684,19 +777,45 @@ private void missingMessagesFromListenerTest(TopicMessageFilter filter, Flux<Top\n                 .thenReturn(missingMessages);\n     }\n \n+    private List<TopicMessage> fragmentedTopicMessages(long sequenceNumberStart, int fragmentCount) {\n+        List<TopicMessage> topicMessages = new ArrayList<>();\n+        for (int i = 0; i < fragmentCount; i++) {\n+            long sequenceNumber = sequenceNumberStart + i;\n+            topicMessages.add(topicMessage(sequenceNumber, i + 1, fragmentCount,\n+                    Instant.EPOCH.plus(sequenceNumber, ChronoUnit.NANOS), 3L));\n+        }\n+\n+        return topicMessages;\n+    }\n+\n     private TopicMessage topicMessage(long sequenceNumber) {\n-        return TopicMessage.builder()\n-                .consensusTimestamp(Instant.EPOCH.plus(sequenceNumber, ChronoUnit.NANOS))\n-                .realmNum(0)\n-                .sequenceNumber(sequenceNumber)\n-                .build();\n+        return topicMessage(sequenceNumber, Instant.EPOCH.plus(sequenceNumber, ChronoUnit.NANOS));", "originalCommit": "87da46c57166db44fe48404c6baf3899eb763663", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5Nzc5NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/856#discussion_r452497795", "bodyText": "Sure I can revert given the suggestion to move the test to ConsensusControllerTest instead.", "author": "Nana-EC", "createdAt": "2020-07-09T21:22:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0MzM4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3b652222744dd4c55b464d02a792a8f60cf59c2f", "chunk": "diff --git a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/service/TopicMessageServiceTest.java b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/service/TopicMessageServiceTest.java\nindex e4cc29463..9513f5422 100644\n--- a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/service/TopicMessageServiceTest.java\n+++ b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/service/TopicMessageServiceTest.java\n\n@@ -777,33 +684,11 @@ public class TopicMessageServiceTest extends GrpcIntegrationTest {\n                 .thenReturn(missingMessages);\n     }\n \n-    private List<TopicMessage> fragmentedTopicMessages(long sequenceNumberStart, int fragmentCount) {\n-        List<TopicMessage> topicMessages = new ArrayList<>();\n-        for (int i = 0; i < fragmentCount; i++) {\n-            long sequenceNumber = sequenceNumberStart + i;\n-            topicMessages.add(topicMessage(sequenceNumber, i + 1, fragmentCount,\n-                    Instant.EPOCH.plus(sequenceNumber, ChronoUnit.NANOS), 3L));\n-        }\n-\n-        return topicMessages;\n-    }\n-\n     private TopicMessage topicMessage(long sequenceNumber) {\n         return topicMessage(sequenceNumber, Instant.EPOCH.plus(sequenceNumber, ChronoUnit.NANOS));\n     }\n \n-    private TopicMessage topicMessage(long sequenceNumber, Integer chunkNum, Integer chunkTotal,\n-                                      Instant validStartNs, Long payerAccountId) {\n-        return topicMessage(sequenceNumber, Instant.EPOCH.plus(sequenceNumber, ChronoUnit.NANOS), chunkNum, chunkTotal,\n-                validStartNs, payerAccountId);\n-    }\n-\n     private TopicMessage topicMessage(long sequenceNumber, Instant consensusTimestamp) {\n-        return topicMessage(sequenceNumber, consensusTimestamp, null, null, null, null);\n-    }\n-\n-    private TopicMessage topicMessage(long sequenceNumber, Instant consensusTimestamp, Integer chunkNum,\n-                                      Integer chunkTotal, Instant validStartNs, Long payerAccountId) {\n         return TopicMessage.builder()\n                 .consensusTimestamp(consensusTimestamp)\n                 .realmNum(0)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM2MzY1MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/856#discussion_r452363650", "bodyText": "Would prefer payerAccountEntity.", "author": "steven-sheehy", "createdAt": "2020-07-09T17:03:58Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java", "diffHunk": "@@ -72,23 +76,61 @@\n \n     private int topicNum;\n \n+    private Integer chunkNum;\n+\n+    private Integer chunkTotal;\n+\n+    @ToString.Exclude\n+    private Long payerAccountId;\n+\n+    @Getter(lazy = true)\n+    @Transient\n+    private com.hedera.mirror.grpc.domain.Entity payerDecodedAccountId = EncodedIdToEntityIdConverter.INSTANCE", "originalCommit": "87da46c57166db44fe48404c6baf3899eb763663", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5OTM5NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/856#discussion_r452499395", "bodyText": "Works for me", "author": "Nana-EC", "createdAt": "2020-07-09T21:25:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM2MzY1MA=="}], "type": "inlineReview", "revised_code": {"commit": "3b652222744dd4c55b464d02a792a8f60cf59c2f", "chunk": "diff --git a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java\nindex e8b2de4d8..a017717f9 100644\n--- a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java\n+++ b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java\n\n@@ -85,7 +85,7 @@ public class TopicMessage implements Comparable<TopicMessage>, Persistable<Long>\n \n     @Getter(lazy = true)\n     @Transient\n-    private com.hedera.mirror.grpc.domain.Entity payerDecodedAccountId = EncodedIdToEntityIdConverter.INSTANCE\n+    private com.hedera.mirror.grpc.domain.Entity payerAccountEntity = EncodedIdToEntityConverter.INSTANCE\n             .convert(payerAccountId);\n \n     private Long validStartNs;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM2MzkxNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/856#discussion_r452363915", "bodyText": "EncodedIdToEntityConverter since there's no EntityId class in grpc.", "author": "steven-sheehy", "createdAt": "2020-07-09T17:04:27Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/converter/EncodedIdToEntityIdConverter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.hedera.mirror.grpc.converter;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.data.convert.WritingConverter;\n+\n+import com.hedera.mirror.grpc.domain.Entity;\n+import com.hedera.mirror.grpc.domain.EntityType;\n+\n+@Named\n+@WritingConverter\n+public class EncodedIdToEntityIdConverter implements Converter<Long, Entity> {", "originalCommit": "87da46c57166db44fe48404c6baf3899eb763663", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5OTY4NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/856#discussion_r452499684", "bodyText": "Works for me", "author": "Nana-EC", "createdAt": "2020-07-09T21:26:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM2MzkxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3b652222744dd4c55b464d02a792a8f60cf59c2f", "chunk": "diff --git a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/converter/EncodedIdToEntityIdConverter.java b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/converter/EncodedIdToEntityConverter.java\nsimilarity index 90%\nrename from hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/converter/EncodedIdToEntityIdConverter.java\nrename to hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/converter/EncodedIdToEntityConverter.java\nindex 21ef0e69b..f7e9003a4 100644\n--- a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/converter/EncodedIdToEntityIdConverter.java\n+++ b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/converter/EncodedIdToEntityConverter.java\n\n@@ -29,8 +29,8 @@ import com.hedera.mirror.grpc.domain.EntityType;\n \n @Named\n @WritingConverter\n-public class EncodedIdToEntityIdConverter implements Converter<Long, Entity> {\n-    public static final EncodedIdToEntityIdConverter INSTANCE = new EncodedIdToEntityIdConverter();\n+public class EncodedIdToEntityConverter implements Converter<Long, Entity> {\n+    public static final EncodedIdToEntityConverter INSTANCE = new EncodedIdToEntityConverter();\n \n     static final int REALM_BITS = 16;\n     static final int NUM_BITS = 32; // bits for entity num\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM2OTY1OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/856#discussion_r452369659", "bodyText": "Think the non-mock test is sufficient to verify fragmented messages. I would recommend this type of payload check be moved instead to ConsensusControllerTest as we're not currently testing that mapping.", "author": "steven-sheehy", "createdAt": "2020-07-09T17:14:24Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/service/TopicMessageServiceTest.java", "diffHunk": "@@ -643,6 +645,97 @@ void missingMessagesFromRetrieverAndListener() {\n                 .verify(Duration.ofMillis(700));\n     }\n \n+    @Test\n+    void fragmentedMessages() {", "originalCommit": "87da46c57166db44fe48404c6baf3899eb763663", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5OTc0OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/856#discussion_r452499749", "bodyText": "Cool. Moved to ConsensusControllerTest.", "author": "Nana-EC", "createdAt": "2020-07-09T21:26:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM2OTY1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3b652222744dd4c55b464d02a792a8f60cf59c2f", "chunk": "diff --git a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/service/TopicMessageServiceTest.java b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/service/TopicMessageServiceTest.java\nindex e4cc29463..9513f5422 100644\n--- a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/service/TopicMessageServiceTest.java\n+++ b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/service/TopicMessageServiceTest.java\n\n@@ -645,97 +643,6 @@ public class TopicMessageServiceTest extends GrpcIntegrationTest {\n                 .verify(Duration.ofMillis(700));\n     }\n \n-    @Test\n-    void fragmentedMessages() {\n-        TopicListener topicListener = Mockito.mock(TopicListener.class);\n-        EntityRepository entityRepository = Mockito.mock(EntityRepository.class);\n-        TopicMessageRetriever topicMessageRetriever = Mockito.mock(TopicMessageRetriever.class);\n-        topicMessageService = new TopicMessageServiceImpl(new GrpcProperties(), topicListener, entityRepository,\n-                topicMessageRetriever);\n-\n-        TopicMessageFilter retrieverFilter = TopicMessageFilter.builder()\n-                .startTime(Instant.EPOCH)\n-                .build();\n-\n-        Mockito.when(entityRepository\n-                .findByCompositeKey(0, retrieverFilter.getRealmNum(), retrieverFilter.getTopicNum()))\n-                .thenReturn(Optional\n-                        .of(Entity.builder().entityTypeId(EntityType.TOPIC).build()));\n-\n-        List<TopicMessage> fragmentedHistoricMessages = fragmentedTopicMessages(2, 2);\n-\n-        Mockito.when(topicMessageRetriever.retrieve(ArgumentMatchers\n-                .any()))\n-                .thenReturn(Flux\n-                        .just(topicMessage(1, Instant.EPOCH),\n-                                fragmentedHistoricMessages.get(0),\n-                                fragmentedHistoricMessages.get(1)));\n-\n-        List<TopicMessage> fragmentedIncomingMessages = fragmentedTopicMessages(5, 3);\n-        Mockito.when(topicListener.listen(ArgumentMatchers\n-                .any())).thenReturn(Flux.just(\n-                topicMessage(4, Instant.EPOCH.plus(4, ChronoUnit.NANOS)),\n-                fragmentedIncomingMessages.get(0),\n-                fragmentedIncomingMessages.get(1),\n-                fragmentedIncomingMessages.get(2)));\n-\n-        topicMessageService.subscribeTopic(retrieverFilter)\n-                .map(TopicMessage::getSequenceNumber)\n-                .as(StepVerifier::create)\n-                .expectNext(1L, 2L, 3L, 4L, 5L, 6L, 7L)\n-                .expectComplete()\n-                .verify(Duration.ofMillis(700));\n-\n-        topicMessageService.subscribeTopic(retrieverFilter)\n-                // mapper doesn't handle null values so replace with 0's\n-                .map(x -> x.getChunkNum() == null ? 0 : x.getChunkNum())\n-                .as(StepVerifier::create)\n-                .expectNext(0, 1, 2, 0, 1, 2, 3)\n-                .expectComplete()\n-                .verify(Duration.ofMillis(700));\n-    }\n-\n-    @Test\n-    void fragmentedMessagesGroupAcrossHistoricAndIncoming() {\n-        domainBuilder.topicMessage(t -> t.sequenceNumber(1)).block();\n-        domainBuilder\n-                .topicMessage(t -> t.sequenceNumber(2).chunkNum(1).chunkTotal(2).validStartNs(1L).payerAccountId(1L))\n-                .block();\n-        domainBuilder\n-                .topicMessage(t -> t.sequenceNumber(3).chunkNum(2).chunkTotal(2).validStartNs(1L).payerAccountId(1L))\n-                .block();\n-        domainBuilder.topicMessage(t -> t.sequenceNumber(4)).block();\n-        domainBuilder\n-                .topicMessage(t -> t.sequenceNumber(5).chunkNum(1).chunkTotal(3).validStartNs(1L).payerAccountId(1L))\n-                .block();\n-\n-        // fragment message split across historic and incoming\n-        Flux<TopicMessage> generator = Flux.concat(\n-                domainBuilder\n-                        .topicMessage(t -> t.sequenceNumber(6).chunkNum(2).chunkTotal(3).validStartNs(1L)\n-                                .payerAccountId(1L).consensusTimestamp(future.plusNanos(2))),\n-                domainBuilder\n-                        .topicMessage(t -> t.sequenceNumber(7).chunkNum(3).chunkTotal(3).validStartNs(1L)\n-                                .payerAccountId(1L).consensusTimestamp(future.plusNanos(3))),\n-                domainBuilder\n-                        .topicMessage(t -> t.sequenceNumber(8).consensusTimestamp(future.plusNanos(4)))\n-        );\n-\n-        TopicMessageFilter filter = TopicMessageFilter.builder()\n-                .startTime(Instant.EPOCH)\n-                .build();\n-\n-        topicMessageService.subscribeTopic(filter)\n-                // mapper doesn't handle null values so replace with 0's\n-                .map(x -> x.getChunkNum() == null ? 0 : x.getChunkNum())\n-                .as(StepVerifier::create)\n-                .thenAwait(Duration.ofMillis(100))\n-                .then(generator::blockLast)\n-                .expectNext(0, 1, 2, 0, 1, 2, 3, 0)\n-                .thenCancel()\n-                .verify(Duration.ofMillis(500));\n-    }\n-\n     private void missingMessagesFromListenerTest(TopicMessageFilter filter, Flux<TopicMessage> missingMessages) {\n         TopicListener topicListener = Mockito.mock(TopicListener.class);\n         EntityRepository entityRepository = Mockito.mock(EntityRepository.class);\n"}}, {"oid": "3b652222744dd4c55b464d02a792a8f60cf59c2f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3b652222744dd4c55b464d02a792a8f60cf59c2f", "message": "Addressed feedback\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-09T21:15:03Z", "type": "commit"}, {"oid": "f854b4816ebe7fee6e9fd1c2df09c2c5e56fa682", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f854b4816ebe7fee6e9fd1c2df09c2c5e56fa682", "message": "Change validStartNs to validStartTimestamp in grpc\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-09T22:10:55Z", "type": "commit"}, {"oid": "46d57229c049a69318916a949654f52382c5bb4c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/46d57229c049a69318916a949654f52382c5bb4c", "message": "Update test fragmentedMessagesGroupAcrossHistoricAndIncoming timestamps\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-07-09T22:26:32Z", "type": "commit"}]}