{"pr_number": 915, "pr_title": "fix the issue importer gets stuck when >=2 groups of signature files in same bucket", "pr_createdAt": "2020-07-28T23:58:29Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/915", "timeline": [{"oid": "12fe25d474825ae138f77fcab7797ebdc57f9fd8", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/12fe25d474825ae138f77fcab7797ebdc57f9fd8", "message": "fix the issue when >= 2 groups of valid signature files fall into same bucket, all but the first will be dropped so importer gets stuck\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-07-28T23:31:47Z", "type": "commit"}, {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f768c93cce0dccb843a46ad76f45d002a5e179e5", "message": "remove closeInterval\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-07-29T02:01:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5OTQzNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462399435", "bodyText": "Converting to long I think is no longer necessary if we don't need to calculate offsets from it. It would be more efficient to use the String filename like it did in the previous release.", "author": "steven-sheehy", "createdAt": "2020-07-29T15:43:55Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -223,15 +221,8 @@ protected void downloadNextBatch() {\n                                 FileStreamSignature fileStreamSignature = new FileStreamSignature();\n                                 fileStreamSignature.setFile(sigFile);\n                                 fileStreamSignature.setNode(nodeAccountId);\n-                                long groupTimestamp = getGroupTimestamp(lastValidTimestamp, closeInterval,\n-                                        fileStreamSignature);\n-\n-                                if (groupTimestamp > 0) {\n-                                    sigFilesMap.put(groupTimestamp, fileStreamSignature);\n-                                } else {\n-                                    log.warn(\"Ignoring signature associated with the previously processed stream \" +\n-                                            \"file: {}\", fileStreamSignature);\n-                                }\n+                                long timestamp = Utility.getTimestampFromFilename(sigFile.getName());", "originalCommit": "f768c93cce0dccb843a46ad76f45d002a5e179e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5MzM5NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462593395", "bodyText": "done", "author": "xin-hedera", "createdAt": "2020-07-29T21:14:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5OTQzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "352044ae866f9f3b482ed8cb1d30e2864f478b3e", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java\nindex 40da5354..de0429cb 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java\n\n@@ -221,8 +221,7 @@ public abstract class Downloader {\n                                 FileStreamSignature fileStreamSignature = new FileStreamSignature();\n                                 fileStreamSignature.setFile(sigFile);\n                                 fileStreamSignature.setNode(nodeAccountId);\n-                                long timestamp = Utility.getTimestampFromFilename(sigFile.getName());\n-                                sigFilesMap.put(timestamp, fileStreamSignature);\n+                                sigFilesMap.put(sigFile.getName(), fileStreamSignature);\n                             }\n                         } catch (InterruptedException ex) {\n                             log.warn(\"Failed downloading {} in {}\", pendingDownload.getS3key(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMTU1NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462401555", "bodyText": "This method's comment needs to be tweaked due to the changes", "author": "steven-sheehy", "createdAt": "2020-07-29T15:46:49Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "diffHunk": "@@ -67,43 +66,18 @@ private static boolean consensusReached(long actualNodes, long expectedNodes) {\n      * @throws SignatureVerificationException", "originalCommit": "f768c93cce0dccb843a46ad76f45d002a5e179e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5MzQ3NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462593475", "bodyText": "done", "author": "xin-hedera", "createdAt": "2020-07-29T21:15:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMTU1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "352044ae866f9f3b482ed8cb1d30e2864f478b3e", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java\nindex e60dc442..77b9173d 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java\n\n@@ -57,17 +58,21 @@ public class NodeSignatureVerifier {\n     }\n \n     /**\n-     * Verifies that the signature files are signed by corresponding node's PublicKey. For valid signature files, we\n-     * compare their hashes to see if at least 1/3 with the same filename have hashes that match. If a signature is\n-     * valid, we put the hash in its content and its file to the map, to see if at least 1/3 valid signatures have the\n-     * same hash.\n+     * Verifies that the signature files satisfy the consensus requirement:\n+     * <ol>\n+     *  <li>At least 1/3 signature files are present</li>\n+     *  <li>For a signature file, we validate it by checking if it's signed by corresponding node's PublicKey. For valid\n+     *      signature files, we compare their hashes to see if at least 1/3 have hashes that match. If a signature is\n+     *      valid, we put the hash in its content and its file to the map, to see if at lest 1/3 valid signatures have\n+     *      the same hash</li>\n+     * </ol>\n      *\n-     * @param signatures a list of a sig files which have the same timestamp\n+     * @param signatures a list of signature files which have the same filename\n      * @throws SignatureVerificationException\n      */\n     public void verify(Collection<FileStreamSignature> signatures) throws SignatureVerificationException {\n         Multimap<String, FileStreamSignature> signatureHashMap = HashMultimap.create();\n-        String filename = !signatures.isEmpty() ? signatures.stream().findFirst().get().getFile().getName() : null;\n+        String filename = signatures.stream().map(FileStreamSignature::getFile).map(File::getName).findFirst().orElse(null);\n         int consensusCount = 0;\n \n         final long sigFileCount = signatures.size();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMjkxMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462402910", "bodyText": "We should add a test case that captures the scenario experienced with the demo bucket, if possible.", "author": "steven-sheehy", "createdAt": "2020-07-29T15:48:47Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java", "diffHunk": "@@ -322,25 +321,25 @@ void differentFilenamesSameInterval() throws Exception {\n     @Test\n     @DisplayName(\"Different filenames, same interval, lower bound\")\n     void differentFilenamesSameIntervalLower() throws Exception {\n-        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).negated());\n+        differentFilenames(getCloseInterval().dividedBy(2L).negated());\n     }\n \n     @Test\n     @DisplayName(\"Different filenames, same interval, upper bound\")\n     void differentFilenamesSameIntervalUpper() throws Exception {\n-        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).minusNanos(1));\n+        differentFilenames(getCloseInterval().dividedBy(2L).minusNanos(1));\n     }\n \n     @Test\n     @DisplayName(\"Different filenames, previous interval\")\n     void differentFilenamesPreviousInterval() throws Exception {\n-        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).negated().minusNanos(2));\n+        differentFilenames(getCloseInterval().dividedBy(2L).negated().minusNanos(2));\n     }\n \n     @Test\n     @DisplayName(\"Different filenames, next interval\")\n     void differentFilenamesNextInterval() throws Exception {\n-        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L));\n+        differentFilenames(getCloseInterval().dividedBy(2L));", "originalCommit": "f768c93cce0dccb843a46ad76f45d002a5e179e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5MzUzNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462593537", "bodyText": "added", "author": "xin-hedera", "createdAt": "2020-07-29T21:15:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMjkxMA=="}], "type": "inlineReview", "revised_code": {"commit": "352044ae866f9f3b482ed8cb1d30e2864f478b3e", "chunk": "diff --git a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java\nindex 11e2bbf8..68e0c180 100644\n--- a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java\n+++ b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java\n\n@@ -342,6 +342,30 @@ public abstract class AbstractDownloaderTest {\n         differentFilenames(getCloseInterval().dividedBy(2L));\n     }\n \n+    @Test\n+    @DisplayName(\"Download and verify two group of files in the same bucket\")\n+    void downloadValidFilesInSameBucket() throws Exception {\n+        // last valid downloaded file's timestamp is set to file1's timestamp - (I/2 + 1ns), so both file1 and file2\n+        // will be in the bucket [lastTimestamp + I/2, lastTimestamp + 3*I/2). Note the interval I is set to twice of\n+        // the difference between file1 and file2.\n+        Duration interval = getCloseInterval().multipliedBy(2);\n+        long file1Timestamp = Utility.getTimestampFromFilename(file1);\n+        Instant file1Instant = Instant.ofEpochSecond(file1Timestamp / 1_000_000_000L,\n+                file1Timestamp % 1_000_000_000L);\n+        Instant lastFileInstant = file1Instant.minus(interval.dividedBy(2).plusNanos(1));\n+        StreamType streamType = StreamType.fromFilename(file1);\n+        String basename = lastFileInstant.toString().replace(':', '_');\n+        String lastFileName = basename + streamType.getSuffix() + \".\" + streamType.getExtension();\n+\n+        doReturn(lastFileName).when(applicationStatusRepository).findByStatusCode(downloader.getLastValidDownloadedFileKey());\n+\n+        fileCopier.copy();\n+        downloader.download();\n+\n+        verifyForSuccess();\n+        assertThat(downloaderProperties.getSignaturesPath()).doesNotExist();\n+    }\n+\n     private void differentFilenames(Duration offset) throws Exception {\n         // Copy all files and modify only node 0.0.3's files to have a different timestamp\n         StreamType type = downloaderProperties.getStreamType();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNDIxNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462404214", "bodyText": "Can use nodeCount", "author": "steven-sheehy", "createdAt": "2020-07-29T15:50:35Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "diffHunk": "@@ -122,22 +96,22 @@ private boolean verifyFileGroup(Collection<FileStreamSignature> signatures) {\n         for (String key : signatureHashMap.keySet()) {\n             Collection<FileStreamSignature> validatedSignatures = signatureHashMap.get(key);\n \n-            if (consensusReached(validatedSignatures.size(), nodeIDPubKeyMap.size())) {\n+            if (canReachConsensus(validatedSignatures.size(), nodeIDPubKeyMap.size())) {", "originalCommit": "f768c93cce0dccb843a46ad76f45d002a5e179e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5MzYyNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462593627", "bodyText": "done", "author": "xin-hedera", "createdAt": "2020-07-29T21:15:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNDIxNA=="}], "type": "inlineReview", "revised_code": {"commit": "352044ae866f9f3b482ed8cb1d30e2864f478b3e", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java\nindex e60dc442..77b9173d 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java\n\n@@ -96,7 +101,7 @@ public class NodeSignatureVerifier {\n         for (String key : signatureHashMap.keySet()) {\n             Collection<FileStreamSignature> validatedSignatures = signatureHashMap.get(key);\n \n-            if (canReachConsensus(validatedSignatures.size(), nodeIDPubKeyMap.size())) {\n+            if (canReachConsensus(validatedSignatures.size(), nodeCount)) {\n                 consensusCount += validatedSignatures.size();\n                 validatedSignatures.forEach(s -> s.setStatus(SignatureStatus.CONSENSUS_REACHED));\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxNjQwMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462416403", "bodyText": "This still is not quite correct. It could potentially discard valid files just because one node is really quick at uploading. For a better fix, we should only skip file once next batch has reached consensus. Currently it skips file when at least one file is in next batch. This may require separating signature verification loop from signed file download/verification loop.", "author": "steven-sheehy", "createdAt": "2020-07-29T16:07:57Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -362,17 +324,24 @@ private void verifySigsAndDownloadDataFiles(Multimap<Long, FileStreamSignature>\n         NodeSignatureVerifier nodeSignatureVerifier = new NodeSignatureVerifier(networkAddressBook);\n         Path validPath = downloaderProperties.getValidPath();\n \n-        for (Long groupId : sigFilesMap.keySet()) {\n+        for (var groupIdIterator = sigFilesMap.keySet().iterator(); groupIdIterator.hasNext(); ) {\n             if (ShutdownHelper.isStopping()) {\n                 return;\n             }\n \n             Instant startTime = Instant.now();\n+            long groupId = groupIdIterator.next();\n             Collection<FileStreamSignature> signatures = sigFilesMap.get(groupId);\n             boolean valid = false;\n \n             try {\n                 nodeSignatureVerifier.verify(signatures);\n+            } catch (SignatureVerificationException ex) {\n+                if (groupIdIterator.hasNext()) {", "originalCommit": "f768c93cce0dccb843a46ad76f45d002a5e179e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2Mjc5NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462462795", "bodyText": "no it will not. in case < 1/3 nodes are quick at uploading, from one point on, all sig files from those nodes will fail verification since consensus can't be reached. in the next batch of downloaded signature files, if some nodes catch up to satisfy the 1/3 consensus requirement, the previously skipped groups will get successfully verified.", "author": "xin-hedera", "createdAt": "2020-07-29T17:22:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxNjQwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MTA0OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462561048", "bodyText": "Talked it over offline and agreed current solution looks good.", "author": "steven-sheehy", "createdAt": "2020-07-29T20:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxNjQwMw=="}], "type": "inlineReview", "revised_code": {"commit": "352044ae866f9f3b482ed8cb1d30e2864f478b3e", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java\nindex 40da5354..de0429cb 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java\n\n@@ -320,7 +319,7 @@ public abstract class Downloader {\n      * the data file into `valid` directory; else download the data file from other valid node folder and compare the\n      * hash until we find a match.\n      */\n-    private void verifySigsAndDownloadDataFiles(Multimap<Long, FileStreamSignature> sigFilesMap) {\n+    private void verifySigsAndDownloadDataFiles(Multimap<String, FileStreamSignature> sigFilesMap) {\n         NodeSignatureVerifier nodeSignatureVerifier = new NodeSignatureVerifier(networkAddressBook);\n         Path validPath = downloaderProperties.getValidPath();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyMzMxNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462423317", "bodyText": "nit: signatures.stream().map(FileStreamSignature::getFile).map(File::getName).findFirst().orElse(null);", "author": "steven-sheehy", "createdAt": "2020-07-29T16:18:12Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "diffHunk": "@@ -67,43 +66,18 @@ private static boolean consensusReached(long actualNodes, long expectedNodes) {\n      * @throws SignatureVerificationException\n      */\n     public void verify(Collection<FileStreamSignature> signatures) throws SignatureVerificationException {\n-        Multimap<String, FileStreamSignature> signaturesByName = TreeMultimap.create();\n-        signatures.forEach(s -> signaturesByName.put(s.getFile().getName(), s));\n-        Collection<String> filenames = signaturesByName.keySet();\n-\n-        if (filenames.size() > 1) {\n-            log.warn(\"Found {} unique filenames for stream interval: {}\", filenames.size(), signatures);\n-        }\n-\n-        for (String filename : filenames) {\n-            if (verifyFileGroup(signaturesByName.get(filename))) {\n-                return;\n-            }\n-        }\n-\n-        throw new SignatureVerificationException(\"Signature verification failed for files \" + filenames + \": \" + statusMap(signatures));\n-    }\n-\n-    /**\n-     * Since balance files can occasionally generate a file with a different timestamp from different nodes or a rogue\n-     * node can send a bad filename, we group files into time buckets then within that bucket check if a particular\n-     * filename reaches consensus.\n-     *\n-     * @param signatures grouped by filename\n-     * @return whether this file was verified\n-     * @throws SignatureVerificationException\n-     */\n-    private boolean verifyFileGroup(Collection<FileStreamSignature> signatures) {\n         Multimap<String, FileStreamSignature> signatureHashMap = HashMultimap.create();\n-        String filename = null;\n+        String filename = !signatures.isEmpty() ? signatures.stream().findFirst().get().getFile().getName() : null;", "originalCommit": "f768c93cce0dccb843a46ad76f45d002a5e179e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5Mzk5Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462593993", "bodyText": "done", "author": "xin-hedera", "createdAt": "2020-07-29T21:16:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyMzMxNw=="}], "type": "inlineReview", "revised_code": {"commit": "352044ae866f9f3b482ed8cb1d30e2864f478b3e", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java\nindex e60dc442..77b9173d 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java\n\n@@ -57,17 +58,21 @@ public class NodeSignatureVerifier {\n     }\n \n     /**\n-     * Verifies that the signature files are signed by corresponding node's PublicKey. For valid signature files, we\n-     * compare their hashes to see if at least 1/3 with the same filename have hashes that match. If a signature is\n-     * valid, we put the hash in its content and its file to the map, to see if at least 1/3 valid signatures have the\n-     * same hash.\n+     * Verifies that the signature files satisfy the consensus requirement:\n+     * <ol>\n+     *  <li>At least 1/3 signature files are present</li>\n+     *  <li>For a signature file, we validate it by checking if it's signed by corresponding node's PublicKey. For valid\n+     *      signature files, we compare their hashes to see if at least 1/3 have hashes that match. If a signature is\n+     *      valid, we put the hash in its content and its file to the map, to see if at lest 1/3 valid signatures have\n+     *      the same hash</li>\n+     * </ol>\n      *\n-     * @param signatures a list of a sig files which have the same timestamp\n+     * @param signatures a list of signature files which have the same filename\n      * @throws SignatureVerificationException\n      */\n     public void verify(Collection<FileStreamSignature> signatures) throws SignatureVerificationException {\n         Multimap<String, FileStreamSignature> signatureHashMap = HashMultimap.create();\n-        String filename = !signatures.isEmpty() ? signatures.stream().findFirst().get().getFile().getName() : null;\n+        String filename = signatures.stream().map(FileStreamSignature::getFile).map(File::getName).findFirst().orElse(null);\n         int consensusCount = 0;\n \n         final long sigFileCount = signatures.size();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MDY3OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462560679", "bodyText": "Please add the filename to the log. This log statement is the only indication that we might've skipped a non-consensus file. We should update to reflect that.", "author": "steven-sheehy", "createdAt": "2020-07-29T20:14:11Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -362,17 +324,24 @@ private void verifySigsAndDownloadDataFiles(Multimap<Long, FileStreamSignature>\n         NodeSignatureVerifier nodeSignatureVerifier = new NodeSignatureVerifier(networkAddressBook);\n         Path validPath = downloaderProperties.getValidPath();\n \n-        for (Long groupId : sigFilesMap.keySet()) {\n+        for (var groupIdIterator = sigFilesMap.keySet().iterator(); groupIdIterator.hasNext(); ) {\n             if (ShutdownHelper.isStopping()) {\n                 return;\n             }\n \n             Instant startTime = Instant.now();\n+            long groupId = groupIdIterator.next();\n             Collection<FileStreamSignature> signatures = sigFilesMap.get(groupId);\n             boolean valid = false;\n \n             try {\n                 nodeSignatureVerifier.verify(signatures);\n+            } catch (SignatureVerificationException ex) {\n+                if (groupIdIterator.hasNext()) {\n+                    log.warn(\"Signature verification failed but still have files in the batch, try to process the next group\", ex);", "originalCommit": "f768c93cce0dccb843a46ad76f45d002a5e179e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NzY0MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462587641", "bodyText": "The SignatureVerificationException's message has the filename, so I don't want to duplicate it here.", "author": "xin-hedera", "createdAt": "2020-07-29T21:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MDY3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "352044ae866f9f3b482ed8cb1d30e2864f478b3e", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java\nindex 40da5354..de0429cb 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java\n\n@@ -320,7 +319,7 @@ public abstract class Downloader {\n      * the data file into `valid` directory; else download the data file from other valid node folder and compare the\n      * hash until we find a match.\n      */\n-    private void verifySigsAndDownloadDataFiles(Multimap<Long, FileStreamSignature> sigFilesMap) {\n+    private void verifySigsAndDownloadDataFiles(Multimap<String, FileStreamSignature> sigFilesMap) {\n         NodeSignatureVerifier nodeSignatureVerifier = new NodeSignatureVerifier(networkAddressBook);\n         Path validPath = downloaderProperties.getValidPath();\n \n"}}, {"oid": "352044ae866f9f3b482ed8cb1d30e2864f478b3e", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/352044ae866f9f3b482ed8cb1d30e2864f478b3e", "message": "address review comments\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-07-29T21:14:38Z", "type": "commit"}]}