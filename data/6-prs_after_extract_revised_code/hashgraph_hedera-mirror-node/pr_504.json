{"pr_number": 504, "pr_title": "BDD HCS E2E tests using SDK", "pr_createdAt": "2020-01-22T00:41:31Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/504", "timeline": [{"oid": "c182286a785593d05f9a8f162bf306c4666856e0", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c182286a785593d05f9a8f162bf306c4666856e0", "message": "BDD HCS E2E tests using SDK\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-22T00:38:00Z", "type": "commit"}, {"oid": "9d14db9914a28718198c2ae4f8bbebd18c481442", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9d14db9914a28718198c2ae4f8bbebd18c481442", "message": "Added env.sample file and cleaned up account.feature\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-22T21:56:43Z", "type": "commit"}, {"oid": "8b07aff60145743df8bfc192b191d56e230b05f7", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8b07aff60145743df8bfc192b191d56e230b05f7", "message": "Renamed package\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-22T22:04:35Z", "type": "commit"}, {"oid": "3e8f639344e050b5432eed64c9199fe7b220a1fa", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3e8f639344e050b5432eed64c9199fe7b220a1fa", "message": "Merge branch 'master' into hcsbddtests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-22T22:34:33Z", "type": "commit"}, {"oid": "5c190fbfb911a361df1d96e81734c415c01a75c2", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5c190fbfb911a361df1d96e81734c415c01a75c2", "message": "Cleaned up pom and took newest sdk version\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-22T22:45:27Z", "type": "commit"}, {"oid": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c", "message": "Updated cucumber package reference and eligible tests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-23T13:30:59Z", "type": "commit"}, {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/00e093054a562270226a1756d70a2bf9c8ae2dd7", "message": "Fixed validLatency always true issue\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-23T16:42:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwNjQwMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370206402", "bodyText": "Never use Pair, it's a code smell. pair.getLeft() and pair.getRight() tell you nothing about the data structure. Just create your own wrapper object using Lombok. if you need it. Here I think you can just throw an exception if latch doesn't reach 0 in time instead of returning the boolean", "author": "steven-sheehy", "createdAt": "2020-01-23T16:00:51Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");\n+        log.debug(\"Creating Mirror Node client for {}\", mirrorNodeAddress);\n+        consensusClient = new ConsensusClient(Objects.requireNonNull(mirrorNodeAddress))\n+//                .setErrorHandler(err -> log.error(\"Error instantiating ConsensusClient : {}\", err))\n+        ;\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(long topicId, Instant startTime) {\n+        return subscribeToTopic(new ConsensusTopicId(0, 0, topicId), startTime);\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(ConsensusTopicId topicId, Instant startTime) {\n+        log.debug(\"Subscribing to topicId : {} with startTime : {}\", topicId, startTime);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    log.info(\"Received message: \" + message.getMessageString()\n+                            + \" consensus timestamp: \" + message.consensusTimestamp\n+                            + \" topic sequence number: \" + message.sequenceNumber\n+                            + \" topic running hash: \" + Hex.toHexString(message.runningHash));\n+                });\n+\n+        return subscription;\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(long topicId,", "originalCommit": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0Njk2NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370446964", "bodyText": "Another WIP item I was coming to. Agreed", "author": "Nana-EC", "createdAt": "2020-01-24T02:07:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwNjQwMg=="}], "type": "inlineReview", "revised_code": {"commit": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\nindex 36c492ec..f9a7133e 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n\n@@ -91,12 +91,14 @@ public class MirrorNodeClient {\n                 log.error(\"{} messages were expected within {} seconds. {} messages left\", numMessages, latency,\n                         messageLatch\n                                 .getCount());\n+                validLatency = false;\n             }\n         } else {\n             if (!messageLatch.await(1, TimeUnit.MINUTES)) {\n                 log.error(\"{} messages were expected within default of 1 min. {} messages left\", numMessages,\n                         messageLatch\n                                 .getCount());\n+                validLatency = false;\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwNzk1Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370207956", "bodyText": "Deprecated, use MirrorClient", "author": "steven-sheehy", "createdAt": "2020-01-23T16:03:14Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;", "originalCommit": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0MzcyNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370443725", "bodyText": "I know, this is what I mentioned in scrum. Will push changes in next commit after addressing other feedback", "author": "Nana-EC", "createdAt": "2020-01-24T01:51:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwNzk1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\nindex 36c492ec..f9a7133e 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n\n@@ -91,12 +91,14 @@ public class MirrorNodeClient {\n                 log.error(\"{} messages were expected within {} seconds. {} messages left\", numMessages, latency,\n                         messageLatch\n                                 .getCount());\n+                validLatency = false;\n             }\n         } else {\n             if (!messageLatch.await(1, TimeUnit.MINUTES)) {\n                 log.error(\"{} messages were expected within default of 1 min. {} messages left\", numMessages,\n                         messageLatch\n                                 .getCount());\n+                validLatency = false;\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwODE1Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370208152", "bodyText": "Shouldn't an exception be thrown if any error and fail the test?", "author": "steven-sheehy", "createdAt": "2020-01-23T16:03:35Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");\n+        log.debug(\"Creating Mirror Node client for {}\", mirrorNodeAddress);\n+        consensusClient = new ConsensusClient(Objects.requireNonNull(mirrorNodeAddress))\n+//                .setErrorHandler(err -> log.error(\"Error instantiating ConsensusClient : {}\", err))", "originalCommit": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3MjMzMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370772331", "bodyText": "Deprecated", "author": "Nana-EC", "createdAt": "2020-01-24T18:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwODE1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\nindex 36c492ec..f9a7133e 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n\n@@ -91,12 +91,14 @@ public class MirrorNodeClient {\n                 log.error(\"{} messages were expected within {} seconds. {} messages left\", numMessages, latency,\n                         messageLatch\n                                 .getCount());\n+                validLatency = false;\n             }\n         } else {\n             if (!messageLatch.await(1, TimeUnit.MINUTES)) {\n                 log.error(\"{} messages were expected within default of 1 min. {} messages left\", numMessages,\n                         messageLatch\n                                 .getCount());\n+                validLatency = false;\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxNDA3NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370214075", "bodyText": "Duplicate code. Just set latency = 1 if latency <=0 and combine these blocks", "author": "steven-sheehy", "createdAt": "2020-01-23T16:14:00Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");\n+        log.debug(\"Creating Mirror Node client for {}\", mirrorNodeAddress);\n+        consensusClient = new ConsensusClient(Objects.requireNonNull(mirrorNodeAddress))\n+//                .setErrorHandler(err -> log.error(\"Error instantiating ConsensusClient : {}\", err))\n+        ;\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(long topicId, Instant startTime) {\n+        return subscribeToTopic(new ConsensusTopicId(0, 0, topicId), startTime);\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(ConsensusTopicId topicId, Instant startTime) {\n+        log.debug(\"Subscribing to topicId : {} with startTime : {}\", topicId, startTime);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    log.info(\"Received message: \" + message.getMessageString()\n+                            + \" consensus timestamp: \" + message.consensusTimestamp\n+                            + \" topic sequence number: \" + message.sequenceNumber\n+                            + \" topic running hash: \" + Hex.toHexString(message.runningHash));\n+                });\n+\n+        return subscription;\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(long topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        return subscribeToTopicAndRetrieveMessages(new ConsensusTopicId(0, 0, topicId), startTime, numMessages,\n+                latency);\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(ConsensusTopicId topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        log.debug(\"Subscribe to topic: {} from {}, expecting {} within {} seconds\", topicId, startTime, numMessages,\n+                latency);\n+        CountDownLatch messageLatch = new CountDownLatch(numMessages);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    messageLatch.countDown();\n+                    log.info(\"Received message: {}, consensus timestamp: {}, topic sequence number: {}, topic running\" +\n+                                    \" hash: {}\", message.getMessageString(), message.consensusTimestamp,\n+                            message.sequenceNumber,\n+                            Hex.toHexString(message.runningHash));\n+                });\n+\n+        boolean validLatency = true;\n+        if (latency > 0) {\n+            if (!messageLatch.await(latency, TimeUnit.SECONDS)) {\n+                log.error(\"{} messages were expected within {} seconds. {} messages left\", numMessages, latency,\n+                        messageLatch\n+                                .getCount());\n+            }\n+        } else {\n+            if (!messageLatch.await(1, TimeUnit.MINUTES)) {", "originalCommit": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0OTM4Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370449382", "bodyText": "Thanks fixed.", "author": "Nana-EC", "createdAt": "2020-01-24T02:20:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxNDA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\nindex 36c492ec..f9a7133e 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n\n@@ -91,12 +91,14 @@ public class MirrorNodeClient {\n                 log.error(\"{} messages were expected within {} seconds. {} messages left\", numMessages, latency,\n                         messageLatch\n                                 .getCount());\n+                validLatency = false;\n             }\n         } else {\n             if (!messageLatch.await(1, TimeUnit.MINUTES)) {\n                 log.error(\"{} messages were expected within default of 1 min. {} messages left\", numMessages,\n                         messageLatch\n                                 .getCount());\n+                validLatency = false;\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxNTcxNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370215716", "bodyText": "Keep track of last message and validate that consensusTimestamp greater than last and sequenceNumber equals last plus 1.", "author": "steven-sheehy", "createdAt": "2020-01-23T16:16:46Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");\n+        log.debug(\"Creating Mirror Node client for {}\", mirrorNodeAddress);\n+        consensusClient = new ConsensusClient(Objects.requireNonNull(mirrorNodeAddress))\n+//                .setErrorHandler(err -> log.error(\"Error instantiating ConsensusClient : {}\", err))\n+        ;\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(long topicId, Instant startTime) {\n+        return subscribeToTopic(new ConsensusTopicId(0, 0, topicId), startTime);\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(ConsensusTopicId topicId, Instant startTime) {\n+        log.debug(\"Subscribing to topicId : {} with startTime : {}\", topicId, startTime);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    log.info(\"Received message: \" + message.getMessageString()\n+                            + \" consensus timestamp: \" + message.consensusTimestamp\n+                            + \" topic sequence number: \" + message.sequenceNumber\n+                            + \" topic running hash: \" + Hex.toHexString(message.runningHash));\n+                });\n+\n+        return subscription;\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(long topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        return subscribeToTopicAndRetrieveMessages(new ConsensusTopicId(0, 0, topicId), startTime, numMessages,\n+                latency);\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(ConsensusTopicId topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        log.debug(\"Subscribe to topic: {} from {}, expecting {} within {} seconds\", topicId, startTime, numMessages,\n+                latency);\n+        CountDownLatch messageLatch = new CountDownLatch(numMessages);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    messageLatch.countDown();", "originalCommit": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3MzI0OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370773249", "bodyText": "Will be in next commit", "author": "Nana-EC", "createdAt": "2020-01-24T18:18:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxNTcxNg=="}], "type": "inlineReview", "revised_code": {"commit": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\nindex 36c492ec..f9a7133e 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n\n@@ -91,12 +91,14 @@ public class MirrorNodeClient {\n                 log.error(\"{} messages were expected within {} seconds. {} messages left\", numMessages, latency,\n                         messageLatch\n                                 .getCount());\n+                validLatency = false;\n             }\n         } else {\n             if (!messageLatch.await(1, TimeUnit.MINUTES)) {\n                 log.error(\"{} messages were expected within default of 1 min. {} messages left\", numMessages,\n                         messageLatch\n                                 .getCount());\n+                validLatency = false;\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxNjMyOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370216329", "bodyText": "Probably skip printing message and hash as they can be verbose/binary.", "author": "steven-sheehy", "createdAt": "2020-01-23T16:17:53Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");\n+        log.debug(\"Creating Mirror Node client for {}\", mirrorNodeAddress);\n+        consensusClient = new ConsensusClient(Objects.requireNonNull(mirrorNodeAddress))\n+//                .setErrorHandler(err -> log.error(\"Error instantiating ConsensusClient : {}\", err))\n+        ;\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(long topicId, Instant startTime) {\n+        return subscribeToTopic(new ConsensusTopicId(0, 0, topicId), startTime);\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(ConsensusTopicId topicId, Instant startTime) {\n+        log.debug(\"Subscribing to topicId : {} with startTime : {}\", topicId, startTime);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    log.info(\"Received message: \" + message.getMessageString()\n+                            + \" consensus timestamp: \" + message.consensusTimestamp\n+                            + \" topic sequence number: \" + message.sequenceNumber\n+                            + \" topic running hash: \" + Hex.toHexString(message.runningHash));\n+                });\n+\n+        return subscription;\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(long topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        return subscribeToTopicAndRetrieveMessages(new ConsensusTopicId(0, 0, topicId), startTime, numMessages,\n+                latency);\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(ConsensusTopicId topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        log.debug(\"Subscribe to topic: {} from {}, expecting {} within {} seconds\", topicId, startTime, numMessages,\n+                latency);\n+        CountDownLatch messageLatch = new CountDownLatch(numMessages);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    messageLatch.countDown();\n+                    log.info(\"Received message: {}, consensus timestamp: {}, topic sequence number: {}, topic running\" +\n+                                    \" hash: {}\", message.getMessageString(), message.consensusTimestamp,", "originalCommit": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0ODg4MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370448881", "bodyText": "Agreed with hash but I like message. At least as is since the message is a little informative to when it was submitted.", "author": "Nana-EC", "createdAt": "2020-01-24T02:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxNjMyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\nindex 36c492ec..f9a7133e 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n\n@@ -91,12 +91,14 @@ public class MirrorNodeClient {\n                 log.error(\"{} messages were expected within {} seconds. {} messages left\", numMessages, latency,\n                         messageLatch\n                                 .getCount());\n+                validLatency = false;\n             }\n         } else {\n             if (!messageLatch.await(1, TimeUnit.MINUTES)) {\n                 log.error(\"{} messages were expected within default of 1 min. {} messages left\", numMessages,\n                         messageLatch\n                                 .getCount());\n+                validLatency = false;\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxNzE0Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370217142", "bodyText": "Remove println everywhere", "author": "steven-sheehy", "createdAt": "2020-01-23T16:19:15Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/AccountHelper.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.Hbar;\n+import com.hedera.hashgraph.sdk.HbarUnit;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.Transaction;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.account.AccountBalanceQuery;\n+import com.hedera.hashgraph.sdk.account.AccountCreateTransaction;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Log4j2\n+public class AccountHelper {\n+\n+    public AccountHelper() {\n+    }\n+\n+    public static AccountId createDummyAccount(Client client) throws HederaStatusException {\n+        // 1. Generate a Ed25519 private, public key pair\n+        Ed25519PrivateKey newKey = Ed25519PrivateKey.generate();\n+        Ed25519PublicKey newPublicKey = newKey.publicKey;\n+\n+        System.out.println(\"Private key = \" + newKey);", "originalCommit": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0MzYyOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370443629", "bodyText": "Fixed", "author": "Nana-EC", "createdAt": "2020-01-24T01:50:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxNzE0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/AccountHelper.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/AccountHelper.java\nindex 4e569661..49c8cc1c 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/AccountHelper.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/AccountHelper.java\n\n@@ -37,23 +37,18 @@ import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n @Log4j2\n public class AccountHelper {\n \n-    public AccountHelper() {\n-    }\n-\n-    public static AccountId createDummyAccount(Client client) throws HederaStatusException {\n+    public static AccountId createNewAccount(Client client) throws HederaStatusException {\n         // 1. Generate a Ed25519 private, public key pair\n         Ed25519PrivateKey newKey = Ed25519PrivateKey.generate();\n         Ed25519PublicKey newPublicKey = newKey.publicKey;\n \n-        System.out.println(\"Private key = \" + newKey);\n-        System.out.println(\"Public key = \" + newPublicKey);\n-//        System.out.println(\"My balance = \" + client.getAccountBalance(client.ge));\n+        log.info(\"Private key = {}\", newKey);\n+        log.info(\"Public key = {}\", newPublicKey);\n \n         Transaction tx = new AccountCreateTransaction()\n                 // The only _required_ property here is `key`\n                 .setKey(newKey.publicKey)\n                 .setInitialBalance(Hbar.from(1, HbarUnit.Tinybar))\n-//                .setMaxTransactionFee(10000000)\n                 .build(client);\n \n         tx.execute(client);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxNzUxNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370217514", "bodyText": "3 lines of empty constructor can be removed", "author": "steven-sheehy", "createdAt": "2020-01-23T16:19:48Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/AccountHelper.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.Hbar;\n+import com.hedera.hashgraph.sdk.HbarUnit;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.Transaction;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.account.AccountBalanceQuery;\n+import com.hedera.hashgraph.sdk.account.AccountCreateTransaction;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Log4j2\n+public class AccountHelper {\n+\n+    public AccountHelper() {", "originalCommit": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/AccountHelper.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/AccountHelper.java\nindex 4e569661..49c8cc1c 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/AccountHelper.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/AccountHelper.java\n\n@@ -37,23 +37,18 @@ import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n @Log4j2\n public class AccountHelper {\n \n-    public AccountHelper() {\n-    }\n-\n-    public static AccountId createDummyAccount(Client client) throws HederaStatusException {\n+    public static AccountId createNewAccount(Client client) throws HederaStatusException {\n         // 1. Generate a Ed25519 private, public key pair\n         Ed25519PrivateKey newKey = Ed25519PrivateKey.generate();\n         Ed25519PublicKey newPublicKey = newKey.publicKey;\n \n-        System.out.println(\"Private key = \" + newKey);\n-        System.out.println(\"Public key = \" + newPublicKey);\n-//        System.out.println(\"My balance = \" + client.getAccountBalance(client.ge));\n+        log.info(\"Private key = {}\", newKey);\n+        log.info(\"Public key = {}\", newPublicKey);\n \n         Transaction tx = new AccountCreateTransaction()\n                 // The only _required_ property here is `key`\n                 .setKey(newKey.publicKey)\n                 .setInitialBalance(Hbar.from(1, HbarUnit.Tinybar))\n-//                .setMaxTransactionFee(10000000)\n                 .build(client);\n \n         tx.execute(client);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyMTA2NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370221064", "bodyText": "This is not in .env.sample. Why are we even testing separate submit keys? Let's just focus on what impacts mirror API", "author": "steven-sheehy", "createdAt": "2020-01-23T16:25:39Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Assert;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n+\n+@Log4j2\n+public class TopicCoverage {\n+    String memo;\n+    Long maxFee;\n+    long topicId;\n+    long autoRenew;\n+    int numMessages;\n+    Long sleepBetweenMessages;\n+    int latency;\n+    Instant startDate = Instant.EPOCH;\n+    Client sdkClient;\n+    MirrorNodeClient mirrorClient;\n+    ConsensusTopicId consensusTopicId;\n+    //    Pair<Ed25519PrivateKey, ConsensusTopicId> createTopicResponse;\n+    TransactionId transactionId;\n+    ConsensusClient.Subscription subscription;\n+    Pair<ConsensusClient.Subscription, Boolean> messageSubscribeResult;\n+    //    TransactionReceipt transactionReceipt;\n+    List<TransactionReceipt> transactionReceipts;\n+\n+    @Given(\"User obtained SDK client\")\n+    public void getSDKClient() throws HederaStatusException {\n+        if (sdkClient == null) {\n+            sdkClient = SDKClient.hederaClient();\n+        }\n+    }\n+\n+    @Given(\"User obtained Mirror Node Consensus client\")\n+    public void getMirrorNodeClient() {\n+        if (mirrorClient == null) {\n+            mirrorClient = new MirrorNodeClient();\n+        }\n+    }\n+\n+    @Given(\"I provide a memo {string} and a max transaction fee of {long}\")\n+    public void setTopicCreateParams(String memo, Long maxFee) {\n+        this.memo = memo;\n+        this.maxFee = maxFee;\n+    }\n+\n+    @Given(\"I provide a topic id {long}\")\n+    public void setTopicIdParam(Long topicId) {\n+        this.topicId = topicId;\n+        consensusTopicId = new ConsensusTopicId(0, 0, topicId);\n+        Assert.assertNotNull(consensusTopicId);\n+    }\n+\n+    @Given(\"I provide a topic id {long}, memo {string} and an auto renew period of {long}\")\n+    public void setTopicUpdateParams(Long topicId, String memo, Long autoRenew) {\n+        setTopicIdParam(topicId);\n+        this.memo = memo;\n+        this.autoRenew = autoRenew;\n+    }\n+\n+    @Given(\"I provide a topic id {long}, a number of messages {int}  and a sleep time between them {long}\")\n+    public void setTopicPublishParams(Long topicId, int numMessages, Long sleepBetweenMessages) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.sleepBetweenMessages = sleepBetweenMessages;\n+    }\n+\n+    @Given(\"I provide a topic id {long} and a number {int} I want to receive within {int} seconds\")\n+    public void setTopicListenParams(Long topicId, int numMessages, int latency) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.latency = latency;\n+    }\n+\n+    @Given(\"I provide a topic id {long} and a date {string} and a number {int} I want to receive\")\n+    public void setTopicListenParams(Long topicId, String startDate, int numMessages) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.startDate = Instant.parse(startDate);\n+    }\n+\n+    @When(\"I attempt to create a new topic id\")\n+    public void createNewTopic() throws HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        transactionReceipts = new ArrayList();\n+        TransactionReceipt receipt = topicHelper.createTopic(memo, maxFee);\n+        consensusTopicId = receipt.getConsensusTopicId();\n+        transactionReceipts.add(receipt);\n+    }\n+\n+    @When(\"I attempt to update an existing topic\")\n+    public void updateTopic() throws HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        transactionReceipts = new ArrayList();\n+        transactionReceipts.add(topicHelper.updateTopic(consensusTopicId, memo, autoRenew));\n+    }\n+\n+    @When(\"I subscribe to the topic\")\n+    public void verifySubscriptionChannelConnection() {\n+        subscription = mirrorClient.subscribeToTopic(consensusTopicId, Instant.now());\n+        Assert.assertNotNull(subscription);\n+    }\n+\n+    @When(\"I publish random messages\")\n+    public void verifyTopicMessagePublish() throws InterruptedException, HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        Ed25519PrivateKey submitPrivateKey = Ed25519PrivateKey\n+                .fromString(Dotenv.load().get(\"TOPIC_SUBMIT_PRIVATE_KEY\"));", "originalCommit": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzMDQ2Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370430467", "bodyText": "Yes this was by design and part of the WIP items I was thinking on.\nI can remove it for now as it's not a current core mirror node focus.", "author": "Nana-EC", "createdAt": "2020-01-24T00:53:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyMTA2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3NDEyNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370774126", "bodyText": "Submit key logic removed from config", "author": "Nana-EC", "createdAt": "2020-01-24T18:20:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyMTA2NA=="}], "type": "inlineReview", "revised_code": {"commit": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nsimilarity index 57%\nrename from hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java\nrename to hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nindex 3524b472..0aa40535 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\n\n@@ -19,48 +19,39 @@ package com.hedera.mirror.test.e2e.acceptance.steps;\n  * \u200d\n  */\n \n+import static org.junit.jupiter.api.Assertions.*;\n+\n import io.cucumber.java.After;\n import io.cucumber.java.en.Given;\n import io.cucumber.java.en.Then;\n import io.cucumber.java.en.When;\n-import io.github.cdimascio.dotenv.Dotenv;\n import java.time.Instant;\n import java.util.ArrayList;\n import java.util.List;\n import lombok.extern.log4j.Log4j2;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.junit.Assert;\n \n import com.hedera.hashgraph.sdk.Client;\n import com.hedera.hashgraph.sdk.HederaStatusException;\n-import com.hedera.hashgraph.sdk.TransactionId;\n import com.hedera.hashgraph.sdk.TransactionReceipt;\n import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n \n @Log4j2\n-public class TopicCoverage {\n-    String memo;\n-    Long maxFee;\n-    long topicId;\n-    long autoRenew;\n+public class TopicFeature {\n     int numMessages;\n-    Long sleepBetweenMessages;\n     int latency;\n     Instant startDate = Instant.EPOCH;\n     Client sdkClient;\n     MirrorNodeClient mirrorClient;\n     ConsensusTopicId consensusTopicId;\n-    //    Pair<Ed25519PrivateKey, ConsensusTopicId> createTopicResponse;\n-    TransactionId transactionId;\n     ConsensusClient.Subscription subscription;\n-    Pair<ConsensusClient.Subscription, Boolean> messageSubscribeResult;\n-    //    TransactionReceipt transactionReceipt;\n     List<TransactionReceipt> transactionReceipts;\n+    Ed25519PrivateKey submitKey;\n \n     @Given(\"User obtained SDK client\")\n     public void getSDKClient() throws HederaStatusException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzMzE1OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370233158", "bodyText": "This should probably move to trace level", "author": "steven-sheehy", "createdAt": "2020-01-23T16:46:33Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");\n+        log.debug(\"Creating Mirror Node client for {}\", mirrorNodeAddress);\n+        consensusClient = new ConsensusClient(Objects.requireNonNull(mirrorNodeAddress))\n+//                .setErrorHandler(err -> log.error(\"Error instantiating ConsensusClient : {}\", err))\n+        ;\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(long topicId, Instant startTime) {\n+        return subscribeToTopic(new ConsensusTopicId(0, 0, topicId), startTime);\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(ConsensusTopicId topicId, Instant startTime) {\n+        log.debug(\"Subscribing to topicId : {} with startTime : {}\", topicId, startTime);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    log.info(\"Received message: \" + message.getMessageString()\n+                            + \" consensus timestamp: \" + message.consensusTimestamp\n+                            + \" topic sequence number: \" + message.sequenceNumber\n+                            + \" topic running hash: \" + Hex.toHexString(message.runningHash));\n+                });\n+\n+        return subscription;\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(long topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        return subscribeToTopicAndRetrieveMessages(new ConsensusTopicId(0, 0, topicId), startTime, numMessages,\n+                latency);\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(ConsensusTopicId topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        log.debug(\"Subscribe to topic: {} from {}, expecting {} within {} seconds\", topicId, startTime, numMessages,\n+                latency);\n+        CountDownLatch messageLatch = new CountDownLatch(numMessages);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    messageLatch.countDown();\n+                    log.info(\"Received message: {}, consensus timestamp: {}, topic sequence number: {}, topic running\" +", "originalCommit": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0ODM5Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370448392", "bodyText": "Changed", "author": "Nana-EC", "createdAt": "2020-01-24T02:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzMzE1OA=="}], "type": "inlineReview", "revised_code": {"commit": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\nindex 36c492ec..6717a1d5 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n\n@@ -22,14 +22,16 @@ package com.hedera.mirror.test.e2e.acceptance.util;\n \n import io.github.cdimascio.dotenv.Dotenv;\n import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Objects;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n import lombok.extern.log4j.Log4j2;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.spongycastle.util.encoders.Hex;\n \n import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessage;\n import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n \n @Log4j2\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzMzM3NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370233375", "bodyText": "Add a success received X messages log at info", "author": "steven-sheehy", "createdAt": "2020-01-23T16:46:58Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");\n+        log.debug(\"Creating Mirror Node client for {}\", mirrorNodeAddress);\n+        consensusClient = new ConsensusClient(Objects.requireNonNull(mirrorNodeAddress))\n+//                .setErrorHandler(err -> log.error(\"Error instantiating ConsensusClient : {}\", err))\n+        ;\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(long topicId, Instant startTime) {\n+        return subscribeToTopic(new ConsensusTopicId(0, 0, topicId), startTime);\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(ConsensusTopicId topicId, Instant startTime) {\n+        log.debug(\"Subscribing to topicId : {} with startTime : {}\", topicId, startTime);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    log.info(\"Received message: \" + message.getMessageString()\n+                            + \" consensus timestamp: \" + message.consensusTimestamp\n+                            + \" topic sequence number: \" + message.sequenceNumber\n+                            + \" topic running hash: \" + Hex.toHexString(message.runningHash));\n+                });\n+\n+        return subscription;\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(long topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        return subscribeToTopicAndRetrieveMessages(new ConsensusTopicId(0, 0, topicId), startTime, numMessages,\n+                latency);\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(ConsensusTopicId topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        log.debug(\"Subscribe to topic: {} from {}, expecting {} within {} seconds\", topicId, startTime, numMessages,\n+                latency);\n+        CountDownLatch messageLatch = new CountDownLatch(numMessages);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    messageLatch.countDown();\n+                    log.info(\"Received message: {}, consensus timestamp: {}, topic sequence number: {}, topic running\" +\n+                                    \" hash: {}\", message.getMessageString(), message.consensusTimestamp,\n+                            message.sequenceNumber,\n+                            Hex.toHexString(message.runningHash));\n+                });\n+\n+        boolean validLatency = true;\n+        if (latency > 0) {\n+            if (!messageLatch.await(latency, TimeUnit.SECONDS)) {\n+                log.error(\"{} messages were expected within {} seconds. {} messages left\", numMessages, latency,\n+                        messageLatch\n+                                .getCount());\n+            }\n+        } else {\n+            if (!messageLatch.await(1, TimeUnit.MINUTES)) {\n+                log.error(\"{} messages were expected within default of 1 min. {} messages left\", numMessages,\n+                        messageLatch\n+                                .getCount());\n+            }\n+        }\n+", "originalCommit": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0OTUwNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370449504", "bodyText": "On the same page. Added, will push", "author": "Nana-EC", "createdAt": "2020-01-24T02:20:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzMzM3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\nindex 36c492ec..6717a1d5 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n\n@@ -22,14 +22,16 @@ package com.hedera.mirror.test.e2e.acceptance.util;\n \n import io.github.cdimascio.dotenv.Dotenv;\n import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Objects;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n import lombok.extern.log4j.Log4j2;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.spongycastle.util.encoders.Hex;\n \n import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessage;\n import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n \n @Log4j2\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0Mjc1OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370242758", "bodyText": "I thought SDK loaded properties for you automatically, didn't realize it was manually like this. In that case, let's remove dotenv and use yaml configuration like we do for the other modules to be consistent.", "author": "steven-sheehy", "createdAt": "2020-01-23T17:03:51Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");", "originalCommit": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0MzkyMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370443923", "bodyText": "Okay, will add to the new client commit", "author": "Nana-EC", "createdAt": "2020-01-24T01:52:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0Mjc1OA=="}], "type": "inlineReview", "revised_code": {"commit": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\nindex f9a7133e..6717a1d5 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n\n@@ -22,14 +22,16 @@ package com.hedera.mirror.test.e2e.acceptance.util;\n \n import io.github.cdimascio.dotenv.Dotenv;\n import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Objects;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n import lombok.extern.log4j.Log4j2;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.spongycastle.util.encoders.Hex;\n \n import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessage;\n import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n \n @Log4j2\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0NDczNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370244734", "bodyText": "Don't use JUnit 4.x API. Replace with JUnit 5.x Assertions", "author": "steven-sheehy", "createdAt": "2020-01-23T17:07:48Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/AccountCoverage.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import lombok.extern.log4j.Log4j2;\n+import org.junit.Assert;", "originalCommit": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0MTk0Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370441943", "bodyText": "Done", "author": "Nana-EC", "createdAt": "2020-01-24T01:42:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0NDczNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzMjk3MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370832971", "bodyText": "Still some JUnit 4.x", "author": "steven-sheehy", "createdAt": "2020-01-24T20:41:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0NDczNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3NzEwNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370877107", "bodyText": "Removed", "author": "Nana-EC", "createdAt": "2020-01-24T22:53:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0NDczNA=="}], "type": "inlineReview", "revised_code": {"commit": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/AccountCoverage.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/AccountFeature.java\nsimilarity index 72%\nrename from hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/AccountCoverage.java\nrename to hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/AccountFeature.java\nindex 5dc78f06..fa01c08a 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/AccountCoverage.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/AccountFeature.java\n\n@@ -20,6 +20,7 @@ package com.hedera.mirror.test.e2e.acceptance.steps;\n  * \u200d\n  */\n \n+import io.cucumber.java.After;\n import io.cucumber.java.en.Given;\n import io.cucumber.java.en.Then;\n import io.cucumber.java.en.When;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1MTYzNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370251635", "bodyText": "We should be populating all fields for all consensus HAPI requests. We can't explicitly validate the fields update the mirror DB (without integrating REST API calls), but it will verify we parsed the transactions correctly. We should not be testing all combinations of inputs to HAPI though, just a single transaction with all fields. We can use the same key for submit and admin.", "author": "steven-sheehy", "createdAt": "2020-01-23T17:21:45Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/TopicHelper.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicCreateTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicDeleteTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicUpdateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Log4j2\n+public class TopicHelper {\n+\n+    private final Client client;\n+\n+    public TopicHelper(Client client) {\n+        this.client = client;\n+    }\n+\n+    public TransactionReceipt createTopic(String memo, long maxTransFee) throws HederaStatusException {\n+        Ed25519PrivateKey submitKey = Ed25519PrivateKey.generate();\n+        Ed25519PublicKey submitPublicKey = submitKey.publicKey;\n+        log.debug(\"Topic creation key : {}\", submitKey);\n+\n+        TransactionReceipt transactionReceipt = new ConsensusTopicCreateTransaction()\n+                .setMaxTransactionFee(maxTransFee)", "originalCommit": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ2NDM1Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370464356", "bodyText": "Sure, we can consider topic creation a setup operation in that case.", "author": "Nana-EC", "createdAt": "2020-01-24T03:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1MTYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/TopicHelper.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/TopicHelper.java\nindex 06c49fb4..a9e0d789 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/TopicHelper.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/TopicHelper.java\n\n@@ -46,38 +46,37 @@ public class TopicHelper {\n         this.client = client;\n     }\n \n-    public TransactionReceipt createTopic(String memo, long maxTransFee) throws HederaStatusException {\n-        Ed25519PrivateKey submitKey = Ed25519PrivateKey.generate();\n-        Ed25519PublicKey submitPublicKey = submitKey.publicKey;\n-        log.debug(\"Topic creation key : {}\", submitKey);\n+    public TransactionReceipt createTopic(Ed25519PublicKey submitPublicKey) throws HederaStatusException {\n \n+        int refNanos = Instant.now().getNano();\n         TransactionReceipt transactionReceipt = new ConsensusTopicCreateTransaction()\n-                .setMaxTransactionFee(maxTransFee)\n-                .setTopicMemo(memo)\n-//                .setSubmitKey(submitPublicKey)\n+//                .setAdminKey(submitPublicKey) // INVALID_SIGNATURE when any of above keys are used\n+                .setSubmitKey(submitPublicKey)\n+//                .setAutoRenewAccountId(AccountId.fromString(\"0.0.2\")) // AUTORENEW_ACCOUNT_NOT_ALLOWED\n+                .setMaxTransactionFee(10000000)\n+                .setTopicMemo(\"HCS Topic_\" + refNanos)\n+//                .setAutoRenewPeriod(Duration.ofDays(5)) // AUTORENEW_DURATION_NOT_IN_RANGE\n                 .execute(client)\n                 .getReceipt(client);\n \n         ConsensusTopicId topicId = transactionReceipt.getConsensusTopicId();\n-        log.debug(\"Created new topic {}, with ED25519 submitKey of {}. TransactionReceipt : {}\", topicId,\n-                submitPublicKey,\n-                transactionReceipt);\n+        log.debug(\"Created new topic {}, with TransactionReceipt : {}\", topicId, transactionReceipt);\n \n         return transactionReceipt;\n     }\n \n-    public TransactionReceipt updateTopic(ConsensusTopicId topicId, String memo, long duration) throws HederaStatusException {\n-        String newMemo = memo + \"_\" + Instant.now().getNano();\n+    public TransactionReceipt updateTopic(ConsensusTopicId topicId, Ed25519PrivateKey submitKey) throws HederaStatusException {\n+        String newMemo = \"HCS UpdatedTopic__\" + Instant.now().getNano();\n         TransactionReceipt transactionReceipt = new ConsensusTopicUpdateTransaction()\n                 .setTopicId(topicId)\n                 .setTopicMemo(newMemo)\n-                .setAutoRenewPeriod(Duration.ofDays(duration))\n+                .setAutoRenewPeriod(Duration.ofDays(12))\n+                .build(client)\n+                .sign(submitKey)\n                 .execute(client)\n                 .getReceipt(client);\n \n-        log.debug(\"Updated topic with new memo : '{}' and auto renew period '{}'. Received transactionReceipt : {} \",\n-                newMemo\n-                , duration, transactionReceipt);\n+        log.debug(\"Updated topic '{}'. Received transactionReceipt : {} \", topicId, transactionReceipt);\n         return transactionReceipt;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1MzQzOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370253438", "bodyText": "Prefer not to name it technology specific. Maybe AcceptanceTest", "author": "steven-sheehy", "createdAt": "2020-01-23T17:25:25Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/CucumberE2ETest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.hedera.mirror.test.e2e.acceptance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.junit.Cucumber;\n+import io.cucumber.junit.CucumberOptions;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(Cucumber.class)\n+@CucumberOptions(\n+        features = \"src/test/resources\",\n+        glue = \"com.hedera.mirror.test.e2e.acceptance\"\n+)\n+public class CucumberE2ETest {", "originalCommit": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQyOTM5NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370429395", "bodyText": "Renamed", "author": "Nana-EC", "createdAt": "2020-01-24T00:48:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1MzQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/CucumberE2ETest.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/AcceptanceTest.java\nsimilarity index 96%\nrename from hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/CucumberE2ETest.java\nrename to hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/AcceptanceTest.java\nindex ed9fc7f8..590deaf9 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/CucumberE2ETest.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/AcceptanceTest.java\n\n@@ -29,5 +29,5 @@ import org.junit.runner.RunWith;\n         features = \"src/test/resources\",\n         glue = \"com.hedera.mirror.test.e2e.acceptance\"\n )\n-public class CucumberE2ETest {\n+public class AcceptanceTest {\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1NzExMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370257111", "bodyText": "Seems to be unused", "author": "steven-sheehy", "createdAt": "2020-01-23T17:32:47Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Assert;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n+\n+@Log4j2\n+public class TopicCoverage {\n+    String memo;\n+    Long maxFee;\n+    long topicId;\n+    long autoRenew;\n+    int numMessages;\n+    Long sleepBetweenMessages;\n+    int latency;\n+    Instant startDate = Instant.EPOCH;\n+    Client sdkClient;\n+    MirrorNodeClient mirrorClient;\n+    ConsensusTopicId consensusTopicId;\n+    //    Pair<Ed25519PrivateKey, ConsensusTopicId> createTopicResponse;\n+    TransactionId transactionId;\n+    ConsensusClient.Subscription subscription;\n+    Pair<ConsensusClient.Subscription, Boolean> messageSubscribeResult;\n+    //    TransactionReceipt transactionReceipt;\n+    List<TransactionReceipt> transactionReceipts;\n+\n+    @Given(\"User obtained SDK client\")\n+    public void getSDKClient() throws HederaStatusException {\n+        if (sdkClient == null) {\n+            sdkClient = SDKClient.hederaClient();\n+        }\n+    }\n+\n+    @Given(\"User obtained Mirror Node Consensus client\")\n+    public void getMirrorNodeClient() {\n+        if (mirrorClient == null) {\n+            mirrorClient = new MirrorNodeClient();\n+        }\n+    }\n+\n+    @Given(\"I provide a memo {string} and a max transaction fee of {long}\")\n+    public void setTopicCreateParams(String memo, Long maxFee) {\n+        this.memo = memo;\n+        this.maxFee = maxFee;\n+    }\n+\n+    @Given(\"I provide a topic id {long}\")\n+    public void setTopicIdParam(Long topicId) {\n+        this.topicId = topicId;", "originalCommit": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzMDIzNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370430236", "bodyText": "Unclear what is unused. The method is referenced in the hcs.feature file and the variables are used also", "author": "Nana-EC", "createdAt": "2020-01-24T00:52:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1NzExMQ=="}], "type": "inlineReview", "revised_code": {"commit": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nsimilarity index 57%\nrename from hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java\nrename to hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nindex 3524b472..0aa40535 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\n\n@@ -19,48 +19,39 @@ package com.hedera.mirror.test.e2e.acceptance.steps;\n  * \u200d\n  */\n \n+import static org.junit.jupiter.api.Assertions.*;\n+\n import io.cucumber.java.After;\n import io.cucumber.java.en.Given;\n import io.cucumber.java.en.Then;\n import io.cucumber.java.en.When;\n-import io.github.cdimascio.dotenv.Dotenv;\n import java.time.Instant;\n import java.util.ArrayList;\n import java.util.List;\n import lombok.extern.log4j.Log4j2;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.junit.Assert;\n \n import com.hedera.hashgraph.sdk.Client;\n import com.hedera.hashgraph.sdk.HederaStatusException;\n-import com.hedera.hashgraph.sdk.TransactionId;\n import com.hedera.hashgraph.sdk.TransactionReceipt;\n import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n \n @Log4j2\n-public class TopicCoverage {\n-    String memo;\n-    Long maxFee;\n-    long topicId;\n-    long autoRenew;\n+public class TopicFeature {\n     int numMessages;\n-    Long sleepBetweenMessages;\n     int latency;\n     Instant startDate = Instant.EPOCH;\n     Client sdkClient;\n     MirrorNodeClient mirrorClient;\n     ConsensusTopicId consensusTopicId;\n-    //    Pair<Ed25519PrivateKey, ConsensusTopicId> createTopicResponse;\n-    TransactionId transactionId;\n     ConsensusClient.Subscription subscription;\n-    Pair<ConsensusClient.Subscription, Boolean> messageSubscribeResult;\n-    //    TransactionReceipt transactionReceipt;\n     List<TransactionReceipt> transactionReceipts;\n+    Ed25519PrivateKey submitKey;\n \n     @Given(\"User obtained SDK client\")\n     public void getSDKClient() throws HederaStatusException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1OTgyNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370259825", "bodyText": "This seems to print a stacktrace every time. Let's just change it to ex.getMessage() so error is printed but no stacktrace.", "author": "steven-sheehy", "createdAt": "2020-01-23T17:38:34Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Assert;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n+\n+@Log4j2\n+public class TopicCoverage {\n+    String memo;\n+    Long maxFee;\n+    long topicId;\n+    long autoRenew;\n+    int numMessages;\n+    Long sleepBetweenMessages;\n+    int latency;\n+    Instant startDate = Instant.EPOCH;\n+    Client sdkClient;\n+    MirrorNodeClient mirrorClient;\n+    ConsensusTopicId consensusTopicId;\n+    //    Pair<Ed25519PrivateKey, ConsensusTopicId> createTopicResponse;\n+    TransactionId transactionId;\n+    ConsensusClient.Subscription subscription;\n+    Pair<ConsensusClient.Subscription, Boolean> messageSubscribeResult;\n+    //    TransactionReceipt transactionReceipt;\n+    List<TransactionReceipt> transactionReceipts;\n+\n+    @Given(\"User obtained SDK client\")\n+    public void getSDKClient() throws HederaStatusException {\n+        if (sdkClient == null) {\n+            sdkClient = SDKClient.hederaClient();\n+        }\n+    }\n+\n+    @Given(\"User obtained Mirror Node Consensus client\")\n+    public void getMirrorNodeClient() {\n+        if (mirrorClient == null) {\n+            mirrorClient = new MirrorNodeClient();\n+        }\n+    }\n+\n+    @Given(\"I provide a memo {string} and a max transaction fee of {long}\")\n+    public void setTopicCreateParams(String memo, Long maxFee) {\n+        this.memo = memo;\n+        this.maxFee = maxFee;\n+    }\n+\n+    @Given(\"I provide a topic id {long}\")\n+    public void setTopicIdParam(Long topicId) {\n+        this.topicId = topicId;\n+        consensusTopicId = new ConsensusTopicId(0, 0, topicId);\n+        Assert.assertNotNull(consensusTopicId);\n+    }\n+\n+    @Given(\"I provide a topic id {long}, memo {string} and an auto renew period of {long}\")\n+    public void setTopicUpdateParams(Long topicId, String memo, Long autoRenew) {\n+        setTopicIdParam(topicId);\n+        this.memo = memo;\n+        this.autoRenew = autoRenew;\n+    }\n+\n+    @Given(\"I provide a topic id {long}, a number of messages {int}  and a sleep time between them {long}\")\n+    public void setTopicPublishParams(Long topicId, int numMessages, Long sleepBetweenMessages) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.sleepBetweenMessages = sleepBetweenMessages;\n+    }\n+\n+    @Given(\"I provide a topic id {long} and a number {int} I want to receive within {int} seconds\")\n+    public void setTopicListenParams(Long topicId, int numMessages, int latency) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.latency = latency;\n+    }\n+\n+    @Given(\"I provide a topic id {long} and a date {string} and a number {int} I want to receive\")\n+    public void setTopicListenParams(Long topicId, String startDate, int numMessages) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.startDate = Instant.parse(startDate);\n+    }\n+\n+    @When(\"I attempt to create a new topic id\")\n+    public void createNewTopic() throws HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        transactionReceipts = new ArrayList();\n+        TransactionReceipt receipt = topicHelper.createTopic(memo, maxFee);\n+        consensusTopicId = receipt.getConsensusTopicId();\n+        transactionReceipts.add(receipt);\n+    }\n+\n+    @When(\"I attempt to update an existing topic\")\n+    public void updateTopic() throws HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        transactionReceipts = new ArrayList();\n+        transactionReceipts.add(topicHelper.updateTopic(consensusTopicId, memo, autoRenew));\n+    }\n+\n+    @When(\"I subscribe to the topic\")\n+    public void verifySubscriptionChannelConnection() {\n+        subscription = mirrorClient.subscribeToTopic(consensusTopicId, Instant.now());\n+        Assert.assertNotNull(subscription);\n+    }\n+\n+    @When(\"I publish random messages\")\n+    public void verifyTopicMessagePublish() throws InterruptedException, HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        Ed25519PrivateKey submitPrivateKey = Ed25519PrivateKey\n+                .fromString(Dotenv.load().get(\"TOPIC_SUBMIT_PRIVATE_KEY\"));\n+        transactionReceipts = topicHelper\n+                .publishMessagesToTopic(consensusTopicId, \"New message\", submitPrivateKey, numMessages,\n+                        sleepBetweenMessages);\n+        Assert.assertEquals(numMessages, transactionReceipts.size());\n+    }\n+\n+    @Then(\"all clients are established\")\n+    public void verifyClients() {\n+        Assert.assertNotNull(sdkClient);\n+        Assert.assertNotNull(mirrorClient);\n+        log.debug(\"Verified non null mirrorClient\");\n+    }\n+\n+    @Then(\"the network should successfully confirm the transaction for this operation\")\n+    public void verifyTransactionId() {\n+        Assert.assertNotNull(transactionId);\n+    }\n+\n+    @Then(\"I unsubscribe from a topic\")\n+    public void verifyUnSubscribeFromChannelConnection() {\n+        mirrorClient.unSubscribeFromTopic(subscription);\n+    }\n+\n+    @Then(\"I attempt to delete the topic\")\n+    public void deleteTopic() throws HederaStatusException {\n+\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        transactionReceipts = new ArrayList();\n+        transactionReceipts.add(topicHelper.deleteTopic(consensusTopicId));\n+    }\n+\n+    @Then(\"the network should successfully establish a channel to this topic\")\n+    public void verifySubscribeAndUnsubscribeChannelConnection() {\n+        verifySubscriptionChannelConnection();\n+\n+        verifyUnSubscribeFromChannelConnection();\n+    }\n+\n+    @Then(\"I subscribe with a filter to retrieve messages\")\n+    public void retrieveTopicMessages() throws InterruptedException {\n+        messageSubscribeResult = mirrorClient\n+                .subscribeToTopicAndRetrieveMessages(consensusTopicId, startDate, numMessages, latency);\n+        Assert.assertNotNull(messageSubscribeResult);\n+        subscription = messageSubscribeResult.getLeft();\n+    }\n+\n+    @Then(\"the network should successfully observe these messages\")\n+    public void verifyTopicMessageSubscription() {\n+        ConsensusClient.Subscription subscription = messageSubscribeResult.getLeft();\n+        Assert.assertNotNull(subscription);\n+        mirrorClient.unSubscribeFromTopic(subscription);\n+\n+        Assert.assertTrue(messageSubscribeResult.getRight());\n+    }\n+\n+//    @Then(\"the network received a valid transaction receipt\")\n+//    public void verifyTransactionReceipt() {\n+//        Assert.assertNotNull(transactionReceipt);\n+//    }\n+\n+    @Then(\"the network should confirm valid transaction receipts for this operation\")\n+    public void verifyTransactionReceipts() {\n+        for (TransactionReceipt receipt : transactionReceipts) {\n+            Assert.assertNotNull(receipt);\n+        }\n+    }\n+\n+    @After\n+    public void closeClients() {\n+\n+        if (sdkClient != null) {\n+            try {\n+                sdkClient.close();\n+            } catch (Exception ex) {\n+                log.warn(\"Error closing SDK client : {}\", ex);", "originalCommit": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0MjY3Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370442677", "bodyText": "Every time is related to Cucumber @Aftre logic. Should be good now with other fix. Also updated", "author": "Nana-EC", "createdAt": "2020-01-24T01:46:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1OTgyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nsimilarity index 57%\nrename from hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java\nrename to hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nindex 3524b472..0aa40535 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\n\n@@ -19,48 +19,39 @@ package com.hedera.mirror.test.e2e.acceptance.steps;\n  * \u200d\n  */\n \n+import static org.junit.jupiter.api.Assertions.*;\n+\n import io.cucumber.java.After;\n import io.cucumber.java.en.Given;\n import io.cucumber.java.en.Then;\n import io.cucumber.java.en.When;\n-import io.github.cdimascio.dotenv.Dotenv;\n import java.time.Instant;\n import java.util.ArrayList;\n import java.util.List;\n import lombok.extern.log4j.Log4j2;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.junit.Assert;\n \n import com.hedera.hashgraph.sdk.Client;\n import com.hedera.hashgraph.sdk.HederaStatusException;\n-import com.hedera.hashgraph.sdk.TransactionId;\n import com.hedera.hashgraph.sdk.TransactionReceipt;\n import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n \n @Log4j2\n-public class TopicCoverage {\n-    String memo;\n-    Long maxFee;\n-    long topicId;\n-    long autoRenew;\n+public class TopicFeature {\n     int numMessages;\n-    Long sleepBetweenMessages;\n     int latency;\n     Instant startDate = Instant.EPOCH;\n     Client sdkClient;\n     MirrorNodeClient mirrorClient;\n     ConsensusTopicId consensusTopicId;\n-    //    Pair<Ed25519PrivateKey, ConsensusTopicId> createTopicResponse;\n-    TransactionId transactionId;\n     ConsensusClient.Subscription subscription;\n-    Pair<ConsensusClient.Subscription, Boolean> messageSubscribeResult;\n-    //    TransactionReceipt transactionReceipt;\n     List<TransactionReceipt> transactionReceipts;\n+    Ed25519PrivateKey submitKey;\n \n     @Given(\"User obtained SDK client\")\n     public void getSDKClient() throws HederaStatusException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2MDI1MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370260250", "bodyText": "This client isn't closed @After, generating a stacktrace every time.", "author": "steven-sheehy", "createdAt": "2020-01-23T17:39:34Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/AccountCoverage.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import lombok.extern.log4j.Log4j2;\n+import org.junit.Assert;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.mirror.test.e2e.acceptance.util.AccountHelper;\n+import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n+\n+@Log4j2\n+public class AccountCoverage {\n+    private AccountId accountId;\n+    private long balance;\n+\n+    @Given(\"I provided an account string of {string}\")\n+    public void retrieveAccount(String targetAccount) {\n+        accountId = AccountId.fromString(targetAccount);\n+    }\n+\n+    @When(\"I request balance info for this account\")\n+    public void getAccountBalance() throws HederaStatusException {\n+        Client client = SDKClient.hederaClient();", "originalCommit": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQyOTUwNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370429505", "bodyText": "Missed this for Account case. Done now", "author": "Nana-EC", "createdAt": "2020-01-24T00:49:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2MDI1MA=="}], "type": "inlineReview", "revised_code": {"commit": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/AccountCoverage.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/AccountFeature.java\nsimilarity index 72%\nrename from hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/AccountCoverage.java\nrename to hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/AccountFeature.java\nindex 5dc78f06..fa01c08a 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/AccountCoverage.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/AccountFeature.java\n\n@@ -20,6 +20,7 @@ package com.hedera.mirror.test.e2e.acceptance.steps;\n  * \u200d\n  */\n \n+import io.cucumber.java.After;\n import io.cucumber.java.en.Given;\n import io.cucumber.java.en.Then;\n import io.cucumber.java.en.When;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI3MDU3OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370270578", "bodyText": "Please log at trace level since it happens every test", "author": "steven-sheehy", "createdAt": "2020-01-23T18:01:33Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Assert;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n+\n+@Log4j2\n+public class TopicCoverage {\n+    String memo;\n+    Long maxFee;\n+    long topicId;\n+    long autoRenew;\n+    int numMessages;\n+    Long sleepBetweenMessages;\n+    int latency;\n+    Instant startDate = Instant.EPOCH;\n+    Client sdkClient;\n+    MirrorNodeClient mirrorClient;\n+    ConsensusTopicId consensusTopicId;\n+    //    Pair<Ed25519PrivateKey, ConsensusTopicId> createTopicResponse;\n+    TransactionId transactionId;\n+    ConsensusClient.Subscription subscription;\n+    Pair<ConsensusClient.Subscription, Boolean> messageSubscribeResult;\n+    //    TransactionReceipt transactionReceipt;\n+    List<TransactionReceipt> transactionReceipts;\n+\n+    @Given(\"User obtained SDK client\")\n+    public void getSDKClient() throws HederaStatusException {\n+        if (sdkClient == null) {\n+            sdkClient = SDKClient.hederaClient();\n+        }\n+    }\n+\n+    @Given(\"User obtained Mirror Node Consensus client\")\n+    public void getMirrorNodeClient() {\n+        if (mirrorClient == null) {\n+            mirrorClient = new MirrorNodeClient();\n+        }\n+    }\n+\n+    @Given(\"I provide a memo {string} and a max transaction fee of {long}\")\n+    public void setTopicCreateParams(String memo, Long maxFee) {\n+        this.memo = memo;\n+        this.maxFee = maxFee;\n+    }\n+\n+    @Given(\"I provide a topic id {long}\")\n+    public void setTopicIdParam(Long topicId) {\n+        this.topicId = topicId;\n+        consensusTopicId = new ConsensusTopicId(0, 0, topicId);\n+        Assert.assertNotNull(consensusTopicId);\n+    }\n+\n+    @Given(\"I provide a topic id {long}, memo {string} and an auto renew period of {long}\")\n+    public void setTopicUpdateParams(Long topicId, String memo, Long autoRenew) {\n+        setTopicIdParam(topicId);\n+        this.memo = memo;\n+        this.autoRenew = autoRenew;\n+    }\n+\n+    @Given(\"I provide a topic id {long}, a number of messages {int}  and a sleep time between them {long}\")\n+    public void setTopicPublishParams(Long topicId, int numMessages, Long sleepBetweenMessages) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.sleepBetweenMessages = sleepBetweenMessages;\n+    }\n+\n+    @Given(\"I provide a topic id {long} and a number {int} I want to receive within {int} seconds\")\n+    public void setTopicListenParams(Long topicId, int numMessages, int latency) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.latency = latency;\n+    }\n+\n+    @Given(\"I provide a topic id {long} and a date {string} and a number {int} I want to receive\")\n+    public void setTopicListenParams(Long topicId, String startDate, int numMessages) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.startDate = Instant.parse(startDate);\n+    }\n+\n+    @When(\"I attempt to create a new topic id\")\n+    public void createNewTopic() throws HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        transactionReceipts = new ArrayList();\n+        TransactionReceipt receipt = topicHelper.createTopic(memo, maxFee);\n+        consensusTopicId = receipt.getConsensusTopicId();\n+        transactionReceipts.add(receipt);\n+    }\n+\n+    @When(\"I attempt to update an existing topic\")\n+    public void updateTopic() throws HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        transactionReceipts = new ArrayList();\n+        transactionReceipts.add(topicHelper.updateTopic(consensusTopicId, memo, autoRenew));\n+    }\n+\n+    @When(\"I subscribe to the topic\")\n+    public void verifySubscriptionChannelConnection() {\n+        subscription = mirrorClient.subscribeToTopic(consensusTopicId, Instant.now());\n+        Assert.assertNotNull(subscription);\n+    }\n+\n+    @When(\"I publish random messages\")\n+    public void verifyTopicMessagePublish() throws InterruptedException, HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        Ed25519PrivateKey submitPrivateKey = Ed25519PrivateKey\n+                .fromString(Dotenv.load().get(\"TOPIC_SUBMIT_PRIVATE_KEY\"));\n+        transactionReceipts = topicHelper\n+                .publishMessagesToTopic(consensusTopicId, \"New message\", submitPrivateKey, numMessages,\n+                        sleepBetweenMessages);\n+        Assert.assertEquals(numMessages, transactionReceipts.size());\n+    }\n+\n+    @Then(\"all clients are established\")\n+    public void verifyClients() {\n+        Assert.assertNotNull(sdkClient);\n+        Assert.assertNotNull(mirrorClient);\n+        log.debug(\"Verified non null mirrorClient\");", "originalCommit": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0MjQ0MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370442441", "bodyText": "Updated", "author": "Nana-EC", "createdAt": "2020-01-24T01:45:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI3MDU3OA=="}], "type": "inlineReview", "revised_code": {"commit": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nsimilarity index 57%\nrename from hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java\nrename to hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nindex 3524b472..0aa40535 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\n\n@@ -19,48 +19,39 @@ package com.hedera.mirror.test.e2e.acceptance.steps;\n  * \u200d\n  */\n \n+import static org.junit.jupiter.api.Assertions.*;\n+\n import io.cucumber.java.After;\n import io.cucumber.java.en.Given;\n import io.cucumber.java.en.Then;\n import io.cucumber.java.en.When;\n-import io.github.cdimascio.dotenv.Dotenv;\n import java.time.Instant;\n import java.util.ArrayList;\n import java.util.List;\n import lombok.extern.log4j.Log4j2;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.junit.Assert;\n \n import com.hedera.hashgraph.sdk.Client;\n import com.hedera.hashgraph.sdk.HederaStatusException;\n-import com.hedera.hashgraph.sdk.TransactionId;\n import com.hedera.hashgraph.sdk.TransactionReceipt;\n import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n \n @Log4j2\n-public class TopicCoverage {\n-    String memo;\n-    Long maxFee;\n-    long topicId;\n-    long autoRenew;\n+public class TopicFeature {\n     int numMessages;\n-    Long sleepBetweenMessages;\n     int latency;\n     Instant startDate = Instant.EPOCH;\n     Client sdkClient;\n     MirrorNodeClient mirrorClient;\n     ConsensusTopicId consensusTopicId;\n-    //    Pair<Ed25519PrivateKey, ConsensusTopicId> createTopicResponse;\n-    TransactionId transactionId;\n     ConsensusClient.Subscription subscription;\n-    Pair<ConsensusClient.Subscription, Boolean> messageSubscribeResult;\n-    //    TransactionReceipt transactionReceipt;\n     List<TransactionReceipt> transactionReceipts;\n+    Ed25519PrivateKey submitKey;\n \n     @Given(\"User obtained SDK client\")\n     public void getSDKClient() throws HederaStatusException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI3MzE5OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370273199", "bodyText": "Can we move SDKClient and MirrorClient creation to @Before so they're run once for all scenarios? I don't think we need the assert not null as they will either be non-null or throw an exception", "author": "steven-sheehy", "createdAt": "2020-01-23T18:07:11Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Assert;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n+\n+@Log4j2\n+public class TopicCoverage {\n+    String memo;\n+    Long maxFee;\n+    long topicId;\n+    long autoRenew;\n+    int numMessages;\n+    Long sleepBetweenMessages;\n+    int latency;\n+    Instant startDate = Instant.EPOCH;\n+    Client sdkClient;\n+    MirrorNodeClient mirrorClient;\n+    ConsensusTopicId consensusTopicId;\n+    //    Pair<Ed25519PrivateKey, ConsensusTopicId> createTopicResponse;\n+    TransactionId transactionId;\n+    ConsensusClient.Subscription subscription;\n+    Pair<ConsensusClient.Subscription, Boolean> messageSubscribeResult;\n+    //    TransactionReceipt transactionReceipt;\n+    List<TransactionReceipt> transactionReceipts;\n+\n+    @Given(\"User obtained SDK client\")\n+    public void getSDKClient() throws HederaStatusException {\n+        if (sdkClient == null) {\n+            sdkClient = SDKClient.hederaClient();", "originalCommit": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzMDEwNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370430105", "bodyText": "Cucumber doesn't support global hooks such s beforeAll and afterAll.\nAlso Before run before every combination, so you can't get around that which is why I have the null check to only get a client on null.\nI use the Background for setup as seen in the PR and I came up with a workaround of a placeholder scenario for the tearDown case.", "author": "Nana-EC", "createdAt": "2020-01-24T00:51:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI3MzE5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3ODQ0Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370778446", "bodyText": "Logic changed as now each scenario is atomic and creates it's own topic and messages", "author": "Nana-EC", "createdAt": "2020-01-24T18:30:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI3MzE5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nsimilarity index 57%\nrename from hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java\nrename to hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nindex 3524b472..0aa40535 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\n\n@@ -19,48 +19,39 @@ package com.hedera.mirror.test.e2e.acceptance.steps;\n  * \u200d\n  */\n \n+import static org.junit.jupiter.api.Assertions.*;\n+\n import io.cucumber.java.After;\n import io.cucumber.java.en.Given;\n import io.cucumber.java.en.Then;\n import io.cucumber.java.en.When;\n-import io.github.cdimascio.dotenv.Dotenv;\n import java.time.Instant;\n import java.util.ArrayList;\n import java.util.List;\n import lombok.extern.log4j.Log4j2;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.junit.Assert;\n \n import com.hedera.hashgraph.sdk.Client;\n import com.hedera.hashgraph.sdk.HederaStatusException;\n-import com.hedera.hashgraph.sdk.TransactionId;\n import com.hedera.hashgraph.sdk.TransactionReceipt;\n import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n \n @Log4j2\n-public class TopicCoverage {\n-    String memo;\n-    Long maxFee;\n-    long topicId;\n-    long autoRenew;\n+public class TopicFeature {\n     int numMessages;\n-    Long sleepBetweenMessages;\n     int latency;\n     Instant startDate = Instant.EPOCH;\n     Client sdkClient;\n     MirrorNodeClient mirrorClient;\n     ConsensusTopicId consensusTopicId;\n-    //    Pair<Ed25519PrivateKey, ConsensusTopicId> createTopicResponse;\n-    TransactionId transactionId;\n     ConsensusClient.Subscription subscription;\n-    Pair<ConsensusClient.Subscription, Boolean> messageSubscribeResult;\n-    //    TransactionReceipt transactionReceipt;\n     List<TransactionReceipt> transactionReceipts;\n+    Ed25519PrivateKey submitKey;\n \n     @Given(\"User obtained SDK client\")\n     public void getSDKClient() throws HederaStatusException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4Mjk2OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370282969", "bodyText": "This method unused?", "author": "steven-sheehy", "createdAt": "2020-01-23T18:28:17Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");\n+        log.debug(\"Creating Mirror Node client for {}\", mirrorNodeAddress);\n+        consensusClient = new ConsensusClient(Objects.requireNonNull(mirrorNodeAddress))\n+//                .setErrorHandler(err -> log.error(\"Error instantiating ConsensusClient : {}\", err))\n+        ;\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(long topicId, Instant startTime) {", "originalCommit": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0NjE0Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370446147", "bodyText": "It's just an overload I considered so everyone would have to convert to a ConsensusTopicId first. I can remove it till needed", "author": "Nana-EC", "createdAt": "2020-01-24T02:03:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4Mjk2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\nindex f9a7133e..6717a1d5 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n\n@@ -22,14 +22,16 @@ package com.hedera.mirror.test.e2e.acceptance.util;\n \n import io.github.cdimascio.dotenv.Dotenv;\n import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Objects;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n import lombok.extern.log4j.Log4j2;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.spongycastle.util.encoders.Hex;\n \n import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessage;\n import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n \n @Log4j2\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NDk4OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370284989", "bodyText": "Unused method along with transactionId field?", "author": "steven-sheehy", "createdAt": "2020-01-23T18:32:32Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Assert;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n+\n+@Log4j2\n+public class TopicCoverage {\n+    String memo;\n+    Long maxFee;\n+    long topicId;\n+    long autoRenew;\n+    int numMessages;\n+    Long sleepBetweenMessages;\n+    int latency;\n+    Instant startDate = Instant.EPOCH;\n+    Client sdkClient;\n+    MirrorNodeClient mirrorClient;\n+    ConsensusTopicId consensusTopicId;\n+    //    Pair<Ed25519PrivateKey, ConsensusTopicId> createTopicResponse;\n+    TransactionId transactionId;\n+    ConsensusClient.Subscription subscription;\n+    Pair<ConsensusClient.Subscription, Boolean> messageSubscribeResult;\n+    //    TransactionReceipt transactionReceipt;\n+    List<TransactionReceipt> transactionReceipts;\n+\n+    @Given(\"User obtained SDK client\")\n+    public void getSDKClient() throws HederaStatusException {\n+        if (sdkClient == null) {\n+            sdkClient = SDKClient.hederaClient();\n+        }\n+    }\n+\n+    @Given(\"User obtained Mirror Node Consensus client\")\n+    public void getMirrorNodeClient() {\n+        if (mirrorClient == null) {\n+            mirrorClient = new MirrorNodeClient();\n+        }\n+    }\n+\n+    @Given(\"I provide a memo {string} and a max transaction fee of {long}\")\n+    public void setTopicCreateParams(String memo, Long maxFee) {\n+        this.memo = memo;\n+        this.maxFee = maxFee;\n+    }\n+\n+    @Given(\"I provide a topic id {long}\")\n+    public void setTopicIdParam(Long topicId) {\n+        this.topicId = topicId;\n+        consensusTopicId = new ConsensusTopicId(0, 0, topicId);\n+        Assert.assertNotNull(consensusTopicId);\n+    }\n+\n+    @Given(\"I provide a topic id {long}, memo {string} and an auto renew period of {long}\")\n+    public void setTopicUpdateParams(Long topicId, String memo, Long autoRenew) {\n+        setTopicIdParam(topicId);\n+        this.memo = memo;\n+        this.autoRenew = autoRenew;\n+    }\n+\n+    @Given(\"I provide a topic id {long}, a number of messages {int}  and a sleep time between them {long}\")\n+    public void setTopicPublishParams(Long topicId, int numMessages, Long sleepBetweenMessages) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.sleepBetweenMessages = sleepBetweenMessages;\n+    }\n+\n+    @Given(\"I provide a topic id {long} and a number {int} I want to receive within {int} seconds\")\n+    public void setTopicListenParams(Long topicId, int numMessages, int latency) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.latency = latency;\n+    }\n+\n+    @Given(\"I provide a topic id {long} and a date {string} and a number {int} I want to receive\")\n+    public void setTopicListenParams(Long topicId, String startDate, int numMessages) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.startDate = Instant.parse(startDate);\n+    }\n+\n+    @When(\"I attempt to create a new topic id\")\n+    public void createNewTopic() throws HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        transactionReceipts = new ArrayList();\n+        TransactionReceipt receipt = topicHelper.createTopic(memo, maxFee);\n+        consensusTopicId = receipt.getConsensusTopicId();\n+        transactionReceipts.add(receipt);\n+    }\n+\n+    @When(\"I attempt to update an existing topic\")\n+    public void updateTopic() throws HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        transactionReceipts = new ArrayList();\n+        transactionReceipts.add(topicHelper.updateTopic(consensusTopicId, memo, autoRenew));\n+    }\n+\n+    @When(\"I subscribe to the topic\")\n+    public void verifySubscriptionChannelConnection() {\n+        subscription = mirrorClient.subscribeToTopic(consensusTopicId, Instant.now());\n+        Assert.assertNotNull(subscription);\n+    }\n+\n+    @When(\"I publish random messages\")\n+    public void verifyTopicMessagePublish() throws InterruptedException, HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        Ed25519PrivateKey submitPrivateKey = Ed25519PrivateKey\n+                .fromString(Dotenv.load().get(\"TOPIC_SUBMIT_PRIVATE_KEY\"));\n+        transactionReceipts = topicHelper\n+                .publishMessagesToTopic(consensusTopicId, \"New message\", submitPrivateKey, numMessages,\n+                        sleepBetweenMessages);\n+        Assert.assertEquals(numMessages, transactionReceipts.size());\n+    }\n+\n+    @Then(\"all clients are established\")\n+    public void verifyClients() {\n+        Assert.assertNotNull(sdkClient);\n+        Assert.assertNotNull(mirrorClient);\n+        log.debug(\"Verified non null mirrorClient\");\n+    }\n+\n+    @Then(\"the network should successfully confirm the transaction for this operation\")", "originalCommit": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0MjQxMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370442411", "bodyText": "Removed", "author": "Nana-EC", "createdAt": "2020-01-24T01:45:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NDk4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nsimilarity index 57%\nrename from hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java\nrename to hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nindex 3524b472..0aa40535 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\n\n@@ -19,48 +19,39 @@ package com.hedera.mirror.test.e2e.acceptance.steps;\n  * \u200d\n  */\n \n+import static org.junit.jupiter.api.Assertions.*;\n+\n import io.cucumber.java.After;\n import io.cucumber.java.en.Given;\n import io.cucumber.java.en.Then;\n import io.cucumber.java.en.When;\n-import io.github.cdimascio.dotenv.Dotenv;\n import java.time.Instant;\n import java.util.ArrayList;\n import java.util.List;\n import lombok.extern.log4j.Log4j2;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.junit.Assert;\n \n import com.hedera.hashgraph.sdk.Client;\n import com.hedera.hashgraph.sdk.HederaStatusException;\n-import com.hedera.hashgraph.sdk.TransactionId;\n import com.hedera.hashgraph.sdk.TransactionReceipt;\n import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n \n @Log4j2\n-public class TopicCoverage {\n-    String memo;\n-    Long maxFee;\n-    long topicId;\n-    long autoRenew;\n+public class TopicFeature {\n     int numMessages;\n-    Long sleepBetweenMessages;\n     int latency;\n     Instant startDate = Instant.EPOCH;\n     Client sdkClient;\n     MirrorNodeClient mirrorClient;\n     ConsensusTopicId consensusTopicId;\n-    //    Pair<Ed25519PrivateKey, ConsensusTopicId> createTopicResponse;\n-    TransactionId transactionId;\n     ConsensusClient.Subscription subscription;\n-    Pair<ConsensusClient.Subscription, Boolean> messageSubscribeResult;\n-    //    TransactionReceipt transactionReceipt;\n     List<TransactionReceipt> transactionReceipts;\n+    Ed25519PrivateKey submitKey;\n \n     @Given(\"User obtained SDK client\")\n     public void getSDKClient() throws HederaStatusException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNDA2Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370324063", "bodyText": "Recommend consolidate subscribetoTopic* with:\npublic Collection<MirrorConsensusTopicResponse> subscribeTopic(MirrorConsensusTopicQuery query, long expectedMessages, int latency) {\n...\n}", "author": "steven-sheehy", "createdAt": "2020-01-23T19:55:50Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");\n+        log.debug(\"Creating Mirror Node client for {}\", mirrorNodeAddress);\n+        consensusClient = new ConsensusClient(Objects.requireNonNull(mirrorNodeAddress))\n+//                .setErrorHandler(err -> log.error(\"Error instantiating ConsensusClient : {}\", err))\n+        ;\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(long topicId, Instant startTime) {\n+        return subscribeToTopic(new ConsensusTopicId(0, 0, topicId), startTime);\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(ConsensusTopicId topicId, Instant startTime) {\n+        log.debug(\"Subscribing to topicId : {} with startTime : {}\", topicId, startTime);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    log.info(\"Received message: \" + message.getMessageString()\n+                            + \" consensus timestamp: \" + message.consensusTimestamp\n+                            + \" topic sequence number: \" + message.sequenceNumber\n+                            + \" topic running hash: \" + Hex.toHexString(message.runningHash));\n+                });\n+\n+        return subscription;\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(long topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        return subscribeToTopicAndRetrieveMessages(new ConsensusTopicId(0, 0, topicId), startTime, numMessages,\n+                latency);\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(ConsensusTopicId topicId,", "originalCommit": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3NjQ1MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370876450", "bodyText": "Eventually took this tip. Helped to divide the responsibility for the helper and feature", "author": "Nana-EC", "createdAt": "2020-01-24T22:50:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNDA2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\nindex f9a7133e..6717a1d5 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n\n@@ -22,14 +22,16 @@ package com.hedera.mirror.test.e2e.acceptance.util;\n \n import io.github.cdimascio.dotenv.Dotenv;\n import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Objects;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n import lombok.extern.log4j.Log4j2;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.spongycastle.util.encoders.Hex;\n \n import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessage;\n import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n \n @Log4j2\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNDM3Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370324373", "bodyText": "I think these fields can go away based upon other discussion items: memo, maxFee, topicId, autoRenew, sleepBetweenMessages, startDate, createTopicResponse, transactionId, transactionReceipt. Input parameters to mirror can just be stored in MirrorConsensusTopicQuery", "author": "steven-sheehy", "createdAt": "2020-01-23T19:56:33Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Assert;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n+\n+@Log4j2\n+public class TopicCoverage {\n+    String memo;", "originalCommit": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3OTY3Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370779677", "bodyText": "Agreed and removed.", "author": "Nana-EC", "createdAt": "2020-01-24T18:33:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNDM3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nsimilarity index 57%\nrename from hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java\nrename to hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nindex 3524b472..0aa40535 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\n\n@@ -19,48 +19,39 @@ package com.hedera.mirror.test.e2e.acceptance.steps;\n  * \u200d\n  */\n \n+import static org.junit.jupiter.api.Assertions.*;\n+\n import io.cucumber.java.After;\n import io.cucumber.java.en.Given;\n import io.cucumber.java.en.Then;\n import io.cucumber.java.en.When;\n-import io.github.cdimascio.dotenv.Dotenv;\n import java.time.Instant;\n import java.util.ArrayList;\n import java.util.List;\n import lombok.extern.log4j.Log4j2;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.junit.Assert;\n \n import com.hedera.hashgraph.sdk.Client;\n import com.hedera.hashgraph.sdk.HederaStatusException;\n-import com.hedera.hashgraph.sdk.TransactionId;\n import com.hedera.hashgraph.sdk.TransactionReceipt;\n import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n \n @Log4j2\n-public class TopicCoverage {\n-    String memo;\n-    Long maxFee;\n-    long topicId;\n-    long autoRenew;\n+public class TopicFeature {\n     int numMessages;\n-    Long sleepBetweenMessages;\n     int latency;\n     Instant startDate = Instant.EPOCH;\n     Client sdkClient;\n     MirrorNodeClient mirrorClient;\n     ConsensusTopicId consensusTopicId;\n-    //    Pair<Ed25519PrivateKey, ConsensusTopicId> createTopicResponse;\n-    TransactionId transactionId;\n     ConsensusClient.Subscription subscription;\n-    Pair<ConsensusClient.Subscription, Boolean> messageSubscribeResult;\n-    //    TransactionReceipt transactionReceipt;\n     List<TransactionReceipt> transactionReceipts;\n+    Ed25519PrivateKey submitKey;\n \n     @Given(\"User obtained SDK client\")\n     public void getSDKClient() throws HederaStatusException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNDY0MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370324640", "bodyText": "Cucumber calls these features, so AccountFeature and TopicFeature are more appropriate.", "author": "steven-sheehy", "createdAt": "2020-01-23T19:57:11Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Assert;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n+\n+@Log4j2\n+public class TopicCoverage {", "originalCommit": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQyOTU0NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370429544", "bodyText": "Renamed", "author": "Nana-EC", "createdAt": "2020-01-24T00:49:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNDY0MA=="}], "type": "inlineReview", "revised_code": {"commit": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nsimilarity index 57%\nrename from hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java\nrename to hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nindex 3524b472..0aa40535 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\n\n@@ -19,48 +19,39 @@ package com.hedera.mirror.test.e2e.acceptance.steps;\n  * \u200d\n  */\n \n+import static org.junit.jupiter.api.Assertions.*;\n+\n import io.cucumber.java.After;\n import io.cucumber.java.en.Given;\n import io.cucumber.java.en.Then;\n import io.cucumber.java.en.When;\n-import io.github.cdimascio.dotenv.Dotenv;\n import java.time.Instant;\n import java.util.ArrayList;\n import java.util.List;\n import lombok.extern.log4j.Log4j2;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.junit.Assert;\n \n import com.hedera.hashgraph.sdk.Client;\n import com.hedera.hashgraph.sdk.HederaStatusException;\n-import com.hedera.hashgraph.sdk.TransactionId;\n import com.hedera.hashgraph.sdk.TransactionReceipt;\n import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n \n @Log4j2\n-public class TopicCoverage {\n-    String memo;\n-    Long maxFee;\n-    long topicId;\n-    long autoRenew;\n+public class TopicFeature {\n     int numMessages;\n-    Long sleepBetweenMessages;\n     int latency;\n     Instant startDate = Instant.EPOCH;\n     Client sdkClient;\n     MirrorNodeClient mirrorClient;\n     ConsensusTopicId consensusTopicId;\n-    //    Pair<Ed25519PrivateKey, ConsensusTopicId> createTopicResponse;\n-    TransactionId transactionId;\n     ConsensusClient.Subscription subscription;\n-    Pair<ConsensusClient.Subscription, Boolean> messageSubscribeResult;\n-    //    TransactionReceipt transactionReceipt;\n     List<TransactionReceipt> transactionReceipts;\n+    Ed25519PrivateKey submitKey;\n \n     @Given(\"User obtained SDK client\")\n     public void getSDKClient() throws HederaStatusException {\n"}}, {"oid": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c4fb15dcb0e5f175317c8a984e24c31fc375e412", "message": " Removed redundant test cases and made them more atomic addressing feedback\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-24T15:22:33Z", "type": "commit"}, {"oid": "f2258146134f7bd43cb3ea7c54339c8251f9247d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f2258146134f7bd43cb3ea7c54339c8251f9247d", "message": "Pulled in new MirrorClient logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-24T15:44:34Z", "type": "commit"}, {"oid": "a755f9340b44c03e0fc22a487e96b87821250500", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a755f9340b44c03e0fc22a487e96b87821250500", "message": "Adopted MirrorConsensusTopicQuery object for subscription calls\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-24T16:14:04Z", "type": "commit"}, {"oid": "a8143b75792afd6fd7cfcca21cc6f959bfac284c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a8143b75792afd6fd7cfcca21cc6f959bfac284c", "message": "Added testnet support\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-24T18:08:33Z", "type": "commit"}, {"oid": "e787183420430ac2a42b5d50c21258d2a761b3de", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e787183420430ac2a42b5d50c21258d2a761b3de", "message": "Added logic to verify messages validity\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-24T20:13:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg0MDYzMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370840631", "bodyText": "I think instead of util/*Helper it should be client/*Client. Reason is they are client wrappers around HAPI and MAPI, not really utility classes. Utility classes are generally static methods grouped into logical classes.", "author": "steven-sheehy", "createdAt": "2020-01-24T21:02:45Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/TopicHelper.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicCreateTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicDeleteTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicUpdateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+import com.hedera.hashgraph.sdk.mirror.MirrorConsensusTopicResponse;\n+\n+@Log4j2\n+public class TopicHelper {", "originalCommit": "e787183420430ac2a42b5d50c21258d2a761b3de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxNjU3NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r372016575", "bodyText": "Done", "author": "Nana-EC", "createdAt": "2020-01-28T19:42:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg0MDYzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "2d550e56c8f066411d42f378b60d45788ca4daa9", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/TopicHelper.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/TopicHelper.java\nindex 842e0821..114e2ef2 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/TopicHelper.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/TopicHelper.java\n\n@@ -21,7 +21,6 @@ package com.hedera.mirror.test.e2e.acceptance.util;\n  */\n \n import java.nio.charset.StandardCharsets;\n-import java.time.Duration;\n import java.time.Instant;\n import java.util.ArrayList;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg0MTA2Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370841066", "bodyText": "This is still just printing. It should rethrow/somehow fail the test", "author": "steven-sheehy", "createdAt": "2020-01-24T21:03:57Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.mirror.MirrorClient;\n+import com.hedera.hashgraph.sdk.mirror.MirrorConsensusTopicQuery;\n+import com.hedera.hashgraph.sdk.mirror.MirrorConsensusTopicResponse;\n+import com.hedera.hashgraph.sdk.mirror.MirrorSubscriptionHandle;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final MirrorClient mirrorClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");\n+        log.debug(\"Creating Mirror Node client for {}\", mirrorNodeAddress);\n+        mirrorClient = new MirrorClient(Objects.requireNonNull(mirrorNodeAddress));\n+    }\n+\n+    public MirrorSubscriptionHandle subscribeToTopic(MirrorConsensusTopicQuery mirrorConsensusTopicQuery) {\n+        log.debug(\"Subscribing to topic with query: {}\", mirrorConsensusTopicQuery);\n+        return mirrorConsensusTopicQuery\n+                .subscribe(mirrorClient, resp -> {\n+                            String messageAsString = new String(resp.message, StandardCharsets.UTF_8);\n+                            log.info(\"Received message: \" + messageAsString\n+                                    + \" consensus timestamp: \" + resp.consensusTimestamp\n+                                    + \" topic sequence number: \" + resp.sequenceNumber);\n+                        },\n+                        // On gRPC error, print the stack trace\n+                        Throwable::printStackTrace);", "originalCommit": "e787183420430ac2a42b5d50c21258d2a761b3de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5MDk4Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r372190986", "bodyText": "Fixed", "author": "Nana-EC", "createdAt": "2020-01-29T05:10:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg0MTA2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7b3f13bb0395be8df45cf96785458a47e4c3f74d", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java\nsimilarity index 98%\nrename from hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\nrename to hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java\nindex 9b3e02e3..b29d00d8 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java\n\n@@ -1,4 +1,4 @@\n-package com.hedera.mirror.test.e2e.acceptance.util;\n+package com.hedera.mirror.test.e2e.acceptance.client;\n \n /*-\n  * \u200c\n"}}, {"oid": "4fb9b232995fe8983fd7403e1d67a24f7c76734a", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4fb9b232995fe8983fd7403e1d67a24f7c76734a", "message": "Simplified config for network\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-28T05:29:36Z", "type": "commit"}, {"oid": "1bc27ca930e952fad3d3c1be0d9618dea3d9fa00", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1bc27ca930e952fad3d3c1be0d9618dea3d9fa00", "message": "Merge branch 'master' into hcsbddtests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-28T05:30:06Z", "type": "commit"}, {"oid": "2d550e56c8f066411d42f378b60d45788ca4daa9", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2d550e56c8f066411d42f378b60d45788ca4daa9", "message": "Fixed update and delete topic scenarios. Removed static client creation and opened up some properties\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-28T18:46:29Z", "type": "commit"}, {"oid": "7b3f13bb0395be8df45cf96785458a47e4c3f74d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7b3f13bb0395be8df45cf96785458a47e4c3f74d", "message": "Grouped clients and updated feature files\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-28T19:19:49Z", "type": "commit"}, {"oid": "92bb4beec5f6aaa759d383f1dea2fa4d45062fcf", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/92bb4beec5f6aaa759d383f1dea2fa4d45062fcf", "message": "Crreated SubscriptionResponse to centralize response processing logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-29T05:08:57Z", "type": "commit"}, {"oid": "eb0de31e981eb34e51eac1017021e712ea5a7ac6", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/eb0de31e981eb34e51eac1017021e712ea5a7ac6", "message": "Moved cucumber and jmeter tests into profiles for integration-tests phase\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-29T20:27:15Z", "type": "commit"}, {"oid": "3c2e5960169bd62e614b651eddf46db3647ca445", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3c2e5960169bd62e614b651eddf46db3647ca445", "message": "Added logic to run tests from IDE and also filter on tests in command line\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-29T21:23:57Z", "type": "commit"}, {"oid": "3118463b3ec4066c6e530657bdd511de6dca8e09", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3118463b3ec4066c6e530657bdd511de6dca8e09", "message": "Updated logic to verify messages within a sub time frame\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-30T19:58:18Z", "type": "commit"}, {"oid": "f5c5afdaa5b9c126f6cbcfbe3474414fc359428b", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f5c5afdaa5b9c126f6cbcfbe3474414fc359428b", "message": "Merge branch 'master' into hcsbddtests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-30T19:59:06Z", "type": "commit"}, {"oid": "8f5bf8ad17e2de7a21d5c0ad7f4b79da7536fa02", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8f5bf8ad17e2de7a21d5c0ad7f4b79da7536fa02", "message": "Converted module to spring boot to allow for better context management. Inlcuding switching form dotenv to yaml config\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-31T07:10:00Z", "type": "commit"}, {"oid": "d9fd36f3ed622546c09b8cbee2ae9b2be288d934", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d9fd36f3ed622546c09b8cbee2ae9b2be288d934", "message": "Merge branch 'master' into hcsbddtests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-31T07:10:34Z", "type": "commit"}, {"oid": "e60818b35a6a0c93c4ac5677ef7c2fe12740ba12", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e60818b35a6a0c93c4ac5677ef7c2fe12740ba12", "message": "Adding pretty logs and report graphs. Also parallel runs by reordering features. Also added config sla\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-31T20:13:22Z", "type": "commit"}, {"oid": "e2f23322795dcd0fe1ccb4a1b0931ba942539445", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e2f23322795dcd0fe1ccb4a1b0931ba942539445", "message": "Updated README with instructions on test\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-31T23:09:13Z", "type": "commit"}, {"oid": "e96da7549d6d78969267a5a18a0d6a76455da09f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e96da7549d6d78969267a5a18a0d6a76455da09f", "message": "Merge branch 'master' into hcsbddtests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-01-31T23:10:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMTExMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373721110", "bodyText": "We've been calling these properties. Config can be confused with Spring Configuration classes. And I prefer naming it with acceptance. AcceptanceProperties or AcceptanceTestProperties", "author": "steven-sheehy", "createdAt": "2020-01-31T22:55:25Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/config/ClientConnectionConfig.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.hedera.mirror.test.e2e.acceptance.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.Data;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.stereotype.Component;\n+\n+@Data\n+@Component\n+@ConfigurationProperties(prefix = \"hedera.test.acceptance\")\n+public class ClientConnectionConfig {", "originalCommit": "e60818b35a6a0c93c4ac5677ef7c2fe12740ba12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM0NTg4MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r374345881", "bodyText": "Changed to AcceptanceTestProperties", "author": "Nana-EC", "createdAt": "2020-02-03T21:17:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMTExMA=="}], "type": "inlineReview", "revised_code": {"commit": "9e20396174869772eebab56c3e0ff1d9b15865cd", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/config/ClientConnectionConfig.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/config/AcceptanceTestProperties.java\nsimilarity index 88%\nrename from hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/config/ClientConnectionConfig.java\nrename to hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/config/AcceptanceTestProperties.java\nindex 70458519c..bb6eb253c 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/config/ClientConnectionConfig.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/config/AcceptanceTestProperties.java\n\n@@ -26,12 +26,12 @@ import org.springframework.stereotype.Component;\n \n @Data\n @Component\n-@ConfigurationProperties(prefix = \"hedera.test.acceptance\")\n-public class ClientConnectionConfig {\n+@ConfigurationProperties(prefix = \"hedera.mirror.test.acceptance\")\n+public class AcceptanceTestProperties {\n     private String nodeAddress;\n     private String nodeId;\n     private String mirrorNodeAddress;\n     private String operatorId;\n     private String operatorKey;\n-    private int messageWaitSLA;\n+    private int messageTimeout;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMTgxNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373721815", "bodyText": "These should all be private", "author": "steven-sheehy", "createdAt": "2020-01-31T22:57:53Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java", "diffHunk": "@@ -0,0 +1,301 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.cucumber.junit.platform.engine.Cucumber;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+import com.hedera.hashgraph.sdk.mirror.MirrorConsensusTopicQuery;\n+import com.hedera.mirror.test.e2e.acceptance.client.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.client.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.client.SubscriptionResponse;\n+import com.hedera.mirror.test.e2e.acceptance.client.TopicClient;\n+import com.hedera.mirror.test.e2e.acceptance.config.ClientConnectionConfig;\n+import com.hedera.mirror.test.e2e.acceptance.util.FeatureInputHandler;\n+\n+@Log4j2\n+@Cucumber\n+public class TopicFeature {\n+    int numMessages;", "originalCommit": "e60818b35a6a0c93c4ac5677ef7c2fe12740ba12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM0NzIxMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r374347210", "bodyText": "Agreed", "author": "Nana-EC", "createdAt": "2020-02-03T21:20:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMTgxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "012d077b50df1c8a4cf374fc6b33867eac96bc62", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nindex d1469d2b1..32086ec4a 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\n\n@@ -28,7 +28,6 @@ import io.cucumber.java.en.Then;\n import io.cucumber.java.en.When;\n import io.cucumber.junit.platform.engine.Cucumber;\n import java.time.Instant;\n-import java.util.ArrayList;\n import java.util.List;\n import lombok.extern.log4j.Log4j2;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMjQ3MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373722471", "bodyText": "This doesn't need to be a getter as it's only used here", "author": "steven-sheehy", "createdAt": "2020-01-31T23:00:18Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/SDKClient.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.hedera.mirror.test.e2e.acceptance.client;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+import com.hedera.mirror.test.e2e.acceptance.config.ClientConnectionConfig;\n+\n+@Log4j2\n+@Value\n+public class SDKClient {\n+    private final Client client;\n+    private final Ed25519PublicKey payerPublicKey;\n+    private final AccountId operatorId;\n+    private final boolean testNet;\n+\n+    public SDKClient(ClientConnectionConfig clientConnectionConfig) {\n+\n+        // Grab configuration variables from the .env file\n+        operatorId = AccountId.fromString(clientConnectionConfig.getOperatorId());\n+        var operatorKey = Ed25519PrivateKey.fromString(clientConnectionConfig.getOperatorKey());\n+        payerPublicKey = operatorKey.publicKey;\n+\n+        Client client;\n+        var nodeAddress = clientConnectionConfig.getNodeAddress();\n+        testNet = nodeAddress.equalsIgnoreCase(\"testnet\");\n+        if (isTestNet()) {", "originalCommit": "e60818b35a6a0c93c4ac5677ef7c2fe12740ba12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM0ODE0OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r374348148", "bodyText": "True, made it such in case other testnet only logic showed up, but I can remove it for now", "author": "Nana-EC", "createdAt": "2020-02-03T21:22:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMjQ3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9e20396174869772eebab56c3e0ff1d9b15865cd", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/SDKClient.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/SDKClient.java\nindex 6e28c1233..ad97a5f63 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/SDKClient.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/SDKClient.java\n\n@@ -30,7 +30,7 @@ import com.hedera.hashgraph.sdk.Client;\n import com.hedera.hashgraph.sdk.account.AccountId;\n import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n-import com.hedera.mirror.test.e2e.acceptance.config.ClientConnectionConfig;\n+import com.hedera.mirror.test.e2e.acceptance.config.AcceptanceTestProperties;\n \n @Log4j2\n @Value\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczNjI2NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373736265", "bodyText": "This field seems unused but its size is logged", "author": "steven-sheehy", "createdAt": "2020-02-01T00:06:26Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/SubscriptionResponse.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.hedera.mirror.test.e2e.acceptance.client;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import lombok.Data;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.mirror.MirrorConsensusTopicResponse;\n+import com.hedera.hashgraph.sdk.mirror.MirrorSubscriptionHandle;\n+\n+@Data\n+@Log4j2\n+public class SubscriptionResponse {\n+    private MirrorSubscriptionHandle subscription;\n+    private List<MirrorConsensusTopicResponse> messages;\n+    private Stopwatch elapsedTime;\n+    private Throwable responseError;\n+\n+    public void handleMirrorConsensusTopicResponse(MirrorConsensusTopicResponse topicResponse) {\n+//        messages.add(topicResponse);", "originalCommit": "e96da7549d6d78969267a5a18a0d6a76455da09f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM1NzU0Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r374357543", "bodyText": "It is used, in the validateReceivedMessages()\nAll the messages are validated based on it's contents.\nMessages are set in the mirrornodeclient where this object is created.\nSetting it directly here causes an error on reading messages during a subscription, hence the cemented out line, which I'll remove also", "author": "Nana-EC", "createdAt": "2020-02-03T21:42:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczNjI2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9e20396174869772eebab56c3e0ff1d9b15865cd", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/SubscriptionResponse.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/SubscriptionResponse.java\nindex e929a273e..4f1ec99a4 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/SubscriptionResponse.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/SubscriptionResponse.java\n\n@@ -38,7 +38,6 @@ public class SubscriptionResponse {\n     private Throwable responseError;\n \n     public void handleMirrorConsensusTopicResponse(MirrorConsensusTopicResponse topicResponse) {\n-//        messages.add(topicResponse);\n         String messageAsString = new String(topicResponse.message, StandardCharsets.UTF_8);\n         log.info(\"Received message: \" + messageAsString\n                 + \" consensus timestamp: \" + topicResponse.consensusTimestamp\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczOTgzNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373739834", "bodyText": "This class/feature isn't necessary. If the context fails to load the application wouldn't start", "author": "steven-sheehy", "createdAt": "2020-02-01T00:28:31Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/ContextLoadFeature.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import io.cucumber.java.en.Given;\n+import io.cucumber.junit.platform.engine.Cucumber;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+\n+import com.hedera.mirror.test.e2e.acceptance.config.ClientConnectionConfig;\n+\n+@Cucumber\n+@SpringBootTest\n+public class ContextLoadFeature {", "originalCommit": "e96da7549d6d78969267a5a18a0d6a76455da09f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MjUwMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r374362502", "bodyText": "I actually had to do this as a workaround. @SpringBootTest needs to be on the test classes. However, cucumber doesn't play well with multiple classes setting the application context.\nSo I made this class to set the properties in the context once and then the other cucumber Step files would have it when they used @autowire\nOpen to suggestions of other ways though, I tried doing it in the runner class (AcceptanceTest.java), but the step classes are loaded before that so the config props aren't available.\nI'll see if the Configuration class that creates the Beans gives me a better option", "author": "Nana-EC", "createdAt": "2020-02-03T21:53:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczOTgzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwODIyMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r374508221", "bodyText": "@SpringBootTest needs to be used in one of the Steps as they map to Tests for Cucumber. Moved it to the AccountFeature and got rid of this Feature and method, as well as the overall check", "author": "Nana-EC", "createdAt": "2020-02-04T07:24:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczOTgzNA=="}], "type": "inlineReview", "revised_code": {"commit": "9e20396174869772eebab56c3e0ff1d9b15865cd", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/ContextLoadFeature.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/ContextLoadFeature.java\nindex fa848644a..fc566c566 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/ContextLoadFeature.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/ContextLoadFeature.java\n\n@@ -27,16 +27,16 @@ import io.cucumber.junit.platform.engine.Cucumber;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n \n-import com.hedera.mirror.test.e2e.acceptance.config.ClientConnectionConfig;\n+import com.hedera.mirror.test.e2e.acceptance.config.AcceptanceTestProperties;\n \n @Cucumber\n @SpringBootTest\n public class ContextLoadFeature {\n     @Autowired\n-    protected ClientConnectionConfig clientConnectionConfig;\n+    protected AcceptanceTestProperties acceptanceTestProperties;\n \n     @Given(\"Config context is loaded\")\n     public void getSDKClient() {\n-        assertNotNull(clientConnectionConfig, \"clientConnectionConfig is null\");\n+        assertNotNull(acceptanceTestProperties, \"acceptanceTestProperties is null\");\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0NDUyNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373744525", "bodyText": "Missing fields like adminKey, submitKey (can be same as adminKey), expirationTime, autoRenewAccount, autoRenewPeriod", "author": "steven-sheehy", "createdAt": "2020-02-01T01:04:42Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package com.hedera.mirror.test.e2e.acceptance.client;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicCreateTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicDeleteTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicUpdateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Log4j2\n+@Value\n+public class TopicClient {\n+\n+    private final Client client;\n+    private final List<Instant> recordPublishInstants;\n+\n+    public TopicClient(Client client) {\n+        this.client = client;\n+        recordPublishInstants = new ArrayList<>();\n+    }\n+\n+    public TransactionReceipt createTopic(Ed25519PublicKey adminKey, Ed25519PublicKey submitKey) throws HederaStatusException {\n+\n+        Instant refInstant = Instant.now();\n+        TransactionReceipt transactionReceipt = new ConsensusTopicCreateTransaction()\n+                .setAdminKey(adminKey)\n+                .setSubmitKey(submitKey)\n+//                .setAutoRenewAccountId(AccountId.fromString(\"0.0.2\")) // AUTORENEW_ACCOUNT_NOT_ALLOWED\n+                .setMaxTransactionFee(1_000_000_000)\n+                .setTopicMemo(\"HCS Topic_\" + refInstant)\n+//                .setAutoRenewPeriod(Duration.ofDays(5)) // AUTORENEW_DURATION_NOT_IN_RANGE - 30 * 86400L\n+//                .setNodeAccountId()\n+//                .setTransactionId()\n+//                .setTransactionMemo(\"HCS Topic Creation_\" + refInstant)\n+//                .setTransactionValidDuration(Duration.ofDays(1))\n+                .execute(client)\n+                .getReceipt(client);\n+\n+        ConsensusTopicId topicId = transactionReceipt.getConsensusTopicId();\n+        log.debug(\"Created new topic {}, with TransactionReceipt : {}\", topicId, transactionReceipt);\n+\n+        return transactionReceipt;\n+    }\n+\n+    public TransactionReceipt updateTopic(ConsensusTopicId topicId) throws HederaStatusException {\n+        String newMemo = \"HCS UpdatedTopic__\" + Instant.now().getNano();\n+        TransactionReceipt transactionReceipt = new ConsensusTopicUpdateTransaction()\n+                .setTopicId(topicId)\n+                .setTopicMemo(newMemo)", "originalCommit": "e96da7549d6d78969267a5a18a0d6a76455da09f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM1OTA0OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r374359049", "bodyText": "Not, the case. I was getting sdk errors when I set them to be the same. I wanted to come back to it. Will clear the rest up and come back to this.", "author": "Nana-EC", "createdAt": "2020-02-03T21:46:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0NDUyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk2OTM3OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r374969378", "bodyText": "I've enabled all those that the documentation says is supported now", "author": "Nana-EC", "createdAt": "2020-02-04T22:52:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0NDUyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "1f3888960a1777af70b70ad6d97da08276fcfd25", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java\nindex 09799d9f8..9426d6d6d 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java\n\n@@ -42,12 +42,15 @@ import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n @Value\n public class TopicClient {\n \n+    private final SDKClient sdkClient;\n     private final Client client;\n     private final List<Instant> recordPublishInstants;\n \n-    public TopicClient(Client client) {\n-        this.client = client;\n+    public TopicClient(SDKClient sdkClient) {\n+        this.sdkClient = sdkClient;\n+        client = sdkClient.getClient();\n         recordPublishInstants = new ArrayList<>();\n+        log.debug(\"Creating Topic Client\");\n     }\n \n     public TransactionReceipt createTopic(Ed25519PublicKey adminKey, Ed25519PublicKey submitKey) throws HederaStatusException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0NDcwMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373744700", "bodyText": "There's a lot of commented options that aren't set. These should all be enabled and all fields set", "author": "steven-sheehy", "createdAt": "2020-02-01T01:06:01Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package com.hedera.mirror.test.e2e.acceptance.client;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicCreateTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicDeleteTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicUpdateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Log4j2\n+@Value\n+public class TopicClient {\n+\n+    private final Client client;\n+    private final List<Instant> recordPublishInstants;\n+\n+    public TopicClient(Client client) {\n+        this.client = client;\n+        recordPublishInstants = new ArrayList<>();\n+    }\n+\n+    public TransactionReceipt createTopic(Ed25519PublicKey adminKey, Ed25519PublicKey submitKey) throws HederaStatusException {\n+\n+        Instant refInstant = Instant.now();\n+        TransactionReceipt transactionReceipt = new ConsensusTopicCreateTransaction()\n+                .setAdminKey(adminKey)\n+                .setSubmitKey(submitKey)\n+//                .setAutoRenewAccountId(AccountId.fromString(\"0.0.2\")) // AUTORENEW_ACCOUNT_NOT_ALLOWED", "originalCommit": "e96da7549d6d78969267a5a18a0d6a76455da09f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4MDU4OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r374380588", "bodyText": "There are rules around what you can and cannot set. Since you wanted the MirrorNode tests to focus on mirror node stuff and not test service side stuff keeping it simple means you can't set everything.\nIf we want to be able to set everything then the topic setup needs to account for all the service scenarios.\nI can come back to this if you've changed your mind on keeping it simple", "author": "Nana-EC", "createdAt": "2020-02-03T22:34:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0NDcwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk2OTMwOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r374969308", "bodyText": "I've enabled all those that the documentation says is supported now", "author": "Nana-EC", "createdAt": "2020-02-04T22:52:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0NDcwMA=="}], "type": "inlineReview", "revised_code": {"commit": "1f3888960a1777af70b70ad6d97da08276fcfd25", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java\nindex 09799d9f8..9426d6d6d 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java\n\n@@ -42,12 +42,15 @@ import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n @Value\n public class TopicClient {\n \n+    private final SDKClient sdkClient;\n     private final Client client;\n     private final List<Instant> recordPublishInstants;\n \n-    public TopicClient(Client client) {\n-        this.client = client;\n+    public TopicClient(SDKClient sdkClient) {\n+        this.sdkClient = sdkClient;\n+        client = sdkClient.getClient();\n         recordPublishInstants = new ArrayList<>();\n+        log.debug(\"Creating Topic Client\");\n     }\n \n     public TransactionReceipt createTopic(Ed25519PublicKey adminKey, Ed25519PublicKey submitKey) throws HederaStatusException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NTk3MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373755970", "bodyText": "Now that you have spring autowiring working, it would be more appropriate to make SDKClient, MirrorNodeClient and TopicClient Spring beans and inject them into the features. This would remove the need for User obtained * client checks", "author": "steven-sheehy", "createdAt": "2020-02-01T04:01:26Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java", "diffHunk": "@@ -0,0 +1,301 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.cucumber.junit.platform.engine.Cucumber;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+import com.hedera.hashgraph.sdk.mirror.MirrorConsensusTopicQuery;\n+import com.hedera.mirror.test.e2e.acceptance.client.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.client.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.client.SubscriptionResponse;\n+import com.hedera.mirror.test.e2e.acceptance.client.TopicClient;\n+import com.hedera.mirror.test.e2e.acceptance.config.ClientConnectionConfig;\n+import com.hedera.mirror.test.e2e.acceptance.util.FeatureInputHandler;\n+\n+@Log4j2\n+@Cucumber\n+public class TopicFeature {\n+    int numMessages;\n+    int latency;\n+    MirrorConsensusTopicQuery mirrorConsensusTopicQuery;\n+    SDKClient sdkClient;", "originalCommit": "e96da7549d6d78969267a5a18a0d6a76455da09f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4MDc4MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r374380781", "bodyText": "Working on it.", "author": "Nana-EC", "createdAt": "2020-02-03T22:35:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NTk3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4MzQ1NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r374383454", "bodyText": "Actually doing that would mean a single client shared wouldn't it.\nI was thinking wouldn't it be a valuable test of multiple clients connecting to the MirrorNode instead of one client making all the calls on behalf of multiple tests.\nI believe the Spring ApplicationContext would use a singleton pattern for the DI right, if I did the above suggestion then I'd also want to make it non singleton", "author": "Nana-EC", "createdAt": "2020-02-03T22:42:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NTk3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4NDg4MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r374384880", "bodyText": "Spring has a scope that you set to declare its lifecycle. By default it is singleton but you can set it to prototype to have it created every time.", "author": "steven-sheehy", "createdAt": "2020-02-03T22:45:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NTk3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNzg1MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r374507851", "bodyText": "Got it, and updated test logic with the client as beans", "author": "Nana-EC", "createdAt": "2020-02-04T07:23:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NTk3MA=="}], "type": "inlineReview", "revised_code": {"commit": "012d077b50df1c8a4cf374fc6b33867eac96bc62", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nindex d1469d2b1..32086ec4a 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\n\n@@ -28,7 +28,6 @@ import io.cucumber.java.en.Then;\n import io.cucumber.java.en.When;\n import io.cucumber.junit.platform.engine.Cucumber;\n import java.time.Instant;\n-import java.util.ArrayList;\n import java.util.List;\n import lombok.extern.log4j.Log4j2;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjczNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373756736", "bodyText": "start date", "author": "steven-sheehy", "createdAt": "2020-02-01T04:20:50Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java", "diffHunk": "@@ -0,0 +1,301 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.cucumber.junit.platform.engine.Cucumber;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+import com.hedera.hashgraph.sdk.mirror.MirrorConsensusTopicQuery;\n+import com.hedera.mirror.test.e2e.acceptance.client.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.client.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.client.SubscriptionResponse;\n+import com.hedera.mirror.test.e2e.acceptance.client.TopicClient;\n+import com.hedera.mirror.test.e2e.acceptance.config.ClientConnectionConfig;\n+import com.hedera.mirror.test.e2e.acceptance.util.FeatureInputHandler;\n+\n+@Log4j2\n+@Cucumber\n+public class TopicFeature {\n+    int numMessages;\n+    int latency;\n+    MirrorConsensusTopicQuery mirrorConsensusTopicQuery;\n+    SDKClient sdkClient;\n+    MirrorNodeClient mirrorClient;\n+    TopicClient topicClient;\n+    ConsensusTopicId consensusTopicId;\n+    SubscriptionResponse subscriptionResponse;\n+    List<TransactionReceipt> transactionReceipts;\n+    Ed25519PrivateKey submitKey;\n+    Instant testInstantReference;\n+\n+    @Autowired\n+    private ClientConnectionConfig clientConnectionConfig;\n+\n+    @Given(\"User obtained SDK client\")\n+    public void getSDKClient() {\n+        if (sdkClient == null) {\n+            sdkClient = new SDKClient(clientConnectionConfig);\n+            topicClient = new TopicClient(sdkClient.getClient());\n+        }\n+\n+        testInstantReference = Instant.now();\n+    }\n+\n+    @Given(\"User obtained Mirror Node Consensus client\")\n+    public void getMirrorNodeClient() {\n+        if (mirrorClient == null) {\n+            mirrorClient = new MirrorNodeClient(clientConnectionConfig);\n+        }\n+    }\n+\n+    @Given(\"I attempt to create a new topic id\")\n+    public void createNewTopic() throws HederaStatusException {\n+        if (consensusTopicId == null) {\n+            topicClient = new TopicClient(sdkClient.getClient());\n+            transactionReceipts = new ArrayList();\n+\n+            submitKey = Ed25519PrivateKey.generate();\n+            Ed25519PublicKey submitPublicKey = submitKey.publicKey;\n+            log.debug(\"Topic creation PrivateKey : {}, PublicKey : {}\", submitKey, submitPublicKey);\n+\n+            TransactionReceipt receipt = topicClient.createTopic(sdkClient.getPayerPublicKey(), submitPublicKey);\n+            consensusTopicId = receipt.getConsensusTopicId();\n+            mirrorConsensusTopicQuery = new MirrorConsensusTopicQuery()\n+                    .setTopicId(consensusTopicId)\n+                    .setStartTime(Instant.EPOCH);\n+\n+            transactionReceipts.add(receipt);\n+        }\n+    }\n+\n+    @Given(\"I provide a topic id {string}\")\n+    public void setTopicIdParam(String topicId) {\n+        mirrorConsensusTopicQuery = new MirrorConsensusTopicQuery();\n+        if (!topicId.isEmpty()) {\n+            consensusTopicId = new ConsensusTopicId(0, 0, Long.parseLong(topicId));\n+            mirrorConsensusTopicQuery.setTopicId(consensusTopicId);\n+        }\n+\n+        numMessages = 0;\n+    }\n+\n+    @Given(\"I provide a number of messages {int} I want to receive\")\n+    public void setTopicListenParams(int numMessages) {\n+        this.numMessages = numMessages;\n+    }\n+\n+    @Given(\"I provide a number of messages {int} I want to receive within {int} seconds\")\n+    public void setTopicListenParams(int numMessages, int latency) {\n+        this.numMessages = numMessages;\n+        this.latency = latency;\n+    }\n+\n+    @Given(\"I provide a date {string} and a number of messages {int} I want to receive\")", "originalCommit": "e96da7549d6d78969267a5a18a0d6a76455da09f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkwNzU0Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373907543", "bodyText": "Changed", "author": "Nana-EC", "createdAt": "2020-02-03T03:10:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjczNg=="}], "type": "inlineReview", "revised_code": {"commit": "012d077b50df1c8a4cf374fc6b33867eac96bc62", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nindex d1469d2b1..32086ec4a 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\n\n@@ -28,7 +28,6 @@ import io.cucumber.java.en.Then;\n import io.cucumber.java.en.When;\n import io.cucumber.junit.platform.engine.Cucumber;\n import java.time.Instant;\n-import java.util.ArrayList;\n import java.util.List;\n import lombok.extern.log4j.Log4j2;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjgwMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373756800", "bodyText": "Not used", "author": "steven-sheehy", "createdAt": "2020-02-01T04:21:56Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java", "diffHunk": "@@ -0,0 +1,301 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.cucumber.junit.platform.engine.Cucumber;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+import com.hedera.hashgraph.sdk.mirror.MirrorConsensusTopicQuery;\n+import com.hedera.mirror.test.e2e.acceptance.client.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.client.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.client.SubscriptionResponse;\n+import com.hedera.mirror.test.e2e.acceptance.client.TopicClient;\n+import com.hedera.mirror.test.e2e.acceptance.config.ClientConnectionConfig;\n+import com.hedera.mirror.test.e2e.acceptance.util.FeatureInputHandler;\n+\n+@Log4j2\n+@Cucumber\n+public class TopicFeature {\n+    int numMessages;\n+    int latency;\n+    MirrorConsensusTopicQuery mirrorConsensusTopicQuery;\n+    SDKClient sdkClient;\n+    MirrorNodeClient mirrorClient;\n+    TopicClient topicClient;\n+    ConsensusTopicId consensusTopicId;\n+    SubscriptionResponse subscriptionResponse;\n+    List<TransactionReceipt> transactionReceipts;\n+    Ed25519PrivateKey submitKey;\n+    Instant testInstantReference;\n+\n+    @Autowired\n+    private ClientConnectionConfig clientConnectionConfig;\n+\n+    @Given(\"User obtained SDK client\")\n+    public void getSDKClient() {\n+        if (sdkClient == null) {\n+            sdkClient = new SDKClient(clientConnectionConfig);\n+            topicClient = new TopicClient(sdkClient.getClient());\n+        }\n+\n+        testInstantReference = Instant.now();\n+    }\n+\n+    @Given(\"User obtained Mirror Node Consensus client\")\n+    public void getMirrorNodeClient() {\n+        if (mirrorClient == null) {\n+            mirrorClient = new MirrorNodeClient(clientConnectionConfig);\n+        }\n+    }\n+\n+    @Given(\"I attempt to create a new topic id\")\n+    public void createNewTopic() throws HederaStatusException {\n+        if (consensusTopicId == null) {\n+            topicClient = new TopicClient(sdkClient.getClient());\n+            transactionReceipts = new ArrayList();\n+\n+            submitKey = Ed25519PrivateKey.generate();\n+            Ed25519PublicKey submitPublicKey = submitKey.publicKey;\n+            log.debug(\"Topic creation PrivateKey : {}, PublicKey : {}\", submitKey, submitPublicKey);\n+\n+            TransactionReceipt receipt = topicClient.createTopic(sdkClient.getPayerPublicKey(), submitPublicKey);\n+            consensusTopicId = receipt.getConsensusTopicId();\n+            mirrorConsensusTopicQuery = new MirrorConsensusTopicQuery()\n+                    .setTopicId(consensusTopicId)\n+                    .setStartTime(Instant.EPOCH);\n+\n+            transactionReceipts.add(receipt);\n+        }\n+    }\n+\n+    @Given(\"I provide a topic id {string}\")\n+    public void setTopicIdParam(String topicId) {\n+        mirrorConsensusTopicQuery = new MirrorConsensusTopicQuery();\n+        if (!topicId.isEmpty()) {\n+            consensusTopicId = new ConsensusTopicId(0, 0, Long.parseLong(topicId));\n+            mirrorConsensusTopicQuery.setTopicId(consensusTopicId);\n+        }\n+\n+        numMessages = 0;\n+    }\n+\n+    @Given(\"I provide a number of messages {int} I want to receive\")\n+    public void setTopicListenParams(int numMessages) {\n+        this.numMessages = numMessages;\n+    }\n+\n+    @Given(\"I provide a number of messages {int} I want to receive within {int} seconds\")\n+    public void setTopicListenParams(int numMessages, int latency) {\n+        this.numMessages = numMessages;\n+        this.latency = latency;\n+    }\n+\n+    @Given(\"I provide a date {string} and a number of messages {int} I want to receive\")\n+    public void setTopicListenParams(String startDate, int numMessages) {\n+        this.numMessages = numMessages;\n+\n+        Instant startTime = FeatureInputHandler.messageQueryDateStringToInstant(startDate, testInstantReference);\n+        log.trace(\"Subscribe mirrorConsensusTopicQuery : StartTime : {}\", startTime);\n+\n+        mirrorConsensusTopicQuery\n+                .setStartTime(startTime);\n+    }\n+\n+    @Given(\"I provide a startDate {string} and endDate {string} and a number of messages {int} I want to receive\")\n+    public void setTopicListenParams(String startDate, String endDate, int numMessages) {\n+        this.numMessages = numMessages;\n+\n+        Instant startTime = FeatureInputHandler.messageQueryDateStringToInstant(startDate, testInstantReference);\n+        Instant endTime = FeatureInputHandler.messageQueryDateStringToInstant(endDate, Instant.now());\n+        log.trace(\"Subscribe mirrorConsensusTopicQuery : StartTime : {}. EndTime : {}\", startTime, endTime);\n+\n+        mirrorConsensusTopicQuery\n+                .setStartTime(startTime)\n+                .setEndTime(endTime);\n+    }\n+\n+    @Given(\"I provide a startSequence {int} and endSequence {int} and a number of messages {int} I want to receive\")\n+    public void setTopicListenParams(int startSequence, int endSequence, int numMessages) {\n+        this.numMessages = numMessages;\n+\n+        Instant startTime = topicClient.getInstantOfPublishedMessage(startSequence - 1).minusMillis(10);\n+        Instant endTime = topicClient.getInstantOfPublishedMessage(endSequence - 1).plusMillis(10);\n+        log.trace(\"Subscribe mirrorConsensusTopicQuery : StartTime : {}. EndTime : {}\", startTime, endTime);\n+\n+        mirrorConsensusTopicQuery\n+                .setStartTime(startTime)\n+                .setEndTime(endTime);\n+    }\n+\n+    @Given(\"I provide a startDate {string} and endDate {string} and a limit of {int} messages I want to receive\")\n+    public void setTopicListenParamswLimit(String startDate, String endDate, int limit) {\n+        numMessages = limit;\n+\n+        mirrorConsensusTopicQuery\n+                .setStartTime(FeatureInputHandler.messageQueryDateStringToInstant(startDate))\n+                .setEndTime(FeatureInputHandler.messageQueryDateStringToInstant(endDate))\n+                .setLimit(limit);\n+    }\n+\n+    @When(\"{long} milliseconds pass by\")", "originalCommit": "e96da7549d6d78969267a5a18a0d6a76455da09f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkwNzUyOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373907528", "bodyText": "Yeah, not applicable logic I was considering.\nRemoved", "author": "Nana-EC", "createdAt": "2020-02-03T03:10:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjgwMA=="}], "type": "inlineReview", "revised_code": {"commit": "012d077b50df1c8a4cf374fc6b33867eac96bc62", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nindex d1469d2b1..32086ec4a 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\n\n@@ -28,7 +28,6 @@ import io.cucumber.java.en.Then;\n import io.cucumber.java.en.When;\n import io.cucumber.junit.platform.engine.Cucumber;\n import java.time.Instant;\n-import java.util.ArrayList;\n import java.util.List;\n import lombok.extern.log4j.Log4j2;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NzA1MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373757051", "bodyText": "This is overwriting the transactionsRecepts list, so it is not verifying the topic create receipt. Recommend you just remove transactionsRecepts and the network should confirm valid transaction receipts for this operation clause and just validate receipts inline inside each method where the transaction receipt is created. You should validate the create was successful before moving on to publish anyway instead of validating all at the end.", "author": "steven-sheehy", "createdAt": "2020-02-01T04:28:11Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java", "diffHunk": "@@ -0,0 +1,301 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.cucumber.junit.platform.engine.Cucumber;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+import com.hedera.hashgraph.sdk.mirror.MirrorConsensusTopicQuery;\n+import com.hedera.mirror.test.e2e.acceptance.client.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.client.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.client.SubscriptionResponse;\n+import com.hedera.mirror.test.e2e.acceptance.client.TopicClient;\n+import com.hedera.mirror.test.e2e.acceptance.config.ClientConnectionConfig;\n+import com.hedera.mirror.test.e2e.acceptance.util.FeatureInputHandler;\n+\n+@Log4j2\n+@Cucumber\n+public class TopicFeature {\n+    int numMessages;\n+    int latency;\n+    MirrorConsensusTopicQuery mirrorConsensusTopicQuery;\n+    SDKClient sdkClient;\n+    MirrorNodeClient mirrorClient;\n+    TopicClient topicClient;\n+    ConsensusTopicId consensusTopicId;\n+    SubscriptionResponse subscriptionResponse;\n+    List<TransactionReceipt> transactionReceipts;\n+    Ed25519PrivateKey submitKey;\n+    Instant testInstantReference;\n+\n+    @Autowired\n+    private ClientConnectionConfig clientConnectionConfig;\n+\n+    @Given(\"User obtained SDK client\")\n+    public void getSDKClient() {\n+        if (sdkClient == null) {\n+            sdkClient = new SDKClient(clientConnectionConfig);\n+            topicClient = new TopicClient(sdkClient.getClient());\n+        }\n+\n+        testInstantReference = Instant.now();\n+    }\n+\n+    @Given(\"User obtained Mirror Node Consensus client\")\n+    public void getMirrorNodeClient() {\n+        if (mirrorClient == null) {\n+            mirrorClient = new MirrorNodeClient(clientConnectionConfig);\n+        }\n+    }\n+\n+    @Given(\"I attempt to create a new topic id\")\n+    public void createNewTopic() throws HederaStatusException {\n+        if (consensusTopicId == null) {\n+            topicClient = new TopicClient(sdkClient.getClient());\n+            transactionReceipts = new ArrayList();\n+\n+            submitKey = Ed25519PrivateKey.generate();\n+            Ed25519PublicKey submitPublicKey = submitKey.publicKey;\n+            log.debug(\"Topic creation PrivateKey : {}, PublicKey : {}\", submitKey, submitPublicKey);\n+\n+            TransactionReceipt receipt = topicClient.createTopic(sdkClient.getPayerPublicKey(), submitPublicKey);\n+            consensusTopicId = receipt.getConsensusTopicId();\n+            mirrorConsensusTopicQuery = new MirrorConsensusTopicQuery()\n+                    .setTopicId(consensusTopicId)\n+                    .setStartTime(Instant.EPOCH);\n+\n+            transactionReceipts.add(receipt);\n+        }\n+    }\n+\n+    @Given(\"I provide a topic id {string}\")\n+    public void setTopicIdParam(String topicId) {\n+        mirrorConsensusTopicQuery = new MirrorConsensusTopicQuery();\n+        if (!topicId.isEmpty()) {\n+            consensusTopicId = new ConsensusTopicId(0, 0, Long.parseLong(topicId));\n+            mirrorConsensusTopicQuery.setTopicId(consensusTopicId);\n+        }\n+\n+        numMessages = 0;\n+    }\n+\n+    @Given(\"I provide a number of messages {int} I want to receive\")\n+    public void setTopicListenParams(int numMessages) {\n+        this.numMessages = numMessages;\n+    }\n+\n+    @Given(\"I provide a number of messages {int} I want to receive within {int} seconds\")\n+    public void setTopicListenParams(int numMessages, int latency) {\n+        this.numMessages = numMessages;\n+        this.latency = latency;\n+    }\n+\n+    @Given(\"I provide a date {string} and a number of messages {int} I want to receive\")\n+    public void setTopicListenParams(String startDate, int numMessages) {\n+        this.numMessages = numMessages;\n+\n+        Instant startTime = FeatureInputHandler.messageQueryDateStringToInstant(startDate, testInstantReference);\n+        log.trace(\"Subscribe mirrorConsensusTopicQuery : StartTime : {}\", startTime);\n+\n+        mirrorConsensusTopicQuery\n+                .setStartTime(startTime);\n+    }\n+\n+    @Given(\"I provide a startDate {string} and endDate {string} and a number of messages {int} I want to receive\")\n+    public void setTopicListenParams(String startDate, String endDate, int numMessages) {\n+        this.numMessages = numMessages;\n+\n+        Instant startTime = FeatureInputHandler.messageQueryDateStringToInstant(startDate, testInstantReference);\n+        Instant endTime = FeatureInputHandler.messageQueryDateStringToInstant(endDate, Instant.now());\n+        log.trace(\"Subscribe mirrorConsensusTopicQuery : StartTime : {}. EndTime : {}\", startTime, endTime);\n+\n+        mirrorConsensusTopicQuery\n+                .setStartTime(startTime)\n+                .setEndTime(endTime);\n+    }\n+\n+    @Given(\"I provide a startSequence {int} and endSequence {int} and a number of messages {int} I want to receive\")\n+    public void setTopicListenParams(int startSequence, int endSequence, int numMessages) {\n+        this.numMessages = numMessages;\n+\n+        Instant startTime = topicClient.getInstantOfPublishedMessage(startSequence - 1).minusMillis(10);\n+        Instant endTime = topicClient.getInstantOfPublishedMessage(endSequence - 1).plusMillis(10);\n+        log.trace(\"Subscribe mirrorConsensusTopicQuery : StartTime : {}. EndTime : {}\", startTime, endTime);\n+\n+        mirrorConsensusTopicQuery\n+                .setStartTime(startTime)\n+                .setEndTime(endTime);\n+    }\n+\n+    @Given(\"I provide a startDate {string} and endDate {string} and a limit of {int} messages I want to receive\")\n+    public void setTopicListenParamswLimit(String startDate, String endDate, int limit) {\n+        numMessages = limit;\n+\n+        mirrorConsensusTopicQuery\n+                .setStartTime(FeatureInputHandler.messageQueryDateStringToInstant(startDate))\n+                .setEndTime(FeatureInputHandler.messageQueryDateStringToInstant(endDate))\n+                .setLimit(limit);\n+    }\n+\n+    @When(\"{long} milliseconds pass by\")\n+    public void waitSeconds(long milliSecs) throws InterruptedException {\n+        log.trace(\"Waiting {} seconds\", milliSecs);\n+        Thread.sleep(milliSecs, 0);\n+    }\n+\n+    @When(\"I attempt to update an existing topic\")\n+    public void updateTopic() throws HederaStatusException {\n+        TopicClient topicClient = new TopicClient(sdkClient.getClient());\n+        transactionReceipts = new ArrayList();\n+        transactionReceipts.add(topicClient.updateTopic(consensusTopicId));\n+    }\n+\n+    @When(\"I subscribe to the topic\")\n+    public void verifySubscriptionChannelConnection() throws Throwable {\n+        subscriptionResponse = mirrorClient.subscribeToTopic(mirrorConsensusTopicQuery);\n+        assertNotNull(subscriptionResponse);\n+    }\n+\n+    @When(\"I publish {int} messages\")\n+    public void verifyTopicMessagePublish(int messageCount) throws InterruptedException, HederaStatusException {\n+        numMessages = messageCount;\n+        transactionReceipts = topicClient", "originalCommit": "e96da7549d6d78969267a5a18a0d6a76455da09f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMjg5OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373912898", "bodyText": "Makes sense.\nThe current separation allowed for future test to get more detailed in their transactionReceipt validation where it makes sense, but we can always add that it if and when it becomes valuable.\nRemoved the method and I validate receipts in the method.", "author": "Nana-EC", "createdAt": "2020-02-03T03:52:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NzA1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "012d077b50df1c8a4cf374fc6b33867eac96bc62", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\nindex d1469d2b1..32086ec4a 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java\n\n@@ -28,7 +28,6 @@ import io.cucumber.java.en.Then;\n import io.cucumber.java.en.When;\n import io.cucumber.junit.platform.engine.Cucumber;\n import java.time.Instant;\n-import java.util.ArrayList;\n import java.util.List;\n import lombok.extern.log4j.Log4j2;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"oid": "012d077b50df1c8a4cf374fc6b33867eac96bc62", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/012d077b50df1c8a4cf374fc6b33867eac96bc62", "message": "Cleaned up a bit based on pr feedback\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-02-03T03:55:00Z", "type": "commit"}, {"oid": "361e9b849de1a23caace5e0616a42187925cf169", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/361e9b849de1a23caace5e0616a42187925cf169", "message": "Merge branch 'master' into hcsbddtests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-02-03T03:55:25Z", "type": "commit"}, {"oid": "b14e0ec69609e0c2397b3b57bd6e748096df8e1f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b14e0ec69609e0c2397b3b57bd6e748096df8e1f", "message": "Added workaround for surefire failure on non active profile. Also updated README\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-02-03T14:57:35Z", "type": "commit"}, {"oid": "9e20396174869772eebab56c3e0ff1d9b15865cd", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9e20396174869772eebab56c3e0ff1d9b15865cd", "message": "Addressed feedback around  naming and updated README\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-02-03T22:29:36Z", "type": "commit"}, {"oid": "df5f83aa10adef28c81d41f818b103bb8e237827", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/df5f83aa10adef28c81d41f818b103bb8e237827", "message": "Added validator logic to properties\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-02-04T05:41:57Z", "type": "commit"}, {"oid": "1f3888960a1777af70b70ad6d97da08276fcfd25", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1f3888960a1777af70b70ad6d97da08276fcfd25", "message": "Made clients spring beans for easy sharing and creation\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-02-04T07:22:36Z", "type": "commit"}, {"oid": "6ee6e056bae6af0302fd98758b6eae9e1240116e", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6ee6e056bae6af0302fd98758b6eae9e1240116e", "message": "Added expiration time set to topic update\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-02-04T19:12:37Z", "type": "commit"}, {"oid": "902502b0ea9a7809d72dc504139380984dec9580", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/902502b0ea9a7809d72dc504139380984dec9580", "message": "Updated create and update topic to support more properties\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-02-04T22:50:26Z", "type": "commit"}, {"oid": "f5861e76dd320aa520fec80a69d5f63fbff28692", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f5861e76dd320aa520fec80a69d5f63fbff28692", "message": "Merge branch 'master' into hcsbddtests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-02-06T06:19:16Z", "type": "commit"}]}