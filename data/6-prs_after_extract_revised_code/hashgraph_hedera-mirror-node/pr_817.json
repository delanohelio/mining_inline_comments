{"pr_number": 817, "pr_title": "Remove foreign keys on entity id", "pr_createdAt": "2020-06-09T04:12:16Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/817", "timeline": [{"oid": "ee8e5648a0bdccedb744fb7d3f4dadf5b6a11778", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ee8e5648a0bdccedb744fb7d3f4dadf5b6a11778", "message": "Denormalize entities\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-09T04:13:10Z", "type": "forcePushed"}, {"oid": "74bf388ff658b574abe93b50e3d9f8903dbb004f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/74bf388ff658b574abe93b50e3d9f8903dbb004f", "message": "Denormalize entities\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-09T20:18:48Z", "type": "commit"}, {"oid": "80302393cfeef138172b427684409af01da36012", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/80302393cfeef138172b427684409af01da36012", "message": "cleanups\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-09T20:18:49Z", "type": "commit"}, {"oid": "ccfd2437dd5efea39d6b3783e9920fffb0310405", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ccfd2437dd5efea39d6b3783e9920fffb0310405", "message": "optimize migration\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-09T20:18:49Z", "type": "commit"}, {"oid": "9a5ed4c3b2f9f75abde9b4be75d173fc996b8352", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9a5ed4c3b2f9f75abde9b4be75d173fc996b8352", "message": "add getProxyAccount and getAutoRenewAccount to TransactionHandler\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-09T20:18:49Z", "type": "commit"}, {"oid": "9a5ed4c3b2f9f75abde9b4be75d173fc996b8352", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9a5ed4c3b2f9f75abde9b4be75d173fc996b8352", "message": "add getProxyAccount and getAutoRenewAccount to TransactionHandler\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-09T20:18:49Z", "type": "forcePushed"}, {"oid": "723e4bbdb76d487b297ca211dd632e40299bdd8c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/723e4bbdb76d487b297ca211dd632e40299bdd8c", "message": "migrate txns using new table\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-09T23:37:50Z", "type": "commit"}, {"oid": "6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475", "message": "Use encoded ids in js to remove unnecessary joins.", "committedDate": "2020-06-10T02:56:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM3NTQ4Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438375487", "bodyText": "We should later convert this id to EntityId", "author": "steven-sheehy", "createdAt": "2020-06-10T20:00:34Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Entities.java", "diffHunk": "@@ -38,9 +36,7 @@\n @Table(name = \"t_entities\")\n @ToString(exclude = {\"key\", \"submitKey\"})\n public class Entities {\n-\n     @Id\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\n     private Long id;", "originalCommit": "6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQwMTU2NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438401565", "bodyText": "We should be using JPA Attribute Converters to automatically do the conversion for these two fields.", "author": "steven-sheehy", "createdAt": "2020-06-10T20:52:38Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Entities.java", "diffHunk": "@@ -85,6 +80,14 @@ public void setKey(byte[] key) {\n     }\n \n     public EntityId toEntityId() {\n-        return new EntityId(id, entityShard, entityRealm, entityNum, entityTypeId);\n+        return new EntityId(entityShard, entityRealm, entityNum, entityTypeId);\n+    }\n+\n+    public void setAutoRenewAccount(EntityId autoRenewAccount) {\n+        autoRenewAccountId = autoRenewAccount.getId();", "originalCommit": "6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1NjY0Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438456643", "bodyText": "sounds good.\nAdded decode function.\nHad also added converter, however changing these two fields snowball 10+ changes in tests. Let's do as a followup. Removed converter from this change since it'll be dead code as part of this change.", "author": "apeksharma", "createdAt": "2020-06-10T23:12:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQwMTU2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2MDMxMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r439060311", "bodyText": "Done in #824", "author": "apeksharma", "createdAt": "2020-06-11T20:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQwMTU2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQwMjA5Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438402092", "bodyText": "Same comment. Use JPA Attribute Converter", "author": "steven-sheehy", "createdAt": "2020-06-10T20:53:44Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Transaction.java", "diffHunk": "@@ -73,9 +66,16 @@\n \n     private byte[] transactionBytes;\n \n-    // Helper to avoid having to update a 100 places in tests\n-    public Long getEntityId() {\n-        return entity != null ? entity.getId() : null;\n+    public void setEntity(EntityId entity) {", "originalCommit": "6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1Njc1Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438456757", "bodyText": "leaving above one unresolved.", "author": "apeksharma", "createdAt": "2020-06-10T23:13:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQwMjA5Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxMzQ3OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438413479", "bodyText": "There's probably a ton of duplicate entities inserted as a result of this change especially for node and treasury IDs that might slow things down a bit. Would definitely be better to batch this in a list or use JPA/transactions to batch.", "author": "steven-sheehy", "createdAt": "2020-06-10T21:17:19Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/sql/SqlEntityListener.java", "diffHunk": "@@ -217,6 +225,20 @@ public void onTransaction(Transaction transaction) throws ImporterException {\n         }\n     }\n \n+    @Override\n+    public void onEntityId(EntityId entityId) throws ImporterException {\n+        try {\n+            sqlInsertEntityId.setLong(F_ENTITY_ID.ID.ordinal(), entityId.getId());", "originalCommit": "6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2NTc1Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438465757", "bodyText": "right. Planned to do it with exploring optimization on t_ctl table.\nCreated #820 for both which will be followup of this PR.", "author": "apeksharma", "createdAt": "2020-06-10T23:43:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxMzQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2MDY5OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r439060699", "bodyText": "Done in #824", "author": "apeksharma", "createdAt": "2020-06-11T20:44:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxMzQ3OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxNDYyMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438414622", "bodyText": "Since you'll have to pass this entity to EntityListener soon anyway, this suggests that EntityListener.onEntityId(EntityId) should really be EntityListener.onEntity(Entities) to be reusable by both.", "author": "steven-sheehy", "createdAt": "2020-06-10T21:19:58Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -323,30 +336,27 @@ private void insertContractResults(\n     }\n \n     /**\n+     * @param entityId entity to be updated. Should not be null.\n      * @return entity associated with the transaction. Entity is guaranteed to be persisted in repo.\n      */\n-    private Entities getEntity(\n-            RecordItem recordItem, TransactionHandler transactionHandler, EntityId entityId, boolean isSuccessful) {\n-        // Irrespective of transaction failure/success, if entityId is not null, it will be inserted into repo since:\n-        //   (1) it is guaranteed to be valid entity on network (validated to exist in pre-consensus checks)\n-        //   (2) fk_cud_entity_id is foreign key in t_transactions\n-        //\n-        // Additionally, if transaction is successful:\n-        // - Fields of 'entity' will be updated.\n-        // - proxyAccountId/autoRenewAccountId: If present, the account's id are looked up (from big cache) or created\n-        //   immediately in TransactionHandler.updateEntity(..).\n-        if (transactionHandler.updatesEntity() && isSuccessful && entityId != null) {\n-            Entities entity = entityRepository.findByPrimaryKey(\n-                    entityId.getShardNum(), entityId.getRealmNum(), entityId.getEntityNum())\n-                    .orElseGet(entityId::toEntity);\n-            transactionHandler.updateEntity(entity, recordItem);\n-            return entityRepository.save(entity);\n-        } else if (entityId != null) {\n-            Entities entity = entityId.toEntity();\n-            entity.setId(entityRepository.lookupOrCreateId(entityId)); // look up in big cache\n-            return entity;\n+    private void updateEntity(\n+            RecordItem recordItem, TransactionHandler transactionHandler, EntityId entityId) {\n+        // TODO: remove lookup and batch this update with rest of the db operations. Options: upsert.\n+        Entities entity = entityRepository.findById(entityId.getId())\n+                .orElseGet(entityId::toEntity);\n+        transactionHandler.updateEntity(entity, recordItem);\n+        EntityId autoRenewAccount = transactionHandler.getAutoRenewAccount(recordItem);\n+        if (autoRenewAccount != null) {\n+            entityListener.onEntityId(autoRenewAccount);\n+            entity.setAutoRenewAccount(autoRenewAccount);\n+        }\n+        // Stream contains transactions with proxyAccountID explicitly set to '0.0.0'. However it's not a valid entity,\n+        // so no need to persist it to repo.\n+        EntityId proxyAccount = transactionHandler.getProxyAccount(recordItem);\n+        if (proxyAccount != null) {\n+            entityListener.onEntityId(proxyAccount);\n+            entity.setProxyAccount(proxyAccount);\n         }\n-        // else leave tx.entity null\n-        return null;\n+        entityRepository.save(entity);", "originalCommit": "6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1ODU2Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438458562", "bodyText": "onEntity was what i added first. But then i wasn't sure if two cases will be satisfiable by single fn in EntityListener\n\ninsert .... do nothing if exists : for proxy acc and auto renew acc\nupdate ... : for entity updates\n\nDecided to add specific fn for the insert... case being added in this PR. We'll definitely share the two if possible. Let's see when the second one is migrated.", "author": "apeksharma", "createdAt": "2020-06-10T23:19:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxNDYyMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyNDczNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438424735", "bodyText": "You don't need the @Query anymore as it overrides the parent method and just adds caching.", "author": "steven-sheehy", "createdAt": "2020-06-10T21:42:26Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityRepository.java", "diffHunk": "@@ -29,27 +29,15 @@\n \n import com.hedera.mirror.importer.config.CacheConfiguration;\n import com.hedera.mirror.importer.domain.Entities;\n-import com.hedera.mirror.importer.domain.EntityId;\n \n @CacheConfig(cacheNames = \"entities\", cacheManager = CacheConfiguration.EXPIRE_AFTER_30M)\n-public interface EntityRepository extends PagingAndSortingRepository<Entities, Long>, EntityRepositoryCustom {\n+public interface EntityRepository extends PagingAndSortingRepository<Entities, Long> {\n \n-    @Cacheable(key = \"{#p0, #p1, #p2}\", sync = true)\n-    @Query(\"from Entities where entityShard = ?1 and entityRealm = ?2 and entityNum = ?3\")\n-    Optional<Entities> findByPrimaryKey(long entityShard, long entityRealm, long entityNum);\n+    @Cacheable(key = \"{#p0}\", sync = true)\n+    @Query(\"from Entities where id = ?1\")", "originalCommit": "6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "487486fe734991bf4d049a9be6eb019186e9f5f3", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityRepository.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityRepository.java\nindex 1f20f03b3..42aff6b70 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityRepository.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityRepository.java\n\n@@ -24,7 +24,6 @@ import java.util.Optional;\n import org.springframework.cache.annotation.CacheConfig;\n import org.springframework.cache.annotation.CachePut;\n import org.springframework.cache.annotation.Cacheable;\n-import org.springframework.data.jpa.repository.Query;\n import org.springframework.data.repository.PagingAndSortingRepository;\n \n import com.hedera.mirror.importer.config.CacheConfiguration;\n"}}, {"oid": "7b7447370d46ef75db96d5fcc53c7415f797eed7", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7b7447370d46ef75db96d5fcc53c7415f797eed7", "message": "Use encoded ids in js to remove unnecessary joins.\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-10T23:51:14Z", "type": "commit"}, {"oid": "c5bfc0331a0f7290e655491348b294021b545f17", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c5bfc0331a0f7290e655491348b294021b545f17", "message": "add decode fn for entity id\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-10T23:51:17Z", "type": "commit"}, {"oid": "487486fe734991bf4d049a9be6eb019186e9f5f3", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/487486fe734991bf4d049a9be6eb019186e9f5f3", "message": "address review comments\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-10T23:51:17Z", "type": "commit"}, {"oid": "487486fe734991bf4d049a9be6eb019186e9f5f3", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/487486fe734991bf4d049a9be6eb019186e9f5f3", "message": "address review comments\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-10T23:51:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyNTY4Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438925683", "bodyText": "q: Do we have protection from negative shard, realm and num values?\nI think we do since contents are from record file but if not you should add coverage for negative longs so we at least capture the expected behaviour in case of bugs", "author": "Nana-EC", "createdAt": "2020-06-11T16:43:46Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/util/EntityIdEndecTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.hedera.mirror.importer.util;\n+\n+import static com.hedera.mirror.importer.domain.EntityTypeEnum.ACCOUNT;\n+import static com.hedera.mirror.importer.util.EntityIdEndec.NUM_BITS;\n+import static com.hedera.mirror.importer.util.EntityIdEndec.REALM_BITS;\n+import static com.hedera.mirror.importer.util.EntityIdEndec.SHARD_BITS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+\n+class EntityIdEndecTest {", "originalCommit": "487486fe734991bf4d049a9be6eb019186e9f5f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA3MjI3MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r439072271", "bodyText": "not sure. added checks for it in #824", "author": "apeksharma", "createdAt": "2020-06-11T21:09:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyNTY4Mw=="}], "type": "inlineReview", "revised_code": null}]}