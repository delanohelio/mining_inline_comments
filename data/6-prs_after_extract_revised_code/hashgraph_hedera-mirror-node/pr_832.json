{"pr_number": 832, "pr_title": "Events downloader", "pr_createdAt": "2020-06-16T01:35:51Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/832", "timeline": [{"oid": "185c45647a793a6a47733eacaa84f0c491021a20", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/185c45647a793a6a47733eacaa84f0c491021a20", "message": "Events downloader\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-16T01:34:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyOTU2Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r441229563", "bodyText": "moved tests from RecordFileDownloaderTest to here.", "author": "apeksharma", "createdAt": "2020-06-17T01:29:22Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java", "diffHunk": "@@ -153,31 +160,44 @@ protected void assertValidFiles(List<String> filenames) throws Exception {\n                 .containsAll(filenames);\n     }\n \n-    protected void overwriteOnDownloadHelper(String fileName1, String fileName2, ApplicationStatusCode key)\n-            throws Exception {\n+    protected void testMaxDownloadItemsReached(String filename) throws Exception {\n         fileCopier.copy();\n         downloader.download();\n-        verify(applicationStatusRepository).updateStatusValue(key, fileName1);\n-        verify(applicationStatusRepository).updateStatusValue(key, fileName2);\n-        assertValidFiles(List.of(fileName1, fileName2));\n+        assertValidFiles(List.of(filename));\n+    }\n \n-        reset(applicationStatusRepository);\n-        // Corrupt the downloaded signatures to test that they get overwritten by good ones on re-download.\n-        Files.walk(downloaderProperties.getSignaturesPath()).filter(this::isSigFile)\n-                .forEach(AbstractDownloaderTest::corruptFile);\n-        // fileName1 will be used to calculate marker for list request. mockS3 also returns back the marker in the\n-        // results. This is unlike AWS S3 which does not return back the marker.\n-        doReturn(fileName1).when(applicationStatusRepository).findByStatusCode(key);\n+    @Test", "originalCommit": "977e0df2ca46a0e04ef30cdc56bd2aead9d6a42c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyOTY5Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r441229697", "bodyText": "moved here from RecordFileDownloaderTest", "author": "apeksharma", "createdAt": "2020-06-17T01:29:50Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractLinkedStreamDownloaderTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.hedera.mirror.importer.downloader;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.time.Instant;\n+import java.util.List;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+// Common tests for streams (record and events) which are linked by previous file's hash.\n+@ExtendWith(MockitoExtension.class)\n+public abstract class AbstractLinkedStreamDownloaderTest extends AbstractDownloaderTest {\n+\n+    @Test", "originalCommit": "977e0df2ca46a0e04ef30cdc56bd2aead9d6a42c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea19eee59ac294cba24299f786db89b507f11913", "chunk": "diff --git a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractLinkedStreamDownloaderTest.java b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractLinkedStreamDownloaderTest.java\nindex 9c95c2835..3e8d98be1 100644\n--- a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractLinkedStreamDownloaderTest.java\n+++ b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractLinkedStreamDownloaderTest.java\n\n@@ -33,10 +33,12 @@ import org.mockito.junit.jupiter.MockitoExtension;\n @ExtendWith(MockitoExtension.class)\n public abstract class AbstractLinkedStreamDownloaderTest extends AbstractDownloaderTest {\n \n+    protected String fileExtension;\n+\n     @Test\n     @DisplayName(\"Doesn't match last valid hash\")\n     void hashMismatchWithPrevious() throws Exception {\n-        doReturn(\"2019-01-01T01:00:00.000000Z.rcd\").when(applicationStatusRepository)\n+        doReturn(\"2019-01-01T01:00:00.000000Z\" + fileExtension).when(applicationStatusRepository)\n                 .findByStatusCode(downloader.getLastValidDownloadedFileKey());\n         doReturn(\"123\").when(applicationStatusRepository)\n                 .findByStatusCode(downloader.getLastValidDownloadedFileHashKey());\n"}}, {"oid": "e3ebb26716b48396be28c17d9e60d415a8a32684", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e3ebb26716b48396be28c17d9e60d415a8a32684", "message": "use swirlds jar\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-17T23:36:34Z", "type": "commit"}, {"oid": "e3ebb26716b48396be28c17d9e60d415a8a32684", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e3ebb26716b48396be28c17d9e60d415a8a32684", "message": "use swirlds jar\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-17T23:36:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyMDY3NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r443320674", "bodyText": "nit: Logic used twice. Just set a boolean with the value 1st time and use it in your if statements", "author": "Nana-EC", "createdAt": "2020-06-22T05:14:26Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package com.hedera.mirror.importer.filedecoder;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static com.hedera.mirror.importer.util.Utility.readBytes;\n+import static com.hedera.mirror.importer.util.Utility.readInt;\n+\n+import com.swirlds.common.Transaction;\n+import com.swirlds.common.crypto.Signature;\n+import java.io.DataInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.MessageDigest;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.codec.binary.Hex;\n+\n+import com.hedera.mirror.importer.domain.EventFile;\n+import com.hedera.mirror.importer.domain.EventItem;\n+import com.hedera.mirror.importer.exception.HashMismatchException;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+public class EventsFileDecoder {\n+    public static final String HASH_ALGORITHM = \"SHA-384\";\n+    public static final byte EVENT_TYPE_PREV_HASH = 1;       // next 48 bytes are hash384 or previous files\n+    public static final byte EVENT_STREAM_FILE_VERSION_LEGACY = 2;\n+    public static final byte EVENT_STREAM_VERSION = 2;\n+    public static final byte EVENT_STREAM_FILE_VERSION_CURRENT = 3;\n+    public static final byte EVENT_STREAM_START_NO_TRANS_WITH_VERSION = 0x5b;\n+    public static final byte EVENT_STREAM_START_WITH_VERSION = 0x5a;\n+    public static final byte EVENT_COMM_EVENT_LAST = 0x46;\n+\n+    /**\n+     * Decodes event stream file.\n+\n+     * @param filePath path to event file\n+     * @param expectedPrevFileHash expected previous file's hash in current file. Throws {@link HashMismatchException}\n+     *                             on mismatch\n+     * @param verifyHashAfter previous file's hash mismatch is ignored if file is from before this time\n+     * @param eventItemConsumer if not null, consumer is invoked for each event in the file\n+     */\n+    public static EventFile decode(String filePath, String expectedPrevFileHash, Instant verifyHashAfter,\n+                                   Consumer<EventItem> eventItemConsumer) {\n+        EventFile eventFile = new EventFile();\n+        eventFile.setName(filePath);\n+        String fileName = Utility.getFileName(filePath);\n+\n+        try (DataInputStream dis = new DataInputStream(new FileInputStream(filePath))) {\n+            // MessageDigest for getting the file Hash\n+            // suppose file[i] = p[i] || h[i] || c[i];\n+            // p[i] denotes the bytes before previousFileHash;\n+            // h[i] denotes the hash of file i - 1, i.e., previousFileHash;\n+            // c[i] denotes the bytes after previousFileHash;\n+            // '||' means concatenation\n+            // for Version2, h[i + 1] = hash(p[i] || h[i] || c[i]);\n+            // for Version3, h[i + 1] = hash(p[i] || h[i] || hash(c[i]))\n+            MessageDigest md = MessageDigest.getInstance(HASH_ALGORITHM);\n+\n+            int fileVersion = readInt(dis, md);\n+            if (fileVersion < EVENT_STREAM_FILE_VERSION_LEGACY) {\n+                throw new IllegalArgumentException(\"Invalid event stream file version \" + fileVersion);\n+            }\n+            eventFile.setFileVersion(fileVersion);\n+\n+            MessageDigest mdForContent = md;\n+            if (fileVersion >= EVENT_STREAM_FILE_VERSION_CURRENT) {\n+                // For calculating hash(c[i]) separately if version >= 3\n+                mdForContent = MessageDigest.getInstance(HASH_ALGORITHM);\n+            }\n+            while (dis.available() != 0) {\n+                byte typeDelimiter = dis.readByte();\n+                EventItem eventItem;\n+                switch (typeDelimiter) {\n+                    case EVENT_TYPE_PREV_HASH:\n+                        md.update(typeDelimiter);\n+                        byte[] readPrevFileHash = readBytes(dis, 48, md);\n+                        eventFile.setPreviousHash(Hex.encodeHexString(readPrevFileHash));\n+                        Instant fileInstant = Instant.parse(fileName.replaceAll(\".evts\", \"\").replaceAll(\"_\", \":\"));\n+\n+                        if (!Utility.verifyHashChain(eventFile.getPreviousHash(), expectedPrevFileHash,\n+                                verifyHashAfter, fileInstant)) {\n+                            throw new HashMismatchException(\"Hash mismatch for file \" + fileName);\n+                        }\n+                        break;\n+\n+                    case EVENT_STREAM_START_NO_TRANS_WITH_VERSION:\n+                        mdForContent.update(typeDelimiter);\n+                        eventItem = loadEvent(dis, mdForContent, false);\n+                        if (eventItemConsumer != null) {\n+                            eventItemConsumer.accept(eventItem);\n+                        }\n+                        break;\n+\n+                    case EVENT_STREAM_START_WITH_VERSION:\n+                        mdForContent.update(typeDelimiter);\n+                        eventItem = loadEvent(dis, mdForContent, true);\n+                        if (eventItemConsumer != null) {\n+                            eventItemConsumer.accept(eventItem);\n+                        }\n+                        break;\n+\n+                    default:\n+                        throw new IllegalArgumentException(String.format(\n+                                \"Unknown event file delimiter %s for file %s\", typeDelimiter, fileName));\n+                }\n+            }\n+            if (fileVersion >= EVENT_STREAM_FILE_VERSION_CURRENT) {", "originalCommit": "e3ebb26716b48396be28c17d9e60d415a8a32684", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51afb7e3595dbb77a64d7ed834ee303bf345f42b", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\nindex 277c944bf..2a58a36f5 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\n\n@@ -98,10 +98,9 @@ public class EventsFileDecoder {\n                         md.update(typeDelimiter);\n                         byte[] readPrevFileHash = readBytes(dis, 48, md);\n                         eventFile.setPreviousHash(Hex.encodeHexString(readPrevFileHash));\n-                        Instant fileInstant = Instant.parse(fileName.replaceAll(\".evts\", \"\").replaceAll(\"_\", \":\"));\n \n                         if (!Utility.verifyHashChain(eventFile.getPreviousHash(), expectedPrevFileHash,\n-                                verifyHashAfter, fileInstant)) {\n+                                verifyHashAfter, fileName)) {\n                             throw new HashMismatchException(\"Hash mismatch for file \" + fileName);\n                         }\n                         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyMjI3MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r443322270", "bodyText": "Isn't this supposed to be done once per file? If so then just do it once by moving this right after the fileName variable is assigned a value.", "author": "Nana-EC", "createdAt": "2020-06-22T05:21:32Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package com.hedera.mirror.importer.filedecoder;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static com.hedera.mirror.importer.util.Utility.readBytes;\n+import static com.hedera.mirror.importer.util.Utility.readInt;\n+\n+import com.swirlds.common.Transaction;\n+import com.swirlds.common.crypto.Signature;\n+import java.io.DataInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.MessageDigest;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.codec.binary.Hex;\n+\n+import com.hedera.mirror.importer.domain.EventFile;\n+import com.hedera.mirror.importer.domain.EventItem;\n+import com.hedera.mirror.importer.exception.HashMismatchException;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+public class EventsFileDecoder {\n+    public static final String HASH_ALGORITHM = \"SHA-384\";\n+    public static final byte EVENT_TYPE_PREV_HASH = 1;       // next 48 bytes are hash384 or previous files\n+    public static final byte EVENT_STREAM_FILE_VERSION_LEGACY = 2;\n+    public static final byte EVENT_STREAM_VERSION = 2;\n+    public static final byte EVENT_STREAM_FILE_VERSION_CURRENT = 3;\n+    public static final byte EVENT_STREAM_START_NO_TRANS_WITH_VERSION = 0x5b;\n+    public static final byte EVENT_STREAM_START_WITH_VERSION = 0x5a;\n+    public static final byte EVENT_COMM_EVENT_LAST = 0x46;\n+\n+    /**\n+     * Decodes event stream file.\n+\n+     * @param filePath path to event file\n+     * @param expectedPrevFileHash expected previous file's hash in current file. Throws {@link HashMismatchException}\n+     *                             on mismatch\n+     * @param verifyHashAfter previous file's hash mismatch is ignored if file is from before this time\n+     * @param eventItemConsumer if not null, consumer is invoked for each event in the file\n+     */\n+    public static EventFile decode(String filePath, String expectedPrevFileHash, Instant verifyHashAfter,\n+                                   Consumer<EventItem> eventItemConsumer) {\n+        EventFile eventFile = new EventFile();\n+        eventFile.setName(filePath);\n+        String fileName = Utility.getFileName(filePath);\n+\n+        try (DataInputStream dis = new DataInputStream(new FileInputStream(filePath))) {\n+            // MessageDigest for getting the file Hash\n+            // suppose file[i] = p[i] || h[i] || c[i];\n+            // p[i] denotes the bytes before previousFileHash;\n+            // h[i] denotes the hash of file i - 1, i.e., previousFileHash;\n+            // c[i] denotes the bytes after previousFileHash;\n+            // '||' means concatenation\n+            // for Version2, h[i + 1] = hash(p[i] || h[i] || c[i]);\n+            // for Version3, h[i + 1] = hash(p[i] || h[i] || hash(c[i]))\n+            MessageDigest md = MessageDigest.getInstance(HASH_ALGORITHM);\n+\n+            int fileVersion = readInt(dis, md);\n+            if (fileVersion < EVENT_STREAM_FILE_VERSION_LEGACY) {\n+                throw new IllegalArgumentException(\"Invalid event stream file version \" + fileVersion);\n+            }\n+            eventFile.setFileVersion(fileVersion);\n+\n+            MessageDigest mdForContent = md;\n+            if (fileVersion >= EVENT_STREAM_FILE_VERSION_CURRENT) {\n+                // For calculating hash(c[i]) separately if version >= 3\n+                mdForContent = MessageDigest.getInstance(HASH_ALGORITHM);\n+            }\n+            while (dis.available() != 0) {\n+                byte typeDelimiter = dis.readByte();\n+                EventItem eventItem;\n+                switch (typeDelimiter) {\n+                    case EVENT_TYPE_PREV_HASH:\n+                        md.update(typeDelimiter);\n+                        byte[] readPrevFileHash = readBytes(dis, 48, md);\n+                        eventFile.setPreviousHash(Hex.encodeHexString(readPrevFileHash));\n+                        Instant fileInstant = Instant.parse(fileName.replaceAll(\".evts\", \"\").replaceAll(\"_\", \":\"));", "originalCommit": "e3ebb26716b48396be28c17d9e60d415a8a32684", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxODA3OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455318079", "bodyText": "changed it in EventFileReaderImpl.read", "author": "xin-hedera", "createdAt": "2020-07-15T20:20:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyMjI3MA=="}], "type": "inlineReview", "revised_code": {"commit": "51afb7e3595dbb77a64d7ed834ee303bf345f42b", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\nindex 277c944bf..2a58a36f5 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\n\n@@ -98,10 +98,9 @@ public class EventsFileDecoder {\n                         md.update(typeDelimiter);\n                         byte[] readPrevFileHash = readBytes(dis, 48, md);\n                         eventFile.setPreviousHash(Hex.encodeHexString(readPrevFileHash));\n-                        Instant fileInstant = Instant.parse(fileName.replaceAll(\".evts\", \"\").replaceAll(\"_\", \":\"));\n \n                         if (!Utility.verifyHashChain(eventFile.getPreviousHash(), expectedPrevFileHash,\n-                                verifyHashAfter, fileInstant)) {\n+                                verifyHashAfter, fileName)) {\n                             throw new HashMismatchException(\"Hash mismatch for file \" + fileName);\n                         }\n                         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyNDg0NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r443324844", "bodyText": "nit: Seems like the read order is important. You might want to put a comment to state this and or reference the actual order so future updates have this in mind.", "author": "Nana-EC", "createdAt": "2020-06-22T05:32:13Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package com.hedera.mirror.importer.filedecoder;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static com.hedera.mirror.importer.util.Utility.readBytes;\n+import static com.hedera.mirror.importer.util.Utility.readInt;\n+\n+import com.swirlds.common.Transaction;\n+import com.swirlds.common.crypto.Signature;\n+import java.io.DataInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.MessageDigest;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.codec.binary.Hex;\n+\n+import com.hedera.mirror.importer.domain.EventFile;\n+import com.hedera.mirror.importer.domain.EventItem;\n+import com.hedera.mirror.importer.exception.HashMismatchException;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+public class EventsFileDecoder {\n+    public static final String HASH_ALGORITHM = \"SHA-384\";\n+    public static final byte EVENT_TYPE_PREV_HASH = 1;       // next 48 bytes are hash384 or previous files\n+    public static final byte EVENT_STREAM_FILE_VERSION_LEGACY = 2;\n+    public static final byte EVENT_STREAM_VERSION = 2;\n+    public static final byte EVENT_STREAM_FILE_VERSION_CURRENT = 3;\n+    public static final byte EVENT_STREAM_START_NO_TRANS_WITH_VERSION = 0x5b;\n+    public static final byte EVENT_STREAM_START_WITH_VERSION = 0x5a;\n+    public static final byte EVENT_COMM_EVENT_LAST = 0x46;\n+\n+    /**\n+     * Decodes event stream file.\n+\n+     * @param filePath path to event file\n+     * @param expectedPrevFileHash expected previous file's hash in current file. Throws {@link HashMismatchException}\n+     *                             on mismatch\n+     * @param verifyHashAfter previous file's hash mismatch is ignored if file is from before this time\n+     * @param eventItemConsumer if not null, consumer is invoked for each event in the file\n+     */\n+    public static EventFile decode(String filePath, String expectedPrevFileHash, Instant verifyHashAfter,\n+                                   Consumer<EventItem> eventItemConsumer) {\n+        EventFile eventFile = new EventFile();\n+        eventFile.setName(filePath);\n+        String fileName = Utility.getFileName(filePath);\n+\n+        try (DataInputStream dis = new DataInputStream(new FileInputStream(filePath))) {\n+            // MessageDigest for getting the file Hash\n+            // suppose file[i] = p[i] || h[i] || c[i];\n+            // p[i] denotes the bytes before previousFileHash;\n+            // h[i] denotes the hash of file i - 1, i.e., previousFileHash;\n+            // c[i] denotes the bytes after previousFileHash;\n+            // '||' means concatenation\n+            // for Version2, h[i + 1] = hash(p[i] || h[i] || c[i]);\n+            // for Version3, h[i + 1] = hash(p[i] || h[i] || hash(c[i]))\n+            MessageDigest md = MessageDigest.getInstance(HASH_ALGORITHM);\n+\n+            int fileVersion = readInt(dis, md);\n+            if (fileVersion < EVENT_STREAM_FILE_VERSION_LEGACY) {\n+                throw new IllegalArgumentException(\"Invalid event stream file version \" + fileVersion);\n+            }\n+            eventFile.setFileVersion(fileVersion);\n+\n+            MessageDigest mdForContent = md;\n+            if (fileVersion >= EVENT_STREAM_FILE_VERSION_CURRENT) {\n+                // For calculating hash(c[i]) separately if version >= 3\n+                mdForContent = MessageDigest.getInstance(HASH_ALGORITHM);\n+            }\n+            while (dis.available() != 0) {\n+                byte typeDelimiter = dis.readByte();\n+                EventItem eventItem;\n+                switch (typeDelimiter) {\n+                    case EVENT_TYPE_PREV_HASH:\n+                        md.update(typeDelimiter);\n+                        byte[] readPrevFileHash = readBytes(dis, 48, md);\n+                        eventFile.setPreviousHash(Hex.encodeHexString(readPrevFileHash));\n+                        Instant fileInstant = Instant.parse(fileName.replaceAll(\".evts\", \"\").replaceAll(\"_\", \":\"));\n+\n+                        if (!Utility.verifyHashChain(eventFile.getPreviousHash(), expectedPrevFileHash,\n+                                verifyHashAfter, fileInstant)) {\n+                            throw new HashMismatchException(\"Hash mismatch for file \" + fileName);\n+                        }\n+                        break;\n+\n+                    case EVENT_STREAM_START_NO_TRANS_WITH_VERSION:\n+                        mdForContent.update(typeDelimiter);\n+                        eventItem = loadEvent(dis, mdForContent, false);\n+                        if (eventItemConsumer != null) {\n+                            eventItemConsumer.accept(eventItem);\n+                        }\n+                        break;\n+\n+                    case EVENT_STREAM_START_WITH_VERSION:\n+                        mdForContent.update(typeDelimiter);\n+                        eventItem = loadEvent(dis, mdForContent, true);\n+                        if (eventItemConsumer != null) {\n+                            eventItemConsumer.accept(eventItem);\n+                        }\n+                        break;\n+\n+                    default:\n+                        throw new IllegalArgumentException(String.format(\n+                                \"Unknown event file delimiter %s for file %s\", typeDelimiter, fileName));\n+                }\n+            }\n+            if (fileVersion >= EVENT_STREAM_FILE_VERSION_CURRENT) {\n+                md.update(mdForContent.digest());\n+            }\n+            if (eventFile.getPreviousHash() == null) {\n+                throw new IllegalArgumentException(\"previous hash is null in file \" + fileName);\n+            }\n+            eventFile.setFileHash(Hex.encodeHexString(md.digest()));\n+            log.trace(\"Calculated file hash for the event file {}\", eventFile.getFileHash());\n+            return eventFile;\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Error parsing bad event file \" + fileName, e);\n+        }\n+    }\n+\n+    private static EventItem loadEvent(DataInputStream dis, MessageDigest md, boolean hasTransactions)\n+            throws IOException {\n+        EventItem eventItem = new EventItem();\n+        int version = readInt(dis, md);\n+        if (version != EVENT_STREAM_VERSION) {\n+            throw new IllegalArgumentException(\"Invalid EventStream format version : \" + version);\n+        }\n+\n+        eventItem.setCreatorId(readLong(dis, md));", "originalCommit": "e3ebb26716b48396be28c17d9e60d415a8a32684", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMyMDc5MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455320791", "bodyText": "will address it in #812", "author": "xin-hedera", "createdAt": "2020-07-15T20:25:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyNDg0NA=="}], "type": "inlineReview", "revised_code": {"commit": "51afb7e3595dbb77a64d7ed834ee303bf345f42b", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\nindex 277c944bf..2a58a36f5 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\n\n@@ -98,10 +98,9 @@ public class EventsFileDecoder {\n                         md.update(typeDelimiter);\n                         byte[] readPrevFileHash = readBytes(dis, 48, md);\n                         eventFile.setPreviousHash(Hex.encodeHexString(readPrevFileHash));\n-                        Instant fileInstant = Instant.parse(fileName.replaceAll(\".evts\", \"\").replaceAll(\"_\", \":\"));\n \n                         if (!Utility.verifyHashChain(eventFile.getPreviousHash(), expectedPrevFileHash,\n-                                verifyHashAfter, fileInstant)) {\n+                                verifyHashAfter, fileName)) {\n                             throw new HashMismatchException(\"Hash mismatch for file \" + fileName);\n                         }\n                         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyNjE2NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r443326165", "bodyText": "nit: All the checkSum values used when calling readAndValidateChecksum () should be private class variables.", "author": "Nana-EC", "createdAt": "2020-06-22T05:37:48Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package com.hedera.mirror.importer.filedecoder;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static com.hedera.mirror.importer.util.Utility.readBytes;\n+import static com.hedera.mirror.importer.util.Utility.readInt;\n+\n+import com.swirlds.common.Transaction;\n+import com.swirlds.common.crypto.Signature;\n+import java.io.DataInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.MessageDigest;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.codec.binary.Hex;\n+\n+import com.hedera.mirror.importer.domain.EventFile;\n+import com.hedera.mirror.importer.domain.EventItem;\n+import com.hedera.mirror.importer.exception.HashMismatchException;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+public class EventsFileDecoder {\n+    public static final String HASH_ALGORITHM = \"SHA-384\";\n+    public static final byte EVENT_TYPE_PREV_HASH = 1;       // next 48 bytes are hash384 or previous files\n+    public static final byte EVENT_STREAM_FILE_VERSION_LEGACY = 2;\n+    public static final byte EVENT_STREAM_VERSION = 2;\n+    public static final byte EVENT_STREAM_FILE_VERSION_CURRENT = 3;\n+    public static final byte EVENT_STREAM_START_NO_TRANS_WITH_VERSION = 0x5b;\n+    public static final byte EVENT_STREAM_START_WITH_VERSION = 0x5a;\n+    public static final byte EVENT_COMM_EVENT_LAST = 0x46;\n+\n+    /**\n+     * Decodes event stream file.\n+\n+     * @param filePath path to event file\n+     * @param expectedPrevFileHash expected previous file's hash in current file. Throws {@link HashMismatchException}\n+     *                             on mismatch\n+     * @param verifyHashAfter previous file's hash mismatch is ignored if file is from before this time\n+     * @param eventItemConsumer if not null, consumer is invoked for each event in the file\n+     */\n+    public static EventFile decode(String filePath, String expectedPrevFileHash, Instant verifyHashAfter,\n+                                   Consumer<EventItem> eventItemConsumer) {\n+        EventFile eventFile = new EventFile();\n+        eventFile.setName(filePath);\n+        String fileName = Utility.getFileName(filePath);\n+\n+        try (DataInputStream dis = new DataInputStream(new FileInputStream(filePath))) {\n+            // MessageDigest for getting the file Hash\n+            // suppose file[i] = p[i] || h[i] || c[i];\n+            // p[i] denotes the bytes before previousFileHash;\n+            // h[i] denotes the hash of file i - 1, i.e., previousFileHash;\n+            // c[i] denotes the bytes after previousFileHash;\n+            // '||' means concatenation\n+            // for Version2, h[i + 1] = hash(p[i] || h[i] || c[i]);\n+            // for Version3, h[i + 1] = hash(p[i] || h[i] || hash(c[i]))\n+            MessageDigest md = MessageDigest.getInstance(HASH_ALGORITHM);\n+\n+            int fileVersion = readInt(dis, md);\n+            if (fileVersion < EVENT_STREAM_FILE_VERSION_LEGACY) {\n+                throw new IllegalArgumentException(\"Invalid event stream file version \" + fileVersion);\n+            }\n+            eventFile.setFileVersion(fileVersion);\n+\n+            MessageDigest mdForContent = md;\n+            if (fileVersion >= EVENT_STREAM_FILE_VERSION_CURRENT) {\n+                // For calculating hash(c[i]) separately if version >= 3\n+                mdForContent = MessageDigest.getInstance(HASH_ALGORITHM);\n+            }\n+            while (dis.available() != 0) {\n+                byte typeDelimiter = dis.readByte();\n+                EventItem eventItem;\n+                switch (typeDelimiter) {\n+                    case EVENT_TYPE_PREV_HASH:\n+                        md.update(typeDelimiter);\n+                        byte[] readPrevFileHash = readBytes(dis, 48, md);\n+                        eventFile.setPreviousHash(Hex.encodeHexString(readPrevFileHash));\n+                        Instant fileInstant = Instant.parse(fileName.replaceAll(\".evts\", \"\").replaceAll(\"_\", \":\"));\n+\n+                        if (!Utility.verifyHashChain(eventFile.getPreviousHash(), expectedPrevFileHash,\n+                                verifyHashAfter, fileInstant)) {\n+                            throw new HashMismatchException(\"Hash mismatch for file \" + fileName);\n+                        }\n+                        break;\n+\n+                    case EVENT_STREAM_START_NO_TRANS_WITH_VERSION:\n+                        mdForContent.update(typeDelimiter);\n+                        eventItem = loadEvent(dis, mdForContent, false);\n+                        if (eventItemConsumer != null) {\n+                            eventItemConsumer.accept(eventItem);\n+                        }\n+                        break;\n+\n+                    case EVENT_STREAM_START_WITH_VERSION:\n+                        mdForContent.update(typeDelimiter);\n+                        eventItem = loadEvent(dis, mdForContent, true);\n+                        if (eventItemConsumer != null) {\n+                            eventItemConsumer.accept(eventItem);\n+                        }\n+                        break;\n+\n+                    default:\n+                        throw new IllegalArgumentException(String.format(\n+                                \"Unknown event file delimiter %s for file %s\", typeDelimiter, fileName));\n+                }\n+            }\n+            if (fileVersion >= EVENT_STREAM_FILE_VERSION_CURRENT) {\n+                md.update(mdForContent.digest());\n+            }\n+            if (eventFile.getPreviousHash() == null) {\n+                throw new IllegalArgumentException(\"previous hash is null in file \" + fileName);\n+            }\n+            eventFile.setFileHash(Hex.encodeHexString(md.digest()));\n+            log.trace(\"Calculated file hash for the event file {}\", eventFile.getFileHash());\n+            return eventFile;\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Error parsing bad event file \" + fileName, e);\n+        }\n+    }\n+\n+    private static EventItem loadEvent(DataInputStream dis, MessageDigest md, boolean hasTransactions)\n+            throws IOException {\n+        EventItem eventItem = new EventItem();\n+        int version = readInt(dis, md);\n+        if (version != EVENT_STREAM_VERSION) {\n+            throw new IllegalArgumentException(\"Invalid EventStream format version : \" + version);\n+        }\n+\n+        eventItem.setCreatorId(readLong(dis, md));\n+        eventItem.setCreatorSeq(readLong(dis, md));\n+        eventItem.setOtherId(readLong(dis, md));\n+        eventItem.setOtherSeq(readLong(dis, md));\n+        eventItem.setSelfParentGen(readLong(dis, md));\n+        eventItem.setOtherParentGen(readLong(dis, md));\n+        eventItem.setSelfParentHash(readBytesWithChecksum(dis, md, true));\n+        eventItem.setOtherParentHash(readBytesWithChecksum(dis, md, true));\n+        if (hasTransactions) {\n+            eventItem.setTransactions(readTransactions(dis, md));\n+        }\n+        eventItem.setTimeCreated(readInstant(dis, md));\n+        eventItem.setSignature(readBytesWithChecksum(dis, md, false));\n+\n+        byte eventEndMarker = dis.readByte();\n+        if (eventEndMarker != EVENT_COMM_EVENT_LAST) {\n+            throw new IllegalArgumentException(\"Invalid event end marker : \" + eventEndMarker);\n+        }\n+        md.update(EVENT_COMM_EVENT_LAST);\n+\n+        eventItem.setHash(readBytesWithChecksum(dis, md, false));  // event's hash\n+        eventItem.setConsensusTimeStamp(readInstant(dis, md));\n+        eventItem.setConsensusOrder(readLong(dis, md));\n+        if (log.isTraceEnabled()) {\n+            log.trace(\"Event: {}\", eventItem);\n+        }\n+        return eventItem;\n+    }\n+\n+    /**\n+     * Read all {@link Transaction}s from the {@link DataInputStream}.\n+     *\n+     * @throws IOException  if the internal checksum cannot be validated, or if any error occurs when reading the file\n+     */\n+    public static List<Transaction> readTransactions(DataInputStream dis, MessageDigest md) throws IOException {\n+        int numTransactions = readInt(dis, md);\n+        if (numTransactions < 0) {\n+            throw new IllegalArgumentException(\"Invalid number of transactions: \" + numTransactions);\n+        }\n+        readAndValidateChecksum(dis, 1873 - numTransactions, md);", "originalCommit": "e3ebb26716b48396be28c17d9e60d415a8a32684", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxODc0MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455318740", "bodyText": "will be addressed in the #812, for this PR only events downloader is implemented.", "author": "xin-hedera", "createdAt": "2020-07-15T20:21:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyNjE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "51afb7e3595dbb77a64d7ed834ee303bf345f42b", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\nindex 277c944bf..2a58a36f5 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\n\n@@ -98,10 +98,9 @@ public class EventsFileDecoder {\n                         md.update(typeDelimiter);\n                         byte[] readPrevFileHash = readBytes(dis, 48, md);\n                         eventFile.setPreviousHash(Hex.encodeHexString(readPrevFileHash));\n-                        Instant fileInstant = Instant.parse(fileName.replaceAll(\".evts\", \"\").replaceAll(\"_\", \":\"));\n \n                         if (!Utility.verifyHashChain(eventFile.getPreviousHash(), expectedPrevFileHash,\n-                                verifyHashAfter, fileInstant)) {\n+                                verifyHashAfter, fileName)) {\n                             throw new HashMismatchException(\"Hash mismatch for file \" + fileName);\n                         }\n                         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyNzY3Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r443327677", "bodyText": "Q: Shouldn't these `read?' methods be in the Utility class alongside the other file read methods?", "author": "Nana-EC", "createdAt": "2020-06-22T05:44:00Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package com.hedera.mirror.importer.filedecoder;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static com.hedera.mirror.importer.util.Utility.readBytes;\n+import static com.hedera.mirror.importer.util.Utility.readInt;\n+\n+import com.swirlds.common.Transaction;\n+import com.swirlds.common.crypto.Signature;\n+import java.io.DataInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.MessageDigest;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.codec.binary.Hex;\n+\n+import com.hedera.mirror.importer.domain.EventFile;\n+import com.hedera.mirror.importer.domain.EventItem;\n+import com.hedera.mirror.importer.exception.HashMismatchException;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+public class EventsFileDecoder {\n+    public static final String HASH_ALGORITHM = \"SHA-384\";\n+    public static final byte EVENT_TYPE_PREV_HASH = 1;       // next 48 bytes are hash384 or previous files\n+    public static final byte EVENT_STREAM_FILE_VERSION_LEGACY = 2;\n+    public static final byte EVENT_STREAM_VERSION = 2;\n+    public static final byte EVENT_STREAM_FILE_VERSION_CURRENT = 3;\n+    public static final byte EVENT_STREAM_START_NO_TRANS_WITH_VERSION = 0x5b;\n+    public static final byte EVENT_STREAM_START_WITH_VERSION = 0x5a;\n+    public static final byte EVENT_COMM_EVENT_LAST = 0x46;\n+\n+    /**\n+     * Decodes event stream file.\n+\n+     * @param filePath path to event file\n+     * @param expectedPrevFileHash expected previous file's hash in current file. Throws {@link HashMismatchException}\n+     *                             on mismatch\n+     * @param verifyHashAfter previous file's hash mismatch is ignored if file is from before this time\n+     * @param eventItemConsumer if not null, consumer is invoked for each event in the file\n+     */\n+    public static EventFile decode(String filePath, String expectedPrevFileHash, Instant verifyHashAfter,\n+                                   Consumer<EventItem> eventItemConsumer) {\n+        EventFile eventFile = new EventFile();\n+        eventFile.setName(filePath);\n+        String fileName = Utility.getFileName(filePath);\n+\n+        try (DataInputStream dis = new DataInputStream(new FileInputStream(filePath))) {\n+            // MessageDigest for getting the file Hash\n+            // suppose file[i] = p[i] || h[i] || c[i];\n+            // p[i] denotes the bytes before previousFileHash;\n+            // h[i] denotes the hash of file i - 1, i.e., previousFileHash;\n+            // c[i] denotes the bytes after previousFileHash;\n+            // '||' means concatenation\n+            // for Version2, h[i + 1] = hash(p[i] || h[i] || c[i]);\n+            // for Version3, h[i + 1] = hash(p[i] || h[i] || hash(c[i]))\n+            MessageDigest md = MessageDigest.getInstance(HASH_ALGORITHM);\n+\n+            int fileVersion = readInt(dis, md);\n+            if (fileVersion < EVENT_STREAM_FILE_VERSION_LEGACY) {\n+                throw new IllegalArgumentException(\"Invalid event stream file version \" + fileVersion);\n+            }\n+            eventFile.setFileVersion(fileVersion);\n+\n+            MessageDigest mdForContent = md;\n+            if (fileVersion >= EVENT_STREAM_FILE_VERSION_CURRENT) {\n+                // For calculating hash(c[i]) separately if version >= 3\n+                mdForContent = MessageDigest.getInstance(HASH_ALGORITHM);\n+            }\n+            while (dis.available() != 0) {\n+                byte typeDelimiter = dis.readByte();\n+                EventItem eventItem;\n+                switch (typeDelimiter) {\n+                    case EVENT_TYPE_PREV_HASH:\n+                        md.update(typeDelimiter);\n+                        byte[] readPrevFileHash = readBytes(dis, 48, md);\n+                        eventFile.setPreviousHash(Hex.encodeHexString(readPrevFileHash));\n+                        Instant fileInstant = Instant.parse(fileName.replaceAll(\".evts\", \"\").replaceAll(\"_\", \":\"));\n+\n+                        if (!Utility.verifyHashChain(eventFile.getPreviousHash(), expectedPrevFileHash,\n+                                verifyHashAfter, fileInstant)) {\n+                            throw new HashMismatchException(\"Hash mismatch for file \" + fileName);\n+                        }\n+                        break;\n+\n+                    case EVENT_STREAM_START_NO_TRANS_WITH_VERSION:\n+                        mdForContent.update(typeDelimiter);\n+                        eventItem = loadEvent(dis, mdForContent, false);\n+                        if (eventItemConsumer != null) {\n+                            eventItemConsumer.accept(eventItem);\n+                        }\n+                        break;\n+\n+                    case EVENT_STREAM_START_WITH_VERSION:\n+                        mdForContent.update(typeDelimiter);\n+                        eventItem = loadEvent(dis, mdForContent, true);\n+                        if (eventItemConsumer != null) {\n+                            eventItemConsumer.accept(eventItem);\n+                        }\n+                        break;\n+\n+                    default:\n+                        throw new IllegalArgumentException(String.format(\n+                                \"Unknown event file delimiter %s for file %s\", typeDelimiter, fileName));\n+                }\n+            }\n+            if (fileVersion >= EVENT_STREAM_FILE_VERSION_CURRENT) {\n+                md.update(mdForContent.digest());\n+            }\n+            if (eventFile.getPreviousHash() == null) {\n+                throw new IllegalArgumentException(\"previous hash is null in file \" + fileName);\n+            }\n+            eventFile.setFileHash(Hex.encodeHexString(md.digest()));\n+            log.trace(\"Calculated file hash for the event file {}\", eventFile.getFileHash());\n+            return eventFile;\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Error parsing bad event file \" + fileName, e);\n+        }\n+    }\n+\n+    private static EventItem loadEvent(DataInputStream dis, MessageDigest md, boolean hasTransactions)\n+            throws IOException {\n+        EventItem eventItem = new EventItem();\n+        int version = readInt(dis, md);\n+        if (version != EVENT_STREAM_VERSION) {\n+            throw new IllegalArgumentException(\"Invalid EventStream format version : \" + version);\n+        }\n+\n+        eventItem.setCreatorId(readLong(dis, md));\n+        eventItem.setCreatorSeq(readLong(dis, md));\n+        eventItem.setOtherId(readLong(dis, md));\n+        eventItem.setOtherSeq(readLong(dis, md));\n+        eventItem.setSelfParentGen(readLong(dis, md));\n+        eventItem.setOtherParentGen(readLong(dis, md));\n+        eventItem.setSelfParentHash(readBytesWithChecksum(dis, md, true));\n+        eventItem.setOtherParentHash(readBytesWithChecksum(dis, md, true));\n+        if (hasTransactions) {\n+            eventItem.setTransactions(readTransactions(dis, md));\n+        }\n+        eventItem.setTimeCreated(readInstant(dis, md));\n+        eventItem.setSignature(readBytesWithChecksum(dis, md, false));\n+\n+        byte eventEndMarker = dis.readByte();\n+        if (eventEndMarker != EVENT_COMM_EVENT_LAST) {\n+            throw new IllegalArgumentException(\"Invalid event end marker : \" + eventEndMarker);\n+        }\n+        md.update(EVENT_COMM_EVENT_LAST);\n+\n+        eventItem.setHash(readBytesWithChecksum(dis, md, false));  // event's hash\n+        eventItem.setConsensusTimeStamp(readInstant(dis, md));\n+        eventItem.setConsensusOrder(readLong(dis, md));\n+        if (log.isTraceEnabled()) {\n+            log.trace(\"Event: {}\", eventItem);\n+        }\n+        return eventItem;\n+    }\n+\n+    /**\n+     * Read all {@link Transaction}s from the {@link DataInputStream}.\n+     *\n+     * @throws IOException  if the internal checksum cannot be validated, or if any error occurs when reading the file\n+     */\n+    public static List<Transaction> readTransactions(DataInputStream dis, MessageDigest md) throws IOException {\n+        int numTransactions = readInt(dis, md);\n+        if (numTransactions < 0) {\n+            throw new IllegalArgumentException(\"Invalid number of transactions: \" + numTransactions);\n+        }\n+        readAndValidateChecksum(dis, 1873 - numTransactions, md);\n+        List<Transaction> transactions = new ArrayList<>(numTransactions);\n+        for (int i = 0; i < numTransactions; i++) {\n+            transactions.add(deserialize(dis, md));\n+        }\n+        return transactions;\n+    }\n+\n+    /**\n+     * Read single {@link Transaction} from the {@link DataInputStream}.\n+     *\n+     * @throws IOException  if the internal checksum cannot be validated, or if any error occurs when reading the file\n+     */\n+    private static Transaction deserialize(DataInputStream dis, MessageDigest md) throws IOException {\n+        int txLen = readInt(dis, md);\n+        if (txLen < 0) {\n+            throw new IllegalArgumentException(\"Invalid number of transactions: \" + txLen);\n+        }\n+        readAndValidateChecksum(dis, 277 - txLen, md);\n+        readBoolean(dis, md); // system field of transaction\n+        byte[] contents = readBytes(dis, txLen, md);\n+        Signature[] signatures = readSignatures(dis, md);\n+        return new Transaction(contents, signatures);\n+    }\n+\n+    /**\n+     * Read all {@link Signature}s from the {@link DataInputStream}.\n+     *\n+     * @throws IOException  if the internal checksum cannot be validated, or if any error occurs when reading the file\n+     */\n+    private static Signature[] readSignatures(DataInputStream dis, MessageDigest md) throws IOException {", "originalCommit": "e3ebb26716b48396be28c17d9e60d415a8a32684", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYxMjIyNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r443612225", "bodyText": "I think it's the other way around. The reading specific methods in Utility should move into a proper class in the same package as this file in the future.", "author": "steven-sheehy", "createdAt": "2020-06-22T14:44:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyNzY3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxNzUzNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455317535", "bodyText": "EventsFileDecoder is removed and parsing the file to get prevHash and calculate the hash of the file itself is handled by EventFileReaderImpl.java", "author": "xin-hedera", "createdAt": "2020-07-15T20:19:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyNzY3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "51afb7e3595dbb77a64d7ed834ee303bf345f42b", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\nindex 277c944bf..2a58a36f5 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\n\n@@ -98,10 +98,9 @@ public class EventsFileDecoder {\n                         md.update(typeDelimiter);\n                         byte[] readPrevFileHash = readBytes(dis, 48, md);\n                         eventFile.setPreviousHash(Hex.encodeHexString(readPrevFileHash));\n-                        Instant fileInstant = Instant.parse(fileName.replaceAll(\".evts\", \"\").replaceAll(\"_\", \":\"));\n \n                         if (!Utility.verifyHashChain(eventFile.getPreviousHash(), expectedPrevFileHash,\n-                                verifyHashAfter, fileInstant)) {\n+                                verifyHashAfter, fileName)) {\n                             throw new HashMismatchException(\"Hash mismatch for file \" + fileName);\n                         }\n                         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxODk0MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r441218941", "bodyText": "Since it's new, let's name it previous_hash so we don't have to manually map the name", "author": "steven-sheehy", "createdAt": "2020-06-17T00:47:29Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EventFile.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.persistence.Column;\n+import javax.persistence.Transient;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+@Data\n+@NoArgsConstructor\n+public class EventFile {\n+    private String name;\n+\n+    private Long loadStart;\n+\n+    private Long loadEnd;\n+\n+    private String fileHash;\n+\n+    @Column(name = \"prev_hash\")", "originalCommit": "185c45647a793a6a47733eacaa84f0c491021a20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxNjg0NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455316845", "bodyText": "removed the Column annotation", "author": "xin-hedera", "createdAt": "2020-07-15T20:18:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxODk0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ea19eee59ac294cba24299f786db89b507f11913", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EventFile.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EventFile.java\nindex 9e6380873..ce7e89980 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EventFile.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EventFile.java\n\n@@ -20,8 +20,6 @@ package com.hedera.mirror.importer.domain;\n  * \u200d\n  */\n \n-import javax.persistence.Column;\n-import javax.persistence.Transient;\n import lombok.Data;\n import lombok.NoArgsConstructor;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxOTY5NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r441219694", "bodyText": "Why transient? Let's store it", "author": "steven-sheehy", "createdAt": "2020-06-17T00:50:28Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EventFile.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.persistence.Column;\n+import javax.persistence.Transient;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+@Data\n+@NoArgsConstructor\n+public class EventFile {\n+    private String name;\n+\n+    private Long loadStart;\n+\n+    private Long loadEnd;\n+\n+    private String fileHash;\n+\n+    @Column(name = \"prev_hash\")\n+    private String previousHash;\n+\n+    @Transient", "originalCommit": "185c45647a793a6a47733eacaa84f0c491021a20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxNzAxOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455317018", "bodyText": "removed transient", "author": "xin-hedera", "createdAt": "2020-07-15T20:18:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxOTY5NA=="}], "type": "inlineReview", "revised_code": {"commit": "ea19eee59ac294cba24299f786db89b507f11913", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EventFile.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EventFile.java\nindex 9e6380873..ce7e89980 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EventFile.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EventFile.java\n\n@@ -20,8 +20,6 @@ package com.hedera.mirror.importer.domain;\n  * \u200d\n  */\n \n-import javax.persistence.Column;\n-import javax.persistence.Transient;\n import lombok.Data;\n import lombok.NoArgsConstructor;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwNTI3Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r443605277", "bodyText": "How can EventFileDownloaderTest return a rcd file?", "author": "steven-sheehy", "createdAt": "2020-06-22T14:35:32Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractLinkedStreamDownloaderTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.hedera.mirror.importer.downloader;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.time.Instant;\n+import java.util.List;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+// Common tests for streams (record and events) which are linked by previous file's hash.\n+@ExtendWith(MockitoExtension.class)\n+public abstract class AbstractLinkedStreamDownloaderTest extends AbstractDownloaderTest {\n+\n+    @Test\n+    @DisplayName(\"Doesn't match last valid hash\")\n+    void hashMismatchWithPrevious() throws Exception {\n+        doReturn(\"2019-01-01T01:00:00.000000Z.rcd\").when(applicationStatusRepository)", "originalCommit": "e3ebb26716b48396be28c17d9e60d415a8a32684", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxOTI1MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455319250", "bodyText": "fixed by setting fileExtension in inherited test classes and compose the correct filename in hashMismatchWithPrevious.", "author": "xin-hedera", "createdAt": "2020-07-15T20:22:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwNTI3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ea19eee59ac294cba24299f786db89b507f11913", "chunk": "diff --git a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractLinkedStreamDownloaderTest.java b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractLinkedStreamDownloaderTest.java\nindex 9c95c2835..3e8d98be1 100644\n--- a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractLinkedStreamDownloaderTest.java\n+++ b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractLinkedStreamDownloaderTest.java\n\n@@ -33,10 +33,12 @@ import org.mockito.junit.jupiter.MockitoExtension;\n @ExtendWith(MockitoExtension.class)\n public abstract class AbstractLinkedStreamDownloaderTest extends AbstractDownloaderTest {\n \n+    protected String fileExtension;\n+\n     @Test\n     @DisplayName(\"Doesn't match last valid hash\")\n     void hashMismatchWithPrevious() throws Exception {\n-        doReturn(\"2019-01-01T01:00:00.000000Z.rcd\").when(applicationStatusRepository)\n+        doReturn(\"2019-01-01T01:00:00.000000Z\" + fileExtension).when(applicationStatusRepository)\n                 .findByStatusCode(downloader.getLastValidDownloadedFileKey());\n         doReturn(\"123\").when(applicationStatusRepository)\n                 .findByStatusCode(downloader.getLastValidDownloadedFileHashKey());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYxMzc2OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r443613769", "bodyText": "This should be higher since it's not currently a requirement to have low latency for this stream. Maybe 5s?", "author": "steven-sheehy", "createdAt": "2020-06-22T14:46:31Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventDownloaderProperties.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.hedera.mirror.importer.downloader.event;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.NotNull;\n+import lombok.Data;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.validation.annotation.Validated;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.downloader.CommonDownloaderProperties;\n+import com.hedera.mirror.importer.downloader.DownloaderProperties;\n+\n+@Data\n+@Validated\n+@ConfigurationProperties(\"hedera.mirror.importer.downloader.event\")\n+public class EventDownloaderProperties implements DownloaderProperties {\n+\n+    private final MirrorProperties mirrorProperties;\n+\n+    private final CommonDownloaderProperties common;\n+\n+    @Min(1)\n+    private int batchSize = 15;\n+\n+    private boolean enabled = false;\n+\n+    @NotNull\n+    private Duration frequency = Duration.ofMillis(500L);", "originalCommit": "e3ebb26716b48396be28c17d9e60d415a8a32684", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxOTM5MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455319391", "bodyText": "changed it to 5s.", "author": "xin-hedera", "createdAt": "2020-07-15T20:22:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYxMzc2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ea19eee59ac294cba24299f786db89b507f11913", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventDownloaderProperties.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventDownloaderProperties.java\nindex b02ee5099..339bc6fd8 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventDownloaderProperties.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventDownloaderProperties.java\n\n@@ -46,10 +46,10 @@ public class EventDownloaderProperties implements DownloaderProperties {\n     @Min(1)\n     private int batchSize = 15;\n \n-    private boolean enabled = false;\n+    private boolean enabled = true;\n \n     @NotNull\n-    private Duration frequency = Duration.ofMillis(500L);\n+    private Duration frequency = Duration.ofMillis(5000L);\n \n     private boolean keepSignatures = false;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyNzUyOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r443627528", "bodyText": "This is too low and makes catch up very inefficient. Would set to 100. We can test later for optimal amount, but 15 definitely too low.", "author": "steven-sheehy", "createdAt": "2020-06-22T15:05:11Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventDownloaderProperties.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.hedera.mirror.importer.downloader.event;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.NotNull;\n+import lombok.Data;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.validation.annotation.Validated;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.downloader.CommonDownloaderProperties;\n+import com.hedera.mirror.importer.downloader.DownloaderProperties;\n+\n+@Data\n+@Validated\n+@ConfigurationProperties(\"hedera.mirror.importer.downloader.event\")\n+public class EventDownloaderProperties implements DownloaderProperties {\n+\n+    private final MirrorProperties mirrorProperties;\n+\n+    private final CommonDownloaderProperties common;\n+\n+    @Min(1)\n+    private int batchSize = 15;", "originalCommit": "e3ebb26716b48396be28c17d9e60d415a8a32684", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMyMTY4Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455321687", "bodyText": "updated to 100.", "author": "xin-hedera", "createdAt": "2020-07-15T20:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyNzUyOA=="}], "type": "inlineReview", "revised_code": {"commit": "ea19eee59ac294cba24299f786db89b507f11913", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventDownloaderProperties.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventDownloaderProperties.java\nindex b02ee5099..339bc6fd8 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventDownloaderProperties.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventDownloaderProperties.java\n\n@@ -46,10 +46,10 @@ public class EventDownloaderProperties implements DownloaderProperties {\n     @Min(1)\n     private int batchSize = 15;\n \n-    private boolean enabled = false;\n+    private boolean enabled = true;\n \n     @NotNull\n-    private Duration frequency = Duration.ofMillis(500L);\n+    private Duration frequency = Duration.ofMillis(5000L);\n \n     private boolean keepSignatures = false;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NDY3OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r443654678", "bodyText": "Static methods should be avoided. Remember RecordFileLogger? Once you make non-static you could use dependency injection to inject properties and repo so you don't need to pass the hash and verifyhashafter as parameters. It would also allow us to support different event versions in the future more easily via different concrete implementations.", "author": "steven-sheehy", "createdAt": "2020-06-22T15:44:43Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package com.hedera.mirror.importer.filedecoder;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static com.hedera.mirror.importer.util.Utility.readBytes;\n+import static com.hedera.mirror.importer.util.Utility.readInt;\n+\n+import com.swirlds.common.Transaction;\n+import com.swirlds.common.crypto.Signature;\n+import java.io.DataInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.MessageDigest;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.codec.binary.Hex;\n+\n+import com.hedera.mirror.importer.domain.EventFile;\n+import com.hedera.mirror.importer.domain.EventItem;\n+import com.hedera.mirror.importer.exception.HashMismatchException;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+public class EventsFileDecoder {\n+    public static final String HASH_ALGORITHM = \"SHA-384\";\n+    public static final byte EVENT_TYPE_PREV_HASH = 1;       // next 48 bytes are hash384 or previous files\n+    public static final byte EVENT_STREAM_FILE_VERSION_LEGACY = 2;\n+    public static final byte EVENT_STREAM_VERSION = 2;\n+    public static final byte EVENT_STREAM_FILE_VERSION_CURRENT = 3;\n+    public static final byte EVENT_STREAM_START_NO_TRANS_WITH_VERSION = 0x5b;\n+    public static final byte EVENT_STREAM_START_WITH_VERSION = 0x5a;\n+    public static final byte EVENT_COMM_EVENT_LAST = 0x46;\n+\n+    /**\n+     * Decodes event stream file.\n+\n+     * @param filePath path to event file\n+     * @param expectedPrevFileHash expected previous file's hash in current file. Throws {@link HashMismatchException}\n+     *                             on mismatch\n+     * @param verifyHashAfter previous file's hash mismatch is ignored if file is from before this time\n+     * @param eventItemConsumer if not null, consumer is invoked for each event in the file\n+     */\n+    public static EventFile decode(String filePath, String expectedPrevFileHash, Instant verifyHashAfter,", "originalCommit": "e3ebb26716b48396be28c17d9e60d415a8a32684", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMyMjU2OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455322568", "bodyText": "the class is removed and the functionality is partially replaced by EventFileReader.read which is a instance method.", "author": "xin-hedera", "createdAt": "2020-07-15T20:28:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NDY3OA=="}], "type": "inlineReview", "revised_code": {"commit": "51afb7e3595dbb77a64d7ed834ee303bf345f42b", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\nindex 277c944bf..2a58a36f5 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\n\n@@ -98,10 +98,9 @@ public class EventsFileDecoder {\n                         md.update(typeDelimiter);\n                         byte[] readPrevFileHash = readBytes(dis, 48, md);\n                         eventFile.setPreviousHash(Hex.encodeHexString(readPrevFileHash));\n-                        Instant fileInstant = Instant.parse(fileName.replaceAll(\".evts\", \"\").replaceAll(\"_\", \":\"));\n \n                         if (!Utility.verifyHashChain(eventFile.getPreviousHash(), expectedPrevFileHash,\n-                                verifyHashAfter, fileInstant)) {\n+                                verifyHashAfter, fileName)) {\n                             throw new HashMismatchException(\"Hash mismatch for file \" + fileName);\n                         }\n                         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MTg5OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r443661898", "bodyText": "Would prefer filereader or reader as it's not decoding anything per se. Same for class name.", "author": "steven-sheehy", "createdAt": "2020-06-22T15:55:26Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package com.hedera.mirror.importer.filedecoder;", "originalCommit": "e3ebb26716b48396be28c17d9e60d415a8a32684", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxOTU5Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455319592", "bodyText": "changed to EventFileReader & EventFileReaderImpl", "author": "xin-hedera", "createdAt": "2020-07-15T20:23:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MTg5OA=="}], "type": "inlineReview", "revised_code": {"commit": "51afb7e3595dbb77a64d7ed834ee303bf345f42b", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\nindex 277c944bf..2a58a36f5 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\n\n@@ -98,10 +98,9 @@ public class EventsFileDecoder {\n                         md.update(typeDelimiter);\n                         byte[] readPrevFileHash = readBytes(dis, 48, md);\n                         eventFile.setPreviousHash(Hex.encodeHexString(readPrevFileHash));\n-                        Instant fileInstant = Instant.parse(fileName.replaceAll(\".evts\", \"\").replaceAll(\"_\", \":\"));\n \n                         if (!Utility.verifyHashChain(eventFile.getPreviousHash(), expectedPrevFileHash,\n-                                verifyHashAfter, fileInstant)) {\n+                                verifyHashAfter, fileName)) {\n                             throw new HashMismatchException(\"Hash mismatch for file \" + fileName);\n                         }\n                         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MTY2OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r443671668", "bodyText": "IllegalArgumentException is generally used for user input. Would be better to create a custom exception like FileReaderException extends ImporterException.", "author": "steven-sheehy", "createdAt": "2020-06-22T16:10:11Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package com.hedera.mirror.importer.filedecoder;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static com.hedera.mirror.importer.util.Utility.readBytes;\n+import static com.hedera.mirror.importer.util.Utility.readInt;\n+\n+import com.swirlds.common.Transaction;\n+import com.swirlds.common.crypto.Signature;\n+import java.io.DataInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.MessageDigest;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.codec.binary.Hex;\n+\n+import com.hedera.mirror.importer.domain.EventFile;\n+import com.hedera.mirror.importer.domain.EventItem;\n+import com.hedera.mirror.importer.exception.HashMismatchException;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+public class EventsFileDecoder {\n+    public static final String HASH_ALGORITHM = \"SHA-384\";\n+    public static final byte EVENT_TYPE_PREV_HASH = 1;       // next 48 bytes are hash384 or previous files\n+    public static final byte EVENT_STREAM_FILE_VERSION_LEGACY = 2;\n+    public static final byte EVENT_STREAM_VERSION = 2;\n+    public static final byte EVENT_STREAM_FILE_VERSION_CURRENT = 3;\n+    public static final byte EVENT_STREAM_START_NO_TRANS_WITH_VERSION = 0x5b;\n+    public static final byte EVENT_STREAM_START_WITH_VERSION = 0x5a;\n+    public static final byte EVENT_COMM_EVENT_LAST = 0x46;\n+\n+    /**\n+     * Decodes event stream file.\n+\n+     * @param filePath path to event file\n+     * @param expectedPrevFileHash expected previous file's hash in current file. Throws {@link HashMismatchException}\n+     *                             on mismatch\n+     * @param verifyHashAfter previous file's hash mismatch is ignored if file is from before this time\n+     * @param eventItemConsumer if not null, consumer is invoked for each event in the file\n+     */\n+    public static EventFile decode(String filePath, String expectedPrevFileHash, Instant verifyHashAfter,\n+                                   Consumer<EventItem> eventItemConsumer) {\n+        EventFile eventFile = new EventFile();\n+        eventFile.setName(filePath);\n+        String fileName = Utility.getFileName(filePath);\n+\n+        try (DataInputStream dis = new DataInputStream(new FileInputStream(filePath))) {\n+            // MessageDigest for getting the file Hash\n+            // suppose file[i] = p[i] || h[i] || c[i];\n+            // p[i] denotes the bytes before previousFileHash;\n+            // h[i] denotes the hash of file i - 1, i.e., previousFileHash;\n+            // c[i] denotes the bytes after previousFileHash;\n+            // '||' means concatenation\n+            // for Version2, h[i + 1] = hash(p[i] || h[i] || c[i]);\n+            // for Version3, h[i + 1] = hash(p[i] || h[i] || hash(c[i]))\n+            MessageDigest md = MessageDigest.getInstance(HASH_ALGORITHM);\n+\n+            int fileVersion = readInt(dis, md);\n+            if (fileVersion < EVENT_STREAM_FILE_VERSION_LEGACY) {\n+                throw new IllegalArgumentException(\"Invalid event stream file version \" + fileVersion);\n+            }\n+            eventFile.setFileVersion(fileVersion);\n+\n+            MessageDigest mdForContent = md;\n+            if (fileVersion >= EVENT_STREAM_FILE_VERSION_CURRENT) {\n+                // For calculating hash(c[i]) separately if version >= 3\n+                mdForContent = MessageDigest.getInstance(HASH_ALGORITHM);\n+            }\n+            while (dis.available() != 0) {\n+                byte typeDelimiter = dis.readByte();\n+                EventItem eventItem;\n+                switch (typeDelimiter) {\n+                    case EVENT_TYPE_PREV_HASH:\n+                        md.update(typeDelimiter);\n+                        byte[] readPrevFileHash = readBytes(dis, 48, md);\n+                        eventFile.setPreviousHash(Hex.encodeHexString(readPrevFileHash));\n+                        Instant fileInstant = Instant.parse(fileName.replaceAll(\".evts\", \"\").replaceAll(\"_\", \":\"));\n+\n+                        if (!Utility.verifyHashChain(eventFile.getPreviousHash(), expectedPrevFileHash,\n+                                verifyHashAfter, fileInstant)) {\n+                            throw new HashMismatchException(\"Hash mismatch for file \" + fileName);\n+                        }\n+                        break;\n+\n+                    case EVENT_STREAM_START_NO_TRANS_WITH_VERSION:\n+                        mdForContent.update(typeDelimiter);\n+                        eventItem = loadEvent(dis, mdForContent, false);\n+                        if (eventItemConsumer != null) {\n+                            eventItemConsumer.accept(eventItem);\n+                        }\n+                        break;\n+\n+                    case EVENT_STREAM_START_WITH_VERSION:\n+                        mdForContent.update(typeDelimiter);\n+                        eventItem = loadEvent(dis, mdForContent, true);\n+                        if (eventItemConsumer != null) {\n+                            eventItemConsumer.accept(eventItem);\n+                        }\n+                        break;\n+\n+                    default:\n+                        throw new IllegalArgumentException(String.format(\n+                                \"Unknown event file delimiter %s for file %s\", typeDelimiter, fileName));\n+                }\n+            }\n+            if (fileVersion >= EVENT_STREAM_FILE_VERSION_CURRENT) {\n+                md.update(mdForContent.digest());\n+            }\n+            if (eventFile.getPreviousHash() == null) {\n+                throw new IllegalArgumentException(\"previous hash is null in file \" + fileName);\n+            }\n+            eventFile.setFileHash(Hex.encodeHexString(md.digest()));\n+            log.trace(\"Calculated file hash for the event file {}\", eventFile.getFileHash());\n+            return eventFile;\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Error parsing bad event file \" + fileName, e);", "originalCommit": "e3ebb26716b48396be28c17d9e60d415a8a32684", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxOTk3MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455319970", "bodyText": "added InvalidEventFileException extends ImporterException", "author": "xin-hedera", "createdAt": "2020-07-15T20:24:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MTY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "51afb7e3595dbb77a64d7ed834ee303bf345f42b", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\nindex 277c944bf..2a58a36f5 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\n\n@@ -98,10 +98,9 @@ public class EventsFileDecoder {\n                         md.update(typeDelimiter);\n                         byte[] readPrevFileHash = readBytes(dis, 48, md);\n                         eventFile.setPreviousHash(Hex.encodeHexString(readPrevFileHash));\n-                        Instant fileInstant = Instant.parse(fileName.replaceAll(\".evts\", \"\").replaceAll(\"_\", \":\"));\n \n                         if (!Utility.verifyHashChain(eventFile.getPreviousHash(), expectedPrevFileHash,\n-                                verifyHashAfter, fileInstant)) {\n+                                verifyHashAfter, fileName)) {\n                             throw new HashMismatchException(\"Hash mismatch for file \" + fileName);\n                         }\n                         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MzUzMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r443673530", "bodyText": "Pass File object so you don't create a duplicate File object unnecessarily via FileInputStream", "author": "steven-sheehy", "createdAt": "2020-06-22T16:13:17Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventFileDownloader.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.hedera.mirror.importer.downloader.event;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import java.io.File;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.codec.binary.Hex;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import software.amazon.awssdk.services.s3.S3AsyncClient;\n+\n+import com.hedera.mirror.importer.addressbook.NetworkAddressBook;\n+import com.hedera.mirror.importer.domain.ApplicationStatusCode;\n+import com.hedera.mirror.importer.domain.EventFile;\n+import com.hedera.mirror.importer.downloader.Downloader;\n+import com.hedera.mirror.importer.exception.HashMismatchException;\n+import com.hedera.mirror.importer.filedecoder.EventsFileDecoder;\n+import com.hedera.mirror.importer.leader.Leader;\n+import com.hedera.mirror.importer.repository.ApplicationStatusRepository;\n+\n+@Log4j2\n+@Named\n+public class EventFileDownloader extends Downloader {\n+\n+    public EventFileDownloader(\n+            S3AsyncClient s3Client, ApplicationStatusRepository applicationStatusRepository,\n+            NetworkAddressBook networkAddressBook, EventDownloaderProperties downloaderProperties,\n+            MeterRegistry meterRegistry) {\n+        super(s3Client, applicationStatusRepository, networkAddressBook, downloaderProperties, meterRegistry);\n+    }\n+\n+    @Leader\n+    @Override\n+    @Scheduled(fixedRateString = \"${hedera.mirror.downloader.event.frequency:500}\")\n+    public void download() {\n+        downloadNextBatch();\n+    }\n+\n+    @Override\n+    protected ApplicationStatusCode getLastValidDownloadedFileKey() {\n+        return ApplicationStatusCode.LAST_VALID_DOWNLOADED_EVENT_FILE;\n+    }\n+\n+    @Override\n+    protected ApplicationStatusCode getLastValidDownloadedFileHashKey() {\n+        return ApplicationStatusCode.LAST_VALID_DOWNLOADED_EVENT_FILE_HASH;\n+    }\n+\n+    /**\n+     * Checks that hash of data file matches the verified hash and that data file is next in line based on previous file\n+     * hash. Returns false if any condition is false.\n+     */\n+    @Override\n+    protected boolean verifyDataFile(File file, byte[] verifiedHash) {\n+        String expectedPrevFileHash = applicationStatusRepository.findByStatusCode(getLastValidDownloadedFileHashKey());\n+        try {\n+            EventFile eventFile = EventsFileDecoder.decode(file.getPath(), expectedPrevFileHash,", "originalCommit": "e3ebb26716b48396be28c17d9e60d415a8a32684", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMyMTI5Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455321296", "bodyText": "updated.\npublic interface EventFileReader {\n    /**\n     * Read event file. Throws {@link InvalidEventFileException} if file is malformatted.\n     *\n     * @param file event file object\n     * @return {@link EventFile} object\n     */\n    EventFile read(File file);\n}", "author": "xin-hedera", "createdAt": "2020-07-15T20:26:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MzUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "ea19eee59ac294cba24299f786db89b507f11913", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventFileDownloader.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventFileDownloader.java\nindex 3fdb30402..8394a9f91 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventFileDownloader.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventFileDownloader.java\n\n@@ -20,20 +20,21 @@ package com.hedera.mirror.importer.downloader.event;\n  * \u200d\n  */\n \n+import com.hedera.mirror.importer.exception.ImporterException;\n+\n import io.micrometer.core.instrument.MeterRegistry;\n import java.io.File;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.codec.binary.Hex;\n import org.springframework.scheduling.annotation.Scheduled;\n+import com.hedera.mirror.importer.reader.event.EventFileReader;\n import software.amazon.awssdk.services.s3.S3AsyncClient;\n \n import com.hedera.mirror.importer.addressbook.NetworkAddressBook;\n import com.hedera.mirror.importer.domain.ApplicationStatusCode;\n import com.hedera.mirror.importer.domain.EventFile;\n import com.hedera.mirror.importer.downloader.Downloader;\n-import com.hedera.mirror.importer.exception.HashMismatchException;\n-import com.hedera.mirror.importer.filedecoder.EventsFileDecoder;\n import com.hedera.mirror.importer.leader.Leader;\n import com.hedera.mirror.importer.repository.ApplicationStatusRepository;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzNTAyNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r443835025", "bodyText": "Would prefer deserialize logic not be a static method or coupled with the POJO. Recommend moving here.", "author": "steven-sheehy", "createdAt": "2020-06-22T21:24:51Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package com.hedera.mirror.importer.filedecoder;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static com.hedera.mirror.importer.util.Utility.readBytes;\n+import static com.hedera.mirror.importer.util.Utility.readInt;\n+\n+import com.swirlds.common.Transaction;\n+import com.swirlds.common.crypto.Signature;\n+import java.io.DataInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.MessageDigest;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.codec.binary.Hex;\n+\n+import com.hedera.mirror.importer.domain.EventFile;\n+import com.hedera.mirror.importer.domain.EventItem;\n+import com.hedera.mirror.importer.exception.HashMismatchException;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+public class EventsFileDecoder {\n+    public static final String HASH_ALGORITHM = \"SHA-384\";\n+    public static final byte EVENT_TYPE_PREV_HASH = 1;       // next 48 bytes are hash384 or previous files\n+    public static final byte EVENT_STREAM_FILE_VERSION_LEGACY = 2;\n+    public static final byte EVENT_STREAM_VERSION = 2;\n+    public static final byte EVENT_STREAM_FILE_VERSION_CURRENT = 3;\n+    public static final byte EVENT_STREAM_START_NO_TRANS_WITH_VERSION = 0x5b;\n+    public static final byte EVENT_STREAM_START_WITH_VERSION = 0x5a;\n+    public static final byte EVENT_COMM_EVENT_LAST = 0x46;\n+\n+    /**\n+     * Decodes event stream file.\n+\n+     * @param filePath path to event file\n+     * @param expectedPrevFileHash expected previous file's hash in current file. Throws {@link HashMismatchException}\n+     *                             on mismatch\n+     * @param verifyHashAfter previous file's hash mismatch is ignored if file is from before this time\n+     * @param eventItemConsumer if not null, consumer is invoked for each event in the file\n+     */\n+    public static EventFile decode(String filePath, String expectedPrevFileHash, Instant verifyHashAfter,\n+                                   Consumer<EventItem> eventItemConsumer) {\n+        EventFile eventFile = new EventFile();\n+        eventFile.setName(filePath);\n+        String fileName = Utility.getFileName(filePath);\n+\n+        try (DataInputStream dis = new DataInputStream(new FileInputStream(filePath))) {\n+            // MessageDigest for getting the file Hash\n+            // suppose file[i] = p[i] || h[i] || c[i];\n+            // p[i] denotes the bytes before previousFileHash;\n+            // h[i] denotes the hash of file i - 1, i.e., previousFileHash;\n+            // c[i] denotes the bytes after previousFileHash;\n+            // '||' means concatenation\n+            // for Version2, h[i + 1] = hash(p[i] || h[i] || c[i]);\n+            // for Version3, h[i + 1] = hash(p[i] || h[i] || hash(c[i]))\n+            MessageDigest md = MessageDigest.getInstance(HASH_ALGORITHM);\n+\n+            int fileVersion = readInt(dis, md);\n+            if (fileVersion < EVENT_STREAM_FILE_VERSION_LEGACY) {\n+                throw new IllegalArgumentException(\"Invalid event stream file version \" + fileVersion);\n+            }\n+            eventFile.setFileVersion(fileVersion);\n+\n+            MessageDigest mdForContent = md;\n+            if (fileVersion >= EVENT_STREAM_FILE_VERSION_CURRENT) {\n+                // For calculating hash(c[i]) separately if version >= 3\n+                mdForContent = MessageDigest.getInstance(HASH_ALGORITHM);\n+            }\n+            while (dis.available() != 0) {\n+                byte typeDelimiter = dis.readByte();\n+                EventItem eventItem;\n+                switch (typeDelimiter) {\n+                    case EVENT_TYPE_PREV_HASH:\n+                        md.update(typeDelimiter);\n+                        byte[] readPrevFileHash = readBytes(dis, 48, md);\n+                        eventFile.setPreviousHash(Hex.encodeHexString(readPrevFileHash));\n+                        Instant fileInstant = Instant.parse(fileName.replaceAll(\".evts\", \"\").replaceAll(\"_\", \":\"));\n+\n+                        if (!Utility.verifyHashChain(eventFile.getPreviousHash(), expectedPrevFileHash,\n+                                verifyHashAfter, fileInstant)) {\n+                            throw new HashMismatchException(\"Hash mismatch for file \" + fileName);\n+                        }\n+                        break;\n+\n+                    case EVENT_STREAM_START_NO_TRANS_WITH_VERSION:\n+                        mdForContent.update(typeDelimiter);\n+                        eventItem = loadEvent(dis, mdForContent, false);\n+                        if (eventItemConsumer != null) {\n+                            eventItemConsumer.accept(eventItem);\n+                        }\n+                        break;\n+\n+                    case EVENT_STREAM_START_WITH_VERSION:\n+                        mdForContent.update(typeDelimiter);\n+                        eventItem = loadEvent(dis, mdForContent, true);\n+                        if (eventItemConsumer != null) {\n+                            eventItemConsumer.accept(eventItem);\n+                        }\n+                        break;\n+\n+                    default:\n+                        throw new IllegalArgumentException(String.format(\n+                                \"Unknown event file delimiter %s for file %s\", typeDelimiter, fileName));\n+                }\n+            }\n+            if (fileVersion >= EVENT_STREAM_FILE_VERSION_CURRENT) {\n+                md.update(mdForContent.digest());\n+            }\n+            if (eventFile.getPreviousHash() == null) {\n+                throw new IllegalArgumentException(\"previous hash is null in file \" + fileName);\n+            }\n+            eventFile.setFileHash(Hex.encodeHexString(md.digest()));\n+            log.trace(\"Calculated file hash for the event file {}\", eventFile.getFileHash());\n+            return eventFile;\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Error parsing bad event file \" + fileName, e);\n+        }\n+    }\n+\n+    private static EventItem loadEvent(DataInputStream dis, MessageDigest md, boolean hasTransactions)\n+            throws IOException {\n+        EventItem eventItem = new EventItem();\n+        int version = readInt(dis, md);\n+        if (version != EVENT_STREAM_VERSION) {\n+            throw new IllegalArgumentException(\"Invalid EventStream format version : \" + version);\n+        }\n+\n+        eventItem.setCreatorId(readLong(dis, md));\n+        eventItem.setCreatorSeq(readLong(dis, md));\n+        eventItem.setOtherId(readLong(dis, md));\n+        eventItem.setOtherSeq(readLong(dis, md));\n+        eventItem.setSelfParentGen(readLong(dis, md));\n+        eventItem.setOtherParentGen(readLong(dis, md));\n+        eventItem.setSelfParentHash(readBytesWithChecksum(dis, md, true));\n+        eventItem.setOtherParentHash(readBytesWithChecksum(dis, md, true));\n+        if (hasTransactions) {\n+            eventItem.setTransactions(readTransactions(dis, md));\n+        }\n+        eventItem.setTimeCreated(readInstant(dis, md));\n+        eventItem.setSignature(readBytesWithChecksum(dis, md, false));\n+\n+        byte eventEndMarker = dis.readByte();\n+        if (eventEndMarker != EVENT_COMM_EVENT_LAST) {\n+            throw new IllegalArgumentException(\"Invalid event end marker : \" + eventEndMarker);\n+        }\n+        md.update(EVENT_COMM_EVENT_LAST);\n+\n+        eventItem.setHash(readBytesWithChecksum(dis, md, false));  // event's hash\n+        eventItem.setConsensusTimeStamp(readInstant(dis, md));\n+        eventItem.setConsensusOrder(readLong(dis, md));\n+        if (log.isTraceEnabled()) {\n+            log.trace(\"Event: {}\", eventItem);\n+        }\n+        return eventItem;\n+    }\n+\n+    /**\n+     * Read all {@link Transaction}s from the {@link DataInputStream}.\n+     *\n+     * @throws IOException  if the internal checksum cannot be validated, or if any error occurs when reading the file\n+     */\n+    public static List<Transaction> readTransactions(DataInputStream dis, MessageDigest md) throws IOException {\n+        int numTransactions = readInt(dis, md);\n+        if (numTransactions < 0) {\n+            throw new IllegalArgumentException(\"Invalid number of transactions: \" + numTransactions);\n+        }\n+        readAndValidateChecksum(dis, 1873 - numTransactions, md);\n+        List<Transaction> transactions = new ArrayList<>(numTransactions);\n+        for (int i = 0; i < numTransactions; i++) {\n+            transactions.add(deserialize(dis, md));\n+        }\n+        return transactions;\n+    }\n+\n+    /**\n+     * Read single {@link Transaction} from the {@link DataInputStream}.\n+     *\n+     * @throws IOException  if the internal checksum cannot be validated, or if any error occurs when reading the file\n+     */\n+    private static Transaction deserialize(DataInputStream dis, MessageDigest md) throws IOException {\n+        int txLen = readInt(dis, md);\n+        if (txLen < 0) {\n+            throw new IllegalArgumentException(\"Invalid number of transactions: \" + txLen);\n+        }\n+        readAndValidateChecksum(dis, 277 - txLen, md);\n+        readBoolean(dis, md); // system field of transaction\n+        byte[] contents = readBytes(dis, txLen, md);\n+        Signature[] signatures = readSignatures(dis, md);\n+        return new Transaction(contents, signatures);\n+    }\n+\n+    /**\n+     * Read all {@link Signature}s from the {@link DataInputStream}.\n+     *\n+     * @throws IOException  if the internal checksum cannot be validated, or if any error occurs when reading the file\n+     */\n+    private static Signature[] readSignatures(DataInputStream dis, MessageDigest md) throws IOException {\n+        int numSigs = readInt(dis, md);\n+        if (numSigs < 0) {\n+            throw new IllegalArgumentException(\"Invalid number of signatures: \" + numSigs);\n+        }\n+        readAndValidateChecksum(dis, 353 - numSigs, md);\n+        Signature[] signatures = null;\n+        if (numSigs > 0) {\n+            signatures = new Signature[numSigs];\n+            for (int i = 0; i < numSigs; i++) {\n+                signatures[i] = Signature.deserialize(dis, null);", "originalCommit": "e3ebb26716b48396be28c17d9e60d415a8a32684", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMyMDI2OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455320268", "bodyText": "will be address in #812 since this PR only handles events downloader.", "author": "xin-hedera", "createdAt": "2020-07-15T20:24:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzNTAyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "51afb7e3595dbb77a64d7ed834ee303bf345f42b", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\nindex 277c944bf..2a58a36f5 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/filedecoder/EventsFileDecoder.java\n\n@@ -98,10 +98,9 @@ public class EventsFileDecoder {\n                         md.update(typeDelimiter);\n                         byte[] readPrevFileHash = readBytes(dis, 48, md);\n                         eventFile.setPreviousHash(Hex.encodeHexString(readPrevFileHash));\n-                        Instant fileInstant = Instant.parse(fileName.replaceAll(\".evts\", \"\").replaceAll(\"_\", \":\"));\n \n                         if (!Utility.verifyHashChain(eventFile.getPreviousHash(), expectedPrevFileHash,\n-                                verifyHashAfter, fileInstant)) {\n+                                verifyHashAfter, fileName)) {\n                             throw new HashMismatchException(\"Hash mismatch for file \" + fileName);\n                         }\n                         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzNTI4NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r443835285", "bodyText": "Will we be storing event item in the database?", "author": "steven-sheehy", "createdAt": "2020-06-22T21:25:20Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EventItem.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.swirlds.common.Transaction;\n+import java.time.Instant;\n+import java.util.List;\n+import lombok.Data;\n+\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Data\n+public class EventItem {", "originalCommit": "e3ebb26716b48396be28c17d9e60d415a8a32684", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE3MzY1Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455173657", "bodyText": "it should be stored in the database. I will delete the class for now since it's not used after my changes and in the event parser issue we will add it back and persist it in database.", "author": "xin-hedera", "createdAt": "2020-07-15T16:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzNTI4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ea19eee59ac294cba24299f786db89b507f11913", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EventItem.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EventItem.java\nindex 1a6263afa..f766e36bf 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EventItem.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EventItem.java\n\n@@ -20,9 +20,7 @@ package com.hedera.mirror.importer.domain;\n  * \u200d\n  */\n \n-import com.swirlds.common.Transaction;\n import java.time.Instant;\n-import java.util.List;\n import lombok.Data;\n \n import com.hedera.mirror.importer.util.Utility;\n"}}, {"oid": "2e4674d2ba5a87cbb3c6f93009cdf9423c6d1bcc", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2e4674d2ba5a87cbb3c6f93009cdf9423c6d1bcc", "message": "Merge branch 'master' into events_downloader\n\n# Conflicts:\n#\thedera-mirror-importer/src/main/java/com/hedera/mirror/importer/util/Utility.java", "committedDate": "2020-07-10T15:44:37Z", "type": "commit"}, {"oid": "51afb7e3595dbb77a64d7ed834ee303bf345f42b", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/51afb7e3595dbb77a64d7ed834ee303bf345f42b", "message": "revert to extract timestamp from filename\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-07-10T15:58:16Z", "type": "commit"}, {"oid": "ab711eb2a2ccc51554bb06e706c6f1ca0cd30787", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ab711eb2a2ccc51554bb06e706c6f1ca0cd30787", "message": "fix ossrh-swirlds-staging repo url\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-07-10T16:06:25Z", "type": "commit"}, {"oid": "ea19eee59ac294cba24299f786db89b507f11913", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ea19eee59ac294cba24299f786db89b507f11913", "message": "remove dependency on swirlds.jar, add EventFileReader, update tests\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-07-13T16:51:34Z", "type": "commit"}, {"oid": "46bd0e91209973956414751558cd1201da7cdbcc", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/46bd0e91209973956414751558cd1201da7cdbcc", "message": "Merge remote-tracking branch 'origin/master' into events_downloader", "committedDate": "2020-07-13T17:21:08Z", "type": "commit"}, {"oid": "609a7da83cb63161538af05bb0a68e508f59cf9a", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/609a7da83cb63161538af05bb0a68e508f59cf9a", "message": "reuse the file object\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-07-13T22:27:18Z", "type": "commit"}, {"oid": "d6171b5e513d6e0dce9706955e7f2ea5139cd3ed", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d6171b5e513d6e0dce9706955e7f2ea5139cd3ed", "message": "simplify EventFileReader, make it just read the file to extract needed fields\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-07-14T14:32:03Z", "type": "commit"}, {"oid": "8b07e1dacbc53fb070d5a55e93891c7a9763df30", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8b07e1dacbc53fb070d5a55e93891c7a9763df30", "message": "change event downloader default batchSize to 100, remove EventItem.java\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-07-15T16:34:44Z", "type": "commit"}, {"oid": "986f0e08a59a27037a704fd78b7078294f0e1bc8", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/986f0e08a59a27037a704fd78b7078294f0e1bc8", "message": "resolve merge conflict\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-07-15T17:01:28Z", "type": "commit"}, {"oid": "017800baa9518bcd2e033b73f89775500cec8099", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/017800baa9518bcd2e033b73f89775500cec8099", "message": "Merge remote-tracking branch 'origin/master' into events_downloader\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-07-15T17:20:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI3ODIzMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455278230", "bodyText": "Configuration doc says 1m but this says 5s. Update them to agree", "author": "Nana-EC", "createdAt": "2020-07-15T19:06:12Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventDownloaderProperties.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.hedera.mirror.importer.downloader.event;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.NotNull;\n+import lombok.Data;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.validation.annotation.Validated;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.downloader.CommonDownloaderProperties;\n+import com.hedera.mirror.importer.downloader.DownloaderProperties;\n+\n+@Data\n+@Validated\n+@ConfigurationProperties(\"hedera.mirror.importer.downloader.event\")\n+public class EventDownloaderProperties implements DownloaderProperties {\n+\n+    private final MirrorProperties mirrorProperties;\n+\n+    private final CommonDownloaderProperties common;\n+\n+    @Min(1)\n+    private int batchSize = 100;\n+\n+    private boolean enabled = false;\n+\n+    @NotNull\n+    private Duration frequency = Duration.ofMillis(5000L);", "originalCommit": "017800baa9518bcd2e033b73f89775500cec8099", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxMzg4OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455313889", "bodyText": "made the change. also updated the description to match other frequency fields.", "author": "xin-hedera", "createdAt": "2020-07-15T20:12:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI3ODIzMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI4MTcyOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455281728", "bodyText": "nit: eventsStreams/event?\nAssuming you want standard with accountBalances (accountBalances/balance) and records (recordstreams/record)", "author": "Nana-EC", "createdAt": "2020-07-15T19:12:39Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventDownloaderProperties.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.hedera.mirror.importer.downloader.event;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.NotNull;\n+import lombok.Data;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.validation.annotation.Validated;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.downloader.CommonDownloaderProperties;\n+import com.hedera.mirror.importer.downloader.DownloaderProperties;\n+\n+@Data\n+@Validated\n+@ConfigurationProperties(\"hedera.mirror.importer.downloader.event\")\n+public class EventDownloaderProperties implements DownloaderProperties {\n+\n+    private final MirrorProperties mirrorProperties;\n+\n+    private final CommonDownloaderProperties common;\n+\n+    @Min(1)\n+    private int batchSize = 100;\n+\n+    private boolean enabled = false;\n+\n+    @NotNull\n+    private Duration frequency = Duration.ofMillis(5000L);\n+\n+    private boolean keepSignatures = false;\n+\n+    @NotBlank\n+    private String prefix = \"eventsStreams/events_\";", "originalCommit": "017800baa9518bcd2e033b73f89775500cec8099", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxMDIzMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455310233", "bodyText": "This is the actual prefix in S3 that devops uploads to. It's not under our control. events_ is correct.", "author": "steven-sheehy", "createdAt": "2020-07-15T20:05:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI4MTcyOA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "78d6cde0665ba78f10b6a02ac779880320e46ccc", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/78d6cde0665ba78f10b6a02ac779880320e46ccc", "message": "update default value of hedera.mirror.importer.downloader.event.frequency in configuration.md to match implementation\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-07-15T20:11:34Z", "type": "commit"}, {"oid": "c373107aed5008870055f7ae1e9fce3db7718f67", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c373107aed5008870055f7ae1e9fce3db7718f67", "message": "set a larger timeout to make parseAndIngestMultipleFiles60000Transactions happy\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-07-16T02:33:16Z", "type": "commit"}, {"oid": "c373107aed5008870055f7ae1e9fce3db7718f67", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c373107aed5008870055f7ae1e9fce3db7718f67", "message": "set a larger timeout to make parseAndIngestMultipleFiles60000Transactions happy\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-07-16T02:33:16Z", "type": "forcePushed"}, {"oid": "b55662475c9d31e2a42ec98d6c1aad5be284b39b", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b55662475c9d31e2a42ec98d6c1aad5be284b39b", "message": "add test cases for EventFileReaderImpl and disable fragmentedMessagesGroupAcrossHistoricAndIncoming\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-07-16T16:02:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1NzIxMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455957212", "bodyText": "Nana's PR fixes it. Let's make sure if this is merged first that Nana's PR removes this.", "author": "steven-sheehy", "createdAt": "2020-07-16T17:36:47Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/controller/ConsensusControllerTest.java", "diffHunk": "@@ -221,6 +222,7 @@ void subscribeVerifySequence() throws Exception {\n                 .verify(Duration.ofMillis(1000));\n     }\n \n+    @Disabled(\"Temporarily disable it since it fails randomly\")", "originalCommit": "b55662475c9d31e2a42ec98d6c1aad5be284b39b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwNzUzNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r456007534", "bodyText": "will remove it.", "author": "xin-hedera", "createdAt": "2020-07-16T19:02:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1NzIxMg=="}], "type": "inlineReview", "revised_code": {"commit": "676410722ceb9cffef76443931a1801f354791ce", "chunk": "diff --git a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/controller/ConsensusControllerTest.java b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/controller/ConsensusControllerTest.java\nindex 48471a86f..a907dba19 100644\n--- a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/controller/ConsensusControllerTest.java\n+++ b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/controller/ConsensusControllerTest.java\n\n@@ -222,7 +222,6 @@ public class ConsensusControllerTest extends GrpcIntegrationTest {\n                 .verify(Duration.ofMillis(1000));\n     }\n \n-    @Disabled(\"Temporarily disable it since it fails randomly\")\n     @Test\n     void fragmentedMessagesGroupAcrossHistoricAndIncoming() {\n         Instant now = Instant.now();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1ODQyMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455958420", "bodyText": "Should be 5000 to match readme and properties", "author": "steven-sheehy", "createdAt": "2020-07-16T17:38:46Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventFileDownloader.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.hedera.mirror.importer.downloader.event;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hedera.mirror.importer.exception.ImporterException;\n+\n+import com.hedera.mirror.importer.util.Utility;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import java.io.File;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.io.FilenameUtils;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import com.hedera.mirror.importer.reader.event.EventFileReader;\n+import software.amazon.awssdk.services.s3.S3AsyncClient;\n+\n+import com.hedera.mirror.importer.addressbook.NetworkAddressBook;\n+import com.hedera.mirror.importer.domain.ApplicationStatusCode;\n+import com.hedera.mirror.importer.domain.EventFile;\n+import com.hedera.mirror.importer.downloader.Downloader;\n+import com.hedera.mirror.importer.leader.Leader;\n+import com.hedera.mirror.importer.repository.ApplicationStatusRepository;\n+\n+import static com.hedera.mirror.importer.util.Utility.verifyHashChain;\n+\n+@Log4j2\n+@Named\n+public class EventFileDownloader extends Downloader {\n+\n+    private EventFileReader eventFileReader;\n+\n+    public EventFileDownloader(\n+            S3AsyncClient s3Client, ApplicationStatusRepository applicationStatusRepository,\n+            NetworkAddressBook networkAddressBook, EventDownloaderProperties downloaderProperties,\n+            MeterRegistry meterRegistry, EventFileReader eventFileReader) {\n+        super(s3Client, applicationStatusRepository, networkAddressBook, downloaderProperties, meterRegistry);\n+        this.eventFileReader = eventFileReader;\n+    }\n+\n+    @Leader\n+    @Override\n+    @Scheduled(fixedRateString = \"${hedera.mirror.downloader.event.frequency:500}\")", "originalCommit": "b55662475c9d31e2a42ec98d6c1aad5be284b39b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAyNDM1NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r456024355", "bodyText": "updated", "author": "xin-hedera", "createdAt": "2020-07-16T19:31:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1ODQyMA=="}], "type": "inlineReview", "revised_code": {"commit": "676410722ceb9cffef76443931a1801f354791ce", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventFileDownloader.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventFileDownloader.java\nindex 517024f5c..e472cbefe 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventFileDownloader.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/event/EventFileDownloader.java\n\n@@ -59,7 +59,7 @@ public class EventFileDownloader extends Downloader {\n \n     @Leader\n     @Override\n-    @Scheduled(fixedRateString = \"${hedera.mirror.downloader.event.frequency:500}\")\n+    @Scheduled(fixedRateString = \"${hedera.mirror.downloader.event.frequency:5000}\")\n     public void download() {\n         downloadNextBatch();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5MTI3Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r455991276", "bodyText": "These constants aren't used outside of EventFileReaderImpl and its associated test. Would prefer they be moved as private members in EventFileReaderImpl.", "author": "steven-sheehy", "createdAt": "2020-07-16T18:33:39Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/event/EventFileConstants.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.hedera.mirror.importer.reader.event;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+public class EventFileConstants {\n+    public static final String HASH_ALGORITHM = \"SHA-384\";", "originalCommit": "b55662475c9d31e2a42ec98d6c1aad5be284b39b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwNjgzNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r456006836", "bodyText": "my thought is in the parser there will be a different class to parse the individual events and that class will also use these constants.\nAlso, in the future when we may have new format, this is the place to aggregate all the constants.\nI can move it into EventFileReaderImpl now. What's your thought?", "author": "xin-hedera", "createdAt": "2020-07-16T19:01:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5MTI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxMDA1MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r456010051", "bodyText": "I think it should be moved into EventFileReaderImpl. If there's a new format, it would be EventFileReaderImplV4 and have potentially different constants. Or if there's overlap it can be moved to EventFileReader interface or to an abstract class.\nI don't think there will be a different class to parse the individual events, it would just be an extra parameter or overloaded method to existing EventFileReader.", "author": "steven-sheehy", "createdAt": "2020-07-16T19:07:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5MTI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAyNDc1NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/832#discussion_r456024754", "bodyText": "sure. just moved the constants into EventFileReaderImpl", "author": "xin-hedera", "createdAt": "2020-07-16T19:31:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5MTI3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "676410722ceb9cffef76443931a1801f354791ce", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/event/EventFileConstants.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/event/EventFileConstants.java\ndeleted file mode 100644\nindex 654bb21d3..000000000\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/event/EventFileConstants.java\n+++ /dev/null\n\n@@ -1,34 +0,0 @@\n-package com.hedera.mirror.importer.reader.event;\n-\n-/*-\n- * \u200c\n- * Hedera Mirror Node\n- * \u200b\n- * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n- * \u200b\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * \u200d\n- */\n-\n-public class EventFileConstants {\n-    public static final String HASH_ALGORITHM = \"SHA-384\";\n-    public static final byte EVENT_TYPE_PREV_HASH = 1; // next 48 bytes are hash384 of previous files\n-    public static final int  EVENT_PREV_HASH_LENGTH = 48; // sha384 - 48 bytes\n-    public static final byte EVENT_STREAM_FILE_VERSION_2 = 2;\n-    public static final byte EVENT_STREAM_FILE_VERSION_3 = 3;\n-    public static final byte EVENT_STREAM_START_NO_TRANS_WITH_VERSION = 0x5b;\n-    public static final byte EVENT_STREAM_START_WITH_VERSION = 0x5a;\n-    public static final byte EVENT_COMM_EVENT_LAST = 0x46;\n-    public static final byte EVENT_STREAM_EVENT_VERSION_2 = 2; // version 2 event data\n-    public static final byte EVENT_STREAM_EVENT_VERSION_3 = 3; // version 3 event data\n-}\n"}}, {"oid": "676410722ceb9cffef76443931a1801f354791ce", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/676410722ceb9cffef76443931a1801f354791ce", "message": "allow content of event stream file to be empty, update test cases, remove EventFileConstants\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-07-16T19:24:47Z", "type": "commit"}, {"oid": "7cd3be35000b207093c6a0ef7a4bce662dd8dea3", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7cd3be35000b207093c6a0ef7a4bce662dd8dea3", "message": "Merge remote-tracking branch 'origin/master' into events_downloader", "committedDate": "2020-07-16T19:26:57Z", "type": "commit"}]}