{"pr_number": 1339, "pr_title": "Add rest percentage check to monitor", "pr_createdAt": "2020-12-09T05:54:45Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339", "timeline": [{"oid": "30efe73fc051ff202b682cb24326c4f7e25927f8", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/30efe73fc051ff202b682cb24326c4f7e25927f8", "message": "Add rest percentage check to monitor\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-09T05:50:26Z", "type": "commit"}, {"oid": "720cb7e10568ffd5d934ac38df7b91b94c383ec7", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/720cb7e10568ffd5d934ac38df7b91b94c383ec7", "message": "Fix test\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-09T17:46:37Z", "type": "commit"}, {"oid": "405a09212d40afccab4cc5c6ce55a0ff80e39c18", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/405a09212d40afccab4cc5c6ce55a0ff80e39c18", "message": "Merge branch 'master' into monitor_spot_check_rest_subscriber", "committedDate": "2020-12-09T20:59:11Z", "type": "commit"}, {"oid": "fee077a639c11ccf8e716042ea8d31a5a3818f4d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/fee077a639c11ccf8e716042ea8d31a5a3818f4d", "message": "Refactor and add test\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-10T05:38:38Z", "type": "commit"}, {"oid": "97ce7363b6f882439a034c9c4c7601250c5c992c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/97ce7363b6f882439a034c9c4c7601250c5c992c", "message": "Refactor\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-10T05:43:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyNDI0Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540524243", "bodyText": "It shouldn't be greater than 1. So @Min(0) @Max(1) would be better.", "author": "steven-sheehy", "createdAt": "2020-12-10T21:54:01Z", "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriberProperties.java", "diffHunk": "@@ -38,4 +39,7 @@\n     public long getLimit() {\n         return limit > 0 ? limit : Long.MAX_VALUE;\n     }\n+\n+    @PositiveOrZero", "originalCommit": "97ce7363b6f882439a034c9c4c7601250c5c992c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NDU1MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540584551", "bodyText": "Makes sense, I hesitated when I noticed the documentation said doubles aren't supported, but it's working as expected and has been changed.", "author": "ijungmann", "createdAt": "2020-12-10T23:47:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyNDI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "06ee39b2aba887eae2931b45978c98ddf09b6b83", "chunk": "diff --git a/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriberProperties.java b/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriberProperties.java\nindex 95e8d5e37..a96832229 100644\n--- a/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriberProperties.java\n+++ b/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriberProperties.java\n\n@@ -40,6 +41,7 @@ public class RestSubscriberProperties extends AbstractSubscriberProperties {\n         return limit > 0 ? limit : Long.MAX_VALUE;\n     }\n \n-    @PositiveOrZero\n-    private double validationPercentage = 1.0;\n+    @Min(0)\n+    @Max(1)\n+    private double samplePercent = 1.0;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzMzk4Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540533986", "bodyText": "Percentage is grammatically used for general measurements and not specific values. We should use percent instead.\nBut really what we're doing here is sampling. Generally that's measured in total sample size or sample rate/frequency. Ours is a sample percentage of the transaction rate. So we should either name it sampleRate or samplePercent to make clear it's a percentage.", "author": "steven-sheehy", "createdAt": "2020-12-10T22:10:44Z", "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriberProperties.java", "diffHunk": "@@ -38,4 +39,7 @@\n     public long getLimit() {\n         return limit > 0 ? limit : Long.MAX_VALUE;\n     }\n+\n+    @PositiveOrZero\n+    private double validationPercentage = 1.0;", "originalCommit": "97ce7363b6f882439a034c9c4c7601250c5c992c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NDc4Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540584782", "bodyText": "Changed to samplePercent", "author": "ijungmann", "createdAt": "2020-12-10T23:47:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzMzk4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "06ee39b2aba887eae2931b45978c98ddf09b6b83", "chunk": "diff --git a/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriberProperties.java b/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriberProperties.java\nindex 95e8d5e37..a96832229 100644\n--- a/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriberProperties.java\n+++ b/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriberProperties.java\n\n@@ -40,6 +41,7 @@ public class RestSubscriberProperties extends AbstractSubscriberProperties {\n         return limit > 0 ? limit : Long.MAX_VALUE;\n     }\n \n-    @PositiveOrZero\n-    private double validationPercentage = 1.0;\n+    @Min(0)\n+    @Max(1)\n+    private double samplePercent = 1.0;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzNDQ3Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540534472", "bodyText": "We should have tests for 100% and for a percent in between with a large enough sample size. See ConfigurableTransactionGeneratorTest for an example.", "author": "steven-sheehy", "createdAt": "2020-12-10T22:11:35Z", "path": "hedera-mirror-monitor/src/test/java/com/hedera/mirror/monitor/subscribe/RestSubscriberTest.java", "diffHunk": "@@ -170,6 +170,19 @@ void neverRecovers() throws Exception {\n         assertMetric(0L);\n     }\n \n+    @Test\n+    void zeroValidationPercentage() throws InterruptedException {", "originalCommit": "97ce7363b6f882439a034c9c4c7601250c5c992c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY2MTgwNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540661804", "bodyText": "Added tests for 100% and 75%, and reworked all 3 tests to run 1000 responses.", "author": "ijungmann", "createdAt": "2020-12-11T03:22:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzNDQ3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b3773a3c65198f68c3ed88ab620fc6675f244d15", "chunk": "diff --git a/hedera-mirror-monitor/src/test/java/com/hedera/mirror/monitor/subscribe/RestSubscriberTest.java b/hedera-mirror-monitor/src/test/java/com/hedera/mirror/monitor/subscribe/RestSubscriberTest.java\nindex e5d84694e..d206f848c 100644\n--- a/hedera-mirror-monitor/src/test/java/com/hedera/mirror/monitor/subscribe/RestSubscriberTest.java\n+++ b/hedera-mirror-monitor/src/test/java/com/hedera/mirror/monitor/subscribe/RestSubscriberTest.java\n\n@@ -171,18 +173,61 @@ class RestSubscriberTest {\n     }\n \n     @Test\n-    void zeroValidationPercentage() throws InterruptedException {\n-        countDownLatch = new CountDownLatch(2);\n-        subscriberProperties.setValidationPercentage(0);\n+    void zeroSamplePercent() throws InterruptedException {\n+        subscriberProperties.setSamplePercent(0.0);\n \n-        restSubscriber.onPublish(publishResponse());\n-        restSubscriber.onPublish(publishResponse());\n+        int sampleSize = 1000;\n+        countDownLatch = new CountDownLatch(sampleSize);\n+        subscriberProperties.setLimit(sampleSize);\n+        this.restSubscriber = new RestSubscriber(meterRegistry, monitorProperties, subscriberProperties, builder);\n+\n+        for (int i = 0; i < sampleSize; ++i) {\n+            restSubscriber.onPublish(publishResponse());\n+        }\n \n-        countDownLatch.await(500, TimeUnit.MILLISECONDS);\n         verify(exchangeFunction, times(0)).exchange(Mockito.isA(ClientRequest.class));\n         assertMetric(0L);\n     }\n \n+    @Test\n+    void middleSamplePercent() throws InterruptedException {\n+        subscriberProperties.setSamplePercent(.75);\n+\n+        int sampleSize = 1000;\n+        countDownLatch = new CountDownLatch(700);\n+        subscriberProperties.setLimit(sampleSize);\n+        this.restSubscriber = new RestSubscriber(meterRegistry, monitorProperties, subscriberProperties, builder);\n+        Mockito.when(exchangeFunction.exchange(Mockito.any(ClientRequest.class))).thenReturn(response(HttpStatus.OK));\n+\n+        for (int i = 0; i < sampleSize; ++i) {\n+            restSubscriber.onPublish(publishResponse());\n+        }\n+\n+        countDownLatch.await(500, TimeUnit.MILLISECONDS);\n+        verify(exchangeFunction, atLeast(700)).exchange(Mockito.isA(ClientRequest.class));\n+        verify(exchangeFunction, atMost(800)).exchange(Mockito.isA(ClientRequest.class));\n+    }\n+\n+    @Test\n+    void oneHundredSamplePercent() throws Exception {\n+        subscriberProperties.setSamplePercent(1.0);\n+\n+        int sampleSize = 1000;\n+        countDownLatch = new CountDownLatch(700);\n+        subscriberProperties.setLimit(sampleSize);\n+        this.restSubscriber = new RestSubscriber(meterRegistry, monitorProperties, subscriberProperties, builder);\n+        Mockito.when(exchangeFunction.exchange(Mockito.any(ClientRequest.class))).thenReturn(response(HttpStatus.OK));\n+\n+        for (int i = 0; i < sampleSize; ++i) {\n+            restSubscriber.onPublish(publishResponse());\n+        }\n+\n+        countDownLatch.await(500, TimeUnit.MILLISECONDS);\n+        verify(exchangeFunction, times(1000)).exchange(Mockito.isA(ClientRequest.class));\n+\n+        assertMetric(1000L);\n+    }\n+\n     private PublishResponse publishResponse() {\n         return PublishResponse.builder()\n                 .request(PublishRequest.builder().type(TransactionType.CONSENSUS_SUBMIT_MESSAGE).build())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzNTk4NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540535985", "bodyText": "Avoid the property reflection penalty by getting the percent once outside the flux as a primitive.", "author": "steven-sheehy", "createdAt": "2020-12-10T22:14:02Z", "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java", "diffHunk": "@@ -72,12 +74,14 @@ public RestSubscriber(MeterRegistry meterRegistry, MonitorProperties monitorProp\n                         r.totalRetries() + 1, r.failure()));\n \n         directProcessor.doOnSubscribe(s -> log.info(\"Connecting to mirror node {}\", url))\n+                .filter(publishResponse -> shouldFilter(publishResponse, properties.getValidationPercentage()))", "originalCommit": "97ce7363b6f882439a034c9c4c7601250c5c992c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MTQ1MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540581451", "bodyText": "I was wondering if that would have any effect.  Moved out.", "author": "ijungmann", "createdAt": "2020-12-10T23:39:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzNTk4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f16723b4696741e70b3d91dded76b64e52876121", "chunk": "diff --git a/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java b/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java\nindex feb4269c8..6ff947d22 100644\n--- a/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java\n+++ b/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java\n\n@@ -73,8 +73,10 @@ public class RestSubscriber implements Subscriber {\n                 .doBeforeRetry(r -> log.debug(\"Retry attempt #{} after failure: {}\",\n                         r.totalRetries() + 1, r.failure()));\n \n+        double samplePercent = properties.getSamplePercent();\n         directProcessor.doOnSubscribe(s -> log.info(\"Connecting to mirror node {}\", url))\n-                .filter(publishResponse -> shouldFilter(publishResponse, properties.getValidationPercentage()))\n+                //Randomly filter out transactions to only validate a sample\n+                .filter(r -> RANDOM.nextDouble() < samplePercent)\n                 .doOnNext(publishResponse -> log.trace(\"Querying REST API: {}\", publishResponse))\n                 .doFinally(s -> log.warn(\"Received {} signal\", s))\n                 .limitRequest(properties.getLimit())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU0MjM1MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540542351", "bodyText": "RANDOM.nextDouble() < validationPercentage) is much more readable than Double.compare() in my opinion.", "author": "steven-sheehy", "createdAt": "2020-12-10T22:25:52Z", "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java", "diffHunk": "@@ -98,6 +102,16 @@ private boolean shouldRetry(Throwable t) {\n                 ((WebClientResponseException) t).getStatusCode() == HttpStatus.NOT_FOUND;\n     }\n \n+    //Randomly filter out transactions to only validate a set percentage\n+    private boolean shouldFilter(PublishResponse publishResponse, double validationPercentage) {\n+        boolean filterOut = Double\n+                .compare(RANDOM.nextDouble(), validationPercentage) != -1;", "originalCommit": "97ce7363b6f882439a034c9c4c7601250c5c992c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MTUyNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540581527", "bodyText": "Changed", "author": "ijungmann", "createdAt": "2020-12-10T23:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU0MjM1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f16723b4696741e70b3d91dded76b64e52876121", "chunk": "diff --git a/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java b/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java\nindex feb4269c8..6ff947d22 100644\n--- a/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java\n+++ b/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java\n\n@@ -102,16 +104,6 @@ public class RestSubscriber implements Subscriber {\n                 ((WebClientResponseException) t).getStatusCode() == HttpStatus.NOT_FOUND;\n     }\n \n-    //Randomly filter out transactions to only validate a set percentage\n-    private boolean shouldFilter(PublishResponse publishResponse, double validationPercentage) {\n-        boolean filterOut = Double\n-                .compare(RANDOM.nextDouble(), validationPercentage) != -1;\n-        if (filterOut) {\n-            log.trace(\"Skipping REST validation of {}\", publishResponse);\n-        }\n-        return !filterOut;\n-    }\n-\n     private void record(PublishResponse r) {\n         Duration latency = Duration.between(r.getRequest().getTimestamp(), Instant.now());\n         log.debug(\"Transaction retrieved with a latency of {}s\", latency.toSeconds());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU0NjIyNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540546227", "bodyText": "Inverting this logic just for an off by default log statement makes it more verbose and harder to understand. What's wrong with .filter(r -> RANDOM.nextDouble() < samplePercent)?", "author": "steven-sheehy", "createdAt": "2020-12-10T22:33:18Z", "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java", "diffHunk": "@@ -98,6 +102,16 @@ private boolean shouldRetry(Throwable t) {\n                 ((WebClientResponseException) t).getStatusCode() == HttpStatus.NOT_FOUND;\n     }\n \n+    //Randomly filter out transactions to only validate a set percentage\n+    private boolean shouldFilter(PublishResponse publishResponse, double validationPercentage) {\n+        boolean filterOut = Double", "originalCommit": "97ce7363b6f882439a034c9c4c7601250c5c992c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MjEzOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540582138", "bodyText": "I was debating adding a metric here to count the number skipped and moved it all out, then decided against it.  I've put it back to the one line filter.", "author": "ijungmann", "createdAt": "2020-12-10T23:41:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU0NjIyNw=="}], "type": "inlineReview", "revised_code": {"commit": "f16723b4696741e70b3d91dded76b64e52876121", "chunk": "diff --git a/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java b/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java\nindex feb4269c8..6ff947d22 100644\n--- a/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java\n+++ b/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java\n\n@@ -102,16 +104,6 @@ public class RestSubscriber implements Subscriber {\n                 ((WebClientResponseException) t).getStatusCode() == HttpStatus.NOT_FOUND;\n     }\n \n-    //Randomly filter out transactions to only validate a set percentage\n-    private boolean shouldFilter(PublishResponse publishResponse, double validationPercentage) {\n-        boolean filterOut = Double\n-                .compare(RANDOM.nextDouble(), validationPercentage) != -1;\n-        if (filterOut) {\n-            log.trace(\"Skipping REST validation of {}\", publishResponse);\n-        }\n-        return !filterOut;\n-    }\n-\n     private void record(PublishResponse r) {\n         Duration latency = Duration.between(r.getRequest().getTimestamp(), Instant.now());\n         log.debug(\"Transaction retrieved with a latency of {}s\", latency.toSeconds());\n"}}, {"oid": "f16723b4696741e70b3d91dded76b64e52876121", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f16723b4696741e70b3d91dded76b64e52876121", "message": "Refactor for PR comments\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-10T23:38:40Z", "type": "commit"}, {"oid": "06ee39b2aba887eae2931b45978c98ddf09b6b83", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/06ee39b2aba887eae2931b45978c98ddf09b6b83", "message": "Refactor subscriber properties\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-10T23:45:58Z", "type": "commit"}, {"oid": "b3773a3c65198f68c3ed88ab620fc6675f244d15", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b3773a3c65198f68c3ed88ab620fc6675f244d15", "message": "Add tests\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-11T03:19:44Z", "type": "commit"}]}