{"pr_number": 1134, "pr_title": "HTS e2e Performance Tests", "pr_createdAt": "2020-10-15T22:02:31Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134", "timeline": [{"oid": "908b3b7bf522e142cf2fbf7ca39d6c4463e2ac24", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/908b3b7bf522e142cf2fbf7ca39d6c4463e2ac24", "message": "Add performance test for token transfer publish only\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-15T22:02:07Z", "type": "commit"}, {"oid": "2246d71276472e6ee3f8beac3dd2a52a7618719f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2246d71276472e6ee3f8beac3dd2a52a7618719f", "message": "Add initial REST query part of HTS Performance test\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-17T00:01:18Z", "type": "commit"}, {"oid": "9b851c07d741bd3b344ec5c32fcef60eb3e3cbc4", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9b851c07d741bd3b344ec5c32fcef60eb3e3cbc4", "message": "Add new performance test for HTS e2e and adjust existing test\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-18T23:47:30Z", "type": "commit"}, {"oid": "4d49aaaf3d0f853ca09aaed09c203260d4c85724", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4d49aaaf3d0f853ca09aaed09c203260d4c85724", "message": "Refactor Token Transfer Publish and Retrieve test\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-19T05:24:23Z", "type": "commit"}, {"oid": "c27d09fabbe24978dac75b31b985af0bb67a4439", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c27d09fabbe24978dac75b31b985af0bb67a4439", "message": "Refactor HTS Batch Publish Batch Retrieve test\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-19T06:57:37Z", "type": "commit"}, {"oid": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57", "message": "Merge branch 'master' into hts_performance_tests", "committedDate": "2020-10-19T07:02:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyMzE2Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507923163", "bodyText": "Missing license info", "author": "Nana-EC", "createdAt": "2020-10-19T17:22:21Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferPublishAndRetrieveClient.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.hedera.mirror.grpc.jmeter.client.hts;\n+", "originalCommit": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODExMzk3Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r508113977", "bodyText": "License info should now be on all new classes thus far, I'll keep it in mind to add it as I refactor some of these into smaller classes.", "author": "ijungmann", "createdAt": "2020-10-19T23:10:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyMzE2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "00521b19e6c9f13e6c7dd2ccc652dcf64f295aca", "chunk": "diff --git a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferPublishAndRetrieveClient.java b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferPublishAndRetrieveClient.java\nindex da069b6e8..843c0edef 100644\n--- a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferPublishAndRetrieveClient.java\n+++ b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferPublishAndRetrieveClient.java\n\n@@ -1,5 +1,25 @@\n package com.hedera.mirror.grpc.jmeter.client.hts;\n \n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n import com.google.common.base.Stopwatch;\n import java.util.Arrays;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyODMyNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507928324", "bodyText": "Update comment\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // read in nodes list, topic id, number of messages, message size\n          \n          \n            \n                    // read in nodes list, token id, number of transfers", "author": "Nana-EC", "createdAt": "2020-10-19T17:30:40Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferPublishClient.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.hedera.mirror.grpc.jmeter.client.hts;\n+\n+import com.google.common.base.Stopwatch;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.jmeter.config.Arguments;\n+import org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;\n+import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;\n+import org.apache.jmeter.samplers.SampleResult;\n+\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+import com.hedera.mirror.grpc.jmeter.handler.PropertiesHandler;\n+import com.hedera.mirror.grpc.jmeter.handler.SDKClientHandler;\n+import com.hedera.mirror.grpc.jmeter.props.hts.TokenTransferRequest;\n+import com.hedera.mirror.grpc.jmeter.sampler.hts.TokenTransfersPublishSampler;\n+import com.hedera.mirror.grpc.jmeter.sampler.result.TransactionSubmissionResult;\n+\n+@Log4j2\n+public class TokenTransferPublishClient extends AbstractJavaSamplerClient {\n+    public static final String TRANSACTION_IDS_PROPERTY = \"transactionIds\";\n+    private PropertiesHandler propHandler;\n+    private List<SDKClientHandler> clientList;\n+    private TokenId tokenId;\n+    private int messagesPerBatchCount;\n+    private AccountId operatorId;\n+    private Ed25519PrivateKey operatorPrivateKey;\n+    private AccountId recipientId;\n+    private long transferAmount;\n+    private long publishTimeout;\n+    private long publishInterval;\n+    private boolean verifyTransactions;\n+    private long printStatusInterval;\n+\n+    @Override\n+    public void setupTest(JavaSamplerContext javaSamplerContext) {\n+        propHandler = new PropertiesHandler(javaSamplerContext);\n+\n+        // read in nodes list, topic id, number of messages, message size", "originalCommit": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzMDQ1Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r508130456", "bodyText": "All comments should be up to date now, I looked for anything mentioning messages, topics, or hcs and changed them accordingly", "author": "ijungmann", "createdAt": "2020-10-20T00:02:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyODMyNA=="}], "type": "inlineReview", "revised_code": {"commit": "00521b19e6c9f13e6c7dd2ccc652dcf64f295aca", "chunk": "diff --git a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferPublishClient.java b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferPublishClient.java\nindex fd6b4f5ff..b678b2c73 100644\n--- a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferPublishClient.java\n+++ b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferPublishClient.java\n\n@@ -1,5 +1,25 @@\n package com.hedera.mirror.grpc.jmeter.client.hts;\n \n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n import com.google.common.base.Stopwatch;\n import java.util.ArrayList;\n import java.util.Arrays;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyOTA0Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507929047", "bodyText": "Potential other name\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private int messagesPerBatchCount;\n          \n          \n            \n                private int transfersPerBatchCount;", "author": "Nana-EC", "createdAt": "2020-10-19T17:31:38Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferPublishClient.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.hedera.mirror.grpc.jmeter.client.hts;\n+\n+import com.google.common.base.Stopwatch;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.jmeter.config.Arguments;\n+import org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;\n+import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;\n+import org.apache.jmeter.samplers.SampleResult;\n+\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+import com.hedera.mirror.grpc.jmeter.handler.PropertiesHandler;\n+import com.hedera.mirror.grpc.jmeter.handler.SDKClientHandler;\n+import com.hedera.mirror.grpc.jmeter.props.hts.TokenTransferRequest;\n+import com.hedera.mirror.grpc.jmeter.sampler.hts.TokenTransfersPublishSampler;\n+import com.hedera.mirror.grpc.jmeter.sampler.result.TransactionSubmissionResult;\n+\n+@Log4j2\n+public class TokenTransferPublishClient extends AbstractJavaSamplerClient {\n+    public static final String TRANSACTION_IDS_PROPERTY = \"transactionIds\";\n+    private PropertiesHandler propHandler;\n+    private List<SDKClientHandler> clientList;\n+    private TokenId tokenId;\n+    private int messagesPerBatchCount;", "originalCommit": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzMTA4MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r508131081", "bodyText": "I've made this change, however do you want me to update/add the property it pulls from as well?  I tried to reuse the existing hcs publisher properties so that the .properties file doesn't grow out of control, I'm starting to wonder if putting a new .hts.* set of properties would be better because they're going to be entangled otherwise.", "author": "ijungmann", "createdAt": "2020-10-20T00:04:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyOTA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3MzQ1MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r508173451", "bodyText": "Let's reuse. I saw you made it transactionsPerBatchCount which makes sense.\nIf we ever get into a case where we want to publish multiple transaction types at different rates then we can add that property or think of an easier way to do it.", "author": "Nana-EC", "createdAt": "2020-10-20T02:38:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyOTA0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "00521b19e6c9f13e6c7dd2ccc652dcf64f295aca", "chunk": "diff --git a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferPublishClient.java b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferPublishClient.java\nindex fd6b4f5ff..b678b2c73 100644\n--- a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferPublishClient.java\n+++ b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferPublishClient.java\n\n@@ -1,5 +1,25 @@\n package com.hedera.mirror.grpc.jmeter.client.hts;\n \n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n import com.google.common.base.Stopwatch;\n import java.util.ArrayList;\n import java.util.Arrays;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzMjIwNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507932206", "bodyText": "Update comment", "author": "Nana-EC", "createdAt": "2020-10-19T17:36:18Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferRESTBatchClient.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.hedera.mirror.grpc.jmeter.client.hts;\n+\n+import static com.hedera.mirror.grpc.jmeter.client.hts.TokenTransferPublishClient.TRANSACTION_IDS_PROPERTY;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.jmeter.config.Arguments;\n+import org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;\n+import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;\n+import org.apache.jmeter.samplers.SampleResult;\n+\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.mirror.grpc.jmeter.handler.PropertiesHandler;\n+import com.hedera.mirror.grpc.jmeter.props.hts.TokenTransferGetRequest;\n+import com.hedera.mirror.grpc.jmeter.sampler.hts.TokenTransferRESTBatchSampler;\n+\n+@Log4j2\n+public class TokenTransferRESTBatchClient extends AbstractJavaSamplerClient {\n+    private PropertiesHandler propHandler;\n+    private List<String> formattedTransactionIds;\n+    private String restBaseUrl;\n+    private int expectedTransactionCount;\n+    private int restMaxRetry;\n+    private int restRetryBackoffMs;\n+    private int batchRestTimeoutSeconds;\n+\n+    @Override\n+    public void setupTest(JavaSamplerContext javaSamplerContext) {\n+        propHandler = new PropertiesHandler(javaSamplerContext);\n+\n+        // read in nodes list, topic id, number of messages, message size\n+        restBaseUrl = propHandler.getTestParam(\"restBaseUrl\", \"localhost:5551\");\n+        expectedTransactionCount = propHandler.getIntTestParam(\"expectedTransactionCount\", 0);\n+        restMaxRetry = propHandler.getIntTestParam(\"restMaxRetry\", 1000);\n+        restRetryBackoffMs = propHandler.getIntTestParam(\"restRetryBackoffMs\", 50);\n+        batchRestTimeoutSeconds = propHandler.getIntTestParam(\"batchRestTimeoutSeconds\", 10);\n+\n+        // node info expected in comma separated list of <node_IP>:<node_accountId>:<node_port>", "originalCommit": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzMTEzNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r508131137", "bodyText": "Updated", "author": "ijungmann", "createdAt": "2020-10-20T00:04:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzMjIwNg=="}], "type": "inlineReview", "revised_code": {"commit": "00521b19e6c9f13e6c7dd2ccc652dcf64f295aca", "chunk": "diff --git a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferRESTBatchClient.java b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferRESTBatchClient.java\nindex cc9d8b524..e9337d96a 100644\n--- a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferRESTBatchClient.java\n+++ b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferRESTBatchClient.java\n\n@@ -1,5 +1,25 @@\n package com.hedera.mirror.grpc.jmeter.client.hts;\n \n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n import static com.hedera.mirror.grpc.jmeter.client.hts.TokenTransferPublishClient.TRANSACTION_IDS_PROPERTY;\n \n import java.util.ArrayList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzNDU0MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507934541", "bodyText": "TransactionId contains the accountId and validStart, you could use those to create the desired String transactionId format\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return transactionId;\n          \n          \n            \n                    return transactionId.accountId.toString() + \"-\" + transactionId.validStart\n          \n          \n            \n                            .getEpochSecond() + \"-\" + transactionId.validStart.getNano();", "author": "Nana-EC", "createdAt": "2020-10-19T17:39:24Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/handler/SDKClientHandler.java", "diffHunk": "@@ -120,6 +123,18 @@ public TransactionId submitCryptoTransfer(AccountId operatorId, AccountId recipi\n         return transactionId;\n     }\n \n+    public TransactionId submitTokenTransfer(TokenId tokenId, AccountId operatorId, AccountId recipientId,\n+                                             long transferAmount) throws HederaStatusException {\n+        TransactionId transactionId = new TokenTransferTransaction()\n+                .addSender(tokenId, operatorId, transferAmount)\n+                .addRecipient(tokenId, recipientId, transferAmount)\n+                .setMaxTransactionFee(1_000_000)\n+                .setTransactionMemo(\"Token Transfer_\" + Instant.now())\n+                .execute(client);\n+\n+        return transactionId;", "originalCommit": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzMTQ0NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r508131445", "bodyText": "I've kept the code the same here as it later can use the TransactionId object to do validation with the receipt, but I have turned this logic into a method later on down the line, thanks.", "author": "ijungmann", "createdAt": "2020-10-20T00:05:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzNDU0MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzNzQ5OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507937499", "bodyText": "I made a suggestion in submitTokenTransfer\nAssuming it doesn't impact the submission performance that's one way.\nAnother way would be to do the same over here instead\nformattedTransactionIds.add(transactionId.accountId.toString() + \"-\" + transactionId.validStart\n                .getEpochSecond() + \"-\" + transactionId.validStart.getNano());", "author": "Nana-EC", "createdAt": "2020-10-19T17:41:59Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferRESTBatchClient.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.hedera.mirror.grpc.jmeter.client.hts;\n+\n+import static com.hedera.mirror.grpc.jmeter.client.hts.TokenTransferPublishClient.TRANSACTION_IDS_PROPERTY;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.jmeter.config.Arguments;\n+import org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;\n+import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;\n+import org.apache.jmeter.samplers.SampleResult;\n+\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.mirror.grpc.jmeter.handler.PropertiesHandler;\n+import com.hedera.mirror.grpc.jmeter.props.hts.TokenTransferGetRequest;\n+import com.hedera.mirror.grpc.jmeter.sampler.hts.TokenTransferRESTBatchSampler;\n+\n+@Log4j2\n+public class TokenTransferRESTBatchClient extends AbstractJavaSamplerClient {\n+    private PropertiesHandler propHandler;\n+    private List<String> formattedTransactionIds;\n+    private String restBaseUrl;\n+    private int expectedTransactionCount;\n+    private int restMaxRetry;\n+    private int restRetryBackoffMs;\n+    private int batchRestTimeoutSeconds;\n+\n+    @Override\n+    public void setupTest(JavaSamplerContext javaSamplerContext) {\n+        propHandler = new PropertiesHandler(javaSamplerContext);\n+\n+        // read in nodes list, topic id, number of messages, message size\n+        restBaseUrl = propHandler.getTestParam(\"restBaseUrl\", \"localhost:5551\");\n+        expectedTransactionCount = propHandler.getIntTestParam(\"expectedTransactionCount\", 0);\n+        restMaxRetry = propHandler.getIntTestParam(\"restMaxRetry\", 1000);\n+        restRetryBackoffMs = propHandler.getIntTestParam(\"restRetryBackoffMs\", 50);\n+        batchRestTimeoutSeconds = propHandler.getIntTestParam(\"batchRestTimeoutSeconds\", 10);\n+\n+        // node info expected in comma separated list of <node_IP>:<node_accountId>:<node_port>\n+        List<TransactionId> transactionIds = (List<TransactionId>) javaSamplerContext.getJMeterVariables()\n+                .getObject(TRANSACTION_IDS_PROPERTY);\n+        formattedTransactionIds = new ArrayList<>();\n+        for (TransactionId transactionId : transactionIds) {\n+            //TODO There has to be a better way to do this", "originalCommit": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzOTM3Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507939372", "bodyText": "Or just make a method of it\npublic String getRESTCompliantTransactionIdString(TransactionId transactionId) {\n  return transactionId.accountId.toString() + \"-\" + transactionId.validStart\n                .getEpochSecond() + \"-\" + transactionId.validStart.getNano();\n}\n\nTake your pick of whichever works best for you", "author": "Nana-EC", "createdAt": "2020-10-19T17:43:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzNzQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzMTU0MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r508131540", "bodyText": "Good call, I've turned this into a method and moved it into a new Utility class, if it would be better suited elsewhere let me know.", "author": "ijungmann", "createdAt": "2020-10-20T00:06:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzNzQ5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "00521b19e6c9f13e6c7dd2ccc652dcf64f295aca", "chunk": "diff --git a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferRESTBatchClient.java b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferRESTBatchClient.java\nindex cc9d8b524..e9337d96a 100644\n--- a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferRESTBatchClient.java\n+++ b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferRESTBatchClient.java\n\n@@ -1,5 +1,25 @@\n package com.hedera.mirror.grpc.jmeter.client.hts;\n \n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n import static com.hedera.mirror.grpc.jmeter.client.hts.TokenTransferPublishClient.TRANSACTION_IDS_PROPERTY;\n \n import java.util.ArrayList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzOTk4OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507939988", "bodyText": "remove\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //        AtomicInteger counter = new AtomicInteger(0);", "author": "Nana-EC", "createdAt": "2020-10-19T17:44:39Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/handler/SDKClientHandler.java", "diffHunk": "@@ -140,4 +155,27 @@ public int getValidTransactionsCount(List<TransactionId> transactionIds) {\n         log.debug(\"{} out of {} transactions returned a Success status\", counter.get(), transactionIds.size());\n         return counter.get();\n     }\n+\n+    public List<TransactionId> getValidTransactions(List<TransactionId> transactionIds) {\n+        log.debug(\"Verify Transactions {}\", transactionIds.size());\n+//        AtomicInteger counter = new AtomicInteger(0);", "originalCommit": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzMTkxNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r508131917", "bodyText": "Removed", "author": "ijungmann", "createdAt": "2020-10-20T00:07:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzOTk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "a5982cfd81f03df4a6c4f384a12c2ad7d8f42072", "chunk": "diff --git a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/handler/SDKClientHandler.java b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/handler/SDKClientHandler.java\nindex 63ca7ba9c..02d592e08 100644\n--- a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/handler/SDKClientHandler.java\n+++ b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/handler/SDKClientHandler.java\n\n@@ -158,7 +158,6 @@ public class SDKClientHandler {\n \n     public List<TransactionId> getValidTransactions(List<TransactionId> transactionIds) {\n         log.debug(\"Verify Transactions {}\", transactionIds.size());\n-//        AtomicInteger counter = new AtomicInteger(0);\n         List<TransactionId> validTransactions = new ArrayList<>();\n         transactionIds.forEach(x -> {\n             TransactionReceipt receipt = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk0MTA1NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507941055", "bodyText": "This seems generic and could be applied to other existing and future entities.\nShould we rename it more generically?", "author": "Nana-EC", "createdAt": "2020-10-19T17:46:12Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/hts/TokenTransferGetRequest.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package com.hedera.mirror.grpc.jmeter.props.hts;\n+\n+import java.util.List;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+@Value\n+@Builder\n+public class TokenTransferGetRequest {", "originalCommit": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3ODI5Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r508178297", "bodyText": "I ended up breaking this down even farther, I made a REST Request and then a REST getByIds Request extending that, a Publish Request and a TokenTransferPublishRequest extending that, and finally a composite class of those two to be used for the GetAndRetrieve test.", "author": "ijungmann", "createdAt": "2020-10-20T02:56:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk0MTA1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "00521b19e6c9f13e6c7dd2ccc652dcf64f295aca", "chunk": "diff --git a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/hts/TokenTransferGetRequest.java b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/hts/TokenTransferGetRequest.java\nindex c3a881d00..39d948e11 100644\n--- a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/hts/TokenTransferGetRequest.java\n+++ b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/hts/TokenTransferGetRequest.java\n\n@@ -1,5 +1,25 @@\n package com.hedera.mirror.grpc.jmeter.props.hts;\n \n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n import java.util.List;\n import lombok.Builder;\n import lombok.Value;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk0Mjc1OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507942759", "bodyText": "You should have TokenTransferRequest inherit from the generic class noted above.", "author": "Nana-EC", "createdAt": "2020-10-19T17:47:47Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/hts/TokenTransferRequest.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package com.hedera.mirror.grpc.jmeter.props.hts;\n+\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+\n+@Data\n+@Builder\n+@Log4j2\n+public class TokenTransferRequest {", "originalCommit": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3ODM2MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r508178361", "bodyText": "See above note.", "author": "ijungmann", "createdAt": "2020-10-20T02:56:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk0Mjc1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "00521b19e6c9f13e6c7dd2ccc652dcf64f295aca", "chunk": "diff --git a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/hts/TokenTransferRequest.java b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/hts/TokenTransferRequest.java\nindex 9c5b36331..15f433b59 100644\n--- a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/hts/TokenTransferRequest.java\n+++ b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/hts/TokenTransferRequest.java\n\n@@ -1,5 +1,25 @@\n package com.hedera.mirror.grpc.jmeter.props.hts;\n \n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n import lombok.Builder;\n import lombok.Data;\n import lombok.extern.log4j.Log4j2;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk0OTY4MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507949680", "bodyText": "I used similar logic in my acceptance tests and Steven had noted better to use the  UriBuilder feature in WebClient.\nIf not too much overhead, could be applicable here also", "author": "Nana-EC", "createdAt": "2020-10-19T17:54:20Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransferRESTBatchSampler.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.hedera.mirror.grpc.jmeter.sampler.hts;\n+\n+import com.google.common.base.Stopwatch;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.web.reactive.function.client.WebClient;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.util.retry.Retry;\n+\n+import com.hedera.mirror.grpc.jmeter.props.hts.TokenTransferGetRequest;\n+\n+@Log4j2\n+public class TokenTransferRESTBatchSampler {\n+    private final TokenTransferGetRequest tokenTransferGetRequest;\n+    private final WebClient webClient;\n+    private Stopwatch stopwatch;\n+    private static final String REST_PATH = \"/api/v1/transactions/\";\n+\n+    public TokenTransferRESTBatchSampler(TokenTransferGetRequest tokenTransferGetRequest) {\n+        this.tokenTransferGetRequest = tokenTransferGetRequest;\n+        webClient = WebClient.create(tokenTransferGetRequest.getRestBaseUrl());\n+    }\n+\n+    public int retrieveTransaction() {\n+        stopwatch = Stopwatch.createStarted();\n+        List<String> transactions = Flux.fromIterable(tokenTransferGetRequest.getTransactionIds())\n+                //TODO this may be overkill.\n+                .parallel()\n+                .runOn(Schedulers.parallel())\n+                .flatMap(transactionId -> getTransaction(transactionId).onErrorResume(ex -> {\n+                    log.info(\"Failed to retrieve transaction {}: {}\", transactionId, ex);\n+                    return Mono.empty();\n+                }))\n+                .sequential()\n+                .collectList()\n+                .block();\n+\n+        log.info(\"Retrieved {} transactions in {} ms\", transactions.size(), stopwatch.elapsed(TimeUnit.MILLISECONDS));\n+        return transactions.size();\n+    }\n+\n+    private Mono<String> getTransaction(String transactionId) {\n+        return webClient.get().uri(REST_PATH + transactionId).retrieve()", "originalCommit": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzMjE0MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r508132140", "bodyText": "Cool, didn't know about that, I've made this change", "author": "ijungmann", "createdAt": "2020-10-20T00:08:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk0OTY4MA=="}], "type": "inlineReview", "revised_code": {"commit": "00521b19e6c9f13e6c7dd2ccc652dcf64f295aca", "chunk": "diff --git a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransferRESTBatchSampler.java b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransferRESTBatchSampler.java\nindex efdae4ad2..119eb6dc7 100644\n--- a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransferRESTBatchSampler.java\n+++ b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransferRESTBatchSampler.java\n\n@@ -1,5 +1,25 @@\n package com.hedera.mirror.grpc.jmeter.sampler.hts;\n \n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n import com.google.common.base.Stopwatch;\n import java.time.Duration;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk1MzM1NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507953354", "bodyText": "See method suggestion of TransactionId to compliant rest transaction Id noted earlier", "author": "Nana-EC", "createdAt": "2020-10-19T17:57:33Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishAndRetrieveSampler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package com.hedera.mirror.grpc.jmeter.sampler.hts;\n+\n+import com.google.common.base.Stopwatch;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import lombok.SneakyThrows;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;\n+import org.json.JSONObject;\n+import org.springframework.web.reactive.function.client.WebClient;\n+import reactor.util.retry.Retry;\n+\n+import com.hedera.hashgraph.sdk.HederaNetworkException;\n+import com.hedera.hashgraph.sdk.HederaPrecheckStatusException;\n+import com.hedera.hashgraph.sdk.Status;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.mirror.grpc.jmeter.handler.SDKClientHandler;\n+import com.hedera.mirror.grpc.jmeter.props.hts.TokenTransferRequest;\n+import com.hedera.mirror.grpc.jmeter.sampler.result.hts.TokenTransferPublishAndRetrieveResult;\n+\n+@Log4j2\n+public class TokenTransfersPublishAndRetrieveSampler {\n+    private final TokenTransferRequest request;\n+    private final SDKClientHandler sdkClient;\n+    private final DescriptiveStatistics publishTokenTransferLatencyStats = new DescriptiveStatistics();\n+    private Stopwatch publishStopwatch;\n+    private final WebClient webClient;\n+    private static final String REST_PATH = \"/api/v1/transactions/\";\n+\n+    public TokenTransfersPublishAndRetrieveSampler(TokenTransferRequest request,\n+                                                   SDKClientHandler sdkClient) {\n+        this.request = request;\n+        this.sdkClient = sdkClient;\n+        this.webClient = WebClient.create(request.getRestBaseUrl());\n+    }\n+\n+    @SneakyThrows\n+    public long submitTokenTransferTransactions() {\n+        TokenTransferPublishAndRetrieveResult result = new TokenTransferPublishAndRetrieveResult(sdkClient.getNodeInfo()\n+                .getNodeId());\n+        AtomicInteger networkFailures = new AtomicInteger();\n+        AtomicInteger unknownFailures = new AtomicInteger();\n+        Map<Status, Integer> hederaResponseCodeEx = new HashMap<>();\n+\n+        // publish MessagesPerBatchCount number of messages to the noted topic id\n+        log.trace(\"Submit transaction to {}, tokenTransferPublisher: {}\", sdkClient\n+                .getNodeInfo(), request);\n+\n+        for (int i = 0; i < request.getMessagesPerBatchCount(); i++) {\n+\n+            try {\n+                publishStopwatch = Stopwatch.createStarted();\n+                TransactionId transactionId = sdkClient\n+                        .submitTokenTransfer(request.getTokenId(), request.getOperatorId(), request\n+                                .getRecipientId(), request.getTransferAmount());\n+                publishTokenTransferLatencyStats.addValue(publishStopwatch.elapsed(TimeUnit.MILLISECONDS));\n+                String retrievedTransaction = getTransaction(convertTransactionId(transactionId.toString()));\n+                Instant received = Instant.now();\n+                //TODO Having trouble wrangling the result object into a POJO, this is a workaround.\n+                JSONObject obj = new JSONObject(retrievedTransaction).getJSONArray(\"transactions\")\n+                        .getJSONObject(0);\n+                //TODO Make sure the valid start time is equivalent of publish time for metrics\n+                result.onNext(obj.getString(\"consensus_timestamp\"),\n+                        obj.getString(\"valid_start_timestamp\"), received);\n+            } catch (HederaPrecheckStatusException preEx) {\n+                hederaResponseCodeEx.compute(preEx.status, (key, val) -> (val == null) ? 1 : val + 1);\n+            } catch (HederaNetworkException preEx) {\n+                networkFailures.incrementAndGet();\n+            } catch (Exception ex) {\n+                unknownFailures.incrementAndGet();\n+                log.error(\"Unexpected exception publishing message {} to {}: {}\", i,\n+                        sdkClient.getNodeInfo().getNodeId(), ex);\n+            }\n+        }\n+        printPublishStats();\n+        result.onComplete();\n+        return result.getTransactionCount();\n+    }\n+\n+    private void printPublishStats() {\n+        // Compute some statistics\n+        double min = publishTokenTransferLatencyStats.getMin();\n+        double max = publishTokenTransferLatencyStats.getMax();\n+        double mean = publishTokenTransferLatencyStats.getMean();\n+        double median = publishTokenTransferLatencyStats.getPercentile(50);\n+        double seventyFifthPercentile = publishTokenTransferLatencyStats.getPercentile(75);\n+        double ninetyFifthPercentile = publishTokenTransferLatencyStats.getPercentile(95);\n+\n+        log.info(\"Token Transfer publish node {}: stats, min: {} ms, max: {} ms, avg: {} ms, median: {} ms, 75th\" +\n+                        \" percentile: {} ms,\" +\n+                        \" 95th percentile: {} ms\", sdkClient.getNodeInfo().getNodeId(), String.format(\"%.03f\", min),\n+                String.format(\"%.03f\", max), String.format(\"%.03f\", mean), String.format(\"%.03f\", median),\n+                String.format(\"%.03f\", seventyFifthPercentile), String.format(\"%.03f\", ninetyFifthPercentile));\n+    }\n+\n+    //TODO Is there a better way of doing this?\n+    private String convertTransactionId(String transactionId) {\n+        int indexOfBadPeriod = transactionId.lastIndexOf(\".\");", "originalCommit": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzMzEzNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r508133136", "bodyText": "Made the necessary change as noted above.", "author": "ijungmann", "createdAt": "2020-10-20T00:11:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk1MzM1NA=="}], "type": "inlineReview", "revised_code": {"commit": "00521b19e6c9f13e6c7dd2ccc652dcf64f295aca", "chunk": "diff --git a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishAndRetrieveSampler.java b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishAndRetrieveSampler.java\nindex 16ba73d83..21d4c7f1a 100644\n--- a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishAndRetrieveSampler.java\n+++ b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishAndRetrieveSampler.java\n\n@@ -1,5 +1,25 @@\n package com.hedera.mirror.grpc.jmeter.sampler.hts;\n \n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n import com.google.common.base.Stopwatch;\n import java.time.Duration;\n import java.time.Instant;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk1NDM5Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507954393", "bodyText": "Here and in other places comments still refer to topic instead of tokens", "author": "Nana-EC", "createdAt": "2020-10-19T17:58:19Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishSampler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.hedera.mirror.grpc.jmeter.sampler.hts;\n+\n+import com.google.common.base.Stopwatch;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import lombok.RequiredArgsConstructor;\n+import lombok.SneakyThrows;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;\n+\n+import com.hedera.hashgraph.sdk.HederaNetworkException;\n+import com.hedera.hashgraph.sdk.HederaPrecheckStatusException;\n+import com.hedera.hashgraph.sdk.Status;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.mirror.grpc.jmeter.handler.SDKClientHandler;\n+import com.hedera.mirror.grpc.jmeter.props.hts.TokenTransferRequest;\n+import com.hedera.mirror.grpc.jmeter.sampler.result.TransactionSubmissionResult;\n+\n+@Log4j2\n+@RequiredArgsConstructor\n+public class TokenTransfersPublishSampler {\n+    private final TokenTransferRequest tokenTransferRequest;\n+    private final SDKClientHandler sdkClient;\n+    private final boolean verifyTransactions;\n+    private final DescriptiveStatistics publishTokenTransferLatencyStats = new DescriptiveStatistics();\n+    private Stopwatch publishStopwatch;\n+\n+    @SneakyThrows\n+    public List<TransactionId> submitTokenTransferTransactions() {\n+        TransactionSubmissionResult result = new TransactionSubmissionResult();\n+        Stopwatch totalStopwatch = Stopwatch.createStarted();\n+        AtomicInteger networkFailures = new AtomicInteger();\n+        AtomicInteger unknownFailures = new AtomicInteger();\n+        Map<Status, Integer> hederaResponseCodeEx = new HashMap<>();\n+\n+        // publish MessagesPerBatchCount number of messages to the noted topic id", "originalCommit": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzMzIwOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r508133208", "bodyText": "Comments should now be updated.", "author": "ijungmann", "createdAt": "2020-10-20T00:11:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk1NDM5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "00521b19e6c9f13e6c7dd2ccc652dcf64f295aca", "chunk": "diff --git a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishSampler.java b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishSampler.java\nindex cb655ce5a..2a0ca3e8b 100644\n--- a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishSampler.java\n+++ b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishSampler.java\n\n@@ -1,5 +1,25 @@\n package com.hedera.mirror.grpc.jmeter.sampler.hts;\n \n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n import com.google.common.base.Stopwatch;\n import java.util.HashMap;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk1NTUxMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507955512", "bodyText": "Should we consider moving this to a shared class, so all *PublishSampler classes can utilize it and other shared sampler logic?", "author": "Nana-EC", "createdAt": "2020-10-19T17:59:43Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishSampler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.hedera.mirror.grpc.jmeter.sampler.hts;\n+\n+import com.google.common.base.Stopwatch;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import lombok.RequiredArgsConstructor;\n+import lombok.SneakyThrows;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;\n+\n+import com.hedera.hashgraph.sdk.HederaNetworkException;\n+import com.hedera.hashgraph.sdk.HederaPrecheckStatusException;\n+import com.hedera.hashgraph.sdk.Status;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.mirror.grpc.jmeter.handler.SDKClientHandler;\n+import com.hedera.mirror.grpc.jmeter.props.hts.TokenTransferRequest;\n+import com.hedera.mirror.grpc.jmeter.sampler.result.TransactionSubmissionResult;\n+\n+@Log4j2\n+@RequiredArgsConstructor\n+public class TokenTransfersPublishSampler {\n+    private final TokenTransferRequest tokenTransferRequest;\n+    private final SDKClientHandler sdkClient;\n+    private final boolean verifyTransactions;\n+    private final DescriptiveStatistics publishTokenTransferLatencyStats = new DescriptiveStatistics();\n+    private Stopwatch publishStopwatch;\n+\n+    @SneakyThrows\n+    public List<TransactionId> submitTokenTransferTransactions() {\n+        TransactionSubmissionResult result = new TransactionSubmissionResult();\n+        Stopwatch totalStopwatch = Stopwatch.createStarted();\n+        AtomicInteger networkFailures = new AtomicInteger();\n+        AtomicInteger unknownFailures = new AtomicInteger();\n+        Map<Status, Integer> hederaResponseCodeEx = new HashMap<>();\n+\n+        // publish MessagesPerBatchCount number of messages to the noted topic id\n+        log.trace(\"Submit transaction to {}, tokenTransferPublisher: {}\", sdkClient\n+                .getNodeInfo(), tokenTransferRequest);\n+\n+        for (int i = 0; i < tokenTransferRequest.getMessagesPerBatchCount(); i++) {\n+\n+            try {\n+                publishStopwatch = Stopwatch.createStarted();\n+                TransactionId transactionId = sdkClient\n+                        .submitTokenTransfer(tokenTransferRequest.getTokenId(), tokenTransferRequest\n+                                .getOperatorId(), tokenTransferRequest\n+                                .getRecipientId(), tokenTransferRequest.getTransferAmount());\n+                publishTokenTransferLatencyStats.addValue(publishStopwatch.elapsed(TimeUnit.MILLISECONDS));\n+                result.onNext(transactionId);\n+            } catch (HederaPrecheckStatusException preEx) {\n+                hederaResponseCodeEx.compute(preEx.status, (key, val) -> (val == null) ? 1 : val + 1);\n+            } catch (HederaNetworkException preEx) {\n+                networkFailures.incrementAndGet();\n+            } catch (Exception ex) {\n+                unknownFailures.incrementAndGet();\n+                log.error(\"Unexpected exception publishing message {} to {}: {}\", i,\n+                        sdkClient.getNodeInfo().getNodeId(), ex);\n+            }\n+        }\n+\n+        log.info(\"Submitted {} token transfers for token {} from {} to {} in {} on node {}. {} preCheckErrors, {} \" +\n+                        \"networkErrors, {} unknown errors\", tokenTransferRequest\n+                        .getMessagesPerBatchCount(), tokenTransferRequest.getTokenId(),\n+                tokenTransferRequest\n+                        .getOperatorId(), tokenTransferRequest.getRecipientId(), totalStopwatch,\n+                sdkClient.getNodeInfo().getNodeId(),\n+                StringUtils.join(hederaResponseCodeEx), networkFailures.get(), unknownFailures.get());\n+        printPublishStats();\n+        result.onComplete();\n+\n+        // verify transactions\n+        if (verifyTransactions) {\n+            return sdkClient.getValidTransactions(result.getTransactionIdList());\n+        }\n+\n+        return result.getTransactionIdList();\n+    }\n+\n+    private void printPublishStats() {", "originalCommit": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE2NzMzOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r508167339", "bodyText": "That seems like a good move, I've created a PublishSampler that has that method and allows for a custom message at the front and the three Publish samplers are extending it now", "author": "ijungmann", "createdAt": "2020-10-20T02:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk1NTUxMg=="}], "type": "inlineReview", "revised_code": {"commit": "00521b19e6c9f13e6c7dd2ccc652dcf64f295aca", "chunk": "diff --git a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishSampler.java b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishSampler.java\nindex cb655ce5a..2a0ca3e8b 100644\n--- a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishSampler.java\n+++ b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishSampler.java\n\n@@ -1,5 +1,25 @@\n package com.hedera.mirror.grpc.jmeter.sampler.hts;\n \n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n import com.google.common.base.Stopwatch;\n import java.util.HashMap;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3OTgzNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r508079835", "bodyText": "Don't use DescriptiveStatistics as it keeps all values in memory and has resulted in memory leaks in the past. Use SummaryStatistics instead even though we miss out on percentiles. Can you change everywhere else using  DescriptiveStatistics including existing classes?", "author": "steven-sheehy", "createdAt": "2020-10-19T21:42:40Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishAndRetrieveSampler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package com.hedera.mirror.grpc.jmeter.sampler.hts;\n+\n+import com.google.common.base.Stopwatch;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import lombok.SneakyThrows;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;\n+import org.json.JSONObject;\n+import org.springframework.web.reactive.function.client.WebClient;\n+import reactor.util.retry.Retry;\n+\n+import com.hedera.hashgraph.sdk.HederaNetworkException;\n+import com.hedera.hashgraph.sdk.HederaPrecheckStatusException;\n+import com.hedera.hashgraph.sdk.Status;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.mirror.grpc.jmeter.handler.SDKClientHandler;\n+import com.hedera.mirror.grpc.jmeter.props.hts.TokenTransferRequest;\n+import com.hedera.mirror.grpc.jmeter.sampler.result.hts.TokenTransferPublishAndRetrieveResult;\n+\n+@Log4j2\n+public class TokenTransfersPublishAndRetrieveSampler {\n+    private final TokenTransferRequest request;\n+    private final SDKClientHandler sdkClient;\n+    private final DescriptiveStatistics publishTokenTransferLatencyStats = new DescriptiveStatistics();", "originalCommit": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzNTgzMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r508135830", "bodyText": "Sure, the only other place was the HCS Topic Message Publisher, all instances should now be converted to Summary.", "author": "ijungmann", "createdAt": "2020-10-20T00:21:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3OTgzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "00521b19e6c9f13e6c7dd2ccc652dcf64f295aca", "chunk": "diff --git a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishAndRetrieveSampler.java b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishAndRetrieveSampler.java\nindex 16ba73d83..21d4c7f1a 100644\n--- a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishAndRetrieveSampler.java\n+++ b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishAndRetrieveSampler.java\n\n@@ -1,5 +1,25 @@\n package com.hedera.mirror.grpc.jmeter.sampler.hts;\n \n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n import com.google.common.base.Stopwatch;\n import java.time.Duration;\n import java.time.Instant;\n"}}, {"oid": "00521b19e6c9f13e6c7dd2ccc652dcf64f295aca", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/00521b19e6c9f13e6c7dd2ccc652dcf64f295aca", "message": "Add license info to new classes\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-19T23:08:48Z", "type": "commit"}, {"oid": "ecc504d2f7f2b13bd9cfb830fa521dc6119e8f45", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ecc504d2f7f2b13bd9cfb830fa521dc6119e8f45", "message": "Refactor, update comments\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-20T00:01:20Z", "type": "commit"}, {"oid": "a5982cfd81f03df4a6c4f384a12c2ad7d8f42072", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a5982cfd81f03df4a6c4f384a12c2ad7d8f42072", "message": "Add Utility class and remove commented code\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-20T00:07:21Z", "type": "commit"}, {"oid": "826f2ee300322384206ae6107a9d1f454e86362a", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/826f2ee300322384206ae6107a9d1f454e86362a", "message": "Change DescriptiveStatistics to SummaryStatistics due to memory issues\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-20T00:20:22Z", "type": "commit"}, {"oid": "48582b9a740f44a6cb2e330fed50d8815dae71a5", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/48582b9a740f44a6cb2e330fed50d8815dae71a5", "message": "Refactor to move printPublishStats into superclass\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-20T02:14:56Z", "type": "commit"}, {"oid": "d900cfb4048be21e22c37d012bd75f6229bb10e9", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d900cfb4048be21e22c37d012bd75f6229bb10e9", "message": "Refactor request objects to be more generic and reusable\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-20T02:38:45Z", "type": "commit"}, {"oid": "e52e78b72b9e95181455e0f7934499c2a48d747b", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e52e78b72b9e95181455e0f7934499c2a48d747b", "message": "Fix formatting of log statement\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-20T02:43:05Z", "type": "commit"}, {"oid": "3cb4171882baeaed5cac3f747503ce2704a056f5", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3cb4171882baeaed5cac3f747503ce2704a056f5", "message": "Refactor PublishRequest to be even more reusable\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-20T02:53:34Z", "type": "commit"}, {"oid": "229a6588077893e36f76be49ad13fe36f5da51d7", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/229a6588077893e36f76be49ad13fe36f5da51d7", "message": "Add license info to PublishSampler\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-20T02:58:07Z", "type": "commit"}, {"oid": "cc0185ee35aff1880e93ef0c3ed90b1c143dbacb", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/cc0185ee35aff1880e93ef0c3ed90b1c143dbacb", "message": "Add documentation and k8s file\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-20T21:58:51Z", "type": "commit"}, {"oid": "d35ff52ec89e9387a3ee61342777be0761df02f2", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d35ff52ec89e9387a3ee61342777be0761df02f2", "message": "Add documentation and k8s file for other hts test\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-20T22:16:47Z", "type": "commit"}]}