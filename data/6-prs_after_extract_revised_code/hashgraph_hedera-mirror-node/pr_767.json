{"pr_number": 767, "pr_title": "Fix failed crypto transfers with non-fee transfers enabled crashing importer", "pr_createdAt": "2020-05-19T19:51:07Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/767", "timeline": [{"oid": "575ca5e97e5b88955bd307b0ca8171fe52aa1b04", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/575ca5e97e5b88955bd307b0ca8171fe52aa1b04", "message": "Fix failed non-fee transfers crashing importer\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-05-19T20:09:30Z", "type": "commit"}, {"oid": "575ca5e97e5b88955bd307b0ca8171fe52aa1b04", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/575ca5e97e5b88955bd307b0ca8171fe52aa1b04", "message": "Fix failed non-fee transfers crashing importer\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-05-19T20:09:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0MDU2Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/767#discussion_r427640566", "bodyText": "For failed txns, we want to insert only basic txn info (t_transactions) and fee transfers.\nFor that invariant, lines 128-133 should be moved inside if cond following them.", "author": "apeksharma", "createdAt": "2020-05-19T22:40:12Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -112,7 +112,12 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n         tx.setEntity(getEntity(recordItem, transactionHandler, entityId, isSuccessful));\n \n         if ((txRecord.hasTransferList()) && entityProperties.getPersist().isCryptoTransferAmounts()) {\n-            processNonFeeTransfers(consensusNs, body, txRecord);\n+            // Don't add failed non-fee transfers as they can contain invalid data and we don't add failed\n+            // transactions for aggregated transfers\n+            if (isSuccessful) {\n+                processNonFeeTransfers(consensusNs, body, txRecord);\n+            }\n+\n             if (body.hasCryptoCreateAccount() && isSuccessful(txRecord)) {\n                 insertCryptoCreateTransferList(consensusNs, txRecord, body);\n             } else {", "originalCommit": "575ca5e97e5b88955bd307b0ca8171fe52aa1b04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIwMTY3OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/767#discussion_r428201679", "bodyText": "We cannot do this for successful only. A contract call is different than other transactions since it could've been executed but been unsuccessful part way through due to contract logic. We still want to show those results so users can debug the transaction output (e.g. callResult) and also show how much gas was used. It does however make sense to only insert to t_contract result if transactionRecord.hasContractCreateResult() or transactionRecord.hasContractCallResult(). I can make that change.", "author": "steven-sheehy", "createdAt": "2020-05-20T17:55:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0MDU2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2d0ccb6c19dfb43bbb6ffb406ee8e5fa18c46334", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java\nindex 1302180a..ed9bb486 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java\n\n@@ -111,26 +111,28 @@ public class EntityRecordItemListener implements RecordItemListener {\n         transactionHandler.updateTransaction(tx, recordItem);\n         tx.setEntity(getEntity(recordItem, transactionHandler, entityId, isSuccessful));\n \n-        if ((txRecord.hasTransferList()) && entityProperties.getPersist().isCryptoTransferAmounts()) {\n+        if (txRecord.hasTransferList() && entityProperties.getPersist().isCryptoTransferAmounts()) {\n             // Don't add failed non-fee transfers as they can contain invalid data and we don't add failed\n             // transactions for aggregated transfers\n             if (isSuccessful) {\n                 processNonFeeTransfers(consensusNs, body, txRecord);\n             }\n \n-            if (body.hasCryptoCreateAccount() && isSuccessful(txRecord)) {\n+            if (body.hasCryptoCreateAccount() && isSuccessful) {\n                 insertCryptoCreateTransferList(consensusNs, txRecord, body);\n             } else {\n                 insertTransferList(consensusNs, txRecord.getTransferList());\n             }\n         }\n \n-        // TransactionBody-specific handlers.\n+        // Insert contract results even for failed transactions since they could fail during execution and we want to\n+        // show the gas used and call result.\n         if (body.hasContractCall()) {\n             insertContractCall(consensusNs, body.getContractCall(), txRecord);\n         } else if (body.hasContractCreateInstance()) {\n             insertContractCreateInstance(consensusNs, body.getContractCreateInstance(), txRecord);\n         }\n+\n         if (isSuccessful) {\n             if (body.hasConsensusSubmitMessage()) {\n                 insertConsensusTopicMessage(body.getConsensusSubmitMessage(), txRecord);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0Nzk0NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/767#discussion_r427647945", "bodyText": "Just realized that logic in insertCryptoCreateTransferList may be duplicating transfers related to initialBalance which have already been processed by processNonFeeTransfers.\nPTAL.", "author": "apeksharma", "createdAt": "2020-05-19T23:01:46Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -112,7 +112,12 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n         tx.setEntity(getEntity(recordItem, transactionHandler, entityId, isSuccessful));\n \n         if ((txRecord.hasTransferList()) && entityProperties.getPersist().isCryptoTransferAmounts()) {\n-            processNonFeeTransfers(consensusNs, body, txRecord);\n+            // Don't add failed non-fee transfers as they can contain invalid data and we don't add failed\n+            // transactions for aggregated transfers\n+            if (isSuccessful) {\n+                processNonFeeTransfers(consensusNs, body, txRecord);\n+            }\n+\n             if (body.hasCryptoCreateAccount() && isSuccessful(txRecord)) {\n                 insertCryptoCreateTransferList(consensusNs, txRecord, body);", "originalCommit": "575ca5e97e5b88955bd307b0ca8171fe52aa1b04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1MTA0Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/767#discussion_r427651046", "bodyText": "It's weird that we store initialBalance related transfers in t_ctl for cryptoCreate txns, but not for contractCreate or contractCall(amount transferred).\nWe need to define this clearly. couple options being:\n- all transfers in t_ctl table, only non-fee transfer in non_fee_transfers table\n- all fee transfers in one table, all non-fee transfers in another (not good since it'll require more merges and restarting from clean slate)\nEdit:\nDid some digging. Looks like above is not the case. TransactionRecord.transferList contains all transfers. So we do store everything in t_ctl that needs to be there.\nIt's just that special logic in insertCryptoCreateTransferList makes it look like initialBalance related transfers need to be handled separately, which is not the case. I don't think that function is needed at all.", "author": "apeksharma", "createdAt": "2020-05-19T23:11:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0Nzk0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1NjY2NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/767#discussion_r427656664", "bodyText": "we can actually replace this if-else with just insertTransferList(consensusNs, txRecord.getTransferList());", "author": "apeksharma", "createdAt": "2020-05-19T23:28:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0Nzk0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI0MTI3Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/767#discussion_r428241277", "bodyText": "It looks to be necessary. The insertCryptoCreateTransferList() normalizes the transfer list to include an entry for zero initial balance because the record.transferList does not include such an entry. record.transferList only includes an entry for initial balance if it's non-zero. Technically it doesn't check for zero directly but for any missing transfers for the created account, so this may also have been necessary for some past bug in transfer list generation.\nEither way, I don't think we should change it as I'm not sure how this logic is depended upon. It definitely doesn't impact the fix for this particular ticket, so if you feel it should be changed still please discuss with subject matter experts first and create a ticket if they agree.\nHere's a crypto create account with a non-zero initial balance of 100000000 (expand the raw transaction):\nhttps://app.dragonglass.me/hedera/transactions/0077781589999433221364021\nHere's the same transaction's CTL:\nmirror_node=> select * from t_cryptotransferlists where consensus_timestamp = 1589999434016444000;\n consensus_timestamp | realm_num | entity_num |   amount\n---------------------+-----------+------------+------------\n 1589999434016444000 |         0 |         13 |    1586062\n 1589999434016444000 |         0 |         98 |   25303227\n 1589999434016444000 |         0 |       7778 | -126889289\n 1589999434016444000 |         0 |      42871 |  100000000\n\nHere's a crypto create account with a zero initial balance:\nhttps://app.dragonglass.me/hedera/transactions/00281441590000047689000000\nHere's the same transaction's CTL:\nmirror_node=> select * from t_cryptotransferlists where consensus_timestamp = 1590000058306981003;\n consensus_timestamp | realm_num | entity_num |  amount\n---------------------+-----------+------------+-----------\n 1590000058306981003 |         0 |          3 |   1647073\n 1590000058306981003 |         0 |         98 |  26096244\n 1590000058306981003 |         0 |      28144 |         0\n 1590000058306981003 |         0 |      28144 | -27743317\n 1590000058306981003 |         0 |      42873 |         0\n\nNote that it does create an extra zero transfer to payer account that the first transaction does not, which is a little strange.", "author": "steven-sheehy", "createdAt": "2020-05-20T18:59:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0Nzk0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM1MTQ2Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/767#discussion_r428351463", "bodyText": "Separate ticket is good since it's unrelated and not clear at this point.", "author": "apeksharma", "createdAt": "2020-05-20T22:50:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0Nzk0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "2d0ccb6c19dfb43bbb6ffb406ee8e5fa18c46334", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java\nindex 1302180a..ed9bb486 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java\n\n@@ -111,26 +111,28 @@ public class EntityRecordItemListener implements RecordItemListener {\n         transactionHandler.updateTransaction(tx, recordItem);\n         tx.setEntity(getEntity(recordItem, transactionHandler, entityId, isSuccessful));\n \n-        if ((txRecord.hasTransferList()) && entityProperties.getPersist().isCryptoTransferAmounts()) {\n+        if (txRecord.hasTransferList() && entityProperties.getPersist().isCryptoTransferAmounts()) {\n             // Don't add failed non-fee transfers as they can contain invalid data and we don't add failed\n             // transactions for aggregated transfers\n             if (isSuccessful) {\n                 processNonFeeTransfers(consensusNs, body, txRecord);\n             }\n \n-            if (body.hasCryptoCreateAccount() && isSuccessful(txRecord)) {\n+            if (body.hasCryptoCreateAccount() && isSuccessful) {\n                 insertCryptoCreateTransferList(consensusNs, txRecord, body);\n             } else {\n                 insertTransferList(consensusNs, txRecord.getTransferList());\n             }\n         }\n \n-        // TransactionBody-specific handlers.\n+        // Insert contract results even for failed transactions since they could fail during execution and we want to\n+        // show the gas used and call result.\n         if (body.hasContractCall()) {\n             insertContractCall(consensusNs, body.getContractCall(), txRecord);\n         } else if (body.hasContractCreateInstance()) {\n             insertContractCreateInstance(consensusNs, body.getContractCreateInstance(), txRecord);\n         }\n+\n         if (isSuccessful) {\n             if (body.hasConsensusSubmitMessage()) {\n                 insertConsensusTopicMessage(body.getConsensusSubmitMessage(), txRecord);\n"}}, {"oid": "2d0ccb6c19dfb43bbb6ffb406ee8e5fa18c46334", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2d0ccb6c19dfb43bbb6ffb406ee8e5fa18c46334", "message": "Address review feedback\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-05-20T19:21:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI2NTUyOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/767#discussion_r428265528", "bodyText": "We already log the full transaction proto in RecordFileParser", "author": "steven-sheehy", "createdAt": "2020-05-20T19:44:31Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -93,11 +93,11 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n         TransactionRecord txRecord = recordItem.getRecord();\n         TransactionBody body = recordItem.getTransactionBody();\n         TransactionHandler transactionHandler = transactionHandlerFactory.create(body);\n-        log.trace(\"Processing transaction : {}\", () -> Utility.printProtoMessage(body));", "originalCommit": "2d0ccb6c19dfb43bbb6ffb406ee8e5fa18c46334", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}