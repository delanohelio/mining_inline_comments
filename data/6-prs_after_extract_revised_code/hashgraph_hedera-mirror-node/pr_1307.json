{"pr_number": 1307, "pr_title": "Refactor CryptoTransferTransactionSupplier to only add token only transfers", "pr_createdAt": "2020-12-02T17:16:53Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/1307", "timeline": [{"oid": "f74dc9bebbdb56327d88288779339ad2d4a3c1af", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f74dc9bebbdb56327d88288779339ad2d4a3c1af", "message": "Refactor CryptoTransferTransactionSupplier to only add crypto or token transfers\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-02T17:13:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1MDU1NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1307#discussion_r534350554", "bodyText": "nit: perhaps if it's token transfer, the memo should say so?", "author": "xin-hedera", "createdAt": "2020-12-02T17:29:42Z", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/CryptoTransferTransactionSupplier.java", "diffHunk": "@@ -55,12 +55,15 @@ public TransferTransaction get() {\n         AccountId senderId = AccountId.fromString(senderAccountId);\n \n         TransferTransaction transferTransaction = new TransferTransaction()\n-                .addHbarTransfer(recipientId, amount)\n-                .addHbarTransfer(senderId, Math.negateExact(amount))\n                 .setMaxTransactionFee(maxTransactionFee)\n                 .setTransactionMemo(Utility.getMemo(\"Mirror node created test crypto transfer\"));", "originalCommit": "f74dc9bebbdb56327d88288779339ad2d4a3c1af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1MjE2Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1307#discussion_r534352167", "bodyText": "Good idea, moved that line into the if/else to reflect the two different types.", "author": "ijungmann", "createdAt": "2020-12-02T17:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1MDU1NA=="}], "type": "inlineReview", "revised_code": {"commit": "f58f69bb0d2dc6f9bc031d9c9c393c0582dd13a8", "chunk": "diff --git a/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/CryptoTransferTransactionSupplier.java b/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/CryptoTransferTransactionSupplier.java\nindex a526fc00a..699e3d556 100644\n--- a/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/CryptoTransferTransactionSupplier.java\n+++ b/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/CryptoTransferTransactionSupplier.java\n\n@@ -55,19 +55,20 @@ public class CryptoTransferTransactionSupplier implements TransactionSupplier<Tr\n         AccountId senderId = AccountId.fromString(senderAccountId);\n \n         TransferTransaction transferTransaction = new TransferTransaction()\n-                .setMaxTransactionFee(maxTransactionFee)\n-                .setTransactionMemo(Utility.getMemo(\"Mirror node created test crypto transfer\"));\n+                .setMaxTransactionFee(maxTransactionFee);\n \n         //Only add an Hbar transfer or a token transfer, never both\n         if (StringUtils.isBlank(tokenId)) {\n             transferTransaction\n                     .addHbarTransfer(recipientId, amount)\n-                    .addHbarTransfer(senderId, Math.negateExact(amount));\n+                    .addHbarTransfer(senderId, Math.negateExact(amount))\n+                    .setTransactionMemo(Utility.getMemo(\"Mirror node created test crypto transfer\"));\n         } else {\n             TokenId token = TokenId.fromString(tokenId);\n             transferTransaction\n                     .addTokenTransfer(token, recipientId, amount)\n-                    .addTokenTransfer(token, senderId, Math.negateExact(amount));\n+                    .addTokenTransfer(token, senderId, Math.negateExact(amount))\n+                    .setTransactionMemo(Utility.getMemo(\"Mirror node created test token transfer\"));\n         }\n         return transferTransaction;\n     }\n"}}, {"oid": "f58f69bb0d2dc6f9bc031d9c9c393c0582dd13a8", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f58f69bb0d2dc6f9bc031d9c9c393c0582dd13a8", "message": "Change memo based on token or crypto transfer\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-02T17:31:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1MjQ3OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1307#discussion_r534452479", "bodyText": "Why else vs the ability to do both if so configured?", "author": "Nana-EC", "createdAt": "2020-12-02T20:14:22Z", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/CryptoTransferTransactionSupplier.java", "diffHunk": "@@ -55,16 +55,20 @@ public TransferTransaction get() {\n         AccountId senderId = AccountId.fromString(senderAccountId);\n \n         TransferTransaction transferTransaction = new TransferTransaction()\n-                .addHbarTransfer(recipientId, amount)\n-                .addHbarTransfer(senderId, Math.negateExact(amount))\n-                .setMaxTransactionFee(maxTransactionFee)\n-                .setTransactionMemo(Utility.getMemo(\"Mirror node created test crypto transfer\"));\n+                .setMaxTransactionFee(maxTransactionFee);\n \n-        if (StringUtils.isNotBlank(tokenId)) {\n+        //Only add an Hbar transfer or a token transfer, never both\n+        if (StringUtils.isBlank(tokenId)) {\n+            transferTransaction\n+                    .addHbarTransfer(recipientId, amount)\n+                    .addHbarTransfer(senderId, Math.negateExact(amount))\n+                    .setTransactionMemo(Utility.getMemo(\"Mirror node created test crypto transfer\"));\n+        } else {", "originalCommit": "f58f69bb0d2dc6f9bc031d9c9c393c0582dd13a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1MzcxOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1307#discussion_r534453718", "bodyText": "I was about to comment that as well. We should probably add this scenario.", "author": "steven-sheehy", "createdAt": "2020-12-02T20:16:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1MjQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1NTM4Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1307#discussion_r534455383", "bodyText": "I wasn't sure there was a valid use case for needing to do both, whereas there is an obvious need for the other two, and I wasn't sure just how much config we wanted to add here.  I can add an enum for the 3 cases and have it default to CRYPTO.", "author": "ijungmann", "createdAt": "2020-12-02T20:19:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1MjQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4MTAyMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1307#discussion_r534481020", "bodyText": "Added an enum so all 3 scenarios are supported, and moved some code around to reduce duplication.", "author": "ijungmann", "createdAt": "2020-12-02T21:05:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1MjQ3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1bffc85e6c7a201b9131b7a67dc372bfe34a22a2", "chunk": "diff --git a/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/CryptoTransferTransactionSupplier.java b/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/CryptoTransferTransactionSupplier.java\nindex 699e3d556..cd8a5b151 100644\n--- a/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/CryptoTransferTransactionSupplier.java\n+++ b/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/CryptoTransferTransactionSupplier.java\n\n@@ -48,28 +47,52 @@ public class CryptoTransferTransactionSupplier implements TransactionSupplier<Tr\n \n     private String tokenId;\n \n+    private TransferType transferType = TransferType.CRYPTO;\n+\n     @Override\n     public TransferTransaction get() {\n \n         AccountId recipientId = AccountId.fromString(recipientAccountId);\n         AccountId senderId = AccountId.fromString(senderAccountId);\n+        TokenId transferTokenId = TokenId.fromString(tokenId);\n \n         TransferTransaction transferTransaction = new TransferTransaction()\n                 .setMaxTransactionFee(maxTransactionFee);\n \n-        //Only add an Hbar transfer or a token transfer, never both\n-        if (StringUtils.isBlank(tokenId)) {\n-            transferTransaction\n-                    .addHbarTransfer(recipientId, amount)\n-                    .addHbarTransfer(senderId, Math.negateExact(amount))\n-                    .setTransactionMemo(Utility.getMemo(\"Mirror node created test crypto transfer\"));\n-        } else {\n-            TokenId token = TokenId.fromString(tokenId);\n-            transferTransaction\n-                    .addTokenTransfer(token, recipientId, amount)\n-                    .addTokenTransfer(token, senderId, Math.negateExact(amount))\n-                    .setTransactionMemo(Utility.getMemo(\"Mirror node created test token transfer\"));\n+        switch (transferType) {\n+            case CRYPTO:\n+                addCryptoTransfers(transferTransaction, recipientId, senderId);\n+                transferTransaction.setTransactionMemo(Utility.getMemo(\"Mirror node created test crypto transfer\"));\n+                break;\n+            case TOKEN:\n+                addTokenTransfers(transferTransaction, transferTokenId, recipientId, senderId);\n+                transferTransaction.setTransactionMemo(Utility.getMemo(\"Mirror node created test token transfer\"));\n+                break;\n+            case BOTH:\n+                addTokenTransfers(transferTransaction, transferTokenId, recipientId, senderId);\n+                addCryptoTransfers(transferTransaction, recipientId, senderId);\n+                transferTransaction\n+                        .setTransactionMemo(Utility.getMemo(\"Mirror node created test crypto and token transfer\"));\n+                break;\n         }\n         return transferTransaction;\n     }\n+\n+    private void addCryptoTransfers(TransferTransaction transferTransaction, AccountId recipientId,\n+                                    AccountId senderId) {\n+        transferTransaction\n+                .addHbarTransfer(recipientId, amount)\n+                .addHbarTransfer(senderId, Math.negateExact(amount));\n+    }\n+\n+    private void addTokenTransfers(TransferTransaction transferTransaction, TokenId token, AccountId recipientId,\n+                                   AccountId senderId) {\n+        transferTransaction\n+                .addTokenTransfer(token, recipientId, amount)\n+                .addTokenTransfer(token, senderId, Math.negateExact(amount));\n+    }\n+\n+    public enum TransferType {\n+        CRYPTO, TOKEN, BOTH\n+    }\n }\n"}}, {"oid": "1bffc85e6c7a201b9131b7a67dc372bfe34a22a2", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1bffc85e6c7a201b9131b7a67dc372bfe34a22a2", "message": "Add support for BOTH\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-02T21:01:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4MTMwNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1307#discussion_r534481307", "bodyText": "@NotNull", "author": "steven-sheehy", "createdAt": "2020-12-02T21:06:31Z", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/CryptoTransferTransactionSupplier.java", "diffHunk": "@@ -48,24 +47,52 @@\n \n     private String tokenId;\n \n+    private TransferType transferType = TransferType.CRYPTO;", "originalCommit": "1bffc85e6c7a201b9131b7a67dc372bfe34a22a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4MjE3NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1307#discussion_r534482174", "bodyText": "Oops, fixed", "author": "ijungmann", "createdAt": "2020-12-02T21:08:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4MTMwNw=="}], "type": "inlineReview", "revised_code": {"commit": "2a0243465c7986440a68fad8fde7e9036079c232", "chunk": "diff --git a/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/CryptoTransferTransactionSupplier.java b/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/CryptoTransferTransactionSupplier.java\nindex cd8a5b151..2f6f9c64b 100644\n--- a/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/CryptoTransferTransactionSupplier.java\n+++ b/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/CryptoTransferTransactionSupplier.java\n\n@@ -47,6 +48,7 @@ public class CryptoTransferTransactionSupplier implements TransactionSupplier<Tr\n \n     private String tokenId;\n \n+    @NotNull\n     private TransferType transferType = TransferType.CRYPTO;\n \n     @Override\n"}}, {"oid": "2a0243465c7986440a68fad8fde7e9036079c232", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2a0243465c7986440a68fad8fde7e9036079c232", "message": "Add @NotNull\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-12-02T21:07:26Z", "type": "commit"}]}