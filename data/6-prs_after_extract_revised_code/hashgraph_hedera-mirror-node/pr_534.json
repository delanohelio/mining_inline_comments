{"pr_number": 534, "pr_title": "Add non_fee_transfers table.", "pr_createdAt": "2020-02-13T21:29:01Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/534", "timeline": [{"oid": "bf86931fd4ce3283a2dd8124bef0b918789e560e", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bf86931fd4ce3283a2dd8124bef0b918789e560e", "message": "Add non_fee_transfers table.\nPopulate it from RecordFileLogger.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>", "committedDate": "2020-02-13T21:33:38Z", "type": "forcePushed"}, {"oid": "bd28df67a8c5853cb6061140d6443bd838c63c2d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bd28df67a8c5853cb6061140d6443bd838c63c2d", "message": "Add non_fee_transfers table.\nPopulate it from RecordFileLogger.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>", "committedDate": "2020-02-13T21:55:00Z", "type": "commit"}, {"oid": "bd28df67a8c5853cb6061140d6443bd838c63c2d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bd28df67a8c5853cb6061140d6443bd838c63c2d", "message": "Add non_fee_transfers table.\nPopulate it from RecordFileLogger.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>", "committedDate": "2020-02-13T21:55:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4NzQ2MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r379187461", "bodyText": "did you want to add an else condition to capture any regressions or new conditions that don't satisfy the above if checks?\nYou can add a warning log to highlight it.", "author": "Nana-EC", "createdAt": "2020-02-14T00:03:49Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/NonFeeTransferExtractionStrategyImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.hedera.mirror.importer.parser.record;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.AccountID;\n+import com.hederahashgraph.api.proto.java.ContractID;\n+import com.hederahashgraph.api.proto.java.TransactionBody;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import org.springframework.stereotype.Component;\n+import java.util.LinkedList;\n+\n+/**\n+ * Extract non_fee_transfers requested by a transaction into an iterable list of transfers.\n+ */\n+@Component\n+public class NonFeeTransferExtractionStrategyImpl implements NonFeeTransferExtractionStrategy {\n+    /**\n+     * Return a list of non-fee transfer amounts for certain transaction types. These are explicitly requested\n+     * transfers.\n+     * @param payerAccountId\n+     * @param body\n+     * @param transactionRecord\n+     * @return\n+     */\n+    @Override\n+    public Iterable<AccountAmount> extractNonFeeTransfers(AccountID payerAccountId, TransactionBody body,\n+                                                          TransactionRecord transactionRecord) {\n+        LinkedList<AccountAmount> result = new LinkedList<>();\n+        if (body.hasCryptoTransfer()) {\n+            for (var accountAmount : body.getCryptoTransfer().getTransfers().getAccountAmountsList()) {\n+                result.add(accountAmount);\n+            }\n+        } else if (body.hasCryptoCreateAccount()) {\n+            var amount = body.getCryptoCreateAccount().getInitialBalance();\n+            var newAccountId = transactionRecord.getReceipt().getAccountID();\n+            result.add(AccountAmount.newBuilder().setAccountID(newAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        } else if (body.hasContractCreateInstance()) {\n+            var amount = body.getContractCreateInstance().getInitialBalance();\n+            var contractAccountId = contractIdToAccountId(transactionRecord.getReceipt().getContractID());\n+            result.add(AccountAmount.newBuilder().setAccountID(contractAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        } else if (body.hasContractCall()) {\n+            var amount = body.getContractCall().getAmount();\n+            var contractAccountId = contractIdToAccountId(body.getContractCall().getContractID());\n+            result.add(AccountAmount.newBuilder().setAccountID(contractAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        }", "originalCommit": "bd28df67a8c5853cb6061140d6443bd838c63c2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4NDY3NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r379584675", "bodyText": "There's no harm at all if it's just a pass through (called with transaction types not supported), so I'd rather not add any logging.", "author": "mike-burrage-hedera", "createdAt": "2020-02-14T18:40:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4NzQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4NTAzMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r379585030", "bodyText": "Integration test cases ensure that those 4 types do in fact end up in this code when calling RecordFileLogger.", "author": "mike-burrage-hedera", "createdAt": "2020-02-14T18:40:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4NzQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5NTc1MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r379595750", "bodyText": "Gotcha", "author": "Nana-EC", "createdAt": "2020-02-14T19:05:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4NzQ2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6dedd39f6caaa797acfcc2e9473d5003fe030f84", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/NonFeeTransferExtractionStrategyImpl.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/NonFeeTransferExtractionStrategyImpl.java\nindex 4120347ca..05696366a 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/NonFeeTransferExtractionStrategyImpl.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/NonFeeTransferExtractionStrategyImpl.java\n\n@@ -23,6 +23,7 @@ package com.hedera.mirror.importer.parser.record;\n import com.hederahashgraph.api.proto.java.AccountAmount;\n import com.hederahashgraph.api.proto.java.AccountID;\n import com.hederahashgraph.api.proto.java.ContractID;\n+import com.hederahashgraph.api.proto.java.ResponseCodeEnum;\n import com.hederahashgraph.api.proto.java.TransactionBody;\n import com.hederahashgraph.api.proto.java.TransactionRecord;\n import org.springframework.stereotype.Component;\n"}}, {"oid": "6dedd39f6caaa797acfcc2e9473d5003fe030f84", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6dedd39f6caaa797acfcc2e9473d5003fe030f84", "message": "Change setting persistNonFeeTransfersAlways to persisNonFeeTransfers. Either always store them or do not, based on the setting.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>", "committedDate": "2020-02-14T18:35:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMzI1Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r380803256", "bodyText": "Shouldn't we add an auto-generated primary key anyway like we need to add to do on t_cryptotransferlists to make it faster to replicate?", "author": "steven-sheehy", "createdAt": "2020-02-18T16:54:23Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/NonFeeTransfer.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.Data;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Data\n+@Entity\n+@Table(name = \"non_fee_transfers\")\n+public class NonFeeTransfer {\n+    // There is not actually a pk on non_fee_transfers.", "originalCommit": "6dedd39f6caaa797acfcc2e9473d5003fe030f84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NzgwMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r380857800", "bodyText": "It's not clear if we're running into replication delay due to missing autoincrement/primary key on t_cryptotransferlists. (#525 (comment))\nI can add to this table if you want. It'll impact insert performance some amount, but it's unclear which performance tradeoff is more critical.", "author": "mike-burrage-hedera", "createdAt": "2020-02-18T18:33:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMzI1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxOTczNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r380919737", "bodyText": "Let's just do when #525 is implemented", "author": "steven-sheehy", "createdAt": "2020-02-18T20:34:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMzI1Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyNjM3Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r380826373", "bodyText": "Can these be consolidated into one now?", "author": "steven-sheehy", "createdAt": "2020-02-18T17:33:52Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/CryptoTransferRepository.java", "diffHunk": "@@ -28,4 +28,6 @@\n \n public interface CryptoTransferRepository extends CrudRepository<CryptoTransfer, Long> {\n     Optional<CryptoTransfer> findByConsensusTimestampAndEntityNum(Long consensusTimestamp, Long entityNum);\n+    Optional<CryptoTransfer> findByConsensusTimestampAndEntityNumAndAmount(Long consensusTimestamp, Long entityNum,", "originalCommit": "6dedd39f6caaa797acfcc2e9473d5003fe030f84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1OTQzMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r380859430", "bodyText": "They're both used but I can make the update.\nThey also should both probably return lists instead of optional singles.\nChange is minor and there are only a few tests using these.", "author": "mike-burrage-hedera", "createdAt": "2020-02-18T18:37:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyNjM3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxOTgxMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r380919813", "bodyText": "Not important right now", "author": "steven-sheehy", "createdAt": "2020-02-18T20:35:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyNjM3Mw=="}], "type": "inlineReview", "revised_code": null}]}