{"pr_number": 550, "pr_title": "RecordFileLogger performing far too many queries against t_entities", "pr_createdAt": "2020-02-21T17:39:22Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/550", "timeline": [{"oid": "052681ad654f484b6600a33cc6320092c3040f72", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/052681ad654f484b6600a33cc6320092c3040f72", "message": "Bug fix\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>", "committedDate": "2020-02-21T20:21:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxMTYzNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382811635", "bodyText": "Can be removed", "author": "steven-sheehy", "createdAt": "2020-02-21T21:22:03Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EntityId.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+@Data\n+@Entity\n+@Log4j2", "originalCommit": "052681ad654f484b6600a33cc6320092c3040f72", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e6d5548ab36f2e02681745e07642bb3f28ba4b0", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EntityId.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EntityId.java\nindex feff4934..0378c7d4 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EntityId.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EntityId.java\n\n@@ -32,7 +32,6 @@ import lombok.extern.log4j.Log4j2;\n \n @Data\n @Entity\n-@Log4j2\n @Table(name = \"t_entities\")\n @NoArgsConstructor\n public class EntityId {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNDY4MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382814680", "bodyText": "Should use constructor injection for both fields (e.g. make both private final)", "author": "steven-sheehy", "createdAt": "2020-02-21T21:29:52Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package com.hedera.mirror.importer.parser.record;\n+\n+import com.hedera.mirror.importer.parser.CommonParserProperties;\n+import com.hedera.mirror.importer.repository.EntityIdRepository;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.stereotype.Component;\n+import javax.annotation.Resource;\n+\n+@Component\n+@RequiredArgsConstructor\n+public class EntityIdCacheLoader implements InitializingBean {\n+    @Resource\n+    EntityIdRepository entityIdRepository;", "originalCommit": "052681ad654f484b6600a33cc6320092c3040f72", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e6d5548ab36f2e02681745e07642bb3f28ba4b0", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java\nindex 4c2f3581..59b138af 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java\n\n@@ -20,25 +20,36 @@\n \n package com.hedera.mirror.importer.parser.record;\n \n+import com.google.common.base.Stopwatch;\n+\n import com.hedera.mirror.importer.parser.CommonParserProperties;\n import com.hedera.mirror.importer.repository.EntityIdRepository;\n \n import lombok.RequiredArgsConstructor;\n-import org.springframework.beans.factory.InitializingBean;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.event.EventListener;\n import org.springframework.data.domain.PageRequest;\n+import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Component;\n-import javax.annotation.Resource;\n \n @Component\n+@Log4j2\n @RequiredArgsConstructor\n-public class EntityIdCacheLoader implements InitializingBean {\n-    @Resource\n-    EntityIdRepository entityIdRepository;\n+public class EntityIdCacheLoader {\n+    private final EntityIdRepository entityIdRepository;\n     private final CommonParserProperties commonParserProperties;\n \n-    @Override\n-    public void afterPropertiesSet() {\n+    @Async\n+    @EventListener(ApplicationReadyEvent.class)\n+    public void load() {\n         var pageable = PageRequest.of(0, commonParserProperties.getEntityIdCacheSize());\n-        entityIdRepository.findAll(pageable); // Seed the cache\n+\n+        Stopwatch stopwatch = Stopwatch.createStarted();\n+        // Seed the cache\n+        entityIdRepository.findAll(pageable).forEach(id -> {\n+            entityIdRepository.cache(id);\n+        });\n+        log.info(\"Cached event id mappings in {}\", stopwatch);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNTU5Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382815597", "bodyText": "This will get run synchronously in the main thread. Also InitializingBean is right after bean created so might race with flyway migration beans. Better to do async event listening:\n@Async\n@EventListener(ApplicationReadyEvent.class)\npublic void load() {\n...\n}", "author": "steven-sheehy", "createdAt": "2020-02-21T21:32:26Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package com.hedera.mirror.importer.parser.record;\n+\n+import com.hedera.mirror.importer.parser.CommonParserProperties;\n+import com.hedera.mirror.importer.repository.EntityIdRepository;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.stereotype.Component;\n+import javax.annotation.Resource;\n+\n+@Component\n+@RequiredArgsConstructor\n+public class EntityIdCacheLoader implements InitializingBean {\n+    @Resource\n+    EntityIdRepository entityIdRepository;\n+    private final CommonParserProperties commonParserProperties;\n+\n+    @Override\n+    public void afterPropertiesSet() {\n+        var pageable = PageRequest.of(0, commonParserProperties.getEntityIdCacheSize());\n+        entityIdRepository.findAll(pageable); // Seed the cache", "originalCommit": "052681ad654f484b6600a33cc6320092c3040f72", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e6d5548ab36f2e02681745e07642bb3f28ba4b0", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java\nindex 4c2f3581..59b138af 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java\n\n@@ -20,25 +20,36 @@\n \n package com.hedera.mirror.importer.parser.record;\n \n+import com.google.common.base.Stopwatch;\n+\n import com.hedera.mirror.importer.parser.CommonParserProperties;\n import com.hedera.mirror.importer.repository.EntityIdRepository;\n \n import lombok.RequiredArgsConstructor;\n-import org.springframework.beans.factory.InitializingBean;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.event.EventListener;\n import org.springframework.data.domain.PageRequest;\n+import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Component;\n-import javax.annotation.Resource;\n \n @Component\n+@Log4j2\n @RequiredArgsConstructor\n-public class EntityIdCacheLoader implements InitializingBean {\n-    @Resource\n-    EntityIdRepository entityIdRepository;\n+public class EntityIdCacheLoader {\n+    private final EntityIdRepository entityIdRepository;\n     private final CommonParserProperties commonParserProperties;\n \n-    @Override\n-    public void afterPropertiesSet() {\n+    @Async\n+    @EventListener(ApplicationReadyEvent.class)\n+    public void load() {\n         var pageable = PageRequest.of(0, commonParserProperties.getEntityIdCacheSize());\n-        entityIdRepository.findAll(pageable); // Seed the cache\n+\n+        Stopwatch stopwatch = Stopwatch.createStarted();\n+        // Seed the cache\n+        entityIdRepository.findAll(pageable).forEach(id -> {\n+            entityIdRepository.cache(id);\n+        });\n+        log.info(\"Cached event id mappings in {}\", stopwatch);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNjczMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382816730", "bodyText": "Why are we creating a separate entity for the same collection? Is this really just a minimal view of Entities? If so, you can just use interface projection or class-based DTOs for this.", "author": "steven-sheehy", "createdAt": "2020-02-21T21:35:37Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EntityId.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@Table(name = \"t_entities\")\n+@NoArgsConstructor\n+public class EntityId {", "originalCommit": "052681ad654f484b6600a33cc6320092c3040f72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwOTk4MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r383409981", "bodyText": "refactored for DTO-based projection", "author": "mike-burrage-hedera", "createdAt": "2020-02-24T17:34:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNjczMA=="}], "type": "inlineReview", "revised_code": {"commit": "1e6d5548ab36f2e02681745e07642bb3f28ba4b0", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EntityId.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EntityId.java\nindex feff4934..0378c7d4 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EntityId.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EntityId.java\n\n@@ -32,7 +32,6 @@ import lombok.extern.log4j.Log4j2;\n \n @Data\n @Entity\n-@Log4j2\n @Table(name = \"t_entities\")\n @NoArgsConstructor\n public class EntityId {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNzM4Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382817387", "bodyText": "Once you switch to interface projection, just move these methods into existing EntityRepository. You can't use class-level cacheconfig though, of course.", "author": "steven-sheehy", "createdAt": "2020-02-21T21:37:12Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityIdRepository.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.hedera.mirror.importer.repository;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.Optional;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+\n+import org.springframework.cache.annotation.CacheConfig;\n+import org.springframework.cache.annotation.CachePut;\n+import org.springframework.cache.annotation.Cacheable;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.jpa.repository.Query;\n+\n+import com.hedera.mirror.importer.config.CacheConfiguration;\n+\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+\n+@CacheConfig(cacheNames = \"entity_ids\", cacheManager = CacheConfiguration.BIG_LRU_CACHE)\n+public interface EntityIdRepository extends PagingAndSortingRepository<EntityId, Long> {", "originalCommit": "052681ad654f484b6600a33cc6320092c3040f72", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e6d5548ab36f2e02681745e07642bb3f28ba4b0", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityIdRepository.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityIdRepository.java\nindex 8cdd1f60..7c9ced68 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityIdRepository.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityIdRepository.java\n\n@@ -20,6 +20,7 @@ package com.hedera.mirror.importer.repository;\n  * \u200d\n  */\n \n+import java.util.Collection;\n import java.util.Optional;\n \n import com.hedera.mirror.importer.domain.EntityId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNzk5Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382817996", "bodyText": "These would be more reusable as static helper methods on EntityId: EntityId.of(accountID)", "author": "steven-sheehy", "createdAt": "2020-02-21T21:38:53Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileLogger.java", "diffHunk": "@@ -1017,6 +1033,30 @@ private static Entities getEntity(long shardNum, long realmNum, long entityNum,\n         });\n     }\n \n+    public static EntityId getEntityId(AccountID accountID) {", "originalCommit": "052681ad654f484b6600a33cc6320092c3040f72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwNDYxMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r383404610", "bodyText": "you want the EntityRepository and EntityTypeRepository injected into the EntityId DTO?", "author": "mike-burrage-hedera", "createdAt": "2020-02-24T17:24:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNzk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwODAzMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r383408032", "bodyText": "No, I was thinking you'd just construct the EntityId object then use that to search the repo in recordfilelogger. Reason is we need a way to normalize this concept of an EntityId that varies per type (account/file/contract/topic). But we can also do this as part of refactor.", "author": "steven-sheehy", "createdAt": "2020-02-24T17:30:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNzk5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1e6d5548ab36f2e02681745e07642bb3f28ba4b0", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileLogger.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileLogger.java\nindex a588cf81..6fc0b876 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileLogger.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileLogger.java\n\n@@ -1053,14 +1053,28 @@ public class RecordFileLogger {\n         if (0 == entityNum) {\n             return null;\n         }\n-        return entityIdRepository.findOrCreateBy(shardNum, realmNum, entityNum,\n-                entityTypeRepository.findByName(type).map(EntityType::getId).get());\n+        return entityIdRepository.findByNativeIds(shardNum, realmNum, entityNum).orElseGet(() -> {\n+            EntityId entityId = new EntityId();\n+            entityId.setEntityShard(shardNum);\n+            entityId.setEntityRealm(realmNum);\n+            entityId.setEntityNum(entityNum);\n+            entityId.setEntityTypeId(entityTypeRepository.findByName(type).map(EntityType::getId).get());\n+            return entityIdRepository.save(entityId);\n+        });\n     }\n \n     private static Entities createEntity(Entities entity) {\n         if (entity != null && entity.getId() == null) {\n             log.debug(\"Creating entity: {}\", () -> entity.getDisplayId());\n-            return entityRepository.save(entity);\n+            var result = entityRepository.save(entity);\n+            var entityId = new EntityId();\n+            entityId.setId(result.getId());\n+            entityId.setEntityShard(result.getEntityShard());\n+            entityId.setEntityRealm(result.getEntityRealm());\n+            entityId.setEntityNum(result.getEntityNum());\n+            entityId.setEntityTypeId(result.getEntityTypeId());\n+            entityIdRepository.cache(entityId);\n+            return result;\n         }\n         return entity;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMzk4MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382823980", "bodyText": "Are you sure this is updating the cache? With Spring AOP you generally can't call proxied methods from inside a proxied method. It doesn't exit the class and come back in so it doesn't hit the cache decorator. You can increase spring cache logging to confirm.", "author": "steven-sheehy", "createdAt": "2020-02-21T21:54:56Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityIdRepository.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.hedera.mirror.importer.repository;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.Optional;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+\n+import org.springframework.cache.annotation.CacheConfig;\n+import org.springframework.cache.annotation.CachePut;\n+import org.springframework.cache.annotation.Cacheable;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.jpa.repository.Query;\n+\n+import com.hedera.mirror.importer.config.CacheConfiguration;\n+\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+\n+@CacheConfig(cacheNames = \"entity_ids\", cacheManager = CacheConfiguration.BIG_LRU_CACHE)\n+public interface EntityIdRepository extends PagingAndSortingRepository<EntityId, Long> {\n+\n+    @Cacheable(key = \"{#p0, #p1, #p2}\", sync = true)\n+    @Query(\"from EntityId where entityShard = ?1 and entityRealm = ?2 and entityNum = ?3\")\n+    Optional<EntityId> findByNativeIds(long entityShard, long entityRealm, long entityNum);\n+\n+    @Cacheable(key = \"{#p0.entityShard, #p0.entityRealm, #p0.entityNum}\")\n+    @Override\n+    Page<EntityId> findAll(Pageable pageable);\n+\n+    default EntityId findOrCreateBy(long entityShard, long entityRealm, long entityNum, int entityTypeId) {\n+        var found = findByNativeIds(entityShard, entityRealm, entityNum);\n+        if (!found.isPresent()) {\n+            return save(new EntityId(entityShard, entityRealm, entityNum, entityTypeId));", "originalCommit": "052681ad654f484b6600a33cc6320092c3040f72", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e6d5548ab36f2e02681745e07642bb3f28ba4b0", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityIdRepository.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityIdRepository.java\nindex 8cdd1f60..7c9ced68 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityIdRepository.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityIdRepository.java\n\n@@ -20,6 +20,7 @@ package com.hedera.mirror.importer.repository;\n  * \u200d\n  */\n \n+import java.util.Collection;\n import java.util.Optional;\n \n import com.hedera.mirror.importer.domain.EntityId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxODM1MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382818350", "bodyText": "would suggest adding logging before and after findAll. Would tell us how many startup seconds it costs us to warm the cache in prod.", "author": "apeksharma", "createdAt": "2020-02-21T21:39:46Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package com.hedera.mirror.importer.parser.record;\n+\n+import com.hedera.mirror.importer.parser.CommonParserProperties;\n+import com.hedera.mirror.importer.repository.EntityIdRepository;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.stereotype.Component;\n+import javax.annotation.Resource;\n+\n+@Component\n+@RequiredArgsConstructor\n+public class EntityIdCacheLoader implements InitializingBean {\n+    @Resource\n+    EntityIdRepository entityIdRepository;\n+    private final CommonParserProperties commonParserProperties;\n+\n+    @Override\n+    public void afterPropertiesSet() {\n+        var pageable = PageRequest.of(0, commonParserProperties.getEntityIdCacheSize());", "originalCommit": "052681ad654f484b6600a33cc6320092c3040f72", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e6d5548ab36f2e02681745e07642bb3f28ba4b0", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java\nindex 4c2f3581..59b138af 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java\n\n@@ -20,25 +20,36 @@\n \n package com.hedera.mirror.importer.parser.record;\n \n+import com.google.common.base.Stopwatch;\n+\n import com.hedera.mirror.importer.parser.CommonParserProperties;\n import com.hedera.mirror.importer.repository.EntityIdRepository;\n \n import lombok.RequiredArgsConstructor;\n-import org.springframework.beans.factory.InitializingBean;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.event.EventListener;\n import org.springframework.data.domain.PageRequest;\n+import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Component;\n-import javax.annotation.Resource;\n \n @Component\n+@Log4j2\n @RequiredArgsConstructor\n-public class EntityIdCacheLoader implements InitializingBean {\n-    @Resource\n-    EntityIdRepository entityIdRepository;\n+public class EntityIdCacheLoader {\n+    private final EntityIdRepository entityIdRepository;\n     private final CommonParserProperties commonParserProperties;\n \n-    @Override\n-    public void afterPropertiesSet() {\n+    @Async\n+    @EventListener(ApplicationReadyEvent.class)\n+    public void load() {\n         var pageable = PageRequest.of(0, commonParserProperties.getEntityIdCacheSize());\n-        entityIdRepository.findAll(pageable); // Seed the cache\n+\n+        Stopwatch stopwatch = Stopwatch.createStarted();\n+        // Seed the cache\n+        entityIdRepository.findAll(pageable).forEach(id -> {\n+            entityIdRepository.cache(id);\n+        });\n+        log.info(\"Cached event id mappings in {}\", stopwatch);\n     }\n }\n"}}, {"oid": "1e6d5548ab36f2e02681745e07642bb3f28ba4b0", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1e6d5548ab36f2e02681745e07642bb3f28ba4b0", "message": "Address code review comments.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>", "committedDate": "2020-02-23T16:31:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzOTM1Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r383339353", "bodyText": "q: should this be a configurable property in commonParserProperties?", "author": "Nana-EC", "createdAt": "2020-02-24T15:38:51Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/CacheConfiguration.java", "diffHunk": "@@ -50,4 +58,19 @@ CacheManager cacheManager30m() {\n         caffeineCacheManager.setCacheSpecification(\"maximumSize=10000,expireAfterWrite=30m\");\n         return caffeineCacheManager;\n     }\n+\n+    // Cache for small sets of DB \"constants\" that don't change and are looked up once.\n+    @Bean(TINY_LRU_CACHE)\n+    CacheManager tinyLruCache() {\n+        CaffeineCacheManager caffeineCacheManager = new CaffeineCacheManager();\n+        caffeineCacheManager.setCacheSpecification(\"maximumSize=100\");", "originalCommit": "354bf627d28122070fd9aea9fce8639dd93efc96", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwNjc3NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r383406775", "bodyText": "This is used only for caching entity types currently. I don't think it's worth adding a config param", "author": "mike-burrage-hedera", "createdAt": "2020-02-24T17:28:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzOTM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ1MzQ4OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r383453488", "bodyText": "Okay", "author": "Nana-EC", "createdAt": "2020-02-24T19:01:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzOTM1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "81c35ccf0ffc67f2d4c2c02e2f665d62ed4a84b4", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/CacheConfiguration.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/CacheConfiguration.java\nindex bb9d1bee..6d9d15fa 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/CacheConfiguration.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/CacheConfiguration.java\n\n@@ -59,18 +52,10 @@ public class CacheConfiguration {\n         return caffeineCacheManager;\n     }\n \n-    // Cache for small sets of DB \"constants\" that don't change and are looked up once.\n-    @Bean(TINY_LRU_CACHE)\n-    CacheManager tinyLruCache() {\n-        CaffeineCacheManager caffeineCacheManager = new CaffeineCacheManager();\n-        caffeineCacheManager.setCacheSpecification(\"maximumSize=100\");\n-        return caffeineCacheManager;\n-    }\n-\n     @Bean(BIG_LRU_CACHE)\n     CacheManager bigLruCache() {\n         CaffeineCacheManager caffeineCacheManager = new CaffeineCacheManager();\n-        caffeineCacheManager.setCacheSpecification(\"maximumSize=\" + commonParserProperties.getEntityIdCacheSize());\n+        caffeineCacheManager.setCacheSpecification(\"maximumSize=100000\");\n         return caffeineCacheManager;\n     }\n }\n"}}, {"oid": "ded57c433ce1c97e48f31f5bd46e580ab8bd17d0", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ded57c433ce1c97e48f31f5bd46e580ab8bd17d0", "message": "Add config property hedera.mirror.importer.parser.entityIdCacheSize\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>", "committedDate": "2020-02-24T20:58:16Z", "type": "forcePushed"}, {"oid": "81c35ccf0ffc67f2d4c2c02e2f665d62ed4a84b4", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/81c35ccf0ffc67f2d4c2c02e2f665d62ed4a84b4", "message": "Utilize an in-memory mapping of t_entities.id to (shard,realm,num) to speed up insert.\nTransactions that create/update/delete entities still go through the repository causing blocking/serial queries during processing.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>", "committedDate": "2020-02-24T23:01:52Z", "type": "commit"}, {"oid": "992fb02ced28ee664bca9aadaf7aac0b1da07950", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/992fb02ced28ee664bca9aadaf7aac0b1da07950", "message": "Make entityIdCacheSize configurable.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>", "committedDate": "2020-02-24T23:01:53Z", "type": "commit"}, {"oid": "2bab98b50f27f1a857e7a743b7cdc302fe2776af", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2bab98b50f27f1a857e7a743b7cdc302fe2776af", "message": "Bug fix\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>", "committedDate": "2020-02-24T23:01:53Z", "type": "commit"}, {"oid": "b4460d01917656603dedd08ca78759a9c01915ad", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b4460d01917656603dedd08ca78759a9c01915ad", "message": "Address code review comments.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>", "committedDate": "2020-02-24T23:01:54Z", "type": "commit"}, {"oid": "8e5f589c4ad60a3c4335f87c67ca58b52febe9b2", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8e5f589c4ad60a3c4335f87c67ca58b52febe9b2", "message": "Log message fix.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>", "committedDate": "2020-02-24T23:01:54Z", "type": "commit"}, {"oid": "245ed9b916259778c8341e5197640223b678691c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/245ed9b916259778c8341e5197640223b678691c", "message": "Use DTO projection.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>", "committedDate": "2020-02-24T23:01:54Z", "type": "commit"}, {"oid": "85f001cc1d5de030fbfc3ec04e60e39ac42550b6", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/85f001cc1d5de030fbfc3ec04e60e39ac42550b6", "message": "Add config property hedera.mirror.importer.parser.entityIdCacheSize\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>", "committedDate": "2020-02-24T23:01:55Z", "type": "commit"}, {"oid": "85f001cc1d5de030fbfc3ec04e60e39ac42550b6", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/85f001cc1d5de030fbfc3ec04e60e39ac42550b6", "message": "Add config property hedera.mirror.importer.parser.entityIdCacheSize\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>", "committedDate": "2020-02-24T23:01:55Z", "type": "forcePushed"}]}