{"pr_number": 721, "pr_title": "Update protobuf for Hedera Node 0.5.0", "pr_createdAt": "2020-04-29T00:40:07Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/721", "timeline": [{"oid": "2ebc8addfdfb49428e327bf27b078773e2abfaaa", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2ebc8addfdfb49428e327bf27b078773e2abfaaa", "message": "Pull in Hedera Protobug 0.4.2 for r5-rc4 update\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-04-29T00:32:36Z", "type": "commit"}, {"oid": "847c4b7a340c086fecedb49f35000cc73f725ab5", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/847c4b7a340c086fecedb49f35000cc73f725ab5", "message": "Addressed feedback\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-04-29T15:10:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5MzUwOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/721#discussion_r417493508", "bodyText": "please rename the fn too", "author": "apeksharma", "createdAt": "2020-04-29T17:38:35Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordItemParser.java", "diffHunk": "@@ -133,8 +133,8 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n         if (isSuccessful) {\n             if (body.hasConsensusSubmitMessage()) {\n                 insertConsensusTopicMessage(body.getConsensusSubmitMessage(), txRecord);\n-            } else if (body.hasCryptoAddClaim()) {\n-                insertCryptoAddClaim(consensusNs, body.getCryptoAddClaim());\n+            } else if (body.hasCryptoAddLiveHash()) {\n+                insertCryptoAddClaim(consensusNs, body.getCryptoAddLiveHash());", "originalCommit": "847c4b7a340c086fecedb49f35000cc73f725ab5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33be74d96d4ff9e8ee6fdfedc6e9bbf1556d69f5", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordItemParser.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordItemParser.java\nindex e6a55b1d..3c410b76 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordItemParser.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordItemParser.java\n\n@@ -134,7 +134,7 @@ public class RecordItemParser implements RecordItemListener {\n             if (body.hasConsensusSubmitMessage()) {\n                 insertConsensusTopicMessage(body.getConsensusSubmitMessage(), txRecord);\n             } else if (body.hasCryptoAddLiveHash()) {\n-                insertCryptoAddClaim(consensusNs, body.getCryptoAddLiveHash());\n+                insertCryptoAddLiveHash(consensusNs, body.getCryptoAddLiveHash());\n             } else if (body.hasFileAppend()) {\n                 insertFileAppend(consensusNs, body.getFileAppend());\n             } else if (body.hasFileCreate()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5NDgwMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/721#discussion_r417494800", "bodyText": "we tend to keep tests before helper fns.\nSteven suggested it earlier, i like it too. If you're good with it, please move it back.", "author": "apeksharma", "createdAt": "2020-04-29T17:40:46Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/domain/PubSubMessageTest.java", "diffHunk": "@@ -234,4 +176,63 @@ private static String getExpectedTransactionRecord() {\n                 \"  }\" +\n                 \"}\";\n     }\n+", "originalCommit": "847c4b7a340c086fecedb49f35000cc73f725ab5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzMjUyNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/721#discussion_r417532525", "bodyText": "Was wondering what this was in response to. Seems to be an on save action that did this. Sigh", "author": "Nana-EC", "createdAt": "2020-04-29T18:43:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5NDgwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzNDEzMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/721#discussion_r417534132", "bodyText": "This might be settable via editorconfig as well so we're all on the same page.", "author": "steven-sheehy", "createdAt": "2020-04-29T18:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5NDgwMA=="}], "type": "inlineReview", "revised_code": {"commit": "33be74d96d4ff9e8ee6fdfedc6e9bbf1556d69f5", "chunk": "diff --git a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/domain/PubSubMessageTest.java b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/domain/PubSubMessageTest.java\nindex 6877e021..2f4f5c89 100644\n--- a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/domain/PubSubMessageTest.java\n+++ b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/domain/PubSubMessageTest.java\n\n@@ -176,63 +235,4 @@ class PubSubMessageTest {\n                 \"  }\" +\n                 \"}\";\n     }\n-\n-    @Test\n-    void testSerializationAllFieldsSet() throws Exception {\n-        Iterable<AccountAmount> nonFeeTransfers = Lists.newArrayList(\n-                AccountAmount.newBuilder().setAccountID(ACCOUNT_ID).setAmount(INT64_VALUE).build(),\n-                AccountAmount.newBuilder().setAccountID(ACCOUNT_ID).setAmount(INT64_VALUE).build());\n-        PubSubMessage pubSubMessage = new PubSubMessage(\n-                DEFAULT_TIMESTAMP_LONG,\n-                EntityId.of(TOPIC_ID),\n-                10,\n-                getTransaction(),\n-                getTransactionRecord(),\n-                nonFeeTransfers);\n-        ObjectMapper objectMapper = new ObjectMapper();\n-        JsonNode actual = objectMapper.readTree(objectMapper.writeValueAsString(pubSubMessage));\n-        JsonNode expected = objectMapper.readTree(\"{\" +\n-                \"  \\\"consensusTimestamp\\\" : 123456789,\" +\n-                \"  \\\"entity\\\" : {\" +\n-                \"    \\\"shardNum\\\" : 0,\" +\n-                \"    \\\"realmNum\\\" : 0,\" +\n-                \"    \\\"entityNum\\\" : 20,\" +\n-                \"    \\\"type\\\" : 4\" +\n-                \"  },\" +\n-                \"  \\\"transactionType\\\" : 10,\" +\n-                getExpectedTransactionJson() + \",\" +\n-                getExpectedTransactionRecord() + \",\" +\n-                \"  \\\"nonFeeTransfers\\\" : [ {\" +\n-                \"    \\\"accountID\\\": {\" +\n-                \"      \\\"shardNum\\\": \\\"0\\\",\" +\n-                \"      \\\"realmNum\\\": \\\"0\\\",\" +\n-                \"      \\\"accountNum\\\": \\\"10\\\"\" +\n-                \"      },\" +\n-                \"    \\\"amount\\\": \\\"100000000\\\"\" +\n-                \"  }, {\" +\n-                \"    \\\"accountID\\\": {\" +\n-                \"      \\\"shardNum\\\": \\\"0\\\",\" +\n-                \"      \\\"realmNum\\\": \\\"0\\\",\" +\n-                \"      \\\"accountNum\\\": \\\"10\\\"\" +\n-                \"      },\" +\n-                \"    \\\"amount\\\": \\\"100000000\\\"\" +\n-                \"  } ]\" +\n-                \"}\");\n-        assertThat(actual).isEqualTo(expected);\n-    }\n-\n-    @Test\n-    void testSerializationWithNullFields() throws Exception {\n-        PubSubMessage pubSubMessage = new PubSubMessage(DEFAULT_TIMESTAMP_LONG, null, 10, getTransaction(),\n-                getTransactionRecord(), null);\n-        ObjectMapper objectMapper = new ObjectMapper();\n-        JsonNode actual = objectMapper.readTree(objectMapper.writeValueAsString(pubSubMessage));\n-        JsonNode expected = objectMapper.readTree(\"{\" +\n-                \"  \\\"consensusTimestamp\\\" : 123456789,\" +\n-                \"  \\\"transactionType\\\" : 10,\" +\n-                getExpectedTransactionJson() + \",\" +\n-                getExpectedTransactionRecord() +\n-                \"}\");\n-        assertThat(actual).isEqualTo(expected);\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5NTIxOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/721#discussion_r417495219", "bodyText": "same. Other helper fns are in the end too, let's keep them together.", "author": "apeksharma", "createdAt": "2020-04-29T17:41:27Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/RecordItemParserCryptoTest.java", "diffHunk": "@@ -77,6 +76,33 @@\n     private static final long[] transferAccounts = {98, 2002, 3};\n     private static final long[] transferAmounts = {1000, -2000, 20};\n \n+    private static Transaction cryptoUpdateTransaction() {", "originalCommit": "847c4b7a340c086fecedb49f35000cc73f725ab5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33be74d96d4ff9e8ee6fdfedc6e9bbf1556d69f5", "chunk": "diff --git a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/RecordItemParserCryptoTest.java b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/RecordItemParserCryptoTest.java\nindex c34ca78d..e5007705 100644\n--- a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/RecordItemParserCryptoTest.java\n+++ b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/RecordItemParserCryptoTest.java\n\n@@ -76,33 +76,6 @@ public class RecordItemParserCryptoTest extends AbstractRecordItemParserTest {\n     private static final long[] transferAccounts = {98, 2002, 3};\n     private static final long[] transferAmounts = {1000, -2000, 20};\n \n-    private static Transaction cryptoUpdateTransaction() {\n-\n-        Transaction.Builder transaction = Transaction.newBuilder();\n-        CryptoUpdateTransactionBody.Builder cryptoUpdate = CryptoUpdateTransactionBody.newBuilder();\n-        String key = \"0a2312200aa8e21064c61eab86e2a9c164565b4e7a9a4146106e0a6cd03a8c395a110aaa\";\n-\n-        // Build a transaction\n-        cryptoUpdate.setAccountIDToUpdate(accountId);\n-        cryptoUpdate.setAutoRenewPeriod(Duration.newBuilder().setSeconds(5001L));\n-        cryptoUpdate.setExpirationTime(Utility.instantToTimestamp(Instant.now()));\n-        cryptoUpdate.setKey(keyFromString(key));\n-        cryptoUpdate.setProxyAccountID(AccountID.newBuilder().setShardNum(5).setRealmNum(6).setAccountNum(8));\n-        cryptoUpdate.setReceiveRecordThreshold(5001L);\n-        cryptoUpdate.setReceiverSigRequired(false);\n-        cryptoUpdate.setSendRecordThreshold(6001L);\n-\n-        // Transaction body\n-        TransactionBody.Builder body = defaultTransactionBodyBuilder(memo);\n-        // body transaction\n-        body.setCryptoUpdateAccount(cryptoUpdate.build());\n-\n-        transaction.setBodyBytes(body.build().toByteString());\n-        transaction.setSigMap(getSigMap());\n-\n-        return transaction.build();\n-    }\n-\n     @BeforeEach\n     void before() {\n         parserProperties.getPersist().setClaims(true);\n"}}, {"oid": "33be74d96d4ff9e8ee6fdfedc6e9bbf1556d69f5", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/33be74d96d4ff9e8ee6fdfedc6e9bbf1556d69f5", "message": "Fixed arrangement\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-04-29T18:46:54Z", "type": "commit"}, {"oid": "f764f67ecda05acf0d63b758dda67e64a6b6069d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f764f67ecda05acf0d63b758dda67e64a6b6069d", "message": "minor variable rename\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-04-29T18:53:54Z", "type": "commit"}]}