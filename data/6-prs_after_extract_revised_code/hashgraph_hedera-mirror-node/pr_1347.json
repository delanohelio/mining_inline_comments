{"pr_number": 1347, "pr_title": "Add monitor dashboard", "pr_createdAt": "2020-12-11T17:02:43Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/1347", "timeline": [{"oid": "26c7795739906bc842b6e959ebe8b77067b6db8f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/26c7795739906bc842b6e959ebe8b77067b6db8f", "message": "Add monitor dashboard\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-12-11T17:01:15Z", "type": "commit"}, {"oid": "a3a46beea2c98f62f823731cf807a90a4f45930a", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a3a46beea2c98f62f823731cf807a90a4f45930a", "message": "Fix tests after merge\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-12-11T17:39:10Z", "type": "commit"}, {"oid": "abb83acae0c3ea155b2f3d67747ca76d639631ba", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/abb83acae0c3ea155b2f3d67747ca76d639631ba", "message": "Fix code smells\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-12-11T18:11:57Z", "type": "commit"}, {"oid": "d0fdb793d37d99f300e8294181fd99e9287cc89c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d0fdb793d37d99f300e8294181fd99e9287cc89c", "message": "Clean up monitor images\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-12-11T19:41:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyNzI3Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1347#discussion_r541227276", "bodyText": "q: we use nanos (TimeGauge) and milliseconds (Timers).\nDoes this mean the graphs have differing precisions or is this to comply with the metrics calculation defaults?\nWondering why differing precisions are interpreted and whether we consider standardizing it?", "author": "Nana-EC", "createdAt": "2020-12-11T20:01:46Z", "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/publish/PublishMetrics.java", "diffHunk": "@@ -86,22 +91,49 @@ public PublishResponse record(PublishRequest publishRequest,\n             log.debug(\"{} submitting {} transaction: {}\", status, type, e.getMessage());\n             throw new PublishException(e);\n         } finally {\n-            long endTime = System.currentTimeMillis();\n-            Tags tags = new Tags(status, type);\n-            Timer timer = timers.computeIfAbsent(tags, this::newTimer);\n-            timer.record(endTime - startTime, TimeUnit.MILLISECONDS);\n+            long endTime = response != null ? response.getTimestamp().toEpochMilli() : System.currentTimeMillis();\n+            String scenarioName = publishRequest.getScenarioName();\n+            Tags tags = new Tags(scenarioName, status, type);\n+            Timer submitTimer = submitTimers.computeIfAbsent(tags, this::newSubmitMetric);\n+            submitTimer.record(endTime - startTime, TimeUnit.MILLISECONDS);\n+            durationGauges.computeIfAbsent(tags, this::newDurationMetric);\n+\n+            if (response != null && response.getReceipt() != null) {\n+                long elapsed = System.currentTimeMillis() - startTime;\n+                Timer handleTimer = handleTimers.computeIfAbsent(tags, this::newHandleMetric);\n+                handleTimer.record(elapsed, TimeUnit.MILLISECONDS);\n+            }\n \n             if (!SUCCESS.equals(status)) {\n                 errors.add(status);\n             }\n         }\n     }\n \n-    private Timer newTimer(Tags tags) {\n-        return Timer.builder(\"hedera.mirror.monitor.publish\")\n-                .description(\"The time it takes to publish a transaction\")\n-                .tag(\"status\", tags.getStatus())\n-                .tag(\"type\", tags.getType().toString())\n+    private TimeGauge newDurationMetric(Tags tags) {\n+        TimeUnit unit = TimeUnit.NANOSECONDS;", "originalCommit": "d0fdb793d37d99f300e8294181fd99e9287cc89c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI1NjgzNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1347#discussion_r541256834", "bodyText": "You can record times in any unit. The datastore specific MeterRegistry will normalize it to what is supported for that datastore. You can see this in the different implementations of MeterRegistry.getBaseTimeUnit(). Prometheus supports second resolution while Elastic supports milliseconds.", "author": "steven-sheehy", "createdAt": "2020-12-11T20:30:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyNzI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI1ODk0NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1347#discussion_r541258944", "bodyText": "I should note that it's still a double value for Timers. So a double value measured in seconds can still give you lower than second granularity.", "author": "steven-sheehy", "createdAt": "2020-12-11T20:32:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyNzI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3NzM3MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1347#discussion_r541277370", "bodyText": "Sounds good", "author": "Nana-EC", "createdAt": "2020-12-11T20:52:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyNzI3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIzMzMxMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1347#discussion_r541233311", "bodyText": "nit: Would it be worth adding a method in this class to give the metric names here?\ne.g.\n...\nString METRIC_NAME_PREFIX = \"hedera.mirror.monitor.publish.\";\n...\npublic static String getMetricName(String postfix) {\n return METRIC_NAME_PREFIX + postfix\n}", "author": "Nana-EC", "createdAt": "2020-12-11T20:08:15Z", "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/publish/PublishMetrics.java", "diffHunk": "@@ -86,22 +91,49 @@ public PublishResponse record(PublishRequest publishRequest,\n             log.debug(\"{} submitting {} transaction: {}\", status, type, e.getMessage());\n             throw new PublishException(e);\n         } finally {\n-            long endTime = System.currentTimeMillis();\n-            Tags tags = new Tags(status, type);\n-            Timer timer = timers.computeIfAbsent(tags, this::newTimer);\n-            timer.record(endTime - startTime, TimeUnit.MILLISECONDS);\n+            long endTime = response != null ? response.getTimestamp().toEpochMilli() : System.currentTimeMillis();\n+            String scenarioName = publishRequest.getScenarioName();\n+            Tags tags = new Tags(scenarioName, status, type);\n+            Timer submitTimer = submitTimers.computeIfAbsent(tags, this::newSubmitMetric);\n+            submitTimer.record(endTime - startTime, TimeUnit.MILLISECONDS);\n+            durationGauges.computeIfAbsent(tags, this::newDurationMetric);\n+\n+            if (response != null && response.getReceipt() != null) {\n+                long elapsed = System.currentTimeMillis() - startTime;\n+                Timer handleTimer = handleTimers.computeIfAbsent(tags, this::newHandleMetric);\n+                handleTimer.record(elapsed, TimeUnit.MILLISECONDS);\n+            }\n \n             if (!SUCCESS.equals(status)) {\n                 errors.add(status);\n             }\n         }\n     }\n \n-    private Timer newTimer(Tags tags) {\n-        return Timer.builder(\"hedera.mirror.monitor.publish\")\n-                .description(\"The time it takes to publish a transaction\")\n-                .tag(\"status\", tags.getStatus())\n-                .tag(\"type\", tags.getType().toString())\n+    private TimeGauge newDurationMetric(Tags tags) {\n+        TimeUnit unit = TimeUnit.NANOSECONDS;\n+        return TimeGauge.builder(\"hedera.mirror.monitor.publish.duration\", stopwatch, unit, s -> s.elapsed(unit))\n+                .description(\"The amount of time this scenario has been publishing transactions\")\n+                .tag(Tags.TAG_SCENARIO, tags.getScenarioName())\n+                .tag(Tags.TAG_TYPE, tags.getType().toString())\n+                .register(meterRegistry);\n+    }\n+\n+    private Timer newHandleMetric(Tags tags) {\n+        return Timer.builder(\"hedera.mirror.monitor.publish.handle\")\n+                .description(\"The time it takes from submit to being handled by the main nodes\")\n+                .tag(Tags.TAG_SCENARIO, tags.getScenarioName())\n+                .tag(Tags.TAG_STATUS, tags.getStatus())\n+                .tag(Tags.TAG_TYPE, tags.getType().toString())\n+                .register(meterRegistry);\n+    }\n+\n+    private Timer newSubmitMetric(Tags tags) {\n+        return Timer.builder(\"hedera.mirror.monitor.publish.submit\")", "originalCommit": "d0fdb793d37d99f300e8294181fd99e9287cc89c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3OTIzMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1347#discussion_r541279230", "bodyText": "I think that makes it less readable", "author": "steven-sheehy", "createdAt": "2020-12-11T20:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIzMzMxMQ=="}], "type": "inlineReview", "revised_code": null}]}