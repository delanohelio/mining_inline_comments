{"pr_number": 1277, "pr_title": "gRPC service performance optimization", "pr_createdAt": "2020-11-17T16:42:53Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277", "timeline": [{"oid": "6ae8837c6c7a21d14f69a11c6eaada076751588d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6ae8837c6c7a21d14f69a11c6eaada076751588d", "message": "new timeout mechanism\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-11-11T15:15:57Z", "type": "commit"}, {"oid": "be6ba65755aeb2bd746e068d8f93e18fcc8947f2", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/be6ba65755aeb2bd746e068d8f93e18fcc8947f2", "message": "reduce the number of chained flux operations, optimize filters\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-11-13T15:18:43Z", "type": "commit"}, {"oid": "af319dcb4e68d19aa3e32fa866d84d012ce992a1", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/af319dcb4e68d19aa3e32fa866d84d012ce992a1", "message": "revert TopicMessage back to use AtomicReference, fix integration test case\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-11-13T17:22:01Z", "type": "commit"}, {"oid": "f0dade1547d44a6820f5fc998b3278c7d5f9d803", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f0dade1547d44a6820f5fc998b3278c7d5f9d803", "message": "clean up and fix integration test failures\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-11-17T16:26:10Z", "type": "commit"}, {"oid": "086e036aa6ffd37474ed063fb23032d8f6aa308f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/086e036aa6ffd37474ed063fb23032d8f6aa308f", "message": "increase grpc container cpu and memory limits\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-11-17T16:27:36Z", "type": "commit"}, {"oid": "ae24d1350cee7dac7490ea507b34c92dc649b0eb", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ae24d1350cee7dac7490ea507b34c92dc649b0eb", "message": "Merge branch 'master' into grpc-timeout", "committedDate": "2020-11-17T16:28:16Z", "type": "commit"}, {"oid": "5dc58cf600420ccbc36cf69a5ebd6d5b85218e32", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5dc58cf600420ccbc36cf69a5ebd6d5b85218e32", "message": "sonacloud says code smell\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-11-17T16:51:24Z", "type": "commit"}, {"oid": "b36e2afb86dc469a81a61667b1f32bbc6dae31fe", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b36e2afb86dc469a81a61667b1f32bbc6dae31fe", "message": "fix test failure\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-11-17T17:18:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM1ODE1MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525358150", "bodyText": "nit: You've noted before that the flux operation chaining can be unclear and is also the locations where most optimizations happen.\nMight be useful to add some comments overall on the topicMessageFlux to help manage the overhead costs in the future.", "author": "Nana-EC", "createdAt": "2020-11-17T17:42:29Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java", "diffHunk": "@@ -40,19 +48,71 @@\n \n     @Override\n     public Flux<TopicMessage> listen(TopicMessageFilter filter) {\n-        UnicastProcessor<String> processor = UnicastProcessor.create();\n-        Flux<String> timeoutFlux = processor.delayElements(listenerProperties.getBufferTimeout())\n-                .replay(1)\n-                .autoConnect();\n+        TimeoutContext timeoutContext = new TimeoutContext(Schedulers.parallel(),\n+                listenerProperties.getBufferTimeout());\n+        Mono<TopicMessage> timeoutMono = Mono.create(timeoutContext);\n \n-        return getSharedListener(filter)\n-                .publishOn(Schedulers.boundedElastic())\n+        Flux<TopicMessage> topicMessageFlux = getSharedListener(filter)\n                 .doOnSubscribe(s -> log.info(\"Subscribing: {}\", filter))\n-                .doOnCancel(() -> processor.onNext(\"timeout\"))\n+                .doOnCancel(timeoutContext::onCancel)", "originalCommit": "b36e2afb86dc469a81a61667b1f32bbc6dae31fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NDQ1Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525554456", "bodyText": "sure, I'll add some appropriate comment", "author": "xin-hedera", "createdAt": "2020-11-17T22:02:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM1ODE1MA=="}], "type": "inlineReview", "revised_code": {"commit": "1dbf35252202021577f574f7ce5cf5e8dfc32875", "chunk": "diff --git a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java\nindex 5e4065a71..7d51cef8f 100644\n--- a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java\n+++ b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java\n\n@@ -52,13 +51,11 @@ public abstract class SharedTopicListener implements TopicListener {\n                 listenerProperties.getBufferTimeout());\n         Mono<TopicMessage> timeoutMono = Mono.create(timeoutContext);\n \n+        // moving publishOn from after onBackpressureBuffer to after Flux.merge reduces CPU usage by up to 40%\n         Flux<TopicMessage> topicMessageFlux = getSharedListener(filter)\n                 .doOnSubscribe(s -> log.info(\"Subscribing: {}\", filter))\n-                .doOnCancel(timeoutContext::onCancel)\n-                .onBackpressureBuffer(listenerProperties.getMaxBufferSize())\n-                .doOnCancel(timeoutContext::onComplete)\n-                .doOnError(t -> timeoutContext.onComplete())\n-                .doOnComplete(timeoutContext::onComplete);\n+                .onBackpressureBuffer(listenerProperties.getMaxBufferSize(), t -> timeoutContext.onOverflow())\n+                .doFinally(r -> timeoutContext.onComplete());\n         return Flux.merge(listenerProperties.getPrefetch(), topicMessageFlux, timeoutMono)\n                 .publishOn(Schedulers.boundedElastic(), false, listenerProperties.getPrefetch());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMyNjU0OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525326549", "bodyText": "Fix issue that TopicMessage.toResponse does not properly cache the protobuf response\n\nBoth the old and new approach properly cache the response. Both the old and the new approach can potentially call consensusTopicResponseBuilder.build() multiple times for the same object. Only difference is that now only one thread will win the transition from null to populated. I don't think that really buys us anything as it's still doing the same amount of work.\nWe should consider switching to @Getter(lazy=true) as it uses double checked locking and may be more what you're looking for while at the same time being cleaner than using AtomicReference.", "author": "steven-sheehy", "createdAt": "2020-11-17T17:00:40Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java", "diffHunk": "@@ -110,7 +110,11 @@\n \n     // Cache this to avoid paying the conversion penalty for multiple subscribers to the same topic\n     public ConsensusTopicResponse toResponse() {\n-        if (response.get() == null) {\n+        return response.updateAndGet(response -> {", "originalCommit": "ae24d1350cee7dac7490ea507b34c92dc649b0eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NTY4NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525555684", "bodyText": "yes you are right, thought AtomicReference.updateAndGet performs locking.", "author": "xin-hedera", "createdAt": "2020-11-17T22:05:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMyNjU0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NzUzMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525557531", "bodyText": "It doesn't lock, it just does a compare and set in a loop", "author": "steven-sheehy", "createdAt": "2020-11-17T22:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMyNjU0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b36e2afb86dc469a81a61667b1f32bbc6dae31fe", "chunk": "diff --git a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java\nindex d9e98b735..340100659 100644\n--- a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java\n+++ b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java\n\n@@ -110,9 +110,9 @@ public class TopicMessage implements Comparable<TopicMessage>, Persistable<Long>\n \n     // Cache this to avoid paying the conversion penalty for multiple subscribers to the same topic\n     public ConsensusTopicResponse toResponse() {\n-        return response.updateAndGet(response -> {\n-            if (response != null) {\n-                return response;\n+        return response.updateAndGet(resp -> {\n+            if (resp != null) {\n+                return resp;\n             }\n \n             var consensusTopicResponseBuilder = ConsensusTopicResponse.newBuilder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMyOTI5NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525329294", "bodyText": "unknownError() can probably be subsumed into this method and its instanceof check removed since that was only needed due to the semantics of the generic onErrorMap().", "author": "steven-sheehy", "createdAt": "2020-11-17T17:04:10Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -105,6 +97,28 @@ private TopicMessageFilter toFilter(ConsensusTopicQuery query) {\n         return builder.build();\n     }\n \n+    private Throwable mapError(Throwable t) {\n+        if (t instanceof ConstraintViolationException) {\n+            return error(t, Status.INVALID_ARGUMENT);\n+        } else if (t instanceof IllegalArgumentException) {\n+            return error(t, Status.INVALID_ARGUMENT);\n+        } else if (t instanceof NonTransientDataAccessResourceException) {\n+            return error(t, Status.UNAVAILABLE, DB_ERROR);\n+        } else if (t instanceof TimeoutException) {\n+            return error(t, Status.RESOURCE_EXHAUSTED);\n+        } else if (t instanceof TopicNotFoundException) {\n+            return error(t, Status.NOT_FOUND);\n+        } else if (t instanceof TransientDataAccessException) {\n+            return error(t, Status.RESOURCE_EXHAUSTED);\n+        } else if (Exceptions.isOverflow(t)) {\n+            return error(t, Status.DEADLINE_EXCEEDED, OVERFLOW_ERROR);\n+        } else if (t instanceof ClientTimeoutException) {\n+            return error(t, Status.DEADLINE_EXCEEDED, OVERFLOW_ERROR);\n+        }\n+\n+        return unknownError(t);", "originalCommit": "ae24d1350cee7dac7490ea507b34c92dc649b0eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NTgxNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525555816", "bodyText": "sure, will update it", "author": "xin-hedera", "createdAt": "2020-11-17T22:05:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMyOTI5NA=="}], "type": "inlineReview", "revised_code": {"commit": "1dbf35252202021577f574f7ce5cf5e8dfc32875", "chunk": "diff --git a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java\nindex 931c40fa7..2dcce50dd 100644\n--- a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java\n+++ b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java\n\n@@ -98,9 +98,7 @@ public class ConsensusController extends ReactorConsensusServiceGrpc.ConsensusSe\n     }\n \n     private Throwable mapError(Throwable t) {\n-        if (t instanceof ConstraintViolationException) {\n-            return error(t, Status.INVALID_ARGUMENT);\n-        } else if (t instanceof IllegalArgumentException) {\n+        if (t instanceof ConstraintViolationException || t instanceof IllegalArgumentException) {\n             return error(t, Status.INVALID_ARGUMENT);\n         } else if (t instanceof NonTransientDataAccessResourceException) {\n             return error(t, Status.UNAVAILABLE, DB_ERROR);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzNzM0Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525337343", "bodyText": "Should probably take advantage of the new format and combine these two since they return the same value. Same for deadline exceeded below.", "author": "steven-sheehy", "createdAt": "2020-11-17T17:12:34Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -105,6 +97,28 @@ private TopicMessageFilter toFilter(ConsensusTopicQuery query) {\n         return builder.build();\n     }\n \n+    private Throwable mapError(Throwable t) {\n+        if (t instanceof ConstraintViolationException) {\n+            return error(t, Status.INVALID_ARGUMENT);\n+        } else if (t instanceof IllegalArgumentException) {", "originalCommit": "5dc58cf600420ccbc36cf69a5ebd6d5b85218e32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NTkyMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525555922", "bodyText": "sure", "author": "xin-hedera", "createdAt": "2020-11-17T22:05:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzNzM0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1dbf35252202021577f574f7ce5cf5e8dfc32875", "chunk": "diff --git a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java\nindex 931c40fa7..2dcce50dd 100644\n--- a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java\n+++ b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java\n\n@@ -98,9 +98,7 @@ public class ConsensusController extends ReactorConsensusServiceGrpc.ConsensusSe\n     }\n \n     private Throwable mapError(Throwable t) {\n-        if (t instanceof ConstraintViolationException) {\n-            return error(t, Status.INVALID_ARGUMENT);\n-        } else if (t instanceof IllegalArgumentException) {\n+        if (t instanceof ConstraintViolationException || t instanceof IllegalArgumentException) {\n             return error(t, Status.INVALID_ARGUMENT);\n         } else if (t instanceof NonTransientDataAccessResourceException) {\n             return error(t, Status.UNAVAILABLE, DB_ERROR);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzODM5Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525338392", "bodyText": "Please update the docs with any changes.", "author": "steven-sheehy", "createdAt": "2020-11-17T17:13:58Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/ListenerProperties.java", "diffHunk": "@@ -35,24 +35,28 @@\n @ConfigurationProperties(\"hedera.mirror.grpc.listener\")\n public class ListenerProperties {\n \n-    private boolean enabled = true;\n+    @DurationMin(seconds = 2)\n+    @DurationMax(seconds = 10)\n+    @NotNull\n+    private Duration bufferTimeout = Duration.ofSeconds(4);\n \n-    @Min(32)\n-    private int maxPageSize = 5000;\n+    private boolean enabled = true;\n \n     @Min(8192)\n     @Max(65536)\n     private int maxBufferSize = 16384;\n \n-    @DurationMin(seconds = 2)\n-    @DurationMax(seconds = 10)\n-    @NotNull\n-    private Duration bufferTimeout = Duration.ofSeconds(4);\n+    @Min(32)\n+    private int maxPageSize = 5000;\n \n     @DurationMin(millis = 50)\n     @NotNull\n     private Duration frequency = Duration.ofMillis(500L);\n \n+    @Min(1)\n+    @Max(256)\n+    private int prefetch = 48;", "originalCommit": "5dc58cf600420ccbc36cf69a5ebd6d5b85218e32", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "635cd1c1ceeaab7a230f250b517cc484ca149795", "chunk": "diff --git a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/ListenerProperties.java b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/ListenerProperties.java\nindex 4b1bd5a3a..2570ee3f7 100644\n--- a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/ListenerProperties.java\n+++ b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/ListenerProperties.java\n\n@@ -35,11 +35,6 @@ import org.springframework.validation.annotation.Validated;\n @ConfigurationProperties(\"hedera.mirror.grpc.listener\")\n public class ListenerProperties {\n \n-    @DurationMin(seconds = 2)\n-    @DurationMax(seconds = 10)\n-    @NotNull\n-    private Duration bufferTimeout = Duration.ofSeconds(4);\n-\n     private boolean enabled = true;\n \n     @Min(8192)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM0NDU5MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525344590", "bodyText": "While this provides a more accurate sampling, this might be slow to generate. Have you timed this change?", "author": "steven-sheehy", "createdAt": "2020-11-17T17:22:17Z", "path": "hedera-mirror-monitor/src/test/java/com/hedera/mirror/monitor/generator/CompositeTransactionGeneratorTest.java", "diffHunk": "@@ -69,7 +69,7 @@ void distribution() {\n                 .containsExactly(0.75, 0.25);\n \n         Multiset<TransactionType> types = HashMultiset.create();\n-        for (int i = 0; i < 100; ++i) {\n+        for (int i = 0; i < 10000; ++i) {", "originalCommit": "b36e2afb86dc469a81a61667b1f32bbc6dae31fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NjcwMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525556701", "bodyText": "the time cost is roughly the same, around 1 sec, since I also bumped the tps for the two scenarios to 7500.0 and 2500.0", "author": "xin-hedera", "createdAt": "2020-11-17T22:07:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM0NDU5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUzNjcyNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r526536726", "bodyText": "Got it", "author": "steven-sheehy", "createdAt": "2020-11-19T01:42:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM0NDU5MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM1MDI5NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525350295", "bodyText": "Replace the 3 calls with doFinally().", "author": "steven-sheehy", "createdAt": "2020-11-17T17:30:51Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java", "diffHunk": "@@ -40,19 +48,71 @@\n \n     @Override\n     public Flux<TopicMessage> listen(TopicMessageFilter filter) {\n-        UnicastProcessor<String> processor = UnicastProcessor.create();\n-        Flux<String> timeoutFlux = processor.delayElements(listenerProperties.getBufferTimeout())\n-                .replay(1)\n-                .autoConnect();\n+        TimeoutContext timeoutContext = new TimeoutContext(Schedulers.parallel(),\n+                listenerProperties.getBufferTimeout());\n+        Mono<TopicMessage> timeoutMono = Mono.create(timeoutContext);\n \n-        return getSharedListener(filter)\n-                .publishOn(Schedulers.boundedElastic())\n+        Flux<TopicMessage> topicMessageFlux = getSharedListener(filter)\n                 .doOnSubscribe(s -> log.info(\"Subscribing: {}\", filter))\n-                .doOnCancel(() -> processor.onNext(\"timeout\"))\n+                .doOnCancel(timeoutContext::onCancel)\n                 .onBackpressureBuffer(listenerProperties.getMaxBufferSize())\n-                .timeout(timeoutFlux, message -> timeoutFlux, Mono.error(\n-                        new ClientTimeoutException(\"Client timed out while consuming the buffered messages\")));\n+                .doOnCancel(timeoutContext::onComplete)", "originalCommit": "b36e2afb86dc469a81a61667b1f32bbc6dae31fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1dbf35252202021577f574f7ce5cf5e8dfc32875", "chunk": "diff --git a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java\nindex 5e4065a71..7d51cef8f 100644\n--- a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java\n+++ b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java\n\n@@ -52,13 +51,11 @@ public abstract class SharedTopicListener implements TopicListener {\n                 listenerProperties.getBufferTimeout());\n         Mono<TopicMessage> timeoutMono = Mono.create(timeoutContext);\n \n+        // moving publishOn from after onBackpressureBuffer to after Flux.merge reduces CPU usage by up to 40%\n         Flux<TopicMessage> topicMessageFlux = getSharedListener(filter)\n                 .doOnSubscribe(s -> log.info(\"Subscribing: {}\", filter))\n-                .doOnCancel(timeoutContext::onCancel)\n-                .onBackpressureBuffer(listenerProperties.getMaxBufferSize())\n-                .doOnCancel(timeoutContext::onComplete)\n-                .doOnError(t -> timeoutContext.onComplete())\n-                .doOnComplete(timeoutContext::onComplete);\n+                .onBackpressureBuffer(listenerProperties.getMaxBufferSize(), t -> timeoutContext.onOverflow())\n+                .doFinally(r -> timeoutContext.onComplete());\n         return Flux.merge(listenerProperties.getPrefetch(), topicMessageFlux, timeoutMono)\n                 .publishOn(Schedulers.boundedElastic(), false, listenerProperties.getPrefetch());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxNzI1NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525517255", "bodyText": "This is quite a complicated solution for not much gain in functionality. Why do we even care about letting them consume the buffer after they overflow? There's no recovery logic here so we should just fail fast and let the client retry.", "author": "steven-sheehy", "createdAt": "2020-11-17T20:53:06Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java", "diffHunk": "@@ -40,19 +48,71 @@\n \n     @Override\n     public Flux<TopicMessage> listen(TopicMessageFilter filter) {\n-        UnicastProcessor<String> processor = UnicastProcessor.create();\n-        Flux<String> timeoutFlux = processor.delayElements(listenerProperties.getBufferTimeout())\n-                .replay(1)\n-                .autoConnect();\n+        TimeoutContext timeoutContext = new TimeoutContext(Schedulers.parallel(),\n+                listenerProperties.getBufferTimeout());\n+        Mono<TopicMessage> timeoutMono = Mono.create(timeoutContext);\n \n-        return getSharedListener(filter)\n-                .publishOn(Schedulers.boundedElastic())\n+        Flux<TopicMessage> topicMessageFlux = getSharedListener(filter)\n                 .doOnSubscribe(s -> log.info(\"Subscribing: {}\", filter))\n-                .doOnCancel(() -> processor.onNext(\"timeout\"))\n+                .doOnCancel(timeoutContext::onCancel)\n                 .onBackpressureBuffer(listenerProperties.getMaxBufferSize())\n-                .timeout(timeoutFlux, message -> timeoutFlux, Mono.error(\n-                        new ClientTimeoutException(\"Client timed out while consuming the buffered messages\")));\n+                .doOnCancel(timeoutContext::onComplete)\n+                .doOnError(t -> timeoutContext.onComplete())\n+                .doOnComplete(timeoutContext::onComplete);\n+        return Flux.merge(listenerProperties.getPrefetch(), topicMessageFlux, timeoutMono)", "originalCommit": "b36e2afb86dc469a81a61667b1f32bbc6dae31fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1OTQ1Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525559457", "bodyText": "it's for the case that the topic TPS is high, the client is slow and can't catch up, since the backpressure buffer is big, letting the client consume the remaining data then terminating it with either the OverflowException or the ClientTimeoutException would end in a rate higher than 500 the client can get by retry.", "author": "xin-hedera", "createdAt": "2020-11-17T22:12:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxNzI1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU2Mzc5OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525563799", "bodyText": "Regardless if we have a buffer timeout or not, the client has to retry right? They can't keep up and the TPS is high. All we're doing is delaying it slightly and give them a little bit higher TPS on the first run but then still slow on the retry anyway. I don't think an extra 2s window provides any value.", "author": "steven-sheehy", "createdAt": "2020-11-17T22:21:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxNzI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1dbf35252202021577f574f7ce5cf5e8dfc32875", "chunk": "diff --git a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java\nindex 5e4065a71..7d51cef8f 100644\n--- a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java\n+++ b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java\n\n@@ -52,13 +51,11 @@ public abstract class SharedTopicListener implements TopicListener {\n                 listenerProperties.getBufferTimeout());\n         Mono<TopicMessage> timeoutMono = Mono.create(timeoutContext);\n \n+        // moving publishOn from after onBackpressureBuffer to after Flux.merge reduces CPU usage by up to 40%\n         Flux<TopicMessage> topicMessageFlux = getSharedListener(filter)\n                 .doOnSubscribe(s -> log.info(\"Subscribing: {}\", filter))\n-                .doOnCancel(timeoutContext::onCancel)\n-                .onBackpressureBuffer(listenerProperties.getMaxBufferSize())\n-                .doOnCancel(timeoutContext::onComplete)\n-                .doOnError(t -> timeoutContext.onComplete())\n-                .doOnComplete(timeoutContext::onComplete);\n+                .onBackpressureBuffer(listenerProperties.getMaxBufferSize(), t -> timeoutContext.onOverflow())\n+                .doFinally(r -> timeoutContext.onComplete());\n         return Flux.merge(listenerProperties.getPrefetch(), topicMessageFlux, timeoutMono)\n                 .publishOn(Schedulers.boundedElastic(), false, listenerProperties.getPrefetch());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxOTUxOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525519518", "bodyText": "Assuming we keep the timeout logic, have you considered using onBackpressureBuffer(int maxSize, Consumer<?> onOverflow) and use the consumer to trigger the wait before error?", "author": "steven-sheehy", "createdAt": "2020-11-17T20:57:15Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java", "diffHunk": "@@ -40,19 +48,71 @@\n \n     @Override\n     public Flux<TopicMessage> listen(TopicMessageFilter filter) {\n-        UnicastProcessor<String> processor = UnicastProcessor.create();\n-        Flux<String> timeoutFlux = processor.delayElements(listenerProperties.getBufferTimeout())\n-                .replay(1)\n-                .autoConnect();\n+        TimeoutContext timeoutContext = new TimeoutContext(Schedulers.parallel(),\n+                listenerProperties.getBufferTimeout());\n+        Mono<TopicMessage> timeoutMono = Mono.create(timeoutContext);\n \n-        return getSharedListener(filter)\n-                .publishOn(Schedulers.boundedElastic())\n+        Flux<TopicMessage> topicMessageFlux = getSharedListener(filter)\n                 .doOnSubscribe(s -> log.info(\"Subscribing: {}\", filter))\n-                .doOnCancel(() -> processor.onNext(\"timeout\"))\n+                .doOnCancel(timeoutContext::onCancel)\n                 .onBackpressureBuffer(listenerProperties.getMaxBufferSize())", "originalCommit": "b36e2afb86dc469a81a61667b1f32bbc6dae31fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk5ODA4Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r526998083", "bodyText": "yes this simplifies the logic, thanks", "author": "xin-hedera", "createdAt": "2020-11-19T15:55:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxOTUxOA=="}], "type": "inlineReview", "revised_code": {"commit": "1dbf35252202021577f574f7ce5cf5e8dfc32875", "chunk": "diff --git a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java\nindex 5e4065a71..7d51cef8f 100644\n--- a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java\n+++ b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java\n\n@@ -52,13 +51,11 @@ public abstract class SharedTopicListener implements TopicListener {\n                 listenerProperties.getBufferTimeout());\n         Mono<TopicMessage> timeoutMono = Mono.create(timeoutContext);\n \n+        // moving publishOn from after onBackpressureBuffer to after Flux.merge reduces CPU usage by up to 40%\n         Flux<TopicMessage> topicMessageFlux = getSharedListener(filter)\n                 .doOnSubscribe(s -> log.info(\"Subscribing: {}\", filter))\n-                .doOnCancel(timeoutContext::onCancel)\n-                .onBackpressureBuffer(listenerProperties.getMaxBufferSize())\n-                .doOnCancel(timeoutContext::onComplete)\n-                .doOnError(t -> timeoutContext.onComplete())\n-                .doOnComplete(timeoutContext::onComplete);\n+                .onBackpressureBuffer(listenerProperties.getMaxBufferSize(), t -> timeoutContext.onOverflow())\n+                .doFinally(r -> timeoutContext.onComplete());\n         return Flux.merge(listenerProperties.getPrefetch(), topicMessageFlux, timeoutMono)\n                 .publishOn(Schedulers.boundedElastic(), false, listenerProperties.getPrefetch());\n     }\n"}}, {"oid": "1dbf35252202021577f574f7ce5cf5e8dfc32875", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1dbf35252202021577f574f7ce5cf5e8dfc32875", "message": "address review feedback\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-11-18T23:07:41Z", "type": "commit"}, {"oid": "ac8c71b47cb5a04315d85c743e0b5fd11e976fda", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ac8c71b47cb5a04315d85c743e0b5fd11e976fda", "message": "clean up\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-11-19T15:59:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk5OTk5Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r526999997", "bodyText": "Technically I don't think we can get this here as everything before this is non-gRPC. It was only there before to catch re-throws from specific exception onErrorMap().", "author": "steven-sheehy", "createdAt": "2020-11-19T15:57:25Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -105,6 +97,28 @@ private TopicMessageFilter toFilter(ConsensusTopicQuery query) {\n         return builder.build();\n     }\n \n+    private Throwable mapError(Throwable t) {\n+        if (t instanceof ConstraintViolationException || t instanceof IllegalArgumentException) {\n+            return error(t, Status.INVALID_ARGUMENT);\n+        } else if (t instanceof NonTransientDataAccessResourceException) {\n+            return error(t, Status.UNAVAILABLE, DB_ERROR);\n+        } else if (t instanceof TimeoutException) {\n+            return error(t, Status.RESOURCE_EXHAUSTED);\n+        } else if (t instanceof TopicNotFoundException) {\n+            return error(t, Status.NOT_FOUND);\n+        } else if (t instanceof TransientDataAccessException) {\n+            return error(t, Status.RESOURCE_EXHAUSTED);\n+        } else if (Exceptions.isOverflow(t) || t instanceof ClientTimeoutException) {\n+            return error(t, Status.DEADLINE_EXCEEDED, OVERFLOW_ERROR);\n+        } else if (t instanceof StatusRuntimeException) {", "originalCommit": "1dbf35252202021577f574f7ce5cf5e8dfc32875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0MzI5Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r527043296", "bodyText": "yes, will remove it", "author": "xin-hedera", "createdAt": "2020-11-19T16:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk5OTk5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA1NjQ3MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r527056470", "bodyText": "have to revert it, since toFilter which is called at the previous step may throw StatusRuntimeException. removing the above code causes test failure", "author": "xin-hedera", "createdAt": "2020-11-19T17:11:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk5OTk5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3ba939cc0978ef37992ef2811ac68265cccc5d13", "chunk": "diff --git a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java\nindex 2dcce50dd..ff467297b 100644\n--- a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java\n+++ b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java\n\n@@ -108,7 +107,7 @@ public class ConsensusController extends ReactorConsensusServiceGrpc.ConsensusSe\n             return error(t, Status.NOT_FOUND);\n         } else if (t instanceof TransientDataAccessException) {\n             return error(t, Status.RESOURCE_EXHAUSTED);\n-        } else if (Exceptions.isOverflow(t) || t instanceof ClientTimeoutException) {\n+        } else if (Exceptions.isOverflow(t)) {\n             return error(t, Status.DEADLINE_EXCEEDED, OVERFLOW_ERROR);\n         } else if (t instanceof StatusRuntimeException) {\n             return t;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwMjE1OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r527002159", "bodyText": "Why do we need this on a @Value object which has no setters by default?", "author": "steven-sheehy", "createdAt": "2020-11-19T16:00:08Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java", "diffHunk": "@@ -103,52 +104,48 @@\n     @Transient\n     private Instant validStartInstant = LongToInstantConverter.INSTANCE.convert(validStartTimestamp);\n \n+    // Cache this to avoid paying the conversion penalty for multiple subscribers to the same topic\n     @EqualsAndHashCode.Exclude\n+    @Getter(lazy = true)\n+    @Setter(value = AccessLevel.NONE)", "originalCommit": "1dbf35252202021577f574f7ce5cf5e8dfc32875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0NDY1MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r527044650", "bodyText": "the response is created lazily by a private method, disable the setter can prevent accidental value change.", "author": "xin-hedera", "createdAt": "2020-11-19T16:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwMjE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA1NDA4MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r527054080", "bodyText": "I tested this locally just to confirm. There is no setter with or without the annotation because this is a @Value class. You can confirm what's methods are generated in the IDE structure view.", "author": "steven-sheehy", "createdAt": "2020-11-19T17:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwMjE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA1NjcyMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r527056723", "bodyText": "thanks, will remove it then", "author": "xin-hedera", "createdAt": "2020-11-19T17:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwMjE1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "94acfec3e8375674e621064235455e0aa311ead6", "chunk": "diff --git a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java\nindex e1e323cdb..1a02ccede 100644\n--- a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java\n+++ b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java\n\n@@ -107,7 +105,6 @@ public class TopicMessage implements Comparable<TopicMessage>, Persistable<Long>\n     // Cache this to avoid paying the conversion penalty for multiple subscribers to the same topic\n     @EqualsAndHashCode.Exclude\n     @Getter(lazy = true)\n-    @Setter(value = AccessLevel.NONE)\n     @ToString.Exclude\n     @Transient\n     private final ConsensusTopicResponse response = toResponse();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyOTQzOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r527029439", "bodyText": "As discussed offline, I think we can remove the buffer timeout and just fail fast. This will simplify the logic.", "author": "steven-sheehy", "createdAt": "2020-11-19T16:36:18Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java", "diffHunk": "@@ -40,19 +47,61 @@\n \n     @Override\n     public Flux<TopicMessage> listen(TopicMessageFilter filter) {\n-        UnicastProcessor<String> processor = UnicastProcessor.create();\n-        Flux<String> timeoutFlux = processor.delayElements(listenerProperties.getBufferTimeout())\n-                .replay(1)\n-                .autoConnect();\n+        TimeoutContext timeoutContext = new TimeoutContext(Schedulers.parallel(),\n+                listenerProperties.getBufferTimeout());\n+        Mono<TopicMessage> timeoutMono = Mono.create(timeoutContext);\n \n-        return getSharedListener(filter)\n-                .publishOn(Schedulers.boundedElastic())\n+        // moving publishOn from after onBackpressureBuffer to after Flux.merge reduces CPU usage by up to 40%\n+        Flux<TopicMessage> topicMessageFlux = getSharedListener(filter)\n                 .doOnSubscribe(s -> log.info(\"Subscribing: {}\", filter))\n-                .doOnCancel(() -> processor.onNext(\"timeout\"))\n-                .onBackpressureBuffer(listenerProperties.getMaxBufferSize())\n-                .timeout(timeoutFlux, message -> timeoutFlux, Mono.error(\n-                        new ClientTimeoutException(\"Client timed out while consuming the buffered messages\")));\n+                .onBackpressureBuffer(listenerProperties.getMaxBufferSize(), t -> timeoutContext.onOverflow())\n+                .doFinally(r -> timeoutContext.onComplete());\n+        return Flux.merge(listenerProperties.getPrefetch(), topicMessageFlux, timeoutMono)\n+                .publishOn(Schedulers.boundedElastic(), false, listenerProperties.getPrefetch());\n     }\n \n     protected abstract Flux<TopicMessage> getSharedListener(TopicMessageFilter filter);\n+\n+    @RequiredArgsConstructor\n+    private class TimeoutContext implements Consumer<MonoSink<TopicMessage>> {\n+\n+        private final Scheduler scheduler;\n+        private final Duration timeout;\n+\n+        private MonoSink<TopicMessage> sink;\n+        private final AtomicBoolean completed = new AtomicBoolean(false);\n+        private volatile Disposable taskDisposer;\n+\n+        @Override\n+        public void accept(MonoSink<TopicMessage> sink) {\n+            this.sink = sink;\n+        }\n+\n+        public void onComplete() {\n+            if (!completed.compareAndSet(false, true)) {\n+                return;\n+            }\n+\n+            if (taskDisposer != null) {\n+                taskDisposer.dispose();\n+                taskDisposer = null;\n+            }\n+\n+            sink.success();\n+        }\n+\n+        public void onOverflow() {\n+            if (completed.get()) {\n+                return;\n+            }\n+\n+            try {\n+                taskDisposer = scheduler.schedule(() -> sink.error(new ClientTimeoutException(", "originalCommit": "ac8c71b47cb5a04315d85c743e0b5fd11e976fda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0NDc4Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r527044783", "bodyText": "removed, now will fail fast", "author": "xin-hedera", "createdAt": "2020-11-19T16:56:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyOTQzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3ba939cc0978ef37992ef2811ac68265cccc5d13", "chunk": "diff --git a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java\nindex 3eef26ac6..a42cdf99b 100644\n--- a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java\n+++ b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java\n\n@@ -47,61 +40,20 @@ public abstract class SharedTopicListener implements TopicListener {\n \n     @Override\n     public Flux<TopicMessage> listen(TopicMessageFilter filter) {\n-        TimeoutContext timeoutContext = new TimeoutContext(Schedulers.parallel(),\n-                listenerProperties.getBufferTimeout());\n-        Mono<TopicMessage> timeoutMono = Mono.create(timeoutContext);\n+        DirectProcessor<TopicMessage> overflowProcessor = DirectProcessor.create();\n+        FluxSink<TopicMessage> overflowSink = overflowProcessor.sink();\n \n         // moving publishOn from after onBackpressureBuffer to after Flux.merge reduces CPU usage by up to 40%\n         Flux<TopicMessage> topicMessageFlux = getSharedListener(filter)\n                 .doOnSubscribe(s -> log.info(\"Subscribing: {}\", filter))\n-                .onBackpressureBuffer(listenerProperties.getMaxBufferSize(), t -> timeoutContext.onOverflow())\n-                .doFinally(r -> timeoutContext.onComplete());\n-        return Flux.merge(listenerProperties.getPrefetch(), topicMessageFlux, timeoutMono)\n+                .onBackpressureBuffer(\n+                        listenerProperties.getMaxBufferSize(),\n+                        t -> overflowSink.error(Exceptions.failWithOverflow())\n+                )\n+                .doFinally((s) -> overflowSink.complete());\n+        return Flux.merge(listenerProperties.getPrefetch(), topicMessageFlux, overflowProcessor)\n                 .publishOn(Schedulers.boundedElastic(), false, listenerProperties.getPrefetch());\n     }\n \n     protected abstract Flux<TopicMessage> getSharedListener(TopicMessageFilter filter);\n-\n-    @RequiredArgsConstructor\n-    private class TimeoutContext implements Consumer<MonoSink<TopicMessage>> {\n-\n-        private final Scheduler scheduler;\n-        private final Duration timeout;\n-\n-        private MonoSink<TopicMessage> sink;\n-        private final AtomicBoolean completed = new AtomicBoolean(false);\n-        private volatile Disposable taskDisposer;\n-\n-        @Override\n-        public void accept(MonoSink<TopicMessage> sink) {\n-            this.sink = sink;\n-        }\n-\n-        public void onComplete() {\n-            if (!completed.compareAndSet(false, true)) {\n-                return;\n-            }\n-\n-            if (taskDisposer != null) {\n-                taskDisposer.dispose();\n-                taskDisposer = null;\n-            }\n-\n-            sink.success();\n-        }\n-\n-        public void onOverflow() {\n-            if (completed.get()) {\n-                return;\n-            }\n-\n-            try {\n-                taskDisposer = scheduler.schedule(() -> sink.error(new ClientTimeoutException(\n-                                \"Client timed out while consuming the buffered messages\")),\n-                        timeout.toMillis(), TimeUnit.MILLISECONDS);\n-            } catch (RejectedExecutionException ex) {\n-                log.error(\"Failed to schedule task to terminate with ClientTimeoutException\", ex);\n-            }\n-        }\n-    }\n }\n"}}, {"oid": "3ba939cc0978ef37992ef2811ac68265cccc5d13", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3ba939cc0978ef37992ef2811ac68265cccc5d13", "message": "fail fast with overflow instead of timeout\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-11-19T16:50:03Z", "type": "commit"}, {"oid": "83ea77fcca36d88f35c24a00d08ff35e1600641f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/83ea77fcca36d88f35c24a00d08ff35e1600641f", "message": "address review comment and bad code smell\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-11-19T17:00:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0ODU1OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r527048559", "bodyText": "change return type to StatusRuntimeException", "author": "xin-hedera", "createdAt": "2020-11-19T17:01:27Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -105,22 +96,32 @@ private TopicMessageFilter toFilter(ConsensusTopicQuery query) {\n         return builder.build();\n     }\n \n-    private Throwable error(Throwable t, Status status) {\n-        return error(t, status, t.getMessage());\n-    }\n-\n-    private Throwable error(Throwable t, Status status, String message) {\n-        log.warn(\"Received {} subscribing to topic: {}\", t.getClass().getSimpleName(), t.getMessage());\n-        return status.augmentDescription(message).asRuntimeException();\n-    }\n-\n-    private Throwable unknownError(Throwable t) {\n-        if (t instanceof StatusRuntimeException) {\n-            return t;\n+    private StatusRuntimeException mapError(Throwable t) {", "originalCommit": "83ea77fcca36d88f35c24a00d08ff35e1600641f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94acfec3e8375674e621064235455e0aa311ead6", "chunk": "diff --git a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java\nindex caabffcc9..1aac4bc07 100644\n--- a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java\n+++ b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java\n\n@@ -109,6 +109,8 @@ public class ConsensusController extends ReactorConsensusServiceGrpc.ConsensusSe\n             return error(t, Status.RESOURCE_EXHAUSTED);\n         } else if (Exceptions.isOverflow(t)) {\n             return error(t, Status.DEADLINE_EXCEEDED, OVERFLOW_ERROR);\n+        } else if (t instanceof StatusRuntimeException) {\n+            return (StatusRuntimeException) t;\n         }\n \n         final String message = \"Unknown error subscribing to topic\";\n"}}, {"oid": "635cd1c1ceeaab7a230f250b517cc484ca149795", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/635cd1c1ceeaab7a230f250b517cc484ca149795", "message": "remove bufferTimeout from doc and java class\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-11-19T17:07:46Z", "type": "commit"}, {"oid": "94acfec3e8375674e621064235455e0aa311ead6", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/94acfec3e8375674e621064235455e0aa311ead6", "message": "fix test failure, address review feedback\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-11-19T17:14:20Z", "type": "commit"}, {"oid": "0150863d5f7ab137b8bc457bdaa1793ea01bcf97", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/0150863d5f7ab137b8bc457bdaa1793ea01bcf97", "message": "bad smell\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-11-19T17:21:17Z", "type": "commit"}]}