{"pr_number": 901, "pr_title": "Recover from account balance files with different timestamps", "pr_createdAt": "2020-07-22T22:58:46Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/901", "timeline": [{"oid": "290920836cc7bac507e72eb143536713d13947bd", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/290920836cc7bac507e72eb143536713d13947bd", "message": "Recover from account balance files with different timestamps\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-07-22T22:58:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2NjYwMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459466601", "bodyText": "nit: the log warning doesn't say why you are ignoring. You should add a reason for easy troubleshooting", "author": "Nana-EC", "createdAt": "2020-07-23T13:54:16Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -211,18 +215,36 @@ protected void downloadNextBatch() {\n                      * of downloaded signature files.\n                      */\n                     AtomicLong count = new AtomicLong();\n-                    pendingDownloads.forEach((pd) -> {\n+                    pendingDownloads.forEach(pendingDownload -> {\n                         try {\n-                            if (pd.waitForCompletion()) {\n+                            if (pendingDownload.waitForCompletion()) {\n                                 count.incrementAndGet();\n-                                File sigFile = pd.getFile();\n+                                File sigFile = pendingDownload.getFile();\n                                 FileStreamSignature fileStreamSignature = new FileStreamSignature();\n                                 fileStreamSignature.setFile(sigFile);\n                                 fileStreamSignature.setNode(nodeAccountId);\n-                                sigFilesMap.put(sigFile.getName(), fileStreamSignature);\n+                                long currentTimestamp = Utility.getTimestampFromFilename(sigFile.getName());\n+\n+                                // Initial file has no previous so we can't calculate offset from that\n+                                if (lastValidTimestamp <= 0) {\n+                                    sigFilesMap.put(currentTimestamp, fileStreamSignature);\n+                                } else {\n+                                    double interval = (double) (currentTimestamp - lastValidTimestamp);\n+                                    long bucket = Math.round(interval / closeInterval);\n+                                    long groupTimestamp = lastValidTimestamp + bucket * closeInterval +\n+                                            closeInterval / 2;\n+\n+                                    if (bucket > 0) {\n+                                        sigFilesMap.put(groupTimestamp, fileStreamSignature);\n+                                    } else {\n+                                        log.warn(\"Ignoring signature file {} from node {} associated with the \" +", "originalCommit": "290920836cc7bac507e72eb143536713d13947bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUwMTc2MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459501760", "bodyText": "It does, doesn't it? It says it's associated with the previous close interval. You want me to tweak it to say \"the previously processed stream file\"?", "author": "steven-sheehy", "createdAt": "2020-07-23T14:41:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2NjYwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU5MzcxNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459593716", "bodyText": "On 2nd read it does. Didn't jump out at me so yeah I'd say \"previously processed stream file\" is more clear.", "author": "Nana-EC", "createdAt": "2020-07-23T16:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2NjYwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwMDMzOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459600339", "bodyText": "Done", "author": "steven-sheehy", "createdAt": "2020-07-23T17:08:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2NjYwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f65cd2a990da035ed58ecb0f11bad4ddc439d215", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java\nindex c5360716..7f815a87 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java\n\n@@ -223,23 +223,14 @@ public abstract class Downloader {\n                                 FileStreamSignature fileStreamSignature = new FileStreamSignature();\n                                 fileStreamSignature.setFile(sigFile);\n                                 fileStreamSignature.setNode(nodeAccountId);\n-                                long currentTimestamp = Utility.getTimestampFromFilename(sigFile.getName());\n+                                long groupTimestamp = getGroupTimestamp(lastValidTimestamp, closeInterval,\n+                                        fileStreamSignature);\n \n-                                // Initial file has no previous so we can't calculate offset from that\n-                                if (lastValidTimestamp <= 0) {\n-                                    sigFilesMap.put(currentTimestamp, fileStreamSignature);\n+                                if (groupTimestamp > 0) {\n+                                    sigFilesMap.put(groupTimestamp, fileStreamSignature);\n                                 } else {\n-                                    double interval = (double) (currentTimestamp - lastValidTimestamp);\n-                                    long bucket = Math.round(interval / closeInterval);\n-                                    long groupTimestamp = lastValidTimestamp + bucket * closeInterval +\n-                                            closeInterval / 2;\n-\n-                                    if (bucket > 0) {\n-                                        sigFilesMap.put(groupTimestamp, fileStreamSignature);\n-                                    } else {\n-                                        log.warn(\"Ignoring signature file {} from node {} associated with the \" +\n-                                                \"previous close interval\", sigFile.getName(), nodeAccountId);\n-                                    }\n+                                    log.warn(\"Ignoring signature associated with the previously processed stream \" +\n+                                            \"file: {}\", fileStreamSignature);\n                                 }\n                             }\n                         } catch (InterruptedException ex) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3MDY2NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459470665", "bodyText": "I think you should pull this section into its own method with some comments on the method for clarity.", "author": "Nana-EC", "createdAt": "2020-07-23T13:59:05Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -211,18 +215,36 @@ protected void downloadNextBatch() {\n                      * of downloaded signature files.\n                      */\n                     AtomicLong count = new AtomicLong();\n-                    pendingDownloads.forEach((pd) -> {\n+                    pendingDownloads.forEach(pendingDownload -> {\n                         try {\n-                            if (pd.waitForCompletion()) {\n+                            if (pendingDownload.waitForCompletion()) {\n                                 count.incrementAndGet();\n-                                File sigFile = pd.getFile();\n+                                File sigFile = pendingDownload.getFile();\n                                 FileStreamSignature fileStreamSignature = new FileStreamSignature();\n                                 fileStreamSignature.setFile(sigFile);\n                                 fileStreamSignature.setNode(nodeAccountId);\n-                                sigFilesMap.put(sigFile.getName(), fileStreamSignature);\n+                                long currentTimestamp = Utility.getTimestampFromFilename(sigFile.getName());\n+\n+                                // Initial file has no previous so we can't calculate offset from that\n+                                if (lastValidTimestamp <= 0) {", "originalCommit": "290920836cc7bac507e72eb143536713d13947bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyNzQzNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459627436", "bodyText": "Done", "author": "steven-sheehy", "createdAt": "2020-07-23T17:55:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3MDY2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f65cd2a990da035ed58ecb0f11bad4ddc439d215", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java\nindex c5360716..7f815a87 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java\n\n@@ -223,23 +223,14 @@ public abstract class Downloader {\n                                 FileStreamSignature fileStreamSignature = new FileStreamSignature();\n                                 fileStreamSignature.setFile(sigFile);\n                                 fileStreamSignature.setNode(nodeAccountId);\n-                                long currentTimestamp = Utility.getTimestampFromFilename(sigFile.getName());\n+                                long groupTimestamp = getGroupTimestamp(lastValidTimestamp, closeInterval,\n+                                        fileStreamSignature);\n \n-                                // Initial file has no previous so we can't calculate offset from that\n-                                if (lastValidTimestamp <= 0) {\n-                                    sigFilesMap.put(currentTimestamp, fileStreamSignature);\n+                                if (groupTimestamp > 0) {\n+                                    sigFilesMap.put(groupTimestamp, fileStreamSignature);\n                                 } else {\n-                                    double interval = (double) (currentTimestamp - lastValidTimestamp);\n-                                    long bucket = Math.round(interval / closeInterval);\n-                                    long groupTimestamp = lastValidTimestamp + bucket * closeInterval +\n-                                            closeInterval / 2;\n-\n-                                    if (bucket > 0) {\n-                                        sigFilesMap.put(groupTimestamp, fileStreamSignature);\n-                                    } else {\n-                                        log.warn(\"Ignoring signature file {} from node {} associated with the \" +\n-                                                \"previous close interval\", sigFile.getName(), nodeAccountId);\n-                                    }\n+                                    log.warn(\"Ignoring signature associated with the previously processed stream \" +\n+                                            \"file: {}\", fileStreamSignature);\n                                 }\n                             }\n                         } catch (InterruptedException ex) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NTc5MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459475790", "bodyText": "method name seems to be general and therefore not concerned  with file type (balance/record/event), but removeEnd() applied to only Balances.\nYou should either rename the function to highlight Balance or make it work for all 3 types for shared use.", "author": "Nana-EC", "createdAt": "2020-07-23T14:06:10Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/util/Utility.java", "diffHunk": "@@ -401,6 +403,17 @@ public static File getResource(String path) {\n         }\n     }\n \n+    public static final long getTimestampFromFilename(String filename) {\n+        if (StringUtils.isBlank(filename)) {\n+            return 0L;\n+        }\n+\n+        String nameWithoutExtension = FilenameUtils.removeExtension(filename);\n+        String date = StringUtils.removeEnd(nameWithoutExtension, StreamType.BALANCE.getSuffix()).replace('_', ':');", "originalCommit": "290920836cc7bac507e72eb143536713d13947bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUwNTc4MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459505780", "bodyText": "The method is named general and does work for all 3 types, as its test shows. True, it's a bit of a hack to do something specific to balance but it saves me from either having 3 different methods or passing in streamtype. Balance file is the only file with an extra suffix of _Balance after the date and before the extension. What do you suggest?", "author": "steven-sheehy", "createdAt": "2020-07-23T14:46:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NTc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwMTU2Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459601562", "bodyText": "Yeah the 2 options you noted would have been my 1st suggestions.\nAlthough you only need to add the 1 extra method below right. Then modify this method to take in a String suffix.\npublic static final long getTimestampFromBalanceFile(String filename) { return getTimestampFromFilename(filename, StreamType.BALANCE.getSuffix()); }", "author": "Nana-EC", "createdAt": "2020-07-23T17:10:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NTc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwNzE0NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459607144", "bodyText": "Having a concrete method named getTimestampFromBalanceFile means I can no longer use it from the generic Downloader", "author": "steven-sheehy", "createdAt": "2020-07-23T17:20:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NTc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyMDQxMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459620411", "bodyText": "Used another approach", "author": "steven-sheehy", "createdAt": "2020-07-23T17:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NTc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "f65cd2a990da035ed58ecb0f11bad4ddc439d215", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/util/Utility.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/util/Utility.java\nindex 16493c28..35e713db 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/util/Utility.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/util/Utility.java\n\n@@ -408,8 +408,14 @@ public class Utility {\n             return 0L;\n         }\n \n-        String nameWithoutExtension = FilenameUtils.removeExtension(filename);\n-        String date = StringUtils.removeEnd(nameWithoutExtension, StreamType.BALANCE.getSuffix()).replace('_', ':');\n+        StreamType streamType = StreamType.fromFilename(filename);\n+        String date = FilenameUtils.removeExtension(filename);\n+\n+        if (streamType != null) {\n+            date = StringUtils.removeEnd(date, streamType.getSuffix());\n+        }\n+\n+        date = date.replace('_', ':');\n         Instant instant = Instant.parse(date);\n         return Utility.convertToNanosMax(instant.getEpochSecond(), instant.getNano());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3ODM0OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459478348", "bodyText": "nit: quite the involved setup on files. A few comments might make it easier to read and therefore easier to maintain", "author": "Nana-EC", "createdAt": "2020-07-23T14:09:37Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java", "diffHunk": "@@ -299,15 +302,64 @@ void overwriteOnDownload() throws Exception {\n \n         reset(applicationStatusRepository);\n         // Corrupt the downloaded signatures to test that they get overwritten by good ones on re-download.\n-        Files.walk(downloaderProperties.getSignaturesPath()).filter(this::isSigFile)\n+        Files.walk(downloaderProperties.getSignaturesPath())\n+                .filter(this::isSigFile)\n                 .forEach(AbstractDownloaderTest::corruptFile);\n-        // fileName1 will be used to calculate marker for list request. mockS3 also returns back the marker in the\n-        // results. This is unlike AWS S3 which does not return back the marker.\n-        doReturn(file1).when(applicationStatusRepository).findByStatusCode(downloader.getLastValidDownloadedFileKey());\n+        doReturn(\"\").when(applicationStatusRepository).findByStatusCode(downloader.getLastValidDownloadedFileKey());\n         downloader.download();\n         verifyForSuccess();\n     }\n \n+    @Test\n+    @DisplayName(\"Different filenames, same interval\")\n+    void differentFilenamesSameInterval() throws Exception {\n+        differentFilenames(Duration.ofNanos(1L));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Different filenames, same interval, lower bound\")\n+    void differentFilenamesSameIntervalLower() throws Exception {\n+        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).negated());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Different filenames, same interval, upper bound\")\n+    void differentFilenamesSameIntervalUpper() throws Exception {\n+        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).minusNanos(1));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Different filenames, previous interval\")\n+    void differentFilenamesPreviousInterval() throws Exception {\n+        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).negated().minusNanos(2));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Different filenames, next interval\")\n+    void differentFilenamesNextInterval() throws Exception {\n+        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L));\n+    }\n+\n+    private void differentFilenames(Duration offset) throws Exception {\n+        fileCopier.filterFiles(file2 + \"*\").copy();", "originalCommit": "290920836cc7bac507e72eb143536713d13947bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxOTg4Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459619886", "bodyText": "done", "author": "steven-sheehy", "createdAt": "2020-07-23T17:42:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3ODM0OA=="}], "type": "inlineReview", "revised_code": {"commit": "f65cd2a990da035ed58ecb0f11bad4ddc439d215", "chunk": "diff --git a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java\nindex 177d4465..f751ee48 100644\n--- a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java\n+++ b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java\n\n@@ -341,21 +341,27 @@ public abstract class AbstractDownloaderTest {\n     }\n \n     private void differentFilenames(Duration offset) throws Exception {\n-        fileCopier.filterFiles(file2 + \"*\").copy();\n+        // Copy all files and modify only node 0.0.3's files to have a different timestamp\n         StreamType type = downloaderProperties.getStreamType();\n+        fileCopier.filterFiles(file2 + \"*\").copy();\n         Path basePath = fileCopier.getTo().resolve(type.getNodePrefix() + \"0.0.3\");\n+\n+        // Construct a new filename with the offset added to the last valid file\n         long nanoOffset = downloaderProperties.getCloseInterval().plus(offset).toNanos();\n         long timestamp = Utility.getTimestampFromFilename(file1) + nanoOffset;\n-        String baseFilename = Instant.ofEpochSecond(0, timestamp).toString().replace(':', '_') + type.getSuffix();\n+        String baseFilename = Instant.ofEpochSecond(0, timestamp).toString().replace(':', '_') + type.getSuffix() + \".\";\n+\n+        // Rename the good files to have a bad timestamp\n         String signature = baseFilename + type.getSignatureExtension();\n         String signed = baseFilename + type.getExtension();\n-        Files.move(basePath.resolve(file2), basePath.resolve(signed));\n         Files.move(basePath.resolve(file2 + \"_sig\"), basePath.resolve(signature));\n-        doReturn(file1).when(applicationStatusRepository)\n-                .findByStatusCode(downloader.getLastValidDownloadedFileKey());\n+        Files.move(basePath.resolve(file2), basePath.resolve(signed));\n+\n+        doReturn(file1).when(applicationStatusRepository).findByStatusCode(downloader.getLastValidDownloadedFileKey());\n \n         downloader.download();\n \n+        // The file with the different timestamp than all other nodes should not be processed\n         verify(applicationStatusRepository).updateStatusValue(downloader.getLastValidDownloadedFileKey(), file2);\n         assertValidFiles(List.of(file2));\n     }\n"}}, {"oid": "f65cd2a990da035ed58ecb0f11bad4ddc439d215", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f65cd2a990da035ed58ecb0f11bad4ddc439d215", "message": "Address review feedback\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-07-23T17:55:16Z", "type": "commit"}]}