{"pr_number": 729, "pr_title": "Add PubSub integration tests", "pr_createdAt": "2020-05-01T10:14:07Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/729", "timeline": [{"oid": "63a85e5d66b8461db99c2279a0973479d1705971", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/63a85e5d66b8461db99c2279a0973479d1705971", "message": "Add PubSub integration tests\n\n- PubSubEmulatorApplicationContextInitializer sets up pubsub emulator container\n- Adds vanilla test - PubSubRecordParserTest\n- Use postgres:9.6-alpine in circleci to match developer local env (docker-compose)\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-05-01T10:23:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NzI4OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418677288", "bodyText": "Why cannot all integration tests extend from IntegrationTest (RecordParserDisabledTest, PubSubIntegrationTest)? Spring Boot should be smart enough to know that it needs to load a new or partial application context depending upon the annotations present. That way the common annotations can all stay in IntegrationTest like cache, database, kubernetes.", "author": "steven-sheehy", "createdAt": "2020-05-01T18:36:20Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubIntegrationTest.java", "diffHunk": "@@ -20,15 +20,59 @@\n  * \u200d\n  */\n \n+import com.google.api.gax.rpc.NotFoundException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Resource;\n+import org.junit.jupiter.api.BeforeEach;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.cloud.gcp.pubsub.PubSubAdmin;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.TestExecutionListeners;\n \n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubProperties;\n+\n @ContextConfiguration(\n-        initializers = {DatabaseApplicationContextInitializer.class, TestPubSubConfiguration.ContextInitializer.class},\n-        classes = TestPubSubConfiguration.class)\n+        initializers = {DatabaseApplicationContextInitializer.class, PubSubEmulatorApplicationContextInitializer.class})\n @TestExecutionListeners(value = {ResetCacheTestExecutionListener.class},\n         mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)\n-@SpringBootTest(properties = \"spring.cloud.kubernetes.enabled=false\")\n+@SpringBootTest(properties = {\n+        \"spring.cloud.kubernetes.enabled=false\",\n+        \"spring.cloud.gcp.pubsub.enabled=true\",\n+        \"hedera.mirror.importer.parser.record.entity.enabled=false\"})\n public class PubSubIntegrationTest {", "originalCommit": "63a85e5d66b8461db99c2279a0973479d1705971", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkwMTY2MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418901660", "bodyText": "Ah, didn't know @SpringBootTest could work like that. Done now.", "author": "apeksharma", "createdAt": "2020-05-02T05:09:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NzI4OA=="}], "type": "inlineReview", "revised_code": {"commit": "d18990ddbb060cd51217798982040041d31b2e29", "chunk": "diff --git a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubIntegrationTest.java b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubIntegrationTest.java\nindex 9bb092a1..c6adddf5 100644\n--- a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubIntegrationTest.java\n+++ b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubIntegrationTest.java\n\n@@ -28,20 +28,14 @@ import org.junit.jupiter.api.BeforeEach;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.cloud.gcp.pubsub.PubSubAdmin;\n import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.TestExecutionListeners;\n \n import com.hedera.mirror.importer.parser.record.pubsub.PubSubProperties;\n \n-@ContextConfiguration(\n-        initializers = {DatabaseApplicationContextInitializer.class, PubSubEmulatorApplicationContextInitializer.class})\n-@TestExecutionListeners(value = {ResetCacheTestExecutionListener.class},\n-        mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)\n @SpringBootTest(properties = {\n-        \"spring.cloud.kubernetes.enabled=false\",\n+        \"embedded.google.pubsub.enabled=true\",\n         \"spring.cloud.gcp.pubsub.enabled=true\",\n         \"hedera.mirror.importer.parser.record.entity.enabled=false\"})\n-public class PubSubIntegrationTest {\n+public class PubSubIntegrationTest extends IntegrationTest {\n     private static final String SUBSCRIPTION = \"testSubscription\";\n \n     @Resource\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NzYyNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418677624", "bodyText": "Should be abstract. IntegrationTest should also be abstract", "author": "steven-sheehy", "createdAt": "2020-05-01T18:37:03Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubIntegrationTest.java", "diffHunk": "@@ -20,15 +20,59 @@\n  * \u200d\n  */\n \n+import com.google.api.gax.rpc.NotFoundException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Resource;\n+import org.junit.jupiter.api.BeforeEach;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.cloud.gcp.pubsub.PubSubAdmin;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.TestExecutionListeners;\n \n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubProperties;\n+\n @ContextConfiguration(\n-        initializers = {DatabaseApplicationContextInitializer.class, TestPubSubConfiguration.ContextInitializer.class},\n-        classes = TestPubSubConfiguration.class)\n+        initializers = {DatabaseApplicationContextInitializer.class, PubSubEmulatorApplicationContextInitializer.class})\n @TestExecutionListeners(value = {ResetCacheTestExecutionListener.class},\n         mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)\n-@SpringBootTest(properties = \"spring.cloud.kubernetes.enabled=false\")\n+@SpringBootTest(properties = {\n+        \"spring.cloud.kubernetes.enabled=false\",\n+        \"spring.cloud.gcp.pubsub.enabled=true\",\n+        \"hedera.mirror.importer.parser.record.entity.enabled=false\"})\n public class PubSubIntegrationTest {", "originalCommit": "63a85e5d66b8461db99c2279a0973479d1705971", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkwNDgzNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418904835", "bodyText": "What's the advantage of making them abstract when they don't have any abstract function?", "author": "apeksharma", "createdAt": "2020-05-02T05:17:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NzYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2MTM0NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418961345", "bodyText": "An abstract class just means it can't be instantiated on its own, not necessarily that it contains abstract methods. It's considered good practice since this class is not standalone but intended to be used through inheritance only. Also, if we had @Test in it JUnit might run it multiple times: once standalone and N times for each subclass.", "author": "steven-sheehy", "createdAt": "2020-05-02T13:49:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NzYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY2ODU4NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r419668584", "bodyText": "point taken.", "author": "apeksharma", "createdAt": "2020-05-04T19:17:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NzYyNA=="}], "type": "inlineReview", "revised_code": {"commit": "d18990ddbb060cd51217798982040041d31b2e29", "chunk": "diff --git a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubIntegrationTest.java b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubIntegrationTest.java\nindex 9bb092a1..c6adddf5 100644\n--- a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubIntegrationTest.java\n+++ b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubIntegrationTest.java\n\n@@ -28,20 +28,14 @@ import org.junit.jupiter.api.BeforeEach;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.cloud.gcp.pubsub.PubSubAdmin;\n import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.TestExecutionListeners;\n \n import com.hedera.mirror.importer.parser.record.pubsub.PubSubProperties;\n \n-@ContextConfiguration(\n-        initializers = {DatabaseApplicationContextInitializer.class, PubSubEmulatorApplicationContextInitializer.class})\n-@TestExecutionListeners(value = {ResetCacheTestExecutionListener.class},\n-        mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)\n @SpringBootTest(properties = {\n-        \"spring.cloud.kubernetes.enabled=false\",\n+        \"embedded.google.pubsub.enabled=true\",\n         \"spring.cloud.gcp.pubsub.enabled=true\",\n         \"hedera.mirror.importer.parser.record.entity.enabled=false\"})\n-public class PubSubIntegrationTest {\n+public class PubSubIntegrationTest extends IntegrationTest {\n     private static final String SUBSCRIPTION = \"testSubscription\";\n \n     @Resource\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3ODkzMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418678933", "bodyText": "You said you wanted to test at file parser level to test error scenario. But I don't see any error scenario tests.", "author": "steven-sheehy", "createdAt": "2020-05-01T18:40:02Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordParserTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.hedera.mirror.importer.parser.record.pubsub;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import javax.annotation.Resource;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.springframework.beans.factory.annotation.Value;\n+\n+import com.hedera.mirror.importer.FileCopier;\n+import com.hedera.mirror.importer.PubSubIntegrationTest;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.parser.record.RecordFileParser;\n+import com.hedera.mirror.importer.parser.record.RecordParserProperties;\n+\n+public class PubSubRecordParserTest extends PubSubIntegrationTest {\n+    private static final int NUM_TXNS = 34; // number of transactions in test record files\n+\n+    @TempDir\n+    Path dataPath;\n+    @Value(\"classpath:data\")\n+    Path testResourcesPath;\n+    @Resource\n+    private RecordParserProperties parserProperties;\n+    @Resource\n+    private RecordFileParser recordFileParser;\n+    private FileCopier fileCopier;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        parserProperties.getMirrorProperties().setDataPath(dataPath);\n+        parserProperties.init();\n+\n+        StreamType streamType = StreamType.RECORD;\n+        fileCopier = FileCopier.create(testResourcesPath, dataPath)\n+                .from(streamType.getPath(), \"v2\", \"record0.0.3\")\n+                .filterFiles(\"*.rcd\")\n+                .to(streamType.getPath(), streamType.getValid());\n+    }\n+\n+    @Test\n+    public void testPubSubExporter() throws Exception {", "originalCommit": "63a85e5d66b8461db99c2279a0973479d1705971", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkyMjIxNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418922217", "bodyText": "Working on it.\nDigging into spring to see how i can inject a fault-injecting component during test context setup.\nAny ideas?\nSo far i only know TestConfiguration and ApplicationContextInitializer.\nIf i can't get to it now, will punt it to later.", "author": "apeksharma", "createdAt": "2020-05-02T06:49:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3ODkzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDg2NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r420544865", "bodyText": "Punting to later.", "author": "apeksharma", "createdAt": "2020-05-06T04:55:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3ODkzMw=="}], "type": "inlineReview", "revised_code": {"commit": "d18990ddbb060cd51217798982040041d31b2e29", "chunk": "diff --git a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordParserTest.java b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordParserTest.java\nindex 52a0ef5b..cccd5a6f 100644\n--- a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordParserTest.java\n+++ b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordParserTest.java\n\n@@ -72,7 +72,7 @@ public class PubSubRecordParserTest extends PubSubIntegrationTest {\n \n         // then\n         List<String> expectedMessages =\n-                Files.readAllLines(testResourcesPath.resolve(\"expected_transactions_json.txt\"));\n+                Files.readAllLines(testResourcesPath.resolve(\"pubsub-messages.txt\"));\n         assertThat(getAllMessages(NUM_TXNS)).isEqualTo(expectedMessages);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4MTM2OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418681369", "bodyText": "Doesn't look like we're needing 8682 to be exposed?", "author": "steven-sheehy", "createdAt": "2020-05-01T18:45:33Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.hedera.mirror.importer;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.annotation.PreDestroy;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.OutputFrame;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+@Log4j2\n+class PubSubEmulatorApplicationContextInitializer\n+        implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n+\n+    private static GenericContainer emulator;\n+\n+    // Try starting pubsub emulator. Will fail if docker daemon is absent on the machine running the tests,\n+    // basically when running in CircleCI. In such cases, spring.cloud.gcp.pubsub.emulator-host is expected\n+    // to be correctly set and pointing to a running pubsub emulator.\n+    @Override\n+    public void initialize(ConfigurableApplicationContext applicationContext) {\n+        String projectId = applicationContext.getEnvironment().getProperty(\"spring.cloud.gcp.pubsub.projectId\");\n+        try {\n+            log.info(\"Starting PubSub emulator\");\n+            var emulator = startPubSubEmulator(projectId);\n+            String pubsubEmulatorHost = emulator.getContainerIpAddress() + \":\" + emulator.getMappedPort(8681);\n+            log.info(\"Pubsub emulator running at {}\", pubsubEmulatorHost);\n+            TestPropertyValues.of(\"spring.cloud.gcp.pubsub.emulator-host=\" + pubsubEmulatorHost)\n+                    .applyTo(applicationContext);\n+        } catch (Exception e) {\n+            log.warn(e.getMessage());\n+        }\n+    }\n+\n+    @PreDestroy\n+    public void stop() {\n+        if (emulator != null && emulator.isRunning()) {\n+            log.info(\"Stopping PubSub emulator\");\n+            emulator.stop();\n+        }\n+    }\n+\n+    private static GenericContainer startPubSubEmulator(String projectId) {\n+        emulator = new GenericContainer(\"messagebird/gcloud-pubsub-emulator:latest\")\n+                .withExposedPorts(8681)\n+                .withExposedPorts(8682)", "originalCommit": "63a85e5d66b8461db99c2279a0973479d1705971", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkyMTAzOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418921039", "bodyText": "NA anymore.", "author": "apeksharma", "createdAt": "2020-05-02T06:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4MTM2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d18990ddbb060cd51217798982040041d31b2e29", "chunk": "diff --git a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java\nindex 429cc76a..e5adc164 100644\n--- a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java\n+++ b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java\n\n@@ -20,56 +20,24 @@ package com.hedera.mirror.importer;\n  * \u200d\n  */\n \n-import javax.annotation.PreDestroy;\n-import lombok.extern.log4j.Log4j2;\n import org.springframework.boot.test.util.TestPropertyValues;\n import org.springframework.context.ApplicationContextInitializer;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.testcontainers.containers.GenericContainer;\n-import org.testcontainers.containers.output.OutputFrame;\n-import org.testcontainers.containers.wait.strategy.Wait;\n \n-@Log4j2\n class PubSubEmulatorApplicationContextInitializer\n         implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n \n-    private static GenericContainer emulator;\n-\n-    // Try starting pubsub emulator. Will fail if docker daemon is absent on the machine running the tests,\n-    // basically when running in CircleCI. In such cases, spring.cloud.gcp.pubsub.emulator-host is expected\n-    // to be correctly set and pointing to a running pubsub emulator.\n     @Override\n     public void initialize(ConfigurableApplicationContext applicationContext) {\n-        String projectId = applicationContext.getEnvironment().getProperty(\"spring.cloud.gcp.pubsub.projectId\");\n-        try {\n-            log.info(\"Starting PubSub emulator\");\n-            var emulator = startPubSubEmulator(projectId);\n-            String pubsubEmulatorHost = emulator.getContainerIpAddress() + \":\" + emulator.getMappedPort(8681);\n-            log.info(\"Pubsub emulator running at {}\", pubsubEmulatorHost);\n-            TestPropertyValues.of(\"spring.cloud.gcp.pubsub.emulator-host=\" + pubsubEmulatorHost)\n-                    .applyTo(applicationContext);\n-        } catch (Exception e) {\n-            log.warn(e.getMessage());\n-        }\n-    }\n-\n-    @PreDestroy\n-    public void stop() {\n-        if (emulator != null && emulator.isRunning()) {\n-            log.info(\"Stopping PubSub emulator\");\n-            emulator.stop();\n+        var env = applicationContext.getEnvironment();\n+        String enabled = env.getProperty(\"embedded.google.pubsub.enabled\");\n+        if (enabled != null && enabled.equals(\"false\")) {\n+            return;\n         }\n-    }\n-\n-    private static GenericContainer startPubSubEmulator(String projectId) {\n-        emulator = new GenericContainer(\"messagebird/gcloud-pubsub-emulator:latest\")\n-                .withExposedPorts(8681)\n-                .withExposedPorts(8682)\n-                .waitingFor(Wait.forListeningPort())\n-                .withEnv(\"PUBSUB_PROJECT1\", projectId)\n-                .withLogConsumer(frame ->\n-                        log.debug(\"{} : {}\", ((OutputFrame) frame).getType(), ((OutputFrame) frame).getUtf8String()));\n-        emulator.start();\n-        return emulator;\n+        TestPropertyValues\n+                .of(\"spring.cloud.gcp.pubsub.projectId=\" + env.getProperty(\"embedded.google.pubsub.project-id\"))\n+                .and(\"spring.cloud.gcp.pubsub.emulator-host=\" + env.getProperty(\"embedded.google.pubsub.host\") + \":\"\n+                        + env.getProperty(\"embedded.google.pubsub.port\"))\n+                .applyTo(applicationContext);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4NDA2MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418684061", "bodyText": "Have we considered using testcontainers' Spring Boot embedded-google-pubsub? We can look into maybe switching this and postgres to this as well maybe in future", "author": "steven-sheehy", "createdAt": "2020-05-01T18:51:21Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.hedera.mirror.importer;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.annotation.PreDestroy;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.OutputFrame;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+@Log4j2\n+class PubSubEmulatorApplicationContextInitializer", "originalCommit": "63a85e5d66b8461db99c2279a0973479d1705971", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkwNDk1Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418904952", "bodyText": "Really like the suggestion!\nDone.", "author": "apeksharma", "createdAt": "2020-05-02T05:17:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4NDA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkyMjg5OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418922899", "bodyText": "Can't find a way to set embedded.google.pubsub.enabled and embedded.postgres.enabled to false from command line. Any insights?\nTried following, none worked:\nmvn test -pl hedera-mirror-importer -Dtest=PubSubRecordParserTest -Dspring-boot.run.arguments=--embedded.google.pubsub.enabled=false\n\nmvn test -pl hedera-mirror-importer -Dtest=PubSubRecordParserTest -Dembedded.google.pubsub.enabled=false\n\nmvn test -pl hedera-mirror-importer -Dtest=PubSubRecordParserTest -Drun.arguments=\"--embedded.google.pubsub.enabled=false\"", "author": "apeksharma", "createdAt": "2020-05-02T06:58:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4NDA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2MTczMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418961732", "bodyText": "Why can't you just set via @SpringBootTest?  Looks like these are set during bootstrap phase, so have to set in bootstrap.yml/properties. Can create file dynamically if needed. Not sure your use case", "author": "steven-sheehy", "createdAt": "2020-05-02T13:53:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4NDA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2MjI3Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418962272", "bodyText": "Also environment variables might work", "author": "steven-sheehy", "createdAt": "2020-05-02T13:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4NDA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDUyMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r420544522", "bodyText": "circleci works now. creating file dynamically.", "author": "apeksharma", "createdAt": "2020-05-06T04:54:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4NDA2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d18990ddbb060cd51217798982040041d31b2e29", "chunk": "diff --git a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java\nindex 429cc76a..e5adc164 100644\n--- a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java\n+++ b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java\n\n@@ -20,56 +20,24 @@ package com.hedera.mirror.importer;\n  * \u200d\n  */\n \n-import javax.annotation.PreDestroy;\n-import lombok.extern.log4j.Log4j2;\n import org.springframework.boot.test.util.TestPropertyValues;\n import org.springframework.context.ApplicationContextInitializer;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.testcontainers.containers.GenericContainer;\n-import org.testcontainers.containers.output.OutputFrame;\n-import org.testcontainers.containers.wait.strategy.Wait;\n \n-@Log4j2\n class PubSubEmulatorApplicationContextInitializer\n         implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n \n-    private static GenericContainer emulator;\n-\n-    // Try starting pubsub emulator. Will fail if docker daemon is absent on the machine running the tests,\n-    // basically when running in CircleCI. In such cases, spring.cloud.gcp.pubsub.emulator-host is expected\n-    // to be correctly set and pointing to a running pubsub emulator.\n     @Override\n     public void initialize(ConfigurableApplicationContext applicationContext) {\n-        String projectId = applicationContext.getEnvironment().getProperty(\"spring.cloud.gcp.pubsub.projectId\");\n-        try {\n-            log.info(\"Starting PubSub emulator\");\n-            var emulator = startPubSubEmulator(projectId);\n-            String pubsubEmulatorHost = emulator.getContainerIpAddress() + \":\" + emulator.getMappedPort(8681);\n-            log.info(\"Pubsub emulator running at {}\", pubsubEmulatorHost);\n-            TestPropertyValues.of(\"spring.cloud.gcp.pubsub.emulator-host=\" + pubsubEmulatorHost)\n-                    .applyTo(applicationContext);\n-        } catch (Exception e) {\n-            log.warn(e.getMessage());\n-        }\n-    }\n-\n-    @PreDestroy\n-    public void stop() {\n-        if (emulator != null && emulator.isRunning()) {\n-            log.info(\"Stopping PubSub emulator\");\n-            emulator.stop();\n+        var env = applicationContext.getEnvironment();\n+        String enabled = env.getProperty(\"embedded.google.pubsub.enabled\");\n+        if (enabled != null && enabled.equals(\"false\")) {\n+            return;\n         }\n-    }\n-\n-    private static GenericContainer startPubSubEmulator(String projectId) {\n-        emulator = new GenericContainer(\"messagebird/gcloud-pubsub-emulator:latest\")\n-                .withExposedPorts(8681)\n-                .withExposedPorts(8682)\n-                .waitingFor(Wait.forListeningPort())\n-                .withEnv(\"PUBSUB_PROJECT1\", projectId)\n-                .withLogConsumer(frame ->\n-                        log.debug(\"{} : {}\", ((OutputFrame) frame).getType(), ((OutputFrame) frame).getUtf8String()));\n-        emulator.start();\n-        return emulator;\n+        TestPropertyValues\n+                .of(\"spring.cloud.gcp.pubsub.projectId=\" + env.getProperty(\"embedded.google.pubsub.project-id\"))\n+                .and(\"spring.cloud.gcp.pubsub.emulator-host=\" + env.getProperty(\"embedded.google.pubsub.host\") + \":\"\n+                        + env.getProperty(\"embedded.google.pubsub.port\"))\n+                .applyTo(applicationContext);\n     }\n }\n"}}, {"oid": "7b972c7504a12a3078a293d03be0df9eb0ca56e8", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7b972c7504a12a3078a293d03be0df9eb0ca56e8", "message": "Add PubSub integration tests\n\n- PubSubEmulatorApplicationContextInitializer sets up pubsub emulator container\n- Adds vanilla test - PubSubRecordParserTest\n- Use postgres:9.6-alpine in circleci to match developer local env (docker-compose)\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-05-02T02:11:57Z", "type": "commit"}, {"oid": "d18990ddbb060cd51217798982040041d31b2e29", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d18990ddbb060cd51217798982040041d31b2e29", "message": "address review comments\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-05-02T06:34:17Z", "type": "commit"}, {"oid": "d18990ddbb060cd51217798982040041d31b2e29", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d18990ddbb060cd51217798982040041d31b2e29", "message": "address review comments\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-05-02T06:34:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzAwMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r419047002", "bodyText": "Would be more appropriate in src/test/resources/bootstrap.yml.", "author": "steven-sheehy", "createdAt": "2020-05-03T04:50:13Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/DatabaseApplicationContextInitializer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.hedera.mirror.grpc;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+/**\n+ * Sets up application properties based on testcontainers if any enabled.\n+ */\n+public class DatabaseApplicationContextInitializer\n+        implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n+\n+    @Override\n+    public void initialize(ConfigurableApplicationContext applicationContext) {\n+        var env = applicationContext.getEnvironment();\n+        String enabled = env.getProperty(\"embedded.postgresql.enabled\");\n+        if (enabled != null && enabled.equals(\"false\")) {\n+            return;\n+        }\n+        TestPropertyValues\n+                .of(\"hedera.mirror.grpc.db.host=\" + env.getProperty(\"embedded.postgresql.host\"))", "originalCommit": "d18990ddbb060cd51217798982040041d31b2e29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDMwMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r420544303", "bodyText": "Moved to application.yml (since they need to override props in main/../application.yml, and bootstrap has lower precedence than application)", "author": "apeksharma", "createdAt": "2020-05-06T04:53:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzAwMg=="}], "type": "inlineReview", "revised_code": {"commit": "93813d3014491f1e1ee452f0a625ae10566ecbbc", "chunk": "diff --git a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/DatabaseApplicationContextInitializer.java b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/DatabaseApplicationContextInitializer.java\ndeleted file mode 100644\nindex 669e6c67..00000000\n--- a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/DatabaseApplicationContextInitializer.java\n+++ /dev/null\n\n@@ -1,48 +0,0 @@\n-package com.hedera.mirror.grpc;\n-\n-/*-\n- * \u200c\n- * Hedera Mirror Node\n- * \u200b\n- * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n- * \u200b\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * \u200d\n- */\n-\n-import org.springframework.boot.test.util.TestPropertyValues;\n-import org.springframework.context.ApplicationContextInitializer;\n-import org.springframework.context.ConfigurableApplicationContext;\n-\n-/**\n- * Sets up application properties based on testcontainers if any enabled.\n- */\n-public class DatabaseApplicationContextInitializer\n-        implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n-\n-    @Override\n-    public void initialize(ConfigurableApplicationContext applicationContext) {\n-        var env = applicationContext.getEnvironment();\n-        String enabled = env.getProperty(\"embedded.postgresql.enabled\");\n-        if (enabled != null && enabled.equals(\"false\")) {\n-            return;\n-        }\n-        TestPropertyValues\n-                .of(\"hedera.mirror.grpc.db.host=\" + env.getProperty(\"embedded.postgresql.host\"))\n-                .and(\"hedera.mirror.grpc.db.port=\" + env.getProperty(\"embedded.postgresql.port\"))\n-                .and(\"hedera.mirror.grpc.db.name=\" + env.getProperty(\"embedded.postgresql.schema\"))\n-                .and(\"hedera.mirror.grpc.db.password=\" + env.getProperty(\"embedded.postgresql.password\"))\n-                .and(\"hedera.mirror.grpc.db.username=\" + env.getProperty(\"embedded.postgresql.user\"))\n-                .applyTo(applicationContext);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzE3NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r419047175", "bodyText": "Would be more appropriate in src/test/resources/bootstrap.yml.", "author": "steven-sheehy", "createdAt": "2020-05-03T04:52:17Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/DatabaseApplicationContextInitializer.java", "diffHunk": "@@ -20,55 +20,29 @@\n  * \u200d\n  */\n \n-import javax.annotation.PreDestroy;\n-import lombok.extern.log4j.Log4j2;\n-import org.springframework.boot.test.context.TestConfiguration;\n import org.springframework.boot.test.util.TestPropertyValues;\n import org.springframework.context.ApplicationContextInitializer;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.testcontainers.containers.PostgreSQLContainer;\n \n /**\n- * First try to use a Testcontainer. If Docker is not running or it fails to connect to the Testcontainer, fallback\n- * to a database running on localhost.\n+ * Sets up application properties based on testcontainers if any enabled.\n  */\n-@Log4j2\n-@TestConfiguration\n public class DatabaseApplicationContextInitializer\n         implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n \n-    private static PostgreSQLContainer postgresql;\n-\n-    static {\n-        System.setProperty(\"testcontainers.environmentprovider.timeout\", \"1\");\n-        System.setProperty(\"testcontainers.npipesocketprovider.timeout\", \"1\");\n-        System.setProperty(\"testcontainers.unixsocketprovider.timeout\", \"1\");\n-        System.setProperty(\"testcontainers.windowsprovider.timeout\", \"1\");\n-    }\n-\n     @Override\n     public void initialize(ConfigurableApplicationContext applicationContext) {\n-        try {\n-            log.info(\"Starting PostgreSQL\");\n-            postgresql = new PostgreSQLContainer<>(\"postgres:9.6-alpine\");\n-            postgresql.start();\n-\n-            TestPropertyValues\n-                    .of(\"hedera.mirror.importer.db.name=\" + postgresql.getDatabaseName())\n-                    .and(\"hedera.mirror.importer.db.password=\" + postgresql.getPassword())\n-                    .and(\"hedera.mirror.importer.db.username=\" + postgresql.getUsername())\n-                    .and(\"spring.datasource.url=\" + postgresql.getJdbcUrl())\n-                    .applyTo(applicationContext);\n-        } catch (Throwable ex) {\n-            log.warn(ex.getMessage());\n-        }\n-    }\n-\n-    @PreDestroy\n-    public void stop() {\n-        if (postgresql != null && postgresql.isRunning()) {\n-            log.info(\"Stopping PostgreSQL\");\n-            postgresql.stop();\n+        var env = applicationContext.getEnvironment();\n+        String enabled = env.getProperty(\"embedded.postgresql.enabled\");\n+        if (enabled != null && enabled.equals(\"false\")) {\n+            return;\n         }\n+        TestPropertyValues\n+                .of(\"hedera.mirror.importer.db.host=\" + env.getProperty(\"embedded.postgresql.host\"))", "originalCommit": "d18990ddbb060cd51217798982040041d31b2e29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDQzMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r420544432", "bodyText": "moved to application.yml", "author": "apeksharma", "createdAt": "2020-05-06T04:53:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzE3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "93813d3014491f1e1ee452f0a625ae10566ecbbc", "chunk": "diff --git a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/DatabaseApplicationContextInitializer.java b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/DatabaseApplicationContextInitializer.java\ndeleted file mode 100644\nindex 367f07b6..00000000\n--- a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/DatabaseApplicationContextInitializer.java\n+++ /dev/null\n\n@@ -1,48 +0,0 @@\n-package com.hedera.mirror.importer;\n-\n-/*-\n- * \u200c\n- * Hedera Mirror Node\n- * \u200b\n- * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n- * \u200b\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * \u200d\n- */\n-\n-import org.springframework.boot.test.util.TestPropertyValues;\n-import org.springframework.context.ApplicationContextInitializer;\n-import org.springframework.context.ConfigurableApplicationContext;\n-\n-/**\n- * Sets up application properties based on testcontainers if any enabled.\n- */\n-public class DatabaseApplicationContextInitializer\n-        implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n-\n-    @Override\n-    public void initialize(ConfigurableApplicationContext applicationContext) {\n-        var env = applicationContext.getEnvironment();\n-        String enabled = env.getProperty(\"embedded.postgresql.enabled\");\n-        if (enabled != null && enabled.equals(\"false\")) {\n-            return;\n-        }\n-        TestPropertyValues\n-                .of(\"hedera.mirror.importer.db.host=\" + env.getProperty(\"embedded.postgresql.host\"))\n-                .and(\"hedera.mirror.importer.db.port=\" + env.getProperty(\"embedded.postgresql.port\"))\n-                .and(\"hedera.mirror.importer.db.name=\" + env.getProperty(\"embedded.postgresql.schema\"))\n-                .and(\"hedera.mirror.importer.db.password=\" + env.getProperty(\"embedded.postgresql.password\"))\n-                .and(\"hedera.mirror.importer.db.username=\" + env.getProperty(\"embedded.postgresql.user\"))\n-                .applyTo(applicationContext);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzQ5Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r419047496", "bodyText": "You need to define postgres 9.6 image in a bootstrap.yml", "author": "steven-sheehy", "createdAt": "2020-05-03T04:55:50Z", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/GrpcIntegrationTest.java", "diffHunk": "@@ -20,77 +20,17 @@\n  * \u200d\n  */\n \n-import java.util.Collection;\n-import javax.annotation.PreDestroy;\n-import javax.annotation.Resource;\n-import lombok.extern.log4j.Log4j2;\n-import org.junit.jupiter.api.BeforeEach;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.boot.test.context.TestConfiguration;\n-import org.springframework.boot.test.util.TestPropertyValues;\n-import org.springframework.cache.CacheManager;\n-import org.springframework.context.ApplicationContextInitializer;\n-import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.TestExecutionListeners;\n import org.springframework.test.context.jdbc.Sql;\n-import org.testcontainers.containers.PostgreSQLContainer;\n \n-@ContextConfiguration(initializers = GrpcIntegrationTest.TestDatabaseConfiguration.class)\n-@SpringBootTest\n+@ContextConfiguration(initializers = DatabaseApplicationContextInitializer.class)\n+@TestExecutionListeners(value = {ResetCacheTestExecutionListener.class},\n+        mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)\n+// Same database is used for all tests, so clean it up before each test.\n @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD, scripts = \"classpath:cleanup.sql\")\n @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD, scripts = \"classpath:cleanup.sql\")\n+@SpringBootTest\n public abstract class GrpcIntegrationTest {", "originalCommit": "d18990ddbb060cd51217798982040041d31b2e29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0Mzg3Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r420543876", "bodyText": "done.", "author": "apeksharma", "createdAt": "2020-05-06T04:51:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzQ5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "93813d3014491f1e1ee452f0a625ae10566ecbbc", "chunk": "diff --git a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/GrpcIntegrationTest.java b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/GrpcIntegrationTest.java\nindex 99069a34..cc6ce24f 100644\n--- a/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/GrpcIntegrationTest.java\n+++ b/hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/GrpcIntegrationTest.java\n\n@@ -21,11 +21,9 @@ package com.hedera.mirror.grpc;\n  */\n \n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.TestExecutionListeners;\n import org.springframework.test.context.jdbc.Sql;\n \n-@ContextConfiguration(initializers = DatabaseApplicationContextInitializer.class)\n @TestExecutionListeners(value = {ResetCacheTestExecutionListener.class},\n         mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)\n // Same database is used for all tests, so clean it up before each test.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzY5OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r419047699", "bodyText": "Would be more appropriate in a src/test/resources/bootstrap-pubsub.yml. Then you can @ActiveProfiles(\"pubsub\") on PubSubIntegrationTest to activate it. Can also throw the enabled=true and other properties in there.", "author": "steven-sheehy", "createdAt": "2020-05-03T04:58:28Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.hedera.mirror.importer;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+class PubSubEmulatorApplicationContextInitializer\n+        implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n+\n+    @Override\n+    public void initialize(ConfigurableApplicationContext applicationContext) {\n+        var env = applicationContext.getEnvironment();\n+        String enabled = env.getProperty(\"embedded.google.pubsub.enabled\");\n+        if (enabled != null && enabled.equals(\"false\")) {\n+            return;\n+        }\n+        TestPropertyValues\n+                .of(\"spring.cloud.gcp.pubsub.projectId=\" + env.getProperty(\"embedded.google.pubsub.project-id\"))", "originalCommit": "d18990ddbb060cd51217798982040041d31b2e29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDcxMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r420544712", "bodyText": "using @ActiveProfiles as suggested\nmoved props to application-pubsub.yml", "author": "apeksharma", "createdAt": "2020-05-06T04:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzY5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "93813d3014491f1e1ee452f0a625ae10566ecbbc", "chunk": "diff --git a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java b/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java\ndeleted file mode 100644\nindex e5adc164..00000000\n--- a/hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java\n+++ /dev/null\n\n@@ -1,43 +0,0 @@\n-package com.hedera.mirror.importer;\n-\n-/*-\n- * \u200c\n- * Hedera Mirror Node\n- * \u200b\n- * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n- * \u200b\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * \u200d\n- */\n-\n-import org.springframework.boot.test.util.TestPropertyValues;\n-import org.springframework.context.ApplicationContextInitializer;\n-import org.springframework.context.ConfigurableApplicationContext;\n-\n-class PubSubEmulatorApplicationContextInitializer\n-        implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n-\n-    @Override\n-    public void initialize(ConfigurableApplicationContext applicationContext) {\n-        var env = applicationContext.getEnvironment();\n-        String enabled = env.getProperty(\"embedded.google.pubsub.enabled\");\n-        if (enabled != null && enabled.equals(\"false\")) {\n-            return;\n-        }\n-        TestPropertyValues\n-                .of(\"spring.cloud.gcp.pubsub.projectId=\" + env.getProperty(\"embedded.google.pubsub.project-id\"))\n-                .and(\"spring.cloud.gcp.pubsub.emulator-host=\" + env.getProperty(\"embedded.google.pubsub.host\") + \":\"\n-                        + env.getProperty(\"embedded.google.pubsub.port\"))\n-                .applyTo(applicationContext);\n-    }\n-}\n"}}, {"oid": "93813d3014491f1e1ee452f0a625ae10566ecbbc", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/93813d3014491f1e1ee452f0a625ae10566ecbbc", "message": "spring profiles. make circleci work\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-05-06T04:57:55Z", "type": "forcePushed"}, {"oid": "535ba5f7c537fc0183152e7a6b30baf898709876", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/535ba5f7c537fc0183152e7a6b30baf898709876", "message": "spring profiles. make circleci work\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-05-06T05:15:16Z", "type": "commit"}, {"oid": "535ba5f7c537fc0183152e7a6b30baf898709876", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/535ba5f7c537fc0183152e7a6b30baf898709876", "message": "spring profiles. make circleci work\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-05-06T05:15:16Z", "type": "forcePushed"}]}