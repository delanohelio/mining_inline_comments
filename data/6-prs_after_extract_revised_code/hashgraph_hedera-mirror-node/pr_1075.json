{"pr_number": 1075, "pr_title": "Add a Redis HCS topic listener", "pr_createdAt": "2020-09-24T17:34:17Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/1075", "timeline": [{"oid": "fab1356edf9ac5e4fb272f1e5f39c3b79b4a74d3", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/fab1356edf9ac5e4fb272f1e5f39c3b79b4a74d3", "message": "Add a Redis HCS topic listener\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-09-24T17:25:45Z", "type": "commit"}, {"oid": "f11bdf97fc71d864a800b808dd861b798baac6c1", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f11bdf97fc71d864a800b808dd861b798baac6c1", "message": "Add Redis to CircleCI\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-09-24T17:49:33Z", "type": "commit"}, {"oid": "b1211b184fee41fa749fd9631ed278791a8f95d6", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b1211b184fee41fa749fd9631ed278791a8f95d6", "message": "Set Redis URL for CircleCI\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-09-24T19:03:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3NTY5OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1075#discussion_r494575699", "bodyText": "Should make this Configuration either entity agnostic or specific to TopicMessages in name i.e. RedisConfiguration <T> or RedisTopicMessageConfiguration\nThis was we have a foundation for reuse when we need to expand what we notify out", "author": "Nana-EC", "createdAt": "2020-09-24T19:57:40Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/config/RedisConfiguration.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.hedera.mirror.grpc.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.RequiredArgsConstructor;\n+import org.msgpack.jackson.dataformat.MessagePackFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;\n+import org.springframework.data.redis.core.ReactiveRedisOperations;\n+import org.springframework.data.redis.core.ReactiveRedisTemplate;\n+import org.springframework.data.redis.listener.ReactiveRedisMessageListenerContainer;\n+import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\n+import org.springframework.data.redis.serializer.RedisSerializationContext;\n+import org.springframework.data.redis.serializer.RedisSerializer;\n+import org.springframework.data.redis.serializer.StringRedisSerializer;\n+\n+import com.hedera.mirror.grpc.domain.TopicMessage;\n+\n+@Configuration\n+@RequiredArgsConstructor\n+public class RedisConfiguration {", "originalCommit": "b1211b184fee41fa749fd9631ed278791a8f95d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMxMDI5MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1075#discussion_r495310290", "bodyText": "Made it entity agnostic by introducing a StreamMessage (not sure about the naming) marker interface. So the redis serializers can now serialize anything that implements that interface.", "author": "steven-sheehy", "createdAt": "2020-09-25T23:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3NTY5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b232c572dd04cfe8589f4bf9180d4f94c6671e84", "chunk": "diff --git a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/config/RedisConfiguration.java b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/config/RedisConfiguration.java\nindex 8e74b194..e833ad30 100644\n--- a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/config/RedisConfiguration.java\n+++ b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/config/RedisConfiguration.java\n\n@@ -28,7 +28,6 @@ import org.springframework.context.annotation.Configuration;\n import org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;\n import org.springframework.data.redis.core.ReactiveRedisOperations;\n import org.springframework.data.redis.core.ReactiveRedisTemplate;\n-import org.springframework.data.redis.listener.ReactiveRedisMessageListenerContainer;\n import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\n import org.springframework.data.redis.serializer.RedisSerializationContext;\n import org.springframework.data.redis.serializer.RedisSerializer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3ODY5NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1075#discussion_r494578694", "bodyText": "Can the log distinguish between Cancelled and Complete subscriptions.\nOr have an OnCancel() and OnComplete() with appropriate log that call unsubscribe()", "author": "Nana-EC", "createdAt": "2020-09-24T20:03:28Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/RedisTopicListener.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.hedera.mirror.grpc.listener;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.data.redis.connection.ReactiveSubscription.Message;\n+import org.springframework.data.redis.listener.ChannelTopic;\n+import org.springframework.data.redis.listener.ReactiveRedisMessageListenerContainer;\n+import org.springframework.data.redis.listener.Topic;\n+import org.springframework.data.redis.serializer.RedisSerializationContext.SerializationPair;\n+import org.springframework.data.redis.serializer.RedisSerializer;\n+import reactor.core.publisher.Flux;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.util.retry.Retry;\n+\n+import com.hedera.mirror.grpc.GrpcProperties;\n+import com.hedera.mirror.grpc.domain.TopicMessage;\n+import com.hedera.mirror.grpc.domain.TopicMessageFilter;\n+\n+@Log4j2\n+@Named\n+public class RedisTopicListener extends SharedTopicListener {\n+\n+    private final GrpcProperties grpcProperties;\n+    private final ReactiveRedisMessageListenerContainer container;\n+    private final SerializationPair<String> channelSerializer;\n+    private final SerializationPair<TopicMessage> messageSerializer;\n+    private final Map<String, Flux<TopicMessage>> topicMessages; // Topic name to active subscription\n+\n+    public RedisTopicListener(GrpcProperties grpcProperties,\n+                              ListenerProperties listenerProperties,\n+                              ReactiveRedisMessageListenerContainer container,\n+                              RedisSerializer<TopicMessage> redisSerializer) {\n+        super(listenerProperties);\n+        this.grpcProperties = grpcProperties;\n+        this.container = container;\n+        this.channelSerializer = SerializationPair.fromSerializer(RedisSerializer.string());\n+        this.messageSerializer = SerializationPair.fromSerializer(redisSerializer);\n+        this.topicMessages = new ConcurrentHashMap<>();\n+    }\n+\n+    @Override\n+    protected Flux<TopicMessage> getSharedListener(TopicMessageFilter filter) {\n+        Topic topic = getTopic(filter);\n+        return topicMessages.computeIfAbsent(topic.getTopic(), key -> subscribe(topic))\n+                .doOnSubscribe(s -> log.info(\"Subscribing: {}\", filter));\n+    }\n+\n+    private Topic getTopic(TopicMessageFilter filter) {\n+        return ChannelTopic.of(String.format(\"topic.%d.%d.%d\",\n+                grpcProperties.getShard(), filter.getRealmNum(), filter.getTopicNum()));\n+    }\n+\n+    private Flux<TopicMessage> subscribe(Topic topic) {\n+        Duration frequency = listenerProperties.getFrequency();\n+\n+        return container.receive(Arrays.asList(topic), channelSerializer, messageSerializer)\n+                .map(Message::getMessage)\n+                .name(\"redis\")\n+                .metrics()\n+                .publishOn(Schedulers.boundedElastic())\n+                .doOnCancel(() -> unsubscribe(topic))\n+                .doOnComplete(() -> unsubscribe(topic))\n+                .doOnError(t -> log.error(\"Error listening for messages\", t))\n+                .doOnSubscribe(s -> log.info(\"Creating shared subscription to {}\", topic))\n+                .retryWhen(Retry.backoff(Long.MAX_VALUE, frequency).maxBackoff(frequency.multipliedBy(4L)))\n+                .share();\n+    }\n+\n+    private void unsubscribe(Topic topic) {\n+        topicMessages.remove(topic.getTopic());\n+        log.info(\"Cancelled shared subscription to {}\", topic);", "originalCommit": "b1211b184fee41fa749fd9631ed278791a8f95d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE3OTM5Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1075#discussion_r495179393", "bodyText": "Here it doesn't matter if the flux was cancelled or completed, this log is to denote the subscription status to Redis. As such, I've reworked the log to Unsubscribing from {}.", "author": "steven-sheehy", "createdAt": "2020-09-25T19:05:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3ODY5NA=="}], "type": "inlineReview", "revised_code": {"commit": "b232c572dd04cfe8589f4bf9180d4f94c6671e84", "chunk": "diff --git a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/RedisTopicListener.java b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/RedisTopicListener.java\nindex 202d5a2c..36153cdd 100644\n--- a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/RedisTopicListener.java\n+++ b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/RedisTopicListener.java\n\n@@ -26,6 +26,8 @@ import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;\n import org.springframework.data.redis.connection.ReactiveSubscription.Message;\n import org.springframework.data.redis.listener.ChannelTopic;\n import org.springframework.data.redis.listener.ReactiveRedisMessageListenerContainer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4MzY0Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1075#discussion_r494583647", "bodyText": "Same shared configuration note on this one as previously", "author": "Nana-EC", "createdAt": "2020-09-24T20:13:20Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/RedisConfiguration.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.hedera.mirror.importer.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.msgpack.jackson.dataformat.MessagePackFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.redis.connection.RedisConnectionFactory;\n+import org.springframework.data.redis.core.RedisOperations;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\n+import org.springframework.data.redis.serializer.RedisSerializer;\n+\n+import com.hedera.mirror.importer.domain.TopicMessage;\n+\n+@Configuration\n+public class RedisConfiguration {", "originalCommit": "b1211b184fee41fa749fd9631ed278791a8f95d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMxMDM2Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1075#discussion_r495310367", "bodyText": "Made it entity agnostic by introducing a StreamMessage (not sure about the naming) marker interface. So the redis serializers can now serialize anything that implements that interface.", "author": "steven-sheehy", "createdAt": "2020-09-25T23:15:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4MzY0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "679ac1a0dd51eef380dd4d4ab5b0cf882a3325e2", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/RedisConfiguration.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/RedisConfiguration.java\nindex 765761f9..8e09727e 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/RedisConfiguration.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/RedisConfiguration.java\n\n@@ -30,21 +30,21 @@ import org.springframework.data.redis.core.RedisTemplate;\n import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\n import org.springframework.data.redis.serializer.RedisSerializer;\n \n-import com.hedera.mirror.importer.domain.TopicMessage;\n+import com.hedera.mirror.importer.domain.StreamMessage;\n \n @Configuration\n public class RedisConfiguration {\n \n     @Bean\n-    RedisSerializer<TopicMessage> redisSerializer() {\n-        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(TopicMessage.class);\n+    RedisSerializer<StreamMessage> redisSerializer() {\n+        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(StreamMessage.class);\n         jackson2JsonRedisSerializer.setObjectMapper(new ObjectMapper(new MessagePackFactory()));\n         return jackson2JsonRedisSerializer;\n     }\n \n     @Bean\n-    RedisOperations<String, TopicMessage> redisOperations(RedisConnectionFactory redisConnectionFactory) {\n-        RedisTemplate<String, TopicMessage> redisTemplate = new RedisTemplate<>();\n+    RedisOperations<String, StreamMessage> redisOperations(RedisConnectionFactory redisConnectionFactory) {\n+        RedisTemplate<String, StreamMessage> redisTemplate = new RedisTemplate<>();\n         redisTemplate.setConnectionFactory(redisConnectionFactory);\n         redisTemplate.setValueSerializer(redisSerializer());\n         return redisTemplate;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4NjU5Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1075#discussion_r494586597", "bodyText": "The class notes the general EntityId but is only applicable for AccountID.\nThis should probably be renamed to AbstractEntityIdDeserializer, then have an AccountIdDeserializer that extends this and passes in EntityTypeEnum.ACCOUNT\nSimilar to was we do with the EntityIdConverters", "author": "Nana-EC", "createdAt": "2020-09-24T20:19:16Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/converter/EntityIdDeserializer.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.hedera.mirror.importer.converter;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import java.io.IOException;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.util.EntityIdEndec;\n+\n+public class EntityIdDeserializer extends JsonDeserializer<EntityId> {", "originalCommit": "b1211b184fee41fa749fd9631ed278791a8f95d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE3ODg3MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1075#discussion_r495178871", "bodyText": "Renamed to AccountIdDeserializer. We can add an abstract one once we have at least two sub-classes.", "author": "steven-sheehy", "createdAt": "2020-09-25T19:04:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4NjU5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "679ac1a0dd51eef380dd4d4ab5b0cf882a3325e2", "chunk": "diff --git a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/converter/EntityIdDeserializer.java b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/converter/AccountIdDeserializer.java\nsimilarity index 95%\nrename from hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/converter/EntityIdDeserializer.java\nrename to hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/converter/AccountIdDeserializer.java\nindex 45a3d091..12b228da 100644\n--- a/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/converter/EntityIdDeserializer.java\n+++ b/hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/converter/AccountIdDeserializer.java\n\n@@ -30,7 +30,7 @@ import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.util.EntityIdEndec;\n \n-public class EntityIdDeserializer extends JsonDeserializer<EntityId> {\n+public class AccountIdDeserializer extends JsonDeserializer<EntityId> {\n     @Override\n     public EntityId deserialize(JsonParser jsonParser, DeserializationContext context) throws IOException,\n             JsonProcessingException {\n"}}, {"oid": "b232c572dd04cfe8589f4bf9180d4f94c6671e84", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b232c572dd04cfe8589f4bf9180d4f94c6671e84", "message": "Fix failing on startup if Redis is down\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-09-25T19:01:05Z", "type": "commit"}, {"oid": "679ac1a0dd51eef380dd4d4ab5b0cf882a3325e2", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/679ac1a0dd51eef380dd4d4ab5b0cf882a3325e2", "message": "Address review feedback\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-09-28T16:02:41Z", "type": "commit"}, {"oid": "f8907bf0c911d2f79748a6d5c32cbe4f1d7162bd", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f8907bf0c911d2f79748a6d5c32cbe4f1d7162bd", "message": "Fix tests and switch back to notify by default\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-09-29T22:28:58Z", "type": "commit"}, {"oid": "e9336f8943e54685ceaadcf40a9db3ba3b09118f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e9336f8943e54685ceaadcf40a9db3ba3b09118f", "message": "Switch grpc back to notify\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-09-30T20:16:21Z", "type": "commit"}]}