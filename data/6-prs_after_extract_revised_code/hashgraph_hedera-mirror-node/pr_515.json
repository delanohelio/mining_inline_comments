{"pr_number": 515, "pr_title": "Add a shared poller", "pr_createdAt": "2020-01-30T17:16:18Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/515", "timeline": [{"oid": "1346724fe520e67778e6a31757fd5f58b9b0d09b", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1346724fe520e67778e6a31757fd5f58b9b0d09b", "message": "Add a shared poller\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-01-30T17:13:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5NTI2Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/515#discussion_r373095266", "bodyText": "change doOnCancel log to say cancelled and doOnCOmplete to say Completed so we can distinguish\ne.g. \"Completed : Polling stopped\"\ne.g. \"Cancelled : Polling stopped\"", "author": "Nana-EC", "createdAt": "2020-01-30T17:42:19Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedPollingTopicListener.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.hedera.mirror.grpc.listener;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import javax.inject.Named;\n+import lombok.Data;\n+import lombok.extern.log4j.Log4j2;\n+import reactor.core.publisher.Flux;\n+\n+import com.hedera.mirror.grpc.converter.InstantToLongConverter;\n+import com.hedera.mirror.grpc.domain.TopicMessage;\n+import com.hedera.mirror.grpc.domain.TopicMessageFilter;\n+import com.hedera.mirror.grpc.repository.TopicMessageRepository;\n+\n+@Named\n+@Log4j2\n+public class SharedPollingTopicListener implements TopicListener {\n+\n+    private final ListenerProperties listenerProperties;\n+    private final TopicMessageRepository topicMessageRepository;\n+    private final InstantToLongConverter instantToLongConverter;\n+    private final Flux<TopicMessage> poller;\n+\n+    public SharedPollingTopicListener(ListenerProperties listenerProperties,\n+                                      TopicMessageRepository topicMessageRepository,\n+                                      InstantToLongConverter instantToLongConverter) {\n+        this.listenerProperties = listenerProperties;\n+        this.topicMessageRepository = topicMessageRepository;\n+        this.instantToLongConverter = instantToLongConverter;\n+\n+        Duration frequency = listenerProperties.getPollingFrequency();\n+        PollingContext context = new PollingContext();\n+\n+        poller = Flux.interval(frequency)\n+                .filter(i -> !context.isRunning()) // Discard polling requests while querying\n+                .concatMap(i -> poll(context))\n+                .name(\"shared-poll\")\n+                .metrics()\n+                .doOnNext(context::onNext)\n+                .doOnSubscribe(s -> log.info(\"Starting to poll every {}ms\", frequency.toMillis()))\n+                .doOnComplete(() -> log.info(\"Stopped polling\"))\n+                .doOnCancel(() -> log.info(\"Stopped polling\"))", "originalCommit": "1346724fe520e67778e6a31757fd5f58b9b0d09b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEwNTQ2OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/515#discussion_r373105468", "bodyText": "Done", "author": "steven-sheehy", "createdAt": "2020-01-30T18:03:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5NTI2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c98df56ee3e9334ab12bed614bab1de35d37fda2", "chunk": "diff --git a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedPollingTopicListener.java b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedPollingTopicListener.java\nindex e0b84de7..68e70543 100644\n--- a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedPollingTopicListener.java\n+++ b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedPollingTopicListener.java\n\n@@ -58,8 +58,8 @@ public class SharedPollingTopicListener implements TopicListener {\n                 .metrics()\n                 .doOnNext(context::onNext)\n                 .doOnSubscribe(s -> log.info(\"Starting to poll every {}ms\", frequency.toMillis()))\n-                .doOnComplete(() -> log.info(\"Stopped polling\"))\n-                .doOnCancel(() -> log.info(\"Stopped polling\"))\n+                .doOnComplete(() -> log.info(\"Completed polling\"))\n+                .doOnCancel(() -> log.info(\"Cancelled polling\"))\n                 .share();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5NjcxMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/515#discussion_r373096711", "bodyText": "Could you make this 'isBefore' so it's easier to read.", "author": "Nana-EC", "createdAt": "2020-01-30T17:45:19Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedPollingTopicListener.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.hedera.mirror.grpc.listener;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import javax.inject.Named;\n+import lombok.Data;\n+import lombok.extern.log4j.Log4j2;\n+import reactor.core.publisher.Flux;\n+\n+import com.hedera.mirror.grpc.converter.InstantToLongConverter;\n+import com.hedera.mirror.grpc.domain.TopicMessage;\n+import com.hedera.mirror.grpc.domain.TopicMessageFilter;\n+import com.hedera.mirror.grpc.repository.TopicMessageRepository;\n+\n+@Named\n+@Log4j2\n+public class SharedPollingTopicListener implements TopicListener {\n+\n+    private final ListenerProperties listenerProperties;\n+    private final TopicMessageRepository topicMessageRepository;\n+    private final InstantToLongConverter instantToLongConverter;\n+    private final Flux<TopicMessage> poller;\n+\n+    public SharedPollingTopicListener(ListenerProperties listenerProperties,\n+                                      TopicMessageRepository topicMessageRepository,\n+                                      InstantToLongConverter instantToLongConverter) {\n+        this.listenerProperties = listenerProperties;\n+        this.topicMessageRepository = topicMessageRepository;\n+        this.instantToLongConverter = instantToLongConverter;\n+\n+        Duration frequency = listenerProperties.getPollingFrequency();\n+        PollingContext context = new PollingContext();\n+\n+        poller = Flux.interval(frequency)\n+                .filter(i -> !context.isRunning()) // Discard polling requests while querying\n+                .concatMap(i -> poll(context))\n+                .name(\"shared-poll\")\n+                .metrics()\n+                .doOnNext(context::onNext)\n+                .doOnSubscribe(s -> log.info(\"Starting to poll every {}ms\", frequency.toMillis()))\n+                .doOnComplete(() -> log.info(\"Stopped polling\"))\n+                .doOnCancel(() -> log.info(\"Stopped polling\"))\n+                .share();\n+    }\n+\n+    @Override\n+    public Flux<TopicMessage> listen(TopicMessageFilter filter) {\n+        return poller.filter(t -> filterMessage(t, filter))\n+                .doOnSubscribe(s -> log.info(\"Listening for messages: {}\", filter));\n+    }\n+\n+    private Flux<TopicMessage> poll(PollingContext context) {\n+        Instant instant = context.getLastConsensusTimestamp();\n+        Long consensusTimestamp = instantToLongConverter.convert(instant);\n+        log.debug(\"Querying for messages after: {}\", instant);\n+\n+        return topicMessageRepository.findByConsensusTimestampGreaterThan(consensusTimestamp)\n+                .doOnSubscribe(s -> context.setRunning(true))\n+                .doOnCancel(() -> context.setRunning(false))\n+                .doOnComplete(() -> context.setRunning(false));\n+    }\n+\n+    private boolean filterMessage(TopicMessage message, TopicMessageFilter filter) {\n+        return filter.getRealmNum() == message.getRealmNum() &&\n+                filter.getTopicNum() == message.getTopicNum() &&\n+                !filter.getStartTime().isAfter(message.getConsensusTimestamp());", "originalCommit": "1346724fe520e67778e6a31757fd5f58b9b0d09b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEwNTc0MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/515#discussion_r373105741", "bodyText": "But isBefore will not handle the case when they're equal", "author": "steven-sheehy", "createdAt": "2020-01-30T18:03:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5NjcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3MjI4Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/515#discussion_r373172282", "bodyText": "Understood.", "author": "Nana-EC", "createdAt": "2020-01-30T20:18:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5NjcxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "c98df56ee3e9334ab12bed614bab1de35d37fda2", "chunk": "diff --git a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedPollingTopicListener.java b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedPollingTopicListener.java\nindex e0b84de7..68e70543 100644\n--- a/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedPollingTopicListener.java\n+++ b/hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedPollingTopicListener.java\n\n@@ -58,8 +58,8 @@ public class SharedPollingTopicListener implements TopicListener {\n                 .metrics()\n                 .doOnNext(context::onNext)\n                 .doOnSubscribe(s -> log.info(\"Starting to poll every {}ms\", frequency.toMillis()))\n-                .doOnComplete(() -> log.info(\"Stopped polling\"))\n-                .doOnCancel(() -> log.info(\"Stopped polling\"))\n+                .doOnComplete(() -> log.info(\"Completed polling\"))\n+                .doOnCancel(() -> log.info(\"Cancelled polling\"))\n                 .share();\n     }\n \n"}}, {"oid": "c98df56ee3e9334ab12bed614bab1de35d37fda2", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c98df56ee3e9334ab12bed614bab1de35d37fda2", "message": "Address review feedback\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-01-30T18:07:43Z", "type": "commit"}]}