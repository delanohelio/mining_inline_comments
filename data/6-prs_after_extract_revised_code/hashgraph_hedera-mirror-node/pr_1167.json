{"pr_number": 1167, "pr_title": "Update acceptance tests with v0.21.0 token rest checks", "pr_createdAt": "2020-10-22T01:59:50Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167", "timeline": [{"oid": "97a9009605812c5cdbbc8476b7db190d268966f5", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/97a9009605812c5cdbbc8476b7db190d268966f5", "message": "Update acceptance tests with v0.21.0 token rest checks\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-10-22T01:55:16Z", "type": "commit"}, {"oid": "f97578d6f84ddb609c3654bd383969fa652bc723", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f97578d6f84ddb609c3654bd383969fa652bc723", "message": "Update sdk version\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-10-22T19:08:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1MDQzMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r510950430", "bodyText": "This is more secure than string formatting, but now it's way less readable and maintainable. Why not this?\n@Bean\nWebClient webClient() {\n  return WebClient.create(\"http://host:8080/api/v1\");\n}\n...\nwebClient.get().uri(\"/accounts/{accountId}?order=desc&limit={limit}\", \"0.0.2\", 5);", "author": "steven-sheehy", "createdAt": "2020-10-23T15:07:54Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java", "diffHunk": "@@ -119,24 +132,76 @@ public SubscriptionResponse subscribeToTopicAndRetrieveMessages(MirrorConsensusT\n     }\n \n     public ClientResponse verifyAccountRestEndpoint(String accountId, int lastCount) {\n-        log.debug(\"Verify account {} is returned by Mirror Node\", accountId);\n-        String endpoint = String.format(\"/api/v1/accounts/%s?order=desc&limit=%d\", accountId, lastCount);\n-        return verifyRestEndpoint(endpoint);\n+        log.debug(\"Verify account '{}' is returned by Mirror Node\", accountId);\n+        // build <host>/api/v1/accounts/<accountId>?order=desc&limit=50\n+        URI uri = UriComponentsBuilder", "originalCommit": "f97578d6f84ddb609c3654bd383969fa652bc723", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzNzU1Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511137556", "bodyText": "Will add WebClient bean to the ClientConfiguration. Agree with that.\nWith this I think it addresses the readability.\nOPS requested a log with the full absolute URI, which was easy to do this way, I'll add logs for reactor.netty.http.client.", "author": "Nana-EC", "createdAt": "2020-10-23T20:21:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1MDQzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MTYzMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511151630", "bodyText": "I really dislike the exploded URI segment building. Logging a URI is a cross cutting concern and more appropriate for an interceptor. See filter functions.", "author": "steven-sheehy", "createdAt": "2020-10-23T20:56:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1MDQzMA=="}], "type": "inlineReview", "revised_code": {"commit": "021e3387f49088b4a69ed79c2d349c1f98e1e466", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java\nindex d0a936bdf..4319de785 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java\n\n@@ -131,98 +126,53 @@ public class MirrorNodeClient {\n         return subscriptionResponse;\n     }\n \n-    public ClientResponse verifyAccountRestEndpoint(String accountId, int lastCount) {\n+    public ClientResponse verifyAccountRestEndpoint(String accountId) {\n+        log.debug(\"Verify account '{}' is returned by Mirror Node\", accountId);\n+        // build /accounts?account.id=<accountId>\n+        return verifyRestEndpoint(\"/{endpoint}?{key}={accountId}\", ACCOUNTS_ENDPOINT, ACCOUNTS_ID_QUERY, accountId);\n+    }\n+\n+    public ClientResponse verifyAccountTransactionsRestEndpoint(String accountId, int lastCount) {\n         log.debug(\"Verify account '{}' is returned by Mirror Node\", accountId);\n-        // build <host>/api/v1/accounts/<accountId>?order=desc&limit=50\n-        URI uri = UriComponentsBuilder\n-                .fromUriString(\"http://\" + acceptanceProps.getMirrorRestAddress())\n-                .path(API_V1)\n-                .pathSegment(ACCOUNTS_ENDPOINT)\n-                .pathSegment(\"{accountId}\")\n-                .queryParam(\"order\", \"desc\")\n-                .queryParam(\"limit\", lastCount)\n-                .buildAndExpand(accountId)\n-                .toUri();\n-        return verifyRestEndpoint(uri);\n+        // build /accounts/<accountId>?order=desc&limit=50\n+        return verifyRestEndpoint(\"/{endpoint}/{accountId}?order=desc&limit={limit}\", ACCOUNTS_ENDPOINT, accountId,\n+                lastCount);\n     }\n \n     public ClientResponse verifyAccountBalanceRestEndpoint(String accountId) {\n         log.debug(\"Verify balance for account '{}' is returned by Mirror Node\", accountId);\n-        // build <host>/api/v1/balances?account.id=<accountId>\n-        URI uri = UriComponentsBuilder\n-                .fromUriString(\"http://\" + acceptanceProps.getMirrorRestAddress())\n-                .path(API_V1)\n-                .pathSegment(BALANCES_ENDPOINT)\n-                .queryParam(ACCOUNTS_ID_QUERY, accountId)\n-                .buildAndExpand(accountId)\n-                .toUri();\n-        return verifyRestEndpoint(uri);\n+        // build /balances?account.id=<accountId>\n+        return verifyRestEndpoint(\"/{endpoint}?{key}={accountId}\", BALANCES_ENDPOINT, ACCOUNTS_ID_QUERY, accountId);\n     }\n \n     public ClientResponse verifyTransactionRestEntity(String transactionId) {\n         log.debug(\"Verify transaction '{}' is returned by Mirror Node\", transactionId);\n-        // build <host>/api/v1/transactions?<transactionId>\n-        URI uri = UriComponentsBuilder\n-                .fromUriString(\"http://\" + acceptanceProps.getMirrorRestAddress())\n-                .path(API_V1)\n-                .pathSegment(TRANSACTIONS_ENDPOINT)\n-                .pathSegment(\"{transactionId}\")\n-                .buildAndExpand(transactionId)\n-                .toUri();\n-        return verifyRestEndpoint(uri);\n+        // build /transactions/<transactionId>\n+        return verifyRestEndpoint(\"/{endpoint}/{transactionId}\", TRANSACTIONS_ENDPOINT, transactionId);\n     }\n \n     public ClientResponse verifyTokenInfoEndpoint(String tokenId) {\n         log.debug(\"Verify token '{}' is returned by Mirror Node\", tokenId);\n-        // build <host>/api/v1/tokens/<tokenId>\n-        URI uri = UriComponentsBuilder\n-                .fromUriString(\"http://\" + acceptanceProps.getMirrorRestAddress())\n-                .path(API_V1)\n-                .pathSegment(TOKENS_ENDPOINT)\n-                .pathSegment(\"{tokenId}\")\n-                .buildAndExpand(tokenId)\n-                .toUri();\n-        return verifyRestEndpoint(uri);\n+        // build /tokens/<tokenId>\n+        return verifyRestEndpoint(\"/{endpoint}/{tokenId}\", TOKENS_ENDPOINT, tokenId);\n     }\n \n     public ClientResponse verifyTokenBalanceEndpoint(String tokenId, String accountId) {\n         log.debug(\"Verify token balance for token '{}' and account '{}' is returned by Mirror Node\", tokenId,\n                 accountId);\n-        // build <host>/api/v1/tokens/<tokenId>/balances?account.id=<accountId>\n-        URI uri = UriComponentsBuilder\n-                .fromUriString(\"http://\" + acceptanceProps.getMirrorRestAddress())\n-                .path(API_V1)\n-                .pathSegment(TOKENS_ENDPOINT)\n-                .pathSegment(\"{tokenId}\")\n-                .pathSegment(BALANCES_ENDPOINT)\n-                .queryParam(ACCOUNTS_ID_QUERY, accountId)\n-                .buildAndExpand(tokenId)\n-                .toUri();\n-        return verifyRestEndpoint(uri);\n+        // build /tokens/<tokenId>/balances?account.id=<accountId>\n+        return verifyRestEndpoint(\"/{endpoint}/{tokenId}/{path}?{key}={accountId}\", TOKENS_ENDPOINT, tokenId,\n+                BALANCES_ENDPOINT, ACCOUNTS_ID_QUERY, accountId);\n     }\n \n-    public ClientResponse verifyRestEndpoint(URI apiEndpoint) {\n-        TcpClient tcpClient = TcpClient\n-                .create()\n-                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000)\n-                .doOnConnected(connection -> {\n-                    connection.addHandlerLast(new ReadTimeoutHandler(5000, TimeUnit.MILLISECONDS));\n-                    connection.addHandlerLast(new WriteTimeoutHandler(5000, TimeUnit.MILLISECONDS));\n-                });\n-\n-        WebClient client = WebClient.builder()\n-                .baseUrl(\"http://\" + acceptanceProps.getMirrorRestAddress())\n-                .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)\n-                .clientConnector(new ReactorClientHttpConnector(HttpClient.from(tcpClient)))\n-                .build();\n-\n-        ClientResponse response = client.get()\n-                .uri(apiEndpoint)\n+    public ClientResponse verifyRestEndpoint(String uri, Object... uriVariables) {\n+        ClientResponse response = webClient.get()\n+                .uri(uri, uriVariables)\n                 .accept(MediaType.APPLICATION_JSON)\n                 .exchange()\n                 .block();\n \n-        log.debug(\"Endpoint {} returned {}\", apiEndpoint, response.statusCode());\n+        log.debug(\"Endpoint {} returned {}\", uri, response.statusCode());\n \n         return response;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1NTE0OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r510955149", "bodyText": "You should configure ObjectMapper to use snake_case so you don't have to manually map all of these.\nnew ObjectMapper().setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);", "author": "steven-sheehy", "createdAt": "2020-10-23T15:15:15Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/response/MirrorTokenResponse.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package com.hedera.mirror.test.e2e.acceptance.response;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Data;\n+\n+import com.hedera.mirror.test.e2e.acceptance.props.MirrorKey;\n+\n+@Data\n+public class MirrorTokenResponse {\n+    @JsonProperty(\"admin_key\")\n+    private MirrorKey adminKey;\n+\n+    @JsonProperty(\"auto_renew_account\")", "originalCommit": "f97578d6f84ddb609c3654bd383969fa652bc723", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzNzY5OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511137698", "bodyText": "Good suggestion, will add to Bean configuration", "author": "Nana-EC", "createdAt": "2020-10-23T20:21:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1NTE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "021e3387f49088b4a69ed79c2d349c1f98e1e466", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/response/MirrorTokenResponse.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/response/MirrorTokenResponse.java\nindex c18b40d2a..71118c4d8 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/response/MirrorTokenResponse.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/response/MirrorTokenResponse.java\n\n@@ -20,61 +20,13 @@ package com.hedera.mirror.test.e2e.acceptance.response;\n  * \u200d\n  */\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n import lombok.Data;\n \n-import com.hedera.mirror.test.e2e.acceptance.props.MirrorKey;\n-\n @Data\n public class MirrorTokenResponse {\n-    @JsonProperty(\"admin_key\")\n-    private MirrorKey adminKey;\n-\n-    @JsonProperty(\"auto_renew_account\")\n-    private String autoRenewAccount;\n-\n-    @JsonProperty(\"auto_renew_period\")\n-    private String autoRenewPeriod;\n-\n-    @JsonProperty(\"created_timestamp\")\n     private String createdTimestamp;\n \n-    private String decimals;\n-\n-    @JsonProperty(\"expiry_timestamp\")\n-    private String expiry_timestamp;\n-\n-    @JsonProperty(\"freeze_default\")\n-    private boolean freezeDefault;\n-\n-    @JsonProperty(\"freeze_key\")\n-    private MirrorKey freezeKey;\n-\n-    @JsonProperty(\"initial_supply\")\n-    private String initialSupply;\n-\n-    @JsonProperty(\"modified_timestamp\")\n     private String modifiedTimestamp;\n \n-    private String name;\n-\n-    @JsonProperty(\"kyc_key\")\n-    private MirrorKey kycKey;\n-\n-    @JsonProperty(\"supply_key\")\n-    private MirrorKey supplyKey;\n-\n-    private String symbol;\n-\n-    @JsonProperty(\"token_id\")\n     private String tokenId;\n-\n-    @JsonProperty(\"total_supply\")\n-    private String totalSupply;\n-\n-    @JsonProperty(\"treasury_account_id\")\n-    private String treasuryAccountId;\n-\n-    @JsonProperty(\"wipe_key\")\n-    private MirrorKey wipeKey;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1NzE4MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r510957180", "bodyText": "Do we really need to model all of the fields? Since we can't share domain classes with JavaScript, we should minimize our coupling with its domain model and only model the minimal set of objects and fields that we actually need. That way we don't pay as much of a maintenance cost when we change either side.", "author": "steven-sheehy", "createdAt": "2020-10-23T15:18:20Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/response/MirrorTokenResponse.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package com.hedera.mirror.test.e2e.acceptance.response;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Data;\n+\n+import com.hedera.mirror.test.e2e.acceptance.props.MirrorKey;\n+\n+@Data\n+public class MirrorTokenResponse {\n+    @JsonProperty(\"admin_key\")\n+    private MirrorKey adminKey;\n+\n+    @JsonProperty(\"auto_renew_account\")\n+    private String autoRenewAccount;\n+\n+    @JsonProperty(\"auto_renew_period\")", "originalCommit": "f97578d6f84ddb609c3654bd383969fa652bc723", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzNzkzNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511137935", "bodyText": "That's fair, will keep the ones we need.", "author": "Nana-EC", "createdAt": "2020-10-23T20:22:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1NzE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "021e3387f49088b4a69ed79c2d349c1f98e1e466", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/response/MirrorTokenResponse.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/response/MirrorTokenResponse.java\nindex c18b40d2a..71118c4d8 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/response/MirrorTokenResponse.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/response/MirrorTokenResponse.java\n\n@@ -20,61 +20,13 @@ package com.hedera.mirror.test.e2e.acceptance.response;\n  * \u200d\n  */\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n import lombok.Data;\n \n-import com.hedera.mirror.test.e2e.acceptance.props.MirrorKey;\n-\n @Data\n public class MirrorTokenResponse {\n-    @JsonProperty(\"admin_key\")\n-    private MirrorKey adminKey;\n-\n-    @JsonProperty(\"auto_renew_account\")\n-    private String autoRenewAccount;\n-\n-    @JsonProperty(\"auto_renew_period\")\n-    private String autoRenewPeriod;\n-\n-    @JsonProperty(\"created_timestamp\")\n     private String createdTimestamp;\n \n-    private String decimals;\n-\n-    @JsonProperty(\"expiry_timestamp\")\n-    private String expiry_timestamp;\n-\n-    @JsonProperty(\"freeze_default\")\n-    private boolean freezeDefault;\n-\n-    @JsonProperty(\"freeze_key\")\n-    private MirrorKey freezeKey;\n-\n-    @JsonProperty(\"initial_supply\")\n-    private String initialSupply;\n-\n-    @JsonProperty(\"modified_timestamp\")\n     private String modifiedTimestamp;\n \n-    private String name;\n-\n-    @JsonProperty(\"kyc_key\")\n-    private MirrorKey kycKey;\n-\n-    @JsonProperty(\"supply_key\")\n-    private MirrorKey supplyKey;\n-\n-    private String symbol;\n-\n-    @JsonProperty(\"token_id\")\n     private String tokenId;\n-\n-    @JsonProperty(\"total_supply\")\n-    private String totalSupply;\n-\n-    @JsonProperty(\"treasury_account_id\")\n-    private String treasuryAccountId;\n-\n-    @JsonProperty(\"wipe_key\")\n-    private MirrorKey wipeKey;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4MDU0Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r510980546", "bodyText": "Where is this used?", "author": "steven-sheehy", "createdAt": "2020-10-23T15:52:46Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TokenFeature.java", "diffHunk": "@@ -199,102 +216,126 @@ public void transferTokens(TokenId tokenId, int amount, AccountId sender, Accoun\n         assertNotNull(networkTransactionResponse.getReceipt());\n     }\n \n-    @Then(\"the mirror node REST API should return status {int}\")\n-    @Retryable(value = {AssertionError.class})\n-    public void verifyMirrorAPIResponses(int status) throws Throwable {\n-        verifyAccounts(status);\n-        verifyBalances(status);\n-        verifyTransactions(status);\n-    }\n-\n-    private void verifyAccounts(int status) {\n-        ClientResponse response = mirrorClient\n-                .verifyAccountRestEndpoint(tokenClient.getSdkClient().getOperatorId().toString(), 5);\n+    @Given(\"I update the token\")\n+    @Retryable(value = {StatusRuntimeException.class}, exceptionExpression = \"#{message.contains('UNAVAILABLE') || \" +\n+            \"message.contains('RESOURCE_EXHAUSTED')}\")\n+    public void updateToken() throws HederaStatusException {\n \n-        List<String> stringsToVerify = new ArrayList<>();\n-        stringsToVerify.add(tokenClient.getSdkClient().getOperatorId().toString());\n-        stringsToVerify.add(tokenId.toString());\n+        networkTransactionResponse = tokenClient\n+                .updateToken(tokenId, tokenClient.getSdkClient().getExpandedOperatorAccountId());\n+        assertNotNull(networkTransactionResponse.getTransactionId());\n+        assertNotNull(networkTransactionResponse.getReceipt());\n+    }\n \n-        assertNotNull(response, \"httpStatus null\");\n-        assertNotNull(response.statusCode(), \"httpStatus null\");\n-        assertEquals(status, response.statusCode().value(), \"mirrorResponse matched\");\n+    @Given(\"I burn {int} from the token\")\n+    @Retryable(value = {StatusRuntimeException.class}, exceptionExpression = \"#{message.contains('UNAVAILABLE') || \" +\n+            \"message.contains('RESOURCE_EXHAUSTED')}\")\n+    public void burnToken(int amount) throws HederaStatusException {\n \n-        // verify transaction json contains strings, to be replaced with domain mapping comparisons\n-        String json = response.bodyToMono(JsonNode.class).block().toString();\n-        stringsToVerify.stream().forEach(term -> {\n-            assertThat(json).contains(term);\n-        });\n+        networkTransactionResponse = tokenClient.burn(tokenId, amount);\n+        assertNotNull(networkTransactionResponse.getTransactionId());\n+        assertNotNull(networkTransactionResponse.getReceipt());\n     }\n \n-    private void verifyBalances(int status) {\n-        String sender = tokenClient.getSdkClient().getOperatorId().toString();\n-        ClientResponse response = mirrorClient.verifyAccountBalanceRestEndpoint(sender);\n+    @Given(\"I mint {int} from the token\")\n+    @Retryable(value = {StatusRuntimeException.class}, exceptionExpression = \"#{message.contains('UNAVAILABLE') || \" +\n+            \"message.contains('RESOURCE_EXHAUSTED')}\")\n+    public void mintToken(int amount) throws HederaStatusException {\n \n-        // verify balances response contains sender, recipient and new token id\n-        List<String> stringsToVerify = new ArrayList<>();\n-        stringsToVerify.add(sender);\n+        networkTransactionResponse = tokenClient.mint(tokenId, amount);\n+        assertNotNull(networkTransactionResponse.getTransactionId());\n+        assertNotNull(networkTransactionResponse.getReceipt());\n+    }\n \n-        assertNotNull(response, \"httpStatus null\");\n-        assertNotNull(response.statusCode(), \"httpStatus null\");\n-        assertEquals(status, response.statusCode().value(), \"mirrorResponse matched\");\n+    @Given(\"I wipe {int} from the token\")\n+    @Retryable(value = {StatusRuntimeException.class}, exceptionExpression = \"#{message.contains('UNAVAILABLE') || \" +\n+            \"message.contains('RESOURCE_EXHAUSTED')}\")\n+    public void wipeToken(int amount) throws HederaStatusException {\n \n-        // verify transaction json contains strings, to be replaced with domain mapping comparisons\n-        String json = response.bodyToMono(JsonNode.class).block().toString();\n-        stringsToVerify.stream().forEach(term -> {\n-            assertThat(json).contains(term);\n-        });\n+        networkTransactionResponse = tokenClient.wipe(tokenId, amount, recipient);\n+        assertNotNull(networkTransactionResponse.getTransactionId());\n+        assertNotNull(networkTransactionResponse.getReceipt());\n     }\n \n-    private void verifyTransactions(int status) {\n-        TransactionId transactionId = networkTransactionResponse.getTransactionId();\n+    @Given(\"I dissociate the account from the token\")\n+    @Retryable(value = {StatusRuntimeException.class}, exceptionExpression = \"#{message.contains('UNAVAILABLE') || \" +\n+            \"message.contains('RESOURCE_EXHAUSTED')}\")\n+    public void dissociateNewAccountFromToken() throws HederaStatusException {\n+        networkTransactionResponse = tokenClient.disssociate(recipient, tokenId);\n+        assertNotNull(networkTransactionResponse.getTransactionId());\n+        assertNotNull(networkTransactionResponse.getReceipt());\n+    }\n \n-        String transactionIdString = transactionId.accountId.toString() + \"-\" + transactionId.validStart\n-                .getEpochSecond() + \"-\" + transactionId.validStart.getNano();\n-        ClientResponse response = mirrorClient.verifyTransactionRestEntity(transactionIdString);\n+    @Given(\"I delete the token\")\n+    @Retryable(value = {StatusRuntimeException.class}, exceptionExpression = \"#{message.contains('UNAVAILABLE') || \" +\n+            \"message.contains('RESOURCE_EXHAUSTED')}\")\n+    public void deleteToken() throws HederaStatusException {\n \n-        List<String> stringsToVerify = new ArrayList<>();\n-        stringsToVerify.add(transactionId.validStart.getEpochSecond() + \".\" + transactionId.validStart.getNano());\n-        stringsToVerify.add(transactionIdString);\n+        networkTransactionResponse = tokenClient\n+                .delete(tokenClient.getSdkClient().getExpandedOperatorAccountId(), tokenId);\n+        assertNotNull(networkTransactionResponse.getTransactionId());\n+        assertNotNull(networkTransactionResponse.getReceipt());\n+    }\n \n-        stringsToVerify.add(tokenId.toString());\n+    @Then(\"the mirror node REST API should return status {int}\")\n+    @Retryable(value = {AssertionError.class, AssertionFailedError.class}, backoff = @Backoff(delay = 5000))\n+    public void verifyMirrorAPIResponses(int status) {\n+        verifyTransactions(status);\n+    }\n \n-        assertNotNull(response, \"httpStatus null\");\n-        assertNotNull(response.statusCode(), \"httpStatus null\");\n-        assertEquals(status, response.statusCode().value(), \"mirrorResponse matched\");\n+    @Then(\"the mirror node REST API should return status {int} for token fund flow\")\n+    @Retryable(value = {AssertionError.class, AssertionFailedError.class}, backoff = @Backoff(delay = 5000))\n+    public void verifyMirrorTokenFundFlow(int status) {\n+        verifyBalances(status);\n+        verifyTransactions(status);\n+        verifyToken(status);\n+    }\n \n-        // verify transaction json contains strings, to be replaced with domain mapping comparisons\n-        String json = response.bodyToMono(JsonNode.class).block().toString();\n-        stringsToVerify.stream().forEach(term -> {\n-            assertThat(json).contains(term);\n-        });\n+    @Then(\"the mirror node REST API should return status {int} for token update\")\n+    @Retryable(value = {AssertionError.class, AssertionFailedError.class}, backoff = @Backoff(delay = 5000))\n+    public void verifyMirrorTokenUpdateFlow(int status) {\n+        verifyTokenUpdate(status);\n     }\n \n-    @Then(\"the mirror node {string}} REST API should return status {int}\")\n-    public void verifyMirrorTransactionAPIResponse(String endpoint, int status) throws Throwable {\n-        if (endpoint.equalsIgnoreCase(\"accounts\")) {\n-            verifyAccounts(status);\n-        } else if (endpoint.equalsIgnoreCase(\"balances\")) {\n+    @Then(\"the mirror node {string} REST API should return status {int}\")", "originalCommit": "f97578d6f84ddb609c3654bd383969fa652bc723", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzODAxOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511138018", "bodyText": "Leftover, meant to remove.", "author": "Nana-EC", "createdAt": "2020-10-23T20:22:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4MDU0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "021e3387f49088b4a69ed79c2d349c1f98e1e466", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TokenFeature.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TokenFeature.java\nindex 97d52bed1..639415003 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TokenFeature.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TokenFeature.java\n\n@@ -289,6 +288,7 @@ public class TokenFeature {\n         verifyBalances(status);\n         verifyTransactions(status);\n         verifyToken(status);\n+        verifyTokenTransfers(status);\n     }\n \n     @Then(\"the mirror node REST API should return status {int} for token update\")\n"}}, {"oid": "021e3387f49088b4a69ed79c2d349c1f98e1e466", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/021e3387f49088b4a69ed79c2d349c1f98e1e466", "message": "Added WebClient bean and removed unneeded domain properties\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-10-23T21:28:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3Nzc4NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511177785", "bodyText": "imports should be below license. Otherwise next time we run the license plugin it will add another license to the top.", "author": "steven-sheehy", "createdAt": "2020-10-23T22:13:25Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/props/MirrorTokenAccountBalance.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package com.hedera.mirror.test.e2e.acceptance.props;\n+\n+import lombok.Data;", "originalCommit": "021e3387f49088b4a69ed79c2d349c1f98e1e466", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTI1MDM2OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511250368", "bodyText": "Fixed", "author": "Nana-EC", "createdAt": "2020-10-24T01:58:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3Nzc4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d725e44c001381b00a6ca823909ba7727104c80", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/props/MirrorTokenAccountBalance.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/props/MirrorTokenAccountBalance.java\nindex 3dd680620..8a8752ec3 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/props/MirrorTokenAccountBalance.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/props/MirrorTokenAccountBalance.java\n\n@@ -1,7 +1,5 @@\n package com.hedera.mirror.test.e2e.acceptance.props;\n \n-import lombok.Data;\n-\n /*-\n  * \u200c\n  * Hedera Mirror Node\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3NzgzOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511177839", "bodyText": "Same", "author": "steven-sheehy", "createdAt": "2020-10-23T22:13:39Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/props/MirrorTransfer.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package com.hedera.mirror.test.e2e.acceptance.props;\n+\n+import lombok.Data;", "originalCommit": "021e3387f49088b4a69ed79c2d349c1f98e1e466", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTI1MDMzNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511250334", "bodyText": "Fixed", "author": "Nana-EC", "createdAt": "2020-10-24T01:58:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3NzgzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d725e44c001381b00a6ca823909ba7727104c80", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/props/MirrorTransfer.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/props/MirrorTransfer.java\nindex fe11a5020..e9c9d3b8a 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/props/MirrorTransfer.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/props/MirrorTransfer.java\n\n@@ -1,7 +1,5 @@\n package com.hedera.mirror.test.e2e.acceptance.props;\n \n-import lombok.Data;\n-\n /*-\n  * \u200c\n  * Hedera Mirror Node\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3Nzg2OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511177868", "bodyText": "Same", "author": "steven-sheehy", "createdAt": "2020-10-23T22:13:47Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/response/MirrorTokenBalancesResponse.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.hedera.mirror.test.e2e.acceptance.response;\n+\n+import java.util.List;", "originalCommit": "021e3387f49088b4a69ed79c2d349c1f98e1e466", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTI1MDI4Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511250287", "bodyText": "Fixed", "author": "Nana-EC", "createdAt": "2020-10-24T01:58:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3Nzg2OA=="}], "type": "inlineReview", "revised_code": {"commit": "3d725e44c001381b00a6ca823909ba7727104c80", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/response/MirrorTokenBalancesResponse.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/response/MirrorTokenBalancesResponse.java\nindex a7eb72845..56549e9e5 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/response/MirrorTokenBalancesResponse.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/response/MirrorTokenBalancesResponse.java\n\n@@ -1,10 +1,5 @@\n package com.hedera.mirror.test.e2e.acceptance.response;\n \n-import java.util.List;\n-import lombok.Data;\n-\n-import com.hedera.mirror.test.e2e.acceptance.props.MirrorAccountBalance;\n-\n /*-\n  * \u200c\n  * Hedera Mirror Node\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3ODMzMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511178333", "bodyText": "Would prefer these all named as get or retrieve as they don't actual verify the response. The verification is done in the feature. Also don't like naming it after the transport mechanism. Recommend getAccount().", "author": "steven-sheehy", "createdAt": "2020-10-23T22:15:22Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java", "diffHunk": "@@ -118,46 +126,53 @@ public SubscriptionResponse subscribeToTopicAndRetrieveMessages(MirrorConsensusT\n         return subscriptionResponse;\n     }\n \n-    public ClientResponse verifyAccountRestEndpoint(String accountId, int lastCount) {\n-        log.debug(\"Verify account {} is returned by Mirror Node\", accountId);\n-        String endpoint = String.format(\"/api/v1/accounts/%s?order=desc&limit=%d\", accountId, lastCount);\n-        return verifyRestEndpoint(endpoint);\n+    public ClientResponse verifyAccountRestEndpoint(String accountId) {", "originalCommit": "021e3387f49088b4a69ed79c2d349c1f98e1e466", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIzNzk1NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511237955", "bodyText": "Yeah meant to change this. Will do", "author": "Nana-EC", "createdAt": "2020-10-24T01:32:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3ODMzMw=="}], "type": "inlineReview", "revised_code": {"commit": "3d725e44c001381b00a6ca823909ba7727104c80", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java\nindex 4319de785..0d4b10254 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java\n\n@@ -126,46 +128,54 @@ public class MirrorNodeClient {\n         return subscriptionResponse;\n     }\n \n-    public ClientResponse verifyAccountRestEndpoint(String accountId) {\n+    public ClientResponse getAccount(String accountId) {\n         log.debug(\"Verify account '{}' is returned by Mirror Node\", accountId);\n         // build /accounts?account.id=<accountId>\n-        return verifyRestEndpoint(\"/{endpoint}?{key}={accountId}\", ACCOUNTS_ENDPOINT, ACCOUNTS_ID_QUERY, accountId);\n+        return callRestEndpoint(\"/{endpoint}?{key}={accountId}\", ACCOUNTS_ENDPOINT, ACCOUNTS_ID_QUERY, accountId);\n     }\n \n-    public ClientResponse verifyAccountTransactionsRestEndpoint(String accountId, int lastCount) {\n+    public ClientResponse getAccountTransactions(String accountId, int lastCount) {\n         log.debug(\"Verify account '{}' is returned by Mirror Node\", accountId);\n         // build /accounts/<accountId>?order=desc&limit=50\n-        return verifyRestEndpoint(\"/{endpoint}/{accountId}?order=desc&limit={limit}\", ACCOUNTS_ENDPOINT, accountId,\n+        return callRestEndpoint(\"/{endpoint}/{accountId}?order=desc&limit={limit}\", ACCOUNTS_ENDPOINT, accountId,\n                 lastCount);\n     }\n \n-    public ClientResponse verifyAccountBalanceRestEndpoint(String accountId) {\n+    public MirrorBalancesResponse getAccountBalances(String accountId) {\n         log.debug(\"Verify balance for account '{}' is returned by Mirror Node\", accountId);\n         // build /balances?account.id=<accountId>\n-        return verifyRestEndpoint(\"/{endpoint}?{key}={accountId}\", BALANCES_ENDPOINT, ACCOUNTS_ID_QUERY, accountId);\n+        ClientResponse clientResponse = callRestEndpoint(\"/{endpoint}?{key}={accountId}\", BALANCES_ENDPOINT,\n+                ACCOUNTS_ID_QUERY, accountId);\n+        return clientResponse.bodyToMono(MirrorBalancesResponse.class)\n+                .block();\n     }\n \n-    public ClientResponse verifyTransactionRestEntity(String transactionId) {\n+    public MirrorTransactionsResponse getTransactions(String transactionId) {\n         log.debug(\"Verify transaction '{}' is returned by Mirror Node\", transactionId);\n         // build /transactions/<transactionId>\n-        return verifyRestEndpoint(\"/{endpoint}/{transactionId}\", TRANSACTIONS_ENDPOINT, transactionId);\n+        ClientResponse clientResponse = callRestEndpoint(\"/{endpoint}/{transactionId}\", TRANSACTIONS_ENDPOINT,\n+                transactionId);\n+        return clientResponse.bodyToMono(MirrorTransactionsResponse.class)\n+                .block();\n     }\n \n-    public ClientResponse verifyTokenInfoEndpoint(String tokenId) {\n+    public MirrorTokenResponse getTokenInfo(String tokenId) {\n         log.debug(\"Verify token '{}' is returned by Mirror Node\", tokenId);\n         // build /tokens/<tokenId>\n-        return verifyRestEndpoint(\"/{endpoint}/{tokenId}\", TOKENS_ENDPOINT, tokenId);\n+        ClientResponse clientResponse = callRestEndpoint(\"/{endpoint}/{tokenId}\", TOKENS_ENDPOINT, tokenId);\n+        return clientResponse.bodyToMono(MirrorTokenResponse.class)\n+                .block();\n     }\n \n-    public ClientResponse verifyTokenBalanceEndpoint(String tokenId, String accountId) {\n+    public ClientResponse getTokenBalances(String tokenId, String accountId) {\n         log.debug(\"Verify token balance for token '{}' and account '{}' is returned by Mirror Node\", tokenId,\n                 accountId);\n         // build /tokens/<tokenId>/balances?account.id=<accountId>\n-        return verifyRestEndpoint(\"/{endpoint}/{tokenId}/{path}?{key}={accountId}\", TOKENS_ENDPOINT, tokenId,\n+        return callRestEndpoint(\"/{endpoint}/{tokenId}/{path}?{key}={accountId}\", TOKENS_ENDPOINT, tokenId,\n                 BALANCES_ENDPOINT, ACCOUNTS_ID_QUERY, accountId);\n     }\n \n-    public ClientResponse verifyRestEndpoint(String uri, Object... uriVariables) {\n+    public ClientResponse callRestEndpoint(String uri, Object... uriVariables) {\n         ClientResponse response = webClient.get()\n                 .uri(uri, uriVariables)\n                 .accept(MediaType.APPLICATION_JSON)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3ODc1Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511178752", "bodyText": "Unused", "author": "steven-sheehy", "createdAt": "2020-10-23T22:17:02Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java", "diffHunk": "@@ -51,6 +45,20 @@\n     private final MirrorClient mirrorClient;\n     private final AcceptanceTestProperties acceptanceProps;\n \n+    @Autowired\n+    private WebClient webClient;\n+\n+    // REST ENDPOINTS\n+    private static final String API_V1 = \"/api/v1\";", "originalCommit": "021e3387f49088b4a69ed79c2d349c1f98e1e466", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTI1MDIzMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511250230", "bodyText": "Removed", "author": "Nana-EC", "createdAt": "2020-10-24T01:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3ODc1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3d725e44c001381b00a6ca823909ba7727104c80", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java\nindex 4319de785..0d4b10254 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java\n\n@@ -39,6 +39,9 @@ import com.hedera.hashgraph.sdk.mirror.MirrorClient;\n import com.hedera.hashgraph.sdk.mirror.MirrorConsensusTopicQuery;\n import com.hedera.hashgraph.sdk.mirror.MirrorSubscriptionHandle;\n import com.hedera.mirror.test.e2e.acceptance.config.AcceptanceTestProperties;\n+import com.hedera.mirror.test.e2e.acceptance.response.MirrorBalancesResponse;\n+import com.hedera.mirror.test.e2e.acceptance.response.MirrorTokenResponse;\n+import com.hedera.mirror.test.e2e.acceptance.response.MirrorTransactionsResponse;\n \n @Log4j2\n public class MirrorNodeClient {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3OTMyMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511179321", "bodyText": "I'm not a fan of exposing HTTP specific objects to the caller. Would prefer returning the domain object and throwing an exception if any error. But current approach is fine for now.", "author": "steven-sheehy", "createdAt": "2020-10-23T22:19:08Z", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java", "diffHunk": "@@ -118,46 +126,53 @@ public SubscriptionResponse subscribeToTopicAndRetrieveMessages(MirrorConsensusT\n         return subscriptionResponse;\n     }\n \n-    public ClientResponse verifyAccountRestEndpoint(String accountId, int lastCount) {\n-        log.debug(\"Verify account {} is returned by Mirror Node\", accountId);\n-        String endpoint = String.format(\"/api/v1/accounts/%s?order=desc&limit=%d\", accountId, lastCount);\n-        return verifyRestEndpoint(endpoint);\n+    public ClientResponse verifyAccountRestEndpoint(String accountId) {\n+        log.debug(\"Verify account '{}' is returned by Mirror Node\", accountId);\n+        // build /accounts?account.id=<accountId>\n+        return verifyRestEndpoint(\"/{endpoint}?{key}={accountId}\", ACCOUNTS_ENDPOINT, ACCOUNTS_ID_QUERY, accountId);\n+    }\n+\n+    public ClientResponse verifyAccountTransactionsRestEndpoint(String accountId, int lastCount) {", "originalCommit": "021e3387f49088b4a69ed79c2d349c1f98e1e466", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTI1MDE5MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511250190", "bodyText": "Initially when it was just text checking using the status was useful.\nWith the POJO mapping checking for null covers non 200 status.\nUpdated", "author": "Nana-EC", "createdAt": "2020-10-24T01:58:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3OTMyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d725e44c001381b00a6ca823909ba7727104c80", "chunk": "diff --git a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java\nindex 4319de785..0d4b10254 100644\n--- a/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java\n+++ b/hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java\n\n@@ -126,46 +128,54 @@ public class MirrorNodeClient {\n         return subscriptionResponse;\n     }\n \n-    public ClientResponse verifyAccountRestEndpoint(String accountId) {\n+    public ClientResponse getAccount(String accountId) {\n         log.debug(\"Verify account '{}' is returned by Mirror Node\", accountId);\n         // build /accounts?account.id=<accountId>\n-        return verifyRestEndpoint(\"/{endpoint}?{key}={accountId}\", ACCOUNTS_ENDPOINT, ACCOUNTS_ID_QUERY, accountId);\n+        return callRestEndpoint(\"/{endpoint}?{key}={accountId}\", ACCOUNTS_ENDPOINT, ACCOUNTS_ID_QUERY, accountId);\n     }\n \n-    public ClientResponse verifyAccountTransactionsRestEndpoint(String accountId, int lastCount) {\n+    public ClientResponse getAccountTransactions(String accountId, int lastCount) {\n         log.debug(\"Verify account '{}' is returned by Mirror Node\", accountId);\n         // build /accounts/<accountId>?order=desc&limit=50\n-        return verifyRestEndpoint(\"/{endpoint}/{accountId}?order=desc&limit={limit}\", ACCOUNTS_ENDPOINT, accountId,\n+        return callRestEndpoint(\"/{endpoint}/{accountId}?order=desc&limit={limit}\", ACCOUNTS_ENDPOINT, accountId,\n                 lastCount);\n     }\n \n-    public ClientResponse verifyAccountBalanceRestEndpoint(String accountId) {\n+    public MirrorBalancesResponse getAccountBalances(String accountId) {\n         log.debug(\"Verify balance for account '{}' is returned by Mirror Node\", accountId);\n         // build /balances?account.id=<accountId>\n-        return verifyRestEndpoint(\"/{endpoint}?{key}={accountId}\", BALANCES_ENDPOINT, ACCOUNTS_ID_QUERY, accountId);\n+        ClientResponse clientResponse = callRestEndpoint(\"/{endpoint}?{key}={accountId}\", BALANCES_ENDPOINT,\n+                ACCOUNTS_ID_QUERY, accountId);\n+        return clientResponse.bodyToMono(MirrorBalancesResponse.class)\n+                .block();\n     }\n \n-    public ClientResponse verifyTransactionRestEntity(String transactionId) {\n+    public MirrorTransactionsResponse getTransactions(String transactionId) {\n         log.debug(\"Verify transaction '{}' is returned by Mirror Node\", transactionId);\n         // build /transactions/<transactionId>\n-        return verifyRestEndpoint(\"/{endpoint}/{transactionId}\", TRANSACTIONS_ENDPOINT, transactionId);\n+        ClientResponse clientResponse = callRestEndpoint(\"/{endpoint}/{transactionId}\", TRANSACTIONS_ENDPOINT,\n+                transactionId);\n+        return clientResponse.bodyToMono(MirrorTransactionsResponse.class)\n+                .block();\n     }\n \n-    public ClientResponse verifyTokenInfoEndpoint(String tokenId) {\n+    public MirrorTokenResponse getTokenInfo(String tokenId) {\n         log.debug(\"Verify token '{}' is returned by Mirror Node\", tokenId);\n         // build /tokens/<tokenId>\n-        return verifyRestEndpoint(\"/{endpoint}/{tokenId}\", TOKENS_ENDPOINT, tokenId);\n+        ClientResponse clientResponse = callRestEndpoint(\"/{endpoint}/{tokenId}\", TOKENS_ENDPOINT, tokenId);\n+        return clientResponse.bodyToMono(MirrorTokenResponse.class)\n+                .block();\n     }\n \n-    public ClientResponse verifyTokenBalanceEndpoint(String tokenId, String accountId) {\n+    public ClientResponse getTokenBalances(String tokenId, String accountId) {\n         log.debug(\"Verify token balance for token '{}' and account '{}' is returned by Mirror Node\", tokenId,\n                 accountId);\n         // build /tokens/<tokenId>/balances?account.id=<accountId>\n-        return verifyRestEndpoint(\"/{endpoint}/{tokenId}/{path}?{key}={accountId}\", TOKENS_ENDPOINT, tokenId,\n+        return callRestEndpoint(\"/{endpoint}/{tokenId}/{path}?{key}={accountId}\", TOKENS_ENDPOINT, tokenId,\n                 BALANCES_ENDPOINT, ACCOUNTS_ID_QUERY, accountId);\n     }\n \n-    public ClientResponse verifyRestEndpoint(String uri, Object... uriVariables) {\n+    public ClientResponse callRestEndpoint(String uri, Object... uriVariables) {\n         ClientResponse response = webClient.get()\n                 .uri(uri, uriVariables)\n                 .accept(MediaType.APPLICATION_JSON)\n"}}, {"oid": "3d725e44c001381b00a6ca823909ba7727104c80", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3d725e44c001381b00a6ca823909ba7727104c80", "message": "Renamed some functions and fixed some strings\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>", "committedDate": "2020-10-24T01:57:16Z", "type": "commit"}]}