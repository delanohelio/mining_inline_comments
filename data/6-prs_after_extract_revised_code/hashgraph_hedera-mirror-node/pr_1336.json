{"pr_number": 1336, "pr_title": "Another attempt to fix monitor publishing", "pr_createdAt": "2020-12-08T22:38:59Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/1336", "timeline": [{"oid": "15d2724e7d8274bc4338e62d5b5f84d15af208d8", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/15d2724e7d8274bc4338e62d5b5f84d15af208d8", "message": "Another attempt to fix monitor publishing\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-12-08T22:32:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4MTY2MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1336#discussion_r538881660", "bodyText": "q: does the description need to be updated with how you're using sequential here?\nWhen it comes to the overhead/management of the simple but involving steps it's good to note the aim/intent of the reactive flow we intend so we prevent regressions.", "author": "Nana-EC", "createdAt": "2020-12-08T23:18:11Z", "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/config/MonitorConfiguration.java", "diffHunk": "@@ -63,14 +63,14 @@\n     Disposable publishSubscribe() {\n         return Flux.<PublishRequest>generate(sink -> sink.next(transactionGenerator.next()))\n                 .retry()\n-                .filter(Objects::nonNull)\n-                .doFinally(s -> log.warn(\"Stopped after {} signal\", s))\n                 .subscribeOn(Schedulers.single())\n                 .parallel(publishProperties.getConnections())\n                 .runOn(Schedulers.newParallel(\"publisher\", publishProperties.getConnections()))\n                 .map(transactionPublisher::publish)\n-                .filter(Objects::nonNull)\n-                .doOnError(t -> log.error(\"Error during publish/subscribe flow: \", t))\n+                .sequential()", "originalCommit": "15d2724e7d8274bc4338e62d5b5f84d15af208d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5NTA0NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1336#discussion_r538895044", "bodyText": "Not really. It's not actually sequential as in single threaded, it's just converting from a ParallelFlux back to a Flux. Each subscriber is still using the publisher threads to do some of its work. But both subscribers actually can have other threads do the work like netty, grpc or retry threads.", "author": "steven-sheehy", "createdAt": "2020-12-08T23:46:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4MTY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5OTE5Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1336#discussion_r538899192", "bodyText": "Open to suggestions though, but can't think of anything myself.", "author": "steven-sheehy", "createdAt": "2020-12-08T23:56:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4MTY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk0MDQzMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1336#discussion_r538940432", "bodyText": "Gotcha. That's pretty much the intention of the method. Wasn't sure if it was more complex than that or had additional benefits in its use.", "author": "Nana-EC", "createdAt": "2020-12-09T01:42:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4MTY2MA=="}], "type": "inlineReview", "revised_code": {"commit": "0b2b0fb51dfb78fe9295b0ca1b1c738cb817c766", "chunk": "diff --git a/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/config/MonitorConfiguration.java b/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/config/MonitorConfiguration.java\nindex ada06c90..c3bd4091 100644\n--- a/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/config/MonitorConfiguration.java\n+++ b/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/config/MonitorConfiguration.java\n\n@@ -69,8 +69,9 @@ class MonitorConfiguration {\n                 .map(transactionPublisher::publish)\n                 .sequential()\n                 .onErrorContinue(PublishException.class, (t, r) -> {})\n-                .onErrorContinue((t, r) -> log.error(\"Unknown error during publish/subscribe flow: {}\", t))\n                 .doFinally(s -> log.warn(\"Stopped after {} signal\", s))\n+                .doOnError(t -> log.error(\"Unexpected error during publish/subscribe flow:\", t))\n+                .doOnSubscribe(s -> log.info(\"Starting publisher flow\"))\n                 .subscribe(subscriber::onPublish);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkwMzk0MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1336#discussion_r538903940", "bodyText": "from IDEA hint: should remove {} in the message string\nthe second onErrorContinue will swallow all Throwable other than PublishException which is taken care of in the first onErrorContinue. Is it intended? I saw in PublishMetrics.java, for LocalValidationException, the error message \"Local error. Halting thread\" hints something different.", "author": "xin-hedera", "createdAt": "2020-12-09T00:08:05Z", "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/config/MonitorConfiguration.java", "diffHunk": "@@ -63,14 +63,14 @@\n     Disposable publishSubscribe() {\n         return Flux.<PublishRequest>generate(sink -> sink.next(transactionGenerator.next()))\n                 .retry()\n-                .filter(Objects::nonNull)\n-                .doFinally(s -> log.warn(\"Stopped after {} signal\", s))\n                 .subscribeOn(Schedulers.single())\n                 .parallel(publishProperties.getConnections())\n                 .runOn(Schedulers.newParallel(\"publisher\", publishProperties.getConnections()))\n                 .map(transactionPublisher::publish)\n-                .filter(Objects::nonNull)\n-                .doOnError(t -> log.error(\"Error during publish/subscribe flow: \", t))\n+                .sequential()\n+                .onErrorContinue(PublishException.class, (t, r) -> {})\n+                .onErrorContinue((t, r) -> log.error(\"Unknown error during publish/subscribe flow: {}\", t))", "originalCommit": "15d2724e7d8274bc4338e62d5b5f84d15af208d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAyNzA5MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1336#discussion_r539027091", "bodyText": "Removed {}. Log4j2 allows it either way and will implicitly print stacktrace if you leave it off.\nTrue, shouldn't continue if LocalValidationException. I've adjusted it to continue only for PublishException for now as that's the only thing I know for sure we should resume. All others will be logged and terminate the flux.", "author": "steven-sheehy", "createdAt": "2020-12-09T05:49:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkwMzk0MA=="}], "type": "inlineReview", "revised_code": {"commit": "0b2b0fb51dfb78fe9295b0ca1b1c738cb817c766", "chunk": "diff --git a/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/config/MonitorConfiguration.java b/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/config/MonitorConfiguration.java\nindex ada06c90..c3bd4091 100644\n--- a/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/config/MonitorConfiguration.java\n+++ b/hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/config/MonitorConfiguration.java\n\n@@ -69,8 +69,9 @@ class MonitorConfiguration {\n                 .map(transactionPublisher::publish)\n                 .sequential()\n                 .onErrorContinue(PublishException.class, (t, r) -> {})\n-                .onErrorContinue((t, r) -> log.error(\"Unknown error during publish/subscribe flow: {}\", t))\n                 .doFinally(s -> log.warn(\"Stopped after {} signal\", s))\n+                .doOnError(t -> log.error(\"Unexpected error during publish/subscribe flow:\", t))\n+                .doOnSubscribe(s -> log.info(\"Starting publisher flow\"))\n                 .subscribe(subscriber::onPublish);\n     }\n }\n"}}, {"oid": "0b2b0fb51dfb78fe9295b0ca1b1c738cb817c766", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/0b2b0fb51dfb78fe9295b0ca1b1c738cb817c766", "message": "Address review feedback\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-12-09T05:46:24Z", "type": "commit"}]}