{"pr_number": 1055, "pr_title": "Add Sql in V2, remaining some test error", "pr_createdAt": "2020-02-27T04:34:08Z", "pr_url": "https://github.com/Azure/azure-libraries-for-java/pull/1055", "timeline": [{"oid": "91e1147e872cc86e15bddd18c3c7294ec9813fb8", "url": "https://github.com/Azure/azure-libraries-for-java/commit/91e1147e872cc86e15bddd18c3c7294ec9813fb8", "message": "feat: copy sql from track 1", "committedDate": "2020-02-20T04:31:36Z", "type": "commit"}, {"oid": "f4c08d252b2e1d9d3492bd7b2717387f646a844d", "url": "https://github.com/Azure/azure-libraries-for-java/commit/f4c08d252b2e1d9d3492bd7b2717387f646a844d", "message": "feat: generate sql", "committedDate": "2020-02-21T11:36:26Z", "type": "commit"}, {"oid": "8fb036469e4fbb495e2bb4162d66e6475cf7b7bf", "url": "https://github.com/Azure/azure-libraries-for-java/commit/8fb036469e4fbb495e2bb4162d66e6475cf7b7bf", "message": "update pom.xml", "committedDate": "2020-02-21T11:36:33Z", "type": "commit"}, {"oid": "dd91e9ce9f09537b9d57fbe023eb2b5386c82279", "url": "https://github.com/Azure/azure-libraries-for-java/commit/dd91e9ce9f09537b9d57fbe023eb2b5386c82279", "message": "fix: database inner cannot has method named import", "committedDate": "2020-02-21T11:36:33Z", "type": "commit"}, {"oid": "03d6eb52c65f26135139d76a8a1f5f309b6d3f86", "url": "https://github.com/Azure/azure-libraries-for-java/commit/03d6eb52c65f26135139d76a8a1f5f309b6d3f86", "message": "fix: global replace for some useless code", "committedDate": "2020-02-21T11:36:33Z", "type": "commit"}, {"oid": "7b46a76d09e1739349293159fc2e265d79c5956f", "url": "https://github.com/Azure/azure-libraries-for-java/commit/7b46a76d09e1739349293159fc2e265d79c5956f", "message": "fix: type error", "committedDate": "2020-02-21T11:36:34Z", "type": "commit"}, {"oid": "b70bb2da49d28300419cfdc9f324c1714e53acfc", "url": "https://github.com/Azure/azure-libraries-for-java/commit/b70bb2da49d28300419cfdc9f324c1714e53acfc", "message": "fix: regenerate with track1 naming", "committedDate": "2020-02-21T11:36:34Z", "type": "commit"}, {"oid": "aa025ca6a6adf46c119555034715ecf033f1afba", "url": "https://github.com/Azure/azure-libraries-for-java/commit/aa025ca6a6adf46c119555034715ecf033f1afba", "message": "fix: change import to importMethod", "committedDate": "2020-02-21T11:36:35Z", "type": "commit"}, {"oid": "f97699b0d85024b55684f46d1e502d18ccf2cafa", "url": "https://github.com/Azure/azure-libraries-for-java/commit/f97699b0d85024b55684f46d1e502d18ccf2cafa", "message": "fix: compile error, with TODO left", "committedDate": "2020-02-21T11:36:35Z", "type": "commit"}, {"oid": "b2377f227822529bfb26ce4b62ea335af3800529", "url": "https://github.com/Azure/azure-libraries-for-java/commit/b2377f227822529bfb26ce4b62ea335af3800529", "message": "feat: refine to sql-v3 logic", "committedDate": "2020-02-24T08:33:57Z", "type": "commit"}, {"oid": "f9707b52720a5ea07cbd9a4420246ad9477713c4", "url": "https://github.com/Azure/azure-libraries-for-java/commit/f9707b52720a5ea07cbd9a4420246ad9477713c4", "message": "fix: test compile error", "committedDate": "2020-02-24T08:41:06Z", "type": "commit"}, {"oid": "3b50230d2cc572038bd3b5ecc6e14cf839d61923", "url": "https://github.com/Azure/azure-libraries-for-java/commit/3b50230d2cc572038bd3b5ecc6e14cf839d61923", "message": "fix: remove unused dependency", "committedDate": "2020-02-25T02:20:16Z", "type": "commit"}, {"oid": "351e2d193101e20e4f13747487cb61c2bf09755e", "url": "https://github.com/Azure/azure-libraries-for-java/commit/351e2d193101e20e4f13747487cb61c2bf09755e", "message": "feat: upgrade junit to 5", "committedDate": "2020-02-25T02:20:23Z", "type": "commit"}, {"oid": "a88f783dade096c36c36bb107dbab6a7c9e35233", "url": "https://github.com/Azure/azure-libraries-for-java/commit/a88f783dade096c36c36bb107dbab6a7c9e35233", "message": "fix: running error", "committedDate": "2020-02-25T03:23:19Z", "type": "commit"}, {"oid": "bfacfdf5428d4f3fceafcfa93aa52e0203d05d88", "url": "https://github.com/Azure/azure-libraries-for-java/commit/bfacfdf5428d4f3fceafcfa93aa52e0203d05d88", "message": "fix: elastic pool id and sku name", "committedDate": "2020-02-25T06:21:31Z", "type": "commit"}, {"oid": "5fabeac0ad1b62d1b6c7919758be88086edd00ac", "url": "https://github.com/Azure/azure-libraries-for-java/commit/5fabeac0ad1b62d1b6c7919758be88086edd00ac", "message": "Merge branch 'vnext' into vnext-sql-2", "committedDate": "2020-02-25T06:57:06Z", "type": "commit"}, {"oid": "51131aab268b2e797fd70245e2af663d8c11fed8", "url": "https://github.com/Azure/azure-libraries-for-java/commit/51131aab268b2e797fd70245e2af663d8c11fed8", "message": "fix: some test case error", "committedDate": "2020-02-27T04:25:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkxODQxNg==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1055#discussion_r384918416", "bodyText": "Might use Flux.fromIterable(storageAccountKeys).singleOrEmpty() better.", "author": "xseeseesee", "createdAt": "2020-02-27T05:21:15Z", "path": "azure-mgmt-sql/src/main/java/com/azure/management/sql/implementation/SqlDatabaseExportRequestImpl.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License. See License.txt in the project root for\n+ * license information.\n+ */\n+package com.azure.management.sql.implementation;\n+\n+import com.azure.management.resources.fluentcore.dag.FunctionalTaskItem;\n+import com.azure.management.resources.fluentcore.model.Creatable;\n+import com.azure.management.resources.fluentcore.model.Indexable;\n+import com.azure.management.resources.fluentcore.model.implementation.ExecutableImpl;\n+import com.azure.management.sql.AuthenticationType;\n+import com.azure.management.sql.ExportRequest;\n+import com.azure.management.sql.SqlDatabase;\n+import com.azure.management.sql.SqlDatabaseExportRequest;\n+import com.azure.management.sql.SqlDatabaseImportExportResponse;\n+import com.azure.management.sql.StorageKeyType;\n+import com.azure.management.storage.StorageAccount;\n+import com.microsoft.azure.storage.CloudStorageAccount;\n+import com.microsoft.azure.storage.StorageException;\n+import com.microsoft.azure.storage.blob.CloudBlobClient;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URISyntaxException;\n+import java.security.InvalidKeyException;\n+import java.util.Objects;\n+\n+/**\n+ * Implementation for SqlDatabaseExportRequest.\n+ */\n+public class SqlDatabaseExportRequestImpl extends ExecutableImpl<SqlDatabaseImportExportResponse>\n+    implements\n+        SqlDatabaseExportRequest,\n+        SqlDatabaseExportRequest.SqlDatabaseExportRequestDefinition {\n+\n+    private final SqlDatabaseImpl sqlDatabase;\n+    private final SqlServerManager sqlServerManager;\n+    private ExportRequest inner;\n+\n+    SqlDatabaseExportRequestImpl(SqlDatabaseImpl sqlDatabase, SqlServerManager sqlServerManager) {\n+        this.sqlDatabase = sqlDatabase;\n+        this.sqlServerManager = sqlServerManager;\n+        this.inner = new ExportRequest();\n+    }\n+\n+    @Override\n+    public SqlDatabase parent() {\n+        return this.sqlDatabase;\n+    }\n+\n+    @Override\n+    public ExportRequest inner() {\n+        return this.inner;\n+    }\n+\n+    @Override\n+    public Mono<SqlDatabaseImportExportResponse> executeWorkAsync() {\n+        return this.sqlServerManager.inner().databases()\n+            .exportAsync(this.sqlDatabase.resourceGroupName, this.sqlDatabase.sqlServerName, this.sqlDatabase.name(), this.inner())\n+            .map(importExportResponseInner -> new SqlDatabaseImportExportResponseImpl(importExportResponseInner));\n+    }\n+\n+    @Override\n+    public SqlDatabaseExportRequestImpl exportTo(String storageUri) {\n+        if (this.inner == null) {\n+            this.inner = new ExportRequest();\n+        }\n+        this.inner.withStorageUri(storageUri);\n+        return this;\n+    }\n+\n+    private Mono<Indexable> getOrCreateStorageAccountContainer(final StorageAccount storageAccount, final String containerName, final String fileName, final FunctionalTaskItem.Context context) {\n+        final SqlDatabaseExportRequestImpl self = this;\n+        return storageAccount.getKeysAsync()\n+            .flatMap(storageAccountKeys -> Mono.justOrEmpty(storageAccountKeys.stream().findFirst()))", "originalCommit": "b2377f227822529bfb26ce4b62ea335af3800529", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyMTcxOQ==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1055#discussion_r384921719", "bodyText": "Not sure if we plan to keep consistency of the return types with PagedIterable/PagedFlux for all modules.", "author": "xseeseesee", "createdAt": "2020-02-27T05:35:46Z", "path": "azure-mgmt-sql/src/main/java/com/azure/management/sql/implementation/SqlDatabaseImpl.java", "diffHunk": "@@ -0,0 +1,932 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License. See License.txt in the project root for\n+ * license information.\n+ */\n+\n+package com.azure.management.sql.implementation;\n+\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.management.resources.fluentcore.arm.Region;\n+import com.azure.management.resources.fluentcore.arm.ResourceId;\n+import com.azure.management.resources.fluentcore.arm.ResourceUtils;\n+import com.azure.management.resources.fluentcore.arm.models.implementation.ExternalChildResourceImpl;\n+import com.azure.management.resources.fluentcore.dag.FunctionalTaskItem;\n+import com.azure.management.resources.fluentcore.dag.TaskGroup;\n+import com.azure.management.resources.fluentcore.model.Creatable;\n+import com.azure.management.resources.fluentcore.model.Indexable;\n+import com.azure.management.sql.AuthenticationType;\n+import com.azure.management.sql.CreateMode;\n+import com.azure.management.sql.DatabaseEdition;\n+import com.azure.management.sql.DatabaseMetric;\n+import com.azure.management.sql.DatabaseStatus;\n+import com.azure.management.sql.DatabaseUpdate;\n+import com.azure.management.sql.ImportRequest;\n+import com.azure.management.sql.ReplicationLink;\n+import com.azure.management.sql.RestorePoint;\n+import com.azure.management.sql.SampleName;\n+import com.azure.management.sql.ServiceObjectiveName;\n+import com.azure.management.sql.ServiceTierAdvisor;\n+import com.azure.management.sql.Sku;\n+import com.azure.management.sql.SqlDatabase;\n+import com.azure.management.sql.SqlDatabaseAutomaticTuning;\n+import com.azure.management.sql.SqlDatabaseBasicStorage;\n+import com.azure.management.sql.SqlDatabaseMetric;\n+import com.azure.management.sql.SqlDatabaseMetricDefinition;\n+import com.azure.management.sql.SqlDatabaseOperations;\n+import com.azure.management.sql.SqlDatabasePremiumServiceObjective;\n+import com.azure.management.sql.SqlDatabasePremiumStorage;\n+import com.azure.management.sql.SqlDatabaseStandardServiceObjective;\n+import com.azure.management.sql.SqlDatabaseStandardStorage;\n+import com.azure.management.sql.SqlDatabaseThreatDetectionPolicy;\n+import com.azure.management.sql.SqlDatabaseUsageMetric;\n+import com.azure.management.sql.SqlElasticPool;\n+import com.azure.management.sql.SqlRestorableDroppedDatabase;\n+import com.azure.management.sql.SqlServer;\n+import com.azure.management.sql.SqlSyncGroupOperations;\n+import com.azure.management.sql.SqlWarehouse;\n+import com.azure.management.sql.StorageKeyType;\n+import com.azure.management.sql.TransparentDataEncryption;\n+import com.azure.management.sql.models.DatabaseAutomaticTuningInner;\n+import com.azure.management.sql.models.DatabaseInner;\n+import com.azure.management.sql.models.DatabaseSecurityAlertPolicyInner;\n+import com.azure.management.sql.models.DatabaseUsageInner;\n+import com.azure.management.sql.models.MetricDefinitionInner;\n+import com.azure.management.sql.models.MetricInner;\n+import com.azure.management.sql.models.ReplicationLinkInner;\n+import com.azure.management.sql.models.RestorePointInner;\n+import com.azure.management.sql.models.ServiceTierAdvisorInner;\n+import com.azure.management.sql.models.TransparentDataEncryptionInner;\n+import com.azure.management.storage.StorageAccount;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Implementation for SqlDatabase and its parent interfaces.\n+ */\n+class SqlDatabaseImpl\n+    extends\n+        ExternalChildResourceImpl<SqlDatabase, DatabaseInner, SqlServerImpl, SqlServer>\n+    implements\n+        SqlDatabase,\n+        SqlDatabase.SqlDatabaseDefinition<SqlServer.DefinitionStages.WithCreate>,\n+        SqlDatabase.DefinitionStages.WithExistingDatabaseAfterElasticPool<SqlServer.DefinitionStages.WithCreate>,\n+        SqlDatabase.DefinitionStages.WithStorageKeyAfterElasticPool<SqlServer.DefinitionStages.WithCreate>,\n+        SqlDatabase.DefinitionStages.WithAuthenticationAfterElasticPool<SqlServer.DefinitionStages.WithCreate>,\n+        SqlDatabase.DefinitionStages.WithRestorePointDatabaseAfterElasticPool<SqlServer.DefinitionStages.WithCreate>,\n+        SqlDatabase.Update,\n+        SqlDatabaseOperations.DefinitionStages.WithExistingDatabaseAfterElasticPool,\n+        SqlDatabaseOperations.DefinitionStages.WithStorageKeyAfterElasticPool,\n+        SqlDatabaseOperations.DefinitionStages.WithAuthenticationAfterElasticPool,\n+        SqlDatabaseOperations.DefinitionStages.WithRestorePointDatabaseAfterElasticPool,\n+        SqlDatabaseOperations.DefinitionStages.WithCreateAfterElasticPoolOptions,\n+        SqlDatabaseOperations.SqlDatabaseOperationsDefinition {\n+\n+    private SqlElasticPoolsAsExternalChildResourcesImpl sqlElasticPools;\n+\n+    protected SqlServerManager sqlServerManager;\n+    protected String resourceGroupName;\n+    protected String sqlServerName;\n+    protected String sqlServerLocation;\n+    private boolean isPatchUpdate;\n+    private ImportRequest importRequestInner;\n+\n+    private SqlSyncGroupOperationsImpl syncGroups;\n+\n+\n+    /**\n+     * Creates an instance of external child resource in-memory.\n+     *\n+     * @param name        the name of this external child resource\n+     * @param parent      reference to the parent of this external child resource\n+     * @param innerObject reference to the inner object representing this external child resource\n+     * @param sqlServerManager reference to the SQL server manager that accesses firewall rule operations\n+     */\n+    SqlDatabaseImpl(String name, SqlServerImpl parent, DatabaseInner innerObject, SqlServerManager sqlServerManager) {\n+        super(name, parent, innerObject);\n+\n+        Objects.requireNonNull(parent);\n+        Objects.requireNonNull(sqlServerManager);\n+        this.sqlServerManager = sqlServerManager;\n+        this.resourceGroupName = parent.resourceGroupName();\n+        this.sqlServerName = parent.name();\n+        this.sqlServerLocation = parent.regionName();\n+\n+        this.sqlElasticPools = null;\n+        this.isPatchUpdate = false;\n+        this.importRequestInner = null;\n+    }\n+\n+    /**\n+     * Creates an instance of external child resource in-memory.\n+     *\n+     * @param resourceGroupName the resource group name\n+     * @param sqlServerName the parent SQL server name\n+     * @param sqlServerLocation the parent SQL server location\n+     * @param name        the name of this external child resource\n+     * @param innerObject reference to the inner object representing this external child resource\n+     * @param sqlServerManager reference to the SQL server manager that accesses firewall rule operations\n+     */\n+    SqlDatabaseImpl(String resourceGroupName, String sqlServerName, String sqlServerLocation, String name, DatabaseInner innerObject, SqlServerManager sqlServerManager) {\n+        super(name, null, innerObject);\n+        Objects.requireNonNull(sqlServerManager);\n+        this.sqlServerManager = sqlServerManager;\n+        this.resourceGroupName = resourceGroupName;\n+        this.sqlServerName = sqlServerName;\n+        this.sqlServerLocation = sqlServerLocation;\n+\n+        this.sqlElasticPools = new SqlElasticPoolsAsExternalChildResourcesImpl(this.sqlServerManager, \"SqlElasticPool\");\n+        this.isPatchUpdate = false;\n+        this.importRequestInner = null;\n+    }\n+\n+    /**\n+     * Creates an instance of external child resource in-memory.\n+     *\n+     * @param parentSqlElasticPool the parent SqlElasticPool this database belongs to\n+     * @param name        the name of this external child resource\n+     * @param innerObject reference to the inner object representing this external child resource\n+     * @param sqlServerManager reference to the SQL server manager that accesses firewall rule operations\n+     */\n+    SqlDatabaseImpl(TaskGroup.HasTaskGroup parentSqlElasticPool, String name, DatabaseInner innerObject, SqlServerManager sqlServerManager) {\n+        super(name, null, innerObject);\n+        Objects.requireNonNull(parentSqlElasticPool);\n+        Objects.requireNonNull(sqlServerManager);\n+        this.sqlServerManager = sqlServerManager;\n+\n+        this.sqlElasticPools = new SqlElasticPoolsAsExternalChildResourcesImpl(this.sqlServerManager, \"SqlElasticPool\");\n+        this.isPatchUpdate = false;\n+        this.importRequestInner = null;\n+    }\n+\n+    @Override\n+    public String id() {\n+        return this.inner().getId();\n+    }\n+\n+    @Override\n+    public String resourceGroupName() {\n+        return this.resourceGroupName;\n+    }\n+\n+    @Override\n+    public String sqlServerName() {\n+        return this.sqlServerName;\n+    }\n+\n+    @Override\n+    public String collation() {\n+        return this.inner().collation();\n+    }\n+\n+    @Override\n+    public OffsetDateTime creationDate() {\n+        return this.inner().creationDate();\n+    }\n+\n+    @Override\n+    public String currentServiceObjectiveName() {\n+        return this.inner().currentServiceObjectiveName();\n+    }\n+\n+    @Override\n+    public String databaseId() {\n+        return this.inner().databaseId().toString();\n+    }\n+\n+    @Override\n+    public OffsetDateTime earliestRestoreDate() {\n+        return this.inner().earliestRestoreDate();\n+    }\n+\n+    @Override\n+    public DatabaseEdition edition() {\n+        return DatabaseEdition.fromString(this.inner().sku().tier());\n+    }\n+\n+    @Override\n+    public long maxSizeBytes() {\n+        return Long.valueOf(this.inner().maxSizeBytes());\n+    }\n+\n+    @Override\n+    public String requestedServiceObjectiveName() {\n+        if (this.inner().sku() != null)\n+            return this.inner().sku().name();\n+        return this.inner().requestedServiceObjectiveName();\n+    }\n+\n+    @Override\n+    public DatabaseStatus status() {\n+        return this.inner().status();\n+    }\n+\n+    @Override\n+    public String elasticPoolId() {\n+        return this.inner().elasticPoolId();\n+    }\n+\n+\n+    @Override\n+    public String elasticPoolName() {\n+        return ResourceUtils.nameFromResourceId(this.inner().elasticPoolId());\n+    }\n+\n+    @Override\n+    public String defaultSecondaryLocation() {\n+        return this.inner().defaultSecondaryLocation();\n+    }\n+\n+    @Override\n+    public boolean isDataWarehouse() {\n+        return this.edition().toString().equalsIgnoreCase(DatabaseEdition.DATA_WAREHOUSE.toString());\n+    }\n+\n+    @Override\n+    public SqlWarehouse asWarehouse() {\n+        if (this.isDataWarehouse()) {\n+            if (this.parent() != null) {\n+                return new SqlWarehouseImpl(this.name(), this.parent(), this.inner(), this.sqlServerManager);\n+            } else {\n+                return new SqlWarehouseImpl(this.resourceGroupName, this.sqlServerName, this.sqlServerLocation, this.name(), this.inner(), this.sqlServerManager);\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public List<RestorePoint> listRestorePoints() {", "originalCommit": "b2377f227822529bfb26ce4b62ea335af3800529", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyNDE1MQ==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1055#discussion_r384924151", "bodyText": "Just share sample to convert PagedFlux to map. This is optional.", "author": "xseeseesee", "createdAt": "2020-02-27T05:46:27Z", "path": "azure-mgmt-sql/src/main/java/com/azure/management/sql/implementation/SqlDatabaseImpl.java", "diffHunk": "@@ -0,0 +1,932 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License. See License.txt in the project root for\n+ * license information.\n+ */\n+\n+package com.azure.management.sql.implementation;\n+\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.management.resources.fluentcore.arm.Region;\n+import com.azure.management.resources.fluentcore.arm.ResourceId;\n+import com.azure.management.resources.fluentcore.arm.ResourceUtils;\n+import com.azure.management.resources.fluentcore.arm.models.implementation.ExternalChildResourceImpl;\n+import com.azure.management.resources.fluentcore.dag.FunctionalTaskItem;\n+import com.azure.management.resources.fluentcore.dag.TaskGroup;\n+import com.azure.management.resources.fluentcore.model.Creatable;\n+import com.azure.management.resources.fluentcore.model.Indexable;\n+import com.azure.management.sql.AuthenticationType;\n+import com.azure.management.sql.CreateMode;\n+import com.azure.management.sql.DatabaseEdition;\n+import com.azure.management.sql.DatabaseMetric;\n+import com.azure.management.sql.DatabaseStatus;\n+import com.azure.management.sql.DatabaseUpdate;\n+import com.azure.management.sql.ImportRequest;\n+import com.azure.management.sql.ReplicationLink;\n+import com.azure.management.sql.RestorePoint;\n+import com.azure.management.sql.SampleName;\n+import com.azure.management.sql.ServiceObjectiveName;\n+import com.azure.management.sql.ServiceTierAdvisor;\n+import com.azure.management.sql.Sku;\n+import com.azure.management.sql.SqlDatabase;\n+import com.azure.management.sql.SqlDatabaseAutomaticTuning;\n+import com.azure.management.sql.SqlDatabaseBasicStorage;\n+import com.azure.management.sql.SqlDatabaseMetric;\n+import com.azure.management.sql.SqlDatabaseMetricDefinition;\n+import com.azure.management.sql.SqlDatabaseOperations;\n+import com.azure.management.sql.SqlDatabasePremiumServiceObjective;\n+import com.azure.management.sql.SqlDatabasePremiumStorage;\n+import com.azure.management.sql.SqlDatabaseStandardServiceObjective;\n+import com.azure.management.sql.SqlDatabaseStandardStorage;\n+import com.azure.management.sql.SqlDatabaseThreatDetectionPolicy;\n+import com.azure.management.sql.SqlDatabaseUsageMetric;\n+import com.azure.management.sql.SqlElasticPool;\n+import com.azure.management.sql.SqlRestorableDroppedDatabase;\n+import com.azure.management.sql.SqlServer;\n+import com.azure.management.sql.SqlSyncGroupOperations;\n+import com.azure.management.sql.SqlWarehouse;\n+import com.azure.management.sql.StorageKeyType;\n+import com.azure.management.sql.TransparentDataEncryption;\n+import com.azure.management.sql.models.DatabaseAutomaticTuningInner;\n+import com.azure.management.sql.models.DatabaseInner;\n+import com.azure.management.sql.models.DatabaseSecurityAlertPolicyInner;\n+import com.azure.management.sql.models.DatabaseUsageInner;\n+import com.azure.management.sql.models.MetricDefinitionInner;\n+import com.azure.management.sql.models.MetricInner;\n+import com.azure.management.sql.models.ReplicationLinkInner;\n+import com.azure.management.sql.models.RestorePointInner;\n+import com.azure.management.sql.models.ServiceTierAdvisorInner;\n+import com.azure.management.sql.models.TransparentDataEncryptionInner;\n+import com.azure.management.storage.StorageAccount;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Implementation for SqlDatabase and its parent interfaces.\n+ */\n+class SqlDatabaseImpl\n+    extends\n+        ExternalChildResourceImpl<SqlDatabase, DatabaseInner, SqlServerImpl, SqlServer>\n+    implements\n+        SqlDatabase,\n+        SqlDatabase.SqlDatabaseDefinition<SqlServer.DefinitionStages.WithCreate>,\n+        SqlDatabase.DefinitionStages.WithExistingDatabaseAfterElasticPool<SqlServer.DefinitionStages.WithCreate>,\n+        SqlDatabase.DefinitionStages.WithStorageKeyAfterElasticPool<SqlServer.DefinitionStages.WithCreate>,\n+        SqlDatabase.DefinitionStages.WithAuthenticationAfterElasticPool<SqlServer.DefinitionStages.WithCreate>,\n+        SqlDatabase.DefinitionStages.WithRestorePointDatabaseAfterElasticPool<SqlServer.DefinitionStages.WithCreate>,\n+        SqlDatabase.Update,\n+        SqlDatabaseOperations.DefinitionStages.WithExistingDatabaseAfterElasticPool,\n+        SqlDatabaseOperations.DefinitionStages.WithStorageKeyAfterElasticPool,\n+        SqlDatabaseOperations.DefinitionStages.WithAuthenticationAfterElasticPool,\n+        SqlDatabaseOperations.DefinitionStages.WithRestorePointDatabaseAfterElasticPool,\n+        SqlDatabaseOperations.DefinitionStages.WithCreateAfterElasticPoolOptions,\n+        SqlDatabaseOperations.SqlDatabaseOperationsDefinition {\n+\n+    private SqlElasticPoolsAsExternalChildResourcesImpl sqlElasticPools;\n+\n+    protected SqlServerManager sqlServerManager;\n+    protected String resourceGroupName;\n+    protected String sqlServerName;\n+    protected String sqlServerLocation;\n+    private boolean isPatchUpdate;\n+    private ImportRequest importRequestInner;\n+\n+    private SqlSyncGroupOperationsImpl syncGroups;\n+\n+\n+    /**\n+     * Creates an instance of external child resource in-memory.\n+     *\n+     * @param name        the name of this external child resource\n+     * @param parent      reference to the parent of this external child resource\n+     * @param innerObject reference to the inner object representing this external child resource\n+     * @param sqlServerManager reference to the SQL server manager that accesses firewall rule operations\n+     */\n+    SqlDatabaseImpl(String name, SqlServerImpl parent, DatabaseInner innerObject, SqlServerManager sqlServerManager) {\n+        super(name, parent, innerObject);\n+\n+        Objects.requireNonNull(parent);\n+        Objects.requireNonNull(sqlServerManager);\n+        this.sqlServerManager = sqlServerManager;\n+        this.resourceGroupName = parent.resourceGroupName();\n+        this.sqlServerName = parent.name();\n+        this.sqlServerLocation = parent.regionName();\n+\n+        this.sqlElasticPools = null;\n+        this.isPatchUpdate = false;\n+        this.importRequestInner = null;\n+    }\n+\n+    /**\n+     * Creates an instance of external child resource in-memory.\n+     *\n+     * @param resourceGroupName the resource group name\n+     * @param sqlServerName the parent SQL server name\n+     * @param sqlServerLocation the parent SQL server location\n+     * @param name        the name of this external child resource\n+     * @param innerObject reference to the inner object representing this external child resource\n+     * @param sqlServerManager reference to the SQL server manager that accesses firewall rule operations\n+     */\n+    SqlDatabaseImpl(String resourceGroupName, String sqlServerName, String sqlServerLocation, String name, DatabaseInner innerObject, SqlServerManager sqlServerManager) {\n+        super(name, null, innerObject);\n+        Objects.requireNonNull(sqlServerManager);\n+        this.sqlServerManager = sqlServerManager;\n+        this.resourceGroupName = resourceGroupName;\n+        this.sqlServerName = sqlServerName;\n+        this.sqlServerLocation = sqlServerLocation;\n+\n+        this.sqlElasticPools = new SqlElasticPoolsAsExternalChildResourcesImpl(this.sqlServerManager, \"SqlElasticPool\");\n+        this.isPatchUpdate = false;\n+        this.importRequestInner = null;\n+    }\n+\n+    /**\n+     * Creates an instance of external child resource in-memory.\n+     *\n+     * @param parentSqlElasticPool the parent SqlElasticPool this database belongs to\n+     * @param name        the name of this external child resource\n+     * @param innerObject reference to the inner object representing this external child resource\n+     * @param sqlServerManager reference to the SQL server manager that accesses firewall rule operations\n+     */\n+    SqlDatabaseImpl(TaskGroup.HasTaskGroup parentSqlElasticPool, String name, DatabaseInner innerObject, SqlServerManager sqlServerManager) {\n+        super(name, null, innerObject);\n+        Objects.requireNonNull(parentSqlElasticPool);\n+        Objects.requireNonNull(sqlServerManager);\n+        this.sqlServerManager = sqlServerManager;\n+\n+        this.sqlElasticPools = new SqlElasticPoolsAsExternalChildResourcesImpl(this.sqlServerManager, \"SqlElasticPool\");\n+        this.isPatchUpdate = false;\n+        this.importRequestInner = null;\n+    }\n+\n+    @Override\n+    public String id() {\n+        return this.inner().getId();\n+    }\n+\n+    @Override\n+    public String resourceGroupName() {\n+        return this.resourceGroupName;\n+    }\n+\n+    @Override\n+    public String sqlServerName() {\n+        return this.sqlServerName;\n+    }\n+\n+    @Override\n+    public String collation() {\n+        return this.inner().collation();\n+    }\n+\n+    @Override\n+    public OffsetDateTime creationDate() {\n+        return this.inner().creationDate();\n+    }\n+\n+    @Override\n+    public String currentServiceObjectiveName() {\n+        return this.inner().currentServiceObjectiveName();\n+    }\n+\n+    @Override\n+    public String databaseId() {\n+        return this.inner().databaseId().toString();\n+    }\n+\n+    @Override\n+    public OffsetDateTime earliestRestoreDate() {\n+        return this.inner().earliestRestoreDate();\n+    }\n+\n+    @Override\n+    public DatabaseEdition edition() {\n+        return DatabaseEdition.fromString(this.inner().sku().tier());\n+    }\n+\n+    @Override\n+    public long maxSizeBytes() {\n+        return Long.valueOf(this.inner().maxSizeBytes());\n+    }\n+\n+    @Override\n+    public String requestedServiceObjectiveName() {\n+        if (this.inner().sku() != null)\n+            return this.inner().sku().name();\n+        return this.inner().requestedServiceObjectiveName();\n+    }\n+\n+    @Override\n+    public DatabaseStatus status() {\n+        return this.inner().status();\n+    }\n+\n+    @Override\n+    public String elasticPoolId() {\n+        return this.inner().elasticPoolId();\n+    }\n+\n+\n+    @Override\n+    public String elasticPoolName() {\n+        return ResourceUtils.nameFromResourceId(this.inner().elasticPoolId());\n+    }\n+\n+    @Override\n+    public String defaultSecondaryLocation() {\n+        return this.inner().defaultSecondaryLocation();\n+    }\n+\n+    @Override\n+    public boolean isDataWarehouse() {\n+        return this.edition().toString().equalsIgnoreCase(DatabaseEdition.DATA_WAREHOUSE.toString());\n+    }\n+\n+    @Override\n+    public SqlWarehouse asWarehouse() {\n+        if (this.isDataWarehouse()) {\n+            if (this.parent() != null) {\n+                return new SqlWarehouseImpl(this.name(), this.parent(), this.inner(), this.sqlServerManager);\n+            } else {\n+                return new SqlWarehouseImpl(this.resourceGroupName, this.sqlServerName, this.sqlServerLocation, this.name(), this.inner(), this.sqlServerManager);\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public List<RestorePoint> listRestorePoints() {\n+        List<RestorePoint> restorePoints = new ArrayList<>();\n+        PagedIterable<RestorePointInner> restorePointInners = this.sqlServerManager.inner()\n+            .restorePoints().listByDatabase(this.resourceGroupName, this.sqlServerName, this.name());\n+        if (restorePointInners != null) {\n+            for (RestorePointInner inner : restorePointInners) {\n+                restorePoints.add(new RestorePointImpl(this.resourceGroupName, this.sqlServerName, inner));\n+            }\n+        }\n+        return Collections.unmodifiableList(restorePoints);\n+    }\n+\n+    @Override\n+    public PagedFlux<RestorePoint> listRestorePointsAsync() {\n+        final SqlDatabaseImpl self = this;\n+        return this.sqlServerManager.inner()\n+            .restorePoints().listByDatabaseAsync(this.resourceGroupName, this.sqlServerName, this.name())\n+            .mapPage(restorePointInner -> new RestorePointImpl(self.resourceGroupName, self.sqlServerName, restorePointInner));\n+    }\n+\n+    @Override\n+    public Map<String, ReplicationLink> listReplicationLinks() {\n+        Map<String, ReplicationLink> replicationLinkMap = new HashMap<>();\n+        PagedIterable<ReplicationLinkInner> replicationLinkInners = this.sqlServerManager.inner()\n+            .replicationLinks().listByDatabase(this.resourceGroupName, this.sqlServerName, this.name());\n+        if (replicationLinkInners != null) {\n+            for (ReplicationLinkInner inner : replicationLinkInners) {\n+                replicationLinkMap.put(inner.getName(), new ReplicationLinkImpl(this.resourceGroupName, this.sqlServerName, inner, this.sqlServerManager));\n+            }\n+        }\n+        return Collections.unmodifiableMap(replicationLinkMap);\n+    }\n+\n+    @Override\n+    public PagedFlux<ReplicationLink> listReplicationLinksAsync() {\n+        final SqlDatabaseImpl self = this;\n+        return this.sqlServerManager.inner()\n+            .replicationLinks().listByDatabaseAsync(this.resourceGroupName, this.sqlServerName, this.name())\n+            .mapPage(replicationLinkInner -> new ReplicationLinkImpl(self.resourceGroupName, self.sqlServerName, replicationLinkInner, self.sqlServerManager));\n+    }\n+\n+    @Override\n+    public SqlDatabaseExportRequestImpl exportTo(String storageUri) {\n+        return new SqlDatabaseExportRequestImpl(this, this.sqlServerManager)\n+            .exportTo(storageUri);\n+    }\n+\n+    @Override\n+    public SqlDatabaseExportRequestImpl exportTo(StorageAccount storageAccount, String containerName, String fileName) {\n+        Objects.requireNonNull(storageAccount);\n+        return new SqlDatabaseExportRequestImpl(this, this.sqlServerManager)\n+            .exportTo(storageAccount, containerName, fileName);\n+    }\n+\n+    @Override\n+    public SqlDatabaseExportRequestImpl exportTo(Creatable<StorageAccount> storageAccountCreatable, String containerName, String fileName) {\n+        Objects.requireNonNull(storageAccountCreatable);\n+        return new SqlDatabaseExportRequestImpl(this, this.sqlServerManager)\n+            .exportTo(storageAccountCreatable, containerName, fileName);\n+    }\n+\n+    @Override\n+    public SqlDatabaseImportRequestImpl importBacpac(String storageUri) {\n+        return new SqlDatabaseImportRequestImpl(this, this.sqlServerManager)\n+            .importFrom(storageUri);\n+    }\n+\n+    @Override\n+    public SqlDatabaseImportRequestImpl importBacpac(StorageAccount storageAccount, String containerName, String fileName) {\n+        Objects.requireNonNull(storageAccount);\n+        return new SqlDatabaseImportRequestImpl(this, this.sqlServerManager)\n+            .importFrom(storageAccount, containerName, fileName);\n+    }\n+\n+    @Override\n+    public SqlDatabaseThreatDetectionPolicy.DefinitionStages.Blank defineThreatDetectionPolicy(String policyName) {\n+        return new SqlDatabaseThreatDetectionPolicyImpl(policyName, this, new DatabaseSecurityAlertPolicyInner(), this.sqlServerManager);\n+    }\n+\n+    @Override\n+    public SqlDatabaseThreatDetectionPolicy getThreatDetectionPolicy() {\n+        DatabaseSecurityAlertPolicyInner policyInner = this.sqlServerManager.inner().databaseThreatDetectionPolicies()\n+            .get(this.resourceGroupName, this.sqlServerName, this.name());\n+        return policyInner != null ? new SqlDatabaseThreatDetectionPolicyImpl(policyInner.getName(), this, policyInner, this.sqlServerManager) : null;\n+    }\n+\n+    @Override\n+    public SqlDatabaseAutomaticTuning getDatabaseAutomaticTuning() {\n+        DatabaseAutomaticTuningInner databaseAutomaticTuningInner = this.sqlServerManager.inner().databaseAutomaticTunings()\n+            .get(this.resourceGroupName, this.sqlServerName, this.name());\n+        return databaseAutomaticTuningInner != null ? new SqlDatabaseAutomaticTuningImpl(this, databaseAutomaticTuningInner) : null;\n+    }\n+\n+    @Override\n+    public List<SqlDatabaseUsageMetric> listUsageMetrics() {\n+        List<SqlDatabaseUsageMetric> databaseUsageMetrics = new ArrayList<>();\n+        PagedIterable<DatabaseUsageInner> databaseUsageInners = this.sqlServerManager.inner().databaseUsages()\n+            .listByDatabase(this.resourceGroupName, this.sqlServerName, this.name());\n+        if (databaseUsageInners != null) {\n+            for (DatabaseUsageInner inner : databaseUsageInners) {\n+                databaseUsageMetrics.add(new SqlDatabaseUsageMetricImpl(inner));\n+            }\n+        }\n+        return Collections.unmodifiableList(databaseUsageMetrics);\n+    }\n+\n+    @Override\n+    public PagedFlux<SqlDatabaseUsageMetric> listUsageMetricsAsync() {\n+        return this.sqlServerManager.inner().databaseUsages()\n+            .listByDatabaseAsync(this.resourceGroupName, this.sqlServerName, this.name())\n+            .mapPage(databaseUsageInner -> new SqlDatabaseUsageMetricImpl(databaseUsageInner));\n+    }\n+\n+    @Override\n+    public SqlDatabase rename(String newDatabaseName) {\n+        ResourceId resourceId = ResourceId.fromString(this.id());\n+        String newId = resourceId.parent().id() + \"/databases/\" + newDatabaseName;\n+        this.sqlServerManager.inner().databases()\n+            .rename(this.resourceGroupName, this.sqlServerName, this.name(), newId);\n+        return this.sqlServerManager.sqlServers().databases()\n+            .getBySqlServer(this.resourceGroupName, this.sqlServerName, newDatabaseName);\n+    }\n+\n+    @Override\n+    public Mono<SqlDatabase> renameAsync(final String newDatabaseName) {\n+        final SqlDatabaseImpl self = this;\n+        ResourceId resourceId = ResourceId.fromString(this.id());\n+        String newId = resourceId.parent().id() + \"/databases/\" + newDatabaseName;\n+        return this.sqlServerManager.inner().databases()\n+            .renameAsync(this.resourceGroupName, this.sqlServerName, self.name(), newId)\n+            .flatMap(aVoid -> self.sqlServerManager.sqlServers().databases()\n+                .getBySqlServerAsync(self.resourceGroupName, self.sqlServerName, newDatabaseName));\n+    }\n+\n+    @Override\n+    public List<DatabaseMetric> listUsages() {\n+        // This method was deprecated in favor of the other database metric related methods\n+        return Collections.unmodifiableList(new ArrayList<DatabaseMetric>());\n+    }\n+\n+    @Override\n+    public List<SqlDatabaseMetric> listMetrics(String filter) {\n+        List<SqlDatabaseMetric> sqlDatabaseMetrics = new ArrayList<>();\n+        PagedIterable<MetricInner> metricInners = this.sqlServerManager.inner().databases()\n+            .listMetrics(this.resourceGroupName, this.sqlServerName, this.name(), filter);\n+        if (metricInners != null) {\n+            for (MetricInner metricInner : metricInners) {\n+                sqlDatabaseMetrics.add(new SqlDatabaseMetricImpl(metricInner));\n+            }\n+        }\n+        return Collections.unmodifiableList(sqlDatabaseMetrics);\n+    }\n+\n+    @Override\n+    public PagedFlux<SqlDatabaseMetric> listMetricsAsync(final String filter) {\n+        return this.sqlServerManager.inner().databases()\n+            .listMetricsAsync(this.resourceGroupName, this.sqlServerName, this.name(), filter)\n+            .mapPage(metricInner -> new SqlDatabaseMetricImpl(metricInner));\n+    }\n+\n+    @Override\n+    public List<SqlDatabaseMetricDefinition> listMetricDefinitions() {\n+        List<SqlDatabaseMetricDefinition> sqlDatabaseMetricDefinitions = new ArrayList<>();\n+        PagedIterable<MetricDefinitionInner> metricDefinitionInners = this.sqlServerManager.inner().databases()\n+            .listMetricDefinitions(this.resourceGroupName, this.sqlServerName, this.name());\n+        if (metricDefinitionInners != null) {\n+            for (MetricDefinitionInner metricDefinitionInner : metricDefinitionInners) {\n+                sqlDatabaseMetricDefinitions.add(new SqlDatabaseMetricDefinitionImpl(metricDefinitionInner));\n+            }\n+        }\n+\n+        return Collections.unmodifiableList(sqlDatabaseMetricDefinitions);\n+    }\n+\n+    @Override\n+    public PagedFlux<SqlDatabaseMetricDefinition> listMetricDefinitionsAsync() {\n+        return this.sqlServerManager.inner().databases()\n+            .listMetricDefinitionsAsync(this.resourceGroupName, this.sqlServerName, this.name())\n+            .mapPage(metricDefinitionInner -> new SqlDatabaseMetricDefinitionImpl(metricDefinitionInner));\n+    }\n+\n+    @Override\n+    public TransparentDataEncryption getTransparentDataEncryption() {\n+        TransparentDataEncryptionInner transparentDataEncryptionInner = this.sqlServerManager.inner()\n+            .transparentDataEncryptions().get(this.resourceGroupName, this.sqlServerName, this.name());\n+        return (transparentDataEncryptionInner == null) ? null : new TransparentDataEncryptionImpl(this.resourceGroupName, this.sqlServerName, transparentDataEncryptionInner, this.sqlServerManager);\n+    }\n+\n+    @Override\n+    public Mono<TransparentDataEncryption> getTransparentDataEncryptionAsync() {\n+        final SqlDatabaseImpl self = this;\n+        return this.sqlServerManager.inner()\n+            .transparentDataEncryptions().getAsync(this.resourceGroupName, this.sqlServerName, this.name())\n+            .map(transparentDataEncryptionInner -> new TransparentDataEncryptionImpl(self.resourceGroupName, self.sqlServerName, transparentDataEncryptionInner, self.sqlServerManager));\n+    }\n+\n+    @Override\n+    public Map<String, ServiceTierAdvisor> listServiceTierAdvisors() {", "originalCommit": "b2377f227822529bfb26ce4b62ea335af3800529", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}