{"pr_number": 1002, "pr_title": "feat: rewrite authentication policy to use default scope", "pr_createdAt": "2020-02-04T03:27:05Z", "pr_url": "https://github.com/Azure/azure-libraries-for-java/pull/1002", "timeline": [{"oid": "7b5a88a836b9dfb7c3f209359705aa5824621804", "url": "https://github.com/Azure/azure-libraries-for-java/commit/7b5a88a836b9dfb7c3f209359705aa5824621804", "message": "feat: rewrite authentication policy to use default scope", "committedDate": "2020-02-04T03:25:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2MzgwOA==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1002#discussion_r374463808", "bodyText": "Is it possible to have UPPERCASE of getProtocol?", "author": "weidongxu-microsoft", "createdAt": "2020-02-04T03:58:48Z", "path": "azure-mgmt-resources/src/main/java/com/azure/management/BearerTokenAuthenticationPolicy.java", "diffHunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.management.AzureEnvironment;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Rewrite the BearerTokenAuthenticationPolicy, it will use default scope when scopes parameter is empty.\n+ */\n+public class BearerTokenAuthenticationPolicy implements HttpPipelinePolicy {\n+    private static final String AUTHORIZATION_HEADER_KEY = \"Authorization\";\n+    private static final String AUTHORIZATION_HEADER_VALUE_FORMAT = \"Bearer %s\";\n+\n+    private final Map<String, AccessToken> tokenCache;\n+    private final TokenCredential credential;\n+    private final String[] scopes;\n+    private final AzureEnvironment environment;\n+\n+    public BearerTokenAuthenticationPolicy(TokenCredential credential, String... scopes) {\n+        Objects.requireNonNull(credential);\n+        this.credential = credential;\n+        this.scopes = scopes;\n+        this.tokenCache = new HashMap<>();\n+\n+        if (credential instanceof AzureTokenCredential) {\n+            this.environment = ((AzureTokenCredential) credential).getEnvironment();\n+        } else {\n+            this.environment = AzureEnvironment.AZURE;\n+        }\n+    }\n+\n+    private String getDefaultScopeFromRequest(HttpRequest request) {\n+        String host = request.getUrl().getHost();\n+        String resource = this.environment.getManagementEndpoint();\n+        for (Map.Entry<String, String> endpoint : this.environment.endpoints().entrySet()) {\n+            if (host.contains(endpoint.getValue())) {\n+                if (endpoint.getKey().equals(AzureEnvironment.Endpoint.KEYVAULT.identifier())) {\n+                    resource = String.format(\"https://%s/\", endpoint.getValue().replaceAll(\"^\\\\.*\", \"\"));\n+                    break;\n+                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.GRAPH.identifier())) {\n+                    resource = this.environment.getGraphEndpoint();\n+                    break;\n+                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.LOG_ANALYTICS.identifier())) {\n+                    resource = this.environment.getLogAnalyticsEndpoint();\n+                    break;\n+                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.APPLICATION_INSIGHTS.identifier())) {\n+                    resource = this.environment.getApplicationInsightsEndpoint();\n+                    break;\n+                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.DATA_LAKE_STORE.identifier())\n+                        || endpoint.getKey().equals(AzureEnvironment.Endpoint.DATA_LAKE_ANALYTICS.identifier())) {\n+                    resource = this.environment.getDataLakeEndpointResourceId();\n+                    break;\n+                }\n+            }\n+        }\n+        return resource + \"/.default\";\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        if (\"http\".equals(context.getHttpRequest().getUrl().getProtocol())) {", "originalCommit": "7b5a88a836b9dfb7c3f209359705aa5824621804", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2NTYwMw==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1002#discussion_r374465603", "bodyText": "I haven't met a UPPERCASE protocol url, but I think we could handle it.", "author": "ChenTanyi", "createdAt": "2020-02-04T04:08:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2MzgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "e8c239e0be3b74443ee3db01bea5f0308543db29", "chunk": "diff --git a/azure-mgmt-resources/src/main/java/com/azure/management/BearerTokenAuthenticationPolicy.java b/azure-mgmt-resources/src/main/java/com/azure/management/BearerTokenAuthenticationPolicy.java\nindex f0e26fce..8d20bb6f 100644\n--- a/azure-mgmt-resources/src/main/java/com/azure/management/BearerTokenAuthenticationPolicy.java\n+++ b/azure-mgmt-resources/src/main/java/com/azure/management/BearerTokenAuthenticationPolicy.java\n\n@@ -72,7 +72,7 @@ public class BearerTokenAuthenticationPolicy implements HttpPipelinePolicy {\n \n     @Override\n     public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n-        if (\"http\".equals(context.getHttpRequest().getUrl().getProtocol())) {\n+        if (\"http\".equals(context.getHttpRequest().getUrl().getProtocol().toLowerCase())) {\n             return Mono.error(new RuntimeException(\"token credentials require a URL using the HTTPS protocol scheme\"));\n         }\n \n"}}, {"oid": "e8c239e0be3b74443ee3db01bea5f0308543db29", "url": "https://github.com/Azure/azure-libraries-for-java/commit/e8c239e0be3b74443ee3db01bea5f0308543db29", "message": "fix: handle UPPERCASE protocol", "committedDate": "2020-02-04T04:09:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2Nzc0OQ==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1002#discussion_r374467749", "bodyText": "Not sure about doOnNext, it could still follow by an Error instead of Complete. Maybe doOnSuccess?\nInput of doOnSuccess could be null.", "author": "weidongxu-microsoft", "createdAt": "2020-02-04T04:20:30Z", "path": "azure-mgmt-resources/src/main/java/com/azure/management/BearerTokenAuthenticationPolicy.java", "diffHunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.management.AzureEnvironment;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Rewrite the BearerTokenAuthenticationPolicy, it will use default scope when scopes parameter is empty.\n+ */\n+public class BearerTokenAuthenticationPolicy implements HttpPipelinePolicy {\n+    private static final String AUTHORIZATION_HEADER_KEY = \"Authorization\";\n+    private static final String AUTHORIZATION_HEADER_VALUE_FORMAT = \"Bearer %s\";\n+\n+    private final Map<String, AccessToken> tokenCache;\n+    private final TokenCredential credential;\n+    private final String[] scopes;\n+    private final AzureEnvironment environment;\n+\n+    public BearerTokenAuthenticationPolicy(TokenCredential credential, String... scopes) {\n+        Objects.requireNonNull(credential);\n+        this.credential = credential;\n+        this.scopes = scopes;\n+        this.tokenCache = new HashMap<>();\n+\n+        if (credential instanceof AzureTokenCredential) {\n+            this.environment = ((AzureTokenCredential) credential).getEnvironment();\n+        } else {\n+            this.environment = AzureEnvironment.AZURE;\n+        }\n+    }\n+\n+    private String getDefaultScopeFromRequest(HttpRequest request) {\n+        String host = request.getUrl().getHost();\n+        String resource = this.environment.getManagementEndpoint();\n+        for (Map.Entry<String, String> endpoint : this.environment.endpoints().entrySet()) {\n+            if (host.contains(endpoint.getValue())) {\n+                if (endpoint.getKey().equals(AzureEnvironment.Endpoint.KEYVAULT.identifier())) {\n+                    resource = String.format(\"https://%s/\", endpoint.getValue().replaceAll(\"^\\\\.*\", \"\"));\n+                    break;\n+                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.GRAPH.identifier())) {\n+                    resource = this.environment.getGraphEndpoint();\n+                    break;\n+                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.LOG_ANALYTICS.identifier())) {\n+                    resource = this.environment.getLogAnalyticsEndpoint();\n+                    break;\n+                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.APPLICATION_INSIGHTS.identifier())) {\n+                    resource = this.environment.getApplicationInsightsEndpoint();\n+                    break;\n+                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.DATA_LAKE_STORE.identifier())\n+                        || endpoint.getKey().equals(AzureEnvironment.Endpoint.DATA_LAKE_ANALYTICS.identifier())) {\n+                    resource = this.environment.getDataLakeEndpointResourceId();\n+                    break;\n+                }\n+            }\n+        }\n+        return resource + \"/.default\";\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        if (\"http\".equals(context.getHttpRequest().getUrl().getProtocol())) {\n+            return Mono.error(new RuntimeException(\"token credentials require a URL using the HTTPS protocol scheme\"));\n+        }\n+\n+        String[] scopes;\n+        if (this.scopes == null || this.scopes.length == 0) {\n+            scopes = new String[] {getDefaultScopeFromRequest(context.getHttpRequest())};\n+        } else {\n+            scopes = this.scopes;\n+        }\n+        assert scopes.length > 0;\n+\n+        Mono<AccessToken> tokenResult;\n+        AccessToken token = tokenCache.get(scopes[0]);\n+        if (token == null || token.isExpired()) {\n+            tokenResult = this.credential.getToken(new TokenRequestContext().addScopes(scopes)).doOnNext(accessToken -> this.tokenCache.put(scopes[0], accessToken));", "originalCommit": "7b5a88a836b9dfb7c3f209359705aa5824621804", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3OTYyNA==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1002#discussion_r374479624", "bodyText": "I'll test about it, since we don't catch exception, if the credential get token with error it will throw it and the pipeline will be terminated.", "author": "ChenTanyi", "createdAt": "2020-02-04T05:24:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2Nzc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4MDkxMg==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1002#discussion_r374480912", "bodyText": "The point here is that I do not want to write to the cache unless it is a success (+ token not null).", "author": "weidongxu-microsoft", "createdAt": "2020-02-04T05:29:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2Nzc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwMjQxOA==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1002#discussion_r374502418", "bodyText": "https://stackoverflow.com/questions/55976963/is-there-a-difference-between-doonsuccess-vs-doonnext-for-a-mono As SO said, it seems doOnNext is more likely to be used which would skip when data is null.", "author": "ChenTanyi", "createdAt": "2020-02-04T07:03:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2Nzc0OQ=="}], "type": "inlineReview", "revised_code": null}]}