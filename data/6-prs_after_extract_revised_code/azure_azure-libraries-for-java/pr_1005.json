{"pr_number": 1005, "pr_title": "Migrate Auxiliary Authentication Policy to V2", "pr_createdAt": "2020-02-05T08:50:40Z", "pr_url": "https://github.com/Azure/azure-libraries-for-java/pull/1005", "timeline": [{"oid": "d48cce1a19b6d7100fd9baa9637207417fb10011", "url": "https://github.com/Azure/azure-libraries-for-java/commit/d48cce1a19b6d7100fd9baa9637207417fb10011", "message": "feat: change TokenCredential to AzureTokenCredential in resetclient", "committedDate": "2020-02-05T07:52:51Z", "type": "commit"}, {"oid": "54248a5288b7c4f8bc38a718a7e6d2fb7f181eee", "url": "https://github.com/Azure/azure-libraries-for-java/commit/54248a5288b7c4f8bc38a718a7e6d2fb7f181eee", "message": "feat: set token cache into credentials", "committedDate": "2020-02-05T08:45:06Z", "type": "commit"}, {"oid": "77d9b928c671c78cef5c3d73fad5351aa2535a44", "url": "https://github.com/Azure/azure-libraries-for-java/commit/77d9b928c671c78cef5c3d73fad5351aa2535a44", "message": "feat: add AuxiliaryAuthenticationPolicy", "committedDate": "2020-02-05T08:45:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwNzMyNw==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1005#discussion_r375607327", "bodyText": "Could you do a proper refresh? These code seems not belong here.", "author": "weidongxu-microsoft", "createdAt": "2020-02-06T02:03:50Z", "path": "azure-mgmt-resources/src/main/java/com/azure/management/AzureTokenCredential.java", "diffHunk": "@@ -43,42 +44,33 @@ public AzureTokenCredential(AzureEnvironment environment, String domain) {\n      * @param request the details of the token request\r\n      * @return a Publisher that emits a single access token\r\n      */\r\n-//    @Override\r\n-//    public final Mono<AccessToken> getToken(TokenRequestContext request) {\r\n-//        String host = request.toString().toLowerCase();\r\n-//        String resource = getEnvironment().getManagementEndpoint();\r\n-//        for (Map.Entry<String, String> endpoint : getEnvironment().endpoints().entrySet()) {\r\n-//            if (host.contains(endpoint.getValue())) {\r\n-//                if (endpoint.getKey().equals(AzureEnvironment.Endpoint.KEYVAULT.identifier())) {\r\n-//                    resource = String.format(\"https://%s/\", endpoint.getValue().replaceAll(\"^\\\\.*\", \"\"));\r\n-//                    break;\r\n-//                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.GRAPH.identifier())) {\r\n-//                    resource = getEnvironment().getGraphEndpoint();\r\n-//                    break;\r\n-//                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.LOG_ANALYTICS.identifier())) {\r\n-//                    resource = getEnvironment().getLogAnalyticsEndpoint();\r\n-//                    break;\r\n-//                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.APPLICATION_INSIGHTS.identifier())) {\r\n-//                    resource = getEnvironment().getApplicationInsightsEndpoint();\r\n-//                    break;\r\n-//                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.DATA_LAKE_STORE.identifier())\r\n-//                        || endpoint.getKey().equals(AzureEnvironment.Endpoint.DATA_LAKE_ANALYTICS.identifier())) {\r\n-//                    resource = getEnvironment().getDataLakeEndpointResourceId();\r\n-//                    break;\r\n-//                }\r\n-//            }\r\n-//        }\r\n-//        return getToken(resource);\r\n-//    }\r\n-\r\n-    /**\r\n-     * Override this method to provide the mechanism to get a token.\r\n-     *\r\n-     * @param resource the resource the access token is for\r\n-     * @return the token to access the resource\r\n-     * @throws IOException exceptions from IO\r\n-     */\r\n-//    public abstract Mono<AccessToken> getToken(String resource);\r\n+    public final Mono<AccessToken> getToken(HttpRequest request) {\r", "originalCommit": "77d9b928c671c78cef5c3d73fad5351aa2535a44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxNjIyOQ==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1005#discussion_r375616229", "bodyText": "I move it to here due to I need cached in every credential, in the second commit.", "author": "ChenTanyi", "createdAt": "2020-02-06T02:45:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwNzMyNw=="}], "type": "inlineReview", "revised_code": {"commit": "c8ba2dbc39390a6a30ec2b7ba1049803cb165ee9", "chunk": "diff --git a/azure-mgmt-resources/src/main/java/com/azure/management/AzureTokenCredential.java b/azure-mgmt-resources/src/main/java/com/azure/management/AzureTokenCredential.java\nindex d7e0d572..f1511e22 100644\n--- a/azure-mgmt-resources/src/main/java/com/azure/management/AzureTokenCredential.java\n+++ b/azure-mgmt-resources/src/main/java/com/azure/management/AzureTokenCredential.java\n\n@@ -38,40 +32,6 @@ public abstract class AzureTokenCredential implements TokenCredential {\n         this.domain = domain;\n     }\n \n-    /**\n-     * Asynchronously get a token for a given resource/audience.\n-     *\n-     * @param request the details of the token request\n-     * @return a Publisher that emits a single access token\n-     */\n-    public final Mono<AccessToken> getToken(HttpRequest request) {\n-        String host = request.getUrl().getHost().toLowerCase();\n-        String resource = getEnvironment().getManagementEndpoint();\n-        for (Map.Entry<String, String> endpoint : getEnvironment().endpoints().entrySet()) {\n-            if (host.contains(endpoint.getValue())) {\n-                if (endpoint.getKey().equals(AzureEnvironment.Endpoint.KEYVAULT.identifier())) {\n-                    resource = String.format(\"https://%s/\", endpoint.getValue().replaceAll(\"^\\\\.*\", \"\"));\n-                    break;\n-                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.GRAPH.identifier())) {\n-                    resource = getEnvironment().getGraphEndpoint();\n-                    break;\n-                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.LOG_ANALYTICS.identifier())) {\n-                    resource = getEnvironment().getLogAnalyticsEndpoint();\n-                    break;\n-                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.APPLICATION_INSIGHTS.identifier())) {\n-                    resource = getEnvironment().getApplicationInsightsEndpoint();\n-                    break;\n-                } else if (endpoint.getKey().equals(AzureEnvironment.Endpoint.DATA_LAKE_STORE.identifier())\n-                        || endpoint.getKey().equals(AzureEnvironment.Endpoint.DATA_LAKE_ANALYTICS.identifier())) {\n-                    resource = getEnvironment().getDataLakeEndpointResourceId();\n-                    break;\n-                }\n-            }\n-        }\n-        String defaultScope = resource + \"/.default\";\n-        return getToken(new TokenRequestContext().addScopes(defaultScope));\n-    }\n-\n     /**\n      * Set default subscription ID.\n      *\n"}}, {"oid": "77e1e4162d8503e6626b62ea5ef8c86a81702299", "url": "https://github.com/Azure/azure-libraries-for-java/commit/77e1e4162d8503e6626b62ea5ef8c86a81702299", "message": "fix authentication implementation accoding to test", "committedDate": "2020-02-07T11:09:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0NjUzNQ==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1005#discussion_r377046535", "bodyText": "After multiple PR updates, It is now a bit messed up on the scope vs. request (host).\nThere is 3 thing happening here:\n(1) If scope is not provided, deduct the scope from host+environment\n(2) Get the token based on scope\n(3) Cache the token\nIf we stick with scope, my suggestion:\n(2) is always done in ApplicationTokenCredential. No problem.\n(1) is moved a lot in various PRs. My suggestion is to put it to a Util class. Input host+environment, output scope. Deterministic, and easy to do unit test. No need to couple this to either TokenCredential or Policy.\nAfter it is decoupled, Policy could then call TokenCredential.getToken with TokenRequestContext (use the Util above to get the scope if not provided).\n(3) seems better to be in subclass of TokenCredential, since AuxiliaryAuthenticationPolicy would also use that cache.\n@yaohaizh Let us know your opinion.", "author": "weidongxu-microsoft", "createdAt": "2020-02-10T12:58:26Z", "path": "azure-mgmt-resources/src/main/java/com/azure/management/BearerTokenAuthenticationPolicy.java", "diffHunk": "@@ -76,21 +35,11 @@ private String getDefaultScopeFromRequest(HttpRequest request) {\n             return Mono.error(new RuntimeException(\"token credentials require a URL using the HTTPS protocol scheme\"));\n         }\n \n-        String[] scopes;\n-        if (this.scopes == null || this.scopes.length == 0) {\n-            scopes = new String[] {getDefaultScopeFromRequest(context.getHttpRequest())};\n-        } else {\n-            scopes = this.scopes;\n-        }\n-        assert scopes.length > 0;\n-\n         Mono<AccessToken> tokenResult;\n-        AccessToken token = tokenCache.get(scopes[0]);\n-        if (token == null || token.isExpired()) {\n-            tokenResult = this.credential.getToken(new TokenRequestContext().addScopes(scopes))\n-                            .doOnNext(accessToken -> this.tokenCache.put(scopes[0], accessToken));\n+        if (this.scopes == null || this.scopes.length == 0) {\n+            tokenResult = this.credential.getToken(context.getHttpRequest());\n         } else {\n-            tokenResult = Mono.just(token);\n+            tokenResult = this.credential.getToken(new TokenRequestContext().addScopes(scopes));", "originalCommit": "77e1e4162d8503e6626b62ea5ef8c86a81702299", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwODE3NA==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1005#discussion_r378108174", "bodyText": "From my perspective, I first use the TokenCredential for authorization, so every function should write outside the credential. But during the auxiliary authentication, I found that all projects are based on AzureTokenCredential, I think this common function could be written inside the AzureTokenCredential.\nDo we have scenario to use the TokenCredential rather than AzureTokenCredential?", "author": "ChenTanyi", "createdAt": "2020-02-12T08:46:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0NjUzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0NDM2Ng==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1005#discussion_r378144366", "bodyText": "My consideration is, here you call Token on 2 cases, one is scope, another is request. So Token class got depends on two things, scope object or request object, based on things outside.\nIf we stick to scope, then scope object is a must. However request object is not a must have, since any static function could calculate scope from host+environment (a function which not related to Token class at all, since we just moved it multiple times now), then just provide scope to Token, which in turn make Token class only depends on scope object.\nAnyway, it is up to you.", "author": "weidongxu-microsoft", "createdAt": "2020-02-12T09:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0NjUzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE1NzY3Mg==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1005#discussion_r378157672", "bodyText": "Yeah, the calculation could use a Utils to calculate (I would fix it). And the cache, I think it couldn't be based on the TokenCredential, which actually makes all credential check harder. I'll see if it is better to use a cache token in the AzureTokenCredential.", "author": "ChenTanyi", "createdAt": "2020-02-12T10:18:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0NjUzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYyNDMzNg==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1005#discussion_r378624336", "bodyText": "Cache should be fine at current state.\nDo we now still need AzureTokenCredential in RestClient? Or TokenCredential is enough?\nAsk because found this code in track1, the FunctionCredentials extends TokenCredenttial\n            functionService = manager().restClient().newBuilder()\n                    .withBaseUrl(defaultHostName.toString())\n                    .withCredentials(new FunctionCredentials(this))\n                    .withLogLevel(LogLevel.BODY_AND_HEADERS)\n                    .build()\n                    .retrofit().create(FunctionService.class);\n\nNot a big issue, I can handle it later when doing for appservice.", "author": "weidongxu-microsoft", "createdAt": "2020-02-13T02:43:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0NjUzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYyNjQ4NA==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1005#discussion_r378626484", "bodyText": "I'll check it, since the tokenCredentials in track 1 is different from track 2", "author": "ChenTanyi", "createdAt": "2020-02-13T02:53:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0NjUzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY1MTAwNw==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1005#discussion_r378651007", "bodyText": "I have revert the AzureTokenCredential commit, change it back to TokenCredential in restClient, and split the tokencache with lock", "author": "ChenTanyi", "createdAt": "2020-02-13T04:56:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0NjUzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "c8ba2dbc39390a6a30ec2b7ba1049803cb165ee9", "chunk": "diff --git a/azure-mgmt-resources/src/main/java/com/azure/management/BearerTokenAuthenticationPolicy.java b/azure-mgmt-resources/src/main/java/com/azure/management/BearerTokenAuthenticationPolicy.java\nindex 69f4d600..658e6475 100644\n--- a/azure-mgmt-resources/src/main/java/com/azure/management/BearerTokenAuthenticationPolicy.java\n+++ b/azure-mgmt-resources/src/main/java/com/azure/management/BearerTokenAuthenticationPolicy.java\n\n@@ -37,7 +37,8 @@ public class BearerTokenAuthenticationPolicy implements HttpPipelinePolicy {\n \n         Mono<AccessToken> tokenResult;\n         if (this.scopes == null || this.scopes.length == 0) {\n-            tokenResult = this.credential.getToken(context.getHttpRequest());\n+            String defaultScope = Utils.getDefaultScopeFromRequest(context.getHttpRequest(), credential.getEnvironment());\n+            tokenResult = this.credential.getToken(new TokenRequestContext().addScopes(defaultScope));\n         } else {\n             tokenResult = this.credential.getToken(new TokenRequestContext().addScopes(scopes));\n         }\n"}}, {"oid": "c8ba2dbc39390a6a30ec2b7ba1049803cb165ee9", "url": "https://github.com/Azure/azure-libraries-for-java/commit/c8ba2dbc39390a6a30ec2b7ba1049803cb165ee9", "message": "fix: move get default scope function to a utils", "committedDate": "2020-02-12T14:06:13Z", "type": "commit"}, {"oid": "a66a4d1379c2603570fd6fbc4c2589825fbe5bb8", "url": "https://github.com/Azure/azure-libraries-for-java/commit/a66a4d1379c2603570fd6fbc4c2589825fbe5bb8", "message": "feat: split token cache to external", "committedDate": "2020-02-13T03:51:07Z", "type": "commit"}, {"oid": "49d882d5dde6d38fd5e6c965f9ae737ed54de791", "url": "https://github.com/Azure/azure-libraries-for-java/commit/49d882d5dde6d38fd5e6c965f9ae737ed54de791", "message": "Revert \"feat: change TokenCredential to AzureTokenCredential in resetclient\"\n\nThis reverts commit d48cce1a19b6d7100fd9baa9637207417fb10011.", "committedDate": "2020-02-13T03:51:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2MjgxNQ==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1005#discussion_r378662815", "bodyText": "What's this token cache different with the one in the azure identity?", "author": "yaohaizh", "createdAt": "2020-02-13T05:51:06Z", "path": "azure-mgmt-resources/src/main/java/com/azure/management/resources/fluentcore/utils/AuxiliaryAuthenticationPolicy.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**", "originalCommit": "49d882d5dde6d38fd5e6c965f9ae737ed54de791", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5NTE1Ng==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1005#discussion_r378695156", "bodyText": "The simple token cache in azure core only support for one token and can not change token acquired function. I haven't seen token cache as a class in azure identity.", "author": "ChenTanyi", "createdAt": "2020-02-13T07:44:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2MjgxNQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "93a7ba6484158e35eb4712e954dc6a5e3dd72e55", "url": "https://github.com/Azure/azure-libraries-for-java/commit/93a7ba6484158e35eb4712e954dc6a5e3dd72e55", "message": "fix: remove token cache and use simple token cache in azure core", "committedDate": "2020-02-17T01:54:20Z", "type": "commit"}, {"oid": "f30767dc67d6ec86fe27b74bbef18c1fc021ee34", "url": "https://github.com/Azure/azure-libraries-for-java/commit/f30767dc67d6ec86fe27b74bbef18c1fc021ee34", "message": "feat: add utils test and fix error", "committedDate": "2020-02-17T02:13:38Z", "type": "commit"}, {"oid": "748afc115dee6276ec43c07cdfca8d2e4c987638", "url": "https://github.com/Azure/azure-libraries-for-java/commit/748afc115dee6276ec43c07cdfca8d2e4c987638", "message": "Merge branch 'vnext' into vnext-auxiAuth", "committedDate": "2020-02-17T02:21:57Z", "type": "commit"}]}