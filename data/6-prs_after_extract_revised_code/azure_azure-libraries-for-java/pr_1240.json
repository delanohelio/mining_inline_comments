{"pr_number": 1240, "pr_title": "add auxiliary header directly for cross tenant", "pr_createdAt": "2020-07-22T03:05:51Z", "pr_url": "https://github.com/Azure/azure-libraries-for-java/pull/1240", "timeline": [{"oid": "324ee4839331958031d349d6f6964c6f866006d0", "url": "https://github.com/Azure/azure-libraries-for-java/commit/324ee4839331958031d349d6f6964c6f866006d0", "message": "remove error body check for cross tenant", "committedDate": "2020-07-22T03:04:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzNjYwOQ==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1240#discussion_r458536609", "bodyText": "For DeploymentFailed, the LINKED_AUTHORIZATION_FAILED could be found via cloudError.details().get(index).code(). It would be better to traverse inside details() if the code() is not LINKED_AUTHORIZATION_FAILED, instead of deleting the check logic directly.", "author": "xseeseesee", "createdAt": "2020-07-22T05:06:14Z", "path": "azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/utils/AuxiliaryCredentialsInterceptor.java", "diffHunk": "@@ -42,36 +42,21 @@ public AuxiliaryCredentialsInterceptor(AzureTokenCredentials... credentials) {\n     public Response intercept(Chain chain) throws IOException {\r\n         Response response = chain.proceed(chain.request());\r\n         if (!response.isSuccessful() && tokenCredentials != null && this.tokenCredentials.length > 0) {\r\n-            String content = errorBody(response.body());\r\n-            AzureJacksonAdapter jacksonAdapter = new AzureJacksonAdapter();\r\n-            CloudError cloudError = jacksonAdapter.deserialize(content, CloudError.class);\r\n-            if (cloudError != null && LINKED_AUTHORIZATION_FAILED.equals(cloudError.code())) {\r", "originalCommit": "324ee4839331958031d349d6f6964c6f866006d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2MDIxMQ==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1240#discussion_r458560211", "bodyText": "LINKED_AUTHORIZATION_FAILED needs to parse details().get(index).message(), rather than in code()", "author": "ChenTanyi", "createdAt": "2020-07-22T06:20:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzNjYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2MTY0Ng==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1240#discussion_r458561646", "bodyText": "The problem maybe is how much we can trust service error message and its detail, and whether service might change it in future, without our knowledge. Hence it probably much safer to just go with the auxiliary if it is provided.", "author": "weidongxu-microsoft", "createdAt": "2020-07-22T06:24:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzNjYwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f37abec74d16c3baa63a58295d115dc1d48984e0", "chunk": "diff --git a/azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/utils/AuxiliaryCredentialsInterceptor.java b/azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/utils/AuxiliaryCredentialsInterceptor.java\nindex 74a8a842..17eabd5c 100644\n--- a/azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/utils/AuxiliaryCredentialsInterceptor.java\n+++ b/azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/utils/AuxiliaryCredentialsInterceptor.java\n\n@@ -40,23 +35,19 @@ public final class AuxiliaryCredentialsInterceptor implements Interceptor {\n \n     @Override\n     public Response intercept(Chain chain) throws IOException {\n-        Response response = chain.proceed(chain.request());\n-        if (!response.isSuccessful() && tokenCredentials != null && this.tokenCredentials.length > 0) {\n-            StringBuffer buff = new StringBuffer();\n-            for (int i = 0; i < tokenCredentials.length; i++) {\n-                buff.append(SCHEMA);\n-                buff.append(\" \");\n-                buff.append(tokenCredentials[i].getToken(chain.request().url().scheme() + \"://\" + chain.request().url().host()));\n-                if (i < tokenCredentials.length - 1) {\n-                    buff.append(\",\");\n-                }\n+        StringBuffer buff = new StringBuffer();\n+        for (int i = 0; i < tokenCredentials.length; i++) {\n+            buff.append(SCHEMA);\n+            buff.append(\" \");\n+            buff.append(tokenCredentials[i].getToken(chain.request().url().scheme() + \"://\" + chain.request().url().host()));\n+            if (i < tokenCredentials.length - 1) {\n+                buff.append(\",\");\n             }\n-            Request request = chain.request().newBuilder()\n-                    .header(AUTHORIZATION_AUXILIARY_HEADER, buff.toString())\n-                    .build();\n-            // Retry\n-            return chain.proceed(request);\n         }\n-        return response;\n+        Request request = chain.request().newBuilder()\n+                .header(AUTHORIZATION_AUXILIARY_HEADER, buff.toString())\n+                .build();\n+        // Retry\n+        return chain.proceed(request);\n     }\n }\n"}}, {"oid": "f37abec74d16c3baa63a58295d115dc1d48984e0", "url": "https://github.com/Azure/azure-libraries-for-java/commit/f37abec74d16c3baa63a58295d115dc1d48984e0", "message": "remove failing check, will always auth with auxiliary", "committedDate": "2020-07-22T05:24:59Z", "type": "commit"}, {"oid": "260f75308d36c0bcf146baeb1ec6fb11d4c32b06", "url": "https://github.com/Azure/azure-libraries-for-java/commit/260f75308d36c0bcf146baeb1ec6fb11d4c32b06", "message": "add check for token credential length", "committedDate": "2020-07-22T05:35:37Z", "type": "commit"}]}