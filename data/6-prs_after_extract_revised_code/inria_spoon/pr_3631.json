{"pr_number": 3631, "pr_title": "refactor: remove unused fields + corresponding architectural test", "pr_createdAt": "2020-10-03T15:50:02Z", "pr_url": "https://github.com/INRIA/spoon/pull/3631", "timeline": [{"oid": "277d2ceffd7e96ce031333063e7b8ed5314c6b9e", "url": "https://github.com/INRIA/spoon/commit/277d2ceffd7e96ce031333063e7b8ed5314c6b9e", "message": "remove unused field, but keep constructor parameter", "committedDate": "2020-10-03T15:39:28Z", "type": "commit"}, {"oid": "6c7ff67d58b414a52951e1c71c7cfab5fb8e7200", "url": "https://github.com/INRIA/spoon/commit/6c7ff67d58b414a52951e1c71c7cfab5fb8e7200", "message": "comment out field, because it is for later use", "committedDate": "2020-10-03T15:40:34Z", "type": "commit"}, {"oid": "cb877c4e05b8c39f6652e63f2ae2b1a4235cb3a7", "url": "https://github.com/INRIA/spoon/commit/cb877c4e05b8c39f6652e63f2ae2b1a4235cb3a7", "message": "remove unused fields", "committedDate": "2020-10-03T15:41:37Z", "type": "commit"}, {"oid": "c7965d60936f165f924a389a8b5ef091eddf3228", "url": "https://github.com/INRIA/spoon/commit/c7965d60936f165f924a389a8b5ef091eddf3228", "message": "add test checking, that every private field has a read", "committedDate": "2020-10-03T15:44:53Z", "type": "commit"}, {"oid": "c05a1bad1965470565958f414a93164756647923", "url": "https://github.com/INRIA/spoon/commit/c05a1bad1965470565958f414a93164756647923", "message": "add newline", "committedDate": "2020-10-04T15:05:06Z", "type": "commit"}, {"oid": "a1b305ed2f541da86207510b05fd4670775200d3", "url": "https://github.com/INRIA/spoon/commit/a1b305ed2f541da86207510b05fd4670775200d3", "message": "remove newline triggering CI", "committedDate": "2020-10-04T15:05:34Z", "type": "commit"}, {"oid": "df0b3cfd69a51aa5d6e1bb90a1f15e34e251da6d", "url": "https://github.com/INRIA/spoon/commit/df0b3cfd69a51aa5d6e1bb90a1f15e34e251da6d", "message": "comment out references", "committedDate": "2020-10-04T15:23:50Z", "type": "commit"}, {"oid": "442e8f3c2be65a696c1357ab6827d2da9c65b910", "url": "https://github.com/INRIA/spoon/commit/442e8f3c2be65a696c1357ab6827d2da9c65b910", "message": "remove assignment", "committedDate": "2020-10-04T15:51:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMzI3NA==", "url": "https://github.com/INRIA/spoon/pull/3631#discussion_r499713274", "bodyText": "Instead of commenting the fields and co, it would be better to simply remove them", "author": "monperrus", "createdAt": "2020-10-05T16:10:02Z", "path": "src/main/java/spoon/metamodel/MMMethodKind.java", "diffHunk": "@@ -77,13 +77,12 @@\n \tprivate final Predicate<CtMethod<?>> detector;\n \tprivate final int level;\n \tprivate final boolean multi;\n-\tprivate final int valueParameterIndex;\n \n \tMMMethodKind(int valueParameterIndex, boolean multi, int level, Predicate<CtMethod<?>> detector) {\n \t\tthis.multi = multi;\n \t\tthis.level = level;\n \t\tthis.detector = detector;\n-\t\tthis.valueParameterIndex = valueParameterIndex;\n+\t\t// valueParameterindex is never used", "originalCommit": "442e8f3c2be65a696c1357ab6827d2da9c65b910", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNTgzMw==", "url": "https://github.com/INRIA/spoon/pull/3631#discussion_r499725833", "bodyText": "I was unsure about it, because the field is marked for future use.", "author": "MartinWitt", "createdAt": "2020-10-05T16:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMzI3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyMjAyMA==", "url": "https://github.com/INRIA/spoon/pull/3631#discussion_r500022020", "bodyText": "let's remove it completely", "author": "monperrus", "createdAt": "2020-10-06T05:56:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMzI3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEzODY0NQ==", "url": "https://github.com/INRIA/spoon/pull/3631#discussion_r500138645", "bodyText": "You are correct, it's an Enum => we can simply remove the parameter because enums cant be subclassed and the value was private.", "author": "MartinWitt", "createdAt": "2020-10-06T09:34:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMzI3NA=="}], "type": "inlineReview", "revised_code": {"commit": "c0e3a9ca830de34bdb61d71c50c1a79d9eb58ba9", "chunk": "diff --git a/src/main/java/spoon/metamodel/MMMethodKind.java b/src/main/java/spoon/metamodel/MMMethodKind.java\nindex 1f3624cf..104b9eab 100644\n--- a/src/main/java/spoon/metamodel/MMMethodKind.java\n+++ b/src/main/java/spoon/metamodel/MMMethodKind.java\n\n@@ -60,29 +64,28 @@ public enum MMMethodKind {\n \t/**\n \t * void remove(T)\n \t */\n-\tREMOVE(0, true, 1, m -> m.getParameters().size() == 1 && m.getSimpleName().startsWith(\"remove\")),\n+\tREMOVE(true, 1, m -> m.getParameters().size() == 1 && m.getSimpleName().startsWith(\"remove\")),\n \n \t/**\n \t * Return element by its name\n \t * T get(String)\n \t */\n-\tGET_BY(-1, true, 1, m -> m.getSimpleName().startsWith(\"get\")\n+\tGET_BY(true, 1, m -> m.getSimpleName().startsWith(\"get\")\n \t\t\t&& m.getParameters().size() == 1  && m.getParameters().get(0).getType().getQualifiedName().equals(String.class.getName())),\n \n \t/**\n \t * The not matching method\n \t */\n-\tOTHER(-2, false, 0, m -> true);\n+\tOTHER(false, 0, m -> true);\n \n \tprivate final Predicate<CtMethod<?>> detector;\n \tprivate final int level;\n \tprivate final boolean multi;\n \n-\tMMMethodKind(int valueParameterIndex, boolean multi, int level, Predicate<CtMethod<?>> detector) {\n+\tMMMethodKind(boolean multi, int level, Predicate<CtMethod<?>> detector) {\n \t\tthis.multi = multi;\n \t\tthis.level = level;\n \t\tthis.detector = detector;\n-\t\t// valueParameterindex is never used\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMzU2MQ==", "url": "https://github.com/INRIA/spoon/pull/3631#discussion_r499713561", "bodyText": "out of curiosity how long does this new check take?", "author": "monperrus", "createdAt": "2020-10-05T16:10:29Z", "path": "src/test/java/spoon/test/architecture/SpoonArchitectureEnforcerTest.java", "diffHunk": "@@ -459,4 +465,23 @@ private static String computeDifference(Set<?> set1, Set<?> set2) {\n \t\t}\n \t\treturn StringUtils.join(results, \"\\n\");\n \t}\n+\tprivate void checkFields(CtModel model) {", "originalCommit": "442e8f3c2be65a696c1357ab6827d2da9c65b910", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NjgxNQ==", "url": "https://github.com/INRIA/spoon/pull/3631#discussion_r499746815", "bodyText": "some testing shows around 60 seconds but I have an idea to speed it up.\nEdit: Local Tests with HashSet reduce it to < 5 seconds", "author": "MartinWitt", "createdAt": "2020-10-05T17:06:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMzU2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f3cfd9e22d8306d46c7de427eec9e28c3f956fac", "chunk": "diff --git a/src/test/java/spoon/test/architecture/SpoonArchitectureEnforcerTest.java b/src/test/java/spoon/test/architecture/SpoonArchitectureEnforcerTest.java\nindex ccc25e57..edeefc10 100644\n--- a/src/test/java/spoon/test/architecture/SpoonArchitectureEnforcerTest.java\n+++ b/src/test/java/spoon/test/architecture/SpoonArchitectureEnforcerTest.java\n\n@@ -472,14 +472,17 @@ public class SpoonArchitectureEnforcerTest {\n \t\tfields.removeIf(v -> !v.isPrivate());\n \t\t// remove fields for serialization gods\n \t\tfields.removeIf(v -> v.getSimpleName().equals(\"serialVersionUID\"));\n-\n-\t\tList<CtFieldRead<?>> fieldRead = model.getElements(new TypeFilter<>(CtFieldRead.class));\n \t\t// some fieldReads have no variable declaration\n+\t\tList<CtFieldRead<?>> fieldRead = model.getElements(new TypeFilter<>(CtFieldRead.class));\n \t\tfieldRead.removeIf(v -> v.getVariable().getFieldDeclaration() == null);\n-\n+\t\t// convert to HashSet for faster lookup. We trade memory for lookup speed.\n+\t\tHashSet<CtField<?>> lookUp = fieldRead.stream()\n+\t\t\t\t.map(CtFieldRead::getVariable)\n+\t\t\t\t.map(v -> v.getFieldDeclaration())\n+\t\t\t\t.collect(Collectors.toCollection(HashSet::new));\n \t\tList<CtField<?>> fieldsWithRead = fields.stream()\n-\t\t// every field must have a read\n-\t\t.filter(field -> fieldRead.stream().anyMatch(read -> read.getVariable().getFieldDeclaration().equals(field)))\n+\t\t\t\t// \t every field must have a read\n+\t\t\t\t.filter(field -> lookUp.contains(field))\n \t\t.collect(Collectors.toList());\n \t\tfields.removeAll(fieldsWithRead);\n \t\tassertEquals(\"Some Fields have no read/write\", Collections.emptyList(), fields);\n"}}, {"oid": "6ed0ad94f5924bf67e7aa687556eb4c4a6d614ac", "url": "https://github.com/INRIA/spoon/commit/6ed0ad94f5924bf67e7aa687556eb4c4a6d614ac", "message": "remove unused fields instead of commenting them out", "committedDate": "2020-10-05T16:31:57Z", "type": "commit"}, {"oid": "f3cfd9e22d8306d46c7de427eec9e28c3f956fac", "url": "https://github.com/INRIA/spoon/commit/f3cfd9e22d8306d46c7de427eec9e28c3f956fac", "message": "improve performance of test case", "committedDate": "2020-10-05T20:55:47Z", "type": "commit"}, {"oid": "bc114f6a01638d75627ff166178f62fb64016415", "url": "https://github.com/INRIA/spoon/commit/bc114f6a01638d75627ff166178f62fb64016415", "message": " add test case to architecture documentation", "committedDate": "2020-10-05T21:14:06Z", "type": "commit"}, {"oid": "c0e3a9ca830de34bdb61d71c50c1a79d9eb58ba9", "url": "https://github.com/INRIA/spoon/commit/c0e3a9ca830de34bdb61d71c50c1a79d9eb58ba9", "message": "remove valueParameterIndex completly", "committedDate": "2020-10-06T09:33:34Z", "type": "commit"}]}