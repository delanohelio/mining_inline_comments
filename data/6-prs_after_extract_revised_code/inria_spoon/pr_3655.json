{"pr_number": 3655, "pr_title": "fix: more resilient wrt to errors during shadow class building", "pr_createdAt": "2020-10-16T10:17:45Z", "pr_url": "https://github.com/INRIA/spoon/pull/3655", "timeline": [{"oid": "de15384c29db00c6bf6656117dbac17db7e6ba5b", "url": "https://github.com/INRIA/spoon/commit/de15384c29db00c6bf6656117dbac17db7e6ba5b", "message": "Replaced throwing an exception 'SpoonClassNotFoundException' with logging.", "committedDate": "2020-10-16T07:07:31Z", "type": "commit"}, {"oid": "d9b990c551a8bdf17eb19a3a92172496bfca6e59", "url": "https://github.com/INRIA/spoon/commit/d9b990c551a8bdf17eb19a3a92172496bfca6e59", "message": "remove unused import", "committedDate": "2020-10-16T10:57:49Z", "type": "commit"}, {"oid": "2e282b29c91a8b54b5494863d834354ec2cc64f1", "url": "https://github.com/INRIA/spoon/commit/2e282b29c91a8b54b5494863d834354ec2cc64f1", "message": "Added a test when JavaReflectionTreeBuilder throws an exception.", "committedDate": "2020-10-20T06:51:23Z", "type": "commit"}, {"oid": "4c8fbcf8e97f2f298a94f5f6b2f5d4c1be1466e1", "url": "https://github.com/INRIA/spoon/commit/4c8fbcf8e97f2f298a94f5f6b2f5d4c1be1466e1", "message": "Minor fix. The test for a class and a single test are run differently.", "committedDate": "2020-10-20T07:53:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg4MzA3NQ==", "url": "https://github.com/INRIA/spoon/pull/3655#discussion_r509883075", "bodyText": "could you add a comment \"contract: ...\" in natural language where you describe the intention of the test? Thanks", "author": "monperrus", "createdAt": "2020-10-22T05:09:56Z", "path": "src/test/java/spoon/support/visitor/java/JavaReflectionTreeBuilderTest.java", "diffHunk": "@@ -682,4 +683,14 @@ public boolean matches(CtType element) {\n \t\tassertEquals(true, ctClass.isShadow());\n \t\tassertEquals(\"foo\", ctClass.getMethods().toArray(new CtMethod[0])[0].getSimpleName());\n \t}\n+\n+\t@Test\n+\tpublic void testExpectedExceptionInInitializerError() {\n+\t\ttry {", "originalCommit": "4c8fbcf8e97f2f298a94f5f6b2f5d4c1be1466e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIxNDUyOA==", "url": "https://github.com/INRIA/spoon/pull/3655#discussion_r510214528", "bodyText": "ok", "author": "BuzzMS", "createdAt": "2020-10-22T14:36:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg4MzA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c090ca97b3281bd19559843251de7a12b26a1976", "chunk": "diff --git a/src/test/java/spoon/support/visitor/java/JavaReflectionTreeBuilderTest.java b/src/test/java/spoon/support/visitor/java/JavaReflectionTreeBuilderTest.java\nindex 58dfb646..b0c30d76 100644\n--- a/src/test/java/spoon/support/visitor/java/JavaReflectionTreeBuilderTest.java\n+++ b/src/test/java/spoon/support/visitor/java/JavaReflectionTreeBuilderTest.java\n\n@@ -685,12 +684,18 @@ public class JavaReflectionTreeBuilderTest {\n \t}\n \n \t@Test\n-\tpublic void testExpectedExceptionInInitializerError() {\n-\t\ttry {\n-\t\t\tnew JavaReflectionTreeBuilder(createFactory()).scan(spoon.support.visitor.java.testclasses.NPEInStaticInit.class);\n-\t\t\tfail();\n-\t\t}\n-\t\tcatch (ExceptionInInitializerError expected) {\n-\t\t}\n+\tpublic void testCannotGetDefaultExpressionBecauseOfException() {\n+\t\t/*\n+\t\t * contract:\n+\t\t * \t\t\t\tJavaReflectionTreeBuilder can't set defaultExpression for the field (public static primitive),\n+\t\t * \t\t\t\tas Reflection API throws the exception ExceptionInInitializerError when attempting to get it.\n+\t\t * \t\t\t\t{@link JavaReflectionTreeBuilder#visitField(Filed)} ignores any exceptions.\n+\t\t */\n+\t\tCtType<spoon.support.visitor.java.testclasses.NPEInStaticInit> ctType =\n+\t\t\t\tnew JavaReflectionTreeBuilder(createFactory()).scan(spoon.support.visitor.java.testclasses.NPEInStaticInit.class);\n+\n+\t\tCtField<?> value = ctType.getField(\"VALUE\");\n+\t\t// should have gotten '1'\n+\t\tassertNull(value.getDefaultExpression());\n \t}\n }\n"}}, {"oid": "c090ca97b3281bd19559843251de7a12b26a1976", "url": "https://github.com/INRIA/spoon/commit/c090ca97b3281bd19559843251de7a12b26a1976", "message": "Rework of exception (\"cannot create shadow class\")", "committedDate": "2020-10-22T14:15:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3NjI3OQ==", "url": "https://github.com/INRIA/spoon/pull/3655#discussion_r510576279", "bodyText": "What about catching \"IllegalAccessException | ExceptionInInitializerError\"?\nThanks a lot for the changes!", "author": "monperrus", "createdAt": "2020-10-23T03:40:52Z", "path": "src/main/java/spoon/support/visitor/java/JavaReflectionTreeBuilder.java", "diffHunk": "@@ -296,7 +296,7 @@ public void visitField(Field field) {\n \t\t\t\tCtLiteral<Object> defaultExpression = factory.createLiteral(field.get(null));\n \t\t\t\tctField.setDefaultExpression(defaultExpression);\n \t\t\t}\n-\t\t} catch (IllegalAccessException e) {", "originalCommit": "c090ca97b3281bd19559843251de7a12b26a1976", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8287112e017303d42837c9a855aca8d97909f8c9", "chunk": "diff --git a/src/main/java/spoon/support/visitor/java/JavaReflectionTreeBuilder.java b/src/main/java/spoon/support/visitor/java/JavaReflectionTreeBuilder.java\nindex 63fc1aed..c9e0699e 100644\n--- a/src/main/java/spoon/support/visitor/java/JavaReflectionTreeBuilder.java\n+++ b/src/main/java/spoon/support/visitor/java/JavaReflectionTreeBuilder.java\n\n@@ -296,7 +296,7 @@ public class JavaReflectionTreeBuilder extends JavaReflectionVisitorImpl {\n \t\t\t\tCtLiteral<Object> defaultExpression = factory.createLiteral(field.get(null));\n \t\t\t\tctField.setDefaultExpression(defaultExpression);\n \t\t\t}\n-\t\t} catch (Throwable e) {\n+\t\t} catch (IllegalAccessException | ExceptionInInitializerError | UnsatisfiedLinkError e) {\n \t\t\t// ignore\n \t\t}\n \n"}}, {"oid": "8287112e017303d42837c9a855aca8d97909f8c9", "url": "https://github.com/INRIA/spoon/commit/8287112e017303d42837c9a855aca8d97909f8c9", "message": "Rework of exception N2 (\"cannot create shadow class\")", "committedDate": "2020-10-23T09:17:59Z", "type": "commit"}]}