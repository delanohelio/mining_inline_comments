{"pr_number": 8534, "pr_title": "Replace StringEscapeUtils with alternatives #8533", "pr_createdAt": "2020-12-07T18:23:05Z", "pr_url": "https://github.com/enonic/xp/pull/8534", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcyODA3Mw==", "url": "https://github.com/enonic/xp/pull/8534#discussion_r537728073", "bodyText": "move to internal", "author": "rymsha", "createdAt": "2020-12-07T18:23:50Z", "path": "modules/core/core-api/src/main/java/com/enonic/xp/util/HtmlHelper.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package com.enonic.xp.util;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.Node;\n+import org.jsoup.nodes.TextNode;\n+import org.jsoup.parser.Parser;\n+import org.jsoup.parser.Tag;\n+import org.jsoup.select.NodeTraversor;\n+import org.jsoup.select.NodeVisitor;\n+\n+public final class HtmlHelper", "originalCommit": "ca8cd2bb719b46bce1d040b230594433a9a60b4a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1fff2ffb74c992aa5f4551baccbe2669cbff2f7", "chunk": "diff --git a/modules/core/core-api/src/main/java/com/enonic/xp/util/HtmlHelper.java b/modules/core/core-api/src/main/java/com/enonic/xp/util/HtmlHelper.java\ndeleted file mode 100644\nindex 396b69c2bd..0000000000\n--- a/modules/core/core-api/src/main/java/com/enonic/xp/util/HtmlHelper.java\n+++ /dev/null\n\n@@ -1,132 +0,0 @@\n-package com.enonic.xp.util;\n-\n-import org.jsoup.Jsoup;\n-import org.jsoup.nodes.Element;\n-import org.jsoup.nodes.Node;\n-import org.jsoup.nodes.TextNode;\n-import org.jsoup.parser.Parser;\n-import org.jsoup.parser.Tag;\n-import org.jsoup.select.NodeTraversor;\n-import org.jsoup.select.NodeVisitor;\n-\n-public final class HtmlHelper\n-{\n-    private HtmlHelper()\n-    {\n-    }\n-\n-    public static String unescape( String html )\n-    {\n-        if ( html.isBlank() )\n-        {\n-            return html;\n-        }\n-        return Parser.unescapeEntities( html, false );\n-    }\n-\n-    /**\n-     * Extracts text from HTML. Whitespace is normalized and trimmed.\n-     *\n-     * @param html string with HTML, can't be null\n-     * @return extracted text\n-     */\n-    public static String htmlToText( String html )\n-    {\n-        if ( html.isBlank() )\n-        {\n-            return \"\";\n-        }\n-        return Jsoup.parse( html ).text();\n-    }\n-\n-    /**\n-     * Simulates regex like (?:<[^>]*>)+ HTML tag stripper where tags replaced with space.\n-     * But does not fail on technically valid cases like &lt;a about=\"&gt;\"text&lt;/a&gt;\n-     *\n-     * @param html string with HTML, can't be null\n-     * @return extracted text\n-     */\n-    public static String htmlToTextLegacy( String html )\n-    {\n-        if ( html.isBlank() )\n-        {\n-            return html;\n-        }\n-\n-        final StringBuilder stringBuilder = new StringBuilder();\n-\n-        NodeTraversor.traverse( new HtmlStripNodeVisitor( stringBuilder ), Jsoup.parse( html ) );\n-\n-        return stringBuilder.toString();\n-    }\n-\n-    private static class HtmlStripNodeVisitor\n-        implements NodeVisitor\n-    {\n-        private static final Tag BODY_TAG = Tag.valueOf( \"body\" );\n-\n-        private static final Tag HEAD_TAG = Tag.valueOf( \"head\" );\n-\n-        private static final String SPACE = \" \";\n-\n-        private final StringBuilder builder;\n-\n-        public HtmlStripNodeVisitor( final StringBuilder builder )\n-        {\n-            this.builder = builder;\n-        }\n-\n-        private boolean delimited = false;\n-\n-        public void head( Node node, int depth )\n-        {\n-            if ( depth == 0 )\n-            {\n-                return; // skip root tag\n-            }\n-            if ( node instanceof TextNode )\n-            {\n-                final TextNode textNode = (TextNode) node;\n-                final String wholeText = textNode.getWholeText();\n-                final Node parent = textNode.parent();\n-                final boolean inBody = parent instanceof Element && ( (Element) parent ).tag().equals( BODY_TAG );\n-\n-                // All text surrounded by tag (except body tag) wrapped with space.\n-                final boolean surround = !wholeText.isBlank() && !inBody;\n-\n-                if ( surround )\n-                {\n-                    builder.append( SPACE );\n-                }\n-                builder.append( wholeText );\n-                if ( surround )\n-                {\n-                    builder.append( SPACE );\n-                    delimited = true;\n-                }\n-\n-                delimited = surround;\n-            }\n-            else if ( node instanceof Element )\n-            {\n-                final Element element = (Element) node;\n-                // empty tags (except head tag) replaced with space.\n-                if ( !delimited && element.childNodeSize() == 0 && !element.tag().equals( HEAD_TAG ) )\n-                {\n-                    builder.append( SPACE );\n-                    delimited = true;\n-                }\n-            }\n-            else\n-            {\n-                // comments replaced with space.\n-                builder.append( SPACE );\n-                delimited = true;\n-            }\n-        }\n-\n-        public void tail( Node node, int depth )\n-        {\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcyODY0MQ==", "url": "https://github.com/enonic/xp/pull/8534#discussion_r537728641", "bodyText": "why unescape here?", "author": "rymsha", "createdAt": "2020-12-07T18:24:39Z", "path": "modules/portal/portal-impl/src/main/java/com/enonic/xp/portal/impl/macro/EmbedIframeMacroProcessor.java", "diffHunk": "@@ -29,7 +29,7 @@ public PortalResponse process( final MacroContext macroContext )\n             return generateNonIframeResponse( macroContext );\n         }\n \n-        return generateResponse( StringEscapeUtils.unescapeHtml( macroContext.getBody() ) );\n+        return generateResponse( HtmlHelper.unescape( macroContext.getBody() ) );", "originalCommit": "ca8cd2bb719b46bce1d040b230594433a9a60b4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE1NDc5OA==", "url": "https://github.com/enonic/xp/pull/8534#discussion_r539154798", "bodyText": "see #8535", "author": "rymsha", "createdAt": "2020-12-09T09:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcyODY0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f1fff2ffb74c992aa5f4551baccbe2669cbff2f7", "chunk": "diff --git a/modules/portal/portal-impl/src/main/java/com/enonic/xp/portal/impl/macro/EmbedIframeMacroProcessor.java b/modules/portal/portal-impl/src/main/java/com/enonic/xp/portal/impl/macro/EmbedIframeMacroProcessor.java\nindex 76d86b68fa..a345d9283c 100644\n--- a/modules/portal/portal-impl/src/main/java/com/enonic/xp/portal/impl/macro/EmbedIframeMacroProcessor.java\n+++ b/modules/portal/portal-impl/src/main/java/com/enonic/xp/portal/impl/macro/EmbedIframeMacroProcessor.java\n\n@@ -24,12 +24,13 @@ public class EmbedIframeMacroProcessor\n     @Override\n     public PortalResponse process( final MacroContext macroContext )\n     {\n-        if ( !isIframeHtml( macroContext.getBody() ) )\n+        final String body = HtmlHelper.unescape( macroContext.getBody() );\n+        if ( isIframeHtml( body ) )\n         {\n-            return generateNonIframeResponse( macroContext );\n+            return generateResponse( body );\n         }\n+        return generateNonIframeResponse( macroContext );\n \n-        return generateResponse( HtmlHelper.unescape( macroContext.getBody() ) );\n     }\n \n     private PortalResponse generateNonIframeResponse( final MacroContext macroContext )\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcyOTA1NQ==", "url": "https://github.com/enonic/xp/pull/8534#discussion_r537729055", "bodyText": "why unescape here?", "author": "rymsha", "createdAt": "2020-12-07T18:25:19Z", "path": "modules/core/core-macro/src/main/java/com/enonic/xp/impl/macro/MacroParser.java", "diffHunk": "@@ -130,7 +129,7 @@ private void parseAttribute()\n         match( '=' );\n         ws();\n         match( '\"' );\n-        final String value = StringEscapeUtils.unescapeHtml( parseAttributeValue() );\n+        final String value = HtmlHelper.unescape( parseAttributeValue() );", "originalCommit": "ca8cd2bb719b46bce1d040b230594433a9a60b4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTExNTA3OA==", "url": "https://github.com/enonic/xp/pull/8534#discussion_r539115078", "bodyText": "because macro defined in html", "author": "rymsha", "createdAt": "2020-12-09T08:46:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcyOTA1NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzczMDcyNQ==", "url": "https://github.com/enonic/xp/pull/8534#discussion_r537730725", "bodyText": "maybe don't use legacy at all. intention is to generate indexed text from html", "author": "rymsha", "createdAt": "2020-12-07T18:27:45Z", "path": "modules/core/core-api/src/main/java/com/enonic/xp/index/HtmlStripper.java", "diffHunk": "@@ -25,18 +18,15 @@ public Value process( final Value value )\n             return value;\n         }\n \n-        final Matcher matcher = XML_TAG_PATTERN.matcher( value.toString() );\n-        final String strippedHtml = matcher.replaceAll( \" \" );\n-        final String unescapedHtml = StringEscapeUtils.unescapeHtml( strippedHtml );\n+        final String htmlStripped = HtmlHelper.htmlToTextLegacy( value.asString() );", "originalCommit": "ca8cd2bb719b46bce1d040b230594433a9a60b4a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1fff2ffb74c992aa5f4551baccbe2669cbff2f7", "chunk": "diff --git a/modules/core/core-api/src/main/java/com/enonic/xp/index/HtmlStripper.java b/modules/core/core-api/src/main/java/com/enonic/xp/index/HtmlStripper.java\nindex e81c6f51c7..9b43c74c41 100644\n--- a/modules/core/core-api/src/main/java/com/enonic/xp/index/HtmlStripper.java\n+++ b/modules/core/core-api/src/main/java/com/enonic/xp/index/HtmlStripper.java\n\n@@ -18,7 +18,7 @@ final class HtmlStripper\n             return value;\n         }\n \n-        final String htmlStripped = HtmlHelper.htmlToTextLegacy( value.asString() );\n+        final String htmlStripped = HtmlHelper.htmlToText( value.asString() );\n \n         if ( ValueTypes.XML.equals( value.getType() ) )\n         {\n"}}, {"oid": "f1fff2ffb74c992aa5f4551baccbe2669cbff2f7", "url": "https://github.com/enonic/xp/commit/f1fff2ffb74c992aa5f4551baccbe2669cbff2f7", "message": "Replace StringEscapeUtils with alternatives #8533", "committedDate": "2020-12-09T08:42:42Z", "type": "commit"}, {"oid": "f1fff2ffb74c992aa5f4551baccbe2669cbff2f7", "url": "https://github.com/enonic/xp/commit/f1fff2ffb74c992aa5f4551baccbe2669cbff2f7", "message": "Replace StringEscapeUtils with alternatives #8533", "committedDate": "2020-12-09T08:42:42Z", "type": "forcePushed"}]}