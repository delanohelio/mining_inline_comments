{"pr_number": 8013, "pr_title": "System Dumps straight into/from archive", "pr_createdAt": "2020-04-08T16:24:16Z", "pr_url": "https://github.com/enonic/xp/pull/8013", "timeline": [{"oid": "4bb509183bef5b2735d7c4d239415f2d215453d9", "url": "https://github.com/enonic/xp/commit/4bb509183bef5b2735d7c4d239415f2d215453d9", "message": "save", "committedDate": "2020-04-16T15:16:20Z", "type": "forcePushed"}, {"oid": "de4480a14eeec65c136165c4a4b0eef6117f4a47", "url": "https://github.com/enonic/xp/commit/de4480a14eeec65c136165c4a4b0eef6117f4a47", "message": "System Dumps straight into/from archive #8013", "committedDate": "2020-04-17T09:58:19Z", "type": "forcePushed"}, {"oid": "4e7679a658eb4556e83af197466fa146585df674", "url": "https://github.com/enonic/xp/commit/4e7679a658eb4556e83af197466fa146585df674", "message": "Serialize/Deserialize System Dumps straight into/from archive #7312", "committedDate": "2020-04-17T10:12:06Z", "type": "commit"}, {"oid": "4e7679a658eb4556e83af197466fa146585df674", "url": "https://github.com/enonic/xp/commit/4e7679a658eb4556e83af197466fa146585df674", "message": "Serialize/Deserialize System Dumps straight into/from archive #7312", "committedDate": "2020-04-17T10:12:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE3MDU2OQ==", "url": "https://github.com/enonic/xp/pull/8013#discussion_r410170569", "bodyText": "what about to check on NULL before closing?", "author": "anatol-sialitski", "createdAt": "2020-04-17T11:47:47Z", "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/dump/writer/AbstractDumpWriter.java", "diffHunk": "@@ -0,0 +1,232 @@\n+package com.enonic.xp.repo.impl.dump.writer;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.stream.Stream;\n+import java.util.zip.GZIPOutputStream;\n+\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.enonic.xp.blob.BlobKey;\n+import com.enonic.xp.blob.BlobRecord;\n+import com.enonic.xp.blob.BlobStore;\n+import com.enonic.xp.blob.NodeVersionKey;\n+import com.enonic.xp.blob.Segment;\n+import com.enonic.xp.branch.Branch;\n+import com.enonic.xp.repo.impl.dump.DumpConstants;\n+import com.enonic.xp.repo.impl.dump.FilePaths;\n+import com.enonic.xp.repo.impl.dump.PathRef;\n+import com.enonic.xp.repo.impl.dump.RepoDumpException;\n+import com.enonic.xp.repo.impl.dump.blobstore.DumpBlobStore;\n+import com.enonic.xp.repo.impl.dump.model.BranchDumpEntry;\n+import com.enonic.xp.repo.impl.dump.model.CommitDumpEntry;\n+import com.enonic.xp.repo.impl.dump.model.DumpMeta;\n+import com.enonic.xp.repo.impl.dump.model.VersionsDumpEntry;\n+import com.enonic.xp.repo.impl.dump.serializer.DumpSerializer;\n+import com.enonic.xp.repo.impl.dump.serializer.json.DumpMetaJsonSerializer;\n+import com.enonic.xp.repo.impl.dump.serializer.json.JsonDumpSerializer;\n+import com.enonic.xp.repo.impl.node.NodeConstants;\n+import com.enonic.xp.repository.RepositoryId;\n+import com.enonic.xp.repository.RepositorySegmentUtils;\n+\n+public abstract class AbstractDumpWriter\n+    implements DumpWriter\n+{\n+    private final static Logger LOG = LoggerFactory.getLogger( FileDumpWriter.class );\n+\n+    private final DumpBlobStore dumpBlobStore;\n+\n+    private final BlobStore blobStore;\n+\n+    private final DumpSerializer serializer;\n+\n+    protected final FilePaths filePaths;\n+\n+    protected TarArchiveOutputStream tarOutputStream;\n+\n+    protected AbstractDumpWriter( final BlobStore blobStore, FilePaths filePaths, DumpBlobStore dumpBlobStore )\n+    {\n+        this.dumpBlobStore = dumpBlobStore;\n+        this.serializer = new JsonDumpSerializer();\n+        this.blobStore = blobStore;\n+        this.filePaths = filePaths;\n+    }\n+\n+    @Override\n+    public void writeDumpMetaData( final DumpMeta dumpMeta )\n+    {\n+        final PathRef dumpMetaFile = filePaths.metaDataFile();\n+\n+        try (final OutputStream outputStream = openMetaFileStream( dumpMetaFile ))\n+        {\n+            outputStream.write( new DumpMetaJsonSerializer().serialize( dumpMeta ) );\n+        }\n+        catch ( IOException e )\n+        {\n+            throw new RepoDumpException( \"Cannot write dump-meta file\", e );\n+        }\n+    }\n+\n+    @Override\n+    public void openBranchMeta( final RepositoryId repositoryId, final Branch branch )\n+    {\n+        final PathRef branchMetaPath = filePaths.branchMetaPath( repositoryId, branch );\n+        openTarStream( branchMetaPath );\n+    }\n+\n+    @Override\n+    public void openVersionsMeta( final RepositoryId repositoryId )\n+    {\n+        final PathRef versionMetaPath = filePaths.versionMetaPath( repositoryId );\n+        openTarStream( versionMetaPath );\n+    }\n+\n+    @Override\n+    public void openCommitsMeta( final RepositoryId repositoryId )\n+    {\n+        final PathRef commitMetaPath = filePaths.commitMetaPath( repositoryId );\n+        openTarStream( commitMetaPath );\n+    }\n+\n+    @Override\n+    public void closeMeta()\n+    {\n+        try\n+        {\n+            this.tarOutputStream.close();", "originalCommit": "4e7679a658eb4556e83af197466fa146585df674", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE3NTI1Ng==", "url": "https://github.com/enonic/xp/pull/8013#discussion_r410175256", "bodyText": "NPE is better because it will indicate a bug in the code.There are no normal conditions which would lead to tarOutputStream == null", "author": "rymsha", "createdAt": "2020-04-17T11:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE3MDU2OQ=="}], "type": "inlineReview", "revised_code": null}]}