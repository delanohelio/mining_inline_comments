{"pr_number": 8219, "pr_title": "Cluster health-check may cause applications inconsistencies #8086", "pr_createdAt": "2020-07-11T09:07:49Z", "pr_url": "https://github.com/enonic/xp/pull/8219", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3NTUwMw==", "url": "https://github.com/enonic/xp/pull/8219#discussion_r453175503", "bodyText": "40 is a magic number, that represents XP launcher start level. Find a way to un-hardcode it.", "author": "rymsha", "createdAt": "2020-07-11T09:15:01Z", "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/elasticsearch/snapshot/ClusterCleaner.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.enonic.xp.repo.impl.elasticsearch.snapshot;\n+\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.BundleException;\n+import org.osgi.framework.startlevel.BundleStartLevel;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.enonic.xp.event.Event;\n+import com.enonic.xp.event.EventListener;\n+import com.enonic.xp.repo.impl.RepositoryEvents;\n+\n+@Component(immediate = true)\n+public class ClusterCleaner\n+    implements EventListener\n+{\n+    private final static Logger LOG = LoggerFactory.getLogger( ClusterCleaner.class );\n+\n+    private final BundleContext bundleContext;\n+\n+    @Activate\n+    public ClusterCleaner( final BundleContext bundleContext )\n+    {\n+        this.bundleContext = bundleContext;\n+    }\n+\n+    @Override\n+    public void onEvent( final Event event )\n+    {\n+        if ( event.isType( RepositoryEvents.RESTORE_INITIALIZED_EVENT_TYPE ) )\n+        {\n+            for ( Bundle bundle : bundleContext.getBundles() )\n+            {\n+                if ( bundle.adapt( BundleStartLevel.class ).getStartLevel() > 40 )", "originalCommit": "f5e064500ddc17131e57405baececcfd28268fe6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8466b7f38ff0eea25f9ea39344b8582688a9a6ce", "chunk": "diff --git a/modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/elasticsearch/snapshot/ClusterCleaner.java b/modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/elasticsearch/snapshot/ClusterDestroyer.java\nsimilarity index 93%\nrename from modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/elasticsearch/snapshot/ClusterCleaner.java\nrename to modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/elasticsearch/snapshot/ClusterDestroyer.java\nindex 16259255e2..30b379bdc6 100644\n--- a/modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/elasticsearch/snapshot/ClusterCleaner.java\n+++ b/modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/elasticsearch/snapshot/ClusterDestroyer.java\n\n@@ -14,15 +14,15 @@ import com.enonic.xp.event.EventListener;\n import com.enonic.xp.repo.impl.RepositoryEvents;\n \n @Component(immediate = true)\n-public class ClusterCleaner\n+public class ClusterDestroyer\n     implements EventListener\n {\n-    private final static Logger LOG = LoggerFactory.getLogger( ClusterCleaner.class );\n+    private final static Logger LOG = LoggerFactory.getLogger( ClusterDestroyer.class );\n \n     private final BundleContext bundleContext;\n \n     @Activate\n-    public ClusterCleaner( final BundleContext bundleContext )\n+    public ClusterDestroyer( final BundleContext bundleContext )\n     {\n         this.bundleContext = bundleContext;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3NTU0Ng==", "url": "https://github.com/enonic/xp/pull/8219#discussion_r453175546", "bodyText": "grammar", "author": "rymsha", "createdAt": "2020-07-11T09:15:21Z", "path": "modules/core/core-repo/src/test/java/com/enonic/xp/repo/impl/dump/DumpServiceImplTest.java", "diffHunk": "@@ -1083,8 +1089,11 @@ private Node updateNode( final Node node )\n     {\n         return updateNode( UpdateNodeParams.create().\n             id( node.id() ).\n-            editor( ( n ) -> n.data.setInstant( \"timestamp\", Instant.now() ) ).\n+            editor( ( n ) -> {\n+                // Guarantee new node version is created. Without it update is ignored because node is not changed.\n+                // N.B. Writing \"current time\" (even System#nanoTime) does not have the same guarantee due low to timer resolution.", "originalCommit": "f5e064500ddc17131e57405baececcfd28268fe6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d65d2d4c3535bace5b3769cfa1bb1a47a241c367", "chunk": "diff --git a/modules/core/core-repo/src/test/java/com/enonic/xp/repo/impl/dump/DumpServiceImplTest.java b/modules/core/core-repo/src/test/java/com/enonic/xp/repo/impl/dump/DumpServiceImplTest.java\nindex 1bcf1c141d..544e5c0ee3 100644\n--- a/modules/core/core-repo/src/test/java/com/enonic/xp/repo/impl/dump/DumpServiceImplTest.java\n+++ b/modules/core/core-repo/src/test/java/com/enonic/xp/repo/impl/dump/DumpServiceImplTest.java\n\n@@ -1091,7 +1091,7 @@ public class DumpServiceImplTest\n             id( node.id() ).\n             editor( ( n ) -> {\n                 // Guarantee new node version is created. Without it update is ignored because node is not changed.\n-                // N.B. Writing \"current time\" (even System#nanoTime) does not have the same guarantee due low to timer resolution.\n+                // N.B. Writing \"current time\" (even System#nanoTime) does not have the same guarantee due low timer resolution.\n                 n.data.setLong( \"update\", UPDATE_COUNTER.incrementAndGet() );\n             } ).\n             build() );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3NTU4MA==", "url": "https://github.com/enonic/xp/pull/8219#discussion_r453175580", "bodyText": "move to own PR", "author": "rymsha", "createdAt": "2020-07-11T09:15:46Z", "path": "modules/core/core-api/src/main/java/com/enonic/xp/data/PropertyPath.java", "diffHunk": "@@ -35,7 +35,7 @@\n     public static PropertyPath from( final PropertyPath parentPath, final String element )\n     {\n         Preconditions.checkNotNull( parentPath, \"parentPath cannot be null\" );\n-        Preconditions.checkNotNull( parentPath, \"element cannot be null\" );", "originalCommit": "f5e064500ddc17131e57405baececcfd28268fe6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7c86c1519b22cc49e0c89e4474b3226742a09c9", "chunk": "diff --git a/modules/core/core-api/src/main/java/com/enonic/xp/data/PropertyPath.java b/modules/core/core-api/src/main/java/com/enonic/xp/data/PropertyPath.java\nindex 8aa3f83cf0..4f04aba56b 100644\n--- a/modules/core/core-api/src/main/java/com/enonic/xp/data/PropertyPath.java\n+++ b/modules/core/core-api/src/main/java/com/enonic/xp/data/PropertyPath.java\n\n@@ -35,7 +35,7 @@ public final class PropertyPath\n     public static PropertyPath from( final PropertyPath parentPath, final String element )\n     {\n         Preconditions.checkNotNull( parentPath, \"parentPath cannot be null\" );\n-        Preconditions.checkNotNull( element, \"element cannot be null\" );\n+        Preconditions.checkNotNull( parentPath, \"element cannot be null\" );\n         return new PropertyPath( parentPath, new Element( element ) );\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3NTY2MA==", "url": "https://github.com/enonic/xp/pull/8219#discussion_r453175660", "bodyText": "call it readyToInitialize", "author": "rymsha", "createdAt": "2020-07-11T09:16:41Z", "path": "modules/core/core-api/src/main/java/com/enonic/xp/init/Initializer.java", "diffHunk": "@@ -72,6 +84,8 @@ public void initialize()\n \n     protected abstract void doInitialize();\n \n+    protected abstract boolean canInitialize();", "originalCommit": "f5e064500ddc17131e57405baececcfd28268fe6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ac40437d07f5acc7f396d5b548700112a7cac9cd", "chunk": "diff --git a/modules/core/core-api/src/main/java/com/enonic/xp/init/Initializer.java b/modules/core/core-api/src/main/java/com/enonic/xp/init/Initializer.java\nindex 195594da84..b77ec4b281 100644\n--- a/modules/core/core-api/src/main/java/com/enonic/xp/init/Initializer.java\n+++ b/modules/core/core-api/src/main/java/com/enonic/xp/init/Initializer.java\n\n@@ -84,7 +75,7 @@ public abstract class Initializer\n \n     protected abstract void doInitialize();\n \n-    protected abstract boolean canInitialize();\n+    protected abstract boolean readyToInitialize();\n \n     protected abstract String getInitializationSubject();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3NTcxOA==", "url": "https://github.com/enonic/xp/pull/8219#discussion_r453175718", "bodyText": "It would be nice not to extend API.", "author": "rymsha", "createdAt": "2020-07-11T09:17:19Z", "path": "modules/core/core-api/src/main/java/com/enonic/xp/repository/CreateRepositoryParams.java", "diffHunk": "@@ -54,6 +57,11 @@ public ChildOrder getRootChildOrder()\n         return rootChildOrder;\n     }\n \n+    public boolean isFailIfExists()", "originalCommit": "f5e064500ddc17131e57405baececcfd28268fe6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98420953b2afe0800c36a7c95e87bd98c9bbba46", "chunk": "diff --git a/modules/core/core-api/src/main/java/com/enonic/xp/repository/CreateRepositoryParams.java b/modules/core/core-api/src/main/java/com/enonic/xp/repository/CreateRepositoryParams.java\nindex d08e8711a3..00ef1e67d6 100644\n--- a/modules/core/core-api/src/main/java/com/enonic/xp/repository/CreateRepositoryParams.java\n+++ b/modules/core/core-api/src/main/java/com/enonic/xp/repository/CreateRepositoryParams.java\n\n@@ -57,11 +54,6 @@ public class CreateRepositoryParams\n         return rootChildOrder;\n     }\n \n-    public boolean isFailIfExists()\n-    {\n-        return failIfExists;\n-    }\n-\n     public static Builder create()\n     {\n         return new Builder();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3NTk3NQ==", "url": "https://github.com/enonic/xp/pull/8219#discussion_r453175975", "bodyText": "make green not part of default branch", "author": "rymsha", "createdAt": "2020-07-11T09:20:37Z", "path": "modules/core/core-elasticsearch/src/main/java/com/enonic/xp/elasticsearch/impl/ElasticsearchCluster.java", "diffHunk": "@@ -192,26 +124,24 @@ private DiscoveryNodes getMembers()\n             indices( \"\" ).\n             masterNodeTimeout( CLUSTER_HEALTH_TIMEOUT );\n \n-        final ClusterStateResponse response = this.node.client().admin().cluster().state( clusterStateRequest ).actionGet();\n+        final ClusterStateResponse response = node.client().admin().cluster().state( clusterStateRequest ).actionGet();\n \n         return response.getState().getNodes();\n     }\n \n     private ClusterHealth toClusterHealth( final ClusterHealthResponse healthResponse )\n     {\n-        if ( healthResponse.getStatus() == org.elasticsearch.cluster.health.ClusterHealthStatus.RED )\n+        switch ( healthResponse.getStatus() )\n         {\n-            return ClusterHealth.create().\n-                status( ClusterHealthStatus.RED ).\n-                errorMessage( healthResponse.toString() ).\n-                build();\n+            case RED:\n+                return ClusterHealth.create().\n+                    status( ClusterHealthStatus.RED ).\n+                    errorMessage( healthResponse.toString() ).\n+                    build();\n+            case YELLOW:\n+                return ClusterHealth.yellow();\n+            default:\n+                return ClusterHealth.green();", "originalCommit": "f5e064500ddc17131e57405baececcfd28268fe6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d65d2d4c3535bace5b3769cfa1bb1a47a241c367", "chunk": "diff --git a/modules/core/core-elasticsearch/src/main/java/com/enonic/xp/elasticsearch/impl/ElasticsearchCluster.java b/modules/core/core-elasticsearch/src/main/java/com/enonic/xp/elasticsearch/impl/ElasticsearchCluster.java\nindex b82192afad..33ee51bd58 100644\n--- a/modules/core/core-elasticsearch/src/main/java/com/enonic/xp/elasticsearch/impl/ElasticsearchCluster.java\n+++ b/modules/core/core-elasticsearch/src/main/java/com/enonic/xp/elasticsearch/impl/ElasticsearchCluster.java\n\n@@ -133,15 +133,17 @@ public final class ElasticsearchCluster\n     {\n         switch ( healthResponse.getStatus() )\n         {\n+            case GREEN:\n+                return ClusterHealth.green();\n+            case YELLOW:\n+                return ClusterHealth.yellow();\n             case RED:\n                 return ClusterHealth.create().\n                     status( ClusterHealthStatus.RED ).\n                     errorMessage( healthResponse.toString() ).\n                     build();\n-            case YELLOW:\n-                return ClusterHealth.yellow();\n             default:\n-                return ClusterHealth.green();\n+                throw new IllegalStateException( \"Unknown ES Health status \" + healthResponse.getStatus() );\n         }\n     }\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3NjMyMg==", "url": "https://github.com/enonic/xp/pull/8219#discussion_r453176322", "bodyText": "de-optimize / inline", "author": "rymsha", "createdAt": "2020-07-11T09:25:12Z", "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/dump/RepoDumper.java", "diffHunk": "@@ -77,11 +76,11 @@\n \n     private RepoDumper( final Builder builder )\n     {\n-        this.repositoryId = builder.repositoryId;\n+        this.repository = builder.repository;\n+        this.repositoryId = builder.repository.getId();", "originalCommit": "f5e064500ddc17131e57405baececcfd28268fe6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8466b7f38ff0eea25f9ea39344b8582688a9a6ce", "chunk": "diff --git a/modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/dump/RepoDumper.java b/modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/dump/RepoDumper.java\nindex 777264c9e9..ed239b5d87 100644\n--- a/modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/dump/RepoDumper.java\n+++ b/modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/dump/RepoDumper.java\n\n@@ -77,12 +74,11 @@ class RepoDumper\n     private RepoDumper( final Builder builder )\n     {\n         this.repository = builder.repository;\n-        this.repositoryId = builder.repository.getId();\n         this.includeVersions = builder.includeVersions;\n         this.includeBinaries = builder.includeBinaries;\n         this.nodeService = builder.nodeService;\n         this.writer = builder.writer;\n-        this.dumpResult = RepoDumpResult.create( this.repositoryId );\n+        this.dumpResult = RepoDumpResult.create( this.repository.getId() );\n         this.maxAge = builder.maxAge;\n         this.maxVersions = builder.maxVersions;\n         this.listener = Objects.requireNonNullElseGet( builder.listener, NullSystemDumpListener::new );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3NjQzNg==", "url": "https://github.com/enonic/xp/pull/8219#discussion_r453176436", "bodyText": "should be a better way to fail if exists. don't do a check here.", "author": "rymsha", "createdAt": "2020-07-11T09:26:33Z", "path": "modules/core/core-project/src/main/java/com/enonic/xp/core/impl/project/ProjectServiceImpl.java", "diffHunk": "@@ -74,22 +73,21 @@\n     @Activate\n     public void initialize()\n     {\n-        adminContext().runWith( () -> {\n-            if ( doGet( ProjectName.from( ContentConstants.CONTENT_REPO_ID ) ) == null )\n-            {\n-                doCreate( CreateProjectParams.create().\n-                    name( ProjectConstants.DEFAULT_PROJECT.getName() ).\n-                    displayName( ProjectConstants.DEFAULT_PROJECT.getDisplayName() ).\n-                    description( ProjectConstants.DEFAULT_PROJECT.getDescription() ).\n-                    build() );\n-            }\n-        } );\n+        adminContext().runWith( () -> doCreate( CreateProjectParams.create().\n+            name( ProjectConstants.DEFAULT_PROJECT.getName() ).\n+            displayName( ProjectConstants.DEFAULT_PROJECT.getDisplayName() ).\n+            description( ProjectConstants.DEFAULT_PROJECT.getDescription() ).\n+            build() ) );\n     }\n \n     @Override\n     public Project create( CreateProjectParams params )\n     {\n         return callWithCreateContext( ( () -> {\n+            if ( repositoryService.isInitialized( params.getName().getRepoId() ) )", "originalCommit": "f5e064500ddc17131e57405baececcfd28268fe6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ac40437d07f5acc7f396d5b548700112a7cac9cd", "chunk": "diff --git a/modules/core/core-project/src/main/java/com/enonic/xp/core/impl/project/ProjectServiceImpl.java b/modules/core/core-project/src/main/java/com/enonic/xp/core/impl/project/ProjectServiceImpl.java\nindex 024d3b1a19..aebb8d09d2 100644\n--- a/modules/core/core-project/src/main/java/com/enonic/xp/core/impl/project/ProjectServiceImpl.java\n+++ b/modules/core/core-project/src/main/java/com/enonic/xp/core/impl/project/ProjectServiceImpl.java\n\n@@ -89,6 +89,14 @@ public class ProjectServiceImpl\n                 throw new ProjectAlreadyExistsException( params.getName() );\n             }\n             final Project result = doCreate( params );\n+\n+            CreateProjectRolesCommand.create().\n+                securityService( securityService ).\n+                projectName( params.getName() ).\n+                projectDisplayName( params.getDisplayName() ).\n+                build().\n+                execute();\n+\n             LOG.debug( \"Project created: \" + params.getName() );\n \n             return result;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3NjUzNQ==", "url": "https://github.com/enonic/xp/pull/8219#discussion_r453176535", "bodyText": "rearrange code, for there are only two returns.", "author": "rymsha", "createdAt": "2020-07-11T09:27:51Z", "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/elasticsearch/IndexServiceInternalImpl.java", "diffHunk": "@@ -109,6 +105,31 @@ public boolean isMaster()\n         return clusterStateResponse.getState().nodes().localNodeMaster();\n     }\n \n+    @Override\n+    public boolean waitForYellowStatus( final String... indexNames )\n+    {\n+        try\n+        {\n+            final ClusterHealthStatus clusterHealth = doGetClusterHealth( CLUSTER_HEALTH_TIMEOUT, indexNames );\n+\n+            if ( clusterHealth.isTimedOut() || clusterHealth.getClusterStatusCode().equals( ClusterStatusCode.RED ) )\n+            {\n+                LOG.error( \"Cluster not healthy: timed out: {}, state: {}\", clusterHealth.isTimedOut(),\n+                           clusterHealth.getClusterStatusCode() );\n+                return false;\n+            }\n+\n+            return true;", "originalCommit": "f5e064500ddc17131e57405baececcfd28268fe6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ac40437d07f5acc7f396d5b548700112a7cac9cd", "chunk": "diff --git a/modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/elasticsearch/IndexServiceInternalImpl.java b/modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/elasticsearch/IndexServiceInternalImpl.java\nindex 393b446492..685e47783a 100644\n--- a/modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/elasticsearch/IndexServiceInternalImpl.java\n+++ b/modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/elasticsearch/IndexServiceInternalImpl.java\n\n@@ -108,25 +109,34 @@ public class IndexServiceInternalImpl\n     @Override\n     public boolean waitForYellowStatus( final String... indexNames )\n     {\n-        try\n-        {\n-            final ClusterHealthStatus clusterHealth = doGetClusterHealth( CLUSTER_HEALTH_TIMEOUT, indexNames );\n+        ClusterHealthRequest request = new ClusterHealthRequest( indexNames );\n \n-            if ( clusterHealth.isTimedOut() || clusterHealth.getClusterStatusCode().equals( ClusterStatusCode.RED ) )\n-            {\n-                LOG.error( \"Cluster not healthy: timed out: {}, state: {}\", clusterHealth.isTimedOut(),\n-                           clusterHealth.getClusterStatusCode() );\n-                return false;\n-            }\n+        request.waitForYellowStatus().timeout( CLUSTER_HEALTH_TIMEOUT );\n \n-            return true;\n+        final ClusterHealthResponse response;\n+        try\n+        {\n+            final Stopwatch timer = Stopwatch.createStarted();\n+            response = this.client.admin().cluster().health( request ).actionGet();\n+            timer.stop();\n+            LOG.debug( \"ElasticSearch cluster '{}' \" +\n+                           \"health (timedOut={}, timeOutValue={}, used={}): Status={}, nodes={}, active shards={}, indices={}\",\n+                       response.getClusterName(), response.isTimedOut(), CLUSTER_HEALTH_TIMEOUT, timer, response.getStatus(),\n+                       response.getNumberOfNodes(), response.getActiveShards(), response.getIndices() );\n         }\n         catch ( Exception e )\n         {\n             LOG.error( \"Failed to get cluster health status\", e );\n+            return false;\n+        }\n+\n+        if ( response.isTimedOut() || response.getStatus() == ClusterHealthStatus.RED )\n+        {\n+            LOG.error( \"Cluster not healthy: timed out: {}, state: {}\", response.isTimedOut(), response.getStatus() );\n+            return false;\n         }\n \n-        return false;\n+        return true;\n     }\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3NjY0Mg==", "url": "https://github.com/enonic/xp/pull/8219#discussion_r453176642", "bodyText": "find a better name", "author": "rymsha", "createdAt": "2020-07-11T09:29:16Z", "path": "modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/elasticsearch/snapshot/ClusterCleaner.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.enonic.xp.repo.impl.elasticsearch.snapshot;\n+\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.BundleException;\n+import org.osgi.framework.startlevel.BundleStartLevel;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.enonic.xp.event.Event;\n+import com.enonic.xp.event.EventListener;\n+import com.enonic.xp.repo.impl.RepositoryEvents;\n+\n+@Component(immediate = true)\n+public class ClusterCleaner", "originalCommit": "f5e064500ddc17131e57405baececcfd28268fe6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8466b7f38ff0eea25f9ea39344b8582688a9a6ce", "chunk": "diff --git a/modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/elasticsearch/snapshot/ClusterCleaner.java b/modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/elasticsearch/snapshot/ClusterDestroyer.java\nsimilarity index 93%\nrename from modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/elasticsearch/snapshot/ClusterCleaner.java\nrename to modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/elasticsearch/snapshot/ClusterDestroyer.java\nindex 16259255e2..30b379bdc6 100644\n--- a/modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/elasticsearch/snapshot/ClusterCleaner.java\n+++ b/modules/core/core-repo/src/main/java/com/enonic/xp/repo/impl/elasticsearch/snapshot/ClusterDestroyer.java\n\n@@ -14,15 +14,15 @@ import com.enonic.xp.event.EventListener;\n import com.enonic.xp.repo.impl.RepositoryEvents;\n \n @Component(immediate = true)\n-public class ClusterCleaner\n+public class ClusterDestroyer\n     implements EventListener\n {\n-    private final static Logger LOG = LoggerFactory.getLogger( ClusterCleaner.class );\n+    private final static Logger LOG = LoggerFactory.getLogger( ClusterDestroyer.class );\n \n     private final BundleContext bundleContext;\n \n     @Activate\n-    public ClusterCleaner( final BundleContext bundleContext )\n+    public ClusterDestroyer( final BundleContext bundleContext )\n     {\n         this.bundleContext = bundleContext;\n     }\n"}}, {"oid": "ac40437d07f5acc7f396d5b548700112a7cac9cd", "url": "https://github.com/enonic/xp/commit/ac40437d07f5acc7f396d5b548700112a7cac9cd", "message": "Cluster health-check may cause applications inconsistencies #8086", "committedDate": "2020-07-13T08:23:38Z", "type": "forcePushed"}, {"oid": "d65d2d4c3535bace5b3769cfa1bb1a47a241c367", "url": "https://github.com/enonic/xp/commit/d65d2d4c3535bace5b3769cfa1bb1a47a241c367", "message": "Cluster health-check may cause applications inconsistencies #8086", "committedDate": "2020-07-13T08:33:38Z", "type": "forcePushed"}, {"oid": "8466b7f38ff0eea25f9ea39344b8582688a9a6ce", "url": "https://github.com/enonic/xp/commit/8466b7f38ff0eea25f9ea39344b8582688a9a6ce", "message": "Cluster health-check may cause applications inconsistencies #8086", "committedDate": "2020-07-13T12:38:21Z", "type": "forcePushed"}, {"oid": "a7c86c1519b22cc49e0c89e4474b3226742a09c9", "url": "https://github.com/enonic/xp/commit/a7c86c1519b22cc49e0c89e4474b3226742a09c9", "message": "Cluster health-check may cause applications inconsistencies #8086", "committedDate": "2020-07-13T14:37:47Z", "type": "forcePushed"}, {"oid": "98420953b2afe0800c36a7c95e87bd98c9bbba46", "url": "https://github.com/enonic/xp/commit/98420953b2afe0800c36a7c95e87bd98c9bbba46", "message": "Cluster health-check may cause applications inconsistencies #8086", "committedDate": "2020-07-13T15:57:15Z", "type": "forcePushed"}, {"oid": "5f0ffc8c63a353a69dc5f8cd14be1b8589f93cb2", "url": "https://github.com/enonic/xp/commit/5f0ffc8c63a353a69dc5f8cd14be1b8589f93cb2", "message": "Cluster health-check may cause applications inconsistencies #8086", "committedDate": "2020-07-13T16:50:39Z", "type": "forcePushed"}, {"oid": "2fd112631c39c964dfac0ce05ab06638885c616e", "url": "https://github.com/enonic/xp/commit/2fd112631c39c964dfac0ce05ab06638885c616e", "message": "Cluster health-check may cause applications inconsistencies #8086", "committedDate": "2020-07-14T15:52:32Z", "type": "forcePushed"}, {"oid": "540f28ce174f9128618c21262d89b54d877a5062", "url": "https://github.com/enonic/xp/commit/540f28ce174f9128618c21262d89b54d877a5062", "message": "Cluster health-check may cause applications inconsistencies #8086", "committedDate": "2020-07-14T16:01:26Z", "type": "forcePushed"}, {"oid": "694089cb44c0997871e816b6f192586cf8cfb9f2", "url": "https://github.com/enonic/xp/commit/694089cb44c0997871e816b6f192586cf8cfb9f2", "message": "Cluster health-check may cause applications inconsistencies #8086", "committedDate": "2020-07-16T12:44:42Z", "type": "forcePushed"}, {"oid": "9c08a6c380981fc287d6731a6581ec71b0df37bb", "url": "https://github.com/enonic/xp/commit/9c08a6c380981fc287d6731a6581ec71b0df37bb", "message": "Cluster health-check may cause applications inconsistencies #8086", "committedDate": "2020-07-16T14:26:58Z", "type": "forcePushed"}, {"oid": "af975096bbf8a98a706fcdbb4884027379a30959", "url": "https://github.com/enonic/xp/commit/af975096bbf8a98a706fcdbb4884027379a30959", "message": "Cluster health-check may cause applications inconsistencies #8086", "committedDate": "2020-07-17T11:03:22Z", "type": "forcePushed"}, {"oid": "cc89adce286d9e5e8caa78f520148c2c41a2d928", "url": "https://github.com/enonic/xp/commit/cc89adce286d9e5e8caa78f520148c2c41a2d928", "message": "Cluster health-check may cause applications inconsistencies #8086", "committedDate": "2020-07-17T14:16:30Z", "type": "forcePushed"}, {"oid": "2af4354c1125bff5e267473d1fc8aeaac77a69ac", "url": "https://github.com/enonic/xp/commit/2af4354c1125bff5e267473d1fc8aeaac77a69ac", "message": "Cluster health-check may cause applications inconsistencies #8086", "committedDate": "2020-07-17T18:03:52Z", "type": "forcePushed"}, {"oid": "5e2a6dba88e436ce8f51506d67538389037c3c17", "url": "https://github.com/enonic/xp/commit/5e2a6dba88e436ce8f51506d67538389037c3c17", "message": "Cluster health-check may cause applications inconsistencies #8086", "committedDate": "2020-07-17T19:01:03Z", "type": "forcePushed"}, {"oid": "acf668b31cc00e1f99473ef016f49abf7fb0a237", "url": "https://github.com/enonic/xp/commit/acf668b31cc00e1f99473ef016f49abf7fb0a237", "message": "Cluster health-check may cause applications inconsistencies #8086", "committedDate": "2020-07-20T17:27:37Z", "type": "forcePushed"}, {"oid": "8f9726810306acc197e77a8ac613e4bc7529fdd0", "url": "https://github.com/enonic/xp/commit/8f9726810306acc197e77a8ac613e4bc7529fdd0", "message": "Cluster health-check may cause applications inconsistencies #8086", "committedDate": "2020-07-21T07:59:30Z", "type": "forcePushed"}, {"oid": "ac816cdd33fa31afa58806a46663b9c51e2357e9", "url": "https://github.com/enonic/xp/commit/ac816cdd33fa31afa58806a46663b9c51e2357e9", "message": "Cluster health-check may cause applications inconsistencies #8086", "committedDate": "2020-07-21T09:26:41Z", "type": "commit"}, {"oid": "ac816cdd33fa31afa58806a46663b9c51e2357e9", "url": "https://github.com/enonic/xp/commit/ac816cdd33fa31afa58806a46663b9c51e2357e9", "message": "Cluster health-check may cause applications inconsistencies #8086", "committedDate": "2020-07-21T09:26:41Z", "type": "forcePushed"}]}