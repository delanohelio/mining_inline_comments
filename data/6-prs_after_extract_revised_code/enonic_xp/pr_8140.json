{"pr_number": 8140, "pr_title": "Users with Owner or Editor roles can not be assigned to issues #8139", "pr_createdAt": "2020-06-06T23:38:13Z", "pr_url": "https://github.com/enonic/xp/pull/8140", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwNjg2Mg==", "url": "https://github.com/enonic/xp/pull/8140#discussion_r436506862", "bodyText": "this is unnecessary. anyMatch will immediately return false on empty", "author": "rymsha", "createdAt": "2020-06-08T07:36:34Z", "path": "modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java", "diffHunk": "@@ -479,21 +482,34 @@ private UpdateIssueParams generateUpdateIssueParams( final UpdateIssueJson json\n \n     private PrincipalKeys filterInvalidAssignees( final List<PrincipalKey> assignees )\n     {\n-        return PrincipalKeys.from( assignees.stream().filter( this::isValidAssignee ).collect( Collectors.toList() ) );\n+        final ProjectPermissions projectPermissions = getCurrentProjectPermissions();\n+\n+        return PrincipalKeys.from(\n+            assignees.stream().filter( ( principalKey ) -> isValidAssignee( principalKey, projectPermissions ) ).collect(\n+                Collectors.toList() ) );\n     }\n \n-    private boolean isValidAssignee( final PrincipalKey principalKey )\n+    private ProjectPermissions getCurrentProjectPermissions()\n     {\n-        final PrincipalKeys membershipKeys = securityService.getAllMemberships( principalKey );\n-        if ( membershipKeys.getSize() > 0 )\n+        final ProjectName projectName = ProjectName.from( ContextAccessor.current().getRepositoryId() );\n+        return projectService.getPermissions( projectName );\n+    }\n+\n+    private boolean isValidAssignee( final PrincipalKey principalKey, final ProjectPermissions projectPermissions )\n+    {\n+        if ( hasProjectPermissions( principalKey, projectPermissions ) )\n         {\n-            final Principals memberships = securityService.getPrincipals( membershipKeys );\n-            return memberships.stream().anyMatch( this::hasIssuePermissions );\n+            return true;\n         }\n-        else\n+\n+        final PrincipalKeys membershipKeys = securityService.getAllMemberships( principalKey );\n+\n+        if ( membershipKeys.getSize() > 0 )", "originalCommit": "2e3f1cd57158d1e179877b12320149b0a0c35c94", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee8d114b2429a822014f22cffad15bad104d93e", "chunk": "diff --git a/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java b/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\nindex a459b00dc8..ef55b62e58 100644\n--- a/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\n+++ b/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\n\n@@ -482,31 +483,31 @@ public final class IssueResource\n \n     private PrincipalKeys filterInvalidAssignees( final List<PrincipalKey> assignees )\n     {\n-        final ProjectPermissions projectPermissions = getCurrentProjectPermissions();\n-\n-        return PrincipalKeys.from(\n-            assignees.stream().filter( ( principalKey ) -> isValidAssignee( principalKey, projectPermissions ) ).collect(\n-                Collectors.toList() ) );\n+        return PrincipalKeys.from( assignees.\n+            stream().\n+            filter( this::isValidAssignee ).\n+            collect( Collectors.toList() ) );\n     }\n \n-    private ProjectPermissions getCurrentProjectPermissions()\n-    {\n-        final ProjectName projectName = ProjectName.from( ContextAccessor.current().getRepositoryId() );\n-        return projectService.getPermissions( projectName );\n-    }\n \n-    private boolean isValidAssignee( final PrincipalKey principalKey, final ProjectPermissions projectPermissions )\n+    private boolean isValidAssignee( final PrincipalKey principalKey )\n     {\n-        if ( hasProjectPermissions( principalKey, projectPermissions ) )\n+        if ( principalKey.isUser() )\n         {\n-            return true;\n-        }\n+            final ProjectName projectName = ProjectName.from( ContextAccessor.current().getRepositoryId() );\n+            final PrincipalKeys membershipKeys = securityService.getAllMemberships( principalKey );\n \n-        final PrincipalKeys membershipKeys = securityService.getAllMemberships( principalKey );\n+            if ( ProjectConstants.DEFAULT_PROJECT_NAME.equals( projectName ) )\n+            {\n+                return membershipKeys.stream().anyMatch( this::hasManagerAccess );\n+            }\n+            else\n+            {\n+                final ProjectPermissions projectPermissions = projectService.getPermissions( projectName );\n \n-        if ( membershipKeys.getSize() > 0 )\n-        {\n-            return membershipKeys.stream().anyMatch( ( membershipKey ) -> this.hasIssuePermissions( membershipKey, projectPermissions ) );\n+                return isProjectOwnerOrEditor( principalKey, projectPermissions ) || membershipKeys.stream().\n+                    anyMatch( membershipKey -> this.hasProjectIssuePermissions( membershipKey, projectPermissions ) );\n+            }\n         }\n \n         return false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwODgwNw==", "url": "https://github.com/enonic/xp/pull/8140#discussion_r436508807", "bodyText": "I don't think this is  correct anymore. #7942 describes previous content roles as \"just\" default project roles", "author": "rymsha", "createdAt": "2020-06-08T07:40:39Z", "path": "modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java", "diffHunk": "@@ -509,24 +525,34 @@ private PrincipalKeys filterKeys( final PrincipalKeys oldKeys, final PrincipalKe\n         }\n     }\n \n-    private boolean hasIssuePermissions( final Principal principal )\n+    private boolean hasIssuePermissions( final PrincipalKey principalKey, final ProjectPermissions projectPermissions )\n     {\n-        if ( principal.getKey().equals( RoleKeys.ADMIN ) )\n+        if ( principalKey.equals( RoleKeys.ADMIN ) )\n+        {\n+            return true;\n+        }\n+\n+        if ( principalKey.equals( RoleKeys.CONTENT_MANAGER_ADMIN ) )", "originalCommit": "2e3f1cd57158d1e179877b12320149b0a0c35c94", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee8d114b2429a822014f22cffad15bad104d93e", "chunk": "diff --git a/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java b/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\nindex a459b00dc8..ef55b62e58 100644\n--- a/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\n+++ b/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\n\n@@ -525,32 +526,23 @@ public final class IssueResource\n         }\n     }\n \n-    private boolean hasIssuePermissions( final PrincipalKey principalKey, final ProjectPermissions projectPermissions )\n+    private boolean hasAdminAccess( final PrincipalKey principalKey )\n     {\n-        if ( principalKey.equals( RoleKeys.ADMIN ) )\n-        {\n-            return true;\n-        }\n-\n-        if ( principalKey.equals( RoleKeys.CONTENT_MANAGER_ADMIN ) )\n-        {\n-            return true;\n-        }\n-\n-        if ( principalKey.equals( RoleKeys.CONTENT_MANAGER_EXPERT ) )\n-        {\n-            return true;\n-        }\n+        return RoleKeys.ADMIN.equals( principalKey ) || RoleKeys.CONTENT_MANAGER_ADMIN.equals( principalKey ) ||\n+            RoleKeys.CONTENT_MANAGER_EXPERT.equals( principalKey );\n+    }\n \n-        if ( principalKey.equals( RoleKeys.CONTENT_MANAGER_APP ) )\n-        {\n-            return true;\n-        }\n+    private boolean hasManagerAccess( final PrincipalKey principalKey )\n+    {\n+        return this.hasAdminAccess( principalKey ) || RoleKeys.CONTENT_MANAGER_APP.equals( principalKey );\n+    }\n \n-        return this.hasProjectPermissions( principalKey, projectPermissions );\n+    private boolean hasProjectIssuePermissions( final PrincipalKey principalKey, final ProjectPermissions projectPermissions )\n+    {\n+        return this.hasManagerAccess( principalKey ) || this.isProjectOwnerOrEditor( principalKey, projectPermissions );\n     }\n \n-    private boolean hasProjectPermissions( final PrincipalKey principalKey, final ProjectPermissions projectPermissions )\n+    private boolean isProjectOwnerOrEditor( final PrincipalKey principalKey, final ProjectPermissions projectPermissions )\n     {\n         return projectPermissions.getOwner().contains( principalKey ) || projectPermissions.getEditor().contains( principalKey );\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4OTYwNw==", "url": "https://github.com/enonic/xp/pull/8140#discussion_r436889607", "bodyText": "here null projectPermisions propagates and accepted into hasIssuePermissions. it looks like a bug", "author": "rymsha", "createdAt": "2020-06-08T17:54:36Z", "path": "modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java", "diffHunk": "@@ -479,21 +483,36 @@ private UpdateIssueParams generateUpdateIssueParams( final UpdateIssueJson json\n \n     private PrincipalKeys filterInvalidAssignees( final List<PrincipalKey> assignees )\n     {\n-        return PrincipalKeys.from( assignees.stream().filter( this::isValidAssignee ).collect( Collectors.toList() ) );\n+        final ProjectPermissions projectPermissions = getCurrentProjectPermissions();\n+\n+        return PrincipalKeys.from( assignees.\n+            stream().\n+            filter( ( principalKey ) -> isValidAssignee( principalKey, projectPermissions ) ).\n+            collect( Collectors.toList() ) );\n     }\n \n-    private boolean isValidAssignee( final PrincipalKey principalKey )\n+    private ProjectPermissions getCurrentProjectPermissions()\n     {\n-        final PrincipalKeys membershipKeys = securityService.getAllMemberships( principalKey );\n-        if ( membershipKeys.getSize() > 0 )\n+        final ProjectName projectName = ProjectName.from( ContextAccessor.current().getRepositoryId() );\n+        return !ProjectConstants.DEFAULT_PROJECT_NAME.equals( projectName ) ? projectService.getPermissions( projectName ) : null;\n+    }\n+\n+    private boolean isValidAssignee( final PrincipalKey principalKey, final ProjectPermissions projectPermissions )\n+    {\n+        if ( !principalKey.isUser() )\n         {\n-            final Principals memberships = securityService.getPrincipals( membershipKeys );\n-            return memberships.stream().anyMatch( this::hasIssuePermissions );\n+            return false;\n         }\n-        else\n+\n+        if ( projectPermissions != null && hasProjectPermissions( principalKey, projectPermissions ) )", "originalCommit": "55378d38a54d681d0ec4fb7f06bafe5e78c316af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee8d114b2429a822014f22cffad15bad104d93e", "chunk": "diff --git a/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java b/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\nindex 2478ece664..ef55b62e58 100644\n--- a/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\n+++ b/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\n\n@@ -483,36 +483,34 @@ public final class IssueResource\n \n     private PrincipalKeys filterInvalidAssignees( final List<PrincipalKey> assignees )\n     {\n-        final ProjectPermissions projectPermissions = getCurrentProjectPermissions();\n-\n         return PrincipalKeys.from( assignees.\n             stream().\n-            filter( ( principalKey ) -> isValidAssignee( principalKey, projectPermissions ) ).\n+            filter( this::isValidAssignee ).\n             collect( Collectors.toList() ) );\n     }\n \n-    private ProjectPermissions getCurrentProjectPermissions()\n-    {\n-        final ProjectName projectName = ProjectName.from( ContextAccessor.current().getRepositoryId() );\n-        return !ProjectConstants.DEFAULT_PROJECT_NAME.equals( projectName ) ? projectService.getPermissions( projectName ) : null;\n-    }\n \n-    private boolean isValidAssignee( final PrincipalKey principalKey, final ProjectPermissions projectPermissions )\n+    private boolean isValidAssignee( final PrincipalKey principalKey )\n     {\n-        if ( !principalKey.isUser() )\n+        if ( principalKey.isUser() )\n         {\n-            return false;\n-        }\n+            final ProjectName projectName = ProjectName.from( ContextAccessor.current().getRepositoryId() );\n+            final PrincipalKeys membershipKeys = securityService.getAllMemberships( principalKey );\n \n-        if ( projectPermissions != null && hasProjectPermissions( principalKey, projectPermissions ) )\n-        {\n-            return true;\n-        }\n+            if ( ProjectConstants.DEFAULT_PROJECT_NAME.equals( projectName ) )\n+            {\n+                return membershipKeys.stream().anyMatch( this::hasManagerAccess );\n+            }\n+            else\n+            {\n+                final ProjectPermissions projectPermissions = projectService.getPermissions( projectName );\n \n-        final PrincipalKeys membershipKeys = securityService.getAllMemberships( principalKey );\n+                return isProjectOwnerOrEditor( principalKey, projectPermissions ) || membershipKeys.stream().\n+                    anyMatch( membershipKey -> this.hasProjectIssuePermissions( membershipKey, projectPermissions ) );\n+            }\n+        }\n \n-        return membershipKeys.stream().\n-            anyMatch( ( membershipKey ) -> this.hasIssuePermissions( membershipKey, projectPermissions ) );\n+        return false;\n     }\n \n     private PrincipalKeys filterKeys( final PrincipalKeys oldKeys, final PrincipalKeys newKeys, final boolean existing )\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5MTE0NQ==", "url": "https://github.com/enonic/xp/pull/8140#discussion_r436891145", "bodyText": "It is hard for me to read this due to many negations and several exit points.\nI will note other needless negations as well", "author": "rymsha", "createdAt": "2020-06-08T17:57:15Z", "path": "modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java", "diffHunk": "@@ -479,21 +483,36 @@ private UpdateIssueParams generateUpdateIssueParams( final UpdateIssueJson json\n \n     private PrincipalKeys filterInvalidAssignees( final List<PrincipalKey> assignees )\n     {\n-        return PrincipalKeys.from( assignees.stream().filter( this::isValidAssignee ).collect( Collectors.toList() ) );\n+        final ProjectPermissions projectPermissions = getCurrentProjectPermissions();\n+\n+        return PrincipalKeys.from( assignees.\n+            stream().\n+            filter( ( principalKey ) -> isValidAssignee( principalKey, projectPermissions ) ).\n+            collect( Collectors.toList() ) );\n     }\n \n-    private boolean isValidAssignee( final PrincipalKey principalKey )\n+    private ProjectPermissions getCurrentProjectPermissions()\n     {\n-        final PrincipalKeys membershipKeys = securityService.getAllMemberships( principalKey );\n-        if ( membershipKeys.getSize() > 0 )\n+        final ProjectName projectName = ProjectName.from( ContextAccessor.current().getRepositoryId() );\n+        return !ProjectConstants.DEFAULT_PROJECT_NAME.equals( projectName ) ? projectService.getPermissions( projectName ) : null;", "originalCommit": "55378d38a54d681d0ec4fb7f06bafe5e78c316af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee8d114b2429a822014f22cffad15bad104d93e", "chunk": "diff --git a/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java b/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\nindex 2478ece664..ef55b62e58 100644\n--- a/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\n+++ b/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\n\n@@ -483,36 +483,34 @@ public final class IssueResource\n \n     private PrincipalKeys filterInvalidAssignees( final List<PrincipalKey> assignees )\n     {\n-        final ProjectPermissions projectPermissions = getCurrentProjectPermissions();\n-\n         return PrincipalKeys.from( assignees.\n             stream().\n-            filter( ( principalKey ) -> isValidAssignee( principalKey, projectPermissions ) ).\n+            filter( this::isValidAssignee ).\n             collect( Collectors.toList() ) );\n     }\n \n-    private ProjectPermissions getCurrentProjectPermissions()\n-    {\n-        final ProjectName projectName = ProjectName.from( ContextAccessor.current().getRepositoryId() );\n-        return !ProjectConstants.DEFAULT_PROJECT_NAME.equals( projectName ) ? projectService.getPermissions( projectName ) : null;\n-    }\n \n-    private boolean isValidAssignee( final PrincipalKey principalKey, final ProjectPermissions projectPermissions )\n+    private boolean isValidAssignee( final PrincipalKey principalKey )\n     {\n-        if ( !principalKey.isUser() )\n+        if ( principalKey.isUser() )\n         {\n-            return false;\n-        }\n+            final ProjectName projectName = ProjectName.from( ContextAccessor.current().getRepositoryId() );\n+            final PrincipalKeys membershipKeys = securityService.getAllMemberships( principalKey );\n \n-        if ( projectPermissions != null && hasProjectPermissions( principalKey, projectPermissions ) )\n-        {\n-            return true;\n-        }\n+            if ( ProjectConstants.DEFAULT_PROJECT_NAME.equals( projectName ) )\n+            {\n+                return membershipKeys.stream().anyMatch( this::hasManagerAccess );\n+            }\n+            else\n+            {\n+                final ProjectPermissions projectPermissions = projectService.getPermissions( projectName );\n \n-        final PrincipalKeys membershipKeys = securityService.getAllMemberships( principalKey );\n+                return isProjectOwnerOrEditor( principalKey, projectPermissions ) || membershipKeys.stream().\n+                    anyMatch( membershipKey -> this.hasProjectIssuePermissions( membershipKey, projectPermissions ) );\n+            }\n+        }\n \n-        return membershipKeys.stream().\n-            anyMatch( ( membershipKey ) -> this.hasIssuePermissions( membershipKey, projectPermissions ) );\n+        return false;\n     }\n \n     private PrincipalKeys filterKeys( final PrincipalKeys oldKeys, final PrincipalKeys newKeys, final boolean existing )\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5MTMyNw==", "url": "https://github.com/enonic/xp/pull/8140#discussion_r436891327", "bodyText": "needless negation", "author": "rymsha", "createdAt": "2020-06-08T17:57:31Z", "path": "modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java", "diffHunk": "@@ -479,21 +483,36 @@ private UpdateIssueParams generateUpdateIssueParams( final UpdateIssueJson json\n \n     private PrincipalKeys filterInvalidAssignees( final List<PrincipalKey> assignees )\n     {\n-        return PrincipalKeys.from( assignees.stream().filter( this::isValidAssignee ).collect( Collectors.toList() ) );\n+        final ProjectPermissions projectPermissions = getCurrentProjectPermissions();\n+\n+        return PrincipalKeys.from( assignees.\n+            stream().\n+            filter( ( principalKey ) -> isValidAssignee( principalKey, projectPermissions ) ).\n+            collect( Collectors.toList() ) );\n     }\n \n-    private boolean isValidAssignee( final PrincipalKey principalKey )\n+    private ProjectPermissions getCurrentProjectPermissions()\n     {\n-        final PrincipalKeys membershipKeys = securityService.getAllMemberships( principalKey );\n-        if ( membershipKeys.getSize() > 0 )\n+        final ProjectName projectName = ProjectName.from( ContextAccessor.current().getRepositoryId() );\n+        return !ProjectConstants.DEFAULT_PROJECT_NAME.equals( projectName ) ? projectService.getPermissions( projectName ) : null;\n+    }\n+\n+    private boolean isValidAssignee( final PrincipalKey principalKey, final ProjectPermissions projectPermissions )\n+    {\n+        if ( !principalKey.isUser() )", "originalCommit": "55378d38a54d681d0ec4fb7f06bafe5e78c316af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee8d114b2429a822014f22cffad15bad104d93e", "chunk": "diff --git a/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java b/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\nindex 2478ece664..ef55b62e58 100644\n--- a/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\n+++ b/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\n\n@@ -483,36 +483,34 @@ public final class IssueResource\n \n     private PrincipalKeys filterInvalidAssignees( final List<PrincipalKey> assignees )\n     {\n-        final ProjectPermissions projectPermissions = getCurrentProjectPermissions();\n-\n         return PrincipalKeys.from( assignees.\n             stream().\n-            filter( ( principalKey ) -> isValidAssignee( principalKey, projectPermissions ) ).\n+            filter( this::isValidAssignee ).\n             collect( Collectors.toList() ) );\n     }\n \n-    private ProjectPermissions getCurrentProjectPermissions()\n-    {\n-        final ProjectName projectName = ProjectName.from( ContextAccessor.current().getRepositoryId() );\n-        return !ProjectConstants.DEFAULT_PROJECT_NAME.equals( projectName ) ? projectService.getPermissions( projectName ) : null;\n-    }\n \n-    private boolean isValidAssignee( final PrincipalKey principalKey, final ProjectPermissions projectPermissions )\n+    private boolean isValidAssignee( final PrincipalKey principalKey )\n     {\n-        if ( !principalKey.isUser() )\n+        if ( principalKey.isUser() )\n         {\n-            return false;\n-        }\n+            final ProjectName projectName = ProjectName.from( ContextAccessor.current().getRepositoryId() );\n+            final PrincipalKeys membershipKeys = securityService.getAllMemberships( principalKey );\n \n-        if ( projectPermissions != null && hasProjectPermissions( principalKey, projectPermissions ) )\n-        {\n-            return true;\n-        }\n+            if ( ProjectConstants.DEFAULT_PROJECT_NAME.equals( projectName ) )\n+            {\n+                return membershipKeys.stream().anyMatch( this::hasManagerAccess );\n+            }\n+            else\n+            {\n+                final ProjectPermissions projectPermissions = projectService.getPermissions( projectName );\n \n-        final PrincipalKeys membershipKeys = securityService.getAllMemberships( principalKey );\n+                return isProjectOwnerOrEditor( principalKey, projectPermissions ) || membershipKeys.stream().\n+                    anyMatch( membershipKey -> this.hasProjectIssuePermissions( membershipKey, projectPermissions ) );\n+            }\n+        }\n \n-        return membershipKeys.stream().\n-            anyMatch( ( membershipKey ) -> this.hasIssuePermissions( membershipKey, projectPermissions ) );\n+        return false;\n     }\n \n     private PrincipalKeys filterKeys( final PrincipalKeys oldKeys, final PrincipalKeys newKeys, final boolean existing )\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5MTQ4Mw==", "url": "https://github.com/enonic/xp/pull/8140#discussion_r436891483", "bodyText": "needless negation", "author": "rymsha", "createdAt": "2020-06-08T17:57:47Z", "path": "modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java", "diffHunk": "@@ -509,24 +528,29 @@ private PrincipalKeys filterKeys( final PrincipalKeys oldKeys, final PrincipalKe\n         }\n     }\n \n-    private boolean hasIssuePermissions( final Principal principal )\n+    private boolean hasIssuePermissions( final PrincipalKey principalKey, final ProjectPermissions projectPermissions )\n     {\n-        if ( principal.getKey().equals( RoleKeys.ADMIN ) )\n+        if ( RoleKeys.ADMIN.equals( principalKey ) || RoleKeys.CONTENT_MANAGER_ADMIN.equals( principalKey ) ||\n+            RoleKeys.CONTENT_MANAGER_EXPERT.equals( principalKey ) )\n         {\n             return true;\n         }\n \n-        if ( principal.getKey().equals( RoleKeys.CONTENT_MANAGER_ADMIN ) )\n+        final ProjectName projectName = ProjectName.from( ContextAccessor.current().getRepositoryId() );\n+\n+        if ( !ProjectConstants.DEFAULT_PROJECT_NAME.equals( projectName ) )", "originalCommit": "55378d38a54d681d0ec4fb7f06bafe5e78c316af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee8d114b2429a822014f22cffad15bad104d93e", "chunk": "diff --git a/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java b/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\nindex 2478ece664..ef55b62e58 100644\n--- a/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\n+++ b/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\n\n@@ -528,27 +526,23 @@ public final class IssueResource\n         }\n     }\n \n-    private boolean hasIssuePermissions( final PrincipalKey principalKey, final ProjectPermissions projectPermissions )\n+    private boolean hasAdminAccess( final PrincipalKey principalKey )\n     {\n-        if ( RoleKeys.ADMIN.equals( principalKey ) || RoleKeys.CONTENT_MANAGER_ADMIN.equals( principalKey ) ||\n-            RoleKeys.CONTENT_MANAGER_EXPERT.equals( principalKey ) )\n-        {\n-            return true;\n-        }\n+        return RoleKeys.ADMIN.equals( principalKey ) || RoleKeys.CONTENT_MANAGER_ADMIN.equals( principalKey ) ||\n+            RoleKeys.CONTENT_MANAGER_EXPERT.equals( principalKey );\n+    }\n \n-        final ProjectName projectName = ProjectName.from( ContextAccessor.current().getRepositoryId() );\n+    private boolean hasManagerAccess( final PrincipalKey principalKey )\n+    {\n+        return this.hasAdminAccess( principalKey ) || RoleKeys.CONTENT_MANAGER_APP.equals( principalKey );\n+    }\n \n-        if ( !ProjectConstants.DEFAULT_PROJECT_NAME.equals( projectName ) )\n-        {\n-            return this.hasProjectPermissions( principalKey, projectPermissions );\n-        }\n-        else\n-        {\n-            return principalKey.equals( RoleKeys.CONTENT_MANAGER_APP );\n-        }\n+    private boolean hasProjectIssuePermissions( final PrincipalKey principalKey, final ProjectPermissions projectPermissions )\n+    {\n+        return this.hasManagerAccess( principalKey ) || this.isProjectOwnerOrEditor( principalKey, projectPermissions );\n     }\n \n-    private boolean hasProjectPermissions( final PrincipalKey principalKey, final ProjectPermissions projectPermissions )\n+    private boolean isProjectOwnerOrEditor( final PrincipalKey principalKey, final ProjectPermissions projectPermissions )\n     {\n         return projectPermissions.getOwner().contains( principalKey ) || projectPermissions.getEditor().contains( principalKey );\n     }\n"}}, {"oid": "bee8d114b2429a822014f22cffad15bad104d93e", "url": "https://github.com/enonic/xp/commit/bee8d114b2429a822014f22cffad15bad104d93e", "message": "Users with Owner or Editor roles can not be assigned to issues #8139", "committedDate": "2020-06-09T08:53:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMxMjYxMw==", "url": "https://github.com/enonic/xp/pull/8140#discussion_r437312613", "bodyText": "This should be (almost) symmetric how default project and other projects handle permissions. Only one exception for now with Contributor role", "author": "rymsha", "createdAt": "2020-06-09T10:40:02Z", "path": "modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java", "diffHunk": "@@ -479,21 +483,34 @@ private UpdateIssueParams generateUpdateIssueParams( final UpdateIssueJson json\n \n     private PrincipalKeys filterInvalidAssignees( final List<PrincipalKey> assignees )\n     {\n-        return PrincipalKeys.from( assignees.stream().filter( this::isValidAssignee ).collect( Collectors.toList() ) );\n+        return PrincipalKeys.from( assignees.\n+            stream().\n+            filter( this::isValidAssignee ).\n+            collect( Collectors.toList() ) );\n     }\n \n+\n     private boolean isValidAssignee( final PrincipalKey principalKey )\n     {\n-        final PrincipalKeys membershipKeys = securityService.getAllMemberships( principalKey );\n-        if ( membershipKeys.getSize() > 0 )\n-        {\n-            final Principals memberships = securityService.getPrincipals( membershipKeys );\n-            return memberships.stream().anyMatch( this::hasIssuePermissions );\n-        }\n-        else\n+        if ( principalKey.isUser() )\n         {\n-            return false;\n+            final ProjectName projectName = ProjectName.from( ContextAccessor.current().getRepositoryId() );\n+            final PrincipalKeys membershipKeys = securityService.getAllMemberships( principalKey );\n+\n+            if ( ProjectConstants.DEFAULT_PROJECT_NAME.equals( projectName ) )\n+            {\n+                return membershipKeys.stream().anyMatch( this::hasManagerAccess );\n+            }\n+            else\n+            {\n+                final ProjectPermissions projectPermissions = projectService.getPermissions( projectName );\n+\n+                return isProjectOwnerOrEditor( principalKey, projectPermissions ) || membershipKeys.stream().", "originalCommit": "bee8d114b2429a822014f22cffad15bad104d93e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4faf02f4cc6084f4950497e1ffb2cdfe25ff36a4", "chunk": "diff --git a/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java b/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\nindex ef55b62e58..90693a36a0 100644\n--- a/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\n+++ b/modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/issue/IssueResource.java\n\n@@ -481,14 +484,37 @@ public final class IssueResource\n             build();\n     }\n \n+    private static PrincipalKey doCreateRoleKey( final ProjectName projectName, final ProjectRole projectRole )\n+    {\n+        final String roleName = ProjectConstants.PROJECT_NAME_PREFIX + projectName + \".\" + projectRole.name().toLowerCase();\n+        return PrincipalKey.ofRole( roleName );\n+    }\n+\n     private PrincipalKeys filterInvalidAssignees( final List<PrincipalKey> assignees )\n     {\n+        final ProjectName projectName = ProjectName.from( ContextAccessor.current().getRepositoryId() );\n+        this.issuePublisherRoles = ProjectConstants.DEFAULT_PROJECT_NAME.equals( projectName )\n+            ? PrincipalKeys.empty()\n+            : PrincipalKeys.from( doCreateRoleKey( projectName, ProjectRole.OWNER ), doCreateRoleKey( projectName, ProjectRole.EDITOR ) );\n+\n         return PrincipalKeys.from( assignees.\n             stream().\n             filter( this::isValidAssignee ).\n             collect( Collectors.toList() ) );\n     }\n \n+    private PrincipalKeys filterKeys( final PrincipalKeys oldKeys, final PrincipalKeys newKeys, final boolean existing )\n+    {\n+        if ( newKeys.getSize() == 0 )\n+        {\n+            return existing ? PrincipalKeys.from( oldKeys ) : PrincipalKeys.empty();\n+        }\n+        else\n+        {\n+            return PrincipalKeys.from(\n+                newKeys.stream().filter( key -> existing == oldKeys.contains( key ) ).collect( Collectors.toList() ) );\n+        }\n+    }\n \n     private boolean isValidAssignee( final PrincipalKey principalKey )\n     {\n"}}, {"oid": "4faf02f4cc6084f4950497e1ffb2cdfe25ff36a4", "url": "https://github.com/enonic/xp/commit/4faf02f4cc6084f4950497e1ffb2cdfe25ff36a4", "message": "Users with Owner or Editor roles can not be assigned to issues #8139", "committedDate": "2020-06-09T11:57:30Z", "type": "forcePushed"}, {"oid": "364508a5e973324f402cc993bd46e7a943f3e3cf", "url": "https://github.com/enonic/xp/commit/364508a5e973324f402cc993bd46e7a943f3e3cf", "message": "Users with Owner or Editor roles can not be assigned to issues #8139", "committedDate": "2020-06-09T12:07:27Z", "type": "commit"}, {"oid": "364508a5e973324f402cc993bd46e7a943f3e3cf", "url": "https://github.com/enonic/xp/commit/364508a5e973324f402cc993bd46e7a943f3e3cf", "message": "Users with Owner or Editor roles can not be assigned to issues #8139", "committedDate": "2020-06-09T12:07:27Z", "type": "forcePushed"}]}