{"pr_number": 2480, "pr_title": "Add support for Tekton Triggers to the Tekton extension, fixes #2043", "pr_createdAt": "2020-09-11T10:34:50Z", "pr_url": "https://github.com/fabric8io/kubernetes-client/pull/2480", "timeline": [{"oid": "2f9ae4dc98d761009c3cd9ed3a88f9da24c0b8ed", "url": "https://github.com/fabric8io/kubernetes-client/commit/2f9ae4dc98d761009c3cd9ed3a88f9da24c0b8ed", "message": "Add support for Tekton Triggers to the Tekton extension, fixes #2043", "committedDate": "2020-09-11T10:42:13Z", "type": "commit"}, {"oid": "2f9ae4dc98d761009c3cd9ed3a88f9da24c0b8ed", "url": "https://github.com/fabric8io/kubernetes-client/commit/2f9ae4dc98d761009c3cd9ed3a88f9da24c0b8ed", "message": "Add support for Tekton Triggers to the Tekton extension, fixes #2043", "committedDate": "2020-09-11T10:42:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE5ODMwNw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2480#discussion_r489198307", "bodyText": "I see this class is duplicated for each tekton model module. Do you think we can avoid this somehow by maybe adding tekton-model as dependency? Or Are triggers independent of both v1alpha1 or v1beta1 models?", "author": "rohanKanojia", "createdAt": "2020-09-16T06:41:09Z", "path": "extensions/tekton/model-triggers/src/main/java/io/fabric8/tekton/triggers/internal/pipeline/pkg/apis/pipeline/v1beta1/ArrayOrString.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.tekton.triggers.internal.pipeline.pkg.apis.pipeline.v1beta1;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.ObjectCodec;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import io.fabric8.kubernetes.api.model.Doneable;\n+import io.fabric8.kubernetes.api.model.KubernetesResource;\n+import io.sundr.builder.annotations.Buildable;\n+import io.sundr.builder.annotations.Inline;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonDeserialize(using = ArrayOrString.Deserializer.class)\n+@JsonSerialize(using = ArrayOrString.Serializer.class)\n+@ToString\n+@EqualsAndHashCode\n+@Buildable(editableEnabled = false, validationEnabled = false, generateBuilderPackage = false, builderPackage = \"io.fabric8.kubernetes.api.builder\", inline = @Inline(type = Doneable.class, prefix = \"Doneable\", value = \"done\"))\n+public class ArrayOrString implements KubernetesResource {", "originalCommit": "2f9ae4dc98d761009c3cd9ed3a88f9da24c0b8ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3MDg1Mw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2480#discussion_r489370853", "bodyText": "Good Point! I replaced it with a v1beta1 model dependency", "author": "Fabian-K", "createdAt": "2020-09-16T11:41:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE5ODMwNw=="}], "type": "inlineReview", "revised_code": {"commit": "441aa4e8f65c3ab076ae3be6ee33b5951d7d9640", "chunk": "diff --git a/extensions/tekton/model-triggers/src/main/java/io/fabric8/tekton/triggers/internal/pipeline/pkg/apis/pipeline/v1beta1/ArrayOrString.java b/extensions/tekton/model-triggers/src/main/java/io/fabric8/tekton/triggers/internal/pipeline/pkg/apis/pipeline/v1beta1/ArrayOrString.java\ndeleted file mode 100644\nindex f4b876ad2..000000000\n--- a/extensions/tekton/model-triggers/src/main/java/io/fabric8/tekton/triggers/internal/pipeline/pkg/apis/pipeline/v1beta1/ArrayOrString.java\n+++ /dev/null\n\n@@ -1,149 +0,0 @@\n-/**\n- * Copyright (C) 2015 Red Hat, Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *         http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package io.fabric8.tekton.triggers.internal.pipeline.pkg.apis.pipeline.v1beta1;\n-\n-\n-import com.fasterxml.jackson.annotation.JsonAnyGetter;\n-import com.fasterxml.jackson.annotation.JsonAnySetter;\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.annotation.JsonInclude;\n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.core.JsonParser;\n-import com.fasterxml.jackson.core.ObjectCodec;\n-import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n-import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n-import io.fabric8.kubernetes.api.model.Doneable;\n-import io.fabric8.kubernetes.api.model.KubernetesResource;\n-import io.sundr.builder.annotations.Buildable;\n-import io.sundr.builder.annotations.Inline;\n-import lombok.EqualsAndHashCode;\n-import lombok.ToString;\n-\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-@JsonInclude(JsonInclude.Include.NON_NULL)\n-@JsonDeserialize(using = ArrayOrString.Deserializer.class)\n-@JsonSerialize(using = ArrayOrString.Serializer.class)\n-@ToString\n-@EqualsAndHashCode\n-@Buildable(editableEnabled = false, validationEnabled = false, generateBuilderPackage = false, builderPackage = \"io.fabric8.kubernetes.api.builder\", inline = @Inline(type = Doneable.class, prefix = \"Doneable\", value = \"done\"))\n-public class ArrayOrString implements KubernetesResource {\n-\n-  private List<String> arrayVal;\n-\n-  private String stringVal;\n-\n-  @JsonIgnore\n-  private Map<String, Object> additionalProperties = new HashMap<>();\n-\n-  /**\n-   * No args constructor for use in serialization\n-   */\n-  public ArrayOrString() {\n-  }\n-\n-  //Builders are generated for the first non-empty constructor found.\n-  public ArrayOrString(List<String> arrayVal, String stringVal, Map<String, Object> additionalProperties) {\n-    this.arrayVal = arrayVal;\n-    this.stringVal = stringVal;\n-    this.additionalProperties = additionalProperties;\n-  }\n-\n-  public ArrayOrString(String stringVal) {\n-    this(null, stringVal, new HashMap<>());\n-  }\n-\n-  public ArrayOrString(List<String> arrayVal) {\n-    this(arrayVal, null, new HashMap<>());\n-  }\n-\n-  public List<String> getArrayVal() {\n-    return arrayVal;\n-  }\n-\n-  public void setArrayVal(List<String> arrayVal) {\n-    this.arrayVal = arrayVal;\n-  }\n-\n-  public String getStringVal() {\n-    return stringVal;\n-  }\n-\n-  public void setStringVal(String stringVal) {\n-    this.stringVal = stringVal;\n-  }\n-\n-  @JsonAnyGetter\n-  public Map<String, Object> getAdditionalProperties() {\n-    return this.additionalProperties;\n-  }\n-\n-  @JsonAnySetter\n-  public void setAdditionalProperty(String name, Object value) {\n-    this.additionalProperties.put(name, value);\n-  }\n-\n-  public static class Serializer extends JsonSerializer<ArrayOrString> {\n-\n-    @Override\n-    public void serialize(ArrayOrString value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n-      if (value != null) {\n-        if (value.getStringVal() != null) {\n-          jgen.writeString(value.getStringVal());\n-        }\n-        if (value.getArrayVal() != null) {\n-          writeArray(value, jgen);\n-        }\n-      } else {\n-        jgen.writeNull();\n-      }\n-    }\n-\n-    private void writeArray(ArrayOrString value, JsonGenerator jgen) throws IOException {\n-      jgen.writeStartArray(value.getArrayVal().size());\n-      for (String n : value.getArrayVal()) {\n-        jgen.writeString(n);\n-      }\n-      jgen.writeEndArray();\n-    }\n-\n-  }\n-\n-  public static class Deserializer extends JsonDeserializer<ArrayOrString> {\n-\n-    @Override\n-    public ArrayOrString deserialize(JsonParser jsonParser, DeserializationContext ctxt) throws IOException {\n-      ObjectCodec oc = jsonParser.getCodec();\n-      JsonNode node = oc.readTree(jsonParser);\n-      ArrayOrString arrayOrString;\n-      if (node.isArray()) {\n-        List<String> elements = new ArrayList<>();\n-        node.elements().forEachRemaining(n -> elements.add(n.asText()));\n-        arrayOrString = new ArrayOrString(elements);\n-      } else {\n-        arrayOrString = new ArrayOrString(node.asText());\n-      }\n-      return arrayOrString;\n-    }\n-\n-  }\n-\n-}\n"}}, {"oid": "7a6e32f7bec2cc309441155e4c75c26045f98275", "url": "https://github.com/fabric8io/kubernetes-client/commit/7a6e32f7bec2cc309441155e4c75c26045f98275", "message": "Merge remote-tracking branch 'upstream/master' into tkn-triggers\n\n# Conflicts:\n#\tCHANGELOG.md", "committedDate": "2020-09-16T08:16:06Z", "type": "commit"}, {"oid": "441aa4e8f65c3ab076ae3be6ee33b5951d7d9640", "url": "https://github.com/fabric8io/kubernetes-client/commit/441aa4e8f65c3ab076ae3be6ee33b5951d7d9640", "message": "- added a note on Tekton Triggers to the CHEATSHEET\n- stop generating pipelines v1beta1 resources, instead depend on v1beta1 model", "committedDate": "2020-09-16T11:40:05Z", "type": "commit"}, {"oid": "957d673fb988adfd1933c75c81ebf643539ec3a0", "url": "https://github.com/fabric8io/kubernetes-client/commit/957d673fb988adfd1933c75c81ebf643539ec3a0", "message": "Merge remote-tracking branch 'upstream/master' into tkn-triggers\n\n# Conflicts:\n#\tCHANGELOG.md", "committedDate": "2020-09-16T11:42:54Z", "type": "commit"}]}