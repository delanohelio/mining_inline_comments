{"pr_number": 2501, "pr_title": "Add Retry logic in createOrReplace when 500 received from ApiServer: Workaround for #2292", "pr_createdAt": "2020-09-18T10:54:27Z", "pr_url": "https://github.com/fabric8io/kubernetes-client/pull/2501", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA1Mjk2Ng==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2501#discussion_r492052966", "bodyText": "We can make the application go into an infinite loop in case some server error is permanently (or for a long period) affecting the server.\nMaybe we should add a a MAX_RETRIES limit and check it here too.", "author": "manusa", "createdAt": "2020-09-21T13:40:27Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/base/BaseOperation.java", "diffHunk": "@@ -396,19 +397,36 @@ public final T createOrReplace(T... items) {\n       return withName(itemToCreateOrReplace.getMetadata().getName()).createOrReplace(itemToCreateOrReplace);\n     }\n \n-    try {\n-      // Create\n-      KubernetesResourceUtil.setResourceVersion(itemToCreateOrReplace, null);\n-      return create(itemToCreateOrReplace);\n-    } catch (KubernetesClientException exception) {\n-      if (exception.getCode() != HttpURLConnection.HTTP_CONFLICT) {\n-        throw exception;\n+    final CompletableFuture<T> future = new CompletableFuture<>();\n+    while (!future.isDone()) {", "originalCommit": "38265b7b132082cf0b63e656efdc958ac7e98ef6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7d9d7d6e66134d57bb6380b6af53c48e3fdd578", "chunk": "diff --git a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/base/BaseOperation.java b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/base/BaseOperation.java\nindex b6b0fb544..e1ccb48ff 100755\n--- a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/base/BaseOperation.java\n+++ b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/base/BaseOperation.java\n\n@@ -396,47 +407,33 @@ public class BaseOperation<T extends HasMetadata, L extends KubernetesResourceLi\n \n       return withName(itemToCreateOrReplace.getMetadata().getName()).createOrReplace(itemToCreateOrReplace);\n     }\n-\n-    final CompletableFuture<T> future = new CompletableFuture<>();\n-    while (!future.isDone()) {\n-      try {\n-        // Create\n-        KubernetesResourceUtil.setResourceVersion(itemToCreateOrReplace, null);\n-        future.complete(create(itemToCreateOrReplace));\n-      } catch (KubernetesClientException exception) {\n-        final T itemFromServer;\n-        if (exception.getCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) {\n-          itemFromServer = fromServer().get();\n-          if (itemFromServer == null) {\n-            try {\n-              Thread.sleep(200);\n-            } catch (InterruptedException e) {\n-              Thread.currentThread().interrupt();\n-            }\n-            continue;\n-          }\n-        } else if (exception.getCode() != HttpURLConnection.HTTP_CONFLICT) {\n-          throw exception;\n-        } else {\n-          itemFromServer = fromServer().get();\n+    T finalItemToCreateOrReplace = itemToCreateOrReplace;\n+    CreateOrReplaceHelper<T> createOrReplaceHelper = new CreateOrReplaceHelper<>(\n+      () -> create(finalItemToCreateOrReplace),\n+      () -> replace(finalItemToCreateOrReplace),\n+      () -> {\n+        try {\n+          return waitUntilCondition(Objects::nonNull, 1, TimeUnit.SECONDS);\n+        } catch (InterruptedException interruptedException) {\n+          interruptedException.printStackTrace();\n         }\n+        return null;\n+      },\n+      () -> delete(finalItemToCreateOrReplace),\n+      () -> fromServer().get()\n+    );\n \n-        // Conflict; Do Replace\n-        KubernetesResourceUtil.setResourceVersion(itemToCreateOrReplace, KubernetesResourceUtil.getResourceVersion(itemFromServer));\n-        future.complete(replace(itemToCreateOrReplace));\n-      }\n-    }\n-    return future.join();\n+    return createOrReplaceHelper.createOrReplace(finalItemToCreateOrReplace, false);\n   }\n \n   @Override\n-  public FilterWatchListDeletable<T, L, Boolean, Watch, Watcher<T>> withLabels(Map<String, String> labels) {\n+  public FilterWatchListDeletable<T, L, Boolean, Watch> withLabels(Map<String, String> labels) {\n     this.labels.putAll(labels);\n     return this;\n   }\n \n   @Override\n-  public FilterWatchListDeletable<T, L, Boolean, Watch, Watcher<T>> withLabelSelector(LabelSelector selector) {\n+  public FilterWatchListDeletable<T, L, Boolean, Watch> withLabelSelector(LabelSelector selector) {\n     Map<String, String> matchLabels = selector.getMatchLabels();\n     if (matchLabels != null) {\n       this.labels.putAll(matchLabels);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA1MzgyMw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2501#discussion_r492053823", "bodyText": "I think you mentioned that 503 could also be returned in some cases.\nMaybe better to check for the whole family (5xx) or a list of 5xx statuses. WDYT?", "author": "manusa", "createdAt": "2020-09-21T13:41:36Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/base/BaseOperation.java", "diffHunk": "@@ -396,19 +397,36 @@ public final T createOrReplace(T... items) {\n       return withName(itemToCreateOrReplace.getMetadata().getName()).createOrReplace(itemToCreateOrReplace);\n     }\n \n-    try {\n-      // Create\n-      KubernetesResourceUtil.setResourceVersion(itemToCreateOrReplace, null);\n-      return create(itemToCreateOrReplace);\n-    } catch (KubernetesClientException exception) {\n-      if (exception.getCode() != HttpURLConnection.HTTP_CONFLICT) {\n-        throw exception;\n+    final CompletableFuture<T> future = new CompletableFuture<>();\n+    while (!future.isDone()) {\n+      try {\n+        // Create\n+        KubernetesResourceUtil.setResourceVersion(itemToCreateOrReplace, null);\n+        future.complete(create(itemToCreateOrReplace));\n+      } catch (KubernetesClientException exception) {\n+        final T itemFromServer;\n+        if (exception.getCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) {", "originalCommit": "38265b7b132082cf0b63e656efdc958ac7e98ef6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7d9d7d6e66134d57bb6380b6af53c48e3fdd578", "chunk": "diff --git a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/base/BaseOperation.java b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/base/BaseOperation.java\nindex b6b0fb544..e1ccb48ff 100755\n--- a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/base/BaseOperation.java\n+++ b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/base/BaseOperation.java\n\n@@ -396,47 +407,33 @@ public class BaseOperation<T extends HasMetadata, L extends KubernetesResourceLi\n \n       return withName(itemToCreateOrReplace.getMetadata().getName()).createOrReplace(itemToCreateOrReplace);\n     }\n-\n-    final CompletableFuture<T> future = new CompletableFuture<>();\n-    while (!future.isDone()) {\n-      try {\n-        // Create\n-        KubernetesResourceUtil.setResourceVersion(itemToCreateOrReplace, null);\n-        future.complete(create(itemToCreateOrReplace));\n-      } catch (KubernetesClientException exception) {\n-        final T itemFromServer;\n-        if (exception.getCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) {\n-          itemFromServer = fromServer().get();\n-          if (itemFromServer == null) {\n-            try {\n-              Thread.sleep(200);\n-            } catch (InterruptedException e) {\n-              Thread.currentThread().interrupt();\n-            }\n-            continue;\n-          }\n-        } else if (exception.getCode() != HttpURLConnection.HTTP_CONFLICT) {\n-          throw exception;\n-        } else {\n-          itemFromServer = fromServer().get();\n+    T finalItemToCreateOrReplace = itemToCreateOrReplace;\n+    CreateOrReplaceHelper<T> createOrReplaceHelper = new CreateOrReplaceHelper<>(\n+      () -> create(finalItemToCreateOrReplace),\n+      () -> replace(finalItemToCreateOrReplace),\n+      () -> {\n+        try {\n+          return waitUntilCondition(Objects::nonNull, 1, TimeUnit.SECONDS);\n+        } catch (InterruptedException interruptedException) {\n+          interruptedException.printStackTrace();\n         }\n+        return null;\n+      },\n+      () -> delete(finalItemToCreateOrReplace),\n+      () -> fromServer().get()\n+    );\n \n-        // Conflict; Do Replace\n-        KubernetesResourceUtil.setResourceVersion(itemToCreateOrReplace, KubernetesResourceUtil.getResourceVersion(itemFromServer));\n-        future.complete(replace(itemToCreateOrReplace));\n-      }\n-    }\n-    return future.join();\n+    return createOrReplaceHelper.createOrReplace(finalItemToCreateOrReplace, false);\n   }\n \n   @Override\n-  public FilterWatchListDeletable<T, L, Boolean, Watch, Watcher<T>> withLabels(Map<String, String> labels) {\n+  public FilterWatchListDeletable<T, L, Boolean, Watch> withLabels(Map<String, String> labels) {\n     this.labels.putAll(labels);\n     return this;\n   }\n \n   @Override\n-  public FilterWatchListDeletable<T, L, Boolean, Watch, Watcher<T>> withLabelSelector(LabelSelector selector) {\n+  public FilterWatchListDeletable<T, L, Boolean, Watch> withLabelSelector(LabelSelector selector) {\n     Map<String, String> matchLabels = selector.getMatchLabels();\n     if (matchLabels != null) {\n       this.labels.putAll(matchLabels);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY5NDIwNA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2501#discussion_r507694204", "bodyText": "Hi, Shall we let this in for now or shall we handle it separately while fixing #2489", "author": "rohanKanojia", "createdAt": "2020-10-19T12:09:37Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/utils/Utils.java", "diffHunk": "@@ -358,6 +358,7 @@ public static String getPluralFromKind(String kind) {\n         break;\n       case \"NetworkPolicy\":\n       case \"PodSecurityPolicy\":\n+      case \"ServiceEntry\": // an Istio resource. Needed as getPluralFromKind is currently not configurable #2489", "originalCommit": "38265b7b132082cf0b63e656efdc958ac7e98ef6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "a7d9d7d6e66134d57bb6380b6af53c48e3fdd578", "url": "https://github.com/fabric8io/kubernetes-client/commit/a7d9d7d6e66134d57bb6380b6af53c48e3fdd578", "message": "Changes in BaseOperation to retry createOrReplace on server failure\n\n+ Moved createOrReplace logic to CreateOrReplaceHelper class\n+ Added tests", "committedDate": "2020-10-20T16:02:14Z", "type": "forcePushed"}, {"oid": "8481156ec0b86d8f854f41926f0d14b8b8780185", "url": "https://github.com/fabric8io/kubernetes-client/commit/8481156ec0b86d8f854f41926f0d14b8b8780185", "message": "Changes in BaseOperation to retry createOrReplace on server failure\n\n+ Moved createOrReplace logic to CreateOrReplaceHelper class\n+ Added tests", "committedDate": "2020-10-20T16:58:06Z", "type": "forcePushed"}, {"oid": "8feda928608c6d2393188caf2edb400c9a15913a", "url": "https://github.com/fabric8io/kubernetes-client/commit/8feda928608c6d2393188caf2edb400c9a15913a", "message": "Changes in BaseOperation to retry createOrReplace on server failure\n\n+ Moved createOrReplace logic to CreateOrReplaceHelper class\n+ Added tests", "committedDate": "2020-10-20T20:41:05Z", "type": "forcePushed"}, {"oid": "51bd2dcc9ca3e32a89c5e561a7b38746bbac1522", "url": "https://github.com/fabric8io/kubernetes-client/commit/51bd2dcc9ca3e32a89c5e561a7b38746bbac1522", "message": "Changes in BaseOperation to retry createOrReplace on server failure\n\n+ Moved createOrReplace logic to CreateOrReplaceHelper class\n+ Added tests", "committedDate": "2020-10-21T09:55:26Z", "type": "forcePushed"}, {"oid": "57838a0c2cb8ba3be027417963c016d048ef2f47", "url": "https://github.com/fabric8io/kubernetes-client/commit/57838a0c2cb8ba3be027417963c016d048ef2f47", "message": "Changes in BaseOperation to retry createOrReplace on server failure\n\n+ Moved createOrReplace logic to CreateOrReplaceHelper class\n+ Added tests", "committedDate": "2020-10-27T10:02:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcyMzg2NQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2501#discussion_r519723865", "bodyText": "Since this is not checking if the HTTP status code belongs to a server error family (code >= 500), and for our use-case we just want to retry if one of these status codes is returned by the server, it's probably a good idea to move the method to CreateOrReplaceHelper class.\nMaybe also rename it to shouldRetry or something like that, which suggests that the procedure is only retried for some specific status codes.", "author": "manusa", "createdAt": "2020-11-09T11:02:49Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/utils/Utils.java", "diffHunk": "@@ -471,4 +473,11 @@ public static String getSystemPathVariable() {\n   private static String getOperatingSystemFromSystemProperty() {\n     return System.getProperty(OS_NAME);\n   }\n+\n+  public static boolean isHttpStatusCodeFromErrorEncounteredByServer(int code) {", "originalCommit": "57838a0c2cb8ba3be027417963c016d048ef2f47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "310c87c1db9adabdba6ba4b0d54ddbd5ea4613dd", "chunk": "diff --git a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/utils/Utils.java b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/utils/Utils.java\nindex 1d8b26aff..8c7aa2192 100644\n--- a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/utils/Utils.java\n+++ b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/utils/Utils.java\n\n@@ -474,10 +473,4 @@ public class Utils {\n     return System.getProperty(OS_NAME);\n   }\n \n-  public static boolean isHttpStatusCodeFromErrorEncounteredByServer(int code) {\n-    return code == HttpURLConnection.HTTP_INTERNAL_ERROR ||\n-      code == HttpURLConnection.HTTP_BAD_GATEWAY ||\n-      code == HttpURLConnection.HTTP_UNAVAILABLE ||\n-      code == HttpURLConnection.HTTP_VERSION;\n-  }\n }\n"}}, {"oid": "310c87c1db9adabdba6ba4b0d54ddbd5ea4613dd", "url": "https://github.com/fabric8io/kubernetes-client/commit/310c87c1db9adabdba6ba4b0d54ddbd5ea4613dd", "message": "Changes in BaseOperation to retry createOrReplace on server failure\n\n+ Moved createOrReplace logic to CreateOrReplaceHelper class\n+ Added tests", "committedDate": "2020-11-09T16:17:57Z", "type": "forcePushed"}, {"oid": "cfd4be1b13816e6cdeb13abbe27e24d70da5ab3c", "url": "https://github.com/fabric8io/kubernetes-client/commit/cfd4be1b13816e6cdeb13abbe27e24d70da5ab3c", "message": "Changes in BaseOperation to retry createOrReplace on server failure\n\n+ Moved createOrReplace logic to CreateOrReplaceHelper class\n+ Added tests", "committedDate": "2020-11-09T16:43:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwNjY4MA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2501#discussion_r520306680", "bodyText": "this belongs to a teardown method.\nIf this test fails, it won't be cleaned up and probably the rest of tests that run after will fail too (if this cleanup is really necessary)", "author": "manusa", "createdAt": "2020-11-10T06:03:10Z", "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/CreateOrReplaceIT.java", "diffHunk": "@@ -232,6 +239,98 @@ public void testCreateOrReplaceIngress() {\n     client.network().ingresses().inNamespace(session.getNamespace()).withName(ingress.getMetadata().getName()).delete();\n   }\n \n+  @Test\n+  public void testCreateOrReplaceGenericResource() {\n+    // Given\n+    ConfigMap configMap = new ConfigMapBuilder()\n+      .withNewMetadata().withName(\"resource-cm-1\").endMetadata()\n+      .addToData(\"a1\", \"A1\")\n+      .addToData(\"a2\", \"A2\")\n+      .build();\n+\n+    // When\n+    ConfigMap createdResource = client.resource(configMap).inNamespace(session.getNamespace()).createOrReplace();\n+    configMap.setData(Collections.singletonMap(\"b1\", \"B1\"));\n+    ConfigMap replacedResource = client.resource(configMap).inNamespace(session.getNamespace()).createOrReplace();\n+\n+    // Then\n+    assertNotNull(createdResource);\n+    assertEquals(2, createdResource.getData().size());\n+    assertEquals(\"A1\", createdResource.getData().get(\"a1\"));\n+    assertEquals(\"A2\", createdResource.getData().get(\"a2\"));\n+    assertNotNull(replacedResource);\n+    assertEquals(1, replacedResource.getData().size());\n+    assertEquals(\"B1\", replacedResource.getData().get(\"b1\"));\n+    // Cleanup\n+    client.resource(configMap).inNamespace(session.getNamespace()).delete();", "originalCommit": "cfd4be1b13816e6cdeb13abbe27e24d70da5ab3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b6d9ba7f805981d63446a7f8a056f0dd5bc6637c", "chunk": "diff --git a/kubernetes-itests/src/test/java/io/fabric8/kubernetes/CreateOrReplaceIT.java b/kubernetes-itests/src/test/java/io/fabric8/kubernetes/CreateOrReplaceIT.java\nindex 432dfa80c..01b086b3b 100644\n--- a/kubernetes-itests/src/test/java/io/fabric8/kubernetes/CreateOrReplaceIT.java\n+++ b/kubernetes-itests/src/test/java/io/fabric8/kubernetes/CreateOrReplaceIT.java\n\n@@ -239,98 +232,6 @@ public class CreateOrReplaceIT {\n     client.network().ingresses().inNamespace(session.getNamespace()).withName(ingress.getMetadata().getName()).delete();\n   }\n \n-  @Test\n-  public void testCreateOrReplaceGenericResource() {\n-    // Given\n-    ConfigMap configMap = new ConfigMapBuilder()\n-      .withNewMetadata().withName(\"resource-cm-1\").endMetadata()\n-      .addToData(\"a1\", \"A1\")\n-      .addToData(\"a2\", \"A2\")\n-      .build();\n-\n-    // When\n-    ConfigMap createdResource = client.resource(configMap).inNamespace(session.getNamespace()).createOrReplace();\n-    configMap.setData(Collections.singletonMap(\"b1\", \"B1\"));\n-    ConfigMap replacedResource = client.resource(configMap).inNamespace(session.getNamespace()).createOrReplace();\n-\n-    // Then\n-    assertNotNull(createdResource);\n-    assertEquals(2, createdResource.getData().size());\n-    assertEquals(\"A1\", createdResource.getData().get(\"a1\"));\n-    assertEquals(\"A2\", createdResource.getData().get(\"a2\"));\n-    assertNotNull(replacedResource);\n-    assertEquals(1, replacedResource.getData().size());\n-    assertEquals(\"B1\", replacedResource.getData().get(\"b1\"));\n-    // Cleanup\n-    client.resource(configMap).inNamespace(session.getNamespace()).delete();\n-  }\n-\n-  @Test\n-  public void testCreateOrReplaceGenericResourceList() {\n-    // Given\n-    InputStream resourceListV1 = getClass().getResourceAsStream(\"/createorreplace-it-testlist-v1.yml\");\n-    InputStream resourceListV2 = getClass().getResourceAsStream(\"/createorreplace-it-testlist-v2.yml\");\n-\n-    // When\n-    List<HasMetadata> listCreated = client.load(resourceListV1).inNamespace(session.getNamespace()).createOrReplace();\n-    List<HasMetadata> listReplaced = client.load(resourceListV2).inNamespace(session.getNamespace()).createOrReplace();\n-\n-    // Then\n-    assertNotNull(listCreated);\n-    assertEquals(2, listCreated.size());\n-    Optional<HasMetadata> serviceResult = listCreated.stream().filter(p -> p instanceof Service).findFirst();\n-    assertTrue(serviceResult.isPresent());\n-    Service service = (Service) serviceResult.get();\n-    assertEquals(9376, service.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n-\n-    assertNotNull(listReplaced);\n-    assertEquals(2, listReplaced.size());\n-    Optional<HasMetadata> serviceV2Result = listReplaced.stream().filter(p -> p instanceof Service).findFirst();\n-    assertTrue(serviceV2Result.isPresent());\n-    Service serviceV2 = (Service) serviceV2Result.get();\n-    assertEquals(9090, serviceV2.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n-\n-    // Cleanup\n-    client.resourceList(listReplaced).inNamespace(session.getNamespace()).delete();\n-  }\n-\n-  @Test\n-  public void testCreateOrReplaceDeletingExisting() {\n-    // Given\n-    List<HasMetadata> listToCreate = new ArrayList<>();\n-    listToCreate.add(new ConfigMapBuilder().withNewMetadata().withName(\"createorreplace-it-delete-existing-configmap\").endMetadata()\n-      .addToData(\"A\", \"a\")\n-      .addToData(\"B\", \"b\")\n-      .build());\n-    listToCreate.add(new SecretBuilder().withNewMetadata().withName(\"createorreplace-it-delete-existing-secret\").endMetadata()\n-      .addToData(\"USERNAME\", \"YWRtaW4=\")\n-      .addToData(\"PASSWORD\", \"MWYyZDFlMmU2N2Rm\")\n-      .build());\n-\n-    // When\n-    List<HasMetadata> listCreated = client.resourceList(listToCreate).inNamespace(session.getNamespace()).createOrReplace();\n-    List<HasMetadata> listCreatedAfterDeletingExisting = client.resourceList(listToCreate)\n-      .inNamespace(session.getNamespace())\n-      .deletingExisting()\n-      .createOrReplace();\n-\n-    // Then\n-    assertNotNull(listCreated);\n-    assertEquals(2, listCreated.size());\n-    listCreated.sort(Comparator.comparing(HasMetadata::getKind));\n-\n-    assertNotNull(listCreatedAfterDeletingExisting);\n-    assertEquals(2, listCreatedAfterDeletingExisting.size());\n-    listCreatedAfterDeletingExisting.sort(Comparator.comparing(HasMetadata::getKind));\n-    assertEquals(listCreated.get(0).getMetadata().getName(), listCreatedAfterDeletingExisting.get(0).getMetadata().getName());\n-    assertNotEquals(listCreated.get(0).getMetadata().getUid(), listCreatedAfterDeletingExisting.get(0).getMetadata().getUid());\n-    assertEquals(listCreated.get(1).getMetadata().getName(), listCreatedAfterDeletingExisting.get(1).getMetadata().getName());\n-    assertNotEquals(listCreated.get(1).getMetadata().getUid(), listCreatedAfterDeletingExisting.get(1).getMetadata().getUid());\n-\n-    // Cleanup\n-    client.resourceList(listCreatedAfterDeletingExisting).inNamespace(session.getNamespace()).delete();\n-  }\n-\n   private String getTestResourcePrefix() {\n     return getClass().getSimpleName().toLowerCase();\n   }\n"}}, {"oid": "b6d9ba7f805981d63446a7f8a056f0dd5bc6637c", "url": "https://github.com/fabric8io/kubernetes-client/commit/b6d9ba7f805981d63446a7f8a056f0dd5bc6637c", "message": "Workaround for #2292", "committedDate": "2020-11-10T07:10:50Z", "type": "commit"}, {"oid": "bb0f2f67d3643e11ebbdef58bcfabeafd2d1ef18", "url": "https://github.com/fabric8io/kubernetes-client/commit/bb0f2f67d3643e11ebbdef58bcfabeafd2d1ef18", "message": "Changes in BaseOperation to retry createOrReplace on server failure\n\n+ Moved createOrReplace logic to CreateOrReplaceHelper class\n+ Added tests", "committedDate": "2020-11-10T07:11:24Z", "type": "forcePushed"}, {"oid": "2aaa79bc719491dd0efbe761f98bef15f1e86ede", "url": "https://github.com/fabric8io/kubernetes-client/commit/2aaa79bc719491dd0efbe761f98bef15f1e86ede", "message": "Changes in BaseOperation to retry createOrReplace on server failure\n\n+ Moved createOrReplace logic to CreateOrReplaceHelper class\n+ Added tests", "committedDate": "2020-11-10T07:26:00Z", "type": "commit"}, {"oid": "2aaa79bc719491dd0efbe761f98bef15f1e86ede", "url": "https://github.com/fabric8io/kubernetes-client/commit/2aaa79bc719491dd0efbe761f98bef15f1e86ede", "message": "Changes in BaseOperation to retry createOrReplace on server failure\n\n+ Moved createOrReplace logic to CreateOrReplaceHelper class\n+ Added tests", "committedDate": "2020-11-10T07:26:00Z", "type": "forcePushed"}]}