{"pr_number": 2042, "pr_title": "Fix #1247: URL parameters are not escaped.", "pr_createdAt": "2020-03-04T21:47:04Z", "pr_url": "https://github.com/fabric8io/kubernetes-client/pull/2042", "timeline": [{"oid": "4167fa65dc67f09b5101cc211afc92a8f9143f8f", "url": "https://github.com/fabric8io/kubernetes-client/commit/4167fa65dc67f09b5101cc211afc92a8f9143f8f", "message": "Fix #1247: URL parameters are not escaped.", "committedDate": "2020-03-05T12:44:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4NDA3Ng==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2042#discussion_r388384076", "bodyText": "I think you need to separate the arguments. > exec(\"echo\", \"'something here'\");\nAlso the } in (W&RLD} looks like a typo", "author": "manusa", "createdAt": "2020-03-05T15:51:45Z", "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/PodIT.java", "diffHunk": "@@ -169,6 +169,39 @@ public void onClose(int i, String s) {\n     assertNotNull(out.toString());\n   }\n \n+  @Test\n+  public void execEchoCommand() throws InterruptedException {\n+    // Wait for resources to get ready\n+    ReadyEntity<Pod> podReady = new ReadyEntity<>(Pod.class, client, pod1.getMetadata().getName(), currentNamespace);\n+    await().atMost(30, TimeUnit.SECONDS).until(podReady);\n+    final CountDownLatch execLatch = new CountDownLatch(1);\n+    ByteArrayOutputStream out = new ByteArrayOutputStream();\n+    ExecWatch execWatch = client.pods().inNamespace(currentNamespace).withName(pod1.getMetadata().getName())\n+      .writingOutput(out).withTTY().usingListener(new ExecListener() {\n+        @Override\n+        public void onOpen(Response response) {\n+          logger.info(\"Shell was opened\");\n+        }\n+\n+        @Override\n+        public void onFailure(Throwable throwable, Response response) {\n+          logger.info(\"Shell barfed\");\n+          execLatch.countDown();\n+        }\n+\n+        @Override\n+        public void onClose(int i, String s) {\n+          logger.info(\"Shell closed\");\n+          execLatch.countDown();\n+        }\n+      }).exec(\"echo 'H$ll* (W&RLD}'\"); // These arguments in the exec command should be escaped.", "originalCommit": "4167fa65dc67f09b5101cc211afc92a8f9143f8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMTQ3Nw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2042#discussion_r388711477", "bodyText": "No I added that bracket to demonstrate that all of these characters are being escaped properly.", "author": "dev-gaur", "createdAt": "2020-03-06T04:47:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4NDA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczMTM4OA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2042#discussion_r388731388", "bodyText": "I understand, but then the assertion was inconsistent (changed now).", "author": "manusa", "createdAt": "2020-03-06T06:24:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4NDA3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2f3752edeee5390eb649d784770750313a8e16c3", "chunk": "diff --git a/kubernetes-itests/src/test/java/io/fabric8/kubernetes/PodIT.java b/kubernetes-itests/src/test/java/io/fabric8/kubernetes/PodIT.java\nindex 62af95105..a82070f41 100644\n--- a/kubernetes-itests/src/test/java/io/fabric8/kubernetes/PodIT.java\n+++ b/kubernetes-itests/src/test/java/io/fabric8/kubernetes/PodIT.java\n\n@@ -170,47 +170,26 @@ public class PodIT {\n   }\n \n   @Test\n-  public void execEchoCommand() throws InterruptedException {\n+  public void readFile() throws IOException {\n     // Wait for resources to get ready\n     ReadyEntity<Pod> podReady = new ReadyEntity<>(Pod.class, client, pod1.getMetadata().getName(), currentNamespace);\n     await().atMost(30, TimeUnit.SECONDS).until(podReady);\n-    final CountDownLatch execLatch = new CountDownLatch(1);\n-    ByteArrayOutputStream out = new ByteArrayOutputStream();\n-    ExecWatch execWatch = client.pods().inNamespace(currentNamespace).withName(pod1.getMetadata().getName())\n-      .writingOutput(out).withTTY().usingListener(new ExecListener() {\n-        @Override\n-        public void onOpen(Response response) {\n-          logger.info(\"Shell was opened\");\n-        }\n-\n-        @Override\n-        public void onFailure(Throwable throwable, Response response) {\n-          logger.info(\"Shell barfed\");\n-          execLatch.countDown();\n-        }\n-\n-        @Override\n-        public void onClose(int i, String s) {\n-          logger.info(\"Shell closed\");\n-          execLatch.countDown();\n-        }\n-      }).exec(\"echo 'H$ll* (W&RLD}'\"); // These arguments in the exec command should be escaped.\n-\n-    execLatch.await(5, TimeUnit.SECONDS);\n-    assertNotNull(execWatch);\n-    assertNotNull(out.toString());\n-    assertEquals(out.toString(), \"H$ll* (W&RLD)\");\n+    ExecWatch watch = client.pods().inNamespace(currentNamespace).withName(pod1.getMetadata().getName()).writingOutput(System.out).exec(\"sh\", \"-c\", \"echo 'hello' > /msg\");\n+    try (InputStream is = client.pods().inNamespace(currentNamespace).withName(pod1.getMetadata().getName()).file(\"/msg\").read())  {\n+      String result = new BufferedReader(new InputStreamReader(is)).lines().collect(Collectors.joining(\"\\n\"));\n+      assertEquals(\"hello\", result);\n+    }\n   }\n \n   @Test\n-  public void readFile() throws IOException {\n+  public void readFileEscapedParams() throws IOException {\n     // Wait for resources to get ready\n     ReadyEntity<Pod> podReady = new ReadyEntity<>(Pod.class, client, pod1.getMetadata().getName(), currentNamespace);\n     await().atMost(30, TimeUnit.SECONDS).until(podReady);\n-    ExecWatch watch = client.pods().inNamespace(currentNamespace).withName(pod1.getMetadata().getName()).writingOutput(System.out).exec(\"sh\", \"-c\", \"echo 'hello' > /msg\");\n+    ExecWatch watch = client.pods().inNamespace(currentNamespace).withName(pod1.getMetadata().getName()).writingOutput(System.out).exec(\"sh\", \"-c\", \"echo 'H$ll* (W&RLD}' > /msg\");\n     try (InputStream is = client.pods().inNamespace(currentNamespace).withName(pod1.getMetadata().getName()).file(\"/msg\").read())  {\n       String result = new BufferedReader(new InputStreamReader(is)).lines().collect(Collectors.joining(\"\\n\"));\n-      assertEquals(\"hello\", result);\n+      assertEquals(\"H$ll* (W&RLD}\", result);\n     }\n   }\n \n"}}, {"oid": "2f3752edeee5390eb649d784770750313a8e16c3", "url": "https://github.com/fabric8io/kubernetes-client/commit/2f3752edeee5390eb649d784770750313a8e16c3", "message": "Fix #1247: URL parameters are not escaped.", "committedDate": "2020-03-05T21:10:57Z", "type": "commit"}, {"oid": "2f3752edeee5390eb649d784770750313a8e16c3", "url": "https://github.com/fabric8io/kubernetes-client/commit/2f3752edeee5390eb649d784770750313a8e16c3", "message": "Fix #1247: URL parameters are not escaped.", "committedDate": "2020-03-05T21:10:57Z", "type": "forcePushed"}]}