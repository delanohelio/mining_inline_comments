{"pr_number": 2011, "pr_title": "fix: apiVersion and kind from CRD in registration", "pr_createdAt": "2020-02-19T16:08:57Z", "pr_url": "https://github.com/fabric8io/kubernetes-client/pull/2011", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc5OTc5OA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2011#discussion_r381799798", "bodyText": "I'd probably add an assertion validation the content of a field in order to verify deserialization worked.\n(e.g. assertThat(((MyCustomResource)resource).getApiVersion(), equalTo(\"custom.group/v1alpha1\")))", "author": "manusa", "createdAt": "2020-02-20T06:29:19Z", "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/CustomResourceOperationsImplTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.kubernetes.client.dsl.internal;\n+\n+import java.io.IOException;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesResource;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinition;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinitionBuilder;\n+import io.fabric8.kubernetes.client.CustomResource;\n+import io.fabric8.kubernetes.client.CustomResourceList;\n+import io.fabric8.kubernetes.internal.KubernetesDeserializer;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.MappingJsonFactory;\n+\n+import static org.hamcrest.core.IsInstanceOf.instanceOf;\n+import static org.junit.Assert.assertThat;\n+\n+public class CustomResourceOperationsImplTest {\n+\n+\tpublic static class MyCustomResource extends CustomResource {\n+    }\n+\n+\tpublic static class MyCustomResourceList extends CustomResourceList<MyCustomResource> {\n+    }\n+\n+    CustomResourceDefinition crd = new CustomResourceDefinitionBuilder()\n+        .withApiVersion(\"custom.group/v1alpha1\")\n+        .withKind(\"MyCustomResource\")\n+        .withNewMetadata()\n+            .withName(\"custom.name\")\n+        .endMetadata()\n+        .withNewSpec()\n+            .withGroup(\"custom.group\")\n+            .withVersion(\"v1alpha1\")\n+            .withNewNames()\n+                .withKind(\"MyCustomResource\")\n+                .withListKind(\"MyCustomResourceList\")\n+                .withPlural(\"mycustomresources\")\n+                .withSingular(\"mycustomresource\")\n+            .endNames()\n+        .endSpec()\n+    .build();\n+\n+    CustomResourceOperationContext context = new CustomResourceOperationContext()\n+        .withCrd(crd)\n+        .withType(MyCustomResource.class)\n+        .withListType(MyCustomResourceList.class);\n+\n+    @Test\n+\tpublic void shouldRegisterWithKubernetesDeserializer() throws IOException {\n+\t\t// CustomResourceOperationsImpl constructor invokes KubernetesDeserializer::registerCustomKind\n+\t\tnew CustomResourceOperationsImpl<>(context);\n+\n+\t\tJsonFactory factory = new MappingJsonFactory();\n+\t\tJsonParser parser = factory.createParser(\"{\\n\" + \n+\t\t    \"    \\\"apiVersion\\\": \\\"custom.group/v1alpha1\\\",\\n\" + \n+\t\t    \"    \\\"kind\\\": \\\"MyCustomResource\\\"\\n\" + \n+\t\t    \"}\");\n+\n+\t\tKubernetesDeserializer deserializer = new KubernetesDeserializer();\n+\t\tKubernetesResource resource = deserializer.deserialize(parser, null);\n+\n+\t\tassertThat(resource, instanceOf(MyCustomResource.class));", "originalCommit": "8cc843ee42270d2b99fe3b1a025f689ced613032", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg1ODk3OA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2011#discussion_r381858978", "bodyText": "Added https://github.com/fabric8io/kubernetes-client/pull/2011/files#diff-1500b8672a6f6391abfa76c29b8128cfR83", "author": "zregvart", "createdAt": "2020-02-20T08:53:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc5OTc5OA=="}], "type": "inlineReview", "revised_code": {"commit": "8bf70bd0308c7f5c6b89254f7d7f3432275c41ff", "chunk": "diff --git a/kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/CustomResourceOperationsImplTest.java b/kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/CustomResourceOperationsImplTest.java\nindex 322648429..eb7e627e9 100644\n--- a/kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/CustomResourceOperationsImplTest.java\n+++ b/kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/CustomResourceOperationsImplTest.java\n\n@@ -31,54 +31,56 @@ import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.databind.MappingJsonFactory;\n \n import static org.hamcrest.core.IsInstanceOf.instanceOf;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n \n public class CustomResourceOperationsImplTest {\n \n-\tpublic static class MyCustomResource extends CustomResource {\n-    }\n+  public static class MyCustomResource extends CustomResource {\n+  }\n \n-\tpublic static class MyCustomResourceList extends CustomResourceList<MyCustomResource> {\n-    }\n+  public static class MyCustomResourceList extends CustomResourceList<MyCustomResource> {\n+  }\n \n-    CustomResourceDefinition crd = new CustomResourceDefinitionBuilder()\n-        .withApiVersion(\"custom.group/v1alpha1\")\n+  private final CustomResourceDefinition crd = new CustomResourceDefinitionBuilder()\n+    .withApiVersion(\"custom.group/v1alpha1\")\n+    .withKind(\"MyCustomResource\")\n+    .withNewMetadata()\n+      .withName(\"custom.name\")\n+    .endMetadata()\n+    .withNewSpec()\n+      .withGroup(\"custom.group\")\n+      .withVersion(\"v1alpha1\")\n+      .withNewNames()\n         .withKind(\"MyCustomResource\")\n-        .withNewMetadata()\n-            .withName(\"custom.name\")\n-        .endMetadata()\n-        .withNewSpec()\n-            .withGroup(\"custom.group\")\n-            .withVersion(\"v1alpha1\")\n-            .withNewNames()\n-                .withKind(\"MyCustomResource\")\n-                .withListKind(\"MyCustomResourceList\")\n-                .withPlural(\"mycustomresources\")\n-                .withSingular(\"mycustomresource\")\n-            .endNames()\n-        .endSpec()\n-    .build();\n+        .withListKind(\"MyCustomResourceList\")\n+        .withPlural(\"mycustomresources\")\n+        .withSingular(\"mycustomresource\")\n+      .endNames()\n+    .endSpec()\n+  .build();\n \n-    CustomResourceOperationContext context = new CustomResourceOperationContext()\n-        .withCrd(crd)\n-        .withType(MyCustomResource.class)\n-        .withListType(MyCustomResourceList.class);\n+  private final CustomResourceOperationContext context = new CustomResourceOperationContext()\n+    .withCrd(crd)\n+    .withType(MyCustomResource.class)\n+    .withListType(MyCustomResourceList.class);\n \n-    @Test\n-\tpublic void shouldRegisterWithKubernetesDeserializer() throws IOException {\n-\t\t// CustomResourceOperationsImpl constructor invokes KubernetesDeserializer::registerCustomKind\n-\t\tnew CustomResourceOperationsImpl<>(context);\n+  @Test\n+  public void shouldRegisterWithKubernetesDeserializer() throws IOException {\n+    // CustomResourceOperationsImpl constructor invokes KubernetesDeserializer::registerCustomKind\n+    new CustomResourceOperationsImpl<>(context);\n \n-\t\tJsonFactory factory = new MappingJsonFactory();\n-\t\tJsonParser parser = factory.createParser(\"{\\n\" + \n-\t\t    \"    \\\"apiVersion\\\": \\\"custom.group/v1alpha1\\\",\\n\" + \n-\t\t    \"    \\\"kind\\\": \\\"MyCustomResource\\\"\\n\" + \n-\t\t    \"}\");\n+    JsonFactory factory = new MappingJsonFactory();\n+    JsonParser parser = factory.createParser(\"{\\n\" + \n+      \"    \\\"apiVersion\\\": \\\"custom.group/v1alpha1\\\",\\n\" + \n+      \"    \\\"kind\\\": \\\"MyCustomResource\\\"\\n\" + \n+      \"}\");\n \n-\t\tKubernetesDeserializer deserializer = new KubernetesDeserializer();\n-\t\tKubernetesResource resource = deserializer.deserialize(parser, null);\n+    KubernetesDeserializer deserializer = new KubernetesDeserializer();\n+    KubernetesResource resource = deserializer.deserialize(parser, null);\n \n-\t\tassertThat(resource, instanceOf(MyCustomResource.class));\n-\t}\n+    assertThat(resource, instanceOf(MyCustomResource.class));\n+    assertEquals(\"custom.group/v1alpha1\", ((MyCustomResource) resource).getApiVersion());\n+  }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwMTEyNQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2011#discussion_r381801125", "bodyText": "Please add access modifiers to these fields (crd+context > private)\nIdeally field instantiation should happen inside a test setup method (@BeforeEach) in order to avoid side effects when new tests are added to the suite.", "author": "manusa", "createdAt": "2020-02-20T06:31:51Z", "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/CustomResourceOperationsImplTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.kubernetes.client.dsl.internal;\n+\n+import java.io.IOException;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesResource;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinition;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinitionBuilder;\n+import io.fabric8.kubernetes.client.CustomResource;\n+import io.fabric8.kubernetes.client.CustomResourceList;\n+import io.fabric8.kubernetes.internal.KubernetesDeserializer;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.MappingJsonFactory;\n+\n+import static org.hamcrest.core.IsInstanceOf.instanceOf;\n+import static org.junit.Assert.assertThat;\n+\n+public class CustomResourceOperationsImplTest {\n+\n+\tpublic static class MyCustomResource extends CustomResource {\n+    }\n+\n+\tpublic static class MyCustomResourceList extends CustomResourceList<MyCustomResource> {\n+    }\n+\n+    CustomResourceDefinition crd = new CustomResourceDefinitionBuilder()", "originalCommit": "8cc843ee42270d2b99fe3b1a025f689ced613032", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg1OTUwMA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2011#discussion_r381859500", "bodyText": "Changed to private final this should cause no side effects that I can think of.", "author": "zregvart", "createdAt": "2020-02-20T08:54:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwMTEyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg4MTA5NQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2011#discussion_r381881095", "bodyText": "Making it final doesn't make it immutable which may lead to some side-effects:\nSo if one of the test cases (not at the moment, and probably not ever) does something like crd.setApiVersion(\"bar\") in order to do some corner-case test and some other test asserts on this field, it will fail. It will also fail in a non-deterministic way depending on how the system computes the test execution order.\nThat's why it's always recommended to use setup and tear down methods in tests.", "author": "manusa", "createdAt": "2020-02-20T09:33:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwMTEyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "8bf70bd0308c7f5c6b89254f7d7f3432275c41ff", "chunk": "diff --git a/kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/CustomResourceOperationsImplTest.java b/kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/CustomResourceOperationsImplTest.java\nindex 322648429..eb7e627e9 100644\n--- a/kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/CustomResourceOperationsImplTest.java\n+++ b/kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/CustomResourceOperationsImplTest.java\n\n@@ -31,54 +31,56 @@ import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.databind.MappingJsonFactory;\n \n import static org.hamcrest.core.IsInstanceOf.instanceOf;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n \n public class CustomResourceOperationsImplTest {\n \n-\tpublic static class MyCustomResource extends CustomResource {\n-    }\n+  public static class MyCustomResource extends CustomResource {\n+  }\n \n-\tpublic static class MyCustomResourceList extends CustomResourceList<MyCustomResource> {\n-    }\n+  public static class MyCustomResourceList extends CustomResourceList<MyCustomResource> {\n+  }\n \n-    CustomResourceDefinition crd = new CustomResourceDefinitionBuilder()\n-        .withApiVersion(\"custom.group/v1alpha1\")\n+  private final CustomResourceDefinition crd = new CustomResourceDefinitionBuilder()\n+    .withApiVersion(\"custom.group/v1alpha1\")\n+    .withKind(\"MyCustomResource\")\n+    .withNewMetadata()\n+      .withName(\"custom.name\")\n+    .endMetadata()\n+    .withNewSpec()\n+      .withGroup(\"custom.group\")\n+      .withVersion(\"v1alpha1\")\n+      .withNewNames()\n         .withKind(\"MyCustomResource\")\n-        .withNewMetadata()\n-            .withName(\"custom.name\")\n-        .endMetadata()\n-        .withNewSpec()\n-            .withGroup(\"custom.group\")\n-            .withVersion(\"v1alpha1\")\n-            .withNewNames()\n-                .withKind(\"MyCustomResource\")\n-                .withListKind(\"MyCustomResourceList\")\n-                .withPlural(\"mycustomresources\")\n-                .withSingular(\"mycustomresource\")\n-            .endNames()\n-        .endSpec()\n-    .build();\n+        .withListKind(\"MyCustomResourceList\")\n+        .withPlural(\"mycustomresources\")\n+        .withSingular(\"mycustomresource\")\n+      .endNames()\n+    .endSpec()\n+  .build();\n \n-    CustomResourceOperationContext context = new CustomResourceOperationContext()\n-        .withCrd(crd)\n-        .withType(MyCustomResource.class)\n-        .withListType(MyCustomResourceList.class);\n+  private final CustomResourceOperationContext context = new CustomResourceOperationContext()\n+    .withCrd(crd)\n+    .withType(MyCustomResource.class)\n+    .withListType(MyCustomResourceList.class);\n \n-    @Test\n-\tpublic void shouldRegisterWithKubernetesDeserializer() throws IOException {\n-\t\t// CustomResourceOperationsImpl constructor invokes KubernetesDeserializer::registerCustomKind\n-\t\tnew CustomResourceOperationsImpl<>(context);\n+  @Test\n+  public void shouldRegisterWithKubernetesDeserializer() throws IOException {\n+    // CustomResourceOperationsImpl constructor invokes KubernetesDeserializer::registerCustomKind\n+    new CustomResourceOperationsImpl<>(context);\n \n-\t\tJsonFactory factory = new MappingJsonFactory();\n-\t\tJsonParser parser = factory.createParser(\"{\\n\" + \n-\t\t    \"    \\\"apiVersion\\\": \\\"custom.group/v1alpha1\\\",\\n\" + \n-\t\t    \"    \\\"kind\\\": \\\"MyCustomResource\\\"\\n\" + \n-\t\t    \"}\");\n+    JsonFactory factory = new MappingJsonFactory();\n+    JsonParser parser = factory.createParser(\"{\\n\" + \n+      \"    \\\"apiVersion\\\": \\\"custom.group/v1alpha1\\\",\\n\" + \n+      \"    \\\"kind\\\": \\\"MyCustomResource\\\"\\n\" + \n+      \"}\");\n \n-\t\tKubernetesDeserializer deserializer = new KubernetesDeserializer();\n-\t\tKubernetesResource resource = deserializer.deserialize(parser, null);\n+    KubernetesDeserializer deserializer = new KubernetesDeserializer();\n+    KubernetesResource resource = deserializer.deserialize(parser, null);\n \n-\t\tassertThat(resource, instanceOf(MyCustomResource.class));\n-\t}\n+    assertThat(resource, instanceOf(MyCustomResource.class));\n+    assertEquals(\"custom.group/v1alpha1\", ((MyCustomResource) resource).getApiVersion());\n+  }\n \n }\n"}}, {"oid": "8bf70bd0308c7f5c6b89254f7d7f3432275c41ff", "url": "https://github.com/fabric8io/kubernetes-client/commit/8bf70bd0308c7f5c6b89254f7d7f3432275c41ff", "message": "fix: apiVersion and kind from CRD in registration\n\nIn `CustomResourceOperationsImpl` construction\n`KubernetesDeserializer::registerCustomKind` is invoked without\n`apiVersion` and with `kind` set to the class name. This could lead to\nissues when deserializing custom resources, in my example:\n\n```\ncom.fasterxml.jackson.databind.JsonMappingException: No resource type found for:camel.apache.org/v1alpha1#Integration\n at [Source: (String)\"{\"type\":\"DELETED\",\"object\":{\"apiVersion\":\"camel.apache.org/v1alpha1\",\"kind\":\"Integration\",\"metadata\":{\"annotations\":{\"prometheus.io/port\":\"9779\",\"prometheus.io/scrape\":\"true\",\"syndesis.io/deploy-id\":\"i-M0SZstrdU_fCuujYkqGz:2\",\"syndesis.io/deployment-version\":\"2\",\"syndesis.io/integration-id\":\"i-M0SZstrdU_fCuujYkqGz\",\"syndesis.io/integration-name\":\"t2l\"},\"creationTimestamp\":\"2020-02-19T13:14:10Z\",\"generation\":1,\"labels\":{\"syndesis.io/app\":\"syndesis\",\"syndesis.io/component\":\"integration\",\"syndesis.\"[truncated 3644 chars]; line: 1, column: 4142] (through reference chain: io.fabric8.kubernetes.api.model.WatchEvent[\"object\"])\n\tat com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:271) ~[jackson-databind-2.10.2.jar:2.10.2]\n\tat io.fabric8.kubernetes.internal.KubernetesDeserializer.deserialize(KubernetesDeserializer.java:78) ~[kubernetes-model-4.6.1.jar:4.6.1]\n\tat io.fabric8.kubernetes.internal.KubernetesDeserializer.deserialize(KubernetesDeserializer.java:33) ~[kubernetes-model-4.6.1.jar:4.6.1]\n```\n\nBecause only `\"Integration\"` would be registered, whereas type lookup is\nusing `apiVersion` and `kind.\n\nThis changes that to specify the `apiVersion` and `kind` based on the\ndefinition given in the `CustomResource`.", "committedDate": "2020-02-20T08:45:03Z", "type": "commit"}, {"oid": "8bf70bd0308c7f5c6b89254f7d7f3432275c41ff", "url": "https://github.com/fabric8io/kubernetes-client/commit/8bf70bd0308c7f5c6b89254f7d7f3432275c41ff", "message": "fix: apiVersion and kind from CRD in registration\n\nIn `CustomResourceOperationsImpl` construction\n`KubernetesDeserializer::registerCustomKind` is invoked without\n`apiVersion` and with `kind` set to the class name. This could lead to\nissues when deserializing custom resources, in my example:\n\n```\ncom.fasterxml.jackson.databind.JsonMappingException: No resource type found for:camel.apache.org/v1alpha1#Integration\n at [Source: (String)\"{\"type\":\"DELETED\",\"object\":{\"apiVersion\":\"camel.apache.org/v1alpha1\",\"kind\":\"Integration\",\"metadata\":{\"annotations\":{\"prometheus.io/port\":\"9779\",\"prometheus.io/scrape\":\"true\",\"syndesis.io/deploy-id\":\"i-M0SZstrdU_fCuujYkqGz:2\",\"syndesis.io/deployment-version\":\"2\",\"syndesis.io/integration-id\":\"i-M0SZstrdU_fCuujYkqGz\",\"syndesis.io/integration-name\":\"t2l\"},\"creationTimestamp\":\"2020-02-19T13:14:10Z\",\"generation\":1,\"labels\":{\"syndesis.io/app\":\"syndesis\",\"syndesis.io/component\":\"integration\",\"syndesis.\"[truncated 3644 chars]; line: 1, column: 4142] (through reference chain: io.fabric8.kubernetes.api.model.WatchEvent[\"object\"])\n\tat com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:271) ~[jackson-databind-2.10.2.jar:2.10.2]\n\tat io.fabric8.kubernetes.internal.KubernetesDeserializer.deserialize(KubernetesDeserializer.java:78) ~[kubernetes-model-4.6.1.jar:4.6.1]\n\tat io.fabric8.kubernetes.internal.KubernetesDeserializer.deserialize(KubernetesDeserializer.java:33) ~[kubernetes-model-4.6.1.jar:4.6.1]\n```\n\nBecause only `\"Integration\"` would be registered, whereas type lookup is\nusing `apiVersion` and `kind.\n\nThis changes that to specify the `apiVersion` and `kind` based on the\ndefinition given in the `CustomResource`.", "committedDate": "2020-02-20T08:45:03Z", "type": "forcePushed"}]}