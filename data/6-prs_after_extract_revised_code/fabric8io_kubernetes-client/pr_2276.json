{"pr_number": 2276, "pr_title": "E2E Github Action workflow for minikube", "pr_createdAt": "2020-06-09T16:59:58Z", "pr_url": "https://github.com/fabric8io/kubernetes-client/pull/2276", "timeline": [{"oid": "d54d9cefe78ddb137372f89c27a29f10ac3f4175", "url": "https://github.com/fabric8io/kubernetes-client/commit/d54d9cefe78ddb137372f89c27a29f10ac3f4175", "message": "E2E Github Action workflow for minikube", "committedDate": "2020-06-26T06:44:53Z", "type": "forcePushed"}, {"oid": "a31f35a1d9d208ca4f8ff48a867b2f3317850a10", "url": "https://github.com/fabric8io/kubernetes-client/commit/a31f35a1d9d208ca4f8ff48a867b2f3317850a10", "message": "E2E Github Action workflow for minikube", "committedDate": "2020-06-26T09:34:00Z", "type": "forcePushed"}, {"oid": "41db6749cded59d445a6099a21c33646601ff87d", "url": "https://github.com/fabric8io/kubernetes-client/commit/41db6749cded59d445a6099a21c33646601ff87d", "message": "E2E Github Action workflow for minikube", "committedDate": "2020-06-26T17:03:57Z", "type": "forcePushed"}, {"oid": "9dced6679154c7a3bde4d624ee4f1474656a8f2a", "url": "https://github.com/fabric8io/kubernetes-client/commit/9dced6679154c7a3bde4d624ee4f1474656a8f2a", "message": "E2E Github Action workflow for minikube", "committedDate": "2020-06-28T17:40:46Z", "type": "forcePushed"}, {"oid": "737d0d4ccd601fbd400ab49295cc785384d8487d", "url": "https://github.com/fabric8io/kubernetes-client/commit/737d0d4ccd601fbd400ab49295cc785384d8487d", "message": "E2E Github Action workflow for minikube", "committedDate": "2020-06-29T05:59:21Z", "type": "forcePushed"}, {"oid": "9caced3b00043092666b5217fe5a666c80728a2e", "url": "https://github.com/fabric8io/kubernetes-client/commit/9caced3b00043092666b5217fe5a666c80728a2e", "message": "E2E Github Action workflow for minikube", "committedDate": "2020-06-29T06:44:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyNzM0MA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2276#discussion_r447427340", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static Logger logger = Logger.getLogger(PodIT.class.getName());\n          \n          \n            \n              private static final Logger logger = Logger.getLogger(PodIT.class.getName());", "author": "manusa", "createdAt": "2020-06-30T05:56:32Z", "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/PodIT.java", "diffHunk": "@@ -84,10 +82,11 @@\n \n   private String currentNamespace;\n \n-  private static final Logger logger = LoggerFactory.getLogger(PodIT.class);\n+  private static Logger logger = Logger.getLogger(PodIT.class.getName());", "originalCommit": "9caced3b00043092666b5217fe5a666c80728a2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyNzY5NQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2276#discussion_r447427695", "bodyText": "If you changed this because of the Sonar warning, it was complaining about the order of the keywords.", "author": "manusa", "createdAt": "2020-06-30T05:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyNzM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "2d2a197b625a69ecf9e8c97f77e98a4f3d50cc86", "chunk": "diff --git a/kubernetes-itests/src/test/java/io/fabric8/kubernetes/PodIT.java b/kubernetes-itests/src/test/java/io/fabric8/kubernetes/PodIT.java\nindex 3788b2239..6ca412b8e 100644\n--- a/kubernetes-itests/src/test/java/io/fabric8/kubernetes/PodIT.java\n+++ b/kubernetes-itests/src/test/java/io/fabric8/kubernetes/PodIT.java\n\n@@ -82,69 +80,75 @@ public class PodIT {\n \n   private String currentNamespace;\n \n-  private static Logger logger = Logger.getLogger(PodIT.class.getName());\n+  private final static Logger logger = Logger.getLogger(PodIT.class.getName());\n \n   @Before\n   public void init() {\n-    Logger.getLogger(OkHttpClient.class.getName()).setLevel(Level.FINE);\n     currentNamespace = session.getNamespace();\n-    client.pods().inNamespace(currentNamespace).delete();\n-\n-    String suffix =  RandomStringUtils.randomAlphanumeric(6).toLowerCase(Locale.ROOT);\n-    String pdbScope = \"test-\" + suffix;\n+  }\n \n-    pod1 = new PodBuilder()\n-      .withNewMetadata()\n-      .withName(\"pod1-\" + suffix)\n-      .addToLabels(\"pdb-scope\", pdbScope)\n-      .endMetadata()\n-      .withNewSpec()\n-      .addNewContainer()\n-      .withName(\"busybox\")\n-      .withImage(\"busybox\")\n-      .withCommand(\"sleep\",\"36000\")\n-      .endContainer()\n-      .endSpec()\n-      .build();\n+  @Test\n+  public void testOperations() throws InterruptedException, IOException {\n+    create();\n+    load();\n+    get();\n+    list();\n+    update();\n+    log();\n+    exec();\n+    readFile();\n+    readFileEscapedParams();\n+    uploadFile();\n+    uploadDir();\n+    copyFile();\n+    listFromServer();\n+    delete();\n+  }\n \n+  public void create() {\n+    Logger.getLogger(OkHttpClient.class.getName()).setLevel(Level.FINE);\n+    currentNamespace = session.getNamespace();\n+    pod1 = getPodBuilder().build();\n     client.pods().inNamespace(currentNamespace).createOrReplace(pod1);\n   }\n \n-  @Test\n   public void load() {\n     Pod aPod = client.pods().inNamespace(currentNamespace).load(getClass().getResourceAsStream(\"/test-pod.yml\")).get();\n     assertThat(aPod).isNotNull();\n     assertEquals(\"nginx\", aPod.getMetadata().getName());\n   }\n \n-  @Test\n   public void get() {\n     pod1 = client.pods().inNamespace(currentNamespace).withName(pod1.getMetadata().getName()).get();\n     assertNotNull(pod1);\n   }\n \n-  @Test\n   public void list() {\n     PodList podList = client.pods().inNamespace(currentNamespace).list();\n     assertThat(podList).isNotNull();\n     assertTrue(podList.getItems().size() >= 1);\n   }\n \n-  @Test\n   public void update() {\n     pod1 = client.pods().inNamespace(currentNamespace).withName(pod1.getMetadata().getName()).edit()\n       .editMetadata().addToLabels(\"foo\", \"bar\").endMetadata().done();\n     assertEquals(\"bar\", pod1.getMetadata().getLabels().get(\"foo\"));\n   }\n \n-  @Test\n   public void delete() {\n     assertTrue(client.pods().inNamespace(currentNamespace).delete(pod1));\n   }\n \n   @Test\n   public void evict() throws InterruptedException {\n-    String pdbScope = pod1.getMetadata().getLabels().get(\"pdb-scope\");\n+    Pod evictPod1 = getPodBuilder()\n+      .withNewMetadata()\n+      .withName(\"pod-evict1\")\n+      .withLabels(Collections.singletonMap(\"pdb-scope\", \"pod-evict1\"))\n+      .endMetadata()\n+      .build();\n+    evictPod1 = client.pods().inNamespace(currentNamespace).createOrReplace(evictPod1);\n+    String pdbScope = evictPod1.getMetadata().getLabels().get(\"pdb-scope\");\n     assertNotNull(\"pdb-scope label is null. is pod1 misconfigured?\", pdbScope);\n \n     PodDisruptionBudget pdb = new PodDisruptionBudgetBuilder()\n"}}, {"oid": "e75d8802a2f927e1356067fb4b69e16547b85a71", "url": "https://github.com/fabric8io/kubernetes-client/commit/e75d8802a2f927e1356067fb4b69e16547b85a71", "message": "E2E Github Action workflow for minikube", "committedDate": "2020-07-01T18:54:24Z", "type": "commit"}, {"oid": "2d2a197b625a69ecf9e8c97f77e98a4f3d50cc86", "url": "https://github.com/fabric8io/kubernetes-client/commit/2d2a197b625a69ecf9e8c97f77e98a4f3d50cc86", "message": "Make test execution serial by forced serial execution\n\nEarlier we were creating and deleting resources @Before and @After executing\nevery test, which seems redundant and resource intensive task too. We can synchronize\nexecution of tests so that they make use of output generated in intermediate steps rather\nthan creating everything from scratch", "committedDate": "2020-07-01T18:54:25Z", "type": "forcePushed"}, {"oid": "928807ac48db3aecd7f773255bab18081e366b74", "url": "https://github.com/fabric8io/kubernetes-client/commit/928807ac48db3aecd7f773255bab18081e366b74", "message": "Make test execution serial by forced serial execution\n\nEarlier we were creating and deleting resources @Before and @After executing\nevery test, which seems redundant and resource intensive task too. We can synchronize\nexecution of tests so that they make use of output generated in intermediate steps rather\nthan creating everything from scratch", "committedDate": "2020-07-02T05:10:59Z", "type": "forcePushed"}, {"oid": "3ebe362aa9b8ef0b39e92452006c83cc49e8b8aa", "url": "https://github.com/fabric8io/kubernetes-client/commit/3ebe362aa9b8ef0b39e92452006c83cc49e8b8aa", "message": "Make test execution serial by forced serial execution\n\nEarlier we were creating and deleting resources @Before and @After executing\nevery test, which seems redundant and resource intensive task too. We can synchronize\nexecution of tests so that they make use of output generated in intermediate steps rather\nthan creating everything from scratch", "committedDate": "2020-07-02T06:28:20Z", "type": "forcePushed"}, {"oid": "d5d406654b0bfb0bce1a76e6198b5e8dfbc978f6", "url": "https://github.com/fabric8io/kubernetes-client/commit/d5d406654b0bfb0bce1a76e6198b5e8dfbc978f6", "message": "Make test execution serial by forced serial execution\n\nEarlier we were creating and deleting resources @Before and @After executing\nevery test, which seems redundant and resource intensive task too. We can synchronize\nexecution of tests so that they make use of output generated in intermediate steps rather\nthan creating everything from scratch", "committedDate": "2020-07-02T06:50:01Z", "type": "forcePushed"}, {"oid": "c7701669ac05bf5b773fc2e6e1b7d8eea9e6941e", "url": "https://github.com/fabric8io/kubernetes-client/commit/c7701669ac05bf5b773fc2e6e1b7d8eea9e6941e", "message": "Make test execution serial by forced serial execution\n\nEarlier we were creating and deleting resources @Before and @After executing\nevery test, which seems redundant and resource intensive task too. We can synchronize\nexecution of tests so that they make use of output generated in intermediate steps rather\nthan creating everything from scratch", "committedDate": "2020-07-02T09:18:56Z", "type": "forcePushed"}, {"oid": "d25b76a59cc800eb93c67c762bef980838a99b40", "url": "https://github.com/fabric8io/kubernetes-client/commit/d25b76a59cc800eb93c67c762bef980838a99b40", "message": "Prepare test environments in @BeforeClass rather than @Before\n\nEarlier we were creating and deleting resources @Before and @After executing\nevery test, which seems redundant and resource intensive task too. I discussed this\nwith @manusa and we agreed on shifting this logic to @BeforeClass which would be\nexecuted once for each test class.", "committedDate": "2020-07-06T17:39:56Z", "type": "forcePushed"}, {"oid": "5acc800498a06be21f7df4cce8ee74581e13d600", "url": "https://github.com/fabric8io/kubernetes-client/commit/5acc800498a06be21f7df4cce8ee74581e13d600", "message": "Prepare test environments in @BeforeClass rather than @Before\n\nEarlier we were creating and deleting resources @Before and @After executing\nevery test, which seems redundant and resource intensive task too. I discussed this\nwith @manusa and we agreed on shifting this logic to @BeforeClass which would be\nexecuted once for each test class.", "committedDate": "2020-07-06T18:05:45Z", "type": "forcePushed"}, {"oid": "1ca75dadfd8e017d5528edf5ac810ad2794f2b53", "url": "https://github.com/fabric8io/kubernetes-client/commit/1ca75dadfd8e017d5528edf5ac810ad2794f2b53", "message": "Prepare test environments in @BeforeClass rather than @Before\n\nEarlier we were creating and deleting resources @Before and @After executing\nevery test, which seems redundant and resource intensive task too. I discussed this\nwith @manusa and we agreed on shifting this logic to @BeforeClass which would be\nexecuted once for each test class.", "committedDate": "2020-07-06T18:27:05Z", "type": "forcePushed"}, {"oid": "5d6579ca4b6f6c36b7cd01769d3f93dbbb232f62", "url": "https://github.com/fabric8io/kubernetes-client/commit/5d6579ca4b6f6c36b7cd01769d3f93dbbb232f62", "message": "Prepare test environments in @BeforeClass rather than @Before\n\nEarlier we were creating and deleting resources @Before and @After executing\nevery test, which seems redundant and resource intensive task too. I discussed this\nwith @manusa and we agreed on shifting this logic to @BeforeClass which would be\nexecuted once for each test class.", "committedDate": "2020-07-06T18:59:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwMTYwMw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2276#discussion_r450701603", "bodyText": "Is this still needed?", "author": "manusa", "createdAt": "2020-07-07T08:38:56Z", "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/CustomResourceDefinitionIT.java", "diffHunk": "@@ -25,15 +25,18 @@\n import org.arquillian.cube.requirement.ArquillianConditionalRunner;\n import org.jboss.arquillian.test.api.ArquillianResource;\n import org.junit.Before;\n+import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.junit.runners.MethodSorters;\n \n import java.util.Collections;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n @RunWith(ArquillianConditionalRunner.class)\n @RequiresKubernetes\n+@FixMethodOrder(MethodSorters.NAME_ASCENDING)", "originalCommit": "5d6579ca4b6f6c36b7cd01769d3f93dbbb232f62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNTExMA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2276#discussion_r450705110", "bodyText": "ah, no. I forgot to remove it.", "author": "rohanKanojia", "createdAt": "2020-07-07T08:44:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwMTYwMw=="}], "type": "inlineReview", "revised_code": {"commit": "83afcbf385ce8ba176d41ad42158f468fef52e09", "chunk": "diff --git a/kubernetes-itests/src/test/java/io/fabric8/kubernetes/CustomResourceDefinitionIT.java b/kubernetes-itests/src/test/java/io/fabric8/kubernetes/CustomResourceDefinitionIT.java\nindex 20b0abcaf..dd7bec53f 100644\n--- a/kubernetes-itests/src/test/java/io/fabric8/kubernetes/CustomResourceDefinitionIT.java\n+++ b/kubernetes-itests/src/test/java/io/fabric8/kubernetes/CustomResourceDefinitionIT.java\n\n@@ -25,10 +25,8 @@ import org.arquillian.cube.kubernetes.impl.requirement.RequiresKubernetes;\n import org.arquillian.cube.requirement.ArquillianConditionalRunner;\n import org.jboss.arquillian.test.api.ArquillianResource;\n import org.junit.Before;\n-import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.junit.runners.MethodSorters;\n \n import java.util.Collections;\n \n"}}, {"oid": "83afcbf385ce8ba176d41ad42158f468fef52e09", "url": "https://github.com/fabric8io/kubernetes-client/commit/83afcbf385ce8ba176d41ad42158f468fef52e09", "message": "Prepare test environments in @BeforeClass rather than @Before\n\nEarlier we were creating and deleting resources @Before and @After executing\nevery test, which seems redundant and resource intensive task too. I discussed this\nwith @manusa and we agreed on shifting this logic to @BeforeClass which would be\nexecuted once for each test class.", "committedDate": "2020-07-07T08:46:24Z", "type": "commit"}, {"oid": "83afcbf385ce8ba176d41ad42158f468fef52e09", "url": "https://github.com/fabric8io/kubernetes-client/commit/83afcbf385ce8ba176d41ad42158f468fef52e09", "message": "Prepare test environments in @BeforeClass rather than @Before\n\nEarlier we were creating and deleting resources @Before and @After executing\nevery test, which seems redundant and resource intensive task too. I discussed this\nwith @manusa and we agreed on shifting this logic to @BeforeClass which would be\nexecuted once for each test class.", "committedDate": "2020-07-07T08:46:24Z", "type": "forcePushed"}]}