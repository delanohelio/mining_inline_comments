{"pr_number": 2664, "pr_title": "test: Added specific verification for issue #1109", "pr_createdAt": "2020-12-14T12:37:22Z", "pr_url": "https://github.com/fabric8io/kubernetes-client/pull/2664", "timeline": [{"oid": "79570183f9d4aceb9d7efee36898bac8d41e5311", "url": "https://github.com/fabric8io/kubernetes-client/commit/79570183f9d4aceb9d7efee36898bac8d41e5311", "message": "test: Added specific verification for issue #1109", "committedDate": "2020-12-14T13:45:37Z", "type": "commit"}, {"oid": "79570183f9d4aceb9d7efee36898bac8d41e5311", "url": "https://github.com/fabric8io/kubernetes-client/commit/79570183f9d4aceb9d7efee36898bac8d41e5311", "message": "test: Added specific verification for issue #1109", "committedDate": "2020-12-14T13:45:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyNjY1Mw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2664#discussion_r542526653", "bodyText": "Maybe we should use apiextensions().v1() CustomResourceDefinition instead?", "author": "rohanKanojia", "createdAt": "2020-12-14T16:34:28Z", "path": "kubernetes-tests/src/test/java/io/fabric8/kubernetes/client/mock/CustomResourceCrud1109Test.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.kubernetes.client.mock;\n+\n+import io.fabric8.kubernetes.api.model.apiextensions.v1beta1.CustomResourceDefinition;\n+import io.fabric8.kubernetes.api.model.apiextensions.v1beta1.CustomResourceDefinitionBuilder;\n+import io.fabric8.kubernetes.client.dsl.MixedOperation;\n+import io.fabric8.kubernetes.client.dsl.Resource;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import io.fabric8.kubernetes.client.mock.crd.FooBar;\n+import io.fabric8.kubernetes.client.mock.crd.FooBarList;\n+import io.fabric8.kubernetes.client.server.mock.KubernetesServer;\n+import org.junit.Rule;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.migrationsupport.rules.EnableRuleMigrationSupport;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+@EnableRuleMigrationSupport\n+class CustomResourceCrud1109Test {\n+  @Rule\n+  public KubernetesServer server = new KubernetesServer(true,true);\n+\n+  private CustomResourceDefinition customResourceDefinition;\n+\n+  @BeforeEach\n+  void setUp() {\n+    customResourceDefinition = server.getClient().apiextensions().v1beta1().customResourceDefinitions()", "originalCommit": "79570183f9d4aceb9d7efee36898bac8d41e5311", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMDM3Mg==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2664#discussion_r542530372", "bodyText": "What do you think about using the single argument customResource method? I think it's more readable and will avoid creation of FooBarList.\nfinal MixedOperation<FooBar, KubernetesResourceList<FooBar>, Resource<FooBar>> fooBarClient = server.getClient().customResources(FooBar.class);", "author": "rohanKanojia", "createdAt": "2020-12-14T16:39:05Z", "path": "kubernetes-tests/src/test/java/io/fabric8/kubernetes/client/mock/CustomResourceCrud1109Test.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.kubernetes.client.mock;\n+\n+import io.fabric8.kubernetes.api.model.apiextensions.v1beta1.CustomResourceDefinition;\n+import io.fabric8.kubernetes.api.model.apiextensions.v1beta1.CustomResourceDefinitionBuilder;\n+import io.fabric8.kubernetes.client.dsl.MixedOperation;\n+import io.fabric8.kubernetes.client.dsl.Resource;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import io.fabric8.kubernetes.client.mock.crd.FooBar;\n+import io.fabric8.kubernetes.client.mock.crd.FooBarList;\n+import io.fabric8.kubernetes.client.server.mock.KubernetesServer;\n+import org.junit.Rule;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.migrationsupport.rules.EnableRuleMigrationSupport;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+@EnableRuleMigrationSupport\n+class CustomResourceCrud1109Test {\n+  @Rule\n+  public KubernetesServer server = new KubernetesServer(true,true);\n+\n+  private CustomResourceDefinition customResourceDefinition;\n+\n+  @BeforeEach\n+  void setUp() {\n+    customResourceDefinition = server.getClient().apiextensions().v1beta1().customResourceDefinitions()\n+      .create(new CustomResourceDefinitionBuilder()\n+      .withNewMetadata()\n+      .withName(\"foo-bar.baz.example.com\")\n+      .endMetadata()\n+      .withNewSpec()\n+      .withGroup(\"baz.example.com\")\n+      .addNewVersion().withName(\"v1alpha1\").endVersion()\n+      .withScope(\"Namespaced\")\n+      .withNewNames()\n+      .withKind(\"FooBar\")\n+      .withPlural(\"foo-bars\")\n+      .withSingular(\"foo-bar\")\n+      .endNames()\n+      .endSpec()\n+      .build());\n+  }\n+\n+  @Test\n+  @DisplayName(\"Fix for issue 1109, verifies resources with dashes can be retrieved\")\n+  void test1109() {\n+    // Given\n+    final MixedOperation<FooBar, FooBarList, Resource<FooBar>> fooBarClient =\n+      server.getClient().customResources(CustomResourceDefinitionContext.fromCrd(customResourceDefinition), FooBar.class, FooBarList.class);", "originalCommit": "79570183f9d4aceb9d7efee36898bac8d41e5311", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMzY4NQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2664#discussion_r542533685", "bodyText": "#2664 (comment) + this comment:\n#2665", "author": "manusa", "createdAt": "2020-12-14T16:43:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMDM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzNDkyNQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2664#discussion_r542534925", "bodyText": "Once #2665 is merged we can revisit or improve this test (if necessary). Right now its main use is just making sure 1109 doesn't happen again, especially considering what went on in  #2658 discussion about removing certain components.", "author": "manusa", "createdAt": "2020-12-14T16:44:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMDM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1NDA3MQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2664#discussion_r542554071", "bodyText": "I've approved the PR already since these comments are really minor nitpicks.", "author": "rohanKanojia", "createdAt": "2020-12-14T17:09:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMDM3Mg=="}], "type": "inlineReview", "revised_code": null}]}