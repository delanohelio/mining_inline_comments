{"pr_number": 2584, "pr_title": "Fix #2444 Use try with resources in kubernetes-examples", "pr_createdAt": "2020-11-01T07:57:40Z", "pr_url": "https://github.com/fabric8io/kubernetes-client/pull/2584", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NTg3Ng==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r515755876", "bodyText": "Please reuse this try-catch block to init your resources", "author": "manusa", "createdAt": "2020-11-02T06:06:40Z", "path": "kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/ListCustomResourceDefinitions.java", "diffHunk": "@@ -28,19 +28,20 @@\n public class ListCustomResourceDefinitions {\n   public static void main(String[] args) {\n     try {", "originalCommit": "e344f76dd8da343bbcc77396d4cf447582d20214", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NTkxMg==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r515755912", "bodyText": "(same for the rest)", "author": "manusa", "createdAt": "2020-11-02T06:06:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NTg3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc2MzA3MQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r515763071", "bodyText": "@manusa Does this look good now or something else was expected?", "author": "HeroicHitesh", "createdAt": "2020-11-02T06:32:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NTg3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc2NTA1Ng==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r515765056", "bodyText": "Just asking so that I can make similar changes to the rest of the files", "author": "HeroicHitesh", "createdAt": "2020-11-02T06:39:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NTg3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU5NzM3NA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r518597374", "bodyText": "Yes, the point is to keep a single try-catch-finally block and reduce complexity.\nIn these examples it doesn't make any sense to add those nested blocks.\nPlease also squash your commits once your changes are done, thx.", "author": "manusa", "createdAt": "2020-11-06T08:36:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NTg3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5ODExNw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520598117", "bodyText": "@manusa Did the required changes and squashed the commits", "author": "HeroicHitesh", "createdAt": "2020-11-10T14:21:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NTg3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "243253a781d80be0b7b8604e57d2a92d61b29960", "chunk": "diff --git a/kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/ListCustomResourceDefinitions.java b/kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/ListCustomResourceDefinitions.java\nindex 7760142d8..6adfd8765 100644\n--- a/kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/ListCustomResourceDefinitions.java\n+++ b/kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/ListCustomResourceDefinitions.java\n\n@@ -27,21 +27,19 @@ import java.util.List;\n  */\n public class ListCustomResourceDefinitions {\n   public static void main(String[] args) {\n-    try {\n-      try(KubernetesClient client = new DefaultKubernetesClient()){\n-        if (!client.supportsApiPath(\"/apis/apiextensions.k8s.io/v1beta1\") && !client.supportsApiPath(\"/apis/apiextensions.k8s.io/v1\")) {\n-          System.out.println(\"WARNING this cluster does not support the API Group apiextensions.k8s.io\");\n-          return;\n-        }\n-        CustomResourceDefinitionList list = client.customResourceDefinitions().list();\n-        if (list == null) {\n-          System.out.println(\"ERROR no list returned!\");\n-          return;\n-        }\n-        List<CustomResourceDefinition> items = list.getItems();\n-        for (CustomResourceDefinition item : items) {\n-          System.out.println(\"CustomResourceDefinition \" + item.getMetadata().getName() + \" has version: \" + item.getApiVersion());\n-        }\n+    try(KubernetesClient client = new DefaultKubernetesClient()){\n+      if (!client.supportsApiPath(\"/apis/apiextensions.k8s.io/v1beta1\") && !client.supportsApiPath(\"/apis/apiextensions.k8s.io/v1\")) {\n+        System.out.println(\"WARNING this cluster does not support the API Group apiextensions.k8s.io\");\n+        return;\n+      }\n+      CustomResourceDefinitionList list = client.customResourceDefinitions().list();\n+      if (list == null) {\n+        System.out.println(\"ERROR no list returned!\");\n+        return;\n+      }\n+      List<CustomResourceDefinition> items = list.getItems();\n+      for (CustomResourceDefinition item : items) {\n+        System.out.println(\"CustomResourceDefinition \" + item.getMetadata().getName() + \" has version: \" + item.getApiVersion());\n       }\n     } catch (KubernetesClientException e) {\n       System.out.println(\"Failed: \" + e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5Nzk1Nw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r515797957", "bodyText": "Maybe you copied this accidentally???", "author": "rohanKanojia", "createdAt": "2020-11-02T08:10:28Z", "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java", "diffHunk": "@@ -37,106 +37,244 @@\n \n   public static void main(String[] args) throws InterruptedException {\n     Config config = new ConfigBuilder().build();\n-    KubernetesClient kubernetesClient = new DefaultKubernetesClient(config);\n-    OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n-\n-    try {\n-      // Create a namespace for all our stuff\n-      Namespace ns = new NamespaceBuilder().withNewMetadata().withName(\"thisisatest\").addToLabels(\"this\", \"rocks\").endMetadata().build();\n-      log(\"Created namespace\", client.namespaces().create(ns));\n-\n-      ServiceAccount fabric8 = new ServiceAccountBuilder().withNewMetadata().withName(\"fabric8\").endMetadata().build();\n-\n-      client.serviceAccounts().inNamespace(\"thisisatest\").create(fabric8);\n-\n-      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"example-camel-cdi\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .addNewTag()\n-        .withName(\"latest\")\n-        .endTag()\n-        .withDockerImageRepository(\"fabric8/example-camel-cdi\")\n-        .endSpec()\n-        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-        .done());\n-\n-      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"java-sti\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .addNewTag()\n-        .withName(\"latest\")\n-        .endTag()\n-        .withDockerImageRepository(\"fabric8/java-sti\")\n-        .endSpec()\n-        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-        .done());\n-\n-      log(\"Created build config\", client.buildConfigs().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"custom-build-config\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .withServiceAccount(\"fabric8\")\n-        .withNewSource()\n-        .withType(\"Git\")\n-        .withNewGit()\n-        .withUri(\"https://github.com/fabric8io/example-camel-cdi.git\")\n-        .endGit()\n-        .endSource()\n-        .withNewResources()\n-          .addToLimits(\"mykey\", new Quantity(\"10\"))\n-          .addToRequests(\"mykey\", new Quantity(\"10\"))\n-        .endResources()\n-        .withNewStrategy()\n-        .withType(\"Source\")\n-        .withNewSourceStrategy()\n-        .withNewFrom().withName(\"java-sti:latest\").withKind(\"DockerImage\").endFrom()\n-        .endSourceStrategy()\n-        .endStrategy()\n-        .withNewOutput()\n-        .withNewTo().withKind(\"DockerImage\").withName(\"example-camel-cdi:latest\").endTo()\n-        .endOutput()\n-        .addNewTrigger()\n-        .withType(\"GitHub\")\n-        .withNewGithub()\n-        .withSecret(\"secret101\")\n-        .endGithub()\n-        .endTrigger()\n-        .endSpec()\n-        .done());\n-\n-      Build build = client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\").instantiate(new BuildRequestBuilder()\n-        .withNewMetadata().withName(\"custom-build-config\").endMetadata()\n-        .build());\n-      log(\"Build:\", build.getMetadata().getName());\n-\n-      client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\")\n-        .withSecret(\"secret101\")\n-        .withType(\"github\")\n-        .trigger(new WebHookTriggerBuilder()\n+    try(KubernetesClient kubernetesClient = new DefaultKubernetesClient(config)){\n+      OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n+\n+      try {\n+        // Create a namespace for all our stuff\n+        Namespace ns = new NamespaceBuilder().withNewMetadata().withName(\"thisisatest\").addToLabels(\"this\", \"rocks\").endMetadata().build();\n+        log(\"Created namespace\", client.namespaces().create(ns));\n+\n+        ServiceAccount fabric8 = new ServiceAccountBuilder().withNewMetadata().withName(\"fabric8\").endMetadata().build();\n+\n+        client.serviceAccounts().inNamespace(\"thisisatest\").create(fabric8);\n+\n+        log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n+          .withNewMetadata()\n+          .withName(\"example-camel-cdi\")\n+          .endMetadata()\n+          .withNewSpec()\n+          .addNewTag()\n+          .withName(\"latest\")\n+          .endTag()\n+          .withDockerImageRepository(\"fabric8/example-camel-cdi\")\n+          .endSpec()\n+          .withNewStatus().withDockerImageRepository(\"\").endStatus()\n+          .done());\n+\n+        log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n+          .withNewMetadata()\n+          .withName(\"java-sti\")\n+          .endMetadata()\n+          .withNewSpec()\n+          .addNewTag()\n+          .withName(\"latest\")\n+          .endTag()\n+          .withDockerImageRepository(\"fabric8/java-sti\")\n+          .endSpec()\n+          .withNewStatus().withDockerImageRepository(\"\").endStatus()\n+          .done());\n+\n+        log(\"Created build config\", client.buildConfigs().inNamespace(\"thisisatest\").createNew()\n+          .withNewMetadata()\n+          .withName(\"custom-build-config\")\n+          .endMetadata()\n+          .withNewSpec()\n+          .withServiceAccount(\"fabric8\")\n+          .withNewSource()\n+          .withType(\"Git\")\n+          .withNewGit()\n+          .withUri(\"https://github.com/fabric8io/example-camel-cdi.git\")\n+          .endGit()\n+          .endSource()\n+          .withNewResources()\n+            .addToLimits(\"mykey\", new Quantity(\"10\"))\n+            .addToRequests(\"mykey\", new Quantity(\"10\"))\n+          .endResources()\n+          .withNewStrategy()\n+          .withType(\"Source\")\n+          .withNewSourceStrategy()\n+          .withNewFrom().withName(\"java-sti:latest\").withKind(\"DockerImage\").endFrom()\n+          .endSourceStrategy()\n+          .endStrategy()\n+          .withNewOutput()\n+          .withNewTo().withKind(\"DockerImage\").withName(\"example-camel-cdi:latest\").endTo()\n+          .endOutput()\n+          .addNewTrigger()\n+          .withType(\"GitHub\")\n+          .withNewGithub()\n           .withSecret(\"secret101\")\n+          .endGithub()\n+          .endTrigger()\n+          .endSpec()\n+          .done());\n+\n+        Build build = client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\").instantiate(new BuildRequestBuilder()\n+          .withNewMetadata().withName(\"custom-build-config\").endMetadata()\n           .build());\n+        log(\"Build:\", build.getMetadata().getName());\n+\n+        client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\")\n+          .withSecret(\"secret101\")\n+          .withType(\"github\")\n+          .trigger(new WebHookTriggerBuilder()\n+            .withSecret(\"secret101\")\n+            .build());\n+\n+\n+        Thread.sleep(6000);\n+\n+        log(\"Builds:\");\n+        for (Build b: client.builds().inNamespace(\"thisisatest\").list().getItems()) {\n+          log(\"\\t\\t\\t\"+b.getMetadata().getName());\n \n+          log(\"\\t\\t\\t\\t\\t Log:\");client.builds().inNamespace(\"thisisatest\").withName(b.getMetadata().getName()).watchLog(System.out);\n+        }\n \n-      Thread.sleep(6000);\n \n-      log(\"Builds:\");\n-      for (Build b: client.builds().inNamespace(\"thisisatest\").list().getItems()) {\n-        log(\"\\t\\t\\t\"+b.getMetadata().getName());\n \n-        log(\"\\t\\t\\t\\t\\t Log:\");client.builds().inNamespace(\"thisisatest\").withName(b.getMetadata().getName()).watchLog(System.out);\n+        log(\"Done.\");\n+      }finally {\n+        client.namespaces().withName(\"thisisatest\").delete();\n+        client.close();\n       }\n+  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+  * you may not use this file except in compliance with the License.\n+  * You may obtain a copy of the License at\n+  *\n+  *         http://www.apache.org/licenses/LICENSE-2.0\n+  *\n+  * Unless required by applicable law or agreed to in writing, software\n+  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "originalCommit": "f2d5098d0e8c9dfe8e79345c467f5db3a12b3b8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgwOTc2MQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r515809761", "bodyText": "@rohanKanojia These comment lines were already there in the file. I just added a try block. What is expected now? Should I remove the commented lines?", "author": "HeroicHitesh", "createdAt": "2020-11-02T08:34:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5Nzk1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgxNzUwNA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r515817504", "bodyText": "Are you sure about that? I don't see it in master revision:\nhttps://github.com/fabric8io/kubernetes-client/blob/master/kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java", "author": "rohanKanojia", "createdAt": "2020-11-02T08:49:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5Nzk1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyMDU0Mw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r515820543", "bodyText": "Sorry, I was looking at initial lines, didn't noticed repetition in later lines before commenting. I have removed those lines now.", "author": "HeroicHitesh", "createdAt": "2020-11-02T08:54:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5Nzk1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "243253a781d80be0b7b8604e57d2a92d61b29960", "chunk": "diff --git a/kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java b/kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java\nindex 6e94e0826..c9e4b1f5b 100644\n--- a/kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java\n+++ b/kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java\n\n@@ -39,242 +39,99 @@ public class BuildConfigExamples {\n     Config config = new ConfigBuilder().build();\n     try(KubernetesClient kubernetesClient = new DefaultKubernetesClient(config)){\n       OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n-\n-      try {\n-        // Create a namespace for all our stuff\n-        Namespace ns = new NamespaceBuilder().withNewMetadata().withName(\"thisisatest\").addToLabels(\"this\", \"rocks\").endMetadata().build();\n-        log(\"Created namespace\", client.namespaces().create(ns));\n-\n-        ServiceAccount fabric8 = new ServiceAccountBuilder().withNewMetadata().withName(\"fabric8\").endMetadata().build();\n-\n-        client.serviceAccounts().inNamespace(\"thisisatest\").create(fabric8);\n-\n-        log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-          .withNewMetadata()\n-          .withName(\"example-camel-cdi\")\n-          .endMetadata()\n-          .withNewSpec()\n-          .addNewTag()\n-          .withName(\"latest\")\n-          .endTag()\n-          .withDockerImageRepository(\"fabric8/example-camel-cdi\")\n-          .endSpec()\n-          .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-          .done());\n-\n-        log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-          .withNewMetadata()\n-          .withName(\"java-sti\")\n-          .endMetadata()\n-          .withNewSpec()\n-          .addNewTag()\n-          .withName(\"latest\")\n-          .endTag()\n-          .withDockerImageRepository(\"fabric8/java-sti\")\n-          .endSpec()\n-          .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-          .done());\n-\n-        log(\"Created build config\", client.buildConfigs().inNamespace(\"thisisatest\").createNew()\n-          .withNewMetadata()\n-          .withName(\"custom-build-config\")\n-          .endMetadata()\n-          .withNewSpec()\n-          .withServiceAccount(\"fabric8\")\n-          .withNewSource()\n-          .withType(\"Git\")\n-          .withNewGit()\n-          .withUri(\"https://github.com/fabric8io/example-camel-cdi.git\")\n-          .endGit()\n-          .endSource()\n-          .withNewResources()\n-            .addToLimits(\"mykey\", new Quantity(\"10\"))\n-            .addToRequests(\"mykey\", new Quantity(\"10\"))\n-          .endResources()\n-          .withNewStrategy()\n-          .withType(\"Source\")\n-          .withNewSourceStrategy()\n-          .withNewFrom().withName(\"java-sti:latest\").withKind(\"DockerImage\").endFrom()\n-          .endSourceStrategy()\n-          .endStrategy()\n-          .withNewOutput()\n-          .withNewTo().withKind(\"DockerImage\").withName(\"example-camel-cdi:latest\").endTo()\n-          .endOutput()\n-          .addNewTrigger()\n-          .withType(\"GitHub\")\n-          .withNewGithub()\n+      // Create a namespace for all our stuff\n+      Namespace ns = new NamespaceBuilder().withNewMetadata().withName(\"thisisatest\").addToLabels(\"this\", \"rocks\").endMetadata().build();\n+      log(\"Created namespace\", client.namespaces().create(ns));\n+\n+      ServiceAccount fabric8 = new ServiceAccountBuilder().withNewMetadata().withName(\"fabric8\").endMetadata().build();\n+\n+      client.serviceAccounts().inNamespace(\"thisisatest\").create(fabric8);\n+\n+      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n+        .withNewMetadata()\n+        .withName(\"example-camel-cdi\")\n+        .endMetadata()\n+        .withNewSpec()\n+        .addNewTag()\n+        .withName(\"latest\")\n+        .endTag()\n+        .withDockerImageRepository(\"fabric8/example-camel-cdi\")\n+        .endSpec()\n+        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n+        .done());\n+\n+      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n+        .withNewMetadata()\n+        .withName(\"java-sti\")\n+        .endMetadata()\n+        .withNewSpec()\n+        .addNewTag()\n+        .withName(\"latest\")\n+        .endTag()\n+        .withDockerImageRepository(\"fabric8/java-sti\")\n+        .endSpec()\n+        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n+        .done());\n+\n+      log(\"Created build config\", client.buildConfigs().inNamespace(\"thisisatest\").createNew()\n+        .withNewMetadata()\n+        .withName(\"custom-build-config\")\n+        .endMetadata()\n+        .withNewSpec()\n+        .withServiceAccount(\"fabric8\")\n+        .withNewSource()\n+        .withType(\"Git\")\n+        .withNewGit()\n+        .withUri(\"https://github.com/fabric8io/example-camel-cdi.git\")\n+        .endGit()\n+        .endSource()\n+        .withNewResources()\n+          .addToLimits(\"mykey\", new Quantity(\"10\"))\n+          .addToRequests(\"mykey\", new Quantity(\"10\"))\n+        .endResources()\n+        .withNewStrategy()\n+        .withType(\"Source\")\n+        .withNewSourceStrategy()\n+        .withNewFrom().withName(\"java-sti:latest\").withKind(\"DockerImage\").endFrom()\n+        .endSourceStrategy()\n+        .endStrategy()\n+        .withNewOutput()\n+        .withNewTo().withKind(\"DockerImage\").withName(\"example-camel-cdi:latest\").endTo()\n+        .endOutput()\n+        .addNewTrigger()\n+        .withType(\"GitHub\")\n+        .withNewGithub()\n+        .withSecret(\"secret101\")\n+        .endGithub()\n+        .endTrigger()\n+        .endSpec()\n+        .done());\n+\n+      Build build = client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\").instantiate(new BuildRequestBuilder()\n+        .withNewMetadata().withName(\"custom-build-config\").endMetadata()\n+        .build());\n+      log(\"Build:\", build.getMetadata().getName());\n+\n+      client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\")\n+        .withSecret(\"secret101\")\n+        .withType(\"github\")\n+        .trigger(new WebHookTriggerBuilder()\n           .withSecret(\"secret101\")\n-          .endGithub()\n-          .endTrigger()\n-          .endSpec()\n-          .done());\n-\n-        Build build = client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\").instantiate(new BuildRequestBuilder()\n-          .withNewMetadata().withName(\"custom-build-config\").endMetadata()\n           .build());\n-        log(\"Build:\", build.getMetadata().getName());\n-\n-        client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\")\n-          .withSecret(\"secret101\")\n-          .withType(\"github\")\n-          .trigger(new WebHookTriggerBuilder()\n-            .withSecret(\"secret101\")\n-            .build());\n \n \n-        Thread.sleep(6000);\n+      Thread.sleep(6000);\n \n-        log(\"Builds:\");\n-        for (Build b: client.builds().inNamespace(\"thisisatest\").list().getItems()) {\n-          log(\"\\t\\t\\t\"+b.getMetadata().getName());\n+      log(\"Builds:\");\n+      for (Build b: client.builds().inNamespace(\"thisisatest\").list().getItems()) {\n+        log(\"\\t\\t\\t\"+b.getMetadata().getName());\n \n-          log(\"\\t\\t\\t\\t\\t Log:\");client.builds().inNamespace(\"thisisatest\").withName(b.getMetadata().getName()).watchLog(System.out);\n-        }\n-\n-\n-\n-        log(\"Done.\");\n-      }finally {\n-        client.namespaces().withName(\"thisisatest\").delete();\n-        client.close();\n+        log(\"\\t\\t\\t\\t\\t Log:\");client.builds().inNamespace(\"thisisatest\").withName(b.getMetadata().getName()).watchLog(System.out);\n       }\n-  * Licensed under the Apache License, Version 2.0 (the \"License\");\n-  * you may not use this file except in compliance with the License.\n-  * You may obtain a copy of the License at\n-  *\n-  *         http://www.apache.org/licenses/LICENSE-2.0\n-  *\n-  * Unless required by applicable law or agreed to in writing, software\n-  * distributed under the License is distributed on an \"AS IS\" BASIS,\n-  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-  * See the License for the specific language governing permissions and\n-  * limitations under the License.\n-  */\n-\n-  package io.fabric8.openshift.examples;\n-\n-  import io.fabric8.kubernetes.api.model.Namespace;\n-  import io.fabric8.kubernetes.api.model.NamespaceBuilder;\n-  import io.fabric8.kubernetes.api.model.Quantity;\n-  import io.fabric8.kubernetes.api.model.ServiceAccount;\n-  import io.fabric8.kubernetes.api.model.ServiceAccountBuilder;\n-  import io.fabric8.kubernetes.client.Config;\n-  import io.fabric8.kubernetes.client.ConfigBuilder;\n-  import io.fabric8.kubernetes.client.DefaultKubernetesClient;\n-  import io.fabric8.kubernetes.client.KubernetesClient;\n-  import io.fabric8.openshift.api.model.Build;\n-  import io.fabric8.openshift.api.model.BuildRequestBuilder;\n-  import io.fabric8.openshift.api.model.WebHookTriggerBuilder;\n-  import io.fabric8.openshift.client.OpenShiftClient;\n-  import org.slf4j.Logger;\n-  import org.slf4j.LoggerFactory;\n-\n-  public class BuildConfigExamples {\n-    private static final Logger logger = LoggerFactory.getLogger(BuildConfigExamples.class);\n-\n-    public static void main(String[] args) throws InterruptedException {\n-      Config config = new ConfigBuilder().build();\n-      try(KubernetesClient kubernetesClient = new DefaultKubernetesClient(config)){\n-      OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n \n-      try {\n-        // Create a namespace for all our stuff\n-        Namespace ns = new NamespaceBuilder().withNewMetadata().withName(\"thisisatest\").addToLabels(\"this\", \"rocks\").endMetadata().build();\n-        log(\"Created namespace\", client.namespaces().create(ns));\n \n-        ServiceAccount fabric8 = new ServiceAccountBuilder().withNewMetadata().withName(\"fabric8\").endMetadata().build();\n \n-        client.serviceAccounts().inNamespace(\"thisisatest\").create(fabric8);\n-\n-        log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-          .withNewMetadata()\n-          .withName(\"example-camel-cdi\")\n-          .endMetadata()\n-          .withNewSpec()\n-          .addNewTag()\n-          .withName(\"latest\")\n-          .endTag()\n-          .withDockerImageRepository(\"fabric8/example-camel-cdi\")\n-          .endSpec()\n-          .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-          .done());\n-\n-        log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-          .withNewMetadata()\n-          .withName(\"java-sti\")\n-          .endMetadata()\n-          .withNewSpec()\n-          .addNewTag()\n-          .withName(\"latest\")\n-          .endTag()\n-          .withDockerImageRepository(\"fabric8/java-sti\")\n-          .endSpec()\n-          .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-          .done());\n-\n-        log(\"Created build config\", client.buildConfigs().inNamespace(\"thisisatest\").createNew()\n-          .withNewMetadata()\n-          .withName(\"custom-build-config\")\n-          .endMetadata()\n-          .withNewSpec()\n-          .withServiceAccount(\"fabric8\")\n-          .withNewSource()\n-          .withType(\"Git\")\n-          .withNewGit()\n-          .withUri(\"https://github.com/fabric8io/example-camel-cdi.git\")\n-          .endGit()\n-          .endSource()\n-          .withNewResources()\n-            .addToLimits(\"mykey\", new Quantity(\"10\"))\n-            .addToRequests(\"mykey\", new Quantity(\"10\"))\n-          .endResources()\n-          .withNewStrategy()\n-          .withType(\"Source\")\n-          .withNewSourceStrategy()\n-          .withNewFrom().withName(\"java-sti:latest\").withKind(\"DockerImage\").endFrom()\n-          .endSourceStrategy()\n-          .endStrategy()\n-          .withNewOutput()\n-          .withNewTo().withKind(\"DockerImage\").withName(\"example-camel-cdi:latest\").endTo()\n-          .endOutput()\n-          .addNewTrigger()\n-          .withType(\"GitHub\")\n-          .withNewGithub()\n-          .withSecret(\"secret101\")\n-          .endGithub()\n-          .endTrigger()\n-          .endSpec()\n-          .done());\n-\n-        Build build = client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\").instantiate(new BuildRequestBuilder()\n-          .withNewMetadata().withName(\"custom-build-config\").endMetadata()\n-          .build());\n-        log(\"Build:\", build.getMetadata().getName());\n-\n-        client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\")\n-          .withSecret(\"secret101\")\n-          .withType(\"github\")\n-          .trigger(new WebHookTriggerBuilder()\n-            .withSecret(\"secret101\")\n-            .build());\n-\n-\n-        Thread.sleep(6000);\n-\n-        log(\"Builds:\");\n-        for (Build b: client.builds().inNamespace(\"thisisatest\").list().getItems()) {\n-          log(\"\\t\\t\\t\"+b.getMetadata().getName());\n-\n-          log(\"\\t\\t\\t\\t\\t Log:\");client.builds().inNamespace(\"thisisatest\").withName(b.getMetadata().getName()).watchLog(System.out);\n-        }\n-\n-\n-\n-        log(\"Done.\");\n-      }finally {\n-        client.namespaces().withName(\"thisisatest\").delete();\n-        client.close();\n-      }\n+      log(\"Done.\");\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyMTMzOA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520321338", "bodyText": "It's the same for every example.\nPlease reuse the try-catch block and remove the finally clause (if applicable) where the client is closed.\ntry (KubernetesClient kubernetesClient = new DefaultKubernetesClient(config)) {\n  OpenShiftClient ifNecessary = kubernetesClient.adapt(OpenShiftClient.class);\n  /* ... your code with no extra try-catch blocks (unless strictly necessary) ... */\n}", "author": "manusa", "createdAt": "2020-11-10T06:30:25Z", "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java", "diffHunk": "@@ -37,106 +37,107 @@\n \n   public static void main(String[] args) throws InterruptedException {\n     Config config = new ConfigBuilder().build();\n-    KubernetesClient kubernetesClient = new DefaultKubernetesClient(config);\n-    OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n-\n-    try {\n-      // Create a namespace for all our stuff\n-      Namespace ns = new NamespaceBuilder().withNewMetadata().withName(\"thisisatest\").addToLabels(\"this\", \"rocks\").endMetadata().build();\n-      log(\"Created namespace\", client.namespaces().create(ns));\n-\n-      ServiceAccount fabric8 = new ServiceAccountBuilder().withNewMetadata().withName(\"fabric8\").endMetadata().build();\n-\n-      client.serviceAccounts().inNamespace(\"thisisatest\").create(fabric8);\n-\n-      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"example-camel-cdi\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .addNewTag()\n-        .withName(\"latest\")\n-        .endTag()\n-        .withDockerImageRepository(\"fabric8/example-camel-cdi\")\n-        .endSpec()\n-        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-        .done());\n-\n-      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"java-sti\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .addNewTag()\n-        .withName(\"latest\")\n-        .endTag()\n-        .withDockerImageRepository(\"fabric8/java-sti\")\n-        .endSpec()\n-        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-        .done());\n-\n-      log(\"Created build config\", client.buildConfigs().inNamespace(\"thisisatest\").createNew()\n-        .withNewMetadata()\n-        .withName(\"custom-build-config\")\n-        .endMetadata()\n-        .withNewSpec()\n-        .withServiceAccount(\"fabric8\")\n-        .withNewSource()\n-        .withType(\"Git\")\n-        .withNewGit()\n-        .withUri(\"https://github.com/fabric8io/example-camel-cdi.git\")\n-        .endGit()\n-        .endSource()\n-        .withNewResources()\n-          .addToLimits(\"mykey\", new Quantity(\"10\"))\n-          .addToRequests(\"mykey\", new Quantity(\"10\"))\n-        .endResources()\n-        .withNewStrategy()\n-        .withType(\"Source\")\n-        .withNewSourceStrategy()\n-        .withNewFrom().withName(\"java-sti:latest\").withKind(\"DockerImage\").endFrom()\n-        .endSourceStrategy()\n-        .endStrategy()\n-        .withNewOutput()\n-        .withNewTo().withKind(\"DockerImage\").withName(\"example-camel-cdi:latest\").endTo()\n-        .endOutput()\n-        .addNewTrigger()\n-        .withType(\"GitHub\")\n-        .withNewGithub()\n-        .withSecret(\"secret101\")\n-        .endGithub()\n-        .endTrigger()\n-        .endSpec()\n-        .done());\n-\n-      Build build = client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\").instantiate(new BuildRequestBuilder()\n-        .withNewMetadata().withName(\"custom-build-config\").endMetadata()\n-        .build());\n-      log(\"Build:\", build.getMetadata().getName());\n-\n-      client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\")\n-        .withSecret(\"secret101\")\n-        .withType(\"github\")\n-        .trigger(new WebHookTriggerBuilder()\n+    try(KubernetesClient kubernetesClient = new DefaultKubernetesClient(config)){\n+      OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n+\n+      try {", "originalCommit": "49cc7223518347573d907333ac51e0c5bfaae15d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMzMDE2Ng==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520330166", "bodyText": "@manusa Sorry for not responding earlier, I have an exam today at 1 pm IST. I'll do the required changes after that exam gets over.", "author": "HeroicHitesh", "createdAt": "2020-11-10T06:52:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyMTMzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMzMjg1Mg==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520332852", "bodyText": ":) take your time", "author": "manusa", "createdAt": "2020-11-10T06:59:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyMTMzOA=="}], "type": "inlineReview", "revised_code": {"commit": "243253a781d80be0b7b8604e57d2a92d61b29960", "chunk": "diff --git a/kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java b/kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java\nindex 2131e2c30..c9e4b1f5b 100644\n--- a/kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java\n+++ b/kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java\n\n@@ -39,105 +39,99 @@ public class BuildConfigExamples {\n     Config config = new ConfigBuilder().build();\n     try(KubernetesClient kubernetesClient = new DefaultKubernetesClient(config)){\n       OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n-\n-      try {\n-        // Create a namespace for all our stuff\n-        Namespace ns = new NamespaceBuilder().withNewMetadata().withName(\"thisisatest\").addToLabels(\"this\", \"rocks\").endMetadata().build();\n-        log(\"Created namespace\", client.namespaces().create(ns));\n-\n-        ServiceAccount fabric8 = new ServiceAccountBuilder().withNewMetadata().withName(\"fabric8\").endMetadata().build();\n-\n-        client.serviceAccounts().inNamespace(\"thisisatest\").create(fabric8);\n-\n-        log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-          .withNewMetadata()\n-          .withName(\"example-camel-cdi\")\n-          .endMetadata()\n-          .withNewSpec()\n-          .addNewTag()\n-          .withName(\"latest\")\n-          .endTag()\n-          .withDockerImageRepository(\"fabric8/example-camel-cdi\")\n-          .endSpec()\n-          .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-          .done());\n-\n-        log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n-          .withNewMetadata()\n-          .withName(\"java-sti\")\n-          .endMetadata()\n-          .withNewSpec()\n-          .addNewTag()\n-          .withName(\"latest\")\n-          .endTag()\n-          .withDockerImageRepository(\"fabric8/java-sti\")\n-          .endSpec()\n-          .withNewStatus().withDockerImageRepository(\"\").endStatus()\n-          .done());\n-\n-        log(\"Created build config\", client.buildConfigs().inNamespace(\"thisisatest\").createNew()\n-          .withNewMetadata()\n-          .withName(\"custom-build-config\")\n-          .endMetadata()\n-          .withNewSpec()\n-          .withServiceAccount(\"fabric8\")\n-          .withNewSource()\n-          .withType(\"Git\")\n-          .withNewGit()\n-          .withUri(\"https://github.com/fabric8io/example-camel-cdi.git\")\n-          .endGit()\n-          .endSource()\n-          .withNewResources()\n-            .addToLimits(\"mykey\", new Quantity(\"10\"))\n-            .addToRequests(\"mykey\", new Quantity(\"10\"))\n-          .endResources()\n-          .withNewStrategy()\n-          .withType(\"Source\")\n-          .withNewSourceStrategy()\n-          .withNewFrom().withName(\"java-sti:latest\").withKind(\"DockerImage\").endFrom()\n-          .endSourceStrategy()\n-          .endStrategy()\n-          .withNewOutput()\n-          .withNewTo().withKind(\"DockerImage\").withName(\"example-camel-cdi:latest\").endTo()\n-          .endOutput()\n-          .addNewTrigger()\n-          .withType(\"GitHub\")\n-          .withNewGithub()\n+      // Create a namespace for all our stuff\n+      Namespace ns = new NamespaceBuilder().withNewMetadata().withName(\"thisisatest\").addToLabels(\"this\", \"rocks\").endMetadata().build();\n+      log(\"Created namespace\", client.namespaces().create(ns));\n+\n+      ServiceAccount fabric8 = new ServiceAccountBuilder().withNewMetadata().withName(\"fabric8\").endMetadata().build();\n+\n+      client.serviceAccounts().inNamespace(\"thisisatest\").create(fabric8);\n+\n+      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n+        .withNewMetadata()\n+        .withName(\"example-camel-cdi\")\n+        .endMetadata()\n+        .withNewSpec()\n+        .addNewTag()\n+        .withName(\"latest\")\n+        .endTag()\n+        .withDockerImageRepository(\"fabric8/example-camel-cdi\")\n+        .endSpec()\n+        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n+        .done());\n+\n+      log(\"Created image stream\", client.imageStreams().inNamespace(\"thisisatest\").createNew()\n+        .withNewMetadata()\n+        .withName(\"java-sti\")\n+        .endMetadata()\n+        .withNewSpec()\n+        .addNewTag()\n+        .withName(\"latest\")\n+        .endTag()\n+        .withDockerImageRepository(\"fabric8/java-sti\")\n+        .endSpec()\n+        .withNewStatus().withDockerImageRepository(\"\").endStatus()\n+        .done());\n+\n+      log(\"Created build config\", client.buildConfigs().inNamespace(\"thisisatest\").createNew()\n+        .withNewMetadata()\n+        .withName(\"custom-build-config\")\n+        .endMetadata()\n+        .withNewSpec()\n+        .withServiceAccount(\"fabric8\")\n+        .withNewSource()\n+        .withType(\"Git\")\n+        .withNewGit()\n+        .withUri(\"https://github.com/fabric8io/example-camel-cdi.git\")\n+        .endGit()\n+        .endSource()\n+        .withNewResources()\n+          .addToLimits(\"mykey\", new Quantity(\"10\"))\n+          .addToRequests(\"mykey\", new Quantity(\"10\"))\n+        .endResources()\n+        .withNewStrategy()\n+        .withType(\"Source\")\n+        .withNewSourceStrategy()\n+        .withNewFrom().withName(\"java-sti:latest\").withKind(\"DockerImage\").endFrom()\n+        .endSourceStrategy()\n+        .endStrategy()\n+        .withNewOutput()\n+        .withNewTo().withKind(\"DockerImage\").withName(\"example-camel-cdi:latest\").endTo()\n+        .endOutput()\n+        .addNewTrigger()\n+        .withType(\"GitHub\")\n+        .withNewGithub()\n+        .withSecret(\"secret101\")\n+        .endGithub()\n+        .endTrigger()\n+        .endSpec()\n+        .done());\n+\n+      Build build = client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\").instantiate(new BuildRequestBuilder()\n+        .withNewMetadata().withName(\"custom-build-config\").endMetadata()\n+        .build());\n+      log(\"Build:\", build.getMetadata().getName());\n+\n+      client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\")\n+        .withSecret(\"secret101\")\n+        .withType(\"github\")\n+        .trigger(new WebHookTriggerBuilder()\n           .withSecret(\"secret101\")\n-          .endGithub()\n-          .endTrigger()\n-          .endSpec()\n-          .done());\n-\n-        Build build = client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\").instantiate(new BuildRequestBuilder()\n-          .withNewMetadata().withName(\"custom-build-config\").endMetadata()\n           .build());\n-        log(\"Build:\", build.getMetadata().getName());\n-\n-        client.buildConfigs().inNamespace(\"thisisatest\").withName(\"custom-build-config\")\n-          .withSecret(\"secret101\")\n-          .withType(\"github\")\n-          .trigger(new WebHookTriggerBuilder()\n-            .withSecret(\"secret101\")\n-            .build());\n \n \n-        Thread.sleep(6000);\n+      Thread.sleep(6000);\n \n-        log(\"Builds:\");\n-        for (Build b: client.builds().inNamespace(\"thisisatest\").list().getItems()) {\n-          log(\"\\t\\t\\t\"+b.getMetadata().getName());\n+      log(\"Builds:\");\n+      for (Build b: client.builds().inNamespace(\"thisisatest\").list().getItems()) {\n+        log(\"\\t\\t\\t\"+b.getMetadata().getName());\n \n-          log(\"\\t\\t\\t\\t\\t Log:\");client.builds().inNamespace(\"thisisatest\").withName(b.getMetadata().getName()).watchLog(System.out);\n-        }\n+        log(\"\\t\\t\\t\\t\\t Log:\");client.builds().inNamespace(\"thisisatest\").withName(b.getMetadata().getName()).watchLog(System.out);\n+      }\n \n \n \n-        log(\"Done.\");\n-      }finally {\n-        client.namespaces().withName(\"thisisatest\").delete();\n-        client.close();\n-      }\n+      log(\"Done.\");\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTk4Mw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520601983", "bodyText": "@manusa I think finally block can be removed from here as we are closing client in try block only, but I am not sure if doing that is correct or not, so asking here.", "author": "HeroicHitesh", "createdAt": "2020-11-10T14:25:57Z", "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/DeploymentConfigExamples.java", "diffHunk": "@@ -94,7 +93,7 @@ public static void main(String[] args) throws InterruptedException {\n \n       log(\"Done.\");\n     }finally {", "originalCommit": "e11e8e1c2dde0ff54ce6b3ff3d5296815860e8af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY4MzIxMg==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520683212", "bodyText": "There is no need to explicitly close client in finally block since try with resources handles it.", "author": "rohanKanojia", "createdAt": "2020-11-10T16:09:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTk4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5MDMyMA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520690320", "bodyText": "So, do I remove the finally block or just the line that closes the client?", "author": "HeroicHitesh", "createdAt": "2020-11-10T16:18:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTk4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5NTM0MQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520695341", "bodyText": "As I already said in my previous comment, you need to remove line which closes the client. You should try to read about how try with resources work in Java", "author": "rohanKanojia", "createdAt": "2020-11-10T16:24:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTk4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxNjEzNQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520716135", "bodyText": "No, actually I got your point about removing the line which closes the client, I was asking that is there any need for an empty finally block? I think we can remove that too.", "author": "HeroicHitesh", "createdAt": "2020-11-10T16:53:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTk4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1NTI5OQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520755299", "bodyText": "Yes, you're right. You can go ahead and remove finally block if it's empty.", "author": "rohanKanojia", "createdAt": "2020-11-10T17:50:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTk4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "243253a781d80be0b7b8604e57d2a92d61b29960", "chunk": "diff --git a/kubernetes-examples/src/main/java/io/fabric8/openshift/examples/DeploymentConfigExamples.java b/kubernetes-examples/src/main/java/io/fabric8/openshift/examples/DeploymentConfigExamples.java\nindex f4216ac01..6549248b8 100644\n--- a/kubernetes-examples/src/main/java/io/fabric8/openshift/examples/DeploymentConfigExamples.java\n+++ b/kubernetes-examples/src/main/java/io/fabric8/openshift/examples/DeploymentConfigExamples.java\n\n@@ -92,9 +92,6 @@ public class DeploymentConfigExamples {\n       log(\"Replication Controllers:\", client.replicationControllers().inNamespace(\"thisisatest\").list().getItems());\n \n       log(\"Done.\");\n-    }finally {\n-    // client.projects().withName(\"thisisatest\").delete();\n-      client.close();\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwNDEwMw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520604103", "bodyText": "@manusa or is the issue caused because we have moved this client variable inside the try block?", "author": "HeroicHitesh", "createdAt": "2020-11-10T14:28:48Z", "path": "kubernetes-examples/src/main/java/io/fabric8/openshift/examples/BuildConfigExamples.java", "diffHunk": "@@ -37,10 +37,8 @@\n \n   public static void main(String[] args) throws InterruptedException {\n     Config config = new ConfigBuilder().build();\n-    KubernetesClient kubernetesClient = new DefaultKubernetesClient(config);\n-    OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);\n-\n-    try {\n+    try(KubernetesClient kubernetesClient = new DefaultKubernetesClient(config)){\n+      OpenShiftClient client = kubernetesClient.adapt(OpenShiftClient.class);", "originalCommit": "e11e8e1c2dde0ff54ce6b3ff3d5296815860e8af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5NzcyNg==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520697726", "bodyText": "As rohan menitoned, you don't need to explicitly close the client now that it is in a try-with-resources block", "author": "manusa", "createdAt": "2020-11-10T16:28:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwNDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5Nzk2NA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2584#discussion_r520697964", "bodyText": "https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html", "author": "manusa", "createdAt": "2020-11-10T16:28:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwNDEwMw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "243253a781d80be0b7b8604e57d2a92d61b29960", "url": "https://github.com/fabric8io/kubernetes-client/commit/243253a781d80be0b7b8604e57d2a92d61b29960", "message": "Close clients in ListCustomResourceDefinitions.java, BuildConfigExamples.java, LoadExample.java, and DeploymentConfigExamples.java", "committedDate": "2020-11-10T17:15:59Z", "type": "commit"}, {"oid": "243253a781d80be0b7b8604e57d2a92d61b29960", "url": "https://github.com/fabric8io/kubernetes-client/commit/243253a781d80be0b7b8604e57d2a92d61b29960", "message": "Close clients in ListCustomResourceDefinitions.java, BuildConfigExamples.java, LoadExample.java, and DeploymentConfigExamples.java", "committedDate": "2020-11-10T17:15:59Z", "type": "forcePushed"}]}