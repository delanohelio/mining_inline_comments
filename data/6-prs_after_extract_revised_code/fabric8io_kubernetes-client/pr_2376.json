{"pr_number": 2376, "pr_title": "Fix #2311: Add Support for creating bootstrap project template", "pr_createdAt": "2020-07-29T12:04:35Z", "pr_url": "https://github.com/fabric8io/kubernetes-client/pull/2376", "timeline": [{"oid": "1ab246fdf57ab9c184fccce158e681a45e04276e", "url": "https://github.com/fabric8io/kubernetes-client/commit/1ab246fdf57ab9c184fccce158e681a45e04276e", "message": "Fix #2311: Add Support for creating bootstrap project template\n\nJust like `oc adm create-bootstrap-project-template` generates a template yaml for\nproject request resources to be created; OpenShiftClient should be able to\ngenerate + Apply resources based upon project request name, description, display name,\nrequesting user and admin user. It should create the following resources:\n\n- Project (actual project to be created)\n- RoleBinding system:deployers\n- RoleBinding system:image-builders\n- RoleBinding system:image-pullers\n- RoleBinding admin", "committedDate": "2020-07-31T07:06:43Z", "type": "forcePushed"}, {"oid": "5a057efffa8109ca5245762ee36fd9791fc09234", "url": "https://github.com/fabric8io/kubernetes-client/commit/5a057efffa8109ca5245762ee36fd9791fc09234", "message": "Fix #2311: Add Support for creating bootstrap project template\n\nJust like `oc adm create-bootstrap-project-template` generates a template yaml for\nproject request resources to be created; OpenShiftClient should be able to\ngenerate + Apply resources based upon project request name, description, display name,\nrequesting user and admin user. It should create the following resources:\n\n- Project (actual project to be created)\n- RoleBinding system:deployers\n- RoleBinding system:image-builders\n- RoleBinding system:image-pullers\n- RoleBinding admin", "committedDate": "2020-07-31T08:57:32Z", "type": "forcePushed"}, {"oid": "aa5e5306b32b556a0d375133a78b2a33ce168beb", "url": "https://github.com/fabric8io/kubernetes-client/commit/aa5e5306b32b556a0d375133a78b2a33ce168beb", "message": "Fix #2311: Add Support for creating bootstrap project template\n\nJust like `oc adm create-bootstrap-project-template` generates a template yaml for\nproject request resources to be created; OpenShiftClient should be able to\ngenerate + Apply resources based upon project request name, description, display name,\nrequesting user and admin user. It should create the following resources:\n\n- Project (actual project to be created)\n- RoleBinding system:deployers\n- RoleBinding system:image-builders\n- RoleBinding system:image-pullers\n- RoleBinding admin", "committedDate": "2020-08-07T14:29:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY5MjkwMQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2376#discussion_r467692901", "bodyText": "Is creating a new ProjectOperationsImpl instance necessary?", "author": "manusa", "createdAt": "2020-08-10T05:24:44Z", "path": "openshift-client/src/main/java/io/fabric8/openshift/client/dsl/internal/ProjectOperationsImpl.java", "diffHunk": "@@ -51,4 +64,114 @@ public ProjectOperationsImpl newInstance(OperationContext context) {\n   public boolean isResourceNamespaced() {\n     return false;\n   }\n+\n+  @Override\n+  public List<HasMetadata> createProjectAndRoleBindings(String name, String description, String displayName, String adminUser, String requestingUser) {\n+    List<HasMetadata> result = new ArrayList<>();\n+    Project project = getProject(name, description, displayName, requestingUser);\n+    List<HasMetadata> projectRoleBindings = getNewProjectRoleBindings(name, adminUser);\n+\n+    // Create Project\n+    ProjectOperationsImpl projectOperations = new ProjectOperationsImpl(client, OpenShiftConfig.wrap(config));", "originalCommit": "aa5e5306b32b556a0d375133a78b2a33ce168beb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b6a3eed3c269b3858f1e2d73e303ffe56af8337e", "chunk": "diff --git a/openshift-client/src/main/java/io/fabric8/openshift/client/dsl/internal/ProjectOperationsImpl.java b/openshift-client/src/main/java/io/fabric8/openshift/client/dsl/internal/ProjectOperationsImpl.java\nindex bc02103be..a4b11f77b 100644\n--- a/openshift-client/src/main/java/io/fabric8/openshift/client/dsl/internal/ProjectOperationsImpl.java\n+++ b/openshift-client/src/main/java/io/fabric8/openshift/client/dsl/internal/ProjectOperationsImpl.java\n\n@@ -68,12 +68,11 @@ public class ProjectOperationsImpl extends OpenShiftOperation<Project, ProjectLi\n   @Override\n   public List<HasMetadata> createProjectAndRoleBindings(String name, String description, String displayName, String adminUser, String requestingUser) {\n     List<HasMetadata> result = new ArrayList<>();\n-    Project project = getProject(name, description, displayName, requestingUser);\n-    List<HasMetadata> projectRoleBindings = getNewProjectRoleBindings(name, adminUser);\n+    Project project = initProject(name, description, displayName, requestingUser);\n+    List<HasMetadata> projectRoleBindings = initRoleBindings(name, adminUser);\n \n     // Create Project\n-    ProjectOperationsImpl projectOperations = new ProjectOperationsImpl(client, OpenShiftConfig.wrap(config));\n-    result.add(projectOperations.create(project));\n+    result.add(create(project));\n \n     // Create Role Bindings\n     NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicableListImpl listOp = new NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicableListImpl(client, config, getNamespace(), null, false, false, new ArrayList<>(), projectRoleBindings, null, DeletionPropagation.BACKGROUND, true) {};\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY5MzI3Ng==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2376#discussion_r467693276", "bodyText": "nit: Maybe calling this initProject would be less confusing. By the name of the method I'm unsure if this will retrieve a project from the server or something in those lines.", "author": "manusa", "createdAt": "2020-08-10T05:26:40Z", "path": "openshift-client/src/main/java/io/fabric8/openshift/client/dsl/internal/ProjectOperationsImpl.java", "diffHunk": "@@ -51,4 +64,114 @@ public ProjectOperationsImpl newInstance(OperationContext context) {\n   public boolean isResourceNamespaced() {\n     return false;\n   }\n+\n+  @Override\n+  public List<HasMetadata> createProjectAndRoleBindings(String name, String description, String displayName, String adminUser, String requestingUser) {\n+    List<HasMetadata> result = new ArrayList<>();\n+    Project project = getProject(name, description, displayName, requestingUser);\n+    List<HasMetadata> projectRoleBindings = getNewProjectRoleBindings(name, adminUser);\n+\n+    // Create Project\n+    ProjectOperationsImpl projectOperations = new ProjectOperationsImpl(client, OpenShiftConfig.wrap(config));\n+    result.add(projectOperations.create(project));\n+\n+    // Create Role Bindings\n+    NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicableListImpl listOp = new NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicableListImpl(client, config, getNamespace(), null, false, false, new ArrayList<>(), projectRoleBindings, null, DeletionPropagation.BACKGROUND, true) {};\n+    result.addAll(listOp.createOrReplace());\n+\n+    return result;\n+  }\n+\n+  private Project getProject(String name, String description, String displayName, String requestingUser) {", "originalCommit": "aa5e5306b32b556a0d375133a78b2a33ce168beb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b6a3eed3c269b3858f1e2d73e303ffe56af8337e", "chunk": "diff --git a/openshift-client/src/main/java/io/fabric8/openshift/client/dsl/internal/ProjectOperationsImpl.java b/openshift-client/src/main/java/io/fabric8/openshift/client/dsl/internal/ProjectOperationsImpl.java\nindex bc02103be..a4b11f77b 100644\n--- a/openshift-client/src/main/java/io/fabric8/openshift/client/dsl/internal/ProjectOperationsImpl.java\n+++ b/openshift-client/src/main/java/io/fabric8/openshift/client/dsl/internal/ProjectOperationsImpl.java\n\n@@ -68,12 +68,11 @@ public class ProjectOperationsImpl extends OpenShiftOperation<Project, ProjectLi\n   @Override\n   public List<HasMetadata> createProjectAndRoleBindings(String name, String description, String displayName, String adminUser, String requestingUser) {\n     List<HasMetadata> result = new ArrayList<>();\n-    Project project = getProject(name, description, displayName, requestingUser);\n-    List<HasMetadata> projectRoleBindings = getNewProjectRoleBindings(name, adminUser);\n+    Project project = initProject(name, description, displayName, requestingUser);\n+    List<HasMetadata> projectRoleBindings = initRoleBindings(name, adminUser);\n \n     // Create Project\n-    ProjectOperationsImpl projectOperations = new ProjectOperationsImpl(client, OpenShiftConfig.wrap(config));\n-    result.add(projectOperations.create(project));\n+    result.add(create(project));\n \n     // Create Role Bindings\n     NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicableListImpl listOp = new NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicableListImpl(client, config, getNamespace(), null, false, false, new ArrayList<>(), projectRoleBindings, null, DeletionPropagation.BACKGROUND, true) {};\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY5MzQxMQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2376#discussion_r467693411", "bodyText": "nit: same as https://github.com/fabric8io/kubernetes-client/pull/2376/files#r467693276, probably initRoleBinding is more clear", "author": "manusa", "createdAt": "2020-08-10T05:27:23Z", "path": "openshift-client/src/main/java/io/fabric8/openshift/client/dsl/internal/ProjectOperationsImpl.java", "diffHunk": "@@ -51,4 +64,114 @@ public ProjectOperationsImpl newInstance(OperationContext context) {\n   public boolean isResourceNamespaced() {\n     return false;\n   }\n+\n+  @Override\n+  public List<HasMetadata> createProjectAndRoleBindings(String name, String description, String displayName, String adminUser, String requestingUser) {\n+    List<HasMetadata> result = new ArrayList<>();\n+    Project project = getProject(name, description, displayName, requestingUser);\n+    List<HasMetadata> projectRoleBindings = getNewProjectRoleBindings(name, adminUser);\n+\n+    // Create Project\n+    ProjectOperationsImpl projectOperations = new ProjectOperationsImpl(client, OpenShiftConfig.wrap(config));\n+    result.add(projectOperations.create(project));\n+\n+    // Create Role Bindings\n+    NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicableListImpl listOp = new NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicableListImpl(client, config, getNamespace(), null, false, false, new ArrayList<>(), projectRoleBindings, null, DeletionPropagation.BACKGROUND, true) {};\n+    result.addAll(listOp.createOrReplace());\n+\n+    return result;\n+  }\n+\n+  private Project getProject(String name, String description, String displayName, String requestingUser) {\n+    return new ProjectBuilder()\n+      .withNewMetadata()\n+      .addToAnnotations(OPENSHIFT_IO_DESCRIPTION_ANNOTATION, description)\n+      .addToAnnotations(OPENSHIFT_IO_DISPLAY_NAME_ANNOTATION, displayName)\n+      .addToAnnotations(OPENSHIFT_IO_REQUESTER_ANNOTATION, requestingUser)\n+      .withName(name)\n+      .endMetadata()\n+      .build();\n+  }\n+\n+  private List<HasMetadata> getNewProjectRoleBindings(String name, String adminUser) {", "originalCommit": "aa5e5306b32b556a0d375133a78b2a33ce168beb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b6a3eed3c269b3858f1e2d73e303ffe56af8337e", "chunk": "diff --git a/openshift-client/src/main/java/io/fabric8/openshift/client/dsl/internal/ProjectOperationsImpl.java b/openshift-client/src/main/java/io/fabric8/openshift/client/dsl/internal/ProjectOperationsImpl.java\nindex bc02103be..a4b11f77b 100644\n--- a/openshift-client/src/main/java/io/fabric8/openshift/client/dsl/internal/ProjectOperationsImpl.java\n+++ b/openshift-client/src/main/java/io/fabric8/openshift/client/dsl/internal/ProjectOperationsImpl.java\n\n@@ -68,12 +68,11 @@ public class ProjectOperationsImpl extends OpenShiftOperation<Project, ProjectLi\n   @Override\n   public List<HasMetadata> createProjectAndRoleBindings(String name, String description, String displayName, String adminUser, String requestingUser) {\n     List<HasMetadata> result = new ArrayList<>();\n-    Project project = getProject(name, description, displayName, requestingUser);\n-    List<HasMetadata> projectRoleBindings = getNewProjectRoleBindings(name, adminUser);\n+    Project project = initProject(name, description, displayName, requestingUser);\n+    List<HasMetadata> projectRoleBindings = initRoleBindings(name, adminUser);\n \n     // Create Project\n-    ProjectOperationsImpl projectOperations = new ProjectOperationsImpl(client, OpenShiftConfig.wrap(config));\n-    result.add(projectOperations.create(project));\n+    result.add(create(project));\n \n     // Create Role Bindings\n     NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicableListImpl listOp = new NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicableListImpl(client, config, getNamespace(), null, false, false, new ArrayList<>(), projectRoleBindings, null, DeletionPropagation.BACKGROUND, true) {};\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY5MzUyOQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2376#discussion_r467693529", "bodyText": "nit: testCreateProjectAndRoleBindings", "author": "manusa", "createdAt": "2020-08-10T05:28:02Z", "path": "kubernetes-tests/src/test/java/io/fabric8/openshift/client/server/mock/ProjectTest.java", "diffHunk": "@@ -93,4 +98,107 @@ public void testDelete() {\n     deleted = client.projects().withName(\"project3\").delete();\n     assertFalse(deleted);\n   }\n+\n+  @Test\n+  void testCreateUsingParameters() {", "originalCommit": "aa5e5306b32b556a0d375133a78b2a33ce168beb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b6a3eed3c269b3858f1e2d73e303ffe56af8337e", "chunk": "diff --git a/kubernetes-tests/src/test/java/io/fabric8/openshift/client/server/mock/ProjectTest.java b/kubernetes-tests/src/test/java/io/fabric8/openshift/client/server/mock/ProjectTest.java\nindex d9b3fba1c..fef0079e9 100644\n--- a/kubernetes-tests/src/test/java/io/fabric8/openshift/client/server/mock/ProjectTest.java\n+++ b/kubernetes-tests/src/test/java/io/fabric8/openshift/client/server/mock/ProjectTest.java\n\n@@ -100,7 +100,7 @@ public class ProjectTest {\n   }\n \n   @Test\n-  void testCreateUsingParameters() {\n+  void testCreateProjectAndRoleBindings() {\n     // Given\n     String name = \"test-project\";\n     String displayName = \"test-project\";\n"}}, {"oid": "b6a3eed3c269b3858f1e2d73e303ffe56af8337e", "url": "https://github.com/fabric8io/kubernetes-client/commit/b6a3eed3c269b3858f1e2d73e303ffe56af8337e", "message": "Fix #2311: Add Support for creating bootstrap project template\n\nJust like `oc adm create-bootstrap-project-template` generates a template yaml for\nproject request resources to be created; OpenShiftClient should be able to\ngenerate + Apply resources based upon project request name, description, display name,\nrequesting user and admin user. It should create the following resources:\n\n- Project (actual project to be created)\n- RoleBinding system:deployers\n- RoleBinding system:image-builders\n- RoleBinding system:image-pullers\n- RoleBinding admin", "committedDate": "2020-08-10T07:02:03Z", "type": "forcePushed"}, {"oid": "89d55f2796971bfd4657c851c7174391d43ef219", "url": "https://github.com/fabric8io/kubernetes-client/commit/89d55f2796971bfd4657c851c7174391d43ef219", "message": "Fix #2311: Add Support for creating bootstrap project template\n\nJust like `oc adm create-bootstrap-project-template` generates a template yaml for\nproject request resources to be created; OpenShiftClient should be able to\ngenerate + Apply resources based upon project request name, description, display name,\nrequesting user and admin user. It should create the following resources:\n\n- Project (actual project to be created)\n- RoleBinding system:deployers\n- RoleBinding system:image-builders\n- RoleBinding system:image-pullers\n- RoleBinding admin", "committedDate": "2020-08-10T08:56:41Z", "type": "forcePushed"}, {"oid": "46efaf519adcb6405cf1aaa9cd2bf1a205478094", "url": "https://github.com/fabric8io/kubernetes-client/commit/46efaf519adcb6405cf1aaa9cd2bf1a205478094", "message": "Fix #2311: Add Support for creating bootstrap project template\n\nJust like `oc adm create-bootstrap-project-template` generates a template yaml for\nproject request resources to be created; OpenShiftClient should be able to\ngenerate + Apply resources based upon project request name, description, display name,\nrequesting user and admin user. It should create the following resources:\n\n- Project (actual project to be created)\n- RoleBinding system:deployers\n- RoleBinding system:image-builders\n- RoleBinding system:image-pullers\n- RoleBinding admin", "committedDate": "2020-08-10T09:00:45Z", "type": "commit"}, {"oid": "46efaf519adcb6405cf1aaa9cd2bf1a205478094", "url": "https://github.com/fabric8io/kubernetes-client/commit/46efaf519adcb6405cf1aaa9cd2bf1a205478094", "message": "Fix #2311: Add Support for creating bootstrap project template\n\nJust like `oc adm create-bootstrap-project-template` generates a template yaml for\nproject request resources to be created; OpenShiftClient should be able to\ngenerate + Apply resources based upon project request name, description, display name,\nrequesting user and admin user. It should create the following resources:\n\n- Project (actual project to be created)\n- RoleBinding system:deployers\n- RoleBinding system:image-builders\n- RoleBinding system:image-pullers\n- RoleBinding admin", "committedDate": "2020-08-10T09:00:45Z", "type": "forcePushed"}]}