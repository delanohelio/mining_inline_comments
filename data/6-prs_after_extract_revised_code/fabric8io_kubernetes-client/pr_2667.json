{"pr_number": 2667, "pr_title": "Fix #2666: Align SharedIndexInformer API with Custom Resource Improvements", "pr_createdAt": "2020-12-15T20:16:44Z", "pr_url": "https://github.com/fabric8io/kubernetes-client/pull/2667", "timeline": [{"oid": "bfe683b2f56e3c7740be4489ce1deb93e1f900f9", "url": "https://github.com/fabric8io/kubernetes-client/commit/bfe683b2f56e3c7740be4489ce1deb93e1f900f9", "message": "Update KubernetesResourceUtil.inferListType and Animal CRD with new CRD improvements", "committedDate": "2020-12-17T14:15:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIwNzU1OA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r545207558", "bodyText": "These invocations should be added to a test setup method", "author": "manusa", "createdAt": "2020-12-17T16:05:11Z", "path": "kubernetes-tests/src/test/java/io/fabric8/kubernetes/client/mock/DefaultSharedIndexInformerTest.java", "diffHunk": "@@ -617,6 +635,285 @@ public void onDelete(Star star, boolean deletedFinalStateUnknown) { }\n     sharedInformerFactory.stopAllRegisteredInformers();\n   }\n \n+  @Test\n+  @DisplayName(\"Pod Informer should without list type should watch in all namespaces\")\n+  void testPodInformerWithNoOperationContextAndNoListType() throws InterruptedException {\n+    // Given\n+    String startResourceVersion = \"1000\", endResourceVersion = \"1001\";\n+    server.expect().withPath(\"/api/v1/pods\")\n+      .andReturn(200, new PodListBuilder().withNewMetadata().withResourceVersion(startResourceVersion).endMetadata().withItems(Collections.emptyList()).build()).once();\n+    server.expect().withPath(\"/api/v1/pods?resourceVersion=\" + startResourceVersion + \"&watch=true\")\n+      .andUpgradeToWebSocket()\n+      .open()\n+      .waitFor(WATCH_EVENT_EMIT_TIME)\n+      .andEmit(new WatchEvent(new PodBuilder().withNewMetadata().withNamespace(\"test\").withName(\"pod1\").withResourceVersion(endResourceVersion).endMetadata().build(), \"ADDED\"))\n+      .waitFor(OUTDATED_WATCH_EVENT_EMIT_TIME)\n+      .andEmit(outdatedEvent).done().always();\n+    KubernetesClient client = server.getClient();\n+\n+    // When\n+    SharedInformerFactory factory = client.informers();", "originalCommit": "bfe683b2f56e3c7740be4489ce1deb93e1f900f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df8bcd4e4c3448005061b1bf6c2d7aedff0fb302", "chunk": "diff --git a/kubernetes-tests/src/test/java/io/fabric8/kubernetes/client/mock/DefaultSharedIndexInformerTest.java b/kubernetes-tests/src/test/java/io/fabric8/kubernetes/client/mock/DefaultSharedIndexInformerTest.java\nindex eae09edef..1f2b1aa32 100644\n--- a/kubernetes-tests/src/test/java/io/fabric8/kubernetes/client/mock/DefaultSharedIndexInformerTest.java\n+++ b/kubernetes-tests/src/test/java/io/fabric8/kubernetes/client/mock/DefaultSharedIndexInformerTest.java\n\n@@ -609,30 +480,15 @@ class DefaultSharedIndexInformerTest {\n       .withPlural(\"stars\")\n       .build();\n \n-    SharedInformerFactory sharedInformerFactory = client.informers();\n-    SharedIndexInformer<Star> starSharedIndexInformer = sharedInformerFactory.sharedIndexInformerForCustomResource(crdContext, Star.class, StarList.class,  RESYNC_PERIOD);\n+    // When\n+    SharedIndexInformer<Star> starSharedIndexInformer = factory.sharedIndexInformerForCustomResource(crdContext, Star.class, StarList.class,  RESYNC_PERIOD);\n     CountDownLatch foundExistingStar = new CountDownLatch(1);\n-    starSharedIndexInformer.addEventHandler(\n-      new ResourceEventHandler<Star>() {\n-        @Override\n-        public void onAdd(Star star) {\n-          if (star.getMetadata().getName().equalsIgnoreCase(\"star1\")) {\n-            foundExistingStar.countDown();\n-          }\n-        }\n-\n-        @Override\n-        public void onUpdate(Star oldStar, Star newStar) { }\n-\n-        @Override\n-        public void onDelete(Star star, boolean deletedFinalStateUnknown) { }\n-      });\n-    sharedInformerFactory.startAllRegisteredInformers();\n-\n+    starSharedIndexInformer.addEventHandler(new TestResourceHandler<>(foundExistingStar, \"star1\"));\n+    factory.startAllRegisteredInformers();\n     foundExistingStar.await(LATCH_AWAIT_PERIOD_IN_SECONDS, TimeUnit.SECONDS);\n-    assertEquals(0, foundExistingStar.getCount());\n \n-    sharedInformerFactory.stopAllRegisteredInformers();\n+    // Then\n+    assertEquals(0, foundExistingStar.getCount());\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIwNzc0OA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r545207748", "bodyText": "These invocations should be added to a test teardown method", "author": "manusa", "createdAt": "2020-12-17T16:05:28Z", "path": "kubernetes-tests/src/test/java/io/fabric8/kubernetes/client/mock/DefaultSharedIndexInformerTest.java", "diffHunk": "@@ -617,6 +635,285 @@ public void onDelete(Star star, boolean deletedFinalStateUnknown) { }\n     sharedInformerFactory.stopAllRegisteredInformers();\n   }\n \n+  @Test\n+  @DisplayName(\"Pod Informer should without list type should watch in all namespaces\")\n+  void testPodInformerWithNoOperationContextAndNoListType() throws InterruptedException {\n+    // Given\n+    String startResourceVersion = \"1000\", endResourceVersion = \"1001\";\n+    server.expect().withPath(\"/api/v1/pods\")\n+      .andReturn(200, new PodListBuilder().withNewMetadata().withResourceVersion(startResourceVersion).endMetadata().withItems(Collections.emptyList()).build()).once();\n+    server.expect().withPath(\"/api/v1/pods?resourceVersion=\" + startResourceVersion + \"&watch=true\")\n+      .andUpgradeToWebSocket()\n+      .open()\n+      .waitFor(WATCH_EVENT_EMIT_TIME)\n+      .andEmit(new WatchEvent(new PodBuilder().withNewMetadata().withNamespace(\"test\").withName(\"pod1\").withResourceVersion(endResourceVersion).endMetadata().build(), \"ADDED\"))\n+      .waitFor(OUTDATED_WATCH_EVENT_EMIT_TIME)\n+      .andEmit(outdatedEvent).done().always();\n+    KubernetesClient client = server.getClient();\n+\n+    // When\n+    SharedInformerFactory factory = client.informers();\n+    SharedIndexInformer<Pod> podInformer = factory.sharedIndexInformerFor(Pod.class, RESYNC_PERIOD);\n+    CountDownLatch foundExistingPod = new CountDownLatch(1);\n+    podInformer.addEventHandler(new TestResourceHandler<>(foundExistingPod, \"pod1\"));\n+    factory.startAllRegisteredInformers();\n+    foundExistingPod.await(LATCH_AWAIT_PERIOD_IN_SECONDS, TimeUnit.SECONDS);\n+\n+    // Then\n+    assertEquals(0, foundExistingPod.getCount());\n+    factory.stopAllRegisteredInformers();", "originalCommit": "bfe683b2f56e3c7740be4489ce1deb93e1f900f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df8bcd4e4c3448005061b1bf6c2d7aedff0fb302", "chunk": "diff --git a/kubernetes-tests/src/test/java/io/fabric8/kubernetes/client/mock/DefaultSharedIndexInformerTest.java b/kubernetes-tests/src/test/java/io/fabric8/kubernetes/client/mock/DefaultSharedIndexInformerTest.java\nindex eae09edef..1f2b1aa32 100644\n--- a/kubernetes-tests/src/test/java/io/fabric8/kubernetes/client/mock/DefaultSharedIndexInformerTest.java\n+++ b/kubernetes-tests/src/test/java/io/fabric8/kubernetes/client/mock/DefaultSharedIndexInformerTest.java\n\n@@ -609,30 +480,15 @@ class DefaultSharedIndexInformerTest {\n       .withPlural(\"stars\")\n       .build();\n \n-    SharedInformerFactory sharedInformerFactory = client.informers();\n-    SharedIndexInformer<Star> starSharedIndexInformer = sharedInformerFactory.sharedIndexInformerForCustomResource(crdContext, Star.class, StarList.class,  RESYNC_PERIOD);\n+    // When\n+    SharedIndexInformer<Star> starSharedIndexInformer = factory.sharedIndexInformerForCustomResource(crdContext, Star.class, StarList.class,  RESYNC_PERIOD);\n     CountDownLatch foundExistingStar = new CountDownLatch(1);\n-    starSharedIndexInformer.addEventHandler(\n-      new ResourceEventHandler<Star>() {\n-        @Override\n-        public void onAdd(Star star) {\n-          if (star.getMetadata().getName().equalsIgnoreCase(\"star1\")) {\n-            foundExistingStar.countDown();\n-          }\n-        }\n-\n-        @Override\n-        public void onUpdate(Star oldStar, Star newStar) { }\n-\n-        @Override\n-        public void onDelete(Star star, boolean deletedFinalStateUnknown) { }\n-      });\n-    sharedInformerFactory.startAllRegisteredInformers();\n-\n+    starSharedIndexInformer.addEventHandler(new TestResourceHandler<>(foundExistingStar, \"star1\"));\n+    factory.startAllRegisteredInformers();\n     foundExistingStar.await(LATCH_AWAIT_PERIOD_IN_SECONDS, TimeUnit.SECONDS);\n-    assertEquals(0, foundExistingStar.getCount());\n \n-    sharedInformerFactory.stopAllRegisteredInformers();\n+    // Then\n+    assertEquals(0, foundExistingStar.getCount());\n   }\n \n   @Test\n"}}, {"oid": "df8bcd4e4c3448005061b1bf6c2d7aedff0fb302", "url": "https://github.com/fabric8io/kubernetes-client/commit/df8bcd4e4c3448005061b1bf6c2d7aedff0fb302", "message": "Refactor DefaultSharedIndexInformerTest to use @BeforeEach/@AfterEach\n\nReduce code duplication by adding setup/teardown methods", "committedDate": "2020-12-17T17:35:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczNzk2OA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r545737968", "bodyText": "Shouldn't this use the new HasMetadata#getApiVersion instead? Is there a scenario where the the apiVersion derived from the OperationContext would clash with the version provided by the class itself?", "author": "metacosm", "createdAt": "2020-12-18T10:22:28Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java", "diffHunk": "@@ -266,4 +385,12 @@ private void initOperationContext(Config configuration) {\n       context = context.withIsNamespaceConfiguredFromGlobalConfig(true);\n     }\n   }\n+\n+  private <T extends HasMetadata> void  registerKindToKubernetesDeserializer(OperationContext context, Class<T> apiTypeClass) {\n+    if (context.getApiGroupName() != null && context.getApiGroupVersion() != null) {", "originalCommit": "dde65ab3998ba12c2534f3c88299f073369a5f1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7402c0f984552b94018e72ebce7c20fcbd2d8c4f", "chunk": "diff --git a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\nindex 94a74517c..95ce695f9 100644\n--- a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\n+++ b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\n\n@@ -393,4 +272,11 @@ public class SharedInformerFactory extends BaseOperation {\n       KubernetesDeserializer.registerCustomKind(apiGroupNameAndVersion, apiTypeClass.getSimpleName(), apiTypeClass);\n     }\n   }\n+\n+  private <T extends HasMetadata> String resolvePlural(Class<T> apiTypeClass) {\n+    if (CustomResource.class.isAssignableFrom(apiTypeClass)) {\n+      return CustomResourceDefinitionContext.fromCustomResourceType(apiTypeClass).getPlural();\n+    }\n+    return getPluralFromKind(HasMetadata.getKind(apiTypeClass));\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczODM5NA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r545738394", "bodyText": "What should be done when the information provided by the CRDContext clashes with what could be derived from the api type class?", "author": "metacosm", "createdAt": "2020-12-18T10:23:15Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java", "diffHunk": "@@ -89,10 +86,134 @@ public SharedInformerFactory(ExecutorService threadPool, OkHttpClient okHttpClie\n    * @return the shared index informer\n    */\n   public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, Class<L> apiListTypeClass, long resyncPeriodInMillis) {\n-    return sharedIndexInformerFor(apiTypeClass, apiListTypeClass, context.withApiGroupName(Utils.getAnnotationValue(apiTypeClass, Group.class))\n-      .withApiGroupVersion(Utils.getAnnotationValue(apiTypeClass, Version.class))\n-      .withPlural(getPluralFromKind(apiTypeClass.getSimpleName()))\n-      .withIsNamespaceConfiguredFromGlobalConfig(context.isNamespaceFromGlobalConfig()), resyncPeriodInMillis);\n+    return sharedIndexInformerFor(apiTypeClass, apiListTypeClass, null, resyncPeriodInMillis);\n+  }\n+\n+  /**\n+   * Constructs and returns a shared index informer with resync period specified. And the\n+   * informer cache will be overwritten.\n+   *\n+   * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n+   *\n+   * @param apiTypeClass apiType class\n+   * @param resyncPeriodInMillis resync period in milliseconds\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced}) if Namespace scoped resource\n+   * @return the shared index informer\n+   */\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, KubernetesResourceUtil.inferListType(apiTypeClass), resyncPeriodInMillis);\n+  }\n+\n+  /**\n+   * Constructs and returns a shared index informer with resync period specified. And the\n+   * informer cache will be overwritten.\n+   *\n+   * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n+   *\n+   * @param apiTypeClass apiType class\n+   * @param operationContext {@link OperationContext} Operation Context\n+   * @param resyncPeriodInMillis resync period in milliseconds\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced}) if Namespace scoped resource\n+   * @return the shared index informer\n+   */\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, OperationContext operationContext, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, KubernetesResourceUtil.inferListType(apiTypeClass), operationContext, resyncPeriodInMillis);\n+  }\n+\n+  /**\n+   * Constructs and returns a shared index informer with resync period specified for custom resources. Note that\n+   * {@link CustomResourceDefinitionContext} would be build using opinionated defaults by inspecting the ApiType\n+   * POJO\n+   *\n+   * @param apiTypeClass apiType class\n+   * @param operationContext operation context\n+   * @param resyncPeriodInMillis resync period in milliseconds\n+   * @param <T> the type parameter (should extend {@link CustomResource} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n+   * @return the shared index informer\n+   */\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerForCustomResource(Class<T> apiTypeClass, OperationContext operationContext, long resyncPeriodInMillis) {\n+    return sharedIndexInformerForCustomResource(CustomResourceDefinitionContext.fromCustomResourceType(apiTypeClass), apiTypeClass, CustomResourceOperationsImpl.inferListType(apiTypeClass), operationContext, resyncPeriodInMillis);\n+  }\n+\n+  /**\n+   * Constructs and returns a shared index informer with resync period specified for custom resources. Note that\n+   * {@link CustomResourceDefinitionContext} would be build using opinionated defaults by inspecting the ApiType\n+   * POJO\n+   *\n+   * @param apiTypeClass apiType class\n+   * @param resyncPeriodInMillis  resync period in milliseconds\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n+   * @return the shared index informer\n+   */\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerForCustomResource(Class<T> apiTypeClass, long resyncPeriodInMillis) {\n+    return sharedIndexInformerForCustomResource(CustomResourceDefinitionContext.fromCustomResourceType(apiTypeClass), apiTypeClass, CustomResourceOperationsImpl.inferListType(apiTypeClass), resyncPeriodInMillis);\n+  }\n+\n+  /**\n+   * Constructs and returns a shared index informer with resync period specified for custom resources. Note that\n+   * {@link CustomResourceDefinitionContext} would be build using opinionated defaults by inspecting the ApiType\n+   * POJO\n+   *\n+   * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n+   *\n+   * @param apiTypeClass apiType class\n+   * @param apiListTypeClass api list type class\n+   * @param resyncPeriodInMillis resync period in milliseconds\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n+   * @param <L> the type's list parameter (should extend {@link io.fabric8.kubernetes.api.model.KubernetesResourceList}\n+   * @return the shared index informer\n+   */\n+  public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerForCustomResource(Class<T> apiTypeClass, Class<L> apiListTypeClass, long resyncPeriodInMillis) {\n+    return sharedIndexInformerForCustomResource(CustomResourceDefinitionContext.fromCustomResourceType(apiTypeClass), apiTypeClass, apiListTypeClass, resyncPeriodInMillis);\n+  }\n+\n+  /**\n+   * Constructs and returns a shared index informer with resync period specified for custom resources. You can use this\n+   * method to specify namespace in {@link OperationContext} if you want to monitor for events in a dedicated namespace\n+   * only or provide other filtering options. Note that {@link CustomResourceDefinitionContext} would be build using\n+   * opinionated defaults by inspecting the ApiType POJO\n+   *\n+   * @param apiTypeClass apiType class\n+   * @param apiListTypeClass api list type class\n+   * @param operationContext operation context\n+   * @param resyncPeriodInMillis resync period in milliseconds\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n+   * @param <L> the type's list parameter (should extend {@link io.fabric8.kubernetes.api.model.KubernetesResourceList}\n+   * @return the shared index informer\n+   */\n+  public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerForCustomResource(Class<T> apiTypeClass, Class<L> apiListTypeClass, OperationContext operationContext, long resyncPeriodInMillis) {\n+    return sharedIndexInformerForCustomResource(CustomResourceDefinitionContext.fromCustomResourceType(apiTypeClass), apiTypeClass, apiListTypeClass, operationContext, resyncPeriodInMillis);\n+  }\n+\n+  /**\n+   * Constructs and returns a shared index informer with resync period specified for custom resources. You can use this\n+   * method to specify namespace in {@link OperationContext} if you want to monitor for events in a dedicated namespace\n+   * only or provide other filtering options.\n+   *\n+   * @param crdContext {@link CustomResourceDefinitionContext} Context for CustomResourceDefinition\n+   * @param apiTypeClass apiType class\n+   * @param resyncPeriodInMillis resync period in milliseconds\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n+   * @return the shared index informer\n+   */\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerForCustomResource(CustomResourceDefinitionContext crdContext, Class<T> apiTypeClass, long resyncPeriodInMillis) {\n+    return sharedIndexInformerForCustomResource(crdContext, apiTypeClass, CustomResourceOperationsImpl.inferListType(apiTypeClass), resyncPeriodInMillis);\n+  }\n+\n+  /**\n+   * Constructs and returns a shared index informer with resync period specified for custom resources. You can use this\n+   * method to specify namespace in {@link OperationContext} if you want to monitor for events in a dedicated namespace\n+   * only or provide other filtering options.\n+   *\n+   * @param crdContext {@link CustomResourceDefinitionContext} Context for CustomResourceDefinition\n+   * @param apiTypeClass apiType class\n+   * @param operationContext operation context\n+   * @param resyncPeriodInMillis resync period in milliseconds\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n+   * @return the shared index informer\n+   */\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerForCustomResource(CustomResourceDefinitionContext crdContext, Class<T> apiTypeClass, OperationContext operationContext, long resyncPeriodInMillis) {", "originalCommit": "dde65ab3998ba12c2534f3c88299f073369a5f1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4NDY4NQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r545984685", "bodyText": "As per our discussion, I'm removing this method in favor of new improved methods. Now CRDContext should be built from POJO annotations or opinionated defaults.", "author": "rohanKanojia", "createdAt": "2020-12-18T17:37:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczODM5NA=="}], "type": "inlineReview", "revised_code": {"commit": "7402c0f984552b94018e72ebce7c20fcbd2d8c4f", "chunk": "diff --git a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\nindex 94a74517c..95ce695f9 100644\n--- a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\n+++ b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\n\n@@ -72,23 +72,6 @@ public class SharedInformerFactory extends BaseOperation {\n     this.baseOperation = this.newInstance(context);\n   }\n \n-  /**\n-   * Constructs and returns a shared index informer with resync period specified. And the\n-   * informer cache will be overwritten.\n-   *\n-   * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n-   *\n-   * @param apiTypeClass apiType class\n-   * @param apiListTypeClass api list type class\n-   * @param resyncPeriodInMillis resync period in milliseconds\n-   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n-   * @param <L> the type's list parameter (should extend {@link io.fabric8.kubernetes.api.model.KubernetesResourceList}\n-   * @return the shared index informer\n-   */\n-  public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, Class<L> apiListTypeClass, long resyncPeriodInMillis) {\n-    return sharedIndexInformerFor(apiTypeClass, apiListTypeClass, null, resyncPeriodInMillis);\n-  }\n-\n   /**\n    * Constructs and returns a shared index informer with resync period specified. And the\n    * informer cache will be overwritten.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczODc2Mg==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r545738762", "bodyText": "Maybe that should be moved to HasMetadata?", "author": "metacosm", "createdAt": "2020-12-18T10:23:54Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/utils/KubernetesResourceUtil.java", "diffHunk": "@@ -367,4 +369,16 @@ public static Duration getAge(HasMetadata kubernetesResource) {\n     Instant instant = Instant.parse(kubernetesResource.getMetadata().getCreationTimestamp());\n     return Duration.between(instant, Instant.now()).abs();\n   }\n+\n+  public static <T extends HasMetadata> Class<? extends KubernetesResourceList> inferListType(Class<T> type) {", "originalCommit": "dde65ab3998ba12c2534f3c88299f073369a5f1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4NDYzMg==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r545984632", "bodyText": "I'm not sure about this. There are several resources which implement HasMetadata but do not have a list type(For example TokenReview, SelfSubjectAccessReview etc)", "author": "rohanKanojia", "createdAt": "2020-12-18T17:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczODc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6423bb939cbbb632f17c48d5919f731b01dd6490", "chunk": "diff --git a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/utils/KubernetesResourceUtil.java b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/utils/KubernetesResourceUtil.java\nindex 4ca2444c5..d91be43d5 100644\n--- a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/utils/KubernetesResourceUtil.java\n+++ b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/utils/KubernetesResourceUtil.java\n\n@@ -372,13 +372,9 @@ public class KubernetesResourceUtil {\n \n   public static <T extends HasMetadata> Class<? extends KubernetesResourceList> inferListType(Class<T> type) {\n     try {\n-      Class<?> listTypeClass = Class.forName(type.getName() + \"List\");\n-      if (KubernetesResourceList.class.isAssignableFrom(listTypeClass)) {\n-        return (Class<KubernetesResourceList<T>>) listTypeClass;\n-      }\n+      return (Class<KubernetesResourceList<T>>) Class.forName(type.getName() + \"List\");\n     } catch (ClassNotFoundException e) {\n       throw new IllegalStateException(\"No List type found for \" + type.getName() + \". Is it a Custom Resource?\");\n     }\n-    return null;\n   }\n }\n"}}, {"oid": "7402c0f984552b94018e72ebce7c20fcbd2d8c4f", "url": "https://github.com/fabric8io/kubernetes-client/commit/7402c0f984552b94018e72ebce7c20fcbd2d8c4f", "message": "Remove old Informer methods and replace with more readable methods\n\nNow with CustomResource improvements we no longer need informer methods\nin SharedInformerFactory to require list types and\nCustomResourceDefinitionContext", "committedDate": "2020-12-18T17:35:39Z", "type": "forcePushed"}, {"oid": "6c59d31042431b4a0c73ad0f06ff65e894c2319a", "url": "https://github.com/fabric8io/kubernetes-client/commit/6c59d31042431b4a0c73ad0f06ff65e894c2319a", "message": "Remove old Informer methods and replace with more readable methods\n\nNow with CustomResource improvements we no longer need informer methods\nin SharedInformerFactory to require list types and\nCustomResourceDefinitionContext", "committedDate": "2020-12-18T17:40:48Z", "type": "forcePushed"}, {"oid": "31ca3a338f9bd753c426d586693b493b00338193", "url": "https://github.com/fabric8io/kubernetes-client/commit/31ca3a338f9bd753c426d586693b493b00338193", "message": "Refactor SharedInformerFactory#registerKindToKubernetesDeserializer\n\nSharedInformerFactory#registerKindToKubernetesDeserializer should infer\napiVersion from POJO itself. We only need to register in case of custom\nresources", "committedDate": "2020-12-18T18:42:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA4MzEyOA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546083128", "bodyText": "What do you mean by informer cache will be overwritten? Is that needed information to specify in the javadoc?", "author": "metacosm", "createdAt": "2020-12-18T20:47:46Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java", "diffHunk": "@@ -82,58 +79,57 @@ public SharedInformerFactory(ExecutorService threadPool, OkHttpClient okHttpClie\n    * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n    *\n    * @param apiTypeClass apiType class\n-   * @param apiListTypeClass api list type class\n    * @param resyncPeriodInMillis resync period in milliseconds\n-   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n-   * @param <L> the type's list parameter (should extend {@link io.fabric8.kubernetes.api.model.KubernetesResourceList}\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced}) if Namespace scoped resource\n    * @return the shared index informer\n    */\n-  public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, Class<L> apiListTypeClass, long resyncPeriodInMillis) {\n-    return sharedIndexInformerFor(apiTypeClass, apiListTypeClass, context.withApiGroupName(Utils.getAnnotationValue(apiTypeClass, Group.class))\n-      .withApiGroupVersion(Utils.getAnnotationValue(apiTypeClass, Version.class))\n-      .withPlural(getPluralFromKind(apiTypeClass.getSimpleName()))\n-      .withIsNamespaceConfiguredFromGlobalConfig(context.isNamespaceFromGlobalConfig()), resyncPeriodInMillis);\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, KubernetesResourceUtil.inferListType(apiTypeClass), null, resyncPeriodInMillis);\n   }\n \n   /**\n-   * Constructs and returns a shared index informer with resync period specified for custom resources.\n+   * Constructs and returns a shared index informer with resync period specified. And the\n+   * informer cache will be overwritten.", "originalCommit": "31ca3a338f9bd753c426d586693b493b00338193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39bf5f195197396cf565b52af734b2ca51546354", "chunk": "diff --git a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\nindex 081b49a0c..3ff995476 100644\n--- a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\n+++ b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\n\n@@ -88,8 +114,7 @@ public class SharedInformerFactory extends BaseOperation {\n   }\n \n   /**\n-   * Constructs and returns a shared index informer with resync period specified. And the\n-   * informer cache will be overwritten.\n+   * Constructs and returns a shared index informer with resync period specified.\n    *\n    * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA4MzY5NA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546083694", "bodyText": "I don't think we need to mention how things are implemented here.", "author": "metacosm", "createdAt": "2020-12-18T20:49:05Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java", "diffHunk": "@@ -82,58 +79,57 @@ public SharedInformerFactory(ExecutorService threadPool, OkHttpClient okHttpClie\n    * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n    *\n    * @param apiTypeClass apiType class\n-   * @param apiListTypeClass api list type class\n    * @param resyncPeriodInMillis resync period in milliseconds\n-   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n-   * @param <L> the type's list parameter (should extend {@link io.fabric8.kubernetes.api.model.KubernetesResourceList}\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced}) if Namespace scoped resource\n    * @return the shared index informer\n    */\n-  public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, Class<L> apiListTypeClass, long resyncPeriodInMillis) {\n-    return sharedIndexInformerFor(apiTypeClass, apiListTypeClass, context.withApiGroupName(Utils.getAnnotationValue(apiTypeClass, Group.class))\n-      .withApiGroupVersion(Utils.getAnnotationValue(apiTypeClass, Version.class))\n-      .withPlural(getPluralFromKind(apiTypeClass.getSimpleName()))\n-      .withIsNamespaceConfiguredFromGlobalConfig(context.isNamespaceFromGlobalConfig()), resyncPeriodInMillis);\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, KubernetesResourceUtil.inferListType(apiTypeClass), null, resyncPeriodInMillis);\n   }\n \n   /**\n-   * Constructs and returns a shared index informer with resync period specified for custom resources.\n+   * Constructs and returns a shared index informer with resync period specified. And the\n+   * informer cache will be overwritten.\n    *\n    * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n    *\n-   * @param customResourceContext basic information about the Custom Resource Definition corresponding to that custom resource\n    * @param apiTypeClass apiType class\n-   * @param apiListTypeClass api list type class\n+   * @param operationContext {@link OperationContext} Operation Context\n    * @param resyncPeriodInMillis resync period in milliseconds\n-   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n-   * @param <L> the type's list parameter (should extend {@link io.fabric8.kubernetes.api.model.KubernetesResourceList}\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced}) if Namespace scoped resource\n    * @return the shared index informer\n    */\n-  public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerForCustomResource(CustomResourceDefinitionContext customResourceContext, Class<T> apiTypeClass, Class<L> apiListTypeClass, long resyncPeriodInMillis) {\n-    return sharedIndexInformerFor(apiTypeClass, apiListTypeClass, context.withApiGroupVersion(customResourceContext.getVersion())\n-      .withApiGroupName(customResourceContext.getGroup())\n-      .withPlural(customResourceContext.getPlural())\n-      .withIsNamespaceConfiguredFromGlobalConfig(context.isNamespaceFromGlobalConfig()), resyncPeriodInMillis);\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, OperationContext operationContext, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, KubernetesResourceUtil.inferListType(apiTypeClass), operationContext, resyncPeriodInMillis);\n   }\n \n   /**\n-   * Constructs and returns a shared index informer with resync period specified for custom resources. You can use this\n-   * method to specify namespace in {@link OperationContext} if you want to monitor for events in a dedicated namespace\n-   * only or provide other filtering options.\n+   * Constructs and returns a shared index informer with resync period specified for custom resources. Note that", "originalCommit": "31ca3a338f9bd753c426d586693b493b00338193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39bf5f195197396cf565b52af734b2ca51546354", "chunk": "diff --git a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\nindex 081b49a0c..3ff995476 100644\n--- a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\n+++ b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\n\n@@ -88,8 +114,7 @@ public class SharedInformerFactory extends BaseOperation {\n   }\n \n   /**\n-   * Constructs and returns a shared index informer with resync period specified. And the\n-   * informer cache will be overwritten.\n+   * Constructs and returns a shared index informer with resync period specified.\n    *\n    * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA4NTU2NQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546085565", "bodyText": "Why is the plural set here and not in other instances?", "author": "metacosm", "createdAt": "2020-12-18T20:53:51Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java", "diffHunk": "@@ -82,58 +79,57 @@ public SharedInformerFactory(ExecutorService threadPool, OkHttpClient okHttpClie\n    * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n    *\n    * @param apiTypeClass apiType class\n-   * @param apiListTypeClass api list type class\n    * @param resyncPeriodInMillis resync period in milliseconds\n-   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n-   * @param <L> the type's list parameter (should extend {@link io.fabric8.kubernetes.api.model.KubernetesResourceList}\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced}) if Namespace scoped resource\n    * @return the shared index informer\n    */\n-  public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, Class<L> apiListTypeClass, long resyncPeriodInMillis) {\n-    return sharedIndexInformerFor(apiTypeClass, apiListTypeClass, context.withApiGroupName(Utils.getAnnotationValue(apiTypeClass, Group.class))\n-      .withApiGroupVersion(Utils.getAnnotationValue(apiTypeClass, Version.class))\n-      .withPlural(getPluralFromKind(apiTypeClass.getSimpleName()))\n-      .withIsNamespaceConfiguredFromGlobalConfig(context.isNamespaceFromGlobalConfig()), resyncPeriodInMillis);\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, KubernetesResourceUtil.inferListType(apiTypeClass), null, resyncPeriodInMillis);\n   }\n \n   /**\n-   * Constructs and returns a shared index informer with resync period specified for custom resources.\n+   * Constructs and returns a shared index informer with resync period specified. And the\n+   * informer cache will be overwritten.\n    *\n    * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n    *\n-   * @param customResourceContext basic information about the Custom Resource Definition corresponding to that custom resource\n    * @param apiTypeClass apiType class\n-   * @param apiListTypeClass api list type class\n+   * @param operationContext {@link OperationContext} Operation Context\n    * @param resyncPeriodInMillis resync period in milliseconds\n-   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n-   * @param <L> the type's list parameter (should extend {@link io.fabric8.kubernetes.api.model.KubernetesResourceList}\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced}) if Namespace scoped resource\n    * @return the shared index informer\n    */\n-  public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerForCustomResource(CustomResourceDefinitionContext customResourceContext, Class<T> apiTypeClass, Class<L> apiListTypeClass, long resyncPeriodInMillis) {\n-    return sharedIndexInformerFor(apiTypeClass, apiListTypeClass, context.withApiGroupVersion(customResourceContext.getVersion())\n-      .withApiGroupName(customResourceContext.getGroup())\n-      .withPlural(customResourceContext.getPlural())\n-      .withIsNamespaceConfiguredFromGlobalConfig(context.isNamespaceFromGlobalConfig()), resyncPeriodInMillis);\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, OperationContext operationContext, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, KubernetesResourceUtil.inferListType(apiTypeClass), operationContext, resyncPeriodInMillis);\n   }\n \n   /**\n-   * Constructs and returns a shared index informer with resync period specified for custom resources. You can use this\n-   * method to specify namespace in {@link OperationContext} if you want to monitor for events in a dedicated namespace\n-   * only or provide other filtering options.\n+   * Constructs and returns a shared index informer with resync period specified for custom resources. Note that\n+   * {@link CustomResourceDefinitionContext} would be build using opinionated defaults by inspecting the ApiType\n+   * POJO\n    *\n-   * @param customResourceContext basic information about the Custom Resource Definition corresponding to that custom resource\n    * @param apiTypeClass apiType class\n-   * @param apiListTypeClass api list type class\n    * @param operationContext operation context\n    * @param resyncPeriodInMillis resync period in milliseconds\n+   * @param <T> the type parameter (should extend {@link CustomResource} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n+   * @return the shared index informer\n+   */\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerForCustomResource(Class<T> apiTypeClass, OperationContext operationContext, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, CustomResourceOperationsImpl.inferListType(apiTypeClass), operationContext.withPlural(CustomResourceDefinitionContext.fromCustomResourceType(apiTypeClass).getPlural()), resyncPeriodInMillis);", "originalCommit": "31ca3a338f9bd753c426d586693b493b00338193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39bf5f195197396cf565b52af734b2ca51546354", "chunk": "diff --git a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\nindex 081b49a0c..3ff995476 100644\n--- a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\n+++ b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\n\n@@ -88,8 +114,7 @@ public class SharedInformerFactory extends BaseOperation {\n   }\n \n   /**\n-   * Constructs and returns a shared index informer with resync period specified. And the\n-   * informer cache will be overwritten.\n+   * Constructs and returns a shared index informer with resync period specified.\n    *\n    * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA4NTc0MA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546085740", "bodyText": "Same as above: not sure we need to detail the implementation here.", "author": "metacosm", "createdAt": "2020-12-18T20:54:20Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java", "diffHunk": "@@ -82,58 +79,57 @@ public SharedInformerFactory(ExecutorService threadPool, OkHttpClient okHttpClie\n    * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n    *\n    * @param apiTypeClass apiType class\n-   * @param apiListTypeClass api list type class\n    * @param resyncPeriodInMillis resync period in milliseconds\n-   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n-   * @param <L> the type's list parameter (should extend {@link io.fabric8.kubernetes.api.model.KubernetesResourceList}\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced}) if Namespace scoped resource\n    * @return the shared index informer\n    */\n-  public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, Class<L> apiListTypeClass, long resyncPeriodInMillis) {\n-    return sharedIndexInformerFor(apiTypeClass, apiListTypeClass, context.withApiGroupName(Utils.getAnnotationValue(apiTypeClass, Group.class))\n-      .withApiGroupVersion(Utils.getAnnotationValue(apiTypeClass, Version.class))\n-      .withPlural(getPluralFromKind(apiTypeClass.getSimpleName()))\n-      .withIsNamespaceConfiguredFromGlobalConfig(context.isNamespaceFromGlobalConfig()), resyncPeriodInMillis);\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, KubernetesResourceUtil.inferListType(apiTypeClass), null, resyncPeriodInMillis);\n   }\n \n   /**\n-   * Constructs and returns a shared index informer with resync period specified for custom resources.\n+   * Constructs and returns a shared index informer with resync period specified. And the\n+   * informer cache will be overwritten.\n    *\n    * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n    *\n-   * @param customResourceContext basic information about the Custom Resource Definition corresponding to that custom resource\n    * @param apiTypeClass apiType class\n-   * @param apiListTypeClass api list type class\n+   * @param operationContext {@link OperationContext} Operation Context\n    * @param resyncPeriodInMillis resync period in milliseconds\n-   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n-   * @param <L> the type's list parameter (should extend {@link io.fabric8.kubernetes.api.model.KubernetesResourceList}\n+   * @param <T> the type parameter (should extend {@link io.fabric8.kubernetes.api.model.HasMetadata} and implement {@link io.fabric8.kubernetes.api.model.Namespaced}) if Namespace scoped resource\n    * @return the shared index informer\n    */\n-  public synchronized <T extends HasMetadata, L extends KubernetesResourceList<T>> SharedIndexInformer<T> sharedIndexInformerForCustomResource(CustomResourceDefinitionContext customResourceContext, Class<T> apiTypeClass, Class<L> apiListTypeClass, long resyncPeriodInMillis) {\n-    return sharedIndexInformerFor(apiTypeClass, apiListTypeClass, context.withApiGroupVersion(customResourceContext.getVersion())\n-      .withApiGroupName(customResourceContext.getGroup())\n-      .withPlural(customResourceContext.getPlural())\n-      .withIsNamespaceConfiguredFromGlobalConfig(context.isNamespaceFromGlobalConfig()), resyncPeriodInMillis);\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerFor(Class<T> apiTypeClass, OperationContext operationContext, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, KubernetesResourceUtil.inferListType(apiTypeClass), operationContext, resyncPeriodInMillis);\n   }\n \n   /**\n-   * Constructs and returns a shared index informer with resync period specified for custom resources. You can use this\n-   * method to specify namespace in {@link OperationContext} if you want to monitor for events in a dedicated namespace\n-   * only or provide other filtering options.\n+   * Constructs and returns a shared index informer with resync period specified for custom resources. Note that\n+   * {@link CustomResourceDefinitionContext} would be build using opinionated defaults by inspecting the ApiType\n+   * POJO\n    *\n-   * @param customResourceContext basic information about the Custom Resource Definition corresponding to that custom resource\n    * @param apiTypeClass apiType class\n-   * @param apiListTypeClass api list type class\n    * @param operationContext operation context\n    * @param resyncPeriodInMillis resync period in milliseconds\n+   * @param <T> the type parameter (should extend {@link CustomResource} and implement {@link io.fabric8.kubernetes.api.model.Namespaced})\n+   * @return the shared index informer\n+   */\n+  public synchronized <T extends HasMetadata> SharedIndexInformer<T> sharedIndexInformerForCustomResource(Class<T> apiTypeClass, OperationContext operationContext, long resyncPeriodInMillis) {\n+    return sharedIndexInformerFor(apiTypeClass, CustomResourceOperationsImpl.inferListType(apiTypeClass), operationContext.withPlural(CustomResourceDefinitionContext.fromCustomResourceType(apiTypeClass).getPlural()), resyncPeriodInMillis);\n+  }\n+\n+  /**\n+   * Constructs and returns a shared index informer with resync period specified for custom resources. Note that\n+   * {@link CustomResourceDefinitionContext} would be build using opinionated defaults by inspecting the ApiType", "originalCommit": "31ca3a338f9bd753c426d586693b493b00338193", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39bf5f195197396cf565b52af734b2ca51546354", "chunk": "diff --git a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\nindex 081b49a0c..3ff995476 100644\n--- a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\n+++ b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\n\n@@ -88,8 +114,7 @@ public class SharedInformerFactory extends BaseOperation {\n   }\n \n   /**\n-   * Constructs and returns a shared index informer with resync period specified. And the\n-   * informer cache will be overwritten.\n+   * Constructs and returns a shared index informer with resync period specified.\n    *\n    * <b>Note:</b>It watches for events in <b>ALL NAMESPACES</b>.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA4ODE2Mw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546088163", "bodyText": "Is that needed?", "author": "metacosm", "createdAt": "2020-12-18T21:00:04Z", "path": "kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/crds/Dummy.java", "diffHunk": "@@ -20,10 +20,13 @@\n import io.fabric8.kubernetes.client.CustomResource;\n import io.fabric8.kubernetes.model.annotation.Group;\n import io.fabric8.kubernetes.model.annotation.Version;\n+import io.fabric8.kubernetes.model.annotation.Plural;\n \n @Version(Dummy.VERSION)\n @Group(Dummy.GROUP)\n+@Plural(Dummy.PLURAL)", "originalCommit": "31ca3a338f9bd753c426d586693b493b00338193", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzMTkxOA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546531918", "bodyText": "I was using Utils.getPluralFromKind for resolving plural which wasn't handling it. I've changed informers to use Pluralize.toPlural instead which now handle this case", "author": "rohanKanojia", "createdAt": "2020-12-21T06:32:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA4ODE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5MDMwOA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546590308", "bodyText": "The problem is that this logic should be taken from CustomResource so that we don't have several different implementations that more or less do the same thing albeit sightly differently.  Similarly, there should be only one method that does the pluralization and everything should use it instead of having 2 different methods.", "author": "metacosm", "createdAt": "2020-12-21T09:11:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA4ODE2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "39bf5f195197396cf565b52af734b2ca51546354", "chunk": "diff --git a/kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/crds/Dummy.java b/kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/crds/Dummy.java\nindex e4f558963..a65f1de0a 100644\n--- a/kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/crds/Dummy.java\n+++ b/kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples/crds/Dummy.java\n\n@@ -20,13 +20,10 @@ import io.fabric8.kubernetes.api.model.Namespaced;\n import io.fabric8.kubernetes.client.CustomResource;\n import io.fabric8.kubernetes.model.annotation.Group;\n import io.fabric8.kubernetes.model.annotation.Version;\n-import io.fabric8.kubernetes.model.annotation.Plural;\n \n @Version(Dummy.VERSION)\n @Group(Dummy.GROUP)\n-@Plural(Dummy.PLURAL)\n public class Dummy extends CustomResource<DummySpec, KubernetesResource> implements Namespaced {\n   public static final String GROUP = \"demo.fabric8.io\";\n   public static final String VERSION = \"v1\";\n-  public static final String PLURAL = \"dummies\";\n }\n"}}, {"oid": "39bf5f195197396cf565b52af734b2ca51546354", "url": "https://github.com/fabric8io/kubernetes-client/commit/39bf5f195197396cf565b52af734b2ca51546354", "message": "Add inNamespace() and withName() methods in SharedInformerFactory\n\nSharedInformerFactory should provide inNamespace() and withName()\nmethods to configure namespace and name of resource rather than\nmaking user provide OperationContext for namespace/name configuration", "committedDate": "2020-12-21T06:34:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5NDk3Mw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546594973", "bodyText": "That should really be: CustomResource.getPlural(apiTypeClass). The problem, though, is that this requires apiTypeClass to extend CustomResource, which is why I tend to think that the logic for these methods should maybe be moved to HasMetadata. Either that, or make these informers methods take a CustomResource instance?\nThe problem with the logic above is that potentially the class has been annotated with @Singular which means that the singular version might not be equal to kind. The class might also have been annotated with @Plural in which case, that value should be used and not some other computation\u2026", "author": "metacosm", "createdAt": "2020-12-21T09:21:36Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java", "diffHunk": "@@ -275,6 +268,6 @@ private void initOperationContext(Config configuration) {\n     if (CustomResource.class.isAssignableFrom(apiTypeClass)) {\n       return CustomResourceDefinitionContext.fromCustomResourceType(apiTypeClass).getPlural();\n     }\n-    return getPluralFromKind(HasMetadata.getKind(apiTypeClass));\n+    return Pluralize.toPlural(HasMetadata.getKind(apiTypeClass)).toLowerCase();", "originalCommit": "a9bda082fe43e77f0552e687a3392b9ec9513cfc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzOTI3Mw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2667#discussion_r546639273", "bodyText": "Yes, I think you're right. We should update sharedIndexInformerForCustomResource to use CustomResource instead. I'll update this.", "author": "rohanKanojia", "createdAt": "2020-12-21T10:53:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5NDk3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f28b2ad3c9454b663306b7f777b2b03aae9abb7e", "chunk": "diff --git a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\nindex 3b85fb3fc..1fa4e3ffa 100644\n--- a/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\n+++ b/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/SharedInformerFactory.java\n\n@@ -266,7 +325,7 @@ public class SharedInformerFactory extends BaseOperation {\n \n   private <T extends HasMetadata> String resolvePlural(Class<T> apiTypeClass) {\n     if (CustomResource.class.isAssignableFrom(apiTypeClass)) {\n-      return CustomResourceDefinitionContext.fromCustomResourceType(apiTypeClass).getPlural();\n+      return CustomResource.getPlural((Class<? extends CustomResource>)apiTypeClass);\n     }\n     return Pluralize.toPlural(HasMetadata.getKind(apiTypeClass)).toLowerCase();\n   }\n"}}, {"oid": "f28b2ad3c9454b663306b7f777b2b03aae9abb7e", "url": "https://github.com/fabric8io/kubernetes-client/commit/f28b2ad3c9454b663306b7f777b2b03aae9abb7e", "message": "SharedInformerFactory custom resource methods use CustomResource\n\n+ Update SharedInformerFactory.sharedIndexInformerForCustomResource to\n  use CustomResource rather than HasMetadata\n+ Use CustomResource.getPlural method for resolving CustomResource\n  plurals from type\n+ Revert removal of sharedIndexInformerForCustomResource List type\n  methods\n+ Document changes in SharedInformer API in migration guide", "committedDate": "2020-12-21T12:46:23Z", "type": "forcePushed"}, {"oid": "6423bb939cbbb632f17c48d5919f731b01dd6490", "url": "https://github.com/fabric8io/kubernetes-client/commit/6423bb939cbbb632f17c48d5919f731b01dd6490", "message": "Fix #2666: Align SharedIndexInformer API with Custom Resource Improvements\n\nAdd support for autodetecting CustomResourceDefinitionContext and *List\ntypes in SharedIndexInformer API just like we do in our improved\nCustomResource APIs.", "committedDate": "2021-02-11T16:56:27Z", "type": "commit"}, {"oid": "b676228a4b5db73b0c9adb5393b6c8bf0de8a2f8", "url": "https://github.com/fabric8io/kubernetes-client/commit/b676228a4b5db73b0c9adb5393b6c8bf0de8a2f8", "message": "Update KubernetesResourceUtil.inferListType and Animal CRD with new CRD improvements", "committedDate": "2021-02-11T16:56:27Z", "type": "commit"}, {"oid": "6ebc28a54993a8a5420ae5d70bc0d800316623a5", "url": "https://github.com/fabric8io/kubernetes-client/commit/6ebc28a54993a8a5420ae5d70bc0d800316623a5", "message": "Refactor DefaultSharedIndexInformerTest to use @BeforeEach/@AfterEach\n\nReduce code duplication by adding setup/teardown methods", "committedDate": "2021-02-11T16:56:27Z", "type": "commit"}, {"oid": "496f0b7d39071dbb9ce9646c757c0fad20259534", "url": "https://github.com/fabric8io/kubernetes-client/commit/496f0b7d39071dbb9ce9646c757c0fad20259534", "message": "refactor: try to chain more methods, use HasMetadata methods", "committedDate": "2021-02-11T16:59:11Z", "type": "commit"}, {"oid": "4f960a6ce25737847c39faccdcdce1eba9739a16", "url": "https://github.com/fabric8io/kubernetes-client/commit/4f960a6ce25737847c39faccdcdce1eba9739a16", "message": "Remove old Informer methods and replace with more readable methods\n\nNow with CustomResource improvements we no longer need informer methods\nin SharedInformerFactory to require list types and\nCustomResourceDefinitionContext", "committedDate": "2021-02-11T17:00:08Z", "type": "commit"}, {"oid": "33626fd7d86661615d3cbffc9517957a2d0ecd41", "url": "https://github.com/fabric8io/kubernetes-client/commit/33626fd7d86661615d3cbffc9517957a2d0ecd41", "message": "Refactor SharedInformerFactory#registerKindToKubernetesDeserializer\n\nSharedInformerFactory#registerKindToKubernetesDeserializer should infer\napiVersion from POJO itself. We only need to register in case of custom\nresources", "committedDate": "2021-02-11T17:00:12Z", "type": "commit"}, {"oid": "6c665fc7484697039aae592142f51b6baf5a7aed", "url": "https://github.com/fabric8io/kubernetes-client/commit/6c665fc7484697039aae592142f51b6baf5a7aed", "message": "Improve Informer Docs and remove plural from Dummy CRD POJO\n\n+ Address Informer Docs suggestions\n+ Use Pluralize.toPlural() to resolving plural instead\n+ Remove implementation details from javadocs", "committedDate": "2021-02-11T17:00:38Z", "type": "commit"}, {"oid": "d235d72d7cf4a7f6330c0cd1ba1e1465f2275c23", "url": "https://github.com/fabric8io/kubernetes-client/commit/d235d72d7cf4a7f6330c0cd1ba1e1465f2275c23", "message": "Add inNamespace() and withName() methods in SharedInformerFactory\n\nSharedInformerFactory should provide inNamespace() and withName()\nmethods to configure namespace and name of resource rather than\nmaking user provide OperationContext for namespace/name configuration", "committedDate": "2021-02-11T17:00:40Z", "type": "commit"}, {"oid": "9f50f5420d66934d91db4c3b090d33af23006105", "url": "https://github.com/fabric8io/kubernetes-client/commit/9f50f5420d66934d91db4c3b090d33af23006105", "message": "SharedInformerFactory custom resource methods use CustomResource\n\n+ Update SharedInformerFactory.sharedIndexInformerForCustomResource to\n  use CustomResource rather than HasMetadata\n+ Use CustomResource.getPlural method for resolving CustomResource\n  plurals from type\n+ Revert removal of sharedIndexInformerForCustomResource List type\n  methods\n+ Document changes in SharedInformer API in migration guide", "committedDate": "2021-02-11T17:02:50Z", "type": "commit"}, {"oid": "9f50f5420d66934d91db4c3b090d33af23006105", "url": "https://github.com/fabric8io/kubernetes-client/commit/9f50f5420d66934d91db4c3b090d33af23006105", "message": "SharedInformerFactory custom resource methods use CustomResource\n\n+ Update SharedInformerFactory.sharedIndexInformerForCustomResource to\n  use CustomResource rather than HasMetadata\n+ Use CustomResource.getPlural method for resolving CustomResource\n  plurals from type\n+ Revert removal of sharedIndexInformerForCustomResource List type\n  methods\n+ Document changes in SharedInformer API in migration guide", "committedDate": "2021-02-11T17:02:50Z", "type": "forcePushed"}, {"oid": "e80b5093e36d509beccd7aede323a08b00e3ae3d", "url": "https://github.com/fabric8io/kubernetes-client/commit/e80b5093e36d509beccd7aede323a08b00e3ae3d", "message": "refactor: make getPlural/Singular work with HasMetadata classes\n\nThere is really no need to restrict these methods to CustomResource only\nand maybe we should consider moving them to HasMetadata?", "committedDate": "2021-02-11T17:20:37Z", "type": "commit"}, {"oid": "ffc66d3aa2ef9e8b2e071e7ef3b09035e90b427a", "url": "https://github.com/fabric8io/kubernetes-client/commit/ffc66d3aa2ef9e8b2e071e7ef3b09035e90b427a", "message": "refactor: unify inferListType methods", "committedDate": "2021-02-11T19:23:45Z", "type": "commit"}, {"oid": "becf84d3181a29b34788b1113b3b26206a6ad167", "url": "https://github.com/fabric8io/kubernetes-client/commit/becf84d3181a29b34788b1113b3b26206a6ad167", "message": "refactor: remove unneeded list classes, simplify tests setup", "committedDate": "2021-02-11T20:28:51Z", "type": "commit"}, {"oid": "62ae8d3fc921ce17f9bc8dff74e8ea23ae272b32", "url": "https://github.com/fabric8io/kubernetes-client/commit/62ae8d3fc921ce17f9bc8dff74e8ea23ae272b32", "message": "refactor: simplify informers for custom resources", "committedDate": "2021-02-11T21:14:31Z", "type": "commit"}, {"oid": "e319a6b08a5835c78dcc23750518640ea4d56ccf", "url": "https://github.com/fabric8io/kubernetes-client/commit/e319a6b08a5835c78dcc23750518640ea4d56ccf", "message": "fix: missing changes after merge", "committedDate": "2021-02-11T21:53:45Z", "type": "commit"}, {"oid": "c94d7cdc1e5e5e5d076ba222f8871294e3704b1e", "url": "https://github.com/fabric8io/kubernetes-client/commit/c94d7cdc1e5e5e5d076ba222f8871294e3704b1e", "message": "fix: return CustomResourceList if no specific list is found\n\nReturning KubernetesResourceList results in the list type not being\nregistered by KubernetesDeserializer and thus, generic lists not being\ndeserialized.", "committedDate": "2021-02-12T16:32:43Z", "type": "commit"}, {"oid": "6cd6618c45993a53b2b0be31ce95a89c3dd33c57", "url": "https://github.com/fabric8io/kubernetes-client/commit/6cd6618c45993a53b2b0be31ce95a89c3dd33c57", "message": "fix: merge errors", "committedDate": "2021-02-12T17:03:49Z", "type": "commit"}, {"oid": "9814fd9a81d274588410bea2c82655e103d19947", "url": "https://github.com/fabric8io/kubernetes-client/commit/9814fd9a81d274588410bea2c82655e103d19947", "message": "fix: test", "committedDate": "2021-02-12T17:36:01Z", "type": "commit"}]}