{"pr_number": 207, "pr_title": "Add methods to get the ModContainer which as provided an entrypoint", "pr_createdAt": "2020-03-01T19:15:03Z", "pr_url": "https://github.com/FabricMC/fabric-loader/pull/207", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0ODQ5NA==", "url": "https://github.com/FabricMC/fabric-loader/pull/207#discussion_r386148494", "bodyText": "Why? Just create an entrypoint exception right here than passing an entry set.", "author": "liach", "createdAt": "2020-03-01T22:48:55Z", "path": "src/main/java/net/fabricmc/loader/EntrypointStorage.java", "diffHunk": "@@ -145,20 +157,39 @@ boolean hasEntrypoints(String key) {\n \t\t\t\t\tresults.add(result);\n \t\t\t\t}\n \t\t\t} catch (Throwable t) {\n-\t\t\t\terrors.add(t);\n+\t\t\t\terrors.put(entry, t);", "originalCommit": "57f92e290fbf8d70a6e64122097716081f387703", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5f067e3f1460f93486e1a301e6b8a7e0dbbf8f7", "chunk": "diff --git a/src/main/java/net/fabricmc/loader/EntrypointStorage.java b/src/main/java/net/fabricmc/loader/EntrypointStorage.java\nindex f9c8460..97cf4d9 100644\n--- a/src/main/java/net/fabricmc/loader/EntrypointStorage.java\n+++ b/src/main/java/net/fabricmc/loader/EntrypointStorage.java\n\n@@ -157,15 +160,19 @@ class EntrypointStorage {\n \t\t\t\t\tresults.add(result);\n \t\t\t\t}\n \t\t\t} catch (Throwable t) {\n-\t\t\t\terrors.put(entry, t);\n+\t\t\t\tif (errors.isEmpty()) {\n+\t\t\t\t\trootErrorCause = entry.getModContainer();\n+\t\t\t\t}\n+\t\t\t\terrors.add(t);\n \t\t\t}\n \t\t}\n \n \t\tif (!errors.isEmpty()) {\n-\t\t\tEntrypointException e = new EntrypointException(\"Could not look up entries for entrypoint \" + key + \"!\");\n+\t\t\tIterator<Throwable> it = errors.iterator();\n+\t\t\tEntrypointException e = new EntrypointException(key, rootErrorCause.getMetadata().getId(), it.next());\n \n-\t\t\tfor (Map.Entry<Entry, Throwable> suppressed : errors.entrySet()) {\n-\t\t\t\te.addSuppressed(new EntrypointException(\"Caused by mod: '\" + suppressed.getKey().getModContainer().getMetadata().getId() + \"' \", suppressed.getValue()));\n+\t\t\twhile (it.hasNext()) {\n+\t\t\t\te.addSuppressed(it.next());\n \t\t\t}\n \n \t\t\tthrow e;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0ODUxMw==", "url": "https://github.com/FabricMC/fabric-loader/pull/207#discussion_r386148513", "bodyText": "You should integrate the changes in #180 and add the other exceptions as suppressed by the first one.", "author": "liach", "createdAt": "2020-03-01T22:49:19Z", "path": "src/main/java/net/fabricmc/loader/EntrypointStorage.java", "diffHunk": "@@ -145,20 +157,39 @@ boolean hasEntrypoints(String key) {\n \t\t\t\t\tresults.add(result);\n \t\t\t\t}\n \t\t\t} catch (Throwable t) {\n-\t\t\t\terrors.add(t);\n+\t\t\t\terrors.put(entry, t);\n \t\t\t}\n \t\t}\n \n \t\tif (!errors.isEmpty()) {\n \t\t\tEntrypointException e = new EntrypointException(\"Could not look up entries for entrypoint \" + key + \"!\");\n \n-\t\t\tfor (Throwable suppressed : errors) {\n-\t\t\t\te.addSuppressed(suppressed);\n+\t\t\tfor (Map.Entry<Entry, Throwable> suppressed : errors.entrySet()) {\n+\t\t\t\te.addSuppressed(new EntrypointException(\"Caused by mod: '\" + suppressed.getKey().getModContainer().getMetadata().getId() + \"' \", suppressed.getValue()));", "originalCommit": "57f92e290fbf8d70a6e64122097716081f387703", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5f067e3f1460f93486e1a301e6b8a7e0dbbf8f7", "chunk": "diff --git a/src/main/java/net/fabricmc/loader/EntrypointStorage.java b/src/main/java/net/fabricmc/loader/EntrypointStorage.java\nindex f9c8460..97cf4d9 100644\n--- a/src/main/java/net/fabricmc/loader/EntrypointStorage.java\n+++ b/src/main/java/net/fabricmc/loader/EntrypointStorage.java\n\n@@ -157,15 +160,19 @@ class EntrypointStorage {\n \t\t\t\t\tresults.add(result);\n \t\t\t\t}\n \t\t\t} catch (Throwable t) {\n-\t\t\t\terrors.put(entry, t);\n+\t\t\t\tif (errors.isEmpty()) {\n+\t\t\t\t\trootErrorCause = entry.getModContainer();\n+\t\t\t\t}\n+\t\t\t\terrors.add(t);\n \t\t\t}\n \t\t}\n \n \t\tif (!errors.isEmpty()) {\n-\t\t\tEntrypointException e = new EntrypointException(\"Could not look up entries for entrypoint \" + key + \"!\");\n+\t\t\tIterator<Throwable> it = errors.iterator();\n+\t\t\tEntrypointException e = new EntrypointException(key, rootErrorCause.getMetadata().getId(), it.next());\n \n-\t\t\tfor (Map.Entry<Entry, Throwable> suppressed : errors.entrySet()) {\n-\t\t\t\te.addSuppressed(new EntrypointException(\"Caused by mod: '\" + suppressed.getKey().getModContainer().getMetadata().getId() + \"' \", suppressed.getValue()));\n+\t\t\twhile (it.hasNext()) {\n+\t\t\t\te.addSuppressed(it.next());\n \t\t\t}\n \n \t\t\tthrow e;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0ODU1Mw==", "url": "https://github.com/FabricMC/fabric-loader/pull/207#discussion_r386148553", "bodyText": "Will this be too slow time-wise? How costly memory-wise is it to track in a hash map instead?", "author": "liach", "createdAt": "2020-03-01T22:49:57Z", "path": "src/main/java/net/fabricmc/loader/EntrypointStorage.java", "diffHunk": "@@ -145,20 +157,39 @@ boolean hasEntrypoints(String key) {\n \t\t\t\t\tresults.add(result);\n \t\t\t\t}\n \t\t\t} catch (Throwable t) {\n-\t\t\t\terrors.add(t);\n+\t\t\t\terrors.put(entry, t);\n \t\t\t}\n \t\t}\n \n \t\tif (!errors.isEmpty()) {\n \t\t\tEntrypointException e = new EntrypointException(\"Could not look up entries for entrypoint \" + key + \"!\");\n \n-\t\t\tfor (Throwable suppressed : errors) {\n-\t\t\t\te.addSuppressed(suppressed);\n+\t\t\tfor (Map.Entry<Entry, Throwable> suppressed : errors.entrySet()) {\n+\t\t\t\te.addSuppressed(new EntrypointException(\"Caused by mod: '\" + suppressed.getKey().getModContainer().getMetadata().getId() + \"' \", suppressed.getValue()));\n \t\t\t}\n \n \t\t\tthrow e;\n \t\t} else {\n \t\t\treturn results;\n \t\t}\n \t}\n+\n+\tModContainer getContainerFromEntrypoint(Object entrypoint) {\n+\t\tfor (Map.Entry<String, List<Entry>> entrypointList : entryMap.entrySet()) {", "originalCommit": "57f92e290fbf8d70a6e64122097716081f387703", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5f067e3f1460f93486e1a301e6b8a7e0dbbf8f7", "chunk": "diff --git a/src/main/java/net/fabricmc/loader/EntrypointStorage.java b/src/main/java/net/fabricmc/loader/EntrypointStorage.java\nindex f9c8460..97cf4d9 100644\n--- a/src/main/java/net/fabricmc/loader/EntrypointStorage.java\n+++ b/src/main/java/net/fabricmc/loader/EntrypointStorage.java\n\n@@ -157,15 +160,19 @@ class EntrypointStorage {\n \t\t\t\t\tresults.add(result);\n \t\t\t\t}\n \t\t\t} catch (Throwable t) {\n-\t\t\t\terrors.put(entry, t);\n+\t\t\t\tif (errors.isEmpty()) {\n+\t\t\t\t\trootErrorCause = entry.getModContainer();\n+\t\t\t\t}\n+\t\t\t\terrors.add(t);\n \t\t\t}\n \t\t}\n \n \t\tif (!errors.isEmpty()) {\n-\t\t\tEntrypointException e = new EntrypointException(\"Could not look up entries for entrypoint \" + key + \"!\");\n+\t\t\tIterator<Throwable> it = errors.iterator();\n+\t\t\tEntrypointException e = new EntrypointException(key, rootErrorCause.getMetadata().getId(), it.next());\n \n-\t\t\tfor (Map.Entry<Entry, Throwable> suppressed : errors.entrySet()) {\n-\t\t\t\te.addSuppressed(new EntrypointException(\"Caused by mod: '\" + suppressed.getKey().getModContainer().getMetadata().getId() + \"' \", suppressed.getValue()));\n+\t\t\twhile (it.hasNext()) {\n+\t\t\t\te.addSuppressed(it.next());\n \t\t\t}\n \n \t\t\tthrow e;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0ODYyNg==", "url": "https://github.com/FabricMC/fabric-loader/pull/207#discussion_r386148626", "bodyText": "Also see #180, don't create a runtime exception out of the loop", "author": "liach", "createdAt": "2020-03-01T22:50:41Z", "path": "src/main/java/net/fabricmc/loader/entrypoint/minecraft/hooks/EntrypointUtils.java", "diffHunk": "@@ -39,25 +42,43 @@\n \t\t@SuppressWarnings(\"deprecation\")\n \t\tFabricLoader loader = FabricLoader.INSTANCE;\n \t\tCollection<T> entrypoints = loader.getEntrypoints(name, type);\n-\t\tList<Throwable> errors = new ArrayList<>();\n+\t\tMap<ModContainer, List<Throwable>> errors = new HashMap<>();\n \n \t\tloader.getLogger().debug(\"Iterating over entrypoint '\" + name + \"'\");\n \n \t\tfor (T e : entrypoints) {\n \t\t\ttry {\n \t\t\t\tinvoker.accept(e);\n \t\t\t} catch (Throwable t) {\n-\t\t\t\terrors.add(t);\n+\t\t\t\terrors.computeIfAbsent(loader.getEntrypointProvider(e).orElse(null), k -> new ArrayList<>()).add(t);\n \t\t\t}\n \t\t}\n \n \t\tif (!errors.isEmpty()) {\n \t\t\tRuntimeException exception = new RuntimeException(\"Could not execute entrypoint stage '\" + name + \"' due to errors!\");\n \n-\t\t\tfor (Throwable t : errors) {\n-\t\t\t\texception.addSuppressed(t);\n+\t\t\tfor (Map.Entry<ModContainer, List<Throwable>> modContainerListEntry : errors.entrySet()) {\n+\t\t\t\tif (modContainerListEntry.getKey() == null) {\n+\t\t\t\t\tcontinue; // We do these at the end.\n+\t\t\t\t}\n+\n+\t\t\t\tRuntimeException modException = new RuntimeException(\"Caused by mod: '\" + modContainerListEntry.getKey().getMetadata().getId() + \"' \");", "originalCommit": "57f92e290fbf8d70a6e64122097716081f387703", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5f067e3f1460f93486e1a301e6b8a7e0dbbf8f7", "chunk": "diff --git a/src/main/java/net/fabricmc/loader/entrypoint/minecraft/hooks/EntrypointUtils.java b/src/main/java/net/fabricmc/loader/entrypoint/minecraft/hooks/EntrypointUtils.java\nindex 8e97c4a..d9c9d55 100644\n--- a/src/main/java/net/fabricmc/loader/entrypoint/minecraft/hooks/EntrypointUtils.java\n+++ b/src/main/java/net/fabricmc/loader/entrypoint/minecraft/hooks/EntrypointUtils.java\n\n@@ -41,44 +40,31 @@ public final class EntrypointUtils {\n \tprivate static <T> void invoke0(String name, Class<T> type, Consumer<? super T> invoker) {\n \t\t@SuppressWarnings(\"deprecation\")\n \t\tFabricLoader loader = FabricLoader.INSTANCE;\n-\t\tCollection<T> entrypoints = loader.getEntrypoints(name, type);\n-\t\tMap<ModContainer, List<Throwable>> errors = new HashMap<>();\n+\t\tCollection<EntrypointContainer<T>> entrypoints = loader.getEntrypointContainers(name, type);\n+\t\tModContainer rootErrorCause = null;\n+\t\tList<Throwable> errors = new ArrayList<>();\n \n \t\tloader.getLogger().debug(\"Iterating over entrypoint '\" + name + \"'\");\n \n-\t\tfor (T e : entrypoints) {\n+\t\tfor (EntrypointContainer<T> container : entrypoints) {\n \t\t\ttry {\n-\t\t\t\tinvoker.accept(e);\n+\t\t\t\tinvoker.accept(container.getEntrypoint());\n \t\t\t} catch (Throwable t) {\n-\t\t\t\terrors.computeIfAbsent(loader.getEntrypointProvider(e).orElse(null), k -> new ArrayList<>()).add(t);\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (!errors.isEmpty()) {\n-\t\t\tRuntimeException exception = new RuntimeException(\"Could not execute entrypoint stage '\" + name + \"' due to errors!\");\n-\n-\t\t\tfor (Map.Entry<ModContainer, List<Throwable>> modContainerListEntry : errors.entrySet()) {\n-\t\t\t\tif (modContainerListEntry.getKey() == null) {\n-\t\t\t\t\tcontinue; // We do these at the end.\n+\t\t\t\tif (errors.isEmpty()) {\n+\t\t\t\t\trootErrorCause = container.getProvidingModContainer();\n \t\t\t\t}\n \n-\t\t\t\tRuntimeException modException = new RuntimeException(\"Caused by mod: '\" + modContainerListEntry.getKey().getMetadata().getId() + \"' \");\n-\n-\t\t\t\tfor (Throwable t : modContainerListEntry.getValue()) {\n-\t\t\t\t\tmodException.addSuppressed(t);\n-\t\t\t\t}\n-\n-\t\t\t\texception.addSuppressed(modException);\n+\t\t\t\terrors.add(t);\n \t\t\t}\n+\t\t}\n \n-\t\t\tRuntimeException ownerlessException = new RuntimeException(\"Could not find which mod was the source of these entrypoint errors:\");\n+\t\tif (!errors.isEmpty()) {\n+\t\t\tRuntimeException exception = new RuntimeException(\"Could not execute entrypoint stage '\" + name + \"' due to errors, provided by '\" + rootErrorCause.getMetadata().getId() + \"'!\");\n \n-\t\t\tfor (Throwable t : errors.get(null)) {\n-\t\t\t\townerlessException.addSuppressed(t);\n+\t\t\tfor (Throwable t : errors) {\n+\t\t\t\texception.addSuppressed(t);\n \t\t\t}\n \n-\t\t\texception.addSuppressed(ownerlessException);\n-\n \t\t\tthrow exception;\n \t\t}\n \t}\n"}}, {"oid": "a5f067e3f1460f93486e1a301e6b8a7e0dbbf8f7", "url": "https://github.com/FabricMC/fabric-loader/commit/a5f067e3f1460f93486e1a301e6b8a7e0dbbf8f7", "message": "Add methods to get the mod which provides an entrypoint.", "committedDate": "2020-03-02T01:16:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE5MDY3MQ==", "url": "https://github.com/FabricMC/fabric-loader/pull/207#discussion_r386190671", "bodyText": "maybe just return a list", "author": "liach", "createdAt": "2020-03-02T04:14:23Z", "path": "src/main/java/net/fabricmc/loader/api/FabricLoader.java", "diffHunk": "@@ -39,6 +40,8 @@ static FabricLoader getInstance() {\n \n \t<T> List<T> getEntrypoints(String key, Class<T> type);\n \n+\t<T> Collection<EntrypointContainer<T>> getEntrypointContainers(String key, Class<T> type);", "originalCommit": "338dcdbaeac97cda600c059b8e0b27cde257568d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3414781bdb0d4236652b6d49d6ea3148416b7840", "chunk": "diff --git a/src/main/java/net/fabricmc/loader/api/FabricLoader.java b/src/main/java/net/fabricmc/loader/api/FabricLoader.java\nindex 80cb90c..821bbec 100644\n--- a/src/main/java/net/fabricmc/loader/api/FabricLoader.java\n+++ b/src/main/java/net/fabricmc/loader/api/FabricLoader.java\n\n@@ -40,7 +40,7 @@ public interface FabricLoader {\n \n \t<T> List<T> getEntrypoints(String key, Class<T> type);\n \n-\t<T> Collection<EntrypointContainer<T>> getEntrypointContainers(String key, Class<T> type);\n+\t<T> List<EntrypointContainer<T>> getEntrypointContainers(String key, Class<T> type);\n \n \t/**\n \t * Get the current mapping resolver.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE5MDc0Ng==", "url": "https://github.com/FabricMC/fabric-loader/pull/207#discussion_r386190746", "bodyText": "ModContainer getProvider();", "author": "liach", "createdAt": "2020-03-02T04:14:49Z", "path": "src/main/java/net/fabricmc/loader/api/entrypoint/EntrypointContainer.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api.entrypoint;\n+\n+import net.fabricmc.loader.api.ModContainer;\n+\n+public interface EntrypointContainer<T> {\n+\tT getEntrypoint();\n+\n+\tModContainer getProvidingModContainer();", "originalCommit": "338dcdbaeac97cda600c059b8e0b27cde257568d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE5MTAwNQ==", "url": "https://github.com/FabricMC/fabric-loader/pull/207#discussion_r386191005", "bodyText": "Yea I was definitely unsure on the naming for that one", "author": "i509VCB", "createdAt": "2020-03-02T04:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE5MDc0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3414781bdb0d4236652b6d49d6ea3148416b7840", "chunk": "diff --git a/src/main/java/net/fabricmc/loader/api/entrypoint/EntrypointContainer.java b/src/main/java/net/fabricmc/loader/api/entrypoint/EntrypointContainer.java\nindex 092c7c5..3adcd88 100644\n--- a/src/main/java/net/fabricmc/loader/api/entrypoint/EntrypointContainer.java\n+++ b/src/main/java/net/fabricmc/loader/api/entrypoint/EntrypointContainer.java\n\n@@ -21,5 +21,5 @@ import net.fabricmc.loader.api.ModContainer;\n public interface EntrypointContainer<T> {\n \tT getEntrypoint();\n \n-\tModContainer getProvidingModContainer();\n+\tModContainer getProvider();\n }\n"}}, {"oid": "e2b2bec408ec81be6a228210830a09f906d9c658", "url": "https://github.com/FabricMC/fabric-loader/commit/e2b2bec408ec81be6a228210830a09f906d9c658", "message": "Add methods to get the mod which provides an entrypoint.", "committedDate": "2020-03-06T15:06:08Z", "type": "commit"}, {"oid": "55d5465bf0a1dec897dba6c7fcc47b80ba65748c", "url": "https://github.com/FabricMC/fabric-loader/commit/55d5465bf0a1dec897dba6c7fcc47b80ba65748c", "message": "Readding a EntrypointException ctor", "committedDate": "2020-03-06T15:07:26Z", "type": "commit"}, {"oid": "3414781bdb0d4236652b6d49d6ea3148416b7840", "url": "https://github.com/FabricMC/fabric-loader/commit/3414781bdb0d4236652b6d49d6ea3148416b7840", "message": "Some tiny renames", "committedDate": "2020-03-06T15:07:27Z", "type": "commit"}, {"oid": "be9174cf38eed64d1d33369ce31dc00c334ac5e3", "url": "https://github.com/FabricMC/fabric-loader/commit/be9174cf38eed64d1d33369ce31dc00c334ac5e3", "message": "Make exception handling more natural", "committedDate": "2020-03-06T15:07:27Z", "type": "commit"}, {"oid": "be9174cf38eed64d1d33369ce31dc00c334ac5e3", "url": "https://github.com/FabricMC/fabric-loader/commit/be9174cf38eed64d1d33369ce31dc00c334ac5e3", "message": "Make exception handling more natural", "committedDate": "2020-03-06T15:07:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyMTE4NQ==", "url": "https://github.com/FabricMC/fabric-loader/pull/207#discussion_r389121185", "bodyText": "Missing blank line above, better make this a single line if (..) ...", "author": "sfPlayer1", "createdAt": "2020-03-06T20:12:28Z", "path": "src/main/java/net/fabricmc/loader/EntrypointStorage.java", "diffHunk": "@@ -145,21 +159,48 @@ boolean hasEntrypoints(String key) {\n \t\t\t\t\tresults.add(result);\n \t\t\t\t}\n \t\t\t} catch (Throwable t) {\n-\t\t\t\terrors.add(t);\n+\t\t\t\tif (exception == null) {\n+\t\t\t\t\texception = new EntrypointException(key, entry.getModContainer().getMetadata().getId(), t);\n+\t\t\t\t} else {\n+\t\t\t\t\texception.addSuppressed(t);\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \n-\t\tif (!errors.isEmpty()) {\n-\t\t\tIterator<Throwable> it = errors.iterator();\n-\t\t\tEntrypointException e = new EntrypointException(key, it.next());\n+\t\tif (exception != null) {\n+\t\t\tthrow exception;\n+\t\t}\n+\n+\t\treturn results;\n+\t}\n \n-\t\t\twhile (it.hasNext()) {\n-\t\t\t\te.addSuppressed(it.next());\n+\tprotected <T> List<EntrypointContainer<T>> getEntrypointContainers(String key, Class<T> type) {\n+\t\tList<Entry> entries = entryMap.get(key);\n+\t\tif (entries == null) {", "originalCommit": "be9174cf38eed64d1d33369ce31dc00c334ac5e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "180376da2b243e8828986ae5b84b540ec13ef293", "chunk": "diff --git a/src/main/java/net/fabricmc/loader/EntrypointStorage.java b/src/main/java/net/fabricmc/loader/EntrypointStorage.java\nindex bbea566..8e127a3 100644\n--- a/src/main/java/net/fabricmc/loader/EntrypointStorage.java\n+++ b/src/main/java/net/fabricmc/loader/EntrypointStorage.java\n\n@@ -146,15 +146,16 @@ class EntrypointStorage {\n \n \tprotected <T> List<T> getEntrypoints(String key, Class<T> type) {\n \t\tList<Entry> entries = entryMap.get(key);\n-\t\tif (entries == null) {\n-\t\t\treturn Collections.emptyList();\n-\t\t}\n+\n+\t\tif (entries == null) return Collections.emptyList();\n \n \t\tEntrypointException exception = null;\n \t\tList<T> results = new ArrayList<>(entries.size());\n+\n \t\tfor (Entry entry : entries) {\n \t\t\ttry {\n \t\t\t\tT result = entry.getOrCreate(type);\n+\n \t\t\t\tif (result != null) {\n \t\t\t\t\tresults.add(result);\n \t\t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyMTIzMg==", "url": "https://github.com/FabricMC/fabric-loader/pull/207#discussion_r389121232", "bodyText": "missing blank above", "author": "sfPlayer1", "createdAt": "2020-03-06T20:12:36Z", "path": "src/main/java/net/fabricmc/loader/EntrypointStorage.java", "diffHunk": "@@ -145,21 +159,48 @@ boolean hasEntrypoints(String key) {\n \t\t\t\t\tresults.add(result);\n \t\t\t\t}\n \t\t\t} catch (Throwable t) {\n-\t\t\t\terrors.add(t);\n+\t\t\t\tif (exception == null) {\n+\t\t\t\t\texception = new EntrypointException(key, entry.getModContainer().getMetadata().getId(), t);\n+\t\t\t\t} else {\n+\t\t\t\t\texception.addSuppressed(t);\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \n-\t\tif (!errors.isEmpty()) {\n-\t\t\tIterator<Throwable> it = errors.iterator();\n-\t\t\tEntrypointException e = new EntrypointException(key, it.next());\n+\t\tif (exception != null) {\n+\t\t\tthrow exception;\n+\t\t}\n+\n+\t\treturn results;\n+\t}\n \n-\t\t\twhile (it.hasNext()) {\n-\t\t\t\te.addSuppressed(it.next());\n+\tprotected <T> List<EntrypointContainer<T>> getEntrypointContainers(String key, Class<T> type) {\n+\t\tList<Entry> entries = entryMap.get(key);\n+\t\tif (entries == null) {\n+\t\t\treturn Collections.emptyList();\n+\t\t}\n+\n+\t\tEntrypointException exception = null;\n+\t\tList<EntrypointContainer<T>> results = new ArrayList<>(entries.size());\n+\t\tfor (Entry entry : entries) {", "originalCommit": "be9174cf38eed64d1d33369ce31dc00c334ac5e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "180376da2b243e8828986ae5b84b540ec13ef293", "chunk": "diff --git a/src/main/java/net/fabricmc/loader/EntrypointStorage.java b/src/main/java/net/fabricmc/loader/EntrypointStorage.java\nindex bbea566..8e127a3 100644\n--- a/src/main/java/net/fabricmc/loader/EntrypointStorage.java\n+++ b/src/main/java/net/fabricmc/loader/EntrypointStorage.java\n\n@@ -146,15 +146,16 @@ class EntrypointStorage {\n \n \tprotected <T> List<T> getEntrypoints(String key, Class<T> type) {\n \t\tList<Entry> entries = entryMap.get(key);\n-\t\tif (entries == null) {\n-\t\t\treturn Collections.emptyList();\n-\t\t}\n+\n+\t\tif (entries == null) return Collections.emptyList();\n \n \t\tEntrypointException exception = null;\n \t\tList<T> results = new ArrayList<>(entries.size());\n+\n \t\tfor (Entry entry : entries) {\n \t\t\ttry {\n \t\t\t\tT result = entry.getOrCreate(type);\n+\n \t\t\t\tif (result != null) {\n \t\t\t\t\tresults.add(result);\n \t\t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyMTI5Nw==", "url": "https://github.com/FabricMC/fabric-loader/pull/207#discussion_r389121297", "bodyText": "missing blank above", "author": "sfPlayer1", "createdAt": "2020-03-06T20:12:48Z", "path": "src/main/java/net/fabricmc/loader/EntrypointStorage.java", "diffHunk": "@@ -145,21 +159,48 @@ boolean hasEntrypoints(String key) {\n \t\t\t\t\tresults.add(result);\n \t\t\t\t}\n \t\t\t} catch (Throwable t) {\n-\t\t\t\terrors.add(t);\n+\t\t\t\tif (exception == null) {\n+\t\t\t\t\texception = new EntrypointException(key, entry.getModContainer().getMetadata().getId(), t);\n+\t\t\t\t} else {\n+\t\t\t\t\texception.addSuppressed(t);\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \n-\t\tif (!errors.isEmpty()) {\n-\t\t\tIterator<Throwable> it = errors.iterator();\n-\t\t\tEntrypointException e = new EntrypointException(key, it.next());\n+\t\tif (exception != null) {\n+\t\t\tthrow exception;\n+\t\t}\n+\n+\t\treturn results;\n+\t}\n \n-\t\t\twhile (it.hasNext()) {\n-\t\t\t\te.addSuppressed(it.next());\n+\tprotected <T> List<EntrypointContainer<T>> getEntrypointContainers(String key, Class<T> type) {\n+\t\tList<Entry> entries = entryMap.get(key);\n+\t\tif (entries == null) {\n+\t\t\treturn Collections.emptyList();\n+\t\t}\n+\n+\t\tEntrypointException exception = null;\n+\t\tList<EntrypointContainer<T>> results = new ArrayList<>(entries.size());\n+\t\tfor (Entry entry : entries) {\n+\t\t\ttry {\n+\t\t\t\tT result = entry.getOrCreate(type);\n+\t\t\t\tif (result != null) {", "originalCommit": "be9174cf38eed64d1d33369ce31dc00c334ac5e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "180376da2b243e8828986ae5b84b540ec13ef293", "chunk": "diff --git a/src/main/java/net/fabricmc/loader/EntrypointStorage.java b/src/main/java/net/fabricmc/loader/EntrypointStorage.java\nindex bbea566..8e127a3 100644\n--- a/src/main/java/net/fabricmc/loader/EntrypointStorage.java\n+++ b/src/main/java/net/fabricmc/loader/EntrypointStorage.java\n\n@@ -146,15 +146,16 @@ class EntrypointStorage {\n \n \tprotected <T> List<T> getEntrypoints(String key, Class<T> type) {\n \t\tList<Entry> entries = entryMap.get(key);\n-\t\tif (entries == null) {\n-\t\t\treturn Collections.emptyList();\n-\t\t}\n+\n+\t\tif (entries == null) return Collections.emptyList();\n \n \t\tEntrypointException exception = null;\n \t\tList<T> results = new ArrayList<>(entries.size());\n+\n \t\tfor (Entry entry : entries) {\n \t\t\ttry {\n \t\t\t\tT result = entry.getOrCreate(type);\n+\n \t\t\t\tif (result != null) {\n \t\t\t\t\tresults.add(result);\n \t\t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyMTU3NQ==", "url": "https://github.com/FabricMC/fabric-loader/pull/207#discussion_r389121575", "bodyText": "Are we still using that one, if not change comment to indicate removal please", "author": "sfPlayer1", "createdAt": "2020-03-06T20:13:28Z", "path": "src/main/java/net/fabricmc/loader/api/EntrypointException.java", "diffHunk": "@@ -24,7 +24,16 @@\n \t */\n \t@Deprecated\n \tpublic EntrypointException(String key, Throwable cause) {", "originalCommit": "be9174cf38eed64d1d33369ce31dc00c334ac5e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "180376da2b243e8828986ae5b84b540ec13ef293", "chunk": "diff --git a/src/main/java/net/fabricmc/loader/api/EntrypointException.java b/src/main/java/net/fabricmc/loader/api/EntrypointException.java\nindex bae5290..939c0df 100644\n--- a/src/main/java/net/fabricmc/loader/api/EntrypointException.java\n+++ b/src/main/java/net/fabricmc/loader/api/EntrypointException.java\n\n@@ -20,7 +20,7 @@ public class EntrypointException extends RuntimeException {\n \tprivate final String key;\n \n \t/**\n-\t * @deprecated For internal use only, use regular exceptions!\n+\t * @deprecated For internal use only, to be removed!\n \t */\n \t@Deprecated\n \tpublic EntrypointException(String key, Throwable cause) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyMTcxOA==", "url": "https://github.com/FabricMC/fabric-loader/pull/207#discussion_r389121718", "bodyText": "Short comment about what it is/what it is used for please", "author": "sfPlayer1", "createdAt": "2020-03-06T20:13:49Z", "path": "src/main/java/net/fabricmc/loader/api/entrypoint/EntrypointContainer.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api.entrypoint;\n+\n+import net.fabricmc.loader.api.ModContainer;\n+\n+public interface EntrypointContainer<T> {", "originalCommit": "be9174cf38eed64d1d33369ce31dc00c334ac5e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "180376da2b243e8828986ae5b84b540ec13ef293", "chunk": "diff --git a/src/main/java/net/fabricmc/loader/api/entrypoint/EntrypointContainer.java b/src/main/java/net/fabricmc/loader/api/entrypoint/EntrypointContainer.java\nindex 3adcd88..e1d46e8 100644\n--- a/src/main/java/net/fabricmc/loader/api/entrypoint/EntrypointContainer.java\n+++ b/src/main/java/net/fabricmc/loader/api/entrypoint/EntrypointContainer.java\n\n@@ -18,8 +18,20 @@ package net.fabricmc.loader.api.entrypoint;\n \n import net.fabricmc.loader.api.ModContainer;\n \n+/**\n+ * Represents a container which holds both an entrypoint instance and the {@link ModContainer} which has provided the entrypoint,\n+ * @param <T> The type of the entrypoint\n+ */\n public interface EntrypointContainer<T> {\n+\t/**\n+\t * Gets the entrypoint.\n+\t * @return An entrypoint instance.\n+\t */\n \tT getEntrypoint();\n \n+\t/**\n+\t * Gets the mod which has provided this entrypoint.\n+\t * @return The mod which as provided this entrypoint.\n+\t */\n \tModContainer getProvider();\n }\n"}}, {"oid": "180376da2b243e8828986ae5b84b540ec13ef293", "url": "https://github.com/FabricMC/fabric-loader/commit/180376da2b243e8828986ae5b84b540ec13ef293", "message": "Style and docs handling.", "committedDate": "2020-03-07T02:09:18Z", "type": "commit"}, {"oid": "03fee62372095575286ce0133de63bea4e901520", "url": "https://github.com/FabricMC/fabric-loader/commit/03fee62372095575286ce0133de63bea4e901520", "message": "Checkstyle fixes II", "committedDate": "2020-03-07T19:36:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwODk4Ng==", "url": "https://github.com/FabricMC/fabric-loader/pull/207#discussion_r389308986", "bodyText": "Wouldn't it be as good a time as any to replace that reference with the API instance ?", "author": "Pyrofab", "createdAt": "2020-03-07T20:13:39Z", "path": "src/main/java/net/fabricmc/loader/entrypoint/minecraft/hooks/EntrypointUtils.java", "diffHunk": "@@ -38,26 +40,24 @@\n \tprivate static <T> void invoke0(String name, Class<T> type, Consumer<? super T> invoker) {\n \t\t@SuppressWarnings(\"deprecation\")\n \t\tFabricLoader loader = FabricLoader.INSTANCE;", "originalCommit": "03fee62372095575286ce0133de63bea4e901520", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0NTU1OQ==", "url": "https://github.com/FabricMC/fabric-loader/pull/207#discussion_r389345559", "bodyText": "This is an internal call within invoke0 so it isn't imparative. But I easily could with no real issues.", "author": "i509VCB", "createdAt": "2020-03-08T08:03:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwODk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0Njc1Mg==", "url": "https://github.com/FabricMC/fabric-loader/pull/207#discussion_r389346752", "bodyText": "I mean, SuppressWarnings is never pretty. On the other hand, it has basically nothing to do with the base PR so whatever.", "author": "Pyrofab", "createdAt": "2020-03-08T08:20:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwODk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0NzEyNw==", "url": "https://github.com/FabricMC/fabric-loader/pull/207#discussion_r389347127", "bodyText": "I'll fix that tomorrow since it literally costs us nothing to change that.", "author": "i509VCB", "createdAt": "2020-03-08T08:26:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwODk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3NjQ4MA==", "url": "https://github.com/FabricMC/fabric-loader/pull/207#discussion_r389376480", "bodyText": "This one is better than a cast; should be left as-is.", "author": "liach", "createdAt": "2020-03-08T14:52:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwODk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4MzQ4MA==", "url": "https://github.com/FabricMC/fabric-loader/pull/207#discussion_r392683480", "bodyText": "Did we want this resolved before merge or is this specific issue unneeded.", "author": "i509VCB", "createdAt": "2020-03-15T15:17:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwODk4Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE5MTUzOQ==", "url": "https://github.com/FabricMC/fabric-loader/pull/207#discussion_r395191539", "bodyText": "t is ignored here, please add it back.", "author": "shedaniel", "createdAt": "2020-03-19T17:18:16Z", "path": "src/main/java/net/fabricmc/loader/entrypoint/minecraft/hooks/EntrypointUtils.java", "diffHunk": "@@ -38,26 +40,24 @@\n \tprivate static <T> void invoke0(String name, Class<T> type, Consumer<? super T> invoker) {\n \t\t@SuppressWarnings(\"deprecation\")\n \t\tFabricLoader loader = FabricLoader.INSTANCE;\n-\t\tCollection<T> entrypoints = loader.getEntrypoints(name, type);\n-\t\tList<Throwable> errors = new ArrayList<>();\n+\t\tRuntimeException exception = null;\n+\t\tCollection<EntrypointContainer<T>> entrypoints = loader.getEntrypointContainers(name, type);\n \n \t\tloader.getLogger().debug(\"Iterating over entrypoint '\" + name + \"'\");\n \n-\t\tfor (T e : entrypoints) {\n+\t\tfor (EntrypointContainer<T> container : entrypoints) {\n \t\t\ttry {\n-\t\t\t\tinvoker.accept(e);\n+\t\t\t\tinvoker.accept(container.getEntrypoint());\n \t\t\t} catch (Throwable t) {\n-\t\t\t\terrors.add(t);\n+\t\t\t\tif (exception == null) {\n+\t\t\t\t\texception = new RuntimeException(\"Could not execute entrypoint stage '\" + name + \"' due to errors, provided by '\" + container.getProvider().getMetadata().getId() + \"'!\");", "originalCommit": "03fee62372095575286ce0133de63bea4e901520", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}