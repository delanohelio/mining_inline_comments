{"pr_number": 313, "pr_title": "Make EntrypointContainer lazy", "pr_createdAt": "2020-10-04T21:34:04Z", "pr_url": "https://github.com/FabricMC/fabric-loader/pull/313", "timeline": [{"oid": "65b91bc3f508a00f7552d50f15447be9f63264ae", "url": "https://github.com/FabricMC/fabric-loader/commit/65b91bc3f508a00f7552d50f15447be9f63264ae", "message": "Add LazyEntrypointContainer\n\nLazyEntrypointContainers are EntrypointContainers that only construct their entrypoint once it's requested. This is intended for situations where you must run some code specific to the ModContainer before constructing an entrypoint.", "committedDate": "2020-10-04T21:26:07Z", "type": "commit"}, {"oid": "70de32cb688878164bf3507683e98838a4ab60a1", "url": "https://github.com/FabricMC/fabric-loader/commit/70de32cb688878164bf3507683e98838a4ab60a1", "message": "Make LazyEntrypointContainer exceptions match EntrypointContainer", "committedDate": "2020-10-04T21:45:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5NTg1Nw==", "url": "https://github.com/FabricMC/fabric-loader/pull/313#discussion_r499295857", "bodyText": "A behavior change where existing entrypoints will not create the instance until you ask for it via getEntrypoint() is what I'd prefer probably. You can't really do much via relying on the ctor of the entrypoint in order to instantiate everything.\nIn the case of patchwork, you'd obviously get what you want with a behavior change. If you are relying on the instance being created when you resolve the list then I feel that is a horrible hack.", "author": "i509VCB", "createdAt": "2020-10-04T22:32:23Z", "path": "src/main/java/net/fabricmc/loader/EntrypointStorage.java", "diffHunk": "@@ -203,4 +205,23 @@ boolean hasEntrypoints(String key) {\n \n \t\treturn results;\n \t}\n+\n+\tprotected <T> List<LazyEntrypointContainer<T>> getLazyEntrypointContainers(String key, Class<T> type) {", "originalCommit": "70de32cb688878164bf3507683e98838a4ab60a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMxMDQ1MQ==", "url": "https://github.com/FabricMC/fabric-loader/pull/313#discussion_r499310451", "bodyText": "I agree, the time of construction is an impl detail. I can make this change tomorrow.", "author": "TheGlitch76", "createdAt": "2020-10-05T01:15:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5NTg1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5b1717fe6e898c8ce329e9681593b9d5c413afc2", "chunk": "diff --git a/src/main/java/net/fabricmc/loader/EntrypointStorage.java b/src/main/java/net/fabricmc/loader/EntrypointStorage.java\nindex 9cd00ee..80a42c1 100644\n--- a/src/main/java/net/fabricmc/loader/EntrypointStorage.java\n+++ b/src/main/java/net/fabricmc/loader/EntrypointStorage.java\n\n@@ -180,40 +176,10 @@ class EntrypointStorage {\n \t\tList<Entry> entries = entryMap.get(key);\n \t\tif (entries == null) return Collections.emptyList();\n \n-\t\tEntrypointException exception = null;\n \t\tList<EntrypointContainer<T>> results = new ArrayList<>(entries.size());\n \n \t\tfor (Entry entry : entries) {\n-\t\t\ttry {\n-\t\t\t\tT result = entry.getOrCreate(type);\n-\n-\t\t\t\tif (result != null) {\n-\t\t\t\t\tresults.add(new EntrypointContainerImpl<>(entry.getModContainer(), result));\n-\t\t\t\t}\n-\t\t\t} catch (Throwable t) {\n-\t\t\t\tif (exception == null) {\n-\t\t\t\t\texception = new EntrypointException(key, entry.getModContainer().getMetadata().getId(), t);\n-\t\t\t\t} else {\n-\t\t\t\t\texception.addSuppressed(t);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (exception != null) {\n-\t\t\tthrow exception;\n-\t\t}\n-\n-\t\treturn results;\n-\t}\n-\n-\tprotected <T> List<LazyEntrypointContainer<T>> getLazyEntrypointContainers(String key, Class<T> type) {\n-\t\tList<Entry> entries = entryMap.get(key);\n-\t\tif (entries == null) return Collections.emptyList();\n-\n-\t\tList<LazyEntrypointContainer<T>> results = new ArrayList<>(entries.size());\n-\n-\t\tfor (Entry entry : entries) {\n-\t\t\tresults.add(new LazyEntrypointContainerImpl<>(entry.getModContainer(), () -> {\n+\t\t\tresults.add(new EntrypointContainerImpl<>(entry.getModContainer(), () -> {\n \t\t\t\ttry {\n \t\t\t\t\treturn entry.getOrCreate(type);\n \t\t\t\t} catch (Exception ex) {\n"}}, {"oid": "5b1717fe6e898c8ce329e9681593b9d5c413afc2", "url": "https://github.com/FabricMC/fabric-loader/commit/5b1717fe6e898c8ce329e9681593b9d5c413afc2", "message": "Make EntrypointContainer only create the entrypoint's instance once\nit is requested", "committedDate": "2020-10-05T21:49:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2ODc5Mg==", "url": "https://github.com/FabricMC/fabric-loader/pull/313#discussion_r540868792", "bodyText": "This should be made thread safe, the easiest solution is making the entire method synchronized.", "author": "sfPlayer1", "createdAt": "2020-12-11T11:06:08Z", "path": "src/main/java/net/fabricmc/loader/entrypoint/EntrypointContainerImpl.java", "diffHunk": "@@ -16,21 +16,28 @@\n \n package net.fabricmc.loader.entrypoint;\n \n-import net.fabricmc.loader.ModContainer;\n+import net.fabricmc.loader.api.ModContainer;\n import net.fabricmc.loader.api.entrypoint.EntrypointContainer;\n \n+import java.util.function.Supplier;\n+\n public class EntrypointContainerImpl<T> implements EntrypointContainer<T> {\n \tprivate final ModContainer container;\n-\tprivate final T entrypoint;\n+\tprivate final Supplier<T> entrypointSupplier;\n+\tprivate T instance;\n \n-\tpublic EntrypointContainerImpl(ModContainer container, T entrypoint) {\n+\tpublic EntrypointContainerImpl(ModContainer container, Supplier<T> entrypointSupplier) {\n \t\tthis.container = container;\n-\t\tthis.entrypoint = entrypoint;\n+\t\tthis.entrypointSupplier = entrypointSupplier;\n \t}\n \n \t@Override\n \tpublic T getEntrypoint() {\n-\t\treturn entrypoint;\n+\t\tif (instance == null) {\n+\t\t\tthis.instance = entrypointSupplier.get();", "originalCommit": "5b1717fe6e898c8ce329e9681593b9d5c413afc2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "220d37e29e239e18b6b38b079f5439eac11e1398", "chunk": "diff --git a/src/main/java/net/fabricmc/loader/entrypoint/EntrypointContainerImpl.java b/src/main/java/net/fabricmc/loader/entrypoint/EntrypointContainerImpl.java\nindex 5977074..bceef43 100644\n--- a/src/main/java/net/fabricmc/loader/entrypoint/EntrypointContainerImpl.java\n+++ b/src/main/java/net/fabricmc/loader/entrypoint/EntrypointContainerImpl.java\n\n@@ -32,7 +32,7 @@ public class EntrypointContainerImpl<T> implements EntrypointContainer<T> {\n \t}\n \n \t@Override\n-\tpublic T getEntrypoint() {\n+\tpublic synchronized T getEntrypoint() {\n \t\tif (instance == null) {\n \t\t\tthis.instance = entrypointSupplier.get();\n \t\t}\n"}}, {"oid": "220d37e29e239e18b6b38b079f5439eac11e1398", "url": "https://github.com/FabricMC/fabric-loader/commit/220d37e29e239e18b6b38b079f5439eac11e1398", "message": "Make getEntrypoint thread-safe", "committedDate": "2020-12-12T02:54:04Z", "type": "commit"}]}