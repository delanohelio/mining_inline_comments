{"pr_number": 265, "pr_title": "Catch all exceptions json deserialization of mod metadata could throw.", "pr_createdAt": "2020-06-25T22:08:08Z", "pr_url": "https://github.com/FabricMC/fabric-loader/pull/265", "timeline": [{"oid": "0074e53319ab268a2038a79bb88a22a2d15b448d", "url": "https://github.com/FabricMC/fabric-loader/commit/0074e53319ab268a2038a79bb88a22a2d15b448d", "message": "Catch all exceptions json deserialization could throw.\n\nThis prevents some more cryptic stack traces like this: https://gist.github.com/modmuss50/7c13acaed89a56b491430cbb08fd34d4\n\n(cherry picked from commit 33a146fb779ccfe1f4c903fcd7ffb218e1fd1b84)", "committedDate": "2020-06-25T22:05:29Z", "type": "commit"}, {"oid": "012a6e360a0d3c1bf68ce016d51544a3acffb20a", "url": "https://github.com/FabricMC/fabric-loader/commit/012a6e360a0d3c1bf68ce016d51544a3acffb20a", "message": "Add additional throwable catch case for other fun errors.\n\nAlso proper quoting lol for error messages", "committedDate": "2020-06-26T21:43:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNDkwMA==", "url": "https://github.com/FabricMC/fabric-loader/pull/265#discussion_r446434900", "bodyText": "Imo Errors should not be rethrown as runtime exceptions.", "author": "liach", "createdAt": "2020-06-26T22:20:23Z", "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -462,11 +462,13 @@ protected void compute() {\n \t\t\ttry (InputStream stream = Files.newInputStream(modJson)) {\n \t\t\t\tinfo = ModMetadataParser.getMods(loader, stream);\n \t\t\t} catch (JsonParseException e) {\n-\t\t\t\tthrow new RuntimeException(\"Mod at '\" + path + \"' has an invalid fabric.mod.json file!\", e);\n+\t\t\t\tthrow new RuntimeException(String.format(\"Mod at \\\"%s\\\" has an invalid fabric.mod.json file!\", path), e);\n \t\t\t} catch (NoSuchFileException e) {\n \t\t\t\tinfo = new LoaderModMetadata[0];\n \t\t\t} catch (IOException e) {\n-\t\t\t\tthrow new RuntimeException(\"Failed to open fabric.mod.json for mod at '\" + path + \"'!\", e);\n+\t\t\t\tthrow new RuntimeException(String.format(\"Failed to open fabric.mod.json for mod at \\\"%s\\\"!\", path), e);\n+\t\t\t} catch (Throwable t) {\n+\t\t\t\tthrow new RuntimeException(String.format(\"Failed to parse mod metadata for mod at \\\"%s\\\"\", path), t);", "originalCommit": "012a6e360a0d3c1bf68ce016d51544a3acffb20a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NTMzMQ==", "url": "https://github.com/FabricMC/fabric-loader/pull/265#discussion_r446465331", "bodyText": "All of these exceptions kill the game though (or at least prevent it from being started normally) - would it make much of a difference to handle Errors differently to Exceptions?", "author": "AlexIIL", "createdAt": "2020-06-27T01:06:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNDkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NTUwMg==", "url": "https://github.com/FabricMC/fabric-loader/pull/265#discussion_r446465502", "bodyText": "(Plus any exception thrown here is ultimately wrapped in a ModResolutionException anyway).", "author": "AlexIIL", "createdAt": "2020-06-27T01:08:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNDkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NjA2Mw==", "url": "https://github.com/FabricMC/fabric-loader/pull/265#discussion_r446466063", "bodyText": "Well one of the exceptions just sets the mod metadata array to be empty (NoSuchFileException)", "author": "i509VCB", "createdAt": "2020-06-27T01:13:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNDkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2OTk3NA==", "url": "https://github.com/FabricMC/fabric-loader/pull/265#discussion_r446469974", "bodyText": "Yes, but as that's a checked exception it can only be thrown by Files.newInputStream() so it can't be thrown by this method (which means I think we can ignore it for this).", "author": "AlexIIL", "createdAt": "2020-06-27T01:52:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNDkwMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NTU5OQ==", "url": "https://github.com/FabricMC/fabric-loader/pull/265#discussion_r446465599", "bodyText": "Just FYI you probably don't need to make any changes to this file as it's all caught in ModResolver.", "author": "AlexIIL", "createdAt": "2020-06-27T01:09:12Z", "path": "src/main/java/net/fabricmc/loader/metadata/ModMetadataParser.java", "diffHunk": "@@ -51,17 +51,22 @@\n \tprivate static final JsonParser JSON_PARSER = new JsonParser();\n \n \tprivate static LoaderModMetadata getMod(FabricLoader loader, JsonObject object) {\n-\t\tif (!object.has(\"schemaVersion\")) {\n-\t\t\treturn GSON_V0.fromJson(object, ModMetadataV0.class);\n-\t\t} else {\n-\t\t\t//noinspection SwitchStatementWithTooFewBranches\n-\t\t\tswitch (object.get(\"schemaVersion\").getAsInt()) {\n-\t\t\t\tcase 1:\n-\t\t\t\t\treturn GSON_V1.fromJson(object, ModMetadataV1.class);\n-\t\t\t\tdefault:\n-\t\t\t\t\tloader.getLogger().warn(\"Mod ID \" + (object.has(\"id\") ? object.get(\"id\").getAsString() : \"<unknown>\") + \" has invalid schema version: \" + object.get(\"schemaVersion\").getAsInt());\n-\t\t\t\t\treturn null;\n+\t\ttry {\n+\t\t\tif (!object.has(\"schemaVersion\")) {\n+\t\t\t\treturn GSON_V0.fromJson(object, ModMetadataV0.class);\n+\t\t\t} else {\n+\t\t\t\t//noinspection SwitchStatementWithTooFewBranches\n+\t\t\t\tswitch (object.get(\"schemaVersion\").getAsInt()) {\n+\t\t\t\t\tcase 1:\n+\t\t\t\t\t\treturn GSON_V1.fromJson(object, ModMetadataV1.class);\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tloader.getLogger().warn(\"Mod ID \" + (object.has(\"id\") ? object.get(\"id\").getAsString() : \"<unknown>\") + \" has invalid schema version: \" + object.get(\"schemaVersion\").getAsInt());\n+\t\t\t\t\t\treturn null;\n+\t\t\t\t}\n \t\t\t}\n+\t\t} catch (Throwable t) {\n+\t\t\t// Catch all exceptions that could occur from parsing metadata and rethrow as JsonSyntaxException.\n+\t\t\tthrow new JsonParseException(t);", "originalCommit": "012a6e360a0d3c1bf68ce016d51544a3acffb20a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8e49095b63a7399b5cfa7138dc49e35f0808fb67", "chunk": "diff --git a/src/main/java/net/fabricmc/loader/metadata/ModMetadataParser.java b/src/main/java/net/fabricmc/loader/metadata/ModMetadataParser.java\nindex 5829959..204a696 100644\n--- a/src/main/java/net/fabricmc/loader/metadata/ModMetadataParser.java\n+++ b/src/main/java/net/fabricmc/loader/metadata/ModMetadataParser.java\n\n@@ -51,22 +51,17 @@ public class ModMetadataParser {\n \tprivate static final JsonParser JSON_PARSER = new JsonParser();\n \n \tprivate static LoaderModMetadata getMod(FabricLoader loader, JsonObject object) {\n-\t\ttry {\n-\t\t\tif (!object.has(\"schemaVersion\")) {\n-\t\t\t\treturn GSON_V0.fromJson(object, ModMetadataV0.class);\n-\t\t\t} else {\n-\t\t\t\t//noinspection SwitchStatementWithTooFewBranches\n-\t\t\t\tswitch (object.get(\"schemaVersion\").getAsInt()) {\n-\t\t\t\t\tcase 1:\n-\t\t\t\t\t\treturn GSON_V1.fromJson(object, ModMetadataV1.class);\n-\t\t\t\t\tdefault:\n-\t\t\t\t\t\tloader.getLogger().warn(\"Mod ID \" + (object.has(\"id\") ? object.get(\"id\").getAsString() : \"<unknown>\") + \" has invalid schema version: \" + object.get(\"schemaVersion\").getAsInt());\n-\t\t\t\t\t\treturn null;\n-\t\t\t\t}\n+\t\tif (!object.has(\"schemaVersion\")) {\n+\t\t\treturn GSON_V0.fromJson(object, ModMetadataV0.class);\n+\t\t} else {\n+\t\t\t//noinspection SwitchStatementWithTooFewBranches\n+\t\t\tswitch (object.get(\"schemaVersion\").getAsInt()) {\n+\t\t\t\tcase 1:\n+\t\t\t\t\treturn GSON_V1.fromJson(object, ModMetadataV1.class);\n+\t\t\t\tdefault:\n+\t\t\t\t\tloader.getLogger().warn(\"Mod ID \" + (object.has(\"id\") ? object.get(\"id\").getAsString() : \"<unknown>\") + \" has invalid schema version: \" + object.get(\"schemaVersion\").getAsInt());\n+\t\t\t\t\treturn null;\n \t\t\t}\n-\t\t} catch (Throwable t) {\n-\t\t\t// Catch all exceptions that could occur from parsing metadata and rethrow as JsonSyntaxException.\n-\t\t\tthrow new JsonParseException(t);\n \t\t}\n \t}\n \n"}}, {"oid": "8e49095b63a7399b5cfa7138dc49e35f0808fb67", "url": "https://github.com/FabricMC/fabric-loader/commit/8e49095b63a7399b5cfa7138dc49e35f0808fb67", "message": "Unnessecary catch go bye byte", "committedDate": "2020-06-27T01:38:37Z", "type": "commit"}]}