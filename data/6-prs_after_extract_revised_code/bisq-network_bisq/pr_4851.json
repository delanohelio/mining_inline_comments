{"pr_number": 4851, "pr_title": "Improve getBlocks request handling", "pr_createdAt": "2020-11-26T16:24:27Z", "pr_url": "https://github.com/bisq-network/bisq/pull/4851", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzNjQ0Nw==", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536136447", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else {\n          \n          \n            \n                        if (blockDownloadListener == null) {\n          \n          \n            \n                            blockDownloadListener = (observable, oldValue, newValue) -> {\n          \n          \n            \n                                if ((double) newValue == 1) {\n          \n          \n            \n                                    setupWalletBestBlockListener();\n          \n          \n            \n                                    UserThread.execute(() -> walletsSetup.downloadPercentageProperty().removeListener(blockDownloadListener));\n          \n          \n            \n                                }\n          \n          \n            \n                            };\n          \n          \n            \n                            walletsSetup.downloadPercentageProperty().addListener(blockDownloadListener);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    } else if (blockDownloadListener == null) {\n          \n          \n            \n                        blockDownloadListener = (observable, oldValue, newValue) -> {\n          \n          \n            \n                            if ((double) newValue == 1) {\n          \n          \n            \n                                setupWalletBestBlockListener();\n          \n          \n            \n                                UserThread.execute(() -> walletsSetup.downloadPercentageProperty().removeListener(blockDownloadListener));\n          \n          \n            \n                            }\n          \n          \n            \n                        };\n          \n          \n            \n                        walletsSetup.downloadPercentageProperty().addListener(blockDownloadListener);\n          \n          \n            \n                    }", "author": "sqrrm", "createdAt": "2020-12-04T14:26:14Z", "path": "core/src/main/java/bisq/core/dao/node/lite/LiteNode.java", "diffHunk": "@@ -87,7 +95,24 @@ public void start() {\n \n         liteNodeNetworkService.start();\n \n-        bsqWalletService.addNewBestBlockListener(block -> {\n+        // We wait until the wallet is synced before using it trigger requests\n+        if (walletsSetup.isDownloadComplete()) {\n+            setupWalletBestBlockListener();\n+        } else {\n+            if (blockDownloadListener == null) {\n+                blockDownloadListener = (observable, oldValue, newValue) -> {\n+                    if ((double) newValue == 1) {\n+                        setupWalletBestBlockListener();\n+                        UserThread.execute(() -> walletsSetup.downloadPercentageProperty().removeListener(blockDownloadListener));\n+                    }\n+                };\n+                walletsSetup.downloadPercentageProperty().addListener(blockDownloadListener);\n+            }\n+        }", "originalCommit": "3babce8a9f4ba401e33fc331c0a34c821c13d361", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5MDg1Ng==", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536190856", "bodyText": "I will make a commit with the suggestion. Have better control if I do it in the IDE...", "author": "chimp1984", "createdAt": "2020-12-04T15:43:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzNjQ0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NDA4NA==", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536194084", "bodyText": "Yes, I only make the code suggestion here as a way to explain more precisely what I mean. Best do it on your own to be sure it's correct.", "author": "sqrrm", "createdAt": "2020-12-04T15:47:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzNjQ0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "357c980390bbd5739ddaaa24eca77b923a943be5", "chunk": "diff --git a/core/src/main/java/bisq/core/dao/node/lite/LiteNode.java b/core/src/main/java/bisq/core/dao/node/lite/LiteNode.java\nindex ab7c4b12c8..c9e2345e76 100644\n--- a/core/src/main/java/bisq/core/dao/node/lite/LiteNode.java\n+++ b/core/src/main/java/bisq/core/dao/node/lite/LiteNode.java\n\n@@ -98,16 +97,14 @@ public class LiteNode extends BsqNode {\n         // We wait until the wallet is synced before using it trigger requests\n         if (walletsSetup.isDownloadComplete()) {\n             setupWalletBestBlockListener();\n-        } else {\n-            if (blockDownloadListener == null) {\n-                blockDownloadListener = (observable, oldValue, newValue) -> {\n-                    if ((double) newValue == 1) {\n-                        setupWalletBestBlockListener();\n-                        UserThread.execute(() -> walletsSetup.downloadPercentageProperty().removeListener(blockDownloadListener));\n-                    }\n-                };\n-                walletsSetup.downloadPercentageProperty().addListener(blockDownloadListener);\n-            }\n+        } else if (blockDownloadListener == null) {\n+            blockDownloadListener = (observable, oldValue, newValue) -> {\n+                if ((double) newValue == 1) {\n+                    setupWalletBestBlockListener();\n+                    UserThread.execute(() -> walletsSetup.downloadPercentageProperty().removeListener(blockDownloadListener));\n+                }\n+            };\n+            walletsSetup.downloadPercentageProperty().addListener(blockDownloadListener);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzNzM4Nw==", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536137387", "bodyText": "Why error log level?", "author": "sqrrm", "createdAt": "2020-12-04T14:27:33Z", "path": "core/src/main/java/bisq/core/dao/node/lite/LiteNode.java", "diffHunk": "@@ -97,20 +122,20 @@ public void start() {\n                 checkForBlockReceivedTimer.stop();\n             }\n \n-            int height = block.getHeight();\n-            log.info(\"New block at height {} from bsqWalletService\", height);\n+            int btcWalletHeight = btcBlock.getHeight();\n+            log.error(\"New block at height {} from bsqWalletService\", btcWalletHeight);", "originalCommit": "3babce8a9f4ba401e33fc331c0a34c821c13d361", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5MTQxNg==", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536191416", "bodyText": "Ups was from dev testing", "author": "chimp1984", "createdAt": "2020-12-04T15:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzNzM4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "357c980390bbd5739ddaaa24eca77b923a943be5", "chunk": "diff --git a/core/src/main/java/bisq/core/dao/node/lite/LiteNode.java b/core/src/main/java/bisq/core/dao/node/lite/LiteNode.java\nindex ab7c4b12c8..c9e2345e76 100644\n--- a/core/src/main/java/bisq/core/dao/node/lite/LiteNode.java\n+++ b/core/src/main/java/bisq/core/dao/node/lite/LiteNode.java\n\n@@ -123,19 +120,19 @@ public class LiteNode extends BsqNode {\n             }\n \n             int btcWalletHeight = btcBlock.getHeight();\n-            log.error(\"New block at height {} from bsqWalletService\", btcWalletHeight);\n+            log.info(\"New block at height {} from bsqWalletService\", btcWalletHeight);\n \n             // We expect to receive the new BSQ block from the network shortly after BitcoinJ has been aware of it.\n             // If we don't receive it we request it manually from seed nodes\n             checkForBlockReceivedTimer = UserThread.runAfter(() -> {\n                 int daoChainHeight = daoStateService.getChainHeight();\n                 if (daoChainHeight < btcWalletHeight) {\n-                    log.warn(\"We did not receive a block from the network {} seconds after we saw the new block in BicoinJ. \" +\n+                    log.warn(\"We did not receive a block from the network {} seconds after we saw the new block in BitcoinJ. \" +\n                                     \"We request from our seed nodes missing blocks from block height {}.\",\n                             CHECK_FOR_BLOCK_RECEIVED_DELAY_SEC, daoChainHeight + 1);\n                     liteNodeNetworkService.requestBlocks(daoChainHeight + 1);\n                 }\n-            }, CHECK_FOR_BLOCK_RECEIVED_DELAY_SEC, TimeUnit.MILLISECONDS);\n+            }, CHECK_FOR_BLOCK_RECEIVED_DELAY_SEC);\n         });\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzODYxOQ==", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536138619", "bodyText": "Timeout unit should be sec, is this a test artefact together with the error log level?", "author": "sqrrm", "createdAt": "2020-12-04T14:29:14Z", "path": "core/src/main/java/bisq/core/dao/node/lite/LiteNode.java", "diffHunk": "@@ -97,20 +122,20 @@ public void start() {\n                 checkForBlockReceivedTimer.stop();\n             }\n \n-            int height = block.getHeight();\n-            log.info(\"New block at height {} from bsqWalletService\", height);\n+            int btcWalletHeight = btcBlock.getHeight();\n+            log.error(\"New block at height {} from bsqWalletService\", btcWalletHeight);\n \n             // We expect to receive the new BSQ block from the network shortly after BitcoinJ has been aware of it.\n             // If we don't receive it we request it manually from seed nodes\n             checkForBlockReceivedTimer = UserThread.runAfter(() -> {\n-                int chainHeight = daoStateService.getChainHeight();\n-                if (chainHeight < height) {\n+                int daoChainHeight = daoStateService.getChainHeight();\n+                if (daoChainHeight < btcWalletHeight) {\n                     log.warn(\"We did not receive a block from the network {} seconds after we saw the new block in BicoinJ. \" +\n                                     \"We request from our seed nodes missing blocks from block height {}.\",\n-                            CHECK_FOR_BLOCK_RECEIVED_DELAY_SEC, chainHeight + 1);\n-                    liteNodeNetworkService.requestBlocks(chainHeight + 1);\n+                            CHECK_FOR_BLOCK_RECEIVED_DELAY_SEC, daoChainHeight + 1);\n+                    liteNodeNetworkService.requestBlocks(daoChainHeight + 1);\n                 }\n-            }, CHECK_FOR_BLOCK_RECEIVED_DELAY_SEC);\n+            }, CHECK_FOR_BLOCK_RECEIVED_DELAY_SEC, TimeUnit.MILLISECONDS);", "originalCommit": "3babce8a9f4ba401e33fc331c0a34c821c13d361", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5MjAzNA==", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536192034", "bodyText": "Ups, another dev setup leftover ;-(", "author": "chimp1984", "createdAt": "2020-12-04T15:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzODYxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "357c980390bbd5739ddaaa24eca77b923a943be5", "chunk": "diff --git a/core/src/main/java/bisq/core/dao/node/lite/LiteNode.java b/core/src/main/java/bisq/core/dao/node/lite/LiteNode.java\nindex ab7c4b12c8..c9e2345e76 100644\n--- a/core/src/main/java/bisq/core/dao/node/lite/LiteNode.java\n+++ b/core/src/main/java/bisq/core/dao/node/lite/LiteNode.java\n\n@@ -123,19 +120,19 @@ public class LiteNode extends BsqNode {\n             }\n \n             int btcWalletHeight = btcBlock.getHeight();\n-            log.error(\"New block at height {} from bsqWalletService\", btcWalletHeight);\n+            log.info(\"New block at height {} from bsqWalletService\", btcWalletHeight);\n \n             // We expect to receive the new BSQ block from the network shortly after BitcoinJ has been aware of it.\n             // If we don't receive it we request it manually from seed nodes\n             checkForBlockReceivedTimer = UserThread.runAfter(() -> {\n                 int daoChainHeight = daoStateService.getChainHeight();\n                 if (daoChainHeight < btcWalletHeight) {\n-                    log.warn(\"We did not receive a block from the network {} seconds after we saw the new block in BicoinJ. \" +\n+                    log.warn(\"We did not receive a block from the network {} seconds after we saw the new block in BitcoinJ. \" +\n                                     \"We request from our seed nodes missing blocks from block height {}.\",\n                             CHECK_FOR_BLOCK_RECEIVED_DELAY_SEC, daoChainHeight + 1);\n                     liteNodeNetworkService.requestBlocks(daoChainHeight + 1);\n                 }\n-            }, CHECK_FOR_BLOCK_RECEIVED_DELAY_SEC, TimeUnit.MILLISECONDS);\n+            }, CHECK_FOR_BLOCK_RECEIVED_DELAY_SEC);\n         });\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0MDkwMQ==", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536140901", "bodyText": "That's quite a bit of logging but perhaps ok since it's once per received block", "author": "sqrrm", "createdAt": "2020-12-04T14:32:29Z", "path": "core/src/main/java/bisq/core/dao/node/lite/LiteNode.java", "diffHunk": "@@ -229,11 +257,12 @@ private void runDelayedBatchProcessing(List<RawBlock> blocks, Runnable resultHan\n     // We received a new block\n     private void onNewBlockReceived(RawBlock block) {\n         int blockHeight = block.getHeight();\n-        log.debug(\"onNewBlockReceived: block at height {}, hash={}\", blockHeight, block.getHash());\n+        log.info(\"onNewBlockReceived: block at height {}, hash={}. Our DAO chainHeight={}\", blockHeight, block.getHash(), chainTipHeight);", "originalCommit": "3babce8a9f4ba401e33fc331c0a34c821c13d361", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5Mjg3Mg==", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536192872", "bodyText": "We can lower loglevel once we see that the feature works more reliable. Prefer to keep it now.", "author": "chimp1984", "createdAt": "2020-12-04T15:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0MDkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "fe44a343d0d627cf567d8a657880f2108b62104a", "chunk": "diff --git a/core/src/main/java/bisq/core/dao/node/lite/LiteNode.java b/core/src/main/java/bisq/core/dao/node/lite/LiteNode.java\nindex ab7c4b12c8..b43fa45313 100644\n--- a/core/src/main/java/bisq/core/dao/node/lite/LiteNode.java\n+++ b/core/src/main/java/bisq/core/dao/node/lite/LiteNode.java\n\n@@ -257,7 +256,8 @@ public class LiteNode extends BsqNode {\n     // We received a new block\n     private void onNewBlockReceived(RawBlock block) {\n         int blockHeight = block.getHeight();\n-        log.info(\"onNewBlockReceived: block at height {}, hash={}. Our DAO chainHeight={}\", blockHeight, block.getHash(), chainTipHeight);\n+        log.info(\"onNewBlockReceived: block at height {}, hash={}. Our DAO chainHeight={}\",\n+                blockHeight, block.getHash(), chainTipHeight);\n \n         // We only update chainTipHeight if we get a newer block\n         if (blockHeight > chainTipHeight) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1Njk0NA==", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536156944", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            \"Might be caused by an previous networkNode.sendMessage.onFailure.\");\n          \n          \n            \n                                            \"Might be caused by a previous networkNode.sendMessage.onFailure.\");", "author": "sqrrm", "createdAt": "2020-12-04T14:55:23Z", "path": "core/src/main/java/bisq/core/dao/node/lite/network/RequestBlocksHandler.java", "diffHunk": "@@ -108,56 +108,55 @@ public void cancel() {\n     ///////////////////////////////////////////////////////////////////////////////////////////\n \n     public void requestBlocks() {\n-        if (!stopped) {\n-            GetBlocksRequest getBlocksRequest = new GetBlocksRequest(startBlockHeight, nonce, networkNode.getNodeAddress());\n-            log.debug(\"getBlocksRequest \" + getBlocksRequest);\n-            if (timeoutTimer == null) {\n-                timeoutTimer = UserThread.runAfter(() -> {  // setup before sending to avoid race conditions\n-                            if (!stopped) {\n-                                String errorMessage = \"A timeout occurred when sending getBlocksRequest:\" + getBlocksRequest +\n-                                        \" on peersNodeAddress:\" + nodeAddress;\n-                                log.debug(errorMessage + \" / RequestDataHandler=\" + RequestBlocksHandler.this);\n-                                handleFault(errorMessage, nodeAddress, CloseConnectionReason.SEND_MSG_TIMEOUT);\n-                            } else {\n-                                log.trace(\"We have stopped already. We ignore that timeoutTimer.run call. \" +\n-                                        \"Might be caused by an previous networkNode.sendMessage.onFailure.\");\n-                            }\n-                        },\n-                        TIMEOUT);\n-            }\n+        if (stopped) {\n+            log.warn(\"We have stopped already. We ignore that requestData call.\");\n+            return;\n+        }\n \n-            log.info(\"We request blocks from peer {} from block height {}.\", nodeAddress, getBlocksRequest.getFromBlockHeight());\n-            networkNode.addMessageListener(this);\n-            SettableFuture<Connection> future = networkNode.sendMessage(nodeAddress, getBlocksRequest);\n-            Futures.addCallback(future, new FutureCallback<>() {\n-                @Override\n-                public void onSuccess(Connection connection) {\n-                    if (!stopped) {\n-                        log.info(\"Sending of GetBlocksRequest message to peer {} succeeded.\", nodeAddress.getFullAddress());\n-                    } else {\n-                        log.trace(\"We have stopped already. We ignore that networkNode.sendMessage.onSuccess call.\" +\n-                                \"Might be caused by a previous timeout.\");\n-                    }\n-                }\n+        GetBlocksRequest getBlocksRequest = new GetBlocksRequest(startBlockHeight, nonce, networkNode.getNodeAddress());\n \n-                @Override\n-                public void onFailure(@NotNull Throwable throwable) {\n+        if (timeoutTimer != null) {\n+            log.warn(\"We had a timer already running and stop it.\");\n+            timeoutTimer.stop();\n+        }\n+        timeoutTimer = UserThread.runAfter(() -> {  // setup before sending to avoid race conditions\n                     if (!stopped) {\n-                        String errorMessage = \"Sending getBlocksRequest to \" + nodeAddress +\n-                                \" failed. That is expected if the peer is offline.\\n\\t\" +\n-                                \"getBlocksRequest=\" + getBlocksRequest + \".\" +\n-                                \"\\n\\tException=\" + throwable.getMessage();\n-                        log.error(errorMessage);\n-                        handleFault(errorMessage, nodeAddress, CloseConnectionReason.SEND_MSG_FAILURE);\n+                        String errorMessage = \"A timeout occurred when sending getBlocksRequest:\" + getBlocksRequest +\n+                                \" on peersNodeAddress:\" + nodeAddress;\n+                        log.debug(\"{} / RequestDataHandler={}\", errorMessage, RequestBlocksHandler.this);\n+                        handleFault(errorMessage, nodeAddress, CloseConnectionReason.SEND_MSG_TIMEOUT);\n                     } else {\n-                        log.trace(\"We have stopped already. We ignore that networkNode.sendMessage.onFailure call. \" +\n-                                \"Might be caused by a previous timeout.\");\n+                        log.warn(\"We have stopped already. We ignore that timeoutTimer.run call. \" +\n+                                \"Might be caused by an previous networkNode.sendMessage.onFailure.\");", "originalCommit": "3babce8a9f4ba401e33fc331c0a34c821c13d361", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5Mzg1NA==", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536193854", "bodyText": "Found more like that. Will fix in new commit.", "author": "chimp1984", "createdAt": "2020-12-04T15:47:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1Njk0NA=="}], "type": "inlineReview", "revised_code": {"commit": "5363c8d5058c6bd25d9d1ca835520970d6e12a66", "chunk": "diff --git a/core/src/main/java/bisq/core/dao/node/lite/network/RequestBlocksHandler.java b/core/src/main/java/bisq/core/dao/node/lite/network/RequestBlocksHandler.java\nindex 0b884dc72f..712b2a1d86 100644\n--- a/core/src/main/java/bisq/core/dao/node/lite/network/RequestBlocksHandler.java\n+++ b/core/src/main/java/bisq/core/dao/node/lite/network/RequestBlocksHandler.java\n\n@@ -98,10 +98,6 @@ public class RequestBlocksHandler implements MessageListener {\n         this.listener = listener;\n     }\n \n-    public void cancel() {\n-        cleanup();\n-    }\n-\n \n     ///////////////////////////////////////////////////////////////////////////////////////////\n     // API\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1OTcwMQ==", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536159701", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (networkEnvelope instanceof GetBlocksResponse) {\n          \n          \n            \n                    if (!(networkEnvelope instanceof GetBlocksResponse)) return; // Also need to remove other brace", "author": "sqrrm", "createdAt": "2020-12-04T14:59:12Z", "path": "core/src/main/java/bisq/core/dao/node/lite/network/RequestBlocksHandler.java", "diffHunk": "@@ -168,31 +167,36 @@ public void onFailure(@NotNull Throwable throwable) {\n     @Override\n     public void onMessage(NetworkEnvelope networkEnvelope, Connection connection) {\n         if (networkEnvelope instanceof GetBlocksResponse) {", "originalCommit": "3babce8a9f4ba401e33fc331c0a34c821c13d361", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5ODg1MQ==", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536198851", "bodyText": "I prefer to not return early here as this style is commonly used in many places and often there are several if else branches. It is more like a dispatcher or switch case style (if switch would be more flexible in java). I prefer to use the early return for validation use cases but here its more to select the msg we are interested in.", "author": "chimp1984", "createdAt": "2020-12-04T15:54:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1OTcwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMDc1OQ==", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536410759", "bodyText": "That's a good point. Might be cleaner to make a handleGetBlocksResponse(GetBlocksResponse r) and other respective dispatch handlers like is done in the trade protocol for these cases.", "author": "sqrrm", "createdAt": "2020-12-04T22:05:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1OTcwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5363c8d5058c6bd25d9d1ca835520970d6e12a66", "chunk": "diff --git a/core/src/main/java/bisq/core/dao/node/lite/network/RequestBlocksHandler.java b/core/src/main/java/bisq/core/dao/node/lite/network/RequestBlocksHandler.java\nindex 0b884dc72f..712b2a1d86 100644\n--- a/core/src/main/java/bisq/core/dao/node/lite/network/RequestBlocksHandler.java\n+++ b/core/src/main/java/bisq/core/dao/node/lite/network/RequestBlocksHandler.java\n\n@@ -193,17 +189,20 @@ public class RequestBlocksHandler implements MessageListener {\n                 return;\n             }\n \n-            cleanup();\n+            terminate();\n             log.info(\"We received from peer {} a BlocksResponse with {} blocks\",\n                     nodeAddress.getFullAddress(), getBlocksResponse.getBlocks().size());\n             listener.onComplete(getBlocksResponse);\n         }\n     }\n \n-    public void stop() {\n-        cleanup();\n+    public void terminate() {\n+        stopped = true;\n+        networkNode.removeMessageListener(this);\n+        stopTimeoutTimer();\n     }\n \n+\n     ///////////////////////////////////////////////////////////////////////////////////////////\n     // Private\n     ///////////////////////////////////////////////////////////////////////////////////////////\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2NDg4Mg==", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536164882", "bodyText": "Doesn't timeoutTimer need to be stopped here like before?\n        stopTimeoutTimer();", "author": "sqrrm", "createdAt": "2020-12-04T15:06:47Z", "path": "core/src/main/java/bisq/core/dao/node/lite/network/RequestBlocksHandler.java", "diffHunk": "@@ -168,31 +167,36 @@ public void onFailure(@NotNull Throwable throwable) {\n     @Override\n     public void onMessage(NetworkEnvelope networkEnvelope, Connection connection) {\n         if (networkEnvelope instanceof GetBlocksResponse) {\n-            if (connection.getPeersNodeAddressOptional().isPresent() && connection.getPeersNodeAddressOptional().get().equals(nodeAddress)) {\n-                if (!stopped) {\n-                    GetBlocksResponse getBlocksResponse = (GetBlocksResponse) networkEnvelope;\n-                    if (getBlocksResponse.getRequestNonce() == nonce) {\n-                        stopTimeoutTimer();\n-                        checkArgument(connection.getPeersNodeAddressOptional().isPresent(),\n-                                \"RequestDataHandler.onMessage: connection.getPeersNodeAddressOptional() must be present \" +\n-                                        \"at that moment\");\n-                        cleanup();\n-                        log.info(\"We received from peer {} a BlocksResponse with {} blocks\",\n-                                nodeAddress.getFullAddress(), getBlocksResponse.getBlocks().size());\n-                        listener.onComplete(getBlocksResponse);\n-                    } else {\n-                        log.warn(\"Nonce not matching. That can happen rarely if we get a response after a canceled \" +\n-                                        \"handshake (timeout causes connection close but peer might have sent a msg before \" +\n-                                        \"connection was closed).\\n\\t\" +\n-                                        \"We drop that message. nonce={} / requestNonce={}\",\n-                                nonce, getBlocksResponse.getRequestNonce());\n-                    }\n-                } else {\n-                    log.warn(\"We have stopped already. We ignore that onDataRequest call.\");\n-                }\n-            } else {\n-                log.warn(\"We got a message from ourselves. That should never happen.\");\n+            if (stopped) {\n+                log.warn(\"We have stopped already. We ignore that onDataRequest call.\");\n+                return;\n+            }\n+\n+            Optional<NodeAddress> optionalNodeAddress = connection.getPeersNodeAddressOptional();\n+            if (!optionalNodeAddress.isPresent()) {\n+                log.warn(\"Peers node address is not present, that is not expected.\");\n+                // We do not return here as in case the connection has been created from the peers side we might not\n+                // have the address set. As we check the nonce later we do not care that much for the check if the\n+                // connection address is the same as the one we used.\n+            } else if (!optionalNodeAddress.get().equals(nodeAddress)) {\n+                log.warn(\"Peers node address is the same we requested. We ignore that message.\");\n+                return;\n             }\n+\n+            GetBlocksResponse getBlocksResponse = (GetBlocksResponse) networkEnvelope;\n+            if (getBlocksResponse.getRequestNonce() != nonce) {\n+                log.warn(\"Nonce not matching. That can happen rarely if we get a response after a canceled \" +\n+                                \"handshake (timeout causes connection close but peer might have sent a msg before \" +\n+                                \"connection was closed).\\n\\t\" +\n+                                \"We drop that message. nonce={} / requestNonce={}\",\n+                        nonce, getBlocksResponse.getRequestNonce());\n+                return;\n+            }\n+\n+            cleanup();", "originalCommit": "3babce8a9f4ba401e33fc331c0a34c821c13d361", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NTQyNA==", "url": "https://github.com/bisq-network/bisq/pull/4851#discussion_r536195424", "bodyText": "cleanup calls stopTimeoutTimer. But will consolidate cancel/stop/cleanup", "author": "chimp1984", "createdAt": "2020-12-04T15:49:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2NDg4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5363c8d5058c6bd25d9d1ca835520970d6e12a66", "chunk": "diff --git a/core/src/main/java/bisq/core/dao/node/lite/network/RequestBlocksHandler.java b/core/src/main/java/bisq/core/dao/node/lite/network/RequestBlocksHandler.java\nindex 0b884dc72f..712b2a1d86 100644\n--- a/core/src/main/java/bisq/core/dao/node/lite/network/RequestBlocksHandler.java\n+++ b/core/src/main/java/bisq/core/dao/node/lite/network/RequestBlocksHandler.java\n\n@@ -193,17 +189,20 @@ public class RequestBlocksHandler implements MessageListener {\n                 return;\n             }\n \n-            cleanup();\n+            terminate();\n             log.info(\"We received from peer {} a BlocksResponse with {} blocks\",\n                     nodeAddress.getFullAddress(), getBlocksResponse.getBlocks().size());\n             listener.onComplete(getBlocksResponse);\n         }\n     }\n \n-    public void stop() {\n-        cleanup();\n+    public void terminate() {\n+        stopped = true;\n+        networkNode.removeMessageListener(this);\n+        stopTimeoutTimer();\n     }\n \n+\n     ///////////////////////////////////////////////////////////////////////////////////////////\n     // Private\n     ///////////////////////////////////////////////////////////////////////////////////////////\n"}}, {"oid": "4a05e5bf0d5c5a84678ff032e987ea5997300af9", "url": "https://github.com/bisq-network/bisq/commit/4a05e5bf0d5c5a84678ff032e987ea5997300af9", "message": "Improve getBlocks request handling", "committedDate": "2020-12-28T17:24:35Z", "type": "commit"}, {"oid": "5363c8d5058c6bd25d9d1ca835520970d6e12a66", "url": "https://github.com/bisq-network/bisq/commit/5363c8d5058c6bd25d9d1ca835520970d6e12a66", "message": "Remove cancel,cleanup and stop method. Use terminate instead.\nFix typo", "committedDate": "2020-12-28T17:24:35Z", "type": "commit"}, {"oid": "5e39477fca94b5fd8b87b034f0977b8e0a31bd96", "url": "https://github.com/bisq-network/bisq/commit/5e39477fca94b5fd8b87b034f0977b8e0a31bd96", "message": "Refactor: Use terminate instead of cancel", "committedDate": "2020-12-28T17:24:35Z", "type": "commit"}, {"oid": "0be451a13647b2ed2f682037257e3eb9725b9b12", "url": "https://github.com/bisq-network/bisq/commit/0be451a13647b2ed2f682037257e3eb9725b9b12", "message": "Fix typos", "committedDate": "2020-12-28T17:24:35Z", "type": "commit"}, {"oid": "357c980390bbd5739ddaaa24eca77b923a943be5", "url": "https://github.com/bisq-network/bisq/commit/357c980390bbd5739ddaaa24eca77b923a943be5", "message": "Fix leftovers from debugging.\nUse else if\nFix typo", "committedDate": "2020-12-28T17:24:35Z", "type": "commit"}, {"oid": "357c980390bbd5739ddaaa24eca77b923a943be5", "url": "https://github.com/bisq-network/bisq/commit/357c980390bbd5739ddaaa24eca77b923a943be5", "message": "Fix leftovers from debugging.\nUse else if\nFix typo", "committedDate": "2020-12-28T17:24:35Z", "type": "forcePushed"}, {"oid": "fe44a343d0d627cf567d8a657880f2108b62104a", "url": "https://github.com/bisq-network/bisq/commit/fe44a343d0d627cf567d8a657880f2108b62104a", "message": "Remove \"hack\" for removal of blockDownloadListener\nRename params\nCleanups", "committedDate": "2020-12-28T18:17:06Z", "type": "commit"}, {"oid": "768541664bdfd3f45f101ca2bb4fdc497fb74ed9", "url": "https://github.com/bisq-network/bisq/commit/768541664bdfd3f45f101ca2bb4fdc497fb74ed9", "message": "Use stream API\nAdd checks to tryWithNewSeedNode method\nCleanups", "committedDate": "2020-12-28T18:18:19Z", "type": "commit"}, {"oid": "1fc8905634a2225678f8ad3966f3772ce9feeb02", "url": "https://github.com/bisq-network/bisq/commit/1fc8905634a2225678f8ad3966f3772ce9feeb02", "message": "Improve logs\nCleanups", "committedDate": "2020-12-28T18:18:45Z", "type": "commit"}, {"oid": "862b12fe035d27c551b17d510e68eefa062d5528", "url": "https://github.com/bisq-network/bisq/commit/862b12fe035d27c551b17d510e68eefa062d5528", "message": "Apply code inspection\nCleanups", "committedDate": "2020-12-28T18:34:50Z", "type": "commit"}]}