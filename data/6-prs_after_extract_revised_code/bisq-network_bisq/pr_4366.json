{"pr_number": 4366, "pr_title": "Add API test harness for Linux & OSX", "pr_createdAt": "2020-07-09T19:40:42Z", "pr_url": "https://github.com/bisq-network/bisq/pull/4366", "timeline": [{"oid": "1de6239527dfcc2c84a9415161fa37ec3d705511", "url": "https://github.com/bisq-network/bisq/commit/1de6239527dfcc2c84a9415161fa37ec3d705511", "message": "Shorten line length < 120 chars", "committedDate": "2020-08-24T14:03:26Z", "type": "commit"}, {"oid": "88b5e9dbad0df34c692d153ff27e7a939553d16f", "url": "https://github.com/bisq-network/bisq/commit/88b5e9dbad0df34c692d153ff27e7a939553d16f", "message": "Add configuration support\n\nApiTestConfig works like :common Config, but specific to this subproject.\n\nBisqAppConfig is an enumeration specifying Bisq desktop and daemon\noptions for running seednode, arbnode, bob & alices nodes in regtest /\nfull-dao mode.", "committedDate": "2020-07-09T18:11:42Z", "type": "commit"}, {"oid": "e0c27eedcf7671365faf31ef4dcabd2e11aead2d", "url": "https://github.com/bisq-network/bisq/commit/e0c27eedcf7671365faf31ef4dcabd2e11aead2d", "message": "Add main resource files\n\n* apitest.properties - config file for customizing ApiTestConfig\n  options\n\n* logback.xml - logging config file, will override logback files\n  found in classpath\n\n* bitcoin.conf - bitcoin-core regtest config file, overwritten\n  during startup with correct path to blocknofity\n\n* blocknotify - bitcoin-core blocknotify config file", "committedDate": "2020-07-09T18:27:01Z", "type": "commit"}, {"oid": "77b6878ec6b9dbf4aa2fa113dd1aa21f12a348f6", "url": "https://github.com/bisq-network/bisq/commit/77b6878ec6b9dbf4aa2fa113dd1aa21f12a348f6", "message": "Add script to get Bisq app pid\n\nFinding the pid of background linux/java processes has been\ndifficult to do from java, so a bash script is provided to\nsimplify the task.", "committedDate": "2020-07-09T18:30:22Z", "type": "commit"}, {"oid": "c0c75e247140c1a7b4e77629b50e11c1eb8fbb50", "url": "https://github.com/bisq-network/bisq/commit/c0c75e247140c1a7b4e77629b50e11c1eb8fbb50", "message": "Support starting bitcoin & bisq apps on Linux\n\nThe apitest.linux package is for running random bash commands,\nrunning 'bitcoind -regtest', running random 'bitcoin-cli -regtest'\ncommands, and spinning up Bisq apps such as seednode, arbnode,\nand bob & alice nodes.\n\nAll but random bash and bitcoin-cli commands are run in the background.\n\nThe bitcoin-cli response processing is crude;  a more sophiticated\nbitcoin-core rpc interface is not in the scope of this PR.", "committedDate": "2020-07-09T18:35:45Z", "type": "commit"}, {"oid": "ae3b263cacbd699f62545b88070e10e25900f191", "url": "https://github.com/bisq-network/bisq/commit/ae3b263cacbd699f62545b88070e10e25900f191", "message": "Add :apitest main driver, setup task & dummy tests\n\nThe driver class uses an ExecutorService to submit Callable\ntasks for starting bitcoind and Bisq nodes as Linux background\nprocesses.\n\nBy default, ApiTestMain starts background processes to support\nregtest/dao testing, runs a few bitcoin-cli commands, then\nshuts down all background processes before exiting.\n(Actual API test suites have not been implemented yet.)\n\nApiTestConfig options can be used to skip tests and/or leave\nbackground processes running indefinitely.", "committedDate": "2020-07-09T18:49:12Z", "type": "commit"}, {"oid": "e9baebc443567ad8835c68a8cae07bf3570aede2", "url": "https://github.com/bisq-network/bisq/commit/e9baebc443567ad8835c68a8cae07bf3570aede2", "message": "Add build tasks for installing dao-setup files\n\nThis gradle file is 'applied' by the main build file.\n\nUsage:\n\n  Run a full clean, build, download dao-setup.zip,\n  and install the zip files contents in directory\n  apitest/build/resources/main:\n\n    ./gradlew clean build :apitest:installDaoSetup\n\n  Download (if necessary) the dao-setup.zip file\n  and install its contents in directory\n  apitest/build/resources/main  (no build).\n\n    ./gradlew :apitest:installDaoSetup", "committedDate": "2020-07-09T19:03:46Z", "type": "commit"}, {"oid": "2cd80aaa6016de83840fd2e80020697d0006ec0f", "url": "https://github.com/bisq-network/bisq/commit/2cd80aaa6016de83840fd2e80020697d0006ec0f", "message": "Add subproject :apitest to gradle build file", "committedDate": "2020-07-09T19:15:29Z", "type": "commit"}, {"oid": "09929c833f6e95e14d84cc1115605339c829c13b", "url": "https://github.com/bisq-network/bisq/commit/09929c833f6e95e14d84cc1115605339c829c13b", "message": "Fix codacy problems\n\nUnnecessary use of fully qualified name 'System.exit' due to existing\nstatic import 'java.lang.System.exit'.  (line 100)\n\nAvoid throwing raw exception types.  (lines 295, 302)", "committedDate": "2020-07-09T19:49:16Z", "type": "commit"}, {"oid": "efbaa5be732b17b52c7d08c34d429a7fc70daf15", "url": "https://github.com/bisq-network/bisq/commit/efbaa5be732b17b52c7d08c34d429a7fc70daf15", "message": "Fix codacy problems\n\nAvoid throwing raw exception types.\n\nCombine nested if statements.", "committedDate": "2020-07-09T19:54:03Z", "type": "commit"}, {"oid": "05d0ce0ef8a22bd55988f8695f87bcb2afc7d0d8", "url": "https://github.com/bisq-network/bisq/commit/05d0ce0ef8a22bd55988f8695f87bcb2afc7d0d8", "message": "Fix codacy problem\n\nAvoid throwing null pointer exceptions.", "committedDate": "2020-07-09T19:56:09Z", "type": "commit"}, {"oid": "ca378cdd132b6482fa3c22fdc10ba20a4a9f2279", "url": "https://github.com/bisq-network/bisq/commit/ca378cdd132b6482fa3c22fdc10ba20a4a9f2279", "message": "Fix error msg spacing", "committedDate": "2020-07-10T17:24:35Z", "type": "commit"}, {"oid": "798fde847b23bd6cfda452ebe51d7bf000cdd984", "url": "https://github.com/bisq-network/bisq/commit/798fde847b23bd6cfda452ebe51d7bf000cdd984", "message": "Fix error msgs", "committedDate": "2020-07-10T17:27:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4NjUzNw==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r452986537", "bodyText": "export LD_LIBRARY_PATH= doesn't seem to be necessary with my distribution of bitcoind. Also, config.bitcoinPath seems to expect to be pointed to the bin sub-directory of bitcoin-core's home (the one that contains the bitcoind executable). That's a bit unexpected. I think it's more intuitive for it to point to the executable directly, or alternatively to bitcoin-core's home directory.", "author": "dmos62", "createdAt": "2020-07-10T17:48:36Z", "path": "apitest/src/main/java/bisq/apitest/linux/BitcoinDaemon.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.linux;\n+\n+import java.io.IOException;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static bisq.apitest.linux.BashCommand.isAlive;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+\n+\n+import bisq.apitest.config.ApiTestConfig;\n+\n+// Some cmds:\n+// bitcoin-cli -regtest generatetoaddress 1 \"2MyBq4jbtDF6CfKNrrQdp7qkRc8mKuCpKno\"\n+// bitcoin-cli -regtest getbalance\n+// note:  getbalance does not include immature coins (<100 blks deep)\n+// bitcoin-cli -regtest getbalances\n+// bitcoin-cli -regtest getrpcinfo\n+\n+@Slf4j\n+public class BitcoinDaemon extends AbstractLinuxProcess implements LinuxProcess {\n+\n+    public BitcoinDaemon(ApiTestConfig config) {\n+        super(\"bitcoind\", config);\n+    }\n+\n+    @Override\n+    public void start() throws InterruptedException, IOException {\n+        String bitcoindCmd = \"export LD_LIBRARY_PATH=\" + config.berkeleyDbLibPath + \";\"\n+                + \" \" + config.bitcoinPath + \"/bitcoind\"\n+                + \" -datadir=\" + config.bitcoinDatadir\n+                + \" -daemon\";", "originalCommit": "05d0ce0ef8a22bd55988f8695f87bcb2afc7d0d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5NTUyNQ==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r453195525", "bodyText": "You no longer need to configure a BerkeleyDb lib path if your bitcoin-core binary is statically linked to BerkeleyDb.  The berkeleyDbLibPath option now defaults to an empty string.  If not set, no export LD_LIBRARY_PATH will not be pre-pended to the bitcoind command.", "author": "ghubstan", "createdAt": "2020-07-11T13:33:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4NjUzNw=="}], "type": "inlineReview", "revised_code": {"commit": "1de6239527dfcc2c84a9415161fa37ec3d705511", "chunk": "diff --git a/apitest/src/main/java/bisq/apitest/linux/BitcoinDaemon.java b/apitest/src/main/java/bisq/apitest/linux/BitcoinDaemon.java\nindex ac958431a4..cc2e495200 100644\n--- a/apitest/src/main/java/bisq/apitest/linux/BitcoinDaemon.java\n+++ b/apitest/src/main/java/bisq/apitest/linux/BitcoinDaemon.java\n\n@@ -22,19 +22,14 @@ import java.io.IOException;\n import lombok.extern.slf4j.Slf4j;\n \n import static bisq.apitest.linux.BashCommand.isAlive;\n+import static java.lang.String.format;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static joptsimple.internal.Strings.EMPTY;\n \n \n \n import bisq.apitest.config.ApiTestConfig;\n \n-// Some cmds:\n-// bitcoin-cli -regtest generatetoaddress 1 \"2MyBq4jbtDF6CfKNrrQdp7qkRc8mKuCpKno\"\n-// bitcoin-cli -regtest getbalance\n-// note:  getbalance does not include immature coins (<100 blks deep)\n-// bitcoin-cli -regtest getbalances\n-// bitcoin-cli -regtest getrpcinfo\n-\n @Slf4j\n public class BitcoinDaemon extends AbstractLinuxProcess implements LinuxProcess {\n \n"}}, {"oid": "e61a42dbb44bdacaa15d3ee8e4f9f7720ab7ddf2", "url": "https://github.com/bisq-network/bisq/commit/e61a42dbb44bdacaa15d3ee8e4f9f7720ab7ddf2", "message": "Remove MaxRAM from DEFAULT_JVM_OPTS\n\nThere is no need for this as any JavaFX based :desktop instances\nwill be started as background linux processes.", "committedDate": "2020-07-10T18:00:50Z", "type": "commit"}, {"oid": "898219aba5671715020f877451adcaebbca8ef5e", "url": "https://github.com/bisq-network/bisq/commit/898219aba5671715020f877451adcaebbca8ef5e", "message": "Assume bitcoin-core is statically linked to berkeley-db\n\nThe `berkeleyDbLibPath` option now defaults to an empty string.\nIf not set to a berkeley lib path on the command line or the\napitest.properties file, this option is ignored, and 'bitcoind'\nwill be started without first exporting the berkeley db library\npath.\n\nIn other words:  If the bitcoind binary is dynamically linked to\nberkeley db libs, export the configured berkeley-db lib path before\nstarting 'bitcoind'.  If statically linked,  the berkeley db lib\npath will not be exported.\n\nAlso fixed exception msgs to show missing config file's absolute path.", "committedDate": "2020-07-11T13:26:26Z", "type": "commit"}, {"oid": "a1e2536ed5822997d116e5ae3576053ec0dd6eb6", "url": "https://github.com/bisq-network/bisq/commit/a1e2536ed5822997d116e5ae3576053ec0dd6eb6", "message": "Fix hanging background process problem\n\nSetupTask submissions for Bisq background apps seednode, arbnode,\netc., would not always complete due to a blocking stderr stream\nhandler thread.join() call.  This change makes waiting on a bash\nprocess err stream optional.", "committedDate": "2020-07-11T21:15:17Z", "type": "commit"}, {"oid": "851902117d238939f633a1dcb38a47ecc5958d33", "url": "https://github.com/bisq-network/bisq/commit/851902117d238939f633a1dcb38a47ecc5958d33", "message": "Add line break in front of port config", "committedDate": "2020-07-12T16:23:53Z", "type": "commit"}, {"oid": "87525ca85db342c4e2db5b59e684694055d652db", "url": "https://github.com/bisq-network/bisq/commit/87525ca85db342c4e2db5b59e684694055d652db", "message": "Move test setup scaffolding into new Scaffold class\n\nApiTestMain will run all defined tests, but we also want to run\nindividual test suites and test cases, and they will need to\nrun the setup tasks as well.", "committedDate": "2020-07-12T16:36:10Z", "type": "commit"}, {"oid": "2c10836a69d18eff24073cd8cfdac4305314df14", "url": "https://github.com/bisq-network/bisq/commit/2c10836a69d18eff24073cd8cfdac4305314df14", "message": "Expose grpc service stubs\n\nAdded :proto to the :apitest classpath for access to grpc\nservice stubs (to be) used in method (unit) tests.  Added new\nGrpcStubs class to expose the grpc service stubs to method and\nscenario tests.\n\nThe larger goal of :apitest is end to end testing, where :cli's\nconsole output is checked for correctness.\n\nThis change partially addresses two other important use cases:\n\n * \"method\" testing -- an analog to unit testing\n * \"scenario\" testing -- an analog to narrow functional testing\n\nFor example, tests in the apitest.method package will directly\ncall grpc services, and asserts will be made on the return values\ninstead of console output.\n\nTests in the apitest.scenario package will check correctness\nfor broader use cases, such as funding a wallet, encrypting then\nunlocking a wallet  for a specific time frame, or checking error\nmessages from the server when a \"getbalance\" call is made after\nan \"unlockwallet\" timeout has expired.\n\nThe broader end to end tests will not use grpc stubs.", "committedDate": "2020-07-12T16:55:08Z", "type": "commit"}, {"oid": "ffe376e8dcf8dabdf9357e873f255611a4a71a3e", "url": "https://github.com/bisq-network/bisq/commit/ffe376e8dcf8dabdf9357e873f255611a4a71a3e", "message": "Fix codacy problems\n\nAvoid throwing raw exception types.\n\nDocument empty method body.", "committedDate": "2020-07-12T17:39:20Z", "type": "commit"}, {"oid": "390cba1b75cfd10835a6999f119c912c200afa48", "url": "https://github.com/bisq-network/bisq/commit/390cba1b75cfd10835a6999f119c912c200afa48", "message": "Fix codacy problem\n\nCodacy wants comments inside an empty method.", "committedDate": "2020-07-12T17:53:32Z", "type": "commit"}, {"oid": "96cabfb17792b106b6d378738b399a32cefffc51", "url": "https://github.com/bisq-network/bisq/commit/96cabfb17792b106b6d378738b399a32cefffc51", "message": "Support @Skip on test classes and methods\n\nAdd super class for all test types (method, scenario, end-to-end),\nand an class & method level annotation for skipping tests.", "committedDate": "2020-07-13T00:44:21Z", "type": "commit"}, {"oid": "0edcc3baa829613b2586225989c8412544e6031f", "url": "https://github.com/bisq-network/bisq/commit/0edcc3baa829613b2586225989c8412544e6031f", "message": "Add first method test cases\n\nThese are method test cases for gRPC methods that have already been\nwell tested by :cli/test.sh", "committedDate": "2020-07-13T00:48:22Z", "type": "commit"}, {"oid": "81aeeddc4acda6dfba1671aa464894fe5519a284", "url": "https://github.com/bisq-network/bisq/commit/81aeeddc4acda6dfba1671aa464894fe5519a284", "message": "Add MethodTestSuite", "committedDate": "2020-07-13T00:52:23Z", "type": "commit"}, {"oid": "8da46465844bd7bde70ac1cef4f42830ff9be365", "url": "https://github.com/bisq-network/bisq/commit/8da46465844bd7bde70ac1cef4f42830ff9be365", "message": "Update bats version test", "committedDate": "2020-07-13T00:53:58Z", "type": "commit"}, {"oid": "db5a685468dbc1ea236fc4615e466747b71e131f", "url": "https://github.com/bisq-network/bisq/commit/db5a685468dbc1ea236fc4615e466747b71e131f", "message": "Make init() method public", "committedDate": "2020-07-13T00:56:51Z", "type": "commit"}, {"oid": "65e3370d5137d135f5d975ea256068f13c2ff394", "url": "https://github.com/bisq-network/bisq/commit/65e3370d5137d135f5d975ea256068f13c2ff394", "message": "Add license note, format tearDown(), fix comment", "committedDate": "2020-07-13T01:03:46Z", "type": "commit"}, {"oid": "fae661c9125910773a32ec77db6ea9c8f2db8d74", "url": "https://github.com/bisq-network/bisq/commit/fae661c9125910773a32ec77db6ea9c8f2db8d74", "message": "Run MethodTestSuite", "committedDate": "2020-07-13T01:05:36Z", "type": "commit"}, {"oid": "458d2f3f4f624028131e0b8a98011719f2f18021", "url": "https://github.com/bisq-network/bisq/commit/458d2f3f4f624028131e0b8a98011719f2f18021", "message": "Add license note", "committedDate": "2020-07-13T01:15:16Z", "type": "commit"}, {"oid": "4d5c7679020670f0b4d28e77d93f7149e6fb4b9b", "url": "https://github.com/bisq-network/bisq/commit/4d5c7679020670f0b4d28e77d93f7149e6fb4b9b", "message": "Fix codacy problem\n\nAdd comment inside empty method.", "committedDate": "2020-07-13T13:28:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgxODM2NA==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r453818364", "bodyText": "How do these MaxRAM settings relate to our discussion about similar settings in build.gradle?", "author": "dmos62", "createdAt": "2020-07-13T17:39:18Z", "path": "apitest/src/main/java/bisq/apitest/config/BisqAppConfig.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.config;\n+\n+import bisq.seednode.SeedNodeMain;\n+\n+import bisq.desktop.app.BisqAppMain;\n+\n+\n+\n+import bisq.daemon.app.BisqDaemonMain;\n+\n+/**\n+ Some non user configurable Bisq seednode, arb node, bob and alice daemon option values.\n+ @see <a href=\"https://github.com/bisq-network/bisq/blob/master/docs/dev-setup.md\">dev-setup.md</a>\n+ @see <a href=\"https://github.com/bisq-network/bisq/blob/master/docs/dao-setup.md\">dao-setup.md</a>\n+ */\n+@SuppressWarnings(\"unused\")\n+public enum BisqAppConfig {\n+\n+    seednode(\"bisq-BTC_REGTEST_Seed_2002\",\n+            \"bisq-seednode\",\n+            \"\\\"-XX:MaxRAM=2g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            SeedNodeMain.class.getName(),\n+            2002,\n+            5120,\n+            -1),\n+    arbdaemon(\"bisq-BTC_REGTEST_Arb_dao\",\n+            \"bisq-daemon\",\n+            \"\\\"-XX:MaxRAM=2g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            BisqDaemonMain.class.getName(),\n+            4444,\n+            5121,\n+            9997),\n+    arbdesktop(\"bisq-BTC_REGTEST_Arb_dao\",\n+            \"bisq-desktop\",\n+            \"\\\"-XX:MaxRAM=3g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            BisqAppMain.class.getName(),\n+            4444,\n+            5121,\n+            -1),\n+    alicedaemon(\"bisq-BTC_REGTEST_Alice_dao\",\n+            \"bisq-daemon\",\n+            \"\\\"-XX:MaxRAM=2g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            BisqDaemonMain.class.getName(),\n+            7777,\n+            5122,\n+            9998),\n+    alicedesktop(\"bisq-BTC_REGTEST_Alice_dao\",\n+            \"bisq-desktop\",\n+            \"\\\"-XX:MaxRAM=4g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            BisqAppMain.class.getName(),\n+            7777,\n+            5122,\n+            -1),\n+    bobdaemon(\"bisq-BTC_REGTEST_Bob_dao\",\n+            \"bisq-daemon\",\n+            \"\\\"-XX:MaxRAM=2g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            BisqDaemonMain.class.getName(),\n+            8888,\n+            5123,\n+            9999),\n+    bobdesktop(\"bisq-BTC_REGTEST_Bob_dao\",\n+            \"bisq-desktop\",\n+            \"\\\"-XX:MaxRAM=4g -Dlogback.configurationFile=apitest/build/resources/main/logback.xml\\\"\",\n+            BisqAppMain.class.getName(),\n+            8888,\n+            5123,\n+            -1);", "originalCommit": "4d5c7679020670f0b4d28e77d93f7149e6fb4b9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5MDc3Ng==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r453990776", "bodyText": "Limiting RAM for bisq-apitest was not necessary -- and removed from the bisq-apitest script -- because it is a headless app.  But we need to limit RAM for :desktop apps started by bisq-apitest, like we do for the Linux Bisq UI.\nAbove, you mentioned:\n\n\nIs this to do with bisq using too much RAM in some cases? But wasn't that only relevant for long-running processes?\n\n\nThe Bisq UI is using too much without this limit, especially when starting it on an empty datadir.  This is why BisqAppConfig has a larger limit for bobdesktop than bobdaemon.  It's not really necessary for daemons at this stage, but it might be useful for profiling long running tests in the future.", "author": "ghubstan", "createdAt": "2020-07-13T22:48:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgxODM2NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "35ff4e5d793dffb3cec7801dffb06839f0ad06f9", "url": "https://github.com/bisq-network/bisq/commit/35ff4e5d793dffb3cec7801dffb06839f0ad06f9", "message": "Delete commented statement", "committedDate": "2020-07-13T22:48:59Z", "type": "commit"}, {"oid": "d782e8d8ecc645b0c4ef5631d462f478f25ac1d1", "url": "https://github.com/bisq-network/bisq/commit/d782e8d8ecc645b0c4ef5631d462f478f25ac1d1", "message": "Do not run dummy test from driver", "committedDate": "2020-07-13T22:50:33Z", "type": "commit"}, {"oid": "84976fef35004d37860e4b3ecf949f566d14d4e8", "url": "https://github.com/bisq-network/bisq/commit/84976fef35004d37860e4b3ecf949f566d14d4e8", "message": "Fix varible names", "committedDate": "2020-07-13T22:51:27Z", "type": "commit"}, {"oid": "2678b31a18cfe71e51512fde7d6bcddcffb5ad9e", "url": "https://github.com/bisq-network/bisq/commit/2678b31a18cfe71e51512fde7d6bcddcffb5ad9e", "message": "Remove test scaffolding logic from ApiTestConfig", "committedDate": "2020-07-13T22:52:21Z", "type": "commit"}, {"oid": "486f06beefb0d8bade970784437b8993298ad0db", "url": "https://github.com/bisq-network/bisq/commit/486f06beefb0d8bade970784437b8993298ad0db", "message": "Refresh dao-setup files in Scaffold setup\n\nMany test cases will need to run on a clean, initialized dao-setup;\nwe do not want call dao-setup.gradle tasks from Java.\n\nFor now, every JUnit test case will refresh the dao-setup data in\n@BeforeClass, but @AfterClass will not clean out the dao-setup files.\nWe want to be able to look at bitcoin-core and bisq app data & log\nfiles after a test.\n\nGiven the difficulty of refreshing dao-setup files using Java,\nI took a short cut and used the apitest.linux pkg's BashCommand\nto replace dao-setup files.\n\nSome bitcoin.conf and blocknotify configuratation logic was\nalso moved from ApiTestConfig to Scaffold in this commit.", "committedDate": "2020-07-13T22:54:39Z", "type": "commit"}, {"oid": "e17480ad8f2f5a749cbad908fc7a7a1e011fa520", "url": "https://github.com/bisq-network/bisq/commit/e17480ad8f2f5a749cbad908fc7a7a1e011fa520", "message": "Remove hacked method tests\n\nAlthough JUnit is geared towards running randomly ordered unit\ntests, we can use it to write API tests to be run in a pre-defined\norder.  This is necessary because API tests will be functional\n(narrow to broad) and end-to-end;  we want to be able to write\n@Test methods that run in @Order.\n\nThe next commit will add a JUnit OrderedRunner class, and an @Order\nannotation.", "committedDate": "2020-07-13T23:13:30Z", "type": "commit"}, {"oid": "080952b1d7efcdadc9a30e29ba2a27e0e8787ec2", "url": "https://github.com/bisq-network/bisq/commit/080952b1d7efcdadc9a30e29ba2a27e0e8787ec2", "message": "Support @Order-ing of JUnit tests", "committedDate": "2020-07-13T23:30:48Z", "type": "commit"}, {"oid": "4f08ec3edc01f39446f92bf8f1c45934efd0ea41", "url": "https://github.com/bisq-network/bisq/commit/4f08ec3edc01f39446f92bf8f1c45934efd0ea41", "message": "Add first JUnit 'method' tests\n\nThese @Order-ed test cases should be run with OrderedRunner.\n\nThey are called 'method' tests because they are the closest\nthing to an API 'unit' test.  Method tests are not end to end\ntests;  they have access to gRPC service stubs and do asserts\non Java values.  We can write 'method' tests for the new\ngRPC methods we need to implement (test driven development).\n\nSome notes about the three API test categories...\n\nThe plan is to categorize some of the narrower functional tests\nas 'scenario' tests.  Like 'method' tests, 'scenario' tests will\nhave  access to gRPC service stubs and do asserts on Java values,\nbut they will cover use cases requiring several gRPC and bitcoin-cli\nmethod calls.  One example is funding a wallet:  using bitcoin-cli\nand bisq-cli to generate new addresses, send BTC from bitcoin-core\nto a Bisq wallet, generate a bitcoin block, and check the Bisq\nwallet's balance.  Another example is wallet unlocking/locking\nscenarios that are a bit more complex than 'unit' or 'method' tests.\n\nThe third category of tests will be end to end, and live in an\n'e2e' package.  They will cover more complex use cases and\ndo asserts on the Bisq CLI's console output (stdout/stderr),\nnot return values from gRPC service stubs.\n\nThere may sometimes be a fine line between what is a 'scenario'\ntest and an 'e2e' test.  But what starts out as a 'scenario' test\nduring test driven development can migrate to an 'e2e' test after\nthorough testing in the quicker 'scenario' dev/test cycle.", "committedDate": "2020-07-13T23:34:25Z", "type": "commit"}, {"oid": "84af0924010b2225e6f899a098e6ebce8c38ac3e", "url": "https://github.com/bisq-network/bisq/commit/84af0924010b2225e6f899a098e6ebce8c38ac3e", "message": "Add driver for running method tests\n\nAPI test cases are not in a maven/gradle project test folder.\nIDEs may not automatically configure JUnit test launchers,\nand a gradle build command will not automatically run tests.\nThis class is provided as a convenience until gradle tasks\nfor running test cases are implemented.", "committedDate": "2020-07-14T01:17:05Z", "type": "commit"}, {"oid": "1acf340f796944befbdefb2f9a06968ed0641cd7", "url": "https://github.com/bisq-network/bisq/commit/1acf340f796944befbdefb2f9a06968ed0641cd7", "message": "Get rid of references to removed @Skip annotation", "committedDate": "2020-07-14T13:35:14Z", "type": "commit"}, {"oid": "8ed44b8ceee4e77f3b5b53f06c205cb47757b19e", "url": "https://github.com/bisq-network/bisq/commit/8ed44b8ceee4e77f3b5b53f06c205cb47757b19e", "message": "Remove @Skip annotaion\n\nWe are using JUnit now and can use @Ignore", "committedDate": "2020-07-14T13:37:32Z", "type": "commit"}, {"oid": "45c1a97938a0ae896336a8b5e95ae704e557c58e", "url": "https://github.com/bisq-network/bisq/commit/45c1a97938a0ae896336a8b5e95ae704e557c58e", "message": "Fix codacy problem in bash script\n\nDouble quote to prevent globbing and word splitting.", "committedDate": "2020-07-14T15:21:13Z", "type": "commit"}, {"oid": "6b738f74439257d29815260e0134908b374f5cad", "url": "https://github.com/bisq-network/bisq/commit/6b738f74439257d29815260e0134908b374f5cad", "message": "Replace config 'numSetupTasks' with 'supportingApps'\n\nThis change replaces the non-intuitive numSetupTasks=<Integer>\nconfiguration option with a supportingApps=<String> option.  It\naccepts a comma delimited list of app names, and determines\nwhich background apps will be started in @BeforeClass.\n\nNone of the current method tests need all supporting apps, and\nthis change will reduce scaffolding setup and teardown time.\n\nThe current method test cases were changed to use this option.\nWalletProtectionTest and GetVersionTest only need to start \"alicedaemon\".\nGetBalanceTest needs \"bitcoind,seednode,arbdaemon,alicedaemon\".", "committedDate": "2020-07-14T15:37:13Z", "type": "commit"}, {"oid": "498939a9fff0eaeb2b2bb49f144674fc84363ec7", "url": "https://github.com/bisq-network/bisq/commit/498939a9fff0eaeb2b2bb49f144674fc84363ec7", "message": "Allow more time for background app shutdown", "committedDate": "2020-07-14T15:41:41Z", "type": "commit"}, {"oid": "5df0b1ec4bbfee3f5c2993099ef430e3c78c9e30", "url": "https://github.com/bisq-network/bisq/commit/5df0b1ec4bbfee3f5c2993099ef430e3c78c9e30", "message": "Refactor ApiTestCase class hierarchy\n\nAlso added a new base ScenarioTest class, which extends\nMethodTest;  Method and Scenario tests cases have access to gRPC\nservice stubs, but end to end test cases should never use them.", "committedDate": "2020-07-14T17:20:26Z", "type": "commit"}, {"oid": "2cf7915f252b0ce205f4a5cc3601f7273fee55c9", "url": "https://github.com/bisq-network/bisq/commit/2cf7915f252b0ce205f4a5cc3601f7273fee55c9", "message": "Add wallet protect method tests\n\nSome of these 'method' tests make more than one gRPC call, but\nthey are for checking correctness of a single gRPC method,\nand don't quite fall into the 'scenario' test category.", "committedDate": "2020-07-14T18:04:42Z", "type": "commit"}, {"oid": "28aefc5cb1b669b7bbd35becafaa2e48c6643fec", "url": "https://github.com/bisq-network/bisq/commit/28aefc5cb1b669b7bbd35becafaa2e48c6643fec", "message": "Add tests for resetting a wallet password", "committedDate": "2020-07-14T19:17:10Z", "type": "commit"}, {"oid": "a00bc4b414de79720b4c57cc0c2ca2efd63bba22", "url": "https://github.com/bisq-network/bisq/commit/a00bc4b414de79720b4c57cc0c2ca2efd63bba22", "message": "Add --bisqAppInitTime=<Long> config option\n\nThis change makes configurable the amount of time (ms) each Bisq\ninstance is given to initialize before starting (a) another Bisq\ninstance, or (b) tests.", "committedDate": "2020-07-15T13:45:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2Njg1MA==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r455066850", "bodyText": "rpcport is configured in ApiTestConfig, but here it's hardcoded.", "author": "dmos62", "createdAt": "2020-07-15T13:50:12Z", "path": "apitest/src/main/java/bisq/apitest/Scaffold.java", "diffHunk": "@@ -0,0 +1,445 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest;\n+\n+import bisq.common.config.BisqHelpFormatter;\n+import bisq.common.storage.FileUtil;\n+import bisq.common.util.Utilities;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.annotation.Nullable;\n+\n+import static bisq.apitest.config.BisqAppConfig.*;\n+import static java.lang.String.format;\n+import static java.lang.System.err;\n+import static java.lang.System.exit;\n+import static java.lang.System.out;\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static java.util.Arrays.stream;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+\n+\n+import bisq.apitest.config.ApiTestConfig;\n+import bisq.apitest.config.BisqAppConfig;\n+import bisq.apitest.linux.BashCommand;\n+import bisq.apitest.linux.BisqApp;\n+import bisq.apitest.linux.BitcoinDaemon;\n+\n+@Slf4j\n+public class Scaffold {\n+\n+    public static final int EXIT_SUCCESS = 0;\n+    public static final int EXIT_FAILURE = 1;\n+\n+    public final ApiTestConfig config;\n+\n+    @Nullable\n+    private SetupTask bitcoindTask;\n+    @Nullable\n+    private Future<SetupTask.Status> bitcoindTaskFuture;\n+    @Nullable\n+    private SetupTask seedNodeTask;\n+    @Nullable\n+    private Future<SetupTask.Status> seedNodeTaskFuture;\n+    @Nullable\n+    private SetupTask arbNodeTask;\n+    @Nullable\n+    private Future<SetupTask.Status> arbNodeTaskFuture;\n+    @Nullable\n+    private SetupTask aliceNodeTask;\n+    @Nullable\n+    private Future<SetupTask.Status> aliceNodeTaskFuture;\n+    @Nullable\n+    private SetupTask bobNodeTask;\n+    @Nullable\n+    private Future<SetupTask.Status> bobNodeTaskFuture;\n+\n+    private final ExecutorService executor;\n+\n+    /**\n+     * Constructor for passing comma delimited list of supporting apps to\n+     * ApiTestConfig, e.g., \"bitcoind,seednode,arbdaemon,alicedaemon,bobdaemon\".\n+     *\n+     * @param supportingApps String\n+     */\n+    public Scaffold(String supportingApps) {\n+        this(new ApiTestConfig(new String[]{\"--supportingApps\", supportingApps}));\n+    }\n+\n+    /**\n+     * Constructor for passing options accepted by ApiTestConfig.\n+     *\n+     * @param args String[]\n+     */\n+    public Scaffold(String[] args) {\n+        this(new ApiTestConfig(args));\n+    }\n+\n+    /**\n+     * Constructor for passing ApiTestConfig instance.\n+     *\n+     * @param config ApiTestConfig\n+     */\n+    public Scaffold(ApiTestConfig config) {\n+        verifyNotWindows();\n+        this.config = config;\n+        this.executor = Executors.newFixedThreadPool(config.supportingApps.size());\n+        if (config.helpRequested) {\n+            config.printHelp(out,\n+                    new BisqHelpFormatter(\n+                            \"Bisq ApiTest\",\n+                            \"bisq-apitest\",\n+                            \"0.1.0\"));\n+            exit(EXIT_SUCCESS);\n+        }\n+    }\n+\n+\n+    public Scaffold setUp() {\n+        try {\n+            installDaoSetupDirectories();\n+\n+            // Start each background process from an executor, then add a shutdown hook.\n+            CountDownLatch countdownLatch = new CountDownLatch(config.supportingApps.size());\n+            startBackgroundProcesses(executor, countdownLatch);\n+            installShutdownHook();\n+\n+            // Wait for all submitted startup tasks to decrement the count of the latch.\n+            Objects.requireNonNull(countdownLatch).await();\n+\n+            // Verify each startup task's future is done.\n+            verifyStartupCompleted();\n+\n+        } catch (Throwable ex) {\n+            err.println(\"Fault: An unexpected error occurred. \" +\n+                    \"Please file a report at https://bisq.network/issues\");\n+            ex.printStackTrace(err);\n+            exit(EXIT_FAILURE);\n+        }\n+        return this;\n+    }\n+\n+    public void tearDown() {\n+        if (!executor.isTerminated()) {\n+            try {\n+                log.info(\"Shutting down executor service ...\");\n+                executor.shutdownNow();\n+                executor.awaitTermination(config.supportingApps.size() * 2000, MILLISECONDS);\n+\n+                SetupTask[] orderedTasks = new SetupTask[]{\n+                        bobNodeTask, aliceNodeTask, arbNodeTask, seedNodeTask, bitcoindTask};\n+                stream(orderedTasks).filter(t -> t != null && t.getLinuxProcess() != null)\n+                        .forEachOrdered(t -> {\n+                            try {\n+                                t.getLinuxProcess().shutdown();\n+                                MILLISECONDS.sleep(1000);\n+                            } catch (IOException | InterruptedException ex) {\n+                                throw new IllegalStateException(ex);\n+                            }\n+                        });\n+\n+                log.info(\"Teardown complete\");\n+            } catch (Exception ex) {\n+                throw new IllegalStateException(ex);\n+            }\n+        }\n+    }\n+\n+    public void installDaoSetupDirectories() {\n+        cleanDaoSetupDirectories();\n+\n+        String srcResourcesDir = Paths.get(\"apitest\", \"src\", \"main\", \"resources\", \"dao-setup\").toFile().getAbsolutePath();\n+        String buildDataDir = config.rootAppDataDir.getAbsolutePath();\n+        try {\n+            if (!new File(srcResourcesDir).exists())\n+                throw new FileNotFoundException(\n+                        format(\"Dao setup dir '%s' not found.  Run gradle :apitest:installDaoSetup\"\n+                                        + \" to download dao-setup.zip and extract contents to resources folder\",\n+                                srcResourcesDir));\n+\n+            BashCommand copyBitcoinRegtestDir = new BashCommand(\n+                    \"cp -rf \" + srcResourcesDir + \"/Bitcoin-regtest/regtest\"\n+                            + \" \" + config.bitcoinDatadir);\n+            if (copyBitcoinRegtestDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not install bitcoin regtest dir\");\n+\n+            BashCommand copyAliceDataDir = new BashCommand(\n+                    \"cp -rf \" + srcResourcesDir + \"/\" + alicedaemon.appName\n+                            + \" \" + config.rootAppDataDir);\n+            if (copyAliceDataDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not install alice data dir\");\n+\n+            BashCommand copyBobDataDir = new BashCommand(\n+                    \"cp -rf \" + srcResourcesDir + \"/\" + bobdaemon.appName\n+                            + \" \" + config.rootAppDataDir);\n+            if (copyBobDataDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not install bob data dir\");\n+\n+            log.info(\"Installed dao-setup files into {}\", buildDataDir);\n+\n+            // Write a bitcoin.conf file with the correct path to the blocknotify script,\n+            // and save it to the build resource dir.\n+            installBitcoinConf();\n+\n+            // Copy the blocknotify script from the src resources dir to the\n+            // build resources dir.  Users may want to edit it sometimes,\n+            // when all default block notifcation ports are being used.\n+            installBitcoinBlocknotify();\n+\n+        } catch (IOException | InterruptedException ex) {\n+            throw new IllegalStateException(\"Could not install dao-setup files from \" + srcResourcesDir, ex);\n+        }\n+    }\n+\n+    private void cleanDaoSetupDirectories() {\n+        String buildDataDir = config.rootAppDataDir.getAbsolutePath();\n+        log.info(\"Cleaning dao-setup data in {}\", buildDataDir);\n+\n+        try {\n+            BashCommand rmBobDataDir = new BashCommand(\"rm -rf \" + config.rootAppDataDir + \"/\" + bobdaemon.appName);\n+            if (rmBobDataDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not delete bob data dir\");\n+\n+            BashCommand rmAliceDataDir = new BashCommand(\"rm -rf \" + config.rootAppDataDir + \"/\" + alicedaemon.appName);\n+            if (rmAliceDataDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not delete alice data dir\");\n+\n+            BashCommand rmArbNodeDataDir = new BashCommand(\"rm -rf \" + config.rootAppDataDir + \"/\" + arbdaemon.appName);\n+            if (rmArbNodeDataDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not delete arbitrator data dir\");\n+\n+            BashCommand rmSeedNodeDataDir = new BashCommand(\"rm -rf \" + config.rootAppDataDir + \"/\" + seednode.appName);\n+            if (rmSeedNodeDataDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not delete seednode data dir\");\n+\n+            BashCommand rmBitcoinRegtestDir = new BashCommand(\"rm -rf \" + config.bitcoinDatadir + \"/regtest\");\n+            if (rmBitcoinRegtestDir.run().getExitStatus() != 0)\n+                throw new IllegalStateException(\"Could not clean bitcoind regtest dir\");\n+\n+        } catch (IOException | InterruptedException ex) {\n+            throw new IllegalStateException(\"Could not clean dao-setup files from \" + buildDataDir, ex);\n+        }\n+    }\n+\n+    private void installBitcoinConf() {\n+        // We write out and install a bitcoin.conf file for regtest/dao mode because\n+        // the path to the blocknotify script is not known until runtime.\n+        String bitcoinConf = \"\\n\"\n+                + \"regtest=1\\n\"\n+                + \"[regtest]\\n\"\n+                + \"peerbloomfilters=1\\n\"\n+                + \"rpcport=18443\\n\"", "originalCommit": "28aefc5cb1b669b7bbd35becafaa2e48c6643fec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA3MzE1NQ==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r455073155", "bodyText": "Oops.  Fixed it and two other hardcoded configs in commit cf3b545.", "author": "ghubstan", "createdAt": "2020-07-15T13:58:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2Njg1MA=="}], "type": "inlineReview", "revised_code": {"commit": "1de6239527dfcc2c84a9415161fa37ec3d705511", "chunk": "diff --git a/apitest/src/main/java/bisq/apitest/Scaffold.java b/apitest/src/main/java/bisq/apitest/Scaffold.java\nindex ddee850a6b..bf0e4c771d 100644\n--- a/apitest/src/main/java/bisq/apitest/Scaffold.java\n+++ b/apitest/src/main/java/bisq/apitest/Scaffold.java\n\n@@ -18,7 +18,6 @@\n package bisq.apitest;\n \n import bisq.common.config.BisqHelpFormatter;\n-import bisq.common.storage.FileUtil;\n import bisq.common.util.Utilities;\n \n import java.nio.file.Files;\n"}}, {"oid": "cf3b54517337a22568ee5883eebb135059a6fe79", "url": "https://github.com/bisq-network/bisq/commit/cf3b54517337a22568ee5883eebb135059a6fe79", "message": "Fix hardcoded bitcoin.conf property values", "committedDate": "2020-07-15T13:56:35Z", "type": "commit"}, {"oid": "d108d89bb2f2881b45f361f6a5e1a973acaf16eb", "url": "https://github.com/bisq-network/bisq/commit/d108d89bb2f2881b45f361f6a5e1a973acaf16eb", "message": "Fix comment and code styling", "committedDate": "2020-07-15T14:13:00Z", "type": "commit"}, {"oid": "c19afebc048fdbf1af706c22d1320878ba8dbe8c", "url": "https://github.com/bisq-network/bisq/commit/c19afebc048fdbf1af706c22d1320878ba8dbe8c", "message": "Fix 'bitcoind not found' error message", "committedDate": "2020-07-15T22:26:16Z", "type": "commit"}, {"oid": "b2417d3e5f326f54dcd95b1ce136d63cc026ee9f", "url": "https://github.com/bisq-network/bisq/commit/b2417d3e5f326f54dcd95b1ce136d63cc026ee9f", "message": "Delete throws clause from method signature", "committedDate": "2020-07-15T23:01:30Z", "type": "commit"}, {"oid": "e0ea9db32ede7512abad818ab8b6ad628a096c04", "url": "https://github.com/bisq-network/bisq/commit/e0ea9db32ede7512abad818ab8b6ad628a096c04", "message": "Fix bitcoind startup error handling\n\nLike Bisq instance startup, bitcoind startup should save any error msg\nfrom bash, print the error msg, and System.exit(1).", "committedDate": "2020-07-15T23:03:47Z", "type": "commit"}, {"oid": "431cbe727f9bee25b5d479e2a96bf5ac89295211", "url": "https://github.com/bisq-network/bisq/commit/431cbe727f9bee25b5d479e2a96bf5ac89295211", "message": "Bump bisqAppInitTime default back up to 5s", "committedDate": "2020-07-15T23:46:46Z", "type": "commit"}, {"oid": "4296d96d4056d537c1473da1a0341194880cd810", "url": "https://github.com/bisq-network/bisq/commit/4296d96d4056d537c1473da1a0341194880cd810", "message": "Remove all sudo related logic from the linux pkg\n\nThe BashCommand wrapper should never be used run run sudo commands,\nand if the word \"sudo\" is found in a bash command, System.exit(1)\nwill be called.", "committedDate": "2020-07-16T19:11:10Z", "type": "commit"}, {"oid": "7d664d9cfdea965aecdeb567ee0225f7c4552d49", "url": "https://github.com/bisq-network/bisq/commit/7d664d9cfdea965aecdeb567ee0225f7c4552d49", "message": "Do not \"killall bitcoind\" processes\n\nJust kill the one we started.", "committedDate": "2020-07-16T20:05:32Z", "type": "commit"}, {"oid": "6edab1a2cd7bd1468e4cb6c1f886180bffc2439c", "url": "https://github.com/bisq-network/bisq/commit/6edab1a2cd7bd1468e4cb6c1f886180bffc2439c", "message": "Create convenient way to call bitcoin-cli from tests\n\nA BitcoinCliHelper class was added.  GetBalanceTest's @BeforeClass\nwas simplified, and it no longer starts up the arbitration node.", "committedDate": "2020-07-16T22:22:51Z", "type": "commit"}, {"oid": "687bcf1d8f65cc9a3878e2ad64746894d9e377ac", "url": "https://github.com/bisq-network/bisq/commit/687bcf1d8f65cc9a3878e2ad64746894d9e377ac", "message": "Add FundWalletScenarioTest\n\nSome refactoring was done to reduce some of the boilerplate.", "committedDate": "2020-07-16T23:53:11Z", "type": "commit"}, {"oid": "2852e3da8b002e08d80c799723190516ea17e8a1", "url": "https://github.com/bisq-network/bisq/commit/2852e3da8b002e08d80c799723190516ea17e8a1", "message": "Add JUnitHelper to run tests from JUnitCore", "committedDate": "2020-07-16T23:54:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ3MTQyMg==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r456471422", "bodyText": "bitcoind has the blocknotify callback for this. Not really a problem now, but something to consider if the number of \"sleeps\" grows cumbersome.", "author": "dmos62", "createdAt": "2020-07-17T14:17:50Z", "path": "apitest/src/main/java/bisq/apitest/scenario/FundWalletScenarioTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.scenario;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static java.lang.Double.parseDouble;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+\n+\n+import bisq.apitest.OrderedRunner;\n+import bisq.apitest.annotation.Order;\n+\n+@Slf4j\n+@RunWith(OrderedRunner.class)\n+public class FundWalletScenarioTest extends ScenarioTest {\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        try {\n+            setUpScaffold(\"bitcoind,seednode,alicedaemon\");\n+            bitcoinCli.generateBlocks(1);\n+            MILLISECONDS.sleep(1500);\n+        } catch (InterruptedException ex) {\n+            fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void testFundWallet() {\n+        long balance = getBalance();  // bisq wallet was initialized with 10 btc\n+        assertEquals(1000000000, balance);\n+\n+        String unusedAddress = getUnusedBtcAddress();\n+\n+        // Given the default tx fee rate, we want to send 2.5 + the fee,\n+        // so the new wallet balance will be exactly 12.5 btc.\n+        // We should calculate the fee based on the fee rate and tx size\n+        // instead of hard coding the fee amount.\n+        double btc = parseDouble(\"2.5\") + parseDouble(\"0.0000336\");\n+        bitcoinCli.sendToAddress(unusedAddress, btc);\n+\n+        bitcoinCli.generateBlocks(1);\n+        sleep(1500);", "originalCommit": "687bcf1d8f65cc9a3878e2ad64746894d9e377ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5OTU3Ng==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r456499576", "bodyText": "This will become a nuisance, but right now I don't know of another way to give :daemon some time to parse new blocks.  (The callback does not reach the :cli.)", "author": "ghubstan", "createdAt": "2020-07-17T15:03:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ3MTQyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUxNDY3Nw==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r456514677", "bodyText": "Oh right, we're waiting for :daemon, not bitcoind. :daemon will probably have a gRPC endpoint for getting notifications about funding events.", "author": "dmos62", "createdAt": "2020-07-17T15:28:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ3MTQyMg=="}], "type": "inlineReview", "revised_code": {"commit": "1de6239527dfcc2c84a9415161fa37ec3d705511", "chunk": "diff --git a/apitest/src/main/java/bisq/apitest/scenario/FundWalletScenarioTest.java b/apitest/src/test/java/bisq/apitest/scenario/FundWalletScenarioTest.java\nsimilarity index 64%\nrename from apitest/src/main/java/bisq/apitest/scenario/FundWalletScenarioTest.java\nrename to apitest/src/test/java/bisq/apitest/scenario/FundWalletScenarioTest.java\nindex 44a9c05801..e95e310eb5 100644\n--- a/apitest/src/main/java/bisq/apitest/scenario/FundWalletScenarioTest.java\n+++ b/apitest/src/test/java/bisq/apitest/scenario/FundWalletScenarioTest.java\n\n@@ -19,33 +19,29 @@ package bisq.apitest.scenario;\n \n import lombok.extern.slf4j.Slf4j;\n \n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n \n-import static java.lang.Double.parseDouble;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n-\n-\n-\n-import bisq.apitest.OrderedRunner;\n-import bisq.apitest.annotation.Order;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n @Slf4j\n-@RunWith(OrderedRunner.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n public class FundWalletScenarioTest extends ScenarioTest {\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void setUp() {\n         try {\n             setUpScaffold(\"bitcoind,seednode,alicedaemon\");\n             bitcoinCli.generateBlocks(1);\n             MILLISECONDS.sleep(1500);\n-        } catch (InterruptedException ex) {\n-            fail(ex.getMessage());\n+        } catch (Exception ex) {\n+            fail(ex);\n         }\n     }\n \n"}}, {"oid": "5d7133a9b4fd178495daa1d2dbcea433715d3e9f", "url": "https://github.com/bisq-network/bisq/commit/5d7133a9b4fd178495daa1d2dbcea433715d3e9f", "message": "Do not subtract fee from 'bitcoin-cli sendtoaddress'\n\nTest cases need to be as simple as possible for now.", "committedDate": "2020-07-17T15:31:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4MDM3OA==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r456480378", "bodyText": "The wallet being funded with 10 BTC is an implicit step in the setup, which feels wrong. Preferably it would be explicit. I couldn't track down where it happens. Comment?", "author": "dmos62", "createdAt": "2020-07-17T14:32:23Z", "path": "apitest/src/main/java/bisq/apitest/method/GetBalanceTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.method;\n+\n+import bisq.proto.grpc.GetBalanceRequest;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+\n+\n+import bisq.apitest.OrderedRunner;\n+import bisq.apitest.annotation.Order;\n+\n+@Slf4j\n+@RunWith(OrderedRunner.class)\n+public class GetBalanceTest extends MethodTest {\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        try {\n+            setUpScaffold(\"bitcoind,seednode,alicedaemon\");\n+\n+            // Have to generate 1 regtest block for alice's wallet to show 10 BTC balance.\n+            bitcoinCli.generateBlocks(1);\n+\n+            // Give the alicedaemon time to parse the new block.\n+            MILLISECONDS.sleep(1500);\n+        } catch (InterruptedException ex) {\n+            fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void testGetBalance() {\n+        var balance = grpcStubs.walletsService.getBalance(GetBalanceRequest.newBuilder().build()).getBalance();\n+        assertEquals(1000000000, balance);\n+    }", "originalCommit": "2852e3da8b002e08d80c799723190516ea17e8a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4ODgwNw==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r456588807", "bodyText": "It is an important part of the dao-setup for regtest/dev mode testing.     Bob & Alice are given initial BTC & BSQ balances and dummy payment accounts so they can trade without coders / testers having to go through the motions of funding wallets from bitcoin-cli -regest, setting up payment accounts, etc.  Having to do that would make manual  release testing even more time consuming that it already is.\nThere are more details here.\nEventually, we want to create and test the DAO setup environment, but I don't think that's in scope for quite awhile.  For now, we use the pre-fab dao-setup.zip -- what sets up the pre-funded wallets for Bob & Alice.", "author": "ghubstan", "createdAt": "2020-07-17T17:52:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4MDM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg3NTU1MA==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r456875550", "bodyText": "Do you think it would make automated tests more time consuming as well. Feels dirty not starting with a clean slate. As an alternative, we could be diligent about commenting in the test suites what the initial state is.", "author": "dmos62", "createdAt": "2020-07-19T07:56:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4MDM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUxMzU2OQ==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r457513569", "bodyText": "I don't know what the cost would be until I could compare.  There would be a trade off because it would skip the dao-setup files refresh in @BeforeClass.\nI added a javadoc comment explaining why Bob & Alice have non-zero initial BTC & BSQ balances and a dummy payment account before tests start.  (See commit b4d3ea7.)", "author": "ghubstan", "createdAt": "2020-07-20T15:50:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4MDM3OA=="}], "type": "inlineReview", "revised_code": {"commit": "1de6239527dfcc2c84a9415161fa37ec3d705511", "chunk": "diff --git a/apitest/src/main/java/bisq/apitest/method/GetBalanceTest.java b/apitest/src/test/java/bisq/apitest/method/GetBalanceTest.java\nsimilarity index 70%\nrename from apitest/src/main/java/bisq/apitest/method/GetBalanceTest.java\nrename to apitest/src/test/java/bisq/apitest/method/GetBalanceTest.java\nindex 41fc15fa16..2cf4e8ae1c 100644\n--- a/apitest/src/main/java/bisq/apitest/method/GetBalanceTest.java\n+++ b/apitest/src/test/java/bisq/apitest/method/GetBalanceTest.java\n\n@@ -21,25 +21,23 @@ import bisq.proto.grpc.GetBalanceRequest;\n \n import lombok.extern.slf4j.Slf4j;\n \n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n \n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n \n \n-\n-import bisq.apitest.OrderedRunner;\n-import bisq.apitest.annotation.Order;\n-\n @Slf4j\n-@RunWith(OrderedRunner.class)\n+@TestMethodOrder(OrderAnnotation.class)\n public class GetBalanceTest extends MethodTest {\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void setUp() {\n         try {\n             setUpScaffold(\"bitcoind,seednode,alicedaemon\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUxNzg0Mw==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r456517843", "bodyText": "We could use the subtractfeefromamount parameter set to false to not have to calculate a fee.", "author": "dmos62", "createdAt": "2020-07-17T15:33:46Z", "path": "apitest/src/main/java/bisq/apitest/scenario/FundWalletScenarioTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.scenario;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static java.lang.Double.parseDouble;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+\n+\n+import bisq.apitest.OrderedRunner;\n+import bisq.apitest.annotation.Order;\n+\n+@Slf4j\n+@RunWith(OrderedRunner.class)\n+public class FundWalletScenarioTest extends ScenarioTest {\n+\n+    @BeforeClass\n+    public static void setUp() {\n+        try {\n+            setUpScaffold(\"bitcoind,seednode,alicedaemon\");\n+            bitcoinCli.generateBlocks(1);\n+            MILLISECONDS.sleep(1500);\n+        } catch (InterruptedException ex) {\n+            fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void testFundWallet() {\n+        long balance = getBalance();  // bisq wallet was initialized with 10 btc\n+        assertEquals(1000000000, balance);\n+\n+        String unusedAddress = getUnusedBtcAddress();\n+\n+        // Given the default tx fee rate, we want to send 2.5 + the fee,\n+        // so the new wallet balance will be exactly 12.5 btc.\n+        // We should calculate the fee based on the fee rate and tx size\n+        // instead of hard coding the fee amount.\n+        double btc = parseDouble(\"2.5\") + parseDouble(\"0.0000336\");", "originalCommit": "2852e3da8b002e08d80c799723190516ea17e8a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4OTMyMA==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r456589320", "bodyText": "This is fixed in commit 5d7133a.", "author": "ghubstan", "createdAt": "2020-07-17T17:53:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUxNzg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1de6239527dfcc2c84a9415161fa37ec3d705511", "chunk": "diff --git a/apitest/src/main/java/bisq/apitest/scenario/FundWalletScenarioTest.java b/apitest/src/test/java/bisq/apitest/scenario/FundWalletScenarioTest.java\nsimilarity index 64%\nrename from apitest/src/main/java/bisq/apitest/scenario/FundWalletScenarioTest.java\nrename to apitest/src/test/java/bisq/apitest/scenario/FundWalletScenarioTest.java\nindex 44a9c05801..e95e310eb5 100644\n--- a/apitest/src/main/java/bisq/apitest/scenario/FundWalletScenarioTest.java\n+++ b/apitest/src/test/java/bisq/apitest/scenario/FundWalletScenarioTest.java\n\n@@ -19,33 +19,29 @@ package bisq.apitest.scenario;\n \n import lombok.extern.slf4j.Slf4j;\n \n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n \n-import static java.lang.Double.parseDouble;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n-\n-\n-\n-import bisq.apitest.OrderedRunner;\n-import bisq.apitest.annotation.Order;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n @Slf4j\n-@RunWith(OrderedRunner.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n public class FundWalletScenarioTest extends ScenarioTest {\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void setUp() {\n         try {\n             setUpScaffold(\"bitcoind,seednode,alicedaemon\");\n             bitcoinCli.generateBlocks(1);\n             MILLISECONDS.sleep(1500);\n-        } catch (InterruptedException ex) {\n-            fail(ex.getMessage());\n+        } catch (Exception ex) {\n+            fail(ex);\n         }\n     }\n \n"}}, {"oid": "8269a0df6d17c69e4ea7551a332e221caf377194", "url": "https://github.com/bisq-network/bisq/commit/8269a0df6d17c69e4ea7551a332e221caf377194", "message": "Remove final modifier", "committedDate": "2020-07-17T20:13:45Z", "type": "commit"}, {"oid": "f7d8c0e5c3957e45ac7e987d2a7368594cc8789c", "url": "https://github.com/bisq-network/bisq/commit/f7d8c0e5c3957e45ac7e987d2a7368594cc8789c", "message": "Do not use bitcoin.conf files\n\nThis change removes code for installing a regtest bitcoin.conf file.\nIt also removes an unused  bitcoin.conf file from the main resources\ndirectory.\n\nNow, the bitcoind startup command passes all configurations on the\ncommand line.  (See bisq.apitest.linux.BitcoinDaemon.java)", "committedDate": "2020-07-17T20:20:53Z", "type": "commit"}, {"oid": "1847da0110f9a648985d9b7318339d8910e842ed", "url": "https://github.com/bisq-network/bisq/commit/1847da0110f9a648985d9b7318339d8910e842ed", "message": "Delete unused bitcoin.conf from resources dir", "committedDate": "2020-07-17T20:29:28Z", "type": "commit"}, {"oid": "19346bbe78b5f9f17165aa8e86483d7706f80d00", "url": "https://github.com/bisq-network/bisq/commit/19346bbe78b5f9f17165aa8e86483d7706f80d00", "message": "Delete all JUnit related class from main sources\n\nJUnit tests are being moved to the subproject's test sources\ndirectory for the sake of convention -- for developers using\nthis test harness, and for IDE and gradle JUnit integration.", "committedDate": "2020-07-19T16:43:25Z", "type": "commit"}, {"oid": "7c974b22ac96e3bf88d9896ca283c4c7d2ac595e", "url": "https://github.com/bisq-network/bisq/commit/7c974b22ac96e3bf88d9896ca283c4c7d2ac595e", "message": "Moving GrpcStubs to test sources", "committedDate": "2020-07-19T17:18:34Z", "type": "commit"}, {"oid": "bf584c218f43f4a2de65f90fcadf903e79a7fd55", "url": "https://github.com/bisq-network/bisq/commit/bf584c218f43f4a2de65f90fcadf903e79a7fd55", "message": "Move test cases into subproject test sources\n\nThis change reorganizes the ':apitest' subproject to conform to a\ntypical gradle project, where all JUnit test cases are located in\nthe subproject's test sources folder.  This makes running tests\nfrom an IDE or gradle command line interface work as expected.\nIt will also help keep Travis CI configuration simple.\n\nTo avoid interfering in normal builds, the gradle ':apitest test' task\nis disable by default;  API tests will only run when a '-Dforce-true'\nsystem property is passed to gradle.\n\nTo run API tests, run a normal build and install dao-setup files:\n\n    ./gradlew clean build :apitest:installDaoSetup\n\nThen run the tests:\n\n    ./gradlew :apitest:test -Dforce=true\n\nTry to avoid adding the '-Dforce=true' property to any other gradle\ntasks, because this enables the ':apitest test' task, and would kick\noff API tests before a normal build completed.\n\nThe build.gradle file was modified to support this code reorg, and\nthe 'org.junit.jupiter' dependendency was upgraded to v5.6.2 -- only\nin the ':apitest:test' dependency definiitions, not anywhere else in\nthe bisq dependency definitions.  The upgrade is necessary for\nrunning ordered tests.\n\nSince the scaffolding may be set up from either test cases (under the\ntest src folder), or a class under the main src folder, some changes\nwere made to ensure configuration paths are correct for either use\ncase.  For example, when the 'bisq-apitest' script is run from the root\nproject directory, the current working directory is the root project\ndirectory.  When gradle or an IDE is used to run @Test cases, the\ncurrent working directory is :apitest subproject directory.\n\nThe main source's ApiTestMain class has been stripped down, and exists\nonly to keep the gradle build happy -- it needs a 'mainClassName'\nproperty.  But this main driver does have uses.  See the class comments.\n\nThe other changes in this commit were made to fix style and syntax\nproblems.", "committedDate": "2020-07-19T19:31:46Z", "type": "commit"}, {"oid": "591c8b295c6fb7968b6af86b579b75c6fd8353e4", "url": "https://github.com/bisq-network/bisq/commit/591c8b295c6fb7968b6af86b579b75c6fd8353e4", "message": "Change :apitest:test task system property name\n\nThe property name 'force' is changed 'runApiTests'.\n\nTo run the :apitest test task:\n\n    ./gradlew :apitest:test -DrunApiTests=true", "committedDate": "2020-07-20T15:33:47Z", "type": "commit"}, {"oid": "b4d3ea7e023c790ac07ad3c53fc8d6b991ddb1a0", "url": "https://github.com/bisq-network/bisq/commit/b4d3ea7e023c790ac07ad3c53fc8d6b991ddb1a0", "message": "Add comment about Bisq DAO dev environment\n\nSome explanation is needed about why Bob & Alice have non-zero\ninitial BTC and BSQ balances when tests run.  The comments\nalso include links to more detailed information about the DAO/\nregtest testing environment.", "committedDate": "2020-07-20T15:37:35Z", "type": "commit"}, {"oid": "999e9ec93b6eea9d131b0255249acdfcec69fbb7", "url": "https://github.com/bisq-network/bisq/commit/999e9ec93b6eea9d131b0255249acdfcec69fbb7", "message": "Fix @BeforeClass error handling and use jupiter api\n\nThe Scaffold set up was calling System.exit(1) when it encountered a\nconfiguration error, or a problem starting bitcoind & bisq instances.\nThis incorrect error handling was hiding errors from gradle, and\npreventing tests that would otherwise successfully complete.\n\nThis change fixes the problem by throwing an IllegalStateException up\nto the test case's @BeforeClass method -- to be caught and used in a\nJUnit fail(ex) call.  An 'initializationError' triggered in @BeforeClass\ncorrectly bubbles up to gradle, and will not block execution of remaining\ntests.  A gradle Test Summary containing any initialization errors is also\nproduced in <project-dir>/apitest/build/reports/tests/test/index.html\n\nThis change also fixes many import statements and asserts to ensure\n'org.junit.jupiter.api.*' is used in place of 'org.junit.*', for\nproper gradle integration.", "committedDate": "2020-07-20T17:53:00Z", "type": "commit"}, {"oid": "13a8396b4533f8d67578ac9db0129baed7f45be6", "url": "https://github.com/bisq-network/bisq/commit/13a8396b4533f8d67578ac9db0129baed7f45be6", "message": "Remove unnecessary curly braces", "committedDate": "2020-07-20T18:05:10Z", "type": "commit"}, {"oid": "cf031e688390332863c183344e1e0441baa2454f", "url": "https://github.com/bisq-network/bisq/commit/cf031e688390332863c183344e1e0441baa2454f", "message": "Change 'missing bitcoind path' error msg\n\nSince JUnit tests cannot take program arguments, change the\nwording to instruct the user to configure the bitcoind path\nin apitest.properties", "committedDate": "2020-07-22T13:58:20Z", "type": "commit"}, {"oid": "27ee4b8974ba364a386e94bcf699b28c0072157a", "url": "https://github.com/bisq-network/bisq/commit/27ee4b8974ba364a386e94bcf699b28c0072157a", "message": "Do not leave orphaned processes after failed teardown\n\nThe test harness should not fail a test case's @AfterAll (teardown)\nmethod on the first background instance shutdown exception.  This\nchange makes the shutdown logic similar to the startup's:  it caches\nany exceptions that may have occurred during an instance shutdown,\nlogs them, then proceeds to shut down the next background instance.\nAn IllegalStateException (the 1st one) is passed up to @AfterAll method\nonly after the scaffolding teardown process is complete, to avoid leaving\nany orphaned java or bitcoind processes running after a java system\nexit.", "committedDate": "2020-07-27T19:35:46Z", "type": "commit"}, {"oid": "e2f00b74172d32710d9721a8360acf8eb8b8e0cc", "url": "https://github.com/bisq-network/bisq/commit/e2f00b74172d32710d9721a8360acf8eb8b8e0cc", "message": "Remove extra whiteline", "committedDate": "2020-07-27T19:43:43Z", "type": "commit"}, {"oid": "8bb7e12f317faa5b44e561cbd87f99fd91e1e820", "url": "https://github.com/bisq-network/bisq/commit/8bb7e12f317faa5b44e561cbd87f99fd91e1e820", "message": "Clarify scaffold tear down error handling\n\nThe Scaffold#tearDown() method was split into two methods.  The\noriginal tearDown() now passes the background process/task array\nto a new shutDownAll() method.  This new method loops through the\ntasks in a more readable way, plainly expressing the intent to log\nall shutdown exceptions for each process being shut down, but not\nthrowing an exception while processes are being shut down.\nThe new shutDownAll() method returns the first shutdown exception\nencountered, which in turn is passed up to the test case's @AfterAll\nmethod.", "committedDate": "2020-07-28T15:33:25Z", "type": "commit"}, {"oid": "685839d3481e0cb0624673865c90f4503e41ab4f", "url": "https://github.com/bisq-network/bisq/commit/685839d3481e0cb0624673865c90f4503e41ab4f", "message": "Add fallbackfee param to bitcoind start cmd\n\nThis commit adds a -fallbackfee=0.0002 parameter to the start 'bitcoind'\ncommand to keep bitcoin-core v0.20.1 working as v0.19.1 does -- with the\n'fallbackfee' enabled.\n\nBitcoin v0.20.0 contains a fix for inconsistent behaviour related\nto this fallbackfee configuration.  Prior to v0.20, fallbackfee\nwas disabled (0) by default for the mainnet chain, but enabled\n(0.0002) for the testnet and regtest chains.\n\nA test case with bitcoin-core v0.20.1 was breaking on\nthe bitcoin-cli 'sendtoaddress' command, which was returning an\nerror message instead of a tx-id:\n\n    error code: -4\n    error message:\n    Fee estimation failed. Fallbackfee is disabled. \\\n    Wait a few blocks or enable -fallbackfee.\n\nBitcoin-core v0.20.0 release notes contain info about this change:\n    https://bitcoin.org/en/release/v0.20.0#updated-rpcs-1\n\nThe Bitcoin-core PR is https://github.com/bitcoin/bitcoin/pull/16524", "committedDate": "2020-08-12T19:47:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg5NzM4NQ==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r469897385", "bodyText": "This change seems to change the behaviour of bitcoind in mainnet mode. Before 0.20.0 bitcoind had different default fallbackfees for mainnet and test modes (0 and 0.0002 respectively), which was then fixed by setting the defaults to 0 in all cases.\nBy setting fallbackfee=0.0002 we're setting it on all net modes. I can't tell if that's a problem.", "author": "dmos62", "createdAt": "2020-08-13T11:57:46Z", "path": "apitest/src/main/java/bisq/apitest/linux/BitcoinDaemon.java", "diffHunk": "@@ -55,6 +55,7 @@ public void start() throws InterruptedException, IOException {\n                 + \" -txindex=1\"\n                 + \" -peerbloomfilters=1\"\n                 + \" -debug=net\"\n+                + \" -fallbackfee=0.0002\"", "originalCommit": "685839d3481e0cb0624673865c90f4503e41ab4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkwMzM2NQ==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r469903365", "bodyText": "Oh wait. This bitcoind will never run in mainnet, will it? Then the concern is that the apitest testing harness will have a different bitcoind environment than a production daemon would.\nAgain, I don't fully understand the significance of the fallbackfee option. It's used when the bitcoind can't estimate a \"floating fee\", right? And it only applies when sending funds from a wallet managed by the bitcoind instance, right? If both answers are yes, then I don't see this causing differences between prod and dev environments, but I'd like someone else to sanity check this too.", "author": "dmos62", "createdAt": "2020-08-13T12:09:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg5NzM4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyNTE3NQ==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r470025175", "bodyText": "This new fallbackfee setting would change the behaviour of bitcoind in mainnet mode -- from the default 0.00 to 0.0002.  But apitest cannot run on mainnet unless the code is hacked, and apitest should never run on mainnet -- it should never spend mainnet BTC, do a trade on mainnet, etc.\n\n\nThen the concern is that the apitest testing harness will have a different bitcoind environment than a production daemon would.\n\n\nYes, it does mean that the apitest harness will have a different bitcoind environment than a production daemon would, but that is what we want.  The bitcoin-core change (PR 16524) was to make the fallbackfee the same on all chains -- to fix bitcoin-core's inconsistency.  It was 0 (disabled) on mainnet, but 0.0002 for testnet/regtest chains.  Now (v0.20+), it is the same for all chains: 0 (disabled) by default for all chains.\nWe want bitcoin-core v0.20 (regtest) to behave like it did before the bitcoin-core PR 16524 change.\nIn the context of apitest, the fallbackfee affects the behaviour of the bitcoin-cli sendtoaddress command, where we use the subtractfeefromamount=false parameter.  (See FundWalletScenarioTest#testFundWallet())  This bitcoin-cli command errors if the fallbackfee is disabled on bitcoin-core v0.20.  Enabling it on bitcoind ensures this command behaves the same way it does on v0.19.", "author": "ghubstan", "createdAt": "2020-08-13T15:10:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg5NzM4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAxODQ2Nw==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r472018467", "bodyText": "I think this is reasonable. These tests should never be used to start a live bitcoind.", "author": "sqrrm", "createdAt": "2020-08-18T08:46:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg5NzM4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1de6239527dfcc2c84a9415161fa37ec3d705511", "chunk": "diff --git a/apitest/src/main/java/bisq/apitest/linux/BitcoinDaemon.java b/apitest/src/main/java/bisq/apitest/linux/BitcoinDaemon.java\nindex 24d694a22d..cc2e495200 100644\n--- a/apitest/src/main/java/bisq/apitest/linux/BitcoinDaemon.java\n+++ b/apitest/src/main/java/bisq/apitest/linux/BitcoinDaemon.java\n\n@@ -56,6 +56,7 @@ public class BitcoinDaemon extends AbstractLinuxProcess implements LinuxProcess\n                 + \" -peerbloomfilters=1\"\n                 + \" -debug=net\"\n                 + \" -fallbackfee=0.0002\"\n+                + \" -rpcport=\" + config.bitcoinRpcPort\n                 + \" -rpcuser=\" + config.bitcoinRpcUser\n                 + \" -rpcpassword=\" + config.bitcoinRpcPassword\n                 + \" -blocknotify=\" + config.bitcoinDatadir + \"/blocknotify\";\n"}}, {"oid": "176f0b2ad811462f6104520ca6563d75b3e9ea3c", "url": "https://github.com/bisq-network/bisq/commit/176f0b2ad811462f6104520ca6563d75b3e9ea3c", "message": "Fix BitcoinCli wrapper error handling\n\nThis change checks the system call exit status of bitcoin-cli\ncommands, and populates a new error message accessor if the\nsystem exist status != 0.", "committedDate": "2020-08-13T16:32:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEwMDkzMw==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r470100933", "bodyText": "Typo? \"Could not generate ...\"?", "author": "dmos62", "createdAt": "2020-08-13T17:08:45Z", "path": "apitest/src/test/java/bisq/apitest/method/BitcoinCliHelper.java", "diffHunk": "@@ -40,9 +39,12 @@ public BitcoinCliHelper(ApiTestConfig config) {\n \n     public String getNewBtcAddress() {\n         try {\n-            String newAddress = new BitcoinCli(config, \"getnewaddress\").run().getOutput();\n-            assertNotNull(newAddress);\n-            return newAddress;\n+            BitcoinCli newAddress = new BitcoinCli(config, \"getnewaddress\").run();\n+\n+            if (newAddress.isError())\n+                fail(format(\"Could generate new bitcoin address:%n%s\", newAddress.getErrorMessage()));", "originalCommit": "176f0b2ad811462f6104520ca6563d75b3e9ea3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDExMjM2Nw==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r470112367", "bodyText": "Oops.  Fixed in commit 9637cc0.", "author": "ghubstan", "createdAt": "2020-08-13T17:20:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEwMDkzMw=="}], "type": "inlineReview", "revised_code": {"commit": "1de6239527dfcc2c84a9415161fa37ec3d705511", "chunk": "diff --git a/apitest/src/test/java/bisq/apitest/method/BitcoinCliHelper.java b/apitest/src/test/java/bisq/apitest/method/BitcoinCliHelper.java\nindex 45edf41579..6e5b52080f 100644\n--- a/apitest/src/test/java/bisq/apitest/method/BitcoinCliHelper.java\n+++ b/apitest/src/test/java/bisq/apitest/method/BitcoinCliHelper.java\n\n@@ -42,7 +42,7 @@ public final class BitcoinCliHelper {\n             BitcoinCli newAddress = new BitcoinCli(config, \"getnewaddress\").run();\n \n             if (newAddress.isError())\n-                fail(format(\"Could generate new bitcoin address:%n%s\", newAddress.getErrorMessage()));\n+                fail(format(\"Could not generate new bitcoin address:%n%s\", newAddress.getErrorMessage()));\n \n             return newAddress.getOutput();\n         } catch (IOException | InterruptedException ex) {\n"}}, {"oid": "9637cc09437c9aef8c90d3eeea01b296f1f91ddc", "url": "https://github.com/bisq-network/bisq/commit/9637cc09437c9aef8c90d3eeea01b296f1f91ddc", "message": "Fix test fail() msg", "committedDate": "2020-08-13T17:19:02Z", "type": "commit"}, {"oid": "72ff4dca2b241a55be17a1c9c15946abb20818ca", "url": "https://github.com/bisq-network/bisq/commit/72ff4dca2b241a55be17a1c9c15946abb20818ca", "message": "Use non-default regtest bitcoind -rpcport\n\nThe default bitcoind / bitcoin-cli rpcport option has been changed\nfrom 18443 to 19443, to help avoid rpcport conflicts between apitest's\nbitcoind instances and other bitcoind and/or bitcion-qt instances\nwhich are probably using the bitcoin-core default (regtest) rpcport\n18443.\n\nHowever, this commit cannot include other changes for avoiding bind\naddress:port conflicts between apitest bitcoind instances and other\nregtest bitcoin-core instances because bitcoinj's bind port is hardcoded\nin RegTestParams.java as 18444.\n\nIn order to avoid bitcoin-core regtest mode bind address conflicts,\nyou must start or restart your bitcoind or bitcoin-qt instance with a\nnon-default bind port argument, e.g.\n\n\tbitcoin-qt -regtest -port=20444", "committedDate": "2020-08-15T15:20:25Z", "type": "commit"}, {"oid": "e88bdb9f8ac2cc003ccbd3374c865c6997a36244", "url": "https://github.com/bisq-network/bisq/commit/e88bdb9f8ac2cc003ccbd3374c865c6997a36244", "message": "Add regtest-port-conflicts.md doc", "committedDate": "2020-08-15T15:46:38Z", "type": "commit"}, {"oid": "12d52e869cd2f88470a056f3fd4a07c2a737d33d", "url": "https://github.com/bisq-network/bisq/commit/12d52e869cd2f88470a056f3fd4a07c2a737d33d", "message": "Fix port number typo", "committedDate": "2020-08-15T16:22:32Z", "type": "commit"}, {"oid": "fc541257aed194feb1831b9e4feed1cb75a69376", "url": "https://github.com/bisq-network/bisq/commit/fc541257aed194feb1831b9e4feed1cb75a69376", "message": "Add build / run / test categories docs", "committedDate": "2020-08-17T18:57:54Z", "type": "commit"}, {"oid": "f85ae2bb4d1bc4605d13864967710daa4580909a", "url": "https://github.com/bisq-network/bisq/commit/f85ae2bb4d1bc4605d13864967710daa4580909a", "message": "Explain how to run test cases from Intellij", "committedDate": "2020-08-17T19:11:31Z", "type": "commit"}, {"oid": "af7252ec47987da7b7cf3a5546ba5e217e8220b5", "url": "https://github.com/bisq-network/bisq/commit/af7252ec47987da7b7cf3a5546ba5e217e8220b5", "message": "Fix typo", "committedDate": "2020-08-17T19:14:37Z", "type": "commit"}, {"oid": "8b081ad5f257aa644309ffa1c6625935943c5892", "url": "https://github.com/bisq-network/bisq/commit/8b081ad5f257aa644309ffa1c6625935943c5892", "message": "Update README", "committedDate": "2020-08-17T19:18:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NjUzMA==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r472056530", "bodyText": "Suggested change", "author": "sqrrm", "createdAt": "2020-08-18T09:50:06Z", "path": "apitest/src/test/java/bisq/apitest/method/MethodTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.apitest.method;\n+\n+import bisq.proto.grpc.GetBalanceRequest;\n+import bisq.proto.grpc.GetFundingAddressesRequest;\n+import bisq.proto.grpc.LockWalletRequest;\n+import bisq.proto.grpc.RemoveWalletPasswordRequest;\n+import bisq.proto.grpc.SetWalletPasswordRequest;\n+import bisq.proto.grpc.UnlockWalletRequest;\n+\n+\n+\n+import bisq.apitest.ApiTestCase;\n+\n+public class MethodTest extends ApiTestCase {\n+\n+    // Convenience methods for building gRPC request objects\n+\n+    protected final GetBalanceRequest createBalanceRequest() {\n+        return GetBalanceRequest.newBuilder().build();\n+    }\n+\n+    protected final SetWalletPasswordRequest createSetWalletPasswordRequest(String password) {\n+        return SetWalletPasswordRequest.newBuilder().setPassword(password).build();\n+    }\n+\n+    protected final SetWalletPasswordRequest createSetWalletPasswordRequest(String oldPassword, String newPassword) {\n+        return SetWalletPasswordRequest.newBuilder().setPassword(oldPassword).setNewPassword(newPassword).build();\n+    }\n+\n+    protected final RemoveWalletPasswordRequest createRemoveWalletPasswordRequest(String password) {\n+        return RemoveWalletPasswordRequest.newBuilder().setPassword(password).build();\n+    }\n+\n+    protected final UnlockWalletRequest createUnlockWalletRequest(String password, long timeout) {\n+        return UnlockWalletRequest.newBuilder().setPassword(password).setTimeout(timeout).build();\n+    }\n+\n+    protected final LockWalletRequest createLockWalletRequest() {\n+        return LockWalletRequest.newBuilder().build();\n+    }\n+\n+    protected final GetFundingAddressesRequest createGetFundingAddressesRequest() {\n+        return GetFundingAddressesRequest.newBuilder().build();\n+    }\n+\n+    // Convenience methods for calling frequently used & thoroughly tested gRPC services.\n+\n+    protected final long getBalance() {\n+        return grpcStubs.walletsService.getBalance(createBalanceRequest()).getBalance();\n+    }\n+\n+    protected final void unlockWallet(String password, long timeout) {\n+        //noinspection ResultOfMethodCallIgnored\n+        grpcStubs.walletsService.unlockWallet(createUnlockWalletRequest(password, timeout));\n+    }\n+\n+    protected final void lockWallet() {\n+        //noinspection ResultOfMethodCallIgnored\n+        grpcStubs.walletsService.lockWallet(createLockWalletRequest());\n+    }\n+\n+    protected final String getUnusedBtcAddress() {\n+        return grpcStubs.walletsService.getFundingAddresses(createGetFundingAddressesRequest())\n+                .getAddressBalanceInfoList()\n+                .stream()\n+                .filter(a -> a.getBalance() == 0 && a.getNumConfirmations() == 0)\n+                .findFirst()\n+                .get()\n+                .getAddress();\n+", "originalCommit": "8b081ad5f257aa644309ffa1c6625935943c5892", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIwNjQzMw==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r472206433", "bodyText": "Extra while line removed in commit c3abd4e.", "author": "ghubstan", "createdAt": "2020-08-18T13:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NjUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "1de6239527dfcc2c84a9415161fa37ec3d705511", "chunk": "diff --git a/apitest/src/test/java/bisq/apitest/method/MethodTest.java b/apitest/src/test/java/bisq/apitest/method/MethodTest.java\nindex 37dea63cdb..694aa6806e 100644\n--- a/apitest/src/test/java/bisq/apitest/method/MethodTest.java\n+++ b/apitest/src/test/java/bisq/apitest/method/MethodTest.java\n\n@@ -84,6 +84,5 @@ public class MethodTest extends ApiTestCase {\n                 .findFirst()\n                 .get()\n                 .getAddress();\n-\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA2MDAxMQ==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r472060011", "bodyText": "Suggested change", "author": "sqrrm", "createdAt": "2020-08-18T09:56:08Z", "path": "apitest/src/test/java/bisq/apitest/method/WalletProtectionTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package bisq.apitest.method;\n+\n+import io.grpc.StatusRuntimeException;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static bisq.apitest.config.BisqAppConfig.alicedaemon;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+\n+@SuppressWarnings(\"ResultOfMethodCallIgnored\")\n+@Slf4j\n+@TestMethodOrder(OrderAnnotation.class)\n+public class WalletProtectionTest extends MethodTest {\n+\n+    @BeforeAll\n+    public static void setUp() {\n+        try {\n+            setUpScaffold(alicedaemon.name());\n+            MILLISECONDS.sleep(2000);\n+        } catch (Exception ex) {\n+            fail(ex);\n+        }\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void testSetWalletPassword() {\n+        var request = createSetWalletPasswordRequest(\"first-password\");\n+        grpcStubs.walletsService.setWalletPassword(request);\n+    }\n+\n+    @Test\n+    @Order(2)\n+    public void testGetBalanceOnEncryptedWalletShouldThrowException() {\n+        Throwable exception = assertThrows(StatusRuntimeException.class, this::getBalance);\n+        assertEquals(\"UNKNOWN: wallet is locked\", exception.getMessage());\n+    }\n+\n+    @Test\n+    @Order(3)\n+    public void testUnlockWalletFor4Seconds() {\n+        var request = createUnlockWalletRequest(\"first-password\", 4);\n+        grpcStubs.walletsService.unlockWallet(request);\n+        getBalance(); // should not throw 'wallet locked' exception\n+\n+        sleep(4500); // let unlock timeout expire\n+        Throwable exception = assertThrows(StatusRuntimeException.class, this::getBalance);\n+        assertEquals(\"UNKNOWN: wallet is locked\", exception.getMessage());\n+    }\n+\n+    @Test\n+    @Order(4)\n+    public void testGetBalanceAfterUnlockTimeExpiryShouldThrowException() {\n+        var request = createUnlockWalletRequest(\"first-password\", 3);\n+        grpcStubs.walletsService.unlockWallet(request);\n+        sleep(4000); // let unlock timeout expire\n+        Throwable exception = assertThrows(StatusRuntimeException.class, this::getBalance);\n+        assertEquals(\"UNKNOWN: wallet is locked\", exception.getMessage());\n+    }\n+\n+    @Test\n+    @Order(5)\n+    public void testLockWalletBeforeUnlockTimeoutExpiry() {\n+        unlockWallet(\"first-password\", 60);\n+        var request = createLockWalletRequest();\n+        grpcStubs.walletsService.lockWallet(request);\n+\n+        Throwable exception = assertThrows(StatusRuntimeException.class, this::getBalance);\n+        assertEquals(\"UNKNOWN: wallet is locked\", exception.getMessage());\n+    }\n+\n+    @Test\n+    @Order(6)\n+    public void testLockWalletWhenWalletAlreadyLockedShouldThrowException() {\n+        var request = createLockWalletRequest();\n+\n+        Throwable exception = assertThrows(StatusRuntimeException.class, () ->\n+                grpcStubs.walletsService.lockWallet(request));\n+        assertEquals(\"UNKNOWN: wallet is already locked\", exception.getMessage());\n+", "originalCommit": "8b081ad5f257aa644309ffa1c6625935943c5892", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIwNjUwOA==", "url": "https://github.com/bisq-network/bisq/pull/4366#discussion_r472206508", "bodyText": "Extra while line removed in commit c3abd4e.", "author": "ghubstan", "createdAt": "2020-08-18T13:42:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA2MDAxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1de6239527dfcc2c84a9415161fa37ec3d705511", "chunk": "diff --git a/apitest/src/test/java/bisq/apitest/method/WalletProtectionTest.java b/apitest/src/test/java/bisq/apitest/method/WalletProtectionTest.java\nindex a00d5333c0..450fb58e01 100644\n--- a/apitest/src/test/java/bisq/apitest/method/WalletProtectionTest.java\n+++ b/apitest/src/test/java/bisq/apitest/method/WalletProtectionTest.java\n\n@@ -87,7 +87,6 @@ public class WalletProtectionTest extends MethodTest {\n         Throwable exception = assertThrows(StatusRuntimeException.class, () ->\n                 grpcStubs.walletsService.lockWallet(request));\n         assertEquals(\"UNKNOWN: wallet is already locked\", exception.getMessage());\n-\n     }\n \n     @Test\n"}}, {"oid": "c3abd4e533b9f673ed805efa9ac6e92a81e843f1", "url": "https://github.com/bisq-network/bisq/commit/c3abd4e533b9f673ed805efa9ac6e92a81e843f1", "message": "Remove white lines", "committedDate": "2020-08-18T13:38:26Z", "type": "commit"}, {"oid": "fa11dab28be39625946313b6c9e5ea9a4cd3e1c3", "url": "https://github.com/bisq-network/bisq/commit/fa11dab28be39625946313b6c9e5ea9a4cd3e1c3", "message": "Add punctuation & re-phrase sentence in README\n\nA new commit was needed to force a codacy check after changes were\nmade to codacy rules.", "committedDate": "2020-08-19T14:04:21Z", "type": "commit"}, {"oid": "2ba0ee9d5d6960a1e81984c3530dc42a8876b303", "url": "https://github.com/bisq-network/bisq/commit/2ba0ee9d5d6960a1e81984c3530dc42a8876b303", "message": "Change access modifer\n\nThis commit is for forcing a codacy check.  The previous\nchange to an .md doc did not force a codacy check.", "committedDate": "2020-08-19T14:14:33Z", "type": "commit"}, {"oid": "ba8b9ccf54c9e87bb00694e4ee667ca33c00258d", "url": "https://github.com/bisq-network/bisq/commit/ba8b9ccf54c9e87bb00694e4ee667ca33c00258d", "message": "Put 'empty' comments inside ignored catch blocks\n\nFollow codacy rule against empty blocks.", "committedDate": "2020-08-19T14:49:21Z", "type": "commit"}]}