{"pr_number": 4068, "pr_title": "Sorting order of offers appropriately by min/max range", "pr_createdAt": "2020-03-16T14:08:07Z", "pr_url": "https://github.com/bisq-network/bisq/pull/4068", "timeline": [{"oid": "b91993fd23d6ebdacc64cf24e42858c036c7e84e", "url": "https://github.com/bisq-network/bisq/commit/b91993fd23d6ebdacc64cf24e42858c036c7e84e", "message": "Sort order of offers appropriately by min/max range\n\nThis change fixes an issue with sorting the offer list when the amount is shown as a range.\nIn OfferBookView::activate() we add a listener for the sortTypeProperty on amountColumn and\nvolumeColumn. When the sortType is changed we set the comparator to be the approprate property\nof the Offer; either getAmount/getMinAmount; getVolume/getMinVolume.\n\nFixes #3818", "committedDate": "2020-03-16T20:37:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2OTAxNg==", "url": "https://github.com/bisq-network/bisq/pull/4068#discussion_r393769016", "bodyText": "As we had issues in the past concerning using no brackets for one line conditionals we decided to use always {}", "author": "ripcurlx", "createdAt": "2020-03-17T15:34:39Z", "path": "desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java", "diffHunk": "@@ -293,6 +293,19 @@ protected void activate() {\n         model.priceSortTypeProperty.addListener((observable, oldValue, newValue) -> priceColumn.setSortType(newValue));\n         priceColumn.setSortType(model.priceSortTypeProperty.get());\n \n+        amountColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n+            if (newValue==TableColumn.SortType.DESCENDING)\n+                amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+            else\n+                amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+        });\n+        volumeColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n+            if (newValue==TableColumn.SortType.DESCENDING)\n+                volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+            else\n+                volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+        });", "originalCommit": "b91993fd23d6ebdacc64cf24e42858c036c7e84e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52d6ea87755b6d53547f09a01974b12128fb755e", "chunk": "diff --git a/desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java b/desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java\nindex 8da7453517..f91c593dd0 100644\n--- a/desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java\n+++ b/desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java\n\n@@ -294,16 +294,18 @@ public class OfferBookView extends ActivatableViewAndModel<GridPane, OfferBookVi\n         priceColumn.setSortType(model.priceSortTypeProperty.get());\n \n         amountColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n-            if (newValue==TableColumn.SortType.DESCENDING)\n+            if (newValue == TableColumn.SortType.DESCENDING) {\n                 amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n-            else\n+            } else {\n                 amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+            }\n         });\n         volumeColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n-            if (newValue==TableColumn.SortType.DESCENDING)\n+            if (newValue == TableColumn.SortType.DESCENDING) {\n                 volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n-            else\n+            } else {\n                 volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+            }\n         });\n \n         paymentMethodComboBox.setConverter(new PaymentMethodStringConverter(paymentMethodComboBox));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3MzU5MQ==", "url": "https://github.com/bisq-network/bisq/pull/4068#discussion_r393773591", "bodyText": "And there should be spaces before and after ==\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    amountColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n          \n          \n            \n                        if (newValue==TableColumn.SortType.DESCENDING)\n          \n          \n            \n                            amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                        else\n          \n          \n            \n                            amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                    });\n          \n          \n            \n                    volumeColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n          \n          \n            \n                        if (newValue==TableColumn.SortType.DESCENDING)\n          \n          \n            \n                            volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                        else\n          \n          \n            \n                            volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                    });\n          \n          \n            \n                    amountColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n          \n          \n            \n                        if (newValue == TableColumn.SortType.DESCENDING) {\n          \n          \n            \n                            amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                        } else {\n          \n          \n            \n                            amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                        }\n          \n          \n            \n                    });\n          \n          \n            \n                    volumeColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n          \n          \n            \n                        if (newValue == TableColumn.SortType.DESCENDING) {\n          \n          \n            \n                            volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                        } else {\n          \n          \n            \n                            volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n          \n          \n            \n                        }\n          \n          \n            \n                    });", "author": "ripcurlx", "createdAt": "2020-03-17T15:40:35Z", "path": "desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java", "diffHunk": "@@ -293,6 +293,19 @@ protected void activate() {\n         model.priceSortTypeProperty.addListener((observable, oldValue, newValue) -> priceColumn.setSortType(newValue));\n         priceColumn.setSortType(model.priceSortTypeProperty.get());\n \n+        amountColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n+            if (newValue==TableColumn.SortType.DESCENDING)\n+                amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+            else\n+                amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+        });\n+        volumeColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n+            if (newValue==TableColumn.SortType.DESCENDING)\n+                volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+            else\n+                volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+        });", "originalCommit": "b91993fd23d6ebdacc64cf24e42858c036c7e84e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3Mzk0MA==", "url": "https://github.com/bisq-network/bisq/pull/4068#discussion_r393773940", "bodyText": "I'll have a look why Codacy is not checking for this.", "author": "ripcurlx", "createdAt": "2020-03-17T15:41:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3MzU5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "52d6ea87755b6d53547f09a01974b12128fb755e", "chunk": "diff --git a/desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java b/desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java\nindex 8da7453517..f91c593dd0 100644\n--- a/desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java\n+++ b/desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java\n\n@@ -294,16 +294,18 @@ public class OfferBookView extends ActivatableViewAndModel<GridPane, OfferBookVi\n         priceColumn.setSortType(model.priceSortTypeProperty.get());\n \n         amountColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n-            if (newValue==TableColumn.SortType.DESCENDING)\n+            if (newValue == TableColumn.SortType.DESCENDING) {\n                 amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n-            else\n+            } else {\n                 amountColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinAmount(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+            }\n         });\n         volumeColumn.sortTypeProperty().addListener((observable, oldValue, newValue) -> {\n-            if (newValue==TableColumn.SortType.DESCENDING)\n+            if (newValue == TableColumn.SortType.DESCENDING) {\n                 volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n-            else\n+            } else {\n                 volumeColumn.setComparator(Comparator.comparing(o -> o.getOffer().getMinVolume(), Comparator.nullsFirst(Comparator.naturalOrder())));\n+            }\n         });\n \n         paymentMethodComboBox.setConverter(new PaymentMethodStringConverter(paymentMethodComboBox));\n"}}, {"oid": "52d6ea87755b6d53547f09a01974b12128fb755e", "url": "https://github.com/bisq-network/bisq/commit/52d6ea87755b6d53547f09a01974b12128fb755e", "message": "Sort order of offers appropriately by min/max range\n\nThis change fixes an issue with sorting the offer list when the amount is shown as a range.\nIn OfferBookView::activate() we add a listener for the sortTypeProperty on amountColumn and\nvolumeColumn. When the sortType is changed we set the comparator to be the approprate property\nof the Offer; either getAmount/getMinAmount; getVolume/getMinVolume.\n\nFixes #3818", "committedDate": "2020-03-17T17:02:20Z", "type": "forcePushed"}, {"oid": "d4dae4b6b1f773198b16299f10028603bbd96db5", "url": "https://github.com/bisq-network/bisq/commit/d4dae4b6b1f773198b16299f10028603bbd96db5", "message": "Sort order of offers appropriately by min/max range\n\nThis change fixes an issue with sorting the offer list when the amount\nis shown as a range.  In OfferBookView::activate() we add a listener\nfor the sortTypeProperty on amountColumn and volumeColumn. When the\nsortType is changed we set the comparator to be the approprate property\nof the Offer; either getAmount/getMinAmount; getVolume/getMinVolume.\n\nFixes #3818", "committedDate": "2020-03-18T12:09:18Z", "type": "commit"}, {"oid": "d4dae4b6b1f773198b16299f10028603bbd96db5", "url": "https://github.com/bisq-network/bisq/commit/d4dae4b6b1f773198b16299f10028603bbd96db5", "message": "Sort order of offers appropriately by min/max range\n\nThis change fixes an issue with sorting the offer list when the amount\nis shown as a range.  In OfferBookView::activate() we add a listener\nfor the sortTypeProperty on amountColumn and volumeColumn. When the\nsortType is changed we set the comparator to be the approprate property\nof the Offer; either getAmount/getMinAmount; getVolume/getMinVolume.\n\nFixes #3818", "committedDate": "2020-03-18T12:09:18Z", "type": "forcePushed"}]}