{"pr_number": 3888, "pr_title": "Introduce gRPC API proof of concept", "pr_createdAt": "2020-01-10T20:14:24Z", "pr_url": "https://github.com/bisq-network/bisq/pull/3888", "timeline": [{"oid": "5c02ce57669a7eee6e01143a686eeba782d65968", "url": "https://github.com/bisq-network/bisq/commit/5c02ce57669a7eee6e01143a686eeba782d65968", "message": "Introduce gRPC API proof of concept\n\nThis commit introduces a new `grpc` module including the following key\ntypes:\n\n - BisqGrpcServer: The API implementation itself, along with generated\n   gRPC Response/Reploy types defined in grpc/src/main/proto/grpc.proto.\n\n - BisqGrpcServerMain: A 'headless' / daemon-like entry point for\n   running a Bisq node without the JavaFX desktop UI.\n\n - BisqGrpcClient: A simple, repl-style client for the API that allows\n   the user to exercise the various endpoints as seen in the example\n   below.\n\nIn the `desktop` module, the BisqAppMain class has been modified to\nstart a BisqGrpcServer instance if the `--desktopWithGrpcApi` option has\nbeen set to `true`.\n\nIn the `core` module, a new `CoreApi` class has been introduced\nproviding a kind of comprehensive facade for all Bisq functionality to\nbe exposed via the RPC API.\n\nHow to explore the proof of concept:\n\n 1. Run the main() method in BisqAppMain providing\n `--desktopWithGrpcApi=true` as a program argument or alternatively, run\n the main() method in BisqGrpcServerMain, where no special option is\n required. In either case, you'll notice the following entry in the log\n output:\n\n    INFO  bisq.grpc.BisqGrpcServer: Server started, listening on 8888\n\n 2. Now run the main() method in BisqGrpcClient. Once it has started up\n you are connected to the gRPC server started in step 1 above. To\n exercise the API, type `getVersion` via stdin and hit return. You\n should see the following response:\n\n    INFO bisq.grpc.BisqGrpcClient - 1.2.4\n\n Likewise, you can type `getBalance` and you'll see the following\n response:\n\n    INFO bisq.grpc.BisqGrpcClient - 0.00 BTC\n\n and so forth for each of the implemented endpoints. For a list of\n implemented endpoints, see BisqGrpcServer.start().\n\nNote once again that the code here is merely a proof of concept and\nshould not be considered complete or production-ready in any way. In a\nsubsequent commit, the `--desktopWithGrpcApi` option will be disabled in\norder to avoid any potential production use.\n\nThe content of this commit is the result of squashing a number of\ncommits originally authored by chimp1984 in the `chimp1984` fork's `grpc`\nbranch.\n\nCo-authored-by: Chris Beams <chris@beams.io>", "committedDate": "2020-01-10T18:48:26Z", "type": "commit"}, {"oid": "65175a7f4fea2127539518ba9fdf4ed646c0459f", "url": "https://github.com/bisq-network/bisq/commit/65175a7f4fea2127539518ba9fdf4ed646c0459f", "message": "Remove --desktopWith{Grpc|Http}Api options for now\n\nThe previous commit introduces the BisqGrpcServer as a proof of concept,\nbut it is not yet ready for production use. This commit removes the\n`--desktopWithGrpcApi` option that starts the gRPC server until such\ntime that it is production-ready.\n\nThis change also removes the `--desktopWithHttpApi` option for starting\nan HTTP API server. The option has been in place for some time, but it\nwas 'false advertising' in the sense that nothing actually happened if\nthe user specified it, because there is in fact no HTTP API\nimplementation to be started.\n\nNote that when the gRPC API option is reintroduced, it will be renamed\nto `--rpcserver` or similar, following the convention in Bitcoin Core.", "committedDate": "2020-01-10T18:48:26Z", "type": "commit"}, {"oid": "7595387c8e59a59e34fcf2818cfd220e083a4b75", "url": "https://github.com/bisq-network/bisq/commit/7595387c8e59a59e34fcf2818cfd220e083a4b75", "message": "Fix code quality issues\n\nPer Codacy report at\nhttps://app.codacy.com/gh/bisq-network/bisq/pullRequest?prid=4835063", "committedDate": "2020-01-17T11:40:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4MTIwMA==", "url": "https://github.com/bisq-network/bisq/pull/3888#discussion_r368481200", "bodyText": "Somehow this command didn't work for me.", "author": "ripcurlx", "createdAt": "2020-01-20T10:45:32Z", "path": "grpc/src/main/java/bisq/grpc/BisqGrpcClient.java", "diffHunk": "@@ -0,0 +1,298 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.grpc;\n+\n+import bisq.core.payment.PaymentAccount;\n+import bisq.core.proto.network.CoreNetworkProtoResolver;\n+import bisq.core.proto.persistable.CorePersistenceProtoResolver;\n+\n+import org.bitcoinj.core.Coin;\n+\n+import java.time.Clock;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Scanner;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.lang.String.format;\n+\n+\n+\n+import bisq.grpc.protobuf.GetBalanceGrpc;\n+import bisq.grpc.protobuf.GetBalanceRequest;\n+import bisq.grpc.protobuf.GetOffersGrpc;\n+import bisq.grpc.protobuf.GetOffersRequest;\n+import bisq.grpc.protobuf.GetPaymentAccountsGrpc;\n+import bisq.grpc.protobuf.GetPaymentAccountsRequest;\n+import bisq.grpc.protobuf.GetTradeStatisticsGrpc;\n+import bisq.grpc.protobuf.GetTradeStatisticsRequest;\n+import bisq.grpc.protobuf.GetVersionGrpc;\n+import bisq.grpc.protobuf.GetVersionRequest;\n+import bisq.grpc.protobuf.PlaceOfferGrpc;\n+import bisq.grpc.protobuf.PlaceOfferRequest;\n+import bisq.grpc.protobuf.StopServerGrpc;\n+import bisq.grpc.protobuf.StopServerRequest;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+\n+/**\n+ * gRPC client.\n+ *\n+ * FIXME We get warning 'DEBUG io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0 - direct buffer constructor: unavailable\n+ * java.lang.UnsupportedOperationException: Reflective setAccessible(true) disabled' which is\n+ * related to Java 10 changes. Requests are working but we should find out why we get that warning\n+ */\n+@Slf4j\n+public class BisqGrpcClient {\n+\n+    private final ManagedChannel channel;\n+    private final GetVersionGrpc.GetVersionBlockingStub getVersionStub;\n+    private final GetBalanceGrpc.GetBalanceBlockingStub getBalanceStub;\n+    private final StopServerGrpc.StopServerBlockingStub stopServerStub;\n+    private final GetTradeStatisticsGrpc.GetTradeStatisticsBlockingStub getTradeStatisticsStub;\n+    private final GetOffersGrpc.GetOffersBlockingStub getOffersStub;\n+    private final GetPaymentAccountsGrpc.GetPaymentAccountsBlockingStub getPaymentAccountsStub;\n+    private final PlaceOfferGrpc.PlaceOfferBlockingStub placeOfferBlockingStub;\n+    private final CorePersistenceProtoResolver corePersistenceProtoResolver;\n+\n+    public static void main(String[] args) throws Exception {\n+        new BisqGrpcClient(\"localhost\", 8888);\n+    }\n+\n+    private BisqGrpcClient(String host, int port) {\n+        this(ManagedChannelBuilder.forAddress(host, port)\n+                // Channels are secure by default (via SSL/TLS). For the example we disable TLS to avoid\n+                // needing certificates.\n+                .usePlaintext(true).build());\n+\n+        // Simple input scanner\n+        // TODO use some more sophisticated input processing with validation....\n+        try (Scanner scanner = new Scanner(System.in);) {\n+            while (true) {\n+                long startTs = System.currentTimeMillis();\n+\n+                String[] tokens = scanner.nextLine().split(\" \");\n+                if (tokens.length == 0) {\n+                    return;\n+                }\n+                String command = tokens[0];\n+                List<String> params = new ArrayList<>();\n+                if (tokens.length > 1) {\n+                    params.addAll(Arrays.asList(tokens));\n+                    params.remove(0);\n+                }\n+                String result = \"\";\n+\n+                switch (command) {\n+                    case \"getVersion\":\n+                        result = getVersion();\n+                        break;\n+                    case \"getBalance\":\n+                        result = Coin.valueOf(getBalance()).toFriendlyString();\n+                        break;\n+                    case \"getTradeStatistics\":\n+                        List<bisq.core.trade.statistics.TradeStatistics2> tradeStatistics = getTradeStatistics().stream()\n+                                .map(bisq.core.trade.statistics.TradeStatistics2::fromProto)\n+                                .collect(Collectors.toList());\n+\n+                        result = tradeStatistics.toString();\n+                        break;\n+                    case \"getOffers\":\n+                        List<bisq.core.offer.Offer> offers = getOffers().stream()\n+                                .map(bisq.core.offer.Offer::fromProto)\n+                                .collect(Collectors.toList());\n+                        result = offers.toString();\n+                        break;\n+                    case \"getPaymentAccounts\":\n+                        List<PaymentAccount> paymentAccounts = getPaymentAccounts().stream()\n+                                .map(proto -> PaymentAccount.fromProto(proto, corePersistenceProtoResolver))\n+                                .collect(Collectors.toList());\n+                        result = paymentAccounts.toString();\n+                        break;\n+                    case \"placeOffer\":\n+                        // test input: placeOffer CNY BUY 750000000 true -0.2251 1000000 500000 0.12 5a972121-c30a-4b0e-b519-b17b63795d16\n+                        // payment accountId and currency need to be adopted\n+\n+                        // We expect 9 params\n+                        // TODO add basic input validation\n+                        try {\n+                            checkArgument(params.size() == 9);\n+                            String currencyCode = params.get(0);\n+                            String directionAsString = params.get(1);\n+                            long priceAsLong = Long.parseLong(params.get(2));\n+                            boolean useMarketBasedPrice = Boolean.parseBoolean(params.get(3));\n+                            double marketPriceMargin = Double.parseDouble(params.get(4));\n+                            long amountAsLong = Long.parseLong(params.get(5));\n+                            long minAmountAsLong = Long.parseLong(params.get(6));\n+                            double buyerSecurityDeposit = Double.parseDouble(params.get(7));\n+                            String paymentAccountId = params.get(8);\n+                            boolean success = placeOffer(currencyCode,\n+                                    directionAsString,\n+                                    priceAsLong,\n+                                    useMarketBasedPrice,\n+                                    marketPriceMargin,\n+                                    amountAsLong,\n+                                    minAmountAsLong,\n+                                    buyerSecurityDeposit,\n+                                    paymentAccountId);\n+                            result = String.valueOf(success);\n+                            break;\n+                        } catch (Throwable t) {\n+                            log.error(t.toString(), t);\n+                            break;\n+                        }\n+                    case \"stop\":\n+                        result = \"Shut down client\";\n+                        try {\n+                            shutdown();\n+                        } catch (InterruptedException e) {\n+                            log.error(e.toString(), e);\n+                        }\n+                        break;\n+                    case \"stopServer\":", "originalCommit": "7595387c8e59a59e34fcf2818cfd220e083a4b75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyNDY4NA==", "url": "https://github.com/bisq-network/bisq/pull/3888#discussion_r368524684", "bodyText": "I just checked it locally and it does work for me. That is, after I call the stopServer RPC from the client, no further commands can be issued from the client because indeed the server has been stopped.", "author": "cbeams", "createdAt": "2020-01-20T12:33:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4MTIwMA=="}], "type": "inlineReview", "revised_code": {"commit": "07d98a3aba96b3224c9c19070fe7ee690c941682", "chunk": "diff --git a/grpc/src/main/java/bisq/grpc/BisqGrpcClient.java b/cli/src/main/java/bisq/cli/app/BisqCliMain.java\nsimilarity index 98%\nrename from grpc/src/main/java/bisq/grpc/BisqGrpcClient.java\nrename to cli/src/main/java/bisq/cli/app/BisqCliMain.java\nindex 489946b2f7..dbc78c641d 100644\n--- a/grpc/src/main/java/bisq/grpc/BisqGrpcClient.java\n+++ b/cli/src/main/java/bisq/cli/app/BisqCliMain.java\n\n@@ -15,7 +15,7 @@\n  * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package bisq.grpc;\n+package bisq.cli.app;\n \n import bisq.core.payment.PaymentAccount;\n import bisq.core.proto.network.CoreNetworkProtoResolver;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4MTYwNw==", "url": "https://github.com/bisq-network/bisq/pull/3888#discussion_r368481607", "bodyText": "NIT: 0.12 should be at least 0.15 otherwise the security deposit is too low for our current setup", "author": "ripcurlx", "createdAt": "2020-01-20T10:46:29Z", "path": "grpc/src/main/java/bisq/grpc/BisqGrpcClient.java", "diffHunk": "@@ -0,0 +1,298 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.grpc;\n+\n+import bisq.core.payment.PaymentAccount;\n+import bisq.core.proto.network.CoreNetworkProtoResolver;\n+import bisq.core.proto.persistable.CorePersistenceProtoResolver;\n+\n+import org.bitcoinj.core.Coin;\n+\n+import java.time.Clock;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Scanner;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.lang.String.format;\n+\n+\n+\n+import bisq.grpc.protobuf.GetBalanceGrpc;\n+import bisq.grpc.protobuf.GetBalanceRequest;\n+import bisq.grpc.protobuf.GetOffersGrpc;\n+import bisq.grpc.protobuf.GetOffersRequest;\n+import bisq.grpc.protobuf.GetPaymentAccountsGrpc;\n+import bisq.grpc.protobuf.GetPaymentAccountsRequest;\n+import bisq.grpc.protobuf.GetTradeStatisticsGrpc;\n+import bisq.grpc.protobuf.GetTradeStatisticsRequest;\n+import bisq.grpc.protobuf.GetVersionGrpc;\n+import bisq.grpc.protobuf.GetVersionRequest;\n+import bisq.grpc.protobuf.PlaceOfferGrpc;\n+import bisq.grpc.protobuf.PlaceOfferRequest;\n+import bisq.grpc.protobuf.StopServerGrpc;\n+import bisq.grpc.protobuf.StopServerRequest;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+\n+/**\n+ * gRPC client.\n+ *\n+ * FIXME We get warning 'DEBUG io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0 - direct buffer constructor: unavailable\n+ * java.lang.UnsupportedOperationException: Reflective setAccessible(true) disabled' which is\n+ * related to Java 10 changes. Requests are working but we should find out why we get that warning\n+ */\n+@Slf4j\n+public class BisqGrpcClient {\n+\n+    private final ManagedChannel channel;\n+    private final GetVersionGrpc.GetVersionBlockingStub getVersionStub;\n+    private final GetBalanceGrpc.GetBalanceBlockingStub getBalanceStub;\n+    private final StopServerGrpc.StopServerBlockingStub stopServerStub;\n+    private final GetTradeStatisticsGrpc.GetTradeStatisticsBlockingStub getTradeStatisticsStub;\n+    private final GetOffersGrpc.GetOffersBlockingStub getOffersStub;\n+    private final GetPaymentAccountsGrpc.GetPaymentAccountsBlockingStub getPaymentAccountsStub;\n+    private final PlaceOfferGrpc.PlaceOfferBlockingStub placeOfferBlockingStub;\n+    private final CorePersistenceProtoResolver corePersistenceProtoResolver;\n+\n+    public static void main(String[] args) throws Exception {\n+        new BisqGrpcClient(\"localhost\", 8888);\n+    }\n+\n+    private BisqGrpcClient(String host, int port) {\n+        this(ManagedChannelBuilder.forAddress(host, port)\n+                // Channels are secure by default (via SSL/TLS). For the example we disable TLS to avoid\n+                // needing certificates.\n+                .usePlaintext(true).build());\n+\n+        // Simple input scanner\n+        // TODO use some more sophisticated input processing with validation....\n+        try (Scanner scanner = new Scanner(System.in);) {\n+            while (true) {\n+                long startTs = System.currentTimeMillis();\n+\n+                String[] tokens = scanner.nextLine().split(\" \");\n+                if (tokens.length == 0) {\n+                    return;\n+                }\n+                String command = tokens[0];\n+                List<String> params = new ArrayList<>();\n+                if (tokens.length > 1) {\n+                    params.addAll(Arrays.asList(tokens));\n+                    params.remove(0);\n+                }\n+                String result = \"\";\n+\n+                switch (command) {\n+                    case \"getVersion\":\n+                        result = getVersion();\n+                        break;\n+                    case \"getBalance\":\n+                        result = Coin.valueOf(getBalance()).toFriendlyString();\n+                        break;\n+                    case \"getTradeStatistics\":\n+                        List<bisq.core.trade.statistics.TradeStatistics2> tradeStatistics = getTradeStatistics().stream()\n+                                .map(bisq.core.trade.statistics.TradeStatistics2::fromProto)\n+                                .collect(Collectors.toList());\n+\n+                        result = tradeStatistics.toString();\n+                        break;\n+                    case \"getOffers\":\n+                        List<bisq.core.offer.Offer> offers = getOffers().stream()\n+                                .map(bisq.core.offer.Offer::fromProto)\n+                                .collect(Collectors.toList());\n+                        result = offers.toString();\n+                        break;\n+                    case \"getPaymentAccounts\":\n+                        List<PaymentAccount> paymentAccounts = getPaymentAccounts().stream()\n+                                .map(proto -> PaymentAccount.fromProto(proto, corePersistenceProtoResolver))\n+                                .collect(Collectors.toList());\n+                        result = paymentAccounts.toString();\n+                        break;\n+                    case \"placeOffer\":\n+                        // test input: placeOffer CNY BUY 750000000 true -0.2251 1000000 500000 0.12 5a972121-c30a-4b0e-b519-b17b63795d16", "originalCommit": "7595387c8e59a59e34fcf2818cfd220e083a4b75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyNDk2MA==", "url": "https://github.com/bisq-network/bisq/pull/3888#discussion_r368524960", "bodyText": "Fixed in d77ff10.", "author": "cbeams", "createdAt": "2020-01-20T12:34:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4MTYwNw=="}], "type": "inlineReview", "revised_code": {"commit": "07d98a3aba96b3224c9c19070fe7ee690c941682", "chunk": "diff --git a/grpc/src/main/java/bisq/grpc/BisqGrpcClient.java b/cli/src/main/java/bisq/cli/app/BisqCliMain.java\nsimilarity index 98%\nrename from grpc/src/main/java/bisq/grpc/BisqGrpcClient.java\nrename to cli/src/main/java/bisq/cli/app/BisqCliMain.java\nindex 489946b2f7..dbc78c641d 100644\n--- a/grpc/src/main/java/bisq/grpc/BisqGrpcClient.java\n+++ b/cli/src/main/java/bisq/cli/app/BisqCliMain.java\n\n@@ -15,7 +15,7 @@\n  * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-package bisq.grpc;\n+package bisq.cli.app;\n \n import bisq.core.payment.PaymentAccount;\n import bisq.core.proto.network.CoreNetworkProtoResolver;\n"}}, {"oid": "8b30c22d6ee5a9f20c10ab3aa68343c4b79da742", "url": "https://github.com/bisq-network/bisq/commit/8b30c22d6ee5a9f20c10ab3aa68343c4b79da742", "message": "Move bisq.core{=>.app}.CoreModule\n\nThere are two structural / organizational reasons for this move:\n\n 1. References from one package to another should always be upward or\n lateral, never downward, as the latter causes package cycles (aka\n 'tangles') which damage the suppleness and understandability of a large\n codebase. Prior to this change the high-level bisq.core.CoreModule\n class imported many classes from child packages like\n bisq.core.{btc,dao,user,util}, etc. By moving CoreModule down into the\n '.app' package, it can reference all these other packages as siblings\n instead of doing so as a parent.\n\n 2. the bisq.core.desktop and bisq.core.app packages are the only\n locations that reference the CoreModule class. By moving the class\n into bisq.core.app, greater cohesion is acheived, again making the\n codebase that much easier to read and understand.", "committedDate": "2020-01-20T11:07:43Z", "type": "commit"}, {"oid": "29698fd58a6b7995971a1c0ae9898a4a5e7634c1", "url": "https://github.com/bisq-network/bisq/commit/29698fd58a6b7995971a1c0ae9898a4a5e7634c1", "message": "Introduce 'cli' subproject\n\nThis change stubs out the `bisq-cli` utility with a placeholder main\nmethod, such that the following now works:\n\n    $ gradle :cli:build\n    $ ./bisq-cli\n    Hello, World!", "committedDate": "2020-01-20T11:07:55Z", "type": "commit"}, {"oid": "7a718f0ed58536191858902dd9378a721b8c48c0", "url": "https://github.com/bisq-network/bisq/commit/7a718f0ed58536191858902dd9378a721b8c48c0", "message": "Move grpc generation from :grpc to :core\n\nSuch that :grpc (soon to be renamed to :daemon), :cli and :desktop can\naccess these types.", "committedDate": "2020-01-20T11:07:55Z", "type": "commit"}, {"oid": "07d98a3aba96b3224c9c19070fe7ee690c941682", "url": "https://github.com/bisq-network/bisq/commit/07d98a3aba96b3224c9c19070fe7ee690c941682", "message": "Move bisq.{grpc.BisqGrpcClient=>cli.BisqCliMain}\n\nThis change replaces the previous \"Hello, World!\" :cli main stub with\nthe contents of the BisqGrpcClient as originally implemented in :grpc,\nsuch that the following now works:\n\n    $ gradle build\n    $ ./bisq-daemon # in first terminal\n    $ ./bisq-cli    # in second terminal\n    getVersion      # user input to stdin\n    1.2.3           # rpc response\n    getBalance      # user input to stdin\n    0.00            # rpc response\n    ...\n\nOr for a user experience closer to where things are headed:\n\n    $ echo getVersion | ./bisq-cli\n    1.2.3\n\nNote that processing the above command is currently far too slow:\n\n    $ time echo getVersion | ./bisq-cli\n    1.2.3\n\n    real    0m1.634s   # ouch\n    user    0m1.746s\n    sys     0m0.180s\n\nSubsequent commits will work to bring this time down to a minimum.\n\nNote: Includes the code quality changes originally made to\nBisqGrpcClient in commit 7595387.", "committedDate": "2020-01-20T11:07:55Z", "type": "commit"}, {"oid": "eaad2e0a4c4bf943db1b14a3da6f71b494fa6d7b", "url": "https://github.com/bisq-network/bisq/commit/eaad2e0a4c4bf943db1b14a3da6f71b494fa6d7b", "message": "Clean up protobuf/grpc config and dependencies\n\nThis change:\n\n - Removes several superfluous dependencies not required for our\n   purposes with gRPC\n\n - Cleans up the way Gradle source sets are managed for generated gRPC\n   sources and classes\n\n - Makes use of Gradle's new `implementation`, `compileOnly` and\n   `runtimeOnly` dependency configurations where changes were otherwise\n   being made. See https://stackoverflow.com/a/47365147 for details.\n   Remaining uses of the now-deprecated `compile` and `runtime`\n   configurations should be eliminated in a refactoring separate and\n   apart from the present gRPC API work.\n\n - Upgrades several existing dependencies to align with newer versions\n   of the same dependencies introduced transitively by grpc-* 1.25.0\n   libraries, including:\n    - protoc from 3.9.1 => 3.10.0\n    - gson from 2.7 => 2.8.5\n\nNote that a number of the grpc-* libraries depend on Guava v28, and our\nexisting dependency on Guava v20 has *not* been upgraded to this newer\nversion because it is incompatible with the way we have used Guava's\nFutures API. It appears that the grpc-* libraries function correctly\nagainst this older version of Guava, and more investigation would be\nrequired see whether upgrading our uses to the new Guava API is feasible\n/ worth it. The way we are preventing this upgrade is with the use of\n`exclude(module: \"guava\")` directives on grpc-* dependencies.", "committedDate": "2020-01-20T11:07:55Z", "type": "commit"}, {"oid": "aff760514b112115c8b81da768a126cab720dbbb", "url": "https://github.com/bisq-network/bisq/commit/aff760514b112115c8b81da768a126cab720dbbb", "message": "Sever dependency from :desktop => :grpc\n\nThe :grpc module will soon be renamed to :daemon. These two modules\nrepresent two separate and equal modes of running bisq, either as a\ndesktop GUI or as a daemon. They are both applications, and one should\nnot depend on the other as it would be illogical and confusing to model\nthings that way. The reason for the current dependency from :desktop to\n:grpc is because :grpc is the home of BisqGrpcServer. This change moves\nthis class up to :core, in a new bisq.core.grpc package, such that both\nthe :desktop and :daemon applications can pull it in cleanly.\n\nThe CoreApi 'facade' that BisqGrpcServer uses to abstract away bisq\ninternals has been moved from bisq.core to bisq.core.grpc as well and\nfor the same reasons detailed in 8b30c22d6.\n\nThis change also renames the Java package for generated grpc types from\nbisq.grpc.protobuf to bisq.core.grpc (the same new package that\nBisqGrpcServer and CoreApi now live in). Again, this is for reasons of\ncohesion: BisqGrpcServer is the only user of these grpc-generated types,\nand they should logically live in the same package (even if they\nphysically live in separate source dirs at the build level).", "committedDate": "2020-01-20T11:12:09Z", "type": "commit"}, {"oid": "900c13ef8f47f4a17087a2cac6cd1139fdd584bc", "url": "https://github.com/bisq-network/bisq/commit/900c13ef8f47f4a17087a2cac6cd1139fdd584bc", "message": "Rename submodule grpc => daemon\n\n - Rename package bisq.grpc => bisq.daemon.app\n - Rename BisqGrpcApp => BisqDaemon\n - Rename BisqGrpcServerMain => BisqDaemonMain\n\nThe script `bisq-grpc` has been renamed to `bisq-daemon` accordingly\n(and will later be customized to `bisqd`). To see everything in action,\nissue the following commands:\n\n    $ gradle build\n    $ ./bisq-daemon --appName=Bisq-throwaway --daoActivated=false\n    $ echo getVersion | ./bisq-cli         # in a second terminal\n    1.2.3", "committedDate": "2020-01-20T11:13:30Z", "type": "commit"}, {"oid": "9fceba63e2e65a88cd39b079c3da525f9db01129", "url": "https://github.com/bisq-network/bisq/commit/9fceba63e2e65a88cd39b079c3da525f9db01129", "message": "Remove duplicate attempt to start BisqGrpcServer\n\nProblem: a stack trace was being thrown during daemon startup from\nBisqDaemonMain.onSetupComplete when it attempted to start a\nsecond BisqGrpcServer and failed to bind to the already-bound port.\nThe first BisqGrpcServer is started in\nBisqDaemonMain.onApplicationStarted much earlier in the startup process.\n\nSolution: remove the second attempt to start the server by removing\nBisqDaemonMain's implementation of onSetupComplete, and in turn remove\nthe now-obsolete bisqGrpcServer field as well.\n\nThis change also eliminates the BisqGrpcServer.blockUntilShutdown\nmethod, which in turn called the underlying grpc server's\nawaitTermination method. As the comment there explained, this was\nthought to be necessary because grpc \"does not use daemon threads by\ndefault\", but this is actually incorrect. According to the grpc Javadoc\nat [1], \"Grpc uses non-daemon Threads by default and thus a Server will\ncontinue to run even after the main thread has terminated.\"\n\n[1]: https://git.io/JePjn", "committedDate": "2020-01-20T11:14:33Z", "type": "commit"}, {"oid": "1e8633b03be9085b6bdd05886066aca9e632cade", "url": "https://github.com/bisq-network/bisq/commit/1e8633b03be9085b6bdd05886066aca9e632cade", "message": "Organize io.grpc imports correctly\n\nAnd remove entry for the no longer used io.bisq.generated package.", "committedDate": "2020-01-20T11:16:57Z", "type": "commit"}, {"oid": "d77ff101fbccda8ea3262fe41e53ded49d6b1bd6", "url": "https://github.com/bisq-network/bisq/commit/d77ff101fbccda8ea3262fe41e53ded49d6b1bd6", "message": "Reflect higher security deposit in placeOffer RPC comment\n\nPer review comment at\nhttps://github.com/bisq-network/bisq/pull/3888#discussion_r368481607", "committedDate": "2020-01-20T11:58:13Z", "type": "commit"}, {"oid": "2a66d11cd3cfc56a4ba33003dc2e25635d940e36", "url": "https://github.com/bisq-network/bisq/commit/2a66d11cd3cfc56a4ba33003dc2e25635d940e36", "message": "Exclude unnecessary dependency on animal-sniffer-plugin\n\nPer review comment\nhttps://github.com/bisq-network/bisq/pull/3888#discussion_r368480788", "committedDate": "2020-01-20T14:46:17Z", "type": "commit"}, {"oid": "2a66d11cd3cfc56a4ba33003dc2e25635d940e36", "url": "https://github.com/bisq-network/bisq/commit/2a66d11cd3cfc56a4ba33003dc2e25635d940e36", "message": "Exclude unnecessary dependency on animal-sniffer-plugin\n\nPer review comment\nhttps://github.com/bisq-network/bisq/pull/3888#discussion_r368480788", "committedDate": "2020-01-20T14:46:17Z", "type": "forcePushed"}]}