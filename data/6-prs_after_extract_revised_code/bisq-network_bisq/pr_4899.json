{"pr_number": 4899, "pr_title": "Privacy improvements for manual payout", "pr_createdAt": "2020-12-04T19:57:36Z", "pr_url": "https://github.com/bisq-network/bisq/pull/4899", "timeline": [{"oid": "bcd1e4bbb6b168fbfe60002c86f74a41cfcb20a7", "url": "https://github.com/bisq-network/bisq/commit/bcd1e4bbb6b168fbfe60002c86f74a41cfcb20a7", "message": "Privacy improvements for manual payout\n\nRedesign the UI\nAdd import/export of payout settings\nAdd ability to import from mediation ticket\nMediator does not need private key\nUser can sign using own wallet or private key\nValidation of input fields\nCalculate the tx fee based on inputs\nDisplay of the generated txid & hex so it can be checked", "committedDate": "2020-12-14T03:18:56Z", "type": "forcePushed"}, {"oid": "1c39aaf2824fe07c843693fde090e131a63321ee", "url": "https://github.com/bisq-network/bisq/commit/1c39aaf2824fe07c843693fde090e131a63321ee", "message": "Privacy improvements for manual payout\n\nRedesign the UI\nAdd import/export of payout settings\nAdd ability to import from mediation ticket\nMediator does not need private key\nUser can sign using own wallet or private key\nValidation of input fields\nCalculate the tx fee based on inputs\nDisplay of the generated txid & hex so it can be checked", "committedDate": "2020-12-14T03:28:48Z", "type": "forcePushed"}, {"oid": "b1d22af1ae357c926ef2cd0b8692c880d6263de1", "url": "https://github.com/bisq-network/bisq/commit/b1d22af1ae357c926ef2cd0b8692c880d6263de1", "message": "Privacy improvements for manual payout\n\nRedesign the UI\nAdd import/export of payout settings\nAdd ability to import from mediation ticket\nMediator does not need private key\nUser can sign using own wallet or private key\nValidation of input fields\nCalculate the tx fee based on inputs\nDisplay of the generated txid & hex so it can be checked", "committedDate": "2020-12-15T04:19:37Z", "type": "commit"}, {"oid": "b1d22af1ae357c926ef2cd0b8692c880d6263de1", "url": "https://github.com/bisq-network/bisq/commit/b1d22af1ae357c926ef2cd0b8692c880d6263de1", "message": "Privacy improvements for manual payout\n\nRedesign the UI\nAdd import/export of payout settings\nAdd ability to import from mediation ticket\nMediator does not need private key\nUser can sign using own wallet or private key\nValidation of input fields\nCalculate the tx fee based on inputs\nDisplay of the generated txid & hex so it can be checked", "committedDate": "2020-12-15T04:19:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5NDU1NA==", "url": "https://github.com/bisq-network/bisq/pull/4899#discussion_r544494554", "bodyText": "Coin.parseCoin can throw exceptions if input format is not as expected. Best to add a try catch...", "author": "chimp1984", "createdAt": "2020-12-16T17:40:41Z", "path": "desktop/src/main/java/bisq/desktop/main/overlays/windows/ManualPayoutTxWindow.java", "diffHunk": "@@ -100,94 +198,549 @@ protected void setupKeyHandler(Scene scene) {\n         }\n     }\n \n-    private void addContent() {\n-        gridPane.getColumnConstraints().remove(1);\n-        // We dont translate here as it is for dev only purpose\n-        InputTextField depositTxHex = addInputTextField(gridPane, ++rowIndex, \"depositTxHex\");\n-\n-        InputTextField buyerPayoutAmount = addInputTextField(gridPane, ++rowIndex, \"buyerPayoutAmount\");\n-        InputTextField sellerPayoutAmount = addInputTextField(gridPane, ++rowIndex, \"sellerPayoutAmount\");\n-        InputTextField txFee = addInputTextField(gridPane, ++rowIndex, \"Tx fee\");\n-\n-        InputTextField buyerAddressString = addInputTextField(gridPane, ++rowIndex, \"buyerAddressString\");\n-        InputTextField sellerAddressString = addInputTextField(gridPane, ++rowIndex, \"sellerAddressString\");\n-\n-        InputTextField buyerPrivateKeyAsHex = addInputTextField(gridPane, ++rowIndex, \"buyerPrivateKeyAsHex\");\n-        InputTextField sellerPrivateKeyAsHex = addInputTextField(gridPane, ++rowIndex, \"sellerPrivateKeyAsHex\");\n+    @Override\n+    protected void createGridPane() {\n+        gridPane = new GridPane();\n+        gridPane.setHgap(15);\n+        gridPane.setVgap(15);\n+        gridPane.setPadding(new Insets(64, 64, 64, 64));\n+        gridPane.setPrefWidth(width);\n+        ColumnConstraints columnConstraints1 = new ColumnConstraints();\n+        ColumnConstraints columnConstraints2 = new ColumnConstraints();\n+        columnConstraints1.setPercentWidth(25);\n+        columnConstraints2.setPercentWidth(75);\n+        gridPane.getColumnConstraints().addAll(columnConstraints1, columnConstraints2);\n+    }\n \n-        InputTextField buyerPubKeyAsHex = addInputTextField(gridPane, ++rowIndex, \"buyerPubKeyAsHex\");\n-        InputTextField sellerPubKeyAsHex = addInputTextField(gridPane, ++rowIndex, \"sellerPubKeyAsHex\");\n+    @Override\n+    protected void cleanup() {\n+        blockExplorerIcon.setOnMouseClicked(null);\n+        copyIcon.setOnMouseClicked(null);\n+        txFee.focusedProperty().removeListener(txFeeListener);\n+        buyerPayoutAmount.focusedProperty().removeListener(buyerPayoutAmountListener);\n+        sellerPayoutAmount.focusedProperty().removeListener(sellerPayoutAmountListener);\n+        amountInMultisig.focusedProperty().removeListener(amountInMultisigListener);\n+        super.cleanup();\n+    }\n \n-        CheckBox depositTxLegacy = addCheckBox(gridPane, ++rowIndex, \"depositTxLegacy\");\n+    private void addContent() {\n+        rowIndex = 1;\n+        this.disableActionButton = true;\n+        addLeftPanelButtons();\n+        addInputsPane();\n+        addImportPane();\n+        addExportPane();\n+        addSignPane();\n+        addBuildPane();\n+        hideAllPanes();\n+        inputsGridPane.setVisible(true);\n \n         // Notes:\n         // Open with alt+g\n         // Priv key is only visible if pw protection is removed (wallet details data (alt+j))\n         // Take missing buyerPubKeyAsHex and sellerPubKeyAsHex from contract data!\n         // Lookup sellerPrivateKeyAsHex associated with sellerPubKeyAsHex (or buyers) in wallet details data\n         // sellerPubKeys/buyerPubKeys are auto generated if used the fields below\n+    }\n \n-        depositTxHex.setText(\"\");\n+    private void addLeftPanelButtons() {\n+        Button buttonInputs = new AutoTooltipButton(\"Inputs\");\n+        Button buttonImport = new AutoTooltipButton(\"Import\");\n+        Button buttonExport = new AutoTooltipButton(\"Export\");\n+        Button buttonSign = new AutoTooltipButton(\"Sign\");\n+        Button buttonBuild = new AutoTooltipButton(\"Build\");\n+        VBox vBox = new VBox(12, buttonInputs, buttonImport, buttonExport, buttonSign, buttonBuild);\n+        vBox.getChildren().forEach(button -> ((Button) button).setPrefWidth(500));\n+        gridPane.add(vBox, 0, rowIndex);\n+        buttonInputs.getStyleClass().add(\"action-button\");\n+        buttonInputs.setOnAction(e -> { // just show the inputs pane\n+            hideAllPanes();\n+            vBox.getChildren().forEach(button -> button.getStyleClass().remove(\"action-button\"));\n+            buttonInputs.getStyleClass().add(\"action-button\");\n+            inputsGridPane.setVisible(true);\n+        });\n+        buttonImport.setOnAction(e -> { // just show the import pane\n+            hideAllPanes();\n+            vBox.getChildren().forEach(button -> button.getStyleClass().remove(\"action-button\"));\n+            buttonImport.getStyleClass().add(\"action-button\");\n+            importTxGridPane.setVisible(true);\n+            importHex.setText(\"\");\n+        });\n+        buttonExport.setOnAction(e -> { // show export pane and fill in the data\n+            hideAllPanes();\n+            vBox.getChildren().forEach(button -> button.getStyleClass().remove(\"action-button\"));\n+            buttonExport.getStyleClass().add(\"action-button\");\n+            exportTxGridPane.setVisible(true);\n+            exportHex.setText(generateExportText());\n+        });\n+        buttonSign.setOnAction(e -> {   // just show the sign pane\n+            hideAllPanes();\n+            vBox.getChildren().forEach(button -> button.getStyleClass().remove(\"action-button\"));\n+            buttonSign.getStyleClass().add(\"action-button\");\n+            signTxGridPane.setVisible(true);\n+            privateKeyHex.setText(\"\");\n+            signatureHex.setText(\"\");\n+        });\n+        buttonBuild.setOnAction(e -> {  // just show the build pane\n+            hideAllPanes();\n+            vBox.getChildren().forEach(button -> button.getStyleClass().remove(\"action-button\"));\n+            buttonBuild.getStyleClass().add(\"action-button\");\n+            buildTxGridPane.setVisible(true);\n+            finalSignedTxHex.setText(\"\");\n+        });\n+    }\n \n+    private void addInputsPane() {\n+        inputsGridPane = new GridPane();\n+        gridPane.add(inputsGridPane, 1, rowIndex);\n+        int rowIndexA = 0;\n+\n+        depositTxLegacy = addCheckBox(inputsGridPane, rowIndexA, \"depositTxLegacy\");\n+\n+        Tooltip tooltip = new Tooltip(Res.get(\"txIdTextField.blockExplorerIcon.tooltip\"));\n+        blockExplorerIcon = new Label();\n+        blockExplorerIcon.getStyleClass().addAll(\"icon\", \"highlight\");\n+        blockExplorerIcon.setTooltip(tooltip);\n+        AwesomeDude.setIcon(blockExplorerIcon, AwesomeIcon.EXTERNAL_LINK);\n+        blockExplorerIcon.setMinWidth(20);\n+        blockExplorerIcon.setOnMouseClicked(mouseEvent -> openBlockExplorer(depositTxHex.getText()));\n+        depositTxHex = addInputTextField(inputsGridPane, rowIndexA, \"depositTxId\");\n+        HBox hBoxTx = new HBox(12, depositTxHex, blockExplorerIcon);\n+        hBoxTx.setAlignment(Pos.BASELINE_LEFT);\n+        hBoxTx.setPrefWidth(800);\n+        inputsGridPane.add(new Label(\"\"), 0, ++rowIndexA);  // spacer\n+        inputsGridPane.add(hBoxTx, 0, ++rowIndexA);\n+\n+        amountInMultisig = addInputTextField(inputsGridPane, ++rowIndexA, \"amountInMultisig\");\n+        inputsGridPane.add(new Label(\"\"), 0, ++rowIndexA);  // spacer\n+        buyerPayoutAmount = addInputTextField(inputsGridPane, rowIndexA, \"buyerPayoutAmount\");\n+        sellerPayoutAmount = addInputTextField(inputsGridPane, rowIndexA, \"sellerPayoutAmount\");\n+        txFee = addInputTextField(inputsGridPane, rowIndexA, \"Tx fee\");\n+        txFee.setEditable(false);\n+        HBox hBox = new HBox(12, buyerPayoutAmount, sellerPayoutAmount, txFee);\n+        hBox.setAlignment(Pos.BASELINE_LEFT);\n+        hBox.setPrefWidth(800);\n+        inputsGridPane.add(hBox, 0, ++rowIndexA);\n+        buyerAddressString = addInputTextField(inputsGridPane, ++rowIndexA, \"buyerPayoutAddress\");\n+        sellerAddressString = addInputTextField(inputsGridPane, ++rowIndexA, \"sellerPayoutAddress\");\n+        buyerPubKeyAsHex = addInputTextField(inputsGridPane, ++rowIndexA, \"buyerPubKeyAsHex\");\n+        sellerPubKeyAsHex = addInputTextField(inputsGridPane, ++rowIndexA, \"sellerPubKeyAsHex\");\n+        depositTxHex.setPrefWidth(800);\n+        depositTxLegacy.setAllowIndeterminate(false);\n+        depositTxLegacy.setSelected(false);\n+        depositTxHex.setValidator(new LengthValidator(HEX_HASH_LENGTH, HEX_HASH_LENGTH));\n+        buyerAddressString.setValidator(new LengthValidator(20, 80));\n+        sellerAddressString.setValidator(new LengthValidator(20, 80));\n+        buyerPubKeyAsHex.setValidator(new LengthValidator(HEX_PUBKEY_LENGTH, HEX_PUBKEY_LENGTH));\n+        sellerPubKeyAsHex.setValidator(new LengthValidator(HEX_PUBKEY_LENGTH, HEX_PUBKEY_LENGTH));\n+    }\n+\n+    private void addImportPane() {\n+        int rowIndexB = 0;\n+        importTxGridPane = new GridPane();\n+        gridPane.add(importTxGridPane, 1, rowIndex);\n+        importHex = new BisqTextArea();\n+        importHex.setEditable(true);\n+        importHex.setWrapText(true);\n+        importHex.setPrefSize(800, 150);\n+        importTxGridPane.add(importHex, 0, ++rowIndexB);\n+        importTxGridPane.add(new Label(\"\"), 0, ++rowIndexB);  // spacer\n+        Button buttonImport = new AutoTooltipButton(\"Import From String\");\n+        buttonImport.setOnAction(e -> {\n+            // here we need to populate the \"inputs\" fields from the data contained in the TextArea\n+            if (doImport(importHex.getText())) {\n+                // switch back to the inputs pane\n+                hideAllPanes();\n+                inputsGridPane.setVisible(true);\n+            }\n+        });\n+        HBox hBox = new HBox(12, buttonImport);\n+        hBox.setAlignment(Pos.BASELINE_CENTER);\n+        hBox.setPrefWidth(800);\n+        importTxGridPane.add(hBox, 0, ++rowIndexB);\n+        importTxGridPane.add(new Label(\"\"), 0, ++rowIndexB);  // spacer\n+\n+        final Separator separator = new Separator(Orientation.HORIZONTAL);\n+        separator.setPadding(new Insets(10, 10, 10, 10));\n+        importTxGridPane.add(separator, 0, ++rowIndexB);\n+\n+        importTxGridPane.add(new Label(\"\"), 0, ++rowIndexB);  // spacer\n+        final Tuple2<Label, ComboBox<String>> xTuple = addTopLabelComboBox(importTxGridPane, rowIndexB, \"Mediation Ticket\", \"\", 0);\n+        mediationDropDown = xTuple.second;\n+        recentTickets = addCheckBox(importTxGridPane, rowIndexB, \"Recent Tickets\");\n+        recentTickets.setSelected(true);\n+        HBox hBox2 = new HBox(12, mediationDropDown, recentTickets);\n+        hBox2.setAlignment(Pos.BASELINE_CENTER);\n+        hBox2.setPrefWidth(800);\n+        importTxGridPane.add(hBox2, 0, ++rowIndexB);\n+        populateMediationTicketCombo(recentTickets.isSelected());\n+        recentTickets.setOnAction(e -> {\n+            populateMediationTicketCombo(recentTickets.isSelected());\n+        });\n+        importTxGridPane.add(new Label(\"\"), 0, ++rowIndexB);  // spacer\n+        Button buttonImportTicket = new AutoTooltipButton(\"Import From Mediation Ticket\");\n+        buttonImportTicket.setOnAction(e -> {\n+            // here we need to populate the \"inputs\" fields from the chosen mediator ticket\n+            importFromMediationTicket(mediationDropDown.getValue());\n+        });\n+        HBox hBox3 = new HBox(12, buttonImportTicket);\n+        hBox3.setAlignment(Pos.BASELINE_CENTER);\n+        hBox3.setPrefWidth(800);\n+        importTxGridPane.add(hBox3, 0, ++rowIndexB);\n+    }\n+\n+    private void addExportPane() {\n+        exportTxGridPane = new GridPane();\n+        gridPane.add(exportTxGridPane, 1, rowIndex);\n+        exportHex = new BisqTextArea();\n+        exportHex.setEditable(false);\n+        exportHex.setWrapText(true);\n+        exportHex.setPrefSize(800, 250);\n+        exportTxGridPane.add(exportHex, 0, 1);\n+    }\n+\n+    private void addSignPane() {\n+        int rowIndexB = 0;\n+        signTxGridPane = new GridPane();\n+        gridPane.add(signTxGridPane, 1, rowIndex);\n+        privateKeyHex = addInputTextField(inputsGridPane, ++rowIndexB, \"privateKeyHex\");\n+        signTxGridPane.add(privateKeyHex, 0, ++rowIndexB);\n+        signatureHex = addInputTextField(signTxGridPane, ++rowIndexB, \"signatureHex\");\n+        signatureHex.setPrefWidth(800);\n+        signatureHex.setEditable(false);\n+        copyIcon = new Label();\n+        copyIcon.setTooltip(new Tooltip(Res.get(\"txIdTextField.copyIcon.tooltip\")));\n+        AwesomeDude.setIcon(copyIcon, AwesomeIcon.COPY);\n+        copyIcon.getStyleClass().addAll(\"icon\", \"highlight\");\n+        copyIcon.setMinWidth(20);\n+        copyIcon.setOnMouseClicked(mouseEvent -> Utilities.copyToClipboard(signatureHex.getText()));\n+        HBox hBoxSig = new HBox(12, signatureHex, copyIcon);\n+        hBoxSig.setAlignment(Pos.BASELINE_LEFT);\n+        hBoxSig.setPrefWidth(800);\n+        signTxGridPane.add(new Label(\"\"), 0, ++rowIndexB);  // spacer\n+        signTxGridPane.add(hBoxSig, 0, ++rowIndexB);\n+        signTxGridPane.add(new Label(\"\"), 0, ++rowIndexB);  // spacer\n+        Button buttonLocate = new AutoTooltipButton(\"Locate key in wallet\");\n+        Button buttonSign = new AutoTooltipButton(\"Generate Signature\");\n+        HBox hBox = new HBox(12, buttonLocate, buttonSign);\n+        hBox.setAlignment(Pos.BASELINE_CENTER);\n+        hBox.setPrefWidth(800);\n+        signTxGridPane.add(hBox, 0, ++rowIndexB);\n+        buttonLocate.setOnAction(e -> {\n+            if (!validateInputFields()) {\n+                signatureHex.setText(\"You need to fill in the inputs tab first\");\n+                return;\n+            }\n+            String walletInfo = walletsManager.getWalletsAsString(true);\n+            String privateKeyText = findPrivForPub(walletInfo, buyerPubKeyAsHex.getText());\n+            if (privateKeyText == null) {\n+                privateKeyText = findPrivForPub(walletInfo, sellerPubKeyAsHex.getText());\n+            }\n+            if (privateKeyText == null) {\n+                privateKeyText = \"Not found in wallet\";\n+            }\n+            privateKeyHex.setText(privateKeyText);\n+        });\n+        buttonSign.setOnAction(e -> {\n+            signatureHex.setText(generateSignature());\n+        });\n+    }\n+\n+    private void addBuildPane() {\n+        buildTxGridPane = new GridPane();\n+        gridPane.add(buildTxGridPane, 1, rowIndex);\n+        int rowIndexA = 0;\n+        buyerSignatureAsHex = addInputTextField(buildTxGridPane, ++rowIndexA, \"buyerSignatureAsHex\");\n+        sellerSignatureAsHex = addInputTextField(buildTxGridPane, ++rowIndexA, \"sellerSignatureAsHex\");\n+        buildTxGridPane.add(new Label(\"\"), 0, ++rowIndexA);  // spacer\n+        finalSignedTxHex = new BisqTextArea();\n+        finalSignedTxHex.setEditable(false);\n+        finalSignedTxHex.setWrapText(true);\n+        finalSignedTxHex.setPrefSize(800, 250);\n+        buildTxGridPane.add(finalSignedTxHex, 0, ++rowIndexA);\n+        buildTxGridPane.add(new Label(\"\"), 0, ++rowIndexA);  // spacer\n+        Button buttonBuild = new AutoTooltipButton(\"Build\");\n+        Button buttonBroadcast = new AutoTooltipButton(\"Broadcast\");\n+        HBox hBox = new HBox(12, buttonBuild, buttonBroadcast);\n+        hBox.setAlignment(Pos.BASELINE_CENTER);\n+        hBox.setPrefWidth(800);\n+        buildTxGridPane.add(hBox, 0, ++rowIndexA);\n+        buttonBuild.setOnAction(e -> {\n+            finalSignedTxHex.setText(buildFinalTx(false));\n+        });\n+        buttonBroadcast.setOnAction(e -> {\n+            finalSignedTxHex.setText(buildFinalTx(true));\n+        });\n+    }\n+\n+    private void hideAllPanes() {\n+        inputsGridPane.setVisible(false);\n+        importTxGridPane.setVisible(false);\n+        exportTxGridPane.setVisible(false);\n+        signTxGridPane.setVisible(false);\n+        buildTxGridPane.setVisible(false);\n+    }\n+\n+    private void populateMediationTicketCombo(boolean recentTicketsOnly) {\n+        Instant twoWeeksAgo = Instant.ofEpochSecond(Instant.now().getEpochSecond() - TimeUnit.DAYS.toSeconds(14));\n+        disputeObservableList = mediationManager.getDisputesAsObservableList();\n+        ObservableList<String> disputeIds = FXCollections.observableArrayList();\n+        for (Dispute dispute :disputeObservableList) {\n+            if (dispute.getDisputePayoutTxId() != null)    // only show disputes not paid out\n+                continue;\n+            if (!dispute.isClosed())    // only show closed disputes\n+                continue;\n+            if (recentTicketsOnly && dispute.getOpeningDate().toInstant().isBefore(twoWeeksAgo))\n+                continue;\n+            if (!disputeIds.contains(dispute.getTradeId()))\n+                disputeIds.add(dispute.getTradeId());\n+        }\n+        disputeIds.sort((a, b) -> a.compareTo(b));\n+        mediationDropDown.setItems(disputeIds);\n+    }\n+\n+    private void clearInputFields() {\n+        depositTxHex.setText(\"\");\n+        amountInMultisig.setText(\"\");\n         buyerPayoutAmount.setText(\"\");\n         sellerPayoutAmount.setText(\"\");\n-\n         buyerAddressString.setText(\"\");\n-        buyerPubKeyAsHex.setText(\"\");\n-        buyerPrivateKeyAsHex.setText(\"\");\n-\n         sellerAddressString.setText(\"\");\n+        buyerPubKeyAsHex.setText(\"\");\n         sellerPubKeyAsHex.setText(\"\");\n-        sellerPrivateKeyAsHex.setText(\"\");\n+    }\n \n-        depositTxLegacy.setAllowIndeterminate(false);\n-        depositTxLegacy.setSelected(false);\n+    private boolean validateInputFields() {\n+        return (depositTxHex.getText().length() == HEX_HASH_LENGTH &&\n+                amountInMultisig.getText().length() > 0 &&\n+                buyerPayoutAmount.getText().length() > 0 &&\n+                sellerPayoutAmount.getText().length() > 0 &&\n+                txFee.getText().length() > 0 &&\n+                buyerAddressString.getText().length() > 0 &&\n+                sellerAddressString.getText().length() > 0 &&\n+                buyerPubKeyAsHex.getText().length() == HEX_PUBKEY_LENGTH &&\n+                sellerPubKeyAsHex.getText().length() == HEX_PUBKEY_LENGTH);\n+    }\n \n-        actionButtonText(\"Sign and publish transaction\");\n+    private boolean validateInputFieldsAndSignatures() {\n+        return (validateInputFields() &&\n+                buyerSignatureAsHex.getText().length() > 0 &&\n+                sellerSignatureAsHex.getText().length() > 0);\n+    }\n \n-        TxBroadcaster.Callback callback = new TxBroadcaster.Callback() {\n-            @Override\n-            public void onSuccess(@Nullable Transaction result) {\n-                log.error(\"onSuccess\");\n-                UserThread.execute(() -> {\n-                    String txId = result != null ? result.getTxId().toString() : \"null\";\n-                    new Popup().information(\"Transaction successful published. Transaction ID: \" + txId).show();\n-                });\n-            }\n+    private void calculateTxFee() {\n+        if (buyerPayoutAmount.getText().length() > 0 &&\n+                sellerPayoutAmount.getText().length() > 0 &&\n+                amountInMultisig.getText().length() > 0) {\n+            Coin txFeeValue = Coin.parseCoin(amountInMultisig.getText())", "originalCommit": "b1d22af1ae357c926ef2cd0b8692c880d6263de1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUzMDI1Nw==", "url": "https://github.com/bisq-network/bisq/pull/4899#discussion_r544530257", "bodyText": "I'll wait for this before I cherry-pick.", "author": "ripcurlx", "createdAt": "2020-12-16T18:34:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5NDU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgwNDAxMg==", "url": "https://github.com/bisq-network/bisq/pull/4899#discussion_r544804012", "bodyText": "Resolved by e888be3", "author": "jmacxx", "createdAt": "2020-12-17T04:29:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5NDU1NA=="}], "type": "inlineReview", "revised_code": {"commit": "e888be319256ef1fd5a429a367274df35fed21b2", "chunk": "diff --git a/desktop/src/main/java/bisq/desktop/main/overlays/windows/ManualPayoutTxWindow.java b/desktop/src/main/java/bisq/desktop/main/overlays/windows/ManualPayoutTxWindow.java\nindex 5e40b22ea2..7287455457 100644\n--- a/desktop/src/main/java/bisq/desktop/main/overlays/windows/ManualPayoutTxWindow.java\n+++ b/desktop/src/main/java/bisq/desktop/main/overlays/windows/ManualPayoutTxWindow.java\n\n@@ -528,13 +528,21 @@ public class ManualPayoutTxWindow extends Overlay<ManualPayoutTxWindow> {\n                 sellerSignatureAsHex.getText().length() > 0);\n     }\n \n+    private Coin getInputFieldAsCoin(InputTextField inputTextField) {\n+        try {\n+            return Coin.parseCoin(inputTextField.getText());\n+        } catch (RuntimeException ignore) {\n+        }\n+        return Coin.ZERO;\n+    }\n+\n     private void calculateTxFee() {\n         if (buyerPayoutAmount.getText().length() > 0 &&\n                 sellerPayoutAmount.getText().length() > 0 &&\n                 amountInMultisig.getText().length() > 0) {\n-            Coin txFeeValue = Coin.parseCoin(amountInMultisig.getText())\n-                    .subtract(Coin.parseCoin(buyerPayoutAmount.getText()))\n-                    .subtract(Coin.parseCoin(sellerPayoutAmount.getText()));\n+            Coin txFeeValue = getInputFieldAsCoin(amountInMultisig)\n+                    .subtract(getInputFieldAsCoin(buyerPayoutAmount))\n+                    .subtract(getInputFieldAsCoin(sellerPayoutAmount));\n             txFee.setText(txFeeValue.toPlainString());\n         }\n     }\n"}}, {"oid": "e888be319256ef1fd5a429a367274df35fed21b2", "url": "https://github.com/bisq-network/bisq/commit/e888be319256ef1fd5a429a367274df35fed21b2", "message": "review fix: try..catch around all parseCoin()", "committedDate": "2020-12-17T04:15:16Z", "type": "commit"}]}