{"pr_number": 1901, "pr_title": "[HUDI-532] Add java doc for the test classes of hudi test suite", "pr_createdAt": "2020-08-02T03:59:07Z", "pr_url": "https://github.com/apache/hudi/pull/1901", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzMTQ4OA==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r466831488", "bodyText": "\"ITTest help\" -> ITTest. Helps", "author": "cheshta2904", "createdAt": "2020-08-07T05:39:11Z", "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/ITTestBase.java", "diffHunk": "@@ -48,6 +48,9 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n \n+/**\n+ * Base test class for ITTest help to run cmd and generate data.", "originalCommit": "bbc941d753926c529ac329ed6c080dce7e8c683a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNTI1Mg==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r467025252", "bodyText": "done, thanks for your review", "author": "wangxianghu", "createdAt": "2020-08-07T13:01:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzMTQ4OA=="}], "type": "inlineReview", "revised_code": {"commit": "c02f6ea8a32b279fd67c6e1213a789e6da4687c6", "chunk": "diff --git a/hudi-integ-test/src/test/java/org/apache/hudi/integ/ITTestBase.java b/hudi-integ-test/src/test/java/org/apache/hudi/integ/ITTestBase.java\nindex 5141ad555..508376a7b 100644\n--- a/hudi-integ-test/src/test/java/org/apache/hudi/integ/ITTestBase.java\n+++ b/hudi-integ-test/src/test/java/org/apache/hudi/integ/ITTestBase.java\n\n@@ -49,7 +49,7 @@ import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n \n /**\n- * Base test class for ITTest help to run cmd and generate data.\n+ * Base test class for IT Test. helps to run cmd and generate data.\n  */\n public abstract class ITTestBase {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzMjUzMA==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r466832530", "bodyText": "generate -> generates.", "author": "pratyakshsharma", "createdAt": "2020-08-07T05:42:57Z", "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/dag/ComplexDagGenerator.java", "diffHunk": "@@ -33,6 +33,9 @@\n import org.apache.hudi.integ.testsuite.dag.nodes.ValidateNode;\n import org.apache.spark.api.java.JavaRDD;\n \n+/**\n+ * An implementation of {@link WorkflowDagGenerator}, that generate complex workflowDag.", "originalCommit": "bbc941d753926c529ac329ed6c080dce7e8c683a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNTc1Mw==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r467025753", "bodyText": "generate -> generates.\n\ndone", "author": "wangxianghu", "createdAt": "2020-08-07T13:02:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzMjUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "c02f6ea8a32b279fd67c6e1213a789e6da4687c6", "chunk": "diff --git a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/dag/ComplexDagGenerator.java b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/dag/ComplexDagGenerator.java\nindex 6e6011f92..4996cfca8 100644\n--- a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/dag/ComplexDagGenerator.java\n+++ b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/dag/ComplexDagGenerator.java\n\n@@ -34,7 +34,7 @@ import org.apache.hudi.integ.testsuite.dag.nodes.ValidateNode;\n import org.apache.spark.api.java.JavaRDD;\n \n /**\n- * An implementation of {@link WorkflowDagGenerator}, that generate complex workflowDag.\n+ * An implementation of {@link WorkflowDagGenerator}, that generates complex workflowDag.\n  */\n public class ComplexDagGenerator implements WorkflowDagGenerator {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzMjU4Mg==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r466832582", "bodyText": "ditto.", "author": "pratyakshsharma", "createdAt": "2020-08-07T05:43:13Z", "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/dag/HiveSyncDagGenerator.java", "diffHunk": "@@ -31,6 +31,9 @@\n import org.apache.hudi.integ.testsuite.dag.nodes.HiveSyncNode;\n import org.apache.hudi.integ.testsuite.dag.nodes.InsertNode;\n \n+/**\n+ * An implementation of {@link WorkflowDagGenerator}, that generate hive sync workflowDag.", "originalCommit": "bbc941d753926c529ac329ed6c080dce7e8c683a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNTgxNg==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r467025816", "bodyText": "done", "author": "wangxianghu", "createdAt": "2020-08-07T13:02:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzMjU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c02f6ea8a32b279fd67c6e1213a789e6da4687c6", "chunk": "diff --git a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/dag/HiveSyncDagGenerator.java b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/dag/HiveSyncDagGenerator.java\nindex 42a88af22..1dd37be6e 100644\n--- a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/dag/HiveSyncDagGenerator.java\n+++ b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/dag/HiveSyncDagGenerator.java\n\n@@ -32,7 +32,7 @@ import org.apache.hudi.integ.testsuite.dag.nodes.HiveSyncNode;\n import org.apache.hudi.integ.testsuite.dag.nodes.InsertNode;\n \n /**\n- * An implementation of {@link WorkflowDagGenerator}, that generate hive sync workflowDag.\n+ * An implementation of {@link WorkflowDagGenerator}, that generates hive sync workflowDag.\n  */\n public class HiveSyncDagGenerator implements WorkflowDagGenerator {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzMjY0Mg==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r466832642", "bodyText": "ditto.", "author": "pratyakshsharma", "createdAt": "2020-08-07T05:43:25Z", "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/dag/HiveSyncDagGeneratorMOR.java", "diffHunk": "@@ -31,6 +31,9 @@\n import org.apache.hudi.integ.testsuite.dag.nodes.HiveSyncNode;\n import org.apache.hudi.integ.testsuite.dag.nodes.InsertNode;\n \n+/**\n+ * An implementation of {@link WorkflowDagGenerator}, that generate hive sync workflowDag for MOR table.", "originalCommit": "bbc941d753926c529ac329ed6c080dce7e8c683a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNTg5OQ==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r467025899", "bodyText": "done", "author": "wangxianghu", "createdAt": "2020-08-07T13:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzMjY0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c02f6ea8a32b279fd67c6e1213a789e6da4687c6", "chunk": "diff --git a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/dag/HiveSyncDagGeneratorMOR.java b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/dag/HiveSyncDagGeneratorMOR.java\nindex 6bba80590..d2b79ea3a 100644\n--- a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/dag/HiveSyncDagGeneratorMOR.java\n+++ b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/dag/HiveSyncDagGeneratorMOR.java\n\n@@ -32,7 +32,7 @@ import org.apache.hudi.integ.testsuite.dag.nodes.HiveSyncNode;\n import org.apache.hudi.integ.testsuite.dag.nodes.InsertNode;\n \n /**\n- * An implementation of {@link WorkflowDagGenerator}, that generate hive sync workflowDag for MOR table.\n+ * An implementation of {@link WorkflowDagGenerator}, that generates hive sync workflowDag for MOR table.\n  */\n public class HiveSyncDagGeneratorMOR implements WorkflowDagGenerator {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzMjgzNw==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r466832837", "bodyText": "test -> testing.", "author": "pratyakshsharma", "createdAt": "2020-08-07T05:44:09Z", "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/utils/TestUtils.java", "diffHunk": "@@ -28,6 +28,9 @@\n import org.apache.spark.api.java.JavaSparkContext;\n import org.apache.spark.sql.SparkSession;\n \n+/**\n+ * A utility class for test purpose.", "originalCommit": "bbc941d753926c529ac329ed6c080dce7e8c683a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNTk4OQ==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r467025989", "bodyText": "done", "author": "wangxianghu", "createdAt": "2020-08-07T13:02:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzMjgzNw=="}], "type": "inlineReview", "revised_code": {"commit": "c02f6ea8a32b279fd67c6e1213a789e6da4687c6", "chunk": "diff --git a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/utils/TestUtils.java b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/utils/TestUtils.java\nindex 33b0e75a4..ce403964c 100644\n--- a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/utils/TestUtils.java\n+++ b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/utils/TestUtils.java\n\n@@ -29,7 +29,7 @@ import org.apache.spark.api.java.JavaSparkContext;\n import org.apache.spark.sql.SparkSession;\n \n /**\n- * A utility class for test purpose.\n+ * A utility class for testing purpose.\n  */\n public class TestUtils {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzMzExNg==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r466833116", "bodyText": "basePath where files are written.", "author": "pratyakshsharma", "createdAt": "2020-08-07T05:45:05Z", "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/utils/TestUtils.java", "diffHunk": "@@ -45,6 +48,15 @@\n     return dataGenerator.generateGenericRecords(numRecords);\n   }\n \n+  /**\n+   * Method help to create avro files and save it to file.\n+   *\n+   * @param jsc               {@link JavaSparkContext}.\n+   * @param sparkSession      {@link SparkSession}.\n+   * @param basePath          The basePath where files written to.", "originalCommit": "bbc941d753926c529ac329ed6c080dce7e8c683a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNjA2Ng==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r467026066", "bodyText": "done", "author": "wangxianghu", "createdAt": "2020-08-07T13:02:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzMzExNg=="}], "type": "inlineReview", "revised_code": {"commit": "c02f6ea8a32b279fd67c6e1213a789e6da4687c6", "chunk": "diff --git a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/utils/TestUtils.java b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/utils/TestUtils.java\nindex 33b0e75a4..ce403964c 100644\n--- a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/utils/TestUtils.java\n+++ b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/utils/TestUtils.java\n\n@@ -53,7 +53,7 @@ public class TestUtils {\n    *\n    * @param jsc               {@link JavaSparkContext}.\n    * @param sparkSession      {@link SparkSession}.\n-   * @param basePath          The basePath where files written to.\n+   * @param basePath          The basePath where files are written.\n    * @param numFiles          The number of files to create.\n    * @param numRecordsPerFile The number of records per file.\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzMzY0Mw==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r466833643", "bodyText": "{@link HoodieTestSuiteWriter}. Helps to test writing a DFS file.", "author": "pratyakshsharma", "createdAt": "2020-08-07T05:46:50Z", "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/TestDFSHoodieTestSuiteWriterAdapter.java", "diffHunk": "@@ -52,6 +52,9 @@\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n+/**\n+ * An adapter of {@link HoodieTestSuiteWriter} help to test write DFS file.", "originalCommit": "bbc941d753926c529ac329ed6c080dce7e8c683a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNjEyMQ==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r467026121", "bodyText": "done", "author": "wangxianghu", "createdAt": "2020-08-07T13:03:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzMzY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c02f6ea8a32b279fd67c6e1213a789e6da4687c6", "chunk": "diff --git a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/TestDFSHoodieTestSuiteWriterAdapter.java b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/TestDFSHoodieTestSuiteWriterAdapter.java\nindex 22414c492..d6d3e68ed 100644\n--- a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/TestDFSHoodieTestSuiteWriterAdapter.java\n+++ b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/TestDFSHoodieTestSuiteWriterAdapter.java\n\n@@ -53,7 +53,7 @@ import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n /**\n- * An adapter of {@link HoodieTestSuiteWriter} help to test write DFS file.\n+ * {@link HoodieTestSuiteWriter}. Helps to test writing a DFS file.\n  */\n public class TestDFSHoodieTestSuiteWriterAdapter extends UtilitiesTestBase {\n \n"}}, {"oid": "c02f6ea8a32b279fd67c6e1213a789e6da4687c6", "url": "https://github.com/apache/hudi/commit/c02f6ea8a32b279fd67c6e1213a789e6da4687c6", "message": "[HUDI-532]Add java doc for hudi test suite test classes", "committedDate": "2020-08-07T12:59:19Z", "type": "forcePushed"}, {"oid": "9f7d2bb07802f9c76aa91e514bc2112e868c9db8", "url": "https://github.com/apache/hudi/commit/9f7d2bb07802f9c76aa91e514bc2112e868c9db8", "message": "[HUDI-532]Add java doc for hudi test suite test classes", "committedDate": "2020-08-07T13:11:31Z", "type": "forcePushed"}, {"oid": "52131e6a4b1a364eaf7cb49b61a9c7a61a4d1117", "url": "https://github.com/apache/hudi/commit/52131e6a4b1a364eaf7cb49b61a9c7a61a4d1117", "message": "[HUDI-532]Add java doc for hudi test suite test classes", "committedDate": "2020-08-11T14:05:21Z", "type": "forcePushed"}, {"oid": "7af8725af13b11e2fe71351a3a5cf51af37f9717", "url": "https://github.com/apache/hudi/commit/7af8725af13b11e2fe71351a3a5cf51af37f9717", "message": "[HUDI-532]Add java doc for hudi test suite test classes", "committedDate": "2020-08-11T14:10:12Z", "type": "commit"}, {"oid": "7af8725af13b11e2fe71351a3a5cf51af37f9717", "url": "https://github.com/apache/hudi/commit/7af8725af13b11e2fe71351a3a5cf51af37f9717", "message": "[HUDI-532]Add java doc for hudi test suite test classes", "committedDate": "2020-08-11T14:10:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5MTI1MA==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r475291250", "bodyText": "Base test class for IT Test helps to run command and generate data.?", "author": "yanghua", "createdAt": "2020-08-24T00:49:02Z", "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/ITTestBase.java", "diffHunk": "@@ -50,6 +50,9 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n \n+/**\n+ * Base test class for IT Test. helps to run cmd and generate data.", "originalCommit": "7af8725af13b11e2fe71351a3a5cf51af37f9717", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ca0a57596095dcf19cb37c82394e279080a3b1e", "chunk": "diff --git a/hudi-integ-test/src/test/java/org/apache/hudi/integ/ITTestBase.java b/hudi-integ-test/src/test/java/org/apache/hudi/integ/ITTestBase.java\nindex d659c659f..267d15636 100644\n--- a/hudi-integ-test/src/test/java/org/apache/hudi/integ/ITTestBase.java\n+++ b/hudi-integ-test/src/test/java/org/apache/hudi/integ/ITTestBase.java\n\n@@ -51,7 +51,7 @@ import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n \n /**\n- * Base test class for IT Test. helps to run cmd and generate data.\n+ * Base test class for IT Test helps to run command and generate data.\n  */\n public abstract class ITTestBase {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5MTUyOQ==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r475291529", "bodyText": "Helps? This usage may not be correct?", "author": "yanghua", "createdAt": "2020-08-24T00:50:45Z", "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/TestDFSHoodieTestSuiteWriterAdapter.java", "diffHunk": "@@ -52,6 +52,9 @@\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n+/**\n+ * {@link HoodieTestSuiteWriter}. Helps to test writing a DFS file.", "originalCommit": "7af8725af13b11e2fe71351a3a5cf51af37f9717", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ca0a57596095dcf19cb37c82394e279080a3b1e", "chunk": "diff --git a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/TestDFSHoodieTestSuiteWriterAdapter.java b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/TestDFSHoodieTestSuiteWriterAdapter.java\nindex d6d3e68ed..ff41b44dd 100644\n--- a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/TestDFSHoodieTestSuiteWriterAdapter.java\n+++ b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/TestDFSHoodieTestSuiteWriterAdapter.java\n\n@@ -53,7 +53,7 @@ import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n /**\n- * {@link HoodieTestSuiteWriter}. Helps to test writing a DFS file.\n+ * Unit test against DeltaWriterAdapter, by testing writing DFS files.\n  */\n public class TestDFSHoodieTestSuiteWriterAdapter extends UtilitiesTestBase {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5MTg2Nw==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r475291867", "bodyText": "please remove all the comments of this method", "author": "yanghua", "createdAt": "2020-08-24T00:53:16Z", "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/configuration/TestWorkflowBuilder.java", "diffHunk": "@@ -30,41 +30,58 @@\n import org.apache.hudi.integ.testsuite.dag.WorkflowDag;\n import org.junit.jupiter.api.Test;\n \n+/**\n+ * Unit test for the build process of {@link DagNode} and {@link WorkflowDag}.\n+ */\n public class TestWorkflowBuilder {\n \n   @Test\n   public void testWorkloadOperationSequenceBuilder() {", "originalCommit": "7af8725af13b11e2fe71351a3a5cf51af37f9717", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ca0a57596095dcf19cb37c82394e279080a3b1e", "chunk": "diff --git a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/configuration/TestWorkflowBuilder.java b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/configuration/TestWorkflowBuilder.java\nindex e3a62ad11..1e5ca6886 100644\n--- a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/configuration/TestWorkflowBuilder.java\n+++ b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/configuration/TestWorkflowBuilder.java\n\n@@ -38,50 +38,36 @@ public class TestWorkflowBuilder {\n   @Test\n   public void testWorkloadOperationSequenceBuilder() {\n \n-    // root node\n     DagNode root = new InsertNode(DeltaConfig.Config.newBuilder()\n         .withNumRecordsToInsert(10000)\n         .withNumInsertPartitions(1)\n         .withNumTimesToRepeat(2)\n         .withRecordSize(1000).build());\n \n-    // child node\n     DagNode child1 = new UpsertNode(DeltaConfig.Config.newBuilder()\n         .withNumRecordsToUpdate(10000)\n         .withNumInsertPartitions(1)\n         .withNumTimesToRepeat(2)\n         .withRecordSize(1000).build());\n \n-    // create relationship between root and child node\n     root.addChildNode(child1);\n     child1.addParentNode(root);\n     List<DagNode> rootNodes = new ArrayList<>();\n     rootNodes.add(root);\n-\n-    // build workflow DAG\n     WorkflowDag workflowDag = new WorkflowDag(rootNodes);\n \n-    // assert workflow\n     assertEquals(workflowDag.getNodeList().size(), 1);\n     assertEquals(((DagNode) workflowDag.getNodeList().get(0)).getChildNodes().size(), 1);\n-\n-    // test root node in workflow\n     DagNode dagNode = (DagNode) workflowDag.getNodeList().get(0);\n     assertTrue(dagNode instanceof InsertNode);\n-\n-    // test DeltaConfig.Config\n     DeltaConfig.Config config = dagNode.getConfig();\n     assertEquals(config.getNumInsertPartitions(), 1);\n     assertEquals(config.getRecordSize(), 1000);\n     assertEquals(config.getRepeatCount(), 2);\n     assertEquals(config.getNumRecordsInsert(), 10000);\n     assertEquals(config.getNumRecordsUpsert(), 0);\n-\n-    // test child node in workflow\n     dagNode = (DagNode) ((DagNode) workflowDag.getNodeList().get(0)).getChildNodes().get(0);\n     assertTrue(dagNode instanceof UpsertNode);\n-\n-    // test the config of child node\n     config = dagNode.getConfig();\n     assertEquals(config.getNumInsertPartitions(), 1);\n     assertEquals(config.getRecordSize(), 1000);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5MjI1Nw==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r475292257", "bodyText": "record -> records", "author": "yanghua", "createdAt": "2020-08-24T00:55:41Z", "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/converter/TestUpdateConverter.java", "diffHunk": "@@ -49,11 +53,16 @@ public void teardown() {\n     jsc.stop();\n   }\n \n+  /**\n+   * Test {@link UpdateConverter} by generates random updates from existing records.\n+   */\n   @Test\n   public void testGenerateUpdateRecordsFromInputRecords() throws Exception {\n+    // 1. prepare input record", "originalCommit": "7af8725af13b11e2fe71351a3a5cf51af37f9717", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ca0a57596095dcf19cb37c82394e279080a3b1e", "chunk": "diff --git a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/converter/TestUpdateConverter.java b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/converter/TestUpdateConverter.java\nindex c1243b00c..c48d1b13f 100644\n--- a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/converter/TestUpdateConverter.java\n+++ b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/converter/TestUpdateConverter.java\n\n@@ -58,7 +58,7 @@ public class TestUpdateConverter {\n    */\n   @Test\n   public void testGenerateUpdateRecordsFromInputRecords() throws Exception {\n-    // 1. prepare input record\n+    // 1. prepare input records\n     JavaRDD<GenericRecord> inputRDD = TestUtils.makeRDD(jsc, 10);\n     String schemaStr = inputRDD.take(1).get(0).getSchema().toString();\n     int minPayloadSize = 1000;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5MjM2MQ==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r475292361", "bodyText": "with what?", "author": "yanghua", "createdAt": "2020-08-24T00:56:12Z", "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/dag/ComplexDagGenerator.java", "diffHunk": "@@ -46,6 +51,7 @@ public WorkflowDag build() {\n         .withNumInsertPartitions(1)\n         .withRecordSize(10000).build());\n \n+    // function to build ValidateNode with", "originalCommit": "7af8725af13b11e2fe71351a3a5cf51af37f9717", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ca0a57596095dcf19cb37c82394e279080a3b1e", "chunk": "diff --git a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/dag/ComplexDagGenerator.java b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/dag/ComplexDagGenerator.java\nindex c0306e071..44b0ccd2f 100644\n--- a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/dag/ComplexDagGenerator.java\n+++ b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/dag/ComplexDagGenerator.java\n\n@@ -51,7 +51,7 @@ public class ComplexDagGenerator implements WorkflowDagGenerator {\n         .withNumInsertPartitions(1)\n         .withRecordSize(10000).build());\n \n-    // function to build ValidateNode with\n+    // function used to build ValidateNode\n     Function<List<DagNode<JavaRDD<WriteStatus>>>, Boolean> function = (dagNodes) -> {\n       DagNode<JavaRDD<WriteStatus>> parent1 = dagNodes.get(0);\n       List<WriteStatus> statuses = parent1.getResult().collect();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwNTAzOQ==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r475305039", "bodyText": "Unit test?", "author": "yanghua", "createdAt": "2020-08-24T02:03:13Z", "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/job/TestHoodieTestSuiteJob.java", "diffHunk": "@@ -49,6 +49,9 @@\n import org.junit.jupiter.params.provider.Arguments;\n import org.junit.jupiter.params.provider.MethodSource;\n \n+/**\n+ * Unit tests against {@link HoodieTestSuiteJob}.", "originalCommit": "7af8725af13b11e2fe71351a3a5cf51af37f9717", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ca0a57596095dcf19cb37c82394e279080a3b1e", "chunk": "diff --git a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/job/TestHoodieTestSuiteJob.java b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/job/TestHoodieTestSuiteJob.java\nindex bec315d87..582601983 100644\n--- a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/job/TestHoodieTestSuiteJob.java\n+++ b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/job/TestHoodieTestSuiteJob.java\n\n@@ -50,7 +50,7 @@ import org.junit.jupiter.params.provider.Arguments;\n import org.junit.jupiter.params.provider.MethodSource;\n \n /**\n- * Unit tests against {@link HoodieTestSuiteJob}.\n+ * Unit test against {@link HoodieTestSuiteJob}.\n  */\n public class TestHoodieTestSuiteJob extends UtilitiesTestBase {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwNTE1MQ==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r475305151", "bodyText": "Methods?", "author": "yanghua", "createdAt": "2020-08-24T02:03:45Z", "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/utils/TestUtils.java", "diffHunk": "@@ -45,6 +48,15 @@\n     return dataGenerator.generateGenericRecords(numRecords);\n   }\n \n+  /**\n+   * Method help to create avro files and save it to file.", "originalCommit": "7af8725af13b11e2fe71351a3a5cf51af37f9717", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ca0a57596095dcf19cb37c82394e279080a3b1e", "chunk": "diff --git a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/utils/TestUtils.java b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/utils/TestUtils.java\nindex ce403964c..372d6748c 100644\n--- a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/utils/TestUtils.java\n+++ b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/utils/TestUtils.java\n\n@@ -49,10 +49,10 @@ public class TestUtils {\n   }\n \n   /**\n-   * Method help to create avro files and save it to file.\n+   * Method helps to create avro files and save it to file.\n    *\n-   * @param jsc               {@link JavaSparkContext}.\n-   * @param sparkSession      {@link SparkSession}.\n+   * @param jsc               Java Spark Context jsc.\n+   * @param sparkSession      Spark Session, the entry point to programming Spark with the Dataset and DataFrame API.\n    * @param basePath          The basePath where files are written.\n    * @param numFiles          The number of files to create.\n    * @param numRecordsPerFile The number of records per file.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwNTI2NA==", "url": "https://github.com/apache/hudi/pull/1901#discussion_r475305264", "bodyText": "We should not only use {@link } in the comment, add more description.", "author": "yanghua", "createdAt": "2020-08-24T02:04:25Z", "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/utils/TestUtils.java", "diffHunk": "@@ -45,6 +48,15 @@\n     return dataGenerator.generateGenericRecords(numRecords);\n   }\n \n+  /**\n+   * Method help to create avro files and save it to file.\n+   *\n+   * @param jsc               {@link JavaSparkContext}.", "originalCommit": "7af8725af13b11e2fe71351a3a5cf51af37f9717", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ca0a57596095dcf19cb37c82394e279080a3b1e", "chunk": "diff --git a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/utils/TestUtils.java b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/utils/TestUtils.java\nindex ce403964c..372d6748c 100644\n--- a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/utils/TestUtils.java\n+++ b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/utils/TestUtils.java\n\n@@ -49,10 +49,10 @@ public class TestUtils {\n   }\n \n   /**\n-   * Method help to create avro files and save it to file.\n+   * Method helps to create avro files and save it to file.\n    *\n-   * @param jsc               {@link JavaSparkContext}.\n-   * @param sparkSession      {@link SparkSession}.\n+   * @param jsc               Java Spark Context jsc.\n+   * @param sparkSession      Spark Session, the entry point to programming Spark with the Dataset and DataFrame API.\n    * @param basePath          The basePath where files are written.\n    * @param numFiles          The number of files to create.\n    * @param numRecordsPerFile The number of records per file.\n"}}, {"oid": "5ca0a57596095dcf19cb37c82394e279080a3b1e", "url": "https://github.com/apache/hudi/commit/5ca0a57596095dcf19cb37c82394e279080a3b1e", "message": "minor adjust about Unit test doc", "committedDate": "2020-08-24T11:28:21Z", "type": "commit"}]}