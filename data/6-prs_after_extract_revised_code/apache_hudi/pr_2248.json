{"pr_number": 2248, "pr_title": "[HUDI-1196] Update HoodieKey when deduplicating records", "pr_createdAt": "2020-11-12T06:59:13Z", "pr_url": "https://github.com/apache/hudi/pull/2248", "timeline": [{"oid": "692c0800e9458a74220914c9b5970e9c92e7a4f0", "url": "https://github.com/apache/hudi/commit/692c0800e9458a74220914c9b5970e9c92e7a4f0", "message": "Update HoodieKey when deduplicating records", "committedDate": "2020-11-12T05:50:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAxMjQ2MQ==", "url": "https://github.com/apache/hudi/pull/2248#discussion_r522012461", "bodyText": "Hi @rmpifer thanks for your contribution\nIt seems  rec1.getKey() equals  rec2.getKey() ? each of them is ok.", "author": "wangxianghu", "createdAt": "2020-11-12T10:48:52Z", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/SparkWriteHelper.java", "diffHunk": "@@ -59,10 +59,9 @@ public static SparkWriteHelper newInstance() {\n     }).reduceByKey((rec1, rec2) -> {\n       @SuppressWarnings(\"unchecked\")\n       T reducedData = (T) rec1.getData().preCombine(rec2.getData());\n-      // we cannot allow the user to change the key or partitionPath, since that will affect\n-      // everything\n-      // so pick it from one of the records.\n-      return new HoodieRecord<T>(rec1.getKey(), reducedData);\n+      HoodieKey reducedKey = rec1.getData().equals(reducedData) ? rec1.getKey() : rec2.getKey();\n+\n+      return new HoodieRecord<T>(reducedKey, reducedData);", "originalCommit": "692c0800e9458a74220914c9b5970e9c92e7a4f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM3MjU2NQ==", "url": "https://github.com/apache/hudi/pull/2248#discussion_r522372565", "bodyText": "@wangxianghu Not necessarily. If global indexed it is reduced on record key not hoodie key. In the case I mentioned rec1 and rec2 would have different partitionPath values which is why arbitrarily choosing this causes an issue.", "author": "rmpifer", "createdAt": "2020-11-12T19:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAxMjQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU2NjgzOA==", "url": "https://github.com/apache/hudi/pull/2248#discussion_r522566838", "bodyText": "@wangxianghu Not necessarily. If global indexed it is reduced on record key not hoodie key. In the case I mentioned rec1 and rec2 would have different partitionPath values which is why arbitrarily choosing this causes an issue.\n\nI get your point, you're right. when using a global index,  we might get a wrong HoodieKey for the HoodieRecord. how about adding some comments to note this change?\nBTW, please file a Jira ticket to track this change, and rename this pr to 'Fix xxx when .....' ?", "author": "wangxianghu", "createdAt": "2020-11-13T02:11:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAxMjQ2MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk0ODU3MA==", "url": "https://github.com/apache/hudi/pull/2248#discussion_r528948570", "bodyText": "so if preCombine() is a merge, then the equals check may not succed?", "author": "vinothchandar", "createdAt": "2020-11-23T19:35:21Z", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/table/action/commit/SparkWriteHelper.java", "diffHunk": "@@ -59,10 +59,9 @@ public static SparkWriteHelper newInstance() {\n     }).reduceByKey((rec1, rec2) -> {\n       @SuppressWarnings(\"unchecked\")\n       T reducedData = (T) rec1.getData().preCombine(rec2.getData());\n-      // we cannot allow the user to change the key or partitionPath, since that will affect\n-      // everything\n-      // so pick it from one of the records.\n-      return new HoodieRecord<T>(rec1.getKey(), reducedData);\n+      HoodieKey reducedKey = rec1.getData().equals(reducedData) ? rec1.getKey() : rec2.getKey();", "originalCommit": "692c0800e9458a74220914c9b5970e9c92e7a4f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwNjA0Mg==", "url": "https://github.com/apache/hudi/pull/2248#discussion_r530206042", "bodyText": "Ya I see your point here. From the existing payload implementations precombine either returned this or other so this seemed fine. But if there was other payloads being used with merging behavior, default HoodieKey would be set to rec2.getKey(). This could be solved by regenerating key here, but there would be performance cost", "author": "rmpifer", "createdAt": "2020-11-25T09:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk0ODU3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MzIyMw==", "url": "https://github.com/apache/hudi/pull/2248#discussion_r533743223", "bodyText": "let's roll with this for now. If you don't mind, please raise a JIRA for the follow on.", "author": "vinothchandar", "createdAt": "2020-12-01T21:48:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk0ODU3MA=="}], "type": "inlineReview", "revised_code": null}]}