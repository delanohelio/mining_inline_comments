{"pr_number": 2122, "pr_title": "[HUDI-1274] Make hive synchronization supports hourly partition", "pr_createdAt": "2020-09-27T08:15:49Z", "pr_url": "https://github.com/apache/hudi/pull/2122", "timeline": [{"oid": "63b88a9c2cc1a32156ff301b3b749509b89cf8b6", "url": "https://github.com/apache/hudi/commit/63b88a9c2cc1a32156ff301b3b749509b89cf8b6", "message": "HUDI-1274", "committedDate": "2020-09-27T08:11:06Z", "type": "commit"}, {"oid": "bf0a187df084bd46dc8678210da73df1a15f5bae", "url": "https://github.com/apache/hudi/commit/bf0a187df084bd46dc8678210da73df1a15f5bae", "message": "HUDI-1274", "committedDate": "2020-09-27T08:13:31Z", "type": "commit"}, {"oid": "8c40df836844d34e8ce81716a8544d0e40261081", "url": "https://github.com/apache/hudi/commit/8c40df836844d34e8ce81716a8544d0e40261081", "message": "HUDI-1274", "committedDate": "2020-09-27T08:55:49Z", "type": "commit"}, {"oid": "b6c6560d75fcbc3365e6b9dd4ab73e08f8327a23", "url": "https://github.com/apache/hudi/commit/b6c6560d75fcbc3365e6b9dd4ab73e08f8327a23", "message": "HUDI-1274", "committedDate": "2020-09-27T08:58:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1OTU2OQ==", "url": "https://github.com/apache/hudi/pull/2122#discussion_r495659569", "bodyText": "This check can be removed, it is always true.", "author": "wangxianghu", "createdAt": "2020-09-28T02:27:31Z", "path": "hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java", "diffHunk": "@@ -36,30 +36,40 @@\n   private static final long serialVersionUID = 1L;\n   private transient DateTimeFormatter dtfOut;\n \n-  public SlashEncodedDayPartitionValueExtractor() {\n-    this.dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n-  }\n-\n-  private DateTimeFormatter getDtfOut() {\n-    if (dtfOut == null) {\n-      dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n-    }\n-    return dtfOut;\n-  }\n-\n   @Override\n   public List<String> extractPartitionValuesInPath(String partitionPath) {\n+\n+    int year = 0;\n+    int mm = 0;\n+    int dd = 0;\n+    int hh = 0;\n     // partition path is expected to be in this format yyyy/mm/dd\n     String[] splits = partitionPath.split(\"/\");\n-    if (splits.length != 3) {\n-      throw new IllegalArgumentException(\"Partition path \" + partitionPath + \" is not in the form yyyy/mm/dd \");\n+    if (splits.length != 3 && splits.length != 4) {\n+      throw new IllegalArgumentException(\"Partition path \" + partitionPath + \" is not in the form yyyy/mm/dd or yyyy/mm/dd/HH\");\n     }\n     // Get the partition part and remove the / as well at the end\n-    int year = Integer.parseInt(splits[0].contains(\"=\") ? splits[0].split(\"=\")[1] : splits[0]);\n-    int mm = Integer.parseInt(splits[1].contains(\"=\") ? splits[1].split(\"=\")[1] : splits[1]);\n-    int dd = Integer.parseInt(splits[2].contains(\"=\") ? splits[2].split(\"=\")[1] : splits[2]);\n-    DateTime dateTime = new DateTime(year, mm, dd, 0, 0);\n+    if (splits.length == 3 || splits.length == 4) {", "originalCommit": "b6c6560d75fcbc3365e6b9dd4ab73e08f8327a23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY2MzczNw==", "url": "https://github.com/apache/hudi/pull/2122#discussion_r495663737", "bodyText": "The rest LGTM cc @yanghua", "author": "wangxianghu", "createdAt": "2020-09-28T02:48:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1OTU2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a17f8c8b3c3a1381cfde25f39e340f080fa080c6", "chunk": "diff --git a/hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java b/hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java\nindex 2b3ce826f..d07101ba6 100644\n--- a/hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java\n+++ b/hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java\n\n@@ -39,21 +39,16 @@ public class SlashEncodedDayPartitionValueExtractor implements PartitionValueExt\n   @Override\n   public List<String> extractPartitionValuesInPath(String partitionPath) {\n \n-    int year = 0;\n-    int mm = 0;\n-    int dd = 0;\n-    int hh = 0;\n     // partition path is expected to be in this format yyyy/mm/dd\n     String[] splits = partitionPath.split(\"/\");\n     if (splits.length != 3 && splits.length != 4) {\n       throw new IllegalArgumentException(\"Partition path \" + partitionPath + \" is not in the form yyyy/mm/dd or yyyy/mm/dd/HH\");\n     }\n     // Get the partition part and remove the / as well at the end\n-    if (splits.length == 3 || splits.length == 4) {\n-      year = Integer.parseInt(splits[0].contains(\"=\") ? splits[0].split(\"=\")[1] : splits[0]);\n-      mm = Integer.parseInt(splits[1].contains(\"=\") ? splits[1].split(\"=\")[1] : splits[1]);\n-      dd = Integer.parseInt(splits[2].contains(\"=\") ? splits[2].split(\"=\")[1] : splits[2]);\n-    }\n+    int year = Integer.parseInt(splits[0].contains(\"=\") ? splits[0].split(\"=\")[1] : splits[0]);\n+    int mm = Integer.parseInt(splits[1].contains(\"=\") ? splits[1].split(\"=\")[1] : splits[1]);\n+    int dd = Integer.parseInt(splits[2].contains(\"=\") ? splits[2].split(\"=\")[1] : splits[2]);\n+    int hh = 0;\n \n     if (splits.length == 4) {\n       hh = Integer.parseInt(splits[3].contains(\"=\") ? splits[3].split(\"=\")[1] : splits[3]);\n"}}, {"oid": "a17f8c8b3c3a1381cfde25f39e340f080fa080c6", "url": "https://github.com/apache/hudi/commit/a17f8c8b3c3a1381cfde25f39e340f080fa080c6", "message": "HUDI-1274", "committedDate": "2020-09-28T02:53:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NTIxNQ==", "url": "https://github.com/apache/hudi/pull/2122#discussion_r495775215", "bodyText": "@liujinhui1994 Thanks for addressing my concern, LGTM now", "author": "wangxianghu", "createdAt": "2020-09-28T08:35:31Z", "path": "hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java", "diffHunk": "@@ -36,30 +36,35 @@\n   private static final long serialVersionUID = 1L;\n   private transient DateTimeFormatter dtfOut;\n \n-  public SlashEncodedDayPartitionValueExtractor() {\n-    this.dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n-  }\n-\n-  private DateTimeFormatter getDtfOut() {\n-    if (dtfOut == null) {\n-      dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n-    }\n-    return dtfOut;\n-  }\n-\n   @Override\n   public List<String> extractPartitionValuesInPath(String partitionPath) {\n+\n     // partition path is expected to be in this format yyyy/mm/dd\n     String[] splits = partitionPath.split(\"/\");\n-    if (splits.length != 3) {\n-      throw new IllegalArgumentException(\"Partition path \" + partitionPath + \" is not in the form yyyy/mm/dd \");\n+    if (splits.length != 3 && splits.length != 4) {\n+      throw new IllegalArgumentException(\"Partition path \" + partitionPath + \" is not in the form yyyy/mm/dd or yyyy/mm/dd/HH\");\n     }\n     // Get the partition part and remove the / as well at the end\n     int year = Integer.parseInt(splits[0].contains(\"=\") ? splits[0].split(\"=\")[1] : splits[0]);\n     int mm = Integer.parseInt(splits[1].contains(\"=\") ? splits[1].split(\"=\")[1] : splits[1]);\n     int dd = Integer.parseInt(splits[2].contains(\"=\") ? splits[2].split(\"=\")[1] : splits[2]);\n-    DateTime dateTime = new DateTime(year, mm, dd, 0, 0);\n+    int hh = 0;", "originalCommit": "a17f8c8b3c3a1381cfde25f39e340f080fa080c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "694de1449199fb228e06872fa8e94356927f9886", "chunk": "diff --git a/hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java b/hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java\nindex d07101ba6..f4a4c9094 100644\n--- a/hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java\n+++ b/hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java\n\n@@ -36,35 +36,30 @@ public class SlashEncodedDayPartitionValueExtractor implements PartitionValueExt\n   private static final long serialVersionUID = 1L;\n   private transient DateTimeFormatter dtfOut;\n \n+  public SlashEncodedDayPartitionValueExtractor() {\n+    this.dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n+  }\n+\n+  private DateTimeFormatter getDtfOut() {\n+    if (dtfOut == null) {\n+      dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n+    }\n+    return dtfOut;\n+  }\n+\n   @Override\n   public List<String> extractPartitionValuesInPath(String partitionPath) {\n-\n     // partition path is expected to be in this format yyyy/mm/dd\n     String[] splits = partitionPath.split(\"/\");\n-    if (splits.length != 3 && splits.length != 4) {\n-      throw new IllegalArgumentException(\"Partition path \" + partitionPath + \" is not in the form yyyy/mm/dd or yyyy/mm/dd/HH\");\n+    if (splits.length != 3) {\n+      throw new IllegalArgumentException(\"Partition path \" + partitionPath + \" is not in the form yyyy/mm/dd \");\n     }\n     // Get the partition part and remove the / as well at the end\n     int year = Integer.parseInt(splits[0].contains(\"=\") ? splits[0].split(\"=\")[1] : splits[0]);\n     int mm = Integer.parseInt(splits[1].contains(\"=\") ? splits[1].split(\"=\")[1] : splits[1]);\n     int dd = Integer.parseInt(splits[2].contains(\"=\") ? splits[2].split(\"=\")[1] : splits[2]);\n-    int hh = 0;\n+    DateTime dateTime = new DateTime(year, mm, dd, 0, 0);\n \n-    if (splits.length == 4) {\n-      hh = Integer.parseInt(splits[3].contains(\"=\") ? splits[3].split(\"=\")[1] : splits[3]);\n-    }\n-\n-    DateTime dateTime = new DateTime(year, mm, dd, hh, 0);\n-\n-    return Collections.singletonList(getDtfOut(splits.length).print(dateTime));\n-  }\n-\n-  private DateTimeFormatter getDtfOut(int length) {\n-    if (length == 4) {\n-      dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd-HH\");\n-    } else {\n-      dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n-    }\n-    return dtfOut;\n+    return Collections.singletonList(getDtfOut().print(dateTime));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzOTIzNQ==", "url": "https://github.com/apache/hudi/pull/2122#discussion_r496439235", "bodyText": "If you try to support hourly partition, then this name is not suitable. WDYT?", "author": "yanghua", "createdAt": "2020-09-29T06:10:05Z", "path": "hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java", "diffHunk": "@@ -36,30 +36,35 @@\n   private static final long serialVersionUID = 1L;\n   private transient DateTimeFormatter dtfOut;\n \n-  public SlashEncodedDayPartitionValueExtractor() {", "originalCommit": "a17f8c8b3c3a1381cfde25f39e340f080fa080c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "694de1449199fb228e06872fa8e94356927f9886", "chunk": "diff --git a/hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java b/hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java\nindex d07101ba6..f4a4c9094 100644\n--- a/hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java\n+++ b/hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedDayPartitionValueExtractor.java\n\n@@ -36,35 +36,30 @@ public class SlashEncodedDayPartitionValueExtractor implements PartitionValueExt\n   private static final long serialVersionUID = 1L;\n   private transient DateTimeFormatter dtfOut;\n \n+  public SlashEncodedDayPartitionValueExtractor() {\n+    this.dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n+  }\n+\n+  private DateTimeFormatter getDtfOut() {\n+    if (dtfOut == null) {\n+      dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n+    }\n+    return dtfOut;\n+  }\n+\n   @Override\n   public List<String> extractPartitionValuesInPath(String partitionPath) {\n-\n     // partition path is expected to be in this format yyyy/mm/dd\n     String[] splits = partitionPath.split(\"/\");\n-    if (splits.length != 3 && splits.length != 4) {\n-      throw new IllegalArgumentException(\"Partition path \" + partitionPath + \" is not in the form yyyy/mm/dd or yyyy/mm/dd/HH\");\n+    if (splits.length != 3) {\n+      throw new IllegalArgumentException(\"Partition path \" + partitionPath + \" is not in the form yyyy/mm/dd \");\n     }\n     // Get the partition part and remove the / as well at the end\n     int year = Integer.parseInt(splits[0].contains(\"=\") ? splits[0].split(\"=\")[1] : splits[0]);\n     int mm = Integer.parseInt(splits[1].contains(\"=\") ? splits[1].split(\"=\")[1] : splits[1]);\n     int dd = Integer.parseInt(splits[2].contains(\"=\") ? splits[2].split(\"=\")[1] : splits[2]);\n-    int hh = 0;\n+    DateTime dateTime = new DateTime(year, mm, dd, 0, 0);\n \n-    if (splits.length == 4) {\n-      hh = Integer.parseInt(splits[3].contains(\"=\") ? splits[3].split(\"=\")[1] : splits[3]);\n-    }\n-\n-    DateTime dateTime = new DateTime(year, mm, dd, hh, 0);\n-\n-    return Collections.singletonList(getDtfOut(splits.length).print(dateTime));\n-  }\n-\n-  private DateTimeFormatter getDtfOut(int length) {\n-    if (length == 4) {\n-      dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd-HH\");\n-    } else {\n-      dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n-    }\n-    return dtfOut;\n+    return Collections.singletonList(getDtfOut().print(dateTime));\n   }\n }\n"}}, {"oid": "694de1449199fb228e06872fa8e94356927f9886", "url": "https://github.com/apache/hudi/commit/694de1449199fb228e06872fa8e94356927f9886", "message": "HUDI-1274", "committedDate": "2020-10-09T09:45:08Z", "type": "commit"}, {"oid": "6dbec90437ce2a7363d1d5bb58c36bb605dd2297", "url": "https://github.com/apache/hudi/commit/6dbec90437ce2a7363d1d5bb58c36bb605dd2297", "message": "hudi-1274", "committedDate": "2020-10-26T14:08:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM3NTkxMw==", "url": "https://github.com/apache/hudi/pull/2122#discussion_r512375913", "bodyText": "IMO, we need to add more test cases to improve the test coverage. wdyt?", "author": "yanghua", "createdAt": "2020-10-27T02:17:12Z", "path": "hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/PartitionValueExtractorTest.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.apache.hudi.hive;\n+\n+import org.junit.jupiter.api.Test;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class PartitionValueExtractorTest {\n+  @Test\n+  public void testHourPartition() {", "originalCommit": "6dbec90437ce2a7363d1d5bb58c36bb605dd2297", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM3NTk4OQ==", "url": "https://github.com/apache/hudi/pull/2122#discussion_r512375989", "bodyText": "e.g. some bad cases", "author": "yanghua", "createdAt": "2020-10-27T02:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM3NTkxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5NzEwMg==", "url": "https://github.com/apache/hudi/pull/2122#discussion_r512697102", "bodyText": "ok", "author": "liujinhui1994", "createdAt": "2020-10-27T13:37:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM3NTkxMw=="}], "type": "inlineReview", "revised_code": {"commit": "4bfba573e08319f4e0fa13ab43486a9229f2ff80", "chunk": "diff --git a/hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/PartitionValueExtractorTest.java b/hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/PartitionValueExtractorTest.java\ndeleted file mode 100644\nindex b8a05b0d7..000000000\n--- a/hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/PartitionValueExtractorTest.java\n+++ /dev/null\n\n@@ -1,17 +0,0 @@\n-package org.apache.hudi.hive;\n-\n-import org.junit.jupiter.api.Test;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-\n-public class PartitionValueExtractorTest {\n-  @Test\n-  public void testHourPartition() {\n-    SlashEncodedHourPartitionValueExtractor hourPartition = new SlashEncodedHourPartitionValueExtractor();\n-    List<String> list = new ArrayList<>();\n-    list.add(\"2020-12-20-01\");\n-    assertEquals(hourPartition.extractPartitionValuesInPath(\"2020/12/20/01\"), list);\n-  }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM3NjQwNg==", "url": "https://github.com/apache/hudi/pull/2122#discussion_r512376406", "bodyText": "remove the / as well at the end where? And why check contains =? It would be better to add more description.", "author": "yanghua", "createdAt": "2020-10-27T02:19:14Z", "path": "hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedHourPartitionValueExtractor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.hive;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * HDFS Path contain hive partition values for the keys it is partitioned on. This mapping is not straight forward and\n+ * requires a pluggable implementation to extract the partition value from HDFS path.\n+ * <p>\n+ * This implementation extracts datestr=yyyy-mm-dd-HH from path of type /yyyy/mm/dd/HH\n+ */\n+public class SlashEncodedHourPartitionValueExtractor implements PartitionValueExtractor {\n+\n+  private static final long serialVersionUID = 1L;\n+  private transient DateTimeFormatter dtfOut;\n+\n+  public SlashEncodedHourPartitionValueExtractor() {\n+    this.dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd-HH\");\n+  }\n+\n+  private DateTimeFormatter getDtfOut() {\n+    if (dtfOut == null) {\n+      dtfOut = DateTimeFormat.forPattern(\"yyyy-MM-dd-HH\");\n+    }\n+    return dtfOut;\n+  }\n+\n+  @Override\n+  public List<String> extractPartitionValuesInPath(String partitionPath) {\n+    // partition path is expected to be in this format yyyy/mm/dd/HH\n+    String[] splits = partitionPath.split(\"/\");\n+    if (splits.length != 4) {\n+      throw new IllegalArgumentException(\"Partition path \" + partitionPath + \" is not in the form  yyyy/mm/dd/HH\");\n+    }\n+    // Get the partition part and remove the / as well at the end", "originalCommit": "6dbec90437ce2a7363d1d5bb58c36bb605dd2297", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5NzIwNw==", "url": "https://github.com/apache/hudi/pull/2122#discussion_r512697207", "bodyText": "ok", "author": "liujinhui1994", "createdAt": "2020-10-27T13:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM3NjQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "6b123c751e089ae8bb045265c4f85e27c5243f4f", "chunk": "diff --git a/hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedHourPartitionValueExtractor.java b/hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedHourPartitionValueExtractor.java\nindex 78e89e8bd..dcb2c6d76 100644\n--- a/hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedHourPartitionValueExtractor.java\n+++ b/hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/SlashEncodedHourPartitionValueExtractor.java\n\n@@ -54,7 +54,7 @@ public class SlashEncodedHourPartitionValueExtractor implements PartitionValueEx\n     if (splits.length != 4) {\n       throw new IllegalArgumentException(\"Partition path \" + partitionPath + \" is not in the form  yyyy/mm/dd/HH\");\n     }\n-    // Get the partition part and remove the / as well at the end\n+    //Hive style partitions need to contain '='\n     int year = Integer.parseInt(splits[0].contains(\"=\") ? splits[0].split(\"=\")[1] : splits[0]);\n     int mm = Integer.parseInt(splits[1].contains(\"=\") ? splits[1].split(\"=\")[1] : splits[1]);\n     int dd = Integer.parseInt(splits[2].contains(\"=\") ? splits[2].split(\"=\")[1] : splits[2]);\n"}}, {"oid": "4bfba573e08319f4e0fa13ab43486a9229f2ff80", "url": "https://github.com/apache/hudi/commit/4bfba573e08319f4e0fa13ab43486a9229f2ff80", "message": "hudi-1274", "committedDate": "2020-10-27T13:06:58Z", "type": "commit"}, {"oid": "6b123c751e089ae8bb045265c4f85e27c5243f4f", "url": "https://github.com/apache/hudi/commit/6b123c751e089ae8bb045265c4f85e27c5243f4f", "message": "hudi-1274", "committedDate": "2020-10-27T13:35:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyMDUxOQ==", "url": "https://github.com/apache/hudi/pull/2122#discussion_r513320519", "bodyText": "IMO, it would also be better to check the hive style partitions (good case and bad case). wdyt?", "author": "yanghua", "createdAt": "2020-10-28T10:06:53Z", "path": "hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/TestPartitionValueExtractor.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.hive;\n+\n+import org.junit.jupiter.api.Test;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class TestPartitionValueExtractor {\n+  @Test\n+  public void testHourPartition() {\n+    SlashEncodedHourPartitionValueExtractor hourPartition = new SlashEncodedHourPartitionValueExtractor();\n+    List<String> list = new ArrayList<>();\n+    list.add(\"2020-12-20-01\");\n+    assertEquals(hourPartition.extractPartitionValuesInPath(\"2020/12/20/01\"), list);\n+    assertThrows(IllegalArgumentException.class, () -> hourPartition.extractPartitionValuesInPath(\"2020/12/20\"));", "originalCommit": "6b123c751e089ae8bb045265c4f85e27c5243f4f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a42e8b90b92f6c37b3aaa1ddfdb1a94c734c5fa1", "chunk": "diff --git a/hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/TestPartitionValueExtractor.java b/hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/TestPartitionValueExtractor.java\nindex d9da5a9c0..a248e49f4 100644\n--- a/hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/TestPartitionValueExtractor.java\n+++ b/hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/TestPartitionValueExtractor.java\n\n@@ -33,5 +33,6 @@ public class TestPartitionValueExtractor {\n     list.add(\"2020-12-20-01\");\n     assertEquals(hourPartition.extractPartitionValuesInPath(\"2020/12/20/01\"), list);\n     assertThrows(IllegalArgumentException.class, () -> hourPartition.extractPartitionValuesInPath(\"2020/12/20\"));\n+    assertEquals(hourPartition.extractPartitionValuesInPath(\"update_time=2020/12/20/01\"), list);\n   }\n }\n\\ No newline at end of file\n"}}, {"oid": "a42e8b90b92f6c37b3aaa1ddfdb1a94c734c5fa1", "url": "https://github.com/apache/hudi/commit/a42e8b90b92f6c37b3aaa1ddfdb1a94c734c5fa1", "message": "hudi-1274", "committedDate": "2020-10-28T14:01:14Z", "type": "commit"}]}