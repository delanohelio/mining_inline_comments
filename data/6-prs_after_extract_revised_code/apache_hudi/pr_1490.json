{"pr_number": 1490, "pr_title": "[HUDI-700]Add unit test for FileSystemViewCommand", "pr_createdAt": "2020-04-06T15:38:42Z", "pr_url": "https://github.com/apache/hudi/pull/1490", "timeline": [{"oid": "928faabf31f191beffeccf51dc6be8f7fd8a9435", "url": "https://github.com/apache/hudi/commit/928faabf31f191beffeccf51dc6be8f7fd8a9435", "message": "Add test for FileSystemViewCommand", "committedDate": "2020-04-06T15:36:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1NDA4MQ==", "url": "https://github.com/apache/hudi/pull/1490#discussion_r404454081", "bodyText": "Line Break here", "author": "smarthi", "createdAt": "2020-04-06T23:45:47Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.FileSlice;\n+import org.apache.hudi.common.model.HoodieFileGroup;\n+import org.apache.hudi.common.model.HoodieLogFile;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.view.HoodieTableFileSystemView;\n+import org.apache.hudi.common.table.view.SyncableFileSystemView;\n+import org.apache.hudi.common.util.NumericUtils;\n+import org.junit.Before;", "originalCommit": "928faabf31f191beffeccf51dc6be8f7fd8a9435", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0OTgyOQ==", "url": "https://github.com/apache/hudi/pull/1490#discussion_r404549829", "bodyText": "Line Break here\n\nThanks, had add it.", "author": "hddong", "createdAt": "2020-04-07T05:48:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1NDA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1fd2d8ba670b66ecba9c3479f2a333a3a7ea6c55", "chunk": "diff --git a/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java b/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java\nindex 1e538ef4ec..2686c10bdd 100644\n--- a/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java\n+++ b/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java\n\n@@ -31,6 +31,7 @@ import org.apache.hudi.common.table.HoodieTableMetaClient;\n import org.apache.hudi.common.table.view.HoodieTableFileSystemView;\n import org.apache.hudi.common.table.view.SyncableFileSystemView;\n import org.apache.hudi.common.util.NumericUtils;\n+\n import org.junit.Before;\n import org.junit.Test;\n import org.springframework.shell.core.CommandResult;\n"}}, {"oid": "1fd2d8ba670b66ecba9c3479f2a333a3a7ea6c55", "url": "https://github.com/apache/hudi/commit/1fd2d8ba670b66ecba9c3479f2a333a3a7ea6c55", "message": "Update TestFileSystemViewCommand.java", "committedDate": "2020-04-07T01:14:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM3MTc4OQ==", "url": "https://github.com/apache/hudi/pull/1490#discussion_r405371789", "bodyText": "Can we convert this field into a local variable?", "author": "yanghua", "createdAt": "2020-04-08T09:05:47Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.FileSlice;\n+import org.apache.hudi.common.model.HoodieFileGroup;\n+import org.apache.hudi.common.model.HoodieLogFile;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.view.HoodieTableFileSystemView;\n+import org.apache.hudi.common.table.view.SyncableFileSystemView;\n+import org.apache.hudi.common.util.NumericUtils;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test class for {@link FileSystemViewCommand}.\n+ */\n+public class TestFileSystemViewCommand extends AbstractShellIntegrationTest {\n+  private String tablePath;", "originalCommit": "1fd2d8ba670b66ecba9c3479f2a333a3a7ea6c55", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32ef3e744178a52189facebb41b0c7083ab20c7a", "chunk": "diff --git a/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java b/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java\nindex 2686c10bdd..0b45811947 100644\n--- a/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java\n+++ b/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java\n\n@@ -21,6 +21,7 @@ package org.apache.hudi.cli.commands;\n import org.apache.hudi.cli.AbstractShellIntegrationTest;\n import org.apache.hudi.cli.HoodieCLI;\n import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.HoodieTableHeaderConfig;\n import org.apache.hudi.cli.TableHeader;\n import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n import org.apache.hudi.common.fs.FSUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM3MjA2NA==", "url": "https://github.com/apache/hudi/pull/1490#discussion_r405372064", "bodyText": "ditto", "author": "yanghua", "createdAt": "2020-04-08T09:06:12Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.FileSlice;\n+import org.apache.hudi.common.model.HoodieFileGroup;\n+import org.apache.hudi.common.model.HoodieLogFile;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.view.HoodieTableFileSystemView;\n+import org.apache.hudi.common.table.view.SyncableFileSystemView;\n+import org.apache.hudi.common.util.NumericUtils;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test class for {@link FileSystemViewCommand}.\n+ */\n+public class TestFileSystemViewCommand extends AbstractShellIntegrationTest {\n+  private String tablePath;\n+  private String partitionPath;\n+  private SyncableFileSystemView fsView;\n+\n+  private static String TEST_WRITE_TOKEN = \"1-0-1\";", "originalCommit": "1fd2d8ba670b66ecba9c3479f2a333a3a7ea6c55", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32ef3e744178a52189facebb41b0c7083ab20c7a", "chunk": "diff --git a/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java b/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java\nindex 2686c10bdd..0b45811947 100644\n--- a/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java\n+++ b/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java\n\n@@ -21,6 +21,7 @@ package org.apache.hudi.cli.commands;\n import org.apache.hudi.cli.AbstractShellIntegrationTest;\n import org.apache.hudi.cli.HoodieCLI;\n import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.HoodieTableHeaderConfig;\n import org.apache.hudi.cli.TableHeader;\n import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n import org.apache.hudi.common.fs.FSUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM3NTMwOA==", "url": "https://github.com/apache/hudi/pull/1490#discussion_r405375308", "bodyText": "These string literals are the same as FileSystemViewCommand. We can define them as constant fields and reuse them here?", "author": "yanghua", "createdAt": "2020-04-08T09:10:57Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.FileSlice;\n+import org.apache.hudi.common.model.HoodieFileGroup;\n+import org.apache.hudi.common.model.HoodieLogFile;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.view.HoodieTableFileSystemView;\n+import org.apache.hudi.common.table.view.SyncableFileSystemView;\n+import org.apache.hudi.common.util.NumericUtils;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test class for {@link FileSystemViewCommand}.\n+ */\n+public class TestFileSystemViewCommand extends AbstractShellIntegrationTest {\n+  private String tablePath;\n+  private String partitionPath;\n+  private SyncableFileSystemView fsView;\n+\n+  private static String TEST_WRITE_TOKEN = \"1-0-1\";\n+\n+  @Before\n+  public void init() throws IOException {\n+    HoodieCLI.conf = jsc.hadoopConfiguration();\n+\n+    // Create table and connect\n+    String tableName = \"test_table\";\n+    tablePath = basePath + File.separator + tableName;\n+    new TableCommand().createTable(\n+        tablePath, tableName,\n+        \"COPY_ON_WRITE\", \"\", 1, \"org.apache.hudi.common.model.HoodieAvroPayload\");\n+\n+    metaClient = HoodieCLI.getTableMetaClient();\n+\n+    partitionPath = HoodieTestCommitMetadataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n+    String fullPartitionPath = tablePath + \"/\" + partitionPath;\n+    new File(fullPartitionPath).mkdirs();\n+\n+    // Generate 2 commits\n+    String commitTime1 = \"1\";\n+    String commitTime2 = \"2\";\n+\n+    String fileId1 = UUID.randomUUID().toString();\n+\n+    // Write date files and log file\n+    new File(fullPartitionPath + \"/\" + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1))\n+        .createNewFile();\n+    new File(fullPartitionPath + \"/\"\n+        + FSUtils.makeLogFileName(fileId1, HoodieLogFile.DELTA_EXTENSION, commitTime1, 0, TEST_WRITE_TOKEN))\n+        .createNewFile();\n+    new File(fullPartitionPath + \"/\" + FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId1))\n+        .createNewFile();\n+    new File(fullPartitionPath + \"/\"\n+        + FSUtils.makeLogFileName(fileId1, HoodieLogFile.DELTA_EXTENSION, commitTime2, 0, TEST_WRITE_TOKEN))\n+        .createNewFile();\n+\n+    // Write commit files\n+    new File(tablePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n+    new File(tablePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n+\n+    // Reload meta client and create fsView\n+    metaClient = HoodieTableMetaClient.reload(metaClient);\n+\n+    fsView = new HoodieTableFileSystemView(metaClient, metaClient.getActiveTimeline(), true);\n+  }\n+\n+  /**\n+   * Test case for 'show fsview all'.\n+   */\n+  @Test\n+  public void testShowCommits() {\n+    // Test default show fsview all\n+    CommandResult cr = getShell().executeCommand(\"show fsview all\");\n+    assertTrue(cr.isSuccess());\n+\n+    // Get all file groups\n+    Stream<HoodieFileGroup> fileGroups = fsView.getAllFileGroups(partitionPath);\n+\n+    List<Comparable[]> rows = new ArrayList<>();\n+    fileGroups.forEach(fg -> fg.getAllFileSlices().forEach(fs -> {\n+      int idx = 0;\n+      // For base file only Views, do not display any delta-file related columns\n+      Comparable[] row = new Comparable[8];\n+      row[idx++] = fg.getPartitionPath();\n+      row[idx++] = fg.getFileGroupId().getFileId();\n+      row[idx++] = fs.getBaseInstantTime();\n+      row[idx++] = fs.getBaseFile().isPresent() ? fs.getBaseFile().get().getPath() : \"\";\n+      row[idx++] = fs.getBaseFile().isPresent() ? fs.getBaseFile().get().getFileSize() : -1;\n+      row[idx++] = fs.getLogFiles().count();\n+      row[idx++] = fs.getLogFiles().mapToLong(HoodieLogFile::getFileSize).sum();\n+      row[idx++] = fs.getLogFiles().collect(Collectors.toList()).toString();\n+      rows.add(row);\n+    }));\n+\n+    Function<Object, String> converterFunction =\n+        entry -> NumericUtils.humanReadableByteCount((Double.parseDouble(entry.toString())));\n+    Map<String, Function<Object, String>> fieldNameToConverterMap = new HashMap<>();\n+    fieldNameToConverterMap.put(\"Total Delta File Size\", converterFunction);", "originalCommit": "1fd2d8ba670b66ecba9c3479f2a333a3a7ea6c55", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32ef3e744178a52189facebb41b0c7083ab20c7a", "chunk": "diff --git a/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java b/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java\nindex 2686c10bdd..0b45811947 100644\n--- a/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java\n+++ b/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java\n\n@@ -21,6 +21,7 @@ package org.apache.hudi.cli.commands;\n import org.apache.hudi.cli.AbstractShellIntegrationTest;\n import org.apache.hudi.cli.HoodieCLI;\n import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.HoodieTableHeaderConfig;\n import org.apache.hudi.cli.TableHeader;\n import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n import org.apache.hudi.common.fs.FSUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM3NTg5Ng==", "url": "https://github.com/apache/hudi/pull/1490#discussion_r405375896", "bodyText": "ditto", "author": "yanghua", "createdAt": "2020-04-08T09:11:50Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.FileSlice;\n+import org.apache.hudi.common.model.HoodieFileGroup;\n+import org.apache.hudi.common.model.HoodieLogFile;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.view.HoodieTableFileSystemView;\n+import org.apache.hudi.common.table.view.SyncableFileSystemView;\n+import org.apache.hudi.common.util.NumericUtils;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test class for {@link FileSystemViewCommand}.\n+ */\n+public class TestFileSystemViewCommand extends AbstractShellIntegrationTest {\n+  private String tablePath;\n+  private String partitionPath;\n+  private SyncableFileSystemView fsView;\n+\n+  private static String TEST_WRITE_TOKEN = \"1-0-1\";\n+\n+  @Before\n+  public void init() throws IOException {\n+    HoodieCLI.conf = jsc.hadoopConfiguration();\n+\n+    // Create table and connect\n+    String tableName = \"test_table\";\n+    tablePath = basePath + File.separator + tableName;\n+    new TableCommand().createTable(\n+        tablePath, tableName,\n+        \"COPY_ON_WRITE\", \"\", 1, \"org.apache.hudi.common.model.HoodieAvroPayload\");\n+\n+    metaClient = HoodieCLI.getTableMetaClient();\n+\n+    partitionPath = HoodieTestCommitMetadataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n+    String fullPartitionPath = tablePath + \"/\" + partitionPath;\n+    new File(fullPartitionPath).mkdirs();\n+\n+    // Generate 2 commits\n+    String commitTime1 = \"1\";\n+    String commitTime2 = \"2\";\n+\n+    String fileId1 = UUID.randomUUID().toString();\n+\n+    // Write date files and log file\n+    new File(fullPartitionPath + \"/\" + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1))\n+        .createNewFile();\n+    new File(fullPartitionPath + \"/\"\n+        + FSUtils.makeLogFileName(fileId1, HoodieLogFile.DELTA_EXTENSION, commitTime1, 0, TEST_WRITE_TOKEN))\n+        .createNewFile();\n+    new File(fullPartitionPath + \"/\" + FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId1))\n+        .createNewFile();\n+    new File(fullPartitionPath + \"/\"\n+        + FSUtils.makeLogFileName(fileId1, HoodieLogFile.DELTA_EXTENSION, commitTime2, 0, TEST_WRITE_TOKEN))\n+        .createNewFile();\n+\n+    // Write commit files\n+    new File(tablePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n+    new File(tablePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n+\n+    // Reload meta client and create fsView\n+    metaClient = HoodieTableMetaClient.reload(metaClient);\n+\n+    fsView = new HoodieTableFileSystemView(metaClient, metaClient.getActiveTimeline(), true);\n+  }\n+\n+  /**\n+   * Test case for 'show fsview all'.\n+   */\n+  @Test\n+  public void testShowCommits() {\n+    // Test default show fsview all\n+    CommandResult cr = getShell().executeCommand(\"show fsview all\");", "originalCommit": "1fd2d8ba670b66ecba9c3479f2a333a3a7ea6c55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyMTQ2NA==", "url": "https://github.com/apache/hudi/pull/1490#discussion_r405921464", "bodyText": "ditto\n\n@yanghua IMO, it is better to reuse title string like Total Delta File Size. Command string (show fsview all) maybe better to keep it the way it is, here and in FileSystemViewCommand, easier and clearer to known which command to run. wdyt", "author": "hddong", "createdAt": "2020-04-09T02:29:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM3NTg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MzIyNQ==", "url": "https://github.com/apache/hudi/pull/1490#discussion_r405983225", "bodyText": "OK, sounds reasonable.", "author": "yanghua", "createdAt": "2020-04-09T06:31:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM3NTg5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "32ef3e744178a52189facebb41b0c7083ab20c7a", "chunk": "diff --git a/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java b/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java\nindex 2686c10bdd..0b45811947 100644\n--- a/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java\n+++ b/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java\n\n@@ -21,6 +21,7 @@ package org.apache.hudi.cli.commands;\n import org.apache.hudi.cli.AbstractShellIntegrationTest;\n import org.apache.hudi.cli.HoodieCLI;\n import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.HoodieTableHeaderConfig;\n import org.apache.hudi.cli.TableHeader;\n import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n import org.apache.hudi.common.fs.FSUtils;\n"}}, {"oid": "32ef3e744178a52189facebb41b0c7083ab20c7a", "url": "https://github.com/apache/hudi/commit/32ef3e744178a52189facebb41b0c7083ab20c7a", "message": "Add header config", "committedDate": "2020-04-09T06:13:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4NjY4Nw==", "url": "https://github.com/apache/hudi/pull/1490#discussion_r405986687", "bodyText": "Can we break this command into a new test case? I always suggest one test method verify one thing. Additionally, this method seems a bit long.", "author": "yanghua", "createdAt": "2020-04-09T06:40:01Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.HoodieTableHeaderConfig;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.FileSlice;\n+import org.apache.hudi.common.model.HoodieFileGroup;\n+import org.apache.hudi.common.model.HoodieLogFile;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.view.HoodieTableFileSystemView;\n+import org.apache.hudi.common.table.view.SyncableFileSystemView;\n+import org.apache.hudi.common.util.NumericUtils;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test class for {@link FileSystemViewCommand}.\n+ */\n+public class TestFileSystemViewCommand extends AbstractShellIntegrationTest {\n+  private String partitionPath;\n+  private SyncableFileSystemView fsView;\n+\n+  @Before\n+  public void init() throws IOException {\n+    HoodieCLI.conf = jsc.hadoopConfiguration();\n+\n+    // Create table and connect\n+    String tableName = \"test_table\";\n+    String tablePath = basePath + File.separator + tableName;\n+    new TableCommand().createTable(\n+        tablePath, tableName,\n+        \"COPY_ON_WRITE\", \"\", 1, \"org.apache.hudi.common.model.HoodieAvroPayload\");\n+\n+    metaClient = HoodieCLI.getTableMetaClient();\n+\n+    partitionPath = HoodieTestCommitMetadataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n+    String fullPartitionPath = tablePath + \"/\" + partitionPath;\n+    new File(fullPartitionPath).mkdirs();\n+\n+    // Generate 2 commits\n+    String commitTime1 = \"1\";\n+    String commitTime2 = \"2\";\n+\n+    String fileId1 = UUID.randomUUID().toString();\n+\n+    // Write date files and log file\n+    String testWriteToken = \"1-0-1\";\n+    new File(fullPartitionPath + \"/\" + FSUtils.makeDataFileName(commitTime1, testWriteToken, fileId1))\n+        .createNewFile();\n+    new File(fullPartitionPath + \"/\"\n+        + FSUtils.makeLogFileName(fileId1, HoodieLogFile.DELTA_EXTENSION, commitTime1, 0, testWriteToken))\n+        .createNewFile();\n+    new File(fullPartitionPath + \"/\" + FSUtils.makeDataFileName(commitTime2, testWriteToken, fileId1))\n+        .createNewFile();\n+    new File(fullPartitionPath + \"/\"\n+        + FSUtils.makeLogFileName(fileId1, HoodieLogFile.DELTA_EXTENSION, commitTime2, 0, testWriteToken))\n+        .createNewFile();\n+\n+    // Write commit files\n+    new File(tablePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n+    new File(tablePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n+\n+    // Reload meta client and create fsView\n+    metaClient = HoodieTableMetaClient.reload(metaClient);\n+\n+    fsView = new HoodieTableFileSystemView(metaClient, metaClient.getActiveTimeline(), true);\n+  }\n+\n+  /**\n+   * Test case for 'show fsview all'.\n+   */\n+  @Test\n+  public void testShowCommits() {\n+    // Test default show fsview all\n+    CommandResult cr = getShell().executeCommand(\"show fsview all\");\n+    assertTrue(cr.isSuccess());\n+\n+    // Get all file groups\n+    Stream<HoodieFileGroup> fileGroups = fsView.getAllFileGroups(partitionPath);\n+\n+    List<Comparable[]> rows = new ArrayList<>();\n+    fileGroups.forEach(fg -> fg.getAllFileSlices().forEach(fs -> {\n+      int idx = 0;\n+      // For base file only Views, do not display any delta-file related columns\n+      Comparable[] row = new Comparable[8];\n+      row[idx++] = fg.getPartitionPath();\n+      row[idx++] = fg.getFileGroupId().getFileId();\n+      row[idx++] = fs.getBaseInstantTime();\n+      row[idx++] = fs.getBaseFile().isPresent() ? fs.getBaseFile().get().getPath() : \"\";\n+      row[idx++] = fs.getBaseFile().isPresent() ? fs.getBaseFile().get().getFileSize() : -1;\n+      row[idx++] = fs.getLogFiles().count();\n+      row[idx++] = fs.getLogFiles().mapToLong(HoodieLogFile::getFileSize).sum();\n+      row[idx++] = fs.getLogFiles().collect(Collectors.toList()).toString();\n+      rows.add(row);\n+    }));\n+\n+    Function<Object, String> converterFunction =\n+        entry -> NumericUtils.humanReadableByteCount((Double.parseDouble(entry.toString())));\n+    Map<String, Function<Object, String>> fieldNameToConverterMap = new HashMap<>();\n+    fieldNameToConverterMap.put(HoodieTableHeaderConfig.HEADER_TOTAL_DELTA_FILE_SIZE, converterFunction);\n+    fieldNameToConverterMap.put(HoodieTableHeaderConfig.HEADER_DATA_FILE_SIZE, converterFunction);\n+\n+    TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderConfig.HEADER_PARTITION)\n+        .addTableHeaderField(HoodieTableHeaderConfig.HEADER_FILE_ID)\n+        .addTableHeaderField(HoodieTableHeaderConfig.HEADER_BASE_INSTANT)\n+        .addTableHeaderField(HoodieTableHeaderConfig.HEADER_DATA_FILE)\n+        .addTableHeaderField(HoodieTableHeaderConfig.HEADER_DATA_FILE_SIZE)\n+        .addTableHeaderField(HoodieTableHeaderConfig.HEADER_NUM_DELTA_FILES)\n+        .addTableHeaderField(HoodieTableHeaderConfig.HEADER_TOTAL_DELTA_FILE_SIZE)\n+        .addTableHeaderField(HoodieTableHeaderConfig.HEADER_DELTA_FILES);\n+    String expected = HoodiePrintHelper.print(header, fieldNameToConverterMap, \"\", false, -1, false, rows);\n+    assertEquals(expected, cr.getResult().toString());\n+\n+    // Test command with options, baseFileOnly and maxInstant is 2\n+    cr = getShell().executeCommand(\"show fsview all --baseFileOnly true --maxInstant 2\");", "originalCommit": "32ef3e744178a52189facebb41b0c7083ab20c7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1e93294576bdbceaa5481d95d3caaf9e9c21a6a", "chunk": "diff --git a/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java b/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java\nindex 0b45811947..3ee98d48e9 100644\n--- a/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java\n+++ b/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestFileSystemViewCommand.java\n\n@@ -21,7 +21,7 @@ package org.apache.hudi.cli.commands;\n import org.apache.hudi.cli.AbstractShellIntegrationTest;\n import org.apache.hudi.cli.HoodieCLI;\n import org.apache.hudi.cli.HoodiePrintHelper;\n-import org.apache.hudi.cli.HoodieTableHeaderConfig;\n+import org.apache.hudi.cli.HoodieTableHeaderFields;\n import org.apache.hudi.cli.TableHeader;\n import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n import org.apache.hudi.common.fs.FSUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4Nzc4Mw==", "url": "https://github.com/apache/hudi/pull/1490#discussion_r405987783", "bodyText": "Actually, I am thinking if the keyword Config is a good one. It seems this class only defines some config keys or say table header field names? So what about renaming it to HoodieTableHeaderFields or HoodieTableHeaderConfigKeys?", "author": "yanghua", "createdAt": "2020-04-09T06:42:45Z", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/HoodieTableHeaderConfig.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli;\n+\n+/**\n+ * Config for table header.\n+ */\n+public class HoodieTableHeaderConfig {", "originalCommit": "32ef3e744178a52189facebb41b0c7083ab20c7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1e93294576bdbceaa5481d95d3caaf9e9c21a6a", "chunk": "diff --git a/hudi-cli/src/main/java/org/apache/hudi/cli/HoodieTableHeaderConfig.java b/hudi-cli/src/main/java/org/apache/hudi/cli/HoodieTableHeaderFields.java\nsimilarity index 93%\nrename from hudi-cli/src/main/java/org/apache/hudi/cli/HoodieTableHeaderConfig.java\nrename to hudi-cli/src/main/java/org/apache/hudi/cli/HoodieTableHeaderFields.java\nindex c620e49cf1..001a54ac98 100644\n--- a/hudi-cli/src/main/java/org/apache/hudi/cli/HoodieTableHeaderConfig.java\n+++ b/hudi-cli/src/main/java/org/apache/hudi/cli/HoodieTableHeaderFields.java\n\n@@ -19,21 +19,21 @@\n package org.apache.hudi.cli;\n \n /**\n- * Config for table header.\n+ * Fields of print table header.\n  */\n-public class HoodieTableHeaderConfig {\n+public class HoodieTableHeaderFields {\n   public static final String HEADER_PARTITION = \"Partition\";\n   public static final String HEADER_FILE_ID = \"FileId\";\n   public static final String HEADER_BASE_INSTANT = \"Base-Instant\";\n \n   /**\n-   * Data header config.\n+   * Fields of data header.\n    */\n   public static final String HEADER_DATA_FILE = \"Data-File\";\n   public static final String HEADER_DATA_FILE_SIZE = HEADER_DATA_FILE + \" Size\";\n \n   /**\n-   * Delta header config.\n+   * Fields of delta header.\n    */\n   public static final String HEADER_DELTA_SIZE = \"Delta Size\";\n   public static final String HEADER_DELTA_FILES = \"Delta Files\";\n"}}, {"oid": "d1e93294576bdbceaa5481d95d3caaf9e9c21a6a", "url": "https://github.com/apache/hudi/commit/d1e93294576bdbceaa5481d95d3caaf9e9c21a6a", "message": "Split method", "committedDate": "2020-04-09T10:04:51Z", "type": "commit"}, {"oid": "409557ed41f841236c391a2018742838ab9778f9", "url": "https://github.com/apache/hudi/commit/409557ed41f841236c391a2018742838ab9778f9", "message": "reset", "committedDate": "2020-04-10T01:19:39Z", "type": "commit"}]}