{"pr_number": 1912, "pr_title": "[HUDI-1098] Adding OptimisticConsistencyGuard to be used during FinalizeWrite instead of FailSafeConsistencyGuard", "pr_createdAt": "2020-08-04T12:19:07Z", "pr_url": "https://github.com/apache/hudi/pull/1912", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwODYxNg==", "url": "https://github.com/apache/hudi/pull/1912#discussion_r465008616", "bodyText": "I have also fixed some default configs. If incase someone is using FailSafeConsistencyGuard, in case of data file not present, this guard will execute for 256 secs which may not be required. Hence curtailing to 140 secs max.", "author": "nsivabalan", "createdAt": "2020-08-04T12:20:28Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/ConsistencyGuardConfig.java", "diffHunk": "@@ -36,15 +36,15 @@\n   // time between successive attempts to ensure written data's metadata is consistent on storage\n   private static final String INITIAL_CONSISTENCY_CHECK_INTERVAL_MS_PROP =\n       \"hoodie.consistency.check.initial_interval_ms\";\n-  private static long DEFAULT_INITIAL_CONSISTENCY_CHECK_INTERVAL_MS = 2000L;\n+  private static long DEFAULT_INITIAL_CONSISTENCY_CHECK_INTERVAL_MS = 400L;", "originalCommit": "af270d96b529731f7c8e60ab98cbda9e90c64acf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYzMTg2OA==", "url": "https://github.com/apache/hudi/pull/1912#discussion_r467631868", "bodyText": "Sounds good.", "author": "bvaradar", "createdAt": "2020-08-09T21:40:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwODYxNg=="}], "type": "inlineReview", "revised_code": {"commit": "bf6a145440c3ff1b2f4dc8431e03e7d31f93b265", "chunk": "diff --git a/hudi-common/src/main/java/org/apache/hudi/common/fs/ConsistencyGuardConfig.java b/hudi-common/src/main/java/org/apache/hudi/common/fs/ConsistencyGuardConfig.java\nindex 64de05989..5e2339d70 100644\n--- a/hudi-common/src/main/java/org/apache/hudi/common/fs/ConsistencyGuardConfig.java\n+++ b/hudi-common/src/main/java/org/apache/hudi/common/fs/ConsistencyGuardConfig.java\n\n@@ -30,6 +30,9 @@ import java.util.Properties;\n  */\n public class ConsistencyGuardConfig extends DefaultHoodieConfig {\n \n+  private static final String CONSISTENCY_GUARD_CLASS_PROP = \"hoodie.consistency.guard.class\";\n+  private static final String DEFAULT_CONSISTENCY_GUARD_CLASS = FailSafeConsistencyGuard.class.getName();\n+\n   private static final String CONSISTENCY_CHECK_ENABLED_PROP = \"hoodie.consistency.check.enabled\";\n   private static final String DEFAULT_CONSISTENCY_CHECK_ENABLED = \"false\";\n \n"}}, {"oid": "80ca8e73099ad290eda898365da7560fb4039831", "url": "https://github.com/apache/hudi/commit/80ca8e73099ad290eda898365da7560fb4039831", "message": "Adding TimedWaitConsistencyGuard", "committedDate": "2020-08-04T12:20:53Z", "type": "forcePushed"}, {"oid": "bf6a145440c3ff1b2f4dc8431e03e7d31f93b265", "url": "https://github.com/apache/hudi/commit/bf6a145440c3ff1b2f4dc8431e03e7d31f93b265", "message": "Adding TimedWaitConsistencyGuard", "committedDate": "2020-08-04T13:09:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAzOTQyMg==", "url": "https://github.com/apache/hudi/pull/1912#discussion_r465039422", "bodyText": "I see FSUtils also instantiates FailSafeConsistencyGuard for WrapperFileSystem. Do we need similar reflection based instantiation fix there too?\nhttps://github.com/apache/hudi/blob/master/hudi-common/src/main/java/org/apache/hudi/common/fs/FSUtils.java\nCheck lines 529 to 535.", "author": "nsivabalan", "createdAt": "2020-08-04T13:12:33Z", "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTable.java", "diffHunk": "@@ -505,16 +507,26 @@ private boolean waitForCondition(String partitionPath, Stream<Pair<String, Strin\n     final FileSystem fileSystem = metaClient.getRawFs();\n     List<String> fileList = partitionFilePaths.map(Pair::getValue).collect(Collectors.toList());\n     try {\n-      getFailSafeConsistencyGuard(fileSystem).waitTill(partitionPath, fileList, visibility);\n+      getConsistencyGuard(fileSystem, config.getConsistencyGuardConfig()).waitTill(partitionPath, fileList, visibility);\n     } catch (IOException | TimeoutException ioe) {\n       LOG.error(\"Got exception while waiting for files to show up\", ioe);\n       return false;\n     }\n     return true;\n   }\n \n-  private ConsistencyGuard getFailSafeConsistencyGuard(FileSystem fileSystem) {\n-    return new FailSafeConsistencyGuard(fileSystem, config.getConsistencyGuardConfig());\n+  /**\n+   * Instantiate {@link ConsistencyGuard} via reflection, passing in the required args.\n+   * <p>\n+   * Default consistencyGuard class is {@link FailSafeConsistencyGuard}.\n+   */\n+  public static ConsistencyGuard getConsistencyGuard(FileSystem fs, ConsistencyGuardConfig consistencyGuardConfig) throws IOException {", "originalCommit": "bf6a145440c3ff1b2f4dc8431e03e7d31f93b265", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "806c0b50c12b66535f29981d2d2f4f1a13e6cdc3", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/table/HoodieTable.java b/hudi-client/src/main/java/org/apache/hudi/table/HoodieTable.java\nindex f81a74558..af5f2ad6b 100644\n--- a/hudi-client/src/main/java/org/apache/hudi/table/HoodieTable.java\n+++ b/hudi-client/src/main/java/org/apache/hudi/table/HoodieTable.java\n\n@@ -516,16 +516,16 @@ public abstract class HoodieTable<T extends HoodieRecordPayload> implements Seri\n   }\n \n   /**\n-   * Instantiate {@link ConsistencyGuard} via reflection, passing in the required args.\n+   * Instantiate {@link ConsistencyGuard} based on configs.\n    * <p>\n-   * Default consistencyGuard class is {@link FailSafeConsistencyGuard}.\n+   * Default consistencyGuard class is {@link OptimisticConsistencyGuard}.\n    */\n   public static ConsistencyGuard getConsistencyGuard(FileSystem fs, ConsistencyGuardConfig consistencyGuardConfig) throws IOException {\n-    String consistencyGuardClass = consistencyGuardConfig.getConsistencyGuardClassProp();\n     try {\n-      return (ConsistencyGuard) ReflectionUtils.loadClass(consistencyGuardClass, fs, consistencyGuardConfig);\n+      return consistencyGuardConfig.isDisableOptimisticConsistencyGuardDuringFinalizeWrite()\n+          ? new FailSafeConsistencyGuard(fs, consistencyGuardConfig) : new OptimisticConsistencyGuard(fs, consistencyGuardConfig);\n     } catch (Throwable e) {\n-      throw new IOException(\"Could not load ConsistencyGuardClass \" + consistencyGuardClass, e);\n+      throw new IOException(\"Could not load ConsistencyGuard \", e);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE0MjUwOA==", "url": "https://github.com/apache/hudi/pull/1912#discussion_r465142508", "bodyText": "I am repurposing \"hoodie.consistency.check.initial_interval_ms\" for this sleep time. Let me know if we need to introduce a new config for this.", "author": "nsivabalan", "createdAt": "2020-08-04T15:36:19Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/TimedWaitOnAppearConsistencyGaurd.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.fs;\n+\n+import org.apache.hudi.common.util.ValidationUtils;\n+\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.concurrent.TimeoutException;\n+\n+/**\n+ * A consistency guard which sleeps for configured period of time only on APPEAR. It is a no-op for DISAPPEAR.\n+ * This is specifically for S3A filesystem and here is the rational.\n+ * This guard is used when deleting data files corresponding to marker files that needs to be deleted.\n+ * There are two tricky cases that needs to be considered. Case 1 : A data file creation is eventually consistent and hence\n+ * when issuing deletes, it may not be found. Case 2: a data file was never created in the first place since the process crashed.\n+ * In S3A, GET and LIST are eventually consistent, and delete() implementation internally does a LIST/EXISTS.\n+ * Prior to this patch, hudi was leveraging {@link FailSafeConsistencyGuard} which was doing the following to delete data files.\n+ * Step1: wait for all files to appear with linear backoff.\n+ * Step2: issue deletes\n+ * Step3: wait for all files to disappear with linear backoff.\n+ * Step1 and Step2 is handled by {@link FailSafeConsistencyGuard}.\n+ *\n+ * We are simplifying these steps with {@link TimedWaitOnAppearConsistencyGaurd}.\n+ * Step1: Sleep for a configured threshold.\n+ * Step2: issue deletes.\n+ *\n+ * With this, if any files that was created, should be available within configured threshold(eventual consistency).\n+ * Delete() will return false if FileNotFound. So, both cases are taken care of this {@link ConsistencyGuard}.\n+ */\n+public class TimedWaitOnAppearConsistencyGaurd implements ConsistencyGuard {\n+\n+  private static final Logger LOG = LogManager.getLogger(TimedWaitOnAppearConsistencyGaurd.class);\n+\n+  private final ConsistencyGuardConfig consistencyGuardConfig;\n+\n+  public TimedWaitOnAppearConsistencyGaurd(FileSystem fs, ConsistencyGuardConfig consistencyGuardConfig) {\n+    this.consistencyGuardConfig = consistencyGuardConfig;\n+    ValidationUtils.checkArgument(consistencyGuardConfig.isConsistencyCheckEnabled());\n+  }\n+\n+  @Override\n+  public void waitTillFileAppears(Path filePath) throws IOException, TimeoutException {\n+    try {\n+      Thread.sleep(consistencyGuardConfig.getInitialConsistencyCheckIntervalMs());", "originalCommit": "bf6a145440c3ff1b2f4dc8431e03e7d31f93b265", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "806c0b50c12b66535f29981d2d2f4f1a13e6cdc3", "chunk": "diff --git a/hudi-common/src/main/java/org/apache/hudi/common/fs/TimedWaitOnAppearConsistencyGaurd.java b/hudi-common/src/main/java/org/apache/hudi/common/fs/OptimisticConsistencyGuard.java\nsimilarity index 68%\nrename from hudi-common/src/main/java/org/apache/hudi/common/fs/TimedWaitOnAppearConsistencyGaurd.java\nrename to hudi-common/src/main/java/org/apache/hudi/common/fs/OptimisticConsistencyGuard.java\nindex a1481b02b..ab6d32979 100644\n--- a/hudi-common/src/main/java/org/apache/hudi/common/fs/TimedWaitOnAppearConsistencyGaurd.java\n+++ b/hudi-common/src/main/java/org/apache/hudi/common/fs/OptimisticConsistencyGuard.java\n\n@@ -42,49 +42,51 @@ import java.util.concurrent.TimeoutException;\n  * Step3: wait for all files to disappear with linear backoff.\n  * Step1 and Step2 is handled by {@link FailSafeConsistencyGuard}.\n  *\n- * We are simplifying these steps with {@link TimedWaitOnAppearConsistencyGaurd}.\n+ * We are simplifying these steps with {@link OptimisticConsistencyGuard}.\n  * Step1: Sleep for a configured threshold.\n  * Step2: issue deletes.\n  *\n  * With this, if any files that was created, should be available within configured threshold(eventual consistency).\n  * Delete() will return false if FileNotFound. So, both cases are taken care of this {@link ConsistencyGuard}.\n  */\n-public class TimedWaitOnAppearConsistencyGaurd implements ConsistencyGuard {\n+public class OptimisticConsistencyGuard extends FailSafeConsistencyGuard {\n \n-  private static final Logger LOG = LogManager.getLogger(TimedWaitOnAppearConsistencyGaurd.class);\n+  private static final Logger LOG = LogManager.getLogger(OptimisticConsistencyGuard.class);\n \n-  private final ConsistencyGuardConfig consistencyGuardConfig;\n-\n-  public TimedWaitOnAppearConsistencyGaurd(FileSystem fs, ConsistencyGuardConfig consistencyGuardConfig) {\n-    this.consistencyGuardConfig = consistencyGuardConfig;\n+  public OptimisticConsistencyGuard(FileSystem fs, ConsistencyGuardConfig consistencyGuardConfig) {\n+    super(fs, consistencyGuardConfig);\n     ValidationUtils.checkArgument(consistencyGuardConfig.isConsistencyCheckEnabled());\n   }\n \n   @Override\n-  public void waitTillFileAppears(Path filePath) throws IOException, TimeoutException {\n+  public void waitTillFileAppears(Path filePath) throws TimeoutException {\n     try {\n-      Thread.sleep(consistencyGuardConfig.getInitialConsistencyCheckIntervalMs());\n-    } catch (InterruptedException e) {\n-      // ignore\n+      if (!checkFileVisibility(filePath, FileVisibility.APPEAR)) {\n+        Thread.sleep(consistencyGuardConfig.getOptimisticConsistencyGuardSleepTimeMs());\n+      }\n+    } catch (IOException | InterruptedException ioe) {\n+      LOG.warn(\"Got IOException or InterruptedException waiting for file visibility. Ignoring\", ioe);\n     }\n   }\n \n   @Override\n-  public void waitTillFileDisappears(Path filePath) throws IOException, TimeoutException {\n+  public void waitTillFileDisappears(Path filePath) throws TimeoutException {\n     // no op\n   }\n \n   @Override\n-  public void waitTillAllFilesAppear(String dirPath, List<String> files) throws IOException, TimeoutException {\n+  public void waitTillAllFilesAppear(String dirPath, List<String> files) throws TimeoutException {\n     try {\n-      Thread.sleep(consistencyGuardConfig.getInitialConsistencyCheckIntervalMs());\n-    } catch (InterruptedException e) {\n-      // ignore\n+      if (!checkFilesVisibility(1, new Path(dirPath), getFilesWithoutSchemeAndAuthority(files), FileVisibility.APPEAR)) {\n+        Thread.sleep(consistencyGuardConfig.getOptimisticConsistencyGuardSleepTimeMs());\n+      }\n+    } catch (InterruptedException ioe) {\n+      LOG.warn(\"Got IOException or InterruptedException waiting for file visibility. Ignoring\", ioe);\n     }\n   }\n \n   @Override\n-  public void waitTillAllFilesDisappear(String dirPath, List<String> files) throws IOException, TimeoutException {\n+  public void waitTillAllFilesDisappear(String dirPath, List<String> files) throws  TimeoutException {\n     // no op\n   }\n }\n"}}, {"oid": "806c0b50c12b66535f29981d2d2f4f1a13e6cdc3", "url": "https://github.com/apache/hudi/commit/806c0b50c12b66535f29981d2d2f4f1a13e6cdc3", "message": "Adding OptimisticConsistencyGuard to be used during FinalizeWrite", "committedDate": "2020-08-08T13:05:52Z", "type": "forcePushed"}, {"oid": "d55048a617f4a5792573ac943ccfd8089d397dda", "url": "https://github.com/apache/hudi/commit/d55048a617f4a5792573ac943ccfd8089d397dda", "message": "Adding OptimisticConsistencyGuard to be used during FinalizeWrite", "committedDate": "2020-08-08T15:22:50Z", "type": "forcePushed"}, {"oid": "2d24ca42082559f07b5ca4c0c627b99420126378", "url": "https://github.com/apache/hudi/commit/2d24ca42082559f07b5ca4c0c627b99420126378", "message": "Addressing comments", "committedDate": "2020-08-09T20:52:48Z", "type": "forcePushed"}, {"oid": "9879eaa3a7e770376d8a818471d3fc9c5ad9865e", "url": "https://github.com/apache/hudi/commit/9879eaa3a7e770376d8a818471d3fc9c5ad9865e", "message": "[HUDI-1098] Adding OptimisticConsistencyGuard to be used during FinalizeWrite", "committedDate": "2020-08-09T22:14:20Z", "type": "commit"}, {"oid": "9879eaa3a7e770376d8a818471d3fc9c5ad9865e", "url": "https://github.com/apache/hudi/commit/9879eaa3a7e770376d8a818471d3fc9c5ad9865e", "message": "[HUDI-1098] Adding OptimisticConsistencyGuard to be used during FinalizeWrite", "committedDate": "2020-08-09T22:14:20Z", "type": "forcePushed"}]}