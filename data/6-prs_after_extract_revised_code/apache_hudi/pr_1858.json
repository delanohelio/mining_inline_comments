{"pr_number": 1858, "pr_title": "[HUDI-1014] Adding Upgrade and downgrade infra for smooth transitioning from list based rollback to marker based rollback", "pr_createdAt": "2020-07-21T20:23:36Z", "pr_url": "https://github.com/apache/hudi/pull/1858", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2NTkxNQ==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r458365915", "bodyText": "@vinothchandar : is this the right place to call upgrade/downgrade. If not, please advise.", "author": "nsivabalan", "createdAt": "2020-07-21T20:24:25Z", "path": "hudi-client/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java", "diffHunk": "@@ -190,6 +192,7 @@ public HoodieMetrics getMetrics() {\n    */\n   protected HoodieTable getTableAndInitCtx(WriteOperationType operationType) {\n     HoodieTableMetaClient metaClient = createMetaClient(true);\n+    mayBeUpradeOrDowngrade(metaClient);", "originalCommit": "296f39101e95442a59dcdd11a41c88f76c90286d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxMTg2Mw==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r458411863", "bodyText": "looks ok. Mostly sure", "author": "vinothchandar", "createdAt": "2020-07-21T21:56:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2NTkxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "42159f615061f66effb40b0aa94c4bc8ba20485b", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java b/hudi-client/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java\nindex 120081337..1021a01a1 100644\n--- a/hudi-client/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java\n+++ b/hudi-client/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java\n\n@@ -188,11 +188,14 @@ public abstract class AbstractHoodieWriteClient<T extends HoodieRecordPayload> e\n    * Get HoodieTable and init {@link Timer.Context}.\n    *\n    * @param operationType write operation type\n+   * @param instantTime current inflight instant time\n    * @return HoodieTable\n    */\n-  protected HoodieTable getTableAndInitCtx(WriteOperationType operationType) {\n+  protected HoodieTable getTableAndInitCtx(WriteOperationType operationType, String instantTime) {\n     HoodieTableMetaClient metaClient = createMetaClient(true);\n-    mayBeUpradeOrDowngrade(metaClient);\n+    if (config.shouldRollbackUsingMarkers()) {\n+      mayBeUpgrade(metaClient, instantTime);\n+    }\n     if (operationType == WriteOperationType.DELETE) {\n       setWriteSchemaForDeletes(metaClient);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2NzA1NA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r458367054", "bodyText": "@vinothchandar : after updating the hoodie.properties file, I haven't reloaded the meta client as of now. It is just the table version in memory that has changed and no other code blocks should access table.version. Do you think is reload of metaclient mandatory if we update hoodie.properties w/ new table version?", "author": "nsivabalan", "createdAt": "2020-07-21T20:26:28Z", "path": "hudi-client/src/main/java/org/apache/hudi/table/UpgradeDowngradeHelper.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table;\n+\n+import org.apache.hudi.common.table.HoodieTableConfig;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.HoodieTableVersion;\n+import org.apache.hudi.exception.HoodieException;\n+\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.Path;\n+\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+/**\n+ * Helper class to assist in upgrading/downgrading Hoodie when there is a version change.\n+ */\n+public class UpgradeDowngradeHelper {\n+\n+  public static final String HOODIE_ORIG_PROPERTY_FILE = \"hoodie.properties.orig\";\n+\n+  /**\n+   * Perform Upgrade or Downgrade steps if required and updated table version if need be.\n+   * <p>\n+   * Starting from version 0.6.0, this upgrade/downgrade step will be added in all write paths.\n+   * Essentially, if a dataset was created using any pre 0.6.0(for eg 0.5.3), and Hoodie verion was upgraded to 0.6.0, there are some upgrade steps need\n+   * to be executed before doing any writes.\n+   * Similarly, if a dataset was created using 0.6.0 and then hoodie was downgraded, some downgrade steps need to be executed before proceeding w/ any writes.\n+   * On a high level, these are the steps performed\n+   * Step1 : Understand current hoodie version and table version from hoodie.properties file\n+   * Step2 : Fix any residues from previous upgrade/downgrade\n+   * Step3 : Check for version upgrade/downgrade.\n+   * Step4 : If upgrade/downgrade is required, perform the steps required for the same.\n+   * Step5 : Copy hoodie.properties -> hoodie.properties.orig\n+   * Step6 : Update hoodie.properties file with current table version\n+   * Step7 : Delete hoodie.properties.orig\n+   * </p>\n+   * @param metaClient instance of {@link HoodieTableMetaClient} to use\n+   * @throws IOException\n+   */\n+  public static void doUpgradeOrDowngrade(HoodieTableMetaClient metaClient) throws IOException {\n+    // Fetch version from property file and current version\n+    HoodieTableVersion versionFromPropertyFile = metaClient.getTableConfig().getHoodieTableVersionFromPropertyFile();\n+    HoodieTableVersion currentVersion = metaClient.getTableConfig().getCurrentHoodieTableVersion();\n+\n+    Path metaPath = new Path(metaClient.getMetaPath());\n+    Path originalHoodiePropertyPath = getOrigHoodiePropertyFilePath(metaPath.toString());\n+\n+    boolean updateTableVersionInPropertyFile = false;\n+\n+    if (metaClient.getFs().exists(originalHoodiePropertyPath)) {\n+      // if hoodie.properties.orig exists, rename to hoodie.properties and skip upgrade/downgrade step\n+      metaClient.getFs().rename(originalHoodiePropertyPath, getHoodiePropertyFilePath(metaPath.toString()));\n+      updateTableVersionInPropertyFile = true;\n+    } else {\n+      // upgrade or downgrade if there is a version mismatch\n+      if (versionFromPropertyFile != currentVersion) {\n+        updateTableVersionInPropertyFile = true;\n+        if (versionFromPropertyFile == HoodieTableVersion.PRE_ZERO_SIZE_ZERO && currentVersion == HoodieTableVersion.ZERO_SIX_ZERO) {\n+          upgradeFromOlderToZeroSixZero();\n+        } else if (versionFromPropertyFile == HoodieTableVersion.ZERO_SIX_ZERO && currentVersion == HoodieTableVersion.PRE_ZERO_SIZE_ZERO) {\n+          downgradeFromZeroSixZeroToPreZeroSixZero();\n+        } else {\n+          throw new HoodieException(\"Illegal state wrt table versions. Version from proerpty file \" + versionFromPropertyFile + \" and current version \" + currentVersion);\n+        }\n+      }\n+    }\n+\n+    /**\n+     * If table version needs to be updated in hoodie.properties file.\n+     * Step1: Copy hoodie.properties to hoodie.properties.orig\n+     * Step2: add table.version to hoodie.properties\n+     * Step3: delete hoodie.properties.orig\n+     */\n+    if (updateTableVersionInPropertyFile) {\n+      updateTableVersionInMetaPath(metaClient);", "originalCommit": "296f39101e95442a59dcdd11a41c88f76c90286d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxMjA5Mg==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r458412092", "bodyText": "yes. we need to reload if upgrade was done. to be safe", "author": "vinothchandar", "createdAt": "2020-07-21T21:56:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2NzA1NA=="}], "type": "inlineReview", "revised_code": {"commit": "0ea132a70e9bfe914b3f99e8823111aec8b4fe68", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/table/UpgradeDowngradeHelper.java b/hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngradeUtil.java\nsimilarity index 57%\nrename from hudi-client/src/main/java/org/apache/hudi/table/UpgradeDowngradeHelper.java\nrename to hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngradeUtil.java\nindex 9b36115f9..f2b0af036 100644\n--- a/hudi-client/src/main/java/org/apache/hudi/table/UpgradeDowngradeHelper.java\n+++ b/hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngradeUtil.java\n\n@@ -16,71 +16,74 @@\n  * limitations under the License.\n  */\n \n-package org.apache.hudi.table;\n+package org.apache.hudi.table.upgrade;\n \n import org.apache.hudi.common.table.HoodieTableConfig;\n import org.apache.hudi.common.table.HoodieTableMetaClient;\n import org.apache.hudi.common.table.HoodieTableVersion;\n+import org.apache.hudi.config.HoodieWriteConfig;\n import org.apache.hudi.exception.HoodieException;\n \n-import org.apache.hadoop.fs.FSDataInputStream;\n-import org.apache.hadoop.fs.FSDataOutputStream;\n import org.apache.hadoop.fs.FileUtil;\n import org.apache.hadoop.fs.Path;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.apache.spark.api.java.JavaSparkContext;\n \n import java.io.IOException;\n-import java.util.Properties;\n \n /**\n  * Helper class to assist in upgrading/downgrading Hoodie when there is a version change.\n  */\n-public class UpgradeDowngradeHelper {\n+public class UpgradeDowngradeUtil {\n \n+  private static final Logger LOG = LogManager.getLogger(UpgradeDowngradeUtil.class);\n   public static final String HOODIE_ORIG_PROPERTY_FILE = \"hoodie.properties.orig\";\n \n   /**\n    * Perform Upgrade or Downgrade steps if required and updated table version if need be.\n    * <p>\n-   * Starting from version 0.6.0, this upgrade/downgrade step will be added in all write paths.\n-   * Essentially, if a dataset was created using any pre 0.6.0(for eg 0.5.3), and Hoodie verion was upgraded to 0.6.0, there are some upgrade steps need\n-   * to be executed before doing any writes.\n-   * Similarly, if a dataset was created using 0.6.0 and then hoodie was downgraded, some downgrade steps need to be executed before proceeding w/ any writes.\n+   * Starting from version 0.6.0, this upgrade/downgrade step will be added in all write paths. Essentially, if a dataset was created using any pre 0.6.0(for eg 0.5.3),\n+   * and Hoodie version was upgraded to 0.6.0, Hoodie table version gets bumped to 1 and there are some upgrade steps need to be executed before doing any writes.\n+   * Similarly, if a dataset was created using Hoodie version 0.6.0 or Hoodie table version 1 and then hoodie was downgraded to pre 0.6.0 or to Hoodie table version 0,\n+   * then some downgrade steps need to be executed before proceeding w/ any writes.\n    * On a high level, these are the steps performed\n-   * Step1 : Understand current hoodie version and table version from hoodie.properties file\n+   * Step1 : Understand current hoodie table version and table version from hoodie.properties file\n    * Step2 : Fix any residues from previous upgrade/downgrade\n-   * Step3 : Check for version upgrade/downgrade.\n-   * Step4 : If upgrade/downgrade is required, perform the steps required for the same.\n+   * Step3 : If there are no residues, Check for version upgrade/downgrade. If version mismatch, perform upgrade/downgrade.\n+   * Step4 : If there are residues, clean them up and skip upgrade/downgrade since those steps would have been completed last time.\n    * Step5 : Copy hoodie.properties -> hoodie.properties.orig\n    * Step6 : Update hoodie.properties file with current table version\n    * Step7 : Delete hoodie.properties.orig\n    * </p>\n+   *\n    * @param metaClient instance of {@link HoodieTableMetaClient} to use\n-   * @throws IOException\n+   * @param toVersion version to which upgrade or downgrade has to be done.\n    */\n-  public static void doUpgradeOrDowngrade(HoodieTableMetaClient metaClient) throws IOException {\n+  public static void doUpgradeOrDowngrade(HoodieTableMetaClient metaClient, HoodieTableVersion toVersion, HoodieWriteConfig config, JavaSparkContext jsc) throws IOException {\n     // Fetch version from property file and current version\n     HoodieTableVersion versionFromPropertyFile = metaClient.getTableConfig().getHoodieTableVersionFromPropertyFile();\n-    HoodieTableVersion currentVersion = metaClient.getTableConfig().getCurrentHoodieTableVersion();\n \n     Path metaPath = new Path(metaClient.getMetaPath());\n-    Path originalHoodiePropertyPath = getOrigHoodiePropertyFilePath(metaPath.toString());\n+    Path originalHoodiePropertyFile = getOrigHoodiePropertyFilePath(metaPath.toString());\n \n     boolean updateTableVersionInPropertyFile = false;\n \n-    if (metaClient.getFs().exists(originalHoodiePropertyPath)) {\n+    // check if there are any residues from previous upgrade/downgrade execution and clean them up.\n+    if (metaClient.getFs().exists(originalHoodiePropertyFile)) {\n       // if hoodie.properties.orig exists, rename to hoodie.properties and skip upgrade/downgrade step\n-      metaClient.getFs().rename(originalHoodiePropertyPath, getHoodiePropertyFilePath(metaPath.toString()));\n+      metaClient.getFs().rename(originalHoodiePropertyFile, getHoodiePropertyFilePath(metaPath.toString()));\n       updateTableVersionInPropertyFile = true;\n-    } else {\n+    } else { // if there are no such residues\n       // upgrade or downgrade if there is a version mismatch\n-      if (versionFromPropertyFile != currentVersion) {\n+      if (versionFromPropertyFile != toVersion) {\n         updateTableVersionInPropertyFile = true;\n-        if (versionFromPropertyFile == HoodieTableVersion.PRE_ZERO_SIZE_ZERO && currentVersion == HoodieTableVersion.ZERO_SIX_ZERO) {\n-          upgradeFromOlderToZeroSixZero();\n-        } else if (versionFromPropertyFile == HoodieTableVersion.ZERO_SIX_ZERO && currentVersion == HoodieTableVersion.PRE_ZERO_SIZE_ZERO) {\n-          downgradeFromZeroSixZeroToPreZeroSixZero();\n+        if (versionFromPropertyFile == HoodieTableVersion.ONE && toVersion == HoodieTableVersion.ZERO) {\n+          new UpgradeHandleFromZeroToOne().upgrade(config, jsc);\n+        } else if (versionFromPropertyFile == HoodieTableVersion.ZERO && toVersion == HoodieTableVersion.ONE) {\n+          new DowngradeHandleOneToZero().downgrade(config, jsc);\n         } else {\n-          throw new HoodieException(\"Illegal state wrt table versions. Version from proerpty file \" + versionFromPropertyFile + \" and current version \" + currentVersion);\n+          throw new HoodieException(\"Illegal state wrt table versions. Version from proerpty file \" + versionFromPropertyFile + \" and current version \" + toVersion);\n         }\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUwOTg2Mg==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r458509862", "bodyText": "@vinothchandar : sorry forgot to ask this question earlier. May I know how to fetch current hoodie version in use?", "author": "nsivabalan", "createdAt": "2020-07-22T03:19:22Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/HoodieTableConfig.java", "diffHunk": "@@ -151,6 +154,27 @@ public HoodieTableType getTableType() {\n         : Option.empty();\n   }\n \n+  /**\n+   * @return the table version from .hoodie properties file.\n+   */\n+  public HoodieTableVersion getHoodieTableVersionFromPropertyFile() {\n+    if (props.contains(HOODIE_TABLE_VERSION_PROP_NAME)) {\n+      String propValue = props.getProperty(HOODIE_TABLE_VERSION_PROP_NAME);\n+      if (propValue.equals(HoodieTableVersion.ZERO_SIX_ZERO.version)) {\n+        return HoodieTableVersion.ZERO_SIX_ZERO;\n+      }\n+    }\n+    return DEFAULT_TABLE_VERSION;\n+  }\n+\n+  /**\n+   * @return the current hoodie table version.\n+   */\n+  public HoodieTableVersion getCurrentHoodieTableVersion() {\n+    // TODO: fetch current version dynamically", "originalCommit": "296f39101e95442a59dcdd11a41c88f76c90286d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcyOTIxNQ==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r458729215", "bodyText": "By reading hoodie.properties we need to treat everything below 0.6.0 as V_PRE_0.6.0 . Cannot deduce the actual jars per se.\nWe can also make these version numbers 0,1,2 instead of PRE_0.6.0, 0.6.0, 0.7.0 and so on. ?", "author": "vinothchandar", "createdAt": "2020-07-22T11:40:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUwOTg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczMTc5Mg==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r458731792", "bodyText": "let me try to rephrase. Lets say a dataset was created in 0.6.0 and then user moves to hoodie version 0.6.1 and when he launches hoodie for first time, how in this code we will get to know that this is using version 0.6.1? hoodie.properties will be having 0.6.0 only right.", "author": "nsivabalan", "createdAt": "2020-07-22T11:45:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUwOTg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MzM2OA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r460343368", "bodyText": "HoodieTableVersion or someplace we need to ahve a CURR_VERSION variable that gets bumped to 0.6.1 .\nMore I think about this. I think its better to name the versions 0,1,2... and so on, instead of release numbers. we may not bump this up every release . only when upgrade/downgrade is necessary.", "author": "vinothchandar", "createdAt": "2020-07-25T00:54:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUwOTg2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0ea132a70e9bfe914b3f99e8823111aec8b4fe68", "chunk": "diff --git a/hudi-common/src/main/java/org/apache/hudi/common/table/HoodieTableConfig.java b/hudi-common/src/main/java/org/apache/hudi/common/table/HoodieTableConfig.java\nindex f43586681..f667caadc 100644\n--- a/hudi-common/src/main/java/org/apache/hudi/common/table/HoodieTableConfig.java\n+++ b/hudi-common/src/main/java/org/apache/hudi/common/table/HoodieTableConfig.java\n\n@@ -155,23 +156,39 @@ public class HoodieTableConfig implements Serializable {\n   }\n \n   /**\n-   * @return the table version from .hoodie properties file.\n+   * @return the hoodie.table.version from hoodie.properties file.\n    */\n   public HoodieTableVersion getHoodieTableVersionFromPropertyFile() {\n-    if (props.contains(HOODIE_TABLE_VERSION_PROP_NAME)) {\n+    String versionFromFile = props.getProperty(HOODIE_TABLE_VERSION_PROP_NAME);\n+    if (versionFromFile != null) {\n       String propValue = props.getProperty(HOODIE_TABLE_VERSION_PROP_NAME);\n-      if (propValue.equals(HoodieTableVersion.ZERO_SIX_ZERO.version)) {\n-        return HoodieTableVersion.ZERO_SIX_ZERO;\n+      if (propValue.equals(HoodieTableVersion.ZERO.version)) {\n+        return HoodieTableVersion.ZERO;\n       }\n     }\n     return DEFAULT_TABLE_VERSION;\n   }\n \n+  /**\n+   * Updates hoodie.table.version in properties and in property file.\n+   * @param hoodieTableVersion hoodie table version to be updated to.\n+   * @param fs instance of {@link FileSystem} to use.\n+   * @param metaPath meta path to be used.\n+   */\n+  public void setHoodieTableVersion(HoodieTableVersion hoodieTableVersion, FileSystem fs, String metaPath) {\n+    props.put(HOODIE_TABLE_VERSION_PROP_NAME, Integer.toString(hoodieTableVersion.version));\n+    Path propertyPath = new Path(metaPath, HOODIE_PROPERTIES_FILE);\n+    try (FSDataOutputStream outputStream = fs.create(propertyPath)) {\n+      props.store(outputStream, \"Properties saved on \" + new Date(System.currentTimeMillis()));\n+    } catch (IOException e) {\n+      throw new HoodieIOException(\"Failed to update hoodie.properties file with hoodie.table.version \" + propertyPath, e);\n+    }\n+  }\n+\n   /**\n    * @return the current hoodie table version.\n    */\n   public HoodieTableVersion getCurrentHoodieTableVersion() {\n-    // TODO: fetch current version dynamically\n     return CUR_TABLE_VERSION;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMzM1MA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r461213350", "bodyText": "@vinothchandar : I have added a flag here to say where delete has to be done or just stats need to be collected. Since I don't want to duplicate code, tried my best to re-use. If you can think of any other ways, lmk.", "author": "nsivabalan", "createdAt": "2020-07-27T22:46:48Z", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/rollback/BaseRollbackActionExecutor.java", "diffHunk": "@@ -159,24 +161,32 @@ private void rollBackIndex() {\n     LOG.info(\"Index rolled back for commits \" + instantToRollback);\n   }\n \n-  public List<HoodieRollbackStat> doRollbackAndGetStats() {\n-    final String instantTimeToRollback = instantToRollback.getTimestamp();\n-    final boolean isPendingCompaction = Objects.equals(HoodieTimeline.COMPACTION_ACTION, instantToRollback.getAction())\n-        && !instantToRollback.isCompleted();\n-    validateSavepointRollbacks();\n-    if (!isPendingCompaction) {\n-      validateRollbackCommitSequence();\n-    }\n-\n-    try {\n-      List<HoodieRollbackStat> stats = executeRollback();\n-      LOG.info(\"Rolled back inflight instant \" + instantTimeToRollback);\n+  public List<HoodieRollbackStat> mayBeRollbackAndGetStats(boolean doDelete) {", "originalCommit": "a04f2fa1d198b5c5a7d3e26c96c3c7b2364c7216", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ea132a70e9bfe914b3f99e8823111aec8b4fe68", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/BaseRollbackActionExecutor.java b/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/BaseRollbackActionExecutor.java\nindex 865d6c923..7751bfddf 100644\n--- a/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/BaseRollbackActionExecutor.java\n+++ b/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/BaseRollbackActionExecutor.java\n\n@@ -161,32 +161,24 @@ public abstract class BaseRollbackActionExecutor extends BaseActionExecutor<Hood\n     LOG.info(\"Index rolled back for commits \" + instantToRollback);\n   }\n \n-  public List<HoodieRollbackStat> mayBeRollbackAndGetStats(boolean doDelete) {\n-    if(doDelete) {\n-      final String instantTimeToRollback = instantToRollback.getTimestamp();\n-      final boolean isPendingCompaction = Objects.equals(HoodieTimeline.COMPACTION_ACTION, instantToRollback.getAction())\n-          && !instantToRollback.isCompleted();\n-      validateSavepointRollbacks();\n-      if (!isPendingCompaction) {\n-        validateRollbackCommitSequence();\n-      }\n+  public List<HoodieRollbackStat> mayBeRollbackAndGetStats() {\n+    final String instantTimeToRollback = instantToRollback.getTimestamp();\n+    final boolean isPendingCompaction = Objects.equals(HoodieTimeline.COMPACTION_ACTION, instantToRollback.getAction())\n+        && !instantToRollback.isCompleted();\n+    validateSavepointRollbacks();\n+    if (!isPendingCompaction) {\n+      validateRollbackCommitSequence();\n+    }\n \n-      try {\n-        List<HoodieRollbackStat> stats = executeRollback(doDelete);\n-        LOG.info(\"Rolled back inflight instant \" + instantTimeToRollback);\n-        if (!isPendingCompaction) {\n-          rollBackIndex();\n-        }\n-        return stats;\n-      } catch (IOException e) {\n-        throw new HoodieIOException(\"Unable to execute rollback \", e);\n-      }\n-    } else{\n-      try {\n-        return executeRollback(doDelete);\n-      } catch (IOException e) {\n-        throw new HoodieIOException(\"Unable to collect rollback stats \", e);\n+    try {\n+      List<HoodieRollbackStat> stats = executeRollback();\n+      LOG.info(\"Rolled back inflight instant \" + instantTimeToRollback);\n+      if (!isPendingCompaction) {\n+        rollBackIndex();\n       }\n+      return stats;\n+    } catch (IOException e) {\n+      throw new HoodieIOException(\"Unable to execute rollback \", e);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMzU1Mg==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r461213552", "bodyText": "this is the else part where we just collect stats.", "author": "nsivabalan", "createdAt": "2020-07-27T22:47:26Z", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/rollback/BaseRollbackActionExecutor.java", "diffHunk": "@@ -159,24 +161,32 @@ private void rollBackIndex() {\n     LOG.info(\"Index rolled back for commits \" + instantToRollback);\n   }\n \n-  public List<HoodieRollbackStat> doRollbackAndGetStats() {\n-    final String instantTimeToRollback = instantToRollback.getTimestamp();\n-    final boolean isPendingCompaction = Objects.equals(HoodieTimeline.COMPACTION_ACTION, instantToRollback.getAction())\n-        && !instantToRollback.isCompleted();\n-    validateSavepointRollbacks();\n-    if (!isPendingCompaction) {\n-      validateRollbackCommitSequence();\n-    }\n-\n-    try {\n-      List<HoodieRollbackStat> stats = executeRollback();\n-      LOG.info(\"Rolled back inflight instant \" + instantTimeToRollback);\n+  public List<HoodieRollbackStat> mayBeRollbackAndGetStats(boolean doDelete) {\n+    if(doDelete) {\n+      final String instantTimeToRollback = instantToRollback.getTimestamp();\n+      final boolean isPendingCompaction = Objects.equals(HoodieTimeline.COMPACTION_ACTION, instantToRollback.getAction())\n+          && !instantToRollback.isCompleted();\n+      validateSavepointRollbacks();\n       if (!isPendingCompaction) {\n-        rollBackIndex();\n+        validateRollbackCommitSequence();\n+      }\n+\n+      try {\n+        List<HoodieRollbackStat> stats = executeRollback(doDelete);\n+        LOG.info(\"Rolled back inflight instant \" + instantTimeToRollback);\n+        if (!isPendingCompaction) {\n+          rollBackIndex();\n+        }\n+        return stats;\n+      } catch (IOException e) {\n+        throw new HoodieIOException(\"Unable to execute rollback \", e);\n+      }\n+    } else{\n+      try {\n+        return executeRollback(doDelete);", "originalCommit": "a04f2fa1d198b5c5a7d3e26c96c3c7b2364c7216", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ea132a70e9bfe914b3f99e8823111aec8b4fe68", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/BaseRollbackActionExecutor.java b/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/BaseRollbackActionExecutor.java\nindex 865d6c923..7751bfddf 100644\n--- a/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/BaseRollbackActionExecutor.java\n+++ b/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/BaseRollbackActionExecutor.java\n\n@@ -161,32 +161,24 @@ public abstract class BaseRollbackActionExecutor extends BaseActionExecutor<Hood\n     LOG.info(\"Index rolled back for commits \" + instantToRollback);\n   }\n \n-  public List<HoodieRollbackStat> mayBeRollbackAndGetStats(boolean doDelete) {\n-    if(doDelete) {\n-      final String instantTimeToRollback = instantToRollback.getTimestamp();\n-      final boolean isPendingCompaction = Objects.equals(HoodieTimeline.COMPACTION_ACTION, instantToRollback.getAction())\n-          && !instantToRollback.isCompleted();\n-      validateSavepointRollbacks();\n-      if (!isPendingCompaction) {\n-        validateRollbackCommitSequence();\n-      }\n+  public List<HoodieRollbackStat> mayBeRollbackAndGetStats() {\n+    final String instantTimeToRollback = instantToRollback.getTimestamp();\n+    final boolean isPendingCompaction = Objects.equals(HoodieTimeline.COMPACTION_ACTION, instantToRollback.getAction())\n+        && !instantToRollback.isCompleted();\n+    validateSavepointRollbacks();\n+    if (!isPendingCompaction) {\n+      validateRollbackCommitSequence();\n+    }\n \n-      try {\n-        List<HoodieRollbackStat> stats = executeRollback(doDelete);\n-        LOG.info(\"Rolled back inflight instant \" + instantTimeToRollback);\n-        if (!isPendingCompaction) {\n-          rollBackIndex();\n-        }\n-        return stats;\n-      } catch (IOException e) {\n-        throw new HoodieIOException(\"Unable to execute rollback \", e);\n-      }\n-    } else{\n-      try {\n-        return executeRollback(doDelete);\n-      } catch (IOException e) {\n-        throw new HoodieIOException(\"Unable to collect rollback stats \", e);\n+    try {\n+      List<HoodieRollbackStat> stats = executeRollback();\n+      LOG.info(\"Rolled back inflight instant \" + instantTimeToRollback);\n+      if (!isPendingCompaction) {\n+        rollBackIndex();\n       }\n+      return stats;\n+    } catch (IOException e) {\n+      throw new HoodieIOException(\"Unable to execute rollback \", e);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMzc5MQ==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r461213791", "bodyText": "and if doDelete is false, we call into executeRollbackUsingFileListing directly.", "author": "nsivabalan", "createdAt": "2020-07-27T22:48:10Z", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/rollback/CopyOnWriteRollbackActionExecutor.java", "diffHunk": "@@ -80,10 +82,16 @@ public CopyOnWriteRollbackActionExecutor(JavaSparkContext jsc,\n     if (!resolvedInstant.isRequested()) {\n       // delete all the data files for this commit\n       LOG.info(\"Clean out all base files generated for commit: \" + resolvedInstant);\n-      stats = getRollbackStrategy().execute(resolvedInstant);\n+      if(doDelete) {\n+        stats = getRollbackStrategy().execute(resolvedInstant);\n+      } else{\n+        stats = executeRollbackUsingFileListing(resolvedInstant, false);", "originalCommit": "a04f2fa1d198b5c5a7d3e26c96c3c7b2364c7216", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ea132a70e9bfe914b3f99e8823111aec8b4fe68", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/CopyOnWriteRollbackActionExecutor.java b/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/CopyOnWriteRollbackActionExecutor.java\nindex 0f67f5925..2ab25664f 100644\n--- a/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/CopyOnWriteRollbackActionExecutor.java\n+++ b/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/CopyOnWriteRollbackActionExecutor.java\n\n@@ -82,39 +77,18 @@ public class CopyOnWriteRollbackActionExecutor extends BaseRollbackActionExecuto\n     if (!resolvedInstant.isRequested()) {\n       // delete all the data files for this commit\n       LOG.info(\"Clean out all base files generated for commit: \" + resolvedInstant);\n-      if(doDelete) {\n-        stats = getRollbackStrategy().execute(resolvedInstant);\n-      } else{\n-        stats = executeRollbackUsingFileListing(resolvedInstant, false);\n-      }\n-    }\n-    if(doDelete) {\n-      // Delete Inflight instant if enabled\n-      deleteInflightAndRequestedInstant(deleteInstants, activeTimeline, resolvedInstant);\n+      stats = getRollbackStrategy().execute(resolvedInstant);\n     }\n+    // Delete Inflight instant if enabled\n+    deleteInflightAndRequestedInstant(deleteInstants, activeTimeline, resolvedInstant);\n     LOG.info(\"Time(in ms) taken to finish rollback \" + rollbackTimer.endTimer());\n     return stats;\n   }\n \n-  private List<ListingBasedRollbackRequest> generateRollbackRequestsByListing() {\n-    try {\n-      return FSUtils.getAllPartitionPaths(table.getMetaClient().getFs(), table.getMetaClient().getBasePath(),\n-          config.shouldAssumeDatePartitioning()).stream()\n-          .map(ListingBasedRollbackRequest::createRollbackRequestWithDeleteDataAndLogFilesAction)\n-          .collect(Collectors.toList());\n-    } catch (IOException e) {\n-      throw new HoodieIOException(\"Error generating rollback requests\", e);\n-    }\n-  }\n-\n   @Override\n-  protected List<HoodieRollbackStat> executeRollbackUsingFileListing(HoodieInstant instantToRollback, boolean doDelete) {\n-    List<ListingBasedRollbackRequest> rollbackRequests = generateRollbackRequestsByListing();\n-    ListingBasedRollbackHelper listingBasedRollbackHelper = new ListingBasedRollbackHelper(table.getMetaClient(), config);\n-    if(doDelete) {\n-      return listingBasedRollbackHelper.performRollback(jsc, instantToRollback, rollbackRequests);\n-    } else{\n-      return listingBasedRollbackHelper.collectRollbackStats(jsc, instantToRollback, rollbackRequests);\n-    }\n+  protected List<HoodieRollbackStat> executeRollbackUsingFileListing(HoodieInstant instantToRollback) {\n+    List<ListingBasedRollbackRequest> rollbackRequests = RollbackUtils.generateRollbackRequestsByListingCOW(table.getMetaClient().getFs(), table.getMetaClient().getBasePath(),\n+        config.shouldAssumeDatePartitioning());\n+    return new ListingBasedRollbackHelper(table.getMetaClient(), config).performRollback(jsc, instantToRollback, rollbackRequests);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxNDM3Mw==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r461214373", "bodyText": "disintegrated ListingBasedRollbackHelper into two apis, performRollback and collectRollbackStats where first calls into 2nd. Incase of actual rollback, we call performRollback and incase of collecting stats for upgrade, we call into collectRollbackStats. I am repurposing HoodieRollbackStat to hold the info on file path to be rolledback.", "author": "nsivabalan", "createdAt": "2020-07-27T22:49:44Z", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/rollback/CopyOnWriteRollbackActionExecutor.java", "diffHunk": "@@ -100,8 +108,13 @@ public CopyOnWriteRollbackActionExecutor(JavaSparkContext jsc,\n   }\n \n   @Override\n-  protected List<HoodieRollbackStat> executeRollbackUsingFileListing(HoodieInstant instantToRollback) {\n+  protected List<HoodieRollbackStat> executeRollbackUsingFileListing(HoodieInstant instantToRollback, boolean doDelete) {\n     List<ListingBasedRollbackRequest> rollbackRequests = generateRollbackRequestsByListing();\n-    return new ListingBasedRollbackHelper(table.getMetaClient(), config).performRollback(jsc, instantToRollback, rollbackRequests);\n+    ListingBasedRollbackHelper listingBasedRollbackHelper = new ListingBasedRollbackHelper(table.getMetaClient(), config);\n+    if(doDelete) {\n+      return listingBasedRollbackHelper.performRollback(jsc, instantToRollback, rollbackRequests);", "originalCommit": "a04f2fa1d198b5c5a7d3e26c96c3c7b2364c7216", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2NTk5MA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r461265990", "bodyText": "as discussed, we can just call the collectRollbackStats directly, assuming listing based rollback strategy.", "author": "vinothchandar", "createdAt": "2020-07-28T01:37:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxNDM3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0ea132a70e9bfe914b3f99e8823111aec8b4fe68", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/CopyOnWriteRollbackActionExecutor.java b/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/CopyOnWriteRollbackActionExecutor.java\nindex 0f67f5925..2ab25664f 100644\n--- a/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/CopyOnWriteRollbackActionExecutor.java\n+++ b/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/CopyOnWriteRollbackActionExecutor.java\n\n@@ -82,39 +77,18 @@ public class CopyOnWriteRollbackActionExecutor extends BaseRollbackActionExecuto\n     if (!resolvedInstant.isRequested()) {\n       // delete all the data files for this commit\n       LOG.info(\"Clean out all base files generated for commit: \" + resolvedInstant);\n-      if(doDelete) {\n-        stats = getRollbackStrategy().execute(resolvedInstant);\n-      } else{\n-        stats = executeRollbackUsingFileListing(resolvedInstant, false);\n-      }\n-    }\n-    if(doDelete) {\n-      // Delete Inflight instant if enabled\n-      deleteInflightAndRequestedInstant(deleteInstants, activeTimeline, resolvedInstant);\n+      stats = getRollbackStrategy().execute(resolvedInstant);\n     }\n+    // Delete Inflight instant if enabled\n+    deleteInflightAndRequestedInstant(deleteInstants, activeTimeline, resolvedInstant);\n     LOG.info(\"Time(in ms) taken to finish rollback \" + rollbackTimer.endTimer());\n     return stats;\n   }\n \n-  private List<ListingBasedRollbackRequest> generateRollbackRequestsByListing() {\n-    try {\n-      return FSUtils.getAllPartitionPaths(table.getMetaClient().getFs(), table.getMetaClient().getBasePath(),\n-          config.shouldAssumeDatePartitioning()).stream()\n-          .map(ListingBasedRollbackRequest::createRollbackRequestWithDeleteDataAndLogFilesAction)\n-          .collect(Collectors.toList());\n-    } catch (IOException e) {\n-      throw new HoodieIOException(\"Error generating rollback requests\", e);\n-    }\n-  }\n-\n   @Override\n-  protected List<HoodieRollbackStat> executeRollbackUsingFileListing(HoodieInstant instantToRollback, boolean doDelete) {\n-    List<ListingBasedRollbackRequest> rollbackRequests = generateRollbackRequestsByListing();\n-    ListingBasedRollbackHelper listingBasedRollbackHelper = new ListingBasedRollbackHelper(table.getMetaClient(), config);\n-    if(doDelete) {\n-      return listingBasedRollbackHelper.performRollback(jsc, instantToRollback, rollbackRequests);\n-    } else{\n-      return listingBasedRollbackHelper.collectRollbackStats(jsc, instantToRollback, rollbackRequests);\n-    }\n+  protected List<HoodieRollbackStat> executeRollbackUsingFileListing(HoodieInstant instantToRollback) {\n+    List<ListingBasedRollbackRequest> rollbackRequests = RollbackUtils.generateRollbackRequestsByListingCOW(table.getMetaClient().getFs(), table.getMetaClient().getBasePath(),\n+        config.shouldAssumeDatePartitioning());\n+    return new ListingBasedRollbackHelper(table.getMetaClient(), config).performRollback(jsc, instantToRollback, rollbackRequests);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxNDYyMA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r461214620", "bodyText": "this filter was used only within one method and hence moved it within the resp method.", "author": "nsivabalan", "createdAt": "2020-07-27T22:50:18Z", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/rollback/ListingBasedRollbackHelper.java", "diffHunk": "@@ -68,34 +69,38 @@ public ListingBasedRollbackHelper(HoodieTableMetaClient metaClient, HoodieWriteC\n    * Performs all rollback actions that we have collected in parallel.\n    */\n   public List<HoodieRollbackStat> performRollback(JavaSparkContext jsc, HoodieInstant instantToRollback, List<ListingBasedRollbackRequest> rollbackRequests) {\n-    SerializablePathFilter filter = (path) -> {", "originalCommit": "a04f2fa1d198b5c5a7d3e26c96c3c7b2364c7216", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2NjA2NQ==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r461266065", "bodyText": "ack", "author": "vinothchandar", "createdAt": "2020-07-28T01:38:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxNDYyMA=="}], "type": "inlineReview", "revised_code": {"commit": "0ea132a70e9bfe914b3f99e8823111aec8b4fe68", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/ListingBasedRollbackHelper.java b/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/ListingBasedRollbackHelper.java\nindex bda18b18b..10be8ffa9 100644\n--- a/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/ListingBasedRollbackHelper.java\n+++ b/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/ListingBasedRollbackHelper.java\n\n@@ -71,22 +71,32 @@ public class ListingBasedRollbackHelper implements Serializable {\n   public List<HoodieRollbackStat> performRollback(JavaSparkContext jsc, HoodieInstant instantToRollback, List<ListingBasedRollbackRequest> rollbackRequests) {\n     int sparkPartitions = Math.max(Math.min(rollbackRequests.size(), config.getRollbackParallelism()), 1);\n     jsc.setJobGroup(this.getClass().getSimpleName(), \"Perform rollback actions\");\n-    JavaPairRDD<String, HoodieRollbackStat> partitionPathRollbackStatsPairRDD = collectOrDeleteRollback(jsc, instantToRollback, rollbackRequests, sparkPartitions, true);\n+    JavaPairRDD<String, HoodieRollbackStat> partitionPathRollbackStatsPairRDD = maybeDeleteAndCollectStatsOrCollectStats(jsc, instantToRollback, rollbackRequests, sparkPartitions, true);\n     return partitionPathRollbackStatsPairRDD.reduceByKey(RollbackUtils::mergeRollbackStat).map(Tuple2::_2).collect();\n   }\n \n   /**\n-   * Collect all file infos that needs to be rolledback.\n+   * Collect all file info that needs to be rollbacked.\n    */\n   public List<HoodieRollbackStat> collectRollbackStats(JavaSparkContext jsc, HoodieInstant instantToRollback, List<ListingBasedRollbackRequest> rollbackRequests) {\n     int sparkPartitions = Math.max(Math.min(rollbackRequests.size(), config.getRollbackParallelism()), 1);\n     jsc.setJobGroup(this.getClass().getSimpleName(), \"Collect rollback stats for upgrade/downgrade\");\n-    JavaPairRDD<String, HoodieRollbackStat> partitionPathRollbackStatsPairRDD = collectOrDeleteRollback(jsc, instantToRollback, rollbackRequests, sparkPartitions, false);\n+    JavaPairRDD<String, HoodieRollbackStat> partitionPathRollbackStatsPairRDD = maybeDeleteAndCollectStatsOrCollectStats(jsc, instantToRollback, rollbackRequests, sparkPartitions, false);\n     return partitionPathRollbackStatsPairRDD.map(Tuple2::_2).collect();\n   }\n \n-  JavaPairRDD<String, HoodieRollbackStat> collectOrDeleteRollback(JavaSparkContext jsc, HoodieInstant instantToRollback, List<ListingBasedRollbackRequest> rollbackRequests,\n-      int sparkPartitions, boolean doDelete){\n+  /**\n+   * May be delete interested files and collect stats or collect stats only.\n+   *\n+   * @param jsc instance of {@link JavaSparkContext} to use.\n+   * @param instantToRollback {@link HoodieInstant} of interest for which deletion or collect stats is requested.\n+   * @param rollbackRequests List of {@link ListingBasedRollbackRequest} to be operated on.\n+   * @param sparkPartitions number of spark partitions to use for parallelism.\n+   * @param doDelete {@code true} if deletion has to be done. {@code false} if only stats are to be collected w/o performing any deletes.\n+   * @return stats collected with or w/o actual deletions.\n+   */\n+  JavaPairRDD<String, HoodieRollbackStat> maybeDeleteAndCollectStatsOrCollectStats(JavaSparkContext jsc, HoodieInstant instantToRollback, List<ListingBasedRollbackRequest> rollbackRequests,\n+      int sparkPartitions, boolean doDelete) {\n     return jsc.parallelize(rollbackRequests, sparkPartitions).mapToPair(rollbackRequest -> {\n       switch (rollbackRequest.getType()) {\n         case DELETE_DATA_FILES_ONLY: {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxNTE3Ng==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r461215176", "bodyText": "can you help me understand how to differentiate between CREATE and MERGE in these code blocks.", "author": "nsivabalan", "createdAt": "2020-07-27T22:51:57Z", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/rollback/ListingBasedRollbackHelper.java", "diffHunk": "@@ -130,39 +137,55 @@ public ListingBasedRollbackHelper(HoodieTableMetaClient metaClient, HoodieWriteC\n               1L\n           );\n           return new Tuple2<>(rollbackRequest.getPartitionPath(),\n-                  HoodieRollbackStat.newBuilder().withPartitionPath(rollbackRequest.getPartitionPath())\n-                          .withRollbackBlockAppendResults(filesToNumBlocksRollback).build());\n+              HoodieRollbackStat.newBuilder().withPartitionPath(rollbackRequest.getPartitionPath())\n+                  .withRollbackBlockAppendResults(filesToNumBlocksRollback).build());\n         }\n         default:\n           throw new IllegalStateException(\"Unknown Rollback action \" + rollbackRequest);\n       }\n-    }).reduceByKey(RollbackUtils::mergeRollbackStat).map(Tuple2::_2).collect();\n+    });\n   }\n \n \n-\n   /**\n    * Common method used for cleaning out base files under a partition path during rollback of a set of commits.\n    */\n-  private Map<FileStatus, Boolean> deleteCleanedFiles(HoodieTableMetaClient metaClient, HoodieWriteConfig config,\n-                                                      String partitionPath, PathFilter filter) throws IOException {\n+  private Map<FileStatus, Boolean> deleteBaseAndLogFiles(HoodieTableMetaClient metaClient, HoodieWriteConfig config,", "originalCommit": "a04f2fa1d198b5c5a7d3e26c96c3c7b2364c7216", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2NjE2NA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r461266164", "bodyText": "its hard. but would nt MERGE work for both in terms of actually performing a correct rollback?", "author": "vinothchandar", "createdAt": "2020-07-28T01:38:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxNTE3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0ea132a70e9bfe914b3f99e8823111aec8b4fe68", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/ListingBasedRollbackHelper.java b/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/ListingBasedRollbackHelper.java\nindex bda18b18b..10be8ffa9 100644\n--- a/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/ListingBasedRollbackHelper.java\n+++ b/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/ListingBasedRollbackHelper.java\n\n@@ -170,11 +180,11 @@ public class ListingBasedRollbackHelper implements Serializable {\n     FileSystem fs = metaClient.getFs();\n     FileStatus[] toBeDeleted = fs.listStatus(FSUtils.getPartitionPath(config.getBasePath(), partitionPath), filter);\n     for (FileStatus file : toBeDeleted) {\n-      if(doDelete) {\n+      if (doDelete) {\n         boolean success = fs.delete(file.getPath(), false);\n         results.put(file, success);\n         LOG.info(\"Delete file \" + file.getPath() + \"\\t\" + success);\n-      } else{\n+      } else {\n         results.put(file, true);\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxNTUwOA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r461215508", "bodyText": "incase of just collecting stats, all files are added to success list.", "author": "nsivabalan", "createdAt": "2020-07-27T22:52:53Z", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/rollback/ListingBasedRollbackHelper.java", "diffHunk": "@@ -130,39 +137,55 @@ public ListingBasedRollbackHelper(HoodieTableMetaClient metaClient, HoodieWriteC\n               1L\n           );\n           return new Tuple2<>(rollbackRequest.getPartitionPath(),\n-                  HoodieRollbackStat.newBuilder().withPartitionPath(rollbackRequest.getPartitionPath())\n-                          .withRollbackBlockAppendResults(filesToNumBlocksRollback).build());\n+              HoodieRollbackStat.newBuilder().withPartitionPath(rollbackRequest.getPartitionPath())\n+                  .withRollbackBlockAppendResults(filesToNumBlocksRollback).build());\n         }\n         default:\n           throw new IllegalStateException(\"Unknown Rollback action \" + rollbackRequest);\n       }\n-    }).reduceByKey(RollbackUtils::mergeRollbackStat).map(Tuple2::_2).collect();\n+    });\n   }\n \n \n-\n   /**\n    * Common method used for cleaning out base files under a partition path during rollback of a set of commits.\n    */\n-  private Map<FileStatus, Boolean> deleteCleanedFiles(HoodieTableMetaClient metaClient, HoodieWriteConfig config,\n-                                                      String partitionPath, PathFilter filter) throws IOException {\n+  private Map<FileStatus, Boolean> deleteBaseAndLogFiles(HoodieTableMetaClient metaClient, HoodieWriteConfig config,\n+      String commit, String partitionPath, boolean doDelete) throws IOException {\n     LOG.info(\"Cleaning path \" + partitionPath);\n+    String basefileExtension = metaClient.getTableConfig().getBaseFileFormat().getFileExtension();\n+    SerializablePathFilter filter = (path) -> {\n+      if (path.toString().endsWith(basefileExtension)) {\n+        String fileCommitTime = FSUtils.getCommitTime(path.getName());\n+        return commit.equals(fileCommitTime);\n+      } else if (FSUtils.isLogFile(path)) {\n+        // Since the baseCommitTime is the only commit for new log files, it's okay here\n+        String fileCommitTime = FSUtils.getBaseCommitTimeFromLogPath(path);\n+        return commit.equals(fileCommitTime);\n+      }\n+      return false;\n+    };\n+\n     final Map<FileStatus, Boolean> results = new HashMap<>();\n     FileSystem fs = metaClient.getFs();\n     FileStatus[] toBeDeleted = fs.listStatus(FSUtils.getPartitionPath(config.getBasePath(), partitionPath), filter);\n     for (FileStatus file : toBeDeleted) {\n-      boolean success = fs.delete(file.getPath(), false);\n-      results.put(file, success);\n-      LOG.info(\"Delete file \" + file.getPath() + \"\\t\" + success);\n+      if(doDelete) {\n+        boolean success = fs.delete(file.getPath(), false);\n+        results.put(file, success);\n+        LOG.info(\"Delete file \" + file.getPath() + \"\\t\" + success);\n+      } else{\n+        results.put(file, true);", "originalCommit": "a04f2fa1d198b5c5a7d3e26c96c3c7b2364c7216", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2NjY4NQ==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r461266685", "bodyText": "lets add a test , that has inflight commit, with few marker files deleted. and then we show that the code can correctly upgrade and perform a rollback using marker based strategy", "author": "vinothchandar", "createdAt": "2020-07-28T01:40:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxNTUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "0ea132a70e9bfe914b3f99e8823111aec8b4fe68", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/ListingBasedRollbackHelper.java b/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/ListingBasedRollbackHelper.java\nindex bda18b18b..10be8ffa9 100644\n--- a/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/ListingBasedRollbackHelper.java\n+++ b/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/ListingBasedRollbackHelper.java\n\n@@ -170,11 +180,11 @@ public class ListingBasedRollbackHelper implements Serializable {\n     FileSystem fs = metaClient.getFs();\n     FileStatus[] toBeDeleted = fs.listStatus(FSUtils.getPartitionPath(config.getBasePath(), partitionPath), filter);\n     for (FileStatus file : toBeDeleted) {\n-      if(doDelete) {\n+      if (doDelete) {\n         boolean success = fs.delete(file.getPath(), false);\n         results.put(file, success);\n         LOG.info(\"Delete file \" + file.getPath() + \"\\t\" + success);\n-      } else{\n+      } else {\n         results.put(file, true);\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxNTgzMw==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r461215833", "bodyText": "have added this to hold file status fully to be used for upgrade", "author": "nsivabalan", "createdAt": "2020-07-27T22:53:52Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/HoodieRollbackStat.java", "diffHunk": "@@ -39,12 +40,15 @@\n   // Count of HoodieLogFile to commandBlocks written for a particular rollback\n   private final Map<FileStatus, Long> commandBlocksCount;\n \n+  private final List<FileStatus> filesToRollback;", "originalCommit": "a04f2fa1d198b5c5a7d3e26c96c3c7b2364c7216", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42159f615061f66effb40b0aa94c4bc8ba20485b", "chunk": "diff --git a/hudi-common/src/main/java/org/apache/hudi/common/HoodieRollbackStat.java b/hudi-common/src/main/java/org/apache/hudi/common/HoodieRollbackStat.java\nindex d84b4ad7a..a3191fa02 100644\n--- a/hudi-common/src/main/java/org/apache/hudi/common/HoodieRollbackStat.java\n+++ b/hudi-common/src/main/java/org/apache/hudi/common/HoodieRollbackStat.java\n\n@@ -40,15 +39,12 @@ public class HoodieRollbackStat implements Serializable {\n   // Count of HoodieLogFile to commandBlocks written for a particular rollback\n   private final Map<FileStatus, Long> commandBlocksCount;\n \n-  private final List<FileStatus> filesToRollback;\n-\n   public HoodieRollbackStat(String partitionPath, List<String> successDeleteFiles, List<String> failedDeleteFiles,\n-      Map<FileStatus, Long> commandBlocksCount, List<FileStatus> filesToRollback) {\n+      Map<FileStatus, Long> commandBlocksCount) {\n     this.partitionPath = partitionPath;\n     this.successDeleteFiles = successDeleteFiles;\n     this.failedDeleteFiles = failedDeleteFiles;\n     this.commandBlocksCount = commandBlocksCount;\n-    this.filesToRollback = filesToRollback;\n   }\n \n   public Map<FileStatus, Long> getCommandBlocksCount() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxNjE3MA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r461216170", "bodyText": "yet to figure out how to differentiate CREATE and MERGE from fileStatus", "author": "nsivabalan", "createdAt": "2020-07-27T22:54:49Z", "path": "hudi-client/src/main/java/org/apache/hudi/table/UpgradeDowngradeHelper.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table;\n+\n+import org.apache.hudi.common.HoodieRollbackStat;\n+import org.apache.hudi.common.table.HoodieTableConfig;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.HoodieTableVersion;\n+import org.apache.hudi.common.table.timeline.HoodieActiveTimeline;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+import org.apache.hudi.common.util.Option;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.exception.HoodieException;\n+import org.apache.hudi.exception.HoodieRollbackException;\n+import org.apache.hudi.io.IOType;\n+import org.apache.hudi.table.action.rollback.CopyOnWriteRollbackActionExecutor;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class to assist in upgrading/downgrading Hoodie when there is a version change.\n+ */\n+public class UpgradeDowngradeHelper {\n+\n+  private static final Logger LOG = LogManager.getLogger(UpgradeDowngradeHelper.class);\n+  public static final String HOODIE_ORIG_PROPERTY_FILE = \"hoodie.properties.orig\";\n+\n+  /**\n+   * Perform Upgrade or Downgrade steps if required and updated table version if need be.\n+   * <p>\n+   * Starting from version 0.6.0, this upgrade/downgrade step will be added in all write paths. Essentially, if a dataset was created using any pre 0.6.0(for eg 0.5.3),\n+   * and Hoodie version was upgraded to 0.6.0, Hoodie table version gets bumped to 1 and there are some upgrade steps need to be executed before doing any writes.\n+   * Similarly, if a dataset was created using Hoodie version 0.6.0 or Hoodie table version 1 and then hoodie was downgraded to pre 0.6.0 or to Hoodie table version 0,\n+   * then some downgrade steps need to be executed before proceeding w/ any writes.\n+   * On a high level, these are the steps performed\n+   * Step1 : Understand current hoodie table version and table version from hoodie.properties file\n+   * Step2 : Fix any residues from previous upgrade/downgrade\n+   * Step3 : If there are no residues, Check for version upgrade/downgrade. If version mismatch, perform upgrade/downgrade.\n+   * Step4 : If there are residues, clean them up and skip upgrade/downgrade since those steps would have been completed last time.\n+   * Step5 : Copy hoodie.properties -> hoodie.properties.orig\n+   * Step6 : Update hoodie.properties file with current table version\n+   * Step7 : Delete hoodie.properties.orig\n+   * </p>\n+   *\n+   * @param metaClient instance of {@link HoodieTableMetaClient} to use\n+   * @param toVersion version to which upgrade or downgrade has to be done.\n+   */\n+  public static void doUpgradeOrDowngrade(HoodieTableMetaClient metaClient, HoodieTableVersion toVersion, HoodieWriteConfig config, JavaSparkContext jsc) throws IOException {\n+    // Fetch version from property file and current version\n+    HoodieTableVersion versionFromPropertyFile = metaClient.getTableConfig().getHoodieTableVersionFromPropertyFile();\n+\n+    Path metaPath = new Path(metaClient.getMetaPath());\n+    Path originalHoodiePropertyFile = getOrigHoodiePropertyFilePath(metaPath.toString());\n+\n+    boolean updateTableVersionInPropertyFile = false;\n+\n+    if (metaClient.getFs().exists(originalHoodiePropertyFile)) {\n+      // if hoodie.properties.orig exists, rename to hoodie.properties and skip upgrade/downgrade step\n+      metaClient.getFs().rename(originalHoodiePropertyFile, getHoodiePropertyFilePath(metaPath.toString()));\n+      updateTableVersionInPropertyFile = true;\n+    } else {\n+      // upgrade or downgrade if there is a version mismatch\n+      if (versionFromPropertyFile != toVersion) {\n+        updateTableVersionInPropertyFile = true;\n+        if (versionFromPropertyFile == HoodieTableVersion.ONE && toVersion == HoodieTableVersion.ZERO) {\n+          upgradeFromZeroToOne(config, jsc.hadoopConfiguration(), jsc);\n+        } else if (versionFromPropertyFile == HoodieTableVersion.ZERO && toVersion == HoodieTableVersion.ONE) {\n+          downgradeFromOneToZero();\n+        } else {\n+          throw new HoodieException(\"Illegal state wrt table versions. Version from proerpty file \" + versionFromPropertyFile + \" and current version \" + toVersion);\n+        }\n+      }\n+    }\n+\n+    /**\n+     * If table version needs to be updated in hoodie.properties file.\n+     * Step1: Copy hoodie.properties to hoodie.properties.orig\n+     * Step2: add table.version to hoodie.properties\n+     * Step3: delete hoodie.properties.orig\n+     */\n+    if (updateTableVersionInPropertyFile) {\n+      updateTableVersionInHoodiePropertyFile(metaClient, toVersion);\n+    }\n+  }\n+\n+  /**\n+   * Upgrade steps to be done to upgrade from hoodie table version 0 to 1.\n+   */\n+  private static void upgradeFromZeroToOne(HoodieWriteConfig config, Configuration hadoopConf, JavaSparkContext jsc) {\n+    // fetch pending commit info\n+    HoodieTable table = HoodieTable.create(config, hadoopConf);\n+    HoodieTimeline inflightTimeline = table.getMetaClient().getCommitsTimeline().filterPendingExcludingCompaction();\n+    List<String> commits = inflightTimeline.getReverseOrderedInstants().map(HoodieInstant::getTimestamp)\n+        .collect(Collectors.toList());\n+    for (String commit : commits) {\n+      // for every pending commit, delete old marker files and re-SparkMaincreate marker files in new format\n+      recreateMarkerFiles(commit, table, jsc);\n+    }\n+  }\n+\n+  public static void recreateMarkerFiles(final String commitInstantTime, HoodieTable table, JavaSparkContext jsc) throws HoodieRollbackException {\n+    try {\n+      Option<HoodieInstant> commitInstantOpt = Option.fromJavaOptional(table.getActiveTimeline().getCommitsTimeline().getInstants()\n+          .filter(instant -> HoodieActiveTimeline.EQUALS.test(instant.getTimestamp(), commitInstantTime))\n+          .findFirst());\n+      if (commitInstantOpt.isPresent()) {\n+        MarkerFiles markerFiles = new MarkerFiles(table, commitInstantTime);\n+        markerFiles.quietDeleteMarkerDir();\n+\n+        List<HoodieRollbackStat> rollbackStats = new CopyOnWriteRollbackActionExecutor(jsc, table.getConfig(), table, \"\", commitInstantOpt.get(), false).mayBeRollbackAndGetStats(false);\n+\n+        for (HoodieRollbackStat rollbackStat : rollbackStats) {\n+          for (FileStatus fileStatus : rollbackStat.getFilesToRollback()) {\n+            String path = fileStatus.getPath().toString();\n+            String dataFileName = path.substring(path.lastIndexOf(\"/\") + 1);\n+            markerFiles.create(rollbackStat.getPartitionPath(), dataFileName, path.endsWith(table.getBaseFileExtension()) ? IOType.CREATE : IOType.MERGE);", "originalCommit": "a04f2fa1d198b5c5a7d3e26c96c3c7b2364c7216", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ea132a70e9bfe914b3f99e8823111aec8b4fe68", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/table/UpgradeDowngradeHelper.java b/hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngradeUtil.java\nsimilarity index 65%\nrename from hudi-client/src/main/java/org/apache/hudi/table/UpgradeDowngradeHelper.java\nrename to hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngradeUtil.java\nindex f18c65536..f2b0af036 100644\n--- a/hudi-client/src/main/java/org/apache/hudi/table/UpgradeDowngradeHelper.java\n+++ b/hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngradeUtil.java\n\n@@ -16,24 +16,14 @@\n  * limitations under the License.\n  */\n \n-package org.apache.hudi.table;\n+package org.apache.hudi.table.upgrade;\n \n-import org.apache.hudi.common.HoodieRollbackStat;\n import org.apache.hudi.common.table.HoodieTableConfig;\n import org.apache.hudi.common.table.HoodieTableMetaClient;\n import org.apache.hudi.common.table.HoodieTableVersion;\n-import org.apache.hudi.common.table.timeline.HoodieActiveTimeline;\n-import org.apache.hudi.common.table.timeline.HoodieInstant;\n-import org.apache.hudi.common.table.timeline.HoodieTimeline;\n-import org.apache.hudi.common.util.Option;\n import org.apache.hudi.config.HoodieWriteConfig;\n import org.apache.hudi.exception.HoodieException;\n-import org.apache.hudi.exception.HoodieRollbackException;\n-import org.apache.hudi.io.IOType;\n-import org.apache.hudi.table.action.rollback.CopyOnWriteRollbackActionExecutor;\n \n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.fs.FileStatus;\n import org.apache.hadoop.fs.FileUtil;\n import org.apache.hadoop.fs.Path;\n import org.apache.log4j.LogManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxNjM2OQ==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r461216369", "bodyText": "I assume every entry in commandBlocks will be an APPEND. Correct me if I am wrong.", "author": "nsivabalan", "createdAt": "2020-07-27T22:55:18Z", "path": "hudi-client/src/main/java/org/apache/hudi/table/UpgradeDowngradeHelper.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table;\n+\n+import org.apache.hudi.common.HoodieRollbackStat;\n+import org.apache.hudi.common.table.HoodieTableConfig;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.HoodieTableVersion;\n+import org.apache.hudi.common.table.timeline.HoodieActiveTimeline;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+import org.apache.hudi.common.util.Option;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.exception.HoodieException;\n+import org.apache.hudi.exception.HoodieRollbackException;\n+import org.apache.hudi.io.IOType;\n+import org.apache.hudi.table.action.rollback.CopyOnWriteRollbackActionExecutor;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class to assist in upgrading/downgrading Hoodie when there is a version change.\n+ */\n+public class UpgradeDowngradeHelper {\n+\n+  private static final Logger LOG = LogManager.getLogger(UpgradeDowngradeHelper.class);\n+  public static final String HOODIE_ORIG_PROPERTY_FILE = \"hoodie.properties.orig\";\n+\n+  /**\n+   * Perform Upgrade or Downgrade steps if required and updated table version if need be.\n+   * <p>\n+   * Starting from version 0.6.0, this upgrade/downgrade step will be added in all write paths. Essentially, if a dataset was created using any pre 0.6.0(for eg 0.5.3),\n+   * and Hoodie version was upgraded to 0.6.0, Hoodie table version gets bumped to 1 and there are some upgrade steps need to be executed before doing any writes.\n+   * Similarly, if a dataset was created using Hoodie version 0.6.0 or Hoodie table version 1 and then hoodie was downgraded to pre 0.6.0 or to Hoodie table version 0,\n+   * then some downgrade steps need to be executed before proceeding w/ any writes.\n+   * On a high level, these are the steps performed\n+   * Step1 : Understand current hoodie table version and table version from hoodie.properties file\n+   * Step2 : Fix any residues from previous upgrade/downgrade\n+   * Step3 : If there are no residues, Check for version upgrade/downgrade. If version mismatch, perform upgrade/downgrade.\n+   * Step4 : If there are residues, clean them up and skip upgrade/downgrade since those steps would have been completed last time.\n+   * Step5 : Copy hoodie.properties -> hoodie.properties.orig\n+   * Step6 : Update hoodie.properties file with current table version\n+   * Step7 : Delete hoodie.properties.orig\n+   * </p>\n+   *\n+   * @param metaClient instance of {@link HoodieTableMetaClient} to use\n+   * @param toVersion version to which upgrade or downgrade has to be done.\n+   */\n+  public static void doUpgradeOrDowngrade(HoodieTableMetaClient metaClient, HoodieTableVersion toVersion, HoodieWriteConfig config, JavaSparkContext jsc) throws IOException {\n+    // Fetch version from property file and current version\n+    HoodieTableVersion versionFromPropertyFile = metaClient.getTableConfig().getHoodieTableVersionFromPropertyFile();\n+\n+    Path metaPath = new Path(metaClient.getMetaPath());\n+    Path originalHoodiePropertyFile = getOrigHoodiePropertyFilePath(metaPath.toString());\n+\n+    boolean updateTableVersionInPropertyFile = false;\n+\n+    if (metaClient.getFs().exists(originalHoodiePropertyFile)) {\n+      // if hoodie.properties.orig exists, rename to hoodie.properties and skip upgrade/downgrade step\n+      metaClient.getFs().rename(originalHoodiePropertyFile, getHoodiePropertyFilePath(metaPath.toString()));\n+      updateTableVersionInPropertyFile = true;\n+    } else {\n+      // upgrade or downgrade if there is a version mismatch\n+      if (versionFromPropertyFile != toVersion) {\n+        updateTableVersionInPropertyFile = true;\n+        if (versionFromPropertyFile == HoodieTableVersion.ONE && toVersion == HoodieTableVersion.ZERO) {\n+          upgradeFromZeroToOne(config, jsc.hadoopConfiguration(), jsc);\n+        } else if (versionFromPropertyFile == HoodieTableVersion.ZERO && toVersion == HoodieTableVersion.ONE) {\n+          downgradeFromOneToZero();\n+        } else {\n+          throw new HoodieException(\"Illegal state wrt table versions. Version from proerpty file \" + versionFromPropertyFile + \" and current version \" + toVersion);\n+        }\n+      }\n+    }\n+\n+    /**\n+     * If table version needs to be updated in hoodie.properties file.\n+     * Step1: Copy hoodie.properties to hoodie.properties.orig\n+     * Step2: add table.version to hoodie.properties\n+     * Step3: delete hoodie.properties.orig\n+     */\n+    if (updateTableVersionInPropertyFile) {\n+      updateTableVersionInHoodiePropertyFile(metaClient, toVersion);\n+    }\n+  }\n+\n+  /**\n+   * Upgrade steps to be done to upgrade from hoodie table version 0 to 1.\n+   */\n+  private static void upgradeFromZeroToOne(HoodieWriteConfig config, Configuration hadoopConf, JavaSparkContext jsc) {\n+    // fetch pending commit info\n+    HoodieTable table = HoodieTable.create(config, hadoopConf);\n+    HoodieTimeline inflightTimeline = table.getMetaClient().getCommitsTimeline().filterPendingExcludingCompaction();\n+    List<String> commits = inflightTimeline.getReverseOrderedInstants().map(HoodieInstant::getTimestamp)\n+        .collect(Collectors.toList());\n+    for (String commit : commits) {\n+      // for every pending commit, delete old marker files and re-SparkMaincreate marker files in new format\n+      recreateMarkerFiles(commit, table, jsc);\n+    }\n+  }\n+\n+  public static void recreateMarkerFiles(final String commitInstantTime, HoodieTable table, JavaSparkContext jsc) throws HoodieRollbackException {\n+    try {\n+      Option<HoodieInstant> commitInstantOpt = Option.fromJavaOptional(table.getActiveTimeline().getCommitsTimeline().getInstants()\n+          .filter(instant -> HoodieActiveTimeline.EQUALS.test(instant.getTimestamp(), commitInstantTime))\n+          .findFirst());\n+      if (commitInstantOpt.isPresent()) {\n+        MarkerFiles markerFiles = new MarkerFiles(table, commitInstantTime);\n+        markerFiles.quietDeleteMarkerDir();\n+\n+        List<HoodieRollbackStat> rollbackStats = new CopyOnWriteRollbackActionExecutor(jsc, table.getConfig(), table, \"\", commitInstantOpt.get(), false).mayBeRollbackAndGetStats(false);\n+\n+        for (HoodieRollbackStat rollbackStat : rollbackStats) {\n+          for (FileStatus fileStatus : rollbackStat.getFilesToRollback()) {\n+            String path = fileStatus.getPath().toString();\n+            String dataFileName = path.substring(path.lastIndexOf(\"/\") + 1);\n+            markerFiles.create(rollbackStat.getPartitionPath(), dataFileName, path.endsWith(table.getBaseFileExtension()) ? IOType.CREATE : IOType.MERGE);\n+          }\n+          for (FileStatus fileStatus : rollbackStat.getCommandBlocksCount().keySet()) {", "originalCommit": "a04f2fa1d198b5c5a7d3e26c96c3c7b2364c7216", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ea132a70e9bfe914b3f99e8823111aec8b4fe68", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/table/UpgradeDowngradeHelper.java b/hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngradeUtil.java\nsimilarity index 65%\nrename from hudi-client/src/main/java/org/apache/hudi/table/UpgradeDowngradeHelper.java\nrename to hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngradeUtil.java\nindex f18c65536..f2b0af036 100644\n--- a/hudi-client/src/main/java/org/apache/hudi/table/UpgradeDowngradeHelper.java\n+++ b/hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngradeUtil.java\n\n@@ -16,24 +16,14 @@\n  * limitations under the License.\n  */\n \n-package org.apache.hudi.table;\n+package org.apache.hudi.table.upgrade;\n \n-import org.apache.hudi.common.HoodieRollbackStat;\n import org.apache.hudi.common.table.HoodieTableConfig;\n import org.apache.hudi.common.table.HoodieTableMetaClient;\n import org.apache.hudi.common.table.HoodieTableVersion;\n-import org.apache.hudi.common.table.timeline.HoodieActiveTimeline;\n-import org.apache.hudi.common.table.timeline.HoodieInstant;\n-import org.apache.hudi.common.table.timeline.HoodieTimeline;\n-import org.apache.hudi.common.util.Option;\n import org.apache.hudi.config.HoodieWriteConfig;\n import org.apache.hudi.exception.HoodieException;\n-import org.apache.hudi.exception.HoodieRollbackException;\n-import org.apache.hudi.io.IOType;\n-import org.apache.hudi.table.action.rollback.CopyOnWriteRollbackActionExecutor;\n \n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.fs.FileStatus;\n import org.apache.hadoop.fs.FileUtil;\n import org.apache.hadoop.fs.Path;\n import org.apache.log4j.LogManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ4Njg2MQ==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r461486861", "bodyText": "@vinothchandar : forgot to remind you yesterday when we discussed to move the collectStats method to a separate class and call directly for upgrade. These validations steps (validateSavepointRollbacks, validateRollbackCommitSequence) might be required as well right ? So, few bits and pieces in this class is required in upgrade step as well.", "author": "nsivabalan", "createdAt": "2020-07-28T10:42:20Z", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/rollback/BaseRollbackActionExecutor.java", "diffHunk": "@@ -159,24 +161,32 @@ private void rollBackIndex() {\n     LOG.info(\"Index rolled back for commits \" + instantToRollback);\n   }\n \n-  public List<HoodieRollbackStat> doRollbackAndGetStats() {\n-    final String instantTimeToRollback = instantToRollback.getTimestamp();\n-    final boolean isPendingCompaction = Objects.equals(HoodieTimeline.COMPACTION_ACTION, instantToRollback.getAction())\n-        && !instantToRollback.isCompleted();\n-    validateSavepointRollbacks();\n-    if (!isPendingCompaction) {\n-      validateRollbackCommitSequence();\n-    }\n-\n-    try {\n-      List<HoodieRollbackStat> stats = executeRollback();\n-      LOG.info(\"Rolled back inflight instant \" + instantTimeToRollback);\n+  public List<HoodieRollbackStat> mayBeRollbackAndGetStats(boolean doDelete) {\n+    if(doDelete) {\n+      final String instantTimeToRollback = instantToRollback.getTimestamp();\n+      final boolean isPendingCompaction = Objects.equals(HoodieTimeline.COMPACTION_ACTION, instantToRollback.getAction())", "originalCommit": "a04f2fa1d198b5c5a7d3e26c96c3c7b2364c7216", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ea132a70e9bfe914b3f99e8823111aec8b4fe68", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/BaseRollbackActionExecutor.java b/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/BaseRollbackActionExecutor.java\nindex 865d6c923..7751bfddf 100644\n--- a/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/BaseRollbackActionExecutor.java\n+++ b/hudi-client/src/main/java/org/apache/hudi/table/action/rollback/BaseRollbackActionExecutor.java\n\n@@ -161,32 +161,24 @@ public abstract class BaseRollbackActionExecutor extends BaseActionExecutor<Hood\n     LOG.info(\"Index rolled back for commits \" + instantToRollback);\n   }\n \n-  public List<HoodieRollbackStat> mayBeRollbackAndGetStats(boolean doDelete) {\n-    if(doDelete) {\n-      final String instantTimeToRollback = instantToRollback.getTimestamp();\n-      final boolean isPendingCompaction = Objects.equals(HoodieTimeline.COMPACTION_ACTION, instantToRollback.getAction())\n-          && !instantToRollback.isCompleted();\n-      validateSavepointRollbacks();\n-      if (!isPendingCompaction) {\n-        validateRollbackCommitSequence();\n-      }\n+  public List<HoodieRollbackStat> mayBeRollbackAndGetStats() {\n+    final String instantTimeToRollback = instantToRollback.getTimestamp();\n+    final boolean isPendingCompaction = Objects.equals(HoodieTimeline.COMPACTION_ACTION, instantToRollback.getAction())\n+        && !instantToRollback.isCompleted();\n+    validateSavepointRollbacks();\n+    if (!isPendingCompaction) {\n+      validateRollbackCommitSequence();\n+    }\n \n-      try {\n-        List<HoodieRollbackStat> stats = executeRollback(doDelete);\n-        LOG.info(\"Rolled back inflight instant \" + instantTimeToRollback);\n-        if (!isPendingCompaction) {\n-          rollBackIndex();\n-        }\n-        return stats;\n-      } catch (IOException e) {\n-        throw new HoodieIOException(\"Unable to execute rollback \", e);\n-      }\n-    } else{\n-      try {\n-        return executeRollback(doDelete);\n-      } catch (IOException e) {\n-        throw new HoodieIOException(\"Unable to collect rollback stats \", e);\n+    try {\n+      List<HoodieRollbackStat> stats = executeRollback();\n+      LOG.info(\"Rolled back inflight instant \" + instantTimeToRollback);\n+      if (!isPendingCompaction) {\n+        rollBackIndex();\n       }\n+      return stats;\n+    } catch (IOException e) {\n+      throw new HoodieIOException(\"Unable to execute rollback \", e);\n     }\n   }\n \n"}}, {"oid": "0ea132a70e9bfe914b3f99e8823111aec8b4fe68", "url": "https://github.com/apache/hudi/commit/0ea132a70e9bfe914b3f99e8823111aec8b4fe68", "message": "Adding actual upgrade steps from HoodieTableVersion 0 to 1", "committedDate": "2020-07-28T12:49:49Z", "type": "forcePushed"}, {"oid": "42159f615061f66effb40b0aa94c4bc8ba20485b", "url": "https://github.com/apache/hudi/commit/42159f615061f66effb40b0aa94c4bc8ba20485b", "message": "Adding tests for upgrading from 0 to 1", "committedDate": "2020-07-29T17:24:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2MDQ4MA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r462460480", "bodyText": "no changes in this file. just formatting changes.", "author": "nsivabalan", "createdAt": "2020-07-29T17:18:50Z", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/rollback/BaseRollbackActionExecutor.java", "diffHunk": "@@ -59,31 +61,31 @@\n   protected final boolean useMarkerBasedStrategy;\n \n   public BaseRollbackActionExecutor(JavaSparkContext jsc,\n-                                    HoodieWriteConfig config,\n-                                    HoodieTable<?> table,\n-                                    String instantTime,\n-                                    HoodieInstant instantToRollback,\n-                                    boolean deleteInstants) {\n+      HoodieWriteConfig config,", "originalCommit": "04accb1729fc6e4f10e0785f89b550c4e76f75b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "baf702280d215704d0f16d5d54c6c07c90cbd033", "url": "https://github.com/apache/hudi/commit/baf702280d215704d0f16d5d54c6c07c90cbd033", "message": "Adding tests for upgrading from 0 to 1", "committedDate": "2020-07-29T18:02:04Z", "type": "forcePushed"}, {"oid": "e218461f40d8322b7ecd28b7878423dc7a766197", "url": "https://github.com/apache/hudi/commit/e218461f40d8322b7ecd28b7878423dc7a766197", "message": "[HUDI-1014] Adding Upgrade and downgrade infra for smooth transitioning from list based rollback to marker based rollback\n\n- This pull request adds upgrade/downgrade infra for smooth transition from list based rollback to marker based rollback*\n - A new property called hoodie.table.version is added to hoodie.properties file as part of this. Whenever hoodie is launched with newer table version i.e 1(or moving from pre 0.6.0 to 0.6.0), an upgrade step will be executed automatically to adhere to marker based rollback.*\n - This automatic upgrade step will happen just once per dataset as the hoodie.table.version will be updated in property file after upgrade is completed once*\n - Similarly, a command line tool for Downgrading is added if incase some user wants to downgrade hoodie from table version 1 to 0 or move from hoodie 0.6.0 to pre 0.6.0*\n - *Added UpgradeDowngradeUtil to assist in upgrading or downgrading hoodie table*\n - *Added Interfaces for upgrade and downgrade and concrete implementations for upgrading from 0 to 1 and downgrading from 1 to 0.*\n - *Made some changes to ListingBasedRollbackHelper to expose just rollback stats w/o performing actual rollback, which will be consumed by Upgrade infra*", "committedDate": "2020-08-04T06:13:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTY1OA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r465405658", "bodyText": "@nsivabalan Can a user control the hoodie layout version manually from the HoodieWriteConfig. Say, choose the older timeline layout for 0.6.0 in which case there is no need to upgrade ?", "author": "n3nash", "createdAt": "2020-08-05T00:38:28Z", "path": "hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngradeUtil.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.upgrade;\n+\n+import org.apache.hudi.common.table.HoodieTableConfig;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.HoodieTableVersion;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.exception.HoodieException;\n+\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Helper class to assist in upgrading/downgrading Hoodie when there is a version change.\n+ */\n+public class UpgradeDowngradeUtil {", "originalCommit": "e218461f40d8322b7ecd28b7878423dc7a766197", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg0NDc4MQ==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r465844781", "bodyText": "why feel apprehensive about upgrading? I mean, why do you want to upgrade to 0.6.0 but want to avoid the upgrade step? IMO, we should not have such knobs. But we do have knobs though, the marker based rollbacks. If you disable marker based rollback, this upgrade step may not take place. But this part of code is yet to be reviewed which I coded it up. Wanted to see if @bvaradar and other reviewers agrees that the upgrade step should be guarded by the marker based rollback config.", "author": "nsivabalan", "createdAt": "2020-08-05T16:17:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3NDIwNA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r465874204", "bodyText": "@nsivabalan Can you point me to the part of the code that you are referring to ?", "author": "n3nash", "createdAt": "2020-08-05T17:04:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NTI1MA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r467485250", "bodyText": "We should upgrade no matter what - regardless of marker based rollback being on/off, regardless of timeline layout version. as of now, timeline layout version is a config that can be controlled manually. in a future version, say 1->2 we can force migrate timeline line layout if need be.\nMeta point is: making the decision to upgrade/downgrade based on write config is a problematic thing IMO. It makes reasoning with actions done during upgrade be based on configs, which can be changed in subsequent writes. We need to be able to reason about state of dataset after upgrade, and convince ourselves that any config change after that point would work well.\ni.e even if markerBasedRollback=disabled during upgrade, we prepare the dataset such that it can be turned on at any given point from there on.", "author": "vinothchandar", "createdAt": "2020-08-08T17:15:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTY1OA=="}], "type": "inlineReview", "revised_code": {"commit": "27e1c4170c6abae8cc4a51b4189675368f0e237d", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngradeUtil.java b/hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngradeUtil.java\ndeleted file mode 100644\nindex 909e6ca82..000000000\n--- a/hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngradeUtil.java\n+++ /dev/null\n\n@@ -1,143 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.hudi.table.upgrade;\n-\n-import org.apache.hudi.common.table.HoodieTableConfig;\n-import org.apache.hudi.common.table.HoodieTableMetaClient;\n-import org.apache.hudi.common.table.HoodieTableVersion;\n-import org.apache.hudi.config.HoodieWriteConfig;\n-import org.apache.hudi.exception.HoodieException;\n-\n-import org.apache.hadoop.fs.FileUtil;\n-import org.apache.hadoop.fs.Path;\n-import org.apache.log4j.LogManager;\n-import org.apache.log4j.Logger;\n-import org.apache.spark.api.java.JavaSparkContext;\n-\n-import java.io.IOException;\n-\n-/**\n- * Helper class to assist in upgrading/downgrading Hoodie when there is a version change.\n- */\n-public class UpgradeDowngradeUtil {\n-\n-  private static final Logger LOG = LogManager.getLogger(UpgradeDowngradeUtil.class);\n-  public static final String HOODIE_ORIG_PROPERTY_FILE = \"hoodie.properties.orig\";\n-\n-  /**\n-   * Perform Upgrade or Downgrade steps if required and updated table version if need be.\n-   * <p>\n-   * Starting from version 0.6.0, this upgrade/downgrade step will be added in all write paths. Essentially, if a dataset was created using any pre 0.6.0(for eg 0.5.3),\n-   * and Hoodie version was upgraded to 0.6.0, Hoodie table version gets bumped to 1 and there are some upgrade steps need to be executed before doing any writes.\n-   * Similarly, if a dataset was created using Hoodie version 0.6.0 or Hoodie table version 1 and then hoodie was downgraded to pre 0.6.0 or to Hoodie table version 0,\n-   * then some downgrade steps need to be executed before proceeding w/ any writes.\n-   * On a high level, these are the steps performed\n-   * Step1 : Understand current hoodie table version and table version from hoodie.properties file\n-   * Step2 : Fix any residues from previous upgrade/downgrade\n-   * Step3 : If there are no residues, Check for version upgrade/downgrade. If version mismatch, perform upgrade/downgrade.\n-   * Step4 : If there are residues, clean them up and skip upgrade/downgrade since those steps would have been completed last time.\n-   * Step5 : Copy hoodie.properties -> hoodie.properties.orig\n-   * Step6 : Update hoodie.properties file with current table version\n-   * Step7 : Delete hoodie.properties.orig\n-   * </p>\n-   *\n-   * @param metaClient instance of {@link HoodieTableMetaClient} to use\n-   * @param toVersion version to which upgrade or downgrade has to be done.\n-   * @param config instance of {@link HoodieWriteConfig} to use.\n-   * @param jsc instance of {@link JavaSparkContext} to use.\n-   * @param instantTime current instant time that should not be touched.\n-   */\n-  public static void doUpgradeOrDowngrade(HoodieTableMetaClient metaClient, HoodieTableVersion toVersion, HoodieWriteConfig config, JavaSparkContext jsc, String instantTime) throws IOException {\n-    // Fetch version from property file and current version\n-    HoodieTableVersion versionFromPropertyFile = metaClient.getTableConfig().getHoodieTableVersionFromPropertyFile();\n-\n-    Path metaPath = new Path(metaClient.getMetaPath());\n-    Path originalHoodiePropertyFile = getOrigHoodiePropertyFilePath(metaPath.toString());\n-\n-    boolean updateTableVersionInPropertyFile = false;\n-\n-    // check if there are any residues from previous upgrade/downgrade execution and clean them up.\n-    if (metaClient.getFs().exists(originalHoodiePropertyFile)) {\n-      // if hoodie.properties.orig exists, rename to hoodie.properties and skip upgrade/downgrade step\n-      metaClient.getFs().rename(originalHoodiePropertyFile, getHoodiePropertyFilePath(metaPath.toString()));\n-      updateTableVersionInPropertyFile = true;\n-    } else { // if there are no such residues\n-      // upgrade or downgrade if there is a version mismatch\n-      if (versionFromPropertyFile != toVersion) {\n-        updateTableVersionInPropertyFile = true;\n-        if (versionFromPropertyFile == HoodieTableVersion.ZERO && toVersion == HoodieTableVersion.ONE) {\n-          new UpgradeHandleFromZeroToOne().upgrade(config, jsc, instantTime);\n-        } else if (versionFromPropertyFile == HoodieTableVersion.ONE && toVersion == HoodieTableVersion.ZERO) {\n-          new DowngradeHandleOneToZero().downgrade(config, jsc, instantTime);\n-        } else {\n-          throw new HoodieException(\"Illegal state wrt table versions. Version from proerpty file \" + versionFromPropertyFile + \" and current version \" + toVersion);\n-        }\n-      }\n-    }\n-\n-    /**\n-     * If table version needs to be updated in hoodie.properties file.\n-     * Step1: Copy hoodie.properties to hoodie.properties.orig\n-     * Step2: add table.version to hoodie.properties\n-     * Step3: delete hoodie.properties.orig\n-     */\n-    if (updateTableVersionInPropertyFile) {\n-      updateTableVersionInHoodiePropertyFile(metaClient, toVersion);\n-    }\n-  }\n-\n-  /**\n-   * Update hoodie.properties file with table version property.\n-   *\n-   * @param metaClient instance of {@link HoodieTableMetaClient} to use\n-   */\n-  private static void updateTableVersionInHoodiePropertyFile(HoodieTableMetaClient metaClient, HoodieTableVersion toVersion) throws IOException {\n-\n-    Path metaPath = new Path(metaClient.getMetaPath());\n-    Path originalHoodiePropertyPath = getOrigHoodiePropertyFilePath(metaPath.toString());\n-    Path hoodiePropertyPath = getHoodiePropertyFilePath(metaPath.toString());\n-\n-    // Step1: Copy hoodie.properties to hoodie.properties.orig\n-    FileUtil.copy(metaClient.getFs(), hoodiePropertyPath, metaClient.getFs(), originalHoodiePropertyPath,\n-        false, metaClient.getHadoopConf());\n-\n-    // Step 2: update cur version in hoodie.properties file\n-    metaClient.getTableConfig().setHoodieTableVersion(toVersion, metaClient.getFs(), metaPath.toString());\n-\n-    // Step3: Delete hoodie.properties.orig\n-    metaClient.getFs().delete(originalHoodiePropertyPath);\n-  }\n-\n-  /**\n-   * @param metaPath meta path of hoodie dataset.\n-   * @return the path of hoodie.properties.orig file\n-   */\n-  private static Path getOrigHoodiePropertyFilePath(String metaPath) {\n-    return new Path(metaPath + \"/\" + HOODIE_ORIG_PROPERTY_FILE);\n-  }\n-\n-  /**\n-   * @param metaPath meta path of hoodie dataset.\n-   * @return the path of hoodie.properties file\n-   */\n-  private static Path getHoodiePropertyFilePath(String metaPath) {\n-    return new Path(metaPath + \"/\" + HoodieTableConfig.HOODIE_PROPERTIES_FILE);\n-  }\n-\n-}\n"}}, {"oid": "ea18853c5d5c52145eabf56b99e7e639beb5e5db", "url": "https://github.com/apache/hudi/commit/ea18853c5d5c52145eabf56b99e7e639beb5e5db", "message": "[HUDI-1014] Adding Upgrade and downgrade infra for smooth transitioning from list based rollback to marker based rollback\n\n- This pull request adds upgrade/downgrade infra for smooth transition from list based rollback to marker based rollback*\n - A new property called hoodie.table.version is added to hoodie.properties file as part of this. Whenever hoodie is launched with newer table version i.e 1(or moving from pre 0.6.0 to 0.6.0), an upgrade step will be executed automatically to adhere to marker based rollback.*\n - This automatic upgrade step will happen just once per dataset as the hoodie.table.version will be updated in property file after upgrade is completed once*\n - Similarly, a command line tool for Downgrading is added if incase some user wants to downgrade hoodie from table version 1 to 0 or move from hoodie 0.6.0 to pre 0.6.0*\n - *Added UpgradeDowngradeUtil to assist in upgrading or downgrading hoodie table*\n - *Added Interfaces for upgrade and downgrade and concrete implementations for upgrading from 0 to 1 and downgrading from 1 to 0.*\n - *Made some changes to ListingBasedRollbackHelper to expose just rollback stats w/o performing actual rollback, which will be consumed by Upgrade infra*", "committedDate": "2020-08-06T07:39:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxMzU3Mg==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r464713572", "bodyText": "rename: UpgradeDowngradeUtil.migrate(..)", "author": "vinothchandar", "createdAt": "2020-08-03T23:27:08Z", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/SparkMain.java", "diffHunk": "@@ -329,9 +341,34 @@ private static int deleteSavepoint(JavaSparkContext jsc, String savepointTime, S\n     }\n   }\n \n+  /**\n+   * Upgrade or downgrade hoodie table.\n+   * @param jsc instance of {@link JavaSparkContext} to use.\n+   * @param basePath base path of the dataset.\n+   * @param toVersion version to which upgrade/downgrade to be done.\n+   * @return 0 if success, else -1.\n+   * @throws Exception\n+   */\n+  protected static int upgradeOrDowngradeHoodieDataset(JavaSparkContext jsc, String basePath, String toVersion) throws Exception {\n+    HoodieWriteConfig config = getWriteConfig(basePath);\n+    HoodieTableMetaClient metaClient = ClientUtils.createMetaClient(jsc.hadoopConfiguration(), config, false);\n+    try {\n+      UpgradeDowngradeUtil.doUpgradeOrDowngrade(metaClient, HoodieTableVersion.valueOf(toVersion), config, jsc, null);", "originalCommit": "2183d2f50d04452447ec06448a583d46f955070e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk4OTM3Ng==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r466989376", "bodyText": "I am not sure if migrate will be the right terminology to use here. Isn't migrate used to move from one system to another? This is more of an upgrade version or downgrade version right within the same system(hudi).", "author": "nsivabalan", "createdAt": "2020-08-07T11:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxMzU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NTM2OA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r467485368", "bodyText": "not really. migrate is a general term. :)", "author": "vinothchandar", "createdAt": "2020-08-08T17:17:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxMzU3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "27e1c4170c6abae8cc4a51b4189675368f0e237d", "chunk": "diff --git a/hudi-cli/src/main/java/org/apache/hudi/cli/commands/SparkMain.java b/hudi-cli/src/main/java/org/apache/hudi/cli/commands/SparkMain.java\nindex 9f6e0fe40..e6a3f529c 100644\n--- a/hudi-cli/src/main/java/org/apache/hudi/cli/commands/SparkMain.java\n+++ b/hudi-cli/src/main/java/org/apache/hudi/cli/commands/SparkMain.java\n\n@@ -342,22 +390,23 @@ public class SparkMain {\n   }\n \n   /**\n-   * Upgrade or downgrade hoodie table.\n+   * Upgrade or downgrade table.\n+   *\n    * @param jsc instance of {@link JavaSparkContext} to use.\n    * @param basePath base path of the dataset.\n    * @param toVersion version to which upgrade/downgrade to be done.\n    * @return 0 if success, else -1.\n    * @throws Exception\n    */\n-  protected static int upgradeOrDowngradeHoodieDataset(JavaSparkContext jsc, String basePath, String toVersion) throws Exception {\n+  protected static int upgradeOrDowngradeTable(JavaSparkContext jsc, String basePath, String toVersion) {\n     HoodieWriteConfig config = getWriteConfig(basePath);\n     HoodieTableMetaClient metaClient = ClientUtils.createMetaClient(jsc.hadoopConfiguration(), config, false);\n     try {\n-      UpgradeDowngradeUtil.doUpgradeOrDowngrade(metaClient, HoodieTableVersion.valueOf(toVersion), config, jsc, null);\n-      LOG.info(String.format(\"Hudi dataset at \\\"%s\\\" upgraded / downgraded to version \\\"%s\\\".\", basePath, toVersion));\n+      UpgradeDowngrade.run(metaClient, HoodieTableVersion.valueOf(toVersion), config, jsc, null);\n+      LOG.info(String.format(\"Table at \\\"%s\\\" upgraded / downgraded to version \\\"%s\\\".\", basePath, toVersion));\n       return 0;\n     } catch (Exception e) {\n-      LOG.warn(String.format(\"Failed: Could not upgrade/downgrade Hudi dataset at \\\"%s\\\" to version \\\"%s\\\".\", basePath, toVersion));\n+      LOG.warn(String.format(\"Failed: Could not upgrade/downgrade table at \\\"%s\\\" to version \\\"%s\\\".\", basePath, toVersion), e);\n       return -1;\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxNDY4Mg==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r464714682", "bodyText": "we should do this no matter, whether rollback using markers is on /off", "author": "vinothchandar", "createdAt": "2020-08-03T23:30:55Z", "path": "hudi-client/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java", "diffHunk": "@@ -186,10 +188,14 @@ public HoodieMetrics getMetrics() {\n    * Get HoodieTable and init {@link Timer.Context}.\n    *\n    * @param operationType write operation type\n+   * @param instantTime current inflight instant time\n    * @return HoodieTable\n    */\n-  protected HoodieTable getTableAndInitCtx(WriteOperationType operationType) {\n+  protected HoodieTable getTableAndInitCtx(WriteOperationType operationType, String instantTime) {\n     HoodieTableMetaClient metaClient = createMetaClient(true);\n+    if (config.shouldRollbackUsingMarkers()) {", "originalCommit": "2183d2f50d04452447ec06448a583d46f955070e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk5MTE4Nw==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r466991187", "bodyText": "this was my thinking behind this guard. If someone wishes to stay with list based rollback, why execute this upgrade this which specifically does some work to assist in marker based rollback which will never be used since marked based rollback is not going to be used at all. I am not very strong on this though. But tests need some fixes though as I rely on creating commits and marker files using client at first, by disabling marker based rollback. If we remove this guard, then tests need to manually create all data files and marker files. I am not saying that as a reason to keep this guard, just saying we have some extra work to be done.", "author": "nsivabalan", "createdAt": "2020-08-07T11:50:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxNDY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU0MzE1MA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r467543150", "bodyText": "tests actually pass. I have changes where this solely gated by the table version and not any other config.", "author": "vinothchandar", "createdAt": "2020-08-09T06:26:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxNDY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e218461f40d8322b7ecd28b7878423dc7a766197", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java b/hudi-client/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java\nindex 1021a01a1..dc3135695 100644\n--- a/hudi-client/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java\n+++ b/hudi-client/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java\n\n@@ -196,6 +208,15 @@ public abstract class AbstractHoodieWriteClient<T extends HoodieRecordPayload> e\n     if (config.shouldRollbackUsingMarkers()) {\n       mayBeUpgrade(metaClient, instantTime);\n     }\n+    return getTableAndInitCtx(operationType);\n+  }\n+\n+  protected HoodieTable getTableAndInitCtx(WriteOperationType operationType) {\n+    HoodieTableMetaClient metaClient = createMetaClient(true);\n+    return getTableAndInitCtx(metaClient, operationType);\n+  }\n+\n+  private HoodieTable getTableAndInitCtx(HoodieTableMetaClient metaClient, WriteOperationType operationType) {\n     if (operationType == WriteOperationType.DELETE) {\n       setWriteSchemaForDeletes(metaClient);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxNTExNw==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r464715117", "bodyText": "is this just moving code in bulk?", "author": "vinothchandar", "createdAt": "2020-08-03T23:32:22Z", "path": "hudi-client/src/main/java/org/apache/hudi/table/action/rollback/RollbackUtils.java", "diffHunk": "@@ -63,4 +84,156 @@ static HoodieRollbackStat mergeRollbackStat(HoodieRollbackStat stat1, HoodieRoll\n     return new HoodieRollbackStat(stat1.getPartitionPath(), successDeleteFiles, failedDeleteFiles, commandBlocksCount);\n   }\n \n+  /**", "originalCommit": "2183d2f50d04452447ec06448a583d46f955070e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk5MTI3NQ==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r466991275", "bodyText": "yes", "author": "nsivabalan", "createdAt": "2020-08-07T11:50:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxNTExNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI1MjI5NA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r466252294", "bodyText": "we should keep these to just HoodieClientTestUtils. since markers are just an artifact of the client", "author": "vinothchandar", "createdAt": "2020-08-06T08:59:23Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestUtils.java", "diffHunk": "@@ -279,6 +287,23 @@ public static String createDataFile(String basePath, String partitionPath, Strin\n     return fileID;\n   }\n \n+  public static void createMarkerFile(String basePath, String partitionPath, String instantTime, String dataFileName) throws IOException {", "originalCommit": "ea18853c5d5c52145eabf56b99e7e639beb5e5db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27e1c4170c6abae8cc4a51b4189675368f0e237d", "chunk": "diff --git a/hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestUtils.java b/hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestUtils.java\nindex ab8f2ac91..92d431c2d 100644\n--- a/hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestUtils.java\n+++ b/hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestUtils.java\n\n@@ -287,23 +279,6 @@ public class HoodieTestUtils {\n     return fileID;\n   }\n \n-  public static void createMarkerFile(String basePath, String partitionPath, String instantTime, String dataFileName) throws IOException {\n-    createTempFolderForMarkerFiles(basePath);\n-    String folderPath = getTempFolderName(basePath);\n-    // create dir for this instant\n-    new File(folderPath + \"/\" + instantTime + \"/\" + partitionPath).mkdirs();\n-    new File(folderPath + \"/\" + instantTime + \"/\" + partitionPath + \"/\" + dataFileName + \".marker.MERGE\").createNewFile();\n-  }\n-\n-  public static int getTotalMarkerFileCount(String basePath, String partitionPath, String instantTime) {\n-    String folderPath = getTempFolderName(basePath);\n-    File markerDir = new File(folderPath + \"/\" + instantTime + \"/\" + partitionPath);\n-    if (markerDir.exists()) {\n-      return markerDir.listFiles((dir, name) -> name.contains(\".marker.MERGE\")).length;\n-    }\n-    return 0;\n-  }\n-\n   public static String createDataFileFixLength(String basePath, String partitionPath, String instantTime, String fileID,\n       long length) throws IOException {\n     String folderPath = basePath + \"/\" + partitionPath + \"/\";\n"}}, {"oid": "7a6d380e369c4f5043258f6c9d4259c415942bf8", "url": "https://github.com/apache/hudi/commit/7a6d380e369c4f5043258f6c9d4259c415942bf8", "message": "[HUDI-1014] Adding Upgrade and downgrade infra for smooth transitioning from list based rollback to marker based rollback\n\n- This pull request adds upgrade/downgrade infra for smooth transition from list based rollback to marker based rollback*\n - A new property called hoodie.table.version is added to hoodie.properties file as part of this. Whenever hoodie is launched with newer table version i.e 1(or moving from pre 0.6.0 to 0.6.0), an upgrade step will be executed automatically to adhere to marker based rollback.*\n - This automatic upgrade step will happen just once per dataset as the hoodie.table.version will be updated in property file after upgrade is completed once*\n - Similarly, a command line tool for Downgrading is added if incase some user wants to downgrade hoodie from table version 1 to 0 or move from hoodie 0.6.0 to pre 0.6.0*\n - *Added UpgradeDowngradeUtil to assist in upgrading or downgrading hoodie table*\n - *Added Interfaces for upgrade and downgrade and concrete implementations for upgrading from 0 to 1 and downgrading from 1 to 0.*\n - *Made some changes to ListingBasedRollbackHelper to expose just rollback stats w/o performing actual rollback, which will be consumed by Upgrade infra*", "committedDate": "2020-08-09T08:13:57Z", "type": "commit"}, {"oid": "27e1c4170c6abae8cc4a51b4189675368f0e237d", "url": "https://github.com/apache/hudi/commit/27e1c4170c6abae8cc4a51b4189675368f0e237d", "message": "Reworking failure handling for upgrade/downgrade\n\n - Changed tests accordingly, added one test around left over cleanup\n - New tables now write table version into hoodie.properties\n - Clean up code naming, abstractions.", "committedDate": "2020-08-09T08:16:23Z", "type": "forcePushed"}, {"oid": "9cc565e5af28e454dc70680beb96ac54c14e8b21", "url": "https://github.com/apache/hudi/commit/9cc565e5af28e454dc70680beb96ac54c14e8b21", "message": "Reworking failure handling for upgrade/downgrade\n\n - Changed tests accordingly, added one test around left over cleanup\n - New tables now write table version into hoodie.properties\n - Clean up code naming, abstractions.", "committedDate": "2020-08-09T09:01:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU4ODYzNw==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r467588637", "bodyText": "this needs fixing. This will issue commit via client and since you have removed the guard to execute upgrade (even if marker based is disabled), upgrade would have already been executed. if I am not wrong, below command of\nUpgradeDowngrade.run(metaClient, HoodieTableVersion.ONE, cfg, jsc, null); \n\nis a no op since already the table version is upgraded.", "author": "nsivabalan", "createdAt": "2020-08-09T14:12:47Z", "path": "hudi-client/src/test/java/org/apache/hudi/table/upgrade/TestUpgradeDowngrade.java", "diffHunk": "@@ -0,0 +1,405 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.upgrade;\n+\n+import org.apache.hudi.client.HoodieWriteClient;\n+import org.apache.hudi.client.WriteStatus;\n+import org.apache.hudi.common.model.FileSlice;\n+import org.apache.hudi.common.model.HoodieFileGroup;\n+import org.apache.hudi.common.model.HoodieLogFile;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.model.HoodieTableType;\n+import org.apache.hudi.common.table.HoodieTableConfig;\n+import org.apache.hudi.common.table.HoodieTableVersion;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.table.view.SyncableFileSystemView;\n+import org.apache.hudi.common.testutils.HoodieTestDataGenerator;\n+import org.apache.hudi.common.testutils.HoodieTestUtils;\n+import org.apache.hudi.common.util.collection.Pair;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.table.HoodieTable;\n+import org.apache.hudi.table.MarkerFiles;\n+import org.apache.hudi.testutils.Assertions;\n+import org.apache.hudi.testutils.HoodieClientTestBase;\n+import org.apache.hudi.testutils.HoodieClientTestUtils;\n+\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.apache.hudi.common.table.HoodieTableConfig.HOODIE_TABLE_TYPE_PROP_NAME;\n+import static org.apache.hudi.common.testutils.HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n+import static org.apache.hudi.common.testutils.HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Unit tests {@link UpgradeDowngrade}.\n+ */\n+public class TestUpgradeDowngrade extends HoodieClientTestBase {\n+\n+  private static final String TEST_NAME_WITH_PARAMS = \"[{index}] Test with induceResiduesFromPrevUpgrade={0}, deletePartialMarkerFiles={1} and TableType = {2}\";\n+\n+  public static Stream<Arguments> configParams() {\n+    Object[][] data = new Object[][] {\n+            {true, HoodieTableType.COPY_ON_WRITE}, {false, HoodieTableType.COPY_ON_WRITE},\n+            {true, HoodieTableType.MERGE_ON_READ}, {false, HoodieTableType.MERGE_ON_READ}\n+    };\n+    return Stream.of(data).map(Arguments::of);\n+  }\n+\n+  @Test\n+  public void testLeftOverUpdatedPropFileCleanup() throws IOException {\n+    testUpgradeInternal(true, true, HoodieTableType.MERGE_ON_READ);\n+  }\n+\n+  @ParameterizedTest(name = TEST_NAME_WITH_PARAMS)\n+  @MethodSource(\"configParams\")\n+  public void testUpgrade(boolean deletePartialMarkerFiles, HoodieTableType tableType) throws IOException {\n+    testUpgradeInternal(false, deletePartialMarkerFiles, tableType);\n+  }\n+\n+  public void testUpgradeInternal(boolean induceResiduesFromPrevUpgrade, boolean deletePartialMarkerFiles, HoodieTableType tableType) throws IOException {\n+    // init config, table and client.\n+    Map<String, String> params = new HashMap<>();\n+    if (tableType == HoodieTableType.MERGE_ON_READ) {\n+      params.put(HOODIE_TABLE_TYPE_PROP_NAME, HoodieTableType.MERGE_ON_READ.name());\n+      metaClient = HoodieTestUtils.init(hadoopConf, basePath, HoodieTableType.MERGE_ON_READ);\n+    }\n+    HoodieWriteConfig cfg = getConfigBuilder().withAutoCommit(false).withRollbackUsingMarkers(false).withProps(params).build();\n+    HoodieWriteClient client = getHoodieWriteClient(cfg);\n+\n+    // prepare data. Make 2 commits, in which 2nd is not committed.\n+    List<FileSlice> firstPartitionCommit2FileSlices = new ArrayList<>();\n+    List<FileSlice> secondPartitionCommit2FileSlices = new ArrayList<>();\n+    Pair<List<HoodieRecord>, List<HoodieRecord>> inputRecords = twoUpsertCommitDataWithTwoPartitions(firstPartitionCommit2FileSlices, secondPartitionCommit2FileSlices, cfg, client, false);", "originalCommit": "9cc565e5af28e454dc70680beb96ac54c14e8b21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU4ODY5Nw==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r467588697", "bodyText": "this is what I mentioned earlier that tests need quite a bit of fixing if you remove that guard :)", "author": "nsivabalan", "createdAt": "2020-08-09T14:13:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU4ODYzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYxMzg5Mw==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r467613893", "bodyText": "nvm. I overlooked this line\nmetaClient.getTableConfig().setTableVersion(HoodieTableVersion.ZERO);\n\nTests are fine.", "author": "nsivabalan", "createdAt": "2020-08-09T18:26:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU4ODYzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYxOTc5MQ==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r467619791", "bodyText": "This is what I was trying to convey. As part of this call, (2 commits), already upgrade step would have been executed. But, we also reset hoodie table version and call upgrade explicitly after this. So, should be fine. Not sure if you are aware of this. Will let you take a call. If you are ok, patch is good to be merged.", "author": "nsivabalan", "createdAt": "2020-08-09T19:28:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU4ODYzNw=="}], "type": "inlineReview", "revised_code": {"commit": "3ca5adc0039c68235ee08623336b4d90d6f1f338", "chunk": "diff --git a/hudi-client/src/test/java/org/apache/hudi/table/upgrade/TestUpgradeDowngrade.java b/hudi-client/src/test/java/org/apache/hudi/table/upgrade/TestUpgradeDowngrade.java\nindex 96c418f9f..28b5c73ec 100644\n--- a/hudi-client/src/test/java/org/apache/hudi/table/upgrade/TestUpgradeDowngrade.java\n+++ b/hudi-client/src/test/java/org/apache/hudi/table/upgrade/TestUpgradeDowngrade.java\n\n@@ -40,6 +40,7 @@ import org.apache.hudi.testutils.HoodieClientTestBase;\n import org.apache.hudi.testutils.HoodieClientTestUtils;\n \n import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n import org.apache.hadoop.fs.FileUtil;\n import org.apache.hadoop.fs.Path;\n import org.apache.spark.api.java.JavaRDD;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYwMTQxNA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r467601414", "bodyText": "probably you might have to follow something like this in TestUpgradeDowngrade.", "author": "nsivabalan", "createdAt": "2020-08-09T16:14:05Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestUpgradeDowngradeCommand.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.testutils.AbstractShellIntegrationTest;\n+import org.apache.hudi.common.model.HoodieTableType;\n+import org.apache.hudi.common.table.HoodieTableConfig;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.HoodieTableVersion;\n+import org.apache.hudi.common.table.timeline.versioning.TimelineLayoutVersion;\n+import org.apache.hudi.common.testutils.HoodieTestDataGenerator;\n+import org.apache.hudi.common.testutils.HoodieTestUtils;\n+import org.apache.hudi.testutils.HoodieClientTestUtils;\n+\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.Path;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Properties;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**\n+ * Tests {@link UpgradeOrDowngradeCommand}.\n+ */\n+public class TestUpgradeDowngradeCommand extends AbstractShellIntegrationTest {\n+\n+  private String tablePath;\n+\n+  @BeforeEach\n+  public void init() throws IOException {\n+    String tableName = \"test_table\";\n+    tablePath = basePath + File.separator + tableName;\n+    new TableCommand().createTable(\n+        tablePath, tableName, HoodieTableType.COPY_ON_WRITE.name(),\n+        \"\", TimelineLayoutVersion.VERSION_1, \"org.apache.hudi.common.model.HoodieAvroPayload\");\n+\n+    //Create some commits files and parquet files\n+    String commitTime1 = \"100\";\n+    String commitTime2 = \"101\";\n+    HoodieTestDataGenerator.writePartitionMetadata(fs, HoodieTestDataGenerator.DEFAULT_PARTITION_PATHS, tablePath);", "originalCommit": "9cc565e5af28e454dc70680beb96ac54c14e8b21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYwODEwNA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r467608104", "bodyText": "not following. In general, this test can be much simplified. see TestMarkerBasedRollbackStrategy . I did not have time to fix this.", "author": "vinothchandar", "createdAt": "2020-08-09T17:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYwMTQxNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYwMzIyMA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r467603220", "bodyText": "updated/upgraded(file is named as HOODIE_UPDATED_PROPERTY_FILE). Lets use same terminology everywhere. Ignore addressing renaming/java docs/refactoring comments for now. Let's get the patch in for now. But leaving comments so that I can take it up after 0.6.0 release.", "author": "nsivabalan", "createdAt": "2020-08-09T16:32:44Z", "path": "hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngrade.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.upgrade;\n+\n+import org.apache.hudi.common.table.HoodieTableConfig;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.HoodieTableVersion;\n+import org.apache.hudi.common.util.FileIOUtils;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.Properties;\n+\n+/**\n+ * Helper class to assist in upgrading/downgrading Hoodie when there is a version change.\n+ */\n+public class UpgradeDowngrade {\n+\n+  private static final Logger LOG = LogManager.getLogger(UpgradeDowngrade.class);\n+  public static final String HOODIE_UPDATED_PROPERTY_FILE = \"hoodie.properties.updated\";\n+\n+  private HoodieTableMetaClient metaClient;\n+  private HoodieWriteConfig config;\n+  private JavaSparkContext jsc;\n+  private transient FileSystem fs;\n+  private Path updatedPropsFilePath;\n+  private Path propsFilePath;\n+\n+  /**\n+   * Perform Upgrade or Downgrade steps if required and updated table version if need be.\n+   * <p>\n+   * Starting from version 0.6.0, this upgrade/downgrade step will be added in all write paths.\n+   *\n+   * Essentially, if a dataset was created using any pre 0.6.0(for eg 0.5.3), and Hoodie version was upgraded to 0.6.0,\n+   * Hoodie table version gets bumped to 1 and there are some upgrade steps need to be executed before doing any writes.\n+   * Similarly, if a dataset was created using Hoodie version 0.6.0 or Hoodie table version 1 and then hoodie was downgraded\n+   * to pre 0.6.0 or to Hoodie table version 0, then some downgrade steps need to be executed before proceeding w/ any writes.\n+   *\n+   * On a high level, these are the steps performed\n+   *\n+   * Step1 : Understand current hoodie table version and table version from hoodie.properties file\n+   * Step2 : Delete any left over .upgraded from previous upgrade/downgrade", "originalCommit": "9cc565e5af28e454dc70680beb96ac54c14e8b21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYwNzk2Mw==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r467607963", "bodyText": "thats a typo. let me fix the comments. Code does have the same terminology", "author": "vinothchandar", "createdAt": "2020-08-09T17:23:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYwMzIyMA=="}], "type": "inlineReview", "revised_code": {"commit": "3ca5adc0039c68235ee08623336b4d90d6f1f338", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngrade.java b/hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngrade.java\nindex 1d188b51f..b72c42d48 100644\n--- a/hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngrade.java\n+++ b/hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngrade.java\n\n@@ -63,9 +63,9 @@ public class UpgradeDowngrade {\n    * On a high level, these are the steps performed\n    *\n    * Step1 : Understand current hoodie table version and table version from hoodie.properties file\n-   * Step2 : Delete any left over .upgraded from previous upgrade/downgrade\n+   * Step2 : Delete any left over .updated from previous upgrade/downgrade\n    * Step3 : If version are different, perform upgrade/downgrade.\n-   * Step4 : Copy hoodie.properties -> hoodie.properties.upgraded with the version updated\n+   * Step4 : Copy hoodie.properties -> hoodie.properties.updated with the version updated\n    * Step6 : Rename hoodie.properties.updated to hoodie.properties\n    * </p>\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYwMzM2OQ==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r467603369", "bodyText": "why use same name for this method and for the other method too?", "author": "nsivabalan", "createdAt": "2020-08-09T16:34:25Z", "path": "hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngrade.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.upgrade;\n+\n+import org.apache.hudi.common.table.HoodieTableConfig;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.HoodieTableVersion;\n+import org.apache.hudi.common.util.FileIOUtils;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.Properties;\n+\n+/**\n+ * Helper class to assist in upgrading/downgrading Hoodie when there is a version change.\n+ */\n+public class UpgradeDowngrade {\n+\n+  private static final Logger LOG = LogManager.getLogger(UpgradeDowngrade.class);\n+  public static final String HOODIE_UPDATED_PROPERTY_FILE = \"hoodie.properties.updated\";\n+\n+  private HoodieTableMetaClient metaClient;\n+  private HoodieWriteConfig config;\n+  private JavaSparkContext jsc;\n+  private transient FileSystem fs;\n+  private Path updatedPropsFilePath;\n+  private Path propsFilePath;\n+\n+  /**\n+   * Perform Upgrade or Downgrade steps if required and updated table version if need be.\n+   * <p>\n+   * Starting from version 0.6.0, this upgrade/downgrade step will be added in all write paths.\n+   *\n+   * Essentially, if a dataset was created using any pre 0.6.0(for eg 0.5.3), and Hoodie version was upgraded to 0.6.0,\n+   * Hoodie table version gets bumped to 1 and there are some upgrade steps need to be executed before doing any writes.\n+   * Similarly, if a dataset was created using Hoodie version 0.6.0 or Hoodie table version 1 and then hoodie was downgraded\n+   * to pre 0.6.0 or to Hoodie table version 0, then some downgrade steps need to be executed before proceeding w/ any writes.\n+   *\n+   * On a high level, these are the steps performed\n+   *\n+   * Step1 : Understand current hoodie table version and table version from hoodie.properties file\n+   * Step2 : Delete any left over .upgraded from previous upgrade/downgrade\n+   * Step3 : If version are different, perform upgrade/downgrade.\n+   * Step4 : Copy hoodie.properties -> hoodie.properties.upgraded with the version updated\n+   * Step6 : Rename hoodie.properties.updated to hoodie.properties\n+   * </p>\n+   *\n+   * @param metaClient instance of {@link HoodieTableMetaClient} to use\n+   * @param toVersion version to which upgrade or downgrade has to be done.\n+   * @param config instance of {@link HoodieWriteConfig} to use.\n+   * @param jsc instance of {@link JavaSparkContext} to use.\n+   * @param instantTime current instant time that should not be touched.\n+   */\n+  public static void run(HoodieTableMetaClient metaClient, HoodieTableVersion toVersion, HoodieWriteConfig config,", "originalCommit": "9cc565e5af28e454dc70680beb96ac54c14e8b21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYwNzkxNA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r467607914", "bodyText": "why not?", "author": "vinothchandar", "createdAt": "2020-08-09T17:22:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYwMzM2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYxMzQxNw==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r467613417", "bodyText": "you could use. but at first sight, I got confused that we can calling the same method within run().", "author": "nsivabalan", "createdAt": "2020-08-09T18:22:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYwMzM2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3ca5adc0039c68235ee08623336b4d90d6f1f338", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngrade.java b/hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngrade.java\nindex 1d188b51f..b72c42d48 100644\n--- a/hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngrade.java\n+++ b/hudi-client/src/main/java/org/apache/hudi/table/upgrade/UpgradeDowngrade.java\n\n@@ -63,9 +63,9 @@ public class UpgradeDowngrade {\n    * On a high level, these are the steps performed\n    *\n    * Step1 : Understand current hoodie table version and table version from hoodie.properties file\n-   * Step2 : Delete any left over .upgraded from previous upgrade/downgrade\n+   * Step2 : Delete any left over .updated from previous upgrade/downgrade\n    * Step3 : If version are different, perform upgrade/downgrade.\n-   * Step4 : Copy hoodie.properties -> hoodie.properties.upgraded with the version updated\n+   * Step4 : Copy hoodie.properties -> hoodie.properties.updated with the version updated\n    * Step6 : Rename hoodie.properties.updated to hoodie.properties\n    * </p>\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYwMzk2Nw==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r467603967", "bodyText": "comments need fixing.", "author": "nsivabalan", "createdAt": "2020-08-09T16:40:22Z", "path": "hudi-client/src/test/java/org/apache/hudi/table/upgrade/TestUpgradeDowngrade.java", "diffHunk": "@@ -0,0 +1,405 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.upgrade;\n+\n+import org.apache.hudi.client.HoodieWriteClient;\n+import org.apache.hudi.client.WriteStatus;\n+import org.apache.hudi.common.model.FileSlice;\n+import org.apache.hudi.common.model.HoodieFileGroup;\n+import org.apache.hudi.common.model.HoodieLogFile;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.model.HoodieTableType;\n+import org.apache.hudi.common.table.HoodieTableConfig;\n+import org.apache.hudi.common.table.HoodieTableVersion;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.table.view.SyncableFileSystemView;\n+import org.apache.hudi.common.testutils.HoodieTestDataGenerator;\n+import org.apache.hudi.common.testutils.HoodieTestUtils;\n+import org.apache.hudi.common.util.collection.Pair;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.table.HoodieTable;\n+import org.apache.hudi.table.MarkerFiles;\n+import org.apache.hudi.testutils.Assertions;\n+import org.apache.hudi.testutils.HoodieClientTestBase;\n+import org.apache.hudi.testutils.HoodieClientTestUtils;\n+\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.apache.hudi.common.table.HoodieTableConfig.HOODIE_TABLE_TYPE_PROP_NAME;\n+import static org.apache.hudi.common.testutils.HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n+import static org.apache.hudi.common.testutils.HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Unit tests {@link UpgradeDowngrade}.\n+ */\n+public class TestUpgradeDowngrade extends HoodieClientTestBase {\n+\n+  private static final String TEST_NAME_WITH_PARAMS = \"[{index}] Test with induceResiduesFromPrevUpgrade={0}, deletePartialMarkerFiles={1} and TableType = {2}\";\n+\n+  public static Stream<Arguments> configParams() {\n+    Object[][] data = new Object[][] {\n+            {true, HoodieTableType.COPY_ON_WRITE}, {false, HoodieTableType.COPY_ON_WRITE},\n+            {true, HoodieTableType.MERGE_ON_READ}, {false, HoodieTableType.MERGE_ON_READ}\n+    };\n+    return Stream.of(data).map(Arguments::of);\n+  }\n+\n+  @Test\n+  public void testLeftOverUpdatedPropFileCleanup() throws IOException {\n+    testUpgradeInternal(true, true, HoodieTableType.MERGE_ON_READ);\n+  }\n+\n+  @ParameterizedTest(name = TEST_NAME_WITH_PARAMS)\n+  @MethodSource(\"configParams\")\n+  public void testUpgrade(boolean deletePartialMarkerFiles, HoodieTableType tableType) throws IOException {\n+    testUpgradeInternal(false, deletePartialMarkerFiles, tableType);\n+  }\n+\n+  public void testUpgradeInternal(boolean induceResiduesFromPrevUpgrade, boolean deletePartialMarkerFiles, HoodieTableType tableType) throws IOException {\n+    // init config, table and client.\n+    Map<String, String> params = new HashMap<>();\n+    if (tableType == HoodieTableType.MERGE_ON_READ) {\n+      params.put(HOODIE_TABLE_TYPE_PROP_NAME, HoodieTableType.MERGE_ON_READ.name());\n+      metaClient = HoodieTestUtils.init(hadoopConf, basePath, HoodieTableType.MERGE_ON_READ);\n+    }\n+    HoodieWriteConfig cfg = getConfigBuilder().withAutoCommit(false).withRollbackUsingMarkers(false).withProps(params).build();\n+    HoodieWriteClient client = getHoodieWriteClient(cfg);\n+\n+    // prepare data. Make 2 commits, in which 2nd is not committed.\n+    List<FileSlice> firstPartitionCommit2FileSlices = new ArrayList<>();\n+    List<FileSlice> secondPartitionCommit2FileSlices = new ArrayList<>();\n+    Pair<List<HoodieRecord>, List<HoodieRecord>> inputRecords = twoUpsertCommitDataWithTwoPartitions(firstPartitionCommit2FileSlices, secondPartitionCommit2FileSlices, cfg, client, false);\n+\n+    HoodieTable<?> table = this.getHoodieTable(metaClient, cfg);\n+    HoodieInstant commitInstant = table.getPendingCommitTimeline().lastInstant().get();\n+\n+    // delete one of the marker files in 2nd commit if need be.\n+    MarkerFiles markerFiles = new MarkerFiles(table, commitInstant.getTimestamp());\n+    List<String> markerPaths = markerFiles.allMarkerFilePaths();\n+    if (deletePartialMarkerFiles) {\n+      String toDeleteMarkerFile = markerPaths.get(0);\n+      table.getMetaClient().getFs().delete(new Path(table.getMetaClient().getTempFolderPath() + \"/\" + commitInstant.getTimestamp() + \"/\" + toDeleteMarkerFile));\n+      markerPaths.remove(toDeleteMarkerFile);\n+    }\n+\n+    // set hoodie.table.version to 0 in hoodie.properties file\n+    metaClient.getTableConfig().setTableVersion(HoodieTableVersion.ZERO);\n+\n+    // if induce residues are set, copy property file to orig file.\n+    if (induceResiduesFromPrevUpgrade) {\n+      createResidualFile();\n+    }\n+\n+    // should re-create marker files for 2nd commit since its pending. If there was any residues, no upgrade steps should happen except for updating the hoodie.table.version", "originalCommit": "9cc565e5af28e454dc70680beb96ac54c14e8b21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ca5adc0039c68235ee08623336b4d90d6f1f338", "chunk": "diff --git a/hudi-client/src/test/java/org/apache/hudi/table/upgrade/TestUpgradeDowngrade.java b/hudi-client/src/test/java/org/apache/hudi/table/upgrade/TestUpgradeDowngrade.java\nindex 96c418f9f..28b5c73ec 100644\n--- a/hudi-client/src/test/java/org/apache/hudi/table/upgrade/TestUpgradeDowngrade.java\n+++ b/hudi-client/src/test/java/org/apache/hudi/table/upgrade/TestUpgradeDowngrade.java\n\n@@ -40,6 +40,7 @@ import org.apache.hudi.testutils.HoodieClientTestBase;\n import org.apache.hudi.testutils.HoodieClientTestUtils;\n \n import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n import org.apache.hadoop.fs.FileUtil;\n import org.apache.hadoop.fs.Path;\n import org.apache.spark.api.java.JavaRDD;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYwNDYzMQ==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r467604631", "bodyText": "sorry, I don't get why we need this here. If properties contain table type and table name, why bail out?", "author": "nsivabalan", "createdAt": "2020-08-09T16:47:24Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/HoodieTableConfig.java", "diffHunk": "@@ -96,6 +97,8 @@ public HoodieTableConfig(FileSystem fs, String metaPath, String payloadClassName\n       throw new HoodieIOException(\"Could not load Hoodie properties from \" + propertyPath, e);\n     }\n     this.props = props;\n+    ValidationUtils.checkArgument(props.containsKey(HOODIE_TABLE_TYPE_PROP_NAME) && props.containsKey(HOODIE_TABLE_NAME_PROP_NAME),", "originalCommit": "9cc565e5af28e454dc70680beb96ac54c14e8b21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYwODgyNA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r467608824", "bodyText": "these properties are written always. so this indicates a corrupted file (with high probability) . Actually what we discussed is that there wont be a corrupted/partial hoodie.properties file given even s3 (or gcs) guarantees partial writes won't be visible. So this is just additional safety", "author": "vinothchandar", "createdAt": "2020-08-09T17:32:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYwNDYzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYwOTU3NQ==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r467609575", "bodyText": "sorry, I don't get why we need this here. If properties contain table type and table name, why bail out?\n\nwe bail out if these props are not present.", "author": "vinothchandar", "createdAt": "2020-08-09T17:40:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYwNDYzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYxMzMzOA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r467613338", "bodyText": "ok, was confused as to how this related to this patch of upgrade/downgrade.", "author": "nsivabalan", "createdAt": "2020-08-09T18:21:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYwNDYzMQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "3ca5adc0039c68235ee08623336b4d90d6f1f338", "url": "https://github.com/apache/hudi/commit/3ca5adc0039c68235ee08623336b4d90d6f1f338", "message": "Reworking failure handling for upgrade/downgrade\n\n - Changed tests accordingly, added one test around left over cleanup\n - New tables now write table version into hoodie.properties\n - Clean up code naming, abstractions.", "committedDate": "2020-08-09T18:12:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYxNzQ5MA==", "url": "https://github.com/apache/hudi/pull/1858#discussion_r467617490", "bodyText": "minor: there are only 2 args.", "author": "nsivabalan", "createdAt": "2020-08-09T19:05:21Z", "path": "hudi-client/src/test/java/org/apache/hudi/table/upgrade/TestUpgradeDowngrade.java", "diffHunk": "@@ -0,0 +1,408 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.table.upgrade;\n+\n+import org.apache.hudi.client.HoodieWriteClient;\n+import org.apache.hudi.client.WriteStatus;\n+import org.apache.hudi.common.model.FileSlice;\n+import org.apache.hudi.common.model.HoodieFileGroup;\n+import org.apache.hudi.common.model.HoodieLogFile;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.model.HoodieTableType;\n+import org.apache.hudi.common.table.HoodieTableConfig;\n+import org.apache.hudi.common.table.HoodieTableVersion;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.table.view.SyncableFileSystemView;\n+import org.apache.hudi.common.testutils.HoodieTestDataGenerator;\n+import org.apache.hudi.common.testutils.HoodieTestUtils;\n+import org.apache.hudi.common.util.collection.Pair;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.table.HoodieTable;\n+import org.apache.hudi.table.MarkerFiles;\n+import org.apache.hudi.testutils.Assertions;\n+import org.apache.hudi.testutils.HoodieClientTestBase;\n+import org.apache.hudi.testutils.HoodieClientTestUtils;\n+\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.spark.api.java.JavaRDD;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.apache.hudi.common.table.HoodieTableConfig.HOODIE_TABLE_TYPE_PROP_NAME;\n+import static org.apache.hudi.common.testutils.HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n+import static org.apache.hudi.common.testutils.HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Unit tests {@link UpgradeDowngrade}.\n+ */\n+public class TestUpgradeDowngrade extends HoodieClientTestBase {\n+\n+  private static final String TEST_NAME_WITH_PARAMS = \"[{index}] Test with induceResiduesFromPrevUpgrade={0}, deletePartialMarkerFiles={1} and TableType = {2}\";", "originalCommit": "3ca5adc0039c68235ee08623336b4d90d6f1f338", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94b5d9e096eb739fbe1cd75367c1d64350bb8570", "chunk": "diff --git a/hudi-client/src/test/java/org/apache/hudi/table/upgrade/TestUpgradeDowngrade.java b/hudi-client/src/test/java/org/apache/hudi/table/upgrade/TestUpgradeDowngrade.java\nindex 28b5c73ec..f40bd56e0 100644\n--- a/hudi-client/src/test/java/org/apache/hudi/table/upgrade/TestUpgradeDowngrade.java\n+++ b/hudi-client/src/test/java/org/apache/hudi/table/upgrade/TestUpgradeDowngrade.java\n\n@@ -72,7 +72,7 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n  */\n public class TestUpgradeDowngrade extends HoodieClientTestBase {\n \n-  private static final String TEST_NAME_WITH_PARAMS = \"[{index}] Test with induceResiduesFromPrevUpgrade={0}, deletePartialMarkerFiles={1} and TableType = {2}\";\n+  private static final String TEST_NAME_WITH_PARAMS = \"[{index}] Test with deletePartialMarkerFiles={0} and TableType = {1}\";\n \n   public static Stream<Arguments> configParams() {\n     Object[][] data = new Object[][] {\n"}}, {"oid": "94b5d9e096eb739fbe1cd75367c1d64350bb8570", "url": "https://github.com/apache/hudi/commit/94b5d9e096eb739fbe1cd75367c1d64350bb8570", "message": "Reworking failure handling for upgrade/downgrade\n\n - Changed tests accordingly, added one test around left over cleanup\n - New tables now write table version into hoodie.properties\n - Clean up code naming, abstractions.", "committedDate": "2020-08-09T20:52:47Z", "type": "commit"}, {"oid": "94b5d9e096eb739fbe1cd75367c1d64350bb8570", "url": "https://github.com/apache/hudi/commit/94b5d9e096eb739fbe1cd75367c1d64350bb8570", "message": "Reworking failure handling for upgrade/downgrade\n\n - Changed tests accordingly, added one test around left over cleanup\n - New tables now write table version into hoodie.properties\n - Clean up code naming, abstractions.", "committedDate": "2020-08-09T20:52:47Z", "type": "forcePushed"}]}