{"pr_number": 1819, "pr_title": "[HUDI-1058] Make delete marker configurable", "pr_createdAt": "2020-07-11T07:03:13Z", "pr_url": "https://github.com/apache/hudi/pull/1819", "timeline": [{"oid": "0dffe20b74d1cba02986c23206249fbd6714279a", "url": "https://github.com/apache/hudi/commit/0dffe20b74d1cba02986c23206249fbd6714279a", "message": "[HUDI-1058] Make delete marker configurable", "committedDate": "2020-07-18T09:39:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2ODcxNw==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r457468717", "bodyText": "sorry, I didn't realize the other constructor. We could then initialize isDeletedField = \"_hoodie_is_deleted\"; So that one of the constructors will over-ride the value.", "author": "nsivabalan", "createdAt": "2020-07-20T15:01:00Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -66,8 +74,9 @@ public OverwriteWithLatestAvroPayload preCombine(OverwriteWithLatestAvroPayload\n     }\n \n     GenericRecord genericRecord = (GenericRecord) recordOption.get();\n-    // combining strategy here trivially ignores currentValue on disk and writes this record\n-    Object deleteMarker = genericRecord.get(\"_hoodie_is_deleted\");\n+    // combining strategy here trivially ignores currentValue on disk and writes this record\u5417\n+    String deleteField = isDeletedField == null ? \"_hoodie_is_deleted\" : isDeletedField;", "originalCommit": "0dffe20b74d1cba02986c23206249fbd6714279a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4MTE2Mg==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r458181162", "bodyText": "I don't see any tests being added as part of the patch. Would be nice to have some tests covering the new code that was added at all levels.\n\nWriteClient\nDatasource if there is an existing suite of tests for other write operations\nDeltastreamer\n\n\nSorry for late, I will add some testcases and fix the comments.", "author": "shenh062326", "createdAt": "2020-07-21T15:20:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2ODcxNw=="}], "type": "inlineReview", "revised_code": {"commit": "2c17a9ffada5cf665093841a2c77fe91fb1de980", "chunk": "diff --git a/hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java b/hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java\nindex 7c21e0b8c..08ac42792 100644\n--- a/hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java\n+++ b/hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java\n\n@@ -74,9 +74,8 @@ public class OverwriteWithLatestAvroPayload extends BaseAvroPayload\n     }\n \n     GenericRecord genericRecord = (GenericRecord) recordOption.get();\n-    // combining strategy here trivially ignores currentValue on disk and writes this record\u5417\n-    String deleteField = isDeletedField == null ? \"_hoodie_is_deleted\" : isDeletedField;\n-    Object deleteMarker = genericRecord.get(deleteField);\n+    // combining strategy here trivially ignores currentValue on disk and writes this record\n+    Object deleteMarker = genericRecord.get(isDeletedField);\n     if (deleteMarker instanceof Boolean && (boolean) deleteMarker) {\n       return Option.empty();\n     } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3MjY2MA==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r457472660", "bodyText": "all we need is a config here. don't think we need to initialize writeClient here.", "author": "nsivabalan", "createdAt": "2020-07-20T15:05:21Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -337,9 +337,15 @@ private void refreshTimeline() throws IOException {\n     }\n \n     JavaRDD<GenericRecord> avroRDD = avroRDDOptional.get();\n+    if (writeClient == null) {\n+      this.schemaProvider = schemaProvider;\n+      setupWriteClient();", "originalCommit": "0dffe20b74d1cba02986c23206249fbd6714279a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3OTYyMQ==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r457479621", "bodyText": "also thinking do we really need to instantiate the config. since it is just one property, can't we directly read if from TypedProperties? @bvaradar : do you have any thoughts on this. Basically we need to read just one config value for deleteMarker from the properties set. This step is little ahead of where we instantiate writeClient, so wondering how to go about it.", "author": "nsivabalan", "createdAt": "2020-07-20T15:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3MjY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkxMjk1OA==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r457912958", "bodyText": "+1, lets not create the write client here. As we are setting the field (including defaults) from DataSourceReadOptions, you can use the TypedProperties to get it.", "author": "bvaradar", "createdAt": "2020-07-21T08:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3MjY2MA=="}], "type": "inlineReview", "revised_code": {"commit": "2c17a9ffada5cf665093841a2c77fe91fb1de980", "chunk": "diff --git a/hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java b/hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java\nindex 8efde029a..1ea758b6c 100644\n--- a/hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java\n+++ b/hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java\n\n@@ -337,11 +337,7 @@ public class DeltaSync implements Serializable {\n     }\n \n     JavaRDD<GenericRecord> avroRDD = avroRDDOptional.get();\n-    if (writeClient == null) {\n-      this.schemaProvider = schemaProvider;\n-      setupWriteClient();\n-    }\n-    String deleteField = writeClient.getConfig().getDeleteField();\n+    String deleteField = props.getString(HoodieWriteConfig.DELETE_FIELD_PROP, HoodieWriteConfig.DEFAULT_DELETE_FIELD);\n     JavaRDD<HoodieRecord> records = avroRDD.map(gr -> {\n       HoodieRecordPayload payload = DataSourceUtils.createPayload(cfg.payloadClassName, gr,\n           (Comparable) DataSourceUtils.getNestedFieldVal(gr, cfg.sourceOrderingField, false),\n"}}, {"oid": "2c17a9ffada5cf665093841a2c77fe91fb1de980", "url": "https://github.com/apache/hudi/commit/2c17a9ffada5cf665093841a2c77fe91fb1de980", "message": "[HUDI-1058] Make delete marker configurable", "committedDate": "2020-07-21T15:23:03Z", "type": "forcePushed"}, {"oid": "e5c7bf8df6bc7bd41c6a5c0c7fa605b758d91cec", "url": "https://github.com/apache/hudi/commit/e5c7bf8df6bc7bd41c6a5c0c7fa605b758d91cec", "message": "[HUDI-1058] Make delete marker configurable", "committedDate": "2020-07-23T12:21:36Z", "type": "forcePushed"}, {"oid": "1f06ae2e0a135f29090a0b4ac25c52d8e8884c95", "url": "https://github.com/apache/hudi/commit/1f06ae2e0a135f29090a0b4ac25c52d8e8884c95", "message": "[HUDI-1058] Make delete marker configurable", "committedDate": "2020-07-24T10:21:03Z", "type": "forcePushed"}, {"oid": "c6b53e26db81ed78257a10aaf4a8487d4ee63e20", "url": "https://github.com/apache/hudi/commit/c6b53e26db81ed78257a10aaf4a8487d4ee63e20", "message": "[HUDI-1058] Make delete marker configurable", "committedDate": "2020-07-24T12:44:47Z", "type": "forcePushed"}, {"oid": "1caaef3b8e29212000a1f95e2341ad7be8780e11", "url": "https://github.com/apache/hudi/commit/1caaef3b8e29212000a1f95e2341ad7be8780e11", "message": "[HUDI-1058] Make delete marker configurable", "committedDate": "2020-07-25T10:30:45Z", "type": "forcePushed"}, {"oid": "78d1bbc79001dad1d8a2f6c92841707befa35191", "url": "https://github.com/apache/hudi/commit/78d1bbc79001dad1d8a2f6c92841707befa35191", "message": "[HUDI-1058] Make delete marker configurable", "committedDate": "2020-07-25T10:58:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxNTM0Mg==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r460415342", "bodyText": "can we name something like \"deleteMarkerField\" or something. Feel \"deletedField\" conveys the field is deleted.", "author": "nsivabalan", "createdAt": "2020-07-25T15:27:21Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -36,6 +36,8 @@\n public class OverwriteWithLatestAvroPayload extends BaseAvroPayload\n     implements HoodieRecordPayload<OverwriteWithLatestAvroPayload> {\n \n+  private String deletedField = \"_hoodie_is_deleted\";", "originalCommit": "78d1bbc79001dad1d8a2f6c92841707befa35191", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2NjkxMQ==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r461266911", "bodyText": "Thanks for your comments, I will fix the comments.", "author": "shenh062326", "createdAt": "2020-07-28T01:40:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxNTM0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "45ff53fe7aa952600b0361c0c162b747f7169949", "chunk": "diff --git a/hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java b/hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java\nindex 358a24a90..0e4b18ad0 100644\n--- a/hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java\n+++ b/hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java\n\n@@ -36,7 +36,7 @@ import java.io.IOException;\n public class OverwriteWithLatestAvroPayload extends BaseAvroPayload\n     implements HoodieRecordPayload<OverwriteWithLatestAvroPayload> {\n \n-  private String deletedField = \"_hoodie_is_deleted\";\n+  private String deleteMarkerField = \"_hoodie_is_deleted\";\n \n   /**\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxNTQ2Ng==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r460415466", "bodyText": "can we test for both cases, i.e. user defined field and non user defined field for detele marker field", "author": "nsivabalan", "createdAt": "2020-07-25T15:29:08Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -54,16 +55,16 @@ public void testActiveRecords() throws IOException {\n     record1.put(\"id\", \"1\");\n     record1.put(\"partition\", \"partition0\");\n     record1.put(\"ts\", 0L);\n-    record1.put(\"_hoodie_is_deleted\", false);\n+    record1.put(deleteField, false);", "originalCommit": "78d1bbc79001dad1d8a2f6c92841707befa35191", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "45ff53fe7aa952600b0361c0c162b747f7169949", "chunk": "diff --git a/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java b/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\nindex a99efa75c..887c09072 100644\n--- a/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\n+++ b/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\n\n@@ -55,16 +57,18 @@ public class TestOverwriteWithLatestAvroPayload {\n     record1.put(\"id\", \"1\");\n     record1.put(\"partition\", \"partition0\");\n     record1.put(\"ts\", 0L);\n-    record1.put(deleteField, false);\n+    record1.put(defaultDeleteField, false);\n+    record1.put(deleteField, true);\n \n     GenericRecord record2 = new GenericData.Record(schema);\n     record2.put(\"id\", \"2\");\n     record2.put(\"partition\", \"partition1\");\n     record2.put(\"ts\", 1L);\n-    record2.put(deleteField, false);\n+    record2.put(defaultDeleteField, false);\n+    record2.put(deleteField, true);\n \n-    OverwriteWithLatestAvroPayload payload1 = new OverwriteWithLatestAvroPayload(record1, 1, deleteField);\n-    OverwriteWithLatestAvroPayload payload2 = new OverwriteWithLatestAvroPayload(record2, 2, deleteField);\n+    OverwriteWithLatestAvroPayload payload1 = new OverwriteWithLatestAvroPayload(record1, 1);\n+    OverwriteWithLatestAvroPayload payload2 = new OverwriteWithLatestAvroPayload(record2, 2);\n     assertEquals(payload1.preCombine(payload2), payload2);\n     assertEquals(payload2.preCombine(payload1), payload2);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxNTgzMQ==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r460415831", "bodyText": "why not move this method to HoodieTestDataGenerator?", "author": "nsivabalan", "createdAt": "2020-07-25T15:33:12Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.functional;\n+\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.testutils.HoodieTestDataGenerator;\n+import org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer;\n+import org.apache.hudi.utilities.sources.ParquetDFSSource;\n+import org.apache.hudi.utilities.testutils.UtilitiesTestBase;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class TestDeltaStreamerWithOverwriteLatestAvroPayload extends UtilitiesTestBase {\n+  private static String PARQUET_SOURCE_ROOT;\n+  private static final String PROPS_FILENAME_TEST_PARQUET = \"test-parquet-dfs-source.properties\";\n+\n+  @BeforeAll\n+  public static void initClass() throws Exception {\n+    UtilitiesTestBase.initClass(true);\n+    PARQUET_SOURCE_ROOT = dfsBasePath + \"/parquetFiles\";\n+\n+    // prepare the configs.\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/base.properties\", dfs, dfsBasePath + \"/base.properties\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/sql-transformer.properties\", dfs,\n+        dfsBasePath + \"/sql-transformer.properties\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source.avsc\", dfs, dfsBasePath + \"/source.avsc\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source-flattened.avsc\", dfs, dfsBasePath + \"/source-flattened.avsc\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target.avsc\", dfs, dfsBasePath + \"/target.avsc\");\n+  }\n+\n+  private static List<GenericRecord> genericRecords(int n, boolean isDeleteRecord, int instantTime) {", "originalCommit": "78d1bbc79001dad1d8a2f6c92841707befa35191", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "45ff53fe7aa952600b0361c0c162b747f7169949", "chunk": "diff --git a/hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java b/hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java\nindex 30d8b25fe..13148fcbd 100644\n--- a/hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java\n+++ b/hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java\n\n@@ -52,22 +52,18 @@ public class TestDeltaStreamerWithOverwriteLatestAvroPayload extends UtilitiesTe\n     UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target.avsc\", dfs, dfsBasePath + \"/target.avsc\");\n   }\n \n-  private static List<GenericRecord> genericRecords(int n, boolean isDeleteRecord, int instantTime) {\n-    return IntStream.range(0, n).boxed().map(i -> {\n-      String partitionPath = \"partitionPath1\";\n-      HoodieKey key = new HoodieKey(\"id_\" + i, partitionPath);\n-      HoodieTestDataGenerator.KeyPartition kp = new HoodieTestDataGenerator.KeyPartition();\n-      kp.key = key;\n-      kp.partitionPath = partitionPath;\n-      return HoodieTestDataGenerator.generateGenericRecord(\n-          key.getRecordKey(), \"rider-\" + instantTime, \"driver-\" + instantTime, instantTime, isDeleteRecord, false);\n-    }).collect(Collectors.toList());\n-  }\n-\n   @Test\n   public void testOverwriteLatestAvroPayload() throws Exception {\n+    // test defaultDeleteField\n+    this.testOverwriteLatestAvroPayload(null);\n+\n+    // test userDefinedDeleteField\n+    this.testOverwriteLatestAvroPayload(\"user_defined_delete_field\");\n+  }\n+\n+  public void testOverwriteLatestAvroPayload(String deleteMarkerField) throws Exception {\n     String path = PARQUET_SOURCE_ROOT + \"/1.parquet\";\n-    List<GenericRecord> records = genericRecords(5, false, 0);\n+    List<GenericRecord> records = HoodieTestDataGenerator.genericRecords(5, false, 0);\n     Helpers.saveParquetToDFS(records, new Path(path));\n \n     TypedProperties parquetProps = new TypedProperties();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzMjUzOQ==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r460532539", "bodyText": "can we test for both default and user defined fields here.", "author": "nsivabalan", "createdAt": "2020-07-26T14:11:37Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.functional;\n+\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.testutils.HoodieTestDataGenerator;\n+import org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer;\n+import org.apache.hudi.utilities.sources.ParquetDFSSource;\n+import org.apache.hudi.utilities.testutils.UtilitiesTestBase;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class TestDeltaStreamerWithOverwriteLatestAvroPayload extends UtilitiesTestBase {\n+  private static String PARQUET_SOURCE_ROOT;\n+  private static final String PROPS_FILENAME_TEST_PARQUET = \"test-parquet-dfs-source.properties\";\n+\n+  @BeforeAll\n+  public static void initClass() throws Exception {\n+    UtilitiesTestBase.initClass(true);\n+    PARQUET_SOURCE_ROOT = dfsBasePath + \"/parquetFiles\";\n+\n+    // prepare the configs.\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/base.properties\", dfs, dfsBasePath + \"/base.properties\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/sql-transformer.properties\", dfs,\n+        dfsBasePath + \"/sql-transformer.properties\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source.avsc\", dfs, dfsBasePath + \"/source.avsc\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source-flattened.avsc\", dfs, dfsBasePath + \"/source-flattened.avsc\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target.avsc\", dfs, dfsBasePath + \"/target.avsc\");\n+  }\n+\n+  private static List<GenericRecord> genericRecords(int n, boolean isDeleteRecord, int instantTime) {\n+    return IntStream.range(0, n).boxed().map(i -> {\n+      String partitionPath = \"partitionPath1\";\n+      HoodieKey key = new HoodieKey(\"id_\" + i, partitionPath);\n+      HoodieTestDataGenerator.KeyPartition kp = new HoodieTestDataGenerator.KeyPartition();\n+      kp.key = key;\n+      kp.partitionPath = partitionPath;\n+      return HoodieTestDataGenerator.generateGenericRecord(\n+          key.getRecordKey(), \"rider-\" + instantTime, \"driver-\" + instantTime, instantTime, isDeleteRecord, false);\n+    }).collect(Collectors.toList());\n+  }\n+\n+  @Test\n+  public void testOverwriteLatestAvroPayload() throws Exception {", "originalCommit": "78d1bbc79001dad1d8a2f6c92841707befa35191", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY3NDg2Mg==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r461674862", "bodyText": "Sure, I will add both.", "author": "shenh062326", "createdAt": "2020-07-28T15:31:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzMjUzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "45ff53fe7aa952600b0361c0c162b747f7169949", "chunk": "diff --git a/hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java b/hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java\nindex 30d8b25fe..13148fcbd 100644\n--- a/hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java\n+++ b/hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java\n\n@@ -52,22 +52,18 @@ public class TestDeltaStreamerWithOverwriteLatestAvroPayload extends UtilitiesTe\n     UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target.avsc\", dfs, dfsBasePath + \"/target.avsc\");\n   }\n \n-  private static List<GenericRecord> genericRecords(int n, boolean isDeleteRecord, int instantTime) {\n-    return IntStream.range(0, n).boxed().map(i -> {\n-      String partitionPath = \"partitionPath1\";\n-      HoodieKey key = new HoodieKey(\"id_\" + i, partitionPath);\n-      HoodieTestDataGenerator.KeyPartition kp = new HoodieTestDataGenerator.KeyPartition();\n-      kp.key = key;\n-      kp.partitionPath = partitionPath;\n-      return HoodieTestDataGenerator.generateGenericRecord(\n-          key.getRecordKey(), \"rider-\" + instantTime, \"driver-\" + instantTime, instantTime, isDeleteRecord, false);\n-    }).collect(Collectors.toList());\n-  }\n-\n   @Test\n   public void testOverwriteLatestAvroPayload() throws Exception {\n+    // test defaultDeleteField\n+    this.testOverwriteLatestAvroPayload(null);\n+\n+    // test userDefinedDeleteField\n+    this.testOverwriteLatestAvroPayload(\"user_defined_delete_field\");\n+  }\n+\n+  public void testOverwriteLatestAvroPayload(String deleteMarkerField) throws Exception {\n     String path = PARQUET_SOURCE_ROOT + \"/1.parquet\";\n-    List<GenericRecord> records = genericRecords(5, false, 0);\n+    List<GenericRecord> records = HoodieTestDataGenerator.genericRecords(5, false, 0);\n     Helpers.saveParquetToDFS(records, new Path(path));\n \n     TypedProperties parquetProps = new TypedProperties();\n"}}, {"oid": "45ff53fe7aa952600b0361c0c162b747f7169949", "url": "https://github.com/apache/hudi/commit/45ff53fe7aa952600b0361c0c162b747f7169949", "message": "[HUDI-1058] Make delete marker configurable", "committedDate": "2020-07-28T15:39:23Z", "type": "forcePushed"}, {"oid": "8242cad9ee116261546bd067820630a3ea581df1", "url": "https://github.com/apache/hudi/commit/8242cad9ee116261546bd067820630a3ea581df1", "message": "[HUDI-1058] Make delete marker configurable", "committedDate": "2020-07-29T01:46:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NTMwMA==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463545300", "bodyText": "lets be uniform throughout. getDeleteMarkerField.", "author": "nsivabalan", "createdAt": "2020-07-31T10:58:12Z", "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteConfig.java", "diffHunk": "@@ -251,6 +253,10 @@ public int getMaxConsistencyCheckIntervalMs() {\n     return Integer.parseInt(props.getProperty(MAX_CONSISTENCY_CHECK_INTERVAL_MS_PROP));\n   }\n \n+  public String getDeleteField() {", "originalCommit": "8242cad9ee116261546bd067820630a3ea581df1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzNjAxNA==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463936014", "bodyText": "Thanks for your comments, I will fix it.", "author": "shenh062326", "createdAt": "2020-08-01T07:48:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NTMwMA=="}], "type": "inlineReview", "revised_code": {"commit": "9d8cceff60a7897df5d40a534680ed651f194e19", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteConfig.java b/hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteConfig.java\nindex 5938490a4..61e89e3da 100644\n--- a/hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteConfig.java\n+++ b/hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteConfig.java\n\n@@ -253,8 +264,13 @@ public class HoodieWriteConfig extends DefaultHoodieConfig {\n     return Integer.parseInt(props.getProperty(MAX_CONSISTENCY_CHECK_INTERVAL_MS_PROP));\n   }\n \n-  public String getDeleteField() {\n-    return props.getProperty(DELETE_FIELD_PROP);\n+  public BulkInsertSortMode getBulkInsertSortMode() {\n+    String sortMode = props.getProperty(BULKINSERT_SORT_MODE);\n+    return BulkInsertSortMode.valueOf(sortMode.toUpperCase());\n+  }\n+\n+  public String getDeleteMarkerField() {\n+    return props.getProperty(DELETE_MARKER_FIELD_PROP);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NTQ2OA==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463545468", "bodyText": "deleteMarkerField", "author": "nsivabalan", "createdAt": "2020-07-31T10:58:43Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -37,14 +37,17 @@\n public class TestOverwriteWithLatestAvroPayload {\n \n   private Schema schema;\n+  String defaultDeleteField = \"_hoodie_is_deleted\";\n+  String deleteField = \"delete_field\";", "originalCommit": "8242cad9ee116261546bd067820630a3ea581df1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d8cceff60a7897df5d40a534680ed651f194e19", "chunk": "diff --git a/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java b/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\nindex 887c09072..228b211c8 100644\n--- a/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\n+++ b/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\n\n@@ -37,8 +37,8 @@ import static org.junit.jupiter.api.Assertions.assertFalse;\n public class TestOverwriteWithLatestAvroPayload {\n \n   private Schema schema;\n-  String defaultDeleteField = \"_hoodie_is_deleted\";\n-  String deleteField = \"delete_field\";\n+  String defaultDeleteMarkerField = \"_hoodie_is_deleted\";\n+  String deleteMarkerField = \"delete_marker_field\";\n \n   @BeforeEach\n   public void setUp() throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NjQzNQ==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463546435", "bodyText": "shouldn't this also be false.", "author": "nsivabalan", "createdAt": "2020-07-31T11:00:55Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -54,13 +57,15 @@ public void testActiveRecords() throws IOException {\n     record1.put(\"id\", \"1\");\n     record1.put(\"partition\", \"partition0\");\n     record1.put(\"ts\", 0L);\n-    record1.put(\"_hoodie_is_deleted\", false);\n+    record1.put(defaultDeleteField, false);\n+    record1.put(deleteField, true);", "originalCommit": "8242cad9ee116261546bd067820630a3ea581df1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzNTkzMg==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463935932", "bodyText": "In fact, it does not matter whether deleteField is true or false here, only defaultDeleteField will affect decide the result.", "author": "shenh062326", "createdAt": "2020-08-01T07:46:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NjQzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9d8cceff60a7897df5d40a534680ed651f194e19", "chunk": "diff --git a/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java b/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\nindex 887c09072..228b211c8 100644\n--- a/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\n+++ b/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\n\n@@ -57,15 +57,15 @@ public class TestOverwriteWithLatestAvroPayload {\n     record1.put(\"id\", \"1\");\n     record1.put(\"partition\", \"partition0\");\n     record1.put(\"ts\", 0L);\n-    record1.put(defaultDeleteField, false);\n-    record1.put(deleteField, true);\n+    record1.put(defaultDeleteMarkerField, false);\n+    record1.put(deleteMarkerField, true);\n \n     GenericRecord record2 = new GenericData.Record(schema);\n     record2.put(\"id\", \"2\");\n     record2.put(\"partition\", \"partition1\");\n     record2.put(\"ts\", 1L);\n-    record2.put(defaultDeleteField, false);\n-    record2.put(deleteField, true);\n+    record2.put(defaultDeleteMarkerField, false);\n+    record2.put(deleteMarkerField, true);\n \n     OverwriteWithLatestAvroPayload payload1 = new OverwriteWithLatestAvroPayload(record1, 1);\n     OverwriteWithLatestAvroPayload payload2 = new OverwriteWithLatestAvroPayload(record2, 2);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NjQ3OQ==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463546479", "bodyText": "same here.", "author": "nsivabalan", "createdAt": "2020-07-31T11:01:02Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -54,13 +57,15 @@ public void testActiveRecords() throws IOException {\n     record1.put(\"id\", \"1\");\n     record1.put(\"partition\", \"partition0\");\n     record1.put(\"ts\", 0L);\n-    record1.put(\"_hoodie_is_deleted\", false);\n+    record1.put(defaultDeleteField, false);\n+    record1.put(deleteField, true);\n \n     GenericRecord record2 = new GenericData.Record(schema);\n     record2.put(\"id\", \"2\");\n     record2.put(\"partition\", \"partition1\");\n     record2.put(\"ts\", 1L);\n-    record2.put(\"_hoodie_is_deleted\", false);\n+    record2.put(defaultDeleteField, false);\n+    record2.put(deleteField, true);", "originalCommit": "8242cad9ee116261546bd067820630a3ea581df1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzNTk3OQ==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463935979", "bodyText": "The same as above.", "author": "shenh062326", "createdAt": "2020-08-01T07:47:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NjQ3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9d8cceff60a7897df5d40a534680ed651f194e19", "chunk": "diff --git a/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java b/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\nindex 887c09072..228b211c8 100644\n--- a/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\n+++ b/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\n\n@@ -57,15 +57,15 @@ public class TestOverwriteWithLatestAvroPayload {\n     record1.put(\"id\", \"1\");\n     record1.put(\"partition\", \"partition0\");\n     record1.put(\"ts\", 0L);\n-    record1.put(defaultDeleteField, false);\n-    record1.put(deleteField, true);\n+    record1.put(defaultDeleteMarkerField, false);\n+    record1.put(deleteMarkerField, true);\n \n     GenericRecord record2 = new GenericData.Record(schema);\n     record2.put(\"id\", \"2\");\n     record2.put(\"partition\", \"partition1\");\n     record2.put(\"ts\", 1L);\n-    record2.put(defaultDeleteField, false);\n-    record2.put(deleteField, true);\n+    record2.put(defaultDeleteMarkerField, false);\n+    record2.put(deleteMarkerField, true);\n \n     OverwriteWithLatestAvroPayload payload1 = new OverwriteWithLatestAvroPayload(record1, 1);\n     OverwriteWithLatestAvroPayload payload2 = new OverwriteWithLatestAvroPayload(record2, 2);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0Nzc1Mg==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463547752", "bodyText": "can we also fix lines 70 and 71. While creating the OverwriteWithLatestAvroPayload, pass in the delete field marker. Again, can we test for both default and user defined. So, since these are active field, existing assertions should work.", "author": "nsivabalan", "createdAt": "2020-07-31T11:04:29Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -80,13 +85,16 @@ public void testDeletedRecord() throws IOException {\n     record1.put(\"id\", \"1\");\n     record1.put(\"partition\", \"partition0\");\n     record1.put(\"ts\", 0L);\n-    record1.put(\"_hoodie_is_deleted\", false);\n+    record1.put(defaultDeleteField, false);", "originalCommit": "8242cad9ee116261546bd067820630a3ea581df1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d8cceff60a7897df5d40a534680ed651f194e19", "chunk": "diff --git a/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java b/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\nindex 887c09072..228b211c8 100644\n--- a/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\n+++ b/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\n\n@@ -85,19 +85,27 @@ public class TestOverwriteWithLatestAvroPayload {\n     record1.put(\"id\", \"1\");\n     record1.put(\"partition\", \"partition0\");\n     record1.put(\"ts\", 0L);\n-    record1.put(defaultDeleteField, false);\n-    record1.put(deleteField, false);\n+    record1.put(defaultDeleteMarkerField, false);\n+    record1.put(deleteMarkerField, false);\n \n-    // test defaultDeleteField\n+    // test defaultDeleteMarkerField\n     GenericRecord delRecord1 = new GenericData.Record(schema);\n     delRecord1.put(\"id\", \"2\");\n     delRecord1.put(\"partition\", \"partition1\");\n     delRecord1.put(\"ts\", 1L);\n-    delRecord1.put(defaultDeleteField, true);\n-    delRecord1.put(deleteField, true);\n+    delRecord1.put(defaultDeleteMarkerField, true);\n+    delRecord1.put(deleteMarkerField, true);\n+    testDeletedRecord(record1, delRecord1, defaultDeleteMarkerField);\n \n-    OverwriteWithLatestAvroPayload payload1 = new OverwriteWithLatestAvroPayload(record1, 1);\n-    OverwriteWithLatestAvroPayload payload2 = new OverwriteWithLatestAvroPayload(delRecord1, 2);\n+    // test userDefinedDeleteMarkerField\n+    testDeletedRecord(record1, delRecord1, deleteMarkerField);\n+  }\n+\n+  private void testDeletedRecord(GenericRecord record1, GenericRecord delRecord1, String field) throws IOException {\n+    OverwriteWithLatestAvroPayload payload1 = new OverwriteWithLatestAvroPayload(\n+        record1, 1, field);\n+    OverwriteWithLatestAvroPayload payload2 = new OverwriteWithLatestAvroPayload(\n+        delRecord1, 2, field);\n     assertEquals(payload1.preCombine(payload2), payload2);\n     assertEquals(payload2.preCombine(payload1), payload2);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0ODAzMw==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463548033", "bodyText": "generateGenericRecords.", "author": "nsivabalan", "createdAt": "2020-07-31T11:05:08Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestDataGenerator.java", "diffHunk": "@@ -177,6 +178,18 @@ public RawTripTestPayload generateRandomValueAsPerSchema(String schemaStr, Hoodi\n     return null;\n   }\n \n+  public static List<GenericRecord> genericRecords(int n, boolean isDeleteRecord, int instantTime) {", "originalCommit": "8242cad9ee116261546bd067820630a3ea581df1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d8cceff60a7897df5d40a534680ed651f194e19", "chunk": "diff --git a/hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestDataGenerator.java b/hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestDataGenerator.java\nindex 5d6c36d94..841a74afd 100644\n--- a/hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestDataGenerator.java\n+++ b/hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestDataGenerator.java\n\n@@ -178,7 +178,7 @@ public class HoodieTestDataGenerator {\n     return null;\n   }\n \n-  public static List<GenericRecord> genericRecords(int n, boolean isDeleteRecord, int instantTime) {\n+  public static List<GenericRecord> generateGenericRecords(int n, boolean isDeleteRecord, int instantTime) {\n     return IntStream.range(0, n).boxed().map(i -> {\n       String partitionPath = DEFAULT_FIRST_PARTITION_PATH;\n       HoodieKey key = new HoodieKey(\"id_\" + i, partitionPath);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0ODQzMg==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463548432", "bodyText": "deleteMarkerField", "author": "nsivabalan", "createdAt": "2020-07-31T11:06:10Z", "path": "hudi-spark/src/main/java/org/apache/hudi/DataSourceUtils.java", "diffHunk": "@@ -215,11 +216,20 @@ public static HoodieDateTimeParser createDateTimeParser(TypedProperties props, S\n   /**\n    * Create a payload class via reflection, passing in an ordering/precombine value.\n    */\n-  public static HoodieRecordPayload createPayload(String payloadClass, GenericRecord record, Comparable orderingVal)\n-      throws IOException {\n+  public static HoodieRecordPayload createPayload(String payloadClass, GenericRecord record,\n+                                                  Comparable orderingVal,\n+                                                  String deleteField) throws IOException {", "originalCommit": "8242cad9ee116261546bd067820630a3ea581df1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d8cceff60a7897df5d40a534680ed651f194e19", "chunk": "diff --git a/hudi-spark/src/main/java/org/apache/hudi/DataSourceUtils.java b/hudi-spark/src/main/java/org/apache/hudi/DataSourceUtils.java\nindex 3ef13da9d..5740f4b3e 100644\n--- a/hudi-spark/src/main/java/org/apache/hudi/DataSourceUtils.java\n+++ b/hudi-spark/src/main/java/org/apache/hudi/DataSourceUtils.java\n\n@@ -218,13 +218,13 @@ public class DataSourceUtils {\n    */\n   public static HoodieRecordPayload createPayload(String payloadClass, GenericRecord record,\n                                                   Comparable orderingVal,\n-                                                  String deleteField) throws IOException {\n+                                                  String deleteMarkerField) throws IOException {\n     try {\n       HoodieRecordPayload payload = null;\n       if (payloadClass.equals(OverwriteWithLatestAvroPayload.class.getName())) {\n         payload = (OverwriteWithLatestAvroPayload) ReflectionUtils.loadClass(payloadClass,\n                 new Class<?>[]{GenericRecord.class, Comparable.class, String.class},\n-                record, orderingVal, deleteField);\n+                record, orderingVal, deleteMarkerField);\n       } else {\n         payload = (HoodieRecordPayload) ReflectionUtils.loadClass(payloadClass,\n                 new Class<?>[]{GenericRecord.class, Comparable.class}, record, orderingVal);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0ODQ3OA==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463548478", "bodyText": "deleteMarkerField", "author": "nsivabalan", "createdAt": "2020-07-31T11:06:18Z", "path": "hudi-spark/src/main/java/org/apache/hudi/DataSourceUtils.java", "diffHunk": "@@ -275,8 +285,9 @@ public static HoodieWriteClient createHoodieClient(JavaSparkContext jssc, String\n   }\n \n   public static HoodieRecord createHoodieRecord(GenericRecord gr, Comparable orderingVal, HoodieKey hKey,\n-                                                String payloadClass) throws IOException {\n-    HoodieRecordPayload payload = DataSourceUtils.createPayload(payloadClass, gr, orderingVal);\n+                                                String payloadClass,\n+                                                String deleteField) throws IOException {", "originalCommit": "8242cad9ee116261546bd067820630a3ea581df1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d8cceff60a7897df5d40a534680ed651f194e19", "chunk": "diff --git a/hudi-spark/src/main/java/org/apache/hudi/DataSourceUtils.java b/hudi-spark/src/main/java/org/apache/hudi/DataSourceUtils.java\nindex 3ef13da9d..5740f4b3e 100644\n--- a/hudi-spark/src/main/java/org/apache/hudi/DataSourceUtils.java\n+++ b/hudi-spark/src/main/java/org/apache/hudi/DataSourceUtils.java\n\n@@ -286,8 +286,8 @@ public class DataSourceUtils {\n \n   public static HoodieRecord createHoodieRecord(GenericRecord gr, Comparable orderingVal, HoodieKey hKey,\n                                                 String payloadClass,\n-                                                String deleteField) throws IOException {\n-    HoodieRecordPayload payload = DataSourceUtils.createPayload(payloadClass, gr, orderingVal, deleteField);\n+                                                String deleteMarkerField) throws IOException {\n+    HoodieRecordPayload payload = DataSourceUtils.createPayload(payloadClass, gr, orderingVal, deleteMarkerField);\n     return new HoodieRecord<>(hKey, payload);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0ODk1Ng==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463548956", "bodyText": "deleteMarkerField", "author": "nsivabalan", "createdAt": "2020-07-31T11:07:35Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -337,9 +337,11 @@ private void refreshTimeline() throws IOException {\n     }\n \n     JavaRDD<GenericRecord> avroRDD = avroRDDOptional.get();\n+    String deleteField = props.getString(HoodieWriteConfig.DELETE_FIELD_PROP, HoodieWriteConfig.DEFAULT_DELETE_FIELD);", "originalCommit": "8242cad9ee116261546bd067820630a3ea581df1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d8cceff60a7897df5d40a534680ed651f194e19", "chunk": "diff --git a/hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java b/hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java\nindex 1ea758b6c..0db486e11 100644\n--- a/hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java\n+++ b/hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java\n\n@@ -337,11 +338,12 @@ public class DeltaSync implements Serializable {\n     }\n \n     JavaRDD<GenericRecord> avroRDD = avroRDDOptional.get();\n-    String deleteField = props.getString(HoodieWriteConfig.DELETE_FIELD_PROP, HoodieWriteConfig.DEFAULT_DELETE_FIELD);\n+    String deleteMakrerField = props.getString(HoodieWriteConfig.DELETE_MARKER_FIELD_PROP,\n+        HoodieWriteConfig.DEFAULT_DELETE_MARKER_FIELD);\n     JavaRDD<HoodieRecord> records = avroRDD.map(gr -> {\n       HoodieRecordPayload payload = DataSourceUtils.createPayload(cfg.payloadClassName, gr,\n           (Comparable) DataSourceUtils.getNestedFieldVal(gr, cfg.sourceOrderingField, false),\n-          deleteField);\n+          deleteMakrerField);\n       return new HoodieRecord<>(keyGenerator.getKey(gr), payload);\n     });\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0OTE5Mw==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463549193", "bodyText": "private", "author": "nsivabalan", "createdAt": "2020-07-31T11:08:16Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.functional;\n+\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.common.testutils.HoodieTestDataGenerator;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer;\n+import org.apache.hudi.utilities.sources.ParquetDFSSource;\n+import org.apache.hudi.utilities.testutils.UtilitiesTestBase;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+public class TestDeltaStreamerWithOverwriteLatestAvroPayload extends UtilitiesTestBase {\n+  private static String PARQUET_SOURCE_ROOT;\n+  private static final String PROPS_FILENAME_TEST_PARQUET = \"test-parquet-dfs-source.properties\";\n+\n+  @BeforeAll\n+  public static void initClass() throws Exception {\n+    UtilitiesTestBase.initClass(true);\n+    PARQUET_SOURCE_ROOT = dfsBasePath + \"/parquetFiles\";\n+\n+    // prepare the configs.\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/base.properties\", dfs, dfsBasePath + \"/base.properties\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/sql-transformer.properties\", dfs,\n+        dfsBasePath + \"/sql-transformer.properties\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source.avsc\", dfs, dfsBasePath + \"/source.avsc\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source-flattened.avsc\", dfs, dfsBasePath + \"/source-flattened.avsc\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target.avsc\", dfs, dfsBasePath + \"/target.avsc\");\n+  }\n+\n+  @Test\n+  public void testOverwriteLatestAvroPayload() throws Exception {\n+    // test defaultDeleteField\n+    this.testOverwriteLatestAvroPayload(null);\n+\n+    // test userDefinedDeleteField\n+    this.testOverwriteLatestAvroPayload(\"user_defined_delete_field\");\n+  }\n+\n+  public void testOverwriteLatestAvroPayload(String deleteMarkerField) throws Exception {", "originalCommit": "8242cad9ee116261546bd067820630a3ea581df1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d8cceff60a7897df5d40a534680ed651f194e19", "chunk": "diff --git a/hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java b/hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java\nindex d457f323b..4993ef829 100644\n--- a/hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java\n+++ b/hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java\n\n@@ -51,16 +51,16 @@ public class TestDeltaStreamerWithOverwriteLatestAvroPayload extends UtilitiesTe\n \n   @Test\n   public void testOverwriteLatestAvroPayload() throws Exception {\n-    // test defaultDeleteField\n+    // test defaultDeleteMarkerField\n     this.testOverwriteLatestAvroPayload(null);\n \n-    // test userDefinedDeleteField\n-    this.testOverwriteLatestAvroPayload(\"user_defined_delete_field\");\n+    // test userDefinedDeleteMarkerField\n+    this.testOverwriteLatestAvroPayload(\"user_defined_delete_marker_field\");\n   }\n \n-  public void testOverwriteLatestAvroPayload(String deleteMarkerField) throws Exception {\n+  private void testOverwriteLatestAvroPayload(String deleteMarkerField) throws Exception {\n     String path = PARQUET_SOURCE_ROOT + \"/1.parquet\";\n-    List<GenericRecord> records = HoodieTestDataGenerator.genericRecords(5, false, 0);\n+    List<GenericRecord> records = HoodieTestDataGenerator.generateGenericRecords(5, false, 0);\n     Helpers.saveParquetToDFS(records, new Path(path));\n \n     TypedProperties parquetProps = new TypedProperties();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0OTk0Mw==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463549943", "bodyText": "is it possible to verify the records for equality ?", "author": "nsivabalan", "createdAt": "2020-07-31T11:10:18Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.functional;\n+\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.common.testutils.HoodieTestDataGenerator;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer;\n+import org.apache.hudi.utilities.sources.ParquetDFSSource;\n+import org.apache.hudi.utilities.testutils.UtilitiesTestBase;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+public class TestDeltaStreamerWithOverwriteLatestAvroPayload extends UtilitiesTestBase {\n+  private static String PARQUET_SOURCE_ROOT;\n+  private static final String PROPS_FILENAME_TEST_PARQUET = \"test-parquet-dfs-source.properties\";\n+\n+  @BeforeAll\n+  public static void initClass() throws Exception {\n+    UtilitiesTestBase.initClass(true);\n+    PARQUET_SOURCE_ROOT = dfsBasePath + \"/parquetFiles\";\n+\n+    // prepare the configs.\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/base.properties\", dfs, dfsBasePath + \"/base.properties\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/sql-transformer.properties\", dfs,\n+        dfsBasePath + \"/sql-transformer.properties\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source.avsc\", dfs, dfsBasePath + \"/source.avsc\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source-flattened.avsc\", dfs, dfsBasePath + \"/source-flattened.avsc\");\n+    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target.avsc\", dfs, dfsBasePath + \"/target.avsc\");\n+  }\n+\n+  @Test\n+  public void testOverwriteLatestAvroPayload() throws Exception {\n+    // test defaultDeleteField\n+    this.testOverwriteLatestAvroPayload(null);\n+\n+    // test userDefinedDeleteField\n+    this.testOverwriteLatestAvroPayload(\"user_defined_delete_field\");\n+  }\n+\n+  public void testOverwriteLatestAvroPayload(String deleteMarkerField) throws Exception {\n+    String path = PARQUET_SOURCE_ROOT + \"/1.parquet\";\n+    List<GenericRecord> records = HoodieTestDataGenerator.genericRecords(5, false, 0);\n+    Helpers.saveParquetToDFS(records, new Path(path));\n+\n+    TypedProperties parquetProps = new TypedProperties();\n+    parquetProps.setProperty(\"include\", \"base.properties\");\n+    parquetProps.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n+    parquetProps.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n+    parquetProps.setProperty(\"hoodie.deltastreamer.source.dfs.root\", PARQUET_SOURCE_ROOT);\n+    if (deleteMarkerField != null) {\n+      parquetProps.setProperty(HoodieWriteConfig.DELETE_FIELD_PROP, deleteMarkerField);\n+    }\n+    Helpers.savePropsToDFS(parquetProps, dfs, dfsBasePath + \"/\" + PROPS_FILENAME_TEST_PARQUET);\n+\n+    String tableBasePath = dfsBasePath + \"/test_overwrite_lastest_avro_payload_table\";\n+\n+    HoodieDeltaStreamer deltaStreamer = new HoodieDeltaStreamer(\n+        TestHoodieDeltaStreamer.TestHelpers.makeConfig(tableBasePath, HoodieDeltaStreamer.Operation.INSERT, ParquetDFSSource.class.getName(),\n+            null, PROPS_FILENAME_TEST_PARQUET, false,\n+            false, 100000, false, null, null, \"timestamp\"), jsc);\n+    deltaStreamer.sync();\n+    TestHoodieDeltaStreamer.TestHelpers.assertRecordCount(5, tableBasePath + \"/*/*.parquet\", sqlContext);\n+\n+    String path2 = PARQUET_SOURCE_ROOT + \"/2.parquet\";\n+    List<GenericRecord> records2 = HoodieTestDataGenerator.genericRecords(2, true, 1);\n+    Helpers.saveParquetToDFS(records2, new Path(path2));\n+    deltaStreamer.sync();\n+\n+    TestHoodieDeltaStreamer.TestHelpers.assertRecordCount(3, tableBasePath + \"/*/*.parquet\", sqlContext);", "originalCommit": "8242cad9ee116261546bd067820630a3ea581df1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk0MDU4Nw==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463940587", "bodyText": "Since the returned Spark Row is not easy to compare with GenericRecord, it is easier for us to compare only the key.", "author": "shenh062326", "createdAt": "2020-08-01T08:45:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0OTk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9d8cceff60a7897df5d40a534680ed651f194e19", "chunk": "diff --git a/hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java b/hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java\nindex d457f323b..4993ef829 100644\n--- a/hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java\n+++ b/hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestDeltaStreamerWithOverwriteLatestAvroPayload.java\n\n@@ -51,16 +51,16 @@ public class TestDeltaStreamerWithOverwriteLatestAvroPayload extends UtilitiesTe\n \n   @Test\n   public void testOverwriteLatestAvroPayload() throws Exception {\n-    // test defaultDeleteField\n+    // test defaultDeleteMarkerField\n     this.testOverwriteLatestAvroPayload(null);\n \n-    // test userDefinedDeleteField\n-    this.testOverwriteLatestAvroPayload(\"user_defined_delete_field\");\n+    // test userDefinedDeleteMarkerField\n+    this.testOverwriteLatestAvroPayload(\"user_defined_delete_marker_field\");\n   }\n \n-  public void testOverwriteLatestAvroPayload(String deleteMarkerField) throws Exception {\n+  private void testOverwriteLatestAvroPayload(String deleteMarkerField) throws Exception {\n     String path = PARQUET_SOURCE_ROOT + \"/1.parquet\";\n-    List<GenericRecord> records = HoodieTestDataGenerator.genericRecords(5, false, 0);\n+    List<GenericRecord> records = HoodieTestDataGenerator.generateGenericRecords(5, false, 0);\n     Helpers.saveParquetToDFS(records, new Path(path));\n \n     TypedProperties parquetProps = new TypedProperties();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MDU3Nw==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463550577", "bodyText": "we could move this to a private method and so lines 99 tp 108 and 110 to 120 can re-use code", "author": "nsivabalan", "createdAt": "2020-07-31T11:12:04Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -98,6 +106,18 @@ public void testDeletedRecord() throws IOException {\n \n     assertEquals(payload1.combineAndGetUpdateValue(delRecord1, schema).get(), record1);\n     assertFalse(payload2.combineAndGetUpdateValue(record1, schema).isPresent());\n+\n+    // test userDefinedDeleteField", "originalCommit": "8242cad9ee116261546bd067820630a3ea581df1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d8cceff60a7897df5d40a534680ed651f194e19", "chunk": "diff --git a/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java b/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\nindex 887c09072..228b211c8 100644\n--- a/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\n+++ b/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\n\n@@ -106,18 +114,5 @@ public class TestOverwriteWithLatestAvroPayload {\n \n     assertEquals(payload1.combineAndGetUpdateValue(delRecord1, schema).get(), record1);\n     assertFalse(payload2.combineAndGetUpdateValue(record1, schema).isPresent());\n-\n-    // test userDefinedDeleteField\n-    OverwriteWithLatestAvroPayload payload3 = new OverwriteWithLatestAvroPayload(record1, 1, deleteField);\n-    OverwriteWithLatestAvroPayload payload4 = new OverwriteWithLatestAvroPayload(delRecord1, 2, deleteField);\n-    assertEquals(payload3.preCombine(payload4), payload4);\n-    assertEquals(payload4.preCombine(payload3), payload4);\n-\n-    assertEquals(record1, payload3.getInsertValue(schema).get());\n-    assertFalse(payload4.getInsertValue(schema).isPresent());\n-\n-    assertEquals(payload3.combineAndGetUpdateValue(delRecord1, schema).get(), record1);\n-    assertFalse(payload4.combineAndGetUpdateValue(record1, schema).isPresent());\n   }\n-\n }\n"}}, {"oid": "9d8cceff60a7897df5d40a534680ed651f194e19", "url": "https://github.com/apache/hudi/commit/9d8cceff60a7897df5d40a534680ed651f194e19", "message": "[HUDI-1054] Several performance fixes during finalizing writes (#1768)\n\nCo-authored-by: Udit Mehrotra <uditme@amazon.com>", "committedDate": "2020-08-01T08:09:51Z", "type": "forcePushed"}, {"oid": "57a2d7a6ba84d227302152a819a076cf4ac68f85", "url": "https://github.com/apache/hudi/commit/57a2d7a6ba84d227302152a819a076cf4ac68f85", "message": "[HUDI-1054] Several performance fixes during finalizing writes (#1768)\n\nCo-authored-by: Udit Mehrotra <uditme@amazon.com>", "committedDate": "2020-08-01T08:46:19Z", "type": "forcePushed"}, {"oid": "242c97994194b666c4ed5437ca97a04097cf24d2", "url": "https://github.com/apache/hudi/commit/242c97994194b666c4ed5437ca97a04097cf24d2", "message": "[HUDI-1054] Several performance fixes during finalizing writes (#1768)\n\nCo-authored-by: Udit Mehrotra <uditme@amazon.com>", "committedDate": "2020-08-01T12:56:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3OTE5MQ==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463979191", "bodyText": "sorry, why making these changes in this PR ? This PR is meant for delete marker field. are these changes related to user defined delete marker field ?", "author": "nsivabalan", "createdAt": "2020-08-01T16:45:56Z", "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieTimelineArchiveLog.java", "diffHunk": "@@ -267,15 +268,15 @@ private boolean deleteAllInstantsOlderorEqualsInAuxMetaFolder(HoodieInstant thre\n     return success;\n   }\n \n-  public void archive(List<HoodieInstant> instants) throws HoodieCommitException {\n+  public void archive(JavaSparkContext jsc, List<HoodieInstant> instants) throws HoodieCommitException {\n     try {\n       HoodieTimeline commitTimeline = metaClient.getActiveTimeline().getAllCommitsTimeline().filterCompletedInstants();\n       Schema wrapperSchema = HoodieArchivedMetaEntry.getClassSchema();\n       LOG.info(\"Wrapper schema \" + wrapperSchema.toString());\n       List<IndexedRecord> records = new ArrayList<>();\n       for (HoodieInstant hoodieInstant : instants) {\n         try {\n-          deleteAnyLeftOverMarkerFiles(hoodieInstant);\n+          deleteAnyLeftOverMarkerFiles(jsc, hoodieInstant);", "originalCommit": "242c97994194b666c4ed5437ca97a04097cf24d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxMDcyNA==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r464010724", "bodyText": "sorry, It does not belong to this pull request, I will remove it.", "author": "shenh062326", "createdAt": "2020-08-01T23:33:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3OTE5MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3OTQ5Mg==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r463979492", "bodyText": "actually we could test this way. not sure if you already do that.\nset default marker field value to true and user defined to false. If OverwriteWithLatestAvro is instantiated w/o any marker fields, the record should be deleted. If OverwriteWithLatestAvro is instantiated w/ user defined marker field, the record should be considered active. Vice versa as well. All tests in this class could be done this way to ensure that the other column is treated as yet another user's data column and hoodie does not care about it.", "author": "nsivabalan", "createdAt": "2020-08-01T16:49:48Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -54,13 +57,15 @@ public void testActiveRecords() throws IOException {\n     record1.put(\"id\", \"1\");\n     record1.put(\"partition\", \"partition0\");\n     record1.put(\"ts\", 0L);\n-    record1.put(\"_hoodie_is_deleted\", false);\n+    record1.put(defaultDeleteMarkerField, false);", "originalCommit": "242c97994194b666c4ed5437ca97a04097cf24d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxMjQ0NQ==", "url": "https://github.com/apache/hudi/pull/1819#discussion_r464012445", "bodyText": "I will fix the comment.", "author": "shenh062326", "createdAt": "2020-08-01T23:59:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3OTQ5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "d6048093ce4979eb492251d47499c737acb156fa", "chunk": "diff --git a/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java b/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\nindex 228b211c8..e2123672b 100644\n--- a/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\n+++ b/hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java\n\n@@ -52,23 +52,50 @@ public class TestOverwriteWithLatestAvroPayload {\n   }\n \n   @Test\n-  public void testActiveRecords() throws IOException {\n+  public void testOverwriteWithLatestAvroPayload() throws IOException {\n     GenericRecord record1 = new GenericData.Record(schema);\n     record1.put(\"id\", \"1\");\n     record1.put(\"partition\", \"partition0\");\n     record1.put(\"ts\", 0L);\n     record1.put(defaultDeleteMarkerField, false);\n-    record1.put(deleteMarkerField, true);\n+    record1.put(deleteMarkerField, false);\n \n+    // test1: set default marker field value to true and user defined to false\n     GenericRecord record2 = new GenericData.Record(schema);\n     record2.put(\"id\", \"2\");\n     record2.put(\"partition\", \"partition1\");\n     record2.put(\"ts\", 1L);\n-    record2.put(defaultDeleteMarkerField, false);\n-    record2.put(deleteMarkerField, true);\n+    record2.put(defaultDeleteMarkerField, true);\n+    record2.put(deleteMarkerField, false);\n+\n+    // set to user defined marker field with false, the record should be considered active.\n+    assertActiveRecord(record1, record2, deleteMarkerField);\n+\n+    // set to default marker field with true, the record should be considered delete.\n+    assertDeletedRecord(record1, record2, defaultDeleteMarkerField);\n+\n+    // test2: set default marker field value to false and user defined to true\n+    GenericRecord record3 = new GenericData.Record(schema);\n+    record3.put(\"id\", \"2\");\n+    record3.put(\"partition\", \"partition1\");\n+    record3.put(\"ts\", 1L);\n+    record3.put(defaultDeleteMarkerField, false);\n+    record3.put(deleteMarkerField, true);\n+\n+    // set to user defined marker field with true, the record should be considered delete.\n+    assertDeletedRecord(record1, record3, deleteMarkerField);\n+\n+    // set to default marker field with false, the record should be considered active.\n+    assertActiveRecord(record1, record3, defaultDeleteMarkerField);\n+  }\n+\n+  private void assertActiveRecord(GenericRecord record1,\n+                                  GenericRecord record2, String field) throws IOException {\n+    OverwriteWithLatestAvroPayload payload1 = new OverwriteWithLatestAvroPayload(\n+        record1, 1, field);\n+    OverwriteWithLatestAvroPayload payload2 = new OverwriteWithLatestAvroPayload(\n+        record2, 2, field);\n \n-    OverwriteWithLatestAvroPayload payload1 = new OverwriteWithLatestAvroPayload(record1, 1);\n-    OverwriteWithLatestAvroPayload payload2 = new OverwriteWithLatestAvroPayload(record2, 2);\n     assertEquals(payload1.preCombine(payload2), payload2);\n     assertEquals(payload2.preCombine(payload1), payload2);\n \n"}}, {"oid": "d6048093ce4979eb492251d47499c737acb156fa", "url": "https://github.com/apache/hudi/commit/d6048093ce4979eb492251d47499c737acb156fa", "message": "[HUDI-1058] Make delete marker configurable", "committedDate": "2020-08-01T23:58:20Z", "type": "commit"}, {"oid": "d6048093ce4979eb492251d47499c737acb156fa", "url": "https://github.com/apache/hudi/commit/d6048093ce4979eb492251d47499c737acb156fa", "message": "[HUDI-1058] Make delete marker configurable", "committedDate": "2020-08-01T23:58:20Z", "type": "forcePushed"}]}