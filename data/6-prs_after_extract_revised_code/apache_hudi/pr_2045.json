{"pr_number": 2045, "pr_title": "[HUDI-1147] Modify GenericRecordFullPayloadGenerator to generate vali\u2026", "pr_createdAt": "2020-08-27T00:15:15Z", "pr_url": "https://github.com/apache/hudi/pull/2045", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MTYxOA==", "url": "https://github.com/apache/hudi/pull/2045#discussion_r487451618", "bodyText": "could you revert these diffs please? seems unnecessary changes", "author": "xushiyan", "createdAt": "2020-09-12T21:43:24Z", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/DeltaGenerator.java", "diffHunk": "@@ -93,14 +93,15 @@ public DeltaGenerator(DeltaConfig deltaOutputConfig, JavaSparkContext jsc, Spark\n   }\n \n   public JavaRDD<GenericRecord> generateInserts(Config operation) {\n-    long recordsPerPartition = operation.getNumRecordsInsert();\n     int numPartitions = operation.getNumInsertPartitions();\n+    long recordsPerPartition = operation.getNumRecordsInsert();\n     int minPayloadSize = operation.getRecordSize();\n     JavaRDD<GenericRecord> inputBatch = jsc.parallelize(Collections.EMPTY_LIST)\n         .repartition(operation.getNumInsertPartitions()).mapPartitions(p -> {\n           return new LazyRecordGeneratorIterator(new FlexibleSchemaRecordGenerationIterator(recordsPerPartition,\n             minPayloadSize, schemaStr, partitionPathFieldNames, numPartitions));\n-        });\n+\n+    });", "originalCommit": "666d71d5f06719e167d8bc1ec829771ae5929985", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bcd77938c1f1a1c531a04e8cdbace92f2d3c79c", "chunk": "diff --git a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/DeltaGenerator.java b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/DeltaGenerator.java\nindex 7f77bb8914..30b2d6ce0d 100644\n--- a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/DeltaGenerator.java\n+++ b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/DeltaGenerator.java\n\n@@ -96,12 +131,21 @@ public class DeltaGenerator implements Serializable {\n     int numPartitions = operation.getNumInsertPartitions();\n     long recordsPerPartition = operation.getNumRecordsInsert();\n     int minPayloadSize = operation.getRecordSize();\n-    JavaRDD<GenericRecord> inputBatch = jsc.parallelize(Collections.EMPTY_LIST)\n-        .repartition(operation.getNumInsertPartitions()).mapPartitions(p -> {\n+    int startPartition = operation.getStartPartition();\n+\n+    // Each spark partition below will generate records for a single partition given by the integer index.\n+    List<Integer> partitionIndexes = IntStream.rangeClosed(0 + startPartition, numPartitions + startPartition)\n+        .boxed().collect(Collectors.toList());\n+\n+    JavaRDD<GenericRecord> inputBatch = jsc.parallelize(partitionIndexes, numPartitions)\n+        .mapPartitionsWithIndex((index, p) -> {\n           return new LazyRecordGeneratorIterator(new FlexibleSchemaRecordGenerationIterator(recordsPerPartition,\n-            minPayloadSize, schemaStr, partitionPathFieldNames, numPartitions));\n+              minPayloadSize, schemaStr, partitionPathFieldNames, numPartitions));\n+        }, true);\n \n-    });\n+    if (deltaOutputConfig.getInputParallelism() < numPartitions) {\n+      inputBatch = inputBatch.coalesce(deltaOutputConfig.getInputParallelism());\n+    }\n     return inputBatch;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MTgwMw==", "url": "https://github.com/apache/hudi/pull/2045#discussion_r487451803", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static Logger log = LoggerFactory.getLogger(GenericRecordFullPayloadGenerator.class);\n          \n          \n            \n              private static final Logger LOG = LoggerFactory.getLogger(GenericRecordFullPayloadGenerator.class);", "author": "xushiyan", "createdAt": "2020-09-12T21:46:00Z", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java", "diffHunk": "@@ -45,14 +45,16 @@\n  */\n public class GenericRecordFullPayloadGenerator implements Serializable {\n \n+  private static Logger log = LoggerFactory.getLogger(GenericRecordFullPayloadGenerator.class);", "originalCommit": "666d71d5f06719e167d8bc1ec829771ae5929985", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bcd77938c1f1a1c531a04e8cdbace92f2d3c79c", "chunk": "diff --git a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java\nindex 84d3ab90d2..816308822b 100644\n--- a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java\n+++ b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java\n\n@@ -26,33 +37,28 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Random;\n+import java.util.Set;\n import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n \n-import org.apache.avro.Schema;\n-import org.apache.avro.Schema.Type;\n-import org.apache.avro.generic.GenericData;\n-import org.apache.avro.generic.GenericData.Fixed;\n-import org.apache.avro.generic.GenericFixed;\n-import org.apache.avro.generic.GenericRecord;\n-import org.apache.hudi.common.util.collection.Pair;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n /**\n- * This is a GenericRecord payload generator that generates full generic records {@link GenericRecord}.\n- * Every field of a generic record created using this generator contains a random value.\n+ * This is a GenericRecord payload generator that generates full generic records {@link GenericRecord}. Every field of a generic record created using this generator contains a random value.\n  */\n public class GenericRecordFullPayloadGenerator implements Serializable {\n \n-  private static Logger log = LoggerFactory.getLogger(GenericRecordFullPayloadGenerator.class);\n+  private static Logger LOG = LoggerFactory.getLogger(GenericRecordFullPayloadGenerator.class);\n+\n   public static final int DEFAULT_PAYLOAD_SIZE = 1024 * 10; // 10 KB\n   public static final int DEFAULT_NUM_DATE_PARTITIONS = 50;\n+  public static final String DEFAULT_HOODIE_IS_DELETED_COL = \"_hoodie_is_deleted\";\n   protected final Random random = new Random();\n   // The source schema used to generate a payload\n   private final transient Schema baseSchema;\n   // Used to validate a generic record\n   private final transient GenericData genericData = new GenericData();\n+  // Number of extra entries to add in a complex/collection field to achieve the desired record size\n+  Map<String, Integer> extraEntriesMap = new HashMap<>();\n+\n   // The number of unique dates to create\n   private int numDatePartitions = DEFAULT_NUM_DATE_PARTITIONS;\n   // Number of more bytes to add based on the estimated full record payload size and min payload size\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MjE3Mg==", "url": "https://github.com/apache/hudi/pull/2045#discussion_r487452172", "bodyText": "can we change this to junit 5 APIs? also to reduce verbosity, could we static import the assertion functions?", "author": "xushiyan", "createdAt": "2020-09-12T21:50:57Z", "path": "hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/generator/TestGenericRecordPayloadGenerator.java", "diffHunk": "@@ -25,11 +25,13 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+import java.util.concurrent.TimeUnit;\n import java.util.stream.IntStream;\n import org.apache.avro.Schema;\n import org.apache.avro.generic.GenericRecord;\n import org.apache.hudi.avro.HoodieAvroUtils;\n import org.apache.hudi.utilities.testutils.UtilitiesTestBase;\n+import org.junit.Assert;", "originalCommit": "666d71d5f06719e167d8bc1ec829771ae5929985", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1OTg4Ng==", "url": "https://github.com/apache/hudi/pull/2045#discussion_r513659886", "bodyText": "+1", "author": "nsivabalan", "createdAt": "2020-10-28T18:09:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MjE3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8bcd77938c1f1a1c531a04e8cdbace92f2d3c79c", "chunk": "diff --git a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/generator/TestGenericRecordPayloadGenerator.java b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/generator/TestGenericRecordPayloadGenerator.java\nindex bdce719a17..eee570bfde 100644\n--- a/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/generator/TestGenericRecordPayloadGenerator.java\n+++ b/hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/generator/TestGenericRecordPayloadGenerator.java\n\n@@ -24,13 +24,16 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import java.util.concurrent.TimeUnit;\n import java.util.stream.IntStream;\n import org.apache.avro.Schema;\n import org.apache.avro.generic.GenericRecord;\n import org.apache.hudi.avro.HoodieAvroUtils;\n import org.apache.hudi.utilities.testutils.UtilitiesTestBase;\n+\n import org.junit.Assert;\n import org.junit.jupiter.api.Test;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MjM5OQ==", "url": "https://github.com/apache/hudi/pull/2045#discussion_r487452399", "bodyText": "looks like this.partitionPathFieldNames != null && this.partitionPathFieldNames.size() > 0 deserves to be a local boolean variable with a good name to improve readability.\nAlso can we avoid unnecessary this. references?", "author": "xushiyan", "createdAt": "2020-09-12T21:54:24Z", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/FlexibleSchemaRecordGenerationIterator.java", "diffHunk": "@@ -60,11 +60,16 @@ public boolean hasNext() {\n   public GenericRecord next() {\n     this.counter--;\n     if (lastRecord == null) {\n-      GenericRecord record = this.generator.getNewPayload();\n+      GenericRecord record = this.partitionPathFieldNames != null && this.partitionPathFieldNames.size() > 0\n+          ? this.generator.getNewPayloadWithTimestamp(this.partitionPathFieldNames.get(0))\n+          : this.generator.getNewPayload();\n       lastRecord = record;\n       return record;\n     } else {\n-      return this.generator.randomize(lastRecord, this.partitionPathFieldNames);\n+      return this.partitionPathFieldNames != null && this.partitionPathFieldNames.size() > 0\n+          ? this.generator.getUpdatePayloadWithTimestamp(lastRecord,\n+          this.partitionPathFieldNames, this.partitionPathFieldNames.get(0))\n+          : this.generator.getUpdatePayload(lastRecord, this.partitionPathFieldNames);", "originalCommit": "666d71d5f06719e167d8bc1ec829771ae5929985", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ2NTQ2OA==", "url": "https://github.com/apache/hudi/pull/2045#discussion_r487465468", "bodyText": "is it possible make sure partitionPathFieldNames not null so that we don't have to do null check here?", "author": "xushiyan", "createdAt": "2020-09-13T00:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MjM5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1ODIyMA==", "url": "https://github.com/apache/hudi/pull/2045#discussion_r513658220", "bodyText": "+1", "author": "nsivabalan", "createdAt": "2020-10-28T18:06:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MjM5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8bcd77938c1f1a1c531a04e8cdbace92f2d3c79c", "chunk": "diff --git a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/FlexibleSchemaRecordGenerationIterator.java b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/FlexibleSchemaRecordGenerationIterator.java\nindex 58009f3940..37f9682118 100644\n--- a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/FlexibleSchemaRecordGenerationIterator.java\n+++ b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/FlexibleSchemaRecordGenerationIterator.java\n\n@@ -61,14 +68,14 @@ public class FlexibleSchemaRecordGenerationIterator implements Iterator<GenericR\n     this.counter--;\n     if (lastRecord == null) {\n       GenericRecord record = this.partitionPathFieldNames != null && this.partitionPathFieldNames.size() > 0\n-          ? this.generator.getNewPayloadWithTimestamp(this.partitionPathFieldNames.get(0))\n+          ? this.generator.getNewPayloadWithTimestamp(firstPartitionPathField)\n           : this.generator.getNewPayload();\n       lastRecord = record;\n       return record;\n     } else {\n       return this.partitionPathFieldNames != null && this.partitionPathFieldNames.size() > 0\n           ? this.generator.getUpdatePayloadWithTimestamp(lastRecord,\n-          this.partitionPathFieldNames, this.partitionPathFieldNames.get(0))\n+          this.partitionPathFieldNames, firstPartitionPathField)\n           : this.generator.getUpdatePayload(lastRecord, this.partitionPathFieldNames);\n     }\n   }\n"}}, {"oid": "8bcd77938c1f1a1c531a04e8cdbace92f2d3c79c", "url": "https://github.com/apache/hudi/commit/8bcd77938c1f1a1c531a04e8cdbace92f2d3c79c", "message": "[HUDI-1147] Modify GenericRecordFullPayloadGenerator to generate valid timestamps", "committedDate": "2020-12-29T05:24:00Z", "type": "commit"}, {"oid": "739db6020422286786489c087517dd28f6b04974", "url": "https://github.com/apache/hudi/commit/739db6020422286786489c087517dd28f6b04974", "message": "merge conflicts", "committedDate": "2020-12-29T05:24:21Z", "type": "commit"}, {"oid": "27726a93e429b0c9cabd40e412102e2074390ed7", "url": "https://github.com/apache/hudi/commit/27726a93e429b0c9cabd40e412102e2074390ed7", "message": "Addressing comments", "committedDate": "2020-12-29T05:27:39Z", "type": "commit"}, {"oid": "27726a93e429b0c9cabd40e412102e2074390ed7", "url": "https://github.com/apache/hudi/commit/27726a93e429b0c9cabd40e412102e2074390ed7", "message": "Addressing comments", "committedDate": "2020-12-29T05:27:39Z", "type": "forcePushed"}, {"oid": "0eea61844aa2fe37ca9d8c316cb3bd358281cb78", "url": "https://github.com/apache/hudi/commit/0eea61844aa2fe37ca9d8c316cb3bd358281cb78", "message": "Removing unwanted vars", "committedDate": "2020-12-29T05:33:37Z", "type": "commit"}]}