{"pr_number": 1188, "pr_title": "[HUDI-502] provide a custom time zone definition for TimestampBasedKeyGenerator", "pr_createdAt": "2020-01-06T03:32:42Z", "pr_url": "https://github.com/apache/hudi/pull/1188", "timeline": [{"oid": "0dfd5007cdca4df03fe3871e2cac6e4efb99ccc6", "url": "https://github.com/apache/hudi/commit/0dfd5007cdca4df03fe3871e2cac6e4efb99ccc6", "message": "provide a custom time zone definition", "committedDate": "2020-01-06T03:28:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4Njk0MA==", "url": "https://github.com/apache/hudi/pull/1188#discussion_r363486940", "bodyText": "any reason why this is not final too?", "author": "vinothchandar", "createdAt": "2020-01-06T21:16:56Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/keygen/TimestampBasedKeyGenerator.java", "diffHunk": "@@ -51,6 +51,8 @@\n \n   private final String outputDateFormat;\n \n+  private TimeZone timeZone;", "originalCommit": "0dfd5007cdca4df03fe3871e2cac6e4efb99ccc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2ODc2Ng==", "url": "https://github.com/apache/hudi/pull/1188#discussion_r363568766", "bodyText": "fix NPE, thank's viewed", "author": "OpenOpened", "createdAt": "2020-01-07T02:28:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4Njk0MA=="}], "type": "inlineReview", "revised_code": {"commit": "9236dff0298ba8d7f530273903578d6d7a9a8639", "chunk": "diff --git a/hudi-utilities/src/main/java/org/apache/hudi/utilities/keygen/TimestampBasedKeyGenerator.java b/hudi-utilities/src/main/java/org/apache/hudi/utilities/keygen/TimestampBasedKeyGenerator.java\nindex df09535125..f62261ead0 100644\n--- a/hudi-utilities/src/main/java/org/apache/hudi/utilities/keygen/TimestampBasedKeyGenerator.java\n+++ b/hudi-utilities/src/main/java/org/apache/hudi/utilities/keygen/TimestampBasedKeyGenerator.java\n\n@@ -51,7 +51,7 @@ public class TimestampBasedKeyGenerator extends SimpleKeyGenerator {\n \n   private final String outputDateFormat;\n \n-  private TimeZone timeZone;\n+  private final TimeZone timeZone;\n \n   /**\n    * Supported configs.\n"}}, {"oid": "a8e702167f05d9a65efd280010d556c3a5816ad0", "url": "https://github.com/apache/hudi/commit/a8e702167f05d9a65efd280010d556c3a5816ad0", "message": "fix NPE", "committedDate": "2020-01-07T02:21:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NzUwMQ==", "url": "https://github.com/apache/hudi/pull/1188#discussion_r363577501", "bodyText": "timeZone has been init. I don't think we need to do this again.", "author": "sev7e0", "createdAt": "2020-01-07T03:21:25Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/keygen/TimestampBasedKeyGenerator.java", "diffHunk": "@@ -70,20 +74,22 @@ public TimestampBasedKeyGenerator(TypedProperties config) {\n         Arrays.asList(Config.TIMESTAMP_TYPE_FIELD_PROP, Config.TIMESTAMP_OUTPUT_DATE_FORMAT_PROP));\n     this.timestampType = TimestampType.valueOf(config.getString(Config.TIMESTAMP_TYPE_FIELD_PROP));\n     this.outputDateFormat = config.getString(Config.TIMESTAMP_OUTPUT_DATE_FORMAT_PROP);\n+    this.timeZone = TimeZone.getTimeZone(config.getString(Config.TIMESTAMP_TIMEZONE_FORMAT_PROP, \"GMT\"));\n \n     if (timestampType == TimestampType.DATE_STRING || timestampType == TimestampType.MIXED) {\n       DataSourceUtils.checkRequiredProperties(config,\n           Collections.singletonList(Config.TIMESTAMP_INPUT_DATE_FORMAT_PROP));\n       this.inputDateFormat = new SimpleDateFormat(config.getString(Config.TIMESTAMP_INPUT_DATE_FORMAT_PROP));\n-      this.inputDateFormat.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+      this.timeZone = TimeZone.getTimeZone(config.getString(Config.TIMESTAMP_TIMEZONE_FORMAT_PROP, \"GMT\"));", "originalCommit": "a8e702167f05d9a65efd280010d556c3a5816ad0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9236dff0298ba8d7f530273903578d6d7a9a8639", "chunk": "diff --git a/hudi-utilities/src/main/java/org/apache/hudi/utilities/keygen/TimestampBasedKeyGenerator.java b/hudi-utilities/src/main/java/org/apache/hudi/utilities/keygen/TimestampBasedKeyGenerator.java\nindex f8e8fc2f4b..f62261ead0 100644\n--- a/hudi-utilities/src/main/java/org/apache/hudi/utilities/keygen/TimestampBasedKeyGenerator.java\n+++ b/hudi-utilities/src/main/java/org/apache/hudi/utilities/keygen/TimestampBasedKeyGenerator.java\n\n@@ -80,7 +80,6 @@ public class TimestampBasedKeyGenerator extends SimpleKeyGenerator {\n       DataSourceUtils.checkRequiredProperties(config,\n           Collections.singletonList(Config.TIMESTAMP_INPUT_DATE_FORMAT_PROP));\n       this.inputDateFormat = new SimpleDateFormat(config.getString(Config.TIMESTAMP_INPUT_DATE_FORMAT_PROP));\n-      this.timeZone = TimeZone.getTimeZone(config.getString(Config.TIMESTAMP_TIMEZONE_FORMAT_PROP, \"GMT\"));\n       this.inputDateFormat.setTimeZone(timeZone);\n     }\n   }\n"}}, {"oid": "9236dff0298ba8d7f530273903578d6d7a9a8639", "url": "https://github.com/apache/hudi/commit/9236dff0298ba8d7f530273903578d6d7a9a8639", "message": "fix NPE", "committedDate": "2020-01-07T03:24:42Z", "type": "commit"}, {"oid": "59d0440fe42fa28cf3933a7ed39053683e5f1e1a", "url": "https://github.com/apache/hudi/commit/59d0440fe42fa28cf3933a7ed39053683e5f1e1a", "message": "add test unit", "committedDate": "2020-01-07T03:28:19Z", "type": "commit"}, {"oid": "963ef18fbdeb029125a41ed6fcef315d33977a40", "url": "https://github.com/apache/hudi/commit/963ef18fbdeb029125a41ed6fcef315d33977a40", "message": "fix check style", "committedDate": "2020-01-07T06:22:24Z", "type": "commit"}, {"oid": "1e555c818b342ac66f806d2ae5da87cee9436a31", "url": "https://github.com/apache/hudi/commit/1e555c818b342ac66f806d2ae5da87cee9436a31", "message": "add apache license", "committedDate": "2020-01-07T08:01:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyMjU4OA==", "url": "https://github.com/apache/hudi/pull/1188#discussion_r364722588", "bodyText": "would these three methods simplify to just one method?", "author": "leesf", "createdAt": "2020-01-09T12:54:32Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestTimestampBasedKeyGenerator.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.SchemaTestUtil;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.utilities.keygen.TimestampBasedKeyGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestTimestampBasedKeyGenerator {\n+  private Schema schema = SchemaTestUtil.getTimestampEvolvedSchema();\n+  private GenericRecord baseRecord = null;\n+\n+  public TestTimestampBasedKeyGenerator() throws IOException {\n+  }\n+\n+  @Before\n+  public void initialize() throws IOException {\n+    baseRecord = SchemaTestUtil\n+        .generateAvroRecordFromJson(schema, 1, \"001\", \"f1\");\n+  }\n+\n+  private TypedProperties getKeyConfig(String recordKeyFieldName, String partitionPathField, String hiveStylePartitioning) {\n+    TypedProperties props = new TypedProperties();\n+    props.setProperty(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY(), recordKeyFieldName);\n+    props.setProperty(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), partitionPathField);\n+    props.setProperty(DataSourceWriteOptions.HIVE_STYLE_PARTITIONING_OPT_KEY(), hiveStylePartitioning);\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"EPOCHMILLISECONDS\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.output.dateformat\", \"yyyy-MM-dd hh\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n+    return props;\n+  }\n+\n+  private TypedProperties getKeyConfig2(String recordKeyFieldName, String partitionPathField, String hiveStylePartitioning) {\n+    TypedProperties props = getKeyConfig(recordKeyFieldName, partitionPathField, hiveStylePartitioning);\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT\");\n+    return props;\n+  }\n+\n+  private TypedProperties getKeyConfig3(String recordKeyFieldName, String partitionPathField, String hiveStylePartitioning) {\n+    TypedProperties props = getKeyConfig(recordKeyFieldName, partitionPathField, hiveStylePartitioning);\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"DATE_STRING\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n+    return props;\n+  }", "originalCommit": "1e555c818b342ac66f806d2ae5da87cee9436a31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA1Mjg5Ng==", "url": "https://github.com/apache/hudi/pull/1188#discussion_r365052896", "bodyText": "thank's reply, i will fix it.", "author": "OpenOpened", "createdAt": "2020-01-10T02:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyMjU4OA=="}], "type": "inlineReview", "revised_code": {"commit": "c1640c4d246fc42cf24deb8f2974725264c5da15", "chunk": "diff --git a/hudi-utilities/src/test/java/org/apache/hudi/utilities/TestTimestampBasedKeyGenerator.java b/hudi-utilities/src/test/java/org/apache/hudi/utilities/TestTimestampBasedKeyGenerator.java\nindex d84a20e741..ad03af8092 100644\n--- a/hudi-utilities/src/test/java/org/apache/hudi/utilities/TestTimestampBasedKeyGenerator.java\n+++ b/hudi-utilities/src/test/java/org/apache/hudi/utilities/TestTimestampBasedKeyGenerator.java\n\n@@ -45,7 +45,7 @@ public class TestTimestampBasedKeyGenerator {\n         .generateAvroRecordFromJson(schema, 1, \"001\", \"f1\");\n   }\n \n-  private TypedProperties getKeyConfig(String recordKeyFieldName, String partitionPathField, String hiveStylePartitioning) {\n+  private TypedProperties getBaseKeyConfig(String recordKeyFieldName, String partitionPathField, String hiveStylePartitioning) {\n     TypedProperties props = new TypedProperties();\n     props.setProperty(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY(), recordKeyFieldName);\n     props.setProperty(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), partitionPathField);\n"}}, {"oid": "c1640c4d246fc42cf24deb8f2974725264c5da15", "url": "https://github.com/apache/hudi/commit/c1640c4d246fc42cf24deb8f2974725264c5da15", "message": "combine the redundant methods", "committedDate": "2020-01-10T02:27:48Z", "type": "commit"}, {"oid": "67277a0ab8b9cf66c547e5363daef7766aed74ee", "url": "https://github.com/apache/hudi/commit/67277a0ab8b9cf66c547e5363daef7766aed74ee", "message": "a little comment", "committedDate": "2020-01-10T02:36:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE2NjQzNw==", "url": "https://github.com/apache/hudi/pull/1188#discussion_r365166437", "bodyText": "I think we would optimize the TestTimestampBasedKeyGenerator to the gist, WDYT?", "author": "leesf", "createdAt": "2020-01-10T10:23:55Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestTimestampBasedKeyGenerator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.DataSourceWriteOptions;\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.util.SchemaTestUtil;\n+import org.apache.hudi.common.util.TypedProperties;\n+import org.apache.hudi.utilities.keygen.TimestampBasedKeyGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestTimestampBasedKeyGenerator {\n+  private Schema schema = SchemaTestUtil.getTimestampEvolvedSchema();\n+  private GenericRecord baseRecord = null;\n+\n+  public TestTimestampBasedKeyGenerator() throws IOException {\n+  }\n+\n+  @Before\n+  public void initialize() throws IOException {\n+    baseRecord = SchemaTestUtil\n+        .generateAvroRecordFromJson(schema, 1, \"001\", \"f1\");\n+  }\n+\n+  private TypedProperties getBaseKeyConfig(String recordKeyFieldName, String partitionPathField, String hiveStylePartitioning) {\n+    TypedProperties props = new TypedProperties();\n+    props.setProperty(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY(), recordKeyFieldName);\n+    props.setProperty(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), partitionPathField);\n+    props.setProperty(DataSourceWriteOptions.HIVE_STYLE_PARTITIONING_OPT_KEY(), hiveStylePartitioning);\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"EPOCHMILLISECONDS\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.output.dateformat\", \"yyyy-MM-dd hh\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n+    return props;\n+  }\n+\n+  @Test\n+  public void testTimestampBasedKeyGenerator() {\n+    // if timezone is GMT+8:00\n+    baseRecord.put(\"createTime\", 1578283932000L);\n+    TypedProperties props = getBaseKeyConfig(\"field1\", \"createTime\", \"false\");\n+    HoodieKey hk1 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk1.getPartitionPath(), \"2020-01-06 12\");\n+\n+    // if timezone is GMT\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT\");\n+    HoodieKey hk2 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk2.getPartitionPath(), \"2020-01-06 04\");\n+\n+    // if timestamp is DATE_STRING, and timestamp type is DATE_STRING\n+    baseRecord.put(\"createTime\", \"2020-01-06 12:12:12\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"DATE_STRING\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n+    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n+    HoodieKey hk3 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    assertEquals(hk3.getPartitionPath(), \"2020-01-06 12\");\n+  }\n+}", "originalCommit": "67277a0ab8b9cf66c547e5363daef7766aed74ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE3NTcxOQ==", "url": "https://github.com/apache/hudi/pull/1188#discussion_r365175719", "bodyText": "ok, What should I do?", "author": "OpenOpened", "createdAt": "2020-01-10T10:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE2NjQzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE3ODE0MA==", "url": "https://github.com/apache/hudi/pull/1188#discussion_r365178140", "bodyText": "click the gist above.", "author": "leesf", "createdAt": "2020-01-10T10:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE2NjQzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIyODg5Mw==", "url": "https://github.com/apache/hudi/pull/1188#discussion_r365228893", "bodyText": "Then what do I need to do? addition more test units?", "author": "OpenOpened", "createdAt": "2020-01-10T13:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE2NjQzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIzMjQ0MA==", "url": "https://github.com/apache/hudi/pull/1188#discussion_r365232440", "bodyText": "Then what do I need to do? addition more test units?\n\nYou may copy the code from gist and cover the current TestTimestampBasedKeyGenerator class.", "author": "leesf", "createdAt": "2020-01-10T13:28:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE2NjQzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NDg3OA==", "url": "https://github.com/apache/hudi/pull/1188#discussion_r365284878", "bodyText": "already covered.", "author": "OpenOpened", "createdAt": "2020-01-10T15:22:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE2NjQzNw=="}], "type": "inlineReview", "revised_code": {"commit": "8fa533dfe9d853a7d0f43d5624fe2be85a8ee441", "chunk": "diff --git a/hudi-utilities/src/test/java/org/apache/hudi/utilities/TestTimestampBasedKeyGenerator.java b/hudi-utilities/src/test/java/org/apache/hudi/utilities/TestTimestampBasedKeyGenerator.java\nindex ad03af8092..cb0c82244e 100644\n--- a/hudi-utilities/src/test/java/org/apache/hudi/utilities/TestTimestampBasedKeyGenerator.java\n+++ b/hudi-utilities/src/test/java/org/apache/hudi/utilities/TestTimestampBasedKeyGenerator.java\n\n@@ -33,48 +33,51 @@ import java.io.IOException;\n import static org.junit.Assert.assertEquals;\n \n public class TestTimestampBasedKeyGenerator {\n-  private Schema schema = SchemaTestUtil.getTimestampEvolvedSchema();\n-  private GenericRecord baseRecord = null;\n-\n-  public TestTimestampBasedKeyGenerator() throws IOException {\n-  }\n+  private Schema schema;\n+  private GenericRecord baseRecord;\n+  private TypedProperties properties = new TypedProperties();\n \n   @Before\n   public void initialize() throws IOException {\n+    schema = SchemaTestUtil.getTimestampEvolvedSchema();\n     baseRecord = SchemaTestUtil\n         .generateAvroRecordFromJson(schema, 1, \"001\", \"f1\");\n-  }\n \n-  private TypedProperties getBaseKeyConfig(String recordKeyFieldName, String partitionPathField, String hiveStylePartitioning) {\n-    TypedProperties props = new TypedProperties();\n-    props.setProperty(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY(), recordKeyFieldName);\n-    props.setProperty(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), partitionPathField);\n-    props.setProperty(DataSourceWriteOptions.HIVE_STYLE_PARTITIONING_OPT_KEY(), hiveStylePartitioning);\n-    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"EPOCHMILLISECONDS\");\n-    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.output.dateformat\", \"yyyy-MM-dd hh\");\n-    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n-    return props;\n+    properties.setProperty(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY(), \"field1\");\n+    properties.setProperty(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), \"createTime\");\n+    properties.setProperty(DataSourceWriteOptions.HIVE_STYLE_PARTITIONING_OPT_KEY(), \"false\");\n+  }\n+  \n+  private TypedProperties getBaseKeyConfig(String timestampType, String dateFormat, String timezone) {\n+    properties.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", timestampType);\n+    properties.setProperty(\"hoodie.deltastreamer.keygen.timebased.output.dateformat\", dateFormat);\n+    properties.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", timezone);\n+    return properties;\n   }\n \n   @Test\n   public void testTimestampBasedKeyGenerator() {\n-    // if timezone is GMT+8:00\n+    // timezone is GMT+8:00\n     baseRecord.put(\"createTime\", 1578283932000L);\n-    TypedProperties props = getBaseKeyConfig(\"field1\", \"createTime\", \"false\");\n-    HoodieKey hk1 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT+8:00\");\n+    HoodieKey hk1 = new TimestampBasedKeyGenerator(properties).getKey(baseRecord);\n     assertEquals(hk1.getPartitionPath(), \"2020-01-06 12\");\n \n-    // if timezone is GMT\n-    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT\");\n-    HoodieKey hk2 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    // timezone is GMT\n+    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT\");\n+    HoodieKey hk2 = new TimestampBasedKeyGenerator(properties).getKey(baseRecord);\n     assertEquals(hk2.getPartitionPath(), \"2020-01-06 04\");\n \n-    // if timestamp is DATE_STRING, and timestamp type is DATE_STRING\n+    // timestamp is DATE_STRING, timezone is GMT+8:00\n     baseRecord.put(\"createTime\", \"2020-01-06 12:12:12\");\n-    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timestamp.type\", \"DATE_STRING\");\n-    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n-    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.timezone\", \"GMT+8:00\");\n-    HoodieKey hk3 = new TimestampBasedKeyGenerator(props).getKey(baseRecord);\n+    properties = getBaseKeyConfig(\"DATE_STRING\", \"yyyy-MM-dd hh\", \"GMT+8:00\");\n+    properties.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n+    HoodieKey hk3 = new TimestampBasedKeyGenerator(properties).getKey(baseRecord);\n     assertEquals(hk3.getPartitionPath(), \"2020-01-06 12\");\n+\n+    // timezone is GMT\n+    properties = getBaseKeyConfig(\"DATE_STRING\", \"yyyy-MM-dd hh\", \"GMT\");\n+    HoodieKey hk4 = new TimestampBasedKeyGenerator(properties).getKey(baseRecord);\n+    assertEquals(hk4.getPartitionPath(), \"2020-01-06 12\");\n   }\n }\n"}}, {"oid": "f865eb604232f3564034d48cefaa986942ef0ce6", "url": "https://github.com/apache/hudi/commit/f865eb604232f3564034d48cefaa986942ef0ce6", "message": "remove useless fields", "committedDate": "2020-01-10T10:41:44Z", "type": "commit"}, {"oid": "8fa533dfe9d853a7d0f43d5624fe2be85a8ee441", "url": "https://github.com/apache/hudi/commit/8fa533dfe9d853a7d0f43d5624fe2be85a8ee441", "message": "Update TestTimestampBasedKeyGenerator.java\n\nfix comment bug, and code more friendly", "committedDate": "2020-01-10T14:45:55Z", "type": "commit"}]}