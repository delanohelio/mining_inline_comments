{"pr_number": 1770, "pr_title": "[HUDI-708]Add temps show and unit test for TempViewCommand", "pr_createdAt": "2020-06-27T14:24:19Z", "pr_url": "https://github.com/apache/hudi/pull/1770", "timeline": [{"oid": "1327a38d439b6596717fe231eda335887da9bb4d", "url": "https://github.com/apache/hudi/commit/1327a38d439b6596717fe231eda335887da9bb4d", "message": "[HUDI-708]Add unit test for TempViewCommand", "committedDate": "2020-07-13T09:31:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyMjc3Nw==", "url": "https://github.com/apache/hudi/pull/1770#discussion_r454722777", "bodyText": "We could introduce a new annotation e.g. @VisibleForTesting in the future just like Flink has done to only open the public method for testing purposes. WDYT? @vinothchandar", "author": "yanghua", "createdAt": "2020-07-15T00:38:04Z", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/HoodieCLI.java", "diffHunk": "@@ -115,4 +115,16 @@ public static synchronized TempViewProvider getTempViewProvider() {\n     return tempViewProvider;\n   }\n \n+  /**\n+   * Close tempViewProvider.\n+   * <p/>\n+   * For test, avoid multiple SparkContexts.\n+   */\n+  public static synchronized void closeTempViewProvider() {", "originalCommit": "1327a38d439b6596717fe231eda335887da9bb4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxNzAxOQ==", "url": "https://github.com/apache/hudi/pull/1770#discussion_r458817019", "bodyText": "+1, @VisibleForTesting can be useful.", "author": "hddong", "createdAt": "2020-07-22T14:04:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyMjc3Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyNDAxNw==", "url": "https://github.com/apache/hudi/pull/1770#discussion_r454724017", "bodyText": "It would be better to return the similar messages for try and catch block, for example, Query ran successfully?", "author": "yanghua", "createdAt": "2020-07-15T00:42:40Z", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java", "diffHunk": "@@ -20,36 +20,51 @@\n \n import org.apache.hudi.cli.HoodieCLI;\n \n+import org.apache.hudi.exception.HoodieException;\n import org.springframework.shell.core.CommandMarker;\n import org.springframework.shell.core.annotation.CliCommand;\n import org.springframework.shell.core.annotation.CliOption;\n import org.springframework.stereotype.Component;\n \n-import java.io.IOException;\n-\n /**\n  * CLI command to query/delete temp views.\n  */\n @Component\n public class TempViewCommand implements CommandMarker {\n \n-  private static final String EMPTY_STRING = \"\";\n-\n-  @CliCommand(value = \"temp_query\", help = \"query against created temp view\")\n+  @CliCommand(value = {\"temp_query\", \"temp query\"}, help = \"query against created temp view\")\n   public String query(\n-          @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql)\n-          throws IOException {\n+          @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql) {\n+\n+    try {\n+      HoodieCLI.getTempViewProvider().runQuery(sql);\n+      return \"Success queried!\";", "originalCommit": "1327a38d439b6596717fe231eda335887da9bb4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyNDQzNg==", "url": "https://github.com/apache/hudi/pull/1770#discussion_r454724436", "bodyText": "Considering it will be used to assert in the test case. Maybe we could define a constant message?", "author": "yanghua", "createdAt": "2020-07-15T00:44:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyNDAxNw=="}], "type": "inlineReview", "revised_code": {"commit": "934ccad3617e92724b7ef38535a8281e0bda47af", "chunk": "diff --git a/hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java b/hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java\nindex c90c3179c..975e89fc7 100644\n--- a/hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java\n+++ b/hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java\n\n@@ -32,27 +32,31 @@ import org.springframework.stereotype.Component;\n @Component\n public class TempViewCommand implements CommandMarker {\n \n+  public static final String QUERY_SUCCESS = \"Query ran successfully!\";\n+  public static final String QUERY_FAIL = \"Query ran failed!\";\n+  public static final String SHOW_SUCCESS = \"Show all views name successfully!\";\n+\n   @CliCommand(value = {\"temp_query\", \"temp query\"}, help = \"query against created temp view\")\n   public String query(\n           @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql) {\n \n     try {\n       HoodieCLI.getTempViewProvider().runQuery(sql);\n-      return \"Success queried!\";\n+      return QUERY_SUCCESS;\n     } catch (HoodieException ex) {\n-      return \"Query ran failed!\";\n+      return QUERY_FAIL;\n     }\n \n   }\n \n-  @CliCommand(value = \"temps show\", help = \"Show all views name\")\n+  @CliCommand(value = {\"temps_show\", \"temps show\"}, help = \"Show all views name\")\n   public String showAll() {\n \n     try {\n-      HoodieCLI.getTempViewProvider().showAllTables();\n-      return \"Show all views name successfully!\";\n+      HoodieCLI.getTempViewProvider().showAllViews();\n+      return SHOW_SUCCESS;\n     } catch (HoodieException ex) {\n-      return \"Show all views failed!\";\n+      return \"Show all views name failed!\";\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyNDc2Ng==", "url": "https://github.com/apache/hudi/pull/1770#discussion_r454724766", "bodyText": "Shall we introduce another alias (e.g. temps_shoe) to keep the same style with other commands?", "author": "yanghua", "createdAt": "2020-07-15T00:45:35Z", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java", "diffHunk": "@@ -20,36 +20,51 @@\n \n import org.apache.hudi.cli.HoodieCLI;\n \n+import org.apache.hudi.exception.HoodieException;\n import org.springframework.shell.core.CommandMarker;\n import org.springframework.shell.core.annotation.CliCommand;\n import org.springframework.shell.core.annotation.CliOption;\n import org.springframework.stereotype.Component;\n \n-import java.io.IOException;\n-\n /**\n  * CLI command to query/delete temp views.\n  */\n @Component\n public class TempViewCommand implements CommandMarker {\n \n-  private static final String EMPTY_STRING = \"\";\n-\n-  @CliCommand(value = \"temp_query\", help = \"query against created temp view\")\n+  @CliCommand(value = {\"temp_query\", \"temp query\"}, help = \"query against created temp view\")\n   public String query(\n-          @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql)\n-          throws IOException {\n+          @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql) {\n+\n+    try {\n+      HoodieCLI.getTempViewProvider().runQuery(sql);\n+      return \"Success queried!\";\n+    } catch (HoodieException ex) {\n+      return \"Query ran failed!\";\n+    }\n+\n+  }\n+\n+  @CliCommand(value = \"temps show\", help = \"Show all views name\")", "originalCommit": "1327a38d439b6596717fe231eda335887da9bb4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "934ccad3617e92724b7ef38535a8281e0bda47af", "chunk": "diff --git a/hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java b/hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java\nindex c90c3179c..975e89fc7 100644\n--- a/hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java\n+++ b/hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java\n\n@@ -32,27 +32,31 @@ import org.springframework.stereotype.Component;\n @Component\n public class TempViewCommand implements CommandMarker {\n \n+  public static final String QUERY_SUCCESS = \"Query ran successfully!\";\n+  public static final String QUERY_FAIL = \"Query ran failed!\";\n+  public static final String SHOW_SUCCESS = \"Show all views name successfully!\";\n+\n   @CliCommand(value = {\"temp_query\", \"temp query\"}, help = \"query against created temp view\")\n   public String query(\n           @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql) {\n \n     try {\n       HoodieCLI.getTempViewProvider().runQuery(sql);\n-      return \"Success queried!\";\n+      return QUERY_SUCCESS;\n     } catch (HoodieException ex) {\n-      return \"Query ran failed!\";\n+      return QUERY_FAIL;\n     }\n \n   }\n \n-  @CliCommand(value = \"temps show\", help = \"Show all views name\")\n+  @CliCommand(value = {\"temps_show\", \"temps show\"}, help = \"Show all views name\")\n   public String showAll() {\n \n     try {\n-      HoodieCLI.getTempViewProvider().showAllTables();\n-      return \"Show all views name successfully!\";\n+      HoodieCLI.getTempViewProvider().showAllViews();\n+      return SHOW_SUCCESS;\n     } catch (HoodieException ex) {\n-      return \"Show all views failed!\";\n+      return \"Show all views name failed!\";\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyNTA1Mg==", "url": "https://github.com/apache/hudi/pull/1770#discussion_r454725052", "bodyText": "Do we need to add the keyword name here?", "author": "yanghua", "createdAt": "2020-07-15T00:46:42Z", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java", "diffHunk": "@@ -20,36 +20,51 @@\n \n import org.apache.hudi.cli.HoodieCLI;\n \n+import org.apache.hudi.exception.HoodieException;\n import org.springframework.shell.core.CommandMarker;\n import org.springframework.shell.core.annotation.CliCommand;\n import org.springframework.shell.core.annotation.CliOption;\n import org.springframework.stereotype.Component;\n \n-import java.io.IOException;\n-\n /**\n  * CLI command to query/delete temp views.\n  */\n @Component\n public class TempViewCommand implements CommandMarker {\n \n-  private static final String EMPTY_STRING = \"\";\n-\n-  @CliCommand(value = \"temp_query\", help = \"query against created temp view\")\n+  @CliCommand(value = {\"temp_query\", \"temp query\"}, help = \"query against created temp view\")\n   public String query(\n-          @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql)\n-          throws IOException {\n+          @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql) {\n+\n+    try {\n+      HoodieCLI.getTempViewProvider().runQuery(sql);\n+      return \"Success queried!\";\n+    } catch (HoodieException ex) {\n+      return \"Query ran failed!\";\n+    }\n+\n+  }\n+\n+  @CliCommand(value = \"temps show\", help = \"Show all views name\")\n+  public String showAll() {\n \n-    HoodieCLI.getTempViewProvider().runQuery(sql);\n-    return EMPTY_STRING;\n+    try {\n+      HoodieCLI.getTempViewProvider().showAllTables();\n+      return \"Show all views name successfully!\";\n+    } catch (HoodieException ex) {\n+      return \"Show all views failed!\";", "originalCommit": "1327a38d439b6596717fe231eda335887da9bb4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "934ccad3617e92724b7ef38535a8281e0bda47af", "chunk": "diff --git a/hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java b/hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java\nindex c90c3179c..975e89fc7 100644\n--- a/hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java\n+++ b/hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java\n\n@@ -32,27 +32,31 @@ import org.springframework.stereotype.Component;\n @Component\n public class TempViewCommand implements CommandMarker {\n \n+  public static final String QUERY_SUCCESS = \"Query ran successfully!\";\n+  public static final String QUERY_FAIL = \"Query ran failed!\";\n+  public static final String SHOW_SUCCESS = \"Show all views name successfully!\";\n+\n   @CliCommand(value = {\"temp_query\", \"temp query\"}, help = \"query against created temp view\")\n   public String query(\n           @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql) {\n \n     try {\n       HoodieCLI.getTempViewProvider().runQuery(sql);\n-      return \"Success queried!\";\n+      return QUERY_SUCCESS;\n     } catch (HoodieException ex) {\n-      return \"Query ran failed!\";\n+      return QUERY_FAIL;\n     }\n \n   }\n \n-  @CliCommand(value = \"temps show\", help = \"Show all views name\")\n+  @CliCommand(value = {\"temps_show\", \"temps show\"}, help = \"Show all views name\")\n   public String showAll() {\n \n     try {\n-      HoodieCLI.getTempViewProvider().showAllTables();\n-      return \"Show all views name successfully!\";\n+      HoodieCLI.getTempViewProvider().showAllViews();\n+      return SHOW_SUCCESS;\n     } catch (HoodieException ex) {\n-      return \"Show all views failed!\";\n+      return \"Show all views name failed!\";\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyNTY5OQ==", "url": "https://github.com/apache/hudi/pull/1770#discussion_r454725699", "bodyText": "IMO, maybe showAllViews is a better name (just a thought)? I understand here is a method named deleteTable.", "author": "yanghua", "createdAt": "2020-07-15T00:49:17Z", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/utils/SparkTempViewProvider.java", "diffHunk": "@@ -101,6 +101,17 @@ public void runQuery(String sqlText) {\n     }\n   }\n \n+  @Override\n+  public void showAllTables() {", "originalCommit": "1327a38d439b6596717fe231eda335887da9bb4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "934ccad3617e92724b7ef38535a8281e0bda47af", "chunk": "diff --git a/hudi-cli/src/main/java/org/apache/hudi/cli/utils/SparkTempViewProvider.java b/hudi-cli/src/main/java/org/apache/hudi/cli/utils/SparkTempViewProvider.java\nindex 0be430966..d06d12455 100644\n--- a/hudi-cli/src/main/java/org/apache/hudi/cli/utils/SparkTempViewProvider.java\n+++ b/hudi-cli/src/main/java/org/apache/hudi/cli/utils/SparkTempViewProvider.java\n\n@@ -102,7 +102,7 @@ public class SparkTempViewProvider implements TempViewProvider {\n   }\n \n   @Override\n-  public void showAllTables() {\n+  public void showAllViews() {\n     try {\n       sqlContext.sql(\"SHOW TABLES\").show(Integer.MAX_VALUE, false);\n     } catch (Throwable ex) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyNjA0OA==", "url": "https://github.com/apache/hudi/pull/1770#discussion_r454726048", "bodyText": "remove this annotation here.", "author": "yanghua", "createdAt": "2020-07-15T00:50:20Z", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/utils/TempViewProvider.java", "diffHunk": "@@ -18,12 +18,18 @@\n \n package org.apache.hudi.cli.utils;\n \n+import java.io.Closeable;\n import java.util.List;\n \n-public interface TempViewProvider {\n+public interface TempViewProvider extends Closeable {\n   void createOrReplace(String tableName, List<String> headers, List<List<Comparable>> rows);\n \n   void runQuery(String sqlText);\n \n+  void showAllTables();\n+\n   void deleteTable(String tableName);\n+\n+  @Override", "originalCommit": "1327a38d439b6596717fe231eda335887da9bb4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "934ccad3617e92724b7ef38535a8281e0bda47af", "chunk": "diff --git a/hudi-cli/src/main/java/org/apache/hudi/cli/utils/TempViewProvider.java b/hudi-cli/src/main/java/org/apache/hudi/cli/utils/TempViewProvider.java\nindex 9124ba98f..421ad5959 100644\n--- a/hudi-cli/src/main/java/org/apache/hudi/cli/utils/TempViewProvider.java\n+++ b/hudi-cli/src/main/java/org/apache/hudi/cli/utils/TempViewProvider.java\n\n@@ -26,10 +26,9 @@ public interface TempViewProvider extends Closeable {\n \n   void runQuery(String sqlText);\n \n-  void showAllTables();\n+  void showAllViews();\n \n   void deleteTable(String tableName);\n \n-  @Override\n   void close();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3OTMxMw==", "url": "https://github.com/apache/hudi/pull/1770#discussion_r454979313", "bodyText": "It would be better to add the access modifier.", "author": "yanghua", "createdAt": "2020-07-15T11:23:37Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestTempViewCommand.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.testutils.AbstractShellBaseIntegrationTest;\n+import org.apache.hudi.exception.HoodieException;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TestTempViewCommand extends AbstractShellBaseIntegrationTest {\n+\n+  String tableName = \"test_table\";", "originalCommit": "1327a38d439b6596717fe231eda335887da9bb4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "934ccad3617e92724b7ef38535a8281e0bda47af", "chunk": "diff --git a/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestTempViewCommand.java b/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestTempViewCommand.java\nindex 4b83a954c..504f0d7ba 100644\n--- a/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestTempViewCommand.java\n+++ b/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestTempViewCommand.java\n\n@@ -37,7 +37,7 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class TestTempViewCommand extends AbstractShellBaseIntegrationTest {\n \n-  String tableName = \"test_table\";\n+  private String tableName = \"test_table\";\n \n   @BeforeEach\n   public void init() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDU3NQ==", "url": "https://github.com/apache/hudi/pull/1770#discussion_r454980575", "bodyText": "No need to call String.format?", "author": "yanghua", "createdAt": "2020-07-15T11:26:14Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestTempViewCommand.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.testutils.AbstractShellBaseIntegrationTest;\n+import org.apache.hudi.exception.HoodieException;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TestTempViewCommand extends AbstractShellBaseIntegrationTest {\n+\n+  String tableName = \"test_table\";\n+\n+  @BeforeEach\n+  public void init() {\n+    List<List<Comparable>> rows = new ArrayList<>();\n+    for (int i = 0; i < 3; i++) {\n+      rows.add(Arrays.asList(new Comparable[] {\"c1\", \"c2\", \"c3\"}));\n+    }\n+    HoodieCLI.getTempViewProvider().createOrReplace(tableName, Arrays.asList(\"t1\", \"t2\", \"t3\"), rows);\n+  }\n+\n+  @AfterAll\n+  public static void shutdown() {\n+    if (HoodieCLI.getTempViewProvider() != null) {\n+      HoodieCLI.closeTempViewProvider();\n+    }\n+  }\n+\n+  @Test\n+  public void testQueryWithException() {\n+    CommandResult cr = getShell().executeCommand(String.format(\"temp query --sql 'select * from %s'\", \"table_1\"));\n+    assertTrue(cr.getResult().toString().startsWith(\"Query ran failed!\"));\n+  }\n+\n+  @Test\n+  public void testQuery() {\n+    CommandResult cr = getShell().executeCommand(String.format(\"temp query --sql 'select * from %s'\", tableName));\n+    assertEquals(\"Success queried!\", cr.getResult().toString());\n+  }\n+\n+  @Test\n+  public void testShowAll() {\n+    CommandResult cr = getShell().executeCommand(String.format(\"temps show\"));", "originalCommit": "1327a38d439b6596717fe231eda335887da9bb4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "934ccad3617e92724b7ef38535a8281e0bda47af", "chunk": "diff --git a/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestTempViewCommand.java b/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestTempViewCommand.java\nindex 4b83a954c..504f0d7ba 100644\n--- a/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestTempViewCommand.java\n+++ b/hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestTempViewCommand.java\n\n@@ -37,7 +37,7 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class TestTempViewCommand extends AbstractShellBaseIntegrationTest {\n \n-  String tableName = \"test_table\";\n+  private String tableName = \"test_table\";\n \n   @BeforeEach\n   public void init() {\n"}}, {"oid": "934ccad3617e92724b7ef38535a8281e0bda47af", "url": "https://github.com/apache/hudi/commit/934ccad3617e92724b7ef38535a8281e0bda47af", "message": "[HUDI-708]Add unit test for TempViewCommand", "committedDate": "2020-07-20T09:38:27Z", "type": "commit"}, {"oid": "934ccad3617e92724b7ef38535a8281e0bda47af", "url": "https://github.com/apache/hudi/commit/934ccad3617e92724b7ef38535a8281e0bda47af", "message": "[HUDI-708]Add unit test for TempViewCommand", "committedDate": "2020-07-20T09:38:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NTg3NQ==", "url": "https://github.com/apache/hudi/pull/1770#discussion_r458465875", "bodyText": "Can we log the detailed exception information before returning the result?", "author": "yanghua", "createdAt": "2020-07-22T00:34:30Z", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/TempViewCommand.java", "diffHunk": "@@ -20,36 +20,55 @@\n \n import org.apache.hudi.cli.HoodieCLI;\n \n+import org.apache.hudi.exception.HoodieException;\n import org.springframework.shell.core.CommandMarker;\n import org.springframework.shell.core.annotation.CliCommand;\n import org.springframework.shell.core.annotation.CliOption;\n import org.springframework.stereotype.Component;\n \n-import java.io.IOException;\n-\n /**\n  * CLI command to query/delete temp views.\n  */\n @Component\n public class TempViewCommand implements CommandMarker {\n \n-  private static final String EMPTY_STRING = \"\";\n+  public static final String QUERY_SUCCESS = \"Query ran successfully!\";\n+  public static final String QUERY_FAIL = \"Query ran failed!\";\n+  public static final String SHOW_SUCCESS = \"Show all views name successfully!\";\n \n-  @CliCommand(value = \"temp_query\", help = \"query against created temp view\")\n+  @CliCommand(value = {\"temp_query\", \"temp query\"}, help = \"query against created temp view\")\n   public String query(\n-          @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql)\n-          throws IOException {\n+          @CliOption(key = {\"sql\"}, mandatory = true, help = \"select query to run against view\") final String sql) {\n+\n+    try {\n+      HoodieCLI.getTempViewProvider().runQuery(sql);\n+      return QUERY_SUCCESS;\n+    } catch (HoodieException ex) {\n+      return QUERY_FAIL;", "originalCommit": "934ccad3617e92724b7ef38535a8281e0bda47af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxNzc1Mw==", "url": "https://github.com/apache/hudi/pull/1770#discussion_r458817753", "bodyText": "runQuery showAllViews  and deleteTable  had log the detailed exception.", "author": "hddong", "createdAt": "2020-07-22T14:05:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NTg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1OTc3NQ==", "url": "https://github.com/apache/hudi/pull/1770#discussion_r459159775", "bodyText": "OK~", "author": "yanghua", "createdAt": "2020-07-23T00:41:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NTg3NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NzA2Mg==", "url": "https://github.com/apache/hudi/pull/1770#discussion_r458467062", "bodyText": "IMO, this error description is not correct, right? The throwable not only covers the initialization of the spark context", "author": "yanghua", "createdAt": "2020-07-22T00:38:45Z", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/utils/SparkTempViewProvider.java", "diffHunk": "@@ -101,6 +101,17 @@ public void runQuery(String sqlText) {\n     }\n   }\n \n+  @Override\n+  public void showAllViews() {\n+    try {\n+      sqlContext.sql(\"SHOW TABLES\").show(Integer.MAX_VALUE, false);\n+    } catch (Throwable ex) {\n+      // log full stack trace and rethrow. Without this its difficult to debug failures, if any\n+      LOG.error(\"unable to initialize spark context \", ex);", "originalCommit": "934ccad3617e92724b7ef38535a8281e0bda47af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyMTA0Ng==", "url": "https://github.com/apache/hudi/pull/1770#discussion_r458821046", "bodyText": "IMO, this error description is not correct, right? The throwable not only covers the initialization of the spark context\n\nYes, change it to unable to get all views.", "author": "hddong", "createdAt": "2020-07-22T14:09:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NzA2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "fe7974739ee5d1f37c1b86b305086840b04e599d", "chunk": "diff --git a/hudi-cli/src/main/java/org/apache/hudi/cli/utils/SparkTempViewProvider.java b/hudi-cli/src/main/java/org/apache/hudi/cli/utils/SparkTempViewProvider.java\nindex d06d12455..5e029cd05 100644\n--- a/hudi-cli/src/main/java/org/apache/hudi/cli/utils/SparkTempViewProvider.java\n+++ b/hudi-cli/src/main/java/org/apache/hudi/cli/utils/SparkTempViewProvider.java\n\n@@ -107,7 +107,7 @@ public class SparkTempViewProvider implements TempViewProvider {\n       sqlContext.sql(\"SHOW TABLES\").show(Integer.MAX_VALUE, false);\n     } catch (Throwable ex) {\n       // log full stack trace and rethrow. Without this its difficult to debug failures, if any\n-      LOG.error(\"unable to initialize spark context \", ex);\n+      LOG.error(\"unable to get all views \", ex);\n       throw new HoodieException(ex);\n     }\n   }\n"}}, {"oid": "fe7974739ee5d1f37c1b86b305086840b04e599d", "url": "https://github.com/apache/hudi/commit/fe7974739ee5d1f37c1b86b305086840b04e599d", "message": "fix", "committedDate": "2020-07-22T14:08:30Z", "type": "commit"}]}