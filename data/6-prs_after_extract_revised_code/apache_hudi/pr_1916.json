{"pr_number": 1916, "pr_title": "[HUDI-1025] Meter RPC calls in HoodieWrapperFileSystem", "pr_createdAt": "2020-08-05T00:17:43Z", "pr_url": "https://github.com/apache/hudi/pull/1916", "timeline": [{"oid": "12547446631c556915208957c6a560e1c1e9f221", "url": "https://github.com/apache/hudi/commit/12547446631c556915208957c6a560e1c1e9f221", "message": "Cherry Pick Commits from Uber Hudi", "committedDate": "2020-08-05T00:12:36Z", "type": "commit"}, {"oid": "698105d991c04b40e741b69b7dc11e5d776b4556", "url": "https://github.com/apache/hudi/commit/698105d991c04b40e741b69b7dc11e5d776b4556", "message": "add new files", "committedDate": "2020-08-05T00:19:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5NTg5OQ==", "url": "https://github.com/apache/hudi/pull/1916#discussion_r466395899", "bodyText": "MetricName?", "author": "leesf", "createdAt": "2020-08-06T13:04:02Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/HoodieWrapperFileSystem.java", "diffHunk": "@@ -64,10 +65,15 @@\n \n   public static final String HOODIE_SCHEME_PREFIX = \"hoodie-\";\n \n+  private enum MetricNames {", "originalCommit": "698105d991c04b40e741b69b7dc11e5d776b4556", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a1666929b76a64e602490f4fbef15ea496b1caf", "chunk": "diff --git a/hudi-common/src/main/java/org/apache/hudi/common/fs/HoodieWrapperFileSystem.java b/hudi-common/src/main/java/org/apache/hudi/common/fs/HoodieWrapperFileSystem.java\nindex 38213016a..c3f6189e8 100644\n--- a/hudi-common/src/main/java/org/apache/hudi/common/fs/HoodieWrapperFileSystem.java\n+++ b/hudi-common/src/main/java/org/apache/hudi/common/fs/HoodieWrapperFileSystem.java\n\n@@ -65,7 +65,7 @@ public class HoodieWrapperFileSystem extends FileSystem {\n \n   public static final String HOODIE_SCHEME_PREFIX = \"hoodie-\";\n \n-  private enum MetricNames {\n+  private enum MetricName {\n     create, rename, delete, listStatus, mkdirs, getFileStatus, globStatus, listFiles\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5Njg1Mw==", "url": "https://github.com/apache/hudi/pull/1916#discussion_r466396853", "bodyText": "missing @OverRide?", "author": "leesf", "createdAt": "2020-08-06T13:05:27Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/metrics/Counter.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.metrics;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Lightweight Counter for Hudi Metrics.\n+ */\n+public class Counter implements Metric {\n+\n+  private final AtomicLong count = new AtomicLong();\n+\n+  public void increment() {\n+    this.add(1);\n+  }\n+\n+  public void add(long n) {\n+    this.count.addAndGet(n);\n+  }\n+\n+  public Long getValue() {", "originalCommit": "698105d991c04b40e741b69b7dc11e5d776b4556", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a1666929b76a64e602490f4fbef15ea496b1caf", "chunk": "diff --git a/hudi-common/src/main/java/org/apache/hudi/common/metrics/Counter.java b/hudi-common/src/main/java/org/apache/hudi/common/metrics/Counter.java\nindex 4ff42b586..546956d00 100644\n--- a/hudi-common/src/main/java/org/apache/hudi/common/metrics/Counter.java\n+++ b/hudi-common/src/main/java/org/apache/hudi/common/metrics/Counter.java\n\n@@ -35,6 +35,7 @@ public class Counter implements Metric {\n     this.count.addAndGet(n);\n   }\n \n+  @Override\n   public Long getValue() {\n     return count.get();\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5Nzg1NA==", "url": "https://github.com/apache/hudi/pull/1916#discussion_r466397854", "bodyText": "change to HashMap<String, Long> allMetrics = new HashMap<>();", "author": "leesf", "createdAt": "2020-08-06T13:07:09Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/metrics/Registry.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.metrics;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+\n+/**\n+ * Lightweight Metrics Registry to track Hudi events.\n+ */\n+public class Registry {\n+  ConcurrentHashMap<String, Counter> counters = new ConcurrentHashMap<>();\n+  final String name;\n+\n+  private static ConcurrentHashMap<String, Registry> registryMap = new ConcurrentHashMap<>();\n+\n+  private Registry(String name) {\n+    this.name = name;\n+  }\n+\n+  /**\n+   * Get (or create) the registry for a provided name.\n+   */\n+  public static synchronized Registry getRegistry(String registryName) {\n+    if (!registryMap.containsKey(registryName)) {\n+      registryMap.put(registryName, new Registry(registryName));\n+    }\n+    return registryMap.get(registryName);\n+  }\n+\n+  /**\n+   * Get all registered metrics.\n+   * @param flush clean all metrics as part of this operation.\n+   * @param prefixWithRegistryName prefix each metric name with the registry name.\n+   * @return\n+   */\n+  public static synchronized Map<String, Long> getAllMetrics(boolean flush, boolean prefixWithRegistryName) {\n+    HashMap allMetrics = new HashMap<String, Long>();", "originalCommit": "698105d991c04b40e741b69b7dc11e5d776b4556", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a1666929b76a64e602490f4fbef15ea496b1caf", "chunk": "diff --git a/hudi-common/src/main/java/org/apache/hudi/common/metrics/Registry.java b/hudi-common/src/main/java/org/apache/hudi/common/metrics/Registry.java\nindex 81a4a7c66..169e8bc90 100644\n--- a/hudi-common/src/main/java/org/apache/hudi/common/metrics/Registry.java\n+++ b/hudi-common/src/main/java/org/apache/hudi/common/metrics/Registry.java\n\n@@ -53,17 +53,17 @@ public class Registry {\n    * @return\n    */\n   public static synchronized Map<String, Long> getAllMetrics(boolean flush, boolean prefixWithRegistryName) {\n-    HashMap allMetrics = new HashMap<String, Long>();\n+    HashMap<String, Long> allMetrics = new HashMap<>();\n     registryMap.forEach((registryName, registry) -> {\n       allMetrics.putAll(registry.getAllCounts(prefixWithRegistryName));\n       if (flush) {\n-        registry.flush();\n+        registry.clear();\n       }\n     });\n     return allMetrics;\n   }\n \n-  public void flush() {\n+  public void clear() {\n     counters.clear();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5ODQ3MQ==", "url": "https://github.com/apache/hudi/pull/1916#discussion_r466398471", "bodyText": "would be rename to clear?", "author": "leesf", "createdAt": "2020-08-06T13:08:10Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/metrics/Registry.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.metrics;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+\n+/**\n+ * Lightweight Metrics Registry to track Hudi events.\n+ */\n+public class Registry {\n+  ConcurrentHashMap<String, Counter> counters = new ConcurrentHashMap<>();\n+  final String name;\n+\n+  private static ConcurrentHashMap<String, Registry> registryMap = new ConcurrentHashMap<>();\n+\n+  private Registry(String name) {\n+    this.name = name;\n+  }\n+\n+  /**\n+   * Get (or create) the registry for a provided name.\n+   */\n+  public static synchronized Registry getRegistry(String registryName) {\n+    if (!registryMap.containsKey(registryName)) {\n+      registryMap.put(registryName, new Registry(registryName));\n+    }\n+    return registryMap.get(registryName);\n+  }\n+\n+  /**\n+   * Get all registered metrics.\n+   * @param flush clean all metrics as part of this operation.\n+   * @param prefixWithRegistryName prefix each metric name with the registry name.\n+   * @return\n+   */\n+  public static synchronized Map<String, Long> getAllMetrics(boolean flush, boolean prefixWithRegistryName) {\n+    HashMap allMetrics = new HashMap<String, Long>();\n+    registryMap.forEach((registryName, registry) -> {\n+      allMetrics.putAll(registry.getAllCounts(prefixWithRegistryName));\n+      if (flush) {\n+        registry.flush();\n+      }\n+    });\n+    return allMetrics;\n+  }\n+\n+  public void flush() {", "originalCommit": "698105d991c04b40e741b69b7dc11e5d776b4556", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a1666929b76a64e602490f4fbef15ea496b1caf", "chunk": "diff --git a/hudi-common/src/main/java/org/apache/hudi/common/metrics/Registry.java b/hudi-common/src/main/java/org/apache/hudi/common/metrics/Registry.java\nindex 81a4a7c66..169e8bc90 100644\n--- a/hudi-common/src/main/java/org/apache/hudi/common/metrics/Registry.java\n+++ b/hudi-common/src/main/java/org/apache/hudi/common/metrics/Registry.java\n\n@@ -53,17 +53,17 @@ public class Registry {\n    * @return\n    */\n   public static synchronized Map<String, Long> getAllMetrics(boolean flush, boolean prefixWithRegistryName) {\n-    HashMap allMetrics = new HashMap<String, Long>();\n+    HashMap<String, Long> allMetrics = new HashMap<>();\n     registryMap.forEach((registryName, registry) -> {\n       allMetrics.putAll(registry.getAllCounts(prefixWithRegistryName));\n       if (flush) {\n-        registry.flush();\n+        registry.clear();\n       }\n     });\n     return allMetrics;\n   }\n \n-  public void flush() {\n+  public void clear() {\n     counters.clear();\n   }\n \n"}}, {"oid": "8a1666929b76a64e602490f4fbef15ea496b1caf", "url": "https://github.com/apache/hudi/commit/8a1666929b76a64e602490f4fbef15ea496b1caf", "message": "addressing code review", "committedDate": "2020-08-12T23:48:17Z", "type": "commit"}]}