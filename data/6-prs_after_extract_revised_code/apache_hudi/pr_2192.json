{"pr_number": 2192, "pr_title": "[HUDI-1343] Add standard schema postprocessor which would rewrite the schema using spark-avro conversion", "pr_createdAt": "2020-10-21T03:40:24Z", "pr_url": "https://github.com/apache/hudi/pull/2192", "timeline": [{"oid": "8cfaf0d4d6142e38a2577d4e85dac566661a6b79", "url": "https://github.com/apache/hudi/commit/8cfaf0d4d6142e38a2577d4e85dac566661a6b79", "message": "HUDI-1343", "committedDate": "2020-10-15T08:59:08Z", "type": "commit"}, {"oid": "49b4961aec23e2d0398d8d74d4af27747dce24ae", "url": "https://github.com/apache/hudi/commit/49b4961aec23e2d0398d8d74d4af27747dce24ae", "message": "HUDI-1343", "committedDate": "2020-10-15T09:58:02Z", "type": "commit"}, {"oid": "632556e73326139664ca498cc5f6a51afd5d4260", "url": "https://github.com/apache/hudi/commit/632556e73326139664ca498cc5f6a51afd5d4260", "message": "hudi-1343", "committedDate": "2020-10-20T15:33:52Z", "type": "commit"}, {"oid": "e3e450155d871525aeafeff9f64f0c641a90d1f4", "url": "https://github.com/apache/hudi/commit/e3e450155d871525aeafeff9f64f0c641a90d1f4", "message": "HUDI-1343", "committedDate": "2020-10-20T15:39:20Z", "type": "commit"}, {"oid": "67ac0ae93fc53eabcd27be175c385d1973683594", "url": "https://github.com/apache/hudi/commit/67ac0ae93fc53eabcd27be175c385d1973683594", "message": "HUDI-1343", "committedDate": "2020-10-21T03:35:08Z", "type": "commit"}, {"oid": "34a029cc4ee87f10e3d60937c9f8b2b3bc0bae29", "url": "https://github.com/apache/hudi/commit/34a029cc4ee87f10e3d60937c9f8b2b3bc0bae29", "message": "hudi-1343", "committedDate": "2020-10-26T12:49:39Z", "type": "commit"}, {"oid": "d4b2a2eb62aa1f926334f3e60375057e7d6ca4c7", "url": "https://github.com/apache/hudi/commit/d4b2a2eb62aa1f926334f3e60375057e7d6ca4c7", "message": "hudi-1343", "committedDate": "2020-10-27T13:09:02Z", "type": "commit"}, {"oid": "65bfed9e40a788280b35510c31e350399ea81119", "url": "https://github.com/apache/hudi/commit/65bfed9e40a788280b35510c31e350399ea81119", "message": "hudi-1343", "committedDate": "2020-10-28T01:39:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1NzU1MQ==", "url": "https://github.com/apache/hudi/pull/2192#discussion_r516757551", "bodyText": "Can you reference the jira number as part of this class Javadoc so that developers would know why this class exist ?", "author": "bvaradar", "createdAt": "2020-11-03T15:34:22Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/schema/SparkAvroPostProcessor.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.schema;\n+\n+import org.apache.hudi.AvroConversionUtils;\n+import org.apache.hudi.common.config.TypedProperties;\n+\n+import org.apache.avro.Schema;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+public class SparkAvroPostProcessor extends SchemaPostProcessor {", "originalCommit": "65bfed9e40a788280b35510c31e350399ea81119", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f82b423fb716655e321dc3bac10962bb338b5151", "chunk": "diff --git a/hudi-utilities/src/main/java/org/apache/hudi/utilities/schema/SparkAvroPostProcessor.java b/hudi-utilities/src/main/java/org/apache/hudi/utilities/schema/SparkAvroPostProcessor.java\nindex 393b3d8e0..9f71a7f11 100644\n--- a/hudi-utilities/src/main/java/org/apache/hudi/utilities/schema/SparkAvroPostProcessor.java\n+++ b/hudi-utilities/src/main/java/org/apache/hudi/utilities/schema/SparkAvroPostProcessor.java\n\n@@ -24,8 +24,16 @@ import org.apache.hudi.common.config.TypedProperties;\n import org.apache.avro.Schema;\n import org.apache.spark.api.java.JavaSparkContext;\n \n+/**\n+ * HUDI-1343:Add standard schema postprocessor which would rewrite the schema using spark-avro conversion.\n+ */\n public class SparkAvroPostProcessor extends SchemaPostProcessor {\n \n+  public static class Config {\n+    public static final String SPARK_AVRO_POST_PROCESSOR_PROP_ENABLE =\n+            \"hoodie.deltastreamer.schemaprovider.spark_avro_post_processor.enable\";\n+  }\n+\n   public SparkAvroPostProcessor(TypedProperties props, JavaSparkContext jssc) {\n     super(props, jssc);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1OTUyNg==", "url": "https://github.com/apache/hudi/pull/2192#discussion_r516759526", "bodyText": "Can you add a check that post processed schema is different from original schema.", "author": "bvaradar", "createdAt": "2020-11-03T15:36:54Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "diffHunk": "@@ -45,14 +50,32 @@ public void testPostProcessor() throws IOException {\n     SchemaProvider provider =\n         UtilHelpers.wrapSchemaProviderWithPostProcessor(\n         UtilHelpers.createSchemaProvider(DummySchemaProvider.class.getName(), properties, jsc),\n-            properties, jsc);\n+            properties, jsc,null);\n \n     Schema schema = provider.getSourceSchema();\n     assertEquals(schema.getType(), Type.RECORD);\n     assertEquals(schema.getName(), \"test\");\n     assertNotNull(schema.getField(\"testString\"));\n   }\n \n+  @Test\n+  public void testSparkAvro() throws IOException {\n+    properties.put(Config.SCHEMA_POST_PROCESSOR_PROP, SparkAvroPostProcessor.class.getName());\n+    List<String> transformerClassNames = new ArrayList<>();\n+    transformerClassNames.add(FlatteningTransformer.class.getName());\n+\n+    SchemaProvider provider =\n+            UtilHelpers.wrapSchemaProviderWithPostProcessor(\n+                    UtilHelpers.createSchemaProvider(SparkAvroSchemaProvider.class.getName(), properties, jsc),\n+                    properties, jsc, transformerClassNames);\n+\n+    Schema schema = provider.getSourceSchema();", "originalCommit": "65bfed9e40a788280b35510c31e350399ea81119", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg4NDM4MA==", "url": "https://github.com/apache/hudi/pull/2192#discussion_r521884380", "bodyText": "@liujinhui1994 : Rest looks good. Can you add a assertion to ensure the 2 schemas are different in this case", "author": "bvaradar", "createdAt": "2020-11-12T07:19:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1OTUyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg4NTEzMw==", "url": "https://github.com/apache/hudi/pull/2192#discussion_r521885133", "bodyText": "Ok i will handle it", "author": "liujinhui1994", "createdAt": "2020-11-12T07:21:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1OTUyNg=="}], "type": "inlineReview", "revised_code": {"commit": "d8e41cb550bd9ad0e508f570248474bcee9f1a19", "chunk": "diff --git a/hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java b/hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java\nindex 6bc6fd7a0..1bc23dc40 100644\n--- a/hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java\n+++ b/hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java\n\n@@ -44,6 +44,12 @@ public class TestSchemaPostProcessor extends UtilitiesTestBase {\n \n   private TypedProperties properties = new TypedProperties();\n \n+  private static String ORIGINAL_SCHEMA = \"{\\\"name\\\":\\\"t3_biz_operation_t_driver\\\",\\\"type\\\":\\\"record\\\",\\\"fields\\\":[{\\\"name\\\":\\\"ums_id_\\\",\\\"type\\\":[\\\"null\\\",\\\"string\\\"],\\\"default\\\":null},\"\n+                                              + \"{\\\"name\\\":\\\"ums_ts_\\\",\\\"type\\\":[\\\"null\\\",\\\"string\\\"],\\\"default\\\":null}]}\";\n+\n+  private static String RESULT_SCHEMA = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"hoodie_source\\\",\\\"namespace\\\":\\\"hoodie.source\\\",\\\"fields\\\":[{\\\"name\\\":\\\"ums_id_\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},\"\n+                                            + \"{\\\"name\\\":\\\"ums_ts_\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]}]}\";\n+\n   @Test\n   public void testPostProcessor() throws IOException {\n     properties.put(Config.SCHEMA_POST_PROCESSOR_PROP, DummySchemaPostProcessor.class.getName());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc2MDgxNA==", "url": "https://github.com/apache/hudi/pull/2192#discussion_r516760814", "bodyText": "I think it is safer to add a configuration (enabled by default) if users do not need this feature.", "author": "bvaradar", "createdAt": "2020-11-03T15:38:43Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java", "diffHunk": "@@ -413,14 +414,19 @@ public static SchemaProviderWithPostProcessor wrapSchemaProviderWithPostProcesso\n     if (provider instanceof  SchemaProviderWithPostProcessor) {\n       return (SchemaProviderWithPostProcessor)provider;\n     }\n+\n     String schemaPostProcessorClass = cfg.getString(Config.SCHEMA_POST_PROCESSOR_PROP, null);\n+    if (transformerClassNames != null && !transformerClassNames.isEmpty() && StringUtils.isNullOrEmpty(schemaPostProcessorClass)) {", "originalCommit": "65bfed9e40a788280b35510c31e350399ea81119", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f82b423fb716655e321dc3bac10962bb338b5151", "chunk": "diff --git a/hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java b/hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java\nindex 68f67db7b..16f3aa468 100644\n--- a/hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java\n+++ b/hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java\n\n@@ -416,7 +416,10 @@ public class UtilHelpers {\n     }\n \n     String schemaPostProcessorClass = cfg.getString(Config.SCHEMA_POST_PROCESSOR_PROP, null);\n-    if (transformerClassNames != null && !transformerClassNames.isEmpty() && StringUtils.isNullOrEmpty(schemaPostProcessorClass)) {\n+    boolean enableSparkAvroPostProcessor = Boolean.valueOf(cfg.getString(SparkAvroPostProcessor.Config.SPARK_AVRO_POST_PROCESSOR_PROP_ENABLE, \"true\"));\n+\n+    if (transformerClassNames != null && !transformerClassNames.isEmpty()\n+            && enableSparkAvroPostProcessor && StringUtils.isNullOrEmpty(schemaPostProcessorClass)) {\n       schemaPostProcessorClass = SparkAvroPostProcessor.class.getName();\n     }\n \n"}}, {"oid": "f82b423fb716655e321dc3bac10962bb338b5151", "url": "https://github.com/apache/hudi/commit/f82b423fb716655e321dc3bac10962bb338b5151", "message": "hudi-1343\nadd config:hoodie.deltastreamer.schemaprovider.spark_avro_post_processor.enable", "committedDate": "2020-11-11T03:04:16Z", "type": "commit"}, {"oid": "d8e41cb550bd9ad0e508f570248474bcee9f1a19", "url": "https://github.com/apache/hudi/commit/d8e41cb550bd9ad0e508f570248474bcee9f1a19", "message": "add Test", "committedDate": "2020-11-18T11:42:24Z", "type": "commit"}, {"oid": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1", "url": "https://github.com/apache/hudi/commit/1e2bfd1eb9883bf0bc5195c61a4eef816be070d1", "message": "hudi-1343\nadd Test", "committedDate": "2020-11-18T13:55:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwNzIxNQ==", "url": "https://github.com/apache/hudi/pull/2192#discussion_r535807215", "bodyText": "Does SparkAvroTestSchemaProvider look better?", "author": "yanghua", "createdAt": "2020-12-04T03:22:55Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/SparkAvroSchemaProvider.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.avro.Schema;\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.utilities.schema.SchemaProvider;\n+import org.apache.spark.api.java.JavaSparkContext;\n+\n+public class SparkAvroSchemaProvider extends SchemaProvider {", "originalCommit": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwNzgwOA==", "url": "https://github.com/apache/hudi/pull/2192#discussion_r535807808", "bodyText": "Or define a static inner class in TestSchemaPostProcessor?", "author": "yanghua", "createdAt": "2020-12-04T03:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwNzIxNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwNzQ2OQ==", "url": "https://github.com/apache/hudi/pull/2192#discussion_r535807469", "bodyText": "Please add a backspace before ,null.", "author": "yanghua", "createdAt": "2020-12-04T03:23:44Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "diffHunk": "@@ -39,20 +44,51 @@\n \n   private TypedProperties properties = new TypedProperties();\n \n+  private static String ORIGINAL_SCHEMA = \"{\\\"name\\\":\\\"t3_biz_operation_t_driver\\\",\\\"type\\\":\\\"record\\\",\\\"fields\\\":[{\\\"name\\\":\\\"ums_id_\\\",\\\"type\\\":[\\\"null\\\",\\\"string\\\"],\\\"default\\\":null},\"\n+                                              + \"{\\\"name\\\":\\\"ums_ts_\\\",\\\"type\\\":[\\\"null\\\",\\\"string\\\"],\\\"default\\\":null}]}\";\n+\n+  private static String RESULT_SCHEMA = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"hoodie_source\\\",\\\"namespace\\\":\\\"hoodie.source\\\",\\\"fields\\\":[{\\\"name\\\":\\\"ums_id_\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},\"\n+                                            + \"{\\\"name\\\":\\\"ums_ts_\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]}]}\";\n+\n   @Test\n   public void testPostProcessor() throws IOException {\n     properties.put(Config.SCHEMA_POST_PROCESSOR_PROP, DummySchemaPostProcessor.class.getName());\n     SchemaProvider provider =\n         UtilHelpers.wrapSchemaProviderWithPostProcessor(\n         UtilHelpers.createSchemaProvider(DummySchemaProvider.class.getName(), properties, jsc),\n-            properties, jsc);\n+            properties, jsc,null);", "originalCommit": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwODI5MA==", "url": "https://github.com/apache/hudi/pull/2192#discussion_r535808290", "bodyText": "IMO, this naming is not good.", "author": "yanghua", "createdAt": "2020-12-04T03:26:13Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "diffHunk": "@@ -39,20 +44,51 @@\n \n   private TypedProperties properties = new TypedProperties();\n \n+  private static String ORIGINAL_SCHEMA = \"{\\\"name\\\":\\\"t3_biz_operation_t_driver\\\",\\\"type\\\":\\\"record\\\",\\\"fields\\\":[{\\\"name\\\":\\\"ums_id_\\\",\\\"type\\\":[\\\"null\\\",\\\"string\\\"],\\\"default\\\":null},\"\n+                                              + \"{\\\"name\\\":\\\"ums_ts_\\\",\\\"type\\\":[\\\"null\\\",\\\"string\\\"],\\\"default\\\":null}]}\";\n+\n+  private static String RESULT_SCHEMA = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"hoodie_source\\\",\\\"namespace\\\":\\\"hoodie.source\\\",\\\"fields\\\":[{\\\"name\\\":\\\"ums_id_\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},\"\n+                                            + \"{\\\"name\\\":\\\"ums_ts_\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]}]}\";\n+\n   @Test\n   public void testPostProcessor() throws IOException {\n     properties.put(Config.SCHEMA_POST_PROCESSOR_PROP, DummySchemaPostProcessor.class.getName());\n     SchemaProvider provider =\n         UtilHelpers.wrapSchemaProviderWithPostProcessor(\n         UtilHelpers.createSchemaProvider(DummySchemaProvider.class.getName(), properties, jsc),\n-            properties, jsc);\n+            properties, jsc,null);\n \n     Schema schema = provider.getSourceSchema();\n     assertEquals(schema.getType(), Type.RECORD);\n     assertEquals(schema.getName(), \"test\");\n     assertNotNull(schema.getField(\"testString\"));\n   }\n \n+  @Test\n+  public void testSparkAvro() throws IOException {", "originalCommit": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwODU5NA==", "url": "https://github.com/apache/hudi/pull/2192#discussion_r535808594", "bodyText": "WDYT about naming it to be testSparkAvroSchemaPostProcessor?", "author": "yanghua", "createdAt": "2020-12-04T03:27:09Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "diffHunk": "@@ -39,20 +44,51 @@\n \n   private TypedProperties properties = new TypedProperties();\n \n+  private static String ORIGINAL_SCHEMA = \"{\\\"name\\\":\\\"t3_biz_operation_t_driver\\\",\\\"type\\\":\\\"record\\\",\\\"fields\\\":[{\\\"name\\\":\\\"ums_id_\\\",\\\"type\\\":[\\\"null\\\",\\\"string\\\"],\\\"default\\\":null},\"\n+                                              + \"{\\\"name\\\":\\\"ums_ts_\\\",\\\"type\\\":[\\\"null\\\",\\\"string\\\"],\\\"default\\\":null}]}\";\n+\n+  private static String RESULT_SCHEMA = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"hoodie_source\\\",\\\"namespace\\\":\\\"hoodie.source\\\",\\\"fields\\\":[{\\\"name\\\":\\\"ums_id_\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},\"\n+                                            + \"{\\\"name\\\":\\\"ums_ts_\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]}]}\";\n+\n   @Test\n   public void testPostProcessor() throws IOException {\n     properties.put(Config.SCHEMA_POST_PROCESSOR_PROP, DummySchemaPostProcessor.class.getName());\n     SchemaProvider provider =\n         UtilHelpers.wrapSchemaProviderWithPostProcessor(\n         UtilHelpers.createSchemaProvider(DummySchemaProvider.class.getName(), properties, jsc),\n-            properties, jsc);\n+            properties, jsc,null);\n \n     Schema schema = provider.getSourceSchema();\n     assertEquals(schema.getType(), Type.RECORD);\n     assertEquals(schema.getName(), \"test\");\n     assertNotNull(schema.getField(\"testString\"));\n   }\n \n+  @Test\n+  public void testSparkAvro() throws IOException {\n+    properties.put(Config.SCHEMA_POST_PROCESSOR_PROP, SparkAvroPostProcessor.class.getName());\n+    List<String> transformerClassNames = new ArrayList<>();\n+    transformerClassNames.add(FlatteningTransformer.class.getName());\n+\n+    SchemaProvider provider =\n+            UtilHelpers.wrapSchemaProviderWithPostProcessor(\n+                    UtilHelpers.createSchemaProvider(SparkAvroSchemaProvider.class.getName(), properties, jsc),\n+                    properties, jsc, transformerClassNames);\n+\n+    Schema schema = provider.getSourceSchema();\n+    assertEquals(schema.getType(), Type.RECORD);\n+    assertEquals(schema.getName(), \"hoodie_source\");\n+    assertEquals(schema.getNamespace(), \"hoodie.source\");\n+    assertNotNull(schema.getField(\"day\"));\n+  }\n+\n+  @Test\n+  public void testSparkAvroSchema() throws IOException {", "originalCommit": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwODg2OA==", "url": "https://github.com/apache/hudi/pull/2192#discussion_r535808868", "bodyText": "wrong place", "author": "yanghua", "createdAt": "2020-12-04T03:27:56Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestSchemaPostProcessor.java", "diffHunk": "@@ -22,15 +22,20 @@\n import org.apache.hudi.utilities.schema.SchemaPostProcessor;\n import org.apache.hudi.utilities.schema.SchemaPostProcessor.Config;\n import org.apache.hudi.utilities.schema.SchemaProvider;\n+import org.apache.hudi.utilities.schema.SparkAvroPostProcessor;\n import org.apache.hudi.utilities.testutils.UtilitiesTestBase;\n \n import org.apache.avro.Schema;\n import org.apache.avro.Schema.Type;\n import org.apache.avro.SchemaBuilder;\n+\n+import org.apache.hudi.utilities.transform.FlatteningTransformer;", "originalCommit": "1e2bfd1eb9883bf0bc5195c61a4eef816be070d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}