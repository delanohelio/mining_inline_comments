{"pr_number": 1900, "pr_title": "[HUDI-531] Add java doc for hudi test suite general classes", "pr_createdAt": "2020-08-02T03:30:01Z", "pr_url": "https://github.com/apache/hudi/pull/1900", "timeline": [{"oid": "9fd433a8937404b19696427ba5e9d88e56dfbdaf", "url": "https://github.com/apache/hudi/commit/9fd433a8937404b19696427ba5e9d88e56dfbdaf", "message": "[HUDI-531]Add java doc for hudi test suite general classes", "committedDate": "2020-08-02T14:04:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0NDYwMg==", "url": "https://github.com/apache/hudi/pull/1900#discussion_r464144602", "bodyText": "bulkInsert Node -> bulk insert node?", "author": "yanghua", "createdAt": "2020-08-03T00:38:54Z", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/BulkInsertNode.java", "diffHunk": "@@ -24,6 +24,9 @@\n import org.apache.hudi.integ.testsuite.configuration.DeltaConfig.Config;\n import org.apache.spark.api.java.JavaRDD;\n \n+/**\n+ * Represents a bulkInsert Node in the DAG of operations for a workflow.", "originalCommit": "9fd433a8937404b19696427ba5e9d88e56dfbdaf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "587482b5c5fead2c2e7dbd970fe9a5a9d088a727", "chunk": "diff --git a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/BulkInsertNode.java b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/BulkInsertNode.java\nindex 63e54cd57..bdf57f8d1 100644\n--- a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/BulkInsertNode.java\n+++ b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/BulkInsertNode.java\n\n@@ -25,7 +25,7 @@ import org.apache.hudi.integ.testsuite.configuration.DeltaConfig.Config;\n import org.apache.spark.api.java.JavaRDD;\n \n /**\n- * Represents a bulkInsert Node in the DAG of operations for a workflow.\n+ * Represents a bulk insert node in the DAG of operations for a workflow.\n  */\n public class BulkInsertNode extends InsertNode {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0NDY0Ng==", "url": "https://github.com/apache/hudi/pull/1900#discussion_r464144646", "bodyText": "Node -> node?", "author": "yanghua", "createdAt": "2020-08-03T00:39:09Z", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/CleanNode.java", "diffHunk": "@@ -20,6 +20,9 @@\n \n import org.apache.hudi.integ.testsuite.dag.ExecutionContext;\n \n+/**\n+ * Represents a clean Node in the DAG of operations for a workflow.", "originalCommit": "9fd433a8937404b19696427ba5e9d88e56dfbdaf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "587482b5c5fead2c2e7dbd970fe9a5a9d088a727", "chunk": "diff --git a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/CleanNode.java b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/CleanNode.java\nindex 434b1736f..de0c009e1 100644\n--- a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/CleanNode.java\n+++ b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/CleanNode.java\n\n@@ -21,7 +21,7 @@ package org.apache.hudi.integ.testsuite.dag.nodes;\n import org.apache.hudi.integ.testsuite.dag.ExecutionContext;\n \n /**\n- * Represents a clean Node in the DAG of operations for a workflow.\n+ * Represents a clean node in the DAG of operations for a workflow.\n  */\n public class CleanNode extends DagNode<Boolean> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0NDcwNg==", "url": "https://github.com/apache/hudi/pull/1900#discussion_r464144706", "bodyText": "ditto", "author": "yanghua", "createdAt": "2020-08-03T00:39:33Z", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/CompactNode.java", "diffHunk": "@@ -26,6 +26,9 @@\n import org.apache.hudi.integ.testsuite.dag.ExecutionContext;\n import org.apache.spark.api.java.JavaRDD;\n \n+/**\n+ * Represents a compact Node in the DAG of operations for a workflow.", "originalCommit": "9fd433a8937404b19696427ba5e9d88e56dfbdaf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "587482b5c5fead2c2e7dbd970fe9a5a9d088a727", "chunk": "diff --git a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/CompactNode.java b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/CompactNode.java\nindex 314f7b27a..98e03c3f4 100644\n--- a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/CompactNode.java\n+++ b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/CompactNode.java\n\n@@ -27,7 +27,7 @@ import org.apache.hudi.integ.testsuite.dag.ExecutionContext;\n import org.apache.spark.api.java.JavaRDD;\n \n /**\n- * Represents a compact Node in the DAG of operations for a workflow.\n+ * Represents a compact node in the DAG of operations for a workflow.\n  */\n public class CompactNode extends DagNode<JavaRDD<WriteStatus>> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0NDczNQ==", "url": "https://github.com/apache/hudi/pull/1900#discussion_r464144735", "bodyText": "ditto", "author": "yanghua", "createdAt": "2020-08-03T00:39:47Z", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/HiveQueryNode.java", "diffHunk": "@@ -30,6 +30,9 @@\n import org.apache.hudi.integ.testsuite.dag.ExecutionContext;\n import org.apache.hudi.integ.testsuite.helpers.HiveServiceProvider;\n \n+/**\n+ * Represents a hive query Node in the DAG of operations for a workflow.", "originalCommit": "9fd433a8937404b19696427ba5e9d88e56dfbdaf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "587482b5c5fead2c2e7dbd970fe9a5a9d088a727", "chunk": "diff --git a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/HiveQueryNode.java b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/HiveQueryNode.java\nindex 3c1a9e32e..579612b6e 100644\n--- a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/HiveQueryNode.java\n+++ b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/HiveQueryNode.java\n\n@@ -31,7 +31,7 @@ import org.apache.hudi.integ.testsuite.dag.ExecutionContext;\n import org.apache.hudi.integ.testsuite.helpers.HiveServiceProvider;\n \n /**\n- * Represents a hive query Node in the DAG of operations for a workflow.\n+ * Represents a hive query node in the DAG of operations for a workflow.\n  */\n public class HiveQueryNode extends DagNode<Boolean> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0NDg3OA==", "url": "https://github.com/apache/hudi/pull/1900#discussion_r464144878", "bodyText": "DagScheduler  -> DAG scheduler", "author": "yanghua", "createdAt": "2020-08-03T00:40:51Z", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/scheduler/DagScheduler.java", "diffHunk": "@@ -37,6 +37,9 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+/**\n+ * The DagScheduler schedules the workflowDag.", "originalCommit": "9fd433a8937404b19696427ba5e9d88e56dfbdaf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "587482b5c5fead2c2e7dbd970fe9a5a9d088a727", "chunk": "diff --git a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/scheduler/DagScheduler.java b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/scheduler/DagScheduler.java\nindex 70bfe5de6..f71d4f524 100644\n--- a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/scheduler/DagScheduler.java\n+++ b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/scheduler/DagScheduler.java\n\n@@ -38,7 +38,7 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- * The DagScheduler schedules the workflowDag.\n+ * The Dag scheduler schedules the workflow DAGs.\n  */\n public class DagScheduler {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0NDk0Nw==", "url": "https://github.com/apache/hudi/pull/1900#discussion_r464144947", "bodyText": "workflowDags  -> workflow DAGs", "author": "yanghua", "createdAt": "2020-08-03T00:41:30Z", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/scheduler/DagScheduler.java", "diffHunk": "@@ -48,6 +51,11 @@ public DagScheduler(WorkflowDag workflowDag, HoodieTestSuiteWriter hoodieTestSui\n     this.executionContext = new ExecutionContext(null, hoodieTestSuiteWriter, deltaGenerator);\n   }\n \n+  /**\n+   * Method to start execute workflowDags.", "originalCommit": "9fd433a8937404b19696427ba5e9d88e56dfbdaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzNDc0NQ==", "url": "https://github.com/apache/hudi/pull/1900#discussion_r466834745", "bodyText": "execute -> executing.", "author": "pratyakshsharma", "createdAt": "2020-08-07T05:50:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0NDk0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "587482b5c5fead2c2e7dbd970fe9a5a9d088a727", "chunk": "diff --git a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/scheduler/DagScheduler.java b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/scheduler/DagScheduler.java\nindex 70bfe5de6..f71d4f524 100644\n--- a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/scheduler/DagScheduler.java\n+++ b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/scheduler/DagScheduler.java\n\n@@ -52,7 +52,7 @@ public class DagScheduler {\n   }\n \n   /**\n-   * Method to start execute workflowDags.\n+   * Method to start executing workflow DAGs.\n    *\n    * @throws Exception Thrown if schedule failed.\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzNDI3OA==", "url": "https://github.com/apache/hudi/pull/1900#discussion_r466834278", "bodyText": "execute -> execution", "author": "pratyakshsharma", "createdAt": "2020-08-07T05:49:09Z", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/DagNode.java", "diffHunk": "@@ -76,6 +76,12 @@ public void setParentNodes(List<DagNode<O>> parentNodes) {\n     this.parentNodes = parentNodes;\n   }\n \n+  /**\n+   * Execute the {@link DagNode}.\n+   *\n+   * @param context The context needed for an execute of a node.", "originalCommit": "9fd433a8937404b19696427ba5e9d88e56dfbdaf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "587482b5c5fead2c2e7dbd970fe9a5a9d088a727", "chunk": "diff --git a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/DagNode.java b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/DagNode.java\nindex bb25a0fff..a9027fe3d 100644\n--- a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/DagNode.java\n+++ b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/DagNode.java\n\n@@ -79,8 +79,8 @@ public abstract class DagNode<O> implements Comparable<DagNode<O>> {\n   /**\n    * Execute the {@link DagNode}.\n    *\n-   * @param context The context needed for an execute of a node.\n-   * @throws Exception Thrown if the Execution failed.\n+   * @param context The context needed for an execution of a node.\n+   * @throws Exception Thrown if the execution failed.\n    */\n   public abstract void execute(ExecutionContext context) throws Exception;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzNDM3MA==", "url": "https://github.com/apache/hudi/pull/1900#discussion_r466834370", "bodyText": "Execution -> execution.", "author": "pratyakshsharma", "createdAt": "2020-08-07T05:49:29Z", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/DagNode.java", "diffHunk": "@@ -76,6 +76,12 @@ public void setParentNodes(List<DagNode<O>> parentNodes) {\n     this.parentNodes = parentNodes;\n   }\n \n+  /**\n+   * Execute the {@link DagNode}.\n+   *\n+   * @param context The context needed for an execute of a node.\n+   * @throws Exception Thrown if the Execution failed.", "originalCommit": "9fd433a8937404b19696427ba5e9d88e56dfbdaf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "587482b5c5fead2c2e7dbd970fe9a5a9d088a727", "chunk": "diff --git a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/DagNode.java b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/DagNode.java\nindex bb25a0fff..a9027fe3d 100644\n--- a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/DagNode.java\n+++ b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/dag/nodes/DagNode.java\n\n@@ -79,8 +79,8 @@ public abstract class DagNode<O> implements Comparable<DagNode<O>> {\n   /**\n    * Execute the {@link DagNode}.\n    *\n-   * @param context The context needed for an execute of a node.\n-   * @throws Exception Thrown if the Execution failed.\n+   * @param context The context needed for an execution of a node.\n+   * @throws Exception Thrown if the execution failed.\n    */\n   public abstract void execute(ExecutionContext context) throws Exception;\n \n"}}, {"oid": "587482b5c5fead2c2e7dbd970fe9a5a9d088a727", "url": "https://github.com/apache/hudi/commit/587482b5c5fead2c2e7dbd970fe9a5a9d088a727", "message": "[HUDI-531]Add java doc for hudi test suite general classes", "committedDate": "2020-08-08T03:19:19Z", "type": "forcePushed"}, {"oid": "0be048a527b5b475894c7d5368795879604cb8f9", "url": "https://github.com/apache/hudi/commit/0be048a527b5b475894c7d5368795879604cb8f9", "message": "[HUDI-531]Add java doc for hudi test suite general classes", "committedDate": "2020-08-08T05:56:44Z", "type": "forcePushed"}, {"oid": "a109b20c6d3752e4794bb2777ecc5e7c327d8473", "url": "https://github.com/apache/hudi/commit/a109b20c6d3752e4794bb2777ecc5e7c327d8473", "message": "[HUDI-531]Add java doc for hudi test suite general classes", "committedDate": "2020-08-09T09:25:17Z", "type": "forcePushed"}, {"oid": "ec52824326338fbd5c50c96910b19107f9fca448", "url": "https://github.com/apache/hudi/commit/ec52824326338fbd5c50c96910b19107f9fca448", "message": "[HUDI-531]Add java doc for hudi test suite general classes", "committedDate": "2020-08-09T11:01:01Z", "type": "forcePushed"}, {"oid": "7ded66530fc1cdbfe135de8542d39c0076296953", "url": "https://github.com/apache/hudi/commit/7ded66530fc1cdbfe135de8542d39c0076296953", "message": "[HUDI-531]Add java doc for hudi test suite general classes", "committedDate": "2020-08-10T06:42:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM0MTAxOQ==", "url": "https://github.com/apache/hudi/pull/1900#discussion_r478341019", "bodyText": "IMO, we do not need this comment.", "author": "yanghua", "createdAt": "2020-08-27T11:18:06Z", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/configuration/DeltaConfig.java", "diffHunk": "@@ -35,7 +35,13 @@\n  */\n public class DeltaConfig implements Serializable {\n \n+  /**\n+   * Output destination type.", "originalCommit": "7ded66530fc1cdbfe135de8542d39c0076296953", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b6de3aa83adcd3c039381408ac7843575ff50f06", "chunk": "diff --git a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/configuration/DeltaConfig.java b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/configuration/DeltaConfig.java\nindex 4d9b7efdc..30fa58442 100644\n--- a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/configuration/DeltaConfig.java\n+++ b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/configuration/DeltaConfig.java\n\n@@ -35,13 +35,7 @@ import org.apache.hudi.integ.testsuite.writer.DeltaOutputMode;\n  */\n public class DeltaConfig implements Serializable {\n \n-  /**\n-   * Output destination type.\n-   */\n   private final DeltaOutputMode deltaOutputMode;\n-  /**\n-   * Input data type.\n-   */\n   private final DeltaInputType deltaInputType;\n   private final SerializableConfiguration configuration;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM0MTA3Mw==", "url": "https://github.com/apache/hudi/pull/1900#discussion_r478341073", "bodyText": "ditto", "author": "yanghua", "createdAt": "2020-08-27T11:18:14Z", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/configuration/DeltaConfig.java", "diffHunk": "@@ -35,7 +35,13 @@\n  */\n public class DeltaConfig implements Serializable {\n \n+  /**\n+   * Output destination type.\n+   */\n   private final DeltaOutputMode deltaOutputMode;\n+  /**\n+   * Input data type.", "originalCommit": "7ded66530fc1cdbfe135de8542d39c0076296953", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b6de3aa83adcd3c039381408ac7843575ff50f06", "chunk": "diff --git a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/configuration/DeltaConfig.java b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/configuration/DeltaConfig.java\nindex 4d9b7efdc..30fa58442 100644\n--- a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/configuration/DeltaConfig.java\n+++ b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/configuration/DeltaConfig.java\n\n@@ -35,13 +35,7 @@ import org.apache.hudi.integ.testsuite.writer.DeltaOutputMode;\n  */\n public class DeltaConfig implements Serializable {\n \n-  /**\n-   * Output destination type.\n-   */\n   private final DeltaOutputMode deltaOutputMode;\n-  /**\n-   * Input data type.\n-   */\n   private final DeltaInputType deltaInputType;\n   private final SerializableConfiguration configuration;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM0MjY1NQ==", "url": "https://github.com/apache/hudi/pull/1900#discussion_r478342655", "bodyText": "we may not change this.", "author": "yanghua", "createdAt": "2020-08-27T11:21:28Z", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java", "diffHunk": "@@ -43,22 +44,39 @@\n  */\n public class GenericRecordFullPayloadGenerator implements Serializable {\n \n-  public static final int DEFAULT_PAYLOAD_SIZE = 1024 * 10; // 10 KB\n+  /**\n+   * 10 KB.", "originalCommit": "7ded66530fc1cdbfe135de8542d39c0076296953", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b6de3aa83adcd3c039381408ac7843575ff50f06", "chunk": "diff --git a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java\nindex 9f3dbc4f1..4e99f5ca6 100644\n--- a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java\n+++ b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java\n\n@@ -44,39 +44,22 @@ import org.slf4j.LoggerFactory;\n  */\n public class GenericRecordFullPayloadGenerator implements Serializable {\n \n-  /**\n-   * 10 KB.\n-   */\n-  public static final int DEFAULT_PAYLOAD_SIZE = 1024 * 10;\n+  public static final int DEFAULT_PAYLOAD_SIZE = 1024 * 10; // 10KB\n   private static Logger log = LoggerFactory.getLogger(GenericRecordFullPayloadGenerator.class);\n   protected final Random random = new Random();\n-  /**\n-   * The source schema used to generate a payload.\n-   */\n+  // The source schema used to generate a payload\n   private final transient Schema baseSchema;\n-  /**\n-   * Used to validate a generic record.\n-   */\n+  // Used to validate a generic record\n   private final transient GenericData genericData = new GenericData();\n-  /**\n-   * Number of more bytes to add based on the estimated full record payload size and min payload size.\n-   */\n+  // Number of more bytes to add based on the estimated full record payload size and min payload size\n   private int numberOfBytesToAdd;\n-  /**\n-   * If more elements should be packed to meet the minPayloadSize.\n-   */\n+  // If more elements should be packed to meet the minPayloadSize\n   private boolean shouldAddMore;\n-  /**\n-   * How many complex fields have we visited that can help us pack more entries and increase the size of the record.\n-   */\n+  // How many complex fields have we visited that can help us pack more entries and increase the size of the record\n   private int numberOfComplexFields;\n-  /**\n-   * The size of a full record where every field of a generic record created contains 1 random value.\n-   */\n+  // The size of a full record where every field of a generic record created contains 1 random value\n   private int estimatedFullPayloadSize;\n-  /**\n-   * LogicalTypes in Avro 1.8.2.\n-   */\n+  // LogicalTypes in Avro 1.8.2\n   private static final String DECIMAL = \"decimal\";\n   private static final String UUID_NAME = \"uuid\";\n   private static final String DATE = \"date\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM0MjkyOQ==", "url": "https://github.com/apache/hudi/pull/1900#discussion_r478342929", "bodyText": "Why we should change these comment styles for fields?", "author": "yanghua", "createdAt": "2020-08-27T11:21:59Z", "path": "hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java", "diffHunk": "@@ -43,22 +44,39 @@\n  */\n public class GenericRecordFullPayloadGenerator implements Serializable {\n \n-  public static final int DEFAULT_PAYLOAD_SIZE = 1024 * 10; // 10 KB\n+  /**\n+   * 10 KB.\n+   */\n+  public static final int DEFAULT_PAYLOAD_SIZE = 1024 * 10;\n   private static Logger log = LoggerFactory.getLogger(GenericRecordFullPayloadGenerator.class);\n   protected final Random random = new Random();\n-  // The source schema used to generate a payload\n+  /**\n+   * The source schema used to generate a payload.", "originalCommit": "7ded66530fc1cdbfe135de8542d39c0076296953", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQyMzI1NQ==", "url": "https://github.com/apache/hudi/pull/1900#discussion_r478423255", "bodyText": "Why we should change these comment styles for fields?\n\nmy bad,  that`s the coding guidelines of Alibaba.\nrolled back already :)", "author": "wangxianghu", "createdAt": "2020-08-27T13:34:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM0MjkyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b6de3aa83adcd3c039381408ac7843575ff50f06", "chunk": "diff --git a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java\nindex 9f3dbc4f1..4e99f5ca6 100644\n--- a/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java\n+++ b/hudi-integ-test/src/main/java/org/apache/hudi/integ/testsuite/generator/GenericRecordFullPayloadGenerator.java\n\n@@ -44,39 +44,22 @@ import org.slf4j.LoggerFactory;\n  */\n public class GenericRecordFullPayloadGenerator implements Serializable {\n \n-  /**\n-   * 10 KB.\n-   */\n-  public static final int DEFAULT_PAYLOAD_SIZE = 1024 * 10;\n+  public static final int DEFAULT_PAYLOAD_SIZE = 1024 * 10; // 10KB\n   private static Logger log = LoggerFactory.getLogger(GenericRecordFullPayloadGenerator.class);\n   protected final Random random = new Random();\n-  /**\n-   * The source schema used to generate a payload.\n-   */\n+  // The source schema used to generate a payload\n   private final transient Schema baseSchema;\n-  /**\n-   * Used to validate a generic record.\n-   */\n+  // Used to validate a generic record\n   private final transient GenericData genericData = new GenericData();\n-  /**\n-   * Number of more bytes to add based on the estimated full record payload size and min payload size.\n-   */\n+  // Number of more bytes to add based on the estimated full record payload size and min payload size\n   private int numberOfBytesToAdd;\n-  /**\n-   * If more elements should be packed to meet the minPayloadSize.\n-   */\n+  // If more elements should be packed to meet the minPayloadSize\n   private boolean shouldAddMore;\n-  /**\n-   * How many complex fields have we visited that can help us pack more entries and increase the size of the record.\n-   */\n+  // How many complex fields have we visited that can help us pack more entries and increase the size of the record\n   private int numberOfComplexFields;\n-  /**\n-   * The size of a full record where every field of a generic record created contains 1 random value.\n-   */\n+  // The size of a full record where every field of a generic record created contains 1 random value\n   private int estimatedFullPayloadSize;\n-  /**\n-   * LogicalTypes in Avro 1.8.2.\n-   */\n+  // LogicalTypes in Avro 1.8.2\n   private static final String DECIMAL = \"decimal\";\n   private static final String UUID_NAME = \"uuid\";\n   private static final String DATE = \"date\";\n"}}, {"oid": "b6de3aa83adcd3c039381408ac7843575ff50f06", "url": "https://github.com/apache/hudi/commit/b6de3aa83adcd3c039381408ac7843575ff50f06", "message": "[HUDI-531]Add java doc for hudi test suite general classes", "committedDate": "2020-08-27T13:35:45Z", "type": "forcePushed"}, {"oid": "8ed7b5d46091a12d601bed798cbb65b3731f52aa", "url": "https://github.com/apache/hudi/commit/8ed7b5d46091a12d601bed798cbb65b3731f52aa", "message": "[HUDI-531]Add java doc for hudi test suite general classes", "committedDate": "2020-08-27T13:44:09Z", "type": "commit"}, {"oid": "8ed7b5d46091a12d601bed798cbb65b3731f52aa", "url": "https://github.com/apache/hudi/commit/8ed7b5d46091a12d601bed798cbb65b3731f52aa", "message": "[HUDI-531]Add java doc for hudi test suite general classes", "committedDate": "2020-08-27T13:44:09Z", "type": "forcePushed"}]}