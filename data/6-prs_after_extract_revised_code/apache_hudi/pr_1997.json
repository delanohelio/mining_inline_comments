{"pr_number": 1997, "pr_title": "[HUDI-781] Introduce HoodieTestTable for test preparation", "pr_createdAt": "2020-08-20T11:12:42Z", "pr_url": "https://github.com/apache/hudi/pull/1997", "timeline": [{"oid": "404986d2b59041990d3413f38efd9a62d001cb42", "url": "https://github.com/apache/hudi/commit/404986d2b59041990d3413f38efd9a62d001cb42", "message": "[HUDI-781] Introduce HoodieTestTable for test preparation", "committedDate": "2020-08-20T11:10:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3MTkzMA==", "url": "https://github.com/apache/hudi/pull/1997#discussion_r474071930", "bodyText": "Why do not move it right now?", "author": "yanghua", "createdAt": "2020-08-20T15:30:28Z", "path": "hudi-client/src/test/java/org/apache/hudi/testutils/HoodieClientTestUtils.java", "diffHunk": "@@ -289,27 +245,9 @@ public static String writeParquetFile(String basePath, String partitionPath, Lis\n         createCommitTime);\n   }\n \n-  public static String createNewMarkerFile(String basePath, String partitionPath, String instantTime)\n-      throws IOException {\n-    return createMarkerFile(basePath, partitionPath, instantTime);\n-  }\n-\n-  public static String createMarkerFile(String basePath, String partitionPath, String instantTime)\n-          throws IOException {\n-    return createMarkerFile(basePath, partitionPath, instantTime, UUID.randomUUID().toString(), IOType.MERGE);\n-  }\n-\n-  public static String createMarkerFile(String basePath, String partitionPath, String instantTime, String fileID, IOType ioType)\n-          throws IOException {\n-    String folderPath = basePath + \"/\" + HoodieTableMetaClient.TEMPFOLDER_NAME + \"/\" + instantTime + \"/\" + partitionPath + \"/\";\n-    new File(folderPath).mkdirs();\n-    String markerFileName = String.format(\"%s_%s_%s%s%s.%s\", fileID, DEFAULT_WRITE_TOKEN, instantTime,\n-        HoodieFileFormat.PARQUET.getFileExtension(), HoodieTableMetaClient.MARKER_EXTN, ioType);\n-    File f = new File(folderPath + markerFileName);\n-    f.createNewFile();\n-    return f.getAbsolutePath();\n-  }\n-\n+  /**\n+   * TODO move to {@link FileCreateUtils}.", "originalCommit": "404986d2b59041990d3413f38efd9a62d001cb42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0NTQ0Mg==", "url": "https://github.com/apache/hudi/pull/1997#discussion_r474145442", "bodyText": "yea good candidate to be moved.", "author": "xushiyan", "createdAt": "2020-08-20T17:11:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3MTkzMA=="}], "type": "inlineReview", "revised_code": {"commit": "0f5e7f4bf2bfb280a42e3b79b47db7068f1de6be", "chunk": "diff --git a/hudi-client/src/test/java/org/apache/hudi/testutils/HoodieClientTestUtils.java b/hudi-client/src/test/java/org/apache/hudi/testutils/HoodieClientTestUtils.java\nindex cc0eba5296..bcae5262ae 100644\n--- a/hudi-client/src/test/java/org/apache/hudi/testutils/HoodieClientTestUtils.java\n+++ b/hudi-client/src/test/java/org/apache/hudi/testutils/HoodieClientTestUtils.java\n\n@@ -245,34 +244,4 @@ public class HoodieClientTestUtils {\n         createCommitTime);\n   }\n \n-  /**\n-   * TODO move to {@link FileCreateUtils}.\n-   */\n-  public static void createMarkerFile(String basePath, String partitionPath, String instantTime, String dataFileName) throws IOException {\n-    createTempFolderForMarkerFiles(basePath);\n-    String folderPath = getTempFolderName(basePath);\n-    // create dir for this instant\n-    new File(folderPath + \"/\" + instantTime + \"/\" + partitionPath).mkdirs();\n-    new File(folderPath + \"/\" + instantTime + \"/\" + partitionPath + \"/\" + dataFileName + \".marker.MERGE\").createNewFile();\n-  }\n-\n-  /**\n-   * TODO Incorporate into {@link org.apache.hudi.common.testutils.HoodieTestTable}.\n-   */\n-  public static int getTotalMarkerFileCount(String basePath, String partitionPath, String instantTime) {\n-    String folderPath = getTempFolderName(basePath);\n-    File markerDir = new File(folderPath + \"/\" + instantTime + \"/\" + partitionPath);\n-    if (markerDir.exists()) {\n-      return markerDir.listFiles((dir, name) -> name.contains(\".marker.MERGE\")).length;\n-    }\n-    return 0;\n-  }\n-\n-  private static void createTempFolderForMarkerFiles(String basePath) {\n-    new File(basePath + \"/\" + HoodieTableMetaClient.TEMPFOLDER_NAME).mkdirs();\n-  }\n-\n-  private static String getTempFolderName(String basePath) {\n-    return basePath + \"/\" + HoodieTableMetaClient.TEMPFOLDER_NAME;\n-  }\n }\n"}}, {"oid": "0f5e7f4bf2bfb280a42e3b79b47db7068f1de6be", "url": "https://github.com/apache/hudi/commit/0f5e7f4bf2bfb280a42e3b79b47db7068f1de6be", "message": "move to FileCreateUtils", "committedDate": "2020-08-20T17:08:24Z", "type": "commit"}, {"oid": "0f5e7f4bf2bfb280a42e3b79b47db7068f1de6be", "url": "https://github.com/apache/hudi/commit/0f5e7f4bf2bfb280a42e3b79b47db7068f1de6be", "message": "move to FileCreateUtils", "committedDate": "2020-08-20T17:08:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM0NDI5MA==", "url": "https://github.com/apache/hudi/pull/1997#discussion_r474344290", "bodyText": "And here?", "author": "yanghua", "createdAt": "2020-08-21T00:35:05Z", "path": "hudi-client/src/test/java/org/apache/hudi/testutils/HoodieClientTestUtils.java", "diffHunk": "@@ -227,6 +174,8 @@ public static SparkConf getSparkConfForTest(String appName) {\n \n   /**\n    * Find total basefiles for passed in paths.\n+   * <p>\n+   * TODO move to {@link FileCreateUtils}.", "originalCommit": "0f5e7f4bf2bfb280a42e3b79b47db7068f1de6be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM0OTg3OA==", "url": "https://github.com/apache/hudi/pull/1997#discussion_r474349878", "bodyText": "yup good catch.", "author": "xushiyan", "createdAt": "2020-08-21T00:56:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM0NDI5MA=="}], "type": "inlineReview", "revised_code": {"commit": "257c38a80ea43740965beda4a04cf2a33d3199e2", "chunk": "diff --git a/hudi-client/src/test/java/org/apache/hudi/testutils/HoodieClientTestUtils.java b/hudi-client/src/test/java/org/apache/hudi/testutils/HoodieClientTestUtils.java\nindex bcae5262ae..353b34c106 100644\n--- a/hudi-client/src/test/java/org/apache/hudi/testutils/HoodieClientTestUtils.java\n+++ b/hudi-client/src/test/java/org/apache/hudi/testutils/HoodieClientTestUtils.java\n\n@@ -172,28 +170,6 @@ public class HoodieClientTestUtils {\n     }\n   }\n \n-  /**\n-   * Find total basefiles for passed in paths.\n-   * <p>\n-   * TODO move to {@link FileCreateUtils}.\n-   */\n-  public static Map<String, Integer> getBaseFileCountForPaths(String basePath, FileSystem fs,\n-      String... paths) {\n-    Map<String, Integer> toReturn = new HashMap<>();\n-    try {\n-      HoodieTableMetaClient metaClient = new HoodieTableMetaClient(fs.getConf(), basePath, true);\n-      for (String path : paths) {\n-        BaseFileOnlyView fileSystemView = new HoodieTableFileSystemView(metaClient,\n-            metaClient.getCommitsTimeline().filterCompletedInstants(), fs.globStatus(new Path(path)));\n-        List<HoodieBaseFile> latestFiles = fileSystemView.getLatestBaseFiles().collect(Collectors.toList());\n-        toReturn.put(path, latestFiles.size());\n-      }\n-      return toReturn;\n-    } catch (Exception e) {\n-      throw new HoodieException(\"Error reading hoodie table as a dataframe\", e);\n-    }\n-  }\n-\n   /**\n    * TODO Incorporate into {@link org.apache.hudi.common.testutils.HoodieTestTable}.\n    */\n"}}, {"oid": "257c38a80ea43740965beda4a04cf2a33d3199e2", "url": "https://github.com/apache/hudi/commit/257c38a80ea43740965beda4a04cf2a33d3199e2", "message": "move to FileCreateUtils", "committedDate": "2020-08-21T00:56:48Z", "type": "commit"}]}