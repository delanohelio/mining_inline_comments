{"pr_number": 1886, "pr_title": "[HUDI-1122] Introduce a kafka implementation of hoodie write commit ca\u2026", "pr_createdAt": "2020-07-29T13:22:07Z", "pr_url": "https://github.com/apache/hudi/pull/1886", "timeline": [{"oid": "916cf08d12bbfbee62716637777557e248779026", "url": "https://github.com/apache/hudi/commit/916cf08d12bbfbee62716637777557e248779026", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback", "committedDate": "2020-07-29T13:48:00Z", "type": "forcePushed"}, {"oid": "6cc6bd5a38a9ce7197ee0d2a0c23e20e082c7ba3", "url": "https://github.com/apache/hudi/commit/6cc6bd5a38a9ce7197ee0d2a0c23e20e082c7ba3", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback", "committedDate": "2020-07-29T13:58:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0NTY0Mw==", "url": "https://github.com/apache/hudi/pull/1886#discussion_r464145643", "bodyText": "If you do not want to add the comments for @param and @return. Just remove them.", "author": "yanghua", "createdAt": "2020-08-03T00:47:08Z", "path": "hudi-client/src/main/java/org/apache/hudi/callback/util/HoodieWriteCommitCallbackUtil.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.callback.util;\n+\n+import org.apache.hudi.exception.HoodieCommitCallbackException;\n+\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Util helps to prepare callback message.\n+ */\n+public class HoodieWriteCommitCallbackUtil {\n+\n+  /**\n+   * Convert data to json string format.\n+   *\n+   * @param obj", "originalCommit": "6cc6bd5a38a9ce7197ee0d2a0c23e20e082c7ba3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE2NDg2Nw==", "url": "https://github.com/apache/hudi/pull/1886#discussion_r464164867", "bodyText": "If you do not want to add the comments for @param and @return. Just remove them.\n\nyes, will remove it", "author": "wangxianghu", "createdAt": "2020-08-03T02:33:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0NTY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c6cf2ed4467b2ad78b7aaca93b99cace5890814f", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/callback/util/HoodieWriteCommitCallbackUtil.java b/hudi-client/src/main/java/org/apache/hudi/callback/util/HoodieWriteCommitCallbackUtil.java\nindex 65baa8563..ed9c66d1b 100644\n--- a/hudi-client/src/main/java/org/apache/hudi/callback/util/HoodieWriteCommitCallbackUtil.java\n+++ b/hudi-client/src/main/java/org/apache/hudi/callback/util/HoodieWriteCommitCallbackUtil.java\n\n@@ -30,9 +30,6 @@ public class HoodieWriteCommitCallbackUtil {\n \n   /**\n    * Convert data to json string format.\n-   *\n-   * @param obj\n-   * @return\n    */\n   public static String convertToJsonString(Object obj) {\n     // convert to json\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0NjE5NQ==", "url": "https://github.com/apache/hudi/pull/1886#discussion_r464146195", "bodyText": "I am thinking one thing: the config options of the callback feature for Kafka are left in hudi-client, while the implementation hosts in hudi-utilities, if it's suitable.", "author": "yanghua", "createdAt": "2020-08-03T00:51:19Z", "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteCommitCallbackConfig.java", "diffHunk": "@@ -91,13 +103,44 @@ public Builder withCallbackHttpApiKey(String apiKey) {\n       return this;\n     }\n \n+    public Builder withCallbackKafkaBootstrapServers(String kafkaBootstrapServers) {", "originalCommit": "6cc6bd5a38a9ce7197ee0d2a0c23e20e082c7ba3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE2NTM1OA==", "url": "https://github.com/apache/hudi/pull/1886#discussion_r464165358", "bodyText": "I am thinking one thing: the config options of the callback feature for Kafka are left in hudi-client, while the implementation hosts in hudi-utilities, if it's suitable.\n\nIt is truly a problem. since kafka callback implementation is placed in hudi-utilities, the config should be there too. will move it", "author": "wangxianghu", "createdAt": "2020-08-03T02:35:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0NjE5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c6cf2ed4467b2ad78b7aaca93b99cace5890814f", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteCommitCallbackConfig.java b/hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteCommitCallbackConfig.java\nindex 4cc7ccd28..126e4f019 100644\n--- a/hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteCommitCallbackConfig.java\n+++ b/hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteCommitCallbackConfig.java\n\n@@ -103,31 +92,6 @@ public class HoodieWriteCommitCallbackConfig extends DefaultHoodieConfig {\n       return this;\n     }\n \n-    public Builder withCallbackKafkaBootstrapServers(String kafkaBootstrapServers) {\n-      props.setProperty(CALLBACK_KAFKA_BOOTSTRAP_SERVERS, kafkaBootstrapServers);\n-      return this;\n-    }\n-\n-    public Builder withCallbackKafkaTopic(String topic) {\n-      props.setProperty(CALLBACK_KAFKA_TOPIC, topic);\n-      return this;\n-    }\n-\n-    public Builder withCallbackKafkaPartition(int partition) {\n-      props.setProperty(CALLBACK_KAFKA_PARTITION, String.valueOf(partition));\n-      return this;\n-    }\n-\n-    public Builder withCallbackKafkaAcks(String acks) {\n-      props.setProperty(CALLBACK_KAFKA_ACKS, acks);\n-      return this;\n-    }\n-\n-    public Builder withCallbackKafkaRetries(String retries) {\n-      props.setProperty(CALLBACK_KAFKA_RETRIES, retries);\n-      return this;\n-    }\n-\n     public HoodieWriteCommitCallbackConfig build() {\n       HoodieWriteCommitCallbackConfig config = new HoodieWriteCommitCallbackConfig(props);\n       setDefaultOnCondition(props, !props.containsKey(CALLBACK_ON), CALLBACK_ON, String.valueOf(DEFAULT_CALLBACK_ON));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0NjUzMg==", "url": "https://github.com/apache/hudi/pull/1886#discussion_r464146532", "bodyText": "Shall we use try-with-resource or try-catch block to prevent leaking resources?", "author": "yanghua", "createdAt": "2020-08-03T00:53:45Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.callback.kafka;\n+\n+import org.apache.hudi.callback.HoodieWriteCommitCallback;\n+import org.apache.hudi.callback.common.HoodieWriteCommitCallbackMessage;\n+import org.apache.hudi.callback.util.HoodieWriteCommitCallbackUtil;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.util.Properties;\n+\n+/**\n+ * Kafka implementation of {@link HoodieWriteCommitCallback}.\n+ */\n+public class HoodieWriteCommitKafkaCallback implements HoodieWriteCommitCallback {\n+\n+  private static final Logger LOG = LogManager.getLogger(HoodieWriteCommitKafkaCallback.class);\n+\n+  private KafkaProducer<String, String> producer;\n+  private Properties props;\n+\n+  public HoodieWriteCommitKafkaCallback(HoodieWriteConfig config) {\n+    this.props = config.getProps();\n+    this.producer = HoodieWriteCommitKafkaCallbackUtil.createProducer(props);\n+  }\n+\n+  @Override\n+  public void call(HoodieWriteCommitCallbackMessage callbackMessage) {\n+    String callbackMsg = HoodieWriteCommitCallbackUtil.convertToJsonString(callbackMessage);\n+    ProducerRecord<String, String> record = HoodieWriteCommitKafkaCallbackUtil.buildProducerRecord(props, callbackMsg);\n+    producer.send(record, new ProducerSendCallback());\n+    producer.close();", "originalCommit": "6cc6bd5a38a9ce7197ee0d2a0c23e20e082c7ba3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE2NTUwNw==", "url": "https://github.com/apache/hudi/pull/1886#discussion_r464165507", "bodyText": "Shall we use try-with-resource or try-catch block to prevent leaking resources?\n\nyes, will do", "author": "wangxianghu", "createdAt": "2020-08-03T02:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0NjUzMg=="}], "type": "inlineReview", "revised_code": {"commit": "c6cf2ed4467b2ad78b7aaca93b99cace5890814f", "chunk": "diff --git a/hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java b/hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java\nindex 564c16477..68cc593ee 100644\n--- a/hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java\n+++ b/hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java\n\n@@ -20,10 +20,13 @@ package org.apache.hudi.utilities.callback.kafka;\n import org.apache.hudi.callback.HoodieWriteCommitCallback;\n import org.apache.hudi.callback.common.HoodieWriteCommitCallbackMessage;\n import org.apache.hudi.callback.util.HoodieWriteCommitCallbackUtil;\n+import org.apache.hudi.common.util.StringUtils;\n+import org.apache.hudi.common.util.ValidationUtils;\n import org.apache.hudi.config.HoodieWriteConfig;\n \n import org.apache.kafka.clients.producer.Callback;\n import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n import org.apache.kafka.clients.producer.ProducerRecord;\n import org.apache.kafka.clients.producer.RecordMetadata;\n import org.apache.log4j.LogManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0Njc4MQ==", "url": "https://github.com/apache/hudi/pull/1886#discussion_r464146781", "bodyText": "IMO, moving the content of this class into HoodieWriteCommitKafkaCallback  is reasonable. WDYT?", "author": "yanghua", "createdAt": "2020-08-03T00:55:20Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallbackUtil.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.callback.kafka;\n+\n+import org.apache.hudi.callback.util.HoodieWriteCommitCallbackUtil;\n+import org.apache.hudi.common.util.StringUtils;\n+import org.apache.hudi.common.util.ValidationUtils;\n+\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.util.Properties;\n+\n+import static org.apache.hudi.config.HoodieWriteCommitCallbackConfig.CALLBACK_KAFKA_ACKS;\n+import static org.apache.hudi.config.HoodieWriteCommitCallbackConfig.CALLBACK_KAFKA_BOOTSTRAP_SERVERS;\n+import static org.apache.hudi.config.HoodieWriteCommitCallbackConfig.CALLBACK_KAFKA_PARTITION;\n+import static org.apache.hudi.config.HoodieWriteCommitCallbackConfig.CALLBACK_KAFKA_RETRIES;\n+import static org.apache.hudi.config.HoodieWriteCommitCallbackConfig.CALLBACK_KAFKA_TOPIC;\n+import static org.apache.hudi.config.HoodieWriteConfig.TABLE_NAME;\n+\n+/**\n+ * Util helps to build kafka callback.\n+ */\n+public class HoodieWriteCommitKafkaCallbackUtil {", "originalCommit": "6cc6bd5a38a9ce7197ee0d2a0c23e20e082c7ba3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE2NjEwNw==", "url": "https://github.com/apache/hudi/pull/1886#discussion_r464166107", "bodyText": "IMO, moving the content of this class into HoodieWriteCommitKafkaCallback  is reasonable. WDYT?\n\nI once hesitated here, kind of messy to host in one class. But it is reasonable, will move", "author": "wangxianghu", "createdAt": "2020-08-03T02:39:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0Njc4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c6cf2ed4467b2ad78b7aaca93b99cace5890814f", "chunk": "diff --git a/hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallbackUtil.java b/hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallbackUtil.java\ndeleted file mode 100644\nindex b9441b565..000000000\n--- a/hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallbackUtil.java\n+++ /dev/null\n\n@@ -1,79 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.hudi.utilities.callback.kafka;\n-\n-import org.apache.hudi.callback.util.HoodieWriteCommitCallbackUtil;\n-import org.apache.hudi.common.util.StringUtils;\n-import org.apache.hudi.common.util.ValidationUtils;\n-\n-import org.apache.kafka.clients.producer.KafkaProducer;\n-import org.apache.kafka.clients.producer.ProducerConfig;\n-import org.apache.kafka.clients.producer.ProducerRecord;\n-import org.apache.log4j.LogManager;\n-import org.apache.log4j.Logger;\n-\n-import java.util.Properties;\n-\n-import static org.apache.hudi.config.HoodieWriteCommitCallbackConfig.CALLBACK_KAFKA_ACKS;\n-import static org.apache.hudi.config.HoodieWriteCommitCallbackConfig.CALLBACK_KAFKA_BOOTSTRAP_SERVERS;\n-import static org.apache.hudi.config.HoodieWriteCommitCallbackConfig.CALLBACK_KAFKA_PARTITION;\n-import static org.apache.hudi.config.HoodieWriteCommitCallbackConfig.CALLBACK_KAFKA_RETRIES;\n-import static org.apache.hudi.config.HoodieWriteCommitCallbackConfig.CALLBACK_KAFKA_TOPIC;\n-import static org.apache.hudi.config.HoodieWriteConfig.TABLE_NAME;\n-\n-/**\n- * Util helps to build kafka callback.\n- */\n-public class HoodieWriteCommitKafkaCallbackUtil {\n-\n-  private static final Logger LOG = LogManager.getLogger(HoodieWriteCommitKafkaCallbackUtil.class);\n-\n-  public static KafkaProducer<String, String> createProducer(Properties props) {\n-    String bootstrapServers = props.getProperty(CALLBACK_KAFKA_BOOTSTRAP_SERVERS);\n-    ValidationUtils.checkArgument(!StringUtils.isNullOrEmpty(bootstrapServers), String.format(\"Config %s can not be \"\n-        + \"null or empty\", CALLBACK_KAFKA_BOOTSTRAP_SERVERS));\n-\n-    Properties kafkaProducerProps = new Properties();\n-    // bootstrap.servers\n-    kafkaProducerProps.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n-    // default \"all\" to ensure no message loss\n-    kafkaProducerProps.setProperty(ProducerConfig.ACKS_CONFIG, props.getProperty(CALLBACK_KAFKA_ACKS));\n-    // retries 3 times by default\n-    kafkaProducerProps.setProperty(ProducerConfig.RETRIES_CONFIG, props.getProperty(CALLBACK_KAFKA_RETRIES));\n-    kafkaProducerProps.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,\n-        \"org.apache.kafka.common.serialization.StringSerializer\");\n-    kafkaProducerProps.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,\n-        \"org.apache.kafka.common.serialization.StringSerializer\");\n-\n-    LOG.info(\"Callback kafka producer init with configs: \"\n-        + HoodieWriteCommitCallbackUtil.convertToJsonString(kafkaProducerProps));\n-    return new KafkaProducer<String, String>(kafkaProducerProps);\n-  }\n-\n-  public static ProducerRecord<String, String> buildProducerRecord(Properties props, String callbackMsg) {\n-    String topic = props.getProperty(CALLBACK_KAFKA_TOPIC);\n-    ValidationUtils.checkArgument(!StringUtils.isNullOrEmpty(topic), String.format(\"Config %s can not be null or empty\",\n-        CALLBACK_KAFKA_TOPIC));\n-\n-    return new ProducerRecord<String, String>(topic,\n-        Integer.valueOf(props.getProperty(CALLBACK_KAFKA_PARTITION)),\n-        props.getProperty(TABLE_NAME),\n-        callbackMsg);\n-  }\n-\n-}\n"}}, {"oid": "c6cf2ed4467b2ad78b7aaca93b99cace5890814f", "url": "https://github.com/apache/hudi/commit/c6cf2ed4467b2ad78b7aaca93b99cace5890814f", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback", "committedDate": "2020-08-04T15:05:15Z", "type": "forcePushed"}, {"oid": "4fd9416379c83d0ec31146f11ba3ca63d67cc9b2", "url": "https://github.com/apache/hudi/commit/4fd9416379c83d0ec31146f11ba3ca63d67cc9b2", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback", "committedDate": "2020-08-04T15:12:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwODY4NA==", "url": "https://github.com/apache/hudi/pull/1886#discussion_r465708684", "bodyText": "If users configure http callback? Why we only consider Kafka callback here?", "author": "yanghua", "createdAt": "2020-08-05T13:00:37Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/DeltaSync.java", "diffHunk": "@@ -535,6 +537,11 @@ private HoodieWriteConfig getHoodieClientConfig(SchemaProvider schemaProvider) {\n     }\n     HoodieWriteConfig config = builder.build();\n \n+    // set default value for {@link HoodieWriteCommitKafkaCallbackConfig} if needed.\n+    if (config.writeCommitCallbackOn() && HoodieWriteCommitKafkaCallback.class.getName().equals(config.getCallbackClass())) {", "originalCommit": "4fd9416379c83d0ec31146f11ba3ca63d67cc9b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2MTE1MQ==", "url": "https://github.com/apache/hudi/pull/1886#discussion_r465761151", "bodyText": "If users configure http callback? Why we only consider Kafka callback here?\n\nthe config of http callback will be Initialized when HoodieWriteClient set up, while kafka's can't. the kafka's config can only be set up in hudi-utilities module, so the logic above come up.", "author": "wangxianghu", "createdAt": "2020-08-05T14:18:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwODY4NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "3a549b3f8c45881ed9fabf9131d0470b98b91b68", "url": "https://github.com/apache/hudi/commit/3a549b3f8c45881ed9fabf9131d0470b98b91b68", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback", "committedDate": "2020-08-09T09:34:44Z", "type": "forcePushed"}, {"oid": "79f73babaf3233c6a2b54c887cac32d7ce7f46d4", "url": "https://github.com/apache/hudi/commit/79f73babaf3233c6a2b54c887cac32d7ce7f46d4", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback", "committedDate": "2020-08-09T09:37:08Z", "type": "forcePushed"}, {"oid": "1a7659290c0ba010e5dc34c3f04c5a6236cf5160", "url": "https://github.com/apache/hudi/commit/1a7659290c0ba010e5dc34c3f04c5a6236cf5160", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback", "committedDate": "2020-08-09T10:05:11Z", "type": "commit"}, {"oid": "1a7659290c0ba010e5dc34c3f04c5a6236cf5160", "url": "https://github.com/apache/hudi/commit/1a7659290c0ba010e5dc34c3f04c5a6236cf5160", "message": "[HUDI-1122]Introduce a kafka implementation of hoodie write commit callback", "committedDate": "2020-08-09T10:05:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNjIwMg==", "url": "https://github.com/apache/hudi/pull/1886#discussion_r471306202", "bodyText": "Can we make this variable static to be shared in the whole class?", "author": "yanghua", "createdAt": "2020-08-17T07:57:58Z", "path": "hudi-client/src/main/java/org/apache/hudi/callback/util/HoodieWriteCommitCallbackUtil.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.callback.util;\n+\n+import org.apache.hudi.exception.HoodieCommitCallbackException;\n+\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Util helps to prepare callback message.\n+ */\n+public class HoodieWriteCommitCallbackUtil {\n+\n+  /**\n+   * Convert data to json string format.\n+   */\n+  public static String convertToJsonString(Object obj) {\n+    // convert to json\n+    ObjectMapper mapper = new ObjectMapper();", "originalCommit": "1a7659290c0ba010e5dc34c3f04c5a6236cf5160", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxNDM0Nw==", "url": "https://github.com/apache/hudi/pull/1886#discussion_r471314347", "bodyText": "done", "author": "wangxianghu", "createdAt": "2020-08-17T08:14:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNjIwMg=="}], "type": "inlineReview", "revised_code": {"commit": "7c3210efd43f1cb803c4bf5e2e0a2bbd4758a63c", "chunk": "diff --git a/hudi-client/src/main/java/org/apache/hudi/callback/util/HoodieWriteCommitCallbackUtil.java b/hudi-client/src/main/java/org/apache/hudi/callback/util/HoodieWriteCommitCallbackUtil.java\nindex ed9c66d1b..c160819f1 100644\n--- a/hudi-client/src/main/java/org/apache/hudi/callback/util/HoodieWriteCommitCallbackUtil.java\n+++ b/hudi-client/src/main/java/org/apache/hudi/callback/util/HoodieWriteCommitCallbackUtil.java\n\n@@ -28,12 +28,12 @@ import java.io.IOException;\n  */\n public class HoodieWriteCommitCallbackUtil {\n \n+  private static ObjectMapper mapper = new ObjectMapper();\n+\n   /**\n    * Convert data to json string format.\n    */\n   public static String convertToJsonString(Object obj) {\n-    // convert to json\n-    ObjectMapper mapper = new ObjectMapper();\n     try {\n       return mapper.writeValueAsString(obj);\n     } catch (IOException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNjgzNw==", "url": "https://github.com/apache/hudi/pull/1886#discussion_r471306837", "bodyText": "LOG.error(\"Send kafka callback msg failed : \"\uff0ce);", "author": "yanghua", "createdAt": "2020-08-17T07:59:17Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.callback.kafka;\n+\n+import org.apache.hudi.callback.HoodieWriteCommitCallback;\n+import org.apache.hudi.callback.common.HoodieWriteCommitCallbackMessage;\n+import org.apache.hudi.callback.util.HoodieWriteCommitCallbackUtil;\n+import org.apache.hudi.common.util.StringUtils;\n+import org.apache.hudi.common.util.ValidationUtils;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.util.Properties;\n+\n+import static org.apache.hudi.config.HoodieWriteConfig.TABLE_NAME;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_ACKS;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_BOOTSTRAP_SERVERS;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_PARTITION;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_RETRIES;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_TOPIC;\n+\n+/**\n+ * Kafka implementation of {@link HoodieWriteCommitCallback}.\n+ */\n+public class HoodieWriteCommitKafkaCallback implements HoodieWriteCommitCallback {\n+\n+  private static final Logger LOG = LogManager.getLogger(HoodieWriteCommitKafkaCallback.class);\n+\n+  private Properties props;\n+  private String bootstrapServers;\n+  private String topic;\n+\n+  public HoodieWriteCommitKafkaCallback(HoodieWriteConfig config) {\n+    this.props = config.getProps();\n+    this.bootstrapServers = props.getProperty(CALLBACK_KAFKA_BOOTSTRAP_SERVERS);\n+    this.topic = props.getProperty(CALLBACK_KAFKA_TOPIC);\n+    validateKafkaConfig();\n+  }\n+\n+  @Override\n+  public void call(HoodieWriteCommitCallbackMessage callbackMessage) {\n+    String callbackMsg = HoodieWriteCommitCallbackUtil.convertToJsonString(callbackMessage);\n+    try (KafkaProducer<String, String> producer = createProducer(props)) {\n+      ProducerRecord<String, String> record = buildProducerRecord(props, callbackMsg);\n+      producer.send(record);\n+      LOG.info(String.format(\"Send callback message %s succeed\", callbackMsg));\n+    } catch (Exception e) {\n+      LOG.error(\"Send kafka callback msg failed : \" + e);", "originalCommit": "1a7659290c0ba010e5dc34c3f04c5a6236cf5160", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxNDM5OA==", "url": "https://github.com/apache/hudi/pull/1886#discussion_r471314398", "bodyText": "done", "author": "wangxianghu", "createdAt": "2020-08-17T08:14:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNjgzNw=="}], "type": "inlineReview", "revised_code": {"commit": "7c3210efd43f1cb803c4bf5e2e0a2bbd4758a63c", "chunk": "diff --git a/hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java b/hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java\nindex fa1d66202..9133e502d 100644\n--- a/hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java\n+++ b/hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java\n\n@@ -67,7 +67,7 @@ public class HoodieWriteCommitKafkaCallback implements HoodieWriteCommitCallback\n       producer.send(record);\n       LOG.info(String.format(\"Send callback message %s succeed\", callbackMsg));\n     } catch (Exception e) {\n-      LOG.error(\"Send kafka callback msg failed : \" + e);\n+      LOG.error(\"Send kafka callback msg failed : \", e);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNzEzOA==", "url": "https://github.com/apache/hudi/pull/1886#discussion_r471307138", "bodyText": "Using LOG.debug?", "author": "yanghua", "createdAt": "2020-08-17T07:59:50Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.callback.kafka;\n+\n+import org.apache.hudi.callback.HoodieWriteCommitCallback;\n+import org.apache.hudi.callback.common.HoodieWriteCommitCallbackMessage;\n+import org.apache.hudi.callback.util.HoodieWriteCommitCallbackUtil;\n+import org.apache.hudi.common.util.StringUtils;\n+import org.apache.hudi.common.util.ValidationUtils;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.util.Properties;\n+\n+import static org.apache.hudi.config.HoodieWriteConfig.TABLE_NAME;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_ACKS;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_BOOTSTRAP_SERVERS;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_PARTITION;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_RETRIES;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_TOPIC;\n+\n+/**\n+ * Kafka implementation of {@link HoodieWriteCommitCallback}.\n+ */\n+public class HoodieWriteCommitKafkaCallback implements HoodieWriteCommitCallback {\n+\n+  private static final Logger LOG = LogManager.getLogger(HoodieWriteCommitKafkaCallback.class);\n+\n+  private Properties props;\n+  private String bootstrapServers;\n+  private String topic;\n+\n+  public HoodieWriteCommitKafkaCallback(HoodieWriteConfig config) {\n+    this.props = config.getProps();\n+    this.bootstrapServers = props.getProperty(CALLBACK_KAFKA_BOOTSTRAP_SERVERS);\n+    this.topic = props.getProperty(CALLBACK_KAFKA_TOPIC);\n+    validateKafkaConfig();\n+  }\n+\n+  @Override\n+  public void call(HoodieWriteCommitCallbackMessage callbackMessage) {\n+    String callbackMsg = HoodieWriteCommitCallbackUtil.convertToJsonString(callbackMessage);\n+    try (KafkaProducer<String, String> producer = createProducer(props)) {\n+      ProducerRecord<String, String> record = buildProducerRecord(props, callbackMsg);\n+      producer.send(record);\n+      LOG.info(String.format(\"Send callback message %s succeed\", callbackMsg));\n+    } catch (Exception e) {\n+      LOG.error(\"Send kafka callback msg failed : \" + e);\n+    }\n+  }\n+\n+  /**\n+   * Method helps to create {@link KafkaProducer}. Here we set acks = all and retries = 3 by default to ensure no data\n+   * loss.\n+   *\n+   * @param props Kafka configs\n+   * @return A {@link KafkaProducer}\n+   */\n+  public KafkaProducer<String, String> createProducer(Properties props) {\n+    Properties kafkaProducerProps = new Properties();\n+    // bootstrap.servers\n+    kafkaProducerProps.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+    // default \"all\" to ensure no message loss\n+    kafkaProducerProps.setProperty(ProducerConfig.ACKS_CONFIG, props.getProperty(CALLBACK_KAFKA_ACKS));\n+    // retries 3 times by default\n+    kafkaProducerProps.setProperty(ProducerConfig.RETRIES_CONFIG, props.getProperty(CALLBACK_KAFKA_RETRIES));\n+    kafkaProducerProps.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,\n+        \"org.apache.kafka.common.serialization.StringSerializer\");\n+    kafkaProducerProps.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,\n+        \"org.apache.kafka.common.serialization.StringSerializer\");\n+\n+    LOG.info(\"Callback kafka producer init with configs: \"", "originalCommit": "1a7659290c0ba010e5dc34c3f04c5a6236cf5160", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxNDQ1Mw==", "url": "https://github.com/apache/hudi/pull/1886#discussion_r471314453", "bodyText": "done", "author": "wangxianghu", "createdAt": "2020-08-17T08:14:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNzEzOA=="}], "type": "inlineReview", "revised_code": {"commit": "7c3210efd43f1cb803c4bf5e2e0a2bbd4758a63c", "chunk": "diff --git a/hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java b/hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java\nindex fa1d66202..9133e502d 100644\n--- a/hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java\n+++ b/hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java\n\n@@ -67,7 +67,7 @@ public class HoodieWriteCommitKafkaCallback implements HoodieWriteCommitCallback\n       producer.send(record);\n       LOG.info(String.format(\"Send callback message %s succeed\", callbackMsg));\n     } catch (Exception e) {\n-      LOG.error(\"Send kafka callback msg failed : \" + e);\n+      LOG.error(\"Send kafka callback msg failed : \", e);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNzc2NQ==", "url": "https://github.com/apache/hudi/pull/1886#discussion_r471307765", "bodyText": "Maybe we do not need to break the lines here?", "author": "yanghua", "createdAt": "2020-08-17T08:01:01Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.callback.kafka;\n+\n+import org.apache.hudi.callback.HoodieWriteCommitCallback;\n+import org.apache.hudi.callback.common.HoodieWriteCommitCallbackMessage;\n+import org.apache.hudi.callback.util.HoodieWriteCommitCallbackUtil;\n+import org.apache.hudi.common.util.StringUtils;\n+import org.apache.hudi.common.util.ValidationUtils;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.util.Properties;\n+\n+import static org.apache.hudi.config.HoodieWriteConfig.TABLE_NAME;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_ACKS;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_BOOTSTRAP_SERVERS;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_PARTITION;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_RETRIES;\n+import static org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallbackConfig.CALLBACK_KAFKA_TOPIC;\n+\n+/**\n+ * Kafka implementation of {@link HoodieWriteCommitCallback}.\n+ */\n+public class HoodieWriteCommitKafkaCallback implements HoodieWriteCommitCallback {\n+\n+  private static final Logger LOG = LogManager.getLogger(HoodieWriteCommitKafkaCallback.class);\n+\n+  private Properties props;\n+  private String bootstrapServers;\n+  private String topic;\n+\n+  public HoodieWriteCommitKafkaCallback(HoodieWriteConfig config) {\n+    this.props = config.getProps();\n+    this.bootstrapServers = props.getProperty(CALLBACK_KAFKA_BOOTSTRAP_SERVERS);\n+    this.topic = props.getProperty(CALLBACK_KAFKA_TOPIC);\n+    validateKafkaConfig();\n+  }\n+\n+  @Override\n+  public void call(HoodieWriteCommitCallbackMessage callbackMessage) {\n+    String callbackMsg = HoodieWriteCommitCallbackUtil.convertToJsonString(callbackMessage);\n+    try (KafkaProducer<String, String> producer = createProducer(props)) {\n+      ProducerRecord<String, String> record = buildProducerRecord(props, callbackMsg);\n+      producer.send(record);\n+      LOG.info(String.format(\"Send callback message %s succeed\", callbackMsg));\n+    } catch (Exception e) {\n+      LOG.error(\"Send kafka callback msg failed : \" + e);\n+    }\n+  }\n+\n+  /**\n+   * Method helps to create {@link KafkaProducer}. Here we set acks = all and retries = 3 by default to ensure no data\n+   * loss.\n+   *\n+   * @param props Kafka configs\n+   * @return A {@link KafkaProducer}\n+   */\n+  public KafkaProducer<String, String> createProducer(Properties props) {\n+    Properties kafkaProducerProps = new Properties();\n+    // bootstrap.servers\n+    kafkaProducerProps.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+    // default \"all\" to ensure no message loss\n+    kafkaProducerProps.setProperty(ProducerConfig.ACKS_CONFIG, props.getProperty(CALLBACK_KAFKA_ACKS));\n+    // retries 3 times by default\n+    kafkaProducerProps.setProperty(ProducerConfig.RETRIES_CONFIG, props.getProperty(CALLBACK_KAFKA_RETRIES));\n+    kafkaProducerProps.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,\n+        \"org.apache.kafka.common.serialization.StringSerializer\");\n+    kafkaProducerProps.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,\n+        \"org.apache.kafka.common.serialization.StringSerializer\");\n+\n+    LOG.info(\"Callback kafka producer init with configs: \"\n+        + HoodieWriteCommitCallbackUtil.convertToJsonString(kafkaProducerProps));\n+    return new KafkaProducer<String, String>(kafkaProducerProps);\n+  }\n+\n+  /**\n+   * Method helps to create a {@link ProducerRecord}. To ensure the order of the callback messages, we should guarantee\n+   * that the callback message of the same table will goes to the same partition. Therefore, if user does not specify\n+   * the partition, we can use the table name as {@link ProducerRecord} key.\n+   *\n+   * @param props       Kafka configs\n+   * @param callbackMsg Callback message\n+   * @return Callback {@link ProducerRecord}\n+   */\n+  private ProducerRecord<String, String> buildProducerRecord(Properties props, String callbackMsg) {\n+    String partition = props.getProperty(CALLBACK_KAFKA_PARTITION);\n+    if (null != partition) {\n+      return new ProducerRecord<String, String>(topic,\n+          Integer.valueOf(partition),\n+          props.getProperty(TABLE_NAME),\n+          callbackMsg);\n+    } else {\n+      return new ProducerRecord<String, String>(topic,", "originalCommit": "1a7659290c0ba010e5dc34c3f04c5a6236cf5160", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxNDUwMA==", "url": "https://github.com/apache/hudi/pull/1886#discussion_r471314500", "bodyText": "done", "author": "wangxianghu", "createdAt": "2020-08-17T08:14:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNzc2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7c3210efd43f1cb803c4bf5e2e0a2bbd4758a63c", "chunk": "diff --git a/hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java b/hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java\nindex fa1d66202..9133e502d 100644\n--- a/hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java\n+++ b/hudi-utilities/src/main/java/org/apache/hudi/utilities/callback/kafka/HoodieWriteCommitKafkaCallback.java\n\n@@ -67,7 +67,7 @@ public class HoodieWriteCommitKafkaCallback implements HoodieWriteCommitCallback\n       producer.send(record);\n       LOG.info(String.format(\"Send callback message %s succeed\", callbackMsg));\n     } catch (Exception e) {\n-      LOG.error(\"Send kafka callback msg failed : \" + e);\n+      LOG.error(\"Send kafka callback msg failed : \", e);\n     }\n   }\n \n"}}, {"oid": "7c3210efd43f1cb803c4bf5e2e0a2bbd4758a63c", "url": "https://github.com/apache/hudi/commit/7c3210efd43f1cb803c4bf5e2e0a2bbd4758a63c", "message": "resolve style issue", "committedDate": "2020-08-17T08:12:29Z", "type": "commit"}]}