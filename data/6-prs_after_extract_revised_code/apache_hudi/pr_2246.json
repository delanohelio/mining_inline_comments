{"pr_number": 2246, "pr_title": "[HUDI-1393] Add compaction action in archive command", "pr_createdAt": "2020-11-12T00:44:08Z", "pr_url": "https://github.com/apache/hudi/pull/2246", "timeline": [{"oid": "a7c727b6650c4c1b0a64bf220bb2795106a03321", "url": "https://github.com/apache/hudi/commit/a7c727b6650c4c1b0a64bf220bb2795106a03321", "message": "[HUDI-1393]Add compaction action in archive command", "committedDate": "2020-11-11T08:08:09Z", "type": "forcePushed"}, {"oid": "a311bc1ea251f8c40cf9ae09fee856b9f83265cf", "url": "https://github.com/apache/hudi/commit/a311bc1ea251f8c40cf9ae09fee856b9f83265cf", "message": "[HUDI-1393]Add compaction action in archive command", "committedDate": "2020-11-12T21:03:28Z", "type": "forcePushed"}, {"oid": "47778897fbd46f552bc029a942b42df1cae72796", "url": "https://github.com/apache/hudi/commit/47778897fbd46f552bc029a942b42df1cae72796", "message": "[HUDI-1393]Add compaction action in archive command", "committedDate": "2020-11-17T00:55:16Z", "type": "commit"}, {"oid": "47778897fbd46f552bc029a942b42df1cae72796", "url": "https://github.com/apache/hudi/commit/47778897fbd46f552bc029a942b42df1cae72796", "message": "[HUDI-1393]Add compaction action in archive command", "committedDate": "2020-11-17T00:55:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3OTUyOQ==", "url": "https://github.com/apache/hudi/pull/2246#discussion_r528079529", "bodyText": "Hi @hddong, how about return an empty array here as before. it seems will cause an NPE in org/apache/hudi/cli/HoodiePrintHelper.java:92", "author": "wangxianghu", "createdAt": "2020-11-21T06:12:50Z", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/ArchivedCommitsCommand.java", "diffHunk": "@@ -172,49 +173,38 @@ public String showCommits(\n     return HoodiePrintHelper.print(header, new HashMap<>(), sortByField, descending, limit, headerOnly, allCommits);\n   }\n \n-  private Comparable[] readCommit(GenericRecord record, boolean skipMetadata) {\n+  private Comparable[] commitDetail(GenericRecord record, String metadataName,\n+                                    boolean skipMetadata) {\n     List<Object> commitDetails = new ArrayList<>();\n+    commitDetails.add(record.get(\"commitTime\"));\n+    commitDetails.add(record.get(\"actionType\").toString());\n+    if (!skipMetadata) {\n+      commitDetails.add(Option.ofNullable(record.get(metadataName)).orElse(\"{}\").toString());\n+    }\n+    return commitDetails.toArray(new Comparable[commitDetails.size()]);\n+  }\n+\n+  private Comparable[] readCommit(GenericRecord record, boolean skipMetadata) {\n     try {\n       switch (record.get(\"actionType\").toString()) {\n-        case HoodieTimeline.CLEAN_ACTION: {\n-          commitDetails.add(record.get(\"commitTime\"));\n-          commitDetails.add(record.get(\"actionType\").toString());\n-          if (!skipMetadata) {\n-            commitDetails.add(record.get(\"hoodieCleanMetadata\").toString());\n-          }\n-          break;\n-        }\n+        case HoodieTimeline.CLEAN_ACTION:\n+          return commitDetail(record, \"hoodieCleanMetadata\", skipMetadata);\n         case HoodieTimeline.COMMIT_ACTION:\n-        case HoodieTimeline.DELTA_COMMIT_ACTION: {\n-          commitDetails.add(record.get(\"commitTime\"));\n-          commitDetails.add(record.get(\"actionType\").toString());\n-          if (!skipMetadata) {\n-            commitDetails.add(record.get(\"hoodieCommitMetadata\").toString());\n-          }\n-          break;\n-        }\n-        case HoodieTimeline.ROLLBACK_ACTION: {\n-          commitDetails.add(record.get(\"commitTime\"));\n-          commitDetails.add(record.get(\"actionType\").toString());\n-          if (!skipMetadata) {\n-            commitDetails.add(record.get(\"hoodieRollbackMetadata\").toString());\n-          }\n-          break;\n+        case HoodieTimeline.DELTA_COMMIT_ACTION:\n+          return commitDetail(record, \"hoodieCommitMetadata\", skipMetadata);\n+        case HoodieTimeline.ROLLBACK_ACTION:\n+          return commitDetail(record, \"hoodieRollbackMetadata\", skipMetadata);\n+        case HoodieTimeline.SAVEPOINT_ACTION:\n+          return commitDetail(record, \"hoodieSavePointMetadata\", skipMetadata);\n+        case HoodieTimeline.COMPACTION_ACTION:\n+          return commitDetail(record, \"hoodieCompactionMetadata\", skipMetadata);\n+        default: {\n+          return new Comparable[]{};\n         }\n-        case HoodieTimeline.SAVEPOINT_ACTION: {\n-          commitDetails.add(record.get(\"commitTime\"));\n-          commitDetails.add(record.get(\"actionType\").toString());\n-          if (!skipMetadata) {\n-            commitDetails.add(record.get(\"hoodieSavePointMetadata\").toString());\n-          }\n-          break;\n-        }\n-        default:\n-          return commitDetails.toArray(new Comparable[commitDetails.size()]);\n       }\n     } catch (Exception e) {\n       e.printStackTrace();\n+      return null;", "originalCommit": "47778897fbd46f552bc029a942b42df1cae72796", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ4NDMyMA==", "url": "https://github.com/apache/hudi/pull/2246#discussion_r528484320", "bodyText": "@wangxianghu : yes, empty is better here.", "author": "hddong", "createdAt": "2020-11-23T05:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3OTUyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ4NjYwNA==", "url": "https://github.com/apache/hudi/pull/2246#discussion_r528486604", "bodyText": "@wangxianghu : yes, empty is better here.\n\n@hddong thanks for addressing my concern, LGTM now\ncc @yanghua", "author": "wangxianghu", "createdAt": "2020-11-23T06:10:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3OTUyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "2bf49c507a5da57c861e2ff4071cac307c91d953", "chunk": "diff --git a/hudi-cli/src/main/java/org/apache/hudi/cli/commands/ArchivedCommitsCommand.java b/hudi-cli/src/main/java/org/apache/hudi/cli/commands/ArchivedCommitsCommand.java\nindex 3f298a5eb..7ec76852c 100644\n--- a/hudi-cli/src/main/java/org/apache/hudi/cli/commands/ArchivedCommitsCommand.java\n+++ b/hudi-cli/src/main/java/org/apache/hudi/cli/commands/ArchivedCommitsCommand.java\n\n@@ -204,7 +204,7 @@ public class ArchivedCommitsCommand implements CommandMarker {\n       }\n     } catch (Exception e) {\n       e.printStackTrace();\n-      return null;\n+      return new Comparable[]{};;\n     }\n   }\n }\n"}}, {"oid": "2bf49c507a5da57c861e2ff4071cac307c91d953", "url": "https://github.com/apache/hudi/commit/2bf49c507a5da57c861e2ff4071cac307c91d953", "message": "Update ArchivedCommitsCommand.java", "committedDate": "2020-11-23T05:58:38Z", "type": "commit"}, {"oid": "8fbdf8310a23d12a6905006610e0ef45290866e0", "url": "https://github.com/apache/hudi/commit/8fbdf8310a23d12a6905006610e0ef45290866e0", "message": "Update ArchivedCommitsCommand.java", "committedDate": "2020-11-23T07:42:41Z", "type": "commit"}]}