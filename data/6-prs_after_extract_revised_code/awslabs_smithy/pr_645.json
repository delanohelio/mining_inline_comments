{"pr_number": 645, "pr_title": "Ensure waiter names are unique across a service", "pr_createdAt": "2020-12-01T01:32:28Z", "pr_url": "https://github.com/awslabs/smithy/pull/645", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUzMjgyNQ==", "url": "https://github.com/awslabs/smithy/pull/645#discussion_r533532825", "bodyText": "This toLowerCase() call should have Locale.US set.", "author": "kstich", "createdAt": "2020-12-01T16:07:37Z", "path": "smithy-waiters/src/main/java/software/amazon/smithy/waiters/UniqueWaiterNamesValidator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.waiters;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.knowledge.TopDownIndex;\n+import software.amazon.smithy.model.shapes.OperationShape;\n+import software.amazon.smithy.model.shapes.ServiceShape;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.validation.AbstractValidator;\n+import software.amazon.smithy.model.validation.ValidationEvent;\n+import software.amazon.smithy.utils.SmithyInternalApi;\n+\n+/**\n+ * Ensures that no two waiters use the same case-insensitive name in the\n+ * closure of a service.\n+ */\n+@SmithyInternalApi\n+public final class UniqueWaiterNamesValidator extends AbstractValidator {\n+    @Override\n+    public List<ValidationEvent> validate(Model model) {\n+        return model.shapes(ServiceShape.class)\n+                .flatMap(service -> validateService(model, service).stream())\n+                .collect(Collectors.toList());\n+    }\n+\n+    private List<ValidationEvent> validateService(Model model, ServiceShape service) {\n+        Map<String, Set<OperationShape>> waiterNamesToOperations = computeWaiterNamesToOperations(model, service);\n+        List<ValidationEvent> events = new ArrayList<>();\n+\n+        for (Map.Entry<String, Set<OperationShape>> entry : waiterNamesToOperations.entrySet()) {\n+            if (entry.getValue().size() > 1) {\n+                for (OperationShape operation : entry.getValue()) {\n+                    Set<ShapeId> conflicts = entry.getValue().stream()\n+                            .filter(o -> !o.equals(operation))\n+                            .map(Shape::getId)\n+                            .collect(Collectors.toCollection(TreeSet::new));\n+                    events.add(error(operation, operation.expectTrait(WaitableTrait.class), String.format(\n+                            \"`%s` trait waiter name `%s` case-insensitively conflicts with waiters on other \"\n+                            + \"operations in the closure of service, `%s`: %s\",\n+                            WaitableTrait.ID,\n+                            entry.getKey(),\n+                            service.getId(),\n+                            conflicts)));\n+                }\n+            }\n+        }\n+\n+        return events;\n+    }\n+\n+    private Map<String, Set<OperationShape>> computeWaiterNamesToOperations(Model model, ServiceShape service) {\n+        TopDownIndex index = TopDownIndex.of(model);\n+        Map<String, Set<OperationShape>> waiterNamesToOperations = new TreeMap<>();\n+\n+        for (OperationShape operation : index.getContainedOperations(service)) {\n+            operation.getTrait(WaitableTrait.class).ifPresent(trait -> {\n+                for (String name : trait.getWaiters().keySet()) {\n+                    waiterNamesToOperations.computeIfAbsent(name.toLowerCase(), n -> new HashSet<>()).add(operation);", "originalCommit": "a0e74721f2c6ac8590d4ffa964eeea47a4572a04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU3MjkzMA==", "url": "https://github.com/awslabs/smithy/pull/645#discussion_r533572930", "bodyText": "Weird, travis built without error.", "author": "mtdowling", "createdAt": "2020-12-01T17:00:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUzMjgyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "e1e0cd217165104ce992c514a11956161a62af45", "chunk": "diff --git a/smithy-waiters/src/main/java/software/amazon/smithy/waiters/UniqueWaiterNamesValidator.java b/smithy-waiters/src/main/java/software/amazon/smithy/waiters/UniqueWaiterNamesValidator.java\nindex 4ad76dd96..6cbb7ec71 100644\n--- a/smithy-waiters/src/main/java/software/amazon/smithy/waiters/UniqueWaiterNamesValidator.java\n+++ b/smithy-waiters/src/main/java/software/amazon/smithy/waiters/UniqueWaiterNamesValidator.java\n\n@@ -18,6 +18,7 @@ package software.amazon.smithy.waiters;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.TreeMap;\n"}}, {"oid": "e1e0cd217165104ce992c514a11956161a62af45", "url": "https://github.com/awslabs/smithy/commit/e1e0cd217165104ce992c514a11956161a62af45", "message": "Ensure waiter names are unique across a service", "committedDate": "2020-12-01T17:01:13Z", "type": "commit"}, {"oid": "e1e0cd217165104ce992c514a11956161a62af45", "url": "https://github.com/awslabs/smithy/commit/e1e0cd217165104ce992c514a11956161a62af45", "message": "Ensure waiter names are unique across a service", "committedDate": "2020-12-01T17:01:13Z", "type": "forcePushed"}]}