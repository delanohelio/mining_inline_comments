{"pr_number": 397, "pr_title": "Move validators into core spec, rethink suppressions", "pr_createdAt": "2020-04-23T23:39:55Z", "pr_url": "https://github.com/awslabs/smithy/pull/397", "timeline": [{"oid": "5b197cc97715413b74ae2cbff662c3a24f6089e1", "url": "https://github.com/awslabs/smithy/commit/5b197cc97715413b74ae2cbff662c3a24f6089e1", "message": "Move validation into core\n\nThis commit moves model validation and suppressions into the core.\nEmitEachSelector and EmitNoneSelector are now part of smithy-model and\nwere removed from smithy-linters. The `@suppress` trait was added to\nsuppress validaation events on specific shapes. The `validators`\nmetadata property was updated so that it now only take `id`,\n`namespace`, and `reason`, where `namespace` can be set to `*` to\nsuppress a validation event for all namespaces or validation events that\naren't specific to a single shape.\n\nThe ability to add custom suppressions to the ModeAssembler has been\nremoved.", "committedDate": "2020-04-23T23:35:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyMzEzNQ==", "url": "https://github.com/awslabs/smithy/pull/397#discussion_r414223135", "bodyText": "This comment seems off, service suppressions is what's throwing me. Also, if \"service\" is supposed to be namespace, the precedence listed is incorrect.", "author": "kstich", "createdAt": "2020-04-24T01:05:35Z", "path": "smithy-model/src/main/java/software/amazon/smithy/model/loader/ModelValidator.java", "diffHunk": "@@ -151,18 +142,97 @@ private void assembleValidators(List<ValidatorDefinition> definitions) {\n             result.getResult().ifPresent(validators::add);\n             events.addAll(result.getValidationEvents());\n             if (result.getValidationEvents().isEmpty() && !result.getResult().isPresent()) {\n-                events.add(unknownValidatorError(val.name, val.sourceLocation));\n+                events.add(suppressEvent(unknownValidatorError(val.name, val.sourceLocation)));\n             }\n         }\n     }\n \n+    // Unknown validators don't fail the build!\n     private ValidationEvent unknownValidatorError(String name, SourceLocation location) {\n         return ValidationEvent.builder()\n-                // Per the spec, the eventID is \"UnknownValidator.<validatorName>\".\n-                .eventId(\"UnknownValidator.\" + name)\n+                // Per the spec, the eventID is \"UnknownValidator_<validatorName>\".\n+                .eventId(\"UnknownValidator_\" + name)\n                 .severity(Severity.WARNING)\n                 .sourceLocation(location)\n                 .message(\"Unable to locate a validator named `\" + name + \"`\")\n                 .build();\n     }\n+\n+    // Find all namespace suppressions.\n+    private void assembleNamespaceSuppressions() {\n+        model.getMetadataProperty(SUPPRESSIONS).ifPresent(value -> {\n+            List<ObjectNode> values = value.expectArrayNode().getElementsAs(ObjectNode.class);\n+            for (ObjectNode rule : values) {\n+                rule.warnIfAdditionalProperties(SUPPRESSION_KEYS);\n+                String id = rule.expectStringMember(ID).getValue();\n+                String namespace = rule.expectStringMember(NAMESPACE).getValue();\n+                String reason = rule.getStringMemberOrDefault(REASON, EMPTY_REASON);\n+                namespaceSuppressions.computeIfAbsent(id, i -> new HashMap<>()).put(namespace, reason);\n+            }\n+        });\n+    }\n+\n+    private ValidationEvent suppressEvent(ValidationEvent event) {\n+        // ERROR and SUPPRESSED events cannot be suppressed.\n+        if (!event.getSeverity().canSuppress()) {\n+            return event;\n+        }\n+\n+        String reason = resolveReason(event);\n+\n+        // The event is not suppressed, return as-is.\n+        if (reason == null) {\n+            return event;\n+        }\n+\n+        // The event was suppressed so change the severity and reason.\n+        ValidationEvent.Builder builder = event.toBuilder();\n+        builder.severity(Severity.SUPPRESSED);\n+        if (!reason.equals(EMPTY_REASON)) {\n+            builder.suppressionReason(reason);\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    // Get the reason as a String if it is suppressed, or null otherwise.\n+    private String resolveReason(ValidationEvent event) {\n+        return event.getShapeId()\n+                .flatMap(model::getShape)\n+                .flatMap(shape -> matchSuppression(shape, event.getEventId()))\n+                // This is always evaluated if a reason hasn't been found.\n+                .orElseGet(() -> matchWildcardNamespaceSuppressions(event.getEventId()));\n+    }\n+\n+    private Optional<String> matchSuppression(Shape shape, String eventId) {\n+        // Check namespace-wide suppressions.\n+        if (namespaceSuppressions.containsKey(eventId)) {\n+            Map<String, String> namespaces = namespaceSuppressions.get(eventId);\n+            if (namespaces.containsKey(shape.getId().getNamespace())) {\n+                return Optional.of(namespaces.get(shape.getId().getNamespace()));\n+            }\n+        }\n+\n+        // Traits take precedent over service suppressions.", "originalCommit": "07a5c8233dec9e49c1f04704e6b1979b9a85fab7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c92a0ddd529ddc913b085a40fbcbcce87ac3e75", "chunk": "diff --git a/smithy-model/src/main/java/software/amazon/smithy/model/loader/ModelValidator.java b/smithy-model/src/main/java/software/amazon/smithy/model/loader/ModelValidator.java\nindex 66f438bec..7dbba6e62 100644\n--- a/smithy-model/src/main/java/software/amazon/smithy/model/loader/ModelValidator.java\n+++ b/smithy-model/src/main/java/software/amazon/smithy/model/loader/ModelValidator.java\n\n@@ -205,14 +205,6 @@ final class ModelValidator {\n     }\n \n     private Optional<String> matchSuppression(Shape shape, String eventId) {\n-        // Check namespace-wide suppressions.\n-        if (namespaceSuppressions.containsKey(eventId)) {\n-            Map<String, String> namespaces = namespaceSuppressions.get(eventId);\n-            if (namespaces.containsKey(shape.getId().getNamespace())) {\n-                return Optional.of(namespaces.get(shape.getId().getNamespace()));\n-            }\n-        }\n-\n         // Traits take precedent over service suppressions.\n         if (shape.getTrait(SuppressTrait.class).isPresent()) {\n             if (shape.expectTrait(SuppressTrait.class).getValues().contains(eventId)) {\n"}}, {"oid": "1c92a0ddd529ddc913b085a40fbcbcce87ac3e75", "url": "https://github.com/awslabs/smithy/commit/1c92a0ddd529ddc913b085a40fbcbcce87ac3e75", "message": "Move validation into core spec\n\nThis commit moves validation concepts into the core Smithy spec while\nleaving more specific linters in a linters guide.", "committedDate": "2020-04-24T16:47:01Z", "type": "commit"}, {"oid": "1c92a0ddd529ddc913b085a40fbcbcce87ac3e75", "url": "https://github.com/awslabs/smithy/commit/1c92a0ddd529ddc913b085a40fbcbcce87ac3e75", "message": "Move validation into core spec\n\nThis commit moves validation concepts into the core Smithy spec while\nleaving more specific linters in a linters guide.", "committedDate": "2020-04-24T16:47:01Z", "type": "forcePushed"}]}