{"pr_number": 572, "pr_title": "Add flattenNamespaces transformer", "pr_createdAt": "2020-09-17T18:10:02Z", "pr_url": "https://github.com/awslabs/smithy/pull/572", "timeline": [{"oid": "8d32b185b6eaf12c6457528f980397cbff15f4cd", "url": "https://github.com/awslabs/smithy/commit/8d32b185b6eaf12c6457528f980397cbff15f4cd", "message": "Add flattenNamespaces transformer\n\nAdd license header", "committedDate": "2020-09-22T16:20:33Z", "type": "commit"}, {"oid": "8d32b185b6eaf12c6457528f980397cbff15f4cd", "url": "https://github.com/awslabs/smithy/commit/8d32b185b6eaf12c6457528f980397cbff15f4cd", "message": "Add flattenNamespaces transformer\n\nAdd license header", "committedDate": "2020-09-22T16:20:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzMDE5MA==", "url": "https://github.com/awslabs/smithy/pull/572#discussion_r493030190", "bodyText": "This should at least log, but ideally throw, right?", "author": "mtdowling", "createdAt": "2020-09-22T20:59:24Z", "path": "smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.build.transforms;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import software.amazon.smithy.build.TransformContext;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.knowledge.NeighborProviderIndex;\n+import software.amazon.smithy.model.loader.Prelude;\n+import software.amazon.smithy.model.neighbor.Walker;\n+import software.amazon.smithy.model.shapes.ServiceShape;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.transform.ModelTransformer;\n+import software.amazon.smithy.utils.FunctionalUtils;\n+import software.amazon.smithy.utils.Pair;\n+\n+/**\n+ * {@code flattenNamespaces} updates a model by flattening the namespaces of\n+ * shapes connected to a service into a single, target namespace. When\n+ * configuring the transformer, a service and target namespace must be\n+ * specified. Optionally, tags can be specified for including any additional\n+ * shapes that should be flattened into the the target namespace. Any shape\n+ * from outside the service closure that is included via the application of a\n+ * tag will not be included if it conflicts with a shape in the service closure.\n+ */\n+public final class FlattenNamespaces extends ConfigurableProjectionTransformer<FlattenNamespaces.Config> {\n+\n+    /**\n+     * {@code removeTraitShapes} configuration settings.\n+     */\n+    public static final class Config {\n+\n+        private String namespace;\n+        private ShapeId service;\n+        private Set<String> tags = Collections.emptySet();\n+\n+        /**\n+         * Sets the target namespace that existing namespaces will be flattened\n+         * into.\n+         *\n+         * @param namespace The target namespace to use in the model.\n+         */\n+        public void setNamespace(String namespace) {\n+            this.namespace = namespace;\n+        }\n+\n+        /**\n+         * Gets the target namespace that existing namespaces will be flattened\n+         * into.\n+         *\n+         * @return the target namespace to be used in the model.\n+         */\n+        public String getNamespace() {\n+            return namespace;\n+        }\n+\n+        /**\n+         * Sets the service ShapeId that will be flattened into the target\n+         * namespace.\n+         *\n+         * @param service The ID of the service.\n+         */\n+        public void setService(ShapeId service) {\n+            this.service = service;\n+        }\n+\n+        /**\n+         * @return Gets the service shape ID of the service that will have\n+         * its shape namespaces updated.\n+         */\n+        public ShapeId getService() {\n+            return service;\n+        }\n+\n+        /**\n+         * Sets the set of tags that are retained in the model.\n+         *\n+         * @param tags The tags to retain in the model.\n+         */\n+        public void setIncludeTagged(Set<String> tags) {\n+            this.tags = tags;\n+        }\n+\n+        /**\n+         * Gets the set of tags that are retained in the model.\n+         *\n+         * @return Returns the tags to retain.\n+         */\n+        public Set<String> getIncludeTagged() {\n+            return tags;\n+        }\n+    }\n+\n+    @Override\n+    public Class<Config> getConfigType() {\n+        return Config.class;\n+    }\n+\n+    @Override\n+    protected Model transformWithConfig(TransformContext context, Config config) {\n+        Model model = context.getModel();\n+        Map<ShapeId, ShapeId> shapesToRename = getRenamedShapes(config, model);\n+        return ModelTransformer.create().renameShapes(model, shapesToRename);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"flattenNamespaces\";\n+    }\n+\n+    private Map<ShapeId, ShapeId> getRenamedShapes(Config config, Model model) {\n+        // If no service has been specified, or the service is not present in\n+        // the model, return an empty map.\n+        if (config.service == null || !model.getShape(config.getService()).isPresent()) {\n+            return Collections.emptyMap();", "originalCommit": "8d32b185b6eaf12c6457528f980397cbff15f4cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2OTEzOQ==", "url": "https://github.com/awslabs/smithy/pull/572#discussion_r493069139", "bodyText": "Yes, this throws now, along with if a target namespace has not been set.", "author": "srchase", "createdAt": "2020-09-22T22:29:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzMDE5MA=="}], "type": "inlineReview", "revised_code": {"commit": "33259f847331b0527042eecc6324fb8264657e4c", "chunk": "diff --git a/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java b/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java\nindex 8db59c156..1eeb09dbb 100644\n--- a/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java\n+++ b/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java\n\n@@ -19,6 +19,7 @@ import java.util.Collections;\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import software.amazon.smithy.build.SmithyBuildException;\n import software.amazon.smithy.build.TransformContext;\n import software.amazon.smithy.model.Model;\n import software.amazon.smithy.model.knowledge.NeighborProviderIndex;\n"}}, {"oid": "33259f847331b0527042eecc6324fb8264657e4c", "url": "https://github.com/awslabs/smithy/commit/33259f847331b0527042eecc6324fb8264657e4c", "message": "Throw on invalid config, update docs", "committedDate": "2020-09-22T22:25:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0MjE1Nw==", "url": "https://github.com/awslabs/smithy/pull/572#discussion_r493942157", "bodyText": "need space after 'service'", "author": "mtdowling", "createdAt": "2020-09-23T23:03:42Z", "path": "smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java", "diffHunk": "@@ -115,6 +116,10 @@ public void setIncludeTagged(Set<String> tags) {\n \n     @Override\n     protected Model transformWithConfig(TransformContext context, Config config) {\n+        if (config.getService() == null || config.getNamespace() == null) {\n+            throw new SmithyBuildException(\n+                    \"'namespace' and 'service'properties must be set on flattenNamespace transformer.\");", "originalCommit": "33259f847331b0527042eecc6324fb8264657e4c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fe2c03da6f8aede0627f0d97ee2773495935596f", "chunk": "diff --git a/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java b/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java\nindex 1eeb09dbb..98f29c368 100644\n--- a/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java\n+++ b/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java\n\n@@ -118,7 +118,7 @@ public final class FlattenNamespaces extends ConfigurableProjectionTransformer<F\n     protected Model transformWithConfig(TransformContext context, Config config) {\n         if (config.getService() == null || config.getNamespace() == null) {\n             throw new SmithyBuildException(\n-                    \"'namespace' and 'service'properties must be set on flattenNamespace transformer.\");\n+                    \"'namespace' and 'service' properties must be set on flattenNamespace transformer.\");\n         }\n         Model model = context.getModel();\n         Map<ShapeId, ShapeId> shapesToRename = getRenamedShapes(config, model);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0NjUyMA==", "url": "https://github.com/awslabs/smithy/pull/572#discussion_r493946520", "bodyText": "model.getKnowledge(NeighborProviderIndex.class, NeighborProviderIndex::new) should be NeighborProviderIndex.of(model).", "author": "mtdowling", "createdAt": "2020-09-23T23:10:41Z", "path": "smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.build.transforms;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import software.amazon.smithy.build.SmithyBuildException;\n+import software.amazon.smithy.build.TransformContext;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.knowledge.NeighborProviderIndex;\n+import software.amazon.smithy.model.loader.Prelude;\n+import software.amazon.smithy.model.neighbor.Walker;\n+import software.amazon.smithy.model.shapes.ServiceShape;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.transform.ModelTransformer;\n+import software.amazon.smithy.utils.FunctionalUtils;\n+import software.amazon.smithy.utils.Pair;\n+\n+/**\n+ * {@code flattenNamespaces} updates a model by flattening the namespaces of\n+ * shapes connected to a service into a single, target namespace. When\n+ * configuring the transformer, a service and target namespace must be\n+ * specified. Optionally, tags can be specified for including any additional\n+ * shapes that should be flattened into the the target namespace. Any shape\n+ * from outside the service closure that is included via the application of a\n+ * tag will not be included if it conflicts with a shape in the service closure.\n+ */\n+public final class FlattenNamespaces extends ConfigurableProjectionTransformer<FlattenNamespaces.Config> {\n+\n+    /**\n+     * {@code removeTraitShapes} configuration settings.\n+     */\n+    public static final class Config {\n+\n+        private String namespace;\n+        private ShapeId service;\n+        private Set<String> tags = Collections.emptySet();\n+\n+        /**\n+         * Sets the target namespace that existing namespaces will be flattened\n+         * into.\n+         *\n+         * @param namespace The target namespace to use in the model.\n+         */\n+        public void setNamespace(String namespace) {\n+            this.namespace = namespace;\n+        }\n+\n+        /**\n+         * Gets the target namespace that existing namespaces will be flattened\n+         * into.\n+         *\n+         * @return the target namespace to be used in the model.\n+         */\n+        public String getNamespace() {\n+            return namespace;\n+        }\n+\n+        /**\n+         * Sets the service ShapeId that will be flattened into the target\n+         * namespace.\n+         *\n+         * @param service The ID of the service.\n+         */\n+        public void setService(ShapeId service) {\n+            this.service = service;\n+        }\n+\n+        /**\n+         * @return Gets the service shape ID of the service that will have\n+         * its shape namespaces updated.\n+         */\n+        public ShapeId getService() {\n+            return service;\n+        }\n+\n+        /**\n+         * Sets the set of tags that are retained in the model.\n+         *\n+         * @param tags The tags to retain in the model.\n+         */\n+        public void setIncludeTagged(Set<String> tags) {\n+            this.tags = tags;\n+        }\n+\n+        /**\n+         * Gets the set of tags that are retained in the model.\n+         *\n+         * @return Returns the tags to retain.\n+         */\n+        public Set<String> getIncludeTagged() {\n+            return tags;\n+        }\n+    }\n+\n+    @Override\n+    public Class<Config> getConfigType() {\n+        return Config.class;\n+    }\n+\n+    @Override\n+    protected Model transformWithConfig(TransformContext context, Config config) {\n+        if (config.getService() == null || config.getNamespace() == null) {\n+            throw new SmithyBuildException(\n+                    \"'namespace' and 'service'properties must be set on flattenNamespace transformer.\");\n+        }\n+        Model model = context.getModel();\n+        Map<ShapeId, ShapeId> shapesToRename = getRenamedShapes(config, model);\n+        return ModelTransformer.create().renameShapes(model, shapesToRename);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"flattenNamespaces\";\n+    }\n+\n+    private Map<ShapeId, ShapeId> getRenamedShapes(Config config, Model model) {\n+        if (!model.getShape(config.getService()).isPresent()) {\n+            throw new SmithyBuildException(\"Service not found in model when performing flattenNamespaces transform.\");\n+        }\n+\n+        Map<ShapeId, ShapeId> shapesToRename = getRenamedShapesConnectedToService(config, model);\n+        Set<ShapeId> taggedShapesToInclude = getTaggedShapesToInclude(config.getIncludeTagged(), model);\n+\n+        for (ShapeId id : taggedShapesToInclude) {\n+            ShapeId updatedShapeId = updateNamespace(id, config.getNamespace());\n+            // If new shape ID already exists in map of shapes to rename, skip\n+            // including the additional shape to avoid a conflict.\n+            if (!shapesToRename.containsValue(updatedShapeId)) {\n+                shapesToRename.put(id, updatedShapeId);\n+            }\n+        }\n+\n+        return shapesToRename;\n+    }\n+\n+    private ShapeId updateNamespace(ShapeId shapeId, String namespace) {\n+        if (shapeId.getMember().isPresent()) {\n+            return ShapeId.fromParts(namespace, shapeId.getName(), shapeId.getMember().get());\n+        }\n+        return ShapeId.fromParts(namespace, shapeId.getName());\n+    }\n+\n+    private Map<ShapeId, ShapeId> getRenamedShapesConnectedToService(Config config, Model model) {\n+        Walker shapeWalker = new Walker(model.getKnowledge(NeighborProviderIndex.class, NeighborProviderIndex::new)", "originalCommit": "33259f847331b0527042eecc6324fb8264657e4c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fe2c03da6f8aede0627f0d97ee2773495935596f", "chunk": "diff --git a/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java b/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java\nindex 1eeb09dbb..98f29c368 100644\n--- a/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java\n+++ b/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java\n\n@@ -118,7 +118,7 @@ public final class FlattenNamespaces extends ConfigurableProjectionTransformer<F\n     protected Model transformWithConfig(TransformContext context, Config config) {\n         if (config.getService() == null || config.getNamespace() == null) {\n             throw new SmithyBuildException(\n-                    \"'namespace' and 'service'properties must be set on flattenNamespace transformer.\");\n+                    \"'namespace' and 'service' properties must be set on flattenNamespace transformer.\");\n         }\n         Model model = context.getModel();\n         Map<ShapeId, ShapeId> shapesToRename = getRenamedShapes(config, model);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0NzQzOA==", "url": "https://github.com/awslabs/smithy/pull/572#discussion_r493947438", "bodyText": "We should probably validate that the shape is a service too. We might end up broadening support of this transform in the future to support other shapes, but may need different logic.", "author": "mtdowling", "createdAt": "2020-09-23T23:12:16Z", "path": "smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.build.transforms;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import software.amazon.smithy.build.SmithyBuildException;\n+import software.amazon.smithy.build.TransformContext;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.knowledge.NeighborProviderIndex;\n+import software.amazon.smithy.model.loader.Prelude;\n+import software.amazon.smithy.model.neighbor.Walker;\n+import software.amazon.smithy.model.shapes.ServiceShape;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.transform.ModelTransformer;\n+import software.amazon.smithy.utils.FunctionalUtils;\n+import software.amazon.smithy.utils.Pair;\n+\n+/**\n+ * {@code flattenNamespaces} updates a model by flattening the namespaces of\n+ * shapes connected to a service into a single, target namespace. When\n+ * configuring the transformer, a service and target namespace must be\n+ * specified. Optionally, tags can be specified for including any additional\n+ * shapes that should be flattened into the the target namespace. Any shape\n+ * from outside the service closure that is included via the application of a\n+ * tag will not be included if it conflicts with a shape in the service closure.\n+ */\n+public final class FlattenNamespaces extends ConfigurableProjectionTransformer<FlattenNamespaces.Config> {\n+\n+    /**\n+     * {@code removeTraitShapes} configuration settings.\n+     */\n+    public static final class Config {\n+\n+        private String namespace;\n+        private ShapeId service;\n+        private Set<String> tags = Collections.emptySet();\n+\n+        /**\n+         * Sets the target namespace that existing namespaces will be flattened\n+         * into.\n+         *\n+         * @param namespace The target namespace to use in the model.\n+         */\n+        public void setNamespace(String namespace) {\n+            this.namespace = namespace;\n+        }\n+\n+        /**\n+         * Gets the target namespace that existing namespaces will be flattened\n+         * into.\n+         *\n+         * @return the target namespace to be used in the model.\n+         */\n+        public String getNamespace() {\n+            return namespace;\n+        }\n+\n+        /**\n+         * Sets the service ShapeId that will be flattened into the target\n+         * namespace.\n+         *\n+         * @param service The ID of the service.\n+         */\n+        public void setService(ShapeId service) {\n+            this.service = service;\n+        }\n+\n+        /**\n+         * @return Gets the service shape ID of the service that will have\n+         * its shape namespaces updated.\n+         */\n+        public ShapeId getService() {\n+            return service;\n+        }\n+\n+        /**\n+         * Sets the set of tags that are retained in the model.\n+         *\n+         * @param tags The tags to retain in the model.\n+         */\n+        public void setIncludeTagged(Set<String> tags) {\n+            this.tags = tags;\n+        }\n+\n+        /**\n+         * Gets the set of tags that are retained in the model.\n+         *\n+         * @return Returns the tags to retain.\n+         */\n+        public Set<String> getIncludeTagged() {\n+            return tags;\n+        }\n+    }\n+\n+    @Override\n+    public Class<Config> getConfigType() {\n+        return Config.class;\n+    }\n+\n+    @Override\n+    protected Model transformWithConfig(TransformContext context, Config config) {\n+        if (config.getService() == null || config.getNamespace() == null) {\n+            throw new SmithyBuildException(\n+                    \"'namespace' and 'service'properties must be set on flattenNamespace transformer.\");\n+        }\n+        Model model = context.getModel();\n+        Map<ShapeId, ShapeId> shapesToRename = getRenamedShapes(config, model);\n+        return ModelTransformer.create().renameShapes(model, shapesToRename);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"flattenNamespaces\";\n+    }\n+\n+    private Map<ShapeId, ShapeId> getRenamedShapes(Config config, Model model) {\n+        if (!model.getShape(config.getService()).isPresent()) {\n+            throw new SmithyBuildException(\"Service not found in model when performing flattenNamespaces transform.\");", "originalCommit": "33259f847331b0527042eecc6324fb8264657e4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ1NDE5Mg==", "url": "https://github.com/awslabs/smithy/pull/572#discussion_r494454192", "bodyText": "Added validation, with a separate error message, that this is needs to be a service shape.", "author": "srchase", "createdAt": "2020-09-24T16:29:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0NzQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "fe2c03da6f8aede0627f0d97ee2773495935596f", "chunk": "diff --git a/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java b/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java\nindex 1eeb09dbb..98f29c368 100644\n--- a/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java\n+++ b/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java\n\n@@ -118,7 +118,7 @@ public final class FlattenNamespaces extends ConfigurableProjectionTransformer<F\n     protected Model transformWithConfig(TransformContext context, Config config) {\n         if (config.getService() == null || config.getNamespace() == null) {\n             throw new SmithyBuildException(\n-                    \"'namespace' and 'service'properties must be set on flattenNamespace transformer.\");\n+                    \"'namespace' and 'service' properties must be set on flattenNamespace transformer.\");\n         }\n         Model model = context.getModel();\n         Map<ShapeId, ShapeId> shapesToRename = getRenamedShapes(config, model);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4ODk4MQ==", "url": "https://github.com/awslabs/smithy/pull/572#discussion_r496288981", "bodyText": "This could be model.expectShape(config.getService(), ServiceShape.class())", "author": "mtdowling", "createdAt": "2020-09-28T23:24:57Z", "path": "smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java", "diffHunk": "@@ -158,9 +158,13 @@ private ShapeId updateNamespace(ShapeId shapeId, String namespace) {\n     }\n \n     private Map<ShapeId, ShapeId> getRenamedShapesConnectedToService(Config config, Model model) {\n-        Walker shapeWalker = new Walker(model.getKnowledge(NeighborProviderIndex.class, NeighborProviderIndex::new)\n-                .getProvider());\n-        ServiceShape service = model.expectShape(config.getService(), ServiceShape.class);\n+        Walker shapeWalker = new Walker(NeighborProviderIndex.of(model).getProvider());\n+        Shape service = model.expectShape(config.getService());", "originalCommit": "1ec1787d77e507731770974721521ea1f0d51ed6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NTk5OQ==", "url": "https://github.com/awslabs/smithy/pull/572#discussion_r496295999", "bodyText": "Fixed.", "author": "srchase", "createdAt": "2020-09-28T23:47:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4ODk4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fe2c03da6f8aede0627f0d97ee2773495935596f", "chunk": "diff --git a/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java b/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java\nindex d9a0eff26..98f29c368 100644\n--- a/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java\n+++ b/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java\n\n@@ -159,12 +160,7 @@ public final class FlattenNamespaces extends ConfigurableProjectionTransformer<F\n \n     private Map<ShapeId, ShapeId> getRenamedShapesConnectedToService(Config config, Model model) {\n         Walker shapeWalker = new Walker(NeighborProviderIndex.of(model).getProvider());\n-        Shape service = model.expectShape(config.getService());\n-        if (!service.isServiceShape()) {\n-            throw new SmithyBuildException(\"Configured service, \" + config.getService().toString()\n-                    + \", is not a valid service shape.\");\n-        }\n-\n+        ServiceShape service = model.expectShape(config.getService(), ServiceShape.class);\n         return shapeWalker.walkShapes(service).stream()\n                 .filter(FunctionalUtils.not(Prelude::isPreludeShape))\n                 .map(shape -> Pair.of(shape.getId(), updateNamespace(shape.getId(), config.getNamespace())))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4OTA2OQ==", "url": "https://github.com/awslabs/smithy/pull/572#discussion_r496289069", "bodyText": "You don't need toString in string concatenation", "author": "mtdowling", "createdAt": "2020-09-28T23:25:10Z", "path": "smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java", "diffHunk": "@@ -158,9 +158,13 @@ private ShapeId updateNamespace(ShapeId shapeId, String namespace) {\n     }\n \n     private Map<ShapeId, ShapeId> getRenamedShapesConnectedToService(Config config, Model model) {\n-        Walker shapeWalker = new Walker(model.getKnowledge(NeighborProviderIndex.class, NeighborProviderIndex::new)\n-                .getProvider());\n-        ServiceShape service = model.expectShape(config.getService(), ServiceShape.class);\n+        Walker shapeWalker = new Walker(NeighborProviderIndex.of(model).getProvider());\n+        Shape service = model.expectShape(config.getService());\n+        if (!service.isServiceShape()) {\n+            throw new SmithyBuildException(\"Configured service, \" + config.getService().toString()", "originalCommit": "1ec1787d77e507731770974721521ea1f0d51ed6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fe2c03da6f8aede0627f0d97ee2773495935596f", "chunk": "diff --git a/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java b/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java\nindex d9a0eff26..98f29c368 100644\n--- a/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java\n+++ b/smithy-build/src/main/java/software/amazon/smithy/build/transforms/FlattenNamespaces.java\n\n@@ -159,12 +160,7 @@ public final class FlattenNamespaces extends ConfigurableProjectionTransformer<F\n \n     private Map<ShapeId, ShapeId> getRenamedShapesConnectedToService(Config config, Model model) {\n         Walker shapeWalker = new Walker(NeighborProviderIndex.of(model).getProvider());\n-        Shape service = model.expectShape(config.getService());\n-        if (!service.isServiceShape()) {\n-            throw new SmithyBuildException(\"Configured service, \" + config.getService().toString()\n-                    + \", is not a valid service shape.\");\n-        }\n-\n+        ServiceShape service = model.expectShape(config.getService(), ServiceShape.class);\n         return shapeWalker.walkShapes(service).stream()\n                 .filter(FunctionalUtils.not(Prelude::isPreludeShape))\n                 .map(shape -> Pair.of(shape.getId(), updateNamespace(shape.getId(), config.getNamespace())))\n"}}, {"oid": "fe2c03da6f8aede0627f0d97ee2773495935596f", "url": "https://github.com/awslabs/smithy/commit/fe2c03da6f8aede0627f0d97ee2773495935596f", "message": "Throw when service is invalid", "committedDate": "2020-09-28T23:46:48Z", "type": "commit"}, {"oid": "fe2c03da6f8aede0627f0d97ee2773495935596f", "url": "https://github.com/awslabs/smithy/commit/fe2c03da6f8aede0627f0d97ee2773495935596f", "message": "Throw when service is invalid", "committedDate": "2020-09-28T23:46:48Z", "type": "forcePushed"}]}