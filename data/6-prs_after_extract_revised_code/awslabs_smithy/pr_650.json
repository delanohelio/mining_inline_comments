{"pr_number": 650, "pr_title": "Add HTTP header trait validation", "pr_createdAt": "2020-12-02T21:56:55Z", "pr_url": "https://github.com/awslabs/smithy/pull/650", "timeline": [{"oid": "8bfe42e910a595f8a633b77305bd669bf9c2a12c", "url": "https://github.com/awslabs/smithy/commit/8bfe42e910a595f8a633b77305bd669bf9c2a12c", "message": "Add HTTP header trait validation\n\nCloses #614 and also removes a non-inclusive term from the same\nvalidator.", "committedDate": "2020-12-02T21:55:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA2NDgyNA==", "url": "https://github.com/awslabs/smithy/pull/650#discussion_r535064824", "bodyText": "Can you put the specific character that caused the failure in the error message?", "author": "JordonPhillips", "createdAt": "2020-12-03T10:24:42Z", "path": "smithy-model/src/main/java/software/amazon/smithy/model/validation/validators/HttpHeaderTraitValidator.java", "diffHunk": "@@ -68,15 +84,30 @@\n \n         events.addAll(model.shapes(MemberShape.class)\n                 .flatMap(member -> Trait.flatMapStream(member, HttpHeaderTrait.class))\n-                .filter(pair -> BLACKLIST.contains(pair.getRight().getValue().toLowerCase(Locale.US)))\n-                .map(pair -> danger(pair.getLeft(), String.format(\n-                        \"httpHeader cannot be set to `%s`\", pair.getRight().getValue()\n-                )))\n+                .flatMap(pair -> OptionalUtils.stream(validateHeader(pair.left, pair.right)))\n                 .collect(Collectors.toList()));\n \n         return events;\n     }\n \n+    private Optional<ValidationEvent> validateHeader(MemberShape member, HttpHeaderTrait trait) {\n+        String header = trait.getValue();\n+\n+        if (BLOCKLIST.contains(header.toLowerCase(Locale.ENGLISH))) {\n+            return Optional.of(danger(member, trait, String.format(\n+                    \"`%s` is not an allowed HTTP header binding\", header)));\n+        }\n+\n+        for (int i = 0; i < header.length(); i++) {\n+            if (!TCHAR.contains(header.charAt(i))) {\n+                return Optional.of(danger(member, trait, String.format(\n+                        \"`%s` is not a valid HTTP header field name according to section 3.2 of RFC 7230\", header)));", "originalCommit": "8bfe42e910a595f8a633b77305bd669bf9c2a12c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ1ODUzMw==", "url": "https://github.com/awslabs/smithy/pull/650#discussion_r535458533", "bodyText": "IMO, that isn't super important given we link to the RFC and show the header in the error message. I considered using a regular expression, but decided that this kind of check would be easier to understand. By keeping the validation message like this, we could theoretically switch to a regex and keep the same error message if we ever wanted to.", "author": "mtdowling", "createdAt": "2020-12-03T18:00:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA2NDgyNA=="}], "type": "inlineReview", "revised_code": null}]}