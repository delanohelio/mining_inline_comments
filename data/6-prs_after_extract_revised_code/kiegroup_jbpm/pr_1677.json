{"pr_number": 1677, "pr_title": "RHPAM-2980 Update timer of SLA", "pr_createdAt": "2020-06-08T15:15:19Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1677", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNTI4OA==", "url": "https://github.com/kiegroup/jbpm/pull/1677#discussion_r437015288", "bodyText": "Test is not working properly (passes whatever value the timer is updated: 10, 2, etc.)\nslaViolated is always false due to count of the latch never reaches zero, because countdown method is not called.", "author": "gmunozfe", "createdAt": "2020-06-08T21:36:25Z", "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java", "diffHunk": "@@ -244,6 +248,67 @@ public void testSLAonUserTaskMet() throws Exception {\n         ksession.dispose();\n     }\n     \n+    @Test\n+    public void testSLAonUserTaskUpdated() throws Exception {\n+    \tCountDownLatch latch = new CountDownLatch(1);\n+        TimerIdListener listener = new TimerIdListener();\n+        KieBase kbase = createKnowledgeBase(\"BPMN2-UserTaskWithSLAOnTask.bpmn2\");\n+        KieSession ksession = createKnowledgeSession(kbase);\n+        TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);        \n+        ksession.addEventListener(listener);\n+        \n+        ProcessInstance processInstance = ksession.startProcess(\"UserTask\");\n+        assertTrue(processInstance.getState() == ProcessInstance.STATE_ACTIVE);\n+        \n+        WorkItem workItem = workItemHandler.getWorkItem();\n+        assertNotNull(workItem);\n+        assertEquals(\"john\", workItem.getParameter(\"ActorId\"));\n+                \n+        processInstance = ksession.getProcessInstance(processInstance.getId());\n+        assertTrue(processInstance.getState() == ProcessInstance.STATE_ACTIVE);\n+        \n+        Collection<NodeInstance> active = ((WorkflowProcessInstance)processInstance).getNodeInstances();\n+        assertEquals(1, active.size());\n+        \n+        long timerId = listener.getTimerId();\n+        assertNotEquals(-1, timerId);\n+        \n+        ksession.execute(new UpdateTimerCommand(processInstance.getId(), (long) timerId, 10));\n+        \n+        boolean slaViolated = latch.await(5, TimeUnit.SECONDS);", "originalCommit": "08ca6a8354c751ce17b50f6a5c2b53e3a6b8a495", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54404142aafc36f6a48fa46723b817141dedd8b8", "chunk": "diff --git a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java\nindex 5670ac05c..cc1c89fb2 100644\n--- a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java\n+++ b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java\n\n@@ -250,8 +250,8 @@ public class SLAComplianceTest extends JbpmBpmn2TestCase {\n     \n     @Test\n     public void testSLAonUserTaskUpdated() throws Exception {\n-    \tCountDownLatch latch = new CountDownLatch(1);\n-        TimerIdListener listener = new TimerIdListener();\n+        CountDownLatch latch = new CountDownLatch(1);\n+        TimerIdListener listener = new TimerIdListener(latch);\n         KieBase kbase = createKnowledgeBase(\"BPMN2-UserTaskWithSLAOnTask.bpmn2\");\n         KieSession ksession = createKnowledgeSession(kbase);\n         TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNTM1NA==", "url": "https://github.com/kiegroup/jbpm/pull/1677#discussion_r437015354", "bodyText": "Instead of defining this attribute, it would be better to invoke countdown for the latch (initialized in the constructor)", "author": "gmunozfe", "createdAt": "2020-06-08T21:36:34Z", "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java", "diffHunk": "@@ -244,6 +248,67 @@ public void testSLAonUserTaskMet() throws Exception {\n         ksession.dispose();\n     }\n     \n+    @Test\n+    public void testSLAonUserTaskUpdated() throws Exception {\n+    \tCountDownLatch latch = new CountDownLatch(1);\n+        TimerIdListener listener = new TimerIdListener();\n+        KieBase kbase = createKnowledgeBase(\"BPMN2-UserTaskWithSLAOnTask.bpmn2\");\n+        KieSession ksession = createKnowledgeSession(kbase);\n+        TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);        \n+        ksession.addEventListener(listener);\n+        \n+        ProcessInstance processInstance = ksession.startProcess(\"UserTask\");\n+        assertTrue(processInstance.getState() == ProcessInstance.STATE_ACTIVE);\n+        \n+        WorkItem workItem = workItemHandler.getWorkItem();\n+        assertNotNull(workItem);\n+        assertEquals(\"john\", workItem.getParameter(\"ActorId\"));\n+                \n+        processInstance = ksession.getProcessInstance(processInstance.getId());\n+        assertTrue(processInstance.getState() == ProcessInstance.STATE_ACTIVE);\n+        \n+        Collection<NodeInstance> active = ((WorkflowProcessInstance)processInstance).getNodeInstances();\n+        assertEquals(1, active.size());\n+        \n+        long timerId = listener.getTimerId();\n+        assertNotEquals(-1, timerId);\n+        \n+        ksession.execute(new UpdateTimerCommand(processInstance.getId(), (long) timerId, 10));\n+        \n+        boolean slaViolated = latch.await(5, TimeUnit.SECONDS);\n+        assertFalse(\"SLA should not violated by timer\", slaViolated);\n+        \n+        ksession.dispose();\n+    }\n+    \n+    class TimerIdListener extends DefaultProcessEventListener {\n+\n+    \tprivate long timerId = -1;\n+    \tprivate boolean slaViolated = false;\n+    \t\n+    \t@Override\n+    \tpublic void afterNodeTriggered(ProcessNodeTriggeredEvent event) {\n+            if (event.getNodeInstance() instanceof HumanTaskNodeInstance) {\n+                timerId = ((HumanTaskNodeInstance) event.getNodeInstance()).getSlaTimerId();\n+            }\n+        }\n+    \t\n+    \tpublic long getTimerId() {\n+    \t\treturn timerId;\n+    \t}\n+    \t\n+        @Override\n+        public void afterSLAViolated(SLAViolatedEvent event) {\n+            this.slaViolated = true;", "originalCommit": "08ca6a8354c751ce17b50f6a5c2b53e3a6b8a495", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54404142aafc36f6a48fa46723b817141dedd8b8", "chunk": "diff --git a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java\nindex 5670ac05c..cc1c89fb2 100644\n--- a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java\n+++ b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java\n\n@@ -250,8 +250,8 @@ public class SLAComplianceTest extends JbpmBpmn2TestCase {\n     \n     @Test\n     public void testSLAonUserTaskUpdated() throws Exception {\n-    \tCountDownLatch latch = new CountDownLatch(1);\n-        TimerIdListener listener = new TimerIdListener();\n+        CountDownLatch latch = new CountDownLatch(1);\n+        TimerIdListener listener = new TimerIdListener(latch);\n         KieBase kbase = createKnowledgeBase(\"BPMN2-UserTaskWithSLAOnTask.bpmn2\");\n         KieSession ksession = createKnowledgeSession(kbase);\n         TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNjYzMA==", "url": "https://github.com/kiegroup/jbpm/pull/1677#discussion_r437016630", "bodyText": "This is never used from the test. If latch is part of the listener, you can define a public await method to return the latch.await result, receiving the timeout and time unit, and check in the test the returned value.", "author": "gmunozfe", "createdAt": "2020-06-08T21:39:33Z", "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java", "diffHunk": "@@ -244,6 +248,67 @@ public void testSLAonUserTaskMet() throws Exception {\n         ksession.dispose();\n     }\n     \n+    @Test\n+    public void testSLAonUserTaskUpdated() throws Exception {\n+    \tCountDownLatch latch = new CountDownLatch(1);\n+        TimerIdListener listener = new TimerIdListener();\n+        KieBase kbase = createKnowledgeBase(\"BPMN2-UserTaskWithSLAOnTask.bpmn2\");\n+        KieSession ksession = createKnowledgeSession(kbase);\n+        TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);        \n+        ksession.addEventListener(listener);\n+        \n+        ProcessInstance processInstance = ksession.startProcess(\"UserTask\");\n+        assertTrue(processInstance.getState() == ProcessInstance.STATE_ACTIVE);\n+        \n+        WorkItem workItem = workItemHandler.getWorkItem();\n+        assertNotNull(workItem);\n+        assertEquals(\"john\", workItem.getParameter(\"ActorId\"));\n+                \n+        processInstance = ksession.getProcessInstance(processInstance.getId());\n+        assertTrue(processInstance.getState() == ProcessInstance.STATE_ACTIVE);\n+        \n+        Collection<NodeInstance> active = ((WorkflowProcessInstance)processInstance).getNodeInstances();\n+        assertEquals(1, active.size());\n+        \n+        long timerId = listener.getTimerId();\n+        assertNotEquals(-1, timerId);\n+        \n+        ksession.execute(new UpdateTimerCommand(processInstance.getId(), (long) timerId, 10));\n+        \n+        boolean slaViolated = latch.await(5, TimeUnit.SECONDS);\n+        assertFalse(\"SLA should not violated by timer\", slaViolated);\n+        \n+        ksession.dispose();\n+    }\n+    \n+    class TimerIdListener extends DefaultProcessEventListener {\n+\n+    \tprivate long timerId = -1;\n+    \tprivate boolean slaViolated = false;\n+    \t\n+    \t@Override\n+    \tpublic void afterNodeTriggered(ProcessNodeTriggeredEvent event) {\n+            if (event.getNodeInstance() instanceof HumanTaskNodeInstance) {\n+                timerId = ((HumanTaskNodeInstance) event.getNodeInstance()).getSlaTimerId();\n+            }\n+        }\n+    \t\n+    \tpublic long getTimerId() {\n+    \t\treturn timerId;\n+    \t}\n+    \t\n+        @Override\n+        public void afterSLAViolated(SLAViolatedEvent event) {\n+            this.slaViolated = true;\n+        }\n+        \n+        public boolean isViolated() {", "originalCommit": "08ca6a8354c751ce17b50f6a5c2b53e3a6b8a495", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54404142aafc36f6a48fa46723b817141dedd8b8", "chunk": "diff --git a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java\nindex 5670ac05c..cc1c89fb2 100644\n--- a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java\n+++ b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java\n\n@@ -250,8 +250,8 @@ public class SLAComplianceTest extends JbpmBpmn2TestCase {\n     \n     @Test\n     public void testSLAonUserTaskUpdated() throws Exception {\n-    \tCountDownLatch latch = new CountDownLatch(1);\n-        TimerIdListener listener = new TimerIdListener();\n+        CountDownLatch latch = new CountDownLatch(1);\n+        TimerIdListener listener = new TimerIdListener(latch);\n         KieBase kbase = createKnowledgeBase(\"BPMN2-UserTaskWithSLAOnTask.bpmn2\");\n         KieSession ksession = createKnowledgeSession(kbase);\n         TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxOTQzNA==", "url": "https://github.com/kiegroup/jbpm/pull/1677#discussion_r437019434", "bodyText": "Indentation format issue: do not use tabs", "author": "gmunozfe", "createdAt": "2020-06-08T21:45:56Z", "path": "jbpm-flow/src/main/java/org/jbpm/process/instance/command/UpdateTimerCommand.java", "diffHunk": "@@ -117,6 +118,18 @@ public Void execute(Context context ) {\n             throw new IllegalArgumentException(\"Process instance with id \" + processInstanceId + \" not found\");\n         }\n         for (NodeInstance nodeInstance : wfp.getNodeInstances(true)) {\n+        \tlong slaTimerId = ((NodeInstanceImpl) nodeInstance).getSlaTimerId();\n+        \tif (slaTimerId != -1 && slaTimerId == timerId) {\n+            \tTimerInstance timer = tm.getTimerMap().get(timerId);\n+                \n+                TimerInstance newTimer = rescheduleTimer(timer, tm);\n+                logger.debug(\"New timer {} about to be registered\", newTimer);\n+                tm.registerTimer(newTimer, wfp);                        \n+                \n+                ((NodeInstanceImpl) nodeInstance).internalSetSlaTimerId(newTimer.getId());\n+                logger.debug(\"New timer {} successfully registered\", newTimer);\n+                break;\n+            }", "originalCommit": "08ca6a8354c751ce17b50f6a5c2b53e3a6b8a495", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54404142aafc36f6a48fa46723b817141dedd8b8", "chunk": "diff --git a/jbpm-flow/src/main/java/org/jbpm/process/instance/command/UpdateTimerCommand.java b/jbpm-flow/src/main/java/org/jbpm/process/instance/command/UpdateTimerCommand.java\nindex f9b5e50b8..5bbacff9e 100644\n--- a/jbpm-flow/src/main/java/org/jbpm/process/instance/command/UpdateTimerCommand.java\n+++ b/jbpm-flow/src/main/java/org/jbpm/process/instance/command/UpdateTimerCommand.java\n\n@@ -123,11 +123,11 @@ public class UpdateTimerCommand implements ExecutableCommand<Void>, ProcessInsta\n             \tTimerInstance timer = tm.getTimerMap().get(timerId);\n                 \n                 TimerInstance newTimer = rescheduleTimer(timer, tm);\n-                logger.debug(\"New timer {} about to be registered\", newTimer);\n+                logger.debug(\"New SLA timer {} about to be registered\", newTimer);\n                 tm.registerTimer(newTimer, wfp);                        \n                 \n                 ((NodeInstanceImpl) nodeInstance).internalSetSlaTimerId(newTimer.getId());\n-                logger.debug(\"New timer {} successfully registered\", newTimer);\n+                logger.debug(\"New SLA timer {} successfully registered\", newTimer);\n                 break;\n             }\n             if (nodeInstance instanceof TimerNodeInstance) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0ODExMg==", "url": "https://github.com/kiegroup/jbpm/pull/1677#discussion_r437048112", "bodyText": "Review indentation", "author": "gmunozfe", "createdAt": "2020-06-08T23:03:54Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/admin/commands/ListTimersCommand.java", "diffHunk": "@@ -100,6 +101,13 @@ private TimerInstanceImpl buildTimer(org.jbpm.process.instance.timer.TimerInstan\n     \n     protected void processNodeInstance(TimerManager tm, NodeInstanceContainer container, List<TimerInstance> timers) {\n     \tfor (NodeInstance nodeInstance : container.getNodeInstances()) {\n+        \tif (((NodeInstanceImpl) nodeInstance).getSlaTimerId() != -1) {\n+    \t\t\torg.jbpm.process.instance.timer.TimerInstance timer = tm.getTimerMap().get(((NodeInstanceImpl) nodeInstance).getSlaTimerId());", "originalCommit": "08ca6a8354c751ce17b50f6a5c2b53e3a6b8a495", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "97fde7669486bc2a363c66f293e54051219974d5", "chunk": "diff --git a/jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/admin/commands/ListTimersCommand.java b/jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/admin/commands/ListTimersCommand.java\nindex 6fb22a112..0dbeafdf9 100644\n--- a/jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/admin/commands/ListTimersCommand.java\n+++ b/jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/admin/commands/ListTimersCommand.java\n\n@@ -101,13 +100,6 @@ public class ListTimersCommand implements ExecutableCommand<List<TimerInstance>>\n     \n     protected void processNodeInstance(TimerManager tm, NodeInstanceContainer container, List<TimerInstance> timers) {\n     \tfor (NodeInstance nodeInstance : container.getNodeInstances()) {\n-        \tif (((NodeInstanceImpl) nodeInstance).getSlaTimerId() != -1) {\n-    \t\t\torg.jbpm.process.instance.timer.TimerInstance timer = tm.getTimerMap().get(((NodeInstanceImpl) nodeInstance).getSlaTimerId());\n-            \tTimerInstanceImpl details = buildTimer(timer);\n-            \tdetails.setTimerName(\"[SLA]\" + resolveVariable(nodeInstance.getNodeName(), nodeInstance));\n-            \ttimers.add(details);\n-            }\n-\n             if (nodeInstance instanceof TimerNodeInstance) {\n                 TimerNodeInstance tni = (TimerNodeInstance) nodeInstance;\n             \torg.jbpm.process.instance.timer.TimerInstance timer = tm.getTimerMap().get(tni.getTimerId());\n"}}, {"oid": "97fde7669486bc2a363c66f293e54051219974d5", "url": "https://github.com/kiegroup/jbpm/commit/97fde7669486bc2a363c66f293e54051219974d5", "message": "- Update SLA timer", "committedDate": "2020-06-09T23:40:22Z", "type": "commit"}, {"oid": "8e8653f657f055d4705ae52614a62c48539be784", "url": "https://github.com/kiegroup/jbpm/commit/8e8653f657f055d4705ae52614a62c48539be784", "message": "- Take SLA timers into account when listing timers", "committedDate": "2020-06-09T23:40:23Z", "type": "commit"}, {"oid": "54404142aafc36f6a48fa46723b817141dedd8b8", "url": "https://github.com/kiegroup/jbpm/commit/54404142aafc36f6a48fa46723b817141dedd8b8", "message": "- further improvements to test and code", "committedDate": "2020-06-09T23:40:23Z", "type": "commit"}, {"oid": "54404142aafc36f6a48fa46723b817141dedd8b8", "url": "https://github.com/kiegroup/jbpm/commit/54404142aafc36f6a48fa46723b817141dedd8b8", "message": "- further improvements to test and code", "committedDate": "2020-06-09T23:40:23Z", "type": "forcePushed"}, {"oid": "9442540c9d9f19f4cbcba0a56c47f956fb9e2039", "url": "https://github.com/kiegroup/jbpm/commit/9442540c9d9f19f4cbcba0a56c47f956fb9e2039", "message": "- fixing indentation", "committedDate": "2020-06-10T01:38:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk4MDc0OA==", "url": "https://github.com/kiegroup/jbpm/pull/1677#discussion_r437980748", "bodyText": "This is not used", "author": "gmunozfe", "createdAt": "2020-06-10T09:15:52Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/admin/ProcessInstanceAdminServiceImplTest.java", "diffHunk": "@@ -389,7 +390,31 @@ public void testUpdateTimer() throws Exception {\n         processInstanceId = null;\n     }\n     \n-    \n+    @Test(timeout=10000)\n+    public void testListSLATimer() throws Exception {\n+        processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"UserTaskWithSLAOnTask\");\n+        assertNotNull(processInstanceId);\n+        long scheduleTime = System.currentTimeMillis();", "originalCommit": "9442540c9d9f19f4cbcba0a56c47f956fb9e2039", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cf3dafbd93fbd50725d4f1653f67a36afbe0bdfb", "chunk": "diff --git a/jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/admin/ProcessInstanceAdminServiceImplTest.java b/jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/admin/ProcessInstanceAdminServiceImplTest.java\nindex 44e3ef7a8..d90f6ffe6 100644\n--- a/jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/admin/ProcessInstanceAdminServiceImplTest.java\n+++ b/jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/admin/ProcessInstanceAdminServiceImplTest.java\n\n@@ -394,7 +394,6 @@ public class ProcessInstanceAdminServiceImplTest extends AbstractKieServicesBase\n     public void testListSLATimer() throws Exception {\n         processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"UserTaskWithSLAOnTask\");\n         assertNotNull(processInstanceId);\n-        long scheduleTime = System.currentTimeMillis();\n         \n         Collection<NodeInstanceDesc> activeNodes = processAdminService.getActiveNodeInstances(processInstanceId);\n         assertNotNull(activeNodes);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk4MTA3NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1677#discussion_r437981075", "bodyText": "It seems there's still a tab here", "author": "gmunozfe", "createdAt": "2020-06-10T09:16:29Z", "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java", "diffHunk": "@@ -244,6 +248,70 @@ public void testSLAonUserTaskMet() throws Exception {\n         ksession.dispose();\n     }\n     \n+    @Test\n+    public void testSLAonUserTaskUpdated() throws Exception {\n+        CountDownLatch latch = new CountDownLatch(1);\n+        TimerIdListener listener = new TimerIdListener(latch);\n+        KieBase kbase = createKnowledgeBase(\"BPMN2-UserTaskWithSLAOnTask.bpmn2\");\n+        KieSession ksession = createKnowledgeSession(kbase);\n+        TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);        \n+        ksession.addEventListener(listener);\n+        \n+        ProcessInstance processInstance = ksession.startProcess(\"UserTask\");\n+        assertEquals(ProcessInstance.STATE_ACTIVE, processInstance.getState());\n+        \n+        WorkItem workItem = workItemHandler.getWorkItem();\n+        assertNotNull(workItem);\n+        assertEquals(\"john\", workItem.getParameter(\"ActorId\"));\n+                \n+        processInstance = ksession.getProcessInstance(processInstance.getId());\n+        assertEquals(ProcessInstance.STATE_ACTIVE, processInstance.getState());\n+        \n+        Collection<NodeInstance> active = ((WorkflowProcessInstance)processInstance).getNodeInstances();\n+        assertEquals(1, active.size());\n+        \n+        long timerId = listener.getTimerId();\n+        assertNotEquals(-1, timerId);\n+        \n+        System.out.println();\n+        ksession.execute(new UpdateTimerCommand(processInstance.getId(), (long) timerId, 7));\n+        \n+        boolean slaViolated = latch.await(5, TimeUnit.SECONDS);\n+        assertFalse(\"SLA should not be violated by timer\", slaViolated);\n+        \n+        slaViolated = latch.await(5, TimeUnit.SECONDS);\n+        assertTrue(\"SLA should be violated by timer\", slaViolated);\n+        \n+        ksession.dispose();\n+    }\n+    \n+    class TimerIdListener extends DefaultProcessEventListener {\n+\n+        private long timerId = -1;\n+        private CountDownLatch latch;\n+        \n+        public TimerIdListener(CountDownLatch latch) {\n+        \tthis.latch = latch;", "originalCommit": "9442540c9d9f19f4cbcba0a56c47f956fb9e2039", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cf3dafbd93fbd50725d4f1653f67a36afbe0bdfb", "chunk": "diff --git a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java\nindex cc1c89fb2..838a86983 100644\n--- a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java\n+++ b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java\n\n@@ -292,7 +292,7 @@ public class SLAComplianceTest extends JbpmBpmn2TestCase {\n         private CountDownLatch latch;\n         \n         public TimerIdListener(CountDownLatch latch) {\n-        \tthis.latch = latch;\n+            this.latch = latch;\n         }\n         \t\n         @Override\n"}}, {"oid": "cf3dafbd93fbd50725d4f1653f67a36afbe0bdfb", "url": "https://github.com/kiegroup/jbpm/commit/cf3dafbd93fbd50725d4f1653f67a36afbe0bdfb", "message": "- minor fixes", "committedDate": "2020-06-10T09:49:48Z", "type": "commit"}]}