{"pr_number": 1809, "pr_title": "JBPM-9484 Improve BPMN -> FEEL integration", "pr_createdAt": "2020-11-24T09:07:11Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1809", "timeline": [{"oid": "e3f82137367a517d1067ddea25731b83b203fc70", "url": "https://github.com/kiegroup/jbpm/commit/e3f82137367a517d1067ddea25731b83b203fc70", "message": "JBPM-9484 Improve BPMN -> FEEL integration", "committedDate": "2020-11-24T09:05:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQwNjE2MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1809#discussion_r529406161", "bodyText": "If we want to process all events generated by the listener and do not fail with the first error, I guess we will need something like\nStringBuilder errorMessage = new StringBuilder();\nfor (FeelEvent : listerner.getEvents()) {\n    processEvent(event,errorMessage);\n}\nif (errorMessage.length()>0) { throw new FeelReturnValueEvaluatorException(errorMessage);}\n\nand  processEvent method\n\nprivate static void processEvent(FEELEvent event, StringBuilder messageBuilder) {\n\n....\n case ERROR:\n              messageBuilder.append(event.getSeverity().toString()).append(\" \").append(event.getMessage());\n                if (event.getOffendingSymbol() != null) {\n                    messageBuilder.append(\" ( offending symbol: '\").append(event.getOffendingSymbol()).append(\"' )\");\n                }\n                if (event.getSourceException() != null) {\n                    messageBuilder.append(\"  \").append(event.getSourceException().getMessage());\n                }\n                 break;\n.....\n}", "author": "fjtirado", "createdAt": "2020-11-24T10:17:51Z", "path": "jbpm-flow/src/main/java/org/jbpm/process/instance/impl/FeelReturnValueEvaluator.java", "diffHunk": "@@ -74,16 +78,17 @@ public Object evaluate(ProcessContext context) throws Exception {\n             VariableScopeInstance variableScope = (VariableScopeInstance) ((WorkflowProcessInstance)context.getProcessInstance())\n                     .getContextInstance(VariableScope.VARIABLE_SCOPE);\n     \n-            if (variables != null ) {\n-                variables.putAll(variableScope.getVariables());\n-            }\n+            variables.putAll(variableScope.getVariables());\n         }\n         DMNRuntime runtime = ((KieSession) context.getKieRuntime()).getKieRuntime(DMNRuntime.class);\n         List<FEELProfile> profiles = (List)((DMNRuntimeImpl) runtime).getProfiles();\n         FEEL feel = FEEL.newInstance(runtime.getRootClassLoader(), profiles);\n+        FeelReturnValueEvaluatorListener listener = new FeelReturnValueEvaluatorListener();\n+        feel.addListener(listener);\n         \n         Object value = feel.evaluate(expr, variables);\n \n+        listener.getEvents().forEach(FeelReturnValueEvaluator::processEvents);", "originalCommit": "e3f82137367a517d1067ddea25731b83b203fc70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQxOTkwMg==", "url": "https://github.com/kiegroup/jbpm/pull/1809#discussion_r529419902", "bodyText": "If we want to fail with the first error, then I will change the listener to generate the exception and add a getException to it, so there is  not need to have a list inside the listener and the code looks like\n Object value = feel.evaluate(expr, variables);\nif (listener.getException() != null) \n   throw listener.getException();\n\nAnd listener code\n\npublic class FeelReturnValueEvaluatorListener implements FEELEventListener {\n\n    private FeelReturnValueEvaluatorException  excepion;\n\n    @Override\n    public void onEvent(FEELEvent event) {\n         switch (event.getSeverity()) {\n            case ERROR:\n                LOG.error(\"{}\", event);\n                StringBuilder messageBuilder = new StringBuilder(event.getSeverity().toString()).append(\" \").append(event.getMessage());\n                if (event.getOffendingSymbol() != null) {\n                    messageBuilder.append(\" ( offending symbol: '\").append(event.getOffendingSymbol()).append(\"' )\");\n                }\n                if (event.getSourceException() != null) {\n                    messageBuilder.append(\"  \").append(event.getSourceException().getMessage());\n                  exception = new FeelReturnValueEvaluatorException(messageBuilder.toString(), event.getSourceException()); \n                }\n               else {\n                 exception =  new FeelReturnValueEvaluatorException(messageBuilder.toString());\n                }\n                break;\n            case TRACE:\n                LOG.debug(\"{}\", event);\n                break;\n            case WARN:\n                LOG.warn(\"{}\", event);\n                break;\n            case INFO:\n            default:\n                LOG.info(\"{}\", event);\n               break;\n    }\n\n    public  FeelReturnValueEvaluatorException getException() {\n        return exception;\n    }\n}", "author": "fjtirado", "createdAt": "2020-11-24T10:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQwNjE2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "45145a4a5352c904bf7c02baab1cf1a94a9ac6f8", "chunk": "diff --git a/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/FeelReturnValueEvaluator.java b/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/FeelReturnValueEvaluator.java\nindex 59d7564a0..7a39cffea 100644\n--- a/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/FeelReturnValueEvaluator.java\n+++ b/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/FeelReturnValueEvaluator.java\n\n@@ -88,7 +89,7 @@ public class FeelReturnValueEvaluator implements ReturnValueEvaluator, Externali\n         \n         Object value = feel.evaluate(expr, variables);\n \n-        listener.getEvents().forEach(FeelReturnValueEvaluator::processEvents);\n+        processErrorEvents(listener.getErrorEvents());\n         if ( !(value instanceof Boolean) ) {\n             throw new RuntimeException( \"Constraints must return boolean values: \" + \n         \t\texpr + \" returns \" + value + \n"}}, {"oid": "45145a4a5352c904bf7c02baab1cf1a94a9ac6f8", "url": "https://github.com/kiegroup/jbpm/commit/45145a4a5352c904bf7c02baab1cf1a94a9ac6f8", "message": "implement codereview feedback", "committedDate": "2020-11-24T10:53:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4OTA2OA==", "url": "https://github.com/kiegroup/jbpm/pull/1809#discussion_r529489068", "bodyText": "Considering that it collects only ERROR events, what about rename it as\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class FeelReturnValueEvaluatorListener implements FEELEventListener {\n          \n          \n            \n            public class FeelErrorEvaluatorListener implements FEELEventListener {", "author": "danielezonca", "createdAt": "2020-11-24T11:54:37Z", "path": "jbpm-flow/src/main/java/org/jbpm/process/instance/impl/FeelReturnValueEvaluatorListener.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.process.instance.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.kie.dmn.api.feel.runtime.events.FEELEvent;\n+import org.kie.dmn.api.feel.runtime.events.FEELEventListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class FeelReturnValueEvaluatorListener implements FEELEventListener {", "originalCommit": "45145a4a5352c904bf7c02baab1cf1a94a9ac6f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72ddea7ebbe6916eddf0f3e63cff8af02fb142e8", "chunk": "diff --git a/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/FeelReturnValueEvaluatorListener.java b/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/FeelErrorEvaluatorListener.java\nsimilarity index 93%\nrename from jbpm-flow/src/main/java/org/jbpm/process/instance/impl/FeelReturnValueEvaluatorListener.java\nrename to jbpm-flow/src/main/java/org/jbpm/process/instance/impl/FeelErrorEvaluatorListener.java\nindex ebe11ce7e..9ed9fe2e2 100644\n--- a/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/FeelReturnValueEvaluatorListener.java\n+++ b/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/FeelErrorEvaluatorListener.java\n\n@@ -24,9 +24,9 @@ import org.kie.dmn.api.feel.runtime.events.FEELEventListener;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class FeelReturnValueEvaluatorListener implements FEELEventListener {\n+public class FeelErrorEvaluatorListener implements FEELEventListener {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(FeelReturnValueEvaluatorListener.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(FeelErrorEvaluatorListener.class);\n \n     private final List<FEELEvent> errorEvents = new ArrayList<>();\n \n"}}, {"oid": "91476c52484f4cbe796202091c6be6c14204b417", "url": "https://github.com/kiegroup/jbpm/commit/91476c52484f4cbe796202091c6be6c14204b417", "message": "improve sonarcloud score", "committedDate": "2020-11-24T13:03:09Z", "type": "commit"}, {"oid": "72ddea7ebbe6916eddf0f3e63cff8af02fb142e8", "url": "https://github.com/kiegroup/jbpm/commit/72ddea7ebbe6916eddf0f3e63cff8af02fb142e8", "message": "Rename listener name", "committedDate": "2020-11-24T13:04:59Z", "type": "commit"}]}