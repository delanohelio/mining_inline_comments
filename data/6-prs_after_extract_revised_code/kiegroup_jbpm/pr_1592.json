{"pr_number": 1592, "pr_title": "RHPAM-2555 - Require the ability to define a set of mandatory case / \u2026", "pr_createdAt": "2020-02-06T13:30:38Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1592", "timeline": [{"oid": "15bb0f4c9f33126aa4aeaab15667c9353cf1b3f4", "url": "https://github.com/kiegroup/jbpm/commit/15bb0f4c9f33126aa4aeaab15667c9353cf1b3f4", "message": "RHPAM-2555 - Require the ability to define a set of mandatory case / process creation variables", "committedDate": "2020-02-06T16:15:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg5NzIxMA==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r375897210", "bodyText": "This block is common to all tests in this class and could be extracted to a private method, parameterizing the name of the process", "author": "gmunozfe", "createdAt": "2020-02-06T15:20:33Z", "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+ package org.jbpm.bpmn2;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.jbpm.bpmn2.objects.TestWorkItemHandler;\n+import org.jbpm.process.core.context.variable.VariableViolationException;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.kie.api.KieBase;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.process.WorkItem;\n+\n+@RunWith(Parameterized.class)\n+ public class VariableTagsTest extends JbpmBpmn2TestCase {\n+\n+     @Parameters\n+     public static Collection<Object[]> persistence() {\n+         Object[][] data = new Object[][] { { false }, { true } };\n+         return Arrays.asList(data);\n+     };\n+\n+     private KieSession ksession;\n+     private KieSession ksession2;\n+\n+     public VariableTagsTest(boolean persistence) throws Exception {\n+         super(persistence);\n+     }\n+\n+     @BeforeClass\n+     public static void setup() throws Exception {\n+         setUpDataSource();\n+     }\n+\n+     @After\n+     public void dispose() {\n+         if (ksession != null) {\n+             abortProcessInstances(ksession);\n+             ksession.dispose();\n+             ksession = null;\n+         }\n+         if (ksession2 != null) {\n+             ksession2.dispose();\n+             ksession2 = null;\n+         }\n+     }\n+\n+     @Test\n+     public void testProcessWithMissingRequiredVariable() throws Exception {\n+         KieBase kbase = createKnowledgeBase(\"variable-tags/approval-with-required-variable-tags.bpmn2\");\n+         KieSession ksession = createKnowledgeSession(kbase);\n+         TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+         ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);", "originalCommit": "ff22b1617cd23b57cc797a5ca434d95e2845343f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf65a96ec233189076503b8efffb027032b025ef", "chunk": "diff --git a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\nindex e99e1a0b2..17d04bc82 100644\n--- a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\n+++ b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\n\n@@ -50,7 +50,7 @@ import org.kie.api.runtime.process.WorkItem;\n      };\n \n      private KieSession ksession;\n-     private KieSession ksession2;\n+     private TestWorkItemHandler workItemHandler;\n \n      public VariableTagsTest(boolean persistence) throws Exception {\n          super(persistence);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkwNzE3MA==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r375907170", "bodyText": "It is not used, you can remove it", "author": "gmunozfe", "createdAt": "2020-02-06T15:36:18Z", "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+ package org.jbpm.bpmn2;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.jbpm.bpmn2.objects.TestWorkItemHandler;\n+import org.jbpm.process.core.context.variable.VariableViolationException;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.kie.api.KieBase;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.process.WorkItem;\n+\n+@RunWith(Parameterized.class)\n+ public class VariableTagsTest extends JbpmBpmn2TestCase {\n+\n+     @Parameters\n+     public static Collection<Object[]> persistence() {\n+         Object[][] data = new Object[][] { { false }, { true } };\n+         return Arrays.asList(data);\n+     };\n+\n+     private KieSession ksession;\n+     private KieSession ksession2;", "originalCommit": "ff22b1617cd23b57cc797a5ca434d95e2845343f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf65a96ec233189076503b8efffb027032b025ef", "chunk": "diff --git a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\nindex e99e1a0b2..17d04bc82 100644\n--- a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\n+++ b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\n\n@@ -50,7 +50,7 @@ import org.kie.api.runtime.process.WorkItem;\n      };\n \n      private KieSession ksession;\n-     private KieSession ksession2;\n+     private TestWorkItemHandler workItemHandler;\n \n      public VariableTagsTest(boolean persistence) throws Exception {\n          super(persistence);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkwNzYzOA==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r375907638", "bodyText": "Same, it can be removed", "author": "gmunozfe", "createdAt": "2020-02-06T15:36:48Z", "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+ package org.jbpm.bpmn2;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.jbpm.bpmn2.objects.TestWorkItemHandler;\n+import org.jbpm.process.core.context.variable.VariableViolationException;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.kie.api.KieBase;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.process.WorkItem;\n+\n+@RunWith(Parameterized.class)\n+ public class VariableTagsTest extends JbpmBpmn2TestCase {\n+\n+     @Parameters\n+     public static Collection<Object[]> persistence() {\n+         Object[][] data = new Object[][] { { false }, { true } };\n+         return Arrays.asList(data);\n+     };\n+\n+     private KieSession ksession;\n+     private KieSession ksession2;\n+\n+     public VariableTagsTest(boolean persistence) throws Exception {\n+         super(persistence);\n+     }\n+\n+     @BeforeClass\n+     public static void setup() throws Exception {\n+         setUpDataSource();\n+     }\n+\n+     @After\n+     public void dispose() {\n+         if (ksession != null) {\n+             abortProcessInstances(ksession);\n+             ksession.dispose();\n+             ksession = null;\n+         }\n+         if (ksession2 != null) {\n+             ksession2.dispose();\n+             ksession2 = null;\n+         }", "originalCommit": "ff22b1617cd23b57cc797a5ca434d95e2845343f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf65a96ec233189076503b8efffb027032b025ef", "chunk": "diff --git a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\nindex e99e1a0b2..17d04bc82 100644\n--- a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\n+++ b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\n\n@@ -50,7 +50,7 @@ import org.kie.api.runtime.process.WorkItem;\n      };\n \n      private KieSession ksession;\n-     private KieSession ksession2;\n+     private TestWorkItemHandler workItemHandler;\n \n      public VariableTagsTest(boolean persistence) throws Exception {\n          super(persistence);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkwOTU5OA==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r375909598", "bodyText": "ksession is already defined as attribute of the class", "author": "gmunozfe", "createdAt": "2020-02-06T15:39:11Z", "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+ package org.jbpm.bpmn2;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.jbpm.bpmn2.objects.TestWorkItemHandler;\n+import org.jbpm.process.core.context.variable.VariableViolationException;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.kie.api.KieBase;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.process.WorkItem;\n+\n+@RunWith(Parameterized.class)\n+ public class VariableTagsTest extends JbpmBpmn2TestCase {\n+\n+     @Parameters\n+     public static Collection<Object[]> persistence() {\n+         Object[][] data = new Object[][] { { false }, { true } };\n+         return Arrays.asList(data);\n+     };\n+\n+     private KieSession ksession;\n+     private KieSession ksession2;\n+\n+     public VariableTagsTest(boolean persistence) throws Exception {\n+         super(persistence);\n+     }\n+\n+     @BeforeClass\n+     public static void setup() throws Exception {\n+         setUpDataSource();\n+     }\n+\n+     @After\n+     public void dispose() {\n+         if (ksession != null) {\n+             abortProcessInstances(ksession);\n+             ksession.dispose();\n+             ksession = null;\n+         }\n+         if (ksession2 != null) {\n+             ksession2.dispose();\n+             ksession2 = null;\n+         }\n+     }\n+\n+     @Test\n+     public void testProcessWithMissingRequiredVariable() throws Exception {\n+         KieBase kbase = createKnowledgeBase(\"variable-tags/approval-with-required-variable-tags.bpmn2\");\n+         KieSession ksession = createKnowledgeSession(kbase);", "originalCommit": "ff22b1617cd23b57cc797a5ca434d95e2845343f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf65a96ec233189076503b8efffb027032b025ef", "chunk": "diff --git a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\nindex e99e1a0b2..17d04bc82 100644\n--- a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\n+++ b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\n\n@@ -50,7 +50,7 @@ import org.kie.api.runtime.process.WorkItem;\n      };\n \n      private KieSession ksession;\n-     private KieSession ksession2;\n+     private TestWorkItemHandler workItemHandler;\n \n      public VariableTagsTest(boolean persistence) throws Exception {\n          super(persistence);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkxNzk4NA==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r375917984", "bodyText": "This is also done in the After method, it can be removed from here", "author": "gmunozfe", "createdAt": "2020-02-06T15:51:59Z", "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+ package org.jbpm.bpmn2;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.jbpm.bpmn2.objects.TestWorkItemHandler;\n+import org.jbpm.process.core.context.variable.VariableViolationException;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.kie.api.KieBase;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.process.WorkItem;\n+\n+@RunWith(Parameterized.class)\n+ public class VariableTagsTest extends JbpmBpmn2TestCase {\n+\n+     @Parameters\n+     public static Collection<Object[]> persistence() {\n+         Object[][] data = new Object[][] { { false }, { true } };\n+         return Arrays.asList(data);\n+     };\n+\n+     private KieSession ksession;\n+     private KieSession ksession2;\n+\n+     public VariableTagsTest(boolean persistence) throws Exception {\n+         super(persistence);\n+     }\n+\n+     @BeforeClass\n+     public static void setup() throws Exception {\n+         setUpDataSource();\n+     }\n+\n+     @After\n+     public void dispose() {\n+         if (ksession != null) {\n+             abortProcessInstances(ksession);\n+             ksession.dispose();\n+             ksession = null;\n+         }\n+         if (ksession2 != null) {\n+             ksession2.dispose();\n+             ksession2 = null;\n+         }\n+     }\n+\n+     @Test\n+     public void testProcessWithMissingRequiredVariable() throws Exception {\n+         KieBase kbase = createKnowledgeBase(\"variable-tags/approval-with-required-variable-tags.bpmn2\");\n+         KieSession ksession = createKnowledgeSession(kbase);\n+         TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+         ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);\n+\n+         assertThatExceptionOfType(VariableViolationException.class).isThrownBy(() -> ksession.startProcess(\"approvals\"));\n+\n+         ksession.dispose();", "originalCommit": "ff22b1617cd23b57cc797a5ca434d95e2845343f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf65a96ec233189076503b8efffb027032b025ef", "chunk": "diff --git a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\nindex e99e1a0b2..17d04bc82 100644\n--- a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\n+++ b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\n\n@@ -50,7 +50,7 @@ import org.kie.api.runtime.process.WorkItem;\n      };\n \n      private KieSession ksession;\n-     private KieSession ksession2;\n+     private TestWorkItemHandler workItemHandler;\n \n      public VariableTagsTest(boolean persistence) throws Exception {\n          super(persistence);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk2ODUwOQ==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r375968509", "bodyText": "Not needed", "author": "gmunozfe", "createdAt": "2020-02-06T17:13:35Z", "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+ package org.jbpm.bpmn2;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.jbpm.bpmn2.objects.TestWorkItemHandler;\n+import org.jbpm.process.core.context.variable.VariableViolationException;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.kie.api.KieBase;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.process.WorkItem;\n+\n+@RunWith(Parameterized.class)\n+ public class VariableTagsTest extends JbpmBpmn2TestCase {\n+\n+     @Parameters\n+     public static Collection<Object[]> persistence() {\n+         Object[][] data = new Object[][] { { false }, { true } };\n+         return Arrays.asList(data);\n+     };\n+\n+     private KieSession ksession;\n+     private KieSession ksession2;\n+\n+     public VariableTagsTest(boolean persistence) throws Exception {\n+         super(persistence);\n+     }\n+\n+     @BeforeClass\n+     public static void setup() throws Exception {\n+         setUpDataSource();\n+     }\n+\n+     @After\n+     public void dispose() {\n+         if (ksession != null) {\n+             abortProcessInstances(ksession);\n+             ksession.dispose();\n+             ksession = null;\n+         }\n+         if (ksession2 != null) {\n+             ksession2.dispose();\n+             ksession2 = null;\n+         }\n+     }\n+\n+     @Test\n+     public void testProcessWithMissingRequiredVariable() throws Exception {\n+         KieBase kbase = createKnowledgeBase(\"variable-tags/approval-with-required-variable-tags.bpmn2\");\n+         KieSession ksession = createKnowledgeSession(kbase);\n+         TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+         ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);\n+\n+         assertThatExceptionOfType(VariableViolationException.class).isThrownBy(() -> ksession.startProcess(\"approvals\"));\n+\n+         ksession.dispose();\n+     }\n+\n+     @Test\n+     public void testProcessWithRequiredVariable() throws Exception {\n+         KieBase kbase = createKnowledgeBase(\"variable-tags/approval-with-required-variable-tags.bpmn2\");\n+         KieSession ksession = createKnowledgeSession(kbase);\n+         TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+         ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);\n+\n+         Map<String, Object> parameters = new HashMap<>();\n+         parameters.put(\"approver\", \"john\");\n+\n+         ProcessInstance processInstance = ksession.startProcess(\"approvals\", parameters);\n+         assertTrue(processInstance.getState() == ProcessInstance.STATE_ACTIVE);\n+         ksession = restoreSession(ksession, true);\n+         ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);\n+         WorkItem workItem = workItemHandler.getWorkItem();\n+         assertNotNull(workItem);\n+         ksession.getWorkItemManager().completeWorkItem(workItem.getId(), null);\n+\n+         workItem = workItemHandler.getWorkItem();\n+         assertNotNull(workItem);        \n+         ksession.getWorkItemManager().completeWorkItem(workItem.getId(), null);\n+\n+         assertProcessInstanceFinished(processInstance, ksession);\n+         ksession.dispose();", "originalCommit": "15bb0f4c9f33126aa4aeaab15667c9353cf1b3f4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf65a96ec233189076503b8efffb027032b025ef", "chunk": "diff --git a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\nindex e99e1a0b2..17d04bc82 100644\n--- a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\n+++ b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\n\n@@ -50,7 +50,7 @@ import org.kie.api.runtime.process.WorkItem;\n      };\n \n      private KieSession ksession;\n-     private KieSession ksession2;\n+     private TestWorkItemHandler workItemHandler;\n \n      public VariableTagsTest(boolean persistence) throws Exception {\n          super(persistence);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk2ODYxMw==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r375968613", "bodyText": "Not needed", "author": "gmunozfe", "createdAt": "2020-02-06T17:13:45Z", "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+ package org.jbpm.bpmn2;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.jbpm.bpmn2.objects.TestWorkItemHandler;\n+import org.jbpm.process.core.context.variable.VariableViolationException;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.kie.api.KieBase;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.process.WorkItem;\n+\n+@RunWith(Parameterized.class)\n+ public class VariableTagsTest extends JbpmBpmn2TestCase {\n+\n+     @Parameters\n+     public static Collection<Object[]> persistence() {\n+         Object[][] data = new Object[][] { { false }, { true } };\n+         return Arrays.asList(data);\n+     };\n+\n+     private KieSession ksession;\n+     private KieSession ksession2;\n+\n+     public VariableTagsTest(boolean persistence) throws Exception {\n+         super(persistence);\n+     }\n+\n+     @BeforeClass\n+     public static void setup() throws Exception {\n+         setUpDataSource();\n+     }\n+\n+     @After\n+     public void dispose() {\n+         if (ksession != null) {\n+             abortProcessInstances(ksession);\n+             ksession.dispose();\n+             ksession = null;\n+         }\n+         if (ksession2 != null) {\n+             ksession2.dispose();\n+             ksession2 = null;\n+         }\n+     }\n+\n+     @Test\n+     public void testProcessWithMissingRequiredVariable() throws Exception {\n+         KieBase kbase = createKnowledgeBase(\"variable-tags/approval-with-required-variable-tags.bpmn2\");\n+         KieSession ksession = createKnowledgeSession(kbase);\n+         TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+         ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);\n+\n+         assertThatExceptionOfType(VariableViolationException.class).isThrownBy(() -> ksession.startProcess(\"approvals\"));\n+\n+         ksession.dispose();\n+     }\n+\n+     @Test\n+     public void testProcessWithRequiredVariable() throws Exception {\n+         KieBase kbase = createKnowledgeBase(\"variable-tags/approval-with-required-variable-tags.bpmn2\");\n+         KieSession ksession = createKnowledgeSession(kbase);\n+         TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+         ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);\n+\n+         Map<String, Object> parameters = new HashMap<>();\n+         parameters.put(\"approver\", \"john\");\n+\n+         ProcessInstance processInstance = ksession.startProcess(\"approvals\", parameters);\n+         assertTrue(processInstance.getState() == ProcessInstance.STATE_ACTIVE);\n+         ksession = restoreSession(ksession, true);\n+         ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);\n+         WorkItem workItem = workItemHandler.getWorkItem();\n+         assertNotNull(workItem);\n+         ksession.getWorkItemManager().completeWorkItem(workItem.getId(), null);\n+\n+         workItem = workItemHandler.getWorkItem();\n+         assertNotNull(workItem);        \n+         ksession.getWorkItemManager().completeWorkItem(workItem.getId(), null);\n+\n+         assertProcessInstanceFinished(processInstance, ksession);\n+         ksession.dispose();\n+     }\n+\n+     @Test\n+     public void testProcessWithReadonlyVariable() throws Exception {\n+         KieBase kbase = createKnowledgeBase(\"variable-tags/approval-with-readonly-variable-tags.bpmn2\");\n+         KieSession ksession = createKnowledgeSession(kbase);\n+         TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+         ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);\n+\n+         Map<String, Object> parameters = new HashMap<>();\n+         parameters.put(\"approver\", \"john\");\n+\n+         ProcessInstance processInstance = ksession.startProcess(\"approvals\", parameters);\n+         assertTrue(processInstance.getState() == ProcessInstance.STATE_ACTIVE);        \n+         WorkItem workItem = workItemHandler.getWorkItem();\n+         assertNotNull(workItem);\n+\n+         assertThatExceptionOfType(VariableViolationException.class).isThrownBy(() -> ksession.getWorkItemManager().completeWorkItem(workItem.getId(), Collections.singletonMap(\"ActorId\", \"john\")));\n+         ksession.abortProcessInstance(processInstance.getId());\n+\n+         assertProcessInstanceFinished(processInstance, ksession);\n+         ksession.dispose();", "originalCommit": "15bb0f4c9f33126aa4aeaab15667c9353cf1b3f4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf65a96ec233189076503b8efffb027032b025ef", "chunk": "diff --git a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\nindex e99e1a0b2..17d04bc82 100644\n--- a/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\n+++ b/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java\n\n@@ -50,7 +50,7 @@ import org.kie.api.runtime.process.WorkItem;\n      };\n \n      private KieSession ksession;\n-     private KieSession ksession2;\n+     private TestWorkItemHandler workItemHandler;\n \n      public VariableTagsTest(boolean persistence) throws Exception {\n          super(persistence);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzNTI4MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376135281", "bodyText": "Here it's overwriting the errorMessage passed by the caller.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    super(\"Variable '\" + variableName + \"' in process instance '\" + (processInstanceId == null ? \"unknown\" : processInstanceId) + \"' violated\");\n          \n          \n            \n                    super(errorMessage);\n          \n      \n    \n    \n  \n\nCurrently, it's displaying for case scenarios:\nVariable 'caseFile_s' in process instance '1' violated\ninstead of the errorMessage tailored for variables starting with CASE_FILE_PREFIX:\nCase file item 'caseFile_s' is required but not set\nIf the process instance id is useful to be shown, then it may come from the caller itself.", "author": "gmunozfe", "createdAt": "2020-02-06T23:14:31Z", "path": "jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableViolationException.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.process.core.context.variable;\n+\n+/**\n+ * Thrown when there is any kind of variable violation such as missing required variable\n+ * or attempt to set already defined readonly variable. \n+ * \n+ */\n+public class VariableViolationException extends RuntimeException {\n+\n+    private static final long serialVersionUID = 8031225233775014572L;\n+\n+    private final Long processInstanceId;\n+    private final String variableName;\n+    private final String errorMessage;\n+\n+    public VariableViolationException(Long processInstanceId, String variableName, String errorMessage) {\n+        super(\"Variable '\" + variableName + \"' in process instance '\" + (processInstanceId == null ? \"unknown\" : processInstanceId) + \"' violated\");", "originalCommit": "89dafa4aab5fb153e07ef030c20e606a7165143d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4NDgzOQ==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376384839", "bodyText": "that's the whole point, the message that comes from parent is generic that indicates about violation, while it has extra errorMessage property that says the specific reason for it.", "author": "mswiderski", "createdAt": "2020-02-07T13:19:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzNTI4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5OTI4NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376399285", "bodyText": "ok, my confusion was because in the stacktrace I only see the parent (generic) message", "author": "gmunozfe", "createdAt": "2020-02-07T13:50:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzNTI4MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MDY0OQ==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376140649", "bodyText": "variable.getName() is already retrieved at name\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (!findCaseData(variable.getName())) {\n          \n          \n            \n                                if (!findCaseData(name)) {", "author": "gmunozfe", "createdAt": "2020-02-06T23:31:02Z", "path": "jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java", "diffHunk": "@@ -162,5 +168,41 @@ public void setContextInstanceContainer(ContextInstanceContainer contextInstance\n     \t\tthis.variableInstanceIdPrefix = ((CompositeContextNodeInstance) contextInstanceContainer).getUniqueId();\n     \t}\n \t}\n+    \n+    public void enforceRequiredVariables() {\n+        VariableScope variableScope = getVariableScope();\n+        for (Variable variable : variableScope.getVariables()) {\n+            String name = variable.getName();\n+            if (variableScope.isRequired(name)) {  \n+                // check case file if it is prefixed\n+                if (name.startsWith(VariableScope.CASE_FILE_PREFIX)) {\n+                    if (!findCaseData(variable.getName())) {", "originalCommit": "89dafa4aab5fb153e07ef030c20e606a7165143d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4NDg5Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376384897", "bodyText": "fixed", "author": "mswiderski", "createdAt": "2020-02-07T13:19:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MDY0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "524e04bb35c95cfbd5c624af2828bd352f9ec03c", "chunk": "diff --git a/jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java b/jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java\nindex 53ed37b3e..9d30d11a9 100644\n--- a/jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java\n+++ b/jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java\n\n@@ -176,13 +176,13 @@ public class VariableScopeInstance extends AbstractContextInstance {\n             if (variableScope.isRequired(name)) {  \n                 // check case file if it is prefixed\n                 if (name.startsWith(VariableScope.CASE_FILE_PREFIX)) {\n-                    if (!findCaseData(variable.getName())) {\n+                    if (!findCaseData(name)) {\n                         throw new VariableViolationException(getProcessInstance().getId(), name, \"Case file item '\" + name + \"' is required but not set\");\n                         \n                     }\n                     // otherwise check variables                    \n                 } else if (!variables.containsKey(name)) {\n-                    throw new VariableViolationException(getProcessInstance().getId(), variable.getName(), \"Variable '\" + variable.getName() + \"' is required but not set\");\n+                    throw new VariableViolationException(getProcessInstance().getId(), name, \"Variable '\" + name + \"' is required but not set\");\n                 }\n                 \n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MTEyNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376141125", "bodyText": "It may be added the processInstanceId into the errorMessage, as this will be pass to the parents.", "author": "gmunozfe", "createdAt": "2020-02-06T23:32:33Z", "path": "jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java", "diffHunk": "@@ -162,5 +168,41 @@ public void setContextInstanceContainer(ContextInstanceContainer contextInstance\n     \t\tthis.variableInstanceIdPrefix = ((CompositeContextNodeInstance) contextInstanceContainer).getUniqueId();\n     \t}\n \t}\n+    \n+    public void enforceRequiredVariables() {\n+        VariableScope variableScope = getVariableScope();\n+        for (Variable variable : variableScope.getVariables()) {\n+            String name = variable.getName();\n+            if (variableScope.isRequired(name)) {  \n+                // check case file if it is prefixed\n+                if (name.startsWith(VariableScope.CASE_FILE_PREFIX)) {\n+                    if (!findCaseData(variable.getName())) {\n+                        throw new VariableViolationException(getProcessInstance().getId(), name, \"Case file item '\" + name + \"' is required but not set\");", "originalCommit": "89dafa4aab5fb153e07ef030c20e606a7165143d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4NTEzNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376385135", "bodyText": "these are all available as dedicated methods and should be used as such instead of bloated message from the generic runtime exception class.", "author": "mswiderski", "createdAt": "2020-02-07T13:20:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MTEyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "524e04bb35c95cfbd5c624af2828bd352f9ec03c", "chunk": "diff --git a/jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java b/jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java\nindex 53ed37b3e..9d30d11a9 100644\n--- a/jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java\n+++ b/jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java\n\n@@ -176,13 +176,13 @@ public class VariableScopeInstance extends AbstractContextInstance {\n             if (variableScope.isRequired(name)) {  \n                 // check case file if it is prefixed\n                 if (name.startsWith(VariableScope.CASE_FILE_PREFIX)) {\n-                    if (!findCaseData(variable.getName())) {\n+                    if (!findCaseData(name)) {\n                         throw new VariableViolationException(getProcessInstance().getId(), name, \"Case file item '\" + name + \"' is required but not set\");\n                         \n                     }\n                     // otherwise check variables                    \n                 } else if (!variables.containsKey(name)) {\n-                    throw new VariableViolationException(getProcessInstance().getId(), variable.getName(), \"Variable '\" + variable.getName() + \"' is required but not set\");\n+                    throw new VariableViolationException(getProcessInstance().getId(), name, \"Variable '\" + name + \"' is required but not set\");\n                 }\n                 \n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MjA0Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376142043", "bodyText": "Same here, variable.getName() is already at name, and also processInstanceId can be added into the errorMessage", "author": "gmunozfe", "createdAt": "2020-02-06T23:34:58Z", "path": "jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java", "diffHunk": "@@ -162,5 +168,41 @@ public void setContextInstanceContainer(ContextInstanceContainer contextInstance\n     \t\tthis.variableInstanceIdPrefix = ((CompositeContextNodeInstance) contextInstanceContainer).getUniqueId();\n     \t}\n \t}\n+    \n+    public void enforceRequiredVariables() {\n+        VariableScope variableScope = getVariableScope();\n+        for (Variable variable : variableScope.getVariables()) {\n+            String name = variable.getName();\n+            if (variableScope.isRequired(name)) {  \n+                // check case file if it is prefixed\n+                if (name.startsWith(VariableScope.CASE_FILE_PREFIX)) {\n+                    if (!findCaseData(variable.getName())) {\n+                        throw new VariableViolationException(getProcessInstance().getId(), name, \"Case file item '\" + name + \"' is required but not set\");\n+                        \n+                    }\n+                    // otherwise check variables                    \n+                } else if (!variables.containsKey(name)) {\n+                    throw new VariableViolationException(getProcessInstance().getId(), variable.getName(), \"Variable '\" + variable.getName() + \"' is required but not set\");", "originalCommit": "89dafa4aab5fb153e07ef030c20e606a7165143d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4NTE4MA==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376385180", "bodyText": "fixed", "author": "mswiderski", "createdAt": "2020-02-07T13:20:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MjA0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "524e04bb35c95cfbd5c624af2828bd352f9ec03c", "chunk": "diff --git a/jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java b/jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java\nindex 53ed37b3e..9d30d11a9 100644\n--- a/jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java\n+++ b/jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java\n\n@@ -176,13 +176,13 @@ public class VariableScopeInstance extends AbstractContextInstance {\n             if (variableScope.isRequired(name)) {  \n                 // check case file if it is prefixed\n                 if (name.startsWith(VariableScope.CASE_FILE_PREFIX)) {\n-                    if (!findCaseData(variable.getName())) {\n+                    if (!findCaseData(name)) {\n                         throw new VariableViolationException(getProcessInstance().getId(), name, \"Case file item '\" + name + \"' is required but not set\");\n                         \n                     }\n                     // otherwise check variables                    \n                 } else if (!variables.containsKey(name)) {\n-                    throw new VariableViolationException(getProcessInstance().getId(), variable.getName(), \"Variable '\" + variable.getName() + \"' is required but not set\");\n+                    throw new VariableViolationException(getProcessInstance().getId(), name, \"Variable '\" + name + \"' is required but not set\");\n                 }\n                 \n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MzkzNg==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376143936", "bodyText": "For reducing indentation, it can return if condition is opposite\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (variableScope.isRequired(name)) {  \n          \n          \n            \n                        if (!variableScope.isRequired(name)) {\n          \n          \n            \n                          return;\n          \n          \n            \n                        }", "author": "gmunozfe", "createdAt": "2020-02-06T23:41:18Z", "path": "jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java", "diffHunk": "@@ -162,5 +168,41 @@ public void setContextInstanceContainer(ContextInstanceContainer contextInstance\n     \t\tthis.variableInstanceIdPrefix = ((CompositeContextNodeInstance) contextInstanceContainer).getUniqueId();\n     \t}\n \t}\n+    \n+    public void enforceRequiredVariables() {\n+        VariableScope variableScope = getVariableScope();\n+        for (Variable variable : variableScope.getVariables()) {\n+            String name = variable.getName();\n+            if (variableScope.isRequired(name)) {  ", "originalCommit": "89dafa4aab5fb153e07ef030c20e606a7165143d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4NTQ1NA==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376385454", "bodyText": "it cannot return as it must check all variables", "author": "mswiderski", "createdAt": "2020-02-07T13:20:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MzkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NjQ1OQ==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376396459", "bodyText": "you're right, I should have said \"continue\"", "author": "gmunozfe", "createdAt": "2020-02-07T13:45:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MzkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5ODUxMQ==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376398511", "bodyText": "if you don't mind I'd prefer to keep just single control flow", "author": "mswiderski", "createdAt": "2020-02-07T13:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MzkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwNjU3OA==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376406578", "bodyText": "ok", "author": "gmunozfe", "createdAt": "2020-02-07T14:06:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MzkzNg=="}], "type": "inlineReview", "revised_code": {"commit": "524e04bb35c95cfbd5c624af2828bd352f9ec03c", "chunk": "diff --git a/jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java b/jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java\nindex 53ed37b3e..9d30d11a9 100644\n--- a/jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java\n+++ b/jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java\n\n@@ -176,13 +176,13 @@ public class VariableScopeInstance extends AbstractContextInstance {\n             if (variableScope.isRequired(name)) {  \n                 // check case file if it is prefixed\n                 if (name.startsWith(VariableScope.CASE_FILE_PREFIX)) {\n-                    if (!findCaseData(variable.getName())) {\n+                    if (!findCaseData(name)) {\n                         throw new VariableViolationException(getProcessInstance().getId(), name, \"Case file item '\" + name + \"' is required but not set\");\n                         \n                     }\n                     // otherwise check variables                    \n                 } else if (!variables.containsKey(name)) {\n-                    throw new VariableViolationException(getProcessInstance().getId(), variable.getName(), \"Variable '\" + variable.getName() + \"' is required but not set\");\n+                    throw new VariableViolationException(getProcessInstance().getId(), name, \"Variable '\" + name + \"' is required but not set\");\n                 }\n                 \n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MjU2Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376162563", "bodyText": "It seems like \"setMetaData\" is never called for \"customTags\" name, so tags is never cached, if this was the purpose of these lines.", "author": "gmunozfe", "createdAt": "2020-02-07T00:48:29Z", "path": "jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java", "diffHunk": "@@ -80,6 +90,9 @@ public void setValue(final Object value) {\n \n     public void setMetaData(String name, Object value) {\n         this.metaData.put(name, value);\n+        if (VARIABLE_TAGS.equals(name) && value != null) {", "originalCommit": "89dafa4aab5fb153e07ef030c20e606a7165143d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI0NTU3MA==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376245570", "bodyText": "look at the bpmn2. you will understand the customTags", "author": "elguardian", "createdAt": "2020-02-07T07:24:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MjU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM2NDQ5OA==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376364498", "bodyText": "My point is that in the PropertyHandler class (correct me if I'm wrong), it's missing some code to read the metaData, and in case of \"customTags\" is present, then invoke setMetaData with that key.", "author": "gmunozfe", "createdAt": "2020-02-07T12:25:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MjU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4NTY5MA==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376385690", "bodyText": "this is set via org.jbpm.bpmn2.xml.MetaDataHandler.MetaDataWrapper", "author": "mswiderski", "createdAt": "2020-02-07T13:21:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MjU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NDM1Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376394356", "bodyText": "But this condition is never matched:\nVARIABLE_TAGS.equals(name)\nIs this to cache tags?", "author": "gmunozfe", "createdAt": "2020-02-07T13:40:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MjU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5ODE0MA==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376398140", "bodyText": "this is an extra way of setting tags that can be done programatically like fluent api so it should be handled too.", "author": "mswiderski", "createdAt": "2020-02-07T13:48:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MjU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwMDk3Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376400976", "bodyText": "ok, thanks for the clarification", "author": "gmunozfe", "createdAt": "2020-02-07T13:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MjU2Mw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "524e04bb35c95cfbd5c624af2828bd352f9ec03c", "url": "https://github.com/kiegroup/jbpm/commit/524e04bb35c95cfbd5c624af2828bd352f9ec03c", "message": "RHPAM-2555 - Require the ability to define a set of mandatory case / process creation variables", "committedDate": "2020-02-07T13:21:43Z", "type": "commit"}, {"oid": "524e04bb35c95cfbd5c624af2828bd352f9ec03c", "url": "https://github.com/kiegroup/jbpm/commit/524e04bb35c95cfbd5c624af2828bd352f9ec03c", "message": "RHPAM-2555 - Require the ability to define a set of mandatory case / process creation variables", "committedDate": "2020-02-07T13:21:43Z", "type": "forcePushed"}, {"oid": "bf65a96ec233189076503b8efffb027032b025ef", "url": "https://github.com/kiegroup/jbpm/commit/bf65a96ec233189076503b8efffb027032b025ef", "message": "Add new tests to VariableTagsTest", "committedDate": "2020-02-07T13:47:18Z", "type": "commit"}]}