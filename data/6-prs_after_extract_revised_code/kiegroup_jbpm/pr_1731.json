{"pr_number": 1731, "pr_title": "[JBPM-9296] Self contained Audit/History module", "pr_createdAt": "2020-08-18T17:38:38Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1731", "timeline": [{"oid": "c84efb5d91a99d1732ef1901d2ddedd491fc9553", "url": "https://github.com/kiegroup/jbpm/commit/c84efb5d91a99d1732ef1901d2ddedd491fc9553", "message": "[JBPM-9296] Self contained Audit/History module", "committedDate": "2020-08-19T06:44:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcxMTE2NA==", "url": "https://github.com/kiegroup/jbpm/pull/1731#discussion_r473711164", "bodyText": "This might be simplified as follows:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Iterator<QueryParam> iterator = attributes.iterator();\n          \n          \n            \n                    while(iterator.hasNext()) {\n          \n          \n            \n                        QueryParam param = iterator.next();\n          \n          \n            \n                        if(param.getOperator().equals(\"MODE\")) {\n          \n          \n            \n                            iterator.remove();\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    attributes.removeIf(param -> param.getOperator().equals(\"MODE\"));", "author": "afalhambra", "createdAt": "2020-08-20T07:44:06Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -120,6 +149,13 @@ public void setEmf(EntityManagerFactory emf) {\n                                                            BiFunction<List<Number>, String, List<R>> dataCollector) {\n \n         List<QueryParam> attributes = attributesArg != null ? attributesArg : emptyList();\n+        Iterator<QueryParam> iterator = attributes.iterator();\n+        while(iterator.hasNext()) {\n+            QueryParam param = iterator.next();\n+            if(param.getOperator().equals(\"MODE\")) {\n+                iterator.remove();\n+            }\n+        }", "originalCommit": "c84efb5d91a99d1732ef1901d2ddedd491fc9553", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ2NjMxMA==", "url": "https://github.com/kiegroup/jbpm/pull/1731#discussion_r475466310", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-24T09:31:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcxMTE2NA=="}], "type": "inlineReview", "revised_code": {"commit": "80d4c9a219f76910ca406233e7902d8b151d6fb3", "chunk": "diff --git a/jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java b/jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java\nindex b2b7876a7..aa1d07f88 100644\n--- a/jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java\n+++ b/jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java\n\n@@ -149,13 +149,8 @@ public abstract class AbstractAdvanceRuntimeDataServiceImpl {\n                                                            BiFunction<List<Number>, String, List<R>> dataCollector) {\n \n         List<QueryParam> attributes = attributesArg != null ? attributesArg : emptyList();\n-        Iterator<QueryParam> iterator = attributes.iterator();\n-        while(iterator.hasNext()) {\n-            QueryParam param = iterator.next();\n-            if(param.getOperator().equals(\"MODE\")) {\n-                iterator.remove();\n-            }\n-        }\n+        attributes.removeIf(param -> param.getOperator().equals(\"MODE\"));\n+\n         List<QueryParam> processVariables = processVariablesArg != null ? processVariablesArg : emptyList();\n         List<QueryParam> taskVariables = taskVariablesArg != null ? taskVariablesArg : emptyList();\n         List<String> owners = ownersArg != null ? ownersArg : emptyList();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc1NjQwNg==", "url": "https://github.com/kiegroup/jbpm/pull/1731#discussion_r473756406", "bodyText": "Maybe, we could also use singletonList here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new QueryParam(null, \"MODE\", Arrays.asList(\"HISTORY\"));\n          \n          \n            \n                    return new QueryParam(null, \"MODE\", Collections.singletonList(\"HISTORY\"));", "author": "afalhambra", "createdAt": "2020-08-20T08:25:36Z", "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/query/model/QueryParam.java", "diffHunk": "@@ -268,6 +268,10 @@ public static QueryParam max(String column) {\n     public static QueryParam type(String column, Comparable<?> type) {\n         return new QueryParam(column, \"TYPE\", Arrays.asList(type));\n     }\n+\n+    public static QueryParam history() {\n+        return new QueryParam(null, \"MODE\", Arrays.asList(\"HISTORY\"));", "originalCommit": "c84efb5d91a99d1732ef1901d2ddedd491fc9553", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ2NjcwNA==", "url": "https://github.com/kiegroup/jbpm/pull/1731#discussion_r475466704", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-24T09:31:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc1NjQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "80d4c9a219f76910ca406233e7902d8b151d6fb3", "chunk": "diff --git a/jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/query/model/QueryParam.java b/jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/query/model/QueryParam.java\nindex 87af3ea07..0e6d9588d 100644\n--- a/jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/query/model/QueryParam.java\n+++ b/jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/query/model/QueryParam.java\n\n@@ -270,7 +272,7 @@ public class QueryParam implements Serializable {\n     }\n \n     public static QueryParam history() {\n-        return new QueryParam(null, \"MODE\", Arrays.asList(\"HISTORY\"));\n+        return new QueryParam(\"TABLE\", \"MODE\", singletonList(\"HISTORY\"));\n     }\n     /**\n      * Returns the column.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3MDgxNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1731#discussion_r473770815", "bodyText": "I would add some validations/checks on the data returned by the API to make sure the data match with the search criteria specified above.", "author": "afalhambra", "createdAt": "2020-08-20T08:41:33Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/AdvanceRuntimeDataServiceImplTest.java", "diffHunk": "@@ -459,5 +460,56 @@ public void testQueryTaskByVariablesWithInputOutput() {\n             assertThat(userTask.getProcessVariables().get(\"var_b\"), is(\"3\"));\n         }\n     }\n+    \n+    @Test\n+    public void testQueryHistoryAllNull() {\n+        List<QueryParam> attributes = list(history());\n+        List<UserTaskInstanceWithPotOwnerDesc> data = advanceVariableDataService.queryUserTasksByVariables(attributes, null, null, null, queryContext);\n+        if (queryContext.getCount() > 0) {\n+            assertThat(data.size(), is(queryContext.getCount()));\n+        } else {\n+            assertThat(data.size(), is(20));\n+        }\n+    }\n+    \n+    @Test\n+    public void testQueryHistoryIsNotNullOperator() {\n+\n+        List<QueryParam> attributes = list(history(), isNull(TASK_ATTR_OWNER));\n+\n+        List<UserTaskInstanceWithPotOwnerDesc> data = advanceVariableDataService.queryUserTasksByVariables(attributes, emptyList(), emptyList(), emptyList(), queryContext);\n+        assertThat(data.size(), is(0));\n+\n+    }\n+\n+    @Test\n+    public void testQueryHistoryProcessByAttributes() {\n+        List<QueryParam> attributes = list(history(), equalsTo(PROCESS_ATTR_DEFINITION_ID, \"test.test_A\"), equalsTo(PROCESS_ATTR_CORRELATION_KEY, \"1\"));\n+\n+        List<ProcessInstanceWithVarsDesc> data = advanceVariableDataService.queryProcessByVariables(attributes, emptyList(), queryContext);\n+        assertThat(data.size(), is(1));\n+    }", "originalCommit": "c84efb5d91a99d1732ef1901d2ddedd491fc9553", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ2OTEzNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1731#discussion_r475469135", "bodyText": "I don't see the point at this point as the funcionality is already working. Just chaning the way to get the ids. This test are to check whether this that table fails or not, but audit table and runtime table has the same data.", "author": "elguardian", "createdAt": "2020-08-24T09:33:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3MDgxNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3NjY5NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1731#discussion_r473776695", "bodyText": "I would add some filters to the search criteria and check the data returned by the API call afterwards.", "author": "afalhambra", "createdAt": "2020-08-20T08:47:40Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/AdvanceRuntimeDataServiceImplTest.java", "diffHunk": "@@ -459,5 +460,56 @@ public void testQueryTaskByVariablesWithInputOutput() {\n             assertThat(userTask.getProcessVariables().get(\"var_b\"), is(\"3\"));\n         }\n     }\n+    \n+    @Test\n+    public void testQueryHistoryAllNull() {\n+        List<QueryParam> attributes = list(history());\n+        List<UserTaskInstanceWithPotOwnerDesc> data = advanceVariableDataService.queryUserTasksByVariables(attributes, null, null, null, queryContext);\n+        if (queryContext.getCount() > 0) {\n+            assertThat(data.size(), is(queryContext.getCount()));\n+        } else {\n+            assertThat(data.size(), is(20));\n+        }\n+    }\n+    \n+    @Test\n+    public void testQueryHistoryIsNotNullOperator() {\n+\n+        List<QueryParam> attributes = list(history(), isNull(TASK_ATTR_OWNER));\n+\n+        List<UserTaskInstanceWithPotOwnerDesc> data = advanceVariableDataService.queryUserTasksByVariables(attributes, emptyList(), emptyList(), emptyList(), queryContext);\n+        assertThat(data.size(), is(0));\n+\n+    }\n+\n+    @Test\n+    public void testQueryHistoryProcessByAttributes() {\n+        List<QueryParam> attributes = list(history(), equalsTo(PROCESS_ATTR_DEFINITION_ID, \"test.test_A\"), equalsTo(PROCESS_ATTR_CORRELATION_KEY, \"1\"));\n+\n+        List<ProcessInstanceWithVarsDesc> data = advanceVariableDataService.queryProcessByVariables(attributes, emptyList(), queryContext);\n+        assertThat(data.size(), is(1));\n+    }\n+\n+    @Test\n+    public void testQueryHistoryProcessByVariablesAndTask() {\n+        List<QueryParam> attributes = list(history());\n+\n+        List<ProcessInstanceWithVarsDesc> data = advanceVariableDataService.queryProcessByVariablesAndTask(attributes, emptyList(), emptyList(), emptyList(), queryContext);\n+        if (queryContext.getCount() > 0) {\n+            assertThat(data.size(), is(queryContext.getCount()));\n+        } else {\n+            assertThat(data.size(), is(20));\n+        }\n+    }\n+\n+    @Test\n+    public void testQueryProcessByVariablesAndTask() {\n+        List<ProcessInstanceWithVarsDesc> data = advanceVariableDataService.queryProcessByVariablesAndTask(emptyList(), emptyList(), emptyList(), emptyList(), queryContext);\n+        if (queryContext.getCount() > 0) {\n+            assertThat(data.size(), is(queryContext.getCount()));\n+        } else {\n+            assertThat(data.size(), is(20));\n+        }\n+    }", "originalCommit": "c84efb5d91a99d1732ef1901d2ddedd491fc9553", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ2OTIyMQ==", "url": "https://github.com/kiegroup/jbpm/pull/1731#discussion_r475469221", "bodyText": "I don't see the point at this point as the funcionality is already working. Just chaning the way to get the ids. This test are to check whether this that table fails or not, but audit table and runtime table has the same data.", "author": "elguardian", "createdAt": "2020-08-24T09:34:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3NjY5NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "80d4c9a219f76910ca406233e7902d8b151d6fb3", "url": "https://github.com/kiegroup/jbpm/commit/80d4c9a219f76910ca406233e7902d8b151d6fb3", "message": "[JBPM-9296] Self contained Audit/History module", "committedDate": "2020-08-24T09:34:21Z", "type": "commit"}, {"oid": "80d4c9a219f76910ca406233e7902d8b151d6fb3", "url": "https://github.com/kiegroup/jbpm/commit/80d4c9a219f76910ca406233e7902d8b151d6fb3", "message": "[JBPM-9296] Self contained Audit/History module", "committedDate": "2020-08-24T09:34:21Z", "type": "forcePushed"}]}