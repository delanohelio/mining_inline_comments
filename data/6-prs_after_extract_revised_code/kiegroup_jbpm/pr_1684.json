{"pr_number": 1684, "pr_title": "[JBPM-9197] Allow the introduction of emails in Tasks notifications", "pr_createdAt": "2020-06-18T12:43:15Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1684", "timeline": [{"oid": "6b5cc652854c041ed24d86c20f21d8905d678394", "url": "https://github.com/kiegroup/jbpm/commit/6b5cc652854c041ed24d86c20f21d8905d678394", "message": "[JBPM-9197] Allow the introduction of emails in Tasks notifications", "committedDate": "2020-06-23T06:34:12Z", "type": "forcePushed"}, {"oid": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73", "url": "https://github.com/kiegroup/jbpm/commit/5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73", "message": "[JBPM-9197] Allow the introduction of emails in Tasks notifications", "committedDate": "2020-06-25T09:32:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEyNTQ1MA==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r446125450", "bodyText": "Shouldn't be protected instead?", "author": "afalhambra", "createdAt": "2020-06-26T11:23:54Z", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/commands/UserGroupCallbackTaskCommand.java", "diffHunk": "@@ -98,6 +100,14 @@ protected boolean doCallbackUserOperation(String userId, TaskContext context) {\n \n     }\n     \n+    private boolean doCallbackEmailOperation(String emailId, TaskContext context) {", "originalCommit": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0OTkyNA==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r447449924", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-06-30T06:51:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEyNTQ1MA=="}], "type": "inlineReview", "revised_code": {"commit": "6bab2491564197fdf56d339a5513ed011bbc5b1a", "chunk": "diff --git a/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/commands/UserGroupCallbackTaskCommand.java b/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/commands/UserGroupCallbackTaskCommand.java\nindex 92788163f..c81d323fe 100644\n--- a/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/commands/UserGroupCallbackTaskCommand.java\n+++ b/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/commands/UserGroupCallbackTaskCommand.java\n\n@@ -100,7 +100,7 @@ public class UserGroupCallbackTaskCommand<T> extends TaskCommand<T> {\n \n     }\n     \n-    private boolean doCallbackEmailOperation(String emailId, TaskContext context) {\n+    protected boolean doCallbackEmailOperation(String emailId, TaskContext context) {\n         if (emailId != null) {\n             addEmailFromCallbackOperation(emailId, context);\n             return true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzNTcwMw==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r446135703", "bodyText": "Not really needed\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        list = new ArrayList<OrganizationalEntity>();\n          \n          \n            \n                        list = new ArrayList<>();", "author": "afalhambra", "createdAt": "2020-06-26T11:49:04Z", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java", "diffHunk": "@@ -218,28 +221,33 @@ protected URL getAttachemntURL(String attachment) throws MalformedURLException {\n         }\n     }\n     \n-    protected void buildMapByLanguage(Map<String, List<User>> map, Group group, UserInfo userInfo) {\n+    protected void buildMapByLanguage(Map<String, List<OrganizationalEntity>> map, Group group, UserInfo userInfo) {\n     \tIterator<OrganizationalEntity> it = userInfo.getMembersForGroup(group);\n     \tif (it != null) {\n \t    \twhile (it.hasNext()) {\n \t            OrganizationalEntity entity = it.next();\n \t            if (entity instanceof Group) {\n \t                buildMapByLanguage(map, (Group) entity, userInfo);\n \t            } else {\n-\t                buildMapByLanguage(map, (User) entity, userInfo);\n+                    buildMapByLanguage(map, entity, userInfo);\n \t            }\n \t        }\n     \t}\n     }\n \n-    protected void buildMapByLanguage(Map<String, List<User>> map, User user, UserInfo userInfo) {\n-        String language = userInfo.getLanguageForEntity(user);\n-        List<User> list = map.get(language);\n+    protected void buildMapByLanguage(Map<String, List<OrganizationalEntity>> map, OrganizationalEntity user, UserInfo userInfo) {\n+        String language = Optional.ofNullable(userInfo.getLanguageForEntity(user)).orElse(\"en-UK\");\n+        List<OrganizationalEntity> list = map.get(language);\n         if (list == null) {\n-            list = new ArrayList<User>();\n+            list = new ArrayList<OrganizationalEntity>();", "originalCommit": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6bab2491564197fdf56d339a5513ed011bbc5b1a", "chunk": "diff --git a/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java b/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java\nindex f94752f93..64b37da2b 100644\n--- a/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java\n+++ b/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java\n\n@@ -237,17 +237,18 @@ public class EmailNotificationListener implements NotificationListener {\n \n     protected void buildMapByLanguage(Map<String, List<OrganizationalEntity>> map, OrganizationalEntity user, UserInfo userInfo) {\n         String language = Optional.ofNullable(userInfo.getLanguageForEntity(user)).orElse(\"en-UK\");\n-        List<OrganizationalEntity> list = map.get(language);\n-        if (list == null) {\n-            list = new ArrayList<OrganizationalEntity>();\n-            map.put(language, list);\n-        }\n+        List<OrganizationalEntity> list = map.computeIfAbsent(language, k -> new ArrayList<>());\n         list.add(user);\n     }\n \n     @Override\n     public String toString() {\n-        return \"EmailNotificationListener (\" + mailSession + \")\";\n+        Properties properties = mailSession.getProperties();\n+        List<String> prop = new ArrayList<>();\n+        for (Object key : properties.keySet()) {\n+            prop.add(key + \"=\" + properties.getProperty(((String) key)));\n+        }\n+        return \"EmailNotificationListener (\" + String.join(\",\", prop) + \")\";\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzNjQ0Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r446136447", "bodyText": "mailSession doesn't implement toString() so this output will not really display anything useful.", "author": "afalhambra", "createdAt": "2020-06-26T11:50:49Z", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java", "diffHunk": "@@ -218,28 +221,33 @@ protected URL getAttachemntURL(String attachment) throws MalformedURLException {\n         }\n     }\n     \n-    protected void buildMapByLanguage(Map<String, List<User>> map, Group group, UserInfo userInfo) {\n+    protected void buildMapByLanguage(Map<String, List<OrganizationalEntity>> map, Group group, UserInfo userInfo) {\n     \tIterator<OrganizationalEntity> it = userInfo.getMembersForGroup(group);\n     \tif (it != null) {\n \t    \twhile (it.hasNext()) {\n \t            OrganizationalEntity entity = it.next();\n \t            if (entity instanceof Group) {\n \t                buildMapByLanguage(map, (Group) entity, userInfo);\n \t            } else {\n-\t                buildMapByLanguage(map, (User) entity, userInfo);\n+                    buildMapByLanguage(map, entity, userInfo);\n \t            }\n \t        }\n     \t}\n     }\n \n-    protected void buildMapByLanguage(Map<String, List<User>> map, User user, UserInfo userInfo) {\n-        String language = userInfo.getLanguageForEntity(user);\n-        List<User> list = map.get(language);\n+    protected void buildMapByLanguage(Map<String, List<OrganizationalEntity>> map, OrganizationalEntity user, UserInfo userInfo) {\n+        String language = Optional.ofNullable(userInfo.getLanguageForEntity(user)).orElse(\"en-UK\");\n+        List<OrganizationalEntity> list = map.get(language);\n         if (list == null) {\n-            list = new ArrayList<User>();\n+            list = new ArrayList<OrganizationalEntity>();\n             map.put(language, list);\n         }\n         list.add(user);\n     }\n \n+    @Override\n+    public String toString() {\n+        return \"EmailNotificationListener (\" + mailSession + \")\";", "originalCommit": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6bab2491564197fdf56d339a5513ed011bbc5b1a", "chunk": "diff --git a/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java b/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java\nindex f94752f93..64b37da2b 100644\n--- a/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java\n+++ b/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java\n\n@@ -237,17 +237,18 @@ public class EmailNotificationListener implements NotificationListener {\n \n     protected void buildMapByLanguage(Map<String, List<OrganizationalEntity>> map, OrganizationalEntity user, UserInfo userInfo) {\n         String language = Optional.ofNullable(userInfo.getLanguageForEntity(user)).orElse(\"en-UK\");\n-        List<OrganizationalEntity> list = map.get(language);\n-        if (list == null) {\n-            list = new ArrayList<OrganizationalEntity>();\n-            map.put(language, list);\n-        }\n+        List<OrganizationalEntity> list = map.computeIfAbsent(language, k -> new ArrayList<>());\n         list.add(user);\n     }\n \n     @Override\n     public String toString() {\n-        return \"EmailNotificationListener (\" + mailSession + \")\";\n+        Properties properties = mailSession.getProperties();\n+        List<String> prop = new ArrayList<>();\n+        for (Object key : properties.keySet()) {\n+            prop.add(key + \"=\" + properties.getProperty(((String) key)));\n+        }\n+        return \"EmailNotificationListener (\" + String.join(\",\", prop) + \")\";\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0NDQzMw==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r446144433", "bodyText": "lines from 240 to 244 could be replaced with computeIfAbsent\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<OrganizationalEntity> list = map.get(language);\n          \n          \n            \n                    List<OrganizationalEntity> list = map.computeIfAbsent(language, k -> new ArrayList<>());", "author": "afalhambra", "createdAt": "2020-06-26T12:09:24Z", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java", "diffHunk": "@@ -218,28 +221,33 @@ protected URL getAttachemntURL(String attachment) throws MalformedURLException {\n         }\n     }\n     \n-    protected void buildMapByLanguage(Map<String, List<User>> map, Group group, UserInfo userInfo) {\n+    protected void buildMapByLanguage(Map<String, List<OrganizationalEntity>> map, Group group, UserInfo userInfo) {\n     \tIterator<OrganizationalEntity> it = userInfo.getMembersForGroup(group);\n     \tif (it != null) {\n \t    \twhile (it.hasNext()) {\n \t            OrganizationalEntity entity = it.next();\n \t            if (entity instanceof Group) {\n \t                buildMapByLanguage(map, (Group) entity, userInfo);\n \t            } else {\n-\t                buildMapByLanguage(map, (User) entity, userInfo);\n+                    buildMapByLanguage(map, entity, userInfo);\n \t            }\n \t        }\n     \t}\n     }\n \n-    protected void buildMapByLanguage(Map<String, List<User>> map, User user, UserInfo userInfo) {\n-        String language = userInfo.getLanguageForEntity(user);\n-        List<User> list = map.get(language);\n+    protected void buildMapByLanguage(Map<String, List<OrganizationalEntity>> map, OrganizationalEntity user, UserInfo userInfo) {\n+        String language = Optional.ofNullable(userInfo.getLanguageForEntity(user)).orElse(\"en-UK\");\n+        List<OrganizationalEntity> list = map.get(language);", "originalCommit": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1MzU4OQ==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r447453589", "bodyText": "done", "author": "elguardian", "createdAt": "2020-06-30T06:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0NDQzMw=="}], "type": "inlineReview", "revised_code": {"commit": "6bab2491564197fdf56d339a5513ed011bbc5b1a", "chunk": "diff --git a/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java b/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java\nindex f94752f93..64b37da2b 100644\n--- a/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java\n+++ b/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java\n\n@@ -237,17 +237,18 @@ public class EmailNotificationListener implements NotificationListener {\n \n     protected void buildMapByLanguage(Map<String, List<OrganizationalEntity>> map, OrganizationalEntity user, UserInfo userInfo) {\n         String language = Optional.ofNullable(userInfo.getLanguageForEntity(user)).orElse(\"en-UK\");\n-        List<OrganizationalEntity> list = map.get(language);\n-        if (list == null) {\n-            list = new ArrayList<OrganizationalEntity>();\n-            map.put(language, list);\n-        }\n+        List<OrganizationalEntity> list = map.computeIfAbsent(language, k -> new ArrayList<>());\n         list.add(user);\n     }\n \n     @Override\n     public String toString() {\n-        return \"EmailNotificationListener (\" + mailSession + \")\";\n+        Properties properties = mailSession.getProperties();\n+        List<String> prop = new ArrayList<>();\n+        for (Object key : properties.keySet()) {\n+            prop.add(key + \"=\" + properties.getProperty(((String) key)));\n+        }\n+        return \"EmailNotificationListener (\" + String.join(\",\", prop) + \")\";\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE1MTQyNA==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r446151424", "bodyText": "Why do we need this class member?", "author": "afalhambra", "createdAt": "2020-06-26T12:24:50Z", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/identity/MvelUserGroupCallbackImpl.java", "diffHunk": "@@ -20,21 +20,27 @@\n import java.io.Reader;\n import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n import org.jbpm.services.task.utils.MVELUtils;\n+import org.kie.api.task.model.Email;\n import org.kie.api.task.model.Group;\n import org.kie.api.task.model.User;\n import org.kie.internal.task.api.UserGroupCallback;\n \n public class MvelUserGroupCallbackImpl implements UserGroupCallback {\n \n+    private Set<Email> emails;", "originalCommit": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1ODY2MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r447458661", "bodyText": "removed", "author": "elguardian", "createdAt": "2020-06-30T07:09:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE1MTQyNA=="}], "type": "inlineReview", "revised_code": {"commit": "6bab2491564197fdf56d339a5513ed011bbc5b1a", "chunk": "diff --git a/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/identity/MvelUserGroupCallbackImpl.java b/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/identity/MvelUserGroupCallbackImpl.java\nindex fcccc75d5..62efe1ab2 100644\n--- a/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/identity/MvelUserGroupCallbackImpl.java\n+++ b/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/identity/MvelUserGroupCallbackImpl.java\n\n@@ -20,27 +20,21 @@ import java.io.InputStreamReader;\n import java.io.Reader;\n import java.util.ArrayList;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n \n import org.jbpm.services.task.utils.MVELUtils;\n-import org.kie.api.task.model.Email;\n import org.kie.api.task.model.Group;\n import org.kie.api.task.model.User;\n import org.kie.internal.task.api.UserGroupCallback;\n \n public class MvelUserGroupCallbackImpl implements UserGroupCallback {\n \n-    private Set<Email> emails;\n-\n     private Map<User, List<Group>> userGroupMapping;\n \n     //no no-arg constructor to prevent cdi from auto deploy\n     public MvelUserGroupCallbackImpl(boolean activate) {\n-        emails = new HashSet<>();\n         Reader reader = null;\n         Map vars = new HashMap();\n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4OTEyMA==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r446189120", "bodyText": "Message is a little misleading.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new RuntimeException(\"Email already exists with \" + email + \" id, please check that there is no group and user with same id\");\n          \n          \n            \n                        throw new RuntimeException(\"Email already exists with \" + email + \" id, please check that there is email with same id\");", "author": "afalhambra", "createdAt": "2020-06-26T13:37:56Z", "path": "jbpm-human-task/jbpm-human-task-jpa/src/main/java/org/jbpm/services/task/persistence/JPATaskPersistenceContext.java", "diffHunk": "@@ -225,12 +227,49 @@ public User updateUser(User user) {\n \t}\n \n \t@Override\n-\tpublic User removeUser(User user) {\n+    public User removeUser(User user) {\n \t\tcheck();\n-\t\tem.remove( user );\n-\t\treturn user;\n+        em.remove(user);\n+        return user;\n \t}\n \n+    @Override\n+    public Email findEmail(String emailId) {\n+        check();\n+        if (this.pessimisticLocking) {\n+            return this.em.find(EmailImpl.class, emailId, LockModeType.PESSIMISTIC_WRITE);\n+        }\n+        return this.em.find(EmailImpl.class, emailId);\n+    }\n+\n+    @Override\n+    public Email persistEmail(Email email) {\n+        check();\n+        try {\n+            this.em.persist(email);\n+            if (this.pessimisticLocking) {\n+                this.em.flush();\n+                return this.em.find(EmailImpl.class, email.getId(), LockModeType.PESSIMISTIC_WRITE);\n+            }\n+        } catch (EntityExistsException e) {\n+            throw new RuntimeException(\"Email already exists with \" + email + \" id, please check that there is no group and user with same id\");", "originalCommit": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ2MDQ4NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r447460485", "bodyText": "done", "author": "elguardian", "createdAt": "2020-06-30T07:13:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4OTEyMA=="}], "type": "inlineReview", "revised_code": {"commit": "6bab2491564197fdf56d339a5513ed011bbc5b1a", "chunk": "diff --git a/jbpm-human-task/jbpm-human-task-jpa/src/main/java/org/jbpm/services/task/persistence/JPATaskPersistenceContext.java b/jbpm-human-task/jbpm-human-task-jpa/src/main/java/org/jbpm/services/task/persistence/JPATaskPersistenceContext.java\nindex 71975d434..592157b33 100644\n--- a/jbpm-human-task/jbpm-human-task-jpa/src/main/java/org/jbpm/services/task/persistence/JPATaskPersistenceContext.java\n+++ b/jbpm-human-task/jbpm-human-task-jpa/src/main/java/org/jbpm/services/task/persistence/JPATaskPersistenceContext.java\n\n@@ -252,7 +252,7 @@ public class JPATaskPersistenceContext implements TaskPersistenceContext {\n                 return this.em.find(EmailImpl.class, email.getId(), LockModeType.PESSIMISTIC_WRITE);\n             }\n         } catch (EntityExistsException e) {\n-            throw new RuntimeException(\"Email already exists with \" + email + \" id, please check that there is no group and user with same id\");\n+            throw new RuntimeException(\"Email already exists with \" + email + \" id, please check that there is no email with same id\");\n         }\n         return email;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwMDI1MA==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r446900250", "bodyText": "if the returned email is not used, then, return void in the method.\nAs current implemented, when the persistIfNotExists is invoked, returns an email object that it's not being used for returning it.", "author": "gmunozfe", "createdAt": "2020-06-29T11:32:34Z", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/commands/UserGroupCallbackTaskCommand.java", "diffHunk": "@@ -144,12 +154,22 @@ protected User addUserFromCallbackOperation(String userId, TaskContext context)\n         return user;\n     }\n     \n+    protected Email addEmailFromCallbackOperation(String emailId, TaskContext context) {\n+        Email email = context.getPersistenceContext().findEmail(emailId);\n+        boolean emailExists = email != null;\n+        if (!StringUtils.isEmpty(emailId) && !emailExists) {\n+            persistIfNotExists(TaskModelProvider.getFactory().newEmail(emailId), context);\n+        }\n+\n+        return email;", "originalCommit": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1MDQ1Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r447450457", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-06-30T06:52:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwMDI1MA=="}], "type": "inlineReview", "revised_code": {"commit": "6bab2491564197fdf56d339a5513ed011bbc5b1a", "chunk": "diff --git a/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/commands/UserGroupCallbackTaskCommand.java b/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/commands/UserGroupCallbackTaskCommand.java\nindex 92788163f..c81d323fe 100644\n--- a/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/commands/UserGroupCallbackTaskCommand.java\n+++ b/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/commands/UserGroupCallbackTaskCommand.java\n\n@@ -154,14 +154,13 @@ public class UserGroupCallbackTaskCommand<T> extends TaskCommand<T> {\n         return user;\n     }\n     \n-    protected Email addEmailFromCallbackOperation(String emailId, TaskContext context) {\n+    protected void addEmailFromCallbackOperation(String emailId, TaskContext context) {\n         Email email = context.getPersistenceContext().findEmail(emailId);\n         boolean emailExists = email != null;\n         if (!StringUtils.isEmpty(emailId) && !emailExists) {\n             persistIfNotExists(TaskModelProvider.getFactory().newEmail(emailId), context);\n         }\n \n-        return email;\n     }\n \n     protected void persistIfNotExists(final OrganizationalEntity entity, TaskContext context) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMTM2NA==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r446921364", "bodyText": "Check also that it's not empty\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if (emailAddress != null) {\n          \n          \n            \n                                    if (emailAddress != null && !emailAddress.isEmpty()) {", "author": "gmunozfe", "createdAt": "2020-06-29T12:10:36Z", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java", "diffHunk": "@@ -78,43 +79,37 @@ public void onNotification(NotificationEvent event, UserInfo userInfo) {\n             Task task = event.getTask();\n \n             // group users into languages\n-            Map<String, List<User>> users = new HashMap<String, List<User>>();\n-            for (OrganizationalEntity entity : notification.getBusinessAdministrators()) {\n-                if (entity instanceof Group) {\n-                    buildMapByLanguage(users, (Group) entity, userInfo);\n-                } else {\n-                    buildMapByLanguage(users, (User) entity, userInfo);\n-                }\n-            }\n+            List<OrganizationalEntity> entities = new ArrayList<>();\n+            entities.addAll(notification.getBusinessAdministrators());\n+            entities.addAll(notification.getRecipients());\n \n-            for (OrganizationalEntity entity : notification.getRecipients()) {\n+            Map<String, List<OrganizationalEntity>> users = new HashMap<>();\n+            for (OrganizationalEntity entity : entities) {\n                 if (entity instanceof Group) {\n                     buildMapByLanguage(users, (Group) entity, userInfo);\n                 } else {\n-                    buildMapByLanguage(users, (User) entity, userInfo);\n+                    buildMapByLanguage(users, entity, userInfo);\n                 }\n             }\n \n             Map<String, Object> variables = event.getContent();\n-\n-\n             Map<? extends Language, ? extends EmailNotificationHeader> headers = notification.getEmailHeaders();\n \n-            for (Iterator<Map.Entry<String, List<User>>> it = users.entrySet()\n+            for (Iterator<Map.Entry<String, List<OrganizationalEntity>>> it = users.entrySet()\n                     .iterator(); it.hasNext();) {\n                \n                 try { \n-                    Map.Entry<String, List<User>> entry = it.next();\n+                    Map.Entry<String, List<OrganizationalEntity>> entry = it.next();\n                     Language lang = TaskModelProvider.getFactory().newLanguage();\n                     lang.setMapkey(entry.getKey());\n                     EmailNotificationHeader header = headers.get(lang);\n     \n                     Message msg = new MimeMessage(mailSession);\n                     Set<String> toAddresses = new HashSet<String>();\n-                    for (User user : entry.getValue()) {\n+                    for (OrganizationalEntity user : entry.getValue()) {\n     \n-                        String emailAddress = userInfo.getEmailForEntity(user);\n-                        if (emailAddress != null) {                        \t\n+                        String emailAddress = getEmailFromOrganizationEntity(userInfo, user);\n+                        if (emailAddress != null) {", "originalCommit": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1MjYxNw==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r447452617", "bodyText": "done.", "author": "elguardian", "createdAt": "2020-06-30T06:57:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMTM2NA=="}], "type": "inlineReview", "revised_code": {"commit": "6bab2491564197fdf56d339a5513ed011bbc5b1a", "chunk": "diff --git a/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java b/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java\nindex f94752f93..64b37da2b 100644\n--- a/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java\n+++ b/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java\n\n@@ -97,7 +98,6 @@ public class EmailNotificationListener implements NotificationListener {\n \n             for (Iterator<Map.Entry<String, List<OrganizationalEntity>>> it = users.entrySet()\n                     .iterator(); it.hasNext();) {\n-               \n                 try { \n                     Map.Entry<String, List<OrganizationalEntity>> entry = it.next();\n                     Language lang = TaskModelProvider.getFactory().newLanguage();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNDA4MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r446934081", "bodyText": "Question marks (0..1 repetitions) after asterisks (0..n repetitions) are useless in regex\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Pattern pattern = Pattern.compile(\"\\\\[(.*?)\\\\]@\\\\[(.*?)\\\\]\");\n          \n          \n            \n                        Pattern pattern = Pattern.compile(\"\\\\[(.*)\\\\]@\\\\[(.*)\\\\]\");", "author": "gmunozfe", "createdAt": "2020-06-29T12:32:15Z", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/impl/util/HumanTaskHandlerHelper.java", "diffHunk": "@@ -98,13 +100,17 @@ public static Deadlines setDeadlines(Map<String, Object> parameters, List<Organi\n         }\n         \n         for (String component : allComponents) {\n-\t        String[] mainComponents = component.split(ELEMENT_SEPARATOR);\n-\t        \n-\t        if (mainComponents!= null && mainComponents.length == 2) {\n-\t            String actionComponent = mainComponents[0].substring(1, mainComponents[0].length()-1);\n-\t            String expireComponents = mainComponents[1].substring(1, mainComponents[1].length()-1);\n-\t \n-\t            String[] expireElements = expireComponents.split(ATTRIBUTES_ELEMENTS_SEPARATOR);\n+            Pattern pattern = Pattern.compile(\"\\\\[(.*?)\\\\]@\\\\[(.*?)\\\\]\");", "originalCommit": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1OTUzMQ==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r447459531", "bodyText": "done", "author": "elguardian", "createdAt": "2020-06-30T07:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNDA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6bab2491564197fdf56d339a5513ed011bbc5b1a", "chunk": "diff --git a/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/impl/util/HumanTaskHandlerHelper.java b/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/impl/util/HumanTaskHandlerHelper.java\nindex 5e4a56ddf..f3d39aac4 100644\n--- a/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/impl/util/HumanTaskHandlerHelper.java\n+++ b/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/impl/util/HumanTaskHandlerHelper.java\n\n@@ -100,7 +100,7 @@ public class HumanTaskHandlerHelper {\n         }\n         \n         for (String component : allComponents) {\n-            Pattern pattern = Pattern.compile(\"\\\\[(.*?)\\\\]@\\\\[(.*?)\\\\]\");\n+            Pattern pattern = Pattern.compile(\"\\\\[(.*)\\\\]@\\\\[(.*)\\\\]\");\n             Matcher matcher = pattern.matcher(component);\n             if (!matcher.find()) {\n                 logger.warn(\"Incorrect syntax of deadline property {}\", deadlineInfo);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1NDE2Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r446954163", "bodyText": "Better trim() before split for making it more robust.\nIn fact, ATTRIBUTES_ELEMENTS_SEPARATOR should be\nATTRIBUTES_ELEMENTS_SEPARATOR = \"\\\\s*,\\\\s*\";\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String[] emailRecipientsIds = emailRecipients.split(ATTRIBUTES_ELEMENTS_SEPARATOR);\n          \n          \n            \n                            String[] emailRecipientsIds = emailRecipients.trim().split(ATTRIBUTES_ELEMENTS_SEPARATOR);\n          \n      \n    \n    \n  \n\nThis will avoid that this considers 3 elements in the actionComponent instead of 2:\n[toemails: salaboy@unkown.com ,  krisv@unknown.com,  ]@[R3/PT4H]", "author": "gmunozfe", "createdAt": "2020-06-29T13:04:01Z", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/impl/util/HumanTaskHandlerHelper.java", "diffHunk": "@@ -193,27 +199,30 @@ protected static Deadline getNewDeadline(String expiresAt, Date deadlineDate, St\n \t\t\tsubjects.add(subject);\n \t\t\tnames.add(subject);\n \n-\t\t\tString recipients = parameters.get(\"tousers\");\n-\t\t\tif (recipients != null && recipients.trim().length() > 0) {\n-\t\t\t\tString[] recipientsIds = recipients.split(ATTRIBUTES_ELEMENTS_SEPARATOR);\n+            String recipients = parameters.get(\"tousers\");\n+            if (recipients != null && recipients.trim().length() > 0) {\n+                String[] recipientsIds = recipients.split(ATTRIBUTES_ELEMENTS_SEPARATOR);\n+                for (String id : recipientsIds) {\n+                    notificationRecipients.add(TaskModelProvider.getFactory().newUser(id.trim()));\n+                }\n+            }\n \n-\t\t\t\tfor (String id : recipientsIds) {\n-\t\t\t\t\tUser user = TaskModelProvider.getFactory().newUser();\n-                \t((InternalOrganizationalEntity) user).setId(id.trim());\n-\t\t\t\t\tnotificationRecipients.add(user);\n-\t\t\t\t}\n+            String groupRecipients = parameters.get(\"togroups\");\n+            if (groupRecipients != null && groupRecipients.trim().length() > 0) {\n+                String[] groupRecipientsIds = groupRecipients.split(ATTRIBUTES_ELEMENTS_SEPARATOR);\n \n-\t\t\t}\n-\t\t\tString groupRecipients = parameters.get(\"togroups\");\n-\t\t\tif (groupRecipients != null && groupRecipients.trim().length() > 0) {\n-\t\t\t\tString[] groupRecipientsIds = groupRecipients.split(ATTRIBUTES_ELEMENTS_SEPARATOR);\n+                for (String id : groupRecipientsIds) {\n+                    notificationRecipients.add(TaskModelProvider.getFactory().newGroup(id.trim()));\n+                }\n+            }\n \n-\t\t\t\tfor (String id : groupRecipientsIds) {\n-\t\t\t\t\tGroup group = TaskModelProvider.getFactory().newGroup();\n-                \t((InternalOrganizationalEntity) group).setId(id.trim());\n-\t\t\t\t\tnotificationRecipients.add(group);\n-\t\t\t\t}\n-\t\t\t}\n+            String emailRecipients = parameters.get(\"toemails\");\n+            if (emailRecipients != null && emailRecipients.trim().length() > 0) {\n+                String[] emailRecipientsIds = emailRecipients.split(ATTRIBUTES_ELEMENTS_SEPARATOR);", "originalCommit": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1OTkxNw==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r447459917", "bodyText": "for consistency I let this.", "author": "elguardian", "createdAt": "2020-06-30T07:12:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1NDE2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6bab2491564197fdf56d339a5513ed011bbc5b1a", "chunk": "diff --git a/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/impl/util/HumanTaskHandlerHelper.java b/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/impl/util/HumanTaskHandlerHelper.java\nindex 5e4a56ddf..f3d39aac4 100644\n--- a/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/impl/util/HumanTaskHandlerHelper.java\n+++ b/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/impl/util/HumanTaskHandlerHelper.java\n\n@@ -218,7 +218,7 @@ public class HumanTaskHandlerHelper {\n \n             String emailRecipients = parameters.get(\"toemails\");\n             if (emailRecipients != null && emailRecipients.trim().length() > 0) {\n-                String[] emailRecipientsIds = emailRecipients.split(ATTRIBUTES_ELEMENTS_SEPARATOR);\n+                String[] emailRecipientsIds = emailRecipients.trim().split(ATTRIBUTES_ELEMENTS_SEPARATOR);\n                 for (String id : emailRecipientsIds) {\n                     notificationRecipients.add(TaskModelProvider.getFactory().newEmail(id.trim()));\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxNDc2Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r447014767", "bodyText": "I cannot see where these methods are invoked and if they are really needed.\nFor persist, at the end, persistIfNotExist calls to tpc.persistOrgEntity(entity);\nCould you clarify if they are needed for persistence?\nI cannot see an analogous scenario to add-group-command for email.", "author": "gmunozfe", "createdAt": "2020-06-29T14:29:00Z", "path": "jbpm-human-task/jbpm-human-task-jpa/src/main/java/org/jbpm/services/task/persistence/JPATaskPersistenceContext.java", "diffHunk": "@@ -225,12 +227,49 @@ public User updateUser(User user) {\n \t}\n \n \t@Override\n-\tpublic User removeUser(User user) {\n+    public User removeUser(User user) {\n \t\tcheck();\n-\t\tem.remove( user );\n-\t\treturn user;\n+        em.remove(user);\n+        return user;\n \t}\n \n+    @Override\n+    public Email findEmail(String emailId) {\n+        check();\n+        if (this.pessimisticLocking) {\n+            return this.em.find(EmailImpl.class, emailId, LockModeType.PESSIMISTIC_WRITE);\n+        }\n+        return this.em.find(EmailImpl.class, emailId);\n+    }\n+\n+    @Override\n+    public Email persistEmail(Email email) {\n+        check();\n+        try {\n+            this.em.persist(email);\n+            if (this.pessimisticLocking) {\n+                this.em.flush();\n+                return this.em.find(EmailImpl.class, email.getId(), LockModeType.PESSIMISTIC_WRITE);\n+            }\n+        } catch (EntityExistsException e) {\n+            throw new RuntimeException(\"Email already exists with \" + email + \" id, please check that there is no group and user with same id\");\n+        }\n+        return email;\n+    }\n+\n+    @Override\n+    public Email updateEmail(Email email) {\n+        check();\n+        return this.em.merge(email);\n+    }\n+\n+    @Override\n+    public Email removeEmail(Email email) {\n+        check();\n+        em.remove(email);\n+        return email;\n+    }", "originalCommit": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ2MDY0MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r447460641", "bodyText": "for consistency leting this here.", "author": "elguardian", "createdAt": "2020-06-30T07:13:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxNDc2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6bab2491564197fdf56d339a5513ed011bbc5b1a", "chunk": "diff --git a/jbpm-human-task/jbpm-human-task-jpa/src/main/java/org/jbpm/services/task/persistence/JPATaskPersistenceContext.java b/jbpm-human-task/jbpm-human-task-jpa/src/main/java/org/jbpm/services/task/persistence/JPATaskPersistenceContext.java\nindex 71975d434..592157b33 100644\n--- a/jbpm-human-task/jbpm-human-task-jpa/src/main/java/org/jbpm/services/task/persistence/JPATaskPersistenceContext.java\n+++ b/jbpm-human-task/jbpm-human-task-jpa/src/main/java/org/jbpm/services/task/persistence/JPATaskPersistenceContext.java\n\n@@ -252,7 +252,7 @@ public class JPATaskPersistenceContext implements TaskPersistenceContext {\n                 return this.em.find(EmailImpl.class, email.getId(), LockModeType.PESSIMISTIC_WRITE);\n             }\n         } catch (EntityExistsException e) {\n-            throw new RuntimeException(\"Email already exists with \" + email + \" id, please check that there is no group and user with same id\");\n+            throw new RuntimeException(\"Email already exists with \" + email + \" id, please check that there is no email with same id\");\n         }\n         return email;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyNTkzMg==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r447025932", "bodyText": "This block (L407-420) is repeated also for End Deadlines. Perhaps, now it's a good opportunity to refactor it and extract it into a private method for enhancing maintainability.", "author": "gmunozfe", "createdAt": "2020-06-29T14:43:45Z", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/commands/UserGroupCallbackTaskCommand.java", "diffHunk": "@@ -391,9 +411,10 @@ protected void doCallbackOperationForTaskDeadlines(Deadlines deadlines, TaskCont\n                                         for(OrganizationalEntity recipient : recipients) {\n                                             if(recipient instanceof User) {\n                                                 doCallbackUserOperation(recipient.getId(), context);\n-                                            }\n-                                            if(recipient instanceof Group) {\n+                                            } else if (recipient instanceof Group) {\n                                                 doCallbackGroupOperation(recipient.getId(), context);\n+                                            } else if (recipient instanceof Email) {\n+                                                doCallbackEmailOperation(recipient.getId(), context);\n                                             }\n                                         }\n                                     }", "originalCommit": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1MjIyNA==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r447452224", "bodyText": "done", "author": "elguardian", "createdAt": "2020-06-30T06:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyNTkzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1NzcyNA==", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r447457724", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-06-30T07:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyNTkzMg=="}], "type": "inlineReview", "revised_code": {"commit": "6bab2491564197fdf56d339a5513ed011bbc5b1a", "chunk": "diff --git a/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/commands/UserGroupCallbackTaskCommand.java b/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/commands/UserGroupCallbackTaskCommand.java\nindex 92788163f..c81d323fe 100644\n--- a/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/commands/UserGroupCallbackTaskCommand.java\n+++ b/jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/commands/UserGroupCallbackTaskCommand.java\n\n@@ -398,106 +397,60 @@ public class UserGroupCallbackTaskCommand<T> extends TaskCommand<T> {\n         if(deadlines != null) {\n             if(deadlines.getStartDeadlines() != null) {\n                 List<? extends Deadline> startDeadlines = deadlines.getStartDeadlines();\n-                for(Deadline startDeadline : startDeadlines) {\n-                    List<? extends Escalation> escalations = startDeadline.getEscalations();\n-                    if(escalations != null) {\n-                        for(Escalation escalation : escalations) {\n-                            List<? extends Notification> notifications = escalation.getNotifications();\n-                            List<? extends Reassignment> ressignments = escalation.getReassignments();\n-                            if(notifications != null) {\n-                                for(Notification notification : notifications) {\n-                                    List<? extends OrganizationalEntity> recipients = notification.getRecipients();\n-                                    if(recipients != null) {\n-                                        for(OrganizationalEntity recipient : recipients) {\n-                                            if(recipient instanceof User) {\n-                                                doCallbackUserOperation(recipient.getId(), context);\n-                                            } else if (recipient instanceof Group) {\n-                                                doCallbackGroupOperation(recipient.getId(), context);\n-                                            } else if (recipient instanceof Email) {\n-                                                doCallbackEmailOperation(recipient.getId(), context);\n-                                            }\n-                                        }\n-                                    }\n-                                    List<? extends OrganizationalEntity> administrators = notification.getBusinessAdministrators();\n-                                    if(administrators != null) {\n-                                        for(OrganizationalEntity administrator : administrators) {\n-                                            if(administrator instanceof User) {\n-                                                doCallbackUserOperation(administrator.getId(), context);\n-                                            }\n-                                            if(administrator instanceof Group) {\n-                                                doCallbackGroupOperation(administrator.getId(), context);\n-                                            }\n-                                        }\n+                doCallbackDeadlines(startDeadlines, context);\n+            }\n+            \n+            if(deadlines.getEndDeadlines() != null) {\n+                List<? extends Deadline> endDeadlines = deadlines.getEndDeadlines();\n+                doCallbackDeadlines(endDeadlines, context);\n+            }\n+        }\n+    }\n+\n+    private void doCallbackDeadlines(List<? extends Deadline> deadlines, TaskContext context) {\n+        for (Deadline endDeadline : deadlines) {\n+            List<? extends Escalation> escalations = endDeadline.getEscalations();\n+            if (escalations != null) {\n+                for (Escalation escalation : escalations) {\n+                    List<? extends Notification> notifications = escalation.getNotifications();\n+                    List<? extends Reassignment> ressignments = escalation.getReassignments();\n+                    if (notifications != null) {\n+                        for (Notification notification : notifications) {\n+                            List<? extends OrganizationalEntity> recipients = notification.getRecipients();\n+                            if (recipients != null) {\n+                                for (OrganizationalEntity recipient : recipients) {\n+                                    if (recipient instanceof User) {\n+                                        doCallbackUserOperation(recipient.getId(), context);\n+                                    } else if (recipient instanceof Group) {\n+                                        doCallbackGroupOperation(recipient.getId(), context);\n+                                    } else if (recipient instanceof Email) {\n+                                        doCallbackEmailOperation(recipient.getId(), context);\n                                     }\n                                 }\n                             }\n-                            if(ressignments != null) {\n-                                for(Reassignment reassignment : ressignments) {\n-                                    List<? extends OrganizationalEntity> potentialOwners = reassignment.getPotentialOwners();\n-                                    if(potentialOwners != null) {\n-                                        for(OrganizationalEntity potentialOwner : potentialOwners) {\n-                                            if(potentialOwner instanceof User) {\n-                                                doCallbackUserOperation(potentialOwner.getId(), context);\n-                                            }\n-                                            if(potentialOwner instanceof Group) {\n-                                                doCallbackGroupOperation(potentialOwner.getId(), context);\n-                                            }\n-                                        }\n+                            List<? extends OrganizationalEntity> administrators = notification.getBusinessAdministrators();\n+                            if (administrators != null) {\n+                                for (OrganizationalEntity administrator : administrators) {\n+                                    if (administrator instanceof User) {\n+                                        doCallbackUserOperation(administrator.getId(), context);\n+                                    }\n+                                    if (administrator instanceof Group) {\n+                                        doCallbackGroupOperation(administrator.getId(), context);\n                                     }\n                                 }\n                             }\n                         }\n                     }\n-                }\n-            }\n-            \n-            if(deadlines.getEndDeadlines() != null) {\n-                List<? extends Deadline> endDeadlines = deadlines.getEndDeadlines();\n-                for(Deadline endDeadline : endDeadlines) {\n-                    List<? extends Escalation> escalations = endDeadline.getEscalations();\n-                    if(escalations != null) {\n-                        for(Escalation escalation : escalations) {\n-                            List<? extends Notification> notifications = escalation.getNotifications();\n-                            List<? extends Reassignment> ressignments = escalation.getReassignments();\n-                            if(notifications != null) {\n-                                for(Notification notification : notifications) {\n-                                    List<? extends OrganizationalEntity> recipients = notification.getRecipients();\n-                                    if(recipients != null) {\n-                                        for(OrganizationalEntity recipient : recipients) {\n-                                            if(recipient instanceof User) {\n-                                                doCallbackUserOperation(recipient.getId(), context);\n-                                            } else if (recipient instanceof Group) {\n-                                                doCallbackGroupOperation(recipient.getId(), context);\n-                                            } else if (recipient instanceof Email) {\n-                                                doCallbackEmailOperation(recipient.getId(), context);\n-                                            }\n-                                        }\n-                                    }\n-                                    List<? extends OrganizationalEntity> administrators = notification.getBusinessAdministrators();\n-                                    if(administrators != null) {\n-                                        for(OrganizationalEntity administrator : administrators) {\n-                                            if(administrator instanceof User) {\n-                                                doCallbackUserOperation(administrator.getId(), context);\n-                                            }\n-                                            if(administrator instanceof Group) {\n-                                                doCallbackGroupOperation(administrator.getId(), context);\n-                                            }\n-                                        }\n+                    if (ressignments != null) {\n+                        for (Reassignment reassignment : ressignments) {\n+                            List<? extends OrganizationalEntity> potentialOwners = reassignment.getPotentialOwners();\n+                            if (potentialOwners != null) {\n+                                for (OrganizationalEntity potentialOwner : potentialOwners) {\n+                                    if (potentialOwner instanceof User) {\n+                                        doCallbackUserOperation(potentialOwner.getId(), context);\n                                     }\n-                                }\n-                            }\n-                            if(ressignments != null) {\n-                                for(Reassignment reassignment : ressignments) {\n-                                    List<? extends OrganizationalEntity> potentialOwners = reassignment.getPotentialOwners();\n-                                    if(potentialOwners != null) {\n-                                        for(OrganizationalEntity potentialOwner : potentialOwners) {\n-                                            if(potentialOwner instanceof User) {\n-                                                doCallbackUserOperation(potentialOwner.getId(), context);\n-                                            }\n-                                            if(potentialOwner instanceof Group) {\n-                                                doCallbackGroupOperation(potentialOwner.getId(), context);\n-                                            }\n-                                        }\n+                                    if (potentialOwner instanceof Group) {\n+                                        doCallbackGroupOperation(potentialOwner.getId(), context);\n                                     }\n                                 }\n                             }\n"}}, {"oid": "6bab2491564197fdf56d339a5513ed011bbc5b1a", "url": "https://github.com/kiegroup/jbpm/commit/6bab2491564197fdf56d339a5513ed011bbc5b1a", "message": "[JBPM-9197] Allow the introduction of emails in Tasks notifications", "committedDate": "2020-06-30T07:14:14Z", "type": "forcePushed"}, {"oid": "a703489a8c2328c905cc4ff85bef373a23723482", "url": "https://github.com/kiegroup/jbpm/commit/a703489a8c2328c905cc4ff85bef373a23723482", "message": "[JBPM-9197] Allow the introduction of emails in Tasks notifications", "committedDate": "2020-07-27T07:08:22Z", "type": "forcePushed"}, {"oid": "646e821fd42c8881da2291d34ebc21b21f191e2f", "url": "https://github.com/kiegroup/jbpm/commit/646e821fd42c8881da2291d34ebc21b21f191e2f", "message": "[JBPM-9197] Allow the introduction of emails in Tasks notifications", "committedDate": "2020-07-31T06:58:42Z", "type": "commit"}, {"oid": "646e821fd42c8881da2291d34ebc21b21f191e2f", "url": "https://github.com/kiegroup/jbpm/commit/646e821fd42c8881da2291d34ebc21b21f191e2f", "message": "[JBPM-9197] Allow the introduction of emails in Tasks notifications", "committedDate": "2020-07-31T06:58:42Z", "type": "forcePushed"}]}