{"pr_number": 1808, "pr_title": "[JBPM-9474] AMQ Streams (Kafka) integration - Produce events to Kafka by Signal or Messages Events ", "pr_createdAt": "2020-11-23T13:36:49Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1808", "timeline": [{"oid": "e424ad6c016eba6b5d85806bff84cb1e329e18a4", "url": "https://github.com/kiegroup/jbpm/commit/e424ad6c016eba6b5d85806bff84cb1e329e18a4", "message": "[JBPM-9474] Include expressionLanguage attribute for all Assignments", "committedDate": "2020-11-23T13:38:51Z", "type": "forcePushed"}, {"oid": "2dc8500ef82ad63d90088f420727a3354c04cbf6", "url": "https://github.com/kiegroup/jbpm/commit/2dc8500ef82ad63d90088f420727a3354c04cbf6", "message": "[JBPM-9474] Include expressionLanguage attribute for all Assignments", "committedDate": "2020-11-23T13:48:56Z", "type": "forcePushed"}, {"oid": "c314cc2cacd97d550ab9194cf548753a6eb4bdbf", "url": "https://github.com/kiegroup/jbpm/commit/c314cc2cacd97d550ab9194cf548753a6eb4bdbf", "message": "[JBPM-9474] Include expressionLanguage attribute for all Assignments", "committedDate": "2020-11-23T13:51:57Z", "type": "forcePushed"}, {"oid": "9ebb655489d699580dc465da872f18f9bafb1033", "url": "https://github.com/kiegroup/jbpm/commit/9ebb655489d699580dc465da872f18f9bafb1033", "message": "[JBPM-9474] Include expressionLanguage attribute for all Assignments", "committedDate": "2020-11-23T14:19:53Z", "type": "forcePushed"}, {"oid": "eac26e77cc05396af5cc85a51f7c93f43023dd5d", "url": "https://github.com/kiegroup/jbpm/commit/eac26e77cc05396af5cc85a51f7c93f43023dd5d", "message": "[JBPM-9474] Include expressionLanguage attribute for all Assignments\n\nFiring event when signal is thrown or message is sent", "committedDate": "2020-11-24T16:46:40Z", "type": "forcePushed"}, {"oid": "4c2065f746beea44d89ed9f28a5fa6107a8e2fef", "url": "https://github.com/kiegroup/jbpm/commit/4c2065f746beea44d89ed9f28a5fa6107a8e2fef", "message": "[JBPM-9474] Include expressionLanguage attribute for all Assignments\n\nFiring event when signal is thrown or message is sent", "committedDate": "2020-11-24T17:08:47Z", "type": "forcePushed"}, {"oid": "2178a60938032365b32cae2bfc757aa33f96c890", "url": "https://github.com/kiegroup/jbpm/commit/2178a60938032365b32cae2bfc757aa33f96c890", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService", "committedDate": "2020-11-24T17:38:45Z", "type": "forcePushed"}, {"oid": "48c2e84ff06c188a92ba7ef17637269b35770c83", "url": "https://github.com/kiegroup/jbpm/commit/48c2e84ff06c188a92ba7ef17637269b35770c83", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService", "committedDate": "2020-11-24T17:41:59Z", "type": "forcePushed"}, {"oid": "00e2520b1388b261f30b278ea3f92d774f8f747e", "url": "https://github.com/kiegroup/jbpm/commit/00e2520b1388b261f30b278ea3f92d774f8f747e", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService", "committedDate": "2020-11-24T17:51:54Z", "type": "forcePushed"}, {"oid": "b943a7775421c95747b20d65173310dd4e428b3d", "url": "https://github.com/kiegroup/jbpm/commit/b943a7775421c95747b20d65173310dd4e428b3d", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nAdding incomingNodes and outgoingNode to Signal and Message description", "committedDate": "2020-11-25T15:23:15Z", "type": "forcePushed"}, {"oid": "763cf4d73bb99182ab3eaf2c46f4c4f08179d26f", "url": "https://github.com/kiegroup/jbpm/commit/763cf4d73bb99182ab3eaf2c46f4c4f08179d26f", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nAdding incomingNodes and outgoingNode to Signal and Message description", "committedDate": "2020-11-25T19:14:49Z", "type": "forcePushed"}, {"oid": "d1a98b0f68460d02b5be85e9855a8832546407cc", "url": "https://github.com/kiegroup/jbpm/commit/d1a98b0f68460d02b5be85e9855a8832546407cc", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nAdding incomingNodes and outgoingNode to Signal and Message description", "committedDate": "2020-11-26T09:25:01Z", "type": "forcePushed"}, {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d", "url": "https://github.com/kiegroup/jbpm/commit/726694329d65e60d52413e299bd1ab4eef2deb5d", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nAdding incomingNodes and outgoingNode to Signal and Message description", "committedDate": "2020-11-26T09:44:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMDE2NA==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530900164", "bodyText": "increase indentation\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String TRANSFORMATION = \"Transformation\";\n          \n          \n            \n                  private static final String TRANSFORMATION = \"Transformation\";", "author": "afalhambra", "createdAt": "2020-11-26T09:47:44Z", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -50,6 +57,7 @@\n \tpublic static final String LINK_NAME = \"linkName\";\n \tpublic static final String LINK_SOURCE = \"source\";\n \tpublic static final String LINK_TARGET = \"target\";\n+    private static final String TRANSFORMATION = \"Transformation\";", "originalCommit": "726694329d65e60d52413e299bd1ab4eef2deb5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzODA0NA==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531138044", "bodyText": "Problem here is that this file is old and is using old formatting.\nOld line uses tabs, new lines use spaces, thats why is indented differently\nI can format all lines, but this will make difficult to track changes related with this jira.\nI do not think using old format is a wise choise, so Ill leave up to you, format old code or leave it that way", "author": "fjtirado", "createdAt": "2020-11-26T16:34:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMDE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNDE5MA==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531424190", "bodyText": "ok, agree - I wasn't aware of this old format. Thanks.", "author": "afalhambra", "createdAt": "2020-11-27T07:31:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMDE2NA=="}], "type": "inlineReview", "revised_code": {"commit": "b3dc5c55b3250efc3906691efb483d39b4535c85", "chunk": "diff --git a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\nindex 47e4706f3..f75760654 100644\n--- a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n+++ b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n\n@@ -57,7 +53,6 @@ public class IntermediateThrowEventHandler extends AbstractNodeHandler {\n \tpublic static final String LINK_NAME = \"linkName\";\n \tpublic static final String LINK_SOURCE = \"source\";\n \tpublic static final String LINK_TARGET = \"target\";\n-    private static final String TRANSFORMATION = \"Transformation\";\n \n \tprotected Node createNode(Attributes attrs) {\n \t\treturn new ActionNode();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMTM2Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530901367", "bodyText": "If we compare change in this line for this PR with current code, string comparation is not exactly the same (upper T in literal TRANSFORMATION). We could add something like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (subNode != null && TRANSFORMATION.equals(subNode.getNodeName())) {\n          \n          \n            \n                        if (subNode != null && TRANSFORMATION.equalsIgnoreCase(subNode.getNodeName())) {", "author": "afalhambra", "createdAt": "2020-11-26T09:49:37Z", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -362,7 +359,7 @@ protected void readDataInputAssociation(org.w3c.dom.Node xmlNode,\n             // transformation\n             Transformation transformation = null;\n             subNode = subNode.getNextSibling();\n-            if (subNode != null && \"transformation\".equals(subNode.getNodeName())) {\n+            if (subNode != null && TRANSFORMATION.equals(subNode.getNodeName())) {", "originalCommit": "726694329d65e60d52413e299bd1ab4eef2deb5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0MDQ4MA==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531140480", "bodyText": "Good catch, rather than equalIgnoreCase I will use the old string, which is different from the metadata key", "author": "fjtirado", "createdAt": "2020-11-26T16:40:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMTM2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f6f72c44683b40cac0ababf2952c2a6aa4014d2d", "chunk": "diff --git a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\nindex 47e4706f3..3ee4a03b9 100644\n--- a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n+++ b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n\n@@ -359,7 +359,7 @@ public class IntermediateThrowEventHandler extends AbstractNodeHandler {\n             // transformation\n             Transformation transformation = null;\n             subNode = subNode.getNextSibling();\n-            if (subNode != null && TRANSFORMATION.equals(subNode.getNodeName())) {\n+            if (subNode != null && \"transformation\".equals(subNode.getNodeName())) {\n                 String lang = subNode.getAttributes().getNamedItem(\"language\").getNodeValue();\n                 String expression = subNode.getTextContent();\n     \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyODA3OQ==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530928079", "bodyText": "shouldn't we call fireOnMessage instead?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .getProcessEventSupport().fireOnSignal(kcontext.getProcessInstance(), kcontext\n          \n          \n            \n                                .getProcessEventSupport().fireOnMessage(kcontext.getProcessInstance(), kcontext", "author": "afalhambra", "createdAt": "2020-11-26T10:30:19Z", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -251,40 +253,35 @@ public void handleMessageNode(final Node node, final Element element,\n \t\t\t\t\tthrow new IllegalArgumentException(\n \t\t\t\t\t\t\t\"Could not find message \" + messageRef);\n \t\t\t\t}\n-                String variable = (String) actionNode.getMetaData(\"MappingVariable\");\n+                message.addOutgoingNode(node);\n+                String mappingVariable = (String) actionNode.getMetaData(\"MappingVariable\");\n                 Variable v = (Variable) ((ProcessBuildData) parser.getData()).getMetaData(\"Variable\");\n-                if (v != null) {\n-                    variable = (String) v.getMetaData(variable);\n-                }\n-\t\t\t\tactionNode.setMetaData(\"MessageType\", message.getType());\n-\t\t\t\tactionNode\n-\t\t\t\t\t\t.setAction(new DroolsConsequenceAction(\n-\t\t\t\t\t\t\t\t\"java\",\n-\t\t\t\t\t\t\t\t\" Object tVariable = \"+ (variable == null ? \"null\" : variable)+\";\"\n-\t\t\t\t\t\t\t\t+ \"org.jbpm.workflow.core.node.Transformation transformation = (org.jbpm.workflow.core.node.Transformation)kcontext.getNodeInstance().getNode().getMetaData().get(\\\"Transformation\\\");\"\n-\t\t\t\t\t\t\t\t+ \"if (transformation != null) {\"\n-\t\t\t\t\t\t\t\t+ \"  tVariable = new org.jbpm.process.core.event.EventTransformerImpl(transformation)\"\n-\t\t\t\t\t\t\t\t+ \"  .transformEvent(\"+(variable == null ? \"null\" : variable)+\");\"\n-\t\t\t\t\t\t\t\t+ \"}\"\n-\t\t\t\t\t\t\t\t+ \"org.drools.core.process.instance.impl.WorkItemImpl workItem = new org.drools.core.process.instance.impl.WorkItemImpl();\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setName(\\\"Send Task\\\");\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setParameter(\\\"MessageType\\\", \\\"\"\n-\t\t\t\t\t\t\t\t\t\t+ message.getType()\n-\t\t\t\t\t\t\t\t\t\t+ \"\\\");\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setDeploymentId((String) kcontext.getKnowledgeRuntime().getEnvironment().get(\\\"deploymentId\\\"));\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ (variable == null ? \"\"\n-\t\t\t\t\t\t\t\t\t\t\t\t: \"workItem.setParameter(\\\"Message\\\", tVariable);\" + EOL)\n-\t\t\t\t\t\t\t\t\t\t+ \"((org.drools.core.process.instance.WorkItemManager) kcontext.getKnowledgeRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\"));\n+                String varName = v != null ? (String) v.getMetaData(mappingVariable) : mappingVariable;\n+                actionNode.setMetaData(\"MessageType\", message.getType());\n+                actionNode.setAction(new JavaDroolsAction(kcontext -> {\n+                    Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode().getMetaData()\n+                            .get(TRANSFORMATION);\n+                    Object tVariable = transformation != null ? new EventTransformerImpl(transformation).transformEvent(\n+                            kcontext.getVariable(varName)) : kcontext.getVariable(varName);\n+                    WorkItemImpl workItem = new WorkItemImpl();\n+                    workItem.setName(\"Send Task\");\n+                    workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\n+                    workItem.setParameter(\"MessageType\", message.getType());\n+                    workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\n+                    workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\n+                    workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get(\n+                            \"deploymentId\"));\n+                    if (tVariable != null) {\n+                        workItem.setParameter(\"Message\", tVariable);\n+                    }\n+                    ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())\n+                    .getProcessEventSupport().fireOnSignal(kcontext.getProcessInstance(), kcontext", "originalCommit": "726694329d65e60d52413e299bd1ab4eef2deb5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0MDc1OQ==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531140759", "bodyText": "thank you", "author": "fjtirado", "createdAt": "2020-11-26T16:40:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyODA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f6f72c44683b40cac0ababf2952c2a6aa4014d2d", "chunk": "diff --git a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\nindex 47e4706f3..3ee4a03b9 100644\n--- a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n+++ b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n\n@@ -275,7 +275,7 @@ public class IntermediateThrowEventHandler extends AbstractNodeHandler {\n                         workItem.setParameter(\"Message\", tVariable);\n                     }\n                     ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())\n-                    .getProcessEventSupport().fireOnSignal(kcontext.getProcessInstance(), kcontext\n+                            .getProcessEventSupport().fireOnMessage(kcontext.getProcessInstance(), kcontext\n                             .getNodeInstance(), kcontext.getKieRuntime(), message.getName(), tVariable);\n                     \n                     ((WorkItemManager) kcontext.getKieRuntime().getWorkItemManager()).internalExecuteWorkItem(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMTEzNA==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530931134", "bodyText": "just thinking aloud and wondering whether it's safe to return a mutable collection here? wdyt?", "author": "afalhambra", "createdAt": "2020-11-26T10:35:07Z", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/core/Message.java", "diffHunk": "@@ -50,4 +56,19 @@ public void setName(String name) {\n \t\tthis.name = name;\n \t}\n \n+    public void addIncomingNode(Node node) {\n+        incomingNodes.add(node);\n+    }\n+\n+    public void addOutgoingNode(Node node) {\n+        outgoingNodes.add(node);\n+    }\n+\n+    public Collection<Node> getIncomingNodes() {\n+        return incomingNodes;\n+    }\n+\n+    public Collection<Node> getOutgoingNodes() {\n+        return outgoingNodes;\n+    }", "originalCommit": "726694329d65e60d52413e299bd1ab4eef2deb5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0NTg5Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531145893", "bodyText": "sure, changing it", "author": "fjtirado", "createdAt": "2020-11-26T16:51:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMTEzNA=="}], "type": "inlineReview", "revised_code": {"commit": "f6f72c44683b40cac0ababf2952c2a6aa4014d2d", "chunk": "diff --git a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/core/Message.java b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/core/Message.java\nindex 9e8744072..34741cad6 100644\n--- a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/core/Message.java\n+++ b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/core/Message.java\n\n@@ -65,10 +66,10 @@ public class Message implements Serializable {\n     }\n \n     public Collection<Node> getIncomingNodes() {\n-        return incomingNodes;\n+        return Collections.unmodifiableCollection(incomingNodes);\n     }\n \n     public Collection<Node> getOutgoingNodes() {\n-        return outgoingNodes;\n+        return Collections.unmodifiableCollection(outgoingNodes);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMTk2Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530931966", "bodyText": "just thinking aloud and wondering whether it's safe to return a mutable collection here? wdyt?", "author": "afalhambra", "createdAt": "2020-11-26T10:36:26Z", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/core/Signal.java", "diffHunk": "@@ -48,4 +54,19 @@ public String getName() {\n \t\treturn name;\n \t}\n \n+    public void addIncomingNode(Node node) {\n+        incomingNodes.add(node);\n+    }\n+\n+    public void addOutgoingNode(Node node) {\n+        outgoingNodes.add(node);\n+    }\n+\n+    public Collection<Node> getIncomingNodes() {\n+        return incomingNodes;\n+    }\n+\n+    public Collection<Node> getOutgoingNodes() {\n+        return outgoingNodes;\n+    }", "originalCommit": "726694329d65e60d52413e299bd1ab4eef2deb5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0Mzg4MA==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531143880", "bodyText": "and in message, yes, doing it", "author": "fjtirado", "createdAt": "2020-11-26T16:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMTk2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f6f72c44683b40cac0ababf2952c2a6aa4014d2d", "chunk": "diff --git a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/core/Signal.java b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/core/Signal.java\nindex ea76d7b10..afc0fd0b7 100644\n--- a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/core/Signal.java\n+++ b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/core/Signal.java\n\n@@ -63,10 +64,10 @@ public class Signal implements Serializable {\n     }\n \n     public Collection<Node> getIncomingNodes() {\n-        return incomingNodes;\n+        return Collections.unmodifiableCollection(incomingNodes);\n     }\n \n     public Collection<Node> getOutgoingNodes() {\n-        return outgoingNodes;\n+        return Collections.unmodifiableCollection(outgoingNodes);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1MjExNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530952115", "bodyText": "I think hashCode and equals methods might need to change to reflect these two new members.\nAlso toString should also accommodate these two new members", "author": "afalhambra", "createdAt": "2020-11-26T11:09:21Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/SignalDescBaseImpl.java", "diffHunk": "@@ -46,6 +55,16 @@ public String getStructureRef() {\n         return structureRef;\n     }\n \n+    @Override\n+    public Collection<Node> getIncomingNodes() {\n+        return incomingNodes;\n+    }\n+\n+    @Override\n+    public Collection<Node> getOutgoingNodes() {\n+        return outgoingNodes;\n+    }\n+\n     @Override\n     public int hashCode() {", "originalCommit": "726694329d65e60d52413e299bd1ab4eef2deb5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0NDUxOA==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531144518", "bodyText": "hmmmm, toString yes, but these two fields are not part of the identity of the class, so they should not be included in equals and hashnode (besides performance reasons)", "author": "fjtirado", "createdAt": "2020-11-26T16:48:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1MjExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNDcwMQ==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531424701", "bodyText": "ok, thanks", "author": "afalhambra", "createdAt": "2020-11-27T07:32:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1MjExNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1NDg3OA==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530954878", "bodyText": "maybe default can avoid any backward issues? wdyt?", "author": "afalhambra", "createdAt": "2020-11-26T11:14:10Z", "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "diffHunk": "@@ -498,8 +499,17 @@\n      */\n     public <T> T execute(String deploymentId, Context<?> context, Command<T> command);\n \n+    /**\n+     * Adds a process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void addProcessEventListener(String deploymentId, ProcessEventListener listener);", "originalCommit": "726694329d65e60d52413e299bd1ab4eef2deb5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0Mjc0MA==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531142740", "bodyText": "Yes, I thought about this, but in this case this method do not have a proper empty implementation. Also this is a service, I mean internal to JBPM, so we knoe we have just one implementation", "author": "fjtirado", "createdAt": "2020-11-26T16:44:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1NDg3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNTEzOA==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531425138", "bodyText": "ok", "author": "afalhambra", "createdAt": "2020-11-27T07:34:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1NDg3OA=="}], "type": "inlineReview", "revised_code": {"commit": "48ecc8a32846c6b3e865f9ab6cc5bb77a04fa485", "chunk": "diff --git a/jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java b/jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java\nindex 7b63df607..627dc2f4c 100644\n--- a/jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java\n+++ b/jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java\n\n@@ -499,17 +498,8 @@ public interface ProcessService {\n      */\n     public <T> T execute(String deploymentId, Context<?> context, Command<T> command);\n \n-    /**\n-     * Adds a process event listener\n-     * @param deploymentId\n-     * @param listener\n-     */\n-    void addProcessEventListener(String deploymentId, ProcessEventListener listener);\n \n-    /**\n-     * Remove process event listener\n-     * @param deploymentId\n-     * @param listener\n-     */\n-    void removeProcessEventListener(String deploymentId, ProcessEventListener listener);\n+\n+\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1NDk2Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530954967", "bodyText": "same as above", "author": "afalhambra", "createdAt": "2020-11-26T11:14:18Z", "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "diffHunk": "@@ -498,8 +499,17 @@\n      */\n     public <T> T execute(String deploymentId, Context<?> context, Command<T> command);\n \n+    /**\n+     * Adds a process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void addProcessEventListener(String deploymentId, ProcessEventListener listener);\n \n-\n-\n-\n+    /**\n+     * Remove process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void removeProcessEventListener(String deploymentId, ProcessEventListener listener);", "originalCommit": "726694329d65e60d52413e299bd1ab4eef2deb5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0MzcyOA==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531143728", "bodyText": "same rationale as above", "author": "fjtirado", "createdAt": "2020-11-26T16:47:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1NDk2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "48ecc8a32846c6b3e865f9ab6cc5bb77a04fa485", "chunk": "diff --git a/jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java b/jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java\nindex 7b63df607..627dc2f4c 100644\n--- a/jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java\n+++ b/jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java\n\n@@ -499,17 +498,8 @@ public interface ProcessService {\n      */\n     public <T> T execute(String deploymentId, Context<?> context, Command<T> command);\n \n-    /**\n-     * Adds a process event listener\n-     * @param deploymentId\n-     * @param listener\n-     */\n-    void addProcessEventListener(String deploymentId, ProcessEventListener listener);\n \n-    /**\n-     * Remove process event listener\n-     * @param deploymentId\n-     * @param listener\n-     */\n-    void removeProcessEventListener(String deploymentId, ProcessEventListener listener);\n+\n+\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2NzkyMg==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530967922", "bodyText": "Shouldn't we replace below code DroolsConsequenceAction with JavaDroolsAction new class instead? so we can follow the same approach as per IntermidiateEventHandler class?\n\n  \n    \n      jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\n    \n    \n        Lines 188 to 197\n      in\n      7266943\n    \n    \n    \n    \n\n        \n          \n                      actions.add(new DroolsConsequenceAction(\"java\", \n        \n\n        \n          \n                          \"org.drools.core.process.instance.impl.WorkItemImpl workItem = new org.drools.core.process.instance.impl.WorkItemImpl();\" + EOL + \n        \n\n        \n          \n                          \"workItem.setName(\\\"Send Task\\\");\" + EOL + \n        \n\n        \n          \n                          \"workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\" + EOL + \n        \n\n        \n          \n                          \"workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\" + EOL + \n        \n\n        \n          \n                          \"workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\" + EOL + \n        \n\n        \n          \n                          \"workItem.setParameter(\\\"MessageType\\\", \\\"\" + message.getType() + \"\\\");\" + EOL + \n        \n\n        \n          \n                          (variable == null ? \"\" : \"workItem.setParameter(\\\"Message\\\", \" + variable + \");\" + EOL) + \n        \n\n        \n          \n           \"workItem.setDeploymentId((String) kcontext.getKnowledgeRuntime().getEnvironment().get(\\\"deploymentId\\\"));\" + EOL + \n        \n\n        \n          \n                          \"((org.drools.core.process.instance.WorkItemManager) kcontext.getKnowledgeRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\")); \n        \n    \n  \n\n\nwith some similar approach to this we've used below?\n\n  \n    \n      jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n    \n    \n        Lines 261 to 284\n      in\n      7266943\n    \n    \n    \n    \n\n        \n          \n           actionNode.setAction(new JavaDroolsAction(kcontext -> { \n        \n\n        \n          \n               Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode().getMetaData() \n        \n\n        \n          \n                       .get(TRANSFORMATION); \n        \n\n        \n          \n               Object tVariable = transformation != null ? new EventTransformerImpl(transformation).transformEvent( \n        \n\n        \n          \n                       kcontext.getVariable(varName)) : kcontext.getVariable(varName); \n        \n\n        \n          \n               WorkItemImpl workItem = new WorkItemImpl(); \n        \n\n        \n          \n               workItem.setName(\"Send Task\"); \n        \n\n        \n          \n               workItem.setProcessInstanceId(kcontext.getProcessInstance().getId()); \n        \n\n        \n          \n               workItem.setParameter(\"MessageType\", message.getType()); \n        \n\n        \n          \n               workItem.setNodeInstanceId(kcontext.getNodeInstance().getId()); \n        \n\n        \n          \n               workItem.setNodeId(kcontext.getNodeInstance().getNodeId()); \n        \n\n        \n          \n               workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get( \n        \n\n        \n          \n                       \"deploymentId\")); \n        \n\n        \n          \n               if (tVariable != null) { \n        \n\n        \n          \n                   workItem.setParameter(\"Message\", tVariable); \n        \n\n        \n          \n               } \n        \n\n        \n          \n               ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime()) \n        \n\n        \n          \n               .getProcessEventSupport().fireOnSignal(kcontext.getProcessInstance(), kcontext \n        \n\n        \n          \n                       .getNodeInstance(), kcontext.getKieRuntime(), message.getName(), tVariable); \n        \n\n        \n          \n                \n        \n\n        \n          \n               ((WorkItemManager) kcontext.getKieRuntime().getWorkItemManager()).internalExecuteWorkItem( \n        \n\n        \n          \n                       workItem); \n        \n\n        \n          \n             \n        \n\n        \n          \n           }));", "author": "afalhambra", "createdAt": "2020-11-26T11:37:14Z", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java", "diffHunk": "@@ -181,6 +180,7 @@ public void handleMessageNode(final Node node, final Element element, final Stri\n                 if (message == null) {\n                     throw new IllegalArgumentException(\"Could not find message \" + messageRef);\n                 }\n+                message.addOutgoingNode(node);", "originalCommit": "726694329d65e60d52413e299bd1ab4eef2deb5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0MzE5NA==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531143194", "bodyText": "you are right", "author": "fjtirado", "createdAt": "2020-11-26T16:45:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2NzkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2MzA2Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531163063", "bodyText": "Fixed for message, but studying how to do it for signal", "author": "fjtirado", "createdAt": "2020-11-26T17:31:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2NzkyMg=="}], "type": "inlineReview", "revised_code": {"commit": "5f923893293d498f7f140bd458c20d05c073a6c2", "chunk": "diff --git a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\nindex 645bc9dda..7aa6368c3 100644\n--- a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\n+++ b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\n\n@@ -181,21 +187,25 @@ public class EndEventHandler extends AbstractNodeHandler {\n                     throw new IllegalArgumentException(\"Could not find message \" + messageRef);\n                 }\n                 message.addOutgoingNode(node);\n-                String variable = (String) endNode.getMetaData(\"MappingVariable\");\n+                String varName = (String) endNode.getMetaData(\"MappingVariable\");\n                 endNode.setMetaData(\"MessageType\", message.getType());\n-                List<DroolsAction> actions = new ArrayList<DroolsAction>();\n-\n-                actions.add(new DroolsConsequenceAction(\"java\",\n-                    \"org.drools.core.process.instance.impl.WorkItemImpl workItem = new org.drools.core.process.instance.impl.WorkItemImpl();\" + EOL +\n-                    \"workItem.setName(\\\"Send Task\\\");\" + EOL +\n-                    \"workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\" + EOL +\n-                    \"workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\" + EOL +\n-                    \"workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\" + EOL +\n-                    \"workItem.setParameter(\\\"MessageType\\\", \\\"\" + message.getType() + \"\\\");\" + EOL +\n-                    (variable == null ? \"\" : \"workItem.setParameter(\\\"Message\\\", \" + variable + \");\" + EOL) +\n-\t\t\t\t\t\"workItem.setDeploymentId((String) kcontext.getKnowledgeRuntime().getEnvironment().get(\\\"deploymentId\\\"));\" + EOL +\n-                    \"((org.drools.core.process.instance.WorkItemManager) kcontext.getKnowledgeRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\"));\n-                endNode.setActions(EndNode.EVENT_NODE_ENTER, actions);\n+                endNode.setActions(EndNode.EVENT_NODE_ENTER, Collections.singletonList(new JavaDroolsAction (kcontext -> {\n+                    Object tVariable = kcontext.getVariable(varName);\n+                    WorkItemImpl workItem = new WorkItemImpl();\n+                    workItem.setName(\"Send Task\");\n+                    workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\n+                    workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\n+                    workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\n+                    workItem.setParameter(\"MessageType\", message.getType());\n+                    if (tVariable != null) {\n+                        workItem.setParameter(\"Message\", tVariable);\n+                    }\n+                    ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())\n+                            .getProcessEventSupport().fireOnMessage(kcontext.getProcessInstance(), kcontext\n+                                    .getNodeInstance(), kcontext.getKieRuntime(), message.getName(), tVariable);\n+                    workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get(\"deploymentId\"));\n+                    ((WorkItemManager) kcontext.getKieRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\n+                })));\n             }\n             xmlNode = xmlNode.getNextSibling();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3Mzc2Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530973766", "bodyText": "I'm just wondering what if the action is not an instance of DroolsConsequenceAction? it's ok if we don't do anything in that case (like JavaDroolsAction)? wdyt?", "author": "afalhambra", "createdAt": "2020-11-26T11:47:49Z", "path": "jbpm-flow-builder/src/main/java/org/jbpm/process/builder/ActionNodeBuilder.java", "diffHunk": "@@ -41,13 +41,15 @@ public void build(Process process,\n                       Node node) {\n     \tsuper.build(process, processDescr, context, node);\n         ActionNode actionNode = ( ActionNode ) node;\n-        DroolsConsequenceAction action = (DroolsConsequenceAction) actionNode.getAction();\n-        ActionDescr actionDescr = new ActionDescr();\n-        actionDescr.setText( action.getConsequence() );\n-        actionDescr.setResource(processDescr.getResource());\n+        if (actionNode.getAction() instanceof DroolsConsequenceAction) {", "originalCommit": "726694329d65e60d52413e299bd1ab4eef2deb5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0MzU5Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531143596", "bodyText": "Good question. If the action is not a droolsconsequenceaction we do not need to build it, it is already built", "author": "fjtirado", "createdAt": "2020-11-26T16:46:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3Mzc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNTQ4NA==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531425484", "bodyText": "ok, thanks for clarifying.", "author": "afalhambra", "createdAt": "2020-11-27T07:35:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3Mzc2Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "f6f72c44683b40cac0ababf2952c2a6aa4014d2d", "url": "https://github.com/kiegroup/jbpm/commit/f6f72c44683b40cac0ababf2952c2a6aa4014d2d", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description", "committedDate": "2020-11-26T16:53:23Z", "type": "forcePushed"}, {"oid": "5f923893293d498f7f140bd458c20d05c073a6c2", "url": "https://github.com/kiegroup/jbpm/commit/5f923893293d498f7f140bd458c20d05c073a6c2", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description", "committedDate": "2020-11-26T17:29:14Z", "type": "forcePushed"}, {"oid": "b3dc5c55b3250efc3906691efb483d39b4535c85", "url": "https://github.com/kiegroup/jbpm/commit/b3dc5c55b3250efc3906691efb483d39b4535c85", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description", "committedDate": "2020-11-27T09:57:59Z", "type": "forcePushed"}, {"oid": "0fcf72d94a1a21e0a90d9a11e3a9e000c538fe49", "url": "https://github.com/kiegroup/jbpm/commit/0fcf72d94a1a21e0a90d9a11e3a9e000c538fe49", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description", "committedDate": "2020-11-27T09:59:46Z", "type": "forcePushed"}, {"oid": "36998ac342552e193506c1ee55e89e09887c1160", "url": "https://github.com/kiegroup/jbpm/commit/36998ac342552e193506c1ee55e89e09887c1160", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description", "committedDate": "2020-11-27T10:31:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1NTA4MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531555081", "bodyText": "Signal use External Send Task", "author": "fjtirado", "createdAt": "2020-11-27T11:48:40Z", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.process.instance.impl.util.VariableUtil;\n+import org.jbpm.workflow.core.impl.NodeImpl;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.manager.RuntimeManager;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendSignalAction implements Action {\n+\n+    private String signalName;\n+    private String varName;\n+    private boolean isAsync;\n+    private NodeImpl node;\n+\n+    public SendSignalAction(NodeImpl node, String variable, String signalName, boolean isAsync) {\n+        this.node = node;\n+        this.varName = variable;\n+        this.signalName = signalName;\n+        this.isAsync = isAsync;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = kcontext.getVariable(varName);\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode()\n+                .getMetaData().get(\"Transformation\");\n+        if (transformation != null) {\n+            tVariable = new EventTransformerImpl(transformation).transformEvent(tVariable);\n+        }\n+        String signalType = VariableUtil.resolveVariable(isAsync ? \"ASYNC-\" + signalName : signalName, kcontext\n+                .getNodeInstance());\n+        String scope = (String) node.getMetaData(\"customScope\");\n+        if (\"processInstance\".equalsIgnoreCase(scope)) {\n+            kcontext.getProcessInstance().signalEvent(signalType, tVariable);\n+        } else if (\"runtimeManager\".equalsIgnoreCase(scope) || \"project\".equalsIgnoreCase(scope)) {\n+            ((RuntimeManager) kcontext.getKieRuntime().getEnvironment().get(\"RuntimeManager\")).signalEvent(signalType,\n+                    tVariable);\n+        } else if (\"external\".equalsIgnoreCase(scope)) {\n+            ((InternalProcessRuntime) kcontext.getKieRuntime()).getProcessEventSupport().fireOnSignal(kcontext\n+                    .getProcessInstance(), kcontext.getNodeInstance(), kcontext.getKieRuntime(), signalName, tVariable);\n+            WorkItemImpl workItem = new WorkItemImpl();\n+            workItem.setName(\"External Send Task\");", "originalCommit": "36998ac342552e193506c1ee55e89e09887c1160", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1NDc0OQ==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533954749", "bodyText": "the work item handler is not required. remove it.", "author": "elguardian", "createdAt": "2020-12-02T07:42:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1NTA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a67251c82259357a94cf021789c1f37f97f86f2f", "chunk": "diff --git a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java\nindex d91bf13c8..f70251882 100644\n--- a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java\n+++ b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java\n\n@@ -16,12 +16,15 @@\n \n package org.jbpm.bpmn2.handler;\n \n+import org.drools.compiler.compiler.xml.XmlDumper;\n import org.drools.core.process.instance.WorkItemManager;\n import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n import org.jbpm.process.core.event.EventTransformerImpl;\n import org.jbpm.process.instance.InternalProcessRuntime;\n import org.jbpm.process.instance.impl.Action;\n import org.jbpm.process.instance.impl.util.VariableUtil;\n+import org.jbpm.workflow.core.Node;\n import org.jbpm.workflow.core.impl.NodeImpl;\n import org.jbpm.workflow.core.node.Transformation;\n import org.kie.api.runtime.manager.RuntimeManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1NTI5Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531555293", "bodyText": "Should we catch WorkItemHandlerNotFoundException in case user has not registered a handler for signal?", "author": "fjtirado", "createdAt": "2020-11-27T11:49:03Z", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.process.instance.impl.util.VariableUtil;\n+import org.jbpm.workflow.core.impl.NodeImpl;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.manager.RuntimeManager;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendSignalAction implements Action {\n+\n+    private String signalName;\n+    private String varName;\n+    private boolean isAsync;\n+    private NodeImpl node;\n+\n+    public SendSignalAction(NodeImpl node, String variable, String signalName, boolean isAsync) {\n+        this.node = node;\n+        this.varName = variable;\n+        this.signalName = signalName;\n+        this.isAsync = isAsync;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = kcontext.getVariable(varName);\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode()\n+                .getMetaData().get(\"Transformation\");\n+        if (transformation != null) {\n+            tVariable = new EventTransformerImpl(transformation).transformEvent(tVariable);\n+        }\n+        String signalType = VariableUtil.resolveVariable(isAsync ? \"ASYNC-\" + signalName : signalName, kcontext\n+                .getNodeInstance());\n+        String scope = (String) node.getMetaData(\"customScope\");\n+        if (\"processInstance\".equalsIgnoreCase(scope)) {\n+            kcontext.getProcessInstance().signalEvent(signalType, tVariable);\n+        } else if (\"runtimeManager\".equalsIgnoreCase(scope) || \"project\".equalsIgnoreCase(scope)) {\n+            ((RuntimeManager) kcontext.getKieRuntime().getEnvironment().get(\"RuntimeManager\")).signalEvent(signalType,\n+                    tVariable);\n+        } else if (\"external\".equalsIgnoreCase(scope)) {\n+            ((InternalProcessRuntime) kcontext.getKieRuntime()).getProcessEventSupport().fireOnSignal(kcontext\n+                    .getProcessInstance(), kcontext.getNodeInstance(), kcontext.getKieRuntime(), signalName, tVariable);\n+            WorkItemImpl workItem = new WorkItemImpl();\n+            workItem.setName(\"External Send Task\");\n+            workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\n+            workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\n+            workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\n+            workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get(\"deploymentId\"));\n+            workItem.setParameter(\"Signal\", signalType);\n+            workItem.setParameter(\"SignalProcessInstanceId\", kcontext.getVariable(\"SignalProcessInstanceId\"));\n+            workItem.setParameter(\"SignalWorkItemId\", kcontext.getVariable(\"SignalWorkItemId\"));\n+            workItem.setParameter(\"SignalDeploymentId\", kcontext.getVariable(\"SignalDeploymentId\"));\n+            if (tVariable != null) {\n+                workItem.setParameter(\"Data\", tVariable);\n+            }\n+            ((WorkItemManager) kcontext.getKieRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);", "originalCommit": "36998ac342552e193506c1ee55e89e09887c1160", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a67251c82259357a94cf021789c1f37f97f86f2f", "chunk": "diff --git a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java\nindex d91bf13c8..f70251882 100644\n--- a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java\n+++ b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java\n\n@@ -16,12 +16,15 @@\n \n package org.jbpm.bpmn2.handler;\n \n+import org.drools.compiler.compiler.xml.XmlDumper;\n import org.drools.core.process.instance.WorkItemManager;\n import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n import org.jbpm.process.core.event.EventTransformerImpl;\n import org.jbpm.process.instance.InternalProcessRuntime;\n import org.jbpm.process.instance.impl.Action;\n import org.jbpm.process.instance.impl.util.VariableUtil;\n+import org.jbpm.workflow.core.Node;\n import org.jbpm.workflow.core.impl.NodeImpl;\n import org.jbpm.workflow.core.node.Transformation;\n import org.kie.api.runtime.manager.RuntimeManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1NTU5MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531555591", "bodyText": "Message use Send Task", "author": "fjtirado", "createdAt": "2020-11-27T11:49:36Z", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendMessageAction implements Action {\n+\n+    private String varName;\n+    private Message message;\n+\n+    public SendMessageAction(String varName, Message message) {\n+        this.varName = varName;\n+        this.message = message;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode().getMetaData()\n+                .get(\"Transformation\");\n+        Object tVariable = transformation != null ? new EventTransformerImpl(transformation).transformEvent(\n+                kcontext.getVariable(varName)) : kcontext.getVariable(varName);\n+        WorkItemImpl workItem = new WorkItemImpl();\n+        workItem.setName(\"Send Task\");", "originalCommit": "36998ac342552e193506c1ee55e89e09887c1160", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a67251c82259357a94cf021789c1f37f97f86f2f", "chunk": "diff --git a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java\nindex 65b229e56..ce21aa0b2 100644\n--- a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java\n+++ b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java\n\n@@ -16,13 +16,16 @@\n \n package org.jbpm.bpmn2.handler;\n \n+import org.drools.compiler.compiler.xml.XmlDumper;\n import org.drools.core.common.InternalKnowledgeRuntime;\n import org.drools.core.process.instance.WorkItemManager;\n import org.drools.core.process.instance.impl.WorkItemImpl;\n import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n import org.jbpm.process.core.event.EventTransformerImpl;\n import org.jbpm.process.instance.InternalProcessRuntime;\n import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.workflow.core.Node;\n import org.jbpm.workflow.core.node.Transformation;\n import org.kie.api.runtime.process.ProcessContext;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1NTc1NA==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531555754", "bodyText": "Should we catch WorkItemHandlerNotFoundException in case user has not registered a handler for message?", "author": "fjtirado", "createdAt": "2020-11-27T11:49:56Z", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendMessageAction implements Action {\n+\n+    private String varName;\n+    private Message message;\n+\n+    public SendMessageAction(String varName, Message message) {\n+        this.varName = varName;\n+        this.message = message;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode().getMetaData()\n+                .get(\"Transformation\");\n+        Object tVariable = transformation != null ? new EventTransformerImpl(transformation).transformEvent(\n+                kcontext.getVariable(varName)) : kcontext.getVariable(varName);\n+        WorkItemImpl workItem = new WorkItemImpl();\n+        workItem.setName(\"Send Task\");\n+        workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\n+        workItem.setParameter(\"MessageType\", message.getType());\n+        workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\n+        workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\n+        workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get(\"deploymentId\"));\n+        if (tVariable != null) {\n+            workItem.setParameter(\"Message\", tVariable);\n+        }\n+        ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())\n+                .getProcessEventSupport().fireOnMessage(kcontext.getProcessInstance(), kcontext\n+                        .getNodeInstance(), kcontext.getKieRuntime(), message.getName(), tVariable);\n+        ((WorkItemManager) kcontext.getKieRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);", "originalCommit": "36998ac342552e193506c1ee55e89e09887c1160", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1NjY5MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533956691", "bodyText": "put the signal fire at the begining and before executing the work item check if it is registered", "author": "elguardian", "createdAt": "2020-12-02T07:46:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1NTc1NA=="}], "type": "inlineReview", "revised_code": {"commit": "a67251c82259357a94cf021789c1f37f97f86f2f", "chunk": "diff --git a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java\nindex 65b229e56..ce21aa0b2 100644\n--- a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java\n+++ b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java\n\n@@ -16,13 +16,16 @@\n \n package org.jbpm.bpmn2.handler;\n \n+import org.drools.compiler.compiler.xml.XmlDumper;\n import org.drools.core.common.InternalKnowledgeRuntime;\n import org.drools.core.process.instance.WorkItemManager;\n import org.drools.core.process.instance.impl.WorkItemImpl;\n import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n import org.jbpm.process.core.event.EventTransformerImpl;\n import org.jbpm.process.instance.InternalProcessRuntime;\n import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.workflow.core.Node;\n import org.jbpm.workflow.core.node.Transformation;\n import org.kie.api.runtime.process.ProcessContext;\n \n"}}, {"oid": "a67251c82259357a94cf021789c1f37f97f86f2f", "url": "https://github.com/kiegroup/jbpm/commit/a67251c82259357a94cf021789c1f37f97f86f2f", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description", "committedDate": "2020-11-27T18:12:32Z", "type": "forcePushed"}, {"oid": "e118343280509172fa6d98cde72d91f5225c439a", "url": "https://github.com/kiegroup/jbpm/commit/e118343280509172fa6d98cde72d91f5225c439a", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description", "committedDate": "2020-11-27T18:57:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTczNDQ5Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531734493", "bodyText": "Please note that event is fired only if the signal has scope external", "author": "fjtirado", "createdAt": "2020-11-27T19:01:25Z", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.compiler.compiler.xml.XmlDumper;\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.process.instance.impl.util.VariableUtil;\n+import org.jbpm.workflow.core.Node;\n+import org.jbpm.workflow.core.impl.NodeImpl;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.manager.RuntimeManager;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendSignalAction implements Action {\n+\n+    private String signalName;\n+    private String varName;\n+    private boolean isAsync;\n+    private NodeImpl node;\n+\n+    public SendSignalAction(NodeImpl node, String variable, String signalName, boolean isAsync) {\n+        this.node = node;\n+        this.varName = variable;\n+        this.signalName = signalName;\n+        this.isAsync = isAsync;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = kcontext.getVariable(varName);\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode()\n+                .getMetaData().get(\"Transformation\");\n+        if (transformation != null) {\n+            tVariable = new EventTransformerImpl(transformation).transformEvent(tVariable);\n+        }\n+        String signalType = VariableUtil.resolveVariable(isAsync ? \"ASYNC-\" + signalName : signalName, kcontext\n+                .getNodeInstance());\n+        String scope = (String) node.getMetaData(\"customScope\");\n+        if (\"processInstance\".equalsIgnoreCase(scope)) {\n+            kcontext.getProcessInstance().signalEvent(signalType, tVariable);\n+        } else if (\"runtimeManager\".equalsIgnoreCase(scope) || \"project\".equalsIgnoreCase(scope)) {\n+            ((RuntimeManager) kcontext.getKieRuntime().getEnvironment().get(\"RuntimeManager\")).signalEvent(signalType,\n+                    tVariable);\n+        } else if (\"external\".equalsIgnoreCase(scope)) {\n+            ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())", "originalCommit": "e118343280509172fa6d98cde72d91f5225c439a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1NDMxNg==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533954316", "bodyText": "not required. on Signal should be send always. please remove this condition.", "author": "elguardian", "createdAt": "2020-12-02T07:41:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTczNDQ5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3a5cb8a3c6fa0526d574cd7c08e578443372aeca", "chunk": "diff --git a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java\nindex 4cfbd3f44..d67aed8c3 100644\n--- a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java\n+++ b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java\n\n@@ -47,11 +47,12 @@ public class SendSignalAction implements Action {\n \n     @Override\n     public void execute(ProcessContext kcontext) throws Exception {\n-        Object tVariable = kcontext.getVariable(varName);\n+        Object tVariable = null;\n+        if (varName != null) {\n         Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode()\n                 .getMetaData().get(\"Transformation\");\n-        if (transformation != null) {\n-            tVariable = new EventTransformerImpl(transformation).transformEvent(tVariable);\n+            tVariable = transformation != null ? new EventTransformerImpl(transformation).transformEvent(kcontext\n+                    .getVariable(varName)) : kcontext.getVariable(varName);\n         }\n         String signalType = VariableUtil.resolveVariable(isAsync ? \"ASYNC-\" + signalName : signalName, kcontext\n                 .getNodeInstance());\n"}}, {"oid": "3a5cb8a3c6fa0526d574cd7c08e578443372aeca", "url": "https://github.com/kiegroup/jbpm/commit/3a5cb8a3c6fa0526d574cd7c08e578443372aeca", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description", "committedDate": "2020-11-30T09:47:15Z", "type": "forcePushed"}, {"oid": "dc79b82f9e76dec9d720378eb9aff64156db2104", "url": "https://github.com/kiegroup/jbpm/commit/dc79b82f9e76dec9d720378eb9aff64156db2104", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description", "committedDate": "2020-11-30T13:47:11Z", "type": "forcePushed"}, {"oid": "298d9eb908d35d51936ee633953916e2aff97d5c", "url": "https://github.com/kiegroup/jbpm/commit/298d9eb908d35d51936ee633953916e2aff97d5c", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description", "committedDate": "2020-11-30T14:17:51Z", "type": "forcePushed"}, {"oid": "74c6cd4980daaaaf4b348297874d7e8e750c5543", "url": "https://github.com/kiegroup/jbpm/commit/74c6cd4980daaaaf4b348297874d7e8e750c5543", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description", "committedDate": "2020-11-30T17:24:31Z", "type": "forcePushed"}, {"oid": "8f06553e13b55917a826060c81fccc1d71e104e7", "url": "https://github.com/kiegroup/jbpm/commit/8f06553e13b55917a826060c81fccc1d71e104e7", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description", "committedDate": "2020-11-30T17:26:38Z", "type": "forcePushed"}, {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574", "url": "https://github.com/kiegroup/jbpm/commit/87d717118f40fc75e4f26f89ad5c73a9e36ad574", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description", "committedDate": "2020-12-01T10:13:49Z", "type": "commit"}, {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574", "url": "https://github.com/kiegroup/jbpm/commit/87d717118f40fc75e4f26f89ad5c73a9e36ad574", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description", "committedDate": "2020-12-01T10:13:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1NjMyOQ==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533956329", "bodyText": "this transformation is in the wrong place. plz remove", "author": "elguardian", "createdAt": "2020-12-02T07:45:55Z", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.compiler.compiler.xml.XmlDumper;\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.JavaAction;\n+import org.jbpm.workflow.core.Node;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendMessageAction implements JavaAction {\n+\n+    private static final long serialVersionUID = 1L;\n+    private String varName;\n+    private Message message;\n+\n+    public SendMessageAction(String varName, Message message) {\n+        this.varName = varName;\n+        this.message = message;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = VariableResolver.getVariable(kcontext, varName);", "originalCommit": "87d717118f40fc75e4f26f89ad5c73a9e36ad574", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA2MDkwMw==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r534060903", "bodyText": "will be done in a different JIRA", "author": "fjtirado", "createdAt": "2020-12-02T10:31:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1NjMyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "48ecc8a32846c6b3e865f9ab6cc5bb77a04fa485", "chunk": "diff --git a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java\nindex 4fddefcac..1436e5db8 100644\n--- a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java\n+++ b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java\n\n@@ -16,15 +16,12 @@\n \n package org.jbpm.bpmn2.handler;\n \n-import org.drools.compiler.compiler.xml.XmlDumper;\n import org.drools.core.common.InternalKnowledgeRuntime;\n import org.drools.core.process.instance.WorkItemManager;\n import org.drools.core.process.instance.impl.WorkItemImpl;\n import org.jbpm.bpmn2.core.Message;\n-import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n import org.jbpm.process.instance.InternalProcessRuntime;\n import org.jbpm.process.instance.impl.JavaAction;\n-import org.jbpm.workflow.core.Node;\n import org.kie.api.runtime.process.ProcessContext;\n \n public class SendMessageAction implements JavaAction {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1ODYyNw==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533958627", "bodyText": "not required. remove this. duplicated api", "author": "elguardian", "createdAt": "2020-12-02T07:50:54Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/ProcessServiceImpl.java", "diffHunk": "@@ -854,5 +855,26 @@ protected void disposeRuntimeEngine(RuntimeManager manager, RuntimeEngine engine\n \t\tmanager.disposeRuntimeEngine(engine);\n \t}\n \n+    @Override", "originalCommit": "87d717118f40fc75e4f26f89ad5c73a9e36ad574", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "48ecc8a32846c6b3e865f9ab6cc5bb77a04fa485", "chunk": "diff --git a/jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/ProcessServiceImpl.java b/jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/ProcessServiceImpl.java\nindex 40c118406..ea3b1a34c 100644\n--- a/jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/ProcessServiceImpl.java\n+++ b/jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/ProcessServiceImpl.java\n\n@@ -855,26 +854,5 @@ public class ProcessServiceImpl implements ProcessService, VariablesAware {\n \t\tmanager.disposeRuntimeEngine(engine);\n \t}\n \n-    @Override\n-    public void addProcessEventListener(String deploymentId, ProcessEventListener listener) {\n-        DeployedUnit deployedUnit = deploymentService.getDeployedUnit(deploymentId);\n-        if (deployedUnit == null) {\n-            throw new DeploymentNotFoundException(\"No deployments available for \" + deploymentId);\n-        }\n-        if (!deployedUnit.isActive()) {\n-            throw new DeploymentNotActiveException(\"Deployment \" + deploymentId + \" is not active\");\n-        }\n-        deployedUnit.getRuntimeManager().getRuntimeEngine(ProcessInstanceIdContext.get()).getKieSession()\n-                .addEventListener(listener);\n-    }\n-\n-    @Override\n-    public void removeProcessEventListener(String deploymentId, ProcessEventListener listener) {\n-        DeployedUnit deployedUnit = deploymentService.getDeployedUnit(deploymentId);\n-        if (deployedUnit != null) {\n-            deployedUnit.getRuntimeManager().getRuntimeEngine(ProcessInstanceIdContext.get()).getKieSession()\n-                    .removeEventListener(listener);\n-        }\n-    }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1ODc2Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533958766", "bodyText": "remove", "author": "elguardian", "createdAt": "2020-12-02T07:51:11Z", "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "diffHunk": "@@ -498,8 +499,17 @@\n      */\n     public <T> T execute(String deploymentId, Context<?> context, Command<T> command);\n \n+    /**\n+     * Adds a process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void addProcessEventListener(String deploymentId, ProcessEventListener listener);", "originalCommit": "87d717118f40fc75e4f26f89ad5c73a9e36ad574", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "48ecc8a32846c6b3e865f9ab6cc5bb77a04fa485", "chunk": "diff --git a/jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java b/jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java\nindex 7b63df607..627dc2f4c 100644\n--- a/jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java\n+++ b/jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java\n\n@@ -499,17 +498,8 @@ public interface ProcessService {\n      */\n     public <T> T execute(String deploymentId, Context<?> context, Command<T> command);\n \n-    /**\n-     * Adds a process event listener\n-     * @param deploymentId\n-     * @param listener\n-     */\n-    void addProcessEventListener(String deploymentId, ProcessEventListener listener);\n \n-    /**\n-     * Remove process event listener\n-     * @param deploymentId\n-     * @param listener\n-     */\n-    void removeProcessEventListener(String deploymentId, ProcessEventListener listener);\n+\n+\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1ODgxNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533958815", "bodyText": "remove", "author": "elguardian", "createdAt": "2020-12-02T07:51:16Z", "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "diffHunk": "@@ -498,8 +499,17 @@\n      */\n     public <T> T execute(String deploymentId, Context<?> context, Command<T> command);\n \n+    /**\n+     * Adds a process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void addProcessEventListener(String deploymentId, ProcessEventListener listener);\n \n-\n-\n-\n+    /**\n+     * Remove process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void removeProcessEventListener(String deploymentId, ProcessEventListener listener);", "originalCommit": "87d717118f40fc75e4f26f89ad5c73a9e36ad574", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "48ecc8a32846c6b3e865f9ab6cc5bb77a04fa485", "chunk": "diff --git a/jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java b/jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java\nindex 7b63df607..627dc2f4c 100644\n--- a/jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java\n+++ b/jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java\n\n@@ -499,17 +498,8 @@ public interface ProcessService {\n      */\n     public <T> T execute(String deploymentId, Context<?> context, Command<T> command);\n \n-    /**\n-     * Adds a process event listener\n-     * @param deploymentId\n-     * @param listener\n-     */\n-    void addProcessEventListener(String deploymentId, ProcessEventListener listener);\n \n-    /**\n-     * Remove process event listener\n-     * @param deploymentId\n-     * @param listener\n-     */\n-    void removeProcessEventListener(String deploymentId, ProcessEventListener listener);\n+\n+\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1OTMyNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533959325", "bodyText": "remove this. An action is not the place to put dumper logic", "author": "elguardian", "createdAt": "2020-12-02T07:52:15Z", "path": "jbpm-flow/src/main/java/org/jbpm/process/instance/impl/JavaAction.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.instance.impl;\n+\n+import java.io.Serializable;\n+\n+import org.jbpm.workflow.core.Node;\n+\n+public interface JavaAction extends Serializable, Action {\n+\n+    void dumpXML(Node node, StringBuilder xmlDump);", "originalCommit": "87d717118f40fc75e4f26f89ad5c73a9e36ad574", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA1OTg0Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r534059842", "bodyText": "ok, I was trying to force all future writers of a java action to remember they have to provide the dump logic or the engine  will crash at runtime.", "author": "fjtirado", "createdAt": "2020-12-02T10:30:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1OTMyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "48ecc8a32846c6b3e865f9ab6cc5bb77a04fa485", "chunk": "diff --git a/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/JavaAction.java b/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/JavaAction.java\nindex 4432ff0d2..75da6fe69 100644\n--- a/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/JavaAction.java\n+++ b/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/JavaAction.java\n\n@@ -17,9 +17,5 @@ package org.jbpm.process.instance.impl;\n \n import java.io.Serializable;\n \n-import org.jbpm.workflow.core.Node;\n-\n public interface JavaAction extends Serializable, Action {\n-\n-    void dumpXML(Node node, StringBuilder xmlDump);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1OTk0Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533959942", "bodyText": "this logic should be in the incoming input association. you are spreading the logic.\nJust add one item to that (you have the variable plus the transformation it is easy to build in there instead of here).", "author": "elguardian", "createdAt": "2020-12-02T07:53:29Z", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/VariableResolver.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.bpmn2.handler;\n+\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+class VariableResolver {\n+\n+    private VariableResolver() {}\n+\n+    public static Object getVariable(ProcessContext kcontext, String varName) {\n+        Object tVariable = null;", "originalCommit": "87d717118f40fc75e4f26f89ad5c73a9e36ad574", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA1OTA4NA==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r534059084", "bodyText": "since this is just a copy of the current functionality in drools action (which have been translated to Java), that change is out of the scope of this JIRA and will be handled with a different one.", "author": "fjtirado", "createdAt": "2020-12-02T10:29:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1OTk0Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk2MDE4MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533960181", "bodyText": "put this logic in the handler not here.", "author": "elguardian", "createdAt": "2020-12-02T07:54:01Z", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.compiler.compiler.xml.XmlDumper;\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.JavaAction;\n+import org.jbpm.process.instance.impl.util.VariableUtil;\n+import org.jbpm.workflow.core.Node;\n+import org.jbpm.workflow.core.impl.NodeImpl;\n+import org.kie.api.runtime.manager.RuntimeManager;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendSignalAction implements JavaAction {\n+\n+    private static final long serialVersionUID = 1L;\n+    private String signalName;\n+    private String varName;\n+    private boolean isAsync;\n+    private NodeImpl node;\n+\n+    public SendSignalAction(NodeImpl node, String variable, String signalName, boolean isAsync) {\n+        this.node = node;\n+        this.varName = variable;\n+        this.signalName = signalName;\n+        this.isAsync = isAsync;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = VariableResolver.getVariable(kcontext, varName);\n+        String signalType = VariableUtil.resolveVariable(isAsync ? \"ASYNC-\" + signalName : signalName, kcontext\n+                .getNodeInstance());\n+        String scope = (String) node.getMetaData(\"customScope\");\n+        if (\"processInstance\".equalsIgnoreCase(scope)) {\n+            kcontext.getProcessInstance().signalEvent(signalType, tVariable);\n+        } else if (\"runtimeManager\".equalsIgnoreCase(scope) || \"project\".equalsIgnoreCase(scope)) {\n+            ((RuntimeManager) kcontext.getKieRuntime().getEnvironment().get(\"RuntimeManager\")).signalEvent(signalType,\n+                    tVariable);\n+        } else if (\"external\".equalsIgnoreCase(scope)) {\n+            ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())\n+                    .getProcessEventSupport().fireOnSignal(kcontext.getProcessInstance(), kcontext.getNodeInstance(),\n+                            kcontext.getKieRuntime(), signalName, tVariable);\n+            WorkItemImpl workItem = new WorkItemImpl();\n+            workItem.setName(\"External Send Task\");\n+            workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\n+            workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\n+            workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\n+            workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get(\"deploymentId\"));\n+            workItem.setParameter(\"Signal\", signalType);\n+            workItem.setParameter(\"SignalProcessInstanceId\", kcontext.getVariable(\"SignalProcessInstanceId\"));\n+            workItem.setParameter(\"SignalWorkItemId\", kcontext.getVariable(\"SignalWorkItemId\"));\n+            workItem.setParameter(\"SignalDeploymentId\", kcontext.getVariable(\"SignalDeploymentId\"));\n+            if (tVariable != null) {\n+                workItem.setParameter(\"Data\", tVariable);\n+            }\n+            ((WorkItemManager) kcontext.getKieRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\n+        } else {\n+            kcontext.getKieRuntime().signalEvent(signalType, tVariable);\n+        }\n+    }\n+\n+    @Override\n+    public void dumpXML(Node dumpNode, StringBuilder xmlDump) {\n+        final String EOL = System.getProperty(\"line.separator\");", "originalCommit": "87d717118f40fc75e4f26f89ad5c73a9e36ad574", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA1ODI4Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r534058283", "bodyText": "ok", "author": "fjtirado", "createdAt": "2020-12-02T10:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk2MDE4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "48ecc8a32846c6b3e865f9ab6cc5bb77a04fa485", "chunk": "diff --git a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java\nindex 16bb27583..b9cf89e60 100644\n--- a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java\n+++ b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java\n\n@@ -16,15 +16,12 @@\n \n package org.jbpm.bpmn2.handler;\n \n-import org.drools.compiler.compiler.xml.XmlDumper;\n import org.drools.core.common.InternalKnowledgeRuntime;\n import org.drools.core.process.instance.WorkItemManager;\n import org.drools.core.process.instance.impl.WorkItemImpl;\n-import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n import org.jbpm.process.instance.InternalProcessRuntime;\n import org.jbpm.process.instance.impl.JavaAction;\n import org.jbpm.process.instance.impl.util.VariableUtil;\n-import org.jbpm.workflow.core.Node;\n import org.jbpm.workflow.core.impl.NodeImpl;\n import org.kie.api.runtime.manager.RuntimeManager;\n import org.kie.api.runtime.process.ProcessContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk2MDMzMA==", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533960330", "bodyText": "this logic goes to the handler.", "author": "elguardian", "createdAt": "2020-12-02T07:54:17Z", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.compiler.compiler.xml.XmlDumper;\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.JavaAction;\n+import org.jbpm.workflow.core.Node;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendMessageAction implements JavaAction {\n+\n+    private static final long serialVersionUID = 1L;\n+    private String varName;\n+    private Message message;\n+\n+    public SendMessageAction(String varName, Message message) {\n+        this.varName = varName;\n+        this.message = message;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = VariableResolver.getVariable(kcontext, varName);\n+        WorkItemImpl workItem = new WorkItemImpl();\n+        workItem.setName(\"Send Task\");\n+        workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\n+        workItem.setParameter(\"MessageType\", message.getType());\n+        workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\n+        workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\n+        workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get(\"deploymentId\"));\n+        if (tVariable != null) {\n+            workItem.setParameter(\"Message\", tVariable);\n+        }\n+        ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())\n+                .getProcessEventSupport().fireOnMessage(kcontext.getProcessInstance(), kcontext\n+                        .getNodeInstance(), kcontext.getKieRuntime(), message.getName(), tVariable);\n+        ((WorkItemManager) kcontext.getKieRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\n+    }\n+\n+\n+    @Override\n+    public void dumpXML(Node dumpNode, StringBuilder xmlDump) {\n+        final String EOL = System.getProperty(\"line.separator\");", "originalCommit": "87d717118f40fc75e4f26f89ad5c73a9e36ad574", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "48ecc8a32846c6b3e865f9ab6cc5bb77a04fa485", "chunk": "diff --git a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java\nindex 4fddefcac..1436e5db8 100644\n--- a/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java\n+++ b/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java\n\n@@ -16,15 +16,12 @@\n \n package org.jbpm.bpmn2.handler;\n \n-import org.drools.compiler.compiler.xml.XmlDumper;\n import org.drools.core.common.InternalKnowledgeRuntime;\n import org.drools.core.process.instance.WorkItemManager;\n import org.drools.core.process.instance.impl.WorkItemImpl;\n import org.jbpm.bpmn2.core.Message;\n-import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n import org.jbpm.process.instance.InternalProcessRuntime;\n import org.jbpm.process.instance.impl.JavaAction;\n-import org.jbpm.workflow.core.Node;\n import org.kie.api.runtime.process.ProcessContext;\n \n public class SendMessageAction implements JavaAction {\n"}}, {"oid": "48ecc8a32846c6b3e865f9ab6cc5bb77a04fa485", "url": "https://github.com/kiegroup/jbpm/commit/48ecc8a32846c6b3e865f9ab6cc5bb77a04fa485", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nChanges after code review", "committedDate": "2020-12-02T11:52:07Z", "type": "commit"}]}