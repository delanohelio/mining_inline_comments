{"pr_number": 785, "pr_title": "adds shared link downscoping and coverage", "pr_createdAt": "2020-03-23T02:52:17Z", "pr_url": "https://github.com/box/box-java-sdk/pull/785", "timeline": [{"oid": "e6b8e729f5ea1adb229a1b6d30a1875289471733", "url": "https://github.com/box/box-java-sdk/commit/e6b8e729f5ea1adb229a1b6d30a1875289471733", "message": "adds shared link downscoping and coverage", "committedDate": "2020-03-23T01:52:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE5ODY2OQ==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r396198669", "bodyText": "Hey @boxdave since this is a public method adding this will be a breaking change, I think another thing we can do is overload this method and have one that has the original signature and a new one that takes in the new sharedLink parameter", "author": "carycheng", "createdAt": "2020-03-23T03:37:24Z", "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -677,7 +677,7 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n      * @param resource the resource for which the new token has to be obtained\n      * @return scopedToken which has access token and other details\n      */\n-    public ScopedToken getLowerScopedToken(List<String> scopes, String resource) {\n+    public ScopedToken getLowerScopedToken(List<String> scopes, String resource, String sharedLink) {", "originalCommit": "e6b8e729f5ea1adb229a1b6d30a1875289471733", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE5ODk5MA==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r396198990", "bodyText": "getLowerScopedToken(List scopes, String resource) will call into getLowerScopedToken(List scopes, String resource, String sharedLink) by calling something like this: getLowerScopedToken(scopes, resource, null) and we can then move the logic from this current method down into the new overloaded method", "author": "carycheng", "createdAt": "2020-03-23T03:39:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE5ODY2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "54bdc1629bba3815a79af17970ad93bb8e5a2bf5", "chunk": "diff --git a/src/main/java/com/box/sdk/BoxAPIConnection.java b/src/main/java/com/box/sdk/BoxAPIConnection.java\nindex 336df612..cd6b5bb1 100644\n--- a/src/main/java/com/box/sdk/BoxAPIConnection.java\n+++ b/src/main/java/com/box/sdk/BoxAPIConnection.java\n\n@@ -671,13 +672,42 @@ public class BoxAPIConnection {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {\n+\n+        String resourceType = null;\n+\n+        try {\n+            URL validUrl = new URL(resourceLink);\n+            String validURLStr = validUrl.toString();\n+            String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n+            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n+            if (isAPIEndpointMatch) {\n+                System.out.println(validURLStr + \" is valid API endpoint\");\n+                resourceType = \"api endpoint\";\n+            } else {\n+                String sharedLinkPattern = \"(https://.*.box.com/s/.*|https://.*.app.box.com/notes/\\\\d+\\\\?s=.*)\";\n+                boolean isSharedLinkMatch = Pattern.matches(sharedLinkPattern, validURLStr);\n+                if (isSharedLinkMatch) {\n+                    System.out.println(validURLStr + \" is valid shared link\");\n+                    resourceType = \"shared link\";\n+                };\n+            };\n+\n+        } catch (MalformedURLException e) {\n+            System.out.println(resourceLink + \" is not a valid URL\");\n+        };\n+\n+        return resourceType;\n+    }\n+\n     /**\n      * Get a lower-scoped token restricted to a resource for the list of scopes that are passed.\n      * @param scopes the list of scopes to which the new token should be restricted for\n      * @param resource the resource for which the new token has to be obtained\n      * @return scopedToken which has access token and other details\n+     * @throws IllegalArgumentException if resource is not a valid Box API endpoint or shared link\n      */\n-    public ScopedToken getLowerScopedToken(List<String> scopes, String resource, String sharedLink) {\n+    public ScopedToken getLowerScopedToken(List<String> scopes, String resource) {\n         assert (scopes != null);\n         assert (scopes.size() > 0);\n         URL url = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNDgxNg==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r396204816", "bodyText": "will probably have to break this out into two tests - one for the original method and one for the new overloaded method", "author": "carycheng", "createdAt": "2020-03-23T04:11:46Z", "path": "src/test/java/com/box/sdk/BoxAPIConnectionTest.java", "diffHunk": "@@ -569,48 +569,65 @@ public void getLowerScopedTokenRefreshesTheTokenIfNeededbyCallingGetAccessToken(\n         List<String> scopes = new ArrayList<String>();\n         scopes.add(\"DummyScope\");\n         String resource = \"\";\n+        String sharedLink = null;\n \n         when(api.getTokenURL()).thenReturn(\"https://api.box.com/oauth2/token\");\n-        when(api.getLowerScopedToken(scopes, resource)).thenCallRealMethod();\n+        when(api.getLowerScopedToken(scopes, resource, sharedLink)).thenCallRealMethod();", "originalCommit": "e6b8e729f5ea1adb229a1b6d30a1875289471733", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54bdc1629bba3815a79af17970ad93bb8e5a2bf5", "chunk": "diff --git a/src/test/java/com/box/sdk/BoxAPIConnectionTest.java b/src/test/java/com/box/sdk/BoxAPIConnectionTest.java\nindex aad85f10..d8bb8017 100644\n--- a/src/test/java/com/box/sdk/BoxAPIConnectionTest.java\n+++ b/src/test/java/com/box/sdk/BoxAPIConnectionTest.java\n\n@@ -569,12 +569,11 @@ public class BoxAPIConnectionTest {\n         List<String> scopes = new ArrayList<String>();\n         scopes.add(\"DummyScope\");\n         String resource = \"\";\n-        String sharedLink = null;\n \n         when(api.getTokenURL()).thenReturn(\"https://api.box.com/oauth2/token\");\n-        when(api.getLowerScopedToken(scopes, resource, sharedLink)).thenCallRealMethod();\n+        when(api.getLowerScopedToken(scopes, resource)).thenCallRealMethod();\n         try {\n-            api.getLowerScopedToken(scopes, resource, sharedLink);\n+            api.getLowerScopedToken(scopes, resource);\n         } catch (RuntimeException e) {\n             //Ignore it\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNDgzNQ==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r396204835", "bodyText": "same here", "author": "carycheng", "createdAt": "2020-03-23T04:11:53Z", "path": "src/test/java/com/box/sdk/BoxAPIConnectionTest.java", "diffHunk": "@@ -569,48 +569,65 @@ public void getLowerScopedTokenRefreshesTheTokenIfNeededbyCallingGetAccessToken(\n         List<String> scopes = new ArrayList<String>();\n         scopes.add(\"DummyScope\");\n         String resource = \"\";\n+        String sharedLink = null;\n \n         when(api.getTokenURL()).thenReturn(\"https://api.box.com/oauth2/token\");\n-        when(api.getLowerScopedToken(scopes, resource)).thenCallRealMethod();\n+        when(api.getLowerScopedToken(scopes, resource, sharedLink)).thenCallRealMethod();\n         try {\n-            api.getLowerScopedToken(scopes, resource);\n+            api.getLowerScopedToken(scopes, resource, sharedLink);", "originalCommit": "e6b8e729f5ea1adb229a1b6d30a1875289471733", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54bdc1629bba3815a79af17970ad93bb8e5a2bf5", "chunk": "diff --git a/src/test/java/com/box/sdk/BoxAPIConnectionTest.java b/src/test/java/com/box/sdk/BoxAPIConnectionTest.java\nindex aad85f10..d8bb8017 100644\n--- a/src/test/java/com/box/sdk/BoxAPIConnectionTest.java\n+++ b/src/test/java/com/box/sdk/BoxAPIConnectionTest.java\n\n@@ -569,12 +569,11 @@ public class BoxAPIConnectionTest {\n         List<String> scopes = new ArrayList<String>();\n         scopes.add(\"DummyScope\");\n         String resource = \"\";\n-        String sharedLink = null;\n \n         when(api.getTokenURL()).thenReturn(\"https://api.box.com/oauth2/token\");\n-        when(api.getLowerScopedToken(scopes, resource, sharedLink)).thenCallRealMethod();\n+        when(api.getLowerScopedToken(scopes, resource)).thenCallRealMethod();\n         try {\n-            api.getLowerScopedToken(scopes, resource, sharedLink);\n+            api.getLowerScopedToken(scopes, resource);\n         } catch (RuntimeException e) {\n             //Ignore it\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNTIxNg==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r396205216", "bodyText": "I think we can also add a unit test here with the intent to force it down the new if branches in boxapiconnection class. We can just have it return a string but we can assert that request to downscope token has all the parameter in the json body", "author": "carycheng", "createdAt": "2020-03-23T04:13:45Z", "path": "src/test/java/com/box/sdk/BoxAPIConnectionTest.java", "diffHunk": "@@ -569,48 +569,65 @@ public void getLowerScopedTokenRefreshesTheTokenIfNeededbyCallingGetAccessToken(\n         List<String> scopes = new ArrayList<String>();\n         scopes.add(\"DummyScope\");\n         String resource = \"\";\n+        String sharedLink = null;\n \n         when(api.getTokenURL()).thenReturn(\"https://api.box.com/oauth2/token\");\n-        when(api.getLowerScopedToken(scopes, resource)).thenCallRealMethod();\n+        when(api.getLowerScopedToken(scopes, resource, sharedLink)).thenCallRealMethod();\n         try {\n-            api.getLowerScopedToken(scopes, resource);\n+            api.getLowerScopedToken(scopes, resource, sharedLink);\n         } catch (RuntimeException e) {\n             //Ignore it\n         }\n         verify(api).getAccessToken();\n     }\n \n     @Test\n-    @Category(UnitTest.class)\n-    public void getLowerScopedTokenWithNullResource() {\n-        BoxAPIConnection api = mock(BoxAPIConnection.class);\n+    @Category(IntegrationTest.class)\n+    public void getLowerScopedToken() {\n+        final String originalAccessToken = TestConfig.getAccessToken();\n+        BoxAPIConnection api = new BoxAPIConnection(originalAccessToken);\n \n         List<String> scopes = new ArrayList<String>();\n-        scopes.add(\"DummyScope\");\n+        scopes.add(\"item_preview\");\n+        scopes.add(\"item_content_upload\");\n         String resource = null;\n+        String sharedLink = null;\n \n-        when(api.getTokenURL()).thenReturn(\"https://api.box.com/oauth2/token\");\n-        when(api.getLowerScopedToken(scopes, resource)).thenCallRealMethod();\n-        try {\n-            api.getLowerScopedToken(scopes, resource);\n-        } catch (RuntimeException e) {\n-            //Ignore it\n-        }\n-        verify(api).getAccessToken();\n+        ScopedToken token = api.getLowerScopedToken(scopes, resource, sharedLink);\n+        assertThat(token, notNullValue());\n+        assertThat(token.getAccessToken(), notNullValue());\n     }\n \n     @Test\n     @Category(IntegrationTest.class)\n-    public void getLowerScopedTokenWorks() {\n+    public void getLowerScopedTokenForResource() {", "originalCommit": "e6b8e729f5ea1adb229a1b6d30a1875289471733", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54bdc1629bba3815a79af17970ad93bb8e5a2bf5", "chunk": "diff --git a/src/test/java/com/box/sdk/BoxAPIConnectionTest.java b/src/test/java/com/box/sdk/BoxAPIConnectionTest.java\nindex aad85f10..d8bb8017 100644\n--- a/src/test/java/com/box/sdk/BoxAPIConnectionTest.java\n+++ b/src/test/java/com/box/sdk/BoxAPIConnectionTest.java\n\n@@ -569,12 +569,11 @@ public class BoxAPIConnectionTest {\n         List<String> scopes = new ArrayList<String>();\n         scopes.add(\"DummyScope\");\n         String resource = \"\";\n-        String sharedLink = null;\n \n         when(api.getTokenURL()).thenReturn(\"https://api.box.com/oauth2/token\");\n-        when(api.getLowerScopedToken(scopes, resource, sharedLink)).thenCallRealMethod();\n+        when(api.getLowerScopedToken(scopes, resource)).thenCallRealMethod();\n         try {\n-            api.getLowerScopedToken(scopes, resource, sharedLink);\n+            api.getLowerScopedToken(scopes, resource);\n         } catch (RuntimeException e) {\n             //Ignore it\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNTkwNw==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r396205907", "bodyText": "our linter is pretty strict with docstrings so with the overloaded method if you can put a @param sharedLink  it will make then make the linter pass", "author": "carycheng", "createdAt": "2020-03-23T04:17:47Z", "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -677,7 +677,7 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n      * @param resource the resource for which the new token has to be obtained", "originalCommit": "e6b8e729f5ea1adb229a1b6d30a1875289471733", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54bdc1629bba3815a79af17970ad93bb8e5a2bf5", "chunk": "diff --git a/src/main/java/com/box/sdk/BoxAPIConnection.java b/src/main/java/com/box/sdk/BoxAPIConnection.java\nindex 336df612..cd6b5bb1 100644\n--- a/src/main/java/com/box/sdk/BoxAPIConnection.java\n+++ b/src/main/java/com/box/sdk/BoxAPIConnection.java\n\n@@ -671,13 +672,42 @@ public class BoxAPIConnection {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {\n+\n+        String resourceType = null;\n+\n+        try {\n+            URL validUrl = new URL(resourceLink);\n+            String validURLStr = validUrl.toString();\n+            String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n+            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n+            if (isAPIEndpointMatch) {\n+                System.out.println(validURLStr + \" is valid API endpoint\");\n+                resourceType = \"api endpoint\";\n+            } else {\n+                String sharedLinkPattern = \"(https://.*.box.com/s/.*|https://.*.app.box.com/notes/\\\\d+\\\\?s=.*)\";\n+                boolean isSharedLinkMatch = Pattern.matches(sharedLinkPattern, validURLStr);\n+                if (isSharedLinkMatch) {\n+                    System.out.println(validURLStr + \" is valid shared link\");\n+                    resourceType = \"shared link\";\n+                };\n+            };\n+\n+        } catch (MalformedURLException e) {\n+            System.out.println(resourceLink + \" is not a valid URL\");\n+        };\n+\n+        return resourceType;\n+    }\n+\n     /**\n      * Get a lower-scoped token restricted to a resource for the list of scopes that are passed.\n      * @param scopes the list of scopes to which the new token should be restricted for\n      * @param resource the resource for which the new token has to be obtained\n      * @return scopedToken which has access token and other details\n+     * @throws IllegalArgumentException if resource is not a valid Box API endpoint or shared link\n      */\n-    public ScopedToken getLowerScopedToken(List<String> scopes, String resource, String sharedLink) {\n+    public ScopedToken getLowerScopedToken(List<String> scopes, String resource) {\n         assert (scopes != null);\n         assert (scopes.size() > 0);\n         URL url = null;\n"}}, {"oid": "54bdc1629bba3815a79af17970ad93bb8e5a2bf5", "url": "https://github.com/box/box-java-sdk/commit/54bdc1629bba3815a79af17970ad93bb8e5a2bf5", "message": "adds helper for api vs. shared link url. tests failing", "committedDate": "2020-03-29T21:21:08Z", "type": "commit"}, {"oid": "1429f7f624a20b438d2177edde7a0a817f94d942", "url": "https://github.com/box/box-java-sdk/commit/1429f7f624a20b438d2177edde7a0a817f94d942", "message": "git ignore config.json", "committedDate": "2020-04-03T16:18:21Z", "type": "commit"}, {"oid": "21540ee763e01751304997fa0c9597b026e349e6", "url": "https://github.com/box/box-java-sdk/commit/21540ee763e01751304997fa0c9597b026e349e6", "message": "unit tests passing. integration failing", "committedDate": "2020-04-03T16:56:56Z", "type": "commit"}, {"oid": "d680ac093ca8341bced7c01771817b0242ecac2b", "url": "https://github.com/box/box-java-sdk/commit/d680ac093ca8341bced7c01771817b0242ecac2b", "message": "integration test BoxAPIConnectionTest.getLowerScopedTokenWorks failing", "committedDate": "2020-04-03T17:39:18Z", "type": "commit"}, {"oid": "b93682e870ca87c9799c47a893184f656da5f5af", "url": "https://github.com/box/box-java-sdk/commit/b93682e870ca87c9799c47a893184f656da5f5af", "message": "adds method for building scopes list. tests passing", "committedDate": "2020-04-07T17:38:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODMxOQ==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r416158319", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";", "author": "PJSimon", "createdAt": "2020-04-27T21:23:05Z", "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -671,11 +672,52 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {\n+\n+        String resourceType = null;\n+\n+        try {\n+            URL validUrl = new URL(resourceLink);\n+            String validURLStr = validUrl.toString();\n+            String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n+            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n+            if (isAPIEndpointMatch) {\n+                System.out.println(validURLStr + \" is valid API endpoint\");\n+                resourceType = \"api endpoint\";\n+            } else {\n+                String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";", "originalCommit": "b93682e870ca87c9799c47a893184f656da5f5af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODcyMA==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r416158720", "bodyText": "Move this line up, per suggestion...", "author": "PJSimon", "createdAt": "2020-04-27T21:23:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODMxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f7e06e08ee65b8e4249e6ea4868260d1f704907b", "chunk": "diff --git a/src/main/java/com/box/sdk/BoxAPIConnection.java b/src/main/java/com/box/sdk/BoxAPIConnection.java\nindex aab62865..111cdf99 100644\n--- a/src/main/java/com/box/sdk/BoxAPIConnection.java\n+++ b/src/main/java/com/box/sdk/BoxAPIConnection.java\n\n@@ -680,14 +680,12 @@ public class BoxAPIConnection {\n             URL validUrl = new URL(resourceLink);\n             String validURLStr = validUrl.toString();\n             String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n-            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n-            if (isAPIEndpointMatch) {\n+            String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n+            if (Pattern.matches(APIEndpointPattern, validURLStr)) {\n                 System.out.println(validURLStr + \" is valid API endpoint\");\n                 resourceType = \"api endpoint\";\n             } else {\n-                String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n-                boolean isSharedLinkMatch = Pattern.matches(sharedLinkPattern, validURLStr);\n-                if (isSharedLinkMatch) {\n+                if (Pattern.matches(sharedLinkPattern, validURLStr)) {\n                     System.out.println(validURLStr + \" is valid shared link\");\n                     resourceType = \"shared link\";\n                 };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODU0OQ==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r416158549", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n          \n          \n            \n                        String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n          \n          \n            \n                        String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";", "author": "PJSimon", "createdAt": "2020-04-27T21:23:24Z", "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -671,11 +672,52 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {\n+\n+        String resourceType = null;\n+\n+        try {\n+            URL validUrl = new URL(resourceLink);\n+            String validURLStr = validUrl.toString();\n+            String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";", "originalCommit": "b93682e870ca87c9799c47a893184f656da5f5af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7e06e08ee65b8e4249e6ea4868260d1f704907b", "chunk": "diff --git a/src/main/java/com/box/sdk/BoxAPIConnection.java b/src/main/java/com/box/sdk/BoxAPIConnection.java\nindex aab62865..111cdf99 100644\n--- a/src/main/java/com/box/sdk/BoxAPIConnection.java\n+++ b/src/main/java/com/box/sdk/BoxAPIConnection.java\n\n@@ -680,14 +680,12 @@ public class BoxAPIConnection {\n             URL validUrl = new URL(resourceLink);\n             String validURLStr = validUrl.toString();\n             String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n-            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n-            if (isAPIEndpointMatch) {\n+            String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n+            if (Pattern.matches(APIEndpointPattern, validURLStr)) {\n                 System.out.println(validURLStr + \" is valid API endpoint\");\n                 resourceType = \"api endpoint\";\n             } else {\n-                String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n-                boolean isSharedLinkMatch = Pattern.matches(sharedLinkPattern, validURLStr);\n-                if (isSharedLinkMatch) {\n+                if (Pattern.matches(sharedLinkPattern, validURLStr)) {\n                     System.out.println(validURLStr + \" is valid shared link\");\n                     resourceType = \"shared link\";\n                 };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1OTIxMg==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r416159212", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            boolean isSharedLinkMatch = Pattern.matches(sharedLinkPattern, validURLStr);", "author": "PJSimon", "createdAt": "2020-04-27T21:24:28Z", "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -671,11 +672,52 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {\n+\n+        String resourceType = null;\n+\n+        try {\n+            URL validUrl = new URL(resourceLink);\n+            String validURLStr = validUrl.toString();\n+            String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n+            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n+            if (isAPIEndpointMatch) {\n+                System.out.println(validURLStr + \" is valid API endpoint\");\n+                resourceType = \"api endpoint\";\n+            } else {\n+                String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n+                boolean isSharedLinkMatch = Pattern.matches(sharedLinkPattern, validURLStr);", "originalCommit": "b93682e870ca87c9799c47a893184f656da5f5af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7e06e08ee65b8e4249e6ea4868260d1f704907b", "chunk": "diff --git a/src/main/java/com/box/sdk/BoxAPIConnection.java b/src/main/java/com/box/sdk/BoxAPIConnection.java\nindex aab62865..111cdf99 100644\n--- a/src/main/java/com/box/sdk/BoxAPIConnection.java\n+++ b/src/main/java/com/box/sdk/BoxAPIConnection.java\n\n@@ -680,14 +680,12 @@ public class BoxAPIConnection {\n             URL validUrl = new URL(resourceLink);\n             String validURLStr = validUrl.toString();\n             String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n-            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n-            if (isAPIEndpointMatch) {\n+            String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n+            if (Pattern.matches(APIEndpointPattern, validURLStr)) {\n                 System.out.println(validURLStr + \" is valid API endpoint\");\n                 resourceType = \"api endpoint\";\n             } else {\n-                String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n-                boolean isSharedLinkMatch = Pattern.matches(sharedLinkPattern, validURLStr);\n-                if (isSharedLinkMatch) {\n+                if (Pattern.matches(sharedLinkPattern, validURLStr)) {\n                     System.out.println(validURLStr + \" is valid shared link\");\n                     resourceType = \"shared link\";\n                 };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1OTMyOQ==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r416159329", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (isSharedLinkMatch) {\n          \n          \n            \n                            if (Pattern.matches(sharedLinkPattern, validURLStr)) {", "author": "PJSimon", "createdAt": "2020-04-27T21:24:41Z", "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -671,11 +672,52 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {\n+\n+        String resourceType = null;\n+\n+        try {\n+            URL validUrl = new URL(resourceLink);\n+            String validURLStr = validUrl.toString();\n+            String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n+            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n+            if (isAPIEndpointMatch) {\n+                System.out.println(validURLStr + \" is valid API endpoint\");\n+                resourceType = \"api endpoint\";\n+            } else {\n+                String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n+                boolean isSharedLinkMatch = Pattern.matches(sharedLinkPattern, validURLStr);\n+                if (isSharedLinkMatch) {", "originalCommit": "b93682e870ca87c9799c47a893184f656da5f5af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7e06e08ee65b8e4249e6ea4868260d1f704907b", "chunk": "diff --git a/src/main/java/com/box/sdk/BoxAPIConnection.java b/src/main/java/com/box/sdk/BoxAPIConnection.java\nindex aab62865..111cdf99 100644\n--- a/src/main/java/com/box/sdk/BoxAPIConnection.java\n+++ b/src/main/java/com/box/sdk/BoxAPIConnection.java\n\n@@ -680,14 +680,12 @@ public class BoxAPIConnection {\n             URL validUrl = new URL(resourceLink);\n             String validURLStr = validUrl.toString();\n             String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n-            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n-            if (isAPIEndpointMatch) {\n+            String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n+            if (Pattern.matches(APIEndpointPattern, validURLStr)) {\n                 System.out.println(validURLStr + \" is valid API endpoint\");\n                 resourceType = \"api endpoint\";\n             } else {\n-                String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n-                boolean isSharedLinkMatch = Pattern.matches(sharedLinkPattern, validURLStr);\n-                if (isSharedLinkMatch) {\n+                if (Pattern.matches(sharedLinkPattern, validURLStr)) {\n                     System.out.println(validURLStr + \" is valid shared link\");\n                     resourceType = \"shared link\";\n                 };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1OTYxNQ==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r416159615", "bodyText": "Make enumerated data type.", "author": "PJSimon", "createdAt": "2020-04-27T21:25:13Z", "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -671,11 +672,52 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {\n+\n+        String resourceType = null;", "originalCommit": "b93682e870ca87c9799c47a893184f656da5f5af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5NjEwMg==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r421696102", "bodyText": "@sujaygarlanka This is the enum I mentioned im looking for feedback on.", "author": "dtrodger", "createdAt": "2020-05-07T18:08:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1OTYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NTg0MQ==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r435595841", "bodyText": "Per discussion, you can put the enum in this class", "author": "PJSimon", "createdAt": "2020-06-04T22:53:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1OTYxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f7e06e08ee65b8e4249e6ea4868260d1f704907b", "chunk": "diff --git a/src/main/java/com/box/sdk/BoxAPIConnection.java b/src/main/java/com/box/sdk/BoxAPIConnection.java\nindex aab62865..111cdf99 100644\n--- a/src/main/java/com/box/sdk/BoxAPIConnection.java\n+++ b/src/main/java/com/box/sdk/BoxAPIConnection.java\n\n@@ -680,14 +680,12 @@ public class BoxAPIConnection {\n             URL validUrl = new URL(resourceLink);\n             String validURLStr = validUrl.toString();\n             String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n-            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n-            if (isAPIEndpointMatch) {\n+            String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n+            if (Pattern.matches(APIEndpointPattern, validURLStr)) {\n                 System.out.println(validURLStr + \" is valid API endpoint\");\n                 resourceType = \"api endpoint\";\n             } else {\n-                String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n-                boolean isSharedLinkMatch = Pattern.matches(sharedLinkPattern, validURLStr);\n-                if (isSharedLinkMatch) {\n+                if (Pattern.matches(sharedLinkPattern, validURLStr)) {\n                     System.out.println(validURLStr + \" is valid shared link\");\n                     resourceType = \"shared link\";\n                 };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1OTg3Nw==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r416159877", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);", "author": "PJSimon", "createdAt": "2020-04-27T21:25:37Z", "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -671,11 +672,52 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {\n+\n+        String resourceType = null;\n+\n+        try {\n+            URL validUrl = new URL(resourceLink);\n+            String validURLStr = validUrl.toString();\n+            String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n+            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);", "originalCommit": "b93682e870ca87c9799c47a893184f656da5f5af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7e06e08ee65b8e4249e6ea4868260d1f704907b", "chunk": "diff --git a/src/main/java/com/box/sdk/BoxAPIConnection.java b/src/main/java/com/box/sdk/BoxAPIConnection.java\nindex aab62865..111cdf99 100644\n--- a/src/main/java/com/box/sdk/BoxAPIConnection.java\n+++ b/src/main/java/com/box/sdk/BoxAPIConnection.java\n\n@@ -680,14 +680,12 @@ public class BoxAPIConnection {\n             URL validUrl = new URL(resourceLink);\n             String validURLStr = validUrl.toString();\n             String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n-            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n-            if (isAPIEndpointMatch) {\n+            String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n+            if (Pattern.matches(APIEndpointPattern, validURLStr)) {\n                 System.out.println(validURLStr + \" is valid API endpoint\");\n                 resourceType = \"api endpoint\";\n             } else {\n-                String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n-                boolean isSharedLinkMatch = Pattern.matches(sharedLinkPattern, validURLStr);\n-                if (isSharedLinkMatch) {\n+                if (Pattern.matches(sharedLinkPattern, validURLStr)) {\n                     System.out.println(validURLStr + \" is valid shared link\");\n                     resourceType = \"shared link\";\n                 };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1OTk3Ng==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r416159976", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (isAPIEndpointMatch) {\n          \n          \n            \n                        if (Pattern.matches(APIEndpointPattern, validURLStr)) {", "author": "PJSimon", "createdAt": "2020-04-27T21:25:50Z", "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -671,11 +672,52 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {\n+\n+        String resourceType = null;\n+\n+        try {\n+            URL validUrl = new URL(resourceLink);\n+            String validURLStr = validUrl.toString();\n+            String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n+            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n+            if (isAPIEndpointMatch) {", "originalCommit": "b93682e870ca87c9799c47a893184f656da5f5af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7e06e08ee65b8e4249e6ea4868260d1f704907b", "chunk": "diff --git a/src/main/java/com/box/sdk/BoxAPIConnection.java b/src/main/java/com/box/sdk/BoxAPIConnection.java\nindex aab62865..111cdf99 100644\n--- a/src/main/java/com/box/sdk/BoxAPIConnection.java\n+++ b/src/main/java/com/box/sdk/BoxAPIConnection.java\n\n@@ -680,14 +680,12 @@ public class BoxAPIConnection {\n             URL validUrl = new URL(resourceLink);\n             String validURLStr = validUrl.toString();\n             String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n-            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n-            if (isAPIEndpointMatch) {\n+            String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n+            if (Pattern.matches(APIEndpointPattern, validURLStr)) {\n                 System.out.println(validURLStr + \" is valid API endpoint\");\n                 resourceType = \"api endpoint\";\n             } else {\n-                String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n-                boolean isSharedLinkMatch = Pattern.matches(sharedLinkPattern, validURLStr);\n-                if (isSharedLinkMatch) {\n+                if (Pattern.matches(sharedLinkPattern, validURLStr)) {\n                     System.out.println(validURLStr + \" is valid shared link\");\n                     resourceType = \"shared link\";\n                 };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5MTA1Mw==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r417491053", "bodyText": "[nit] I generally like to put private methods below the methods that they are called from, within the class, and also with other private methods, if it makes sense.", "author": "PJSimon", "createdAt": "2020-04-29T17:34:28Z", "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -671,11 +672,52 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {\n+\n+        String resourceType = null;\n+\n+        try {\n+            URL validUrl = new URL(resourceLink);\n+            String validURLStr = validUrl.toString();\n+            String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n+            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n+            if (isAPIEndpointMatch) {\n+                System.out.println(validURLStr + \" is valid API endpoint\");\n+                resourceType = \"api endpoint\";\n+            } else {\n+                String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n+                boolean isSharedLinkMatch = Pattern.matches(sharedLinkPattern, validURLStr);\n+                if (isSharedLinkMatch) {\n+                    System.out.println(validURLStr + \" is valid shared link\");\n+                    resourceType = \"shared link\";\n+                };\n+            };\n+\n+        } catch (MalformedURLException e) {\n+            System.out.println(resourceLink + \" is not a valid URL\");\n+        };\n+\n+        return resourceType;\n+    }\n+\n+    private StringBuilder buildScopesForTokenDownscoping(List<String> scopes) {", "originalCommit": "b93682e870ca87c9799c47a893184f656da5f5af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7e06e08ee65b8e4249e6ea4868260d1f704907b", "chunk": "diff --git a/src/main/java/com/box/sdk/BoxAPIConnection.java b/src/main/java/com/box/sdk/BoxAPIConnection.java\nindex aab62865..111cdf99 100644\n--- a/src/main/java/com/box/sdk/BoxAPIConnection.java\n+++ b/src/main/java/com/box/sdk/BoxAPIConnection.java\n\n@@ -680,14 +680,12 @@ public class BoxAPIConnection {\n             URL validUrl = new URL(resourceLink);\n             String validURLStr = validUrl.toString();\n             String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n-            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n-            if (isAPIEndpointMatch) {\n+            String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n+            if (Pattern.matches(APIEndpointPattern, validURLStr)) {\n                 System.out.println(validURLStr + \" is valid API endpoint\");\n                 resourceType = \"api endpoint\";\n             } else {\n-                String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n-                boolean isSharedLinkMatch = Pattern.matches(sharedLinkPattern, validURLStr);\n-                if (isSharedLinkMatch) {\n+                if (Pattern.matches(sharedLinkPattern, validURLStr)) {\n                     System.out.println(validURLStr + \" is valid shared link\");\n                     resourceType = \"shared link\";\n                 };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5MTQyMg==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r417491422", "bodyText": "[nit] I generally like to put private methods below the methods that they are called from, within the class, and also with other private methods, if it makes sense.", "author": "PJSimon", "createdAt": "2020-04-29T17:35:06Z", "path": "src/main/java/com/box/sdk/BoxAPIConnection.java", "diffHunk": "@@ -671,11 +672,52 @@ public void setRequestInterceptor(RequestInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n \n+    private String determineResourceLinkType(String resourceLink) {", "originalCommit": "b93682e870ca87c9799c47a893184f656da5f5af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7e06e08ee65b8e4249e6ea4868260d1f704907b", "chunk": "diff --git a/src/main/java/com/box/sdk/BoxAPIConnection.java b/src/main/java/com/box/sdk/BoxAPIConnection.java\nindex aab62865..111cdf99 100644\n--- a/src/main/java/com/box/sdk/BoxAPIConnection.java\n+++ b/src/main/java/com/box/sdk/BoxAPIConnection.java\n\n@@ -680,14 +680,12 @@ public class BoxAPIConnection {\n             URL validUrl = new URL(resourceLink);\n             String validURLStr = validUrl.toString();\n             String APIEndpointPattern = \"https://api.box.com/2.0/files/\\\\d+\";\n-            boolean isAPIEndpointMatch = Pattern.matches(APIEndpointPattern, validURLStr);\n-            if (isAPIEndpointMatch) {\n+            String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n+            if (Pattern.matches(APIEndpointPattern, validURLStr)) {\n                 System.out.println(validURLStr + \" is valid API endpoint\");\n                 resourceType = \"api endpoint\";\n             } else {\n-                String sharedLinkPattern = \"(.*box.com/s/.*|.*box.com.*s=.*)\";\n-                boolean isSharedLinkMatch = Pattern.matches(sharedLinkPattern, validURLStr);\n-                if (isSharedLinkMatch) {\n+                if (Pattern.matches(sharedLinkPattern, validURLStr)) {\n                     System.out.println(validURLStr + \" is valid shared link\");\n                     resourceType = \"shared link\";\n                 };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1MzMyOQ==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r418253329", "bodyText": "Why did you change this?", "author": "PJSimon", "createdAt": "2020-04-30T19:56:13Z", "path": "src/test/java/com/box/sdk/BoxAPIConnectionTest.java", "diffHunk": "@@ -563,12 +560,12 @@ public void appUsersManuallyPaginatesCorrectly() throws IOException {\n \n     @Test\n     @Category(UnitTest.class)\n-    public void getLowerScopedTokenRefreshesTheTokenIfNeededbyCallingGetAccessToken() {\n+    public void getLowerScopedTokenWithNullResource() {\n         BoxAPIConnection api = mock(BoxAPIConnection.class);\n \n         List<String> scopes = new ArrayList<String>();\n-        scopes.add(\"DummyScope\");\n-        String resource = \"\";\n+        scopes.add(\"item_preview\");", "originalCommit": "b93682e870ca87c9799c47a893184f656da5f5af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2506429a48ffd0384d673a43cc93307790d3609", "chunk": "diff --git a/src/test/java/com/box/sdk/BoxAPIConnectionTest.java b/src/test/java/com/box/sdk/BoxAPIConnectionTest.java\nindex 932e4b81..1e902778 100644\n--- a/src/test/java/com/box/sdk/BoxAPIConnectionTest.java\n+++ b/src/test/java/com/box/sdk/BoxAPIConnectionTest.java\n\n@@ -560,7 +578,7 @@ public class BoxAPIConnectionTest {\n \n     @Test\n     @Category(UnitTest.class)\n-    public void getLowerScopedTokenWithNullResource() {\n+    public void getLowerScopedTokenRefreshesTheTokenIfNeededbyCallingGetAccessToken() {\n         BoxAPIConnection api = mock(BoxAPIConnection.class);\n \n         List<String> scopes = new ArrayList<String>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NDcwNg==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r418254706", "bodyText": "Currently (on master), we have a two similar tests:\n\ngetLowerScopedTokenRefreshesTheTokenIfNeededbyCallingGetAccessToken, which sets String resource = \"\";\ngetLowerScopedTokenWithNullResource, which sets String resource = null;\nShould we still have tests for each value?  If so, would you mind parameterizing the resource string and consolidate the two tests into one method that's called twice from another method?", "author": "PJSimon", "createdAt": "2020-04-30T19:58:56Z", "path": "src/test/java/com/box/sdk/BoxAPIConnectionTest.java", "diffHunk": "@@ -563,12 +560,12 @@ public void appUsersManuallyPaginatesCorrectly() throws IOException {\n \n     @Test\n     @Category(UnitTest.class)\n-    public void getLowerScopedTokenRefreshesTheTokenIfNeededbyCallingGetAccessToken() {\n+    public void getLowerScopedTokenWithNullResource() {\n         BoxAPIConnection api = mock(BoxAPIConnection.class);\n \n         List<String> scopes = new ArrayList<String>();\n-        scopes.add(\"DummyScope\");\n-        String resource = \"\";\n+        scopes.add(\"item_preview\");\n+        String resource = null;", "originalCommit": "b93682e870ca87c9799c47a893184f656da5f5af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2506429a48ffd0384d673a43cc93307790d3609", "chunk": "diff --git a/src/test/java/com/box/sdk/BoxAPIConnectionTest.java b/src/test/java/com/box/sdk/BoxAPIConnectionTest.java\nindex 932e4b81..1e902778 100644\n--- a/src/test/java/com/box/sdk/BoxAPIConnectionTest.java\n+++ b/src/test/java/com/box/sdk/BoxAPIConnectionTest.java\n\n@@ -560,7 +578,7 @@ public class BoxAPIConnectionTest {\n \n     @Test\n     @Category(UnitTest.class)\n-    public void getLowerScopedTokenWithNullResource() {\n+    public void getLowerScopedTokenRefreshesTheTokenIfNeededbyCallingGetAccessToken() {\n         BoxAPIConnection api = mock(BoxAPIConnection.class);\n \n         List<String> scopes = new ArrayList<String>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NjM4MQ==", "url": "https://github.com/box/box-java-sdk/pull/785#discussion_r418256381", "bodyText": "Actually, you can combine the following methods into one method, if you parameterize the resource string:\n\ngetLowerScopedTokenForAPIEndpointResource\ngetLowerScopedTokenForSharedLinkResource\ngetLowerScopedTokenForNoteSharedLinkResource", "author": "PJSimon", "createdAt": "2020-04-30T20:02:21Z", "path": "src/test/java/com/box/sdk/BoxAPIConnectionTest.java", "diffHunk": "@@ -582,17 +579,56 @@ public void getLowerScopedTokenRefreshesTheTokenIfNeededbyCallingGetAccessToken(\n \n     @Test\n     @Category(UnitTest.class)\n-    public void getLowerScopedTokenWithNullResource() {\n+    public void getLowerScopedTokenForAPIEndpointResource() {", "originalCommit": "b93682e870ca87c9799c47a893184f656da5f5af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2506429a48ffd0384d673a43cc93307790d3609", "chunk": "diff --git a/src/test/java/com/box/sdk/BoxAPIConnectionTest.java b/src/test/java/com/box/sdk/BoxAPIConnectionTest.java\nindex 932e4b81..1e902778 100644\n--- a/src/test/java/com/box/sdk/BoxAPIConnectionTest.java\n+++ b/src/test/java/com/box/sdk/BoxAPIConnectionTest.java\n\n@@ -579,60 +597,29 @@ public class BoxAPIConnectionTest {\n \n     @Test\n     @Category(UnitTest.class)\n-    public void getLowerScopedTokenForAPIEndpointResource() {\n-        BoxAPIConnection api = mock(BoxAPIConnection.class);\n-\n-        List<String> scopes = new ArrayList<String>();\n-        scopes.add(\"item_preview\");\n-        String APIEndpointResource = \"https://api.box.com/2.0/files/135906984991\";\n-\n-        when(api.getTokenURL()).thenReturn(\"https://api.box.com/oauth2/token\");\n-        when(api.getLowerScopedToken(scopes, APIEndpointResource)).thenCallRealMethod();\n-        try {\n-            api.getLowerScopedToken(scopes, APIEndpointResource);\n-        } catch (RuntimeException e) {\n-            //Ignore it\n-        }\n-        verify(api).getAccessToken();\n-    }\n-\n-    @Test\n-    @Category(UnitTest.class)\n-    public void getLowerScopedTokenForSharedLinkResource() {\n-        BoxAPIConnection api = mock(BoxAPIConnection.class);\n-\n-        List<String> scopes = new ArrayList<String>();\n-        scopes.add(\"item_preview\");\n-\n-        String sharedLinkResource = \"https://rungaia.box.com/s/68c1cewvxas7orqmobakg17o61bfrkcu\";\n-\n-        when(api.getTokenURL()).thenReturn(\"https://api.box.com/oauth2/token\");\n-        when(api.getLowerScopedToken(scopes, sharedLinkResource)).thenCallRealMethod();\n-        try {\n-            api.getLowerScopedToken(scopes, sharedLinkResource);\n-        } catch (RuntimeException e) {\n-            //Ignore it\n-        }\n-        verify(api).getAccessToken();\n-    }\n-\n-    @Test\n-    @Category(UnitTest.class)\n-    public void getLowerScopedTokenForNoteSharedLinkResource() {\n+    public void checkAllResourceLinkTypes() {\n+        this.getResourceLinkTypeFromURLString(\n+            \"https://api.box.com/2.0/files/1234567890\", ResourceLinkType.APIEndpoint);\n+        this.getResourceLinkTypeFromURLString(\n+            \"https://example.box.com/s/qwertyuiop1234567890asdfghjkl\", ResourceLinkType.SharedLink);\n+        this.getResourceLinkTypeFromURLString(\n+            \"https://example.app.box.com/notes/09876321?s=zxcvm123458asdf\", ResourceLinkType.SharedLink);\n+        this.getResourceLinkTypeFromURLString(\n+            null, ResourceLinkType.Unknown);\n+        this.getResourceLinkTypeFromURLString(\n+            \"\", ResourceLinkType.Unknown);\n+        this.getResourceLinkTypeFromURLString(\n+            \"qwertyuiopasdfghjklzxcvbnm1234567890\", ResourceLinkType.Unknown);\n+    }\n+\n+    private void getResourceLinkTypeFromURLString(String resource, ResourceLinkType resourceLinkType) {\n         BoxAPIConnection api = mock(BoxAPIConnection.class);\n+        when(api.determineResourceLinkType(resource))\n+            .thenReturn(resourceLinkType);\n \n-        List<String> scopes = new ArrayList<String>();\n-        scopes.add(\"item_preview\");\n-        String noteSharedLinkResource = \"https://rungaia.app.box.com/notes/643001418459?s=68c1cewvxas7orqmobakg17o61bfrkcu\\n\";\n+        ResourceLinkType actualResourceLinkType = api.determineResourceLinkType(resource);\n \n-        when(api.getTokenURL()).thenReturn(\"https://api.box.com/oauth2/token\");\n-        when(api.getLowerScopedToken(scopes, noteSharedLinkResource)).thenCallRealMethod();\n-        try {\n-            api.getLowerScopedToken(scopes, noteSharedLinkResource);\n-        } catch (RuntimeException e) {\n-            //Ignore it\n-        }\n-        verify(api).getAccessToken();\n+        Assert.assertEquals(actualResourceLinkType, resourceLinkType);\n     }\n \n     @Test\n"}}, {"oid": "f7e06e08ee65b8e4249e6ea4868260d1f704907b", "url": "https://github.com/box/box-java-sdk/commit/f7e06e08ee65b8e4249e6ea4868260d1f704907b", "message": "Apply suggestions from code review", "committedDate": "2020-06-04T23:00:24Z", "type": "commit"}, {"oid": "950d94aaac2ac87d018c6214646280c778b6e465", "url": "https://github.com/box/box-java-sdk/commit/950d94aaac2ac87d018c6214646280c778b6e465", "message": "Merge branch 'master' into feature/shared-link-downscoping", "committedDate": "2020-06-12T22:27:07Z", "type": "commit"}, {"oid": "b2506429a48ffd0384d673a43cc93307790d3609", "url": "https://github.com/box/box-java-sdk/commit/b2506429a48ffd0384d673a43cc93307790d3609", "message": "Add enum type, update tests, refactoring", "committedDate": "2020-06-13T04:45:23Z", "type": "commit"}, {"oid": "2a2f0d4f6fa3cf60e1eda9ca92cbc716e04c795e", "url": "https://github.com/box/box-java-sdk/commit/2a2f0d4f6fa3cf60e1eda9ca92cbc716e04c795e", "message": "Fix test", "committedDate": "2020-06-15T18:13:20Z", "type": "commit"}, {"oid": "dbbca4bf4cb1cb9b89e3a2379e15234754a3c28b", "url": "https://github.com/box/box-java-sdk/commit/dbbca4bf4cb1cb9b89e3a2379e15234754a3c28b", "message": "Fix test", "committedDate": "2020-06-15T18:15:02Z", "type": "commit"}]}