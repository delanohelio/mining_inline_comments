{"pr_number": 781, "pr_title": "Check that part was successfully uploaded for large file uploads before retrying for 500 errors", "pr_createdAt": "2020-03-11T00:08:35Z", "pr_url": "https://github.com/box/box-java-sdk/pull/781", "timeline": [{"oid": "515a143f33b0a2a33706ea8d078b4ea21dcaa85b", "url": "https://github.com/box/box-java-sdk/commit/515a143f33b0a2a33706ea8d078b4ea21dcaa85b", "message": "wip", "committedDate": "2020-03-03T00:16:53Z", "type": "commit"}, {"oid": "3551585bcac80eea3497414648cf72b13aaf2ba9", "url": "https://github.com/box/box-java-sdk/commit/3551585bcac80eea3497414648cf72b13aaf2ba9", "message": "wip", "committedDate": "2020-03-10T18:13:01Z", "type": "commit"}, {"oid": "36deaff3518e816036c3a09ffd04fd0f3ec4a33f", "url": "https://github.com/box/box-java-sdk/commit/36deaff3518e816036c3a09ffd04fd0f3ec4a33f", "message": "tests working", "committedDate": "2020-03-11T00:06:04Z", "type": "commit"}, {"oid": "7b7ffba310fae8112b269e88b7914410b8ce28bb", "url": "https://github.com/box/box-java-sdk/commit/7b7ffba310fae8112b269e88b7914410b8ce28bb", "message": "Merge branch 'master' into 416-error-issue", "committedDate": "2020-03-11T00:09:06Z", "type": "commit"}, {"oid": "1aa4984ac5d7e64d43d7233d197bf695de2ec634", "url": "https://github.com/box/box-java-sdk/commit/1aa4984ac5d7e64d43d7233d197bf695de2ec634", "message": "Update CHANGELOG.md", "committedDate": "2020-03-11T00:20:36Z", "type": "commit"}, {"oid": "d918926ea98c00615804bbac5a135ba2faa1b9de", "url": "https://github.com/box/box-java-sdk/commit/d918926ea98c00615804bbac5a135ba2faa1b9de", "message": "fix checkstyle issues", "committedDate": "2020-03-11T00:43:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjcxOQ==", "url": "https://github.com/box/box-java-sdk/pull/781#discussion_r391412719", "bodyText": "If we don't want to expose this method and it's only meant for internal package use only for chunked upload we should consider different modifier, maybe default or protected?", "author": "carycheng", "createdAt": "2020-03-12T05:48:05Z", "path": "src/main/java/com/box/sdk/BoxAPIRequest.java", "diffHunk": "@@ -404,6 +405,66 @@ public BoxAPIResponse send(ProgressListener listener) {\n         throw new RuntimeException();\n     }\n \n+    /**\n+      * Sends a request to upload a file part and returns a BoxFileUploadSessionPart containing information\n+      * about the upload part. This method is separate from send() because it has custom retry logic.\n+      *\n+      * <p>If the server returns an error code or if a network error occurs, then the request will be automatically\n+      * retried. If the maximum number of retries is reached and an error still occurs, then a {@link BoxAPIException}\n+      * will be thrown.</p>\n+      *\n+      * @param session The BoxFileUploadSession uploading the part\n+      * @param offset Offset of the part being uploaded\n+      * @throws BoxAPIException if the server returns an error code or if a network error occurs.\n+      * @return A {@link BoxFileUploadSessionPart} part that has been uploaded.\n+      */\n+    public BoxFileUploadSessionPart sendForUploadPart(BoxFileUploadSession session, long offset) {", "originalCommit": "d918926ea98c00615804bbac5a135ba2faa1b9de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c4f86e1d9fe9c4143571da19605a3935927f224", "chunk": "diff --git a/src/main/java/com/box/sdk/BoxAPIRequest.java b/src/main/java/com/box/sdk/BoxAPIRequest.java\nindex 809409ed..7c52c324 100644\n--- a/src/main/java/com/box/sdk/BoxAPIRequest.java\n+++ b/src/main/java/com/box/sdk/BoxAPIRequest.java\n\n@@ -418,7 +418,7 @@ public class BoxAPIRequest {\n       * @throws BoxAPIException if the server returns an error code or if a network error occurs.\n       * @return A {@link BoxFileUploadSessionPart} part that has been uploaded.\n       */\n-    public BoxFileUploadSessionPart sendForUploadPart(BoxFileUploadSession session, long offset) {\n+    protected BoxFileUploadSessionPart sendForUploadPart(BoxFileUploadSession session, long offset) {\n         if (this.api == null) {\n             this.backoffCounter.reset(BoxGlobalSettings.getMaxRequestAttempts());\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMzQwMA==", "url": "https://github.com/box/box-java-sdk/pull/781#discussion_r391413400", "bodyText": "What's the status code for this post to be returned?", "author": "carycheng", "createdAt": "2020-03-12T05:51:03Z", "path": "src/test/java/com/box/sdk/BoxFileTest.java", "diffHunk": "@@ -1891,6 +1891,163 @@ public void testSetMetadataReturnsCorrectly() throws IOException {\n         Assert.assertEquals(\"text\", metadataValues.getString(\"/test\"));\n     }\n \n+    @Test\n+    @Category(UnitTest.class)\n+    public void testChunkedUploadWith500Error() throws IOException, InterruptedException {\n+        String responseBody500 = TestConfig.getFixture(\"BoxException/BoxResponseException500\");\n+        String sessionResult = \"\";\n+        String partsResult = \"\";\n+        String commitResult = \"\";\n+        final String sessionURL = \"/files/upload_sessions\";\n+        final String uploadURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658\";\n+        final String listPartsURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/parts\";\n+        final String commitURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/commit\";\n+\n+        FakeStream stream = new FakeStream(\"aaaaa\");\n+\n+        sessionResult = TestConfig.getFixture(\"BoxFile/CreateUploadSession201\");\n+        partsResult = TestConfig.getFixture(\"BoxFile/ListUploadedPart200\");\n+        commitResult = TestConfig.getFixture(\"BoxFile/CommitUpload201\");\n+\n+        JsonObject sessionObject = new JsonObject()\n+                .add(\"folder_id\", \"12345\")\n+                .add(\"file_size\", 5)\n+                .add(\"file_name\", \"testfile.txt\");\n+\n+        JsonObject partOne = new JsonObject()\n+                .add(\"part_id\", \"CFEB5BA9\")\n+                .add(\"offset\", 0)\n+                .add(\"size\", 5);\n+\n+        JsonArray parts = new JsonArray()\n+                .add(partOne);\n+\n+        JsonObject commitObject = new JsonObject()\n+                .add(\"parts\", parts);\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(sessionURL))\n+                .withRequestBody(WireMock.equalToJson(sessionObject.toString()))\n+                .willReturn(WireMock.aResponse()\n+                        .withHeader(\"Content-Type\", \"application/json\")\n+                        .withBody(sessionResult)));", "originalCommit": "d918926ea98c00615804bbac5a135ba2faa1b9de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c4f86e1d9fe9c4143571da19605a3935927f224", "chunk": "diff --git a/src/test/java/com/box/sdk/BoxFileTest.java b/src/test/java/com/box/sdk/BoxFileTest.java\nindex 2028e3e2..069fba3b 100644\n--- a/src/test/java/com/box/sdk/BoxFileTest.java\n+++ b/src/test/java/com/box/sdk/BoxFileTest.java\n\n@@ -1891,163 +1891,6 @@ public class BoxFileTest {\n         Assert.assertEquals(\"text\", metadataValues.getString(\"/test\"));\n     }\n \n-    @Test\n-    @Category(UnitTest.class)\n-    public void testChunkedUploadWith500Error() throws IOException, InterruptedException {\n-        String responseBody500 = TestConfig.getFixture(\"BoxException/BoxResponseException500\");\n-        String sessionResult = \"\";\n-        String partsResult = \"\";\n-        String commitResult = \"\";\n-        final String sessionURL = \"/files/upload_sessions\";\n-        final String uploadURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658\";\n-        final String listPartsURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/parts\";\n-        final String commitURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/commit\";\n-\n-        FakeStream stream = new FakeStream(\"aaaaa\");\n-\n-        sessionResult = TestConfig.getFixture(\"BoxFile/CreateUploadSession201\");\n-        partsResult = TestConfig.getFixture(\"BoxFile/ListUploadedPart200\");\n-        commitResult = TestConfig.getFixture(\"BoxFile/CommitUpload201\");\n-\n-        JsonObject sessionObject = new JsonObject()\n-                .add(\"folder_id\", \"12345\")\n-                .add(\"file_size\", 5)\n-                .add(\"file_name\", \"testfile.txt\");\n-\n-        JsonObject partOne = new JsonObject()\n-                .add(\"part_id\", \"CFEB5BA9\")\n-                .add(\"offset\", 0)\n-                .add(\"size\", 5);\n-\n-        JsonArray parts = new JsonArray()\n-                .add(partOne);\n-\n-        JsonObject commitObject = new JsonObject()\n-                .add(\"parts\", parts);\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(sessionURL))\n-                .withRequestBody(WireMock.equalToJson(sessionObject.toString()))\n-                .willReturn(WireMock.aResponse()\n-                        .withHeader(\"Content-Type\", \"application/json\")\n-                        .withBody(sessionResult)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.put(WireMock.urlPathEqualTo(uploadURL))\n-                        .withHeader(\"Digest\", WireMock.containing(\"sha=31HjfCaaqU04+T5Te/biAgshQGw=\"))\n-                        .withHeader(\"Content-Type\", WireMock.containing(\"application/octet-stream\"))\n-                        .withHeader(\"Content-Range\", WireMock.containing(\"bytes 0-4/5\"))\n-                        .withRequestBody(WireMock.equalTo(\"aaaaa\"))\n-                        .willReturn(WireMock.aResponse()\n-                                .withHeader(\"Content-Type\", \"application/json\")\n-                                .withBody(responseBody500)\n-                                .withStatus(500)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.get(WireMock.urlPathEqualTo(listPartsURL))\n-                        .willReturn(WireMock.aResponse()\n-                            .withHeader(\"Content-Type\", \"application/json\")\n-                            .withBody(partsResult)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(commitURL))\n-                .withHeader(\"Content-Type\", WireMock.equalTo(\"application/json\"))\n-                .withRequestBody(WireMock.containing(commitObject.toString()))\n-                .willReturn(WireMock.aResponse()\n-                        .withHeader(\"Content-Type\", \"application/json\")\n-                        .withBody(commitResult)));\n-\n-        BoxFolder folder = new BoxFolder(this.api, \"12345\");\n-        BoxFile.Info uploadedFile = folder.uploadLargeFile(stream, \"testfile.txt\", 5);\n-\n-        Assert.assertEquals(\"1111111\", uploadedFile.getID());\n-        Assert.assertEquals(\"testuser@box.com\", uploadedFile.getModifiedBy().getLogin());\n-        Assert.assertEquals(\"Test User\", uploadedFile.getOwnedBy().getName());\n-        Assert.assertEquals(\"folder\", uploadedFile.getParent().getType());\n-        Assert.assertEquals(\"testfile.txt\", uploadedFile.getName());\n-    }\n-\n-    @Test\n-    @Category(UnitTest.class)\n-    public void testRetryingChunkedUploadWith500Error() throws IOException, InterruptedException {\n-        String responseBody500 = TestConfig.getFixture(\"BoxException/BoxResponseException500\");\n-        String sessionResult = \"\";\n-        String uploadResult = \"\";\n-        String wrongPartsResult = \"\";\n-        String partsResult = \"\";\n-        String commitResult = \"\";\n-        final String sessionURL = \"/files/upload_sessions\";\n-        final String uploadURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658\";\n-        final String listPartsURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/parts\";\n-        final String commitURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/commit\";\n-\n-        FakeStream stream = new FakeStream(\"aaaaa\");\n-\n-        sessionResult = TestConfig.getFixture(\"BoxFile/CreateUploadSession201\");\n-        uploadResult = TestConfig.getFixture(\"BoxFile/UploadPartOne200\");\n-        wrongPartsResult = TestConfig.getFixture(\"BoxFile/ListUploadedParts200\");\n-        partsResult = TestConfig.getFixture(\"BoxFile/ListUploadedPart200\");\n-        commitResult = TestConfig.getFixture(\"BoxFile/CommitUpload201\");\n-\n-        JsonObject sessionObject = new JsonObject()\n-                .add(\"folder_id\", \"12345\")\n-                .add(\"file_size\", 5)\n-                .add(\"file_name\", \"testfile.txt\");\n-\n-        JsonObject partOne = new JsonObject()\n-                .add(\"part_id\", \"CFEB5BA9\")\n-                .add(\"offset\", 0)\n-                .add(\"size\", 5);\n-\n-        JsonArray parts = new JsonArray()\n-                .add(partOne);\n-\n-        JsonObject commitObject = new JsonObject()\n-                .add(\"parts\", parts);\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(sessionURL))\n-                .withRequestBody(WireMock.equalToJson(sessionObject.toString()))\n-                .willReturn(WireMock.aResponse()\n-                        .withHeader(\"Content-Type\", \"application/json\")\n-                        .withBody(sessionResult)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.put(WireMock.urlPathEqualTo(uploadURL))\n-                        .withHeader(\"Digest\", WireMock.containing(\"sha=31HjfCaaqU04+T5Te/biAgshQGw=\"))\n-                        .withHeader(\"Content-Type\", WireMock.containing(\"application/octet-stream\"))\n-                        .withHeader(\"Content-Range\", WireMock.containing(\"bytes 0-4/5\"))\n-                        .withRequestBody(WireMock.equalTo(\"aaaaa\"))\n-                        .willReturn(WireMock.aResponse()\n-                                .withHeader(\"Content-Type\", \"application/json\")\n-                                .withBody(responseBody500)\n-                                .withStatus(500)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.get(WireMock.urlPathEqualTo(listPartsURL))\n-                        .willReturn(WireMock.aResponse()\n-                            .withHeader(\"Content-Type\", \"application/json\")\n-                            .withBody(wrongPartsResult)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.put(WireMock.urlPathEqualTo(uploadURL))\n-                .withHeader(\"Digest\", WireMock.containing(\"sha=31HjfCaaqU04+T5Te/biAgshQGw=\"))\n-                .withHeader(\"Content-Type\", WireMock.containing(\"application/octet-stream\"))\n-                .withHeader(\"Content-Range\", WireMock.containing(\"bytes 0-4/5\"))\n-                .withRequestBody(WireMock.equalTo(\"aaaaa\"))\n-                .willReturn(WireMock.aResponse()\n-                        .withHeader(\"Content-Type\", \"application/json\")\n-                        .withBody(uploadResult)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(commitURL))\n-                .withHeader(\"Content-Type\", WireMock.equalTo(\"application/json\"))\n-                .withRequestBody(WireMock.containing(commitObject.toString()))\n-                .willReturn(WireMock.aResponse()\n-                        .withHeader(\"Content-Type\", \"application/json\")\n-                        .withBody(commitResult)));\n-\n-        BoxFolder folder = new BoxFolder(this.api, \"12345\");\n-        BoxFile.Info uploadedFile = folder.uploadLargeFile(stream, \"testfile.txt\", 5);\n-\n-        Assert.assertEquals(\"1111111\", uploadedFile.getID());\n-        Assert.assertEquals(\"testuser@box.com\", uploadedFile.getModifiedBy().getLogin());\n-        Assert.assertEquals(\"Test User\", uploadedFile.getOwnedBy().getName());\n-        Assert.assertEquals(\"folder\", uploadedFile.getParent().getType());\n-        Assert.assertEquals(\"testfile.txt\", uploadedFile.getName());\n-    }\n-\n     @Test\n     @Category(UnitTest.class)\n     public void testChunkedUploadWithCorrectPartSize() throws IOException, InterruptedException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMzQ3Mg==", "url": "https://github.com/box/box-java-sdk/pull/781#discussion_r391413472", "bodyText": "Here too", "author": "carycheng", "createdAt": "2020-03-12T05:51:20Z", "path": "src/test/java/com/box/sdk/BoxFileTest.java", "diffHunk": "@@ -1891,6 +1891,163 @@ public void testSetMetadataReturnsCorrectly() throws IOException {\n         Assert.assertEquals(\"text\", metadataValues.getString(\"/test\"));\n     }\n \n+    @Test\n+    @Category(UnitTest.class)\n+    public void testChunkedUploadWith500Error() throws IOException, InterruptedException {\n+        String responseBody500 = TestConfig.getFixture(\"BoxException/BoxResponseException500\");\n+        String sessionResult = \"\";\n+        String partsResult = \"\";\n+        String commitResult = \"\";\n+        final String sessionURL = \"/files/upload_sessions\";\n+        final String uploadURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658\";\n+        final String listPartsURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/parts\";\n+        final String commitURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/commit\";\n+\n+        FakeStream stream = new FakeStream(\"aaaaa\");\n+\n+        sessionResult = TestConfig.getFixture(\"BoxFile/CreateUploadSession201\");\n+        partsResult = TestConfig.getFixture(\"BoxFile/ListUploadedPart200\");\n+        commitResult = TestConfig.getFixture(\"BoxFile/CommitUpload201\");\n+\n+        JsonObject sessionObject = new JsonObject()\n+                .add(\"folder_id\", \"12345\")\n+                .add(\"file_size\", 5)\n+                .add(\"file_name\", \"testfile.txt\");\n+\n+        JsonObject partOne = new JsonObject()\n+                .add(\"part_id\", \"CFEB5BA9\")\n+                .add(\"offset\", 0)\n+                .add(\"size\", 5);\n+\n+        JsonArray parts = new JsonArray()\n+                .add(partOne);\n+\n+        JsonObject commitObject = new JsonObject()\n+                .add(\"parts\", parts);\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(sessionURL))\n+                .withRequestBody(WireMock.equalToJson(sessionObject.toString()))\n+                .willReturn(WireMock.aResponse()\n+                        .withHeader(\"Content-Type\", \"application/json\")\n+                        .withBody(sessionResult)));\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.put(WireMock.urlPathEqualTo(uploadURL))\n+                        .withHeader(\"Digest\", WireMock.containing(\"sha=31HjfCaaqU04+T5Te/biAgshQGw=\"))\n+                        .withHeader(\"Content-Type\", WireMock.containing(\"application/octet-stream\"))\n+                        .withHeader(\"Content-Range\", WireMock.containing(\"bytes 0-4/5\"))\n+                        .withRequestBody(WireMock.equalTo(\"aaaaa\"))\n+                        .willReturn(WireMock.aResponse()\n+                                .withHeader(\"Content-Type\", \"application/json\")\n+                                .withBody(responseBody500)\n+                                .withStatus(500)));\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.get(WireMock.urlPathEqualTo(listPartsURL))", "originalCommit": "d918926ea98c00615804bbac5a135ba2faa1b9de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c4f86e1d9fe9c4143571da19605a3935927f224", "chunk": "diff --git a/src/test/java/com/box/sdk/BoxFileTest.java b/src/test/java/com/box/sdk/BoxFileTest.java\nindex 2028e3e2..069fba3b 100644\n--- a/src/test/java/com/box/sdk/BoxFileTest.java\n+++ b/src/test/java/com/box/sdk/BoxFileTest.java\n\n@@ -1891,163 +1891,6 @@ public class BoxFileTest {\n         Assert.assertEquals(\"text\", metadataValues.getString(\"/test\"));\n     }\n \n-    @Test\n-    @Category(UnitTest.class)\n-    public void testChunkedUploadWith500Error() throws IOException, InterruptedException {\n-        String responseBody500 = TestConfig.getFixture(\"BoxException/BoxResponseException500\");\n-        String sessionResult = \"\";\n-        String partsResult = \"\";\n-        String commitResult = \"\";\n-        final String sessionURL = \"/files/upload_sessions\";\n-        final String uploadURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658\";\n-        final String listPartsURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/parts\";\n-        final String commitURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/commit\";\n-\n-        FakeStream stream = new FakeStream(\"aaaaa\");\n-\n-        sessionResult = TestConfig.getFixture(\"BoxFile/CreateUploadSession201\");\n-        partsResult = TestConfig.getFixture(\"BoxFile/ListUploadedPart200\");\n-        commitResult = TestConfig.getFixture(\"BoxFile/CommitUpload201\");\n-\n-        JsonObject sessionObject = new JsonObject()\n-                .add(\"folder_id\", \"12345\")\n-                .add(\"file_size\", 5)\n-                .add(\"file_name\", \"testfile.txt\");\n-\n-        JsonObject partOne = new JsonObject()\n-                .add(\"part_id\", \"CFEB5BA9\")\n-                .add(\"offset\", 0)\n-                .add(\"size\", 5);\n-\n-        JsonArray parts = new JsonArray()\n-                .add(partOne);\n-\n-        JsonObject commitObject = new JsonObject()\n-                .add(\"parts\", parts);\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(sessionURL))\n-                .withRequestBody(WireMock.equalToJson(sessionObject.toString()))\n-                .willReturn(WireMock.aResponse()\n-                        .withHeader(\"Content-Type\", \"application/json\")\n-                        .withBody(sessionResult)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.put(WireMock.urlPathEqualTo(uploadURL))\n-                        .withHeader(\"Digest\", WireMock.containing(\"sha=31HjfCaaqU04+T5Te/biAgshQGw=\"))\n-                        .withHeader(\"Content-Type\", WireMock.containing(\"application/octet-stream\"))\n-                        .withHeader(\"Content-Range\", WireMock.containing(\"bytes 0-4/5\"))\n-                        .withRequestBody(WireMock.equalTo(\"aaaaa\"))\n-                        .willReturn(WireMock.aResponse()\n-                                .withHeader(\"Content-Type\", \"application/json\")\n-                                .withBody(responseBody500)\n-                                .withStatus(500)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.get(WireMock.urlPathEqualTo(listPartsURL))\n-                        .willReturn(WireMock.aResponse()\n-                            .withHeader(\"Content-Type\", \"application/json\")\n-                            .withBody(partsResult)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(commitURL))\n-                .withHeader(\"Content-Type\", WireMock.equalTo(\"application/json\"))\n-                .withRequestBody(WireMock.containing(commitObject.toString()))\n-                .willReturn(WireMock.aResponse()\n-                        .withHeader(\"Content-Type\", \"application/json\")\n-                        .withBody(commitResult)));\n-\n-        BoxFolder folder = new BoxFolder(this.api, \"12345\");\n-        BoxFile.Info uploadedFile = folder.uploadLargeFile(stream, \"testfile.txt\", 5);\n-\n-        Assert.assertEquals(\"1111111\", uploadedFile.getID());\n-        Assert.assertEquals(\"testuser@box.com\", uploadedFile.getModifiedBy().getLogin());\n-        Assert.assertEquals(\"Test User\", uploadedFile.getOwnedBy().getName());\n-        Assert.assertEquals(\"folder\", uploadedFile.getParent().getType());\n-        Assert.assertEquals(\"testfile.txt\", uploadedFile.getName());\n-    }\n-\n-    @Test\n-    @Category(UnitTest.class)\n-    public void testRetryingChunkedUploadWith500Error() throws IOException, InterruptedException {\n-        String responseBody500 = TestConfig.getFixture(\"BoxException/BoxResponseException500\");\n-        String sessionResult = \"\";\n-        String uploadResult = \"\";\n-        String wrongPartsResult = \"\";\n-        String partsResult = \"\";\n-        String commitResult = \"\";\n-        final String sessionURL = \"/files/upload_sessions\";\n-        final String uploadURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658\";\n-        final String listPartsURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/parts\";\n-        final String commitURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/commit\";\n-\n-        FakeStream stream = new FakeStream(\"aaaaa\");\n-\n-        sessionResult = TestConfig.getFixture(\"BoxFile/CreateUploadSession201\");\n-        uploadResult = TestConfig.getFixture(\"BoxFile/UploadPartOne200\");\n-        wrongPartsResult = TestConfig.getFixture(\"BoxFile/ListUploadedParts200\");\n-        partsResult = TestConfig.getFixture(\"BoxFile/ListUploadedPart200\");\n-        commitResult = TestConfig.getFixture(\"BoxFile/CommitUpload201\");\n-\n-        JsonObject sessionObject = new JsonObject()\n-                .add(\"folder_id\", \"12345\")\n-                .add(\"file_size\", 5)\n-                .add(\"file_name\", \"testfile.txt\");\n-\n-        JsonObject partOne = new JsonObject()\n-                .add(\"part_id\", \"CFEB5BA9\")\n-                .add(\"offset\", 0)\n-                .add(\"size\", 5);\n-\n-        JsonArray parts = new JsonArray()\n-                .add(partOne);\n-\n-        JsonObject commitObject = new JsonObject()\n-                .add(\"parts\", parts);\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(sessionURL))\n-                .withRequestBody(WireMock.equalToJson(sessionObject.toString()))\n-                .willReturn(WireMock.aResponse()\n-                        .withHeader(\"Content-Type\", \"application/json\")\n-                        .withBody(sessionResult)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.put(WireMock.urlPathEqualTo(uploadURL))\n-                        .withHeader(\"Digest\", WireMock.containing(\"sha=31HjfCaaqU04+T5Te/biAgshQGw=\"))\n-                        .withHeader(\"Content-Type\", WireMock.containing(\"application/octet-stream\"))\n-                        .withHeader(\"Content-Range\", WireMock.containing(\"bytes 0-4/5\"))\n-                        .withRequestBody(WireMock.equalTo(\"aaaaa\"))\n-                        .willReturn(WireMock.aResponse()\n-                                .withHeader(\"Content-Type\", \"application/json\")\n-                                .withBody(responseBody500)\n-                                .withStatus(500)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.get(WireMock.urlPathEqualTo(listPartsURL))\n-                        .willReturn(WireMock.aResponse()\n-                            .withHeader(\"Content-Type\", \"application/json\")\n-                            .withBody(wrongPartsResult)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.put(WireMock.urlPathEqualTo(uploadURL))\n-                .withHeader(\"Digest\", WireMock.containing(\"sha=31HjfCaaqU04+T5Te/biAgshQGw=\"))\n-                .withHeader(\"Content-Type\", WireMock.containing(\"application/octet-stream\"))\n-                .withHeader(\"Content-Range\", WireMock.containing(\"bytes 0-4/5\"))\n-                .withRequestBody(WireMock.equalTo(\"aaaaa\"))\n-                .willReturn(WireMock.aResponse()\n-                        .withHeader(\"Content-Type\", \"application/json\")\n-                        .withBody(uploadResult)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(commitURL))\n-                .withHeader(\"Content-Type\", WireMock.equalTo(\"application/json\"))\n-                .withRequestBody(WireMock.containing(commitObject.toString()))\n-                .willReturn(WireMock.aResponse()\n-                        .withHeader(\"Content-Type\", \"application/json\")\n-                        .withBody(commitResult)));\n-\n-        BoxFolder folder = new BoxFolder(this.api, \"12345\");\n-        BoxFile.Info uploadedFile = folder.uploadLargeFile(stream, \"testfile.txt\", 5);\n-\n-        Assert.assertEquals(\"1111111\", uploadedFile.getID());\n-        Assert.assertEquals(\"testuser@box.com\", uploadedFile.getModifiedBy().getLogin());\n-        Assert.assertEquals(\"Test User\", uploadedFile.getOwnedBy().getName());\n-        Assert.assertEquals(\"folder\", uploadedFile.getParent().getType());\n-        Assert.assertEquals(\"testfile.txt\", uploadedFile.getName());\n-    }\n-\n     @Test\n     @Category(UnitTest.class)\n     public void testChunkedUploadWithCorrectPartSize() throws IOException, InterruptedException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMzUwNA==", "url": "https://github.com/box/box-java-sdk/pull/781#discussion_r391413504", "bodyText": "Here as well", "author": "carycheng", "createdAt": "2020-03-12T05:51:27Z", "path": "src/test/java/com/box/sdk/BoxFileTest.java", "diffHunk": "@@ -1891,6 +1891,163 @@ public void testSetMetadataReturnsCorrectly() throws IOException {\n         Assert.assertEquals(\"text\", metadataValues.getString(\"/test\"));\n     }\n \n+    @Test\n+    @Category(UnitTest.class)\n+    public void testChunkedUploadWith500Error() throws IOException, InterruptedException {\n+        String responseBody500 = TestConfig.getFixture(\"BoxException/BoxResponseException500\");\n+        String sessionResult = \"\";\n+        String partsResult = \"\";\n+        String commitResult = \"\";\n+        final String sessionURL = \"/files/upload_sessions\";\n+        final String uploadURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658\";\n+        final String listPartsURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/parts\";\n+        final String commitURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/commit\";\n+\n+        FakeStream stream = new FakeStream(\"aaaaa\");\n+\n+        sessionResult = TestConfig.getFixture(\"BoxFile/CreateUploadSession201\");\n+        partsResult = TestConfig.getFixture(\"BoxFile/ListUploadedPart200\");\n+        commitResult = TestConfig.getFixture(\"BoxFile/CommitUpload201\");\n+\n+        JsonObject sessionObject = new JsonObject()\n+                .add(\"folder_id\", \"12345\")\n+                .add(\"file_size\", 5)\n+                .add(\"file_name\", \"testfile.txt\");\n+\n+        JsonObject partOne = new JsonObject()\n+                .add(\"part_id\", \"CFEB5BA9\")\n+                .add(\"offset\", 0)\n+                .add(\"size\", 5);\n+\n+        JsonArray parts = new JsonArray()\n+                .add(partOne);\n+\n+        JsonObject commitObject = new JsonObject()\n+                .add(\"parts\", parts);\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(sessionURL))\n+                .withRequestBody(WireMock.equalToJson(sessionObject.toString()))\n+                .willReturn(WireMock.aResponse()\n+                        .withHeader(\"Content-Type\", \"application/json\")\n+                        .withBody(sessionResult)));\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.put(WireMock.urlPathEqualTo(uploadURL))\n+                        .withHeader(\"Digest\", WireMock.containing(\"sha=31HjfCaaqU04+T5Te/biAgshQGw=\"))\n+                        .withHeader(\"Content-Type\", WireMock.containing(\"application/octet-stream\"))\n+                        .withHeader(\"Content-Range\", WireMock.containing(\"bytes 0-4/5\"))\n+                        .withRequestBody(WireMock.equalTo(\"aaaaa\"))\n+                        .willReturn(WireMock.aResponse()\n+                                .withHeader(\"Content-Type\", \"application/json\")\n+                                .withBody(responseBody500)\n+                                .withStatus(500)));\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.get(WireMock.urlPathEqualTo(listPartsURL))\n+                        .willReturn(WireMock.aResponse()\n+                            .withHeader(\"Content-Type\", \"application/json\")\n+                            .withBody(partsResult)));\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(commitURL))", "originalCommit": "d918926ea98c00615804bbac5a135ba2faa1b9de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c4f86e1d9fe9c4143571da19605a3935927f224", "chunk": "diff --git a/src/test/java/com/box/sdk/BoxFileTest.java b/src/test/java/com/box/sdk/BoxFileTest.java\nindex 2028e3e2..069fba3b 100644\n--- a/src/test/java/com/box/sdk/BoxFileTest.java\n+++ b/src/test/java/com/box/sdk/BoxFileTest.java\n\n@@ -1891,163 +1891,6 @@ public class BoxFileTest {\n         Assert.assertEquals(\"text\", metadataValues.getString(\"/test\"));\n     }\n \n-    @Test\n-    @Category(UnitTest.class)\n-    public void testChunkedUploadWith500Error() throws IOException, InterruptedException {\n-        String responseBody500 = TestConfig.getFixture(\"BoxException/BoxResponseException500\");\n-        String sessionResult = \"\";\n-        String partsResult = \"\";\n-        String commitResult = \"\";\n-        final String sessionURL = \"/files/upload_sessions\";\n-        final String uploadURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658\";\n-        final String listPartsURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/parts\";\n-        final String commitURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/commit\";\n-\n-        FakeStream stream = new FakeStream(\"aaaaa\");\n-\n-        sessionResult = TestConfig.getFixture(\"BoxFile/CreateUploadSession201\");\n-        partsResult = TestConfig.getFixture(\"BoxFile/ListUploadedPart200\");\n-        commitResult = TestConfig.getFixture(\"BoxFile/CommitUpload201\");\n-\n-        JsonObject sessionObject = new JsonObject()\n-                .add(\"folder_id\", \"12345\")\n-                .add(\"file_size\", 5)\n-                .add(\"file_name\", \"testfile.txt\");\n-\n-        JsonObject partOne = new JsonObject()\n-                .add(\"part_id\", \"CFEB5BA9\")\n-                .add(\"offset\", 0)\n-                .add(\"size\", 5);\n-\n-        JsonArray parts = new JsonArray()\n-                .add(partOne);\n-\n-        JsonObject commitObject = new JsonObject()\n-                .add(\"parts\", parts);\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(sessionURL))\n-                .withRequestBody(WireMock.equalToJson(sessionObject.toString()))\n-                .willReturn(WireMock.aResponse()\n-                        .withHeader(\"Content-Type\", \"application/json\")\n-                        .withBody(sessionResult)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.put(WireMock.urlPathEqualTo(uploadURL))\n-                        .withHeader(\"Digest\", WireMock.containing(\"sha=31HjfCaaqU04+T5Te/biAgshQGw=\"))\n-                        .withHeader(\"Content-Type\", WireMock.containing(\"application/octet-stream\"))\n-                        .withHeader(\"Content-Range\", WireMock.containing(\"bytes 0-4/5\"))\n-                        .withRequestBody(WireMock.equalTo(\"aaaaa\"))\n-                        .willReturn(WireMock.aResponse()\n-                                .withHeader(\"Content-Type\", \"application/json\")\n-                                .withBody(responseBody500)\n-                                .withStatus(500)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.get(WireMock.urlPathEqualTo(listPartsURL))\n-                        .willReturn(WireMock.aResponse()\n-                            .withHeader(\"Content-Type\", \"application/json\")\n-                            .withBody(partsResult)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(commitURL))\n-                .withHeader(\"Content-Type\", WireMock.equalTo(\"application/json\"))\n-                .withRequestBody(WireMock.containing(commitObject.toString()))\n-                .willReturn(WireMock.aResponse()\n-                        .withHeader(\"Content-Type\", \"application/json\")\n-                        .withBody(commitResult)));\n-\n-        BoxFolder folder = new BoxFolder(this.api, \"12345\");\n-        BoxFile.Info uploadedFile = folder.uploadLargeFile(stream, \"testfile.txt\", 5);\n-\n-        Assert.assertEquals(\"1111111\", uploadedFile.getID());\n-        Assert.assertEquals(\"testuser@box.com\", uploadedFile.getModifiedBy().getLogin());\n-        Assert.assertEquals(\"Test User\", uploadedFile.getOwnedBy().getName());\n-        Assert.assertEquals(\"folder\", uploadedFile.getParent().getType());\n-        Assert.assertEquals(\"testfile.txt\", uploadedFile.getName());\n-    }\n-\n-    @Test\n-    @Category(UnitTest.class)\n-    public void testRetryingChunkedUploadWith500Error() throws IOException, InterruptedException {\n-        String responseBody500 = TestConfig.getFixture(\"BoxException/BoxResponseException500\");\n-        String sessionResult = \"\";\n-        String uploadResult = \"\";\n-        String wrongPartsResult = \"\";\n-        String partsResult = \"\";\n-        String commitResult = \"\";\n-        final String sessionURL = \"/files/upload_sessions\";\n-        final String uploadURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658\";\n-        final String listPartsURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/parts\";\n-        final String commitURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/commit\";\n-\n-        FakeStream stream = new FakeStream(\"aaaaa\");\n-\n-        sessionResult = TestConfig.getFixture(\"BoxFile/CreateUploadSession201\");\n-        uploadResult = TestConfig.getFixture(\"BoxFile/UploadPartOne200\");\n-        wrongPartsResult = TestConfig.getFixture(\"BoxFile/ListUploadedParts200\");\n-        partsResult = TestConfig.getFixture(\"BoxFile/ListUploadedPart200\");\n-        commitResult = TestConfig.getFixture(\"BoxFile/CommitUpload201\");\n-\n-        JsonObject sessionObject = new JsonObject()\n-                .add(\"folder_id\", \"12345\")\n-                .add(\"file_size\", 5)\n-                .add(\"file_name\", \"testfile.txt\");\n-\n-        JsonObject partOne = new JsonObject()\n-                .add(\"part_id\", \"CFEB5BA9\")\n-                .add(\"offset\", 0)\n-                .add(\"size\", 5);\n-\n-        JsonArray parts = new JsonArray()\n-                .add(partOne);\n-\n-        JsonObject commitObject = new JsonObject()\n-                .add(\"parts\", parts);\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(sessionURL))\n-                .withRequestBody(WireMock.equalToJson(sessionObject.toString()))\n-                .willReturn(WireMock.aResponse()\n-                        .withHeader(\"Content-Type\", \"application/json\")\n-                        .withBody(sessionResult)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.put(WireMock.urlPathEqualTo(uploadURL))\n-                        .withHeader(\"Digest\", WireMock.containing(\"sha=31HjfCaaqU04+T5Te/biAgshQGw=\"))\n-                        .withHeader(\"Content-Type\", WireMock.containing(\"application/octet-stream\"))\n-                        .withHeader(\"Content-Range\", WireMock.containing(\"bytes 0-4/5\"))\n-                        .withRequestBody(WireMock.equalTo(\"aaaaa\"))\n-                        .willReturn(WireMock.aResponse()\n-                                .withHeader(\"Content-Type\", \"application/json\")\n-                                .withBody(responseBody500)\n-                                .withStatus(500)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.get(WireMock.urlPathEqualTo(listPartsURL))\n-                        .willReturn(WireMock.aResponse()\n-                            .withHeader(\"Content-Type\", \"application/json\")\n-                            .withBody(wrongPartsResult)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.put(WireMock.urlPathEqualTo(uploadURL))\n-                .withHeader(\"Digest\", WireMock.containing(\"sha=31HjfCaaqU04+T5Te/biAgshQGw=\"))\n-                .withHeader(\"Content-Type\", WireMock.containing(\"application/octet-stream\"))\n-                .withHeader(\"Content-Range\", WireMock.containing(\"bytes 0-4/5\"))\n-                .withRequestBody(WireMock.equalTo(\"aaaaa\"))\n-                .willReturn(WireMock.aResponse()\n-                        .withHeader(\"Content-Type\", \"application/json\")\n-                        .withBody(uploadResult)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(commitURL))\n-                .withHeader(\"Content-Type\", WireMock.equalTo(\"application/json\"))\n-                .withRequestBody(WireMock.containing(commitObject.toString()))\n-                .willReturn(WireMock.aResponse()\n-                        .withHeader(\"Content-Type\", \"application/json\")\n-                        .withBody(commitResult)));\n-\n-        BoxFolder folder = new BoxFolder(this.api, \"12345\");\n-        BoxFile.Info uploadedFile = folder.uploadLargeFile(stream, \"testfile.txt\", 5);\n-\n-        Assert.assertEquals(\"1111111\", uploadedFile.getID());\n-        Assert.assertEquals(\"testuser@box.com\", uploadedFile.getModifiedBy().getLogin());\n-        Assert.assertEquals(\"Test User\", uploadedFile.getOwnedBy().getName());\n-        Assert.assertEquals(\"folder\", uploadedFile.getParent().getType());\n-        Assert.assertEquals(\"testfile.txt\", uploadedFile.getName());\n-    }\n-\n     @Test\n     @Category(UnitTest.class)\n     public void testChunkedUploadWithCorrectPartSize() throws IOException, InterruptedException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMzY2OA==", "url": "https://github.com/box/box-java-sdk/pull/781#discussion_r391413668", "bodyText": "This test needs to add the status codes for the stubbed api response", "author": "carycheng", "createdAt": "2020-03-12T05:52:10Z", "path": "src/test/java/com/box/sdk/BoxFileTest.java", "diffHunk": "@@ -1891,6 +1891,163 @@ public void testSetMetadataReturnsCorrectly() throws IOException {\n         Assert.assertEquals(\"text\", metadataValues.getString(\"/test\"));\n     }\n \n+    @Test\n+    @Category(UnitTest.class)\n+    public void testChunkedUploadWith500Error() throws IOException, InterruptedException {\n+        String responseBody500 = TestConfig.getFixture(\"BoxException/BoxResponseException500\");\n+        String sessionResult = \"\";\n+        String partsResult = \"\";\n+        String commitResult = \"\";\n+        final String sessionURL = \"/files/upload_sessions\";\n+        final String uploadURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658\";\n+        final String listPartsURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/parts\";\n+        final String commitURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/commit\";\n+\n+        FakeStream stream = new FakeStream(\"aaaaa\");\n+\n+        sessionResult = TestConfig.getFixture(\"BoxFile/CreateUploadSession201\");\n+        partsResult = TestConfig.getFixture(\"BoxFile/ListUploadedPart200\");\n+        commitResult = TestConfig.getFixture(\"BoxFile/CommitUpload201\");\n+\n+        JsonObject sessionObject = new JsonObject()\n+                .add(\"folder_id\", \"12345\")\n+                .add(\"file_size\", 5)\n+                .add(\"file_name\", \"testfile.txt\");\n+\n+        JsonObject partOne = new JsonObject()\n+                .add(\"part_id\", \"CFEB5BA9\")\n+                .add(\"offset\", 0)\n+                .add(\"size\", 5);\n+\n+        JsonArray parts = new JsonArray()\n+                .add(partOne);\n+\n+        JsonObject commitObject = new JsonObject()\n+                .add(\"parts\", parts);\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(sessionURL))\n+                .withRequestBody(WireMock.equalToJson(sessionObject.toString()))\n+                .willReturn(WireMock.aResponse()\n+                        .withHeader(\"Content-Type\", \"application/json\")\n+                        .withBody(sessionResult)));\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.put(WireMock.urlPathEqualTo(uploadURL))\n+                        .withHeader(\"Digest\", WireMock.containing(\"sha=31HjfCaaqU04+T5Te/biAgshQGw=\"))\n+                        .withHeader(\"Content-Type\", WireMock.containing(\"application/octet-stream\"))\n+                        .withHeader(\"Content-Range\", WireMock.containing(\"bytes 0-4/5\"))\n+                        .withRequestBody(WireMock.equalTo(\"aaaaa\"))\n+                        .willReturn(WireMock.aResponse()\n+                                .withHeader(\"Content-Type\", \"application/json\")\n+                                .withBody(responseBody500)\n+                                .withStatus(500)));\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.get(WireMock.urlPathEqualTo(listPartsURL))\n+                        .willReturn(WireMock.aResponse()\n+                            .withHeader(\"Content-Type\", \"application/json\")\n+                            .withBody(partsResult)));\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(commitURL))\n+                .withHeader(\"Content-Type\", WireMock.equalTo(\"application/json\"))\n+                .withRequestBody(WireMock.containing(commitObject.toString()))\n+                .willReturn(WireMock.aResponse()\n+                        .withHeader(\"Content-Type\", \"application/json\")\n+                        .withBody(commitResult)));\n+\n+        BoxFolder folder = new BoxFolder(this.api, \"12345\");\n+        BoxFile.Info uploadedFile = folder.uploadLargeFile(stream, \"testfile.txt\", 5);\n+\n+        Assert.assertEquals(\"1111111\", uploadedFile.getID());\n+        Assert.assertEquals(\"testuser@box.com\", uploadedFile.getModifiedBy().getLogin());\n+        Assert.assertEquals(\"Test User\", uploadedFile.getOwnedBy().getName());\n+        Assert.assertEquals(\"folder\", uploadedFile.getParent().getType());\n+        Assert.assertEquals(\"testfile.txt\", uploadedFile.getName());\n+    }\n+\n+    @Test\n+    @Category(UnitTest.class)\n+    public void testRetryingChunkedUploadWith500Error() throws IOException, InterruptedException {\n+        String responseBody500 = TestConfig.getFixture(\"BoxException/BoxResponseException500\");\n+        String sessionResult = \"\";\n+        String uploadResult = \"\";\n+        String wrongPartsResult = \"\";\n+        String partsResult = \"\";\n+        String commitResult = \"\";\n+        final String sessionURL = \"/files/upload_sessions\";\n+        final String uploadURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658\";\n+        final String listPartsURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/parts\";\n+        final String commitURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/commit\";\n+\n+        FakeStream stream = new FakeStream(\"aaaaa\");\n+\n+        sessionResult = TestConfig.getFixture(\"BoxFile/CreateUploadSession201\");\n+        uploadResult = TestConfig.getFixture(\"BoxFile/UploadPartOne200\");\n+        wrongPartsResult = TestConfig.getFixture(\"BoxFile/ListUploadedParts200\");\n+        partsResult = TestConfig.getFixture(\"BoxFile/ListUploadedPart200\");\n+        commitResult = TestConfig.getFixture(\"BoxFile/CommitUpload201\");\n+\n+        JsonObject sessionObject = new JsonObject()\n+                .add(\"folder_id\", \"12345\")\n+                .add(\"file_size\", 5)\n+                .add(\"file_name\", \"testfile.txt\");\n+\n+        JsonObject partOne = new JsonObject()\n+                .add(\"part_id\", \"CFEB5BA9\")\n+                .add(\"offset\", 0)\n+                .add(\"size\", 5);\n+\n+        JsonArray parts = new JsonArray()\n+                .add(partOne);\n+\n+        JsonObject commitObject = new JsonObject()\n+                .add(\"parts\", parts);\n+\n+        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(sessionURL))", "originalCommit": "d918926ea98c00615804bbac5a135ba2faa1b9de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c4f86e1d9fe9c4143571da19605a3935927f224", "chunk": "diff --git a/src/test/java/com/box/sdk/BoxFileTest.java b/src/test/java/com/box/sdk/BoxFileTest.java\nindex 2028e3e2..069fba3b 100644\n--- a/src/test/java/com/box/sdk/BoxFileTest.java\n+++ b/src/test/java/com/box/sdk/BoxFileTest.java\n\n@@ -1891,163 +1891,6 @@ public class BoxFileTest {\n         Assert.assertEquals(\"text\", metadataValues.getString(\"/test\"));\n     }\n \n-    @Test\n-    @Category(UnitTest.class)\n-    public void testChunkedUploadWith500Error() throws IOException, InterruptedException {\n-        String responseBody500 = TestConfig.getFixture(\"BoxException/BoxResponseException500\");\n-        String sessionResult = \"\";\n-        String partsResult = \"\";\n-        String commitResult = \"\";\n-        final String sessionURL = \"/files/upload_sessions\";\n-        final String uploadURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658\";\n-        final String listPartsURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/parts\";\n-        final String commitURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/commit\";\n-\n-        FakeStream stream = new FakeStream(\"aaaaa\");\n-\n-        sessionResult = TestConfig.getFixture(\"BoxFile/CreateUploadSession201\");\n-        partsResult = TestConfig.getFixture(\"BoxFile/ListUploadedPart200\");\n-        commitResult = TestConfig.getFixture(\"BoxFile/CommitUpload201\");\n-\n-        JsonObject sessionObject = new JsonObject()\n-                .add(\"folder_id\", \"12345\")\n-                .add(\"file_size\", 5)\n-                .add(\"file_name\", \"testfile.txt\");\n-\n-        JsonObject partOne = new JsonObject()\n-                .add(\"part_id\", \"CFEB5BA9\")\n-                .add(\"offset\", 0)\n-                .add(\"size\", 5);\n-\n-        JsonArray parts = new JsonArray()\n-                .add(partOne);\n-\n-        JsonObject commitObject = new JsonObject()\n-                .add(\"parts\", parts);\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(sessionURL))\n-                .withRequestBody(WireMock.equalToJson(sessionObject.toString()))\n-                .willReturn(WireMock.aResponse()\n-                        .withHeader(\"Content-Type\", \"application/json\")\n-                        .withBody(sessionResult)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.put(WireMock.urlPathEqualTo(uploadURL))\n-                        .withHeader(\"Digest\", WireMock.containing(\"sha=31HjfCaaqU04+T5Te/biAgshQGw=\"))\n-                        .withHeader(\"Content-Type\", WireMock.containing(\"application/octet-stream\"))\n-                        .withHeader(\"Content-Range\", WireMock.containing(\"bytes 0-4/5\"))\n-                        .withRequestBody(WireMock.equalTo(\"aaaaa\"))\n-                        .willReturn(WireMock.aResponse()\n-                                .withHeader(\"Content-Type\", \"application/json\")\n-                                .withBody(responseBody500)\n-                                .withStatus(500)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.get(WireMock.urlPathEqualTo(listPartsURL))\n-                        .willReturn(WireMock.aResponse()\n-                            .withHeader(\"Content-Type\", \"application/json\")\n-                            .withBody(partsResult)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(commitURL))\n-                .withHeader(\"Content-Type\", WireMock.equalTo(\"application/json\"))\n-                .withRequestBody(WireMock.containing(commitObject.toString()))\n-                .willReturn(WireMock.aResponse()\n-                        .withHeader(\"Content-Type\", \"application/json\")\n-                        .withBody(commitResult)));\n-\n-        BoxFolder folder = new BoxFolder(this.api, \"12345\");\n-        BoxFile.Info uploadedFile = folder.uploadLargeFile(stream, \"testfile.txt\", 5);\n-\n-        Assert.assertEquals(\"1111111\", uploadedFile.getID());\n-        Assert.assertEquals(\"testuser@box.com\", uploadedFile.getModifiedBy().getLogin());\n-        Assert.assertEquals(\"Test User\", uploadedFile.getOwnedBy().getName());\n-        Assert.assertEquals(\"folder\", uploadedFile.getParent().getType());\n-        Assert.assertEquals(\"testfile.txt\", uploadedFile.getName());\n-    }\n-\n-    @Test\n-    @Category(UnitTest.class)\n-    public void testRetryingChunkedUploadWith500Error() throws IOException, InterruptedException {\n-        String responseBody500 = TestConfig.getFixture(\"BoxException/BoxResponseException500\");\n-        String sessionResult = \"\";\n-        String uploadResult = \"\";\n-        String wrongPartsResult = \"\";\n-        String partsResult = \"\";\n-        String commitResult = \"\";\n-        final String sessionURL = \"/files/upload_sessions\";\n-        final String uploadURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658\";\n-        final String listPartsURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/parts\";\n-        final String commitURL = \"/files/upload_sessions/D5E3F8ADA11A38F0A66AD0B64AACA658/commit\";\n-\n-        FakeStream stream = new FakeStream(\"aaaaa\");\n-\n-        sessionResult = TestConfig.getFixture(\"BoxFile/CreateUploadSession201\");\n-        uploadResult = TestConfig.getFixture(\"BoxFile/UploadPartOne200\");\n-        wrongPartsResult = TestConfig.getFixture(\"BoxFile/ListUploadedParts200\");\n-        partsResult = TestConfig.getFixture(\"BoxFile/ListUploadedPart200\");\n-        commitResult = TestConfig.getFixture(\"BoxFile/CommitUpload201\");\n-\n-        JsonObject sessionObject = new JsonObject()\n-                .add(\"folder_id\", \"12345\")\n-                .add(\"file_size\", 5)\n-                .add(\"file_name\", \"testfile.txt\");\n-\n-        JsonObject partOne = new JsonObject()\n-                .add(\"part_id\", \"CFEB5BA9\")\n-                .add(\"offset\", 0)\n-                .add(\"size\", 5);\n-\n-        JsonArray parts = new JsonArray()\n-                .add(partOne);\n-\n-        JsonObject commitObject = new JsonObject()\n-                .add(\"parts\", parts);\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(sessionURL))\n-                .withRequestBody(WireMock.equalToJson(sessionObject.toString()))\n-                .willReturn(WireMock.aResponse()\n-                        .withHeader(\"Content-Type\", \"application/json\")\n-                        .withBody(sessionResult)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.put(WireMock.urlPathEqualTo(uploadURL))\n-                        .withHeader(\"Digest\", WireMock.containing(\"sha=31HjfCaaqU04+T5Te/biAgshQGw=\"))\n-                        .withHeader(\"Content-Type\", WireMock.containing(\"application/octet-stream\"))\n-                        .withHeader(\"Content-Range\", WireMock.containing(\"bytes 0-4/5\"))\n-                        .withRequestBody(WireMock.equalTo(\"aaaaa\"))\n-                        .willReturn(WireMock.aResponse()\n-                                .withHeader(\"Content-Type\", \"application/json\")\n-                                .withBody(responseBody500)\n-                                .withStatus(500)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.get(WireMock.urlPathEqualTo(listPartsURL))\n-                        .willReturn(WireMock.aResponse()\n-                            .withHeader(\"Content-Type\", \"application/json\")\n-                            .withBody(wrongPartsResult)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.put(WireMock.urlPathEqualTo(uploadURL))\n-                .withHeader(\"Digest\", WireMock.containing(\"sha=31HjfCaaqU04+T5Te/biAgshQGw=\"))\n-                .withHeader(\"Content-Type\", WireMock.containing(\"application/octet-stream\"))\n-                .withHeader(\"Content-Range\", WireMock.containing(\"bytes 0-4/5\"))\n-                .withRequestBody(WireMock.equalTo(\"aaaaa\"))\n-                .willReturn(WireMock.aResponse()\n-                        .withHeader(\"Content-Type\", \"application/json\")\n-                        .withBody(uploadResult)));\n-\n-        WIRE_MOCK_CLASS_RULE.stubFor(WireMock.post(WireMock.urlPathEqualTo(commitURL))\n-                .withHeader(\"Content-Type\", WireMock.equalTo(\"application/json\"))\n-                .withRequestBody(WireMock.containing(commitObject.toString()))\n-                .willReturn(WireMock.aResponse()\n-                        .withHeader(\"Content-Type\", \"application/json\")\n-                        .withBody(commitResult)));\n-\n-        BoxFolder folder = new BoxFolder(this.api, \"12345\");\n-        BoxFile.Info uploadedFile = folder.uploadLargeFile(stream, \"testfile.txt\", 5);\n-\n-        Assert.assertEquals(\"1111111\", uploadedFile.getID());\n-        Assert.assertEquals(\"testuser@box.com\", uploadedFile.getModifiedBy().getLogin());\n-        Assert.assertEquals(\"Test User\", uploadedFile.getOwnedBy().getName());\n-        Assert.assertEquals(\"folder\", uploadedFile.getParent().getType());\n-        Assert.assertEquals(\"testfile.txt\", uploadedFile.getName());\n-    }\n-\n     @Test\n     @Category(UnitTest.class)\n     public void testChunkedUploadWithCorrectPartSize() throws IOException, InterruptedException {\n"}}, {"oid": "7c4f86e1d9fe9c4143571da19605a3935927f224", "url": "https://github.com/box/box-java-sdk/commit/7c4f86e1d9fe9c4143571da19605a3935927f224", "message": "added status codes to tests and refactored", "committedDate": "2020-03-12T21:56:34Z", "type": "commit"}, {"oid": "b382f9ddbf3b6d19fc1fee89b419a9ee19f373c8", "url": "https://github.com/box/box-java-sdk/commit/b382f9ddbf3b6d19fc1fee89b419a9ee19f373c8", "message": "changed access modifier", "committedDate": "2020-03-13T00:54:18Z", "type": "commit"}]}