{"pr_number": 2202, "pr_title": "Reorganize optimization strategies", "pr_createdAt": "2020-09-08T08:43:06Z", "pr_url": "https://github.com/JanusGraph/janusgraph/pull/2202", "timeline": [{"oid": "3e4744400ead117f5a96aae0947a07f6ee8858ff", "url": "https://github.com/JanusGraph/janusgraph/commit/3e4744400ead117f5a96aae0947a07f6ee8858ff", "message": "Reorganize optimization strategies\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>", "committedDate": "2020-09-15T11:48:21Z", "type": "forcePushed"}, {"oid": "e8fef8a28ace8e31392864296d7ba7fb00abc2d4", "url": "https://github.com/JanusGraph/janusgraph/commit/e8fef8a28ace8e31392864296d7ba7fb00abc2d4", "message": "Reorganize optimization strategies\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>", "committedDate": "2020-09-18T05:20:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTc4MA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2202#discussion_r495411780", "bodyText": "Is there any way to compare steps other than toString()?", "author": "li-boxuan", "createdAt": "2020-09-26T04:08:39Z", "path": "janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java", "diffHunk": "@@ -81,4 +91,57 @@ private static boolean isEmpty(Object obj) {\n         throw new IllegalArgumentException(\"Cannot determine size of: \" + obj);\n     }\n \n+    public static void assertNumStep(int expectedResults, int expectedSteps, GraphTraversal traversal, Class<? extends Step>... expectedStepTypes) {\n+        int num = 0;\n+        while (traversal.hasNext()) {\n+            traversal.next();\n+            num++;\n+        }\n+\n+        assertEquals(expectedResults, num);\n+\n+        //Verify that steps line up with what is expected after JanusGraph's optimizations are applied\n+        List<Step> steps = traversal.asAdmin().getSteps();\n+        Set<Class<? extends Step>> expSteps = Sets.newHashSet(expectedStepTypes);\n+        int numSteps = 0;\n+        for (Step s : steps) {\n+            if (s.getClass().equals(GraphStep.class) || s.getClass().equals(StartStep.class)) continue;\n+\n+            if (expSteps.contains(s.getClass())) {\n+                numSteps++;\n+            }\n+        }\n+        assertEquals(expectedSteps, numSteps);\n+    }\n+\n+    public static void assertOptimization(Traversal<?, ?> expectedTraversal, Traversal<?, ?> originalTraversal,\n+                                          TraversalStrategy... optimizationStrategies) {\n+        final TraversalStrategies optimizations = new DefaultTraversalStrategies();\n+        for (final TraversalStrategy<?> strategy : optimizationStrategies) {\n+            optimizations.addStrategies(strategy);\n+        }\n+\n+        originalTraversal.asAdmin().setStrategies(optimizations);\n+        originalTraversal.asAdmin().applyStrategies();\n+\n+        assertEquals(expectedTraversal.asAdmin().getSteps().toString(),\n+            originalTraversal.asAdmin().getSteps().toString());", "originalCommit": "e8fef8a28ace8e31392864296d7ba7fb00abc2d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgwNTA3MA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2202#discussion_r495805070", "bodyText": "I didn't find one. If you (or anyone) knows how to do it better, please let me know :)", "author": "rngcntr", "createdAt": "2020-09-28T09:26:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTc4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMTMyMg==", "url": "https://github.com/JanusGraph/janusgraph/pull/2202#discussion_r499711322", "bodyText": "What about simply doing assertEquals(expectedTraversal.asAdmin().getSteps(), originalTraversal.asAdmin().getSteps());?", "author": "li-boxuan", "createdAt": "2020-10-05T16:06:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTc4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNDc5NA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2202#discussion_r500024794", "bodyText": "IIRC there was a problem that equality on steps does not work as expected because of some == / equals discrepancies. I can look at that again and then reply back", "author": "rngcntr", "createdAt": "2020-10-06T06:05:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTc4MA=="}], "type": "inlineReview", "revised_code": {"commit": "9b7aea76abdc3ead93e01e3a0f43d743b2c4494a", "chunk": "diff --git a/janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java b/janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java\nindex 493593dce..7aa6b1fd5 100644\n--- a/janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java\n+++ b/janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java\n\n@@ -91,14 +91,16 @@ public class JanusGraphAssert {\n         throw new IllegalArgumentException(\"Cannot determine size of: \" + obj);\n     }\n \n+    /**\n+     * Checks the number of matching steps within a traversal and the size of it's evaluated output simultaneously.\n+     *\n+     * @param expectedResults The expected number of returned results.\n+     * @param expectedSteps The expected number of steps of type <code>expectedStepTypes</code>.\n+     * @param traversal The checked traversal.\n+     * @param expectedStepTypes The step types to be counted.\n+     */\n     public static void assertNumStep(int expectedResults, int expectedSteps, GraphTraversal traversal, Class<? extends Step>... expectedStepTypes) {\n-        int num = 0;\n-        while (traversal.hasNext()) {\n-            traversal.next();\n-            num++;\n-        }\n-\n-        assertEquals(expectedResults, num);\n+        assertEquals(expectedResults, traversal.toList().size());\n \n         //Verify that steps line up with what is expected after JanusGraph's optimizations are applied\n         List<Step> steps = traversal.asAdmin().getSteps();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTg2OQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2202#discussion_r495411869", "bodyText": "Do we have to iterate and count? What about this:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(expectedResults, num);\n          \n          \n            \n                    assertEquals(expectedResults, traversal.toList().size());", "author": "li-boxuan", "createdAt": "2020-09-26T04:10:03Z", "path": "janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java", "diffHunk": "@@ -81,4 +91,57 @@ private static boolean isEmpty(Object obj) {\n         throw new IllegalArgumentException(\"Cannot determine size of: \" + obj);\n     }\n \n+    public static void assertNumStep(int expectedResults, int expectedSteps, GraphTraversal traversal, Class<? extends Step>... expectedStepTypes) {\n+        int num = 0;\n+        while (traversal.hasNext()) {\n+            traversal.next();\n+            num++;\n+        }\n+\n+        assertEquals(expectedResults, num);", "originalCommit": "e8fef8a28ace8e31392864296d7ba7fb00abc2d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9b7aea76abdc3ead93e01e3a0f43d743b2c4494a", "chunk": "diff --git a/janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java b/janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java\nindex 493593dce..7aa6b1fd5 100644\n--- a/janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java\n+++ b/janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java\n\n@@ -91,14 +91,16 @@ public class JanusGraphAssert {\n         throw new IllegalArgumentException(\"Cannot determine size of: \" + obj);\n     }\n \n+    /**\n+     * Checks the number of matching steps within a traversal and the size of it's evaluated output simultaneously.\n+     *\n+     * @param expectedResults The expected number of returned results.\n+     * @param expectedSteps The expected number of steps of type <code>expectedStepTypes</code>.\n+     * @param traversal The checked traversal.\n+     * @param expectedStepTypes The step types to be counted.\n+     */\n     public static void assertNumStep(int expectedResults, int expectedSteps, GraphTraversal traversal, Class<? extends Step>... expectedStepTypes) {\n-        int num = 0;\n-        while (traversal.hasNext()) {\n-            traversal.next();\n-            num++;\n-        }\n-\n-        assertEquals(expectedResults, num);\n+        assertEquals(expectedResults, traversal.toList().size());\n \n         //Verify that steps line up with what is expected after JanusGraph's optimizations are applied\n         List<Step> steps = traversal.asAdmin().getSteps();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTk3NQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2202#discussion_r495411975", "bodyText": "nitpick: Can you add Javadoc for this method? The method name itself is not clear enough to understand its usage.", "author": "li-boxuan", "createdAt": "2020-09-26T04:11:02Z", "path": "janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java", "diffHunk": "@@ -81,4 +91,57 @@ private static boolean isEmpty(Object obj) {\n         throw new IllegalArgumentException(\"Cannot determine size of: \" + obj);\n     }\n \n+    public static void assertNumStep(int expectedResults, int expectedSteps, GraphTraversal traversal, Class<? extends Step>... expectedStepTypes) {", "originalCommit": "e8fef8a28ace8e31392864296d7ba7fb00abc2d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9b7aea76abdc3ead93e01e3a0f43d743b2c4494a", "chunk": "diff --git a/janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java b/janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java\nindex 493593dce..7aa6b1fd5 100644\n--- a/janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java\n+++ b/janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java\n\n@@ -91,14 +91,16 @@ public class JanusGraphAssert {\n         throw new IllegalArgumentException(\"Cannot determine size of: \" + obj);\n     }\n \n+    /**\n+     * Checks the number of matching steps within a traversal and the size of it's evaluated output simultaneously.\n+     *\n+     * @param expectedResults The expected number of returned results.\n+     * @param expectedSteps The expected number of steps of type <code>expectedStepTypes</code>.\n+     * @param traversal The checked traversal.\n+     * @param expectedStepTypes The step types to be counted.\n+     */\n     public static void assertNumStep(int expectedResults, int expectedSteps, GraphTraversal traversal, Class<? extends Step>... expectedStepTypes) {\n-        int num = 0;\n-        while (traversal.hasNext()) {\n-            traversal.next();\n-            num++;\n-        }\n-\n-        assertEquals(expectedResults, num);\n+        assertEquals(expectedResults, traversal.toList().size());\n \n         //Verify that steps line up with what is expected after JanusGraph's optimizations are applied\n         List<Step> steps = traversal.asAdmin().getSteps();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMzIwNA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2202#discussion_r495413204", "bodyText": "This test involves composite indexes, which is worth testing against different backends IMO.", "author": "li-boxuan", "createdAt": "2020-09-26T04:27:41Z", "path": "janusgraph-backend-testutils/src/main/java/org/janusgraph/graphdb/JanusGraphTest.java", "diffHunk": "@@ -4058,24 +4037,7 @@ public void testTinkerPopCardinality() {\n     }\n \n     @Test\n-    public void testTinkerPopOptimizationStrategies() {\n-        PropertyKey id = mgmt.makePropertyKey(\"id\").cardinality(Cardinality.SINGLE).dataType(Integer.class).make();\n-        PropertyKey weight = mgmt.makePropertyKey(\"weight\").cardinality(Cardinality.SINGLE).dataType(Integer.class).make();\n-\n-        mgmt.buildIndex(\"byId\", Vertex.class).addKey(id).buildCompositeIndex();\n-        mgmt.buildIndex(\"byWeight\", Vertex.class).addKey(weight).buildCompositeIndex();\n-        mgmt.buildIndex(\"byIdWeight\", Vertex.class).addKey(id).addKey(weight).buildCompositeIndex();", "originalCommit": "e8fef8a28ace8e31392864296d7ba7fb00abc2d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgwMTU5Ng==", "url": "https://github.com/JanusGraph/janusgraph/pull/2202#discussion_r495801596", "bodyText": "I never thought of it that way. My idea of it is more like: If the backends are well tested, their functioning can be assumed equivalent. Therefore it's the scope of the index tests to ensure that the backend fulfills the specification. Based on that the optimization tests can then assume a functionally correct index.", "author": "rngcntr", "createdAt": "2020-09-28T09:20:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMzIwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUzMzM5Nw==", "url": "https://github.com/JanusGraph/janusgraph/pull/2202#discussion_r499533397", "bodyText": "Are you ok with keeping this as it is? And if so, would you please review the PR again? Thanks!", "author": "rngcntr", "createdAt": "2020-10-05T11:37:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMzIwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5NTAxNg==", "url": "https://github.com/JanusGraph/janusgraph/pull/2202#discussion_r499695016", "bodyText": "That's a fair assumption. I am okay with it but I'd like to leave this conversation open in case anyone has any other opinion.", "author": "li-boxuan", "createdAt": "2020-10-05T15:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMzIwNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "9b7aea76abdc3ead93e01e3a0f43d743b2c4494a", "url": "https://github.com/JanusGraph/janusgraph/commit/9b7aea76abdc3ead93e01e3a0f43d743b2c4494a", "message": "Reorganize optimization strategies\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>", "committedDate": "2020-09-28T11:36:03Z", "type": "commit"}, {"oid": "9b7aea76abdc3ead93e01e3a0f43d743b2c4494a", "url": "https://github.com/JanusGraph/janusgraph/commit/9b7aea76abdc3ead93e01e3a0f43d743b2c4494a", "message": "Reorganize optimization strategies\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>", "committedDate": "2020-09-28T11:36:03Z", "type": "forcePushed"}]}