{"pr_number": 2004, "pr_title": "Cleanup files", "pr_createdAt": "2020-03-02T21:16:10Z", "pr_url": "https://github.com/JanusGraph/janusgraph/pull/2004", "timeline": [{"oid": "8a4116826c5cd5faed984d8708a466f2a59a9aa0", "url": "https://github.com/JanusGraph/janusgraph/commit/8a4116826c5cd5faed984d8708a466f2a59a9aa0", "message": "Cleanup files\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-03-02T21:16:33Z", "type": "forcePushed"}, {"oid": "08f044d3e6ea51fb3b5ecdd96322f1251c248e1f", "url": "https://github.com/JanusGraph/janusgraph/commit/08f044d3e6ea51fb3b5ecdd96322f1251c248e1f", "message": "Cleanup files\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-03-02T21:16:48Z", "type": "forcePushed"}, {"oid": "21129103d1b5dde77795a59e18ecb0e4709bc320", "url": "https://github.com/JanusGraph/janusgraph/commit/21129103d1b5dde77795a59e18ecb0e4709bc320", "message": "Cleanup files\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-03-03T13:19:18Z", "type": "forcePushed"}, {"oid": "43b2ed0f66a2fb68c5a0313db4a4d6e46c15efbb", "url": "https://github.com/JanusGraph/janusgraph/commit/43b2ed0f66a2fb68c5a0313db4a4d6e46c15efbb", "message": "Cleanup files\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-03-03T21:20:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNzY2NA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2004#discussion_r387437664", "bodyText": "As far as I remember (not sure) String.format is slower than concatenation due to regex (which is slow).\nI would just rewrite it like: sb.append(\">\").append(levels[i - 1]).append(\": \").append(counts[i]).append(\"; \").append(System.lineSeparator()); to make sure that we have the best performance here. Actually string concatanation is compiled into a sequence of .append by the compiler but I am not sure how it compiles string concatanations which a passed into string builder. So, as for me the safest code would be to write sequance of .append chain here instead of plain string concatanations or String.format.", "author": "porunov", "createdAt": "2020-03-04T03:59:27Z", "path": "janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/InMemoryKeyColumnValueStoreFragmentationReport.java", "diffHunk": "@@ -215,11 +215,11 @@ private void printHistogram(StringBuilder sb, int[] levels, int[] counts) {\n         int i;\n         for (i = 0; i < levels.length; i++) {\n             if (counts[i] > 0) {\n-                sb.append(\"<=\" + levels[i] + \": \" + counts[i] + \"; \");\n+                sb.append(String.format(\"<=%d: %d; \", levels[i], counts[i]));\n             }\n         }\n         if (counts[i] > 0) {\n-            sb.append(\">\" + levels[i - 1] + \": \" + counts[i] + \"; \").append(System.lineSeparator());\n+            sb.append(String.format(\">%d: %d; \", levels[i - 1], counts[i])).append(System.lineSeparator());", "originalCommit": "43b2ed0f66a2fb68c5a0313db4a4d6e46c15efbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c206e4e25484b04dffc39997372dc851240b93e7", "chunk": "diff --git a/janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/InMemoryKeyColumnValueStoreFragmentationReport.java b/janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/InMemoryKeyColumnValueStoreFragmentationReport.java\nindex 3f451fc80..7c8df3922 100644\n--- a/janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/InMemoryKeyColumnValueStoreFragmentationReport.java\n+++ b/janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/InMemoryKeyColumnValueStoreFragmentationReport.java\n\n@@ -215,11 +215,12 @@ public class InMemoryKeyColumnValueStoreFragmentationReport {\n         int i;\n         for (i = 0; i < levels.length; i++) {\n             if (counts[i] > 0) {\n-                sb.append(String.format(\"<=%d: %d; \", levels[i], counts[i]));\n+                sb.append(\"<=\").append(levels[i]).append(\": \").append(counts[i]).append(\"; \");\n             }\n         }\n         if (counts[i] > 0) {\n-            sb.append(String.format(\">%d: %d; \", levels[i - 1], counts[i])).append(System.lineSeparator());\n+            sb.append(\">\").append(levels[i - 1]).append(\": \").append(counts[i]).append(\"; \")\n+                .append(System.lineSeparator());\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNzc3MA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2004#discussion_r387437770", "bodyText": "Same here. I would use sequence of .append instead of String.format", "author": "porunov", "createdAt": "2020-03-04T04:00:06Z", "path": "janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/InMemoryKeyColumnValueStoreFragmentationReport.java", "diffHunk": "@@ -215,11 +215,11 @@ private void printHistogram(StringBuilder sb, int[] levels, int[] counts) {\n         int i;\n         for (i = 0; i < levels.length; i++) {\n             if (counts[i] > 0) {\n-                sb.append(\"<=\" + levels[i] + \": \" + counts[i] + \"; \");\n+                sb.append(String.format(\"<=%d: %d; \", levels[i], counts[i]));", "originalCommit": "43b2ed0f66a2fb68c5a0313db4a4d6e46c15efbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c206e4e25484b04dffc39997372dc851240b93e7", "chunk": "diff --git a/janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/InMemoryKeyColumnValueStoreFragmentationReport.java b/janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/InMemoryKeyColumnValueStoreFragmentationReport.java\nindex 3f451fc80..7c8df3922 100644\n--- a/janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/InMemoryKeyColumnValueStoreFragmentationReport.java\n+++ b/janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/InMemoryKeyColumnValueStoreFragmentationReport.java\n\n@@ -215,11 +215,12 @@ public class InMemoryKeyColumnValueStoreFragmentationReport {\n         int i;\n         for (i = 0; i < levels.length; i++) {\n             if (counts[i] > 0) {\n-                sb.append(String.format(\"<=%d: %d; \", levels[i], counts[i]));\n+                sb.append(\"<=\").append(levels[i]).append(\": \").append(counts[i]).append(\"; \");\n             }\n         }\n         if (counts[i] > 0) {\n-            sb.append(String.format(\">%d: %d; \", levels[i - 1], counts[i])).append(System.lineSeparator());\n+            sb.append(\">\").append(levels[i - 1]).append(\": \").append(counts[i]).append(\"; \")\n+                .append(System.lineSeparator());\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNzk5Mw==", "url": "https://github.com/JanusGraph/janusgraph/pull/2004#discussion_r387437993", "bodyText": "Same here. Try to avoid usage of String.format", "author": "porunov", "createdAt": "2020-03-04T04:01:10Z", "path": "janusgraph-examples/example-common/src/main/java/org/janusgraph/example/JanusGraphApp.java", "diffHunk": "@@ -219,10 +219,12 @@ protected String createSchemaRequest() {\n \n         // mixed indexes\n         if (useMixedIndex) {\n-            s.append(\"management.buildIndex(\\\"vAge\\\", Vertex.class).addKey(age).buildMixedIndex(\\\"\" + mixedIndexConfigName\n-                    + \"\\\"); \");\n-            s.append(\"management.buildIndex(\\\"eReasonPlace\\\", Edge.class).addKey(reason).addKey(place).buildMixedIndex(\\\"\"\n-                    + mixedIndexConfigName + \"\\\"); \");\n+            s.append(String.format(", "originalCommit": "43b2ed0f66a2fb68c5a0313db4a4d6e46c15efbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c206e4e25484b04dffc39997372dc851240b93e7", "chunk": "diff --git a/janusgraph-examples/example-common/src/main/java/org/janusgraph/example/JanusGraphApp.java b/janusgraph-examples/example-common/src/main/java/org/janusgraph/example/JanusGraphApp.java\nindex 6692f7ab5..a09fa8541 100644\n--- a/janusgraph-examples/example-common/src/main/java/org/janusgraph/example/JanusGraphApp.java\n+++ b/janusgraph-examples/example-common/src/main/java/org/janusgraph/example/JanusGraphApp.java\n\n@@ -219,12 +219,10 @@ public class JanusGraphApp extends GraphApp {\n \n         // mixed indexes\n         if (useMixedIndex) {\n-            s.append(String.format(\n-                \"management.buildIndex(\\\"vAge\\\", Vertex.class).addKey(age).buildMixedIndex(\\\"%s\\\"); \",\n-                mixedIndexConfigName));\n-            s.append(String.format(\n-                \"management.buildIndex(\\\"eReasonPlace\\\", Edge.class).addKey(reason).addKey(place).buildMixedIndex(\\\"%s\\\"); \",\n-                mixedIndexConfigName));\n+            s.append(\"management.buildIndex(\\\"vAge\\\", Vertex.class).addKey(age).buildMixedIndex(\\\"\")\n+                .append(mixedIndexConfigName).append(\"\\\"); \");\n+            s.append(\"management.buildIndex(\\\"eReasonPlace\\\", Edge.class).addKey(reason).addKey(place).buildMixedIndex(\\\"\")\n+                .append(mixedIndexConfigName).append(\"\\\"); \");\n         }\n \n         s.append(\"management.commit(); created = true; }\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzOTY1Nw==", "url": "https://github.com/JanusGraph/janusgraph/pull/2004#discussion_r387439657", "bodyText": "I would also moved this whole class into janusgraph-test because it is used only for tests.", "author": "porunov", "createdAt": "2020-03-04T04:10:11Z", "path": "janusgraph-core/src/main/java/org/janusgraph/util/datastructures/RandomRemovalList.java", "diffHunk": "@@ -134,7 +134,10 @@ public boolean contains(Object o) {\n     public boolean containsAll(Collection<?> c) {", "originalCommit": "43b2ed0f66a2fb68c5a0313db4a4d6e46c15efbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk1ODU2MQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2004#discussion_r387958561", "bodyText": "I removed the class complete.", "author": "farodin91", "createdAt": "2020-03-04T21:56:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzOTY1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c206e4e25484b04dffc39997372dc851240b93e7", "chunk": "diff --git a/janusgraph-core/src/main/java/org/janusgraph/util/datastructures/RandomRemovalList.java b/janusgraph-core/src/main/java/org/janusgraph/util/datastructures/RandomRemovalList.java\ndeleted file mode 100644\nindex 9825f777e..000000000\n--- a/janusgraph-core/src/main/java/org/janusgraph/util/datastructures/RandomRemovalList.java\n+++ /dev/null\n\n@@ -1,193 +0,0 @@\n-// Copyright 2017 JanusGraph Authors\n-//\n-// Licensed under the Apache License, Version 2.0 (the \"License\");\n-// you may not use this file except in compliance with the License.\n-// You may obtain a copy of the License at\n-//\n-//      http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n-package org.janusgraph.util.datastructures;\n-\n-import com.google.common.base.Preconditions;\n-\n-import java.util.*;\n-\n-/**\n- * A list that allows efficient random removals.\n- *\n- * @param <T>\n- *\n- * @author Matthias Broecheler (me@matthiasb.com)\n- */\n-public class RandomRemovalList<T> implements Collection<T>, Iterator<T> {\n-\n-    public static final Random random = new Random();\n-\n-    private List<T> list;\n-    private final static int numTriesBeforeCompaction = 13;\n-    private static final double fillFactor = 1.05;\n-    private int size;\n-    private int numberOfCompactions;\n-\n-\n-    private boolean isIterating;\n-\n-\n-    public RandomRemovalList() {\n-        this(10);\n-    }\n-\n-    public RandomRemovalList(int capacity) {\n-        list = new ArrayList<>(capacity);\n-        size = 0;\n-        numberOfCompactions = 0;\n-        isIterating = false;\n-    }\n-\n-    public RandomRemovalList(Collection<T> objects) {\n-        list = new ArrayList<>(objects);\n-        size = objects.size();\n-        numberOfCompactions = 0;\n-        isIterating = false;\n-    }\n-\n-    @Override\n-    public boolean add(T obj) {\n-        Preconditions.checkNotNull(obj, \"Random Removal lists only contain non-null elements\");\n-        Preconditions.checkArgument(!isIterating, \"Cannot add to a random removal list while it is being iterated over\");\n-        size++;\n-        return list.add(obj);\n-    }\n-\n-    public T getRandom() {\n-        assert size >= 0;\n-        if (size == 0) throw new NoSuchElementException(\"List is empty\");\n-        int numTries = 0;\n-        T element;\n-        int pos;\n-        do {\n-            pos = random.nextInt(list.size());\n-            element = list.get(pos);\n-            numTries++;\n-        } while (element == null && numTries < numTriesBeforeCompaction);\n-        if (element != null) {\n-            list.set(pos, null);\n-            size--;\n-            return element;\n-        } else {\n-            //Compact list\n-            final List<T> newList = new ArrayList<>((int) Math.ceil(fillFactor * size));\n-            for (T obj : list) {\n-                if (obj != null) newList.add(obj);\n-            }\n-            list = newList;\n-            numberOfCompactions++;\n-            return getRandom();\n-        }\n-    }\n-\n-    @Override\n-    public int size() {\n-        assert size >= 0;\n-        return size;\n-    }\n-\n-    @Override\n-    public boolean isEmpty() {\n-        assert size >= 0;\n-        return size == 0;\n-    }\n-\n-    public int getNumCompactions() {\n-        return numberOfCompactions;\n-    }\n-\n-    @Override\n-    public boolean addAll(Collection<? extends T> c) {\n-        boolean ret = true;\n-        for (T obj : c) {\n-            if (!add(obj)) ret = false;\n-        }\n-        return ret;\n-    }\n-\n-\n-    @Override\n-    public void clear() {\n-        list.clear();\n-        size = 0;\n-        numberOfCompactions = 0;\n-    }\n-\n-    @Override\n-    public boolean contains(Object o) {\n-        return o != null && list.contains(o);\n-    }\n-\n-    @Override\n-    public boolean containsAll(Collection<?> c) {\n-        boolean ret = true;\n-        for (Object obj : c) {\n-            if (!contains(obj)) {\n-                ret = false;\n-                break;\n-            }\n-        }\n-        return ret;\n-    }\n-\n-    @Override\n-    public boolean hasNext() {\n-        isIterating = true;\n-        return !isEmpty();\n-    }\n-\n-    @Override\n-    public T next() {\n-        isIterating = true;\n-        return getRandom();\n-    }\n-\n-    @Override\n-    public void remove() {\n-        throw new UnsupportedOperationException(\"Element has already been removed\");\n-    }\n-\n-    @Override\n-    public Iterator<T> iterator() {\n-        return this;\n-    }\n-\n-    @Override\n-    public boolean remove(Object o) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public boolean removeAll(Collection<?> c) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public boolean retainAll(Collection<?> c) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public Object[] toArray() {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public <E> E[] toArray(E[] a) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-\n-}\n"}}, {"oid": "c206e4e25484b04dffc39997372dc851240b93e7", "url": "https://github.com/JanusGraph/janusgraph/commit/c206e4e25484b04dffc39997372dc851240b93e7", "message": "Cleanup files\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-03-04T21:47:58Z", "type": "commit"}, {"oid": "c206e4e25484b04dffc39997372dc851240b93e7", "url": "https://github.com/JanusGraph/janusgraph/commit/c206e4e25484b04dffc39997372dc851240b93e7", "message": "Cleanup files\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-03-04T21:47:58Z", "type": "forcePushed"}]}