{"pr_number": 2169, "pr_title": "Upgrade DataStax cassandra driver to 4.9.0 [full build]", "pr_createdAt": "2020-07-14T15:38:28Z", "pr_url": "https://github.com/JanusGraph/janusgraph/pull/2169", "timeline": [{"oid": "65274ad7fffe5b0acd2d7c12cf7ffe23c7e01376", "url": "https://github.com/JanusGraph/janusgraph/commit/65274ad7fffe5b0acd2d7c12cf7ffe23c7e01376", "message": "Upgrade DataStax cassandra driver to 4.7.2 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-07-14T16:44:19Z", "type": "forcePushed"}, {"oid": "db52ea36e63016f9ce44154bd5a3f838533fa83a", "url": "https://github.com/JanusGraph/janusgraph/commit/db52ea36e63016f9ce44154bd5a3f838533fa83a", "message": "Upgrade DataStax cassandra driver to 4.7.2 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-07-20T08:00:51Z", "type": "forcePushed"}, {"oid": "36741358b03c6b9135a5c200aa1aa35260672be5", "url": "https://github.com/JanusGraph/janusgraph/commit/36741358b03c6b9135a5c200aa1aa35260672be5", "message": "Upgrade DataStax cassandra driver to 4.7.2 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-07-20T08:26:48Z", "type": "forcePushed"}, {"oid": "8bdfeb4543563af4914ad973142b44ed4e42fd11", "url": "https://github.com/JanusGraph/janusgraph/commit/8bdfeb4543563af4914ad973142b44ed4e42fd11", "message": "Upgrade DataStax cassandra driver to 4.7.2 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-07-24T08:50:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4NTE5OA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r461385198", "bodyText": "@porunov Looks like isExhausted() was removed in driver 4.x but it wasn't replaced by isFullyFetched() as that also existed in version 3.x. From looking at the implementation of currentResultSet.one() I assume that here we should be writing:\n            return currentResultSet.iterator().hasNext();\nThat seems to get a few more tests passing.", "author": "smcquillan", "createdAt": "2020-07-28T07:48:06Z", "path": "janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java", "diffHunk": "@@ -450,7 +473,7 @@ public CQLPagingIterator(final int pageSize, Supplier<Statement> statementSuppli\n \n         @Override\n         public boolean hasNext() {\n-            return !currentResultSet.isExhausted();\n+            return !currentResultSet.isFullyFetched();", "originalCommit": "8bdfeb4543563af4914ad973142b44ed4e42fd11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39d0a674df18186835aeae295dc05c401a8b1618", "chunk": "diff --git a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java\nindex d3f7b0ea6..1bb2aa289 100644\n--- a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java\n+++ b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java\n\n@@ -457,42 +457,43 @@ public class CQLKeyColumnValueStore implements KeyColumnValueStore {\n     private class CQLPagingIterator implements Iterator<Row> {\n \n         private ResultSet currentResultSet;\n+        private java.util.Iterator<Row> currentPageIterator;\n \n-        private int index;\n-        private final int paginatedResultSize;\n         private final Supplier<BatchableStatement<BoundStatement>> statementSupplier;\n \n-        private ByteBuffer lastPagingState = null;\n-\n-        public CQLPagingIterator(final int pageSize, Supplier<BatchableStatement<BoundStatement>> statementSupplier) {\n-            this.index = 0;\n-            this.paginatedResultSize = pageSize;\n+        public CQLPagingIterator(Supplier<BatchableStatement<BoundStatement>> statementSupplier) {\n             this.statementSupplier = statementSupplier;\n-            this.currentResultSet = getResultSet();\n+            updateResultSet();\n         }\n \n         @Override\n         public boolean hasNext() {\n-            return !currentResultSet.isFullyFetched();\n+            if(currentPageIterator.hasNext()){\n+                return true;\n+            }\n+            if(currentResultSet.isFullyFetched()){\n+                return false;\n+            }\n+            updateResultSet();\n+            return currentPageIterator.hasNext();\n         }\n \n         @Override\n         public Row next() {\n-            if(index == paginatedResultSize) {\n-                currentResultSet = getResultSet();\n-                this.index = 0;\n+            if(!currentPageIterator.hasNext()){\n+                updateResultSet();\n             }\n-            this.index++;\n-            lastPagingState = currentResultSet.getExecutionInfo().getPagingState();\n-            return currentResultSet.one();\n+            return currentPageIterator.next();\n         }\n \n-        private ResultSet getResultSet() {\n+        private void updateResultSet() {\n             BatchableStatement<BoundStatement> boundStmnt = statementSupplier.get();\n-            if (lastPagingState != null) {\n+            if (currentResultSet != null) {\n+                ByteBuffer lastPagingState = currentResultSet.getExecutionInfo().getPagingState();\n                 boundStmnt = boundStmnt.setPagingState(lastPagingState);\n             }\n-            return session.execute(boundStmnt);\n+            currentResultSet = session.execute(boundStmnt);\n+            currentPageIterator = currentResultSet.iterator();\n         }\n     }\n }\n"}}, {"oid": "39d0a674df18186835aeae295dc05c401a8b1618", "url": "https://github.com/JanusGraph/janusgraph/commit/39d0a674df18186835aeae295dc05c401a8b1618", "message": "Upgrade DataStax cassandra driver to 4.7.2 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-07-28T08:40:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIxNTkyNA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r462215924", "bodyText": "@porunov Think I finally now understand the reason why some of the tests are failing with the Mockito exception\norg.mockito.exceptions.misusing.UnnecessaryStubbingException\n\nAnd it's because the session member variable was made final and this prevents the @InjectMocks annotation in CQLStoreTest from injecting the mock session instance which the tests are expecting. When I remove the final qualifier from the session the tests pass for me.", "author": "smcquillan", "createdAt": "2020-07-29T11:01:49Z", "path": "janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLStoreManager.java", "diffHunk": "@@ -148,9 +82,7 @@\n     final ExecutorService executorService;\n \n     @Resource\n-    private Cluster cluster;\n-    @Resource\n-    private Session session;\n+    private final CqlSession session;", "originalCommit": "39d0a674df18186835aeae295dc05c401a8b1618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a42af456a8fcb8303a17a1856a2035f4a812adfd", "chunk": "diff --git a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLStoreManager.java b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLStoreManager.java\nindex 2c4a0339a..74afefe2a 100644\n--- a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLStoreManager.java\n+++ b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLStoreManager.java\n\n@@ -82,7 +82,7 @@ public class CQLStoreManager extends DistributedStoreManager implements KeyColum\n     final ExecutorService executorService;\n \n     @Resource\n-    private final CqlSession session;\n+    private CqlSession session;\n     private final StoreFeatures storeFeatures;\n     private final Map<String, CQLKeyColumnValueStore> openStores;\n     private final Deployment deployment;\n"}}, {"oid": "a42af456a8fcb8303a17a1856a2035f4a812adfd", "url": "https://github.com/JanusGraph/janusgraph/commit/a42af456a8fcb8303a17a1856a2035f4a812adfd", "message": "Upgrade DataStax cassandra driver to 4.8.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-07-29T11:18:11Z", "type": "forcePushed"}, {"oid": "a623a674c44ee28dd4aaad0769b01e2fe83f8aec", "url": "https://github.com/JanusGraph/janusgraph/commit/a623a674c44ee28dd4aaad0769b01e2fe83f8aec", "message": "Upgrade DataStax cassandra driver to 4.8.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-07-29T11:41:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg3MjU4Mw==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r462872583", "bodyText": "@porunov Build is  failing on cassandra3-murmur-ssl with:\njava.lang.IllegalArgumentException: Invalid configuration value for [root.storage.cql.ssl.keystore.location]:\n\nThis is because we're setting the key store options when client auth has not been enabled. So these options need moved out to something like:\n            if(configuration.get(SSL_CLIENT_AUTHENTICATION_ENABLED)) {\n            \tconfigLoaderBuilder.withString(DefaultDriverOption.SSL_KEYSTORE_PATH, configuration.get(SSL_KEYSTORE_LOCATION))\n                                   .withString(DefaultDriverOption.SSL_KEYSTORE_PASSWORD, configuration.get(SSL_KEYSTORE_KEY_PASSWORD));\n            }", "author": "smcquillan", "createdAt": "2020-07-30T09:32:13Z", "path": "janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLStoreManager.java", "diffHunk": "@@ -227,114 +159,71 @@ public CQLStoreManager(final Configuration configuration) throws BackendExceptio\n         this.openStores = new ConcurrentHashMap<>();\n     }\n \n-    private void initializeJmxMetrics() {\n-        final Configuration configuration = getStorageConfig();\n-        if (configuration.get(METRICS_JMX_ENABLED) && configuration.get(BASIC_METRICS)) {\n-            MetricManager.INSTANCE.getRegistry().registerAll(cluster.getMetrics().getRegistry());\n-        }\n-    }\n-\n-    Cluster initializeCluster() throws PermanentBackendException {\n+    CqlSession initializeSession() throws PermanentBackendException {\n         final Configuration configuration = getStorageConfig();\n \n         final List<InetSocketAddress> contactPoints;\n         try {\n             contactPoints = Array.of(this.hostnames)\n-                    .map(hostName -> hostName.split(\":\"))\n-                    .map(array -> Tuple.of(array[0], array.length == 2 ? Integer.parseInt(array[1]) : this.port))\n-                    .map(tuple -> new InetSocketAddress(tuple._1, tuple._2))\n-                    .toJavaList();\n+                .map(hostName -> hostName.split(\":\"))\n+                .map(array -> Tuple.of(array[0], array.length == 2 ? Integer.parseInt(array[1]) : this.port))\n+                .map(tuple -> new InetSocketAddress(tuple._1, tuple._2))\n+                .toJavaList();\n         } catch (SecurityException | ArrayIndexOutOfBoundsException | NumberFormatException e) {\n             throw new PermanentBackendException(\"Error initialising cluster contact points\", e);\n         }\n \n-        final Builder builder = Cluster.builder()\n-            .withoutJMXReporting()\n-            .addContactPointsWithPorts(contactPoints)\n-            .withClusterName(configuration.get(CLUSTER_NAME));\n+        final CqlSessionBuilder builder = CqlSession.builder()\n+            .addContactPoints(contactPoints)\n+            .withLocalDatacenter(configuration.get(LOCAL_DATACENTER));\n+\n+        ProgrammaticDriverConfigLoaderBuilder configLoaderBuilder = DriverConfigLoader.programmaticBuilder();\n+        configLoaderBuilder.withString(DefaultDriverOption.SESSION_NAME, configuration.get(SESSION_NAME));\n \n         if (configuration.get(PROTOCOL_VERSION) != 0) {\n-            builder.withProtocolVersion(ProtocolVersion.fromInt(configuration.get(PROTOCOL_VERSION)));\n+            configLoaderBuilder.withInt(DefaultDriverOption.PROTOCOL_VERSION, configuration.get(PROTOCOL_VERSION));\n         }\n \n         if (configuration.has(AUTH_USERNAME) && configuration.has(AUTH_PASSWORD)) {\n-            builder.withCredentials(configuration.get(AUTH_USERNAME), configuration.get(AUTH_PASSWORD));\n-        }\n-\n-        if (configuration.has(LOCAL_DATACENTER)) {\n-            builder.withLoadBalancingPolicy(new TokenAwarePolicy(DCAwareRoundRobinPolicy.builder()\n-                    .withLocalDc(configuration.get(LOCAL_DATACENTER))\n-                    .build()));\n+            configLoaderBuilder\n+                .withClass(DefaultDriverOption.AUTH_PROVIDER_CLASS, PlainTextAuthProvider.class)\n+                .withString(DefaultDriverOption.AUTH_PROVIDER_USER_NAME, configuration.get(AUTH_USERNAME))\n+                .withString(DefaultDriverOption.AUTH_PROVIDER_PASSWORD, configuration.get(AUTH_PASSWORD));\n         }\n \n         if (configuration.get(SSL_ENABLED)) {\n-            try {\n-                KeyManager[] keyManagers = null;\n-                if(configuration.get(SSL_CLIENT_AUTHENTICATION_ENABLED)) {\n-                    try (final FileInputStream keyStoreStream = new FileInputStream(configuration.get(SSL_KEYSTORE_LOCATION))) {\n-                        final KeyStore keystore = KeyStore.getInstance(\"jks\");\n-                        keystore.load(keyStoreStream, configuration.get(SSL_KEYSTORE_STORE_PASSWORD).toCharArray());\n-                        final KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n-                        keyManagerFactory.init(keystore, configuration.get(SSL_KEYSTORE_KEY_PASSWORD).toCharArray());\n-                        keyManagers = keyManagerFactory.getKeyManagers();\n-                    }\n-                }\n-                final TrustManager[] trustManagers;\n-                try (final FileInputStream keyStoreStream = new FileInputStream(configuration.get(SSL_TRUSTSTORE_LOCATION))) {\n-                    final KeyStore keystore = KeyStore.getInstance(\"jks\");\n-                    keystore.load(keyStoreStream, configuration.get(SSL_TRUSTSTORE_PASSWORD).toCharArray());\n-                    final TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n-                    trustManagerFactory.init(keystore);\n-                    trustManagers = trustManagerFactory.getTrustManagers();\n-                }\n-\n-                final SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n-                sslContext.init(keyManagers, trustManagers, null);\n-\n-                final JdkSSLOptions sslOptions = JdkSSLOptions.builder()\n-                        .withSSLContext(sslContext)\n-                        .build();\n-                builder.withSSL(sslOptions);\n-\n-            } catch (UnrecoverableKeyException | NoSuchAlgorithmException | CertificateException | IOException | KeyStoreException | KeyManagementException e) {\n-                throw new PermanentBackendException(\"Error initialising SSL connection properties\", e);\n-            }\n+            configLoaderBuilder\n+                .withClass(DefaultDriverOption.SSL_ENGINE_FACTORY_CLASS, DefaultSslEngineFactory.class)\n+                .withString(DefaultDriverOption.SSL_KEYSTORE_PATH, configuration.get(SSL_KEYSTORE_LOCATION))\n+                .withString(DefaultDriverOption.SSL_KEYSTORE_PASSWORD, configuration.get(SSL_KEYSTORE_KEY_PASSWORD))", "originalCommit": "a623a674c44ee28dd4aaad0769b01e2fe83f8aec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ee05636dcab914f041256cf8423ff9e1c671978", "chunk": "diff --git a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLStoreManager.java b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLStoreManager.java\nindex 74afefe2a..90c99b36f 100644\n--- a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLStoreManager.java\n+++ b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLStoreManager.java\n\n@@ -179,6 +179,7 @@ public class CQLStoreManager extends DistributedStoreManager implements KeyColum\n \n         ProgrammaticDriverConfigLoaderBuilder configLoaderBuilder = DriverConfigLoader.programmaticBuilder();\n         configLoaderBuilder.withString(DefaultDriverOption.SESSION_NAME, configuration.get(SESSION_NAME));\n+        configLoaderBuilder.withDuration(DefaultDriverOption.REQUEST_TIMEOUT, configuration.get(CONNECTION_TIMEOUT));\n \n         if (configuration.get(PROTOCOL_VERSION) != 0) {\n             configLoaderBuilder.withInt(DefaultDriverOption.PROTOCOL_VERSION, configuration.get(PROTOCOL_VERSION));\n"}}, {"oid": "2ee05636dcab914f041256cf8423ff9e1c671978", "url": "https://github.com/JanusGraph/janusgraph/commit/2ee05636dcab914f041256cf8423ff9e1c671978", "message": "Upgrade DataStax cassandra driver to 4.8.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-07-31T09:06:29Z", "type": "forcePushed"}, {"oid": "98d47581855030cfe7a23ee69f6191f7c19c6117", "url": "https://github.com/JanusGraph/janusgraph/commit/98d47581855030cfe7a23ee69f6191f7c19c6117", "message": "Upgrade DataStax cassandra driver to 4.8.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-08-05T15:14:22Z", "type": "forcePushed"}, {"oid": "46cb514ca0f73681499705aa5f7e5a8ffefcbf17", "url": "https://github.com/JanusGraph/janusgraph/commit/46cb514ca0f73681499705aa5f7e5a8ffefcbf17", "message": "Upgrade DataStax cassandra driver to 4.8.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-08-06T16:04:51Z", "type": "forcePushed"}, {"oid": "86587a3873b6554b18650d1e54ca72db7e53d0b5", "url": "https://github.com/JanusGraph/janusgraph/commit/86587a3873b6554b18650d1e54ca72db7e53d0b5", "message": "Upgrade DataStax cassandra driver to 4.8.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-08-06T16:06:46Z", "type": "forcePushed"}, {"oid": "25430508a29441bb84e847efad06aefee3c5432a", "url": "https://github.com/JanusGraph/janusgraph/commit/25430508a29441bb84e847efad06aefee3c5432a", "message": "Upgrade DataStax cassandra driver to 4.8.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-08-06T18:10:23Z", "type": "forcePushed"}, {"oid": "74fec9e0d6d3c151b9f61a0a96541ccb6c9f8244", "url": "https://github.com/JanusGraph/janusgraph/commit/74fec9e0d6d3c151b9f61a0a96541ccb6c9f8244", "message": "Upgrade DataStax cassandra driver to 4.8.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-08-06T18:32:27Z", "type": "forcePushed"}, {"oid": "7637103b87ec20f3b7737a65aab7a6434ab0155c", "url": "https://github.com/JanusGraph/janusgraph/commit/7637103b87ec20f3b7737a65aab7a6434ab0155c", "message": "Upgrade DataStax cassandra driver to 4.8.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-08-06T20:41:38Z", "type": "forcePushed"}, {"oid": "2f16cb766b069031351ff09068303c14fe42af62", "url": "https://github.com/JanusGraph/janusgraph/commit/2f16cb766b069031351ff09068303c14fe42af62", "message": "Upgrade DataStax cassandra driver to 4.9.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-09-11T08:45:50Z", "type": "forcePushed"}, {"oid": "6b08b5303b871b897ef535d2ca6813ac62149b6b", "url": "https://github.com/JanusGraph/janusgraph/commit/6b08b5303b871b897ef535d2ca6813ac62149b6b", "message": "Upgrade DataStax cassandra driver to 4.9.0 and TinkerPop to 3.4.8 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-09-11T09:49:41Z", "type": "forcePushed"}, {"oid": "e9b3ae6bdc4deac34dc21426126627dd09805777", "url": "https://github.com/JanusGraph/janusgraph/commit/e9b3ae6bdc4deac34dc21426126627dd09805777", "message": "Upgrade DataStax cassandra driver to 4.9.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-09-11T11:14:34Z", "type": "forcePushed"}, {"oid": "d9d3b24b150596496ba523408b9e3aedbd5a1815", "url": "https://github.com/JanusGraph/janusgraph/commit/d9d3b24b150596496ba523408b9e3aedbd5a1815", "message": "Upgrade DataStax cassandra driver to 4.9.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-09-12T09:02:00Z", "type": "forcePushed"}, {"oid": "9bce257566c57307cbb9dbed9b73235fe2c15d41", "url": "https://github.com/JanusGraph/janusgraph/commit/9bce257566c57307cbb9dbed9b73235fe2c15d41", "message": "Upgrade DataStax cassandra driver to 4.9.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-11-13T20:34:12Z", "type": "forcePushed"}, {"oid": "20cae066cd9c8bb31e7e4cc5a086bcf9b9dd6e5e", "url": "https://github.com/JanusGraph/janusgraph/commit/20cae066cd9c8bb31e7e4cc5a086bcf9b9dd6e5e", "message": "Upgrade DataStax cassandra driver to 4.9.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-11-14T00:10:48Z", "type": "forcePushed"}, {"oid": "ff9a0e612a5d13682a91e543acdff05688d0f43c", "url": "https://github.com/JanusGraph/janusgraph/commit/ff9a0e612a5d13682a91e543acdff05688d0f43c", "message": "Upgrade DataStax cassandra driver to 4.9.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-11-14T00:24:51Z", "type": "forcePushed"}, {"oid": "ea4abfd4b67a99b8adcb2ce3e5fdb5f2289d65dd", "url": "https://github.com/JanusGraph/janusgraph/commit/ea4abfd4b67a99b8adcb2ce3e5fdb5f2289d65dd", "message": "Upgrade DataStax cassandra driver to 4.9.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-11-14T00:32:04Z", "type": "forcePushed"}, {"oid": "66dede423113a5b7ad2d49605bc083443e4472a6", "url": "https://github.com/JanusGraph/janusgraph/commit/66dede423113a5b7ad2d49605bc083443e4472a6", "message": "Upgrade DataStax cassandra driver to 4.9.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-11-14T15:20:18Z", "type": "forcePushed"}, {"oid": "709322ea55075d3e174954222f4ae8056eaa7d00", "url": "https://github.com/JanusGraph/janusgraph/commit/709322ea55075d3e174954222f4ae8056eaa7d00", "message": "Upgrade DataStax cassandra driver to 4.9.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-11-14T16:14:33Z", "type": "forcePushed"}, {"oid": "672bfb0c37039deefedeb7522afc761803b00e81", "url": "https://github.com/JanusGraph/janusgraph/commit/672bfb0c37039deefedeb7522afc761803b00e81", "message": "Upgrade DataStax cassandra driver to 4.9.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-11-14T16:17:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4MTM3Mg==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r524381372", "bodyText": "Do you know when this line will be executed? Codecov shows this is not covered. By testing locally, I created a graph with a million vertices and did a full scan, but still, this line was not executed.", "author": "li-boxuan", "createdAt": "2020-11-16T16:04:28Z", "path": "janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java", "diffHunk": "@@ -434,43 +444,43 @@ public KeyIterator getKeys(final SliceQuery query, final StoreTransaction txh) t\n     private class CQLPagingIterator implements Iterator<Row> {\n \n         private ResultSet currentResultSet;\n+        private java.util.Iterator<Row> currentPageIterator;\n \n-        private int index;\n-        private int paginatedResultSize;\n-        private final Supplier<Statement> statementSupplier;\n+        private final Supplier<BatchableStatement<BoundStatement>> statementSupplier;\n \n-        private byte[] lastPagingState = null;\n-\n-        public CQLPagingIterator(final int pageSize, Supplier<Statement> statementSupplier) {\n-            this.index = 0;\n-            this.paginatedResultSize = pageSize;\n+        public CQLPagingIterator(Supplier<BatchableStatement<BoundStatement>> statementSupplier) {\n             this.statementSupplier = statementSupplier;\n-            this.currentResultSet = getResultSet();\n+            updateResultSet();\n         }\n \n         @Override\n         public boolean hasNext() {\n-            return !currentResultSet.isExhausted();\n+            if(currentPageIterator.hasNext()){\n+                return true;\n+            }\n+            if(currentResultSet.isFullyFetched()){\n+                return false;\n+            }\n+            updateResultSet();", "originalCommit": "672bfb0c37039deefedeb7522afc761803b00e81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM5MjMzNA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r524392334", "bodyText": "Hmm. Interesting. This line should be executed when currentPageIterator has no any elements on this page but there are still some pages available i.e. !currentPageIterator.hasNext() && !currentResultSet.isFullyFetched()", "author": "porunov", "createdAt": "2020-11-16T16:19:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4MTM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM5NTA0Nw==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r524395047", "bodyText": "Did you have 1,000,000 vertices in currentPageIterator?", "author": "porunov", "createdAt": "2020-11-16T16:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4MTM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM5NjI1Ng==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r524396256", "bodyText": "What was your storeManager.getPageSize()? Did you change storage.page-size parameter?", "author": "porunov", "createdAt": "2020-11-16T16:24:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4MTM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQwODE4MQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r524408181", "bodyText": "Interesting. This line isn't reachable for me as well.", "author": "porunov", "createdAt": "2020-11-16T16:40:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4MTM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDcxMDY4Nw==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r524710687", "bodyText": "I will check that again. Looks like pages are fetched automatically but as far as I remember it wasn't true for the new driver. Maybe something changed or I missed something and pages are fetched automatically in the iterator. I will check that. Nevertheless this logic shouldn't break anything but if this logic is redundant we should remove it to simplify it.", "author": "porunov", "createdAt": "2020-11-16T22:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4MTM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwMjcxNQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r525102715", "bodyText": "Okay, I checked, indeed DSE driver automatically fetches pages but now I see why this iterator was implemented. It has a comment above that automatic DSE pagination could lead to OOM because it was storing the whole history. Thus, we were adding another level of pagination. I will check if it is the issue still and if so will fix this part of the logic. Thank you for catching this!", "author": "porunov", "createdAt": "2020-11-17T12:03:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4MTM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1MjY4NQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r526452685", "bodyText": "ExecutionInfo is stored for each new page as seen here:\nhttps://github.com/datastax/java-driver/blob/c225588811a85e25d98790ce4b4f399e0ca066e4/core/src/main/java/com/datastax/dse/driver/internal/core/graph/MultiPageGraphResultSet.java#L108\nSo, potentially it may result in OOM. Thus, I'm changing the logic of this iterator back to forcing new request per page as it was before. It's great that you noticed this issue @li-boxuan ! Thanks!", "author": "porunov", "createdAt": "2020-11-18T22:03:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4MTM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxMDY4NQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r526510685", "bodyText": "Fixed with explanations here: #2169 (comment)", "author": "porunov", "createdAt": "2020-11-19T00:23:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4MTM3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "eba708f181a22ce9e7698f7a1d8d449c0d132e45", "chunk": "diff --git a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java\nindex ffba3cf1c..9e0e242c7 100644\n--- a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java\n+++ b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java\n\n@@ -446,17 +445,21 @@ public class CQLKeyColumnValueStore implements KeyColumnValueStore {\n         private ResultSet currentResultSet;\n         private java.util.Iterator<Row> currentPageIterator;\n \n-        private final Supplier<BatchableStatement<BoundStatement>> statementSupplier;\n+        private int index;\n+        private final int paginatedResultSize;\n \n-        public CQLPagingIterator(Supplier<BatchableStatement<BoundStatement>> statementSupplier) {\n-            this.statementSupplier = statementSupplier;\n+        private BoundStatement boundStatement;\n+\n+        public CQLPagingIterator(final int pageSize, BoundStatement boundStatement) {\n+            this.paginatedResultSize = pageSize;\n+            this.boundStatement = boundStatement;\n             updateResultSet();\n         }\n \n         @Override\n         public boolean hasNext() {\n-            if(currentPageIterator.hasNext()){\n-                return true;\n+            if(index<paginatedResultSize){\n+                return currentPageIterator.hasNext();\n             }\n             if(currentResultSet.isFullyFetched()){\n                 return false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAyNDc2NQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r526024765", "bodyText": "nitpick: Missing space after the period. If you search \"between 0 and 5\" you will see the other two places where space is missing between two sentences.", "author": "li-boxuan", "createdAt": "2020-11-18T11:46:47Z", "path": "janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLConfigOptions.java", "diffHunk": "@@ -283,6 +284,175 @@\n              * the same Cassandra DC.\n              */\n             ConfigOption.Type.MASKABLE,\n-            String.class);\n-\n+            String.class,\n+        \"datacenter1\");\n+\n+    // Netty\n+\n+    ConfigNamespace NETTY = new ConfigNamespace(\n+        CQL_NS,\n+        \"netty\",\n+        \"Configuration options related to the Netty event loop groups used internally by the CQL driver.\");\n+\n+    ConfigOption<Integer> NETTY_IO_SIZE = new ConfigOption<>(\n+        NETTY,\n+        \"io-size\",\n+        \"The number of threads for the event loop group used for I/O operations \" +\n+            \"(reading and writing to Cassandra nodes). \" +\n+            \"If this is set to 0, the driver will use `Runtime.getRuntime().availableProcessors() * 2`.\",\n+        ConfigOption.Type.LOCAL,\n+        Integer.class,\n+        0);\n+\n+    ConfigOption<Integer> NETTY_ADMIN_SIZE = new ConfigOption<>(\n+        NETTY,\n+        \"admin-size\",\n+        \"The number of threads for the event loop group used for admin tasks not related to request I/O \" +\n+            \"(handle cluster events, refresh metadata, schedule reconnections, etc.). \" +\n+            \"If this is set to 0, the driver will use `Runtime.getRuntime().availableProcessors() * 2`.\",\n+        ConfigOption.Type.LOCAL,\n+        Integer.class,\n+        0);\n+\n+    ConfigOption<Long> NETTY_TIMER_TICK_DURATION = new ConfigOption<>(\n+        NETTY,\n+        \"timer-tick-duration\",\n+        \"The timer tick duration in milliseconds. This is how frequent the timer should wake up to check for timed-out tasks \" +\n+            \"or speculative executions. See DataStax Java Driver option \" +\n+            DefaultDriverOption.NETTY_TIMER_TICK_DURATION.getPath() + \" for more information.\",\n+        ConfigOption.Type.LOCAL,\n+        Long.class);\n+\n+    ConfigOption<Integer> NETTY_TIMER_TICKS_PER_WHEEL = new ConfigOption<>(\n+        NETTY,\n+        \"timer-ticks-per-wheel\",\n+        \"Number of ticks in a Timer wheel. See DataStax Java Driver option \" +\n+            DefaultDriverOption.NETTY_TIMER_TICKS_PER_WHEEL.getPath() + \" for more information.\",\n+        ConfigOption.Type.LOCAL,\n+        Integer.class);\n+\n+    // Metrics\n+\n+    ConfigNamespace METRICS = new ConfigNamespace(\n+        CQL_NS,\n+        \"metrics\",\n+        \"Configuration options for CQL metrics\");\n+\n+    ConfigOption<String[]> METRICS_SESSION_ENABLED = new ConfigOption<>(\n+        METRICS,\n+        \"session-enabled\",\n+        \"Comma separated list of enabled session metrics. Used only when basic metrics are enabled. \" +\n+            \"Check DataStax Cassandra Driver 4 documentation for available metrics \" +\n+            \"(example: bytes-sent, bytes-received, connected-nodes).\",\n+        ConfigOption.Type.LOCAL,\n+        String[].class);\n+\n+    ConfigOption<Long> METRICS_SESSION_REQUESTS_HIGHEST_LATENCY = new ConfigOption<>(\n+        METRICS,\n+        \"cql-requests-highest-latency\",\n+        \"The largest latency that we expect to record for requests in milliseconds. \" +\n+            \"Used if 'cql-requests' session metric is enabled. \"+\n+            \"See DataStax driver configuration option `\"\n+            +DefaultDriverOption.METRICS_SESSION_CQL_REQUESTS_HIGHEST.getPath()+\"`\",\n+        ConfigOption.Type.LOCAL,\n+        Long.class);\n+\n+    ConfigOption<Integer> METRICS_SESSION_REQUESTS_SIGNIFICANT_DIGITS = new ConfigOption<>(\n+        METRICS,\n+        \"cql-requests-significant-digits\",\n+        \"The number of significant decimal digits to which internal structures will maintain value resolution \" +\n+            \"and separation for requests. This must be between 0 and 5.\" +", "originalCommit": "672bfb0c37039deefedeb7522afc761803b00e81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eba708f181a22ce9e7698f7a1d8d449c0d132e45", "chunk": "diff --git a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLConfigOptions.java b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLConfigOptions.java\nindex 0de795ad6..7cdc7df59 100644\n--- a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLConfigOptions.java\n+++ b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLConfigOptions.java\n\n@@ -276,9 +276,8 @@ public interface CQLConfigOptions {\n     ConfigOption<String> LOCAL_DATACENTER = new ConfigOption<>(\n             CQL_NS,\n             \"local-datacenter\",\n-            \"The name of the local or closest Cassandra datacenter.  When set and not whitespace, \" +\n-                    \"this value will be passed into ConnectionPoolConfigurationImpl.setLocalDatacenter. \" +\n-                    \"When unset or set to whitespace, setLocalDatacenter will not be invoked.\",\n+            \"The name of the local or closest Cassandra datacenter. \" +\n+                \"This value will be passed into CqlSessionBuilder.withLocalDatacenter.\",\n             /*\n              * It's between either LOCAL or MASKABLE. MASKABLE could be useful for cases where all the JanusGraph instances are closest to\n              * the same Cassandra DC.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIwNzI5MQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r526207291", "bodyText": "nitpick: missing backquote around DefaultDriverOption.NETTY_TIMER_TICK_DURATION.getPath(). Same for next config option.", "author": "li-boxuan", "createdAt": "2020-11-18T16:03:57Z", "path": "janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLConfigOptions.java", "diffHunk": "@@ -283,6 +284,175 @@\n              * the same Cassandra DC.\n              */\n             ConfigOption.Type.MASKABLE,\n-            String.class);\n-\n+            String.class,\n+        \"datacenter1\");\n+\n+    // Netty\n+\n+    ConfigNamespace NETTY = new ConfigNamespace(\n+        CQL_NS,\n+        \"netty\",\n+        \"Configuration options related to the Netty event loop groups used internally by the CQL driver.\");\n+\n+    ConfigOption<Integer> NETTY_IO_SIZE = new ConfigOption<>(\n+        NETTY,\n+        \"io-size\",\n+        \"The number of threads for the event loop group used for I/O operations \" +\n+            \"(reading and writing to Cassandra nodes). \" +\n+            \"If this is set to 0, the driver will use `Runtime.getRuntime().availableProcessors() * 2`.\",\n+        ConfigOption.Type.LOCAL,\n+        Integer.class,\n+        0);\n+\n+    ConfigOption<Integer> NETTY_ADMIN_SIZE = new ConfigOption<>(\n+        NETTY,\n+        \"admin-size\",\n+        \"The number of threads for the event loop group used for admin tasks not related to request I/O \" +\n+            \"(handle cluster events, refresh metadata, schedule reconnections, etc.). \" +\n+            \"If this is set to 0, the driver will use `Runtime.getRuntime().availableProcessors() * 2`.\",\n+        ConfigOption.Type.LOCAL,\n+        Integer.class,\n+        0);\n+\n+    ConfigOption<Long> NETTY_TIMER_TICK_DURATION = new ConfigOption<>(\n+        NETTY,\n+        \"timer-tick-duration\",\n+        \"The timer tick duration in milliseconds. This is how frequent the timer should wake up to check for timed-out tasks \" +\n+            \"or speculative executions. See DataStax Java Driver option \" +", "originalCommit": "672bfb0c37039deefedeb7522afc761803b00e81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eba708f181a22ce9e7698f7a1d8d449c0d132e45", "chunk": "diff --git a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLConfigOptions.java b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLConfigOptions.java\nindex 0de795ad6..7cdc7df59 100644\n--- a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLConfigOptions.java\n+++ b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLConfigOptions.java\n\n@@ -276,9 +276,8 @@ public interface CQLConfigOptions {\n     ConfigOption<String> LOCAL_DATACENTER = new ConfigOption<>(\n             CQL_NS,\n             \"local-datacenter\",\n-            \"The name of the local or closest Cassandra datacenter.  When set and not whitespace, \" +\n-                    \"this value will be passed into ConnectionPoolConfigurationImpl.setLocalDatacenter. \" +\n-                    \"When unset or set to whitespace, setLocalDatacenter will not be invoked.\",\n+            \"The name of the local or closest Cassandra datacenter. \" +\n+                \"This value will be passed into CqlSessionBuilder.withLocalDatacenter.\",\n             /*\n              * It's between either LOCAL or MASKABLE. MASKABLE could be useful for cases where all the JanusGraph instances are closest to\n              * the same Cassandra DC.\n"}}, {"oid": "eba708f181a22ce9e7698f7a1d8d449c0d132e45", "url": "https://github.com/JanusGraph/janusgraph/commit/eba708f181a22ce9e7698f7a1d8d449c0d132e45", "message": "Upgrade DataStax cassandra driver to 4.9.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-11-19T00:00:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAzNTYyMg==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r527035622", "bodyText": "Nice! Just a nitpick:\nNow this line seems unreachable. See codecov: https://app.codecov.io/gh/JanusGraph/janusgraph/compare/2169/diff\nAlso sample test code:\n    @Test\n    public void testPagingIterator() {\n        clopen(option(PAGE_SIZE), 10);\n        int numVertices = 10;\n        for (int i = 0; i < numVertices; i++) {\n            graph.addVertex().property(\"prop\", i);\n        }\n        graph.tx().commit();\n\n        List<Object> values = graph.traversal().V().values(\"prop\").toList();\n        assertEquals(numVertices, values.size());\n        assertEquals(numVertices, new HashSet<>(values).size());\n    }\nSeems the underlying Datastax driver needs to execute the query once more to know that the current result set is fully fetched. Thus this if-statement seems to be useless.", "author": "li-boxuan", "createdAt": "2020-11-19T16:44:28Z", "path": "janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java", "diffHunk": "@@ -434,43 +443,48 @@ public KeyIterator getKeys(final SliceQuery query, final StoreTransaction txh) t\n     private class CQLPagingIterator implements Iterator<Row> {\n \n         private ResultSet currentResultSet;\n+        private java.util.Iterator<Row> currentPageIterator;\n \n         private int index;\n-        private int paginatedResultSize;\n-        private final Supplier<Statement> statementSupplier;\n+        private final int paginatedResultSize;\n \n-        private byte[] lastPagingState = null;\n+        private BoundStatement boundStatement;\n \n-        public CQLPagingIterator(final int pageSize, Supplier<Statement> statementSupplier) {\n-            this.index = 0;\n+        public CQLPagingIterator(final int pageSize, BoundStatement boundStatement) {\n             this.paginatedResultSize = pageSize;\n-            this.statementSupplier = statementSupplier;\n-            this.currentResultSet = getResultSet();\n+            this.boundStatement = boundStatement;\n+            updateResultSet();\n         }\n \n         @Override\n         public boolean hasNext() {\n-            return !currentResultSet.isExhausted();\n+            if(index<paginatedResultSize){\n+                return currentPageIterator.hasNext();\n+            }\n+            if(currentResultSet.isFullyFetched()){\n+                return false;", "originalCommit": "eba708f181a22ce9e7698f7a1d8d449c0d132e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0MDQ2Nw==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r527040467", "bodyText": "Interestingly, this line is reachable and is necessary when paginatedResultSize is negative. Seems Datastax driver allows negative value, simply ignores it, and uses the default value. If we don't have this if-statement, our program will go into an endless loop.", "author": "li-boxuan", "createdAt": "2020-11-19T16:50:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAzNTYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0MzEyOA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r527043128", "bodyText": "The following test case fails under CQLGraphTest but can pass InMemoryGraphTest & BerkeleyGraphTest:\n    @Test\n    public void testPagingIterator() {\n        clopen(option(PAGE_SIZE), -1);\n        int numVertices = 10;\n        for (int i = 0; i < numVertices; i++) {\n            graph.addVertex().property(\"prop\", i);\n        }\n        graph.tx().commit();\n\n        List<Object> values = graph.traversal().V().values(\"prop\").toList();\n        assertEquals(numVertices, values.size());\n        assertEquals(numVertices, new HashSet<>(values).size());\n    }\ndidn't check thoroughly but I guess it's because the implementation here assumes paging size is non-negative.", "author": "li-boxuan", "createdAt": "2020-11-19T16:54:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAzNTYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA1MzQzOQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r527053439", "bodyText": "Oh, didn't think about this edge case. For some reason I thought that negative value isn't allowed. I will fix that", "author": "porunov", "createdAt": "2020-11-19T17:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAzNTYyMg=="}], "type": "inlineReview", "revised_code": {"commit": "70321725c0cd1be7a40ceedd36a43a94127d0eb1", "chunk": "diff --git a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java\nindex 9e0e242c7..d28bf65a0 100644\n--- a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java\n+++ b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java\n\n@@ -436,55 +436,37 @@ public class CQLKeyColumnValueStore implements KeyColumnValueStore {\n      * This class provides a paging implementation that sits on top of the DSE Cassandra driver. The driver already\n      * has its own built in paging support but this has limitations when doing a full scan of the key ring due\n      * to how driver paging metadata is stored. The driver stores a full history of a given query's paging metadata\n-     * which can lead to OOM issues on non-trivially sized data sets. This class overcomes this by doing another level\n-     * of paging that re-executes the query after a configurable number of rows. When the original query is re-executed\n-     * it is initialized to the correct offset using the last page's metadata.\n+     * which can lead to OOM issues on non-trivially sized data sets. This class overcomes this by forcing the internal\n+     * metadata which isn't needed anymore to be deleted to be free for GC.\n      */\n     private class CQLPagingIterator implements Iterator<Row> {\n \n-        private ResultSet currentResultSet;\n-        private java.util.Iterator<Row> currentPageIterator;\n+        private final List<ExecutionInfo> dseStoredExecutionInfos;\n+        private final java.util.Iterator<Row> currentPageIterator;\n \n-        private int index;\n-        private final int paginatedResultSize;\n-\n-        private BoundStatement boundStatement;\n-\n-        public CQLPagingIterator(final int pageSize, BoundStatement boundStatement) {\n-            this.paginatedResultSize = pageSize;\n-            this.boundStatement = boundStatement;\n-            updateResultSet();\n+        public CQLPagingIterator(BoundStatement boundStatement) {\n+            ResultSet currentResultSet = session.execute(boundStatement);\n+            currentPageIterator = currentResultSet.iterator();\n+            this.dseStoredExecutionInfos = currentResultSet.getExecutionInfos();\n         }\n \n         @Override\n         public boolean hasNext() {\n-            if(index<paginatedResultSize){\n-                return currentPageIterator.hasNext();\n-            }\n-            if(currentResultSet.isFullyFetched()){\n-                return false;\n-            }\n-            updateResultSet();\n             return currentPageIterator.hasNext();\n         }\n \n         @Override\n         public Row next() {\n-            if(index == paginatedResultSize) {\n-                updateResultSet();\n+            if(dseStoredExecutionInfos.size()>1){\n+                if(dseStoredExecutionInfos.size()==2){\n+                    dseStoredExecutionInfos.set(0, dseStoredExecutionInfos.remove(1));\n+                } else {\n+                    ExecutionInfo lastExecutionInfo = dseStoredExecutionInfos.get(dseStoredExecutionInfos.size()-1);\n+                    dseStoredExecutionInfos.clear();\n+                    dseStoredExecutionInfos.add(lastExecutionInfo);\n+                }\n             }\n-            ++index;\n             return currentPageIterator.next();\n         }\n-\n-        private void updateResultSet() {\n-            if (currentResultSet != null) {\n-                ByteBuffer lastPagingState = currentResultSet.getExecutionInfo().getPagingState();\n-                boundStatement = boundStatement.setPagingState(lastPagingState);\n-            }\n-            currentResultSet = session.execute(boundStatement);\n-            currentPageIterator = currentResultSet.iterator();\n-            index = 0;\n-        }\n     }\n }\n"}}, {"oid": "70321725c0cd1be7a40ceedd36a43a94127d0eb1", "url": "https://github.com/JanusGraph/janusgraph/commit/70321725c0cd1be7a40ceedd36a43a94127d0eb1", "message": "Upgrade DataStax cassandra driver to 4.9.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-11-19T18:28:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzExMTY0Mw==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r527111643", "bodyText": "This part should be unreachable in most cases. The possible case I think about when this part is actually reachable is when we have storage.page-size=1 and call next(); hasNext(); next();. In such case it's possible that during the last next() operation our dseStoredExecutionInfos.size() will be equal to 3. In normal scenarios when we always call hasNext() before next() we shouldn't reach this else case.", "author": "porunov", "createdAt": "2020-11-19T18:36:09Z", "path": "janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java", "diffHunk": "@@ -414,63 +423,50 @@ public KeyIterator getKeys(final SliceQuery query, final StoreTransaction txh) t\n         return Try.of(() -> new CQLResultSetKeyIterator(\n                 query,\n                 this.getter,\n-                new CQLPagingIterator(this.storeManager.getPageSize(), () ->\n-                    getKeysAll.bind()\n-                        .setBytes(SLICE_START_BINDING, query.getSliceStart().asByteBuffer())\n-                        .setBytes(SLICE_END_BINDING, query.getSliceEnd().asByteBuffer())\n-                        .setFetchSize(this.storeManager.getPageSize())\n-                        .setConsistencyLevel(getTransaction(txh).getReadConsistencyLevel()))))\n+                new CQLPagingIterator(\n+                    getKeysAll.boundStatementBuilder()\n+                        .setByteBuffer(SLICE_START_BINDING, query.getSliceStart().asByteBuffer())\n+                        .setByteBuffer(SLICE_END_BINDING, query.getSliceEnd().asByteBuffer())\n+                        .setPageSize(this.storeManager.getPageSize())\n+                        .setConsistencyLevel(getTransaction(txh).getReadConsistencyLevel()).build())))\n                 .getOrElseThrow(EXCEPTION_MAPPER);\n     }\n \n     /**\n      * This class provides a paging implementation that sits on top of the DSE Cassandra driver. The driver already\n      * has its own built in paging support but this has limitations when doing a full scan of the key ring due\n      * to how driver paging metadata is stored. The driver stores a full history of a given query's paging metadata\n-     * which can lead to OOM issues on non-trivially sized data sets. This class overcomes this by doing another level\n-     * of paging that re-executes the query after a configurable number of rows. When the original query is re-executed\n-     * it is initialized to the correct offset using the last page's metadata.\n+     * which can lead to OOM issues on non-trivially sized data sets. This class overcomes this by forcing the internal\n+     * metadata which isn't needed anymore to be deleted to be free for GC.\n      */\n     private class CQLPagingIterator implements Iterator<Row> {\n \n-        private ResultSet currentResultSet;\n-\n-        private int index;\n-        private int paginatedResultSize;\n-        private final Supplier<Statement> statementSupplier;\n-\n-        private byte[] lastPagingState = null;\n+        private final List<ExecutionInfo> dseStoredExecutionInfos;\n+        private final java.util.Iterator<Row> currentPageIterator;\n \n-        public CQLPagingIterator(final int pageSize, Supplier<Statement> statementSupplier) {\n-            this.index = 0;\n-            this.paginatedResultSize = pageSize;\n-            this.statementSupplier = statementSupplier;\n-            this.currentResultSet = getResultSet();\n+        public CQLPagingIterator(BoundStatement boundStatement) {\n+            ResultSet currentResultSet = session.execute(boundStatement);\n+            currentPageIterator = currentResultSet.iterator();\n+            this.dseStoredExecutionInfos = currentResultSet.getExecutionInfos();\n         }\n \n         @Override\n         public boolean hasNext() {\n-            return !currentResultSet.isExhausted();\n+            return currentPageIterator.hasNext();\n         }\n \n         @Override\n         public Row next() {\n-            if(index == paginatedResultSize) {\n-                currentResultSet = getResultSet();\n-                this.index = 0;\n-            }\n-            this.index++;\n-            lastPagingState = currentResultSet.getExecutionInfo().getPagingStateUnsafe();\n-            return currentResultSet.one();\n-\n-        }\n-\n-        private ResultSet getResultSet() {\n-            final Statement boundStmnt = statementSupplier.get();\n-            if (lastPagingState != null) {\n-                boundStmnt.setPagingStateUnsafe(lastPagingState);\n+            if(dseStoredExecutionInfos.size()>1){\n+                if(dseStoredExecutionInfos.size()==2){\n+                    dseStoredExecutionInfos.set(0, dseStoredExecutionInfos.remove(1));\n+                } else {\n+                    ExecutionInfo lastExecutionInfo = dseStoredExecutionInfos.get(dseStoredExecutionInfos.size()-1);\n+                    dseStoredExecutionInfos.clear();\n+                    dseStoredExecutionInfos.add(lastExecutionInfo);\n+                }", "originalCommit": "70321725c0cd1be7a40ceedd36a43a94127d0eb1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65cad01828f1a455cc51435f8efaf309111c0768", "chunk": "diff --git a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java\nindex d28bf65a0..a48ea21a1 100644\n--- a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java\n+++ b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java\n\n@@ -458,13 +458,9 @@ public class CQLKeyColumnValueStore implements KeyColumnValueStore {\n         @Override\n         public Row next() {\n             if(dseStoredExecutionInfos.size()>1){\n-                if(dseStoredExecutionInfos.size()==2){\n-                    dseStoredExecutionInfos.set(0, dseStoredExecutionInfos.remove(1));\n-                } else {\n-                    ExecutionInfo lastExecutionInfo = dseStoredExecutionInfos.get(dseStoredExecutionInfos.size()-1);\n-                    dseStoredExecutionInfos.clear();\n-                    dseStoredExecutionInfos.add(lastExecutionInfo);\n-                }\n+                ExecutionInfo lastExecutionInfo = dseStoredExecutionInfos.get(dseStoredExecutionInfos.size()-1);\n+                dseStoredExecutionInfos.clear();\n+                dseStoredExecutionInfos.add(lastExecutionInfo);\n             }\n             return currentPageIterator.next();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzExNDc2Nw==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r527114767", "bodyText": "Current DSE ResultSet implementations return mutable ArrayList when getExecutionInfos() is called. The only case when this list is Immutable is when SinglePageResultSet is used but we won't mutate that list because it always has the size of 1. Thus, it's not possible to enter this if statement with that Immutable list.", "author": "porunov", "createdAt": "2020-11-19T18:41:39Z", "path": "janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java", "diffHunk": "@@ -414,63 +423,50 @@ public KeyIterator getKeys(final SliceQuery query, final StoreTransaction txh) t\n         return Try.of(() -> new CQLResultSetKeyIterator(\n                 query,\n                 this.getter,\n-                new CQLPagingIterator(this.storeManager.getPageSize(), () ->\n-                    getKeysAll.bind()\n-                        .setBytes(SLICE_START_BINDING, query.getSliceStart().asByteBuffer())\n-                        .setBytes(SLICE_END_BINDING, query.getSliceEnd().asByteBuffer())\n-                        .setFetchSize(this.storeManager.getPageSize())\n-                        .setConsistencyLevel(getTransaction(txh).getReadConsistencyLevel()))))\n+                new CQLPagingIterator(\n+                    getKeysAll.boundStatementBuilder()\n+                        .setByteBuffer(SLICE_START_BINDING, query.getSliceStart().asByteBuffer())\n+                        .setByteBuffer(SLICE_END_BINDING, query.getSliceEnd().asByteBuffer())\n+                        .setPageSize(this.storeManager.getPageSize())\n+                        .setConsistencyLevel(getTransaction(txh).getReadConsistencyLevel()).build())))\n                 .getOrElseThrow(EXCEPTION_MAPPER);\n     }\n \n     /**\n      * This class provides a paging implementation that sits on top of the DSE Cassandra driver. The driver already\n      * has its own built in paging support but this has limitations when doing a full scan of the key ring due\n      * to how driver paging metadata is stored. The driver stores a full history of a given query's paging metadata\n-     * which can lead to OOM issues on non-trivially sized data sets. This class overcomes this by doing another level\n-     * of paging that re-executes the query after a configurable number of rows. When the original query is re-executed\n-     * it is initialized to the correct offset using the last page's metadata.\n+     * which can lead to OOM issues on non-trivially sized data sets. This class overcomes this by forcing the internal\n+     * metadata which isn't needed anymore to be deleted to be free for GC.\n      */\n     private class CQLPagingIterator implements Iterator<Row> {\n \n-        private ResultSet currentResultSet;\n-\n-        private int index;\n-        private int paginatedResultSize;\n-        private final Supplier<Statement> statementSupplier;\n-\n-        private byte[] lastPagingState = null;\n+        private final List<ExecutionInfo> dseStoredExecutionInfos;\n+        private final java.util.Iterator<Row> currentPageIterator;\n \n-        public CQLPagingIterator(final int pageSize, Supplier<Statement> statementSupplier) {\n-            this.index = 0;\n-            this.paginatedResultSize = pageSize;\n-            this.statementSupplier = statementSupplier;\n-            this.currentResultSet = getResultSet();\n+        public CQLPagingIterator(BoundStatement boundStatement) {\n+            ResultSet currentResultSet = session.execute(boundStatement);\n+            currentPageIterator = currentResultSet.iterator();\n+            this.dseStoredExecutionInfos = currentResultSet.getExecutionInfos();\n         }\n \n         @Override\n         public boolean hasNext() {\n-            return !currentResultSet.isExhausted();\n+            return currentPageIterator.hasNext();\n         }\n \n         @Override\n         public Row next() {\n-            if(index == paginatedResultSize) {\n-                currentResultSet = getResultSet();\n-                this.index = 0;\n-            }\n-            this.index++;\n-            lastPagingState = currentResultSet.getExecutionInfo().getPagingStateUnsafe();\n-            return currentResultSet.one();\n-\n-        }\n-\n-        private ResultSet getResultSet() {\n-            final Statement boundStmnt = statementSupplier.get();\n-            if (lastPagingState != null) {\n-                boundStmnt.setPagingStateUnsafe(lastPagingState);\n+            if(dseStoredExecutionInfos.size()>1){", "originalCommit": "70321725c0cd1be7a40ceedd36a43a94127d0eb1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65cad01828f1a455cc51435f8efaf309111c0768", "chunk": "diff --git a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java\nindex d28bf65a0..a48ea21a1 100644\n--- a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java\n+++ b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java\n\n@@ -458,13 +458,9 @@ public class CQLKeyColumnValueStore implements KeyColumnValueStore {\n         @Override\n         public Row next() {\n             if(dseStoredExecutionInfos.size()>1){\n-                if(dseStoredExecutionInfos.size()==2){\n-                    dseStoredExecutionInfos.set(0, dseStoredExecutionInfos.remove(1));\n-                } else {\n-                    ExecutionInfo lastExecutionInfo = dseStoredExecutionInfos.get(dseStoredExecutionInfos.size()-1);\n-                    dseStoredExecutionInfos.clear();\n-                    dseStoredExecutionInfos.add(lastExecutionInfo);\n-                }\n+                ExecutionInfo lastExecutionInfo = dseStoredExecutionInfos.get(dseStoredExecutionInfos.size()-1);\n+                dseStoredExecutionInfos.clear();\n+                dseStoredExecutionInfos.add(lastExecutionInfo);\n             }\n             return currentPageIterator.next();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIwNTYzOQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r528205639", "bodyText": "What about dseStoredExecutionInfos.remove(0)? Actually, if we simply do dseStoredExecutionInfos.remove(0), or use your code in the else branch, then we don't need two branches at all. Is there any specific reason to keep the if(dseStoredExecutionInfos.size()==2) condition here?", "author": "li-boxuan", "createdAt": "2020-11-21T15:03:18Z", "path": "janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java", "diffHunk": "@@ -414,63 +423,50 @@ public KeyIterator getKeys(final SliceQuery query, final StoreTransaction txh) t\n         return Try.of(() -> new CQLResultSetKeyIterator(\n                 query,\n                 this.getter,\n-                new CQLPagingIterator(this.storeManager.getPageSize(), () ->\n-                    getKeysAll.bind()\n-                        .setBytes(SLICE_START_BINDING, query.getSliceStart().asByteBuffer())\n-                        .setBytes(SLICE_END_BINDING, query.getSliceEnd().asByteBuffer())\n-                        .setFetchSize(this.storeManager.getPageSize())\n-                        .setConsistencyLevel(getTransaction(txh).getReadConsistencyLevel()))))\n+                new CQLPagingIterator(\n+                    getKeysAll.boundStatementBuilder()\n+                        .setByteBuffer(SLICE_START_BINDING, query.getSliceStart().asByteBuffer())\n+                        .setByteBuffer(SLICE_END_BINDING, query.getSliceEnd().asByteBuffer())\n+                        .setPageSize(this.storeManager.getPageSize())\n+                        .setConsistencyLevel(getTransaction(txh).getReadConsistencyLevel()).build())))\n                 .getOrElseThrow(EXCEPTION_MAPPER);\n     }\n \n     /**\n      * This class provides a paging implementation that sits on top of the DSE Cassandra driver. The driver already\n      * has its own built in paging support but this has limitations when doing a full scan of the key ring due\n      * to how driver paging metadata is stored. The driver stores a full history of a given query's paging metadata\n-     * which can lead to OOM issues on non-trivially sized data sets. This class overcomes this by doing another level\n-     * of paging that re-executes the query after a configurable number of rows. When the original query is re-executed\n-     * it is initialized to the correct offset using the last page's metadata.\n+     * which can lead to OOM issues on non-trivially sized data sets. This class overcomes this by forcing the internal\n+     * metadata which isn't needed anymore to be deleted to be free for GC.\n      */\n     private class CQLPagingIterator implements Iterator<Row> {\n \n-        private ResultSet currentResultSet;\n-\n-        private int index;\n-        private int paginatedResultSize;\n-        private final Supplier<Statement> statementSupplier;\n-\n-        private byte[] lastPagingState = null;\n+        private final List<ExecutionInfo> dseStoredExecutionInfos;\n+        private final java.util.Iterator<Row> currentPageIterator;\n \n-        public CQLPagingIterator(final int pageSize, Supplier<Statement> statementSupplier) {\n-            this.index = 0;\n-            this.paginatedResultSize = pageSize;\n-            this.statementSupplier = statementSupplier;\n-            this.currentResultSet = getResultSet();\n+        public CQLPagingIterator(BoundStatement boundStatement) {\n+            ResultSet currentResultSet = session.execute(boundStatement);\n+            currentPageIterator = currentResultSet.iterator();\n+            this.dseStoredExecutionInfos = currentResultSet.getExecutionInfos();\n         }\n \n         @Override\n         public boolean hasNext() {\n-            return !currentResultSet.isExhausted();\n+            return currentPageIterator.hasNext();\n         }\n \n         @Override\n         public Row next() {\n-            if(index == paginatedResultSize) {\n-                currentResultSet = getResultSet();\n-                this.index = 0;\n-            }\n-            this.index++;\n-            lastPagingState = currentResultSet.getExecutionInfo().getPagingStateUnsafe();\n-            return currentResultSet.one();\n-\n-        }\n-\n-        private ResultSet getResultSet() {\n-            final Statement boundStmnt = statementSupplier.get();\n-            if (lastPagingState != null) {\n-                boundStmnt.setPagingStateUnsafe(lastPagingState);\n+            if(dseStoredExecutionInfos.size()>1){\n+                if(dseStoredExecutionInfos.size()==2){\n+                    dseStoredExecutionInfos.set(0, dseStoredExecutionInfos.remove(1));", "originalCommit": "70321725c0cd1be7a40ceedd36a43a94127d0eb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxNjQwMA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r528216400", "bodyText": "dseStoredExecutionInfos.remove(0) - will remove only the first element. So, if there are 3 elements 2 elements will be left. So, in case we execute next(); hasNext(); next(); hasNext(); next(); hasNext(); with page size 1 it will produce 5 elements in dseStoredExecutionInfos because on next(); hasNext(); we are adding 2 elments but on nest() we are removing only 1 element.\ndseStoredExecutionInfos.remove(0) and dseStoredExecutionInfos.set(0, dseStoredExecutionInfos.remove(1)) are kind of the same if the size == 2 but when we execute dseStoredExecutionInfos.remove(1) we are not triggering System.arraycopy because we removed the last element and when we execute dseStoredExecutionInfos.remove(0) we trigger that. From another hand System.arraycopy will copy just 1 element, thus it will be fast. I just thought that dseStoredExecutionInfos.set(0, dseStoredExecutionInfos.remove(1)) would be several operations faster then dseStoredExecutionInfos.remove(0) but it shouldn't be much difference and I didn't really compare the performance. Just assumed", "author": "porunov", "createdAt": "2020-11-21T16:44:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIwNTYzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxNzIxMQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r528217211", "bodyText": "Ah, I got it. I misunderstood second part. You are right. We don't need 2 branches if we use the code in else branch. I was just optimizing usage of unnecessary operations here but I think it just made the code more complex", "author": "porunov", "createdAt": "2020-11-21T16:51:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIwNTYzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIzNTM4MQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2169#discussion_r528235381", "bodyText": "Updated the code as you suggested here: https://github.com/JanusGraph/janusgraph/compare/70321725c0cd1be7a40ceedd36a43a94127d0eb1..65cad01828f1a455cc51435f8efaf309111c0768", "author": "porunov", "createdAt": "2020-11-21T19:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIwNTYzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "65cad01828f1a455cc51435f8efaf309111c0768", "chunk": "diff --git a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java\nindex d28bf65a0..a48ea21a1 100644\n--- a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java\n+++ b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java\n\n@@ -458,13 +458,9 @@ public class CQLKeyColumnValueStore implements KeyColumnValueStore {\n         @Override\n         public Row next() {\n             if(dseStoredExecutionInfos.size()>1){\n-                if(dseStoredExecutionInfos.size()==2){\n-                    dseStoredExecutionInfos.set(0, dseStoredExecutionInfos.remove(1));\n-                } else {\n-                    ExecutionInfo lastExecutionInfo = dseStoredExecutionInfos.get(dseStoredExecutionInfos.size()-1);\n-                    dseStoredExecutionInfos.clear();\n-                    dseStoredExecutionInfos.add(lastExecutionInfo);\n-                }\n+                ExecutionInfo lastExecutionInfo = dseStoredExecutionInfos.get(dseStoredExecutionInfos.size()-1);\n+                dseStoredExecutionInfos.clear();\n+                dseStoredExecutionInfos.add(lastExecutionInfo);\n             }\n             return currentPageIterator.next();\n         }\n"}}, {"oid": "65cad01828f1a455cc51435f8efaf309111c0768", "url": "https://github.com/JanusGraph/janusgraph/commit/65cad01828f1a455cc51435f8efaf309111c0768", "message": "Upgrade DataStax cassandra driver to 4.9.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-11-21T19:46:45Z", "type": "commit"}, {"oid": "65cad01828f1a455cc51435f8efaf309111c0768", "url": "https://github.com/JanusGraph/janusgraph/commit/65cad01828f1a455cc51435f8efaf309111c0768", "message": "Upgrade DataStax cassandra driver to 4.9.0 [full build]\n\nFixes #1510\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-11-21T19:46:45Z", "type": "forcePushed"}]}