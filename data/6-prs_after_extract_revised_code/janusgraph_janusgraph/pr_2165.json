{"pr_number": 2165, "pr_title": "Optimize LevenshteinDistance used in Fuzzy predicates", "pr_createdAt": "2020-07-12T10:05:54Z", "pr_url": "https://github.com/JanusGraph/janusgraph/pull/2165", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0MDU1MA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2165#discussion_r455640550", "bodyText": "Please, don't create a new instance of LevenshteinDistance for each search.\nWe have 3 possible distance values (0, 1 and 2). So, just create 3 constants of LevenshteinDistance and reuse them.\nI.e.\nprivate static final LevenshteinDistance ZERO_LEVENSHTEIN_DISTANCE = new LevenshteinDistance(0);\nprivate static final LevenshteinDistance ONE_LEVENSHTEIN_DISTANCE = new LevenshteinDistance(1);\nprivate static final LevenshteinDistance TWO_LEVENSHTEIN_DISTANCE = new LevenshteinDistance(2);\n\nAfter that we can rewrite the method to be as following:\nprivate static boolean isFuzzy(String term, String value){\n    term = term.trim();\n    if (term.length() < 3) {\n        return ZERO_LEVENSHTEIN_DISTANCE.apply(value, term) == 0;\n    } else if (term.length() < 6) {\n        int levenshteinDist = ONE_LEVENSHTEIN_DISTANCE.apply(value, term);\n        return levenshteinDist <= 1 && levenshteinDist >= 0;\n    }\n    int levenshteinDist = TWO_LEVENSHTEIN_DISTANCE.apply(value, term);\n    return levenshteinDist <= 2 && levenshteinDist >= 0;\n}", "author": "porunov", "createdAt": "2020-07-16T09:10:04Z", "path": "janusgraph-driver/src/main/java/org/janusgraph/core/attribute/Text.java", "diffHunk": "@@ -263,7 +263,9 @@ private static boolean isFuzzy(String term, String value){\n         } else {\n             distance = 2;\n         }\n-        return LevenshteinDistance.getDefaultInstance().apply(value, term)<=distance;\n+        // LevenshteinDistance returns -1 if distance is larger than threshold\n+        int levenshteinDist = new LevenshteinDistance(distance).apply(value, term);\n+        return levenshteinDist <= distance && levenshteinDist >= 0;", "originalCommit": "5ebc6b355b9395a2ce3266c8d0fa1e5a09828e86", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d753560df7250fce2774a37788532fac3d8ea1aa", "chunk": "diff --git a/janusgraph-driver/src/main/java/org/janusgraph/core/attribute/Text.java b/janusgraph-driver/src/main/java/org/janusgraph/core/attribute/Text.java\nindex 31180808e..88d3e436d 100644\n--- a/janusgraph-driver/src/main/java/org/janusgraph/core/attribute/Text.java\n+++ b/janusgraph-driver/src/main/java/org/janusgraph/core/attribute/Text.java\n\n@@ -254,18 +258,15 @@ public enum Text implements JanusGraphPredicate {\n      * @return true if {@code term} is similar to {@code value} \n      */\n     private static boolean isFuzzy(String term, String value){\n-        int distance;\n         term = term.trim();\n         if (term.length() < 3) {\n-            distance = 0;\n+            return ZERO_LEVENSHTEIN_DISTANCE.apply(value, term) == 0;\n         } else if (term.length() < 6) {\n-            distance = 1;\n-        } else {\n-            distance = 2;\n+            int levenshteinDistance = ONE_LEVENSHTEIN_DISTANCE.apply(value, term);\n+            return levenshteinDistance <= 1 && levenshteinDistance >= 0;\n         }\n-        // LevenshteinDistance returns -1 if distance is larger than threshold\n-        int levenshteinDist = new LevenshteinDistance(distance).apply(value, term);\n-        return levenshteinDist <= distance && levenshteinDist >= 0;\n+        int levenshteinDist = TWO_LEVENSHTEIN_DISTANCE.apply(value, term);\n+        return levenshteinDist <= 2 && levenshteinDist >= 0;\n     }\n \n     private static final Logger log = LoggerFactory.getLogger(Text.class);\n"}}, {"oid": "d753560df7250fce2774a37788532fac3d8ea1aa", "url": "https://github.com/JanusGraph/janusgraph/commit/d753560df7250fce2774a37788532fac3d8ea1aa", "message": "Optimize LevenshteinDistance used in Fuzzy predicates\n\nThis reduces time complexity of fuzzy match from O(n^2) to O(n), where n\nis the length of the shorter string. This also adds tests which use fuzzy\npredicates without index.\n\nCloses #2164\n\nSigned-off-by: Boxuan Li <liboxuan@connect.hku.hk>", "committedDate": "2020-07-16T15:29:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3MTU1NA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2165#discussion_r456271554", "bodyText": "Just thinking. Won't it be a little bit more efficient if we would use return value.equals(term); here?\nAs I understand LevenshteinDistance is 0 only for equal strings, if I am not missing anything.", "author": "porunov", "createdAt": "2020-07-17T07:36:35Z", "path": "janusgraph-driver/src/main/java/org/janusgraph/core/attribute/Text.java", "diffHunk": "@@ -254,16 +258,15 @@ public String toString() {\n      * @return true if {@code term} is similar to {@code value} \n      */\n     private static boolean isFuzzy(String term, String value){\n-        int distance;\n         term = term.trim();\n         if (term.length() < 3) {\n-            distance = 0;\n+            return ZERO_LEVENSHTEIN_DISTANCE.apply(value, term) == 0;", "originalCommit": "d753560df7250fce2774a37788532fac3d8ea1aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3NDU4Nw==", "url": "https://github.com/JanusGraph/janusgraph/pull/2165#discussion_r456274587", "bodyText": "Ouch, why didn't I think about this in the first place... I think you are right. I'll update it later today.", "author": "li-boxuan", "createdAt": "2020-07-17T07:42:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3MTU1NA=="}], "type": "inlineReview", "revised_code": {"commit": "45af378dc0deee9c16834ef9c40eaeaffc757f12", "chunk": "diff --git a/janusgraph-driver/src/main/java/org/janusgraph/core/attribute/Text.java b/janusgraph-driver/src/main/java/org/janusgraph/core/attribute/Text.java\nindex 88d3e436d..ac69bf27b 100644\n--- a/janusgraph-driver/src/main/java/org/janusgraph/core/attribute/Text.java\n+++ b/janusgraph-driver/src/main/java/org/janusgraph/core/attribute/Text.java\n\n@@ -260,7 +259,7 @@ public enum Text implements JanusGraphPredicate {\n     private static boolean isFuzzy(String term, String value){\n         term = term.trim();\n         if (term.length() < 3) {\n-            return ZERO_LEVENSHTEIN_DISTANCE.apply(value, term) == 0;\n+            return term.equals(value);\n         } else if (term.length() < 6) {\n             int levenshteinDistance = ONE_LEVENSHTEIN_DISTANCE.apply(value, term);\n             return levenshteinDistance <= 1 && levenshteinDistance >= 0;\n"}}, {"oid": "45af378dc0deee9c16834ef9c40eaeaffc757f12", "url": "https://github.com/JanusGraph/janusgraph/commit/45af378dc0deee9c16834ef9c40eaeaffc757f12", "message": "Optimize LevenshteinDistance used in Fuzzy predicates\n\nThis reduces time complexity of fuzzy match from O(n^2) to O(n), where n\nis the length of the string. This also adds tests which use fuzzy\npredicates without index.\n\nCloses #2164\n\nSigned-off-by: Boxuan Li <liboxuan@connect.hku.hk>", "committedDate": "2020-07-17T12:05:52Z", "type": "commit"}, {"oid": "45af378dc0deee9c16834ef9c40eaeaffc757f12", "url": "https://github.com/JanusGraph/janusgraph/commit/45af378dc0deee9c16834ef9c40eaeaffc757f12", "message": "Optimize LevenshteinDistance used in Fuzzy predicates\n\nThis reduces time complexity of fuzzy match from O(n^2) to O(n), where n\nis the length of the string. This also adds tests which use fuzzy\npredicates without index.\n\nCloses #2164\n\nSigned-off-by: Boxuan Li <liboxuan@connect.hku.hk>", "committedDate": "2020-07-17T12:05:52Z", "type": "forcePushed"}]}