{"pr_number": 2253, "pr_title": "Add serializiation fallback for older janusgraph drivers", "pr_createdAt": "2020-11-18T15:45:43Z", "pr_url": "https://github.com/JanusGraph/janusgraph/pull/2253", "timeline": [{"oid": "0b450a9705e9338ef4e5cebc9b52f0784e9b60b9", "url": "https://github.com/JanusGraph/janusgraph/commit/0b450a9705e9338ef4e5cebc9b52f0784e9b60b9", "message": "Add serializiation fallback for older janusgraph drivers\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-11-19T07:52:26Z", "type": "forcePushed"}, {"oid": "f26df3a1691e8f3be0b60e1bf9231b33baaa84ce", "url": "https://github.com/JanusGraph/janusgraph/commit/f26df3a1691e8f3be0b60e1bf9231b33baaa84ce", "message": "Add serializiation fallback for older janusgraph drivers\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-12-09T11:39:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI4NTMxNQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2253#discussion_r539285315", "bodyText": "(nitpick) The comment doesn't make much sense as there are no Geo predicates here and only one text predicate.", "author": "FlorianHockmann", "createdAt": "2020-12-09T12:58:48Z", "path": "janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/JanusGraphIoRegistryTest.java", "diffHunk": "@@ -115,6 +115,58 @@ public void testJanusGraphPredicatesAsGryo() throws SerializationException {\n \n     }\n \n+    @Test\n+    public void testOldFormatJanusGraphPredicatesAsGryo() throws SerializationException {\n+        Graph graph = EmptyGraph.instance();\n+        GraphTraversalSource g = graph.traversal();\n+\n+        // Janus Graph Geo, Text Predicates", "originalCommit": "f26df3a1691e8f3be0b60e1bf9231b33baaa84ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed9fe25cefac19cb6bea495ef91f1791112b7d25", "chunk": "diff --git a/janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/JanusGraphIoRegistryTest.java b/janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/JanusGraphIoRegistryTest.java\nindex a70074f62..39e279ba5 100644\n--- a/janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/JanusGraphIoRegistryTest.java\n+++ b/janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/JanusGraphIoRegistryTest.java\n\n@@ -112,59 +112,6 @@ public class JanusGraphIoRegistryTest {\n                 g.V().has(\"name\", Text.textFuzzy(\"nepitne\")) };\n \n         serializationTest(traversals);\n-\n-    }\n-\n-    @Test\n-    public void testOldFormatJanusGraphPredicatesAsGryo() throws SerializationException {\n-        Graph graph = EmptyGraph.instance();\n-        GraphTraversalSource g = graph.traversal();\n-\n-        // Janus Graph Geo, Text Predicates\n-        Bytecode oldBytecode = serializeByteCodeAfterDeserializeAsGryo(g.V().has(\"name\", new P<>(Text.CONTAINS, \"test\")));\n-        Bytecode newBytecode = serializeByteCodeAfterDeserializeAsGryo(g.V().has(\"name\", Text.textContains(\"test\")));\n-\n-        assertEquals(newBytecode, oldBytecode);\n-    }\n-\n-    private Bytecode serializeByteCodeAfterDeserializeAsGryo(GraphTraversal traversal) throws SerializationException {\n-        Builder mapper = GryoMapper.build().addRegistry(JanusGraphIoRegistry.instance());\n-        MessageSerializer binarySerializer = new GryoMessageSerializerV1d0(mapper);\n-        Bytecode expectedBytecode = traversal.asAdmin().getBytecode();\n-        RequestMessage requestMessage = RequestMessage.build(Tokens.OPS_BYTECODE).processor(\"traversal\")\n-            .addArg(Tokens.ARGS_GREMLIN, expectedBytecode).create();\n-\n-        ByteBuf bb = binarySerializer.serializeRequestAsBinary(requestMessage, allocator);\n-        final int mimeLen = bb.readByte();\n-        bb.readBytes(new byte[mimeLen]);\n-        RequestMessage deser = binarySerializer.deserializeRequest(bb);\n-        return  (Bytecode) deser.getArgs().get(Tokens.ARGS_GREMLIN);\n-    }\n-\n-    @Test\n-    public void testOldFormatJanusGraphPredicatesAsGraphSON() throws Exception {\n-        Graph graph = EmptyGraph.instance();\n-        GraphTraversalSource g = graph.traversal();\n-\n-        // Janus Graph Geo, Text Predicates\n-        Bytecode oldBytecode = serializeByteCodeAfterDeserializeAsGraphSON(g.V().has(\"name\", new P<>(Text.CONTAINS, \"test\")));\n-        Bytecode newBytecode = serializeByteCodeAfterDeserializeAsGraphSON(g.V().has(\"name\", Text.textContains(\"test\")));\n-\n-        assertEquals(newBytecode, oldBytecode);\n-    }\n-\n-    private Bytecode serializeByteCodeAfterDeserializeAsGraphSON(GraphTraversal traversal) throws Exception {\n-        final GraphSONMapper mapper = GraphSONMapper.build().version(GraphSONVersion.V3_0)\n-            .typeInfo(TypeInfo.PARTIAL_TYPES).addRegistry(JanusGraphIoRegistry.instance()).create();\n-        final GraphSONWriter writer = GraphSONWriter.build().mapper(mapper).create();\n-        final GraphSONReader reader = GraphSONReader.build().mapper(mapper).create();\n-        Bytecode expectedBytecode = traversal.asAdmin().getBytecode();\n-        ByteArrayOutputStream serializationStream = new ByteArrayOutputStream();\n-        writer.writeObject(serializationStream, expectedBytecode);\n-\n-        ByteArrayInputStream inputStream = new ByteArrayInputStream(serializationStream.toByteArray());\n-\n-        return reader.readObject(inputStream, Bytecode.class);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI4NTU4Mg==", "url": "https://github.com/JanusGraph/janusgraph/pull/2253#discussion_r539285582", "bodyText": "Nice and easy solution!", "author": "FlorianHockmann", "createdAt": "2020-12-09T12:59:13Z", "path": "janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/JanusGraphIoRegistryTest.java", "diffHunk": "@@ -115,6 +115,58 @@ public void testJanusGraphPredicatesAsGryo() throws SerializationException {\n \n     }\n \n+    @Test\n+    public void testOldFormatJanusGraphPredicatesAsGryo() throws SerializationException {\n+        Graph graph = EmptyGraph.instance();\n+        GraphTraversalSource g = graph.traversal();\n+\n+        // Janus Graph Geo, Text Predicates\n+        Bytecode oldBytecode = serializeByteCodeAfterDeserializeAsGryo(g.V().has(\"name\", new P<>(Text.CONTAINS, \"test\")));", "originalCommit": "f26df3a1691e8f3be0b60e1bf9231b33baaa84ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed9fe25cefac19cb6bea495ef91f1791112b7d25", "chunk": "diff --git a/janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/JanusGraphIoRegistryTest.java b/janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/JanusGraphIoRegistryTest.java\nindex a70074f62..39e279ba5 100644\n--- a/janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/JanusGraphIoRegistryTest.java\n+++ b/janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/JanusGraphIoRegistryTest.java\n\n@@ -112,59 +112,6 @@ public class JanusGraphIoRegistryTest {\n                 g.V().has(\"name\", Text.textFuzzy(\"nepitne\")) };\n \n         serializationTest(traversals);\n-\n-    }\n-\n-    @Test\n-    public void testOldFormatJanusGraphPredicatesAsGryo() throws SerializationException {\n-        Graph graph = EmptyGraph.instance();\n-        GraphTraversalSource g = graph.traversal();\n-\n-        // Janus Graph Geo, Text Predicates\n-        Bytecode oldBytecode = serializeByteCodeAfterDeserializeAsGryo(g.V().has(\"name\", new P<>(Text.CONTAINS, \"test\")));\n-        Bytecode newBytecode = serializeByteCodeAfterDeserializeAsGryo(g.V().has(\"name\", Text.textContains(\"test\")));\n-\n-        assertEquals(newBytecode, oldBytecode);\n-    }\n-\n-    private Bytecode serializeByteCodeAfterDeserializeAsGryo(GraphTraversal traversal) throws SerializationException {\n-        Builder mapper = GryoMapper.build().addRegistry(JanusGraphIoRegistry.instance());\n-        MessageSerializer binarySerializer = new GryoMessageSerializerV1d0(mapper);\n-        Bytecode expectedBytecode = traversal.asAdmin().getBytecode();\n-        RequestMessage requestMessage = RequestMessage.build(Tokens.OPS_BYTECODE).processor(\"traversal\")\n-            .addArg(Tokens.ARGS_GREMLIN, expectedBytecode).create();\n-\n-        ByteBuf bb = binarySerializer.serializeRequestAsBinary(requestMessage, allocator);\n-        final int mimeLen = bb.readByte();\n-        bb.readBytes(new byte[mimeLen]);\n-        RequestMessage deser = binarySerializer.deserializeRequest(bb);\n-        return  (Bytecode) deser.getArgs().get(Tokens.ARGS_GREMLIN);\n-    }\n-\n-    @Test\n-    public void testOldFormatJanusGraphPredicatesAsGraphSON() throws Exception {\n-        Graph graph = EmptyGraph.instance();\n-        GraphTraversalSource g = graph.traversal();\n-\n-        // Janus Graph Geo, Text Predicates\n-        Bytecode oldBytecode = serializeByteCodeAfterDeserializeAsGraphSON(g.V().has(\"name\", new P<>(Text.CONTAINS, \"test\")));\n-        Bytecode newBytecode = serializeByteCodeAfterDeserializeAsGraphSON(g.V().has(\"name\", Text.textContains(\"test\")));\n-\n-        assertEquals(newBytecode, oldBytecode);\n-    }\n-\n-    private Bytecode serializeByteCodeAfterDeserializeAsGraphSON(GraphTraversal traversal) throws Exception {\n-        final GraphSONMapper mapper = GraphSONMapper.build().version(GraphSONVersion.V3_0)\n-            .typeInfo(TypeInfo.PARTIAL_TYPES).addRegistry(JanusGraphIoRegistry.instance()).create();\n-        final GraphSONWriter writer = GraphSONWriter.build().mapper(mapper).create();\n-        final GraphSONReader reader = GraphSONReader.build().mapper(mapper).create();\n-        Bytecode expectedBytecode = traversal.asAdmin().getBytecode();\n-        ByteArrayOutputStream serializationStream = new ByteArrayOutputStream();\n-        writer.writeObject(serializationStream, expectedBytecode);\n-\n-        ByteArrayInputStream inputStream = new ByteArrayInputStream(serializationStream.toByteArray());\n-\n-        return reader.readObject(inputStream, Bytecode.class);\n     }\n \n     @Test\n"}}, {"oid": "ed9fe25cefac19cb6bea495ef91f1791112b7d25", "url": "https://github.com/JanusGraph/janusgraph/commit/ed9fe25cefac19cb6bea495ef91f1791112b7d25", "message": "Add serializiation fallback for older janusgraph drivers\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-12-09T14:01:54Z", "type": "commit"}, {"oid": "ed9fe25cefac19cb6bea495ef91f1791112b7d25", "url": "https://github.com/JanusGraph/janusgraph/commit/ed9fe25cefac19cb6bea495ef91f1791112b7d25", "message": "Add serializiation fallback for older janusgraph drivers\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-12-09T14:01:54Z", "type": "forcePushed"}]}