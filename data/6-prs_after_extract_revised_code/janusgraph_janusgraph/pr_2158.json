{"pr_number": 2158, "pr_title": "Add optional datastax request logger", "pr_createdAt": "2020-07-06T21:19:02Z", "pr_url": "https://github.com/JanusGraph/janusgraph/pull/2158", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0OTg3NQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2158#discussion_r450649875", "bodyText": "I thought our policy is to not use a star import.", "author": "farodin91", "createdAt": "2020-07-07T06:59:32Z", "path": "janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLStoreManager.java", "diffHunk": "@@ -21,32 +21,7 @@\n import static io.vavr.API.$;\n import static io.vavr.API.Case;\n import static io.vavr.API.Match;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.ATOMIC_BATCH_MUTATE;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.BATCH_STATEMENT_SIZE;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.CLUSTER_NAME;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.ONLY_USE_LOCAL_CONSISTENCY_FOR_SYSTEM_OPERATIONS;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.KEYSPACE;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.LOCAL_CORE_CONNECTIONS_PER_HOST;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.LOCAL_DATACENTER;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.LOCAL_MAX_CONNECTIONS_PER_HOST;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.LOCAL_MAX_REQUESTS_PER_CONNECTION;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.PROTOCOL_VERSION;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.READ_CONSISTENCY;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.REMOTE_CORE_CONNECTIONS_PER_HOST;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.REMOTE_MAX_CONNECTIONS_PER_HOST;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.REMOTE_MAX_REQUESTS_PER_CONNECTION;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.REPLICATION_FACTOR;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.REPLICATION_OPTIONS;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.REPLICATION_STRATEGY;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.SSL_ENABLED;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.SSL_TRUSTSTORE_LOCATION;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.SSL_TRUSTSTORE_PASSWORD;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.SSL_CLIENT_AUTHENTICATION_ENABLED;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.SSL_KEYSTORE_LOCATION;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.SSL_KEYSTORE_KEY_PASSWORD;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.SSL_KEYSTORE_STORE_PASSWORD;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.WRITE_CONSISTENCY;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.USE_EXTERNAL_LOCKING;\n+import static org.janusgraph.diskstorage.cql.CQLConfigOptions.*;", "originalCommit": "005742cdcdc24b8a765407967a920fc722c783e5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7dfe957b36ab56b94f945881a60ec44f789813f", "chunk": "diff --git a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLStoreManager.java b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLStoreManager.java\nindex 07934730e..4dd7b5c21 100644\n--- a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLStoreManager.java\n+++ b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLStoreManager.java\n\n@@ -14,52 +14,31 @@\n \n package org.janusgraph.diskstorage.cql;\n \n-import static com.datastax.driver.core.schemabuilder.SchemaBuilder.createKeyspace;\n-import static com.datastax.driver.core.schemabuilder.SchemaBuilder.dropKeyspace;\n-import static com.datastax.driver.core.querybuilder.QueryBuilder.select;\n-import static com.datastax.driver.core.querybuilder.QueryBuilder.truncate;\n-import static io.vavr.API.$;\n-import static io.vavr.API.Case;\n-import static io.vavr.API.Match;\n-import static org.janusgraph.diskstorage.cql.CQLConfigOptions.*;\n-import static org.janusgraph.diskstorage.cql.CQLKeyColumnValueStore.EXCEPTION_MAPPER;\n-import static org.janusgraph.diskstorage.cql.CQLTransaction.getTransaction;\n-import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.AUTH_PASSWORD;\n-import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.AUTH_USERNAME;\n-import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.DROP_ON_CLEAR;\n-import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.METRICS_PREFIX;\n-import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.METRICS_SYSTEM_PREFIX_DEFAULT;\n-import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.buildGraphConfiguration;\n-import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.GRAPH_NAME;\n-import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.BASIC_METRICS;\n-\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.net.InetSocketAddress;\n-import java.security.KeyManagementException;\n-import java.security.KeyStore;\n-import java.security.KeyStoreException;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.UnrecoverableKeyException;\n-import java.security.cert.CertificateException;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.LinkedBlockingQueue;\n-import java.util.concurrent.ThreadPoolExecutor;\n-import java.util.concurrent.TimeUnit;\n-import java.util.function.Supplier;\n-\n-import javax.annotation.Resource;\n-import javax.net.ssl.KeyManager;\n-import javax.net.ssl.KeyManagerFactory;\n-import javax.net.ssl.SSLContext;\n-import javax.net.ssl.TrustManager;\n-import javax.net.ssl.TrustManagerFactory;\n-\n-import com.datastax.driver.core.*;\n+import com.datastax.oss.driver.api.core.CqlIdentifier;\n+import com.datastax.oss.driver.api.core.CqlSession;\n+import com.datastax.oss.driver.api.core.CqlSessionBuilder;\n+import com.datastax.oss.driver.api.core.config.DefaultDriverOption;\n+import com.datastax.oss.driver.api.core.config.DriverConfigLoader;\n+import com.datastax.oss.driver.api.core.config.ProgrammaticDriverConfigLoaderBuilder;\n+import com.datastax.oss.driver.api.core.cql.AsyncResultSet;\n+import com.datastax.oss.driver.api.core.cql.BatchStatement;\n+import com.datastax.oss.driver.api.core.cql.BatchStatementBuilder;\n+import com.datastax.oss.driver.api.core.cql.BatchableStatement;\n+import com.datastax.oss.driver.api.core.cql.BoundStatement;\n+import com.datastax.oss.driver.api.core.cql.DefaultBatchType;\n+import com.datastax.oss.driver.api.core.metadata.schema.KeyspaceMetadata;\n+import com.datastax.oss.driver.api.core.metadata.schema.TableMetadata;\n+import com.datastax.oss.driver.internal.core.auth.PlainTextAuthProvider;\n+import com.datastax.oss.driver.internal.core.ssl.DefaultSslEngineFactory;\n+import com.datastax.oss.driver.shaded.guava.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import io.vavr.Tuple;\n+import io.vavr.collection.Array;\n+import io.vavr.collection.HashMap;\n+import io.vavr.collection.Iterator;\n+import io.vavr.collection.Seq;\n+import io.vavr.concurrent.Future;\n+import io.vavr.control.Option;\n import org.janusgraph.diskstorage.BackendException;\n import org.janusgraph.diskstorage.BaseTransactionConfig;\n import org.janusgraph.diskstorage.PermanentBackendException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY1MTM5OA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2158#discussion_r450651398", "bodyText": "It would be okay to have on default value.", "author": "farodin91", "createdAt": "2020-07-07T07:03:09Z", "path": "janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLConfigOptions.java", "diffHunk": "@@ -285,4 +285,44 @@\n             ConfigOption.Type.MASKABLE,\n             String.class);\n \n+    // Query logger\n+    ConfigNamespace QUERY_LOGGER = new ConfigNamespace(\n+        CQL_NS,\n+        \"query-logger\",\n+        \"CQL query logger options\");\n+\n+    ConfigOption<Boolean> QUERY_LOGGER_ENABLED = new ConfigOption<>(\n+        QUERY_LOGGER,\n+        \"enabled\",\n+        \"Registers a query logger with datastax cassandra driver\",\n+        ConfigOption.Type.LOCAL,\n+        false);\n+\n+    ConfigOption<Integer> QUERY_LOGGER_MAX_QUERY_STRING_LENGTH = new ConfigOption<>(\n+        QUERY_LOGGER,\n+        \"max-query-string-length\",\n+        \"Max query string length to be logged when query logger is enabled. Use '-1' to use datastax default value.\",\n+        ConfigOption.Type.LOCAL,\n+        -1);", "originalCommit": "005742cdcdc24b8a765407967a920fc722c783e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY1MjQ1Nw==", "url": "https://github.com/JanusGraph/janusgraph/pull/2158#discussion_r450652457", "bodyText": "https://github.com/JanusGraph/janusgraph/blob/master/janusgraph-core/src/main/java/org/janusgraph/graphdb/configuration/GraphDatabaseConfiguration.java#L394", "author": "farodin91", "createdAt": "2020-07-07T07:05:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY1MTM5OA=="}], "type": "inlineReview", "revised_code": {"commit": "f7dfe957b36ab56b94f945881a60ec44f789813f", "chunk": "diff --git a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLConfigOptions.java b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLConfigOptions.java\nindex cc954813e..445e017c7 100644\n--- a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLConfigOptions.java\n+++ b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLConfigOptions.java\n\n@@ -265,64 +266,284 @@ public interface CQLConfigOptions {\n             \"\");\n \n     // Other options\n-    ConfigOption<String> CLUSTER_NAME = new ConfigOption<>(\n+    ConfigOption<String> SESSION_NAME = new ConfigOption<>(\n             CQL_NS,\n-            \"cluster-name\",\n-            \"Default name for the Cassandra cluster\",\n+            \"session-name\",\n+            \"Default name for the Cassandra session\",\n             ConfigOption.Type.MASKABLE,\n-            \"JanusGraph Cluster\");\n+            \"JanusGraph Session\");\n \n     ConfigOption<String> LOCAL_DATACENTER = new ConfigOption<>(\n             CQL_NS,\n             \"local-datacenter\",\n-            \"The name of the local or closest Cassandra datacenter.  When set and not whitespace, \" +\n-                    \"this value will be passed into ConnectionPoolConfigurationImpl.setLocalDatacenter. \" +\n-                    \"When unset or set to whitespace, setLocalDatacenter will not be invoked.\",\n+            \"The name of the local or closest Cassandra datacenter. \" +\n+                \"This value will be passed into CqlSessionBuilder.withLocalDatacenter.\",\n             /*\n              * It's between either LOCAL or MASKABLE. MASKABLE could be useful for cases where all the JanusGraph instances are closest to\n              * the same Cassandra DC.\n              */\n             ConfigOption.Type.MASKABLE,\n-            String.class);\n+            String.class,\n+        \"datacenter1\");\n \n-    // Query logger\n-    ConfigNamespace QUERY_LOGGER = new ConfigNamespace(\n+    // Netty\n+\n+    ConfigNamespace NETTY = new ConfigNamespace(\n         CQL_NS,\n-        \"query-logger\",\n-        \"CQL query logger options\");\n+        \"netty\",\n+        \"Configuration options related to the Netty event loop groups used internally by the CQL driver.\");\n+\n+    ConfigOption<Integer> NETTY_IO_SIZE = new ConfigOption<>(\n+        NETTY,\n+        \"io-size\",\n+        \"The number of threads for the event loop group used for I/O operations \" +\n+            \"(reading and writing to Cassandra nodes). \" +\n+            \"If this is set to 0, the driver will use `Runtime.getRuntime().availableProcessors() * 2`.\",\n+        ConfigOption.Type.LOCAL,\n+        Integer.class,\n+        0);\n+\n+    ConfigOption<Integer> NETTY_ADMIN_SIZE = new ConfigOption<>(\n+        NETTY,\n+        \"admin-size\",\n+        \"The number of threads for the event loop group used for admin tasks not related to request I/O \" +\n+            \"(handle cluster events, refresh metadata, schedule reconnections, etc.). \" +\n+            \"If this is set to 0, the driver will use `Runtime.getRuntime().availableProcessors() * 2`.\",\n+        ConfigOption.Type.LOCAL,\n+        Integer.class,\n+        0);\n+\n+    ConfigOption<Long> NETTY_TIMER_TICK_DURATION = new ConfigOption<>(\n+        NETTY,\n+        \"timer-tick-duration\",\n+        \"The timer tick duration in milliseconds. This is how frequent the timer should wake up to check for timed-out tasks \" +\n+            \"or speculative executions. See DataStax Java Driver option `\" +\n+            DefaultDriverOption.NETTY_TIMER_TICK_DURATION.getPath() + \"` for more information.\",\n+        ConfigOption.Type.LOCAL,\n+        Long.class);\n \n-    ConfigOption<Boolean> QUERY_LOGGER_ENABLED = new ConfigOption<>(\n-        QUERY_LOGGER,\n-        \"enabled\",\n-        \"Registers a query logger with datastax cassandra driver\",\n+    ConfigOption<Integer> NETTY_TIMER_TICKS_PER_WHEEL = new ConfigOption<>(\n+        NETTY,\n+        \"timer-ticks-per-wheel\",\n+        \"Number of ticks in a Timer wheel. See DataStax Java Driver option `\" +\n+            DefaultDriverOption.NETTY_TIMER_TICKS_PER_WHEEL.getPath() + \"` for more information.\",\n         ConfigOption.Type.LOCAL,\n-        false);\n+        Integer.class);\n+\n+    // Metrics\n+\n+    ConfigNamespace METRICS = new ConfigNamespace(\n+        CQL_NS,\n+        \"metrics\",\n+        \"Configuration options for CQL metrics\");\n+\n+    ConfigOption<String[]> METRICS_SESSION_ENABLED = new ConfigOption<>(\n+        METRICS,\n+        \"session-enabled\",\n+        \"Comma separated list of enabled session metrics. Used only when basic metrics are enabled. \" +\n+            \"Check DataStax Cassandra Driver 4 documentation for available metrics \" +\n+            \"(example: bytes-sent, bytes-received, connected-nodes).\",\n+        ConfigOption.Type.LOCAL,\n+        String[].class);\n+\n+    ConfigOption<Long> METRICS_SESSION_REQUESTS_HIGHEST_LATENCY = new ConfigOption<>(\n+        METRICS,\n+        \"cql-requests-highest-latency\",\n+        \"The largest latency that we expect to record for requests in milliseconds. \" +\n+            \"Used if 'cql-requests' session metric is enabled. \"+\n+            \"See DataStax driver configuration option `\"\n+            +DefaultDriverOption.METRICS_SESSION_CQL_REQUESTS_HIGHEST.getPath()+\"`\",\n+        ConfigOption.Type.LOCAL,\n+        Long.class);\n+\n+    ConfigOption<Integer> METRICS_SESSION_REQUESTS_SIGNIFICANT_DIGITS = new ConfigOption<>(\n+        METRICS,\n+        \"cql-requests-significant-digits\",\n+        \"The number of significant decimal digits to which internal structures will maintain value resolution \" +\n+            \"and separation for requests. This must be between 0 and 5. \" +\n+            \"Used if 'cql-requests' session metric is enabled. \"+\n+            \"See DataStax driver configuration option `\"\n+            +DefaultDriverOption.METRICS_SESSION_CQL_REQUESTS_DIGITS.getPath()+\"`\",\n+        ConfigOption.Type.LOCAL,\n+        Integer.class);\n+\n+    ConfigOption<Long> METRICS_SESSION_REQUESTS_REFRESH_INTERVAL = new ConfigOption<>(\n+        METRICS,\n+        \"cql-requests-refresh-interval\",\n+        \"The interval at which percentile data is refreshed in milliseconds for requests. \" +\n+            \"Used if 'cql-requests' session metric is enabled. \"+\n+            \"See DataStax driver configuration option `\"\n+            +DefaultDriverOption.METRICS_SESSION_CQL_REQUESTS_INTERVAL.getPath()+\"`\",\n+        ConfigOption.Type.LOCAL,\n+        Long.class);\n+\n+    ConfigOption<Long> METRICS_SESSION_THROTTLING_HIGHEST_LATENCY = new ConfigOption<>(\n+        METRICS,\n+        \"throttling-delay-highest-latency\",\n+        \"The largest latency that we expect to record for throttling in milliseconds. \" +\n+            \"Used if 'throttling.delay' session metric is enabled. \"+\n+            \"See DataStax driver configuration option `\"\n+            +DefaultDriverOption.METRICS_SESSION_THROTTLING_HIGHEST.getPath()+\"`\",\n+        ConfigOption.Type.LOCAL,\n+        Long.class);\n+\n+    ConfigOption<Integer> METRICS_SESSION_THROTTLING_SIGNIFICANT_DIGITS = new ConfigOption<>(\n+        METRICS,\n+        \"throttling-delay-significant-digits\",\n+        \"The number of significant decimal digits to which internal structures will maintain value resolution \" +\n+            \"and separation for throttling. This must be between 0 and 5. \" +\n+            \"Used if 'throttling.delay' session metric is enabled. \"+\n+            \"See DataStax driver configuration option `\"\n+            +DefaultDriverOption.METRICS_SESSION_THROTTLING_DIGITS.getPath()+\"`\",\n+        ConfigOption.Type.LOCAL,\n+        Integer.class);\n+\n+    ConfigOption<Long> METRICS_SESSION_THROTTLING_REFRESH_INTERVAL = new ConfigOption<>(\n+        METRICS,\n+        \"throttling-delay-refresh-interval\",\n+        \"The interval at which percentile data is refreshed in milliseconds for throttling. \" +\n+            \"Used if 'throttling.delay' session metric is enabled. \"+\n+            \"See DataStax driver configuration option `\"\n+            +DefaultDriverOption.METRICS_SESSION_THROTTLING_INTERVAL.getPath()+\"`\",\n+        ConfigOption.Type.LOCAL,\n+        Long.class);\n+\n+    ConfigOption<String[]> METRICS_NODE_ENABLED = new ConfigOption<>(\n+        METRICS,\n+        \"node-enabled\",\n+        \"Comma separated list of enabled node metrics. Used only when basic metrics are enabled. \" +\n+            \"Check DataStax Cassandra Driver 4 documentation for available metrics \" +\n+            \"(example: pool.open-connections, pool.available-streams, bytes-sent).\",\n+        ConfigOption.Type.LOCAL,\n+        String[].class);\n+\n+    ConfigOption<Long> METRICS_NODE_MESSAGES_HIGHEST_LATENCY = new ConfigOption<>(\n+        METRICS,\n+        \"cql-messages-highest-latency\",\n+        \"The largest latency that we expect to record for requests in milliseconds. \" +\n+            \"Used if 'cql-messages' node metric is enabled. \"+\n+            \"See DataStax driver configuration option `\"\n+            +DefaultDriverOption.METRICS_NODE_CQL_MESSAGES_HIGHEST.getPath()+\"`\",\n+        ConfigOption.Type.LOCAL,\n+        Long.class);\n+\n+    ConfigOption<Integer> METRICS_NODE_MESSAGES_SIGNIFICANT_DIGITS = new ConfigOption<>(\n+        METRICS,\n+        \"cql-messages-significant-digits\",\n+        \"The number of significant decimal digits to which internal structures will maintain value resolution \" +\n+            \"and separation for requests. This must be between 0 and 5. \" +\n+            \"Used if 'cql-messages' node metric is enabled. \"+\n+            \"See DataStax driver configuration option `\"\n+            +DefaultDriverOption.METRICS_NODE_CQL_MESSAGES_DIGITS.getPath()+\"`\",\n+        ConfigOption.Type.LOCAL,\n+        Integer.class);\n+\n+    ConfigOption<Long> METRICS_NODE_MESSAGES_REFRESH_INTERVAL = new ConfigOption<>(\n+        METRICS,\n+        \"cql-messages-delay-refresh-interval\",\n+        \"The interval at which percentile data is refreshed in milliseconds for requests. \" +\n+            \"Used if 'cql-messages' node metric is enabled. \"+\n+            \"See DataStax driver configuration option `\"\n+            +DefaultDriverOption.METRICS_NODE_CQL_MESSAGES_INTERVAL.getPath()+\"`\",\n+        ConfigOption.Type.LOCAL,\n+        Long.class);\n+\n+    ConfigOption<Long> METRICS_NODE_EXPIRE_AFTER = new ConfigOption<>(\n+        METRICS,\n+        \"node-expire-after\",\n+        \"The time after which the node level metrics will be evicted in milliseconds.\",\n+        ConfigOption.Type.LOCAL,\n+        Long.class);\n+\n+    // Request tracker (request logging)\n+\n+    ConfigNamespace REQUEST_TRACKER = new ConfigNamespace(\n+        CQL_NS,\n+        \"request-tracker\",\n+        \"Configuration options for CQL request tracker and builtin request logger\");\n+\n+    ConfigOption<String> REQUEST_TRACKER_CLASS = new ConfigOption<>(\n+        REQUEST_TRACKER,\n+        \"class\",\n+        \"It is either a predefined DataStax driver value for a builtin request tracker \" +\n+            \"or a full qualified class name which implements \" +\n+            \"`com.datastax.oss.driver.internal.core.tracker.RequestTracker` interface. \" +\n+            \"If no any value provided, the default DataStax request tracker is used, which is `NoopRequestTracker` \" +\n+            \"which doesn't do anything. If `RequestLogger` value is provided, the DataStax [RequestLogger]\" +\n+            \"(https://docs.datastax.com/en/developer/java-driver/4.9/manual/core/request_tracker/#request-logger) \" +\n+            \"is used.\",\n+        ConfigOption.Type.LOCAL,\n+        String.class);\n+\n+    ConfigOption<Boolean> REQUEST_LOGGER_SUCCESS_ENABLED = new ConfigOption<>(\n+        REQUEST_TRACKER,\n+        \"logs-success-enabled\",\n+        \"Whether to log successful requests. \" +\n+            \"Can be used when `\" + REQUEST_TRACKER_CLASS.toString() + \"` is set to `RequestLogger`.\",\n+        ConfigOption.Type.LOCAL,\n+        Boolean.class);\n+\n+    ConfigOption<Long> REQUEST_LOGGER_SLOW_THRESHOLD = new ConfigOption<>(\n+        REQUEST_TRACKER,\n+        \"logs-slow-threshold\",\n+        \"The threshold to classify a successful request as `slow`. In milliseconds. \" +\n+            \"Can be used when `\" + REQUEST_TRACKER_CLASS.toString() + \"` is set to `RequestLogger`.\",\n+        ConfigOption.Type.LOCAL,\n+        Long.class);\n+\n+    ConfigOption<Boolean> REQUEST_LOGGER_SLOW_ENABLED = new ConfigOption<>(\n+        REQUEST_TRACKER,\n+        \"logs-slow-enabled\",\n+        \"Whether to log `slow` requests.\" +\n+            \"Can be used when `\" + REQUEST_TRACKER_CLASS.toString() + \"` is set to `RequestLogger`.\",\n+        ConfigOption.Type.LOCAL,\n+        Boolean.class);\n+\n+    ConfigOption<Boolean> REQUEST_LOGGER_ERROR_ENABLED = new ConfigOption<>(\n+        REQUEST_TRACKER,\n+        \"logs-error-enabled\",\n+        \"Whether to log failed requests.\" +\n+            \"Can be used when `\" + REQUEST_TRACKER_CLASS.toString() + \"` is set to `RequestLogger`.\",\n+        ConfigOption.Type.LOCAL,\n+        Boolean.class);\n+\n+    ConfigOption<Integer> REQUEST_LOGGER_MAX_QUERY_LENGTH = new ConfigOption<>(\n+        REQUEST_TRACKER,\n+        \"logs-max-query-length\",\n+        \"The maximum length of the query string in the log message. \" +\n+            \"Can be used when `\" + REQUEST_TRACKER_CLASS.toString() + \"` is set to `RequestLogger`.\",\n+        ConfigOption.Type.LOCAL,\n+        Integer.class);\n \n-    ConfigOption<Integer> QUERY_LOGGER_MAX_QUERY_STRING_LENGTH = new ConfigOption<>(\n-        QUERY_LOGGER,\n-        \"max-query-string-length\",\n-        \"Max query string length to be logged when query logger is enabled. Use '-1' to use datastax default value.\",\n+    ConfigOption<Boolean> REQUEST_LOGGER_SHOW_VALUES = new ConfigOption<>(\n+        REQUEST_TRACKER,\n+        \"logs-show-values\",\n+        \"Whether to log bound values in addition to the query string. \" +\n+            \"Can be used when `\" + REQUEST_TRACKER_CLASS.toString() + \"` is set to `RequestLogger`.\",\n         ConfigOption.Type.LOCAL,\n-        -1);\n+        Boolean.class);\n \n-    ConfigOption<Long> QUERY_LOGGER_CONSTANT_THRESHOLD = new ConfigOption<>(\n-        QUERY_LOGGER,\n-        \"constant-threshold\",\n-        \"Log only queries which take longer to complete than a configured threshold in milliseconds. Use '-1' to use datastax default value.\",\n+    ConfigOption<Integer> REQUEST_LOGGER_MAX_VALUE_LENGTH = new ConfigOption<>(\n+        REQUEST_TRACKER,\n+        \"logs-max-value-length\",\n+        \"The maximum length for bound values in the log message. \" +\n+            \"Can be used when `\" + REQUEST_TRACKER_CLASS.toString() + \"` is set to `RequestLogger`.\",\n         ConfigOption.Type.LOCAL,\n-        -1L);\n+        Integer.class);\n \n-    ConfigOption<Integer> QUERY_LOGGER_MAX_LOGGED_PARAMETERS = new ConfigOption<>(\n-        QUERY_LOGGER,\n-        \"max-logged-parameters\",\n-        \"Maximum amount of logged parameters. Queries with a number of parameters higher than this value will not have all their parameters logged. Use '-1' to use datastax default value.\",\n+    ConfigOption<Integer> REQUEST_LOGGER_MAX_VALUES = new ConfigOption<>(\n+        REQUEST_TRACKER,\n+        \"logs-max-values\",\n+        \"The maximum number of bound values to log. \" +\n+            \"Can be used when `\" + REQUEST_TRACKER_CLASS.toString() + \"` is set to `RequestLogger`.\",\n         ConfigOption.Type.LOCAL,\n-        -1);\n+        Integer.class);\n \n-    ConfigOption<Integer> QUERY_LOGGER_MAX_PARAMETER_VALUE_LENGTH = new ConfigOption<>(\n-        QUERY_LOGGER,\n-        \"max-parameter-value-length\",\n-        \"Parameter values longer than this value will be truncated when logged. Use '-1' to use datastax default value.\",\n+    ConfigOption<Boolean> REQUEST_LOGGER_SHOW_STACK_TRACES = new ConfigOption<>(\n+        REQUEST_TRACKER,\n+        \"logs-show-stack-traces\",\n+        \"Whether to log stack traces for failed queries. \" +\n+            \"Can be used when `\" + REQUEST_TRACKER_CLASS.toString() + \"` is set to `RequestLogger`.\",\n         ConfigOption.Type.LOCAL,\n-        -1);\n+        Boolean.class);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY1Mzk3NQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2158#discussion_r450653975", "bodyText": "You forgot a space in each if.", "author": "farodin91", "createdAt": "2020-07-07T07:09:04Z", "path": "janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLStoreManager.java", "diffHunk": "@@ -316,7 +281,35 @@ Cluster initializeCluster() throws PermanentBackendException {\n                     HostDistance.REMOTE,\n                     configuration.get(REMOTE_CORE_CONNECTIONS_PER_HOST),\n                     configuration.get(REMOTE_MAX_CONNECTIONS_PER_HOST));\n-        return builder.withPoolingOptions(poolingOptions).build();\n+\n+        Cluster cluster = builder.withPoolingOptions(poolingOptions).build();\n+\n+        if(configuration.get(QUERY_LOGGER_ENABLED)){", "originalCommit": "005742cdcdc24b8a765407967a920fc722c783e5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7dfe957b36ab56b94f945881a60ec44f789813f", "chunk": "diff --git a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLStoreManager.java b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLStoreManager.java\nindex 07934730e..4dd7b5c21 100644\n--- a/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLStoreManager.java\n+++ b/janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLStoreManager.java\n\n@@ -193,134 +237,106 @@ public class CQLStoreManager extends DistributedStoreManager implements KeyColum\n         this.openStores = new ConcurrentHashMap<>();\n     }\n \n-    Cluster initializeCluster() throws PermanentBackendException {\n+    CqlSession initializeSession() throws PermanentBackendException {\n         final Configuration configuration = getStorageConfig();\n \n         final List<InetSocketAddress> contactPoints;\n         try {\n             contactPoints = Array.of(this.hostnames)\n-                    .map(hostName -> hostName.split(\":\"))\n-                    .map(array -> Tuple.of(array[0], array.length == 2 ? Integer.parseInt(array[1]) : this.port))\n-                    .map(tuple -> new InetSocketAddress(tuple._1, tuple._2))\n-                    .toJavaList();\n+                .map(hostName -> hostName.split(\":\"))\n+                .map(array -> Tuple.of(array[0], array.length == 2 ? Integer.parseInt(array[1]) : this.port))\n+                .map(tuple -> new InetSocketAddress(tuple._1, tuple._2))\n+                .toJavaList();\n         } catch (SecurityException | ArrayIndexOutOfBoundsException | NumberFormatException e) {\n             throw new PermanentBackendException(\"Error initialising cluster contact points\", e);\n         }\n \n-        final Builder builder = Cluster.builder()\n-                .addContactPointsWithPorts(contactPoints)\n-                .withClusterName(configuration.get(CLUSTER_NAME));\n+        final CqlSessionBuilder builder = CqlSession.builder()\n+            .addContactPoints(contactPoints)\n+            .withLocalDatacenter(configuration.get(LOCAL_DATACENTER));\n+\n+        ProgrammaticDriverConfigLoaderBuilder configLoaderBuilder = DriverConfigLoader.programmaticBuilder();\n+        configLoaderBuilder.withString(DefaultDriverOption.SESSION_NAME, configuration.get(SESSION_NAME));\n+        configLoaderBuilder.withDuration(DefaultDriverOption.REQUEST_TIMEOUT, configuration.get(CONNECTION_TIMEOUT));\n \n         if (configuration.get(PROTOCOL_VERSION) != 0) {\n-            builder.withProtocolVersion(ProtocolVersion.fromInt(configuration.get(PROTOCOL_VERSION)));\n+            configLoaderBuilder.withInt(DefaultDriverOption.PROTOCOL_VERSION, configuration.get(PROTOCOL_VERSION));\n         }\n \n         if (configuration.has(AUTH_USERNAME) && configuration.has(AUTH_PASSWORD)) {\n-            builder.withCredentials(configuration.get(AUTH_USERNAME), configuration.get(AUTH_PASSWORD));\n-        }\n-\n-        if (configuration.has(LOCAL_DATACENTER)) {\n-            builder.withLoadBalancingPolicy(new TokenAwarePolicy(DCAwareRoundRobinPolicy.builder()\n-                    .withLocalDc(configuration.get(LOCAL_DATACENTER))\n-                    .build()));\n+            configLoaderBuilder\n+                .withClass(DefaultDriverOption.AUTH_PROVIDER_CLASS, PlainTextAuthProvider.class)\n+                .withString(DefaultDriverOption.AUTH_PROVIDER_USER_NAME, configuration.get(AUTH_USERNAME))\n+                .withString(DefaultDriverOption.AUTH_PROVIDER_PASSWORD, configuration.get(AUTH_PASSWORD));\n         }\n \n         if (configuration.get(SSL_ENABLED)) {\n-            try {\n-                KeyManager[] keyManagers = null;\n-                if(configuration.get(SSL_CLIENT_AUTHENTICATION_ENABLED)) {\n-                    try (final FileInputStream keyStoreStream = new FileInputStream(configuration.get(SSL_KEYSTORE_LOCATION))) {\n-                        final KeyStore keystore = KeyStore.getInstance(\"jks\");\n-                        keystore.load(keyStoreStream, configuration.get(SSL_KEYSTORE_STORE_PASSWORD).toCharArray());\n-                        final KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n-                        keyManagerFactory.init(keystore, configuration.get(SSL_KEYSTORE_KEY_PASSWORD).toCharArray());\n-                        keyManagers = keyManagerFactory.getKeyManagers();\n-                    }\n-                }\n-                final TrustManager[] trustManagers;\n-                try (final FileInputStream keyStoreStream = new FileInputStream(configuration.get(SSL_TRUSTSTORE_LOCATION))) {\n-                    final KeyStore keystore = KeyStore.getInstance(\"jks\");\n-                    keystore.load(keyStoreStream, configuration.get(SSL_TRUSTSTORE_PASSWORD).toCharArray());\n-                    final TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n-                    trustManagerFactory.init(keystore);\n-                    trustManagers = trustManagerFactory.getTrustManagers();\n-                }\n-\n-                final SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n-                sslContext.init(keyManagers, trustManagers, null);\n-\n-                final JdkSSLOptions sslOptions = JdkSSLOptions.builder()\n-                        .withSSLContext(sslContext)\n-                        .build();\n-                builder.withSSL(sslOptions);\n-\n-            } catch (UnrecoverableKeyException | NoSuchAlgorithmException | CertificateException | IOException | KeyStoreException | KeyManagementException e) {\n-                throw new PermanentBackendException(\"Error initialising SSL connection properties\", e);\n+            configLoaderBuilder\n+                .withClass(DefaultDriverOption.SSL_ENGINE_FACTORY_CLASS, DefaultSslEngineFactory.class)\n+                .withString(DefaultDriverOption.SSL_TRUSTSTORE_PATH, configuration.get(SSL_TRUSTSTORE_LOCATION))\n+                .withString(DefaultDriverOption.SSL_TRUSTSTORE_PASSWORD, configuration.get(SSL_TRUSTSTORE_PASSWORD))\n+                .withBoolean(DefaultDriverOption.SSL_HOSTNAME_VALIDATION, configuration.get(SSL_HOSTNAME_VALIDATION));\n+\n+            if(configuration.get(SSL_CLIENT_AUTHENTICATION_ENABLED)) {\n+                configLoaderBuilder\n+                    .withString(DefaultDriverOption.SSL_KEYSTORE_PATH, configuration.get(SSL_KEYSTORE_LOCATION))\n+                    .withString(DefaultDriverOption.SSL_KEYSTORE_PASSWORD, configuration.get(SSL_KEYSTORE_KEY_PASSWORD));\n             }\n         }\n \n-        if (!configuration.get(BASIC_METRICS)) {\n-            builder.withoutMetrics();\n+        configLoaderBuilder.withInt(DefaultDriverOption.CONNECTION_POOL_LOCAL_SIZE, configuration.get(LOCAL_MAX_CONNECTIONS_PER_HOST));\n+        configLoaderBuilder.withInt(DefaultDriverOption.CONNECTION_POOL_REMOTE_SIZE, configuration.get(REMOTE_MAX_CONNECTIONS_PER_HOST));\n+        configLoaderBuilder.withInt(DefaultDriverOption.CONNECTION_MAX_REQUESTS, configuration.get(MAX_REQUESTS_PER_CONNECTION));\n+\n+        if(configuration.has(HEARTBEAT_INTERVAL)){\n+            configLoaderBuilder.withDuration(DefaultDriverOption.HEARTBEAT_INTERVAL,\n+                Duration.ofMillis(configuration.get(HEARTBEAT_INTERVAL)));\n         }\n \n-        // Build the PoolingOptions based on the configurations\n-        PoolingOptions poolingOptions = new PoolingOptions();\n-        poolingOptions\n-            .setMaxRequestsPerConnection(\n-                    HostDistance.LOCAL,\n-                    configuration.get(LOCAL_MAX_REQUESTS_PER_CONNECTION))\n-            .setMaxRequestsPerConnection(\n-                    HostDistance.REMOTE,\n-                    configuration.get(REMOTE_MAX_REQUESTS_PER_CONNECTION));\n-        poolingOptions\n-            .setConnectionsPerHost(\n-                    HostDistance.LOCAL,\n-                    configuration.get(LOCAL_CORE_CONNECTIONS_PER_HOST),\n-                    configuration.get(LOCAL_MAX_CONNECTIONS_PER_HOST))\n-            .setConnectionsPerHost(\n-                    HostDistance.REMOTE,\n-                    configuration.get(REMOTE_CORE_CONNECTIONS_PER_HOST),\n-                    configuration.get(REMOTE_MAX_CONNECTIONS_PER_HOST));\n-\n-        Cluster cluster = builder.withPoolingOptions(poolingOptions).build();\n-\n-        if(configuration.get(QUERY_LOGGER_ENABLED)){\n-            registerQueryLogger(cluster, configuration);\n+        if(configuration.has(HEARTBEAT_TIMEOUT)){\n+            configLoaderBuilder.withDuration(DefaultDriverOption.HEARTBEAT_TIMEOUT,\n+                Duration.ofMillis(configuration.get(HEARTBEAT_TIMEOUT)));\n         }\n \n-        return cluster;\n-    }\n+        // Keep to 0 for the time being: https://groups.google.com/a/lists.datastax.com/forum/#!topic/java-driver-user/Bc0gQuOVVL0\n+        // Ideally we want to batch all tables initialisations to happen together when opening a new keyspace\n+        configLoaderBuilder.withInt(DefaultDriverOption.METADATA_SCHEMA_WINDOW, 0);\n \n-    private void registerQueryLogger(Cluster cluster, Configuration configuration){\n-        QueryLogger.Builder queryLoggerBuilder = QueryLogger.builder();\n-        int maxQueryStringLength = configuration.get(QUERY_LOGGER_MAX_QUERY_STRING_LENGTH);\n-        if(maxQueryStringLength != -1){\n-            queryLoggerBuilder.withMaxQueryStringLength(maxQueryStringLength);\n-        }\n-        long constantThreshold = configuration.get(QUERY_LOGGER_CONSTANT_THRESHOLD);\n-        if(constantThreshold != -1){\n-            queryLoggerBuilder.withConstantThreshold(constantThreshold);\n-        }\n-        int maxLoggedParameters = configuration.get(QUERY_LOGGER_MAX_LOGGED_PARAMETERS);\n-        if(maxLoggedParameters != -1){\n-            queryLoggerBuilder.withMaxLoggedParameters(maxLoggedParameters);\n+        configureCqlNetty(configuration, configLoaderBuilder);\n+\n+        if (configuration.get(BASIC_METRICS)) {\n+            configureMetrics(configuration, configLoaderBuilder);\n         }\n-        int maxParameterValueLength = configuration.get(QUERY_LOGGER_MAX_PARAMETER_VALUE_LENGTH);\n-        if(maxParameterValueLength != -1){\n-            queryLoggerBuilder.withMaxParameterValueLength(maxParameterValueLength);\n+\n+        configureRequestTracker(configuration, configLoaderBuilder);\n+\n+        builder.withConfigLoader(configLoaderBuilder.build());\n+\n+        return builder.build();\n+    }\n+\n+    private void initializeJmxMetrics() {\n+        final Configuration configuration = getStorageConfig();\n+        if (configuration.get(METRICS_JMX_ENABLED) && configuration.get(BASIC_METRICS) && session.getMetrics().isPresent()) {\n+            MetricManager.INSTANCE.getRegistry().registerAll(session.getMetrics().get().getRegistry());\n         }\n-        cluster.register(queryLoggerBuilder.build());\n     }\n \n-    Session initializeSession(final String keyspaceName) {\n-        final Session s = this.cluster.connect();\n+    private void clearJmxMetrics() {\n+        final Configuration configuration = getStorageConfig();\n+        if (configuration.get(METRICS_JMX_ENABLED) && configuration.get(BASIC_METRICS) && session.getMetrics().isPresent()) {\n+            session.getMetrics().get().getRegistry().getNames().forEach(metricName -> MetricManager.INSTANCE.getRegistry().remove(metricName));\n+        }\n+    }\n \n-        // if the keyspace already exists, just return the session\n-        if (this.cluster.getMetadata().getKeyspace(keyspaceName) != null) {\n-            return s;\n+    void initializeKeyspace(){\n+        // if the keyspace already exists, just return\n+        if (this.session.getMetadata().getKeyspace(this.keyspace).isPresent()) {\n+            return;\n         }\n \n         final Configuration configuration = getStorageConfig();\n+\n         // Setting replication strategy based on value reading from the configuration: either \"SimpleStrategy\" or \"NetworkTopologyStrategy\"\n         final Map<String, Object> replication = Match(configuration.get(REPLICATION_STRATEGY)).of(\n             Case($(\"SimpleStrategy\"), strategy -> HashMap.<String, Object> of(\"class\", strategy, \"replication_factor\", configuration.get(REPLICATION_FACTOR))),\n"}}, {"oid": "f7dfe957b36ab56b94f945881a60ec44f789813f", "url": "https://github.com/JanusGraph/janusgraph/commit/f7dfe957b36ab56b94f945881a60ec44f789813f", "message": "Add optional DataStax request logger\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-11-30T23:21:15Z", "type": "forcePushed"}, {"oid": "5d375eff357e63a855c1210e2dd9867faf465d55", "url": "https://github.com/JanusGraph/janusgraph/commit/5d375eff357e63a855c1210e2dd9867faf465d55", "message": "Add optional DataStax request logger\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-11-30T23:26:16Z", "type": "forcePushed"}, {"oid": "3e6e09098e72ef54b55495f1b758b80bc803744f", "url": "https://github.com/JanusGraph/janusgraph/commit/3e6e09098e72ef54b55495f1b758b80bc803744f", "message": "Add optional DataStax request logger\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-12-02T14:49:20Z", "type": "commit"}, {"oid": "3e6e09098e72ef54b55495f1b758b80bc803744f", "url": "https://github.com/JanusGraph/janusgraph/commit/3e6e09098e72ef54b55495f1b758b80bc803744f", "message": "Add optional DataStax request logger\n\nSigned-off-by: Oleksandr Porunov <alexandr.porunov@gmail.com>", "committedDate": "2020-12-02T14:49:20Z", "type": "forcePushed"}]}