{"pr_number": 2490, "pr_title": "[core] Simplify the rulechain", "pr_createdAt": "2020-05-18T14:04:08Z", "pr_url": "https://github.com/pmd/pmd/pull/2490", "timeline": [{"oid": "923eda931f21c0ebb8b3087d64b9a8b5d80fbbac", "url": "https://github.com/pmd/pmd/commit/923eda931f21c0ebb8b3087d64b9a8b5d80fbbac", "message": "Generalized rchain", "committedDate": "2020-05-18T12:56:54Z", "type": "commit"}, {"oid": "3348e634ca2cbfe519c8d1615facdff2a19c7af0", "url": "https://github.com/pmd/pmd/commit/3348e634ca2cbfe519c8d1615facdff2a19c7af0", "message": "Optimise rulechain lookup", "committedDate": "2020-05-18T12:56:54Z", "type": "commit"}, {"oid": "19212f94881902168fbd363c2a88aea7bf098732", "url": "https://github.com/pmd/pmd/commit/19212f94881902168fbd363c2a88aea7bf098732", "message": "Define everything in terms of rulechain with a heap structure", "committedDate": "2020-05-18T12:56:54Z", "type": "commit"}, {"oid": "7f03b3cc22e7f992fe30db63243413aed0709757", "url": "https://github.com/pmd/pmd/commit/7f03b3cc22e7f992fe30db63243413aed0709757", "message": "Remove monotonic set", "committedDate": "2020-05-18T12:56:54Z", "type": "commit"}, {"oid": "c0a1455aa7103adb035fc8d0fb77b7c19aef3276", "url": "https://github.com/pmd/pmd/commit/c0a1455aa7103adb035fc8d0fb77b7c19aef3276", "message": "Make heap freezable", "committedDate": "2020-05-18T12:56:54Z", "type": "commit"}, {"oid": "24a4a89e9e98c3cd1493955c30880599ec17a3e8", "url": "https://github.com/pmd/pmd/commit/24a4a89e9e98c3cd1493955c30880599ec17a3e8", "message": "Extract monoid impls", "committedDate": "2020-05-18T12:56:54Z", "type": "commit"}, {"oid": "7998622c4f6c20b47e9ed1a9d4373f3122353850", "url": "https://github.com/pmd/pmd/commit/7998622c4f6c20b47e9ed1a9d4373f3122353850", "message": "Encapsulate behaviour in strategies", "committedDate": "2020-05-18T12:56:54Z", "type": "commit"}, {"oid": "35a966f606dc830ab28fe7fc5ddaf92e40df786b", "url": "https://github.com/pmd/pmd/commit/35a966f606dc830ab28fe7fc5ddaf92e40df786b", "message": "Rename", "committedDate": "2020-05-18T12:56:54Z", "type": "commit"}, {"oid": "200bafce3a982486428888fefb236e80257d94fc", "url": "https://github.com/pmd/pmd/commit/200bafce3a982486428888fefb236e80257d94fc", "message": "Make monoid extend BinaryOperator", "committedDate": "2020-05-18T12:56:54Z", "type": "commit"}, {"oid": "d1d498146ff05764eacb9e2dce8f9e5f265e6bb8", "url": "https://github.com/pmd/pmd/commit/d1d498146ff05764eacb9e2dce8f9e5f265e6bb8", "message": "Test monoids", "committedDate": "2020-05-18T12:56:54Z", "type": "commit"}, {"oid": "bd4da2c99c7e7ed9467de6e094d93656ace6dccf", "url": "https://github.com/pmd/pmd/commit/bd4da2c99c7e7ed9467de6e094d93656ace6dccf", "message": "Fix diamond situation", "committedDate": "2020-05-18T12:56:54Z", "type": "commit"}, {"oid": "d4f1f863da5f402a321990be547b37ea5c6e6dc5", "url": "https://github.com/pmd/pmd/commit/d4f1f863da5f402a321990be547b37ea5c6e6dc5", "message": "Test topo order", "committedDate": "2020-05-18T12:56:54Z", "type": "commit"}, {"oid": "9ff844921b6f41ea953f41b61d62f6ab316f4188", "url": "https://github.com/pmd/pmd/commit/9ff844921b6f41ea953f41b61d62f6ab316f4188", "message": "Implement real toposort", "committedDate": "2020-05-18T12:56:54Z", "type": "commit"}, {"oid": "8c824412656774a46ade0e9b69c3d8c33165f5e0", "url": "https://github.com/pmd/pmd/commit/8c824412656774a46ade0e9b69c3d8c33165f5e0", "message": "Use persistent collections", "committedDate": "2020-05-18T12:56:54Z", "type": "commit"}, {"oid": "47fb790bd6e336582654f40b991b765e8d3d15ca", "url": "https://github.com/pmd/pmd/commit/47fb790bd6e336582654f40b991b765e8d3d15ca", "message": "Use node stream lattice", "committedDate": "2020-05-18T12:56:54Z", "type": "commit"}, {"oid": "b428629c7de9c9b91f0d6e971dd91c91f5435876", "url": "https://github.com/pmd/pmd/commit/b428629c7de9c9b91f0d6e971dd91c91f5435876", "message": "Allow preserving topology", "committedDate": "2020-05-18T12:56:54Z", "type": "commit"}, {"oid": "79e3fa264b63ad6e4e19aaf4d8f1e8121af193cf", "url": "https://github.com/pmd/pmd/commit/79e3fa264b63ad6e4e19aaf4d8f1e8121af193cf", "message": "Fix xpath rulechain", "committedDate": "2020-05-18T12:56:54Z", "type": "commit"}, {"oid": "60d276c2a00e765c4a7fb8c26d7824c4bbd0c1fe", "url": "https://github.com/pmd/pmd/commit/60d276c2a00e765c4a7fb8c26d7824c4bbd0c1fe", "message": "Remove old rulechain impl", "committedDate": "2020-05-18T12:57:53Z", "type": "commit"}, {"oid": "e0ac470c5ea6fc7b6eda0f83b13b19a714f972ec", "url": "https://github.com/pmd/pmd/commit/e0ac470c5ea6fc7b6eda0f83b13b19a714f972ec", "message": "Improve performance of classloader", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "dc9bb62630965d33c9f530e425850450f29691b0", "url": "https://github.com/pmd/pmd/commit/dc9bb62630965d33c9f530e425850450f29691b0", "message": "Cleanup", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "2670a9fdee867955e0c242143a5f7e325b38950e", "url": "https://github.com/pmd/pmd/commit/2670a9fdee867955e0c242143a5f7e325b38950e", "message": "Port java rules", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "ce33f159a5b825e2f09f6f24b30c60c58d7e3c80", "url": "https://github.com/pmd/pmd/commit/ce33f159a5b825e2f09f6f24b30c60c58d7e3c80", "message": "Force parsers to return RootNode", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "e69080d9e84009258a33d6f2d2b250fdc22d15df", "url": "https://github.com/pmd/pmd/commit/e69080d9e84009258a33d6f2d2b250fdc22d15df", "message": "Fix tests", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "cc23b61b0308167ed0ea16cbc3bc30d11659b298", "url": "https://github.com/pmd/pmd/commit/cc23b61b0308167ed0ea16cbc3bc30d11659b298", "message": "Improve test XML schema", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "9af5268605a469498d6beee3767da9cc738278e3", "url": "https://github.com/pmd/pmd/commit/9af5268605a469498d6beee3767da9cc738278e3", "message": "Cleanup", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "ea2a4a1515a824023215d882001aaa4c2261708c", "url": "https://github.com/pmd/pmd/commit/ea2a4a1515a824023215d882001aaa4c2261708c", "message": "Revert changes to test framework", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "697db53c4c5fc71b792005ef583daffa32d61cea", "url": "https://github.com/pmd/pmd/commit/697db53c4c5fc71b792005ef583daffa32d61cea", "message": "Doc", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "c6965c62a0e4dca325fba88f2af51f6870929cc4", "url": "https://github.com/pmd/pmd/commit/c6965c62a0e4dca325fba88f2af51f6870929cc4", "message": "Revert changes to typeres", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "f27d5fb5f65a0e7ee66ff1aab51bae87f9090859", "url": "https://github.com/pmd/pmd/commit/f27d5fb5f65a0e7ee66ff1aab51bae87f9090859", "message": "Cleanup Rule methods", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "8f13dd82f03a33ee9b2651acb8f7b2ab6088036d", "url": "https://github.com/pmd/pmd/commit/8f13dd82f03a33ee9b2651acb8f7b2ab6088036d", "message": "Replace Node#apply(List<Node>) with apply(Node)", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "2ca2e775512fd15977eb6eb42e358ca4be9c9f44", "url": "https://github.com/pmd/pmd/commit/2ca2e775512fd15977eb6eb42e358ca4be9c9f44", "message": "Cleanup lattice", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "1054dbc772fd05f70fcc7db1a938736c274e3ae6", "url": "https://github.com/pmd/pmd/commit/1054dbc772fd05f70fcc7db1a938736c274e3ae6", "message": "Prune non-public types", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "1b68a2683ffeab873ceb6ab1919fec90e9b5a68c", "url": "https://github.com/pmd/pmd/commit/1b68a2683ffeab873ceb6ab1919fec90e9b5a68c", "message": "Add tests", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "28bf4d918e022309e246b59479266872b2afd151", "url": "https://github.com/pmd/pmd/commit/28bf4d918e022309e246b59479266872b2afd151", "message": "Remove diamond detection\n\nIf we just mandate that the monoid\nbe idempotent, which is the case for\nset monoids, then we can just avoid\nthis and reduce complexity of the\nimplementation.", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "83fb4ce663592873c5f153cf9610f8c8523d6e25", "url": "https://github.com/pmd/pmd/commit/83fb4ce663592873c5f153cf9610f8c8523d6e25", "message": "Actually we don't need idempotence", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "dd1c82a02a084d3419c31fa1af20991a8f66b441", "url": "https://github.com/pmd/pmd/commit/dd1c82a02a084d3419c31fa1af20991a8f66b441", "message": "Nail monoid properties\n\nWe need commutativity, but can work\naround idempotence by being smarter\nthe impl of the reduction op", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "349cb1c7c1090fc01f83b881afc39d42ab2fa412", "url": "https://github.com/pmd/pmd/commit/349cb1c7c1090fc01f83b881afc39d42ab2fa412", "message": "Fix order of graph output", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "89140c97603b6dd02dd3ea4532be6da5c54979c6", "url": "https://github.com/pmd/pmd/commit/89140c97603b6dd02dd3ea4532be6da5c54979c6", "message": "Comments", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "e70c8861143a3254b3c9d3bc6ba3b5cbf8892174", "url": "https://github.com/pmd/pmd/commit/e70c8861143a3254b3c9d3bc6ba3b5cbf8892174", "message": "Cleanup", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "473d96f02fc26dc103af98189e3fece2ccbe41d9", "url": "https://github.com/pmd/pmd/commit/473d96f02fc26dc103af98189e3fece2ccbe41d9", "message": "Fix up2date check\n\nBecause of filtering, we're removing some\nnodes that may be readded", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "e53495e7623831383d1454b53f66b328d8507e85", "url": "https://github.com/pmd/pmd/commit/e53495e7623831383d1454b53f66b328d8507e85", "message": "Cleanup", "committedDate": "2020-05-18T12:57:54Z", "type": "commit"}, {"oid": "7d48a1e111360051a5e61451cf5c24560d7ed104", "url": "https://github.com/pmd/pmd/commit/7d48a1e111360051a5e61451cf5c24560d7ed104", "message": "Only index what's important", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "351e53866ccb82e3aa848c503983f3d8e76a0477", "url": "https://github.com/pmd/pmd/commit/351e53866ccb82e3aa848c503983f3d8e76a0477", "message": "Fix tests", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "a70c93c45413744f9c80b2e193253d8894b88610", "url": "https://github.com/pmd/pmd/commit/a70c93c45413744f9c80b2e193253d8894b88610", "message": "Mandate idempotence\n\nMakes it much easier to reason about", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "047e4651b652592695bda66c580e4523cc278292", "url": "https://github.com/pmd/pmd/commit/047e4651b652592695bda66c580e4523cc278292", "message": "Avoid transitive closure", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "eb6963437077521acda37251ba72ede63d54e42e", "url": "https://github.com/pmd/pmd/commit/eb6963437077521acda37251ba72ede63d54e42e", "message": "Test", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "45471bb3f31d739d56e648208bf6ff66bcb6de14", "url": "https://github.com/pmd/pmd/commit/45471bb3f31d739d56e648208bf6ff66bcb6de14", "message": "Remove need for path matrix\n\nSince graph is sparse, this is much better", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "d2425a90e4ffbd90f073e728cc210f7c7d75c0ad", "url": "https://github.com/pmd/pmd/commit/d2425a90e4ffbd90f073e728cc210f7c7d75c0ad", "message": "Remove 1 loop + 1 list creation", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "c13951ee46a630af84f599b5209cf4f8b46e912b", "url": "https://github.com/pmd/pmd/commit/c13951ee46a630af84f599b5209cf4f8b46e912b", "message": "Add set filter", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "21aa2efbbff7993b0b451d7e74783247c273d16c", "url": "https://github.com/pmd/pmd/commit/21aa2efbbff7993b0b451d7e74783247c273d16c", "message": "Remove monoid abstraction\n\nUnlikely to change because of tight contract, reduces complexity", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "50909dc8345973d472b0b2d2ded7921680274c27", "url": "https://github.com/pmd/pmd/commit/50909dc8345973d472b0b2d2ded7921680274c27", "message": "More tests", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "fb52188a3b5f40421d2e9cb624b602eeb46598e3", "url": "https://github.com/pmd/pmd/commit/fb52188a3b5f40421d2e9cb624b602eeb46598e3", "message": "Filter rule applicator by classes", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "6ad1bf75ea87653385bf776d6af0bb7e06aee074", "url": "https://github.com/pmd/pmd/commit/6ad1bf75ea87653385bf776d6af0bb7e06aee074", "message": "Filter nodes upon construction\n\nThis will remove the need for a freeze phase", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "b1b7cccdbf3caa3309fba1d92115ea6c91130702", "url": "https://github.com/pmd/pmd/commit/b1b7cccdbf3caa3309fba1d92115ea6c91130702", "message": "Remove freeze stuff\n\nEverything handled by construction", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "8e1f81eff3ecda781abb0f4b434c4a1876139245", "url": "https://github.com/pmd/pmd/commit/8e1f81eff3ecda781abb0f4b434c4a1876139245", "message": "Detect cycles", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "17e041334ffc53cec7e3b0eddd03ae97dc5c77f3", "url": "https://github.com/pmd/pmd/commit/17e041334ffc53cec7e3b0eddd03ae97dc5c77f3", "message": "Preserve leaves", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "e69e8bf8e86bc0f878019cf68fcba45ca3322465", "url": "https://github.com/pmd/pmd/commit/e69e8bf8e86bc0f878019cf68fcba45ca3322465", "message": "Go back to freeze/unfreeze cycle\n\nThis avoids recursing to invalidate successors all the time", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "7126fd6c94fc2e15aa957271c24ff22cdff46dac", "url": "https://github.com/pmd/pmd/commit/7126fd6c94fc2e15aa957271c24ff22cdff46dac", "message": "cleanup", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "44eb3572f81fe811098f5097f68c592aa35a469c", "url": "https://github.com/pmd/pmd/commit/44eb3572f81fe811098f5097f68c592aa35a469c", "message": "Take care of API\n\nRuleTargetSelector is published,\nhowever none of its members are,\nand subclassing it is impossible.\nRest of the types are internal.", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "e54e43507c7e0a118c6ad225be95a2dc9ca7ba26", "url": "https://github.com/pmd/pmd/commit/e54e43507c7e0a118c6ad225be95a2dc9ca7ba26", "message": "Fix JS tests", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "73caeff08167bae21b0743c47c4c92ee142d6ef9", "url": "https://github.com/pmd/pmd/commit/73caeff08167bae21b0743c47c4c92ee142d6ef9", "message": "Extract dot graph dumper", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "862c2f17d86e7c353dcdd32983f88b7cfec1df14", "url": "https://github.com/pmd/pmd/commit/862c2f17d86e7c353dcdd32983f88b7cfec1df14", "message": "Doc", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "68dff545d9d3b9f271eba77d6b8cf99600f46531", "url": "https://github.com/pmd/pmd/commit/68dff545d9d3b9f271eba77d6b8cf99600f46531", "message": "Checkstyle", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "43f6fec88b58375646d222f5756199cd417ddee7", "url": "https://github.com/pmd/pmd/commit/43f6fec88b58375646d222f5756199cd417ddee7", "message": "doc", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "319e65a4a23ba18babff935b5cb4604db8fb5f98", "url": "https://github.com/pmd/pmd/commit/319e65a4a23ba18babff935b5cb4604db8fb5f98", "message": "Remove need for blackhole node\n\nThe lattice does a transitive closure implicitly\ntoo. And we don't need to care about diamond anymore\nThis is NICE", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "969f7148bf4af675b93329360c08c8370e6da41d", "url": "https://github.com/pmd/pmd/commit/969f7148bf4af675b93329360c08c8370e6da41d", "message": "Remove need for independent read/write states", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "46bbfda2db312ced7364fb9953d1c676a3695cb4", "url": "https://github.com/pmd/pmd/commit/46bbfda2db312ced7364fb9953d1c676a3695cb4", "message": "Generalize output value with a collector", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "bb866bb5cb35480b6315575bb88246522043323f", "url": "https://github.com/pmd/pmd/commit/bb866bb5cb35480b6315575bb88246522043323f", "message": "Factorise part of the impl", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "62d2c516ed9c689fc1c01eaaa5a5176d2e5faeae", "url": "https://github.com/pmd/pmd/commit/62d2c516ed9c689fc1c01eaaa5a5176d2e5faeae", "message": "Use iterable in topoorder", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "7ad3a4db2dded19c00d0be582de1a9be9ad6a179", "url": "https://github.com/pmd/pmd/commit/7ad3a4db2dded19c00d0be582de1a9be9ad6a179", "message": "Use regular set instead of PSet internally", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "fa48db748ac9e473f05f17f18944f6fc4198a4b4", "url": "https://github.com/pmd/pmd/commit/fa48db748ac9e473f05f17f18944f6fc4198a4b4", "message": "Cleanup", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "480417bde8e863b1b26f3b0de166eb0ed957413d", "url": "https://github.com/pmd/pmd/commit/480417bde8e863b1b26f3b0de166eb0ed957413d", "message": "Document CollectionUtil, add some other useful things", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "f1b29e0d76f73ecf8bc7f100367e11210ffa27d8", "url": "https://github.com/pmd/pmd/commit/f1b29e0d76f73ecf8bc7f100367e11210ffa27d8", "message": "Doc", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "de8c4b8a5ad47ee4d229e1c6bd612855e8ca8b6b", "url": "https://github.com/pmd/pmd/commit/de8c4b8a5ad47ee4d229e1c6bd612855e8ca8b6b", "message": "Fix rebase", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "9df92f8ef89b7c94a07d6527c56f2326b7bd38fc", "url": "https://github.com/pmd/pmd/commit/9df92f8ef89b7c94a07d6527c56f2326b7bd38fc", "message": "Make PSet collector", "committedDate": "2020-05-18T12:57:55Z", "type": "commit"}, {"oid": "e8f83dce2d3ab2f2d379e18318af00a0e2d40979", "url": "https://github.com/pmd/pmd/commit/e8f83dce2d3ab2f2d379e18318af00a0e2d40979", "message": "Fix test", "committedDate": "2020-05-18T12:57:56Z", "type": "commit"}, {"oid": "425e537918590a38ce9b0a52581c6d3a9f617e3c", "url": "https://github.com/pmd/pmd/commit/425e537918590a38ce9b0a52581c6d3a9f617e3c", "message": "Checkstyle", "committedDate": "2020-05-18T12:57:56Z", "type": "commit"}, {"oid": "eccf354861e5e6f326883563430ae155731ff020", "url": "https://github.com/pmd/pmd/commit/eccf354861e5e6f326883563430ae155731ff020", "message": "Replace usages of addRulechainVisit", "committedDate": "2020-05-18T13:53:44Z", "type": "commit"}, {"oid": "cae73a8ac2c3a64057641a391b3e70cc26193397", "url": "https://github.com/pmd/pmd/commit/cae73a8ac2c3a64057641a391b3e70cc26193397", "message": "Merge branch '7.0.x' into type-heap", "committedDate": "2020-05-21T08:51:23Z", "type": "commit"}, {"oid": "634a349678c66d6df7b450e3ae69f40a9146dcd2", "url": "https://github.com/pmd/pmd/commit/634a349678c66d6df7b450e3ae69f40a9146dcd2", "message": "Simplify benchmark keys", "committedDate": "2020-05-21T09:03:59Z", "type": "commit"}, {"oid": "25e4ab8393c9617813348cae6ff66fb38965afb6", "url": "https://github.com/pmd/pmd/commit/25e4ab8393c9617813348cae6ff66fb38965afb6", "message": "Fix compil", "committedDate": "2020-05-21T12:22:00Z", "type": "commit"}, {"oid": "47667a0e3533488c21c75ca9347705e00019a599", "url": "https://github.com/pmd/pmd/commit/47667a0e3533488c21c75ca9347705e00019a599", "message": "Merge branch '7.0.x' into type-heap", "committedDate": "2020-06-14T19:42:38Z", "type": "commit"}, {"oid": "25d1358af1d5df406e530ba80843469f1a15e1f7", "url": "https://github.com/pmd/pmd/commit/25d1358af1d5df406e530ba80843469f1a15e1f7", "message": "Checkstyle", "committedDate": "2020-06-14T23:11:32Z", "type": "commit"}, {"oid": "dde2df8925df02386f7c6c55a190a12c28f4c9f0", "url": "https://github.com/pmd/pmd/commit/dde2df8925df02386f7c6c55a190a12c28f4c9f0", "message": "Fix ordering problem\n\nChange behavior of LoosePackageCoupling\n\nIt stores state between visits, should not\nuse the rulechain", "committedDate": "2020-06-15T13:53:32Z", "type": "commit"}, {"oid": "843d645d8735fb3b191f5845a37b1b235e6a33f9", "url": "https://github.com/pmd/pmd/commit/843d645d8735fb3b191f5845a37b1b235e6a33f9", "message": "Fix a bug", "committedDate": "2020-06-15T15:06:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAwODU4NA==", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446008584", "bodyText": "Just a question: This @NonNull here, is that a constraint, that the Rule API implementer must obey? Meaning - it should be part of the API and not part of impl? Otherwise, we can't rely on it and need a null check anyway....", "author": "adangel", "createdAt": "2020-06-26T07:14:16Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/bestpractices/AvoidLogicInTriggerRule.java", "diffHunk": "@@ -6,14 +6,18 @@\n \n import java.util.List;\n \n+import org.checkerframework.checker.nullness.qual.NonNull;\n+\n import net.sourceforge.pmd.lang.apex.ast.ASTBlockStatement;\n import net.sourceforge.pmd.lang.apex.ast.ASTUserTrigger;\n import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.rule.RuleTargetSelector;\n \n public class AvoidLogicInTriggerRule extends AbstractApexRule {\n \n-    public AvoidLogicInTriggerRule() {\n-        addRuleChainVisit(ASTUserTrigger.class);\n+    @Override\n+    protected @NonNull RuleTargetSelector buildTargetSelector() {", "originalCommit": "843d645d8735fb3b191f5845a37b1b235e6a33f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIyOTAyOQ==", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446229029", "bodyText": "Not sure I follow... The super method has this annotation, which means implementations are expected to never return null too. So yes it's part of the API, or rather it's an explicit \"contract\" that the implementor must respect.\nBy copying it to the implementation we let static analysis tools make sure you respect the contract (eg the IDE, maybe PMD in the future?)", "author": "oowekyala", "createdAt": "2020-06-26T14:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAwODU4NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxMjg4MQ==", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446012881", "bodyText": "All this can't be deprecated on master, since there is no way to migrate before. I've added a point to #1139 for the migration documentation.\nWhen we have finished the changes on PMD 7, we can go back and look, whether we introduce e.g. RuleTargetSelector already in PMD 6.x and providing a compatibility API - that would allow us to deprecate this method in PMD 6.x. But - if we do that - only as a last step and maybe only as a small minor release for PMD 6.x after PMD 7 is out (for helping migration).", "author": "adangel", "createdAt": "2020-06-26T07:24:31Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/Rule.java", "diffHunk": "@@ -287,56 +288,28 @@ default boolean dependsOn(AstProcessingStage<?> stage) {\n \n \n     /**\n-     * Gets whether this Rule uses the RuleChain.\n-     *\n-     * @return <code>true</code> if RuleChain is used.\n-     */\n-    boolean isRuleChain();\n-\n-    /**\n-     * Gets the collection of AST node names visited by the Rule on the\n-     * RuleChain.\n-     *\n-     * @return the list of AST node names\n+     * Returns the object that selects the nodes to which this rule applies.\n+     * The selected nodes will be handed to {@link #apply(Node, RuleContext)}.\n      */\n-    List<String> getRuleChainVisits();\n+    RuleTargetSelector getTargetSelector();\n \n-    /**\n-     * Adds an AST node by class to be visited by the Rule on the RuleChain.\n-     *\n-     * @param nodeClass\n-     *            the AST node to add to the RuleChain visit list\n-     */\n-    void addRuleChainVisit(Class<? extends Node> nodeClass);", "originalCommit": "843d645d8735fb3b191f5845a37b1b235e6a33f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxNDIzNg==", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446014236", "bodyText": "I'll @Deprecate and @InternalApi this on master... that's definitively internal and should not be used at all....", "author": "adangel", "createdAt": "2020-06-26T07:27:31Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/RuleChain.java", "diffHunk": "@@ -1,85 +0,0 @@\n-/**\n- * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n- */\n-\n-package net.sourceforge.pmd;\n-\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import net.sourceforge.pmd.lang.Language;\n-import net.sourceforge.pmd.lang.ast.Node;\n-import net.sourceforge.pmd.lang.rule.RuleChainVisitor;\n-\n-/**\n- * The RuleChain is a means by which Rules can participate in a uniform\n- * visitation of the AST, and not need perform their own independent visitation.\n- * The RuleChain exists as a means to improve the speed of PMD when there are\n- * many Rules.\n- */\n-public class RuleChain {", "originalCommit": "843d645d8735fb3b191f5845a37b1b235e6a33f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxNjQwMQ==", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446016401", "bodyText": "That's btw something we need to think about: The comment probably was the intention, but was never implemented this way - all the rules are put together into the same list regardless of their language....\nSo, how do we deal with a ruleset that contains rules of multiple languages, etc.... (in terms of internal processing and expected unsurprising behavior of PMD).", "author": "adangel", "createdAt": "2020-06-26T07:32:24Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/RuleSets.java", "diffHunk": "@@ -7,68 +7,57 @@\n import java.io.File;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n \n-import net.sourceforge.pmd.lang.Language;\n+import net.sourceforge.pmd.benchmark.TimeTracker;\n+import net.sourceforge.pmd.benchmark.TimedOperation;\n+import net.sourceforge.pmd.benchmark.TimedOperationCategory;\n import net.sourceforge.pmd.lang.ast.Node;\n+import net.sourceforge.pmd.lang.rule.internal.RuleApplicator;\n \n /**\n  * Grouping of Rules per Language in a RuleSet.", "originalCommit": "843d645d8735fb3b191f5845a37b1b235e6a33f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMTAwMw==", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446021003", "bodyText": "I assume, these classrulechainvisits are only there for compatibility, because not all rules are migrated yet?\nI'd expect the default implementation just to be return RuleTargetSelector.forRootOnly() eventually.", "author": "adangel", "createdAt": "2020-06-26T07:42:33Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/AbstractRule.java", "diffHunk": "@@ -227,36 +232,42 @@ public ParserOptions getParserOptions() {\n         return new ParserOptions();\n     }\n \n-    @Override\n-    public boolean isRuleChain() {\n-        return !getRuleChainVisits().isEmpty();\n-    }\n \n-    @Override\n-    public List<String> getRuleChainVisits() {\n-        return ruleChainVisits;\n+    private Set<Class<? extends Node>> getClassRuleChainVisits() {\n+        if (classRuleChainVisits.isEmpty() && ruleChainVisits.isEmpty()) {\n+            return Collections.singleton(RootNode.class);\n+        }\n+        return classRuleChainVisits;\n     }\n \n-    @Override\n-    public void addRuleChainVisit(Class<? extends Node> nodeClass) {\n-        // FIXME : These assume the implementation of getXPathNodeName() for all nodes\u2026\n-        final String simpleName = nodeClass.getSimpleName();\n \n-        if (simpleName.startsWith(\"AST\")) { // JavaCC node\n-            // Classes under the Comment hierarchy and stuff need to be refactored in the Java AST\n-            addRuleChainVisit(nodeClass.getSimpleName().substring(\"AST\".length()));\n-        } else if (nodeClass.getSimpleName().endsWith(\"Context\")) { // Antlr node\n-            addRuleChainVisit(nodeClass.getSimpleName().substring(0, simpleName.length() - \"Context\".length()));\n-        } else {\n-            throw new IllegalArgumentException(\"Node class does not start with 'AST' prefix nor ends with 'Context' suffix: \" + nodeClass);\n-        }\n+    /**\n+     * @deprecated Override {@link #buildTargetSelector()}, this is\n+     *     provided for legacy compatibility\n+     */\n+    @Deprecated\n+    protected void addRuleChainVisit(Class<? extends Node> nodeClass) {\n+        classRuleChainVisits.add(nodeClass);\n     }\n \n     @Override\n-    public void addRuleChainVisit(String astNodeName) {\n-        if (!ruleChainVisits.contains(astNodeName)) {\n-            ruleChainVisits.add(astNodeName);\n+    public final RuleTargetSelector getTargetSelector() {\n+        if (myStrategy == null) {\n+            myStrategy = buildTargetSelector();\n         }\n+        return myStrategy;\n+    }\n+\n+    /**\n+     * Create the targeting strategy for this rule. Please override\n+     * this instead of using {@link #addRuleChainVisit(Class)}.\n+     * Use the factory methods of {@link RuleTargetSelector}.\n+     */\n+    @NonNull\n+    protected RuleTargetSelector buildTargetSelector() {\n+        Set<Class<? extends Node>> crvs = getClassRuleChainVisits();", "originalCommit": "843d645d8735fb3b191f5845a37b1b235e6a33f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIyMzY0NA==", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446223644", "bodyText": "Yes :)", "author": "oowekyala", "createdAt": "2020-06-26T14:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMTAwMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMjIxMw==", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446022213", "bodyText": "for consistency, shouldn't we simply copy the reference to myStrategy like all the other fields?", "author": "adangel", "createdAt": "2020-06-26T07:45:04Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/AbstractRule.java", "diffHunk": "@@ -70,17 +78,14 @@ public void deepCopyValuesTo(AbstractRule otherRule) {\n         otherRule.priority = priority;\n         otherRule.propertyDescriptors = new ArrayList<>(getPropertyDescriptors());\n         otherRule.propertyValuesByDescriptor = copyPropertyValues();\n-        otherRule.ruleChainVisits = copyRuleChainVisits();\n+        otherRule.ruleChainVisits = new LinkedHashSet<>(ruleChainVisits);\n+        otherRule.classRuleChainVisits = new LinkedHashSet<>(classRuleChainVisits);", "originalCommit": "843d645d8735fb3b191f5845a37b1b235e6a33f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIyNjIzOQ==", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446226239", "bodyText": "Could be... but since we don't know exactly how the caller uses the deepCopy, we can't assume that they won't call addRuleChainVisit. If we copy myStrategy, then if it was not null, buildTargetSelector will never be called.\nThis is only relevant while addRuleChainVisit exists, when it's removed there will be no way to override the target selector of the implementation, and then it can be copied.", "author": "oowekyala", "createdAt": "2020-06-26T14:41:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMjIxMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyNDA0OQ==", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446024049", "bodyText": "I'll @Deprecate and @InternalApi it on master....\nNote: there are quite some usages in the PMD Eclipse plugin. This is due to the unclear API on how to call PMD programmatically, e.g. how to provide programmatically the rulesets to be used for analyzing....", "author": "adangel", "createdAt": "2020-06-26T07:49:02Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/RuleSets.java", "diffHunk": "@@ -7,68 +7,57 @@\n import java.io.File;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n \n-import net.sourceforge.pmd.lang.Language;\n+import net.sourceforge.pmd.benchmark.TimeTracker;\n+import net.sourceforge.pmd.benchmark.TimedOperation;\n+import net.sourceforge.pmd.benchmark.TimedOperationCategory;\n import net.sourceforge.pmd.lang.ast.Node;\n+import net.sourceforge.pmd.lang.rule.internal.RuleApplicator;\n \n /**\n  * Grouping of Rules per Language in a RuleSet.\n  *\n  * @author pieter_van_raemdonck - Application Engineers NV/SA - www.ae.be\n  */\n public class RuleSets {", "originalCommit": "843d645d8735fb3b191f5845a37b1b235e6a33f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyNjYzNA==", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446026634", "bodyText": "This looks a bit weird... RuleTargetSelector is API, but the supertype is internal.... effectively, this makes the internal supertype API as well\nOk, the class is abstract and the constructor is hidden - so no one can implement their own RuleTargetSelector...\nRight now, RuleTargetSelector serves as a utility class, that provides defined (hidden) implementations of itself...\nNot sure yet, what to do here, but it still looks weird to me....", "author": "adangel", "createdAt": "2020-06-26T07:54:05Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/RuleTargetSelector.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.rule;\n+\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import net.sourceforge.pmd.Rule;\n+import net.sourceforge.pmd.lang.ast.Node;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.lang.rule.internal.TargetSelectorInternal;\n+import net.sourceforge.pmd.lang.rule.internal.TreeIndex;\n+import net.sourceforge.pmd.util.CollectionUtil;\n+\n+/**\n+ * A strategy for selecting nodes that will be targeted by a rule.\n+ *\n+ * @see Rule#getTargetSelector()\n+ */\n+public abstract class RuleTargetSelector extends TargetSelectorInternal {", "originalCommit": "843d645d8735fb3b191f5845a37b1b235e6a33f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIyMzI2Mg==", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446223262", "bodyText": "Yes this is super weird. I wanted to make RuleTargetSelector published because it's somewhere on the Rule interface, but still keep everything about TreeIndex internal... So no one can implement their RuleTargetSelector because that would require us to expose TreeIndex.\nI'm truly not sure this is the best way to do it, if you have a better idea go ahead", "author": "oowekyala", "createdAt": "2020-06-26T14:36:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyNjYzNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMjQ0MA==", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446032440", "bodyText": "Just a question: Do we really need to be that generic? We are dealing with AST Nodes, don't we?\nThat's btw one example for #2611 - it will be very difficult to understand this class without looking at many more classes in parallel to understand, what's going on....\nMaybe the question in a different way: Do we really implement it that abstract? We only need it for PMD purposes, not for general purpose....", "author": "adangel", "createdAt": "2020-06-26T08:06:31Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/internal/LatticeRelation.java", "diffHunk": "@@ -0,0 +1,339 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.rule.internal;\n+\n+import static java.util.stream.Collectors.toSet;\n+import static net.sourceforge.pmd.util.CollectionUtil.any;\n+import static net.sourceforge.pmd.util.CollectionUtil.finish;\n+import static net.sourceforge.pmd.util.CollectionUtil.map;\n+import static net.sourceforge.pmd.util.CollectionUtil.toMutableList;\n+\n+import java.util.ArrayDeque;\n+import java.util.Collections;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collector;\n+\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+import net.sourceforge.pmd.internal.util.AssertionUtil;\n+import net.sourceforge.pmd.lang.rule.internal.GraphUtils.DotColor;\n+\n+/**\n+ * Indexes data of type {@code <V>} with keys of type {@code <K>}, where", "originalCommit": "843d645d8735fb3b191f5845a37b1b235e6a33f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMjg2OA==", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446032868", "bodyText": "Ok, as far as I understand, that is your solution for dealing with Abstract node types.... right?", "author": "adangel", "createdAt": "2020-06-26T08:07:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMjQ0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIyMjA1OA==", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446222058", "bodyText": "Ok, as far as I understand, that is your solution for dealing with Abstract node types.... right?\n\nYes that's it.\nHonestly making it generic is easy and makes tests much more comprehensive and easier to write. This data structure is a kind of multimap where values are added at once to several keys, doing minimal work. So we can add Node values to several Class keys at once, just by knowing node.getClass(), without having to traverse all the supertypes for every instance. We also don't accumulate values for keys that won't be queried (those Class instances for which no rulechain rule has added a visit request).\nThe API is really simple I think, you just use put and get as if it was a regular map.", "author": "oowekyala", "createdAt": "2020-06-26T14:34:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMjQ0MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzNzU0Nw==", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446037547", "bodyText": "Another example of overly used generics... What is T, U, A ,C?... Maybe I'm just not that into streams...", "author": "adangel", "createdAt": "2020-06-26T08:17:05Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/util/CollectionUtil.java", "diffHunk": "@@ -532,6 +554,94 @@ public static boolean isNotEmpty(Object[] items) {\n         return Collections.unmodifiableList(res);\n     }\n \n+    /**\n+     * Map each element of the given iterable with the given function,\n+     * and accumulates it into the collector.\n+     */\n+    public static <T, U, A, C> C map(Collector<? super U, A, ? extends C> collector,", "originalCommit": "843d645d8735fb3b191f5845a37b1b235e6a33f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIxNTEyOQ==", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446215129", "bodyText": "I think this is just \"used generics\" rather than overused... It's not my fault that the Collector API uses 3 type parameters...\nU, A, C in that order correspond to the T, A, R type parameters of Collector:\n\nT - the type of input elements to the reduction operation\nA - the mutable accumulation type of the reduction operation (often hidden as an implementation detail)\nR - the result type of the reduction operation\n\nOn this method we have a source of T elements, a mapper from T to U, and a collector that accumulates a bunch of Us to produce a C, which is generally a collection of U.\nThe A is an implementation detail, when you make methods that return collectors, this is generally some wildcard to not expose it to clients. But when you use the collector to perform the collection operation, then you need to declare A to capture it. You don't need to know that to use methods that use collectors, but the implementation of the method has to capture it.\nIt takes some time to get used to the collector API but once you get it there's really nothing voodoo happening.\nConsider that this method is super reusable, you can do map(toSet(), listOfT, t -> t.getU()) and end up with a Set<U>. You can use any of the standard collectors in Collectors.  It's much better than writing one specialized map function for each kind of result type (mapToSet, mapToList, etc).", "author": "oowekyala", "createdAt": "2020-06-26T14:22:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzNzU0Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA0NDk5Mg==", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446044992", "bodyText": "Maybe we can get rid of this class eventually?", "author": "adangel", "createdAt": "2020-06-26T08:31:38Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/AbstractJavaRulechainRule.java", "diffHunk": "@@ -18,32 +19,25 @@\n  */\n public abstract class AbstractJavaRulechainRule extends AbstractJavaRule {", "originalCommit": "843d645d8735fb3b191f5845a37b1b235e6a33f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIxNjMyNQ==", "url": "https://github.com/pmd/pmd/pull/2490#discussion_r446216325", "bodyText": "Probably yes. But the fact that rules also implement the visitor interface is a problem for that, as the default visit method traverses the tree, which we want to avoid.", "author": "oowekyala", "createdAt": "2020-06-26T14:24:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA0NDk5Mg=="}], "type": "inlineReview", "revised_code": null}]}