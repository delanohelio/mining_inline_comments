{"pr_number": 2641, "pr_title": "[java] AvoidThrowingNullPointerException marks all NullPointerException\u2026", "pr_createdAt": "2020-07-14T13:37:51Z", "pr_url": "https://github.com/pmd/pmd/pull/2641", "timeline": [{"oid": "061c9656ccdb829526a6adb1a01a71b83de49cd6", "url": "https://github.com/pmd/pmd/commit/061c9656ccdb829526a6adb1a01a71b83de49cd6", "message": "[java]AvoidThrowingNullPointerException marks all NullPointerException objects as wrong, whether or not thrown (2580)", "committedDate": "2020-07-14T12:53:26Z", "type": "commit"}, {"oid": "65e37cadca36e93611578ac8a3fb3b9129fdfc89", "url": "https://github.com/pmd/pmd/commit/65e37cadca36e93611578ac8a3fb3b9129fdfc89", "message": "AvoidThrowingNullPointerException: addViolation usage fix", "committedDate": "2020-07-16T09:37:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MDA4OA==", "url": "https://github.com/pmd/pmd/pull/2641#discussion_r456590088", "bodyText": "With returning here just data instead of super.visit(body, data), we don't visit inner classes.\nSince in this rule, we only visit one type, we can use rulechain: https://pmd.github.io/latest/pmd_userdocs_extending_writing_java_rules.html#economic-traversal-the-rulechain\nCould you please add the call to addRuleChainVisit(ASTClassOrInterfaceBody.class) in the constructor of this rule?\nThat explains, why we don't report anymore e.g. this violation: https://github.com/spring-projects/spring-framework/blob/v5.0.6.RELEASE/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java#L1431\nsee https://chunk.io/pmd/032e1995017b4362ab14446dca0ee561/diff/spring-framework/index.html for the full differences - some missing violations are ok, but some are now false negatives...", "author": "adangel", "createdAt": "2020-07-17T17:54:28Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.java.rule.design;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression;\n+import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody;\n+import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;\n+import net.sourceforge.pmd.lang.java.ast.ASTThrowStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator;\n+import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;\n+\n+/**\n+ * Finds <code>throw</code> statements containing <code>NullPointerException</code>\n+ * instances as thrown values\n+ *\n+ * @author <a href=\"mailto:michaeller.2012@gmail.com\">Mykhailo Palahuta</a>\n+ */\n+public class AvoidThrowingNullPointerExceptionRule extends AbstractJavaRule {\n+\n+    @Override\n+    public Object visit(ASTClassOrInterfaceBody body, Object data) {\n+        List<ASTThrowStatement> throwNPEs = getThrowNullPointerExceptionStatements(body);\n+        for (ASTThrowStatement throwNPE : throwNPEs) {\n+            addViolation(data, throwNPE);\n+        }\n+        return data;", "originalCommit": "65e37cadca36e93611578ac8a3fb3b9129fdfc89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68f90687afdf65e223386c6859193d9c229b6982", "chunk": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java\nindex fd59a7654f..21b68e4337 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java\n\n@@ -4,14 +4,16 @@\n \n package net.sourceforge.pmd.lang.java.rule.design;\n \n-import java.util.ArrayList;\n-import java.util.List;\n+import java.util.HashSet;\n+import java.util.Set;\n \n-import net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression;\n-import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody;\n+import net.sourceforge.pmd.lang.java.ast.ASTAssignmentOperator;\n import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;\n+import net.sourceforge.pmd.lang.java.ast.ASTName;\n import net.sourceforge.pmd.lang.java.ast.ASTThrowStatement;\n-import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator;\n+import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;\n+import net.sourceforge.pmd.lang.java.ast.ASTVariableInitializer;\n+import net.sourceforge.pmd.lang.java.ast.JavaNode;\n import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NDI2NA==", "url": "https://github.com/pmd/pmd/pull/2641#discussion_r456594264", "bodyText": "We are finding here allocation in all methods. It could be a case, where one method creates a NPE and in another method some variable is thrown - it happens to have the same name (valid, because in a different method), but it might be a different exception, e.g.:\npublic void bar() {\n   NullPointerException e = new NullPointerException();\n   e.printStackTrace();\n}\n\npublic void foo() {\n   RuntimeException e = new RuntimeException();\n   throw e;\n}\nCould you please add this as an additional test case?\nMaybe it's better to visit ASTMethodDeclaration and ASTConstructorDeclaration instead of the whole class via ASTClassOrInterfaceBody. If we change that, we need to add both classes as rule chain visits.", "author": "adangel", "createdAt": "2020-07-17T18:01:55Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.java.rule.design;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression;\n+import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody;\n+import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;\n+import net.sourceforge.pmd.lang.java.ast.ASTThrowStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator;\n+import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;\n+\n+/**\n+ * Finds <code>throw</code> statements containing <code>NullPointerException</code>\n+ * instances as thrown values\n+ *\n+ * @author <a href=\"mailto:michaeller.2012@gmail.com\">Mykhailo Palahuta</a>\n+ */\n+public class AvoidThrowingNullPointerExceptionRule extends AbstractJavaRule {\n+\n+    @Override\n+    public Object visit(ASTClassOrInterfaceBody body, Object data) {\n+        List<ASTThrowStatement> throwNPEs = getThrowNullPointerExceptionStatements(body);\n+        for (ASTThrowStatement throwNPE : throwNPEs) {\n+            addViolation(data, throwNPE);\n+        }\n+        return data;\n+    }\n+\n+    private List<ASTThrowStatement> getThrowNullPointerExceptionStatements(ASTClassOrInterfaceBody body) {\n+        List<ASTThrowStatement> throwStatements = body.findDescendantsOfType(ASTThrowStatement.class);\n+        List<String> npeInstances = getNullPointerExceptionInstances(body);\n+        List<ASTThrowStatement> throwNPEStatements = new ArrayList<>();\n+        for (ASTThrowStatement throwStatement : throwStatements) {\n+            if (throwsNullPointerException(throwStatement, npeInstances)) {\n+                throwNPEStatements.add(throwStatement);\n+            }\n+        }\n+        return throwNPEStatements;\n+    }\n+\n+    private List<String> getNullPointerExceptionInstances(ASTClassOrInterfaceBody body) {\n+        List<ASTAllocationExpression> allocations = body.findDescendantsOfType(ASTAllocationExpression.class);", "originalCommit": "65e37cadca36e93611578ac8a3fb3b9129fdfc89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68f90687afdf65e223386c6859193d9c229b6982", "chunk": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java\nindex fd59a7654f..21b68e4337 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java\n\n@@ -4,14 +4,16 @@\n \n package net.sourceforge.pmd.lang.java.rule.design;\n \n-import java.util.ArrayList;\n-import java.util.List;\n+import java.util.HashSet;\n+import java.util.Set;\n \n-import net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression;\n-import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody;\n+import net.sourceforge.pmd.lang.java.ast.ASTAssignmentOperator;\n import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;\n+import net.sourceforge.pmd.lang.java.ast.ASTName;\n import net.sourceforge.pmd.lang.java.ast.ASTThrowStatement;\n-import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator;\n+import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;\n+import net.sourceforge.pmd.lang.java.ast.ASTVariableInitializer;\n+import net.sourceforge.pmd.lang.java.ast.JavaNode;\n import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NTQxOA==", "url": "https://github.com/pmd/pmd/pull/2641#discussion_r456595418", "bodyText": "This can be done easier: return allocation.getType() - this uses type resolution and should work.", "author": "adangel", "createdAt": "2020-07-17T18:04:17Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.java.rule.design;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression;\n+import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody;\n+import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;\n+import net.sourceforge.pmd.lang.java.ast.ASTThrowStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator;\n+import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;\n+\n+/**\n+ * Finds <code>throw</code> statements containing <code>NullPointerException</code>\n+ * instances as thrown values\n+ *\n+ * @author <a href=\"mailto:michaeller.2012@gmail.com\">Mykhailo Palahuta</a>\n+ */\n+public class AvoidThrowingNullPointerExceptionRule extends AbstractJavaRule {\n+\n+    @Override\n+    public Object visit(ASTClassOrInterfaceBody body, Object data) {\n+        List<ASTThrowStatement> throwNPEs = getThrowNullPointerExceptionStatements(body);\n+        for (ASTThrowStatement throwNPE : throwNPEs) {\n+            addViolation(data, throwNPE);\n+        }\n+        return data;\n+    }\n+\n+    private List<ASTThrowStatement> getThrowNullPointerExceptionStatements(ASTClassOrInterfaceBody body) {\n+        List<ASTThrowStatement> throwStatements = body.findDescendantsOfType(ASTThrowStatement.class);\n+        List<String> npeInstances = getNullPointerExceptionInstances(body);\n+        List<ASTThrowStatement> throwNPEStatements = new ArrayList<>();\n+        for (ASTThrowStatement throwStatement : throwStatements) {\n+            if (throwsNullPointerException(throwStatement, npeInstances)) {\n+                throwNPEStatements.add(throwStatement);\n+            }\n+        }\n+        return throwNPEStatements;\n+    }\n+\n+    private List<String> getNullPointerExceptionInstances(ASTClassOrInterfaceBody body) {\n+        List<ASTAllocationExpression> allocations = body.findDescendantsOfType(ASTAllocationExpression.class);\n+        List<String> npeInstances = new ArrayList<>();\n+        for (ASTAllocationExpression allocation : allocations) {\n+            if (allocatesNullPointerException(allocation)) {\n+                String assignedVarName = getNameOfAssignedVariable(allocation);\n+                npeInstances.add(assignedVarName);\n+            }\n+        }\n+        return npeInstances;\n+    }\n+\n+    private boolean allocatesNullPointerException(ASTAllocationExpression allocation) {\n+        Class<?> allocatedType = getAllocatedInstanceType(allocation);\n+        return allocatedType != null && NullPointerException.class.isAssignableFrom(allocatedType);\n+    }\n+\n+    private Class<?> getAllocatedInstanceType(ASTAllocationExpression allocation) {", "originalCommit": "65e37cadca36e93611578ac8a3fb3b9129fdfc89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68f90687afdf65e223386c6859193d9c229b6982", "chunk": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java\nindex fd59a7654f..21b68e4337 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java\n\n@@ -4,14 +4,16 @@\n \n package net.sourceforge.pmd.lang.java.rule.design;\n \n-import java.util.ArrayList;\n-import java.util.List;\n+import java.util.HashSet;\n+import java.util.Set;\n \n-import net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression;\n-import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody;\n+import net.sourceforge.pmd.lang.java.ast.ASTAssignmentOperator;\n import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;\n+import net.sourceforge.pmd.lang.java.ast.ASTName;\n import net.sourceforge.pmd.lang.java.ast.ASTThrowStatement;\n-import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator;\n+import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;\n+import net.sourceforge.pmd.lang.java.ast.ASTVariableInitializer;\n+import net.sourceforge.pmd.lang.java.ast.JavaNode;\n import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NjQ2MQ==", "url": "https://github.com/pmd/pmd/pull/2641#discussion_r456596461", "bodyText": "Do we also detect, if someone does this? throw new java.lang.NullPointerException() - actually, would be a bit weird, if someone writes it that way, but still....", "author": "adangel", "createdAt": "2020-07-17T18:06:34Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.java.rule.design;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression;\n+import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody;\n+import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;\n+import net.sourceforge.pmd.lang.java.ast.ASTThrowStatement;\n+import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator;\n+import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;\n+\n+/**\n+ * Finds <code>throw</code> statements containing <code>NullPointerException</code>\n+ * instances as thrown values\n+ *\n+ * @author <a href=\"mailto:michaeller.2012@gmail.com\">Mykhailo Palahuta</a>\n+ */\n+public class AvoidThrowingNullPointerExceptionRule extends AbstractJavaRule {\n+\n+    @Override\n+    public Object visit(ASTClassOrInterfaceBody body, Object data) {\n+        List<ASTThrowStatement> throwNPEs = getThrowNullPointerExceptionStatements(body);\n+        for (ASTThrowStatement throwNPE : throwNPEs) {\n+            addViolation(data, throwNPE);\n+        }\n+        return data;\n+    }\n+\n+    private List<ASTThrowStatement> getThrowNullPointerExceptionStatements(ASTClassOrInterfaceBody body) {\n+        List<ASTThrowStatement> throwStatements = body.findDescendantsOfType(ASTThrowStatement.class);\n+        List<String> npeInstances = getNullPointerExceptionInstances(body);\n+        List<ASTThrowStatement> throwNPEStatements = new ArrayList<>();\n+        for (ASTThrowStatement throwStatement : throwStatements) {\n+            if (throwsNullPointerException(throwStatement, npeInstances)) {\n+                throwNPEStatements.add(throwStatement);\n+            }\n+        }\n+        return throwNPEStatements;\n+    }\n+\n+    private List<String> getNullPointerExceptionInstances(ASTClassOrInterfaceBody body) {\n+        List<ASTAllocationExpression> allocations = body.findDescendantsOfType(ASTAllocationExpression.class);\n+        List<String> npeInstances = new ArrayList<>();\n+        for (ASTAllocationExpression allocation : allocations) {\n+            if (allocatesNullPointerException(allocation)) {\n+                String assignedVarName = getNameOfAssignedVariable(allocation);\n+                npeInstances.add(assignedVarName);\n+            }\n+        }\n+        return npeInstances;\n+    }\n+\n+    private boolean allocatesNullPointerException(ASTAllocationExpression allocation) {\n+        Class<?> allocatedType = getAllocatedInstanceType(allocation);\n+        return allocatedType != null && NullPointerException.class.isAssignableFrom(allocatedType);\n+    }\n+\n+    private Class<?> getAllocatedInstanceType(ASTAllocationExpression allocation) {\n+        List<ASTClassOrInterfaceType> allocatedTypes = allocation\n+                .findDescendantsOfType(ASTClassOrInterfaceType.class);\n+        return allocatedTypes.isEmpty() ? null : allocatedTypes.get(0).getType();\n+    }\n+\n+    private String getNameOfAssignedVariable(ASTAllocationExpression allocation) {\n+        List<ASTVariableDeclarator> variableDeclarators = allocation.getParent()\n+                .findDescendantsOfType(ASTVariableDeclarator.class);\n+        return variableDeclarators.isEmpty() ? null : variableDeclarators.get(0).getName();\n+    }\n+\n+    private boolean throwsNullPointerException(ASTThrowStatement throwStatement, List<String> npeInstances) {\n+        String thrownImage = throwStatement.getFirstClassOrInterfaceTypeImage();\n+        return \"NullPointerException\".equals(thrownImage) || npeInstances.contains(thrownImage);", "originalCommit": "65e37cadca36e93611578ac8a3fb3b9129fdfc89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68f90687afdf65e223386c6859193d9c229b6982", "chunk": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java\nindex fd59a7654f..21b68e4337 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/AvoidThrowingNullPointerExceptionRule.java\n\n@@ -4,14 +4,16 @@\n \n package net.sourceforge.pmd.lang.java.rule.design;\n \n-import java.util.ArrayList;\n-import java.util.List;\n+import java.util.HashSet;\n+import java.util.Set;\n \n-import net.sourceforge.pmd.lang.java.ast.ASTAllocationExpression;\n-import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody;\n+import net.sourceforge.pmd.lang.java.ast.ASTAssignmentOperator;\n import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;\n+import net.sourceforge.pmd.lang.java.ast.ASTName;\n import net.sourceforge.pmd.lang.java.ast.ASTThrowStatement;\n-import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator;\n+import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;\n+import net.sourceforge.pmd.lang.java.ast.ASTVariableInitializer;\n+import net.sourceforge.pmd.lang.java.ast.JavaNode;\n import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;\n \n /**\n"}}, {"oid": "68f90687afdf65e223386c6859193d9c229b6982", "url": "https://github.com/pmd/pmd/commit/68f90687afdf65e223386c6859193d9c229b6982", "message": "AvoidThrowingNullPointerException: NPE instances tracking fix", "committedDate": "2020-07-21T11:54:23Z", "type": "commit"}, {"oid": "892b16c8055b74791cd2cb74f8655cf32af981fd", "url": "https://github.com/pmd/pmd/commit/892b16c8055b74791cd2cb74f8655cf32af981fd", "message": "AvoidThrowingNullPointerException: isNullPointerException usage fix", "committedDate": "2020-07-21T12:56:44Z", "type": "commit"}]}