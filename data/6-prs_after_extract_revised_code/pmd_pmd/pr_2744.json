{"pr_number": 2744, "pr_title": "Cleanup: fix typos.", "pr_createdAt": "2020-08-26T09:30:27Z", "pr_url": "https://github.com/pmd/pmd/pull/2744", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3OTE1NA==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r477179154", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * convince method to handle hierarchy. This is probably too much work and\n          \n          \n            \n                 * convenience method to handle hierarchy. This is probably too much work and\n          \n      \n    \n    \n  \n\nI think", "author": "pzygielo", "createdAt": "2020-08-26T09:51:35Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/CouplingBetweenObjectsRule.java", "diffHunk": "@@ -117,7 +117,7 @@ public Object visit(ASTFieldDeclaration node, Object data) {\n     }\n \n     /**\n-     * convience method to handle hierarchy. This is probably too much work and\n+     * convince method to handle hierarchy. This is probably too much work and", "originalCommit": "fd30fab2432e98403100de25ba6226e2a6a5e73e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NDIxNw==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r477184217", "bodyText": "@pzygielo done.", "author": "XenoAmess", "createdAt": "2020-08-26T10:00:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3OTE1NA=="}], "type": "inlineReview", "revised_code": {"commit": "6d017b97085f592a3267508325faab3aaab26551", "chunk": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/CouplingBetweenObjectsRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/CouplingBetweenObjectsRule.java\nindex 3cbc61b9bf..73d1b306d9 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/CouplingBetweenObjectsRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/CouplingBetweenObjectsRule.java\n\n@@ -117,7 +117,7 @@ public class CouplingBetweenObjectsRule extends AbstractJavaRule {\n     }\n \n     /**\n-     * convince method to handle hierarchy. This is probably too much work and\n+     * convenient method to handle hierarchy. This is probably too much work and\n      * will go away once I figure out the framework\n      */\n     private void handleASTTypeChildren(Node node) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3OTM3NA==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r477179374", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * uniqiue situation and I'd like to create an audit type rule that captures\n          \n          \n            \n             * unique situation and I'd like to create an audit type rule that captures", "author": "pzygielo", "createdAt": "2020-08-26T09:51:57Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/ExcessiveImportsRule.java", "diffHunk": "@@ -11,7 +11,7 @@\n /**\n  * ExcessiveImports attempts to count all unique imports a class contains. This\n  * rule will count a \"import com.something.*;\" as a single import. This is a\n- * unqiue situation and I'd like to create an audit type rule that captures\n+ * uniqiue situation and I'd like to create an audit type rule that captures", "originalCommit": "fd30fab2432e98403100de25ba6226e2a6a5e73e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NDI3NA==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r477184274", "bodyText": "@pzygielo done.", "author": "XenoAmess", "createdAt": "2020-08-26T10:00:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3OTM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "6d017b97085f592a3267508325faab3aaab26551", "chunk": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/ExcessiveImportsRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/ExcessiveImportsRule.java\nindex 6a5a3111b4..8c96c09629 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/ExcessiveImportsRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/ExcessiveImportsRule.java\n\n@@ -11,7 +11,7 @@ import net.sourceforge.pmd.util.NumericConstants;\n /**\n  * ExcessiveImports attempts to count all unique imports a class contains. This\n  * rule will count a \"import com.something.*;\" as a single import. This is a\n- * uniqiue situation and I'd like to create an audit type rule that captures\n+ * unique situation and I'd like to create an audit type rule that captures\n  * those.\n  *\n  * @author aglover\n"}}, {"oid": "6d017b97085f592a3267508325faab3aaab26551", "url": "https://github.com/pmd/pmd/commit/6d017b97085f592a3267508325faab3aaab26551", "message": "fix typos", "committedDate": "2020-08-26T13:14:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMDAwNA==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r477430004", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * convenient method to handle hierarchy. This is probably too much work and\n          \n          \n            \n                 * Convenience method to handle hierarchy. This is probably too much work and", "author": "oowekyala", "createdAt": "2020-08-26T16:26:24Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/CouplingBetweenObjectsRule.java", "diffHunk": "@@ -117,7 +117,7 @@ public Object visit(ASTFieldDeclaration node, Object data) {\n     }\n \n     /**\n-     * convience method to handle hierarchy. This is probably too much work and\n+     * convenient method to handle hierarchy. This is probably too much work and", "originalCommit": "debd53fe60ba36c82bef5fe00180da85827ad9be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA3MjcwNA==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r478072704", "bodyText": "@oowekyala done.", "author": "XenoAmess", "createdAt": "2020-08-27T04:01:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMDAwNA=="}], "type": "inlineReview", "revised_code": {"commit": "44a08faf7f6f9c5ea53235ff233de1bdae989cba", "chunk": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/CouplingBetweenObjectsRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/CouplingBetweenObjectsRule.java\nindex 73d1b306d9..179134c4ab 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/CouplingBetweenObjectsRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/CouplingBetweenObjectsRule.java\n\n@@ -117,7 +117,7 @@ public class CouplingBetweenObjectsRule extends AbstractJavaRule {\n     }\n \n     /**\n-     * convenient method to handle hierarchy. This is probably too much work and\n+     * Convenience method to handle hierarchy. This is probably too much work and\n      * will go away once I figure out the framework\n      */\n     private void handleASTTypeChildren(Node node) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMTMzOQ==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r477431339", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean hasDisallowedTerms() {\n          \n          \n            \n                private boolean hasDisallowedTerms() {\n          \n      \n    \n    \n  \n\nThis is part of the internals of this rule. So, the old method can be deprecated, but this new methods does not need to be public", "author": "oowekyala", "createdAt": "2020-08-26T16:28:49Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/documentation/CommentContentRule.java", "diffHunk": "@@ -143,11 +143,16 @@ public Object visit(ASTCompilationUnit cUnit, Object data) {\n         return super.visit(cUnit, data);\n     }\n \n-    public boolean hasDissallowedTerms() {\n+    public boolean hasDisallowedTerms() {", "originalCommit": "debd53fe60ba36c82bef5fe00180da85827ad9be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA3NDI5NA==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r478074294", "bodyText": "@oowekyala done.", "author": "XenoAmess", "createdAt": "2020-08-27T04:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMTMzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "1a443f92f3c2f5e662374b0573a392b6d148aac1", "chunk": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/documentation/CommentContentRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/documentation/CommentContentRule.java\nindex bd082f9cfc..a4c55919e3 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/documentation/CommentContentRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/documentation/CommentContentRule.java\n\n@@ -143,7 +143,7 @@ public class CommentContentRule extends AbstractCommentRule {\n         return super.visit(cUnit, data);\n     }\n \n-    public boolean hasDisallowedTerms() {\n+    private boolean hasDisallowedTerms() {\n         List<String> terms = getProperty(DISSALLOWED_TERMS_DESCRIPTOR);\n         return !terms.isEmpty();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMzUxMQ==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r477433511", "bodyText": "Please don't edit anything in this package and subpackages. Everything is deprecated and will be removed in #2689. The base branch for that pr (the grammar development branch) also edits these files to make them compilable with the new grammar. It's not worth the merge conflicts", "author": "oowekyala", "createdAt": "2020-08-26T16:32:10Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/ClassTypeResolver.java", "diffHunk": "@@ -6,7 +6,7 @@\n \n import static net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.getApplicableMethods;\n import static net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.getBestMethodReturnType;\n-import static net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.getMethodExplicitTypeArugments;\n+import static net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.getMethodExplicitTypeArguments;", "originalCommit": "debd53fe60ba36c82bef5fe00180da85827ad9be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA3NjkwNA==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r478076904", "bodyText": "@oowekyala here the package you mean is \"net.sourceforge.pmd.lang.java.typeresolution\"?", "author": "XenoAmess", "createdAt": "2020-08-27T04:05:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMzUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA4MDE4OA==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r478080188", "bodyText": "@oowekyala done.", "author": "XenoAmess", "createdAt": "2020-08-27T04:09:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMzUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "e5d0b7243ffab181502434f771f9306409598b78", "chunk": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/ClassTypeResolver.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/ClassTypeResolver.java\nindex 5210374e38..296504ff29 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/ClassTypeResolver.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/ClassTypeResolver.java\n\n@@ -6,7 +6,7 @@ package net.sourceforge.pmd.lang.java.typeresolution;\n \n import static net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.getApplicableMethods;\n import static net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.getBestMethodReturnType;\n-import static net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.getMethodExplicitTypeArguments;\n+import static net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.getMethodExplicitTypeArugments;\n import static net.sourceforge.pmd.lang.java.typeresolution.MethodTypeResolution.isMemberVisibleFromClass;\n import static net.sourceforge.pmd.lang.java.typeresolution.typedefinition.TypeDefinitionType.LOWER_WILDCARD;\n import static net.sourceforge.pmd.lang.java.typeresolution.typedefinition.TypeDefinitionType.UPPER_BOUND;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMzY3MA==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r477433670", "bodyText": "ditto", "author": "oowekyala", "createdAt": "2020-08-26T16:32:23Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/typedefinition/JavaTypeDefinition.java", "diffHunk": "@@ -48,7 +48,7 @@ public static JavaTypeDefinition forClass(TypeDefinitionType type, JavaTypeDefin\n         case LOWER_WILDCARD:", "originalCommit": "debd53fe60ba36c82bef5fe00180da85827ad9be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA4MDI0NA==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r478080244", "bodyText": "@oowekyala done.", "author": "XenoAmess", "createdAt": "2020-08-27T04:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMzY3MA=="}], "type": "inlineReview", "revised_code": {"commit": "e5d0b7243ffab181502434f771f9306409598b78", "chunk": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/typedefinition/JavaTypeDefinition.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/typedefinition/JavaTypeDefinition.java\nindex c9a612229e..101fa8a9bd 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/typedefinition/JavaTypeDefinition.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/typedefinition/JavaTypeDefinition.java\n\n@@ -48,7 +48,7 @@ public abstract class JavaTypeDefinition implements TypeDefinition {\n         case LOWER_WILDCARD:\n             return ArrayUtils.contains(intersectionTypes, null) ? null : new JavaTypeDefinitionLower(intersectionTypes);\n         default:\n-            throw new IllegalStateException(\"Unknown type\");\n+            throw new IllegalStateException(\"Unknow type\");\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMzc0Mw==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r477433743", "bodyText": "Ditto", "author": "oowekyala", "createdAt": "2020-08-26T16:32:31Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/typeinference/BoundOrConstraint.java", "diffHunk": "@@ -157,7 +157,7 @@ public boolean leftHasMentionedVariable() {\n     }\n \n     /**\n-     * @return true, if the right-hand side mentions variales", "originalCommit": "debd53fe60ba36c82bef5fe00180da85827ad9be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA4MDU5NQ==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r478080595", "bodyText": "@oowekyala done.", "author": "XenoAmess", "createdAt": "2020-08-27T04:10:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMzc0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e5d0b7243ffab181502434f771f9306409598b78", "chunk": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/typeinference/BoundOrConstraint.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/typeinference/BoundOrConstraint.java\nindex 199045d05c..e042ed9ae0 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/typeinference/BoundOrConstraint.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/typeresolution/typeinference/BoundOrConstraint.java\n\n@@ -157,7 +157,7 @@ public abstract class BoundOrConstraint {\n     }\n \n     /**\n-     * @return true, if the right-hand side mentions variables\n+     * @return true, if the right-hand side mentions variales\n      */\n     public boolean rightHasMentionedVariable() {\n         return rightTypeVariable != null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNDYxNA==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r477434614", "bodyText": "The test sources are ok though, you don't need to remove those changes", "author": "oowekyala", "createdAt": "2020-08-26T16:33:59Z", "path": "pmd-java/src/test/java/net/sourceforge/pmd/typeresolution/testdata/FieldAccessGenericParameter.java", "diffHunk": "@@ -28,7 +28,7 @@\n     <C extends Number> FieldAccessGenericParameter() {\n         C constructorGeneric = null;\n \n-        // access type dependant on constructor type arugments", "originalCommit": "debd53fe60ba36c82bef5fe00180da85827ad9be", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNTg2MQ==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r477435861", "bodyText": "Same", "author": "oowekyala", "createdAt": "2020-08-26T16:36:03Z", "path": "pmd-javascript/src/test/java/net/sourceforge/pmd/lang/ecmascript/rule/errorprone/InaccurateNumericLiteralTest.java", "diffHunk": "@@ -6,6 +6,6 @@\n \n import net.sourceforge.pmd.testframework.PmdRuleTst;\n \n-public class InnaccurateNumericLiteralTest extends PmdRuleTst {\n+public class InaccurateNumericLiteralTest extends PmdRuleTst {", "originalCommit": "debd53fe60ba36c82bef5fe00180da85827ad9be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA2MTk1Nw==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r478061957", "bodyText": "@oowekyala done.", "author": "XenoAmess", "createdAt": "2020-08-27T03:50:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNTg2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA2Mjg2MQ==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r478062861", "bodyText": "@oowekyala done.", "author": "XenoAmess", "createdAt": "2020-08-27T03:51:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNTg2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2e258aa52913d730f63ef941ab4128fa0deacf32", "chunk": "diff --git a/pmd-javascript/src/test/java/net/sourceforge/pmd/lang/ecmascript/rule/errorprone/InaccurateNumericLiteralTest.java b/pmd-javascript/src/test/java/net/sourceforge/pmd/lang/ecmascript/rule/errorprone/InaccurateNumericLiteralTest.java\nindex 84fb3b228c..f2dc5217c0 100644\n--- a/pmd-javascript/src/test/java/net/sourceforge/pmd/lang/ecmascript/rule/errorprone/InaccurateNumericLiteralTest.java\n+++ b/pmd-javascript/src/test/java/net/sourceforge/pmd/lang/ecmascript/rule/errorprone/InaccurateNumericLiteralTest.java\n\n@@ -6,6 +6,6 @@ package net.sourceforge.pmd.lang.ecmascript.rule.errorprone;\n \n import net.sourceforge.pmd.testframework.PmdRuleTst;\n \n-public class InaccurateNumericLiteralTest extends PmdRuleTst {\n+public class InnaccurateNumericLiteralTest extends PmdRuleTst {\n     // no additional unit tests\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNzc2NA==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r477437764", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * check will give a performance improve since toString() may be a complex\n          \n          \n            \n                 * check will give a performance improvement since toString() may be a complex", "author": "oowekyala", "createdAt": "2020-08-26T16:38:32Z", "path": "pmd-vm/src/main/java/net/sourceforge/pmd/lang/vm/ast/ASTReference.java", "diffHunk": "@@ -51,7 +51,7 @@\n      * Indicates if toString() should be called during condition evaluation just\n      * to ensure it does not return null. Check is unnecessary if all toString()\n      * implementations are known to have non-null return values. Disabling the\n-     * check will give a performance improval since toString() may be a complex\n+     * check will give a performance improve since toString() may be a complex", "originalCommit": "debd53fe60ba36c82bef5fe00180da85827ad9be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA2NDA4Mw==", "url": "https://github.com/pmd/pmd/pull/2744#discussion_r478064083", "bodyText": "@oowekyala done", "author": "XenoAmess", "createdAt": "2020-08-27T03:52:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNzc2NA=="}], "type": "inlineReview", "revised_code": {"commit": "627fb430bdb16be18bc834ac93c414d28f9a2266", "chunk": "diff --git a/pmd-vm/src/main/java/net/sourceforge/pmd/lang/vm/ast/ASTReference.java b/pmd-vm/src/main/java/net/sourceforge/pmd/lang/vm/ast/ASTReference.java\nindex ed383d6fdf..bdba12b325 100644\n--- a/pmd-vm/src/main/java/net/sourceforge/pmd/lang/vm/ast/ASTReference.java\n+++ b/pmd-vm/src/main/java/net/sourceforge/pmd/lang/vm/ast/ASTReference.java\n\n@@ -51,7 +51,7 @@ public class ASTReference extends AbstractVmNode {\n      * Indicates if toString() should be called during condition evaluation just\n      * to ensure it does not return null. Check is unnecessary if all toString()\n      * implementations are known to have non-null return values. Disabling the\n-     * check will give a performance improve since toString() may be a complex\n+     * check will give a performance improvement since toString() may be a complex\n      * operation on large objects.\n      *\n      * @deprecated for removal with PMD 7.0.0\n"}}, {"oid": "244a39db0fc620a0311b5ce2b8c11cc5294d43d2", "url": "https://github.com/pmd/pmd/commit/244a39db0fc620a0311b5ce2b8c11cc5294d43d2", "message": "fix typos.", "committedDate": "2020-08-27T03:47:11Z", "type": "commit"}, {"oid": "2e258aa52913d730f63ef941ab4128fa0deacf32", "url": "https://github.com/pmd/pmd/commit/2e258aa52913d730f63ef941ab4128fa0deacf32", "message": "revert changes to InnaccurateNumericLiteral", "committedDate": "2020-08-27T03:49:39Z", "type": "commit"}, {"oid": "2e258aa52913d730f63ef941ab4128fa0deacf32", "url": "https://github.com/pmd/pmd/commit/2e258aa52913d730f63ef941ab4128fa0deacf32", "message": "revert changes to InnaccurateNumericLiteral", "committedDate": "2020-08-27T03:49:39Z", "type": "forcePushed"}, {"oid": "627fb430bdb16be18bc834ac93c414d28f9a2266", "url": "https://github.com/pmd/pmd/commit/627fb430bdb16be18bc834ac93c414d28f9a2266", "message": "improve to improvement", "committedDate": "2020-08-27T03:52:17Z", "type": "commit"}, {"oid": "7e8146f70a3537814ea1c8a8fc547c2b01572672", "url": "https://github.com/pmd/pmd/commit/7e8146f70a3537814ea1c8a8fc547c2b01572672", "message": "descendant-self to descendant-or-self", "committedDate": "2020-08-27T03:53:51Z", "type": "commit"}, {"oid": "bab82f5d98d94cead56042e7bfb2f87a3cd43463", "url": "https://github.com/pmd/pmd/commit/bab82f5d98d94cead56042e7bfb2f87a3cd43463", "message": "revert release_notes_old.md", "committedDate": "2020-08-27T03:59:56Z", "type": "commit"}, {"oid": "44a08faf7f6f9c5ea53235ff233de1bdae989cba", "url": "https://github.com/pmd/pmd/commit/44a08faf7f6f9c5ea53235ff233de1bdae989cba", "message": "Update pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/CouplingBetweenObjectsRule.java\n\nCo-authored-by: Cl\u00e9ment Fournier <clement.fournier76@gmail.com>", "committedDate": "2020-08-27T04:01:20Z", "type": "commit"}, {"oid": "39be80485aabbb037c9bbe86ce696a677c110b49", "url": "https://github.com/pmd/pmd/commit/39be80485aabbb037c9bbe86ce696a677c110b49", "message": "convenient to convenience", "committedDate": "2020-08-27T04:01:57Z", "type": "commit"}, {"oid": "1a443f92f3c2f5e662374b0573a392b6d148aac1", "url": "https://github.com/pmd/pmd/commit/1a443f92f3c2f5e662374b0573a392b6d148aac1", "message": "Update pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/documentation/CommentContentRule.java\n\nCo-authored-by: Cl\u00e9ment Fournier <clement.fournier76@gmail.com>", "committedDate": "2020-08-27T04:02:21Z", "type": "commit"}, {"oid": "e15223f7222aa5fca9282d4045bb4501ee3d7eff", "url": "https://github.com/pmd/pmd/commit/e15223f7222aa5fca9282d4045bb4501ee3d7eff", "message": "Merge remote-tracking branch 'XenoAmess/fix_typos' into fix_typos\n\n# Conflicts:\n#\tpmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/design/CouplingBetweenObjectsRule.java", "committedDate": "2020-08-27T04:02:58Z", "type": "commit"}, {"oid": "e5d0b7243ffab181502434f771f9306409598b78", "url": "https://github.com/pmd/pmd/commit/e5d0b7243ffab181502434f771f9306409598b78", "message": "revert in package net.sourceforge.pmd.lang.java.typeresolution", "committedDate": "2020-08-27T04:09:19Z", "type": "commit"}, {"oid": "d85d1058e11db7c0d04b0818b4d480fb70d39997", "url": "https://github.com/pmd/pmd/commit/d85d1058e11db7c0d04b0818b4d480fb70d39997", "message": "fix", "committedDate": "2020-08-27T05:54:12Z", "type": "commit"}]}