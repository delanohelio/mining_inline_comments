{"pr_number": 2318, "pr_title": "[java] Add support for java 14", "pr_createdAt": "2020-02-27T20:32:43Z", "pr_url": "https://github.com/pmd/pmd/pull/2318", "timeline": [{"oid": "6e4daadc434974294e71eb7cec7f54c919168fed", "url": "https://github.com/pmd/pmd/commit/6e4daadc434974294e71eb7cec7f54c919168fed", "message": "Add java version 14", "committedDate": "2020-02-08T19:22:59Z", "type": "commit"}, {"oid": "ad023e8fa63392d814a9c91148b37275dbde83d7", "url": "https://github.com/pmd/pmd/commit/ad023e8fa63392d814a9c91148b37275dbde83d7", "message": "Support type test patterns", "committedDate": "2020-02-08T23:10:50Z", "type": "commit"}, {"oid": "5a6d332579a975d3d2e19078a3b31303fa75045b", "url": "https://github.com/pmd/pmd/commit/5a6d332579a975d3d2e19078a3b31303fa75045b", "message": "Make sure symbol table doesn't cry on duplicate name", "committedDate": "2020-02-08T23:11:06Z", "type": "commit"}, {"oid": "97a43945531457d933057706f4c3b5e00d5ebe71", "url": "https://github.com/pmd/pmd/commit/97a43945531457d933057706f4c3b5e00d5ebe71", "message": "Mark new API as experimental", "committedDate": "2020-02-09T16:45:08Z", "type": "commit"}, {"oid": "3a283559b43bb2cefa052354d878fc27243095ee", "url": "https://github.com/pmd/pmd/commit/3a283559b43bb2cefa052354d878fc27243095ee", "message": "Merge remote-tracking branch 'oowekyala/jdk14-pattern-matching' into jdk14", "committedDate": "2020-02-27T14:03:24Z", "type": "commit"}, {"oid": "f3da33944bc89cadf803ddc0dd5e88ac17471c21", "url": "https://github.com/pmd/pmd/commit/f3da33944bc89cadf803ddc0dd5e88ac17471c21", "message": "[java] version 14 is now the new default", "committedDate": "2020-02-27T14:15:50Z", "type": "commit"}, {"oid": "9d5b7554f0b452fb6857316ce6aa99b2b73fe34c", "url": "https://github.com/pmd/pmd/commit/9d5b7554f0b452fb6857316ce6aa99b2b73fe34c", "message": "[java] Make sure, SwitchExpressions with yield work with java14\n\nAdd additional tests for java14, so that we can later simply remove\nthe java13 preview tests", "committedDate": "2020-02-27T17:30:39Z", "type": "commit"}, {"oid": "d16751d136fe4c6e4baf2a8c91b4abe69c3b5298", "url": "https://github.com/pmd/pmd/commit/d16751d136fe4c6e4baf2a8c91b4abe69c3b5298", "message": "[java] Add support for TextBlocks in Java14\n\n* New escape sequence \"\\s\" added\n* Added experimental ASTLiteral::getTextBlockContent to retrieve\n  the text block with stripped indentation", "committedDate": "2020-02-27T20:11:02Z", "type": "commit"}, {"oid": "da01ed4fdec616c3914427c66db4f0b6a724cae2", "url": "https://github.com/pmd/pmd/commit/da01ed4fdec616c3914427c66db4f0b6a724cae2", "message": "Fix checkstyle", "committedDate": "2020-02-27T20:12:00Z", "type": "commit"}, {"oid": "81bb8090cf58fc46531a3ed3adfa2918742d0cc9", "url": "https://github.com/pmd/pmd/commit/81bb8090cf58fc46531a3ed3adfa2918742d0cc9", "message": "[java] Don't throw IllegalArgument if Literal is not a text block", "committedDate": "2020-02-27T20:14:29Z", "type": "commit"}, {"oid": "9a80f1316427f16e4a61d3ae8831fc07f2aec2df", "url": "https://github.com/pmd/pmd/commit/9a80f1316427f16e4a61d3ae8831fc07f2aec2df", "message": "[java] Fix new escape sequence \"\\s\" detection", "committedDate": "2020-02-27T20:23:33Z", "type": "commit"}, {"oid": "01db024df75baa0634c83ba26961672411d75fc5", "url": "https://github.com/pmd/pmd/commit/01db024df75baa0634c83ba26961672411d75fc5", "message": "Update asm to 7.3.1\n\nThis add support for java 14 and java 15", "committedDate": "2020-02-27T20:29:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3MzgxMg==", "url": "https://github.com/pmd/pmd/pull/2318#discussion_r385373812", "bodyText": "I think it would be nice to extract the rest of this routine into a static method. That way we can test on strings instead of having to parse a text block.", "author": "oowekyala", "createdAt": "2020-02-27T21:12:17Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLiteral.java", "diffHunk": "@@ -252,6 +258,100 @@ public boolean isSingleCharacterStringLiteral() {\n     }\n \n     public boolean isTextBlock() {\n-        return isString && getImage().startsWith(\"\\\"\\\"\\\"\");\n+        return isString && getImage().startsWith(TEXTBLOCK_DELIMITER);\n+    }\n+\n+    /**\n+     * Returns the content of the text block after normalizing line endings to LF,\n+     * removing incidental white space surrounding the text block and interpreting\n+     * escape sequences.\n+     */\n+    @Experimental\n+    public String getTextBlockContent() {\n+        if (!isTextBlock()) {\n+            throw new IllegalArgumentException(\"This is not a text block\");\n+        }\n+\n+        int start = determineContentStart(getImage());", "originalCommit": "d16751d136fe4c6e4baf2a8c91b4abe69c3b5298", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a90c2d11d21ed5f0a72ff8fc24f40a32107f3a5", "chunk": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLiteral.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLiteral.java\nindex 1920e42b69..c9d2d5e4ea 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLiteral.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLiteral.java\n\n@@ -265,17 +265,22 @@ public class ASTLiteral extends AbstractJavaTypeNode {\n      * Returns the content of the text block after normalizing line endings to LF,\n      * removing incidental white space surrounding the text block and interpreting\n      * escape sequences.\n+     *\n+     * <p>Note: This is a Java 14 Preview Feature.\n      */\n     @Experimental\n     public String getTextBlockContent() {\n         if (!isTextBlock()) {\n-            throw new IllegalArgumentException(\"This is not a text block\");\n+            return getImage();\n         }\n+        return determineTextBlockContent(getImage());\n+    }\n \n-        int start = determineContentStart(getImage());\n-        String content = getImage().substring(start, getImage().length() - TEXTBLOCK_DELIMITER.length());\n+    static String determineTextBlockContent(String image) {\n         // normalize line endings to LF\n-        content = content.replaceAll(\"\\r\\n|\\r\", \"\\n\");\n+        String content = image.replaceAll(\"\\r\\n|\\r\", \"\\n\");\n+        int start = determineContentStart(content);\n+        content = content.substring(start, content.length() - TEXTBLOCK_DELIMITER.length());\n \n         int prefixLength = Integer.MAX_VALUE;\n         List<String> lines = Arrays.asList(content.split(\"\\\\n\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3NTE3NA==", "url": "https://github.com/pmd/pmd/pull/2318#discussion_r385375174", "bodyText": "Does this work with CRLF delimited strings? It looks like it's not going past the LF. Maybe you just need to call this method on the normalized string, and stop caring about CR.\nAlso maybe it would be clearer to just return start + 1; here instead of breaking on the next iteration.", "author": "oowekyala", "createdAt": "2020-02-27T21:15:03Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLiteral.java", "diffHunk": "@@ -252,6 +258,100 @@ public boolean isSingleCharacterStringLiteral() {\n     }\n \n     public boolean isTextBlock() {\n-        return isString && getImage().startsWith(\"\\\"\\\"\\\"\");\n+        return isString && getImage().startsWith(TEXTBLOCK_DELIMITER);\n+    }\n+\n+    /**\n+     * Returns the content of the text block after normalizing line endings to LF,\n+     * removing incidental white space surrounding the text block and interpreting\n+     * escape sequences.\n+     */\n+    @Experimental\n+    public String getTextBlockContent() {\n+        if (!isTextBlock()) {\n+            throw new IllegalArgumentException(\"This is not a text block\");\n+        }\n+\n+        int start = determineContentStart(getImage());\n+        String content = getImage().substring(start, getImage().length() - TEXTBLOCK_DELIMITER.length());\n+        // normalize line endings to LF\n+        content = content.replaceAll(\"\\r\\n|\\r\", \"\\n\");\n+\n+        int prefixLength = Integer.MAX_VALUE;\n+        List<String> lines = Arrays.asList(content.split(\"\\\\n\"));\n+        for (int i = 0; i < lines.size(); i++) {\n+            String line = lines.get(i);\n+            // compute common prefix\n+            if (!StringUtils.isAllBlank(line) || i == lines.size() - 1) {\n+                prefixLength = Math.min(prefixLength, countLeadingWhitespace(line));\n+            }\n+        }\n+        if (prefixLength == Integer.MAX_VALUE) {\n+            // common prefix not found\n+            prefixLength = 0;\n+        }\n+        StringBuilder sb = new StringBuilder(content.length());\n+        for (int i = 0; i < lines.size(); i++) {\n+            String line = lines.get(i);\n+            // remove common whitespace prefix\n+            if (!StringUtils.isAllBlank(line) && line.length() >= prefixLength) {\n+                line = line.substring(prefixLength);\n+            }\n+            line = removeTrailingWhitespace(line);\n+            sb.append(line);\n+\n+            boolean isLastLine = i == lines.size() - 1;\n+            boolean isFirstLine = i == 0;\n+            if (!isLastLine || !isFirstLine && !StringUtils.isAllBlank(line)) {\n+                sb.append('\\n');\n+            }\n+        }\n+        String result = sb.toString();\n+\n+        // interpret escape sequences \"\\NL\" \"n\",\"t\",\"b\",\"r\",\"f\", \"s\", \"\\\"\", \"\\'\"\n+        result = result\n+                    .replaceAll(\"\\\\\\\\\\n\", \"\")\n+                    .replaceAll(\"\\\\\\\\n\", \"\\n\")\n+                    .replaceAll(\"\\\\\\\\t\", \"\\t\")\n+                    .replaceAll(\"\\\\\\\\b\", \"\\b\")\n+                    .replaceAll(\"\\\\\\\\r\", \"\\r\")\n+                    .replaceAll(\"\\\\\\\\f\", \"\\f\")\n+                    .replaceAll(\"\\\\\\\\s\", \" \")\n+                    .replaceAll(\"\\\\\\\\\\\"\", \"\\\"\")\n+                    .replaceAll(\"\\\\\\\\'\", \"'\");\n+        return result;\n+    }\n+\n+    private static int determineContentStart(String s) {\n+        int start = TEXTBLOCK_DELIMITER.length(); // this is the opening delimiter\n+        boolean lineTerminator = false;\n+        // the content begins after at the first character after the line terminator\n+        // of the opening delimiter\n+        while (start < s.length() && Character.isWhitespace(s.charAt(start))) {\n+            if (s.charAt(start) == '\\r' || s.charAt(start) == '\\n') {\n+                lineTerminator = true;", "originalCommit": "d16751d136fe4c6e4baf2a8c91b4abe69c3b5298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwMzcxOQ==", "url": "https://github.com/pmd/pmd/pull/2318#discussion_r385603719", "bodyText": "There was a problem with a corner case: If the content starts with LF, so that the literal looks like this: \"\"\"<LF><LF>foo<LF>\"\"\", then we would have read passed the 2nd LF and missed that... I've fixed it.", "author": "adangel", "createdAt": "2020-02-28T09:57:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3NTE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "8a90c2d11d21ed5f0a72ff8fc24f40a32107f3a5", "chunk": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLiteral.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLiteral.java\nindex 1920e42b69..c9d2d5e4ea 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLiteral.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLiteral.java\n\n@@ -265,17 +265,22 @@ public class ASTLiteral extends AbstractJavaTypeNode {\n      * Returns the content of the text block after normalizing line endings to LF,\n      * removing incidental white space surrounding the text block and interpreting\n      * escape sequences.\n+     *\n+     * <p>Note: This is a Java 14 Preview Feature.\n      */\n     @Experimental\n     public String getTextBlockContent() {\n         if (!isTextBlock()) {\n-            throw new IllegalArgumentException(\"This is not a text block\");\n+            return getImage();\n         }\n+        return determineTextBlockContent(getImage());\n+    }\n \n-        int start = determineContentStart(getImage());\n-        String content = getImage().substring(start, getImage().length() - TEXTBLOCK_DELIMITER.length());\n+    static String determineTextBlockContent(String image) {\n         // normalize line endings to LF\n-        content = content.replaceAll(\"\\r\\n|\\r\", \"\\n\");\n+        String content = image.replaceAll(\"\\r\\n|\\r\", \"\\n\");\n+        int start = determineContentStart(content);\n+        content = content.substring(start, content.length() - TEXTBLOCK_DELIMITER.length());\n \n         int prefixLength = Integer.MAX_VALUE;\n         List<String> lines = Arrays.asList(content.split(\"\\\\n\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3ODIwNA==", "url": "https://github.com/pmd/pmd/pull/2318#discussion_r385378204", "bodyText": "I think this is missing \\\\ for a backslash", "author": "oowekyala", "createdAt": "2020-02-27T21:21:25Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLiteral.java", "diffHunk": "@@ -252,6 +258,100 @@ public boolean isSingleCharacterStringLiteral() {\n     }\n \n     public boolean isTextBlock() {\n-        return isString && getImage().startsWith(\"\\\"\\\"\\\"\");\n+        return isString && getImage().startsWith(TEXTBLOCK_DELIMITER);\n+    }\n+\n+    /**\n+     * Returns the content of the text block after normalizing line endings to LF,\n+     * removing incidental white space surrounding the text block and interpreting\n+     * escape sequences.\n+     */\n+    @Experimental\n+    public String getTextBlockContent() {\n+        if (!isTextBlock()) {\n+            return getImage();\n+        }\n+\n+        int start = determineContentStart(getImage());\n+        String content = getImage().substring(start, getImage().length() - TEXTBLOCK_DELIMITER.length());\n+        // normalize line endings to LF\n+        content = content.replaceAll(\"\\r\\n|\\r\", \"\\n\");\n+\n+        int prefixLength = Integer.MAX_VALUE;\n+        List<String> lines = Arrays.asList(content.split(\"\\\\n\"));\n+        for (int i = 0; i < lines.size(); i++) {\n+            String line = lines.get(i);\n+            // compute common prefix\n+            if (!StringUtils.isAllBlank(line) || i == lines.size() - 1) {\n+                prefixLength = Math.min(prefixLength, countLeadingWhitespace(line));\n+            }\n+        }\n+        if (prefixLength == Integer.MAX_VALUE) {\n+            // common prefix not found\n+            prefixLength = 0;\n+        }\n+        StringBuilder sb = new StringBuilder(content.length());\n+        for (int i = 0; i < lines.size(); i++) {\n+            String line = lines.get(i);\n+            // remove common whitespace prefix\n+            if (!StringUtils.isAllBlank(line) && line.length() >= prefixLength) {\n+                line = line.substring(prefixLength);\n+            }\n+            line = removeTrailingWhitespace(line);\n+            sb.append(line);\n+\n+            boolean isLastLine = i == lines.size() - 1;\n+            boolean isFirstLine = i == 0;\n+            if (!isLastLine || !isFirstLine && !StringUtils.isAllBlank(line)) {\n+                sb.append('\\n');\n+            }\n+        }\n+        String result = sb.toString();\n+\n+        // interpret escape sequences \"\\NL\" \"n\",\"t\",\"b\",\"r\",\"f\", \"s\", \"\\\"\", \"\\'\"", "originalCommit": "01db024df75baa0634c83ba26961672411d75fc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYyMDgyMA==", "url": "https://github.com/pmd/pmd/pull/2318#discussion_r385620820", "bodyText": "Good catch!", "author": "adangel", "createdAt": "2020-02-28T10:33:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3ODIwNA=="}], "type": "inlineReview", "revised_code": {"commit": "8a90c2d11d21ed5f0a72ff8fc24f40a32107f3a5", "chunk": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLiteral.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLiteral.java\nindex 1a9047d11a..c9d2d5e4ea 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLiteral.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLiteral.java\n\n@@ -265,17 +265,22 @@ public class ASTLiteral extends AbstractJavaTypeNode {\n      * Returns the content of the text block after normalizing line endings to LF,\n      * removing incidental white space surrounding the text block and interpreting\n      * escape sequences.\n+     *\n+     * <p>Note: This is a Java 14 Preview Feature.\n      */\n     @Experimental\n     public String getTextBlockContent() {\n         if (!isTextBlock()) {\n             return getImage();\n         }\n+        return determineTextBlockContent(getImage());\n+    }\n \n-        int start = determineContentStart(getImage());\n-        String content = getImage().substring(start, getImage().length() - TEXTBLOCK_DELIMITER.length());\n+    static String determineTextBlockContent(String image) {\n         // normalize line endings to LF\n-        content = content.replaceAll(\"\\r\\n|\\r\", \"\\n\");\n+        String content = image.replaceAll(\"\\r\\n|\\r\", \"\\n\");\n+        int start = determineContentStart(content);\n+        content = content.substring(start, content.length() - TEXTBLOCK_DELIMITER.length());\n \n         int prefixLength = Integer.MAX_VALUE;\n         List<String> lines = Arrays.asList(content.split(\"\\\\n\"));\n"}}, {"oid": "8a90c2d11d21ed5f0a72ff8fc24f40a32107f3a5", "url": "https://github.com/pmd/pmd/commit/8a90c2d11d21ed5f0a72ff8fc24f40a32107f3a5", "message": "[java] ASTLiteral - move the tests for text block content\n\nAlso fix determining the start of the content, when there are\nmultiple line terminators without indenting whitespace.", "committedDate": "2020-02-28T08:43:54Z", "type": "commit"}, {"oid": "09ff74ea7a27d8dc999ebacd5bc11d88b27e68cb", "url": "https://github.com/pmd/pmd/commit/09ff74ea7a27d8dc999ebacd5bc11d88b27e68cb", "message": "[java] Don't consider VariableDeclaratorIds of Pattern Bindings for now", "committedDate": "2020-02-28T09:38:44Z", "type": "commit"}, {"oid": "b1acb292572640e0336beb2a4a9046f0fb046ad4", "url": "https://github.com/pmd/pmd/commit/b1acb292572640e0336beb2a4a9046f0fb046ad4", "message": "[java] VariableDeclarationId of pattern bindings is implicitly final", "committedDate": "2020-02-28T09:50:00Z", "type": "commit"}, {"oid": "adfb2ab129b86698282971f6a147a6707da82509", "url": "https://github.com/pmd/pmd/commit/adfb2ab129b86698282971f6a147a6707da82509", "message": "[java] Update grammar", "committedDate": "2020-02-28T09:51:38Z", "type": "commit"}, {"oid": "524925f8cb160b8e839c11d3ba84d8568ff35122", "url": "https://github.com/pmd/pmd/commit/524925f8cb160b8e839c11d3ba84d8568ff35122", "message": "[java] Rewrite escape sequence interpreting for text blocks", "committedDate": "2020-02-28T10:29:09Z", "type": "commit"}, {"oid": "8a224462fd333221ad83f02a5f44c87090f8ae6c", "url": "https://github.com/pmd/pmd/commit/8a224462fd333221ad83f02a5f44c87090f8ae6c", "message": "[java] Add initial support for Java 14 Preview record types", "committedDate": "2020-02-28T13:58:52Z", "type": "commit"}, {"oid": "e2d84d6741c65bd1e2f843c72e9e9775f355edb7", "url": "https://github.com/pmd/pmd/commit/e2d84d6741c65bd1e2f843c72e9e9775f355edb7", "message": "[java] Add grammar jdoc for new Record types", "committedDate": "2020-02-28T15:50:57Z", "type": "commit"}, {"oid": "9917e3f422a81cb033ad4dbb091d68f69c2665b6", "url": "https://github.com/pmd/pmd/commit/9917e3f422a81cb033ad4dbb091d68f69c2665b6", "message": "[java] RecordComponents -> RecordComponentList", "committedDate": "2020-02-28T15:56:43Z", "type": "commit"}, {"oid": "5f43e198d560df26e5a526d9e3cde8a8087d1d81", "url": "https://github.com/pmd/pmd/commit/5f43e198d560df26e5a526d9e3cde8a8087d1d81", "message": "[java] RecordConstructorDeclaration - do not use Name()", "committedDate": "2020-02-28T16:01:57Z", "type": "commit"}, {"oid": "e017def280d7a853a7d27b25fa02dfef7d0d62b6", "url": "https://github.com/pmd/pmd/commit/e017def280d7a853a7d27b25fa02dfef7d0d62b6", "message": "[java] Support vararg/array in RecordComponent and empty components", "committedDate": "2020-02-28T16:35:44Z", "type": "commit"}, {"oid": "68ba8a967dd000847edf8f7a0e7e865e285558c4", "url": "https://github.com/pmd/pmd/commit/68ba8a967dd000847edf8f7a0e7e865e285558c4", "message": "[java] Test nested record type", "committedDate": "2020-02-28T16:41:26Z", "type": "commit"}, {"oid": "fa28aa7e2328c88bb5a054d3bd0fdd48d57c9046", "url": "https://github.com/pmd/pmd/commit/fa28aa7e2328c88bb5a054d3bd0fdd48d57c9046", "message": "[java] Test annotations with RecordComponents", "committedDate": "2020-02-28T16:59:39Z", "type": "commit"}, {"oid": "0ecd1da200ae59c03048fe6e99c19fd598a0dbe3", "url": "https://github.com/pmd/pmd/commit/0ecd1da200ae59c03048fe6e99c19fd598a0dbe3", "message": "[java] Get rid of RecordBodyDeclaration node", "committedDate": "2020-02-28T17:32:33Z", "type": "commit"}, {"oid": "7d3df99134379629b1848ad324840592b592477b", "url": "https://github.com/pmd/pmd/commit/7d3df99134379629b1848ad324840592b592477b", "message": "[java] RecordBody - test with more annotation and use deep lookahead\n\nRecord constructors are not allowed to throw exceptions.", "committedDate": "2020-02-28T17:41:22Z", "type": "commit"}, {"oid": "2ace55f635a9ddd655d932737c11266b3858207c", "url": "https://github.com/pmd/pmd/commit/2ace55f635a9ddd655d932737c11266b3858207c", "message": "[java] Support RecordConstructorDeclaration as AnyTypeBodyDeclaration", "committedDate": "2020-02-28T17:59:16Z", "type": "commit"}, {"oid": "ee211d42b1e3368cb226a9a00ea159d63c1f5e0d", "url": "https://github.com/pmd/pmd/commit/ee211d42b1e3368cb226a9a00ea159d63c1f5e0d", "message": "[java] Remove unneccessary annotation parsing", "committedDate": "2020-02-28T18:07:03Z", "type": "commit"}, {"oid": "eae6e96db0b469e72e61e6e0cd1ee23465c7f30d", "url": "https://github.com/pmd/pmd/commit/eae6e96db0b469e72e61e6e0cd1ee23465c7f30d", "message": "[java] Add type parameters for test", "committedDate": "2020-02-28T18:11:10Z", "type": "commit"}, {"oid": "f1fe8ce5e1883f2fbeae3e93bdbabdf8eb7511e0", "url": "https://github.com/pmd/pmd/commit/f1fe8ce5e1883f2fbeae3e93bdbabdf8eb7511e0", "message": "[java] Remove version java 12 preview\n\nKeep the tests and move them to java 14\nexcept for the break expression", "committedDate": "2020-02-28T18:37:13Z", "type": "commit"}, {"oid": "0bcfda5619ce75c701e4b201f1ff6253d4343dd8", "url": "https://github.com/pmd/pmd/commit/0bcfda5619ce75c701e4b201f1ff6253d4343dd8", "message": "[doc] Update release notes: Java 14 Support\n\nFixes #2159", "committedDate": "2020-02-28T18:48:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNTU2NA==", "url": "https://github.com/pmd/pmd/pull/2318#discussion_r386015564", "bodyText": "Hm... I guess, these AST nodes should be final....", "author": "adangel", "createdAt": "2020-02-29T09:32:02Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTRecordBody.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+\n+package net.sourceforge.pmd.lang.java.ast;\n+\n+import net.sourceforge.pmd.annotation.Experimental;\n+\n+/**\n+ * Defines the body of a {@linkplain ASTRecordDeclaration RecordDeclaration} (JDK 14 preview feature).\n+ * This can contain additional methods and or constructors.\n+ *\n+ * <pre class=\"grammar\">\n+ *\n+ * RecordBody ::= \"{\" (   {@linkplain ASTRecordConstructorDeclaration RecordConstructorDeclaration}\n+ *                      | {@linkplain ASTClassOrInterfaceBodyDeclaration ClassOrInterfaceBodyDeclaration} )* \"}\"\n+ *\n+ * </pre>\n+ *\n+ */\n+@Experimental\n+public class ASTRecordBody extends AbstractJavaNode {", "originalCommit": "0bcfda5619ce75c701e4b201f1ff6253d4343dd8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "548326d2e1754e335ecfa18049ce65449eea82e5", "chunk": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTRecordBody.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTRecordBody.java\nindex a066bfa2aa..904b62e56b 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTRecordBody.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTRecordBody.java\n\n@@ -20,7 +20,7 @@ import net.sourceforge.pmd.annotation.Experimental;\n  *\n  */\n @Experimental\n-public class ASTRecordBody extends AbstractJavaNode {\n+public final class ASTRecordBody extends AbstractJavaNode {\n     ASTRecordBody(int id) {\n         super(id);\n     }\n"}}, {"oid": "548326d2e1754e335ecfa18049ce65449eea82e5", "url": "https://github.com/pmd/pmd/commit/548326d2e1754e335ecfa18049ce65449eea82e5", "message": "[java] Make the new AST node classes final", "committedDate": "2020-02-29T16:58:45Z", "type": "commit"}, {"oid": "f49a6dbc3d0872e345ecea6c13926dd939bc119d", "url": "https://github.com/pmd/pmd/commit/f49a6dbc3d0872e345ecea6c13926dd939bc119d", "message": "[java] Add test with record implementing a interface", "committedDate": "2020-02-29T19:00:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU0Nzg4OA==", "url": "https://github.com/pmd/pmd/pull/2318#discussion_r386547888", "bodyText": "Right, they all need to be interpreted in one pass", "author": "oowekyala", "createdAt": "2020-03-02T17:47:53Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLiteral.java", "diffHunk": "@@ -252,6 +258,143 @@ public boolean isSingleCharacterStringLiteral() {\n     }\n \n     public boolean isTextBlock() {\n-        return isString && getImage().startsWith(\"\\\"\\\"\\\"\");\n+        return isString && getImage().startsWith(TEXTBLOCK_DELIMITER);\n+    }\n+\n+    /**\n+     * Returns the content of the text block after normalizing line endings to LF,\n+     * removing incidental white space surrounding the text block and interpreting\n+     * escape sequences.\n+     *\n+     * <p>Note: This is a Java 14 Preview Feature.\n+     */\n+    @Experimental\n+    public String getTextBlockContent() {\n+        if (!isTextBlock()) {\n+            return getImage();\n+        }\n+        return determineTextBlockContent(getImage());\n+    }\n+\n+    static String determineTextBlockContent(String image) {\n+        // normalize line endings to LF\n+        String content = image.replaceAll(\"\\r\\n|\\r\", \"\\n\");\n+        int start = determineContentStart(content);\n+        content = content.substring(start, content.length() - TEXTBLOCK_DELIMITER.length());\n+\n+        int prefixLength = Integer.MAX_VALUE;\n+        List<String> lines = Arrays.asList(content.split(\"\\\\n\"));\n+        for (int i = 0; i < lines.size(); i++) {\n+            String line = lines.get(i);\n+            // compute common prefix\n+            if (!StringUtils.isAllBlank(line) || i == lines.size() - 1) {\n+                prefixLength = Math.min(prefixLength, countLeadingWhitespace(line));\n+            }\n+        }\n+        if (prefixLength == Integer.MAX_VALUE) {\n+            // common prefix not found\n+            prefixLength = 0;\n+        }\n+        StringBuilder sb = new StringBuilder(content.length());\n+        for (int i = 0; i < lines.size(); i++) {\n+            String line = lines.get(i);\n+            // remove common whitespace prefix\n+            if (!StringUtils.isAllBlank(line) && line.length() >= prefixLength) {\n+                line = line.substring(prefixLength);\n+            }\n+            line = removeTrailingWhitespace(line);\n+            sb.append(line);\n+\n+            boolean isLastLine = i == lines.size() - 1;\n+            boolean isFirstLine = i == 0;\n+            if (!isLastLine || !isFirstLine && !StringUtils.isAllBlank(line)) {\n+                sb.append('\\n');\n+            }\n+        }\n+\n+        interpretEscapeSequences(sb);\n+        return sb.toString();\n+    }\n+\n+    private static void interpretEscapeSequences(StringBuilder sb) {\n+        // interpret escape sequences \"\\<LF>\" (line continuation), \"n\",\"t\",\"b\",\"r\",\"f\", \"s\", \"\\\"\", \"\\'\", \"\\\\\"\n+        for (int i = 0; i < sb.length(); i++) {", "originalCommit": "f49a6dbc3d0872e345ecea6c13926dd939bc119d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "fc0b437ad7174b5f8e199d500ef91b341af0877f", "url": "https://github.com/pmd/pmd/commit/fc0b437ad7174b5f8e199d500ef91b341af0877f", "message": "Fix record ctor with throws", "committedDate": "2020-03-02T18:00:59Z", "type": "commit"}]}