{"pr_number": 2405, "pr_title": "[core] Add wildcards to node stream API", "pr_createdAt": "2020-04-07T14:24:59Z", "pr_url": "https://github.com/pmd/pmd/pull/2405", "timeline": [{"oid": "f3d4cd81ed0ce60bcc0a062b57793ca645036236", "url": "https://github.com/pmd/pmd/commit/f3d4cd81ed0ce60bcc0a062b57793ca645036236", "message": "Add wildcards to nodestream API\n\nThis makes the API more flexible, for example\nyou can get a NodeStream<JavaNode> by filtering\nwith any subclass of JavaNode.", "committedDate": "2020-04-06T13:29:27Z", "type": "commit"}, {"oid": "8163a4a088d593f1fcd4d957f5453a1394217651", "url": "https://github.com/pmd/pmd/commit/8163a4a088d593f1fcd4d957f5453a1394217651", "message": "Checkout filterIsAny from java-grammar", "committedDate": "2020-04-06T13:32:40Z", "type": "commit"}, {"oid": "52e97300549f3e7a92326e972dfea32e95426a00", "url": "https://github.com/pmd/pmd/commit/52e97300549f3e7a92326e972dfea32e95426a00", "message": "Test some usages, fix a bug", "committedDate": "2020-04-06T14:11:33Z", "type": "commit"}, {"oid": "09adb287ebbb8c9738bfaba05c245e1bc635676b", "url": "https://github.com/pmd/pmd/commit/09adb287ebbb8c9738bfaba05c245e1bc635676b", "message": "Use filterIsAny as a map function to preserve fluent API", "committedDate": "2020-04-07T14:03:09Z", "type": "commit"}, {"oid": "9d87a7bb9023c63f3721d04b7037405188474675", "url": "https://github.com/pmd/pmd/commit/9d87a7bb9023c63f3721d04b7037405188474675", "message": "Rename to asInstanceOf\n\nMakes more explicit that it should be used\nwith map and not filter", "committedDate": "2020-04-07T14:23:27Z", "type": "commit"}, {"oid": "e2a420b5ffb60d4fe413dd39f537cfdcc5a9ba52", "url": "https://github.com/pmd/pmd/commit/e2a420b5ffb60d4fe413dd39f537cfdcc5a9ba52", "message": "Port some other usages, introduce firstNonNull", "committedDate": "2020-04-11T21:10:25Z", "type": "commit"}, {"oid": "50b708ac5f4e45e66d3425fce97fc42638eaeb45", "url": "https://github.com/pmd/pmd/commit/50b708ac5f4e45e66d3425fce97fc42638eaeb45", "message": "Fix examples", "committedDate": "2020-04-14T19:18:06Z", "type": "commit"}, {"oid": "1db09d61c70c75ae5946a5f20b599485ba69b329", "url": "https://github.com/pmd/pmd/commit/1db09d61c70c75ae5946a5f20b599485ba69b329", "message": "Fix compile error with javac 11\n\nThe code compiles with java 8, but not with java 11 and 12.\nIt works again with java 13.\n\nIt seems that javac stumbles over the overloaded\napply method in the interface Filtermap.", "committedDate": "2020-04-15T10:24:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyMTM4Nw==", "url": "https://github.com/pmd/pmd/pull/2405#discussion_r408621387", "bodyText": "I'm just wondering: In the above Node methods, we use the type parameter \"T\", here we use \"R\". For the sake of not surprising any users of the API - we should use the same. Here at least, it has exactly the same meaning (R/T extends Node). We could even settle with \"N\" as in \"Node\" for all methods in Node... N extends Node. Wdyt?\nUpdate: I see now, where this comes from: from NodeStream. Don't know, what's easier to grasp here...", "author": "adangel", "createdAt": "2020-04-15T06:59:44Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/Node.java", "diffHunk": "@@ -651,7 +648,7 @@ default void removeChildAtIndex(int childIndex) {\n      *\n      * @see NodeStream#children(Class)\n      */\n-    default <R extends Node> NodeStream<R> children(Class<R> rClass) {\n+    default <R extends Node> NodeStream<R> children(Class<? extends R> rClass) {", "originalCommit": "50b708ac5f4e45e66d3425fce97fc42638eaeb45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMzQyMQ==", "url": "https://github.com/pmd/pmd/pull/2405#discussion_r408923421", "bodyText": "Maybe we could use R for all methods in Node? Those would be aligned with those in NodeStream then. I think more \"semantic\" names might be easier to grasp (R for Ts that are in a return type, maybe change NodeStream's type param T into N).", "author": "oowekyala", "createdAt": "2020-04-15T15:16:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyMTM4Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNTk0Nw==", "url": "https://github.com/pmd/pmd/pull/2405#discussion_r408625947", "bodyText": "Only one of <pre> or {@code is needed, isn't it?", "author": "adangel", "createdAt": "2020-04-15T07:09:49Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/NodeStream.java", "diffHunk": "@@ -975,7 +1001,62 @@ default boolean isEmpty() {\n         return upstream.cached().flatMap(aggregate);\n     }\n \n-\n+    /**\n+     * Returns a map function, that checks whether the parameter is an\n+     * instance of any of the given classes. If so, it returns the parameter,\n+     * otherwise it returns null.\n+     *\n+     * <p>This may be used to filter a node stream to those specific\n+     * classes, for example:\n+     *\n+     * <pre>{@code", "originalCommit": "50b708ac5f4e45e66d3425fce97fc42638eaeb45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNjcyOQ==", "url": "https://github.com/pmd/pmd/pull/2405#discussion_r408916729", "bodyText": "Without {@code}, HTML special characters like < need to be replaced with entities", "author": "oowekyala", "createdAt": "2020-04-15T15:07:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNTk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwNjQ4Ng==", "url": "https://github.com/pmd/pmd/pull/2405#discussion_r409606486", "bodyText": "Ah, ok, didn't know that.", "author": "adangel", "createdAt": "2020-04-16T14:34:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNTk0Nw=="}], "type": "inlineReview", "revised_code": null}]}