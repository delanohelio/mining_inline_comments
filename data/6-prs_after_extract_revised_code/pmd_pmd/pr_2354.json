{"pr_number": 2354, "pr_title": "[core] Add support for rule chain execution for XPath 2.0", "pr_createdAt": "2020-03-13T20:03:40Z", "pr_url": "https://github.com/pmd/pmd/pull/2354", "timeline": [{"oid": "5fb6df7daa5d0eb36e963d8f4eef1853444b759f", "url": "https://github.com/pmd/pmd/commit/5fb6df7daa5d0eb36e963d8f4eef1853444b759f", "message": "[core] Add support for rule chain execution for XPath 2.0\n\nVery similar approach to what has been implemented for Jaxen.\nThe existing rules still work as before.\n\nRefs #1687", "committedDate": "2020-03-13T14:29:20Z", "type": "commit"}, {"oid": "0b88caacea0bbf2a966052153a9cd910b816bc4c", "url": "https://github.com/pmd/pmd/commit/0b88caacea0bbf2a966052153a9cd910b816bc4c", "message": "[core] Add more cases for Saxon rule chain", "committedDate": "2020-03-13T19:48:35Z", "type": "commit"}, {"oid": "e2229b2d8444dfbcded87e89b58a38b693fc8a65", "url": "https://github.com/pmd/pmd/commit/e2229b2d8444dfbcded87e89b58a38b693fc8a65", "message": "[core] Saxon XPath 2.0 and rule chain with visitors\n\nThis is an enhanced implementation of rule chain\nsupport for XPath 2.0 expressions. It uses a own\nvisitor to analyze and modify the original\nsaxon xpath expressions.", "committedDate": "2020-03-19T10:28:26Z", "type": "commit"}, {"oid": "45d4fc5f56fcd108db4c50a91bf7088431cc074f", "url": "https://github.com/pmd/pmd/commit/45d4fc5f56fcd108db4c50a91bf7088431cc074f", "message": "Make documentSorter singleton", "committedDate": "2020-03-19T18:08:19Z", "type": "commit"}, {"oid": "20a3c39b4d88b0e5716b9e72880ad91d810d6b04", "url": "https://github.com/pmd/pmd/commit/20a3c39b4d88b0e5716b9e72880ad91d810d6b04", "message": "Make SplitUnions package private", "committedDate": "2020-03-19T18:11:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNTk2Mw==", "url": "https://github.com/pmd/pmd/pull/2354#discussion_r395225963", "bodyText": "This can be a singleton", "author": "oowekyala", "createdAt": "2020-03-19T18:12:48Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/xpath/internal/DocumentSorter.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+\n+package net.sourceforge.pmd.lang.rule.xpath.internal;\n+\n+import java.util.Comparator;\n+\n+import net.sourceforge.pmd.lang.ast.Node;\n+\n+/**\n+ * Sorts nodes by document order.\n+ */\n+public class DocumentSorter implements Comparator<Node> {", "originalCommit": "e2229b2d8444dfbcded87e89b58a38b693fc8a65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "514a524e6f9071b074ee569bee6a656d3c868907", "chunk": "diff --git a/pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/xpath/internal/DocumentSorter.java b/pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/xpath/internal/DocumentSorter.java\nindex d69533d25f..920ee61324 100644\n--- a/pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/xpath/internal/DocumentSorter.java\n+++ b/pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/xpath/internal/DocumentSorter.java\n\n@@ -12,7 +12,14 @@ import net.sourceforge.pmd.lang.ast.Node;\n /**\n  * Sorts nodes by document order.\n  */\n-public class DocumentSorter implements Comparator<Node> {\n+final class DocumentSorter implements Comparator<Node> {\n+\n+    public static final DocumentSorter INSTANCE = new DocumentSorter();\n+\n+    private DocumentSorter() {\n+\n+    }\n+\n     @Override\n     public int compare(Node node1, Node node2) {\n         if (node1 == null && node2 == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNzE1NA==", "url": "https://github.com/pmd/pmd/pull/2354#discussion_r395227154", "bodyText": "I think this undermines the benefits of using the rulechain? We'd effectively traverse once for each rulechain visit, and once for the whole tree, so we'd only be doing more traversals, while the whole tree visit suffices", "author": "oowekyala", "createdAt": "2020-03-19T18:14:52Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/xpath/SaxonXPathRuleQuery.java", "diffHunk": "@@ -206,15 +251,55 @@ private void initializeXPathExpression() {\n                 }\n             }\n \n-            // TODO Come up with a way to make use of RuleChain. I had hacked up\n-            // an approach which used Jaxen's stuff, but that only works for\n-            // 1.0 compatibility mode. Rather do it right instead of kludging.\n             xpathExpression = xpathEvaluator.createExpression(super.xpath);\n+            analyzeXPathForRuleChain(xpathEvaluator);\n         } catch (final XPathException e) {\n             throw new RuntimeException(e);\n         }\n     }\n+    \n+    private void analyzeXPathForRuleChain(final XPathEvaluator xpathEvaluator) {\n+        final Expression expr = xpathExpression.getInternalExpression();\n+\n+        boolean useRuleChain = true;\n+\n+        // First step: Split the union venn expressions into single expressions\n+        List<Expression> subexpressions = new ArrayList<>();\n+        SplitUnions unions = new SplitUnions();\n+        unions.visit(expr);\n+        if (unions.getExpressions().isEmpty()) {\n+            subexpressions.add(expr);\n+        } else {\n+            subexpressions.addAll(unions.getExpressions());\n+        }\n \n+        // Second step: Analyze each expression separately\n+        for (Expression subexpression : subexpressions) {\n+            RuleChainAnalyzer rca = new RuleChainAnalyzer(xpathEvaluator.getConfiguration());\n+            Expression modified = rca.visit(subexpression);\n+\n+            if (rca.getRootElement() != null) {\n+                addExpressionForNode(rca.getRootElement(), modified);\n+            } else {\n+                // couldn't find a root element for the expression, that means, we can't use rule chain at all\n+                // even though, it would be possible for part of the expression.\n+                useRuleChain = false;\n+                break;\n+            }\n+        }\n+\n+        if (useRuleChain) {\n+            super.ruleChainVisits.addAll(nodeNameToXPaths.keySet());\n+        } else {\n+            nodeNameToXPaths.clear();\n+            if (LOG.isLoggable(Level.FINE)) {\n+                LOG.log(Level.FINE, \"Unable to use RuleChain for XPath: \" + xpath);\n+            }\n+        }\n+\n+        // always add fallback expression\n+        addExpressionForNode(AST_ROOT, xpathExpression.getInternalExpression());", "originalCommit": "e2229b2d8444dfbcded87e89b58a38b693fc8a65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0ODM5OA==", "url": "https://github.com/pmd/pmd/pull/2354#discussion_r395548398", "bodyText": "That should be the case - but I double check.\nAs far as I know: getRuleChainVisits() only returns the nodes, that should be visited and the rule chain calls the rule then only for these nodes. If it happens, that the rule called for whatever reason on a different node, that we would use the whole expression.\nIf we couldn't split up the expression, then the getRuleChainVisits() will return a empty list and for java the rule is called with ASTCompilationUnit - since we don't have a specific expression for this node, we would execute the whole expression (aka. fallback - AST_ROOT).\nActually, the current master impl returns the node name \"_AST_ROOT\" also in the \"getRuleChainVisits()\" list - luckily, we have no node named \"_AST_ROOT\", so no extra nodes are visited...\nSee 5fb6df7#diff-dd6490e8d37457789b60964710470e15R46 - I didn't fix that bevior for jaxen, because it should not matter.\n\nWhen executing via rulechain, we get called here\nhttps://github.com/pmd/pmd/blob/master/pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/AbstractRuleChainVisitor.java#L87-L99\nFor each node separately.\nThis eventually ends up in the SaxonQuery, where we get the expressions for the node:\nhttps://github.com/pmd/pmd/pull/2354/files#diff-ae9e480e9dfbc219210827dca4d4a6d8R132-R137\nIf there is no specific expression, we would return here the expression for AST_ROOT. But we only get called for the nodes, we explicitly returned via getRuleChainVisits()...\nSo, I don't see a problem here....", "author": "adangel", "createdAt": "2020-03-20T10:27:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNzE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyMTMyOQ==", "url": "https://github.com/pmd/pmd/pull/2354#discussion_r395621329", "bodyText": "Ok, thanks for explaining. Then, I think we can merge this and see how it goes. I'll update the release notes when merging", "author": "oowekyala", "createdAt": "2020-03-20T13:04:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNzE1NA=="}], "type": "inlineReview", "revised_code": {"commit": "514a524e6f9071b074ee569bee6a656d3c868907", "chunk": "diff --git a/pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/xpath/SaxonXPathRuleQuery.java b/pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/xpath/SaxonXPathRuleQuery.java\nindex 64a1d28635..73cf58eb02 100644\n--- a/pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/xpath/SaxonXPathRuleQuery.java\n+++ b/pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/xpath/SaxonXPathRuleQuery.java\n\n@@ -264,14 +262,7 @@ public class SaxonXPathRuleQuery extends AbstractXPathRuleQuery {\n         boolean useRuleChain = true;\n \n         // First step: Split the union venn expressions into single expressions\n-        List<Expression> subexpressions = new ArrayList<>();\n-        SplitUnions unions = new SplitUnions();\n-        unions.visit(expr);\n-        if (unions.getExpressions().isEmpty()) {\n-            subexpressions.add(expr);\n-        } else {\n-            subexpressions.addAll(unions.getExpressions());\n-        }\n+        Iterable<Expression> subexpressions = RuleChainAnalyzer.splitUnions(expr);\n \n         // Second step: Analyze each expression separately\n         for (Expression subexpression : subexpressions) {\n"}}, {"oid": "514a524e6f9071b074ee569bee6a656d3c868907", "url": "https://github.com/pmd/pmd/commit/514a524e6f9071b074ee569bee6a656d3c868907", "message": "Checkstyle", "committedDate": "2020-03-19T18:22:35Z", "type": "commit"}, {"oid": "a899a2535065f42651dcb6d265a2ab4a29ff0aae", "url": "https://github.com/pmd/pmd/commit/a899a2535065f42651dcb6d265a2ab4a29ff0aae", "message": "Fix expr normalization when ids are negative", "committedDate": "2020-03-19T18:29:13Z", "type": "commit"}]}