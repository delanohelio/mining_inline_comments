{"pr_number": 1043, "pr_title": "Feature/grafana", "pr_createdAt": "2020-02-18T16:33:12Z", "pr_url": "https://github.com/bakdata/conquery/pull/1043", "timeline": [{"oid": "4440382c930823187cc6c56d0d610764097819cc", "url": "https://github.com/bakdata/conquery/commit/4440382c930823187cc6c56d0d610764097819cc", "message": "metrics", "committedDate": "2020-02-17T10:59:50Z", "type": "commit"}, {"oid": "c7128781d7ef96752b503618920c6b02ce25dcbd", "url": "https://github.com/bakdata/conquery/commit/c7128781d7ef96752b503618920c6b02ce25dcbd", "message": "metrics for Query execution", "committedDate": "2020-02-17T16:25:21Z", "type": "commit"}, {"oid": "b93d75dcc787aecec42ee0c92b70ab9e17f1b05e", "url": "https://github.com/bakdata/conquery/commit/b93d75dcc787aecec42ee0c92b70ab9e17f1b05e", "message": "metered annotations for API classes", "committedDate": "2020-02-17T16:25:40Z", "type": "commit"}, {"oid": "afb136890b0a860e92b7f903c65cd266e5c809c1", "url": "https://github.com/bakdata/conquery/commit/afb136890b0a860e92b7f903c65cd266e5c809c1", "message": "Metrics for Jobs", "committedDate": "2020-02-18T14:17:17Z", "type": "commit"}, {"oid": "12a4fc19a6d82fe49f7d8003f728df50bcfb9865", "url": "https://github.com/bakdata/conquery/commit/12a4fc19a6d82fe49f7d8003f728df50bcfb9865", "message": "remove registry as parameter and instead rely on shared registry", "committedDate": "2020-02-18T16:31:37Z", "type": "commit"}, {"oid": "b7ceeab98d3693a975a30b295d3b886587159f26", "url": "https://github.com/bakdata/conquery/commit/b7ceeab98d3693a975a30b295d3b886587159f26", "message": "Fixed DefaultAuthFilter having Priority=5000 (by way of default value)", "committedDate": "2020-02-19T12:46:15Z", "type": "commit"}, {"oid": "5c999e1c58f5d417ad1cd9055291cac2d50254d0", "url": "https://github.com/bakdata/conquery/commit/5c999e1c58f5d417ad1cd9055291cac2d50254d0", "message": "Fixed DefaultInitialUserRealm not removing initial 'Bearer' prefix", "committedDate": "2020-02-19T12:46:48Z", "type": "commit"}, {"oid": "7ee34259e6fa52bdd460eb65f19ab017ff6a454b", "url": "https://github.com/bakdata/conquery/commit/7ee34259e6fa52bdd460eb65f19ab017ff6a454b", "message": "Added ActiveUsersFilter, counting the active users via Cache", "committedDate": "2020-02-19T12:47:47Z", "type": "commit"}, {"oid": "30a183b3ad06c52689d61621222bb860cef8583f", "url": "https://github.com/bakdata/conquery/commit/30a183b3ad06c52689d61621222bb860cef8583f", "message": "Merge 7ee34259e6fa52bdd460eb65f19ab017ff6a454b into 5069bf6e15c95229661b99828bbab56c7be45647", "committedDate": "2020-02-19T12:47:58Z", "type": "commit"}, {"oid": "1e4ecfa0b4dae48d2783ee776dfd774b63600366", "url": "https://github.com/bakdata/conquery/commit/1e4ecfa0b4dae48d2783ee776dfd774b63600366", "message": "automatic update to docs", "committedDate": "2020-02-19T12:50:06Z", "type": "commit"}, {"oid": "a030d7dfedfd38e00f2dabb21220eae5d46de2e2", "url": "https://github.com/bakdata/conquery/commit/a030d7dfedfd38e00f2dabb21220eae5d46de2e2", "message": "Metrics reporting of QueryExecution is now done for the whole tree.", "committedDate": "2020-02-19T14:51:45Z", "type": "commit"}, {"oid": "4b89b5665f5d6f5a4fefd8e0d845e123d242b43b", "url": "https://github.com/bakdata/conquery/commit/4b89b5665f5d6f5a4fefd8e0d845e123d242b43b", "message": "fixed naming", "committedDate": "2020-02-19T14:57:20Z", "type": "commit"}, {"oid": "82a71dcda6a787316432e6e92a9391e55bca97e7", "url": "https://github.com/bakdata/conquery/commit/82a71dcda6a787316432e6e92a9391e55bca97e7", "message": "Merge remote-tracking branch 'origin/feature/grafana' into feature/grafana", "committedDate": "2020-02-19T14:57:32Z", "type": "commit"}, {"oid": "f35e30a64bb2e754c1970ca697a94c8e15f1fb67", "url": "https://github.com/bakdata/conquery/commit/f35e30a64bb2e754c1970ca697a94c8e15f1fb67", "message": "Fixed not cleaning up Grafana Gauge.", "committedDate": "2020-02-24T10:50:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM4NTAzNA==", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r386385034", "bodyText": "Ich glaube hier ist ein unn\u00f6tiges Klammerpaar", "author": "thoniTUB", "createdAt": "2020-03-02T13:15:56Z", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/web/ActiveUsersFilter.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.bakdata.conquery.models.auth.web;\n+\n+import java.io.IOException;\n+import java.security.Principal;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Priority;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.PreMatching;\n+\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.AuthorizationHelper;\n+import com.bakdata.conquery.models.auth.entities.Group;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.config.ConqueryConfig;\n+import com.codahale.metrics.SharedMetricRegistries;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import lombok.RequiredArgsConstructor;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+@PreMatching\n+// Chain this filter after the Authentication filter\n+@Priority(2000)\n+@RequiredArgsConstructor\n+public class ActiveUsersFilter implements ContainerRequestFilter {\n+\n+\tprivate final MasterMetaStorage storage;\n+\n+\t/**\n+\t * Google cache managing evicition etc for us.\n+\t */\n+\tprivate final Cache<User, Boolean> activeUsers = CacheBuilder.newBuilder()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t   .expireAfterAccess(ConqueryConfig.getInstance().getMetricsConfig().getUserActiveHours(), TimeUnit.HOURS)\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.removalListener(notification -> decrementPrimaryGroupCount((User) notification.getKey()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build();\n+\n+\n+\n+\n+\tpublic void incrementPrimaryGroupCount(User user) {\n+\t\tfinal Group primaryGroup = AuthorizationHelper.getPrimaryGroup(user, storage);\n+\n+\t\t// Groups with less than three users are not tracked, for privacy reasons.\n+\t\tif(primaryGroup.getMembers().size() <= ConqueryConfig.getInstance().getMetricsConfig().getGroupTrackingMinSize())\n+\t\t\treturn;\n+\n+\t\tSharedMetricRegistries.getDefault().counter(primaryGroup.getName() + \".active\").inc();\n+\t}\n+\n+\tpublic void decrementPrimaryGroupCount(User user) {\n+\t\tfinal Group primaryGroup = AuthorizationHelper.getPrimaryGroup(user, storage);\n+\n+\t\t// Groups with less than three users are not tracked.\n+\t\tif(primaryGroup.getMembers().size() <= ConqueryConfig.getInstance().getMetricsConfig().getGroupTrackingMinSize())\n+\t\t\treturn;\n+\n+\t\tSharedMetricRegistries.getDefault().counter(primaryGroup.getName() + \".active\").dec();\n+\t}\n+\n+\n+\t@SneakyThrows\n+\t@Override\n+\tpublic void filter(ContainerRequestContext requestContext) throws IOException {\n+\t\tfinal Principal userPrincipal = requestContext.getSecurityContext().getUserPrincipal();\n+\n+\t\tif(userPrincipal == null){\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tactiveUsers.get(((User) userPrincipal), () -> {", "originalCommit": "f35e30a64bb2e754c1970ca697a94c8e15f1fb67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfe4ddf7d33b2ce55d8e75e8d5e900ee57c7d960", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/auth/web/ActiveUsersFilter.java b/backend/src/main/java/com/bakdata/conquery/models/auth/web/ActiveUsersFilter.java\nindex c0fa5de03..6067f6a5f 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/auth/web/ActiveUsersFilter.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/auth/web/ActiveUsersFilter.java\n\n@@ -71,7 +71,7 @@ public class ActiveUsersFilter implements ContainerRequestFilter {\n \t\t\treturn;\n \t\t}\n \n-\t\tactiveUsers.get(((User) userPrincipal), () -> {\n+\t\tactiveUsers.get((User) userPrincipal, () -> {\n \t\t\tincrementPrimaryGroupCount((User) userPrincipal);\n \t\t\treturn true;\n \t\t});\n"}}, {"oid": "dfe4ddf7d33b2ce55d8e75e8d5e900ee57c7d960", "url": "https://github.com/bakdata/conquery/commit/dfe4ddf7d33b2ce55d8e75e8d5e900ee57c7d960", "message": "Update ActiveUsersFilter.java", "committedDate": "2020-03-02T13:27:44Z", "type": "commit"}, {"oid": "313844ee592f1115e4b40c25b4512f34125a33dc", "url": "https://github.com/bakdata/conquery/commit/313844ee592f1115e4b40c25b4512f34125a33dc", "message": "Update ConqueryMetricsConfig.java", "committedDate": "2020-03-02T13:29:01Z", "type": "commit"}, {"oid": "2d2248040772f82aaa817fec0edbdb8a5fd20c1f", "url": "https://github.com/bakdata/conquery/commit/2d2248040772f82aaa817fec0edbdb8a5fd20c1f", "message": "Merge branch 'develop' into feature/grafana", "committedDate": "2020-03-04T11:08:55Z", "type": "commit"}, {"oid": "ae391108472944219918feb3db48146754daca8a", "url": "https://github.com/bakdata/conquery/commit/ae391108472944219918feb3db48146754daca8a", "message": "Merge remote-tracking branch 'origin/develop' into feature/grafana\n\n# Conflicts:\n#\tbackend/src/main/java/com/bakdata/conquery/models/query/QueryManager.java\n#\tbackend/src/main/java/com/bakdata/conquery/resources/api/FilterResource.java\n#\tdocs/Config JSON.md", "committedDate": "2020-03-16T14:05:14Z", "type": "commit"}, {"oid": "a5462701711af2541c68662bc3df498a0c23cd7c", "url": "https://github.com/bakdata/conquery/commit/a5462701711af2541c68662bc3df498a0c23cd7c", "message": "removed duplicate handling of finish", "committedDate": "2020-03-16T14:06:56Z", "type": "commit"}, {"oid": "67a5167c90257062ee97101ce1b6f31c6d0592bb", "url": "https://github.com/bakdata/conquery/commit/67a5167c90257062ee97101ce1b6f31c6d0592bb", "message": "fixed not properly setting state in finish method.", "committedDate": "2020-03-16T15:43:52Z", "type": "commit"}, {"oid": "9771ad8b2301f5f0a0d1e194b72838103c2bc31b", "url": "https://github.com/bakdata/conquery/commit/9771ad8b2301f5f0a0d1e194b72838103c2bc31b", "message": "Merge branch 'develop' into feature/grafana", "committedDate": "2020-03-16T15:49:50Z", "type": "commit"}, {"oid": "c9207c09cd66d6f0084576b0d9fdc0d40e033382", "url": "https://github.com/bakdata/conquery/commit/c9207c09cd66d6f0084576b0d9fdc0d40e033382", "message": "Update AutoDoc.java", "committedDate": "2020-03-16T16:03:36Z", "type": "commit"}, {"oid": "cc4611388c9c3a30289b44cba9d8627328e04e6f", "url": "https://github.com/bakdata/conquery/commit/cc4611388c9c3a30289b44cba9d8627328e04e6f", "message": "Merge branch 'develop' into feature/grafana", "committedDate": "2020-03-16T16:03:48Z", "type": "commit"}, {"oid": "8c1d593d25673e83a72b128b963e2c3e3b5ac550", "url": "https://github.com/bakdata/conquery/commit/8c1d593d25673e83a72b128b963e2c3e3b5ac550", "message": "Update azure-test.yml", "committedDate": "2020-03-16T16:06:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEyNTgzMw==", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r393125833", "bodyText": "Cool gel\u00f6st!", "author": "thoniTUB", "createdAt": "2020-03-16T15:50:58Z", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/web/ActiveUsersFilter.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.bakdata.conquery.models.auth.web;\n+\n+import java.io.IOException;\n+import java.security.Principal;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Priority;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.PreMatching;\n+\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.AuthorizationHelper;\n+import com.bakdata.conquery.models.auth.entities.Group;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.config.ConqueryConfig;\n+import com.codahale.metrics.SharedMetricRegistries;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import lombok.RequiredArgsConstructor;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+@PreMatching\n+// Chain this filter after the Authentication filter\n+@Priority(2000)\n+@RequiredArgsConstructor\n+public class ActiveUsersFilter implements ContainerRequestFilter {\n+\n+\tprivate final MasterMetaStorage storage;\n+\n+\t/**\n+\t * Google cache managing evicition etc for us.\n+\t */\n+\tprivate final Cache<User, Boolean> activeUsers = CacheBuilder.newBuilder()", "originalCommit": "9771ad8b2301f5f0a0d1e194b72838103c2bc31b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f94cbf9a014c998585b2d147a88834f5cdbbb812", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/auth/web/ActiveUsersFilter.java b/backend/src/main/java/com/bakdata/conquery/metrics/ActiveUsersFilter.java\nsimilarity index 98%\nrename from backend/src/main/java/com/bakdata/conquery/models/auth/web/ActiveUsersFilter.java\nrename to backend/src/main/java/com/bakdata/conquery/metrics/ActiveUsersFilter.java\nindex 6067f6a5f..5666ce172 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/auth/web/ActiveUsersFilter.java\n+++ b/backend/src/main/java/com/bakdata/conquery/metrics/ActiveUsersFilter.java\n\n@@ -1,4 +1,4 @@\n-package com.bakdata.conquery.models.auth.web;\n+package com.bakdata.conquery.metrics;\n \n import java.io.IOException;\n import java.security.Principal;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEyNjQwNw==", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r393126407", "bodyText": "zweimal \".active\" -> Konstante", "author": "thoniTUB", "createdAt": "2020-03-16T15:51:46Z", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/web/ActiveUsersFilter.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.bakdata.conquery.models.auth.web;\n+\n+import java.io.IOException;\n+import java.security.Principal;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Priority;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.PreMatching;\n+\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.AuthorizationHelper;\n+import com.bakdata.conquery.models.auth.entities.Group;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.config.ConqueryConfig;\n+import com.codahale.metrics.SharedMetricRegistries;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import lombok.RequiredArgsConstructor;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+@PreMatching\n+// Chain this filter after the Authentication filter\n+@Priority(2000)\n+@RequiredArgsConstructor\n+public class ActiveUsersFilter implements ContainerRequestFilter {\n+\n+\tprivate final MasterMetaStorage storage;\n+\n+\t/**\n+\t * Google cache managing evicition etc for us.\n+\t */\n+\tprivate final Cache<User, Boolean> activeUsers = CacheBuilder.newBuilder()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t   .expireAfterAccess(ConqueryConfig.getInstance().getMetricsConfig().getUserActiveHours(), TimeUnit.HOURS)\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.removalListener(notification -> decrementPrimaryGroupCount((User) notification.getKey()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build();\n+\n+\n+\n+\n+\tpublic void incrementPrimaryGroupCount(User user) {\n+\t\tfinal Group primaryGroup = AuthorizationHelper.getPrimaryGroup(user, storage);\n+\n+\t\t// Groups with less than three users are not tracked, for privacy reasons.\n+\t\tif(primaryGroup.getMembers().size() <= ConqueryConfig.getInstance().getMetricsConfig().getGroupTrackingMinSize())\n+\t\t\treturn;\n+\n+\t\tSharedMetricRegistries.getDefault().counter(primaryGroup.getName() + \".active\").inc();", "originalCommit": "9771ad8b2301f5f0a0d1e194b72838103c2bc31b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f94cbf9a014c998585b2d147a88834f5cdbbb812", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/auth/web/ActiveUsersFilter.java b/backend/src/main/java/com/bakdata/conquery/metrics/ActiveUsersFilter.java\nsimilarity index 98%\nrename from backend/src/main/java/com/bakdata/conquery/models/auth/web/ActiveUsersFilter.java\nrename to backend/src/main/java/com/bakdata/conquery/metrics/ActiveUsersFilter.java\nindex 6067f6a5f..5666ce172 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/auth/web/ActiveUsersFilter.java\n+++ b/backend/src/main/java/com/bakdata/conquery/metrics/ActiveUsersFilter.java\n\n@@ -1,4 +1,4 @@\n-package com.bakdata.conquery.models.auth.web;\n+package com.bakdata.conquery.metrics;\n \n import java.io.IOException;\n import java.security.Principal;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEyNjcwOA==", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r393126708", "bodyText": "Danke :)", "author": "thoniTUB", "createdAt": "2020-03-16T15:52:11Z", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/develop/DefaultInitialUserRealm.java", "diffHunk": "@@ -88,9 +88,12 @@ public AuthenticationToken extractToken(ContainerRequestContext requestContext)\n \t\t\tuid = requestContext.getUriInfo().getQueryParameters().getFirst(UID_QUERY_STRING_PARAMETER);\n \t\t}\n \n+\n \t\tUserId userId = null;\n \n \t\tif (StringUtils.isNotEmpty(uid)) {\n+\t\t\tuid = uid.replaceFirst(\"^Bearer \", \"\");", "originalCommit": "9771ad8b2301f5f0a0d1e194b72838103c2bc31b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEyNzY5NQ==", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r393127695", "bodyText": "Danke nochmals!", "author": "thoniTUB", "createdAt": "2020-03-16T15:53:37Z", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/web/DefaultAuthFilter.java", "diffHunk": "@@ -35,6 +37,7 @@\n @Slf4j\n @PreMatching\n @RequiredArgsConstructor(access = AccessLevel.PRIVATE)\n+@Priority(Priorities.AUTHENTICATION)", "originalCommit": "9771ad8b2301f5f0a0d1e194b72838103c2bc31b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzMTI0Mw==", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r393131243", "bodyText": "Da fehlt noch ein decrement f\u00fcr diese Metric oder?", "author": "thoniTUB", "createdAt": "2020-03-16T15:58:29Z", "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -107,27 +108,26 @@ public ManagedExecutionId createId() {\n \t\treturn new ManagedExecutionId(dataset, queryId);\n \t}\n \n-\tprotected void fail() {\n-\t\tsynchronized (execution) {\n-\t\t\tstate = ExecutionState.FAILED;\n-\t\t\tfinishTime = LocalDateTime.now();\n-\t\t\texecution.countDown();\n-\t\t}\n+\tprotected void fail(MasterMetaStorage storage) {\n+\t\tfinish(storage, ExecutionState.FAILED);\n \t}\n \n \tpublic void start() {\n+\t\tSharedMetricRegistries.getDefault().counter(\"queries.running\").inc();", "originalCommit": "9771ad8b2301f5f0a0d1e194b72838103c2bc31b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzMjQ5Mw==", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r393132493", "bodyText": "Wenn ja, dann ist es vielleicht besser eine Konstante f\u00fcr die metric zu haben", "author": "thoniTUB", "createdAt": "2020-03-16T16:00:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzMTI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f94cbf9a014c998585b2d147a88834f5cdbbb812", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java b/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\nindex 8cb9fc855..13e0d98d3 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\n\n@@ -113,7 +113,7 @@ public abstract class ManagedExecution<R extends ShardResult> extends Identifiab\n \t}\n \n \tpublic void start() {\n-\t\tSharedMetricRegistries.getDefault().counter(\"queries.running\").inc();\n+\t\tExecutionMetrics.getRunningQueriesCounter().inc();\n \n \t\tstartTime = LocalDateTime.now();\n \t\tstate = ExecutionState.RUNNING;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzNDI0Ng==", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r393134246", "bodyText": "Werden failed executions auch dem Nutzer im Frontend angezeigt?", "author": "thoniTUB", "createdAt": "2020-03-16T16:02:46Z", "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -107,27 +108,26 @@ public ManagedExecutionId createId() {\n \t\treturn new ManagedExecutionId(dataset, queryId);\n \t}\n \n-\tprotected void fail() {\n-\t\tsynchronized (execution) {\n-\t\t\tstate = ExecutionState.FAILED;\n-\t\t\tfinishTime = LocalDateTime.now();\n-\t\t\texecution.countDown();\n-\t\t}\n+\tprotected void fail(MasterMetaStorage storage) {\n+\t\tfinish(storage, ExecutionState.FAILED);\n \t}\n \n \tpublic void start() {\n+\t\tSharedMetricRegistries.getDefault().counter(\"queries.running\").inc();\n+\n \t\tstartTime = LocalDateTime.now();\n \t\tstate = ExecutionState.RUNNING;\n \t}\n \n-\tprotected void finish(@NonNull MasterMetaStorage storage) {\n+\tprotected void finish(@NonNull MasterMetaStorage storage, ExecutionState executionState) {\n \t\tif (getState() == ExecutionState.NEW)\n \t\t\tlog.error(\"Query {} was never run.\", getId());\n \n \t\tsynchronized (execution) {\n \t\t\tfinishTime = LocalDateTime.now();\n-\t\t\tstate = ExecutionState.DONE;\n \t\t\texecution.countDown();\n+\t\t\tsetState(executionState);\n+\n \t\t\ttry {\n \t\t\t\tstorage.updateExecution(this);", "originalCommit": "9771ad8b2301f5f0a0d1e194b72838103c2bc31b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzNzQ1MQ==", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r393137451", "bodyText": "Ansonsten speicher die Query nur ab wenn auch ein Storage reingereicht wird", "author": "thoniTUB", "createdAt": "2020-03-16T16:07:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzNDI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f94cbf9a014c998585b2d147a88834f5cdbbb812", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java b/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\nindex 8cb9fc855..13e0d98d3 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\n\n@@ -113,7 +113,7 @@ public abstract class ManagedExecution<R extends ShardResult> extends Identifiab\n \t}\n \n \tpublic void start() {\n-\t\tSharedMetricRegistries.getDefault().counter(\"queries.running\").inc();\n+\t\tExecutionMetrics.getRunningQueriesCounter().inc();\n \n \t\tstartTime = LocalDateTime.now();\n \t\tstate = ExecutionState.RUNNING;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzNTc0NA==", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r393135744", "bodyText": "typo lfast", "author": "thoniTUB", "createdAt": "2020-03-16T16:04:53Z", "path": "backend/src/main/java/com/bakdata/conquery/models/jobs/JobManager.java", "diffHunk": "@@ -12,11 +12,11 @@\n public class JobManager implements Managed {\n \tprivate final JobExecutor slowExecutor;\n \tprivate final JobExecutor fastExecutor;\n-\t\n-\t\n+\n+\n \tpublic JobManager(String labelSuffix) {\n-\t\tslowExecutor = new JobExecutor(\"slow \"+labelSuffix);\n-\t\tfastExecutor = new JobExecutor(\"fast \"+labelSuffix);\n+\t\tslowExecutor = new JobExecutor(\"Job Manager slow \" + labelSuffix);\n+\t\tfastExecutor = new JobExecutor(\"Job Manager lfast \" + labelSuffix);", "originalCommit": "cc4611388c9c3a30289b44cba9d8627328e04e6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzNjc5Mw==", "url": "https://github.com/bakdata/conquery/pull/1043#discussion_r393136793", "bodyText": "\ud83d\udc4d", "author": "thoniTUB", "createdAt": "2020-03-16T16:06:28Z", "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java", "diffHunk": "@@ -43,6 +43,7 @@ public void react(Worker context) throws Exception {\n \t\t} catch (Exception e) {\n \t\t\t// If one of the plans can not be created (maybe due to a Id that references a non existing concept) fail the whole job.\n \t\t\tsendFailureToMaster(execution.getInitializedShardResult(null), execution, context, e);\n+\t\t\treturn;", "originalCommit": "cc4611388c9c3a30289b44cba9d8627328e04e6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "f94cbf9a014c998585b2d147a88834f5cdbbb812", "url": "https://github.com/bakdata/conquery/commit/f94cbf9a014c998585b2d147a88834f5cdbbb812", "message": "cleanup of Metrics consolidated into utility classes", "committedDate": "2020-03-16T16:33:27Z", "type": "commit"}, {"oid": "78ca005f876baac89e255721a61110fee3a9c3cc", "url": "https://github.com/bakdata/conquery/commit/78ca005f876baac89e255721a61110fee3a9c3cc", "message": "fixed Metrics usage to always use name creation method", "committedDate": "2020-03-16T16:36:08Z", "type": "commit"}, {"oid": "cd038b89792fba938aec8d2be2591edf429facd5", "url": "https://github.com/bakdata/conquery/commit/cd038b89792fba938aec8d2be2591edf429facd5", "message": "Merge remote-tracking branch 'origin/feature/grafana' into feature/grafana", "committedDate": "2020-03-16T16:36:26Z", "type": "commit"}]}