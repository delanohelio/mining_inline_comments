{"pr_number": 1064, "pr_title": "Feature/export form optional quarters", "pr_createdAt": "2020-03-04T15:46:51Z", "pr_url": "https://github.com/bakdata/conquery/pull/1064", "timeline": [{"oid": "3f2c2eb36438f114e2e37374d610f564cd5a3449", "url": "https://github.com/bakdata/conquery/commit/3f2c2eb36438f114e2e37374d610f564cd5a3449", "message": "creates specified date subdivision and also larger if flag is set", "committedDate": "2020-03-04T15:31:38Z", "type": "commit"}, {"oid": "22eb60f22b5d06f9644035078c1dd810530594da", "url": "https://github.com/bakdata/conquery/commit/22eb60f22b5d06f9644035078c1dd810530594da", "message": "Merge 3f2c2eb36438f114e2e37374d610f564cd5a3449 into f1ef55ff96707ab1adf1264890ad2fec37c4dfeb", "committedDate": "2020-03-04T15:46:53Z", "type": "commit"}, {"oid": "dc5029a58357eecf6e65be7be908bbd73c605b2e", "url": "https://github.com/bakdata/conquery/commit/dc5029a58357eecf6e65be7be908bbd73c605b2e", "message": "automatic update to docs", "committedDate": "2020-03-04T15:49:02Z", "type": "commit"}, {"oid": "e63a5a29720dc13aa51fdfa31ca5cc2bfc0e6acc", "url": "https://github.com/bakdata/conquery/commit/e63a5a29720dc13aa51fdfa31ca5cc2bfc0e6acc", "message": "Merge branch 'develop' into feature/export-form-optional-quarters", "committedDate": "2020-03-09T15:23:23Z", "type": "commit"}, {"oid": "e651a7349e5a481e4803f2177fe0f99ab22c11a4", "url": "https://github.com/bakdata/conquery/commit/e651a7349e5a481e4803f2177fe0f99ab22c11a4", "message": "adds extra column to form results", "committedDate": "2020-03-10T12:48:45Z", "type": "commit"}, {"oid": "01df1e578980a124c880f7f91eff7757a037e4ae", "url": "https://github.com/bakdata/conquery/commit/01df1e578980a124c880f7f91eff7757a037e4ae", "message": "Merge e651a7349e5a481e4803f2177fe0f99ab22c11a4 into 51bec8832ce1119f4a2926367d5cbc642cfb16cd", "committedDate": "2020-03-10T12:48:55Z", "type": "commit"}, {"oid": "12df4c40e9c9e600bd7d3d2cbaa1eba9b2a576c1", "url": "https://github.com/bakdata/conquery/commit/12df4c40e9c9e600bd7d3d2cbaa1eba9b2a576c1", "message": "automatic update to docs", "committedDate": "2020-03-10T12:51:09Z", "type": "commit"}, {"oid": "f0782ad12d93539f7ddf54724cc219e452158249", "url": "https://github.com/bakdata/conquery/commit/f0782ad12d93539f7ddf54724cc219e452158249", "message": "adds locale to printsettings", "committedDate": "2020-03-10T14:05:02Z", "type": "commit"}, {"oid": "385fb42995bbaf20f07ec17ba410d8acbac43206", "url": "https://github.com/bakdata/conquery/commit/385fb42995bbaf20f07ec17ba410d8acbac43206", "message": "Merge branch 'feature/export-form-optional-quarters' of https://github.com/bakdata/conquery into feature/export-form-optional-quarters", "committedDate": "2020-03-10T14:05:15Z", "type": "commit"}, {"oid": "c9594323b503186a8215068fcc7373592d6a820c", "url": "https://github.com/bakdata/conquery/commit/c9594323b503186a8215068fcc7373592d6a820c", "message": "adds localization for resolution column in output", "committedDate": "2020-03-11T08:04:37Z", "type": "commit"}, {"oid": "f9155aeef2fcd152854aeebd6ce9f8aced5a2fd8", "url": "https://github.com/bakdata/conquery/commit/f9155aeef2fcd152854aeebd6ce9f8aced5a2fd8", "message": "fixes result column in relative export form", "committedDate": "2020-03-11T13:32:06Z", "type": "commit"}, {"oid": "28bed02e0718d66268e44f00c729d676cd46ee6f", "url": "https://github.com/bakdata/conquery/commit/28bed02e0718d66268e44f00c729d676cd46ee6f", "message": "adds temporal subdivision feature to relative form", "committedDate": "2020-03-11T16:55:52Z", "type": "commit"}, {"oid": "a8821ccd302996d73efc3af1015834b356b03ab4", "url": "https://github.com/bakdata/conquery/commit/a8821ccd302996d73efc3af1015834b356b03ab4", "message": "Merge 28bed02e0718d66268e44f00c729d676cd46ee6f into c8b332ea8eeaa5e10e0cb6013b4fc72bb94bea56", "committedDate": "2020-03-11T16:56:02Z", "type": "commit"}, {"oid": "e31e87e286bce8dec326a5807d1ebb9d228d4f14", "url": "https://github.com/bakdata/conquery/commit/e31e87e286bce8dec326a5807d1ebb9d228d4f14", "message": "automatic update to docs", "committedDate": "2020-03-11T16:58:04Z", "type": "commit"}, {"oid": "2e378828dc2312c919a7597ccb8550d133c7c757", "url": "https://github.com/bakdata/conquery/commit/2e378828dc2312c919a7597ccb8550d133c7c757", "message": "fixes frontend resolution members", "committedDate": "2020-03-12T14:44:51Z", "type": "commit"}, {"oid": "1f392ea129be42ac14cadbeb9bb256722b0d5b61", "url": "https://github.com/bakdata/conquery/commit/1f392ea129be42ac14cadbeb9bb256722b0d5b61", "message": "Merge branch 'develop' into feature/export-form-optional-quarters\n\n# Conflicts:\n#\tautodoc/src/main/java/com/bakdata/conquery/Constants.java\n#\tautodoc/src/main/java/com/bakdata/conquery/handler/GroupHandler.java\n#\tdocs/REST API JSONs.md", "committedDate": "2020-03-12T14:53:54Z", "type": "commit"}, {"oid": "6e962043648a6237490a9bb9885c23d05517f0d4", "url": "https://github.com/bakdata/conquery/commit/6e962043648a6237490a9bb9885c23d05517f0d4", "message": "Merge branch 'develop' into feature/export-form-optional-quarters\n\n# Conflicts:\n#\tautodoc/src/main/java/com/bakdata/conquery/Constants.java\n#\tautodoc/src/main/java/com/bakdata/conquery/handler/GroupHandler.java\n#\tbackend/src/main/java/com/bakdata/conquery/apiv1/forms/export_form/ExportForm.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQuery.java\n#\tdocs/REST API JSONs.md", "committedDate": "2020-03-16T11:52:56Z", "type": "commit"}, {"oid": "e47fcdb48c5008a18ebbd418a951a3192591a74a", "url": "https://github.com/bakdata/conquery/commit/e47fcdb48c5008a18ebbd418a951a3192591a74a", "message": "removes redundant null check, that caused compiler error in eclipse", "committedDate": "2020-03-16T11:57:26Z", "type": "commit"}, {"oid": "37401ead19f707fae5f4582022fb331eeb190ded", "url": "https://github.com/bakdata/conquery/commit/37401ead19f707fae5f4582022fb331eeb190ded", "message": "Merge branch 'develop' into feature/export-form-optional-quarters\n\n# Conflicts:\n#\tbackend/src/test/resources/tests/form/EXPORT_FORM/ABSOLUT/SIMPLE/expected.csv\n#\tbackend/src/test/resources/tests/form/EXPORT_FORM/RELATIVE/expected.csv", "committedDate": "2020-03-16T12:52:40Z", "type": "commit"}, {"oid": "6b80d8b5502a30ca654aec11fe0eba6e6405b5e8", "url": "https://github.com/bakdata/conquery/commit/6b80d8b5502a30ca654aec11fe0eba6e6405b5e8", "message": "Merge branch 'develop' into feature/export-form-optional-quarters\n\n# Conflicts:\n#\tautodoc/src/main/java/com/bakdata/conquery/handler/GroupHandler.java", "committedDate": "2020-03-17T16:22:02Z", "type": "commit"}, {"oid": "6bbbbe167f30ec4c2b9b801a6fad2c4a0ca0b6a8", "url": "https://github.com/bakdata/conquery/commit/6bbbbe167f30ec4c2b9b801a6fad2c4a0ca0b6a8", "message": "organize imports autodoc", "committedDate": "2020-03-18T15:30:17Z", "type": "commit"}, {"oid": "75c8a8f7730b59bced257156b96bc7a76a635da7", "url": "https://github.com/bakdata/conquery/commit/75c8a8f7730b59bced257156b96bc7a76a635da7", "message": "Merge branch 'develop' into feature/export-form-optional-quarters", "committedDate": "2020-03-18T15:32:43Z", "type": "commit"}, {"oid": "e7ca9b1e476410a06021ee1d03625a8a2fd3b4ad", "url": "https://github.com/bakdata/conquery/commit/e7ca9b1e476410a06021ee1d03625a8a2fd3b4ad", "message": "adds ClassToIntanceMap to GroupHandler", "committedDate": "2020-03-18T16:39:18Z", "type": "commit"}, {"oid": "2d469a163c4d9941cafd68e0b314d4f3ee1c4621", "url": "https://github.com/bakdata/conquery/commit/2d469a163c4d9941cafd68e0b314d4f3ee1c4621", "message": "Merge e7ca9b1e476410a06021ee1d03625a8a2fd3b4ad into 5ebe12e9ff340aeaffc1908ad01449b8d5de4b19", "committedDate": "2020-03-18T16:39:30Z", "type": "commit"}, {"oid": "bbfabb56fca327c69902aeb4c9af2e5651ecb1e4", "url": "https://github.com/bakdata/conquery/commit/bbfabb56fca327c69902aeb4c9af2e5651ecb1e4", "message": "automatic update to docs", "committedDate": "2020-03-18T16:41:05Z", "type": "commit"}, {"oid": "a7ec72d6b45eb1b93366882414739a18be1494fa", "url": "https://github.com/bakdata/conquery/commit/a7ec72d6b45eb1b93366882414739a18be1494fa", "message": "fixes handling of complete range in reletive form query", "committedDate": "2020-03-18T17:30:47Z", "type": "commit"}, {"oid": "e2dbb04c70834b598d6a14cab9c137d6be21c768", "url": "https://github.com/bakdata/conquery/commit/e2dbb04c70834b598d6a14cab9c137d6be21c768", "message": "Merge branch 'feature/export-form-optional-quarters' of https://github.com/bakdata/conquery into feature/export-form-optional-quarters", "committedDate": "2020-03-18T17:30:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg1NzMzMg==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394857332", "bodyText": "da hast du was vergessen", "author": "awildturtok", "createdAt": "2020-03-19T08:24:27Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);", "originalCommit": "e2dbb04c70834b598d6a14cab9c137d6be21c768", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b543236737aeaca660d5cb61e553d26a2c4d8fb1", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java b/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java\nindex 87487a7ef..2a59498b5 100644\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java\n+++ b/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java\n\n@@ -1,15 +1,13 @@\n package com.bakdata.conquery.apiv1.forms;\n \n-import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.Locale;\n-import java.util.ResourceBundle;\n \n-import com.bakdata.conquery.io.HasResourceBundle;\n+import c10n.C10N;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n-import org.apache.commons.collections4.list.UnmodifiableList;\n import org.apache.commons.lang3.ArrayUtils;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg1ODczNg==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394858736", "bodyText": "l\u00f6schen", "author": "awildturtok", "createdAt": "2020-03-19T08:27:20Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);\n+\t\t\treturn List.of(range);\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\t};\n+\t\n+//\tThis causes a runtime error at the moment. See workaround below.", "originalCommit": "e2dbb04c70834b598d6a14cab9c137d6be21c768", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b543236737aeaca660d5cb61e553d26a2c4d8fb1", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java b/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java\nindex 87487a7ef..2a59498b5 100644\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java\n+++ b/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java\n\n@@ -1,15 +1,13 @@\n package com.bakdata.conquery.apiv1.forms;\n \n-import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.Locale;\n-import java.util.ResourceBundle;\n \n-import com.bakdata.conquery.io.HasResourceBundle;\n+import c10n.C10N;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n-import org.apache.commons.collections4.list.UnmodifiableList;\n import org.apache.commons.lang3.ArrayUtils;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg1OTYyNw==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394859627", "bodyText": "ouch", "author": "awildturtok", "createdAt": "2020-03-19T08:29:02Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);\n+\t\t\treturn List.of(range);\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\t};\n+\t\n+//\tThis causes a runtime error at the moment. See workaround below.\n+//\tprivate DateContextMode() {\n+//\t\tList<DateContextMode> list = new ArrayList<>();\n+//\t\tDateContextMode current = this;\n+//\t\tdo {\n+//\t\t\tlist.add(current);\n+//\t\t\tcurrent = getNextCoarserSubdivision(current);\n+//\t\t}while(current != null);\n+//\t\t\n+//\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+//\t}\n+\t\n+\tprivate List<DateContextMode> thisAndCoarserSubdivisions;\n+\t\n+\t/**\n+\t * WORKAROUND because the eclipse compiler has bug similar to this one:\n+\t * https://bugs.eclipse.org/bugs/show_bug.cgi?id=81454", "originalCommit": "e2dbb04c70834b598d6a14cab9c137d6be21c768", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b543236737aeaca660d5cb61e553d26a2c4d8fb1", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java b/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java\nindex 87487a7ef..2a59498b5 100644\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java\n+++ b/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java\n\n@@ -1,15 +1,13 @@\n package com.bakdata.conquery.apiv1.forms;\n \n-import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.Locale;\n-import java.util.ResourceBundle;\n \n-import com.bakdata.conquery.io.HasResourceBundle;\n+import c10n.C10N;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n-import org.apache.commons.collections4.list.UnmodifiableList;\n import org.apache.commons.lang3.ArrayUtils;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDQwMA==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394860400", "bodyText": "Find ich cute, aber k\u00f6nntest du auch fast \u00fcber ein privates Feld l\u00f6sen, dass du in der declaration setzt.", "author": "awildturtok", "createdAt": "2020-03-19T08:30:38Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);\n+\t\t\treturn List.of(range);\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\t};\n+\t\n+//\tThis causes a runtime error at the moment. See workaround below.\n+//\tprivate DateContextMode() {\n+//\t\tList<DateContextMode> list = new ArrayList<>();\n+//\t\tDateContextMode current = this;\n+//\t\tdo {\n+//\t\t\tlist.add(current);\n+//\t\t\tcurrent = getNextCoarserSubdivision(current);\n+//\t\t}while(current != null);\n+//\t\t\n+//\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+//\t}\n+\t\n+\tprivate List<DateContextMode> thisAndCoarserSubdivisions;\n+\t\n+\t/**\n+\t * WORKAROUND because the eclipse compiler has bug similar to this one:\n+\t * https://bugs.eclipse.org/bugs/show_bug.cgi?id=81454\n+\t */\n+\t@JsonIgnore\n+\tpublic List<DateContextMode> getThisAndCoarserSubdivisions(){\n+\t\tif (thisAndCoarserSubdivisions != null) {\n+\t\t\treturn thisAndCoarserSubdivisions;\n+\t\t}\n+\t\tList<DateContextMode> list = new ArrayList<>();\n+\t\tDateContextMode current = this;\n+\t\tdo {\n+\t\t\t// Sort from coarse to finer\n+\t\t\tlist.add(0,current);\n+\t\t\tcurrent = getNextCoarserSubdivision(current);\n+\t\t}while(current != null);\n+\t\t\n+\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+\t\treturn thisAndCoarserSubdivisions;\n+\t}\n+\t\n+\n+\tpublic List<CDateRange> subdivideRange(CDateRange range){\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\t\n+\tprivate static DateContextMode getNextCoarserSubdivision(DateContextMode mode) {\n+\t\tDateContextMode[] modes = DateContextMode.values();", "originalCommit": "e2dbb04c70834b598d6a14cab9c137d6be21c768", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMTQ5NQ==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395011495", "bodyText": "Also ich kann das hier machen und die Funktion weglassen:\n\t@Getter\n\t@JsonIgnore\n\tprivate DateContextMode[] thisAndCoarserSubdivisions;\n\n\t\n\t@JsonIgnore\n\tpublic DateContextMode[] getThisAndCoarserSubdivisions(){\n\t\tif (thisAndCoarserSubdivisions != null) {\n\t\t\treturn thisAndCoarserSubdivisions;\n\t\t}\n\t\tthisAndCoarserSubdivisions = org.apache.commons.lang3.ArrayUtils.subarray(DateContextMode.values(), 0, this.ordinal()+1);\n\t\treturn thisAndCoarserSubdivisions;\t\t\n\t}\n\nIch kann aber nicht in der Initialisierungsphase auf DateContextMode.values() zugreifen. Das gibt mit eine NullPointerException", "author": "thoniTUB", "createdAt": "2020-03-19T13:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDQwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNTE2NQ==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395015165", "bodyText": "@Getter\n\t@JsonIgnore\n\tprivate DateContextMode coarser;\n\n\t\n\t@JsonIgnore\n\tpublic DateContextMode[] getThisAndCoarserSubdivisions(){\n\t\tif (thisAndCoarserSubdivisions != null) {\n\t\t\treturn thisAndCoarserSubdivisions;\n\t\t}\n                return thisAndCoarserSubdivisions = coarser != null ? List.concat(List.of(this), coarser.getThisAndCoarserSubdivisions()) : List.of(this);\n\n\t}\n\n\nAber das mit ordinal - 1 geht eigentlich auch, wobei du da halt die reihenfolge beachten musst, was ok aber doof ist, machen wir auch woanders.  Du kannst in dem Schema von mir halt unterschiedliche Pfade gehen, wenn das interessant sein sollte (denke nicht tbh).", "author": "awildturtok", "createdAt": "2020-03-19T13:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDQwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNTMyMA==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395015320", "bodyText": "das ist pseudeocode fyi", "author": "awildturtok", "createdAt": "2020-03-19T13:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDQwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEwOTI1MQ==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395109251", "bodyText": "Aber wann setzt du coarser?", "author": "thoniTUB", "createdAt": "2020-03-19T15:22:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDQwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0Nzk4MA==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395147980", "bodyText": "Im Konstruktor des Enums, also noch nen RequiredArgsCtor dran pappen.\nBeispiel: com.bakdata.conquery.io.xodus.StoreInfo", "author": "awildturtok", "createdAt": "2020-03-19T16:15:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDQwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3MTAxNA==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395171014", "bodyText": "Ah okay, jetzt wei\u00df ich was du meinst ;)", "author": "thoniTUB", "createdAt": "2020-03-19T16:47:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDQwMA=="}], "type": "inlineReview", "revised_code": {"commit": "b543236737aeaca660d5cb61e553d26a2c4d8fb1", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java b/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java\nindex 87487a7ef..2a59498b5 100644\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java\n+++ b/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java\n\n@@ -1,15 +1,13 @@\n package com.bakdata.conquery.apiv1.forms;\n \n-import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.Locale;\n-import java.util.ResourceBundle;\n \n-import com.bakdata.conquery.io.HasResourceBundle;\n+import c10n.C10N;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n-import org.apache.commons.collections4.list.UnmodifiableList;\n import org.apache.commons.lang3.ArrayUtils;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDU4OQ==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394860589", "bodyText": "mode.ordinal() -1", "author": "awildturtok", "createdAt": "2020-03-19T08:31:01Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,117 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+import com.bakdata.conquery.io.HasResourceBundle;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n-public enum DateContextMode {\n+public enum DateContextMode implements HasResourceBundle {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\tArrayUtils.indexOf(DateContextMode.values(), this);\n+\t\t\treturn List.of(range);\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS{\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\t};\n+\t\n+//\tThis causes a runtime error at the moment. See workaround below.\n+//\tprivate DateContextMode() {\n+//\t\tList<DateContextMode> list = new ArrayList<>();\n+//\t\tDateContextMode current = this;\n+//\t\tdo {\n+//\t\t\tlist.add(current);\n+//\t\t\tcurrent = getNextCoarserSubdivision(current);\n+//\t\t}while(current != null);\n+//\t\t\n+//\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+//\t}\n+\t\n+\tprivate List<DateContextMode> thisAndCoarserSubdivisions;\n+\t\n+\t/**\n+\t * WORKAROUND because the eclipse compiler has bug similar to this one:\n+\t * https://bugs.eclipse.org/bugs/show_bug.cgi?id=81454\n+\t */\n+\t@JsonIgnore\n+\tpublic List<DateContextMode> getThisAndCoarserSubdivisions(){\n+\t\tif (thisAndCoarserSubdivisions != null) {\n+\t\t\treturn thisAndCoarserSubdivisions;\n+\t\t}\n+\t\tList<DateContextMode> list = new ArrayList<>();\n+\t\tDateContextMode current = this;\n+\t\tdo {\n+\t\t\t// Sort from coarse to finer\n+\t\t\tlist.add(0,current);\n+\t\t\tcurrent = getNextCoarserSubdivision(current);\n+\t\t}while(current != null);\n+\t\t\n+\t\tthisAndCoarserSubdivisions = UnmodifiableList.unmodifiableList(list);\n+\t\treturn thisAndCoarserSubdivisions;\n+\t}\n+\t\n+\n+\tpublic List<CDateRange> subdivideRange(CDateRange range){\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\t\n+\tprivate static DateContextMode getNextCoarserSubdivision(DateContextMode mode) {\n+\t\tDateContextMode[] modes = DateContextMode.values();\n+\t\tint index = ArrayUtils.indexOf(modes, mode) - 1;", "originalCommit": "e2dbb04c70834b598d6a14cab9c137d6be21c768", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5NjY1NQ==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394996655", "bodyText": "Danke!", "author": "thoniTUB", "createdAt": "2020-03-19T12:42:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDU4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b543236737aeaca660d5cb61e553d26a2c4d8fb1", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java b/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java\nindex 87487a7ef..2a59498b5 100644\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java\n+++ b/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java\n\n@@ -1,15 +1,13 @@\n package com.bakdata.conquery.apiv1.forms;\n \n-import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.Locale;\n-import java.util.ResourceBundle;\n \n-import com.bakdata.conquery.io.HasResourceBundle;\n+import c10n.C10N;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n-import org.apache.commons.collections4.list.UnmodifiableList;\n import org.apache.commons.lang3.ArrayUtils;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDk3OA==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394860978", "bodyText": "Bitte anreissen was das macht oder wo du das benutzt", "author": "awildturtok", "createdAt": "2020-03-19T08:31:52Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextModeResource.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.bakdata.conquery.apiv1.forms;\n+\n+import java.util.ListResourceBundle;\n+\n+import lombok.Getter;\n+\n+\n+public class DateContextModeResource extends ListResourceBundle {", "originalCommit": "e2dbb04c70834b598d6a14cab9c137d6be21c768", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExMDM2NA==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395110364", "bodyText": "Habs \u00fcberarbeitet", "author": "thoniTUB", "createdAt": "2020-03-19T15:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDk3OA=="}], "type": "inlineReview", "revised_code": {"commit": "b543236737aeaca660d5cb61e553d26a2c4d8fb1", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextModeResource.java b/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextModeResource.java\ndeleted file mode 100644\nindex 0f996ceaf..000000000\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextModeResource.java\n+++ /dev/null\n\n@@ -1,18 +0,0 @@\n-package com.bakdata.conquery.apiv1.forms;\n-\n-import java.util.ListResourceBundle;\n-\n-import lombok.Getter;\n-\n-\n-public class DateContextModeResource extends ListResourceBundle {\n-\t\n-\t@Getter(onMethod = @__(@Override))\n-\tprivate final Object[][] contents = {\n-\t\t{DateContextMode.COMPLETE.toString(), \"complete\"},\n-\t\t{DateContextMode.YEARS.toString(), \"year\"},\n-\t\t{DateContextMode.QUARTERS.toString(), \"quarter\"},\n-\t\t{DateContextMode.DAYS.toString(), \"day\"},\n-\t};\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MTIzOQ==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394861239", "bodyText": "\u00f6h", "author": "awildturtok", "createdAt": "2020-03-19T08:32:23Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextModeResource_en.java", "diffHunk": "@@ -0,0 +1,4 @@\n+package com.bakdata.conquery.apiv1.forms;\n+\n+public class DateContextModeResource_en extends DateContextModeResource {", "originalCommit": "e2dbb04c70834b598d6a14cab9c137d6be21c768", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b543236737aeaca660d5cb61e553d26a2c4d8fb1", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextModeResource_en.java b/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextModeResource_en.java\ndeleted file mode 100644\nindex 1c48cd329..000000000\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextModeResource_en.java\n+++ /dev/null\n\n@@ -1,4 +0,0 @@\n-package com.bakdata.conquery.apiv1.forms;\n-\n-public class DateContextModeResource_en extends DateContextModeResource {\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2Mjk3OA==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394862978", "bodyText": "doku", "author": "awildturtok", "createdAt": "2020-03-19T08:36:01Z", "path": "backend/src/main/java/com/bakdata/conquery/io/HasResourceBundle.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.bakdata.conquery.io;\n+\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+public interface HasResourceBundle {", "originalCommit": "e2dbb04c70834b598d6a14cab9c137d6be21c768", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b543236737aeaca660d5cb61e553d26a2c4d8fb1", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/io/HasResourceBundle.java b/backend/src/main/java/com/bakdata/conquery/io/HasResourceBundle.java\ndeleted file mode 100644\nindex 97a2e4055..000000000\n--- a/backend/src/main/java/com/bakdata/conquery/io/HasResourceBundle.java\n+++ /dev/null\n\n@@ -1,10 +0,0 @@\n-package com.bakdata.conquery.io;\n-\n-import java.util.Locale;\n-import java.util.ResourceBundle;\n-\n-public interface HasResourceBundle {\n-\t\n-\tResourceBundle getBundle(Locale locale);\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MzcyMw==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394863723", "bodyText": "Was k\u00f6nnte hier sonst noch sein? Das sieht gef\u00e4hrtlich aus", "author": "awildturtok", "createdAt": "2020-03-19T08:37:32Z", "path": "backend/src/main/java/com/bakdata/conquery/models/externalservice/ResultType.java", "diffHunk": "@@ -37,12 +38,28 @@ public String print(PrintSettings cfg, Object f) {\n \t\t\tif(cfg.isPrettyPrint()) {\n \t\t\t\treturn DECIMAL_FORMAT.format(f);\n \t\t\t}\n+\t\t\treturn f.toString();\n+\t\t}\n+\t},\n+\tCATEGORICAL,\n+\tRESOLUTION {\n+\t\t@Override\n+\t\tpublic String print(PrintSettings cfg, Object f) {\n+\t\t\tDateContextMode mode = null;\n+\t\t\tif(!( f instanceof DateContextMode)) {\n+\t\t\t\tmode = DateContextMode.valueOf(f.toString());", "originalCommit": "e2dbb04c70834b598d6a14cab9c137d6be21c768", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExMTUzOA==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395111538", "bodyText": "Habs jetzt gecatched falls da etwas kaputt geht", "author": "thoniTUB", "createdAt": "2020-03-19T15:25:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MzcyMw=="}], "type": "inlineReview", "revised_code": {"commit": "b543236737aeaca660d5cb61e553d26a2c4d8fb1", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/externalservice/ResultType.java b/backend/src/main/java/com/bakdata/conquery/models/externalservice/ResultType.java\nindex a50e5babd..6cab36b43 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/externalservice/ResultType.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/externalservice/ResultType.java\n\n@@ -45,19 +43,15 @@ public enum ResultType {\n \tRESOLUTION {\n \t\t@Override\n \t\tpublic String print(PrintSettings cfg, Object f) {\n-\t\t\tDateContextMode mode = null;\n-\t\t\tif(!( f instanceof DateContextMode)) {\n-\t\t\t\tmode = DateContextMode.valueOf(f.toString());\n+\t\t\tif(f instanceof DateContextMode) {\n+\t\t\t\treturn ((DateContextMode)f).toString(cfg.getLocale());\n \t\t\t}\n-\t\t\telse {\n-\t\t\t\tmode = (DateContextMode) f;\n+\t\t\ttry {\n+\t\t\t\t// If the object was parsed as a simple string, try to convert it to a DateContextMode to get Internationalization\n+\t\t\t\treturn DateContextMode.valueOf(f.toString()).toString(cfg.getLocale());\t\t\t\t\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tthrow new IllegalArgumentException(f+ \" is not a valid resolution\");\n \t\t\t}\n-\t\t\tLocale locale = cfg.getLocale();\n-\t\t\tif(locale == null) {\n-\t\t\t\tlocale = Locale.getDefault();\n-\t\t\t}\n-\t\t\tResourceBundle bundle = mode.getBundle(locale);\n-\t\t\treturn bundle.getString(f.toString());\n \t\t}\n \t},\n \tDATE,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2NTk5OQ==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394865999", "bodyText": "Kannst du das nicht schon in der Validierung machen?", "author": "awildturtok", "createdAt": "2020-03-19T08:42:08Z", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/export/RelExportGenerator.java", "diffHunk": "@@ -22,6 +25,17 @@ public static RelativeFormQuery generate(Namespaces namespaces, RelativeMode mod\n \t\tConceptManipulator.DEFAULT_SELECTS_WHEN_EMPTY.consume(mode.getFeatures(), namespaces);\n \t\tConceptManipulator.DEFAULT_SELECTS_WHEN_EMPTY.consume(mode.getOutcomes(), namespaces);\n \t\t\n+\t\tList<DateContextMode> resolutions = null;\n+\t\tif(mode.getForm().isAlsoCreateCoarserSubdivisions()) {\n+\t\t\tif(mode.getForm().getResolution().size() != 1) {\n+\t\t\t\tthrow new IllegalStateException(\"Abort Form creation, because coarser subdivision are requested and multiple resolutions are given. With 'alsoCreateCoarserSubdivisions' set to true, provide only one resolution.\");", "originalCommit": "e2dbb04c70834b598d6a14cab9c137d6be21c768", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5NzQ5Mg==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394997492", "bodyText": "Jap , ich habe jetzt gesehen wie du @ValidationMethod benutzt das ist cool", "author": "thoniTUB", "createdAt": "2020-03-19T12:43:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2NTk5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzMjM5NA==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395432394", "bodyText": "Ich habe den Punkt doch wieder reverted, da der generator auch von anderen Formularen genutzt wird und hier die Validierung an einem Punkt gemacht wird", "author": "thoniTUB", "createdAt": "2020-03-20T04:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2NTk5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e0a444fbd23fc8a7c40683671f790bf4b7f75a6b", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/forms/export/RelExportGenerator.java b/backend/src/main/java/com/bakdata/conquery/models/forms/export/RelExportGenerator.java\nindex 88d702966..723ae702e 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/forms/export/RelExportGenerator.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/forms/export/RelExportGenerator.java\n\n@@ -27,9 +27,7 @@ public class RelExportGenerator {\n \t\t\n \t\tList<DateContextMode> resolutions = null;\n \t\tif(mode.getForm().isAlsoCreateCoarserSubdivisions()) {\n-\t\t\tif(mode.getForm().getResolution().size() != 1) {\n-\t\t\t\tthrow new IllegalStateException(\"Abort Form creation, because coarser subdivision are requested and multiple resolutions are given. With 'alsoCreateCoarserSubdivisions' set to true, provide only one resolution.\");\n-\t\t\t}\n+\t\t\t// Tested by validator that only one resolution is provided\n \t\t\tresolutions = mode.getForm().getResolution().get(0).getThisAndCoarserSubdivisions();\n \t\t}\n \t\telse {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2Njc3Mw==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394866773", "bodyText": "Ich wei\u00df was die Funktion macht, aber das ist doch schon echt viel Magic. Kannst du die Zahlen in einem Enum halten und Doku dr\u00fcber schreiben?", "author": "awildturtok", "createdAt": "2020-03-19T08:43:28Z", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/FormQueryPlan.java", "diffHunk": "@@ -49,18 +49,20 @@ public EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n \t}\n \t\n \tprivate Object[] addConstants(Object[] values, DateContext dateContext) {\n-\t\tint constants = dateContext.getEventDate() == null ? 2 : 3;\n+\t\tint constants = dateContext.getEventDate() == null ? 3 : 4;", "originalCommit": "e2dbb04c70834b598d6a14cab9c137d6be21c768", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MzM0Mw==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395143343", "bodyText": "Das in einem Enum zu machen, da fehlt mir gerade die Fantasie. W\u00fcrdest du ein Enum je Modus machen?", "author": "thoniTUB", "createdAt": "2020-03-19T16:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2Njc3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0Njc4Nw==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395146787", "bodyText": "\u00e4h, ich meinte konstanten ehrlich gesagt. Sorry", "author": "awildturtok", "createdAt": "2020-03-19T16:13:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2Njc3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0ODAwNA==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395148004", "bodyText": "Ich w\u00fcrde das ganze in einem extra Feature machen. sodass von einem QueryPlan zum anderen nciht immer wieder ein neues Array alloziiert werden muss f\u00fcr jede Ergebniszeile, wie es momentan der Fall ist um Konstanten ranzujoinen.", "author": "thoniTUB", "createdAt": "2020-03-19T16:15:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2Njc3Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg3MTU2MQ==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394871561", "bodyText": "Das Semikolon ist hier interessant gesetzt", "author": "awildturtok", "createdAt": "2020-03-19T08:52:34Z", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java", "diffHunk": "@@ -66,22 +67,37 @@ public EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n \t\t// We look at the first result line to determine the length of the subresult\n \t\tint featureLength = featureResult.getValues().get(0).length;\n \t\tint outcomeLength = outcomeResult.getValues().get(0).length;\n-\t\t// Whole result is the concatenation of the subresults. However the sub result includes the date restriction which we drop.\n-\t\tint size = featureLength + outcomeLength - 2;\n-\n-\t\t// merge the full (index == null) lines\n-\t\tObject[] mergedFull = new Object[size];\n-\t\tsetFeatureValues(mergedFull, featureResult.getValues().get(0));\n-\t\tsetOutcomeValues(mergedFull, outcomeResult.getValues().get(0), featureLength);\n-\t\tvalues.add(mergedFull);\n+\t\t\n+\t\t/*\n+\t\t *  Whole result is the concatenation of the subresults. The final output format combines resolution info, index and eventdate of both sub queries.\n+\t\t *  The feature/outcome sub queries are of in form of: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE/OUTCOME_DR], [FEATURE/OUTCOME_SELECTS]... \n+\t\t *  The wanted format is: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE_DR], [OUTCOME_DR], [FEATURE_SELECTS]... , [OUTCOME_SELECTS]\n+\t\t */\n+\t\tint size = featureLength + outcomeLength - 3/*= [RESOLUTION], [INDEX], [EVENTDATE]*/;", "originalCommit": "e2dbb04c70834b598d6a14cab9c137d6be21c768", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "88a6b7479a456657c2844e75f9a6142b1d3763c9", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java b/backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java\nindex 02be47d51..fdcbe8942 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java\n\n@@ -76,10 +80,7 @@ public class RelativeFormQueryPlan implements QueryPlan {\n \t\tint size = featureLength + outcomeLength - 3/*= [RESOLUTION], [INDEX], [EVENTDATE]*/;\n \n \t\tint resultStartIndex = 0;\n-\t\tif(contexts.size()>=2\n-\t\t\t&& contexts.get(0).getSubdivisionMode().equals(DateContextMode.COMPLETE)\n-\t\t\t&& contexts.get(1).getSubdivisionMode().equals(DateContextMode.COMPLETE)\n-\t\t\t&& !contexts.get(0).getFeatureGroup().equals(contexts.get(1).getFeatureGroup())) {\n+\t\tif(hasCompleteDateContexts(contexts)) {\n \t\t\t// merge a line for the complete daterange, when two dateContext were generated that don't target the same feature group,\n \t\t\t// which would be a mistake by the generation\n \t\t\t// Since the DateContexts are primarily ordered by their coarseness and COMPLETE is the coarsed resolution it must be at the first\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwMzQzMg==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394903432", "bodyText": "wie h\u00e4ufig brauchst du den? Finde dass man das List.of auch in den Callern machen kann, wenn es nur 1-2 sind", "author": "awildturtok", "createdAt": "2020-03-19T09:48:38Z", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java", "diffHunk": "@@ -57,54 +58,48 @@\n \t */\n \t@Getter @Setter\n \tprivate LocalDate eventDate = null;\n+\t\n+\t/**\n+\t * Indicates under which temporal subdivision mode this instance was created.\n+\t */\n+\t@Getter\n+\t@Nullable\n+\tprivate DateContextMode subdivisionMode;\n \n+\tpublic static List<DateContext> generateAbsoluteContexts(CDateRange dateRangeMask, DateContextMode subdivisionMode) {", "originalCommit": "e2dbb04c70834b598d6a14cab9c137d6be21c768", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwMzUxNA==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394903514", "bodyText": "oder du machst ein ... draus", "author": "awildturtok", "createdAt": "2020-03-19T09:48:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwMzQzMg=="}], "type": "inlineReview", "revised_code": {"commit": "f9a79e9d9ad5e632e26d1fec841b822ea687da52", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java b/backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java\nindex 18113ab9e..8a4f7aac8 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java\n\n@@ -66,8 +66,8 @@ public class DateContext {\n \t@Nullable\n \tprivate DateContextMode subdivisionMode;\n \n-\tpublic static List<DateContext> generateAbsoluteContexts(CDateRange dateRangeMask, DateContextMode subdivisionMode) {\n-\t\treturn generateAbsoluteContexts(dateRangeMask, List.of(subdivisionMode));\n+\tpublic static List<DateContext> generateAbsoluteContexts(CDateRange dateRangeMask, DateContextMode ... subdivisionMode ) {\n+\t\treturn generateAbsoluteContexts(dateRangeMask, subdivisionMode);\n \t}\n \t\n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwNTU5NQ==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r394905595", "bodyText": "die index++/index-- geschichte sollte etwas dokumentiert sein, dass ist mir nr halb schl\u00fcssig", "author": "awildturtok", "createdAt": "2020-03-19T09:52:21Z", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java", "diffHunk": "@@ -121,53 +116,50 @@\n \t * @param timeUnit\n \t * @return\n \t */\n-\tpublic static List<DateContext> generateRelativeContexts(int event, IndexPlacement indexPlacement, int featureTime,\n-\t\t\tint outcomeTime, boolean sliced, TimeUnit timeUnit) {\n+\tpublic static List<DateContext> generateRelativeContexts(int event, IndexPlacement indexPlacement, int featureTime,\tint outcomeTime, DateContextMode timeUnit, List<DateContextMode> subdivisionModes) {\n \t\tif (featureTime < 1 || outcomeTime < 1) {\n \t\t\tthrow new IllegalArgumentException(\"Relative times were smaller than 1 (featureTime: \" + featureTime\n \t\t\t\t\t+ \"; outcomeTime: \" + outcomeTime + \")\");\n \t\t}\n-\t\tList<DateContext> dcl = new ArrayList<>();\n+\t\tList<DateContext> dcList = new ArrayList<>();\n+\t\t\n+\t\tLocalDate eventdate = CDate.toLocalDate(event);\n \n \t\tCDateRange featureRange = generateFeatureRange(event, indexPlacement, featureTime, timeUnit);\n \t\tCDateRange outcomeRange = generateOutcomeRange(event, indexPlacement, outcomeTime, timeUnit);\n \n-\t\tdcl.add(new DateContext(featureRange, FeatureGroup.FEATURE, null, CDate.toLocalDate(event)));\n-\t\tdcl.add(new DateContext(outcomeRange, FeatureGroup.OUTCOME, null, CDate.toLocalDate(event)));\n-\n-\t\tif (sliced) {\n-\t\t\tList<CDateRange> featureRanges = null;\n-\t\t\tList<CDateRange> outcomeRanges = null;\n \n-\t\t\tswitch(timeUnit) {\n-\t\t\t\tcase DAYS:\n-\t\t\t\t\tfeatureRanges = featureRange.getCoveredDays();\n-\t\t\t\t\toutcomeRanges = outcomeRange.getCoveredDays();\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase QUARTERS:\n-\t\t\t\t\tfeatureRanges = featureRange.getCoveredQuarters();\n-\t\t\t\t\toutcomeRanges = outcomeRange.getCoveredQuarters();\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tthrow new IllegalArgumentException(\"Resolution \" + timeUnit + \" not supported.\");\t\t\t\t\n-\t\t\t}\n-\n-\t\t\tint numRanges = featureRanges.size();\n-\t\t\tint idx = indexPlacement.equals(IndexPlacement.BEFORE) ? numRanges - 1 : numRanges;\n-\t\t\tfor (CDateRange range : featureRanges) {\n-\t\t\t\tdcl.add(new DateContext(range, FeatureGroup.FEATURE, -idx, CDate.toLocalDate(event)));\n-\t\t\t\tidx--;\n+\t\tfor(DateContextMode mode : subdivisionModes) {", "originalCommit": "e2dbb04c70834b598d6a14cab9c137d6be21c768", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9a79e9d9ad5e632e26d1fec841b822ea687da52", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java b/backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java\nindex 18113ab9e..8a4f7aac8 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java\n\n@@ -131,6 +131,12 @@ public class DateContext {\n \n \t\tfor(DateContextMode mode : subdivisionModes) {\n \t\t\tList<CDateRange> featureRanges = mode.subdivideRange(featureRange);\n+\t\t\t/*\n+\t\t\t *  Depending on the index placement the event date belong to the feature range , outcome range or neither. This is represented in the index.\n+\t\t\t *  If the index placement is BEFORE, the event date is included in the most recent feature date range, which is marked by an index of 0.\n+\t\t\t *  If the index placement is NEUTRAL, the event date is not included in any date range and not range index is marked with 0.\n+\t\t\t *  If the index placement is AFTER, the event date is included in the earliest outcome date range, which is marked by 0.\n+\t\t\t */\n \t\t\tint index = indexPlacement.equals(IndexPlacement.BEFORE) ? featureRanges.size() - 1 : featureRanges.size();\n \t\t\tfor (CDateRange subRange : featureRanges) {\n \t\t\t\tDateContext dc = new DateContext(\n"}}, {"oid": "b543236737aeaca660d5cb61e553d26a2c4d8fb1", "url": "https://github.com/bakdata/conquery/commit/b543236737aeaca660d5cb61e553d26a2c4d8fb1", "message": "rework localization", "committedDate": "2020-03-19T15:30:21Z", "type": "commit"}, {"oid": "19550e28ab3fd96fc330a83a80fcb8fe93152683", "url": "https://github.com/bakdata/conquery/commit/19550e28ab3fd96fc330a83a80fcb8fe93152683", "message": "Merge b543236737aeaca660d5cb61e553d26a2c4d8fb1 into 9e15df05b6450e90fd106c59a69affe4ba1dd620", "committedDate": "2020-03-19T15:30:30Z", "type": "commit"}, {"oid": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e", "url": "https://github.com/bakdata/conquery/commit/ff9334f8d4c06558c536b691f03fa7a3b4da7d3e", "message": "automatic update to docs", "committedDate": "2020-03-19T15:32:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0NzQwMA==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395147400", "bodyText": "With a complex if condition like this, it's always useful to extract the entire condition into a variable (or function) to give it a name that explains it", "author": "Kadrian", "createdAt": "2020-03-19T16:14:17Z", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java", "diffHunk": "@@ -66,22 +67,37 @@ public EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n \t\t// We look at the first result line to determine the length of the subresult\n \t\tint featureLength = featureResult.getValues().get(0).length;\n \t\tint outcomeLength = outcomeResult.getValues().get(0).length;\n-\t\t// Whole result is the concatenation of the subresults. However the sub result includes the date restriction which we drop.\n-\t\tint size = featureLength + outcomeLength - 2;\n-\n-\t\t// merge the full (index == null) lines\n-\t\tObject[] mergedFull = new Object[size];\n-\t\tsetFeatureValues(mergedFull, featureResult.getValues().get(0));\n-\t\tsetOutcomeValues(mergedFull, outcomeResult.getValues().get(0), featureLength);\n-\t\tvalues.add(mergedFull);\n+\t\t\n+\t\t/*\n+\t\t *  Whole result is the concatenation of the subresults. The final output format combines resolution info, index and eventdate of both sub queries.\n+\t\t *  The feature/outcome sub queries are of in form of: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE/OUTCOME_DR], [FEATURE/OUTCOME_SELECTS]... \n+\t\t *  The wanted format is: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE_DR], [OUTCOME_DR], [FEATURE_SELECTS]... , [OUTCOME_SELECTS]\n+\t\t */\n+\t\tint size = featureLength + outcomeLength - 3/*= [RESOLUTION], [INDEX], [EVENTDATE]*/;\n+\n+\t\tint resultStartIndex = 0;\n+\t\tif(contexts.size()>=2\n+\t\t\t&& contexts.get(0).getSubdivisionMode().equals(DateContextMode.COMPLETE)", "originalCommit": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE4ODI4NQ==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395188285", "bodyText": "Danke Kai, pass ich an", "author": "thoniTUB", "createdAt": "2020-03-19T17:13:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0NzQwMA=="}], "type": "inlineReview", "revised_code": {"commit": "88a6b7479a456657c2844e75f9a6142b1d3763c9", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java b/backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java\nindex 02be47d51..fdcbe8942 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java\n\n@@ -76,10 +80,7 @@ public class RelativeFormQueryPlan implements QueryPlan {\n \t\tint size = featureLength + outcomeLength - 3/*= [RESOLUTION], [INDEX], [EVENTDATE]*/;\n \n \t\tint resultStartIndex = 0;\n-\t\tif(contexts.size()>=2\n-\t\t\t&& contexts.get(0).getSubdivisionMode().equals(DateContextMode.COMPLETE)\n-\t\t\t&& contexts.get(1).getSubdivisionMode().equals(DateContextMode.COMPLETE)\n-\t\t\t&& !contexts.get(0).getFeatureGroup().equals(contexts.get(1).getFeatureGroup())) {\n+\t\tif(hasCompleteDateContexts(contexts)) {\n \t\t\t// merge a line for the complete daterange, when two dateContext were generated that don't target the same feature group,\n \t\t\t// which would be a mistake by the generation\n \t\t\t// Since the DateContexts are primarily ordered by their coarseness and COMPLETE is the coarsed resolution it must be at the first\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0ODUwMg==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395148502", "bodyText": "It's good to explain this. Would even be better if things like these would be documented in the code itself. So could this e.g. a special type / class / enum?", "author": "Kadrian", "createdAt": "2020-03-19T16:15:49Z", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java", "diffHunk": "@@ -66,22 +67,37 @@ public EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n \t\t// We look at the first result line to determine the length of the subresult\n \t\tint featureLength = featureResult.getValues().get(0).length;\n \t\tint outcomeLength = outcomeResult.getValues().get(0).length;\n-\t\t// Whole result is the concatenation of the subresults. However the sub result includes the date restriction which we drop.\n-\t\tint size = featureLength + outcomeLength - 2;\n-\n-\t\t// merge the full (index == null) lines\n-\t\tObject[] mergedFull = new Object[size];\n-\t\tsetFeatureValues(mergedFull, featureResult.getValues().get(0));\n-\t\tsetOutcomeValues(mergedFull, outcomeResult.getValues().get(0), featureLength);\n-\t\tvalues.add(mergedFull);\n+\t\t\n+\t\t/*\n+\t\t *  Whole result is the concatenation of the subresults. The final output format combines resolution info, index and eventdate of both sub queries.\n+\t\t *  The feature/outcome sub queries are of in form of: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE/OUTCOME_DR], [FEATURE/OUTCOME_SELECTS]... ", "originalCommit": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "88a6b7479a456657c2844e75f9a6142b1d3763c9", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java b/backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java\nindex 02be47d51..fdcbe8942 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java\n\n@@ -76,10 +80,7 @@ public class RelativeFormQueryPlan implements QueryPlan {\n \t\tint size = featureLength + outcomeLength - 3/*= [RESOLUTION], [INDEX], [EVENTDATE]*/;\n \n \t\tint resultStartIndex = 0;\n-\t\tif(contexts.size()>=2\n-\t\t\t&& contexts.get(0).getSubdivisionMode().equals(DateContextMode.COMPLETE)\n-\t\t\t&& contexts.get(1).getSubdivisionMode().equals(DateContextMode.COMPLETE)\n-\t\t\t&& !contexts.get(0).getFeatureGroup().equals(contexts.get(1).getFeatureGroup())) {\n+\t\tif(hasCompleteDateContexts(contexts)) {\n \t\t\t// merge a line for the complete daterange, when two dateContext were generated that don't target the same feature group,\n \t\t\t// which would be a mistake by the generation\n \t\t\t// Since the DateContexts are primarily ordered by their coarseness and COMPLETE is the coarsed resolution it must be at the first\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0OTgzNw==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395149837", "bodyText": "Agree with @awildturtok here, these numbers are quite magic, an enum would make this a lot easier to understand", "author": "Kadrian", "createdAt": "2020-03-19T16:17:40Z", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java", "diffHunk": "@@ -99,24 +115,24 @@ private SubResult executeSubQuery(QueryExecutionContext ctx, FeatureGroup featur\n \t\treturn new SubResult((MultilineContainedEntityResult) sub.execute(ctx, entity));\n \t}\n \n-\tprivate void setOutcomeValues(Object[] result, Object[] value, int featureLength) {\n+\tprivate void setFeatureValues(Object[] result, Object[] value) {\n \t\t// copy everything up to including index\n-\t\tfor (int i = 0; i < 2; i++) {\n+\t\tfor (int i = 0; i < 3; i++) {\n \t\t\tresult[i] = value[i];\n \t\t}\n \t\t// copy daterange\n-\t\tresult[3] = value[2];\n-\t\tSystem.arraycopy(value, 3, result, 1 + featureLength, value.length - 3);\n+\t\tresult[3] = value[3];\n+\t\tSystem.arraycopy(value, 4, result, 5, value.length - 4);", "originalCommit": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "88a6b7479a456657c2844e75f9a6142b1d3763c9", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java b/backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java\nindex 02be47d51..fdcbe8942 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/forms/managed/RelativeFormQueryPlan.java\n\n@@ -114,25 +122,25 @@ public class RelativeFormQueryPlan implements QueryPlan {\n \t\tFormQueryPlan sub = new FormQueryPlan(list,subPlan);\n \t\treturn new SubResult((MultilineContainedEntityResult) sub.execute(ctx, entity));\n \t}\n-\n+\t\n \tprivate void setFeatureValues(Object[] result, Object[] value) {\n \t\t// copy everything up to including index\n-\t\tfor (int i = 0; i < 3; i++) {\n+\t\tfor (int i = 0; i <= EVENTDATE; i++) {\n \t\t\tresult[i] = value[i];\n \t\t}\n \t\t// copy daterange\n-\t\tresult[3] = value[3];\n-\t\tSystem.arraycopy(value, 4, result, 5, value.length - 4);\n+\t\tresult[FEATURE_DATE_RANGE] = value[DATE_RANGE_SUB_RESULT];\n+\t\tSystem.arraycopy(value, DATE_RANGE_SUB_RESULT+1, result, FEATURE_DATE_RANGE + 1, value.length - (DATE_RANGE_SUB_RESULT+1));\n \t}\n \t\n \tprivate void setOutcomeValues(Object[] result, Object[] value, int featureLength) {\n \t\t// copy everything up to including index\n-\t\tfor (int i = 0; i < 3; i++) {\n+\t\tfor (int i = 0; i <= EVENTDATE; i++) {\n \t\t\tresult[i] = value[i];\n \t\t}\n \t\t// copy daterange\n-\t\tresult[4] = value[3];\n-\t\tSystem.arraycopy(value, 4, result, 1 + featureLength, value.length - 4);\n+\t\tresult[OUTCOME_DATE_RANGE] = value[DATE_RANGE_SUB_RESULT];\n+\t\tSystem.arraycopy(value, DATE_RANGE_SUB_RESULT+1, result, 1 + featureLength, value.length - (DATE_RANGE_SUB_RESULT+1));\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1MDkwMA==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395150900", "bodyText": "Uh, ternary works even without a space in front of the question mark?", "author": "Kadrian", "createdAt": "2020-03-19T16:19:11Z", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java", "diffHunk": "@@ -121,53 +116,50 @@\n \t * @param timeUnit\n \t * @return\n \t */\n-\tpublic static List<DateContext> generateRelativeContexts(int event, IndexPlacement indexPlacement, int featureTime,\n-\t\t\tint outcomeTime, boolean sliced, TimeUnit timeUnit) {\n+\tpublic static List<DateContext> generateRelativeContexts(int event, IndexPlacement indexPlacement, int featureTime,\tint outcomeTime, DateContextMode timeUnit, List<DateContextMode> subdivisionModes) {\n \t\tif (featureTime < 1 || outcomeTime < 1) {\n \t\t\tthrow new IllegalArgumentException(\"Relative times were smaller than 1 (featureTime: \" + featureTime\n \t\t\t\t\t+ \"; outcomeTime: \" + outcomeTime + \")\");\n \t\t}\n-\t\tList<DateContext> dcl = new ArrayList<>();\n+\t\tList<DateContext> dcList = new ArrayList<>();\n+\t\t\n+\t\tLocalDate eventdate = CDate.toLocalDate(event);\n \n \t\tCDateRange featureRange = generateFeatureRange(event, indexPlacement, featureTime, timeUnit);\n \t\tCDateRange outcomeRange = generateOutcomeRange(event, indexPlacement, outcomeTime, timeUnit);\n \n-\t\tdcl.add(new DateContext(featureRange, FeatureGroup.FEATURE, null, CDate.toLocalDate(event)));\n-\t\tdcl.add(new DateContext(outcomeRange, FeatureGroup.OUTCOME, null, CDate.toLocalDate(event)));\n-\n-\t\tif (sliced) {\n-\t\t\tList<CDateRange> featureRanges = null;\n-\t\t\tList<CDateRange> outcomeRanges = null;\n \n-\t\t\tswitch(timeUnit) {\n-\t\t\t\tcase DAYS:\n-\t\t\t\t\tfeatureRanges = featureRange.getCoveredDays();\n-\t\t\t\t\toutcomeRanges = outcomeRange.getCoveredDays();\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase QUARTERS:\n-\t\t\t\t\tfeatureRanges = featureRange.getCoveredQuarters();\n-\t\t\t\t\toutcomeRanges = outcomeRange.getCoveredQuarters();\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tthrow new IllegalArgumentException(\"Resolution \" + timeUnit + \" not supported.\");\t\t\t\t\n-\t\t\t}\n-\n-\t\t\tint numRanges = featureRanges.size();\n-\t\t\tint idx = indexPlacement.equals(IndexPlacement.BEFORE) ? numRanges - 1 : numRanges;\n-\t\t\tfor (CDateRange range : featureRanges) {\n-\t\t\t\tdcl.add(new DateContext(range, FeatureGroup.FEATURE, -idx, CDate.toLocalDate(event)));\n-\t\t\t\tidx--;\n+\t\tfor(DateContextMode mode : subdivisionModes) {\n+\t\t\tList<CDateRange> featureRanges = mode.subdivideRange(featureRange);\n+\t\t\tint index = indexPlacement.equals(IndexPlacement.BEFORE) ? featureRanges.size() - 1 : featureRanges.size();\n+\t\t\tfor (CDateRange subRange : featureRanges) {\n+\t\t\t\tDateContext dc = new DateContext(\n+\t\t\t\t\tsubRange,\n+\t\t\t\t\tFeatureGroup.FEATURE,\n+\t\t\t\t\t// For now there is no index for complete\n+\t\t\t\t\tmode.equals(DateContextMode.COMPLETE)? null : -index,", "originalCommit": "ff9334f8d4c06558c536b691f03fa7a3b4da7d3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1NTMyMA==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395155320", "bodyText": "Ach, die diskussion um whitespaces hab ich schon lange aufgegeben :D Wenn sie sch\u00f6n sind sind sie sch\u00f6n, wenn nicht werden sie beim n\u00e4chsten anfassen sch\u00f6n :D\n\ud83d\udde1 \ud83d\udde1 \ud83d\udde1 \ud83d\udde1", "author": "awildturtok", "createdAt": "2020-03-19T16:25:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1MDkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ2MTM1OQ==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395461359", "bodyText": "In the Javascript world we don't even discuss this, everybody just uses the code formatter https://prettier.io/ to auto-format on save. Is there something like this in the Java land?", "author": "Kadrian", "createdAt": "2020-03-20T06:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1MDkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxMDg0Ng==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395610846", "bodyText": "Wir hatten ein paar Probleme damit, weil die Formatting Plugins der verschiedenen IDEs sich nicht exakt gleich verhalten und die Diffs immer sehr gro\u00df waren.", "author": "thoniTUB", "createdAt": "2020-03-20T12:43:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1MDkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxMjI4NQ==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395612285", "bodyText": "Meine Einstellung, dass nur die Zeilen formiert werden, die ich angefasst habe ist verloren gegangen", "author": "thoniTUB", "createdAt": "2020-03-20T12:46:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1MDkwMA=="}], "type": "inlineReview", "revised_code": {"commit": "f9a79e9d9ad5e632e26d1fec841b822ea687da52", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java b/backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java\nindex 18113ab9e..8a4f7aac8 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java\n\n@@ -131,6 +131,12 @@ public class DateContext {\n \n \t\tfor(DateContextMode mode : subdivisionModes) {\n \t\t\tList<CDateRange> featureRanges = mode.subdivideRange(featureRange);\n+\t\t\t/*\n+\t\t\t *  Depending on the index placement the event date belong to the feature range , outcome range or neither. This is represented in the index.\n+\t\t\t *  If the index placement is BEFORE, the event date is included in the most recent feature date range, which is marked by an index of 0.\n+\t\t\t *  If the index placement is NEUTRAL, the event date is not included in any date range and not range index is marked with 0.\n+\t\t\t *  If the index placement is AFTER, the event date is included in the earliest outcome date range, which is marked by 0.\n+\t\t\t */\n \t\t\tint index = indexPlacement.equals(IndexPlacement.BEFORE) ? featureRanges.size() - 1 : featureRanges.size();\n \t\t\tfor (CDateRange subRange : featureRanges) {\n \t\t\t\tDateContext dc = new DateContext(\n"}}, {"oid": "e0a444fbd23fc8a7c40683671f790bf4b7f75a6b", "url": "https://github.com/bakdata/conquery/commit/e0a444fbd23fc8a7c40683671f790bf4b7f75a6b", "message": "adds validation to form", "committedDate": "2020-03-19T16:43:06Z", "type": "commit"}, {"oid": "f9a79e9d9ad5e632e26d1fec841b822ea687da52", "url": "https://github.com/bakdata/conquery/commit/f9a79e9d9ad5e632e26d1fec841b822ea687da52", "message": "adds doku and clean up", "committedDate": "2020-03-19T16:43:34Z", "type": "commit"}, {"oid": "0aa87d3d62ed152283e94ffb098e794b913bcd53", "url": "https://github.com/bakdata/conquery/commit/0aa87d3d62ed152283e94ffb098e794b913bcd53", "message": "Merge branch 'feature/export-form-optional-quarters' of https://github.com/bakdata/conquery into feature/export-form-optional-quarters", "committedDate": "2020-03-19T16:43:50Z", "type": "commit"}, {"oid": "cc66f89489e10eda7c444b3a20ee1b477ee12319", "url": "https://github.com/bakdata/conquery/commit/cc66f89489e10eda7c444b3a20ee1b477ee12319", "message": "Merge 0aa87d3d62ed152283e94ffb098e794b913bcd53 into 9e15df05b6450e90fd106c59a69affe4ba1dd620", "committedDate": "2020-03-19T16:44:08Z", "type": "commit"}, {"oid": "924bb83ec3b6ef644cbd2835870a1babfd3402bf", "url": "https://github.com/bakdata/conquery/commit/924bb83ec3b6ef644cbd2835870a1babfd3402bf", "message": "automatic update to docs", "committedDate": "2020-03-19T16:45:50Z", "type": "commit"}, {"oid": "354c90a9b6bf89b0ac0490498e34100aaef8f26d", "url": "https://github.com/bakdata/conquery/commit/354c90a9b6bf89b0ac0490498e34100aaef8f26d", "message": "fix date context mode", "committedDate": "2020-03-19T17:11:02Z", "type": "commit"}, {"oid": "55e006de9b8a59cd8a231da9416675ea1b990860", "url": "https://github.com/bakdata/conquery/commit/55e006de9b8a59cd8a231da9416675ea1b990860", "message": "init internationalization", "committedDate": "2020-03-19T17:27:57Z", "type": "commit"}, {"oid": "88a6b7479a456657c2844e75f9a6142b1d3763c9", "url": "https://github.com/bakdata/conquery/commit/88a6b7479a456657c2844e75f9a6142b1d3763c9", "message": "use constants for better documentation", "committedDate": "2020-03-19T17:30:58Z", "type": "commit"}, {"oid": "3d4a0de20bbcb10e983096c92b17027319d6936b", "url": "https://github.com/bakdata/conquery/commit/3d4a0de20bbcb10e983096c92b17027319d6936b", "message": "Merge branch 'feature/export-form-optional-quarters' of https://github.com/bakdata/conquery into feature/export-form-optional-quarters", "committedDate": "2020-03-19T17:31:09Z", "type": "commit"}, {"oid": "2932da6ea68f979d1e396e68ce1598f6afb0d4d8", "url": "https://github.com/bakdata/conquery/commit/2932da6ea68f979d1e396e68ce1598f6afb0d4d8", "message": "Fix copy index", "committedDate": "2020-03-20T04:08:50Z", "type": "commit"}, {"oid": "13d1b7d3366695cafa0309b7b0975c620502d8a6", "url": "https://github.com/bakdata/conquery/commit/13d1b7d3366695cafa0309b7b0975c620502d8a6", "message": "Revert \"adds validation to form\"\n\nThis reverts commit e0a444fbd23fc8a7c40683671f790bf4b7f75a6b.", "committedDate": "2020-03-20T04:11:52Z", "type": "commit"}, {"oid": "72368477c90551f2506bbfff66252802302ee269", "url": "https://github.com/bakdata/conquery/commit/72368477c90551f2506bbfff66252802302ee269", "message": "Merge 13d1b7d3366695cafa0309b7b0975c620502d8a6 into 9e15df05b6450e90fd106c59a69affe4ba1dd620", "committedDate": "2020-03-20T04:12:10Z", "type": "commit"}, {"oid": "5ca3919f3646e7842350d033afee870caf8e1db1", "url": "https://github.com/bakdata/conquery/commit/5ca3919f3646e7842350d033afee870caf8e1db1", "message": "automatic update to docs", "committedDate": "2020-03-20T04:14:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyMTE1OA==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395621158", "bodyText": "Du kannst in einem enum auch abstrakte Methoden machen", "author": "awildturtok", "createdAt": "2020-03-20T13:03:43Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java", "diffHunk": "@@ -1,29 +1,115 @@\n package com.bakdata.conquery.apiv1.forms;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import c10n.C10N;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.forms.util.DateContext;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import lombok.RequiredArgsConstructor;\n \n /**\n- * Specifies the smallest time unit that should be used in the resulting\n- * {@link DateContext} for grouping.\n+ * Specifies the tempporal resolution that should be used in the resulting\n+ * {@link DateContext} for grouping. It is important for this class to keep the order of the\n+ * Enum members.\n  *\n  */\n+@RequiredArgsConstructor\n public enum DateContextMode {\n \t/**\n \t * For returning contexts with a single {@link CDateRange} for the entire\n \t * {@link FeatureGroup}.\n \t */\n-\tCOMPLETE_ONLY,\n+\tCOMPLETE(null){\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn List.of(range);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString(Locale locale) {\n+\t\t\treturn C10N.get(DateContextModeC10n.class, locale).complete();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * years.\n \t */\n-\tYEAR_WISE,\n+\tYEARS(COMPLETE){\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredYears();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString(Locale locale) {\n+\t\t\treturn C10N.get(DateContextModeC10n.class, locale).year();\n+\t\t}\n+\t},\n \n \t/**\n \t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n \t * quarters.\n \t */\n-\tQUARTER_WISE;\n+\tQUARTERS(YEARS){\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredQuarters();\n+\t\t}\n+\t\t\n+\n+\t\t@Override\n+\t\tpublic String toString(Locale locale) {\n+\t\t\treturn C10N.get(DateContextModeC10n.class, locale).quarter();\n+\t\t}\n+\t},\n+\t\n+\t/**\n+\t * The {@link CDateRange} contexts per {@link FeatureGroup} are subdivided into\n+\t * days.\n+\t */\n+\tDAYS(QUARTERS){\n+\t\t@Override\n+\t\tpublic List<CDateRange> subdivideRange(CDateRange range) {\n+\t\t\treturn range.getCoveredDays();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString(Locale locale) {\n+\t\t\treturn C10N.get(DateContextModeC10n.class, locale).day();\n+\t\t}\n+\t};\n+\t\n+\t@JsonIgnore\n+\tprivate final DateContextMode coarser;\n+\n+\n+\tprivate List<DateContextMode> thisAndCoarserSubdivisions;\n+\n+\t\n+\t@JsonIgnore\n+\tpublic List<DateContextMode> getThisAndCoarserSubdivisions(){\n+\t\tif (thisAndCoarserSubdivisions != null) {\n+\t\t\treturn thisAndCoarserSubdivisions;\n+\t\t}\n+\t\tList<DateContextMode> thisAndCoarser = new ArrayList<>();\n+\t\tif(coarser != null) {\n+\t\t\tthisAndCoarser.addAll(coarser.getThisAndCoarserSubdivisions());\n+\t\t}\n+\t\tthisAndCoarser.add(this);\n+\t\treturn thisAndCoarserSubdivisions = Collections.unmodifiableList(thisAndCoarser);\n+\t\t\n+\t}\n+\t\t\n+\n+\tpublic List<CDateRange> subdivideRange(CDateRange range){\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\tpublic String toString(Locale locale) {", "originalCommit": "5ca3919f3646e7842350d033afee870caf8e1db1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NTM0Mg==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r396245342", "bodyText": "Danke! Me blind", "author": "thoniTUB", "createdAt": "2020-03-23T07:07:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyMTE1OA=="}], "type": "inlineReview", "revised_code": {"commit": "63e6c7440c558dd261a88a8c73e4b72e46a4e8e4", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java b/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java\nindex 2300f0dc5..0aab55748 100644\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java\n+++ b/backend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java\n\n@@ -104,12 +104,8 @@ public enum DateContextMode {\n \t\treturn thisAndCoarserSubdivisions = Collections.unmodifiableList(thisAndCoarser);\n \t\t\n \t}\n-\t\t\n \n-\tpublic List<CDateRange> subdivideRange(CDateRange range){\n-\t\tthrow new UnsupportedOperationException();\n-\t}\n-\tpublic String toString(Locale locale) {\n-\t\tthrow new UnsupportedOperationException();\n-\t}\n+\tpublic abstract List<CDateRange> subdivideRange(CDateRange range);\n+\n+\tpublic abstract String toString(Locale locale);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyMTg1NA==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395621854", "bodyText": "Doku", "author": "awildturtok", "createdAt": "2020-03-20T13:05:08Z", "path": "backend/src/main/java/com/bakdata/conquery/io/jersey/LocaleFilter.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.bakdata.conquery.io.jersey;\n+\n+import java.io.IOException;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+\n+import com.bakdata.conquery.models.i18n.I18n;\n+\n+\n+public class LocaleFilter implements ContainerRequestFilter {", "originalCommit": "5ca3919f3646e7842350d033afee870caf8e1db1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63e6c7440c558dd261a88a8c73e4b72e46a4e8e4", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/io/jersey/LocaleFilter.java b/backend/src/main/java/com/bakdata/conquery/io/jersey/LocaleFilter.java\nindex bde577609..bb9a145c9 100644\n--- a/backend/src/main/java/com/bakdata/conquery/io/jersey/LocaleFilter.java\n+++ b/backend/src/main/java/com/bakdata/conquery/io/jersey/LocaleFilter.java\n\n@@ -1,18 +1,27 @@\n package com.bakdata.conquery.io.jersey;\n \n import java.io.IOException;\n+import java.util.Locale;\n \n import javax.ws.rs.container.ContainerRequestContext;\n import javax.ws.rs.container.ContainerRequestFilter;\n \n import com.bakdata.conquery.models.i18n.I18n;\n \n-\n+/**\n+ * Extracts the user specific locale for internationalization, that is contained\n+ * in the request header. If none is provided, it falls back to\n+ * {@link I18n#DEFAULT_LOCALE}.\n+ */\n public class LocaleFilter implements ContainerRequestFilter {\n-\t\n+\n \t@Override\n \tpublic void filter(ContainerRequestContext requestContext) throws IOException {\n-\t\tI18n.LOCALE.set(requestContext.getLanguage());\n+\t\tLocale locale = requestContext.getLanguage();\n+\t\tif (locale == null) {\n+\t\t\tlocale = I18n.DEFAULT_LOCALE;\n+\t\t}\n+\t\tI18n.LOCALE.set(locale);\n \t}\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyMjM4OQ==", "url": "https://github.com/bakdata/conquery/pull/1064#discussion_r395622389", "bodyText": "e noch als cause?", "author": "awildturtok", "createdAt": "2020-03-20T13:06:08Z", "path": "backend/src/main/java/com/bakdata/conquery/models/externalservice/ResultType.java", "diffHunk": "@@ -37,12 +36,24 @@ public String print(PrintSettings cfg, Object f) {\n \t\t\tif(cfg.isPrettyPrint()) {\n \t\t\t\treturn DECIMAL_FORMAT.format(f);\n \t\t\t}\n-\t\t\telse {\n-\t\t\t\treturn f.toString();\n-\t\t\t}\n+\t\t\treturn f.toString();\n \t\t}\n \t},\n \tCATEGORICAL,\n+\tRESOLUTION {\n+\t\t@Override\n+\t\tpublic String print(PrintSettings cfg, Object f) {\n+\t\t\tif(f instanceof DateContextMode) {\n+\t\t\t\treturn ((DateContextMode)f).toString(cfg.getLocale());\n+\t\t\t}\n+\t\t\ttry {\n+\t\t\t\t// If the object was parsed as a simple string, try to convert it to a DateContextMode to get Internationalization\n+\t\t\t\treturn DateContextMode.valueOf(f.toString()).toString(cfg.getLocale());\t\t\t\t\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tthrow new IllegalArgumentException(f+ \" is not a valid resolution\");", "originalCommit": "5ca3919f3646e7842350d033afee870caf8e1db1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63e6c7440c558dd261a88a8c73e4b72e46a4e8e4", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/externalservice/ResultType.java b/backend/src/main/java/com/bakdata/conquery/models/externalservice/ResultType.java\nindex 6cab36b43..f494b688f 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/externalservice/ResultType.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/externalservice/ResultType.java\n\n@@ -41,16 +41,19 @@ public enum ResultType {\n \t},\n \tCATEGORICAL,\n \tRESOLUTION {\n+\n \t\t@Override\n \t\tpublic String print(PrintSettings cfg, Object f) {\n-\t\t\tif(f instanceof DateContextMode) {\n-\t\t\t\treturn ((DateContextMode)f).toString(cfg.getLocale());\n+\t\t\tif (f instanceof DateContextMode) {\n+\t\t\t\treturn ((DateContextMode) f).toString(cfg.getLocale());\n \t\t\t}\n \t\t\ttry {\n-\t\t\t\t// If the object was parsed as a simple string, try to convert it to a DateContextMode to get Internationalization\n-\t\t\t\treturn DateContextMode.valueOf(f.toString()).toString(cfg.getLocale());\t\t\t\t\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tthrow new IllegalArgumentException(f+ \" is not a valid resolution\");\n+\t\t\t\t// If the object was parsed as a simple string, try to convert it to a\n+\t\t\t\t// DateContextMode to get Internationalization\n+\t\t\t\treturn DateContextMode.valueOf(f.toString()).toString(cfg.getLocale());\n+\t\t\t}\n+\t\t\tcatch (Exception e) {\n+\t\t\t\tthrow new IllegalArgumentException(f + \" is not a valid resolution.\", e);\n \t\t\t}\n \t\t}\n \t},\n"}}, {"oid": "63e6c7440c558dd261a88a8c73e4b72e46a4e8e4", "url": "https://github.com/bakdata/conquery/commit/63e6c7440c558dd261a88a8c73e4b72e46a4e8e4", "message": "review fixes cleanup", "committedDate": "2020-03-23T12:19:23Z", "type": "commit"}, {"oid": "3b8c98cd1b3e359667164abdd8c2a88212c86e27", "url": "https://github.com/bakdata/conquery/commit/3b8c98cd1b3e359667164abdd8c2a88212c86e27", "message": "Merge branch 'develop' into feature/export-form-optional-quarters\n\n# Conflicts:\n#\tbackend/src/main/java/com/bakdata/conquery/apiv1/forms/DateContextMode.java\n#\tbackend/src/main/java/com/bakdata/conquery/apiv1/forms/export_form/AbsoluteMode.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/forms/util/DateContext.java\n#\tbackend/src/test/java/com/bakdata/conquery/models/forms/DateContextTest.java\n#\tdocs/REST API JSONs.md", "committedDate": "2020-03-23T12:26:32Z", "type": "commit"}]}