{"pr_number": 1150, "pr_title": "Feature save load manage form configurations", "pr_createdAt": "2020-04-09T14:43:22Z", "pr_url": "https://github.com/bakdata/conquery/pull/1150", "timeline": [{"oid": "917743ea1fc854c1294084b81f16249cb8d3cf14", "url": "https://github.com/bakdata/conquery/commit/917743ea1fc854c1294084b81f16249cb8d3cf14", "message": "Bump javaparser-symbol-solver-core from 3.15.17 to 3.15.18\n\nBumps [javaparser-symbol-solver-core](https://github.com/javaparser/javaparser) from 3.15.17 to 3.15.18.\n- [Release notes](https://github.com/javaparser/javaparser/releases)\n- [Changelog](https://github.com/javaparser/javaparser/blob/master/changelog.md)\n- [Commits](https://github.com/javaparser/javaparser/compare/javaparser-parent-3.15.17...javaparser-parent-3.15.18)\n\nSigned-off-by: dependabot-preview[bot] <support@dependabot.com>", "committedDate": "2020-04-07T04:14:52Z", "type": "commit"}, {"oid": "0181aea1a28b20cbc2a14846fd0fbcec709267d7", "url": "https://github.com/bakdata/conquery/commit/0181aea1a28b20cbc2a14846fd0fbcec709267d7", "message": "WIP form config", "committedDate": "2020-04-07T11:06:47Z", "type": "commit"}, {"oid": "18a5f28808915a2ff74d992fb4515002218e729f", "url": "https://github.com/bakdata/conquery/commit/18a5f28808915a2ff74d992fb4515002218e729f", "message": "added post get, delete and patch(WIP) to FormConfig endpoint", "committedDate": "2020-04-09T06:38:04Z", "type": "commit"}, {"oid": "deaa11604423193c7317081a85a0040562ae56cf", "url": "https://github.com/bakdata/conquery/commit/deaa11604423193c7317081a85a0040562ae56cf", "message": "cleans up patching of a form config", "committedDate": "2020-04-09T14:41:41Z", "type": "commit"}, {"oid": "b5a1de9f2aadd414e7b200ad1565e4f68047efb3", "url": "https://github.com/bakdata/conquery/commit/b5a1de9f2aadd414e7b200ad1565e4f68047efb3", "message": "adds tests", "committedDate": "2020-04-09T14:42:05Z", "type": "commit"}, {"oid": "1eba8bec67d2c349a06140487003aca595643e5b", "url": "https://github.com/bakdata/conquery/commit/1eba8bec67d2c349a06140487003aca595643e5b", "message": "registers resource", "committedDate": "2020-04-09T14:42:20Z", "type": "commit"}, {"oid": "5e9d07d759f2972e29b4e561a9d601b20f599c67", "url": "https://github.com/bakdata/conquery/commit/5e9d07d759f2972e29b4e561a9d601b20f599c67", "message": "Merge 1eba8bec67d2c349a06140487003aca595643e5b into 8649f3475b0ec574554ede8140a23c771ad808b8", "committedDate": "2020-04-09T14:43:24Z", "type": "commit"}, {"oid": "2a7498ddbc809e705491dc38a84a5a8c0ce38e38", "url": "https://github.com/bakdata/conquery/commit/2a7498ddbc809e705491dc38a84a5a8c0ce38e38", "message": "Merge branch 'develop' into feature/form-config", "committedDate": "2020-04-09T14:43:45Z", "type": "commit"}, {"oid": "067fd94cb161d2664b187bfe5a44e0a0401da0b3", "url": "https://github.com/bakdata/conquery/commit/067fd94cb161d2664b187bfe5a44e0a0401da0b3", "message": "automatic update to docs", "committedDate": "2020-04-09T14:45:23Z", "type": "commit"}, {"oid": "e16db7e6143fb4a3fb988130e2f8b327dfc3cdf7", "url": "https://github.com/bakdata/conquery/commit/e16db7e6143fb4a3fb988130e2f8b327dfc3cdf7", "message": "apply patch pattern to managed executions", "committedDate": "2020-04-09T15:26:32Z", "type": "commit"}, {"oid": "56cf17ba5675164ff61575b9e78978636255b307", "url": "https://github.com/bakdata/conquery/commit/56cf17ba5675164ff61575b9e78978636255b307", "message": "Merge branch 'feature/form-config' of https://github.com/bakdata/conquery into feature/form-config", "committedDate": "2020-04-09T15:27:02Z", "type": "commit"}, {"oid": "5679a98ee405f57bf1bb54252b3306b9f95303be", "url": "https://github.com/bakdata/conquery/commit/5679a98ee405f57bf1bb54252b3306b9f95303be", "message": "Merge 56cf17ba5675164ff61575b9e78978636255b307 into 8649f3475b0ec574554ede8140a23c771ad808b8", "committedDate": "2020-04-09T15:27:20Z", "type": "commit"}, {"oid": "6fd491845d0aaf742d3e0c90827b5fbe1ea7cb0e", "url": "https://github.com/bakdata/conquery/commit/6fd491845d0aaf742d3e0c90827b5fbe1ea7cb0e", "message": "automatic update to docs", "committedDate": "2020-04-09T15:29:17Z", "type": "commit"}, {"oid": "1ce2fd11e0cf0f7a90fb30fa508568db54045b9b", "url": "https://github.com/bakdata/conquery/commit/1ce2fd11e0cf0f7a90fb30fa508568db54045b9b", "message": "refactoring", "committedDate": "2020-04-09T15:41:00Z", "type": "commit"}, {"oid": "349ce36f3ab9d72eacb9997076cd280c1d3af7d8", "url": "https://github.com/bakdata/conquery/commit/349ce36f3ab9d72eacb9997076cd280c1d3af7d8", "message": "Merge branch 'feature/form-config' of https://github.com/bakdata/conquery into feature/form-config", "committedDate": "2020-04-09T15:41:16Z", "type": "commit"}, {"oid": "ceb54422b04a1dfbc2e17f59644cd3c8085a2ec2", "url": "https://github.com/bakdata/conquery/commit/ceb54422b04a1dfbc2e17f59644cd3c8085a2ec2", "message": "More refactoring of patch class", "committedDate": "2020-04-09T15:48:55Z", "type": "commit"}, {"oid": "2790879901fc06c476efa461d5a2db4505fc0acf", "url": "https://github.com/bakdata/conquery/commit/2790879901fc06c476efa461d5a2db4505fc0acf", "message": "Bump classgraph from 4.8.67 to 4.8.69\n\nBumps [classgraph](https://github.com/classgraph/classgraph) from 4.8.67 to 4.8.69.\n- [Release notes](https://github.com/classgraph/classgraph/releases)\n- [Commits](https://github.com/classgraph/classgraph/compare/classgraph-4.8.67...classgraph-4.8.69)\n\nSigned-off-by: dependabot-preview[bot] <support@dependabot.com>", "committedDate": "2020-04-13T04:13:07Z", "type": "commit"}, {"oid": "c808054f79268b3199d219a48371493d2dacedfd", "url": "https://github.com/bakdata/conquery/commit/c808054f79268b3199d219a48371493d2dacedfd", "message": "Bump groovy from 3.0.2 to 3.0.3\n\nBumps [groovy](https://github.com/apache/groovy) from 3.0.2 to 3.0.3.\n- [Release notes](https://github.com/apache/groovy/releases)\n- [Commits](https://github.com/apache/groovy/commits)\n\nSigned-off-by: dependabot-preview[bot] <support@dependabot.com>", "committedDate": "2020-04-13T04:13:43Z", "type": "commit"}, {"oid": "3f6829b1fca6aab11c07077213b91031a57bd2c5", "url": "https://github.com/bakdata/conquery/commit/3f6829b1fca6aab11c07077213b91031a57bd2c5", "message": "Bump junit-jupiter from 5.6.1 to 5.6.2\n\nBumps [junit-jupiter](https://github.com/junit-team/junit5) from 5.6.1 to 5.6.2.\n- [Release notes](https://github.com/junit-team/junit5/releases)\n- [Commits](https://github.com/junit-team/junit5/compare/r5.6.1...r5.6.2)\n\nSigned-off-by: dependabot-preview[bot] <support@dependabot.com>", "committedDate": "2020-04-13T04:14:07Z", "type": "commit"}, {"oid": "e50b40c42955fca7418b21b3929a03f84645bb52", "url": "https://github.com/bakdata/conquery/commit/e50b40c42955fca7418b21b3929a03f84645bb52", "message": "Bump maven-shade-plugin from 3.2.2 to 3.2.3\n\nBumps [maven-shade-plugin](https://github.com/apache/maven-shade-plugin) from 3.2.2 to 3.2.3.\n- [Release notes](https://github.com/apache/maven-shade-plugin/releases)\n- [Commits](https://github.com/apache/maven-shade-plugin/compare/maven-shade-plugin-3.2.2...maven-shade-plugin-3.2.3)\n\nSigned-off-by: dependabot-preview[bot] <support@dependabot.com>", "committedDate": "2020-04-14T04:13:48Z", "type": "commit"}, {"oid": "06fcb29a50922ed1fa0bb3ef86cf16e0312aafbf", "url": "https://github.com/bakdata/conquery/commit/06fcb29a50922ed1fa0bb3ef86cf16e0312aafbf", "message": "wraps post response into object", "committedDate": "2020-04-14T09:11:48Z", "type": "commit"}, {"oid": "03247c8923839b4fff9fa004ef7200103812d98b", "url": "https://github.com/bakdata/conquery/commit/03247c8923839b4fff9fa004ef7200103812d98b", "message": "Fixes compile error", "committedDate": "2020-04-14T09:24:58Z", "type": "commit"}, {"oid": "76cf9062e70fdce5d392059441f29ef635d2121c", "url": "https://github.com/bakdata/conquery/commit/76cf9062e70fdce5d392059441f29ef635d2121c", "message": "fix autodoc", "committedDate": "2020-04-14T09:25:10Z", "type": "commit"}, {"oid": "69c52a78e7331fefbd3e8b0dbd894676766be4c1", "url": "https://github.com/bakdata/conquery/commit/69c52a78e7331fefbd3e8b0dbd894676766be4c1", "message": "Fixes test", "committedDate": "2020-04-14T11:30:35Z", "type": "commit"}, {"oid": "671049504ca361e7494f1ff044845e10ba52ded0", "url": "https://github.com/bakdata/conquery/commit/671049504ca361e7494f1ff044845e10ba52ded0", "message": "also use form values in hash computation", "committedDate": "2020-04-14T11:33:56Z", "type": "commit"}, {"oid": "6bbd7ec3b126d2b17d98e1824408f19e29bf6209", "url": "https://github.com/bakdata/conquery/commit/6bbd7ec3b126d2b17d98e1824408f19e29bf6209", "message": "refactor interfaces", "committedDate": "2020-04-14T12:42:41Z", "type": "commit"}, {"oid": "946190fdaa68fe2ce389d7f5448948cf52a70411", "url": "https://github.com/bakdata/conquery/commit/946190fdaa68fe2ce389d7f5448948cf52a70411", "message": "adds comment", "committedDate": "2020-04-14T12:57:27Z", "type": "commit"}, {"oid": "7d56ab9a4eb0036f7f6c523f9b83199569890a5f", "url": "https://github.com/bakdata/conquery/commit/7d56ab9a4eb0036f7f6c523f9b83199569890a5f", "message": "fix resouce registration", "committedDate": "2020-04-14T13:42:10Z", "type": "commit"}, {"oid": "cb518ab1e620fda8f19ab82bcb3d83e372cbaa95", "url": "https://github.com/bakdata/conquery/commit/cb518ab1e620fda8f19ab82bcb3d83e372cbaa95", "message": "fix autodoc", "committedDate": "2020-04-14T14:23:30Z", "type": "commit"}, {"oid": "71cc12e50b90723209839bf7e9160cf67b616ff6", "url": "https://github.com/bakdata/conquery/commit/71cc12e50b90723209839bf7e9160cf67b616ff6", "message": "stop CI with compile ERROR", "committedDate": "2020-04-14T14:37:20Z", "type": "forcePushed"}, {"oid": "cb518ab1e620fda8f19ab82bcb3d83e372cbaa95", "url": "https://github.com/bakdata/conquery/commit/cb518ab1e620fda8f19ab82bcb3d83e372cbaa95", "message": "fix autodoc", "committedDate": "2020-04-14T14:23:30Z", "type": "forcePushed"}, {"oid": "a33d77a23c0e476d6d11410d67a553ffe4748736", "url": "https://github.com/bakdata/conquery/commit/a33d77a23c0e476d6d11410d67a553ffe4748736", "message": "fix endless CI", "committedDate": "2020-04-14T14:59:40Z", "type": "commit"}, {"oid": "ccf9cc485ee7b37f28ff492131a9d64cd43ee9c6", "url": "https://github.com/bakdata/conquery/commit/ccf9cc485ee7b37f28ff492131a9d64cd43ee9c6", "message": "Merge a33d77a23c0e476d6d11410d67a553ffe4748736 into 8649f3475b0ec574554ede8140a23c771ad808b8", "committedDate": "2020-04-14T14:59:49Z", "type": "commit"}, {"oid": "41b70991f52c85caaf40043419e4c633fcc70cd7", "url": "https://github.com/bakdata/conquery/commit/41b70991f52c85caaf40043419e4c633fcc70cd7", "message": "automatic update to docs", "committedDate": "2020-04-14T15:01:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMTE4Nw==", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408611187", "bodyText": "Wof\u00fcr brauchst du den?", "author": "awildturtok", "createdAt": "2020-04-15T06:36:02Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.bakdata.conquery.apiv1;\n+\n+import java.time.Instant;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import com.bakdata.conquery.apiv1.forms.FormConfig;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigFullRepresentation;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigOverviewRepresentation;\n+import com.bakdata.conquery.io.jackson.Jackson;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.Ability;\n+import com.bakdata.conquery.models.auth.permissions.AbilitySets;\n+import com.bakdata.conquery.models.auth.permissions.FormConfigPermission;\n+import com.bakdata.conquery.models.auth.permissions.WildcardPermission;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.FormConfigId;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.shiro.authz.Permission;\n+import org.jetbrains.annotations.TestOnly;\n+\n+@RequiredArgsConstructor\n+public class FormConfigProcessor {\n+\t\n+\tprivate final MasterMetaStorage storage;\n+\t@Getter(onMethod = @__({@TestOnly}))\n+\tprivate final static ObjectMapper MAPPER = Jackson.MAPPER.copy().disable(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, SerializationFeature.WRITE_NULL_MAP_VALUES);;", "originalCommit": "41b70991f52c85caaf40043419e4c633fcc70cd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzNzk5Nw==", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408637997", "bodyText": "Den brauche ich um die Formularkonfiguration in andere Datens\u00e4tze zu convertieren.", "author": "thoniTUB", "createdAt": "2020-04-15T07:33:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMTE4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5bffe71002ca510e2cd336c0eba8c9b5fd8a7ac4", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java b/backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java\nindex 4f72ad9a9..e3c77116f 100644\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java\n+++ b/backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java\n\n@@ -86,7 +86,7 @@ public class FormConfigProcessor {\n \t\t\t\tcontinue;\n \t\t\t}\n \t\t\t\n-\t\t\tif(wpermission.getInstances().size()>1) {\n+\t\t\tif(!wpermission.getInstances().isEmpty()) {\n \t\t\t\t// Create new permission if it was a composite permission\n \t\t\t\tSet<String> instancesCleared = new HashSet<>(wpermission.getInstances());\n \t\t\t\tinstancesCleared.remove(formId.toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMjcwNQ==", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408612705", "bodyText": "Bin kein Fan von Streams rausgeben, brauchst du das als Stream hier/weiter unten?", "author": "awildturtok", "createdAt": "2020-04-15T06:39:48Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.bakdata.conquery.apiv1;\n+\n+import java.time.Instant;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import com.bakdata.conquery.apiv1.forms.FormConfig;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigFullRepresentation;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigOverviewRepresentation;\n+import com.bakdata.conquery.io.jackson.Jackson;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.Ability;\n+import com.bakdata.conquery.models.auth.permissions.AbilitySets;\n+import com.bakdata.conquery.models.auth.permissions.FormConfigPermission;\n+import com.bakdata.conquery.models.auth.permissions.WildcardPermission;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.FormConfigId;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.shiro.authz.Permission;\n+import org.jetbrains.annotations.TestOnly;\n+\n+@RequiredArgsConstructor\n+public class FormConfigProcessor {\n+\t\n+\tprivate final MasterMetaStorage storage;\n+\t@Getter(onMethod = @__({@TestOnly}))\n+\tprivate final static ObjectMapper MAPPER = Jackson.MAPPER.copy().disable(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, SerializationFeature.WRITE_NULL_MAP_VALUES);;\n+\t\n+\tpublic Stream<FormConfigOverviewRepresentation> getConfigsByFormType(@NonNull User user, @NonNull Optional<String> formType){", "originalCommit": "41b70991f52c85caaf40043419e4c633fcc70cd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzODUxMA==", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408638510", "bodyText": "Den Stream gebe ich als HTTP response zur\u00fcck. So spart man sich das repackaging in eine andere Collection.", "author": "thoniTUB", "createdAt": "2020-04-15T07:34:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMjcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzOTIwOA==", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408639208", "bodyText": "ach, ja stimmt du bist hier im processor", "author": "awildturtok", "createdAt": "2020-04-15T07:35:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMjcwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "5bffe71002ca510e2cd336c0eba8c9b5fd8a7ac4", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java b/backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java\nindex 4f72ad9a9..e3c77116f 100644\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java\n+++ b/backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java\n\n@@ -86,7 +86,7 @@ public class FormConfigProcessor {\n \t\t\t\tcontinue;\n \t\t\t}\n \t\t\t\n-\t\t\tif(wpermission.getInstances().size()>1) {\n+\t\t\tif(!wpermission.getInstances().isEmpty()) {\n \t\t\t\t// Create new permission if it was a composite permission\n \t\t\t\tSet<String> instancesCleared = new HashSet<>(wpermission.getInstances());\n \t\t\t\tinstancesCleared.remove(formId.toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMzEyMQ==", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408613121", "bodyText": "Kannst du die Klasse bitte etwas dokumentieren, mir ist nicht ganz klar was die ist oder macht", "author": "awildturtok", "createdAt": "2020-04-15T06:40:48Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.bakdata.conquery.apiv1;\n+\n+import java.time.Instant;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import com.bakdata.conquery.apiv1.forms.FormConfig;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigFullRepresentation;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigOverviewRepresentation;\n+import com.bakdata.conquery.io.jackson.Jackson;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.Ability;\n+import com.bakdata.conquery.models.auth.permissions.AbilitySets;\n+import com.bakdata.conquery.models.auth.permissions.FormConfigPermission;\n+import com.bakdata.conquery.models.auth.permissions.WildcardPermission;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.FormConfigId;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.shiro.authz.Permission;\n+import org.jetbrains.annotations.TestOnly;\n+\n+@RequiredArgsConstructor\n+public class FormConfigProcessor {", "originalCommit": "41b70991f52c85caaf40043419e4c633fcc70cd7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bffe71002ca510e2cd336c0eba8c9b5fd8a7ac4", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java b/backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java\nindex 4f72ad9a9..e3c77116f 100644\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java\n+++ b/backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java\n\n@@ -86,7 +86,7 @@ public class FormConfigProcessor {\n \t\t\t\tcontinue;\n \t\t\t}\n \t\t\t\n-\t\t\tif(wpermission.getInstances().size()>1) {\n+\t\t\tif(!wpermission.getInstances().isEmpty()) {\n \t\t\t\t// Create new permission if it was a composite permission\n \t\t\t\tSet<String> instancesCleared = new HashSet<>(wpermission.getInstances());\n \t\t\t\tinstancesCleared.remove(formId.toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMzUxNw==", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408613517", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif(wpermission.getInstances().size()>1) {\n          \n          \n            \n            \t\t\tif(!wpermission.getInstances().isEmpty()) {", "author": "awildturtok", "createdAt": "2020-04-15T06:41:44Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.bakdata.conquery.apiv1;\n+\n+import java.time.Instant;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import com.bakdata.conquery.apiv1.forms.FormConfig;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigFullRepresentation;\n+import com.bakdata.conquery.apiv1.forms.FormConfig.FormConfigOverviewRepresentation;\n+import com.bakdata.conquery.io.jackson.Jackson;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.Ability;\n+import com.bakdata.conquery.models.auth.permissions.AbilitySets;\n+import com.bakdata.conquery.models.auth.permissions.FormConfigPermission;\n+import com.bakdata.conquery.models.auth.permissions.WildcardPermission;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.FormConfigId;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.shiro.authz.Permission;\n+import org.jetbrains.annotations.TestOnly;\n+\n+@RequiredArgsConstructor\n+public class FormConfigProcessor {\n+\t\n+\tprivate final MasterMetaStorage storage;\n+\t@Getter(onMethod = @__({@TestOnly}))\n+\tprivate final static ObjectMapper MAPPER = Jackson.MAPPER.copy().disable(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, SerializationFeature.WRITE_NULL_MAP_VALUES);;\n+\t\n+\tpublic Stream<FormConfigOverviewRepresentation> getConfigsByFormType(@NonNull User user, @NonNull Optional<String> formType){\n+\t\tStream<FormConfig> stream = storage.getAllFormConfigs().stream()\n+\t\t\t.filter(c -> user.isPermitted(FormConfigPermission.onInstance(Ability.READ, c.getId())));\n+\t\tif(formType.isPresent()) {\n+\t\t\tstream = stream.filter(c -> c.getFormType().equals(formType.get()));\n+\t\t}\n+\t\t\n+\t\treturn stream.map(c -> c.overview(storage, user));\t\n+\t}\n+\n+\tpublic  FormConfigFullRepresentation getConfig(DatasetId datasetId, User user, FormConfigId formId) {\n+\t\tuser.checkPermission(FormConfigPermission.onInstance(Ability.READ, formId));\n+\t\tFormConfigFullRepresentation config = Objects.requireNonNull(storage.getFormConfig(formId), String.format(\"Could not find form config %s\", formId))\n+\t\t\t.tryTranslateToDataset(storage, datasetId, MAPPER, user);\n+\t\treturn config;\n+\t}\n+\n+\tpublic FormConfigId addConfig(User user, FormConfig config) {\n+\t\tconfig.setOwner(user.getId());\n+\t\tstorage.updateFormConfig(config);\n+\t\t\n+\t\tuser.addPermission(storage, FormConfigPermission.onInstance(AbilitySets.FORM_CONFIG_CREATOR, config.getId()));\n+\t\t\n+\t\treturn config.getId();\n+\t}\n+\n+\tpublic FormConfigFullRepresentation patchConfig(User user, DatasetId target, FormConfigId formId, MetaDataPatch patch) {\n+\t\tFormConfig config = Objects.requireNonNull(storage.getFormConfig(formId), String.format(\"Could not find form config %s\", formId));\n+\t\t\n+\t\tMetaDataPatch.patchIdentifialble(storage, user, config, patch, FormConfigPermission::onInstance);\n+\t\t\n+\t\tstorage.updateFormConfig(config);\n+\t\t\n+\t\treturn config.tryTranslateToDataset(storage, target, MAPPER, user);\n+\t}\n+\n+\tpublic void deleteConfig(User user, FormConfigId formId) {\n+\t\tuser.checkPermission(FormConfigPermission.onInstance(Ability.DELETE, formId));\n+\t\tstorage.removeFormConfig(formId);\n+\t\t// Delete corresponding permissions (Maybe better to put it into a slow job)\n+\t\tfor(Permission permission : user.getPermissions()) {\n+\t\t\tWildcardPermission wpermission = (WildcardPermission) permission;\n+\t\t\tif(!wpermission.getDomains().contains(FormConfigPermission.DOMAIN.toLowerCase())) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tif(!wpermission.getInstances().contains(formId.toString().toLowerCase())) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\t\n+\t\t\tif(wpermission.getInstances().size()>1) {", "originalCommit": "41b70991f52c85caaf40043419e4c633fcc70cd7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bffe71002ca510e2cd336c0eba8c9b5fd8a7ac4", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java b/backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java\nindex 4f72ad9a9..e3c77116f 100644\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java\n+++ b/backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java\n\n@@ -86,7 +86,7 @@ public class FormConfigProcessor {\n \t\t\t\tcontinue;\n \t\t\t}\n \t\t\t\n-\t\t\tif(wpermission.getInstances().size()>1) {\n+\t\t\tif(!wpermission.getInstances().isEmpty()) {\n \t\t\t\t// Create new permission if it was a composite permission\n \t\t\t\tSet<String> instancesCleared = new HashSet<>(wpermission.getInstances());\n \t\t\t\tinstancesCleared.remove(formId.toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxNTc2Nw==", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408615767", "bodyText": "unten kann null rauskommen?", "author": "awildturtok", "createdAt": "2020-04-15T06:47:13Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/FormConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package com.bakdata.conquery.apiv1.forms;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.execution.Labelable;\n+import com.bakdata.conquery.models.execution.Shareable;\n+import com.bakdata.conquery.models.execution.Taggable;\n+import com.bakdata.conquery.models.identifiable.IdentifiableImpl;\n+import com.bakdata.conquery.models.identifiable.ids.NamespacedId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.FormConfigId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n+import com.bakdata.conquery.models.query.QueryTranslator;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.NonNull;\n+import lombok.ToString;\n+import lombok.experimental.SuperBuilder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@ToString\n+@EqualsAndHashCode(callSuper = false)\n+public class FormConfig extends IdentifiableImpl<FormConfigId> implements Shareable, Labelable, Taggable{\n+\n+\t@NotEmpty\n+\tprivate String formType;\n+\tprivate UUID formId;\n+\tprivate String label;\n+\t@NotNull\n+\tprivate String[] tags = ArrayUtils.EMPTY_STRING_ARRAY;\n+\tprivate boolean shared = false;\n+\t@NotNull\n+\tprivate JsonNode values;\n+\tprivate UserId owner;\n+\t\n+\t\n+\tpublic FormConfig(String formType, JsonNode values) {\n+\t\tthis.formType = formType;\n+\t\tthis.values = values;\n+\t}\n+\n+\t@Override\n+\tpublic FormConfigId createId() {\n+\t\tif(formId == null) {\t\t\t\n+\t\t\tformId = UUID.randomUUID();\n+\t\t\tlabel = formId.toString();\n+\t\t}\n+\t\treturn new FormConfigId(formType, formId);\n+\t}\n+\n+\t/**\n+\t * Provides an overview (meta data) of this form configuration without the\n+\t * actual form field values.\n+\t */\n+\tpublic FormConfigOverviewRepresentation overview(MasterMetaStorage storage, User user) {\n+\t\t@NonNull\n+\t\tString ownerName = Optional.ofNullable(storage.getUser(owner)).map(User::getLabel).orElse(null);\n+\n+\t\treturn FormConfigOverviewRepresentation.builder()\n+\t\t\t.id(getId())\n+\t\t\t.formType(formType)\n+\t\t\t.label(label)\n+\t\t\t.tags(tags)\n+\t\t\t.ownerName(ownerName)\n+\t\t\t.own(owner.equals(user.getId()))\n+\t\t\t.shared(shared)\n+\t\t\t// system?\n+\t\t\t.build();\n+\t}\n+\n+\t/**\n+\t * Tries to convert the given raw form to the provided dataset. It does not\n+\t * check whether the {@link NamespacedId} that are converted in this processes\n+\t * are actually resolvable. Also, it tries to map the values to a subclass of\n+\t * {@link Form}, for conversion. If that is not possible the untranslated values\n+\t * are output.\n+\t */\n+\tpublic FormConfigFullRepresentation tryTranslateToDataset(MasterMetaStorage storage, DatasetId target, ObjectMapper mapper, User user) {\n+\t\tJsonNode finalRep = values;\n+\t\ttry {\n+\t\t\tForm intemediateRep = mapper.readerFor(Form.class).readValue(values.traverse());\n+\t\t\tForm translatedRep = QueryTranslator.replaceDataset(storage.getNamespaces(), intemediateRep, target);\n+\t\t\tfinalRep = mapper.valueToTree(translatedRep);\n+\t\t}\n+\t\tcatch (IOException e) {\n+\t\t\tlog.warn(\"Unable to translate form configuration {} to dataset {}. Sending untranslated version.\", getId(), target);\n+\t\t}\n+\n+\t\t@NonNull", "originalCommit": "41b70991f52c85caaf40043419e4c633fcc70cd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxNjA1Nw==", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408616057", "bodyText": "Eine Exception w\u00e4re da vermutlich angemessener unten zu werfen wenn du davon ausgehst, dass es nicht passieren kann", "author": "awildturtok", "createdAt": "2020-04-15T06:47:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxNTc2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MDQ1OA==", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408640458", "bodyText": "Die Annotation sollte ich hier wegmachen. Bei dem Owner hab ich mich an der bisherigen Implementation orientiert.\nDort kann der Ower auch null sein (wenn es system sein soll vielleicht).", "author": "thoniTUB", "createdAt": "2020-04-15T07:37:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxNTc2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e8544189faad6cfa5abe8dad85dcf779ef5b2df4", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/FormConfig.java b/backend/src/main/java/com/bakdata/conquery/apiv1/forms/FormConfig.java\ndeleted file mode 100644\nindex 29bfac82e..000000000\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/FormConfig.java\n+++ /dev/null\n\n@@ -1,155 +0,0 @@\n-package com.bakdata.conquery.apiv1.forms;\n-\n-import java.io.IOException;\n-import java.util.Optional;\n-import java.util.UUID;\n-\n-import javax.validation.constraints.NotNull;\n-\n-import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n-import com.bakdata.conquery.models.auth.entities.User;\n-import com.bakdata.conquery.models.execution.Labelable;\n-import com.bakdata.conquery.models.execution.Shareable;\n-import com.bakdata.conquery.models.execution.Taggable;\n-import com.bakdata.conquery.models.identifiable.IdentifiableImpl;\n-import com.bakdata.conquery.models.identifiable.ids.NamespacedId;\n-import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n-import com.bakdata.conquery.models.identifiable.ids.specific.FormConfigId;\n-import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n-import com.bakdata.conquery.models.query.QueryTranslator;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import lombok.AllArgsConstructor;\n-import lombok.Data;\n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.NoArgsConstructor;\n-import lombok.NonNull;\n-import lombok.ToString;\n-import lombok.experimental.SuperBuilder;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.commons.lang3.ArrayUtils;\n-import org.hibernate.validator.constraints.NotEmpty;\n-\n-@Slf4j\n-@Data\n-@AllArgsConstructor\n-@NoArgsConstructor\n-@ToString\n-@EqualsAndHashCode(callSuper = false)\n-public class FormConfig extends IdentifiableImpl<FormConfigId> implements Shareable, Labelable, Taggable{\n-\n-\t@NotEmpty\n-\tprivate String formType;\n-\tprivate UUID formId;\n-\tprivate String label;\n-\t@NotNull\n-\tprivate String[] tags = ArrayUtils.EMPTY_STRING_ARRAY;\n-\tprivate boolean shared = false;\n-\t@NotNull\n-\tprivate JsonNode values;\n-\tprivate UserId owner;\n-\t\n-\t\n-\tpublic FormConfig(String formType, JsonNode values) {\n-\t\tthis.formType = formType;\n-\t\tthis.values = values;\n-\t}\n-\n-\t@Override\n-\tpublic FormConfigId createId() {\n-\t\tif(formId == null) {\t\t\t\n-\t\t\tformId = UUID.randomUUID();\n-\t\t\tlabel = formId.toString();\n-\t\t}\n-\t\treturn new FormConfigId(formType, formId);\n-\t}\n-\n-\t/**\n-\t * Provides an overview (meta data) of this form configuration without the\n-\t * actual form field values.\n-\t */\n-\tpublic FormConfigOverviewRepresentation overview(MasterMetaStorage storage, User user) {\n-\t\t@NonNull\n-\t\tString ownerName = Optional.ofNullable(storage.getUser(owner)).map(User::getLabel).orElse(null);\n-\n-\t\treturn FormConfigOverviewRepresentation.builder()\n-\t\t\t.id(getId())\n-\t\t\t.formType(formType)\n-\t\t\t.label(label)\n-\t\t\t.tags(tags)\n-\t\t\t.ownerName(ownerName)\n-\t\t\t.own(owner.equals(user.getId()))\n-\t\t\t.shared(shared)\n-\t\t\t// system?\n-\t\t\t.build();\n-\t}\n-\n-\t/**\n-\t * Tries to convert the given raw form to the provided dataset. It does not\n-\t * check whether the {@link NamespacedId} that are converted in this processes\n-\t * are actually resolvable. Also, it tries to map the values to a subclass of\n-\t * {@link Form}, for conversion. If that is not possible the untranslated values\n-\t * are output.\n-\t */\n-\tpublic FormConfigFullRepresentation tryTranslateToDataset(MasterMetaStorage storage, DatasetId target, ObjectMapper mapper, User user) {\n-\t\tJsonNode finalRep = values;\n-\t\ttry {\n-\t\t\tForm intemediateRep = mapper.readerFor(Form.class).readValue(values.traverse());\n-\t\t\tForm translatedRep = QueryTranslator.replaceDataset(storage.getNamespaces(), intemediateRep, target);\n-\t\t\tfinalRep = mapper.valueToTree(translatedRep);\n-\t\t}\n-\t\tcatch (IOException e) {\n-\t\t\tlog.warn(\"Unable to translate form configuration {} to dataset {}. Sending untranslated version.\", getId(), target);\n-\t\t}\n-\n-\t\t@NonNull\n-\t\tString ownerName = Optional.ofNullable(storage.getUser(owner)).map(User::getLabel).orElse(null);\n-\n-\t\treturn FormConfigFullRepresentation.builder()\n-\t\t\t.id(getId()).formType(formType)\n-\t\t\t.label(label)\n-\t\t\t.tags(tags)\n-\t\t\t.ownerName(ownerName)\n-\t\t\t.own(user.getId().equals(owner))\n-\t\t\t.shared(shared)\n-\t\t\t// system?\n-\t\t\t.values(finalRep).build();\n-\t}\n-\n-\t/**\n-\t * API representation for the overview of all {@link FormConfig}s which does not\n-\t * include the form fields an their values.\n-\t */\n-\t@Getter\n-\t@SuperBuilder\n-\t@ToString\n-\t@EqualsAndHashCode(callSuper = false)\n-\tpublic static class FormConfigOverviewRepresentation {\n-\n-\t\tprivate FormConfigId id;\n-\t\tprivate String formType;\n-\t\tprivate String label;\n-\t\tprivate String[] tags;\n-\n-\t\tprivate String ownerName;\n-\t\tprivate boolean own;\n-\t\tprivate boolean shared;\n-\t\tprivate boolean system;\n-\n-\t}\n-\n-\t/**\n-\t * API representation for a single {@link FormConfig} which includes the form\n-\t * fields an their values.\n-\t */\n-\t@Getter\n-\t@SuperBuilder\n-\t@ToString(callSuper = true)\n-\t@EqualsAndHashCode(callSuper = true)\n-\tpublic static class FormConfigFullRepresentation extends FormConfigOverviewRepresentation {\n-\n-\t\tprivate JsonNode values;\n-\t}\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMjEzNQ==", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408632135", "bodyText": "Sollte Labelable nicht auch ein getLabel haben, dann w\u00fcrden die Klassen nicht einen Consumer MetaDataPatch erwarten sondern sich selbst und MetaDataPatch w\u00e4re ein TypeUnion all dieser Klassen?", "author": "awildturtok", "createdAt": "2020-04-15T07:22:07Z", "path": "backend/src/main/java/com/bakdata/conquery/models/execution/Labelable.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.bakdata.conquery.models.execution;\n+\n+import java.util.function.Consumer;\n+\n+import com.bakdata.conquery.apiv1.MetaDataPatch;\n+\n+/**\n+ * Interface for classes that are able to be patched with an {@link MetaDataPatch}.\n+ * Lets the implementing class set the label if the label in the patch is not {@code null}.\n+ */\n+public interface Labelable {\n+\tvoid setLabel(String label);\n+\t\n+\tdefault Consumer<MetaDataPatch> labeler() {", "originalCommit": "41b70991f52c85caaf40043419e4c633fcc70cd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0ODExMA==", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408648110", "bodyText": "Ja, get Label werde ich noch erg\u00e4nzen. Den zweiten Teil verstehe ich nicht so ganz. Kannst du das bitte etwas ausf\u00fchren?", "author": "thoniTUB", "createdAt": "2020-04-15T07:51:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMjEzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8544189faad6cfa5abe8dad85dcf779ef5b2df4", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/execution/Labelable.java b/backend/src/main/java/com/bakdata/conquery/models/execution/Labelable.java\ndeleted file mode 100644\nindex 4193e2a8c..000000000\n--- a/backend/src/main/java/com/bakdata/conquery/models/execution/Labelable.java\n+++ /dev/null\n\n@@ -1,21 +0,0 @@\n-package com.bakdata.conquery.models.execution;\n-\n-import java.util.function.Consumer;\n-\n-import com.bakdata.conquery.apiv1.MetaDataPatch;\n-\n-/**\n- * Interface for classes that are able to be patched with an {@link MetaDataPatch}.\n- * Lets the implementing class set the label if the label in the patch is not {@code null}.\n- */\n-public interface Labelable {\n-\tvoid setLabel(String label);\n-\t\n-\tdefault Consumer<MetaDataPatch> labeler() {\n-\t\treturn (patch) -> {\n-\t\t\tif (patch != null && patch.getLabel() != null) {\n-\t\t\t\tsetLabel(patch.getLabel());\n-\t\t\t}\n-\t\t};\t\t\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMjQ3Ng==", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408632476", "bodyText": "das sieht merkw\u00fcrdig aus", "author": "awildturtok", "createdAt": "2020-04-15T07:22:50Z", "path": "backend/src/main/java/com/bakdata/conquery/models/execution/Shareable.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.bakdata.conquery.models.execution;\n+\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+import com.bakdata.conquery.apiv1.MetaDataPatch;\n+import com.bakdata.conquery.apiv1.MetaDataPatch.PermissionCreator;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.AuthorizationHelper;\n+import com.bakdata.conquery.models.auth.entities.Group;\n+import com.bakdata.conquery.models.auth.entities.PermissionOwner;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.AbilitySets;\n+import com.bakdata.conquery.models.auth.permissions.ConqueryPermission;\n+import com.bakdata.conquery.models.identifiable.Identifiable;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.util.QueryUtils;\n+import lombok.NonNull;\n+\n+/**\n+ * Interface for classes that are able to be patched with an {@link MetaDataPatch}.\n+ * Allows sharing of implementations among groups of a given user.\n+ */\n+public interface Shareable {\n+\tstatic final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(Shareable.class);", "originalCommit": "41b70991f52c85caaf40043419e4c633fcc70cd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0ODcxNQ==", "url": "https://github.com/bakdata/conquery/pull/1150#discussion_r408648715", "bodyText": "Kann ich noch kurzen. Leider Funktioniert die Lombok-Logger Annotation nicht auf Interfaces.\nHast du eine Idee warum?", "author": "thoniTUB", "createdAt": "2020-04-15T07:52:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMjQ3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e8544189faad6cfa5abe8dad85dcf779ef5b2df4", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/execution/Shareable.java b/backend/src/main/java/com/bakdata/conquery/models/execution/Shareable.java\ndeleted file mode 100644\nindex 868bef723..000000000\n--- a/backend/src/main/java/com/bakdata/conquery/models/execution/Shareable.java\n+++ /dev/null\n\n@@ -1,89 +0,0 @@\n-package com.bakdata.conquery.models.execution;\n-\n-import java.util.List;\n-import java.util.function.Consumer;\n-import java.util.stream.Collectors;\n-\n-import com.bakdata.conquery.apiv1.MetaDataPatch;\n-import com.bakdata.conquery.apiv1.MetaDataPatch.PermissionCreator;\n-import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n-import com.bakdata.conquery.models.auth.AuthorizationHelper;\n-import com.bakdata.conquery.models.auth.entities.Group;\n-import com.bakdata.conquery.models.auth.entities.PermissionOwner;\n-import com.bakdata.conquery.models.auth.entities.User;\n-import com.bakdata.conquery.models.auth.permissions.AbilitySets;\n-import com.bakdata.conquery.models.auth.permissions.ConqueryPermission;\n-import com.bakdata.conquery.models.identifiable.Identifiable;\n-import com.bakdata.conquery.models.identifiable.ids.IId;\n-import com.bakdata.conquery.util.QueryUtils;\n-import lombok.NonNull;\n-\n-/**\n- * Interface for classes that are able to be patched with an {@link MetaDataPatch}.\n- * Allows sharing of implementations among groups of a given user.\n- */\n-public interface Shareable {\n-\tstatic final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(Shareable.class);\n-\t\n-\tboolean isShared();\n-\tvoid setShared(boolean shared);\n-\t\n-\t\n-\tdefault  <ID extends IId<?>,S extends Identifiable<? extends ID> & Shareable> Consumer<MetaDataPatch> sharer(\n-\t\tMasterMetaStorage storage,\n-\t\tUser user,\n-\t\tPermissionCreator<ID> sharedPermissionCreator) {\n-\t\tif(!(this instanceof Identifiable<?>)) {\n-\t\t\tlog.warn(\"Cannot share {} ({}) because it does not implement Identifiable\", this.getClass(), this.toString());\n-\t\t\treturn QueryUtils.getNoOpEntryPoint();\n-\t\t}\n-\t\treturn (patch) -> {\n-\t\t\tif(patch != null && patch.getShared()) {\n-\t\t\t\tList<Group> groups;\n-\t\t\t\tif(patch.getGroups() != null) {\n-\t\t\t\t\t// Resolve the provided groups\n-\t\t\t\t\tgroups = patch.getGroups().stream().map(id -> storage.getGroup(id)).collect(Collectors.toList());\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\t// If no groups are provided by the instance is to be shared, share it with all groups the user is member of\n-\t\t\t\t\tgroups = AuthorizationHelper.getGroupsOf(user, storage);\n-\t\t\t\t}\n-\t\t\t\tfor(Group group : groups) {\n-\t\t\t\t\tshareWithOther(\n-\t\t\t\t\t\tstorage,\n-\t\t\t\t\t\tuser,\n-\t\t\t\t\t\t(S) this,\n-\t\t\t\t\t\tsharedPermissionCreator, \n-\t\t\t\t\t\tgroup,\n-\t\t\t\t\t\tpatch.getShared());\n-\t\t\t\t}\n-\t\t\t}\n-\t\t};\n-\t\t\n-\t}\n-\n-\t\n-\t/**\n-\t * (Un)Shares a query with a specific group. Set or unsets the shared flag.\n-\t * Does persist this change made to the {@link Shareable}. \n-\t */\n-\tpublic static <ID extends IId<?>, S extends Identifiable<? extends ID> & Shareable, O extends PermissionOwner<? extends IId<O>>> void shareWithOther(\n-\t\t@NonNull MasterMetaStorage storage,\n-\t\t@NonNull User user,\n-\t\t@NonNull S shareable,\n-\t\t@NonNull PermissionCreator<ID> sharedPermissionCreator,\n-\t\t@NonNull O other,\n-\t\tboolean shared) {\n-\t\t\n-\t\tConqueryPermission sharePermission = sharedPermissionCreator.apply(AbilitySets.FORM_CONFIG_SHAREHOLDER, shareable.getId());\n-\t\tif (shared) {\n-\t\t\tother.addPermission(storage, sharePermission);\n-\t\t\tlog.trace(\"User {} shares query {}. Adding permission {} to group {}.\", user, shareable, shareable.getId(), sharePermission, other);\n-\t\t}\n-\t\telse {\n-\t\t\tother.removePermission(storage, sharePermission);\n-\t\t\tlog.trace(\"User {} unshares query {}. Removing permission {} from group {}.\", user, shareable, shareable.getId(), sharePermission, other);\n-\t\t}\n-\t\tshareable.setShared(shared);\n-\t}\n-}\n"}}, {"oid": "8867fd9594d1cd9d3de6f72473bd7ad9065ebe4f", "url": "https://github.com/bakdata/conquery/commit/8867fd9594d1cd9d3de6f72473bd7ad9065ebe4f", "message": "format code", "committedDate": "2020-04-15T10:18:10Z", "type": "commit"}, {"oid": "5bffe71002ca510e2cd336c0eba8c9b5fd8a7ac4", "url": "https://github.com/bakdata/conquery/commit/5bffe71002ca510e2cd336c0eba8c9b5fd8a7ac4", "message": "Update backend/src/main/java/com/bakdata/conquery/apiv1/FormConfigProcessor.java\r\n\r\nreview change\n\nCo-Authored-By: awildturtok <1553491+awildturtok@users.noreply.github.com>", "committedDate": "2020-04-15T12:37:56Z", "type": "commit"}, {"oid": "8057e141fbff4566a588675645b63836f79f55ea", "url": "https://github.com/bakdata/conquery/commit/8057e141fbff4566a588675645b63836f79f55ea", "message": "Merge branch 'develop' into feature/form-config\n\n# Conflicts:\n#\tbackend/src/main/java/com/bakdata/conquery/tasks/QueryCleanupTask.java", "committedDate": "2020-04-15T12:53:57Z", "type": "commit"}, {"oid": "e8544189faad6cfa5abe8dad85dcf779ef5b2df4", "url": "https://github.com/bakdata/conquery/commit/e8544189faad6cfa5abe8dad85dcf779ef5b2df4", "message": "Merge pull request #1156 from bakdata/dependabot/maven/org.apache.maven.plugins-maven-shade-plugin-3.2.3\n\nBump maven-shade-plugin from 3.2.2 to 3.2.3", "committedDate": "2020-04-15T13:42:38Z", "type": "commit"}, {"oid": "8ec7a45b8e3bde6bb87968855ce520c6aa86745d", "url": "https://github.com/bakdata/conquery/commit/8ec7a45b8e3bde6bb87968855ce520c6aa86745d", "message": "Merge pull request #1154 from bakdata/dependabot/maven/org.codehaus.groovy-groovy-3.0.3\n\nBump groovy from 3.0.2 to 3.0.3", "committedDate": "2020-04-15T13:42:51Z", "type": "commit"}, {"oid": "73c6ce1072c69f6bc7095ce63856fdff18be1c90", "url": "https://github.com/bakdata/conquery/commit/73c6ce1072c69f6bc7095ce63856fdff18be1c90", "message": "Merge pull request #1152 from bakdata/dependabot/maven/io.github.classgraph-classgraph-4.8.69\n\nBump classgraph from 4.8.67 to 4.8.69", "committedDate": "2020-04-15T13:43:00Z", "type": "commit"}, {"oid": "fbdce01603c19038471316b02ccc6b92499227d7", "url": "https://github.com/bakdata/conquery/commit/fbdce01603c19038471316b02ccc6b92499227d7", "message": "Merge pull request #1146 from bakdata/dependabot/maven/com.github.javaparser-javaparser-symbol-solver-core-3.15.18\n\nBump javaparser-symbol-solver-core from 3.15.17 to 3.15.18", "committedDate": "2020-04-15T13:43:13Z", "type": "commit"}, {"oid": "0a4b428deadbdb68d90328023a80674a45b42583", "url": "https://github.com/bakdata/conquery/commit/0a4b428deadbdb68d90328023a80674a45b42583", "message": "Merge pull request #1155 from bakdata/dependabot/maven/org.junit.jupiter-junit-jupiter-5.6.2\n\nBump junit-jupiter from 5.6.1 to 5.6.2", "committedDate": "2020-04-15T13:46:01Z", "type": "commit"}, {"oid": "e5a5f48d92966286e72055751608f393ea87727a", "url": "https://github.com/bakdata/conquery/commit/e5a5f48d92966286e72055751608f393ea87727a", "message": "review changes and advanced check for the shared flag by testing groups", "committedDate": "2020-04-15T14:58:54Z", "type": "commit"}, {"oid": "2e1225a2af25a05bef6b662a5b7c033ab0a789bc", "url": "https://github.com/bakdata/conquery/commit/2e1225a2af25a05bef6b662a5b7c033ab0a789bc", "message": "Merge e5a5f48d92966286e72055751608f393ea87727a into 0a4b428deadbdb68d90328023a80674a45b42583", "committedDate": "2020-04-15T14:59:29Z", "type": "commit"}, {"oid": "8369c8c24bc3133b9b124b12d9ee7f15a32ed81e", "url": "https://github.com/bakdata/conquery/commit/8369c8c24bc3133b9b124b12d9ee7f15a32ed81e", "message": "automatic update to docs", "committedDate": "2020-04-15T15:01:39Z", "type": "commit"}]}