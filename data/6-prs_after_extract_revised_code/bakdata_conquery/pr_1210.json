{"pr_number": 1210, "pr_title": "Feature/form config dataset specific", "pr_createdAt": "2020-05-26T16:18:34Z", "pr_url": "https://github.com/bakdata/conquery/pull/1210", "timeline": [{"oid": "6e215280727fd2ffc0930b619fb5a6ccdcaede8c", "url": "https://github.com/bakdata/conquery/commit/6e215280727fd2ffc0930b619fb5a6ccdcaede8c", "message": "makes config dataset specific", "committedDate": "2020-05-26T16:18:11Z", "type": "commit"}, {"oid": "6e215280727fd2ffc0930b619fb5a6ccdcaede8c", "url": "https://github.com/bakdata/conquery/commit/6e215280727fd2ffc0930b619fb5a6ccdcaede8c", "message": "makes config dataset specific", "committedDate": "2020-05-26T16:18:11Z", "type": "forcePushed"}, {"oid": "c3a968b3ce4b545fa8bc935b7b36d3cffede15c2", "url": "https://github.com/bakdata/conquery/commit/c3a968b3ce4b545fa8bc935b7b36d3cffede15c2", "message": "Merge 6e215280727fd2ffc0930b619fb5a6ccdcaede8c into 26b3cbfa843d84707ebb6740309376d3e83e7c57", "committedDate": "2020-05-27T06:26:27Z", "type": "commit"}, {"oid": "38d5443a5dd4fa3c22e06f16c99159cd9c424b97", "url": "https://github.com/bakdata/conquery/commit/38d5443a5dd4fa3c22e06f16c99159cd9c424b97", "message": "automatic update to docs", "committedDate": "2020-05-27T06:28:31Z", "type": "commit"}, {"oid": "5791cd920480bdd3210e11f31596b03ee9ec5afd", "url": "https://github.com/bakdata/conquery/commit/5791cd920480bdd3210e11f31596b03ee9ec5afd", "message": "updates test", "committedDate": "2020-05-27T11:07:23Z", "type": "commit"}, {"oid": "f3b86b2e171b9fe2713b01248a2158515ac8856b", "url": "https://github.com/bakdata/conquery/commit/f3b86b2e171b9fe2713b01248a2158515ac8856b", "message": "WIP translate on add", "committedDate": "2020-05-27T22:12:08Z", "type": "commit"}, {"oid": "548253535185d89feb0218be3b51e589bf28747d", "url": "https://github.com/bakdata/conquery/commit/548253535185d89feb0218be3b51e589bf28747d", "message": "remove share permission for receivers of a shared config", "committedDate": "2020-06-03T10:20:07Z", "type": "commit"}, {"oid": "dbf5b09169e3220802e0259b4a274d63d4b8d9ee", "url": "https://github.com/bakdata/conquery/commit/dbf5b09169e3220802e0259b4a274d63d4b8d9ee", "message": "adds missing id collection", "committedDate": "2020-06-03T10:30:36Z", "type": "commit"}, {"oid": "929b3fa168f52e3259f637563e8876e475907706", "url": "https://github.com/bakdata/conquery/commit/929b3fa168f52e3259f637563e8876e475907706", "message": "adds add-Method for config to mastermeta storage", "committedDate": "2020-06-03T10:31:17Z", "type": "commit"}, {"oid": "11b104c6239700b04e663cff37c6f8196f2ac75f", "url": "https://github.com/bakdata/conquery/commit/11b104c6239700b04e663cff37c6f8196f2ac75f", "message": "assigns default empty collections to CQConcept", "committedDate": "2020-06-03T10:32:35Z", "type": "commit"}, {"oid": "b95b173967759af26122c5de09565e981cc04f41", "url": "https://github.com/bakdata/conquery/commit/b95b173967759af26122c5de09565e981cc04f41", "message": "translated configurations that are added to the store upon adding the configuration", "committedDate": "2020-06-03T11:26:37Z", "type": "commit"}, {"oid": "c5bb174d722cff8b13393380b13f84e8914ef7b7", "url": "https://github.com/bakdata/conquery/commit/c5bb174d722cff8b13393380b13f84e8914ef7b7", "message": "only translates configurations that hold namespaced ids", "committedDate": "2020-06-03T11:27:28Z", "type": "commit"}, {"oid": "975c45138d7237b59f0002579a45986824f6b2a6", "url": "https://github.com/bakdata/conquery/commit/975c45138d7237b59f0002579a45986824f6b2a6", "message": "Merge c5bb174d722cff8b13393380b13f84e8914ef7b7 into 26b3cbfa843d84707ebb6740309376d3e83e7c57", "committedDate": "2020-06-03T11:27:42Z", "type": "commit"}, {"oid": "3b1b0a5739639a956558f3b7a158ed4894fc9ba8", "url": "https://github.com/bakdata/conquery/commit/3b1b0a5739639a956558f3b7a158ed4894fc9ba8", "message": "automatic update to docs", "committedDate": "2020-06-03T11:29:31Z", "type": "commit"}, {"oid": "4109a8f9ae4dfec7893c7a946e72db164103e01a", "url": "https://github.com/bakdata/conquery/commit/4109a8f9ae4dfec7893c7a946e72db164103e01a", "message": "adds missing negation in translation of form values", "committedDate": "2020-06-15T07:48:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5NzY1NA==", "url": "https://github.com/bakdata/conquery/pull/1210#discussion_r439997654", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tlog.warn(\"Unable to translate form configuration {} to dataset {}.\", getId(), target);\n          \n          \n            \n            \t\t\tlog.warn(\"Unable to translate form configuration {} to dataset {}.\", getId(), target, e);", "author": "awildturtok", "createdAt": "2020-06-15T08:03:50Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/FormConfig.java", "diffHunk": "@@ -93,36 +96,57 @@ public FormConfigOverviewRepresentation overview(MasterMetaStorage storage, User\n \t}\n \n \t/**\n-\t * Tries to convert the given raw form to the provided dataset. It does not\n+\t * Tries to convert this form to the provided dataset. It does not\n \t * check whether the {@link NamespacedId} that are converted in this processes\n \t * are actually resolvable. Also, it tries to map the values to a subclass of\n-\t * {@link Form}, for conversion. If that is not possible the untranslated values\n-\t * are output.\n+\t * {@link Form}, for conversion. If that is not possible the an empty optional is returned.\n \t */\n-\tpublic FormConfigFullRepresentation tryTranslateToDataset(MasterMetaStorage storage, DatasetId target, ObjectMapper mapper, User user) {\n+\tpublic Optional<FormConfig> tryTranslateToDataset(Namespaces namespaces, DatasetId target, ObjectMapper mapper) {\n \t\tJsonNode finalRep = values;\n \t\ttry {\n-\t\t\tForm intemediateRep = mapper.readerFor(Form.class).readValue(values.traverse());\n-\t\t\tForm translatedRep = QueryTranslator.replaceDataset(storage.getNamespaces(), intemediateRep, target);\n+\t\t\tForm intermediateRep = mapper.readerFor(Form.class).readValue(values);\n+\t\t\tif (! NamespacedIdHolding.class.isAssignableFrom(intermediateRep.getClass())) {\n+\t\t\t\tlog.trace(\"Not translating FormConfig ({}) with form type ({}) to dataset ({}), because it does not hold any namespaced ids for translation.\", this.getId(), this.getFormType(), target);\n+\t\t\t\treturn Optional.empty();\n+\t\t\t}\n+\t\t\tForm translatedRep = QueryTranslator.replaceDataset(namespaces, intermediateRep, target);\n \t\t\tfinalRep = mapper.valueToTree(translatedRep);\n \t\t}\n \t\tcatch (IOException e) {\n-\t\t\tlog.warn(\"Unable to translate form configuration {} to dataset {}. Sending untranslated version.\", getId(), target);\n+\t\t\tlog.warn(\"Unable to translate form configuration {} to dataset {}.\", getId(), target);", "originalCommit": "4109a8f9ae4dfec7893c7a946e72db164103e01a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e436c966fc56aa50d94cb408301302d84204dc6e", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/FormConfig.java b/backend/src/main/java/com/bakdata/conquery/apiv1/forms/FormConfig.java\nindex 5653b1cda..009c5f6dd 100644\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/FormConfig.java\n+++ b/backend/src/main/java/com/bakdata/conquery/apiv1/forms/FormConfig.java\n\n@@ -113,7 +113,7 @@ public class FormConfig extends IdentifiableImpl<FormConfigId> implements Sharea\n \t\t\tfinalRep = mapper.valueToTree(translatedRep);\n \t\t}\n \t\tcatch (IOException e) {\n-\t\t\tlog.warn(\"Unable to translate form configuration {} to dataset {}.\", getId(), target);\n+\t\t\tlog.warn(\"Unable to translate form configuration {} to dataset {}.\", getId(), target, e);\n \t\t\treturn Optional.empty();\n \t\t}\n \t\t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5ODA3Nw==", "url": "https://github.com/bakdata/conquery/pull/1210#discussion_r439998077", "bodyText": "system ist bisher nur PSM automatisch generierte aber das feature habe ich nicht mehr gemerged weil das automatische l\u00f6schen da mMn sinnvoller war.", "author": "awildturtok", "createdAt": "2020-06-15T08:04:43Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/FormConfig.java", "diffHunk": "@@ -93,36 +96,57 @@ public FormConfigOverviewRepresentation overview(MasterMetaStorage storage, User\n \t}\n \n \t/**\n-\t * Tries to convert the given raw form to the provided dataset. It does not\n+\t * Tries to convert this form to the provided dataset. It does not\n \t * check whether the {@link NamespacedId} that are converted in this processes\n \t * are actually resolvable. Also, it tries to map the values to a subclass of\n-\t * {@link Form}, for conversion. If that is not possible the untranslated values\n-\t * are output.\n+\t * {@link Form}, for conversion. If that is not possible the an empty optional is returned.\n \t */\n-\tpublic FormConfigFullRepresentation tryTranslateToDataset(MasterMetaStorage storage, DatasetId target, ObjectMapper mapper, User user) {\n+\tpublic Optional<FormConfig> tryTranslateToDataset(Namespaces namespaces, DatasetId target, ObjectMapper mapper) {\n \t\tJsonNode finalRep = values;\n \t\ttry {\n-\t\t\tForm intemediateRep = mapper.readerFor(Form.class).readValue(values.traverse());\n-\t\t\tForm translatedRep = QueryTranslator.replaceDataset(storage.getNamespaces(), intemediateRep, target);\n+\t\t\tForm intermediateRep = mapper.readerFor(Form.class).readValue(values);\n+\t\t\tif (! NamespacedIdHolding.class.isAssignableFrom(intermediateRep.getClass())) {\n+\t\t\t\tlog.trace(\"Not translating FormConfig ({}) with form type ({}) to dataset ({}), because it does not hold any namespaced ids for translation.\", this.getId(), this.getFormType(), target);\n+\t\t\t\treturn Optional.empty();\n+\t\t\t}\n+\t\t\tForm translatedRep = QueryTranslator.replaceDataset(namespaces, intermediateRep, target);\n \t\t\tfinalRep = mapper.valueToTree(translatedRep);\n \t\t}\n \t\tcatch (IOException e) {\n-\t\t\tlog.warn(\"Unable to translate form configuration {} to dataset {}. Sending untranslated version.\", getId(), target);\n+\t\t\tlog.warn(\"Unable to translate form configuration {} to dataset {}.\", getId(), target);\n+\t\t\treturn Optional.empty();\n \t\t}\n+\t\t\n+\t\tFormConfig translatedConf = new FormConfig(\n+\t\t\ttarget,\n+\t\t\tformType,\n+\t\t\tformId,\n+\t\t\tlabel,\n+\t\t\ttags,\n+\t\t\tshared,\n+\t\t\tfinalRep,\n+\t\t\towner,\n+\t\t\tcreationTime\n+\t\t\t);\n+\n+\t\treturn Optional.of(translatedConf);\n+\t}\n \n-\t\t@NonNull\n+\t/**\n+\t * Return the full representation of the configuration with the configured form fields and meta data.\n+\t */\n+\tpublic FormConfigFullRepresentation fullRepresentation(MasterMetaStorage storage, User requestingUser){\n \t\tString ownerName = Optional.ofNullable(storage.getUser(owner)).map(User::getLabel).orElse(null);\n-\n \t\treturn FormConfigFullRepresentation.builder()\n \t\t\t.id(getId()).formType(formType)\n \t\t\t.label(label)\n \t\t\t.tags(tags)\n \t\t\t.ownerName(ownerName)\n-\t\t\t.own(user.getId().equals(owner))\n+\t\t\t.own(requestingUser != null? requestingUser.getId().equals(owner) : false)\n \t\t\t.createdAt(getCreationTime().atZone(ZoneId.systemDefault()))\n \t\t\t.shared(shared)\n-\t\t\t// system?\n-\t\t\t.values(finalRep).build();\n+\t\t\t// system? TODO discuss how system is determined (may check if owning user is in a special system group or so)", "originalCommit": "4109a8f9ae4dfec7893c7a946e72db164103e01a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e436c966fc56aa50d94cb408301302d84204dc6e", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/FormConfig.java b/backend/src/main/java/com/bakdata/conquery/apiv1/forms/FormConfig.java\nindex 5653b1cda..009c5f6dd 100644\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/forms/FormConfig.java\n+++ b/backend/src/main/java/com/bakdata/conquery/apiv1/forms/FormConfig.java\n\n@@ -113,7 +113,7 @@ public class FormConfig extends IdentifiableImpl<FormConfigId> implements Sharea\n \t\t\tfinalRep = mapper.valueToTree(translatedRep);\n \t\t}\n \t\tcatch (IOException e) {\n-\t\t\tlog.warn(\"Unable to translate form configuration {} to dataset {}.\", getId(), target);\n+\t\t\tlog.warn(\"Unable to translate form configuration {} to dataset {}.\", getId(), target, e);\n \t\t\treturn Optional.empty();\n \t\t}\n \t\t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5ODkxMQ==", "url": "https://github.com/bakdata/conquery/pull/1210#discussion_r439998911", "bodyText": "deine indentation spinnt hier?", "author": "awildturtok", "createdAt": "2020-06-15T08:06:11Z", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormConfigProcessor.java", "diffHunk": "@@ -65,17 +79,62 @@\n \t */\n \tpublic FormConfigFullRepresentation getConfig(DatasetId datasetId, User user, FormConfigId formId) {\n \t\tuser.checkPermission(FormConfigPermission.onInstance(Ability.READ, formId));\n-\t\tFormConfigFullRepresentation config = Objects.requireNonNull(storage.getFormConfig(formId), String.format(\"Could not find form config %s\", formId))\n-\t\t\t.tryTranslateToDataset(storage, datasetId, MAPPER, user);\n-\t\treturn config;\n+\t\treturn Objects.requireNonNull(storage.getFormConfig(formId), String.format(\"Could not find form config %s\", formId))\n+\t\t\t.fullRepresentation(storage, user);\n+\t}\n+\t\n+\t/**\n+\t * Adds the provided config to the desired dataset and the datasets that the user has access to (has the READ ability on the Dataset), if the config is translatable to those.\n+\t */\n+\tpublic FormConfigId addConfig(User user, DatasetId targetDataset, FormConfig config) {\n+\t\tuser.checkPermission(DatasetPermission.onInstance(Ability.READ.asSet(), targetDataset));\n+\t\t\n+\t\tList<DatasetId> translateToDatasets = storage.getNamespaces()", "originalCommit": "4109a8f9ae4dfec7893c7a946e72db164103e01a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21c3036d57d37de0d150fdb92a2d2c9c0607dd36", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormConfigProcessor.java b/backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormConfigProcessor.java\nindex dfdc640ee..b15a09807 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormConfigProcessor.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormConfigProcessor.java\n\n@@ -84,21 +84,20 @@ public class FormConfigProcessor {\n \t}\n \t\n \t/**\n-\t * Adds the provided config to the desired dataset and the datasets that the user has access to (has the READ ability on the Dataset), if the config is translatable to those.\n+\t * Adds the provided config to the desired dataset and the datasets that the\n+\t * user has access to (has the READ ability on the Dataset), if the config is\n+\t * translatable to those.\n \t */\n \tpublic FormConfigId addConfig(User user, DatasetId targetDataset, FormConfig config) {\n \t\tuser.checkPermission(DatasetPermission.onInstance(Ability.READ.asSet(), targetDataset));\n-\t\t\n-\t\tList<DatasetId> translateToDatasets = storage.getNamespaces()\n-\t\t.getAllDatasets()\n-\t\t.stream()\n-\t\t.map(Identifiable::getId)\n-\t\t.filter(dId -> user.isPermitted(DatasetPermission.onInstance(Ability.READ.asSet(), dId)))\n-\t\t.collect(Collectors.toList());\n-\t\t\n-\t\t\n+\n+\t\tList<DatasetId> translateToDatasets = storage.getNamespaces().getAllDatasets().stream()\n+\t\t\t.map(Identifiable::getId)\n+\t\t\t.filter(dId -> user.isPermitted(DatasetPermission.onInstance(Ability.READ.asSet(), dId)))\n+\t\t\t.collect(Collectors.toList());\n+\n \t\ttranslateToDatasets.remove(targetDataset);\n-\t\t\n+\n \t\treturn addConfigAndTranslations(user, targetDataset, translateToDatasets, config);\n \t}\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1NTgyNg==", "url": "https://github.com/bakdata/conquery/pull/1210#discussion_r440055826", "bodyText": "ifPresentOrElse auf newline?", "author": "awildturtok", "createdAt": "2020-06-15T09:43:55Z", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormConfigProcessor.java", "diffHunk": "@@ -65,17 +79,62 @@\n \t */\n \tpublic FormConfigFullRepresentation getConfig(DatasetId datasetId, User user, FormConfigId formId) {\n \t\tuser.checkPermission(FormConfigPermission.onInstance(Ability.READ, formId));\n-\t\tFormConfigFullRepresentation config = Objects.requireNonNull(storage.getFormConfig(formId), String.format(\"Could not find form config %s\", formId))\n-\t\t\t.tryTranslateToDataset(storage, datasetId, MAPPER, user);\n-\t\treturn config;\n+\t\treturn Objects.requireNonNull(storage.getFormConfig(formId), String.format(\"Could not find form config %s\", formId))\n+\t\t\t.fullRepresentation(storage, user);\n+\t}\n+\t\n+\t/**\n+\t * Adds the provided config to the desired dataset and the datasets that the user has access to (has the READ ability on the Dataset), if the config is translatable to those.\n+\t */\n+\tpublic FormConfigId addConfig(User user, DatasetId targetDataset, FormConfig config) {\n+\t\tuser.checkPermission(DatasetPermission.onInstance(Ability.READ.asSet(), targetDataset));\n+\t\t\n+\t\tList<DatasetId> translateToDatasets = storage.getNamespaces()\n+\t\t.getAllDatasets()\n+\t\t.stream()\n+\t\t.map(Identifiable::getId)\n+\t\t.filter(dId -> user.isPermitted(DatasetPermission.onInstance(Ability.READ.asSet(), dId)))\n+\t\t.collect(Collectors.toList());\n+\t\t\n+\t\t\n+\t\ttranslateToDatasets.remove(targetDataset);\n+\t\t\n+\t\treturn addConfigAndTranslations(user, targetDataset, translateToDatasets, config);\n+\t}\n+\t\n+\t/**\n+\t * Adds the config to the dataset it was submitted under and also to all other datasets it can be translated to.\n+\t * This method does not check permissions.\n+\t */\n+\tpublic FormConfigId addConfigAndTranslations(User user, DatasetId targetDataset, Collection<DatasetId> translateTo, FormConfig config) {\n+\n+\t\t// Add the config immediately to the submitted dataset\n+\t\taddConfigToDataset(user, targetDataset, config);\n+\n+\t\t// Add the translated config to the other datasets (synchronous at the moment)\n+\t\tfor (DatasetId target : translateTo) {\n+\t\t\tif (target.equals(targetDataset)) {\n+\t\t\t\t// Skip the actual target dataset here because its already added\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tconfig.tryTranslateToDataset(storage.getNamespaces(), target, MAPPER).ifPresentOrElse(", "originalCommit": "4109a8f9ae4dfec7893c7a946e72db164103e01a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21c3036d57d37de0d150fdb92a2d2c9c0607dd36", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormConfigProcessor.java b/backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormConfigProcessor.java\nindex dfdc640ee..b15a09807 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormConfigProcessor.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/forms/frontendconfiguration/FormConfigProcessor.java\n\n@@ -84,21 +84,20 @@ public class FormConfigProcessor {\n \t}\n \t\n \t/**\n-\t * Adds the provided config to the desired dataset and the datasets that the user has access to (has the READ ability on the Dataset), if the config is translatable to those.\n+\t * Adds the provided config to the desired dataset and the datasets that the\n+\t * user has access to (has the READ ability on the Dataset), if the config is\n+\t * translatable to those.\n \t */\n \tpublic FormConfigId addConfig(User user, DatasetId targetDataset, FormConfig config) {\n \t\tuser.checkPermission(DatasetPermission.onInstance(Ability.READ.asSet(), targetDataset));\n-\t\t\n-\t\tList<DatasetId> translateToDatasets = storage.getNamespaces()\n-\t\t.getAllDatasets()\n-\t\t.stream()\n-\t\t.map(Identifiable::getId)\n-\t\t.filter(dId -> user.isPermitted(DatasetPermission.onInstance(Ability.READ.asSet(), dId)))\n-\t\t.collect(Collectors.toList());\n-\t\t\n-\t\t\n+\n+\t\tList<DatasetId> translateToDatasets = storage.getNamespaces().getAllDatasets().stream()\n+\t\t\t.map(Identifiable::getId)\n+\t\t\t.filter(dId -> user.isPermitted(DatasetPermission.onInstance(Ability.READ.asSet(), dId)))\n+\t\t\t.collect(Collectors.toList());\n+\n \t\ttranslateToDatasets.remove(targetDataset);\n-\t\t\n+\n \t\treturn addConfigAndTranslations(user, targetDataset, translateToDatasets, config);\n \t}\n \t\n"}}, {"oid": "e436c966fc56aa50d94cb408301302d84204dc6e", "url": "https://github.com/bakdata/conquery/commit/e436c966fc56aa50d94cb408301302d84204dc6e", "message": "Update backend/src/main/java/com/bakdata/conquery/apiv1/forms/FormConfig.java\n\nCo-authored-by: awildturtok <1553491+awildturtok@users.noreply.github.com>", "committedDate": "2020-06-15T10:18:26Z", "type": "commit"}, {"oid": "21c3036d57d37de0d150fdb92a2d2c9c0607dd36", "url": "https://github.com/bakdata/conquery/commit/21c3036d57d37de0d150fdb92a2d2c9c0607dd36", "message": "review changes", "committedDate": "2020-06-15T10:34:26Z", "type": "commit"}, {"oid": "127f74dcf26c2bf39ccce9b9d3960fe248856ba7", "url": "https://github.com/bakdata/conquery/commit/127f74dcf26c2bf39ccce9b9d3960fe248856ba7", "message": "introduces external and internal representation of formconfig to evade id creation conflict", "committedDate": "2020-06-15T13:33:48Z", "type": "commit"}, {"oid": "2452b0b21bff81497d4c2e10c4066585912c9a6d", "url": "https://github.com/bakdata/conquery/commit/2452b0b21bff81497d4c2e10c4066585912c9a6d", "message": "Merge 127f74dcf26c2bf39ccce9b9d3960fe248856ba7 into 26b3cbfa843d84707ebb6740309376d3e83e7c57", "committedDate": "2020-06-15T14:00:58Z", "type": "commit"}, {"oid": "d4ccfaa9dc7acf0f38b831ce96570ce06597f985", "url": "https://github.com/bakdata/conquery/commit/d4ccfaa9dc7acf0f38b831ce96570ce06597f985", "message": "automatic update to docs", "committedDate": "2020-06-15T14:02:58Z", "type": "commit"}, {"oid": "93d21c273b1e95e1a52c72b8d33b89fc1bd8c830", "url": "https://github.com/bakdata/conquery/commit/93d21c273b1e95e1a52c72b8d33b89fc1bd8c830", "message": "make visitor-pattern and id collection more defensive", "committedDate": "2020-06-16T14:06:57Z", "type": "commit"}, {"oid": "22b15339149698920c231f1b218581aa0fa15ce1", "url": "https://github.com/bakdata/conquery/commit/22b15339149698920c231f1b218581aa0fa15ce1", "message": "Merge 93d21c273b1e95e1a52c72b8d33b89fc1bd8c830 into 26b3cbfa843d84707ebb6740309376d3e83e7c57", "committedDate": "2020-06-16T14:07:25Z", "type": "commit"}, {"oid": "313e4b83db31453b3635ccff1cb89214a8424ad8", "url": "https://github.com/bakdata/conquery/commit/313e4b83db31453b3635ccff1cb89214a8424ad8", "message": "automatic update to docs", "committedDate": "2020-06-16T14:09:02Z", "type": "commit"}, {"oid": "4448ba20a6a8eedb53ab9c721c71ba47b5d1fdfe", "url": "https://github.com/bakdata/conquery/commit/4448ba20a6a8eedb53ab9c721c71ba47b5d1fdfe", "message": "fix id reflection test", "committedDate": "2020-06-17T12:30:39Z", "type": "commit"}, {"oid": "c2c3277b5787240fd5961e7303a38f1c785dae19", "url": "https://github.com/bakdata/conquery/commit/c2c3277b5787240fd5961e7303a38f1c785dae19", "message": "Merge 4448ba20a6a8eedb53ab9c721c71ba47b5d1fdfe into 26b3cbfa843d84707ebb6740309376d3e83e7c57", "committedDate": "2020-06-17T12:30:48Z", "type": "commit"}, {"oid": "4d39b4014cabbe4cdb7c9d27c499b42bedeb188f", "url": "https://github.com/bakdata/conquery/commit/4d39b4014cabbe4cdb7c9d27c499b42bedeb188f", "message": "automatic update to docs", "committedDate": "2020-06-17T12:32:45Z", "type": "commit"}]}