{"pr_number": 1303, "pr_title": "More compression Schemes for Reals and Integers", "pr_createdAt": "2020-07-28T15:07:40Z", "pr_url": "https://github.com/bakdata/conquery/pull/1303", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NzgxNA==", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r462347814", "bodyText": "Die Pr\u00e4zision sollte ein default haben, aber einstellbar sein in der import.json", "author": "thoniTUB", "createdAt": "2020-07-29T14:34:30Z", "path": "backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/RealParser.java", "diffHunk": "@@ -6,19 +6,47 @@\n import com.bakdata.conquery.models.types.parser.NoopTransformer;\n import com.bakdata.conquery.models.types.parser.Parser;\n import com.bakdata.conquery.models.types.specific.RealTypeDouble;\n+import com.bakdata.conquery.models.types.specific.RealTypeFloat;\n import com.bakdata.conquery.util.NumberParsing;\n import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n \n+@Slf4j\n @ToString(callSuper = true)\n public class RealParser extends Parser<Double> {\n \n+\tprivate float floatULP = Float.NEGATIVE_INFINITY;\n+\tprivate double min = Double.POSITIVE_INFINITY, max = Double.NEGATIVE_INFINITY;\n+\n+\n \t@Override\n \tprotected Double parseValue(String value) throws ParsingException {\n \t\treturn NumberParsing.parseDouble(value);\n \t}\n \n+\t@Override\n+\tprotected void registerValue(Double v) {\n+\t\tif(v.isInfinite() || v.isNaN()) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfloatULP = Math.max(floatULP, Math.ulp(v.floatValue()));\n+\t\tmin = Math.min(v, min);\n+\t\tmax = Math.max(v, max);\n+\t}\n+\n \t@Override\n \tprotected Decision<Double, ?, ? extends CType<Double, ?>> decideType() {\n+\t\t// TODO: 27.07.2020 FK: Make this configurable\n+\t\tlog.debug(\"{}\", this);\n+\n+\t\tif(floatULP < 1e-2){", "originalCommit": "a6f46ffd90573137b9eda88bcfb492637ec6a703", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99e60b028dd6b93c40ec1b2d5bc58667c09d4570", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/RealParser.java b/backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/RealParser.java\nindex 5a25dfed1..f470aee7e 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/RealParser.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/RealParser.java\n\n@@ -5,19 +5,17 @@ import com.bakdata.conquery.models.types.CType;\n import com.bakdata.conquery.models.types.parser.Decision;\n import com.bakdata.conquery.models.types.parser.NoopTransformer;\n import com.bakdata.conquery.models.types.parser.Parser;\n+import com.bakdata.conquery.models.types.parser.Transformer;\n import com.bakdata.conquery.models.types.specific.RealTypeDouble;\n import com.bakdata.conquery.models.types.specific.RealTypeFloat;\n import com.bakdata.conquery.util.NumberParsing;\n+import lombok.NonNull;\n import lombok.ToString;\n-import lombok.extern.slf4j.Slf4j;\n \n-@Slf4j\n @ToString(callSuper = true)\n public class RealParser extends Parser<Double> {\n \n-\tprivate float floatULP = Float.NEGATIVE_INFINITY;\n-\tprivate double min = Double.POSITIVE_INFINITY, max = Double.NEGATIVE_INFINITY;\n-\n+\tprivate double floatULP = Float.NEGATIVE_INFINITY;\n \n \t@Override\n \tprotected Double parseValue(String value) throws ParsingException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0OTcxOQ==", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r462349719", "bodyText": "Etwas doku zur strategie bitte", "author": "thoniTUB", "createdAt": "2020-07-29T14:36:51Z", "path": "backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/RealParser.java", "diffHunk": "@@ -6,19 +6,47 @@\n import com.bakdata.conquery.models.types.parser.NoopTransformer;\n import com.bakdata.conquery.models.types.parser.Parser;\n import com.bakdata.conquery.models.types.specific.RealTypeDouble;\n+import com.bakdata.conquery.models.types.specific.RealTypeFloat;\n import com.bakdata.conquery.util.NumberParsing;\n import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n \n+@Slf4j\n @ToString(callSuper = true)\n public class RealParser extends Parser<Double> {\n \n+\tprivate float floatULP = Float.NEGATIVE_INFINITY;\n+\tprivate double min = Double.POSITIVE_INFINITY, max = Double.NEGATIVE_INFINITY;\n+\n+\n \t@Override\n \tprotected Double parseValue(String value) throws ParsingException {\n \t\treturn NumberParsing.parseDouble(value);\n \t}\n \n+\t@Override\n+\tprotected void registerValue(Double v) {\n+\t\tif(v.isInfinite() || v.isNaN()) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfloatULP = Math.max(floatULP, Math.ulp(v.floatValue()));\n+\t\tmin = Math.min(v, min);\n+\t\tmax = Math.max(v, max);\n+\t}\n+\n \t@Override\n \tprotected Decision<Double, ?, ? extends CType<Double, ?>> decideType() {", "originalCommit": "a6f46ffd90573137b9eda88bcfb492637ec6a703", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99e60b028dd6b93c40ec1b2d5bc58667c09d4570", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/RealParser.java b/backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/RealParser.java\nindex 5a25dfed1..f470aee7e 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/RealParser.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/RealParser.java\n\n@@ -5,19 +5,17 @@ import com.bakdata.conquery.models.types.CType;\n import com.bakdata.conquery.models.types.parser.Decision;\n import com.bakdata.conquery.models.types.parser.NoopTransformer;\n import com.bakdata.conquery.models.types.parser.Parser;\n+import com.bakdata.conquery.models.types.parser.Transformer;\n import com.bakdata.conquery.models.types.specific.RealTypeDouble;\n import com.bakdata.conquery.models.types.specific.RealTypeFloat;\n import com.bakdata.conquery.util.NumberParsing;\n+import lombok.NonNull;\n import lombok.ToString;\n-import lombok.extern.slf4j.Slf4j;\n \n-@Slf4j\n @ToString(callSuper = true)\n public class RealParser extends Parser<Double> {\n \n-\tprivate float floatULP = Float.NEGATIVE_INFINITY;\n-\tprivate double min = Double.POSITIVE_INFINITY, max = Double.NEGATIVE_INFINITY;\n-\n+\tprivate double floatULP = Float.NEGATIVE_INFINITY;\n \n \t@Override\n \tprotected Double parseValue(String value) throws ParsingException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0OTg2Ng==", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r462349866", "bodyText": "doku", "author": "thoniTUB", "createdAt": "2020-07-29T14:37:03Z", "path": "backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/VarIntParser.java", "diffHunk": "@@ -40,38 +34,23 @@ protected Integer parseValue(String value) throws ParsingException {\n \t\n \t@Override\n \tpublic Decision<Integer, Number, VarIntType> decideType() {", "originalCommit": "a6f46ffd90573137b9eda88bcfb492637ec6a703", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99e60b028dd6b93c40ec1b2d5bc58667c09d4570", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/VarIntParser.java b/backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/VarIntParser.java\nindex 69d0ac827..5bd2b07e7 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/VarIntParser.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/VarIntParser.java\n\n@@ -34,23 +40,38 @@ public class VarIntParser extends Parser<Integer> {\n \t\n \t@Override\n \tpublic Decision<Integer, Number, VarIntType> decideType() {\n-\t\t// TODO: 28.07.2020 FK: VarIntBoolean for two fields\n-\t\t// TODO: 28.07.2020 FK: Restructure this, so that this can be folded into IntParser where all unwrap to longs instead\n-\n-\t\tif (maxValue - minValue < ((int) Byte.MAX_VALUE - (int) Byte.MIN_VALUE)) {\n-\t\t\treturn new Decision<>(\n-\t\t\t\t\tvalue -> (byte) (value - minValue),\n-\t\t\t\t\tnew VarIntTypeByte(minValue, maxValue)\n+\t\tif(maxValue+1 <= Byte.MAX_VALUE && minValue >= Byte.MIN_VALUE) {\n+\t\t\treturn new Decision<Integer, Number, VarIntType>(\n+\t\t\t\tnew Transformer<Integer, Number>() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic Number transform(@NonNull Integer value) {\n+\t\t\t\t\t\treturn value.byteValue();\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\tnew VarIntTypeByte((byte)minValue, (byte)maxValue)\n \t\t\t);\n \t\t}\n-\n-\t\tif (maxValue - minValue < ((long) Short.MAX_VALUE - (long) Short.MIN_VALUE)) {\n-\t\t\treturn new Decision<>(\n-\t\t\t\t\tvalue -> (short) (value - minValue),\n-\t\t\t\t\tnew VarIntTypeShort(minValue, maxValue)\n+\t\tif(maxValue+1 <= Short.MAX_VALUE && minValue >= Short.MIN_VALUE) {\n+\t\t\treturn new Decision<Integer, Number, VarIntType>(\n+\t\t\t\tnew Transformer<Integer, Number>() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic Number transform(@NonNull Integer value) {\n+\t\t\t\t\t\treturn value.shortValue();\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\tnew VarIntTypeShort((short)minValue, (short)maxValue)\n+\t\t\t);\n+\t\t}\n+\t\telse {\n+\t\t\treturn new Decision<Integer, Number, VarIntType>(\n+\t\t\t\tnew Transformer<Integer, Number>() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic Number transform(@NonNull Integer value) {\n+\t\t\t\t\t\treturn value;\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\tnew VarIntTypeInt(minValue, maxValue)\n \t\t\t);\n \t\t}\n-\n-\t\treturn new Decision<>(value -> value - minValue, new VarIntTypeInt(minValue, maxValue));\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1MzA1Ng==", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r462353056", "bodyText": "Sollte nicht als letztes VatIntTypeLong kommen?", "author": "thoniTUB", "createdAt": "2020-07-29T14:41:08Z", "path": "backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/VarIntParser.java", "diffHunk": "@@ -40,38 +34,23 @@ protected Integer parseValue(String value) throws ParsingException {\n \t\n \t@Override\n \tpublic Decision<Integer, Number, VarIntType> decideType() {\n-\t\tif(maxValue+1 <= Byte.MAX_VALUE && minValue >= Byte.MIN_VALUE) {\n-\t\t\treturn new Decision<Integer, Number, VarIntType>(\n-\t\t\t\tnew Transformer<Integer, Number>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Number transform(@NonNull Integer value) {\n-\t\t\t\t\t\treturn value.byteValue();\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\tnew VarIntTypeByte((byte)minValue, (byte)maxValue)\n-\t\t\t);\n-\t\t}\n-\t\tif(maxValue+1 <= Short.MAX_VALUE && minValue >= Short.MIN_VALUE) {\n-\t\t\treturn new Decision<Integer, Number, VarIntType>(\n-\t\t\t\tnew Transformer<Integer, Number>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Number transform(@NonNull Integer value) {\n-\t\t\t\t\t\treturn value.shortValue();\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\tnew VarIntTypeShort((short)minValue, (short)maxValue)\n+\t\t// TODO: 28.07.2020 FK: VarIntBoolean for two fields\n+\t\t// TODO: 28.07.2020 FK: Restructure this, so that this can be folded into IntParser where all unwrap to longs instead\n+\n+\t\tif (maxValue - minValue < ((int) Byte.MAX_VALUE - (int) Byte.MIN_VALUE)) {\n+\t\t\treturn new Decision<>(\n+\t\t\t\t\tvalue -> (byte) (value - minValue),\n+\t\t\t\t\tnew VarIntTypeByte(minValue, maxValue)\n \t\t\t);\n \t\t}\n-\t\telse {\n-\t\t\treturn new Decision<Integer, Number, VarIntType>(\n-\t\t\t\tnew Transformer<Integer, Number>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Number transform(@NonNull Integer value) {\n-\t\t\t\t\t\treturn value;\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\tnew VarIntTypeInt(minValue, maxValue)\n+\n+\t\tif (maxValue - minValue < ((long) Short.MAX_VALUE - (long) Short.MIN_VALUE)) {\n+\t\t\treturn new Decision<>(\n+\t\t\t\t\tvalue -> (short) (value - minValue),\n+\t\t\t\t\tnew VarIntTypeShort(minValue, maxValue)\n \t\t\t);\n \t\t}\n+\n+\t\treturn new Decision<>(value -> value - minValue, new VarIntTypeInt(minValue, maxValue));", "originalCommit": "a6f46ffd90573137b9eda88bcfb492637ec6a703", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2MTM2Nw==", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r462361367", "bodyText": "Oder sollte nicht einer Wahnung abgegeben werden, dass Long nicht abgebildet werden kann", "author": "thoniTUB", "createdAt": "2020-07-29T14:52:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1MzA1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzEzMw==", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r462367133", "bodyText": "die zwei muss ich noch verheiraten, aus irgendeinem grund ist VarIntLong ein sonderfall", "author": "awildturtok", "createdAt": "2020-07-29T14:59:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1MzA1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "99e60b028dd6b93c40ec1b2d5bc58667c09d4570", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/VarIntParser.java b/backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/VarIntParser.java\nindex 69d0ac827..5bd2b07e7 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/VarIntParser.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/types/parser/specific/VarIntParser.java\n\n@@ -34,23 +40,38 @@ public class VarIntParser extends Parser<Integer> {\n \t\n \t@Override\n \tpublic Decision<Integer, Number, VarIntType> decideType() {\n-\t\t// TODO: 28.07.2020 FK: VarIntBoolean for two fields\n-\t\t// TODO: 28.07.2020 FK: Restructure this, so that this can be folded into IntParser where all unwrap to longs instead\n-\n-\t\tif (maxValue - minValue < ((int) Byte.MAX_VALUE - (int) Byte.MIN_VALUE)) {\n-\t\t\treturn new Decision<>(\n-\t\t\t\t\tvalue -> (byte) (value - minValue),\n-\t\t\t\t\tnew VarIntTypeByte(minValue, maxValue)\n+\t\tif(maxValue+1 <= Byte.MAX_VALUE && minValue >= Byte.MIN_VALUE) {\n+\t\t\treturn new Decision<Integer, Number, VarIntType>(\n+\t\t\t\tnew Transformer<Integer, Number>() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic Number transform(@NonNull Integer value) {\n+\t\t\t\t\t\treturn value.byteValue();\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\tnew VarIntTypeByte((byte)minValue, (byte)maxValue)\n \t\t\t);\n \t\t}\n-\n-\t\tif (maxValue - minValue < ((long) Short.MAX_VALUE - (long) Short.MIN_VALUE)) {\n-\t\t\treturn new Decision<>(\n-\t\t\t\t\tvalue -> (short) (value - minValue),\n-\t\t\t\t\tnew VarIntTypeShort(minValue, maxValue)\n+\t\tif(maxValue+1 <= Short.MAX_VALUE && minValue >= Short.MIN_VALUE) {\n+\t\t\treturn new Decision<Integer, Number, VarIntType>(\n+\t\t\t\tnew Transformer<Integer, Number>() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic Number transform(@NonNull Integer value) {\n+\t\t\t\t\t\treturn value.shortValue();\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\tnew VarIntTypeShort((short)minValue, (short)maxValue)\n+\t\t\t);\n+\t\t}\n+\t\telse {\n+\t\t\treturn new Decision<Integer, Number, VarIntType>(\n+\t\t\t\tnew Transformer<Integer, Number>() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic Number transform(@NonNull Integer value) {\n+\t\t\t\t\t\treturn value;\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\tnew VarIntTypeInt(minValue, maxValue)\n \t\t\t);\n \t\t}\n-\n-\t\treturn new Decision<>(value -> value - minValue, new VarIntTypeInt(minValue, maxValue));\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1NjgzNg==", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r462356836", "bodyText": "Warum gibt das ein int zuruck und kein long? Das verwirrt mich gerade etwas", "author": "thoniTUB", "createdAt": "2020-07-29T14:46:02Z", "path": "backend/src/main/java/com/bakdata/conquery/models/types/specific/VarIntType.java", "diffHunk": "@@ -17,6 +17,6 @@ public boolean canStoreNull() {\n \t\n \t@Override\n \tpublic Integer createScriptValue(Number value) {\n-\t\treturn value.intValue();\n+\t\treturn toInt(value);", "originalCommit": "a6f46ffd90573137b9eda88bcfb492637ec6a703", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99e60b028dd6b93c40ec1b2d5bc58667c09d4570", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/types/specific/VarIntType.java b/backend/src/main/java/com/bakdata/conquery/models/types/specific/VarIntType.java\nindex 4538c9adb..6d2b66292 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/types/specific/VarIntType.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/types/specific/VarIntType.java\n\n@@ -17,6 +17,6 @@ public abstract class VarIntType extends CType<Integer, Number> {\n \t\n \t@Override\n \tpublic Integer createScriptValue(Number value) {\n-\t\treturn toInt(value);\n+\t\treturn value.intValue();\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1ODg5MQ==", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r462358891", "bodyText": "hier kann doch ein integer overflow passieren", "author": "thoniTUB", "createdAt": "2020-07-29T14:48:51Z", "path": "backend/src/main/java/com/bakdata/conquery/models/types/specific/VarIntTypeByte.java", "diffHunk": "@@ -2,25 +2,24 @@\n \n import com.bakdata.conquery.io.cps.CPSType;\n import com.bakdata.conquery.models.types.CType;\n-\n import lombok.Getter;\n \n @CPSType(base=CType.class, id=\"VAR_INT_BYTE\")\n @Getter\n public class VarIntTypeByte extends VarIntType {\n \n-\tprivate final byte maxValue;\n-\tprivate final byte minValue;\n+\tprivate final long maxValue;\n+\tprivate final long minValue;\n \t\n-\tpublic VarIntTypeByte(byte minValue, byte maxValue) {\n+\tpublic VarIntTypeByte(long minValue, long maxValue) {\n \t\tsuper(byte.class);\n \t\tthis.minValue = minValue;\n \t\tthis.maxValue = maxValue;\n \t}\n \n \t@Override\n \tpublic int toInt(Number value) {\n-\t\treturn value.byteValue();\n+\t\treturn (int) (value.intValue() + minValue);", "originalCommit": "a6f46ffd90573137b9eda88bcfb492637ec6a703", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99e60b028dd6b93c40ec1b2d5bc58667c09d4570", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/types/specific/VarIntTypeByte.java b/backend/src/main/java/com/bakdata/conquery/models/types/specific/VarIntTypeByte.java\nindex f4c6af859..7e2009dad 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/types/specific/VarIntTypeByte.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/types/specific/VarIntTypeByte.java\n\n@@ -2,16 +2,17 @@ package com.bakdata.conquery.models.types.specific;\n \n import com.bakdata.conquery.io.cps.CPSType;\n import com.bakdata.conquery.models.types.CType;\n+\n import lombok.Getter;\n \n @CPSType(base=CType.class, id=\"VAR_INT_BYTE\")\n @Getter\n public class VarIntTypeByte extends VarIntType {\n \n-\tprivate final long maxValue;\n-\tprivate final long minValue;\n+\tprivate final byte maxValue;\n+\tprivate final byte minValue;\n \t\n-\tpublic VarIntTypeByte(long minValue, long maxValue) {\n+\tpublic VarIntTypeByte(byte minValue, byte maxValue) {\n \t\tsuper(byte.class);\n \t\tthis.minValue = minValue;\n \t\tthis.maxValue = maxValue;\n"}}, {"oid": "99e60b028dd6b93c40ec1b2d5bc58667c09d4570", "url": "https://github.com/bakdata/conquery/commit/99e60b028dd6b93c40ec1b2d5bc58667c09d4570", "message": "WIP Real Type storing doubles", "committedDate": "2020-08-26T12:56:18Z", "type": "commit"}, {"oid": "243892411eb6b8b344636592daafc7d554e18438", "url": "https://github.com/bakdata/conquery/commit/243892411eb6b8b344636592daafc7d554e18438", "message": "add logging", "committedDate": "2020-08-26T12:56:18Z", "type": "commit"}, {"oid": "b16554af2e444bebf115d9d492e83b895a368e9c", "url": "https://github.com/bakdata/conquery/commit/b16554af2e444bebf115d9d492e83b895a368e9c", "message": "Missing template for realtype", "committedDate": "2020-08-26T12:56:18Z", "type": "commit"}, {"oid": "ccc3a917ca83319c367067a943b5902493064dcb", "url": "https://github.com/bakdata/conquery/commit/ccc3a917ca83319c367067a943b5902493064dcb", "message": "Cleanup Transformer, migrate to Functionalinteface", "committedDate": "2020-08-26T12:56:18Z", "type": "commit"}, {"oid": "2f98bb91d0bbf7dde873daec10f22ed66c0e4513", "url": "https://github.com/bakdata/conquery/commit/2f98bb91d0bbf7dde873daec10f22ed66c0e4513", "message": "undo changes for non float types to reduce feature size", "committedDate": "2020-08-26T13:25:41Z", "type": "forcePushed"}, {"oid": "e7eac084efae37713cf1e38aec448f10d5171f01", "url": "https://github.com/bakdata/conquery/commit/e7eac084efae37713cf1e38aec448f10d5171f01", "message": "added null storage for Real", "committedDate": "2020-10-01T14:58:34Z", "type": "commit"}, {"oid": "e7eac084efae37713cf1e38aec448f10d5171f01", "url": "https://github.com/bakdata/conquery/commit/e7eac084efae37713cf1e38aec448f10d5171f01", "message": "added null storage for Real", "committedDate": "2020-10-01T14:58:34Z", "type": "forcePushed"}, {"oid": "3ab16decec4c00e076f19f19a1235f042d177d68", "url": "https://github.com/bakdata/conquery/commit/3ab16decec4c00e076f19f19a1235f042d177d68", "message": "fix interface usage", "committedDate": "2020-10-01T15:00:32Z", "type": "commit"}, {"oid": "cf2b407f67e73e33e60c7372e42fc31ee355408d", "url": "https://github.com/bakdata/conquery/commit/cf2b407f67e73e33e60c7372e42fc31ee355408d", "message": "Merge branch 'develop' into feature/double-typ-float", "committedDate": "2020-10-01T15:19:30Z", "type": "commit"}, {"oid": "2bcdde7fc170a651678fd05a256e495bb6c8990f", "url": "https://github.com/bakdata/conquery/commit/2bcdde7fc170a651678fd05a256e495bb6c8990f", "message": "add RealTypeFloat to SerializationTest", "committedDate": "2020-10-02T07:59:09Z", "type": "commit"}, {"oid": "f146a41c59e8550ec53614d24c87d7c9a86d2bca", "url": "https://github.com/bakdata/conquery/commit/f146a41c59e8550ec53614d24c87d7c9a86d2bca", "message": "Config for Parsers and apply usage", "committedDate": "2020-10-02T08:34:36Z", "type": "commit"}, {"oid": "840a820bec8b715e96c1ed3b957b33e0a7e63deb", "url": "https://github.com/bakdata/conquery/commit/840a820bec8b715e96c1ed3b957b33e0a7e63deb", "message": "Add missing ParserConfig", "committedDate": "2020-10-02T08:42:07Z", "type": "commit"}, {"oid": "bdfdef30d2faa42dbad651275e2c5e7acd355aff", "url": "https://github.com/bakdata/conquery/commit/bdfdef30d2faa42dbad651275e2c5e7acd355aff", "message": "automatic update to docs", "committedDate": "2020-10-02T08:44:28Z", "type": "commit"}, {"oid": "816c71a0b72a111b5a714668bacf09a41dee817f", "url": "https://github.com/bakdata/conquery/commit/816c71a0b72a111b5a714668bacf09a41dee817f", "message": "Add some documentation", "committedDate": "2020-10-02T08:47:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3NTk3Nw==", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r498775977", "bodyText": "Doku pls", "author": "thoniTUB", "createdAt": "2020-10-02T11:55:49Z", "path": "backend/src/main/java/com/bakdata/conquery/models/config/ParserConfig.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.bakdata.conquery.models.config;\n+\n+import javax.validation.constraints.Min;\n+\n+import lombok.Data;\n+\n+@Data\n+public class ParserConfig {\n+\t@Min(0)\n+\tprivate final double minPrecision = 1e-4;", "originalCommit": "816c71a0b72a111b5a714668bacf09a41dee817f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea1a1d1b19c7ba49fbd8473dba0dcac5e877e91e", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/config/ParserConfig.java b/backend/src/main/java/com/bakdata/conquery/models/config/ParserConfig.java\nindex e703ffae5..546738db8 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/config/ParserConfig.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/config/ParserConfig.java\n\n@@ -1,11 +1,14 @@\n package com.bakdata.conquery.models.config;\n \n-import javax.validation.constraints.Min;\n-\n import lombok.Data;\n \n @Data\n public class ParserConfig {\n-\t@Min(0)\n-\tprivate final double minPrecision = 1e-4;\n+\t/**\n+\t * Minimum required double precision to switch from floats to doubles.\n+\t * If set to a positive value, preprocessing will select float values for columns with at least minPrecision ulp.\n+\t * @see com.bakdata.conquery.models.types.parser.specific.RealParser#decideType()\n+\t * @see Math#ulp(float)\n+\t */\n+\tprivate final double minPrecision = Double.MIN_VALUE;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NDQ3Ng==", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r498784476", "bodyText": "Der REAL-Parser fehlt hier", "author": "thoniTUB", "createdAt": "2020-10-02T12:16:13Z", "path": "backend/src/test/java/com/bakdata/conquery/models/events/generation/GenerationTests.java", "diffHunk": "@@ -109,25 +110,27 @@\n \t}\n \n \tpublic Bucket generateBucket(List<Object[]> arrays) throws IOException {\n+\t\tfinal ParserConfig parserConfig = new ParserConfig();\n+\n \t\tParser[] parser = new Parser[] {\n-\t\t\tMajorTypeId.DATE.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser(),\n-\t\t\tMajorTypeId.DECIMAL.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.INTEGER.createParser(),\n-\t\t\tMajorTypeId.DECIMAL.createParser(),\n-\t\t\tMajorTypeId.STRING.createParser()\n+\t\t\tMajorTypeId.DATE.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\tMajorTypeId.DECIMAL.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\tMajorTypeId.DECIMAL.createParser(parserConfig),\n+\t\t\tMajorTypeId.STRING.createParser(parserConfig)", "originalCommit": "816c71a0b72a111b5a714668bacf09a41dee817f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0MjYyMw==", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r499842623", "bodyText": "@awildturtok warum f\u00fcgst du den Realparser hier nicht ein? ist das problematisch mit double oder float und der Randomness?", "author": "thoniTUB", "createdAt": "2020-10-05T20:07:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NDQ3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "818ea6968607a951783b24309870d057baeb67e7", "chunk": "diff --git a/backend/src/test/java/com/bakdata/conquery/models/events/generation/GenerationTests.java b/backend/src/test/java/com/bakdata/conquery/models/events/generation/GenerationTests.java\nindex 490407d2c..77163c14f 100644\n--- a/backend/src/test/java/com/bakdata/conquery/models/events/generation/GenerationTests.java\n+++ b/backend/src/test/java/com/bakdata/conquery/models/events/generation/GenerationTests.java\n\n@@ -45,105 +46,141 @@ import org.junit.jupiter.params.provider.MethodSource;\n \n @Slf4j\n public class GenerationTests {\n+\n+\tprivate static final double requiredPrecision = Math.ulp(100f);\n+\n \tpublic static Stream<Arguments> createRandomContent() {\n \t\treturn IntStream\n-\t\t\t.of(100)\n-\t\t\t.mapToObj( numberOfValues -> {\n-\t\t\t\tRandom r = new Random(7);\n-\t\t\t\tArrayList<Object[]> arrays = new ArrayList<>();\n-\t\t\t\tfor(int i = 0;i<numberOfValues;i++) {\n-\t\t\t\t\tObject[] event = new Object[18];\n-\t\t\t\t\tarrays.add(event);\n+\t\t\t\t\t   .of(100)\n+\t\t\t\t\t   .mapToObj(numberOfValues -> {\n+\t\t\t\t\t\t\t\t\t Random r = new Random(7);\n+\t\t\t\t\t\t\t\t\t ArrayList<Object[]> arrays = new ArrayList<>();\n+\t\t\t\t\t\t\t\t\t for (int i = 0; i < numberOfValues; i++) {\n+\t\t\t\t\t\t\t\t\t\t Object[] event = new Object[20];\n+\t\t\t\t\t\t\t\t\t\t arrays.add(event);\n \n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[0] = (CDate.ofLocalDate(LocalDate.now()));\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[1] = Long.toHexString(r.nextLong());\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[2] = Integer.valueOf(r.nextInt()).toString();\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[3] = Integer.valueOf(r.nextInt()).toString();\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[4] = Long.valueOf(r.nextInt());\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[5] = Integer.valueOf((byte)r.nextInt()).toString();\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[6] = Integer.valueOf(r.nextInt()).toString();\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[7] = Long.valueOf((byte)r.nextInt());\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[8] = Long.valueOf((byte)r.nextInt());\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[9] = Integer.valueOf(r.nextInt()).toString();\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[10] = BigDecimal.valueOf(r.nextInt(4), r.nextInt(10)-5);\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[11] = Long.valueOf((byte)r.nextInt());\n-\t\t\t\t\t}\n-\t\t\t\t\tevent[12] = Long.valueOf(r.nextInt());\n-\t\t\t\t\tevent[13] = Long.valueOf(r.nextInt());\n-\t\t\t\t\t//event[14] = null;\n-\t\t\t\t\tevent[15] = Long.valueOf(r.nextInt());\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[16] = BigDecimal.valueOf(r.nextInt(4), r.nextInt(120)-60);\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[17] = Integer.toString(r.nextInt(800));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tarrays.trimToSize();\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[0] = (CDate.ofLocalDate(LocalDate.now()));\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[1] = Long.toHexString(r.nextLong());\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[2] = Integer.valueOf(r.nextInt()).toString();\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[3] = Integer.valueOf(r.nextInt()).toString();\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[4] = Long.valueOf(r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[5] = Integer.valueOf((byte) r.nextInt()).toString();\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[6] = Integer.valueOf(r.nextInt()).toString();\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[7] = Long.valueOf((byte) r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[8] = Long.valueOf((byte) r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[9] = Integer.valueOf(r.nextInt()).toString();\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[10] = BigDecimal.valueOf(r.nextInt(4), r.nextInt(10) - 5);\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[11] = Long.valueOf((byte) r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t event[12] = Long.valueOf(r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t event[13] = Long.valueOf(r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t //event[14] = null;\n+\t\t\t\t\t\t\t\t\t\t event[15] = Long.valueOf(r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[16] = BigDecimal.valueOf(r.nextInt(4), r.nextInt(120) - 60);\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[17] = Integer.toString(r.nextInt(800));\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t // Inside ULP\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[18] = r.nextDouble() * 99d;\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t // Outside ULP\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[19] = r.nextDouble() * 1000d;\n+\t\t\t\t\t\t\t\t\t\t }\n \n-\t\t\t\treturn Arguments.of(numberOfValues, arrays);\n-\t\t\t}\n-\t\t\t);\n+\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t arrays.trimToSize();\n+\n+\t\t\t\t\t\t\t\t\t return Arguments.of(numberOfValues, arrays);\n+\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t   );\n+\t}\n+\n+\t@ParameterizedTest(name = \"{0}\")\n+\t@MethodSource(\"createRandomContent\")\n+\tpublic void testParallelSerialization(int numberOfValues, List<Object[]> arrays)\n+\t\t\tthrows ClassNotFoundException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, IOException, NoSuchMethodException, SecurityException, JSONException, InterruptedException {\n+\t\tExecutorService pool = Executors.newFixedThreadPool(100);\n+\t\tList<Future<?>> futures = new ArrayList<>();\n+\t\tfor (int i = 0; i < 30; i++) {\n+\t\t\tList<Object[]> l = arrays.stream().map(v -> Arrays.copyOf(v, v.length)).collect(Collectors.toList());\n+\t\t\tfutures.add(pool.submit(() -> generateBucket(l)));\n+\t\t}\n+\t\tpool.shutdown();\n+\t\tfor (Future<?> f : futures) {\n+\t\t\tassertThatCode(() -> f.get()).doesNotThrowAnyException();\n+\t\t}\n+\t\tpool.awaitTermination(1, TimeUnit.HOURS);\n \t}\n \n \tpublic Bucket generateBucket(List<Object[]> arrays) throws IOException {\n \t\tfinal ParserConfig parserConfig = new ParserConfig();\n+\t\tparserConfig.setMinPrecision(requiredPrecision);\n \n-\t\tParser[] parser = new Parser[] {\n-\t\t\tMajorTypeId.DATE.createParser(parserConfig),\n-\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n-\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n-\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n-\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n-\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n-\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n-\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n-\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n-\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n-\t\t\tMajorTypeId.DECIMAL.createParser(parserConfig),\n-\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n-\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n-\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n-\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n-\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n-\t\t\tMajorTypeId.DECIMAL.createParser(parserConfig),\n-\t\t\tMajorTypeId.STRING.createParser(parserConfig)\n+\t\tParser[] parser = new Parser[]{\n+\t\t\t\tMajorTypeId.DATE.createParser(parserConfig),\n+\t\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\t\tMajorTypeId.DECIMAL.createParser(parserConfig),\n+\t\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\t\tMajorTypeId.INTEGER.createParser(parserConfig),\n+\t\t\t\tMajorTypeId.DECIMAL.createParser(parserConfig),\n+\t\t\t\tMajorTypeId.STRING.createParser(parserConfig),\n+\t\t\t\tMajorTypeId.REAL.createParser(parserConfig),\n+\t\t\t\tMajorTypeId.REAL.createParser(parserConfig)\n \t\t};\n \n+\t\tassertThat(parser.length)\n+\t\t\t\t.describedAs(\"Length of Parsers and Rows.\")\n+\t\t\t\t.isEqualTo(arrays.get(0).length);\n \n-\t\tfor(Object[] event:arrays) {\n-\t\t\tfor(int i=0;i<parser.length;i++) {\n+\t\tfor (Object[] event : arrays) {\n+\t\t\tfor (int i = 0; i < parser.length; i++) {\n \t\t\t\ttry {\n \t\t\t\t\t//only parse strings, this test otherwise already creates parsed values\n-\t\t\t\t\tif(parser[i] instanceof StringParser && event[i] != null) {\n-\t\t\t\t\t\tevent[i] = parser[i].parse((String)event[i]);\n+\t\t\t\t\tif (parser[i] instanceof StringParser && event[i] != null) {\n+\t\t\t\t\t\tevent[i] = parser[i].parse((String) event[i]);\n \t\t\t\t\t}\n \t\t\t\t\tparser[i].addLine(event[i]);\n-\t\t\t\t} catch(Exception e) {\n-\t\t\t\t\tthrow new IllegalArgumentException(\"Column \"+i, e);\n+\t\t\t\t}\n+\t\t\t\tcatch (Exception e) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\"Column \" + i, e);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NzU2Nw==", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r498787567", "bodyText": "Ich w\u00fcrde die Config als Factory f\u00fcr alle Parserarten nehmen. So macht dw das auch (io.dropwizard.Configuration). Und du sparst dir die vielen leeren Constructor f\u00fcr die parser.", "author": "thoniTUB", "createdAt": "2020-10-02T12:23:14Z", "path": "backend/src/main/java/com/bakdata/conquery/models/config/PreprocessingConfig.java", "diffHunk": "@@ -19,4 +19,6 @@\n \n \t@Min(0) @Max(1)\n \tprivate double faultyLineThreshold = 0.01d;\n+\n+\tprivate ParserConfig parsers = new ParserConfig();", "originalCommit": "816c71a0b72a111b5a714668bacf09a41dee817f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQwMDk4Ng==", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r499400986", "bodyText": "Ich bef\u00fcrchte, dass das schwer zu integrieren ist mit den Konstruktoren von MajorTypeId", "author": "awildturtok", "createdAt": "2020-10-05T07:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NzU2Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "ea1a1d1b19c7ba49fbd8473dba0dcac5e877e91e", "url": "https://github.com/bakdata/conquery/commit/ea1a1d1b19c7ba49fbd8473dba0dcac5e877e91e", "message": "add some documentation", "committedDate": "2020-10-05T12:20:58Z", "type": "commit"}, {"oid": "fed7131fb02d77cb986f2a4c447ba9f5fd0eb704", "url": "https://github.com/bakdata/conquery/commit/fed7131fb02d77cb986f2a4c447ba9f5fd0eb704", "message": "Add test for RealTypeFloat decideType", "committedDate": "2020-10-05T12:35:43Z", "type": "commit"}, {"oid": "0bffcd88d77e87957a2ce4224cef48a578031b03", "url": "https://github.com/bakdata/conquery/commit/0bffcd88d77e87957a2ce4224cef48a578031b03", "message": "fix weird typos in RealTypeDouble.ftl", "committedDate": "2020-10-05T12:50:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0MDg5OA==", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r499840898", "bodyText": "\ud83d\udc4d", "author": "thoniTUB", "createdAt": "2020-10-05T20:04:34Z", "path": "backend/src/test/java/com/bakdata/conquery/models/types/parser/specific/RealParserTest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.bakdata.conquery.models.types.parser.specific;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.bakdata.conquery.models.config.ParserConfig;\n+import com.bakdata.conquery.models.types.specific.RealTypeDouble;\n+import com.bakdata.conquery.models.types.specific.RealTypeFloat;\n+import org.junit.jupiter.api.Test;\n+\n+class RealParserTest {", "originalCommit": "0bffcd88d77e87957a2ce4224cef48a578031b03", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "818ea6968607a951783b24309870d057baeb67e7", "url": "https://github.com/bakdata/conquery/commit/818ea6968607a951783b24309870d057baeb67e7", "message": "add GenerationTests for Reals", "committedDate": "2020-10-06T14:31:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4NzEwNg==", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r500987106", "bodyText": "Warum ist der 100 gro\u00df aber es werden nur 30 Jobs erzeugt?", "author": "thoniTUB", "createdAt": "2020-10-07T12:53:22Z", "path": "backend/src/test/java/com/bakdata/conquery/models/events/generation/GenerationTests.java", "diffHunk": "@@ -38,112 +38,149 @@\n import com.bakdata.conquery.models.types.specific.AStringType;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.io.output.NullOutputStream;\n+import org.assertj.core.data.Offset;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.Arguments;\n import org.junit.jupiter.params.provider.MethodSource;\n \n \n @Slf4j\n public class GenerationTests {\n+\n+\tprivate static final double requiredPrecision = Math.ulp(100f);\n+\n \tpublic static Stream<Arguments> createRandomContent() {\n \t\treturn IntStream\n-\t\t\t.of(100)\n-\t\t\t.mapToObj( numberOfValues -> {\n-\t\t\t\tRandom r = new Random(7);\n-\t\t\t\tArrayList<Object[]> arrays = new ArrayList<>();\n-\t\t\t\tfor(int i = 0;i<numberOfValues;i++) {\n-\t\t\t\t\tObject[] event = new Object[18];\n-\t\t\t\t\tarrays.add(event);\n+\t\t\t\t\t   .of(100)\n+\t\t\t\t\t   .mapToObj(numberOfValues -> {\n+\t\t\t\t\t\t\t\t\t Random r = new Random(7);\n+\t\t\t\t\t\t\t\t\t ArrayList<Object[]> arrays = new ArrayList<>();\n+\t\t\t\t\t\t\t\t\t for (int i = 0; i < numberOfValues; i++) {\n+\t\t\t\t\t\t\t\t\t\t Object[] event = new Object[20];\n+\t\t\t\t\t\t\t\t\t\t arrays.add(event);\n \n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[0] = (CDate.ofLocalDate(LocalDate.now()));\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[1] = Long.toHexString(r.nextLong());\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[2] = Integer.valueOf(r.nextInt()).toString();\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[3] = Integer.valueOf(r.nextInt()).toString();\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[4] = Long.valueOf(r.nextInt());\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[5] = Integer.valueOf((byte)r.nextInt()).toString();\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[6] = Integer.valueOf(r.nextInt()).toString();\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[7] = Long.valueOf((byte)r.nextInt());\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[8] = Long.valueOf((byte)r.nextInt());\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[9] = Integer.valueOf(r.nextInt()).toString();\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[10] = BigDecimal.valueOf(r.nextInt(4), r.nextInt(10)-5);\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[11] = Long.valueOf((byte)r.nextInt());\n-\t\t\t\t\t}\n-\t\t\t\t\tevent[12] = Long.valueOf(r.nextInt());\n-\t\t\t\t\tevent[13] = Long.valueOf(r.nextInt());\n-\t\t\t\t\t//event[14] = null;\n-\t\t\t\t\tevent[15] = Long.valueOf(r.nextInt());\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[16] = BigDecimal.valueOf(r.nextInt(4), r.nextInt(120)-60);\n-\t\t\t\t\t}\n-\t\t\t\t\tif(r.nextBoolean()) {\n-\t\t\t\t\t\tevent[17] = Integer.toString(r.nextInt(800));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tarrays.trimToSize();\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[0] = (CDate.ofLocalDate(LocalDate.now()));\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[1] = Long.toHexString(r.nextLong());\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[2] = Integer.valueOf(r.nextInt()).toString();\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[3] = Integer.valueOf(r.nextInt()).toString();\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[4] = Long.valueOf(r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[5] = Integer.valueOf((byte) r.nextInt()).toString();\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[6] = Integer.valueOf(r.nextInt()).toString();\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[7] = Long.valueOf((byte) r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[8] = Long.valueOf((byte) r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[9] = Integer.valueOf(r.nextInt()).toString();\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[10] = BigDecimal.valueOf(r.nextInt(4), r.nextInt(10) - 5);\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[11] = Long.valueOf((byte) r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t event[12] = Long.valueOf(r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t event[13] = Long.valueOf(r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t //event[14] = null;\n+\t\t\t\t\t\t\t\t\t\t event[15] = Long.valueOf(r.nextInt());\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[16] = BigDecimal.valueOf(r.nextInt(4), r.nextInt(120) - 60);\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[17] = Integer.toString(r.nextInt(800));\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t // Inside ULP\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[18] = r.nextDouble() * 99d;\n+\t\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t\t // Outside ULP\n+\t\t\t\t\t\t\t\t\t\t if (r.nextBoolean()) {\n+\t\t\t\t\t\t\t\t\t\t\t event[19] = r.nextDouble() * 1000d;\n+\t\t\t\t\t\t\t\t\t\t }\n \n-\t\t\t\treturn Arguments.of(numberOfValues, arrays);\n-\t\t\t}\n-\t\t\t);\n+\t\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t\t\t\t\t arrays.trimToSize();\n+\n+\t\t\t\t\t\t\t\t\t return Arguments.of(numberOfValues, arrays);\n+\t\t\t\t\t\t\t\t }\n+\t\t\t\t\t   );\n+\t}\n+\n+\t@ParameterizedTest(name = \"{0}\")\n+\t@MethodSource(\"createRandomContent\")\n+\tpublic void testParallelSerialization(int numberOfValues, List<Object[]> arrays)\n+\t\t\tthrows ClassNotFoundException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, IOException, NoSuchMethodException, SecurityException, JSONException, InterruptedException {\n+\t\tExecutorService pool = Executors.newFixedThreadPool(100);", "originalCommit": "818ea6968607a951783b24309870d057baeb67e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4OTAwMw==", "url": "https://github.com/bakdata/conquery/pull/1303#discussion_r500989003", "bodyText": "Uff, ich denke hier ist das Ziel gewesen oder immernoch das Ziel zu beweisen, dass die ganze kompilierung sich nicht auf die f\u00fc\u00dfe stapft", "author": "awildturtok", "createdAt": "2020-10-07T12:56:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4NzEwNg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a534d3915cc3dd58a7663e42cc5a92ce51312ee7", "url": "https://github.com/bakdata/conquery/commit/a534d3915cc3dd58a7663e42cc5a92ce51312ee7", "message": "Merge branch 'develop' into feature/double-typ-float", "committedDate": "2020-10-07T12:58:54Z", "type": "commit"}]}