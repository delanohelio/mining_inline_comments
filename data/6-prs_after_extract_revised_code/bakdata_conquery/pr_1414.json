{"pr_number": 1414, "pr_title": "Feature/better default query name", "pr_createdAt": "2020-10-30T16:14:47Z", "pr_url": "https://github.com/bakdata/conquery/pull/1414", "timeline": [{"oid": "596f4be37b785b71f8998d112b601d2462c83775", "url": "https://github.com/bakdata/conquery/commit/596f4be37b785b71f8998d112b601d2462c83775", "message": "Set download name to execution file name explicitly if possible", "committedDate": "2020-11-02T16:42:14Z", "type": "commit"}, {"oid": "8786c3f6be01173528119bf145071e6a9d4a0dc7", "url": "https://github.com/bakdata/conquery/commit/8786c3f6be01173528119bf145071e6a9d4a0dc7", "message": "adds Internationalization for query label", "committedDate": "2020-11-02T16:42:14Z", "type": "commit"}, {"oid": "693e9fc55f6f2c21aed8b23d68854f4ebee8c639", "url": "https://github.com/bakdata/conquery/commit/693e9fc55f6f2c21aed8b23d68854f4ebee8c639", "message": "remove suffix in query status", "committedDate": "2020-11-02T16:42:14Z", "type": "commit"}, {"oid": "8b2df12e86a5493a11e5cb209bafc9603dcf71cb", "url": "https://github.com/bakdata/conquery/commit/8b2df12e86a5493a11e5cb209bafc9603dcf71cb", "message": "automatic update to docs", "committedDate": "2020-11-02T16:42:15Z", "type": "commit"}, {"oid": "b944cc390fbcb2695003b70c10bfc7fc9c1842c9", "url": "https://github.com/bakdata/conquery/commit/b944cc390fbcb2695003b70c10bfc7fc9c1842c9", "message": "wrap sertialization in assert", "committedDate": "2020-11-02T16:42:15Z", "type": "commit"}, {"oid": "7904a967b2d3053daee2125756a523f2ba50eb77", "url": "https://github.com/bakdata/conquery/commit/7904a967b2d3053daee2125756a523f2ba50eb77", "message": "remove use of deprecated functions", "committedDate": "2020-11-02T16:42:15Z", "type": "commit"}, {"oid": "aa987d5e578684e601ee9ad60d19e7b298490884", "url": "https://github.com/bakdata/conquery/commit/aa987d5e578684e601ee9ad60d19e7b298490884", "message": "adds checks and logging to contains function", "committedDate": "2020-11-02T16:42:15Z", "type": "commit"}, {"oid": "633b43a546dde2b4166290f9fd4f83e4c5a8ed6b", "url": "https://github.com/bakdata/conquery/commit/633b43a546dde2b4166290f9fd4f83e4c5a8ed6b", "message": "use id for deserialization", "committedDate": "2020-11-02T16:42:15Z", "type": "commit"}, {"oid": "6dfa73ef96fc1e34ac8cc1b3efdb11aeef8aff41", "url": "https://github.com/bakdata/conquery/commit/6dfa73ef96fc1e34ac8cc1b3efdb11aeef8aff41", "message": "remove placeholder id", "committedDate": "2020-11-02T16:42:15Z", "type": "commit"}, {"oid": "9bd201e450f44f6591517605e364f05e93448020", "url": "https://github.com/bakdata/conquery/commit/9bd201e450f44f6591517605e364f05e93448020", "message": "fixes conditions for contained entity check", "committedDate": "2020-11-02T16:42:16Z", "type": "commit"}, {"oid": "527bce54e947a4211177532d0556ffe1ff52415b", "url": "https://github.com/bakdata/conquery/commit/527bce54e947a4211177532d0556ffe1ff52415b", "message": "make download filename save", "committedDate": "2020-11-02T16:42:16Z", "type": "commit"}, {"oid": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e", "url": "https://github.com/bakdata/conquery/commit/fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e", "message": "add null check to default label generator", "committedDate": "2020-11-02T16:42:16Z", "type": "commit"}, {"oid": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e", "url": "https://github.com/bakdata/conquery/commit/fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e", "message": "add null check to default label generator", "committedDate": "2020-11-02T16:42:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1Mzg0Ng==", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520453846", "bodyText": "Doku", "author": "awildturtok", "createdAt": "2020-11-10T10:28:10Z", "path": "backend/src/main/java/com/bakdata/conquery/internationalization/CQElementC10n.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.bakdata.conquery.internationalization;\n+\n+import c10n.annotations.De;\n+import c10n.annotations.En;\n+\n+public interface CQElementC10n {", "originalCommit": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "849b5c3a62b10585c6aa2f13375f53f66a628685", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/internationalization/CQElementC10n.java b/backend/src/main/java/com/bakdata/conquery/internationalization/CQElementC10n.java\nindex cd1673848..221fb10b1 100644\n--- a/backend/src/main/java/com/bakdata/conquery/internationalization/CQElementC10n.java\n+++ b/backend/src/main/java/com/bakdata/conquery/internationalization/CQElementC10n.java\n\n@@ -3,6 +3,10 @@ package com.bakdata.conquery.internationalization;\n import c10n.annotations.De;\n import c10n.annotations.En;\n \n+/**\n+ * Cosmopolitan (C10n) internationalization provider for elements of a query description.\n+ * These are used to generate expressive default labels for queries. \n+ */\n public interface CQElementC10n {\n \t\n \t@En(\"Uploaded-List\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1NDQzMw==", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520454433", "bodyText": "ist das ein Bug gewesen?", "author": "awildturtok", "createdAt": "2020-11-10T10:29:01Z", "path": "backend/src/main/java/com/bakdata/conquery/models/events/Bucket.java", "diffHunk": "@@ -80,6 +80,13 @@ public BucketId createId() {\n \t}\n \n \tpublic boolean containsLocalEntity(int localEntity) {\n+\t\tif(offsets.length != 1 && offsets.length != getBucketSize()) {", "originalCommit": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2OTEwNg==", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520569106", "bodyText": "@awildturtok das war sehr komisch, und hat aufeinmal die CI gefailed, obwohl ich mit dem PR eigentlich nichts in die Richtung angepasst hatte. Das sollten wir im Auge behalten", "author": "thoniTUB", "createdAt": "2020-11-10T13:41:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1NDQzMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1NDYzNA==", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520454634", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Some unusual suffix. Its not too bad if someone actually this. \n          \n          \n            \n            \t * Some unusual suffix. Its not too bad if someone actually uses this.", "author": "awildturtok", "createdAt": "2020-11-10T10:29:19Z", "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -75,6 +75,11 @@\n @NoArgsConstructor\n @JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"type\")\n public abstract class ManagedExecution<R extends ShardResult> extends IdentifiableImpl<ManagedExecutionId> implements Taggable, Shareable, Labelable {\n+\t\n+\t/**\n+\t * Some unusual suffix. Its not too bad if someone actually this. ", "originalCommit": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1Njk1MQ==", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520456951", "bodyText": "Die Strategie finde ich etwas merkw\u00fcrdig, du f\u00fcgst hier bewusst ins Label M\u00fcll hinzu, damit du sicher bist, dass es nicht gesetzt ist? W\u00fcrde es nicht mehr Sinn machen, das hier eben ungesetzt zu lassen und ne Migration zum ent-setzen zu machen?", "author": "awildturtok", "createdAt": "2020-11-10T10:32:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1NDYzNA=="}], "type": "inlineReview", "revised_code": {"commit": "db71952ab0a51a4f49783a1365ef497cf02c9d74", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java b/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\nindex a18aeb1f1..8daab0d35 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\n\n@@ -77,7 +77,7 @@ import org.apache.shiro.authz.Permission;\n public abstract class ManagedExecution<R extends ShardResult> extends IdentifiableImpl<ManagedExecutionId> implements Taggable, Shareable, Labelable {\n \t\n \t/**\n-\t * Some unusual suffix. Its not too bad if someone actually this. \n+\t * Some unusual suffix. Its not too bad if someone actually uses this. \n \t */\n \tpublic final static String AUTO_LABEL_SUFFIX = \"\\t@\u00a7$\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1ODEzMg==", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520458132", "bodyText": "macht das sinn, den im SerializingStore zu haben?", "author": "awildturtok", "createdAt": "2020-11-10T10:34:53Z", "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ResultProcessor.java", "diffHunk": "@@ -51,8 +53,17 @@ public static ResponseBuilder getResult(User user, DatasetId datasetId, ManagedE\n \n \t\ttry {\n \t\t\tStreamingOutput out = exec.getResult(mappingState, settings, charset, config.getCsv().getLineSeparator());\n-\n-\t\t\treturn Response.ok(out);\n+\t\t\t\n+\t\t\tResponseBuilder response = Response.ok(out);\n+\t\t\tString label = exec.getLabel();\n+\t\t\tif(!(Strings.isNullOrEmpty(label) || label.isBlank())) {\n+\t\t\t\t// Set filename from label if the label was set, otherwise the browser will name the file according to the request path\n+\t\t\t\tresponse.header(\"Content-Disposition\", String.format(\n+\t\t\t\t\t\"attachment; filename=\\\"%s.%s\\\"\",\n+\t\t\t\t\tSerializingStore.SAVE_FILENAME_REPLACEMENT_MATCHER.matcher(exec.getLabel()).replaceAll(\"_\"),", "originalCommit": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU4MTAwNg==", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520581006", "bodyText": "Jetzt kann er da eigentlich raus.", "author": "thoniTUB", "createdAt": "2020-11-10T13:57:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1ODEzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwODA2Mw==", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520608063", "bodyText": "Ist raus", "author": "thoniTUB", "createdAt": "2020-11-10T14:34:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1ODEzMg=="}], "type": "inlineReview", "revised_code": {"commit": "a7500396467509dcc961e79cd39ce75b1d79f805", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/execution/ResultProcessor.java b/backend/src/main/java/com/bakdata/conquery/models/execution/ResultProcessor.java\nindex 3313c2eef..beff8deb5 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/execution/ResultProcessor.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/execution/ResultProcessor.java\n\n@@ -60,7 +60,7 @@ public class ResultProcessor {\n \t\t\t\t// Set filename from label if the label was set, otherwise the browser will name the file according to the request path\n \t\t\t\tresponse.header(\"Content-Disposition\", String.format(\n \t\t\t\t\t\"attachment; filename=\\\"%s.%s\\\"\",\n-\t\t\t\t\tSerializingStore.SAVE_FILENAME_REPLACEMENT_MATCHER.matcher(exec.getLabel()).replaceAll(\"_\"),\n+\t\t\t\t\tFileUtil.SAVE_FILENAME_REPLACEMENT_MATCHER.matcher(exec.getLabel()).replaceAll(\"_\"),\n \t\t\t\t\tfileExtension));\n \t\t\t}\n \t\t\treturn response;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3MTczMA==", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520471730", "bodyText": "Die ganze Strategie musst du etwas weiter ausf\u00fchren", "author": "awildturtok", "createdAt": "2020-11-10T10:56:13Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "diffHunk": "@@ -219,4 +230,48 @@ protected URL getDownloadURLInternal(@NonNull UriBuilder url) throws MalformedUR\n \t\t\t.build()\n \t\t\t.toURL();\n \t}\n+\n+\tprivate static final int MAX_CONCEPT_LABEL_CONCAT_LENGTH = 20;\n+\t@Override\n+\tprotected void makeDefaultLabel(final StringBuilder sb) {\n+\t\tfinal Map<Class<? extends Visitable>,List<Visitable>> sortedContents = new HashMap<>();\n+\t\tQueryVisitor visitor = new QueryVisitor() {\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic void accept(Visitable t) {\n+\t\t\t\tsortedContents.computeIfAbsent(t.getClass(), (clazz) -> new ArrayList<>()).add(t);\n+\t\t\t}\n+\t\t};\n+\t\tquery.visit(visitor);\n+\t\t\n+\t\tList<Visitable> externals = sortedContents.computeIfAbsent(CQExternal.class, (clazz)-> List.of());\n+\t\tif(!externals.isEmpty()) {\n+\t\t\tif (sb.length() > 0) {\n+\t\t\t\tsb.append(\" \");\n+\t\t\t}\n+\t\t\tsb.append(C10N.get(CQElementC10n.class, I18n.LOCALE.get()).external());\n+\t\t}\n+\t\t\n+\t\tif( !sortedContents.computeIfAbsent(CQReusedQuery.class, (clazz)-> List.of()).isEmpty()) {\n+\t\t\tif (sb.length() > 0) {\n+\t\t\t\tsb.append(\" \");\n+\t\t\t}\n+\t\t\tsb.append(C10N.get(CQElementC10n.class, I18n.LOCALE.get()).reused());\n+\t\t}\n+\t\t\n+\t\tfinal AtomicInteger length = new AtomicInteger();\n+\t\tString usedConcepts = sortedContents.computeIfAbsent(CQConcept.class, (clazz)-> List.of()).stream()", "originalCommit": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "849b5c3a62b10585c6aa2f13375f53f66a628685", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java b/backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java\nindex 914357b8b..011b54dcc 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java\n\n@@ -232,6 +232,15 @@ public class ManagedQuery extends ManagedExecution<ShardResult> {\n \t}\n \n \tprivate static final int MAX_CONCEPT_LABEL_CONCAT_LENGTH = 20;\n+\t\n+\t/**\n+\t * Creates a default label based on the submitted {@link QueryDescription}.\n+\t * The Label is customized by mentioning that a description contained a \n+\t * {@link CQExternal}, {@link CQReusedQuery} or {@link CQConcept}, in this order.\n+\t * In case of one ore more {@link CQConcept} the distinct labels of the concepts are chosen\n+\t * and concatinated until a length of {@value #MAX_CONCEPT_LABEL_CONCAT_LENGTH} is reached.\n+\t * All further labels are dropped.\n+\t */\n \t@Override\n \tprotected void makeDefaultLabel(final StringBuilder sb) {\n \t\tfinal Map<Class<? extends Visitable>,List<Visitable>> sortedContents = new HashMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3MjU2Ng==", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520472566", "bodyText": "W\u00fcrde es nicht fast ausreichen, die einfach zusammen zu kleben und dann truncaten mit einer elipsis (...)? Aber eigentlich coole Idee!", "author": "awildturtok", "createdAt": "2020-11-10T10:57:29Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "diffHunk": "@@ -219,4 +230,48 @@ protected URL getDownloadURLInternal(@NonNull UriBuilder url) throws MalformedUR\n \t\t\t.build()\n \t\t\t.toURL();\n \t}\n+\n+\tprivate static final int MAX_CONCEPT_LABEL_CONCAT_LENGTH = 20;\n+\t@Override\n+\tprotected void makeDefaultLabel(final StringBuilder sb) {\n+\t\tfinal Map<Class<? extends Visitable>,List<Visitable>> sortedContents = new HashMap<>();\n+\t\tQueryVisitor visitor = new QueryVisitor() {\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic void accept(Visitable t) {\n+\t\t\t\tsortedContents.computeIfAbsent(t.getClass(), (clazz) -> new ArrayList<>()).add(t);\n+\t\t\t}\n+\t\t};\n+\t\tquery.visit(visitor);\n+\t\t\n+\t\tList<Visitable> externals = sortedContents.computeIfAbsent(CQExternal.class, (clazz)-> List.of());\n+\t\tif(!externals.isEmpty()) {\n+\t\t\tif (sb.length() > 0) {\n+\t\t\t\tsb.append(\" \");\n+\t\t\t}\n+\t\t\tsb.append(C10N.get(CQElementC10n.class, I18n.LOCALE.get()).external());\n+\t\t}\n+\t\t\n+\t\tif( !sortedContents.computeIfAbsent(CQReusedQuery.class, (clazz)-> List.of()).isEmpty()) {\n+\t\t\tif (sb.length() > 0) {\n+\t\t\t\tsb.append(\" \");\n+\t\t\t}\n+\t\t\tsb.append(C10N.get(CQElementC10n.class, I18n.LOCALE.get()).reused());\n+\t\t}\n+\t\t\n+\t\tfinal AtomicInteger length = new AtomicInteger();\n+\t\tString usedConcepts = sortedContents.computeIfAbsent(CQConcept.class, (clazz)-> List.of()).stream()", "originalCommit": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU3MDUwOA==", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520570508", "bodyText": "hatte ich auch gedacht, aber da ich das label der Query auch als validen Dateinamen nehmen m\u00f6chte wollte ich nicht, dass der default Name einen komischen Dateinamen erzeugt.", "author": "thoniTUB", "createdAt": "2020-11-10T13:43:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3MjU2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "849b5c3a62b10585c6aa2f13375f53f66a628685", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java b/backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java\nindex 914357b8b..011b54dcc 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java\n\n@@ -232,6 +232,15 @@ public class ManagedQuery extends ManagedExecution<ShardResult> {\n \t}\n \n \tprivate static final int MAX_CONCEPT_LABEL_CONCAT_LENGTH = 20;\n+\t\n+\t/**\n+\t * Creates a default label based on the submitted {@link QueryDescription}.\n+\t * The Label is customized by mentioning that a description contained a \n+\t * {@link CQExternal}, {@link CQReusedQuery} or {@link CQConcept}, in this order.\n+\t * In case of one ore more {@link CQConcept} the distinct labels of the concepts are chosen\n+\t * and concatinated until a length of {@value #MAX_CONCEPT_LABEL_CONCAT_LENGTH} is reached.\n+\t * All further labels are dropped.\n+\t */\n \t@Override\n \tprotected void makeDefaultLabel(final StringBuilder sb) {\n \t\tfinal Map<Class<? extends Visitable>,List<Visitable>> sortedContents = new HashMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3MzQwNg==", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520473406", "bodyText": "nice! Damit habe ich etwas gestruggled bei meinen Buckets!", "author": "awildturtok", "createdAt": "2020-11-10T10:58:37Z", "path": "backend/src/main/java/com/bakdata/conquery/models/types/specific/StringTypeDictionary.java", "diffHunk": "@@ -34,18 +34,23 @@\n public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \n \t@NotNull @Nonnull\n-\tprivate DictionaryId dictionaryId = new DictionaryId(new DatasetId(\"null\"), UUID.randomUUID().toString());", "originalCommit": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU3MTM2NA==", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520571364", "bodyText": "Das geh\u00f6rt auch noch zum Fix von dem wierden Bug", "author": "thoniTUB", "createdAt": "2020-11-10T13:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3MzQwNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3NDc2Mg==", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520474762", "bodyText": "den hast du ausversehen gepusht?", "author": "awildturtok", "createdAt": "2020-11-10T11:00:40Z", "path": "backend/src/test/java/com/bakdata/conquery/util/NonPersistentNamespaceStorage.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package com.bakdata.conquery.util;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+\n+import javax.validation.Validator;\n+\n+import com.bakdata.conquery.io.xodus.MetaStorage;\n+import com.bakdata.conquery.io.xodus.NamespaceStorage;\n+import com.bakdata.conquery.models.concepts.Concept;\n+import com.bakdata.conquery.models.concepts.StructureNode;\n+import com.bakdata.conquery.models.datasets.Dataset;\n+import com.bakdata.conquery.models.datasets.Import;\n+import com.bakdata.conquery.models.dictionary.Dictionary;\n+import com.bakdata.conquery.models.dictionary.DirectDictionary;\n+import com.bakdata.conquery.models.exceptions.JSONException;\n+import com.bakdata.conquery.models.identifiable.CentralRegistry;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ConceptId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DictionaryId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ImportId;\n+import com.bakdata.conquery.models.identifiable.mapping.PersistentIdMap;\n+import lombok.NonNull;\n+\n+public class NonPersistentNamespaceStorage implements NamespaceStorage {", "originalCommit": "fe692fd8e8bb3cb6a77bafda8cfd34373cb8802e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU3NjUwMg==", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520576502", "bodyText": "Mhhm, ich glaube den habe ich im Test mal gebraucht, ihn aber letztlich vereinfacht sodass der Store nicht mehr ben\u00f6tigt wurde", "author": "thoniTUB", "createdAt": "2020-11-10T13:51:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3NDc2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMzU0NA==", "url": "https://github.com/bakdata/conquery/pull/1414#discussion_r520603544", "bodyText": "Habe Sie wieder raus geschmissen", "author": "thoniTUB", "createdAt": "2020-11-10T14:28:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3NDc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "198becf08136c60ec0ecbdfcb5de37a04f1d2d3c", "chunk": "diff --git a/backend/src/test/java/com/bakdata/conquery/util/NonPersistentNamespaceStorage.java b/backend/src/test/java/com/bakdata/conquery/util/NonPersistentNamespaceStorage.java\ndeleted file mode 100644\nindex ff03b9525..000000000\n--- a/backend/src/test/java/com/bakdata/conquery/util/NonPersistentNamespaceStorage.java\n+++ /dev/null\n\n@@ -1,206 +0,0 @@\n-package com.bakdata.conquery.util;\n-\n-import java.io.IOException;\n-import java.util.Collection;\n-\n-import javax.validation.Validator;\n-\n-import com.bakdata.conquery.io.xodus.MetaStorage;\n-import com.bakdata.conquery.io.xodus.NamespaceStorage;\n-import com.bakdata.conquery.models.concepts.Concept;\n-import com.bakdata.conquery.models.concepts.StructureNode;\n-import com.bakdata.conquery.models.datasets.Dataset;\n-import com.bakdata.conquery.models.datasets.Import;\n-import com.bakdata.conquery.models.dictionary.Dictionary;\n-import com.bakdata.conquery.models.dictionary.DirectDictionary;\n-import com.bakdata.conquery.models.exceptions.JSONException;\n-import com.bakdata.conquery.models.identifiable.CentralRegistry;\n-import com.bakdata.conquery.models.identifiable.ids.specific.ConceptId;\n-import com.bakdata.conquery.models.identifiable.ids.specific.DictionaryId;\n-import com.bakdata.conquery.models.identifiable.ids.specific.ImportId;\n-import com.bakdata.conquery.models.identifiable.mapping.PersistentIdMap;\n-import lombok.NonNull;\n-\n-public class NonPersistentNamespaceStorage implements NamespaceStorage {\n-\t\n-\tprivate Dataset dataset;\n-\n-\t@Override\n-\tpublic void addDictionary(Dictionary dict) {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic Dictionary getDictionary(DictionaryId id) {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic void updateDictionary(Dictionary dict) {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic void removeDictionary(DictionaryId id) {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic Dictionary computeDictionary(DictionaryId id) {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic DirectDictionary getPrimaryDictionary() {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic void addImport(Import imp) {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic Import getImport(ImportId id) {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic Collection<Import> getAllImports() {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic void updateImport(Import imp) {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic void removeImport(ImportId id) {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic Dataset getDataset() {\n-\t\treturn dataset;\n-\n-\t}\n-\n-\t@Override\n-\tpublic void updateDataset(Dataset dataset) {\n-\t\tthis.dataset = dataset;\n-\t}\n-\n-\t@Override\n-\tpublic Concept<?> getConcept(ConceptId id) {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic boolean hasConcept(ConceptId id) {\n-\t\tthrow new UnsupportedOperationException();\n-\t}\n-\n-\t@Override\n-\tpublic void updateConcept(Concept<?> concept) {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic void removeConcept(ConceptId id) {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic Collection<? extends Concept<?>> getAllConcepts() {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic Validator getValidator() {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic CentralRegistry getCentralRegistry() {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic void loadData() {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic void clear() {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic String getStorageOrigin() {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic void close() throws IOException {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic MetaStorage getMetaStorage() {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic void setMetaStorage(@NonNull MetaStorage storage) {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic StructureNode[] getStructure() {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic void updateStructure(StructureNode[] structure) throws JSONException {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic PersistentIdMap getIdMapping() {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-\t@Override\n-\tpublic void updateIdMapping(PersistentIdMap idMap) throws JSONException {\n-\t\tthrow new UnsupportedOperationException();\n-\n-\t}\n-\n-}\n"}}, {"oid": "db71952ab0a51a4f49783a1365ef497cf02c9d74", "url": "https://github.com/bakdata/conquery/commit/db71952ab0a51a4f49783a1365ef497cf02c9d74", "message": "Update backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\n\nCo-authored-by: awildturtok <1553491+awildturtok@users.noreply.github.com>", "committedDate": "2020-11-10T13:39:17Z", "type": "commit"}, {"oid": "849b5c3a62b10585c6aa2f13375f53f66a628685", "url": "https://github.com/bakdata/conquery/commit/849b5c3a62b10585c6aa2f13375f53f66a628685", "message": "Adds doku", "committedDate": "2020-11-10T14:17:41Z", "type": "commit"}, {"oid": "01748b0f59fd1c05adb5c0ff652e5e74467231ac", "url": "https://github.com/bakdata/conquery/commit/01748b0f59fd1c05adb5c0ff652e5e74467231ac", "message": "adds labeling fallback if no usefull information could be extracted", "committedDate": "2020-11-10T14:18:43Z", "type": "commit"}, {"oid": "198becf08136c60ec0ecbdfcb5de37a04f1d2d3c", "url": "https://github.com/bakdata/conquery/commit/198becf08136c60ec0ecbdfcb5de37a04f1d2d3c", "message": "remove unused class", "committedDate": "2020-11-10T14:20:41Z", "type": "commit"}, {"oid": "a7500396467509dcc961e79cd39ce75b1d79f805", "url": "https://github.com/bakdata/conquery/commit/a7500396467509dcc961e79cd39ce75b1d79f805", "message": "moves save filename matcher to utility class", "committedDate": "2020-11-10T14:33:35Z", "type": "commit"}, {"oid": "1a850ff389bff0064d55637490fdfdd92775f7b4", "url": "https://github.com/bakdata/conquery/commit/1a850ff389bff0064d55637490fdfdd92775f7b4", "message": "Merge branch 'develop' into feature/better-default-query-name", "committedDate": "2020-11-10T14:35:07Z", "type": "commit"}]}