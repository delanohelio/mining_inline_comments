{"pr_number": 1305, "pr_title": "error info in status", "pr_createdAt": "2020-07-29T09:59:58Z", "pr_url": "https://github.com/bakdata/conquery/pull/1305", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE5MjE1NA==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462192154", "bodyText": "Warum pflegen wir unsere templates selber? macht das nicht sinn sich die yaml mit dem frontend zu teilen?", "author": "awildturtok", "createdAt": "2020-07-29T10:15:16Z", "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n+import com.bakdata.conquery.util.VariableDefaultValue;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.map.Flat3Map;\n+import org.apache.commons.text.StringSubstitutor;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+/**\n+ * Base class for errors that are thrown within Conquery and can be serialized\n+ * and deserialized to allow transportation between nodes.\n+ */\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n+@CPSBase\n+@ToString(onlyExplicitlyIncluded = true)\n+public abstract class ConqueryError implements ConqueryErrorInfo {\n+\n+\t@VariableDefaultValue\n+\t@NotNull\n+\t@ToString.Include\n+\tprivate UUID id = UUID.randomUUID();\n+\t@NotEmpty\n+\tprivate final String messageTemplate;\n+\tprivate final Map<String, String> context;\n+\n+\t@Override\n+\t@JsonIgnore\n+\t@ToString.Include\n+\tpublic String getMessage() {\n+\t\treturn new StringSubstitutor(context).replace(messageTemplate);\n+\t}\n+\n+\t@Override\n+\tpublic PlainError asPlain() {\n+\t\treturn new PlainError(getId(), getCode(), getMessage(), getContext());\n+\t}\n+\n+\tpublic ConqueryException asException() {\n+\t\treturn new ConqueryException(this);\n+\t}\n+\n+\t@Override\n+\t@JsonIgnore // The code is the type information, so we do not need to serialize it\n+\tpublic String getCode() {\n+\t\treturn this.getClass().getAnnotation(CPSType.class).id();\n+\t}\n+\n+\tpublic static abstract class NoContextError extends ConqueryError {\n+\n+\t\tpublic NoContextError(String message) {\n+\t\t\tsuper(message, Collections.emptyMap());\n+\t\t}\n+\t}\n+\n+\tpublic static abstract class ContextError extends ConqueryError {\n+\n+\t\tpublic ContextError(String code, String messageTemplate) {\n+\t\t\tsuper(messageTemplate, new Flat3Map<>());\n+\t\t}\n+\t}\n+\n+\t@Slf4j\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_UNKNOWN_ERROR\")\n+\tpublic static class UnknownError extends NoContextError {\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate UnknownError() {\n+\t\t\tsuper(\"An unknown error occured\");\n+\t\t}\n+\n+\t\tpublic UnknownError(Throwable e) {\n+\t\t\tthis();\n+\t\t\tlog.error(\"Encountered unknown error [{}]\", this.getId(), e);\n+\t\t}\n+\t}\n+\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION\")\n+\tpublic static class ExecutionCreationErrorUnspecified extends NoContextError {\n+\n+\t\tpublic ExecutionCreationErrorUnspecified() {\n+\t\t\tsuper(\"Failure during execution creation.\");\n+\t\t}\n+\t}\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE\")\n+\tpublic static class ExecutionCreationResolveError extends ContextError {\n+\n+\t\tprivate final static String FAILED_ELEMENT = \"ELEMENT\";\n+\t\tprivate final static String FAILED_ELEMENT_CLASS = \"ELEMENT_CLASS\";\n+\t\tprivate final static String TEMPLATE = \"Could not find an ${\" + FAILED_ELEMENT_CLASS + \"} element called '${\" + FAILED_ELEMENT + \"}'\";", "originalCommit": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NTU4NA==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462365584", "bodyText": "Das ist f\u00fcr die Logs, damit man den Fehler nachverfolgen kann und ordentliche Fehlermeldungen hat", "author": "thoniTUB", "createdAt": "2020-07-29T14:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE5MjE1NA=="}], "type": "inlineReview", "revised_code": {"commit": "892305cbb8b185a49773a1da29b17affc742c64f", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java b/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\nindex 306a52616..dbfbb3517 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n\n@@ -169,7 +169,7 @@ public abstract class ConqueryError implements ConqueryErrorInfo {\n \tpublic static class ExecutionProcessingError extends NoContextError {\n \n \t\tpublic ExecutionProcessingError() {\n-\t\t\tsuper(\"The an unexpected error occured during the execution.\");\n+\t\t\tsuper(\"An unexpected error occured during the execution.\");\n \t\t}\n \t}\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE5MjYwMA==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462192600", "bodyText": "Ah ok, ihr habt euch drauf geeinigt, dass das BackEnd die Nachrichten bastelt?", "author": "awildturtok", "createdAt": "2020-07-29T10:16:07Z", "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n+import com.bakdata.conquery.util.VariableDefaultValue;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.map.Flat3Map;\n+import org.apache.commons.text.StringSubstitutor;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+/**\n+ * Base class for errors that are thrown within Conquery and can be serialized\n+ * and deserialized to allow transportation between nodes.\n+ */\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n+@CPSBase\n+@ToString(onlyExplicitlyIncluded = true)\n+public abstract class ConqueryError implements ConqueryErrorInfo {\n+\n+\t@VariableDefaultValue\n+\t@NotNull\n+\t@ToString.Include\n+\tprivate UUID id = UUID.randomUUID();\n+\t@NotEmpty\n+\tprivate final String messageTemplate;\n+\tprivate final Map<String, String> context;\n+\n+\t@Override\n+\t@JsonIgnore\n+\t@ToString.Include\n+\tpublic String getMessage() {\n+\t\treturn new StringSubstitutor(context).replace(messageTemplate);", "originalCommit": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "892305cbb8b185a49773a1da29b17affc742c64f", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java b/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\nindex 306a52616..dbfbb3517 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n\n@@ -169,7 +169,7 @@ public abstract class ConqueryError implements ConqueryErrorInfo {\n \tpublic static class ExecutionProcessingError extends NoContextError {\n \n \t\tpublic ExecutionProcessingError() {\n-\t\t\tsuper(\"The an unexpected error occured during the execution.\");\n+\t\t\tsuper(\"An unexpected error occured during the execution.\");\n \t\t}\n \t}\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIwMzM2OQ==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462203369", "bodyText": "Ich wei\u00df, dass die Idee hier ist memory-overhead zu sparen aber lohnt es sich hier zu sparen, wo eigentlich selten passiert? Aber lustige Map", "author": "awildturtok", "createdAt": "2020-07-29T10:36:01Z", "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n+import com.bakdata.conquery.util.VariableDefaultValue;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.map.Flat3Map;\n+import org.apache.commons.text.StringSubstitutor;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+/**\n+ * Base class for errors that are thrown within Conquery and can be serialized\n+ * and deserialized to allow transportation between nodes.\n+ */\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n+@CPSBase\n+@ToString(onlyExplicitlyIncluded = true)\n+public abstract class ConqueryError implements ConqueryErrorInfo {\n+\n+\t@VariableDefaultValue\n+\t@NotNull\n+\t@ToString.Include\n+\tprivate UUID id = UUID.randomUUID();\n+\t@NotEmpty\n+\tprivate final String messageTemplate;\n+\tprivate final Map<String, String> context;\n+\n+\t@Override\n+\t@JsonIgnore\n+\t@ToString.Include\n+\tpublic String getMessage() {\n+\t\treturn new StringSubstitutor(context).replace(messageTemplate);\n+\t}\n+\n+\t@Override\n+\tpublic PlainError asPlain() {\n+\t\treturn new PlainError(getId(), getCode(), getMessage(), getContext());\n+\t}\n+\n+\tpublic ConqueryException asException() {\n+\t\treturn new ConqueryException(this);\n+\t}\n+\n+\t@Override\n+\t@JsonIgnore // The code is the type information, so we do not need to serialize it\n+\tpublic String getCode() {\n+\t\treturn this.getClass().getAnnotation(CPSType.class).id();\n+\t}\n+\n+\tpublic static abstract class NoContextError extends ConqueryError {\n+\n+\t\tpublic NoContextError(String message) {\n+\t\t\tsuper(message, Collections.emptyMap());\n+\t\t}\n+\t}\n+\n+\tpublic static abstract class ContextError extends ConqueryError {\n+\n+\t\tpublic ContextError(String code, String messageTemplate) {\n+\t\t\tsuper(messageTemplate, new Flat3Map<>());", "originalCommit": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NjM2NA==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462366364", "bodyText": "Die map scheint perfekt f\u00fcr diesen Fall ;)", "author": "thoniTUB", "createdAt": "2020-07-29T14:58:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIwMzM2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "892305cbb8b185a49773a1da29b17affc742c64f", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java b/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\nindex 306a52616..dbfbb3517 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n\n@@ -169,7 +169,7 @@ public abstract class ConqueryError implements ConqueryErrorInfo {\n \tpublic static class ExecutionProcessingError extends NoContextError {\n \n \t\tpublic ExecutionProcessingError() {\n-\t\t\tsuper(\"The an unexpected error occured during the execution.\");\n+\t\t\tsuper(\"An unexpected error occured during the execution.\");\n \t\t}\n \t}\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIwMzc3Mg==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462203772", "bodyText": "W\u00e4re es hier nicht nice zu wissen welche Elemente es sind?", "author": "awildturtok", "createdAt": "2020-07-29T10:36:44Z", "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n+import com.bakdata.conquery.util.VariableDefaultValue;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.map.Flat3Map;\n+import org.apache.commons.text.StringSubstitutor;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+/**\n+ * Base class for errors that are thrown within Conquery and can be serialized\n+ * and deserialized to allow transportation between nodes.\n+ */\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n+@CPSBase\n+@ToString(onlyExplicitlyIncluded = true)\n+public abstract class ConqueryError implements ConqueryErrorInfo {\n+\n+\t@VariableDefaultValue\n+\t@NotNull\n+\t@ToString.Include\n+\tprivate UUID id = UUID.randomUUID();\n+\t@NotEmpty\n+\tprivate final String messageTemplate;\n+\tprivate final Map<String, String> context;\n+\n+\t@Override\n+\t@JsonIgnore\n+\t@ToString.Include\n+\tpublic String getMessage() {\n+\t\treturn new StringSubstitutor(context).replace(messageTemplate);\n+\t}\n+\n+\t@Override\n+\tpublic PlainError asPlain() {\n+\t\treturn new PlainError(getId(), getCode(), getMessage(), getContext());\n+\t}\n+\n+\tpublic ConqueryException asException() {\n+\t\treturn new ConqueryException(this);\n+\t}\n+\n+\t@Override\n+\t@JsonIgnore // The code is the type information, so we do not need to serialize it\n+\tpublic String getCode() {\n+\t\treturn this.getClass().getAnnotation(CPSType.class).id();\n+\t}\n+\n+\tpublic static abstract class NoContextError extends ConqueryError {\n+\n+\t\tpublic NoContextError(String message) {\n+\t\t\tsuper(message, Collections.emptyMap());\n+\t\t}\n+\t}\n+\n+\tpublic static abstract class ContextError extends ConqueryError {\n+\n+\t\tpublic ContextError(String code, String messageTemplate) {\n+\t\t\tsuper(messageTemplate, new Flat3Map<>());\n+\t\t}\n+\t}\n+\n+\t@Slf4j\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_UNKNOWN_ERROR\")\n+\tpublic static class UnknownError extends NoContextError {\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate UnknownError() {\n+\t\t\tsuper(\"An unknown error occured\");\n+\t\t}\n+\n+\t\tpublic UnknownError(Throwable e) {\n+\t\t\tthis();\n+\t\t\tlog.error(\"Encountered unknown error [{}]\", this.getId(), e);\n+\t\t}\n+\t}\n+\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION\")\n+\tpublic static class ExecutionCreationErrorUnspecified extends NoContextError {\n+\n+\t\tpublic ExecutionCreationErrorUnspecified() {\n+\t\t\tsuper(\"Failure during execution creation.\");\n+\t\t}\n+\t}\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE\")\n+\tpublic static class ExecutionCreationResolveError extends ContextError {\n+\n+\t\tprivate final static String FAILED_ELEMENT = \"ELEMENT\";\n+\t\tprivate final static String FAILED_ELEMENT_CLASS = \"ELEMENT_CLASS\";\n+\t\tprivate final static String TEMPLATE = \"Could not find an ${\" + FAILED_ELEMENT_CLASS + \"} element called '${\" + FAILED_ELEMENT + \"}'\";\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate ExecutionCreationResolveError() {\n+\t\t\tsuper(ExecutionCreationResolveError.class.getAnnotation(CPSType.class).id(), TEMPLATE);\n+\t\t}\n+\n+\t\tpublic ExecutionCreationResolveError(IId<?> unresolvableElementId) {\n+\t\t\tthis();\n+\t\t\tgetContext().put(FAILED_ELEMENT, unresolvableElementId.toString());\n+\t\t\tgetContext().put(FAILED_ELEMENT_CLASS, unresolvableElementId.getClass().getSimpleName());\n+\t\t}\n+\t}\n+\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE_EXTERNAL\")\n+\tpublic static class ExternalResolveError extends ContextError {\n+\n+\t\tprivate final static String FORMAT_ROW_LENGTH = \"formatRowLength\";\n+\t\tprivate final static String DATA_ROW_LENGTH = \"dataRowLength\";\n+\t\tprivate final static String TEMPLATE = \"There are ${\" + FORMAT_ROW_LENGTH + \"} columns in the format but ${\" + DATA_ROW_LENGTH + \"} in at least one row\";\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate ExternalResolveError() {\n+\t\t\tsuper(ExternalResolveError.class.getAnnotation(CPSType.class).id(), TEMPLATE);\n+\t\t}\n+\n+\t\tpublic ExternalResolveError(int formatRowLength, int dataRowLength) {\n+\t\t\tthis();\n+\t\t\tgetContext().put(FORMAT_ROW_LENGTH, Integer.toString(formatRowLength));\n+\t\t\tgetContext().put(DATA_ROW_LENGTH, Integer.toString(dataRowLength));\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Unspecified error during {@link QueryPlan}-creation.\n+\t */\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_PLAN\")\n+\tpublic static class ExecutionCreationPlanError extends NoContextError {\n+\n+\t\tpublic ExecutionCreationPlanError() {\n+\t\t\tsuper(\"Unable to resolve query elements.\");", "originalCommit": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2OTExOQ==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462369119", "bodyText": "Ich habe hier noch keine spezifischen Errors erstellt/gefunden.\nAber ich werde die Meldung noch anpassen, die ist ein copy-paste fehler", "author": "thoniTUB", "createdAt": "2020-07-29T15:02:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIwMzc3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "892305cbb8b185a49773a1da29b17affc742c64f", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java b/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\nindex 306a52616..dbfbb3517 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n\n@@ -169,7 +169,7 @@ public abstract class ConqueryError implements ConqueryErrorInfo {\n \tpublic static class ExecutionProcessingError extends NoContextError {\n \n \t\tpublic ExecutionProcessingError() {\n-\t\t\tsuper(\"The an unexpected error occured during the execution.\");\n+\t\t\tsuper(\"An unexpected error occured during the execution.\");\n \t\t}\n \t}\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIwMzg2MQ==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462203861", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tsuper(\"The an unexpected error occured during the execution.\");\n          \n          \n            \n            \t\t\tsuper(\"An unexpected error occured during the execution.\");", "author": "awildturtok", "createdAt": "2020-07-29T10:36:55Z", "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n+import com.bakdata.conquery.util.VariableDefaultValue;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.map.Flat3Map;\n+import org.apache.commons.text.StringSubstitutor;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+/**\n+ * Base class for errors that are thrown within Conquery and can be serialized\n+ * and deserialized to allow transportation between nodes.\n+ */\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n+@CPSBase\n+@ToString(onlyExplicitlyIncluded = true)\n+public abstract class ConqueryError implements ConqueryErrorInfo {\n+\n+\t@VariableDefaultValue\n+\t@NotNull\n+\t@ToString.Include\n+\tprivate UUID id = UUID.randomUUID();\n+\t@NotEmpty\n+\tprivate final String messageTemplate;\n+\tprivate final Map<String, String> context;\n+\n+\t@Override\n+\t@JsonIgnore\n+\t@ToString.Include\n+\tpublic String getMessage() {\n+\t\treturn new StringSubstitutor(context).replace(messageTemplate);\n+\t}\n+\n+\t@Override\n+\tpublic PlainError asPlain() {\n+\t\treturn new PlainError(getId(), getCode(), getMessage(), getContext());\n+\t}\n+\n+\tpublic ConqueryException asException() {\n+\t\treturn new ConqueryException(this);\n+\t}\n+\n+\t@Override\n+\t@JsonIgnore // The code is the type information, so we do not need to serialize it\n+\tpublic String getCode() {\n+\t\treturn this.getClass().getAnnotation(CPSType.class).id();\n+\t}\n+\n+\tpublic static abstract class NoContextError extends ConqueryError {\n+\n+\t\tpublic NoContextError(String message) {\n+\t\t\tsuper(message, Collections.emptyMap());\n+\t\t}\n+\t}\n+\n+\tpublic static abstract class ContextError extends ConqueryError {\n+\n+\t\tpublic ContextError(String code, String messageTemplate) {\n+\t\t\tsuper(messageTemplate, new Flat3Map<>());\n+\t\t}\n+\t}\n+\n+\t@Slf4j\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_UNKNOWN_ERROR\")\n+\tpublic static class UnknownError extends NoContextError {\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate UnknownError() {\n+\t\t\tsuper(\"An unknown error occured\");\n+\t\t}\n+\n+\t\tpublic UnknownError(Throwable e) {\n+\t\t\tthis();\n+\t\t\tlog.error(\"Encountered unknown error [{}]\", this.getId(), e);\n+\t\t}\n+\t}\n+\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION\")\n+\tpublic static class ExecutionCreationErrorUnspecified extends NoContextError {\n+\n+\t\tpublic ExecutionCreationErrorUnspecified() {\n+\t\t\tsuper(\"Failure during execution creation.\");\n+\t\t}\n+\t}\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE\")\n+\tpublic static class ExecutionCreationResolveError extends ContextError {\n+\n+\t\tprivate final static String FAILED_ELEMENT = \"ELEMENT\";\n+\t\tprivate final static String FAILED_ELEMENT_CLASS = \"ELEMENT_CLASS\";\n+\t\tprivate final static String TEMPLATE = \"Could not find an ${\" + FAILED_ELEMENT_CLASS + \"} element called '${\" + FAILED_ELEMENT + \"}'\";\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate ExecutionCreationResolveError() {\n+\t\t\tsuper(ExecutionCreationResolveError.class.getAnnotation(CPSType.class).id(), TEMPLATE);\n+\t\t}\n+\n+\t\tpublic ExecutionCreationResolveError(IId<?> unresolvableElementId) {\n+\t\t\tthis();\n+\t\t\tgetContext().put(FAILED_ELEMENT, unresolvableElementId.toString());\n+\t\t\tgetContext().put(FAILED_ELEMENT_CLASS, unresolvableElementId.getClass().getSimpleName());\n+\t\t}\n+\t}\n+\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE_EXTERNAL\")\n+\tpublic static class ExternalResolveError extends ContextError {\n+\n+\t\tprivate final static String FORMAT_ROW_LENGTH = \"formatRowLength\";\n+\t\tprivate final static String DATA_ROW_LENGTH = \"dataRowLength\";\n+\t\tprivate final static String TEMPLATE = \"There are ${\" + FORMAT_ROW_LENGTH + \"} columns in the format but ${\" + DATA_ROW_LENGTH + \"} in at least one row\";\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate ExternalResolveError() {\n+\t\t\tsuper(ExternalResolveError.class.getAnnotation(CPSType.class).id(), TEMPLATE);\n+\t\t}\n+\n+\t\tpublic ExternalResolveError(int formatRowLength, int dataRowLength) {\n+\t\t\tthis();\n+\t\t\tgetContext().put(FORMAT_ROW_LENGTH, Integer.toString(formatRowLength));\n+\t\t\tgetContext().put(DATA_ROW_LENGTH, Integer.toString(dataRowLength));\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Unspecified error during {@link QueryPlan}-creation.\n+\t */\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_PLAN\")\n+\tpublic static class ExecutionCreationPlanError extends NoContextError {\n+\n+\t\tpublic ExecutionCreationPlanError() {\n+\t\t\tsuper(\"Unable to resolve query elements.\");\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Unspecified execution processing error.\n+\t */\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_PROCESSING\")\n+\tpublic static class ExecutionProcessingError extends NoContextError {\n+\n+\t\tpublic ExecutionProcessingError() {\n+\t\t\tsuper(\"The an unexpected error occured during the execution.\");", "originalCommit": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "892305cbb8b185a49773a1da29b17affc742c64f", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java b/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\nindex 306a52616..dbfbb3517 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n\n@@ -169,7 +169,7 @@ public abstract class ConqueryError implements ConqueryErrorInfo {\n \tpublic static class ExecutionProcessingError extends NoContextError {\n \n \t\tpublic ExecutionProcessingError() {\n-\t\t\tsuper(\"The an unexpected error occured during the execution.\");\n+\t\t\tsuper(\"An unexpected error occured during the execution.\");\n \t\t}\n \t}\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIwNTE5MA==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462205190", "bodyText": "Das geht auch schon mit java Comparator, sogar sauberer:\nComparator.comparing(Double::intValue).thenComparing(Double::doubleValue).compare()", "author": "awildturtok", "createdAt": "2020-07-29T10:39:34Z", "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryErrorInfo.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import com.google.common.collect.ComparisonChain;\n+\n+/**\n+ * Base interface for errors that should be displayed as an info in the Frontend\n+ */\n+public interface ConqueryErrorInfo {\n+\n+\t/**\n+\t * A unique id for this error to retrieve it in the logs.\n+\t */\n+\tUUID getId();\n+\t\n+\tString getCode();\n+\t\n+\tString getMessage();\n+\t\n+\tMap<String,String> getContext();\n+\n+\t/**\n+\t * Returns a {@link ConqueryErrorInfo} POJO without the internal type information.\n+\t * @return\n+\t */\n+\tPlainError asPlain();\n+\t\n+\t/**\n+\t * Method to check if two errors are basically the same, by not checking the id and the context (which possibly checks on hashcode basis).\n+\t */\n+\tdefault boolean equalsRegardingCodeAndMessage(ConqueryErrorInfo other) {\n+\t\treturn ComparisonChain.start()", "originalCommit": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5ODY3Mw==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462798673", "bodyText": "Cool, das wusste ich nicht!", "author": "thoniTUB", "createdAt": "2020-07-30T07:20:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIwNTE5MA=="}], "type": "inlineReview", "revised_code": {"commit": "c5e629eaf67e3c15e13239610a45b484ad823b87", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryErrorInfo.java b/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryErrorInfo.java\nindex a7d8eae97..084e66582 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryErrorInfo.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryErrorInfo.java\n\n@@ -1,10 +1,9 @@\n package com.bakdata.conquery.models.error;\n \n+import java.util.Comparator;\n import java.util.Map;\n import java.util.UUID;\n \n-import com.google.common.collect.ComparisonChain;\n-\n /**\n  * Base interface for errors that should be displayed as an info in the Frontend\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxODY2Nw==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462318667", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tlog.warn(\"The execution [{}] failed again with:\\n\\t{}\\n\\tThe previously error was: {}\", getId(), this.error, error);\n          \n          \n            \n            \t\t\tlog.warn(\"The execution [{}] failed again with:\\n\\t{}\\n\\tThe previous error was: {}\", getId(), this.error, error);", "author": "awildturtok", "createdAt": "2020-07-29T13:57:02Z", "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -120,7 +123,19 @@ public ManagedExecutionId createId() {\n \t\treturn new ManagedExecutionId(dataset, queryId);\n \t}\n \n-\tprotected void fail(MasterMetaStorage storage) {\n+\t/**\n+\t * Fails the execution and log the occurred error.\n+\t */\n+\tprotected void fail(MasterMetaStorage storage, ConqueryErrorInfo error) {\n+\t\tif(this.error != null && !this.error.equalsRegardingCodeAndMessage(error)) {\n+\t\t\t// Warn only again if the error is different (failed might by called per collected result)\n+\t\t\tlog.warn(\"The execution [{}] failed again with:\\n\\t{}\\n\\tThe previously error was: {}\", getId(), this.error, error);", "originalCommit": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "892305cbb8b185a49773a1da29b17affc742c64f", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java b/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\nindex a94baa557..a39755764 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\n\n@@ -129,7 +129,7 @@ public abstract class ManagedExecution<R extends ShardResult> extends Identifiab\n \tprotected void fail(MasterMetaStorage storage, ConqueryErrorInfo error) {\n \t\tif(this.error != null && !this.error.equalsRegardingCodeAndMessage(error)) {\n \t\t\t// Warn only again if the error is different (failed might by called per collected result)\n-\t\t\tlog.warn(\"The execution [{}] failed again with:\\n\\t{}\\n\\tThe previously error was: {}\", getId(), this.error, error);\n+\t\t\tlog.warn(\"The execution [{}] failed again with:\\n\\t{}\\n\\tThe previous error was: {}\", getId(), this.error, error);\n \t\t} else {\n \t\t\tthis.error = error;\n \t\t\t// Log the error, so its id is atleast once in the logs\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyMTExOQ==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462321119", "bodyText": "Was soll das assert hier?", "author": "awildturtok", "createdAt": "2020-07-29T14:00:19Z", "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -192,6 +208,11 @@ protected void setStatusBase(@NonNull MasterMetaStorage storage, URLBuilder url,\n \t\t\tisReadyToDownload(url, user)\n \t\t\t\t? getDownloadURL(url)\n \t\t\t\t: null);\n+\t\tif (state.equals(ExecutionState.FAILED)) {\n+\t\t\tassert(error != null);", "originalCommit": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5e629eaf67e3c15e13239610a45b484ad823b87", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java b/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\nindex a94baa557..d51b3d205 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\n\n@@ -208,8 +208,7 @@ public abstract class ManagedExecution<R extends ShardResult> extends Identifiab\n \t\t\tisReadyToDownload(url, user)\n \t\t\t\t? getDownloadURL(url)\n \t\t\t\t: null);\n-\t\tif (state.equals(ExecutionState.FAILED)) {\n-\t\t\tassert(error != null);\n+\t\tif (state.equals(ExecutionState.FAILED) && error != null) {\n \t\t\t// Use plain format here to have a uniform serialization.\n \t\t\tstatus.setError(error.asPlain());\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyMjI4NA==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462322284", "bodyText": "Stimmt die log message?", "author": "awildturtok", "createdAt": "2020-07-29T14:01:56Z", "path": "backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java", "diffHunk": "@@ -136,16 +134,10 @@ public void start() {\n \t@Override\n \tpublic void addResult(@NonNull MasterMetaStorage storage, FormSharedResult result) {\n \t\tManagedExecutionId subquery = result.getSubqueryId();\n-\t\tif (subquery == null) {\n-\t\t\tfail(storage);\n-\t\t\tlog.warn(\n-\t\t\t\t\"Form failed in query plan creation. \",\n-\t\t\t\tnew MultiException(result.getResults().stream()\n-\t\t\t\t\t.filter(r -> (r instanceof FailedEntityResult))\n-\t\t\t\t\t.map(FailedEntityResult.class::cast)\n-\t\t\t\t\t.map(FailedEntityResult::getThrowable)\n-\t\t\t\t\t.collect(Collectors.toList())));\n-\t\t\treturn;\n+\t\tif(result.getError().isPresent()) {\n+\t\t\tfail(storage, result.getError().get());\n+\t\t\tlog.warn(\"Form failed in query plan creation. {}\", result.getError().get());", "originalCommit": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyMjQ0OA==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462322448", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tlog.warn(\"Form failed in query plan creation. {}\", result.getError().get());\n          \n          \n            \n            \t\t\tlog.warn(\"Form failed in query plan creation.\", result.getError().get());", "author": "awildturtok", "createdAt": "2020-07-29T14:02:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyMjI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgwNTU1Mg==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462805552", "bodyText": "Habe das log entfernt, da schon in finish geloggt wird.", "author": "thoniTUB", "createdAt": "2020-07-30T07:34:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyMjI4NA=="}], "type": "inlineReview", "revised_code": {"commit": "c5e629eaf67e3c15e13239610a45b484ad823b87", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java b/backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java\nindex 4b70a40a7..15b1dd549 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/forms/managed/ManagedForm.java\n\n@@ -136,7 +136,6 @@ public class ManagedForm extends ManagedExecution<FormSharedResult> {\n \t\tManagedExecutionId subquery = result.getSubqueryId();\n \t\tif(result.getError().isPresent()) {\n \t\t\tfail(storage, result.getError().get());\n-\t\t\tlog.warn(\"Form failed in query plan creation. {}\", result.getError().get());\n \t\t\treturn;\t\t\t\n \t\t}\n \t\tManagedQuery subQuery = flatSubQueries.get(subquery);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzMTEzOA==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462331138", "bodyText": "mit if instanceof  k\u00f6nntestb du dir ein paar duplikate sparen aber wird denke ich trotzdem komisch sein", "author": "awildturtok", "createdAt": "2020-07-29T14:13:26Z", "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java", "diffHunk": "@@ -43,10 +43,16 @@ public void react(Worker context) throws Exception {\n \t\t// The results are send directly to these ManagesQueries\n \t\ttry {\n \t\t\tplans = execution.createQueryPlans(new QueryPlanContext(context)).entrySet();\t\t\n+\t\t} catch (ConqueryException e) {\t", "originalCommit": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxMTQyMA==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462811420", "bodyText": "Jap sieht besser aus", "author": "thoniTUB", "createdAt": "2020-07-30T07:45:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzMTEzOA=="}], "type": "inlineReview", "revised_code": {"commit": "c5e629eaf67e3c15e13239610a45b484ad823b87", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java b/backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java\nindex 4c16fc411..1fec721c1 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java\n\n@@ -43,33 +42,35 @@ public class ExecuteQuery extends WorkerMessage {\n \t\t// The results are send directly to these ManagesQueries\n \t\ttry {\n \t\t\tplans = execution.createQueryPlans(new QueryPlanContext(context)).entrySet();\t\t\n-\t\t} catch (ConqueryException e) {\t\n-\t\t\tlog.warn(\"Failed to create query plans for \" + execution.getId(), e );\n-\t\t\tShardResult result = execution.getInitializedShardResult(null);\n-\t\t\tsendFailureToMaster(result, execution, context, e.getCtx());\n-\t\t\treturn;\n \t\t} catch (Exception e) {\n-\t\t\tlog.error(\"Failed to create query plans for \" + execution.getId(), e );\n-\t\t\t// If one of the plans can not be created (maybe due to a Id that references a non existing concept) fail the whole job.\n+\t\t\tConqueryError err = asConqueryError(e);\n+\t\t\tlog.warn(\"Failed to create query plans for {}.\", execution.getId(), err );\n \t\t\tShardResult result = execution.getInitializedShardResult(null);\n-\t\t\tsendFailureToMaster(result, execution, context, new ConqueryError.UnknownError(e));\n+\t\t\tsendFailureToMaster(result, execution, context, err);\n \t\t\treturn;\n \t\t}\n+\t\t\n \t\t// Execute all plans.\n \t\tfor(Entry<ManagedExecutionId, QueryPlan> entry : plans) {\n \t\t\tShardResult result = execution.getInitializedShardResult(entry);\n \t\t\ttry {\n \t\t\t\tcontext.getQueryExecutor().execute(result, new QueryExecutionContext(context.getStorage()), entry);\n \t\t\t\tresult.getFuture().addListener(()->result.send(context), MoreExecutors.directExecutor());\n-\t\t\t} catch(ConqueryException e) {\n-\t\t\t\tlog.warn(\"Error while executing {} (with subquery: {})\", execution.getId(), entry.getKey(), e );\n-\t\t\t\tsendFailureToMaster(result, execution, context, e.getCtx());\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tlog.error(\"Error while executing {} (with subquery: {})\", execution.getId(), entry.getKey(), e );\n-\t\t\t\tsendFailureToMaster(result, execution, context, new ConqueryError.UnknownError(e));\n+\t\t\t} catch(Exception e) {\n+\t\t\t\tConqueryError err = asConqueryError(e);\n+\t\t\t\tlog.warn(\"Error while executing {} (with subquery: {})\", execution.getId(), entry.getKey(), err );\n+\t\t\t\tsendFailureToMaster(result, execution, context,  asConqueryError(err));\n+\t\t\t\treturn;\n \t\t\t}\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * Wraps the {@link Throwable} into an {@link ConqueryError}.\n+\t */\n+\tprivate static ConqueryError asConqueryError(Throwable t) {\n+\t\treturn t instanceof ConqueryError ? (ConqueryError) t : new ConqueryError.UnknownError(t);\n+\t}\n \n \tprivate static void sendFailureToMaster(ShardResult result, ManagedExecution<?> execution, Worker context, ConqueryError error) {\n \t\tresult.setError(Optional.of(error));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzMTU0OA==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462331548", "bodyText": "Utility Methode die dieses Wrapping macht w\u00e4re eigentlich sinnvoll denke ich", "author": "awildturtok", "createdAt": "2020-07-29T14:14:01Z", "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java", "diffHunk": "@@ -55,16 +61,19 @@ public void react(Worker context) throws Exception {\n \t\t\ttry {\n \t\t\t\tcontext.getQueryExecutor().execute(result, new QueryExecutionContext(context.getStorage()), entry);\n \t\t\t\tresult.getFuture().addListener(()->result.send(context), MoreExecutors.directExecutor());\n-\t\t\t} catch(Exception e) {\n+\t\t\t} catch(ConqueryException e) {", "originalCommit": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5e629eaf67e3c15e13239610a45b484ad823b87", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java b/backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java\nindex 4c16fc411..1fec721c1 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java\n\n@@ -43,33 +42,35 @@ public class ExecuteQuery extends WorkerMessage {\n \t\t// The results are send directly to these ManagesQueries\n \t\ttry {\n \t\t\tplans = execution.createQueryPlans(new QueryPlanContext(context)).entrySet();\t\t\n-\t\t} catch (ConqueryException e) {\t\n-\t\t\tlog.warn(\"Failed to create query plans for \" + execution.getId(), e );\n-\t\t\tShardResult result = execution.getInitializedShardResult(null);\n-\t\t\tsendFailureToMaster(result, execution, context, e.getCtx());\n-\t\t\treturn;\n \t\t} catch (Exception e) {\n-\t\t\tlog.error(\"Failed to create query plans for \" + execution.getId(), e );\n-\t\t\t// If one of the plans can not be created (maybe due to a Id that references a non existing concept) fail the whole job.\n+\t\t\tConqueryError err = asConqueryError(e);\n+\t\t\tlog.warn(\"Failed to create query plans for {}.\", execution.getId(), err );\n \t\t\tShardResult result = execution.getInitializedShardResult(null);\n-\t\t\tsendFailureToMaster(result, execution, context, new ConqueryError.UnknownError(e));\n+\t\t\tsendFailureToMaster(result, execution, context, err);\n \t\t\treturn;\n \t\t}\n+\t\t\n \t\t// Execute all plans.\n \t\tfor(Entry<ManagedExecutionId, QueryPlan> entry : plans) {\n \t\t\tShardResult result = execution.getInitializedShardResult(entry);\n \t\t\ttry {\n \t\t\t\tcontext.getQueryExecutor().execute(result, new QueryExecutionContext(context.getStorage()), entry);\n \t\t\t\tresult.getFuture().addListener(()->result.send(context), MoreExecutors.directExecutor());\n-\t\t\t} catch(ConqueryException e) {\n-\t\t\t\tlog.warn(\"Error while executing {} (with subquery: {})\", execution.getId(), entry.getKey(), e );\n-\t\t\t\tsendFailureToMaster(result, execution, context, e.getCtx());\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tlog.error(\"Error while executing {} (with subquery: {})\", execution.getId(), entry.getKey(), e );\n-\t\t\t\tsendFailureToMaster(result, execution, context, new ConqueryError.UnknownError(e));\n+\t\t\t} catch(Exception e) {\n+\t\t\t\tConqueryError err = asConqueryError(e);\n+\t\t\t\tlog.warn(\"Error while executing {} (with subquery: {})\", execution.getId(), entry.getKey(), err );\n+\t\t\t\tsendFailureToMaster(result, execution, context,  asConqueryError(err));\n+\t\t\t\treturn;\n \t\t\t}\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * Wraps the {@link Throwable} into an {@link ConqueryError}.\n+\t */\n+\tprivate static ConqueryError asConqueryError(Throwable t) {\n+\t\treturn t instanceof ConqueryError ? (ConqueryError) t : new ConqueryError.UnknownError(t);\n+\t}\n \n \tprivate static void sendFailureToMaster(ShardResult result, ManagedExecution<?> execution, Worker context, ConqueryError error) {\n \t\tresult.setError(Optional.of(error));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzMjExNw==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462332117", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tlog.error(\"Failed Query[{}]\", queryId);\n          \n          \n            \n            \t\t\tlog.error(\"Failed Query[{}]\", queryId, result.getError().get());", "author": "awildturtok", "createdAt": "2020-07-29T14:14:44Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java", "diffHunk": "@@ -95,13 +94,11 @@ public void initExecutable(@NonNull Namespaces namespaces) {\n \tpublic void addResult(@NonNull MasterMetaStorage storage, ShardResult result) {\n \t\tlog.debug(\"Received Result[size={}] for Query[{}]\", result.getResults().size(), result.getQueryId());\n \n-\t\tfor (EntityResult er : result.getResults()) {\n-\t\t\tif (er.isFailed() && state == ExecutionState.RUNNING) {\n-\t\t\t\tfail(storage);\n-\t\t\t\tFailedEntityResult failed = er.asFailed();\n-\t\t\t\tlog.error(\"Failed Query[{}] at least for the Entity[{}]\", queryId, failed.getEntityId(), failed.getThrowable());\n-\t\t\t}\n+\t\tif(result.getError().isPresent()) {\n+\t\t\tfail(storage, result.getError().get());\n+\t\t\tlog.error(\"Failed Query[{}]\", queryId);", "originalCommit": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxMjQ5MA==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462812490", "bodyText": "hab den log auch entfernt, da fail schon loggt mit noch mehr infos", "author": "thoniTUB", "createdAt": "2020-07-30T07:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzMjExNw=="}], "type": "inlineReview", "revised_code": {"commit": "c5e629eaf67e3c15e13239610a45b484ad823b87", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java b/backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java\nindex fe27e79c4..534b6d71a 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/query/ManagedQuery.java\n\n@@ -96,7 +96,6 @@ public class ManagedQuery extends ManagedExecution<ShardResult> {\n \n \t\tif(result.getError().isPresent()) {\n \t\t\tfail(storage, result.getError().get());\n-\t\t\tlog.error(\"Failed Query[{}]\", queryId);\n \t\t}\n \n \t\tsynchronized (getExecution()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzMjkzMQ==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462332931", "bodyText": "Exceptions iA ans Frontend zu verschicken ist glaube ich problematisch wenn da irgendwelche sensiblen bytes oder so drin gelogged sind", "author": "awildturtok", "createdAt": "2020-07-29T14:15:41Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/QueryJob.java", "diffHunk": "@@ -24,8 +25,13 @@ public EntityResult call() throws Exception {\n \t\t\t\n \t\t\treturn queryPlan.execute(ctx, entity);\n \t\t}\n-\t\tcatch(Exception e) {\n-\t\t\treturn EntityResult.failed(entity.getId(), e);\n+\t\tcatch (ConqueryException e) {\n+\t\t\t// Catch known errors (where the user can possibly fix something)\n+\t\t\treturn EntityResult.failed(entity.getId(), e.getCtx());\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\t// Catch unspecified errors, log them with their id and forward them as unknown errors.\n+\t\t\treturn EntityResult.failed(entity.getId(), new ConqueryError.UnknownError(e));", "originalCommit": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3NjI5NQ==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462376295", "bodyText": "Genau, deswegen wird die Exeption nur im Backend geloggt und das frontend bekommt einfach nur: Unbekannter Fehler", "author": "thoniTUB", "createdAt": "2020-07-29T15:11:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzMjkzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "c5e629eaf67e3c15e13239610a45b484ad823b87", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/query/QueryJob.java b/backend/src/main/java/com/bakdata/conquery/models/query/QueryJob.java\nindex 20abdf70c..8df6eef01 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/query/QueryJob.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/query/QueryJob.java\n\n@@ -25,9 +24,9 @@ public class QueryJob implements Callable<EntityResult> {\n \t\t\t\n \t\t\treturn queryPlan.execute(ctx, entity);\n \t\t}\n-\t\tcatch (ConqueryException e) {\n+\t\tcatch (ConqueryError e) {\n \t\t\t// Catch known errors (where the user can possibly fix something)\n-\t\t\treturn EntityResult.failed(entity.getId(), e.getCtx());\n+\t\t\treturn EntityResult.failed(entity.getId(), e);\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\t// Catch unspecified errors, log them with their id and forward them as unknown errors.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzNDI1MQ==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462334251", "bodyText": "was ist  This?", "author": "awildturtok", "createdAt": "2020-07-29T14:17:26Z", "path": "backend/src/test/java/com/bakdata/conquery/integration/IntegrationTests.java", "diffHunk": "@@ -64,7 +64,7 @@\n \tpublic Stream<DynamicNode> programmaticTests() {\n \t\tList<Class<?>> programmatic = CPSTypeIdResolver\n \t\t\t.SCAN_RESULT\n-\t\t\t.getClassesImplementing(ProgrammaticIntegrationTest.class.getName())\n+\t\t\t.getClassesImplementing(ProgrammaticIntegrationTest.This.class.getName())", "originalCommit": "238ad12f84d3b5f2c154d0f9f94ae40d46a505c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3MjI1NA==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462372254", "bodyText": "Oh, das ist noch eine abk\u00fcrzung aus dem debugging. Das muss raus", "author": "thoniTUB", "createdAt": "2020-07-29T15:06:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzNDI1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "892305cbb8b185a49773a1da29b17affc742c64f", "chunk": "diff --git a/backend/src/test/java/com/bakdata/conquery/integration/IntegrationTests.java b/backend/src/test/java/com/bakdata/conquery/integration/IntegrationTests.java\nindex bbd2a4d03..499bced1a 100644\n--- a/backend/src/test/java/com/bakdata/conquery/integration/IntegrationTests.java\n+++ b/backend/src/test/java/com/bakdata/conquery/integration/IntegrationTests.java\n\n@@ -64,7 +64,7 @@ public class IntegrationTests {\n \tpublic Stream<DynamicNode> programmaticTests() {\n \t\tList<Class<?>> programmatic = CPSTypeIdResolver\n \t\t\t.SCAN_RESULT\n-\t\t\t.getClassesImplementing(ProgrammaticIntegrationTest.This.class.getName())\n+\t\t\t.getClassesImplementing(ProgrammaticIntegrationTest.class.getName())\n \t\t\t.filter(info -> info.getPackageName().startsWith(defaultTestRootPackage))\n \t\t\t.loadClasses();\n \n"}}, {"oid": "892305cbb8b185a49773a1da29b17affc742c64f", "url": "https://github.com/bakdata/conquery/commit/892305cbb8b185a49773a1da29b17affc742c64f", "message": "reenabled all programmatic integration tests", "committedDate": "2020-07-29T15:15:30Z", "type": "forcePushed"}, {"oid": "5401d2c6ff8bfd451b76a1ea373e9af11b58fd54", "url": "https://github.com/bakdata/conquery/commit/5401d2c6ff8bfd451b76a1ea373e9af11b58fd54", "message": "reenabled all programmatic integration tests", "committedDate": "2020-07-30T06:47:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxNDQwOA==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462914408", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tsuper(\"The execution tooked too long to finish.\");\n          \n          \n            \n            \t\t\tsuper(\"The execution took too long to finish.\");", "author": "awildturtok", "createdAt": "2020-07-30T10:52:46Z", "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n+import com.bakdata.conquery.util.VariableDefaultValue;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.map.Flat3Map;\n+import org.apache.commons.text.StringSubstitutor;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+/**\n+ * Base class for errors that are thrown within Conquery and can be serialized\n+ * and deserialized to allow transportation between nodes.\n+ */\n+@SuppressWarnings(\"serial\")\n+@Getter\n+@Setter\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n+@CPSBase\n+@ToString(onlyExplicitlyIncluded = true)\n+public abstract class ConqueryError extends RuntimeException implements ConqueryErrorInfo {\n+\t\n+\t@VariableDefaultValue\n+\t@NotNull\n+\t@ToString.Include\n+\tprivate UUID id = UUID.randomUUID();\n+\t@NotEmpty\n+\tprivate String messageTemplate;\n+\tprivate Map<String, String> context;\n+\t\n+\t\n+\tpublic ConqueryError(String messageTemplate, Map<String, String> context) {\n+\t\tthis.messageTemplate = messageTemplate;\n+\t\tthis.context = context;\n+\t}\n+\t\n+\t@Override\n+\t@JsonIgnore\n+\t@ToString.Include\n+\tpublic String getMessage() {\n+\t\tString message = new StringSubstitutor(context).replace(messageTemplate);\n+\t\treturn message != null ? message : \"Unable to provide error message. No message template was provided by error.\";\n+\t}\n+\n+\t@Override\n+\tpublic PlainError asPlain() {\n+\t\treturn new PlainError(getId(), getCode(), getMessage(), getContext());\n+\t}\n+\n+\t@Override\n+\t@JsonIgnore // The code is the type information, so we do not need to serialize it\n+\tpublic String getCode() {\n+\t\treturn this.getClass().getAnnotation(CPSType.class).id();\n+\t}\n+\n+\tpublic static abstract class NoContextError extends ConqueryError {\n+\n+\t\tpublic NoContextError(String message) {\n+\t\t\tsuper(message, Collections.emptyMap());\n+\t\t}\n+\t}\n+\n+\tpublic static abstract class ContextError extends ConqueryError {\n+\n+\t\tpublic ContextError(String messageTemplate) {\n+\t\t\tsuper(messageTemplate, new Flat3Map<>());\n+\t\t}\n+\t}\n+\n+\t@Slf4j\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_UNKNOWN_ERROR\")\n+\tpublic static class UnknownError extends NoContextError {\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate UnknownError() {\n+\t\t\tsuper(\"An unknown error occured\");\n+\t\t}\n+\n+\t\tpublic UnknownError(Throwable e) {\n+\t\t\tthis();\n+\t\t\tlog.error(\"Encountered unknown error [{}]\", this.getId(), e);\n+\t\t}\n+\t}\n+\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION\")\n+\tpublic static class ExecutionCreationErrorUnspecified extends NoContextError {\n+\n+\t\tpublic ExecutionCreationErrorUnspecified() {\n+\t\t\tsuper(\"Failure during execution creation.\");\n+\t\t}\n+\t}\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE\")\n+\tpublic static class ExecutionCreationResolveError extends ContextError {\n+\n+\t\tprivate final static String FAILED_ELEMENT = \"ELEMENT\";\n+\t\tprivate final static String FAILED_ELEMENT_CLASS = \"ELEMENT_CLASS\";\n+\t\tprivate final static String TEMPLATE = \"Could not find an ${\" + FAILED_ELEMENT_CLASS + \"} element called '${\" + FAILED_ELEMENT + \"}'\";\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate ExecutionCreationResolveError() {\n+\t\t\tsuper(TEMPLATE);\n+\t\t}\n+\n+\t\tpublic ExecutionCreationResolveError(IId<?> unresolvableElementId) {\n+\t\t\tthis();\n+\t\t\tgetContext().put(FAILED_ELEMENT, unresolvableElementId.toString());\n+\t\t\tgetContext().put(FAILED_ELEMENT_CLASS, unresolvableElementId.getClass().getSimpleName());\n+\t\t}\n+\t}\n+\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE_EXTERNAL\")\n+\tpublic static class ExternalResolveError extends ContextError {\n+\n+\t\tprivate final static String FORMAT_ROW_LENGTH = \"formatRowLength\";\n+\t\tprivate final static String DATA_ROW_LENGTH = \"dataRowLength\";\n+\t\tprivate final static String TEMPLATE = \"There are ${\" + FORMAT_ROW_LENGTH + \"} columns in the format but ${\" + DATA_ROW_LENGTH + \"} in at least one row\";\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate ExternalResolveError() {\n+\t\t\tsuper(TEMPLATE);\n+\t\t}\n+\n+\t\tpublic ExternalResolveError(int formatRowLength, int dataRowLength) {\n+\t\t\tthis();\n+\t\t\tgetContext().put(FORMAT_ROW_LENGTH, Integer.toString(formatRowLength));\n+\t\t\tgetContext().put(DATA_ROW_LENGTH, Integer.toString(dataRowLength));\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Unspecified error during {@link QueryPlan}-creation.\n+\t */\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_PLAN\")\n+\tpublic static class ExecutionCreationPlanError extends NoContextError {\n+\n+\t\tpublic ExecutionCreationPlanError() {\n+\t\t\tsuper(\"Unable to generate query plan.\");\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Unspecified execution processing error.\n+\t */\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_PROCESSING\")\n+\tpublic static class ExecutionProcessingError extends NoContextError {\n+\n+\t\tpublic ExecutionProcessingError() {\n+\t\t\tsuper(\"An unexpected error occured during the execution.\");\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Timeout during processing.\n+\t */\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_PROCESSING_TIMEOUT\")\n+\tpublic static class ExecutionProcessingTimeoutError extends NoContextError {\n+\n+\t\tpublic ExecutionProcessingTimeoutError() {\n+\t\t\tsuper(\"The execution tooked too long to finish.\");", "originalCommit": "cb90f2cca95874adaabe272e7df62b949ef33dd3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5e629eaf67e3c15e13239610a45b484ad823b87", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java b/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\nindex ffe5ac494..de9e01f95 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n\n@@ -182,7 +182,7 @@ public abstract class ConqueryError extends RuntimeException implements Conquery\n \tpublic static class ExecutionProcessingTimeoutError extends NoContextError {\n \n \t\tpublic ExecutionProcessingTimeoutError() {\n-\t\t\tsuper(\"The execution tooked too long to finish.\");\n+\t\t\tsuper(\"The execution took too long to finish.\");\n \t\t}\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxNjQxNg==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r462916416", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tlog.warn(\"Failed to create query plans for \" + execution.getId(), e );\n          \n          \n            \n            \t\t\tlog.warn(\"Failed to create query plans for Execution[{}]\", execution.getId(), e );", "author": "awildturtok", "createdAt": "2020-07-30T10:56:45Z", "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java", "diffHunk": "@@ -43,28 +42,37 @@ public void react(Worker context) throws Exception {\n \t\t// The results are send directly to these ManagesQueries\n \t\ttry {\n \t\t\tplans = execution.createQueryPlans(new QueryPlanContext(context)).entrySet();\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tlog.error(\"Failed to create query plans for \" + execution.getId(), e );\n-\t\t\t// If one of the plans can not be created (maybe due to a Id that references a non existing concept) fail the whole job.\n-\t\t\tsendFailureToMaster(execution.getInitializedShardResult(null), execution, context, e);\n+\t\t} catch (Exception e) {\t\n+\t\t\tlog.warn(\"Failed to create query plans for \" + execution.getId(), e );", "originalCommit": "cb90f2cca95874adaabe272e7df62b949ef33dd3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5e629eaf67e3c15e13239610a45b484ad823b87", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java b/backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java\nindex 8a854c45d..1fec721c1 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java\n\n@@ -42,10 +42,11 @@ public class ExecuteQuery extends WorkerMessage {\n \t\t// The results are send directly to these ManagesQueries\n \t\ttry {\n \t\t\tplans = execution.createQueryPlans(new QueryPlanContext(context)).entrySet();\t\t\n-\t\t} catch (Exception e) {\t\n-\t\t\tlog.warn(\"Failed to create query plans for \" + execution.getId(), e );\n+\t\t} catch (Exception e) {\n+\t\t\tConqueryError err = asConqueryError(e);\n+\t\t\tlog.warn(\"Failed to create query plans for {}.\", execution.getId(), err );\n \t\t\tShardResult result = execution.getInitializedShardResult(null);\n-\t\t\tsendFailureToMaster(result, execution, context, asConqueryError(e));\n+\t\t\tsendFailureToMaster(result, execution, context, err);\n \t\t\treturn;\n \t\t}\n \t\t\n"}}, {"oid": "c5e629eaf67e3c15e13239610a45b484ad823b87", "url": "https://github.com/bakdata/conquery/commit/c5e629eaf67e3c15e13239610a45b484ad823b87", "message": "adds comment regarding dependency warning", "committedDate": "2020-08-03T15:12:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwOTY0NA==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r465609644", "bodyText": "private static final String NO_MESSAGE = \"Unable to provide error message. No message template was provided by error.\"\n\n...\n\nif (template == null) return NO_MESSAGE;\n\n...", "author": "awildturtok", "createdAt": "2020-08-05T09:53:05Z", "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n+import com.bakdata.conquery.util.VariableDefaultValue;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.map.Flat3Map;\n+import org.apache.commons.text.StringSubstitutor;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+/**\n+ * Base class for errors that are thrown within Conquery and can be serialized\n+ * and deserialized to allow transportation between nodes.\n+ */\n+@SuppressWarnings(\"serial\")\n+@Getter\n+@Setter\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n+@CPSBase\n+@ToString(onlyExplicitlyIncluded = true)\n+public abstract class ConqueryError extends RuntimeException implements ConqueryErrorInfo {\n+\t\n+\t@VariableDefaultValue\n+\t@NotNull\n+\t@ToString.Include\n+\tprivate UUID id = UUID.randomUUID();\n+\t@NotEmpty\n+\tprivate String messageTemplate;\n+\tprivate Map<String, String> context;\n+\t\n+\t\n+\tpublic ConqueryError(String messageTemplate, Map<String, String> context) {\n+\t\tthis.messageTemplate = messageTemplate;\n+\t\tthis.context = context;\n+\t}\n+\t\n+\t@Override\n+\t@JsonIgnore\n+\t@ToString.Include\n+\tpublic String getMessage() {\n+\t\tString message = new StringSubstitutor(context).replace(messageTemplate);", "originalCommit": "c5e629eaf67e3c15e13239610a45b484ad823b87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "953166cc7ade6dd47b8f37b33aaca7019a2480c4", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java b/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\ndeleted file mode 100644\nindex de9e01f95..000000000\n--- a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n+++ /dev/null\n\n@@ -1,188 +0,0 @@\n-package com.bakdata.conquery.models.error;\n-\n-import java.util.Collections;\n-import java.util.Map;\n-import java.util.UUID;\n-\n-import javax.validation.constraints.NotNull;\n-\n-import com.bakdata.conquery.io.cps.CPSBase;\n-import com.bakdata.conquery.io.cps.CPSType;\n-import com.bakdata.conquery.models.identifiable.ids.IId;\n-import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n-import com.bakdata.conquery.util.VariableDefaultValue;\n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import lombok.Getter;\n-import lombok.Setter;\n-import lombok.ToString;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.commons.collections4.map.Flat3Map;\n-import org.apache.commons.text.StringSubstitutor;\n-import org.hibernate.validator.constraints.NotEmpty;\n-\n-/**\n- * Base class for errors that are thrown within Conquery and can be serialized\n- * and deserialized to allow transportation between nodes.\n- */\n-@SuppressWarnings(\"serial\")\n-@Getter\n-@Setter\n-@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n-@CPSBase\n-@ToString(onlyExplicitlyIncluded = true)\n-public abstract class ConqueryError extends RuntimeException implements ConqueryErrorInfo {\n-\t\n-\t@VariableDefaultValue\n-\t@NotNull\n-\t@ToString.Include\n-\tprivate UUID id = UUID.randomUUID();\n-\t@NotEmpty\n-\tprivate String messageTemplate;\n-\tprivate Map<String, String> context;\n-\t\n-\t\n-\tpublic ConqueryError(String messageTemplate, Map<String, String> context) {\n-\t\tthis.messageTemplate = messageTemplate;\n-\t\tthis.context = context;\n-\t}\n-\t\n-\t@Override\n-\t@JsonIgnore\n-\t@ToString.Include\n-\tpublic String getMessage() {\n-\t\tString message = new StringSubstitutor(context).replace(messageTemplate);\n-\t\treturn message != null ? message : \"Unable to provide error message. No message template was provided by error.\";\n-\t}\n-\n-\t@Override\n-\tpublic PlainError asPlain() {\n-\t\treturn new PlainError(getId(), getCode(), getMessage(), getContext());\n-\t}\n-\n-\t@Override\n-\t@JsonIgnore // The code is the type information, so we do not need to serialize it\n-\tpublic String getCode() {\n-\t\treturn this.getClass().getAnnotation(CPSType.class).id();\n-\t}\n-\n-\tpublic static abstract class NoContextError extends ConqueryError {\n-\n-\t\tpublic NoContextError(String message) {\n-\t\t\tsuper(message, Collections.emptyMap());\n-\t\t}\n-\t}\n-\n-\tpublic static abstract class ContextError extends ConqueryError {\n-\n-\t\tpublic ContextError(String messageTemplate) {\n-\t\t\tsuper(messageTemplate, new Flat3Map<>());\n-\t\t}\n-\t}\n-\n-\t@Slf4j\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_UNKNOWN_ERROR\")\n-\tpublic static class UnknownError extends NoContextError {\n-\n-\t\t/**\n-\t\t * Constructor for deserialization.\n-\t\t */\n-\t\t@JsonCreator\n-\t\tprivate UnknownError() {\n-\t\t\tsuper(\"An unknown error occured\");\n-\t\t}\n-\n-\t\tpublic UnknownError(Throwable e) {\n-\t\t\tthis();\n-\t\t\tlog.error(\"Encountered unknown error [{}]\", this.getId(), e);\n-\t\t}\n-\t}\n-\n-\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION\")\n-\tpublic static class ExecutionCreationErrorUnspecified extends NoContextError {\n-\n-\t\tpublic ExecutionCreationErrorUnspecified() {\n-\t\t\tsuper(\"Failure during execution creation.\");\n-\t\t}\n-\t}\n-\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE\")\n-\tpublic static class ExecutionCreationResolveError extends ContextError {\n-\n-\t\tprivate final static String FAILED_ELEMENT = \"ELEMENT\";\n-\t\tprivate final static String FAILED_ELEMENT_CLASS = \"ELEMENT_CLASS\";\n-\t\tprivate final static String TEMPLATE = \"Could not find an ${\" + FAILED_ELEMENT_CLASS + \"} element called '${\" + FAILED_ELEMENT + \"}'\";\n-\n-\t\t/**\n-\t\t * Constructor for deserialization.\n-\t\t */\n-\t\t@JsonCreator\n-\t\tprivate ExecutionCreationResolveError() {\n-\t\t\tsuper(TEMPLATE);\n-\t\t}\n-\n-\t\tpublic ExecutionCreationResolveError(IId<?> unresolvableElementId) {\n-\t\t\tthis();\n-\t\t\tgetContext().put(FAILED_ELEMENT, unresolvableElementId.toString());\n-\t\t\tgetContext().put(FAILED_ELEMENT_CLASS, unresolvableElementId.getClass().getSimpleName());\n-\t\t}\n-\t}\n-\n-\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE_EXTERNAL\")\n-\tpublic static class ExternalResolveError extends ContextError {\n-\n-\t\tprivate final static String FORMAT_ROW_LENGTH = \"formatRowLength\";\n-\t\tprivate final static String DATA_ROW_LENGTH = \"dataRowLength\";\n-\t\tprivate final static String TEMPLATE = \"There are ${\" + FORMAT_ROW_LENGTH + \"} columns in the format but ${\" + DATA_ROW_LENGTH + \"} in at least one row\";\n-\n-\t\t/**\n-\t\t * Constructor for deserialization.\n-\t\t */\n-\t\t@JsonCreator\n-\t\tprivate ExternalResolveError() {\n-\t\t\tsuper(TEMPLATE);\n-\t\t}\n-\n-\t\tpublic ExternalResolveError(int formatRowLength, int dataRowLength) {\n-\t\t\tthis();\n-\t\t\tgetContext().put(FORMAT_ROW_LENGTH, Integer.toString(formatRowLength));\n-\t\t\tgetContext().put(DATA_ROW_LENGTH, Integer.toString(dataRowLength));\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Unspecified error during {@link QueryPlan}-creation.\n-\t */\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_PLAN\")\n-\tpublic static class ExecutionCreationPlanError extends NoContextError {\n-\n-\t\tpublic ExecutionCreationPlanError() {\n-\t\t\tsuper(\"Unable to generate query plan.\");\n-\t\t}\n-\t}\n-\t\n-\t/**\n-\t * Unspecified execution processing error.\n-\t */\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_PROCESSING\")\n-\tpublic static class ExecutionProcessingError extends NoContextError {\n-\n-\t\tpublic ExecutionProcessingError() {\n-\t\t\tsuper(\"An unexpected error occured during the execution.\");\n-\t\t}\n-\t}\n-\t\n-\t/**\n-\t * Timeout during processing.\n-\t */\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_PROCESSING_TIMEOUT\")\n-\tpublic static class ExecutionProcessingTimeoutError extends NoContextError {\n-\n-\t\tpublic ExecutionProcessingTimeoutError() {\n-\t\t\tsuper(\"The execution took too long to finish.\");\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYxMDEyNQ==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r465610125", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic String getCode() {\n          \n          \n            \n            \tpublic final String getCode() {", "author": "awildturtok", "createdAt": "2020-08-05T09:54:00Z", "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n+import com.bakdata.conquery.util.VariableDefaultValue;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.map.Flat3Map;\n+import org.apache.commons.text.StringSubstitutor;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+/**\n+ * Base class for errors that are thrown within Conquery and can be serialized\n+ * and deserialized to allow transportation between nodes.\n+ */\n+@SuppressWarnings(\"serial\")\n+@Getter\n+@Setter\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n+@CPSBase\n+@ToString(onlyExplicitlyIncluded = true)\n+public abstract class ConqueryError extends RuntimeException implements ConqueryErrorInfo {\n+\t\n+\t@VariableDefaultValue\n+\t@NotNull\n+\t@ToString.Include\n+\tprivate UUID id = UUID.randomUUID();\n+\t@NotEmpty\n+\tprivate String messageTemplate;\n+\tprivate Map<String, String> context;\n+\t\n+\t\n+\tpublic ConqueryError(String messageTemplate, Map<String, String> context) {\n+\t\tthis.messageTemplate = messageTemplate;\n+\t\tthis.context = context;\n+\t}\n+\t\n+\t@Override\n+\t@JsonIgnore\n+\t@ToString.Include\n+\tpublic String getMessage() {\n+\t\tString message = new StringSubstitutor(context).replace(messageTemplate);\n+\t\treturn message != null ? message : \"Unable to provide error message. No message template was provided by error.\";\n+\t}\n+\n+\t@Override\n+\tpublic PlainError asPlain() {\n+\t\treturn new PlainError(getId(), getCode(), getMessage(), getContext());\n+\t}\n+\n+\t@Override\n+\t@JsonIgnore // The code is the type information, so we do not need to serialize it\n+\tpublic String getCode() {", "originalCommit": "c5e629eaf67e3c15e13239610a45b484ad823b87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "953166cc7ade6dd47b8f37b33aaca7019a2480c4", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java b/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\ndeleted file mode 100644\nindex de9e01f95..000000000\n--- a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n+++ /dev/null\n\n@@ -1,188 +0,0 @@\n-package com.bakdata.conquery.models.error;\n-\n-import java.util.Collections;\n-import java.util.Map;\n-import java.util.UUID;\n-\n-import javax.validation.constraints.NotNull;\n-\n-import com.bakdata.conquery.io.cps.CPSBase;\n-import com.bakdata.conquery.io.cps.CPSType;\n-import com.bakdata.conquery.models.identifiable.ids.IId;\n-import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n-import com.bakdata.conquery.util.VariableDefaultValue;\n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import lombok.Getter;\n-import lombok.Setter;\n-import lombok.ToString;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.commons.collections4.map.Flat3Map;\n-import org.apache.commons.text.StringSubstitutor;\n-import org.hibernate.validator.constraints.NotEmpty;\n-\n-/**\n- * Base class for errors that are thrown within Conquery and can be serialized\n- * and deserialized to allow transportation between nodes.\n- */\n-@SuppressWarnings(\"serial\")\n-@Getter\n-@Setter\n-@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n-@CPSBase\n-@ToString(onlyExplicitlyIncluded = true)\n-public abstract class ConqueryError extends RuntimeException implements ConqueryErrorInfo {\n-\t\n-\t@VariableDefaultValue\n-\t@NotNull\n-\t@ToString.Include\n-\tprivate UUID id = UUID.randomUUID();\n-\t@NotEmpty\n-\tprivate String messageTemplate;\n-\tprivate Map<String, String> context;\n-\t\n-\t\n-\tpublic ConqueryError(String messageTemplate, Map<String, String> context) {\n-\t\tthis.messageTemplate = messageTemplate;\n-\t\tthis.context = context;\n-\t}\n-\t\n-\t@Override\n-\t@JsonIgnore\n-\t@ToString.Include\n-\tpublic String getMessage() {\n-\t\tString message = new StringSubstitutor(context).replace(messageTemplate);\n-\t\treturn message != null ? message : \"Unable to provide error message. No message template was provided by error.\";\n-\t}\n-\n-\t@Override\n-\tpublic PlainError asPlain() {\n-\t\treturn new PlainError(getId(), getCode(), getMessage(), getContext());\n-\t}\n-\n-\t@Override\n-\t@JsonIgnore // The code is the type information, so we do not need to serialize it\n-\tpublic String getCode() {\n-\t\treturn this.getClass().getAnnotation(CPSType.class).id();\n-\t}\n-\n-\tpublic static abstract class NoContextError extends ConqueryError {\n-\n-\t\tpublic NoContextError(String message) {\n-\t\t\tsuper(message, Collections.emptyMap());\n-\t\t}\n-\t}\n-\n-\tpublic static abstract class ContextError extends ConqueryError {\n-\n-\t\tpublic ContextError(String messageTemplate) {\n-\t\t\tsuper(messageTemplate, new Flat3Map<>());\n-\t\t}\n-\t}\n-\n-\t@Slf4j\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_UNKNOWN_ERROR\")\n-\tpublic static class UnknownError extends NoContextError {\n-\n-\t\t/**\n-\t\t * Constructor for deserialization.\n-\t\t */\n-\t\t@JsonCreator\n-\t\tprivate UnknownError() {\n-\t\t\tsuper(\"An unknown error occured\");\n-\t\t}\n-\n-\t\tpublic UnknownError(Throwable e) {\n-\t\t\tthis();\n-\t\t\tlog.error(\"Encountered unknown error [{}]\", this.getId(), e);\n-\t\t}\n-\t}\n-\n-\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION\")\n-\tpublic static class ExecutionCreationErrorUnspecified extends NoContextError {\n-\n-\t\tpublic ExecutionCreationErrorUnspecified() {\n-\t\t\tsuper(\"Failure during execution creation.\");\n-\t\t}\n-\t}\n-\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE\")\n-\tpublic static class ExecutionCreationResolveError extends ContextError {\n-\n-\t\tprivate final static String FAILED_ELEMENT = \"ELEMENT\";\n-\t\tprivate final static String FAILED_ELEMENT_CLASS = \"ELEMENT_CLASS\";\n-\t\tprivate final static String TEMPLATE = \"Could not find an ${\" + FAILED_ELEMENT_CLASS + \"} element called '${\" + FAILED_ELEMENT + \"}'\";\n-\n-\t\t/**\n-\t\t * Constructor for deserialization.\n-\t\t */\n-\t\t@JsonCreator\n-\t\tprivate ExecutionCreationResolveError() {\n-\t\t\tsuper(TEMPLATE);\n-\t\t}\n-\n-\t\tpublic ExecutionCreationResolveError(IId<?> unresolvableElementId) {\n-\t\t\tthis();\n-\t\t\tgetContext().put(FAILED_ELEMENT, unresolvableElementId.toString());\n-\t\t\tgetContext().put(FAILED_ELEMENT_CLASS, unresolvableElementId.getClass().getSimpleName());\n-\t\t}\n-\t}\n-\n-\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE_EXTERNAL\")\n-\tpublic static class ExternalResolveError extends ContextError {\n-\n-\t\tprivate final static String FORMAT_ROW_LENGTH = \"formatRowLength\";\n-\t\tprivate final static String DATA_ROW_LENGTH = \"dataRowLength\";\n-\t\tprivate final static String TEMPLATE = \"There are ${\" + FORMAT_ROW_LENGTH + \"} columns in the format but ${\" + DATA_ROW_LENGTH + \"} in at least one row\";\n-\n-\t\t/**\n-\t\t * Constructor for deserialization.\n-\t\t */\n-\t\t@JsonCreator\n-\t\tprivate ExternalResolveError() {\n-\t\t\tsuper(TEMPLATE);\n-\t\t}\n-\n-\t\tpublic ExternalResolveError(int formatRowLength, int dataRowLength) {\n-\t\t\tthis();\n-\t\t\tgetContext().put(FORMAT_ROW_LENGTH, Integer.toString(formatRowLength));\n-\t\t\tgetContext().put(DATA_ROW_LENGTH, Integer.toString(dataRowLength));\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Unspecified error during {@link QueryPlan}-creation.\n-\t */\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_PLAN\")\n-\tpublic static class ExecutionCreationPlanError extends NoContextError {\n-\n-\t\tpublic ExecutionCreationPlanError() {\n-\t\t\tsuper(\"Unable to generate query plan.\");\n-\t\t}\n-\t}\n-\t\n-\t/**\n-\t * Unspecified execution processing error.\n-\t */\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_PROCESSING\")\n-\tpublic static class ExecutionProcessingError extends NoContextError {\n-\n-\t\tpublic ExecutionProcessingError() {\n-\t\t\tsuper(\"An unexpected error occured during the execution.\");\n-\t\t}\n-\t}\n-\t\n-\t/**\n-\t * Timeout during processing.\n-\t */\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_PROCESSING_TIMEOUT\")\n-\tpublic static class ExecutionProcessingTimeoutError extends NoContextError {\n-\n-\t\tpublic ExecutionProcessingTimeoutError() {\n-\t\t\tsuper(\"The execution took too long to finish.\");\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYxMDU1NA==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r465610554", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tlog.error(\"Encountered unknown error [{}]\", this.getId(), e);\n          \n          \n            \n            \t\t\tlog.error(\"Encountered unknown Error[{}]\", this.getId(), e);", "author": "awildturtok", "createdAt": "2020-08-05T09:54:44Z", "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n+import com.bakdata.conquery.util.VariableDefaultValue;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.map.Flat3Map;\n+import org.apache.commons.text.StringSubstitutor;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+/**\n+ * Base class for errors that are thrown within Conquery and can be serialized\n+ * and deserialized to allow transportation between nodes.\n+ */\n+@SuppressWarnings(\"serial\")\n+@Getter\n+@Setter\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n+@CPSBase\n+@ToString(onlyExplicitlyIncluded = true)\n+public abstract class ConqueryError extends RuntimeException implements ConqueryErrorInfo {\n+\t\n+\t@VariableDefaultValue\n+\t@NotNull\n+\t@ToString.Include\n+\tprivate UUID id = UUID.randomUUID();\n+\t@NotEmpty\n+\tprivate String messageTemplate;\n+\tprivate Map<String, String> context;\n+\t\n+\t\n+\tpublic ConqueryError(String messageTemplate, Map<String, String> context) {\n+\t\tthis.messageTemplate = messageTemplate;\n+\t\tthis.context = context;\n+\t}\n+\t\n+\t@Override\n+\t@JsonIgnore\n+\t@ToString.Include\n+\tpublic String getMessage() {\n+\t\tString message = new StringSubstitutor(context).replace(messageTemplate);\n+\t\treturn message != null ? message : \"Unable to provide error message. No message template was provided by error.\";\n+\t}\n+\n+\t@Override\n+\tpublic PlainError asPlain() {\n+\t\treturn new PlainError(getId(), getCode(), getMessage(), getContext());\n+\t}\n+\n+\t@Override\n+\t@JsonIgnore // The code is the type information, so we do not need to serialize it\n+\tpublic String getCode() {\n+\t\treturn this.getClass().getAnnotation(CPSType.class).id();\n+\t}\n+\n+\tpublic static abstract class NoContextError extends ConqueryError {\n+\n+\t\tpublic NoContextError(String message) {\n+\t\t\tsuper(message, Collections.emptyMap());\n+\t\t}\n+\t}\n+\n+\tpublic static abstract class ContextError extends ConqueryError {\n+\n+\t\tpublic ContextError(String messageTemplate) {\n+\t\t\tsuper(messageTemplate, new Flat3Map<>());\n+\t\t}\n+\t}\n+\n+\t@Slf4j\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_UNKNOWN_ERROR\")\n+\tpublic static class UnknownError extends NoContextError {\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate UnknownError() {\n+\t\t\tsuper(\"An unknown error occured\");\n+\t\t}\n+\n+\t\tpublic UnknownError(Throwable e) {\n+\t\t\tthis();\n+\t\t\tlog.error(\"Encountered unknown error [{}]\", this.getId(), e);", "originalCommit": "c5e629eaf67e3c15e13239610a45b484ad823b87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "953166cc7ade6dd47b8f37b33aaca7019a2480c4", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java b/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\ndeleted file mode 100644\nindex de9e01f95..000000000\n--- a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n+++ /dev/null\n\n@@ -1,188 +0,0 @@\n-package com.bakdata.conquery.models.error;\n-\n-import java.util.Collections;\n-import java.util.Map;\n-import java.util.UUID;\n-\n-import javax.validation.constraints.NotNull;\n-\n-import com.bakdata.conquery.io.cps.CPSBase;\n-import com.bakdata.conquery.io.cps.CPSType;\n-import com.bakdata.conquery.models.identifiable.ids.IId;\n-import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n-import com.bakdata.conquery.util.VariableDefaultValue;\n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import lombok.Getter;\n-import lombok.Setter;\n-import lombok.ToString;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.commons.collections4.map.Flat3Map;\n-import org.apache.commons.text.StringSubstitutor;\n-import org.hibernate.validator.constraints.NotEmpty;\n-\n-/**\n- * Base class for errors that are thrown within Conquery and can be serialized\n- * and deserialized to allow transportation between nodes.\n- */\n-@SuppressWarnings(\"serial\")\n-@Getter\n-@Setter\n-@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n-@CPSBase\n-@ToString(onlyExplicitlyIncluded = true)\n-public abstract class ConqueryError extends RuntimeException implements ConqueryErrorInfo {\n-\t\n-\t@VariableDefaultValue\n-\t@NotNull\n-\t@ToString.Include\n-\tprivate UUID id = UUID.randomUUID();\n-\t@NotEmpty\n-\tprivate String messageTemplate;\n-\tprivate Map<String, String> context;\n-\t\n-\t\n-\tpublic ConqueryError(String messageTemplate, Map<String, String> context) {\n-\t\tthis.messageTemplate = messageTemplate;\n-\t\tthis.context = context;\n-\t}\n-\t\n-\t@Override\n-\t@JsonIgnore\n-\t@ToString.Include\n-\tpublic String getMessage() {\n-\t\tString message = new StringSubstitutor(context).replace(messageTemplate);\n-\t\treturn message != null ? message : \"Unable to provide error message. No message template was provided by error.\";\n-\t}\n-\n-\t@Override\n-\tpublic PlainError asPlain() {\n-\t\treturn new PlainError(getId(), getCode(), getMessage(), getContext());\n-\t}\n-\n-\t@Override\n-\t@JsonIgnore // The code is the type information, so we do not need to serialize it\n-\tpublic String getCode() {\n-\t\treturn this.getClass().getAnnotation(CPSType.class).id();\n-\t}\n-\n-\tpublic static abstract class NoContextError extends ConqueryError {\n-\n-\t\tpublic NoContextError(String message) {\n-\t\t\tsuper(message, Collections.emptyMap());\n-\t\t}\n-\t}\n-\n-\tpublic static abstract class ContextError extends ConqueryError {\n-\n-\t\tpublic ContextError(String messageTemplate) {\n-\t\t\tsuper(messageTemplate, new Flat3Map<>());\n-\t\t}\n-\t}\n-\n-\t@Slf4j\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_UNKNOWN_ERROR\")\n-\tpublic static class UnknownError extends NoContextError {\n-\n-\t\t/**\n-\t\t * Constructor for deserialization.\n-\t\t */\n-\t\t@JsonCreator\n-\t\tprivate UnknownError() {\n-\t\t\tsuper(\"An unknown error occured\");\n-\t\t}\n-\n-\t\tpublic UnknownError(Throwable e) {\n-\t\t\tthis();\n-\t\t\tlog.error(\"Encountered unknown error [{}]\", this.getId(), e);\n-\t\t}\n-\t}\n-\n-\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION\")\n-\tpublic static class ExecutionCreationErrorUnspecified extends NoContextError {\n-\n-\t\tpublic ExecutionCreationErrorUnspecified() {\n-\t\t\tsuper(\"Failure during execution creation.\");\n-\t\t}\n-\t}\n-\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE\")\n-\tpublic static class ExecutionCreationResolveError extends ContextError {\n-\n-\t\tprivate final static String FAILED_ELEMENT = \"ELEMENT\";\n-\t\tprivate final static String FAILED_ELEMENT_CLASS = \"ELEMENT_CLASS\";\n-\t\tprivate final static String TEMPLATE = \"Could not find an ${\" + FAILED_ELEMENT_CLASS + \"} element called '${\" + FAILED_ELEMENT + \"}'\";\n-\n-\t\t/**\n-\t\t * Constructor for deserialization.\n-\t\t */\n-\t\t@JsonCreator\n-\t\tprivate ExecutionCreationResolveError() {\n-\t\t\tsuper(TEMPLATE);\n-\t\t}\n-\n-\t\tpublic ExecutionCreationResolveError(IId<?> unresolvableElementId) {\n-\t\t\tthis();\n-\t\t\tgetContext().put(FAILED_ELEMENT, unresolvableElementId.toString());\n-\t\t\tgetContext().put(FAILED_ELEMENT_CLASS, unresolvableElementId.getClass().getSimpleName());\n-\t\t}\n-\t}\n-\n-\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE_EXTERNAL\")\n-\tpublic static class ExternalResolveError extends ContextError {\n-\n-\t\tprivate final static String FORMAT_ROW_LENGTH = \"formatRowLength\";\n-\t\tprivate final static String DATA_ROW_LENGTH = \"dataRowLength\";\n-\t\tprivate final static String TEMPLATE = \"There are ${\" + FORMAT_ROW_LENGTH + \"} columns in the format but ${\" + DATA_ROW_LENGTH + \"} in at least one row\";\n-\n-\t\t/**\n-\t\t * Constructor for deserialization.\n-\t\t */\n-\t\t@JsonCreator\n-\t\tprivate ExternalResolveError() {\n-\t\t\tsuper(TEMPLATE);\n-\t\t}\n-\n-\t\tpublic ExternalResolveError(int formatRowLength, int dataRowLength) {\n-\t\t\tthis();\n-\t\t\tgetContext().put(FORMAT_ROW_LENGTH, Integer.toString(formatRowLength));\n-\t\t\tgetContext().put(DATA_ROW_LENGTH, Integer.toString(dataRowLength));\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Unspecified error during {@link QueryPlan}-creation.\n-\t */\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_PLAN\")\n-\tpublic static class ExecutionCreationPlanError extends NoContextError {\n-\n-\t\tpublic ExecutionCreationPlanError() {\n-\t\t\tsuper(\"Unable to generate query plan.\");\n-\t\t}\n-\t}\n-\t\n-\t/**\n-\t * Unspecified execution processing error.\n-\t */\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_PROCESSING\")\n-\tpublic static class ExecutionProcessingError extends NoContextError {\n-\n-\t\tpublic ExecutionProcessingError() {\n-\t\t\tsuper(\"An unexpected error occured during the execution.\");\n-\t\t}\n-\t}\n-\t\n-\t/**\n-\t * Timeout during processing.\n-\t */\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_PROCESSING_TIMEOUT\")\n-\tpublic static class ExecutionProcessingTimeoutError extends NoContextError {\n-\n-\t\tpublic ExecutionProcessingTimeoutError() {\n-\t\t\tsuper(\"The execution took too long to finish.\");\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYxMjA2Nw==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r465612067", "bodyText": "Warum machen wir das toString und nicht der Substitutor?", "author": "awildturtok", "createdAt": "2020-08-05T09:57:30Z", "path": "backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package com.bakdata.conquery.models.error;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.identifiable.ids.IId;\n+import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n+import com.bakdata.conquery.util.VariableDefaultValue;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.map.Flat3Map;\n+import org.apache.commons.text.StringSubstitutor;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+/**\n+ * Base class for errors that are thrown within Conquery and can be serialized\n+ * and deserialized to allow transportation between nodes.\n+ */\n+@SuppressWarnings(\"serial\")\n+@Getter\n+@Setter\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n+@CPSBase\n+@ToString(onlyExplicitlyIncluded = true)\n+public abstract class ConqueryError extends RuntimeException implements ConqueryErrorInfo {\n+\t\n+\t@VariableDefaultValue\n+\t@NotNull\n+\t@ToString.Include\n+\tprivate UUID id = UUID.randomUUID();\n+\t@NotEmpty\n+\tprivate String messageTemplate;\n+\tprivate Map<String, String> context;\n+\t\n+\t\n+\tpublic ConqueryError(String messageTemplate, Map<String, String> context) {\n+\t\tthis.messageTemplate = messageTemplate;\n+\t\tthis.context = context;\n+\t}\n+\t\n+\t@Override\n+\t@JsonIgnore\n+\t@ToString.Include\n+\tpublic String getMessage() {\n+\t\tString message = new StringSubstitutor(context).replace(messageTemplate);\n+\t\treturn message != null ? message : \"Unable to provide error message. No message template was provided by error.\";\n+\t}\n+\n+\t@Override\n+\tpublic PlainError asPlain() {\n+\t\treturn new PlainError(getId(), getCode(), getMessage(), getContext());\n+\t}\n+\n+\t@Override\n+\t@JsonIgnore // The code is the type information, so we do not need to serialize it\n+\tpublic String getCode() {\n+\t\treturn this.getClass().getAnnotation(CPSType.class).id();\n+\t}\n+\n+\tpublic static abstract class NoContextError extends ConqueryError {\n+\n+\t\tpublic NoContextError(String message) {\n+\t\t\tsuper(message, Collections.emptyMap());\n+\t\t}\n+\t}\n+\n+\tpublic static abstract class ContextError extends ConqueryError {\n+\n+\t\tpublic ContextError(String messageTemplate) {\n+\t\t\tsuper(messageTemplate, new Flat3Map<>());\n+\t\t}\n+\t}\n+\n+\t@Slf4j\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_UNKNOWN_ERROR\")\n+\tpublic static class UnknownError extends NoContextError {\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate UnknownError() {\n+\t\t\tsuper(\"An unknown error occured\");\n+\t\t}\n+\n+\t\tpublic UnknownError(Throwable e) {\n+\t\t\tthis();\n+\t\t\tlog.error(\"Encountered unknown error [{}]\", this.getId(), e);\n+\t\t}\n+\t}\n+\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION\")\n+\tpublic static class ExecutionCreationErrorUnspecified extends NoContextError {\n+\n+\t\tpublic ExecutionCreationErrorUnspecified() {\n+\t\t\tsuper(\"Failure during execution creation.\");\n+\t\t}\n+\t}\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE\")\n+\tpublic static class ExecutionCreationResolveError extends ContextError {\n+\n+\t\tprivate final static String FAILED_ELEMENT = \"ELEMENT\";\n+\t\tprivate final static String FAILED_ELEMENT_CLASS = \"ELEMENT_CLASS\";\n+\t\tprivate final static String TEMPLATE = \"Could not find an ${\" + FAILED_ELEMENT_CLASS + \"} element called '${\" + FAILED_ELEMENT + \"}'\";\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate ExecutionCreationResolveError() {\n+\t\t\tsuper(TEMPLATE);\n+\t\t}\n+\n+\t\tpublic ExecutionCreationResolveError(IId<?> unresolvableElementId) {\n+\t\t\tthis();\n+\t\t\tgetContext().put(FAILED_ELEMENT, unresolvableElementId.toString());\n+\t\t\tgetContext().put(FAILED_ELEMENT_CLASS, unresolvableElementId.getClass().getSimpleName());\n+\t\t}\n+\t}\n+\n+\n+\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE_EXTERNAL\")\n+\tpublic static class ExternalResolveError extends ContextError {\n+\n+\t\tprivate final static String FORMAT_ROW_LENGTH = \"formatRowLength\";\n+\t\tprivate final static String DATA_ROW_LENGTH = \"dataRowLength\";\n+\t\tprivate final static String TEMPLATE = \"There are ${\" + FORMAT_ROW_LENGTH + \"} columns in the format but ${\" + DATA_ROW_LENGTH + \"} in at least one row\";\n+\n+\t\t/**\n+\t\t * Constructor for deserialization.\n+\t\t */\n+\t\t@JsonCreator\n+\t\tprivate ExternalResolveError() {\n+\t\t\tsuper(TEMPLATE);\n+\t\t}\n+\n+\t\tpublic ExternalResolveError(int formatRowLength, int dataRowLength) {\n+\t\t\tthis();\n+\t\t\tgetContext().put(FORMAT_ROW_LENGTH, Integer.toString(formatRowLength));", "originalCommit": "c5e629eaf67e3c15e13239610a45b484ad823b87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2NjQwNA==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r468366404", "bodyText": "Ich h\u00e4tte gerne, dass in ConqueryError der Context ordentlich serializiert und deserialisiert werden kann. Damit man Integer in den Context packen kann m\u00fcsste ich es eine Map<String,Object> machen, womit aber Deserializierungs-Informationen verloren gehen.", "author": "thoniTUB", "createdAt": "2020-08-11T06:58:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYxMjA2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "953166cc7ade6dd47b8f37b33aaca7019a2480c4", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java b/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\ndeleted file mode 100644\nindex de9e01f95..000000000\n--- a/backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n+++ /dev/null\n\n@@ -1,188 +0,0 @@\n-package com.bakdata.conquery.models.error;\n-\n-import java.util.Collections;\n-import java.util.Map;\n-import java.util.UUID;\n-\n-import javax.validation.constraints.NotNull;\n-\n-import com.bakdata.conquery.io.cps.CPSBase;\n-import com.bakdata.conquery.io.cps.CPSType;\n-import com.bakdata.conquery.models.identifiable.ids.IId;\n-import com.bakdata.conquery.models.query.queryplan.QueryPlan;\n-import com.bakdata.conquery.util.VariableDefaultValue;\n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import lombok.Getter;\n-import lombok.Setter;\n-import lombok.ToString;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.commons.collections4.map.Flat3Map;\n-import org.apache.commons.text.StringSubstitutor;\n-import org.hibernate.validator.constraints.NotEmpty;\n-\n-/**\n- * Base class for errors that are thrown within Conquery and can be serialized\n- * and deserialized to allow transportation between nodes.\n- */\n-@SuppressWarnings(\"serial\")\n-@Getter\n-@Setter\n-@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"code\")\n-@CPSBase\n-@ToString(onlyExplicitlyIncluded = true)\n-public abstract class ConqueryError extends RuntimeException implements ConqueryErrorInfo {\n-\t\n-\t@VariableDefaultValue\n-\t@NotNull\n-\t@ToString.Include\n-\tprivate UUID id = UUID.randomUUID();\n-\t@NotEmpty\n-\tprivate String messageTemplate;\n-\tprivate Map<String, String> context;\n-\t\n-\t\n-\tpublic ConqueryError(String messageTemplate, Map<String, String> context) {\n-\t\tthis.messageTemplate = messageTemplate;\n-\t\tthis.context = context;\n-\t}\n-\t\n-\t@Override\n-\t@JsonIgnore\n-\t@ToString.Include\n-\tpublic String getMessage() {\n-\t\tString message = new StringSubstitutor(context).replace(messageTemplate);\n-\t\treturn message != null ? message : \"Unable to provide error message. No message template was provided by error.\";\n-\t}\n-\n-\t@Override\n-\tpublic PlainError asPlain() {\n-\t\treturn new PlainError(getId(), getCode(), getMessage(), getContext());\n-\t}\n-\n-\t@Override\n-\t@JsonIgnore // The code is the type information, so we do not need to serialize it\n-\tpublic String getCode() {\n-\t\treturn this.getClass().getAnnotation(CPSType.class).id();\n-\t}\n-\n-\tpublic static abstract class NoContextError extends ConqueryError {\n-\n-\t\tpublic NoContextError(String message) {\n-\t\t\tsuper(message, Collections.emptyMap());\n-\t\t}\n-\t}\n-\n-\tpublic static abstract class ContextError extends ConqueryError {\n-\n-\t\tpublic ContextError(String messageTemplate) {\n-\t\t\tsuper(messageTemplate, new Flat3Map<>());\n-\t\t}\n-\t}\n-\n-\t@Slf4j\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_UNKNOWN_ERROR\")\n-\tpublic static class UnknownError extends NoContextError {\n-\n-\t\t/**\n-\t\t * Constructor for deserialization.\n-\t\t */\n-\t\t@JsonCreator\n-\t\tprivate UnknownError() {\n-\t\t\tsuper(\"An unknown error occured\");\n-\t\t}\n-\n-\t\tpublic UnknownError(Throwable e) {\n-\t\t\tthis();\n-\t\t\tlog.error(\"Encountered unknown error [{}]\", this.getId(), e);\n-\t\t}\n-\t}\n-\n-\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION\")\n-\tpublic static class ExecutionCreationErrorUnspecified extends NoContextError {\n-\n-\t\tpublic ExecutionCreationErrorUnspecified() {\n-\t\t\tsuper(\"Failure during execution creation.\");\n-\t\t}\n-\t}\n-\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE\")\n-\tpublic static class ExecutionCreationResolveError extends ContextError {\n-\n-\t\tprivate final static String FAILED_ELEMENT = \"ELEMENT\";\n-\t\tprivate final static String FAILED_ELEMENT_CLASS = \"ELEMENT_CLASS\";\n-\t\tprivate final static String TEMPLATE = \"Could not find an ${\" + FAILED_ELEMENT_CLASS + \"} element called '${\" + FAILED_ELEMENT + \"}'\";\n-\n-\t\t/**\n-\t\t * Constructor for deserialization.\n-\t\t */\n-\t\t@JsonCreator\n-\t\tprivate ExecutionCreationResolveError() {\n-\t\t\tsuper(TEMPLATE);\n-\t\t}\n-\n-\t\tpublic ExecutionCreationResolveError(IId<?> unresolvableElementId) {\n-\t\t\tthis();\n-\t\t\tgetContext().put(FAILED_ELEMENT, unresolvableElementId.toString());\n-\t\t\tgetContext().put(FAILED_ELEMENT_CLASS, unresolvableElementId.getClass().getSimpleName());\n-\t\t}\n-\t}\n-\n-\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_RESOLVE_EXTERNAL\")\n-\tpublic static class ExternalResolveError extends ContextError {\n-\n-\t\tprivate final static String FORMAT_ROW_LENGTH = \"formatRowLength\";\n-\t\tprivate final static String DATA_ROW_LENGTH = \"dataRowLength\";\n-\t\tprivate final static String TEMPLATE = \"There are ${\" + FORMAT_ROW_LENGTH + \"} columns in the format but ${\" + DATA_ROW_LENGTH + \"} in at least one row\";\n-\n-\t\t/**\n-\t\t * Constructor for deserialization.\n-\t\t */\n-\t\t@JsonCreator\n-\t\tprivate ExternalResolveError() {\n-\t\t\tsuper(TEMPLATE);\n-\t\t}\n-\n-\t\tpublic ExternalResolveError(int formatRowLength, int dataRowLength) {\n-\t\t\tthis();\n-\t\t\tgetContext().put(FORMAT_ROW_LENGTH, Integer.toString(formatRowLength));\n-\t\t\tgetContext().put(DATA_ROW_LENGTH, Integer.toString(dataRowLength));\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Unspecified error during {@link QueryPlan}-creation.\n-\t */\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_CREATION_PLAN\")\n-\tpublic static class ExecutionCreationPlanError extends NoContextError {\n-\n-\t\tpublic ExecutionCreationPlanError() {\n-\t\t\tsuper(\"Unable to generate query plan.\");\n-\t\t}\n-\t}\n-\t\n-\t/**\n-\t * Unspecified execution processing error.\n-\t */\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_PROCESSING\")\n-\tpublic static class ExecutionProcessingError extends NoContextError {\n-\n-\t\tpublic ExecutionProcessingError() {\n-\t\t\tsuper(\"An unexpected error occured during the execution.\");\n-\t\t}\n-\t}\n-\t\n-\t/**\n-\t * Timeout during processing.\n-\t */\n-\t@CPSType(base = ConqueryError.class, id = \"CQ_EXECUTION_PROCESSING_TIMEOUT\")\n-\tpublic static class ExecutionProcessingTimeoutError extends NoContextError {\n-\n-\t\tpublic ExecutionProcessingTimeoutError() {\n-\t\t\tsuper(\"The execution took too long to finish.\");\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYxNTI1OQ==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r465615259", "bodyText": "Move to ConqueryError?", "author": "awildturtok", "createdAt": "2020-08-05T10:03:06Z", "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java", "diffHunk": "@@ -44,27 +43,38 @@ public void react(Worker context) throws Exception {\n \t\ttry {\n \t\t\tplans = execution.createQueryPlans(new QueryPlanContext(context)).entrySet();\t\t\n \t\t} catch (Exception e) {\n-\t\t\tlog.error(\"Failed to create query plans for \" + execution.getId(), e );\n-\t\t\t// If one of the plans can not be created (maybe due to a Id that references a non existing concept) fail the whole job.\n-\t\t\tsendFailureToMaster(execution.getInitializedShardResult(null), execution, context, e);\n+\t\t\tConqueryError err = asConqueryError(e);\n+\t\t\tlog.warn(\"Failed to create query plans for {}.\", execution.getId(), err );\n+\t\t\tShardResult result = execution.getInitializedShardResult(null);\n+\t\t\tsendFailureToMaster(result, execution, context, err);\n \t\t\treturn;\n \t\t}\n+\t\t\n \t\t// Execute all plans.\n \t\tfor(Entry<ManagedExecutionId, QueryPlan> entry : plans) {\n \t\t\tShardResult result = execution.getInitializedShardResult(entry);\n \t\t\ttry {\n \t\t\t\tcontext.getQueryExecutor().execute(result, new QueryExecutionContext(context.getStorage()), entry);\n \t\t\t\tresult.getFuture().addListener(()->result.send(context), MoreExecutors.directExecutor());\n \t\t\t} catch(Exception e) {\n-\t\t\t\tlog.error(\"Error while executing {} (with subquery: {})\", execution.getId(), entry.getKey(), e );\n-\t\t\t\tsendFailureToMaster(result, execution, context, e);\n+\t\t\t\tConqueryError err = asConqueryError(e);\n+\t\t\t\tlog.warn(\"Error while executing {} (with subquery: {})\", execution.getId(), entry.getKey(), err );\n+\t\t\t\tsendFailureToMaster(result, execution, context,  asConqueryError(err));\n+\t\t\t\treturn;\n \t\t\t}\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * Wraps the {@link Throwable} into an {@link ConqueryError}.\n+\t */\n+\tprivate static ConqueryError asConqueryError(Throwable t) {", "originalCommit": "c5e629eaf67e3c15e13239610a45b484ad823b87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "953166cc7ade6dd47b8f37b33aaca7019a2480c4", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java b/backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java\nindex 1fec721c1..fbbca974f 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java\n\n@@ -43,13 +46,13 @@ public class ExecuteQuery extends WorkerMessage {\n \t\ttry {\n \t\t\tplans = execution.createQueryPlans(new QueryPlanContext(context)).entrySet();\t\t\n \t\t} catch (Exception e) {\n-\t\t\tConqueryError err = asConqueryError(e);\n-\t\t\tlog.warn(\"Failed to create query plans for {}.\", execution.getId(), err );\n+\t\t\tlog.error(\"Failed to create query plans for \" + execution.getId(), e );\n+\t\t\t// If one of the plans can not be created (maybe due to a Id that references a non existing concept) fail the whole job.\n \t\t\tShardResult result = execution.getInitializedShardResult(null);\n-\t\t\tsendFailureToMaster(result, execution, context, err);\n+\t\t\tresult.setError(QueryError.builder().code(CQErrorCodes.QUERY_CREATION_PLAN.name()).message(\"Failed to create query plan.\").build());\n+\t\t\tsendFailureToMaster(result, execution, context, e);\n \t\t\treturn;\n \t\t}\n-\t\t\n \t\t// Execute all plans.\n \t\tfor(Entry<ManagedExecutionId, QueryPlan> entry : plans) {\n \t\t\tShardResult result = execution.getInitializedShardResult(entry);\n"}}, {"oid": "953166cc7ade6dd47b8f37b33aaca7019a2480c4", "url": "https://github.com/bakdata/conquery/commit/953166cc7ade6dd47b8f37b33aaca7019a2480c4", "message": "introduces new error type", "committedDate": "2020-08-11T10:47:01Z", "type": "commit"}, {"oid": "b66034883d7e68d44c80efa2b7b18b43f3554d7c", "url": "https://github.com/bakdata/conquery/commit/b66034883d7e68d44c80efa2b7b18b43f3554d7c", "message": "adds propagation of known error and wrapping of unknown errors", "committedDate": "2020-08-11T10:47:02Z", "type": "commit"}, {"oid": "a37ad902ec690fbad85bcd75f5e9fd3122a8afc9", "url": "https://github.com/bakdata/conquery/commit/a37ad902ec690fbad85bcd75f5e9fd3122a8afc9", "message": "rename and repackage", "committedDate": "2020-08-11T10:47:02Z", "type": "commit"}, {"oid": "c0647bcbff70a816a9d54975a32796b7998d8dad", "url": "https://github.com/bakdata/conquery/commit/c0647bcbff70a816a9d54975a32796b7998d8dad", "message": "adds tests for serialization and conversion", "committedDate": "2020-08-11T10:47:03Z", "type": "commit"}, {"oid": "5951f96d3b7c7b0e19e10e45f7757fd63a56f551", "url": "https://github.com/bakdata/conquery/commit/5951f96d3b7c7b0e19e10e45f7757fd63a56f551", "message": "adds doku", "committedDate": "2020-08-11T10:47:03Z", "type": "commit"}, {"oid": "ad16b291530e0466c087708b7fd231f0aac91ddb", "url": "https://github.com/bakdata/conquery/commit/ad16b291530e0466c087708b7fd231f0aac91ddb", "message": "reorders errors", "committedDate": "2020-08-11T10:47:04Z", "type": "commit"}, {"oid": "04c01560d2a4a59680a3080656d999f42c809db1", "url": "https://github.com/bakdata/conquery/commit/04c01560d2a4a59680a3080656d999f42c809db1", "message": "adds general execution processing error", "committedDate": "2020-08-11T10:47:05Z", "type": "commit"}, {"oid": "23ebf856481e1f0cf607c95a1c62186d1b79d49b", "url": "https://github.com/bakdata/conquery/commit/23ebf856481e1f0cf607c95a1c62186d1b79d49b", "message": "automatic update to docs", "committedDate": "2020-08-11T10:47:05Z", "type": "commit"}, {"oid": "a2c98ced5b4af37849af652d283268218800500b", "url": "https://github.com/bakdata/conquery/commit/a2c98ced5b4af37849af652d283268218800500b", "message": "Update backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n\nCo-authored-by: awildturtok <1553491+awildturtok@users.noreply.github.com>", "committedDate": "2020-08-11T10:47:05Z", "type": "commit"}, {"oid": "3b8bc4e3b22072ddd38c2777e6a3cbf124b918fd", "url": "https://github.com/bakdata/conquery/commit/3b8bc4e3b22072ddd38c2777e6a3cbf124b918fd", "message": "Update backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\n\nCo-authored-by: awildturtok <1553491+awildturtok@users.noreply.github.com>", "committedDate": "2020-08-11T10:47:07Z", "type": "commit"}, {"oid": "769abef8519bbe2a05ea6df170289e10f7db10d5", "url": "https://github.com/bakdata/conquery/commit/769abef8519bbe2a05ea6df170289e10f7db10d5", "message": "reenabled all programmatic integration tests", "committedDate": "2020-08-11T10:47:07Z", "type": "commit"}, {"oid": "e169ced82ceec177feec33d29f9c3007e2b79622", "url": "https://github.com/bakdata/conquery/commit/e169ced82ceec177feec33d29f9c3007e2b79622", "message": "throw ConqueryError directly", "committedDate": "2020-08-11T10:47:08Z", "type": "commit"}, {"oid": "5c27d6eb9dbcb1d407e0276b8f00fa440f160e1c", "url": "https://github.com/bakdata/conquery/commit/5c27d6eb9dbcb1d407e0276b8f00fa440f160e1c", "message": "corrects error message", "committedDate": "2020-08-11T10:47:08Z", "type": "commit"}, {"oid": "3f4ef7f2435d5a1e26c822725ace840e27e8b6f1", "url": "https://github.com/bakdata/conquery/commit/3f4ef7f2435d5a1e26c822725ace840e27e8b6f1", "message": "simplify error comparsion", "committedDate": "2020-08-11T10:47:08Z", "type": "commit"}, {"oid": "4cf21dc563e16b218d1b38988688ea21601f153d", "url": "https://github.com/bakdata/conquery/commit/4cf21dc563e16b218d1b38988688ea21601f153d", "message": "remove assert", "committedDate": "2020-08-11T10:47:09Z", "type": "commit"}, {"oid": "46dfe4c746e51ba7646164261ddad1e831f61f1b", "url": "https://github.com/bakdata/conquery/commit/46dfe4c746e51ba7646164261ddad1e831f61f1b", "message": "remove redundant logging", "committedDate": "2020-08-11T10:47:09Z", "type": "commit"}, {"oid": "a521d46fd969f67fd262c0bc014a20c6e5119756", "url": "https://github.com/bakdata/conquery/commit/a521d46fd969f67fd262c0bc014a20c6e5119756", "message": "return default error message, when no message template was found", "committedDate": "2020-08-11T10:47:10Z", "type": "commit"}, {"oid": "04222b2977b5f9c453f653cb159cdba11fa51c7c", "url": "https://github.com/bakdata/conquery/commit/04222b2977b5f9c453f653cb159cdba11fa51c7c", "message": "slim ConqueryError catching", "committedDate": "2020-08-11T10:47:10Z", "type": "commit"}, {"oid": "072a7e54a846af499a1bab714c973f229a95c9f6", "url": "https://github.com/bakdata/conquery/commit/072a7e54a846af499a1bab714c973f229a95c9f6", "message": "remove unnecessary log", "committedDate": "2020-08-11T10:47:10Z", "type": "commit"}, {"oid": "218ca9a0378fa48062db8d1cc07be2cc07d3f7ed", "url": "https://github.com/bakdata/conquery/commit/218ca9a0378fa48062db8d1cc07be2cc07d3f7ed", "message": "Update backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n\nCo-authored-by: awildturtok <1553491+awildturtok@users.noreply.github.com>", "committedDate": "2020-08-11T10:47:11Z", "type": "commit"}, {"oid": "f7c1401ad1977f9dcf73e650de4b4c67586bc910", "url": "https://github.com/bakdata/conquery/commit/f7c1401ad1977f9dcf73e650de4b4c67586bc910", "message": "reorder error handling", "committedDate": "2020-08-11T10:47:11Z", "type": "commit"}, {"oid": "863ac695a9ca8277d621f806abd95c9c69701171", "url": "https://github.com/bakdata/conquery/commit/863ac695a9ca8277d621f806abd95c9c69701171", "message": "adds comment regarding dependency warning", "committedDate": "2020-08-11T10:47:11Z", "type": "commit"}, {"oid": "151b6d452af207968151be32d70177509a10a56d", "url": "https://github.com/bakdata/conquery/commit/151b6d452af207968151be32d70177509a10a56d", "message": "Update backend/src/main/java/com/bakdata/conquery/models/error/ConqueryError.java\n\nCo-authored-by: awildturtok <1553491+awildturtok@users.noreply.github.com>", "committedDate": "2020-08-11T10:47:12Z", "type": "commit"}, {"oid": "261d04ad9fbafbbf5ec37e0cd0865e4ee2241e08", "url": "https://github.com/bakdata/conquery/commit/261d04ad9fbafbbf5ec37e0cd0865e4ee2241e08", "message": "Static Message when no error message template was provided", "committedDate": "2020-08-11T10:47:12Z", "type": "commit"}, {"oid": "edf68e7189dca5a5d307897c20ba741bb1a12cac", "url": "https://github.com/bakdata/conquery/commit/edf68e7189dca5a5d307897c20ba741bb1a12cac", "message": "makes error code getter final", "committedDate": "2020-08-11T10:47:12Z", "type": "commit"}, {"oid": "b1f697f7bdf34341a0ee2040d643f8630db3eeb8", "url": "https://github.com/bakdata/conquery/commit/b1f697f7bdf34341a0ee2040d643f8630db3eeb8", "message": "move method to  convert Throwable to ConqueryError", "committedDate": "2020-08-11T10:47:13Z", "type": "commit"}, {"oid": "b1f697f7bdf34341a0ee2040d643f8630db3eeb8", "url": "https://github.com/bakdata/conquery/commit/b1f697f7bdf34341a0ee2040d643f8630db3eeb8", "message": "move method to  convert Throwable to ConqueryError", "committedDate": "2020-08-11T10:47:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAyNTM1Mw==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r482025353", "bodyText": "w\u00fcrde die Finish hier nicht das result schicken?", "author": "awildturtok", "createdAt": "2020-09-02T12:22:14Z", "path": "backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java", "diffHunk": "@@ -44,27 +45,31 @@ public void react(Worker context) throws Exception {\n \t\ttry {\n \t\t\tplans = execution.createQueryPlans(new QueryPlanContext(context)).entrySet();\t\t\n \t\t} catch (Exception e) {\n-\t\t\tlog.error(\"Failed to create query plans for \" + execution.getId(), e );\n-\t\t\t// If one of the plans can not be created (maybe due to a Id that references a non existing concept) fail the whole job.\n-\t\t\tsendFailureToMaster(execution.getInitializedShardResult(null), execution, context, e);\n+\t\t\tConqueryError err = asConqueryError(e);\n+\t\t\tlog.warn(\"Failed to create query plans for {}.\", execution.getId(), err );\n+\t\t\tShardResult result = execution.getInitializedShardResult(null);\n+\t\t\tsendFailureToMaster(result, execution, context, err);\n \t\t\treturn;\n \t\t}\n+\t\t\n \t\t// Execute all plans.\n \t\tfor(Entry<ManagedExecutionId, QueryPlan> entry : plans) {\n \t\t\tShardResult result = execution.getInitializedShardResult(entry);\n \t\t\ttry {\n \t\t\t\tcontext.getQueryExecutor().execute(result, new QueryExecutionContext(context.getStorage()), entry);\n \t\t\t\tresult.getFuture().addListener(()->result.send(context), MoreExecutors.directExecutor());\n \t\t\t} catch(Exception e) {\n-\t\t\t\tlog.error(\"Error while executing {} (with subquery: {})\", execution.getId(), entry.getKey(), e );\n-\t\t\t\tsendFailureToMaster(result, execution, context, e);\n+\t\t\t\tConqueryError err = asConqueryError(e);\n+\t\t\t\tlog.warn(\"Error while executing {} (with subquery: {})\", execution.getId(), entry.getKey(), err );\n+\t\t\t\tsendFailureToMaster(result, execution, context,  asConqueryError(err));\n+\t\t\t\treturn;\n \t\t\t}\n \t\t}\n \t}\n \n-\tprivate static void sendFailureToMaster(ShardResult result, ManagedExecution<?> execution, Worker context, Exception e) {\n-\t\tresult.setFinishTime(LocalDateTime.now());\n-\t\tresult.setResults(Collections.singletonList(EntityResult.failed(-1, e)));\n+\tprivate static void sendFailureToMaster(ShardResult result, ManagedExecution<?> execution, Worker context, ConqueryError error) {", "originalCommit": "b1f697f7bdf34341a0ee2040d643f8630db3eeb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAyNTUxOQ==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r482025519", "bodyText": "bzw, warum failst du die execution nicht stattdessen?", "author": "awildturtok", "createdAt": "2020-09-02T12:22:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAyNTM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkzNzk0Ng==", "url": "https://github.com/bakdata/conquery/pull/1305#discussion_r482937946", "bodyText": "Der State der Execution existiert nur auf dem Master (@JsonIgnore), ihn hier zu setzen \u00e4ndert nichts.\nIch habe den execution Parameter entfernt.", "author": "thoniTUB", "createdAt": "2020-09-03T12:26:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAyNTM1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4a926de210e9fb6d2f0dab1cf5cda7896b068006", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java b/backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java\nindex f797449d4..489b975ce 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/messages/namespaces/specific/ExecuteQuery.java\n\n@@ -48,7 +48,7 @@ public class ExecuteQuery extends WorkerMessage {\n \t\t\tConqueryError err = asConqueryError(e);\n \t\t\tlog.warn(\"Failed to create query plans for {}.\", execution.getId(), err );\n \t\t\tShardResult result = execution.getInitializedShardResult(null);\n-\t\t\tsendFailureToMaster(result, execution, context, err);\n+\t\t\tsendFailureToMaster(result, context, err);\n \t\t\treturn;\n \t\t}\n \t\t\n"}}, {"oid": "8dea66e66f480806d84549f920b6cdc994778ba7", "url": "https://github.com/bakdata/conquery/commit/8dea66e66f480806d84549f920b6cdc994778ba7", "message": "Merge branch 'develop' into feature/error-info-in-status", "committedDate": "2020-09-02T12:31:11Z", "type": "commit"}, {"oid": "4a926de210e9fb6d2f0dab1cf5cda7896b068006", "url": "https://github.com/bakdata/conquery/commit/4a926de210e9fb6d2f0dab1cf5cda7896b068006", "message": "remove used parameter from function", "committedDate": "2020-09-03T12:24:29Z", "type": "commit"}, {"oid": "d79c01fd2e1dfd6c9c6e5adddcee03f46fd7acec", "url": "https://github.com/bakdata/conquery/commit/d79c01fd2e1dfd6c9c6e5adddcee03f46fd7acec", "message": "Merge branch 'develop' into feature/error-info-in-status", "committedDate": "2020-09-03T12:26:38Z", "type": "commit"}]}