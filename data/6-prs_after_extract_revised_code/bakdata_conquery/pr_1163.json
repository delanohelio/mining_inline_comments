{"pr_number": 1163, "pr_title": "full export queries", "pr_createdAt": "2020-04-16T12:35:24Z", "pr_url": "https://github.com/bakdata/conquery/pull/1163", "timeline": [{"oid": "3ee04fdf83325254fb83267af4d1d1ad3840229f", "url": "https://github.com/bakdata/conquery/commit/3ee04fdf83325254fb83267af4d1d1ad3840229f", "message": "refactoring of SpecialDateUnion", "committedDate": "2020-03-29T22:04:52Z", "type": "commit"}, {"oid": "d702cc2a9be63ad2ea860f17711a2afb71ddd3b2", "url": "https://github.com/bakdata/conquery/commit/d702cc2a9be63ad2ea860f17711a2afb71ddd3b2", "message": "Merge remote-tracking branch 'origin/feature/secondary_ids' into feature/long_format_queries", "committedDate": "2020-03-30T02:33:20Z", "type": "commit"}, {"oid": "cb76f5d328a9e43e1a53058475bbe63ffbdcb3d1", "url": "https://github.com/bakdata/conquery/commit/cb76f5d328a9e43e1a53058475bbe63ffbdcb3d1", "message": "long format full table export with filter support", "committedDate": "2020-04-06T00:17:01Z", "type": "commit"}, {"oid": "60987c297de1abbfaaa742930319f811abb78d0a", "url": "https://github.com/bakdata/conquery/commit/60987c297de1abbfaaa742930319f811abb78d0a", "message": "added a new pretty print representation for DateRanges", "committedDate": "2020-04-16T12:28:45Z", "type": "commit"}, {"oid": "60f8c22d57ac56ff730fc2013760760b517630f6", "url": "https://github.com/bakdata/conquery/commit/60f8c22d57ac56ff730fc2013760760b517630f6", "message": "Merge branch 'develop' into feature/long_format_queries", "committedDate": "2020-04-16T12:35:44Z", "type": "commit"}, {"oid": "04dccd59877b2d47d3a726b0e08cf5f7901ff7f6", "url": "https://github.com/bakdata/conquery/commit/04dccd59877b2d47d3a726b0e08cf5f7901ff7f6", "message": "Merge 60f8c22d57ac56ff730fc2013760760b517630f6 into 0a4b428deadbdb68d90328023a80674a45b42583", "committedDate": "2020-04-16T12:35:45Z", "type": "commit"}, {"oid": "0498a4fae3e59a3876befdb140e9b1c3ad5b85b2", "url": "https://github.com/bakdata/conquery/commit/0498a4fae3e59a3876befdb140e9b1c3ad5b85b2", "message": "automatic update to docs", "committedDate": "2020-04-16T12:37:29Z", "type": "commit"}, {"oid": "e0ce3a87c54488cf35c35950c908b022d6358bda", "url": "https://github.com/bakdata/conquery/commit/e0ce3a87c54488cf35c35950c908b022d6358bda", "message": "some commenting", "committedDate": "2020-04-16T12:50:58Z", "type": "commit"}, {"oid": "8b36a36153d74e1135caa97a68b2d2ae942c10bd", "url": "https://github.com/bakdata/conquery/commit/8b36a36153d74e1135caa97a68b2d2ae942c10bd", "message": "Merge e0ce3a87c54488cf35c35950c908b022d6358bda into 0a4b428deadbdb68d90328023a80674a45b42583", "committedDate": "2020-04-16T12:51:56Z", "type": "commit"}, {"oid": "b0ef9c361e4e62f2e95b260421265c27829e119a", "url": "https://github.com/bakdata/conquery/commit/b0ef9c361e4e62f2e95b260421265c27829e119a", "message": "automatic update to docs", "committedDate": "2020-04-16T12:53:45Z", "type": "commit"}, {"oid": "656d535653f627805bc6df94d5e2947a36d87396", "url": "https://github.com/bakdata/conquery/commit/656d535653f627805bc6df94d5e2947a36d87396", "message": " Please enter the simpler export solution", "committedDate": "2020-04-30T12:59:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAyMDE4NQ==", "url": "https://github.com/bakdata/conquery/pull/1163#discussion_r418020185", "bodyText": "Ich wei\u00df nicht ob das frontend das macht aber es sollte immer ein default validity date geben.", "author": "awildturtok", "createdAt": "2020-04-30T13:44:04Z", "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/Connector.java", "diffHunk": "@@ -154,6 +154,9 @@ public boolean validateSelectableDates(ConstraintValidatorContext context) {\n \t}\n \n \tpublic Column getValidityDateColumn(String name) {\n+\t\tif(name == null ) {", "originalCommit": "656d535653f627805bc6df94d5e2947a36d87396", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0823fc02fdde7e1c7865532120e44da9dcdf12ec", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/concepts/Connector.java b/backend/src/main/java/com/bakdata/conquery/models/concepts/Connector.java\nindex 03e1f2df3..4030afca9 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/concepts/Connector.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/concepts/Connector.java\n\n@@ -154,9 +154,6 @@ public abstract class Connector extends Labeled<ConnectorId> implements Serializ\n \t}\n \n \tpublic Column getValidityDateColumn(String name) {\n-\t\tif(name == null ) {\n-\t\t\treturn validityDates.get(0).getColumn();\n-\t\t}\n \t\tfor(ValidityDate vDate:validityDates) {\n \t\t\tif(vDate.getName().equals(name))\n \t\t\t\treturn vDate.getColumn();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAyMTkwNQ==", "url": "https://github.com/bakdata/conquery/pull/1163#discussion_r418021905", "bodyText": "warum machst du das hier und nicht im resolve schritt?", "author": "awildturtok", "createdAt": "2020-04-30T13:46:21Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/TableExportQuery.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package com.bakdata.conquery.models.query.concept;\n+\n+import java.time.LocalDate;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+import com.bakdata.conquery.apiv1.QueryDescription;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.common.Range;\n+import com.bakdata.conquery.models.common.daterange.CDateRange;\n+import com.bakdata.conquery.models.concepts.Concept;\n+import com.bakdata.conquery.models.externalservice.ResultType;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ManagedExecutionId;\n+import com.bakdata.conquery.models.query.IQuery;\n+import com.bakdata.conquery.models.query.QueryPlanContext;\n+import com.bakdata.conquery.models.query.QueryResolveContext;\n+import com.bakdata.conquery.models.query.Visitable;\n+import com.bakdata.conquery.models.query.concept.filter.CQUnfilteredTable;\n+import com.bakdata.conquery.models.query.queryplan.TableExportQueryPlan;\n+import com.bakdata.conquery.models.query.queryplan.TableExportQueryPlan.TableExportConnector;\n+import com.bakdata.conquery.models.query.resultinfo.ResultInfoCollector;\n+import com.bakdata.conquery.models.query.resultinfo.SimpleResultInfo;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+\n+/**\n+ * A TABLE_EXPORT creates a full export of the given tables. It ignores selects completely.\n+ */\n+@Slf4j\n+@Getter @Setter\n+@CPSType(id = \"TABLE_EXPORT\", base = QueryDescription.class)\n+@RequiredArgsConstructor(onConstructor = @__({@JsonCreator}))\n+public class TableExportQuery extends IQuery {\n+\n+\t@Valid\n+\t@NotNull @NonNull\n+\tprotected IQuery query;\n+\t@NotNull\n+\tprivate Range<LocalDate> dateRange = Range.all();\n+\t@NotEmpty @Valid\n+\tprivate List<CQUnfilteredTable> tables;\n+\n+\t@Override\n+\tpublic TableExportQueryPlan createQueryPlan(QueryPlanContext context) {\n+\t\tfor(CQUnfilteredTable table : tables) {\n+\t\t\ttry {\n+\t\t\t\tConcept<?> concept=context.getCentralRegistry().resolve(table.getId().getConcept());", "originalCommit": "656d535653f627805bc6df94d5e2947a36d87396", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "034e76a84890aafada921398cd62e0553064610c", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/query/concept/TableExportQuery.java b/backend/src/main/java/com/bakdata/conquery/models/query/concept/TableExportQuery.java\nindex e6100e10c..3b6609cdd 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/query/concept/TableExportQuery.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/query/concept/TableExportQuery.java\n\n@@ -18,7 +18,11 @@ import com.bakdata.conquery.io.cps.CPSType;\n import com.bakdata.conquery.models.common.Range;\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.concepts.Concept;\n+import com.bakdata.conquery.models.concepts.Connector;\n+import com.bakdata.conquery.models.datasets.Column;\n import com.bakdata.conquery.models.externalservice.ResultType;\n+import com.bakdata.conquery.models.identifiable.CentralRegistry;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ColumnId;\n import com.bakdata.conquery.models.identifiable.ids.specific.ManagedExecutionId;\n import com.bakdata.conquery.models.query.IQuery;\n import com.bakdata.conquery.models.query.QueryPlanContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAyNzkwNA==", "url": "https://github.com/bakdata/conquery/pull/1163#discussion_r418027904", "bodyText": "Da w\u00fcrde ich mir Doku w\u00fcnschen. Mir ist nicht klar wof\u00fcr genau das gut ist", "author": "awildturtok", "createdAt": "2020-04-30T13:54:22Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/specific/TableRequiringAggregatorNode.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.bakdata.conquery.models.query.queryplan.specific;\n+\n+import java.util.Set;\n+\n+import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n+import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+\n+public class TableRequiringAggregatorNode<T> extends AggregatorNode<T> {", "originalCommit": "656d535653f627805bc6df94d5e2947a36d87396", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0823fc02fdde7e1c7865532120e44da9dcdf12ec", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/query/queryplan/specific/TableRequiringAggregatorNode.java b/backend/src/main/java/com/bakdata/conquery/models/query/queryplan/specific/TableRequiringAggregatorNode.java\nindex 506408e6b..1f32fe094 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/query/queryplan/specific/TableRequiringAggregatorNode.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/query/queryplan/specific/TableRequiringAggregatorNode.java\n\n@@ -6,6 +6,10 @@ import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n \n+/**\n+ * An aggregator node that also requires a specific table from the query execution. This is necessary for \n+ * the SpecialDateUnionAggregator. \n+ */\n public class TableRequiringAggregatorNode<T> extends AggregatorNode<T> {\n \n \tprivate TableId requiredTable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAyODQwMw==", "url": "https://github.com/bakdata/conquery/pull/1163#discussion_r418028403", "bodyText": "hier dann auch null?", "author": "awildturtok", "createdAt": "2020-04-30T13:55:04Z", "path": "backend/src/main/java/com/bakdata/conquery/models/types/specific/DateRangeTypePacked.java", "diffHunk": "@@ -20,16 +20,24 @@ public DateRangeTypePacked() {\n \t}\n \t\n \t@Override\n-\tpublic Object createPrintValue(Integer value) {\n-\t\tif (value == null) {\n-\t\t\treturn \"\";\n+\tpublic CDateRange createScriptValue(Integer value) {\n+\t\tif(value == null) {\n+\t\t\treturn null;\n \t\t}\n-\n \t\treturn CDateRange.of(\n \t\t\tPackedUnsigned1616.getLeft(value)+minValue,\n \t\t\tPackedUnsigned1616.getRight(value)+minValue\n \t\t);\n \t}\n+\t\n+\t@Override\n+\tpublic Object createPrintValue(Integer value) {\n+\t\tif (value == null) {\n+\t\t\treturn \"\";", "originalCommit": "656d535653f627805bc6df94d5e2947a36d87396", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3NzUwOQ==", "url": "https://github.com/bakdata/conquery/pull/1163#discussion_r418077509", "bodyText": "createPrintValue sollte immer non-null zur\u00fcckgeben", "author": "manuel-hegner", "createdAt": "2020-04-30T15:01:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAyODQwMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAyOTg1Mg==", "url": "https://github.com/bakdata/conquery/pull/1163#discussion_r418029852", "bodyText": "Kleiner  makel aber ich finde den Namen hier etwas tr\u00fcgerisch weil es ja kein echter Connector ist", "author": "awildturtok", "createdAt": "2020-04-30T13:57:03Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/TableExportQueryPlan.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package com.bakdata.conquery.models.query.queryplan;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.bakdata.conquery.models.common.daterange.CDateRange;\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.entity.Entity;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import com.bakdata.conquery.models.query.results.EntityResult;\n+import com.bakdata.conquery.models.types.CType;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * The QueryPlan creates a full dump of the given table within a certain\n+ * date range.\n+ */\n+@RequiredArgsConstructor\n+public class TableExportQueryPlan implements QueryPlan {\n+\n+\tprivate final QueryPlan subPlan;\n+\tprivate final CDateRange dateRange;\n+\tprivate final List<TableExportConnector> tables;\n+\tprivate final int totalColumns;\n+\t\n+\t@Override\n+\tpublic QueryPlan clone(CloneContext ctx) {\n+\t\treturn new TableExportQueryPlan(subPlan.clone(ctx), dateRange, tables, totalColumns);\n+\t}\n+\n+\t@Override\n+\tpublic boolean isOfInterest(Entity entity) {\n+\t\treturn subPlan.isOfInterest(entity);\n+\t}\n+\n+\t@Override\n+\tpublic EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n+\t\tEntityResult result = subPlan.execute(ctx, entity);\n+\t\t\n+\t\tif(!result.isContained()) {\n+\t\t\treturn result;\n+\t\t}\n+\t\t\n+\t\tif (tables.isEmpty()) {\n+\t\t\treturn EntityResult.notContained();\n+\t\t}\n+\n+\t\t\n+\t\tList<Object[]> results = new ArrayList<>();\n+\t\tfor(TableExportConnector tec : tables) {\n+\t\t\tfor(Bucket bucket : entity.getBucket(tec.getTable().getId())) {\n+\t\t\t\tint localEntity = bucket.toLocal(entity.getId());\n+\t\t\t\tif(bucket.containsLocalEntity(localEntity)) {\n+\t\t\t\t\tint start = bucket.getFirstEventOfLocal(localEntity);\n+\t\t\t\t\tint end = bucket.getLastEventOfLocal(localEntity);\n+\t\t\t\t\tfor(int event = start; event < end ; event++) {\n+\t\t\t\t\t\tif (bucket.eventIsContainedIn(event, tec.getValidityDateColumn(), dateRange)) {\n+\t\t\t\t\t\t\tObject[] entry = new Object[totalColumns];\n+\t\t\t\t\t\t\tfor(int col = 0; col < tec.getTable().getColumns().length; col++) {\n+\t\t\t\t\t\t\t\tCType type = tec.getTable().getColumns()[col].getTypeFor(bucket);\n+\t\n+\t\t\t\t\t\t\t\t// depending on context use pretty printing or script value\n+\t\t\t\t\t\t\t\tentry[col+tec.getColumnOffset()] = ctx.isPrettyPrint()\n+\t\t\t\t\t\t\t\t\t? type.createPrintValue(bucket.getRaw(event, col))\n+\t\t\t\t\t\t\t\t\t: type.createScriptValue(bucket.getRaw(event, col));\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tresults.add(entry);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\t//pivot the last column\n+\t\treturn EntityResult.multilineOf(\n+\t\t\tresult.asContained().getEntityId(),\n+\t\t\tresults\n+\t\t);\n+\t}\n+\t\n+\t@RequiredArgsConstructor\n+\t@Getter\n+\tpublic static class TableExportConnector {", "originalCommit": "656d535653f627805bc6df94d5e2947a36d87396", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "034e76a84890aafada921398cd62e0553064610c", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/query/queryplan/TableExportQueryPlan.java b/backend/src/main/java/com/bakdata/conquery/models/query/queryplan/TableExportQueryPlan.java\nindex e7b564805..28da6f147 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/query/queryplan/TableExportQueryPlan.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/query/queryplan/TableExportQueryPlan.java\n\n@@ -62,12 +62,14 @@ public class TableExportQueryPlan implements QueryPlan {\n \t\t\t\t\t\tif (bucket.eventIsContainedIn(event, tec.getValidityDateColumn(), dateRange)) {\n \t\t\t\t\t\t\tObject[] entry = new Object[totalColumns];\n \t\t\t\t\t\t\tfor(int col = 0; col < tec.getTable().getColumns().length; col++) {\n-\t\t\t\t\t\t\t\tCType type = tec.getTable().getColumns()[col].getTypeFor(bucket);\n-\t\n-\t\t\t\t\t\t\t\t// depending on context use pretty printing or script value\n-\t\t\t\t\t\t\t\tentry[col+tec.getColumnOffset()] = ctx.isPrettyPrint()\n-\t\t\t\t\t\t\t\t\t? type.createPrintValue(bucket.getRaw(event, col))\n-\t\t\t\t\t\t\t\t\t: type.createScriptValue(bucket.getRaw(event, col));\n+\t\t\t\t\t\t\t\tif(bucket.has(event, col)) {\n+\t\t\t\t\t\t\t\t\tCType type = tec.getTable().getColumns()[col].getTypeFor(bucket);\n+\t\t\n+\t\t\t\t\t\t\t\t\t// depending on context use pretty printing or script value\n+\t\t\t\t\t\t\t\t\tentry[col+tec.getColumnOffset()] = ctx.isPrettyPrint()\n+\t\t\t\t\t\t\t\t\t\t? type.createPrintValue(bucket.getRaw(event, col))\n+\t\t\t\t\t\t\t\t\t\t: type.createScriptValue(bucket.getRaw(event, col));\n+\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\tresults.add(entry);\n \t\t\t\t\t\t}\n"}}, {"oid": "b2348f6ebf90874c3fe75b4678b38046cdbd55bb", "url": "https://github.com/bakdata/conquery/commit/b2348f6ebf90874c3fe75b4678b38046cdbd55bb", "message": "added missing files", "committedDate": "2020-04-30T14:10:16Z", "type": "commit"}, {"oid": "cfddad2d710885b7db05f63a473bef49fe5d94ef", "url": "https://github.com/bakdata/conquery/commit/cfddad2d710885b7db05f63a473bef49fe5d94ef", "message": "Merge b2348f6ebf90874c3fe75b4678b38046cdbd55bb into d80368c1e0fa3665f5b044a84fd7406cf815c0d5", "committedDate": "2020-04-30T14:12:05Z", "type": "commit"}, {"oid": "8489bc7954c0001a99408f917c155d7c7f81fc5a", "url": "https://github.com/bakdata/conquery/commit/8489bc7954c0001a99408f917c155d7c7f81fc5a", "message": "automatic update to docs", "committedDate": "2020-04-30T14:14:04Z", "type": "commit"}, {"oid": "034e76a84890aafada921398cd62e0553064610c", "url": "https://github.com/bakdata/conquery/commit/034e76a84890aafada921398cd62e0553064610c", "message": "fixed error in export code / header generation", "committedDate": "2020-04-30T14:46:23Z", "type": "commit"}, {"oid": "4c26615f7dec936a5fbf1d777cfdfd87a187c2de", "url": "https://github.com/bakdata/conquery/commit/4c26615f7dec936a5fbf1d777cfdfd87a187c2de", "message": "Merge 034e76a84890aafada921398cd62e0553064610c into d80368c1e0fa3665f5b044a84fd7406cf815c0d5", "committedDate": "2020-04-30T14:47:34Z", "type": "commit"}, {"oid": "60b8a894b038e7d55f2ccde441aed6d6b823537f", "url": "https://github.com/bakdata/conquery/commit/60b8a894b038e7d55f2ccde441aed6d6b823537f", "message": "automatic update to docs", "committedDate": "2020-04-30T14:49:05Z", "type": "commit"}, {"oid": "0823fc02fdde7e1c7865532120e44da9dcdf12ec", "url": "https://github.com/bakdata/conquery/commit/0823fc02fdde7e1c7865532120e44da9dcdf12ec", "message": "small refactorings", "committedDate": "2020-04-30T14:55:37Z", "type": "commit"}, {"oid": "fe58428255ffac172c7ba21724971df0e4f2b3c0", "url": "https://github.com/bakdata/conquery/commit/fe58428255ffac172c7ba21724971df0e4f2b3c0", "message": "Merge 0823fc02fdde7e1c7865532120e44da9dcdf12ec into d80368c1e0fa3665f5b044a84fd7406cf815c0d5", "committedDate": "2020-04-30T14:56:18Z", "type": "commit"}, {"oid": "5c0a079498a3b138e24088572a1e486b7dfac6fd", "url": "https://github.com/bakdata/conquery/commit/5c0a079498a3b138e24088572a1e486b7dfac6fd", "message": "automatic update to docs", "committedDate": "2020-04-30T14:58:04Z", "type": "commit"}, {"oid": "3039fcf648ae0bab129050644b5d628a30dbbfb0", "url": "https://github.com/bakdata/conquery/commit/3039fcf648ae0bab129050644b5d628a30dbbfb0", "message": "Merge branch 'develop' into feature/long_format_queries", "committedDate": "2020-04-30T14:59:43Z", "type": "commit"}, {"oid": "fb9188b0c971a26243f3f005946654177ab2429b", "url": "https://github.com/bakdata/conquery/commit/fb9188b0c971a26243f3f005946654177ab2429b", "message": "Merge remote-tracking branch 'origin/develop' into feature/long_format_queries\n\n# Conflicts:\n#\tbackend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQConcept.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQExternalResolved.java\n#\tbackend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/SpecialDateUnion.java\n#\tdocs/REST API JSONs.md", "committedDate": "2020-09-30T12:11:12Z", "type": "commit"}, {"oid": "13143176c96cd01b9c28e1557b9a9997ffa38871", "url": "https://github.com/bakdata/conquery/commit/13143176c96cd01b9c28e1557b9a9997ffa38871", "message": "fix test having wrong column definitions", "committedDate": "2020-09-30T12:19:00Z", "type": "commit"}, {"oid": "4d88c88a5c529bc8ebb5f116b308742f0ac55f90", "url": "https://github.com/bakdata/conquery/commit/4d88c88a5c529bc8ebb5f116b308742f0ac55f90", "message": "automatic update to docs", "committedDate": "2020-09-30T12:21:10Z", "type": "commit"}, {"oid": "e3b3cf9c637f94671a432501f0caa5f338f69bab", "url": "https://github.com/bakdata/conquery/commit/e3b3cf9c637f94671a432501f0caa5f338f69bab", "message": "cleanup code for TableExportQueryPlan.java", "committedDate": "2020-09-30T12:27:16Z", "type": "commit"}, {"oid": "5750252d13f131f35e13788a26972dd37a996910", "url": "https://github.com/bakdata/conquery/commit/5750252d13f131f35e13788a26972dd37a996910", "message": "automatic update to docs", "committedDate": "2020-09-30T12:29:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ5NTg1MA==", "url": "https://github.com/bakdata/conquery/pull/1163#discussion_r497495850", "bodyText": "Ist der Umweg hier unbedingt gewollt, dass ein Connector \u00fcbergeben wird. W\u00fcrde es nicht auch schon eine TableId tun und man w\u00fcrde Concepte und Connectoren ganz raus lassen?", "author": "thoniTUB", "createdAt": "2020-09-30T13:09:48Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/TableExportQuery.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.bakdata.conquery.models.query.concept;\n+\n+import java.time.LocalDate;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.apiv1.QueryDescription;\n+import com.bakdata.conquery.io.cps.CPSType;\n+import com.bakdata.conquery.models.common.Range;\n+import com.bakdata.conquery.models.common.daterange.CDateRange;\n+import com.bakdata.conquery.models.concepts.Concept;\n+import com.bakdata.conquery.models.concepts.Connector;\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.externalservice.ResultType;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ColumnId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ManagedExecutionId;\n+import com.bakdata.conquery.models.query.IQuery;\n+import com.bakdata.conquery.models.query.QueryPlanContext;\n+import com.bakdata.conquery.models.query.QueryResolveContext;\n+import com.bakdata.conquery.models.query.Visitable;\n+import com.bakdata.conquery.models.query.concept.filter.CQUnfilteredTable;\n+import com.bakdata.conquery.models.query.queryplan.TableExportQueryPlan;\n+import com.bakdata.conquery.models.query.queryplan.TableExportQueryPlan.TableExportDescription;\n+import com.bakdata.conquery.models.query.resultinfo.ResultInfoCollector;\n+import com.bakdata.conquery.models.query.resultinfo.SimpleResultInfo;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.hibernate.validator.constraints.NotEmpty;\n+\n+\n+/**\n+ * A TABLE_EXPORT creates a full export of the given tables. It ignores selects completely.\n+ */\n+@Slf4j\n+@Getter @Setter\n+@CPSType(id = \"TABLE_EXPORT\", base = QueryDescription.class)\n+@RequiredArgsConstructor(onConstructor = @__({@JsonCreator}))\n+public class TableExportQuery extends IQuery {\n+\n+\t@Valid\n+\t@NotNull @NonNull\n+\tprotected IQuery query;\n+\t@NotNull\n+\tprivate Range<LocalDate> dateRange = Range.all();\n+\t@NotEmpty @Valid\n+\tprivate List<CQUnfilteredTable> tables;\n+\tprivate List<ColumnId> resolvedHeader;  \n+\n+\t@Override\n+\tpublic TableExportQueryPlan createQueryPlan(QueryPlanContext context) {\n+\t\tint totalColumns = 0;\n+\t\tList<TableExportDescription> resolvedConnectors = new ArrayList<>();\n+\t\tfor(CQUnfilteredTable table : tables) {\n+\t\t\ttry {\n+\t\t\t\tConcept<?> concept = context.getCentralRegistry().resolve(table.getId().getConcept());\n+\t\t\t\tConnector connector = concept.getConnectorByName(table.getId().getConnector());\n+\t\t\t\tresolvedConnectors.add(\n+\t\t\t\t\tnew TableExportDescription(\n+\t\t\t\t\t\tconnector.getTable(),\n+\t\t\t\t\t\tconnector.getValidityDateColumn(table.selectedValidityDate()),\n+\t\t\t\t\t\ttotalColumns\n+\t\t\t\t\t)", "originalCommit": "5750252d13f131f35e13788a26972dd37a996910", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3MzkwMA==", "url": "https://github.com/bakdata/conquery/pull/1163#discussion_r497573900", "bodyText": "Das geht nicht, weil das Frontend keine Tables kennt", "author": "awildturtok", "createdAt": "2020-09-30T14:51:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ5NTg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3NTM4OA==", "url": "https://github.com/bakdata/conquery/pull/1163#discussion_r497575388", "bodyText": "Noch nicht ;)", "author": "thoniTUB", "createdAt": "2020-09-30T14:53:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ5NTg1MA=="}], "type": "inlineReview", "revised_code": {"commit": "dc46141c93a8e64d85dccdbbf4b6ca0b999468ea", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/query/concept/TableExportQuery.java b/backend/src/main/java/com/bakdata/conquery/models/query/concept/TableExportQuery.java\nindex 6b2291e2a..bb1e07865 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/query/concept/TableExportQuery.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/query/concept/TableExportQuery.java\n\n@@ -42,48 +42,51 @@ import org.hibernate.validator.constraints.NotEmpty;\n  * A TABLE_EXPORT creates a full export of the given tables. It ignores selects completely.\n  */\n @Slf4j\n-@Getter @Setter\n+@Getter\n+@Setter\n @CPSType(id = \"TABLE_EXPORT\", base = QueryDescription.class)\n @RequiredArgsConstructor(onConstructor = @__({@JsonCreator}))\n public class TableExportQuery extends IQuery {\n \n \t@Valid\n-\t@NotNull @NonNull\n+\t@NotNull\n+\t@NonNull\n \tprotected IQuery query;\n \t@NotNull\n \tprivate Range<LocalDate> dateRange = Range.all();\n-\t@NotEmpty @Valid\n+\t@NotEmpty\n+\t@Valid\n \tprivate List<CQUnfilteredTable> tables;\n-\tprivate List<ColumnId> resolvedHeader;  \n+\tprivate List<ColumnId> resolvedHeader;\n \n \t@Override\n \tpublic TableExportQueryPlan createQueryPlan(QueryPlanContext context) {\n \t\tint totalColumns = 0;\n \t\tList<TableExportDescription> resolvedConnectors = new ArrayList<>();\n-\t\tfor(CQUnfilteredTable table : tables) {\n+\t\tfor (CQUnfilteredTable table : tables) {\n \t\t\ttry {\n \t\t\t\tConcept<?> concept = context.getCentralRegistry().resolve(table.getId().getConcept());\n \t\t\t\tConnector connector = concept.getConnectorByName(table.getId().getConnector());\n \t\t\t\tresolvedConnectors.add(\n-\t\t\t\t\tnew TableExportDescription(\n-\t\t\t\t\t\tconnector.getTable(),\n-\t\t\t\t\t\tconnector.getValidityDateColumn(table.selectedValidityDate()),\n-\t\t\t\t\t\ttotalColumns\n-\t\t\t\t\t)\n+\t\t\t\t\t\tnew TableExportDescription(\n+\t\t\t\t\t\t\t\tconnector.getTable(),\n+\t\t\t\t\t\t\t\tconnector.getValidityDateColumn(table.getDateColumn().getValue()),\n+\t\t\t\t\t\t\t\ttotalColumns\n+\t\t\t\t\t\t)\n \t\t\t\t);\n-\t\t\t\ttotalColumns+=connector.getTable().getColumns().length;\n+\t\t\t\ttotalColumns += connector.getTable().getColumns().length;\n \t\t\t}\n-\t\t\tcatch (NoSuchElementException exc){\n-\t\t\t\tlog.warn(\"Unable to resolve connector `{}` in dataset `{}`.\",table.getId().getConnector(), table.getId().getDataset(), exc);\n+\t\t\tcatch (NoSuchElementException exc) {\n+\t\t\t\tlog.warn(\"Unable to resolve connector `{}` in dataset `{}`.\", table.getId().getConnector(), table.getId().getDataset(), exc);\n \t\t\t\tcontinue;\n \t\t\t}\n \t\t}\n-\t\t\n+\n \t\treturn new TableExportQueryPlan(\n-\t\t\tquery.createQueryPlan(context),\n-\t\t\tCDateRange.of(dateRange),\n-\t\t\tresolvedConnectors,\n-\t\t\ttotalColumns\n+\t\t\t\tquery.createQueryPlan(context),\n+\t\t\t\tCDateRange.of(dateRange),\n+\t\t\t\tresolvedConnectors,\n+\t\t\t\ttotalColumns\n \t\t);\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUwMzU4Ng==", "url": "https://github.com/bakdata/conquery/pull/1163#discussion_r497503586", "bodyText": "Das f\u00fchrt in 'Connector::getValidityDateColumn' zu einer NoSuchElementException. Soweit muss es ja nicht kommen.", "author": "thoniTUB", "createdAt": "2020-09-30T13:21:14Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/filter/CQUnfilteredTable.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package com.bakdata.conquery.models.query.concept.filter;\n+\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+\n+import com.bakdata.conquery.models.concepts.Connector;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ConnectorId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ValidityDateId;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n+@Getter @Setter\n+public class CQUnfilteredTable {\n+\t@Valid @NotNull\n+\tprivate ConnectorId id;\n+\t@Valid\n+\tprivate ValidityDateColumn dateColumn;\n+\n+\t@JsonIgnore\n+\tprivate Connector resolvedConnector;\n+\t\n+\t@Data @AllArgsConstructor @NoArgsConstructor\n+\tpublic static class ValidityDateColumn {\n+\t\tprivate ValidityDateId value;\n+\t\t\n+\t\tpublic ValidityDateColumn(String id) {\n+\t\t\tthis(ValidityDateId.Parser.INSTANCE.parse(id));\n+\t\t}\n+\t}\n+\n+\tpublic String selectedValidityDate() {\n+\t\tif(dateColumn == null || dateColumn.getValue() == null) {\n+\t\t\treturn null;", "originalCommit": "5750252d13f131f35e13788a26972dd37a996910", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc46141c93a8e64d85dccdbbf4b6ca0b999468ea", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/query/concept/filter/CQUnfilteredTable.java b/backend/src/main/java/com/bakdata/conquery/models/query/concept/filter/CQUnfilteredTable.java\nindex b3500dfe9..b6887c6d2 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/query/concept/filter/CQUnfilteredTable.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/query/concept/filter/CQUnfilteredTable.java\n\n@@ -5,38 +5,20 @@ import javax.validation.constraints.NotNull;\n \n import com.bakdata.conquery.models.concepts.Connector;\n import com.bakdata.conquery.models.identifiable.ids.specific.ConnectorId;\n-import com.bakdata.conquery.models.identifiable.ids.specific.ValidityDateId;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n-\n-import lombok.AllArgsConstructor;\n-import lombok.Data;\n import lombok.Getter;\n-import lombok.NoArgsConstructor;\n import lombok.Setter;\n \n-@Getter @Setter\n+@Getter\n+@Setter\n public class CQUnfilteredTable {\n-\t@Valid @NotNull\n-\tprivate ConnectorId id;\n \t@Valid\n-\tprivate ValidityDateColumn dateColumn;\n+\t@NotNull\n+\tprivate ConnectorId id;\n+\n+\t@NotNull\n+\tprivate ValidityDate dateColumn;\n \n \t@JsonIgnore\n \tprivate Connector resolvedConnector;\n-\t\n-\t@Data @AllArgsConstructor @NoArgsConstructor\n-\tpublic static class ValidityDateColumn {\n-\t\tprivate ValidityDateId value;\n-\t\t\n-\t\tpublic ValidityDateColumn(String id) {\n-\t\t\tthis(ValidityDateId.Parser.INSTANCE.parse(id));\n-\t\t}\n-\t}\n-\n-\tpublic String selectedValidityDate() {\n-\t\tif(dateColumn == null || dateColumn.getValue() == null) {\n-\t\t\treturn null;\n-\t\t}\n-\t\treturn dateColumn.getValue().getValidityDate();\n-\t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUwNjA3OQ==", "url": "https://github.com/bakdata/conquery/pull/1163#discussion_r497506079", "bodyText": "@awildturtok gab es nicht einen Weg die localEntities hier rauszuhalten?", "author": "thoniTUB", "createdAt": "2020-09-30T13:24:44Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/TableExportQueryPlan.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.bakdata.conquery.models.query.queryplan;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.bakdata.conquery.models.common.daterange.CDateRange;\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.entity.Entity;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import com.bakdata.conquery.models.query.results.EntityResult;\n+import com.bakdata.conquery.models.types.CType;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * The QueryPlan creates a full dump of the given table within a certain\n+ * date range.\n+ */\n+@RequiredArgsConstructor\n+public class TableExportQueryPlan implements QueryPlan {\n+\n+\tprivate final QueryPlan subPlan;\n+\tprivate final CDateRange dateRange;\n+\tprivate final List<TableExportDescription> tables;\n+\tprivate final int totalColumns;\n+\t\n+\t@Override\n+\tpublic QueryPlan clone(CloneContext ctx) {\n+\t\treturn new TableExportQueryPlan(subPlan.clone(ctx), dateRange, tables, totalColumns);\n+\t}\n+\n+\t@Override\n+\tpublic boolean isOfInterest(Entity entity) {\n+\t\treturn subPlan.isOfInterest(entity);\n+\t}\n+\n+\t@Override\n+\tpublic EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n+\t\tEntityResult result = subPlan.execute(ctx, entity);\n+\t\t\n+\t\tif(!result.isContained()) {\n+\t\t\treturn result;\n+\t\t}\n+\t\t\n+\t\tif (tables.isEmpty()) {\n+\t\t\treturn EntityResult.notContained();\n+\t\t}\n+\n+\t\t\n+\t\tList<Object[]> results = new ArrayList<>();\n+\t\tfor(TableExportDescription exportDescription : tables) {\n+\t\t\tfor(Bucket bucket : entity.getBucket(exportDescription.getTable().getId())) {\n+\n+\t\t\t\tint localEntity = bucket.toLocal(entity.getId());", "originalCommit": "5750252d13f131f35e13788a26972dd37a996910", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3MjI3OA==", "url": "https://github.com/bakdata/conquery/pull/1163#discussion_r497572278", "bodyText": "noch nicht ne", "author": "awildturtok", "createdAt": "2020-09-30T14:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUwNjA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "31b2cf941225b45eb80636e61c1762aa63746238", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/query/queryplan/TableExportQueryPlan.java b/backend/src/main/java/com/bakdata/conquery/models/query/queryplan/TableExportQueryPlan.java\nindex e6cb9794b..827c7bf4a 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/query/queryplan/TableExportQueryPlan.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/query/queryplan/TableExportQueryPlan.java\n\n@@ -52,7 +52,9 @@ public class TableExportQueryPlan implements QueryPlan {\n \t\t\n \t\tList<Object[]> results = new ArrayList<>();\n \t\tfor(TableExportDescription exportDescription : tables) {\n-\t\t\tfor(Bucket bucket : entity.getBucket(exportDescription.getTable().getId())) {\n+\n+\n+\t\t\tfor(Bucket bucket : ctx.getEntityBucketsForTable(entity, exportDescription.getTable().getId())) {\n \n \t\t\t\tint localEntity = bucket.toLocal(entity.getId());\n \n"}}, {"oid": "dc46141c93a8e64d85dccdbbf4b6ca0b999468ea", "url": "https://github.com/bakdata/conquery/commit/dc46141c93a8e64d85dccdbbf4b6ca0b999468ea", "message": "Cleanup of CQTable CQUnfilteredTable; not all inehritance is good", "committedDate": "2020-10-01T12:30:46Z", "type": "commit"}, {"oid": "987991bfe4df1310586f134c59a311068e0bd6eb", "url": "https://github.com/bakdata/conquery/commit/987991bfe4df1310586f134c59a311068e0bd6eb", "message": "Merge branch 'develop' into feature/long_format_queries", "committedDate": "2020-10-02T11:42:27Z", "type": "commit"}, {"oid": "b2e2481dfe83bdfc34af1f01784ea049745be54e", "url": "https://github.com/bakdata/conquery/commit/b2e2481dfe83bdfc34af1f01784ea049745be54e", "message": "fix non null check in CQConcept.java", "committedDate": "2020-10-02T11:47:14Z", "type": "commit"}, {"oid": "31b2cf941225b45eb80636e61c1762aa63746238", "url": "https://github.com/bakdata/conquery/commit/31b2cf941225b45eb80636e61c1762aa63746238", "message": "fix some method usages and Class name dupes", "committedDate": "2020-10-02T11:55:45Z", "type": "commit"}, {"oid": "3d5863384a83e20c15dc7460b662d76e2b052a31", "url": "https://github.com/bakdata/conquery/commit/3d5863384a83e20c15dc7460b662d76e2b052a31", "message": "automatic update to docs", "committedDate": "2020-10-02T11:57:56Z", "type": "commit"}, {"oid": "eaef1568830c887a5aa6083cdef31ab7ce682931", "url": "https://github.com/bakdata/conquery/commit/eaef1568830c887a5aa6083cdef31ab7ce682931", "message": "add missing constructor", "committedDate": "2020-10-05T12:40:06Z", "type": "commit"}, {"oid": "a72dd4fdefc473846f54fabc5a449976569acfb7", "url": "https://github.com/bakdata/conquery/commit/a72dd4fdefc473846f54fabc5a449976569acfb7", "message": "automatic update to docs", "committedDate": "2020-10-05T12:42:26Z", "type": "commit"}, {"oid": "fa06cb5f113251cb1ae135bbb800375e01bb34b6", "url": "https://github.com/bakdata/conquery/commit/fa06cb5f113251cb1ae135bbb800375e01bb34b6", "message": "fix dateColumn usgae", "committedDate": "2020-10-05T13:03:04Z", "type": "commit"}, {"oid": "cf2108b394fb5d1137858e370079a74dbfdd1675", "url": "https://github.com/bakdata/conquery/commit/cf2108b394fb5d1137858e370079a74dbfdd1675", "message": "Merge branch 'develop' into feature/long_format_queries", "committedDate": "2020-10-07T14:55:45Z", "type": "commit"}, {"oid": "76f69b9dc933a659ebd1f6072e9ca8f0468b0cb1", "url": "https://github.com/bakdata/conquery/commit/76f69b9dc933a659ebd1f6072e9ca8f0468b0cb1", "message": "Merge branch 'develop' into feature/long_format_queries", "committedDate": "2020-10-07T15:01:17Z", "type": "commit"}, {"oid": "1fc875384b178a655f1a41ed30acf657cdc5a57b", "url": "https://github.com/bakdata/conquery/commit/1fc875384b178a655f1a41ed30acf657cdc5a57b", "message": "automatic update to docs", "committedDate": "2020-10-07T15:03:42Z", "type": "commit"}]}