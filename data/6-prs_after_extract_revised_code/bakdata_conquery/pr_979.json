{"pr_number": 979, "pr_title": "Feature/auth overview as csv", "pr_createdAt": "2020-01-07T12:53:23Z", "pr_url": "https://github.com/bakdata/conquery/pull/979", "timeline": [{"oid": "ae823ebe1ba21914972337b9026aeb5ecc0d1718", "url": "https://github.com/bakdata/conquery/commit/ae823ebe1ba21914972337b9026aeb5ecc0d1718", "message": "creates overview csv", "committedDate": "2019-12-18T21:23:35Z", "type": "commit"}, {"oid": "5c1554018dd15826c78e332fb6f329a620377c35", "url": "https://github.com/bakdata/conquery/commit/5c1554018dd15826c78e332fb6f329a620377c35", "message": "join permissions of same domain with new line", "committedDate": "2019-12-18T21:34:03Z", "type": "commit"}, {"oid": "a337fbe05ec4a4aea2c85f727f985ef7552ef87d", "url": "https://github.com/bakdata/conquery/commit/a337fbe05ec4a4aea2c85f727f985ef7552ef87d", "message": "fixes parsing error", "committedDate": "2019-12-18T22:18:31Z", "type": "commit"}, {"oid": "e0722e381297be283db992a761254ec08098ed4b", "url": "https://github.com/bakdata/conquery/commit/e0722e381297be283db992a761254ec08098ed4b", "message": "fixes endpoint test", "committedDate": "2020-01-07T13:21:58Z", "type": "commit"}, {"oid": "6f5d63a845c873252daea2cdde163ae744563d89", "url": "https://github.com/bakdata/conquery/commit/6f5d63a845c873252daea2cdde163ae744563d89", "message": "codefactor", "committedDate": "2020-01-08T09:53:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1NjM2Mg==", "url": "https://github.com/bakdata/conquery/pull/979#discussion_r364756362", "bodyText": "Bitte kommentieren, ich m\u00f6chte in jeder Klasse einen kurzen Umriss was die Aufgabe der Klasse und member ist", "author": "Priehn", "createdAt": "2020-01-09T14:08:12Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/MeProcessor.java", "diffHunk": "@@ -25,7 +25,7 @@ public FEMeInformation getUserInformation(User user){\n \t\treturn FEMeInformation.builder()", "originalCommit": "6f5d63a845c873252daea2cdde163ae744563d89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgxMDAzMg==", "url": "https://github.com/bakdata/conquery/pull/979#discussion_r365810032", "bodyText": "oki", "author": "thoniTUB", "createdAt": "2020-01-13T13:43:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1NjM2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7941da1cb485e5f96bacec4d647c8960418c285e", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/MeProcessor.java b/backend/src/main/java/com/bakdata/conquery/apiv1/MeProcessor.java\nindex 9516349fd..c848a6cd3 100644\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/MeProcessor.java\n+++ b/backend/src/main/java/com/bakdata/conquery/apiv1/MeProcessor.java\n\n@@ -14,14 +14,22 @@ import lombok.AccessLevel;\n import lombok.AllArgsConstructor;\n import lombok.Builder;\n import lombok.Data;\n-import lombok.Getter;\n+import lombok.NonNull;\n \n+/**\n+ * This class holds the logic to back the endpoints provided by {@link MeResource}.\n+ */\n @AllArgsConstructor\n public class MeProcessor {\n \n \tprivate final MasterMetaStorage storage;\n \t\n-\tpublic FEMeInformation getUserInformation(User user){\n+\t/**\n+\t * Generates a summary of a user. It contains its name, the groups it belongs to and its permissions on a dataset.\n+\t * @param user The user object to gather informations about\n+\t * @return The information about the user\n+\t */\n+\tpublic FEMeInformation getUserInformation(@NonNull User user){\n \t\treturn FEMeInformation.builder()\n \t\t\t.userName(user.getLabel())\n \t\t\t.groups(FEGroup.from(AuthorizationHelper.getGroupsOf(user, storage)))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1ODE3Mw==", "url": "https://github.com/bakdata/conquery/pull/979#discussion_r364758173", "bodyText": "Kommentare\nMuss daf\u00fcr wirklich eine neue Klasse gemacht werden oder k\u00f6nnte das als Teil von CSV.java stehen?", "author": "Priehn", "createdAt": "2020-01-09T14:11:56Z", "path": "backend/src/main/java/com/bakdata/conquery/io/csv/CsvIo.java", "diffHunk": "@@ -2,6 +2,7 @@\n ", "originalCommit": "6f5d63a845c873252daea2cdde163ae744563d89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgxNDkxOA==", "url": "https://github.com/bakdata/conquery/pull/979#discussion_r365814918", "bodyText": "Diese Klasse ersetzt die alte", "author": "thoniTUB", "createdAt": "2020-01-13T13:54:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1ODE3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7941da1cb485e5f96bacec4d647c8960418c285e", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/io/csv/CsvIo.java b/backend/src/main/java/com/bakdata/conquery/io/csv/CsvIo.java\nindex fbb014145..7704bd76f 100644\n--- a/backend/src/main/java/com/bakdata/conquery/io/csv/CsvIo.java\n+++ b/backend/src/main/java/com/bakdata/conquery/io/csv/CsvIo.java\n\n@@ -8,24 +8,47 @@ import java.nio.file.Files;\n import com.bakdata.conquery.models.config.ConqueryConfig;\n import com.univocity.parsers.csv.CsvParser;\n import com.univocity.parsers.csv.CsvWriter;\n+import lombok.NonNull;\n import lombok.experimental.UtilityClass;\n import lombok.extern.slf4j.Slf4j;\n \n+/**\n+ * Utility class for reading and writing CSVs with the global settings from {@link ConqueryConfig}.\n+ */\n @UtilityClass @Slf4j\n public class CsvIo {\n \n+\t/**\n+\t * Creates a new CSV parser using the global settings from {@link ConqueryConfig}.\n+\t * @return The newly created parser.\n+\t */\n \tpublic static CsvParser createParser() {\n \t\treturn new CsvParser(ConqueryConfig.getInstance().getCsv().createCsvParserSettings());\n \t}\n-\n+\t\n+\t/**\n+\t * Creates a new CSV writer using the global settings from {@link ConqueryConfig}.\n+\t * @return The newly created writer.\n+\t */\n \tpublic static CsvWriter createWriter() {\n \t\treturn new CsvWriter(ConqueryConfig.getInstance().getCsv().createCsvWriterSettings());\n \t}\n \n-\tpublic static CsvWriter createWriter(Writer writer) {\n+\t/**\n+\t * Creates a new CSV writer using the global settings from {@link ConqueryConfig} and an existing writer object to write through.\n+\t * @param writer The writer to write through.\n+\t * @return The newly created writer.\n+\t */\n+\tpublic static CsvWriter createWriter(@NonNull Writer writer) {\n \t\treturn new CsvWriter(writer, ConqueryConfig.getInstance().getCsv().createCsvWriterSettings());\n \t}\n \n+\t/**\n+\t * Checks if the provided file is gzipped.\n+\t * @param file The file to check.\n+\t * @return True if it was gzipped.\n+\t * @throws IOException if an I/O error occurs.\n+\t */\n \tpublic static boolean isGZipped(File file) throws IOException {\n \n \t\tfinal String contentType = Files.probeContentType(file.toPath());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1ODQ5Mg==", "url": "https://github.com/bakdata/conquery/pull/979#discussion_r364758492", "bodyText": "Kommentare was diese Klasse bewirken soll", "author": "Priehn", "createdAt": "2020-01-09T14:12:34Z", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/AuthConfig.java", "diffHunk": "@@ -1,10 +1,11 @@\n package com.bakdata.conquery.models.auth;", "originalCommit": "6f5d63a845c873252daea2cdde163ae744563d89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7941da1cb485e5f96bacec4d647c8960418c285e", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/auth/AuthConfig.java b/backend/src/main/java/com/bakdata/conquery/models/auth/AuthConfig.java\nindex 03dc19427..e700552b0 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/auth/AuthConfig.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/auth/AuthConfig.java\n\n@@ -4,38 +4,44 @@ import java.util.List;\n \n import com.bakdata.conquery.io.cps.CPSBase;\n import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.config.ConqueryConfig;\n+import com.bakdata.conquery.resources.admin.rest.AdminProcessor;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import org.apache.shiro.realm.AuthorizingRealm;\n \n /**\n- * This interface represents the basic modules that conquery's authentication and authorization system needs.\n+ * Conquery's authentication and authorization system uses this interface to retrieve necessary \n+ * objects and other auth related informations for system for different configurations.\n+ * \n+ * A custom authentication mechanism must implement this interface and register a JSON type from this interface,\n+ * before it is added to the base configuration {@link ConqueryConfig}.\n  */\n @JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"type\")\n @CPSBase\n-public abstract class AuthConfig {\n+public interface AuthConfig {\n \t/**\n-\t * Gets the realm specified in the configuration.\n-\t * @param storage (Unused) A storage from which a realm can query information about subjects and permissions.\n+\t * Gets the realm to be uses in the current configuration.\n+\t * @param storage A storage from which a realm can query information about subjects and permissions.\n \t * @return The realm.\n \t */\n-\tpublic abstract AuthorizingRealm getRealm(MasterMetaStorage storage);\n+\tAuthorizingRealm getRealm(MasterMetaStorage storage);\n \t\n \t/**\n \t * Sets up the initial subjects and permissions for the authentication system.\n \t * @param storage A storage, where the handler might add a new users.\n \t */\n-\tpublic abstract void initializeAuthConstellation(MasterMetaStorage storage);\n+\tvoid initializeAuthConstellation(MasterMetaStorage storage);\n \t\n \t/**\n \t * Gets an extractor that parse a token from a request.\n \t * The token is then used in the authentication process.\n \t * @return The extractor\n \t */\n-\tpublic abstract TokenExtractor getTokenExtractor();\n+\tTokenExtractor getTokenExtractor();\n \t\n \t/**\n-\t * Returns an ordered list of Permission scopes that are used to generate an permission overview for a user.\n-\t * @return\n+\t * Returns an ordered list of Permission scopes that are used to generate an permission overview for a user (in {@link AdminProcessor}).\n+\t * @return A list of permission scopes.\n \t */\n-\tpublic abstract List<String> getOverviewScope();\n+\tList<String> getOverviewScope();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc2MjEyNA==", "url": "https://github.com/bakdata/conquery/pull/979#discussion_r364762124", "bodyText": "Kommentare", "author": "Priehn", "createdAt": "2020-01-09T14:19:19Z", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/AuthorizationHelper.java", "diffHunk": "@@ -1,12 +1,12 @@\n package com.bakdata.conquery.models.auth;", "originalCommit": "6f5d63a845c873252daea2cdde163ae744563d89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc2MjI2OQ==", "url": "https://github.com/bakdata/conquery/pull/979#discussion_r364762269", "bodyText": "Kommentare", "author": "Priehn", "createdAt": "2020-01-09T14:19:35Z", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/DevAuthConfig.java", "diffHunk": "@@ -1,14 +1,17 @@\n package com.bakdata.conquery.models.auth;", "originalCommit": "6f5d63a845c873252daea2cdde163ae744563d89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7941da1cb485e5f96bacec4d647c8960418c285e", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/auth/DevAuthConfig.java b/backend/src/main/java/com/bakdata/conquery/models/auth/DevAuthConfig.java\nindex c81b85cc8..610f0e8d8 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/auth/DevAuthConfig.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/auth/DevAuthConfig.java\n\n@@ -15,10 +15,10 @@ import org.apache.shiro.realm.AuthorizingRealm;\n \n /**\n  * Default configuration for the auth system. Sets up all other default components.\n- *\n+ * This configuration causes that every request is handled as invoked by the super user.\n  */\n @CPSType(base = AuthConfig.class, id = \"DEVELOPMENT\")\n-public class DevAuthConfig extends AuthConfig {\n+public class DevAuthConfig implements AuthConfig {\n \n \t/**\n \t * The label of the superuser that is used in the frontend.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc2MzAzOA==", "url": "https://github.com/bakdata/conquery/pull/979#discussion_r364763038", "bodyText": "in CSV.java existiert eine Methode mit dem gleichen Namen, aber anderer Logik Bitte die Implementationen vereinheitlichen", "author": "Priehn", "createdAt": "2020-01-09T14:20:57Z", "path": "backend/src/main/java/com/bakdata/conquery/io/csv/CsvIo.java", "diffHunk": "@@ -21,6 +22,10 @@ public static CsvWriter createWriter() {\n \t\treturn new CsvWriter(ConqueryConfig.getInstance().getCsv().createCsvWriterSettings());\n \t}\n \n+\tpublic static CsvWriter createWriter(Writer writer) {\n+\t\treturn new CsvWriter(writer, ConqueryConfig.getInstance().getCsv().createCsvWriterSettings());\n+\t}\n+\n \tpublic static boolean isGZipped(File file) throws IOException {", "originalCommit": "6f5d63a845c873252daea2cdde163ae744563d89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7941da1cb485e5f96bacec4d647c8960418c285e", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/io/csv/CsvIo.java b/backend/src/main/java/com/bakdata/conquery/io/csv/CsvIo.java\nindex fbb014145..7704bd76f 100644\n--- a/backend/src/main/java/com/bakdata/conquery/io/csv/CsvIo.java\n+++ b/backend/src/main/java/com/bakdata/conquery/io/csv/CsvIo.java\n\n@@ -8,24 +8,47 @@ import java.nio.file.Files;\n import com.bakdata.conquery.models.config.ConqueryConfig;\n import com.univocity.parsers.csv.CsvParser;\n import com.univocity.parsers.csv.CsvWriter;\n+import lombok.NonNull;\n import lombok.experimental.UtilityClass;\n import lombok.extern.slf4j.Slf4j;\n \n+/**\n+ * Utility class for reading and writing CSVs with the global settings from {@link ConqueryConfig}.\n+ */\n @UtilityClass @Slf4j\n public class CsvIo {\n \n+\t/**\n+\t * Creates a new CSV parser using the global settings from {@link ConqueryConfig}.\n+\t * @return The newly created parser.\n+\t */\n \tpublic static CsvParser createParser() {\n \t\treturn new CsvParser(ConqueryConfig.getInstance().getCsv().createCsvParserSettings());\n \t}\n-\n+\t\n+\t/**\n+\t * Creates a new CSV writer using the global settings from {@link ConqueryConfig}.\n+\t * @return The newly created writer.\n+\t */\n \tpublic static CsvWriter createWriter() {\n \t\treturn new CsvWriter(ConqueryConfig.getInstance().getCsv().createCsvWriterSettings());\n \t}\n \n-\tpublic static CsvWriter createWriter(Writer writer) {\n+\t/**\n+\t * Creates a new CSV writer using the global settings from {@link ConqueryConfig} and an existing writer object to write through.\n+\t * @param writer The writer to write through.\n+\t * @return The newly created writer.\n+\t */\n+\tpublic static CsvWriter createWriter(@NonNull Writer writer) {\n \t\treturn new CsvWriter(writer, ConqueryConfig.getInstance().getCsv().createCsvWriterSettings());\n \t}\n \n+\t/**\n+\t * Checks if the provided file is gzipped.\n+\t * @param file The file to check.\n+\t * @return True if it was gzipped.\n+\t * @throws IOException if an I/O error occurs.\n+\t */\n \tpublic static boolean isGZipped(File file) throws IOException {\n \n \t\tfinal String contentType = Files.probeContentType(file.toPath());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc2MzQ2Mw==", "url": "https://github.com/bakdata/conquery/pull/979#discussion_r364763463", "bodyText": "Kommentare", "author": "Priehn", "createdAt": "2020-01-09T14:21:44Z", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/permissions/ConqueryPermission.java", "diffHunk": "@@ -1,9 +1,11 @@\n package com.bakdata.conquery.models.auth.permissions;", "originalCommit": "6f5d63a845c873252daea2cdde163ae744563d89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7941da1cb485e5f96bacec4d647c8960418c285e", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/auth/permissions/ConqueryPermission.java b/backend/src/main/java/com/bakdata/conquery/models/auth/permissions/ConqueryPermission.java\nindex 69776847d..1ed679819 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/auth/permissions/ConqueryPermission.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/auth/permissions/ConqueryPermission.java\n\n@@ -4,21 +4,42 @@ import java.time.Instant;\n import java.util.Set;\n \n import com.bakdata.conquery.io.cps.CPSBase;\n+import com.bakdata.conquery.io.cps.CPSType;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import org.apache.shiro.authz.Permission;\n+import org.apache.shiro.authz.permission.WildcardPermission;\n \n /**\n  * We wrap the actual interface to integrate the permissions into the \n- * CPSType system.\n+ * {@link CPSType} system.\n  *\n  */\n @JsonTypeInfo(use=JsonTypeInfo.Id.CUSTOM, property=\"type\")\n @CPSBase\n public interface ConqueryPermission  extends Permission{\n \t\n+\t/**\n+\t * Gets the domains of a permission according to {@link WildcardPermission}\n+\t * @return A set of the domains.\n+\t */\n \tSet<String> getDomains();\n+\t\n+\t/**\n+\t * Gets the abilities of a permission according to {@link WildcardPermission}\n+\t * @return A set of the abilities.\n+\t */\n \tSet<String> getAbilities();\n+\t\n+\t/**\n+\t * Gets the instances of a permission according to {@link WildcardPermission}\n+\t * @return A set of the instances.\n+\t */\n \tSet<String> getInstances();\n+\t\n+\t/**\n+\t * Returns the creation time of the permission.\n+\t * @return The creation time as an {@link Instant}.\n+\t */\n \tInstant getCreationTime();\n \t\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc2MzU1Ng==", "url": "https://github.com/bakdata/conquery/pull/979#discussion_r364763556", "bodyText": "Kommentare", "author": "Priehn", "createdAt": "2020-01-09T14:21:53Z", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/permissions/WildcardPermission.java", "diffHunk": "@@ -1,11 +1,13 @@\n package com.bakdata.conquery.models.auth.permissions;", "originalCommit": "6f5d63a845c873252daea2cdde163ae744563d89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7941da1cb485e5f96bacec4d647c8960418c285e", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/auth/permissions/WildcardPermission.java b/backend/src/main/java/com/bakdata/conquery/models/auth/permissions/WildcardPermission.java\nindex 78c6a5ca0..3e5ffdc53 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/auth/permissions/WildcardPermission.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/auth/permissions/WildcardPermission.java\n\n@@ -12,7 +12,8 @@ import lombok.Getter;\n import lombok.Setter;\n \n /**\n- * Needed for (de)serialization with Jackson.\n+ * A wrapper for the actual {@link org.apache.shiro.authz.permission.WildcardPermission}\n+ * class to use it in the {@link CPSType} system and enable (de)serialization with Jackson.\n  */\n @SuppressWarnings(\"serial\")\n @Getter\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc2MzY1Nw==", "url": "https://github.com/bakdata/conquery/pull/979#discussion_r364763657", "bodyText": "Kommentare", "author": "Priehn", "createdAt": "2020-01-09T14:22:04Z", "path": "backend/src/main/java/com/bakdata/conquery/models/config/CSVConfig.java", "diffHunk": "@@ -1,10 +1,10 @@\n package com.bakdata.conquery.models.config;", "originalCommit": "6f5d63a845c873252daea2cdde163ae744563d89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7941da1cb485e5f96bacec4d647c8960418c285e", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/config/CSVConfig.java b/backend/src/main/java/com/bakdata/conquery/models/config/CSVConfig.java\nindex e830a3f99..335e388c1 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/config/CSVConfig.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/config/CSVConfig.java\n\n@@ -6,7 +6,9 @@ import java.nio.charset.StandardCharsets;\n import javax.validation.constraints.NotNull;\n \n import com.univocity.parsers.csv.CsvFormat;\n+import com.univocity.parsers.csv.CsvParser;\n import com.univocity.parsers.csv.CsvParserSettings;\n+import com.univocity.parsers.csv.CsvWriter;\n import com.univocity.parsers.csv.CsvWriterSettings;\n import lombok.AllArgsConstructor;\n import lombok.Getter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc2MzcxMw==", "url": "https://github.com/bakdata/conquery/pull/979#discussion_r364763713", "bodyText": "Kommentare", "author": "Priehn", "createdAt": "2020-01-09T14:22:12Z", "path": "backend/src/main/java/com/bakdata/conquery/resources/admin/AdminServlet.java", "diffHunk": "@@ -3,10 +3,6 @@\n import java.util.Collections;", "originalCommit": "6f5d63a845c873252daea2cdde163ae744563d89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc2Mzc3OA==", "url": "https://github.com/bakdata/conquery/pull/979#discussion_r364763778", "bodyText": "Kommentare", "author": "Priehn", "createdAt": "2020-01-09T14:22:21Z", "path": "backend/src/main/java/com/bakdata/conquery/resources/admin/rest/AdminProcessor.java", "diffHunk": "@@ -1,12 +1,9 @@\n package com.bakdata.conquery.resources.admin.rest;", "originalCommit": "6f5d63a845c873252daea2cdde163ae744563d89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc2MzkxMA==", "url": "https://github.com/bakdata/conquery/pull/979#discussion_r364763910", "bodyText": "Kommentare", "author": "Priehn", "createdAt": "2020-01-09T14:22:35Z", "path": "backend/src/main/java/com/bakdata/conquery/resources/admin/rest/AuthOverviewResource.java", "diffHunk": "@@ -1,16 +1,20 @@\n package com.bakdata.conquery.resources.admin.rest;", "originalCommit": "6f5d63a845c873252daea2cdde163ae744563d89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7941da1cb485e5f96bacec4d647c8960418c285e", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/resources/admin/rest/AuthOverviewResource.java b/backend/src/main/java/com/bakdata/conquery/resources/admin/rest/AuthOverviewResource.java\nindex 4e889ef61..3c73ced66 100644\n--- a/backend/src/main/java/com/bakdata/conquery/resources/admin/rest/AuthOverviewResource.java\n+++ b/backend/src/main/java/com/bakdata/conquery/resources/admin/rest/AuthOverviewResource.java\n\n@@ -7,7 +7,9 @@ import javax.ws.rs.Produces;\n import com.bakdata.conquery.apiv1.AdditionalMediaTypes;\n import com.bakdata.conquery.resources.hierarchies.HAdmin;\n \n-\n+/**\n+ * This class provides endpoints to obtain an authorization overview in form of structured data.\n+ */\n @Path(\"auth-overview\")\n public class AuthOverviewResource extends HAdmin {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc2NDAwOQ==", "url": "https://github.com/bakdata/conquery/pull/979#discussion_r364764009", "bodyText": "Comments", "author": "Priehn", "createdAt": "2020-01-09T14:22:47Z", "path": "backend/src/main/java/com/bakdata/conquery/resources/admin/ui/model/FEPermission.java", "diffHunk": "@@ -10,7 +10,7 @@\n import java.util.Set;", "originalCommit": "6f5d63a845c873252daea2cdde163ae744563d89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b7f34e2e295c1670263ea53bc9b151dab451005", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/resources/admin/ui/model/FEPermission.java b/backend/src/main/java/com/bakdata/conquery/resources/admin/ui/model/FEPermission.java\nindex 470184e10..584e5c21e 100644\n--- a/backend/src/main/java/com/bakdata/conquery/resources/admin/ui/model/FEPermission.java\n+++ b/backend/src/main/java/com/bakdata/conquery/resources/admin/ui/model/FEPermission.java\n\n@@ -6,7 +6,6 @@ import java.time.format.DateTimeFormatter;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n-import java.util.Locale;\n import java.util.Set;\n import java.util.TimeZone;\n \n"}}, {"oid": "7941da1cb485e5f96bacec4d647c8960418c285e", "url": "https://github.com/bakdata/conquery/commit/7941da1cb485e5f96bacec4d647c8960418c285e", "message": "review changes (comments)", "committedDate": "2020-01-20T08:08:46Z", "type": "commit"}, {"oid": "7b7f34e2e295c1670263ea53bc9b151dab451005", "url": "https://github.com/bakdata/conquery/commit/7b7f34e2e295c1670263ea53bc9b151dab451005", "message": "Merge branch 'develop' into feature/auth-overview-as-csv\n\n# Conflicts:\n#\tbackend/src/main/java/com/bakdata/conquery/resources/admin/AdminServlet.java\n#\tbackend/src/main/java/com/bakdata/conquery/resources/admin/ui/model/FEPermission.java\n#\tbackend/src/test/resources/tests/endpoints/adminEndpointInfo.json", "committedDate": "2020-01-20T08:15:02Z", "type": "commit"}, {"oid": "543b0c4a53f18bdcc8fa72a42c89c109b017a987", "url": "https://github.com/bakdata/conquery/commit/543b0c4a53f18bdcc8fa72a42c89c109b017a987", "message": "Merge branch 'develop' into feature/auth-overview-as-csv", "committedDate": "2020-01-21T15:17:59Z", "type": "commit"}]}