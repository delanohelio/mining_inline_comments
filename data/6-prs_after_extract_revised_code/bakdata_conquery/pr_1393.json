{"pr_number": 1393, "pr_title": "Feature/cdate cache?", "pr_createdAt": "2020-10-14T16:27:48Z", "pr_url": "https://github.com/bakdata/conquery/pull/1393", "timeline": [{"oid": "c0f3b55902073fcd151aa148b8f207eb88393731", "url": "https://github.com/bakdata/conquery/commit/c0f3b55902073fcd151aa148b8f207eb88393731", "message": "Reuse CDateSets by Proxy", "committedDate": "2020-10-14T15:42:29Z", "type": "commit"}, {"oid": "39bf4be8f07f86e847cc404f7d97151d0c5df1df", "url": "https://github.com/bakdata/conquery/commit/39bf4be8f07f86e847cc404f7d97151d0c5df1df", "message": "fix proxy not working with methods expecting other CDateSet", "committedDate": "2020-10-14T16:22:46Z", "type": "commit"}, {"oid": "3147db1401f65a74d18063b1ea897486f4fcfe70", "url": "https://github.com/bakdata/conquery/commit/3147db1401f65a74d18063b1ea897486f4fcfe70", "message": "make BitMapCDateSet.java compatible with Proxy", "committedDate": "2020-10-14T16:42:00Z", "type": "commit"}, {"oid": "87cc02539e815301248f99c0825cad92a8e8b5d0", "url": "https://github.com/bakdata/conquery/commit/87cc02539e815301248f99c0825cad92a8e8b5d0", "message": "reuse BitSets instead", "committedDate": "2020-10-15T08:47:10Z", "type": "commit"}, {"oid": "04697b3081e87d9ff246838d59160988cfb09de5", "url": "https://github.com/bakdata/conquery/commit/04697b3081e87d9ff246838d59160988cfb09de5", "message": "add ref", "committedDate": "2020-10-15T08:53:37Z", "type": "commit"}, {"oid": "9462df93a5b8235876cb6b1424646e6e8a3bd008", "url": "https://github.com/bakdata/conquery/commit/9462df93a5b8235876cb6b1424646e6e8a3bd008", "message": "fix usage of WeakReference", "committedDate": "2020-10-15T09:24:42Z", "type": "commit"}, {"oid": "97dbe9bfcf315a2fb02730d529c942e00d5ef830", "url": "https://github.com/bakdata/conquery/commit/97dbe9bfcf315a2fb02730d529c942e00d5ef830", "message": "Add documentation", "committedDate": "2020-10-15T09:57:07Z", "type": "commit"}, {"oid": "df6b8adeab9903e430ad41ff2e834d8ce32d0b02", "url": "https://github.com/bakdata/conquery/commit/df6b8adeab9903e430ad41ff2e834d8ce32d0b02", "message": "Apply usage of CDateSetCache where it makes sense", "committedDate": "2020-10-15T10:46:14Z", "type": "commit"}, {"oid": "d60c20bc2c1c7f06f849e9788ab9bcf8e0b798d4", "url": "https://github.com/bakdata/conquery/commit/d60c20bc2c1c7f06f849e9788ab9bcf8e0b798d4", "message": "automatic update to docs", "committedDate": "2020-10-15T10:48:33Z", "type": "commit"}, {"oid": "328e746dc6a4b7f51c5eecc11c9c11d5628f54bb", "url": "https://github.com/bakdata/conquery/commit/328e746dc6a4b7f51c5eecc11c9c11d5628f54bb", "message": "dont query size if we are not interested", "committedDate": "2020-10-15T13:02:50Z", "type": "commit"}, {"oid": "6ea56feb18f1d86db1049d9f13dd928b0e3496a4", "url": "https://github.com/bakdata/conquery/commit/6ea56feb18f1d86db1049d9f13dd928b0e3496a4", "message": "remove logging as that was causing slowdown", "committedDate": "2020-10-15T14:20:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI1NDQ1OA==", "url": "https://github.com/bakdata/conquery/pull/1393#discussion_r508254458", "bodyText": "container kann in die While-Schleife um den Scope zu verkleinern.", "author": "thoniTUB", "createdAt": "2020-10-20T07:01:13Z", "path": "backend/src/main/java/com/bakdata/conquery/models/common/CDateSetCache.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.bakdata.conquery.models.common;\n+\n+import java.lang.ref.Cleaner;\n+import java.lang.ref.Reference;\n+import java.lang.ref.SoftReference;\n+import java.util.BitSet;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Cache to avoid constant reallocation of huge CDateSets, instead cache/reuse their BitSets by way of a {@link Cleaner} that hooks into the GC and will give us those objects back.\n+ * <p>\n+ * The underlying data-structures are also maintained as {@link SoftReference} such that they are also subject to GC when memory is demanded.\n+ */\n+@Slf4j\n+public class CDateSetCache {\n+\n+\tprivate static final CDateSetCache dateSetCache = new CDateSetCache();\n+\tprotected final Queue<Reference<Container>> pool;\n+\tprivate final Cleaner cleaner = Cleaner.create();\n+\n+\tprivate CDateSetCache() {\n+\t\tpool = new ConcurrentLinkedQueue<>();\n+\t}\n+\n+\t/**\n+\t * Preallocate the DateSet, such that typical queries don't have to grow them while executing.\n+\t * The numbers are just best guesses and can be fine tuned if desired but configuration is probably not important.\n+\t */\n+\tpublic static BitMapCDateSet createPreAllocatedDateSet() {\n+\t\treturn dateSetCache.acquire();\n+\t}\n+\n+\tpublic BitMapCDateSet acquire() {\n+\t\tfinal BitMapCDateSet out = doAcquire();\n+\n+\t\t// create and maintain hardref on the bitsets\n+\t\tfinal Container container = new Container(out.getNegativeBits(), out.getPositiveBits());\n+\n+\t\tcleaner.register(out, () -> {\n+\t\t\t// Reset the bitsets\n+\t\t\tcontainer.getLeft().clear();\n+\t\t\tcontainer.getRight().clear();\n+\n+\t\t\t// Add reference of container to the bitset, so that they can be freed if memory is demanded.\n+\t\t\tpool.add(new SoftReference<>(container));\n+\t\t});\n+\n+\t\treturn out;\n+\t}\n+\n+\t/**\n+\t * Try to reuse old BitSets if available. Else create a new one.\n+\t */\n+\tprivate BitMapCDateSet doAcquire() {\n+\t\tReference<Container> reference;\n+\t\tContainer container;", "originalCommit": "6ea56feb18f1d86db1049d9f13dd928b0e3496a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c10916da9dedd5ac2e6ffc151bd76ac9272bb23", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/common/CDateSetCache.java b/backend/src/main/java/com/bakdata/conquery/models/common/CDateSetCache.java\nindex 5aefa47ff..345dc1137 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/common/CDateSetCache.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/common/CDateSetCache.java\n\n@@ -57,18 +57,16 @@ public class CDateSetCache {\n \t * Try to reuse old BitSets if available. Else create a new one.\n \t */\n \tprivate BitMapCDateSet doAcquire() {\n-\t\tReference<Container> reference;\n-\t\tContainer container;\n-\n+\t\t// Iterate as long as pool is not empty (which is either because there are no BitSets available, or that they have all been GCd)\n \t\twhile (true) {\n-\t\t\treference = pool.poll();\n+\t\t\tReference<Container> reference = pool.poll();\n \n \t\t\t// Pool is empty?\n \t\t\tif (reference == null) {\n \t\t\t\tbreak;\n \t\t\t}\n \n-\t\t\tcontainer = reference.get();\n+\t\t\tContainer container = reference.get();\n \n \t\t\t// Reference was cleared by GC?\n \t\t\tif (container == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI1NzY1OA==", "url": "https://github.com/bakdata/conquery/pull/1393#discussion_r508257658", "bodyText": "Du kannst hier return BitMapCDateSet.create(CDateRange.of(start, end)); machen. Das of kann mit null umgehen, so wie ich das sehe.", "author": "thoniTUB", "createdAt": "2020-10-20T07:07:47Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQExternal.java", "diffHunk": "@@ -133,38 +132,32 @@ public void collectResultInfos(ResultInfoCollector collector) {\n \t\tEVENT_DATE {\n \t\t\t@Override\n \t\t\tpublic BitMapCDateSet readDates(int[] dateIndices, String[] row) throws ParsingException {\n-\t\t\t\treturn BitMapCDateSet.create(Collections.singleton(CDateRange.exactly(DateFormats.parseToLocalDate(row[dateIndices[0]]))));\n+\t\t\t\treturn BitMapCDateSet.create(CDateRange.exactly(DateFormats.parseToLocalDate(row[dateIndices[0]])));\n \t\t\t}\n \t\t},\n \t\tSTART_END_DATE {\n \t\t\t@Override\n \t\t\tpublic BitMapCDateSet readDates(int[] dateIndices, String[] row) throws ParsingException {\n \t\t\t\tLocalDate start = row[dateIndices[0]] == null ? null : DateFormats.parseToLocalDate(row[dateIndices[0]]);\n \t\t\t\tLocalDate end = (dateIndices.length < 2 || row[dateIndices[1]] == null) ?\n-\t\t\t\t\tnull :\n-\t\t\t\t\t\t\t\t DateFormats.parseToLocalDate(row[dateIndices[1]]);\n+\t\t\t\t\t\t\t\tnull :\n+\t\t\t\t\t\t\t\tDateFormats.parseToLocalDate(row[dateIndices[1]]);\n \n \t\t\t\tCDateRange range;\n-\t\t\t\tif (start != null && end != null) {\n-\t\t\t\t\trange = CDateRange.of(start, end);\n-\t\t\t\t}\n-\t\t\t\telse if (start != null) {\n-\t\t\t\t\trange = CDateRange.atLeast(start);\n-\t\t\t\t}\n-\t\t\t\telse if (end != null) {\n-\t\t\t\t\trange = CDateRange.atMost(end);\n+\t\t\t\tif (start == null && end == null) {\n+\t\t\t\t\treturn null;\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\treturn null;\n+\t\t\t\t\trange = CDateRange.of(start, end);\n \t\t\t\t}\n \n-\t\t\t\treturn BitMapCDateSet.create(Collections.singleton(range));\n+\t\t\t\treturn BitMapCDateSet.create(range);", "originalCommit": "6ea56feb18f1d86db1049d9f13dd928b0e3496a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c10916da9dedd5ac2e6ffc151bd76ac9272bb23", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQExternal.java b/backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQExternal.java\nindex 9cbac6cc8..896173562 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQExternal.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQExternal.java\n\n@@ -139,19 +141,16 @@ public class CQExternal implements CQElement {\n \t\t\t@Override\n \t\t\tpublic BitMapCDateSet readDates(int[] dateIndices, String[] row) throws ParsingException {\n \t\t\t\tLocalDate start = row[dateIndices[0]] == null ? null : DateFormats.parseToLocalDate(row[dateIndices[0]]);\n+\n \t\t\t\tLocalDate end = (dateIndices.length < 2 || row[dateIndices[1]] == null) ?\n \t\t\t\t\t\t\t\tnull :\n \t\t\t\t\t\t\t\tDateFormats.parseToLocalDate(row[dateIndices[1]]);\n \n-\t\t\t\tCDateRange range;\n \t\t\t\tif (start == null && end == null) {\n \t\t\t\t\treturn null;\n \t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\trange = CDateRange.of(start, end);\n-\t\t\t\t}\n \n-\t\t\t\treturn BitMapCDateSet.create(range);\n+\t\t\t\treturn BitMapCDateSet.create(CDateRange.of(start, end));\n \t\t\t}\n \t\t},\n \t\tDATE_RANGE {\n"}}, {"oid": "0c10916da9dedd5ac2e6ffc151bd76ac9272bb23", "url": "https://github.com/bakdata/conquery/commit/0c10916da9dedd5ac2e6ffc151bd76ac9272bb23", "message": "cleanup", "committedDate": "2020-10-20T09:33:15Z", "type": "commit"}, {"oid": "f78216f7ecfab5a362a0204548482edfbb4d4f26", "url": "https://github.com/bakdata/conquery/commit/f78216f7ecfab5a362a0204548482edfbb4d4f26", "message": "add logging for CollectQueryResult ShardResult", "committedDate": "2020-10-20T12:57:46Z", "type": "commit"}]}