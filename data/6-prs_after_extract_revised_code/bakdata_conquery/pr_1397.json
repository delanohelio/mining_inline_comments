{"pr_number": 1397, "pr_title": "only deliver queries that are NEW or DONE on Endpoint storedQueries", "pr_createdAt": "2020-10-16T09:55:31Z", "pr_url": "https://github.com/bakdata/conquery/pull/1397", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUzNzczMQ==", "url": "https://github.com/bakdata/conquery/pull/1397#discussion_r507537731", "bodyText": "log", "author": "awildturtok", "createdAt": "2020-10-19T07:45:34Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/StoredQueriesProcessor.java", "diffHunk": "@@ -18,43 +18,53 @@\n import com.bakdata.conquery.models.auth.permissions.QueryPermission;\n import com.bakdata.conquery.models.datasets.Dataset;\n import com.bakdata.conquery.models.exceptions.JSONException;\n+import com.bakdata.conquery.models.execution.ExecutionState;\n import com.bakdata.conquery.models.execution.ExecutionStatus;\n import com.bakdata.conquery.models.execution.ManagedExecution;\n+import com.bakdata.conquery.models.identifiable.ids.specific.DatasetId;\n import com.bakdata.conquery.models.identifiable.ids.specific.ManagedExecutionId;\n import com.bakdata.conquery.models.query.ManagedQuery;\n import com.bakdata.conquery.models.query.concept.ConceptQuery;\n import com.bakdata.conquery.models.worker.DatasetRegistry;\n import com.bakdata.conquery.models.worker.Namespace;\n import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n \n-@Slf4j\n+@Slf4j @RequiredArgsConstructor\n public class StoredQueriesProcessor {\n \n \t@Getter\n \tprivate final DatasetRegistry datasets;\n \tprivate final MetaStorage storage;\n \n-\tpublic StoredQueriesProcessor(DatasetRegistry datasets) {\n-\t\tthis.datasets = datasets;\n-\t\tthis.storage = datasets.getMetaStorage();\n-\t}\n-\n \tpublic Stream<ExecutionStatus> getAllQueries(Namespace namespace, HttpServletRequest req, User user) {\n \t\tCollection<ManagedExecution<?>> allQueries = storage.getAllExecutions();\n \n+\t\treturn getQueriesFiltered(namespace.getDataset().getId(), RequestAwareUriBuilder.fromRequest(req), user, allQueries);\n+\t}\n+\n+\tpublic Stream<ExecutionStatus> getQueriesFiltered(DatasetId datasetId, UriBuilder uriBuilder, User user, Collection<ManagedExecution<?>> allQueries) {\n \t\treturn allQueries\n \t\t\t.stream()\n \t\t\t// to exclude subtypes from somewhere else\n-\t\t\t.filter(q -> (q instanceof ManagedQuery) && ((ManagedQuery) q).getQuery().getClass().equals(ConceptQuery.class))\n-\t\t\t.filter(q -> q.getDataset().equals(namespace.getDataset().getId()))\n+\t\t\t.peek(q -> System.out.println(\"Before checks:\" + q))\n+\t\t\t.filter(q -> (\n+\t\t\t\tq instanceof ManagedQuery) && ((ManagedQuery) q).getQuery().getClass().equals(ConceptQuery.class)\n+\t\t\t\t)\n+\t\t\t.peek(q -> System.out.println(\"After type check:\" + q))", "originalCommit": "92fe75b90f004446e88a7f4d5e8e0294f0c023e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc0ODYwMw==", "url": "https://github.com/bakdata/conquery/pull/1397#discussion_r507748603", "bodyText": "Das war nur f\u00fcrs debugging, ich entferne es, es gibt ja jetzt einen Test.", "author": "thoniTUB", "createdAt": "2020-10-19T13:32:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUzNzczMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5a3cd3abcb3d5700c3a8e7eba135df47e1320533", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/StoredQueriesProcessor.java b/backend/src/main/java/com/bakdata/conquery/apiv1/StoredQueriesProcessor.java\nindex d6d57f923..7a8204ef7 100644\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/StoredQueriesProcessor.java\n+++ b/backend/src/main/java/com/bakdata/conquery/apiv1/StoredQueriesProcessor.java\n\n@@ -35,7 +35,7 @@ import lombok.extern.slf4j.Slf4j;\n public class StoredQueriesProcessor {\n \n \t@Getter\n-\tprivate final DatasetRegistry datasets;\n+\tprivate final DatasetRegistry datasetRegistry;\n \tprivate final MetaStorage storage;\n \n \tpublic Stream<ExecutionStatus> getAllQueries(Namespace namespace, HttpServletRequest req, User user) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUzODMzOA==", "url": "https://github.com/bakdata/conquery/pull/1397#discussion_r507538338", "bodyText": "Doku, warum die URL Null sein k\u00f6nnte?", "author": "awildturtok", "createdAt": "2020-10-19T07:46:34Z", "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -217,7 +217,7 @@ protected void setStatusBase(@NonNull MetaStorage storage, UriBuilder url, @NonN\n \n \t@SneakyThrows({MalformedURLException.class, IllegalArgumentException.class, UriBuilderException.class})\n \tpublic final Optional<URL> getDownloadURL(UriBuilder url, User user) {\n-\t\tif(!isReadyToDownload(url, user)) {\n+\t\tif(url == null || !isReadyToDownload(url, user)) {", "originalCommit": "92fe75b90f004446e88a7f4d5e8e0294f0c023e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7228365787ea9a628d1d7b88ba46236fd0f2753d", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java b/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\nindex 66a04d749..fb5e2b10e 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\n\n@@ -218,6 +218,7 @@ public abstract class ManagedExecution<R extends ShardResult> extends Identifiab\n \t@SneakyThrows({MalformedURLException.class, IllegalArgumentException.class, UriBuilderException.class})\n \tpublic final Optional<URL> getDownloadURL(UriBuilder url, User user) {\n \t\tif(url == null || !isReadyToDownload(url, user)) {\n+\t\t\t// url might be null because no url was wished and no builder was provided\n \t\t\treturn Optional.empty();\n \t\t}\n \t\treturn Optional.ofNullable(getDownloadURLInternal(url));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUzOTA1MA==", "url": "https://github.com/bakdata/conquery/pull/1397#discussion_r507539050", "bodyText": "Das sollte in einen BeforeAll Block", "author": "awildturtok", "createdAt": "2020-10-19T07:47:43Z", "path": "backend/src/test/java/com/bakdata/conquery/api/StoredQueriesProcessorTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.bakdata.conquery.api;\n+\n+import static com.bakdata.conquery.models.execution.ExecutionState.DONE;\n+import static com.bakdata.conquery.models.execution.ExecutionState.FAILED;\n+import static com.bakdata.conquery.models.execution.ExecutionState.NEW;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Stream;\n+\n+import com.bakdata.conquery.apiv1.StoredQueriesProcessor;\n+import com.bakdata.conquery.apiv1.forms.export_form.ExportForm;\n+import com.bakdata.conquery.io.xodus.MetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.ConqueryPermission;\n+import com.bakdata.conquery.models.datasets.Dataset;\n+import com.bakdata.conquery.models.execution.ExecutionState;\n+import com.bakdata.conquery.models.execution.ExecutionStatus;\n+import com.bakdata.conquery.models.execution.ManagedExecution;\n+import com.bakdata.conquery.models.forms.managed.AbsoluteFormQuery;\n+import com.bakdata.conquery.models.forms.managed.ManagedForm;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ManagedExecutionId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n+import com.bakdata.conquery.models.query.IQuery;\n+import com.bakdata.conquery.models.query.ManagedQuery;\n+import com.bakdata.conquery.models.query.concept.ConceptQuery;\n+import com.bakdata.conquery.models.worker.DatasetRegistry;\n+import com.google.common.collect.ImmutableList;\n+import org.junit.jupiter.api.Test;\n+\n+public class StoredQueriesProcessorTest {\n+\tprivate static final MetaStorage STRORAGE = mock(MetaStorage.class);\n+\tprivate static final StoredQueriesProcessor processor = new StoredQueriesProcessor(mock(DatasetRegistry.class), STRORAGE);\n+\t\n+\tprivate static final Dataset DATASET_0 = new Dataset() {{setName(\"dataset0\");}};\n+\tprivate static final Dataset DATASET_1 = new Dataset() {{setName(\"dataset1\");}};\n+\tprivate static final ManagedExecutionId QUERY_ID_0 = new ManagedExecutionId(DATASET_0.getId(), UUID.fromString(\"00000000-0000-0000-0000-000000000000\"));\n+\tprivate static final ManagedExecutionId QUERY_ID_1 = new ManagedExecutionId(DATASET_1.getId(), UUID.fromString(\"00000000-0000-0000-0000-000000000001\"));\n+\tprivate static final ManagedExecutionId QUERY_ID_2 = new ManagedExecutionId(DATASET_0.getId(), UUID.fromString(\"00000000-0000-0000-0000-000000000002\"));\n+\tprivate static final ManagedExecutionId QUERY_ID_3 = new ManagedExecutionId(DATASET_0.getId(), UUID.fromString(\"00000000-0000-0000-0000-000000000003\"));\n+\tprivate static final ManagedExecutionId QUERY_ID_4 = new ManagedExecutionId(DATASET_0.getId(), UUID.fromString(\"00000000-0000-0000-0000-000000000004\"));\n+\tprivate static final ManagedExecutionId QUERY_ID_5 = new ManagedExecutionId(DATASET_0.getId(), UUID.fromString(\"00000000-0000-0000-0000-000000000005\"));\n+\tprivate static final ManagedExecutionId QUERY_ID_6 = new ManagedExecutionId(DATASET_0.getId(), UUID.fromString(\"00000000-0000-0000-0000-000000000006\"));\n+\t\n+\tprivate static int USER_COUNT = 0;\n+\tprivate static final User[] USERS = new User[] {\n+\t\tmockUser(List.of(QUERY_ID_0, QUERY_ID_1,QUERY_ID_2, QUERY_ID_4)),\n+\t\tmockUser(List.of(QUERY_ID_3, QUERY_ID_4))\n+\t};\n+\t\n+\n+\t\n+\tprivate static final List<ManagedExecution<?>> queries = ImmutableList.of(\n+\t\tmockManagedQueryFrontEnd(USERS[0], QUERY_ID_0, NEW),\t\t// included\n+\t\tmockManagedQueryFrontEnd(USERS[0], QUERY_ID_1, NEW),\t\t// not included: wrong dataset\n+\t\tmockManagedForm(USERS[0], QUERY_ID_2, NEW),\t\t\t\t// not included: not a ManagedQuery\n+\t\tmockManagedQueryFrontEnd(USERS[1], QUERY_ID_3, NEW),\t\t// not included: missing permission\n+\t\tmockManagedQueryFrontEnd(USERS[1], QUERY_ID_4, DONE),\t// included\n+\t\tmockManagedQueryFrontEnd(USERS[0], QUERY_ID_5, FAILED), \t// not included: wrong state\n+\t\tmockManagedQuery(new AbsoluteFormQuery(null, null, null, null), USERS[0], QUERY_ID_6, NEW) \t// not included: wrong state\n+\t\t);\n+\t\n+\tstatic {\n+\t\t// setup storage mock\n+\t\tdoAnswer((invocation) -> {", "originalCommit": "92fe75b90f004446e88a7f4d5e8e0294f0c023e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7228365787ea9a628d1d7b88ba46236fd0f2753d", "chunk": "diff --git a/backend/src/test/java/com/bakdata/conquery/api/StoredQueriesProcessorTest.java b/backend/src/test/java/com/bakdata/conquery/api/StoredQueriesProcessorTest.java\nindex 8fad76b2c..f8e0e7cfa 100644\n--- a/backend/src/test/java/com/bakdata/conquery/api/StoredQueriesProcessorTest.java\n+++ b/backend/src/test/java/com/bakdata/conquery/api/StoredQueriesProcessorTest.java\n\n@@ -33,6 +33,7 @@ import com.bakdata.conquery.models.query.ManagedQuery;\n import com.bakdata.conquery.models.query.concept.ConceptQuery;\n import com.bakdata.conquery.models.worker.DatasetRegistry;\n import com.google.common.collect.ImmutableList;\n+import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n \n public class StoredQueriesProcessorTest {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUzOTQ1OQ==", "url": "https://github.com/bakdata/conquery/pull/1397#discussion_r507539459", "bodyText": "return allowedQueries...", "author": "awildturtok", "createdAt": "2020-10-19T07:48:23Z", "path": "backend/src/test/java/com/bakdata/conquery/api/StoredQueriesProcessorTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.bakdata.conquery.api;\n+\n+import static com.bakdata.conquery.models.execution.ExecutionState.DONE;\n+import static com.bakdata.conquery.models.execution.ExecutionState.FAILED;\n+import static com.bakdata.conquery.models.execution.ExecutionState.NEW;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Stream;\n+\n+import com.bakdata.conquery.apiv1.StoredQueriesProcessor;\n+import com.bakdata.conquery.apiv1.forms.export_form.ExportForm;\n+import com.bakdata.conquery.io.xodus.MetaStorage;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.ConqueryPermission;\n+import com.bakdata.conquery.models.datasets.Dataset;\n+import com.bakdata.conquery.models.execution.ExecutionState;\n+import com.bakdata.conquery.models.execution.ExecutionStatus;\n+import com.bakdata.conquery.models.execution.ManagedExecution;\n+import com.bakdata.conquery.models.forms.managed.AbsoluteFormQuery;\n+import com.bakdata.conquery.models.forms.managed.ManagedForm;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ManagedExecutionId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n+import com.bakdata.conquery.models.query.IQuery;\n+import com.bakdata.conquery.models.query.ManagedQuery;\n+import com.bakdata.conquery.models.query.concept.ConceptQuery;\n+import com.bakdata.conquery.models.worker.DatasetRegistry;\n+import com.google.common.collect.ImmutableList;\n+import org.junit.jupiter.api.Test;\n+\n+public class StoredQueriesProcessorTest {\n+\tprivate static final MetaStorage STRORAGE = mock(MetaStorage.class);\n+\tprivate static final StoredQueriesProcessor processor = new StoredQueriesProcessor(mock(DatasetRegistry.class), STRORAGE);\n+\t\n+\tprivate static final Dataset DATASET_0 = new Dataset() {{setName(\"dataset0\");}};\n+\tprivate static final Dataset DATASET_1 = new Dataset() {{setName(\"dataset1\");}};\n+\tprivate static final ManagedExecutionId QUERY_ID_0 = new ManagedExecutionId(DATASET_0.getId(), UUID.fromString(\"00000000-0000-0000-0000-000000000000\"));\n+\tprivate static final ManagedExecutionId QUERY_ID_1 = new ManagedExecutionId(DATASET_1.getId(), UUID.fromString(\"00000000-0000-0000-0000-000000000001\"));\n+\tprivate static final ManagedExecutionId QUERY_ID_2 = new ManagedExecutionId(DATASET_0.getId(), UUID.fromString(\"00000000-0000-0000-0000-000000000002\"));\n+\tprivate static final ManagedExecutionId QUERY_ID_3 = new ManagedExecutionId(DATASET_0.getId(), UUID.fromString(\"00000000-0000-0000-0000-000000000003\"));\n+\tprivate static final ManagedExecutionId QUERY_ID_4 = new ManagedExecutionId(DATASET_0.getId(), UUID.fromString(\"00000000-0000-0000-0000-000000000004\"));\n+\tprivate static final ManagedExecutionId QUERY_ID_5 = new ManagedExecutionId(DATASET_0.getId(), UUID.fromString(\"00000000-0000-0000-0000-000000000005\"));\n+\tprivate static final ManagedExecutionId QUERY_ID_6 = new ManagedExecutionId(DATASET_0.getId(), UUID.fromString(\"00000000-0000-0000-0000-000000000006\"));\n+\t\n+\tprivate static int USER_COUNT = 0;\n+\tprivate static final User[] USERS = new User[] {\n+\t\tmockUser(List.of(QUERY_ID_0, QUERY_ID_1,QUERY_ID_2, QUERY_ID_4)),\n+\t\tmockUser(List.of(QUERY_ID_3, QUERY_ID_4))\n+\t};\n+\t\n+\n+\t\n+\tprivate static final List<ManagedExecution<?>> queries = ImmutableList.of(\n+\t\tmockManagedQueryFrontEnd(USERS[0], QUERY_ID_0, NEW),\t\t// included\n+\t\tmockManagedQueryFrontEnd(USERS[0], QUERY_ID_1, NEW),\t\t// not included: wrong dataset\n+\t\tmockManagedForm(USERS[0], QUERY_ID_2, NEW),\t\t\t\t// not included: not a ManagedQuery\n+\t\tmockManagedQueryFrontEnd(USERS[1], QUERY_ID_3, NEW),\t\t// not included: missing permission\n+\t\tmockManagedQueryFrontEnd(USERS[1], QUERY_ID_4, DONE),\t// included\n+\t\tmockManagedQueryFrontEnd(USERS[0], QUERY_ID_5, FAILED), \t// not included: wrong state\n+\t\tmockManagedQuery(new AbsoluteFormQuery(null, null, null, null), USERS[0], QUERY_ID_6, NEW) \t// not included: wrong state\n+\t\t);\n+\t\n+\tstatic {\n+\t\t// setup storage mock\n+\t\tdoAnswer((invocation) -> {\n+\t\t\tUserId id = (UserId) invocation.getArgument(0);\n+\t\t\tfor (User user : USERS) {\n+\t\t\t\tif(user.getId().equals(id)) {\n+\t\t\t\t\treturn user;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t}).when(STRORAGE).getUser(any());\n+\t}\n+\t\n+\t@Test\n+\tpublic void getQueriesFiltered() {\n+\t\t\n+\t\tStream<ExecutionStatus> infos = processor.getQueriesFiltered(DATASET_0.getId(), null, USERS[0], queries);\n+\t\t\n+\t\tassertThat(infos).containsExactly(\n+\t\t\tmakeState(QUERY_ID_0, USERS[0], USERS[0], NEW),\n+\t\t\tmakeState(QUERY_ID_4, USERS[1], USERS[0], DONE)\n+\t\t\t//new ExecutionStatus(new String[0], QUERY_ID_0.getExecution().toString(), true, LocalDateTime.MIN.atZone(ZoneId.systemDefault()), null, USERS[0].getId(), null, false, true, false, QUERY_ID_0, ExecutionState.NEW, null, null, null, null, false, null, null)\n+\t\t\t);\n+\t}\n+\t\n+\tprivate static User mockUser(List<ManagedExecutionId> allowedQueryIds) {\n+\t\tUser user = mock(User.class);\n+\t\twhen(user.getId()).thenReturn(new UserId(\"user\" + USER_COUNT++));\n+\t\t\n+\t\tdoAnswer((invocation) -> {\n+\t\t\tConqueryPermission perm = (ConqueryPermission) invocation.getArgument(0);\n+\t\t\tif(allowedQueryIds.contains(ManagedExecutionId.Parser.INSTANCE.parse(perm.getInstances().iterator().next()))) {", "originalCommit": "92fe75b90f004446e88a7f4d5e8e0294f0c023e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1NDAxMQ==", "url": "https://github.com/bakdata/conquery/pull/1397#discussion_r507754011", "bodyText": "@awildturtok was meinst du hier? Ich kann nicht ganz folgen.", "author": "thoniTUB", "createdAt": "2020-10-19T13:39:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUzOTQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4MDI2NQ==", "url": "https://github.com/bakdata/conquery/pull/1397#discussion_r507780265", "bodyText": "anstatt\nif(f(x))\n  return true;\nelse\n  return false;\n\n\nreturn f(x)", "author": "awildturtok", "createdAt": "2020-10-19T14:10:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUzOTQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI1MTg3OQ==", "url": "https://github.com/bakdata/conquery/pull/1397#discussion_r508251879", "bodyText": "Oh ja, ich war blind", "author": "thoniTUB", "createdAt": "2020-10-20T06:55:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUzOTQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7228365787ea9a628d1d7b88ba46236fd0f2753d", "chunk": "diff --git a/backend/src/test/java/com/bakdata/conquery/api/StoredQueriesProcessorTest.java b/backend/src/test/java/com/bakdata/conquery/api/StoredQueriesProcessorTest.java\nindex 8fad76b2c..f8e0e7cfa 100644\n--- a/backend/src/test/java/com/bakdata/conquery/api/StoredQueriesProcessorTest.java\n+++ b/backend/src/test/java/com/bakdata/conquery/api/StoredQueriesProcessorTest.java\n\n@@ -33,6 +33,7 @@ import com.bakdata.conquery.models.query.ManagedQuery;\n import com.bakdata.conquery.models.query.concept.ConceptQuery;\n import com.bakdata.conquery.models.worker.DatasetRegistry;\n import com.google.common.collect.ImmutableList;\n+import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n \n public class StoredQueriesProcessorTest {\n"}}, {"oid": "5a3cd3abcb3d5700c3a8e7eba135df47e1320533", "url": "https://github.com/bakdata/conquery/commit/5a3cd3abcb3d5700c3a8e7eba135df47e1320533", "message": "adds extra filter for stored queries", "committedDate": "2020-10-21T07:40:12Z", "type": "commit"}, {"oid": "7228365787ea9a628d1d7b88ba46236fd0f2753d", "url": "https://github.com/bakdata/conquery/commit/7228365787ea9a628d1d7b88ba46236fd0f2753d", "message": "review changes", "committedDate": "2020-10-21T07:40:13Z", "type": "commit"}, {"oid": "50a7f969050909456aacdd0d0c8427b8688ddcfa", "url": "https://github.com/bakdata/conquery/commit/50a7f969050909456aacdd0d0c8427b8688ddcfa", "message": "simplify conditional", "committedDate": "2020-10-21T07:40:14Z", "type": "commit"}, {"oid": "50a7f969050909456aacdd0d0c8427b8688ddcfa", "url": "https://github.com/bakdata/conquery/commit/50a7f969050909456aacdd0d0c8427b8688ddcfa", "message": "simplify conditional", "committedDate": "2020-10-21T07:40:14Z", "type": "forcePushed"}]}