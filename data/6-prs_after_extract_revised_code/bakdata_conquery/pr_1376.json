{"pr_number": 1376, "pr_title": "Feature/provide shared groups on stored query infos", "pr_createdAt": "2020-10-02T15:16:38Z", "pr_url": "https://github.com/bakdata/conquery/pull/1376", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzI3OQ==", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r500807279", "bodyText": "import", "author": "awildturtok", "createdAt": "2020-10-07T07:51:09Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/RequestAwareUriBuilder.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.bakdata.conquery.apiv1;\n+\n+import static com.bakdata.conquery.resources.ResourceConstants.API;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+public abstract class RequestAwareUriBuilder extends javax.ws.rs.core.UriBuilder {\n+\n+\tpublic static javax.ws.rs.core.UriBuilder fromRequest(HttpServletRequest request) {\n+\t\treturn javax.ws.rs.core.UriBuilder.fromUri(RequestHelper.getRequestURL(request)).path(API);", "originalCommit": "cce5d629ec0b332cc4f6ac9ec6674fec36b300d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff7f5f2550afa0fc31362dda1065d8d327698cb8", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/RequestAwareUriBuilder.java b/backend/src/main/java/com/bakdata/conquery/apiv1/RequestAwareUriBuilder.java\nindex c92dbd4c4..230eb2c1c 100644\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/RequestAwareUriBuilder.java\n+++ b/backend/src/main/java/com/bakdata/conquery/apiv1/RequestAwareUriBuilder.java\n\n@@ -3,10 +3,11 @@ package com.bakdata.conquery.apiv1;\n import static com.bakdata.conquery.resources.ResourceConstants.API;\n \n import javax.servlet.http.HttpServletRequest;\n+import javax.ws.rs.core.UriBuilder;\n \n-public abstract class RequestAwareUriBuilder extends javax.ws.rs.core.UriBuilder {\n+public interface RequestAwareUriBuilder {\n \n-\tpublic static javax.ws.rs.core.UriBuilder fromRequest(HttpServletRequest request) {\n-\t\treturn javax.ws.rs.core.UriBuilder.fromUri(RequestHelper.getRequestURL(request)).path(API);\n+\tpublic static UriBuilder fromRequest(HttpServletRequest request) {\n+\t\treturn UriBuilder.fromUri(RequestHelper.getRequestURL(request)).path(API);\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzU0NA==", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r500807544", "bodyText": "was macht die Klasse au\u00dfer einer Helper Methode?", "author": "awildturtok", "createdAt": "2020-10-07T07:51:34Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/RequestAwareUriBuilder.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.bakdata.conquery.apiv1;\n+\n+import static com.bakdata.conquery.resources.ResourceConstants.API;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+public abstract class RequestAwareUriBuilder extends javax.ws.rs.core.UriBuilder {", "originalCommit": "cce5d629ec0b332cc4f6ac9ec6674fec36b300d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg5OTA3OA==", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r500899078", "bodyText": "Sie bietet das typische statische Interface vom UriBuilder aber ich k\u00f6nnte sie zu einem Interface machen", "author": "thoniTUB", "createdAt": "2020-10-07T10:17:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzU0NA=="}], "type": "inlineReview", "revised_code": {"commit": "ff7f5f2550afa0fc31362dda1065d8d327698cb8", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/RequestAwareUriBuilder.java b/backend/src/main/java/com/bakdata/conquery/apiv1/RequestAwareUriBuilder.java\nindex c92dbd4c4..230eb2c1c 100644\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/RequestAwareUriBuilder.java\n+++ b/backend/src/main/java/com/bakdata/conquery/apiv1/RequestAwareUriBuilder.java\n\n@@ -3,10 +3,11 @@ package com.bakdata.conquery.apiv1;\n import static com.bakdata.conquery.resources.ResourceConstants.API;\n \n import javax.servlet.http.HttpServletRequest;\n+import javax.ws.rs.core.UriBuilder;\n \n-public abstract class RequestAwareUriBuilder extends javax.ws.rs.core.UriBuilder {\n+public interface RequestAwareUriBuilder {\n \n-\tpublic static javax.ws.rs.core.UriBuilder fromRequest(HttpServletRequest request) {\n-\t\treturn javax.ws.rs.core.UriBuilder.fromUri(RequestHelper.getRequestURL(request)).path(API);\n+\tpublic static UriBuilder fromRequest(HttpServletRequest request) {\n+\t\treturn UriBuilder.fromUri(RequestHelper.getRequestURL(request)).path(API);\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwODM3MA==", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r500808370", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\telse if(!(query instanceof ManagedQuery)) {\n          \n          \n            \n            \n          \n          \n            \n            \t\tif(!(query instanceof ManagedQuery)) {", "author": "awildturtok", "createdAt": "2020-10-07T07:52:53Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/StoredQueriesProcessor.java", "diffHunk": "@@ -66,12 +68,15 @@ public void deleteQuery(Namespace namespace, ManagedExecutionId queryId) {\n \t\tstorage.removeExecution(queryId);\n \t}\n \n-\tpublic ExecutionStatus getQueryWithSource(ManagedExecutionId queryId, User user) {\n+\tpublic StoredQuerySingleInfo getQueryWithSource(ManagedExecutionId queryId, User user, UriBuilder url) {\n \t\tManagedExecution<?> query = storage.getExecution(queryId);\n \t\tif (query == null) {\n-\t\t\treturn null;\n+\t\t\tthrow new WebApplicationException(Response.Status.NOT_FOUND);\n \t\t}\n-\t\treturn query.buildStatus(storage, null, user, EnumSet.of(CreationFlag.WITH_COLUMN_DESCIPTION, CreationFlag.WITH_SOURCE));\n+\t\telse if(!(query instanceof ManagedQuery)) {", "originalCommit": "cce5d629ec0b332cc4f6ac9ec6674fec36b300d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff7f5f2550afa0fc31362dda1065d8d327698cb8", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/StoredQueriesProcessor.java b/backend/src/main/java/com/bakdata/conquery/apiv1/StoredQueriesProcessor.java\nindex 8d78c9d5e..778464be2 100644\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/StoredQueriesProcessor.java\n+++ b/backend/src/main/java/com/bakdata/conquery/apiv1/StoredQueriesProcessor.java\n\n@@ -73,9 +73,11 @@ public class StoredQueriesProcessor {\n \t\tif (query == null) {\n \t\t\tthrow new WebApplicationException(Response.Status.NOT_FOUND);\n \t\t}\n-\t\telse if(!(query instanceof ManagedQuery)) {\n+\n+\t\tif(!(query instanceof ManagedQuery)) {\n \t\t\tthrow new WebApplicationException(Status.NOT_IMPLEMENTED);\n \t\t}\n+\t\t\n \t\treturn StoredQuerySingleInfo.from((ManagedQuery) query, user, storage, url);\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwODc4MQ==", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r500808781", "bodyText": "\u00f6hm, ist das nicht was f\u00fcr Kai?", "author": "awildturtok", "createdAt": "2020-10-07T07:53:30Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/StoredQuerySingleInfo.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package com.bakdata.conquery.apiv1;\n+\n+import java.net.URL;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.ws.rs.core.UriBuilder;\n+\n+import com.bakdata.conquery.io.xodus.MetaStorage;\n+import com.bakdata.conquery.models.auth.entities.Group;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.permissions.Ability;\n+import com.bakdata.conquery.models.auth.permissions.QueryPermission;\n+import com.bakdata.conquery.models.identifiable.ids.specific.GroupId;\n+import com.bakdata.conquery.models.identifiable.ids.specific.ManagedExecutionId;\n+import com.bakdata.conquery.models.query.ManagedQuery;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.shiro.authz.Permission;\n+\n+/**\n+ * API-Class that holds exactly the informations that the front end needs when querying an stored query.\n+ * \n+ * @implNote It can be tedious to maintain several Api classes for different end points that have\n+ * overlapping information. GraphQL might be a solution for this.\n+ */\n+@AllArgsConstructor\n+@Getter\n+public class StoredQuerySingleInfo {\n+\tprivate ManagedExecutionId id;\n+\tprivate String label;\n+\tprivate ZonedDateTime createdAt; // ISO timestamp: 2019-06-18T11:11:50.528626+02:00\n+\tprivate boolean own;\n+\tprivate boolean shared;\n+\tprivate boolean system;\n+\t@JsonProperty(\"isPristineLabel\")\n+\tprivate boolean isPristineLabel;", "originalCommit": "cce5d629ec0b332cc4f6ac9ec6674fec36b300d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwMDc3NQ==", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r500900775", "bodyText": "Meinst du die JsonProperty?", "author": "thoniTUB", "createdAt": "2020-10-07T10:20:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwODc4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b4732aee34660e8a81e6edf46db1485879716e6d", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/StoredQuerySingleInfo.java b/backend/src/main/java/com/bakdata/conquery/apiv1/StoredQuerySingleInfo.java\ndeleted file mode 100644\nindex fa0639ebc..000000000\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/StoredQuerySingleInfo.java\n+++ /dev/null\n\n@@ -1,80 +0,0 @@\n-package com.bakdata.conquery.apiv1;\n-\n-import java.net.URL;\n-import java.time.ZoneId;\n-import java.time.ZonedDateTime;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import javax.ws.rs.core.UriBuilder;\n-\n-import com.bakdata.conquery.io.xodus.MetaStorage;\n-import com.bakdata.conquery.models.auth.entities.Group;\n-import com.bakdata.conquery.models.auth.entities.User;\n-import com.bakdata.conquery.models.auth.permissions.Ability;\n-import com.bakdata.conquery.models.auth.permissions.QueryPermission;\n-import com.bakdata.conquery.models.identifiable.ids.specific.GroupId;\n-import com.bakdata.conquery.models.identifiable.ids.specific.ManagedExecutionId;\n-import com.bakdata.conquery.models.query.ManagedQuery;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import lombok.AllArgsConstructor;\n-import lombok.Getter;\n-import org.apache.shiro.authz.Permission;\n-\n-/**\n- * API-Class that holds exactly the informations that the front end needs when querying an stored query.\n- * \n- * @implNote It can be tedious to maintain several Api classes for different end points that have\n- * overlapping information. GraphQL might be a solution for this.\n- */\n-@AllArgsConstructor\n-@Getter\n-public class StoredQuerySingleInfo {\n-\tprivate ManagedExecutionId id;\n-\tprivate String label;\n-\tprivate ZonedDateTime createdAt; // ISO timestamp: 2019-06-18T11:11:50.528626+02:00\n-\tprivate boolean own;\n-\tprivate boolean shared;\n-\tprivate boolean system;\n-\t@JsonProperty(\"isPristineLabel\")\n-\tprivate boolean isPristineLabel;\n-\tprivate String ownerName;\n-\tprivate URL resultUrl;\n-\tprivate Collection<IdLabel<GroupId>> groups;\n-\tprivate QueryDescription query;\n-\tprivate String[] tags;\n-\tprivate Long numberOfResults;\n-\t\n-\tpublic static StoredQuerySingleInfo from(ManagedQuery query, User user, MetaStorage metaStorage,  UriBuilder url) {\n-\t\t/* Calculate which groups can see this query.\n-\t\t * This usually is usually not done very often and should be reasonable fast, so don't cache this.\n-\t\t */\n-\t\tList<IdLabel<GroupId>> permittedGroups = new ArrayList<>();\n-\t\tfor(Group group : metaStorage.getAllGroups()) {\n-\t\t\tfor(Permission perm : group.getPermissions()) {\n-\t\t\t\tif(perm.implies(QueryPermission.onInstance(Ability.READ, query.getId()))) {\n-\t\t\t\t\tpermittedGroups.add(new IdLabel<GroupId>(group.getId(), group.getLabel()));\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\treturn new StoredQuerySingleInfo(\n-\t\t\tquery.getId(), \n-\t\t\tquery.getLabel(),\n-\t\t\tquery.getCreationTime().atZone(ZoneId.systemDefault()),\n-\t\t\tquery.getOwner().equals(user.getId()),\n-\t\t\tquery.isShared(),\n-\t\t\tfalse, // there is no mechanism/definition yet for system queries\n-\t\t\tquery.getLabel() == null,\n-\t\t\tOptional.ofNullable(query.getOwner()).map(owner -> metaStorage.getUser(owner)).map(User::getLabel).orElse(null),\n-\t\t\tquery.getDownloadURL(url, user).orElse(null),\n-\t\t\tpermittedGroups,\n-\t\t\tquery.getQuery(),\n-\t\t\tquery.getTags(),\n-\t\t\tquery.getLastResultCount()\n-\t\t\t);\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwOTQ3NA==", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r500809474", "bodyText": "den Unterstrich w\u00fcrde ich vermeiden, verusch hier lieber einen passenderen Namen zu finden", "author": "awildturtok", "createdAt": "2020-10-07T07:54:43Z", "path": "backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java", "diffHunk": "@@ -204,29 +207,38 @@ protected void setStatusBase(@NonNull MetaStorage storage, URLBuilder url, @NonN\n \t\tstatus.setStatus(state);\n \t\tstatus.setOwner(Optional.ofNullable(owner).orElse(null));\n \t\tstatus.setOwnerName(Optional.ofNullable(owner).map(owner -> storage.getUser(owner)).map(User::getLabel).orElse(null));\n-\t\tstatus.setResultUrl(\n-\t\t\tisReadyToDownload(url, user)\n-\t\t\t\t? getDownloadURL(url)\n-\t\t\t\t: null);\n+\t\tstatus.setResultUrl(getDownloadURL(url, user).orElse(null));\n \t\tif (state.equals(ExecutionState.FAILED) && error != null) {\n \t\t\t// Use plain format here to have a uniform serialization.\n \t\t\tstatus.setError(error.asPlain());\n \t\t}\n \t}\n+\t\n+\n+\t@SneakyThrows({MalformedURLException.class, IllegalArgumentException.class, UriBuilderException.class})\n+\tpublic final Optional<URL> getDownloadURL(UriBuilder url, User user) {\n+\t\tif(isReadyToDownload(url, user)) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\treturn Optional.ofNullable(_getDownloadURL(url));\n+\t}\n \n \t/**\n \t * Allows the implementation to define an specific endpoint from where the result is to be downloaded.\n+\t * @throws UriBuilderException \n+\t * @throws IllegalArgumentException \n+\t * @throws MalformedURLException \n \t */\n-\tprotected abstract URL getDownloadURL(URLBuilder url);\n+\tprotected abstract URL _getDownloadURL(UriBuilder url) throws MalformedURLException, IllegalArgumentException, UriBuilderException;", "originalCommit": "cce5d629ec0b332cc4f6ac9ec6674fec36b300d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff7f5f2550afa0fc31362dda1065d8d327698cb8", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java b/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\nindex 2c65a78b3..70288e7ba 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/execution/ManagedExecution.java\n\n@@ -220,16 +220,14 @@ public abstract class ManagedExecution<R extends ShardResult> extends Identifiab\n \t\tif(isReadyToDownload(url, user)) {\n \t\t\treturn Optional.empty();\n \t\t}\n-\t\treturn Optional.ofNullable(_getDownloadURL(url));\n+\t\treturn Optional.ofNullable(getDownloadURLInternal(url));\n \t}\n \n \t/**\n \t * Allows the implementation to define an specific endpoint from where the result is to be downloaded.\n-\t * @throws UriBuilderException \n-\t * @throws IllegalArgumentException \n-\t * @throws MalformedURLException \n \t */\n-\tprotected abstract URL _getDownloadURL(UriBuilder url) throws MalformedURLException, IllegalArgumentException, UriBuilderException;\n+\t@Nullable\n+\tprotected abstract URL getDownloadURLInternal(UriBuilder url) throws MalformedURLException, IllegalArgumentException, UriBuilderException;\n \n \tpublic ExecutionStatus buildStatus(@NonNull MetaStorage storage, UriBuilder url, User user) {\n \t\treturn buildStatus(storage, url, user, EnumSet.noneOf(ExecutionStatus.CreationFlag.class));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxMTI4Mg==", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r500811282", "bodyText": "wo ist der User hin?", "author": "awildturtok", "createdAt": "2020-10-07T07:57:38Z", "path": "backend/src/main/java/com/bakdata/conquery/resources/api/StoredQueriesResource.java", "diffHunk": "@@ -42,18 +40,18 @@\n \tprivate StoredQueriesProcessor processor;\n \n \t@GET\n-\tpublic List<ExecutionStatus> getAllQueries(@Auth User user, DatasetId datasetId, @Context HttpServletRequest req) {\n-\t\treturn processor.getAllQueries(namespace, req, user)\n+\tpublic List<ExecutionStatus> getAllQueries(DatasetId datasetId) {", "originalCommit": "cce5d629ec0b332cc4f6ac9ec6674fec36b300d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwMTQ5OQ==", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r500901499", "bodyText": "Der ist schon durch die @PostCreate von HAuthorized in dem Context verf\u00fcgbar.", "author": "thoniTUB", "createdAt": "2020-10-07T10:21:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxMTI4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b4732aee34660e8a81e6edf46db1485879716e6d", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/resources/api/StoredQueriesResource.java b/backend/src/main/java/com/bakdata/conquery/resources/api/StoredQueriesResource.java\nindex 6b6a2c7d3..030cb904d 100644\n--- a/backend/src/main/java/com/bakdata/conquery/resources/api/StoredQueriesResource.java\n+++ b/backend/src/main/java/com/bakdata/conquery/resources/api/StoredQueriesResource.java\n\n@@ -40,18 +42,18 @@ public class StoredQueriesResource extends HDatasets {\n \tprivate StoredQueriesProcessor processor;\n \n \t@GET\n-\tpublic List<ExecutionStatus> getAllQueries(DatasetId datasetId) {\n-\t\treturn processor.getAllQueries(namespace, servletRequest, user)\n+\tpublic List<ExecutionStatus> getAllQueries(@Auth User user, DatasetId datasetId, @Context HttpServletRequest req) {\n+\t\treturn processor.getAllQueries(namespace, req, user)\n \t\t\t.collect(Collectors.toList());\n \t}\n \n \t@GET\n \t@Path(\"{\" + QUERY + \"}\")\n-\tpublic StoredQuerySingleInfo getSingleQueryInfo(@PathParam(QUERY) ManagedExecutionId queryId) {\n+\tpublic ExecutionStatus getQueryWithSource(@Auth User user, @PathParam(QUERY) ManagedExecutionId queryId) {\n \t\tauthorize(user, datasetId, Ability.READ);\n \t\tauthorize(user, queryId, Ability.READ);\n-\t\t\n-\t\tStoredQuerySingleInfo status = processor.getQueryWithSource(queryId, user, RequestAwareUriBuilder.fromRequest(servletRequest));\n+\n+\t\tExecutionStatus status = processor.getQueryWithSource(queryId, user);\n \t\tif (status == null) {\n \t\t\tthrow new WebApplicationException(\"Unknown query \" + queryId, Status.NOT_FOUND);\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxMTg5NA==", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r500811894", "bodyText": "das localhost sieht mir hier falsch aus, was machst du damit? Schau mal ob du eher den eigenen Hostname kriegst?", "author": "awildturtok", "createdAt": "2020-10-07T07:58:38Z", "path": "backend/src/test/java/com/bakdata/conquery/integration/tests/ConceptPermissionTest.java", "diffHunk": "@@ -83,7 +86,7 @@ public void execute(StandaloneSupport conquery) throws Exception {\n \t}\n \t\n \tpublic static void executeAndWaitUntilFinish(QueryProcessor processor, Dataset dataset, QueryDescription query, User user, MetaStorage storage ) {\n-\t\tExecutionStatus status = processor.postQuery(dataset, query, null, user);\n+\t\tExecutionStatus status = processor.postQuery(dataset, query, UriBuilder.fromUri(URI.create(\"http://localhost\")), user);", "originalCommit": "cce5d629ec0b332cc4f6ac9ec6674fec36b300d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwMzE4Mg==", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r500903182", "bodyText": "Der UriBuilder braucht an dieser stelle einfach nur eine Valide URI, benutzt wird diese nicht", "author": "thoniTUB", "createdAt": "2020-10-07T10:24:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxMTg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkzNTA3NQ==", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r500935075", "bodyText": "Aber ich denke auch so, dass localhost am portabelsten ist", "author": "thoniTUB", "createdAt": "2020-10-07T11:24:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxMTg5NA=="}], "type": "inlineReview", "revised_code": {"commit": "b4732aee34660e8a81e6edf46db1485879716e6d", "chunk": "diff --git a/backend/src/test/java/com/bakdata/conquery/integration/tests/ConceptPermissionTest.java b/backend/src/test/java/com/bakdata/conquery/integration/tests/ConceptPermissionTest.java\nindex a8e67431e..1213f58cc 100644\n--- a/backend/src/test/java/com/bakdata/conquery/integration/tests/ConceptPermissionTest.java\n+++ b/backend/src/test/java/com/bakdata/conquery/integration/tests/ConceptPermissionTest.java\n\n@@ -86,7 +83,7 @@ public class ConceptPermissionTest extends IntegrationTest.Simple implements Pro\n \t}\n \t\n \tpublic static void executeAndWaitUntilFinish(QueryProcessor processor, Dataset dataset, QueryDescription query, User user, MetaStorage storage ) {\n-\t\tExecutionStatus status = processor.postQuery(dataset, query, UriBuilder.fromUri(URI.create(\"http://localhost\")), user);\n+\t\tExecutionStatus status = processor.postQuery(dataset, query, null, user);\n \t\tObjects.requireNonNull(storage.getExecution(status.getId()), \"Execution was not found in storage, even though it was startet\")\n \t\t\t.awaitDone(2, TimeUnit.MINUTES);\n \t}\n"}}, {"oid": "ff7f5f2550afa0fc31362dda1065d8d327698cb8", "url": "https://github.com/bakdata/conquery/commit/ff7f5f2550afa0fc31362dda1065d8d327698cb8", "message": "rename method previously starting with an underscore", "committedDate": "2020-10-07T11:02:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA4ODQzNQ==", "url": "https://github.com/bakdata/conquery/pull/1376#discussion_r501088435", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public interface RequestAwareUriBuilder {\n          \n          \n            \n            import lombok.experimental.UtilityClass;\n          \n          \n            \n            \n          \n          \n            \n            @UtilityClass\n          \n          \n            \n            public class RequestAwareUriBuilder {", "author": "awildturtok", "createdAt": "2020-10-07T15:05:44Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/RequestAwareUriBuilder.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.bakdata.conquery.apiv1;\n+\n+import static com.bakdata.conquery.resources.ResourceConstants.API;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.ws.rs.core.UriBuilder;\n+\n+public interface RequestAwareUriBuilder {", "originalCommit": "eafb726efe9d95824ffc7585506a0b7c67ef1302", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4732aee34660e8a81e6edf46db1485879716e6d", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/apiv1/RequestAwareUriBuilder.java b/backend/src/main/java/com/bakdata/conquery/apiv1/RequestAwareUriBuilder.java\ndeleted file mode 100644\nindex 230eb2c1c..000000000\n--- a/backend/src/main/java/com/bakdata/conquery/apiv1/RequestAwareUriBuilder.java\n+++ /dev/null\n\n@@ -1,13 +0,0 @@\n-package com.bakdata.conquery.apiv1;\n-\n-import static com.bakdata.conquery.resources.ResourceConstants.API;\n-\n-import javax.servlet.http.HttpServletRequest;\n-import javax.ws.rs.core.UriBuilder;\n-\n-public interface RequestAwareUriBuilder {\n-\n-\tpublic static UriBuilder fromRequest(HttpServletRequest request) {\n-\t\treturn UriBuilder.fromUri(RequestHelper.getRequestURL(request)).path(API);\n-\t}\n-}\n"}}, {"oid": "b4732aee34660e8a81e6edf46db1485879716e6d", "url": "https://github.com/bakdata/conquery/commit/b4732aee34660e8a81e6edf46db1485879716e6d", "message": "wip: add specific class for stored query endpoint", "committedDate": "2020-10-08T14:00:46Z", "type": "commit"}, {"oid": "9721f33e4950d145cd24c93b07d5643078560402", "url": "https://github.com/bakdata/conquery/commit/9721f33e4950d145cd24c93b07d5643078560402", "message": "makes api class more typed", "committedDate": "2020-10-08T14:00:46Z", "type": "commit"}, {"oid": "c1459dcdd2da8e480f29bad0f0c603aaba555763", "url": "https://github.com/bakdata/conquery/commit/c1459dcdd2da8e480f29bad0f0c603aaba555763", "message": "more work on api class for stored queries", "committedDate": "2020-10-08T14:00:46Z", "type": "commit"}, {"oid": "02de2cb1a5134e4b5b78dc7071b870807f2a0856", "url": "https://github.com/bakdata/conquery/commit/02de2cb1a5134e4b5b78dc7071b870807f2a0856", "message": "return query description query with list of permitted groups", "committedDate": "2020-10-08T14:00:47Z", "type": "commit"}, {"oid": "c62cf4ebd62e93d6dbeb17b6c65fd746be1634ed", "url": "https://github.com/bakdata/conquery/commit/c62cf4ebd62e93d6dbeb17b6c65fd746be1634ed", "message": "fixes compile errors", "committedDate": "2020-10-08T14:00:47Z", "type": "commit"}, {"oid": "d68b17e02b5cda2ee5692167764c144b362d417a", "url": "https://github.com/bakdata/conquery/commit/d68b17e02b5cda2ee5692167764c144b362d417a", "message": "generalize UriBuilding\n\nsimplyfy uri building\n\ncorrects download method path\n\nautomatic update to docs\n\nmake RequestAwareUriBuilder an interface\n\nimprove readablility of if\n\nrename method previously starting with an underscore\n\nfixes missing negation\n\nadds test for downloadlink generation\n\nfixes download path generation", "committedDate": "2020-10-08T14:02:30Z", "type": "commit"}, {"oid": "bd0e32b84f6e404af411b1486031fff337010e71", "url": "https://github.com/bakdata/conquery/commit/bd0e32b84f6e404af411b1486031fff337010e71", "message": "review changes", "committedDate": "2020-10-08T14:04:08Z", "type": "commit"}, {"oid": "bd0e32b84f6e404af411b1486031fff337010e71", "url": "https://github.com/bakdata/conquery/commit/bd0e32b84f6e404af411b1486031fff337010e71", "message": "review changes", "committedDate": "2020-10-08T14:04:08Z", "type": "forcePushed"}]}