{"pr_number": 1255, "pr_title": "Don't include notIncludedEntityResults to save on bandwidth", "pr_createdAt": "2020-07-03T15:04:42Z", "pr_url": "https://github.com/bakdata/conquery/pull/1255", "timeline": [{"oid": "48f40cd90e5d6d105293a333df7009f8168b176b", "url": "https://github.com/bakdata/conquery/commit/48f40cd90e5d6d105293a333df7009f8168b176b", "message": "Don't send NotContainedEntityResult results.", "committedDate": "2020-07-03T15:03:33Z", "type": "commit"}, {"oid": "7855775d5faf6994753cb3ad641232ba033e7c96", "url": "https://github.com/bakdata/conquery/commit/7855775d5faf6994753cb3ad641232ba033e7c96", "message": "cleanup away from default methods in interface", "committedDate": "2020-07-03T15:03:51Z", "type": "commit"}, {"oid": "84f53ac391759780e6fb62b5f42a13f542bf2101", "url": "https://github.com/bakdata/conquery/commit/84f53ac391759780e6fb62b5f42a13f542bf2101", "message": "Merge branch 'develop' into feature/not-included-as-list", "committedDate": "2020-07-03T15:04:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEzNjQ5Ng==", "url": "https://github.com/bakdata/conquery/pull/1255#discussion_r454136496", "bodyText": "Ich wei\u00df, das war vorher schon so, aber macht es Sinn hier true zur\u00fcck zugeben?", "author": "thoniTUB", "createdAt": "2020-07-14T06:41:55Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/results/FailedEntityResult.java", "diffHunk": "@@ -20,7 +20,12 @@\n \tpublic boolean isFailed() {\n \t\treturn true;\n \t}\n-\t\n+\n+\t@Override\n+\tpublic boolean isContained() {\n+\t\treturn true;", "originalCommit": "84f53ac391759780e6fb62b5f42a13f542bf2101", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3MjcwMA==", "url": "https://github.com/bakdata/conquery/pull/1255#discussion_r454172700", "bodyText": "Gute Frage. So wie ich es umgesetzt habe schon aber das kann man ja auch anders l\u00f6sen.", "author": "awildturtok", "createdAt": "2020-07-14T07:55:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEzNjQ5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "519cd981e20bfb9657234ad91e140e5904fcca20", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/query/results/FailedEntityResult.java b/backend/src/main/java/com/bakdata/conquery/models/query/results/FailedEntityResult.java\nindex 7b5518d84..a537d4f89 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/query/results/FailedEntityResult.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/query/results/FailedEntityResult.java\n\n@@ -23,7 +23,7 @@ public class FailedEntityResult implements SinglelineEntityResult {\n \n \t@Override\n \tpublic boolean isContained() {\n-\t\treturn true;\n+\t\treturn false;\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEzNzkxMQ==", "url": "https://github.com/bakdata/conquery/pull/1255#discussion_r454137911", "bodyText": "Warum nicht\nlog.error(\"Failed query {}\", queryId, e);", "author": "thoniTUB", "createdAt": "2020-07-14T06:45:17Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/results/ShardResult.java", "diffHunk": "@@ -43,14 +44,26 @@ public synchronized void addResult(EntityResult result) {\n \t}\n \n \tpublic synchronized void finish() {\n-\t\tif(finishTime == null) {\n-\t\t\ttry {\n-\t\t\t\tresults = new ArrayList<>(Uninterruptibles.getUninterruptibly(future));\n-\t\t\t\tfinishTime = LocalDateTime.now();\n-\t\t\t\tlog.info(\"Finished query {} with {} results within {}\", queryId, results.size(), Duration.between(startTime, finishTime));\n-\t\t\t} catch (ExecutionException e) {\n-\t\t\t\tlog.error(\"Failed query \"+queryId, e);\n+\t\tif (finishTime != null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tfinal List<EntityResult> entityResults = Uninterruptibles.getUninterruptibly(future);\n+\t\t\tresults = new ArrayList<>(entityResults.size());\n+\n+\t\t\tfor (EntityResult entityResult : entityResults) {\n+\t\t\t\tif (!entityResult.isContained()){\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tresults.add(entityResult);\n \t\t\t}\n+\n+\t\t\tfinishTime = LocalDateTime.now();\n+\t\t\tlog.info(\"Finished query {} with {} results within {}\", queryId, results.size(), Duration.between(startTime, finishTime));\n+\t\t} catch (ExecutionException e) {\n+\t\t\tlog.error(\"Failed query \"+queryId, e);", "originalCommit": "84f53ac391759780e6fb62b5f42a13f542bf2101", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "519cd981e20bfb9657234ad91e140e5904fcca20", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/query/results/ShardResult.java b/backend/src/main/java/com/bakdata/conquery/models/query/results/ShardResult.java\nindex da53c6975..1cbc8ab89 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/query/results/ShardResult.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/query/results/ShardResult.java\n\n@@ -52,8 +52,15 @@ public class ShardResult {\n \t\t\tfinal List<EntityResult> entityResults = Uninterruptibles.getUninterruptibly(future);\n \t\t\tresults = new ArrayList<>(entityResults.size());\n \n+\t\t\t// Filter the results, skipping not contained results and sending failed results when they appear.\n \t\t\tfor (EntityResult entityResult : entityResults) {\n-\t\t\t\tif (!entityResult.isContained()){\n+\t\t\t\t// If any Entity breaks the Execution the whole Query is invalid and we abort anyway.\n+\t\t\t\tif(entityResult.isFailed()) {\n+\t\t\t\t\tresults.clear();\n+\t\t\t\t\tresults.add(entityResult);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\telse if (!entityResult.isContained()){\n \t\t\t\t\tcontinue;\n \t\t\t\t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE0MDM2OQ==", "url": "https://github.com/bakdata/conquery/pull/1255#discussion_r454140369", "bodyText": "Ich bin mir nicht ganz sicher ob das einfach so mit FormQueryPlan geht. So weit ich das verstanden habe braucht dieser die Information \u00fcber NOT_CONTAINED, um leere Zeilen zu erzeugen.", "author": "thoniTUB", "createdAt": "2020-07-14T06:50:37Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/results/ShardResult.java", "diffHunk": "@@ -43,14 +44,26 @@ public synchronized void addResult(EntityResult result) {\n \t}\n \n \tpublic synchronized void finish() {\n-\t\tif(finishTime == null) {\n-\t\t\ttry {\n-\t\t\t\tresults = new ArrayList<>(Uninterruptibles.getUninterruptibly(future));\n-\t\t\t\tfinishTime = LocalDateTime.now();\n-\t\t\t\tlog.info(\"Finished query {} with {} results within {}\", queryId, results.size(), Duration.between(startTime, finishTime));\n-\t\t\t} catch (ExecutionException e) {\n-\t\t\t\tlog.error(\"Failed query \"+queryId, e);\n+\t\tif (finishTime != null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tfinal List<EntityResult> entityResults = Uninterruptibles.getUninterruptibly(future);\n+\t\t\tresults = new ArrayList<>(entityResults.size());\n+\n+\t\t\tfor (EntityResult entityResult : entityResults) {\n+\t\t\t\tif (!entityResult.isContained()){", "originalCommit": "84f53ac391759780e6fb62b5f42a13f542bf2101", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2OTk1Ng==", "url": "https://github.com/bakdata/conquery/pull/1255#discussion_r454169956", "bodyText": "Das hier ist erst beim zur\u00fccksenden der Ergenisse. Innerhalb einer Entity/Ausf\u00fchrung bleibt das erhalten also sollte das passen.", "author": "awildturtok", "createdAt": "2020-07-14T07:50:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE0MDM2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "519cd981e20bfb9657234ad91e140e5904fcca20", "chunk": "diff --git a/backend/src/main/java/com/bakdata/conquery/models/query/results/ShardResult.java b/backend/src/main/java/com/bakdata/conquery/models/query/results/ShardResult.java\nindex da53c6975..1cbc8ab89 100644\n--- a/backend/src/main/java/com/bakdata/conquery/models/query/results/ShardResult.java\n+++ b/backend/src/main/java/com/bakdata/conquery/models/query/results/ShardResult.java\n\n@@ -52,8 +52,15 @@ public class ShardResult {\n \t\t\tfinal List<EntityResult> entityResults = Uninterruptibles.getUninterruptibly(future);\n \t\t\tresults = new ArrayList<>(entityResults.size());\n \n+\t\t\t// Filter the results, skipping not contained results and sending failed results when they appear.\n \t\t\tfor (EntityResult entityResult : entityResults) {\n-\t\t\t\tif (!entityResult.isContained()){\n+\t\t\t\t// If any Entity breaks the Execution the whole Query is invalid and we abort anyway.\n+\t\t\t\tif(entityResult.isFailed()) {\n+\t\t\t\t\tresults.clear();\n+\t\t\t\t\tresults.add(entityResult);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\telse if (!entityResult.isContained()){\n \t\t\t\t\tcontinue;\n \t\t\t\t}\n \n"}}, {"oid": "519cd981e20bfb9657234ad91e140e5904fcca20", "url": "https://github.com/bakdata/conquery/commit/519cd981e20bfb9657234ad91e140e5904fcca20", "message": "cleaner handling of FailedEntityResult / EntityResult::isFailed", "committedDate": "2020-07-14T09:01:54Z", "type": "commit"}, {"oid": "0c48dcf2d2ee3d7878953574b2f119db389297d0", "url": "https://github.com/bakdata/conquery/commit/0c48dcf2d2ee3d7878953574b2f119db389297d0", "message": "Merge branch 'develop' into feature/not-included-as-list", "committedDate": "2020-07-15T14:53:46Z", "type": "commit"}]}