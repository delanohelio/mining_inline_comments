{"pr_number": 3130, "pr_title": "Updates versions, most notably Armeria", "pr_createdAt": "2020-06-30T12:20:03Z", "pr_url": "https://github.com/openzipkin/zipkin/pull/3130", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzOTM5Mg==", "url": "https://github.com/openzipkin/zipkin/pull/3130#discussion_r447639392", "bodyText": "I might have misunderstood line/armeria#2837 (comment) by @trustin or maybe the two tests below mentioning TODO are drifting for a different reason", "author": "codefromthecrypt", "createdAt": "2020-06-30T12:21:14Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java", "diffHunk": "@@ -60,32 +59,10 @@\n   EndpointGroup getEndpoint() {\n     EndpointGroup initial = initialEndpoints.get();\n     // Only health-check when there are alternative endpoints. There aren't when instanceof Endpoint\n-    if (initial instanceof Endpoint) return initial;\n+    if (initial instanceof Endpoint || !healthCheck.isEnabled()) return initial;\n \n     // Wrap the result when health checking is enabled.\n-    EndpointGroup result = initial;", "originalCommit": "49d883fcedee6c427108dd3365179ce1d1838723", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3MTkxOA==", "url": "https://github.com/openzipkin/zipkin/pull/3130#discussion_r448071918", "bodyText": "with or without this change, the health check code doesn't work anymore. for example, if I revert it, one of the tests that checks that a server can blip off -> on .. that one fails on the on part.", "author": "codefromthecrypt", "createdAt": "2020-07-01T01:52:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzOTM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NDcwNw==", "url": "https://github.com/openzipkin/zipkin/pull/3130#discussion_r448074707", "bodyText": "This change itself looks like what I'd expect after the async endpoint selection change. Perhaps a timing issue that needs to tweak the timeouts in the test with this change added, or possibly a bug introduced? /cc @trustin", "author": "anuraaga", "createdAt": "2020-07-01T02:03:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzOTM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NjE0NQ==", "url": "https://github.com/openzipkin/zipkin/pull/3130#discussion_r448076145", "bodyText": "Would you try to increase the connect timeout of the client factory?\nClientFactory.builder()\n             .channelOption(ChannelOption.CONNECT_TIMEOUT_MILLIS, ...)\n             ...\n             .build()", "author": "trustin", "createdAt": "2020-07-01T02:09:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzOTM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3Nzg3MA==", "url": "https://github.com/openzipkin/zipkin/pull/3130#discussion_r448077870", "bodyText": "we currently set like this..\n    // Elasticsearch 7 never returns a response when receiving an HTTP/2 preface instead of the more\n    // valid behavior of returning a bad request response, so we can't use the preface.\n    // TODO: find or raise a bug with Elastic\n    return builder.useHttp2Preface(false)\n      .connectTimeoutMillis(es.getTimeout())\n      .meterRegistry(meterRegistry)\n      .build();\nThe unit test value for timeout is 200ms\nThe following test fails\n  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n\n      // Health check interval is 100ms\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      // Health check interval is 100ms\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse()); <<< this never becomes false!\n    }\n  }", "author": "codefromthecrypt", "createdAt": "2020-07-01T02:15:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzOTM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3ODI1OQ==", "url": "https://github.com/openzipkin/zipkin/pull/3130#discussion_r448078259", "bodyText": "This is the other that fails\n  // TODO: FIXME\n  @Test public void healthyThenNotHealthyThenHealthy() {\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isTrue();\n\n      server1Health.setHealthy(false);\n      server2Health.setHealthy(false);\n\n      // Health check interval is 100ms\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse()); <<< this never becomes false\n\n      server1Health.setHealthy(true);\n\n      // Health check interval is 100ms\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n    }\n  }", "author": "codefromthecrypt", "createdAt": "2020-07-01T02:17:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzOTM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3ODYxNg==", "url": "https://github.com/openzipkin/zipkin/pull/3130#discussion_r448078616", "bodyText": "there could be a red herring also.. if for example the mocks act differently than before.. running ITElasticsearchHealthCheck on this branch should fail on those two tests\n  static final SettableHealthChecker server1Health = new SettableHealthChecker(true);\n\n  @ClassRule public static ServerRule server1 = new ServerRule() {\n    @Override protected void configure(ServerBuilder sb) {\n      sb.service(\"/\", (ctx, req) -> VERSION_RESPONSE.toHttpResponse());\n      sb.service(\"/_cluster/health\", HealthCheckService.of(server1Health));\n      sb.serviceUnder(\"/_cluster/health/\", (ctx, req) -> GREEN_RESPONSE.toHttpResponse());\n    }\n  };\n\n  static final SettableHealthChecker server2Health = new SettableHealthChecker(true);\n\n  @ClassRule public static ServerRule server2 = new ServerRule() {\n    @Override protected void configure(ServerBuilder sb) {\n      sb.service(\"/\", (ctx, req) -> VERSION_RESPONSE.toHttpResponse());\n      sb.service(\"/_cluster/health\", HealthCheckService.of(server2Health));\n      sb.serviceUnder(\"/_cluster/health/\", (ctx, req) -> GREEN_RESPONSE.toHttpResponse());\n    }\n  };", "author": "codefromthecrypt", "createdAt": "2020-07-01T02:19:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzOTM5Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzOTgyNw==", "url": "https://github.com/openzipkin/zipkin/pull/3130#discussion_r447639827", "bodyText": "current image is busted per #3129", "author": "codefromthecrypt", "createdAt": "2020-06-30T12:22:06Z", "path": "zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java", "diffHunk": "@@ -20,7 +20,7 @@\n class ITElasticsearchStorageV7 extends ITElasticsearchStorage {\n \n   @RegisterExtension ElasticsearchStorageExtension backend = new ElasticsearchStorageExtension(\n-    \"openzipkin/zipkin-elasticsearch7:2.21.4\");", "originalCommit": "49d883fcedee6c427108dd3365179ce1d1838723", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3MzA1MQ==", "url": "https://github.com/openzipkin/zipkin/pull/3130#discussion_r448073051", "bodyText": "Not sure if you're looking to do larger cleanup but you can use PooledWebClient.of(httpClient) to have a PooledWebClient where all the methods return Pooled*Response", "author": "anuraaga", "createdAt": "2020-07-01T01:56:42Z", "path": "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java", "diffHunk": "@@ -143,14 +145,13 @@ public Factory(WebClient httpClient) {\n \n   final WebClient httpClient;\n \n-  volatile CompletableFuture<AggregatedHttpResponse> responseFuture;\n+  volatile CompletableFuture<PooledAggregatedHttpResponse> responseFuture;\n \n   HttpCall(WebClient httpClient, RequestSupplier request, BodyConverter<V> bodyConverter,\n     String name) {\n     this.httpClient = httpClient;", "originalCommit": "49d883fcedee6c427108dd3365179ce1d1838723", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0OTUyMg==", "url": "https://github.com/openzipkin/zipkin/pull/3130#discussion_r449549522", "bodyText": "good idea. thanks!", "author": "codefromthecrypt", "createdAt": "2020-07-03T12:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3MzA1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "358c11153c8fa7ec307fbfb04e0d365824968b1a", "chunk": "diff --git a/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java b/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java\nindex 86f583f27..f3c6b596a 100644\n--- a/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java\n+++ b/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java\n\n@@ -143,11 +143,11 @@ public final class HttpCall<V> extends Call.Base<V> {\n   final BodyConverter<V> bodyConverter;\n   final String name;\n \n-  final WebClient httpClient;\n+  final PooledWebClient httpClient;\n \n   volatile CompletableFuture<PooledAggregatedHttpResponse> responseFuture;\n \n-  HttpCall(WebClient httpClient, RequestSupplier request, BodyConverter<V> bodyConverter,\n+  HttpCall(PooledWebClient httpClient, RequestSupplier request, BodyConverter<V> bodyConverter,\n     String name) {\n     this.httpClient = httpClient;\n     this.name = name;\n"}}, {"oid": "b42528b6fa6f79ed8a7995ef887e0dd2155dfaeb", "url": "https://github.com/openzipkin/zipkin/commit/b42528b6fa6f79ed8a7995ef887e0dd2155dfaeb", "message": "WIP: latest armeria", "committedDate": "2020-07-01T06:12:51Z", "type": "forcePushed"}, {"oid": "f8dccf1701c1b8c1adcc65b0570db36a0625eb3f", "url": "https://github.com/openzipkin/zipkin/commit/f8dccf1701c1b8c1adcc65b0570db36a0625eb3f", "message": "use snapshots", "committedDate": "2020-07-01T09:52:47Z", "type": "forcePushed"}, {"oid": "3a5f292bb17ada683d47fcb1bdd1865fe8b14002", "url": "https://github.com/openzipkin/zipkin/commit/3a5f292bb17ada683d47fcb1bdd1865fe8b14002", "message": "Updates versions, most notably Armeria", "committedDate": "2020-07-03T12:04:13Z", "type": "commit"}, {"oid": "3a5f292bb17ada683d47fcb1bdd1865fe8b14002", "url": "https://github.com/openzipkin/zipkin/commit/3a5f292bb17ada683d47fcb1bdd1865fe8b14002", "message": "Updates versions, most notably Armeria", "committedDate": "2020-07-03T12:04:13Z", "type": "forcePushed"}, {"oid": "358c11153c8fa7ec307fbfb04e0d365824968b1a", "url": "https://github.com/openzipkin/zipkin/commit/358c11153c8fa7ec307fbfb04e0d365824968b1a", "message": "ore clean", "committedDate": "2020-07-03T12:07:39Z", "type": "commit"}, {"oid": "0079dbb8623d61539f7dc7d3fda88213c9461ec1", "url": "https://github.com/openzipkin/zipkin/commit/0079dbb8623d61539f7dc7d3fda88213c9461ec1", "message": "drift", "committedDate": "2020-07-03T12:25:14Z", "type": "commit"}, {"oid": "ac1960bd7ef9a6e68c8da9c064cbad705c766392", "url": "https://github.com/openzipkin/zipkin/commit/ac1960bd7ef9a6e68c8da9c064cbad705c766392", "message": "mock drift", "committedDate": "2020-07-03T13:15:49Z", "type": "commit"}]}