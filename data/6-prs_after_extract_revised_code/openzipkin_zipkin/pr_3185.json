{"pr_number": 3185, "pr_title": "Composable index templates for ES 7.8", "pr_createdAt": "2020-08-22T21:40:38Z", "pr_url": "https://github.com/openzipkin/zipkin/pull/3185", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MDI0MA==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r475150240", "bodyText": "beginTemplate", "author": "codefromthecrypt", "createdAt": "2020-08-22T23:51:07Z", "path": "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java", "diffHunk": "@@ -66,10 +67,35 @@ String indexProperties(float version) {\n     return result + \",\\n    \\\"index.mapper.dynamic\\\": false\\n\";\n   }\n \n+  String indexTemplate(float version) {\n+    if (version >= 7.8f) {\n+      return \"\\\"template\\\": {\\n\";\n+    }\n+\n+    return \"\";\n+  }\n+\n+  String indexTemplateClosing(float version) {\n+    if (version >= 7.8f) {\n+      return \"},\\n\";\n+    }\n+\n+    return \"\";\n+  }\n+\n+  String templatePriority(float version) {\n+    if (version >= 7.8f) {\n+      return \"\\\"priority\\\": \" + templatePriority + \"\\n\";\n+    }\n+\n+    return \"\";\n+  }\n+\n   /** Templatized due to version differences. Only fields used in search are declared */\n   String spanIndexTemplate(float version) {\n     String result = \"{\\n\"\n       + \"  \" + indexPattern(TYPE_SPAN, version) + \",\\n\"\n+      + indexTemplate(version)", "originalCommit": "c3cf8028b2d73cca9dbb6d377d92680a76c2895b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3591b6f45d7794108e3f5b72d48edb3e3ab36cc7", "chunk": "diff --git a/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java b/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java\nindex 79050b1eb..6385b8566 100644\n--- a/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java\n+++ b/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java\n\n@@ -91,13 +91,23 @@ final class VersionSpecificTemplates {\n     return \"\";\n   }\n \n-  /** Templatized due to version differences. Only fields used in search are declared */\n-  String spanIndexTemplate(float version) {\n-    String result = \"{\\n\"\n-      + \"  \" + indexPattern(TYPE_SPAN, version) + \",\\n\"\n+  String beginTemplate(String type, float version) {\n+    return \"{\\n\"\n+      + \"  \" + indexPattern(type, version) + \",\\n\"\n       + indexTemplate(version)\n       + \"  \\\"settings\\\": {\\n\"\n       + indexProperties(version);\n+  }\n+\n+  String endTemplate(float version) {\n+    return indexTemplateClosing(version)\n+      + templatePriority(version)\n+      + \"}\";\n+  }\n+\n+  /** Templatized due to version differences. Only fields used in search are declared */\n+  String spanIndexTemplate(float version) {\n+    String result = beginTemplate(TYPE_SPAN, version);\n \n     String traceIdMapping = KEYWORD;\n     if (!strictTraceId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MDI2Mg==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r475150262", "bodyText": "squash this and below into endTemplate as it is distracting to add template priority here when sometimes there's no template anyway.", "author": "codefromthecrypt", "createdAt": "2020-08-22T23:52:06Z", "path": "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java", "diffHunk": "@@ -141,6 +167,8 @@ String spanIndexTemplate(float version) {\n         + \"      \\\"_q\\\": \" + KEYWORD + \"\\n\"\n         + \"    }\\n\")\n         + \"  }\\n\"\n+        + indexTemplateClosing(version)", "originalCommit": "c3cf8028b2d73cca9dbb6d377d92680a76c2895b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3591b6f45d7794108e3f5b72d48edb3e3ab36cc7", "chunk": "diff --git a/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java b/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java\nindex 79050b1eb..6385b8566 100644\n--- a/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java\n+++ b/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java\n\n@@ -167,9 +177,7 @@ final class VersionSpecificTemplates {\n         + \"      \\\"_q\\\": \" + KEYWORD + \"\\n\"\n         + \"    }\\n\")\n         + \"  }\\n\"\n-        + indexTemplateClosing(version)\n-        + templatePriority(version)\n-        + \"}\");\n+        + endTemplate(version));\n     }\n     return result\n       + (\"  \\\"mappings\\\": {\\n\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MDMzOA==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r475150338", "bodyText": "sorry I don't understand what is special checked here, as unless blind, I would expect the same to pass before 7.8?\nIn any case, if we are verifying these are legacy, we should mention that in the test name or description, as currently the name doesn't seem to suggest what we are looking at (unless I miss something)", "author": "codefromthecrypt", "createdAt": "2020-08-22T23:53:19Z", "path": "zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/ElasticsearchStorageTest.java", "diffHunk": "@@ -199,6 +199,26 @@\n       String.format(\"ElasticsearchStorage{initialEndpoints=%s, index=zipkin}\", server.httpUri()));\n   }\n \n+  @Test void check_composable_indexTemplate() throws Exception {\n+    server.enqueue(AggregatedHttpResponse.of(\n+      HttpStatus.OK, MediaType.JSON_UTF_8, \"{\\\"version\\\":{\\\"number\\\":\\\"7.8.0\\\"}}\"));\n+    server.enqueue(SUCCESS_RESPONSE); // get span template\n+    server.enqueue(SUCCESS_RESPONSE); // get dependency template\n+    server.enqueue(SUCCESS_RESPONSE); // get autocomplete template\n+    server.enqueue(SUCCESS_RESPONSE); // cluster health\n+\n+    storage.check();\n+\n+    server.takeRequest(); // get version\n+\n+    assertThat(server.takeRequest().request().path()) // get span template", "originalCommit": "c3cf8028b2d73cca9dbb6d377d92680a76c2895b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE4ODU4Mw==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r475188583", "bodyText": "Hi,\nThis test is for checking that Zipkin uses resource path of \"/_index_template/....\", as opposed to \"/_template/...\", for ES >= 7.8 when creating index templates. I can remove it if it's not needed. Or I can change test name (or add comment) for it to be more descriptive.", "author": "ccharnkij", "createdAt": "2020-08-23T08:13:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MDMzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI4OTMwNw==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r475289307", "bodyText": "yeah you can clarify with comment why it is important _index_template as I believe in some cases it worked before with _template. composable is a bit jargon to a passer-by.", "author": "codefromthecrypt", "createdAt": "2020-08-24T00:35:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MDMzOA=="}], "type": "inlineReview", "revised_code": {"commit": "3591b6f45d7794108e3f5b72d48edb3e3ab36cc7", "chunk": "diff --git a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/ElasticsearchStorageTest.java b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/ElasticsearchStorageTest.java\nindex e6a8ddc17..d30dafafe 100644\n--- a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/ElasticsearchStorageTest.java\n+++ b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/ElasticsearchStorageTest.java\n\n@@ -199,7 +199,11 @@ class ElasticsearchStorageTest {\n       String.format(\"ElasticsearchStorage{initialEndpoints=%s, index=zipkin}\", server.httpUri()));\n   }\n \n-  @Test void check_composable_indexTemplate() throws Exception {\n+  /**\n+   * Ensure that Zipkin uses the correct resource path of /_index_template when creating index\n+   * template for ES >= 7.8, as opposed to ES < 7.8 that uses /_template/\n+   */\n+  @Test void check_create_composable_indexTemplate_resourcePath() throws Exception {\n     server.enqueue(AggregatedHttpResponse.of(\n       HttpStatus.OK, MediaType.JSON_UTF_8, \"{\\\"version\\\":{\\\"number\\\":\\\"7.8.0\\\"}}\"));\n     server.enqueue(SUCCESS_RESPONSE); // get span template\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MDM5MA==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r475150390", "bodyText": "nice. I suppose at some point we should switch this assert to json path, but works for me.", "author": "codefromthecrypt", "createdAt": "2020-08-22T23:54:16Z", "path": "zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/VersionSpecificTemplatesTest.java", "diffHunk": "@@ -107,6 +107,24 @@\n       + \"  }\");\n   }\n \n+  @Test void version78() {\n+    IndexTemplates template = storage.versionSpecificTemplates(7.8f);\n+\n+    assertThat(template.version()).isEqualTo(7.8f);\n+    assertThat(template.autocomplete())\n+      .withFailMessage(\"Starting at v7.x, we delimit index and type with hyphen\")\n+      .contains(\"\\\"index_patterns\\\": \\\"zipkin-autocomplete-*\\\"\");\n+    assertThat(template.span())\n+      .contains(\"\\\"template\\\": {\\n\")", "originalCommit": "c3cf8028b2d73cca9dbb6d377d92680a76c2895b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a45de4126b6d5403dc7c12a83667490fbb19b85", "chunk": "diff --git a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/VersionSpecificTemplatesTest.java b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/VersionSpecificTemplatesTest.java\nindex c108d749e..04cd3bd7c 100644\n--- a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/VersionSpecificTemplatesTest.java\n+++ b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/VersionSpecificTemplatesTest.java\n\n@@ -125,6 +125,24 @@ class VersionSpecificTemplatesTest {\n       .contains(\"\\\"priority\\\": 0\\n\");\n   }\n \n+  @Test void version79() {\n+    IndexTemplates template = storage.versionSpecificTemplates(7.9f);\n+\n+    assertThat(template.version()).isEqualTo(7.9f);\n+    assertThat(template.autocomplete())\n+      .withFailMessage(\"Starting at v7.x, we delimit index and type with hyphen\")\n+      .contains(\"\\\"index_patterns\\\": \\\"zipkin-autocomplete-*\\\"\");\n+    assertThat(template.span())\n+      .contains(\"\\\"template\\\": {\\n\")\n+      .contains(\"\\\"priority\\\": 0\\n\");\n+    assertThat(template.autocomplete())\n+      .contains(\"\\\"template\\\": {\\n\")\n+      .contains(\"\\\"priority\\\": 0\\n\");\n+    assertThat(template.dependency())\n+      .contains(\"\\\"template\\\": {\\n\")\n+      .contains(\"\\\"priority\\\": 0\\n\");\n+  }\n+\n   @Test void searchEnabled_minimalSpanIndexing_6x() {\n     storage.close();\n     storage = ElasticsearchStorage.newBuilder(() -> mock(WebClient.class))\n"}}, {"oid": "3591b6f45d7794108e3f5b72d48edb3e3ab36cc7", "url": "https://github.com/openzipkin/zipkin/commit/3591b6f45d7794108e3f5b72d48edb3e3ab36cc7", "message": "Composable index templates for ES 7.8", "committedDate": "2020-08-24T07:25:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ1MDc3NA==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r475450774", "bodyText": "this comment doesn't belong. probably you want to say // highest priority", "author": "codefromthecrypt", "createdAt": "2020-08-24T09:12:07Z", "path": "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java", "diffHunk": "@@ -88,7 +88,8 @@ public static Builder newBuilder(LazyHttpClient lazyHttpClient) {\n       .flushOnWrites(false)\n       .autocompleteKeys(Collections.emptyList())\n       .autocompleteTtl((int) TimeUnit.HOURS.toMillis(1))\n-      .autocompleteCardinality(5 * 4000); // Ex. 5 site tags with cardinality 4000 each\n+      .autocompleteCardinality(5 * 4000)\n+      .templatePriority(\"0\"); // Ex. 5 site tags with cardinality 4000 each", "originalCommit": "3591b6f45d7794108e3f5b72d48edb3e3ab36cc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a45de4126b6d5403dc7c12a83667490fbb19b85", "chunk": "diff --git a/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java b/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java\nindex d41d232f6..2747aa532 100644\n--- a/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java\n+++ b/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java\n\n@@ -88,8 +88,8 @@ public abstract class ElasticsearchStorage extends zipkin2.storage.StorageCompon\n       .flushOnWrites(false)\n       .autocompleteKeys(Collections.emptyList())\n       .autocompleteTtl((int) TimeUnit.HOURS.toMillis(1))\n-      .autocompleteCardinality(5 * 4000)\n-      .templatePriority(\"0\"); // Ex. 5 site tags with cardinality 4000 each\n+      .autocompleteCardinality(5 * 4000) // Ex. 5 site tags with cardinality 4000 each\n+      .templatePriority(\"0\");\n   }\n \n   abstract Builder toBuilder();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ1MTIyNQ==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r475451225", "bodyText": "for example, eaisiest way is to change this to 7.9", "author": "codefromthecrypt", "createdAt": "2020-08-24T09:12:55Z", "path": "zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/ElasticsearchStorageTest.java", "diffHunk": "@@ -199,6 +199,30 @@\n       String.format(\"ElasticsearchStorage{initialEndpoints=%s, index=zipkin}\", server.httpUri()));\n   }\n \n+  /**\n+   * Ensure that Zipkin uses the correct resource path of /_index_template when creating index\n+   * template for ES >= 7.8, as opposed to ES < 7.8 that uses /_template/\n+   */\n+  @Test void check_create_composable_indexTemplate_resourcePath() throws Exception {\n+    server.enqueue(AggregatedHttpResponse.of(\n+      HttpStatus.OK, MediaType.JSON_UTF_8, \"{\\\"version\\\":{\\\"number\\\":\\\"7.8.0\\\"}}\"));", "originalCommit": "3591b6f45d7794108e3f5b72d48edb3e3ab36cc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a45de4126b6d5403dc7c12a83667490fbb19b85", "chunk": "diff --git a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/ElasticsearchStorageTest.java b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/ElasticsearchStorageTest.java\nindex d30dafafe..904bb29d7 100644\n--- a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/ElasticsearchStorageTest.java\n+++ b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/ElasticsearchStorageTest.java\n\n@@ -201,9 +201,9 @@ class ElasticsearchStorageTest {\n \n   /**\n    * Ensure that Zipkin uses the correct resource path of /_index_template when creating index\n-   * template for ES >= 7.8, as opposed to ES < 7.8 that uses /_template/\n+   * template for ES 7.8, as opposed to ES < 7.8 that uses /_template/\n    */\n-  @Test void check_create_composable_indexTemplate_resourcePath() throws Exception {\n+  @Test void check_create_composable_indexTemplate_resourcePath_version78() throws Exception {\n     server.enqueue(AggregatedHttpResponse.of(\n       HttpStatus.OK, MediaType.JSON_UTF_8, \"{\\\"version\\\":{\\\"number\\\":\\\"7.8.0\\\"}}\"));\n     server.enqueue(SUCCESS_RESPONSE); // get span template\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ1MTUyNQ==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r475451525", "bodyText": "if using square formatter it will expand wildcard imports", "author": "codefromthecrypt", "createdAt": "2020-08-24T09:13:27Z", "path": "zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java", "diffHunk": "@@ -13,8 +13,14 @@\n  */\n package zipkin2.elasticsearch.integration;\n \n+import com.linecorp.armeria.common.*;", "originalCommit": "3591b6f45d7794108e3f5b72d48edb3e3ab36cc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a45de4126b6d5403dc7c12a83667490fbb19b85", "chunk": "diff --git a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java\nindex 8520577ff..81ee6dfd3 100644\n--- a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java\n+++ b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java\n\n@@ -13,14 +13,8 @@\n  */\n package zipkin2.elasticsearch.integration;\n \n-import com.linecorp.armeria.common.*;\n-import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.TestInstance;\n import org.junit.jupiter.api.extension.RegisterExtension;\n-import zipkin2.elasticsearch.ElasticsearchStorage;\n-import zipkin2.elasticsearch.internal.Internal;\n-\n-import java.io.IOException;\n \n @TestInstance(TestInstance.Lifecycle.PER_CLASS)\n class ITElasticsearchStorageV7 extends ITElasticsearchStorage {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ1MTYzNQ==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r475451635", "bodyText": "maybe revert this as it effects all tests.. that or comment why.", "author": "codefromthecrypt", "createdAt": "2020-08-24T09:13:40Z", "path": "zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ElasticsearchStorageExtension.java", "diffHunk": "@@ -116,6 +116,7 @@ Builder computeStorageBuilder() {\n     WebClient client = builder.build();\n     return ElasticsearchStorage.newBuilder(() -> client)\n       .index(\"zipkin-test\")\n+      .templatePriority(\"10\")", "originalCommit": "3591b6f45d7794108e3f5b72d48edb3e3ab36cc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a45de4126b6d5403dc7c12a83667490fbb19b85", "chunk": "diff --git a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ElasticsearchStorageExtension.java b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ElasticsearchStorageExtension.java\nindex 213f2c32d..fc20eb098 100644\n--- a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ElasticsearchStorageExtension.java\n+++ b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ElasticsearchStorageExtension.java\n\n@@ -116,7 +116,6 @@ class ElasticsearchStorageExtension implements BeforeAllCallback, AfterAllCallba\n     WebClient client = builder.build();\n     return ElasticsearchStorage.newBuilder(() -> client)\n       .index(\"zipkin-test\")\n-      .templatePriority(\"10\")\n       .flushOnWrites(true);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ1MjU2Mg==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r475452562", "bodyText": "should be a separate test instead of a before for everything.", "author": "codefromthecrypt", "createdAt": "2020-08-24T09:15:12Z", "path": "zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java", "diffHunk": "@@ -25,4 +31,40 @@\n   @Override ElasticsearchStorageExtension backend() {\n     return backend;\n   }\n+\n+  /**\n+   * Create a \"catch-all\" index template with the lowest priority prior to running tests to\n+   * ensure that the index templates created during tests with higher priority function as\n+   * designed. Only applicable for ES >= 7.8\n+   */\n+  @BeforeAll void setUpCatchAllTemplate() throws IOException {", "originalCommit": "3591b6f45d7794108e3f5b72d48edb3e3ab36cc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a45de4126b6d5403dc7c12a83667490fbb19b85", "chunk": "diff --git a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java\nindex 8520577ff..81ee6dfd3 100644\n--- a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java\n+++ b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java\n\n@@ -31,40 +25,4 @@ class ITElasticsearchStorageV7 extends ITElasticsearchStorage {\n   @Override ElasticsearchStorageExtension backend() {\n     return backend;\n   }\n-\n-  /**\n-   * Create a \"catch-all\" index template with the lowest priority prior to running tests to\n-   * ensure that the index templates created during tests with higher priority function as\n-   * designed. Only applicable for ES >= 7.8\n-   */\n-  @BeforeAll void setUpCatchAllTemplate() throws IOException {\n-    ElasticsearchStorage es = backend().computeStorageBuilder().build();\n-    if (es.version() >= 7.8f) {\n-      AggregatedHttpRequest updateTemplate = AggregatedHttpRequest.of(\n-        RequestHeaders.of(\n-          HttpMethod.PUT, catchAllIndexPath(), HttpHeaderNames.CONTENT_TYPE, MediaType.JSON_UTF_8),\n-        HttpData.ofUtf8(catchAllTemplate()));\n-      Internal.instance.http(es).newCall(updateTemplate, (parser, contentString) -> null,\n-        \"update-template\").execute();\n-    }\n-  }\n-\n-  String catchAllIndexPath() {\n-    return \"/_index_template/catch-all\";\n-  }\n-\n-  String catchAllTemplate() {\n-    return \"{\\n\"\n-      + \"  \\\"index_patterns\\\" : [\\\"*\\\"],\\n\"\n-      + \"  \\\"priority\\\" : 0,\\n\"\n-      + \"  \\\"template\\\": {\\n\"\n-      + \"    \\\"settings\\\" : {\\n\"\n-      + \"      \\\"number_of_shards\\\" : 1\\n\"\n-      + \"    },\\n\"\n-      + \"    \\\"mappings\\\" : {\\n\"\n-      + \"      \\\"_source\\\" : { \\\"enabled\\\" : true }\\n\"\n-      + \"    }\\n\"\n-      + \"  }\\n\"\n-      + \"}\";\n-  }\n }\n"}}, {"oid": "4a45de4126b6d5403dc7c12a83667490fbb19b85", "url": "https://github.com/openzipkin/zipkin/commit/4a45de4126b6d5403dc7c12a83667490fbb19b85", "message": "Composable index templates for ES 7.8", "committedDate": "2020-08-28T05:18:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3Njk1NA==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r478876954", "bodyText": "I think you can move this to the ITEs7 class?", "author": "codefromthecrypt", "createdAt": "2020-08-28T07:16:57Z", "path": "zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorage.java", "diffHunk": "@@ -114,4 +114,12 @@\n       storage.clear();\n     }\n   }\n+\n+  @Nested\n+  class ITEnsureIndexTemplate extends zipkin2.elasticsearch.integration.ITEnsureIndexTemplate {", "originalCommit": "4a45de4126b6d5403dc7c12a83667490fbb19b85", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1e14495a9739ac692056bfed6d542e70d02c121", "chunk": "diff --git a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorage.java b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorage.java\nindex 04b88b701..d88a741fd 100644\n--- a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorage.java\n+++ b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorage.java\n\n@@ -114,12 +114,4 @@ abstract class ITElasticsearchStorage {\n       storage.clear();\n     }\n   }\n-\n-  @Nested\n-  class ITEnsureIndexTemplate extends zipkin2.elasticsearch.integration.ITEnsureIndexTemplate {\n-    @Override protected ElasticsearchStorage.Builder newStorageBuilder(TestInfo testInfo) {\n-      // Set priority to be higher than the \"catch-all\" index template\n-      return backend().computeStorageBuilder().index(index(testInfo)).templatePriority(\"10\");\n-    }\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3NzM5MA==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r478877390", "bodyText": "with this pinned to the ES 7 IT, you don't need to check version as our image is already this I think right? In this case you can do this in the test method itself", "author": "codefromthecrypt", "createdAt": "2020-08-28T07:18:03Z", "path": "zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.elasticsearch.integration;\n+\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import java.io.IOException;\n+import java.util.List;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+import org.junit.jupiter.api.TestInstance;\n+import zipkin2.CheckResult;\n+import zipkin2.Span;\n+import zipkin2.elasticsearch.ElasticsearchStorage;\n+import zipkin2.elasticsearch.internal.Internal;\n+\n+import static java.util.Arrays.asList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import static zipkin2.TestObjects.LOTS_OF_SPANS;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+abstract class ITEnsureIndexTemplate {\n+\n+  ElasticsearchStorage storage;\n+\n+  /**\n+   * Returns a new {@link ElasticsearchStorage.Builder} for connecting to the backend for the test.\n+   */\n+  protected abstract ElasticsearchStorage.Builder newStorageBuilder(TestInfo testInfo);\n+\n+  @BeforeAll void setUpCatchAllTemplate(TestInfo testInfo) throws IOException {", "originalCommit": "4a45de4126b6d5403dc7c12a83667490fbb19b85", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1e14495a9739ac692056bfed6d542e70d02c121", "chunk": "diff --git a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java\nindex 5a3c345c6..cf08ba1e3 100644\n--- a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java\n+++ b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java\n\n@@ -20,9 +20,6 @@ import com.linecorp.armeria.common.HttpMethod;\n import com.linecorp.armeria.common.MediaType;\n import com.linecorp.armeria.common.RequestHeaders;\n import java.io.IOException;\n-import java.util.List;\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.TestInfo;\n import org.junit.jupiter.api.TestInstance;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3ODEwNQ==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r478878105", "bodyText": "this should be  a \"finally\" of the catchAllTemplateTest as it would only need to be tested once anyway", "author": "codefromthecrypt", "createdAt": "2020-08-28T07:19:41Z", "path": "zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.elasticsearch.integration;\n+\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import java.io.IOException;\n+import java.util.List;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+import org.junit.jupiter.api.TestInstance;\n+import zipkin2.CheckResult;\n+import zipkin2.Span;\n+import zipkin2.elasticsearch.ElasticsearchStorage;\n+import zipkin2.elasticsearch.internal.Internal;\n+\n+import static java.util.Arrays.asList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import static zipkin2.TestObjects.LOTS_OF_SPANS;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+abstract class ITEnsureIndexTemplate {\n+\n+  ElasticsearchStorage storage;\n+\n+  /**\n+   * Returns a new {@link ElasticsearchStorage.Builder} for connecting to the backend for the test.\n+   */\n+  protected abstract ElasticsearchStorage.Builder newStorageBuilder(TestInfo testInfo);\n+\n+  @BeforeAll void setUpCatchAllTemplate(TestInfo testInfo) throws IOException {\n+    ElasticsearchStorage.Builder builder = newStorageBuilder(testInfo);\n+    storage = builder.build();\n+    assumeTrue(storage.version() >= 7.8f, () -> \"Applicable only for ES >= 7.8, skipping test\");\n+\n+    /**\n+     * Delete all index templates in order to create the \"catch-all\" index template, because\n+     * ES does not allow multiple index templates of the same index_patterns and priority\n+     */\n+    deleteIndexTemplate(\"*\");\n+    setUpCatchAllTemplate();\n+  }\n+\n+  @Test void createZipkinIndexTemplate_getTraces_returnsSuccess() throws IOException {\n+    /** Create index template with {@link ElasticsearchStorage#ensureIndexTemplates()} */\n+    CheckResult check = storage.check();\n+\n+    assertThat(check.ok()).isTrue();\n+\n+    List<String> traceIds = asList(LOTS_OF_SPANS[0].traceId(), LOTS_OF_SPANS[1].traceId());\n+    List<Span> spans = asList(LOTS_OF_SPANS[0], LOTS_OF_SPANS[1]);\n+\n+    storage.spanConsumer().accept(spans).execute();\n+\n+    assertThat(storage.traces().getTraces(traceIds).execute())\n+      .containsOnly(asList(LOTS_OF_SPANS[0]), asList(LOTS_OF_SPANS[1]));\n+  }\n+\n+  /**\n+   * Create a \"catch-all\" index template with the lowest priority prior to running tests to\n+   * ensure that the index templates created during tests with higher priority function as\n+   * designed. Only applicable for ES >= 7.8\n+   */\n+  void setUpCatchAllTemplate() throws IOException {\n+    AggregatedHttpRequest updateTemplate = AggregatedHttpRequest.of(\n+      RequestHeaders.of(\n+        HttpMethod.PUT, catchAllIndexPath(), HttpHeaderNames.CONTENT_TYPE, MediaType.JSON_UTF_8),\n+      HttpData.ofUtf8(catchAllTemplate()));\n+    Internal.instance.http(storage).newCall(updateTemplate, (parser, contentString) -> null,\n+      \"update-template\").execute();\n+  }\n+\n+  String catchAllIndexPath() {\n+    return \"/_index_template/catch-all\";\n+  }\n+\n+  String catchAllTemplate() {\n+    return \"{\\n\"\n+      + \"  \\\"index_patterns\\\" : [\\\"*\\\"],\\n\"\n+      + \"  \\\"priority\\\" : 0,\\n\"\n+      + \"  \\\"template\\\": {\\n\"\n+      + \"    \\\"settings\\\" : {\\n\"\n+      + \"      \\\"number_of_shards\\\" : 1\\n\"\n+      + \"    },\\n\"\n+      + \"    \\\"mappings\\\" : {\\n\"\n+      + \"      \\\"_source\\\" : { \\\"enabled\\\" : true }\\n\"\n+      + \"    }\\n\"\n+      + \"  }\\n\"\n+      + \"}\";\n+  }\n+\n+  void deleteIndexTemplate(String pattern) throws IOException {\n+    String url = \"/_index_template/\" + pattern;\n+    AggregatedHttpRequest delete = AggregatedHttpRequest.of(HttpMethod.DELETE, url);\n+    Internal.instance.http(storage)\n+      .newCall(delete, (parser, contentString) -> null, \"delete-index\").execute();\n+  }\n+\n+  /**\n+   * Delete \"catch-all\" index template so it does not interfere with any other test\n+   */\n+  @AfterAll void deleteCatchAllTemplate() throws IOException {", "originalCommit": "4a45de4126b6d5403dc7c12a83667490fbb19b85", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1e14495a9739ac692056bfed6d542e70d02c121", "chunk": "diff --git a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java\nindex 5a3c345c6..cf08ba1e3 100644\n--- a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java\n+++ b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java\n\n@@ -20,9 +20,6 @@ import com.linecorp.armeria.common.HttpMethod;\n import com.linecorp.armeria.common.MediaType;\n import com.linecorp.armeria.common.RequestHeaders;\n import java.io.IOException;\n-import java.util.List;\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.TestInfo;\n import org.junit.jupiter.api.TestInstance;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3ODY5MA==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r478878690", "bodyText": "verify the catch-all template works? you might want to make something more interesting so that you can use ES HTTP query on it. ex this one https://gist.github.com/adriancole/1af1259102e7a2da1b3c9103565165d7", "author": "codefromthecrypt", "createdAt": "2020-08-28T07:20:57Z", "path": "zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.elasticsearch.integration;\n+\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import java.io.IOException;\n+import java.util.List;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+import org.junit.jupiter.api.TestInstance;\n+import zipkin2.CheckResult;\n+import zipkin2.Span;\n+import zipkin2.elasticsearch.ElasticsearchStorage;\n+import zipkin2.elasticsearch.internal.Internal;\n+\n+import static java.util.Arrays.asList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import static zipkin2.TestObjects.LOTS_OF_SPANS;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+abstract class ITEnsureIndexTemplate {\n+\n+  ElasticsearchStorage storage;\n+\n+  /**\n+   * Returns a new {@link ElasticsearchStorage.Builder} for connecting to the backend for the test.\n+   */\n+  protected abstract ElasticsearchStorage.Builder newStorageBuilder(TestInfo testInfo);\n+\n+  @BeforeAll void setUpCatchAllTemplate(TestInfo testInfo) throws IOException {\n+    ElasticsearchStorage.Builder builder = newStorageBuilder(testInfo);\n+    storage = builder.build();\n+    assumeTrue(storage.version() >= 7.8f, () -> \"Applicable only for ES >= 7.8, skipping test\");\n+\n+    /**\n+     * Delete all index templates in order to create the \"catch-all\" index template, because\n+     * ES does not allow multiple index templates of the same index_patterns and priority\n+     */\n+    deleteIndexTemplate(\"*\");\n+    setUpCatchAllTemplate();\n+  }\n+\n+  @Test void createZipkinIndexTemplate_getTraces_returnsSuccess() throws IOException {\n+    /** Create index template with {@link ElasticsearchStorage#ensureIndexTemplates()} */\n+    CheckResult check = storage.check();\n+\n+    assertThat(check.ok()).isTrue();\n+\n+    List<String> traceIds = asList(LOTS_OF_SPANS[0].traceId(), LOTS_OF_SPANS[1].traceId());\n+    List<Span> spans = asList(LOTS_OF_SPANS[0], LOTS_OF_SPANS[1]);\n+\n+    storage.spanConsumer().accept(spans).execute();\n+\n+    assertThat(storage.traces().getTraces(traceIds).execute())", "originalCommit": "4a45de4126b6d5403dc7c12a83667490fbb19b85", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1e14495a9739ac692056bfed6d542e70d02c121", "chunk": "diff --git a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java\nindex 5a3c345c6..cf08ba1e3 100644\n--- a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java\n+++ b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java\n\n@@ -20,9 +20,6 @@ import com.linecorp.armeria.common.HttpMethod;\n import com.linecorp.armeria.common.MediaType;\n import com.linecorp.armeria.common.RequestHeaders;\n import java.io.IOException;\n-import java.util.List;\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.TestInfo;\n import org.junit.jupiter.api.TestInstance;\n"}}, {"oid": "f1e14495a9739ac692056bfed6d542e70d02c121", "url": "https://github.com/openzipkin/zipkin/commit/f1e14495a9739ac692056bfed6d542e70d02c121", "message": "Composable index templates for ES 7.8", "committedDate": "2020-08-29T10:36:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwMzc3MA==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r479703770", "bodyText": "as other tests we add to ITEnsureIndexTemplate won't necessarily effect templatePriority, I would move that setting into the test itself. Then, you can use the same setup as the other tests like this:\n    @Override protected ElasticsearchStorage.Builder newStorageBuilder(TestInfo testInfo) {\n      return backend().computeStorageBuilder().index(index(testInfo));\n    }\n\n    @AfterEach public void clear() throws IOException {\n      storage.clear();\n    }", "author": "codefromthecrypt", "createdAt": "2020-08-30T00:22:24Z", "path": "zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java", "diffHunk": "@@ -25,4 +30,12 @@\n   @Override ElasticsearchStorageExtension backend() {\n     return backend;\n   }\n+\n+  @Nested\n+  class ITEnsureIndexTemplate extends zipkin2.elasticsearch.integration.ITEnsureIndexTemplate {\n+    @Override protected ElasticsearchStorage.Builder newStorageBuilder(TestInfo testInfo) {", "originalCommit": "f1e14495a9739ac692056bfed6d542e70d02c121", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15643801f066015a4fae3a8ae6a3dffc60c8ebe2", "chunk": "diff --git a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java\nindex f1aef594f..9abd5cad3 100644\n--- a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java\n+++ b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java\n\n@@ -35,7 +37,11 @@ class ITElasticsearchStorageV7 extends ITElasticsearchStorage {\n   class ITEnsureIndexTemplate extends zipkin2.elasticsearch.integration.ITEnsureIndexTemplate {\n     @Override protected ElasticsearchStorage.Builder newStorageBuilder(TestInfo testInfo) {\n       // Set priority to be higher than the \"catch-all\" index template\n-      return backend().computeStorageBuilder().index(index(testInfo)).templatePriority(\"10\");\n+      return backend().computeStorageBuilder().index(index(testInfo));\n+    }\n+\n+    @AfterEach public void clear() throws IOException {\n+      storage.clear();\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwMzc3OA==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r479703778", "bodyText": "nit protected not needed in the same package", "author": "codefromthecrypt", "createdAt": "2020-08-30T00:22:39Z", "path": "zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.elasticsearch.integration;\n+\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import java.io.IOException;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+import org.junit.jupiter.api.TestInstance;\n+import zipkin2.CheckResult;\n+import zipkin2.Span;\n+import zipkin2.elasticsearch.ElasticsearchStorage;\n+import zipkin2.elasticsearch.internal.Internal;\n+import zipkin2.storage.QueryRequest;\n+\n+import static java.util.Arrays.asList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static zipkin2.TestObjects.CLIENT_SPAN;\n+import static zipkin2.TestObjects.DAY;\n+import static zipkin2.TestObjects.TODAY;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+abstract class ITEnsureIndexTemplate {\n+\n+  ElasticsearchStorage storage;\n+\n+  /**\n+   * Returns a new {@link ElasticsearchStorage.Builder} for connecting to the backend for the test.\n+   */\n+  protected abstract ElasticsearchStorage.Builder newStorageBuilder(TestInfo testInfo);", "originalCommit": "f1e14495a9739ac692056bfed6d542e70d02c121", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15643801f066015a4fae3a8ae6a3dffc60c8ebe2", "chunk": "diff --git a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java\nindex cf08ba1e3..8379029d1 100644\n--- a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java\n+++ b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java\n\n@@ -43,11 +43,13 @@ abstract class ITEnsureIndexTemplate {\n   /**\n    * Returns a new {@link ElasticsearchStorage.Builder} for connecting to the backend for the test.\n    */\n-  protected abstract ElasticsearchStorage.Builder newStorageBuilder(TestInfo testInfo);\n+  abstract ElasticsearchStorage.Builder newStorageBuilder(TestInfo testInfo);\n \n   @Test void createZipkinIndexTemplate_getTraces_returnsSuccess(TestInfo testInfo) throws IOException {\n     ElasticsearchStorage.Builder builder = newStorageBuilder(testInfo);\n-    storage = builder.build();\n+    storage = builder\n+      .templatePriority(\"10\")\n+      .build();\n \n     try {\n       /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwNDQzNw==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r479704437", "bodyText": "if this is the catch all change you want to make, it would be useful to test that this applies. The test could pass for a subtle reason, then in ES 7.10 it might break and we wouldn't know what it was trying to do either.\nFor this reason, making a template that sets default which I think this does, maybe isn't a good choice.\nInstead try something with semantic value and also relevant in tracing? ex\n  \"mappings\": {\n    \"properties\": {\n      \"tags.http.status_code\": {\n        \"norms\": false,\n        \"type\": \"keyword\"\n      }\n    }\n  }\n\nIn this case, your test can switch from making a fake tag \"queryTest\"->\"ok\"  to a tag very commonly requested  like \"http.status_code\" \"404\"\nThen, you can verify your catch-all worked by using HTTP to do the following (except in java):\ncurl -s 'localhost:9200/zipkin-span-*/_search?q=tags.http.status_code:404'\n\nEx what you are doing is literally verifying automatically this https://gist.github.com/adriancole/1af1259102e7a2da1b3c9103565165d7", "author": "codefromthecrypt", "createdAt": "2020-08-30T00:32:15Z", "path": "zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.elasticsearch.integration;\n+\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import java.io.IOException;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+import org.junit.jupiter.api.TestInstance;\n+import zipkin2.CheckResult;\n+import zipkin2.Span;\n+import zipkin2.elasticsearch.ElasticsearchStorage;\n+import zipkin2.elasticsearch.internal.Internal;\n+import zipkin2.storage.QueryRequest;\n+\n+import static java.util.Arrays.asList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static zipkin2.TestObjects.CLIENT_SPAN;\n+import static zipkin2.TestObjects.DAY;\n+import static zipkin2.TestObjects.TODAY;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+abstract class ITEnsureIndexTemplate {\n+\n+  ElasticsearchStorage storage;\n+\n+  /**\n+   * Returns a new {@link ElasticsearchStorage.Builder} for connecting to the backend for the test.\n+   */\n+  protected abstract ElasticsearchStorage.Builder newStorageBuilder(TestInfo testInfo);\n+\n+  @Test void createZipkinIndexTemplate_getTraces_returnsSuccess(TestInfo testInfo) throws IOException {\n+    ElasticsearchStorage.Builder builder = newStorageBuilder(testInfo);\n+    storage = builder.build();\n+\n+    try {\n+      /**\n+       * Delete all index templates in order to create the \"catch-all\" index template, because\n+       * ES does not allow multiple index templates of the same index_patterns and priority\n+       */\n+      deleteIndexTemplate(\"*\");\n+      setUpCatchAllTemplate();\n+\n+      /** Create index template with {@link ElasticsearchStorage#ensureIndexTemplates()} */\n+      CheckResult check = storage.check();\n+\n+      assertThat(check.ok()).isTrue();\n+\n+      Span span = Span.newBuilder().traceId(CLIENT_SPAN.traceId())\n+        .id(\"1\")\n+        .timestamp(TODAY * 1000L)\n+        .putTag(\"queryTest\", \"ok\")\n+        .build();\n+\n+      storage.spanConsumer().accept(asList(span)).execute();\n+\n+      assertThat(storage.spanStore().getTraces(QueryRequest.newBuilder()\n+        .endTs(TODAY + DAY)\n+        .lookback(DAY * 2)\n+        .limit(10)\n+        .parseAnnotationQuery(\"queryTest=\" + span.tags().get(\"queryTest\"))\n+        .build()).execute())\n+      .flatExtracting(t -> t).containsExactly(span);\n+    }\n+    finally {\n+      /**\n+       * Delete \"catch-all\" index template so it does not interfere with any other test\n+       */\n+      deleteIndexTemplate(\"catch-all\");\n+      storage.close();\n+    }\n+  }\n+\n+  /**\n+   * Create a \"catch-all\" index template with the lowest priority prior to running tests to\n+   * ensure that the index templates created during tests with higher priority function as\n+   * designed. Only applicable for ES >= 7.8\n+   */\n+  void setUpCatchAllTemplate() throws IOException {\n+    AggregatedHttpRequest updateTemplate = AggregatedHttpRequest.of(\n+      RequestHeaders.of(\n+        HttpMethod.PUT, catchAllIndexPath(), HttpHeaderNames.CONTENT_TYPE, MediaType.JSON_UTF_8),\n+      HttpData.ofUtf8(catchAllTemplate()));\n+    Internal.instance.http(storage).newCall(updateTemplate, (parser, contentString) -> null,\n+      \"update-template\").execute();\n+  }\n+\n+  String catchAllIndexPath() {\n+    return \"/_index_template/catch-all\";\n+  }\n+\n+  String catchAllTemplate() {\n+    return \"{\\n\"\n+      + \"  \\\"index_patterns\\\" : [\\\"*\\\"],\\n\"\n+      + \"  \\\"priority\\\" : 0,\\n\"\n+      + \"  \\\"template\\\": {\\n\"\n+      + \"    \\\"settings\\\" : {\\n\"\n+      + \"      \\\"number_of_shards\\\" : 1\\n\"\n+      + \"    },\\n\"\n+      + \"    \\\"mappings\\\" : {\\n\"\n+      + \"      \\\"_source\\\" : { \\\"enabled\\\" : true }\\n\"", "originalCommit": "f1e14495a9739ac692056bfed6d542e70d02c121", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgzNzMzNg==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r479837336", "bodyText": "I don't think the suggested secondary template works anymore, given that ES no longer allows multiple matching index templates of the same priority. ES won't merge templates based on order anymore, and will only select 1 with the highest priority. Multiple index template with matching index patterns and priorities will result in error on PUT of the second index template. So in this case, it's either Zipkin's template or catch-all template, and I can't sneak in tags to zipkin-span-* like that.\nI do see what you mean, though. And if the objective is to test the catch-all, I think I have to use a new index that doesn't match Zipkin's template at all. Thought?", "author": "ccharnkij", "createdAt": "2020-08-31T00:34:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwNDQzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgzODM4Nw==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r479838387", "bodyText": "interesting.. thanks for the info! yeah a comment should say this is the case now ( I remember hints of this in the past from @xeraa ). I do think the default template should meddle with ours in a way that would be obvious then. For example, you could change something we don't set? then read back that it is unset (as opposed to inherited/merged) would that do it?\nmeanwhile, using http in your test is still probably better as it is more realistic data, but yeah I can now expect people who setup multiple templates to have to do an offline merge of them instead of my gist now!", "author": "codefromthecrypt", "createdAt": "2020-08-31T00:42:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwNDQzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgzOTk0NQ==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r479839945", "bodyText": "There are the legacy / v1 templates that can be merged, but I would be careful (multiple templates with the same order will result in a non-deterministic merging order, merging valid templates might lead to an invalid mapping). Right now they are deprecated and we'll see when we'll remove them \u2014 you have at least until 8.0.\nThe new component based approach still allows you to combine multiple pieces, but you don't merge them (to avoid the two problems mentioned above). This feature was only added in 7.8, so I'm not sure what will be the sanest approach for you \u2014 support it in 7.x already or switch over for any (upcoming) 8.x cluster.", "author": "xeraa", "createdAt": "2020-08-31T00:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwNDQzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg0MTQ1Nw==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r479841457", "bodyText": "ok so legacy/v1 would \"for some time\" retain the current behavior. I suppose in this case this means people in-place upgrading continue to work as this logic only applies when the templates don't already exist. cc also @basvanbeek for perspective on your schema tool. This chat will likely outgrow this PR :P\n@ccharnkij for you and to not cage you to this decision tree, I would make a comment to the effect that @xeraa made in point 1. in your unit test and possibly also revise the javadoc/README if doesn't already say this. Basically, this relies on that we are not using legacy/v1 templates, so it is a win, not a merge.\nhence we expect them to not merge. So, as mentioned earlier to show that actually happened (sanity check), have your template override something we don't and then magically notice that after the storage component initializes, whatever that setting is, is now ignored.", "author": "codefromthecrypt", "createdAt": "2020-08-31T01:03:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwNDQzNw=="}], "type": "inlineReview", "revised_code": {"commit": "15643801f066015a4fae3a8ae6a3dffc60c8ebe2", "chunk": "diff --git a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java\nindex cf08ba1e3..8379029d1 100644\n--- a/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java\n+++ b/zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITEnsureIndexTemplate.java\n\n@@ -43,11 +43,13 @@ abstract class ITEnsureIndexTemplate {\n   /**\n    * Returns a new {@link ElasticsearchStorage.Builder} for connecting to the backend for the test.\n    */\n-  protected abstract ElasticsearchStorage.Builder newStorageBuilder(TestInfo testInfo);\n+  abstract ElasticsearchStorage.Builder newStorageBuilder(TestInfo testInfo);\n \n   @Test void createZipkinIndexTemplate_getTraces_returnsSuccess(TestInfo testInfo) throws IOException {\n     ElasticsearchStorage.Builder builder = newStorageBuilder(testInfo);\n-    storage = builder.build();\n+    storage = builder\n+      .templatePriority(\"10\")\n+      .build();\n \n     try {\n       /**\n"}}, {"oid": "15643801f066015a4fae3a8ae6a3dffc60c8ebe2", "url": "https://github.com/openzipkin/zipkin/commit/15643801f066015a4fae3a8ae6a3dffc60c8ebe2", "message": "Composable index templates for ES 7.8", "committedDate": "2020-09-01T04:16:46Z", "type": "forcePushed"}, {"oid": "c36cf3263a7f392561a6fbf3b47415ba0ece81f1", "url": "https://github.com/openzipkin/zipkin/commit/c36cf3263a7f392561a6fbf3b47415ba0ece81f1", "message": "Composable index templates for ES 7.8", "committedDate": "2020-09-02T08:10:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkwOTUwMw==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r481909503", "bodyText": "probably using Zipkin's Nullable for Integer is better, just to prevent a little brain break", "author": "codefromthecrypt", "createdAt": "2020-09-02T08:57:06Z", "path": "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java", "diffHunk": "@@ -213,6 +222,8 @@ public final Builder dateSeparator(char dateSeparator) {\n \n   public abstract int namesLookback();\n \n+  @Nullable abstract String templatePriority();", "originalCommit": "c36cf3263a7f392561a6fbf3b47415ba0ece81f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0919a8935fa247fd7d1c5b8c5aa5a2902bbe8e8", "chunk": "diff --git a/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java b/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java\nindex c6803c86b..61c2b8bc2 100644\n--- a/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java\n+++ b/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java\n\n@@ -222,7 +222,7 @@ public abstract class ElasticsearchStorage extends zipkin2.storage.StorageCompon\n \n   public abstract int namesLookback();\n \n-  @Nullable abstract String templatePriority();\n+  @Nullable abstract Integer templatePriority();\n \n   @Override public SpanStore spanStore() {\n     ensureIndexTemplates();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxMTIwOA==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r481911208", "bodyText": "make Integer", "author": "codefromthecrypt", "createdAt": "2020-09-02T08:59:03Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -212,6 +213,8 @@ public void setInterval(Duration interval) {\n \n   private HealthCheck healthCheck = new HealthCheck();\n \n+  private String priority;", "originalCommit": "c36cf3263a7f392561a6fbf3b47415ba0ece81f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0919a8935fa247fd7d1c5b8c5aa5a2902bbe8e8", "chunk": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\nindex a4a71b3f4..7f9b0dd1e 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n\n@@ -213,7 +213,7 @@ class ZipkinElasticsearchStorageProperties implements Serializable { // for Spar\n \n   private HealthCheck healthCheck = new HealthCheck();\n \n-  private String priority;\n+  private Integer priority;\n \n   public String getPipeline() {\n     return pipeline;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxMjUyMA==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r481912520", "bodyText": "If this is a string to coerce empty to null, make a comment (also coerce empty to null :P) but still use an integer in the builder. I'm not actually sure what Spring does to an integer field set to \"\"", "author": "codefromthecrypt", "createdAt": "2020-09-02T09:00:27Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -346,6 +349,10 @@ public void setSsl(Ssl ssl) {\n     this.ssl = ssl;\n   }\n \n+  public String getPriority() { return priority; }\n+\n+  public void setPriority(String priority) { this.priority = priority; }", "originalCommit": "c36cf3263a7f392561a6fbf3b47415ba0ece81f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0919a8935fa247fd7d1c5b8c5aa5a2902bbe8e8", "chunk": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\nindex a4a71b3f4..7f9b0dd1e 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n\n@@ -349,9 +349,9 @@ class ZipkinElasticsearchStorageProperties implements Serializable { // for Spar\n     this.ssl = ssl;\n   }\n \n-  public String getPriority() { return priority; }\n+  public Integer getPriority() { return priority; }\n \n-  public void setPriority(String priority) { this.priority = priority; }\n+  public void setPriority(Integer priority) { this.priority = priority; }\n \n   public ElasticsearchStorage.Builder toBuilder(LazyHttpClient httpClient) {\n     ElasticsearchStorage.Builder builder = ElasticsearchStorage.newBuilder(httpClient);\n"}}, {"oid": "a0919a8935fa247fd7d1c5b8c5aa5a2902bbe8e8", "url": "https://github.com/openzipkin/zipkin/commit/a0919a8935fa247fd7d1c5b8c5aa5a2902bbe8e8", "message": "Composable index templates for ES 7.8", "committedDate": "2020-09-03T07:52:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwNjg0Mg==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r482806842", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable public abstract Builder templatePriority(Integer priority);\n          \n          \n            \n                public abstract Builder templatePriority(@Nullable Integer priority);", "author": "codefromthecrypt", "createdAt": "2020-09-03T08:37:50Z", "path": "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java", "diffHunk": "@@ -162,6 +162,15 @@ public final Builder dateSeparator(char dateSeparator) {\n     /** False disables automatic index template installation. */\n     public abstract Builder ensureTemplates(boolean ensureTemplates);\n \n+    /**\n+     * Only valid when the destination is Elasticsearch >= 7.8. Indicates the index template\n+     * priority in case of multiple matching templates. The template with highest priority is used.\n+     * Default to 0.\n+     *\n+     * <p>See https://www.elastic.co/guide/en/elasticsearch/reference/7.8/_index_template_and_settings_priority.html\n+     */\n+    @Nullable public abstract Builder templatePriority(Integer priority);", "originalCommit": "a0919a8935fa247fd7d1c5b8c5aa5a2902bbe8e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "687de3a8532565c05294ba3b82b0e8dae2fc4428", "chunk": "diff --git a/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java b/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java\nindex 61c2b8bc2..33eca9e03 100644\n--- a/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java\n+++ b/zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java\n\n@@ -169,7 +169,7 @@ public abstract class ElasticsearchStorage extends zipkin2.storage.StorageCompon\n      *\n      * <p>See https://www.elastic.co/guide/en/elasticsearch/reference/7.8/_index_template_and_settings_priority.html\n      */\n-    @Nullable public abstract Builder templatePriority(Integer priority);\n+    public abstract Builder templatePriority(@Nullable Integer templatePriority);\n \n     /** {@inheritDoc} */\n     @Override public abstract Builder strictTraceId(boolean strictTraceId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwNzk1Mg==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r482807952", "bodyText": "rename to templatePriority", "author": "codefromthecrypt", "createdAt": "2020-09-03T08:39:45Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -212,6 +213,8 @@ public void setInterval(Duration interval) {\n \n   private HealthCheck healthCheck = new HealthCheck();\n \n+  private Integer priority;", "originalCommit": "a0919a8935fa247fd7d1c5b8c5aa5a2902bbe8e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "687de3a8532565c05294ba3b82b0e8dae2fc4428", "chunk": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\nindex 7f9b0dd1e..5685b920b 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n\n@@ -213,7 +213,7 @@ class ZipkinElasticsearchStorageProperties implements Serializable { // for Spar\n \n   private HealthCheck healthCheck = new HealthCheck();\n \n-  private Integer priority;\n+  private Integer templatePriority;\n \n   public String getPipeline() {\n     return pipeline;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwODAxNw==", "url": "https://github.com/openzipkin/zipkin/pull/3185#discussion_r482808017", "bodyText": "rename to template-priority", "author": "codefromthecrypt", "createdAt": "2020-09-03T08:39:52Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -50,6 +50,7 @@\n  *     enabled: true\n  *     http-logging: HEADERS\n  *     interval: 3s\n+ *   priority: 0", "originalCommit": "a0919a8935fa247fd7d1c5b8c5aa5a2902bbe8e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "687de3a8532565c05294ba3b82b0e8dae2fc4428", "chunk": "diff --git a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\nindex 7f9b0dd1e..5685b920b 100644\n--- a/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n+++ b/zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n\n@@ -50,7 +50,7 @@ import zipkin2.elasticsearch.ElasticsearchStorage.LazyHttpClient;\n  *     enabled: true\n  *     http-logging: HEADERS\n  *     interval: 3s\n- *   priority: 0\n+ *   template-priority: 0\n  * }</pre>\n  */\n @ConfigurationProperties(\"zipkin.storage.elasticsearch\")\n"}}, {"oid": "687de3a8532565c05294ba3b82b0e8dae2fc4428", "url": "https://github.com/openzipkin/zipkin/commit/687de3a8532565c05294ba3b82b0e8dae2fc4428", "message": "Composable index templates for ES 7.8", "committedDate": "2020-09-04T00:53:31Z", "type": "commit"}, {"oid": "687de3a8532565c05294ba3b82b0e8dae2fc4428", "url": "https://github.com/openzipkin/zipkin/commit/687de3a8532565c05294ba3b82b0e8dae2fc4428", "message": "Composable index templates for ES 7.8", "committedDate": "2020-09-04T00:53:31Z", "type": "forcePushed"}]}