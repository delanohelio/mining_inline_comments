{"pr_number": 4385, "pr_title": "Switch common test config utils to use a per-file cache", "pr_createdAt": "2020-02-18T17:12:44Z", "pr_url": "https://github.com/flutter/flutter-intellij/pull/4385", "timeline": [{"oid": "541ad688c7610c4638bb99386553dfa52e050fdf", "url": "https://github.com/flutter/flutter-intellij/commit/541ad688c7610c4638bb99386553dfa52e050fdf", "message": "Switch common test config utils to use a per-file cache", "committedDate": "2020-02-18T17:21:14Z", "type": "forcePushed"}, {"oid": "0acff30bda37a8e880f959a9cf9f4af215566aa8", "url": "https://github.com/flutter/flutter-intellij/commit/0acff30bda37a8e880f959a9cf9f4af215566aa8", "message": "Switch common test config utils to use a per-file cache", "committedDate": "2020-02-18T17:22:05Z", "type": "commit"}, {"oid": "0acff30bda37a8e880f959a9cf9f4af215566aa8", "url": "https://github.com/flutter/flutter-intellij/commit/0acff30bda37a8e880f959a9cf9f4af215566aa8", "message": "Switch common test config utils to use a per-file cache", "committedDate": "2020-02-18T17:22:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMTQ3MQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r380831471", "bodyText": "what if the outline has changed? we need to clear out the cache in that case.", "author": "jacob314", "createdAt": "2020-02-18T17:43:23Z", "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -84,21 +84,22 @@ private void clearCachedInfo() {\n     }\n \n     final FlutterOutline outline = outlineService.getIfUpdated(file);\n+    final String path = file.getVirtualFile().getPath();\n     // If the outline is outdated, then request a new pass to generate line markers.\n     if (outline == null) {\n-      clearCachedInfo();\n+      clearCachedInfo(path);\n       outlineService.addListener(getListenerForFile(file));\n       return new HashMap<>();\n     }\n \n     synchronized (this) {\n       // Visit the fields on the outline to get which calls are actual named tests.\n-      if (cachedCallToTestType == null) {\n-        cachedCallToTestType = new HashMap<>();\n-        populateTestTypeMap(outline, cachedCallToTestType, file);\n+      if (!cachedCallToTestType.containsKey(path)) {", "originalCommit": "0acff30bda37a8e880f959a9cf9f4af215566aa8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MDMzNQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r380840335", "bodyText": "The outline given will be null and the cache will be cleared.\nCF: the comments above and the documentation for outlineService.getIfUpdated:\n\n  \n    \n      flutter-intellij/src/io/flutter/editor/ActiveEditorsOutlineService.java\n    \n    \n        Lines 187 to 194\n      in\n      f69eec4\n    \n    \n    \n    \n\n        \n          \n             /** \n        \n\n        \n          \n              * Gets the {@link FlutterOutline} for {@param file} if and only if the outline is up to date with the file. \n        \n\n        \n          \n              * \n        \n\n        \n          \n              * <p> \n        \n\n        \n          \n              * Returns null if the file is out of date. \n        \n\n        \n          \n              */ \n        \n\n        \n          \n             @Nullable \n        \n\n        \n          \n             public FlutterOutline getIfUpdated(@NotNull PsiFile file) {", "author": "DaveShuckerow", "createdAt": "2020-02-18T17:59:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMTQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0Mzg4MQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r380843881", "bodyText": "that is not a safe assumption.\nThe only assumption safe to depend on is the outline will be null if it is out of date.\nFor example, imagine if another service such as the the widget indent guides or HotUI is also requesting outlines using ActiveEditorsOutlineService, you could easily get a non-null outline even though it is different than the outline your cache is based on.", "author": "jacob314", "createdAt": "2020-02-18T18:06:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMTQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NzI1Mw==", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r380847253", "bodyText": "This code checks if the outline is outdated and returns null if so.\nIf you have suggestions for how to improve the heuristic, they are welcome.", "author": "DaveShuckerow", "createdAt": "2020-02-18T18:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMTQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2OTA4OA==", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r380869088", "bodyText": "the getIfUpdated method is fine as written. What you need to do is not depend on getting a null outline for the case that there was an update. To do that you should store what the outline was in CommonTestConfigUtils so that you can tell if you have gotten a new outline so need to update your cache.", "author": "jacob314", "createdAt": "2020-02-18T18:55:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMTQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQxNjk4OQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r381416989", "bodyText": "Done.", "author": "DaveShuckerow", "createdAt": "2020-02-19T17:09:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMTQ3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9a1a89ba27b1f8c6490f839dec6810d4c7160b70", "chunk": "diff --git a/src/io/flutter/run/common/CommonTestConfigUtils.java b/src/io/flutter/run/common/CommonTestConfigUtils.java\nindex 907662cc..1bb77755 100644\n--- a/src/io/flutter/run/common/CommonTestConfigUtils.java\n+++ b/src/io/flutter/run/common/CommonTestConfigUtils.java\n\n@@ -76,7 +76,7 @@ public abstract class CommonTestConfigUtils {\n    * Gets the elements from the outline that are runnable tests.\n    */\n   @NotNull\n-  private Map<DartCallExpression, TestType> getTestsFromOutline(@NotNull PsiFile file) {\n+  private Map<Integer, TestType> getTestsFromOutline(@NotNull PsiFile file) {\n     final Project project = file.getProject();\n     final ActiveEditorsOutlineService outlineService = getActiveEditorsOutlineService(project);\n     if (outlineService == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMjA4Nw==", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r380832087", "bodyText": "caching DartCallExpressions will cause us to hang on to old IntelliJ ASTs and leave us vulnerable to if IntelliJ recomputes AST nodes. It is safer to use file offsets as keys.", "author": "jacob314", "createdAt": "2020-02-18T17:44:32Z", "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -64,11 +64,11 @@ public TestType asTestCall(@NotNull PsiElement element) {\n     return null;\n   }\n \n-  Map<DartCallExpression, TestType> cachedCallToTestType;\n+  private final Map<String, Map<DartCallExpression, TestType>> cachedCallToTestType = new HashMap<>();", "originalCommit": "0acff30bda37a8e880f959a9cf9f4af215566aa8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MTM2OQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r380841369", "bodyText": "Done.", "author": "DaveShuckerow", "createdAt": "2020-02-18T18:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMjA4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "9a1a89ba27b1f8c6490f839dec6810d4c7160b70", "chunk": "diff --git a/src/io/flutter/run/common/CommonTestConfigUtils.java b/src/io/flutter/run/common/CommonTestConfigUtils.java\nindex 907662cc..1bb77755 100644\n--- a/src/io/flutter/run/common/CommonTestConfigUtils.java\n+++ b/src/io/flutter/run/common/CommonTestConfigUtils.java\n\n@@ -64,7 +64,7 @@ public abstract class CommonTestConfigUtils {\n     return null;\n   }\n \n-  private final Map<String, Map<DartCallExpression, TestType>> cachedCallToTestType = new HashMap<>();\n+  private final Map<String, Map<Integer, TestType>> cachedCallToTestType = new HashMap<>();\n \n   private void clearCachedInfo(String path) {\n     synchronized (this) {\n"}}, {"oid": "9a1a89ba27b1f8c6490f839dec6810d4c7160b70", "url": "https://github.com/flutter/flutter-intellij/commit/9a1a89ba27b1f8c6490f839dec6810d4c7160b70", "message": "Use integer offsets instead of callexpressions", "committedDate": "2020-02-18T18:00:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NjM1Ng==", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r380846356", "bodyText": "optimization: move this findElementAt call so you only call it when unit_test_group or unit_test_test is found. Currently we are doing this fairly expensive operation a lot more times than we need to.\nI do like that you are still using\nfile.findElementAt to avoid location calculation bugs.", "author": "jacob314", "createdAt": "2020-02-18T18:11:31Z", "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -160,7 +161,7 @@ protected ActiveEditorsOutlineService getActiveEditorsOutlineService(@NotNull Pr\n    * Traverses the {@param outline} tree and adds to {@param callToTestType } the {@link DartCallExpression}s that are tests or test groups.\n    */\n   private void populateTestTypeMap(@NotNull FlutterOutline outline,\n-                                   @NotNull Map<DartCallExpression, TestType> callToTestType,\n+                                   @NotNull Map<Integer, TestType> callToTestType,\n                                    @NotNull PsiFile file) {\n     final PsiElement element = file.findElementAt(outline.getOffset());", "originalCommit": "9a1a89ba27b1f8c6490f839dec6810d4c7160b70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ0NTE1Mw==", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r381445153", "bodyText": "Done.", "author": "DaveShuckerow", "createdAt": "2020-02-19T17:57:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NjM1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "793db7faebc991357e7e3736baf9e047636089a6", "chunk": "diff --git a/src/io/flutter/run/common/CommonTestConfigUtils.java b/src/io/flutter/run/common/CommonTestConfigUtils.java\nindex 1bb77755..e6862dc5 100644\n--- a/src/io/flutter/run/common/CommonTestConfigUtils.java\n+++ b/src/io/flutter/run/common/CommonTestConfigUtils.java\n\n@@ -163,22 +163,18 @@ public abstract class CommonTestConfigUtils {\n   private void populateTestTypeMap(@NotNull FlutterOutline outline,\n                                    @NotNull Map<Integer, TestType> callToTestType,\n                                    @NotNull PsiFile file) {\n-    final PsiElement element = file.findElementAt(outline.getOffset());\n-    // If the outline is out-of-sync with the file, the element from that offset may be null.\n-    // The outline analysis is eventually consistent with the contents of the file, so if this happens,\n-    // this visitor will be invoked again later with a corrected outline.\n-    if (element == null) {\n-      return;\n-    }\n     if (outline.getDartElement() != null) {\n+      final PsiElement element;\n       switch (outline.getDartElement().getKind()) {\n         case UNIT_TEST_GROUP:\n           // We found a test group.\n-          callToTestType.put(DartSyntax.findClosestEnclosingFunctionCall(element).getStartOffsetInParent(), TestType.GROUP);\n+          element = file.findElementAt(outline.getOffset());\n+          callToTestType.put(DartSyntax.findClosestEnclosingFunctionCall(element).getTextOffset(), TestType.GROUP);\n           break;\n         case UNIT_TEST_TEST:\n           // We found a unit test.\n-          callToTestType.put(DartSyntax.findClosestEnclosingFunctionCall(element).getStartOffsetInParent(), TestType.SINGLE);\n+          element = file.findElementAt(outline.getOffset());\n+          callToTestType.put(DartSyntax.findClosestEnclosingFunctionCall(element).getTextOffset(), TestType.SINGLE);\n           break;\n         default:\n           // We found no test.\n"}}, {"oid": "793db7faebc991357e7e3736baf9e047636089a6", "url": "https://github.com/flutter/flutter-intellij/commit/793db7faebc991357e7e3736baf9e047636089a6", "message": "Add tests", "committedDate": "2020-02-18T21:34:00Z", "type": "commit"}, {"oid": "1e25e3f725e12b986e156d18c394a47bcadf0650", "url": "https://github.com/flutter/flutter-intellij/commit/1e25e3f725e12b986e156d18c394a47bcadf0650", "message": "Start a cache of previous outlines", "committedDate": "2020-02-19T16:47:31Z", "type": "commit"}, {"oid": "aac9cf121fc785c8b8de52811ccbedb089b9718a", "url": "https://github.com/flutter/flutter-intellij/commit/aac9cf121fc785c8b8de52811ccbedb089b9718a", "message": "Revert .idea/ files", "committedDate": "2020-02-19T16:48:50Z", "type": "commit"}, {"oid": "aac9cf121fc785c8b8de52811ccbedb089b9718a", "url": "https://github.com/flutter/flutter-intellij/commit/aac9cf121fc785c8b8de52811ccbedb089b9718a", "message": "Revert .idea/ files", "committedDate": "2020-02-19T16:48:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NTE4Nw==", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r381545187", "bodyText": "nit: rather than two maps with the same key, define a class  with both the\nFltuterOutline and the Map<Integer, TestType> as fields.", "author": "jacob314", "createdAt": "2020-02-19T21:08:27Z", "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -64,49 +64,57 @@ public TestType asTestCall(@NotNull PsiElement element) {\n     return null;\n   }\n \n-  Map<DartCallExpression, TestType> cachedCallToTestType;\n+  private final Map<String, Map<Integer, TestType>> cachedCallToTestType = new HashMap<>();\n+  private final Map<String, FlutterOutline> pathToPreviouslyUsedOutline = new HashMap<>();", "originalCommit": "aac9cf121fc785c8b8de52811ccbedb089b9718a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1ODcxOQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r381558719", "bodyText": "Done.", "author": "DaveShuckerow", "createdAt": "2020-02-19T21:36:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NTE4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "fc8fa438e5bc6c9eebf97d833d5f9fbfef2d3a23", "chunk": "diff --git a/src/io/flutter/run/common/CommonTestConfigUtils.java b/src/io/flutter/run/common/CommonTestConfigUtils.java\nindex 4ea369ba..cd902230 100644\n--- a/src/io/flutter/run/common/CommonTestConfigUtils.java\n+++ b/src/io/flutter/run/common/CommonTestConfigUtils.java\n\n@@ -64,13 +64,11 @@ public abstract class CommonTestConfigUtils {\n     return null;\n   }\n \n-  private final Map<String, Map<Integer, TestType>> cachedCallToTestType = new HashMap<>();\n-  private final Map<String, FlutterOutline> pathToPreviouslyUsedOutline = new HashMap<>();\n+  private final Map<String, OutlineCache> cache = new HashMap<>();\n \n   private void clearCachedInfo(String path) {\n     synchronized (this) {\n-      pathToPreviouslyUsedOutline.remove(path);\n-      cachedCallToTestType.remove(path);\n+      cache.remove(path);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NzM3MA==", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r381547370", "bodyText": "nit: remove the result local variable.", "author": "jacob314", "createdAt": "2020-02-19T21:12:51Z", "path": "testSrc/unit/io/flutter/testing/FakeActiveEditorsOutlineService.java", "diffHunk": "@@ -38,16 +40,20 @@ public void loadOutline(@NotNull String flutterOutlinePath) {\n       e.printStackTrace();\n       outlineContents = null;\n     }\n-    flutterOutline = null;\n+    FlutterOutline flutterOutline = null;\n     if (outlineContents != null) {\n       flutterOutline = FlutterOutline.fromJson(new JsonParser().parse(outlineContents).getAsJsonObject());\n     }\n+    pathToFlutterOutline.put(filePath, flutterOutline);\n+\n   }\n \n   @Nullable\n   @Override\n   public FlutterOutline getOutline(String path) {\n-    return flutterOutline;\n+    // The path string that we get will be prepended with a '/' character, compared to how the cache was initialized.\n+    final FlutterOutline result = pathToFlutterOutline.get(path);", "originalCommit": "aac9cf121fc785c8b8de52811ccbedb089b9718a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1ODY4Nw==", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r381558687", "bodyText": "Done.", "author": "DaveShuckerow", "createdAt": "2020-02-19T21:36:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NzM3MA=="}], "type": "inlineReview", "revised_code": {"commit": "fc8fa438e5bc6c9eebf97d833d5f9fbfef2d3a23", "chunk": "diff --git a/testSrc/unit/io/flutter/testing/FakeActiveEditorsOutlineService.java b/testSrc/unit/io/flutter/testing/FakeActiveEditorsOutlineService.java\nindex c34a08ba..155c41cc 100644\n--- a/testSrc/unit/io/flutter/testing/FakeActiveEditorsOutlineService.java\n+++ b/testSrc/unit/io/flutter/testing/FakeActiveEditorsOutlineService.java\n\n@@ -52,8 +52,7 @@ public class FakeActiveEditorsOutlineService extends ActiveEditorsOutlineService\n   @Override\n   public FlutterOutline getOutline(String path) {\n     // The path string that we get will be prepended with a '/' character, compared to how the cache was initialized.\n-    final FlutterOutline result = pathToFlutterOutline.get(path);\n-    return result;\n+    return pathToFlutterOutline.get(path);\n   }\n \n   public static final String SIMPLE_TEST_PATH = \"testData/sample_tests/test/simple_test.dart\";\n"}}, {"oid": "fc8fa438e5bc6c9eebf97d833d5f9fbfef2d3a23", "url": "https://github.com/flutter/flutter-intellij/commit/fc8fa438e5bc6c9eebf97d833d5f9fbfef2d3a23", "message": "Respond to comments", "committedDate": "2020-02-19T21:35:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MDI4Nw==", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r381560287", "bodyText": "nit: the cleaner pattern for this in java is\nfinal entry = cache.get(path);", "author": "jacob314", "createdAt": "2020-02-19T21:39:37Z", "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -89,7 +87,7 @@ private void clearCachedInfo(String path) {\n     final String path = file.getVirtualFile().getPath();\n     final boolean outlineOutdated;\n     synchronized (this) {\n-      outlineOutdated = pathToPreviouslyUsedOutline.containsKey(path) && outline != pathToPreviouslyUsedOutline.get(path);\n+      outlineOutdated = cache.containsKey(path) && outline != cache.get(path).outline;", "originalCommit": "fc8fa438e5bc6c9eebf97d833d5f9fbfef2d3a23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxMTI3Nw==", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r381611277", "bodyText": "Done.", "author": "DaveShuckerow", "createdAt": "2020-02-19T23:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MDI4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e76bc87f741877f2423aa8614091d80f073c6954", "chunk": "diff --git a/src/io/flutter/run/common/CommonTestConfigUtils.java b/src/io/flutter/run/common/CommonTestConfigUtils.java\nindex cd902230..184efd5d 100644\n--- a/src/io/flutter/run/common/CommonTestConfigUtils.java\n+++ b/src/io/flutter/run/common/CommonTestConfigUtils.java\n\n@@ -87,7 +87,8 @@ public abstract class CommonTestConfigUtils {\n     final String path = file.getVirtualFile().getPath();\n     final boolean outlineOutdated;\n     synchronized (this) {\n-      outlineOutdated = cache.containsKey(path) && outline != cache.get(path).outline;\n+      final OutlineCache entry = cache.get(path);\n+      outlineOutdated = cache.containsKey(path) && outline != entry.outline;\n     }\n     // If the outline is outdated, then request a new pass to generate line markers.\n     if (outline == null || outlineOutdated) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MDYzNw==", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r381560637", "bodyText": "nit: cache the OutlineCache entry as a local variable so you don't have to read it out of a cache.", "author": "jacob314", "createdAt": "2020-02-19T21:40:25Z", "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -99,14 +97,8 @@ private void clearCachedInfo(String path) {\n     }\n \n     synchronized (this) {\n-      pathToPreviouslyUsedOutline.put(path, outline);\n-      // Visit the fields on the outline to get which calls are actual named tests.\n-      if (!cachedCallToTestType.containsKey(path)) {\n-        cachedCallToTestType.put(path, new HashMap<>());\n-        populateTestTypeMap(outline, cachedCallToTestType.get(path), file);\n-      }\n-\n-      return cachedCallToTestType.get(path);\n+      cache.put(path, new OutlineCache(outline, file));", "originalCommit": "fc8fa438e5bc6c9eebf97d833d5f9fbfef2d3a23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxMTI2Mw==", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r381611263", "bodyText": "Done.", "author": "DaveShuckerow", "createdAt": "2020-02-19T23:41:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MDYzNw=="}], "type": "inlineReview", "revised_code": {"commit": "e76bc87f741877f2423aa8614091d80f073c6954", "chunk": "diff --git a/src/io/flutter/run/common/CommonTestConfigUtils.java b/src/io/flutter/run/common/CommonTestConfigUtils.java\nindex cd902230..184efd5d 100644\n--- a/src/io/flutter/run/common/CommonTestConfigUtils.java\n+++ b/src/io/flutter/run/common/CommonTestConfigUtils.java\n\n@@ -97,8 +98,9 @@ public abstract class CommonTestConfigUtils {\n     }\n \n     synchronized (this) {\n-      cache.put(path, new OutlineCache(outline, file));\n-      return cache.get(path).callToTestType;\n+      final OutlineCache entry = new OutlineCache(outline, file);\n+      cache.put(path, entry);\n+      return entry.callToTestType;\n     }\n   }\n \n"}}, {"oid": "e76bc87f741877f2423aa8614091d80f073c6954", "url": "https://github.com/flutter/flutter-intellij/commit/e76bc87f741877f2423aa8614091d80f073c6954", "message": "Respond to comments", "committedDate": "2020-02-19T23:38:52Z", "type": "commit"}]}