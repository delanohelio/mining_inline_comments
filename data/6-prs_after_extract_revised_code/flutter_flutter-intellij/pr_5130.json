{"pr_number": 5130, "pr_title": "Start DevTools server on first request and handle exceptions", "pr_createdAt": "2020-12-17T18:08:59Z", "pr_url": "https://github.com/flutter/flutter-intellij/pull/5130", "timeline": [{"oid": "96e40f86948c54b324f56f75f9ec259b2473d948", "url": "https://github.com/flutter/flutter-intellij/commit/96e40f86948c54b324f56f75f9ec259b2473d948", "message": "Start DevTools server on first request and handle exceptions", "committedDate": "2020-12-17T17:39:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxODc4Nw==", "url": "https://github.com/flutter/flutter-intellij/pull/5130#discussion_r545318787", "bodyText": "Do we need to dispose() the devToolsInstance here?", "author": "devoncarew", "createdAt": "2020-12-17T18:43:38Z", "path": "src/io/flutter/run/daemon/DevToolsService.java", "diffHunk": "@@ -92,23 +100,21 @@ private void setUpWithDaemon() {\n           return;\n         }\n         if (address == null) {\n-          Exception error = new Exception(\"DevTools address was null\");\n-          LOG.error(error);\n-          devToolsInstance.completeExceptionally(error);\n+          logExceptionAndComplete(\"DevTools address was null\");\n         }\n         else {\n           devToolsInstance.complete(new DevToolsInstance(address.host, address.port));\n         }\n       });\n     }\n     catch (ExecutionException e) {\n-      e.printStackTrace();\n+      logExceptionAndComplete(e);\n     }\n \n     ProjectManager.getInstance().addProjectManagerListener(project, new ProjectManagerListener() {\n       @Override\n       public void projectClosing(@NotNull Project project) {\n-        devToolsInstance = new CompletableFuture<>();\n+        devToolsInstance = null;", "originalCommit": "96e40f86948c54b324f56f75f9ec259b2473d948", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM4NTgxMQ==", "url": "https://github.com/flutter/flutter-intellij/pull/5130#discussion_r545385811", "bodyText": "Is dispose mainly for if an object has dependencies? Since the instance just holds a hostname and port, I think it may not be needed.", "author": "helin24", "createdAt": "2020-12-17T20:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxODc4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM5MDMzMg==", "url": "https://github.com/flutter/flutter-intellij/pull/5130#discussion_r545390332", "bodyText": "Gotcha (yeah, it's just needed for heavier weight things).", "author": "devoncarew", "createdAt": "2020-12-17T20:41:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxODc4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4d028754e0ab0dd4ec509ed58a77b35d26f8eb59", "chunk": "diff --git a/src/io/flutter/run/daemon/DevToolsService.java b/src/io/flutter/run/daemon/DevToolsService.java\nindex f4ac86e1..6aede7cb 100644\n--- a/src/io/flutter/run/daemon/DevToolsService.java\n+++ b/src/io/flutter/run/daemon/DevToolsService.java\n\n@@ -103,7 +103,7 @@ public class DevToolsService {\n           logExceptionAndComplete(\"DevTools address was null\");\n         }\n         else {\n-          devToolsInstance.complete(new DevToolsInstance(address.host, address.port));\n+          devToolsInstanceFuture.complete(new DevToolsInstance(address.host, address.port));\n         }\n       });\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyMDIwMg==", "url": "https://github.com/flutter/flutter-intellij/pull/5130#discussion_r545320202", "bodyText": "Consider passing the devToolsInstance as a parameter to startServer() so that we always complete the right future (given that this field is reused over time for new instances).", "author": "devoncarew", "createdAt": "2020-12-17T18:45:59Z", "path": "src/io/flutter/run/daemon/DevToolsService.java", "diffHunk": "@@ -58,7 +58,19 @@ public static DevToolsService getInstance(@NotNull final Project project) {\n \n   private DevToolsService(@NotNull final Project project) {\n     this.project = project;\n+  }\n+\n+  public CompletableFuture<DevToolsInstance> getDevToolsInstance() {\n+    // Create instance if it doesn't exist yet, or if the previous attempt failed.\n+    if (devToolsInstance == null || devToolsInstance.isCompletedExceptionally()) {\n+      devToolsInstance = new CompletableFuture<>();\n+      startServer();", "originalCommit": "96e40f86948c54b324f56f75f9ec259b2473d948", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM4NTgyNg==", "url": "https://github.com/flutter/flutter-intellij/pull/5130#discussion_r545385826", "bodyText": "I'm not sure if this fully addresses the problem, but I put the future into an atomic reference to ensure that there can only be one at a time (one future, and therefore one process / process handler). It could be problematic if more than one server gets started and the reference to shut it down on close gets lost.", "author": "helin24", "createdAt": "2020-12-17T20:33:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyMDIwMg=="}], "type": "inlineReview", "revised_code": {"commit": "4d028754e0ab0dd4ec509ed58a77b35d26f8eb59", "chunk": "diff --git a/src/io/flutter/run/daemon/DevToolsService.java b/src/io/flutter/run/daemon/DevToolsService.java\nindex f4ac86e1..6aede7cb 100644\n--- a/src/io/flutter/run/daemon/DevToolsService.java\n+++ b/src/io/flutter/run/daemon/DevToolsService.java\n\n@@ -62,12 +62,12 @@ public class DevToolsService {\n \n   public CompletableFuture<DevToolsInstance> getDevToolsInstance() {\n     // Create instance if it doesn't exist yet, or if the previous attempt failed.\n-    if (devToolsInstance == null || devToolsInstance.isCompletedExceptionally()) {\n-      devToolsInstance = new CompletableFuture<>();\n+    if (devToolsInstanceFuture == null || devToolsInstanceFuture.isCompletedExceptionally()) {\n+      devToolsInstanceFuture = new CompletableFuture<>();\n       startServer();\n     }\n \n-    return devToolsInstance;\n+    return devToolsInstanceFuture;\n   }\n \n   private void startServer() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyMDQzMA==", "url": "https://github.com/flutter/flutter-intellij/pull/5130#discussion_r545320430", "bodyText": "Perhaps rename to devToolsInstanceFuture for clarity?", "author": "devoncarew", "createdAt": "2020-12-17T18:46:20Z", "path": "src/io/flutter/run/daemon/DevToolsService.java", "diffHunk": "@@ -49,7 +49,7 @@\n   @NotNull private final Project project;\n   private DaemonApi daemonApi;\n   private ProcessHandler process;\n-  private CompletableFuture<DevToolsInstance> devToolsInstance = new CompletableFuture<>();\n+  private CompletableFuture<DevToolsInstance> devToolsInstance;", "originalCommit": "96e40f86948c54b324f56f75f9ec259b2473d948", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d028754e0ab0dd4ec509ed58a77b35d26f8eb59", "chunk": "diff --git a/src/io/flutter/run/daemon/DevToolsService.java b/src/io/flutter/run/daemon/DevToolsService.java\nindex f4ac86e1..6aede7cb 100644\n--- a/src/io/flutter/run/daemon/DevToolsService.java\n+++ b/src/io/flutter/run/daemon/DevToolsService.java\n\n@@ -49,7 +49,7 @@ public class DevToolsService {\n   @NotNull private final Project project;\n   private DaemonApi daemonApi;\n   private ProcessHandler process;\n-  private CompletableFuture<DevToolsInstance> devToolsInstance;\n+  private CompletableFuture<DevToolsInstance> devToolsInstanceFuture;\n \n   @NotNull\n   public static DevToolsService getInstance(@NotNull final Project project) {\n"}}, {"oid": "4d028754e0ab0dd4ec509ed58a77b35d26f8eb59", "url": "https://github.com/flutter/flutter-intellij/commit/4d028754e0ab0dd4ec509ed58a77b35d26f8eb59", "message": "Change future name", "committedDate": "2020-12-17T19:03:03Z", "type": "commit"}, {"oid": "f57acd50d95097891f7236af0fe152f717b79280", "url": "https://github.com/flutter/flutter-intellij/commit/f57acd50d95097891f7236af0fe152f717b79280", "message": "Make future atomic to ensure only one", "committedDate": "2020-12-17T20:18:23Z", "type": "commit"}]}