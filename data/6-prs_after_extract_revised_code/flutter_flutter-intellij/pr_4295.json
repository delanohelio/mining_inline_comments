{"pr_number": 4295, "pr_title": "Switch to using WorkspaceCache", "pr_createdAt": "2020-01-16T21:14:54Z", "pr_url": "https://github.com/flutter/flutter-intellij/pull/4295", "timeline": [{"oid": "12d65d65b6f78fdb9cb466241b7a3bfb4f2eaad8", "url": "https://github.com/flutter/flutter-intellij/commit/12d65d65b6f78fdb9cb466241b7a3bfb4f2eaad8", "message": "Switch to using WorkspaceCache\n\nFix race condition in workspace cache and simplify WorkspaceCache to stop\ntrying to do work in the background.", "committedDate": "2020-01-16T23:32:09Z", "type": "commit"}, {"oid": "12d65d65b6f78fdb9cb466241b7a3bfb4f2eaad8", "url": "https://github.com/flutter/flutter-intellij/commit/12d65d65b6f78fdb9cb466241b7a3bfb4f2eaad8", "message": "Switch to using WorkspaceCache\n\nFix race condition in workspace cache and simplify WorkspaceCache to stop\ntrying to do work in the background.", "committedDate": "2020-01-16T23:32:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwNzkxNg==", "url": "https://github.com/flutter/flutter-intellij/pull/4295#discussion_r368007916", "bodyText": "Does this indicate to the Dart plugin that all projects are bazel projects? Or that the current one might be?\nWe should probably push some version of bazel Workspace / WorkspaceCache knowledge down to the Dart plugin; it'll then have unify behavior with the Flutter plugin and the analysis server. cc @jwren", "author": "devoncarew", "createdAt": "2020-01-17T15:56:11Z", "path": "src/io/flutter/bazel/WorkspaceCache.java", "diffHunk": "@@ -64,46 +82,82 @@ public static WorkspaceCache getInstance(@NotNull final Project project) {\n    * Returns the Workspace in the cache.\n    * <p>\n    * <p>Returning a null means there is no current workspace for this project.\n-   * <p>\n-   * <p>If the cache hasn't loaded yet, blocks until it's ready.\n-   * Otherwise doesn't block.\n    */\n   @Nullable\n-  public Workspace getNow() {\n-    return cache.getNow();\n+  public Workspace get() {\n+    return cache;\n   }\n \n   /**\n-   * Waits for any refreshes to finish, then returns the new workspace (or null).\n-   *\n-   * @throws IllegalStateException if called on the Swing dispatch thread.\n+   * Returns whether the  project is a bazel project.\n    */\n-  @Nullable\n-  public Workspace getWhenReady() {\n-    return cache.getWhenReady();\n+  public boolean isBazel() {\n+    return cache != null;\n   }\n \n   /**\n    * Runs a callback each time the current Workspace changes.\n    */\n   public void subscribe(Runnable callback) {\n-    cache.subscribe(callback);\n+    synchronized (subscribers) {\n+      subscribers.add(callback);\n+    }\n   }\n \n   /**\n    * Stops notifications to a callback passed to {@link #subscribe}.\n    */\n   public void unsubscribe(Runnable callback) {\n-    cache.unsubscribe(callback);\n+    synchronized (subscribers) {\n+      subscribers.remove(callback);\n+    }\n   }\n \n   /**\n-   * Triggers a cache refresh.\n+   * The Dart plugin uses this registry key to avoid bazel users getting their settings overridden on projects that include a\n+   * pubspec.yaml.\n    * <p>\n-   * If a refresh is already in progress, schedules another one.\n+   * In other words, this key tells the plugin to configure dart projects without pubspec.yaml.\n+   */\n+  private static final String dartProjectsWithoutPubspecRegistryKey = \"dart.projects.without.pubspec\";\n+\n+  /**\n+   * Executes a cache refresh.\n    */\n-  private void refreshAsync() {\n-    cache.refresh(() -> Workspace.load(project));\n+  private void refresh() {\n+    final Workspace workspace = Workspace.loadUncached(project);\n+    if (workspace == cache) return;\n+    cache = workspace;\n+\n+    // If the current workspace is a bazel workspace, update the Dart plugin\n+    // registry key to indicate that there are dart projects without pubspec\n+    // registry keys. TODO(jacobr): it would be nice if the Dart plugin was\n+    // instead smarter about handling Bazel projects.\n+    if (cache != null) {\n+      if (!Registry.is(dartProjectsWithoutPubspecRegistryKey, false)) {", "originalCommit": "12d65d65b6f78fdb9cb466241b7a3bfb4f2eaad8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMjUzMA==", "url": "https://github.com/flutter/flutter-intellij/pull/4295#discussion_r368032530", "bodyText": "Changing this registry changes it for all projects. This registry disables features such as notifications around pubspec files themselves and disabling notifications around new available Dart SDK versions.\nFrom my perspective having Flutter set this registry, is unifying the behavior between the Dart and Flutter plugin.  We considered the idea of moving a bunch of the Workspace data down to the Dart plugin but  Jacob made the point that the in the Flutter plugin, Workspace manages Flutter specific bazel data, mainly changes in executing flutter applications, i.e. the json file knowledge", "author": "jwren", "createdAt": "2020-01-17T16:45:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwNzkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1Mzg4OQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4295#discussion_r368053889", "bodyText": "I wasn't suggesting moving the specific Workspace or WorkspaceCache class down to the Dart plugin, but instead removing the flag, and having a similar class in the dart plugin which detects when its in a bazel workspace, and configures the UI to operate slightly differently in those situations.", "author": "devoncarew", "createdAt": "2020-01-17T17:35:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwNzkxNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwOTE0OQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4295#discussion_r368009149", "bodyText": "I haven't looked at the parent impl, but is this method override necessary now?", "author": "devoncarew", "createdAt": "2020-01-17T15:58:18Z", "path": "src/io/flutter/run/bazelTest/FlutterBazelTestLineMarkerContributor.java", "diffHunk": "@@ -23,7 +23,6 @@ public FlutterBazelTestLineMarkerContributor() {\n   @Nullable\n   @Override\n   public Info getInfo(@NotNull PsiElement element) {", "originalCommit": "12d65d65b6f78fdb9cb466241b7a3bfb4f2eaad8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxNzg1Nw==", "url": "https://github.com/flutter/flutter-intellij/pull/4295#discussion_r368017857", "bodyText": "@jwren I believe it is only supposed to indicate that the current one might be given that I can open a non-bazel project after setting this option and everything still seems fine.\n@jwren  any background on the intended behavior of this option in the Dart plugin?", "author": "jacob314", "createdAt": "2020-01-17T16:15:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwOTE0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNDIxMQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4295#discussion_r368024211", "bodyText": "I don't have context with FlutterBazelTestLineMarkerContributor, did I add this, or someone else, @DaveShuckerow?", "author": "jwren", "createdAt": "2020-01-17T16:28:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwOTE0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2MTY5Nw==", "url": "https://github.com/flutter/flutter-intellij/pull/4295#discussion_r368061697", "bodyText": "Dave did this. My take on this code is it would be nice if we short circuited earlier and didn't check whether the project was bazel every time in this traversal but that this code isn't too much of a performance problem as written given the caching.", "author": "jacob314", "createdAt": "2020-01-17T17:55:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwOTE0OQ=="}], "type": "inlineReview", "revised_code": null}]}