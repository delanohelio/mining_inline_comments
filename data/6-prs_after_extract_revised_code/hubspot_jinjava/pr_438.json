{"pr_number": 438, "pr_title": "Defer variables used in deferred nodes", "pr_createdAt": "2020-05-05T16:08:24Z", "pr_url": "https://github.com/HubSpot/jinjava/pull/438", "timeline": [{"oid": "a99796ee69b17531b1050217f05c2b1c072d8b90", "url": "https://github.com/HubSpot/jinjava/commit/a99796ee69b17531b1050217f05c2b1c072d8b90", "message": "rename addDeferredNode to handleDeferredNode", "committedDate": "2020-05-01T09:46:22Z", "type": "commit"}, {"oid": "9f41f790695d496eefe49a3a6c7c78a47a6e6594", "url": "https://github.com/HubSpot/jinjava/commit/9f41f790695d496eefe49a3a6c7c78a47a6e6594", "message": "Mark whole property instead of individual children", "committedDate": "2020-05-01T09:46:55Z", "type": "commit"}, {"oid": "4ae65e4157203e849d2d180bd3610b07f8926745", "url": "https://github.com/HubSpot/jinjava/commit/4ae65e4157203e849d2d180bd3610b07f8926745", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into defer-variables-used-in-deferred", "committedDate": "2020-05-01T10:58:25Z", "type": "commit"}, {"oid": "a84d876ec107d27192cf56e7312bbd173f422372", "url": "https://github.com/HubSpot/jinjava/commit/a84d876ec107d27192cf56e7312bbd173f422372", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into defer-variables-used-in-deferred", "committedDate": "2020-05-05T10:07:13Z", "type": "commit"}, {"oid": "aab803cf5ccea1799561fd55ceb5d25c83799f6f", "url": "https://github.com/HubSpot/jinjava/commit/aab803cf5ccea1799561fd55ceb5d25c83799f6f", "message": "Add deferred value utils and tests", "committedDate": "2020-05-05T10:54:47Z", "type": "commit"}, {"oid": "e9896cc494643cd520a1e9f59fe1de688435312f", "url": "https://github.com/HubSpot/jinjava/commit/e9896cc494643cd520a1e9f59fe1de688435312f", "message": "Copy deferred property to parent scope", "committedDate": "2020-05-05T15:31:06Z", "type": "commit"}, {"oid": "018789c12ed7558a0d7cd0c9486d1d6ae75fbb72", "url": "https://github.com/HubSpot/jinjava/commit/018789c12ed7558a0d7cd0c9486d1d6ae75fbb72", "message": "Handle overwriting deferred values in set tags", "committedDate": "2020-05-05T16:08:17Z", "type": "commit"}, {"oid": "1be99922338ede5182bde5fa1086c13c92cadc22", "url": "https://github.com/HubSpot/jinjava/commit/1be99922338ede5182bde5fa1086c13c92cadc22", "message": "Use varItem for multi assign", "committedDate": "2020-05-05T16:14:35Z", "type": "commit"}, {"oid": "d49ce143c3eb3ff780d508e7b8ba668c9551baa9", "url": "https://github.com/HubSpot/jinjava/commit/d49ce143c3eb3ff780d508e7b8ba668c9551baa9", "message": "Find undeclared variables used in deferred block and mark as deferred", "committedDate": "2020-05-06T16:11:34Z", "type": "commit"}, {"oid": "de40fee56e3de6d789996caef47a952a5efe1a53", "url": "https://github.com/HubSpot/jinjava/commit/de40fee56e3de6d789996caef47a952a5efe1a53", "message": "Fix property splitting and initialise context in tests", "committedDate": "2020-05-07T10:12:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczODAxMw==", "url": "https://github.com/HubSpot/jinjava/pull/438#discussion_r422738013", "bodyText": "Could you use the name defined here? \n  \n    \n      jinjava/src/main/java/com/hubspot/jinjava/lib/tag/SetTag.java\n    \n    \n         Line 65\n      in\n      5cb2463\n    \n    \n    \n    \n\n        \n          \n           public static final String TAG_NAME = \"set\";", "author": "boulter", "createdAt": "2020-05-11T01:41:27Z", "path": "src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.hubspot.jinjava.util;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValue;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.tree.ExpressionNode;\n+import com.hubspot.jinjava.tree.Node;\n+import com.hubspot.jinjava.tree.TagNode;\n+import com.hubspot.jinjava.tree.TextNode;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.StringJoiner;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public class DeferredValueUtils {\n+  private static final String TEMPLATE_TAG_REGEX = \"(\\\\w+(?:\\\\.\\\\w+)*)\";\n+  private static final Pattern TEMPLATE_TAG_PATTERN = Pattern.compile(TEMPLATE_TAG_REGEX);\n+\n+  private static final Pattern SET_TAG_PATTERN = Pattern.compile(\n+    \"set \" + TEMPLATE_TAG_REGEX", "originalCommit": "de40fee56e3de6d789996caef47a952a5efe1a53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23451f32641509073ee918389e9f4dd11bc9a214", "chunk": "diff --git a/src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java b/src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java\nindex e1e370f3..ea1d9228 100644\n--- a/src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java\n+++ b/src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java\n\n@@ -6,6 +6,7 @@ import com.google.common.collect.Sets;\n import com.hubspot.jinjava.interpret.Context;\n import com.hubspot.jinjava.interpret.DeferredValue;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.lib.tag.SetTag;\n import com.hubspot.jinjava.tree.ExpressionNode;\n import com.hubspot.jinjava.tree.Node;\n import com.hubspot.jinjava.tree.TagNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczOTI4Ng==", "url": "https://github.com/HubSpot/jinjava/pull/438#discussion_r422739286", "bodyText": "I don't think this will work with multivariable assignments like set myvar1, myvar2, myvar3, myvar4 = ... I'm not sure you'd want to though as that might make things very complex.", "author": "boulter", "createdAt": "2020-05-11T01:48:01Z", "path": "src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.hubspot.jinjava.util;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValue;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.tree.ExpressionNode;\n+import com.hubspot.jinjava.tree.Node;\n+import com.hubspot.jinjava.tree.TagNode;\n+import com.hubspot.jinjava.tree.TextNode;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.StringJoiner;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public class DeferredValueUtils {\n+  private static final String TEMPLATE_TAG_REGEX = \"(\\\\w+(?:\\\\.\\\\w+)*)\";", "originalCommit": "de40fee56e3de6d789996caef47a952a5efe1a53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE2NjU0Ng==", "url": "https://github.com/HubSpot/jinjava/pull/438#discussion_r423166546", "bodyText": "Nice catch. I added this regex to be more specific for looking for sets as we don't have the existing context to compare matches to filter out noise. I think I will change this (and the other usages) to filter out any reserved tokens instead.", "author": "Joeoh", "createdAt": "2020-05-11T16:31:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczOTI4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "23451f32641509073ee918389e9f4dd11bc9a214", "chunk": "diff --git a/src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java b/src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java\nindex e1e370f3..ea1d9228 100644\n--- a/src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java\n+++ b/src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java\n\n@@ -6,6 +6,7 @@ import com.google.common.collect.Sets;\n import com.hubspot.jinjava.interpret.Context;\n import com.hubspot.jinjava.interpret.DeferredValue;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.lib.tag.SetTag;\n import com.hubspot.jinjava.tree.ExpressionNode;\n import com.hubspot.jinjava.tree.Node;\n import com.hubspot.jinjava.tree.TagNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczOTk0Nw==", "url": "https://github.com/HubSpot/jinjava/pull/438#discussion_r422739947", "bodyText": "Might be nicer to put these in fixture files like some of the other tests.", "author": "boulter", "createdAt": "2020-05-11T01:51:18Z", "path": "src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java", "diffHunk": "@@ -183,4 +187,169 @@ public void itDefersMacro() {\n     String output = interpreter.render(deferredOutput);\n     assertThat(output).isEqualTo(\"0,10,15,25\");\n   }\n+\n+  @Test\n+  public void itDefersAllVariablesUsedInDeferredNode() {\n+    String template = \"\";\n+    template += \"{% set varUsedInForScope = 'outside if statement' %}\";\n+    template += \"{% for item in resolved %}\"; //Creating an inner scope\n+    template += \"   {% if deferredValue %}\"; //Deferred Node\n+    template += \"     {{ varUsedInForScope }}\";\n+    template += \"     {% set varUsedInForScope = 'entered if statement' %}\";\n+    template += \"   {% endif %}\"; // end Deferred Node\n+    template += \"   {{ varUsedInForScope }}\";\n+    template += \"{% endfor %}\";\n+\n+    interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n+    String output = interpreter.render(template);\n+    Object varInScope = interpreter.getContext().get(\"varUsedInForScope\");\n+    assertThat(varInScope).isInstanceOf(DeferredValue.class);\n+    DeferredValue varInScopeDeferred = (DeferredValue) varInScope;\n+    assertThat(varInScopeDeferred.getOriginalValue()).isEqualTo(\"outside if statement\");\n+\n+    JinjavaInterpreter.popCurrent();\n+    HashMap<String, Object> deferredContext = DeferredValueUtils.getDeferredContextWithOriginalValues(\n+      interpreter.getContext()\n+    );\n+    deferredContext.forEach(interpreter.getContext()::put);\n+    String secondRender = interpreter.render(output);\n+    assertThat(secondRender)\n+      .isEqualTo(\"        outside if statement           entered if statement\");\n+\n+    interpreter.getContext().put(\"deferred\", DeferredValue.instance());\n+    interpreter.getContext().put(\"resolved\", \"resolvedValue\");\n+  }\n+\n+  @Test\n+  public void itDefersDependantVariables() {\n+    String template = \"\";\n+    template +=\n+      \"{% set resolved_variable = 'resolved' %} {% set deferred_variable = deferred + '-' + resolved_variable %}\";\n+    template += \"{{ deferred_variable }}\";\n+    interpreter.render(template);\n+    interpreter.getContext().get(\"resolved_variable\");\n+  }\n+\n+  @Test\n+  public void itDefersVariablesComparedAgainstDeferredVals() {\n+    String template = \"\";\n+    template += \"{% set testVar = 'testvalue' %}\";\n+    template += \"{% if deferred == testVar %} true {% else %} false {% endif %}\";\n+\n+    interpreter.render(template);\n+    Object varInScope = interpreter.getContext().get(\"testVar\");\n+    assertThat(varInScope).isInstanceOf(DeferredValue.class);\n+    DeferredValue varInScopeDeferred = (DeferredValue) varInScope;\n+    assertThat(varInScopeDeferred.getOriginalValue()).isEqualTo(\"testvalue\");\n+  }\n+\n+  @Test\n+  public void itPutsDeferredVariablesOnParentScopes() {\n+    String template = \"\";", "originalCommit": "de40fee56e3de6d789996caef47a952a5efe1a53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eabeeef1de3712310edf689b144c223d6f987bce", "chunk": "diff --git a/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java b/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java\nindex c59e2923..d536e55a 100644\n--- a/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java\n+++ b/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java\n\n@@ -331,7 +331,9 @@ public class DeferredTest {\n     String template = \"\";\n     template += \"   {% set reference = deferredValue %}\";\n     template += \"   {% if reference == 'resolved' %}\"; //Deferred Node\n-    template += \"     {% set varSetInside = imported.map[deferredValue2] %}\";\n+    template +=\n+      \"     {% set varSetInside = imported.map[deferredValue2.nonexistentprop] %}\";\n+    template += \"   {{ deferredValue2.nonexistentprop }}\";\n     template += \"   {% endif %}\"; // end Deferred Node\n     template += \"{{ varSetInside }}\";\n     JinjavaInterpreter.popCurrent();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc0MDAzMg==", "url": "https://github.com/HubSpot/jinjava/pull/438#discussion_r422740032", "bodyText": "comment needed?", "author": "boulter", "createdAt": "2020-05-11T01:51:45Z", "path": "src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java", "diffHunk": "@@ -183,4 +187,169 @@ public void itDefersMacro() {\n     String output = interpreter.render(deferredOutput);\n     assertThat(output).isEqualTo(\"0,10,15,25\");\n   }\n+\n+  @Test\n+  public void itDefersAllVariablesUsedInDeferredNode() {\n+    String template = \"\";\n+    template += \"{% set varUsedInForScope = 'outside if statement' %}\";\n+    template += \"{% for item in resolved %}\"; //Creating an inner scope\n+    template += \"   {% if deferredValue %}\"; //Deferred Node\n+    template += \"     {{ varUsedInForScope }}\";\n+    template += \"     {% set varUsedInForScope = 'entered if statement' %}\";\n+    template += \"   {% endif %}\"; // end Deferred Node\n+    template += \"   {{ varUsedInForScope }}\";\n+    template += \"{% endfor %}\";\n+\n+    interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n+    String output = interpreter.render(template);\n+    Object varInScope = interpreter.getContext().get(\"varUsedInForScope\");\n+    assertThat(varInScope).isInstanceOf(DeferredValue.class);\n+    DeferredValue varInScopeDeferred = (DeferredValue) varInScope;\n+    assertThat(varInScopeDeferred.getOriginalValue()).isEqualTo(\"outside if statement\");\n+\n+    JinjavaInterpreter.popCurrent();\n+    HashMap<String, Object> deferredContext = DeferredValueUtils.getDeferredContextWithOriginalValues(\n+      interpreter.getContext()\n+    );\n+    deferredContext.forEach(interpreter.getContext()::put);\n+    String secondRender = interpreter.render(output);\n+    assertThat(secondRender)\n+      .isEqualTo(\"        outside if statement           entered if statement\");\n+\n+    interpreter.getContext().put(\"deferred\", DeferredValue.instance());\n+    interpreter.getContext().put(\"resolved\", \"resolvedValue\");\n+  }\n+\n+  @Test\n+  public void itDefersDependantVariables() {\n+    String template = \"\";\n+    template +=\n+      \"{% set resolved_variable = 'resolved' %} {% set deferred_variable = deferred + '-' + resolved_variable %}\";\n+    template += \"{{ deferred_variable }}\";\n+    interpreter.render(template);\n+    interpreter.getContext().get(\"resolved_variable\");\n+  }\n+\n+  @Test\n+  public void itDefersVariablesComparedAgainstDeferredVals() {\n+    String template = \"\";\n+    template += \"{% set testVar = 'testvalue' %}\";\n+    template += \"{% if deferred == testVar %} true {% else %} false {% endif %}\";\n+\n+    interpreter.render(template);\n+    Object varInScope = interpreter.getContext().get(\"testVar\");\n+    assertThat(varInScope).isInstanceOf(DeferredValue.class);\n+    DeferredValue varInScopeDeferred = (DeferredValue) varInScope;\n+    assertThat(varInScopeDeferred.getOriginalValue()).isEqualTo(\"testvalue\");\n+  }\n+\n+  @Test\n+  public void itPutsDeferredVariablesOnParentScopes() {\n+    String template = \"\";\n+    template += \"{% for item in resolved %}\"; //Creating an inner scope\n+    template += \"   {% set varSetInside = 'inside first scope' %}\";\n+    template += \"   {% if deferredValue %}\"; //Deferred Node\n+    template += \"     {{ varSetInside }}\";\n+    template += \"   {% endif %}\"; // end Deferred Node\n+    template += \"{% endfor %}\";\n+\n+    interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n+    interpreter.render(template);\n+    assertThat(interpreter.getContext()).containsKey(\"varSetInside\");\n+    Object varSetInside = interpreter.getContext().get(\"varSetInside\");\n+    assertThat(varSetInside).isInstanceOf(DeferredValue.class);\n+    DeferredValue varSetInsideDeferred = (DeferredValue) varSetInside;\n+    assertThat(varSetInsideDeferred.getOriginalValue()).isEqualTo(\"inside first scope\");\n+  }\n+\n+  @Test\n+  public void puttingDeferredVariablesOnParentScopesDoesNotBreakSetTag() {\n+    String template = \"\";\n+    template += \"{% for item in resolved %}\"; //Creating an inner scope\n+    template += \"   {% set varSetInside = 'inside first scope' %}\";\n+    template += \"   {% if deferredValue %}\"; //Deferred Node\n+    template += \"     {{ varSetInside }}\";\n+    template += \"   {% endif %}\"; // end Deferred Node\n+    template += \"{% endfor %}\";\n+    template += \"{% for item in resolved %}\"; //Creating an inner scope\n+    template += \"   {% set varSetInside = 'inside first scope2' %}\";\n+    template += \"   {% if deferredValue %}\"; //Deferred Node\n+    template += \"     {{ varSetInside }}\";\n+    template += \"   {% endif %}\"; // end Deferred Node\n+    template += \"{% endfor %}\";\n+\n+    interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n+    String output = interpreter.render(template);\n+    assertThat(interpreter.getContext()).containsKey(\"varSetInside\");\n+    Object varSetInside = interpreter.getContext().get(\"varSetInside\");\n+    assertThat(varSetInside).isInstanceOf(DeferredValue.class);\n+    DeferredValue varSetInsideDeferred = (DeferredValue) varSetInside;\n+    assertThat(varSetInsideDeferred.getOriginalValue()).isEqualTo(\"inside first scope\");\n+\n+    JinjavaInterpreter.popCurrent();\n+    HashMap<String, Object> deferredContext = DeferredValueUtils.getDeferredContextWithOriginalValues(\n+      interpreter.getContext()\n+    );\n+    deferredContext.forEach(interpreter.getContext()::put);\n+    String secondRender = interpreter.render(output);\n+    assertThat(secondRender.trim())\n+      .isEqualTo(\"inside first scope              inside first scope2\".trim());\n+  }\n+\n+  @Test\n+  public void itMarksVariablesSetInDeferredBlockAsDeferred() {\n+    String template = \"\";\n+    template += \"   {% set reference = deferredValue %}\";\n+    template += \"   {% if reference == 'resolved' %}\"; //Deferred Node\n+    template += \"     {% set varSetInside = 'set inside' %}\";\n+    template += \"   {% endif %}\"; // end Deferred Node\n+    template += \"{{ varSetInside }}\";\n+    JinjavaInterpreter.popCurrent();\n+\n+    interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n+    String output = interpreter.render(template);\n+    assertThat(interpreter.getContext()).containsKey(\"varSetInside\");\n+    Object varSetInside = interpreter.getContext().get(\"varSetInside\");\n+    assertThat(varSetInside).isInstanceOf(DeferredValue.class);\n+    assertThat(output).contains(\"{{ varSetInside }}\");\n+  }\n+\n+  @Test\n+  public void itMarksVariablesUsedAsMapKeysAsDeferred() {\n+    /*    {% set week_number = contact.MOweekno %}", "originalCommit": "de40fee56e3de6d789996caef47a952a5efe1a53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eabeeef1de3712310edf689b144c223d6f987bce", "chunk": "diff --git a/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java b/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java\nindex c59e2923..d536e55a 100644\n--- a/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java\n+++ b/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java\n\n@@ -331,7 +331,9 @@ public class DeferredTest {\n     String template = \"\";\n     template += \"   {% set reference = deferredValue %}\";\n     template += \"   {% if reference == 'resolved' %}\"; //Deferred Node\n-    template += \"     {% set varSetInside = imported.map[deferredValue2] %}\";\n+    template +=\n+      \"     {% set varSetInside = imported.map[deferredValue2.nonexistentprop] %}\";\n+    template += \"   {{ deferredValue2.nonexistentprop }}\";\n     template += \"   {% endif %}\"; // end Deferred Node\n     template += \"{{ varSetInside }}\";\n     JinjavaInterpreter.popCurrent();\n"}}, {"oid": "eabeeef1de3712310edf689b144c223d6f987bce", "url": "https://github.com/HubSpot/jinjava/commit/eabeeef1de3712310edf689b144c223d6f987bce", "message": "Add tests", "committedDate": "2020-05-11T15:07:45Z", "type": "commit"}, {"oid": "a478a39b62472d13fc1445d5aba4fe658557ed4d", "url": "https://github.com/HubSpot/jinjava/commit/a478a39b62472d13fc1445d5aba4fe658557ed4d", "message": "Tidy up tests using fixtures", "committedDate": "2020-05-14T10:38:28Z", "type": "commit"}, {"oid": "23451f32641509073ee918389e9f4dd11bc9a214", "url": "https://github.com/HubSpot/jinjava/commit/23451f32641509073ee918389e9f4dd11bc9a214", "message": "Use set tag constant", "committedDate": "2020-05-14T10:38:39Z", "type": "commit"}, {"oid": "c06163b641e9c21ff9712db4bf045d7d7499ae34", "url": "https://github.com/HubSpot/jinjava/commit/c06163b641e9c21ff9712db4bf045d7d7499ae34", "message": "rename fixtures", "committedDate": "2020-05-14T14:34:08Z", "type": "commit"}, {"oid": "347d3835167334841e3380103abad81000af4b1e", "url": "https://github.com/HubSpot/jinjava/commit/347d3835167334841e3380103abad81000af4b1e", "message": "Simplify finding properties used", "committedDate": "2020-05-14T14:35:30Z", "type": "commit"}, {"oid": "07d9555a1b7bbf2f7c52cbd4184a337dc6b4268f", "url": "https://github.com/HubSpot/jinjava/commit/07d9555a1b7bbf2f7c52cbd4184a337dc6b4268f", "message": "Handle set tags more directly", "committedDate": "2020-05-14T15:28:07Z", "type": "commit"}]}