{"pr_number": 458, "pr_title": "Map Json string to Object instead of HashMap", "pr_createdAt": "2020-06-23T16:59:09Z", "pr_url": "https://github.com/HubSpot/jinjava/pull/458", "timeline": [{"oid": "6157ccac5ecc706739b1d0ce1fb69141bee9013c", "url": "https://github.com/HubSpot/jinjava/commit/6157ccac5ecc706739b1d0ce1fb69141bee9013c", "message": "Map Json string to JsonNode instead of HashMap", "committedDate": "2020-06-23T16:48:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQwMzE4OQ==", "url": "https://github.com/HubSpot/jinjava/pull/458#discussion_r444403189", "bodyText": "I think a better option for these tests is to render a jinjava template directly. See https://github.com/HubSpot/jinjava/blob/master/src/test/java/com/hubspot/jinjava/lib/filter/MinusTimeFilterTest.java#L37 as an example. That way we can make sure the API from Jinjava perspective is the same: for example: {% set obj = test|fromjson %} {{ obj.property }}", "author": "mattcoley", "createdAt": "2020-06-23T17:51:02Z", "path": "src/test/java/com/hubspot/jinjava/lib/filter/FromJsonFilterTest.java", "diffHunk": "@@ -46,21 +48,73 @@ public void itFailsWhenParameterIsNotString() {\n     filter.filter(nestedJson, interpreter);\n   }\n \n+  @Test\n+  public void itReadsEmptyJsonObjectString() {\n+    JsonNode node = (JsonNode) filter.filter(EMPTY_JSON_OBJECT, interpreter);\n+    assertThat(node.elements().hasNext()).isEqualTo(false);\n+  }\n+\n+  @Test\n+  public void itReadsStringAsObject() {\n+    JsonNode node = (JsonNode) filter.filter(NESTED_JSON, interpreter);\n+\n+    checkNestedJson(node);\n+  }\n+\n   @Test\n   public void itReadsSafeStringAsObject() {\n     SafeString nestedJson = new SafeString(NESTED_JSON);\n-    HashMap<String, Object> node = (HashMap<String, Object>) filter.filter(\n-      nestedJson,\n-      interpreter\n-    );\n-    checkedNestJson(node);\n+    JsonNode node = (JsonNode) filter.filter(nestedJson, interpreter);\n+\n+    checkNestedJson(node);\n   }\n \n-  private void checkedNestJson(HashMap<String, Object> node) {\n-    assertThat(node.get(\"first\")).isEqualTo(Arrays.asList(1, 2, 3));\n+  @Test\n+  public void itReadsEmptyJsonArrayString() {", "originalCommit": "6157ccac5ecc706739b1d0ce1fb69141bee9013c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d7a628a54b84b6cb6ef53b31fa9fcd863683a3bc", "chunk": "diff --git a/src/test/java/com/hubspot/jinjava/lib/filter/FromJsonFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/FromJsonFilterTest.java\nindex bd670493..970c0cc9 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/FromJsonFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/FromJsonFilterTest.java\n\n@@ -1,120 +1,103 @@\n package com.hubspot.jinjava.lib.filter;\n \n-import static java.util.Arrays.*;\n import static org.assertj.core.api.Assertions.assertThat;\n \n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableMap;\n import com.hubspot.jinjava.Jinjava;\n import com.hubspot.jinjava.interpret.InvalidInputException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n-import com.hubspot.jinjava.objects.SafeString;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.List;\n+import java.util.Map;\n import org.junit.Before;\n import org.junit.Test;\n \n public class FromJsonFilterTest {\n-  private static final String TRIVIAL_JSON_ARRAY = \"[\\\"one\\\",\\\"two\\\",\\\"three\\\"]\";\n-  private static final String NESTED_JSON =\n-    \"{\\\"first\\\":[1,2,3],\\\"nested\\\":{\\\"second\\\":\\\"string\\\",\\\"third\\\":4}}\";\n-  private static final String DEEPLY_NESTED_ARRAY = \"{\\\"a\\\":{\\\"b\\\":{\\\"c\\\": [1,2,3]}}}\";\n-  private static final String EMPTY_JSON_OBJECT = \"{}\";\n-  private static final String EMPTY_JSON_ARRAY = \"[]\";\n-\n-  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n-\n   private JinjavaInterpreter interpreter;\n+  private Jinjava jinjava;\n   private FromJsonFilter filter;\n \n   @Before\n   public void setup() {\n-    interpreter = new Jinjava().newInterpreter();\n+    jinjava = new Jinjava();\n+    interpreter = jinjava.newInterpreter();\n     filter = new FromJsonFilter();\n   }\n \n   @Test(expected = InvalidInputException.class)\n   public void itFailsWhenStringIsNotJson() {\n-    String nestedJson = \"blah\";\n+    String json = \"blah\";\n \n-    filter.filter(nestedJson, interpreter);\n+    filter.filter(json, interpreter);\n   }\n \n   @Test(expected = InvalidInputException.class)\n   public void itFailsWhenParameterIsNotString() {\n-    Integer nestedJson = 456;\n+    Integer json = 456;\n \n-    filter.filter(nestedJson, interpreter);\n+    filter.filter(json, interpreter);\n   }\n \n-  @Test\n-  public void itReadsEmptyJsonObjectString() {\n-    JsonNode node = (JsonNode) filter.filter(EMPTY_JSON_OBJECT, interpreter);\n-    assertThat(node.elements().hasNext()).isEqualTo(false);\n-  }\n-\n-  @Test\n-  public void itReadsStringAsObject() {\n-    JsonNode node = (JsonNode) filter.filter(NESTED_JSON, interpreter);\n+  @Test(expected = InvalidInputException.class)\n+  public void itFailsWhenJsonIsInvalid() {\n+    String json = \"{[ }]\";\n \n-    checkNestedJson(node);\n+    filter.filter(json, interpreter);\n   }\n \n   @Test\n-  public void itReadsSafeStringAsObject() {\n-    SafeString nestedJson = new SafeString(NESTED_JSON);\n-    JsonNode node = (JsonNode) filter.filter(nestedJson, interpreter);\n+  public void itRendersTrivialJsonObject() {\n+    String trivialJsonObject = \"{\\\"a\\\":100,\\\"b\\\":200}\";\n \n-    checkNestedJson(node);\n-  }\n+    Map<String, Object> vars = ImmutableMap.of(\"test\", trivialJsonObject);\n+    String template = \"{% set obj = test | fromjson %}{{ obj.a }} {{ obj.b }}\";\n+    String renderedJinjava = jinjava.render(template, vars);\n \n-  @Test\n-  public void itReadsEmptyJsonArrayString() {\n-    JsonNode node = (JsonNode) filter.filter(EMPTY_JSON_ARRAY, interpreter);\n-    assertThat(node.elements().hasNext()).isEqualTo(false);\n+    assertThat(renderedJinjava).isEqualTo(\"100 200\");\n   }\n \n   @Test\n-  public void itReadsStringAsList() {\n-    JsonNode node = (JsonNode) filter.filter(TRIVIAL_JSON_ARRAY, interpreter);\n+  public void itRendersTrivialJsonArray() {\n+    String trivialJsonArray = \"[\\\"one\\\",\\\"two\\\",\\\"three\\\"]\";\n+\n+    Map<String, Object> vars = ImmutableMap.of(\"test\", trivialJsonArray);\n+    String template =\n+      \"{% set obj = test | fromjson %}{{ obj[0] }} {{ obj[1] }} {{ obj[2] }}\";\n+    String renderedJinjava = jinjava.render(template, vars);\n \n-    List<String> nodeAsList = OBJECT_MAPPER.convertValue(node, List.class);\n-    assertThat(nodeAsList.toArray())\n-      .containsExactly(Arrays.asList(\"one\", \"two\", \"three\").toArray());\n+    assertThat(renderedJinjava).isEqualTo(\"one two three\");\n   }\n \n   @Test\n-  public void itReadsSafeStringArrayAsObject() {\n-    SafeString arrayJson = new SafeString(TRIVIAL_JSON_ARRAY);\n-    JsonNode node = (JsonNode) filter.filter(arrayJson, interpreter);\n+  public void itRendersNestedObjectJson() {\n+    String nestedObject = \"{\\\"first\\\": 1,\\\"nested\\\":{\\\"second\\\":\\\"string\\\",\\\"third\\\":4}}\";\n \n-    List<String> nodeAsList = OBJECT_MAPPER.convertValue(node, List.class);\n-    assertThat(nodeAsList.toArray())\n-      .containsExactly(Arrays.asList(\"one\", \"two\", \"three\").toArray());\n+    Map<String, Object> vars = ImmutableMap.of(\"test\", nestedObject);\n+    String template =\n+      \"{% set obj = test | fromjson %}{{ obj.first }} {{ obj.nested.second }} {{ obj.nested.third }}\";\n+    String renderedJinjava = jinjava.render(template, vars);\n+\n+    assertThat(renderedJinjava).isEqualTo(\"1 string 4\");\n   }\n \n   @Test\n-  public void itReadsDeeplyNestedArrayString() {\n-    JsonNode node = (JsonNode) filter.filter(DEEPLY_NESTED_ARRAY, interpreter);\n-    JsonNode target = node.get(\"a\").get(\"b\").get(\"c\");\n+  public void itRendersNestedJsonWithArray() {\n+    String nestedObjectWithArray = \"{\\\"a\\\":{\\\"b\\\":{\\\"c\\\":[1,2,3]}}}\";\n+\n+    Map<String, Object> vars = ImmutableMap.of(\"test\", nestedObjectWithArray);\n+    String template = \"{% set obj = test | fromjson %}{{ obj.a.b.c }}\";\n+    String renderedJinjava = jinjava.render(template, vars);\n \n-    List<String> targetAsList = OBJECT_MAPPER.convertValue(target, List.class);\n-    assertThat(targetAsList.toArray()).containsExactly(Arrays.asList(1, 2, 3).toArray());\n+    assertThat(renderedJinjava).isEqualTo(\"[1, 2, 3]\");\n   }\n \n-  private void checkNestedJson(JsonNode node) {\n-    assertThat(node.get(\"first\").isArray());\n+  @Test\n+  public void itRendersArrayOfObjects() {\n+    String arrayOfObjects = \"[{\\\"a\\\":1},{\\\"a\\\":2},{\\\"a\\\": 3}]\";\n \n-    List<Integer> firstFieldValue = OBJECT_MAPPER.convertValue(\n-      node.get(\"first\"),\n-      List.class\n-    );\n-    assertThat(firstFieldValue.toArray())\n-      .containsExactly(Arrays.asList(1, 2, 3).toArray());\n+    Map<String, Object> vars = ImmutableMap.of(\"test\", arrayOfObjects);\n+    String template =\n+      \"{% set obj = test | fromjson %}{{ obj[0].a }} {{ obj[1].a }} {{ obj[2].a }}\";\n+    String renderedJinjava = jinjava.render(template, vars);\n \n-    JsonNode nested = node.get(\"nested\");\n-    assertThat(nested.get(\"second\").asText()).isEqualTo(\"string\");\n-    assertThat(nested.get(\"third\").asInt()).isEqualTo(4);\n+    assertThat(renderedJinjava).isEqualTo(\"1 2 3\");\n   }\n }\n"}}, {"oid": "d7a628a54b84b6cb6ef53b31fa9fcd863683a3bc", "url": "https://github.com/HubSpot/jinjava/commit/d7a628a54b84b6cb6ef53b31fa9fcd863683a3bc", "message": "Map Json string to Object instead of JsonNode, rewrite tests", "committedDate": "2020-06-23T20:40:48Z", "type": "commit"}, {"oid": "266e7700c00a7104c9c84b0f26ae20f015bf68bc", "url": "https://github.com/HubSpot/jinjava/commit/266e7700c00a7104c9c84b0f26ae20f015bf68bc", "message": "Trigger", "committedDate": "2020-06-25T14:26:40Z", "type": "commit"}, {"oid": "5a7713018a58e459af8458c47303de9f17fc1323", "url": "https://github.com/HubSpot/jinjava/commit/5a7713018a58e459af8458c47303de9f17fc1323", "message": "Travis: wait for maven", "committedDate": "2020-06-25T16:35:46Z", "type": "commit"}]}