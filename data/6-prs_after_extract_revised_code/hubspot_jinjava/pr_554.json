{"pr_number": 554, "pr_title": "Implement EagerForTag", "pr_createdAt": "2020-11-30T23:01:02Z", "pr_url": "https://github.com/HubSpot/jinjava/pull/554", "timeline": [{"oid": "c28417bafb4a962bd57ec47f34c88c5e29c845d5", "url": "https://github.com/HubSpot/jinjava/commit/c28417bafb4a962bd57ec47f34c88c5e29c845d5", "message": "Checkout eager for tag", "committedDate": "2020-11-30T20:59:41Z", "type": "commit"}, {"oid": "597dbe74b7196a15955446d38247ebb9dc9e7f63", "url": "https://github.com/HubSpot/jinjava/commit/597dbe74b7196a15955446d38247ebb9dc9e7f63", "message": "Unignore passing tests for eager for tag", "committedDate": "2020-11-30T21:01:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIwMjg2NA==", "url": "https://github.com/HubSpot/jinjava/pull/554#discussion_r533202864", "bodyText": "Maybe join this string just once", "author": "Joeoh", "createdAt": "2020-12-01T09:19:57Z", "path": "src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import com.hubspot.jinjava.lib.tag.ForTag;\n+import com.hubspot.jinjava.tree.parse.TagToken;\n+import com.hubspot.jinjava.util.ChunkResolver;\n+import com.hubspot.jinjava.util.HelperStringTokenizer;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.StringJoiner;\n+\n+public class EagerForTag extends EagerTagDecorator<ForTag> {\n+\n+  public EagerForTag() {\n+    super(new ForTag());\n+  }\n+\n+  public EagerForTag(ForTag forTag) {\n+    super(forTag);\n+  }\n+\n+  @Override\n+  public String getEagerTagImage(TagToken tagToken, JinjavaInterpreter interpreter) {\n+    List<String> helperTokens = new HelperStringTokenizer(\n+      ForTag.getWhitespaceAdjustedHelpers(tagToken.getHelpers())\n+    )\n+      .splitComma(true)\n+      .allTokens();\n+    List<String> loopVars = getTag().getLoopVars(helperTokens);\n+    if (loopVars.size() >= helperTokens.size()) {\n+      throw new TemplateSyntaxException(\n+        tagToken.getHelpers().trim(),\n+        \"Tag 'for' expects valid 'in' clause, got: \" + tagToken.getHelpers(),\n+        tagToken.getLineNumber(),\n+        tagToken.getStartPosition()\n+      );\n+    }\n+\n+    String loopExpression = getTag().getLoopExpression(helperTokens, loopVars);\n+    ChunkResolver chunkResolver = new ChunkResolver(\n+      loopExpression,\n+      tagToken,\n+      interpreter\n+    );\n+\n+    StringJoiner joiner = new StringJoiner(\" \");\n+    joiner\n+      .add(tagToken.getSymbols().getExpressionStartWithTag())\n+      .add(tagToken.getTagName())\n+      .add(String.join(\", \", loopVars))\n+      .add(\"in\")\n+      .add(chunkResolver.resolveChunks())\n+      .add(tagToken.getSymbols().getExpressionEndWithTag());\n+    String newlyDeferredFunctionImages = reconstructFromContextBeforeDeferring(\n+      chunkResolver.getDeferredWords(),\n+      interpreter\n+    );\n+\n+    interpreter\n+      .getContext()\n+      .handleEagerToken(\n+        new EagerToken(\n+          new TagToken(\n+            joiner.toString(),\n+            tagToken.getLineNumber(),\n+            tagToken.getStartPosition(),\n+            tagToken.getSymbols()\n+          ),\n+          chunkResolver.getDeferredWords(),\n+          new HashSet<>(loopVars)\n+        )\n+      );\n+    return (newlyDeferredFunctionImages + joiner.toString());", "originalCommit": "597dbe74b7196a15955446d38247ebb9dc9e7f63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIxNzI3Ng==", "url": "https://github.com/HubSpot/jinjava/pull/554#discussion_r533217276", "bodyText": "Also, should we be using the LengthLimitingStringBuilder here too? I'm thinking of something like {% for i in range(0,MAX_INT) %} with a large body where the output could become huge", "author": "Joeoh", "createdAt": "2020-12-01T09:29:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIwMjg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzMjk4NQ==", "url": "https://github.com/HubSpot/jinjava/pull/554#discussion_r533432985", "bodyText": "That's a good call", "author": "jasmith-hs", "createdAt": "2020-12-01T14:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIwMjg2NA=="}], "type": "inlineReview", "revised_code": {"commit": "a538667c14d05da3fb4dcec222f7f8d29c98da75", "chunk": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\nindex 76ec5738..dcada50f 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\n\n@@ -6,9 +6,9 @@ import com.hubspot.jinjava.lib.tag.ForTag;\n import com.hubspot.jinjava.tree.parse.TagToken;\n import com.hubspot.jinjava.util.ChunkResolver;\n import com.hubspot.jinjava.util.HelperStringTokenizer;\n+import com.hubspot.jinjava.util.LengthLimitingStringJoiner;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.StringJoiner;\n \n public class EagerForTag extends EagerTagDecorator<ForTag> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0ODA0OQ==", "url": "https://github.com/HubSpot/jinjava/pull/554#discussion_r534248049", "bodyText": "There's a guava joiner which I see used more commonly. One advantage is that you can declare it statically. I'm not sure if it's worth changing to that one.", "author": "boulter", "createdAt": "2020-12-02T15:17:35Z", "path": "src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import com.hubspot.jinjava.lib.tag.ForTag;\n+import com.hubspot.jinjava.tree.parse.TagToken;\n+import com.hubspot.jinjava.util.ChunkResolver;\n+import com.hubspot.jinjava.util.HelperStringTokenizer;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.StringJoiner;\n+\n+public class EagerForTag extends EagerTagDecorator<ForTag> {\n+\n+  public EagerForTag() {\n+    super(new ForTag());\n+  }\n+\n+  public EagerForTag(ForTag forTag) {\n+    super(forTag);\n+  }\n+\n+  @Override\n+  public String getEagerTagImage(TagToken tagToken, JinjavaInterpreter interpreter) {\n+    List<String> helperTokens = new HelperStringTokenizer(\n+      ForTag.getWhitespaceAdjustedHelpers(tagToken.getHelpers())\n+    )\n+      .splitComma(true)\n+      .allTokens();\n+    List<String> loopVars = getTag().getLoopVars(helperTokens);\n+    if (loopVars.size() >= helperTokens.size()) {\n+      throw new TemplateSyntaxException(\n+        tagToken.getHelpers().trim(),\n+        \"Tag 'for' expects valid 'in' clause, got: \" + tagToken.getHelpers(),\n+        tagToken.getLineNumber(),\n+        tagToken.getStartPosition()\n+      );\n+    }\n+\n+    String loopExpression = getTag().getLoopExpression(helperTokens, loopVars);\n+    ChunkResolver chunkResolver = new ChunkResolver(\n+      loopExpression,\n+      tagToken,\n+      interpreter\n+    );\n+\n+    StringJoiner joiner = new StringJoiner(\" \");", "originalCommit": "597dbe74b7196a15955446d38247ebb9dc9e7f63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzMTE4Mg==", "url": "https://github.com/HubSpot/jinjava/pull/554#discussion_r534331182", "bodyText": "I'll be swapping these usages out with the length limiting joiner that I'm adding so I will see which makes more sense to use in that class.\nMaybe I'll run a simple performance test to see which is faster", "author": "jasmith-hs", "createdAt": "2020-12-02T17:02:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0ODA0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3NDU4Mg==", "url": "https://github.com/HubSpot/jinjava/pull/554#discussion_r534374582", "bodyText": "Looks like the java.util.StringJoiner is 2-3x faster than the guava joiner so I'll stick with it.\nTime to join 10k and 1 million a characters with a , character:\n\n\n\nNumber of elements\nStringJoiner\nGuava Joiner\n\n\n\n\n10000\n1 ms\n8 ms\n\n\n1000000\n17 ms\n51 ms", "author": "jasmith-hs", "createdAt": "2020-12-02T18:05:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0ODA0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4NzM5MA==", "url": "https://github.com/HubSpot/jinjava/pull/554#discussion_r534387390", "bodyText": "Interesting. Thanks for verifying. The JDK StringJoiner was introduced in Java 8, so maybe it's just historical that we use it. That said, the guava version has some nice features like skipNulls", "author": "boulter", "createdAt": "2020-12-02T18:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0ODA0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a538667c14d05da3fb4dcec222f7f8d29c98da75", "chunk": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\nindex 76ec5738..dcada50f 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\n\n@@ -6,9 +6,9 @@ import com.hubspot.jinjava.lib.tag.ForTag;\n import com.hubspot.jinjava.tree.parse.TagToken;\n import com.hubspot.jinjava.util.ChunkResolver;\n import com.hubspot.jinjava.util.HelperStringTokenizer;\n+import com.hubspot.jinjava.util.LengthLimitingStringJoiner;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.StringJoiner;\n \n public class EagerForTag extends EagerTagDecorator<ForTag> {\n \n"}}, {"oid": "d4a08fd0a50d52e70ecabfb168e5e07651b1c410", "url": "https://github.com/HubSpot/jinjava/commit/d4a08fd0a50d52e70ecabfb168e5e07651b1c410", "message": "Merge branch 'eager-expression-node' of github.com:HubSpot/jinjava into eager-for", "committedDate": "2020-12-03T19:55:51Z", "type": "commit"}, {"oid": "a538667c14d05da3fb4dcec222f7f8d29c98da75", "url": "https://github.com/HubSpot/jinjava/commit/a538667c14d05da3fb4dcec222f7f8d29c98da75", "message": "Add length limiting in eager for tag", "committedDate": "2020-12-03T20:05:40Z", "type": "commit"}, {"oid": "18a67fe9b1d88acf0338d2278872002bd8e099a3", "url": "https://github.com/HubSpot/jinjava/commit/18a67fe9b1d88acf0338d2278872002bd8e099a3", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into eager-for", "committedDate": "2020-12-09T17:51:28Z", "type": "commit"}, {"oid": "55c99a07ba989a59965cacd34238c8d7c13057db", "url": "https://github.com/HubSpot/jinjava/commit/55c99a07ba989a59965cacd34238c8d7c13057db", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into eager-for", "committedDate": "2020-12-09T21:11:03Z", "type": "commit"}, {"oid": "6c81edca522b45009824b971e2b09b66c944e24b", "url": "https://github.com/HubSpot/jinjava/commit/6c81edca522b45009824b971e2b09b66c944e24b", "message": "Use execution mode singleton", "committedDate": "2020-12-09T21:12:27Z", "type": "commit"}]}