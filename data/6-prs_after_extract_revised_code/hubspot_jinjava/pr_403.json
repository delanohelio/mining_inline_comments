{"pr_number": 403, "pr_title": "evalulate variables in dict keys", "pr_createdAt": "2020-02-18T23:05:41Z", "pr_url": "https://github.com/HubSpot/jinjava/pull/403", "timeline": [{"oid": "92bf989b536c53ab14f4b13fd91455b8faef3f64", "url": "https://github.com/HubSpot/jinjava/commit/92bf989b536c53ab14f4b13fd91455b8faef3f64", "message": "evalulate variables in dict keys", "committedDate": "2020-02-18T23:03:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MDA1Ng==", "url": "https://github.com/HubSpot/jinjava/pull/403#discussion_r380990056", "bodyText": "this just confirms that variables do work in lists.", "author": "boulter", "createdAt": "2020-02-18T23:08:21Z", "path": "src/test/java/com/hubspot/jinjava/objects/collections/PyListTest.java", "diffHunk": "@@ -105,4 +105,11 @@ public void itReturnsNegativeOneForMissingObjectForIndexWithinBounds() {\n     assertThat(jinjava.render(\"{% set test = [10, 20, 30, 10, 20, 30] %}\" +\n         \"{{ test.index(999, 1, 5) }}\", Collections.emptyMap())).isEqualTo(\"-1\");\n   }\n+\n+  @Test\n+  public void itInterpretsVariables() {", "originalCommit": "92bf989b536c53ab14f4b13fd91455b8faef3f64", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "4233e8d7ea36c37b43dccae3ac1095a19b2f1cd9", "url": "https://github.com/HubSpot/jinjava/commit/4233e8d7ea36c37b43dccae3ac1095a19b2f1cd9", "message": "ignore missing keys", "committedDate": "2020-02-18T23:15:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MzEzMQ==", "url": "https://github.com/HubSpot/jinjava/pull/403#discussion_r380993131", "bodyText": "A possible fallback here to preserve the existing behavior would be to return the identifier name when the key evaluates to null.", "author": "boulter", "createdAt": "2020-02-18T23:17:52Z", "path": "src/main/java/com/hubspot/jinjava/el/ext/AstDict.java", "diffHunk": "@@ -33,7 +33,11 @@ public Object eval(Bindings bindings, ELContext context) {\n       if (entry.getKey() instanceof AstString) {\n         key = Objects.toString(entry.getKey().eval(bindings, context));\n       } else if (entry.getKey() instanceof AstIdentifier) {\n-        key = ((AstIdentifier) entry.getKey()).getName();\n+        Object result = entry.getKey().eval(bindings, context);\n+        if (result == null) {\n+          continue;", "originalCommit": "4233e8d7ea36c37b43dccae3ac1095a19b2f1cd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxNzk0Nw==", "url": "https://github.com/HubSpot/jinjava/pull/403#discussion_r382217947", "bodyText": "I think the fallback is safer.", "author": "mattcoley", "createdAt": "2020-02-20T19:42:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MzEzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f5d28744e4752c9fdb2e5ee64777b8add5a4b9db", "chunk": "diff --git a/src/main/java/com/hubspot/jinjava/el/ext/AstDict.java b/src/main/java/com/hubspot/jinjava/el/ext/AstDict.java\nindex 1bc54814..0a4a15c0 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/AstDict.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/AstDict.java\n\n@@ -28,18 +28,18 @@ public class AstDict extends AstLiteral {\n     Map<String, Object> resolved = new LinkedHashMap<>();\n \n     for (Map.Entry<AstNode, AstNode> entry : dict.entrySet()) {\n+      AstNode entryKey = entry.getKey();\n       String key;\n \n-      if (entry.getKey() instanceof AstString) {\n-        key = Objects.toString(entry.getKey().eval(bindings, context));\n-      } else if (entry.getKey() instanceof AstIdentifier) {\n-        Object result = entry.getKey().eval(bindings, context);\n-        if (result == null) {\n-          continue;\n-        }\n-        key = result.toString();\n+      if (entryKey instanceof AstString) {\n+        key = Objects.toString(entryKey.eval(bindings, context));\n+      } else if (entryKey instanceof AstIdentifier) {\n+        Object result = entryKey.eval(bindings, context);\n+        key = result == null\n+            ? ((AstIdentifier) entryKey).getName() // this is for compatibility with the previous behavior\n+            : result.toString();\n       } else {\n-        throw new TemplateStateException(\"Dict key must be a string or identifier, was: \" + entry.getKey());\n+        throw new TemplateStateException(\"Dict key must be a string or identifier, was: \" + entryKey);\n       }\n \n       resolved.put(key, entry.getValue().eval(bindings, context));\n"}}, {"oid": "6ed2dfb1544f8e89be5ee96c2a8f0d3273cdf427", "url": "https://github.com/HubSpot/jinjava/commit/6ed2dfb1544f8e89be5ee96c2a8f0d3273cdf427", "message": "literal keys now must be quoted", "committedDate": "2020-02-19T15:23:03Z", "type": "commit"}, {"oid": "f5d28744e4752c9fdb2e5ee64777b8add5a4b9db", "url": "https://github.com/HubSpot/jinjava/commit/f5d28744e4752c9fdb2e5ee64777b8add5a4b9db", "message": "fall back to previous behavior", "committedDate": "2020-02-24T18:10:22Z", "type": "commit"}]}