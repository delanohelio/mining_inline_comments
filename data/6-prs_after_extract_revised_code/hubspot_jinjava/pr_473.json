{"pr_number": 473, "pr_title": "Divide by zero", "pr_createdAt": "2020-08-13T18:21:06Z", "pr_url": "https://github.com/HubSpot/jinjava/pull/473", "timeline": [{"oid": "15a97c95600d4ad52d09f48e277558cad2a234ea", "url": "https://github.com/HubSpot/jinjava/commit/15a97c95600d4ad52d09f48e277558cad2a234ea", "message": "Make regular division an extended operator", "committedDate": "2020-08-13T18:05:16Z", "type": "commit"}, {"oid": "d832767a08da98a2078cd4365c0d27a07b0b6397", "url": "https://github.com/HubSpot/jinjava/commit/d832767a08da98a2078cd4365c0d27a07b0b6397", "message": "Merge branch 'master' into divide-by-zero", "committedDate": "2020-08-13T18:11:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5OTgxMQ==", "url": "https://github.com/HubSpot/jinjava/pull/473#discussion_r470199811", "bodyText": "TODO: don't forget to delete!", "author": "boulter", "createdAt": "2020-08-13T19:34:28Z", "path": "src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.hubspot.jinjava.el.ext;\n+\n+import de.odysseus.el.misc.TypeConverter;\n+import de.odysseus.el.tree.impl.Parser.ExtensionHandler;\n+import de.odysseus.el.tree.impl.Parser.ExtensionPoint;\n+import de.odysseus.el.tree.impl.Scanner;\n+import de.odysseus.el.tree.impl.ast.AstBinary;\n+import de.odysseus.el.tree.impl.ast.AstBinary.SimpleOperator;\n+import de.odysseus.el.tree.impl.ast.AstNode;\n+\n+public class RegularDivOperator extends SimpleOperator {\n+  public static final Scanner.ExtensionToken TOKEN = new Scanner.ExtensionToken(\"/\");\n+  public static final RegularDivOperator OP = new RegularDivOperator();\n+\n+  @Override\n+  protected Object apply(TypeConverter converter, Object a, Object b) {\n+    if (a == null || b == null) {\n+      throw new IllegalArgumentException(\"Division argument may not be null\");\n+    }\n+\n+    // Debugging support only -- Delete me", "originalCommit": "d832767a08da98a2078cd4365c0d27a07b0b6397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2OTMwOA==", "url": "https://github.com/HubSpot/jinjava/pull/473#discussion_r471469308", "bodyText": "Deleted", "author": "bszabo", "createdAt": "2020-08-17T13:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5OTgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4OTI4Mg==", "url": "https://github.com/HubSpot/jinjava/pull/473#discussion_r471489282", "bodyText": "I did have a question earlier on, when I was assuming thatRegularDivOperator should return a long when dividing long arguments and that it should return a double when dividing double or mixed arguments. When I tried coding RegularDivOperator that way I got a regression failure on the ExpressionResolverTest.itResolvesMathVals(), which was expecting a result of \"5.0\" when dividing 15L by 3L. Switching to having RegularDivOperator always return a double made the question about how to simply and reliably format the result vanish. It also fixed the regression and yielded a clean build.", "author": "bszabo", "createdAt": "2020-08-17T13:45:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5OTgxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "aca835942eae909619a749045d571b43f000c40a", "chunk": "diff --git a/src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java b/src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java\nindex e4ebfa61..9e6e1290 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java\n\n@@ -18,16 +18,9 @@ public class RegularDivOperator extends SimpleOperator {\n       throw new IllegalArgumentException(\"Division argument may not be null\");\n     }\n \n-    // Debugging support only -- Delete me\n-    //    Type typeA = a.getClass();\n-    //    String typeNameA = typeA.getTypeName();\n-    //    Type typeB = b.getClass();\n-    //    String typeNameB = typeB.getTypeName();\n-    // End of debugging support\n-\n     Number numA = (Number) a;\n     Number numB = (Number) b;\n-    if (numB.longValue() == 0 || numB.doubleValue() == 0.0) {\n+    if (numB.doubleValue() == 0.0) {\n       throw new IllegalArgumentException(\"Divisor may not be zero\");\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMDczNw==", "url": "https://github.com/HubSpot/jinjava/pull/473#discussion_r470200737", "bodyText": "we favor rspec-style test names like itDividesLongsWithNonZeroDivisor", "author": "boulter", "createdAt": "2020-08-13T19:36:18Z", "path": "src/test/java/com/hubspot/jinjava/el/ext/RegularDivTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.hubspot.jinjava.el.ext;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.hubspot.jinjava.Jinjava;\n+import java.util.HashMap;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class RegularDivTest {\n+  private Jinjava jinja;\n+\n+  @Before\n+  public void setUp() {\n+    jinja = new Jinjava();\n+  }\n+\n+  @Test\n+  public void okOnLongDivisionWithNonZeroDivisor() {", "originalCommit": "d832767a08da98a2078cd4365c0d27a07b0b6397", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aca835942eae909619a749045d571b43f000c40a", "chunk": "diff --git a/src/test/java/com/hubspot/jinjava/el/ext/RegularDivTest.java b/src/test/java/com/hubspot/jinjava/el/ext/RegularDivTest.java\nindex 9de5b7c1..35e32d49 100644\n--- a/src/test/java/com/hubspot/jinjava/el/ext/RegularDivTest.java\n+++ b/src/test/java/com/hubspot/jinjava/el/ext/RegularDivTest.java\n\n@@ -16,12 +16,12 @@ public class RegularDivTest {\n   }\n \n   @Test\n-  public void okOnLongDivisionWithNonZeroDivisor() {\n+  public void itDividesWithNonZeroLongDivisor() {\n     assertEquals(jinja.render(\"{% set x = 10 / 2%}{{x}}\", new HashMap<>()), \"5.0\");\n   }\n \n   @Test\n-  public void okOnDoubleDivisionWithNonZeroDivisor() {\n+  public void itDividesWithNonZeroDoubleDivisor() {\n     assertEquals(jinja.render(\"{% set x = 10.0 / 2.0%}{{x}}\", new HashMap<>()), \"5.0\");\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMTIzOA==", "url": "https://github.com/HubSpot/jinjava/pull/473#discussion_r470201238", "bodyText": "Does the normal division operator return division of longs with a decimal point?", "author": "boulter", "createdAt": "2020-08-13T19:37:18Z", "path": "src/test/java/com/hubspot/jinjava/el/ext/RegularDivTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.hubspot.jinjava.el.ext;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.hubspot.jinjava.Jinjava;\n+import java.util.HashMap;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class RegularDivTest {\n+  private Jinjava jinja;\n+\n+  @Before\n+  public void setUp() {\n+    jinja = new Jinjava();\n+  }\n+\n+  @Test\n+  public void okOnLongDivisionWithNonZeroDivisor() {\n+    assertEquals(jinja.render(\"{% set x = 10 / 2%}{{x}}\", new HashMap<>()), \"5.0\");", "originalCommit": "d832767a08da98a2078cd4365c0d27a07b0b6397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5MDc3Ng==", "url": "https://github.com/HubSpot/jinjava/pull/473#discussion_r471490776", "bodyText": "(Cut-and-pasted from my reply to \"Did you have a question ...\" comment above). When I tried coding RegularDivOperator to return a long on division of long arguments I got a regression failure on the ExpressionResolverTest.itResolvesMathVals(), which was expecting a result of \"5.0\" when dividing 15L by 3L. Switching to having RegularDivOperator always return a double fixed the regression and yielded a clean build.", "author": "bszabo", "createdAt": "2020-08-17T13:48:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMTIzOA=="}], "type": "inlineReview", "revised_code": {"commit": "aca835942eae909619a749045d571b43f000c40a", "chunk": "diff --git a/src/test/java/com/hubspot/jinjava/el/ext/RegularDivTest.java b/src/test/java/com/hubspot/jinjava/el/ext/RegularDivTest.java\nindex 9de5b7c1..35e32d49 100644\n--- a/src/test/java/com/hubspot/jinjava/el/ext/RegularDivTest.java\n+++ b/src/test/java/com/hubspot/jinjava/el/ext/RegularDivTest.java\n\n@@ -16,12 +16,12 @@ public class RegularDivTest {\n   }\n \n   @Test\n-  public void okOnLongDivisionWithNonZeroDivisor() {\n+  public void itDividesWithNonZeroLongDivisor() {\n     assertEquals(jinja.render(\"{% set x = 10 / 2%}{{x}}\", new HashMap<>()), \"5.0\");\n   }\n \n   @Test\n-  public void okOnDoubleDivisionWithNonZeroDivisor() {\n+  public void itDividesWithNonZeroDoubleDivisor() {\n     assertEquals(jinja.render(\"{% set x = 10.0 / 2.0%}{{x}}\", new HashMap<>()), \"5.0\");\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMTcxOA==", "url": "https://github.com/HubSpot/jinjava/pull/473#discussion_r470201718", "bodyText": "don't you only need to check the doubleValue?", "author": "boulter", "createdAt": "2020-08-13T19:38:07Z", "path": "src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.hubspot.jinjava.el.ext;\n+\n+import de.odysseus.el.misc.TypeConverter;\n+import de.odysseus.el.tree.impl.Parser.ExtensionHandler;\n+import de.odysseus.el.tree.impl.Parser.ExtensionPoint;\n+import de.odysseus.el.tree.impl.Scanner;\n+import de.odysseus.el.tree.impl.ast.AstBinary;\n+import de.odysseus.el.tree.impl.ast.AstBinary.SimpleOperator;\n+import de.odysseus.el.tree.impl.ast.AstNode;\n+\n+public class RegularDivOperator extends SimpleOperator {\n+  public static final Scanner.ExtensionToken TOKEN = new Scanner.ExtensionToken(\"/\");\n+  public static final RegularDivOperator OP = new RegularDivOperator();\n+\n+  @Override\n+  protected Object apply(TypeConverter converter, Object a, Object b) {\n+    if (a == null || b == null) {\n+      throw new IllegalArgumentException(\"Division argument may not be null\");\n+    }\n+\n+    // Debugging support only -- Delete me\n+    //    Type typeA = a.getClass();\n+    //    String typeNameA = typeA.getTypeName();\n+    //    Type typeB = b.getClass();\n+    //    String typeNameB = typeB.getTypeName();\n+    // End of debugging support\n+\n+    Number numA = (Number) a;\n+    Number numB = (Number) b;\n+    if (numB.longValue() == 0 || numB.doubleValue() == 0.0) {", "originalCommit": "d832767a08da98a2078cd4365c0d27a07b0b6397", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aca835942eae909619a749045d571b43f000c40a", "chunk": "diff --git a/src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java b/src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java\nindex e4ebfa61..9e6e1290 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java\n\n@@ -18,16 +18,9 @@ public class RegularDivOperator extends SimpleOperator {\n       throw new IllegalArgumentException(\"Division argument may not be null\");\n     }\n \n-    // Debugging support only -- Delete me\n-    //    Type typeA = a.getClass();\n-    //    String typeNameA = typeA.getTypeName();\n-    //    Type typeB = b.getClass();\n-    //    String typeNameB = typeB.getTypeName();\n-    // End of debugging support\n-\n     Number numA = (Number) a;\n     Number numB = (Number) b;\n-    if (numB.longValue() == 0 || numB.doubleValue() == 0.0) {\n+    if (numB.doubleValue() == 0.0) {\n       throw new IllegalArgumentException(\"Divisor may not be zero\");\n     }\n \n"}}, {"oid": "91370dd03fc890bf5cb916a4cd09fb023a2d542c", "url": "https://github.com/HubSpot/jinjava/commit/91370dd03fc890bf5cb916a4cd09fb023a2d542c", "message": "Test for divide by zero in truncated division extension", "committedDate": "2020-08-14T13:50:01Z", "type": "commit"}, {"oid": "aca835942eae909619a749045d571b43f000c40a", "url": "https://github.com/HubSpot/jinjava/commit/aca835942eae909619a749045d571b43f000c40a", "message": "Rename tests to conform with rspec-style naming; minor clean-up", "committedDate": "2020-08-17T13:55:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5OTc0OA==", "url": "https://github.com/HubSpot/jinjava/pull/473#discussion_r471499748", "bodyText": "I think this could simply be called DivOperator.\nAlso I think it would be worth a comment on why this was overridden.", "author": "boulter", "createdAt": "2020-08-17T14:01:37Z", "path": "src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.hubspot.jinjava.el.ext;\n+\n+import de.odysseus.el.misc.TypeConverter;\n+import de.odysseus.el.tree.impl.Parser.ExtensionHandler;\n+import de.odysseus.el.tree.impl.Parser.ExtensionPoint;\n+import de.odysseus.el.tree.impl.Scanner;\n+import de.odysseus.el.tree.impl.ast.AstBinary;\n+import de.odysseus.el.tree.impl.ast.AstBinary.SimpleOperator;\n+import de.odysseus.el.tree.impl.ast.AstNode;\n+\n+public class RegularDivOperator extends SimpleOperator {", "originalCommit": "aca835942eae909619a749045d571b43f000c40a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f90080722f6c235ae679c928360835134cfdfff4", "chunk": "diff --git a/src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java b/src/main/java/com/hubspot/jinjava/el/ext/DivOperator.java\nsimilarity index 80%\nrename from src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java\nrename to src/main/java/com/hubspot/jinjava/el/ext/DivOperator.java\nindex 9e6e1290..6f303c11 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/DivOperator.java\n\n@@ -8,9 +8,13 @@ import de.odysseus.el.tree.impl.ast.AstBinary;\n import de.odysseus.el.tree.impl.ast.AstBinary.SimpleOperator;\n import de.odysseus.el.tree.impl.ast.AstNode;\n \n-public class RegularDivOperator extends SimpleOperator {\n+/**\n+ * Created to allow for the detection and handling of divide-by-zero requests in EL expressions\n+ * (see PR 473 @ https://github.com/HubSpot/jinjava/pull/473)\n+ */\n+public class DivOperator extends SimpleOperator {\n   public static final Scanner.ExtensionToken TOKEN = new Scanner.ExtensionToken(\"/\");\n-  public static final RegularDivOperator OP = new RegularDivOperator();\n+  public static final DivOperator OP = new DivOperator();\n \n   @Override\n   protected Object apply(TypeConverter converter, Object a, Object b) {\n"}}, {"oid": "f90080722f6c235ae679c928360835134cfdfff4", "url": "https://github.com/HubSpot/jinjava/commit/f90080722f6c235ae679c928360835134cfdfff4", "message": "Rename RegularDivOperator to DivOperator", "committedDate": "2020-08-17T14:55:09Z", "type": "commit"}]}