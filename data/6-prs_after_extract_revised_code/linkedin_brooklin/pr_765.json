{"pr_number": 765, "pr_title": "Add ref count in metrics registeration/deregistration.", "pr_createdAt": "2020-10-13T19:24:32Z", "pr_url": "https://github.com/linkedin/brooklin/pull/765", "timeline": [{"oid": "c31cd4a15cc8dd69b0a653dbe4201de934ea6d65", "url": "https://github.com/linkedin/brooklin/commit/c31cd4a15cc8dd69b0a653dbe4201de934ea6d65", "message": "Merge pull request #1 from linkedin/master\n\nPull latest", "committedDate": "2019-11-18T20:06:44Z", "type": "commit"}, {"oid": "28d2d11372814b122c6e62c2a3309f275b1f7f84", "url": "https://github.com/linkedin/brooklin/commit/28d2d11372814b122c6e62c2a3309f275b1f7f84", "message": "Merge branch 'master' of github.com:linkedin/brooklin", "committedDate": "2020-09-21T19:21:30Z", "type": "commit"}, {"oid": "0653c15d870615a5d6619f0dc745c66abd8bd43e", "url": "https://github.com/linkedin/brooklin/commit/0653c15d870615a5d6619f0dc745c66abd8bd43e", "message": "Merge branch 'master' of github.com:linkedin/brooklin", "committedDate": "2020-09-30T06:26:06Z", "type": "commit"}, {"oid": "2cc935e720fea2d9d50233afe9c6392fe03bb856", "url": "https://github.com/linkedin/brooklin/commit/2cc935e720fea2d9d50233afe9c6392fe03bb856", "message": "Merge branch 'master' of github.com:linkedin/brooklin", "committedDate": "2020-10-06T02:48:03Z", "type": "commit"}, {"oid": "7dd92a90974ad2bf46cbe31a92cb4d5545d48d4f", "url": "https://github.com/linkedin/brooklin/commit/7dd92a90974ad2bf46cbe31a92cb4d5545d48d4f", "message": "Merge branch 'master' of github.com:linkedin/brooklin", "committedDate": "2020-10-12T22:00:28Z", "type": "commit"}, {"oid": "768be8b1bc4d9467e9d6ce49079702ea49b1d883", "url": "https://github.com/linkedin/brooklin/commit/768be8b1bc4d9467e9d6ce49079702ea49b1d883", "message": "Add Ref-count while registering/deregistering the metrics", "committedDate": "2020-10-13T19:17:53Z", "type": "commit"}, {"oid": "22e854c8de0f09b41b655fbb12b799eed06f7fee", "url": "https://github.com/linkedin/brooklin/commit/22e854c8de0f09b41b655fbb12b799eed06f7fee", "message": "Fix comments", "committedDate": "2020-10-13T19:27:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2Mzc2Mg==", "url": "https://github.com/linkedin/brooklin/pull/765#discussion_r504263762", "bodyText": "nit: zero or not the key is not present, -> zero or if the key is not present,", "author": "somandal", "createdAt": "2020-10-13T21:17:13Z", "path": "datastream-common/src/main/java/com/linkedin/datastream/metrics/DynamicMetricsManager.java", "diffHunk": "@@ -44,11 +44,16 @@\n   // This is created solely for the createOrUpdate APIs, not by registerMetric because the former can be called\n   // repeatedly to update the metric whereas the latter is typically only called once per metric during initialization.\n   private final ConcurrentHashMap<String, ConcurrentHashMap<String, ConcurrentHashMap<String, Metric>>> _indexedMetrics;\n+\n+  // Map to maintain the ref count for the registered metric. When the ref count becomes zero or not the key is not present,", "originalCommit": "22e854c8de0f09b41b655fbb12b799eed06f7fee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e7d5868434a89ba3802d5c4d95c6a4f241ef2b9", "chunk": "diff --git a/datastream-common/src/main/java/com/linkedin/datastream/metrics/DynamicMetricsManager.java b/datastream-common/src/main/java/com/linkedin/datastream/metrics/DynamicMetricsManager.java\nindex e2cf7595..c18d0407 100644\n--- a/datastream-common/src/main/java/com/linkedin/datastream/metrics/DynamicMetricsManager.java\n+++ b/datastream-common/src/main/java/com/linkedin/datastream/metrics/DynamicMetricsManager.java\n\n@@ -45,7 +45,7 @@ public class DynamicMetricsManager {\n   // repeatedly to update the metric whereas the latter is typically only called once per metric during initialization.\n   private final ConcurrentHashMap<String, ConcurrentHashMap<String, ConcurrentHashMap<String, Metric>>> _indexedMetrics;\n \n-  // Map to maintain the ref count for the registered metric. When the ref count becomes zero or not the key is not present,\n+  // Map to maintain the ref count for the registered metric. When the ref count becomes zero or if the key is not present,\n   // the metric can be deregistered.\n   private final ConcurrentHashMap<String, Integer> _registeredMetricRefCount;\n   private MetricRegistry _metricRegistry;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI3MTcwMw==", "url": "https://github.com/linkedin/brooklin/pull/765#discussion_r504271703", "bodyText": "nit:  reword: Underlying DynamicMetricsManager will take care of maintaining ref-counts.", "author": "somandal", "createdAt": "2020-10-13T21:33:59Z", "path": "datastream-common/src/main/java/com/linkedin/datastream/metrics/BrooklinMetrics.java", "diffHunk": "@@ -5,19 +5,11 @@\n  */\n package com.linkedin.datastream.metrics;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-\n /**\n  * Base class for metric categories with support for metric deregistration.\n- * It uses reference counting for deregistering aggregate metrics which can\n- * only happen when all keyed metrics of the same name have been deregistered.\n+ * Underlying DynamicMetricsManager will take care of ref-count.", "originalCommit": "22e854c8de0f09b41b655fbb12b799eed06f7fee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e7d5868434a89ba3802d5c4d95c6a4f241ef2b9", "chunk": "diff --git a/datastream-common/src/main/java/com/linkedin/datastream/metrics/BrooklinMetrics.java b/datastream-common/src/main/java/com/linkedin/datastream/metrics/BrooklinMetrics.java\nindex 4698ea8e..5da1d96d 100644\n--- a/datastream-common/src/main/java/com/linkedin/datastream/metrics/BrooklinMetrics.java\n+++ b/datastream-common/src/main/java/com/linkedin/datastream/metrics/BrooklinMetrics.java\n\n@@ -7,7 +7,7 @@ package com.linkedin.datastream.metrics;\n \n /**\n  * Base class for metric categories with support for metric deregistration.\n- * Underlying DynamicMetricsManager will take care of ref-count.\n+ * Underlying DynamicMetricsManager will take care of maintaining ref-counts.\n  */\n public abstract class BrooklinMetrics {\n \n"}}, {"oid": "5e7d5868434a89ba3802d5c4d95c6a4f241ef2b9", "url": "https://github.com/linkedin/brooklin/commit/5e7d5868434a89ba3802d5c4d95c6a4f241ef2b9", "message": "Add test cases", "committedDate": "2020-10-13T23:40:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3MjA1OA==", "url": "https://github.com/linkedin/brooklin/pull/765#discussion_r504972058", "bodyText": "Nitpick: Can we move this to line 167?", "author": "vishwajith-s", "createdAt": "2020-10-14T21:06:16Z", "path": "datastream-common/src/main/java/com/linkedin/datastream/metrics/DynamicMetricsManager.java", "diffHunk": "@@ -161,7 +166,7 @@ private void updateCache(String simpleClassName, String key, String metricName,\n     String fullMetricName = MetricRegistry.name(simpleName, key, metricName);\n \n     Metric metric = getMetric(fullMetricName, metricClass);\n-\n+    _registeredMetricRefCount.compute(fullMetricName, (localKey, val) -> (val == null) ? 1 : val + 1);", "originalCommit": "5e7d5868434a89ba3802d5c4d95c6a4f241ef2b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3Mjk2OQ==", "url": "https://github.com/linkedin/brooklin/pull/765#discussion_r504972969", "bodyText": "the reason to keep it here, because getMetric can throw exception if there is a name conflict with other metric type.", "author": "vmaheshw", "createdAt": "2020-10-14T21:08:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3MjA1OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3NDQxNg==", "url": "https://github.com/linkedin/brooklin/pull/765#discussion_r504974416", "bodyText": "Nitpick: Why do we need computeIfPresent here? Shouldn't we be using compute instead, unless someone is calling unregister without registering a metric?", "author": "vishwajith-s", "createdAt": "2020-10-14T21:11:07Z", "path": "datastream-common/src/main/java/com/linkedin/datastream/metrics/DynamicMetricsManager.java", "diffHunk": "@@ -241,11 +246,13 @@ private void updateCache(String simpleClassName, String key, String metricName,\n   public void unregisterMetric(String simpleName, String key, String metricName) {\n     validateArguments(simpleName, metricName);\n     String fullMetricName = MetricRegistry.name(simpleName, key, metricName);\n-\n+    _registeredMetricRefCount.computeIfPresent(fullMetricName, (localKey, val) -> (val == 1) ? null : val - 1);", "originalCommit": "5e7d5868434a89ba3802d5c4d95c6a4f241ef2b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3NzcxNA==", "url": "https://github.com/linkedin/brooklin/pull/765#discussion_r504977714", "bodyText": "Because MetricRegister.remove can handle \"unregistration without registering a metric\" case.\n     * Removes the metric with the given name.\n     *\n     * @param name the name of the metric\n     * @return whether or not the metric was removed\n     */\n    public boolean remove(String name) {\n        final Metric metric = metrics.remove(name);\n        if (metric != null) {\n            onMetricRemoved(name, metric);\n            return true;\n        }\n        return false;\n    }```", "author": "vmaheshw", "createdAt": "2020-10-14T21:18:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3NDQxNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3ODI3Mg==", "url": "https://github.com/linkedin/brooklin/pull/765#discussion_r504978272", "bodyText": "We have an empty class just to deregister aggregate metrics now. Is it possible to explicitly call  deregister Aggregates in a backward compatible way?", "author": "vishwajith-s", "createdAt": "2020-10-14T21:19:26Z", "path": "datastream-common/src/main/java/com/linkedin/datastream/metrics/BrooklinMetrics.java", "diffHunk": "@@ -5,19 +5,11 @@\n  */\n package com.linkedin.datastream.metrics;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-\n /**\n  * Base class for metric categories with support for metric deregistration.\n- * It uses reference counting for deregistering aggregate metrics which can\n- * only happen when all keyed metrics of the same name have been deregistered.\n+ * Underlying DynamicMetricsManager will take care of maintaining ref-counts.\n  */\n public abstract class BrooklinMetrics {", "originalCommit": "5e7d5868434a89ba3802d5c4d95c6a4f241ef2b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3OTI2Mw==", "url": "https://github.com/linkedin/brooklin/pull/765#discussion_r504979263", "bodyText": "As mentioned in the description, \"I'm keeping the existing interfaces for backward compatibility and can be cleaned up in future if required.\" Since, the changes are in other components, I'm keeping the changes here. Once I will migrate that code, I will remove this method from here in the future.", "author": "vmaheshw", "createdAt": "2020-10-14T21:21:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3ODI3Mg=="}], "type": "inlineReview", "revised_code": null}]}