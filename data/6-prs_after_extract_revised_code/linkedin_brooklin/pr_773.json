{"pr_number": 773, "pr_title": "Add a configurable max tasks per instance threshold", "pr_createdAt": "2020-11-02T23:27:43Z", "pr_url": "https://github.com/linkedin/brooklin/pull/773", "timeline": [{"oid": "648dbabf08e5fb6746a4eb68465f871ca8b89135", "url": "https://github.com/linkedin/brooklin/commit/648dbabf08e5fb6746a4eb68465f871ca8b89135", "message": "Add a configurable max tasks per instance threshold", "committedDate": "2020-11-02T23:24:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY4MTk2MA==", "url": "https://github.com/linkedin/brooklin/pull/773#discussion_r517681960", "bodyText": "nit:  when the tasks per instance exceeds the configured threshold", "author": "DEEPTHIKORAT", "createdAt": "2020-11-04T23:01:16Z", "path": "datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java", "diffHunk": "@@ -656,6 +657,86 @@ public void testCoordinationWithStickyMulticastStrategy() throws Exception {\n     zkClient.close();\n   }\n \n+  /**\n+   * testCoordinationWithStickyMulticastStrategyAndMaxTaskLimit is a test to verify that assignment cannot complete\n+   * when the tasks per instance is exceeded by the configured threshold", "originalCommit": "648dbabf08e5fb6746a4eb68465f871ca8b89135", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE2MzA3OA==", "url": "https://github.com/linkedin/brooklin/pull/773#discussion_r518163078", "bodyText": "done", "author": "somandal", "createdAt": "2020-11-05T15:58:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY4MTk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "7d65ca74d7997042f5caa96510aa83a96ae60462", "chunk": "diff --git a/datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java b/datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java\nindex e0cdf7e0..22029c74 100644\n--- a/datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java\n+++ b/datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java\n\n@@ -657,9 +658,50 @@ public class TestCoordinator {\n     zkClient.close();\n   }\n \n+  @Test\n+  public void testValidateNewAssignment() throws Exception {\n+    String testCluster = \"testCoordinationMaxTasksPerInstance\";\n+    Properties properties = new Properties();\n+    int maxTasksPerInstance = 2;\n+    properties.put(CoordinatorConfig.CONFIG_MAX_DATASTREAM_TASKS_PER_INSTANCE, String.valueOf(maxTasksPerInstance));\n+    Coordinator instance = createCoordinator(_zkConnectionString, testCluster, properties);\n+\n+    int numInstances = 2;\n+    // Create the input map for validateNewAssignment()\n+    Map<String, List<DatastreamTask>> newAssignmentByInstance = new HashMap<>();\n+    for (int i = 0; i < numInstances; ++i) {\n+      String instanceKey = \"instance\" + i;\n+      newAssignmentByInstance.put(instanceKey, new ArrayList<>());\n+\n+      for (int j = 0; j < maxTasksPerInstance; ++j) {\n+        DatastreamTask task = new DatastreamTaskImpl();\n+        newAssignmentByInstance.get(instanceKey).add(task);\n+      }\n+    }\n+\n+    // Validation should pass since every instance has the allowed number of tasks per instance\n+    instance.validateNewAssignment(newAssignmentByInstance);\n+\n+    // Now increase the number of tasks for one of the instances and validation should fail\n+    DatastreamTask task = new DatastreamTaskImpl();\n+    newAssignmentByInstance.get(\"instance0\").add(task);\n+    Assert.assertThrows(DatastreamRuntimeException.class, () -> instance.validateNewAssignment(newAssignmentByInstance));\n+\n+    // Decrease the number of tasks on the other instance, the validation should still fail\n+    newAssignmentByInstance.get(\"instance1\").remove(1);\n+    Assert.assertThrows(DatastreamRuntimeException.class, () -> instance.validateNewAssignment(newAssignmentByInstance));\n+\n+    // Remove the extra task previously added to the first instance, now validation should pass\n+    newAssignmentByInstance.get(\"instance0\").remove(2);\n+    instance.validateNewAssignment(newAssignmentByInstance);\n+\n+    instance.stop();\n+    instance.getDatastreamCache().getZkclient().close();\n+  }\n+\n   /**\n    * testCoordinationWithStickyMulticastStrategyAndMaxTaskLimit is a test to verify that assignment cannot complete\n-   * when the tasks per instance is exceeded by the configured threshold\n+   * when the tasks per instance exceeds the configured threshold\n    * <ul>\n    *     <li>Create a coordinator with CoordinatorConfig.CONFIG_MAX_DATASTREAM_TASKS_PER_INSTANCE set to 5</li>\n    *     <li>create 3 instances and 4 datastreams, verify assignment cannot complete</li>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY4MjU1Ng==", "url": "https://github.com/linkedin/brooklin/pull/773#discussion_r517682556", "bodyText": "Is the comment a todo that you had to remove?", "author": "DEEPTHIKORAT", "createdAt": "2020-11-04T23:02:56Z", "path": "datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java", "diffHunk": "@@ -656,6 +657,86 @@ public void testCoordinationWithStickyMulticastStrategy() throws Exception {\n     zkClient.close();\n   }\n \n+  /**\n+   * testCoordinationWithStickyMulticastStrategyAndMaxTaskLimit is a test to verify that assignment cannot complete\n+   * when the tasks per instance is exceeded by the configured threshold\n+   * <ul>\n+   *     <li>Create a coordinator with CoordinatorConfig.CONFIG_MAX_DATASTREAM_TASKS_PER_INSTANCE set to 5</li>\n+   *     <li>create 3 instances and 4 datastreams, verify assignment cannot complete</li>\n+   *     <li>create another instance, verify assignment completes now</li>\n+   * </ul>\n+   */\n+  @Test\n+  public void testCoordinationWithStickyMulticastStrategyAndMaxTaskLimit() throws Exception {\n+    String testCluster = \"testCoordinationMaxTasksPerInstance\";\n+    String testConnectorType = \"testConnectorType\";\n+    Properties properties = new Properties();\n+    // Set max tasks per instance to 5, since some instances will get 6 tasks if 4 datastreams with 4 tasks each are\n+    // created across 3 instances. With 4 instances, the tasks per instance will be less than 5.\n+    properties.put(CoordinatorConfig.CONFIG_MAX_DATASTREAM_TASKS_PER_INSTANCE, \"5\");\n+    Coordinator instance1 = createCoordinator(_zkConnectionString, testCluster, properties);\n+\n+    TestHookConnector connector1 = new TestHookConnector(\"connector1\", testConnectorType);\n+    //Question why the multicast strategy is within one coordinator rather than shared between list of coordinators", "originalCommit": "648dbabf08e5fb6746a4eb68465f871ca8b89135", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE2NTI4Nw==", "url": "https://github.com/linkedin/brooklin/pull/773#discussion_r518165287", "bodyText": "done - removed it. was a copy paste error", "author": "somandal", "createdAt": "2020-11-05T16:01:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY4MjU1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7d65ca74d7997042f5caa96510aa83a96ae60462", "chunk": "diff --git a/datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java b/datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java\nindex e0cdf7e0..22029c74 100644\n--- a/datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java\n+++ b/datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java\n\n@@ -657,9 +658,50 @@ public class TestCoordinator {\n     zkClient.close();\n   }\n \n+  @Test\n+  public void testValidateNewAssignment() throws Exception {\n+    String testCluster = \"testCoordinationMaxTasksPerInstance\";\n+    Properties properties = new Properties();\n+    int maxTasksPerInstance = 2;\n+    properties.put(CoordinatorConfig.CONFIG_MAX_DATASTREAM_TASKS_PER_INSTANCE, String.valueOf(maxTasksPerInstance));\n+    Coordinator instance = createCoordinator(_zkConnectionString, testCluster, properties);\n+\n+    int numInstances = 2;\n+    // Create the input map for validateNewAssignment()\n+    Map<String, List<DatastreamTask>> newAssignmentByInstance = new HashMap<>();\n+    for (int i = 0; i < numInstances; ++i) {\n+      String instanceKey = \"instance\" + i;\n+      newAssignmentByInstance.put(instanceKey, new ArrayList<>());\n+\n+      for (int j = 0; j < maxTasksPerInstance; ++j) {\n+        DatastreamTask task = new DatastreamTaskImpl();\n+        newAssignmentByInstance.get(instanceKey).add(task);\n+      }\n+    }\n+\n+    // Validation should pass since every instance has the allowed number of tasks per instance\n+    instance.validateNewAssignment(newAssignmentByInstance);\n+\n+    // Now increase the number of tasks for one of the instances and validation should fail\n+    DatastreamTask task = new DatastreamTaskImpl();\n+    newAssignmentByInstance.get(\"instance0\").add(task);\n+    Assert.assertThrows(DatastreamRuntimeException.class, () -> instance.validateNewAssignment(newAssignmentByInstance));\n+\n+    // Decrease the number of tasks on the other instance, the validation should still fail\n+    newAssignmentByInstance.get(\"instance1\").remove(1);\n+    Assert.assertThrows(DatastreamRuntimeException.class, () -> instance.validateNewAssignment(newAssignmentByInstance));\n+\n+    // Remove the extra task previously added to the first instance, now validation should pass\n+    newAssignmentByInstance.get(\"instance0\").remove(2);\n+    instance.validateNewAssignment(newAssignmentByInstance);\n+\n+    instance.stop();\n+    instance.getDatastreamCache().getZkclient().close();\n+  }\n+\n   /**\n    * testCoordinationWithStickyMulticastStrategyAndMaxTaskLimit is a test to verify that assignment cannot complete\n-   * when the tasks per instance is exceeded by the configured threshold\n+   * when the tasks per instance exceeds the configured threshold\n    * <ul>\n    *     <li>Create a coordinator with CoordinatorConfig.CONFIG_MAX_DATASTREAM_TASKS_PER_INSTANCE set to 5</li>\n    *     <li>create 3 instances and 4 datastreams, verify assignment cannot complete</li>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY4OTA0Nw==", "url": "https://github.com/linkedin/brooklin/pull/773#discussion_r517689047", "bodyText": "Is there are way to make this test more unit-test like? Just test validateNewAssignment I mean? My concern is that if assignment fails for any other reason, it would still look the same for the reader of waitTillAssignmentIsComplete's output even though it actually did not fail due to max tax limit if I am reading this correct", "author": "DEEPTHIKORAT", "createdAt": "2020-11-04T23:21:44Z", "path": "datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java", "diffHunk": "@@ -656,6 +657,86 @@ public void testCoordinationWithStickyMulticastStrategy() throws Exception {\n     zkClient.close();\n   }\n \n+  /**\n+   * testCoordinationWithStickyMulticastStrategyAndMaxTaskLimit is a test to verify that assignment cannot complete\n+   * when the tasks per instance is exceeded by the configured threshold\n+   * <ul>\n+   *     <li>Create a coordinator with CoordinatorConfig.CONFIG_MAX_DATASTREAM_TASKS_PER_INSTANCE set to 5</li>\n+   *     <li>create 3 instances and 4 datastreams, verify assignment cannot complete</li>\n+   *     <li>create another instance, verify assignment completes now</li>\n+   * </ul>\n+   */\n+  @Test\n+  public void testCoordinationWithStickyMulticastStrategyAndMaxTaskLimit() throws Exception {\n+    String testCluster = \"testCoordinationMaxTasksPerInstance\";\n+    String testConnectorType = \"testConnectorType\";\n+    Properties properties = new Properties();\n+    // Set max tasks per instance to 5, since some instances will get 6 tasks if 4 datastreams with 4 tasks each are\n+    // created across 3 instances. With 4 instances, the tasks per instance will be less than 5.\n+    properties.put(CoordinatorConfig.CONFIG_MAX_DATASTREAM_TASKS_PER_INSTANCE, \"5\");\n+    Coordinator instance1 = createCoordinator(_zkConnectionString, testCluster, properties);\n+\n+    TestHookConnector connector1 = new TestHookConnector(\"connector1\", testConnectorType);\n+    //Question why the multicast strategy is within one coordinator rather than shared between list of coordinators\n+    instance1.addConnector(testConnectorType, connector1, new StickyMulticastStrategy(Optional.of(4), Optional.of(2)), false,\n+        new SourceBasedDeduper(), null);\n+    instance1.start();\n+\n+    Coordinator instance2 = createCoordinator(_zkConnectionString, testCluster);\n+    TestHookConnector connector2 = new TestHookConnector(\"connector2\", testConnectorType);\n+    instance2.addConnector(testConnectorType, connector2, new StickyMulticastStrategy(Optional.of(4), Optional.of(2)), false,\n+        new SourceBasedDeduper(), null);\n+    instance2.start();\n+\n+    Coordinator instance3 = createCoordinator(_zkConnectionString, testCluster);\n+    TestHookConnector connector3 = new TestHookConnector(\"connector3\", testConnectorType);\n+    instance3.addConnector(testConnectorType, connector3, new StickyMulticastStrategy(Optional.of(4), Optional.of(2)), false,\n+        new SourceBasedDeduper(), null);\n+    instance3.start();\n+\n+    ZkClient zkClient = new ZkClient(_zkConnectionString);\n+    List<TestHookConnector> connectors = new ArrayList<>();\n+    connectors.add(connector1);\n+    connectors.add(connector2);\n+    connectors.add(connector3);\n+    List<String> datastreamNames = ImmutableList.of(\"datastream1\", \"datastream2\", \"datastream3\", \"datastream4\");\n+\n+    for (String name : datastreamNames) {\n+      DatastreamTestUtils.createAndStoreDatastreams(zkClient, testCluster, testConnectorType, name);\n+    }\n+    boolean assignmentComplete = waitTillAssignmentIsComplete(16, WAIT_TIMEOUT_MS,", "originalCommit": "648dbabf08e5fb6746a4eb68465f871ca8b89135", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE2NDk1NA==", "url": "https://github.com/linkedin/brooklin/pull/773#discussion_r518164954", "bodyText": "Added a new unit test which is more like a unit test. Wanted to keep this one, since we are testing that increasing the instances allows the assignment to complete.", "author": "somandal", "createdAt": "2020-11-05T16:00:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY4OTA0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7d65ca74d7997042f5caa96510aa83a96ae60462", "chunk": "diff --git a/datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java b/datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java\nindex e0cdf7e0..22029c74 100644\n--- a/datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java\n+++ b/datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java\n\n@@ -657,9 +658,50 @@ public class TestCoordinator {\n     zkClient.close();\n   }\n \n+  @Test\n+  public void testValidateNewAssignment() throws Exception {\n+    String testCluster = \"testCoordinationMaxTasksPerInstance\";\n+    Properties properties = new Properties();\n+    int maxTasksPerInstance = 2;\n+    properties.put(CoordinatorConfig.CONFIG_MAX_DATASTREAM_TASKS_PER_INSTANCE, String.valueOf(maxTasksPerInstance));\n+    Coordinator instance = createCoordinator(_zkConnectionString, testCluster, properties);\n+\n+    int numInstances = 2;\n+    // Create the input map for validateNewAssignment()\n+    Map<String, List<DatastreamTask>> newAssignmentByInstance = new HashMap<>();\n+    for (int i = 0; i < numInstances; ++i) {\n+      String instanceKey = \"instance\" + i;\n+      newAssignmentByInstance.put(instanceKey, new ArrayList<>());\n+\n+      for (int j = 0; j < maxTasksPerInstance; ++j) {\n+        DatastreamTask task = new DatastreamTaskImpl();\n+        newAssignmentByInstance.get(instanceKey).add(task);\n+      }\n+    }\n+\n+    // Validation should pass since every instance has the allowed number of tasks per instance\n+    instance.validateNewAssignment(newAssignmentByInstance);\n+\n+    // Now increase the number of tasks for one of the instances and validation should fail\n+    DatastreamTask task = new DatastreamTaskImpl();\n+    newAssignmentByInstance.get(\"instance0\").add(task);\n+    Assert.assertThrows(DatastreamRuntimeException.class, () -> instance.validateNewAssignment(newAssignmentByInstance));\n+\n+    // Decrease the number of tasks on the other instance, the validation should still fail\n+    newAssignmentByInstance.get(\"instance1\").remove(1);\n+    Assert.assertThrows(DatastreamRuntimeException.class, () -> instance.validateNewAssignment(newAssignmentByInstance));\n+\n+    // Remove the extra task previously added to the first instance, now validation should pass\n+    newAssignmentByInstance.get(\"instance0\").remove(2);\n+    instance.validateNewAssignment(newAssignmentByInstance);\n+\n+    instance.stop();\n+    instance.getDatastreamCache().getZkclient().close();\n+  }\n+\n   /**\n    * testCoordinationWithStickyMulticastStrategyAndMaxTaskLimit is a test to verify that assignment cannot complete\n-   * when the tasks per instance is exceeded by the configured threshold\n+   * when the tasks per instance exceeds the configured threshold\n    * <ul>\n    *     <li>Create a coordinator with CoordinatorConfig.CONFIG_MAX_DATASTREAM_TASKS_PER_INSTANCE set to 5</li>\n    *     <li>create 3 instances and 4 datastreams, verify assignment cannot complete</li>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY4OTc2MQ==", "url": "https://github.com/linkedin/brooklin/pull/773#discussion_r517689761", "bodyText": "Should we also consider doing assignments only if a \"quorum\" number of instances are participating in the membership? I also find it a bi t odd to have an across the connector max task limit somehow. Seeing as how some connector tasks might take more memory than others.", "author": "DEEPTHIKORAT", "createdAt": "2020-11-04T23:23:55Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "diffHunk": "@@ -1322,6 +1323,23 @@ private void performPartitionMovement(Long notifyTimestamp) {\n     }\n   }\n \n+  private void validateNewAssignment(Map<String, List<DatastreamTask>> newAssignmentsByInstance) {\n+    if (_config.getMaxDatastreamTasksPerInstance() > 0) {\n+      // If the cluster was configured to limit the max tasks per instance, check if any instances have a higher\n+      // number of tasks than expected, and fail the leader assignment on violation of this limit. This can be useful\n+      // to prevent other issues such as OOMs due to high memory usage which may be seen if we exceed the supportable\n+      // number of tasks per instance.\n+      Map<String, Integer> instancesWithTaskCountAboveThreshold = newAssignmentsByInstance.entrySet().stream()", "originalCommit": "648dbabf08e5fb6746a4eb68465f871ca8b89135", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE1ODY5Mg==", "url": "https://github.com/linkedin/brooklin/pull/773#discussion_r518158692", "bodyText": "Discussed this with @DEEPTHIKORAT offline. One problem with using a \"quorum\" is that it only helps catch cases when the number of tasks within the cluster are within the limit overall, but for some reason some of the instances are down (or during deployment).\nThere can be another case, where someone adds a new datastream or bumps the maxTasks in such a way that some of instances get a higher number of tasks than each instance can support without running into problems (e.g. OOMs). In such cases, the right thing to do is to add additional instances to the cluster such that the higher capacity can be supported.\nSo for now using a limit on tasks per instance is sufficient.", "author": "somandal", "createdAt": "2020-11-05T15:52:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY4OTc2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7d65ca74d7997042f5caa96510aa83a96ae60462", "chunk": "diff --git a/datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java b/datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java\nindex 862aa932..48372ec4 100644\n--- a/datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java\n+++ b/datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java\n\n@@ -1323,7 +1323,8 @@ public class Coordinator implements ZkAdapter.ZkAdapterListener, MetricsAware {\n     }\n   }\n \n-  private void validateNewAssignment(Map<String, List<DatastreamTask>> newAssignmentsByInstance) {\n+  @VisibleForTesting\n+  void validateNewAssignment(Map<String, List<DatastreamTask>> newAssignmentsByInstance) {\n     if (_config.getMaxDatastreamTasksPerInstance() > 0) {\n       // If the cluster was configured to limit the max tasks per instance, check if any instances have a higher\n       // number of tasks than expected, and fail the leader assignment on violation of this limit. This can be useful\n"}}, {"oid": "7d65ca74d7997042f5caa96510aa83a96ae60462", "url": "https://github.com/linkedin/brooklin/commit/7d65ca74d7997042f5caa96510aa83a96ae60462", "message": "Address review comments", "committedDate": "2020-11-05T15:55:55Z", "type": "commit"}, {"oid": "bc032298947ac4828ca6c49b40e4122f7f52ebd3", "url": "https://github.com/linkedin/brooklin/commit/bc032298947ac4828ca6c49b40e4122f7f52ebd3", "message": "Add back accidentally deleted comment and remove the right comment", "committedDate": "2020-11-05T15:59:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3NTY4OQ==", "url": "https://github.com/linkedin/brooklin/pull/773#discussion_r518275689", "bodyText": "nit: If the cluster is configured.", "author": "vmaheshw", "createdAt": "2020-11-05T18:35:45Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "diffHunk": "@@ -1322,6 +1323,24 @@ private void performPartitionMovement(Long notifyTimestamp) {\n     }\n   }\n \n+  @VisibleForTesting\n+  void validateNewAssignment(Map<String, List<DatastreamTask>> newAssignmentsByInstance) {\n+    if (_config.getMaxDatastreamTasksPerInstance() > 0) {\n+      // If the cluster was configured to limit the max tasks per instance, check if any instances have a higher", "originalCommit": "bc032298947ac4828ca6c49b40e4122f7f52ebd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMwNTYwMg==", "url": "https://github.com/linkedin/brooklin/pull/773#discussion_r518305602", "bodyText": "done", "author": "somandal", "createdAt": "2020-11-05T19:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3NTY4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d3960b57660fe8bbb812c6d6d2be159f7cdf7f18", "chunk": "diff --git a/datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java b/datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java\nindex 48372ec4..6ced036e 100644\n--- a/datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java\n+++ b/datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java\n\n@@ -1326,7 +1326,7 @@ public class Coordinator implements ZkAdapter.ZkAdapterListener, MetricsAware {\n   @VisibleForTesting\n   void validateNewAssignment(Map<String, List<DatastreamTask>> newAssignmentsByInstance) {\n     if (_config.getMaxDatastreamTasksPerInstance() > 0) {\n-      // If the cluster was configured to limit the max tasks per instance, check if any instances have a higher\n+      // If the cluster is configured to limit the max tasks per instance, check if any instances have a higher\n       // number of tasks than expected, and fail the leader assignment on violation of this limit. This can be useful\n       // to prevent other issues such as OOMs due to high memory usage which may be seen if we exceed the supportable\n       // number of tasks per instance.\n"}}, {"oid": "d3960b57660fe8bbb812c6d6d2be159f7cdf7f18", "url": "https://github.com/linkedin/brooklin/commit/d3960b57660fe8bbb812c6d6d2be159f7cdf7f18", "message": "Address review comments", "committedDate": "2020-11-05T19:22:44Z", "type": "commit"}]}