{"pr_number": 723, "pr_title": "Fix hash and equals for DatstreamTaskImpl", "pr_createdAt": "2020-06-22T18:09:53Z", "pr_url": "https://github.com/linkedin/brooklin/pull/723", "timeline": [{"oid": "c31cd4a15cc8dd69b0a653dbe4201de934ea6d65", "url": "https://github.com/linkedin/brooklin/commit/c31cd4a15cc8dd69b0a653dbe4201de934ea6d65", "message": "Merge pull request #1 from linkedin/master\n\nPull latest", "committedDate": "2019-11-18T20:06:44Z", "type": "commit"}, {"oid": "b164832772507699fefa026c1864fc39667673da", "url": "https://github.com/linkedin/brooklin/commit/b164832772507699fefa026c1864fc39667673da", "message": "Merge branch 'master' of github.com:vmaheshw/Brooklin", "committedDate": "2020-05-22T20:12:24Z", "type": "commit"}, {"oid": "a67520d23f126091c3be6043f9992035b0f13aab", "url": "https://github.com/linkedin/brooklin/commit/a67520d23f126091c3be6043f9992035b0f13aab", "message": "Fix hash and equals for DatstreamTaskImpl", "committedDate": "2020-06-11T17:12:47Z", "type": "commit"}, {"oid": "2e2ec58d1eadfbe012a292392b015a6c61e465d9", "url": "https://github.com/linkedin/brooklin/commit/2e2ec58d1eadfbe012a292392b015a6c61e465d9", "message": "Add testcase for DatastreamTaskImpl", "committedDate": "2020-06-22T18:06:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM1MTY3MA==", "url": "https://github.com/linkedin/brooklin/pull/723#discussion_r444351670", "bodyText": "While I understand your concern, it's fairly daunting and error-prone to have to call computeHash() in (almost) every single method that would mutate this object (but not all of them). Precomputing hashcode is mostly useful when the type is immutable. I think it'd be more straightforward to just compute the hashcode on demand, especially that most \u2014 if not all of \u2014 Brooklin's code is not CPU bound anyways.", "author": "ahmedahamid", "createdAt": "2020-06-23T16:25:07Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/DatastreamTaskImpl.java", "diffHunk": "@@ -99,6 +102,7 @@ public DatastreamTaskImpl() {\n     _partitions = new ArrayList<>();\n     _partitionsV2 = new ArrayList<>();\n     _dependencies = new ArrayList<>();\n+    computeHash();", "originalCommit": "2e2ec58d1eadfbe012a292392b015a6c61e465d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4MzE0Ng==", "url": "https://github.com/linkedin/brooklin/pull/723#discussion_r444383146", "bodyText": "+1", "author": "somandal", "createdAt": "2020-06-23T17:17:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM1MTY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIwMjM1Mg==", "url": "https://github.com/linkedin/brooklin/pull/723#discussion_r447202352", "bodyText": "Done.", "author": "vmaheshw", "createdAt": "2020-06-29T19:28:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM1MTY3MA=="}], "type": "inlineReview", "revised_code": {"commit": "84e5c97c3ced622493a7c0d4b0e58ee3edf4e52e", "chunk": "diff --git a/datastream-server/src/main/java/com/linkedin/datastream/server/DatastreamTaskImpl.java b/datastream-server/src/main/java/com/linkedin/datastream/server/DatastreamTaskImpl.java\nindex 0ea5b257..030d541b 100644\n--- a/datastream-server/src/main/java/com/linkedin/datastream/server/DatastreamTaskImpl.java\n+++ b/datastream-server/src/main/java/com/linkedin/datastream/server/DatastreamTaskImpl.java\n\n@@ -102,7 +100,6 @@ public class DatastreamTaskImpl implements DatastreamTask {\n     _partitions = new ArrayList<>();\n     _partitionsV2 = new ArrayList<>();\n     _dependencies = new ArrayList<>();\n-    computeHash();\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2NDc3Mw==", "url": "https://github.com/linkedin/brooklin/pull/723#discussion_r444364773", "bodyText": "Not asking you to test every single field but it would be useful to add comprehensive tests for the general contract of equals() and hashcode() for this type, i.e.\nequals()\n\nThe equals method implements an equivalence relation on non-null object references:\n\nIt is reflexive: for any non-null reference value x, x.equals(x) should return true.\nIt is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true.\nIt is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.\nIt is consistent: for any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified.\nFor any non-null reference value x, x.equals(null) should return false.\n\n\nhashcode()\n\nThe general contract of hashCode is:\n\nWhenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application.\nIf two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.\nIt is not required that if two objects are unequal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables.\n\n\nI understand that accounting for each one of the points above could take a lot of effort. Feel free to pick the ones that feel more critical (e.g. hashcode()'s contract item #2)", "author": "ahmedahamid", "createdAt": "2020-06-23T16:46:24Z", "path": "datastream-server/src/test/java/com/linkedin/datastream/server/TestDatastreamTask.java", "diffHunk": "@@ -109,4 +110,26 @@ public void testErrorFromZkJson() throws Exception {\n     DatastreamTaskImpl task2 = DatastreamTaskImpl.fromJson(json);\n     task2.getDatastreams();\n   }\n+\n+  @Test\n+  public void testDatastreamTaskComparison() {", "originalCommit": "2e2ec58d1eadfbe012a292392b015a6c61e465d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIwMjQyMQ==", "url": "https://github.com/linkedin/brooklin/pull/723#discussion_r447202421", "bodyText": "Done", "author": "vmaheshw", "createdAt": "2020-06-29T19:28:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2NDc3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "84e5c97c3ced622493a7c0d4b0e58ee3edf4e52e", "chunk": "diff --git a/datastream-server/src/test/java/com/linkedin/datastream/server/TestDatastreamTask.java b/datastream-server/src/test/java/com/linkedin/datastream/server/TestDatastreamTask.java\nindex 3c477b43..1a977e48 100644\n--- a/datastream-server/src/test/java/com/linkedin/datastream/server/TestDatastreamTask.java\n+++ b/datastream-server/src/test/java/com/linkedin/datastream/server/TestDatastreamTask.java\n\n@@ -119,17 +119,22 @@ public class TestDatastreamTask {\n     DatastreamTaskImpl task = new DatastreamTaskImpl(Collections.singletonList(stream), \"dummyId\", new ArrayList<>());\n     DatastreamTaskImpl task2 = new DatastreamTaskImpl(Collections.singletonList(stream), \"dummyId\", new ArrayList<>());\n     Assert.assertEquals(task, task2);\n+    Assert.assertEquals(task.hashCode(), task2.hashCode());\n \n     task.setPartitions(Arrays.asList(1, 2));\n     task2.setPartitions(Arrays.asList(2, 1, 3));\n     Assert.assertNotEquals(task, task2);\n+    Assert.assertNotEquals(task.hashCode(), task2.hashCode());\n     task2.setPartitions(Arrays.asList(2, 1));\n     Assert.assertEquals(task, task2);\n+    Assert.assertEquals(task.hashCode(), task2.hashCode());\n \n     task.setPartitionsV2(Arrays.asList(\"1\", \"2\"));\n     task2.setPartitionsV2(Arrays.asList(\"2\", \"1\", \"3\"));\n     Assert.assertNotEquals(task, task2);\n+    Assert.assertNotEquals(task.hashCode(), task2.hashCode());\n     task2.setPartitionsV2(Arrays.asList(\"2\", \"1\"));\n     Assert.assertEquals(task, task2);\n+    Assert.assertEquals(task.hashCode(), task2.hashCode());\n   }\n }\n"}}, {"oid": "84e5c97c3ced622493a7c0d4b0e58ee3edf4e52e", "url": "https://github.com/linkedin/brooklin/commit/84e5c97c3ced622493a7c0d4b0e58ee3edf4e52e", "message": "Address PR comments", "committedDate": "2020-06-29T19:26:16Z", "type": "commit"}]}