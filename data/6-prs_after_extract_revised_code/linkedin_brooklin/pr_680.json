{"pr_number": 680, "pr_title": "Add support destination topic prefix, to allow mirroring source topics to destination topics prepended with a prefix", "pr_createdAt": "2020-02-06T22:01:49Z", "pr_url": "https://github.com/linkedin/brooklin/pull/680", "timeline": [{"oid": "49b7fafa00bec51bb9c4f31d3fd91769902397c7", "url": "https://github.com/linkedin/brooklin/commit/49b7fafa00bec51bb9c4f31d3fd91769902397c7", "message": "Add support destination topic prefix, to allow mirroring source topics to destination topics prepended with a prefix", "committedDate": "2020-02-06T22:00:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExODkxNg==", "url": "https://github.com/linkedin/brooklin/pull/680#discussion_r376118916", "bodyText": "Shouldn't this be a stream level config?", "author": "gauravrkulkarni", "createdAt": "2020-02-06T22:31:09Z", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnector.java", "diffHunk": "@@ -61,15 +62,20 @@\n   // This config controls how frequent the connector fetches the partition information from Kafka in order to perform\n   // partition assignment\n   protected static final String PARTITION_FETCH_INTERVAL = \"PartitionFetchIntervalMs\";\n+  // This config, if set to a non-blank value, prepends a prefix to the destination topic name for all topics\n+  // being mirrored by this cluster. E.g. source topic: foo, destination prefix: bar, destination topic: barfoo\n+  protected static final String DESTINATION_TOPIC_PREFIX = \"destinationTopicPrefix\";", "originalCommit": "49b7fafa00bec51bb9c4f31d3fd91769902397c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MzUyOQ==", "url": "https://github.com/linkedin/brooklin/pull/680#discussion_r376143529", "bodyText": "done - made it a cluster level + stream level metadata. The stream level metadata overrides the cluster config.", "author": "somandal", "createdAt": "2020-02-06T23:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExODkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMDI1OQ==", "url": "https://github.com/linkedin/brooklin/pull/680#discussion_r377910259", "bodyText": "I guess people can forget about cluster level config and create a stream without realizing about the config? I will let you decide about cluster level config though, I am OK either ways.", "author": "gauravrkulkarni", "createdAt": "2020-02-11T21:29:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExODkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNzE0Mg==", "url": "https://github.com/linkedin/brooklin/pull/680#discussion_r378037142", "bodyText": "I see how a config can be forgotten and then bad things happen. I've removed the cluster level config.", "author": "somandal", "createdAt": "2020-02-12T04:37:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExODkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "f4078eac50f473d6d42bbf4b3393807d997235fb", "chunk": "diff --git a/datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnector.java b/datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnector.java\nindex beedefb2..724675c6 100644\n--- a/datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnector.java\n+++ b/datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnector.java\n\n@@ -62,20 +62,15 @@ public class KafkaMirrorMakerConnector extends AbstractKafkaConnector {\n   // This config controls how frequent the connector fetches the partition information from Kafka in order to perform\n   // partition assignment\n   protected static final String PARTITION_FETCH_INTERVAL = \"PartitionFetchIntervalMs\";\n-  // This config, if set to a non-blank value, prepends a prefix to the destination topic name for all topics\n-  // being mirrored by this cluster. E.g. source topic: foo, destination prefix: bar, destination topic: barfoo\n-  protected static final String DESTINATION_TOPIC_PREFIX = \"destinationTopicPrefix\";\n   protected static final String MM_TOPIC_PLACEHOLDER = \"*\";\n \n   private static final Logger LOG = LoggerFactory.getLogger(KafkaMirrorMakerConnector.class);\n   private static final String DEST_CONSUMER_GROUP_ID_SUFFIX = \"-topic-partition-listener\";\n   private static final long DEFAULT_PARTITION_FETCH_INTERVAL = Duration.ofSeconds(30).toMillis();\n-  private static final String DEFAULT_DESTINATION_TOPIC_PREFIX = \"\";\n   private static final String NUM_PARTITION_FETCH_ERRORS = \"numPartitionFetchErrors\";\n \n   private final boolean _isFlushlessModeEnabled;\n   private final long _partitionFetchIntervalMs;\n-  private final String _destinationTopicPrefix;\n   private final KafkaConsumerFactory<?, ?> _listenerConsumerFactory;\n   private final Map<String, PartitionDiscoveryThread> _partitionDiscoveryThreadMap = new ConcurrentHashMap<>();\n   private final Properties _consumerProperties;\n"}}, {"oid": "dd571af0b011f382897bb3a6f8009285e033aac4", "url": "https://github.com/linkedin/brooklin/commit/dd571af0b011f382897bb3a6f8009285e033aac4", "message": "Add datastream metadata property to set destinationTopicPrefix", "committedDate": "2020-02-06T23:33:15Z", "type": "commit"}, {"oid": "0a78544e53b1649786be531cabf9bfa737237846", "url": "https://github.com/linkedin/brooklin/commit/0a78544e53b1649786be531cabf9bfa737237846", "message": "Fix comments", "committedDate": "2020-02-06T23:34:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMjEyMQ==", "url": "https://github.com/linkedin/brooklin/pull/680#discussion_r377912121", "bodyText": "nit: might want to log the prefix anyway in case we need to debug this?", "author": "gauravrkulkarni", "createdAt": "2020-02-11T21:33:20Z", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -139,12 +142,19 @@ public KafkaMirrorMakerConnectorTask(KafkaBasedConnectorConfig config, Datastrea\n     _isIdentityMirroringEnabled = KafkaMirrorMakerDatastreamMetadata.isIdentityPartitioningEnabled(_datastream);\n     _groupIdConstructor = groupIdConstructor;\n     _enablePartitionAssignment = config.getEnablePartitionAssignment();\n+    _destinationTopicPrefix = task.getDatastreams().get(0).getMetadata()\n+        .getOrDefault(DatastreamMetadataConstants.DESTINATION_TOPIC_PREFIX, destinationTopicPrefix);\n     _dynamicMetricsManager = DynamicMetricsManager.getInstance();\n \n     if (_enablePartitionAssignment) {\n       LOG.info(\"Enable Brooklin partition assignment\");\n     }\n \n+    if (!StringUtils.isBlank(_destinationTopicPrefix)) {", "originalCommit": "0a78544e53b1649786be531cabf9bfa737237846", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNzIyMw==", "url": "https://github.com/linkedin/brooklin/pull/680#discussion_r378037223", "bodyText": "done", "author": "somandal", "createdAt": "2020-02-12T04:37:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMjEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f4078eac50f473d6d42bbf4b3393807d997235fb", "chunk": "diff --git a/datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java b/datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java\nindex 85f44968..b9a57d6b 100644\n--- a/datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java\n+++ b/datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java\n\n@@ -143,17 +144,14 @@ public class KafkaMirrorMakerConnectorTask extends AbstractKafkaBasedConnectorTa\n     _groupIdConstructor = groupIdConstructor;\n     _enablePartitionAssignment = config.getEnablePartitionAssignment();\n     _destinationTopicPrefix = task.getDatastreams().get(0).getMetadata()\n-        .getOrDefault(DatastreamMetadataConstants.DESTINATION_TOPIC_PREFIX, destinationTopicPrefix);\n+        .getOrDefault(DatastreamMetadataConstants.DESTINATION_TOPIC_PREFIX, DEFAULT_DESTINATION_TOPIC_PREFIX);\n     _dynamicMetricsManager = DynamicMetricsManager.getInstance();\n \n     if (_enablePartitionAssignment) {\n       LOG.info(\"Enable Brooklin partition assignment\");\n     }\n \n-    if (!StringUtils.isBlank(_destinationTopicPrefix)) {\n-      LOG.info(\"Destination topic prefix has been set to {} and config is {}\", _destinationTopicPrefix,\n-          destinationTopicPrefix);\n-    }\n+    LOG.info(\"Destination topic prefix has been set to {}\", _destinationTopicPrefix);\n \n     if (_isFlushlessModeEnabled) {\n       _flushlessProducer = new FlushlessEventProducerHandler<>(_producer);\n"}}, {"oid": "f4078eac50f473d6d42bbf4b3393807d997235fb", "url": "https://github.com/linkedin/brooklin/commit/f4078eac50f473d6d42bbf4b3393807d997235fb", "message": "Remove cluster level destination topic config", "committedDate": "2020-02-12T04:38:52Z", "type": "commit"}, {"oid": "57abe0ac2d879d4e4f505889ecdb5a1f82775924", "url": "https://github.com/linkedin/brooklin/commit/57abe0ac2d879d4e4f505889ecdb5a1f82775924", "message": "Fix tests", "committedDate": "2020-02-12T04:48:12Z", "type": "commit"}, {"oid": "2c33ca090ba696d18bfdff12050ee26c47a53df3", "url": "https://github.com/linkedin/brooklin/commit/2c33ca090ba696d18bfdff12050ee26c47a53df3", "message": "Cleanup", "committedDate": "2020-02-12T05:44:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAyMTkwNA==", "url": "https://github.com/linkedin/brooklin/pull/680#discussion_r379021904", "bodyText": "Suggest to wrap in Optional so that you also don't need to add empty string \"\" to topicManager properties if doesn't exist.", "author": "celiakung", "createdAt": "2020-02-13T17:52:37Z", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -112,6 +116,7 @@\n   private final boolean _isFlushlessModeEnabled;\n   private final boolean _isIdentityMirroringEnabled;\n   private final boolean _enablePartitionAssignment;\n+  private final String _destinationTopicPrefix;", "originalCommit": "2c33ca090ba696d18bfdff12050ee26c47a53df3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2MDI5Mw==", "url": "https://github.com/linkedin/brooklin/pull/680#discussion_r379160293", "bodyText": "Intellij seems to warn about using optionals as class members:\nReports any uses of java.util.Optional, java.util.OptionalDouble, java.util.OptionalInt, java.util.OptionalLong or com.google.common.base.Optional as the type for a field or a parameter. Optional was designed to provide a limited mechanism for library method return types where there needed to be a clear way to represent \"no result\". Using a field with type java.util.Optional is also problematic if the class needs to be Serializable, which java.util.Optional is not.\nSo I'll leave this part as is for now.", "author": "somandal", "createdAt": "2020-02-13T22:41:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAyMTkwNA=="}], "type": "inlineReview", "revised_code": null}]}