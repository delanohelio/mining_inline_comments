{"pr_number": 767, "pr_title": "Fix the BMM event processing time metric to be in nanoseconds instead of milliseconds", "pr_createdAt": "2020-10-16T15:54:36Z", "pr_url": "https://github.com/linkedin/brooklin/pull/767", "timeline": [{"oid": "edc6d2bdcc68321859e4786fdb4af46e8bb5ee2a", "url": "https://github.com/linkedin/brooklin/commit/edc6d2bdcc68321859e4786fdb4af46e8bb5ee2a", "message": "Fix the BMM event processing time metric to be in microseconds instead of milliseconds", "committedDate": "2020-10-16T15:17:16Z", "type": "commit"}, {"oid": "b11da763d560bd9b17e17c7f79ebfa52a1e20c2d", "url": "https://github.com/linkedin/brooklin/commit/b11da763d560bd9b17e17c7f79ebfa52a1e20c2d", "message": "Change processing time metric to nanos and use System.nanoTime to calculate it", "committedDate": "2020-10-16T15:46:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU5NTk2OQ==", "url": "https://github.com/linkedin/brooklin/pull/767#discussion_r506595969", "bodyText": "Nitpick. Can't we just pass System.nanoTime() to processRecords directly here cause I dont see we logging this variable in any other way.", "author": "vishwajith-s", "createdAt": "2020-10-16T16:44:21Z", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaBasedConnectorTask.java", "diffHunk": "@@ -376,7 +376,8 @@ public void run() {\n           _kafkaTopicPartitionTracker.onPartitionsPolled(records);\n \n           Instant readTime = Instant.now();\n-          processRecords(records, readTime);\n+          long readTimeInNanos = System.nanoTime();\n+          processRecords(records, readTime, readTimeInNanos);", "originalCommit": "b11da763d560bd9b17e17c7f79ebfa52a1e20c2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU5OTY5MQ==", "url": "https://github.com/linkedin/brooklin/pull/767#discussion_r506599691", "bodyText": "done", "author": "somandal", "createdAt": "2020-10-16T16:51:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU5NTk2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "af4737efaff2e4fbe5642e9c19ec7f8171f6f9a5", "chunk": "diff --git a/datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaBasedConnectorTask.java b/datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaBasedConnectorTask.java\nindex 68465981..1f0e34dc 100644\n--- a/datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaBasedConnectorTask.java\n+++ b/datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaBasedConnectorTask.java\n\n@@ -376,8 +376,7 @@ abstract public class AbstractKafkaBasedConnectorTask implements Runnable, Consu\n           _kafkaTopicPartitionTracker.onPartitionsPolled(records);\n \n           Instant readTime = Instant.now();\n-          long readTimeInNanos = System.nanoTime();\n-          processRecords(records, readTime, readTimeInNanos);\n+          processRecords(records, readTime, System.nanoTime());\n           recordsPolled = records.count();\n         }\n         maybeCommitOffsets(_consumer, false);\n"}}, {"oid": "af4737efaff2e4fbe5642e9c19ec7f8171f6f9a5", "url": "https://github.com/linkedin/brooklin/commit/af4737efaff2e4fbe5642e9c19ec7f8171f6f9a5", "message": "Address review comments", "committedDate": "2020-10-16T16:51:07Z", "type": "commit"}]}