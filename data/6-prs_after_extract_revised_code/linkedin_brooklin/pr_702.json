{"pr_number": 702, "pr_title": "Log information about topic partitions seeing events outside alternative SLA in the EventProducer", "pr_createdAt": "2020-04-14T19:45:17Z", "pr_url": "https://github.com/linkedin/brooklin/pull/702", "timeline": [{"oid": "ff8dabddfb40aacaa2d13dfd2e74e4d94c570bd3", "url": "https://github.com/linkedin/brooklin/commit/ff8dabddfb40aacaa2d13dfd2e74e4d94c570bd3", "message": "Add the ability to log information about topic partitions seeing events outside alternative SLA in the EventProducer", "committedDate": "2020-04-14T19:26:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1MTgxMA==", "url": "https://github.com/linkedin/brooklin/pull/702#discussion_r408451810", "bodyText": "nit: alternative --> alternate everywhere.", "author": "DEEPTHIKORAT", "createdAt": "2020-04-14T21:38:37Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java", "diffHunk": "@@ -90,11 +96,17 @@\n   private final boolean _warnLogLatencyEnabled;\n   // Latency threshold at which to log a warning message\n   private final long _warnLogLatencyThresholdMs;\n+  // Whether to enable logging the list of TopicPartitions with events outside alternative SLA", "originalCommit": "ff8dabddfb40aacaa2d13dfd2e74e4d94c570bd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2Nzc4MA==", "url": "https://github.com/linkedin/brooklin/pull/702#discussion_r408467780", "bodyText": "good catch \ud83e\udd23somehow my brain deduped the two words into one", "author": "somandal", "createdAt": "2020-04-14T22:14:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1MTgxMA=="}], "type": "inlineReview", "revised_code": {"commit": "984bb03c0d4d646921fb9c5dcc27c48cd751746a", "chunk": "diff --git a/datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java b/datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java\nindex 534af332..2a8d17a8 100644\n--- a/datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java\n+++ b/datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java\n\n@@ -96,9 +96,9 @@ public class EventProducer implements DatastreamEventProducer {\n   private final boolean _warnLogLatencyEnabled;\n   // Latency threshold at which to log a warning message\n   private final long _warnLogLatencyThresholdMs;\n-  // Whether to enable logging the list of TopicPartitions with events outside alternative SLA\n+  // Whether to enable logging the list of TopicPartitions with events outside alternate SLA\n   private final boolean _numEventsOutsideAltSlaLogEnabled;\n-  // Frequency at which to log the list of TopicPartitions with events outside alternative SLA\n+  // Frequency at which to log the list of TopicPartitions with events outside alternate SLA\n   private final long _numEventsOutsideAltSlaFrequencyMs;\n   private final boolean _skipMessageOnSerializationErrors;\n   private final boolean _enablePerTopicMetrics;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1MzIzNw==", "url": "https://github.com/linkedin/brooklin/pull/702#discussion_r408453237", "bodyText": "is the move inside of _logger.isDebugEnabled() intentional?", "author": "DEEPTHIKORAT", "createdAt": "2020-04-14T21:41:40Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java", "diffHunk": "@@ -286,6 +325,10 @@ private void reportMetrics(DatastreamRecordMetadata metadata, long eventsSourceT\n       _dynamicMetricsManager.createOrUpdateCounter(MODULE, AGGREGATE, TOTAL_EVENTS_PRODUCED, 1);\n       _dynamicMetricsManager.createOrUpdateCounter(MODULE, _datastreamTask.getConnectorType(), TOTAL_EVENTS_PRODUCED,\n           1);\n+\n+      // Log information about events if either warn logging is enabled or logging for topic partitions outside\n+      // alternative SLA is enabled\n+      performSlaRelatedLogging(metadata, eventsSourceTimestamp, sourceToDestinationLatencyMs);", "originalCommit": "ff8dabddfb40aacaa2d13dfd2e74e4d94c570bd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2Nzk4MQ==", "url": "https://github.com/linkedin/brooklin/pull/702#discussion_r408467981", "bodyText": "this is not within the if block, the diff just swallowed the rest of the if block.", "author": "somandal", "createdAt": "2020-04-14T22:15:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1MzIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1Mzc2OQ==", "url": "https://github.com/linkedin/brooklin/pull/702#discussion_r414853769", "bodyText": "Ah sorry, got confused with the indent.", "author": "DEEPTHIKORAT", "createdAt": "2020-04-24T20:47:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1MzIzNw=="}], "type": "inlineReview", "revised_code": {"commit": "984bb03c0d4d646921fb9c5dcc27c48cd751746a", "chunk": "diff --git a/datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java b/datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java\nindex 534af332..2a8d17a8 100644\n--- a/datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java\n+++ b/datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java\n\n@@ -327,7 +326,7 @@ public class EventProducer implements DatastreamEventProducer {\n           1);\n \n       // Log information about events if either warn logging is enabled or logging for topic partitions outside\n-      // alternative SLA is enabled\n+      // alternate SLA is enabled\n       performSlaRelatedLogging(metadata, eventsSourceTimestamp, sourceToDestinationLatencyMs);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1NzE0NQ==", "url": "https://github.com/linkedin/brooklin/pull/702#discussion_r408457145", "bodyText": "Why do we need this special class when kafka has TopicPartition class?", "author": "DEEPTHIKORAT", "createdAt": "2020-04-14T21:49:58Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java", "diffHunk": "@@ -413,4 +456,39 @@ private String getDatastreamName() {\n \n     return Collections.unmodifiableList(metrics);\n   }\n+\n+  /**\n+   * This class encapsulates the topic and partition information for a given event\n+   */\n+  static class TopicPartitionInfo {", "originalCommit": "ff8dabddfb40aacaa2d13dfd2e74e4d94c570bd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2ODM3Ng==", "url": "https://github.com/linkedin/brooklin/pull/702#discussion_r408468376", "bodyText": "yeah, was debating whether to add a dependency on kafka or not for this module so I implemented my own. But you're right, it's just silly code duplication. I'll fix this to use Kafka's TopicPartition.", "author": "somandal", "createdAt": "2020-04-14T22:16:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1NzE0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "984bb03c0d4d646921fb9c5dcc27c48cd751746a", "chunk": "diff --git a/datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java b/datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java\nindex 534af332..2a8d17a8 100644\n--- a/datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java\n+++ b/datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java\n\n@@ -456,39 +455,4 @@ public class EventProducer implements DatastreamEventProducer {\n \n     return Collections.unmodifiableList(metrics);\n   }\n-\n-  /**\n-   * This class encapsulates the topic and partition information for a given event\n-   */\n-  static class TopicPartitionInfo {\n-    private final String _topic;\n-    private final int _partition;\n-\n-    TopicPartitionInfo(String topic, int partition) {\n-      _topic = topic;\n-      _partition = partition;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-      if (this == o) {\n-        return true;\n-      }\n-      if (o == null || getClass() != o.getClass()) {\n-        return false;\n-      }\n-      TopicPartitionInfo that = (TopicPartitionInfo) o;\n-      return _partition == that._partition && Objects.equals(_topic, that._topic);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-      return Objects.hash(_topic, _partition);\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return _topic + \"-\" + _partition;\n-    }\n-  }\n }\n"}}, {"oid": "984bb03c0d4d646921fb9c5dcc27c48cd751746a", "url": "https://github.com/linkedin/brooklin/commit/984bb03c0d4d646921fb9c5dcc27c48cd751746a", "message": "Address review comments", "committedDate": "2020-04-14T22:26:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwNDU0NQ==", "url": "https://github.com/linkedin/brooklin/pull/702#discussion_r414904545", "bodyText": ".toString() is extraneous", "author": "ahmedahamid", "createdAt": "2020-04-24T22:48:32Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java", "diffHunk": "@@ -235,6 +253,31 @@ private void reportSLAMetrics(String topicOrDatastreamName, boolean isWithinSLA,\n         outsideSLAValue);\n   }\n \n+  private void performSlaRelatedLogging(DatastreamRecordMetadata metadata, long eventsSourceTimestamp,\n+      long sourceToDestinationLatencyMs) {\n+    if (_warnLogLatencyEnabled && (sourceToDestinationLatencyMs > _warnLogLatencyThresholdMs)) {\n+      _logger.warn(\"Source to destination latency {} ms is higher than {} ms, Source Timestamp: {}, Metadata: {}\",\n+          sourceToDestinationLatencyMs, _warnLogLatencyThresholdMs, eventsSourceTimestamp, metadata.toString());", "originalCommit": "984bb03c0d4d646921fb9c5dcc27c48cd751746a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk1MDQ1Mg==", "url": "https://github.com/linkedin/brooklin/pull/702#discussion_r414950452", "bodyText": "removed", "author": "somandal", "createdAt": "2020-04-25T01:53:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwNDU0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "918096003f6f750ccb7b7da7de316a6a67f04f2a", "chunk": "diff --git a/datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java b/datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java\nindex 2a8d17a8..daef80a0 100644\n--- a/datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java\n+++ b/datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java\n\n@@ -257,7 +257,7 @@ public class EventProducer implements DatastreamEventProducer {\n       long sourceToDestinationLatencyMs) {\n     if (_warnLogLatencyEnabled && (sourceToDestinationLatencyMs > _warnLogLatencyThresholdMs)) {\n       _logger.warn(\"Source to destination latency {} ms is higher than {} ms, Source Timestamp: {}, Metadata: {}\",\n-          sourceToDestinationLatencyMs, _warnLogLatencyThresholdMs, eventsSourceTimestamp, metadata.toString());\n+          sourceToDestinationLatencyMs, _warnLogLatencyThresholdMs, eventsSourceTimestamp, metadata);\n     }\n \n     if (_numEventsOutsideAltSlaLogEnabled) {\n"}}, {"oid": "918096003f6f750ccb7b7da7de316a6a67f04f2a", "url": "https://github.com/linkedin/brooklin/commit/918096003f6f750ccb7b7da7de316a6a67f04f2a", "message": "Address review comment", "committedDate": "2020-04-25T01:51:57Z", "type": "commit"}]}