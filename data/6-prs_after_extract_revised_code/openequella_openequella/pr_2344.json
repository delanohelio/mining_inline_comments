{"pr_number": 2344, "pr_title": "Spring 5 / Hib 5 Initial Efforts", "pr_createdAt": "2020-09-29T02:56:53Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/2344", "timeline": [{"oid": "f09481826fb5db56a05133852e80bc684744f6b4", "url": "https://github.com/openequella/openEQUELLA/commit/f09481826fb5db56a05133852e80bc684744f6b4", "message": "Temporarily removed links due to plugins.jetbrains.com not responding", "committedDate": "2020-10-06T18:40:02Z", "type": "forcePushed"}, {"oid": "d05f0913b79d3265a877939fb6bac2946d973e62", "url": "https://github.com/openequella/openEQUELLA/commit/d05f0913b79d3265a877939fb6bac2946d973e62", "message": "Changes due to autotest issue resolutions", "committedDate": "2020-10-30T20:54:05Z", "type": "forcePushed"}, {"oid": "035cb08748e38019ee9f837919217bc05e575873", "url": "https://github.com/openequella/openEQUELLA/commit/035cb08748e38019ee9f837919217bc05e575873", "message": "#1214 initial Spring 3 version bump", "committedDate": "2020-11-05T18:48:58Z", "type": "commit"}, {"oid": "995bc2c58d5388e041fc8ec138ec252b5a8196a9", "url": "https://github.com/openequella/openEQUELLA/commit/995bc2c58d5388e041fc8ec138ec252b5a8196a9", "message": "Rollback transactional testing", "committedDate": "2020-11-05T18:48:58Z", "type": "commit"}, {"oid": "73221d504161d2b9bc5f47c40c0c1486b9e35b8b", "url": "https://github.com/openequella/openEQUELLA/commit/73221d504161d2b9bc5f47c40c0c1486b9e35b8b", "message": "WIP - spring 5 upgrade", "committedDate": "2020-11-05T18:48:58Z", "type": "commit"}, {"oid": "ded9d4d5c9c36279a243af6ae41437bc90c97324", "url": "https://github.com/openequella/openEQUELLA/commit/ded9d4d5c9c36279a243af6ae41437bc90c97324", "message": "fix: hib fix for Spring 3+", "committedDate": "2020-11-05T18:48:58Z", "type": "commit"}, {"oid": "aec7b5d0335d64f450440d49b28e393eeed73a0e", "url": "https://github.com/openequella/openEQUELLA/commit/aec7b5d0335d64f450440d49b28e393eeed73a0e", "message": "WIP:  Leveraging Spring 3 efforts", "committedDate": "2020-11-05T18:48:58Z", "type": "commit"}, {"oid": "90edf1c73cdf35865d7a9cd8d3ef94e9a9ca1c6b", "url": "https://github.com/openequella/openEQUELLA/commit/90edf1c73cdf35865d7a9cd8d3ef94e9a9ca1c6b", "message": "WIP:  Continue to leverage Spring 3 efforts", "committedDate": "2020-11-05T18:48:58Z", "type": "commit"}, {"oid": "6146fd6716b3f3a92831ddce2a2a613de2ac5be0", "url": "https://github.com/openequella/openEQUELLA/commit/6146fd6716b3f3a92831ddce2a2a613de2ac5be0", "message": "chore: rollback some changes that in fact did not affect the build with the deps upgrade", "committedDate": "2020-11-05T18:48:58Z", "type": "commit"}, {"oid": "c7a86858de74894b1cfed122a32079edd637f092", "url": "https://github.com/openequella/openEQUELLA/commit/c7a86858de74894b1cfed122a32079edd637f092", "message": "spring3-upgrade:  More build.sbt tweaks, and fixing a leftover generics issue", "committedDate": "2020-11-05T18:48:58Z", "type": "commit"}, {"oid": "2aefa81a044af2788fc5f3ea5ca7964bb098642d", "url": "https://github.com/openequella/openEQUELLA/commit/2aefa81a044af2788fc5f3ea5ca7964bb098642d", "message": "Merging in WIP efforts to make hib5 / Spring5  play nice with oEQ", "committedDate": "2020-11-05T18:48:58Z", "type": "commit"}, {"oid": "60ae66618a75cda2af71af5f5df6b0c0207cce3b", "url": "https://github.com/openequella/openEQUELLA/commit/60ae66618a75cda2af71af5f5df6b0c0207cce3b", "message": "WIP Spring5: More hibernate changes - execute / sql exception", "committedDate": "2020-11-05T18:48:58Z", "type": "commit"}, {"oid": "ed593bd8538a605e3945c8a830739ee9d5d1ed67", "url": "https://github.com/openequella/openEQUELLA/commit/ed593bd8538a605e3945c8a830739ee9d5d1ed67", "message": "WIP hibernate changes to support Spring / Hib 5", "committedDate": "2020-11-05T18:48:58Z", "type": "commit"}, {"oid": "fecb026d84edeaeb66c30b791c38eb475bfac9f0", "url": "https://github.com/openequella/openEQUELLA/commit/fecb026d84edeaeb66c30b791c38eb475bfac9f0", "message": "WIP:  Fixed remoting errors", "committedDate": "2020-11-05T18:48:58Z", "type": "commit"}, {"oid": "74d822b3a5abf8b55c47e29751df5e6947c80da1", "url": "https://github.com/openequella/openEQUELLA/commit/74d822b3a5abf8b55c47e29751df5e6947c80da1", "message": "WIP: fixed dedup error with logging", "committedDate": "2020-11-05T18:48:58Z", "type": "commit"}, {"oid": "a81bbac5d8822e83240b9cca47bb2bfbd52c6878", "url": "https://github.com/openequella/openEQUELLA/commit/a81bbac5d8822e83240b9cca47bb2bfbd52c6878", "message": "WIP:  updated more deps, hib5 updates", "committedDate": "2020-11-05T18:48:59Z", "type": "commit"}, {"oid": "6dd838e0b03df583bc1e146b5cb47c4e55798e86", "url": "https://github.com/openequella/openEQUELLA/commit/6dd838e0b03df583bc1e146b5cb47c4e55798e86", "message": "WIP:  More hib5 updates", "committedDate": "2020-11-05T18:48:59Z", "type": "commit"}, {"oid": "b9cf976e285e30acfcc4daaf7578f8d8bd6492d9", "url": "https://github.com/openequella/openEQUELLA/commit/b9cf976e285e30acfcc4daaf7578f8d8bd6492d9", "message": "WIP: exploratory changes to get hib5 to compile", "committedDate": "2020-11-05T18:48:59Z", "type": "commit"}, {"oid": "47a1c2f0afa3298d12c149c6b89c7bd42135ae4f", "url": "https://github.com/openequella/openEQUELLA/commit/47a1c2f0afa3298d12c149c6b89c7bd42135ae4f", "message": "WIP - source compiles!", "committedDate": "2020-11-05T18:48:59Z", "type": "commit"}, {"oid": "944659f8f9a7db2aed3f4f655457e00f60e7c593", "url": "https://github.com/openequella/openEQUELLA/commit/944659f8f9a7db2aed3f4f655457e00f60e7c593", "message": "WIP:  working through the startup issues", "committedDate": "2020-11-05T18:48:59Z", "type": "commit"}, {"oid": "5857c9a7310469cb74ac10c3d147835a26e383eb", "url": "https://github.com/openequella/openEQUELLA/commit/5857c9a7310469cb74ac10c3d147835a26e383eb", "message": "WIP:  fixed the el startup issue", "committedDate": "2020-11-05T18:48:59Z", "type": "commit"}, {"oid": "00e937dc3b9638d08be83927f86c496432e3ba95", "url": "https://github.com/openequella/openEQUELLA/commit/00e937dc3b9638d08be83927f86c496432e3ba95", "message": "oEQ more or less runs on SpringHib5 now", "committedDate": "2020-11-05T18:48:59Z", "type": "commit"}, {"oid": "9ee2cc3d37411f23f0592fbdbc8dea7549865872", "url": "https://github.com/openequella/openEQUELLA/commit/9ee2cc3d37411f23f0592fbdbc8dea7549865872", "message": "Added license header", "committedDate": "2020-11-05T18:48:59Z", "type": "commit"}, {"oid": "58957ac35956c586552566f70315ba8a89e1bdfd", "url": "https://github.com/openequella/openEQUELLA/commit/58957ac35956c586552566f70315ba8a89e1bdfd", "message": "Fixed hierarchies", "committedDate": "2020-11-05T18:48:59Z", "type": "commit"}, {"oid": "ed30e3277024aca7ddf0fb8d8aa9bb01d85fbcd3", "url": "https://github.com/openequella/openEQUELLA/commit/ed30e3277024aca7ddf0fb8d8aa9bb01d85fbcd3", "message": "Various hib5 fixes", "committedDate": "2020-11-05T18:48:59Z", "type": "commit"}, {"oid": "0a4c89126f91ab0f95ebe04fa2cb8c4503a65f16", "url": "https://github.com/openequella/openEQUELLA/commit/0a4c89126f91ab0f95ebe04fa2cb8c4503a65f16", "message": "fixed minor regression", "committedDate": "2020-11-05T18:48:59Z", "type": "commit"}, {"oid": "4eeac0a4dcd421d3b027529ec52b0772d5ee74d7", "url": "https://github.com/openequella/openEQUELLA/commit/4eeac0a4dcd421d3b027529ec52b0772d5ee74d7", "message": "Fixed a lazy load on a detached entity", "committedDate": "2020-11-05T18:48:59Z", "type": "commit"}, {"oid": "3048a408c2b7730bfc8a3c88d767a5f14f795f30", "url": "https://github.com/openequella/openEQUELLA/commit/3048a408c2b7730bfc8a3c88d767a5f14f795f30", "message": "Upgrade CXF / Tika - CXF was needed for Spring 5", "committedDate": "2020-11-05T18:49:00Z", "type": "commit"}, {"oid": "a0d3518c18512525f4ff416b2aca6e1030273922", "url": "https://github.com/openequella/openEQUELLA/commit/a0d3518c18512525f4ff416b2aca6e1030273922", "message": "Back to known working (kindof) CXF / Tika versions", "committedDate": "2020-11-05T18:49:00Z", "type": "commit"}, {"oid": "dd911728235fe0b43d83003ef0c386a80570ce43", "url": "https://github.com/openequella/openEQUELLA/commit/dd911728235fe0b43d83003ef0c386a80570ce43", "message": "CXF 3.4.0 and Tika 1.24.1 is now working locally", "committedDate": "2020-11-05T18:49:00Z", "type": "commit"}, {"oid": "def14492f685b327a13d208556f67d653ae1f127", "url": "https://github.com/openequella/openEQUELLA/commit/def14492f685b327a13d208556f67d653ae1f127", "message": "Temporarily removed links due to plugins.jetbrains.com not responding", "committedDate": "2020-11-05T18:49:00Z", "type": "commit"}, {"oid": "a356c624fe6f01a5ba4ac8daf99f5e719552e349", "url": "https://github.com/openequella/openEQUELLA/commit/a356c624fe6f01a5ba4ac8daf99f5e719552e349", "message": "Revert the temp change of link removal", "committedDate": "2020-11-05T18:49:00Z", "type": "commit"}, {"oid": "d43e7ea3d2ad98ec45831fd2f45fb7f7c5ddd107", "url": "https://github.com/openequella/openEQUELLA/commit/d43e7ea3d2ad98ec45831fd2f45fb7f7c5ddd107", "message": "Merge bus-extensions.txt instead of keeping just the first", "committedDate": "2020-11-05T18:49:00Z", "type": "commit"}, {"oid": "d98f3159569655d220e983ccfceb6ef648f90e7c", "url": "https://github.com/openequella/openEQUELLA/commit/d98f3159569655d220e983ccfceb6ef648f90e7c", "message": "Better handling of AOP deps, and checking for null objs prior to eviction", "committedDate": "2020-11-05T18:49:00Z", "type": "commit"}, {"oid": "4f64b80ef7f0b64766ea7eca73c94907015f0957", "url": "https://github.com/openequella/openEQUELLA/commit/4f64b80ef7f0b64766ea7eca73c94907015f0957", "message": "SpringHib5 - Rewire Kaltura build branch and add hib5 config", "committedDate": "2020-11-05T18:49:00Z", "type": "commit"}, {"oid": "c0ed1f2e0f87ea1c7d613582861ea09ad679175c", "url": "https://github.com/openequella/openEQUELLA/commit/c0ed1f2e0f87ea1c7d613582861ea09ad679175c", "message": "Revisions due to Oracle DB testing", "committedDate": "2020-11-05T18:49:00Z", "type": "commit"}, {"oid": "4b4ef3dec619de8ce9c8e05fda6d2bf97641633a", "url": "https://github.com/openequella/openEQUELLA/commit/4b4ef3dec619de8ce9c8e05fda6d2bf97641633a", "message": "Changes due to autotest issue resolutions", "committedDate": "2020-11-05T18:49:00Z", "type": "commit"}, {"oid": "0bc098778fe3e326f75bf0b1fd08934c4922e27a", "url": "https://github.com/openequella/openEQUELLA/commit/0bc098778fe3e326f75bf0b1fd08934c4922e27a", "message": "Adjusting comments due to lessons learned", "committedDate": "2020-11-05T18:49:00Z", "type": "commit"}, {"oid": "f68476ba268e987d099639fe3866696a27dba73f", "url": "https://github.com/openequella/openEQUELLA/commit/f68476ba268e987d099639fe3866696a27dba73f", "message": "Added missing header to new file", "committedDate": "2020-11-05T18:49:01Z", "type": "commit"}, {"oid": "f68476ba268e987d099639fe3866696a27dba73f", "url": "https://github.com/openequella/openEQUELLA/commit/f68476ba268e987d099639fe3866696a27dba73f", "message": "Added missing header to new file", "committedDate": "2020-11-05T18:49:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMjUxNA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518402514", "bodyText": "is this still pending review?", "author": "ChristianMurphy", "createdAt": "2020-11-05T22:14:59Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/AbstractHibernateDao.java", "diffHunk": "@@ -42,21 +42,25 @@ protected synchronized HibernateTemplate getHibernateTemplate() {\n       lastFactory = newFactory;\n       template =\n           new HibernateTemplate(newFactory) {\n+            // Removed the method param, since it no longer exists in hib5:  boolean\n+            // enforceNewSession\n+            // TODO need to understand the impact of the removal\n             @Override\n-            protected Object doExecute(\n-                HibernateCallback action, boolean enforceNewSession, boolean enforceNativeSession)\n+            protected Object doExecute(HibernateCallback action, boolean enforceNativeSession)\n                 throws DataAccessException {\n               Thread currentThread = Thread.currentThread();\n               ClassLoader origLoader = currentThread.getContextClassLoader();\n               try {\n                 currentThread.setContextClassLoader(Session.class.getClassLoader());\n-                return super.doExecute(action, enforceNewSession, enforceNativeSession);\n+                return super.doExecute(action, enforceNativeSession);\n               } finally {\n                 currentThread.setContextClassLoader(origLoader);\n               }\n             }\n           };\n-      template.setAllowCreate(false);\n+      // TODO - no longer exists in hib5.  Need to review\n+      // template.setAllowCreate(false);", "originalCommit": "f68476ba268e987d099639fe3866696a27dba73f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1MDg2NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522550864", "bodyText": "Ah - no, just a leftover comment.  I'll clean it up.", "author": "cbeach47", "createdAt": "2020-11-13T01:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMjUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "d0799310d25faffbb434075e04269759a5f58cc4", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/AbstractHibernateDao.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/AbstractHibernateDao.java\nindex 412d62f24..4989db819 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/AbstractHibernateDao.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/AbstractHibernateDao.java\n\n@@ -42,9 +42,6 @@ public abstract class AbstractHibernateDao {\n       lastFactory = newFactory;\n       template =\n           new HibernateTemplate(newFactory) {\n-            // Removed the method param, since it no longer exists in hib5:  boolean\n-            // enforceNewSession\n-            // TODO need to understand the impact of the removal\n             @Override\n             protected Object doExecute(HibernateCallback action, boolean enforceNativeSession)\n                 throws DataAccessException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMjU5NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518402595", "bodyText": "is this still pending review?", "author": "ChristianMurphy", "createdAt": "2020-11-05T22:15:11Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/AbstractHibernateDao.java", "diffHunk": "@@ -42,21 +42,25 @@ protected synchronized HibernateTemplate getHibernateTemplate() {\n       lastFactory = newFactory;\n       template =\n           new HibernateTemplate(newFactory) {\n+            // Removed the method param, since it no longer exists in hib5:  boolean\n+            // enforceNewSession\n+            // TODO need to understand the impact of the removal", "originalCommit": "f68476ba268e987d099639fe3866696a27dba73f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NzczMw==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520297733", "bodyText": "What @ChristianMurphy said. \ud83d\ude09", "author": "edalex-ian", "createdAt": "2020-11-10T05:33:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMjU5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1MDk1MA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522550950", "bodyText": "Ah - no, just a leftover comment.  I'll clean it up.", "author": "cbeach47", "createdAt": "2020-11-13T01:27:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMjU5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0799310d25faffbb434075e04269759a5f58cc4", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/AbstractHibernateDao.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/AbstractHibernateDao.java\nindex 412d62f24..4989db819 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/AbstractHibernateDao.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/AbstractHibernateDao.java\n\n@@ -42,9 +42,6 @@ public abstract class AbstractHibernateDao {\n       lastFactory = newFactory;\n       template =\n           new HibernateTemplate(newFactory) {\n-            // Removed the method param, since it no longer exists in hib5:  boolean\n-            // enforceNewSession\n-            // TODO need to understand the impact of the removal\n             @Override\n             protected Object doExecute(HibernateCallback action, boolean enforceNativeSession)\n                 throws DataAccessException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMzM2OA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518403368", "bodyText": "would it be possible/make sense to filter the objects for valid ones?\nOr is swallowing the error the only/most effective way to handle this?", "author": "ChristianMurphy", "createdAt": "2020-11-05T22:16:56Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/equella/service/impl/InitialiserServiceImpl.java", "diffHunk": "@@ -99,7 +102,27 @@ public void entitySimplified(Object old, Object newObj) {\n    */\n   private void evictFromSession(Set<Object> os) {\n     for (Object o : os) {\n-      getHibernateTemplate().evict(o);\n+      try {\n+        getHibernateTemplate().evict(o);\n+      } catch (IllegalArgumentException iae) {\n+        if (iae.getMessage().startsWith(\"Non-entity object instance passed to evict\")) {\n+          // This is being thrown in DefaultEvictEventListener.java:94\n+          // Does not appear to be a problem in this case, so trapping\n+          // and ignoring this specific case\n+          LOGGER.debug(\n+              \"Ignoring error with type [\"", "originalCommit": "f68476ba268e987d099639fe3866696a27dba73f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1NDEwOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522554109", "bodyText": "Please see response above.", "author": "cbeach47", "createdAt": "2020-11-13T01:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMzM2OA=="}], "type": "inlineReview", "revised_code": {"commit": "d0799310d25faffbb434075e04269759a5f58cc4", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/equella/service/impl/InitialiserServiceImpl.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/equella/service/impl/InitialiserServiceImpl.java\nindex 2b5c4a9f5..4af93810f 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/equella/service/impl/InitialiserServiceImpl.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/equella/service/impl/InitialiserServiceImpl.java\n\n@@ -115,11 +115,6 @@ public class InitialiserServiceImpl extends AbstractHibernateDao implements Init\n                   + \"]: \"\n                   + iae.getMessage());\n         } else {\n-          LOGGER.error(\n-              \"Error being thrown - type [\"\n-                  + o.getClass().getCanonicalName()\n-                  + \"]: \"\n-                  + iae.getMessage());\n           throw iae;\n         }\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNDA4NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518404084", "bodyText": "How large would this change be?", "author": "ChristianMurphy", "createdAt": "2020-11-05T22:18:28Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -36,19 +36,23 @@\n import java.util.Set;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.hibernate.classic.Session;\n+import org.apache.curator.shaded.com.google.common.collect.Lists;\n+import org.hibernate.Session;\n+import org.hibernate.boot.model.relational.AuxiliaryDatabaseObject;\n import org.hibernate.dialect.Dialect;\n-import org.hibernate.engine.Mapping;\n+import org.hibernate.engine.spi.Mapping;\n import org.hibernate.id.PersistentIdentifierGenerator;\n-import org.hibernate.impl.SessionFactoryImpl;\n+import org.hibernate.internal.SessionFactoryImpl;\n import org.hibernate.jdbc.Work;\n-import org.hibernate.mapping.AuxiliaryDatabaseObject;\n import org.hibernate.mapping.Column;\n import org.hibernate.mapping.ForeignKey;\n import org.hibernate.mapping.Index;\n import org.hibernate.mapping.Table;\n import org.hibernate.mapping.UniqueKey;\n \n+// TECH_DEBT - found in SpringHib5, SessionFactoryImpl is now internal and should not be used\n+// directly.", "originalCommit": "f68476ba268e987d099639fe3866696a27dba73f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQxNzU3NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522417574", "bodyText": "Interesting - looks like a pretty minor change.  I got rid of the internal reference.  If things start breaking, I'll revert an open an issue ticket for tech_debt.", "author": "cbeach47", "createdAt": "2020-11-12T20:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNDA4NA=="}], "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java\nindex 1e9fc920a..18c5c8110 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java\n\n@@ -38,11 +38,12 @@ import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.curator.shaded.com.google.common.collect.Lists;\n import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n import org.hibernate.boot.model.relational.AuxiliaryDatabaseObject;\n import org.hibernate.dialect.Dialect;\n import org.hibernate.engine.spi.Mapping;\n+import org.hibernate.engine.spi.SessionFactoryImplementor;\n import org.hibernate.id.PersistentIdentifierGenerator;\n-import org.hibernate.internal.SessionFactoryImpl;\n import org.hibernate.jdbc.Work;\n import org.hibernate.mapping.Column;\n import org.hibernate.mapping.ForeignKey;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNDM2MA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518404360", "bodyText": "is this still a pending change?", "author": "ChristianMurphy", "createdAt": "2020-11-05T22:19:07Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateServiceImpl.java", "diffHunk": "@@ -71,7 +72,11 @@ protected HibernateFactory getHibernateFactory(String name, boolean system) {\n     }\n     HibernateFactory factory = hibernateService.createConfiguration(dataSource, clazzes);\n     factory.setClassLoader(getClass().getClassLoader());\n-    factory.setProperty(Environment.TRANSACTION_STRATEGY, SpringTransactionFactory.class.getName());\n+    // TODO - likely need to reconfigure this.  SpringTransactionFactory doesn't exist in\n+    // Spring 5 / Hib5.   -\n+    // https://stackoverflow.com/questions/43057858/where-did-the-class-org-hibernate-transaction-jdbctransactionfactory-go-in-hiber\n+    //    factory.setProperty(Environment.TRANSACTION_STRATEGY,\n+    //     SpringTransactionFactory.class.getName());", "originalCommit": "f68476ba268e987d099639fe3866696a27dba73f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQzOTcyNw==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522439727", "bodyText": "no - leftover comment - the default strategy of JDBC suffices.", "author": "cbeach47", "createdAt": "2020-11-12T21:33:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNDM2MA=="}], "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateServiceImpl.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateServiceImpl.java\nindex 0e8e61dcb..32370c191 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateServiceImpl.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateServiceImpl.java\n\n@@ -72,11 +70,6 @@ public class HibernateServiceImpl implements HibernateService {\n     }\n     HibernateFactory factory = hibernateService.createConfiguration(dataSource, clazzes);\n     factory.setClassLoader(getClass().getClassLoader());\n-    // TODO - likely need to reconfigure this.  SpringTransactionFactory doesn't exist in\n-    // Spring 5 / Hib5.   -\n-    // https://stackoverflow.com/questions/43057858/where-did-the-class-org-hibernate-transaction-jdbctransactionfactory-go-in-hiber\n-    //    factory.setProperty(Environment.TRANSACTION_STRATEGY,\n-    //     SpringTransactionFactory.class.getName());\n     factory.setProperty(\n         Environment.CURRENT_SESSION_CONTEXT_CLASS, SpringSessionContext.class.getName());\n     return factory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNTgzMw==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518405833", "bodyText": "Is Java 5 in the support matrix?\nI thought it was already set to 7 or 8", "author": "ChristianMurphy", "createdAt": "2020-11-05T22:22:17Z", "path": "Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java", "diffHunk": "@@ -65,8 +65,8 @@\n       ImmutableSet.of(\n           BaseEntity.class, EntityPack.class, Item.class, ItemPack.class, ActivateRequest.class);\n \n-  final Map<CacheKey, SecurityAttribute> attributeCache =\n-      CollectionFactory.createConcurrentMapIfPossible(16);\n+  // TODO - this assumes Java 5+ is required for oEQ.", "originalCommit": "f68476ba268e987d099639fe3866696a27dba73f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzNjcxOA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r518436718", "bodyText": "Sounds right.  I did a search for documentation - our known supported software guide doesn't say - https://openequella.github.io/server-administration/KnownWorkingSupportingSoftware.html\nSO - anyone concerned if we set the minimum version to 7, but note the developers only test against JDK 8?", "author": "cbeach47", "createdAt": "2020-11-05T23:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNTgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyMTE4Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520321186", "bodyText": "You'll see in project/CommonSettings.scala that we build to target Java 8. So we should probably update the doco site, but also you're free to target 8 here. ;)", "author": "edalex-ian", "createdAt": "2020-11-10T06:30:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNTgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc1NTYzMA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r521755630", "bodyText": "Sounds good. I've removed the java version comments / checks and opened:\nhttps://github.com/openequella/openequella.github.io/pull/74\n\nto update the docs.", "author": "cbeach47", "createdAt": "2020-11-12T01:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNTgzMw=="}], "type": "inlineReview", "revised_code": {"commit": "f4a749a953bddb157b1662a5656fee17a41f1825", "chunk": "diff --git a/Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java b/Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java\nindex 25f7d2499..b6799c60b 100644\n--- a/Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java\n+++ b/Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java\n\n@@ -65,7 +64,6 @@ public class SecurityAttributeSource {\n       ImmutableSet.of(\n           BaseEntity.class, EntityPack.class, Item.class, ItemPack.class, ActivateRequest.class);\n \n-  // TODO - this assumes Java 5+ is required for oEQ.\n   final Map<CacheKey, SecurityAttribute> attributeCache = new ConcurrentHashMap<>(16);\n \n   public SecurityAttribute getAttribute(Method method, Class<?> targetClass) {\n"}}, {"oid": "2410c2dac146040663d0da063e8479aa4b6e887c", "url": "https://github.com/openequella/openEQUELLA/commit/2410c2dac146040663d0da063e8479aa4b6e887c", "message": "New configs for Hib and Log4j are now defaults for installs and upgrades", "committedDate": "2020-11-06T05:23:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI2OTk2MA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520269960", "bodyText": "Not sure I'm following this new comment. I guess I'm confused that these aren't going through JPA / Hibernate (how are they used), but also that no other changes are below so is this comment still needed?\nFeels like the comment might be a bit of a fragment of a bigger situation. \ud83e\udd14\nThere's several instances of this comment, so I'm rather interested to understand.", "author": "edalex-ian", "createdAt": "2020-11-10T03:53:55Z", "path": "Source/Plugins/Core/com.equella.base/src/com/tle/beans/usermanagement/standard/ReplicatedConfiguration.java", "diffHunk": "@@ -27,6 +27,8 @@\n \n @SuppressWarnings(\"nls\")\n public class ReplicatedConfiguration extends UserManagementSettings {\n+  // [SpringHib5] Note - these queries with '?' in them do not need to be\n+  // ordinal since they aren't piped through JPA / Hibernate logic.", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ5NjcxMA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522496710", "bodyText": "I've revised the comment to the following.  I figured adding this comment without code changes would help clarify why there is a difference.  Does the revision make more sense?\n// General note on the queries in this class - With the advent of hibernate 5,\n// queries with '?' in them need to be ordinal ( ie `?4` ).  However, this class\n// does not leverage the JPA / Hibernate logic, so we can leave the `?`s as-is.", "author": "cbeach47", "createdAt": "2020-11-12T23:19:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI2OTk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgwODkzNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r524808935", "bodyText": "Good stuff. \ud83d\udc4d", "author": "edalex-ian", "createdAt": "2020-11-17T00:38:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI2OTk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.base/src/com/tle/beans/usermanagement/standard/ReplicatedConfiguration.java b/Source/Plugins/Core/com.equella.base/src/com/tle/beans/usermanagement/standard/ReplicatedConfiguration.java\nindex 96eb0d50a..5abee0aae 100644\n--- a/Source/Plugins/Core/com.equella.base/src/com/tle/beans/usermanagement/standard/ReplicatedConfiguration.java\n+++ b/Source/Plugins/Core/com.equella.base/src/com/tle/beans/usermanagement/standard/ReplicatedConfiguration.java\n\n@@ -27,8 +27,9 @@ import java.util.List;\n \n @SuppressWarnings(\"nls\")\n public class ReplicatedConfiguration extends UserManagementSettings {\n-  // [SpringHib5] Note - these queries with '?' in them do not need to be\n-  // ordinal since they aren't piped through JPA / Hibernate logic.\n+  // General note on the queries in this class - With the advent of hibernate 5,\n+  // queries with '?' in them need to be ordinal ( ie `?4` ).  However, this class\n+  // does not leverage the JPA / Hibernate logic, so we can leave the `?`s as-is.\n   private static final long serialVersionUID = 1L;\n \n   private static final String DIGEST = \"SHA1\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI3Mjg5MA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520272890", "bodyText": "FYI - As we update code where it has the old NLS check comments, we've been removing them seeing it's now cruft with the absence any checking. Feel free to do the same.", "author": "edalex-ian", "createdAt": "2020-11-10T04:05:11Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/copyright/dao/AbstractCopyrightDao.java", "diffHunk": "@@ -187,8 +190,9 @@ public H getHoldingForItem(Item item) {\n       return holding;\n     }\n     List<H> holdings =\n-        getHibernateTemplate()\n-            .find(query(\"select p.holding from %p p where p.item = ?\"), item); // $NON-NLS-1$\n+        (List<H>)\n+            getHibernateTemplate()\n+                .find(query(\"select p.holding from %p p where p.item = ?0\"), item); // $NON-NLS-1$", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/copyright/dao/AbstractCopyrightDao.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/copyright/dao/AbstractCopyrightDao.java\nindex 6a201dc8a..432d724d6 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/copyright/dao/AbstractCopyrightDao.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/copyright/dao/AbstractCopyrightDao.java\n\n@@ -192,7 +192,7 @@ public abstract class AbstractCopyrightDao<H extends Holding, P extends Portion,\n     List<H> holdings =\n         (List<H>)\n             getHibernateTemplate()\n-                .find(query(\"select p.holding from %p p where p.item = ?0\"), item); // $NON-NLS-1$\n+                .find(query(\"select p.holding from %p p where p.item = ?0\"), item);\n     return holdings.isEmpty() ? null : holdings.get(0);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4MzA2OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520283069", "bodyText": "Would it be better to keep things simple (even if not enhanced for readability) by simply using i here? If we just want to enhance readability, I would't be opposed to a comment saying: generating ordinal parameter strings of ?0, ?1 .. ?n", "author": "edalex-ian", "createdAt": "2020-11-10T04:44:58Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/i18n/dao/impl/LanguageDaoImpl.java", "diffHunk": "@@ -167,12 +167,13 @@ private void populateNameMap(\n   @Override\n   public void deleteBundles(Collection<Long> bundles) {\n     if (!bundles.isEmpty()) {\n+      int paramCounter = 0;\n       StringBuilder query = new StringBuilder(\"(\"); // $NON-NLS-1$\n       for (int i = 0; i < bundles.size(); i++) {\n         if (i > 0) {\n           query.append(',');\n         }\n-        query.append('?');\n+        query.append('?').append(paramCounter++);", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwMDM0NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522300345", "bodyText": "yeah, that's a good point - I switched out paramCounter for i.", "author": "cbeach47", "createdAt": "2020-11-12T17:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4MzA2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/i18n/dao/impl/LanguageDaoImpl.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/i18n/dao/impl/LanguageDaoImpl.java\nindex 817b76029..5cb70eeb3 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/i18n/dao/impl/LanguageDaoImpl.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/i18n/dao/impl/LanguageDaoImpl.java\n\n@@ -167,23 +166,19 @@ public class LanguageDaoImpl extends GenericInstitionalDaoImpl<Language, Long>\n   @Override\n   public void deleteBundles(Collection<Long> bundles) {\n     if (!bundles.isEmpty()) {\n-      int paramCounter = 0;\n-      StringBuilder query = new StringBuilder(\"(\"); // $NON-NLS-1$\n+      StringBuilder query = new StringBuilder(\"(\");\n       for (int i = 0; i < bundles.size(); i++) {\n         if (i > 0) {\n           query.append(',');\n         }\n-        query.append('?').append(paramCounter++);\n+        query.append('?').append(i);\n       }\n       query.append(')');\n       getHibernateTemplate()\n           .bulkUpdate(\n-              \"delete LanguageString where bundle.id in \" + query.toString(), // $NON-NLS-1$\n-              bundles.toArray());\n+              \"delete LanguageString where bundle.id in \" + query.toString(), bundles.toArray());\n       getHibernateTemplate()\n-          .bulkUpdate(\n-              \"delete LanguageBundle where id in \" + query.toString(), // $NON-NLS-1$\n-              bundles.toArray());\n+          .bulkUpdate(\"delete LanguageBundle where id in \" + query.toString(), bundles.toArray());\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NDA5Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520284092", "bodyText": "As before, maybe just use i.", "author": "edalex-ian", "createdAt": "2020-11-10T04:49:04Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/item/dao/impl/ItemDaoImpl.java", "diffHunk": "@@ -430,21 +442,26 @@ public ItemIdKey getItemIdKey(Long id) {\n     hql.append(\" FROM Item i WHERE \");\n \n     int i = 0;\n+    int paramCounter = 0;\n     hql.append('(');\n     for (ItemKey key : keys) {\n       if (i > 0) {\n         hql.append(\" OR \");\n       }\n       keyArray[i++] = key.getUuid();\n       keyArray[i++] = key.getVersion();\n-      hql.append(\"(i.uuid = ? and i.version = ?)\");\n+      hql.append(\"(i.uuid = ?\")\n+          .append(paramCounter++)\n+          .append(\" and i.version = ?\")\n+          .append(paramCounter++)", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwODk0MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522308941", "bodyText": "Sounds good \ud83d\udc4d", "author": "cbeach47", "createdAt": "2020-11-12T18:04:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NDA5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/item/dao/impl/ItemDaoImpl.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/item/dao/impl/ItemDaoImpl.java\nindex db79ccd99..94498a810 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/item/dao/impl/ItemDaoImpl.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/item/dao/impl/ItemDaoImpl.java\n\n@@ -442,25 +442,25 @@ public class ItemDaoImpl extends GenericInstitionalDaoImpl<Item, Long> implement\n     hql.append(\" FROM Item i WHERE \");\n \n     int i = 0;\n-    int paramCounter = 0;\n     hql.append('(');\n     for (ItemKey key : keys) {\n       if (i > 0) {\n         hql.append(\" OR \");\n       }\n-      keyArray[i++] = key.getUuid();\n-      keyArray[i++] = key.getVersion();\n-      hql.append(\"(i.uuid = ?\")\n-          .append(paramCounter++)\n-          .append(\" and i.version = ?\")\n-          .append(paramCounter++)\n-          .append(\") \");\n+\n+      keyArray[i] = key.getUuid();\n+      hql.append(\"(i.uuid = ?\").append(i++);\n+\n+      keyArray[i] = key.getVersion();\n+      hql.append(\" and i.version = ?\").append(i++).append(\") \");\n     }\n     hql.append(\") \");\n \n     keyArray[i] = CurrentInstitution.get();\n-    hql.append(\" and i.institution = ?\").append(paramCounter++);\n-    LOGGER.trace(\"selectForIds sql: \" + hql);\n+    hql.append(\" and i.institution = ?\").append(i);\n+    if (LOGGER.isTraceEnabled()) {\n+      LOGGER.trace(\"HQL to select items based on a collection of IDs: \" + hql);\n+    }\n     List<Object[]> results = (List<Object[]>) getHibernateTemplate().find(hql.toString(), keyArray);\n \n     Map<ItemId, U> map = new HashMap<ItemId, U>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NTI2Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520285266", "bodyText": "Couple of considerations:\n\nIs this still needed - or was it just while you were working through things? (This can be see just be turning on Hibernate logging.)\nIf still needed, maybe the log message can be improved and maybe change \" sql:\" to \" HQL:\"\nAlso consider placing in block of if(LOGGER.isTraceEnabled())", "author": "edalex-ian", "createdAt": "2020-11-10T04:53:22Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/item/dao/impl/ItemDaoImpl.java", "diffHunk": "@@ -430,21 +442,26 @@ public ItemIdKey getItemIdKey(Long id) {\n     hql.append(\" FROM Item i WHERE \");\n \n     int i = 0;\n+    int paramCounter = 0;\n     hql.append('(');\n     for (ItemKey key : keys) {\n       if (i > 0) {\n         hql.append(\" OR \");\n       }\n       keyArray[i++] = key.getUuid();\n       keyArray[i++] = key.getVersion();\n-      hql.append(\"(i.uuid = ? and i.version = ?)\");\n+      hql.append(\"(i.uuid = ?\")\n+          .append(paramCounter++)\n+          .append(\" and i.version = ?\")\n+          .append(paramCounter++)\n+          .append(\") \");\n     }\n     hql.append(\") \");\n \n     keyArray[i] = CurrentInstitution.get();\n-    hql.append(\" and i.institution = ?\");\n-\n-    List<Object[]> results = getHibernateTemplate().find(hql.toString(), keyArray);\n+    hql.append(\" and i.institution = ?\").append(paramCounter++);\n+    LOGGER.trace(\"selectForIds sql: \" + hql);", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxMjM0OA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522312348", "bodyText": "I find it helpful to look at the query before Hibernate touches it, so I left it in.  I did wrap it in the isTraceEnabled block and improved the messaging.", "author": "cbeach47", "createdAt": "2020-11-12T18:09:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NTI2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/item/dao/impl/ItemDaoImpl.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/item/dao/impl/ItemDaoImpl.java\nindex db79ccd99..94498a810 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/item/dao/impl/ItemDaoImpl.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/item/dao/impl/ItemDaoImpl.java\n\n@@ -442,25 +442,25 @@ public class ItemDaoImpl extends GenericInstitionalDaoImpl<Item, Long> implement\n     hql.append(\" FROM Item i WHERE \");\n \n     int i = 0;\n-    int paramCounter = 0;\n     hql.append('(');\n     for (ItemKey key : keys) {\n       if (i > 0) {\n         hql.append(\" OR \");\n       }\n-      keyArray[i++] = key.getUuid();\n-      keyArray[i++] = key.getVersion();\n-      hql.append(\"(i.uuid = ?\")\n-          .append(paramCounter++)\n-          .append(\" and i.version = ?\")\n-          .append(paramCounter++)\n-          .append(\") \");\n+\n+      keyArray[i] = key.getUuid();\n+      hql.append(\"(i.uuid = ?\").append(i++);\n+\n+      keyArray[i] = key.getVersion();\n+      hql.append(\" and i.version = ?\").append(i++).append(\") \");\n     }\n     hql.append(\") \");\n \n     keyArray[i] = CurrentInstitution.get();\n-    hql.append(\" and i.institution = ?\").append(paramCounter++);\n-    LOGGER.trace(\"selectForIds sql: \" + hql);\n+    hql.append(\" and i.institution = ?\").append(i);\n+    if (LOGGER.isTraceEnabled()) {\n+      LOGGER.trace(\"HQL to select items based on a collection of IDs: \" + hql);\n+    }\n     List<Object[]> results = (List<Object[]>) getHibernateTemplate().find(hql.toString(), keyArray);\n \n     Map<ItemId, U> map = new HashMap<ItemId, U>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NjQzMA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520286430", "bodyText": "Gah!\nWell, even the GitHub diff broken down on this one. But from what I can tell it looks like you were careful. Are you giving some extra special testing to this?", "author": "edalex-ian", "createdAt": "2020-11-10T04:57:26Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/item/standard/dao/impl/ItemCommentDaoImpl.java", "diffHunk": "@@ -92,112 +92,113 @@ public Object doInHibernate(Session session) {\n   }\n \n   @Override\n-  @SuppressWarnings(\"unchecked\")\n   public List<Comment> getComments(\n       final Item item,\n       final EnumSet<CommentFilter> filter,\n       final CommentOrder order,\n       final int limit) {\n-    return getHibernateTemplate()\n-        .executeFind(\n-            new HibernateCallback() {\n-              @Override\n-              public Object doInHibernate(Session session) {\n-                // SQL QUERY EXPLANATION!\n-                //\n-                // The following is a native SQL query, but Hibernate still\n-                // gives us some love to avoid nastiness. It needs to be a\n-                // native SQL query because HQL doesn't allow for joining onto a\n-                // selected set of result, eg, ...FROM (SELECT ...)...\n-                //\n-                // Tread very carefully.\n-\n-                StringBuilder sb = new StringBuilder(\"SELECT {c.*} FROM comments c\");\n-\n-                if (filter.contains(CommentFilter.ONLY_MOST_RECENT_PER_USER)) {\n-                  sb.append(\" JOIN (\");\n-                  sb.append(\"   SELECT owner, max(date_created) as date_created\");\n-                  sb.append(\"   FROM comments\");\n-                  sb.append(\"   WHERE item_id = :itemdbid\");\n-                  sb.append(\"   AND owner IS NOT NULL\");\n-\n-                  if (filter.contains(CommentFilter.NOT_ANONYMOUS_OR_GUEST)) {\n-                    // We already filter out blank guest rows when we do the\n-                    // group by, so only filter out anonymous comments here.\n-                    sb.append(\"   AND anonymous = :false\");\n-                  }\n-\n-                  if (filter.contains(CommentFilter.MUST_HAVE_COMMENT)) {\n-                    sb.append(\" AND \\\"comment\\\" IS NOT NULL\");\n-                  }\n-\n-                  if (filter.contains(CommentFilter.MUST_HAVE_RATING)) {\n-                    sb.append(\" AND rating > 0\");\n-                  }\n+    return (List<Comment>)\n+        getHibernateTemplate()\n+            .execute(\n+                new HibernateCallback() {\n+                  @Override\n+                  public Object doInHibernate(Session session) {\n+                    // SQL QUERY EXPLANATION!\n+                    //\n+                    // The following is a native SQL query, but Hibernate still\n+                    // gives us some love to avoid nastiness. It needs to be a\n+                    // native SQL query because HQL doesn't allow for joining onto a\n+                    // selected set of result, eg, ...FROM (SELECT ...)...\n+                    //\n+                    // Tread very carefully.", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc1ODg2OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r521758869", "bodyText": "The changes in this file were a handful of casts, and an import path switch.  The github diff unfortunately makes it look quite ugly.\nFor clarity, these are the type castings added:", "author": "cbeach47", "createdAt": "2020-11-12T01:22:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NjQzMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NjcyMw==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520286723", "bodyText": "Wow, I see this class was using a mixture of these annotations. Well, at least that's now tidied up. \ud83d\udc4d", "author": "edalex-ian", "createdAt": "2020-11-10T04:58:47Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/legacy/migration/RemoveAssemblerAndActivityWizard.java", "diffHunk": "@@ -312,7 +311,7 @@ private void removeAllNodesWithName(PropBagEx xml, String name) {\n   @AccessType(\"field\")\n   @Entity(name = \"ActivityWizard\")\n   public static class FakeActivityWizard extends FakeBaseEntity {\n-    @CollectionOfElements(fetch = FetchType.LAZY)\n+    @ElementCollection(fetch = FetchType.LAZY)", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4ODU4Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520288586", "bodyText": "In this case I see the value of paramCounter. \ud83d\udc4d\n(Just thought I'd mention to avoid an ambiguity.)", "author": "edalex-ian", "createdAt": "2020-11-10T05:05:21Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/settings/dao/impl/ConfigurationDaoImpl.java", "diffHunk": "@@ -56,17 +56,18 @@ public synchronized void deletePropertiesLike(Collection<String> select) {\n     final StringBuilder buffer = new StringBuilder();\n     buffer.append(\"from ConfigurationProperty where (\");\n     int length = select.size();\n+    int paramCounter = 0;\n     Object[] values = select.toArray(new Object[length + 1]);\n     for (int i = 0; i < length; i++) {\n       if (i > 0) {\n         buffer.append(\" or \");\n       }\n       values[i] = values[i].toString() + '%';\n-      buffer.append(\"key.property like ?\");\n+      buffer.append(\"key.property like ?\").append(paramCounter++);\n     }\n     buffer.append(\")\");\n \n-    buffer.append(\" and key.institutionId = ?\");\n+    buffer.append(\" and key.institutionId = ?\").append(paramCounter++);", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MTMwNw==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520291307", "bodyText": "Is this TODO still to be done?", "author": "edalex-ian", "createdAt": "2020-11-10T05:15:34Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/core/filter/HibernateFilter.java", "diffHunk": "@@ -55,7 +56,10 @@ public FilterResult filterRequest(HttpServletRequest request, HttpServletRespons\n \n       if (!TransactionSynchronizationManager.hasResource(sessionFactory)) {\n         LOGGER.debug(\"Opening single Hibernate Session in OpenSessionInViewFilter\"); // $NON-NLS-1$\n-        Session session = SessionFactoryUtils.getSession(sessionFactory, true);\n+        // TODO - previous code with SessionFactoryUtils:", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNjI2Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522516267", "bodyText": "mmm leftover comment.  I'll clean it up", "author": "cbeach47", "createdAt": "2020-11-12T23:57:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MTMwNw=="}], "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/web/core/filter/HibernateFilter.java b/Source/Plugins/Core/com.equella.core/src/com/tle/web/core/filter/HibernateFilter.java\nindex 40cd27f51..47c738d81 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/web/core/filter/HibernateFilter.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/web/core/filter/HibernateFilter.java\n\n@@ -52,10 +52,10 @@ public class HibernateFilter extends AbstractWebFilter {\n     FilterResult result = new FilterResult();\n     if (CurrentInstitution.get() != null) {\n       final SessionFactory sessionFactory =\n-          hibernateService.getTransactionAwareSessionFactory(\"main\", false); // $NON-NLS-1$\n+          hibernateService.getTransactionAwareSessionFactory(\"main\", false);\n \n       if (!TransactionSynchronizationManager.hasResource(sessionFactory)) {\n-        LOGGER.debug(\"Opening single Hibernate Session in OpenSessionInViewFilter\"); // $NON-NLS-1$\n+        LOGGER.debug(\"Opening single Hibernate Session in OpenSessionInViewFilter\");\n         // TODO - previous code with SessionFactoryUtils:\n         // https://docs.spring.io/spring/docs/2.5.x/javadoc-api/org/springframework/orm/hibernate3/SessionFactoryUtils.html#getSession(org.hibernate.SessionFactory,%20boolean)\n         // Need  to ensure this is equivalent logic.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MTkyMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520291921", "bodyText": "Oh! Is that right? Seems like a significant change and I don't see it in the old code. \ud83e\udd14 \ud83d\ude15", "author": "edalex-ian", "createdAt": "2020-11-10T05:17:50Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/core/filter/HibernateFilter.java", "diffHunk": "@@ -74,4 +78,10 @@ public void afterServlet(HttpServletRequest request, HttpServletResponse respons\n     }\n     return result;\n   }\n+\n+  private Session openSession(SessionFactory sessionFactory) {\n+    Session session = sessionFactory.openSession();\n+    session.setHibernateFlushMode(FlushMode.MANUAL);", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU0OTE1Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522549157", "bodyText": "Thanks for calling this out - interesting logic on this one.  I've added a comment in the code to explain why MANUAL is chosen.  @edalex-ian Please let me know if there are further questions on this one.", "author": "cbeach47", "createdAt": "2020-11-13T01:21:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MTkyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/web/core/filter/HibernateFilter.java b/Source/Plugins/Core/com.equella.core/src/com/tle/web/core/filter/HibernateFilter.java\nindex 40cd27f51..47c738d81 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/web/core/filter/HibernateFilter.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/web/core/filter/HibernateFilter.java\n\n@@ -69,8 +69,7 @@ public class HibernateFilter extends AbstractWebFilter {\n                 SessionHolder sessionHolder =\n                     (SessionHolder)\n                         TransactionSynchronizationManager.unbindResource(sessionFactory);\n-                LOGGER.debug(\n-                    \"Closing single Hibernate Session in OpenSessionInViewFilter\"); //$NON-NLS-1$\n+                LOGGER.debug(\"Closing single Hibernate Session in OpenSessionInViewFilter\");\n                 SessionFactoryUtils.closeSession(sessionHolder.getSession());\n               }\n             });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NTQxMg==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520295412", "bodyText": "I'd normally comment about moving away from the iterator... However in the context and size of this PR, minimal change is good. \ud83d\ude04", "author": "edalex-ian", "createdAt": "2020-11-10T05:28:34Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/ExtendedAnnotationConfiguration.java", "diffHunk": "@@ -18,54 +18,117 @@\n \n package com.tle.core.hibernate;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Properties;\n import java.util.TreeMap;\n+import org.apache.log4j.Logger;\n+import org.hibernate.boot.Metadata;\n+import org.hibernate.boot.model.relational.AuxiliaryDatabaseObject;\n+import org.hibernate.boot.registry.BootstrapServiceRegistryBuilder;\n import org.hibernate.cfg.Configuration;\n import org.hibernate.dialect.Dialect;\n+import org.hibernate.engine.spi.Mapping;\n+import org.hibernate.engine.spi.SessionFactoryImplementor;\n import org.hibernate.id.IdentifierGenerator;\n import org.hibernate.id.PersistentIdentifierGenerator;\n-import org.hibernate.mapping.AuxiliaryDatabaseObject;\n+import org.hibernate.integrator.spi.Integrator;\n import org.hibernate.mapping.Collection;\n import org.hibernate.mapping.IdentifierCollection;\n import org.hibernate.mapping.PersistentClass;\n import org.hibernate.mapping.RootClass;\n import org.hibernate.mapping.Table;\n+import org.hibernate.service.spi.SessionFactoryServiceRegistry;\n import org.hibernate.type.BasicType;\n \n public class ExtendedAnnotationConfiguration extends Configuration {\n   private static final long serialVersionUID = 1L;\n \n+  private static final Logger LOGGER = Logger.getLogger(ExtendedAnnotationConfiguration.class);\n+\n+  private static class MetadataCapture implements Integrator {\n+    private Metadata metadata;\n+\n+    public Metadata getMetadata() {\n+      return metadata;\n+    }\n+\n+    @Override\n+    public void integrate(\n+        Metadata metadata,\n+        SessionFactoryImplementor sessionFactory,\n+        SessionFactoryServiceRegistry serviceRegistry) {\n+      LOGGER.trace(\"integrating metadata\");\n+      this.metadata = metadata;\n+    }\n+\n+    @Override\n+    public void disintegrate(\n+        SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) {\n+      LOGGER.trace(\"disintegrating metadata\");\n+      this.metadata = null;\n+    }\n+  }\n+\n+  private static final MetadataCapture METADATA_CAPTURE = new MetadataCapture();\n+\n   public ExtendedAnnotationConfiguration(ExtendedDialect dialect) {\n+    super(new BootstrapServiceRegistryBuilder().applyIntegrator(METADATA_CAPTURE).build());\n+    LOGGER.trace(\"Starting up a new configuration\");\n     Iterable<? extends BasicType> types = dialect.getExtraTypeOverrides();\n     for (BasicType basicType : types) {\n+      if (LOGGER.isTraceEnabled()) {\n+        LOGGER.trace(\"Registering basic type [\" + basicType.getName() + \"]\");\n+      }\n       registerTypeOverride(basicType);\n     }\n+    logProps(super.getProperties(), \"Hibernate properties after building config object\");\n   }\n \n   public Map<String, Table> getTableMap() {\n+    if (METADATA_CAPTURE.getMetadata() == null) {\n+      throw new IllegalStateException(\n+          \"Cannot access Hibernate Metadata before a SessionFactory has been created\");\n+    }\n+    Map<String, Table> tables = new HashMap<>();\n+    for (Table t : METADATA_CAPTURE.getMetadata().collectTableMappings()) {\n+      tables.put(t.getName(), t);\n+    }\n     return tables;\n   }\n \n   public List<AuxiliaryDatabaseObject> getAuxiliaryDatabaseObjects() {\n-    return auxiliaryDatabaseObjects;\n+    if (METADATA_CAPTURE.getMetadata() == null) {\n+      throw new IllegalStateException(\n+          \"Cannot access Hibernate Metadata before a SessionFactory has been created\");\n+    }\n+    List<AuxiliaryDatabaseObject> ados = new ArrayList<>();\n+    ados.addAll(METADATA_CAPTURE.getMetadata().getDatabase().getAuxiliaryDatabaseObjects());\n+    return ados;\n   }\n \n   public java.util.Collection<PersistentIdentifierGenerator> getGenerators(\n       Dialect dialect, String defaultCatalog, String defaultSchema) {\n+    if (METADATA_CAPTURE.getMetadata() == null) {\n+      throw new IllegalStateException(\n+          \"Cannot access Hibernate Metadata before a SessionFactory has been created\");\n+    }\n+\n     TreeMap<Object, PersistentIdentifierGenerator> generators =\n         new TreeMap<Object, PersistentIdentifierGenerator>();\n \n-    Iterator<PersistentClass> iter = classes.values().iterator();\n+    Iterator<PersistentClass> iter = METADATA_CAPTURE.getMetadata().getEntityBindings().iterator();\n     while (iter.hasNext()) {", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NzMwNw==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520297307", "bodyText": "I'm concerned this could impact start-up times and load - even if only minor. Could this be wrapped in a isTraceEnabled() check please?", "author": "edalex-ian", "createdAt": "2020-11-10T05:31:26Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/HibernateFactory.java", "diffHunk": "@@ -57,14 +65,20 @@ public synchronized ExtendedAnnotationConfiguration getConfiguration() {\n         setContextLoader(classLoader);\n         ExtendedDialect dialect = dataSourceHolder.getDialect();\n         this.config = new ExtendedAnnotationConfiguration(dialect);\n-        config.setProperties(properties);\n         config.setProperty(Environment.CONNECTION_PROVIDER, DataSourceProvider.class.getName());\n-        properties.put(KEY_DATASOURCE, dataSourceHolder.getDataSource());\n+        properties.put(Environment.DATASOURCE, dataSourceHolder.getDataSource());\n+        config.addProperties(properties);\n         config.setProperty(Environment.DIALECT, dialect.getClass().getName());\n         config.setProperty(Environment.USE_SECOND_LEVEL_CACHE, \"false\");\n-        config.setProperty(\"javax.persistence.validation.mode\", \"DDL\");\n-        config.setNamingStrategy(new LowercaseImprovedNamingScheme());\n+        config.setProperty(Environment.JPA_VALIDATION_MODE, \"DDL\");\n+        // Due to https://hibernate.atlassian.net/browse/HHH-12665 with SpringHib5,\n+        // certain operations, like importing a institution would fail with a\n+        // `javax.persistence.TransactionRequiredException: no transaction is in progress`\n+        config.setProperty(Environment.ALLOW_UPDATE_OUTSIDE_TRANSACTION, \"true\");\n+        config.setImplicitNamingStrategy(new OeqImplicitNamingStrategy());\n+        config.setPhysicalNamingStrategy(new OeqPhysicalNamingStrategy());\n         for (Class<?> class1 : clazzes) {\n+          LOGGER.trace(\"Adding annotated class: \" + class1.getCanonicalName());", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMzMjA5Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522332097", "bodyText": "yep, done.", "author": "cbeach47", "createdAt": "2020-11-12T18:41:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NzMwNw=="}], "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/HibernateFactory.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/HibernateFactory.java\nindex b0231b9a6..f7ba0ce80 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/HibernateFactory.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/HibernateFactory.java\n\n@@ -78,7 +77,9 @@ public class HibernateFactory {\n         config.setImplicitNamingStrategy(new OeqImplicitNamingStrategy());\n         config.setPhysicalNamingStrategy(new OeqPhysicalNamingStrategy());\n         for (Class<?> class1 : clazzes) {\n-          LOGGER.trace(\"Adding annotated class: \" + class1.getCanonicalName());\n+          if (LOGGER.isTraceEnabled()) {\n+            LOGGER.trace(\"Adding annotated class: \" + class1.getCanonicalName());\n+          }\n           config.addAnnotatedClass(class1);\n         }\n       } finally {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5ODMxMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520298311", "bodyText": "That could be for good reason, as it possibly implies we're in an unexpected state - but would depend on how oEQ is written.\nTo match your new if block I wonder if there is value having an else to log a warning. (Of it it's super prevalent, maybe at a lower log level.)", "author": "edalex-ian", "createdAt": "2020-11-10T05:35:17Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/GenericDaoImpl.java", "diffHunk": "@@ -136,7 +136,10 @@ public void delete(T entity) {\n   @Override\n   @Transactional(propagation = Propagation.MANDATORY)\n   public void unlinkFromSession(Object obj) {\n-    getHibernateTemplate().evict(obj);\n+    // Hibernate now throws an NullPointerException if we try evicting a null object", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0MDI4Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522340283", "bodyText": "I like the idea of not just swallowing the null object state.  I added a warning and will check the logs during tests - it's currently the only logging statement in the class, so if it gets noisy, it's simple enough to switch off.", "author": "cbeach47", "createdAt": "2020-11-12T18:54:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5ODMxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/GenericDaoImpl.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/GenericDaoImpl.java\nindex 52da80b96..6dc2dac44 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/GenericDaoImpl.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/dao/GenericDaoImpl.java\n\n@@ -139,6 +142,8 @@ public class GenericDaoImpl<T, ID extends Serializable> extends AbstractHibernat\n     // Hibernate now throws an NullPointerException if we try evicting a null object\n     if (obj != null) {\n       getHibernateTemplate().evict(obj);\n+    } else {\n+      LOGGER.warn(\"Evicting a null object.\");\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5OTM1NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520299354", "bodyText": "This could be brittle. Are we better to have a look at the cause and/or stack trace and check the class, method or file?", "author": "edalex-ian", "createdAt": "2020-11-10T05:39:07Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/equella/service/impl/InitialiserServiceImpl.java", "diffHunk": "@@ -99,7 +102,27 @@ public void entitySimplified(Object old, Object newObj) {\n    */\n   private void evictFromSession(Set<Object> os) {\n     for (Object o : os) {\n-      getHibernateTemplate().evict(o);\n+      try {\n+        getHibernateTemplate().evict(o);\n+      } catch (IllegalArgumentException iae) {\n+        if (iae.getMessage().startsWith(\"Non-entity object instance passed to evict\")) {", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3OTA1MA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522579050", "bodyText": "It may work as well to bind to the stack trace, class, or other indicator(s).  However, after further consideration of the situation, I feel it\u2019s sufficient to bind to the message than a specific stack trace, given the message specificity.\nI did end up removing the error logging below this statement - it proved to just be creating noise.", "author": "cbeach47", "createdAt": "2020-11-13T02:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5OTM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxMjI3NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r524812275", "bodyText": "I guess the only difference if it does break is that a debug log message will be missing, so no probs. \ud83d\ude09", "author": "edalex-ian", "createdAt": "2020-11-17T00:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5OTM1NA=="}], "type": "inlineReview", "revised_code": {"commit": "d0799310d25faffbb434075e04269759a5f58cc4", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/equella/service/impl/InitialiserServiceImpl.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/equella/service/impl/InitialiserServiceImpl.java\nindex 2b5c4a9f5..4af93810f 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/equella/service/impl/InitialiserServiceImpl.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/equella/service/impl/InitialiserServiceImpl.java\n\n@@ -115,11 +115,6 @@ public class InitialiserServiceImpl extends AbstractHibernateDao implements Init\n                   + \"]: \"\n                   + iae.getMessage());\n         } else {\n-          LOGGER.error(\n-              \"Error being thrown - type [\"\n-                  + o.getClass().getCanonicalName()\n-                  + \"]: \"\n-                  + iae.getMessage());\n           throw iae;\n         }\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMDAxMg==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520300012", "bodyText": "Should raise a matching GitHub issue and reference here.", "author": "edalex-ian", "createdAt": "2020-11-10T05:41:17Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -36,19 +36,23 @@\n import java.util.Set;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.hibernate.classic.Session;\n+import org.apache.curator.shaded.com.google.common.collect.Lists;\n+import org.hibernate.Session;\n+import org.hibernate.boot.model.relational.AuxiliaryDatabaseObject;\n import org.hibernate.dialect.Dialect;\n-import org.hibernate.engine.Mapping;\n+import org.hibernate.engine.spi.Mapping;\n import org.hibernate.id.PersistentIdentifierGenerator;\n-import org.hibernate.impl.SessionFactoryImpl;\n+import org.hibernate.internal.SessionFactoryImpl;\n import org.hibernate.jdbc.Work;\n-import org.hibernate.mapping.AuxiliaryDatabaseObject;\n import org.hibernate.mapping.Column;\n import org.hibernate.mapping.ForeignKey;\n import org.hibernate.mapping.Index;\n import org.hibernate.mapping.Table;\n import org.hibernate.mapping.UniqueKey;\n \n+// TECH_DEBT - found in SpringHib5, SessionFactoryImpl is now internal and should not be used", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQxNzcxNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522417715", "bodyText": "Ended up just removing the internal reference.", "author": "cbeach47", "createdAt": "2020-11-12T20:50:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMDAxMg=="}], "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java\nindex 1e9fc920a..18c5c8110 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java\n\n@@ -38,11 +38,12 @@ import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.curator.shaded.com.google.common.collect.Lists;\n import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n import org.hibernate.boot.model.relational.AuxiliaryDatabaseObject;\n import org.hibernate.dialect.Dialect;\n import org.hibernate.engine.spi.Mapping;\n+import org.hibernate.engine.spi.SessionFactoryImplementor;\n import org.hibernate.id.PersistentIdentifierGenerator;\n-import org.hibernate.internal.SessionFactoryImpl;\n import org.hibernate.jdbc.Work;\n import org.hibernate.mapping.Column;\n import org.hibernate.mapping.ForeignKey;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMTYwNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520301605", "bodyText": "All the additional logging has made this method now rather long and cumbersome - especially when combined with all the branching and nesting. I think now it needs to be split into it's core parts as part of this.", "author": "edalex-ian", "createdAt": "2020-11-10T05:46:33Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -102,38 +108,93 @@ public HibernateMigrationHelper(HibernateFactory factory, String defaultSchema)\n         Iterator<Index> subIter = table.getIndexIterator();\n         while (subIter.hasNext()) {\n           Index index = subIter.next();\n-          if (filter.includeIndex(table, index)\n-              && (!extDialect.supportsAutoIndexForUniqueColumn()\n-                  || !hasUniqueIndex(index, table))) {\n-            sqlStrings.add(index.sqlCreateString(dialect, mapping, defaultCatalog, defaultSchema));\n+          final boolean addIndex =\n+              filter.includeIndex(table, index)\n+                  && (!extDialect.supportsAutoIndexForUniqueColumn()\n+                      || !hasUniqueIndex(index, table));\n+          if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"Index to review: \" + index.toString());\n+            LOGGER.debug(\"Filter.includeIndex? \" + filter.includeIndex(table, index));\n+            LOGGER.debug(\n+                \"Dialect [\"\n+                    + extDialect.getClass().getName()\n+                    + \"] - supportsAutoIndexForUniqueColumn? \"\n+                    + extDialect.supportsAutoIndexForUniqueColumn());\n+            LOGGER.debug(\"HasUniqueIndex? \" + hasUniqueIndex(index, table));\n+            LOGGER.debug(\"Should index be added? \" + addIndex);\n+          }", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NjQ4Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r524546487", "bodyText": "Fair point - This is split out now", "author": "cbeach47", "createdAt": "2020-11-16T20:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMTYwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9e8e8215f0e873d19cb394b70b1d60be4db38850", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java\nindex 1e9fc920a..cae7fefb6 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java\n\n@@ -102,6 +115,12 @@ public class HibernateMigrationHelper {\n       }\n     }\n \n+    return sqlStrings;\n+  }\n+\n+  private List<String> getCreationSqlForTableIndexAndFks(HibernateCreationFilter filter) {\n+    List<String> sqlStrings = new ArrayList<String>();\n+\n     for (Table table : configuration.getTableMap().values()) {\n       if (table.isPhysicalTable()) {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMzI3MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520303271", "bodyText": "Eeck! Am I reading this wrong? To me it seems sqlStrings should have ... SQL. It would seem this should have been another LOGGER.debug() followed by sqlStrings.add(sql)?", "author": "edalex-ian", "createdAt": "2020-11-10T05:52:00Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -576,12 +687,16 @@ private void processIndex(\n     String existingIndex = revIndexMap.get(indexCols);\n     if (existingIndex != null) {\n       if (existingIndex.equalsIgnoreCase(index.getName())) {\n+        LOGGER.debug(\"Index [\" + index.getName() + \"] exists.  returning.\");\n         return;\n       } else {\n-        sqlStrings.add(extDialect.getDropIndexSql(table.getName(), '`' + existingIndex + '`'));\n+        final String sql = extDialect.getDropIndexSql(table.getName(), '`' + existingIndex + '`');\n+        LOGGER.debug(\"Index does not exist.  Dropping index [\" + index.getName() + \"]\");\n+        sqlStrings.add(sql);\n       }\n     }\n-    sqlStrings.add(index.sqlCreateString(dialect, mapping, defaultCatalog, defaultSchema));\n+    final String sql = index.sqlCreateString(dialect, mapping, defaultCatalog, defaultSchema);\n+    sqlStrings.add(\"Existing index is null.  Creating index SQL: \" + sql);", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQzNDY3MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522434671", "bodyText": "oy - good catch.", "author": "cbeach47", "createdAt": "2020-11-12T21:23:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMzI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java\nindex 1e9fc920a..18c5c8110 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java\n\n@@ -696,7 +694,7 @@ public class HibernateMigrationHelper {\n       }\n     }\n     final String sql = index.sqlCreateString(dialect, mapping, defaultCatalog, defaultSchema);\n-    sqlStrings.add(\"Existing index is null.  Creating index SQL: \" + sql);\n+    LOGGER.debug(\"Existing index is null.  Creating index SQL: \" + sql);\n   }\n \n   public Map<Set<String>, String> getExistingIndexes(final Table table, Session session) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMzU0MA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520303540", "bodyText": "This combined with the TODO below makes it look like this file is still a WIP?", "author": "edalex-ian", "createdAt": "2020-11-10T05:52:50Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateServiceImpl.java", "diffHunk": "@@ -31,8 +31,9 @@\n import javax.inject.Singleton;\n import org.hibernate.SessionFactory;\n import org.hibernate.cfg.Environment;\n-import org.springframework.orm.hibernate3.SpringSessionContext;\n-import org.springframework.orm.hibernate3.SpringTransactionFactory;\n+import org.springframework.orm.hibernate5.SpringSessionContext;\n+\n+// import org.springframework.orm.hibernate5.SpringTransactionFactory;", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0MDA2Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522440063", "bodyText": "no - I'll remove the comment and the todo - the default strategy of JDBC suffices.", "author": "cbeach47", "createdAt": "2020-11-12T21:34:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMzU0MA=="}], "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateServiceImpl.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateServiceImpl.java\nindex 0e8e61dcb..32370c191 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateServiceImpl.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateServiceImpl.java\n\n@@ -33,8 +33,6 @@ import org.hibernate.SessionFactory;\n import org.hibernate.cfg.Environment;\n import org.springframework.orm.hibernate5.SpringSessionContext;\n \n-// import org.springframework.orm.hibernate5.SpringTransactionFactory;\n-\n @Bind(HibernateService.class)\n @Singleton\n public class HibernateServiceImpl implements HibernateService {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMzgwMw==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520303803", "bodyText": "Needs a GitHub Issue and reference.", "author": "edalex-ian", "createdAt": "2020-11-10T05:53:46Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/type/HibernateCsvType.java", "diffHunk": "@@ -29,9 +29,12 @@\n import java.util.StringTokenizer;\n import org.apache.log4j.Logger;\n import org.hibernate.HibernateException;\n+import org.hibernate.engine.spi.SharedSessionContractImplementor;\n+import org.hibernate.internal.util.SerializationHelper;\n import org.hibernate.type.SerializationException;\n import org.hibernate.usertype.UserType;\n-import org.hibernate.util.SerializationHelper;\n+\n+// TECH_DEBT - found in SpringHib5, StringHelper is now internal and should not be used directly.", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0MzcyMA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522443720", "bodyText": "Ended up removing that comment entirely", "author": "cbeach47", "createdAt": "2020-11-12T21:41:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMzgwMw=="}], "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/type/HibernateCsvType.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/type/HibernateCsvType.java\nindex cc3497934..b70d66425 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/type/HibernateCsvType.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/type/HibernateCsvType.java\n\n@@ -34,8 +34,6 @@ import org.hibernate.internal.util.SerializationHelper;\n import org.hibernate.type.SerializationException;\n import org.hibernate.usertype.UserType;\n \n-// TECH_DEBT - found in SpringHib5, StringHelper is now internal and should not be used directly.\n-\n public class HibernateCsvType implements UserType {\n   private static final Logger LOGGER = Logger.getLogger(HibernateCsvType.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwNTE4Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520305186", "bodyText": "Might as well do as proper bit of JavaDoc.", "author": "edalex-ian", "createdAt": "2020-11-10T05:58:18Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/InPlaceUniqueDelegate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.hibernate.dialect;\n+\n+import java.util.Iterator;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.hibernate.dialect.Dialect;\n+import org.hibernate.dialect.unique.DefaultUniqueDelegate;\n+import org.hibernate.mapping.Table;\n+import org.hibernate.mapping.UniqueKey;\n+\n+// Standard Hib 5.3+ does not include the unique constraints\n+//  in the create table logic, so we need to add our own.", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/InPlaceUniqueDelegate.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/InPlaceUniqueDelegate.java\nindex 08b2dab36..578d0c80a 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/InPlaceUniqueDelegate.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/InPlaceUniqueDelegate.java\n\n@@ -18,16 +18,16 @@\n \n package com.tle.hibernate.dialect;\n \n-import java.util.Iterator;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.hibernate.dialect.Dialect;\n import org.hibernate.dialect.unique.DefaultUniqueDelegate;\n import org.hibernate.mapping.Table;\n-import org.hibernate.mapping.UniqueKey;\n \n-// Standard Hib 5.3+ does not include the unique constraints\n-//  in the create table logic, so we need to add our own.\n+/**\n+ * Standard Hib 5.3+ does not include the unique constraints in the create table logic, so we need\n+ * to add our own.\n+ */\n public class InPlaceUniqueDelegate extends DefaultUniqueDelegate {\n   private static final Log LOGGER = LogFactory.getLog(InPlaceUniqueDelegate.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwOTU5OA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520309598", "bodyText": "Could void the iterator and go with:\n    StringBuilder sb = new StringBuilder();\n    table.getUniqueKeyIterator()\n      .forEachRemaining(uniqueKey ->\n        sb\n          .append(\", \")\n          .append(uniqueConstraintSql(uniqueKey)));\nBe nice to take it to a stream so you could simply reduce, but.... You're starting from an Iterator. \ud83d\ude1e", "author": "edalex-ian", "createdAt": "2020-11-10T06:09:18Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/InPlaceUniqueDelegate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.hibernate.dialect;\n+\n+import java.util.Iterator;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.hibernate.dialect.Dialect;\n+import org.hibernate.dialect.unique.DefaultUniqueDelegate;\n+import org.hibernate.mapping.Table;\n+import org.hibernate.mapping.UniqueKey;\n+\n+// Standard Hib 5.3+ does not include the unique constraints\n+//  in the create table logic, so we need to add our own.\n+public class InPlaceUniqueDelegate extends DefaultUniqueDelegate {\n+  private static final Log LOGGER = LogFactory.getLog(InPlaceUniqueDelegate.class);\n+\n+  public InPlaceUniqueDelegate(Dialect dialect) {\n+    super(dialect);\n+  }\n+\n+  @Override\n+  public String getTableCreationUniqueConstraintsFragment(Table table) {\n+    Iterator<UniqueKey> iter = table.getUniqueKeyIterator();\n+    StringBuilder sb = new StringBuilder();\n+    while (iter.hasNext()) {\n+      sb.append(\", \").append(uniqueConstraintSql(iter.next()));\n+    }", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0NjQ4OA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522446488", "bodyText": "works for me - done.", "author": "cbeach47", "createdAt": "2020-11-12T21:47:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwOTU5OA=="}], "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/InPlaceUniqueDelegate.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/InPlaceUniqueDelegate.java\nindex 08b2dab36..578d0c80a 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/InPlaceUniqueDelegate.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/InPlaceUniqueDelegate.java\n\n@@ -18,16 +18,16 @@\n \n package com.tle.hibernate.dialect;\n \n-import java.util.Iterator;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.hibernate.dialect.Dialect;\n import org.hibernate.dialect.unique.DefaultUniqueDelegate;\n import org.hibernate.mapping.Table;\n-import org.hibernate.mapping.UniqueKey;\n \n-// Standard Hib 5.3+ does not include the unique constraints\n-//  in the create table logic, so we need to add our own.\n+/**\n+ * Standard Hib 5.3+ does not include the unique constraints in the create table logic, so we need\n+ * to add our own.\n+ */\n public class InPlaceUniqueDelegate extends DefaultUniqueDelegate {\n   private static final Log LOGGER = LogFactory.getLog(InPlaceUniqueDelegate.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMDQ1Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520310452", "bodyText": "That is interesting. Wonder if it still even works, or if it should be removed. Wonder if it'd be worth raising a GitHub ticket for someone to check. \ud83e\udd37", "author": "edalex-ian", "createdAt": "2020-11-10T06:10:29Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/MySQL5DialectEQUELLA.java", "diffHunk": "@@ -22,9 +22,12 @@\n \n public class MySQL5DialectEQUELLA extends org.hibernate.dialect.MySQL5Dialect {\n   @Override\n-  protected void registerColumnType(int code, int capacity, String name) {\n+  protected void registerColumnType(int code, String name) {\n+    // Note, due to using SpringHib5, had to remove the capacity parameter.\n+    // Interesting this dialect is even in here, since MySQL is not one of\n+    //  the supported oEQ DBs", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0OTIyNg==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522449226", "bodyText": "Can't hurt - I opened #2508", "author": "cbeach47", "createdAt": "2020-11-12T21:52:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMDQ1Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMTEwMg==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520311102", "bodyText": "Could you please add a JavaDoc description.\nI gather it is only handling Join table bits, and the rest is all for logging. If so, two things:\n\nThe JavaDoc should capture that, and I wonder if we should have a more explicit class name - on the assumption that if we needed more we add them;\nIf we only have all the other methods for logging, do we need them? Or if one wanted to see what was happening should they just turn the logging on for ImplicitNamingStrategyJpaCompliantImpl?", "author": "edalex-ian", "createdAt": "2020-11-10T06:11:28Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqImplicitNamingStrategy.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.hibernate.dialect;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.log4j.Logger;\n+import org.hibernate.boot.model.naming.Identifier;\n+import org.hibernate.boot.model.naming.ImplicitAnyDiscriminatorColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitAnyKeyColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitBasicColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitCollectionTableNameSource;\n+import org.hibernate.boot.model.naming.ImplicitDiscriminatorColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitEntityNameSource;\n+import org.hibernate.boot.model.naming.ImplicitForeignKeyNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIdentifierColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIndexColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIndexNameSource;\n+import org.hibernate.boot.model.naming.ImplicitJoinColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitJoinTableNameSource;\n+import org.hibernate.boot.model.naming.ImplicitMapKeyColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl;\n+import org.hibernate.boot.model.naming.ImplicitPrimaryKeyJoinColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitTenantIdColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitUniqueKeyNameSource;\n+\n+public class OeqImplicitNamingStrategy extends ImplicitNamingStrategyJpaCompliantImpl {", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ1NTQ0OA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522455448", "bodyText": "Currently all dialects use the same naming strategies, so the name implies it's the oEQ strategy.  If it a dialect needs to branch off into it's own future, I lean towards renaming at that point.\nThe overridden methods to inject logging was noisy.  I removed those and guarded the trace statements.", "author": "cbeach47", "createdAt": "2020-11-12T22:05:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMTEwMg=="}], "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqImplicitNamingStrategy.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqImplicitNamingStrategy.java\nindex c0132c27c..699fb2b2c 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqImplicitNamingStrategy.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqImplicitNamingStrategy.java\n\n@@ -22,24 +22,17 @@ import java.util.HashMap;\n import java.util.Map;\n import org.apache.log4j.Logger;\n import org.hibernate.boot.model.naming.Identifier;\n-import org.hibernate.boot.model.naming.ImplicitAnyDiscriminatorColumnNameSource;\n-import org.hibernate.boot.model.naming.ImplicitAnyKeyColumnNameSource;\n import org.hibernate.boot.model.naming.ImplicitBasicColumnNameSource;\n-import org.hibernate.boot.model.naming.ImplicitCollectionTableNameSource;\n-import org.hibernate.boot.model.naming.ImplicitDiscriminatorColumnNameSource;\n-import org.hibernate.boot.model.naming.ImplicitEntityNameSource;\n import org.hibernate.boot.model.naming.ImplicitForeignKeyNameSource;\n-import org.hibernate.boot.model.naming.ImplicitIdentifierColumnNameSource;\n-import org.hibernate.boot.model.naming.ImplicitIndexColumnNameSource;\n-import org.hibernate.boot.model.naming.ImplicitIndexNameSource;\n-import org.hibernate.boot.model.naming.ImplicitJoinColumnNameSource;\n import org.hibernate.boot.model.naming.ImplicitJoinTableNameSource;\n-import org.hibernate.boot.model.naming.ImplicitMapKeyColumnNameSource;\n import org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl;\n-import org.hibernate.boot.model.naming.ImplicitPrimaryKeyJoinColumnNameSource;\n-import org.hibernate.boot.model.naming.ImplicitTenantIdColumnNameSource;\n-import org.hibernate.boot.model.naming.ImplicitUniqueKeyNameSource;\n \n+/**\n+ * Handles the naming strategy prior to the values being sent to the physical naming strategy logic.\n+ *\n+ * <p>Currently only deals with ensuring legacy join table and column names are handled\n+ * appropriately.\n+ */\n public class OeqImplicitNamingStrategy extends ImplicitNamingStrategyJpaCompliantImpl {\n   private static final Logger LOGGER = Logger.getLogger(OeqImplicitNamingStrategy.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMTYzMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520311631", "bodyText": "Be nice if this had a isTraceEnabled() guard. And to save excessive messages - same with all the below trace messages where strings are being dynamically constructed.", "author": "edalex-ian", "createdAt": "2020-11-10T06:12:17Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqImplicitNamingStrategy.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.hibernate.dialect;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.log4j.Logger;\n+import org.hibernate.boot.model.naming.Identifier;\n+import org.hibernate.boot.model.naming.ImplicitAnyDiscriminatorColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitAnyKeyColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitBasicColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitCollectionTableNameSource;\n+import org.hibernate.boot.model.naming.ImplicitDiscriminatorColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitEntityNameSource;\n+import org.hibernate.boot.model.naming.ImplicitForeignKeyNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIdentifierColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIndexColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitIndexNameSource;\n+import org.hibernate.boot.model.naming.ImplicitJoinColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitJoinTableNameSource;\n+import org.hibernate.boot.model.naming.ImplicitMapKeyColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl;\n+import org.hibernate.boot.model.naming.ImplicitPrimaryKeyJoinColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitTenantIdColumnNameSource;\n+import org.hibernate.boot.model.naming.ImplicitUniqueKeyNameSource;\n+\n+public class OeqImplicitNamingStrategy extends ImplicitNamingStrategyJpaCompliantImpl {\n+  private static final Logger LOGGER = Logger.getLogger(OeqImplicitNamingStrategy.class);\n+\n+  private final Map<String, String> joinTableOverrides = new HashMap<>();\n+\n+  public OeqImplicitNamingStrategy() {\n+    // The default strategies for join tables are not sufficient for all cases in oEQ.\n+    // There doesn't appear to be a pattern for the discrepancies, so this override\n+    // map contains all the special cases.\n+    joinTableOverrides.put(\"PortletRecentContrib.ItemDefinition\", \"portlet_recent_contrib_collect\");\n+    joinTableOverrides.put(\"Item.HistoryEvent\", \"item_history\");\n+    joinTableOverrides.put(\"Item.ReferencedURL\", \"item_referenced_urls\");\n+    joinTableOverrides.put(\"HierarchyTopic.Item\", \"hierarchy_topic_key_resources\");\n+    joinTableOverrides.put(\"TLEGroup.TLEGroup\", \"tlegroup_all_parents\");\n+    joinTableOverrides.put(\"HierarchyTopic.HierarchyTopic\", \"hierarchy_topic_all_parents\");\n+    joinTableOverrides.put(\"PowerSearch.ItemDefinition\", \"power_search_itemdefs\");\n+  }\n+\n+  @Override\n+  public Identifier determinePrimaryTableName(ImplicitEntityNameSource source) {\n+    LOGGER.trace(", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ1ODgwMA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522458800", "bodyText": "done.", "author": "cbeach47", "createdAt": "2020-11-12T22:11:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMTYzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqImplicitNamingStrategy.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqImplicitNamingStrategy.java\nindex c0132c27c..699fb2b2c 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqImplicitNamingStrategy.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqImplicitNamingStrategy.java\n\n@@ -22,24 +22,17 @@ import java.util.HashMap;\n import java.util.Map;\n import org.apache.log4j.Logger;\n import org.hibernate.boot.model.naming.Identifier;\n-import org.hibernate.boot.model.naming.ImplicitAnyDiscriminatorColumnNameSource;\n-import org.hibernate.boot.model.naming.ImplicitAnyKeyColumnNameSource;\n import org.hibernate.boot.model.naming.ImplicitBasicColumnNameSource;\n-import org.hibernate.boot.model.naming.ImplicitCollectionTableNameSource;\n-import org.hibernate.boot.model.naming.ImplicitDiscriminatorColumnNameSource;\n-import org.hibernate.boot.model.naming.ImplicitEntityNameSource;\n import org.hibernate.boot.model.naming.ImplicitForeignKeyNameSource;\n-import org.hibernate.boot.model.naming.ImplicitIdentifierColumnNameSource;\n-import org.hibernate.boot.model.naming.ImplicitIndexColumnNameSource;\n-import org.hibernate.boot.model.naming.ImplicitIndexNameSource;\n-import org.hibernate.boot.model.naming.ImplicitJoinColumnNameSource;\n import org.hibernate.boot.model.naming.ImplicitJoinTableNameSource;\n-import org.hibernate.boot.model.naming.ImplicitMapKeyColumnNameSource;\n import org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl;\n-import org.hibernate.boot.model.naming.ImplicitPrimaryKeyJoinColumnNameSource;\n-import org.hibernate.boot.model.naming.ImplicitTenantIdColumnNameSource;\n-import org.hibernate.boot.model.naming.ImplicitUniqueKeyNameSource;\n \n+/**\n+ * Handles the naming strategy prior to the values being sent to the physical naming strategy logic.\n+ *\n+ * <p>Currently only deals with ensuring legacy join table and column names are handled\n+ * appropriately.\n+ */\n public class OeqImplicitNamingStrategy extends ImplicitNamingStrategyJpaCompliantImpl {\n   private static final Logger LOGGER = Logger.getLogger(OeqImplicitNamingStrategy.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxNTU2Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520315563", "bodyText": "Need GitHub Issue and ref.", "author": "edalex-ian", "createdAt": "2020-11-10T06:18:37Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java", "diffHunk": "@@ -18,25 +18,43 @@\n \n package com.tle.hibernate.dialect;\n \n+import java.io.Serializable;\n import java.util.HashMap;\n import java.util.Map;\n-import org.hibernate.AssertionFailure;\n+import org.apache.log4j.Logger;\n+import org.hibernate.boot.model.naming.Identifier;\n+import org.hibernate.boot.model.naming.PhysicalNamingStrategy;\n import org.hibernate.cfg.ImprovedNamingStrategy;\n-import org.hibernate.util.StringHelper;\n+import org.hibernate.engine.jdbc.env.spi.JdbcEnvironment;\n+import org.hibernate.internal.util.StringHelper;\n+\n+// TECH_DEBT - found in SpringHib5, StringHelper is now internal and should not be used directly.", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java\nindex 3a8b9a0c5..5a182107a 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java\n\n@@ -28,11 +28,11 @@ import org.hibernate.cfg.ImprovedNamingStrategy;\n import org.hibernate.engine.jdbc.env.spi.JdbcEnvironment;\n import org.hibernate.internal.util.StringHelper;\n \n-// TECH_DEBT - found in SpringHib5, StringHelper is now internal and should not be used directly.\n+// TECH_DEBT - StringHelper is now internal - https://github.com/openequella/openEQUELLA/issues/2507\n \n /**\n- * Extends the PhysicalNamingStrategyStandardImpl to make sure that the resulting table name is all\n- * lowercase. This helps with Enums on Postgresql.\n+ * Handles the logic to map the database object names to a consistent format. This includes case and\n+ * quotes, but may be extended in the future.\n  */\n @SuppressWarnings(\"nls\")\n public class OeqPhysicalNamingStrategy extends ImprovedNamingStrategy\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxNjAwMg==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520316002", "bodyText": "If it is still limited to lowercase naming of tables, then really the name it had before should remain.", "author": "edalex-ian", "createdAt": "2020-11-10T06:19:23Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java", "diffHunk": "@@ -18,25 +18,43 @@\n \n package com.tle.hibernate.dialect;\n \n+import java.io.Serializable;\n import java.util.HashMap;\n import java.util.Map;\n-import org.hibernate.AssertionFailure;\n+import org.apache.log4j.Logger;\n+import org.hibernate.boot.model.naming.Identifier;\n+import org.hibernate.boot.model.naming.PhysicalNamingStrategy;\n import org.hibernate.cfg.ImprovedNamingStrategy;\n-import org.hibernate.util.StringHelper;\n+import org.hibernate.engine.jdbc.env.spi.JdbcEnvironment;\n+import org.hibernate.internal.util.StringHelper;\n+\n+// TECH_DEBT - found in SpringHib5, StringHelper is now internal and should not be used directly.\n \n /**\n- * Extends the ImprovedNamingScheme to make sure that the resulting table name is all lowercase.\n- * This helps with Enums on Postgresql.\n- *\n- * @author Nicholas Read\n+ * Extends the PhysicalNamingStrategyStandardImpl to make sure that the resulting table name is all\n+ * lowercase. This helps with Enums on Postgresql.\n  */\n @SuppressWarnings(\"nls\")\n-public class LowercaseImprovedNamingScheme extends ImprovedNamingStrategy {\n+public class OeqPhysicalNamingStrategy extends ImprovedNamingStrategy", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ2ODA5NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r522468095", "bodyText": "It's not only lower-casing the table names, and in the spirit of the theory behind the Implicit Naming Strategy, I'd like to leave it general for now.  I updated the javadoc to help reflect that mindset.", "author": "cbeach47", "createdAt": "2020-11-12T22:21:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxNjAwMg=="}], "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java\nindex 3a8b9a0c5..5a182107a 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java\n\n@@ -28,11 +28,11 @@ import org.hibernate.cfg.ImprovedNamingStrategy;\n import org.hibernate.engine.jdbc.env.spi.JdbcEnvironment;\n import org.hibernate.internal.util.StringHelper;\n \n-// TECH_DEBT - found in SpringHib5, StringHelper is now internal and should not be used directly.\n+// TECH_DEBT - StringHelper is now internal - https://github.com/openequella/openEQUELLA/issues/2507\n \n /**\n- * Extends the PhysicalNamingStrategyStandardImpl to make sure that the resulting table name is all\n- * lowercase. This helps with Enums on Postgresql.\n+ * Handles the logic to map the database object names to a consistent format. This includes case and\n+ * quotes, but may be extended in the future.\n  */\n @SuppressWarnings(\"nls\")\n public class OeqPhysicalNamingStrategy extends ImprovedNamingStrategy\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxNjQyNw==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520316427", "bodyText": "isTraceEnabled() guard.", "author": "edalex-ian", "createdAt": "2020-11-10T06:20:08Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java", "diffHunk": "@@ -126,4 +112,63 @@ private String postProcess(String tableName) {\n   private void registerOverride(String from, String to) {\n     overrides.put(from.toLowerCase(), to.toLowerCase());\n   }\n+\n+  @Override\n+  public Identifier toPhysicalCatalogName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n+    return apply(name, Transform.OTHER);\n+  }\n+\n+  @Override\n+  public Identifier toPhysicalSchemaName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n+    return apply(name, Transform.OTHER);\n+  }\n+\n+  @Override\n+  public Identifier toPhysicalTableName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n+    return apply(name, Transform.TABLE);\n+  }\n+\n+  @Override\n+  public Identifier toPhysicalSequenceName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n+    return apply(name, Transform.OTHER);\n+  }\n+\n+  @Override\n+  public Identifier toPhysicalColumnName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n+    return apply(name, Transform.COLUMN);\n+  }\n+\n+  private Identifier apply(Identifier name, Transform transform) {\n+    if (name == null) {\n+      return null;\n+    }\n+\n+    String resultantName = null;\n+    switch (transform) {\n+      case COLUMN:\n+        {\n+          resultantName = super.propertyToColumnName(getColumnName(name.getText()));\n+          break;\n+        }\n+      case TABLE:\n+        {\n+          resultantName = postProcess(super.classToTableName(name.getText()));\n+          break;\n+        }\n+      case OTHER:\n+      default:\n+        {\n+          resultantName = name.getText();\n+          break;\n+        }\n+    }\n+    LOGGER.trace(", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java\nindex 3a8b9a0c5..5a182107a 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/OeqPhysicalNamingStrategy.java\n\n@@ -162,13 +162,15 @@ public class OeqPhysicalNamingStrategy extends ImprovedNamingStrategy\n           break;\n         }\n     }\n-    LOGGER.trace(\n-        \"Transformed (possible noop) of [\"\n-            + name.getText()\n-            + \"] to [\"\n-            + resultantName\n-            + \"].  Quoted=\"\n-            + Identifier.isQuoted(resultantName));\n+    if (LOGGER.isTraceEnabled()) {\n+      LOGGER.trace(\n+          \"Transformed (possible noop) of [\"\n+              + name.getText()\n+              + \"] to [\"\n+              + resultantName\n+              + \"].  Quoted=\"\n+              + Identifier.isQuoted(resultantName));\n+    }\n     return Identifier.toIdentifier(resultantName);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxNzMxNA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520317314", "bodyText": "As per elsewhere. I think this is the fourth or so, but if they all have the GitHub issue reference they'll be easy to fix when the time comes.", "author": "edalex-ian", "createdAt": "2020-11-10T06:22:13Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/SQLServerDialect.java", "diffHunk": "@@ -36,16 +36,22 @@\n import java.util.List;\n import java.util.UUID;\n import java.util.regex.Matcher;\n-import org.hibernate.engine.Mapping;\n+import org.hibernate.dialect.unique.UniqueDelegate;\n+import org.hibernate.engine.spi.Mapping;\n+import org.hibernate.internal.util.StringHelper;\n import org.hibernate.mapping.Column;\n import org.hibernate.type.BasicType;\n import org.hibernate.type.CustomType;\n import org.hibernate.type.StandardBasicTypes;\n-import org.hibernate.util.StringHelper;\n+\n+// TECH_DEBT - found in SpringHib5, StringHelper is now internal and should not be used directly.", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/SQLServerDialect.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/SQLServerDialect.java\nindex 37ce9258e..ba61eb1d2 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/SQLServerDialect.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/hibernate/dialect/SQLServerDialect.java\n\n@@ -44,13 +44,14 @@ import org.hibernate.type.BasicType;\n import org.hibernate.type.CustomType;\n import org.hibernate.type.StandardBasicTypes;\n \n-// TECH_DEBT - found in SpringHib5, StringHelper is now internal and should not be used directly.\n+// TECH_DEBT - StringHelper is now internal - https://github.com/openequella/openEQUELLA/issues/2507\n \n @SuppressWarnings(\"nls\")\n public class SQLServerDialect extends org.hibernate.dialect.SQLServer2005Dialect\n     implements ExtendedDialect {\n-  // [SpringHib5] Note - these queries with '?' in them do not need to be\n-  // ordinal since they aren't piped through JPA / Hibernate logic.\n+  // General note on the queries in this class - With the advent of hibernate 5,\n+  // queries with '?' in them need to be ordinal ( ie `?4` ).  However, this class\n+  // does not leverage the JPA / Hibernate logic, so we can leave the `?`s as-is.\n \n   private static final CustomType TYPE_BLANKABLE =\n       new CustomType(new HibernateEscapedString(Types.NVARCHAR), new String[] {\"blankable\"});\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyMTUwNg==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520321506", "bodyText": "Yup, as per above I don't believe we will run with < 8.", "author": "edalex-ian", "createdAt": "2020-11-10T06:30:49Z", "path": "Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java", "diffHunk": "@@ -91,9 +91,12 @@ private SecurityAttribute computeSecurityAttribute(Method method, Class<?> targe\n     // target class.\n     // If the target class is null, the method will be unchanged.\n     Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);\n+\n     // If we are dealing with method with generic parameters, find the\n     // original method.\n-    if (JdkVersion.isAtLeastJava15()) {\n+    // TODO - consider just dropping the version conditional.  No one should be\n+    // running oEQ or the Admin Console lower than Java 8.\n+    if (SystemUtils.isJavaVersionAtLeast(5)) {", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc1NjA5OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r521756099", "bodyText": "resolved as per above.", "author": "cbeach47", "createdAt": "2020-11-12T01:12:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyMTUwNg=="}], "type": "inlineReview", "revised_code": {"commit": "f4a749a953bddb157b1662a5656fee17a41f1825", "chunk": "diff --git a/Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java b/Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java\nindex 25f7d2499..b6799c60b 100644\n--- a/Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java\n+++ b/Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java\n\n@@ -94,11 +92,7 @@ public class SecurityAttributeSource {\n \n     // If we are dealing with method with generic parameters, find the\n     // original method.\n-    // TODO - consider just dropping the version conditional.  No one should be\n-    // running oEQ or the Admin Console lower than Java 8.\n-    if (SystemUtils.isJavaVersionAtLeast(5)) {\n-      specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);\n-    }\n+    specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);\n \n     // First try is the method in the target class.\n     SecurityAttribute txAtt = findSecurityAttribute(specificMethod, targetClass);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyNDEwNA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520324104", "bodyText": "Heh, nice pick up. \ud83d\udc4d", "author": "edalex-ian", "createdAt": "2020-11-10T06:36:27Z", "path": "Source/Tools/UpgradeInstallation/src/com/tle/upgrade/LineFileModifier.java", "diffHunk": "@@ -76,7 +76,7 @@ public void update() throws IOException {\n           outFile.write(addLine);\n           outFile.write(eol);\n           if (result != null) {\n-            result.addLogMessage(\"Added line '\" + line + \"'\");\n+            result.addLogMessage(\"Added line '\" + addLine + \"'\");", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyNDU4OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r520324589", "bodyText": "Could be good value in adding a JavaDoc description here with a synopsis of what upgrade steps are needed/included.", "author": "edalex-ian", "createdAt": "2020-11-10T06:37:30Z", "path": "Source/Tools/UpgradeInstallation/src/com/tle/upgrade/upgraders/AddPostHib5UpgradeConfig.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.upgrade.upgraders;\n+\n+import com.dytech.edge.common.Constants;\n+import com.google.common.collect.Lists;\n+import com.tle.common.util.EquellaConfig;\n+import com.tle.upgrade.LineFileModifier;\n+import com.tle.upgrade.PropertyFileModifier;\n+import com.tle.upgrade.UpgradeResult;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+@SuppressWarnings(\"nls\")\n+public class AddPostHib5UpgradeConfig extends AbstractUpgrader {", "originalCommit": "2410c2dac146040663d0da063e8479aa4b6e887c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "chunk": "diff --git a/Source/Tools/UpgradeInstallation/src/com/tle/upgrade/upgraders/AddPostHib5UpgradeConfig.java b/Source/Tools/UpgradeInstallation/src/com/tle/upgrade/upgraders/AddPostHib5UpgradeConfig.java\nindex a1bbc736b..74a271f04 100644\n--- a/Source/Tools/UpgradeInstallation/src/com/tle/upgrade/upgraders/AddPostHib5UpgradeConfig.java\n+++ b/Source/Tools/UpgradeInstallation/src/com/tle/upgrade/upgraders/AddPostHib5UpgradeConfig.java\n\n@@ -28,7 +28,10 @@ import java.io.File;\n import java.io.IOException;\n import java.util.List;\n \n-@SuppressWarnings(\"nls\")\n+/**\n+ * Due to the Hibernate 5 upgrade, oEQ needs a couple hibernate configs added, and to suppress some\n+ * noisy deprecation warnings in the logs.\n+ */\n public class AddPostHib5UpgradeConfig extends AbstractUpgrader {\n \n   @Override\n"}}, {"oid": "f4a749a953bddb157b1662a5656fee17a41f1825", "url": "https://github.com/openequella/openEQUELLA/commit/f4a749a953bddb157b1662a5656fee17a41f1825", "message": "springhib5:  remove java version comments", "committedDate": "2020-11-12T01:09:14Z", "type": "commit"}, {"oid": "a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "url": "https://github.com/openequella/openEQUELLA/commit/a9333b7a26e26b7ee0aef6c3d55d681b3c214d60", "message": "SpringHib5: Minor rRevisions from PR", "committedDate": "2020-11-12T23:27:27Z", "type": "commit"}, {"oid": "f58ab704c8670c0d7292cd82158d62f5e2a66622", "url": "https://github.com/openequella/openEQUELLA/commit/f58ab704c8670c0d7292cd82158d62f5e2a66622", "message": "Fixed a small regression and more minor revisions", "committedDate": "2020-11-13T00:43:42Z", "type": "commit"}, {"oid": "10ccc802bdba1f18fcabd68c8cef422d0b229901", "url": "https://github.com/openequella/openEQUELLA/commit/10ccc802bdba1f18fcabd68c8cef422d0b229901", "message": "Addressed FlushMode query", "committedDate": "2020-11-13T01:20:45Z", "type": "commit"}, {"oid": "d0799310d25faffbb434075e04269759a5f58cc4", "url": "https://github.com/openequella/openEQUELLA/commit/d0799310d25faffbb434075e04269759a5f58cc4", "message": "More minor revisions", "committedDate": "2020-11-13T03:10:14Z", "type": "commit"}, {"oid": "9e8e8215f0e873d19cb394b70b1d60be4db38850", "url": "https://github.com/openequella/openEQUELLA/commit/9e8e8215f0e873d19cb394b70b1d60be4db38850", "message": "Rework long runner method", "committedDate": "2020-11-16T20:15:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxMzExMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r524813111", "bodyText": "Nice work @cbeach47 \ud83d\udc4d", "author": "edalex-ian", "createdAt": "2020-11-17T00:51:02Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -94,6 +92,21 @@ public HibernateMigrationHelper(HibernateFactory factory, String defaultSchema)\n     if (LOGGER.isDebugEnabled()) {\n       LOGGER.debug(\"Tables registered:\" + configuration.getTableMap().keySet());\n     }\n+\n+    sqlStrings.addAll(getCreationSqlForTables(filter));\n+\n+    sqlStrings.addAll(getCreationSqlForTableIndexAndFks(filter));\n+\n+    sqlStrings.addAll(getCreationSqlForIdGenerators(filter));\n+\n+    sqlStrings.addAll(getCreationSqlForAuxDbos(filter));\n+\n+    return sqlStrings;\n+  }", "originalCommit": "9e8e8215f0e873d19cb394b70b1d60be4db38850", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxNDE1NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r524814155", "bodyText": "Hmmm, good to see this fixed, but.... Should the String output from index.sqlCreateString() be added to sqlStrings? As that looks like it just creates the string for logging purposes only. But ultimately this method is about processing the indices?", "author": "edalex-ian", "createdAt": "2020-11-17T00:54:16Z", "path": "Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java", "diffHunk": "@@ -696,7 +728,7 @@ private void processIndex(\n       }\n     }\n     final String sql = index.sqlCreateString(dialect, mapping, defaultCatalog, defaultSchema);\n-    sqlStrings.add(\"Existing index is null.  Creating index SQL: \" + sql);\n+    LOGGER.debug(\"Existing index is null.  Creating index SQL: \" + sql);", "originalCommit": "9e8e8215f0e873d19cb394b70b1d60be4db38850", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMwNzU3Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r525307577", "bodyText": "nice catch - tip of develop has it in there.  I've left the logger msg in place, and added the sql into sqlStrings now.", "author": "cbeach47", "createdAt": "2020-11-17T16:37:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxNDE1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d6642d0279f9d9db2aeec69b545a92f90790eba", "chunk": "diff --git a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java\nindex cae7fefb6..48e7bec0b 100644\n--- a/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java\n+++ b/Source/Plugins/Core/com.equella.serverbase/src/com/tle/core/hibernate/impl/HibernateMigrationHelper.java\n\n@@ -729,6 +729,7 @@ public class HibernateMigrationHelper {\n     }\n     final String sql = index.sqlCreateString(dialect, mapping, defaultCatalog, defaultSchema);\n     LOGGER.debug(\"Existing index is null.  Creating index SQL: \" + sql);\n+    sqlStrings.add(sql);\n   }\n \n   public Map<Set<String>, String> getExistingIndexes(final Table table, Session session) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxNjUyOA==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r524816528", "bodyText": "So this then makes the assignment on line 91 redundant. Perhaps this line should merge with 91 to make\n    Method specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);", "author": "edalex-ian", "createdAt": "2020-11-17T01:01:11Z", "path": "Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java", "diffHunk": "@@ -94,11 +92,7 @@ private SecurityAttribute computeSecurityAttribute(Method method, Class<?> targe\n \n     // If we are dealing with method with generic parameters, find the\n     // original method.\n-    // TODO - consider just dropping the version conditional.  No one should be\n-    // running oEQ or the Admin Console lower than Java 8.\n-    if (SystemUtils.isJavaVersionAtLeast(5)) {\n-      specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);\n-    }\n+    specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);", "originalCommit": "9e8e8215f0e873d19cb394b70b1d60be4db38850", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxMzkxMw==", "url": "https://github.com/openequella/openEQUELLA/pull/2344#discussion_r525313913", "bodyText": "Yeah, that is a bit odd.  I'll streamline it", "author": "cbeach47", "createdAt": "2020-11-17T16:44:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxNjUyOA=="}], "type": "inlineReview", "revised_code": {"commit": "3d6642d0279f9d9db2aeec69b545a92f90790eba", "chunk": "diff --git a/Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java b/Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java\nindex b6799c60b..147a59717 100644\n--- a/Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java\n+++ b/Source/Plugins/Security/com.tle.core.security/src/com/tle/core/security/impl/SecurityAttributeSource.java\n\n@@ -87,12 +87,14 @@ public class SecurityAttributeSource {\n   private SecurityAttribute computeSecurityAttribute(Method method, Class<?> targetClass) {\n     // The method may be on an interface, but we need attributes from the\n     // target class.\n+    //\n     // If the target class is null, the method will be unchanged.\n-    Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);\n-\n-    // If we are dealing with method with generic parameters, find the\n+    //\n+    // If we are dealing with a method with generic parameters, this should find the\n     // original method.\n-    specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);\n+    Method specificMethod =\n+        BridgeMethodResolver.findBridgedMethod(\n+            ClassUtils.getMostSpecificMethod(method, targetClass));\n \n     // First try is the method in the target class.\n     SecurityAttribute txAtt = findSecurityAttribute(specificMethod, targetClass);\n"}}, {"oid": "3d6642d0279f9d9db2aeec69b545a92f90790eba", "url": "https://github.com/openequella/openEQUELLA/commit/3d6642d0279f9d9db2aeec69b545a92f90790eba", "message": "fix sql index regression.  minor revisions", "committedDate": "2020-11-17T17:19:05Z", "type": "commit"}]}