{"pr_number": 1781, "pr_title": "Feature/821 bb rest 3lo try2", "pr_createdAt": "2020-06-02T17:15:40Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/1781", "timeline": [{"oid": "1d2b265743762167ec5c48e6c76195fc03090c79", "url": "https://github.com/openequella/openEQUELLA/commit/1d2b265743762167ec5c48e6c76195fc03090c79", "message": "#821 initial code for 3LO auth", "committedDate": "2020-06-02T17:00:49Z", "type": "commit"}, {"oid": "70ce743f7407d8cf8ba20b53cdb981c4a3aed1bc", "url": "https://github.com/openequella/openEQUELLA/commit/70ce743f7407d8cf8ba20b53cdb981c4a3aed1bc", "message": "Three legged authentication for Blackboard. (Incomplete)", "committedDate": "2020-06-02T17:01:02Z", "type": "commit"}, {"oid": "46a5fb58b0bb9525cb1a6ac55eb6c3ffc21f6184", "url": "https://github.com/openequella/openEQUELLA/commit/46a5fb58b0bb9525cb1a6ac55eb6c3ffc21f6184", "message": "#821 - part way through 3LO changes", "committedDate": "2020-06-02T17:01:15Z", "type": "commit"}, {"oid": "377e63c0c5bbca2e869a053951a2fbeaf45ebc52", "url": "https://github.com/openequella/openEQUELLA/commit/377e63c0c5bbca2e869a053951a2fbeaf45ebc52", "message": "#821 Bb 3LO and various REST enhancements", "committedDate": "2020-06-02T17:01:26Z", "type": "commit"}, {"oid": "1646d87d67aceca2573a339e8f4f9ab7963a8189", "url": "https://github.com/openequella/openEQUELLA/commit/1646d87d67aceca2573a339e8f4f9ab7963a8189", "message": "#821 trival change to kick off formatting", "committedDate": "2020-06-02T17:01:36Z", "type": "commit"}, {"oid": "992408d6b58fdd71814b3bb236b6a3f2281bae03", "url": "https://github.com/openequella/openEQUELLA/commit/992408d6b58fdd71814b3bb236b6a3f2281bae03", "message": "#821 another trival change for testing local hooks", "committedDate": "2020-06-02T17:01:44Z", "type": "commit"}, {"oid": "7ae75522072c53ecc78d0dd94fbc64d97d175968", "url": "https://github.com/openequella/openEQUELLA/commit/7ae75522072c53ecc78d0dd94fbc64d97d175968", "message": "#821 code formatting", "committedDate": "2020-06-02T17:01:56Z", "type": "commit"}, {"oid": "8bac84e0cdb356eefe654b73e157cd46292eecb3", "url": "https://github.com/openequella/openEQUELLA/commit/8bac84e0cdb356eefe654b73e157cd46292eecb3", "message": "#819 - Course caching WIP", "committedDate": "2020-06-02T17:02:05Z", "type": "commit"}, {"oid": "8f693dddaba1f14da45f398671bb9924b3367eb5", "url": "https://github.com/openequella/openEQUELLA/commit/8f693dddaba1f14da45f398671bb9924b3367eb5", "message": "#819 - Courses now cache", "committedDate": "2020-06-02T17:02:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0NDkyMw==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440544923", "bodyText": "Still got a lot of references to D2L in here. Probably worth going through to reword comments and change identifiers - so that the different connectors don't become coupled together and hard to maintain.", "author": "SammyIsConfused", "createdAt": "2020-06-16T02:07:07Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard;\n+\n+// TODO If this works for Bb, consider refactoring into a general class\n+import com.google.common.base.Strings;\n+import com.tle.core.connectors.brightspace.D2LSigner;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/** TODO - this was taken from the D2L logic. May not need everything... */\n+public class BlackboardRestUserContext implements Serializable {\n+  private final String instanceUrl;\n+  private final String appId;\n+  private final String appKey;\n+  private final String userId;\n+  private final String userKey;\n+\n+  private long _serverSkewMillis;\n+\n+  private static final String APP_ID_PARAMETER = \"x_a\";\n+  private static final String USER_ID_PARAMETER = \"x_b\";\n+  private static final String SIGNATURE_BY_APP_KEY_PARAMETER = \"x_c\";\n+  private static final String SIGNATURE_BY_USER_KEY_PARAMETER = \"x_d\";\n+  private static final String TIMESTAMP_PARAMETER = \"x_t\";\n+\n+  /** Returned when no result can be identified or as an unitialized value. Val=0x00; */\n+  public final int RESULT_UNKNOWN = 0x00;\n+\n+  /** Returned when result 200 okay. Val=0x01 */\n+  public final int RESULT_OKAY = 0x01;\n+\n+  /**\n+   * Returned when the signature or id was invalid, typically this should trigger a\n+   * reauthentication. Val=0x02\n+   */\n+  public final int RESULT_INVALID_SIG = 0x02;\n+\n+  /**\n+   * Returned if the timestamp was outside of the validity window, this indicates clocks are skewed.\n+   * The handleResult message automatically corrects the clock so on receiving this message callers\n+   * typically should retry the same operation. Val=0x03\n+   */\n+  public final int RESULT_INVALID_TIMESTAMP = 0x03;\n+\n+  /**\n+   * Returned if the requested operation is not allowed, typically user should be prompted that they\n+   * need to request different permissions from the administrator. Val = 0x04\n+   */\n+  public final int RESULT_NO_PERMISSION = 0x04;\n+\n+  /**\n+   * Creates a User Context with the provided parameters\n+   *\n+   * @param url the url of the D2Linstance\n+   * @param appId the Application Id\n+   * @param appKey The Application Key\n+   * @param userId the User Id\n+   * @param userKey the User Key\n+   */\n+  public BlackboardRestUserContext(\n+      String url, String appId, String appKey, String userId, String userKey) {\n+    this.instanceUrl = url;\n+    this.appId = appId;\n+    this.appKey = appKey;\n+    this.userId = userId;\n+    this.userKey = userKey;\n+  }\n+\n+  public String getUserId() {\n+    return userId;\n+  }\n+\n+  public String getUserKey() {\n+    return userKey;\n+  }\n+\n+  public long getServerSkewMillis() {\n+    return _serverSkewMillis;\n+  }\n+\n+  public void setServerSkewMillis(long _serverSkewMillis) {\n+    this._serverSkewMillis = _serverSkewMillis;\n+  }\n+\n+  public URI createAuthenticatedUri(String path, String httpMethod) {\n+    int split = path.indexOf(\"?\");\n+    String query = \"\";\n+    if (split >= 0) {\n+      query = path.substring(split + 1);\n+      path = path.substring(0, split);\n+    }\n+    String queryString = getQueryString(path, query, httpMethod);\n+    try {\n+      URI uri = new URI(instanceUrl + path + queryString);\n+      return uri;\n+    } catch (URISyntaxException e) {\n+      e.printStackTrace();\n+      return null;\n+    }\n+  }\n+\n+  public boolean calculateServerSkewFromResponse(String responseBody) {\n+    long serverTimestampSeconds = tryParseTimestamp(responseBody);\n+    if (serverTimestampSeconds > 0) {\n+      long clientTimestampMilliseconds = System.currentTimeMillis();\n+      _serverSkewMillis = serverTimestampSeconds * 1000 - clientTimestampMilliseconds;\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Constructs the query string with the appropriate parameters for authentication with the D2L", "originalCommit": "8f693dddaba1f14da45f398671bb9924b3367eb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0OTM5MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443949390", "bodyText": "Ended up removing the class entirely.", "author": "cbeach47", "createdAt": "2020-06-23T04:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0NDkyMw=="}], "type": "inlineReview", "revised_code": {"commit": "446bdcf57aa6e5837536d6eaf1640aba620f27a3", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java\ndeleted file mode 100644\nindex 36ebf3d68..000000000\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java\n+++ /dev/null\n\n@@ -1,239 +0,0 @@\n-/*\n- * Licensed to The Apereo Foundation under one or more contributor license\n- * agreements. See the NOTICE file distributed with this work for additional\n- * information regarding copyright ownership.\n- *\n- * The Apereo Foundation licenses this file to you under the Apache License,\n- * Version 2.0, (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.tle.core.connectors.blackboard;\n-\n-// TODO If this works for Bb, consider refactoring into a general class\n-import com.google.common.base.Strings;\n-import com.tle.core.connectors.brightspace.D2LSigner;\n-import java.io.Serializable;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-/** TODO - this was taken from the D2L logic. May not need everything... */\n-public class BlackboardRestUserContext implements Serializable {\n-  private final String instanceUrl;\n-  private final String appId;\n-  private final String appKey;\n-  private final String userId;\n-  private final String userKey;\n-\n-  private long _serverSkewMillis;\n-\n-  private static final String APP_ID_PARAMETER = \"x_a\";\n-  private static final String USER_ID_PARAMETER = \"x_b\";\n-  private static final String SIGNATURE_BY_APP_KEY_PARAMETER = \"x_c\";\n-  private static final String SIGNATURE_BY_USER_KEY_PARAMETER = \"x_d\";\n-  private static final String TIMESTAMP_PARAMETER = \"x_t\";\n-\n-  /** Returned when no result can be identified or as an unitialized value. Val=0x00; */\n-  public final int RESULT_UNKNOWN = 0x00;\n-\n-  /** Returned when result 200 okay. Val=0x01 */\n-  public final int RESULT_OKAY = 0x01;\n-\n-  /**\n-   * Returned when the signature or id was invalid, typically this should trigger a\n-   * reauthentication. Val=0x02\n-   */\n-  public final int RESULT_INVALID_SIG = 0x02;\n-\n-  /**\n-   * Returned if the timestamp was outside of the validity window, this indicates clocks are skewed.\n-   * The handleResult message automatically corrects the clock so on receiving this message callers\n-   * typically should retry the same operation. Val=0x03\n-   */\n-  public final int RESULT_INVALID_TIMESTAMP = 0x03;\n-\n-  /**\n-   * Returned if the requested operation is not allowed, typically user should be prompted that they\n-   * need to request different permissions from the administrator. Val = 0x04\n-   */\n-  public final int RESULT_NO_PERMISSION = 0x04;\n-\n-  /**\n-   * Creates a User Context with the provided parameters\n-   *\n-   * @param url the url of the D2Linstance\n-   * @param appId the Application Id\n-   * @param appKey The Application Key\n-   * @param userId the User Id\n-   * @param userKey the User Key\n-   */\n-  public BlackboardRestUserContext(\n-      String url, String appId, String appKey, String userId, String userKey) {\n-    this.instanceUrl = url;\n-    this.appId = appId;\n-    this.appKey = appKey;\n-    this.userId = userId;\n-    this.userKey = userKey;\n-  }\n-\n-  public String getUserId() {\n-    return userId;\n-  }\n-\n-  public String getUserKey() {\n-    return userKey;\n-  }\n-\n-  public long getServerSkewMillis() {\n-    return _serverSkewMillis;\n-  }\n-\n-  public void setServerSkewMillis(long _serverSkewMillis) {\n-    this._serverSkewMillis = _serverSkewMillis;\n-  }\n-\n-  public URI createAuthenticatedUri(String path, String httpMethod) {\n-    int split = path.indexOf(\"?\");\n-    String query = \"\";\n-    if (split >= 0) {\n-      query = path.substring(split + 1);\n-      path = path.substring(0, split);\n-    }\n-    String queryString = getQueryString(path, query, httpMethod);\n-    try {\n-      URI uri = new URI(instanceUrl + path + queryString);\n-      return uri;\n-    } catch (URISyntaxException e) {\n-      e.printStackTrace();\n-      return null;\n-    }\n-  }\n-\n-  public boolean calculateServerSkewFromResponse(String responseBody) {\n-    long serverTimestampSeconds = tryParseTimestamp(responseBody);\n-    if (serverTimestampSeconds > 0) {\n-      long clientTimestampMilliseconds = System.currentTimeMillis();\n-      _serverSkewMillis = serverTimestampSeconds * 1000 - clientTimestampMilliseconds;\n-      return true;\n-    }\n-    return false;\n-  }\n-\n-  /**\n-   * Constructs the query string with the appropriate parameters for authentication with the D2L\n-   * authentication system.\n-   *\n-   * @param signature The signature based on the path, http method and time\n-   * @param timestamp The timestamp for the query string\n-   * @return A query string with the relevant authentication parameters\n-   */\n-  private String buildAuthenticatedUriQueryString(String signature, long timestamp) {\n-    String queryString = \"?\" + APP_ID_PARAMETER + \"=\" + appId;\n-    if (getUserId() != null) {\n-      queryString += \"&\" + USER_ID_PARAMETER + \"=\" + getUserId();\n-    }\n-    queryString += \"&\" + SIGNATURE_BY_APP_KEY_PARAMETER;\n-    queryString += \"=\" + D2LSigner.getBase64HashString(appKey, signature);\n-    if (getUserId() != null) {\n-      queryString += \"&\" + SIGNATURE_BY_USER_KEY_PARAMETER;\n-      queryString += \"=\" + D2LSigner.getBase64HashString(getUserKey(), signature);\n-    }\n-    queryString += \"&\" + TIMESTAMP_PARAMETER + \"=\" + timestamp;\n-    return queryString;\n-  }\n-\n-  /**\n-   * Provides the unix timestamp adjusted for the approximate delay between the D2L server and\n-   * client\n-   *\n-   * @return The unix timestamp adjusted for the approximate delay between the D2L server and client\n-   */\n-  private long getAdjustedTimestampInSeconds() {\n-    long timestampMilliseconds = System.currentTimeMillis();\n-    long adjustedTimestampSeconds = (timestampMilliseconds + _serverSkewMillis) / 1000;\n-    return adjustedTimestampSeconds;\n-  }\n-\n-  /**\n-   * Constructs the query string with the appropriate parameters for authentication with the D2L\n-   * authentication system.\n-   *\n-   * @param path The absolute server path of the api (ie. /d2l/api/versions/)\n-   * @param httpMethod The http method to access the url with (GET,POST,etc.)\n-   * @return The query string with the appropriate parameters for authentication\n-   */\n-  private String getQueryString(String path, String query, String httpMethod) {\n-    long adjustedTimestampSeconds = getAdjustedTimestampInSeconds();\n-    String signature = formatSignature(path, httpMethod, adjustedTimestampSeconds);\n-    String queryString = buildAuthenticatedUriQueryString(signature, adjustedTimestampSeconds);\n-\n-    if (!Strings.isNullOrEmpty(query)) {\n-      queryString += \"&\" + query;\n-    }\n-    return queryString;\n-  }\n-\n-  /**\n-   * Creates a signature formatted to the D2L specifications for connecting to a given path\n-   *\n-   * @param path The absolute server path of the api (ie. /d2l/api/versions/)\n-   * @param httpMethod The http method to access the url with (GET,POST,etc.)\n-   * @param timestampSeconds\n-   * @return\n-   */\n-  private static String formatSignature(String path, String httpMethod, long timestampSeconds) {\n-    return httpMethod.toUpperCase()\n-        + \"&\"\n-        + URI.create(path).getPath().toLowerCase()\n-        + \"&\"\n-        + timestampSeconds;\n-  }\n-\n-  /**\n-   * Returns the timestamp returned by the server if the time between the request and when the\n-   * server received it is too large\n-   *\n-   * @param timestampMessage The message returned by the D2L Server\n-   * @return The timestamp returned by the server or 0 if no timestamp returned\n-   */\n-  private long tryParseTimestamp(String timestampMessage) {\n-    long result;\n-    Pattern p = Pattern.compile(\"Timestamp out of range\\\\r*\\\\n*\\\\s*(([0-9]+))\");\n-\n-    Matcher m = p.matcher(timestampMessage);\n-    boolean match = m.matches();\n-\n-    if (match && m.groupCount() >= 2) {\n-      result = Long.parseLong(m.group(1));\n-      return result;\n-    }\n-    result = 0;\n-    return result;\n-  }\n-\n-  public int interpretResult(int resultCode, String responseBody) {\n-    if (resultCode == 200) {\n-      return RESULT_OKAY;\n-    } else if (resultCode == 403) {\n-      if (calculateServerSkewFromResponse(responseBody)) {\n-        return RESULT_INVALID_TIMESTAMP;\n-      } else if (responseBody.toLowerCase().equals(\"invalid token\")\n-          || responseBody.toLowerCase().equals(\"token expired\")) {\n-        return RESULT_INVALID_SIG;\n-      } else {\n-        return RESULT_NO_PERMISSION;\n-      }\n-    }\n-    return RESULT_UNKNOWN;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0MTMwOA==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440541308", "bodyText": "Can we have more readable parameter names or  a brief description ?", "author": "PenghaiZhang", "createdAt": "2020-06-16T01:53:49Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/auditlog/AuditLogService.java", "diffHunk": "@@ -83,6 +83,8 @@ void logItemContentViewed(\n \n   void logItemPurged(Item item);\n \n+  void logExternalConnectorUsed(String d1, String d2, String d3, String d4);", "originalCommit": "8f693dddaba1f14da45f398671bb9924b3367eb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0OTM1Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443949353", "bodyText": "done", "author": "cbeach47", "createdAt": "2020-06-23T04:06:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0MTMwOA=="}], "type": "inlineReview", "revised_code": {"commit": "446bdcf57aa6e5837536d6eaf1640aba620f27a3", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/auditlog/AuditLogService.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/auditlog/AuditLogService.java\nindex bdc1a56fa..5ad9813da 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/auditlog/AuditLogService.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/auditlog/AuditLogService.java\n\n@@ -83,7 +83,13 @@ public interface AuditLogService {\n \n   void logItemPurged(Item item);\n \n-  void logExternalConnectorUsed(String d1, String d2, String d3, String d4);\n+  // Note:  This is specific to the Blackboard REST connector,\n+  // however, no other connector uses the audit log yet.  Maybe need to refactor in  the future\n+  void logExternalConnectorUsed(\n+      String externalConnectorUrl,\n+      String requestLimit,\n+      String requestRemaining,\n+      String timeToReset);\n \n   void logGeneric(\n       String category, String type, String data1, String data2, String data3, String data4);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0MjAxMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440542011", "bodyText": "Can remove these two lines.", "author": "PenghaiZhang", "createdAt": "2020-06-16T01:56:08Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRESTConnectorConstants.java", "diffHunk": "@@ -18,16 +18,31 @@\n \n package com.tle.core.connectors.blackboard;\n \n-/** @author Aaron */\n @SuppressWarnings(\"nls\")\n public final class BlackboardRESTConnectorConstants {\n-  private BlackboardRESTConnectorConstants() {\n-    throw new Error();\n-  }\n+\n+  public static final String AUTHENTICATIONCODE_SERVICE_URI_PATH =\n+      \"/learn/api/public/v1/oauth2/authorizationcode\";\n+\n+  public static final String SESSION_KEY_USER_ID = \"BbRest.UserId\";\n+  public static final String SESSION_COURSES = \"BbRest.UserCourses\";\n+  public static final String SESSION_CODE = \"BbRest.Code\";\n+  public static final String SESSION_TOKEN = \"BbRest.Token\";\n \n   public static final String CONNECTOR_TYPE = \"blackboardrest\";\n \n-  public static final String FIELD_TESTED_WEBSERVICE = \"testedWebservice\";\n   public static final String FIELD_API_KEY = \"apiKey\";\n   public static final String FIELD_API_SECRET = \"apiSecret\";\n+\n+  //  public static final String FIELD_APP_ID = \"appId\";\n+  //  public static final String FIELD_APP_KEY = \"appKey\";", "originalCommit": "8f693dddaba1f14da45f398671bb9924b3367eb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0OTMyOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443949329", "bodyText": "done", "author": "cbeach47", "createdAt": "2020-06-23T04:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0MjAxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "446bdcf57aa6e5837536d6eaf1640aba620f27a3", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRESTConnectorConstants.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRESTConnectorConstants.java\nindex b94557302..71b4ee795 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRESTConnectorConstants.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRESTConnectorConstants.java\n\n@@ -34,9 +34,6 @@ public final class BlackboardRESTConnectorConstants {\n   public static final String FIELD_API_KEY = \"apiKey\";\n   public static final String FIELD_API_SECRET = \"apiSecret\";\n \n-  //  public static final String FIELD_APP_ID = \"appId\";\n-  //  public static final String FIELD_APP_KEY = \"appKey\";\n-\n   public static final String STATE_KEY_FORWARD_URL = \"forwardUrl\";\n   public static final String STATE_KEY_POSTFIX_KEY = \"postfixKey\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0NjU3Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440546576", "bodyText": "Why not combine these two constants and the = into one constant?", "author": "PenghaiZhang", "createdAt": "2020-06-16T02:13:59Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestAppContext.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard;\n+\n+import com.tle.annotation.Nullable;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URLEncoder;\n+\n+public class BlackboardRestAppContext {\n+  private static final String STATE_PARAMETER = \"state\";\n+  private static final String VALUE_CODE = \"code\";\n+  private static final String FIELD_REDIRECT_URI = \"redirect_uri\";\n+  private static final String FIELD_RESPONSE_TYPE = \"response_type\";\n+  private static final String FIELD_CLIENT_ID = \"client_id\";\n+  private static final String FIELD_SCOPE = \"scope\";\n+  private static final String VALUE_READ_WRITE_DELETE = \"read write delete\";\n+\n+  private final String _appId;\n+  private final String _appKey;\n+  private String _url;\n+\n+  /**\n+   * Constructs a BlackboardRestAppContext with the provided application values\n+   *\n+   * @param appId The application ID provided by the key tool\n+   * @param appKey The application key provided by the key tool\n+   * @param url The url of the Bb instance\n+   */\n+  public BlackboardRestAppContext(String appId, String appKey, String url) {\n+    _appId = appId;\n+    _appKey = appKey;\n+    if (url != null && url.endsWith(\"/\")) {\n+      _url = url.substring(0, url.lastIndexOf(\"/\"));\n+    } else {\n+      _url = url;\n+    }\n+  }\n+\n+  public URI createWebUrlForAuthentication(URI redirectUrl, @Nullable String state) {\n+    try {\n+      URI uri =\n+          new URI(\n+              _url\n+                  + BlackboardRESTConnectorConstants.AUTHENTICATIONCODE_SERVICE_URI_PATH\n+                  + \"?\"\n+                  + buildAuthenticationCodeUriQueryString(redirectUrl, state));\n+      return uri;\n+    } catch (URISyntaxException e) {\n+      return null;\n+    }\n+  }\n+\n+  private String buildAuthenticationCodeUriQueryString(URI callbackUri, @Nullable String state) {\n+    String callbackUriString = callbackUri.toString();\n+    String result = FIELD_RESPONSE_TYPE + \"=\" + VALUE_CODE;", "originalCommit": "8f693dddaba1f14da45f398671bb9924b3367eb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0OTI5Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443949297", "bodyText": "done", "author": "cbeach47", "createdAt": "2020-06-23T04:06:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0NjU3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "446bdcf57aa6e5837536d6eaf1640aba620f27a3", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestAppContext.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestAppContext.java\nindex e9d7b36aa..55f601107 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestAppContext.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestAppContext.java\n\n@@ -25,9 +25,8 @@ import java.net.URLEncoder;\n \n public class BlackboardRestAppContext {\n   private static final String STATE_PARAMETER = \"state\";\n-  private static final String VALUE_CODE = \"code\";\n   private static final String FIELD_REDIRECT_URI = \"redirect_uri\";\n-  private static final String FIELD_RESPONSE_TYPE = \"response_type\";\n+  private static final String KEY_VALUE_RESPONSE_TYPE_CODE = \"response_type=code\";\n   private static final String FIELD_CLIENT_ID = \"client_id\";\n   private static final String FIELD_SCOPE = \"scope\";\n   private static final String VALUE_READ_WRITE_DELETE = \"read write delete\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0Nzg1OA==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440547858", "bodyText": "May I ask why use hexadecimal numbers and what they mean?", "author": "PenghaiZhang", "createdAt": "2020-06-16T02:19:14Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard;\n+\n+// TODO If this works for Bb, consider refactoring into a general class\n+import com.google.common.base.Strings;\n+import com.tle.core.connectors.brightspace.D2LSigner;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/** TODO - this was taken from the D2L logic. May not need everything... */\n+public class BlackboardRestUserContext implements Serializable {\n+  private final String instanceUrl;\n+  private final String appId;\n+  private final String appKey;\n+  private final String userId;\n+  private final String userKey;\n+\n+  private long _serverSkewMillis;\n+\n+  private static final String APP_ID_PARAMETER = \"x_a\";\n+  private static final String USER_ID_PARAMETER = \"x_b\";\n+  private static final String SIGNATURE_BY_APP_KEY_PARAMETER = \"x_c\";\n+  private static final String SIGNATURE_BY_USER_KEY_PARAMETER = \"x_d\";\n+  private static final String TIMESTAMP_PARAMETER = \"x_t\";\n+\n+  /** Returned when no result can be identified or as an unitialized value. Val=0x00; */\n+  public final int RESULT_UNKNOWN = 0x00;", "originalCommit": "8f693dddaba1f14da45f398671bb9924b3367eb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0OTI3Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443949276", "bodyText": "That came from the D2L flows, but turns out the class isn't needed for Blackboard REST.  Ended up removing the class entirely.", "author": "cbeach47", "createdAt": "2020-06-23T04:06:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0Nzg1OA=="}], "type": "inlineReview", "revised_code": {"commit": "446bdcf57aa6e5837536d6eaf1640aba620f27a3", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java\ndeleted file mode 100644\nindex 36ebf3d68..000000000\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java\n+++ /dev/null\n\n@@ -1,239 +0,0 @@\n-/*\n- * Licensed to The Apereo Foundation under one or more contributor license\n- * agreements. See the NOTICE file distributed with this work for additional\n- * information regarding copyright ownership.\n- *\n- * The Apereo Foundation licenses this file to you under the Apache License,\n- * Version 2.0, (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.tle.core.connectors.blackboard;\n-\n-// TODO If this works for Bb, consider refactoring into a general class\n-import com.google.common.base.Strings;\n-import com.tle.core.connectors.brightspace.D2LSigner;\n-import java.io.Serializable;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-/** TODO - this was taken from the D2L logic. May not need everything... */\n-public class BlackboardRestUserContext implements Serializable {\n-  private final String instanceUrl;\n-  private final String appId;\n-  private final String appKey;\n-  private final String userId;\n-  private final String userKey;\n-\n-  private long _serverSkewMillis;\n-\n-  private static final String APP_ID_PARAMETER = \"x_a\";\n-  private static final String USER_ID_PARAMETER = \"x_b\";\n-  private static final String SIGNATURE_BY_APP_KEY_PARAMETER = \"x_c\";\n-  private static final String SIGNATURE_BY_USER_KEY_PARAMETER = \"x_d\";\n-  private static final String TIMESTAMP_PARAMETER = \"x_t\";\n-\n-  /** Returned when no result can be identified or as an unitialized value. Val=0x00; */\n-  public final int RESULT_UNKNOWN = 0x00;\n-\n-  /** Returned when result 200 okay. Val=0x01 */\n-  public final int RESULT_OKAY = 0x01;\n-\n-  /**\n-   * Returned when the signature or id was invalid, typically this should trigger a\n-   * reauthentication. Val=0x02\n-   */\n-  public final int RESULT_INVALID_SIG = 0x02;\n-\n-  /**\n-   * Returned if the timestamp was outside of the validity window, this indicates clocks are skewed.\n-   * The handleResult message automatically corrects the clock so on receiving this message callers\n-   * typically should retry the same operation. Val=0x03\n-   */\n-  public final int RESULT_INVALID_TIMESTAMP = 0x03;\n-\n-  /**\n-   * Returned if the requested operation is not allowed, typically user should be prompted that they\n-   * need to request different permissions from the administrator. Val = 0x04\n-   */\n-  public final int RESULT_NO_PERMISSION = 0x04;\n-\n-  /**\n-   * Creates a User Context with the provided parameters\n-   *\n-   * @param url the url of the D2Linstance\n-   * @param appId the Application Id\n-   * @param appKey The Application Key\n-   * @param userId the User Id\n-   * @param userKey the User Key\n-   */\n-  public BlackboardRestUserContext(\n-      String url, String appId, String appKey, String userId, String userKey) {\n-    this.instanceUrl = url;\n-    this.appId = appId;\n-    this.appKey = appKey;\n-    this.userId = userId;\n-    this.userKey = userKey;\n-  }\n-\n-  public String getUserId() {\n-    return userId;\n-  }\n-\n-  public String getUserKey() {\n-    return userKey;\n-  }\n-\n-  public long getServerSkewMillis() {\n-    return _serverSkewMillis;\n-  }\n-\n-  public void setServerSkewMillis(long _serverSkewMillis) {\n-    this._serverSkewMillis = _serverSkewMillis;\n-  }\n-\n-  public URI createAuthenticatedUri(String path, String httpMethod) {\n-    int split = path.indexOf(\"?\");\n-    String query = \"\";\n-    if (split >= 0) {\n-      query = path.substring(split + 1);\n-      path = path.substring(0, split);\n-    }\n-    String queryString = getQueryString(path, query, httpMethod);\n-    try {\n-      URI uri = new URI(instanceUrl + path + queryString);\n-      return uri;\n-    } catch (URISyntaxException e) {\n-      e.printStackTrace();\n-      return null;\n-    }\n-  }\n-\n-  public boolean calculateServerSkewFromResponse(String responseBody) {\n-    long serverTimestampSeconds = tryParseTimestamp(responseBody);\n-    if (serverTimestampSeconds > 0) {\n-      long clientTimestampMilliseconds = System.currentTimeMillis();\n-      _serverSkewMillis = serverTimestampSeconds * 1000 - clientTimestampMilliseconds;\n-      return true;\n-    }\n-    return false;\n-  }\n-\n-  /**\n-   * Constructs the query string with the appropriate parameters for authentication with the D2L\n-   * authentication system.\n-   *\n-   * @param signature The signature based on the path, http method and time\n-   * @param timestamp The timestamp for the query string\n-   * @return A query string with the relevant authentication parameters\n-   */\n-  private String buildAuthenticatedUriQueryString(String signature, long timestamp) {\n-    String queryString = \"?\" + APP_ID_PARAMETER + \"=\" + appId;\n-    if (getUserId() != null) {\n-      queryString += \"&\" + USER_ID_PARAMETER + \"=\" + getUserId();\n-    }\n-    queryString += \"&\" + SIGNATURE_BY_APP_KEY_PARAMETER;\n-    queryString += \"=\" + D2LSigner.getBase64HashString(appKey, signature);\n-    if (getUserId() != null) {\n-      queryString += \"&\" + SIGNATURE_BY_USER_KEY_PARAMETER;\n-      queryString += \"=\" + D2LSigner.getBase64HashString(getUserKey(), signature);\n-    }\n-    queryString += \"&\" + TIMESTAMP_PARAMETER + \"=\" + timestamp;\n-    return queryString;\n-  }\n-\n-  /**\n-   * Provides the unix timestamp adjusted for the approximate delay between the D2L server and\n-   * client\n-   *\n-   * @return The unix timestamp adjusted for the approximate delay between the D2L server and client\n-   */\n-  private long getAdjustedTimestampInSeconds() {\n-    long timestampMilliseconds = System.currentTimeMillis();\n-    long adjustedTimestampSeconds = (timestampMilliseconds + _serverSkewMillis) / 1000;\n-    return adjustedTimestampSeconds;\n-  }\n-\n-  /**\n-   * Constructs the query string with the appropriate parameters for authentication with the D2L\n-   * authentication system.\n-   *\n-   * @param path The absolute server path of the api (ie. /d2l/api/versions/)\n-   * @param httpMethod The http method to access the url with (GET,POST,etc.)\n-   * @return The query string with the appropriate parameters for authentication\n-   */\n-  private String getQueryString(String path, String query, String httpMethod) {\n-    long adjustedTimestampSeconds = getAdjustedTimestampInSeconds();\n-    String signature = formatSignature(path, httpMethod, adjustedTimestampSeconds);\n-    String queryString = buildAuthenticatedUriQueryString(signature, adjustedTimestampSeconds);\n-\n-    if (!Strings.isNullOrEmpty(query)) {\n-      queryString += \"&\" + query;\n-    }\n-    return queryString;\n-  }\n-\n-  /**\n-   * Creates a signature formatted to the D2L specifications for connecting to a given path\n-   *\n-   * @param path The absolute server path of the api (ie. /d2l/api/versions/)\n-   * @param httpMethod The http method to access the url with (GET,POST,etc.)\n-   * @param timestampSeconds\n-   * @return\n-   */\n-  private static String formatSignature(String path, String httpMethod, long timestampSeconds) {\n-    return httpMethod.toUpperCase()\n-        + \"&\"\n-        + URI.create(path).getPath().toLowerCase()\n-        + \"&\"\n-        + timestampSeconds;\n-  }\n-\n-  /**\n-   * Returns the timestamp returned by the server if the time between the request and when the\n-   * server received it is too large\n-   *\n-   * @param timestampMessage The message returned by the D2L Server\n-   * @return The timestamp returned by the server or 0 if no timestamp returned\n-   */\n-  private long tryParseTimestamp(String timestampMessage) {\n-    long result;\n-    Pattern p = Pattern.compile(\"Timestamp out of range\\\\r*\\\\n*\\\\s*(([0-9]+))\");\n-\n-    Matcher m = p.matcher(timestampMessage);\n-    boolean match = m.matches();\n-\n-    if (match && m.groupCount() >= 2) {\n-      result = Long.parseLong(m.group(1));\n-      return result;\n-    }\n-    result = 0;\n-    return result;\n-  }\n-\n-  public int interpretResult(int resultCode, String responseBody) {\n-    if (resultCode == 200) {\n-      return RESULT_OKAY;\n-    } else if (resultCode == 403) {\n-      if (calculateServerSkewFromResponse(responseBody)) {\n-        return RESULT_INVALID_TIMESTAMP;\n-      } else if (responseBody.toLowerCase().equals(\"invalid token\")\n-          || responseBody.toLowerCase().equals(\"token expired\")) {\n-        return RESULT_INVALID_SIG;\n-      } else {\n-        return RESULT_NO_PERMISSION;\n-      }\n-    }\n-    return RESULT_UNKNOWN;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0OTAyMw==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440549023", "bodyText": "Can we use LOGGER.error here?", "author": "PenghaiZhang", "createdAt": "2020-06-16T02:23:30Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard;\n+\n+// TODO If this works for Bb, consider refactoring into a general class\n+import com.google.common.base.Strings;\n+import com.tle.core.connectors.brightspace.D2LSigner;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/** TODO - this was taken from the D2L logic. May not need everything... */\n+public class BlackboardRestUserContext implements Serializable {\n+  private final String instanceUrl;\n+  private final String appId;\n+  private final String appKey;\n+  private final String userId;\n+  private final String userKey;\n+\n+  private long _serverSkewMillis;\n+\n+  private static final String APP_ID_PARAMETER = \"x_a\";\n+  private static final String USER_ID_PARAMETER = \"x_b\";\n+  private static final String SIGNATURE_BY_APP_KEY_PARAMETER = \"x_c\";\n+  private static final String SIGNATURE_BY_USER_KEY_PARAMETER = \"x_d\";\n+  private static final String TIMESTAMP_PARAMETER = \"x_t\";\n+\n+  /** Returned when no result can be identified or as an unitialized value. Val=0x00; */\n+  public final int RESULT_UNKNOWN = 0x00;\n+\n+  /** Returned when result 200 okay. Val=0x01 */\n+  public final int RESULT_OKAY = 0x01;\n+\n+  /**\n+   * Returned when the signature or id was invalid, typically this should trigger a\n+   * reauthentication. Val=0x02\n+   */\n+  public final int RESULT_INVALID_SIG = 0x02;\n+\n+  /**\n+   * Returned if the timestamp was outside of the validity window, this indicates clocks are skewed.\n+   * The handleResult message automatically corrects the clock so on receiving this message callers\n+   * typically should retry the same operation. Val=0x03\n+   */\n+  public final int RESULT_INVALID_TIMESTAMP = 0x03;\n+\n+  /**\n+   * Returned if the requested operation is not allowed, typically user should be prompted that they\n+   * need to request different permissions from the administrator. Val = 0x04\n+   */\n+  public final int RESULT_NO_PERMISSION = 0x04;\n+\n+  /**\n+   * Creates a User Context with the provided parameters\n+   *\n+   * @param url the url of the D2Linstance\n+   * @param appId the Application Id\n+   * @param appKey The Application Key\n+   * @param userId the User Id\n+   * @param userKey the User Key\n+   */\n+  public BlackboardRestUserContext(\n+      String url, String appId, String appKey, String userId, String userKey) {\n+    this.instanceUrl = url;\n+    this.appId = appId;\n+    this.appKey = appKey;\n+    this.userId = userId;\n+    this.userKey = userKey;\n+  }\n+\n+  public String getUserId() {\n+    return userId;\n+  }\n+\n+  public String getUserKey() {\n+    return userKey;\n+  }\n+\n+  public long getServerSkewMillis() {\n+    return _serverSkewMillis;\n+  }\n+\n+  public void setServerSkewMillis(long _serverSkewMillis) {\n+    this._serverSkewMillis = _serverSkewMillis;\n+  }\n+\n+  public URI createAuthenticatedUri(String path, String httpMethod) {\n+    int split = path.indexOf(\"?\");\n+    String query = \"\";\n+    if (split >= 0) {\n+      query = path.substring(split + 1);\n+      path = path.substring(0, split);\n+    }\n+    String queryString = getQueryString(path, query, httpMethod);\n+    try {\n+      URI uri = new URI(instanceUrl + path + queryString);\n+      return uri;\n+    } catch (URISyntaxException e) {\n+      e.printStackTrace();", "originalCommit": "8f693dddaba1f14da45f398671bb9924b3367eb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0OTA0NA==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443949044", "bodyText": "Ended up removing the class entirely.", "author": "cbeach47", "createdAt": "2020-06-23T04:05:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0OTAyMw=="}], "type": "inlineReview", "revised_code": {"commit": "446bdcf57aa6e5837536d6eaf1640aba620f27a3", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java\ndeleted file mode 100644\nindex 36ebf3d68..000000000\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java\n+++ /dev/null\n\n@@ -1,239 +0,0 @@\n-/*\n- * Licensed to The Apereo Foundation under one or more contributor license\n- * agreements. See the NOTICE file distributed with this work for additional\n- * information regarding copyright ownership.\n- *\n- * The Apereo Foundation licenses this file to you under the Apache License,\n- * Version 2.0, (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.tle.core.connectors.blackboard;\n-\n-// TODO If this works for Bb, consider refactoring into a general class\n-import com.google.common.base.Strings;\n-import com.tle.core.connectors.brightspace.D2LSigner;\n-import java.io.Serializable;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-/** TODO - this was taken from the D2L logic. May not need everything... */\n-public class BlackboardRestUserContext implements Serializable {\n-  private final String instanceUrl;\n-  private final String appId;\n-  private final String appKey;\n-  private final String userId;\n-  private final String userKey;\n-\n-  private long _serverSkewMillis;\n-\n-  private static final String APP_ID_PARAMETER = \"x_a\";\n-  private static final String USER_ID_PARAMETER = \"x_b\";\n-  private static final String SIGNATURE_BY_APP_KEY_PARAMETER = \"x_c\";\n-  private static final String SIGNATURE_BY_USER_KEY_PARAMETER = \"x_d\";\n-  private static final String TIMESTAMP_PARAMETER = \"x_t\";\n-\n-  /** Returned when no result can be identified or as an unitialized value. Val=0x00; */\n-  public final int RESULT_UNKNOWN = 0x00;\n-\n-  /** Returned when result 200 okay. Val=0x01 */\n-  public final int RESULT_OKAY = 0x01;\n-\n-  /**\n-   * Returned when the signature or id was invalid, typically this should trigger a\n-   * reauthentication. Val=0x02\n-   */\n-  public final int RESULT_INVALID_SIG = 0x02;\n-\n-  /**\n-   * Returned if the timestamp was outside of the validity window, this indicates clocks are skewed.\n-   * The handleResult message automatically corrects the clock so on receiving this message callers\n-   * typically should retry the same operation. Val=0x03\n-   */\n-  public final int RESULT_INVALID_TIMESTAMP = 0x03;\n-\n-  /**\n-   * Returned if the requested operation is not allowed, typically user should be prompted that they\n-   * need to request different permissions from the administrator. Val = 0x04\n-   */\n-  public final int RESULT_NO_PERMISSION = 0x04;\n-\n-  /**\n-   * Creates a User Context with the provided parameters\n-   *\n-   * @param url the url of the D2Linstance\n-   * @param appId the Application Id\n-   * @param appKey The Application Key\n-   * @param userId the User Id\n-   * @param userKey the User Key\n-   */\n-  public BlackboardRestUserContext(\n-      String url, String appId, String appKey, String userId, String userKey) {\n-    this.instanceUrl = url;\n-    this.appId = appId;\n-    this.appKey = appKey;\n-    this.userId = userId;\n-    this.userKey = userKey;\n-  }\n-\n-  public String getUserId() {\n-    return userId;\n-  }\n-\n-  public String getUserKey() {\n-    return userKey;\n-  }\n-\n-  public long getServerSkewMillis() {\n-    return _serverSkewMillis;\n-  }\n-\n-  public void setServerSkewMillis(long _serverSkewMillis) {\n-    this._serverSkewMillis = _serverSkewMillis;\n-  }\n-\n-  public URI createAuthenticatedUri(String path, String httpMethod) {\n-    int split = path.indexOf(\"?\");\n-    String query = \"\";\n-    if (split >= 0) {\n-      query = path.substring(split + 1);\n-      path = path.substring(0, split);\n-    }\n-    String queryString = getQueryString(path, query, httpMethod);\n-    try {\n-      URI uri = new URI(instanceUrl + path + queryString);\n-      return uri;\n-    } catch (URISyntaxException e) {\n-      e.printStackTrace();\n-      return null;\n-    }\n-  }\n-\n-  public boolean calculateServerSkewFromResponse(String responseBody) {\n-    long serverTimestampSeconds = tryParseTimestamp(responseBody);\n-    if (serverTimestampSeconds > 0) {\n-      long clientTimestampMilliseconds = System.currentTimeMillis();\n-      _serverSkewMillis = serverTimestampSeconds * 1000 - clientTimestampMilliseconds;\n-      return true;\n-    }\n-    return false;\n-  }\n-\n-  /**\n-   * Constructs the query string with the appropriate parameters for authentication with the D2L\n-   * authentication system.\n-   *\n-   * @param signature The signature based on the path, http method and time\n-   * @param timestamp The timestamp for the query string\n-   * @return A query string with the relevant authentication parameters\n-   */\n-  private String buildAuthenticatedUriQueryString(String signature, long timestamp) {\n-    String queryString = \"?\" + APP_ID_PARAMETER + \"=\" + appId;\n-    if (getUserId() != null) {\n-      queryString += \"&\" + USER_ID_PARAMETER + \"=\" + getUserId();\n-    }\n-    queryString += \"&\" + SIGNATURE_BY_APP_KEY_PARAMETER;\n-    queryString += \"=\" + D2LSigner.getBase64HashString(appKey, signature);\n-    if (getUserId() != null) {\n-      queryString += \"&\" + SIGNATURE_BY_USER_KEY_PARAMETER;\n-      queryString += \"=\" + D2LSigner.getBase64HashString(getUserKey(), signature);\n-    }\n-    queryString += \"&\" + TIMESTAMP_PARAMETER + \"=\" + timestamp;\n-    return queryString;\n-  }\n-\n-  /**\n-   * Provides the unix timestamp adjusted for the approximate delay between the D2L server and\n-   * client\n-   *\n-   * @return The unix timestamp adjusted for the approximate delay between the D2L server and client\n-   */\n-  private long getAdjustedTimestampInSeconds() {\n-    long timestampMilliseconds = System.currentTimeMillis();\n-    long adjustedTimestampSeconds = (timestampMilliseconds + _serverSkewMillis) / 1000;\n-    return adjustedTimestampSeconds;\n-  }\n-\n-  /**\n-   * Constructs the query string with the appropriate parameters for authentication with the D2L\n-   * authentication system.\n-   *\n-   * @param path The absolute server path of the api (ie. /d2l/api/versions/)\n-   * @param httpMethod The http method to access the url with (GET,POST,etc.)\n-   * @return The query string with the appropriate parameters for authentication\n-   */\n-  private String getQueryString(String path, String query, String httpMethod) {\n-    long adjustedTimestampSeconds = getAdjustedTimestampInSeconds();\n-    String signature = formatSignature(path, httpMethod, adjustedTimestampSeconds);\n-    String queryString = buildAuthenticatedUriQueryString(signature, adjustedTimestampSeconds);\n-\n-    if (!Strings.isNullOrEmpty(query)) {\n-      queryString += \"&\" + query;\n-    }\n-    return queryString;\n-  }\n-\n-  /**\n-   * Creates a signature formatted to the D2L specifications for connecting to a given path\n-   *\n-   * @param path The absolute server path of the api (ie. /d2l/api/versions/)\n-   * @param httpMethod The http method to access the url with (GET,POST,etc.)\n-   * @param timestampSeconds\n-   * @return\n-   */\n-  private static String formatSignature(String path, String httpMethod, long timestampSeconds) {\n-    return httpMethod.toUpperCase()\n-        + \"&\"\n-        + URI.create(path).getPath().toLowerCase()\n-        + \"&\"\n-        + timestampSeconds;\n-  }\n-\n-  /**\n-   * Returns the timestamp returned by the server if the time between the request and when the\n-   * server received it is too large\n-   *\n-   * @param timestampMessage The message returned by the D2L Server\n-   * @return The timestamp returned by the server or 0 if no timestamp returned\n-   */\n-  private long tryParseTimestamp(String timestampMessage) {\n-    long result;\n-    Pattern p = Pattern.compile(\"Timestamp out of range\\\\r*\\\\n*\\\\s*(([0-9]+))\");\n-\n-    Matcher m = p.matcher(timestampMessage);\n-    boolean match = m.matches();\n-\n-    if (match && m.groupCount() >= 2) {\n-      result = Long.parseLong(m.group(1));\n-      return result;\n-    }\n-    result = 0;\n-    return result;\n-  }\n-\n-  public int interpretResult(int resultCode, String responseBody) {\n-    if (resultCode == 200) {\n-      return RESULT_OKAY;\n-    } else if (resultCode == 403) {\n-      if (calculateServerSkewFromResponse(responseBody)) {\n-        return RESULT_INVALID_TIMESTAMP;\n-      } else if (responseBody.toLowerCase().equals(\"invalid token\")\n-          || responseBody.toLowerCase().equals(\"token expired\")) {\n-        return RESULT_INVALID_SIG;\n-      } else {\n-        return RESULT_NO_PERMISSION;\n-      }\n-    }\n-    return RESULT_UNKNOWN;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1MDM5OA==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440550398", "bodyText": "OEQ provides tools that check strings. You can call Check.isEmpty(query) to do the check.", "author": "PenghaiZhang", "createdAt": "2020-06-16T02:28:31Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard;\n+\n+// TODO If this works for Bb, consider refactoring into a general class\n+import com.google.common.base.Strings;\n+import com.tle.core.connectors.brightspace.D2LSigner;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/** TODO - this was taken from the D2L logic. May not need everything... */\n+public class BlackboardRestUserContext implements Serializable {\n+  private final String instanceUrl;\n+  private final String appId;\n+  private final String appKey;\n+  private final String userId;\n+  private final String userKey;\n+\n+  private long _serverSkewMillis;\n+\n+  private static final String APP_ID_PARAMETER = \"x_a\";\n+  private static final String USER_ID_PARAMETER = \"x_b\";\n+  private static final String SIGNATURE_BY_APP_KEY_PARAMETER = \"x_c\";\n+  private static final String SIGNATURE_BY_USER_KEY_PARAMETER = \"x_d\";\n+  private static final String TIMESTAMP_PARAMETER = \"x_t\";\n+\n+  /** Returned when no result can be identified or as an unitialized value. Val=0x00; */\n+  public final int RESULT_UNKNOWN = 0x00;\n+\n+  /** Returned when result 200 okay. Val=0x01 */\n+  public final int RESULT_OKAY = 0x01;\n+\n+  /**\n+   * Returned when the signature or id was invalid, typically this should trigger a\n+   * reauthentication. Val=0x02\n+   */\n+  public final int RESULT_INVALID_SIG = 0x02;\n+\n+  /**\n+   * Returned if the timestamp was outside of the validity window, this indicates clocks are skewed.\n+   * The handleResult message automatically corrects the clock so on receiving this message callers\n+   * typically should retry the same operation. Val=0x03\n+   */\n+  public final int RESULT_INVALID_TIMESTAMP = 0x03;\n+\n+  /**\n+   * Returned if the requested operation is not allowed, typically user should be prompted that they\n+   * need to request different permissions from the administrator. Val = 0x04\n+   */\n+  public final int RESULT_NO_PERMISSION = 0x04;\n+\n+  /**\n+   * Creates a User Context with the provided parameters\n+   *\n+   * @param url the url of the D2Linstance\n+   * @param appId the Application Id\n+   * @param appKey The Application Key\n+   * @param userId the User Id\n+   * @param userKey the User Key\n+   */\n+  public BlackboardRestUserContext(\n+      String url, String appId, String appKey, String userId, String userKey) {\n+    this.instanceUrl = url;\n+    this.appId = appId;\n+    this.appKey = appKey;\n+    this.userId = userId;\n+    this.userKey = userKey;\n+  }\n+\n+  public String getUserId() {\n+    return userId;\n+  }\n+\n+  public String getUserKey() {\n+    return userKey;\n+  }\n+\n+  public long getServerSkewMillis() {\n+    return _serverSkewMillis;\n+  }\n+\n+  public void setServerSkewMillis(long _serverSkewMillis) {\n+    this._serverSkewMillis = _serverSkewMillis;\n+  }\n+\n+  public URI createAuthenticatedUri(String path, String httpMethod) {\n+    int split = path.indexOf(\"?\");\n+    String query = \"\";\n+    if (split >= 0) {\n+      query = path.substring(split + 1);\n+      path = path.substring(0, split);\n+    }\n+    String queryString = getQueryString(path, query, httpMethod);\n+    try {\n+      URI uri = new URI(instanceUrl + path + queryString);\n+      return uri;\n+    } catch (URISyntaxException e) {\n+      e.printStackTrace();\n+      return null;\n+    }\n+  }\n+\n+  public boolean calculateServerSkewFromResponse(String responseBody) {\n+    long serverTimestampSeconds = tryParseTimestamp(responseBody);\n+    if (serverTimestampSeconds > 0) {\n+      long clientTimestampMilliseconds = System.currentTimeMillis();\n+      _serverSkewMillis = serverTimestampSeconds * 1000 - clientTimestampMilliseconds;\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Constructs the query string with the appropriate parameters for authentication with the D2L\n+   * authentication system.\n+   *\n+   * @param signature The signature based on the path, http method and time\n+   * @param timestamp The timestamp for the query string\n+   * @return A query string with the relevant authentication parameters\n+   */\n+  private String buildAuthenticatedUriQueryString(String signature, long timestamp) {\n+    String queryString = \"?\" + APP_ID_PARAMETER + \"=\" + appId;\n+    if (getUserId() != null) {\n+      queryString += \"&\" + USER_ID_PARAMETER + \"=\" + getUserId();\n+    }\n+    queryString += \"&\" + SIGNATURE_BY_APP_KEY_PARAMETER;\n+    queryString += \"=\" + D2LSigner.getBase64HashString(appKey, signature);\n+    if (getUserId() != null) {\n+      queryString += \"&\" + SIGNATURE_BY_USER_KEY_PARAMETER;\n+      queryString += \"=\" + D2LSigner.getBase64HashString(getUserKey(), signature);\n+    }\n+    queryString += \"&\" + TIMESTAMP_PARAMETER + \"=\" + timestamp;\n+    return queryString;\n+  }\n+\n+  /**\n+   * Provides the unix timestamp adjusted for the approximate delay between the D2L server and\n+   * client\n+   *\n+   * @return The unix timestamp adjusted for the approximate delay between the D2L server and client\n+   */\n+  private long getAdjustedTimestampInSeconds() {\n+    long timestampMilliseconds = System.currentTimeMillis();\n+    long adjustedTimestampSeconds = (timestampMilliseconds + _serverSkewMillis) / 1000;\n+    return adjustedTimestampSeconds;\n+  }\n+\n+  /**\n+   * Constructs the query string with the appropriate parameters for authentication with the D2L\n+   * authentication system.\n+   *\n+   * @param path The absolute server path of the api (ie. /d2l/api/versions/)\n+   * @param httpMethod The http method to access the url with (GET,POST,etc.)\n+   * @return The query string with the appropriate parameters for authentication\n+   */\n+  private String getQueryString(String path, String query, String httpMethod) {\n+    long adjustedTimestampSeconds = getAdjustedTimestampInSeconds();\n+    String signature = formatSignature(path, httpMethod, adjustedTimestampSeconds);\n+    String queryString = buildAuthenticatedUriQueryString(signature, adjustedTimestampSeconds);\n+\n+    if (!Strings.isNullOrEmpty(query)) {", "originalCommit": "8f693dddaba1f14da45f398671bb9924b3367eb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0OTAwNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443949005", "bodyText": "not sure why we use a custom tool instead of a library that's available.  However, for this, I ended up removing the class entirely.", "author": "cbeach47", "createdAt": "2020-06-23T04:05:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1MDM5OA=="}], "type": "inlineReview", "revised_code": {"commit": "446bdcf57aa6e5837536d6eaf1640aba620f27a3", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java\ndeleted file mode 100644\nindex 36ebf3d68..000000000\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java\n+++ /dev/null\n\n@@ -1,239 +0,0 @@\n-/*\n- * Licensed to The Apereo Foundation under one or more contributor license\n- * agreements. See the NOTICE file distributed with this work for additional\n- * information regarding copyright ownership.\n- *\n- * The Apereo Foundation licenses this file to you under the Apache License,\n- * Version 2.0, (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.tle.core.connectors.blackboard;\n-\n-// TODO If this works for Bb, consider refactoring into a general class\n-import com.google.common.base.Strings;\n-import com.tle.core.connectors.brightspace.D2LSigner;\n-import java.io.Serializable;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-/** TODO - this was taken from the D2L logic. May not need everything... */\n-public class BlackboardRestUserContext implements Serializable {\n-  private final String instanceUrl;\n-  private final String appId;\n-  private final String appKey;\n-  private final String userId;\n-  private final String userKey;\n-\n-  private long _serverSkewMillis;\n-\n-  private static final String APP_ID_PARAMETER = \"x_a\";\n-  private static final String USER_ID_PARAMETER = \"x_b\";\n-  private static final String SIGNATURE_BY_APP_KEY_PARAMETER = \"x_c\";\n-  private static final String SIGNATURE_BY_USER_KEY_PARAMETER = \"x_d\";\n-  private static final String TIMESTAMP_PARAMETER = \"x_t\";\n-\n-  /** Returned when no result can be identified or as an unitialized value. Val=0x00; */\n-  public final int RESULT_UNKNOWN = 0x00;\n-\n-  /** Returned when result 200 okay. Val=0x01 */\n-  public final int RESULT_OKAY = 0x01;\n-\n-  /**\n-   * Returned when the signature or id was invalid, typically this should trigger a\n-   * reauthentication. Val=0x02\n-   */\n-  public final int RESULT_INVALID_SIG = 0x02;\n-\n-  /**\n-   * Returned if the timestamp was outside of the validity window, this indicates clocks are skewed.\n-   * The handleResult message automatically corrects the clock so on receiving this message callers\n-   * typically should retry the same operation. Val=0x03\n-   */\n-  public final int RESULT_INVALID_TIMESTAMP = 0x03;\n-\n-  /**\n-   * Returned if the requested operation is not allowed, typically user should be prompted that they\n-   * need to request different permissions from the administrator. Val = 0x04\n-   */\n-  public final int RESULT_NO_PERMISSION = 0x04;\n-\n-  /**\n-   * Creates a User Context with the provided parameters\n-   *\n-   * @param url the url of the D2Linstance\n-   * @param appId the Application Id\n-   * @param appKey The Application Key\n-   * @param userId the User Id\n-   * @param userKey the User Key\n-   */\n-  public BlackboardRestUserContext(\n-      String url, String appId, String appKey, String userId, String userKey) {\n-    this.instanceUrl = url;\n-    this.appId = appId;\n-    this.appKey = appKey;\n-    this.userId = userId;\n-    this.userKey = userKey;\n-  }\n-\n-  public String getUserId() {\n-    return userId;\n-  }\n-\n-  public String getUserKey() {\n-    return userKey;\n-  }\n-\n-  public long getServerSkewMillis() {\n-    return _serverSkewMillis;\n-  }\n-\n-  public void setServerSkewMillis(long _serverSkewMillis) {\n-    this._serverSkewMillis = _serverSkewMillis;\n-  }\n-\n-  public URI createAuthenticatedUri(String path, String httpMethod) {\n-    int split = path.indexOf(\"?\");\n-    String query = \"\";\n-    if (split >= 0) {\n-      query = path.substring(split + 1);\n-      path = path.substring(0, split);\n-    }\n-    String queryString = getQueryString(path, query, httpMethod);\n-    try {\n-      URI uri = new URI(instanceUrl + path + queryString);\n-      return uri;\n-    } catch (URISyntaxException e) {\n-      e.printStackTrace();\n-      return null;\n-    }\n-  }\n-\n-  public boolean calculateServerSkewFromResponse(String responseBody) {\n-    long serverTimestampSeconds = tryParseTimestamp(responseBody);\n-    if (serverTimestampSeconds > 0) {\n-      long clientTimestampMilliseconds = System.currentTimeMillis();\n-      _serverSkewMillis = serverTimestampSeconds * 1000 - clientTimestampMilliseconds;\n-      return true;\n-    }\n-    return false;\n-  }\n-\n-  /**\n-   * Constructs the query string with the appropriate parameters for authentication with the D2L\n-   * authentication system.\n-   *\n-   * @param signature The signature based on the path, http method and time\n-   * @param timestamp The timestamp for the query string\n-   * @return A query string with the relevant authentication parameters\n-   */\n-  private String buildAuthenticatedUriQueryString(String signature, long timestamp) {\n-    String queryString = \"?\" + APP_ID_PARAMETER + \"=\" + appId;\n-    if (getUserId() != null) {\n-      queryString += \"&\" + USER_ID_PARAMETER + \"=\" + getUserId();\n-    }\n-    queryString += \"&\" + SIGNATURE_BY_APP_KEY_PARAMETER;\n-    queryString += \"=\" + D2LSigner.getBase64HashString(appKey, signature);\n-    if (getUserId() != null) {\n-      queryString += \"&\" + SIGNATURE_BY_USER_KEY_PARAMETER;\n-      queryString += \"=\" + D2LSigner.getBase64HashString(getUserKey(), signature);\n-    }\n-    queryString += \"&\" + TIMESTAMP_PARAMETER + \"=\" + timestamp;\n-    return queryString;\n-  }\n-\n-  /**\n-   * Provides the unix timestamp adjusted for the approximate delay between the D2L server and\n-   * client\n-   *\n-   * @return The unix timestamp adjusted for the approximate delay between the D2L server and client\n-   */\n-  private long getAdjustedTimestampInSeconds() {\n-    long timestampMilliseconds = System.currentTimeMillis();\n-    long adjustedTimestampSeconds = (timestampMilliseconds + _serverSkewMillis) / 1000;\n-    return adjustedTimestampSeconds;\n-  }\n-\n-  /**\n-   * Constructs the query string with the appropriate parameters for authentication with the D2L\n-   * authentication system.\n-   *\n-   * @param path The absolute server path of the api (ie. /d2l/api/versions/)\n-   * @param httpMethod The http method to access the url with (GET,POST,etc.)\n-   * @return The query string with the appropriate parameters for authentication\n-   */\n-  private String getQueryString(String path, String query, String httpMethod) {\n-    long adjustedTimestampSeconds = getAdjustedTimestampInSeconds();\n-    String signature = formatSignature(path, httpMethod, adjustedTimestampSeconds);\n-    String queryString = buildAuthenticatedUriQueryString(signature, adjustedTimestampSeconds);\n-\n-    if (!Strings.isNullOrEmpty(query)) {\n-      queryString += \"&\" + query;\n-    }\n-    return queryString;\n-  }\n-\n-  /**\n-   * Creates a signature formatted to the D2L specifications for connecting to a given path\n-   *\n-   * @param path The absolute server path of the api (ie. /d2l/api/versions/)\n-   * @param httpMethod The http method to access the url with (GET,POST,etc.)\n-   * @param timestampSeconds\n-   * @return\n-   */\n-  private static String formatSignature(String path, String httpMethod, long timestampSeconds) {\n-    return httpMethod.toUpperCase()\n-        + \"&\"\n-        + URI.create(path).getPath().toLowerCase()\n-        + \"&\"\n-        + timestampSeconds;\n-  }\n-\n-  /**\n-   * Returns the timestamp returned by the server if the time between the request and when the\n-   * server received it is too large\n-   *\n-   * @param timestampMessage The message returned by the D2L Server\n-   * @return The timestamp returned by the server or 0 if no timestamp returned\n-   */\n-  private long tryParseTimestamp(String timestampMessage) {\n-    long result;\n-    Pattern p = Pattern.compile(\"Timestamp out of range\\\\r*\\\\n*\\\\s*(([0-9]+))\");\n-\n-    Matcher m = p.matcher(timestampMessage);\n-    boolean match = m.matches();\n-\n-    if (match && m.groupCount() >= 2) {\n-      result = Long.parseLong(m.group(1));\n-      return result;\n-    }\n-    result = 0;\n-    return result;\n-  }\n-\n-  public int interpretResult(int resultCode, String responseBody) {\n-    if (resultCode == 200) {\n-      return RESULT_OKAY;\n-    } else if (resultCode == 403) {\n-      if (calculateServerSkewFromResponse(responseBody)) {\n-        return RESULT_INVALID_TIMESTAMP;\n-      } else if (responseBody.toLowerCase().equals(\"invalid token\")\n-          || responseBody.toLowerCase().equals(\"token expired\")) {\n-        return RESULT_INVALID_SIG;\n-      } else {\n-        return RESULT_NO_PERMISSION;\n-      }\n-    }\n-    return RESULT_UNKNOWN;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1MDc0MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440550741", "bodyText": "Can we have an example that matches this pattern ?", "author": "PenghaiZhang", "createdAt": "2020-06-16T02:29:55Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard;\n+\n+// TODO If this works for Bb, consider refactoring into a general class\n+import com.google.common.base.Strings;\n+import com.tle.core.connectors.brightspace.D2LSigner;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/** TODO - this was taken from the D2L logic. May not need everything... */\n+public class BlackboardRestUserContext implements Serializable {\n+  private final String instanceUrl;\n+  private final String appId;\n+  private final String appKey;\n+  private final String userId;\n+  private final String userKey;\n+\n+  private long _serverSkewMillis;\n+\n+  private static final String APP_ID_PARAMETER = \"x_a\";\n+  private static final String USER_ID_PARAMETER = \"x_b\";\n+  private static final String SIGNATURE_BY_APP_KEY_PARAMETER = \"x_c\";\n+  private static final String SIGNATURE_BY_USER_KEY_PARAMETER = \"x_d\";\n+  private static final String TIMESTAMP_PARAMETER = \"x_t\";\n+\n+  /** Returned when no result can be identified or as an unitialized value. Val=0x00; */\n+  public final int RESULT_UNKNOWN = 0x00;\n+\n+  /** Returned when result 200 okay. Val=0x01 */\n+  public final int RESULT_OKAY = 0x01;\n+\n+  /**\n+   * Returned when the signature or id was invalid, typically this should trigger a\n+   * reauthentication. Val=0x02\n+   */\n+  public final int RESULT_INVALID_SIG = 0x02;\n+\n+  /**\n+   * Returned if the timestamp was outside of the validity window, this indicates clocks are skewed.\n+   * The handleResult message automatically corrects the clock so on receiving this message callers\n+   * typically should retry the same operation. Val=0x03\n+   */\n+  public final int RESULT_INVALID_TIMESTAMP = 0x03;\n+\n+  /**\n+   * Returned if the requested operation is not allowed, typically user should be prompted that they\n+   * need to request different permissions from the administrator. Val = 0x04\n+   */\n+  public final int RESULT_NO_PERMISSION = 0x04;\n+\n+  /**\n+   * Creates a User Context with the provided parameters\n+   *\n+   * @param url the url of the D2Linstance\n+   * @param appId the Application Id\n+   * @param appKey The Application Key\n+   * @param userId the User Id\n+   * @param userKey the User Key\n+   */\n+  public BlackboardRestUserContext(\n+      String url, String appId, String appKey, String userId, String userKey) {\n+    this.instanceUrl = url;\n+    this.appId = appId;\n+    this.appKey = appKey;\n+    this.userId = userId;\n+    this.userKey = userKey;\n+  }\n+\n+  public String getUserId() {\n+    return userId;\n+  }\n+\n+  public String getUserKey() {\n+    return userKey;\n+  }\n+\n+  public long getServerSkewMillis() {\n+    return _serverSkewMillis;\n+  }\n+\n+  public void setServerSkewMillis(long _serverSkewMillis) {\n+    this._serverSkewMillis = _serverSkewMillis;\n+  }\n+\n+  public URI createAuthenticatedUri(String path, String httpMethod) {\n+    int split = path.indexOf(\"?\");\n+    String query = \"\";\n+    if (split >= 0) {\n+      query = path.substring(split + 1);\n+      path = path.substring(0, split);\n+    }\n+    String queryString = getQueryString(path, query, httpMethod);\n+    try {\n+      URI uri = new URI(instanceUrl + path + queryString);\n+      return uri;\n+    } catch (URISyntaxException e) {\n+      e.printStackTrace();\n+      return null;\n+    }\n+  }\n+\n+  public boolean calculateServerSkewFromResponse(String responseBody) {\n+    long serverTimestampSeconds = tryParseTimestamp(responseBody);\n+    if (serverTimestampSeconds > 0) {\n+      long clientTimestampMilliseconds = System.currentTimeMillis();\n+      _serverSkewMillis = serverTimestampSeconds * 1000 - clientTimestampMilliseconds;\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Constructs the query string with the appropriate parameters for authentication with the D2L\n+   * authentication system.\n+   *\n+   * @param signature The signature based on the path, http method and time\n+   * @param timestamp The timestamp for the query string\n+   * @return A query string with the relevant authentication parameters\n+   */\n+  private String buildAuthenticatedUriQueryString(String signature, long timestamp) {\n+    String queryString = \"?\" + APP_ID_PARAMETER + \"=\" + appId;\n+    if (getUserId() != null) {\n+      queryString += \"&\" + USER_ID_PARAMETER + \"=\" + getUserId();\n+    }\n+    queryString += \"&\" + SIGNATURE_BY_APP_KEY_PARAMETER;\n+    queryString += \"=\" + D2LSigner.getBase64HashString(appKey, signature);\n+    if (getUserId() != null) {\n+      queryString += \"&\" + SIGNATURE_BY_USER_KEY_PARAMETER;\n+      queryString += \"=\" + D2LSigner.getBase64HashString(getUserKey(), signature);\n+    }\n+    queryString += \"&\" + TIMESTAMP_PARAMETER + \"=\" + timestamp;\n+    return queryString;\n+  }\n+\n+  /**\n+   * Provides the unix timestamp adjusted for the approximate delay between the D2L server and\n+   * client\n+   *\n+   * @return The unix timestamp adjusted for the approximate delay between the D2L server and client\n+   */\n+  private long getAdjustedTimestampInSeconds() {\n+    long timestampMilliseconds = System.currentTimeMillis();\n+    long adjustedTimestampSeconds = (timestampMilliseconds + _serverSkewMillis) / 1000;\n+    return adjustedTimestampSeconds;\n+  }\n+\n+  /**\n+   * Constructs the query string with the appropriate parameters for authentication with the D2L\n+   * authentication system.\n+   *\n+   * @param path The absolute server path of the api (ie. /d2l/api/versions/)\n+   * @param httpMethod The http method to access the url with (GET,POST,etc.)\n+   * @return The query string with the appropriate parameters for authentication\n+   */\n+  private String getQueryString(String path, String query, String httpMethod) {\n+    long adjustedTimestampSeconds = getAdjustedTimestampInSeconds();\n+    String signature = formatSignature(path, httpMethod, adjustedTimestampSeconds);\n+    String queryString = buildAuthenticatedUriQueryString(signature, adjustedTimestampSeconds);\n+\n+    if (!Strings.isNullOrEmpty(query)) {\n+      queryString += \"&\" + query;\n+    }\n+    return queryString;\n+  }\n+\n+  /**\n+   * Creates a signature formatted to the D2L specifications for connecting to a given path\n+   *\n+   * @param path The absolute server path of the api (ie. /d2l/api/versions/)\n+   * @param httpMethod The http method to access the url with (GET,POST,etc.)\n+   * @param timestampSeconds\n+   * @return\n+   */\n+  private static String formatSignature(String path, String httpMethod, long timestampSeconds) {\n+    return httpMethod.toUpperCase()\n+        + \"&\"\n+        + URI.create(path).getPath().toLowerCase()\n+        + \"&\"\n+        + timestampSeconds;\n+  }\n+\n+  /**\n+   * Returns the timestamp returned by the server if the time between the request and when the\n+   * server received it is too large\n+   *\n+   * @param timestampMessage The message returned by the D2L Server\n+   * @return The timestamp returned by the server or 0 if no timestamp returned\n+   */\n+  private long tryParseTimestamp(String timestampMessage) {\n+    long result;\n+    Pattern p = Pattern.compile(\"Timestamp out of range\\\\r*\\\\n*\\\\s*(([0-9]+))\");", "originalCommit": "8f693dddaba1f14da45f398671bb9924b3367eb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0ODk3Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443948977", "bodyText": "Ended up removing the class entirely.", "author": "cbeach47", "createdAt": "2020-06-23T04:05:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1MDc0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "446bdcf57aa6e5837536d6eaf1640aba620f27a3", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java\ndeleted file mode 100644\nindex 36ebf3d68..000000000\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/BlackboardRestUserContext.java\n+++ /dev/null\n\n@@ -1,239 +0,0 @@\n-/*\n- * Licensed to The Apereo Foundation under one or more contributor license\n- * agreements. See the NOTICE file distributed with this work for additional\n- * information regarding copyright ownership.\n- *\n- * The Apereo Foundation licenses this file to you under the Apache License,\n- * Version 2.0, (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.tle.core.connectors.blackboard;\n-\n-// TODO If this works for Bb, consider refactoring into a general class\n-import com.google.common.base.Strings;\n-import com.tle.core.connectors.brightspace.D2LSigner;\n-import java.io.Serializable;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-/** TODO - this was taken from the D2L logic. May not need everything... */\n-public class BlackboardRestUserContext implements Serializable {\n-  private final String instanceUrl;\n-  private final String appId;\n-  private final String appKey;\n-  private final String userId;\n-  private final String userKey;\n-\n-  private long _serverSkewMillis;\n-\n-  private static final String APP_ID_PARAMETER = \"x_a\";\n-  private static final String USER_ID_PARAMETER = \"x_b\";\n-  private static final String SIGNATURE_BY_APP_KEY_PARAMETER = \"x_c\";\n-  private static final String SIGNATURE_BY_USER_KEY_PARAMETER = \"x_d\";\n-  private static final String TIMESTAMP_PARAMETER = \"x_t\";\n-\n-  /** Returned when no result can be identified or as an unitialized value. Val=0x00; */\n-  public final int RESULT_UNKNOWN = 0x00;\n-\n-  /** Returned when result 200 okay. Val=0x01 */\n-  public final int RESULT_OKAY = 0x01;\n-\n-  /**\n-   * Returned when the signature or id was invalid, typically this should trigger a\n-   * reauthentication. Val=0x02\n-   */\n-  public final int RESULT_INVALID_SIG = 0x02;\n-\n-  /**\n-   * Returned if the timestamp was outside of the validity window, this indicates clocks are skewed.\n-   * The handleResult message automatically corrects the clock so on receiving this message callers\n-   * typically should retry the same operation. Val=0x03\n-   */\n-  public final int RESULT_INVALID_TIMESTAMP = 0x03;\n-\n-  /**\n-   * Returned if the requested operation is not allowed, typically user should be prompted that they\n-   * need to request different permissions from the administrator. Val = 0x04\n-   */\n-  public final int RESULT_NO_PERMISSION = 0x04;\n-\n-  /**\n-   * Creates a User Context with the provided parameters\n-   *\n-   * @param url the url of the D2Linstance\n-   * @param appId the Application Id\n-   * @param appKey The Application Key\n-   * @param userId the User Id\n-   * @param userKey the User Key\n-   */\n-  public BlackboardRestUserContext(\n-      String url, String appId, String appKey, String userId, String userKey) {\n-    this.instanceUrl = url;\n-    this.appId = appId;\n-    this.appKey = appKey;\n-    this.userId = userId;\n-    this.userKey = userKey;\n-  }\n-\n-  public String getUserId() {\n-    return userId;\n-  }\n-\n-  public String getUserKey() {\n-    return userKey;\n-  }\n-\n-  public long getServerSkewMillis() {\n-    return _serverSkewMillis;\n-  }\n-\n-  public void setServerSkewMillis(long _serverSkewMillis) {\n-    this._serverSkewMillis = _serverSkewMillis;\n-  }\n-\n-  public URI createAuthenticatedUri(String path, String httpMethod) {\n-    int split = path.indexOf(\"?\");\n-    String query = \"\";\n-    if (split >= 0) {\n-      query = path.substring(split + 1);\n-      path = path.substring(0, split);\n-    }\n-    String queryString = getQueryString(path, query, httpMethod);\n-    try {\n-      URI uri = new URI(instanceUrl + path + queryString);\n-      return uri;\n-    } catch (URISyntaxException e) {\n-      e.printStackTrace();\n-      return null;\n-    }\n-  }\n-\n-  public boolean calculateServerSkewFromResponse(String responseBody) {\n-    long serverTimestampSeconds = tryParseTimestamp(responseBody);\n-    if (serverTimestampSeconds > 0) {\n-      long clientTimestampMilliseconds = System.currentTimeMillis();\n-      _serverSkewMillis = serverTimestampSeconds * 1000 - clientTimestampMilliseconds;\n-      return true;\n-    }\n-    return false;\n-  }\n-\n-  /**\n-   * Constructs the query string with the appropriate parameters for authentication with the D2L\n-   * authentication system.\n-   *\n-   * @param signature The signature based on the path, http method and time\n-   * @param timestamp The timestamp for the query string\n-   * @return A query string with the relevant authentication parameters\n-   */\n-  private String buildAuthenticatedUriQueryString(String signature, long timestamp) {\n-    String queryString = \"?\" + APP_ID_PARAMETER + \"=\" + appId;\n-    if (getUserId() != null) {\n-      queryString += \"&\" + USER_ID_PARAMETER + \"=\" + getUserId();\n-    }\n-    queryString += \"&\" + SIGNATURE_BY_APP_KEY_PARAMETER;\n-    queryString += \"=\" + D2LSigner.getBase64HashString(appKey, signature);\n-    if (getUserId() != null) {\n-      queryString += \"&\" + SIGNATURE_BY_USER_KEY_PARAMETER;\n-      queryString += \"=\" + D2LSigner.getBase64HashString(getUserKey(), signature);\n-    }\n-    queryString += \"&\" + TIMESTAMP_PARAMETER + \"=\" + timestamp;\n-    return queryString;\n-  }\n-\n-  /**\n-   * Provides the unix timestamp adjusted for the approximate delay between the D2L server and\n-   * client\n-   *\n-   * @return The unix timestamp adjusted for the approximate delay between the D2L server and client\n-   */\n-  private long getAdjustedTimestampInSeconds() {\n-    long timestampMilliseconds = System.currentTimeMillis();\n-    long adjustedTimestampSeconds = (timestampMilliseconds + _serverSkewMillis) / 1000;\n-    return adjustedTimestampSeconds;\n-  }\n-\n-  /**\n-   * Constructs the query string with the appropriate parameters for authentication with the D2L\n-   * authentication system.\n-   *\n-   * @param path The absolute server path of the api (ie. /d2l/api/versions/)\n-   * @param httpMethod The http method to access the url with (GET,POST,etc.)\n-   * @return The query string with the appropriate parameters for authentication\n-   */\n-  private String getQueryString(String path, String query, String httpMethod) {\n-    long adjustedTimestampSeconds = getAdjustedTimestampInSeconds();\n-    String signature = formatSignature(path, httpMethod, adjustedTimestampSeconds);\n-    String queryString = buildAuthenticatedUriQueryString(signature, adjustedTimestampSeconds);\n-\n-    if (!Strings.isNullOrEmpty(query)) {\n-      queryString += \"&\" + query;\n-    }\n-    return queryString;\n-  }\n-\n-  /**\n-   * Creates a signature formatted to the D2L specifications for connecting to a given path\n-   *\n-   * @param path The absolute server path of the api (ie. /d2l/api/versions/)\n-   * @param httpMethod The http method to access the url with (GET,POST,etc.)\n-   * @param timestampSeconds\n-   * @return\n-   */\n-  private static String formatSignature(String path, String httpMethod, long timestampSeconds) {\n-    return httpMethod.toUpperCase()\n-        + \"&\"\n-        + URI.create(path).getPath().toLowerCase()\n-        + \"&\"\n-        + timestampSeconds;\n-  }\n-\n-  /**\n-   * Returns the timestamp returned by the server if the time between the request and when the\n-   * server received it is too large\n-   *\n-   * @param timestampMessage The message returned by the D2L Server\n-   * @return The timestamp returned by the server or 0 if no timestamp returned\n-   */\n-  private long tryParseTimestamp(String timestampMessage) {\n-    long result;\n-    Pattern p = Pattern.compile(\"Timestamp out of range\\\\r*\\\\n*\\\\s*(([0-9]+))\");\n-\n-    Matcher m = p.matcher(timestampMessage);\n-    boolean match = m.matches();\n-\n-    if (match && m.groupCount() >= 2) {\n-      result = Long.parseLong(m.group(1));\n-      return result;\n-    }\n-    result = 0;\n-    return result;\n-  }\n-\n-  public int interpretResult(int resultCode, String responseBody) {\n-    if (resultCode == 200) {\n-      return RESULT_OKAY;\n-    } else if (resultCode == 403) {\n-      if (calculateServerSkewFromResponse(responseBody)) {\n-        return RESULT_INVALID_TIMESTAMP;\n-      } else if (responseBody.toLowerCase().equals(\"invalid token\")\n-          || responseBody.toLowerCase().equals(\"token expired\")) {\n-        return RESULT_INVALID_SIG;\n-      } else {\n-        return RESULT_NO_PERMISSION;\n-      }\n-    }\n-    return RESULT_UNKNOWN;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1MzY1NA==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440553654", "bodyText": "Is it possible to reuse this class com.tle.web.oauth.response.ErrorResponse?", "author": "PenghaiZhang", "createdAt": "2020-06-16T02:41:50Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/beans/ErrorResponse.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.connectors.blackboard.beans;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlRootElement\n+public class ErrorResponse {", "originalCommit": "8f693dddaba1f14da45f398671bb9924b3367eb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0ODk1MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443948950", "bodyText": "good catch.  Switched out for the OAuth class, and removed the Bb class.", "author": "cbeach47", "createdAt": "2020-06-23T04:05:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1MzY1NA=="}], "type": "inlineReview", "revised_code": {"commit": "446bdcf57aa6e5837536d6eaf1640aba620f27a3", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/beans/ErrorResponse.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/beans/ErrorResponse.java\ndeleted file mode 100644\nindex 5d681ec59..000000000\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/beans/ErrorResponse.java\n+++ /dev/null\n\n@@ -1,48 +0,0 @@\n-/*\n- * Licensed to The Apereo Foundation under one or more contributor license\n- * agreements. See the NOTICE file distributed with this work for additional\n- * information regarding copyright ownership.\n- *\n- * The Apereo Foundation licenses this file to you under the Apache License,\n- * Version 2.0, (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.tle.core.connectors.blackboard.beans;\n-\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import javax.xml.bind.annotation.XmlRootElement;\n-\n-@XmlRootElement\n-public class ErrorResponse {\n-\n-  @JsonProperty(\"error\")\n-  private String error;\n-\n-  @JsonProperty(\"error_description\")\n-  private String errorDescription;\n-\n-  public String getError() {\n-    return error;\n-  }\n-\n-  public void setError(String error) {\n-    this.error = error;\n-  }\n-\n-  public String getErrorDescription() {\n-    return errorDescription;\n-  }\n-\n-  public void setErrorDescription(String errorDescription) {\n-    this.errorDescription = errorDescription;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1NDQ5OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440554499", "bodyText": "Can we have a brief description for these numbers (what do they do)?", "author": "PenghaiZhang", "createdAt": "2020-06-16T02:45:08Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java", "diffHunk": "@@ -80,15 +84,19 @@\n   private static final String KEY_PFX =\n       AbstractPluginService.getMyPluginId(BlackboardRESTConnectorService.class) + \".\";\n \n-  private static final String API_ROOT = \"/learn/api/public/v1\";\n+  private static final String API_ROOT_V1 = \"/learn/api/public/v1/\";\n+  private static final String API_ROOT_V3 = \"/learn/api/public/v3/\";\n+\n+  private static final byte[] SHAREPASS =\n+      new byte[] {45, 123, -112, 2, 89, 124, 19, 74, 0, 24, -118, 98, 5, 100, 92, 7};", "originalCommit": "8f693dddaba1f14da45f398671bb9924b3367eb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0ODkyNg==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443948926", "bodyText": "I added some comments in the code, and changed the values to prove they are arbitrary:\n// Used to encrypt and decrypt state information (such as connector uuid) \n// during the integration flows. Actual values are not important.", "author": "cbeach47", "createdAt": "2020-06-23T04:05:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1NDQ5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "446bdcf57aa6e5837536d6eaf1640aba620f27a3", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java\nindex 0a151f368..e9004cf58 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/connectors/blackboard/service/impl/BlackboardRESTConnectorServiceImpl.java\n\n@@ -87,8 +87,11 @@ public class BlackboardRESTConnectorServiceImpl extends AbstractIntegrationConne\n   private static final String API_ROOT_V1 = \"/learn/api/public/v1/\";\n   private static final String API_ROOT_V3 = \"/learn/api/public/v3/\";\n \n+  // Used to encrypt and decrypt state information (such as connector uuid)\n+  // during the integration flows. Actual values are not important.\n+  // TODO expose as a user configuration.\n   private static final byte[] SHAREPASS =\n-      new byte[] {45, 123, -112, 2, 89, 124, 19, 74, 0, 24, -118, 98, 5, 100, 92, 7};\n+      new byte[] {45, 12, -112, 2, 89, 97, 19, 74, 0, 24, -118, -2, 5, 108, 92, 7};\n   private static final IvParameterSpec INITVEC = new IvParameterSpec(\"thisis16byteslog\".getBytes());\n \n   @Inject private HttpService httpService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1ODQ1Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440558457", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setShowNewTabLauncher(boolean b) {\n          \n          \n            \n                public void setShowNewTabLauncher(boolean showNewTabLauncher) {", "author": "PenghaiZhang", "createdAt": "2020-06-16T03:01:17Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/connectors/dialog/LMSAuthDialog.java", "diffHunk": "@@ -157,5 +177,21 @@ public String getAuthUrl() {\n     public void setAuthUrl(String authUrl) {\n       this.authUrl = authUrl;\n     }\n+\n+    public void setShowNewTabLauncher(boolean b) {", "originalCommit": "8f693dddaba1f14da45f398671bb9924b3367eb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0ODg5Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443948896", "bodyText": "done (via a different commit)", "author": "cbeach47", "createdAt": "2020-06-23T04:04:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1ODQ1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "446bdcf57aa6e5837536d6eaf1640aba620f27a3", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/web/connectors/dialog/LMSAuthDialog.java b/Source/Plugins/Core/com.equella.core/src/com/tle/web/connectors/dialog/LMSAuthDialog.java\nindex 56956aeaa..a9f923e75 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/web/connectors/dialog/LMSAuthDialog.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/web/connectors/dialog/LMSAuthDialog.java\n\n@@ -178,8 +178,8 @@ public class LMSAuthDialog extends AbstractOkayableDialog<LMSAuthDialog.Model> {\n       this.authUrl = authUrl;\n     }\n \n-    public void setShowNewTabLauncher(boolean b) {\n-      this.showNewTabLauncher = b;\n+    public void setShowNewTabLauncher(boolean showNewTabLauncher) {\n+      this.showNewTabLauncher = showNewTabLauncher;\n     }\n \n     public boolean isShowNewTabLauncher() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4NDIzMw==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r440984233", "bodyText": "Could this be given a more descriptive name?\nMaybe oauthReq?", "author": "ChristianMurphy", "createdAt": "2020-06-16T16:28:39Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/connectors/blackboard/servlet/BlackboardRestOauthSignonServlet.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.web.connectors.blackboard.servlet;\n+\n+import com.dytech.devlib.Base64;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.base.Throwables;\n+import com.tle.annotation.NonNullByDefault;\n+import com.tle.common.PathUtils;\n+import com.tle.common.connectors.entity.Connector;\n+import com.tle.core.connectors.blackboard.BlackboardRESTConnectorConstants;\n+import com.tle.core.connectors.blackboard.beans.ErrorResponse;\n+import com.tle.core.connectors.blackboard.beans.Token;\n+import com.tle.core.connectors.blackboard.service.BlackboardRESTConnectorService;\n+import com.tle.core.connectors.service.ConnectorService;\n+import com.tle.core.encryption.EncryptionService;\n+import com.tle.core.guice.Bind;\n+import com.tle.core.institution.InstitutionService;\n+import com.tle.core.services.HttpService;\n+import com.tle.core.services.http.Request;\n+import com.tle.core.services.http.Response;\n+import com.tle.core.services.user.UserSessionService;\n+import com.tle.core.settings.service.ConfigurationService;\n+import com.tle.exceptions.AuthenticationException;\n+import java.io.IOException;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.log4j.Logger;\n+\n+/** Served up at /blackboardrestauth */\n+@SuppressWarnings(\"nls\")\n+@NonNullByDefault\n+@Bind\n+@Singleton\n+public class BlackboardRestOauthSignonServlet extends HttpServlet {\n+  private static final String STATE_CALLBACK_PARAMETER = \"state\";\n+\n+  private static final Logger LOGGER = Logger.getLogger(BlackboardRestOauthSignonServlet.class);\n+  @Inject private HttpService httpService;\n+  @Inject private ConnectorService connectorService;\n+  @Inject private EncryptionService encryptionService;\n+  @Inject private ConfigurationService configService;\n+  @Inject private UserSessionService sessionService;\n+  @Inject private BlackboardRESTConnectorService blackboardRestConnectorService;\n+  @Inject private InstitutionService institutionService;\n+\n+  private static final ObjectMapper jsonMapper = new ObjectMapper();\n+\n+  @Override\n+  protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n+      throws ServletException, IOException {\n+    LOGGER.trace(\"Requesting OAuth Sign-on\");\n+    String postfixKey = \"\";\n+    String connectorUuid = \"\";\n+    String forwardUrl = null;\n+    String state = req.getParameter(STATE_CALLBACK_PARAMETER);\n+\n+    if (state != null) {\n+      ObjectNode stateJson =\n+          (ObjectNode) new ObjectMapper().readTree(blackboardRestConnectorService.decrypt(state));\n+      JsonNode forwardUrlNode =\n+          stateJson.get(BlackboardRESTConnectorConstants.STATE_KEY_FORWARD_URL);\n+      if (forwardUrlNode != null) {\n+        forwardUrl = forwardUrlNode.asText();\n+      }\n+\n+      JsonNode postfixKeyNode =\n+          stateJson.get(BlackboardRESTConnectorConstants.STATE_KEY_POSTFIX_KEY);\n+      if (postfixKeyNode != null) {\n+        postfixKey = postfixKeyNode.asText();\n+      }\n+\n+      JsonNode connectorUuidNode = stateJson.get(\"connectorUuid\");\n+      if (connectorUuidNode != null) {\n+        connectorUuid = connectorUuidNode.asText();\n+      }\n+    }\n+    String code = req.getParameter(\"code\");\n+    sessionService.setAttribute(BlackboardRESTConnectorConstants.SESSION_CODE + postfixKey, code);\n+\n+    // Ask for the token.\n+    final Connector connector = connectorService.getByUuid(connectorUuid);\n+    final String apiKey = connector.getAttribute(BlackboardRESTConnectorConstants.FIELD_API_KEY);\n+    final String apiSecret =\n+        encryptionService.decrypt(\n+            connector.getAttribute(BlackboardRESTConnectorConstants.FIELD_API_SECRET));\n+    final String b64 =\n+        new Base64()\n+            .encode((apiKey + \":\" + apiSecret).getBytes())\n+            .replace(\"\\n\", \"\")\n+            .replace(\"\\r\", \"\");\n+\n+    final Request req2 =", "originalCommit": "8f693dddaba1f14da45f398671bb9924b3367eb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0ODgxMg==", "url": "https://github.com/openequella/openEQUELLA/pull/1781#discussion_r443948812", "bodyText": "done", "author": "cbeach47", "createdAt": "2020-06-23T04:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4NDIzMw=="}], "type": "inlineReview", "revised_code": {"commit": "446bdcf57aa6e5837536d6eaf1640aba620f27a3", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/web/connectors/blackboard/servlet/BlackboardRestOauthSignonServlet.java b/Source/Plugins/Core/com.equella.core/src/com/tle/web/connectors/blackboard/servlet/BlackboardRestOauthSignonServlet.java\nindex cc8bd8629..3ad327eff 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/web/connectors/blackboard/servlet/BlackboardRestOauthSignonServlet.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/web/connectors/blackboard/servlet/BlackboardRestOauthSignonServlet.java\n\n@@ -27,7 +27,6 @@ import com.tle.annotation.NonNullByDefault;\n import com.tle.common.PathUtils;\n import com.tle.common.connectors.entity.Connector;\n import com.tle.core.connectors.blackboard.BlackboardRESTConnectorConstants;\n-import com.tle.core.connectors.blackboard.beans.ErrorResponse;\n import com.tle.core.connectors.blackboard.beans.Token;\n import com.tle.core.connectors.blackboard.service.BlackboardRESTConnectorService;\n import com.tle.core.connectors.service.ConnectorService;\n"}}, {"oid": "446bdcf57aa6e5837536d6eaf1640aba620f27a3", "url": "https://github.com/openequella/openEQUELLA/commit/446bdcf57aa6e5837536d6eaf1640aba620f27a3", "message": "#819 tighten up code", "committedDate": "2020-06-23T04:02:18Z", "type": "commit"}]}