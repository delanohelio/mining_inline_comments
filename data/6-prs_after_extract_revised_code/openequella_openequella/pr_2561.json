{"pr_number": 2561, "pr_title": "Make pdf extraction safe", "pr_createdAt": "2020-11-27T01:07:28Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/2561", "timeline": [{"oid": "edec82254513a39983da59edb71cf63c1c7adad5", "url": "https://github.com/openequella/openEQUELLA/commit/edec82254513a39983da59edb71cf63c1c7adad5", "message": "Add indexing error column migration", "committedDate": "2020-11-24T01:07:12Z", "type": "commit"}, {"oid": "bd4cf75f0a62429e0dbcc9a064388b5a5190e19e", "url": "https://github.com/openequella/openEQUELLA/commit/bd4cf75f0a62429e0dbcc9a064388b5a5190e19e", "message": "Add new value to Attachment types", "committedDate": "2020-11-24T01:08:50Z", "type": "commit"}, {"oid": "724317b3a89d130b7ae99329aa02cc4c75807f47", "url": "https://github.com/openequella/openEQUELLA/commit/724317b3a89d130b7ae99329aa02cc4c75807f47", "message": "Set error flag when timeout occurs", "committedDate": "2020-11-24T01:09:43Z", "type": "commit"}, {"oid": "5360e761d85d89ec7ff348f38d1c2cc8dfd9d200", "url": "https://github.com/openequella/openEQUELLA/commit/5360e761d85d89ec7ff348f38d1c2cc8dfd9d200", "message": "Set Propagation to REQUIRED\n\nMANDATORY requires a transaction to already exist before running, or it will error out.\nREQUIRED uses an existing transaction if there is one, but if there isn't it will create\none.", "committedDate": "2020-11-24T01:11:50Z", "type": "commit"}, {"oid": "457659427acc8ed85d2001467311b0238afe28fc", "url": "https://github.com/openequella/openEQUELLA/commit/457659427acc8ed85d2001467311b0238afe28fc", "message": "Add Migration", "committedDate": "2020-11-24T01:15:23Z", "type": "commit"}, {"oid": "2735e36fb9614a07d5ccfab97c3488cca10fe856", "url": "https://github.com/openequella/openEQUELLA/commit/2735e36fb9614a07d5ccfab97c3488cca10fe856", "message": "Add throws to method signatures", "committedDate": "2020-11-24T01:17:42Z", "type": "commit"}, {"oid": "f15e2c6c6333722d4d90dbc3f42babbade6a13e3", "url": "https://github.com/openequella/openEQUELLA/commit/f15e2c6c6333722d4d90dbc3f42babbade6a13e3", "message": "Add indexing error column migration", "committedDate": "2020-11-27T00:46:02Z", "type": "commit"}, {"oid": "94625bef9197f0ded92a74f88fa2c9b541a02030", "url": "https://github.com/openequella/openEQUELLA/commit/94625bef9197f0ded92a74f88fa2c9b541a02030", "message": "Add new value to Attachment types", "committedDate": "2020-11-27T00:46:02Z", "type": "commit"}, {"oid": "bbc6854b5b514a27c9e6fea8bab0b37a50b20b6c", "url": "https://github.com/openequella/openEQUELLA/commit/bbc6854b5b514a27c9e6fea8bab0b37a50b20b6c", "message": "Set error flag when timeout occurs", "committedDate": "2020-11-27T00:46:02Z", "type": "commit"}, {"oid": "0ccb1625702115ab367662fc79922e38624e3eac", "url": "https://github.com/openequella/openEQUELLA/commit/0ccb1625702115ab367662fc79922e38624e3eac", "message": "Set Propagation to REQUIRED\n\nMANDATORY requires a transaction to already exist before running, or it will error out.\nREQUIRED uses an existing transaction if there is one, but if there isn't it will create\none.", "committedDate": "2020-11-27T00:46:02Z", "type": "commit"}, {"oid": "83f0981ab9c307eda2255220cee2cc88ef3af421", "url": "https://github.com/openequella/openEQUELLA/commit/83f0981ab9c307eda2255220cee2cc88ef3af421", "message": "Add Migration", "committedDate": "2020-11-27T00:46:02Z", "type": "commit"}, {"oid": "6b6c1a8715159c4cef60c306736e9780ba610588", "url": "https://github.com/openequella/openEQUELLA/commit/6b6c1a8715159c4cef60c306736e9780ba610588", "message": "Add throws to method signatures", "committedDate": "2020-11-27T00:46:02Z", "type": "commit"}, {"oid": "76b8b68acc3f43f9d76a06a49d90920d0c39afa3", "url": "https://github.com/openequella/openEQUELLA/commit/76b8b68acc3f43f9d76a06a49d90920d0c39afa3", "message": "Merge branch 'bugfix/make_pdf_extraction_safe' of github.com:SammyIsConfused/openEQUELLA into bugfix/make_pdf_extraction_safe", "committedDate": "2020-11-27T00:46:28Z", "type": "commit"}, {"oid": "302200fd9fed34fc3084d65635188ecb32cc8e3c", "url": "https://github.com/openequella/openEQUELLA/commit/302200fd9fed34fc3084d65635188ecb32cc8e3c", "message": "Add license header and start migration filename with a capital letter", "committedDate": "2020-11-27T05:36:50Z", "type": "commit"}, {"oid": "eaf9ccee2e2ca15c21a4fadd2bcd827c9f852988", "url": "https://github.com/openequella/openEQUELLA/commit/eaf9ccee2e2ca15c21a4fadd2bcd827c9f852988", "message": "Simplify runnable", "committedDate": "2020-11-27T23:25:51Z", "type": "commit"}, {"oid": "89770a34ae42f750e039229c43495fa7b9ddb7e0", "url": "https://github.com/openequella/openEQUELLA/commit/89770a34ae42f750e039229c43495fa7b9ddb7e0", "message": "Use function to kill Linux process and subprocesses", "committedDate": "2020-11-28T05:32:28Z", "type": "commit"}, {"oid": "b3f4215f4c8447f40679be1394b670b8028133f6", "url": "https://github.com/openequella/openEQUELLA/commit/b3f4215f4c8447f40679be1394b670b8028133f6", "message": "Revert \"Use function to kill Linux process and subprocesses\"\n\nThis reverts commit 89770a34ae42f750e039229c43495fa7b9ddb7e0. Best suited to its own PR.", "committedDate": "2020-11-29T22:08:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMDY3OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r533010679", "bodyText": "Although not done historically, for the new stuff we add JavaDoc to help our future selves. Please add.", "author": "edalex-ian", "createdAt": "2020-12-01T01:21:44Z", "path": "Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/IAttachment.java", "diffHunk": "@@ -67,4 +67,8 @@\n   boolean isRestricted();\n \n   IItem<?> getItem();\n+\n+  boolean isErroredIndexing();", "originalCommit": "b3f4215f4c8447f40679be1394b670b8028133f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ced7454cd231c14d77d6a59a28fab7253178ec2", "chunk": "diff --git a/Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/IAttachment.java b/Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/IAttachment.java\nindex 7c7649b1c..65dbbef9c 100644\n--- a/Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/IAttachment.java\n+++ b/Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/IAttachment.java\n\n@@ -68,7 +68,27 @@ public interface IAttachment {\n \n   IItem<?> getItem();\n \n+  /**\n+   * This value gets set to true when an attachment attempts to index and times out, which indicates\n+   * a problem with the file. Used to avoid instability issues caused by attempting to index a\n+   * broken file indefinitely.\n+   *\n+   * <p>The timeout is controlled by textExtracter.parseDurationCap in milliseconds in the\n+   * plugins/com.tle.core.freetext/optional.properties file. The default is 60000.\n+   *\n+   * <p>Stored in the attachment table in the errored_when_indexing column. Column was initially\n+   * added via com.tle.core.institution.migration.v20202.AddIndexingErrorColumnMigration.\n+   *\n+   * @see com.tle.core.institution.migration.v20202\n+   * @return Returns true if the attachment failed to index previously\n+   */\n   boolean isErroredIndexing();\n \n+  /**\n+   * Sets the value of erroredIndexing. If set to true and updated in the database, then the\n+   * attachment will be skipped for indexing in future.\n+   *\n+   * @param erroredIndexing The value to set erroredIndexing to\n+   */\n   void setErroredIndexing(boolean erroredIndexing);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMTYyMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r533011621", "bodyText": "Please JavaDoc - even if it's a @see to IAttachment matching method.", "author": "edalex-ian", "createdAt": "2020-12-01T01:24:51Z", "path": "Source/Plugins/Core/com.equella.base/src/com/tle/web/api/item/interfaces/beans/AttachmentBean.java", "diffHunk": "@@ -65,4 +66,12 @@ public boolean isPreview() {\n   public void setPreview(boolean preview) {\n     this.preview = preview;\n   }\n+\n+  public boolean isErroredIndexing() {", "originalCommit": "b3f4215f4c8447f40679be1394b670b8028133f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ced7454cd231c14d77d6a59a28fab7253178ec2", "chunk": "diff --git a/Source/Plugins/Core/com.equella.base/src/com/tle/web/api/item/interfaces/beans/AttachmentBean.java b/Source/Plugins/Core/com.equella.base/src/com/tle/web/api/item/interfaces/beans/AttachmentBean.java\nindex cacbf8a3b..ac0d8812b 100644\n--- a/Source/Plugins/Core/com.equella.base/src/com/tle/web/api/item/interfaces/beans/AttachmentBean.java\n+++ b/Source/Plugins/Core/com.equella.base/src/com/tle/web/api/item/interfaces/beans/AttachmentBean.java\n\n@@ -67,10 +67,18 @@ public abstract class AttachmentBean extends AbstractExtendableBean {\n     this.preview = preview;\n   }\n \n+  /**\n+   * @see com.tle.beans.item.attachments.IAttachment#isErroredIndexing\n+   * @return The value of erroredIndexing\n+   */\n   public boolean isErroredIndexing() {\n     return erroredIndexing;\n   }\n \n+  /**\n+   * @see com.tle.beans.item.attachments.IAttachment#setErroredIndexing\n+   * @param erroredIndexing The value to set erroredIndexing to\n+   */\n   public void setErroredIndexing(boolean erroredIndexing) {\n     this.erroredIndexing = erroredIndexing;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMzQwOA==", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r533013408", "bodyText": "Being in Java 8 land, best to now go with an anonymous lambda rather than an anonymous class and all its overhead.", "author": "edalex-ian", "createdAt": "2020-12-01T01:30:00Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/freetext/extracter/standard/PdfExtracter.java", "diffHunk": "@@ -50,25 +56,34 @@ public boolean isSupportedByDefault(MimeEntry mimeEntry) {\n   @Override\n   public void extractText(\n       String mimeType, InputStream input, StringBuilder outputText, int maxSize, long parseDuration)\n-      throws IOException {\n+      throws IOException, InterruptedException, ExecutionException, TimeoutException {\n     WriteOutContentHandler wrapped = new WriteOutContentHandler(maxSize);\n     ContentHandler handler = new CappedBodyContentHandler(wrapped, parseDuration);\n-    try {\n-      Metadata meta = new Metadata();\n-      Parser parser = new AutoDetectParser(new TikaConfig(getClass().getClassLoader()));\n-      parser.parse(input, handler, meta, new ParseContext());\n+    Runnable runnableParse =\n+        new Runnable() {", "originalCommit": "b3f4215f4c8447f40679be1394b670b8028133f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "31238c2c77e11e4e7f63d6f21c0845f11bb31a56", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/freetext/extracter/standard/PdfExtracter.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/freetext/extracter/standard/PdfExtracter.java\nindex 285f3792d..21a8f4887 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/freetext/extracter/standard/PdfExtracter.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/freetext/extracter/standard/PdfExtracter.java\n\n@@ -60,24 +60,21 @@ public class PdfExtracter extends AbstractTextExtracterExtension {\n     WriteOutContentHandler wrapped = new WriteOutContentHandler(maxSize);\n     ContentHandler handler = new CappedBodyContentHandler(wrapped, parseDuration);\n     Runnable runnableParse =\n-        new Runnable() {\n-          @Override\n-          public void run() {\n-            try {\n-              Metadata meta = new Metadata();\n-              Parser parser = new AutoDetectParser(new TikaConfig(getClass().getClassLoader()));\n-              parser.parse(input, handler, meta, new ParseContext());\n+        () -> {\n+          try {\n+            Metadata meta = new Metadata();\n+            Parser parser = new AutoDetectParser(new TikaConfig(getClass().getClassLoader()));\n+            parser.parse(input, handler, meta, new ParseContext());\n \n+            appendText(handler, outputText, maxSize);\n+          } catch (Exception t) {\n+            if (wrapped.isWriteLimitReached(t)) {\n+              // keep going\n+              LOGGER.info(\"PDF size limit reached.  Indexing truncated text\");\n               appendText(handler, outputText, maxSize);\n-            } catch (Exception t) {\n-              if (wrapped.isWriteLimitReached(t)) {\n-                // keep going\n-                LOGGER.info(\"PDF size limit reached.  Indexing truncated text\");\n-                appendText(handler, outputText, maxSize);\n-                return;\n-              }\n-              throw Throwables.propagate(t);\n+              return;\n             }\n+            throw Throwables.propagate(t);\n           }\n         };\n     ExecutorService executor = Executors.newSingleThreadExecutor();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxOTk5MA==", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r533019990", "bodyText": "It could be good to add a catch for InterruptException to capture when it's terminated early (or by other unforeseen interrupts). \ud83e\udd14", "author": "edalex-ian", "createdAt": "2020-12-01T01:50:29Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/freetext/extracter/standard/PdfExtracter.java", "diffHunk": "@@ -50,25 +56,34 @@ public boolean isSupportedByDefault(MimeEntry mimeEntry) {\n   @Override\n   public void extractText(\n       String mimeType, InputStream input, StringBuilder outputText, int maxSize, long parseDuration)\n-      throws IOException {\n+      throws IOException, InterruptedException, ExecutionException, TimeoutException {\n     WriteOutContentHandler wrapped = new WriteOutContentHandler(maxSize);\n     ContentHandler handler = new CappedBodyContentHandler(wrapped, parseDuration);\n-    try {\n-      Metadata meta = new Metadata();\n-      Parser parser = new AutoDetectParser(new TikaConfig(getClass().getClassLoader()));\n-      parser.parse(input, handler, meta, new ParseContext());\n+    Runnable runnableParse =\n+        new Runnable() {\n+          @Override\n+          public void run() {\n+            try {\n+              Metadata meta = new Metadata();\n+              Parser parser = new AutoDetectParser(new TikaConfig(getClass().getClassLoader()));\n+              parser.parse(input, handler, meta, new ParseContext());\n \n-      appendText(handler, outputText, maxSize);\n-\n-    } catch (Exception t) {\n-      if (wrapped.isWriteLimitReached(t)) {\n-        // keep going\n-        LOGGER.debug(\"PDF size limit reached.  Indexing truncated text\");\n-        appendText(handler, outputText, maxSize);\n-        return;\n-      }\n-      throw Throwables.propagate(t);\n-    }\n+              appendText(handler, outputText, maxSize);\n+            } catch (Exception t) {", "originalCommit": "b3f4215f4c8447f40679be1394b670b8028133f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgzMTM2Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r533831367", "bodyText": "The InterruptedException isn't actually thrown here - it's thrown by future.get. So I surrounded that with try/catch and logged the InterruptedException/TimeoutException/ExecutionException that can throw. Then I rethrew so that the indexerThread can catch it further up where it sets the erroredIndexing flag.", "author": "SammyIsConfused", "createdAt": "2020-12-02T01:17:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxOTk5MA=="}], "type": "inlineReview", "revised_code": {"commit": "31238c2c77e11e4e7f63d6f21c0845f11bb31a56", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/freetext/extracter/standard/PdfExtracter.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/freetext/extracter/standard/PdfExtracter.java\nindex 285f3792d..21a8f4887 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/freetext/extracter/standard/PdfExtracter.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/freetext/extracter/standard/PdfExtracter.java\n\n@@ -60,24 +60,21 @@ public class PdfExtracter extends AbstractTextExtracterExtension {\n     WriteOutContentHandler wrapped = new WriteOutContentHandler(maxSize);\n     ContentHandler handler = new CappedBodyContentHandler(wrapped, parseDuration);\n     Runnable runnableParse =\n-        new Runnable() {\n-          @Override\n-          public void run() {\n-            try {\n-              Metadata meta = new Metadata();\n-              Parser parser = new AutoDetectParser(new TikaConfig(getClass().getClassLoader()));\n-              parser.parse(input, handler, meta, new ParseContext());\n+        () -> {\n+          try {\n+            Metadata meta = new Metadata();\n+            Parser parser = new AutoDetectParser(new TikaConfig(getClass().getClassLoader()));\n+            parser.parse(input, handler, meta, new ParseContext());\n \n+            appendText(handler, outputText, maxSize);\n+          } catch (Exception t) {\n+            if (wrapped.isWriteLimitReached(t)) {\n+              // keep going\n+              LOGGER.info(\"PDF size limit reached.  Indexing truncated text\");\n               appendText(handler, outputText, maxSize);\n-            } catch (Exception t) {\n-              if (wrapped.isWriteLimitReached(t)) {\n-                // keep going\n-                LOGGER.info(\"PDF size limit reached.  Indexing truncated text\");\n-                appendText(handler, outputText, maxSize);\n-                return;\n-              }\n-              throw Throwables.propagate(t);\n+              return;\n             }\n+            throw Throwables.propagate(t);\n           }\n         };\n     ExecutorService executor = Executors.newSingleThreadExecutor();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyMDk4Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r533020982", "bodyText": "Bringing in an ExecutorService etc. seems rather heavy handed for a single thread. How about just going with:\nThread extractThread = new Thread(() -> { ... }, \"ExtractThread\");\nextractThread.join(parseDuration);\nextractThread.interrupt();\nI'm assuming that interrupt() will be sufficient, as that's they typical recommendation for ExecutorService.shutdownNow(). But maybe you had issues?", "author": "edalex-ian", "createdAt": "2020-12-01T01:53:35Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/freetext/extracter/standard/PdfExtracter.java", "diffHunk": "@@ -50,25 +56,34 @@ public boolean isSupportedByDefault(MimeEntry mimeEntry) {\n   @Override\n   public void extractText(\n       String mimeType, InputStream input, StringBuilder outputText, int maxSize, long parseDuration)\n-      throws IOException {\n+      throws IOException, InterruptedException, ExecutionException, TimeoutException {\n     WriteOutContentHandler wrapped = new WriteOutContentHandler(maxSize);\n     ContentHandler handler = new CappedBodyContentHandler(wrapped, parseDuration);\n-    try {\n-      Metadata meta = new Metadata();\n-      Parser parser = new AutoDetectParser(new TikaConfig(getClass().getClassLoader()));\n-      parser.parse(input, handler, meta, new ParseContext());\n+    Runnable runnableParse =\n+        new Runnable() {\n+          @Override\n+          public void run() {\n+            try {\n+              Metadata meta = new Metadata();\n+              Parser parser = new AutoDetectParser(new TikaConfig(getClass().getClassLoader()));\n+              parser.parse(input, handler, meta, new ParseContext());\n \n-      appendText(handler, outputText, maxSize);\n-\n-    } catch (Exception t) {\n-      if (wrapped.isWriteLimitReached(t)) {\n-        // keep going\n-        LOGGER.debug(\"PDF size limit reached.  Indexing truncated text\");\n-        appendText(handler, outputText, maxSize);\n-        return;\n-      }\n-      throw Throwables.propagate(t);\n-    }\n+              appendText(handler, outputText, maxSize);\n+            } catch (Exception t) {\n+              if (wrapped.isWriteLimitReached(t)) {\n+                // keep going\n+                LOGGER.info(\"PDF size limit reached.  Indexing truncated text\");\n+                appendText(handler, outputText, maxSize);\n+                return;\n+              }\n+              throw Throwables.propagate(t);\n+            }\n+          }\n+        };\n+    ExecutorService executor = Executors.newSingleThreadExecutor();\n+    Future<?> future = executor.submit(runnableParse);\n+    future.get(parseDuration, TimeUnit.MILLISECONDS);\n+    executor.shutdownNow();", "originalCommit": "b3f4215f4c8447f40679be1394b670b8028133f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4OTk5MA==", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r533789990", "bodyText": "I tried your way and it doesn't seem to work. The problem with interrupt is that it seems to simply set a flag that needs to be handled in the thread with isInterrupted(), which would be fine if we had a loop but we don't, it's parser.parse that is the cause of the issue.", "author": "SammyIsConfused", "createdAt": "2020-12-01T23:24:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyMDk4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwNDU1NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r533804554", "bodyText": "Cool, evidentially the implementation is doing more of a hard stop - which is typically advised against due to stray objects etc. But that is more so where there are multiple threads of the same code.\nSo in this case, you have cause for the increased complexity. Thanks for checking. \ud83d\udc4d", "author": "edalex-ian", "createdAt": "2020-12-02T00:03:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyMDk4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "31238c2c77e11e4e7f63d6f21c0845f11bb31a56", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/freetext/extracter/standard/PdfExtracter.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/freetext/extracter/standard/PdfExtracter.java\nindex 285f3792d..21a8f4887 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/freetext/extracter/standard/PdfExtracter.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/freetext/extracter/standard/PdfExtracter.java\n\n@@ -60,24 +60,21 @@ public class PdfExtracter extends AbstractTextExtracterExtension {\n     WriteOutContentHandler wrapped = new WriteOutContentHandler(maxSize);\n     ContentHandler handler = new CappedBodyContentHandler(wrapped, parseDuration);\n     Runnable runnableParse =\n-        new Runnable() {\n-          @Override\n-          public void run() {\n-            try {\n-              Metadata meta = new Metadata();\n-              Parser parser = new AutoDetectParser(new TikaConfig(getClass().getClassLoader()));\n-              parser.parse(input, handler, meta, new ParseContext());\n+        () -> {\n+          try {\n+            Metadata meta = new Metadata();\n+            Parser parser = new AutoDetectParser(new TikaConfig(getClass().getClassLoader()));\n+            parser.parse(input, handler, meta, new ParseContext());\n \n+            appendText(handler, outputText, maxSize);\n+          } catch (Exception t) {\n+            if (wrapped.isWriteLimitReached(t)) {\n+              // keep going\n+              LOGGER.info(\"PDF size limit reached.  Indexing truncated text\");\n               appendText(handler, outputText, maxSize);\n-            } catch (Exception t) {\n-              if (wrapped.isWriteLimitReached(t)) {\n-                // keep going\n-                LOGGER.info(\"PDF size limit reached.  Indexing truncated text\");\n-                appendText(handler, outputText, maxSize);\n-                return;\n-              }\n-              throw Throwables.propagate(t);\n+              return;\n             }\n+            throw Throwables.propagate(t);\n           }\n         };\n     ExecutorService executor = Executors.newSingleThreadExecutor();\n"}}, {"oid": "f52c4cc72cab97b14b64eb46b8dafa58af531e85", "url": "https://github.com/openequella/openEQUELLA/commit/f52c4cc72cab97b14b64eb46b8dafa58af531e85", "message": "Make language string for indexing error migration more generic\n\nCo-authored-by: edalex-ian <43919233+edalex-ian@users.noreply.github.com>", "committedDate": "2020-12-01T04:16:47Z", "type": "commit"}, {"oid": "3ced7454cd231c14d77d6a59a28fab7253178ec2", "url": "https://github.com/openequella/openEQUELLA/commit/3ced7454cd231c14d77d6a59a28fab7253178ec2", "message": "Add Javadoc to IAttachment", "committedDate": "2020-12-01T04:53:38Z", "type": "commit"}, {"oid": "0d67edb4440daf2e72f289a6e14c2bac5d83b843", "url": "https://github.com/openequella/openEQUELLA/commit/0d67edb4440daf2e72f289a6e14c2bac5d83b843", "message": "Merge branch 'develop' into bugfix/make_pdf_extraction_safe", "committedDate": "2020-12-01T22:10:21Z", "type": "commit"}, {"oid": "31238c2c77e11e4e7f63d6f21c0845f11bb31a56", "url": "https://github.com/openequella/openEQUELLA/commit/31238c2c77e11e4e7f63d6f21c0845f11bb31a56", "message": "Instantiate runnableParse as lambda", "committedDate": "2020-12-02T01:14:10Z", "type": "commit"}, {"oid": "0772539274c8f218f9806769922e894ceb98d3a7", "url": "https://github.com/openequella/openEQUELLA/commit/0772539274c8f218f9806769922e894ceb98d3a7", "message": "Catch timeout and rethrow", "committedDate": "2020-12-02T01:14:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MzEzMA==", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r534653130", "bodyText": "\ud83e\udd14 would this make sense as a state/enumeration rather than a flag?\nsomething like\n             state machine\n+-----------------------------------------+\n|                                         |\n|                        +--------------+ |\n|                        |              | |\n|         +-----------+->+ indexed      | |\n| added   |           |  |              | |\n+-------->+ unindexed |  +--------------+ |\n|         |           |  |              | |\n|         +-----------+->+ index failed | |\n|                        |              | |\n|                        +--------------+ |\n|                                         |\n+-----------------------------------------+\n\n\nnew attachments start as unindexed, they can move to indexed, to index failed when processed.\nA state system would also leave to door open for partially indexed content, or other possible states.\nThough it may be overkill here \ud83e\udd14\nThoughts? \ud83d\udcad", "author": "ChristianMurphy", "createdAt": "2020-12-03T04:08:12Z", "path": "Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/Attachment.java", "diffHunk": "@@ -86,6 +86,9 @@\n \n   private boolean restricted;\n \n+  @Column(name = \"errored_when_indexing\")\n+  private boolean erroredIndexing;", "originalCommit": "0772539274c8f218f9806769922e894ceb98d3a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE0Nzc1OA==", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r537147758", "bodyText": "This is what we were talking about at the start @SammyIsConfused . But I believe you highlighted that unfortunately the tracking of this is split across levels of the entity hierarchy. I think the primary index tracking is done at the item level, yet what was being addressed and flagged here was the actions occurring at the item attachment level.\nSo now we can have an item which is 'indexed' (after previously being 'unindexed'), but potentially some attachments are flagged as having errored - avoiding excessive future indexing. Is that right?", "author": "edalex-ian", "createdAt": "2020-12-06T23:20:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MzEzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE3OTI5OA==", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r537179298", "bodyText": "Well summed up Ian, yes that's correct. The index tracking is at the item level and doesn't keep info about specific attachments. This change means that an entire item can be indexed even if it has an attachment flagged as errored - that attachment will simply be skipped in future indexes to prevent performance problems.\nThis also gives the ability to look at the database and get a list of all attachments that need fixing up to be indexed properly. SELECT * FROM attachment WHERE errored_when_indexing=true will point a DBA at exactly where the problems are. It would not have been possible to glean this info from the item table alone.", "author": "SammyIsConfused", "createdAt": "2020-12-07T01:50:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MzEzMA=="}], "type": "inlineReview", "revised_code": {"commit": "3b7372bc3be723e54898c2e2a9775fc726f5d991", "chunk": "diff --git a/Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/Attachment.java b/Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/Attachment.java\nindex c1c46f492..02bb7e2f8 100644\n--- a/Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/Attachment.java\n+++ b/Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/Attachment.java\n\n@@ -86,7 +86,7 @@ public abstract class Attachment implements IAttachment, Serializable, Cloneable\n \n   private boolean restricted;\n \n-  @Column(name = \"errored_when_indexing\")\n+  @Column(name = \"errored_when_indexing\", nullable = false)\n   private boolean erroredIndexing;\n \n   // Explicit catch of CloneNotSupportedException from super.clone()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MzQ5Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r534653497", "bodyText": "would it make sense for the param to also be errorIndexing?", "author": "ChristianMurphy", "createdAt": "2020-12-03T04:09:18Z", "path": "Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/Attachment.java", "diffHunk": "@@ -281,4 +284,12 @@ public void setRestricted(boolean restricted) {\n   public String getAttachmentSignature() {\n     return item.getIdString() + \"/\" + this.uuid + \" [\" + this.description + \"]\";\n   }\n+\n+  public boolean isErroredIndexing() {\n+    return erroredIndexing;\n+  }\n+\n+  public void setErroredIndexing(boolean skipIndexing) {", "originalCommit": "0772539274c8f218f9806769922e894ceb98d3a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE3OTM0Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r537179346", "bodyText": "Well spotted, will fix that up. That was the old name of this field.", "author": "SammyIsConfused", "createdAt": "2020-12-07T01:51:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MzQ5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a9cbf20d1fd4fa3b84cb99e752809a80c09ce4dc", "chunk": "diff --git a/Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/Attachment.java b/Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/Attachment.java\nindex c1c46f492..ad671e021 100644\n--- a/Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/Attachment.java\n+++ b/Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/Attachment.java\n\n@@ -289,7 +289,7 @@ public abstract class Attachment implements IAttachment, Serializable, Cloneable\n     return erroredIndexing;\n   }\n \n-  public void setErroredIndexing(boolean skipIndexing) {\n-    this.erroredIndexing = skipIndexing;\n+  public void setErroredIndexing(boolean erroredIndexing) {\n+    this.erroredIndexing = erroredIndexing;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1NDA4MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r534654081", "bodyText": "Maybe hasErroredIndexing would read more naturally here? \ud83e\udd14", "author": "ChristianMurphy", "createdAt": "2020-12-03T04:11:00Z", "path": "Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/Attachment.java", "diffHunk": "@@ -281,4 +284,12 @@ public void setRestricted(boolean restricted) {\n   public String getAttachmentSignature() {\n     return item.getIdString() + \"/\" + this.uuid + \" [\" + this.description + \"]\";\n   }\n+\n+  public boolean isErroredIndexing() {", "originalCommit": "0772539274c8f218f9806769922e894ceb98d3a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE1MDY0OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r537150649", "bodyText": "Although I agree that it would read more natural. The Java standard for booleans on Beans (this being an Entity bean) is to  use the is prefix for boolean getters.", "author": "edalex-ian", "createdAt": "2020-12-06T23:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1NDA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a9cbf20d1fd4fa3b84cb99e752809a80c09ce4dc", "chunk": "diff --git a/Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/Attachment.java b/Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/Attachment.java\nindex c1c46f492..ad671e021 100644\n--- a/Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/Attachment.java\n+++ b/Source/Plugins/Core/com.equella.base/src/com/tle/beans/item/attachments/Attachment.java\n\n@@ -289,7 +289,7 @@ public abstract class Attachment implements IAttachment, Serializable, Cloneable\n     return erroredIndexing;\n   }\n \n-  public void setErroredIndexing(boolean skipIndexing) {\n-    this.erroredIndexing = skipIndexing;\n+  public void setErroredIndexing(boolean erroredIndexing) {\n+    this.erroredIndexing = erroredIndexing;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE2MTA3NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r537161074", "bodyText": "If you do nullable = false in Attachment.java, you also need to do that here.", "author": "PenghaiZhang", "createdAt": "2020-12-07T00:32:19Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/institution/migration/v20202/AddIndexingErrorColumnMigration.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.institution.migration.v20202;\n+\n+import com.google.inject.Singleton;\n+import com.tle.core.guice.Bind;\n+import com.tle.core.hibernate.impl.HibernateMigrationHelper;\n+import com.tle.core.migration.AbstractHibernateSchemaMigration;\n+import com.tle.core.migration.MigrationInfo;\n+import com.tle.core.migration.MigrationResult;\n+import java.util.List;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import org.hibernate.Query;\n+import org.hibernate.Session;\n+import org.hibernate.annotations.AccessType;\n+\n+@Bind\n+@Singleton\n+public class AddIndexingErrorColumnMigration extends AbstractHibernateSchemaMigration {\n+\n+  @Override\n+  protected void executeDataMigration(\n+      HibernateMigrationHelper helper, MigrationResult result, Session session) throws Exception {\n+    Query q = session.createQuery(\"UPDATE Attachment SET errored_when_indexing = :value\");\n+    q.setParameter(\"value\", false);\n+    q.executeUpdate();\n+  }\n+\n+  @Override\n+  protected int countDataMigrations(HibernateMigrationHelper helper, Session session) {\n+    return 1;\n+  }\n+\n+  @Override\n+  protected List<String> getDropModifySql(HibernateMigrationHelper helper) {\n+    return helper.getAddNotNullSQL(\"attachment\", \"errored_when_indexing\");\n+  }\n+\n+  @Override\n+  protected List<String> getAddSql(HibernateMigrationHelper helper) {\n+    return helper.getAddColumnsSQL(\"attachment\", \"errored_when_indexing\");\n+  }\n+\n+  @Override\n+  protected Class<?>[] getDomainClasses() {\n+    return new Class<?>[] {FakeAttachment.class};\n+  }\n+\n+  @Override\n+  public MigrationInfo createMigrationInfo() {\n+    return new MigrationInfo(\"com.tle.core.entity.services.migration.v20202.indexing.errored\");\n+  }\n+\n+  @Entity(name = \"Attachment\")\n+  @AccessType(\"field\")\n+  public static class FakeAttachment {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    long id;\n+\n+    @Column boolean errored_when_indexing;", "originalCommit": "0772539274c8f218f9806769922e894ceb98d3a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9cbf20d1fd4fa3b84cb99e752809a80c09ce4dc", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/institution/migration/v20202/AddIndexingErrorColumnMigration.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/institution/migration/v20202/AddIndexingErrorColumnMigration.java\nindex 6f31886e6..c7bed15d8 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/institution/migration/v20202/AddIndexingErrorColumnMigration.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/institution/migration/v20202/AddIndexingErrorColumnMigration.java\n\n@@ -53,7 +53,7 @@ public class AddIndexingErrorColumnMigration extends AbstractHibernateSchemaMigr\n \n   @Override\n   protected List<String> getDropModifySql(HibernateMigrationHelper helper) {\n-    return helper.getAddNotNullSQL(\"attachment\", \"errored_when_indexing\");\n+    return null;\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE2MTEwNA==", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r537161104", "bodyText": "Hi Sam, I have two questions here.\n\n\nDo we need to drop column 'errored_when_indexing'  in any situation?  If yes, I think we should use\n'getDropModifySql'. If no we can just return null.\n\n\nI am not quite sure why use getAddNotNullSQL. If this column needs a not null constraint, you can try\n@Column(name = \"errored_when_indexing\", nullable = false) in  attachment.java.", "author": "PenghaiZhang", "createdAt": "2020-12-07T00:32:36Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/institution/migration/v20202/AddIndexingErrorColumnMigration.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.core.institution.migration.v20202;\n+\n+import com.google.inject.Singleton;\n+import com.tle.core.guice.Bind;\n+import com.tle.core.hibernate.impl.HibernateMigrationHelper;\n+import com.tle.core.migration.AbstractHibernateSchemaMigration;\n+import com.tle.core.migration.MigrationInfo;\n+import com.tle.core.migration.MigrationResult;\n+import java.util.List;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import org.hibernate.Query;\n+import org.hibernate.Session;\n+import org.hibernate.annotations.AccessType;\n+\n+@Bind\n+@Singleton\n+public class AddIndexingErrorColumnMigration extends AbstractHibernateSchemaMigration {\n+\n+  @Override\n+  protected void executeDataMigration(\n+      HibernateMigrationHelper helper, MigrationResult result, Session session) throws Exception {\n+    Query q = session.createQuery(\"UPDATE Attachment SET errored_when_indexing = :value\");\n+    q.setParameter(\"value\", false);\n+    q.executeUpdate();\n+  }\n+\n+  @Override\n+  protected int countDataMigrations(HibernateMigrationHelper helper, Session session) {\n+    return 1;\n+  }\n+\n+  @Override\n+  protected List<String> getDropModifySql(HibernateMigrationHelper helper) {\n+    return helper.getAddNotNullSQL(\"attachment\", \"errored_when_indexing\");", "originalCommit": "0772539274c8f218f9806769922e894ceb98d3a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI0NTE5MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2561#discussion_r537245191", "bodyText": "There's no need for the getDropModifySql, I was following another as a template.\nAdding nullable=false to Attachment.java now.", "author": "SammyIsConfused", "createdAt": "2020-12-07T05:43:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE2MTEwNA=="}], "type": "inlineReview", "revised_code": {"commit": "a9cbf20d1fd4fa3b84cb99e752809a80c09ce4dc", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/institution/migration/v20202/AddIndexingErrorColumnMigration.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/institution/migration/v20202/AddIndexingErrorColumnMigration.java\nindex 6f31886e6..c7bed15d8 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/institution/migration/v20202/AddIndexingErrorColumnMigration.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/institution/migration/v20202/AddIndexingErrorColumnMigration.java\n\n@@ -53,7 +53,7 @@ public class AddIndexingErrorColumnMigration extends AbstractHibernateSchemaMigr\n \n   @Override\n   protected List<String> getDropModifySql(HibernateMigrationHelper helper) {\n-    return helper.getAddNotNullSQL(\"attachment\", \"errored_when_indexing\");\n+    return null;\n   }\n \n   @Override\n"}}, {"oid": "a9cbf20d1fd4fa3b84cb99e752809a80c09ce4dc", "url": "https://github.com/openequella/openEQUELLA/commit/a9cbf20d1fd4fa3b84cb99e752809a80c09ce4dc", "message": "Remove unnecessary dropModifySql implementation, fix typo in Attachment.java", "committedDate": "2020-12-07T05:41:38Z", "type": "commit"}, {"oid": "3b7372bc3be723e54898c2e2a9775fc726f5d991", "url": "https://github.com/openequella/openEQUELLA/commit/3b7372bc3be723e54898c2e2a9775fc726f5d991", "message": "Add nullable = false to annotation", "committedDate": "2020-12-07T23:02:19Z", "type": "commit"}]}