{"pr_number": 1516, "pr_title": "REST API for Search Filter", "pr_createdAt": "2020-03-02T03:00:12Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/1516", "timeline": [{"oid": "620aea8500427cb438cf4b327ca63b505991b723", "url": "https://github.com/openequella/openEQUELLA/commit/620aea8500427cb438cf4b327ca63b505991b723", "message": "REST API for Search Filter", "committedDate": "2020-03-02T02:47:14Z", "type": "commit"}, {"oid": "696c6d0f13f6e5f87b321ef0e4ebcef820114f70", "url": "https://github.com/openequella/openEQUELLA/commit/696c6d0f13f6e5f87b321ef0e4ebcef820114f70", "message": "Change some wording.", "committedDate": "2020-03-02T05:22:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyMTYxOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1516#discussion_r387321619", "bodyText": "Be good to add a couple of negative tests:\n\nAttempt to update a non-existent filter (i.e. wrong UUID)\nAttempt to delete a non-existent filter\nAttempt to use the end-points when not authenticated", "author": "edalex-ian", "createdAt": "2020-03-03T22:03:45Z", "path": "autotest/OldTests/src/test/java/com/tle/webtests/test/webservices/rest/SearchSettingApiTest.java", "diffHunk": "@@ -115,4 +117,49 @@ public void testCloudSettings() throws Exception {\n     final JsonNode updatedCloudSettings = getEntity(uri, token);\n     assertTrue(updatedCloudSettings.get(DISABLE_CLOUD).asBoolean());\n   }\n+\n+  @Test\n+  public void testSearchFilter() throws Exception {", "originalCommit": "696c6d0f13f6e5f87b321ef0e4ebcef820114f70", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0250bc183bc7c9ad2982f8a00785fb217b4c8ddf", "chunk": "diff --git a/autotest/OldTests/src/test/java/com/tle/webtests/test/webservices/rest/SearchSettingApiTest.java b/autotest/OldTests/src/test/java/com/tle/webtests/test/webservices/rest/SearchSettingApiTest.java\nindex 8ea81d0dd..24a244f42 100644\n--- a/autotest/OldTests/src/test/java/com/tle/webtests/test/webservices/rest/SearchSettingApiTest.java\n+++ b/autotest/OldTests/src/test/java/com/tle/webtests/test/webservices/rest/SearchSettingApiTest.java\n\n@@ -118,48 +135,142 @@ public class SearchSettingApiTest extends AbstractRestApiTest {\n     assertTrue(updatedCloudSettings.get(DISABLE_CLOUD).asBoolean());\n   }\n \n-  @Test\n-  public void testSearchFilter() throws Exception {\n-    final String NAME = \"name\";\n-    final String MIMI_TYPES = \"mimeTypes\";\n-    final String IMAGE_FILTER = \"image filter\";\n-    final String JPEG = \"image/jpeg\";\n-    final String PNG = \"image/png\";\n-    final String PDF_FILTER = \"PDF filter\";\n-    final String PDF = \"application/pdf\";\n-    final String ID = \"id\";\n-\n-    String token = requestToken(OAUTH_CLIENT_ID);\n-    final String uri = PathUtils.urlPath(context.getBaseUrl(), API_SEARCH_FILTER_PATH);\n-\n-    // Load initial search filters\n-    final JsonNode initialFilters = getEntity(uri, token);\n-    assertEquals(initialFilters.size(), 0);\n+  @Test(dependsOnMethods = \"testSearchSettings\")\n+  public void testCreateSearchFilter() throws Exception {\n+    final String uri = searchFilterUri(\"\");\n \n     // Create a search filter\n     HttpResponse response =\n-        postEntity(null, uri, token, true, NAME, IMAGE_FILTER, MIMI_TYPES, JPEG, MIMI_TYPES, PNG);\n+        postEntity(\n+            null,\n+            uri,\n+            getToken(),\n+            false,\n+            FILTER_NAME,\n+            IMAGE_FILTER,\n+            FILTER_MIME_TYPES,\n+            JPEG,\n+            FILTER_MIME_TYPES,\n+            PNG);\n     assertEquals(response.getStatusLine().getStatusCode(), 201);\n+    newFilterId = EntityUtils.toString(response.getEntity());\n+    assertNotNull(newFilterId);\n+\n+    // Create without filter name\n+    response = postEntity(null, uri, getToken(), false, FILTER_MIME_TYPES, JPEG);\n+    assertEquals(400, response.getStatusLine().getStatusCode());\n+\n+    // Create without MIMEType\n+    response = postEntity(null, uri, getToken(), false, FILTER_NAME, IMAGE_FILTER);\n+    assertEquals(400, response.getStatusLine().getStatusCode());\n+\n+    // Create with bad MIMETypes\n+    response =\n+        postEntity(\n+            null,\n+            uri,\n+            getToken(),\n+            false,\n+            FILTER_NAME,\n+            IMAGE_FILTER,\n+            FILTER_MIME_TYPES,\n+            BAD_MIME_TYPE);\n+    assertEquals(400, response.getStatusLine().getStatusCode());\n+\n+    // Create without token\n+    response =\n+        postEntity(null, uri, null, false, FILTER_NAME, IMAGE_FILTER, FILTER_MIME_TYPES, JPEG);\n+    assertEquals(403, response.getStatusLine().getStatusCode());\n+  }\n \n-    // Load filters again\n-    final JsonNode filters = getEntity(uri, token);\n-    assertEquals(filters.size(), 1);\n-    String filterId = filters.get(0).get(ID).asText();\n-    assertNotNull(filterId);\n+  @Test(dependsOnMethods = \"testCreateSearchFilter\")\n+  public void testRetrieveSearchFilter() throws Exception {\n+    final String uri = searchFilterUri(\"\");\n+\n+    // Retrieve all search filters\n+    // getEntity already includes the check of when user is not authenticated\n+    final JsonNode initialFilters = getEntity(uri, getToken());\n+    assertEquals(1, initialFilters.size());\n+\n+    // Retrieve a specific search filter\n+    final JsonNode filter = getEntity(searchFilterUri(newFilterId), getToken());\n+    assertEquals(newFilterId, filter.get(FILTER_ID).asText());\n+    assertEquals(IMAGE_FILTER, filter.get(FILTER_NAME).asText());\n+    assertEquals(JPEG, filter.get(FILTER_MIME_TYPES).get(0).asText());\n+    assertEquals(PNG, filter.get(FILTER_MIME_TYPES).get(1).asText());\n+  }\n+\n+  @Test(dependsOnMethods = \"testRetrieveSearchFilter\")\n+  public void testUpdateSearchFilter() throws Exception {\n+    final String uri = searchFilterUri(newFilterId);\n \n     // Update filter\n-    String newfilterUri = uri + \"/\" + filterId;\n-    response = putEntity(null, newfilterUri, token, true, NAME, PDF_FILTER, MIMI_TYPES, PDF);\n-    assertEquals(response.getStatusLine().getStatusCode(), 204);\n+    HttpResponse response =\n+        putEntity(null, uri, getToken(), true, FILTER_NAME, PDF_FILTER, FILTER_MIME_TYPES, PDF);\n+    assertEquals(204, response.getStatusLine().getStatusCode());\n+\n+    // Retrieve again to confirm the filter is updated\n+    final JsonNode filter = getEntity(uri, getToken());\n+    assertEquals(PDF_FILTER, filter.get(FILTER_NAME).asText());\n+    assertEquals(PDF, filter.get(FILTER_MIME_TYPES).get(0).asText());\n+\n+    // Update with a bad filter ID\n+    response =\n+        putEntity(\n+            null,\n+            searchFilterUri(BAD_FILTER_ID),\n+            getToken(),\n+            true,\n+            FILTER_NAME,\n+            IMAGE_FILTER,\n+            FILTER_MIME_TYPES,\n+            JPEG);\n+    assertEquals(404, response.getStatusLine().getStatusCode());\n+\n+    // Update without filter name\n+    response = putEntity(null, uri, getToken(), true, FILTER_MIME_TYPES, JPEG);\n+    assertEquals(400, response.getStatusLine().getStatusCode());\n+\n+    // Update without MIMETypes\n+    response = putEntity(null, uri, getToken(), true, FILTER_NAME, IMAGE_FILTER);\n+    assertEquals(400, response.getStatusLine().getStatusCode());\n+\n+    // Update with bad MIMETypes\n+    response =\n+        putEntity(\n+            null,\n+            uri,\n+            getToken(),\n+            true,\n+            FILTER_NAME,\n+            IMAGE_FILTER,\n+            FILTER_MIME_TYPES,\n+            BAD_MIME_TYPE);\n+    assertEquals(400, response.getStatusLine().getStatusCode());\n+\n+    // Update without token\n+    response = putEntity(null, uri, null, true, FILTER_NAME, IMAGE_FILTER, FILTER_MIME_TYPES, JPEG);\n+    assertEquals(403, response.getStatusLine().getStatusCode());\n+  }\n \n-    // Load this filter again\n-    final JsonNode filter = getEntity(newfilterUri, token);\n-    assertEquals(filter.get(ID).asText(), filterId);\n-    assertEquals(filter.get(NAME).asText(), PDF_FILTER);\n-    assertEquals(filter.get(MIMI_TYPES).get(0).asText(), PDF);\n+  @Test(dependsOnMethods = \"testUpdateSearchFilter\")\n+  public void testDeleteSearchFilter() throws Exception {\n+    final String uri = searchFilterUri(newFilterId);\n \n     // Delete filter\n-    response = deleteResource(newfilterUri, token);\n+    HttpResponse response = deleteResource(uri, getToken());\n     assertEquals(response.getStatusLine().getStatusCode(), 200);\n+\n+    // Delete with a bad filter ID\n+    response = deleteResource(searchFilterUri(BAD_FILTER_ID), getToken());\n+    assertEquals(404, response.getStatusLine().getStatusCode());\n+\n+    // Delete without token\n+    response = deleteResource(searchFilterUri(BAD_FILTER_ID), null);\n+    assertEquals(403, response.getStatusLine().getStatusCode());\n+  }\n+\n+  private String searchFilterUri(String filterId) {\n+    return PathUtils.urlPath(context.getBaseUrl(), API_SEARCH_FILTER_PATH, filterId);\n   }\n }\n"}}, {"oid": "0250bc183bc7c9ad2982f8a00785fb217b4c8ddf", "url": "https://github.com/openequella/openEQUELLA/commit/0250bc183bc7c9ad2982f8a00785fb217b4c8ddf", "message": "Add data validation for Search filters;\nAdd more negative tests.", "committedDate": "2020-03-05T04:22:25Z", "type": "commit"}, {"oid": "2c5df51d684996f2335b134bf7380571665c9c29", "url": "https://github.com/openequella/openEQUELLA/commit/2c5df51d684996f2335b134bf7380571665c9c29", "message": "Create a standard error response for REST calls;\nReturn more meaningful response to front-end;\nImprove test coverage.", "committedDate": "2020-03-10T05:23:33Z", "type": "commit"}]}