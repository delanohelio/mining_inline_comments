{"pr_number": 1631, "pr_title": "Entity, DAO and Service for Faceted Search Classification", "pr_createdAt": "2020-04-22T05:14:28Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/1631", "timeline": [{"oid": "6be2ee93c8cf5ed0bdb911cb187b4d7f561e9a9a", "url": "https://github.com/openequella/openEQUELLA/commit/6be2ee93c8cf5ed0bdb911cb187b4d7f561e9a9a", "message": "Entity, DAO and Service for the Faceted Search Classification.\n\nSupport create, retrieve, update and delete one Faceted Search Classification,\nand retrieve all classifications.", "committedDate": "2020-04-22T05:10:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NjA0NA==", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r412676044", "bodyText": "I am not sure if maxResults and orderIndex can be null or not so at the moment I assume they could be null.", "author": "PenghaiZhang", "createdAt": "2020-04-22T05:16:11Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/bean/FacetedSearchClassification.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.tle.core.facetedsearch.bean;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import org.hibernate.annotations.AccessType;\n+\n+@Entity\n+@AccessType(\"field\")\n+public class FacetedSearchClassification {\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.AUTO)\n+  private long id;\n+\n+  @Column(nullable = false)\n+  private long institutionId;\n+\n+  @Column @JsonIgnore private Date dateCreated;\n+\n+  @Column @JsonIgnore private Date dateModified;\n+\n+  @Column(nullable = false)\n+  private String name;\n+\n+  @Column(nullable = false)\n+  private String schemaNode;\n+\n+  private int maxResults;\n+\n+  private int orderIndex;", "originalCommit": "6be2ee93c8cf5ed0bdb911cb187b4d7f561e9a9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5MTczNg==", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r412691736", "bodyText": "Yeah, we can start there.", "author": "edalex-ian", "createdAt": "2020-04-22T05:58:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NjA0NA=="}], "type": "inlineReview", "revised_code": {"commit": "4943816e15b3882201799882c0f7f985dfcd1d6b", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/bean/FacetedSearchClassification.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/bean/FacetedSearchClassification.java\nindex 82a2ed39d..ba2bb69e6 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/bean/FacetedSearchClassification.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/bean/FacetedSearchClassification.java\n\n@@ -37,10 +37,6 @@ public class FacetedSearchClassification {\n     return id;\n   }\n \n-  public void setId(long id) {\n-    this.id = id;\n-  }\n-\n   public void setInstitution_id(long institutionId) {\n     this.institutionId = institutionId;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4MTAyOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r412681029", "bodyText": "There are two ways of doing a delete in oEQ. One is calling the delete implemented in GenericDaoImpl with an entity as parameter, and the other one is using Hibernate Query. Both are used in quite a few places.", "author": "PenghaiZhang", "createdAt": "2020-04-22T05:30:29Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDaoImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.tle.core.facetedsearch.dao;\n+\n+import com.google.inject.Singleton;\n+import com.tle.common.institution.CurrentInstitution;\n+import com.tle.core.facetedsearch.bean.FacetedSearchClassification;\n+import com.tle.core.guice.Bind;\n+import com.tle.core.hibernate.dao.GenericDaoImpl;\n+import java.util.List;\n+import org.hibernate.Query;\n+import org.hibernate.Session;\n+import org.springframework.orm.hibernate3.HibernateCallback;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Bind(FacetedSearchClassificationDao.class)\n+@Singleton\n+public class FacetedSearchClassificationDaoImpl\n+    extends GenericDaoImpl<FacetedSearchClassification, Long>\n+    implements FacetedSearchClassificationDao {\n+\n+  public FacetedSearchClassificationDaoImpl() {\n+    super(FacetedSearchClassification.class);\n+  }\n+\n+  @Override\n+  public FacetedSearchClassification getClassificationById(long id) {\n+    return (FacetedSearchClassification)\n+        getHibernateTemplate()\n+            .execute(\n+                new HibernateCallback() {\n+                  @Override\n+                  public Object doInHibernate(Session session) {\n+                    Query query =\n+                        session.createQuery(\n+                            \"FROM FacetedSearchClassification WHERE id = :id AND institution_id = :institutionId\");\n+                    query.setParameter(\"id\", id);\n+                    query.setParameter(\"institutionId\", CurrentInstitution.get().getUniqueId());\n+                    return query.uniqueResult();\n+                  }\n+                });\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  public List<FacetedSearchClassification> getAllClassifications() {\n+    return getHibernateTemplate()\n+        .find(\n+            \"from FacetedSearchClassification where institution_id = ?\",\n+            CurrentInstitution.get().getUniqueId());\n+  }\n+\n+  @Transactional\n+  @Override\n+  public void deleteClassification(FacetedSearchClassification facetedSearchClassification) {\n+    delete(facetedSearchClassification);", "originalCommit": "6be2ee93c8cf5ed0bdb911cb187b4d7f561e9a9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "873e143cc2562b39ddc640bdfc54a68403f8b952", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDaoImpl.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDaoImpl.java\nindex 790744735..34bb1b053 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDaoImpl.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDaoImpl.java\n\n@@ -1,70 +1,17 @@\n package com.tle.core.facetedsearch.dao;\n \n import com.google.inject.Singleton;\n-import com.tle.common.institution.CurrentInstitution;\n import com.tle.core.facetedsearch.bean.FacetedSearchClassification;\n import com.tle.core.guice.Bind;\n-import com.tle.core.hibernate.dao.GenericDaoImpl;\n-import java.util.List;\n-import org.hibernate.Query;\n-import org.hibernate.Session;\n-import org.springframework.orm.hibernate3.HibernateCallback;\n-import org.springframework.transaction.annotation.Transactional;\n+import com.tle.core.hibernate.dao.GenericInstitionalDaoImpl;\n \n @Bind(FacetedSearchClassificationDao.class)\n @Singleton\n public class FacetedSearchClassificationDaoImpl\n-    extends GenericDaoImpl<FacetedSearchClassification, Long>\n+    extends GenericInstitionalDaoImpl<FacetedSearchClassification, Long>\n     implements FacetedSearchClassificationDao {\n \n   public FacetedSearchClassificationDaoImpl() {\n     super(FacetedSearchClassification.class);\n   }\n-\n-  @Override\n-  public FacetedSearchClassification getClassificationById(long id) {\n-    return (FacetedSearchClassification)\n-        getHibernateTemplate()\n-            .execute(\n-                new HibernateCallback() {\n-                  @Override\n-                  public Object doInHibernate(Session session) {\n-                    Query query =\n-                        session.createQuery(\n-                            \"FROM FacetedSearchClassification WHERE id = :id AND institution_id = :institutionId\");\n-                    query.setParameter(\"id\", id);\n-                    query.setParameter(\"institutionId\", CurrentInstitution.get().getUniqueId());\n-                    return query.uniqueResult();\n-                  }\n-                });\n-  }\n-\n-  @SuppressWarnings(\"unchecked\")\n-  @Override\n-  public List<FacetedSearchClassification> getAllClassifications() {\n-    return getHibernateTemplate()\n-        .find(\n-            \"from FacetedSearchClassification where institution_id = ?\",\n-            CurrentInstitution.get().getUniqueId());\n-  }\n-\n-  @Transactional\n-  @Override\n-  public void deleteClassification(FacetedSearchClassification facetedSearchClassification) {\n-    delete(facetedSearchClassification);\n-  }\n-\n-  @Transactional\n-  @Override\n-  public void addFacetedSearchClassification(\n-      FacetedSearchClassification facetedSearchClassification) {\n-    save(facetedSearchClassification);\n-  }\n-\n-  @Transactional\n-  @Override\n-  public void updateFacetedSearchClassification(\n-      FacetedSearchClassification facetedSearchClassification) {\n-    merge(facetedSearchClassification);\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4NzI5Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r412687296", "bodyText": "I think there is no need to return dateCreated and dateModified to front-end so I add @JsonIgnore here.", "author": "PenghaiZhang", "createdAt": "2020-04-22T05:47:32Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/bean/FacetedSearchClassification.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.tle.core.facetedsearch.bean;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import org.hibernate.annotations.AccessType;\n+\n+@Entity\n+@AccessType(\"field\")\n+public class FacetedSearchClassification {\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.AUTO)\n+  private long id;\n+\n+  @Column(nullable = false)\n+  private long institutionId;\n+\n+  @Column @JsonIgnore private Date dateCreated;\n+\n+  @Column @JsonIgnore private Date dateModified;", "originalCommit": "6be2ee93c8cf5ed0bdb911cb187b4d7f561e9a9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4943816e15b3882201799882c0f7f985dfcd1d6b", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/bean/FacetedSearchClassification.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/bean/FacetedSearchClassification.java\nindex 82a2ed39d..ba2bb69e6 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/bean/FacetedSearchClassification.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/bean/FacetedSearchClassification.java\n\n@@ -37,10 +37,6 @@ public class FacetedSearchClassification {\n     return id;\n   }\n \n-  public void setId(long id) {\n-    this.id = id;\n-  }\n-\n   public void setInstitution_id(long institutionId) {\n     this.institutionId = institutionId;\n   }\n"}}, {"oid": "4943816e15b3882201799882c0f7f985dfcd1d6b", "url": "https://github.com/openequella/openEQUELLA/commit/4943816e15b3882201799882c0f7f985dfcd1d6b", "message": "Remove the setter of id", "committedDate": "2020-04-22T05:48:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4MTA0MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r412681041", "bodyText": "I don't see any need to ignore these - and I can see some cases where it could be useful (such as dateModified indicating currency - unless we have ETags setup).", "author": "edalex-ian", "createdAt": "2020-04-22T05:30:32Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/bean/FacetedSearchClassification.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.tle.core.facetedsearch.bean;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import org.hibernate.annotations.AccessType;\n+\n+@Entity\n+@AccessType(\"field\")\n+public class FacetedSearchClassification {\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.AUTO)\n+  private long id;\n+\n+  @Column(nullable = false)\n+  private long institutionId;\n+\n+  @Column @JsonIgnore private Date dateCreated;\n+\n+  @Column @JsonIgnore private Date dateModified;", "originalCommit": "6be2ee93c8cf5ed0bdb911cb187b4d7f561e9a9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4943816e15b3882201799882c0f7f985dfcd1d6b", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/bean/FacetedSearchClassification.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/bean/FacetedSearchClassification.java\nindex 82a2ed39d..ba2bb69e6 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/bean/FacetedSearchClassification.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/bean/FacetedSearchClassification.java\n\n@@ -37,10 +37,6 @@ public class FacetedSearchClassification {\n     return id;\n   }\n \n-  public void setId(long id) {\n-    this.id = id;\n-  }\n-\n   public void setInstitution_id(long institutionId) {\n     this.institutionId = institutionId;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4NTAyNA==", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r412685024", "bodyText": "Aren't these redundant? It should be fine to just use the inherited delete, save and merge.", "author": "edalex-ian", "createdAt": "2020-04-22T05:41:20Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.tle.core.facetedsearch.dao;\n+\n+import com.tle.core.facetedsearch.bean.FacetedSearchClassification;\n+import com.tle.core.hibernate.dao.GenericDao;\n+import java.util.List;\n+\n+public interface FacetedSearchClassificationDao\n+    extends GenericDao<FacetedSearchClassification, Long> {\n+\n+  FacetedSearchClassification getClassificationById(long id);\n+\n+  List getAllClassifications();\n+\n+  void deleteClassification(FacetedSearchClassification facetedSearchClassification);\n+\n+  void addFacetedSearchClassification(FacetedSearchClassification facetedSearchClassification);\n+\n+  void updateFacetedSearchClassification(FacetedSearchClassification facetedSearchClassification);", "originalCommit": "6be2ee93c8cf5ed0bdb911cb187b4d7f561e9a9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "873e143cc2562b39ddc640bdfc54a68403f8b952", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java\nindex b00b2b62e..f7fcab42a 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java\n\n@@ -1,19 +1,7 @@\n package com.tle.core.facetedsearch.dao;\n \n import com.tle.core.facetedsearch.bean.FacetedSearchClassification;\n-import com.tle.core.hibernate.dao.GenericDao;\n-import java.util.List;\n+import com.tle.core.hibernate.dao.GenericInstitutionalDao;\n \n public interface FacetedSearchClassificationDao\n-    extends GenericDao<FacetedSearchClassification, Long> {\n-\n-  FacetedSearchClassification getClassificationById(long id);\n-\n-  List getAllClassifications();\n-\n-  void deleteClassification(FacetedSearchClassification facetedSearchClassification);\n-\n-  void addFacetedSearchClassification(FacetedSearchClassification facetedSearchClassification);\n-\n-  void updateFacetedSearchClassification(FacetedSearchClassification facetedSearchClassification);\n-}\n+    extends GenericInstitutionalDao<FacetedSearchClassification, Long> {}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4NzQzMw==", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r412687433", "bodyText": "I wonder if it'd be better to rely on the enumerate methods provided by GenericInstitutionalDao?", "author": "edalex-ian", "createdAt": "2020-04-22T05:47:56Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.tle.core.facetedsearch.dao;\n+\n+import com.tle.core.facetedsearch.bean.FacetedSearchClassification;\n+import com.tle.core.hibernate.dao.GenericDao;\n+import java.util.List;\n+\n+public interface FacetedSearchClassificationDao\n+    extends GenericDao<FacetedSearchClassification, Long> {\n+\n+  FacetedSearchClassification getClassificationById(long id);\n+\n+  List getAllClassifications();", "originalCommit": "6be2ee93c8cf5ed0bdb911cb187b4d7f561e9a9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "873e143cc2562b39ddc640bdfc54a68403f8b952", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java\nindex b00b2b62e..f7fcab42a 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java\n\n@@ -1,19 +1,7 @@\n package com.tle.core.facetedsearch.dao;\n \n import com.tle.core.facetedsearch.bean.FacetedSearchClassification;\n-import com.tle.core.hibernate.dao.GenericDao;\n-import java.util.List;\n+import com.tle.core.hibernate.dao.GenericInstitutionalDao;\n \n public interface FacetedSearchClassificationDao\n-    extends GenericDao<FacetedSearchClassification, Long> {\n-\n-  FacetedSearchClassification getClassificationById(long id);\n-\n-  List getAllClassifications();\n-\n-  void deleteClassification(FacetedSearchClassification facetedSearchClassification);\n-\n-  void addFacetedSearchClassification(FacetedSearchClassification facetedSearchClassification);\n-\n-  void updateFacetedSearchClassification(FacetedSearchClassification facetedSearchClassification);\n-}\n+    extends GenericInstitutionalDao<FacetedSearchClassification, Long> {}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4OTQ1Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r412689452", "bodyText": "I'm surprised this also is provided by one of the base classes, but looks not. However might want to go with the simple getById or findById.", "author": "edalex-ian", "createdAt": "2020-04-22T05:53:08Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.tle.core.facetedsearch.dao;\n+\n+import com.tle.core.facetedsearch.bean.FacetedSearchClassification;\n+import com.tle.core.hibernate.dao.GenericDao;\n+import java.util.List;\n+\n+public interface FacetedSearchClassificationDao\n+    extends GenericDao<FacetedSearchClassification, Long> {\n+\n+  FacetedSearchClassification getClassificationById(long id);", "originalCommit": "4943816e15b3882201799882c0f7f985dfcd1d6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "873e143cc2562b39ddc640bdfc54a68403f8b952", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java\nindex b00b2b62e..f7fcab42a 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java\n\n@@ -1,19 +1,7 @@\n package com.tle.core.facetedsearch.dao;\n \n import com.tle.core.facetedsearch.bean.FacetedSearchClassification;\n-import com.tle.core.hibernate.dao.GenericDao;\n-import java.util.List;\n+import com.tle.core.hibernate.dao.GenericInstitutionalDao;\n \n public interface FacetedSearchClassificationDao\n-    extends GenericDao<FacetedSearchClassification, Long> {\n-\n-  FacetedSearchClassification getClassificationById(long id);\n-\n-  List getAllClassifications();\n-\n-  void deleteClassification(FacetedSearchClassification facetedSearchClassification);\n-\n-  void addFacetedSearchClassification(FacetedSearchClassification facetedSearchClassification);\n-\n-  void updateFacetedSearchClassification(FacetedSearchClassification facetedSearchClassification);\n-}\n+    extends GenericInstitutionalDao<FacetedSearchClassification, Long> {}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4OTg1NA==", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r412689854", "bodyText": "And although it's not done too often in oEQ, it'd be good to put a JavaDoc on it to say it'll retrieve by id within the current institution.", "author": "edalex-ian", "createdAt": "2020-04-22T05:54:10Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.tle.core.facetedsearch.dao;\n+\n+import com.tle.core.facetedsearch.bean.FacetedSearchClassification;\n+import com.tle.core.hibernate.dao.GenericDao;\n+import java.util.List;\n+\n+public interface FacetedSearchClassificationDao\n+    extends GenericDao<FacetedSearchClassification, Long> {\n+\n+  FacetedSearchClassification getClassificationById(long id);", "originalCommit": "4943816e15b3882201799882c0f7f985dfcd1d6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "873e143cc2562b39ddc640bdfc54a68403f8b952", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java\nindex b00b2b62e..f7fcab42a 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/dao/FacetedSearchClassificationDao.java\n\n@@ -1,19 +1,7 @@\n package com.tle.core.facetedsearch.dao;\n \n import com.tle.core.facetedsearch.bean.FacetedSearchClassification;\n-import com.tle.core.hibernate.dao.GenericDao;\n-import java.util.List;\n+import com.tle.core.hibernate.dao.GenericInstitutionalDao;\n \n public interface FacetedSearchClassificationDao\n-    extends GenericDao<FacetedSearchClassification, Long> {\n-\n-  FacetedSearchClassification getClassificationById(long id);\n-\n-  List getAllClassifications();\n-\n-  void deleteClassification(FacetedSearchClassification facetedSearchClassification);\n-\n-  void addFacetedSearchClassification(FacetedSearchClassification facetedSearchClassification);\n-\n-  void updateFacetedSearchClassification(FacetedSearchClassification facetedSearchClassification);\n-}\n+    extends GenericInstitutionalDao<FacetedSearchClassification, Long> {}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5MDMzMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r412690331", "bodyText": "For the method names, no need to use Classifications again. It's unnecessarily verbose and is kind of implied on a service dedicated to classifications.", "author": "edalex-ian", "createdAt": "2020-04-22T05:55:25Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/service/FacetedSearchClassificationService.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.tle.core.facetedsearch.service;\n+\n+import com.tle.core.facetedsearch.bean.FacetedSearchClassification;\n+import java.util.List;\n+\n+public interface FacetedSearchClassificationService {", "originalCommit": "4943816e15b3882201799882c0f7f985dfcd1d6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "873e143cc2562b39ddc640bdfc54a68403f8b952", "chunk": "diff --git a/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/service/FacetedSearchClassificationService.java b/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/service/FacetedSearchClassificationService.java\nindex e2a7d7973..c7acc047a 100644\n--- a/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/service/FacetedSearchClassificationService.java\n+++ b/Source/Plugins/Core/com.equella.core/src/com/tle/core/facetedsearch/service/FacetedSearchClassificationService.java\n\n@@ -4,13 +4,13 @@ import com.tle.core.facetedsearch.bean.FacetedSearchClassification;\n import java.util.List;\n \n public interface FacetedSearchClassificationService {\n-  FacetedSearchClassification getClassificationById(long id);\n+  FacetedSearchClassification getById(long id);\n \n-  List getAllClassifications();\n+  List enumerateAll();\n \n-  void deleteClassification(FacetedSearchClassification facetedSearchClassification);\n+  void delete(FacetedSearchClassification facetedSearchClassification);\n \n-  void addClassification(FacetedSearchClassification facetedSearchClassification);\n+  void add(FacetedSearchClassification facetedSearchClassification);\n \n-  void updateFacetedSearchClassification(FacetedSearchClassification facetedSearchClassification);\n+  void update(FacetedSearchClassification facetedSearchClassification);\n }\n"}}, {"oid": "f3c6297d3ed006032abd7c3b0c9ba4e01e7717f7", "url": "https://github.com/openequella/openEQUELLA/commit/f3c6297d3ed006032abd7c3b0c9ba4e01e7717f7", "message": "Remove @JsonIgnore from 'dateCreated' and 'dateModified';\n\nIn order to make the DAO extend GenericInstitutionDao, this entity needs\nfull information of an institution. So replace 'institutionId' with an\ninstance of 'Institution'. The relation should be many-to-one. And when\nexporting an institution, there is no need to export the institution\ninformation together with this entity so add '@XStreamOmitField'.", "committedDate": "2020-04-23T01:57:00Z", "type": "commit"}, {"oid": "873e143cc2562b39ddc640bdfc54a68403f8b952", "url": "https://github.com/openequella/openEQUELLA/commit/873e143cc2562b39ddc640bdfc54a68403f8b952", "message": "All the basic database related methods are already provided by\nGenericInstitutionalDao so remove redundant methods.\n\nRename names of methods of the 'FacetedSearchClassificationService'.\n\nAdd the annotation of Transactional to DML operations.", "committedDate": "2020-04-23T02:06:37Z", "type": "commit"}, {"oid": "61789e12a640ccf0ce4b40a31685f85240e382e2", "url": "https://github.com/openequella/openEQUELLA/commit/61789e12a640ccf0ce4b40a31685f85240e382e2", "message": "Support data migration for the new classification table;\n\nCreate a new Converter to ensure data of classification are imported and\nexported when importing or exporting the institution.", "committedDate": "2020-04-23T02:12:05Z", "type": "commit"}, {"oid": "ad17ca296b9b257cc356977b0a9d02a81d881c59", "url": "https://github.com/openequella/openEQUELLA/commit/ad17ca296b9b257cc356977b0a9d02a81d881c59", "message": "Headers for new files.", "committedDate": "2020-04-23T02:19:58Z", "type": "commit"}, {"oid": "a42cb8eb5bba156dd42d676d048b5fa76aa3f698", "url": "https://github.com/openequella/openEQUELLA/commit/a42cb8eb5bba156dd42d676d048b5fa76aa3f698", "message": "Add 'FacetedSearchClassification' to 'InitialSchema'", "committedDate": "2020-04-23T04:47:03Z", "type": "commit"}, {"oid": "98cae93ad6f8b1cd80faa843e7510b93f86bdf0e", "url": "https://github.com/openequella/openEQUELLA/commit/98cae93ad6f8b1cd80faa843e7510b93f86bdf0e", "message": "Add new endpoints to support create, retrieve, update and delete faceted\nsearch classification;\n\nAdd a method used to validate classification  but limited to name and\nschema node at the moment;\n\nAdd new tests for the new endpoints.", "committedDate": "2020-04-24T00:07:48Z", "type": "commit"}, {"oid": "9501c92a190b58876cf63e13eed427cfe7e9abfc", "url": "https://github.com/openequella/openEQUELLA/commit/9501c92a190b58876cf63e13eed427cfe7e9abfc", "message": "Add the testing json file", "committedDate": "2020-04-24T03:00:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NzgzNw==", "url": "https://github.com/openequella/openEQUELLA/pull/1631#discussion_r414297837", "bodyText": "Sees odd to need to use something called Attachments for this. Normally you'd just use the classloader.getResourceAsStream(<filename>). But maybe this is the oEQ way?", "author": "edalex-ian", "createdAt": "2020-04-24T05:11:56Z", "path": "autotest/OldTests/src/test/java/com/tle/webtests/test/webservices/rest/FacetedSearchClassificationApiTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.tle.webtests.test.webservices.rest;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.tle.common.Pair;\n+import com.tle.webtests.test.files.Attachments;\n+import java.util.List;\n+import org.apache.http.HttpResponse;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.node.ObjectNode;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+public class FacetedSearchClassificationApiTest extends AbstractRestApiTest {\n+  private static final String OAUTH_CLIENT_ID = \"FacetedSearchApiTestClient\";\n+  private static final String API_PATH = \"api/settings/facetedsearch/classification/\";\n+  private long classificationId;\n+  private ObjectNode validClassification;\n+  private ObjectNode invalidClassification;\n+\n+  private static final String NAME = \"good name\";\n+  private static final String NEW_NAME = \"better name\";\n+  private static final long invalidId = 763311234511L;\n+\n+  @Override\n+  protected void addOAuthClients(List<Pair<String, String>> clients) {\n+    clients.add(new Pair<String, String>(OAUTH_CLIENT_ID, \"AutoTest\"));\n+  }\n+\n+  @BeforeClass\n+  @Override\n+  public void registerClients() throws Exception {\n+    super.registerClients();\n+    JsonNode node = mapper.readTree(Attachments.get(\"facetedsearchclassification.json\"));", "originalCommit": "9501c92a190b58876cf63e13eed427cfe7e9abfc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d3777c6b2718302ec942d59125ee16fd37ed354", "chunk": "diff --git a/autotest/OldTests/src/test/java/com/tle/webtests/test/webservices/rest/FacetedSearchClassificationApiTest.java b/autotest/OldTests/src/test/java/com/tle/webtests/test/webservices/rest/FacetedSearchClassificationApiTest.java\nindex 019a8c089..679e70231 100644\n--- a/autotest/OldTests/src/test/java/com/tle/webtests/test/webservices/rest/FacetedSearchClassificationApiTest.java\n+++ b/autotest/OldTests/src/test/java/com/tle/webtests/test/webservices/rest/FacetedSearchClassificationApiTest.java\n\n@@ -3,7 +3,6 @@ package com.tle.webtests.test.webservices.rest;\n import static org.junit.Assert.assertEquals;\n \n import com.tle.common.Pair;\n-import com.tle.webtests.test.files.Attachments;\n import java.util.List;\n import org.apache.http.HttpResponse;\n import org.codehaus.jackson.JsonNode;\n"}}, {"oid": "7d3777c6b2718302ec942d59125ee16fd37ed354", "url": "https://github.com/openequella/openEQUELLA/commit/7d3777c6b2718302ec942d59125ee16fd37ed354", "message": "Specify the endpoint path at the top of the file;\n\nCreate a resources folder for 'OldTests';\n\nAdd the new test in Codebuild and Travis.", "committedDate": "2020-04-24T06:57:52Z", "type": "commit"}]}