{"pr_number": 3905, "pr_title": "[GSoC] Merge Leaderboard branch with master", "pr_createdAt": "2020-08-21T05:58:07Z", "pr_url": "https://github.com/commons-app/apps-android-commons/pull/3905", "timeline": [{"oid": "b381d40517817be180857badaff4d37df95f51c8", "url": "https://github.com/commons-app/apps-android-commons/commit/b381d40517817be180857badaff4d37df95f51c8", "message": "[GSoC] Fixes #3789 Updated UI of achievements activity to display level in first tab & Leaderboard in the second tab (#3794)\n\n* Updated UI of achievements activity to display level in first tab and Leaderboard in the second tab\r\n\r\n* Removed hardcoded string", "committedDate": "2020-06-04T15:29:20Z", "type": "commit"}, {"oid": "eec0f14cb5f8e352e993a06289af7fd12e452623", "url": "https://github.com/commons-app/apps-android-commons/commit/eec0f14cb5f8e352e993a06289af7fd12e452623", "message": "Merge branch 'leaderboard' into merge-master-temp-branch", "committedDate": "2020-07-02T07:06:14Z", "type": "commit"}, {"oid": "196b9141d2c593a656e00db8d6b6653b88bebdaa", "url": "https://github.com/commons-app/apps-android-commons/commit/196b9141d2c593a656e00db8d6b6653b88bebdaa", "message": "Fixes #3861 Use the APIs to fetch leaderboard\u2019s based on uploads via mobile app (all time) and display it in the Leaderboard screen. (#3865)", "committedDate": "2020-07-08T14:21:39Z", "type": "commit"}, {"oid": "5877d7a14aa2e2621e5bcf62cd90f1514a96404c", "url": "https://github.com/commons-app/apps-android-commons/commit/5877d7a14aa2e2621e5bcf62cd90f1514a96404c", "message": "[GSoC] Added Unit Tests and Fixed Landscape Mode Bug (#3872)\n\n* Fixes #3861 Use the APIs to fetch leaderboard\u2019s based on uploads via mobile app (all time) and display it in the Leaderboard screen.\r\n\r\n* Fixed Bug - missing data in landscape mode\r\n\r\n* Added Unit Tests for Leaderboard\r\n\r\n* Added JavaDocs\r\n\r\n* Updated JavaDocs", "committedDate": "2020-07-15T17:53:48Z", "type": "commit"}, {"oid": "5f77f610f507895adb6e19f1de124b572e419642", "url": "https://github.com/commons-app/apps-android-commons/commit/5f77f610f507895adb6e19f1de124b572e419642", "message": "[GSoC] Added Pagination to Leaderboard (#3881)\n\n* Fixes #3861 Use the APIs to fetch leaderboard\u2019s based on uploads via mobile app (all time) and display it in the Leaderboard screen.\r\n\r\n* Fixed Bug - missing data in landscape mode\r\n\r\n* Added Unit Tests for Leaderboard\r\n\r\n* Added JavaDocs\r\n\r\n* Updated JavaDocs\r\n\r\n* Added Pagination\r\n\r\n* Added Merge Adapter\r\n\r\n* Fixed Test Case\r\n\r\n* Added Smooth Scroll\r\n\r\n* Added Progress Bar for Paging\r\n\r\n* Fixed Gradle", "committedDate": "2020-07-29T00:29:33Z", "type": "commit"}, {"oid": "bc0b5c05c7263c959e77ceae4b99bacdca347f5a", "url": "https://github.com/commons-app/apps-android-commons/commit/bc0b5c05c7263c959e77ceae4b99bacdca347f5a", "message": "[GSoC] Added option to set a new avatar (#3892)\n\n* Fixes #3861 Use the APIs to fetch leaderboard\u2019s based on uploads via mobile app (all time) and display it in the Leaderboard screen.\r\n\r\n* Added option to set a new avatar", "committedDate": "2020-08-09T10:36:32Z", "type": "commit"}, {"oid": "baee56e392c1f38651cc5b8722df43c12f804c57", "url": "https://github.com/commons-app/apps-android-commons/commit/baee56e392c1f38651cc5b8722df43c12f804c57", "message": "[GSoC] Added Click to open user profile for leaderboard (#3887)\n\n* Localisation updates from https://translatewiki.net.\r\n\r\n* Localisation updates from https://translatewiki.net.\r\n\r\n* #3749 Improve MediaClient UnitTests  (#3846)\r\n\r\n* #3468 Switch from RvRenderer to AdapterDelegates - replace SearchDepictionsRenderer\r\n\r\n* #3468 Switch from RvRenderer to AdapterDelegates - replace UploadCategoryDepictionsRenderer\r\n\r\n* #3468 Switch from RvRenderer to AdapterDelegates - update BaseAdapter to be easier to use\r\n\r\n* #3468 Switch from RvRenderer to AdapterDelegates - replace SearchImagesRenderer\r\n\r\n* #3468 Switch from RvRenderer to AdapterDelegates - replace SearchCategoriesRenderer\r\n\r\n* #3468 Switch from RvRenderer to AdapterDelegates - replace NotificationRenderer\r\n\r\n* #3468 Switch from RvRenderer to AdapterDelegates - replace UploadDepictsRenderer\r\n\r\n* #3468 Switch from RvRenderer to AdapterDelegates - replace PlaceRenderer\r\n\r\n* #3756 Convert SearchDepictionsFragment to use Pagination - convert SearchDepictionsFragment\r\n\r\n* #3756 Convert SearchDepictionsFragment to use Pagination - fix presenter unit tests now that view is not nullable - fix Category prefix imports\r\n\r\n* #3756 Convert SearchDepictionsFragment to use Pagination - test DataSource related classes\r\n\r\n* #3756 Convert SearchDepictionsFragment to use Pagination - reset rx scheduler - ignore failing test\r\n\r\n* #3760 Convert SearchCategoriesFragment to use Pagination - extract functionality of pagination to base classes - add category pagination\r\n\r\n* #3772 Convert SearchImagesFragment to use Pagination  - convert SearchImagesFragment - tidy up showing the empty view - make search fragments show snackbar with appropriate text\r\n\r\n* #3772 Convert SearchImagesFragment to use Pagination  - allow viewpager to load more data\r\n\r\n* #3760 remove test that got re-added by merge\r\n\r\n* #3760 remove duplicate dependency\r\n\r\n* #3772 fix compilation\r\n\r\n* #3780 Create media using a combination of Entities & MwQueryResult - construct media with an entity - move fields from media down to contribution - move dynamic fields outside of media - remove unused constructors - remove all unnecessary fetching of captions/descriptions - bump database version\r\n\r\n* #3808 Construct media objects that depict an item id correctly - use generator to construct media for DepictedImages\r\n\r\n* #3810 Convert DepictedImagesFragment to use Pagination - extract common media paging methods - convert to DepictedImages to use pagination\r\n\r\n* #3810 Convert DepictedImagesFragment to use Pagination - rename base classes to better reflect usage\r\n\r\n* #3810 Convert DepictedImagesFragment to use Pagination - map to empty result with no pages\r\n\r\n* #3810 Convert DepictedImagesFragment to use Pagination - align test with returned values\r\n\r\n* #3780 Create media using a combination of Entities & MwQueryResult - update wikicode to align with expected behaviour\r\n\r\n* #3780 Create media using a combination of Entities & MwQueryResult - replace old site of thumbnail title with most relevant caption\r\n\r\n* #3818 Convert SubDepictionListFragment to use Pagination - replace SubDepictionList with Child and Parent Fragments - replace contracts with simple presenter declarations - move classes to appropriate packages - delete unused network models - delete duplicated paging classes\r\n\r\n* #3820 Convert CategoryImagesListFragment to use Pagination - replace CategoryImagesListFragment with CategoriesMediaFragment - disallow the construction of media objects without imageinfo\r\n\r\n* #3822 Convert SubCategoryImagesListFragment to use Pagination - convert subcategories - add continuation support in category client - rely on interfaces for callbacks of PageableMediaFragments\r\n\r\n* #3822 Convert SubCategoryImagesListFragment to use Pagination - convert parent categories - delete list fragment - creat base class to support continuation requests in clients\r\n\r\n* #3822 Convert SubCategoryImagesListFragment to use Pagination - add tests for ParentCategoriesDataSource\r\n\r\n* #3822 Convert SubCategoryImagesListFragment to use Pagination - remove no longer applicable test\r\n\r\n* #3749 Improve MediaClient UnitTests - test rewrite\r\n\r\n* #3749 Improve MediaClient UnitTests - align with buildConfig property\r\n\r\n* With pause and resume for uploads (#3858)\r\n\r\n* With pause and resume for uploads\r\n\r\n* Dispose current upload\r\n\r\n* Make pause and resume work\r\n\r\n* Check stash validity\r\n\r\n* With java docs\r\n\r\n* minor\r\n\r\n* Localisation updates from https://translatewiki.net.\r\n\r\n* Localisation updates from https://translatewiki.net.\r\n\r\n* Add nearby presenter unit tests  (#3615)\r\n\r\n* init the test file\r\n\r\n* Add tests to check if searchthisarea button action and checkbox actions are added after initialize test\r\n\r\n* Add tests to locked unlocked nearby cases\r\n\r\n* Add tests for null cases in updateMapAndList method\r\n\r\n* Add test to check which locations are used to populate places, depending to LocationChangeType\r\n\r\n* Add tests to test users position is not followed if blue dot (current location marker) is not visible\r\n\r\n* Add tests to decide search this area method visibility on camera move\r\n\r\n* Add tests for multi filteirng of placetypes\r\n\r\n* add tests for single place type selection too\r\n\r\n* Add tests to tests search view focus gain and bottom sheet visibilities\r\n\r\n* Add tests for SearchCloseToCurrentLocation\r\n\r\n* Remove two unneeded getter and setter for isNearbyLocked, use @VisibleForTesting annotation instead\r\n\r\n* Add VisibleForTesting annotation to initializeNearbyOperations method so that it will be private by default\r\n\r\n* Add missing tests\r\n\r\n* Add tests for map updated case and add missing lines those are being tested\r\n\r\n* Add some missind method verifications\r\n\r\n* Create real latlang objects isntead of spying them\r\n\r\n* Use a real presenter object instead of a spy\r\n\r\n* Revert nonneeded @VisibleForTest annotations, instead reach via lockUnlock method\r\n\r\n* Reduce code repetitions\r\n\r\n* Do not call a test from another test method\r\n\r\n* Add some more tests\r\n\r\n* Fix minor issues\r\n\r\n* Hidden categories are not showed in suggested categories (#3853)\r\n\r\n* Localisation updates from https://translatewiki.net.\r\n\r\n* Clarify that the caption would also be used as the image title (#3876)\r\n\r\nThe app uses the fist caption as the file title. This should also\r\nbe communicated to the user via the info box as they would not be\r\naware of it otherwise.\r\n\r\n* Localisation updates from https://translatewiki.net.\r\n\r\n* Added Click event for leaderboard, Fixed #3886\r\n\r\n* Fixed Travis\r\n\r\nCo-authored-by: translatewiki.net <l10n-bot@translatewiki.net>\r\nCo-authored-by: Se\u00e1n Mac Gillicuddy <seantheappdev@gmail.com>\r\nCo-authored-by: Vivek Maskara <maskaravivek@gmail.com>\r\nCo-authored-by: neslihanturan <tur.neslihan@gmail.com>\r\nCo-authored-by: Paulina <63326136+PaulinaQuintero@users.noreply.github.com>\r\nCo-authored-by: Kaartic Sivaraam <kaartic.sivaraam@gmail.com>", "committedDate": "2020-08-09T14:59:54Z", "type": "commit"}, {"oid": "94952f18207e596a818aeb467ecb75b42e5a7ec4", "url": "https://github.com/commons-app/apps-android-commons/commit/94952f18207e596a818aeb467ecb75b42e5a7ec4", "message": "[GSoC] Added Leaderboard Filters (#3902)\n\n* Attempt to add filters\r\n\r\n* Basic Filter Working\r\n\r\n* Filter Improved\r\n\r\n* Filter Completed", "committedDate": "2020-08-18T15:03:54Z", "type": "commit"}, {"oid": "7823403d5b3d1e79287d454ff3da5b85a9c28d7f", "url": "https://github.com/commons-app/apps-android-commons/commit/7823403d5b3d1e79287d454ff3da5b85a9c28d7f", "message": "Merge remote-tracking branch 'upstream/master' into leaderboard", "committedDate": "2020-08-21T05:16:25Z", "type": "commit"}, {"oid": "ef11bacabcdbfd780b5a11a3e86342d4a09b92fa", "url": "https://github.com/commons-app/apps-android-commons/commit/ef11bacabcdbfd780b5a11a3e86342d4a09b92fa", "message": "Add JavaDocs", "committedDate": "2020-08-21T05:47:40Z", "type": "commit"}, {"oid": "b35ad7c5c1905af0b4cc51abb3541a7184e0d75d", "url": "https://github.com/commons-app/apps-android-commons/commit/b35ad7c5c1905af0b4cc51abb3541a7184e0d75d", "message": "Added Test for Update Avatar", "committedDate": "2020-08-21T06:24:27Z", "type": "commit"}, {"oid": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "url": "https://github.com/commons-app/apps-android-commons/commit/43a661512b10e944c14bfcb4b02b0e8401a00db4", "message": "Decreased Margin of Filter", "committedDate": "2020-08-21T06:28:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1ODk0NQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474458945", "bodyText": "Javadoc", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:16:24Z", "path": "app/src/main/java/fr/free/nrw/commons/mwapi/OkHttpJsonApiClient.java", "diffHunk": "@@ -49,17 +52,90 @@\n   public OkHttpJsonApiClient(OkHttpClient okHttpClient,\n       DepictsClient depictsClient,\n       HttpUrl wikiMediaToolforgeUrl,\n+      HttpUrl wikiMediaTestToolforgeUrl,\n       String sparqlQueryUrl,\n       String campaignsUrl,\n       Gson gson) {\n     this.okHttpClient = okHttpClient;\n     this.depictsClient = depictsClient;\n     this.wikiMediaToolforgeUrl = wikiMediaToolforgeUrl;\n+    this.wikiMediaTestToolforgeUrl = wikiMediaTestToolforgeUrl;\n     this.sparqlQueryUrl = sparqlQueryUrl;\n     this.campaignsUrl = campaignsUrl;\n     this.gson = gson;\n   }\n \n+  @NonNull", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95deb4d491fc4f96cd7d363a4cf4b8b612fe834b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/mwapi/OkHttpJsonApiClient.java b/app/src/main/java/fr/free/nrw/commons/mwapi/OkHttpJsonApiClient.java\nindex e27d76614..6b306690b 100644\n--- a/app/src/main/java/fr/free/nrw/commons/mwapi/OkHttpJsonApiClient.java\n+++ b/app/src/main/java/fr/free/nrw/commons/mwapi/OkHttpJsonApiClient.java\n\n@@ -65,10 +68,19 @@ public class OkHttpJsonApiClient {\n     this.gson = gson;\n   }\n \n+  /**\n+   * The method will gradually calls the leaderboard API and fetches the leaderboard\n+   * @param userName username of leaderboard user\n+   * @param duration duration for leaderboard\n+   * @param category category for leaderboard\n+   * @param limit page size limit for list\n+   * @param offset offset for the list\n+   * @return LeaderboardResponse object\n+   */\n   @NonNull\n   public Observable<LeaderboardResponse> getLeaderboard(String userName, String duration, String category, String limit, String offset) {\n     final String fetchLeaderboardUrlTemplate = wikiMediaTestToolforgeUrl\n-        + \"/leaderboard.py\";\n+        + LEADERBOARD_END_POINT;\n     String url = String.format(Locale.ENGLISH,\n         fetchLeaderboardUrlTemplate,\n         userName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1OTc3Ng==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474459776", "bodyText": "Maybe put it into a constant?", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:17:28Z", "path": "app/src/main/java/fr/free/nrw/commons/mwapi/OkHttpJsonApiClient.java", "diffHunk": "@@ -49,17 +52,90 @@\n   public OkHttpJsonApiClient(OkHttpClient okHttpClient,\n       DepictsClient depictsClient,\n       HttpUrl wikiMediaToolforgeUrl,\n+      HttpUrl wikiMediaTestToolforgeUrl,\n       String sparqlQueryUrl,\n       String campaignsUrl,\n       Gson gson) {\n     this.okHttpClient = okHttpClient;\n     this.depictsClient = depictsClient;\n     this.wikiMediaToolforgeUrl = wikiMediaToolforgeUrl;\n+    this.wikiMediaTestToolforgeUrl = wikiMediaTestToolforgeUrl;\n     this.sparqlQueryUrl = sparqlQueryUrl;\n     this.campaignsUrl = campaignsUrl;\n     this.gson = gson;\n   }\n \n+  @NonNull\n+  public Observable<LeaderboardResponse> getLeaderboard(String userName, String duration, String category, String limit, String offset) {\n+    final String fetchLeaderboardUrlTemplate = wikiMediaTestToolforgeUrl\n+        + \"/leaderboard.py\";", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95deb4d491fc4f96cd7d363a4cf4b8b612fe834b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/mwapi/OkHttpJsonApiClient.java b/app/src/main/java/fr/free/nrw/commons/mwapi/OkHttpJsonApiClient.java\nindex e27d76614..6b306690b 100644\n--- a/app/src/main/java/fr/free/nrw/commons/mwapi/OkHttpJsonApiClient.java\n+++ b/app/src/main/java/fr/free/nrw/commons/mwapi/OkHttpJsonApiClient.java\n\n@@ -65,10 +68,19 @@ public class OkHttpJsonApiClient {\n     this.gson = gson;\n   }\n \n+  /**\n+   * The method will gradually calls the leaderboard API and fetches the leaderboard\n+   * @param userName username of leaderboard user\n+   * @param duration duration for leaderboard\n+   * @param category category for leaderboard\n+   * @param limit page size limit for list\n+   * @param offset offset for the list\n+   * @return LeaderboardResponse object\n+   */\n   @NonNull\n   public Observable<LeaderboardResponse> getLeaderboard(String userName, String duration, String category, String limit, String offset) {\n     final String fetchLeaderboardUrlTemplate = wikiMediaTestToolforgeUrl\n-        + \"/leaderboard.py\";\n+        + LEADERBOARD_END_POINT;\n     String url = String.format(Locale.ENGLISH,\n         fetchLeaderboardUrlTemplate,\n         userName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2MDU0Mg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474460542", "bodyText": "Javadoc", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:18:32Z", "path": "app/src/main/java/fr/free/nrw/commons/mwapi/OkHttpJsonApiClient.java", "diffHunk": "@@ -49,17 +52,90 @@\n   public OkHttpJsonApiClient(OkHttpClient okHttpClient,\n       DepictsClient depictsClient,\n       HttpUrl wikiMediaToolforgeUrl,\n+      HttpUrl wikiMediaTestToolforgeUrl,\n       String sparqlQueryUrl,\n       String campaignsUrl,\n       Gson gson) {\n     this.okHttpClient = okHttpClient;\n     this.depictsClient = depictsClient;\n     this.wikiMediaToolforgeUrl = wikiMediaToolforgeUrl;\n+    this.wikiMediaTestToolforgeUrl = wikiMediaTestToolforgeUrl;\n     this.sparqlQueryUrl = sparqlQueryUrl;\n     this.campaignsUrl = campaignsUrl;\n     this.gson = gson;\n   }\n \n+  @NonNull\n+  public Observable<LeaderboardResponse> getLeaderboard(String userName, String duration, String category, String limit, String offset) {\n+    final String fetchLeaderboardUrlTemplate = wikiMediaTestToolforgeUrl\n+        + \"/leaderboard.py\";\n+    String url = String.format(Locale.ENGLISH,\n+        fetchLeaderboardUrlTemplate,\n+        userName,\n+        duration,\n+        category,\n+        limit,\n+        offset);\n+    HttpUrl.Builder urlBuilder = HttpUrl.parse(url).newBuilder();\n+    urlBuilder.addQueryParameter(\"user\", userName);\n+    urlBuilder.addQueryParameter(\"duration\", duration);\n+    urlBuilder.addQueryParameter(\"category\", category);\n+    urlBuilder.addQueryParameter(\"limit\", limit);\n+    urlBuilder.addQueryParameter(\"offset\", offset);\n+    Timber.i(\"Url %s\", urlBuilder.toString());\n+    Request request = new Request.Builder()\n+        .url(urlBuilder.toString())\n+        .build();\n+    return Observable.fromCallable(() -> {\n+      Response response = okHttpClient.newCall(request).execute();\n+      if (response != null && response.body() != null && response.isSuccessful()) {\n+        String json = response.body().string();\n+        if (json == null) {\n+          return new LeaderboardResponse();\n+        }\n+        Timber.d(\"Response for leaderboard is %s\", json);\n+        try {\n+          return gson.fromJson(json, LeaderboardResponse.class);\n+        } catch (Exception e) {\n+          return new LeaderboardResponse();\n+        }\n+      }\n+      return new LeaderboardResponse();\n+    });\n+  }\n+\n+  @NonNull", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95deb4d491fc4f96cd7d363a4cf4b8b612fe834b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/mwapi/OkHttpJsonApiClient.java b/app/src/main/java/fr/free/nrw/commons/mwapi/OkHttpJsonApiClient.java\nindex e27d76614..6b306690b 100644\n--- a/app/src/main/java/fr/free/nrw/commons/mwapi/OkHttpJsonApiClient.java\n+++ b/app/src/main/java/fr/free/nrw/commons/mwapi/OkHttpJsonApiClient.java\n\n@@ -65,10 +68,19 @@ public class OkHttpJsonApiClient {\n     this.gson = gson;\n   }\n \n+  /**\n+   * The method will gradually calls the leaderboard API and fetches the leaderboard\n+   * @param userName username of leaderboard user\n+   * @param duration duration for leaderboard\n+   * @param category category for leaderboard\n+   * @param limit page size limit for list\n+   * @param offset offset for the list\n+   * @return LeaderboardResponse object\n+   */\n   @NonNull\n   public Observable<LeaderboardResponse> getLeaderboard(String userName, String duration, String category, String limit, String offset) {\n     final String fetchLeaderboardUrlTemplate = wikiMediaTestToolforgeUrl\n-        + \"/leaderboard.py\";\n+        + LEADERBOARD_END_POINT;\n     String url = String.format(Locale.ENGLISH,\n         fetchLeaderboardUrlTemplate,\n         userName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2MDc2NA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474460764", "bodyText": "Javadoc", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:18:51Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/ProfileActivity.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package fr.free.nrw.commons.profile;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.os.Bundle;\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentManager;\n+import androidx.viewpager.widget.ViewPager;\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import com.google.android.material.tabs.TabLayout;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.profile.achievements.AchievementsFragment;\n+import fr.free.nrw.commons.profile.leaderboard.LeaderboardFragment;\n+import fr.free.nrw.commons.theme.NavigationBaseActivity;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+public class ProfileActivity extends NavigationBaseActivity {", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95deb4d491fc4f96cd7d363a4cf4b8b612fe834b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/ProfileActivity.java b/app/src/main/java/fr/free/nrw/commons/profile/ProfileActivity.java\nindex ee319ba9a..1ac4c8f4e 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/ProfileActivity.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/ProfileActivity.java\n\n@@ -16,7 +16,10 @@ import fr.free.nrw.commons.theme.NavigationBaseActivity;\n import java.util.ArrayList;\n import java.util.List;\n \n-\n+/**\n+ * This activity will set two tabs, achievements and\n+ * each tab will have their own fragments\n+ */\n public class ProfileActivity extends NavigationBaseActivity {\n \n     private FragmentManager supportFragmentManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2MTI0OA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474461248", "bodyText": "Javadoc", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:19:26Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/ViewPagerAdapter.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package fr.free.nrw.commons.profile;\n+\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentManager;\n+import androidx.fragment.app.FragmentPagerAdapter;\n+import java.util.ArrayList;\n+import java.util.List;\n+", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95deb4d491fc4f96cd7d363a4cf4b8b612fe834b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/ViewPagerAdapter.java b/app/src/main/java/fr/free/nrw/commons/profile/ViewPagerAdapter.java\nindex d9db05696..16a6197fe 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/ViewPagerAdapter.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/ViewPagerAdapter.java\n\n@@ -6,6 +6,9 @@ import androidx.fragment.app.FragmentPagerAdapter;\n import java.util.ArrayList;\n import java.util.List;\n \n+/**\n+ * This View Pager Adapter will set the fragments for profile activity\n+ */\n public class ViewPagerAdapter  extends FragmentPagerAdapter {\n     private List<Fragment> fragmentList = new ArrayList<>();\n     private List<String> fragmentTitleList = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2MjEzMQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474462131", "bodyText": "Javadoc and scope, for instance private", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:20:29Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/achievements/AchievementsFragment.java", "diffHunk": "@@ -64,71 +55,85 @@\n \n     @BindView(R.id.achievement_badge_image)\n     ImageView imageView;\n+\n     @BindView(R.id.achievement_badge_text)\n     TextView badgeText;\n+\n     @BindView(R.id.achievement_level)\n     TextView levelNumber;\n-    @BindView(R.id.toolbar)\n-    Toolbar toolbar;\n+\n     @BindView(R.id.thanks_received)\n     TextView thanksReceived;\n+\n     @BindView(R.id.images_uploaded_progressbar)\n     CircleProgressBar imagesUploadedProgressbar;\n+\n     @BindView(R.id.images_used_by_wiki_progress_bar)\n     CircleProgressBar imagesUsedByWikiProgressBar;\n+\n     @BindView(R.id.image_reverts_progressbar)\n     CircleProgressBar imageRevertsProgressbar;\n+\n     @BindView(R.id.image_featured)\n     TextView imagesFeatured;\n+\n     @BindView(R.id.images_revert_limit_text)\n     TextView imagesRevertLimitText;\n+\n     @BindView(R.id.progressBar)\n     ProgressBar progressBar;\n+\n     @BindView(R.id.layout_image_uploaded)\n     RelativeLayout layoutImageUploaded;\n+\n     @BindView(R.id.layout_image_reverts)\n     RelativeLayout layoutImageReverts;\n+\n     @BindView(R.id.layout_image_used_by_wiki)\n     RelativeLayout layoutImageUsedByWiki;\n+\n     @BindView(R.id.layout_statistics)\n     LinearLayout layoutStatistics;\n+\n     @BindView(R.id.images_used_by_wiki_text)\n     TextView imageByWikiText;\n+\n     @BindView(R.id.images_reverted_text)\n     TextView imageRevertedText;\n+\n     @BindView(R.id.images_upload_text_param)\n     TextView imageUploadedText;\n+\n     @BindView(R.id.wikidata_edits)\n     TextView wikidataEditsText;\n \n-\n     @Inject\n     SessionManager sessionManager;\n+\n     @Inject\n     OkHttpJsonApiClient okHttpJsonApiClient;\n-    MenuItem item;\n \n     private CompositeDisposable compositeDisposable = new CompositeDisposable();\n \n     // To keep track of the number of wiki edits made by a user\n     private int numberOfEdits = 0;\n \n+    MenuItem item;", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "621c80348bd4d661b80f172b3dd52d0f2abe270e", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/achievements/AchievementsFragment.java b/app/src/main/java/fr/free/nrw/commons/profile/achievements/AchievementsFragment.java\nindex 703f14f2f..cb0e924b4 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/achievements/AchievementsFragment.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/achievements/AchievementsFragment.java\n\n@@ -118,7 +118,8 @@ public class AchievementsFragment extends CommonsDaggerSupportFragment {\n     // To keep track of the number of wiki edits made by a user\n     private int numberOfEdits = 0;\n \n-    MenuItem item;\n+    // menu item for action bar\n+    private MenuItem item;\n \n     /**\n      * This method helps in the creation Achievement screen and\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2Mjk3Ng==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474462976", "bodyText": "\"displays\"", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:21:37Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/achievements/AchievementsFragment.java", "diffHunk": "@@ -180,28 +171,47 @@ public boolean onOptionsItemSelected(MenuItem item) {\n         int id = item.getItemId();\n         // take screenshot in form of bitmap and show it in Alert Dialog\n         if (id == R.id.share_app_icon) {\n-            View rootView = getWindow().getDecorView().findViewById(android.R.id.content);\n+            View rootView = getActivity().getWindow().getDecorView().findViewById(android.R.id.content);\n             Bitmap screenShot = Utils.getScreenShot(rootView);\n             showAlert(screenShot);\n         }\n \n         return super.onOptionsItemSelected(item);\n     }\n \n+    /**\n+     * It display the alertDialog with Image of screenshot", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "621c80348bd4d661b80f172b3dd52d0f2abe270e", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/achievements/AchievementsFragment.java b/app/src/main/java/fr/free/nrw/commons/profile/achievements/AchievementsFragment.java\nindex 703f14f2f..cb0e924b4 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/achievements/AchievementsFragment.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/achievements/AchievementsFragment.java\n\n@@ -180,7 +181,7 @@ public class AchievementsFragment extends CommonsDaggerSupportFragment {\n     }\n \n     /**\n-     * It display the alertDialog with Image of screenshot\n+     * It displays the alertDialog with Image of screenshot\n      * @param screenshot\n      */\n     public void showAlert(Bitmap screenshot){\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2MzkzMQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474463931", "bodyText": "Javadoc", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:22:51Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/DataSourceClass.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.LOADED;\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.LOADING;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.PageKeyedDataSource;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.mwapi.OkHttpJsonApiClient;\n+import io.reactivex.disposables.CompositeDisposable;\n+import java.util.Objects;\n+import timber.log.Timber;\n+\n+public class DataSourceClass extends PageKeyedDataSource<Integer, LeaderboardList> {", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a63ef00e73c57129f5c7fcb943f0ca96fa0d4e4b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/DataSourceClass.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/DataSourceClass.java\nindex 09c612995..7feac4659 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/DataSourceClass.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/DataSourceClass.java\n\n@@ -23,15 +23,6 @@ public class DataSourceClass extends PageKeyedDataSource<Integer, LeaderboardLis\n     private int limit;\n     private int offset;\n \n-    /**\n-     * Initialise the Data Source Class with API params\n-     * @param okHttpJsonApiClient\n-     * @param sessionManager\n-     * @param duration\n-     * @param category\n-     * @param limit\n-     * @param offset\n-     */\n     public DataSourceClass(OkHttpJsonApiClient okHttpJsonApiClient,SessionManager sessionManager,\n         String duration, String category, int limit, int offset) {\n         this.okHttpJsonApiClient = okHttpJsonApiClient;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2NDIyNg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474464226", "bodyText": "Javadoc", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:23:14Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/DataSourceClass.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.LOADED;\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.LOADING;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.PageKeyedDataSource;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.mwapi.OkHttpJsonApiClient;\n+import io.reactivex.disposables.CompositeDisposable;\n+import java.util.Objects;\n+import timber.log.Timber;\n+\n+public class DataSourceClass extends PageKeyedDataSource<Integer, LeaderboardList> {\n+\n+    private OkHttpJsonApiClient okHttpJsonApiClient;\n+    private SessionManager sessionManager;\n+    private MutableLiveData<String> progressLiveStatus;\n+    private CompositeDisposable compositeDisposable = new CompositeDisposable();\n+    private String duration;\n+    private String category;\n+    private int limit;\n+    private int offset;\n+\n+    /**\n+     * Initialise the Data Source Class with API params\n+     * @param okHttpJsonApiClient\n+     * @param sessionManager\n+     * @param duration\n+     * @param category\n+     * @param limit\n+     * @param offset\n+     */\n+    public DataSourceClass(OkHttpJsonApiClient okHttpJsonApiClient,SessionManager sessionManager,\n+        String duration, String category, int limit, int offset) {\n+        this.okHttpJsonApiClient = okHttpJsonApiClient;\n+        this.sessionManager = sessionManager;\n+        this.duration = duration;\n+        this.category = category;\n+        this.limit = limit;\n+        this.offset = offset;\n+        progressLiveStatus = new MutableLiveData<>();\n+    }\n+\n+\n+    /**\n+     * @return the status of the list\n+     */\n+    public MutableLiveData<String> getProgressLiveStatus() {\n+        return progressLiveStatus;\n+    }\n+\n+    /**\n+     * Loads the initial set of data from API\n+     * @param params\n+     * @param callback\n+     */\n+    @Override\n+    public void loadInitial(@NonNull LoadInitialParams<Integer> params,\n+        @NonNull LoadInitialCallback<Integer, LeaderboardList> callback) {\n+\n+        compositeDisposable.add(okHttpJsonApiClient\n+                .getLeaderboard(Objects.requireNonNull(sessionManager.getCurrentAccount()).name,\n+                    duration, category, String.valueOf(limit), String.valueOf(offset))\n+                .doOnSubscribe(disposable -> {\n+                    compositeDisposable.add(disposable);\n+                    progressLiveStatus.postValue(LOADING);\n+                }).subscribe(\n+                response -> {\n+                    if (response != null && response.getStatus() == 200) {\n+                        progressLiveStatus.postValue(LOADED);\n+                        callback.onResult(response.getLeaderboardList(), null, response.getLimit());\n+                    }\n+                },\n+                t -> {\n+                    Timber.e(t, \"Fetching leaderboard statistics failed\");\n+                    progressLiveStatus.postValue(LOADING);\n+                }\n+            ));\n+\n+    }\n+\n+    @Override", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a63ef00e73c57129f5c7fcb943f0ca96fa0d4e4b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/DataSourceClass.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/DataSourceClass.java\nindex 09c612995..7feac4659 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/DataSourceClass.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/DataSourceClass.java\n\n@@ -23,15 +23,6 @@ public class DataSourceClass extends PageKeyedDataSource<Integer, LeaderboardLis\n     private int limit;\n     private int offset;\n \n-    /**\n-     * Initialise the Data Source Class with API params\n-     * @param okHttpJsonApiClient\n-     * @param sessionManager\n-     * @param duration\n-     * @param category\n-     * @param limit\n-     * @param offset\n-     */\n     public DataSourceClass(OkHttpJsonApiClient okHttpJsonApiClient,SessionManager sessionManager,\n         String duration, String category, int limit, int offset) {\n         this.okHttpJsonApiClient = okHttpJsonApiClient;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2NDMwNQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474464305", "bodyText": "Javadoc", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:23:21Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/DataSourceFactory.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.DataSource;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.mwapi.OkHttpJsonApiClient;\n+import io.reactivex.disposables.CompositeDisposable;\n+\n+public class DataSourceFactory extends DataSource.Factory<Integer, LeaderboardList> {", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a63ef00e73c57129f5c7fcb943f0ca96fa0d4e4b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/DataSourceFactory.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/DataSourceFactory.java\nindex 95c888a9a..c43cd3631 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/DataSourceFactory.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/DataSourceFactory.java\n\n@@ -57,17 +57,10 @@ public class DataSourceFactory extends DataSource.Factory<Integer, LeaderboardLi\n         liveData = new MutableLiveData<>();\n     }\n \n-    /**\n-     * @return the live data\n-     */\n     public MutableLiveData<DataSourceClass> getMutableLiveData() {\n         return liveData;\n     }\n \n-    /**\n-     * Creates the new instance of data source class\n-     * @return\n-     */\n     @Override\n     public DataSource<Integer, LeaderboardList> create() {\n         DataSourceClass dataSourceClass = new DataSourceClass(okHttpJsonApiClient, sessionManager, duration, category, limit, offset);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2NDkwNw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474464907", "bodyText": "I know it is boring, but some simple Javadoc would be better for these methods too.", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:24:09Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/DataSourceFactory.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.DataSource;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.mwapi.OkHttpJsonApiClient;\n+import io.reactivex.disposables.CompositeDisposable;\n+\n+public class DataSourceFactory extends DataSource.Factory<Integer, LeaderboardList> {\n+\n+    private MutableLiveData<DataSourceClass> liveData;\n+    private OkHttpJsonApiClient okHttpJsonApiClient;\n+    private CompositeDisposable compositeDisposable;\n+    private SessionManager sessionManager;\n+    private String duration;\n+    private String category;\n+    private int limit;\n+    private int offset;\n+\n+    public String getDuration() {", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a63ef00e73c57129f5c7fcb943f0ca96fa0d4e4b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/DataSourceFactory.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/DataSourceFactory.java\nindex 95c888a9a..c43cd3631 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/DataSourceFactory.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/DataSourceFactory.java\n\n@@ -57,17 +57,10 @@ public class DataSourceFactory extends DataSource.Factory<Integer, LeaderboardLi\n         liveData = new MutableLiveData<>();\n     }\n \n-    /**\n-     * @return the live data\n-     */\n     public MutableLiveData<DataSourceClass> getMutableLiveData() {\n         return liveData;\n     }\n \n-    /**\n-     * Creates the new instance of data source class\n-     * @return\n-     */\n     @Override\n     public DataSource<Integer, LeaderboardList> create() {\n         DataSourceClass dataSourceClass = new DataSourceClass(okHttpJsonApiClient, sessionManager, duration, category, limit, offset);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2NTI0MQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474465241", "bodyText": "Javadoc", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:24:32Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardConstants.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+public class LeaderboardConstants {", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95deb4d491fc4f96cd7d363a4cf4b8b612fe834b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardConstants.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardConstants.java\nindex 2679b4a2c..c32d84352 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardConstants.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardConstants.java\n\n@@ -1,5 +1,8 @@\n package fr.free.nrw.commons.profile.leaderboard;\n \n+/**\n+ * This class contains the constant variables for leaderboard\n+ */\n public class LeaderboardConstants {\n \n     public static final int PAGE_SIZE = 10;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2NTQ0Mw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474465443", "bodyText": "Javadoc", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:24:48Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardFragment.java", "diffHunk": "@@ -0,0 +1,244 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.LOADED;\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.LOADING;\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.PAGE_SIZE;\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.START_OFFSET;\n+\n+import android.accounts.Account;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.AdapterView;\n+import android.widget.AdapterView.OnItemSelectedListener;\n+import android.widget.ArrayAdapter;\n+import android.widget.ProgressBar;\n+import android.widget.Spinner;\n+import androidx.lifecycle.ViewModelProvider;\n+import androidx.recyclerview.widget.LinearLayoutManager;\n+import androidx.recyclerview.widget.MergeAdapter;\n+import androidx.recyclerview.widget.RecyclerView;\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsDaggerSupportFragment;\n+import fr.free.nrw.commons.mwapi.OkHttpJsonApiClient;\n+import fr.free.nrw.commons.utils.ViewUtil;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.Objects;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class LeaderboardFragment extends CommonsDaggerSupportFragment {", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a63ef00e73c57129f5c7fcb943f0ca96fa0d4e4b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardFragment.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardFragment.java\nindex a0a66b587..09738a815 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardFragment.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardFragment.java\n\n@@ -110,9 +110,6 @@ public class LeaderboardFragment extends CommonsDaggerSupportFragment {\n         return rootView;\n     }\n \n-    /**\n-     * Refreshes the leaderboard list\n-     */\n     private void refreshLeaderboard() {\n         if (viewModel != null) {\n             viewModel.refresh(duration, category, limit, offset);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2NTgxNA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474465814", "bodyText": "Scope and Javadoc for all variables", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:25:15Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardFragment.java", "diffHunk": "@@ -0,0 +1,244 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.LOADED;\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.LOADING;\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.PAGE_SIZE;\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.START_OFFSET;\n+\n+import android.accounts.Account;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.AdapterView;\n+import android.widget.AdapterView.OnItemSelectedListener;\n+import android.widget.ArrayAdapter;\n+import android.widget.ProgressBar;\n+import android.widget.Spinner;\n+import androidx.lifecycle.ViewModelProvider;\n+import androidx.recyclerview.widget.LinearLayoutManager;\n+import androidx.recyclerview.widget.MergeAdapter;\n+import androidx.recyclerview.widget.RecyclerView;\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsDaggerSupportFragment;\n+import fr.free.nrw.commons.mwapi.OkHttpJsonApiClient;\n+import fr.free.nrw.commons.utils.ViewUtil;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.Objects;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class LeaderboardFragment extends CommonsDaggerSupportFragment {\n+\n+    @BindView(R.id.leaderboard_list)\n+    RecyclerView leaderboardListRecyclerView;\n+\n+    @BindView(R.id.progressBar)\n+    ProgressBar progressBar;\n+\n+    @BindView(R.id.category_spinner)\n+    Spinner categorySpinner;\n+\n+    @BindView(R.id.duration_spinner)\n+    Spinner durationSpinner;\n+\n+    @Inject\n+    SessionManager sessionManager;\n+\n+    @Inject\n+    OkHttpJsonApiClient okHttpJsonApiClient;\n+\n+    @Inject\n+    ViewModelFactory viewModelFactory;\n+\n+    LeaderboardListViewModel viewModel;\n+\n+    private CompositeDisposable compositeDisposable = new CompositeDisposable();\n+\n+    String duration;", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a63ef00e73c57129f5c7fcb943f0ca96fa0d4e4b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardFragment.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardFragment.java\nindex a0a66b587..09738a815 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardFragment.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardFragment.java\n\n@@ -110,9 +110,6 @@ public class LeaderboardFragment extends CommonsDaggerSupportFragment {\n         return rootView;\n     }\n \n-    /**\n-     * Refreshes the leaderboard list\n-     */\n     private void refreshLeaderboard() {\n         if (viewModel != null) {\n             viewModel.refresh(duration, category, limit, offset);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2NTkyNw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474465927", "bodyText": "scope and Javadoc", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:25:23Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardFragment.java", "diffHunk": "@@ -0,0 +1,244 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.LOADED;\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.LOADING;\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.PAGE_SIZE;\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.START_OFFSET;\n+\n+import android.accounts.Account;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.AdapterView;\n+import android.widget.AdapterView.OnItemSelectedListener;\n+import android.widget.ArrayAdapter;\n+import android.widget.ProgressBar;\n+import android.widget.Spinner;\n+import androidx.lifecycle.ViewModelProvider;\n+import androidx.recyclerview.widget.LinearLayoutManager;\n+import androidx.recyclerview.widget.MergeAdapter;\n+import androidx.recyclerview.widget.RecyclerView;\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsDaggerSupportFragment;\n+import fr.free.nrw.commons.mwapi.OkHttpJsonApiClient;\n+import fr.free.nrw.commons.utils.ViewUtil;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.Objects;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+public class LeaderboardFragment extends CommonsDaggerSupportFragment {\n+\n+    @BindView(R.id.leaderboard_list)\n+    RecyclerView leaderboardListRecyclerView;\n+\n+    @BindView(R.id.progressBar)\n+    ProgressBar progressBar;\n+\n+    @BindView(R.id.category_spinner)\n+    Spinner categorySpinner;\n+\n+    @BindView(R.id.duration_spinner)\n+    Spinner durationSpinner;\n+\n+    @Inject\n+    SessionManager sessionManager;\n+\n+    @Inject\n+    OkHttpJsonApiClient okHttpJsonApiClient;\n+\n+    @Inject\n+    ViewModelFactory viewModelFactory;\n+\n+    LeaderboardListViewModel viewModel;", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a63ef00e73c57129f5c7fcb943f0ca96fa0d4e4b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardFragment.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardFragment.java\nindex a0a66b587..09738a815 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardFragment.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardFragment.java\n\n@@ -110,9 +110,6 @@ public class LeaderboardFragment extends CommonsDaggerSupportFragment {\n         return rootView;\n     }\n \n-    /**\n-     * Refreshes the leaderboard list\n-     */\n     private void refreshLeaderboard() {\n         if (viewModel != null) {\n             viewModel.refresh(duration, category, limit, offset);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2NzY1Mw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474467653", "bodyText": "Javadoc, try to paraphrase what the feature does, same for the methods.", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:27:33Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardList.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+import androidx.annotation.NonNull;\n+import androidx.recyclerview.widget.DiffUtil;\n+import androidx.recyclerview.widget.DiffUtil.ItemCallback;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+public class LeaderboardList {", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a63ef00e73c57129f5c7fcb943f0ca96fa0d4e4b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardList.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardList.java\nindex e5671abfa..395705568 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardList.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardList.java\n\n@@ -57,9 +57,6 @@ public class LeaderboardList {\n     }\n \n \n-    /**\n-     * This method checks for the diff in the callbacks for paged lists\n-     */\n     public static DiffUtil.ItemCallback<LeaderboardList> DIFF_CALLBACK =\n         new ItemCallback<LeaderboardList>() {\n             @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2NzkyMw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474467923", "bodyText": "Javadoc", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:27:52Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardListAdapter.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.USER_LINK_PREFIX;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.TextView;\n+import androidx.annotation.NonNull;\n+import androidx.paging.PagedListAdapter;\n+import androidx.recyclerview.widget.RecyclerView;\n+import com.facebook.drawee.view.SimpleDraweeView;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.Utils;\n+\n+public class LeaderboardListAdapter extends PagedListAdapter<LeaderboardList, LeaderboardListAdapter.ListViewHolder> {", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a63ef00e73c57129f5c7fcb943f0ca96fa0d4e4b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardListAdapter.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardListAdapter.java\nindex 66a0c9c1d..c56e6923d 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardListAdapter.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardListAdapter.java\n\n@@ -79,6 +79,8 @@ public class LeaderboardListAdapter extends PagedListAdapter<LeaderboardList, Le\n \n         /*\n           Open the user profile in a webview when a username is clicked on leaderboard\n+          We are not using the commons url from build config because the leaderboard is only\n+          supported for prod at the moment\n          */\n         holder.itemView.setOnClickListener(view -> Utils.handleWebUrl(holder.getContext(), Uri.parse(\n             String.format(\"%s%s\", USER_LINK_PREFIX, getItem(position).getUsername()))));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2ODAzNg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474468036", "bodyText": "Javadoc", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:28:02Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardListViewModel.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.PAGE_SIZE;\n+\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.lifecycle.Transformations;\n+import androidx.lifecycle.ViewModel;\n+import androidx.paging.LivePagedListBuilder;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.mwapi.OkHttpJsonApiClient;\n+import io.reactivex.disposables.CompositeDisposable;\n+\n+public class LeaderboardListViewModel extends ViewModel {", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a63ef00e73c57129f5c7fcb943f0ca96fa0d4e4b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardListViewModel.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardListViewModel.java\nindex 48caaf890..56008a03b 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardListViewModel.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardListViewModel.java\n\n@@ -28,9 +28,6 @@ public class LeaderboardListViewModel extends ViewModel {\n     }\n \n \n-    /**\n-     * Initialises the paging\n-     */\n     private void initializePaging() {\n \n         PagedList.Config pagedListConfig =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2ODExOQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474468119", "bodyText": "Javadoc", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:28:09Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardListViewModel.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.PAGE_SIZE;\n+\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.lifecycle.Transformations;\n+import androidx.lifecycle.ViewModel;\n+import androidx.paging.LivePagedListBuilder;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.mwapi.OkHttpJsonApiClient;\n+import io.reactivex.disposables.CompositeDisposable;\n+\n+public class LeaderboardListViewModel extends ViewModel {\n+\n+    private DataSourceFactory dataSourceFactory;\n+    private LiveData<PagedList<LeaderboardList>> listLiveData;\n+    private CompositeDisposable compositeDisposable = new CompositeDisposable();\n+    private LiveData<String> progressLoadStatus = new MutableLiveData<>();\n+\n+    public LeaderboardListViewModel(OkHttpJsonApiClient okHttpJsonApiClient, SessionManager", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a63ef00e73c57129f5c7fcb943f0ca96fa0d4e4b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardListViewModel.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardListViewModel.java\nindex 48caaf890..56008a03b 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardListViewModel.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardListViewModel.java\n\n@@ -28,9 +28,6 @@ public class LeaderboardListViewModel extends ViewModel {\n     }\n \n \n-    /**\n-     * Initialises the paging\n-     */\n     private void initializePaging() {\n \n         PagedList.Config pagedListConfig =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2ODI1Nw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474468257", "bodyText": "Javadoc", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:28:19Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardResponse.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+import java.util.List;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+public class LeaderboardResponse {", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95deb4d491fc4f96cd7d363a4cf4b8b612fe834b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardResponse.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardResponse.java\nindex 838f7352a..f19c43203 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardResponse.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardResponse.java\n\n@@ -4,6 +4,9 @@ import java.util.List;\n import com.google.gson.annotations.Expose;\n import com.google.gson.annotations.SerializedName;\n \n+/**\n+ * GSON Response Class for Leaderboard API response\n+ */\n public class LeaderboardResponse {\n \n     @SerializedName(\"status\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2ODQ1NQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474468455", "bodyText": "Javadoc", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:28:33Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/UpdateAvatarResponse.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+public class UpdateAvatarResponse {", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95deb4d491fc4f96cd7d363a4cf4b8b612fe834b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/UpdateAvatarResponse.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/UpdateAvatarResponse.java\nindex 65e98ab6c..ce6cceb22 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/UpdateAvatarResponse.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/UpdateAvatarResponse.java\n\n@@ -3,6 +3,9 @@ package fr.free.nrw.commons.profile.leaderboard;\n import com.google.gson.annotations.Expose;\n import com.google.gson.annotations.SerializedName;\n \n+/**\n+ * GSON Response Class for Update Avatar API response\n+ */\n public class UpdateAvatarResponse {\n \n   @SerializedName(\"status\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2ODUzNQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474468535", "bodyText": "Javadoc", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:28:39Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/UserDetailAdapter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.TextView;\n+import androidx.annotation.NonNull;\n+import androidx.recyclerview.widget.RecyclerView;\n+import com.facebook.drawee.view.SimpleDraweeView;\n+import fr.free.nrw.commons.R;\n+\n+public class UserDetailAdapter extends RecyclerView.Adapter<UserDetailAdapter.DataViewHolder> {", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a63ef00e73c57129f5c7fcb943f0ca96fa0d4e4b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/UserDetailAdapter.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/UserDetailAdapter.java\nindex da5ab29d3..631126540 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/UserDetailAdapter.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/UserDetailAdapter.java\n\n@@ -34,21 +34,11 @@ public class UserDetailAdapter extends RecyclerView.Adapter<UserDetailAdapter.Da\n             this.count = itemView.findViewById(R.id.count);\n         }\n \n-        /**\n-         * This method will return the Context\n-         * @return Context\n-         */\n         public Context getContext() {\n             return itemView.getContext();\n         }\n     }\n \n-    /**\n-     * Overrides the onCreateViewHolder and sets the view with leaderboard user element layout\n-     * @param parent\n-     * @param viewType\n-     * @return\n-     */\n     @NonNull\n     @Override\n     public UserDetailAdapter.DataViewHolder onCreateViewHolder(@NonNull ViewGroup parent,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2ODY3Mg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r474468672", "bodyText": "Javadoc", "author": "nicolas-raoul", "createdAt": "2020-08-21T07:28:49Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/ViewModelFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.ViewModel;\n+import androidx.lifecycle.ViewModelProvider;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.mwapi.OkHttpJsonApiClient;\n+import javax.inject.Inject;\n+\n+public class ViewModelFactory implements ViewModelProvider.Factory {", "originalCommit": "43a661512b10e944c14bfcb4b02b0e8401a00db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a63ef00e73c57129f5c7fcb943f0ca96fa0d4e4b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/ViewModelFactory.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/ViewModelFactory.java\nindex 8e9b456f0..9d98ea117 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/ViewModelFactory.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/ViewModelFactory.java\n\n@@ -20,12 +20,6 @@ public class ViewModelFactory implements ViewModelProvider.Factory {\n     }\n \n \n-    /**\n-     * Creats a new LeaderboardListViewModel\n-     * @param modelClass\n-     * @param <T>\n-     * @return\n-     */\n     @NonNull\n     @Override\n     public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {\n"}}, {"oid": "a63ef00e73c57129f5c7fcb943f0ca96fa0d4e4b", "url": "https://github.com/commons-app/apps-android-commons/commit/a63ef00e73c57129f5c7fcb943f0ca96fa0d4e4b", "message": "[GSoC] Updated leaderboard string (#3897)\n\n* Localisation updates from https://translatewiki.net.\r\n\r\n* Localisation updates from https://translatewiki.net.\r\n\r\n* #3749 Improve MediaClient UnitTests  (#3846)\r\n\r\n* #3468 Switch from RvRenderer to AdapterDelegates - replace SearchDepictionsRenderer\r\n\r\n* #3468 Switch from RvRenderer to AdapterDelegates - replace UploadCategoryDepictionsRenderer\r\n\r\n* #3468 Switch from RvRenderer to AdapterDelegates - update BaseAdapter to be easier to use\r\n\r\n* #3468 Switch from RvRenderer to AdapterDelegates - replace SearchImagesRenderer\r\n\r\n* #3468 Switch from RvRenderer to AdapterDelegates - replace SearchCategoriesRenderer\r\n\r\n* #3468 Switch from RvRenderer to AdapterDelegates - replace NotificationRenderer\r\n\r\n* #3468 Switch from RvRenderer to AdapterDelegates - replace UploadDepictsRenderer\r\n\r\n* #3468 Switch from RvRenderer to AdapterDelegates - replace PlaceRenderer\r\n\r\n* #3756 Convert SearchDepictionsFragment to use Pagination - convert SearchDepictionsFragment\r\n\r\n* #3756 Convert SearchDepictionsFragment to use Pagination - fix presenter unit tests now that view is not nullable - fix Category prefix imports\r\n\r\n* #3756 Convert SearchDepictionsFragment to use Pagination - test DataSource related classes\r\n\r\n* #3756 Convert SearchDepictionsFragment to use Pagination - reset rx scheduler - ignore failing test\r\n\r\n* #3760 Convert SearchCategoriesFragment to use Pagination - extract functionality of pagination to base classes - add category pagination\r\n\r\n* #3772 Convert SearchImagesFragment to use Pagination  - convert SearchImagesFragment - tidy up showing the empty view - make search fragments show snackbar with appropriate text\r\n\r\n* #3772 Convert SearchImagesFragment to use Pagination  - allow viewpager to load more data\r\n\r\n* #3760 remove test that got re-added by merge\r\n\r\n* #3760 remove duplicate dependency\r\n\r\n* #3772 fix compilation\r\n\r\n* #3780 Create media using a combination of Entities & MwQueryResult - construct media with an entity - move fields from media down to contribution - move dynamic fields outside of media - remove unused constructors - remove all unnecessary fetching of captions/descriptions - bump database version\r\n\r\n* #3808 Construct media objects that depict an item id correctly - use generator to construct media for DepictedImages\r\n\r\n* #3810 Convert DepictedImagesFragment to use Pagination - extract common media paging methods - convert to DepictedImages to use pagination\r\n\r\n* #3810 Convert DepictedImagesFragment to use Pagination - rename base classes to better reflect usage\r\n\r\n* #3810 Convert DepictedImagesFragment to use Pagination - map to empty result with no pages\r\n\r\n* #3810 Convert DepictedImagesFragment to use Pagination - align test with returned values\r\n\r\n* #3780 Create media using a combination of Entities & MwQueryResult - update wikicode to align with expected behaviour\r\n\r\n* #3780 Create media using a combination of Entities & MwQueryResult - replace old site of thumbnail title with most relevant caption\r\n\r\n* #3818 Convert SubDepictionListFragment to use Pagination - replace SubDepictionList with Child and Parent Fragments - replace contracts with simple presenter declarations - move classes to appropriate packages - delete unused network models - delete duplicated paging classes\r\n\r\n* #3820 Convert CategoryImagesListFragment to use Pagination - replace CategoryImagesListFragment with CategoriesMediaFragment - disallow the construction of media objects without imageinfo\r\n\r\n* #3822 Convert SubCategoryImagesListFragment to use Pagination - convert subcategories - add continuation support in category client - rely on interfaces for callbacks of PageableMediaFragments\r\n\r\n* #3822 Convert SubCategoryImagesListFragment to use Pagination - convert parent categories - delete list fragment - creat base class to support continuation requests in clients\r\n\r\n* #3822 Convert SubCategoryImagesListFragment to use Pagination - add tests for ParentCategoriesDataSource\r\n\r\n* #3822 Convert SubCategoryImagesListFragment to use Pagination - remove no longer applicable test\r\n\r\n* #3749 Improve MediaClient UnitTests - test rewrite\r\n\r\n* #3749 Improve MediaClient UnitTests - align with buildConfig property\r\n\r\n* With pause and resume for uploads (#3858)\r\n\r\n* With pause and resume for uploads\r\n\r\n* Dispose current upload\r\n\r\n* Make pause and resume work\r\n\r\n* Check stash validity\r\n\r\n* With java docs\r\n\r\n* minor\r\n\r\n* Localisation updates from https://translatewiki.net.\r\n\r\n* Localisation updates from https://translatewiki.net.\r\n\r\n* Add nearby presenter unit tests  (#3615)\r\n\r\n* init the test file\r\n\r\n* Add tests to check if searchthisarea button action and checkbox actions are added after initialize test\r\n\r\n* Add tests to locked unlocked nearby cases\r\n\r\n* Add tests for null cases in updateMapAndList method\r\n\r\n* Add test to check which locations are used to populate places, depending to LocationChangeType\r\n\r\n* Add tests to test users position is not followed if blue dot (current location marker) is not visible\r\n\r\n* Add tests to decide search this area method visibility on camera move\r\n\r\n* Add tests for multi filteirng of placetypes\r\n\r\n* add tests for single place type selection too\r\n\r\n* Add tests to tests search view focus gain and bottom sheet visibilities\r\n\r\n* Add tests for SearchCloseToCurrentLocation\r\n\r\n* Remove two unneeded getter and setter for isNearbyLocked, use @VisibleForTesting annotation instead\r\n\r\n* Add VisibleForTesting annotation to initializeNearbyOperations method so that it will be private by default\r\n\r\n* Add missing tests\r\n\r\n* Add tests for map updated case and add missing lines those are being tested\r\n\r\n* Add some missind method verifications\r\n\r\n* Create real latlang objects isntead of spying them\r\n\r\n* Use a real presenter object instead of a spy\r\n\r\n* Revert nonneeded @VisibleForTest annotations, instead reach via lockUnlock method\r\n\r\n* Reduce code repetitions\r\n\r\n* Do not call a test from another test method\r\n\r\n* Add some more tests\r\n\r\n* Fix minor issues\r\n\r\n* Hidden categories are not showed in suggested categories (#3853)\r\n\r\n* Localisation updates from https://translatewiki.net.\r\n\r\n* Clarify that the caption would also be used as the image title (#3876)\r\n\r\nThe app uses the fist caption as the file title. This should also\r\nbe communicated to the user via the info box as they would not be\r\naware of it otherwise.\r\n\r\n* Localisation updates from https://translatewiki.net.\r\n\r\n* Delete NearbyMapFragment & NearbyListFragment (#3885)\r\n\r\n* Fixes #3884\r\n* Delete NearbyMapFragment & NearbyListFragment\r\n\r\n* Fixed NearbyParentFragmentPresenterTest\r\n\r\n* Localisation updates from https://translatewiki.net.\r\n\r\n* Localisation updates from https://translatewiki.net.\r\n\r\n* Add more nearby tests (#3877)\r\n\r\n* more nearby tests added\r\n\r\n* Add tests for Label class\r\n\r\n* Add checkbox test javadocs\r\n\r\n* Add javadocs for label\r\n\r\n* Localisation updates from https://translatewiki.net.\r\n\r\n* Updated strings.xml\r\n\r\nCo-authored-by: translatewiki.net <l10n-bot@translatewiki.net>\r\nCo-authored-by: Se\u00e1n Mac Gillicuddy <seantheappdev@gmail.com>\r\nCo-authored-by: Vivek Maskara <maskaravivek@gmail.com>\r\nCo-authored-by: neslihanturan <tur.neslihan@gmail.com>\r\nCo-authored-by: Paulina <63326136+PaulinaQuintero@users.noreply.github.com>\r\nCo-authored-by: Kaartic Sivaraam <kaartic.sivaraam@gmail.com>\r\nCo-authored-by: Ashish Kumar <ashishkumar468@gmail.com>", "committedDate": "2020-08-21T07:39:34Z", "type": "commit"}, {"oid": "e326ef0f0a0a29f48a4be266e6cd69d38d588ded", "url": "https://github.com/commons-app/apps-android-commons/commit/e326ef0f0a0a29f48a4be266e6cd69d38d588ded", "message": "Merge remote-tracking branch 'upstream/leaderboard' into leaderboard", "committedDate": "2020-08-21T07:46:06Z", "type": "commit"}, {"oid": "61db5a6fdd511641ef137fe7ad19aded31a61983", "url": "https://github.com/commons-app/apps-android-commons/commit/61db5a6fdd511641ef137fe7ad19aded31a61983", "message": "Updated Strings", "committedDate": "2020-08-21T07:48:04Z", "type": "commit"}, {"oid": "95deb4d491fc4f96cd7d363a4cf4b8b612fe834b", "url": "https://github.com/commons-app/apps-android-commons/commit/95deb4d491fc4f96cd7d363a4cf4b8b612fe834b", "message": "Added JavaDocs for all methods and classes", "committedDate": "2020-08-21T08:23:16Z", "type": "commit"}, {"oid": "621c80348bd4d661b80f172b3dd52d0f2abe270e", "url": "https://github.com/commons-app/apps-android-commons/commit/621c80348bd4d661b80f172b3dd52d0f2abe270e", "message": "Added JavaDocs for all methods and classes", "committedDate": "2020-08-21T08:26:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg5ODczNQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r476898735", "bodyText": "private?", "author": "nicolas-raoul", "createdAt": "2020-08-26T00:09:25Z", "path": "app/src/main/java/fr/free/nrw/commons/media/MediaDetailPagerFragment.java", "diffHunk": "@@ -22,22 +22,34 @@\n import com.google.android.material.snackbar.Snackbar;\n import fr.free.nrw.commons.Media;\n import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.auth.SessionManager;\n import fr.free.nrw.commons.bookmarks.Bookmark;\n import fr.free.nrw.commons.bookmarks.pictures.BookmarkPicturesContentProvider;\n import fr.free.nrw.commons.bookmarks.pictures.BookmarkPicturesDao;\n import fr.free.nrw.commons.contributions.Contribution;\n import fr.free.nrw.commons.di.CommonsDaggerSupportFragment;\n+import fr.free.nrw.commons.mwapi.OkHttpJsonApiClient;\n import fr.free.nrw.commons.utils.DownloadUtils;\n import fr.free.nrw.commons.utils.ImageUtils;\n import fr.free.nrw.commons.utils.NetworkUtils;\n import fr.free.nrw.commons.utils.ViewUtil;\n+import io.reactivex.disposables.CompositeDisposable;\n+import java.util.Objects;\n import javax.inject.Inject;\n import timber.log.Timber;\n \n public class MediaDetailPagerFragment extends CommonsDaggerSupportFragment implements ViewPager.OnPageChangeListener {\n \n     @Inject BookmarkPicturesDao bookmarkDao;\n \n+    @Inject\n+    OkHttpJsonApiClient okHttpJsonApiClient;\n+\n+    @Inject", "originalCommit": "621c80348bd4d661b80f172b3dd52d0f2abe270e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEzNzE1Mw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r477137153", "bodyText": "We can't make them private if I do I get this error\n                           ^\\apps-android-commons\\app\\src\\main\\java\\fr\\free\\nrw\\commons\\di\\CommonsApplicationComponent.java:44: error: [ComponentProcessor:MiscError] dagger.internal.codegen.ComponentProcessor was unable to process this interface because not all of its dependencies could be resolved. Check for compilation errors or a circular dependency with generated code.\npublic interface CommonsApplicationComponent extends AndroidInjector<ApplicationlessInjection> {\nwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIXwarning: unknown enum constant Scope.LIBRARY_GROUP_PREFIX[WARN] Incremental annotation processing requested, but support is disabled because the following processors are not incremental: butterknife.compiler.ButterKnifeProcessor (NON_INCREMENTAL).\n\n> Task :app:kaptProdDebugKotlin FAILED```", "author": "madhurgupta10", "createdAt": "2020-08-26T08:45:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg5ODczNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1MjE1Mw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r477152153", "bodyText": "Interesting, thanks! How about protected?", "author": "nicolas-raoul", "createdAt": "2020-08-26T09:09:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg5ODczNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0e56a1166ceabe7e1d0121d60d725a8c57aaad4b", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/media/MediaDetailPagerFragment.java b/app/src/main/java/fr/free/nrw/commons/media/MediaDetailPagerFragment.java\nindex 239c4c9a1..e1112f957 100644\n--- a/app/src/main/java/fr/free/nrw/commons/media/MediaDetailPagerFragment.java\n+++ b/app/src/main/java/fr/free/nrw/commons/media/MediaDetailPagerFragment.java\n\n@@ -43,10 +43,10 @@ public class MediaDetailPagerFragment extends CommonsDaggerSupportFragment imple\n     @Inject BookmarkPicturesDao bookmarkDao;\n \n     @Inject\n-    OkHttpJsonApiClient okHttpJsonApiClient;\n+    protected OkHttpJsonApiClient okHttpJsonApiClient;\n \n     @Inject\n-    SessionManager sessionManager;\n+    protected SessionManager sessionManager;\n \n     private static CompositeDisposable compositeDisposable = new CompositeDisposable();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg5OTQ2Nw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r476899467", "bodyText": "private?", "author": "nicolas-raoul", "createdAt": "2020-08-26T00:10:28Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/ProfileActivity.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package fr.free.nrw.commons.profile;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.os.Bundle;\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentManager;\n+import androidx.viewpager.widget.ViewPager;\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import com.google.android.material.tabs.TabLayout;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.profile.achievements.AchievementsFragment;\n+import fr.free.nrw.commons.profile.leaderboard.LeaderboardFragment;\n+import fr.free.nrw.commons.theme.NavigationBaseActivity;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This activity will set two tabs, achievements and\n+ * each tab will have their own fragments\n+ */\n+public class ProfileActivity extends NavigationBaseActivity {\n+\n+    private FragmentManager supportFragmentManager;\n+\n+    @BindView(R.id.viewPager)\n+    ViewPager viewPager;\n+\n+    @BindView(R.id.tab_layout)\n+    TabLayout tabLayout;\n+\n+    ViewPagerAdapter viewPagerAdapter;", "originalCommit": "621c80348bd4d661b80f172b3dd52d0f2abe270e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb83594813cde853e6f95f6cc71de6b71e6b77e5", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/ProfileActivity.java b/app/src/main/java/fr/free/nrw/commons/profile/ProfileActivity.java\nindex 1ac4c8f4e..70b1dccd6 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/ProfileActivity.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/ProfileActivity.java\n\n@@ -30,7 +30,7 @@ public class ProfileActivity extends NavigationBaseActivity {\n     @BindView(R.id.tab_layout)\n     TabLayout tabLayout;\n \n-    ViewPagerAdapter viewPagerAdapter;\n+    private ViewPagerAdapter viewPagerAdapter;\n     private AchievementsFragment achievementsFragment;\n     private LeaderboardFragment leaderboardFragment;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkwMTcxMw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r476901713", "bodyText": "javadoc: brief paraphrasing of what the constant represents concretely.", "author": "nicolas-raoul", "createdAt": "2020-08-26T00:13:47Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardConstants.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+/**\n+ * This class contains the constant variables for leaderboard\n+ */\n+public class LeaderboardConstants {\n+\n+    public static final int PAGE_SIZE = 10;", "originalCommit": "621c80348bd4d661b80f172b3dd52d0f2abe270e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkwMTg4OQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r476901889", "bodyText": "Also for those below.", "author": "nicolas-raoul", "createdAt": "2020-08-26T00:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkwMTcxMw=="}], "type": "inlineReview", "revised_code": {"commit": "fb83594813cde853e6f95f6cc71de6b71e6b77e5", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardConstants.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardConstants.java\nindex c32d84352..9b0fa0f6e 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardConstants.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardConstants.java\n\n@@ -5,18 +5,41 @@ package fr.free.nrw.commons.profile.leaderboard;\n  */\n public class LeaderboardConstants {\n \n+    /**\n+     * This is the size of the page i.e. number items to load in a batch when pagination is performed\n+     */\n     public static final int PAGE_SIZE = 10;\n \n+    /**\n+     * This is the starting offset, we set it to 0 to start loading from rank 1\n+     */\n     public static final int START_OFFSET = 0;\n \n+    /**\n+     * This is the prefix of the user's homepage url, appending the username will give us complete url\n+     */\n     public static final String USER_LINK_PREFIX = \"https://commons.wikimedia.org/wiki/User:\";\n \n+    /**\n+     * This is the a constant string for the state loading, when the pages are getting loaded we can\n+     * use this constant to identify if we need to show the progress bar or not\n+     */\n     public final static String LOADING = \"Loading\";\n \n+    /**\n+     * This is the a constant string for the state loaded, when the pages are loaded we can\n+     * use this constant to identify if we need to show the progress bar or not\n+     */\n     public final static String LOADED = \"Loaded\";\n \n+    /**\n+     * This API endpoint is to update the leaderboard avatar\n+     */\n     public final static String UPDATE_AVATAR_END_POINT = \"/update_avatar.py\";\n \n+    /**\n+     * This API endpoint is to get leaderboard data\n+     */\n     public final static String LEADERBOARD_END_POINT = \"/leaderboard.py\";\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkwMzcyMA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r476903720", "bodyText": "Quick comment giving examples: // Weekly, Yearly, etc\nSame for below.", "author": "nicolas-raoul", "createdAt": "2020-08-26T00:16:50Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardFragment.java", "diffHunk": "@@ -0,0 +1,268 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.LOADED;\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.LOADING;\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.PAGE_SIZE;\n+import static fr.free.nrw.commons.profile.leaderboard.LeaderboardConstants.START_OFFSET;\n+\n+import android.accounts.Account;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.AdapterView;\n+import android.widget.AdapterView.OnItemSelectedListener;\n+import android.widget.ArrayAdapter;\n+import android.widget.ProgressBar;\n+import android.widget.Spinner;\n+import androidx.lifecycle.ViewModelProvider;\n+import androidx.recyclerview.widget.LinearLayoutManager;\n+import androidx.recyclerview.widget.MergeAdapter;\n+import androidx.recyclerview.widget.RecyclerView;\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import fr.free.nrw.commons.R;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsDaggerSupportFragment;\n+import fr.free.nrw.commons.mwapi.OkHttpJsonApiClient;\n+import fr.free.nrw.commons.utils.ViewUtil;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.Objects;\n+import javax.inject.Inject;\n+import timber.log.Timber;\n+\n+/**\n+ * This class extends the CommonsDaggerSupportFragment and creates leaderboard fragment\n+ */\n+public class LeaderboardFragment extends CommonsDaggerSupportFragment {\n+\n+    @BindView(R.id.leaderboard_list)\n+    RecyclerView leaderboardListRecyclerView;\n+\n+    @BindView(R.id.progressBar)\n+    ProgressBar progressBar;\n+\n+    @BindView(R.id.category_spinner)\n+    Spinner categorySpinner;\n+\n+    @BindView(R.id.duration_spinner)\n+    Spinner durationSpinner;\n+\n+    @Inject\n+    SessionManager sessionManager;\n+\n+    @Inject\n+    OkHttpJsonApiClient okHttpJsonApiClient;\n+\n+    @Inject\n+    ViewModelFactory viewModelFactory;\n+\n+    /**\n+     * View model for the paged leaderboard list\n+     */\n+    private LeaderboardListViewModel viewModel;\n+\n+    /**\n+     * Composite disposable for API call\n+     */\n+    private CompositeDisposable compositeDisposable = new CompositeDisposable();\n+\n+    /**\n+     * Duration of the leaderboard API\n+     */\n+    private String duration;\n+\n+    /**\n+     * Category of the Leaderboard API\n+     */\n+    private String category;\n+\n+    /**\n+     * Page size of the leaderboard API\n+     */\n+    private int limit = PAGE_SIZE;\n+\n+    /**\n+     * offset for the leaderboard API\n+     */\n+    private int offset = START_OFFSET;\n+\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n+        View rootView = inflater.inflate(R.layout.fragment_leaderboard, container, false);\n+        ButterKnife.bind(this, rootView);\n+\n+        progressBar.setVisibility(View.VISIBLE);\n+        hideLayouts();\n+        setSpinners();\n+\n+        String[] durationValues = getContext().getResources().getStringArray(R.array.leaderboard_duration_values);", "originalCommit": "621c80348bd4d661b80f172b3dd52d0f2abe270e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb83594813cde853e6f95f6cc71de6b71e6b77e5", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardFragment.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardFragment.java\nindex 253fd4730..305907aff 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardFragment.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardFragment.java\n\n@@ -98,7 +98,16 @@ public class LeaderboardFragment extends CommonsDaggerSupportFragment {\n         hideLayouts();\n         setSpinners();\n \n+        /**\n+         * This array is for the duration filter, we have three filters weekly, yearly and all-time\n+         * each filter have a key and value pair, the value represents the param of the API\n+         */\n         String[] durationValues = getContext().getResources().getStringArray(R.array.leaderboard_duration_values);\n+\n+        /**\n+         * This array is for the category filter, we have three filters upload, used and nearby\n+         * each filter have a key and value pair, the value represents the param of the API\n+         */\n         String[] categoryValues = getContext().getResources().getStringArray(R.array.leaderboard_category_values);\n \n         duration = durationValues[0];\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkwODU5MQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r476908591", "bodyText": "javadoc: Mediawiki username\nSame below", "author": "nicolas-raoul", "createdAt": "2020-08-26T00:24:03Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardList.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+import androidx.annotation.NonNull;\n+import androidx.recyclerview.widget.DiffUtil;\n+import androidx.recyclerview.widget.DiffUtil.ItemCallback;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * This class represents the leaderboard API response sub part of i.e. leaderboard list\n+ * The leaderboard list will contain the ranking of the users from 1 to n,\n+ * avatars, username and count in the selected category.\n+ */\n+public class LeaderboardList {\n+\n+    @SerializedName(\"username\")\n+    @Expose\n+    private String username;\n+\n+    @SerializedName(\"category_count\")\n+    @Expose\n+    private Integer categoryCount;\n+\n+    @SerializedName(\"avatar\")\n+    @Expose\n+    private String avatar;\n+\n+    @SerializedName(\"rank\")\n+    @Expose\n+    private Integer rank;\n+\n+    public String getUsername() {", "originalCommit": "621c80348bd4d661b80f172b3dd52d0f2abe270e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb83594813cde853e6f95f6cc71de6b71e6b77e5", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardList.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardList.java\nindex 799e7623b..5558f3d9e 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardList.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardList.java\n\n@@ -13,50 +13,90 @@ import com.google.gson.annotations.SerializedName;\n  */\n public class LeaderboardList {\n \n+    /**\n+     * Username of the user\n+     * Example value - Syced\n+     */\n     @SerializedName(\"username\")\n     @Expose\n     private String username;\n \n+    /**\n+     * Count in the category\n+     * Example value - 10\n+     */\n     @SerializedName(\"category_count\")\n     @Expose\n     private Integer categoryCount;\n \n+    /**\n+     * URL of the avatar of user\n+     * Example value = https://upload.wikimedia.org/wikipedia/commons/thumb/0/0a/Gnome-stock_person.svg/200px-Gnome-stock_person.svg.png\n+     */\n     @SerializedName(\"avatar\")\n     @Expose\n     private String avatar;\n \n+    /**\n+     * Rank of the user\n+     * Example value - 1\n+     */\n     @SerializedName(\"rank\")\n     @Expose\n     private Integer rank;\n \n+    /**\n+     * @return the username of the user in the leaderboard list\n+     */\n     public String getUsername() {\n         return username;\n     }\n \n+    /**\n+     * Sets the username of the user in the leaderboard list\n+     */\n     public void setUsername(String username) {\n         this.username = username;\n     }\n \n+    /**\n+     * @return the category count of the user in the leaderboard list\n+     */\n     public Integer getCategoryCount() {\n         return categoryCount;\n     }\n \n+    /**\n+     * Sets the category count of the user in the leaderboard list\n+     */\n     public void setCategoryCount(Integer categoryCount) {\n         this.categoryCount = categoryCount;\n     }\n \n+    /**\n+     * @return the avatar of the user in the leaderboard list\n+     */\n     public String getAvatar() {\n         return avatar;\n     }\n \n+    /**\n+     * Sets the avatar of the user in the leaderboard list\n+     */\n     public void setAvatar(String avatar) {\n         this.avatar = avatar;\n     }\n \n+    /**\n+     * @return the rank of the user in the leaderboard list\n+     */\n     public Integer getRank() {\n         return rank;\n     }\n \n+    /**\n+     * Sets the rank of the user in the leaderboard list\n+     */\n     public void setRank(Integer rank) {\n         this.rank = rank;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkwODk4NA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r476908984", "bodyText": "for each field: javadoc, including a simple example of data", "author": "nicolas-raoul", "createdAt": "2020-08-26T00:24:40Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardResponse.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+import java.util.List;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * GSON Response Class for Leaderboard API response\n+ */\n+public class LeaderboardResponse {\n+\n+    @SerializedName(\"status\")", "originalCommit": "621c80348bd4d661b80f172b3dd52d0f2abe270e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb83594813cde853e6f95f6cc71de6b71e6b77e5", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardResponse.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardResponse.java\nindex f19c43203..34294fca9 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardResponse.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/LeaderboardResponse.java\n\n@@ -9,122 +9,227 @@ import com.google.gson.annotations.SerializedName;\n  */\n public class LeaderboardResponse {\n \n+    /**\n+     * Status Code returned from the API\n+     * Example value - 200\n+     */\n     @SerializedName(\"status\")\n     @Expose\n     private Integer status;\n \n+    /**\n+     * Username returned from the API\n+     * Example value - Syced\n+     */\n     @SerializedName(\"username\")\n     @Expose\n     private String username;\n \n+    /**\n+     * Category count returned from the API\n+     * Example value - 10\n+     */\n     @SerializedName(\"category_count\")\n     @Expose\n     private Integer categoryCount;\n \n+    /**\n+     * Limit returned from the API\n+     * Example value - 10\n+     */\n     @SerializedName(\"limit\")\n     @Expose\n     private int limit;\n \n+    /**\n+     * Avatar returned from the API\n+     * Example value - https://upload.wikimedia.org/wikipedia/commons/thumb/0/0a/Gnome-stock_person.svg/200px-Gnome-stock_person.svg.png\n+     */\n     @SerializedName(\"avatar\")\n     @Expose\n     private String avatar;\n \n+    /**\n+     * Offset returned from the API\n+     * Example value - 0\n+     */\n     @SerializedName(\"offset\")\n     @Expose\n     private int offset;\n \n+    /**\n+     * Duration returned from the API\n+     * Example value - yearly\n+     */\n     @SerializedName(\"duration\")\n     @Expose\n     private String duration;\n \n+    /**\n+     * Leaderboard list returned from the API\n+     * Example value - [{\n+     *             \"username\": \"F\u00e6\",\n+     *             \"category_count\": 107147,\n+     *             \"avatar\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0a/Gnome-stock_person.svg/200px-Gnome-stock_person.svg.png\",\n+     *             \"rank\": 1\n+     *         }]\n+     */\n     @SerializedName(\"leaderboard_list\")\n     @Expose\n     private List<LeaderboardList> leaderboardList = null;\n \n+    /**\n+     * Category returned from the API\n+     * Example value - upload\n+     */\n     @SerializedName(\"category\")\n     @Expose\n     private String category;\n \n+    /**\n+     * Rank returned from the API\n+     * Example value - 1\n+     */\n     @SerializedName(\"rank\")\n     @Expose\n     private Integer rank;\n \n+    /**\n+     * @return the status code\n+     */\n     public Integer getStatus() {\n         return status;\n     }\n \n+    /**\n+     * Sets the status code\n+     */\n     public void setStatus(Integer status) {\n         this.status = status;\n     }\n \n+    /**\n+     * @return the username\n+     */\n     public String getUsername() {\n         return username;\n     }\n \n+    /**\n+     * Sets the username\n+     */\n     public void setUsername(String username) {\n         this.username = username;\n     }\n \n+    /**\n+     * @return the category count\n+     */\n     public Integer getCategoryCount() {\n         return categoryCount;\n     }\n \n+    /**\n+     * Sets the category count\n+     */\n     public void setCategoryCount(Integer categoryCount) {\n         this.categoryCount = categoryCount;\n     }\n \n+    /**\n+     * @return the limit\n+     */\n     public int getLimit() {\n         return limit;\n     }\n \n+    /**\n+     * Sets the limit\n+     */\n     public void setLimit(int limit) {\n         this.limit = limit;\n     }\n \n+    /**\n+     * @return the avatar\n+     */\n     public String getAvatar() {\n         return avatar;\n     }\n \n+    /**\n+     * Sets the avatar\n+     */\n     public void setAvatar(String avatar) {\n         this.avatar = avatar;\n     }\n \n+    /**\n+     * @return the offset\n+     */\n     public int getOffset() {\n         return offset;\n     }\n \n+    /**\n+     * Sets the offset\n+     */\n     public void setOffset(int offset) {\n         this.offset = offset;\n     }\n \n+    /**\n+     * @return the duration\n+     */\n     public String getDuration() {\n         return duration;\n     }\n \n+    /**\n+     * Sets the duration\n+     */\n     public void setDuration(String duration) {\n         this.duration = duration;\n     }\n \n+    /**\n+     * @return the leaderboard list\n+     */\n     public List<LeaderboardList> getLeaderboardList() {\n         return leaderboardList;\n     }\n \n+    /**\n+     * Sets the leaderboard list\n+     */\n     public void setLeaderboardList(List<LeaderboardList> leaderboardList) {\n         this.leaderboardList = leaderboardList;\n     }\n \n+    /**\n+     * @return the category\n+     */\n     public String getCategory() {\n         return category;\n     }\n \n+    /**\n+     * Sets the category\n+     */\n     public void setCategory(String category) {\n         this.category = category;\n     }\n \n+    /**\n+     * @return the rank\n+     */\n     public Integer getRank() {\n         return rank;\n     }\n \n+    /**\n+     * Sets the rank\n+     */\n     public void setRank(Integer rank) {\n         this.rank = rank;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkxMDQzNQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r476910435", "bodyText": "for each field: javadoc, including a simple example of data", "author": "nicolas-raoul", "createdAt": "2020-08-26T00:26:56Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/UpdateAvatarResponse.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * GSON Response Class for Update Avatar API response\n+ */\n+public class UpdateAvatarResponse {\n+\n+  @SerializedName(\"status\")", "originalCommit": "621c80348bd4d661b80f172b3dd52d0f2abe270e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb83594813cde853e6f95f6cc71de6b71e6b77e5", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/UpdateAvatarResponse.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/UpdateAvatarResponse.java\nindex ce6cceb22..15449a488 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/UpdateAvatarResponse.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/UpdateAvatarResponse.java\n\n@@ -8,38 +8,68 @@ import com.google.gson.annotations.SerializedName;\n  */\n public class UpdateAvatarResponse {\n \n+  /**\n+   * Status Code returned from the API\n+   * Example value - 200\n+   */\n   @SerializedName(\"status\")\n   @Expose\n   private String status;\n \n+  /**\n+   * Message returned from the API\n+   * Example value - Avatar Updated\n+   */\n   @SerializedName(\"message\")\n   @Expose\n   private String message;\n \n+  /**\n+   * Username returned from the API\n+   * Example value - Syced\n+   */\n   @SerializedName(\"user\")\n   @Expose\n   private String user;\n \n+  /**\n+   * @return the status code\n+   */\n   public String getStatus() {\n     return status;\n   }\n \n+  /**\n+   * Sets the status code\n+   */\n   public void setStatus(String status) {\n     this.status = status;\n   }\n \n+  /**\n+   * @return the message\n+   */\n   public String getMessage() {\n     return message;\n   }\n \n+  /**\n+   * Sets the message\n+   */\n   public void setMessage(String message) {\n     this.message = message;\n   }\n \n+  /**\n+   * @return the username\n+   */\n   public String getUser() {\n     return user;\n   }\n \n+  /**\n+   * Sets the username\n+   */\n   public void setUser(String user) {\n     this.user = user;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkxMDYwMQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r476910601", "bodyText": "visibility?", "author": "nicolas-raoul", "createdAt": "2020-08-26T00:27:11Z", "path": "app/src/main/java/fr/free/nrw/commons/profile/leaderboard/UserDetailAdapter.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package fr.free.nrw.commons.profile.leaderboard;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.TextView;\n+import androidx.annotation.NonNull;\n+import androidx.recyclerview.widget.RecyclerView;\n+import com.facebook.drawee.view.SimpleDraweeView;\n+import fr.free.nrw.commons.R;\n+\n+/**\n+ * This class extends RecyclerView.Adapter and creates the UserDetail section of the leaderboard\n+ */\n+public class UserDetailAdapter extends RecyclerView.Adapter<UserDetailAdapter.DataViewHolder> {\n+\n+    LeaderboardResponse leaderboardResponse;\n+\n+    public UserDetailAdapter(LeaderboardResponse leaderboardResponse) {\n+        this.leaderboardResponse = leaderboardResponse;\n+    }\n+\n+    public class DataViewHolder extends RecyclerView.ViewHolder {\n+\n+        TextView rank;", "originalCommit": "621c80348bd4d661b80f172b3dd52d0f2abe270e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb83594813cde853e6f95f6cc71de6b71e6b77e5", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/UserDetailAdapter.java b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/UserDetailAdapter.java\nindex 0c7efa146..f5e31b782 100644\n--- a/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/UserDetailAdapter.java\n+++ b/app/src/main/java/fr/free/nrw/commons/profile/leaderboard/UserDetailAdapter.java\n\n@@ -16,7 +16,7 @@ import fr.free.nrw.commons.R;\n  */\n public class UserDetailAdapter extends RecyclerView.Adapter<UserDetailAdapter.DataViewHolder> {\n \n-    LeaderboardResponse leaderboardResponse;\n+    private LeaderboardResponse leaderboardResponse;\n \n     public UserDetailAdapter(LeaderboardResponse leaderboardResponse) {\n         this.leaderboardResponse = leaderboardResponse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkxMTkzNA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3905#discussion_r476911934", "bodyText": "Is there no Java/Android pre-built constant for \"200\"? If not it's OK like this :-)", "author": "nicolas-raoul", "createdAt": "2020-08-26T00:29:24Z", "path": "app/src/main/java/fr/free/nrw/commons/utils/ImageUtils.java", "diffHunk": "@@ -223,28 +225,78 @@ public void onFailureImpl(DataSource dataSource) {\n         }, CallerThreadExecutor.getInstance());\n     }\n \n+    /**\n+     * Calls the set avatar api to set the image url as user's avatar\n+     * @param context\n+     * @param url\n+     * @param username\n+     * @param okHttpJsonApiClient\n+     * @param compositeDisposable\n+     */\n+    public static void setAvatarFromImageUrl(Context context, String url, String username,\n+        OkHttpJsonApiClient okHttpJsonApiClient, CompositeDisposable compositeDisposable) {\n+        showSettingAvatarProgressBar(context);\n+\n+        try {\n+            compositeDisposable.add(okHttpJsonApiClient\n+                .setAvatar(username, url)\n+                .subscribeOn(Schedulers.io())\n+                .observeOn(AndroidSchedulers.mainThread())\n+                .subscribe(\n+                    response -> {\n+                        if (response != null && response.getStatus().equals(\"200\")) {", "originalCommit": "621c80348bd4d661b80f172b3dd52d0f2abe270e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "fb83594813cde853e6f95f6cc71de6b71e6b77e5", "url": "https://github.com/commons-app/apps-android-commons/commit/fb83594813cde853e6f95f6cc71de6b71e6b77e5", "message": "Added More JavaDocs", "committedDate": "2020-08-26T09:18:08Z", "type": "commit"}, {"oid": "00019b598a93094e4b8e034937e0311b8b6c618d", "url": "https://github.com/commons-app/apps-android-commons/commit/00019b598a93094e4b8e034937e0311b8b6c618d", "message": "Revert string.xml", "committedDate": "2020-08-26T09:29:54Z", "type": "commit"}, {"oid": "04537ce4b8a7334898d8c61c206290f317cd2582", "url": "https://github.com/commons-app/apps-android-commons/commit/04537ce4b8a7334898d8c61c206290f317cd2582", "message": "Revert \"Revert string.xml\"\n\nThis reverts commit 00019b598a93094e4b8e034937e0311b8b6c618d.", "committedDate": "2020-08-26T09:46:49Z", "type": "commit"}, {"oid": "0e56a1166ceabe7e1d0121d60d725a8c57aaad4b", "url": "https://github.com/commons-app/apps-android-commons/commit/0e56a1166ceabe7e1d0121d60d725a8c57aaad4b", "message": "Added protected", "committedDate": "2020-08-26T09:49:15Z", "type": "commit"}, {"oid": "1a1ee20ae2ab2c45fd69db2d369a619acb58801e", "url": "https://github.com/commons-app/apps-android-commons/commit/1a1ee20ae2ab2c45fd69db2d369a619acb58801e", "message": "Fixed strings.xml extra changes", "committedDate": "2020-08-26T19:21:26Z", "type": "commit"}, {"oid": "06d05220b40bcd72f54f20cde4be6b6c8c62771c", "url": "https://github.com/commons-app/apps-android-commons/commit/06d05220b40bcd72f54f20cde4be6b6c8c62771c", "message": "Revert codeStyle change", "committedDate": "2020-08-26T19:30:28Z", "type": "commit"}, {"oid": "8cd3d6868f0176e0eb124706e0f46f4378474e02", "url": "https://github.com/commons-app/apps-android-commons/commit/8cd3d6868f0176e0eb124706e0f46f4378474e02", "message": "Fixed extra string change", "committedDate": "2020-08-26T20:13:48Z", "type": "commit"}]}