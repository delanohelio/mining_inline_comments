{"pr_number": 3838, "pr_title": "Set Media legend for wikidata entity", "pr_createdAt": "2020-06-22T16:39:48Z", "pr_url": "https://github.com/commons-app/apps-android-commons/pull/3838", "timeline": [{"oid": "7ed6e0d0e7e96c1d0537dfbfef826973c65a077b", "url": "https://github.com/commons-app/apps-android-commons/commit/7ed6e0d0e7e96c1d0537dfbfef826973c65a077b", "message": "Set media legends and P18", "committedDate": "2020-06-19T09:07:41Z", "type": "commit"}, {"oid": "1cbf38e4243e5ea263d3e21017f574da0df48435", "url": "https://github.com/commons-app/apps-android-commons/commit/1cbf38e4243e5ea263d3e21017f574da0df48435", "message": "Minor", "committedDate": "2020-06-22T16:39:05Z", "type": "commit"}, {"oid": "8b49c71bfeedaabf69dfbb1028ace5dcb1ea4741", "url": "https://github.com/commons-app/apps-android-commons/commit/8b49c71bfeedaabf69dfbb1028ace5dcb1ea4741", "message": "Make media legends work", "committedDate": "2020-06-23T06:03:32Z", "type": "commit"}, {"oid": "01dda047543c159de6d13d736bdc11ffeda20201", "url": "https://github.com/commons-app/apps-android-commons/commit/01dda047543c159de6d13d736bdc11ffeda20201", "message": "Add test cases", "committedDate": "2020-06-23T06:51:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyNDc3MA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3838#discussion_r444124770", "bodyText": "revert", "author": "macgills", "createdAt": "2020-06-23T10:30:50Z", "path": "app/src/main/java/fr/free/nrw/commons/OkHttpConnectionFactory.java", "diffHunk": "@@ -41,7 +41,7 @@ private static OkHttpClient createClient() {\n \n     private static HttpLoggingInterceptor getLoggingInterceptor() {\n         final HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor()\n-            .setLevel(Level.BASIC);\n+            .setLevel(Level.BODY);", "originalCommit": "01dda047543c159de6d13d736bdc11ffeda20201", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "67bdc9e87668ccef0272d8224bf1989fa71768a0", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/OkHttpConnectionFactory.java b/app/src/main/java/fr/free/nrw/commons/OkHttpConnectionFactory.java\nindex ba773e14d..59e33ea24 100644\n--- a/app/src/main/java/fr/free/nrw/commons/OkHttpConnectionFactory.java\n+++ b/app/src/main/java/fr/free/nrw/commons/OkHttpConnectionFactory.java\n\n@@ -41,7 +41,7 @@ public final class OkHttpConnectionFactory {\n \n     private static HttpLoggingInterceptor getLoggingInterceptor() {\n         final HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor()\n-            .setLevel(Level.BODY);\n+            .setLevel(Level.BASIC);\n \n         httpLoggingInterceptor.redactHeader(\"Authorization\");\n         httpLoggingInterceptor.redactHeader(\"Cookie\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyNjMwOQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3838#discussion_r444126309", "bodyText": "We can delete this log", "author": "macgills", "createdAt": "2020-06-23T10:34:05Z", "path": "app/src/main/java/fr/free/nrw/commons/wikidata/WikidataEditService.java", "diffHunk": "@@ -127,29 +135,40 @@ private void onAddCaptionResponse(Long fileEntityId, MwPostResponse response) {\n     }\n   }\n \n-  public void createImageClaim(@Nullable final WikidataPlace wikidataPlace, final UploadResult imageUpload) {\n+  public void createClaim(@Nullable final WikidataPlace wikidataPlace, final String fileName, final\n+  HashMap<String, String> captions) {\n     if (!(directKvStore.getBoolean(\"Picture_Has_Correct_Location\", true))) {\n-      Timber.d(\"Image location and nearby place location mismatched, so Wikidata item won't be edited\");\n+      Timber\n+          .d(\"Image location and nearby place location mismatched, so Wikidata item won't be edited\");\n       return;\n     }\n-    editWikidataImageProperty(wikidataPlace, imageUpload);\n+    addImageAndMediaLegends(wikidataPlace, fileName, captions);\n   }\n \n-  @SuppressLint(\"CheckResult\")\n-  private void editWikidataImageProperty(final WikidataItem wikidataItem, final UploadResult imageUpload) {\n-    wikidataClient.createImageClaim(wikidataItem, String.format(\"\\\"%s\\\"\", imageUpload.getFilename()))\n-        .flatMap(revisionId -> {\n-          if (revisionId != -1) {\n-            return wikidataClient.addEditTag(revisionId, COMMONS_APP_TAG, COMMONS_APP_EDIT_REASON);\n-          }\n-          throw new RuntimeException(\"Unable to edit wikidata item\");\n-        })\n-        .subscribeOn(Schedulers.io())\n+  public void addImageAndMediaLegends(final WikidataItem wikidataItem, final String fileName,\n+      HashMap<String, String> captions) {\n+    Snak_partial p18 = new Snak_partial(\"value\", WikidataProperties.IMAGE.getPropertyName(),\n+        new ValueString(fileName.replace(\"File:\", \"\")));\n+\n+    List<Snak_partial> snaks = new ArrayList<>();\n+    for (String key : captions.keySet()) {\n+      snaks.add(new Snak_partial(\"value\",\n+          WikidataProperties.MEDIA_LEGENDS.getPropertyName(), new DataValue.MonoLingualText_partial(\n+          new WikiBaseMonolingualTextValue(captions.get(key), key))));\n+    }\n+\n+    String id = wikidataItem.getId() + \"$\" + UUID.randomUUID().toString();\n+    WikidataSetClaim claim = new WikidataSetClaim(p18, id, snaks);\n+\n+    Timber.d(\"Claim object is %s\", gson.toJson(claim));", "originalCommit": "01dda047543c159de6d13d736bdc11ffeda20201", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "67bdc9e87668ccef0272d8224bf1989fa71768a0", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/wikidata/WikidataEditService.java b/app/src/main/java/fr/free/nrw/commons/wikidata/WikidataEditService.java\nindex e1d823f1b..684f29f8d 100644\n--- a/app/src/main/java/fr/free/nrw/commons/wikidata/WikidataEditService.java\n+++ b/app/src/main/java/fr/free/nrw/commons/wikidata/WikidataEditService.java\n\n@@ -146,21 +149,22 @@ public class WikidataEditService {\n   }\n \n   public void addImageAndMediaLegends(final WikidataItem wikidataItem, final String fileName,\n-      HashMap<String, String> captions) {\n-    Snak_partial p18 = new Snak_partial(\"value\", WikidataProperties.IMAGE.getPropertyName(),\n+      final HashMap<String, String> captions) {\n+    final Snak_partial p18 = new Snak_partial(\"value\", WikidataProperties.IMAGE.getPropertyName(),\n         new ValueString(fileName.replace(\"File:\", \"\")));\n \n-    List<Snak_partial> snaks = new ArrayList<>();\n-    for (String key : captions.keySet()) {\n+    final List<Snak_partial> snaks = new ArrayList<>();\n+    for (final Map.Entry<String, String> entry : captions.entrySet()) {\n       snaks.add(new Snak_partial(\"value\",\n           WikidataProperties.MEDIA_LEGENDS.getPropertyName(), new DataValue.MonoLingualText_partial(\n-          new WikiBaseMonolingualTextValue(captions.get(key), key))));\n+          new WikiBaseMonolingualTextValue(entry.getValue(), entry.getKey()))));\n     }\n \n-    String id = wikidataItem.getId() + \"$\" + UUID.randomUUID().toString();\n-    WikidataSetClaim claim = new WikidataSetClaim(p18, id, snaks);\n+    final String id = wikidataItem.getId() + \"$\" + UUID.randomUUID().toString();\n+    final Statement_partial claim = new Statement_partial(p18, \"statement\", \"normal\", id,\n+        Collections.singletonMap(WikidataProperties.MEDIA_LEGENDS.getPropertyName(), snaks),\n+        Arrays.asList(WikidataProperties.MEDIA_LEGENDS.getPropertyName()));\n \n-    Timber.d(\"Claim object is %s\", gson.toJson(claim));\n     wikidataClient.setClaim(claim, COMMONS_APP_TAG).subscribeOn(Schedulers.io())\n         .observeOn(AndroidSchedulers.mainThread())\n         .subscribe(revisionId -> handleImageClaimResult(wikidataItem, String.valueOf(revisionId)),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzMjc1Ng==", "url": "https://github.com/commons-app/apps-android-commons/pull/3838#discussion_r444132756", "bodyText": "inside the loop the value in the map is used so iterating the entryset would be better.\nThis could also be made to more resemble how EditClaim works where the construction of the object bears resemblance to the json but y'know optional", "author": "macgills", "createdAt": "2020-06-23T10:46:32Z", "path": "app/src/main/java/fr/free/nrw/commons/wikidata/WikidataEditService.java", "diffHunk": "@@ -127,29 +135,40 @@ private void onAddCaptionResponse(Long fileEntityId, MwPostResponse response) {\n     }\n   }\n \n-  public void createImageClaim(@Nullable final WikidataPlace wikidataPlace, final UploadResult imageUpload) {\n+  public void createClaim(@Nullable final WikidataPlace wikidataPlace, final String fileName, final\n+  HashMap<String, String> captions) {\n     if (!(directKvStore.getBoolean(\"Picture_Has_Correct_Location\", true))) {\n-      Timber.d(\"Image location and nearby place location mismatched, so Wikidata item won't be edited\");\n+      Timber\n+          .d(\"Image location and nearby place location mismatched, so Wikidata item won't be edited\");\n       return;\n     }\n-    editWikidataImageProperty(wikidataPlace, imageUpload);\n+    addImageAndMediaLegends(wikidataPlace, fileName, captions);\n   }\n \n-  @SuppressLint(\"CheckResult\")\n-  private void editWikidataImageProperty(final WikidataItem wikidataItem, final UploadResult imageUpload) {\n-    wikidataClient.createImageClaim(wikidataItem, String.format(\"\\\"%s\\\"\", imageUpload.getFilename()))\n-        .flatMap(revisionId -> {\n-          if (revisionId != -1) {\n-            return wikidataClient.addEditTag(revisionId, COMMONS_APP_TAG, COMMONS_APP_EDIT_REASON);\n-          }\n-          throw new RuntimeException(\"Unable to edit wikidata item\");\n-        })\n-        .subscribeOn(Schedulers.io())\n+  public void addImageAndMediaLegends(final WikidataItem wikidataItem, final String fileName,\n+      HashMap<String, String> captions) {\n+    Snak_partial p18 = new Snak_partial(\"value\", WikidataProperties.IMAGE.getPropertyName(),\n+        new ValueString(fileName.replace(\"File:\", \"\")));\n+\n+    List<Snak_partial> snaks = new ArrayList<>();\n+    for (String key : captions.keySet()) {", "originalCommit": "01dda047543c159de6d13d736bdc11ffeda20201", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "67bdc9e87668ccef0272d8224bf1989fa71768a0", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/wikidata/WikidataEditService.java b/app/src/main/java/fr/free/nrw/commons/wikidata/WikidataEditService.java\nindex e1d823f1b..684f29f8d 100644\n--- a/app/src/main/java/fr/free/nrw/commons/wikidata/WikidataEditService.java\n+++ b/app/src/main/java/fr/free/nrw/commons/wikidata/WikidataEditService.java\n\n@@ -146,21 +149,22 @@ public class WikidataEditService {\n   }\n \n   public void addImageAndMediaLegends(final WikidataItem wikidataItem, final String fileName,\n-      HashMap<String, String> captions) {\n-    Snak_partial p18 = new Snak_partial(\"value\", WikidataProperties.IMAGE.getPropertyName(),\n+      final HashMap<String, String> captions) {\n+    final Snak_partial p18 = new Snak_partial(\"value\", WikidataProperties.IMAGE.getPropertyName(),\n         new ValueString(fileName.replace(\"File:\", \"\")));\n \n-    List<Snak_partial> snaks = new ArrayList<>();\n-    for (String key : captions.keySet()) {\n+    final List<Snak_partial> snaks = new ArrayList<>();\n+    for (final Map.Entry<String, String> entry : captions.entrySet()) {\n       snaks.add(new Snak_partial(\"value\",\n           WikidataProperties.MEDIA_LEGENDS.getPropertyName(), new DataValue.MonoLingualText_partial(\n-          new WikiBaseMonolingualTextValue(captions.get(key), key))));\n+          new WikiBaseMonolingualTextValue(entry.getValue(), entry.getKey()))));\n     }\n \n-    String id = wikidataItem.getId() + \"$\" + UUID.randomUUID().toString();\n-    WikidataSetClaim claim = new WikidataSetClaim(p18, id, snaks);\n+    final String id = wikidataItem.getId() + \"$\" + UUID.randomUUID().toString();\n+    final Statement_partial claim = new Statement_partial(p18, \"statement\", \"normal\", id,\n+        Collections.singletonMap(WikidataProperties.MEDIA_LEGENDS.getPropertyName(), snaks),\n+        Arrays.asList(WikidataProperties.MEDIA_LEGENDS.getPropertyName()));\n \n-    Timber.d(\"Claim object is %s\", gson.toJson(claim));\n     wikidataClient.setClaim(claim, COMMONS_APP_TAG).subscribeOn(Schedulers.io())\n         .observeOn(AndroidSchedulers.mainThread())\n         .subscribe(revisionId -> handleImageClaimResult(wikidataItem, String.valueOf(revisionId)),\n"}}, {"oid": "67bdc9e87668ccef0272d8224bf1989fa71768a0", "url": "https://github.com/commons-app/apps-android-commons/commit/67bdc9e87668ccef0272d8224bf1989fa71768a0", "message": "Use statement partial", "committedDate": "2020-06-23T16:09:08Z", "type": "commit"}, {"oid": "696981685232a061f77dab327f50bc4bc5ec8b9a", "url": "https://github.com/commons-app/apps-android-commons/commit/696981685232a061f77dab327f50bc4bc5ec8b9a", "message": "With minor refactoring", "committedDate": "2020-06-25T17:04:41Z", "type": "commit"}, {"oid": "96728e9fd86c0ace14a75727f6f53210b24ba4d6", "url": "https://github.com/commons-app/apps-android-commons/commit/96728e9fd86c0ace14a75727f6f53210b24ba4d6", "message": "Fix build", "committedDate": "2020-06-25T20:55:16Z", "type": "commit"}]}