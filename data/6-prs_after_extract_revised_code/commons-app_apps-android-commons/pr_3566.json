{"pr_number": 3566, "pr_title": "With lazy loading of contributions", "pr_createdAt": "2020-03-23T06:30:25Z", "pr_url": "https://github.com/commons-app/apps-android-commons/pull/3566", "timeline": [{"oid": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "url": "https://github.com/commons-app/apps-android-commons/commit/5f12c5f814a5432340a62f9f72f9549c587b14f6", "message": "Merge branch 'master' into lazyContributions", "committedDate": "2020-05-27T16:58:55Z", "type": "commit"}, {"oid": "20bc439c1734b86efceebf8aa7f55f5fc46f91ff", "url": "https://github.com/commons-app/apps-android-commons/commit/20bc439c1734b86efceebf8aa7f55f5fc46f91ff", "message": "With contribution fetch", "committedDate": "2020-04-15T11:04:06Z", "type": "forcePushed"}, {"oid": "f9ec9a33c1b38632f1c1acd11a5304eeeae8a1ee", "url": "https://github.com/commons-app/apps-android-commons/commit/f9ec9a33c1b38632f1c1acd11a5304eeeae8a1ee", "message": "fix display of contributions", "committedDate": "2020-04-17T02:18:57Z", "type": "forcePushed"}, {"oid": "84cd7534176251597dc38b7c87df6ccc919c76b4", "url": "https://github.com/commons-app/apps-android-commons/commit/84cd7534176251597dc38b7c87df6ccc919c76b4", "message": "fix display of contributions", "committedDate": "2020-04-17T03:02:09Z", "type": "forcePushed"}, {"oid": "c8c545c856f6158a04289b48b432827a75b5086c", "url": "https://github.com/commons-app/apps-android-commons/commit/c8c545c856f6158a04289b48b432827a75b5086c", "message": "fix display of contributions", "committedDate": "2020-04-17T04:42:25Z", "type": "forcePushed"}, {"oid": "3adf1e3b3367f4a021fcc43706d9ea8704779623", "url": "https://github.com/commons-app/apps-android-commons/commit/3adf1e3b3367f4a021fcc43706d9ea8704779623", "message": "With lazy loading of contributions", "committedDate": "2020-04-17T07:06:20Z", "type": "commit"}, {"oid": "27a8352fa733a4271d497ca8d08735869a39a968", "url": "https://github.com/commons-app/apps-android-commons/commit/27a8352fa733a4271d497ca8d08735869a39a968", "message": "With contribution fetch", "committedDate": "2020-04-17T07:06:20Z", "type": "commit"}, {"oid": "053747096317a186a22d39b2ce5c0c78cde7ca6f", "url": "https://github.com/commons-app/apps-android-commons/commit/053747096317a186a22d39b2ce5c0c78cde7ca6f", "message": "fix display of contributions", "committedDate": "2020-04-17T07:06:20Z", "type": "commit"}, {"oid": "5dd362c3dba872784a41b117c6ae28d52ff25101", "url": "https://github.com/commons-app/apps-android-commons/commit/5dd362c3dba872784a41b117c6ae28d52ff25101", "message": "more changes", "committedDate": "2020-04-17T07:06:40Z", "type": "commit"}, {"oid": "5dd362c3dba872784a41b117c6ae28d52ff25101", "url": "https://github.com/commons-app/apps-android-commons/commit/5dd362c3dba872784a41b117c6ae28d52ff25101", "message": "more changes", "committedDate": "2020-04-17T07:06:40Z", "type": "forcePushed"}, {"oid": "b9ed4e5e6ae94bdaf50562750b0067453fb0ab9f", "url": "https://github.com/commons-app/apps-android-commons/commit/b9ed4e5e6ae94bdaf50562750b0067453fb0ab9f", "message": "Bugfix/contributions pagination (#5)\n\n* With lazy loading of contributions\r\n\r\n* With contribution fetch\r\n\r\n* fix display of contributions\r\n\r\n* BugFixes Lazy Load Contributions\r\n* Use PageId as primary Key\r\n* show progress in CLF only whenn contributions are empty (graceful pagination)\r\n* Migration 1_2\r\n\r\nCo-authored-by: Vivek Maskara <maskaravivek@gmail.com>", "committedDate": "2020-04-20T07:20:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwNjI2NA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r411206264", "bodyText": "If we just delete everything instead of migrating data we could fallbackDestructively like mentioned here", "author": "macgills", "createdAt": "2020-04-20T08:52:03Z", "path": "app/src/main/java/fr/free/nrw/commons/di/CommonsApplicationModule.java", "diffHunk": "@@ -231,10 +234,55 @@ public QuadTree providesQuadTres() {\n     @Provides\n     @Singleton\n     public AppDatabase provideAppDataBase() {\n-        appDatabase=Room.databaseBuilder(applicationContext, AppDatabase.class, \"commons_room.db\").build();\n+        Builder<AppDatabase> appDatabaseBuilder = Room\n+            .databaseBuilder(applicationContext, AppDatabase.class, \"commons_room.db\");\n+        appDatabaseBuilder.addMigrations(MIGRATION_1_2);\n+        appDatabase = appDatabaseBuilder.build();\n         return appDatabase;\n     }\n \n+    static final Migration MIGRATION_1_2 = new Migration(1, 2) {\n+        @Override\n+        public void migrate(SupportSQLiteDatabase database) {\n+            database.execSQL(\"DROP TABLE `contribution`\");", "originalCommit": "b9ed4e5e6ae94bdaf50562750b0067453fb0ab9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNjIxOA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r411536218", "bodyText": "Thanks, @macgills. Will make this change.", "author": "maskaravivek", "createdAt": "2020-04-20T16:53:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwNjI2NA=="}], "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/di/CommonsApplicationModule.java b/app/src/main/java/fr/free/nrw/commons/di/CommonsApplicationModule.java\nindex 192ed8a92..c76c54673 100644\n--- a/app/src/main/java/fr/free/nrw/commons/di/CommonsApplicationModule.java\n+++ b/app/src/main/java/fr/free/nrw/commons/di/CommonsApplicationModule.java\n\n@@ -221,71 +221,17 @@ public class CommonsApplicationModule {\n         return Objects.toString(AppAdapter.get().getUserName(), \"\");\n     }\n \n-    /**\n-     * Provides quad tree\n-     *\n-     * @return\n-     */\n-    @Provides\n-    public QuadTree providesQuadTres() {\n-        return new QuadTree<>(-180, -90, +180, +90);\n-    }\n-\n     @Provides\n     @Singleton\n     public AppDatabase provideAppDataBase() {\n-        Builder<AppDatabase> appDatabaseBuilder = Room\n-            .databaseBuilder(applicationContext, AppDatabase.class, \"commons_room.db\");\n-        appDatabaseBuilder.addMigrations(MIGRATION_1_2);\n-        appDatabase = appDatabaseBuilder.build();\n-        return appDatabase;\n+        return Room.databaseBuilder(applicationContext, AppDatabase.class, \"commons_room.db\")\n+            .fallbackToDestructiveMigration()\n+            .build();\n     }\n \n-    static final Migration MIGRATION_1_2 = new Migration(1, 2) {\n-        @Override\n-        public void migrate(SupportSQLiteDatabase database) {\n-            database.execSQL(\"DROP TABLE `contribution`\");\n-            database.execSQL(\"CREATE TABLE IF NOT EXISTS `contribution` (\"\n-                + \"`localUri` TEXT,\"\n-                + \" `thumbUrl` TEXT,\"\n-                + \" `imageUrl` TEXT,\"\n-                + \" `filename` TEXT,\"\n-                + \" `description` TEXT,\"\n-                + \" `discussion` TEXT,\"\n-                + \" `dateCreated` INTEGER,\"\n-                + \" `dateUploaded` INTEGER,\"\n-                + \" `width` INTEGER NOT NULL,\"\n-                + \" `height` INTEGER NOT NULL,\"\n-                + \" `license` TEXT,\"\n-                + \" `licenseUrl` TEXT,\"\n-                + \" `creator` TEXT,\"\n-                + \" `categories` TEXT,\"\n-                + \" `requestedDeletion`\"\n-                + \" INTEGER NOT NULL,\"\n-                + \" `descriptions` TEXT,\"\n-                + \" `tags` TEXT,\"\n-                + \" `coordinates` TEXT,\"\n-                + \" `pageId` INTEGER NOT NULL,\"\n-                + \" `contentUri` TEXT,\"\n-                + \" `source` TEXT,\"\n-                + \" `editSummary` TEXT,\"\n-                + \" `state` INTEGER NOT NULL,\"\n-                + \" `transferred` INTEGER NOT NULL,\"\n-                + \" `decimalCoords` TEXT,\"\n-                + \" `isMultiple` INTEGER NOT NULL,\"\n-                + \" `wikiDataEntityId` TEXT,\"\n-                + \" `wikiItemName` TEXT,\"\n-                + \" `p18Value` TEXT,\"\n-                + \" `contentProviderUri` TEXT,\"\n-                + \" `dateCreatedSource` TEXT,\"\n-                + \" `dataLength` INTEGER NOT NULL,\"\n-                + \" PRIMARY KEY(`pageId`))\");\n-        }\n-    };\n-\n     @Provides\n-    public ContributionDao providesContributionsDao() {\n-        return appDatabase.getContributionDao();\n+    public ContributionDao providesContributionsDao(AppDatabase appDatabase) {\n+        return appDatabase.contributionDao();\n     }\n \n     @Provides\n"}}, {"oid": "6e3c61a52cdadbe6a305a8ff9ca04f4843d42a8d", "url": "https://github.com/commons-app/apps-android-commons/commit/6e3c61a52cdadbe6a305a8ff9ca04f4843d42a8d", "message": "Merge branch 'master' into lazyContributions", "committedDate": "2020-04-20T23:41:16Z", "type": "commit"}, {"oid": "d0b127b0a821d68cda18e9babad256517b304535", "url": "https://github.com/commons-app/apps-android-commons/commit/d0b127b0a821d68cda18e9babad256517b304535", "message": "Merge branch 'lazyContributions' of https://github.com/maskaravivek/apps-android-commons into lazyContributions", "committedDate": "2020-04-20T23:48:17Z", "type": "commit"}, {"oid": "25884cacc3523b76c4724a928dba5881483b6587", "url": "https://github.com/commons-app/apps-android-commons/commit/25884cacc3523b76c4724a928dba5881483b6587", "message": "Merge branch 'master' into lazyContributions", "committedDate": "2020-04-21T21:12:29Z", "type": "commit"}, {"oid": "2c1e271523cba2006851249339407791c9d9b0c7", "url": "https://github.com/commons-app/apps-android-commons/commit/2c1e271523cba2006851249339407791c9d9b0c7", "message": "Fix build", "committedDate": "2020-04-21T21:36:57Z", "type": "commit"}, {"oid": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6", "url": "https://github.com/commons-app/apps-android-commons/commit/1e12d310001fbf5df31c0245ab53c9e9f57fb8f6", "message": "minor fixes", "committedDate": "2020-04-21T23:04:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2NzQ2Nw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r412867467", "bodyText": "I think pageId is frequently null? I had that Pr where we kept requesting Mnull", "author": "macgills", "createdAt": "2020-04-22T10:34:32Z", "path": "app/src/main/java/fr/free/nrw/commons/Media.java", "diffHunk": "@@ -50,6 +51,8 @@\n     /**\n      * Wikibase Identifier associated with media files\n      */\n+    @PrimaryKey\n+    @NonNull\n     private String pageId;", "originalCommit": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwNDU0OA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r413504548", "bodyText": "It won't be null for Media. It can be null for other API calls where MwQueryPage is returned as response.", "author": "maskaravivek", "createdAt": "2020-04-23T04:43:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2NzQ2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5OTA1OA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r419999058", "bodyText": "Then NonNull is not very true if it can be null. Is the annotation a Room requirement on primary keys? I've forgotten", "author": "macgills", "createdAt": "2020-05-05T10:07:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2NzQ2Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NDE5Nw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r412874197", "bodyText": "a GridLayoutManager with spanCount 1 is essentially analogous to LinearLayoutManager, I would believe\nThat way we could move this condition into a ternary and not create different types of LayoutManager", "author": "macgills", "createdAt": "2020-04-22T10:45:29Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java", "diffHunk": "@@ -99,14 +105,21 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\n     }\n \n     private void initRecyclerView() {\n+        Timber.d(\"RecyclerList Recycler view Init.\");\n+        LinearLayoutManager layoutManager;\n         if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {\n-            rvContributionsList.setLayoutManager(new GridLayoutManager(getContext(),SPAN_COUNT));\n+            layoutManager = new GridLayoutManager(getContext(), SPAN_COUNT);", "originalCommit": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwNDI3MA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r413504270", "bodyText": "We are using span count = 3.", "author": "maskaravivek", "createdAt": "2020-04-23T04:42:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NDE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyMjQ2OQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r413622469", "bodyText": "Yes we are but Instead of a LinearLayoutManager and a GridLayoutManager we could use only a GridLayoutManager and based on Orientation set the span count", "author": "macgills", "createdAt": "2020-04-23T08:35:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NDE5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java\nindex 710706720..d707409e4 100644\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java\n+++ b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java\n\n@@ -38,234 +36,198 @@ import timber.log.Timber;\n public class ContributionsListFragment extends CommonsDaggerSupportFragment implements\n     ContributionsListContract.View, ContributionsListAdapter.Callback {\n \n-    private static final String VISIBLE_ITEM_ID = \"visible_item_id\";\n-    @BindView(R.id.contributionsList)\n-    RecyclerView rvContributionsList;\n-    @BindView(R.id.loadingContributionsProgressBar)\n-    ProgressBar progressBar;\n-    @BindView(R.id.fab_plus)\n-    FloatingActionButton fabPlus;\n-    @BindView(R.id.fab_camera)\n-    FloatingActionButton fabCamera;\n-    @BindView(R.id.fab_gallery)\n-    FloatingActionButton fabGallery;\n-    @BindView(R.id.noContributionsYet)\n-    TextView noContributionsYet;\n-    @BindView(R.id.fab_layout)\n-    LinearLayout fab_layout;\n-\n-    @Inject ContributionController controller;\n+  private static final String RV_STATE = \"rv_scroll_state\";\n+\n+  @BindView(R.id.contributionsList)\n+  RecyclerView rvContributionsList;\n+  @BindView(R.id.loadingContributionsProgressBar)\n+  ProgressBar progressBar;\n+  @BindView(R.id.fab_plus)\n+  FloatingActionButton fabPlus;\n+  @BindView(R.id.fab_camera)\n+  FloatingActionButton fabCamera;\n+  @BindView(R.id.fab_gallery)\n+  FloatingActionButton fabGallery;\n+  @BindView(R.id.noContributionsYet)\n+  TextView noContributionsYet;\n+  @BindView(R.id.fab_layout)\n+  LinearLayout fab_layout;\n+\n+  @Inject\n+  ContributionController controller;\n   @Inject\n   MediaClient mediaClient;\n \n-    @Inject\n-    ContributionsListPresenter contributionsListPresenter;\n-\n-    private MediaDetailPagerFragment mediaDetailPagerFragment;\n-\n-    private Animation fab_close;\n-    private Animation fab_open;\n-    private Animation rotate_forward;\n-    private Animation rotate_backward;\n-\n-\n-    private boolean isFabOpen = false;\n-\n-    private ContributionsListAdapter adapter;\n-\n-    private Callback callback;\n-    private String lastVisibleItemID;\n-\n-    private int SPAN_COUNT=3;\n-\n-    ContributionsListFragment(Callback callback) {\n-        this.callback = callback;\n-    }\n-\n-    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n-        View view = inflater.inflate(R.layout.fragment_contributions_list, container, false);\n-        ButterKnife.bind(this, view);\n-        contributionsListPresenter.onAttachView(this);\n-        contributionsListPresenter.setLifeCycleOwner(getViewLifecycleOwner());\n-        initAdapter();\n-        return view;\n-    }\n-\n-    private void initAdapter() {\n-      adapter = new ContributionsListAdapter(this, mediaClient);\n-        adapter.setHasStableIds(true);\n-    }\n-\n-    @Override\n-    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-        initRecyclerView();\n-        initializeAnimations();\n-        setListeners();\n-    }\n-\n-    private void initRecyclerView() {\n-        Timber.d(\"RecyclerList Recycler view Init.\");\n-        LinearLayoutManager layoutManager;\n-        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {\n-            layoutManager = new GridLayoutManager(getContext(), SPAN_COUNT);\n-            rvContributionsList.setLayoutManager(layoutManager);\n-        } else {\n-            layoutManager = new LinearLayoutManager(getContext());\n-            rvContributionsList.setLayoutManager(layoutManager);\n-        }\n-\n-        rvContributionsList.setAdapter(adapter);\n-        rvContributionsList.addOnScrollListener(contributionsListPresenter.getScrollListener(layoutManager));\n-\n-      contributionsListPresenter.setupLiveData();\n-      contributionsListPresenter.fetchContributions();\n-    }\n-\n-    @Override\n-    public void onConfigurationChanged(Configuration newConfig) {\n-        super.onConfigurationChanged(newConfig);\n-        // check orientation\n-        if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\n-            fab_layout.setOrientation(LinearLayout.HORIZONTAL);\n-            rvContributionsList.setLayoutManager(new GridLayoutManager(getContext(),SPAN_COUNT));\n-        } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {\n-            fab_layout.setOrientation(LinearLayout.VERTICAL);\n-            rvContributionsList.setLayoutManager(new LinearLayoutManager(getContext()));\n-        }\n-    }\n-\n-    private void initializeAnimations() {\n-        fab_open = AnimationUtils.loadAnimation(getActivity(), R.anim.fab_open);\n-        fab_close = AnimationUtils.loadAnimation(getActivity(), R.anim.fab_close);\n-        rotate_forward = AnimationUtils.loadAnimation(getActivity(), R.anim.rotate_forward);\n-        rotate_backward = AnimationUtils.loadAnimation(getActivity(), R.anim.rotate_backward);\n-    }\n-\n-    private void setListeners() {\n-        fabPlus.setOnClickListener(view -> animateFAB(isFabOpen));\n-        fabCamera.setOnClickListener(view -> {\n-            controller.initiateCameraPick(getActivity());\n-            animateFAB(isFabOpen);\n-        });\n-        fabGallery.setOnClickListener(view -> {\n-            controller.initiateGalleryPick(getActivity(), true);\n-            animateFAB(isFabOpen);\n-        });\n-    }\n-\n-    private void animateFAB(boolean isFabOpen) {\n-        this.isFabOpen = !isFabOpen;\n-        if (fabPlus.isShown()){\n-            if (isFabOpen) {\n-                fabPlus.startAnimation(rotate_backward);\n-                fabCamera.startAnimation(fab_close);\n-                fabGallery.startAnimation(fab_close);\n-                fabCamera.hide();\n-                fabGallery.hide();\n-            } else {\n-                fabPlus.startAnimation(rotate_forward);\n-                fabCamera.startAnimation(fab_open);\n-                fabGallery.startAnimation(fab_open);\n-                fabCamera.show();\n-                fabGallery.show();\n-            }\n-            this.isFabOpen=!isFabOpen;\n-        }\n-    }\n-\n-    /**\n-     * Shows welcome message if user has no contributions yet i.e. new user.\n-     */\n-    public void showWelcomeTip(boolean shouldShow) {\n-        noContributionsYet.setVisibility(shouldShow ? VISIBLE : GONE);\n-    }\n-\n-    /**\n-     * Responsible to set progress bar invisible and visible\n-     *\n-     * @param shouldShow True when contributions list should be hidden.\n-     */\n-    public void showProgress(final boolean shouldShow) {\n-        progressBar.setVisibility(shouldShow ? VISIBLE : GONE);\n-    }\n-\n-    public void showNoContributionsUI(boolean shouldShow) {\n-        noContributionsYet.setVisibility(shouldShow ? VISIBLE : GONE);\n-    }\n-\n-    @Override\n-    public void showContributions(final List<Contribution> contributionList) {\n-        adapter.setContributions(contributionList);\n-    }\n-\n-    @Override\n-    public void retryUpload(Contribution contribution) {\n-        callback.retryUpload(contribution);\n-    }\n-\n-    @Override\n-    public void deleteUpload(Contribution contribution) {\n-        contributionsListPresenter.deleteUpload(contribution);\n-    }\n-\n-    @Override\n-    public void openMediaDetail(int position) {\n-        callback.showDetail(position);\n-    }\n-\n-    public Media getMediaAtPosition(int i) {\n-        return adapter.getContributionForPosition(i);\n-    }\n-\n-    public int getTotalMediaCount() {\n-        return adapter.getItemCount();\n-    }\n-\n-    public interface SourceRefresher {\n-        void refreshSource();\n-    }\n-\n-    @Override\n-    public void onSaveInstanceState(@NonNull Bundle outState) {\n-        super.onSaveInstanceState(outState);\n-        LayoutManager layoutManager = rvContributionsList.getLayoutManager();\n-        int lastVisibleItemPosition=0;\n-        if(layoutManager instanceof  LinearLayoutManager){\n-            lastVisibleItemPosition= ((LinearLayoutManager) layoutManager).findLastCompletelyVisibleItemPosition();\n-        }else if(layoutManager instanceof GridLayoutManager){\n-            lastVisibleItemPosition=((GridLayoutManager)layoutManager).findLastCompletelyVisibleItemPosition();\n-        }\n-        String idOfItemWithPosition = findIdOfItemWithPosition(lastVisibleItemPosition);\n-        if (null != idOfItemWithPosition) {\n-            outState.putString(VISIBLE_ITEM_ID, idOfItemWithPosition);\n-        }\n-    }\n-\n-    @Override\n-    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {\n-        super.onViewStateRestored(savedInstanceState);\n-        if(null!=savedInstanceState){\n-            lastVisibleItemID =savedInstanceState.getString(VISIBLE_ITEM_ID, null);\n-        }\n-    }\n-\n-    /**\n-     * Gets the id of the contribution from the db\n-     * @param position\n-     * @return\n-     */\n-    @Nullable\n-    private String findIdOfItemWithPosition(int position) {\n-        Contribution contributionForPosition = adapter.getContributionForPosition(position);\n-        if (null != contributionForPosition) {\n-            return contributionForPosition.getFilename();\n-        }\n-        return null;\n-    }\n-\n-    public interface Callback {\n-        void retryUpload(Contribution contribution);\n-        void showDetail(int position);\n-    }\n+  @Inject\n+  ContributionsListPresenter contributionsListPresenter;\n+\n+  private Animation fab_close;\n+  private Animation fab_open;\n+  private Animation rotate_forward;\n+  private Animation rotate_backward;\n+\n+\n+  private boolean isFabOpen;\n+\n+  private ContributionsListAdapter adapter;\n+\n+  private final Callback callback;\n+\n+  private final int SPAN_COUNT_LANDSCAPE = 3;\n+  private final int SPAN_COUNT_PORTRAIT = 1;\n+\n+  ContributionsListFragment(final Callback callback) {\n+    this.callback = callback;\n+  }\n+\n+  public View onCreateView(\n+      final LayoutInflater inflater, @Nullable final ViewGroup container,\n+      @Nullable final Bundle savedInstanceState) {\n+    final View view = inflater.inflate(R.layout.fragment_contributions_list, container, false);\n+    ButterKnife.bind(this, view);\n+    contributionsListPresenter.onAttachView(this);\n+    initAdapter();\n+    return view;\n+  }\n+\n+  private void initAdapter() {\n+    adapter = new ContributionsListAdapter(this, mediaClient);\n+  }\n+\n+  @Override\n+  public void onViewCreated(final View view, @Nullable final Bundle savedInstanceState) {\n+    super.onViewCreated(view, savedInstanceState);\n+    initRecyclerView();\n+    initializeAnimations();\n+    setListeners();\n+  }\n+\n+  private void initRecyclerView() {\n+    final GridLayoutManager layoutManager = new GridLayoutManager(getContext(),\n+        getSpanCount(getResources().getConfiguration().orientation));\n+    rvContributionsList.setLayoutManager(layoutManager);\n+    contributionsListPresenter.setup();\n+    contributionsListPresenter.contributionList.observe(this, adapter::submitList);\n+    rvContributionsList.setAdapter(adapter);\n+  }\n+\n+  private int getSpanCount(final int orientation) {\n+    return orientation == Configuration.ORIENTATION_LANDSCAPE ?\n+        SPAN_COUNT_LANDSCAPE : SPAN_COUNT_PORTRAIT;\n+  }\n+\n+  @Override\n+  public void onConfigurationChanged(final Configuration newConfig) {\n+    super.onConfigurationChanged(newConfig);\n+    // check orientation\n+    fab_layout.setOrientation(newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE ?\n+        LinearLayout.HORIZONTAL : LinearLayout.VERTICAL);\n+    rvContributionsList\n+        .setLayoutManager(new GridLayoutManager(getContext(), getSpanCount(newConfig.orientation)));\n+  }\n+\n+  private void initializeAnimations() {\n+    fab_open = AnimationUtils.loadAnimation(getActivity(), R.anim.fab_open);\n+    fab_close = AnimationUtils.loadAnimation(getActivity(), R.anim.fab_close);\n+    rotate_forward = AnimationUtils.loadAnimation(getActivity(), R.anim.rotate_forward);\n+    rotate_backward = AnimationUtils.loadAnimation(getActivity(), R.anim.rotate_backward);\n+  }\n+\n+  private void setListeners() {\n+    fabPlus.setOnClickListener(view -> animateFAB(isFabOpen));\n+    fabCamera.setOnClickListener(view -> {\n+      controller.initiateCameraPick(getActivity());\n+      animateFAB(isFabOpen);\n+    });\n+    fabGallery.setOnClickListener(view -> {\n+      controller.initiateGalleryPick(getActivity(), true);\n+      animateFAB(isFabOpen);\n+    });\n+  }\n+\n+  private void animateFAB(final boolean isFabOpen) {\n+    this.isFabOpen = !isFabOpen;\n+    if (fabPlus.isShown()) {\n+      if (isFabOpen) {\n+        fabPlus.startAnimation(rotate_backward);\n+        fabCamera.startAnimation(fab_close);\n+        fabGallery.startAnimation(fab_close);\n+        fabCamera.hide();\n+        fabGallery.hide();\n+      } else {\n+        fabPlus.startAnimation(rotate_forward);\n+        fabCamera.startAnimation(fab_open);\n+        fabGallery.startAnimation(fab_open);\n+        fabCamera.show();\n+        fabGallery.show();\n+      }\n+      this.isFabOpen = !isFabOpen;\n+    }\n+  }\n+\n+  /**\n+   * Shows welcome message if user has no contributions yet i.e. new user.\n+   */\n+  public void showWelcomeTip(final boolean shouldShow) {\n+    noContributionsYet.setVisibility(shouldShow ? VISIBLE : GONE);\n+  }\n+\n+  /**\n+   * Responsible to set progress bar invisible and visible\n+   *\n+   * @param shouldShow True when contributions list should be hidden.\n+   */\n+  public void showProgress(final boolean shouldShow) {\n+    progressBar.setVisibility(shouldShow ? VISIBLE : GONE);\n+  }\n+\n+  public void showNoContributionsUI(final boolean shouldShow) {\n+    noContributionsYet.setVisibility(shouldShow ? VISIBLE : GONE);\n+  }\n+\n+  @Override\n+  public void onSaveInstanceState(@NonNull Bundle outState) {\n+    super.onSaveInstanceState(outState);\n+    final GridLayoutManager layoutManager = (GridLayoutManager) rvContributionsList.getLayoutManager();\n+    outState.putParcelable(RV_STATE, layoutManager.onSaveInstanceState());\n+  }\n+\n+  @Override\n+  public void onViewStateRestored(@Nullable Bundle savedInstanceState) {\n+    super.onViewStateRestored(savedInstanceState);\n+    if (null != savedInstanceState) {\n+      final Parcelable savedRecyclerLayoutState = savedInstanceState.getParcelable(RV_STATE);\n+      rvContributionsList.getLayoutManager().onRestoreInstanceState(savedRecyclerLayoutState);\n+    }\n+  }\n+\n+  @Override\n+  public void retryUpload(final Contribution contribution) {\n+    callback.retryUpload(contribution);\n+  }\n+\n+  @Override\n+  public void deleteUpload(final Contribution contribution) {\n+    contributionsListPresenter.deleteUpload(contribution);\n+  }\n+\n+  @Override\n+  public void openMediaDetail(final int position) {\n+    callback.showDetail(position);\n+  }\n+\n+  public Media getMediaAtPosition(final int i) {\n+    return adapter.getContributionForPosition(i);\n+  }\n+\n+  public int getTotalMediaCount() {\n+    return adapter.getItemCount();\n+  }\n+\n+  public interface Callback {\n+\n+    void retryUpload(Contribution contribution);\n+\n+    void showDetail(int position);\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NzgxMw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r412877813", "bodyText": "is this different from the above params?", "author": "macgills", "createdAt": "2020-04-22T10:51:27Z", "path": "app/src/main/java/fr/free/nrw/commons/media/MediaInterface.java", "diffHunk": "@@ -17,6 +15,11 @@\n     String MEDIA_PARAMS=\"&prop=imageinfo&iiprop=url|extmetadata&iiurlwidth=640\" +\n             \"&iiextmetadatafilter=DateTime|Categories|GPSLatitude|GPSLongitude|ImageDescription|DateTimeOriginal\" +\n             \"|Artist|LicenseShortName|LicenseUrl\";\n+\n+    String USER_MEDIA_PARAMS = \"&prop=imageinfo&iiprop=url|extmetadata&iiurlwidth=640\" +", "originalCommit": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/media/MediaInterface.java b/app/src/main/java/fr/free/nrw/commons/media/MediaInterface.java\nindex 9b193f984..e102a8fcb 100644\n--- a/app/src/main/java/fr/free/nrw/commons/media/MediaInterface.java\n+++ b/app/src/main/java/fr/free/nrw/commons/media/MediaInterface.java\n\n@@ -16,10 +16,6 @@ public interface MediaInterface {\n             \"&iiextmetadatafilter=DateTime|Categories|GPSLatitude|GPSLongitude|ImageDescription|DateTimeOriginal\" +\n             \"|Artist|LicenseShortName|LicenseUrl\";\n \n-    String USER_MEDIA_PARAMS = \"&prop=imageinfo&iiprop=url|extmetadata&iiurlwidth=640\" +\n-        \"&iiextmetadatafilter=DateTime|Categories|GPSLatitude|GPSLongitude|ImageDescription|DateTimeOriginal\"\n-        +\n-        \"|Artist|LicenseShortName|LicenseUrl\";\n     /**\n      * Checks if a page exists or not.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3OTQ3Mw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r412879473", "bodyText": "the username is... the category name?", "author": "macgills", "createdAt": "2020-04-22T10:54:09Z", "path": "app/src/main/java/fr/free/nrw/commons/media/MediaInterface.java", "diffHunk": "@@ -48,6 +51,21 @@\n             MEDIA_PARAMS)\n     Observable<MwQueryResponse> getMediaListFromCategory(@Query(\"gcmtitle\") String category, @Query(\"gcmlimit\") int itemLimit, @QueryMap Map<String, String> continuation);\n \n+    /**\n+     * This method retrieves a list of Media objects for a given user name\n+     *\n+     * @param username     the category name. Must start with \"Category:\"", "originalCommit": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/media/MediaInterface.java b/app/src/main/java/fr/free/nrw/commons/media/MediaInterface.java\nindex 9b193f984..e102a8fcb 100644\n--- a/app/src/main/java/fr/free/nrw/commons/media/MediaInterface.java\n+++ b/app/src/main/java/fr/free/nrw/commons/media/MediaInterface.java\n\n@@ -54,17 +50,15 @@ public interface MediaInterface {\n     /**\n      * This method retrieves a list of Media objects for a given user name\n      *\n-     * @param username     the category name. Must start with \"Category:\"\n+     * @param username     user's Wikimedia Commons username.\n      * @param itemLimit    how many images are returned\n      * @param continuation the continuation string from the previous query or empty map\n      * @return\n      */\n     @GET(\"w/api.php?action=query&format=json&formatversion=2\" + //Basic parameters\n-        \"&generator=allimages&gaisort=timestamp&gaidir=older\" +\n-        //Category parameters\n-        USER_MEDIA_PARAMS)\n+        \"&generator=allimages&gaisort=timestamp&gaidir=older\" + MEDIA_PARAMS)\n     Observable<MwQueryResponse> getMediaListForUser(@Query(\"gaiuser\") String username,\n-        @Query(\"gailimit\") int itemLimit, @QueryMap Map<String, String> continuation);\n+        @Query(\"gailimit\") int itemLimit, @QueryMap(encoded = true) Map<String, String> continuation);\n \n     /**\n      * This method retrieves a list of Media objects filtered using image generator query\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MTc0Mg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r412881742", "bodyText": "Not sure about this at all, at this point a contribution can't have a pageID as it doesn't exist on the servers, we try and save it with nothing(?) set as pageId? I am pretty sure @AutoGenerate has been removed so that won't work", "author": "macgills", "createdAt": "2020-04-22T10:57:56Z", "path": "app/src/main/java/fr/free/nrw/commons/upload/UploadService.java", "diffHunk": "@@ -162,7 +162,7 @@ public void queue(int what, Contribution contribution) {\n                         .subscribeOn(ioThreadScheduler)\n                         .observeOn(mainThreadScheduler)\n                         .subscribe(aLong->{\n-                            contribution.set_id(aLong);\n+                            contribution.setPageId(String.valueOf(aLong));", "originalCommit": "1e12d310001fbf5df31c0245ab53c9e9f57fb8f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/upload/UploadService.java b/app/src/main/java/fr/free/nrw/commons/upload/UploadService.java\nindex b5bf18fe5..0f88be382 100644\n--- a/app/src/main/java/fr/free/nrw/commons/upload/UploadService.java\n+++ b/app/src/main/java/fr/free/nrw/commons/upload/UploadService.java\n\n@@ -131,48 +149,32 @@ public class UploadService extends HandlerService<Contribution> {\n         compositeDisposable = new CompositeDisposable();\n         notificationManager = NotificationManagerCompat.from(this);\n         curNotification = getNotificationBuilder(CommonsApplication.NOTIFICATION_CHANNEL_ID_ALL);\n+        contributionsToUpload = PublishProcessor.create();\n+        compositeDisposable.add(contributionsToUpload.subscribe(this::handleUpload));\n     }\n \n-    @Override\n-    protected void handle(int what, Contribution contribution) {\n-        switch (what) {\n-            case ACTION_UPLOAD_FILE:\n-                uploadContribution(contribution);\n-                break;\n-            default:\n-                throw new IllegalArgumentException(\"Unknown value for what\");\n+    public void handleUpload(Contribution contribution) {\n+        contribution.setState(Contribution.STATE_QUEUED);\n+        contribution.setTransferred(0);\n+        toUpload++;\n+        if (curNotification != null && toUpload != 1) {\n+            curNotification.setContentText(getResources().getQuantityString(R.plurals.uploads_pending_notification_indicator, toUpload, toUpload));\n+            Timber.d(\"%d uploads left\", toUpload);\n+            notificationManager.notify(contribution.getLocalUri().toString(), NOTIFICATION_UPLOAD_IN_PROGRESS, curNotification.build());\n         }\n-    }\n \n-    @Override\n-    public void queue(int what, Contribution contribution) {\n-        switch (what) {\n-            case ACTION_UPLOAD_FILE:\n-\n-                contribution.setState(Contribution.STATE_QUEUED);\n-                contribution.setTransferred(0);\n-                toUpload++;\n-                if (curNotification != null && toUpload != 1) {\n-                    curNotification.setContentText(getResources().getQuantityString(R.plurals.uploads_pending_notification_indicator, toUpload, toUpload));\n-                    Timber.d(\"%d uploads left\", toUpload);\n-                    notificationManager.notify(contribution.getLocalUri().toString(), NOTIFICATION_UPLOAD_IN_PROGRESS, curNotification.build());\n-                }\n-                compositeDisposable.add(contributionDao\n-                        .save(contribution)\n-                        .subscribeOn(ioThreadScheduler)\n-                        .observeOn(mainThreadScheduler)\n-                        .subscribe(aLong->{\n-                            contribution.setPageId(String.valueOf(aLong));\n-                            UploadService.super.queue(what, contribution);\n-                        }, Throwable::printStackTrace));\n-                break;\n-            default:\n-                throw new IllegalArgumentException(\"Unknown value for what\");\n-        }\n+        compositeDisposable.add(contributionDao\n+            .save(contribution)\n+            .subscribeOn(ioThreadScheduler)\n+            .subscribe(() -> uploadContribution(contribution)));\n     }\n \n     private boolean freshStart = true;\n \n+    public void queue(Contribution contribution) {\n+        contributionsToUpload.offer(contribution);\n+    }\n+\n     @Override\n     public int onStartCommand(Intent intent, int flags, int startId) {\n         if (ACTION_START_SERVICE.equals(intent.getAction()) && freshStart) {\n"}}, {"oid": "22fd8e952606c0c0aaacd797fc0cd8f4d635c1cc", "url": "https://github.com/commons-app/apps-android-commons/commit/22fd8e952606c0c0aaacd797fc0cd8f4d635c1cc", "message": "Delete and save contribution with correct pageid when upload succeeds", "committedDate": "2020-04-23T19:52:47Z", "type": "commit"}, {"oid": "854ab5c19c2a69bb997d7254e7eb4d8c03370008", "url": "https://github.com/commons-app/apps-android-commons/commit/854ab5c19c2a69bb997d7254e7eb4d8c03370008", "message": "Merge branch 'master' into lazyContributions", "committedDate": "2020-04-26T07:25:12Z", "type": "commit"}, {"oid": "5d2216bad6b9a4e5f7beeba890c46678fe869e42", "url": "https://github.com/commons-app/apps-android-commons/commit/5d2216bad6b9a4e5f7beeba890c46678fe869e42", "message": "fix build", "committedDate": "2020-04-26T08:19:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM3MTk2Mg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r415371962", "bodyText": "Is this intentional?", "author": "ashishkumar468", "createdAt": "2020-04-26T18:35:13Z", "path": "app/src/main/java/fr/free/nrw/commons/OkHttpConnectionFactory.java", "diffHunk": "@@ -45,7 +46,7 @@ private static OkHttpClient createClient() {\n \n     private static HttpLoggingInterceptor getLoggingInterceptor() {\n         final HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor()\n-                .setLevel(Level.BASIC);\n+            .setLevel(Level.BODY);", "originalCommit": "5d2216bad6b9a4e5f7beeba890c46678fe869e42", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/OkHttpConnectionFactory.java b/app/src/main/java/fr/free/nrw/commons/OkHttpConnectionFactory.java\nindex 0497b8c0c..59e33ea24 100644\n--- a/app/src/main/java/fr/free/nrw/commons/OkHttpConnectionFactory.java\n+++ b/app/src/main/java/fr/free/nrw/commons/OkHttpConnectionFactory.java\n\n@@ -46,7 +41,7 @@ public final class OkHttpConnectionFactory {\n \n     private static HttpLoggingInterceptor getLoggingInterceptor() {\n         final HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor()\n-            .setLevel(Level.BODY);\n+            .setLevel(Level.BASIC);\n \n         httpLoggingInterceptor.redactHeader(\"Authorization\");\n         httpLoggingInterceptor.redactHeader(\"Cookie\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM3MjI5NA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r415372294", "bodyText": "Maybe add a comment, why this constructor has state_completed by default", "author": "ashishkumar468", "createdAt": "2020-04-26T18:36:33Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/Contribution.java", "diffHunk": "@@ -161,17 +143,26 @@ public int describeContents() {\n     @Override\n     public void writeToParcel(final Parcel dest, final int flags) {\n         super.writeToParcel(dest, flags);\n-        dest.writeLong(_id);\n         dest.writeInt(state);\n         dest.writeLong(transferred);\n         dest.writeString(decimalCoords);\n         dest.writeString(dateCreatedSource);\n         dest.writeSerializable((HashMap) captions);\n     }\n \n+    public Contribution(Media media) {\n+        super(media.getPageId(),\n+            media.getLocalUri(), media.getThumbUrl(), media.getImageUrl(), media.getFilename(),\n+            media.getDescription(),\n+            media.getDiscussion(),\n+            media.getDataLength(), media.getDateCreated(), media.getDateUploaded(),\n+            media.getLicense(), media.getLicenseUrl(), media.getCreator(), media.getCategories(),\n+            media.isRequestedDeletion(), media.getCoordinates());\n+        this.state = STATE_COMPLETED;", "originalCommit": "5d2216bad6b9a4e5f7beeba890c46678fe869e42", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/Contribution.java b/app/src/main/java/fr/free/nrw/commons/contributions/Contribution.java\nindex 213e8e3ea..5461ccfca 100644\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/Contribution.java\n+++ b/app/src/main/java/fr/free/nrw/commons/contributions/Contribution.java\n\n@@ -150,7 +150,12 @@ public class Contribution extends Media {\n         dest.writeSerializable((HashMap) captions);\n     }\n \n-    public Contribution(Media media) {\n+    /**\n+     * Constructor that takes Media object and state as parameters and builds a new Contribution object\n+     * @param media\n+     * @param state\n+     */\n+    public Contribution(Media media, int state) {\n         super(media.getPageId(),\n             media.getLocalUri(), media.getThumbUrl(), media.getImageUrl(), media.getFilename(),\n             media.getDescription(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5OTUwNw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r419999507", "bodyText": "you could replace this line with this()", "author": "macgills", "createdAt": "2020-05-05T10:08:34Z", "path": "app/src/main/java/fr/free/nrw/commons/Media.java", "diffHunk": "@@ -64,14 +68,28 @@\n      * Provides local constructor\n      */\n     public Media() {\n+        pageId = UUID.randomUUID().toString();\n     }\n \n+    public static final Creator<Media> CREATOR = new Creator<Media>() {\n+        @Override\n+        public Media createFromParcel(final Parcel source) {\n+            return new Media(source);\n+        }\n+\n+        @Override\n+        public Media[] newArray(final int size) {\n+            return new Media[size];\n+        }\n+    };\n+\n     /**\n      * Provides a minimal constructor\n      *\n      * @param filename Media filename\n      */\n-    public Media(String filename) {\n+    public Media(final String filename) {\n+        pageId = UUID.randomUUID().toString();", "originalCommit": "5d2216bad6b9a4e5f7beeba890c46678fe869e42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM5MTcxOA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r421391718", "bodyText": "@macgills I didn't understand the requested change. Can you elaborate?", "author": "maskaravivek", "createdAt": "2020-05-07T10:08:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5OTUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyNTcyMw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r421425723", "bodyText": "pageId = UUID.randomUUID().toString(); is repeated, you can invoke the parameter-less constructor by calling this() and stop the repetition.\nKotlin - because it is great - enforces this and all secondary constructors must delegate to the primary constructor.", "author": "macgills", "createdAt": "2020-05-07T11:13:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5OTUwNw=="}], "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/Media.java b/app/src/main/java/fr/free/nrw/commons/Media.java\nindex 6035746a9..214660334 100644\n--- a/app/src/main/java/fr/free/nrw/commons/Media.java\n+++ b/app/src/main/java/fr/free/nrw/commons/Media.java\n\n@@ -89,7 +90,7 @@ public class Media implements Parcelable {\n      * @param filename Media filename\n      */\n     public Media(final String filename) {\n-        pageId = UUID.randomUUID().toString();\n+        this();\n         this.filename = filename;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwMTc0MA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r420001740", "bodyText": "this method can probably be deleted?", "author": "macgills", "createdAt": "2020-05-05T10:12:53Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java", "diffHunk": "@@ -307,43 +226,47 @@ void onAuthCookieAcquired() {\n \n     }\n \n-    public Intent getUploadServiceIntent(){\n-        Intent intent = new Intent(getActivity(), UploadService.class);\n-        intent.setAction(UploadService.ACTION_START_SERVICE);\n-        return intent;\n-    }\n+    private void initFragments() {\n+        if (null == contributionsListFragment) {\n+            contributionsListFragment = new ContributionsListFragment(this);\n+        }\n \n-    /**\n-     * Replace whatever is in the current contributionsFragmentContainer view with\n-     * mediaDetailPagerFragment, and preserve previous state in back stack.\n-     * Called when user selects a contribution.\n-     */\n-    private void showDetail(int i) {\n-        if (mediaDetailPagerFragment == null || !mediaDetailPagerFragment.isVisible()) {\n-            mediaDetailPagerFragment = new MediaDetailPagerFragment();\n+        if (shouldShowMediaDetailsFragment) {\n             showMediaDetailPagerFragment();\n+        } else {\n+            showContributionsListFragment();\n         }\n-        mediaDetailPagerFragment.showImage(i);\n+\n+        showFragment(contributionsListFragment, CONTRIBUTION_LIST_FRAGMENT_TAG);\n     }\n \n-    @Override\n-    public void refreshSource() {\n-        contributionsPresenter.fetchContributions();\n+    /**\n+     * Replaces the root frame layout with the given fragment\n+     *\n+     * @param fragment\n+     * @param tag\n+     */\n+    private void showFragment(Fragment fragment, String tag) {\n+        FragmentTransaction transaction = getChildFragmentManager().beginTransaction();\n+        transaction.replace(R.id.root_frame, fragment, tag);\n+        transaction.addToBackStack(CONTRIBUTION_LIST_FRAGMENT_TAG);\n+        transaction.commit();\n+        getChildFragmentManager().executePendingTransactions();\n     }\n \n-    @Override\n-    public Media getMediaAtPosition(int i) {\n-        return contributionsPresenter.getItemAtPosition(i);\n+    public Intent getUploadServiceIntent(){\n+        Intent intent = new Intent(getActivity(), UploadService.class);\n+        intent.setAction(UploadService.ACTION_START_SERVICE);\n+        return intent;\n     }\n \n     @Override\n-    public int getTotalMediaCount() {\n-        return numberOfContributions;\n+    public void refreshSource() {", "originalCommit": "5d2216bad6b9a4e5f7beeba890c46678fe869e42", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java\nindex 6b75c6815..8e3221ea9 100644\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java\n+++ b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java\n\n@@ -260,11 +255,6 @@ public class ContributionsFragment\n         return intent;\n     }\n \n-    @Override\n-    public void refreshSource() {\n-\n-    }\n-\n     @SuppressWarnings(\"ConstantConditions\")\n     private void setUploadCount() {\n         compositeDisposable.add(okHttpJsonApiClient\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNzQyNw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r420007427", "bodyText": "do we need this variable? It could be inlined like the previous code", "author": "macgills", "createdAt": "2020-05-05T10:24:15Z", "path": "app/src/main/java/fr/free/nrw/commons/upload/UploadService.java", "diffHunk": "@@ -299,11 +297,12 @@ private void saveCompletedContribution(Contribution contribution, UploadResult u\n         contribution.setState(Contribution.STATE_COMPLETED);\n         contribution.setDateUploaded(CommonsDateUtil.getIso8601DateFormatTimestamp()\n             .parse(uploadResult.getImageinfo().getTimestamp()));\n-        compositeDisposable.add(contributionDao\n-            .save(contribution)\n-            .subscribeOn(ioThreadScheduler)\n-            .observeOn(mainThreadScheduler)\n-            .subscribe());\n+\n+        final Disposable disposable = contributionDao.delete(contribution)", "originalCommit": "5d2216bad6b9a4e5f7beeba890c46678fe869e42", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/upload/UploadService.java b/app/src/main/java/fr/free/nrw/commons/upload/UploadService.java\nindex a7b26d898..0f88be382 100644\n--- a/app/src/main/java/fr/free/nrw/commons/upload/UploadService.java\n+++ b/app/src/main/java/fr/free/nrw/commons/upload/UploadService.java\n\n@@ -291,18 +295,11 @@ public class UploadService extends CommonsDaggerService {\n         saveCompletedContribution(contribution, uploadResult);\n     }\n \n-    private void saveCompletedContribution(Contribution contribution, UploadResult uploadResult) throws ParseException {\n-        contribution.setFilename(uploadResult.createCanonicalFileName());\n-        contribution.setImageUrl(uploadResult.getImageinfo().getOriginalUrl());\n-        contribution.setState(Contribution.STATE_COMPLETED);\n-        contribution.setDateUploaded(CommonsDateUtil.getIso8601DateFormatTimestamp()\n-            .parse(uploadResult.getImageinfo().getTimestamp()));\n-\n-        final Disposable disposable = contributionDao.delete(contribution)\n-            .flatMap(integer -> mediaClient.getMedia(\"File:\" + uploadResult.getFilename()))\n-            .subscribe(media -> contributionDao.save(new Contribution(media)));\n-\n-        compositeDisposable.add(disposable);\n+    private void saveCompletedContribution(Contribution contribution, UploadResult uploadResult) {\n+        compositeDisposable.add(mediaClient.getMedia(\"File:\" + uploadResult.getFilename())\n+        .map(media -> new Contribution(media, Contribution.STATE_COMPLETED))\n+        .flatMapCompletable(newContribution -> contributionDao.saveAndDelete(contribution, newContribution))\n+        .subscribe());\n     }\n \n     @SuppressLint(\"StringFormatInvalid\")\n"}}, {"oid": "da1b3cc88f3447c9be2e48df734b5d09da79b021", "url": "https://github.com/commons-app/apps-android-commons/commit/da1b3cc88f3447c9be2e48df734b5d09da79b021", "message": "Code review comments", "committedDate": "2020-05-07T06:33:40Z", "type": "commit"}, {"oid": "e93e491cafc130729bf2693cd7bc5da21a742d62", "url": "https://github.com/commons-app/apps-android-commons/commit/e93e491cafc130729bf2693cd7bc5da21a742d62", "message": "With paging library added", "committedDate": "2020-05-07T09:54:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQzNzY0NQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r421437645", "bodyText": "\"concert\" in variable names and comments", "author": "macgills", "createdAt": "2020-05-07T11:37:42Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java", "diffHunk": "@@ -1,52 +1,54 @@\n package fr.free.nrw.commons.contributions;\n \n-import android.text.TextUtils;\n import android.view.LayoutInflater;\n import android.view.ViewGroup;\n import androidx.annotation.NonNull;\n-import androidx.recyclerview.widget.RecyclerView;\n+import androidx.paging.PagedListAdapter;\n+import androidx.recyclerview.widget.DiffUtil;\n import fr.free.nrw.commons.R;\n import fr.free.nrw.commons.media.MediaClient;\n import java.util.ArrayList;\n import java.util.List;\n \n /**\n- * Represents The View Adapter for the List of Contributions  \n+ * Represents The View Adapter for the List of Contributions\n  */\n-public class ContributionsListAdapter extends RecyclerView.Adapter<ContributionViewHolder> {\n+public class ContributionsListAdapter extends\n+    PagedListAdapter<Contribution, ContributionViewHolder> {\n \n     private Callback callback;\n     private final MediaClient mediaClient;\n     private List<Contribution> contributions;\n \n-    public ContributionsListAdapter(Callback callback,\n-        MediaClient mediaClient) {\n+    ContributionsListAdapter(final Callback callback,\n+        final MediaClient mediaClient) {\n+        super(DIFF_CALLBACK);\n         this.callback = callback;\n         this.mediaClient = mediaClient;\n         contributions = new ArrayList<>();\n+        setHasStableIds(true);\n     }\n \n-    /**\n-     * Creates the new View Holder which will be used to display items(contributions)\n-     * using the onBindViewHolder(viewHolder,position) \n-     */\n-    @NonNull\n-    @Override\n-    public ContributionViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n-        ContributionViewHolder viewHolder = new ContributionViewHolder(\n-                LayoutInflater.from(parent.getContext())\n-                        .inflate(R.layout.layout_contribution, parent, false), callback, mediaClient);\n-        return viewHolder;\n-    }\n+\n+    private static DiffUtil.ItemCallback<Contribution> DIFF_CALLBACK =\n+        new DiffUtil.ItemCallback<Contribution>() {\n+            // Concert details may have changed if reloaded from the database,", "originalCommit": "e93e491cafc130729bf2693cd7bc5da21a742d62", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java\nindex 36f114cc9..a0c8e1088 100644\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java\n+++ b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java\n\n@@ -1,4 +1,4 @@\n-package fr.free.nrw.commons.contributions;\n+    package fr.free.nrw.commons.contributions;\n \n import android.view.LayoutInflater;\n import android.view.ViewGroup;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0NDAzNw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r421444037", "bodyText": "So you overrode equals to get the effect of old.pageId==new.pageId here by converting them to strings first. Couple problems\n\nQuite surprising, could have effects at any other comparison site\nAndroid studio will create hashCode, equals & toString methods for you, press alt+insert\nno hashcode implementation was added\n\nTo make explicit your intention you could have said\n            @Override\n            public boolean areContentsTheSame(Contribution oldConcert,\n                Contribution newConcert) {\n                return areItemsTheSame(oldConcert, newConcert);\n\nwhich is I think what the intention was.\nThis leads in to the larger problem of a contribution can't change its contents which they should be able to do I think? This could lead to some very confusing errors where the data has been updated and it just won't render", "author": "macgills", "createdAt": "2020-05-07T11:50:17Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java", "diffHunk": "@@ -1,52 +1,54 @@\n package fr.free.nrw.commons.contributions;\n \n-import android.text.TextUtils;\n import android.view.LayoutInflater;\n import android.view.ViewGroup;\n import androidx.annotation.NonNull;\n-import androidx.recyclerview.widget.RecyclerView;\n+import androidx.paging.PagedListAdapter;\n+import androidx.recyclerview.widget.DiffUtil;\n import fr.free.nrw.commons.R;\n import fr.free.nrw.commons.media.MediaClient;\n import java.util.ArrayList;\n import java.util.List;\n \n /**\n- * Represents The View Adapter for the List of Contributions  \n+ * Represents The View Adapter for the List of Contributions\n  */\n-public class ContributionsListAdapter extends RecyclerView.Adapter<ContributionViewHolder> {\n+public class ContributionsListAdapter extends\n+    PagedListAdapter<Contribution, ContributionViewHolder> {\n \n     private Callback callback;\n     private final MediaClient mediaClient;\n     private List<Contribution> contributions;\n \n-    public ContributionsListAdapter(Callback callback,\n-        MediaClient mediaClient) {\n+    ContributionsListAdapter(final Callback callback,\n+        final MediaClient mediaClient) {\n+        super(DIFF_CALLBACK);\n         this.callback = callback;\n         this.mediaClient = mediaClient;\n         contributions = new ArrayList<>();\n+        setHasStableIds(true);\n     }\n \n-    /**\n-     * Creates the new View Holder which will be used to display items(contributions)\n-     * using the onBindViewHolder(viewHolder,position) \n-     */\n-    @NonNull\n-    @Override\n-    public ContributionViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n-        ContributionViewHolder viewHolder = new ContributionViewHolder(\n-                LayoutInflater.from(parent.getContext())\n-                        .inflate(R.layout.layout_contribution, parent, false), callback, mediaClient);\n-        return viewHolder;\n-    }\n+\n+    private static DiffUtil.ItemCallback<Contribution> DIFF_CALLBACK =\n+        new DiffUtil.ItemCallback<Contribution>() {\n+            // Concert details may have changed if reloaded from the database,\n+            // but ID is fixed.\n+            @Override\n+            public boolean areItemsTheSame(Contribution oldConcert, Contribution newConcert) {\n+                return oldConcert.getPageId() == newConcert.getPageId();\n+            }\n+\n+            @Override\n+            public boolean areContentsTheSame(Contribution oldConcert,\n+                Contribution newConcert) {\n+                return oldConcert.equals(newConcert);", "originalCommit": "e93e491cafc130729bf2693cd7bc5da21a742d62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgwNzI0Nw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r421807247", "bodyText": "Agreed. I didn't notice this while making the changes. I have updated the hashcode and equals implementation for Media and Contribution classes. It would be great if you could take a look.", "author": "maskaravivek", "createdAt": "2020-05-07T21:32:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0NDAzNw=="}], "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java\nindex 36f114cc9..a0c8e1088 100644\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java\n+++ b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java\n\n@@ -1,4 +1,4 @@\n-package fr.free.nrw.commons.contributions;\n+    package fr.free.nrw.commons.contributions;\n \n import android.view.LayoutInflater;\n import android.view.ViewGroup;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0Njk3Mg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r421446972", "bodyText": "not restoring the state?", "author": "macgills", "createdAt": "2020-05-07T11:56:00Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java", "diffHunk": "@@ -211,23 +233,25 @@ public void onSaveInstanceState(@NonNull Bundle outState) {\n     public void onViewStateRestored(@Nullable Bundle savedInstanceState) {\n         super.onViewStateRestored(savedInstanceState);\n         if(null!=savedInstanceState){\n-            lastVisibleItemID =savedInstanceState.getString(VISIBLE_ITEM_ID, null);", "originalCommit": "e93e491cafc130729bf2693cd7bc5da21a742d62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgwNDMyNg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r421804326", "bodyText": "The scrolled state of the list is still being retained. I am not sure how this variable was being used earlier.", "author": "maskaravivek", "createdAt": "2020-05-07T21:26:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0Njk3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java\nindex e0c4aa0bd..d707409e4 100644\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java\n+++ b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java\n\n@@ -38,220 +36,198 @@ import timber.log.Timber;\n public class ContributionsListFragment extends CommonsDaggerSupportFragment implements\n     ContributionsListContract.View, ContributionsListAdapter.Callback {\n \n-    private static final String VISIBLE_ITEM_ID = \"visible_item_id\";\n-    @BindView(R.id.contributionsList)\n-    RecyclerView rvContributionsList;\n-    @BindView(R.id.loadingContributionsProgressBar)\n-    ProgressBar progressBar;\n-    @BindView(R.id.fab_plus)\n-    FloatingActionButton fabPlus;\n-    @BindView(R.id.fab_camera)\n-    FloatingActionButton fabCamera;\n-    @BindView(R.id.fab_gallery)\n-    FloatingActionButton fabGallery;\n-    @BindView(R.id.noContributionsYet)\n-    TextView noContributionsYet;\n-    @BindView(R.id.fab_layout)\n-    LinearLayout fab_layout;\n-\n-    @Inject ContributionController controller;\n+  private static final String RV_STATE = \"rv_scroll_state\";\n+\n+  @BindView(R.id.contributionsList)\n+  RecyclerView rvContributionsList;\n+  @BindView(R.id.loadingContributionsProgressBar)\n+  ProgressBar progressBar;\n+  @BindView(R.id.fab_plus)\n+  FloatingActionButton fabPlus;\n+  @BindView(R.id.fab_camera)\n+  FloatingActionButton fabCamera;\n+  @BindView(R.id.fab_gallery)\n+  FloatingActionButton fabGallery;\n+  @BindView(R.id.noContributionsYet)\n+  TextView noContributionsYet;\n+  @BindView(R.id.fab_layout)\n+  LinearLayout fab_layout;\n+\n+  @Inject\n+  ContributionController controller;\n   @Inject\n   MediaClient mediaClient;\n \n-    @Inject\n-    ContributionsListPresenter contributionsListPresenter;\n-\n-    private MediaDetailPagerFragment mediaDetailPagerFragment;\n-\n-    private Animation fab_close;\n-    private Animation fab_open;\n-    private Animation rotate_forward;\n-    private Animation rotate_backward;\n-\n-\n-    private boolean isFabOpen;\n-\n-    private ContributionsListAdapter adapter;\n-\n-    private Callback callback;\n-\n-  private int SPAN_COUNT_LANDSCAPE =3;\n-  private int SPAN_COUNT_PORTRAIT =1;\n-\n-    ContributionsListFragment(Callback callback) {\n-        this.callback = callback;\n-    }\n-\n-    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n-        View view = inflater.inflate(R.layout.fragment_contributions_list, container, false);\n-        ButterKnife.bind(this, view);\n-        contributionsListPresenter.onAttachView(this);\n-        contributionsListPresenter.setLifeCycleOwner(getViewLifecycleOwner());\n-        initAdapter();\n-        return view;\n-    }\n-\n-    private void initAdapter() {\n-      adapter = new ContributionsListAdapter(this, mediaClient);\n-        adapter.setHasStableIds(true);\n-    }\n-\n-    @Override\n-    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-        initRecyclerView();\n-        initializeAnimations();\n-        setListeners();\n-    }\n-\n-    private void initRecyclerView() {\n-      GridLayoutManager layoutManager = new GridLayoutManager(getContext(),\n-          getSpanCount(getResources().getConfiguration().orientation));\n-      rvContributionsList.setLayoutManager(layoutManager);\n-\n-        rvContributionsList.setAdapter(adapter);\n-        rvContributionsList.addOnScrollListener(contributionsListPresenter.getScrollListener(layoutManager));\n-\n-      contributionsListPresenter.setupLiveData();\n-      contributionsListPresenter.fetchContributions();\n-    }\n-\n-    private int getSpanCount(int orientation) {\n-      return orientation == Configuration.ORIENTATION_LANDSCAPE?\n-          SPAN_COUNT_LANDSCAPE: SPAN_COUNT_PORTRAIT;\n-    }\n-\n-    @Override\n-    public void onConfigurationChanged(Configuration newConfig) {\n-      super.onConfigurationChanged(newConfig);\n-      // check orientation\n-      fab_layout.setOrientation(newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE?\n-          LinearLayout.HORIZONTAL:LinearLayout.VERTICAL);\n-      rvContributionsList\n-          .setLayoutManager(new GridLayoutManager(getContext(), getSpanCount(newConfig.orientation)));\n-    }\n-\n-    private void initializeAnimations() {\n-        fab_open = AnimationUtils.loadAnimation(getActivity(), R.anim.fab_open);\n-        fab_close = AnimationUtils.loadAnimation(getActivity(), R.anim.fab_close);\n-        rotate_forward = AnimationUtils.loadAnimation(getActivity(), R.anim.rotate_forward);\n-        rotate_backward = AnimationUtils.loadAnimation(getActivity(), R.anim.rotate_backward);\n-    }\n-\n-    private void setListeners() {\n-        fabPlus.setOnClickListener(view -> animateFAB(isFabOpen));\n-        fabCamera.setOnClickListener(view -> {\n-            controller.initiateCameraPick(getActivity());\n-            animateFAB(isFabOpen);\n-        });\n-        fabGallery.setOnClickListener(view -> {\n-            controller.initiateGalleryPick(getActivity(), true);\n-            animateFAB(isFabOpen);\n-        });\n-    }\n-\n-    private void animateFAB(boolean isFabOpen) {\n-        this.isFabOpen = !isFabOpen;\n-        if (fabPlus.isShown()){\n-            if (isFabOpen) {\n-                fabPlus.startAnimation(rotate_backward);\n-                fabCamera.startAnimation(fab_close);\n-                fabGallery.startAnimation(fab_close);\n-                fabCamera.hide();\n-                fabGallery.hide();\n-            } else {\n-                fabPlus.startAnimation(rotate_forward);\n-                fabCamera.startAnimation(fab_open);\n-                fabGallery.startAnimation(fab_open);\n-                fabCamera.show();\n-                fabGallery.show();\n-            }\n-            this.isFabOpen=!isFabOpen;\n-        }\n-    }\n-\n-    /**\n-     * Shows welcome message if user has no contributions yet i.e. new user.\n-     */\n-    public void showWelcomeTip(boolean shouldShow) {\n-        noContributionsYet.setVisibility(shouldShow ? VISIBLE : GONE);\n-    }\n-\n-    /**\n-     * Responsible to set progress bar invisible and visible\n-     *\n-     * @param shouldShow True when contributions list should be hidden.\n-     */\n-    public void showProgress(final boolean shouldShow) {\n-        progressBar.setVisibility(shouldShow ? VISIBLE : GONE);\n-    }\n-\n-    public void showNoContributionsUI(boolean shouldShow) {\n-        noContributionsYet.setVisibility(shouldShow ? VISIBLE : GONE);\n-    }\n-\n-    @Override\n-    public void showContributions(final List<Contribution> contributionList) {\n-        adapter.setContributions(contributionList);\n-    }\n-\n-    @Override\n-    public void retryUpload(Contribution contribution) {\n-        callback.retryUpload(contribution);\n-    }\n-\n-    @Override\n-    public void deleteUpload(Contribution contribution) {\n-        contributionsListPresenter.deleteUpload(contribution);\n-    }\n-\n-    @Override\n-    public void openMediaDetail(int position) {\n-        callback.showDetail(position);\n-    }\n-\n-    public Media getMediaAtPosition(int i) {\n-        return adapter.getContributionForPosition(i);\n-    }\n-\n-    public int getTotalMediaCount() {\n-        return adapter.getItemCount();\n-    }\n-\n-    @Override\n-    public void onSaveInstanceState(@NonNull Bundle outState) {\n-        super.onSaveInstanceState(outState);\n-        LayoutManager layoutManager = rvContributionsList.getLayoutManager();\n-        int lastVisibleItemPosition= ((GridLayoutManager)layoutManager).findLastCompletelyVisibleItemPosition();;\n-        String idOfItemWithPosition = findIdOfItemWithPosition(lastVisibleItemPosition);\n-        if (null != idOfItemWithPosition) {\n-            outState.putString(VISIBLE_ITEM_ID, idOfItemWithPosition);\n-        }\n-    }\n-\n-    @Override\n-    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {\n-        super.onViewStateRestored(savedInstanceState);\n-        if(null!=savedInstanceState){\n-        }\n-    }\n-\n-    /**\n-     * Gets the id of the contribution from the db\n-     * @param position\n-     * @return\n-     */\n-    @Nullable\n-    private String findIdOfItemWithPosition(int position) {\n-        Contribution contributionForPosition = adapter.getContributionForPosition(position);\n-        if (null != contributionForPosition) {\n-            return contributionForPosition.getFilename();\n-        }\n-        return null;\n-    }\n-\n-    public interface Callback {\n-        void retryUpload(Contribution contribution);\n-        void showDetail(int position);\n-    }\n+  @Inject\n+  ContributionsListPresenter contributionsListPresenter;\n+\n+  private Animation fab_close;\n+  private Animation fab_open;\n+  private Animation rotate_forward;\n+  private Animation rotate_backward;\n+\n+\n+  private boolean isFabOpen;\n+\n+  private ContributionsListAdapter adapter;\n+\n+  private final Callback callback;\n+\n+  private final int SPAN_COUNT_LANDSCAPE = 3;\n+  private final int SPAN_COUNT_PORTRAIT = 1;\n+\n+  ContributionsListFragment(final Callback callback) {\n+    this.callback = callback;\n+  }\n+\n+  public View onCreateView(\n+      final LayoutInflater inflater, @Nullable final ViewGroup container,\n+      @Nullable final Bundle savedInstanceState) {\n+    final View view = inflater.inflate(R.layout.fragment_contributions_list, container, false);\n+    ButterKnife.bind(this, view);\n+    contributionsListPresenter.onAttachView(this);\n+    initAdapter();\n+    return view;\n+  }\n+\n+  private void initAdapter() {\n+    adapter = new ContributionsListAdapter(this, mediaClient);\n+  }\n+\n+  @Override\n+  public void onViewCreated(final View view, @Nullable final Bundle savedInstanceState) {\n+    super.onViewCreated(view, savedInstanceState);\n+    initRecyclerView();\n+    initializeAnimations();\n+    setListeners();\n+  }\n+\n+  private void initRecyclerView() {\n+    final GridLayoutManager layoutManager = new GridLayoutManager(getContext(),\n+        getSpanCount(getResources().getConfiguration().orientation));\n+    rvContributionsList.setLayoutManager(layoutManager);\n+    contributionsListPresenter.setup();\n+    contributionsListPresenter.contributionList.observe(this, adapter::submitList);\n+    rvContributionsList.setAdapter(adapter);\n+  }\n+\n+  private int getSpanCount(final int orientation) {\n+    return orientation == Configuration.ORIENTATION_LANDSCAPE ?\n+        SPAN_COUNT_LANDSCAPE : SPAN_COUNT_PORTRAIT;\n+  }\n+\n+  @Override\n+  public void onConfigurationChanged(final Configuration newConfig) {\n+    super.onConfigurationChanged(newConfig);\n+    // check orientation\n+    fab_layout.setOrientation(newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE ?\n+        LinearLayout.HORIZONTAL : LinearLayout.VERTICAL);\n+    rvContributionsList\n+        .setLayoutManager(new GridLayoutManager(getContext(), getSpanCount(newConfig.orientation)));\n+  }\n+\n+  private void initializeAnimations() {\n+    fab_open = AnimationUtils.loadAnimation(getActivity(), R.anim.fab_open);\n+    fab_close = AnimationUtils.loadAnimation(getActivity(), R.anim.fab_close);\n+    rotate_forward = AnimationUtils.loadAnimation(getActivity(), R.anim.rotate_forward);\n+    rotate_backward = AnimationUtils.loadAnimation(getActivity(), R.anim.rotate_backward);\n+  }\n+\n+  private void setListeners() {\n+    fabPlus.setOnClickListener(view -> animateFAB(isFabOpen));\n+    fabCamera.setOnClickListener(view -> {\n+      controller.initiateCameraPick(getActivity());\n+      animateFAB(isFabOpen);\n+    });\n+    fabGallery.setOnClickListener(view -> {\n+      controller.initiateGalleryPick(getActivity(), true);\n+      animateFAB(isFabOpen);\n+    });\n+  }\n+\n+  private void animateFAB(final boolean isFabOpen) {\n+    this.isFabOpen = !isFabOpen;\n+    if (fabPlus.isShown()) {\n+      if (isFabOpen) {\n+        fabPlus.startAnimation(rotate_backward);\n+        fabCamera.startAnimation(fab_close);\n+        fabGallery.startAnimation(fab_close);\n+        fabCamera.hide();\n+        fabGallery.hide();\n+      } else {\n+        fabPlus.startAnimation(rotate_forward);\n+        fabCamera.startAnimation(fab_open);\n+        fabGallery.startAnimation(fab_open);\n+        fabCamera.show();\n+        fabGallery.show();\n+      }\n+      this.isFabOpen = !isFabOpen;\n+    }\n+  }\n+\n+  /**\n+   * Shows welcome message if user has no contributions yet i.e. new user.\n+   */\n+  public void showWelcomeTip(final boolean shouldShow) {\n+    noContributionsYet.setVisibility(shouldShow ? VISIBLE : GONE);\n+  }\n+\n+  /**\n+   * Responsible to set progress bar invisible and visible\n+   *\n+   * @param shouldShow True when contributions list should be hidden.\n+   */\n+  public void showProgress(final boolean shouldShow) {\n+    progressBar.setVisibility(shouldShow ? VISIBLE : GONE);\n+  }\n+\n+  public void showNoContributionsUI(final boolean shouldShow) {\n+    noContributionsYet.setVisibility(shouldShow ? VISIBLE : GONE);\n+  }\n+\n+  @Override\n+  public void onSaveInstanceState(@NonNull Bundle outState) {\n+    super.onSaveInstanceState(outState);\n+    final GridLayoutManager layoutManager = (GridLayoutManager) rvContributionsList.getLayoutManager();\n+    outState.putParcelable(RV_STATE, layoutManager.onSaveInstanceState());\n+  }\n+\n+  @Override\n+  public void onViewStateRestored(@Nullable Bundle savedInstanceState) {\n+    super.onViewStateRestored(savedInstanceState);\n+    if (null != savedInstanceState) {\n+      final Parcelable savedRecyclerLayoutState = savedInstanceState.getParcelable(RV_STATE);\n+      rvContributionsList.getLayoutManager().onRestoreInstanceState(savedRecyclerLayoutState);\n+    }\n+  }\n+\n+  @Override\n+  public void retryUpload(final Contribution contribution) {\n+    callback.retryUpload(contribution);\n+  }\n+\n+  @Override\n+  public void deleteUpload(final Contribution contribution) {\n+    contributionsListPresenter.deleteUpload(contribution);\n+  }\n+\n+  @Override\n+  public void openMediaDetail(final int position) {\n+    callback.showDetail(position);\n+  }\n+\n+  public Media getMediaAtPosition(final int i) {\n+    return adapter.getContributionForPosition(i);\n+  }\n+\n+  public int getTotalMediaCount() {\n+    return adapter.getItemCount();\n+  }\n+\n+  public interface Callback {\n+\n+    void retryUpload(Contribution contribution);\n+\n+    void showDetail(int position);\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0OTg4MA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r421449880", "bodyText": "this is a bit hard on the eyes, how about moving the ternary into the method call?\nmediaInterface.getMediaListForUser(\nusername,\n10,\ncontinuationStore.hasUser ? continuation.getUser : emptyMap()\n)", "author": "macgills", "createdAt": "2020-05-07T12:01:32Z", "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "diffHunk": "@@ -83,6 +84,24 @@ public MediaClient(MediaInterface mediaInterface, MediaDetailInterface mediaDeta\n \n     }\n \n+    /**\n+     * This method takes the userName as input and returns a list of  Media objects filtered using\n+     * allimages query It uses the allimages query API to get the images contributed by the userName,\n+     * 10 at a time.\n+     *\n+     * @param userName the username\n+     * @return\n+     */\n+    public Single<List<Media>> getMediaListForUser(String userName) {\n+        return responseToMediaList(\n+            continuationStore.containsKey(\"user_\" + userName) ?", "originalCommit": "e93e491cafc130729bf2693cd7bc5da21a742d62", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/media/MediaClient.java b/app/src/main/java/fr/free/nrw/commons/media/MediaClient.java\nindex 9f7e64052..0ddd9fc70 100644\n--- a/app/src/main/java/fr/free/nrw/commons/media/MediaClient.java\n+++ b/app/src/main/java/fr/free/nrw/commons/media/MediaClient.java\n\n@@ -93,13 +94,25 @@ public class MediaClient {\n      * @return\n      */\n     public Single<List<Media>> getMediaListForUser(String userName) {\n-        return responseToMediaList(\n-            continuationStore.containsKey(\"user_\" + userName) ?\n-                mediaInterface.getMediaListForUser(userName, 10,\n-                    continuationStore.get(\"user_\" + userName)) : //if true\n-                mediaInterface.getMediaListForUser(userName, 10, Collections.emptyMap()),\n-            \"user_\" + userName); //if false\n+        Map<String, String> continuation =\n+            continuationStore.containsKey(\"user_\" + userName)\n+                ? continuationStore.get(\"user_\" + userName)\n+                : Collections.emptyMap();\n+        return responseToMediaList(mediaInterface\n+            .getMediaListForUser(userName, 10, continuation), \"user_\" + userName);\n+    }\n \n+    /**\n+     * Check if media for user has reached the end of the list.\n+     * @param userName\n+     * @return\n+     */\n+    public boolean doesMediaListForUserHaveMorePages(String userName) {\n+        final String key = \"user_\" + userName;\n+        if(continuationExists.containsKey(key)) {\n+            return continuationExists.get(key);\n+        }\n+        return true;\n     }\n \n     /**\n"}}, {"oid": "d2f90291460319e31b8a1db5ada16439a9ac6f5c", "url": "https://github.com/commons-app/apps-android-commons/commit/d2f90291460319e31b8a1db5ada16439a9ac6f5c", "message": "Address code review comments", "committedDate": "2020-05-07T21:28:14Z", "type": "commit"}, {"oid": "6c54e35d698b1f3cbef6f22dba719dbf247c9673", "url": "https://github.com/commons-app/apps-android-commons/commit/6c54e35d698b1f3cbef6f22dba719dbf247c9673", "message": "Add boundary callback", "committedDate": "2020-05-08T06:49:27Z", "type": "commit"}, {"oid": "8d627047c56543b0b7173a0f1f1d3c1ffa5df174", "url": "https://github.com/commons-app/apps-android-commons/commit/8d627047c56543b0b7173a0f1f1d3c1ffa5df174", "message": "Minor changes", "committedDate": "2020-05-08T07:08:22Z", "type": "commit"}, {"oid": "26cf0970df52e180efa2fa3e0d3e645b184e3061", "url": "https://github.com/commons-app/apps-android-commons/commit/26cf0970df52e180efa2fa3e0d3e645b184e3061", "message": "Minor changes", "committedDate": "2020-05-09T19:46:53Z", "type": "commit"}, {"oid": "abba64d1ace2749c7dd039b1ba372a2befbc5df5", "url": "https://github.com/commons-app/apps-android-commons/commit/abba64d1ace2749c7dd039b1ba372a2befbc5df5", "message": "Merge branch 'master' into lazyContributions", "committedDate": "2020-05-09T19:47:15Z", "type": "commit"}, {"oid": "971cb29f503974a0f1484749bd2ee083b4db27a5", "url": "https://github.com/commons-app/apps-android-commons/commit/971cb29f503974a0f1484749bd2ee083b4db27a5", "message": "Minor fixes", "committedDate": "2020-05-09T21:35:51Z", "type": "commit"}, {"oid": "050dd8797d9f91d7a15b09ccd81295492a7c4f36", "url": "https://github.com/commons-app/apps-android-commons/commit/050dd8797d9f91d7a15b09ccd81295492a7c4f36", "message": "Fix test case", "committedDate": "2020-05-09T22:22:13Z", "type": "commit"}, {"oid": "5f32477f66367adf4befa8063a76e013ea19b958", "url": "https://github.com/commons-app/apps-android-commons/commit/5f32477f66367adf4befa8063a76e013ea19b958", "message": "Minor", "committedDate": "2020-05-09T22:30:57Z", "type": "commit"}, {"oid": "6ba2736fbbc60c3a3526bc8ed8cf78bfecf5d6ed", "url": "https://github.com/commons-app/apps-android-commons/commit/6ba2736fbbc60c3a3526bc8ed8cf78bfecf5d6ed", "message": "update saved state", "committedDate": "2020-05-09T22:51:54Z", "type": "commit"}, {"oid": "3fb265a0722a42b7777353856e2ad105e447b37c", "url": "https://github.com/commons-app/apps-android-commons/commit/3fb265a0722a42b7777353856e2ad105e447b37c", "message": "Fix test", "committedDate": "2020-05-10T05:43:21Z", "type": "commit"}, {"oid": "def6eccc444a89bd639105b25144fdce9a168eb2", "url": "https://github.com/commons-app/apps-android-commons/commit/def6eccc444a89bd639105b25144fdce9a168eb2", "message": "With more test cases", "committedDate": "2020-05-10T06:28:07Z", "type": "commit"}, {"oid": "def6eccc444a89bd639105b25144fdce9a168eb2", "url": "https://github.com/commons-app/apps-android-commons/commit/def6eccc444a89bd639105b25144fdce9a168eb2", "message": "With more test cases", "committedDate": "2020-05-10T06:28:07Z", "type": "forcePushed"}, {"oid": "34bd6f68e80d456824985069e2c0779b4780b0c8", "url": "https://github.com/commons-app/apps-android-commons/commit/34bd6f68e80d456824985069e2c0779b4780b0c8", "message": "With java docs", "committedDate": "2020-05-10T06:50:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxNDU2NQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422914565", "bodyText": "this could be deleted now, right?", "author": "macgills", "createdAt": "2020-05-11T09:40:14Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java", "diffHunk": "@@ -386,10 +297,6 @@ public void onResume() {\n \n         boolean isSettingsChanged = store.getBoolean(Prefs.IS_CONTRIBUTION_COUNT_CHANGED, false);", "originalCommit": "34bd6f68e80d456824985069e2c0779b4780b0c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0NTk3Nw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r423045977", "bodyText": "IS_CONTRIBUTION_COUNT_CHANGED is now only used to put the boolean, never retrieve it, can be deleted", "author": "macgills", "createdAt": "2020-05-11T13:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxNDU2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java\nindex d180c3f92..8e3221ea9 100644\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java\n+++ b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java\n\n@@ -295,9 +295,6 @@ public class ContributionsFragment\n         firstLocationUpdate = true;\n         locationManager.addLocationListener(this);\n \n-        boolean isSettingsChanged = store.getBoolean(Prefs.IS_CONTRIBUTION_COUNT_CHANGED, false);\n-        store.putBoolean(Prefs.IS_CONTRIBUTION_COUNT_CHANGED, false);\n-\n         if (store.getBoolean(\"displayNearbyCardView\", true)) {\n             checkPermissionsAndShowNearbyCardView();\n             if (nearbyNotificationCardView.cardViewVisibilityState == NearbyNotificationCardView.CardViewVisibilityState.READY) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxNTEyOA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422915128", "bodyText": "this is the default value so could be omitted", "author": "macgills", "createdAt": "2020-05-11T09:41:13Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java", "diffHunk": "@@ -1,68 +1,74 @@\n package fr.free.nrw.commons.contributions;\n \n-import android.text.TextUtils;\n import android.view.LayoutInflater;\n import android.view.ViewGroup;\n import androidx.annotation.NonNull;\n-import androidx.recyclerview.widget.RecyclerView;\n+import androidx.paging.PagedListAdapter;\n+import androidx.recyclerview.widget.DiffUtil;\n import fr.free.nrw.commons.R;\n import fr.free.nrw.commons.media.MediaClient;\n-import java.util.ArrayList;\n-import java.util.List;\n \n /**\n- * Represents The View Adapter for the List of Contributions  \n+ * Represents The View Adapter for the List of Contributions\n  */\n-public class ContributionsListAdapter extends RecyclerView.Adapter<ContributionViewHolder> {\n+public class ContributionsListAdapter extends\n+    PagedListAdapter<Contribution, ContributionViewHolder> {\n \n-    private Callback callback;\n+    private final Callback callback;\n     private final MediaClient mediaClient;\n-    private List<Contribution> contributions;\n \n-    public ContributionsListAdapter(Callback callback,\n-        MediaClient mediaClient) {\n+    ContributionsListAdapter(final Callback callback,\n+        final MediaClient mediaClient) {\n+        super(DIFF_CALLBACK);\n         this.callback = callback;\n         this.mediaClient = mediaClient;\n-        contributions = new ArrayList<>();\n+        setHasStableIds(false);", "originalCommit": "34bd6f68e80d456824985069e2c0779b4780b0c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java\nindex 9004be12c..a0c8e1088 100644\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java\n+++ b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java\n\n@@ -1,4 +1,4 @@\n-package fr.free.nrw.commons.contributions;\n+    package fr.free.nrw.commons.contributions;\n \n import android.view.LayoutInflater;\n import android.view.ViewGroup;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxNjkyOA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422916928", "bodyText": "unused I think", "author": "macgills", "createdAt": "2020-05-11T09:44:06Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java", "diffHunk": "@@ -16,218 +17,218 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import androidx.recyclerview.widget.GridLayoutManager;\n-import androidx.recyclerview.widget.LinearLayoutManager;\n import androidx.recyclerview.widget.RecyclerView;\n import androidx.recyclerview.widget.RecyclerView.LayoutManager;\n import butterknife.BindView;\n import butterknife.ButterKnife;\n import com.google.android.material.floatingactionbutton.FloatingActionButton;\n+import fr.free.nrw.commons.Media;\n import fr.free.nrw.commons.R;\n-import fr.free.nrw.commons.contributions.ContributionsListAdapter.Callback;\n import fr.free.nrw.commons.di.CommonsDaggerSupportFragment;\n-import fr.free.nrw.commons.kvstore.JsonKvStore;\n import fr.free.nrw.commons.media.MediaClient;\n-import java.util.ArrayList;\n-import java.util.List;\n+import fr.free.nrw.commons.media.MediaDetailPagerFragment;\n import javax.inject.Inject;\n-import javax.inject.Named;\n \n /**\n  * Created by root on 01.06.2018.\n  */\n \n-public class ContributionsListFragment extends CommonsDaggerSupportFragment {\n-\n-    private static final String VISIBLE_ITEM_ID = \"visible_item_id\";\n-    @BindView(R.id.contributionsList)\n-    RecyclerView rvContributionsList;\n-    @BindView(R.id.loadingContributionsProgressBar)\n-    ProgressBar progressBar;\n-    @BindView(R.id.fab_plus)\n-    FloatingActionButton fabPlus;\n-    @BindView(R.id.fab_camera)\n-    FloatingActionButton fabCamera;\n-    @BindView(R.id.fab_gallery)\n-    FloatingActionButton fabGallery;\n-    @BindView(R.id.noContributionsYet)\n-    TextView noContributionsYet;\n-    @BindView(R.id.fab_layout)\n-    LinearLayout fab_layout;\n-\n-    @Inject @Named(\"default_preferences\") JsonKvStore kvStore;\n-    @Inject ContributionController controller;\n-    @Inject MediaClient mediaClient;\n-\n-    private Animation fab_close;\n-    private Animation fab_open;\n-    private Animation rotate_forward;\n-    private Animation rotate_backward;\n-\n-\n-    private boolean isFabOpen = false;\n-\n-    private ContributionsListAdapter adapter;\n-\n-    private Callback callback;\n-    private String lastVisibleItemID;\n-\n-    private int SPAN_COUNT=3;\n-    private List<Contribution> contributions=new ArrayList<>();\n-\n-    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n-        View view = inflater.inflate(R.layout.fragment_contributions_list, container, false);\n-        ButterKnife.bind(this, view);\n-        initAdapter();\n-        return view;\n-    }\n-\n-    public void setCallback(Callback callback) {\n-        this.callback = callback;\n-    }\n-\n-    private void initAdapter() {\n-        adapter = new ContributionsListAdapter(callback, mediaClient);\n-        adapter.setHasStableIds(true);\n-    }\n-\n-    @Override\n-    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-        initRecyclerView();\n-        initializeAnimations();\n-        setListeners();\n-    }\n-\n-    private void initRecyclerView() {\n-        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {\n-            rvContributionsList.setLayoutManager(new GridLayoutManager(getContext(),SPAN_COUNT));\n-        } else {\n-            rvContributionsList.setLayoutManager(new LinearLayoutManager(getContext()));\n-        }\n-\n-        rvContributionsList.setAdapter(adapter);\n-        adapter.setContributions(contributions);\n-    }\n-\n-    @Override\n-    public void onConfigurationChanged(Configuration newConfig) {\n-        super.onConfigurationChanged(newConfig);\n-        // check orientation\n-        if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\n-            fab_layout.setOrientation(LinearLayout.HORIZONTAL);\n-            rvContributionsList.setLayoutManager(new GridLayoutManager(getContext(),SPAN_COUNT));\n-        } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {\n-            fab_layout.setOrientation(LinearLayout.VERTICAL);\n-            rvContributionsList.setLayoutManager(new LinearLayoutManager(getContext()));\n-        }\n-    }\n-\n-    private void initializeAnimations() {\n-        fab_open = AnimationUtils.loadAnimation(getActivity(), R.anim.fab_open);\n-        fab_close = AnimationUtils.loadAnimation(getActivity(), R.anim.fab_close);\n-        rotate_forward = AnimationUtils.loadAnimation(getActivity(), R.anim.rotate_forward);\n-        rotate_backward = AnimationUtils.loadAnimation(getActivity(), R.anim.rotate_backward);\n-    }\n-\n-    private void setListeners() {\n-        fabPlus.setOnClickListener(view -> animateFAB(isFabOpen));\n-        fabCamera.setOnClickListener(view -> {\n-            controller.initiateCameraPick(getActivity());\n-            animateFAB(isFabOpen);\n-        });\n-        fabGallery.setOnClickListener(view -> {\n-            controller.initiateGalleryPick(getActivity(), true);\n-            animateFAB(isFabOpen);\n-        });\n-    }\n-\n-    private void animateFAB(boolean isFabOpen) {\n-        this.isFabOpen = !isFabOpen;\n-        if (fabPlus.isShown()){\n-            if (isFabOpen) {\n-                fabPlus.startAnimation(rotate_backward);\n-                fabCamera.startAnimation(fab_close);\n-                fabGallery.startAnimation(fab_close);\n-                fabCamera.hide();\n-                fabGallery.hide();\n-            } else {\n-                fabPlus.startAnimation(rotate_forward);\n-                fabCamera.startAnimation(fab_open);\n-                fabGallery.startAnimation(fab_open);\n-                fabCamera.show();\n-                fabGallery.show();\n-            }\n-            this.isFabOpen=!isFabOpen;\n-        }\n-    }\n-\n-    /**\n-     * Shows welcome message if user has no contributions yet i.e. new user.\n-     */\n-    public void showWelcomeTip(boolean shouldShow) {\n-        noContributionsYet.setVisibility(shouldShow ? VISIBLE : GONE);\n-    }\n-\n-    /**\n-     * Responsible to set progress bar invisible and visible\n-     *\n-     * @param shouldShow True when contributions list should be hidden.\n-     */\n-    public void showProgress(boolean shouldShow) {\n-        progressBar.setVisibility(shouldShow ? VISIBLE : GONE);\n-    }\n-\n-    public void showNoContributionsUI(boolean shouldShow) {\n-        noContributionsYet.setVisibility(shouldShow ? VISIBLE : GONE);\n-    }\n-\n-    public void setContributions(List<Contribution> contributionList) {\n-        this.contributions.clear();\n-        this.contributions.addAll(contributionList);\n-        adapter.setContributions(contributions);\n-    }\n-\n-    public interface SourceRefresher {\n-        void refreshSource();\n-    }\n-\n-    @Override\n-    public void onSaveInstanceState(@NonNull Bundle outState) {\n-        super.onSaveInstanceState(outState);\n-        LayoutManager layoutManager = rvContributionsList.getLayoutManager();\n-        int lastVisibleItemPosition=0;\n-        if(layoutManager instanceof  LinearLayoutManager){\n-            lastVisibleItemPosition= ((LinearLayoutManager) layoutManager).findLastCompletelyVisibleItemPosition();\n-        }else if(layoutManager instanceof GridLayoutManager){\n-            lastVisibleItemPosition=((GridLayoutManager)layoutManager).findLastCompletelyVisibleItemPosition();\n-        }\n-        String idOfItemWithPosition = findIdOfItemWithPosition(lastVisibleItemPosition);\n-        if (null != idOfItemWithPosition) {\n-            outState.putString(VISIBLE_ITEM_ID, idOfItemWithPosition);\n-        }\n-    }\n-\n-    @Override\n-    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {\n-        super.onViewStateRestored(savedInstanceState);\n-        if(null!=savedInstanceState){\n-            lastVisibleItemID =savedInstanceState.getString(VISIBLE_ITEM_ID, null);\n-        }\n-    }\n-\n-\n-    /**\n-     * Gets the id of the contribution from the db\n-     * @param position\n-     * @return\n-     */\n-    @Nullable\n-    private String findIdOfItemWithPosition(int position) {\n-        Contribution contributionForPosition = callback.getContributionForPosition(position);\n-        if (null != contributionForPosition) {\n-            return contributionForPosition.getFilename();\n-        }\n-        return null;\n-    }\n-\n+public class ContributionsListFragment extends CommonsDaggerSupportFragment implements\n+    ContributionsListContract.View, ContributionsListAdapter.Callback {\n+\n+  private static final String VISIBLE_ITEM_ID = \"visible_item_id\";", "originalCommit": "34bd6f68e80d456824985069e2c0779b4780b0c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java\nindex 6bea68d2a..d707409e4 100644\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java\n+++ b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java\n\n@@ -36,7 +36,6 @@ import javax.inject.Inject;\n public class ContributionsListFragment extends CommonsDaggerSupportFragment implements\n     ContributionsListContract.View, ContributionsListAdapter.Callback {\n \n-  private static final String VISIBLE_ITEM_ID = \"visible_item_id\";\n   private static final String RV_STATE = \"rv_scroll_state\";\n \n   @BindView(R.id.contributionsList)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkyMDA1Mw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422920053", "bodyText": "I think we shouldn't use placeholders, it sounds like we would want to know the entire data set beforehand? docs", "author": "macgills", "createdAt": "2020-05-11T09:49:29Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListPresenter.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package fr.free.nrw.commons.contributions;\n+\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.LivePagedListBuilder;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.contributions.ContributionsListContract.UserActionListener;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import io.reactivex.Scheduler;\n+import io.reactivex.disposables.CompositeDisposable;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+/**\n+ * The presenter class for Contributions\n+ */\n+public class ContributionsListPresenter implements UserActionListener {\n+\n+  private final ContributionBoundaryCallback contributionBoundaryCallback;\n+  private final ContributionsRepository repository;\n+  private final Scheduler ioThreadScheduler;\n+\n+  private CompositeDisposable compositeDisposable;\n+\n+  public LiveData<PagedList<Contribution>> contributionList;\n+  public MutableLiveData networkState;\n+\n+  @Inject\n+  ContributionsListPresenter(\n+      final ContributionBoundaryCallback contributionBoundaryCallback,\n+      ContributionsRepository repository,\n+      @Named(CommonsApplicationModule.IO_THREAD) Scheduler ioThreadScheduler) {\n+    this.contributionBoundaryCallback = contributionBoundaryCallback;\n+    this.repository = repository;\n+    this.ioThreadScheduler = ioThreadScheduler;\n+    compositeDisposable = new CompositeDisposable();\n+  }\n+\n+  @Override\n+  public void onAttachView(ContributionsListContract.View view) {\n+  }\n+\n+  /**\n+   * Setup the paged list.\n+   * This method sets the configuration for paged list and ties it up with the live data object.\n+   * This method can be tweaked to update the lazy loading behavior of the contributions list\n+   */\n+  void setup() {\n+    final PagedList.Config pagedListConfig =\n+        (new PagedList.Config.Builder())\n+            .setEnablePlaceholders(true)", "originalCommit": "34bd6f68e80d456824985069e2c0779b4780b0c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListPresenter.java b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListPresenter.java\nindex eb23dde8a..f09c5f205 100644\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListPresenter.java\n+++ b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListPresenter.java\n\n@@ -1,7 +1,6 @@\n package fr.free.nrw.commons.contributions;\n \n import androidx.lifecycle.LiveData;\n-import androidx.lifecycle.MutableLiveData;\n import androidx.paging.LivePagedListBuilder;\n import androidx.paging.PagedList;\n import fr.free.nrw.commons.contributions.ContributionsListContract.UserActionListener;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkyOTA0MA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422929040", "bodyText": "this is a whole new class, it would be much nicer in kotlin to just use map instead of this for loop", "author": "macgills", "createdAt": "2020-05-11T10:04:40Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package fr.free.nrw.commons.contributions;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.media.MediaClient;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import timber.log.Timber;\n+\n+/**\n+ * Class that extends PagedList.BoundaryCallback for contributions list\n+ * It defines the action that is triggered for various boundary conditions in the list\n+ */\n+public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n+\n+  private final ContributionsRepository repository;\n+  private final SessionManager sessionManager;\n+  private final MediaClient mediaClient;\n+  private final MutableLiveData networkState;\n+  private final CompositeDisposable compositeDisposable;\n+  private final Scheduler ioThreadScheduler;\n+\n+  @Inject\n+  public ContributionBoundaryCallback(final ContributionsRepository repository,\n+      final SessionManager sessionManager,\n+      final MediaClient mediaClient,\n+      @Named(CommonsApplicationModule.IO_THREAD) final Scheduler ioThreadScheduler) {\n+    super();\n+    this.ioThreadScheduler = ioThreadScheduler;\n+    networkState = new MutableLiveData();\n+    this.repository = repository;\n+    this.sessionManager = sessionManager;\n+    this.mediaClient = mediaClient;\n+    compositeDisposable = new CompositeDisposable();\n+  }\n+\n+  /**\n+   * Provides the current network state.\n+   * @return\n+   */\n+  public MutableLiveData getNetworkState() {\n+    return networkState;\n+  }\n+\n+  /**\n+   * It is triggered when the list has no items\n+   * User's Contributions are then fetched from the network\n+   */\n+  @Override\n+  public void onZeroItemsLoaded() {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the top of the list\n+   * No action is taken at this point\n+   */\n+  @Override\n+  public void onItemAtFrontLoaded(@NonNull final Contribution itemAtFront) {\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the end of the list\n+   * User's Contributions are then fetched from the network\n+   */\n+  @Override\n+  public void onItemAtEndLoaded(@NonNull final Contribution itemAtEnd) {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * Fetches contributions using the MediaWiki API\n+   */\n+  public void fetchContributions() {\n+    networkState.postValue(NetworkState.LOADING);\n+    compositeDisposable.add(mediaClient.getMediaListForUser(sessionManager.getUserName())\n+        .map(mediaList -> {", "originalCommit": "34bd6f68e80d456824985069e2c0779b4780b0c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI1MDkwMQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424250901", "bodyText": "@maskaravivek any inclination to convert this to kotlin?", "author": "macgills", "createdAt": "2020-05-13T08:08:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkyOTA0MA=="}], "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java\ndeleted file mode 100644\nindex eae5133bd..000000000\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java\n+++ /dev/null\n\n@@ -1,112 +0,0 @@\n-package fr.free.nrw.commons.contributions;\n-\n-import androidx.annotation.NonNull;\n-import androidx.lifecycle.MutableLiveData;\n-import androidx.paging.PagedList;\n-import fr.free.nrw.commons.Media;\n-import fr.free.nrw.commons.auth.SessionManager;\n-import fr.free.nrw.commons.di.CommonsApplicationModule;\n-import fr.free.nrw.commons.media.MediaClient;\n-import io.reactivex.Scheduler;\n-import io.reactivex.Single;\n-import io.reactivex.disposables.CompositeDisposable;\n-import io.reactivex.schedulers.Schedulers;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import javax.inject.Inject;\n-import javax.inject.Named;\n-import timber.log.Timber;\n-\n-/**\n- * Class that extends PagedList.BoundaryCallback for contributions list\n- * It defines the action that is triggered for various boundary conditions in the list\n- */\n-public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n-\n-  private final ContributionsRepository repository;\n-  private final SessionManager sessionManager;\n-  private final MediaClient mediaClient;\n-  private final MutableLiveData networkState;\n-  private final CompositeDisposable compositeDisposable;\n-  private final Scheduler ioThreadScheduler;\n-\n-  @Inject\n-  public ContributionBoundaryCallback(final ContributionsRepository repository,\n-      final SessionManager sessionManager,\n-      final MediaClient mediaClient,\n-      @Named(CommonsApplicationModule.IO_THREAD) final Scheduler ioThreadScheduler) {\n-    super();\n-    this.ioThreadScheduler = ioThreadScheduler;\n-    networkState = new MutableLiveData();\n-    this.repository = repository;\n-    this.sessionManager = sessionManager;\n-    this.mediaClient = mediaClient;\n-    compositeDisposable = new CompositeDisposable();\n-  }\n-\n-  /**\n-   * Provides the current network state.\n-   * @return\n-   */\n-  public MutableLiveData getNetworkState() {\n-    return networkState;\n-  }\n-\n-  /**\n-   * It is triggered when the list has no items\n-   * User's Contributions are then fetched from the network\n-   */\n-  @Override\n-  public void onZeroItemsLoaded() {\n-    fetchContributions();\n-  }\n-\n-  /**\n-   * It is triggered when the user scrolls to the top of the list\n-   * No action is taken at this point\n-   */\n-  @Override\n-  public void onItemAtFrontLoaded(@NonNull final Contribution itemAtFront) {\n-  }\n-\n-  /**\n-   * It is triggered when the user scrolls to the end of the list\n-   * User's Contributions are then fetched from the network\n-   */\n-  @Override\n-  public void onItemAtEndLoaded(@NonNull final Contribution itemAtEnd) {\n-    fetchContributions();\n-  }\n-\n-  /**\n-   * Fetches contributions using the MediaWiki API\n-   */\n-  public void fetchContributions() {\n-    networkState.postValue(NetworkState.LOADING);\n-    compositeDisposable.add(mediaClient.getMediaListForUser(sessionManager.getUserName())\n-        .map(mediaList -> {\n-          List<Contribution> contributions = new ArrayList<>();\n-          for (Media media : mediaList) {\n-            contributions.add(new Contribution(media, Contribution.STATE_COMPLETED));\n-          }\n-          return contributions;\n-        })\n-        .subscribeOn(ioThreadScheduler)\n-        .subscribe(this::saveContributionsToDB, error -> {\n-          Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n-          networkState.postValue(NetworkState.FAILED);\n-        }));\n-  }\n-\n-  /**\n-   * Saves the contributions the the local DB\n-   */\n-  private void saveContributionsToDB(final List<Contribution> contributions) {\n-    Single<List<Long>> single = repository.save(contributions);\n-    repository.set(\"last_fetch_timestamp\", System.currentTimeMillis());\n-    networkState.postValue(NetworkState.LOADED);\n-  }\n-\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzODM4OA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422938388", "bodyText": "this does nothing without a subscribe", "author": "macgills", "createdAt": "2020-05-11T10:21:16Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package fr.free.nrw.commons.contributions;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.media.MediaClient;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import timber.log.Timber;\n+\n+/**\n+ * Class that extends PagedList.BoundaryCallback for contributions list\n+ * It defines the action that is triggered for various boundary conditions in the list\n+ */\n+public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n+\n+  private final ContributionsRepository repository;\n+  private final SessionManager sessionManager;\n+  private final MediaClient mediaClient;\n+  private final MutableLiveData networkState;\n+  private final CompositeDisposable compositeDisposable;\n+  private final Scheduler ioThreadScheduler;\n+\n+  @Inject\n+  public ContributionBoundaryCallback(final ContributionsRepository repository,\n+      final SessionManager sessionManager,\n+      final MediaClient mediaClient,\n+      @Named(CommonsApplicationModule.IO_THREAD) final Scheduler ioThreadScheduler) {\n+    super();\n+    this.ioThreadScheduler = ioThreadScheduler;\n+    networkState = new MutableLiveData();\n+    this.repository = repository;\n+    this.sessionManager = sessionManager;\n+    this.mediaClient = mediaClient;\n+    compositeDisposable = new CompositeDisposable();\n+  }\n+\n+  /**\n+   * Provides the current network state.\n+   * @return\n+   */\n+  public MutableLiveData getNetworkState() {\n+    return networkState;\n+  }\n+\n+  /**\n+   * It is triggered when the list has no items\n+   * User's Contributions are then fetched from the network\n+   */\n+  @Override\n+  public void onZeroItemsLoaded() {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the top of the list\n+   * No action is taken at this point\n+   */\n+  @Override\n+  public void onItemAtFrontLoaded(@NonNull final Contribution itemAtFront) {\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the end of the list\n+   * User's Contributions are then fetched from the network\n+   */\n+  @Override\n+  public void onItemAtEndLoaded(@NonNull final Contribution itemAtEnd) {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * Fetches contributions using the MediaWiki API\n+   */\n+  public void fetchContributions() {\n+    networkState.postValue(NetworkState.LOADING);\n+    compositeDisposable.add(mediaClient.getMediaListForUser(sessionManager.getUserName())\n+        .map(mediaList -> {\n+          List<Contribution> contributions = new ArrayList<>();\n+          for (Media media : mediaList) {\n+            contributions.add(new Contribution(media, Contribution.STATE_COMPLETED));\n+          }\n+          return contributions;\n+        })\n+        .subscribeOn(ioThreadScheduler)\n+        .subscribe(this::saveContributionsToDB, error -> {\n+          Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n+          networkState.postValue(NetworkState.FAILED);\n+        }));\n+  }\n+\n+  /**\n+   * Saves the contributions the the local DB\n+   */\n+  private void saveContributionsToDB(final List<Contribution> contributions) {\n+    Single<List<Long>> single = repository.save(contributions);", "originalCommit": "34bd6f68e80d456824985069e2c0779b4780b0c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0NzMxNA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r423047314", "bodyText": "This still does nothing without a subscribe", "author": "macgills", "createdAt": "2020-05-11T13:41:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzODM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIzMDkzMA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r423230930", "bodyText": "The contribution is getting saved in the DB. I didn't understand the comment.", "author": "maskaravivek", "createdAt": "2020-05-11T18:20:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzODM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java\ndeleted file mode 100644\nindex eae5133bd..000000000\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java\n+++ /dev/null\n\n@@ -1,112 +0,0 @@\n-package fr.free.nrw.commons.contributions;\n-\n-import androidx.annotation.NonNull;\n-import androidx.lifecycle.MutableLiveData;\n-import androidx.paging.PagedList;\n-import fr.free.nrw.commons.Media;\n-import fr.free.nrw.commons.auth.SessionManager;\n-import fr.free.nrw.commons.di.CommonsApplicationModule;\n-import fr.free.nrw.commons.media.MediaClient;\n-import io.reactivex.Scheduler;\n-import io.reactivex.Single;\n-import io.reactivex.disposables.CompositeDisposable;\n-import io.reactivex.schedulers.Schedulers;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import javax.inject.Inject;\n-import javax.inject.Named;\n-import timber.log.Timber;\n-\n-/**\n- * Class that extends PagedList.BoundaryCallback for contributions list\n- * It defines the action that is triggered for various boundary conditions in the list\n- */\n-public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n-\n-  private final ContributionsRepository repository;\n-  private final SessionManager sessionManager;\n-  private final MediaClient mediaClient;\n-  private final MutableLiveData networkState;\n-  private final CompositeDisposable compositeDisposable;\n-  private final Scheduler ioThreadScheduler;\n-\n-  @Inject\n-  public ContributionBoundaryCallback(final ContributionsRepository repository,\n-      final SessionManager sessionManager,\n-      final MediaClient mediaClient,\n-      @Named(CommonsApplicationModule.IO_THREAD) final Scheduler ioThreadScheduler) {\n-    super();\n-    this.ioThreadScheduler = ioThreadScheduler;\n-    networkState = new MutableLiveData();\n-    this.repository = repository;\n-    this.sessionManager = sessionManager;\n-    this.mediaClient = mediaClient;\n-    compositeDisposable = new CompositeDisposable();\n-  }\n-\n-  /**\n-   * Provides the current network state.\n-   * @return\n-   */\n-  public MutableLiveData getNetworkState() {\n-    return networkState;\n-  }\n-\n-  /**\n-   * It is triggered when the list has no items\n-   * User's Contributions are then fetched from the network\n-   */\n-  @Override\n-  public void onZeroItemsLoaded() {\n-    fetchContributions();\n-  }\n-\n-  /**\n-   * It is triggered when the user scrolls to the top of the list\n-   * No action is taken at this point\n-   */\n-  @Override\n-  public void onItemAtFrontLoaded(@NonNull final Contribution itemAtFront) {\n-  }\n-\n-  /**\n-   * It is triggered when the user scrolls to the end of the list\n-   * User's Contributions are then fetched from the network\n-   */\n-  @Override\n-  public void onItemAtEndLoaded(@NonNull final Contribution itemAtEnd) {\n-    fetchContributions();\n-  }\n-\n-  /**\n-   * Fetches contributions using the MediaWiki API\n-   */\n-  public void fetchContributions() {\n-    networkState.postValue(NetworkState.LOADING);\n-    compositeDisposable.add(mediaClient.getMediaListForUser(sessionManager.getUserName())\n-        .map(mediaList -> {\n-          List<Contribution> contributions = new ArrayList<>();\n-          for (Media media : mediaList) {\n-            contributions.add(new Contribution(media, Contribution.STATE_COMPLETED));\n-          }\n-          return contributions;\n-        })\n-        .subscribeOn(ioThreadScheduler)\n-        .subscribe(this::saveContributionsToDB, error -> {\n-          Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n-          networkState.postValue(NetworkState.FAILED);\n-        }));\n-  }\n-\n-  /**\n-   * Saves the contributions the the local DB\n-   */\n-  private void saveContributionsToDB(final List<Contribution> contributions) {\n-    Single<List<Long>> single = repository.save(contributions);\n-    repository.set(\"last_fetch_timestamp\", System.currentTimeMillis());\n-    networkState.postValue(NetworkState.LOADED);\n-  }\n-\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzODY4NA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422938684", "bodyText": "unnecessary super", "author": "macgills", "createdAt": "2020-05-11T10:21:49Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package fr.free.nrw.commons.contributions;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.media.MediaClient;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import timber.log.Timber;\n+\n+/**\n+ * Class that extends PagedList.BoundaryCallback for contributions list\n+ * It defines the action that is triggered for various boundary conditions in the list\n+ */\n+public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n+\n+  private final ContributionsRepository repository;\n+  private final SessionManager sessionManager;\n+  private final MediaClient mediaClient;\n+  private final MutableLiveData networkState;\n+  private final CompositeDisposable compositeDisposable;\n+  private final Scheduler ioThreadScheduler;\n+\n+  @Inject\n+  public ContributionBoundaryCallback(final ContributionsRepository repository,\n+      final SessionManager sessionManager,\n+      final MediaClient mediaClient,\n+      @Named(CommonsApplicationModule.IO_THREAD) final Scheduler ioThreadScheduler) {\n+    super();", "originalCommit": "34bd6f68e80d456824985069e2c0779b4780b0c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java\ndeleted file mode 100644\nindex eae5133bd..000000000\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java\n+++ /dev/null\n\n@@ -1,112 +0,0 @@\n-package fr.free.nrw.commons.contributions;\n-\n-import androidx.annotation.NonNull;\n-import androidx.lifecycle.MutableLiveData;\n-import androidx.paging.PagedList;\n-import fr.free.nrw.commons.Media;\n-import fr.free.nrw.commons.auth.SessionManager;\n-import fr.free.nrw.commons.di.CommonsApplicationModule;\n-import fr.free.nrw.commons.media.MediaClient;\n-import io.reactivex.Scheduler;\n-import io.reactivex.Single;\n-import io.reactivex.disposables.CompositeDisposable;\n-import io.reactivex.schedulers.Schedulers;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import javax.inject.Inject;\n-import javax.inject.Named;\n-import timber.log.Timber;\n-\n-/**\n- * Class that extends PagedList.BoundaryCallback for contributions list\n- * It defines the action that is triggered for various boundary conditions in the list\n- */\n-public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n-\n-  private final ContributionsRepository repository;\n-  private final SessionManager sessionManager;\n-  private final MediaClient mediaClient;\n-  private final MutableLiveData networkState;\n-  private final CompositeDisposable compositeDisposable;\n-  private final Scheduler ioThreadScheduler;\n-\n-  @Inject\n-  public ContributionBoundaryCallback(final ContributionsRepository repository,\n-      final SessionManager sessionManager,\n-      final MediaClient mediaClient,\n-      @Named(CommonsApplicationModule.IO_THREAD) final Scheduler ioThreadScheduler) {\n-    super();\n-    this.ioThreadScheduler = ioThreadScheduler;\n-    networkState = new MutableLiveData();\n-    this.repository = repository;\n-    this.sessionManager = sessionManager;\n-    this.mediaClient = mediaClient;\n-    compositeDisposable = new CompositeDisposable();\n-  }\n-\n-  /**\n-   * Provides the current network state.\n-   * @return\n-   */\n-  public MutableLiveData getNetworkState() {\n-    return networkState;\n-  }\n-\n-  /**\n-   * It is triggered when the list has no items\n-   * User's Contributions are then fetched from the network\n-   */\n-  @Override\n-  public void onZeroItemsLoaded() {\n-    fetchContributions();\n-  }\n-\n-  /**\n-   * It is triggered when the user scrolls to the top of the list\n-   * No action is taken at this point\n-   */\n-  @Override\n-  public void onItemAtFrontLoaded(@NonNull final Contribution itemAtFront) {\n-  }\n-\n-  /**\n-   * It is triggered when the user scrolls to the end of the list\n-   * User's Contributions are then fetched from the network\n-   */\n-  @Override\n-  public void onItemAtEndLoaded(@NonNull final Contribution itemAtEnd) {\n-    fetchContributions();\n-  }\n-\n-  /**\n-   * Fetches contributions using the MediaWiki API\n-   */\n-  public void fetchContributions() {\n-    networkState.postValue(NetworkState.LOADING);\n-    compositeDisposable.add(mediaClient.getMediaListForUser(sessionManager.getUserName())\n-        .map(mediaList -> {\n-          List<Contribution> contributions = new ArrayList<>();\n-          for (Media media : mediaList) {\n-            contributions.add(new Contribution(media, Contribution.STATE_COMPLETED));\n-          }\n-          return contributions;\n-        })\n-        .subscribeOn(ioThreadScheduler)\n-        .subscribe(this::saveContributionsToDB, error -> {\n-          Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n-          networkState.postValue(NetworkState.FAILED);\n-        }));\n-  }\n-\n-  /**\n-   * Saves the contributions the the local DB\n-   */\n-  private void saveContributionsToDB(final List<Contribution> contributions) {\n-    Single<List<Long>> single = repository.save(contributions);\n-    repository.set(\"last_fetch_timestamp\", System.currentTimeMillis());\n-    networkState.postValue(NetworkState.LOADED);\n-  }\n-\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzOTIwOQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r422939209", "bodyText": "raw type of mutable live data", "author": "macgills", "createdAt": "2020-05-11T10:22:45Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package fr.free.nrw.commons.contributions;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.media.MediaClient;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import timber.log.Timber;\n+\n+/**\n+ * Class that extends PagedList.BoundaryCallback for contributions list\n+ * It defines the action that is triggered for various boundary conditions in the list\n+ */\n+public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n+\n+  private final ContributionsRepository repository;\n+  private final SessionManager sessionManager;\n+  private final MediaClient mediaClient;\n+  private final MutableLiveData networkState;", "originalCommit": "34bd6f68e80d456824985069e2c0779b4780b0c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java\ndeleted file mode 100644\nindex eae5133bd..000000000\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java\n+++ /dev/null\n\n@@ -1,112 +0,0 @@\n-package fr.free.nrw.commons.contributions;\n-\n-import androidx.annotation.NonNull;\n-import androidx.lifecycle.MutableLiveData;\n-import androidx.paging.PagedList;\n-import fr.free.nrw.commons.Media;\n-import fr.free.nrw.commons.auth.SessionManager;\n-import fr.free.nrw.commons.di.CommonsApplicationModule;\n-import fr.free.nrw.commons.media.MediaClient;\n-import io.reactivex.Scheduler;\n-import io.reactivex.Single;\n-import io.reactivex.disposables.CompositeDisposable;\n-import io.reactivex.schedulers.Schedulers;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import javax.inject.Inject;\n-import javax.inject.Named;\n-import timber.log.Timber;\n-\n-/**\n- * Class that extends PagedList.BoundaryCallback for contributions list\n- * It defines the action that is triggered for various boundary conditions in the list\n- */\n-public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n-\n-  private final ContributionsRepository repository;\n-  private final SessionManager sessionManager;\n-  private final MediaClient mediaClient;\n-  private final MutableLiveData networkState;\n-  private final CompositeDisposable compositeDisposable;\n-  private final Scheduler ioThreadScheduler;\n-\n-  @Inject\n-  public ContributionBoundaryCallback(final ContributionsRepository repository,\n-      final SessionManager sessionManager,\n-      final MediaClient mediaClient,\n-      @Named(CommonsApplicationModule.IO_THREAD) final Scheduler ioThreadScheduler) {\n-    super();\n-    this.ioThreadScheduler = ioThreadScheduler;\n-    networkState = new MutableLiveData();\n-    this.repository = repository;\n-    this.sessionManager = sessionManager;\n-    this.mediaClient = mediaClient;\n-    compositeDisposable = new CompositeDisposable();\n-  }\n-\n-  /**\n-   * Provides the current network state.\n-   * @return\n-   */\n-  public MutableLiveData getNetworkState() {\n-    return networkState;\n-  }\n-\n-  /**\n-   * It is triggered when the list has no items\n-   * User's Contributions are then fetched from the network\n-   */\n-  @Override\n-  public void onZeroItemsLoaded() {\n-    fetchContributions();\n-  }\n-\n-  /**\n-   * It is triggered when the user scrolls to the top of the list\n-   * No action is taken at this point\n-   */\n-  @Override\n-  public void onItemAtFrontLoaded(@NonNull final Contribution itemAtFront) {\n-  }\n-\n-  /**\n-   * It is triggered when the user scrolls to the end of the list\n-   * User's Contributions are then fetched from the network\n-   */\n-  @Override\n-  public void onItemAtEndLoaded(@NonNull final Contribution itemAtEnd) {\n-    fetchContributions();\n-  }\n-\n-  /**\n-   * Fetches contributions using the MediaWiki API\n-   */\n-  public void fetchContributions() {\n-    networkState.postValue(NetworkState.LOADING);\n-    compositeDisposable.add(mediaClient.getMediaListForUser(sessionManager.getUserName())\n-        .map(mediaList -> {\n-          List<Contribution> contributions = new ArrayList<>();\n-          for (Media media : mediaList) {\n-            contributions.add(new Contribution(media, Contribution.STATE_COMPLETED));\n-          }\n-          return contributions;\n-        })\n-        .subscribeOn(ioThreadScheduler)\n-        .subscribe(this::saveContributionsToDB, error -> {\n-          Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n-          networkState.postValue(NetworkState.FAILED);\n-        }));\n-  }\n-\n-  /**\n-   * Saves the contributions the the local DB\n-   */\n-  private void saveContributionsToDB(final List<Contribution> contributions) {\n-    Single<List<Long>> single = repository.save(contributions);\n-    repository.set(\"last_fetch_timestamp\", System.currentTimeMillis());\n-    networkState.postValue(NetworkState.LOADED);\n-  }\n-\n-}\n-\n"}}, {"oid": "0842da7e1af9db15db9500c0d934253b548c71c8", "url": "https://github.com/commons-app/apps-android-commons/commit/0842da7e1af9db15db9500c0d934253b548c71c8", "message": "With code review comments", "committedDate": "2020-05-11T11:03:12Z", "type": "commit"}, {"oid": "ee70c21493ae24e63e8d0e05900685a5d4a862bd", "url": "https://github.com/commons-app/apps-android-commons/commit/ee70c21493ae24e63e8d0e05900685a5d4a862bd", "message": "With build fix", "committedDate": "2020-05-11T18:13:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzNDk5Ng==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r423534996", "bodyText": "I'll move this discussion to the more recent code.\nThis does nothing without a subscribe, this is just a Single which represents a task that produces a value or an error.\nIf the contributions are being saved then it is not by this code", "author": "macgills", "createdAt": "2020-05-12T07:56:07Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package fr.free.nrw.commons.contributions;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.paging.PagedList;\n+import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.media.MediaClient;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.schedulers.Schedulers;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import timber.log.Timber;\n+\n+/**\n+ * Class that extends PagedList.BoundaryCallback for contributions list It defines the action that\n+ * is triggered for various boundary conditions in the list\n+ */\n+public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n+\n+  private final ContributionsRepository repository;\n+  private final SessionManager sessionManager;\n+  private final MediaClient mediaClient;\n+  private final CompositeDisposable compositeDisposable;\n+  private final Scheduler ioThreadScheduler;\n+\n+  @Inject\n+  public ContributionBoundaryCallback(final ContributionsRepository repository,\n+      final SessionManager sessionManager,\n+      final MediaClient mediaClient,\n+      @Named(CommonsApplicationModule.IO_THREAD) final Scheduler ioThreadScheduler) {\n+    this.ioThreadScheduler = ioThreadScheduler;\n+    this.repository = repository;\n+    this.sessionManager = sessionManager;\n+    this.mediaClient = mediaClient;\n+    compositeDisposable = new CompositeDisposable();\n+  }\n+\n+  /**\n+   * It is triggered when the list has no items User's Contributions are then fetched from the\n+   * network\n+   */\n+  @Override\n+  public void onZeroItemsLoaded() {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the top of the list No action is taken at this point\n+   */\n+  @Override\n+  public void onItemAtFrontLoaded(@NonNull final Contribution itemAtFront) {\n+  }\n+\n+  /**\n+   * It is triggered when the user scrolls to the end of the list User's Contributions are then\n+   * fetched from the network\n+   */\n+  @Override\n+  public void onItemAtEndLoaded(@NonNull final Contribution itemAtEnd) {\n+    fetchContributions();\n+  }\n+\n+  /**\n+   * Fetches contributions using the MediaWiki API\n+   */\n+  public void fetchContributions() {\n+    compositeDisposable.add(mediaClient.getMediaListForUser(sessionManager.getUserName())\n+        .map(mediaList -> {\n+          List<Contribution> contributions = new ArrayList<>();\n+          for (final Media media : mediaList) {\n+            contributions.add(new Contribution(media, Contribution.STATE_COMPLETED));\n+          }\n+          return contributions;\n+        })\n+        .subscribeOn(ioThreadScheduler)\n+        .subscribe(this::saveContributionsToDB, error -> {\n+          Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n+        }));\n+  }\n+\n+  /**\n+   * Saves the contributions the the local DB\n+   */\n+  private void saveContributionsToDB(final List<Contribution> contributions) {\n+    repository.save(contributions);", "originalCommit": "ee70c21493ae24e63e8d0e05900685a5d4a862bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzMjYwNA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r423932604", "bodyText": "@macgills There's just a single usage of this method in our codebase. I checked ContributionsRepository, ContributionsLocalDataSource and ContributionDao too.\nAlso, I have been testing on a fresh install.\nCan you demonstrate that a Single doesn't execute if the result isn't subscribed?", "author": "maskaravivek", "createdAt": "2020-05-12T18:06:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzNDk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2NDk2NA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r423964964", "bodyText": "Anyways, I have updated the code to add a subscription. Still, it would be great if you could cite a source or demonstrate the above.", "author": "maskaravivek", "createdAt": "2020-05-12T19:01:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzNDk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzNDU5OQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424234599", "bodyText": "This is just an object\n\nThis is the single executing\n\nOr we could check the documentation of Single. This is the behaviour of all the reactive types, you need a subscribe call to actually do/receive something.\nTutorial official examples", "author": "macgills", "createdAt": "2020-05-13T07:41:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzNDk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMTgzMA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424601830", "bodyText": "Thanks for the example. Hopefully, the updated code should work as expected.", "author": "maskaravivek", "createdAt": "2020-05-13T17:16:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzNDk5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java\ndeleted file mode 100644\nindex 5bace7606..000000000\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionBoundaryCallback.java\n+++ /dev/null\n\n@@ -1,96 +0,0 @@\n-package fr.free.nrw.commons.contributions;\n-\n-import androidx.annotation.NonNull;\n-import androidx.lifecycle.MutableLiveData;\n-import androidx.paging.PagedList;\n-import fr.free.nrw.commons.Media;\n-import fr.free.nrw.commons.auth.SessionManager;\n-import fr.free.nrw.commons.di.CommonsApplicationModule;\n-import fr.free.nrw.commons.media.MediaClient;\n-import io.reactivex.Scheduler;\n-import io.reactivex.Single;\n-import io.reactivex.disposables.CompositeDisposable;\n-import io.reactivex.schedulers.Schedulers;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import javax.inject.Inject;\n-import javax.inject.Named;\n-import timber.log.Timber;\n-\n-/**\n- * Class that extends PagedList.BoundaryCallback for contributions list It defines the action that\n- * is triggered for various boundary conditions in the list\n- */\n-public class ContributionBoundaryCallback extends PagedList.BoundaryCallback<Contribution> {\n-\n-  private final ContributionsRepository repository;\n-  private final SessionManager sessionManager;\n-  private final MediaClient mediaClient;\n-  private final CompositeDisposable compositeDisposable;\n-  private final Scheduler ioThreadScheduler;\n-\n-  @Inject\n-  public ContributionBoundaryCallback(final ContributionsRepository repository,\n-      final SessionManager sessionManager,\n-      final MediaClient mediaClient,\n-      @Named(CommonsApplicationModule.IO_THREAD) final Scheduler ioThreadScheduler) {\n-    this.ioThreadScheduler = ioThreadScheduler;\n-    this.repository = repository;\n-    this.sessionManager = sessionManager;\n-    this.mediaClient = mediaClient;\n-    compositeDisposable = new CompositeDisposable();\n-  }\n-\n-  /**\n-   * It is triggered when the list has no items User's Contributions are then fetched from the\n-   * network\n-   */\n-  @Override\n-  public void onZeroItemsLoaded() {\n-    fetchContributions();\n-  }\n-\n-  /**\n-   * It is triggered when the user scrolls to the top of the list No action is taken at this point\n-   */\n-  @Override\n-  public void onItemAtFrontLoaded(@NonNull final Contribution itemAtFront) {\n-  }\n-\n-  /**\n-   * It is triggered when the user scrolls to the end of the list User's Contributions are then\n-   * fetched from the network\n-   */\n-  @Override\n-  public void onItemAtEndLoaded(@NonNull final Contribution itemAtEnd) {\n-    fetchContributions();\n-  }\n-\n-  /**\n-   * Fetches contributions using the MediaWiki API\n-   */\n-  public void fetchContributions() {\n-    compositeDisposable.add(mediaClient.getMediaListForUser(sessionManager.getUserName())\n-        .map(mediaList -> {\n-          List<Contribution> contributions = new ArrayList<>();\n-          for (final Media media : mediaList) {\n-            contributions.add(new Contribution(media, Contribution.STATE_COMPLETED));\n-          }\n-          return contributions;\n-        })\n-        .subscribeOn(ioThreadScheduler)\n-        .subscribe(this::saveContributionsToDB, error -> {\n-          Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n-        }));\n-  }\n-\n-  /**\n-   * Saves the contributions the the local DB\n-   */\n-  private void saveContributionsToDB(final List<Contribution> contributions) {\n-    repository.save(contributions);\n-    repository.set(\"last_fetch_timestamp\", System.currentTimeMillis());\n-  }\n-}\n-\n"}}, {"oid": "ab97455adf6dc41b5ded78c9e5d58e24c73e83d8", "url": "https://github.com/commons-app/apps-android-commons/commit/ab97455adf6dc41b5ded78c9e5d58e24c73e83d8", "message": "Minor changes", "committedDate": "2020-05-12T19:00:24Z", "type": "commit"}, {"oid": "aa889265c17130819bfebdcea839dfaf691a608a", "url": "https://github.com/commons-app/apps-android-commons/commit/aa889265c17130819bfebdcea839dfaf691a608a", "message": "Merge branch 'master' into lazyContributions", "committedDate": "2020-05-12T20:10:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI2MzU2MA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424263560", "bodyText": "Prefs.IS_CONTRIBUTION_COUNT_CHANGED can be removed entirely, we now only ever set the value, never retrieve", "author": "macgills", "createdAt": "2020-05-13T08:29:44Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java", "diffHunk": "@@ -384,12 +295,7 @@ public void onResume() {\n         firstLocationUpdate = true;\n         locationManager.addLocationListener(this);\n \n-        boolean isSettingsChanged = store.getBoolean(Prefs.IS_CONTRIBUTION_COUNT_CHANGED, false);\n         store.putBoolean(Prefs.IS_CONTRIBUTION_COUNT_CHANGED, false);", "originalCommit": "aa889265c17130819bfebdcea839dfaf691a608a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5Njg4OQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424596889", "bodyText": "Yeah, I think the whole of upload limit setting can be removed now.", "author": "maskaravivek", "createdAt": "2020-05-13T17:07:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI2MzU2MA=="}], "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java\nindex 1af6f5337..8e3221ea9 100644\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java\n+++ b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsFragment.java\n\n@@ -295,8 +295,6 @@ public class ContributionsFragment\n         firstLocationUpdate = true;\n         locationManager.addLocationListener(this);\n \n-        store.putBoolean(Prefs.IS_CONTRIBUTION_COUNT_CHANGED, false);\n-\n         if (store.getBoolean(\"displayNearbyCardView\", true)) {\n             checkPermissionsAndShowNearbyCardView();\n             if (nearbyNotificationCardView.cardViewVisibilityState == NearbyNotificationCardView.CardViewVisibilityState.READY) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI2NDM0Nw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424264347", "bodyText": "we no longer need this null check as we don't use placeholders", "author": "macgills", "createdAt": "2020-05-13T08:30:58Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java", "diffHunk": "@@ -1,68 +1,73 @@\n package fr.free.nrw.commons.contributions;\n \n-import android.text.TextUtils;\n import android.view.LayoutInflater;\n import android.view.ViewGroup;\n import androidx.annotation.NonNull;\n-import androidx.recyclerview.widget.RecyclerView;\n+import androidx.paging.PagedListAdapter;\n+import androidx.recyclerview.widget.DiffUtil;\n import fr.free.nrw.commons.R;\n import fr.free.nrw.commons.media.MediaClient;\n-import java.util.ArrayList;\n-import java.util.List;\n \n /**\n- * Represents The View Adapter for the List of Contributions  \n+ * Represents The View Adapter for the List of Contributions\n  */\n-public class ContributionsListAdapter extends RecyclerView.Adapter<ContributionViewHolder> {\n+public class ContributionsListAdapter extends\n+    PagedListAdapter<Contribution, ContributionViewHolder> {\n \n-    private Callback callback;\n+    private final Callback callback;\n     private final MediaClient mediaClient;\n-    private List<Contribution> contributions;\n \n-    public ContributionsListAdapter(Callback callback,\n-        MediaClient mediaClient) {\n+    ContributionsListAdapter(final Callback callback,\n+        final MediaClient mediaClient) {\n+        super(DIFF_CALLBACK);\n         this.callback = callback;\n         this.mediaClient = mediaClient;\n-        contributions = new ArrayList<>();\n     }\n \n     /**\n-     * Creates the new View Holder which will be used to display items(contributions)\n-     * using the onBindViewHolder(viewHolder,position) \n+     * Uses DiffUtil to calculate the changes in the list\n+     * It has methods that check ID and the content of the items to determine if its a new item\n      */\n-    @NonNull\n-    @Override\n-    public ContributionViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n-        ContributionViewHolder viewHolder = new ContributionViewHolder(\n-                LayoutInflater.from(parent.getContext())\n-                        .inflate(R.layout.layout_contribution, parent, false), callback, mediaClient);\n-        return viewHolder;\n-    }\n+    private static final DiffUtil.ItemCallback<Contribution> DIFF_CALLBACK =\n+        new DiffUtil.ItemCallback<Contribution>() {\n+            @Override\n+            public boolean areItemsTheSame(final Contribution oldContribution, final Contribution newContribution) {\n+                return oldContribution.getPageId().equals(newContribution.getPageId());\n+            }\n+\n+            @Override\n+            public boolean areContentsTheSame(final Contribution oldContribution, final Contribution newContribution) {\n+                return oldContribution.equals(newContribution);\n+            }\n+        };\n \n+    /**\n+     * Initializes the view holder with contribution data\n+     */\n     @Override\n-    public void onBindViewHolder(@NonNull ContributionViewHolder holder, int position) {\n-        final Contribution contribution = contributions.get(position);\n-        if (TextUtils.isEmpty(contribution.getThumbUrl())\n-            && contribution.getState() == Contribution.STATE_COMPLETED) {\n-            callback.fetchMediaUriFor(contribution);\n+    public void onBindViewHolder(@NonNull final ContributionViewHolder holder, final int position) {\n+        final Contribution contribution = getItem(position);\n+        if (contribution != null) {", "originalCommit": "aa889265c17130819bfebdcea839dfaf691a608a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java\nindex 1dbf6f8a9..a0c8e1088 100644\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java\n+++ b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java\n\n@@ -1,4 +1,4 @@\n-package fr.free.nrw.commons.contributions;\n+    package fr.free.nrw.commons.contributions;\n \n import android.view.LayoutInflater;\n import android.view.ViewGroup;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI2NzYzNg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r424267636", "bodyText": "this looks a little funky with the .get on the next line, sometimes I favor\nexpression\n ? trueValue\n : falseValue\n\nwhen things run a little long", "author": "macgills", "createdAt": "2020-05-13T08:36:04Z", "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "diffHunk": "@@ -83,6 +83,22 @@ public MediaClient(MediaInterface mediaInterface, MediaDetailInterface mediaDeta\n \n     }\n \n+    /**\n+     * This method takes the userName as input and returns a list of  Media objects filtered using\n+     * allimages query It uses the allimages query API to get the images contributed by the userName,\n+     * 10 at a time.\n+     *\n+     * @param userName the username\n+     * @return\n+     */\n+    public Single<List<Media>> getMediaListForUser(String userName) {\n+        Map<String, String> continuation =\n+            continuationStore.containsKey(\"user_\" + userName) ? continuationStore\n+                .get(\"user_\" + userName) : Collections.emptyMap();", "originalCommit": "aa889265c17130819bfebdcea839dfaf691a608a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/media/MediaClient.java b/app/src/main/java/fr/free/nrw/commons/media/MediaClient.java\nindex 7912989fd..0ddd9fc70 100644\n--- a/app/src/main/java/fr/free/nrw/commons/media/MediaClient.java\n+++ b/app/src/main/java/fr/free/nrw/commons/media/MediaClient.java\n\n@@ -93,12 +95,26 @@ public class MediaClient {\n      */\n     public Single<List<Media>> getMediaListForUser(String userName) {\n         Map<String, String> continuation =\n-            continuationStore.containsKey(\"user_\" + userName) ? continuationStore\n-                .get(\"user_\" + userName) : Collections.emptyMap();\n+            continuationStore.containsKey(\"user_\" + userName)\n+                ? continuationStore.get(\"user_\" + userName)\n+                : Collections.emptyMap();\n         return responseToMediaList(mediaInterface\n             .getMediaListForUser(userName, 10, continuation), \"user_\" + userName);\n     }\n \n+    /**\n+     * Check if media for user has reached the end of the list.\n+     * @param userName\n+     * @return\n+     */\n+    public boolean doesMediaListForUserHaveMorePages(String userName) {\n+        final String key = \"user_\" + userName;\n+        if(continuationExists.containsKey(key)) {\n+            return continuationExists.get(key);\n+        }\n+        return true;\n+    }\n+\n     /**\n      * This method takes a keyword as input and returns a list of  Media objects filtered using image generator query\n      * It uses the generator query API to get the images searched using a query, 10 at a time.\n"}}, {"oid": "d23115b9c648d937d7ec1b6011939127d35068cb", "url": "https://github.com/commons-app/apps-android-commons/commit/d23115b9c648d937d7ec1b6011939127d35068cb", "message": "Address code review comments", "committedDate": "2020-05-13T17:25:30Z", "type": "commit"}, {"oid": "85f48a99fdba8369fe59c42ced4ab456c310873f", "url": "https://github.com/commons-app/apps-android-commons/commit/85f48a99fdba8369fe59c42ced4ab456c310873f", "message": "Minor", "committedDate": "2020-05-14T05:46:33Z", "type": "commit"}, {"oid": "bb4f91c8c6d4c561e01c959c8f17f057dff30659", "url": "https://github.com/commons-app/apps-android-commons/commit/bb4f91c8c6d4c561e01c959c8f17f057dff30659", "message": "Use ktx library", "committedDate": "2020-05-14T05:50:25Z", "type": "commit"}, {"oid": "edb828ebebda73a7aac1ec1ccabda57fd783e144", "url": "https://github.com/commons-app/apps-android-commons/commit/edb828ebebda73a7aac1ec1ccabda57fd783e144", "message": "Fix loading of contributions on upload", "committedDate": "2020-05-14T18:00:28Z", "type": "commit"}, {"oid": "ee6f5bf0b7d518073acb083db6f677f9fb263152", "url": "https://github.com/commons-app/apps-android-commons/commit/ee6f5bf0b7d518073acb083db6f677f9fb263152", "message": "Merge branch 'master' into lazyContributions", "committedDate": "2020-05-20T05:53:48Z", "type": "commit"}, {"oid": "e1e761bdc93cac5d0bf287ba8df086e22d3459af", "url": "https://github.com/commons-app/apps-android-commons/commit/e1e761bdc93cac5d0bf287ba8df086e22d3459af", "message": "Fix test", "committedDate": "2020-05-20T07:16:05Z", "type": "commit"}, {"oid": "193ed2a2e1bbbd75c4f280881b1b8124c7a0a5ed", "url": "https://github.com/commons-app/apps-android-commons/commit/193ed2a2e1bbbd75c4f280881b1b8124c7a0a5ed", "message": "Merge branch 'lazyContributions' of github.com:maskaravivek/apps-android-commons into lazyContributions", "committedDate": "2020-05-20T07:18:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1NTAzNg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r427955036", "bodyText": "do we need this method when we have getItem ?", "author": "macgills", "createdAt": "2020-05-20T12:05:54Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java", "diffHunk": "@@ -1,68 +1,71 @@\n package fr.free.nrw.commons.contributions;\n \n-import android.text.TextUtils;\n import android.view.LayoutInflater;\n import android.view.ViewGroup;\n import androidx.annotation.NonNull;\n-import androidx.recyclerview.widget.RecyclerView;\n+import androidx.paging.PagedListAdapter;\n+import androidx.recyclerview.widget.DiffUtil;\n import fr.free.nrw.commons.R;\n import fr.free.nrw.commons.media.MediaClient;\n-import java.util.ArrayList;\n-import java.util.List;\n \n /**\n- * Represents The View Adapter for the List of Contributions  \n+ * Represents The View Adapter for the List of Contributions\n  */\n-public class ContributionsListAdapter extends RecyclerView.Adapter<ContributionViewHolder> {\n+public class ContributionsListAdapter extends\n+    PagedListAdapter<Contribution, ContributionViewHolder> {\n \n-    private Callback callback;\n+    private final Callback callback;\n     private final MediaClient mediaClient;\n-    private List<Contribution> contributions;\n \n-    public ContributionsListAdapter(Callback callback,\n-        MediaClient mediaClient) {\n+    ContributionsListAdapter(final Callback callback,\n+        final MediaClient mediaClient) {\n+        super(DIFF_CALLBACK);\n         this.callback = callback;\n         this.mediaClient = mediaClient;\n-        contributions = new ArrayList<>();\n     }\n \n     /**\n-     * Creates the new View Holder which will be used to display items(contributions)\n-     * using the onBindViewHolder(viewHolder,position) \n+     * Uses DiffUtil to calculate the changes in the list\n+     * It has methods that check ID and the content of the items to determine if its a new item\n      */\n-    @NonNull\n-    @Override\n-    public ContributionViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n-        ContributionViewHolder viewHolder = new ContributionViewHolder(\n-                LayoutInflater.from(parent.getContext())\n-                        .inflate(R.layout.layout_contribution, parent, false), callback, mediaClient);\n-        return viewHolder;\n-    }\n+    private static final DiffUtil.ItemCallback<Contribution> DIFF_CALLBACK =\n+        new DiffUtil.ItemCallback<Contribution>() {\n+            @Override\n+            public boolean areItemsTheSame(final Contribution oldContribution, final Contribution newContribution) {\n+                return oldContribution.getPageId().equals(newContribution.getPageId());\n+            }\n+\n+            @Override\n+            public boolean areContentsTheSame(final Contribution oldContribution, final Contribution newContribution) {\n+                return oldContribution.equals(newContribution);\n+            }\n+        };\n \n+    /**\n+     * Initializes the view holder with contribution data\n+     */\n     @Override\n-    public void onBindViewHolder(@NonNull ContributionViewHolder holder, int position) {\n-        final Contribution contribution = contributions.get(position);\n-        if (TextUtils.isEmpty(contribution.getThumbUrl())\n-            && contribution.getState() == Contribution.STATE_COMPLETED) {\n-            callback.fetchMediaUriFor(contribution);\n-        }\n-\n+    public void onBindViewHolder(@NonNull final ContributionViewHolder holder, final int position) {\n+        final Contribution contribution = getItem(position);\n         holder.init(position, contribution);\n     }\n \n-    @Override\n-    public int getItemCount() {\n-        return contributions.size();\n-    }\n-\n-    public void setContributions(@NonNull List<Contribution> contributionList) {\n-        contributions = contributionList;\n-        notifyDataSetChanged();\n+    Contribution getContributionForPosition(final int position) {", "originalCommit": "193ed2a2e1bbbd75c4f280881b1b8124c7a0a5ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNzQ4MA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r428117480", "bodyText": "getItem is protected. We are using getContributionForPosition outside the adapter class.", "author": "maskaravivek", "createdAt": "2020-05-20T15:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1NTAzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzMzY0MQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r428133641", "bodyText": "yup, my mistake", "author": "macgills", "createdAt": "2020-05-20T16:08:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1NTAzNg=="}], "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java\nindex 861608104..a0c8e1088 100644\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java\n+++ b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java\n\n@@ -1,4 +1,4 @@\n-package fr.free.nrw.commons.contributions;\n+    package fr.free.nrw.commons.contributions;\n \n import android.view.LayoutInflater;\n import android.view.ViewGroup;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1Nzc1OQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r427957759", "bodyText": "never used", "author": "macgills", "createdAt": "2020-05-20T12:11:07Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/NetworkState.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package fr.free.nrw.commons.contributions;\n+\n+/**\n+ * Enum that defines the different states for contribution paged list's boundary callback\n+ */\n+enum NetworkState {", "originalCommit": "193ed2a2e1bbbd75c4f280881b1b8124c7a0a5ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/NetworkState.java b/app/src/main/java/fr/free/nrw/commons/contributions/NetworkState.java\ndeleted file mode 100644\nindex bb6f6b6c9..000000000\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/NetworkState.java\n+++ /dev/null\n\n@@ -1,10 +0,0 @@\n-package fr.free.nrw.commons.contributions;\n-\n-/**\n- * Enum that defines the different states for contribution paged list's boundary callback\n- */\n-enum NetworkState {\n-  LOADED,\n-  LOADING,\n-  FAILED\n-}\n"}}, {"oid": "9ca466283a562301d7d06ae5c82fc85cb2824145", "url": "https://github.com/commons-app/apps-android-commons/commit/9ca466283a562301d7d06ae5c82fc85cb2824145", "message": "Handle end of list for user media", "committedDate": "2020-05-20T20:51:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzk4MQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r428503981", "bodyText": "if null couldn't we just remove the key and then it all works as usual without the extra map", "author": "macgills", "createdAt": "2020-05-21T07:59:11Z", "path": "app/src/main/java/fr/free/nrw/commons/media/MediaClient.java", "diffHunk": "@@ -123,7 +140,12 @@ public MediaClient(MediaInterface mediaInterface, MediaDetailInterface mediaDeta\n                     || null == mwQueryResponse.query().pages()) {\n                 return Observable.empty();\n             }\n-            continuationStore.put(key, mwQueryResponse.continuation());\n+            if(mwQueryResponse.continuation() != null) {\n+                continuationStore.put(key, mwQueryResponse.continuation());", "originalCommit": "9ca466283a562301d7d06ae5c82fc85cb2824145", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3OTcxMQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r428579711", "bodyText": "If we remove the key then it would be like fetching the first page. The API call would be made without the continuation params.", "author": "maskaravivek", "createdAt": "2020-05-21T10:47:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4NjY1Mg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r428586652", "bodyText": "And then the Db update would return the same data, not retriggering a boundaryCallback as the list would be unchanged, I think.\nThough I guess now the api is set up with a continuation... I am quite unsure of how to proceed", "author": "macgills", "createdAt": "2020-05-21T11:04:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5MzEwMw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r428593103", "bodyText": "and the continuation map is never assigned but I am sure you are on that", "author": "macgills", "createdAt": "2020-05-21T11:20:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyOTk4OQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r428829989", "bodyText": "Though I guess now the api is set up with a continuation... I am quite unsure of how to proceed\n\nYeah, right. As the API is set up with a continuation it will start fetching all the pages again. On a related note, the current logic of fetching pages(that I added in this PR) is very naive and can be improved. For now, i wanted to keep things simple.\n\nand the continuation map is never assigned but I am sure you are on that\n\nI didn't understand this comment.", "author": "maskaravivek", "createdAt": "2020-05-21T18:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyMTc0Nw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r429121747", "bodyText": "I should have said continuationExists map but it is resolved now.\nThis is a bit \"upending the teatable\" but it seems to me that this endpoint shouldn't use continuation at all, we could happily query using\n\nbut perhaps that is best suited for another ticket", "author": "macgills", "createdAt": "2020-05-22T08:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0NjgxMw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r429146813", "bodyText": "Yeah we can use aistart and aiend parameter to fetch contributions based on timestamp but I don't think that can replace continuation. With start and end timestamp, there's no way to be sure how many contributions would be returned. For eg. recently I uploaded around 2000 images in a day. The API would then return all images in one call. It would defeat the purpose of pagination.\nTo limit it to 10 images per call we will have to use ailimit and then continuation will still come into picture.", "author": "maskaravivek", "createdAt": "2020-05-22T09:39:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0Nzc0OA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r429147748", "bodyText": "@macgills Is everything working in this PR now? It would be great if you could do another test.", "author": "maskaravivek", "createdAt": "2020-05-22T09:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1NDEzOQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r429154139", "bodyText": "It is a little trickier granted but if at top of list we request media since now and reorder it so it is oldest first it hoovers along nicely.\nBottom of the list request since last item timestamp + newest first.\nAgain perhaps a discussion for another ticket. I will get to testing shortly", "author": "macgills", "createdAt": "2020-05-22T09:54:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzk4MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "66ec64150767ee6939d7c7871c884b1afb29f8a0", "url": "https://github.com/commons-app/apps-android-commons/commit/66ec64150767ee6939d7c7871c884b1afb29f8a0", "message": "Init continuation exists", "committedDate": "2020-05-21T18:23:30Z", "type": "commit"}, {"oid": "cf0393c5a9ed057918a7954261583f26067fde3d", "url": "https://github.com/commons-app/apps-android-commons/commit/cf0393c5a9ed057918a7954261583f26067fde3d", "message": "More changes", "committedDate": "2020-05-24T02:49:16Z", "type": "commit"}, {"oid": "6b7ac2b415317b87df6b37dc5a95f5ee1393bcce", "url": "https://github.com/commons-app/apps-android-commons/commit/6b7ac2b415317b87df6b37dc5a95f5ee1393bcce", "message": "Fix minor UI issues", "committedDate": "2020-05-26T09:00:07Z", "type": "commit"}, {"oid": "a4dfc1d8588ecaa5ea02cdfc4f517e5d5ddf2dd7", "url": "https://github.com/commons-app/apps-android-commons/commit/a4dfc1d8588ecaa5ea02cdfc4f517e5d5ddf2dd7", "message": "Merge branch 'master' into lazyContributions", "committedDate": "2020-05-26T09:00:33Z", "type": "commit"}, {"oid": "92336f586fc5c6507b211f10951104802edae28c", "url": "https://github.com/commons-app/apps-android-commons/commit/92336f586fc5c6507b211f10951104802edae28c", "message": "With minor", "committedDate": "2020-05-26T09:06:43Z", "type": "commit"}, {"oid": "3260bc79f12ca08bd6f1ef40d49400927a0e8b10", "url": "https://github.com/commons-app/apps-android-commons/commit/3260bc79f12ca08bd6f1ef40d49400927a0e8b10", "message": "Fix test", "committedDate": "2020-05-26T09:30:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4NTMzNg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r430285336", "bodyText": "Completeable.fromAction may be more idiomatic", "author": "macgills", "createdAt": "2020-05-26T09:39:48Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListPresenter.java", "diffHunk": "@@ -62,9 +62,7 @@ public void onDetachView() {\n    */\n   @Override\n   public void deleteUpload(final Contribution contribution) {\n-    compositeDisposable.add(repository.deleteContributionFromDB(contribution)\n-        .subscribeOn(ioThreadScheduler)\n-        .subscribe());\n+    ioThreadScheduler.scheduleDirect(() -> repository.deleteContributionFromDB(contribution));", "originalCommit": "a4dfc1d8588ecaa5ea02cdfc4f517e5d5ddf2dd7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListPresenter.java b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListPresenter.java\nindex 37d1693a5..f09c5f205 100644\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListPresenter.java\n+++ b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListPresenter.java\n\n@@ -62,7 +62,10 @@ public class ContributionsListPresenter implements UserActionListener {\n    */\n   @Override\n   public void deleteUpload(final Contribution contribution) {\n-    ioThreadScheduler.scheduleDirect(() -> repository.deleteContributionFromDB(contribution));\n+    compositeDisposable.add(repository\n+        .deleteContributionFromDB(contribution)\n+        .subscribeOn(ioThreadScheduler)\n+        .subscribe());\n   }\n \n }\n"}}, {"oid": "ac2898beecbc6b4921e058081fe2c67b41d7e44e", "url": "https://github.com/commons-app/apps-android-commons/commit/ac2898beecbc6b4921e058081fe2c67b41d7e44e", "message": "Replace direct scheduler with completable", "committedDate": "2020-05-26T18:52:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzNjIyOA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r430936228", "bodyText": "this won't work, saveAndDelete is a completable.\nsubscribe is a terminal call, it receives the values from the particular stream it subscribes to but it cannot continue the stream.\nyou probably want to use .flatMapCompletable", "author": "macgills", "createdAt": "2020-05-27T08:13:46Z", "path": "app/src/main/java/fr/free/nrw/commons/upload/UploadService.java", "diffHunk": "@@ -297,7 +298,7 @@ private void onSuccessfulUpload(Contribution contribution, UploadResult uploadRe\n     private void saveCompletedContribution(Contribution contribution, UploadResult uploadResult) {\n         compositeDisposable.add(mediaClient.getMedia(\"File:\" + uploadResult.getFilename())\n         .map(media -> new Contribution(media, Contribution.STATE_COMPLETED))\n-        .subscribe(newContribution -> contributionDao.deleteAndSaveContribution(contribution, newContribution)));\n+        .subscribe(newContribution -> contributionDao.saveAndDelete(contribution, newContribution)));", "originalCommit": "ac2898beecbc6b4921e058081fe2c67b41d7e44e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0NDgyNw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r430944827", "bodyText": "Just updated the PR.", "author": "maskaravivek", "createdAt": "2020-05-27T08:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzNjIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/upload/UploadService.java b/app/src/main/java/fr/free/nrw/commons/upload/UploadService.java\nindex 15083ee59..0f88be382 100644\n--- a/app/src/main/java/fr/free/nrw/commons/upload/UploadService.java\n+++ b/app/src/main/java/fr/free/nrw/commons/upload/UploadService.java\n\n@@ -298,7 +298,8 @@ public class UploadService extends CommonsDaggerService {\n     private void saveCompletedContribution(Contribution contribution, UploadResult uploadResult) {\n         compositeDisposable.add(mediaClient.getMedia(\"File:\" + uploadResult.getFilename())\n         .map(media -> new Contribution(media, Contribution.STATE_COMPLETED))\n-        .subscribe(newContribution -> contributionDao.saveAndDelete(contribution, newContribution)));\n+        .flatMapCompletable(newContribution -> contributionDao.saveAndDelete(contribution, newContribution))\n+        .subscribe());\n     }\n \n     @SuppressLint(\"StringFormatInvalid\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0MTcxMQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3566#discussion_r430941711", "bodyText": "synchronous", "author": "macgills", "createdAt": "2020-05-27T08:23:04Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionDao.java", "diffHunk": "@@ -20,20 +22,36 @@\n   abstract DataSource.Factory<Integer, Contribution> fetchContributions();\n \n   @Insert(onConflict = OnConflictStrategy.REPLACE)\n-  public abstract void save(Contribution contribution);\n+  public abstract void saveSyncronous(Contribution contribution);", "originalCommit": "ac2898beecbc6b4921e058081fe2c67b41d7e44e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f12c5f814a5432340a62f9f72f9549c587b14f6", "chunk": "diff --git a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionDao.java b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionDao.java\nindex e61a9ae51..e288a84af 100644\n--- a/app/src/main/java/fr/free/nrw/commons/contributions/ContributionDao.java\n+++ b/app/src/main/java/fr/free/nrw/commons/contributions/ContributionDao.java\n\n@@ -22,18 +19,18 @@ public abstract class ContributionDao {\n   abstract DataSource.Factory<Integer, Contribution> fetchContributions();\n \n   @Insert(onConflict = OnConflictStrategy.REPLACE)\n-  public abstract void saveSyncronous(Contribution contribution);\n+  public abstract void saveSynchronous(Contribution contribution);\n \n   public Completable save(final Contribution contribution) {\n     return Completable\n-        .fromAction(() -> saveSyncronous(contribution));\n+        .fromAction(() -> saveSynchronous(contribution));\n   }\n \n   @Transaction\n   public void deleteAndSaveContribution(final Contribution oldContribution,\n       final Contribution newContribution) {\n-    deleteSyncronous(oldContribution);\n-    saveSyncronous(newContribution);\n+    deleteSynchronous(oldContribution);\n+    saveSynchronous(newContribution);\n   }\n \n   public Completable saveAndDelete(final Contribution oldContribution,\n"}}, {"oid": "2eb67c5368ae6fcd665b22dae232590c651daa72", "url": "https://github.com/commons-app/apps-android-commons/commit/2eb67c5368ae6fcd665b22dae232590c651daa72", "message": "Fix code review comments", "committedDate": "2020-05-27T08:27:32Z", "type": "commit"}]}