{"pr_number": 4936, "pr_title": "Service ticket as JWT without TGT and gateway=true", "pr_createdAt": "2020-09-04T14:26:24Z", "pr_url": "https://github.com/apereo/cas/pull/4936", "timeline": [{"oid": "3eabb89085041aacad02f07d13a0ade7507f43bf", "url": "https://github.com/apereo/cas/commit/3eabb89085041aacad02f07d13a0ade7507f43bf", "message": "Service ticket as JWT without TGT and gateway=true\n\nFix the following issue:\r\nThe service is configured to allow service ticket as JWT with gateway=true\r\nThe user has no TGT session\r\n\r\nExpected behaviour: 302 Redirect on the requested service\r\nFound behaviour: The following exception\r\n\r\norg.jasig.cas.client.validation.TicketValidationException: service and ticket parameters are both required\r\n        at org.jasig.cas.client.validation.Cas20ServiceTicketValidator.parseResponseFromServer(Cas20ServiceTicketValidator.java:84) ~[cas-client-core-3.5.1.jar!/:3.5.1]\r\n        at org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator.validate(AbstractUrlBasedTicketValidator.java:198) ~[cas-client-core-3.5.1.jar!/:3.5.1]\r\n        at org.apereo.cas.token.JWTTokenTicketBuilder.build(JWTTokenTicketBuilder.java:52) ~[cas-server-support-token-core-5.3.15.1.jar!/:5.3.15.1]\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_92]\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_92]\r\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_92]\r\n        at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_92]\r\n        at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:215) ~[spring-core-4.3.25.RELEASE.jar!/:4.3.25.RELEASE]\r\n        at org.springframework.cloud.context.scope.GenericScope$LockedScopedProxyFactoryBean.invoke(GenericScope.java:470) ~[spring-cloud-context-1.3.0.RELEASE.jar!/:1.3.0.RELEASE]\r\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.25.RELEASE.jar!/:4.3.25.RELEASE]\r\n        at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213) ~[spring-aop-4.3.25.RELEASE.jar!/:4.3.25.RELEASE]\r\n        at com.sun.proxy.$Proxy134.build(Unknown Source) ~[?:?]\r\n        at org.apereo.cas.token.authentication.principal.TokenWebApplicationServiceResponseBuilder.generateToken(TokenWebApplicationServiceResponseBuilder.java:70) ~[cas-server-support-token-tickets-5.3.15.1.jar!/:5.3.15.1]\r\n        at org.apereo.cas.token.authentication.principal.TokenWebApplicationServiceResponseBuilder.buildInternal(TokenWebApplicationServiceResponseBuilder.java:49) ~[cas-server-support-token-tickets-5.3.15.1.jar!/:5.3.15.1]\r\n        at org.apereo.cas.authentication.principal.WebApplicationServiceResponseBuilder.build(WebApplicationServiceResponseBuilder.java:43) ~[cas-server-core-services-authentication-5.3.15.1.jar!/:5.3.15.1]\r\n        at org.apereo.cas.web.flow.actions.RedirectToServiceAction.doExecute(RedirectToServiceAction.java:41) ~[cas-server-core-webflow-api-5.3.15.1.jar!/:5.3.15.1]", "committedDate": "2020-09-04T13:49:45Z", "type": "commit"}, {"oid": "f8b1661b0971d453978b20ef3dd672d3b269d518", "url": "https://github.com/apereo/cas/commit/f8b1661b0971d453978b20ef3dd672d3b269d518", "message": "Update TokenWebApplicationServiceResponseBuilder.java", "committedDate": "2020-09-04T14:20:02Z", "type": "commit"}, {"oid": "d7985d83e419bc0b3b3e56d58862eefa1bc41c31", "url": "https://github.com/apereo/cas/commit/d7985d83e419bc0b3b3e56d58862eefa1bc41c31", "message": "Update TokenWebApplicationServiceResponseBuilder.java", "committedDate": "2020-09-04T14:20:46Z", "type": "commit"}, {"oid": "0e67ab3a21fc400c36f8a6cee7f0dc50512fc914", "url": "https://github.com/apereo/cas/commit/0e67ab3a21fc400c36f8a6cee7f0dc50512fc914", "message": "Add unit test for the use case service ticket as jwt with gateway=true", "committedDate": "2020-09-09T13:01:18Z", "type": "commit"}, {"oid": "0e8abb20f166ab7bf84a052fbb4369e4915337c1", "url": "https://github.com/apereo/cas/commit/0e8abb20f166ab7bf84a052fbb4369e4915337c1", "message": "Update TokenWebApplicationServiceResponseBuilder.java", "committedDate": "2020-09-09T14:16:55Z", "type": "commit"}, {"oid": "27d52dbd2054069701d43c888c130a0c01f4dbc6", "url": "https://github.com/apereo/cas/commit/27d52dbd2054069701d43c888c130a0c01f4dbc6", "message": "Update TokenWebApplicationServiceResponseBuilder.java", "committedDate": "2020-09-09T14:43:39Z", "type": "commit"}, {"oid": "f3ea768ff5d1a7cba325a329eba602765a2c8abf", "url": "https://github.com/apereo/cas/commit/f3ea768ff5d1a7cba325a329eba602765a2c8abf", "message": "Fix checkstyle issue", "committedDate": "2020-09-14T10:18:28Z", "type": "commit"}, {"oid": "c0a60b11856628fd76ba6528e1cf6cdeb465c554", "url": "https://github.com/apereo/cas/commit/c0a60b11856628fd76ba6528e1cf6cdeb465c554", "message": "Fix check style issues", "committedDate": "2020-09-14T12:06:18Z", "type": "commit"}, {"oid": "04f1a3e247386549f453c12f5c833c763d81f2d7", "url": "https://github.com/apereo/cas/commit/04f1a3e247386549f453c12f5c833c763d81f2d7", "message": "Fix check style issues", "committedDate": "2020-09-14T13:24:17Z", "type": "commit"}, {"oid": "a7c9326911123f03c1fcbadc0539b62a28004a79", "url": "https://github.com/apereo/cas/commit/a7c9326911123f03c1fcbadc0539b62a28004a79", "message": "Fix check style issues", "committedDate": "2020-09-14T13:29:11Z", "type": "commit"}, {"oid": "31438623814b1069d1c2ac61961844f52a5a7116", "url": "https://github.com/apereo/cas/commit/31438623814b1069d1c2ac61961844f52a5a7116", "message": "Fix check style issues", "committedDate": "2020-09-14T14:57:17Z", "type": "commit"}, {"oid": "729d68b27d054ce85f095fe78069b2ef415f9a0e", "url": "https://github.com/apereo/cas/commit/729d68b27d054ce85f095fe78069b2ef415f9a0e", "message": "Fix check style issue", "committedDate": "2020-09-14T15:51:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyODIwNg==", "url": "https://github.com/apereo/cas/pull/4936#discussion_r490828206", "bodyText": "Fix the formatting issues here. Spaces between operators, and also fix the indentation please.", "author": "mmoayyed", "createdAt": "2020-09-18T09:40:42Z", "path": "support/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java", "diffHunk": "@@ -40,11 +39,14 @@ protected WebApplicationService buildInternal(final WebApplicationService servic\n         val registeredService = this.servicesManager.findServiceBy(service);\n         RegisteredServiceAccessStrategyUtils.ensureServiceAccessIsAllowed(service, registeredService);\n         val tokenAsResponse = RegisteredServiceProperty.RegisteredServiceProperties.TOKEN_AS_SERVICE_TICKET.isAssignedTo(registeredService);\n+        val ticketIdAvailable=isTicketIdAvailable(parameters);\n \n-        if (!tokenAsResponse) {\n-            LOGGER.debug(\"Registered service [{}] is not configured to issue JWTs for service tickets. \"\n-                    + \"Make sure the service property [{}] is defined and is set to true\", registeredService,\n-                RegisteredServiceProperties.TOKEN_AS_SERVICE_TICKET.getPropertyName());\n+        if (!tokenAsResponse||!ticketIdAvailable) {\n+            if (ticketIdAvailable) {\n+                LOGGER.debug(\"Registered service [{}] is not configured to issue JWTs for service tickets. \"\n+                                + \"Make sure the service property [{}] is defined and set to true\", registeredService,\n+                        RegisteredServiceProperties.TOKEN_AS_SERVICE_TICKET.getPropertyName());\n+            }\n             return super.buildInternal(service, parameters);", "originalCommit": "729d68b27d054ce85f095fe78069b2ef415f9a0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkwNzU2Mg==", "url": "https://github.com/apereo/cas/pull/4936#discussion_r491907562", "bodyText": "Done.", "author": "C4n4rd0", "createdAt": "2020-09-21T09:35:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyODIwNg=="}], "type": "inlineReview", "revised_code": {"commit": "e47411fd4a3070ba368d2fa286e6ff48896c19ee", "chunk": "diff --git a/support/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java b/support/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java\nindex 952335b55f..64a5a68044 100644\n--- a/support/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java\n+++ b/support/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java\n\n@@ -41,11 +41,11 @@ public class TokenWebApplicationServiceResponseBuilder extends WebApplicationSer\n         val tokenAsResponse = RegisteredServiceProperty.RegisteredServiceProperties.TOKEN_AS_SERVICE_TICKET.isAssignedTo(registeredService);\n         val ticketIdAvailable=isTicketIdAvailable(parameters);\n \n-        if (!tokenAsResponse||!ticketIdAvailable) {\n+        if (!tokenAsResponse || !ticketIdAvailable) {\n             if (ticketIdAvailable) {\n                 LOGGER.debug(\"Registered service [{}] is not configured to issue JWTs for service tickets. \"\n-                                + \"Make sure the service property [{}] is defined and set to true\", registeredService,\n-                        RegisteredServiceProperties.TOKEN_AS_SERVICE_TICKET.getPropertyName());\n+                             + \"Make sure the service property [{}] is defined and set to true\", \n+                             registeredService,RegisteredServiceProperties.TOKEN_AS_SERVICE_TICKET.getPropertyName());\n             }\n             return super.buildInternal(service, parameters);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyODgzMA==", "url": "https://github.com/apereo/cas/pull/4936#discussion_r490828830", "bodyText": "Simplify to one line:\nreturn StringUtils.isNotBlank(parameters.get(CasProtocolConstants.PARAMETER_TICKET))", "author": "mmoayyed", "createdAt": "2020-09-18T09:41:21Z", "path": "support/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java", "diffHunk": "@@ -58,6 +60,16 @@ protected WebApplicationService buildInternal(final WebApplicationService servic\n \n         return jwtService;\n     }\n+    \n+    private boolean isTicketIdAvailable(final Map<String, String> parameters){\n+        final String ticketId=parameters.get(CasProtocolConstants.PARAMETER_TICKET);\n+\n+        if (StringUtils.isBlank(ticketId)){\n+            return false;\n+        }\n+\n+        return true;\n+    }", "originalCommit": "729d68b27d054ce85f095fe78069b2ef415f9a0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyODk1MA==", "url": "https://github.com/apereo/cas/pull/4936#discussion_r490828950", "bodyText": "Also fix formatting issues", "author": "mmoayyed", "createdAt": "2020-09-18T09:41:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyODgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkwNzY2Ng==", "url": "https://github.com/apereo/cas/pull/4936#discussion_r491907666", "bodyText": "Done.", "author": "C4n4rd0", "createdAt": "2020-09-21T09:35:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyODgzMA=="}], "type": "inlineReview", "revised_code": {"commit": "e47411fd4a3070ba368d2fa286e6ff48896c19ee", "chunk": "diff --git a/support/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java b/support/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java\nindex 952335b55f..64a5a68044 100644\n--- a/support/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java\n+++ b/support/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java\n\n@@ -62,13 +62,7 @@ public class TokenWebApplicationServiceResponseBuilder extends WebApplicationSer\n     }\n     \n     private boolean isTicketIdAvailable(final Map<String, String> parameters){\n-        final String ticketId=parameters.get(CasProtocolConstants.PARAMETER_TICKET);\n-\n-        if (StringUtils.isBlank(ticketId)){\n-            return false;\n-        }\n-\n-        return true;\n+        return StringUtils.isNotBlank(parameters.get(CasProtocolConstants.PARAMETER_TICKET));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyOTY2MQ==", "url": "https://github.com/apereo/cas/pull/4936#discussion_r490829661", "bodyText": "How does this test verify gateway=true?", "author": "mmoayyed", "createdAt": "2020-09-18T09:42:14Z", "path": "support/cas-server-support-token-tickets/src/test/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilderTests.java", "diffHunk": "@@ -139,4 +140,19 @@ public void verifyTokenBuilder() throws Exception {\n             assertNotNull(JWTParser.parse(ticket));\n         }\n     }\n+    \n+    @Test\n+    public void verifyTokenBuilderWhenGatewayIsTrue() throws Exception {\n+        val data = \"yes\\ncasuser\";\n+        try (val webServer = new MockWebServer(8281,\n+            new ByteArrayResource(data.getBytes(StandardCharsets.UTF_8), \"REST Output\"), MediaType.APPLICATION_JSON_VALUE)) {\n+            webServer.start();\n+\n+            val result = responseBuilder.build(CoreAuthenticationTestUtils.getWebApplicationService(\"jwtservice\"),\n+                StringUtils.EMPTY,\n+                CoreAuthenticationTestUtils.getAuthentication());\n+            assertNotNull(result);\n+            assertFalse(result.getAttributes().containsKey(CasProtocolConstants.PARAMETER_TICKET));\n+        }", "originalCommit": "729d68b27d054ce85f095fe78069b2ef415f9a0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkxMDEzNQ==", "url": "https://github.com/apereo/cas/pull/4936#discussion_r491910135", "bodyText": "If the service is configured to receive \u00e0 service ticket as a JWT and that the request parameter gateway=true, then there is no service ticket generated. So the second parameter of the method responseBuilder.build() is empty. I renamed the test method to avoid any misunderstanding.", "author": "C4n4rd0", "createdAt": "2020-09-21T09:40:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyOTY2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyNTU5Nw==", "url": "https://github.com/apereo/cas/pull/4936#discussion_r491925597", "bodyText": "There is nothing in your test about gateway=true. You need to have two tests; one with and one without that parameter.", "author": "mmoayyed", "createdAt": "2020-09-21T10:04:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyOTY2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE3MDQwNQ==", "url": "https://github.com/apereo/cas/pull/4936#discussion_r494170405", "bodyText": "Just to be sure that there is no misunderstanding, let's focus on these lines:\nTokenWebApplicationServiceResponseBuilder:\nif (!tokenAsResponse) { LOGGER.debug(\"Registered service [{}] is not configured to issue JWTs for service tickets. \" + \"Make sure the service property [{}] is defined and is set to true\", registeredService, RegisteredServiceProperties.TOKEN_AS_SERVICE_TICKET.getPropertyName()); return super.buildInternal(service, parameters); }\nTokenWebApplicationServiceResponseBuilderTests:\nresponseBuilder.build(CoreAuthenticationTestUtils.getWebApplicationService(\"jwtservice\"), \"ST-123456\",CoreAuthenticationTestUtils.getAuthentication());\nScenario 1: The service is not configured to send the  service ticket as a JWT and there is no SSO session (no TGT, no Service ticket), gateway=false. Then:\nThe call to the responseBuilder looks like something like this: responseBuilder.build(CoreAuthenticationTestUtils.getWebApplicationService(\"jwtservice\"), \"\",CoreAuthenticationTestUtils.getAuthentication()); because there is no service ticket.\nAnd as tokenAsResponse=false => execute super.buildInternal(service, parameters)\nScenario 2: The service is configured to send the  service ticket as a JWT and there is a SSO session with a TGT and a service ticket, gateway=false. Then:\nThe call to the responseBuilder looks like something like that:\nresponseBuilder.build(CoreAuthenticationTestUtils.getWebApplicationService(\"jwtservice\"), \"ST-123456\", CoreAuthenticationTestUtils.getAuthentication()); because there is a service ticket.\nAnd as tokenAsResponse=true=> let's generate the JWT from the service ticket.\nScenario 3: The service is configured to send the  service ticket as a JWT and there is a SSO session with a TGT and a service ticket, gateway=true. Then:\nThe call to the responseBuilder looks like something like that:\nresponseBuilder.build(CoreAuthenticationTestUtils.getWebApplicationService(\"jwtservice\"), \"ST-123456\", CoreAuthenticationTestUtils.getAuthentication()); because there is a service ticket.\nAnd as tokenAsResponse=true=> let's generate the JWT from the service ticket.\nScenario 4: The service is configured to send the  service ticket as a JWT and there is no SSO session(no TGT, no Service ticket), gateway=true. Then:\nThe call to the responseBuilder looks like something like that:\nresponseBuilder.build(CoreAuthenticationTestUtils.getWebApplicationService(\"jwtservice\"), \"\", CoreAuthenticationTestUtils.getAuthentication()); because there is no service ticket.\nAnd as tokenAsResponse=true=> CAS tries to generate the JWT from the service ticket. But there is no service ticket so it ends with an exception.\nThat's why the parameter gateway is not there. And that's why I renamed to unit test. It's not really related to the parameter gateway. It's related to the fact that there might be no service ticket.", "author": "C4n4rd0", "createdAt": "2020-09-24T09:27:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyOTY2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "3be9a1b7e0b915c4cc288b2489fe6fbe294725f0", "chunk": "diff --git a/support/cas-server-support-token-tickets/src/test/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilderTests.java b/support/cas-server-support-token-tickets/src/test/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilderTests.java\nindex 760c78c6ac..0d0765860d 100644\n--- a/support/cas-server-support-token-tickets/src/test/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilderTests.java\n+++ b/support/cas-server-support-token-tickets/src/test/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilderTests.java\n\n@@ -142,7 +142,7 @@ public class TokenWebApplicationServiceResponseBuilderTests {\n     }\n     \n     @Test\n-    public void verifyTokenBuilderWhenGatewayIsTrue() throws Exception {\n+    public void verifyTokenBuilderWithoutServiceTicket() throws Exception {\n         val data = \"yes\\ncasuser\";\n         try (val webServer = new MockWebServer(8281,\n             new ByteArrayResource(data.getBytes(StandardCharsets.UTF_8), \"REST Output\"), MediaType.APPLICATION_JSON_VALUE)) {\n"}}, {"oid": "e47411fd4a3070ba368d2fa286e6ff48896c19ee", "url": "https://github.com/apereo/cas/commit/e47411fd4a3070ba368d2fa286e6ff48896c19ee", "message": "Fix reviews remarks", "committedDate": "2020-09-18T12:42:44Z", "type": "commit"}, {"oid": "3be9a1b7e0b915c4cc288b2489fe6fbe294725f0", "url": "https://github.com/apereo/cas/commit/3be9a1b7e0b915c4cc288b2489fe6fbe294725f0", "message": "Fix review remarks", "committedDate": "2020-09-18T12:44:18Z", "type": "commit"}, {"oid": "bf68437af4eb9fc0fd7bd14618046cd8eb01db30", "url": "https://github.com/apereo/cas/commit/bf68437af4eb9fc0fd7bd14618046cd8eb01db30", "message": "Fix check style issue", "committedDate": "2020-09-18T15:26:32Z", "type": "commit"}, {"oid": "3721a3be1961e9af16e2f8cbe9ef5570c5ba604e", "url": "https://github.com/apereo/cas/commit/3721a3be1961e9af16e2f8cbe9ef5570c5ba604e", "message": "Fix checkstyle issue", "committedDate": "2020-09-20T13:32:18Z", "type": "commit"}, {"oid": "4d3db61eb5f2bed2a720d49315f1a62bc9a8fe57", "url": "https://github.com/apereo/cas/commit/4d3db61eb5f2bed2a720d49315f1a62bc9a8fe57", "message": "Fix checkstyle issue", "committedDate": "2020-09-21T07:51:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyNTc3MQ==", "url": "https://github.com/apereo/cas/pull/4936#discussion_r491925771", "bodyText": "Space before and after =", "author": "mmoayyed", "createdAt": "2020-09-21T10:04:36Z", "path": "support/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java", "diffHunk": "@@ -40,11 +39,15 @@ protected WebApplicationService buildInternal(final WebApplicationService servic\n         val registeredService = this.servicesManager.findServiceBy(service);\n         RegisteredServiceAccessStrategyUtils.ensureServiceAccessIsAllowed(service, registeredService);\n         val tokenAsResponse = RegisteredServiceProperty.RegisteredServiceProperties.TOKEN_AS_SERVICE_TICKET.isAssignedTo(registeredService);\n+        val ticketIdAvailable=isTicketIdAvailable(parameters);", "originalCommit": "4d3db61eb5f2bed2a720d49315f1a62bc9a8fe57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwNDA4Mg==", "url": "https://github.com/apereo/cas/pull/4936#discussion_r494304082", "bodyText": "Done for the spaces around the '='.\nFor everything else, you're right. And in fact, I think that it's not really related to the parameter gateway. The main concern, here, is that \"Is there a service ticket or not?\". If there is a service ticket, then we can generate a service ticket as a JWT. If not, let's apply the default behaviour.  So I left only 2 unit tests in the class: the original one which test the behaviour with a service ticket and the one I added which test the behaviour without a service ticket.", "author": "C4n4rd0", "createdAt": "2020-09-24T13:11:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyNTc3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e4a2be007b25742f87650525d5c2b3322c899a64", "chunk": "diff --git a/support/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java b/support/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java\nindex 4ae342014f..a5cbbe952c 100644\n--- a/support/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java\n+++ b/support/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java\n\n@@ -39,7 +39,7 @@ public class TokenWebApplicationServiceResponseBuilder extends WebApplicationSer\n         val registeredService = this.servicesManager.findServiceBy(service);\n         RegisteredServiceAccessStrategyUtils.ensureServiceAccessIsAllowed(service, registeredService);\n         val tokenAsResponse = RegisteredServiceProperty.RegisteredServiceProperties.TOKEN_AS_SERVICE_TICKET.isAssignedTo(registeredService);\n-        val ticketIdAvailable=isTicketIdAvailable(parameters);\n+        val ticketIdAvailable = isTicketIdAvailable(parameters);\n \n         if (!tokenAsResponse || !ticketIdAvailable) {\n             if (ticketIdAvailable) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyNjY1NQ==", "url": "https://github.com/apereo/cas/pull/4936#discussion_r491926655", "bodyText": "Don't think the log statement here makes sense.", "author": "mmoayyed", "createdAt": "2020-09-21T10:06:09Z", "path": "support/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java", "diffHunk": "@@ -40,11 +39,15 @@ protected WebApplicationService buildInternal(final WebApplicationService servic\n         val registeredService = this.servicesManager.findServiceBy(service);\n         RegisteredServiceAccessStrategyUtils.ensureServiceAccessIsAllowed(service, registeredService);\n         val tokenAsResponse = RegisteredServiceProperty.RegisteredServiceProperties.TOKEN_AS_SERVICE_TICKET.isAssignedTo(registeredService);\n+        val ticketIdAvailable=isTicketIdAvailable(parameters);\n \n-        if (!tokenAsResponse) {\n-            LOGGER.debug(\"Registered service [{}] is not configured to issue JWTs for service tickets. \"\n-                    + \"Make sure the service property [{}] is defined and is set to true\", registeredService,\n-                RegisteredServiceProperties.TOKEN_AS_SERVICE_TICKET.getPropertyName());\n+        if (!tokenAsResponse || !ticketIdAvailable) {\n+            if (ticketIdAvailable) {", "originalCommit": "4d3db61eb5f2bed2a720d49315f1a62bc9a8fe57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxMDc2MQ==", "url": "https://github.com/apereo/cas/pull/4936#discussion_r494310761", "bodyText": "Actually, this log statement is on the master branch. It display the message in debug mode when a service is not configured to send the service ticket as a JWT. So I put it in a condition to fit exactly the previous behaviour which is to be displayed if there is a service ticket and if the service is not configured to send the service ticket as a JWT. Moreover, this message is not relevant if there is no service ticket.", "author": "C4n4rd0", "createdAt": "2020-09-24T13:20:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyNjY1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e4a2be007b25742f87650525d5c2b3322c899a64", "chunk": "diff --git a/support/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java b/support/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java\nindex 4ae342014f..a5cbbe952c 100644\n--- a/support/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java\n+++ b/support/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java\n\n@@ -39,7 +39,7 @@ public class TokenWebApplicationServiceResponseBuilder extends WebApplicationSer\n         val registeredService = this.servicesManager.findServiceBy(service);\n         RegisteredServiceAccessStrategyUtils.ensureServiceAccessIsAllowed(service, registeredService);\n         val tokenAsResponse = RegisteredServiceProperty.RegisteredServiceProperties.TOKEN_AS_SERVICE_TICKET.isAssignedTo(registeredService);\n-        val ticketIdAvailable=isTicketIdAvailable(parameters);\n+        val ticketIdAvailable = isTicketIdAvailable(parameters);\n \n         if (!tokenAsResponse || !ticketIdAvailable) {\n             if (ticketIdAvailable) {\n"}}, {"oid": "e4a2be007b25742f87650525d5c2b3322c899a64", "url": "https://github.com/apereo/cas/commit/e4a2be007b25742f87650525d5c2b3322c899a64", "message": "Fix review comment", "committedDate": "2020-09-24T13:04:31Z", "type": "commit"}, {"oid": "c2a94b8ca78538f05db9894a673422b52ee5c511", "url": "https://github.com/apereo/cas/commit/c2a94b8ca78538f05db9894a673422b52ee5c511", "message": "Fix check style issue", "committedDate": "2020-09-24T14:29:03Z", "type": "commit"}, {"oid": "f368237a44beb56e083680e99b7b6f3207cc155f", "url": "https://github.com/apereo/cas/commit/f368237a44beb56e083680e99b7b6f3207cc155f", "message": "Fix check style issue", "committedDate": "2020-09-24T14:29:21Z", "type": "commit"}]}