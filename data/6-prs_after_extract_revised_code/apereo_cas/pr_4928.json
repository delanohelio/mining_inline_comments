{"pr_number": 4928, "pr_title": "Log4j config update", "pr_createdAt": "2020-08-19T02:27:09Z", "pr_url": "https://github.com/apereo/cas/pull/4928", "timeline": [{"oid": "8cbd468c77eabdda5533b4012a5965eddf6ae8da", "url": "https://github.com/apereo/cas/commit/8cbd468c77eabdda5533b4012a5965eddf6ae8da", "message": "move stacktraces to own logfile, make optional\nmake stacktraces optional on console and in regular file, default off\n\nalso make async configurable via system property", "committedDate": "2020-09-20T21:34:14Z", "type": "commit"}, {"oid": "b4d06c3858f07989c3b6db6681ec482da275eeed", "url": "https://github.com/apereo/cas/commit/b4d06c3858f07989c3b6db6681ec482da275eeed", "message": "turn off include location by default b/c bad for performance\nespecially bad for async logging \"30-100 times slower\"\n\nalso config not using location info:\n%C or %class\n%F or %file\n%l or %location\n%L or %line\n%M or %method", "committedDate": "2020-09-20T21:34:15Z", "type": "commit"}, {"oid": "c7a6e5ab28f356c985dab2c5fbea8d21bccf400a", "url": "https://github.com/apereo/cas/commit/c7a6e5ab28f356c985dab2c5fbea8d21bccf400a", "message": "update documentation", "committedDate": "2020-09-20T21:34:15Z", "type": "commit"}, {"oid": "1627fbf3709efffbcd1caf4307a9b426d8ae570a", "url": "https://github.com/apereo/cas/commit/1627fbf3709efffbcd1caf4307a9b426d8ae570a", "message": "Add ExceptionOnlyFilter", "committedDate": "2020-09-21T01:38:27Z", "type": "commit"}, {"oid": "1627fbf3709efffbcd1caf4307a9b426d8ae570a", "url": "https://github.com/apereo/cas/commit/1627fbf3709efffbcd1caf4307a9b426d8ae570a", "message": "Add ExceptionOnlyFilter", "committedDate": "2020-09-21T01:38:27Z", "type": "forcePushed"}, {"oid": "d44365cfcc1aa33eafb75a4e338b6c4efa855a84", "url": "https://github.com/apereo/cas/commit/d44365cfcc1aa33eafb75a4e338b6c4efa855a84", "message": "Merge remote-tracking branch 'origin/master' into stacktraces", "committedDate": "2020-09-26T20:09:49Z", "type": "commit"}, {"oid": "9ec2743128b74e9b7e4dfba354de3ae81fdd453e", "url": "https://github.com/apereo/cas/commit/9ec2743128b74e9b7e4dfba354de3ae81fdd453e", "message": "update logging - make async the default", "committedDate": "2020-09-27T02:06:16Z", "type": "commit"}, {"oid": "16245d8c97cd0e76371aad2ca1ee24d052921550", "url": "https://github.com/apereo/cas/commit/16245d8c97cd0e76371aad2ca1ee24d052921550", "message": "Add test suite to run all tests in logging api", "committedDate": "2020-09-28T02:21:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMDQ5NQ==", "url": "https://github.com/apereo/cas/pull/4928#discussion_r497520495", "bodyText": "Seems like this can be removed, given the default impl in the parent does the same thing, and does avoid a hard-coded name.", "author": "mmoayyed", "createdAt": "2020-09-30T13:44:13Z", "path": "core/cas-server-core-logging-api/src/main/java/org/apereo/cas/logging/ExceptionOnlyFilter.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.apereo.cas.logging;\n+\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.Marker;\n+import org.apache.logging.log4j.core.Filter;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.Logger;\n+import org.apache.logging.log4j.core.config.Node;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.config.plugins.PluginBuilderFactory;\n+import org.apache.logging.log4j.core.filter.AbstractFilter;\n+import org.apache.logging.log4j.message.Message;\n+\n+/**\n+ * Deny any messages without an exception (for stack trace). Neutral on messages with stack trace to allow other filters.\n+ * @author Hal Deadman\n+ * @since 6.3\n+ */\n+@Plugin(name = \"ExceptionOnlyFilter\", category = Node.CATEGORY, elementType = Filter.ELEMENT_TYPE, printObject = true)\n+public class ExceptionOnlyFilter extends AbstractFilter {\n+\n+    protected ExceptionOnlyFilter() {\n+        super(Result.ACCEPT, Result.DENY);\n+    }\n+\n+    @Override\n+    public Result filter(final LogEvent event) {\n+        if (event.getThrown() != null) {\n+            return getOnMatch();\n+        }\n+        return getOnMismatch();\n+    }\n+\n+    @Override\n+    public Result filter(final Logger logger, final Level level, final Marker marker, final Message msg,\n+                         final Throwable t) {\n+        return t != null ? getOnMatch() : getOnMismatch();\n+    }\n+\n+    @Override\n+    public Result filter(final Logger logger, final Level level, final Marker marker, final Object msg,\n+                         final Throwable t) {\n+        return t != null ? getOnMatch() : getOnMismatch();\n+    }\n+\n+    @Override\n+    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg,\n+                         final Object... params) {\n+        if (params != null && params.length > 0 && params[params.length - 1] instanceof Throwable) {\n+            return getOnMatch();\n+        }\n+        return getOnMismatch();\n+    }\n+\n+    @Override\n+    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg,\n+                         final Object p0) {\n+        return super.filter(logger, level, marker, msg, p0);\n+    }\n+\n+    @Override\n+    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n+                         final Object p1) {\n+        return super.filter(logger, level, marker, msg, p0, p1);\n+    }\n+\n+    @Override\n+    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n+                         final Object p1, final Object p2) {\n+        return super.filter(logger, level, marker, msg, p0, p1, p2);\n+    }\n+\n+    @Override\n+    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n+                         final Object p1, final Object p2, final Object p3) {\n+        return super.filter(logger, level, marker, msg, p0, p1, p2, p3);\n+    }\n+\n+    @Override\n+    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n+                         final Object p1, final Object p2, final Object p3, final Object p4) {\n+        return super.filter(logger, level, marker, msg, p0, p1, p2, p3, p4);\n+    }\n+\n+    @Override\n+    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n+                         final Object p1, final Object p2, final Object p3, final Object p4, final Object p5) {\n+        return super.filter(logger, level, marker, msg, p0, p1, p2, p3, p4, p5);\n+    }\n+\n+    @Override\n+    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n+                         final Object p1, final Object p2, final Object p3, final Object p4, final Object p5,\n+                         final Object p6) {\n+        return super.filter(logger, level, marker, msg, p0, p1, p2, p3, p4, p5, p6);\n+    }\n+\n+    @Override\n+    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n+                         final Object p1, final Object p2, final Object p3, final Object p4, final Object p5,\n+                         final Object p6, final Object p7) {\n+        return filter(logger, level, marker, msg, new Object[] {p0, p1, p2, p3, p4, p5, p6, p7});\n+    }\n+\n+    @Override\n+    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n+                         final Object p1, final Object p2, final Object p3, final Object p4, final Object p5,\n+                         final Object p6, final Object p7, final Object p8) {\n+        return super.filter(logger, level, marker, msg, p0, p1, p2, p3, p4, p5, p6, p7, p8);\n+    }\n+\n+    @Override\n+    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n+                         final Object p1, final Object p2, final Object p3, final Object p4, final Object p5,\n+                         final Object p6, final Object p7, final Object p8, final Object p9) {\n+        return super.filter(logger, level, marker, msg, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"ExceptionOnlyFilter\";\n+    }", "originalCommit": "16245d8c97cd0e76371aad2ca1ee24d052921550", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b6cb58d728d6a0fb85a8d4fb842a85db0081592", "chunk": "diff --git a/core/cas-server-core-logging-api/src/main/java/org/apereo/cas/logging/ExceptionOnlyFilter.java b/core/cas-server-core-logging-api/src/main/java/org/apereo/cas/logging/ExceptionOnlyFilter.java\nindex 931b5b1af7..8b0e7400f1 100644\n--- a/core/cas-server-core-logging-api/src/main/java/org/apereo/cas/logging/ExceptionOnlyFilter.java\n+++ b/core/cas-server-core-logging-api/src/main/java/org/apereo/cas/logging/ExceptionOnlyFilter.java\n\n@@ -52,75 +52,6 @@ public class ExceptionOnlyFilter extends AbstractFilter {\n         return getOnMismatch();\n     }\n \n-    @Override\n-    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg,\n-                         final Object p0) {\n-        return super.filter(logger, level, marker, msg, p0);\n-    }\n-\n-    @Override\n-    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n-                         final Object p1) {\n-        return super.filter(logger, level, marker, msg, p0, p1);\n-    }\n-\n-    @Override\n-    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n-                         final Object p1, final Object p2) {\n-        return super.filter(logger, level, marker, msg, p0, p1, p2);\n-    }\n-\n-    @Override\n-    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n-                         final Object p1, final Object p2, final Object p3) {\n-        return super.filter(logger, level, marker, msg, p0, p1, p2, p3);\n-    }\n-\n-    @Override\n-    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n-                         final Object p1, final Object p2, final Object p3, final Object p4) {\n-        return super.filter(logger, level, marker, msg, p0, p1, p2, p3, p4);\n-    }\n-\n-    @Override\n-    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n-                         final Object p1, final Object p2, final Object p3, final Object p4, final Object p5) {\n-        return super.filter(logger, level, marker, msg, p0, p1, p2, p3, p4, p5);\n-    }\n-\n-    @Override\n-    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n-                         final Object p1, final Object p2, final Object p3, final Object p4, final Object p5,\n-                         final Object p6) {\n-        return super.filter(logger, level, marker, msg, p0, p1, p2, p3, p4, p5, p6);\n-    }\n-\n-    @Override\n-    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n-                         final Object p1, final Object p2, final Object p3, final Object p4, final Object p5,\n-                         final Object p6, final Object p7) {\n-        return filter(logger, level, marker, msg, new Object[] {p0, p1, p2, p3, p4, p5, p6, p7});\n-    }\n-\n-    @Override\n-    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n-                         final Object p1, final Object p2, final Object p3, final Object p4, final Object p5,\n-                         final Object p6, final Object p7, final Object p8) {\n-        return super.filter(logger, level, marker, msg, p0, p1, p2, p3, p4, p5, p6, p7, p8);\n-    }\n-\n-    @Override\n-    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n-                         final Object p1, final Object p2, final Object p3, final Object p4, final Object p5,\n-                         final Object p6, final Object p7, final Object p8, final Object p9) {\n-        return super.filter(logger, level, marker, msg, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"ExceptionOnlyFilter\";\n-    }\n-\n     @PluginBuilderFactory\n     public static Builder newBuilder() {\n         return new Builder();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMjA1Mg==", "url": "https://github.com/apereo/cas/pull/4928#discussion_r497522052", "bodyText": "Looks to me like all such methods that do call the super can be removed.\nYou should only override and keep the following, as you do now:\npublic Result filter(LogEvent event) {}\n\npublic Result filter(Logger logger, Level level, Marker marker, Message msg, Throwable t) {  }\n\npublic Result filter(Logger logger, Level level, Marker marker, Object msg, Throwable t) { }\n\npublic Result filter(Logger logger, Level level, Marker marker, String msg, Object... params) { }", "author": "mmoayyed", "createdAt": "2020-09-30T13:46:15Z", "path": "core/cas-server-core-logging-api/src/main/java/org/apereo/cas/logging/ExceptionOnlyFilter.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.apereo.cas.logging;\n+\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.Marker;\n+import org.apache.logging.log4j.core.Filter;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.Logger;\n+import org.apache.logging.log4j.core.config.Node;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.config.plugins.PluginBuilderFactory;\n+import org.apache.logging.log4j.core.filter.AbstractFilter;\n+import org.apache.logging.log4j.message.Message;\n+\n+/**\n+ * Deny any messages without an exception (for stack trace). Neutral on messages with stack trace to allow other filters.\n+ * @author Hal Deadman\n+ * @since 6.3\n+ */\n+@Plugin(name = \"ExceptionOnlyFilter\", category = Node.CATEGORY, elementType = Filter.ELEMENT_TYPE, printObject = true)\n+public class ExceptionOnlyFilter extends AbstractFilter {\n+\n+    protected ExceptionOnlyFilter() {\n+        super(Result.ACCEPT, Result.DENY);\n+    }\n+\n+    @Override\n+    public Result filter(final LogEvent event) {\n+        if (event.getThrown() != null) {\n+            return getOnMatch();\n+        }\n+        return getOnMismatch();\n+    }\n+\n+    @Override\n+    public Result filter(final Logger logger, final Level level, final Marker marker, final Message msg,\n+                         final Throwable t) {\n+        return t != null ? getOnMatch() : getOnMismatch();\n+    }\n+\n+    @Override\n+    public Result filter(final Logger logger, final Level level, final Marker marker, final Object msg,\n+                         final Throwable t) {\n+        return t != null ? getOnMatch() : getOnMismatch();\n+    }\n+\n+    @Override\n+    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg,\n+                         final Object... params) {\n+        if (params != null && params.length > 0 && params[params.length - 1] instanceof Throwable) {\n+            return getOnMatch();\n+        }\n+        return getOnMismatch();\n+    }\n+\n+    @Override\n+    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg,", "originalCommit": "16245d8c97cd0e76371aad2ca1ee24d052921550", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b6cb58d728d6a0fb85a8d4fb842a85db0081592", "chunk": "diff --git a/core/cas-server-core-logging-api/src/main/java/org/apereo/cas/logging/ExceptionOnlyFilter.java b/core/cas-server-core-logging-api/src/main/java/org/apereo/cas/logging/ExceptionOnlyFilter.java\nindex 931b5b1af7..8b0e7400f1 100644\n--- a/core/cas-server-core-logging-api/src/main/java/org/apereo/cas/logging/ExceptionOnlyFilter.java\n+++ b/core/cas-server-core-logging-api/src/main/java/org/apereo/cas/logging/ExceptionOnlyFilter.java\n\n@@ -52,75 +52,6 @@ public class ExceptionOnlyFilter extends AbstractFilter {\n         return getOnMismatch();\n     }\n \n-    @Override\n-    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg,\n-                         final Object p0) {\n-        return super.filter(logger, level, marker, msg, p0);\n-    }\n-\n-    @Override\n-    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n-                         final Object p1) {\n-        return super.filter(logger, level, marker, msg, p0, p1);\n-    }\n-\n-    @Override\n-    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n-                         final Object p1, final Object p2) {\n-        return super.filter(logger, level, marker, msg, p0, p1, p2);\n-    }\n-\n-    @Override\n-    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n-                         final Object p1, final Object p2, final Object p3) {\n-        return super.filter(logger, level, marker, msg, p0, p1, p2, p3);\n-    }\n-\n-    @Override\n-    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n-                         final Object p1, final Object p2, final Object p3, final Object p4) {\n-        return super.filter(logger, level, marker, msg, p0, p1, p2, p3, p4);\n-    }\n-\n-    @Override\n-    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n-                         final Object p1, final Object p2, final Object p3, final Object p4, final Object p5) {\n-        return super.filter(logger, level, marker, msg, p0, p1, p2, p3, p4, p5);\n-    }\n-\n-    @Override\n-    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n-                         final Object p1, final Object p2, final Object p3, final Object p4, final Object p5,\n-                         final Object p6) {\n-        return super.filter(logger, level, marker, msg, p0, p1, p2, p3, p4, p5, p6);\n-    }\n-\n-    @Override\n-    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n-                         final Object p1, final Object p2, final Object p3, final Object p4, final Object p5,\n-                         final Object p6, final Object p7) {\n-        return filter(logger, level, marker, msg, new Object[] {p0, p1, p2, p3, p4, p5, p6, p7});\n-    }\n-\n-    @Override\n-    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n-                         final Object p1, final Object p2, final Object p3, final Object p4, final Object p5,\n-                         final Object p6, final Object p7, final Object p8) {\n-        return super.filter(logger, level, marker, msg, p0, p1, p2, p3, p4, p5, p6, p7, p8);\n-    }\n-\n-    @Override\n-    public Result filter(final Logger logger, final Level level, final Marker marker, final String msg, final Object p0,\n-                         final Object p1, final Object p2, final Object p3, final Object p4, final Object p5,\n-                         final Object p6, final Object p7, final Object p8, final Object p9) {\n-        return super.filter(logger, level, marker, msg, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"ExceptionOnlyFilter\";\n-    }\n-\n     @PluginBuilderFactory\n     public static Builder newBuilder() {\n         return new Builder();\n"}}, {"oid": "5b6cb58d728d6a0fb85a8d4fb842a85db0081592", "url": "https://github.com/apereo/cas/commit/5b6cb58d728d6a0fb85a8d4fb842a85db0081592", "message": "remove unneeded methods", "committedDate": "2020-10-01T02:40:27Z", "type": "commit"}, {"oid": "0a31c730f35cf7c9f7fe7f6bf4d4e1d83eca8f03", "url": "https://github.com/apereo/cas/commit/0a31c730f35cf7c9f7fe7f6bf4d4e1d83eca8f03", "message": "Add to logging.md", "committedDate": "2020-10-02T03:20:43Z", "type": "commit"}]}