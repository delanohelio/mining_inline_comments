{"pr_number": 4767, "pr_title": "OIDC SLO support", "pr_createdAt": "2020-03-23T10:51:20Z", "pr_url": "https://github.com/apereo/cas/pull/4767", "timeline": [{"oid": "331eea32f4c4445021a29d01b94f15eadc2ab7ac", "url": "https://github.com/apereo/cas/commit/331eea32f4c4445021a29d01b94f15eadc2ab7ac", "message": "OIDC SLO support", "committedDate": "2020-03-23T10:39:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NTg5Mw==", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396945893", "bodyText": "This should be unnecessary. SingleLogoutServiceMessageHandler are or can be ordered. The default runs last. So if all other handlers fail to support the service, this one should run by default automatically, and there is no need to check for service types as such, because other handlers should be given more priority with a lower order value.\nAlso, comparing types by String will never scale and will be unmaintainable. (This is already missing a service type, for example)", "author": "mmoayyed", "createdAt": "2020-03-24T07:27:22Z", "path": "core/cas-server-core-logout-api/src/main/java/org/apereo/cas/logout/slo/DefaultSingleLogoutServiceMessageHandler.java", "diffHunk": "@@ -23,4 +27,21 @@ public DefaultSingleLogoutServiceMessageHandler(final HttpClient httpClient,\n         super(httpClient, logoutMessageBuilder, servicesManager, singleLogoutServiceLogoutUrlBuilder,\n             asynchronous, authenticationRequestServiceSelectionStrategies);\n     }\n+\n+    /**\n+     * The default handler only applies on the CAS protocol services.\n+     * For the SAML and OIDC protocols, specific handlers exist.\n+     * For the OAuth protocol, no logout process is handled.\n+     *\n+     * The check of the service type is made by the class name not to add support-* dependencies.\n+     *\n+     * @param singleLogoutService the single logout service\n+     * @param registeredService   the registered service\n+     * @return whether the handler applies\n+     */\n+    @Override\n+    protected boolean supportsInternal(final WebApplicationService singleLogoutService, final RegisteredService registeredService) {\n+        val name = registeredService.getClass().getSimpleName();\n+        return !\"SamlRegisteredService\".equals(name) && !\"OidcRegisteredService\".equals(name) && !\"OAuthRegisteredService\".equals(name);", "originalCommit": "331eea32f4c4445021a29d01b94f15eadc2ab7ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0Nzc1Mg==", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396947752", "bodyText": "In general the order of execution is:\n\nProtocol-specific ones, such as SAML2, OIDC, OAUTH, etc\n1.1 Each handler checks for a service type and passes it onto the next, if it doesn't support the type\nDefault runs as a catch-all.", "author": "mmoayyed", "createdAt": "2020-03-24T07:31:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NTg5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0OTkzOQ==", "url": "https://github.com/apereo/cas/pull/4767#discussion_r397249939", "bodyText": "Yes, it makes sense. It will be much better.", "author": "leleuj", "createdAt": "2020-03-24T15:37:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NTg5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f6c4d503e1753276bafc940c214fba14747d4f77", "chunk": "diff --git a/core/cas-server-core-logout-api/src/main/java/org/apereo/cas/logout/slo/DefaultSingleLogoutServiceMessageHandler.java b/core/cas-server-core-logout-api/src/main/java/org/apereo/cas/logout/slo/DefaultSingleLogoutServiceMessageHandler.java\nindex 18c46762a3..d3de553d29 100644\n--- a/core/cas-server-core-logout-api/src/main/java/org/apereo/cas/logout/slo/DefaultSingleLogoutServiceMessageHandler.java\n+++ b/core/cas-server-core-logout-api/src/main/java/org/apereo/cas/logout/slo/DefaultSingleLogoutServiceMessageHandler.java\n\n@@ -27,21 +23,4 @@ public class DefaultSingleLogoutServiceMessageHandler extends BaseSingleLogoutSe\n         super(httpClient, logoutMessageBuilder, servicesManager, singleLogoutServiceLogoutUrlBuilder,\n             asynchronous, authenticationRequestServiceSelectionStrategies);\n     }\n-\n-    /**\n-     * The default handler only applies on the CAS protocol services.\n-     * For the SAML and OIDC protocols, specific handlers exist.\n-     * For the OAuth protocol, no logout process is handled.\n-     *\n-     * The check of the service type is made by the class name not to add support-* dependencies.\n-     *\n-     * @param singleLogoutService the single logout service\n-     * @param registeredService   the registered service\n-     * @return whether the handler applies\n-     */\n-    @Override\n-    protected boolean supportsInternal(final WebApplicationService singleLogoutService, final RegisteredService registeredService) {\n-        val name = registeredService.getClass().getSimpleName();\n-        return !\"SamlRegisteredService\".equals(name) && !\"OidcRegisteredService\".equals(name) && !\"OAuthRegisteredService\".equals(name);\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjIyMg==", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396946222", "bodyText": "All such settings should be controllable via CAS settings, in scenarios where a deployment would want to forcefully turn off logout.\nFunctionality related to these settings should also turn itself on/off based on the value.", "author": "mmoayyed", "createdAt": "2020-03-24T07:28:04Z", "path": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/discovery/OidcServerDiscoverySettings.java", "diffHunk": "@@ -119,4 +119,24 @@ public String getIntrospectionEndpoint() {\n     public String getRevocationEndpoint() {\n         return this.serverPrefix.concat('/' + OidcConstants.BASE_OIDC_URL + '/' + OidcConstants.REVOCATION_URL);\n     }\n+\n+    @JsonProperty(\"backchannel_logout_supported\")\n+    public boolean getBackchannelLogoutSupported() {\n+        return true;\n+    }\n+\n+    @JsonProperty(\"backchannel_logout_session_supported\")\n+    public boolean getBackchannelLogoutSessionSupported() {\n+        return true;\n+    }\n+\n+    @JsonProperty(\"frontchannel_logout_supported\")\n+    public boolean getFrontchannelLogoutSupported() {\n+        return true;\n+    }\n+\n+    @JsonProperty(\"frontchannel_logout_session_supported\")\n+    public boolean getFrontchannelLogoutSessionSupported() {\n+        return true;\n+    }", "originalCommit": "331eea32f4c4445021a29d01b94f15eadc2ab7ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ5MjEzMg==", "url": "https://github.com/apereo/cas/pull/4767#discussion_r398492132", "bodyText": "OK. I will do that. By default, I'll keep the logout enabled.", "author": "leleuj", "createdAt": "2020-03-26T11:14:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjIyMg=="}], "type": "inlineReview", "revised_code": {"commit": "f6c4d503e1753276bafc940c214fba14747d4f77", "chunk": "diff --git a/support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/discovery/OidcServerDiscoverySettings.java b/support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/discovery/OidcServerDiscoverySettings.java\nindex 0a187b31c6..aeed2bd779 100644\n--- a/support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/discovery/OidcServerDiscoverySettings.java\n+++ b/support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/discovery/OidcServerDiscoverySettings.java\n\n@@ -122,21 +122,21 @@ public class OidcServerDiscoverySettings {\n \n     @JsonProperty(\"backchannel_logout_supported\")\n     public boolean getBackchannelLogoutSupported() {\n-        return true;\n+        return this.casProperties.getAuthn().getOidc().getLogout().isBackchannelLogoutSupported();\n     }\n \n     @JsonProperty(\"backchannel_logout_session_supported\")\n     public boolean getBackchannelLogoutSessionSupported() {\n-        return true;\n+        return getBackchannelLogoutSupported();\n     }\n \n     @JsonProperty(\"frontchannel_logout_supported\")\n     public boolean getFrontchannelLogoutSupported() {\n-        return true;\n+        return this.casProperties.getAuthn().getOidc().getLogout().isFrontchannelLogoutSupported();\n     }\n \n     @JsonProperty(\"frontchannel_logout_session_supported\")\n     public boolean getFrontchannelLogoutSessionSupported() {\n-        return true;\n+        return getFrontchannelLogoutSupported();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjQxMQ==", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396946411", "bodyText": "Is there a need for an exp claim, and do we also need to account for time skew?", "author": "mmoayyed", "createdAt": "2020-03-24T07:28:33Z", "path": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.apereo.cas.oidc.slo;\n+\n+import org.apereo.cas.logout.slo.SingleLogoutMessage;\n+import org.apereo.cas.logout.slo.SingleLogoutMessageCreator;\n+import org.apereo.cas.logout.slo.SingleLogoutRequest;\n+import org.apereo.cas.oidc.OidcConstants;\n+import org.apereo.cas.services.OidcRegisteredService;\n+import org.apereo.cas.services.RegisteredServiceLogoutType;\n+import org.apereo.cas.support.oauth.web.endpoints.OAuth20ConfigurationContext;\n+import org.apereo.cas.util.DigestUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.jose4j.jwt.JwtClaims;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+/**\n+ * The message creator for the OIDC protocol.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class OidcSingleLogoutMessageCreator implements SingleLogoutMessageCreator {\n+\n+    private final OAuth20ConfigurationContext configurationContext;\n+\n+    @Override\n+    public SingleLogoutMessage create(final SingleLogoutRequest request) {\n+        val builder = SingleLogoutMessage.builder();\n+        if (request.getLogoutType() == RegisteredServiceLogoutType.BACK_CHANNEL) {\n+            LOGGER.trace(\"Building logout token for [{}]\", request.getRegisteredService());\n+\n+            val claims = buildJwtClaims(request);\n+            val logoutToken = configurationContext.getIdTokenSigningAndEncryptionService()\n+                    .encode((OidcRegisteredService) request.getRegisteredService(), claims);\n+            return builder.payload(logoutToken).build();\n+        }\n+        return builder.payload(StringUtils.EMPTY).build();\n+    }\n+\n+    protected JwtClaims buildJwtClaims(final SingleLogoutRequest request) {\n+\n+        val oidc = configurationContext.getCasProperties().getAuthn().getOidc();\n+\n+        val claims = new JwtClaims();\n+\n+        claims.setIssuer(oidc.getIssuer());\n+        claims.setSubject(request.getTicketGrantingTicket().getAuthentication().getPrincipal().getId());\n+        claims.setAudience(((OidcRegisteredService) request.getRegisteredService()).getClientId());\n+        claims.setIssuedAtToNow();", "originalCommit": "331eea32f4c4445021a29d01b94f15eadc2ab7ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ5MzYxOA==", "url": "https://github.com/apereo/cas/pull/4767#discussion_r398493618", "bodyText": "As far as I can read, the spec: https://openid.net/specs/openid-connect-backchannel-1_0.html#LogoutToken does not request an exp claim, nor a time skew. So I left that aside.", "author": "leleuj", "createdAt": "2020-03-26T11:16:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjQxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ5MzgzNw==", "url": "https://github.com/apereo/cas/pull/4767#discussion_r398493837", "bodyText": "But this is something which can be easily revisited.", "author": "leleuj", "createdAt": "2020-03-26T11:17:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjQxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "e915166e4371d8d592a5178b20dc047fd46f98bc", "chunk": "diff --git a/support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java b/support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java\nindex 9884900dea..ec2225a7d7 100644\n--- a/support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java\n+++ b/support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java\n\n@@ -56,7 +56,7 @@ public class OidcSingleLogoutMessageCreator implements SingleLogoutMessageCreato\n         claims.setIssuedAtToNow();\n         claims.setJwtId(UUID.randomUUID().toString());\n         val events = new HashMap<String, Object>();\n-        events.put(\"http://schemas.openid.net/event/backchannel-logout\", new HashMap());\n+        events.put(\"http://schemas.openid.net/event/backchannel-logout\", new HashMap<>());\n         claims.setClaim(\"events\", events);\n         claims.setClaim(OidcConstants.CLAIM_SESSIOND_ID, DigestUtils.sha(request.getTicketGrantingTicket().getId()));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjUzMg==", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396946532", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    events.put(\"http://schemas.openid.net/event/backchannel-logout\", new HashMap());\n          \n          \n            \n                    events.put(\"http://schemas.openid.net/event/backchannel-logout\", new HashMap<>());", "author": "mmoayyed", "createdAt": "2020-03-24T07:28:49Z", "path": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.apereo.cas.oidc.slo;\n+\n+import org.apereo.cas.logout.slo.SingleLogoutMessage;\n+import org.apereo.cas.logout.slo.SingleLogoutMessageCreator;\n+import org.apereo.cas.logout.slo.SingleLogoutRequest;\n+import org.apereo.cas.oidc.OidcConstants;\n+import org.apereo.cas.services.OidcRegisteredService;\n+import org.apereo.cas.services.RegisteredServiceLogoutType;\n+import org.apereo.cas.support.oauth.web.endpoints.OAuth20ConfigurationContext;\n+import org.apereo.cas.util.DigestUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.jose4j.jwt.JwtClaims;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+/**\n+ * The message creator for the OIDC protocol.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class OidcSingleLogoutMessageCreator implements SingleLogoutMessageCreator {\n+\n+    private final OAuth20ConfigurationContext configurationContext;\n+\n+    @Override\n+    public SingleLogoutMessage create(final SingleLogoutRequest request) {\n+        val builder = SingleLogoutMessage.builder();\n+        if (request.getLogoutType() == RegisteredServiceLogoutType.BACK_CHANNEL) {\n+            LOGGER.trace(\"Building logout token for [{}]\", request.getRegisteredService());\n+\n+            val claims = buildJwtClaims(request);\n+            val logoutToken = configurationContext.getIdTokenSigningAndEncryptionService()\n+                    .encode((OidcRegisteredService) request.getRegisteredService(), claims);\n+            return builder.payload(logoutToken).build();\n+        }\n+        return builder.payload(StringUtils.EMPTY).build();\n+    }\n+\n+    protected JwtClaims buildJwtClaims(final SingleLogoutRequest request) {\n+\n+        val oidc = configurationContext.getCasProperties().getAuthn().getOidc();\n+\n+        val claims = new JwtClaims();\n+\n+        claims.setIssuer(oidc.getIssuer());\n+        claims.setSubject(request.getTicketGrantingTicket().getAuthentication().getPrincipal().getId());\n+        claims.setAudience(((OidcRegisteredService) request.getRegisteredService()).getClientId());\n+        claims.setIssuedAtToNow();\n+        claims.setJwtId(UUID.randomUUID().toString());\n+        val events = new HashMap<String, Object>();\n+        events.put(\"http://schemas.openid.net/event/backchannel-logout\", new HashMap());", "originalCommit": "331eea32f4c4445021a29d01b94f15eadc2ab7ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e915166e4371d8d592a5178b20dc047fd46f98bc", "chunk": "diff --git a/support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java b/support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java\nindex 9884900dea..ec2225a7d7 100644\n--- a/support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java\n+++ b/support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java\n\n@@ -56,7 +56,7 @@ public class OidcSingleLogoutMessageCreator implements SingleLogoutMessageCreato\n         claims.setIssuedAtToNow();\n         claims.setJwtId(UUID.randomUUID().toString());\n         val events = new HashMap<String, Object>();\n-        events.put(\"http://schemas.openid.net/event/backchannel-logout\", new HashMap());\n+        events.put(\"http://schemas.openid.net/event/backchannel-logout\", new HashMap<>());\n         claims.setClaim(\"events\", events);\n         claims.setClaim(OidcConstants.CLAIM_SESSIOND_ID, DigestUtils.sha(request.getTicketGrantingTicket().getId()));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjY2NA==", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396946664", "bodyText": "Please add tests.", "author": "mmoayyed", "createdAt": "2020-03-24T07:29:11Z", "path": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.apereo.cas.oidc.slo;\n+\n+import org.apereo.cas.logout.slo.SingleLogoutMessage;\n+import org.apereo.cas.logout.slo.SingleLogoutMessageCreator;\n+import org.apereo.cas.logout.slo.SingleLogoutRequest;\n+import org.apereo.cas.oidc.OidcConstants;\n+import org.apereo.cas.services.OidcRegisteredService;\n+import org.apereo.cas.services.RegisteredServiceLogoutType;\n+import org.apereo.cas.support.oauth.web.endpoints.OAuth20ConfigurationContext;\n+import org.apereo.cas.util.DigestUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.jose4j.jwt.JwtClaims;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+/**\n+ * The message creator for the OIDC protocol.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class OidcSingleLogoutMessageCreator implements SingleLogoutMessageCreator {", "originalCommit": "331eea32f4c4445021a29d01b94f15eadc2ab7ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ5NDgwNw==", "url": "https://github.com/apereo/cas/pull/4767#discussion_r398494807", "bodyText": "Sure. But I was waiting for the feedbacks before writing the tests in case I needed to change everything.", "author": "leleuj", "createdAt": "2020-03-26T11:19:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjY2NA=="}], "type": "inlineReview", "revised_code": {"commit": "e915166e4371d8d592a5178b20dc047fd46f98bc", "chunk": "diff --git a/support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java b/support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java\nindex 9884900dea..ec2225a7d7 100644\n--- a/support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java\n+++ b/support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java\n\n@@ -56,7 +56,7 @@ public class OidcSingleLogoutMessageCreator implements SingleLogoutMessageCreato\n         claims.setIssuedAtToNow();\n         claims.setJwtId(UUID.randomUUID().toString());\n         val events = new HashMap<String, Object>();\n-        events.put(\"http://schemas.openid.net/event/backchannel-logout\", new HashMap());\n+        events.put(\"http://schemas.openid.net/event/backchannel-logout\", new HashMap<>());\n         claims.setClaim(\"events\", events);\n         claims.setClaim(OidcConstants.CLAIM_SESSIOND_ID, DigestUtils.sha(request.getTicketGrantingTicket().getId()));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjcwMQ==", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396946701", "bodyText": "Please add tests.", "author": "mmoayyed", "createdAt": "2020-03-24T07:29:17Z", "path": "support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutServiceMessageHandler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package org.apereo.cas.oidc.slo;\n+\n+import org.apereo.cas.authentication.AuthenticationServiceSelectionPlan;\n+import org.apereo.cas.authentication.principal.WebApplicationService;\n+import org.apereo.cas.logout.LogoutHttpMessage;\n+import org.apereo.cas.logout.slo.BaseSingleLogoutServiceMessageHandler;\n+import org.apereo.cas.logout.slo.SingleLogoutMessage;\n+import org.apereo.cas.logout.slo.SingleLogoutMessageCreator;\n+import org.apereo.cas.logout.slo.SingleLogoutRequest;\n+import org.apereo.cas.logout.slo.SingleLogoutServiceLogoutUrlBuilder;\n+import org.apereo.cas.logout.slo.SingleLogoutUrl;\n+import org.apereo.cas.oidc.OidcConstants;\n+import org.apereo.cas.services.OidcRegisteredService;\n+import org.apereo.cas.services.RegisteredService;\n+import org.apereo.cas.services.RegisteredServiceLogoutType;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.ticket.TicketGrantingTicket;\n+import org.apereo.cas.util.CollectionUtils;\n+import org.apereo.cas.util.DigestUtils;\n+import org.apereo.cas.util.HttpUtils;\n+import org.apereo.cas.util.http.HttpClient;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.http.HttpResponse;\n+import org.jose4j.jwt.ReservedClaimNames;\n+import org.pac4j.core.util.CommonHelper;\n+import org.springframework.http.HttpStatus;\n+\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The message handler for the OIDC protocol.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.2.0\n+ */\n+@Slf4j\n+public class OidcSingleLogoutServiceMessageHandler extends BaseSingleLogoutServiceMessageHandler {", "originalCommit": "331eea32f4c4445021a29d01b94f15eadc2ab7ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6c4d503e1753276bafc940c214fba14747d4f77", "chunk": "diff --git a/support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutServiceMessageHandler.java b/support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutServiceMessageHandler.java\nindex d1a7ebe391..d553c6e737 100644\n--- a/support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutServiceMessageHandler.java\n+++ b/support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutServiceMessageHandler.java\n\n@@ -59,6 +59,11 @@ public class OidcSingleLogoutServiceMessageHandler extends BaseSingleLogoutServi\n         return registeredService instanceof OidcRegisteredService;\n     }\n \n+    @Override\n+    public int getOrder() {\n+        return 0;\n+    }\n+\n     /**\n      * Compute the logout requests.\n      * For a front channel logout, the logout URL is supplemented with the issuer and session identifier.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjgyOA==", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396946828", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String CLAIM_SESSIOND_ID = \"sid\";\n          \n          \n            \n                String SLO_SESSIOND_ID = \"sid\";", "author": "mmoayyed", "createdAt": "2020-03-24T07:29:34Z", "path": "support/cas-server-support-oidc-core/src/main/java/org/apereo/cas/oidc/OidcConstants.java", "diffHunk": "@@ -51,6 +51,10 @@\n      * The access token hash.\n      */\n     String CLAIM_AT_HASH = \"at_hash\";\n+    /**\n+     * The session identifier claim.\n+     */\n+    String CLAIM_SESSIOND_ID = \"sid\";", "originalCommit": "331eea32f4c4445021a29d01b94f15eadc2ab7ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ5NTUwOA==", "url": "https://github.com/apereo/cas/pull/4767#discussion_r398495508", "bodyText": "I'd prefer to keep the \"CLAIM\" tag in the name...", "author": "leleuj", "createdAt": "2020-03-26T11:20:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NjgyOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NzA0Mg==", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396947042", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Bean\n          \n          \n            \n                @Bean\n          \n          \n            \n                @ConditionalOnMissingBean(name = \"oidcLogoutExecutionPlanConfigurer\")", "author": "mmoayyed", "createdAt": "2020-03-24T07:30:07Z", "path": "support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java", "diffHunk": "@@ -757,6 +771,29 @@ public View oidcConfirmView() {\n         return casProtocolViewFactory.getObject().create(applicationContext, \"protocol/oidc/confirm\");\n     }\n \n+    @ConditionalOnMissingBean(name = \"oidcSingleLogoutMessageCreator\")\n+    @Bean\n+    public SingleLogoutMessageCreator oidcSingleLogoutMessageCreator() {\n+        return new OidcSingleLogoutMessageCreator(buildConfigurationContext());\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"oidcSingleLogoutServiceMessageHandler\")\n+    @Bean\n+    public SingleLogoutServiceMessageHandler oidcSingleLogoutServiceMessageHandler() {\n+        return new OidcSingleLogoutServiceMessageHandler(httpClient.getObject(),\n+                oidcSingleLogoutMessageCreator(),\n+                servicesManager.getObject(),\n+                singleLogoutServiceLogoutUrlBuilder.getObject(),\n+                casProperties.getSlo().isAsynchronous(),\n+                authenticationServiceSelectionPlan.getObject(),\n+                casProperties.getAuthn().getOidc().getIssuer());\n+    }\n+\n+    @Bean", "originalCommit": "331eea32f4c4445021a29d01b94f15eadc2ab7ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e86e3e9d5b6293263e87f1dc1d18383f92f1db78", "chunk": "diff --git a/support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java b/support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java\nindex 7e6abb8c3d..3bad95d1eb 100644\n--- a/support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java\n+++ b/support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java\n\n@@ -790,6 +790,7 @@ public class OidcConfiguration implements WebMvcConfigurer {\n     }\n \n     @Bean\n+    @ConditionalOnMissingBean(name = \"oidcLogoutExecutionPlanConfigurer\")\n     public LogoutExecutionPlanConfigurer oidcLogoutExecutionPlanConfigurer() {\n         return plan -> plan.registerSingleLogoutServiceMessageHandler(oidcSingleLogoutServiceMessageHandler());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NzEzMA==", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396947130", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Bean\n          \n          \n            \n                @Bean\n          \n          \n            \n                @RefreshScope", "author": "mmoayyed", "createdAt": "2020-03-24T07:30:20Z", "path": "support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java", "diffHunk": "@@ -757,6 +771,29 @@ public View oidcConfirmView() {\n         return casProtocolViewFactory.getObject().create(applicationContext, \"protocol/oidc/confirm\");\n     }\n \n+    @ConditionalOnMissingBean(name = \"oidcSingleLogoutMessageCreator\")\n+    @Bean\n+    public SingleLogoutMessageCreator oidcSingleLogoutMessageCreator() {\n+        return new OidcSingleLogoutMessageCreator(buildConfigurationContext());\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"oidcSingleLogoutServiceMessageHandler\")\n+    @Bean", "originalCommit": "331eea32f4c4445021a29d01b94f15eadc2ab7ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e86e3e9d5b6293263e87f1dc1d18383f92f1db78", "chunk": "diff --git a/support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java b/support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java\nindex 7e6abb8c3d..3bad95d1eb 100644\n--- a/support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java\n+++ b/support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java\n\n@@ -790,6 +790,7 @@ public class OidcConfiguration implements WebMvcConfigurer {\n     }\n \n     @Bean\n+    @ConditionalOnMissingBean(name = \"oidcLogoutExecutionPlanConfigurer\")\n     public LogoutExecutionPlanConfigurer oidcLogoutExecutionPlanConfigurer() {\n         return plan -> plan.registerSingleLogoutServiceMessageHandler(oidcSingleLogoutServiceMessageHandler());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NzE4Nw==", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396947187", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Bean\n          \n          \n            \n                @Bean\n          \n          \n            \n                @RefreshScope", "author": "mmoayyed", "createdAt": "2020-03-24T07:30:29Z", "path": "support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java", "diffHunk": "@@ -757,6 +771,29 @@ public View oidcConfirmView() {\n         return casProtocolViewFactory.getObject().create(applicationContext, \"protocol/oidc/confirm\");\n     }\n \n+    @ConditionalOnMissingBean(name = \"oidcSingleLogoutMessageCreator\")\n+    @Bean", "originalCommit": "331eea32f4c4445021a29d01b94f15eadc2ab7ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e86e3e9d5b6293263e87f1dc1d18383f92f1db78", "chunk": "diff --git a/support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java b/support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java\nindex 7e6abb8c3d..3bad95d1eb 100644\n--- a/support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java\n+++ b/support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java\n\n@@ -790,6 +790,7 @@ public class OidcConfiguration implements WebMvcConfigurer {\n     }\n \n     @Bean\n+    @ConditionalOnMissingBean(name = \"oidcLogoutExecutionPlanConfigurer\")\n     public LogoutExecutionPlanConfigurer oidcLogoutExecutionPlanConfigurer() {\n         return plan -> plan.registerSingleLogoutServiceMessageHandler(oidcSingleLogoutServiceMessageHandler());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NzM3Nw==", "url": "https://github.com/apereo/cas/pull/4767#discussion_r396947377", "bodyText": "You should set an order to this handler runs before the default one if necessary.", "author": "mmoayyed", "createdAt": "2020-03-24T07:30:55Z", "path": "support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java", "diffHunk": "@@ -757,6 +771,29 @@ public View oidcConfirmView() {\n         return casProtocolViewFactory.getObject().create(applicationContext, \"protocol/oidc/confirm\");\n     }\n \n+    @ConditionalOnMissingBean(name = \"oidcSingleLogoutMessageCreator\")\n+    @Bean\n+    public SingleLogoutMessageCreator oidcSingleLogoutMessageCreator() {\n+        return new OidcSingleLogoutMessageCreator(buildConfigurationContext());\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"oidcSingleLogoutServiceMessageHandler\")\n+    @Bean\n+    public SingleLogoutServiceMessageHandler oidcSingleLogoutServiceMessageHandler() {\n+        return new OidcSingleLogoutServiceMessageHandler(httpClient.getObject(),", "originalCommit": "331eea32f4c4445021a29d01b94f15eadc2ab7ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ5NjEzMQ==", "url": "https://github.com/apereo/cas/pull/4767#discussion_r398496131", "bodyText": "Sure, I will handle the order aspect of all message handlers.", "author": "leleuj", "createdAt": "2020-03-26T11:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0NzM3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e86e3e9d5b6293263e87f1dc1d18383f92f1db78", "chunk": "diff --git a/support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java b/support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java\nindex 7e6abb8c3d..3bad95d1eb 100644\n--- a/support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java\n+++ b/support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java\n\n@@ -790,6 +790,7 @@ public class OidcConfiguration implements WebMvcConfigurer {\n     }\n \n     @Bean\n+    @ConditionalOnMissingBean(name = \"oidcLogoutExecutionPlanConfigurer\")\n     public LogoutExecutionPlanConfigurer oidcLogoutExecutionPlanConfigurer() {\n         return plan -> plan.registerSingleLogoutServiceMessageHandler(oidcSingleLogoutServiceMessageHandler());\n     }\n"}}, {"oid": "e915166e4371d8d592a5178b20dc047fd46f98bc", "url": "https://github.com/apereo/cas/commit/e915166e4371d8d592a5178b20dc047fd46f98bc", "message": "Update support/cas-server-support-oidc-core-api/src/main/java/org/apereo/cas/oidc/slo/OidcSingleLogoutMessageCreator.java\n\nCo-Authored-By: Misagh Moayyed <mm1844@gmail.com>", "committedDate": "2020-03-26T11:17:31Z", "type": "commit"}, {"oid": "e86e3e9d5b6293263e87f1dc1d18383f92f1db78", "url": "https://github.com/apereo/cas/commit/e86e3e9d5b6293263e87f1dc1d18383f92f1db78", "message": "Update support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java\n\nCo-Authored-By: Misagh Moayyed <mm1844@gmail.com>", "committedDate": "2020-03-26T11:20:33Z", "type": "commit"}, {"oid": "929a8b0d1f59d89db29762de9d3250535833529a", "url": "https://github.com/apereo/cas/commit/929a8b0d1f59d89db29762de9d3250535833529a", "message": "Update support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java\n\nCo-Authored-By: Misagh Moayyed <mm1844@gmail.com>", "committedDate": "2020-03-26T11:20:41Z", "type": "commit"}, {"oid": "61cc977a22e1f2398aa402e34a6ce1fe1430f0e9", "url": "https://github.com/apereo/cas/commit/61cc977a22e1f2398aa402e34a6ce1fe1430f0e9", "message": "Update support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java\n\nCo-Authored-By: Misagh Moayyed <mm1844@gmail.com>", "committedDate": "2020-03-26T11:20:54Z", "type": "commit"}, {"oid": "52a6466925cfaabdf7e33b4fbc643f024fb15df7", "url": "https://github.com/apereo/cas/commit/52a6466925cfaabdf7e33b4fbc643f024fb15df7", "message": "Merge branch 'master' of github.com:apereo/cas into oidc_slo", "committedDate": "2020-03-26T11:22:50Z", "type": "commit"}, {"oid": "f6c4d503e1753276bafc940c214fba14747d4f77", "url": "https://github.com/apereo/cas/commit/f6c4d503e1753276bafc940c214fba14747d4f77", "message": "order SLO message handlers + OidcLogoutProperties", "committedDate": "2020-03-26T12:26:57Z", "type": "commit"}, {"oid": "6b3e006a852ddb113989156be763a261d88d1210", "url": "https://github.com/apereo/cas/commit/6b3e006a852ddb113989156be763a261d88d1210", "message": "Merge branch 'master' into oidc_slo", "committedDate": "2020-03-26T14:04:04Z", "type": "commit"}, {"oid": "b041369ace732d93f66cc0fca4c3e89d93b76836", "url": "https://github.com/apereo/cas/commit/b041369ace732d93f66cc0fca4c3e89d93b76836", "message": "Merge branch 'master' into oidc_slo", "committedDate": "2020-03-26T15:34:04Z", "type": "commit"}, {"oid": "5397b586ccd6db02ca91289f644b8b6ed543e8e1", "url": "https://github.com/apereo/cas/commit/5397b586ccd6db02ca91289f644b8b6ed543e8e1", "message": "Merge branch 'master' into oidc_slo", "committedDate": "2020-03-26T17:21:29Z", "type": "commit"}, {"oid": "7e3f9c03787b832baf15bb3708fb797e39efadd5", "url": "https://github.com/apereo/cas/commit/7e3f9c03787b832baf15bb3708fb797e39efadd5", "message": "Merge branch 'master' into oidc_slo", "committedDate": "2020-03-26T18:51:29Z", "type": "commit"}, {"oid": "58c002e3a5f184832dd9545678a4f61196b24611", "url": "https://github.com/apereo/cas/commit/58c002e3a5f184832dd9545678a4f61196b24611", "message": "Merge branch 'master' into oidc_slo", "committedDate": "2020-03-26T20:21:29Z", "type": "commit"}, {"oid": "5d637d5b56a173b657250370cd495f995cde3424", "url": "https://github.com/apereo/cas/commit/5d637d5b56a173b657250370cd495f995cde3424", "message": "Merge branch 'master' into oidc_slo", "committedDate": "2020-03-26T21:51:29Z", "type": "commit"}, {"oid": "4cb66b90c95b5696f2f52562991fc923341cdb44", "url": "https://github.com/apereo/cas/commit/4cb66b90c95b5696f2f52562991fc923341cdb44", "message": "Merge branch 'master' into oidc_slo", "committedDate": "2020-03-26T23:21:29Z", "type": "commit"}, {"oid": "e8618935790c896c019606c0b33f3b4e5f469660", "url": "https://github.com/apereo/cas/commit/e8618935790c896c019606c0b33f3b4e5f469660", "message": "Merge branch 'master' into oidc_slo", "committedDate": "2020-03-27T00:51:34Z", "type": "commit"}, {"oid": "e5d370efaf05a0ec7bc2d800fe2c5e2d75e9df6b", "url": "https://github.com/apereo/cas/commit/e5d370efaf05a0ec7bc2d800fe2c5e2d75e9df6b", "message": "Merge branch 'master' into oidc_slo", "committedDate": "2020-03-27T05:21:33Z", "type": "commit"}, {"oid": "2adbafa92e5d0ae1f9bd4fd1cd45dbbd716c994e", "url": "https://github.com/apereo/cas/commit/2adbafa92e5d0ae1f9bd4fd1cd45dbbd716c994e", "message": "Update Configuration-Properties.md", "committedDate": "2020-03-27T07:32:52Z", "type": "commit"}, {"oid": "19625bdb2ffb442b9d0308cbcf69850c464c9458", "url": "https://github.com/apereo/cas/commit/19625bdb2ffb442b9d0308cbcf69850c464c9458", "message": "Merge branch 'master' of github.com:apereo/cas into oidc_slo", "committedDate": "2020-03-30T07:18:35Z", "type": "commit"}, {"oid": "bd0546ce70cf248222835143213be2df089428b1", "url": "https://github.com/apereo/cas/commit/bd0546ce70cf248222835143213be2df089428b1", "message": "Merge branch 'master' of github.com:apereo/cas into oidc_slo", "committedDate": "2020-03-30T08:46:04Z", "type": "commit"}, {"oid": "3b730ceeeec64529e6f1894e6364f7c81ae0a760", "url": "https://github.com/apereo/cas/commit/3b730ceeeec64529e6f1894e6364f7c81ae0a760", "message": "WIP tests", "committedDate": "2020-03-30T09:39:40Z", "type": "commit"}, {"oid": "5d917d7de3d93e65b4359b5d614859c96f267999", "url": "https://github.com/apereo/cas/commit/5d917d7de3d93e65b4359b5d614859c96f267999", "message": "new OIDC tests", "committedDate": "2020-03-30T11:00:22Z", "type": "commit"}, {"oid": "861b8d8e391b0a725c958fd5ccc7710994e46e2c", "url": "https://github.com/apereo/cas/commit/861b8d8e391b0a725c958fd5ccc7710994e46e2c", "message": "fix Checkstyle", "committedDate": "2020-03-30T12:06:50Z", "type": "commit"}, {"oid": "af0f2a87d6d5a7640ace9fa862b82e61e1a57ce7", "url": "https://github.com/apereo/cas/commit/af0f2a87d6d5a7640ace9fa862b82e61e1a57ce7", "message": "Merge branch 'master' into oidc_slo", "committedDate": "2020-03-30T13:14:17Z", "type": "commit"}, {"oid": "b42e95ad51288cc210817e3b43d80115234f23fd", "url": "https://github.com/apereo/cas/commit/b42e95ad51288cc210817e3b43d80115234f23fd", "message": "Merge branch 'master' into oidc_slo", "committedDate": "2020-03-30T15:13:53Z", "type": "commit"}, {"oid": "94f477b296d364634966257d44ec78e238a4d2d0", "url": "https://github.com/apereo/cas/commit/94f477b296d364634966257d44ec78e238a4d2d0", "message": "Merge branch 'master' into oidc_slo", "committedDate": "2020-03-30T18:13:55Z", "type": "commit"}, {"oid": "f07310813b218907e50afdc4ca9a0919f4131fc8", "url": "https://github.com/apereo/cas/commit/f07310813b218907e50afdc4ca9a0919f4131fc8", "message": "Update build.gradle", "committedDate": "2020-03-30T19:52:50Z", "type": "commit"}, {"oid": "65f11723d2bcc195037d427ae522d244c70464fa", "url": "https://github.com/apereo/cas/commit/65f11723d2bcc195037d427ae522d244c70464fa", "message": "Update build.gradle", "committedDate": "2020-03-30T19:53:28Z", "type": "commit"}, {"oid": "1ac402154da6483538258bbb76cbb75f4c936394", "url": "https://github.com/apereo/cas/commit/1ac402154da6483538258bbb76cbb75f4c936394", "message": "Merge branch 'master' into oidc_slo", "committedDate": "2020-03-31T02:03:21Z", "type": "commit"}]}