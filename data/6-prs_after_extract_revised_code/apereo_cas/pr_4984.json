{"pr_number": 4984, "pr_title": "[OAuth/OIDC] Support of the Authorization Requests Errors", "pr_createdAt": "2020-11-19T22:18:13Z", "pr_url": "https://github.com/apereo/cas/pull/4984", "timeline": [{"oid": "b6512eec35e5540c20224c865676920e1e4dba3f", "url": "https://github.com/apereo/cas/commit/b6512eec35e5540c20224c865676920e1e4dba3f", "message": "Add new OAuth constants.", "committedDate": "2020-11-19T21:04:44Z", "type": "commit"}, {"oid": "86a8c1409716f369545a8af01385f146bc33cad9", "url": "https://github.com/apereo/cas/commit/86a8c1409716f369545a8af01385f146bc33cad9", "message": "Add a new OAuth Authorization response builder dedicated to invalid requests.", "committedDate": "2020-11-19T21:06:03Z", "type": "commit"}, {"oid": "994a8cb64eb27ac7d700913fb1d94d49852bc9ff", "url": "https://github.com/apereo/cas/commit/994a8cb64eb27ac7d700913fb1d94d49852bc9ff", "message": "Add a new OAuth Authorization request validator dedicated for requests with a missing or an invalid Response type.", "committedDate": "2020-11-19T21:06:54Z", "type": "commit"}, {"oid": "7e4655b783560899157338da479f9976a7f7ce2a", "url": "https://github.com/apereo/cas/commit/7e4655b783560899157338da479f9976a7f7ce2a", "message": "Add the new request validator and the new response builder to the configuration", "committedDate": "2020-11-19T21:08:03Z", "type": "commit"}, {"oid": "9b7694f4c59911cd2d1c1ef9a956be28015c954f", "url": "https://github.com/apereo/cas/commit/9b7694f4c59911cd2d1c1ef9a956be28015c954f", "message": "The Request Validator is now fill the context with the errors informations.", "committedDate": "2020-11-19T21:10:21Z", "type": "commit"}, {"oid": "e189d6b1872aa1c8bd48d3c77b4fc5dd3b8bd515", "url": "https://github.com/apereo/cas/commit/e189d6b1872aa1c8bd48d3c77b4fc5dd3b8bd515", "message": "The Authorize Endpoint is now using the context error informations instead of a double check (the check is done by the Handler Interceptor)", "committedDate": "2020-11-19T21:11:41Z", "type": "commit"}, {"oid": "6b67f8f63251d36ae7971477b0e805c6a11d39a6", "url": "https://github.com/apereo/cas/commit/6b67f8f63251d36ae7971477b0e805c6a11d39a6", "message": "Fix Missing or Invalid validator", "committedDate": "2020-11-19T21:20:42Z", "type": "commit"}, {"oid": "520f1daf982bb14c01864ec1bd9aafca84fd2f25", "url": "https://github.com/apereo/cas/commit/520f1daf982bb14c01864ec1bd9aafca84fd2f25", "message": "Fix Warning log in the OAuth Autorization validator", "committedDate": "2020-11-19T21:28:41Z", "type": "commit"}, {"oid": "52f3196a2d9dc8bfb2d273b19e5bfd0d5b034803", "url": "https://github.com/apereo/cas/commit/52f3196a2d9dc8bfb2d273b19e5bfd0d5b034803", "message": "Invalid response should not contains nonce parameter even if the request does [OIDC 3.1.2.6]", "committedDate": "2020-11-19T21:51:26Z", "type": "commit"}, {"oid": "c771bb83d9a19e4e69ec366a840faeb5d3a16ffa", "url": "https://github.com/apereo/cas/commit/c771bb83d9a19e4e69ec366a840faeb5d3a16ffa", "message": "Missing response_type is now supported in the authorization request validator", "committedDate": "2020-11-19T21:51:41Z", "type": "commit"}, {"oid": "43145420e1cc2444f7e54b2adf82d905ef0842a8", "url": "https://github.com/apereo/cas/commit/43145420e1cc2444f7e54b2adf82d905ef0842a8", "message": "Just to be sure the Error attribute will always be in the context", "committedDate": "2020-11-19T22:09:32Z", "type": "commit"}, {"oid": "3f4e5ba78f839c1afa8634a25fafa8890a150b4a", "url": "https://github.com/apereo/cas/commit/3f4e5ba78f839c1afa8634a25fafa8890a150b4a", "message": "Remove unused constant", "committedDate": "2020-11-19T23:06:49Z", "type": "commit"}, {"oid": "f5cd82c9fc9d7b185f4424d4900ebc9e9ff60bf3", "url": "https://github.com/apereo/cas/commit/f5cd82c9fc9d7b185f4424d4900ebc9e9ff60bf3", "message": "Add tests for OAuth HandlerInterceptor & OAuth Invalid Reponse builder", "committedDate": "2020-11-21T22:15:07Z", "type": "commit"}, {"oid": "bc7bfb622ebb8eda2610bfebbe76ae4dcc8cf8d9", "url": "https://github.com/apereo/cas/commit/bc7bfb622ebb8eda2610bfebbe76ae4dcc8cf8d9", "message": "Removed Unused Imports.", "committedDate": "2020-11-21T22:31:09Z", "type": "commit"}, {"oid": "c5ed5c45a85672703df11e029fb0ebbe1966e1c7", "url": "https://github.com/apereo/cas/commit/c5ed5c45a85672703df11e029fb0ebbe1966e1c7", "message": "Removed useless import", "committedDate": "2020-11-21T23:42:10Z", "type": "commit"}, {"oid": "9a8e544b35e68e84397fdada3d784f991edf3aa7", "url": "https://github.com/apereo/cas/commit/9a8e544b35e68e84397fdada3d784f991edf3aa7", "message": "Import order", "committedDate": "2020-11-22T00:05:29Z", "type": "commit"}, {"oid": "dce400599a7e12f3001cb58bfec16108f79c697b", "url": "https://github.com/apereo/cas/commit/dce400599a7e12f3001cb58bfec16108f79c697b", "message": "Useless since we do have a validator missing or invalid response type.", "committedDate": "2020-11-22T09:33:49Z", "type": "commit"}, {"oid": "f58176f4e930945432503fa40465a9088e1b6999", "url": "https://github.com/apereo/cas/commit/f58176f4e930945432503fa40465a9088e1b6999", "message": "Add Authorization Validator tests", "committedDate": "2020-11-22T11:07:29Z", "type": "commit"}, {"oid": "2d74da2e2b4c3ae34c89f9de886639fc395a7362", "url": "https://github.com/apereo/cas/commit/2d74da2e2b4c3ae34c89f9de886639fc395a7362", "message": "rollback & cleanup", "committedDate": "2020-11-22T13:46:18Z", "type": "commit"}, {"oid": "2d74da2e2b4c3ae34c89f9de886639fc395a7362", "url": "https://github.com/apereo/cas/commit/2d74da2e2b4c3ae34c89f9de886639fc395a7362", "message": "rollback & cleanup", "committedDate": "2020-11-22T13:46:18Z", "type": "forcePushed"}, {"oid": "a9b15f87b82077f51aff73ea057bad355dc54d55", "url": "https://github.com/apereo/cas/commit/a9b15f87b82077f51aff73ea057bad355dc54d55", "message": "Add Authorize Endpoint Test", "committedDate": "2020-11-22T14:54:00Z", "type": "commit"}, {"oid": "e18c7de3d96d4468293a2b9b773dfdeb5a890cd9", "url": "https://github.com/apereo/cas/commit/e18c7de3d96d4468293a2b9b773dfdeb5a890cd9", "message": "Merge branch 'master' into oauthAuthorize", "committedDate": "2020-11-24T10:45:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2MjM0NQ==", "url": "https://github.com/apereo/cas/pull/4984#discussion_r529562345", "bodyText": "Should this really be a public method?", "author": "mmoayyed", "createdAt": "2020-11-24T13:55:30Z", "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/validator/authorization/OAuth20AuthorizationCodeResponseTypeAuthorizationRequestValidator.java", "diffHunk": "@@ -83,16 +82,85 @@ public boolean validate(final JEEContext context) {\n \n         if (accessResult.isExecutionFailure()) {\n             LOGGER.warn(\"Registered service [{}] is not found or is not authorized for access.\", registeredService);\n+\n+            setErrorDetails(context,\n+                OAuth20Constants.INVALID_REQUEST,\n+                StringUtils.EMPTY,\n+                false);\n+\n             return false;\n         }\n \n-        val redirectUri = request.getParameter(OAuth20Constants.REDIRECT_URI);\n         if (!OAuth20Utils.checkCallbackValid(registeredService, redirectUri)) {\n             LOGGER.warn(\"Callback URL [{}] is not authorized for registered service [{}].\", redirectUri, registeredService);\n+\n+            setErrorDetails(context,\n+                OAuth20Constants.INVALID_REQUEST,\n+                StringUtils.EMPTY,\n+                false);\n+\n+            return false;\n+        }\n+\n+        val authnRequest = request.getParameter(OAuth20Constants.REQUEST);\n+        if (StringUtils.isNotBlank(authnRequest)) {\n+            LOGGER.warn(\"Self-contained authentication requests as JWTs are not accepted\");\n+\n+            setErrorDetails(context,\n+                OAuth20Constants.REQUEST_NOT_SUPPORTED,\n+                StringUtils.EMPTY,\n+                true);\n+\n+            return false;\n+        }\n+\n+        val responseType = request.getParameter(OAuth20Constants.RESPONSE_TYPE);\n+        if (StringUtils.isBlank(responseType)) {\n+            setErrorDetails(context,\n+                OAuth20Constants.UNSUPPORTED_RESPONSE_TYPE,\n+                String.format(\"Missing required parameter: [%s]\", OAuth20Constants.RESPONSE_TYPE),\n+                true);\n+\n+            return false;\n+        }\n+\n+        if (!OAuth20Utils.checkResponseTypes(responseType, OAuth20ResponseTypes.values())) {\n+            LOGGER.warn(\"Response type [{}] is not found in the list of supported values [{}].\",\n+                responseType, OAuth20ResponseTypes.values());\n+\n+            setErrorDetails(context,\n+                OAuth20Constants.UNSUPPORTED_RESPONSE_TYPE,\n+                String.format(\"Unsupported response_type: [%s]\", responseType),\n+                true);\n+\n+            return false;\n+        }\n+\n+        if (!OAuth20Utils.isAuthorizedResponseTypeForService(context, registeredService)) {\n+            setErrorDetails(context,\n+                OAuth20Constants.UNAUTHORIZED_CLIENT,\n+                String.format(\"Client is not allowed to use the [%s] response_type\", responseType),\n+                true);\n+\n             return false;\n         }\n \n-        return OAuth20Utils.isAuthorizedResponseTypeForService(context, registeredService);\n+        return true;\n+    }\n+\n+    /**\n+     * Set the OAuth Error details in the context.\n+     *\n+     * @param context the context\n+     * @param error the OAuth error\n+     * @param errorDescription the OAuth error description\n+     * @param errorWithCallBack does the error will redirect the end-user to the client\n+     */\n+    public void setErrorDetails(final JEEContext context, final String error,", "originalCommit": "e18c7de3d96d4468293a2b9b773dfdeb5a890cd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyMDk5MQ==", "url": "https://github.com/apereo/cas/pull/4984#discussion_r529720991", "bodyText": "No, you're right.", "author": "julienhuon", "createdAt": "2020-11-24T16:42:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2MjM0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "20fd72b600f72570bb3b5205068e0b2538bfccde", "chunk": "diff --git a/support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/validator/authorization/OAuth20AuthorizationCodeResponseTypeAuthorizationRequestValidator.java b/support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/validator/authorization/OAuth20AuthorizationCodeResponseTypeAuthorizationRequestValidator.java\nindex 87c8975dc0..5c1b8b728d 100644\n--- a/support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/validator/authorization/OAuth20AuthorizationCodeResponseTypeAuthorizationRequestValidator.java\n+++ b/support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/validator/authorization/OAuth20AuthorizationCodeResponseTypeAuthorizationRequestValidator.java\n\n@@ -156,8 +156,8 @@ public class OAuth20AuthorizationCodeResponseTypeAuthorizationRequestValidator i\n      * @param errorDescription the OAuth error description\n      * @param errorWithCallBack does the error will redirect the end-user to the client\n      */\n-    public void setErrorDetails(final JEEContext context, final String error,\n-                                final String errorDescription, final boolean errorWithCallBack) {\n+    protected void setErrorDetails(final JEEContext context, final String error,\n+                                   final String errorDescription, final boolean errorWithCallBack) {\n         context.setRequestAttribute(OAuth20Constants.ERROR, error);\n         context.setRequestAttribute(OAuth20Constants.ERROR_DESCRIPTION, errorDescription);\n         context.setRequestAttribute(OAuth20Constants.ERROR_WITH_CALLBACK, errorWithCallBack);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2MzE1NA==", "url": "https://github.com/apereo/cas/pull/4984#discussion_r529563154", "bodyText": "The class name seems rather odd to me. How about OAuth20ResponseTypeAuthorizationRequestValidator instead? You're validating the response type, and the validator contains a number of checks. Those checks don't need to be advertised in the class name.", "author": "mmoayyed", "createdAt": "2020-11-24T13:56:37Z", "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/validator/authorization/OAuth20MissingOrInvalidResponseTypeAuthorizationRequestValidator.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.apereo.cas.support.oauth.validator.authorization;\n+\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.principal.ServiceFactory;\n+import org.apereo.cas.authentication.principal.WebApplicationService;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.oauth.OAuth20Constants;\n+import org.apereo.cas.support.oauth.OAuth20ResponseTypes;\n+import org.apereo.cas.support.oauth.util.OAuth20Utils;\n+\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.core.context.JEEContext;\n+\n+/**\n+ * This is {@link OAuth20MissingOrInvalidResponseTypeAuthorizationRequestValidator}.\n+ *\n+ * @author Julien Huon\n+ * @since 6.3.0\n+ */\n+public class OAuth20MissingOrInvalidResponseTypeAuthorizationRequestValidator extends OAuth20AuthorizationCodeResponseTypeAuthorizationRequestValidator {", "originalCommit": "e18c7de3d96d4468293a2b9b773dfdeb5a890cd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyMjA1Nw==", "url": "https://github.com/apereo/cas/pull/4984#discussion_r529722057", "bodyText": "I wanted to stay consistent with the other class names but you're proposal is better. Will do it. :)", "author": "julienhuon", "createdAt": "2020-11-24T16:44:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2MzE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5Mjc0Mw==", "url": "https://github.com/apereo/cas/pull/4984#discussion_r529892743", "bodyText": "Just a question.\nAll the current validators are related to the response_type parameter and if an authorization request is made without any response_type, none of the validators matches and it is rejected.\nWith this PR I want to still refuse them but to have all the error details in the context. That's why I added this one which will allow a request without or with an invalid response_type to be scanned by a validator. Should I just rename the class or try to find another supports logic in the Authorization validators? Or maybe to give to this class the lowest order?", "author": "julienhuon", "createdAt": "2020-11-24T21:35:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2MzE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEyMTkzNw==", "url": "https://github.com/apereo/cas/pull/4984#discussion_r530121937", "bodyText": "I see. In that case, none of the above :)\nWhat you should do is: in the super parent class, implement the response_type checking logic that you have here. When that passes, then you call an abstract protected method (defined by the super parent class) that is implemented by other validators who can do the job. This way, the common logic is contained within the parent class and not duplicated everywhere. It also helps you remove this class.\nSee AbstractPreAndPostProcessingAuthenticationHandler#authenticate for an example of doing pre/execution/post.", "author": "mmoayyed", "createdAt": "2020-11-25T05:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2MzE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY0NjAyMw==", "url": "https://github.com/apereo/cas/pull/4984#discussion_r530646023", "bodyText": "Still have a question, sorry.\nToday, the right class is selected via a stream which is looking to a class where the supports method will respond true. All theses supports methods are looking for a particular value in the response_type parameter. When the right class is found, the validate method of the class found is called.\n        val validator = oauthAuthorizationRequestValidators\n            .stream()\n            .filter(b -> b.supports(context))\n            .findFirst()\n            .orElse(null);\n\n        if (validator == null) {\n            context.setRequestAttribute(OAuth20Constants.ERROR, OAuth20Constants.INVALID_REQUEST);\n            return false;\n        }\n        return validator.validate(context);\n\nSo, I guess I'll have to pre-validate the request in the supports method if we want to remove this class. Because, even if I do what you want, the validate method will never be called.\nI could add the logic needed and the error details will be in the context but an invalid request gonna be checked multiple times (as much as the number of validate class defined in the oauthAuthorizationRequestValidators class) instead of being rejected instantly.\nBecause a request without or with an invalid request could produce a callback if the client_id & the redirect_uri do exist in the request. I need to check them in pre-validate method which is more expensive than looking to a single parameter.\nIn the code, it's more elegant but I don't known if it's more performant. Unless I missed something? Like, maybe, check if an INVALID_REQUEST attribute already exists in the supports method because of a previous supports call? And I don't known if that is logic to pre-validate in the supports method.", "author": "julienhuon", "createdAt": "2020-11-25T21:15:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2MzE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgyNDYxNA==", "url": "https://github.com/apereo/cas/pull/4984#discussion_r530824614", "bodyText": "So, I guess I'll have to pre-validate the request in the supports method if we want to remove this class.\n\nThat makes sense. You'd apply the strategy I pointed out earlier to the supports method. pre-validate in a parent class, and if it passes, let each child authorizer class decide if it can support the request. There should be no performance side-effects with multiple checking of the parameter's existence or value. My main concern is maintainability and readability. Let's make it work, and make it look good. Then, we'll make it fast[er] :)\n\nBecause a request without or with an invalid request could produce a callback if the client_id & the redirect_uri do exist in the request. I need to check them in pre-validate method which is more expensive than looking to a single parameter.\n\nCan you elaborate more please? By callback, you mean a redirect back to the application if the client_id & the redirect_uri do exist?", "author": "mmoayyed", "createdAt": "2020-11-26T07:40:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2MzE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg0NzQ0MQ==", "url": "https://github.com/apereo/cas/pull/4984#discussion_r530847441", "bodyText": "Can you elaborate more please? By callback, you mean a redirect back to the application if the client_id & the redirect_uri do exist?\n\nYes. When the client_id & the redirect_uri is valid you have to redirect the user-agent to the redirect_uri with parameters : state if any, error and an error_description if any.\nSo a big part of the actual validate method will be in the pre-validate method : check if a client_id & a redirect_uri do exist. Does the client_id exists in our configuration? Does the redirect_uri is valid for the client_id? And then, is the response_type valid or authorized for this client?", "author": "julienhuon", "createdAt": "2020-11-26T08:25:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2MzE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk5OTU5OQ==", "url": "https://github.com/apereo/cas/pull/4984#discussion_r530999599", "bodyText": "That makes sense to me. If pre-validate passes, you can then invoke validate, or optionally issue a redirect if data is available.", "author": "mmoayyed", "createdAt": "2020-11-26T12:35:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2MzE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAxNzQ5OQ==", "url": "https://github.com/apereo/cas/pull/4984#discussion_r531017499", "bodyText": "Ok I'll do it.\nAbout the coverage, the code produced has a slightly better coverage than the existent one. If I can do even more I will. :)", "author": "julienhuon", "createdAt": "2020-11-26T13:08:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2MzE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5OTU0Ng==", "url": "https://github.com/apereo/cas/pull/4984#discussion_r531799546", "bodyText": "Done.", "author": "julienhuon", "createdAt": "2020-11-27T22:31:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2MzE1NA=="}], "type": "inlineReview", "revised_code": {"commit": "380aee5e463f8a69996b259f56284ea7d5ef44ab", "chunk": "diff --git a/support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/validator/authorization/OAuth20MissingOrInvalidResponseTypeAuthorizationRequestValidator.java b/support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/validator/authorization/OAuth20MissingOrInvalidResponseTypeAuthorizationRequestValidator.java\ndeleted file mode 100644\nindex 0e3a8800a2..0000000000\n--- a/support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/validator/authorization/OAuth20MissingOrInvalidResponseTypeAuthorizationRequestValidator.java\n+++ /dev/null\n\n@@ -1,35 +0,0 @@\n-package org.apereo.cas.support.oauth.validator.authorization;\n-\n-import org.apereo.cas.audit.AuditableExecution;\n-import org.apereo.cas.authentication.principal.ServiceFactory;\n-import org.apereo.cas.authentication.principal.WebApplicationService;\n-import org.apereo.cas.services.ServicesManager;\n-import org.apereo.cas.support.oauth.OAuth20Constants;\n-import org.apereo.cas.support.oauth.OAuth20ResponseTypes;\n-import org.apereo.cas.support.oauth.util.OAuth20Utils;\n-\n-import lombok.val;\n-import org.apache.commons.lang3.StringUtils;\n-import org.pac4j.core.context.JEEContext;\n-\n-/**\n- * This is {@link OAuth20MissingOrInvalidResponseTypeAuthorizationRequestValidator}.\n- *\n- * @author Julien Huon\n- * @since 6.3.0\n- */\n-public class OAuth20MissingOrInvalidResponseTypeAuthorizationRequestValidator extends OAuth20AuthorizationCodeResponseTypeAuthorizationRequestValidator {\n-    public OAuth20MissingOrInvalidResponseTypeAuthorizationRequestValidator(final ServicesManager servicesManager,\n-                                                                            final ServiceFactory<WebApplicationService> webApplicationServiceServiceFactory,\n-                                                                            final AuditableExecution registeredServiceAccessStrategyEnforcer) {\n-        super(servicesManager, webApplicationServiceServiceFactory, registeredServiceAccessStrategyEnforcer);\n-    }\n-\n-    @Override\n-    public boolean supports(final JEEContext context) {\n-        val responseType = context.getRequestParameter(OAuth20Constants.RESPONSE_TYPE)\n-            .map(String::valueOf)\n-            .orElse(StringUtils.EMPTY);\n-        return !OAuth20Utils.checkResponseTypes(responseType, OAuth20ResponseTypes.values());\n-    }\n-}\n"}}, {"oid": "20fd72b600f72570bb3b5205068e0b2538bfccde", "url": "https://github.com/apereo/cas/commit/20fd72b600f72570bb3b5205068e0b2538bfccde", "message": "setErrorDetails is now protected instead of public", "committedDate": "2020-11-24T21:17:14Z", "type": "commit"}, {"oid": "b5c55a3432a5ae421de83b90cb8236af1b6b4f48", "url": "https://github.com/apereo/cas/commit/b5c55a3432a5ae421de83b90cb8236af1b6b4f48", "message": "Merge branch 'master' into oauthAuthorize", "committedDate": "2020-11-25T19:19:41Z", "type": "commit"}, {"oid": "198bb9e525a74a0b5b97e8fd29ed2b4f2abe5f1c", "url": "https://github.com/apereo/cas/commit/198bb9e525a74a0b5b97e8fd29ed2b4f2abe5f1c", "message": "Improve coverage on oauth authorization validators", "committedDate": "2020-11-25T22:30:09Z", "type": "commit"}, {"oid": "cc43bdc983635c45003d24f5a2e1d5d964a0dc94", "url": "https://github.com/apereo/cas/commit/cc43bdc983635c45003d24f5a2e1d5d964a0dc94", "message": "cleanup", "committedDate": "2020-11-26T00:20:38Z", "type": "commit"}, {"oid": "55ef2733e43053cb09ade2a3d0d3baf78b80d1a4", "url": "https://github.com/apereo/cas/commit/55ef2733e43053cb09ade2a3d0d3baf78b80d1a4", "message": "Merge branch 'master' into oauthAuthorize", "committedDate": "2020-11-27T18:36:10Z", "type": "commit"}, {"oid": "380aee5e463f8a69996b259f56284ea7d5ef44ab", "url": "https://github.com/apereo/cas/commit/380aee5e463f8a69996b259f56284ea7d5ef44ab", "message": "Cleanup code: abstract class BaseOAuth20AuthorizationRequestValidator creation instead of the OAuth20MissingOrInvalidResponseTypeAuthorizationRequestValidator class.", "committedDate": "2020-11-27T22:25:43Z", "type": "commit"}, {"oid": "1d68d4a7293ae1b19aad5326960a15f2f6014939", "url": "https://github.com/apereo/cas/commit/1d68d4a7293ae1b19aad5326960a15f2f6014939", "message": "bug fix (useless since the new abstract class design)", "committedDate": "2020-11-28T11:54:36Z", "type": "commit"}, {"oid": "076c72ee4b2f66612105bcbd6981a3ffeee6fd54", "url": "https://github.com/apereo/cas/commit/076c72ee4b2f66612105bcbd6981a3ffeee6fd54", "message": "Merge branch 'master' into oauthAuthorize", "committedDate": "2020-11-28T12:53:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzNzIxMA==", "url": "https://github.com/apereo/cas/pull/4984#discussion_r533437210", "bodyText": "This is not helpful. You need to, if you really want to, explain exactly what failed and how; the message here is very generic and it confuses more than it helps. If you don't have enough information to explain things, remove the line, specially if the error is tracked in logs via some other component.", "author": "mmoayyed", "createdAt": "2020-12-01T14:13:45Z", "path": "support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20AuthorizeEndpointController.java", "diffHunk": "@@ -62,9 +63,13 @@ public ModelAndView handleRequest(final HttpServletRequest request,\n         val context = new JEEContext(request, response, getOAuthConfigurationContext().getSessionStore());\n         val manager = new ProfileManager<CommonProfile>(context, context.getSessionStore());\n \n-        if (!verifyAuthorizeRequest(context) || !isRequestAuthenticated(manager)) {\n-            LOGGER.error(\"Authorize request verification failed. Authorization request is missing required parameters, \"\n-                + \"or the request is not authenticated and contains no authenticated profile/principal.\");\n+        if (context.getRequestAttribute(OAuth20Constants.ERROR).isPresent()) {\n+            LOGGER.error(\"Authorize request verification failed\");", "originalCommit": "076c72ee4b2f66612105bcbd6981a3ffeee6fd54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUxODU3Mg==", "url": "https://github.com/apereo/cas/pull/4984#discussion_r533518572", "bodyText": "Ok. I'll remove it because the other components are logging all the errors.", "author": "julienhuon", "createdAt": "2020-12-01T15:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzNzIxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5NTUzNQ==", "url": "https://github.com/apereo/cas/pull/4984#discussion_r533695535", "bodyText": "Done", "author": "julienhuon", "createdAt": "2020-12-01T20:19:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzNzIxMA=="}], "type": "inlineReview", "revised_code": {"commit": "bdd696d3d1b3f7a95d2b37f8d506d879ddb6722e", "chunk": "diff --git a/support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20AuthorizeEndpointController.java b/support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20AuthorizeEndpointController.java\nindex a5b3a3bf7d..9c93d6aad3 100644\n--- a/support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20AuthorizeEndpointController.java\n+++ b/support/cas-server-support-oauth-core-api/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20AuthorizeEndpointController.java\n\n@@ -64,8 +64,6 @@ public class OAuth20AuthorizeEndpointController extends BaseOAuth20Controller {\n         val manager = new ProfileManager<CommonProfile>(context, context.getSessionStore());\n \n         if (context.getRequestAttribute(OAuth20Constants.ERROR).isPresent()) {\n-            LOGGER.error(\"Authorize request verification failed\");\n-\n             val mv = getOAuthConfigurationContext().getOauthInvalidAuthorizationResponseBuilder().build(context);\n             if (!mv.isEmpty() && mv.hasView()) {\n                 return mv;\n"}}, {"oid": "bdd696d3d1b3f7a95d2b37f8d506d879ddb6722e", "url": "https://github.com/apereo/cas/commit/bdd696d3d1b3f7a95d2b37f8d506d879ddb6722e", "message": "Removed useless error message & update since annotation", "committedDate": "2020-12-01T20:13:26Z", "type": "commit"}, {"oid": "971d517f6b5fa6928a1674ff2ffb1f0a73d32252", "url": "https://github.com/apereo/cas/commit/971d517f6b5fa6928a1674ff2ffb1f0a73d32252", "message": "Merge branch 'master' into oauthAuthorize", "committedDate": "2020-12-05T21:09:52Z", "type": "commit"}, {"oid": "ddaeaaa39668980dd22100381e7d252d2d32ef90", "url": "https://github.com/apereo/cas/commit/ddaeaaa39668980dd22100381e7d252d2d32ef90", "message": "Merge branch 'master' into oauthAuthorize", "committedDate": "2020-12-12T15:55:00Z", "type": "commit"}, {"oid": "21c8a90ab2c31e4a778636dcc63658441c3f7963", "url": "https://github.com/apereo/cas/commit/21c8a90ab2c31e4a778636dcc63658441c3f7963", "message": "Merge branch 'master' into oauthAuthorize", "committedDate": "2020-12-19T21:59:35Z", "type": "commit"}, {"oid": "e6e26c611fa06db41a6082b260662dbf25276e11", "url": "https://github.com/apereo/cas/commit/e6e26c611fa06db41a6082b260662dbf25276e11", "message": "Fix oauth authorize endpoint", "committedDate": "2020-12-20T20:57:38Z", "type": "forcePushed"}, {"oid": "e6e26c611fa06db41a6082b260662dbf25276e11", "url": "https://github.com/apereo/cas/commit/e6e26c611fa06db41a6082b260662dbf25276e11", "message": "Fix oauth authorize endpoint", "committedDate": "2020-12-20T20:57:38Z", "type": "commit"}, {"oid": "f6191836ec413082cf221245c2bdcda7c77692ce", "url": "https://github.com/apereo/cas/commit/f6191836ec413082cf221245c2bdcda7c77692ce", "message": "Merge branch 'master' into oauthAuthorize", "committedDate": "2020-12-29T14:06:09Z", "type": "commit"}, {"oid": "62073e73ee121909300155a986703e8c7d11f797", "url": "https://github.com/apereo/cas/commit/62073e73ee121909300155a986703e8c7d11f797", "message": "Improve coverage", "committedDate": "2020-12-29T15:14:50Z", "type": "commit"}, {"oid": "914649eeb937edd1056b7b1b3c9d23bb0b1ab51b", "url": "https://github.com/apereo/cas/commit/914649eeb937edd1056b7b1b3c9d23bb0b1ab51b", "message": "Fix tests", "committedDate": "2020-12-29T15:14:58Z", "type": "commit"}]}