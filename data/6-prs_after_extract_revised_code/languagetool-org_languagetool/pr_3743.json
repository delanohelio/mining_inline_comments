{"pr_number": 3743, "pr_title": "parallelize PatternRuleTest to speed it up", "pr_createdAt": "2020-10-22T09:29:46Z", "pr_url": "https://github.com/languagetool-org/languagetool/pull/3743", "timeline": [{"oid": "c39e909865dc239d3b3ffc8dc6f0d4bee6df630f", "url": "https://github.com/languagetool-org/languagetool/commit/c39e909865dc239d3b3ffc8dc6f0d4bee6df630f", "message": "parallelize PatternRuleTest to speed it up", "committedDate": "2020-10-22T09:23:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNjk5NQ==", "url": "https://github.com/languagetool-org/languagetool/pull/3743#discussion_r510016995", "bodyText": "For me, more threads don't result in better performance :(", "author": "donnerpeter", "createdAt": "2020-10-22T09:30:29Z", "path": "languagetool-core/src/test/java/org/languagetool/rules/patterns/PatternRuleTest.java", "diffHunk": "@@ -290,19 +299,30 @@ private void testExamplesExist(List<AbstractPatternRule> rules) {\n         if (!correctionExists) {\n           String failure = \"Rule needs at least one <example> with a 'correction' attribute\"\n                   + \" or one <example> of type='correct'.\";\n-          ruleErrors.addError(new PatternRuleTestFailure(rule, failure));\n+          addError(rule, failure);\n         }\n       }\n     }\n   }\n \n-  public void testGrammarRulesFromXML(List<AbstractPatternRule> rules,\n-                                      JLanguageTool lt,\n-                                      JLanguageTool allRulesLt, Language lang) throws IOException {\n+  private void addError(AbstractPatternRule rule, String failure) {\n+    synchronized (ruleErrors) {\n+      ruleErrors.addError(new PatternRuleTestFailure(rule, failure));\n+    }\n+  }\n+\n+  private void testGrammarRulesFromXML(List<AbstractPatternRule> rules, JLanguageTool allRulesLt, Language lang) {\n     System.out.println(\"Checking example sentences of \" + rules.size() + \" rules for \" + lang + \"...\");\n+\n+    int threadCount = Math.max(1, Runtime.getRuntime().availableProcessors() / 2);", "originalCommit": "c39e909865dc239d3b3ffc8dc6f0d4bee6df630f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}