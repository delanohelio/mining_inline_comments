{"pr_number": 1504, "pr_title": "#1470: Improve test coverage for org.cactoos.collection", "pr_createdAt": "2020-11-09T07:50:00Z", "pr_url": "https://github.com/yegor256/cactoos/pull/1504", "timeline": [{"oid": "921eac567a7b5ff5337fe48ba35c89ad540b98ed", "url": "https://github.com/yegor256/cactoos/commit/921eac567a7b5ff5337fe48ba35c89ad540b98ed", "message": "(#1470) Call #size() instead of counting", "committedDate": "2020-11-09T07:44:55Z", "type": "commit"}, {"oid": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1", "url": "https://github.com/yegor256/cactoos/commit/4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1", "message": "(#1470) Improve test coverage", "committedDate": "2020-11-09T07:45:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNTYwMA==", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520805600", "bodyText": "@andreoss Please, use LengthOf instead of calling #size().", "author": "fabriciofx", "createdAt": "2020-11-10T19:02:56Z", "path": "src/test/java/org/cactoos/collection/ImmutableTest.java", "diffHunk": "@@ -48,8 +47,8 @@ void size() {\n             \"size() must be equals to original\",\n             new Immutable<>(\n                 new ListOf<>(1, 2)\n-            ),\n-            new HasSize(2)\n+            ).size(),", "originalCommit": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgzNjUzNA==", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520836534", "bodyText": "@fabriciofx #size() is used explicitly for coverage, LengthOf  has the same problem as HasSize (i.e counting elements via #iterator())", "author": "andreoss", "createdAt": "2020-11-10T19:56:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNTYwMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNzcyNg==", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520807726", "bodyText": "@andreoss I think we must improve this message to something like Must behave as a no null collection\" to emphasize the no nulls capability. WDYT?", "author": "fabriciofx", "createdAt": "2020-11-10T19:06:20Z", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+\n+    @Test\n+    void behavesAsCollection() {\n+        new Assertion<>(\n+            \"Must behave as collection\",", "originalCommit": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99f1f9deb88e6b0c14c6fd1ccb34293ea41c3b31", "chunk": "diff --git a/src/test/java/org/cactoos/collection/NoNullsTest.java b/src/test/java/org/cactoos/collection/NoNullsTest.java\nindex b2ff21fb..1612fbe2 100644\n--- a/src/test/java/org/cactoos/collection/NoNullsTest.java\n+++ b/src/test/java/org/cactoos/collection/NoNullsTest.java\n\n@@ -134,7 +134,7 @@ final class NoNullsTest {\n     @Test\n     void behavesAsCollection() {\n         new Assertion<>(\n-            \"Must behave as collection\",\n+            \"Must behave as a no-null collection\",\n             new NoNulls<>(\n                 new ListOf<>(1)\n             ),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNzg5MA==", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520807890", "bodyText": "@Andress the same above.", "author": "fabriciofx", "createdAt": "2020-11-10T19:06:37Z", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+\n+    @Test\n+    void behavesAsCollection() {\n+        new Assertion<>(\n+            \"Must behave as collection\",\n+            new NoNulls<>(\n+                new ListOf<>(1)\n+            ),\n+            new BehavesAsCollection<>(1)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void hasToString() {\n+        new Assertion<>(\n+            \"Must have correct toString\",", "originalCommit": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99f1f9deb88e6b0c14c6fd1ccb34293ea41c3b31", "chunk": "diff --git a/src/test/java/org/cactoos/collection/NoNullsTest.java b/src/test/java/org/cactoos/collection/NoNullsTest.java\nindex b2ff21fb..1612fbe2 100644\n--- a/src/test/java/org/cactoos/collection/NoNullsTest.java\n+++ b/src/test/java/org/cactoos/collection/NoNullsTest.java\n\n@@ -134,7 +134,7 @@ final class NoNullsTest {\n     @Test\n     void behavesAsCollection() {\n         new Assertion<>(\n-            \"Must behave as collection\",\n+            \"Must behave as a no-null collection\",\n             new NoNulls<>(\n                 new ListOf<>(1)\n             ),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODEwNw==", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520808107", "bodyText": "@Andress the same above.", "author": "fabriciofx", "createdAt": "2020-11-10T19:07:02Z", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+\n+    @Test\n+    void behavesAsCollection() {\n+        new Assertion<>(\n+            \"Must behave as collection\",\n+            new NoNulls<>(\n+                new ListOf<>(1)\n+            ),\n+            new BehavesAsCollection<>(1)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void hasToString() {\n+        new Assertion<>(\n+            \"Must have correct toString\",\n+            new NoNulls<>(\n+                new ListOf<>(1, 2, 3)\n+            ),\n+            new HasToString<>(\n+                new StringContainsInOrder(new IterableOf<>(\"1\", \"2\", \"3\"))\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyWhenCleared() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.clear();\n+        new Assertion<>(\n+            \"Must be empty after #clear()\",", "originalCommit": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99f1f9deb88e6b0c14c6fd1ccb34293ea41c3b31", "chunk": "diff --git a/src/test/java/org/cactoos/collection/NoNullsTest.java b/src/test/java/org/cactoos/collection/NoNullsTest.java\nindex b2ff21fb..1612fbe2 100644\n--- a/src/test/java/org/cactoos/collection/NoNullsTest.java\n+++ b/src/test/java/org/cactoos/collection/NoNullsTest.java\n\n@@ -134,7 +134,7 @@ final class NoNullsTest {\n     @Test\n     void behavesAsCollection() {\n         new Assertion<>(\n-            \"Must behave as collection\",\n+            \"Must behave as a no-null collection\",\n             new NoNulls<>(\n                 new ListOf<>(1)\n             ),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODE5NQ==", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520808195", "bodyText": "@Andress the same above.", "author": "fabriciofx", "createdAt": "2020-11-10T19:07:11Z", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+\n+    @Test\n+    void behavesAsCollection() {\n+        new Assertion<>(\n+            \"Must behave as collection\",\n+            new NoNulls<>(\n+                new ListOf<>(1)\n+            ),\n+            new BehavesAsCollection<>(1)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void hasToString() {\n+        new Assertion<>(\n+            \"Must have correct toString\",\n+            new NoNulls<>(\n+                new ListOf<>(1, 2, 3)\n+            ),\n+            new HasToString<>(\n+                new StringContainsInOrder(new IterableOf<>(\"1\", \"2\", \"3\"))\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyWhenCleared() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.clear();\n+        new Assertion<>(\n+            \"Must be empty after #clear()\",\n+            col,\n+            new IsEmptyCollection<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemRemoved() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.remove(1);\n+        new Assertion<>(\n+            \"Must have item removed\",", "originalCommit": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99f1f9deb88e6b0c14c6fd1ccb34293ea41c3b31", "chunk": "diff --git a/src/test/java/org/cactoos/collection/NoNullsTest.java b/src/test/java/org/cactoos/collection/NoNullsTest.java\nindex b2ff21fb..1612fbe2 100644\n--- a/src/test/java/org/cactoos/collection/NoNullsTest.java\n+++ b/src/test/java/org/cactoos/collection/NoNullsTest.java\n\n@@ -134,7 +134,7 @@ final class NoNullsTest {\n     @Test\n     void behavesAsCollection() {\n         new Assertion<>(\n-            \"Must behave as collection\",\n+            \"Must behave as a no-null collection\",\n             new NoNulls<>(\n                 new ListOf<>(1)\n             ),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODMwOQ==", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520808309", "bodyText": "@Andress the same above.", "author": "fabriciofx", "createdAt": "2020-11-10T19:07:24Z", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+\n+    @Test\n+    void behavesAsCollection() {\n+        new Assertion<>(\n+            \"Must behave as collection\",\n+            new NoNulls<>(\n+                new ListOf<>(1)\n+            ),\n+            new BehavesAsCollection<>(1)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void hasToString() {\n+        new Assertion<>(\n+            \"Must have correct toString\",\n+            new NoNulls<>(\n+                new ListOf<>(1, 2, 3)\n+            ),\n+            new HasToString<>(\n+                new StringContainsInOrder(new IterableOf<>(\"1\", \"2\", \"3\"))\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyWhenCleared() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.clear();\n+        new Assertion<>(\n+            \"Must be empty after #clear()\",\n+            col,\n+            new IsEmptyCollection<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemRemoved() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.remove(1);\n+        new Assertion<>(\n+            \"Must have item removed\",\n+            col,\n+            new IsEqual<>(new ListOf<>(2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemAdded() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2)\n+        );\n+        col.add(3);\n+        new Assertion<>(\n+            \"Must have item added\",", "originalCommit": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99f1f9deb88e6b0c14c6fd1ccb34293ea41c3b31", "chunk": "diff --git a/src/test/java/org/cactoos/collection/NoNullsTest.java b/src/test/java/org/cactoos/collection/NoNullsTest.java\nindex b2ff21fb..1612fbe2 100644\n--- a/src/test/java/org/cactoos/collection/NoNullsTest.java\n+++ b/src/test/java/org/cactoos/collection/NoNullsTest.java\n\n@@ -134,7 +134,7 @@ final class NoNullsTest {\n     @Test\n     void behavesAsCollection() {\n         new Assertion<>(\n-            \"Must behave as collection\",\n+            \"Must behave as a no-null collection\",\n             new NoNulls<>(\n                 new ListOf<>(1)\n             ),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODQ3OQ==", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520808479", "bodyText": "@Andress the same above.", "author": "fabriciofx", "createdAt": "2020-11-10T19:07:43Z", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+\n+    @Test\n+    void behavesAsCollection() {\n+        new Assertion<>(\n+            \"Must behave as collection\",\n+            new NoNulls<>(\n+                new ListOf<>(1)\n+            ),\n+            new BehavesAsCollection<>(1)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void hasToString() {\n+        new Assertion<>(\n+            \"Must have correct toString\",\n+            new NoNulls<>(\n+                new ListOf<>(1, 2, 3)\n+            ),\n+            new HasToString<>(\n+                new StringContainsInOrder(new IterableOf<>(\"1\", \"2\", \"3\"))\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyWhenCleared() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.clear();\n+        new Assertion<>(\n+            \"Must be empty after #clear()\",\n+            col,\n+            new IsEmptyCollection<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemRemoved() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.remove(1);\n+        new Assertion<>(\n+            \"Must have item removed\",\n+            col,\n+            new IsEqual<>(new ListOf<>(2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemAdded() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2)\n+        );\n+        col.add(3);\n+        new Assertion<>(\n+            \"Must have item added\",\n+            col,\n+            new IsEqual<>(new ListOf<>(1, 2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void throwsAtAttemptToAddNull() {\n+        new Assertion<>(\n+            \"Must throw exception when add NULL\",", "originalCommit": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99f1f9deb88e6b0c14c6fd1ccb34293ea41c3b31", "chunk": "diff --git a/src/test/java/org/cactoos/collection/NoNullsTest.java b/src/test/java/org/cactoos/collection/NoNullsTest.java\nindex b2ff21fb..1612fbe2 100644\n--- a/src/test/java/org/cactoos/collection/NoNullsTest.java\n+++ b/src/test/java/org/cactoos/collection/NoNullsTest.java\n\n@@ -134,7 +134,7 @@ final class NoNullsTest {\n     @Test\n     void behavesAsCollection() {\n         new Assertion<>(\n-            \"Must behave as collection\",\n+            \"Must behave as a no-null collection\",\n             new NoNulls<>(\n                 new ListOf<>(1)\n             ),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODU1Ng==", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520808556", "bodyText": "@Andress the same above.", "author": "fabriciofx", "createdAt": "2020-11-10T19:07:50Z", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+\n+    @Test\n+    void behavesAsCollection() {\n+        new Assertion<>(\n+            \"Must behave as collection\",\n+            new NoNulls<>(\n+                new ListOf<>(1)\n+            ),\n+            new BehavesAsCollection<>(1)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void hasToString() {\n+        new Assertion<>(\n+            \"Must have correct toString\",\n+            new NoNulls<>(\n+                new ListOf<>(1, 2, 3)\n+            ),\n+            new HasToString<>(\n+                new StringContainsInOrder(new IterableOf<>(\"1\", \"2\", \"3\"))\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyWhenCleared() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.clear();\n+        new Assertion<>(\n+            \"Must be empty after #clear()\",\n+            col,\n+            new IsEmptyCollection<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemRemoved() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.remove(1);\n+        new Assertion<>(\n+            \"Must have item removed\",\n+            col,\n+            new IsEqual<>(new ListOf<>(2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemAdded() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2)\n+        );\n+        col.add(3);\n+        new Assertion<>(\n+            \"Must have item added\",\n+            col,\n+            new IsEqual<>(new ListOf<>(1, 2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void throwsAtAttemptToAddNull() {\n+        new Assertion<>(\n+            \"Must throw exception when add NULL\",\n+            () -> new NoNulls<>(\n+                new ListOf<>(1, 3)\n+            ).add(null),\n+            new Throws<>(\n+                \"Item of #add(T) is NULL\",\n+                IllegalStateException.class\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void removesAll() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.removeAll(new ListOf<>(1, null));\n+        new Assertion<>(\n+            \"Must have an item removed\",", "originalCommit": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99f1f9deb88e6b0c14c6fd1ccb34293ea41c3b31", "chunk": "diff --git a/src/test/java/org/cactoos/collection/NoNullsTest.java b/src/test/java/org/cactoos/collection/NoNullsTest.java\nindex b2ff21fb..1612fbe2 100644\n--- a/src/test/java/org/cactoos/collection/NoNullsTest.java\n+++ b/src/test/java/org/cactoos/collection/NoNullsTest.java\n\n@@ -134,7 +134,7 @@ final class NoNullsTest {\n     @Test\n     void behavesAsCollection() {\n         new Assertion<>(\n-            \"Must behave as collection\",\n+            \"Must behave as a no-null collection\",\n             new NoNulls<>(\n                 new ListOf<>(1)\n             ),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODYxOA==", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520808618", "bodyText": "@Andress the same above.", "author": "fabriciofx", "createdAt": "2020-11-10T19:07:57Z", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+\n+    @Test\n+    void behavesAsCollection() {\n+        new Assertion<>(\n+            \"Must behave as collection\",\n+            new NoNulls<>(\n+                new ListOf<>(1)\n+            ),\n+            new BehavesAsCollection<>(1)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void hasToString() {\n+        new Assertion<>(\n+            \"Must have correct toString\",\n+            new NoNulls<>(\n+                new ListOf<>(1, 2, 3)\n+            ),\n+            new HasToString<>(\n+                new StringContainsInOrder(new IterableOf<>(\"1\", \"2\", \"3\"))\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyWhenCleared() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.clear();\n+        new Assertion<>(\n+            \"Must be empty after #clear()\",\n+            col,\n+            new IsEmptyCollection<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemRemoved() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.remove(1);\n+        new Assertion<>(\n+            \"Must have item removed\",\n+            col,\n+            new IsEqual<>(new ListOf<>(2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemAdded() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2)\n+        );\n+        col.add(3);\n+        new Assertion<>(\n+            \"Must have item added\",\n+            col,\n+            new IsEqual<>(new ListOf<>(1, 2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void throwsAtAttemptToAddNull() {\n+        new Assertion<>(\n+            \"Must throw exception when add NULL\",\n+            () -> new NoNulls<>(\n+                new ListOf<>(1, 3)\n+            ).add(null),\n+            new Throws<>(\n+                \"Item of #add(T) is NULL\",\n+                IllegalStateException.class\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void removesAll() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.removeAll(new ListOf<>(1, null));\n+        new Assertion<>(\n+            \"Must have an item removed\",\n+            col,\n+            new HasValues<>(2, 3)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void retainsAll() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        new Assertion<>(\n+            \"Must return false for the same collection\",", "originalCommit": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99f1f9deb88e6b0c14c6fd1ccb34293ea41c3b31", "chunk": "diff --git a/src/test/java/org/cactoos/collection/NoNullsTest.java b/src/test/java/org/cactoos/collection/NoNullsTest.java\nindex b2ff21fb..1612fbe2 100644\n--- a/src/test/java/org/cactoos/collection/NoNullsTest.java\n+++ b/src/test/java/org/cactoos/collection/NoNullsTest.java\n\n@@ -134,7 +134,7 @@ final class NoNullsTest {\n     @Test\n     void behavesAsCollection() {\n         new Assertion<>(\n-            \"Must behave as collection\",\n+            \"Must behave as a no-null collection\",\n             new NoNulls<>(\n                 new ListOf<>(1)\n             ),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODY4Nw==", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520808687", "bodyText": "@Andress the same above.", "author": "fabriciofx", "createdAt": "2020-11-10T19:08:07Z", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+\n+    @Test\n+    void behavesAsCollection() {\n+        new Assertion<>(\n+            \"Must behave as collection\",\n+            new NoNulls<>(\n+                new ListOf<>(1)\n+            ),\n+            new BehavesAsCollection<>(1)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void hasToString() {\n+        new Assertion<>(\n+            \"Must have correct toString\",\n+            new NoNulls<>(\n+                new ListOf<>(1, 2, 3)\n+            ),\n+            new HasToString<>(\n+                new StringContainsInOrder(new IterableOf<>(\"1\", \"2\", \"3\"))\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyWhenCleared() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.clear();\n+        new Assertion<>(\n+            \"Must be empty after #clear()\",\n+            col,\n+            new IsEmptyCollection<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemRemoved() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.remove(1);\n+        new Assertion<>(\n+            \"Must have item removed\",\n+            col,\n+            new IsEqual<>(new ListOf<>(2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemAdded() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2)\n+        );\n+        col.add(3);\n+        new Assertion<>(\n+            \"Must have item added\",\n+            col,\n+            new IsEqual<>(new ListOf<>(1, 2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void throwsAtAttemptToAddNull() {\n+        new Assertion<>(\n+            \"Must throw exception when add NULL\",\n+            () -> new NoNulls<>(\n+                new ListOf<>(1, 3)\n+            ).add(null),\n+            new Throws<>(\n+                \"Item of #add(T) is NULL\",\n+                IllegalStateException.class\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void removesAll() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.removeAll(new ListOf<>(1, null));\n+        new Assertion<>(\n+            \"Must have an item removed\",\n+            col,\n+            new HasValues<>(2, 3)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void retainsAll() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        new Assertion<>(\n+            \"Must return false for the same collection\",\n+            col.retainAll(new ListOf<>(1, 2, 3)),\n+            new IsNot<>(new IsTrue())\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void retainsAllWithNulls() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        new Assertion<>(\n+            \"Must return false for a different collection\",", "originalCommit": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99f1f9deb88e6b0c14c6fd1ccb34293ea41c3b31", "chunk": "diff --git a/src/test/java/org/cactoos/collection/NoNullsTest.java b/src/test/java/org/cactoos/collection/NoNullsTest.java\nindex b2ff21fb..1612fbe2 100644\n--- a/src/test/java/org/cactoos/collection/NoNullsTest.java\n+++ b/src/test/java/org/cactoos/collection/NoNullsTest.java\n\n@@ -134,7 +134,7 @@ final class NoNullsTest {\n     @Test\n     void behavesAsCollection() {\n         new Assertion<>(\n-            \"Must behave as collection\",\n+            \"Must behave as a no-null collection\",\n             new NoNulls<>(\n                 new ListOf<>(1)\n             ),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODc0MQ==", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520808741", "bodyText": "@Andress the same above.", "author": "fabriciofx", "createdAt": "2020-11-10T19:08:15Z", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+\n+    @Test\n+    void behavesAsCollection() {\n+        new Assertion<>(\n+            \"Must behave as collection\",\n+            new NoNulls<>(\n+                new ListOf<>(1)\n+            ),\n+            new BehavesAsCollection<>(1)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void hasToString() {\n+        new Assertion<>(\n+            \"Must have correct toString\",\n+            new NoNulls<>(\n+                new ListOf<>(1, 2, 3)\n+            ),\n+            new HasToString<>(\n+                new StringContainsInOrder(new IterableOf<>(\"1\", \"2\", \"3\"))\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyWhenCleared() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.clear();\n+        new Assertion<>(\n+            \"Must be empty after #clear()\",\n+            col,\n+            new IsEmptyCollection<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemRemoved() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.remove(1);\n+        new Assertion<>(\n+            \"Must have item removed\",\n+            col,\n+            new IsEqual<>(new ListOf<>(2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemAdded() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2)\n+        );\n+        col.add(3);\n+        new Assertion<>(\n+            \"Must have item added\",\n+            col,\n+            new IsEqual<>(new ListOf<>(1, 2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void throwsAtAttemptToAddNull() {\n+        new Assertion<>(\n+            \"Must throw exception when add NULL\",\n+            () -> new NoNulls<>(\n+                new ListOf<>(1, 3)\n+            ).add(null),\n+            new Throws<>(\n+                \"Item of #add(T) is NULL\",\n+                IllegalStateException.class\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void removesAll() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.removeAll(new ListOf<>(1, null));\n+        new Assertion<>(\n+            \"Must have an item removed\",\n+            col,\n+            new HasValues<>(2, 3)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void retainsAll() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        new Assertion<>(\n+            \"Must return false for the same collection\",\n+            col.retainAll(new ListOf<>(1, 2, 3)),\n+            new IsNot<>(new IsTrue())\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void retainsAllWithNulls() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        new Assertion<>(\n+            \"Must return false for a different collection\",\n+            col.retainAll(new ListOf<>(1, null, 3)),\n+            new IsTrue()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void throwsAtAttemptToRemoveNull() {\n+        new Assertion<>(\n+            \"Must throw exception when removing NULL\",", "originalCommit": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99f1f9deb88e6b0c14c6fd1ccb34293ea41c3b31", "chunk": "diff --git a/src/test/java/org/cactoos/collection/NoNullsTest.java b/src/test/java/org/cactoos/collection/NoNullsTest.java\nindex b2ff21fb..1612fbe2 100644\n--- a/src/test/java/org/cactoos/collection/NoNullsTest.java\n+++ b/src/test/java/org/cactoos/collection/NoNullsTest.java\n\n@@ -134,7 +134,7 @@ final class NoNullsTest {\n     @Test\n     void behavesAsCollection() {\n         new Assertion<>(\n-            \"Must behave as collection\",\n+            \"Must behave as a no-null collection\",\n             new NoNulls<>(\n                 new ListOf<>(1)\n             ),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxMDI1NQ==", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520810255", "bodyText": "@andreoss Please, add a test to check a new NoNulls(new ListOf<>()) (a list already created empty).", "author": "fabriciofx", "createdAt": "2020-11-10T19:11:01Z", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+", "originalCommit": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE4NjkyOA==", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r521186928", "bodyText": "@fabriciofx Added", "author": "andreoss", "createdAt": "2020-11-11T08:16:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxMDI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "99f1f9deb88e6b0c14c6fd1ccb34293ea41c3b31", "chunk": "diff --git a/src/test/java/org/cactoos/collection/NoNullsTest.java b/src/test/java/org/cactoos/collection/NoNullsTest.java\nindex b2ff21fb..1612fbe2 100644\n--- a/src/test/java/org/cactoos/collection/NoNullsTest.java\n+++ b/src/test/java/org/cactoos/collection/NoNullsTest.java\n\n@@ -134,7 +134,7 @@ final class NoNullsTest {\n     @Test\n     void behavesAsCollection() {\n         new Assertion<>(\n-            \"Must behave as collection\",\n+            \"Must behave as a no-null collection\",\n             new NoNulls<>(\n                 new ListOf<>(1)\n             ),\n"}}, {"oid": "99f1f9deb88e6b0c14c6fd1ccb34293ea41c3b31", "url": "https://github.com/yegor256/cactoos/commit/99f1f9deb88e6b0c14c6fd1ccb34293ea41c3b31", "message": "(#1470) Clarify error messages", "committedDate": "2020-11-11T08:14:00Z", "type": "commit"}, {"oid": "99f1f9deb88e6b0c14c6fd1ccb34293ea41c3b31", "url": "https://github.com/yegor256/cactoos/commit/99f1f9deb88e6b0c14c6fd1ccb34293ea41c3b31", "message": "(#1470) Clarify error messages", "committedDate": "2020-11-11T08:14:00Z", "type": "forcePushed"}]}