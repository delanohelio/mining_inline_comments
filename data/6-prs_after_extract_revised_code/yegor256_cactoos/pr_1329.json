{"pr_number": 1329, "pr_title": "#1325 - Sorted now implements SortedSet.", "pr_createdAt": "2020-03-20T10:15:02Z", "pr_url": "https://github.com/yegor256/cactoos/pull/1329", "timeline": [{"oid": "37f2408ea3d399879278db9264b8f4f4ed2bdc39", "url": "https://github.com/yegor256/cactoos/commit/37f2408ea3d399879278db9264b8f4f4ed2bdc39", "message": "#1325 - Sorted now implements SortedSet.", "committedDate": "2020-03-20T10:13:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4Mzc2OQ==", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r395983769", "bodyText": "@vzurauskas can you introduce a SortedSetEnvelope (that extends SetEnvelope) responsible of delegating to a wrapped set and have Sorted only responsible of handling the Iterable-based constructor.", "author": "victornoel", "createdAt": "2020-03-21T11:11:18Z", "path": "src/main/java/org/cactoos/set/Sorted.java", "diffHunk": "@@ -35,11 +36,14 @@\n  *\n  * @param <T> Set type\n  * @since 1.0.0\n- * @todo #1292:30min This class should also implements SortedSet\n- *  from the java collection framework by delegating to the\n- *  wrapped set. Some tests must be added for it.\n  */\n-public final class Sorted<T> extends SetEnvelope<T> {\n+@SuppressWarnings(\"PMD.OnlyOneConstructorShouldDoInitialization\")\n+public final class Sorted<T> extends SetEnvelope<T> implements SortedSet<T> {", "originalCommit": "37f2408ea3d399879278db9264b8f4f4ed2bdc39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwNzkyNQ==", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r399407925", "bodyText": "@victornoel Yes, good idea.", "author": "vzurauskas", "createdAt": "2020-03-27T16:56:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4Mzc2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "415d354ce247fd058218b22ca6886c47e2928afd", "chunk": "diff --git a/src/main/java/org/cactoos/set/Sorted.java b/src/main/java/org/cactoos/set/Sorted.java\nindex 1bdc1f4b..a63887b7 100644\n--- a/src/main/java/org/cactoos/set/Sorted.java\n+++ b/src/main/java/org/cactoos/set/Sorted.java\n\n@@ -37,13 +36,7 @@ import org.cactoos.iterable.IterableOf;\n  * @param <T> Set type\n  * @since 1.0.0\n  */\n-@SuppressWarnings(\"PMD.OnlyOneConstructorShouldDoInitialization\")\n-public final class Sorted<T> extends SetEnvelope<T> implements SortedSet<T> {\n-\n-    /**\n-     * The original Set this object delegates to.\n-     */\n-    private final SortedSet<T> origin;\n+public final class Sorted<T> extends SortedSetEnvelope<T> {\n \n     /**\n      * Ctor.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4Mzc4OA==", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r395983788", "bodyText": "@vzurauskas this can be removed if you introduce the SortedSetEnvelope as proposer in the other comment", "author": "victornoel", "createdAt": "2020-03-21T11:11:37Z", "path": "src/main/java/org/cactoos/set/Sorted.java", "diffHunk": "@@ -35,11 +36,14 @@\n  *\n  * @param <T> Set type\n  * @since 1.0.0\n- * @todo #1292:30min This class should also implements SortedSet\n- *  from the java collection framework by delegating to the\n- *  wrapped set. Some tests must be added for it.\n  */\n-public final class Sorted<T> extends SetEnvelope<T> {\n+@SuppressWarnings(\"PMD.OnlyOneConstructorShouldDoInitialization\")", "originalCommit": "37f2408ea3d399879278db9264b8f4f4ed2bdc39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwODEwOQ==", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r399408109", "bodyText": "@victornoel Right.", "author": "vzurauskas", "createdAt": "2020-03-27T16:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4Mzc4OA=="}], "type": "inlineReview", "revised_code": {"commit": "415d354ce247fd058218b22ca6886c47e2928afd", "chunk": "diff --git a/src/main/java/org/cactoos/set/Sorted.java b/src/main/java/org/cactoos/set/Sorted.java\nindex 1bdc1f4b..a63887b7 100644\n--- a/src/main/java/org/cactoos/set/Sorted.java\n+++ b/src/main/java/org/cactoos/set/Sorted.java\n\n@@ -37,13 +36,7 @@ import org.cactoos.iterable.IterableOf;\n  * @param <T> Set type\n  * @since 1.0.0\n  */\n-@SuppressWarnings(\"PMD.OnlyOneConstructorShouldDoInitialization\")\n-public final class Sorted<T> extends SetEnvelope<T> implements SortedSet<T> {\n-\n-    /**\n-     * The original Set this object delegates to.\n-     */\n-    private final SortedSet<T> origin;\n+public final class Sorted<T> extends SortedSetEnvelope<T> {\n \n     /**\n      * Ctor.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4Mzg5OA==", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r395983898", "bodyText": "@vzurauskas I think you can use directly IsEqual with a new SetOf.", "author": "victornoel", "createdAt": "2020-03-21T11:13:16Z", "path": "src/test/java/org/cactoos/set/SortedTest.java", "diffHunk": "@@ -125,4 +125,75 @@ public void mustNotBeEqualToSortedSet() {\n                 ))\n         ).affirm();\n     }\n+\n+    @Test\n+    public void returnsCorrectComparator() {\n+        final Comparator<Integer> comparator = Integer::compareTo;\n+        new Assertion<>(\n+            \"Comparator must be the same\",\n+            new Sorted<>(comparator, 1, 2, 3).comparator(),\n+            new IsEqual<>(comparator)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void returnsSubset() {\n+        new Assertion<>(\n+            \"Must return sorted subset\",\n+            new Sorted<>(Integer::compareTo, 3, 6, 1, 9, 3).subSet(3, 9),\n+            new IsIterableContainingInOrder<>(", "originalCommit": "37f2408ea3d399879278db9264b8f4f4ed2bdc39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwOTA2OA==", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r399409068", "bodyText": "@victornoel It will ignore order, since normal sets are unordered. I need to make sure the order is right here.", "author": "vzurauskas", "createdAt": "2020-03-27T16:58:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4Mzg5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQxNTk3Nw==", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r399415977", "bodyText": "@vzurauskas ah yes of course!", "author": "victornoel", "createdAt": "2020-03-27T17:09:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4Mzg5OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4MzkzNg==", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r395983936", "bodyText": "@vzurauskas same here, IsEqual with a new SetOf.", "author": "victornoel", "createdAt": "2020-03-21T11:13:46Z", "path": "src/test/java/org/cactoos/set/SortedTest.java", "diffHunk": "@@ -125,4 +125,75 @@ public void mustNotBeEqualToSortedSet() {\n                 ))\n         ).affirm();\n     }\n+\n+    @Test\n+    public void returnsCorrectComparator() {\n+        final Comparator<Integer> comparator = Integer::compareTo;\n+        new Assertion<>(\n+            \"Comparator must be the same\",\n+            new Sorted<>(comparator, 1, 2, 3).comparator(),\n+            new IsEqual<>(comparator)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void returnsSubset() {\n+        new Assertion<>(\n+            \"Must return sorted subset\",\n+            new Sorted<>(Integer::compareTo, 3, 6, 1, 9, 3).subSet(3, 9),\n+            new IsIterableContainingInOrder<>(\n+                new ListOf<Matcher<? super Integer>>(\n+                    new IsEqual<>(3),\n+                    new IsEqual<>(6)\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void returnsHeadset() {\n+        new Assertion<>(\n+            \"Must return sorted headset\",\n+            new Sorted<>(Integer::compareTo, 3, 6, 1, 9, 3).headSet(9),\n+            new IsIterableContainingInOrder<>(", "originalCommit": "37f2408ea3d399879278db9264b8f4f4ed2bdc39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwOTI0Mg==", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r399409242", "bodyText": "@victornoel Same answer.", "author": "vzurauskas", "createdAt": "2020-03-27T16:58:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4MzkzNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4MzkzOQ==", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r395983939", "bodyText": "@vzurauskas same here, IsEqual with a new SetOf.", "author": "victornoel", "createdAt": "2020-03-21T11:13:51Z", "path": "src/test/java/org/cactoos/set/SortedTest.java", "diffHunk": "@@ -125,4 +125,75 @@ public void mustNotBeEqualToSortedSet() {\n                 ))\n         ).affirm();\n     }\n+\n+    @Test\n+    public void returnsCorrectComparator() {\n+        final Comparator<Integer> comparator = Integer::compareTo;\n+        new Assertion<>(\n+            \"Comparator must be the same\",\n+            new Sorted<>(comparator, 1, 2, 3).comparator(),\n+            new IsEqual<>(comparator)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void returnsSubset() {\n+        new Assertion<>(\n+            \"Must return sorted subset\",\n+            new Sorted<>(Integer::compareTo, 3, 6, 1, 9, 3).subSet(3, 9),\n+            new IsIterableContainingInOrder<>(\n+                new ListOf<Matcher<? super Integer>>(\n+                    new IsEqual<>(3),\n+                    new IsEqual<>(6)\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void returnsHeadset() {\n+        new Assertion<>(\n+            \"Must return sorted headset\",\n+            new Sorted<>(Integer::compareTo, 3, 6, 1, 9, 3).headSet(9),\n+            new IsIterableContainingInOrder<>(\n+                new ListOf<Matcher<? super Integer>>(\n+                    new IsEqual<>(1),\n+                    new IsEqual<>(3),\n+                    new IsEqual<>(6)\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void returnsTailset() {\n+        new Assertion<>(\n+            \"Must return sorted tailset\",\n+            new Sorted<>(Integer::compareTo, 3, 6, 1, 9, 3).tailSet(6),\n+            new IsIterableContainingInOrder<>(", "originalCommit": "37f2408ea3d399879278db9264b8f4f4ed2bdc39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwOTQ5MQ==", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r399409491", "bodyText": "@victornoel Same answer.", "author": "vzurauskas", "createdAt": "2020-03-27T16:59:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4MzkzOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "415d354ce247fd058218b22ca6886c47e2928afd", "url": "https://github.com/yegor256/cactoos/commit/415d354ce247fd058218b22ca6886c47e2928afd", "message": "#1325 - Introduced SortedSetEnvelope.", "committedDate": "2020-03-27T16:59:39Z", "type": "commit"}]}