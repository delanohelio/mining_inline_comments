{"pr_number": 1492, "pr_title": "#1481: Introduce iterator.Matched", "pr_createdAt": "2020-11-01T01:59:40Z", "pr_url": "https://github.com/yegor256/cactoos/pull/1492", "timeline": [{"oid": "3e556445048d9f998b743cd823a3dbf5fbdd58d8", "url": "https://github.com/yegor256/cactoos/commit/3e556445048d9f998b743cd823a3dbf5fbdd58d8", "message": "(#1481) Add `iterator.Matched'", "committedDate": "2020-11-01T01:39:26Z", "type": "commit"}, {"oid": "1f8e12bb95ee3390da49b89efa2b5b62ca005e24", "url": "https://github.com/yegor256/cactoos/commit/1f8e12bb95ee3390da49b89efa2b5b62ca005e24", "message": "(#1481) Use `iterator.Matched' in `iterable.Matched'", "committedDate": "2020-11-01T01:57:37Z", "type": "commit"}, {"oid": "b67dd214768125f40ca86320b64f43b6c6797d12", "url": "https://github.com/yegor256/cactoos/commit/b67dd214768125f40ca86320b64f43b6c6797d12", "message": "(#1481) Add license", "committedDate": "2020-11-01T01:57:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MTkxOQ==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515681919", "bodyText": "@andreoss Fix the message: \"There is no...\"", "author": "fabriciofx", "createdAt": "2020-11-01T22:38:38Z", "path": "src/main/java/org/cactoos/iterator/Matched.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import java.util.Iterator;\n+import org.cactoos.BiFunc;\n+import org.cactoos.func.UncheckedBiFunc;\n+import org.cactoos.text.FormattedText;\n+\n+/**\n+ * Matched iterator.\n+ *\n+ * Iterates over 2 iterators at the same time and verify that elements with the\n+ * same position has correlation by the function. The function might be equals,\n+ * endsWith, greaterThen, nonNull, empty, negative, positive, etc.\n+ *\n+ * @param <X> Type of item in first iterator.\n+ * @param <Y> Type of item in second iterator.\n+ * @since 0.47\n+ */\n+public final class Matched<X, Y> implements Iterator<X> {\n+\n+    /**\n+     * The correlation function.\n+     */\n+    private final UncheckedBiFunc<? super X, ? super Y, Boolean> func;\n+\n+    /**\n+     * First iterator.\n+     */\n+    private final Iterator<? extends X> first;\n+\n+    /**\n+     * Second iterator.\n+     */\n+    private final Iterator<? extends Y> second;\n+\n+    /**\n+     * Ctor.\n+     * @param fnc The function to detect the correlation between elements.\n+     * @param fst The first part of duplex iterator.\n+     * @param snd The second part of duplex iterator.\n+     */\n+    public Matched(\n+        final BiFunc<? super X, ? super Y, Boolean> fnc,\n+        final Iterator<? extends X> fst,\n+        final Iterator<? extends Y> snd\n+    ) {\n+        this.func = new UncheckedBiFunc<>(fnc);\n+        this.first = fst;\n+        this.second = snd;\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+        return this.first.hasNext() || this.second.hasNext();\n+    }\n+\n+    @Override\n+    public X next() {\n+        if (!this.first.hasNext() || !this.second.hasNext()) {\n+            throw new IllegalStateException(\"Size mismatch of iterators\");\n+        }\n+        final X fvl = this.first.next();\n+        final Y svl = this.second.next();\n+        if (this.func.apply(fvl, svl)) {\n+            return fvl;\n+        } else {\n+            throw new IllegalStateException(\n+                new FormattedText(\n+                    \"The is no correlation between `%s` and `%s`.\",", "originalCommit": "b67dd214768125f40ca86320b64f43b6c6797d12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcwNjI5OQ==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515706299", "bodyText": "@fabriciofx Done. Btw it was this way before (https://github.com/yegor256/cactoos/blame/a8e0dab24ce2f9b661cc0aa68e3b828683949bd6/src/main/java/org/cactoos/iterable/Matched.java#L94)", "author": "andreoss", "createdAt": "2020-11-02T01:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MTkxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyNDU5Mw==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r516224593", "bodyText": "@andreoss My fault. I didn't see it. Sorry.", "author": "fabriciofx", "createdAt": "2020-11-02T20:06:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MTkxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "4649e746ca0b41035601ca8de0d0b99d9e3d8856", "chunk": "diff --git a/src/main/java/org/cactoos/iterator/Matched.java b/src/main/java/org/cactoos/iterator/Matched.java\nindex e45db7a0..1daca5ac 100644\n--- a/src/main/java/org/cactoos/iterator/Matched.java\n+++ b/src/main/java/org/cactoos/iterator/Matched.java\n\n@@ -84,16 +84,15 @@ public final class Matched<X, Y> implements Iterator<X> {\n         }\n         final X fvl = this.first.next();\n         final Y svl = this.second.next();\n-        if (this.func.apply(fvl, svl)) {\n-            return fvl;\n-        } else {\n+        if (!this.func.apply(fvl, svl)) {\n             throw new IllegalStateException(\n                 new FormattedText(\n-                    \"The is no correlation between `%s` and `%s`.\",\n+                    \"There is no correlation between `%s` and `%s`.\",\n                     fvl, svl\n                 ).toString()\n             );\n         }\n+        return fvl;\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MjE5Nw==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515682197", "bodyText": "@andreoss I think will be more readable if use:\nif (!this.func.apply(fvl, svl)) {\n  throw new IllegalStatementException(...);\n}\nreturn fvl;", "author": "fabriciofx", "createdAt": "2020-11-01T22:40:57Z", "path": "src/main/java/org/cactoos/iterator/Matched.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import java.util.Iterator;\n+import org.cactoos.BiFunc;\n+import org.cactoos.func.UncheckedBiFunc;\n+import org.cactoos.text.FormattedText;\n+\n+/**\n+ * Matched iterator.\n+ *\n+ * Iterates over 2 iterators at the same time and verify that elements with the\n+ * same position has correlation by the function. The function might be equals,\n+ * endsWith, greaterThen, nonNull, empty, negative, positive, etc.\n+ *\n+ * @param <X> Type of item in first iterator.\n+ * @param <Y> Type of item in second iterator.\n+ * @since 0.47\n+ */\n+public final class Matched<X, Y> implements Iterator<X> {\n+\n+    /**\n+     * The correlation function.\n+     */\n+    private final UncheckedBiFunc<? super X, ? super Y, Boolean> func;\n+\n+    /**\n+     * First iterator.\n+     */\n+    private final Iterator<? extends X> first;\n+\n+    /**\n+     * Second iterator.\n+     */\n+    private final Iterator<? extends Y> second;\n+\n+    /**\n+     * Ctor.\n+     * @param fnc The function to detect the correlation between elements.\n+     * @param fst The first part of duplex iterator.\n+     * @param snd The second part of duplex iterator.\n+     */\n+    public Matched(\n+        final BiFunc<? super X, ? super Y, Boolean> fnc,\n+        final Iterator<? extends X> fst,\n+        final Iterator<? extends Y> snd\n+    ) {\n+        this.func = new UncheckedBiFunc<>(fnc);\n+        this.first = fst;\n+        this.second = snd;\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+        return this.first.hasNext() || this.second.hasNext();\n+    }\n+\n+    @Override\n+    public X next() {\n+        if (!this.first.hasNext() || !this.second.hasNext()) {\n+            throw new IllegalStateException(\"Size mismatch of iterators\");\n+        }\n+        final X fvl = this.first.next();\n+        final Y svl = this.second.next();\n+        if (this.func.apply(fvl, svl)) {", "originalCommit": "b67dd214768125f40ca86320b64f43b6c6797d12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcwNTkyMg==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515705922", "bodyText": "@fabriciofx Done.", "author": "andreoss", "createdAt": "2020-11-02T01:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MjE5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4649e746ca0b41035601ca8de0d0b99d9e3d8856", "chunk": "diff --git a/src/main/java/org/cactoos/iterator/Matched.java b/src/main/java/org/cactoos/iterator/Matched.java\nindex e45db7a0..1daca5ac 100644\n--- a/src/main/java/org/cactoos/iterator/Matched.java\n+++ b/src/main/java/org/cactoos/iterator/Matched.java\n\n@@ -84,16 +84,15 @@ public final class Matched<X, Y> implements Iterator<X> {\n         }\n         final X fvl = this.first.next();\n         final Y svl = this.second.next();\n-        if (this.func.apply(fvl, svl)) {\n-            return fvl;\n-        } else {\n+        if (!this.func.apply(fvl, svl)) {\n             throw new IllegalStateException(\n                 new FormattedText(\n-                    \"The is no correlation between `%s` and `%s`.\",\n+                    \"There is no correlation between `%s` and `%s`.\",\n                     fvl, svl\n                 ).toString()\n             );\n         }\n+        return fvl;\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MjMzNg==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515682336", "bodyText": "@andreoss Please, change ```  for '.", "author": "fabriciofx", "createdAt": "2020-11-01T22:42:11Z", "path": "src/test/java/org/cactoos/iterable/MatchedTest.java", "diffHunk": "@@ -56,11 +57,13 @@ public void iterator() {\n     public void noCorrelationWithBiggerSecondIterable() {\n         new Assertion<>(\n             \"All elements have correlation function as `endsWith`\",", "originalCommit": "b67dd214768125f40ca86320b64f43b6c6797d12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcwNDg4Ng==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515704886", "bodyText": "@fabriciofx Do you mean in general or in the tests cases?", "author": "andreoss", "createdAt": "2020-11-02T01:45:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MjMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyNDM2Ng==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r516224366", "bodyText": "@andreoss In general", "author": "fabriciofx", "createdAt": "2020-11-02T20:05:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MjMzNg=="}], "type": "inlineReview", "revised_code": {"commit": "4649e746ca0b41035601ca8de0d0b99d9e3d8856", "chunk": "diff --git a/src/test/java/org/cactoos/iterable/MatchedTest.java b/src/test/java/org/cactoos/iterable/MatchedTest.java\nindex 16115e52..d3bc8f1f 100644\n--- a/src/test/java/org/cactoos/iterable/MatchedTest.java\n+++ b/src/test/java/org/cactoos/iterable/MatchedTest.java\n\n@@ -56,12 +56,12 @@ public final class MatchedTest {\n     @Test\n     public void noCorrelationWithBiggerSecondIterable() {\n         new Assertion<>(\n-            \"All elements have correlation function as `endsWith`\",\n+            \"All elements have correlation function as 'endsWith'\",\n             () -> new ListOf<>(\n                 new Matched<>(\n                     (fst, snd) -> fst.endsWith(\"elem\") && snd.endsWith(\"elem\"),\n                     new IterableOf<>(\"1st elem\", \"2nd elem\"),\n-                    new IterableOf<>(\"`A` elem\", \"`B` elem\", \"'C' elem\")\n+                    new IterableOf<>(\"'A' elem\", \"'B' elem\", \"'C' elem\")\n                 )\n             ),\n             new Throws<>(IllegalStateException.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MjcyNg==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515682726", "bodyText": "@andreoss the same above.", "author": "fabriciofx", "createdAt": "2020-11-01T22:45:47Z", "path": "src/test/java/org/cactoos/iterable/MatchedTest.java", "diffHunk": "@@ -56,11 +57,13 @@ public void iterator() {\n     public void noCorrelationWithBiggerSecondIterable() {\n         new Assertion<>(\n             \"All elements have correlation function as `endsWith`\",\n-            () -> new Matched<>(\n-                (fst, snd) -> fst.endsWith(\"elem\") && snd.endsWith(\"elem\"),\n-                new IterableOf<>(\"1st elem\", \"2nd elem\"),\n-                new IterableOf<>(\"`A` elem\", \"`B` elem\", \"'C' elem\")\n-            ).iterator(),\n+            () -> new ListOf<>(\n+                new Matched<>(\n+                    (fst, snd) -> fst.endsWith(\"elem\") && snd.endsWith(\"elem\"),\n+                    new IterableOf<>(\"1st elem\", \"2nd elem\"),\n+                    new IterableOf<>(\"`A` elem\", \"`B` elem\", \"'C' elem\")", "originalCommit": "b67dd214768125f40ca86320b64f43b6c6797d12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4649e746ca0b41035601ca8de0d0b99d9e3d8856", "chunk": "diff --git a/src/test/java/org/cactoos/iterable/MatchedTest.java b/src/test/java/org/cactoos/iterable/MatchedTest.java\nindex 16115e52..d3bc8f1f 100644\n--- a/src/test/java/org/cactoos/iterable/MatchedTest.java\n+++ b/src/test/java/org/cactoos/iterable/MatchedTest.java\n\n@@ -56,12 +56,12 @@ public final class MatchedTest {\n     @Test\n     public void noCorrelationWithBiggerSecondIterable() {\n         new Assertion<>(\n-            \"All elements have correlation function as `endsWith`\",\n+            \"All elements have correlation function as 'endsWith'\",\n             () -> new ListOf<>(\n                 new Matched<>(\n                     (fst, snd) -> fst.endsWith(\"elem\") && snd.endsWith(\"elem\"),\n                     new IterableOf<>(\"1st elem\", \"2nd elem\"),\n-                    new IterableOf<>(\"`A` elem\", \"`B` elem\", \"'C' elem\")\n+                    new IterableOf<>(\"'A' elem\", \"'B' elem\", \"'C' elem\")\n                 )\n             ),\n             new Throws<>(IllegalStateException.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4Mjc0OA==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515682748", "bodyText": "@andreoss the same above.", "author": "fabriciofx", "createdAt": "2020-11-01T22:45:56Z", "path": "src/test/java/org/cactoos/iterable/MatchedTest.java", "diffHunk": "@@ -69,11 +72,13 @@ public void noCorrelationWithBiggerSecondIterable() {\n     public void noCorrelationWithSmallerSecondIterable() {\n         new Assertion<>(\n             \"All elements have correlation function as `endsWith`\",\n-            () -> new Matched<>(\n-                (fst, snd) -> fst.endsWith(\"elem\") && snd.endsWith(\"elem\"),\n-                new IterableOf<>(\"1st elem\", \"2nd elem\", \"3rd elem\"),\n-                new IterableOf<>(\"`A` elem\", \"`B` elem\")\n-            ).iterator(),\n+            () -> new ListOf<>(\n+                new Matched<>(\n+                    (fst, snd) -> fst.endsWith(\"elem\") && snd.endsWith(\"elem\"),\n+                    new IterableOf<>(\"1st elem\", \"2nd elem\", \"3rd elem\"),\n+                    new IterableOf<>(\"`A` elem\", \"`B` elem\")", "originalCommit": "b67dd214768125f40ca86320b64f43b6c6797d12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4Mjc1Nw==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515682757", "bodyText": "@andreoss the same above.", "author": "fabriciofx", "createdAt": "2020-11-01T22:46:02Z", "path": "src/test/java/org/cactoos/iterable/MatchedTest.java", "diffHunk": "@@ -69,11 +72,13 @@ public void noCorrelationWithBiggerSecondIterable() {\n     public void noCorrelationWithSmallerSecondIterable() {\n         new Assertion<>(\n             \"All elements have correlation function as `endsWith`\",", "originalCommit": "b67dd214768125f40ca86320b64f43b6c6797d12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4Mjc4Nw==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515682787", "bodyText": "@andreoss the same above and fix the message as 'equals'.", "author": "fabriciofx", "createdAt": "2020-11-01T22:46:17Z", "path": "src/test/java/org/cactoos/iterator/MatchedTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import java.util.Objects;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.HasValues;\n+import org.llorllale.cactoos.matchers.Throws;\n+\n+/**\n+ * Test case for {@link Mapped}.\n+ * @since 0.47\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ */\n+final class MatchedTest {\n+    @Test\n+    void failsWhenElementsNotMatch() {\n+        new Assertion<>(\n+            \"All elements have correlation function as `equal`\",", "originalCommit": "b67dd214768125f40ca86320b64f43b6c6797d12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcwNjIxNA==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515706214", "bodyText": "@fabriciofx Done.", "author": "andreoss", "createdAt": "2020-11-02T01:53:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4Mjc4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4649e746ca0b41035601ca8de0d0b99d9e3d8856", "chunk": "diff --git a/src/test/java/org/cactoos/iterator/MatchedTest.java b/src/test/java/org/cactoos/iterator/MatchedTest.java\nindex 3ea725a2..00c76e73 100644\n--- a/src/test/java/org/cactoos/iterator/MatchedTest.java\n+++ b/src/test/java/org/cactoos/iterator/MatchedTest.java\n\n@@ -40,7 +40,7 @@ final class MatchedTest {\n     @Test\n     void failsWhenElementsNotMatch() {\n         new Assertion<>(\n-            \"All elements have correlation function as `equal`\",\n+            \"All elements have correlation function 'equals'\",\n             () -> new ListOf<>(\n                 new Matched<>(\n                     Objects::equals,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MjgyOQ==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515682829", "bodyText": "@andreoss the same above and fix the message \"There is no...\"", "author": "fabriciofx", "createdAt": "2020-11-01T22:46:39Z", "path": "src/test/java/org/cactoos/iterator/MatchedTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import java.util.Objects;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.HasValues;\n+import org.llorllale.cactoos.matchers.Throws;\n+\n+/**\n+ * Test case for {@link Mapped}.\n+ * @since 0.47\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ */\n+final class MatchedTest {\n+    @Test\n+    void failsWhenElementsNotMatch() {\n+        new Assertion<>(\n+            \"All elements have correlation function as `equal`\",\n+            () -> new ListOf<>(\n+                new Matched<>(\n+                    Objects::equals,\n+                    new IteratorOf<>(1),\n+                    new IteratorOf<>(0)\n+                )\n+            ),\n+            new Throws<>(\n+                new IsEqual<>(\n+                    \"The is no correlation between `1` and `0`.\"", "originalCommit": "b67dd214768125f40ca86320b64f43b6c6797d12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4649e746ca0b41035601ca8de0d0b99d9e3d8856", "chunk": "diff --git a/src/test/java/org/cactoos/iterator/MatchedTest.java b/src/test/java/org/cactoos/iterator/MatchedTest.java\nindex 3ea725a2..00c76e73 100644\n--- a/src/test/java/org/cactoos/iterator/MatchedTest.java\n+++ b/src/test/java/org/cactoos/iterator/MatchedTest.java\n\n@@ -40,7 +40,7 @@ final class MatchedTest {\n     @Test\n     void failsWhenElementsNotMatch() {\n         new Assertion<>(\n-            \"All elements have correlation function as `equal`\",\n+            \"All elements have correlation function 'equals'\",\n             () -> new ListOf<>(\n                 new Matched<>(\n                     Objects::equals,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MzQ2Ng==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515683466", "bodyText": "@andreoss Please, be more specific: sizes are different.... sizes of what?", "author": "fabriciofx", "createdAt": "2020-11-01T22:52:23Z", "path": "src/test/java/org/cactoos/iterator/MatchedTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import java.util.Objects;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.HasValues;\n+import org.llorllale.cactoos.matchers.Throws;\n+\n+/**\n+ * Test case for {@link Mapped}.\n+ * @since 0.47\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ */\n+final class MatchedTest {\n+    @Test\n+    void failsWhenElementsNotMatch() {\n+        new Assertion<>(\n+            \"All elements have correlation function as `equal`\",\n+            () -> new ListOf<>(\n+                new Matched<>(\n+                    Objects::equals,\n+                    new IteratorOf<>(1),\n+                    new IteratorOf<>(0)\n+                )\n+            ),\n+            new Throws<>(\n+                new IsEqual<>(\n+                    \"The is no correlation between `1` and `0`.\"\n+                ),\n+                IllegalStateException.class\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void failsOnSizeMismatch() {\n+        new Assertion<>(\n+            \"must fail if sizes are different\",", "originalCommit": "b67dd214768125f40ca86320b64f43b6c6797d12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcwNjI2OQ==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515706269", "bodyText": "@fabriciofx Done.", "author": "andreoss", "createdAt": "2020-11-02T01:53:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MzQ2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4649e746ca0b41035601ca8de0d0b99d9e3d8856", "chunk": "diff --git a/src/test/java/org/cactoos/iterator/MatchedTest.java b/src/test/java/org/cactoos/iterator/MatchedTest.java\nindex 3ea725a2..00c76e73 100644\n--- a/src/test/java/org/cactoos/iterator/MatchedTest.java\n+++ b/src/test/java/org/cactoos/iterator/MatchedTest.java\n\n@@ -40,7 +40,7 @@ final class MatchedTest {\n     @Test\n     void failsWhenElementsNotMatch() {\n         new Assertion<>(\n-            \"All elements have correlation function as `equal`\",\n+            \"All elements have correlation function 'equals'\",\n             () -> new ListOf<>(\n                 new Matched<>(\n                     Objects::equals,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MzU3NA==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515683574", "bodyText": "@andreoss The same above.", "author": "fabriciofx", "createdAt": "2020-11-01T22:52:47Z", "path": "src/test/java/org/cactoos/iterator/MatchedTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import java.util.Objects;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.HasValues;\n+import org.llorllale.cactoos.matchers.Throws;\n+\n+/**\n+ * Test case for {@link Mapped}.\n+ * @since 0.47\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ */\n+final class MatchedTest {\n+    @Test\n+    void failsWhenElementsNotMatch() {\n+        new Assertion<>(\n+            \"All elements have correlation function as `equal`\",\n+            () -> new ListOf<>(\n+                new Matched<>(\n+                    Objects::equals,\n+                    new IteratorOf<>(1),\n+                    new IteratorOf<>(0)\n+                )\n+            ),\n+            new Throws<>(\n+                new IsEqual<>(\n+                    \"The is no correlation between `1` and `0`.\"\n+                ),\n+                IllegalStateException.class\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void failsOnSizeMismatch() {\n+        new Assertion<>(\n+            \"must fail if sizes are different\",\n+            () -> new ListOf<>(\n+                new Matched<>(\n+                    Objects::equals,\n+                    new IteratorOf<>(1),\n+                    new IteratorOf<>()\n+                )\n+            ),\n+            new Throws<>(\n+                new IsEqual<>(\"Size mismatch of iterators\"),\n+                IllegalStateException.class\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void shouldProduceValuesOfFirstIterator() {\n+        new Assertion<>(\n+            \"must correlate all items\",", "originalCommit": "b67dd214768125f40ca86320b64f43b6c6797d12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcwNjI4Mw==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515706283", "bodyText": "@fabriciofx Done.", "author": "andreoss", "createdAt": "2020-11-02T01:53:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MzU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "4649e746ca0b41035601ca8de0d0b99d9e3d8856", "chunk": "diff --git a/src/test/java/org/cactoos/iterator/MatchedTest.java b/src/test/java/org/cactoos/iterator/MatchedTest.java\nindex 3ea725a2..00c76e73 100644\n--- a/src/test/java/org/cactoos/iterator/MatchedTest.java\n+++ b/src/test/java/org/cactoos/iterator/MatchedTest.java\n\n@@ -40,7 +40,7 @@ final class MatchedTest {\n     @Test\n     void failsWhenElementsNotMatch() {\n         new Assertion<>(\n-            \"All elements have correlation function as `equal`\",\n+            \"All elements have correlation function 'equals'\",\n             () -> new ListOf<>(\n                 new Matched<>(\n                     Objects::equals,\n"}}, {"oid": "4649e746ca0b41035601ca8de0d0b99d9e3d8856", "url": "https://github.com/yegor256/cactoos/commit/4649e746ca0b41035601ca8de0d0b99d9e3d8856", "message": "(#1481) Fix quotes & typo in message", "committedDate": "2020-11-02T01:50:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2NzU5MA==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r516567590", "bodyText": "@andreoss from previous discussions, I thought the Y parameter could be moved at the constructor level", "author": "victornoel", "createdAt": "2020-11-03T10:34:19Z", "path": "src/main/java/org/cactoos/iterator/Matched.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import java.util.Iterator;\n+import org.cactoos.BiFunc;\n+import org.cactoos.func.UncheckedBiFunc;\n+import org.cactoos.text.FormattedText;\n+\n+/**\n+ * Matched iterator.\n+ *\n+ * Iterates over 2 iterators at the same time and verify that elements with the\n+ * same position has correlation by the function. The function might be equals,\n+ * endsWith, greaterThen, nonNull, empty, negative, positive, etc.\n+ *\n+ * @param <X> Type of item in first iterator.\n+ * @param <Y> Type of item in second iterator.\n+ * @since 0.47\n+ */\n+public final class Matched<X, Y> implements Iterator<X> {", "originalCommit": "4649e746ca0b41035601ca8de0d0b99d9e3d8856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU4NDYyNQ==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r518584625", "bodyText": "@victornoel It seems that only way to do so, is to create an anonymous Iterator within ctor and use IteratorEnvelope. Otherwise\nsince there is a field for Func<X,Y>, type parameter Y should go on class level", "author": "andreoss", "createdAt": "2020-11-06T08:10:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2NzU5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5MDIwMw==", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r519190203", "bodyText": "@andreoss ok, let's forget about it then. I'm not 100% happy with this but I don't think introducing this complexity with the envelope is worth the effort :)", "author": "victornoel", "createdAt": "2020-11-07T15:47:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2NzU5MA=="}], "type": "inlineReview", "revised_code": null}]}