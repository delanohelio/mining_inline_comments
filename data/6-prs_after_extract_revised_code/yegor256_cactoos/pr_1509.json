{"pr_number": 1509, "pr_title": "#1510 add Xor class to allow exclusive disjunction", "pr_createdAt": "2020-11-27T12:29:10Z", "pr_url": "https://github.com/yegor256/cactoos/pull/1509", "timeline": [{"oid": "8c408bdbf09229036ec1008f8d07601afb4b975a", "url": "https://github.com/yegor256/cactoos/commit/8c408bdbf09229036ec1008f8d07601afb4b975a", "message": "add Xor -> Logical exclusive or\n\nSigned-off-by: kokodyn <kokodyn@gmail.com>", "committedDate": "2020-11-26T18:56:52Z", "type": "commit"}, {"oid": "3d9cfe3b85156b41708c2a972acbc4e159408338", "url": "https://github.com/yegor256/cactoos/commit/3d9cfe3b85156b41708c2a972acbc4e159408338", "message": "Xor add unit tests + fixes\n\nSigned-off-by: kokodyn <kokodyn@gmail.com>", "committedDate": "2020-11-27T12:24:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwMjYxNQ==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r535702615", "bodyText": "@kokodyn This implementation seems to be not  \"short-circuit\".\nLet's use Folded instead of Stream API here", "author": "andreoss", "createdAt": "2020-12-03T22:49:47Z", "path": "src/main/java/org/cactoos/scalar/Xor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+import org.cactoos.list.ListOf;\n+\n+/**\n+ * Logical exclusive or.\n+ * This class performs short-circuit evaluation in which arguments are\n+ * executed only if the preceding argument does not suffice to determine\n+ * the value of the expression.\n+ *\n+ * <p>This class could be also used for matching multiple boolean\n+ * expressions:</p>\n+ *\n+ * {@code\n+ * new Xor(\n+ *    new True(),\n+ *    new True(),\n+ *    new True()\n+ * ).value(); // the result is true\n+ *\n+ * new Xor(\n+ *    new True(),\n+ *    new False(),\n+ *    new True()\n+ * ).value(); // the result is false\n+ * }\n+ *\n+ * <p>This class implements {@link Scalar}, which throws a checked\n+ * {@link Exception}. This may not be convenient in many cases. To make\n+ * it more convenient and get rid of the checked exception you can\n+ * use the {@link Unchecked} decorator. Or you may use\n+ * {@link IoChecked} to wrap it in an IOException.</p>\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @see Unchecked\n+ * @see IoChecked\n+ * @since 0.49\n+ */\n+public final class Xor implements Scalar<Boolean> {\n+\n+    /**\n+     * The iterable.\n+     */\n+    private final Iterable<Scalar<Boolean>> origin;\n+\n+    /**\n+     * Ctor.\n+     * @param scalar The Scalar.\n+     */\n+    @SafeVarargs\n+    public Xor(final Scalar<Boolean>... scalar) {\n+        this(new IterableOf<>(scalar));\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param iterable The iterable.\n+     */\n+    public Xor(final Iterable<Scalar<Boolean>> iterable) {\n+        this.origin = iterable;\n+    }\n+\n+    @Override\n+    public Boolean value() throws Exception {\n+        return new ListOf<Scalar<Boolean>>(this.origin)\n+            .stream().reduce(", "originalCommit": "3d9cfe3b85156b41708c2a972acbc4e159408338", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5NDI0MA==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r536294240", "bodyText": "I used Ternary with Reduced because is should:\n\nreturn True for empty Iterable // it is same convention like for And class\nreturn value of first Scalar when Iterable is single element // it is same convention like for And class\nreturn reduced Xor result when Iterable has size > 1", "author": "kokodyn", "createdAt": "2020-12-04T18:27:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwMjYxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0dca7fcc3f67d6c37b4c6a53819e5e6d82865346", "chunk": "diff --git a/src/main/java/org/cactoos/scalar/Xor.java b/src/main/java/org/cactoos/scalar/Xor.java\nindex 3a48012f..3d239f81 100644\n--- a/src/main/java/org/cactoos/scalar/Xor.java\n+++ b/src/main/java/org/cactoos/scalar/Xor.java\n\n@@ -25,7 +25,6 @@ package org.cactoos.scalar;\n \n import org.cactoos.Scalar;\n import org.cactoos.iterable.IterableOf;\n-import org.cactoos.list.ListOf;\n \n /**\n  * Logical exclusive or.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwMzgxOQ==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r535703819", "bodyText": "@kokodyn Does it belong here?", "author": "andreoss", "createdAt": "2020-12-03T22:51:09Z", "path": "src/test/java/org/cactoos/scalar/XorTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.ScalarHasValue;\n+\n+/**\n+ * Test case for {@link Xor}.\n+ * @since 0.48\n+ */\n+@SuppressWarnings({\"PMD.AvoidDuplicateLiterals\", \"PMD.TooManyMethods\"})\n+final class XorTest {\n+\n+    @Test\n+    void trueTrue() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new True(),\n+                new True()\n+            ),\n+            new ScalarHasValue<>(false)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void falseTrue() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new False(),\n+                new True()\n+            ),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void treuFalse() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new True(),\n+                new False()\n+            ),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void falseFalse() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new False(),\n+                new False()\n+            ),\n+            new ScalarHasValue<>(false)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void singleTrue() throws Exception {\n+        new Assertion<>(\n+            \"Single True must be True\",\n+            new Xor(\n+                new True()\n+            ),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void singleFalse() throws Exception {\n+        new Assertion<>(\n+            \"Single False must be False\",\n+            new Xor(\n+                new False()\n+            ),\n+            new ScalarHasValue<>(false)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyIterator() throws Exception {\n+        new Assertion<>(\n+            \"Empty iterator must be true\",\n+            new And(new IterableOf<Scalar<Boolean>>()),", "originalCommit": "3d9cfe3b85156b41708c2a972acbc4e159408338", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5MTMyMw==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r536291323", "bodyText": "@andreoss fixed", "author": "kokodyn", "createdAt": "2020-12-04T18:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwMzgxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "0dca7fcc3f67d6c37b4c6a53819e5e6d82865346", "chunk": "diff --git a/src/test/java/org/cactoos/scalar/XorTest.java b/src/test/java/org/cactoos/scalar/XorTest.java\nindex 85b18b61..0fb0407f 100644\n--- a/src/test/java/org/cactoos/scalar/XorTest.java\n+++ b/src/test/java/org/cactoos/scalar/XorTest.java\n\n@@ -110,7 +110,7 @@ final class XorTest {\n     void emptyIterator() throws Exception {\n         new Assertion<>(\n             \"Empty iterator must be true\",\n-            new And(new IterableOf<Scalar<Boolean>>()),\n+            new Xor(new IterableOf<Scalar<Boolean>>()),\n             new ScalarHasValue<>(true)\n         ).affirm();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNDYxMQ==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r535704611", "bodyText": "@kokodyn Couple of tests needed for actual short-circuit evaluation.", "author": "andreoss", "createdAt": "2020-12-03T22:52:06Z", "path": "src/test/java/org/cactoos/scalar/XorTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.ScalarHasValue;\n+\n+/**\n+ * Test case for {@link Xor}.\n+ * @since 0.48\n+ */\n+@SuppressWarnings({\"PMD.AvoidDuplicateLiterals\", \"PMD.TooManyMethods\"})\n+final class XorTest {", "originalCommit": "3d9cfe3b85156b41708c2a972acbc4e159408338", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5NDcwNg==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r536294706", "bodyText": "@andreoss\nCould you be more precise please? What exactly should be fixed/added?", "author": "kokodyn", "createdAt": "2020-12-04T18:27:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNDYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5OTkyMw==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r536299923", "bodyText": "@kokodyn Forget it. xor is not short-circuitable operation.", "author": "andreoss", "createdAt": "2020-12-04T18:37:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNDYxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0dca7fcc3f67d6c37b4c6a53819e5e6d82865346", "chunk": "diff --git a/src/test/java/org/cactoos/scalar/XorTest.java b/src/test/java/org/cactoos/scalar/XorTest.java\nindex 85b18b61..0fb0407f 100644\n--- a/src/test/java/org/cactoos/scalar/XorTest.java\n+++ b/src/test/java/org/cactoos/scalar/XorTest.java\n\n@@ -110,7 +110,7 @@ final class XorTest {\n     void emptyIterator() throws Exception {\n         new Assertion<>(\n             \"Empty iterator must be true\",\n-            new And(new IterableOf<Scalar<Boolean>>()),\n+            new Xor(new IterableOf<Scalar<Boolean>>()),\n             new ScalarHasValue<>(true)\n         ).affirm();\n     }\n"}}, {"oid": "0dca7fcc3f67d6c37b4c6a53819e5e6d82865346", "url": "https://github.com/yegor256/cactoos/commit/0dca7fcc3f67d6c37b4c6a53819e5e6d82865346", "message": "change impl of Xor and unit test fix\n\nSigned-off-by: kokodyn <kokodyn@gmail.com>", "committedDate": "2020-12-04T18:20:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyNDE2NA==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r536924164", "bodyText": "@kokodyn I believe this is not correct description of xor, all arguments should be executed", "author": "andreoss", "createdAt": "2020-12-06T00:51:26Z", "path": "src/main/java/org/cactoos/scalar/Xor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+\n+/**\n+ * Logical exclusive or.", "originalCommit": "0dca7fcc3f67d6c37b4c6a53819e5e6d82865346", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQxNzkxOA==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r540417918", "bodyText": "@andreoss fixed", "author": "kokodyn", "createdAt": "2020-12-10T18:56:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyNDE2NA=="}], "type": "inlineReview", "revised_code": {"commit": "d1c85a4beb66ec6b781c1907767c96ff7db66020", "chunk": "diff --git a/src/main/java/org/cactoos/scalar/Xor.java b/src/main/java/org/cactoos/scalar/Xor.java\nindex 3d239f81..3279214e 100644\n--- a/src/main/java/org/cactoos/scalar/Xor.java\n+++ b/src/main/java/org/cactoos/scalar/Xor.java\n\n@@ -28,9 +28,9 @@ import org.cactoos.iterable.IterableOf;\n \n /**\n  * Logical exclusive or.\n- * This class performs short-circuit evaluation in which arguments are\n- * executed only if the preceding argument does not suffice to determine\n- * the value of the expression.\n+\n+ * For no elements in {@code origin} it returns {@link True}, otherwise\n+ * returns {@link True} only when an odd number of elements have value true.\n  *\n  * <p>This class could be also used for matching multiple boolean\n  * expressions:</p>\n"}}, {"oid": "d1c85a4beb66ec6b781c1907767c96ff7db66020", "url": "https://github.com/yegor256/cactoos/commit/d1c85a4beb66ec6b781c1907767c96ff7db66020", "message": "Xor -> fix javadoc\n\nSigned-off-by: kokodyn <kokodyn@gmail.com>", "committedDate": "2020-12-10T18:55:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0MTc0OA==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r541941748", "bodyText": "@kokodyn there is a problem with the indentation here", "author": "victornoel", "createdAt": "2020-12-13T14:58:59Z", "path": "src/main/java/org/cactoos/scalar/Xor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+\n+/**\n+ * Logical exclusive or.\n+\n+ * For no elements in {@code origin} it returns {@link True}, otherwise\n+ * returns {@link True} only when an odd number of elements have value true.\n+ *\n+ * <p>This class could be also used for matching multiple boolean\n+ * expressions:</p>\n+ *\n+ * {@code\n+ * new Xor(\n+ *    new True(),\n+ *    new True(),\n+ *    new True()\n+ * ).value(); // the result is true\n+ *\n+ * new Xor(\n+ *    new True(),\n+ *    new False(),\n+ *    new True()\n+ * ).value(); // the result is false\n+ * }\n+ *\n+ * <p>This class implements {@link Scalar}, which throws a checked\n+ * {@link Exception}. This may not be convenient in many cases. To make\n+ * it more convenient and get rid of the checked exception you can\n+ * use the {@link Unchecked} decorator. Or you may use\n+ * {@link IoChecked} to wrap it in an IOException.</p>\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @see Unchecked\n+ * @see IoChecked\n+ * @since 0.49\n+ */\n+public final class Xor implements Scalar<Boolean> {\n+\n+    /**\n+     * The iterable.\n+     */\n+    private final Iterable<Scalar<Boolean>> origin;\n+\n+    /**\n+     * Ctor.\n+     * @param scalar The Scalar.\n+     */\n+    @SafeVarargs\n+    public Xor(final Scalar<Boolean>... scalar) {\n+        this(new IterableOf<>(scalar));\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param iterable The iterable.\n+     */\n+    public Xor(final Iterable<Scalar<Boolean>> iterable) {\n+        this.origin = iterable;\n+    }\n+\n+    @Override\n+    public Boolean value() throws Exception {\n+        return new Ternary<>(\n+            new LengthOf(this.origin).value() > 0,\n+            new Reduced<Boolean>((a, b) -> a ^ b, this.origin),\n+            new True()\n+            )\n+            .value();", "originalCommit": "d1c85a4beb66ec6b781c1907767c96ff7db66020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYyNjM0OA==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r543626348", "bodyText": "@victornoel fixed", "author": "kokodyn", "createdAt": "2020-12-15T19:28:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0MTc0OA=="}], "type": "inlineReview", "revised_code": {"commit": "a890e35b19b4d1cfcb6f6a364eb5ba479064542e", "chunk": "diff --git a/src/main/java/org/cactoos/scalar/Xor.java b/src/main/java/org/cactoos/scalar/Xor.java\nindex 3279214e..3f27a01a 100644\n--- a/src/main/java/org/cactoos/scalar/Xor.java\n+++ b/src/main/java/org/cactoos/scalar/Xor.java\n\n@@ -91,7 +91,6 @@ public final class Xor implements Scalar<Boolean> {\n             new LengthOf(this.origin).value() > 0,\n             new Reduced<Boolean>((a, b) -> a ^ b, this.origin),\n             new True()\n-            )\n-            .value();\n+        ).value();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0MjAyOA==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r541942028", "bodyText": "@kokodyn iterable, not iterator :) same with the test name", "author": "victornoel", "createdAt": "2020-12-13T15:00:31Z", "path": "src/test/java/org/cactoos/scalar/XorTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.ScalarHasValue;\n+\n+/**\n+ * Test case for {@link Xor}.\n+ * @since 0.48\n+ */\n+@SuppressWarnings({\"PMD.AvoidDuplicateLiterals\", \"PMD.TooManyMethods\"})\n+final class XorTest {\n+\n+    @Test\n+    void trueTrue() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new True(),\n+                new True()\n+            ),\n+            new ScalarHasValue<>(false)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void falseTrue() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new False(),\n+                new True()\n+            ),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void treuFalse() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new True(),\n+                new False()\n+            ),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void falseFalse() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new False(),\n+                new False()\n+            ),\n+            new ScalarHasValue<>(false)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void singleTrue() throws Exception {\n+        new Assertion<>(\n+            \"Single True must be True\",\n+            new Xor(\n+                new True()\n+            ),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void singleFalse() throws Exception {\n+        new Assertion<>(\n+            \"Single False must be False\",\n+            new Xor(\n+                new False()\n+            ),\n+            new ScalarHasValue<>(false)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyIterator() throws Exception {\n+        new Assertion<>(\n+            \"Empty iterator must be true\",", "originalCommit": "d1c85a4beb66ec6b781c1907767c96ff7db66020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYyNjQ2MA==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r543626460", "bodyText": "@victornoel fixed", "author": "kokodyn", "createdAt": "2020-12-15T19:28:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0MjAyOA=="}], "type": "inlineReview", "revised_code": {"commit": "a890e35b19b4d1cfcb6f6a364eb5ba479064542e", "chunk": "diff --git a/src/test/java/org/cactoos/scalar/XorTest.java b/src/test/java/org/cactoos/scalar/XorTest.java\nindex 0fb0407f..3100fdcf 100644\n--- a/src/test/java/org/cactoos/scalar/XorTest.java\n+++ b/src/test/java/org/cactoos/scalar/XorTest.java\n\n@@ -107,9 +107,9 @@ final class XorTest {\n     }\n \n     @Test\n-    void emptyIterator() throws Exception {\n+    void emptyIteraable() throws Exception {\n         new Assertion<>(\n-            \"Empty iterator must be true\",\n+            \"Empty iterable must be true\",\n             new Xor(new IterableOf<Scalar<Boolean>>()),\n             new ScalarHasValue<>(true)\n         ).affirm();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0MjA5OA==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r541942098", "bodyText": "@kokodyn the message is incorrect here I\u00a0think", "author": "victornoel", "createdAt": "2020-12-13T15:01:03Z", "path": "src/test/java/org/cactoos/scalar/XorTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.ScalarHasValue;\n+\n+/**\n+ * Test case for {@link Xor}.\n+ * @since 0.48\n+ */\n+@SuppressWarnings({\"PMD.AvoidDuplicateLiterals\", \"PMD.TooManyMethods\"})\n+final class XorTest {\n+\n+    @Test\n+    void trueTrue() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new True(),\n+                new True()\n+            ),\n+            new ScalarHasValue<>(false)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void falseTrue() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new False(),\n+                new True()\n+            ),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void treuFalse() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new True(),\n+                new False()\n+            ),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void falseFalse() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new False(),\n+                new False()\n+            ),\n+            new ScalarHasValue<>(false)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void singleTrue() throws Exception {\n+        new Assertion<>(\n+            \"Single True must be True\",\n+            new Xor(\n+                new True()\n+            ),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void singleFalse() throws Exception {\n+        new Assertion<>(\n+            \"Single False must be False\",\n+            new Xor(\n+                new False()\n+            ),\n+            new ScalarHasValue<>(false)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyIterator() throws Exception {\n+        new Assertion<>(\n+            \"Empty iterator must be true\",\n+            new Xor(new IterableOf<Scalar<Boolean>>()),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void oddNumberOfTrue() throws Exception {\n+        new Assertion<>(\n+            \"Odd number of True must be True\",\n+            new Xor(\n+                new False(),\n+                new False(),\n+                new True()\n+            ),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void evenNumberOfTrue() throws Exception {\n+        new Assertion<>(\n+            \"Even number of True must be False\",\n+            new Xor(\n+                new False(),\n+                new True(),\n+                new True()\n+            ),\n+            new ScalarHasValue<>(false)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void allFalse() throws Exception {\n+        new Assertion<>(\n+            \"Even number of True must be False\",", "originalCommit": "d1c85a4beb66ec6b781c1907767c96ff7db66020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYyNjQ5NQ==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r543626495", "bodyText": "@victornoel fixed", "author": "kokodyn", "createdAt": "2020-12-15T19:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0MjA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0MDE0MQ==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r546240141", "bodyText": "@kokodyn you apparently changed the wrong test, the one you changed (oddNumberOfTrue) was correct. Can you fix both of them now?", "author": "victornoel", "createdAt": "2020-12-19T13:45:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0MjA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5NTI2MQ==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r547395261", "bodyText": "@victornoel  thanks for comment, problem fixed.", "author": "kokodyn", "createdAt": "2020-12-22T17:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0MjA5OA=="}], "type": "inlineReview", "revised_code": {"commit": "a890e35b19b4d1cfcb6f6a364eb5ba479064542e", "chunk": "diff --git a/src/test/java/org/cactoos/scalar/XorTest.java b/src/test/java/org/cactoos/scalar/XorTest.java\nindex 0fb0407f..3100fdcf 100644\n--- a/src/test/java/org/cactoos/scalar/XorTest.java\n+++ b/src/test/java/org/cactoos/scalar/XorTest.java\n\n@@ -107,9 +107,9 @@ final class XorTest {\n     }\n \n     @Test\n-    void emptyIterator() throws Exception {\n+    void emptyIteraable() throws Exception {\n         new Assertion<>(\n-            \"Empty iterator must be true\",\n+            \"Empty iterable must be true\",\n             new Xor(new IterableOf<Scalar<Boolean>>()),\n             new ScalarHasValue<>(true)\n         ).affirm();\n"}}, {"oid": "a890e35b19b4d1cfcb6f6a364eb5ba479064542e", "url": "https://github.com/yegor256/cactoos/commit/a890e35b19b4d1cfcb6f6a364eb5ba479064542e", "message": "fixed indentation and tests\n\nSigned-off-by: kokodyn <kokodyn@gmail.com>", "committedDate": "2020-12-15T19:27:39Z", "type": "commit"}, {"oid": "5edeb4b654ba7f9553ce71a718619d8623ef8a3f", "url": "https://github.com/yegor256/cactoos/commit/5edeb4b654ba7f9553ce71a718619d8623ef8a3f", "message": "Fixed XorTest", "committedDate": "2020-12-22T17:07:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ3NTk1Nw==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r548475957", "bodyText": "@kokodyn why is xor true if the list is empty? I would have said false, but purely intuitively, because there is nothing, so it can't be true\u2026 maybe you have some sources that recommends to do that?", "author": "victornoel", "createdAt": "2020-12-24T10:01:05Z", "path": "src/main/java/org/cactoos/scalar/Xor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+\n+/**\n+ * Logical exclusive or.\n+\n+ * For no elements in {@code origin} it returns {@link True}, otherwise\n+ * returns {@link True} only when an odd number of elements have value true.\n+ *\n+ * <p>This class could be also used for matching multiple boolean\n+ * expressions:</p>\n+ *\n+ * {@code\n+ * new Xor(\n+ *    new True(),\n+ *    new True(),\n+ *    new True()\n+ * ).value(); // the result is true\n+ *\n+ * new Xor(\n+ *    new True(),\n+ *    new False(),\n+ *    new True()\n+ * ).value(); // the result is false\n+ * }\n+ *\n+ * <p>This class implements {@link Scalar}, which throws a checked\n+ * {@link Exception}. This may not be convenient in many cases. To make\n+ * it more convenient and get rid of the checked exception you can\n+ * use the {@link Unchecked} decorator. Or you may use\n+ * {@link IoChecked} to wrap it in an IOException.</p>\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @see Unchecked\n+ * @see IoChecked\n+ * @since 0.49\n+ */\n+public final class Xor implements Scalar<Boolean> {\n+\n+    /**\n+     * The iterable.\n+     */\n+    private final Iterable<Scalar<Boolean>> origin;\n+\n+    /**\n+     * Ctor.\n+     * @param scalar The Scalar.\n+     */\n+    @SafeVarargs\n+    public Xor(final Scalar<Boolean>... scalar) {\n+        this(new IterableOf<>(scalar));\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param iterable The iterable.\n+     */\n+    public Xor(final Iterable<Scalar<Boolean>> iterable) {\n+        this.origin = iterable;\n+    }\n+\n+    @Override\n+    public Boolean value() throws Exception {\n+        return new Ternary<>(\n+            new LengthOf(this.origin).value() > 0,\n+            new Reduced<Boolean>((a, b) -> a ^ b, this.origin),\n+            new True()", "originalCommit": "5edeb4b654ba7f9553ce71a718619d8623ef8a3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU2NjA2Nw==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r557566067", "bodyText": "Xor for empty list should be false. This is correct answer.", "author": "kokodyn", "createdAt": "2021-01-14T17:26:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ3NTk1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8c95275e863799f394dc3e2efee899cdd18a3eda", "chunk": "diff --git a/src/main/java/org/cactoos/scalar/Xor.java b/src/main/java/org/cactoos/scalar/Xor.java\nindex 3f27a01a..3bef49d1 100644\n--- a/src/main/java/org/cactoos/scalar/Xor.java\n+++ b/src/main/java/org/cactoos/scalar/Xor.java\n\n@@ -61,12 +61,7 @@ import org.cactoos.iterable.IterableOf;\n  * @see IoChecked\n  * @since 0.49\n  */\n-public final class Xor implements Scalar<Boolean> {\n-\n-    /**\n-     * The iterable.\n-     */\n-    private final Iterable<Scalar<Boolean>> origin;\n+public final class Xor extends ScalarEnvelope<Boolean> {\n \n     /**\n      * Ctor.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ3OTkzNA==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r548479934", "bodyText": "@kokodyn make Xor extend ScalarEnvelope and call super(new Ternary...) here", "author": "victornoel", "createdAt": "2020-12-24T10:14:21Z", "path": "src/main/java/org/cactoos/scalar/Xor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+\n+/**\n+ * Logical exclusive or.\n+\n+ * For no elements in {@code origin} it returns {@link True}, otherwise\n+ * returns {@link True} only when an odd number of elements have value true.\n+ *\n+ * <p>This class could be also used for matching multiple boolean\n+ * expressions:</p>\n+ *\n+ * {@code\n+ * new Xor(\n+ *    new True(),\n+ *    new True(),\n+ *    new True()\n+ * ).value(); // the result is true\n+ *\n+ * new Xor(\n+ *    new True(),\n+ *    new False(),\n+ *    new True()\n+ * ).value(); // the result is false\n+ * }\n+ *\n+ * <p>This class implements {@link Scalar}, which throws a checked\n+ * {@link Exception}. This may not be convenient in many cases. To make\n+ * it more convenient and get rid of the checked exception you can\n+ * use the {@link Unchecked} decorator. Or you may use\n+ * {@link IoChecked} to wrap it in an IOException.</p>\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @see Unchecked\n+ * @see IoChecked\n+ * @since 0.49\n+ */\n+public final class Xor implements Scalar<Boolean> {\n+\n+    /**\n+     * The iterable.\n+     */\n+    private final Iterable<Scalar<Boolean>> origin;\n+\n+    /**\n+     * Ctor.\n+     * @param scalar The Scalar.\n+     */\n+    @SafeVarargs\n+    public Xor(final Scalar<Boolean>... scalar) {\n+        this(new IterableOf<>(scalar));\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param iterable The iterable.\n+     */\n+    public Xor(final Iterable<Scalar<Boolean>> iterable) {\n+        this.origin = iterable;", "originalCommit": "5edeb4b654ba7f9553ce71a718619d8623ef8a3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU2NjE0Nw==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r557566147", "bodyText": "@victornoel fixed", "author": "kokodyn", "createdAt": "2021-01-14T17:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ3OTkzNA=="}], "type": "inlineReview", "revised_code": {"commit": "8c95275e863799f394dc3e2efee899cdd18a3eda", "chunk": "diff --git a/src/main/java/org/cactoos/scalar/Xor.java b/src/main/java/org/cactoos/scalar/Xor.java\nindex 3f27a01a..3bef49d1 100644\n--- a/src/main/java/org/cactoos/scalar/Xor.java\n+++ b/src/main/java/org/cactoos/scalar/Xor.java\n\n@@ -61,12 +61,7 @@ import org.cactoos.iterable.IterableOf;\n  * @see IoChecked\n  * @since 0.49\n  */\n-public final class Xor implements Scalar<Boolean> {\n-\n-    /**\n-     * The iterable.\n-     */\n-    private final Iterable<Scalar<Boolean>> origin;\n+public final class Xor extends ScalarEnvelope<Boolean> {\n \n     /**\n      * Ctor.\n"}}, {"oid": "8c95275e863799f394dc3e2efee899cdd18a3eda", "url": "https://github.com/yegor256/cactoos/commit/8c95275e863799f394dc3e2efee899cdd18a3eda", "message": "Xor extends ScalarEnvelope and returns false for empty iterable\n\nSigned-off-by: kokodyn <kokodyn@gmail.com>", "committedDate": "2021-01-14T17:20:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU5MzQwNQ==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r557593405", "bodyText": "@kokodyn this needs to be updated", "author": "victornoel", "createdAt": "2021-01-14T18:11:04Z", "path": "src/main/java/org/cactoos/scalar/Xor.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+\n+/**\n+ * Logical exclusive or.\n+\n+ * For no elements in {@code origin} it returns {@link True}, otherwise\n+ * returns {@link True} only when an odd number of elements have value true.", "originalCommit": "8c95275e863799f394dc3e2efee899cdd18a3eda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ2MzE2MA==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r558463160", "bodyText": "@victornoel fixed", "author": "kokodyn", "createdAt": "2021-01-15T17:40:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU5MzQwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "974602882c46bce1f03aca89b02898c14440b0a0", "chunk": "diff --git a/src/main/java/org/cactoos/scalar/Xor.java b/src/main/java/org/cactoos/scalar/Xor.java\nindex 3bef49d1..7521598a 100644\n--- a/src/main/java/org/cactoos/scalar/Xor.java\n+++ b/src/main/java/org/cactoos/scalar/Xor.java\n\n@@ -25,12 +25,13 @@ package org.cactoos.scalar;\n \n import org.cactoos.Scalar;\n import org.cactoos.iterable.IterableOf;\n+import org.cactoos.iterable.Joined;\n \n /**\n  * Logical exclusive or.\n \n- * For no elements in {@code origin} it returns {@link True}, otherwise\n- * returns {@link True} only when an odd number of elements have value true.\n+ * Returns {@link True} when an odd number of elements have value true,\n+ * otherwise return {@link False}.\n  *\n  * <p>This class could be also used for matching multiple boolean\n  * expressions:</p>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU5NDIxNQ==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r557594215", "bodyText": "@kokodyn I believe you should be able to simply use: new Reduced<>((a, b) -> a ^ b, new Joined<>(new False(), iterable)) here", "author": "victornoel", "createdAt": "2021-01-14T18:12:30Z", "path": "src/main/java/org/cactoos/scalar/Xor.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+\n+/**\n+ * Logical exclusive or.\n+\n+ * For no elements in {@code origin} it returns {@link True}, otherwise\n+ * returns {@link True} only when an odd number of elements have value true.\n+ *\n+ * <p>This class could be also used for matching multiple boolean\n+ * expressions:</p>\n+ *\n+ * {@code\n+ * new Xor(\n+ *    new True(),\n+ *    new True(),\n+ *    new True()\n+ * ).value(); // the result is true\n+ *\n+ * new Xor(\n+ *    new True(),\n+ *    new False(),\n+ *    new True()\n+ * ).value(); // the result is false\n+ * }\n+ *\n+ * <p>This class implements {@link Scalar}, which throws a checked\n+ * {@link Exception}. This may not be convenient in many cases. To make\n+ * it more convenient and get rid of the checked exception you can\n+ * use the {@link Unchecked} decorator. Or you may use\n+ * {@link IoChecked} to wrap it in an IOException.</p>\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @see Unchecked\n+ * @see IoChecked\n+ * @since 0.49\n+ */\n+public final class Xor extends ScalarEnvelope<Boolean> {\n+\n+    /**\n+     * Ctor.\n+     * @param scalar The Scalar.\n+     */\n+    @SafeVarargs\n+    public Xor(final Scalar<Boolean>... scalar) {\n+        this(new IterableOf<>(scalar));\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param iterable The iterable.\n+     */\n+    public Xor(final Iterable<Scalar<Boolean>> iterable) {\n+        super(\n+            new Ternary<>(\n+                () -> new LengthOf(iterable).value() > 0,\n+                new Reduced<Boolean>((a, b) -> a ^ b, iterable),\n+                new False()\n+            )", "originalCommit": "8c95275e863799f394dc3e2efee899cdd18a3eda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ2MzA5MQ==", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r558463091", "bodyText": "@victornoel Perfect idea! Thank you very much for that tip.", "author": "kokodyn", "createdAt": "2021-01-15T17:40:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU5NDIxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "974602882c46bce1f03aca89b02898c14440b0a0", "chunk": "diff --git a/src/main/java/org/cactoos/scalar/Xor.java b/src/main/java/org/cactoos/scalar/Xor.java\nindex 3bef49d1..7521598a 100644\n--- a/src/main/java/org/cactoos/scalar/Xor.java\n+++ b/src/main/java/org/cactoos/scalar/Xor.java\n\n@@ -25,12 +25,13 @@ package org.cactoos.scalar;\n \n import org.cactoos.Scalar;\n import org.cactoos.iterable.IterableOf;\n+import org.cactoos.iterable.Joined;\n \n /**\n  * Logical exclusive or.\n \n- * For no elements in {@code origin} it returns {@link True}, otherwise\n- * returns {@link True} only when an odd number of elements have value true.\n+ * Returns {@link True} when an odd number of elements have value true,\n+ * otherwise return {@link False}.\n  *\n  * <p>This class could be also used for matching multiple boolean\n  * expressions:</p>\n"}}, {"oid": "974602882c46bce1f03aca89b02898c14440b0a0", "url": "https://github.com/yegor256/cactoos/commit/974602882c46bce1f03aca89b02898c14440b0a0", "message": "Xor doc updated and code simplified\n\nSigned-off-by: kokodyn <kokodyn@gmail.com>", "committedDate": "2021-01-15T17:07:19Z", "type": "commit"}]}