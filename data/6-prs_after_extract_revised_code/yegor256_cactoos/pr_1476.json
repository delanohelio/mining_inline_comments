{"pr_number": 1476, "pr_title": "(#1475) Make Ternary consistent over its evaluation", "pr_createdAt": "2020-09-27T14:12:08Z", "pr_url": "https://github.com/yegor256/cactoos/pull/1476", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5MDc3MA==", "url": "https://github.com/yegor256/cactoos/pull/1476#discussion_r495590770", "bodyText": "@victornoel It would be better as String.format(\"else: %d\") here and in other pleases where + is used for concatenation.", "author": "andreoss", "createdAt": "2020-09-27T16:37:40Z", "path": "src/test/java/org/cactoos/scalar/TernaryTest.java", "diffHunk": "@@ -73,14 +76,40 @@ void conditionBoolean() throws Exception {\n \n     @Test\n     void conditionFunc() throws Exception {\n-        MatcherAssert.assertThat(\n+        new Assertion<>(\n+            \"Must call the Func with the input\",\n             new Ternary<>(\n                 5,\n                 input -> input > 3,\n-                input -> input = 8,\n-                input -> input = 2\n-            ).value(),\n-            Matchers.equalTo(8)\n-        );\n+                input -> input + 1,\n+                input -> input + 2\n+            ),\n+            new ScalarHasValue<>(6)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void conditionSticky() throws Exception {\n+        final AtomicInteger counter = new AtomicInteger(0);\n+        new Assertion<>(\n+            \"Must conserve the same value for the whole evaluation\",\n+            new Ternary<String>(\n+                counter::incrementAndGet,\n+                i -> i == 1,\n+                i ->  i + \" equals \" + 1,\n+                i -> \"else: \" + i", "originalCommit": "8f1a06ce4f8686f941eda421daa545f521f473d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIyMzAxMQ==", "url": "https://github.com/yegor256/cactoos/pull/1476#discussion_r499223011", "bodyText": "@andreoss I replaced all of this with FormattedText", "author": "victornoel", "createdAt": "2020-10-04T09:03:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5MDc3MA=="}], "type": "inlineReview", "revised_code": {"commit": "c2248947f4d385ebb87b2adca567e0399a1fd927", "chunk": "diff --git a/src/test/java/org/cactoos/scalar/TernaryTest.java b/src/test/java/org/cactoos/scalar/TernaryTest.java\nindex 079ed8f1..0b68b9fe 100644\n--- a/src/test/java/org/cactoos/scalar/TernaryTest.java\n+++ b/src/test/java/org/cactoos/scalar/TernaryTest.java\n\n@@ -35,49 +37,66 @@ import org.llorllale.cactoos.matchers.ScalarHasValue;\n  * @since 0.8\n  * @checkstyle JavadocMethodCheck (500 lines)\n  * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n  */\n final class TernaryTest {\n \n     @Test\n-    void conditionTrue() throws Exception {\n-        MatcherAssert.assertThat(\n+    void conditionTrueScalar() throws Exception {\n+        new Assertion<>(\n+            \"Must work with true scalar condition\",\n             new Ternary<>(\n                 new True(),\n                 6,\n                 16\n-            ).value(),\n-            Matchers.equalTo(6)\n-        );\n+            ),\n+            new ScalarHasValue<>(6)\n+        ).affirm();\n     }\n \n     @Test\n-    void conditionFalse() throws Exception {\n-        MatcherAssert.assertThat(\n+    void conditionFalseScalar() throws Exception {\n+        new Assertion<>(\n+            \"Must work with false scalar condition\",\n             new Ternary<>(\n                 new False(),\n                 6,\n                 16\n-            ).value(),\n-            Matchers.equalTo(16)\n-        );\n+            ),\n+            new ScalarHasValue<>(16)\n+        ).affirm();\n     }\n \n     @Test\n-    void conditionBoolean() throws Exception {\n-        MatcherAssert.assertThat(\n+    void conditionStatic() throws Exception {\n+        new Assertion<>(\n+            \"Must work with primitive static condition\",\n             new Ternary<>(\n                 true,\n                 6,\n                 16\n-            ).value(),\n-            Matchers.equalTo(6)\n-        );\n+            ),\n+            new ScalarHasValue<>(6)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void consequentScalar() throws Exception {\n+        new Assertion<>(\n+            \"Must work with scalar consequent and alternative\",\n+            new Ternary<>(\n+                true,\n+                new Constant<>(6),\n+                new Constant<>(16)\n+            ),\n+            new ScalarHasValue<>(6)\n+        ).affirm();\n     }\n \n     @Test\n-    void conditionFunc() throws Exception {\n+    void inputStatic() throws Exception {\n         new Assertion<>(\n-            \"Must call the Func with the input\",\n+            \"Must call the functions with the input\",\n             new Ternary<>(\n                 5,\n                 input -> input > 3,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5MDkyNw==", "url": "https://github.com/yegor256/cactoos/pull/1476#discussion_r495590927", "bodyText": "@victornoel It's not clear here what should be conserved. Shouldn't Ternary be assigned to a variable for Sticky to have any effect?", "author": "andreoss", "createdAt": "2020-09-27T16:39:26Z", "path": "src/test/java/org/cactoos/scalar/TernaryTest.java", "diffHunk": "@@ -73,14 +76,40 @@ void conditionBoolean() throws Exception {\n \n     @Test\n     void conditionFunc() throws Exception {\n-        MatcherAssert.assertThat(\n+        new Assertion<>(\n+            \"Must call the Func with the input\",\n             new Ternary<>(\n                 5,\n                 input -> input > 3,\n-                input -> input = 8,\n-                input -> input = 2\n-            ).value(),\n-            Matchers.equalTo(8)\n-        );\n+                input -> input + 1,\n+                input -> input + 2\n+            ),\n+            new ScalarHasValue<>(6)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void conditionSticky() throws Exception {\n+        final AtomicInteger counter = new AtomicInteger(0);\n+        new Assertion<>(\n+            \"Must conserve the same value for the whole evaluation\",\n+            new Ternary<String>(\n+                counter::incrementAndGet,\n+                i -> i == 1,\n+                i ->  i + \" equals \" + 1,\n+                i -> \"else: \" + i\n+            ),\n+            new ScalarHasValue<>(\"1 equals 1\")\n+        ).affirm();\n+        new Assertion<>(\n+            \"Must conserve the same new value for the whole evaluation\",", "originalCommit": "8f1a06ce4f8686f941eda421daa545f521f473d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzNTUzNg==", "url": "https://github.com/yegor256/cactoos/pull/1476#discussion_r496135536", "bodyText": "@andreoss ok, I see it's not clear. I thought the purpose of the PR was clear based on the ticket description, but maybe it's only clear in my head ^^ I will try to explain here and then once it's clear also for you, I will imrpove the code.\nBasically, when you can new Ternary(xxx).value(), you want that for every branches of the ternary, the value used to be the same. So for example in the test, each call to the provided scalar.value will return a new value, but you want that each call to ternary.value gives you the result for one given value of the provided scalar.value. Like this it makes behaviour much closer to the expected one by someone discovering the class ternary.\nAlso it allows to express things that were not possible before, we will see that in the PR for #1460: it will allow to write it only by pure object composition without imperative intermediate values:\n     public Abbreviated(final Text text, final int max) {\n         super(\n             new Flatten(\n                new Ternary<Text>(\n                    () -> new Sticky(text),\n                    t -> t.asString().length() <= max,\n                    t -> t,\n                    t -> new FormattedText(\n                        \"%s%s\",\n                        new Sub(\n                            t,\n                            0,\n                            max - Abbreviated.ELLIPSES.length()\n                        ),\n                        Abbreviated.ELLIPSES\n                    )\n                )\n             )\n        )\n    }", "author": "victornoel", "createdAt": "2020-09-28T18:00:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5MDkyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIyMjk1OQ==", "url": "https://github.com/yegor256/cactoos/pull/1476#discussion_r499222959", "bodyText": "@andreoss actually, thank you for your comment because I realised afterward that it's not that it was clear, but as you said, that the test was incorrect: ternary should be assigned to a variable to be reused in the two assertions. And when I tried, it showed that my implementation was indeed incorrect :)\nI've fixed that in my last push!", "author": "victornoel", "createdAt": "2020-10-04T09:03:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5MDkyNw=="}], "type": "inlineReview", "revised_code": {"commit": "c2248947f4d385ebb87b2adca567e0399a1fd927", "chunk": "diff --git a/src/test/java/org/cactoos/scalar/TernaryTest.java b/src/test/java/org/cactoos/scalar/TernaryTest.java\nindex 079ed8f1..0b68b9fe 100644\n--- a/src/test/java/org/cactoos/scalar/TernaryTest.java\n+++ b/src/test/java/org/cactoos/scalar/TernaryTest.java\n\n@@ -35,49 +37,66 @@ import org.llorllale.cactoos.matchers.ScalarHasValue;\n  * @since 0.8\n  * @checkstyle JavadocMethodCheck (500 lines)\n  * @checkstyle MagicNumberCheck (500 lines)\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n  */\n final class TernaryTest {\n \n     @Test\n-    void conditionTrue() throws Exception {\n-        MatcherAssert.assertThat(\n+    void conditionTrueScalar() throws Exception {\n+        new Assertion<>(\n+            \"Must work with true scalar condition\",\n             new Ternary<>(\n                 new True(),\n                 6,\n                 16\n-            ).value(),\n-            Matchers.equalTo(6)\n-        );\n+            ),\n+            new ScalarHasValue<>(6)\n+        ).affirm();\n     }\n \n     @Test\n-    void conditionFalse() throws Exception {\n-        MatcherAssert.assertThat(\n+    void conditionFalseScalar() throws Exception {\n+        new Assertion<>(\n+            \"Must work with false scalar condition\",\n             new Ternary<>(\n                 new False(),\n                 6,\n                 16\n-            ).value(),\n-            Matchers.equalTo(16)\n-        );\n+            ),\n+            new ScalarHasValue<>(16)\n+        ).affirm();\n     }\n \n     @Test\n-    void conditionBoolean() throws Exception {\n-        MatcherAssert.assertThat(\n+    void conditionStatic() throws Exception {\n+        new Assertion<>(\n+            \"Must work with primitive static condition\",\n             new Ternary<>(\n                 true,\n                 6,\n                 16\n-            ).value(),\n-            Matchers.equalTo(6)\n-        );\n+            ),\n+            new ScalarHasValue<>(6)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void consequentScalar() throws Exception {\n+        new Assertion<>(\n+            \"Must work with scalar consequent and alternative\",\n+            new Ternary<>(\n+                true,\n+                new Constant<>(6),\n+                new Constant<>(16)\n+            ),\n+            new ScalarHasValue<>(6)\n+        ).affirm();\n     }\n \n     @Test\n-    void conditionFunc() throws Exception {\n+    void inputStatic() throws Exception {\n         new Assertion<>(\n-            \"Must call the Func with the input\",\n+            \"Must call the functions with the input\",\n             new Ternary<>(\n                 5,\n                 input -> input > 3,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5MTExOQ==", "url": "https://github.com/yegor256/cactoos/pull/1476#discussion_r495591119", "bodyText": "@victornoel Camel-cased variables are against the current code style, probably we should not have them in examples too.", "author": "andreoss", "createdAt": "2020-09-27T16:40:55Z", "path": "src/main/java/org/cactoos/scalar/Ternary.java", "diffHunk": "@@ -39,10 +39,10 @@\n  *\n  * <pre>{@code\n  * new Ternary<>(\n- *     5,\n+ *     someScalarOfInteger,", "originalCommit": "8f1a06ce4f8686f941eda421daa545f521f473d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIyMzA0Ng==", "url": "https://github.com/yegor256/cactoos/pull/1476#discussion_r499223046", "bodyText": "@andreoss right, I also simplified the example", "author": "victornoel", "createdAt": "2020-10-04T09:04:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5MTExOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c2248947f4d385ebb87b2adca567e0399a1fd927", "chunk": "diff --git a/src/main/java/org/cactoos/scalar/Ternary.java b/src/main/java/org/cactoos/scalar/Ternary.java\nindex e666f1b9..9d716b7a 100644\n--- a/src/main/java/org/cactoos/scalar/Ternary.java\n+++ b/src/main/java/org/cactoos/scalar/Ternary.java\n\n@@ -39,87 +40,48 @@ import org.cactoos.Scalar;\n  *\n  * <pre>{@code\n  * new Ternary<>(\n- *     someScalarOfInteger,\n- *     input -> input > 3,\n- *     input -> 8,\n- *     input -> 2\n- * ).value() // will be equal to 8\n+ *     scalar,\n+ *     value -> value > 3,\n+ *     value -> true,\n+ *     value -> false\n+ * ).value() // will be equal to true\n  * }</pre>\n  *\n  * @param <T> Type of item.\n  * @since 0.8\n  */\n-public final class Ternary<T> implements Scalar<T> {\n-\n-    /**\n-     * The condition.\n-     */\n-    private final Scalar<Boolean> condition;\n-\n-    /**\n-     * The consequent.\n-     */\n-    private final Scalar<T> consequent;\n-\n-    /**\n-     * The alternative.\n-     */\n-    private final Scalar<T> alternative;\n+public final class Ternary<T> extends ScalarEnvelope<T> {\n \n     /**\n      * Ctor.\n-     * @param input The input to pass to all of them\n      * @param cnd The condition\n      * @param cons The consequent\n      * @param alter The alternative\n-     * @param <X> Type of input\n      * @since 0.9\n-     * @checkstyle ParameterNumberCheck (5 lines)\n      */\n-    public <X> Ternary(final X input, final Func<X, Boolean> cnd,\n-        final Func<X, T> cons, final Func<X, T> alter) {\n-        this(\n-            () -> cnd.apply(input),\n-            () -> cons.apply(input),\n-            () -> alter.apply(input)\n-        );\n+    public Ternary(final boolean cnd, final T cons, final T alter) {\n+        this(() -> cnd, cons, alter);\n     }\n \n     /**\n      * Ctor.\n-     * @param input The input to pass to all of them\n      * @param cnd The condition\n      * @param cons The consequent\n      * @param alter The alternative\n-     * @param <X> Type of input\n-     * @since 0.9\n-     * @checkstyle ParameterNumberCheck (5 lines)\n      */\n-    public <X> Ternary(final Scalar<X> input, final Func<X, Boolean> cnd,\n-            final Func<X, T> cons, final Func<X, T> alter) {\n-        this(new Sticky<>(input), cnd, cons, alter);\n+    public Ternary(final Scalar<Boolean> cnd, final T cons, final T alter) {\n+        this(cnd, () -> cons, () -> alter);\n     }\n \n     /**\n      * Ctor.\n-     * @param input The input to pass to all of them\n      * @param cnd The condition\n      * @param cons The consequent\n      * @param alter The alternative\n-     * @param <X> Type of input\n      * @since 0.9\n-     * @todo #1460:30min Find all the places in cactoos where ensuring that `input`\n-     *  doesn't change during the ternary evaluation (see `TernaryTest.conditionSticky`)\n-     *  is meaningful and use this constructor instead.\n-     * @checkstyle ParameterNumberCheck (5 lines)\n      */\n-    public <X> Ternary(final Sticky<X> input, final Func<X, Boolean> cnd,\n-            final Func<X, T> cons, final Func<X, T> alter) {\n-        this(\n-            new Mapped<>(cnd, input),\n-            new Mapped<>(cons, input),\n-            new Mapped<>(alter, input)\n-        );\n+    public Ternary(final boolean cnd, final Scalar<T> cons, final Scalar<T> alter) {\n+        this(new Constant<>(cnd), cons, alter);\n     }\n \n     /**\n"}}, {"oid": "c2248947f4d385ebb87b2adca567e0399a1fd927", "url": "https://github.com/yegor256/cactoos/commit/c2248947f4d385ebb87b2adca567e0399a1fd927", "message": "(#1475) Make Ternary consistent over its evaluation", "committedDate": "2020-10-04T09:00:30Z", "type": "commit"}, {"oid": "c2248947f4d385ebb87b2adca567e0399a1fd927", "url": "https://github.com/yegor256/cactoos/commit/c2248947f4d385ebb87b2adca567e0399a1fd927", "message": "(#1475) Make Ternary consistent over its evaluation", "committedDate": "2020-10-04T09:00:30Z", "type": "forcePushed"}]}