{"pr_number": 1358, "pr_title": "1308 fixed IterableOf.equals and add required tests", "pr_createdAt": "2020-04-28T02:44:22Z", "pr_url": "https://github.com/yegor256/cactoos/pull/1358", "timeline": [{"oid": "306368523adf98e6d07cd09dccd9bcaecce62c8e", "url": "https://github.com/yegor256/cactoos/commit/306368523adf98e6d07cd09dccd9bcaecce62c8e", "message": "fixed IterableOf.equals and add required tests", "committedDate": "2020-04-28T01:39:46Z", "type": "commit"}, {"oid": "91784509897858626f6ab11a7f0ba949de245599", "url": "https://github.com/yegor256/cactoos/commit/91784509897858626f6ab11a7f0ba949de245599", "message": "remove unused import", "committedDate": "2020-04-28T01:40:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQyMjE2NA==", "url": "https://github.com/yegor256/cactoos/pull/1358#discussion_r416422164", "bodyText": "@lxpdd even though this seems technically correct (judging by the test), this is not well readable and maintainable. I propose to add a todo here to transform this code in something more object oriented. I'm not sure how though, but there must be more declarative solutions that that.", "author": "victornoel", "createdAt": "2020-04-28T08:19:15Z", "path": "src/main/java/org/cactoos/iterable/IterableOf.java", "diffHunk": "@@ -155,13 +155,13 @@ public boolean equals(final Object other) {\n                     () -> Iterable.class.isAssignableFrom(other.getClass()),\n                     () -> {\n                         final Iterable<?> compared = (Iterable<?>) other;\n-                        final Iterator<?> iterator = compared.iterator();\n-                        return new Unchecked<>(\n-                            new And(\n-                                (X input) -> input.equals(iterator.next()),\n-                                this\n-                            )\n-                        ).value();\n+                        final Iterator<X> ftr = this.iterator();\n+                        final Iterator<?> str = compared.iterator();\n+                        boolean failed = false;\n+                        while (ftr.hasNext() && str.hasNext() && (!failed)) {\n+                            failed = !ftr.next().equals(str.next());\n+                        }\n+                        return !failed && !ftr.hasNext() && !str.hasNext();", "originalCommit": "91784509897858626f6ab11a7f0ba949de245599", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5Nzk2NQ==", "url": "https://github.com/yegor256/cactoos/pull/1358#discussion_r416497965", "bodyText": "@victornoel True, I have another solution with Matched object, but I am not sure if it's correct.\nCould I create one more PR for the same issue?", "author": "lxpdd", "createdAt": "2020-04-28T10:17:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQyMjE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUwMjM2OA==", "url": "https://github.com/yegor256/cactoos/pull/1358#discussion_r416502368", "bodyText": "@lxpdd you can simply modify this one I think. If you desire so, you can close this PR and open a new one, but there is no need IMHO.\nAlso can you edit your comment to specify who you are addressing in your comment as per Zerocracy policy: http://www.zerocracy.com/policy.html#42", "author": "victornoel", "createdAt": "2020-04-28T10:24:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQyMjE2NA=="}], "type": "inlineReview", "revised_code": {"commit": "570009949e156d040061d2c498ef8512e16a93ea", "chunk": "diff --git a/src/main/java/org/cactoos/iterable/IterableOf.java b/src/main/java/org/cactoos/iterable/IterableOf.java\nindex dc422ffd..d6bea89d 100644\n--- a/src/main/java/org/cactoos/iterable/IterableOf.java\n+++ b/src/main/java/org/cactoos/iterable/IterableOf.java\n\n@@ -154,14 +158,22 @@ public final class IterableOf<X> implements Iterable<X> {\n                     () -> other != null,\n                     () -> Iterable.class.isAssignableFrom(other.getClass()),\n                     () -> {\n-                        final Iterable<?> compared = (Iterable<?>) other;\n-                        final Iterator<X> ftr = this.iterator();\n-                        final Iterator<?> str = compared.iterator();\n-                        boolean failed = false;\n-                        while (ftr.hasNext() && str.hasNext() && (!failed)) {\n-                            failed = !ftr.next().equals(str.next());\n+                        final Iterable<X> compared = (Iterable<X>) other;\n+                        boolean equals;\n+                        try {\n+                            equals = new Checked<>(\n+                                new And(\n+                                    (X value) -> new True().value(),\n+                                    new Matched<>(\n+                                        this,\n+                                        compared\n+                                    )\n+                                ), e -> new IllegalStateException()\n+                            ).value();\n+                        } catch (final IllegalStateException exception) {\n+                            equals = new False().value();\n                         }\n-                        return !failed && !ftr.hasNext() && !str.hasNext();\n+                        return equals;\n                     }\n                 )\n             )\n"}}, {"oid": "570009949e156d040061d2c498ef8512e16a93ea", "url": "https://github.com/yegor256/cactoos/commit/570009949e156d040061d2c498ef8512e16a93ea", "message": "- Fixed Matched class\n- Changed IterableOf.equals style for more declarative.", "committedDate": "2020-04-28T11:19:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc1MDE1MA==", "url": "https://github.com/yegor256/cactoos/pull/1358#discussion_r416750150", "bodyText": "@lxpdd in that case let's use ScalarWithFallback instead of Checked so that we don't have to handle the exception catching.", "author": "victornoel", "createdAt": "2020-04-28T16:23:09Z", "path": "src/main/java/org/cactoos/iterable/IterableOf.java", "diffHunk": "@@ -154,14 +158,22 @@ public boolean equals(final Object other) {\n                     () -> other != null,\n                     () -> Iterable.class.isAssignableFrom(other.getClass()),\n                     () -> {\n-                        final Iterable<?> compared = (Iterable<?>) other;\n-                        final Iterator<?> iterator = compared.iterator();\n-                        return new Unchecked<>(\n-                            new And(\n-                                (X input) -> input.equals(iterator.next()),\n-                                this\n-                            )\n-                        ).value();\n+                        final Iterable<X> compared = (Iterable<X>) other;\n+                        boolean equals;\n+                        try {\n+                            equals = new Checked<>(", "originalCommit": "570009949e156d040061d2c498ef8512e16a93ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0MDIxMg==", "url": "https://github.com/yegor256/cactoos/pull/1358#discussion_r416940212", "bodyText": "@victornoel Thanks. That's what I've been looking for", "author": "lxpdd", "createdAt": "2020-04-28T21:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc1MDE1MA=="}], "type": "inlineReview", "revised_code": {"commit": "7584ff817093dee60d1a8cb19eb9707c623577d5", "chunk": "diff --git a/src/main/java/org/cactoos/iterable/IterableOf.java b/src/main/java/org/cactoos/iterable/IterableOf.java\nindex d6bea89d..cecacb80 100644\n--- a/src/main/java/org/cactoos/iterable/IterableOf.java\n+++ b/src/main/java/org/cactoos/iterable/IterableOf.java\n\n@@ -159,21 +160,21 @@ public final class IterableOf<X> implements Iterable<X> {\n                     () -> Iterable.class.isAssignableFrom(other.getClass()),\n                     () -> {\n                         final Iterable<X> compared = (Iterable<X>) other;\n-                        boolean equals;\n-                        try {\n-                            equals = new Checked<>(\n-                                new And(\n-                                    (X value) -> new True().value(),\n-                                    new Matched<>(\n-                                        this,\n-                                        compared\n-                                    )\n-                                ), e -> new IllegalStateException()\n-                            ).value();\n-                        } catch (final IllegalStateException exception) {\n-                            equals = new False().value();\n-                        }\n-                        return equals;\n+                        return new ScalarWithFallback<>(\n+                            new And(\n+                                (X value) -> new True().value(),\n+                                new Matched<>(\n+                                    this,\n+                                    compared\n+                                )\n+                            ),\n+                            new IterableOf<>(\n+                                new FallbackFrom<>(\n+                                    IllegalStateException.class,\n+                                    ex -> new False().value()\n+                                )\n+                            )\n+                        ).value();\n                     }\n                 )\n             )\n"}}, {"oid": "7584ff817093dee60d1a8cb19eb9707c623577d5", "url": "https://github.com/yegor256/cactoos/commit/7584ff817093dee60d1a8cb19eb9707c623577d5", "message": "Use ScalarWithFallback object instead of try-catch operations", "committedDate": "2020-04-28T21:40:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzNzg2NA==", "url": "https://github.com/yegor256/cactoos/pull/1358#discussion_r417237864", "bodyText": "@lxpdd I think you can use directly true and false, no need to go through an extra layer of indirection", "author": "victornoel", "createdAt": "2020-04-29T11:14:29Z", "path": "src/main/java/org/cactoos/iterable/IterableOf.java", "diffHunk": "@@ -154,12 +159,20 @@ public boolean equals(final Object other) {\n                     () -> other != null,\n                     () -> Iterable.class.isAssignableFrom(other.getClass()),\n                     () -> {\n-                        final Iterable<?> compared = (Iterable<?>) other;\n-                        final Iterator<?> iterator = compared.iterator();\n-                        return new Unchecked<>(\n+                        final Iterable<X> compared = (Iterable<X>) other;\n+                        return new ScalarWithFallback<>(\n                             new And(\n-                                (X input) -> input.equals(iterator.next()),\n-                                this\n+                                (X value) -> new True().value(),\n+                                new Matched<>(\n+                                    this,\n+                                    compared\n+                                )\n+                            ),\n+                            new IterableOf<>(\n+                                new FallbackFrom<>(\n+                                    IllegalStateException.class,\n+                                    ex -> new False().value()", "originalCommit": "7584ff817093dee60d1a8cb19eb9707c623577d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1ODEzNg==", "url": "https://github.com/yegor256/cactoos/pull/1358#discussion_r418758136", "bodyText": "@victornoel Yes, I missed that comment. I will fix it.", "author": "lxpdd", "createdAt": "2020-05-01T22:06:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzNzg2NA=="}], "type": "inlineReview", "revised_code": {"commit": "0603544522c762faf5b42faf2fb1930314500749", "chunk": "diff --git a/src/main/java/org/cactoos/iterable/IterableOf.java b/src/main/java/org/cactoos/iterable/IterableOf.java\nindex cecacb80..99c4ae3c 100644\n--- a/src/main/java/org/cactoos/iterable/IterableOf.java\n+++ b/src/main/java/org/cactoos/iterable/IterableOf.java\n\n@@ -162,7 +162,7 @@ public final class IterableOf<X> implements Iterable<X> {\n                         final Iterable<X> compared = (Iterable<X>) other;\n                         return new ScalarWithFallback<>(\n                             new And(\n-                                (X value) -> new True().value(),\n+                                (X value) -> true,\n                                 new Matched<>(\n                                     this,\n                                     compared\n"}}, {"oid": "0603544522c762faf5b42faf2fb1930314500749", "url": "https://github.com/yegor256/cactoos/commit/0603544522c762faf5b42faf2fb1930314500749", "message": "simplify the code", "committedDate": "2020-05-01T22:09:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzMjM2OA==", "url": "https://github.com/yegor256/cactoos/pull/1358#discussion_r418932368", "bodyText": "@lxpdd sorry, I just realized there is something strange here, I don't see how that would implement equals, can you add 2 tests of equals for iterables of equal length : one when the two iterables are equals, and one when they are not?", "author": "victornoel", "createdAt": "2020-05-02T08:45:46Z", "path": "src/main/java/org/cactoos/iterable/IterableOf.java", "diffHunk": "@@ -154,12 +159,20 @@ public boolean equals(final Object other) {\n                     () -> other != null,\n                     () -> Iterable.class.isAssignableFrom(other.getClass()),\n                     () -> {\n-                        final Iterable<?> compared = (Iterable<?>) other;\n-                        final Iterator<?> iterator = compared.iterator();\n-                        return new Unchecked<>(\n+                        final Iterable<X> compared = (Iterable<X>) other;\n+                        return new ScalarWithFallback<>(\n                             new And(\n-                                (X input) -> input.equals(iterator.next()),\n-                                this\n+                                (X value) -> true,\n+                                new Matched<>(", "originalCommit": "0603544522c762faf5b42faf2fb1930314500749", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTExMTYxMg==", "url": "https://github.com/yegor256/cactoos/pull/1358#discussion_r419111612", "bodyText": "@victornoel\nThere is two tests that cover it:\nnotEqualsToIterableWithDifferentElements comparing iterables (1, 2) and (1,0) and\nisEqualToIterableWithTheSameElements comparing iterables (1,2) and (1,2)", "author": "lxpdd", "createdAt": "2020-05-03T14:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzMjM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTExMzE0NQ==", "url": "https://github.com/yegor256/cactoos/pull/1358#discussion_r419113145", "bodyText": "@lxpdd ok, thanks, I re-read the code from Matched and now I understand the logical mistake I made, all is good :) thx!", "author": "victornoel", "createdAt": "2020-05-03T14:42:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzMjM2OA=="}], "type": "inlineReview", "revised_code": null}]}