{"pr_number": 1428, "pr_title": "#1407: Create RepeatedCallable decorator", "pr_createdAt": "2020-08-20T14:05:32Z", "pr_url": "https://github.com/yegor256/cactoos/pull/1428", "timeline": [{"oid": "e667f523ac4911f9309d07dce18b45a6dc43ec76", "url": "https://github.com/yegor256/cactoos/commit/e667f523ac4911f9309d07dce18b45a6dc43ec76", "message": "#1407: Create RepeatedCallable decorator", "committedDate": "2020-08-20T14:03:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3OTc2OQ==", "url": "https://github.com/yegor256/cactoos/pull/1428#discussion_r476579769", "bodyText": "@fabriciofx let's move all of that to the func package", "author": "victornoel", "createdAt": "2020-08-25T16:28:45Z", "path": "src/main/java/org/cactoos/RepeatedCallable.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos;", "originalCommit": "e667f523ac4911f9309d07dce18b45a6dc43ec76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODAwNzYzNw==", "url": "https://github.com/yegor256/cactoos/pull/1428#discussion_r478007637", "bodyText": "@victornoel done!", "author": "fabriciofx", "createdAt": "2020-08-27T03:07:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3OTc2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "01f35602fdc06979ea3a10d623deae2dd38732fb", "chunk": "diff --git a/src/main/java/org/cactoos/RepeatedCallable.java b/src/main/java/org/cactoos/func/RepeatedCallable.java\nsimilarity index 66%\nrename from src/main/java/org/cactoos/RepeatedCallable.java\nrename to src/main/java/org/cactoos/func/RepeatedCallable.java\nindex e0383a95..3a210855 100644\n--- a/src/main/java/org/cactoos/RepeatedCallable.java\n+++ b/src/main/java/org/cactoos/func/RepeatedCallable.java\n\n@@ -21,27 +21,23 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  * SOFTWARE.\n  */\n-package org.cactoos;\n+package org.cactoos.func;\n \n import java.util.concurrent.Callable;\n+import org.cactoos.Func;\n \n /**\n  * Callable that runs repeatedly for a number of times.\n  *\n- * @param <T> Type of output\n+ * @param <X> Type of output\n  * @since 0.49.2\n  */\n-public final class RepeatedCallable<T> implements Callable<T> {\n+public final class RepeatedCallable<X> implements Callable<X> {\n \n     /**\n-     * Original callable.\n+     * The repeated func.\n      */\n-    private final Callable<T> callable;\n-\n-    /**\n-     * How many times to run.\n-     */\n-    private final int times;\n+    private final Func<Boolean, Callable<X>> func;\n \n     /**\n      * Ctor.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MTMwNg==", "url": "https://github.com/yegor256/cactoos/pull/1428#discussion_r476581306", "bodyText": "@fabriciofx instead of reimplementing this here, reuse Repeated here and for example call it with true and a Func that calls the callable and returns true also. just instantiate it and call it from here", "author": "victornoel", "createdAt": "2020-08-25T16:31:08Z", "path": "src/main/java/org/cactoos/RepeatedCallable.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos;\n+\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * Callable that runs repeatedly for a number of times.\n+ *\n+ * @param <T> Type of output\n+ * @since 0.49.2\n+ */\n+public final class RepeatedCallable<T> implements Callable<T> {\n+\n+    /**\n+     * Original callable.\n+     */\n+    private final Callable<T> callable;\n+\n+    /**\n+     * How many times to run.\n+     */\n+    private final int times;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * <p>If {@code max} is equal or less than zero {@link #call()} will return\n+     * an exception.</p>\n+     *\n+     * @param cllbl Callable to repeat.\n+     * @param max How many times.\n+     */\n+    public RepeatedCallable(final Callable<T> cllbl, final int max) {\n+        this.callable = cllbl;\n+        this.times = max;\n+    }\n+\n+    @Override\n+    public T call() throws Exception {\n+        if (this.times <= 0) {\n+            throw new IllegalArgumentException(\n+                \"The number of repetitions must be at least 1\"\n+            );\n+        }\n+        T result = null;\n+        for (int idx = 0; idx < this.times; ++idx) {\n+            result = this.callable.call();\n+        }\n+        return result;", "originalCommit": "e667f523ac4911f9309d07dce18b45a6dc43ec76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODAwOTUwNw==", "url": "https://github.com/yegor256/cactoos/pull/1428#discussion_r478009507", "bodyText": "@victornoel I tried to do this before, but I couldn't. But now I did! Thanks!", "author": "fabriciofx", "createdAt": "2020-08-27T03:09:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MTMwNg=="}], "type": "inlineReview", "revised_code": {"commit": "01f35602fdc06979ea3a10d623deae2dd38732fb", "chunk": "diff --git a/src/main/java/org/cactoos/RepeatedCallable.java b/src/main/java/org/cactoos/func/RepeatedCallable.java\nsimilarity index 66%\nrename from src/main/java/org/cactoos/RepeatedCallable.java\nrename to src/main/java/org/cactoos/func/RepeatedCallable.java\nindex e0383a95..3a210855 100644\n--- a/src/main/java/org/cactoos/RepeatedCallable.java\n+++ b/src/main/java/org/cactoos/func/RepeatedCallable.java\n\n@@ -21,27 +21,23 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  * SOFTWARE.\n  */\n-package org.cactoos;\n+package org.cactoos.func;\n \n import java.util.concurrent.Callable;\n+import org.cactoos.Func;\n \n /**\n  * Callable that runs repeatedly for a number of times.\n  *\n- * @param <T> Type of output\n+ * @param <X> Type of output\n  * @since 0.49.2\n  */\n-public final class RepeatedCallable<T> implements Callable<T> {\n+public final class RepeatedCallable<X> implements Callable<X> {\n \n     /**\n-     * Original callable.\n+     * The repeated func.\n      */\n-    private final Callable<T> callable;\n-\n-    /**\n-     * How many times to run.\n-     */\n-    private final int times;\n+    private final Func<Boolean, Callable<X>> func;\n \n     /**\n      * Ctor.\n"}}, {"oid": "01f35602fdc06979ea3a10d623deae2dd38732fb", "url": "https://github.com/yegor256/cactoos/commit/01f35602fdc06979ea3a10d623deae2dd38732fb", "message": "#1407: Remove repetead code and move to func package", "committedDate": "2020-08-27T04:01:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE5NzkyMQ==", "url": "https://github.com/yegor256/cactoos/pull/1428#discussion_r478197921", "bodyText": "@fabriciofx I think this should not return the callable itself, because here you are repeating the returning of the the callable, not its execution! You want to use FuncOf(final Callable<Y> callable), not public FuncOf(final Y result) :)\nAlso, please simply move the instantiation of Repeated directly in call, I believe it would be simpler to read and understand what's happening.", "author": "victornoel", "createdAt": "2020-08-27T06:57:31Z", "path": "src/main/java/org/cactoos/func/RepeatedCallable.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.func;\n+\n+import java.util.concurrent.Callable;\n+import org.cactoos.Func;\n+\n+/**\n+ * Callable that runs repeatedly for a number of times.\n+ *\n+ * @param <X> Type of output\n+ * @since 0.49.2\n+ */\n+public final class RepeatedCallable<X> implements Callable<X> {\n+\n+    /**\n+     * The repeated func.\n+     */\n+    private final Func<Boolean, Callable<X>> func;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * <p>If {@code max} is equal or less than zero {@link #call()} will return\n+     * an exception.</p>\n+     *\n+     * @param cllbl Callable to repeat.\n+     * @param count How many times.\n+     */\n+    public RepeatedCallable(final Callable<X> cllbl, final int count) {\n+        this.func = new Repeated<>(\n+            new FuncOf<Boolean, Callable<X>>(cllbl),", "originalCommit": "01f35602fdc06979ea3a10d623deae2dd38732fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxOTI0NQ==", "url": "https://github.com/yegor256/cactoos/pull/1428#discussion_r478719245", "bodyText": "@victornoel I hope it's correct now! :) Thanks for your patience!", "author": "fabriciofx", "createdAt": "2020-08-27T21:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE5NzkyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "d9b39e21a59b40b8bbf63c4ce7083a4982385914", "chunk": "diff --git a/src/main/java/org/cactoos/func/RepeatedCallable.java b/src/main/java/org/cactoos/func/RepeatedCallable.java\nindex 3a210855..73c64790 100644\n--- a/src/main/java/org/cactoos/func/RepeatedCallable.java\n+++ b/src/main/java/org/cactoos/func/RepeatedCallable.java\n\n@@ -24,7 +24,6 @@\n package org.cactoos.func;\n \n import java.util.concurrent.Callable;\n-import org.cactoos.Func;\n \n /**\n  * Callable that runs repeatedly for a number of times.\n"}}, {"oid": "d9b39e21a59b40b8bbf63c4ce7083a4982385914", "url": "https://github.com/yegor256/cactoos/commit/d9b39e21a59b40b8bbf63c4ce7083a4982385914", "message": "#1407: change the Repeated object location", "committedDate": "2020-08-27T21:56:12Z", "type": "commit"}]}