{"pr_number": 1463, "pr_title": "#1384: Remove lazy initizaliaztion from MapEnvelope", "pr_createdAt": "2020-09-15T12:52:28Z", "pr_url": "https://github.com/yegor256/cactoos/pull/1463", "timeline": [{"oid": "c678410efc79e0d545e9eb570cb69f59103d5989", "url": "https://github.com/yegor256/cactoos/commit/c678410efc79e0d545e9eb570cb69f59103d5989", "message": "(#1384) Add ctor", "committedDate": "2020-09-15T12:41:54Z", "type": "commit"}, {"oid": "94795d84435684cd8d993c200bf115d263c9279b", "url": "https://github.com/yegor256/cactoos/commit/94795d84435684cd8d993c200bf115d263c9279b", "message": "(#1384) Reuse MapOf", "committedDate": "2020-09-15T12:46:59Z", "type": "commit"}, {"oid": "1deca5de24bcfe2270a967fad5621eebfd00b61c", "url": "https://github.com/yegor256/cactoos/commit/1deca5de24bcfe2270a967fad5621eebfd00b61c", "message": "(#1384) Reuse MapOf", "committedDate": "2020-09-15T12:47:23Z", "type": "commit"}, {"oid": "a168ca6e0e6104c088597ac03e497f14907e8c79", "url": "https://github.com/yegor256/cactoos/commit/a168ca6e0e6104c088597ac03e497f14907e8c79", "message": "(#1384) Reuse MapOf", "committedDate": "2020-09-15T12:47:42Z", "type": "commit"}, {"oid": "68de084cc8a16db69a48da9e4c002d863abe3ae1", "url": "https://github.com/yegor256/cactoos/commit/68de084cc8a16db69a48da9e4c002d863abe3ae1", "message": "(#1384) Reuse MapOf", "committedDate": "2020-09-15T12:48:07Z", "type": "commit"}, {"oid": "75b2fe01bdebef14da237b0b59ea37e4a6821609", "url": "https://github.com/yegor256/cactoos/commit/75b2fe01bdebef14da237b0b59ea37e4a6821609", "message": "(#1384) Reuse MapOf", "committedDate": "2020-09-15T12:48:30Z", "type": "commit"}, {"oid": "fd75e081a42c0cae153311a96c15a4012cdc45a3", "url": "https://github.com/yegor256/cactoos/commit/fd75e081a42c0cae153311a96c15a4012cdc45a3", "message": "(#1384) Simplify MapEnvelope", "committedDate": "2020-09-15T12:49:05Z", "type": "commit"}, {"oid": "b4c2ac213075e58f26a4d22c22b81be3732c1c53", "url": "https://github.com/yegor256/cactoos/commit/b4c2ac213075e58f26a4d22c22b81be3732c1c53", "message": "(#1384) Remove test", "committedDate": "2020-09-15T13:07:13Z", "type": "commit"}, {"oid": "b4c2ac213075e58f26a4d22c22b81be3732c1c53", "url": "https://github.com/yegor256/cactoos/commit/b4c2ac213075e58f26a4d22c22b81be3732c1c53", "message": "(#1384) Remove test", "committedDate": "2020-09-15T13:07:13Z", "type": "forcePushed"}, {"oid": "5c092308b35aa44c74ba3dc089022fc1eb546259", "url": "https://github.com/yegor256/cactoos/commit/5c092308b35aa44c74ba3dc089022fc1eb546259", "message": "(#1384) Qulice complience", "committedDate": "2020-09-15T14:39:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzOTAwOQ==", "url": "https://github.com/yegor256/cactoos/pull/1463#discussion_r488839009", "bodyText": "@andreoss this class should be removed too as discussed in the ticket", "author": "victornoel", "createdAt": "2020-09-15T17:27:05Z", "path": "src/main/java/org/cactoos/map/Solid.java", "diffHunk": "@@ -148,8 +148,10 @@ public Solid(final Map<X, Y> map,\n      */\n     public Solid(final Map<X, Y> map) {", "originalCommit": "5c092308b35aa44c74ba3dc089022fc1eb546259", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19ad463103acf0d7bdac58511bd058d5366e7cde", "chunk": "diff --git a/src/main/java/org/cactoos/map/Solid.java b/src/main/java/org/cactoos/map/Solid.java\ndeleted file mode 100644\nindex 113ec70e..00000000\n--- a/src/main/java/org/cactoos/map/Solid.java\n+++ /dev/null\n\n@@ -1,158 +0,0 @@\n-/*\n- * The MIT License (MIT)\n- *\n- * Copyright (c) 2017-2020 Yegor Bugayenko\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included\n- * in all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n- * SOFTWARE.\n- */\n-package org.cactoos.map;\n-\n-import java.util.Map;\n-import org.cactoos.Func;\n-import org.cactoos.iterable.IterableOf;\n-import org.cactoos.iterable.Mapped;\n-\n-/**\n- * A {@link Map} that is both synchronized and sticky.\n- *\n- * <p>Objects of this class are thread-safe.</p>\n- *\n- * @param <X> Type of key\n- * @param <Y> Type of value\n- * @since 0.24\n- * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n- */\n-public final class Solid<X, Y> extends MapEnvelope<X, Y> {\n-\n-    /**\n-     * Ctor.\n-     * @param list List of entries\n-     */\n-    @SafeVarargs\n-    public Solid(final Map.Entry<X, Y>... list) {\n-        this(new IterableOf<>(list));\n-    }\n-\n-    /**\n-     * Ctor.\n-     * @param map The map to extend\n-     * @param list List of entries\n-     */\n-    @SafeVarargs\n-    public Solid(final Map<X, Y> map, final Map.Entry<X, Y>... list) {\n-        this(map, new IterableOf<>(list));\n-    }\n-\n-    /**\n-     * Ctor.\n-     * @param key Func to create key\n-     * @param value Func to create value\n-     * @param map The map to extend\n-     * @param list List of items\n-     * @param <Z> Type of items in the list\n-     * @checkstyle ParameterNumberCheck (5 lines)\n-     */\n-    public <Z> Solid(final Func<Z, X> key,\n-        final Func<Z, Y> value, final Map<X, Y> map,\n-        final Iterable<Z> list) {\n-        this(\n-            item -> new MapEntry<>(key.apply(item), value.apply(item)),\n-            map, list\n-        );\n-    }\n-\n-    /**\n-     * Ctor.\n-     * @param key Func to create key\n-     * @param value Func to create value\n-     * @param list List of items\n-     * @param <Z> Type of items in the list\n-     */\n-    public <Z> Solid(final Func<Z, X> key,\n-        final Func<Z, Y> value, final Iterable<Z> list) {\n-        this(item -> new MapEntry<>(key.apply(item), value.apply(item)), list);\n-    }\n-\n-    /**\n-     * Ctor.\n-     * @param entry Func to create entry\n-     * @param list List of items\n-     * @param <Z> Type of items in the list\n-     */\n-    @SafeVarargs\n-    public <Z> Solid(final Func<Z, Map.Entry<X, Y>> entry,\n-        final Z... list) {\n-        this(new Mapped<>(entry, list));\n-    }\n-\n-    /**\n-     * Ctor.\n-     * @param entry Func to create entry\n-     * @param list List of items\n-     * @param <Z> Type of items in the list\n-     */\n-    public <Z> Solid(final Func<Z, Map.Entry<X, Y>> entry,\n-        final Iterable<Z> list) {\n-        this(new Mapped<>(entry, list));\n-    }\n-\n-    /**\n-     * Ctor.\n-     * @param entry Func to create entry\n-     * @param map The map to extend\n-     * @param list List of items\n-     * @param <Z> Type of items in the list\n-     */\n-    public <Z> Solid(final Func<Z, Map.Entry<X, Y>> entry,\n-        final Map<X, Y> map, final Iterable<Z> list) {\n-        this(map, new Mapped<>(entry, list));\n-    }\n-\n-    /**\n-     * Ctor.\n-     * @param list Entries for the entries\n-     */\n-    public Solid(final Iterable<Map.Entry<X, Y>> list) {\n-        this(new MapOf<>(list));\n-    }\n-\n-    /**\n-     * Ctor.\n-     * @param map Pre-existing map we want to extend\n-     * @param list Entries for the entries\n-     */\n-    public Solid(final Map<X, Y> map,\n-        final Iterable<Map.Entry<X, Y>> list) {\n-        this(new MapOf<>(map, list));\n-    }\n-\n-    /**\n-     * Ctor.\n-     * @param map The map\n-     */\n-    public Solid(final Map<X, Y> map) {\n-        super(\n-            new MapOf<>(\n-                new org.cactoos.scalar.Solid<Map<X, Y>>(\n-                    () -> new Synced<>(new Sticky<X, Y>(map))\n-                )\n-            )\n-        );\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzOTA2Mw==", "url": "https://github.com/yegor256/cactoos/pull/1463#discussion_r488839063", "bodyText": "@andreoss this class should be removed too as discussed in the ticket", "author": "victornoel", "createdAt": "2020-09-15T17:27:10Z", "path": "src/main/java/org/cactoos/map/Sticky.java", "diffHunk": "@@ -158,12 +158,14 @@ public Sticky(final Map<X, Y> map,\n      */\n     public Sticky(final Map<X, Y> map) {", "originalCommit": "5c092308b35aa44c74ba3dc089022fc1eb546259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg5NDQ2Nw==", "url": "https://github.com/yegor256/cactoos/pull/1463#discussion_r488894467", "bodyText": "@victornoel Done.", "author": "andreoss", "createdAt": "2020-09-15T18:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzOTA2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "263ac9863dc8c7c496a89fa894182f8e0beca4ba", "chunk": "diff --git a/src/main/java/org/cactoos/map/Sticky.java b/src/main/java/org/cactoos/map/Sticky.java\ndeleted file mode 100644\nindex 45b9d5e8..00000000\n--- a/src/main/java/org/cactoos/map/Sticky.java\n+++ /dev/null\n\n@@ -1,173 +0,0 @@\n-/*\n- * The MIT License (MIT)\n- *\n- * Copyright (c) 2017-2020 Yegor Bugayenko\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included\n- * in all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n- * SOFTWARE.\n- */\n-package org.cactoos.map;\n-\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-import org.cactoos.Func;\n-import org.cactoos.iterable.IterableOf;\n-import org.cactoos.iterable.Mapped;\n-\n-/**\n- * Map decorator that goes through the map only once.\n- *\n- * <p>The map is read-only.</p>\n- *\n- * <p>There is no thread-safety guarantee.\n- *\n- * @param <X> Type of key\n- * @param <Y> Type of value\n- * @since 0.8\n- */\n-public final class Sticky<X, Y> extends MapEnvelope<X, Y> {\n-\n-    /**\n-     * Ctor.\n-     * @param list List of entries\n-     */\n-    @SafeVarargs\n-    public Sticky(final Map.Entry<X, Y>... list) {\n-        this(new IterableOf<>(list));\n-    }\n-\n-    /**\n-     * Ctor.\n-     * @param map The map to extend\n-     * @param list List of entries\n-     * @since 0.12\n-     */\n-    @SafeVarargs\n-    public Sticky(final Map<X, Y> map, final Map.Entry<X, Y>... list) {\n-        this(map, new IterableOf<>(list));\n-    }\n-\n-    /**\n-     * Ctor.\n-     * @param key Func to create key\n-     * @param value Func to create value\n-     * @param map The map to extend\n-     * @param list List of items\n-     * @param <Z> Type of items in the list\n-     * @since 0.12\n-     * @checkstyle ParameterNumberCheck (5 lines)\n-     */\n-    public <Z> Sticky(final Func<Z, X> key,\n-        final Func<Z, Y> value, final Map<X, Y> map,\n-        final Iterable<Z> list) {\n-        this(\n-            item -> new MapEntry<>(key.apply(item), value.apply(item)),\n-            map, list\n-        );\n-    }\n-\n-    /**\n-     * Ctor.\n-     * @param key Func to create key\n-     * @param value Func to create value\n-     * @param list List of items\n-     * @param <Z> Type of items in the list\n-     * @since 0.11\n-     */\n-    public <Z> Sticky(final Func<Z, X> key,\n-        final Func<Z, Y> value, final Iterable<Z> list) {\n-        this(item -> new MapEntry<>(key.apply(item), value.apply(item)), list);\n-    }\n-\n-    /**\n-     * Ctor.\n-     * @param entry Func to create entry\n-     * @param list List of items\n-     * @param <Z> Type of items in the list\n-     * @since 0.11\n-     */\n-    @SafeVarargs\n-    public <Z> Sticky(final Func<Z, Map.Entry<X, Y>> entry,\n-        final Z... list) {\n-        this(new Mapped<>(entry, list));\n-    }\n-\n-    /**\n-     * Ctor.\n-     * @param entry Func to create entry\n-     * @param list List of items\n-     * @param <Z> Type of items in the list\n-     * @since 0.11\n-     */\n-    public <Z> Sticky(final Func<Z, Map.Entry<X, Y>> entry,\n-        final Iterable<Z> list) {\n-        this(new Mapped<>(entry, list));\n-    }\n-\n-    /**\n-     * Ctor.\n-     * @param entry Func to create entry\n-     * @param map The map to extend\n-     * @param list List of items\n-     * @param <Z> Type of items in the list\n-     * @since 0.12\n-     */\n-    public <Z> Sticky(final Func<Z, Map.Entry<X, Y>> entry,\n-        final Map<X, Y> map, final Iterable<Z> list) {\n-        this(map, new Mapped<>(entry, list));\n-    }\n-\n-    /**\n-     * Ctor.\n-     * @param list Entries for the entries\n-     */\n-    public Sticky(final Iterable<Map.Entry<X, Y>> list) {\n-        this(new MapOf<>(list));\n-    }\n-\n-    /**\n-     * Ctor.\n-     * @param map Pre-existing map we want to extend\n-     * @param list Entries for the entries\n-     * @since 0.12\n-     */\n-    public Sticky(final Map<X, Y> map,\n-        final Iterable<Map.Entry<X, Y>> list) {\n-        this(new MapOf<>(map, list));\n-    }\n-\n-    /**\n-     * Ctor.\n-     * @param map The map\n-     */\n-    public Sticky(final Map<X, Y> map) {\n-        super(\n-            new MapOf<>(\n-                new org.cactoos.scalar.Sticky<>(\n-                    () -> {\n-                        final Map<X, Y> temp = new HashMap<>(0);\n-                        temp.putAll(map);\n-                        return Collections.unmodifiableMap(temp);\n-                    }\n-                )\n-            )\n-        );\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzOTQwOQ==", "url": "https://github.com/yegor256/cactoos/pull/1463#discussion_r488839409", "bodyText": "@andreoss there is no need for wrapping that into Synced anymore since it is evaluated in the constructor", "author": "victornoel", "createdAt": "2020-09-15T17:27:50Z", "path": "src/main/java/org/cactoos/map/Synced.java", "diffHunk": "@@ -150,12 +150,14 @@ public Synced(final Map<X, Y> map,\n      */\n     public Synced(final Map<X, Y> map) {\n         super(\n-            new org.cactoos.scalar.Synced<>(\n-                () -> {\n-                    final Map<X, Y> temp = new ConcurrentHashMap<>(0);\n-                    temp.putAll(map);\n-                    return temp;\n-                }\n+            new MapOf<>(\n+                new org.cactoos.scalar.Synced<>(", "originalCommit": "5c092308b35aa44c74ba3dc089022fc1eb546259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg5NDg0MQ==", "url": "https://github.com/yegor256/cactoos/pull/1463#discussion_r488894841", "bodyText": "@victornoel Replaced with Collections.synchronizedMap", "author": "andreoss", "createdAt": "2020-09-15T18:55:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzOTQwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "41ce82eed734d200ef0b892f83cfde0b8c716b0e", "chunk": "diff --git a/src/main/java/org/cactoos/map/Synced.java b/src/main/java/org/cactoos/map/Synced.java\nindex 5203df51..e349a374 100644\n--- a/src/main/java/org/cactoos/map/Synced.java\n+++ b/src/main/java/org/cactoos/map/Synced.java\n\n@@ -151,13 +151,11 @@ public final class Synced<X, Y> extends MapEnvelope<X, Y> {\n     public Synced(final Map<X, Y> map) {\n         super(\n             new MapOf<>(\n-                new org.cactoos.scalar.Synced<>(\n-                    () -> {\n-                        final Map<X, Y> temp = new ConcurrentHashMap<>(0);\n-                        temp.putAll(map);\n-                        return temp;\n-                    }\n-                )\n+                () -> {\n+                    final Map<X, Y> temp = new ConcurrentHashMap<>(0);\n+                    temp.putAll(map);\n+                    return temp;\n+                }\n             )\n         );\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzOTYyOA==", "url": "https://github.com/yegor256/cactoos/pull/1463#discussion_r488839628", "bodyText": "@andreoss what is the problem with this test?", "author": "victornoel", "createdAt": "2020-09-15T17:28:15Z", "path": "src/test/java/org/cactoos/map/MapOfTest.java", "diffHunk": "@@ -78,24 +74,6 @@ void convertsIterableToMap() {\n         );\n     }\n \n-    @Test\n-    void sensesChangesInMap() throws Exception {", "originalCommit": "5c092308b35aa44c74ba3dc089022fc1eb546259", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzOTczMA==", "url": "https://github.com/yegor256/cactoos/pull/1463#discussion_r488839730", "bodyText": "@andreoss here too", "author": "victornoel", "createdAt": "2020-09-15T17:28:24Z", "path": "src/test/java/org/cactoos/scalar/PropertiesOfTest.java", "diffHunk": "@@ -107,24 +102,4 @@ void convertsMapToProperties() {\n         ).affirm();\n     }\n \n-    @Test\n-    void sensesChangesInMap() throws Exception {", "originalCommit": "5c092308b35aa44c74ba3dc089022fc1eb546259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MTk4OQ==", "url": "https://github.com/yegor256/cactoos/pull/1463#discussion_r488851989", "bodyText": "@victornoel This test (and the one above) checks either map is lazily created or not, thus it's removed", "author": "andreoss", "createdAt": "2020-09-15T17:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzOTczMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2NDQxMA==", "url": "https://github.com/yegor256/cactoos/pull/1463#discussion_r488864410", "bodyText": "@andreoss ok, anyway, those tests are so strange that even if they had sense they would be unmaintainable ^^ thx :)", "author": "victornoel", "createdAt": "2020-09-15T18:05:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzOTczMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg0MDMyNg==", "url": "https://github.com/yegor256/cactoos/pull/1463#discussion_r488840326", "bodyText": "@andreoss instead of using a Scalar based constructor, I think it would make more sense to follow the same pattern as in ListOf and SetOf.", "author": "victornoel", "createdAt": "2020-09-15T17:29:28Z", "path": "src/main/java/org/cactoos/map/MapOf.java", "diffHunk": "@@ -148,12 +150,20 @@ public MapOf(final Map<X, Y> src,\n      * @param entries List of the entries\n      */\n     public MapOf(final Iterable<Map.Entry<X, Y>> entries) {\n-        super(() -> {\n+        this(() -> {\n             final Map<X, Y> temp = new HashMap<>(0);\n             for (final Map.Entry<X, Y> entry : entries) {\n                 temp.put(entry.getKey(), entry.getValue());\n             }\n             return Collections.unmodifiableMap(temp);\n         });\n     }", "originalCommit": "5c092308b35aa44c74ba3dc089022fc1eb546259", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c4db78bdcca148c70f386def639eb738e815641", "chunk": "diff --git a/src/main/java/org/cactoos/map/MapOf.java b/src/main/java/org/cactoos/map/MapOf.java\nindex 0f942a24..4d7dcb40 100644\n--- a/src/main/java/org/cactoos/map/MapOf.java\n+++ b/src/main/java/org/cactoos/map/MapOf.java\n\n@@ -147,23 +146,20 @@ public final class MapOf<X, Y> extends MapEnvelope<X, Y> {\n \n     /**\n      * Ctor.\n-     * @param entries List of the entries\n+     * @param scalar The scalar for Map.\n      */\n-    public MapOf(final Iterable<Map.Entry<X, Y>> entries) {\n-        this(() -> {\n-            final Map<X, Y> temp = new HashMap<>(0);\n-            for (final Map.Entry<X, Y> entry : entries) {\n-                temp.put(entry.getKey(), entry.getValue());\n-            }\n-            return Collections.unmodifiableMap(temp);\n-        });\n+    public MapOf(final Scalar<Map<X, Y>> scalar) {\n+        this(new Unchecked<>(scalar).value().entrySet());\n     }\n \n     /**\n      * Ctor.\n-     * @param scalar The scalar for Map.\n+     * @param entries List of the entries\n      */\n-    public MapOf(final Scalar<Map<X, Y>> scalar) {\n-        super(new Unchecked<>(scalar).value());\n+    public MapOf(final Iterable<Map.Entry<X, Y>> entries) {\n+        super(new HashMap<>());\n+        for (final Map.Entry<X, Y> entry : entries) {\n+            this.put(entry.getKey(), entry.getValue());\n+        }\n     }\n }\n"}}, {"oid": "263ac9863dc8c7c496a89fa894182f8e0beca4ba", "url": "https://github.com/yegor256/cactoos/commit/263ac9863dc8c7c496a89fa894182f8e0beca4ba", "message": "(#1384) Remove map.Sticky", "committedDate": "2020-09-15T17:51:33Z", "type": "commit"}, {"oid": "19ad463103acf0d7bdac58511bd058d5366e7cde", "url": "https://github.com/yegor256/cactoos/commit/19ad463103acf0d7bdac58511bd058d5366e7cde", "message": "(#1384) Remove map.Solid", "committedDate": "2020-09-15T17:51:49Z", "type": "commit"}, {"oid": "41ce82eed734d200ef0b892f83cfde0b8c716b0e", "url": "https://github.com/yegor256/cactoos/commit/41ce82eed734d200ef0b892f83cfde0b8c716b0e", "message": "(#1384) Do not sync, since map created at construction", "committedDate": "2020-09-15T17:54:45Z", "type": "commit"}, {"oid": "0c4db78bdcca148c70f386def639eb738e815641", "url": "https://github.com/yegor256/cactoos/commit/0c4db78bdcca148c70f386def639eb738e815641", "message": "(#1384) Fill new map at construction", "committedDate": "2020-09-15T17:55:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2NDc5MQ==", "url": "https://github.com/yegor256/cactoos/pull/1463#discussion_r488864791", "bodyText": "@andreoss here please replace all of this by just wrapping the map into Collections.synchronizedMap as with list.Synced", "author": "victornoel", "createdAt": "2020-09-15T18:06:14Z", "path": "src/main/java/org/cactoos/map/Synced.java", "diffHunk": "@@ -150,12 +150,14 @@ public Synced(final Map<X, Y> map,\n      */\n     public Synced(final Map<X, Y> map) {\n         super(\n-            new org.cactoos.scalar.Synced<>(\n-                () -> {\n-                    final Map<X, Y> temp = new ConcurrentHashMap<>(0);\n-                    temp.putAll(map);\n-                    return temp;\n-                }\n+            new MapOf<>(\n+                new org.cactoos.scalar.Synced<>(\n+                    () -> {\n+                        final Map<X, Y> temp = new ConcurrentHashMap<>(0);", "originalCommit": "5c092308b35aa44c74ba3dc089022fc1eb546259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg5NTAwMg==", "url": "https://github.com/yegor256/cactoos/pull/1463#discussion_r488895002", "bodyText": "@victornoel Done.", "author": "andreoss", "createdAt": "2020-09-15T18:55:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2NDc5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c6bdf1f6b463495c2a8273c3a6e439243cf8079", "chunk": "diff --git a/src/main/java/org/cactoos/map/Synced.java b/src/main/java/org/cactoos/map/Synced.java\nindex 5203df51..e349a374 100644\n--- a/src/main/java/org/cactoos/map/Synced.java\n+++ b/src/main/java/org/cactoos/map/Synced.java\n\n@@ -151,13 +151,11 @@ public final class Synced<X, Y> extends MapEnvelope<X, Y> {\n     public Synced(final Map<X, Y> map) {\n         super(\n             new MapOf<>(\n-                new org.cactoos.scalar.Synced<>(\n-                    () -> {\n-                        final Map<X, Y> temp = new ConcurrentHashMap<>(0);\n-                        temp.putAll(map);\n-                        return temp;\n-                    }\n-                )\n+                () -> {\n+                    final Map<X, Y> temp = new ConcurrentHashMap<>(0);\n+                    temp.putAll(map);\n+                    return temp;\n+                }\n             )\n         );\n     }\n"}}, {"oid": "4c6bdf1f6b463495c2a8273c3a6e439243cf8079", "url": "https://github.com/yegor256/cactoos/commit/4c6bdf1f6b463495c2a8273c3a6e439243cf8079", "message": "(#1384) Remove Sticky from test", "committedDate": "2020-09-15T18:18:21Z", "type": "commit"}, {"oid": "c13447d49510b08ecfd5d6dd2ffe22db1c621aa9", "url": "https://github.com/yegor256/cactoos/commit/c13447d49510b08ecfd5d6dd2ffe22db1c621aa9", "message": "(#1384) Delegate whole set of methods", "committedDate": "2020-09-15T18:30:29Z", "type": "commit"}, {"oid": "4f55c283cb7772a95999ab04839dc3ef9c6608ac", "url": "https://github.com/yegor256/cactoos/commit/4f55c283cb7772a95999ab04839dc3ef9c6608ac", "message": "(#1384) Clean up test case", "committedDate": "2020-09-15T18:51:52Z", "type": "commit"}, {"oid": "a76443430de4bffa378f19de643074b83a1560e1", "url": "https://github.com/yegor256/cactoos/commit/a76443430de4bffa378f19de643074b83a1560e1", "message": "(#1384) Use Collections.synchronizedMap", "committedDate": "2020-09-15T18:52:06Z", "type": "commit"}, {"oid": "6e9081312bd3778a0dad9042b696b8cc58c9e67b", "url": "https://github.com/yegor256/cactoos/commit/6e9081312bd3778a0dad9042b696b8cc58c9e67b", "message": "(#1384) Remove dead link", "committedDate": "2020-09-15T18:56:49Z", "type": "commit"}, {"oid": "a1a587c59e4b8a9703740b5fbd1f44c86b9ee3f1", "url": "https://github.com/yegor256/cactoos/commit/a1a587c59e4b8a9703740b5fbd1f44c86b9ee3f1", "message": "(#1384) Remove dead link & update doc", "committedDate": "2020-09-15T18:57:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUyNjMzNA==", "url": "https://github.com/yegor256/cactoos/pull/1463#discussion_r489526334", "bodyText": "@andreoss normally you don't need to go through MapOf, the stream.collect returns a Map that can be passed directly to super. Right?", "author": "victornoel", "createdAt": "2020-09-16T15:25:55Z", "path": "src/main/java/org/cactoos/map/Grouped.java", "diffHunk": "@@ -57,16 +57,19 @@ public Grouped(\n         final Function<T, K> keys,\n         final Function<T, V> values\n     ) {\n-        super(() -> {\n-            final Stream<T> stream = StreamSupport.stream(\n-                list.spliterator(), false\n-            );\n-            return stream.collect(\n-                Collectors.groupingBy(\n-                    keys,\n-                    Collectors.mapping(values, Collectors.toList())\n-                )\n-            );\n-        });\n+        super(\n+            new MapOf<>(", "originalCommit": "a1a587c59e4b8a9703740b5fbd1f44c86b9ee3f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM2ODgwOA==", "url": "https://github.com/yegor256/cactoos/pull/1463#discussion_r491368808", "bodyText": "@victornoel Done", "author": "andreoss", "createdAt": "2020-09-19T10:22:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUyNjMzNA=="}], "type": "inlineReview", "revised_code": {"commit": "7925bc6127bdb3e679d25ca1cb4e779827dbdcde", "chunk": "diff --git a/src/main/java/org/cactoos/map/Grouped.java b/src/main/java/org/cactoos/map/Grouped.java\nindex 49f18985..9bbf02c5 100644\n--- a/src/main/java/org/cactoos/map/Grouped.java\n+++ b/src/main/java/org/cactoos/map/Grouped.java\n\n@@ -58,18 +57,14 @@ public final class Grouped<K, V, T> extends MapEnvelope<K, List<V>> {\n         final Function<T, V> values\n     ) {\n         super(\n-            new MapOf<>(\n-                () -> {\n-                    final Stream<T> stream = StreamSupport.stream(\n-                        list.spliterator(), false\n-                    );\n-                    return stream.collect(\n-                        Collectors.groupingBy(\n-                            keys,\n-                            Collectors.mapping(values, Collectors.toList())\n-                        )\n-                    );\n-                })\n+            StreamSupport.stream(\n+                list.spliterator(), false\n+            ).collect(\n+                Collectors.groupingBy(\n+                    keys,\n+                    Collectors.mapping(values, Collectors.toList())\n+                )\n+            )\n         );\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUyNzIyOA==", "url": "https://github.com/yegor256/cactoos/pull/1463#discussion_r489527228", "bodyText": "@andreoss what is the Scalar for? If we want to create a map from an existing one, then let's just take a map in the constructor. You can then use putAll to add all the elements of the original map.", "author": "victornoel", "createdAt": "2020-09-16T15:27:02Z", "path": "src/main/java/org/cactoos/map/MapOf.java", "diffHunk": "@@ -143,17 +140,22 @@ public MapOf(final Map<X, Y> src,\n         );\n     }\n \n+    /**\n+     * Ctor.\n+     * @param scalar The scalar for Map.\n+     */\n+    public MapOf(final Scalar<Map<X, Y>> scalar) {\n+        this(new Unchecked<>(scalar).value().entrySet());", "originalCommit": "a1a587c59e4b8a9703740b5fbd1f44c86b9ee3f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM2ODg5Nw==", "url": "https://github.com/yegor256/cactoos/pull/1463#discussion_r491368897", "bodyText": "@victornoel Removed that ctor.", "author": "andreoss", "createdAt": "2020-09-19T10:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUyNzIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "81580b2b923fb0098511f2856be069a78b4c6bb8", "chunk": "diff --git a/src/main/java/org/cactoos/map/MapOf.java b/src/main/java/org/cactoos/map/MapOf.java\nindex 8e220fcc..1d0e4112 100644\n--- a/src/main/java/org/cactoos/map/MapOf.java\n+++ b/src/main/java/org/cactoos/map/MapOf.java\n\n@@ -140,14 +140,6 @@ public final class MapOf<X, Y> extends MapEnvelope<X, Y> {\n         );\n     }\n \n-    /**\n-     * Ctor.\n-     * @param scalar The scalar for Map.\n-     */\n-    public MapOf(final Scalar<Map<X, Y>> scalar) {\n-        this(new Unchecked<>(scalar).value().entrySet());\n-    }\n-\n     /**\n      * Ctor.\n      * @param entries List of the entries\n"}}, {"oid": "7925bc6127bdb3e679d25ca1cb4e779827dbdcde", "url": "https://github.com/yegor256/cactoos/commit/7925bc6127bdb3e679d25ca1cb4e779827dbdcde", "message": "(#1384) Remove extra wrapping", "committedDate": "2020-09-19T10:20:43Z", "type": "commit"}, {"oid": "81580b2b923fb0098511f2856be069a78b4c6bb8", "url": "https://github.com/yegor256/cactoos/commit/81580b2b923fb0098511f2856be069a78b4c6bb8", "message": "(#1384) Remove unused ctor", "committedDate": "2020-09-19T10:22:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcwOTk4OA==", "url": "https://github.com/yegor256/cactoos/pull/1463#discussion_r491709988", "bodyText": "@andreoss can't we manage to avoid creating an intermediate list just to iterate over it in MapOf? I'm not very clear about what streams provide us for that though...", "author": "victornoel", "createdAt": "2020-09-20T16:51:14Z", "path": "src/main/java/org/cactoos/map/Merged.java", "diffHunk": "@@ -42,11 +42,12 @@\n      */\n     @SafeVarargs\n     public Merged(final Map<K, V>... maps) {\n-        super(() -> new MapOf<>(\n-            new ListOf<>(maps)\n-                .stream()\n-                .flatMap(map -> map.entrySet().stream())\n-                .collect(Collectors.toList())\n+        super(\n+            new MapOf<>(\n+                new ListOf<>(maps)\n+                    .stream()\n+                    .flatMap(map -> map.entrySet().stream())\n+                    .collect(Collectors.toList())", "originalCommit": "81580b2b923fb0098511f2856be069a78b4c6bb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxMDA1Ng==", "url": "https://github.com/yegor256/cactoos/pull/1463#discussion_r491710056", "bodyText": "@andreoss well actually, this is out of scope of this PR, let's forget about it, I will create an issue.", "author": "victornoel", "createdAt": "2020-09-20T16:52:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcwOTk4OA=="}], "type": "inlineReview", "revised_code": null}]}