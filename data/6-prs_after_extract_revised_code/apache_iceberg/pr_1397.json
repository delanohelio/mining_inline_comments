{"pr_number": 1397, "pr_title": "Actions: Speed up expire snapshots action", "pr_createdAt": "2020-08-27T20:48:20Z", "pr_url": "https://github.com/apache/iceberg/pull/1397", "timeline": [{"oid": "ddbea52dcfea30d6311252446af23a21f94f5b7d", "url": "https://github.com/apache/iceberg/commit/ddbea52dcfea30d6311252446af23a21f94f5b7d", "message": "Do not use all_data_files table in ExpireSnapshotsAction.", "committedDate": "2020-08-27T20:43:50Z", "type": "commit"}, {"oid": "472907892983a590135f5e4c54e8c16c18865e0c", "url": "https://github.com/apache/iceberg/commit/472907892983a590135f5e4c54e8c16c18865e0c", "message": "Deduplicate manifests before reading in expire action and broadcast IO.", "committedDate": "2020-08-27T20:43:50Z", "type": "commit"}, {"oid": "da38878e37447bf4f40dbcce2fd10ebda872d7d1", "url": "https://github.com/apache/iceberg/commit/da38878e37447bf4f40dbcce2fd10ebda872d7d1", "message": "Fix memory consumption in ExpireSnapshotsAction.", "committedDate": "2020-08-27T20:43:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY5MDc0Ng==", "url": "https://github.com/apache/iceberg/pull/1397#discussion_r478690746", "bodyText": "The Datafile Equivalent of this is named SparkDataFile, although it isn't written as a Bean as uses a \"wrap(Row row)\" method fo applying. I think this naming more sense to me, just wanted to note.", "author": "RussellSpitzer", "createdAt": "2020-08-27T20:56:24Z", "path": "spark/src/main/java/org/apache/iceberg/actions/ManifestFileBean.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import org.apache.iceberg.ManifestContent;\n+import org.apache.iceberg.ManifestFile;\n+\n+public class ManifestFileBean implements ManifestFile {", "originalCommit": "da38878e37447bf4f40dbcce2fd10ebda872d7d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY5MTgyNA==", "url": "https://github.com/apache/iceberg/pull/1397#discussion_r478691824", "bodyText": "I forgot about this when I refactored before! Good catch", "author": "RussellSpitzer", "createdAt": "2020-08-27T20:58:27Z", "path": "spark/src/main/java/org/apache/iceberg/actions/BaseAction.java", "diffHunk": "@@ -57,8 +65,8 @@ protected String metadataTableName(String tableName, MetadataTableType type) {\n   }\n \n   /**\n-   * Returns all the path locations of all Manifest Lists for a given table\n-   * @param table the table\n+   * Returns all the path locations of all Manifest Lists for a given list of snapshots\n+   * @param snapshots snapshots", "originalCommit": "da38878e37447bf4f40dbcce2fd10ebda872d7d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwMzYxMg==", "url": "https://github.com/apache/iceberg/pull/1397#discussion_r478703612", "bodyText": "As we discussed a bit, it may make sense to log a warning here for users with \"adaptive query on\" that they will lose the ability to control the parallelism of the manifest read stage with that parameter enabled. I'm a little torn on whether that is too technical a detail or whether it will trip up lots of real users ...", "author": "RussellSpitzer", "createdAt": "2020-08-27T21:23:11Z", "path": "spark/src/main/java/org/apache/iceberg/actions/BaseAction.java", "diffHunk": "@@ -94,9 +102,30 @@ protected String metadataTableName(String tableName, MetadataTableType type) {\n     return buildValidDataFileDF(spark, table().toString());\n   }\n \n+  private static class ReadManifest implements FlatMapFunction<ManifestFileBean, String> {\n+    private final Broadcast<FileIO> io;\n+\n+    ReadManifest(Broadcast<FileIO> io) {\n+      this.io = io;\n+    }\n+\n+    @Override\n+    public Iterator<String> call(ManifestFileBean manifest) {\n+      return new ClosingIterator<>(ManifestFiles.readPaths(manifest, io.getValue()).iterator());\n+    }\n+  }\n+\n   protected Dataset<Row> buildValidDataFileDF(SparkSession spark, String tableName) {\n-    String allDataFilesMetadataTable = metadataTableName(tableName, MetadataTableType.ALL_DATA_FILES);\n-    return spark.read().format(\"iceberg\").load(allDataFilesMetadataTable).select(\"file_path\");\n+    JavaSparkContext context = new JavaSparkContext(spark.sparkContext());\n+    Broadcast<FileIO> ioBroadcast = context.broadcast(SparkUtil.serializableFileIO(table()));\n+    String allManifestsMetadataTable = metadataTableName(tableName, MetadataTableType.ALL_MANIFESTS);\n+\n+    Dataset<ManifestFileBean> allManifests = spark.read().format(\"iceberg\").load(allManifestsMetadataTable)\n+        .selectExpr(\"path\", \"length\", \"partition_spec_id as partitionSpecId\", \"added_snapshot_id as addedSnapshotId\")\n+        .dropDuplicates(\"path\")\n+        .as(Encoders.bean(ManifestFileBean.class));", "originalCommit": "da38878e37447bf4f40dbcce2fd10ebda872d7d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyMzUyNA==", "url": "https://github.com/apache/iceberg/pull/1397#discussion_r478723524", "bodyText": "Fixed by adding a repartition.", "author": "rdblue", "createdAt": "2020-08-27T22:09:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwMzYxMg=="}], "type": "inlineReview", "revised_code": {"commit": "740989ce69826b44dc168a5564e57092fc0742b0", "chunk": "diff --git a/spark/src/main/java/org/apache/iceberg/actions/BaseAction.java b/spark/src/main/java/org/apache/iceberg/actions/BaseAction.java\nindex d0e91a9f5..474a2eb9a 100644\n--- a/spark/src/main/java/org/apache/iceberg/actions/BaseAction.java\n+++ b/spark/src/main/java/org/apache/iceberg/actions/BaseAction.java\n\n@@ -102,19 +102,6 @@ abstract class BaseAction<R> implements Action<R> {\n     return buildValidDataFileDF(spark, table().toString());\n   }\n \n-  private static class ReadManifest implements FlatMapFunction<ManifestFileBean, String> {\n-    private final Broadcast<FileIO> io;\n-\n-    ReadManifest(Broadcast<FileIO> io) {\n-      this.io = io;\n-    }\n-\n-    @Override\n-    public Iterator<String> call(ManifestFileBean manifest) {\n-      return new ClosingIterator<>(ManifestFiles.readPaths(manifest, io.getValue()).iterator());\n-    }\n-  }\n-\n   protected Dataset<Row> buildValidDataFileDF(SparkSession spark, String tableName) {\n     JavaSparkContext context = new JavaSparkContext(spark.sparkContext());\n     Broadcast<FileIO> ioBroadcast = context.broadcast(SparkUtil.serializableFileIO(table()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwNTA0OA==", "url": "https://github.com/apache/iceberg/pull/1397#discussion_r478705048", "bodyText": "For these and the other ones like it, should we throw unsupported? Since these values are not actually populated?", "author": "RussellSpitzer", "createdAt": "2020-08-27T21:26:09Z", "path": "spark/src/main/java/org/apache/iceberg/actions/ManifestFileBean.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import org.apache.iceberg.ManifestContent;\n+import org.apache.iceberg.ManifestFile;\n+\n+public class ManifestFileBean implements ManifestFile {\n+  private String path = null;\n+  private Long length = null;\n+  private Integer partitionSpecId = null;\n+  private Long addedSnapshotId = null;\n+\n+  public String getPath() {\n+    return path;\n+  }\n+\n+  public void setPath(String path) {\n+    this.path = path;\n+  }\n+\n+  public Long getLength() {\n+    return length;\n+  }\n+\n+  public void setLength(Long length) {\n+    this.length = length;\n+  }\n+\n+  public Integer getPartitionSpecId() {\n+    return partitionSpecId;\n+  }\n+\n+  public void setPartitionSpecId(Integer partitionSpecId) {\n+    this.partitionSpecId = partitionSpecId;\n+  }\n+\n+  public Long getAddedSnapshotId() {\n+    return addedSnapshotId;\n+  }\n+\n+  public void setAddedSnapshotId(Long addedSnapshotId) {\n+    this.addedSnapshotId = addedSnapshotId;\n+  }\n+\n+  @Override\n+  public String path() {\n+    return path;\n+  }\n+\n+  @Override\n+  public long length() {\n+    return length;\n+  }\n+\n+  @Override\n+  public int partitionSpecId() {\n+    return partitionSpecId;\n+  }\n+\n+  @Override\n+  public ManifestContent content() {\n+    return ManifestContent.DATA;\n+  }\n+\n+  @Override\n+  public long sequenceNumber() {\n+    return 0;", "originalCommit": "da38878e37447bf4f40dbcce2fd10ebda872d7d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwNjY0MQ==", "url": "https://github.com/apache/iceberg/pull/1397#discussion_r478706641", "bodyText": "This is actually used by the reader to construct inherited metadata. I think we should just make this class package-private since it is only intended to be used by the action.", "author": "rdblue", "createdAt": "2020-08-27T21:29:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwNTA0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwNzA2OA==", "url": "https://github.com/apache/iceberg/pull/1397#discussion_r478707068", "bodyText": "Sorry, I just remembered that it can't be or else Spark can't use it.", "author": "rdblue", "createdAt": "2020-08-27T21:30:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwNTA0OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwOTI4NA==", "url": "https://github.com/apache/iceberg/pull/1397#discussion_r478709284", "bodyText": "Do we want to document or reflect in the name that we return paths for liveEntries only?", "author": "aokolnychyi", "createdAt": "2020-08-27T21:35:56Z", "path": "core/src/main/java/org/apache/iceberg/ManifestFiles.java", "diffHunk": "@@ -23,15 +23,30 @@\n import java.util.Map;\n import org.apache.iceberg.ManifestReader.FileType;\n import org.apache.iceberg.exceptions.RuntimeIOException;\n+import org.apache.iceberg.io.CloseableIterable;\n import org.apache.iceberg.io.FileIO;\n import org.apache.iceberg.io.InputFile;\n import org.apache.iceberg.io.OutputFile;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n \n public class ManifestFiles {\n   private ManifestFiles() {\n   }\n \n+  /**\n+   * Returns a {@link CloseableIterable} of file paths in the {@link ManifestFile}.\n+   *\n+   * @param manifest a ManifestFile\n+   * @param io a FileIO\n+   * @return a manifest reader\n+   */\n+  public static CloseableIterable<String> readPaths(ManifestFile manifest, FileIO io) {", "originalCommit": "da38878e37447bf4f40dbcce2fd10ebda872d7d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyMzM1NA==", "url": "https://github.com/apache/iceberg/pull/1397#discussion_r478723354", "bodyText": "No, because the live entries are the expected case in the API. That's why readers are Iterable<DataFile>. Entries and deleted files are hidden through the API.", "author": "rdblue", "createdAt": "2020-08-27T22:09:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwOTI4NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxMDg0Ng==", "url": "https://github.com/apache/iceberg/pull/1397#discussion_r478710846", "bodyText": "Let's add a manual repartition step to avoid surprises with adaptive execution.", "author": "aokolnychyi", "createdAt": "2020-08-27T21:39:26Z", "path": "spark/src/main/java/org/apache/iceberg/actions/BaseAction.java", "diffHunk": "@@ -94,9 +102,30 @@ protected String metadataTableName(String tableName, MetadataTableType type) {\n     return buildValidDataFileDF(spark, table().toString());\n   }\n \n+  private static class ReadManifest implements FlatMapFunction<ManifestFileBean, String> {\n+    private final Broadcast<FileIO> io;\n+\n+    ReadManifest(Broadcast<FileIO> io) {\n+      this.io = io;\n+    }\n+\n+    @Override\n+    public Iterator<String> call(ManifestFileBean manifest) {\n+      return new ClosingIterator<>(ManifestFiles.readPaths(manifest, io.getValue()).iterator());\n+    }\n+  }\n+\n   protected Dataset<Row> buildValidDataFileDF(SparkSession spark, String tableName) {\n-    String allDataFilesMetadataTable = metadataTableName(tableName, MetadataTableType.ALL_DATA_FILES);\n-    return spark.read().format(\"iceberg\").load(allDataFilesMetadataTable).select(\"file_path\");\n+    JavaSparkContext context = new JavaSparkContext(spark.sparkContext());\n+    Broadcast<FileIO> ioBroadcast = context.broadcast(SparkUtil.serializableFileIO(table()));\n+    String allManifestsMetadataTable = metadataTableName(tableName, MetadataTableType.ALL_MANIFESTS);\n+\n+    Dataset<ManifestFileBean> allManifests = spark.read().format(\"iceberg\").load(allManifestsMetadataTable)\n+        .selectExpr(\"path\", \"length\", \"partition_spec_id as partitionSpecId\", \"added_snapshot_id as addedSnapshotId\")\n+        .dropDuplicates(\"path\")\n+        .as(Encoders.bean(ManifestFileBean.class));\n+\n+    return allManifests.flatMap(new ReadManifest(ioBroadcast), Encoders.STRING()).toDF(\"file_path\");", "originalCommit": "da38878e37447bf4f40dbcce2fd10ebda872d7d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "740989ce69826b44dc168a5564e57092fc0742b0", "chunk": "diff --git a/spark/src/main/java/org/apache/iceberg/actions/BaseAction.java b/spark/src/main/java/org/apache/iceberg/actions/BaseAction.java\nindex d0e91a9f5..474a2eb9a 100644\n--- a/spark/src/main/java/org/apache/iceberg/actions/BaseAction.java\n+++ b/spark/src/main/java/org/apache/iceberg/actions/BaseAction.java\n\n@@ -102,19 +102,6 @@ abstract class BaseAction<R> implements Action<R> {\n     return buildValidDataFileDF(spark, table().toString());\n   }\n \n-  private static class ReadManifest implements FlatMapFunction<ManifestFileBean, String> {\n-    private final Broadcast<FileIO> io;\n-\n-    ReadManifest(Broadcast<FileIO> io) {\n-      this.io = io;\n-    }\n-\n-    @Override\n-    public Iterator<String> call(ManifestFileBean manifest) {\n-      return new ClosingIterator<>(ManifestFiles.readPaths(manifest, io.getValue()).iterator());\n-    }\n-  }\n-\n   protected Dataset<Row> buildValidDataFileDF(SparkSession spark, String tableName) {\n     JavaSparkContext context = new JavaSparkContext(spark.sparkContext());\n     Broadcast<FileIO> ioBroadcast = context.broadcast(SparkUtil.serializableFileIO(table()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxMjY0Nw==", "url": "https://github.com/apache/iceberg/pull/1397#discussion_r478712647", "bodyText": "In other actions, we have private static methods at the end of the classes like below:\nprivate static FlatMapFunction<Iterator<String>, String> listDirsRecursively(\n      Broadcast<SerializableConfiguration> conf,\n      long olderThanTimestamp) {\n\n    return (FlatMapFunction<Iterator<String>, String>) dirs -> {\n      // logic\n    };\n  }\n\nI am OK with this approach too but may make sense to align it with other places.", "author": "aokolnychyi", "createdAt": "2020-08-27T21:43:38Z", "path": "spark/src/main/java/org/apache/iceberg/actions/BaseAction.java", "diffHunk": "@@ -94,9 +102,30 @@ protected String metadataTableName(String tableName, MetadataTableType type) {\n     return buildValidDataFileDF(spark, table().toString());\n   }\n \n+  private static class ReadManifest implements FlatMapFunction<ManifestFileBean, String> {", "originalCommit": "da38878e37447bf4f40dbcce2fd10ebda872d7d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyMjg2OQ==", "url": "https://github.com/apache/iceberg/pull/1397#discussion_r478722869", "bodyText": "Moved.", "author": "rdblue", "createdAt": "2020-08-27T22:08:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxMjY0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "740989ce69826b44dc168a5564e57092fc0742b0", "chunk": "diff --git a/spark/src/main/java/org/apache/iceberg/actions/BaseAction.java b/spark/src/main/java/org/apache/iceberg/actions/BaseAction.java\nindex d0e91a9f5..474a2eb9a 100644\n--- a/spark/src/main/java/org/apache/iceberg/actions/BaseAction.java\n+++ b/spark/src/main/java/org/apache/iceberg/actions/BaseAction.java\n\n@@ -102,19 +102,6 @@ abstract class BaseAction<R> implements Action<R> {\n     return buildValidDataFileDF(spark, table().toString());\n   }\n \n-  private static class ReadManifest implements FlatMapFunction<ManifestFileBean, String> {\n-    private final Broadcast<FileIO> io;\n-\n-    ReadManifest(Broadcast<FileIO> io) {\n-      this.io = io;\n-    }\n-\n-    @Override\n-    public Iterator<String> call(ManifestFileBean manifest) {\n-      return new ClosingIterator<>(ManifestFiles.readPaths(manifest, io.getValue()).iterator());\n-    }\n-  }\n-\n   protected Dataset<Row> buildValidDataFileDF(SparkSession spark, String tableName) {\n     JavaSparkContext context = new JavaSparkContext(spark.sparkContext());\n     Broadcast<FileIO> ioBroadcast = context.broadcast(SparkUtil.serializableFileIO(table()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxMzE0OQ==", "url": "https://github.com/apache/iceberg/pull/1397#discussion_r478713149", "bodyText": "nit: We use Broadcast<FileIO> io in all other places.", "author": "aokolnychyi", "createdAt": "2020-08-27T21:44:49Z", "path": "spark/src/main/java/org/apache/iceberg/actions/BaseAction.java", "diffHunk": "@@ -94,9 +102,30 @@ protected String metadataTableName(String tableName, MetadataTableType type) {\n     return buildValidDataFileDF(spark, table().toString());\n   }\n \n+  private static class ReadManifest implements FlatMapFunction<ManifestFileBean, String> {\n+    private final Broadcast<FileIO> io;\n+\n+    ReadManifest(Broadcast<FileIO> io) {\n+      this.io = io;\n+    }\n+\n+    @Override\n+    public Iterator<String> call(ManifestFileBean manifest) {\n+      return new ClosingIterator<>(ManifestFiles.readPaths(manifest, io.getValue()).iterator());\n+    }\n+  }\n+\n   protected Dataset<Row> buildValidDataFileDF(SparkSession spark, String tableName) {\n-    String allDataFilesMetadataTable = metadataTableName(tableName, MetadataTableType.ALL_DATA_FILES);\n-    return spark.read().format(\"iceberg\").load(allDataFilesMetadataTable).select(\"file_path\");\n+    JavaSparkContext context = new JavaSparkContext(spark.sparkContext());\n+    Broadcast<FileIO> ioBroadcast = context.broadcast(SparkUtil.serializableFileIO(table()));", "originalCommit": "da38878e37447bf4f40dbcce2fd10ebda872d7d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc0NDY5Mg==", "url": "https://github.com/apache/iceberg/pull/1397#discussion_r478744692", "bodyText": "Sorry I missed fixing this. We can update it next time we touch this code.", "author": "rdblue", "createdAt": "2020-08-27T23:10:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxMzE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "740989ce69826b44dc168a5564e57092fc0742b0", "chunk": "diff --git a/spark/src/main/java/org/apache/iceberg/actions/BaseAction.java b/spark/src/main/java/org/apache/iceberg/actions/BaseAction.java\nindex d0e91a9f5..474a2eb9a 100644\n--- a/spark/src/main/java/org/apache/iceberg/actions/BaseAction.java\n+++ b/spark/src/main/java/org/apache/iceberg/actions/BaseAction.java\n\n@@ -102,19 +102,6 @@ abstract class BaseAction<R> implements Action<R> {\n     return buildValidDataFileDF(spark, table().toString());\n   }\n \n-  private static class ReadManifest implements FlatMapFunction<ManifestFileBean, String> {\n-    private final Broadcast<FileIO> io;\n-\n-    ReadManifest(Broadcast<FileIO> io) {\n-      this.io = io;\n-    }\n-\n-    @Override\n-    public Iterator<String> call(ManifestFileBean manifest) {\n-      return new ClosingIterator<>(ManifestFiles.readPaths(manifest, io.getValue()).iterator());\n-    }\n-  }\n-\n   protected Dataset<Row> buildValidDataFileDF(SparkSession spark, String tableName) {\n     JavaSparkContext context = new JavaSparkContext(spark.sparkContext());\n     Broadcast<FileIO> ioBroadcast = context.broadcast(SparkUtil.serializableFileIO(table()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyMDAxMw==", "url": "https://github.com/apache/iceberg/pull/1397#discussion_r478720013", "bodyText": "SparkDataFile is in org.apache.iceberg.spark. Do we want to have these next to each other?", "author": "aokolnychyi", "createdAt": "2020-08-27T22:00:47Z", "path": "spark/src/main/java/org/apache/iceberg/actions/ManifestFileBean.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;", "originalCommit": "da38878e37447bf4f40dbcce2fd10ebda872d7d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyMzgzMA==", "url": "https://github.com/apache/iceberg/pull/1397#discussion_r478723830", "bodyText": "Since this is just a partial implementation, I think we should keep it hidden/private for now.", "author": "rdblue", "createdAt": "2020-08-27T22:10:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyMDAxMw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "740989ce69826b44dc168a5564e57092fc0742b0", "url": "https://github.com/apache/iceberg/commit/740989ce69826b44dc168a5564e57092fc0742b0", "message": "Avoid adaptive execution problem in ExpireSnapshotsAction.", "committedDate": "2020-08-27T22:07:33Z", "type": "commit"}]}