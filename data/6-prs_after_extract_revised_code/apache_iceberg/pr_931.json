{"pr_number": 931, "pr_title": "Add residual evaluation for MR reader", "pr_createdAt": "2020-04-16T08:34:49Z", "pr_url": "https://github.com/apache/iceberg/pull/931", "timeline": [{"oid": "34855ecc2ab0c1e717a6bdd5806f9348cec72dd5", "url": "https://github.com/apache/iceberg/commit/34855ecc2ab0c1e717a6bdd5806f9348cec72dd5", "message": "Add residual evaluation for MR reader", "committedDate": "2020-04-16T08:33:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY2NjUwMg==", "url": "https://github.com/apache/iceberg/pull/931#discussion_r409666502", "bodyText": "Can you assign the result of currentTask.residual() to a local variable to reduce method call?", "author": "leoluan2009", "createdAt": "2020-04-16T15:53:49Z", "path": "mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java", "diffHunk": "@@ -394,8 +378,14 @@ public void close() throws IOException {\n               String.format(\"Cannot read %s file: %s\", file.format().name(), file.path()));\n       }\n       currentCloseable = iterable;\n-      //TODO: Apply residual filtering before returning the iterator\n-      return iterable.iterator();\n+      boolean applyResidualFiltering = !context.getConfiguration().getBoolean(SKIP_RESIDUAL_FILTERING, false);\n+      if (applyResidualFiltering && currentTask.residual() != null &&", "originalCommit": "34855ecc2ab0c1e717a6bdd5806f9348cec72dd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcwMDcwMg==", "url": "https://github.com/apache/iceberg/pull/931#discussion_r409700702", "bodyText": "I agree with this. And we can also shorten the boolean variable name to applyResidual.", "author": "rdblue", "createdAt": "2020-04-16T16:44:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY2NjUwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0MDk3Mg==", "url": "https://github.com/apache/iceberg/pull/931#discussion_r409940972", "bodyText": "OK, will change this.", "author": "chenjunjiedada", "createdAt": "2020-04-17T01:29:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY2NjUwMg=="}], "type": "inlineReview", "revised_code": {"commit": "338773d4f33a6548370dc7a52dc897b028866b3f", "chunk": "diff --git a/mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java b/mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java\nindex d3c386e7..b68a6552 100644\n--- a/mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java\n+++ b/mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java\n\n@@ -378,14 +378,7 @@ public class IcebergInputFormat<T> extends InputFormat<Void, T> {\n               String.format(\"Cannot read %s file: %s\", file.format().name(), file.path()));\n       }\n       currentCloseable = iterable;\n-      boolean applyResidualFiltering = !context.getConfiguration().getBoolean(SKIP_RESIDUAL_FILTERING, false);\n-      if (applyResidualFiltering && currentTask.residual() != null &&\n-          currentTask.residual() != Expressions.alwaysTrue()) {\n-        Evaluator filter = new Evaluator(readSchema.asStruct(), currentTask.residual(), caseSensitive);\n-        return CloseableIterable.filter(iterable, record -> filter.eval((Record) record)).iterator();\n-      } else {\n-        return iterable.iterator();\n-      }\n+      return iterable.iterator();\n     }\n \n     @SuppressWarnings(\"unchecked\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0NzAwMg==", "url": "https://github.com/apache/iceberg/pull/931#discussion_r409747002", "bodyText": "seems like we should also take into account that ICEBERG_GENERICS is the data model before applying residuals. Should this be done inside each of the method e.g newAvroIterable , newOrcIterable etc where we  dispatch on the data model. I think, the actual application of the residual maybe be a function for Iceberg_generics which can be called from each of the newAvro|Orc|ParquetIterable methods.\nThoughts?", "author": "rdsr", "createdAt": "2020-04-16T17:59:46Z", "path": "mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java", "diffHunk": "@@ -394,8 +378,14 @@ public void close() throws IOException {\n               String.format(\"Cannot read %s file: %s\", file.format().name(), file.path()));\n       }\n       currentCloseable = iterable;\n-      //TODO: Apply residual filtering before returning the iterator\n-      return iterable.iterator();\n+      boolean applyResidualFiltering = !context.getConfiguration().getBoolean(SKIP_RESIDUAL_FILTERING, false);", "originalCommit": "34855ecc2ab0c1e717a6bdd5806f9348cec72dd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0NzAxOQ==", "url": "https://github.com/apache/iceberg/pull/931#discussion_r409947019", "bodyText": "Do you mean that we may have other in-memory data modes for pig or hive so the residual filtering should be specific to the in-memory data model? I agree to build more specific residual filtering against the in-memory data model.", "author": "chenjunjiedada", "createdAt": "2020-04-17T01:52:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0NzAwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc1NDkxNg==", "url": "https://github.com/apache/iceberg/pull/931#discussion_r410754916", "bodyText": "yes, Pig and Hive would have their own data models [Pig tuples and Hive rows [with Object Inspectors]]", "author": "rdsr", "createdAt": "2020-04-18T21:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0NzAwMg=="}], "type": "inlineReview", "revised_code": {"commit": "338773d4f33a6548370dc7a52dc897b028866b3f", "chunk": "diff --git a/mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java b/mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java\nindex d3c386e7..b68a6552 100644\n--- a/mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java\n+++ b/mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java\n\n@@ -378,14 +378,7 @@ public class IcebergInputFormat<T> extends InputFormat<Void, T> {\n               String.format(\"Cannot read %s file: %s\", file.format().name(), file.path()));\n       }\n       currentCloseable = iterable;\n-      boolean applyResidualFiltering = !context.getConfiguration().getBoolean(SKIP_RESIDUAL_FILTERING, false);\n-      if (applyResidualFiltering && currentTask.residual() != null &&\n-          currentTask.residual() != Expressions.alwaysTrue()) {\n-        Evaluator filter = new Evaluator(readSchema.asStruct(), currentTask.residual(), caseSensitive);\n-        return CloseableIterable.filter(iterable, record -> filter.eval((Record) record)).iterator();\n-      } else {\n-        return iterable.iterator();\n-      }\n+      return iterable.iterator();\n     }\n \n     @SuppressWarnings(\"unchecked\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0OTQzOA==", "url": "https://github.com/apache/iceberg/pull/931#discussion_r409749438", "bodyText": "Seems like we should still do this check for Pig and Hive as we don't have residual evaluators for these. If IcebergInputFormat.ConfigBuilder#skipResidualFiltering is true then this check should be there for Pig and Hive rows", "author": "rdsr", "createdAt": "2020-04-16T18:03:46Z", "path": "mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java", "diffHunk": "@@ -259,18 +255,6 @@ public ConfigBuilder skipResidualFiltering() {\n     return splits;\n   }\n \n-  private static void checkResiduals(CombinedScanTask task) {\n-    task.files().forEach(fileScanTask -> {", "originalCommit": "34855ecc2ab0c1e717a6bdd5806f9348cec72dd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0MjA5NQ==", "url": "https://github.com/apache/iceberg/pull/931#discussion_r409942095", "bodyText": "If the skipResidualFiltering is true, we skip the evaluation and thus don't need checkResiduals. How about we set skipResidualFiltering to true as default? Or maybe change it to enableResidualFiltering and set default value to false?", "author": "chenjunjiedada", "createdAt": "2020-04-17T01:33:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0OTQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3OTA1Nw==", "url": "https://github.com/apache/iceberg/pull/931#discussion_r410479057", "bodyText": "Residual filtering is specific to the object model. That's why the cast to Record works.\nI agree with @rdsr that if residuals should be applied (not skipped) then we need to either ensure that generics are used, or that there are no residuals. So the check should still happen when applyResiduals is true and the in-memory model is Pig or Hive.", "author": "rdblue", "createdAt": "2020-04-17T21:29:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0OTQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "7bba77a31ca941c6197e6181c2ff9ef5dc9db420", "chunk": "diff --git a/mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java b/mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java\nindex d3c386e7..0d35644a 100644\n--- a/mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java\n+++ b/mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java\n\n@@ -255,6 +261,18 @@ public class IcebergInputFormat<T> extends InputFormat<Void, T> {\n     return splits;\n   }\n \n+  private static void checkResiduals(CombinedScanTask task) {\n+    task.files().forEach(fileScanTask -> {\n+      Expression residual = fileScanTask.residual();\n+      if (residual != null && !residual.equals(Expressions.alwaysTrue())) {\n+        throw new UnsupportedOperationException(\n+            String.format(\n+                \"Filter expression %s is not completely satisfied. Additional rows \" +\n+                    \"can be returned not satisfied by the filter expression\", residual));\n+      }\n+    });\n+  }\n+\n   @Override\n   public RecordReader<Void, T> createRecordReader(InputSplit split, TaskAttemptContext context) {\n     return new IcebergRecordReader<>();\n"}}, {"oid": "338773d4f33a6548370dc7a52dc897b028866b3f", "url": "https://github.com/apache/iceberg/commit/338773d4f33a6548370dc7a52dc897b028866b3f", "message": "Address comments", "committedDate": "2020-04-17T13:42:07Z", "type": "commit"}, {"oid": "bd8953d3ff2913de214f76fb1c63e30fdc1b5967", "url": "https://github.com/apache/iceberg/commit/bd8953d3ff2913de214f76fb1c63e30fdc1b5967", "message": "update doc", "committedDate": "2020-04-17T13:49:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3OTE3MA==", "url": "https://github.com/apache/iceberg/pull/931#discussion_r410479170", "bodyText": "This should not change.", "author": "rdblue", "createdAt": "2020-04-17T21:29:44Z", "path": "mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java", "diffHunk": "@@ -124,7 +125,7 @@ public ConfigBuilder(Configuration conf) {\n       this.conf = conf;\n       // defaults\n       conf.setEnum(IN_MEMORY_DATA_MODEL, InMemoryDataModel.GENERIC);\n-      conf.setBoolean(SKIP_RESIDUAL_FILTERING, false);", "originalCommit": "bd8953d3ff2913de214f76fb1c63e30fdc1b5967", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU0MTk3Ng==", "url": "https://github.com/apache/iceberg/pull/931#discussion_r410541976", "bodyText": "OK, reverted.", "author": "chenjunjiedada", "createdAt": "2020-04-18T01:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3OTE3MA=="}], "type": "inlineReview", "revised_code": {"commit": "7bba77a31ca941c6197e6181c2ff9ef5dc9db420", "chunk": "diff --git a/mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java b/mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java\nindex 67cbd955..0d35644a 100644\n--- a/mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java\n+++ b/mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java\n\n@@ -125,7 +125,7 @@ public class IcebergInputFormat<T> extends InputFormat<Void, T> {\n       this.conf = conf;\n       // defaults\n       conf.setEnum(IN_MEMORY_DATA_MODEL, InMemoryDataModel.GENERIC);\n-      conf.setBoolean(SKIP_RESIDUAL_FILTERING, true);\n+      conf.setBoolean(SKIP_RESIDUAL_FILTERING, false);\n       conf.setBoolean(CASE_SENSITIVE, true);\n       conf.setBoolean(REUSE_CONTAINERS, false);\n       conf.setBoolean(LOCALITY, false);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3OTU3NA==", "url": "https://github.com/apache/iceberg/pull/931#discussion_r410479574", "bodyText": "-1 until this is reverted.\nThe InputFormat should default to applying residuals because that is what users expect.", "author": "rdblue", "createdAt": "2020-04-17T21:30:49Z", "path": "mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java", "diffHunk": "@@ -199,11 +200,10 @@ public ConfigBuilder usePigTuples() {\n     /**\n      * Compute platforms pass down filters to data sources. If the data source cannot apply some filters, or only\n      * partially applies the filter, it will return the residual filter back. If the platform can correctly apply\n-     * the residual filters, then it should call this api. Otherwise the current api will throw an exception if the\n-     * passed in filter is not completely satisfied.\n+     * the residual filters, then it should call this api to enable the residual filtering.\n      */\n-    public ConfigBuilder skipResidualFiltering() {\n-      conf.setBoolean(SKIP_RESIDUAL_FILTERING, true);\n+    public ConfigBuilder enableResidualFiltering() {\n+      conf.setBoolean(SKIP_RESIDUAL_FILTERING, false);", "originalCommit": "bd8953d3ff2913de214f76fb1c63e30fdc1b5967", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU0MTkxOQ==", "url": "https://github.com/apache/iceberg/pull/931#discussion_r410541919", "bodyText": "Reverted.", "author": "chenjunjiedada", "createdAt": "2020-04-18T01:36:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3OTU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "7bba77a31ca941c6197e6181c2ff9ef5dc9db420", "chunk": "diff --git a/mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java b/mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java\nindex 67cbd955..0d35644a 100644\n--- a/mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java\n+++ b/mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java\n\n@@ -200,10 +200,11 @@ public class IcebergInputFormat<T> extends InputFormat<Void, T> {\n     /**\n      * Compute platforms pass down filters to data sources. If the data source cannot apply some filters, or only\n      * partially applies the filter, it will return the residual filter back. If the platform can correctly apply\n-     * the residual filters, then it should call this api to enable the residual filtering.\n+     * the residual filters, then it should call this api. Otherwise the current api will throw an exception if the\n+     * passed in filter is not completely satisfied.\n      */\n-    public ConfigBuilder enableResidualFiltering() {\n-      conf.setBoolean(SKIP_RESIDUAL_FILTERING, false);\n+    public ConfigBuilder skipResidualFiltering() {\n+      conf.setBoolean(SKIP_RESIDUAL_FILTERING, true);\n       return this;\n     }\n   }\n"}}, {"oid": "7bba77a31ca941c6197e6181c2ff9ef5dc9db420", "url": "https://github.com/apache/iceberg/commit/7bba77a31ca941c6197e6181c2ff9ef5dc9db420", "message": "check residual for when using HIVE and PIG data model", "committedDate": "2020-04-18T01:34:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU0OTQ3Ng==", "url": "https://github.com/apache/iceberg/pull/931#discussion_r410549476", "bodyText": "It causes unclosed input stream issue if we don't close here, looks like mr framework doesn't call the final close method.", "author": "chenjunjiedada", "createdAt": "2020-04-18T01:54:02Z", "path": "mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java", "diffHunk": "@@ -316,6 +318,7 @@ public boolean nextKeyValue() throws IOException {\n           currentCloseable.close();\n           currentIterator = open(tasks.next());\n         } else {\n+          currentCloseable.close();", "originalCommit": "7bba77a31ca941c6197e6181c2ff9ef5dc9db420", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc1NDczOQ==", "url": "https://github.com/apache/iceberg/pull/931#discussion_r410754739", "bodyText": "oh,  I didn't close here. I was doing it in RecordReader#close as there are no more records to read. This is fine too.", "author": "rdsr", "createdAt": "2020-04-18T21:43:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU0OTQ3Ng=="}], "type": "inlineReview", "revised_code": null}]}