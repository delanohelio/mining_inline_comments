{"pr_number": 1107, "pr_title": "Add IcebergStorageHandler", "pr_createdAt": "2020-06-10T13:22:31Z", "pr_url": "https://github.com/apache/iceberg/pull/1107", "timeline": [{"oid": "65fe819e36915acc2816b7a06902867ee73b49fc", "url": "https://github.com/apache/iceberg/commit/65fe819e36915acc2816b7a06902867ee73b49fc", "message": "Add StorageHandler", "committedDate": "2020-06-10T13:13:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0NDI4OQ==", "url": "https://github.com/apache/iceberg/pull/1107#discussion_r440244289", "bodyText": "I think is this the place we can pass in many of the options which Iceberg supports. E.g reading a specific snapshot, case insensitive match etc..", "author": "rdsr", "createdAt": "2020-06-15T15:06:29Z", "path": "mr/src/main/java/org/apache/iceberg/mr/mapred/IcebergStorageHandler.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.mapred;\n+\n+import java.util.Map;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.metastore.HiveMetaHook;\n+import org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.HiveStorageHandler;\n+import org.apache.hadoop.hive.ql.metadata.HiveStoragePredicateHandler;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeDesc;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc;\n+import org.apache.hadoop.hive.ql.plan.TableDesc;\n+import org.apache.hadoop.hive.ql.security.authorization.HiveAuthorizationProvider;\n+import org.apache.hadoop.hive.serde2.AbstractSerDe;\n+import org.apache.hadoop.hive.serde2.Deserializer;\n+import org.apache.hadoop.mapred.InputFormat;\n+import org.apache.hadoop.mapred.JobConf;\n+import org.apache.hadoop.mapred.OutputFormat;\n+\n+public class IcebergStorageHandler implements HiveStoragePredicateHandler, HiveStorageHandler {\n+\n+  private Configuration conf;\n+\n+  @Override\n+  public Class<? extends InputFormat> getInputFormatClass() {\n+    return IcebergInputFormat.class;\n+  }\n+\n+  @Override\n+  public Class<? extends OutputFormat> getOutputFormatClass() {\n+    return HiveIgnoreKeyTextOutputFormat.class;\n+  }\n+\n+  @Override\n+  public Class<? extends AbstractSerDe> getSerDeClass() {\n+    return IcebergSerDe.class;\n+  }\n+\n+  @Override\n+  public HiveMetaHook getMetaHook() {\n+    return null;\n+  }\n+\n+  @Override\n+  public HiveAuthorizationProvider getAuthorizationProvider() throws HiveException {\n+    return null;\n+  }\n+\n+  @Override\n+  public void configureInputJobProperties(TableDesc tableDesc, Map<String, String> map) {\n+\n+  }\n+\n+  @Override\n+  public void configureOutputJobProperties(TableDesc tableDesc, Map<String, String> map) {\n+\n+  }\n+\n+  @Override\n+  public void configureTableJobProperties(TableDesc tableDesc, Map<String, String> map) {\n+\n+  }\n+\n+  @Override\n+  public void configureJobConf(TableDesc tableDesc, JobConf jobConf) {\n+", "originalCommit": "65fe819e36915acc2816b7a06902867ee73b49fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c5fe148d64142747dff533fec61ce224f8108cf", "chunk": "diff --git a/mr/src/main/java/org/apache/iceberg/mr/mapred/IcebergStorageHandler.java b/mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java\nsimilarity index 95%\nrename from mr/src/main/java/org/apache/iceberg/mr/mapred/IcebergStorageHandler.java\nrename to mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java\nindex 1536d989f..addfde8a5 100644\n--- a/mr/src/main/java/org/apache/iceberg/mr/mapred/IcebergStorageHandler.java\n+++ b/mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java\n\n@@ -17,7 +17,7 @@\n  * under the License.\n  */\n \n-package org.apache.iceberg.mr.mapred;\n+package org.apache.iceberg.mr.hive;\n \n import java.util.Map;\n import org.apache.hadoop.conf.Configuration;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc1MTM4OA==", "url": "https://github.com/apache/iceberg/pull/1107#discussion_r458751388", "bodyText": "As a first implementation it is correct.\nMaybe stating the obvious, but if we know that the Iceberg predicate will cover the expression fully, then we can return empty residualPredicate so we will not have an unnecessary filtering operation in Hive. Or if the expression filtering is covered by Iceberg partially then Hive should filter only for the residual filter.", "author": "pvary", "createdAt": "2020-07-22T12:23:31Z", "path": "mr/src/main/java/org/apache/iceberg/mr/mapred/IcebergStorageHandler.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.mapred;\n+\n+import java.util.Map;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.metastore.HiveMetaHook;\n+import org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.HiveStorageHandler;\n+import org.apache.hadoop.hive.ql.metadata.HiveStoragePredicateHandler;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeDesc;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc;\n+import org.apache.hadoop.hive.ql.plan.TableDesc;\n+import org.apache.hadoop.hive.ql.security.authorization.HiveAuthorizationProvider;\n+import org.apache.hadoop.hive.serde2.AbstractSerDe;\n+import org.apache.hadoop.hive.serde2.Deserializer;\n+import org.apache.hadoop.mapred.InputFormat;\n+import org.apache.hadoop.mapred.JobConf;\n+import org.apache.hadoop.mapred.OutputFormat;\n+\n+public class IcebergStorageHandler implements HiveStoragePredicateHandler, HiveStorageHandler {\n+\n+  private Configuration conf;\n+\n+  @Override\n+  public Class<? extends InputFormat> getInputFormatClass() {\n+    return IcebergInputFormat.class;\n+  }\n+\n+  @Override\n+  public Class<? extends OutputFormat> getOutputFormatClass() {\n+    return HiveIgnoreKeyTextOutputFormat.class;\n+  }\n+\n+  @Override\n+  public Class<? extends AbstractSerDe> getSerDeClass() {\n+    return IcebergSerDe.class;\n+  }\n+\n+  @Override\n+  public HiveMetaHook getMetaHook() {\n+    return null;\n+  }\n+\n+  @Override\n+  public HiveAuthorizationProvider getAuthorizationProvider() throws HiveException {\n+    return null;\n+  }\n+\n+  @Override\n+  public void configureInputJobProperties(TableDesc tableDesc, Map<String, String> map) {\n+\n+  }\n+\n+  @Override\n+  public void configureOutputJobProperties(TableDesc tableDesc, Map<String, String> map) {\n+\n+  }\n+\n+  @Override\n+  public void configureTableJobProperties(TableDesc tableDesc, Map<String, String> map) {\n+\n+  }\n+\n+  @Override\n+  public void configureJobConf(TableDesc tableDesc, JobConf jobConf) {\n+\n+  }\n+\n+  @Override\n+  public Configuration getConf() {\n+    return conf;\n+  }\n+\n+  @Override\n+  public void setConf(Configuration conf) {\n+    this.conf = conf;\n+  }\n+  @Override\n+  public String toString() {\n+    return this.getClass().getName();\n+  }\n+\n+  /**\n+   * @param jobConf Job configuration for InputFormat to access\n+   * @param deserializer Deserializer\n+   * @param exprNodeDesc Filter expression extracted by Hive\n+   * @return Entire filter to take advantage of Hive's pruning as well as Iceberg's pruning.\n+   */\n+  @Override\n+  public DecomposedPredicate decomposePredicate(JobConf jobConf, Deserializer deserializer, ExprNodeDesc exprNodeDesc) {\n+    DecomposedPredicate predicate = new DecomposedPredicate();\n+    predicate.residualPredicate = (ExprNodeGenericFuncDesc) exprNodeDesc;", "originalCommit": "65fe819e36915acc2816b7a06902867ee73b49fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MTg3Mg==", "url": "https://github.com/apache/iceberg/pull/1107#discussion_r458951872", "bodyText": "The challenge here is that Iceberg produces per-split residuals, so we would need to return them for each split, or find the common filter that needs to be applied to all splits.\nThere's also a question of whether Hive or Iceberg is better at doing the filtering. For vectorized reads, Iceberg may be better. But for row-based reads, engines are typically better. That's why we delegate final filtering to Spark, which will benefit from that engine's codegen.", "author": "rdblue", "createdAt": "2020-07-22T17:12:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc1MTM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI3NzY5Nw==", "url": "https://github.com/apache/iceberg/pull/1107#discussion_r459277697", "bodyText": "Does Iceberg push these filters to the specific file readers (ORC/Parquet)? Or this predicate pushdown is only for filtering out specific files and not the content of the files?\nIn Hive we found it very beneficial to push every filter to the readers. This is especially true for column based formats, like Parquet or ORC, where we do not have to deserialize the whole data if filtering already removes the unnecessary rows.\nThanks,\nPeter\nPS: Maybe this is not the best place to start this conversation. If you feel so, feel free to redirect it to the correct channel. Just started to familiarize myself with the workings of the Iceberg community.", "author": "pvary", "createdAt": "2020-07-23T08:02:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc1MTM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQzOTg5Ng==", "url": "https://github.com/apache/iceberg/pull/1107#discussion_r459439896", "bodyText": "We have some prior work on how we intend to push filters down over here. The intention was to first get this \"first implementation\" merged in and then raise a subsequent PR to add improvements. I need to update this PR since the InputFormat was merged in (working on it as we speak). We'd definitely appreciate input on the subsequent PRs if there are better ways of interacting with Hive.", "author": "massdosage", "createdAt": "2020-07-23T13:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc1MTM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0ODMwOA==", "url": "https://github.com/apache/iceberg/pull/1107#discussion_r459448308", "bodyText": "Sure thing! I will follow the stuff around the HiveSerde and friends :)\nAs a first implementation it is definitely ok to return the whole expression as a residualPredicate. Hive just have to try to apply that again which is absolutely ok from correctness side.", "author": "pvary", "createdAt": "2020-07-23T13:28:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc1MTM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNTcyMw==", "url": "https://github.com/apache/iceberg/pull/1107#discussion_r459805723", "bodyText": "@pvary, thanks for taking a look at these, it's great to have more people with knowledge of Hive participating!", "author": "rdblue", "createdAt": "2020-07-24T00:58:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc1MTM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "2c5fe148d64142747dff533fec61ce224f8108cf", "chunk": "diff --git a/mr/src/main/java/org/apache/iceberg/mr/mapred/IcebergStorageHandler.java b/mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java\nsimilarity index 95%\nrename from mr/src/main/java/org/apache/iceberg/mr/mapred/IcebergStorageHandler.java\nrename to mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java\nindex 1536d989f..addfde8a5 100644\n--- a/mr/src/main/java/org/apache/iceberg/mr/mapred/IcebergStorageHandler.java\n+++ b/mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java\n\n@@ -17,7 +17,7 @@\n  * under the License.\n  */\n \n-package org.apache.iceberg.mr.mapred;\n+package org.apache.iceberg.mr.hive;\n \n import java.util.Map;\n import org.apache.hadoop.conf.Configuration;\n"}}, {"oid": "2c5fe148d64142747dff533fec61ce224f8108cf", "url": "https://github.com/apache/iceberg/commit/2c5fe148d64142747dff533fec61ce224f8108cf", "message": "merge master", "committedDate": "2020-07-23T13:37:30Z", "type": "commit"}, {"oid": "fa03e7373f5f692b8699c6aa43e5e59c9641faa2", "url": "https://github.com/apache/iceberg/commit/fa03e7373f5f692b8699c6aa43e5e59c9641faa2", "message": "update storage handler", "committedDate": "2020-07-23T13:37:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNDkyMA==", "url": "https://github.com/apache/iceberg/pull/1107#discussion_r459804920", "bodyText": "In table metadata, we use FileOutputFormat because it can't be instantiated, so any write attempted through a Hive table library would fail, instead of writing data that doesn't appear in the table. Does that need to be done here?", "author": "rdblue", "createdAt": "2020-07-24T00:54:33Z", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive;\n+\n+import java.util.Map;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.metastore.HiveMetaHook;\n+import org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.HiveStorageHandler;\n+import org.apache.hadoop.hive.ql.metadata.HiveStoragePredicateHandler;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeDesc;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc;\n+import org.apache.hadoop.hive.ql.plan.TableDesc;\n+import org.apache.hadoop.hive.ql.security.authorization.HiveAuthorizationProvider;\n+import org.apache.hadoop.hive.serde2.AbstractSerDe;\n+import org.apache.hadoop.hive.serde2.Deserializer;\n+import org.apache.hadoop.mapred.InputFormat;\n+import org.apache.hadoop.mapred.JobConf;\n+import org.apache.hadoop.mapred.OutputFormat;\n+import org.apache.iceberg.mr.mapred.IcebergSerDe;\n+\n+public class HiveIcebergStorageHandler implements HiveStoragePredicateHandler, HiveStorageHandler {\n+\n+  private Configuration conf;\n+\n+  @Override\n+  public Class<? extends InputFormat> getInputFormatClass() {\n+    return HiveIcebergInputFormat.class;\n+  }\n+\n+  @Override\n+  public Class<? extends OutputFormat> getOutputFormatClass() {\n+    return HiveIgnoreKeyTextOutputFormat.class;", "originalCommit": "fa03e7373f5f692b8699c6aa43e5e59c9641faa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAwNDY5NA==", "url": "https://github.com/apache/iceberg/pull/1107#discussion_r460004694", "bodyText": "Good question, we haven't tried the write path at all but I agree that it would be better if it failed rather than silently doing nothing.", "author": "massdosage", "createdAt": "2020-07-24T11:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNDkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2NDU1Nw==", "url": "https://github.com/apache/iceberg/pull/1107#discussion_r460164557", "bodyText": "Another option would be to create a HiveIcebergOutputFormat class that throws UnsupportedOperationExceptions, this is what they do in Delta's Hive connector.", "author": "massdosage", "createdAt": "2020-07-24T16:37:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNDkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5MjUwOA==", "url": "https://github.com/apache/iceberg/pull/1107#discussion_r460292508", "bodyText": "That seems like a good option. If we get to the phase when we have a working writer implementation, then if the correct writer is already specified then we do not have to recreate all of the tables. We just change the jars and everything should work like charm :)", "author": "pvary", "createdAt": "2020-07-24T21:18:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNDkyMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNTA2Mg==", "url": "https://github.com/apache/iceberg/pull/1107#discussion_r459805062", "bodyText": "What do other storage handlers do? Could this be a short name, like \"iceberg\"?", "author": "rdblue", "createdAt": "2020-07-24T00:55:03Z", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive;\n+\n+import java.util.Map;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.metastore.HiveMetaHook;\n+import org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.HiveStorageHandler;\n+import org.apache.hadoop.hive.ql.metadata.HiveStoragePredicateHandler;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeDesc;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc;\n+import org.apache.hadoop.hive.ql.plan.TableDesc;\n+import org.apache.hadoop.hive.ql.security.authorization.HiveAuthorizationProvider;\n+import org.apache.hadoop.hive.serde2.AbstractSerDe;\n+import org.apache.hadoop.hive.serde2.Deserializer;\n+import org.apache.hadoop.mapred.InputFormat;\n+import org.apache.hadoop.mapred.JobConf;\n+import org.apache.hadoop.mapred.OutputFormat;\n+import org.apache.iceberg.mr.mapred.IcebergSerDe;\n+\n+public class HiveIcebergStorageHandler implements HiveStoragePredicateHandler, HiveStorageHandler {\n+\n+  private Configuration conf;\n+\n+  @Override\n+  public Class<? extends InputFormat> getInputFormatClass() {\n+    return HiveIcebergInputFormat.class;\n+  }\n+\n+  @Override\n+  public Class<? extends OutputFormat> getOutputFormatClass() {\n+    return HiveIgnoreKeyTextOutputFormat.class;\n+  }\n+\n+  @Override\n+  public Class<? extends AbstractSerDe> getSerDeClass() {\n+    return IcebergSerDe.class;\n+  }\n+\n+  @Override\n+  public HiveMetaHook getMetaHook() {\n+    return null;\n+  }\n+\n+  @Override\n+  public HiveAuthorizationProvider getAuthorizationProvider() throws HiveException {\n+    return null;\n+  }\n+\n+  @Override\n+  public void configureInputJobProperties(TableDesc tableDesc, Map<String, String> map) {\n+\n+  }\n+\n+  @Override\n+  public void configureOutputJobProperties(TableDesc tableDesc, Map<String, String> map) {\n+\n+  }\n+\n+  @Override\n+  public void configureTableJobProperties(TableDesc tableDesc, Map<String, String> map) {\n+\n+  }\n+\n+  @Override\n+  public void configureJobConf(TableDesc tableDesc, JobConf jobConf) {\n+\n+  }\n+\n+  @Override\n+  public Configuration getConf() {\n+    return conf;\n+  }\n+\n+  @Override\n+  public void setConf(Configuration conf) {\n+    this.conf = conf;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return this.getClass().getName();", "originalCommit": "fa03e7373f5f692b8699c6aa43e5e59c9641faa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAwNTM0Mg==", "url": "https://github.com/apache/iceberg/pull/1107#discussion_r460005342", "bodyText": "I had a look at a few and most of them don't override this method. Hive's own JDBC storage handler returns the full class name as a string via a [Constant]( - https://github.com/apache/hive/blob/f37c5de6c32b9395d1b34fa3c02ed06d1bfbf6eb/common/src/java/org/apache/hadoop/hive/conf/Constants.java#L62). So it could be OK like this, or we just remove the method.", "author": "massdosage", "createdAt": "2020-07-24T11:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNTA2Mg=="}], "type": "inlineReview", "revised_code": null}]}