{"pr_number": 1273, "pr_title": "Generics: Refactor TestLocalScan", "pr_createdAt": "2020-07-30T11:40:04Z", "pr_url": "https://github.com/apache/iceberg/pull/1273", "timeline": [{"oid": "a1029bb1dabea326624cd546a1b160a3779cc090", "url": "https://github.com/apache/iceberg/commit/a1029bb1dabea326624cd546a1b160a3779cc090", "message": "Generics: Refactor TestLocalScan", "committedDate": "2020-07-30T19:38:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1NzEzOQ==", "url": "https://github.com/apache/iceberg/pull/1273#discussion_r464557139", "bodyText": "It's a bit confusing that the name of the DataFile variable is different from the extension name, e.g. in this case DataFile is file12 and extension file-11. Is there a reason for the rename from how it was before?", "author": "edgarRd", "createdAt": "2020-08-03T17:30:59Z", "path": "data/src/test/java/org/apache/iceberg/data/TestLocalScan.java", "diffHunk": "@@ -103,132 +103,100 @@ public TestLocalScan(String format) {\n \n   private String sharedTableLocation = null;\n   private Table sharedTable = null;\n-  private List<Record> file1Records = null;\n-  private List<Record> file2Records = null;\n-  private List<Record> file3Records = null;\n-  private List<Record> file1FirstSnapshotRecords = null;\n-  private List<Record> file2FirstSnapshotRecords = null;\n-  private List<Record> file3FirstSnapshotRecords = null;\n-  private List<Record> file1SecondSnapshotRecords = null;\n-  private List<Record> file2SecondSnapshotRecords = null;\n-  private List<Record> file3SecondSnapshotRecords = null;\n \n+  private final Record genericRecord = GenericRecord.create(SCHEMA);\n+\n+  private final List<Record> file1FirstRecords =  Lists.newArrayList(\n+      genericRecord.copy(ImmutableMap.of(\"id\", 0L, \"data\", \"clarification\")),\n+      genericRecord.copy(ImmutableMap.of(\"id\", 1L, \"data\", \"risky\")),\n+      genericRecord.copy(ImmutableMap.of(\"id\", 2L, \"data\", \"falafel\"))\n+  );\n+  private final List<Record> file2FirstRecords = Lists.newArrayList(\n+      genericRecord.copy(ImmutableMap.of(\"id\", 10L, \"data\", \"clammy\")),\n+      genericRecord.copy(ImmutableMap.of(\"id\", 11L, \"data\", \"evacuate\")),\n+      genericRecord.copy(ImmutableMap.of(\"id\", 12L, \"data\", \"tissue\"))\n+  );\n+  private final List<Record> file3FirstRecords = Lists.newArrayList(\n+      genericRecord.copy(ImmutableMap.of(\"id\", 20L, \"data\", \"ocean\")),\n+      genericRecord.copy(ImmutableMap.of(\"id\", 21L, \"data\", \"holistic\")),\n+      genericRecord.copy(ImmutableMap.of(\"id\", 22L, \"data\", \"preventative\"))\n+  );\n+\n+  private final List<Record> file1SecondSnapshotRecords = Lists.newArrayList(\n+      genericRecord.copy(ImmutableMap.of(\"id\", 4L, \"data\", \"obscure\")),\n+      genericRecord.copy(ImmutableMap.of(\"id\", 5L, \"data\", \"secure\")),\n+      genericRecord.copy(ImmutableMap.of(\"id\", 6L, \"data\", \"fetta\"))\n+  );\n+  private final List<Record> file2SecondSnapshotRecords = Lists.newArrayList(\n+      genericRecord.copy(ImmutableMap.of(\"id\", 14L, \"data\", \"radical\")),\n+      genericRecord.copy(ImmutableMap.of(\"id\", 15L, \"data\", \"collocation\")),\n+      genericRecord.copy(ImmutableMap.of(\"id\", 16L, \"data\", \"book\"))\n+  );\n+  private final List<Record> file3SecondSnapshotRecords = Lists.newArrayList(\n+      genericRecord.copy(ImmutableMap.of(\"id\", 24L, \"data\", \"cloud\")),\n+      genericRecord.copy(ImmutableMap.of(\"id\", 25L, \"data\", \"zen\")),\n+      genericRecord.copy(ImmutableMap.of(\"id\", 26L, \"data\", \"sky\"))\n+  );\n+\n+  private final List<Record> file1ThirdSnapshotRecords = Lists.newArrayList(\n+      genericRecord.copy(ImmutableMap.of(\"id\", 6L, \"data\", \"brainy\")),\n+      genericRecord.copy(ImmutableMap.of(\"id\", 7L, \"data\", \"film\")),\n+      genericRecord.copy(ImmutableMap.of(\"id\", 8L, \"data\", \"fetta\"))\n+  );\n+  private final List<Record> file2ThirdSnapshotRecords = Lists.newArrayList(\n+      genericRecord.copy(ImmutableMap.of(\"id\", 16L, \"data\", \"cake\")),\n+      genericRecord.copy(ImmutableMap.of(\"id\", 17L, \"data\", \"intrinsic\")),\n+      genericRecord.copy(ImmutableMap.of(\"id\", 18L, \"data\", \"paper\"))\n+  );\n+  private final List<Record> file3ThirdSnapshotRecords = Lists.newArrayList(\n+      genericRecord.copy(ImmutableMap.of(\"id\", 26L, \"data\", \"belleview\")),\n+      genericRecord.copy(ImmutableMap.of(\"id\", 27L, \"data\", \"overview\")),\n+      genericRecord.copy(ImmutableMap.of(\"id\", 28L, \"data\", \"tender\"))\n+  );\n \n   private void overwriteExistingData() throws IOException {\n-    Record record = GenericRecord.create(SCHEMA);\n-\n-    this.file1FirstSnapshotRecords = Lists.newArrayList(\n-        record.copy(ImmutableMap.of(\"id\", 4L, \"data\", \"obscure\")),\n-        record.copy(ImmutableMap.of(\"id\", 5L, \"data\", \"secure\")),\n-        record.copy(ImmutableMap.of(\"id\", 6L, \"data\", \"fetta\"))\n-    );\n-    DataFile file11 = writeFile(sharedTableLocation, format.addExtension(\"file-11\"), file1FirstSnapshotRecords);\n-\n-    this.file2FirstSnapshotRecords = Lists.newArrayList(\n-        record.copy(ImmutableMap.of(\"id\", 14L, \"data\", \"radical\")),\n-        record.copy(ImmutableMap.of(\"id\", 15L, \"data\", \"collocation\")),\n-        record.copy(ImmutableMap.of(\"id\", 16L, \"data\", \"book\"))\n-    );\n-    DataFile file21 = writeFile(sharedTableLocation, format.addExtension(\"file-21\"), file2FirstSnapshotRecords);\n-\n-    this.file3FirstSnapshotRecords = Lists.newArrayList(\n-        record.copy(ImmutableMap.of(\"id\", 24L, \"data\", \"cloud\")),\n-        record.copy(ImmutableMap.of(\"id\", 25L, \"data\", \"zen\")),\n-        record.copy(ImmutableMap.of(\"id\", 26L, \"data\", \"sky\"))\n-    );\n-    DataFile file31 = writeFile(sharedTableLocation, format.addExtension(\"file-31\"), file3FirstSnapshotRecords);\n+    DataFile file12 = writeFile(sharedTableLocation, format.addExtension(\"file-11\"), file1SecondSnapshotRecords);", "originalCommit": "a1029bb1dabea326624cd546a1b160a3779cc090", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc1NjEwMw==", "url": "https://github.com/apache/iceberg/pull/1273#discussion_r464756103", "bodyText": "Nice catch, fixed the extension.\nThe first snapshot is actually consisted of file1FirstRecords, file2FirstRecords and file3FirstRecords, so I renamed this to match the actual snapshot order.", "author": "chenjunjiedada", "createdAt": "2020-08-04T02:05:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1NzEzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5b75cf33eb4fa39f2940b954d21080bc61cc4e64", "chunk": "diff --git a/data/src/test/java/org/apache/iceberg/data/TestLocalScan.java b/data/src/test/java/org/apache/iceberg/data/TestLocalScan.java\nindex 086594356..10ace6736 100644\n--- a/data/src/test/java/org/apache/iceberg/data/TestLocalScan.java\n+++ b/data/src/test/java/org/apache/iceberg/data/TestLocalScan.java\n\n@@ -106,58 +107,58 @@ public class TestLocalScan {\n \n   private final Record genericRecord = GenericRecord.create(SCHEMA);\n \n-  private final List<Record> file1FirstRecords =  Lists.newArrayList(\n+  private final List<Record> file1FirstSnapshotRecords = ImmutableList.of(\n       genericRecord.copy(ImmutableMap.of(\"id\", 0L, \"data\", \"clarification\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 1L, \"data\", \"risky\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 2L, \"data\", \"falafel\"))\n   );\n-  private final List<Record> file2FirstRecords = Lists.newArrayList(\n+  private final List<Record> file2FirstSnapshotRecords = ImmutableList.of(\n       genericRecord.copy(ImmutableMap.of(\"id\", 10L, \"data\", \"clammy\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 11L, \"data\", \"evacuate\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 12L, \"data\", \"tissue\"))\n   );\n-  private final List<Record> file3FirstRecords = Lists.newArrayList(\n+  private final List<Record> file3FirstSnapshotRecords = ImmutableList.of(\n       genericRecord.copy(ImmutableMap.of(\"id\", 20L, \"data\", \"ocean\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 21L, \"data\", \"holistic\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 22L, \"data\", \"preventative\"))\n   );\n \n-  private final List<Record> file1SecondSnapshotRecords = Lists.newArrayList(\n+  private final List<Record> file1SecondSnapshotRecords = ImmutableList.of(\n       genericRecord.copy(ImmutableMap.of(\"id\", 4L, \"data\", \"obscure\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 5L, \"data\", \"secure\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 6L, \"data\", \"fetta\"))\n   );\n-  private final List<Record> file2SecondSnapshotRecords = Lists.newArrayList(\n+  private final List<Record> file2SecondSnapshotRecords = ImmutableList.of(\n       genericRecord.copy(ImmutableMap.of(\"id\", 14L, \"data\", \"radical\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 15L, \"data\", \"collocation\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 16L, \"data\", \"book\"))\n   );\n-  private final List<Record> file3SecondSnapshotRecords = Lists.newArrayList(\n+  private final List<Record> file3SecondSnapshotRecords = ImmutableList.of(\n       genericRecord.copy(ImmutableMap.of(\"id\", 24L, \"data\", \"cloud\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 25L, \"data\", \"zen\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 26L, \"data\", \"sky\"))\n   );\n \n-  private final List<Record> file1ThirdSnapshotRecords = Lists.newArrayList(\n+  private final List<Record> file1ThirdSnapshotRecords = ImmutableList.of(\n       genericRecord.copy(ImmutableMap.of(\"id\", 6L, \"data\", \"brainy\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 7L, \"data\", \"film\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 8L, \"data\", \"fetta\"))\n   );\n-  private final List<Record> file2ThirdSnapshotRecords = Lists.newArrayList(\n+  private final List<Record> file2ThirdSnapshotRecords = ImmutableList.of(\n       genericRecord.copy(ImmutableMap.of(\"id\", 16L, \"data\", \"cake\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 17L, \"data\", \"intrinsic\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 18L, \"data\", \"paper\"))\n   );\n-  private final List<Record> file3ThirdSnapshotRecords = Lists.newArrayList(\n+  private final List<Record> file3ThirdSnapshotRecords = ImmutableList.of(\n       genericRecord.copy(ImmutableMap.of(\"id\", 26L, \"data\", \"belleview\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 27L, \"data\", \"overview\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 28L, \"data\", \"tender\"))\n   );\n \n   private void overwriteExistingData() throws IOException {\n-    DataFile file12 = writeFile(sharedTableLocation, format.addExtension(\"file-11\"), file1SecondSnapshotRecords);\n-    DataFile file22 = writeFile(sharedTableLocation, format.addExtension(\"file-21\"), file2SecondSnapshotRecords);\n-    DataFile file32 = writeFile(sharedTableLocation, format.addExtension(\"file-31\"), file3SecondSnapshotRecords);\n+    DataFile file12 = writeFile(sharedTableLocation, format.addExtension(\"file-12\"), file1SecondSnapshotRecords);\n+    DataFile file22 = writeFile(sharedTableLocation, format.addExtension(\"file-22\"), file2SecondSnapshotRecords);\n+    DataFile file32 = writeFile(sharedTableLocation, format.addExtension(\"file-32\"), file3SecondSnapshotRecords);\n \n     sharedTable.newOverwrite()\n         .overwriteByRowFilter(Expressions.alwaysTrue())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU2NjU2NA==", "url": "https://github.com/apache/iceberg/pull/1273#discussion_r464566564", "bodyText": "Looks like the goal is to make these immutable, have you considered using ImmutableList too?", "author": "edgarRd", "createdAt": "2020-08-03T17:44:09Z", "path": "data/src/test/java/org/apache/iceberg/data/TestLocalScan.java", "diffHunk": "@@ -103,132 +103,100 @@ public TestLocalScan(String format) {\n \n   private String sharedTableLocation = null;\n   private Table sharedTable = null;\n-  private List<Record> file1Records = null;\n-  private List<Record> file2Records = null;\n-  private List<Record> file3Records = null;\n-  private List<Record> file1FirstSnapshotRecords = null;\n-  private List<Record> file2FirstSnapshotRecords = null;\n-  private List<Record> file3FirstSnapshotRecords = null;\n-  private List<Record> file1SecondSnapshotRecords = null;\n-  private List<Record> file2SecondSnapshotRecords = null;\n-  private List<Record> file3SecondSnapshotRecords = null;\n \n+  private final Record genericRecord = GenericRecord.create(SCHEMA);\n+\n+  private final List<Record> file1FirstRecords =  Lists.newArrayList(", "originalCommit": "a1029bb1dabea326624cd546a1b160a3779cc090", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc1NjI1Nw==", "url": "https://github.com/apache/iceberg/pull/1273#discussion_r464756257", "bodyText": "Good idea. Applied.", "author": "chenjunjiedada", "createdAt": "2020-08-04T02:05:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU2NjU2NA=="}], "type": "inlineReview", "revised_code": {"commit": "5b75cf33eb4fa39f2940b954d21080bc61cc4e64", "chunk": "diff --git a/data/src/test/java/org/apache/iceberg/data/TestLocalScan.java b/data/src/test/java/org/apache/iceberg/data/TestLocalScan.java\nindex 086594356..10ace6736 100644\n--- a/data/src/test/java/org/apache/iceberg/data/TestLocalScan.java\n+++ b/data/src/test/java/org/apache/iceberg/data/TestLocalScan.java\n\n@@ -106,58 +107,58 @@ public class TestLocalScan {\n \n   private final Record genericRecord = GenericRecord.create(SCHEMA);\n \n-  private final List<Record> file1FirstRecords =  Lists.newArrayList(\n+  private final List<Record> file1FirstSnapshotRecords = ImmutableList.of(\n       genericRecord.copy(ImmutableMap.of(\"id\", 0L, \"data\", \"clarification\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 1L, \"data\", \"risky\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 2L, \"data\", \"falafel\"))\n   );\n-  private final List<Record> file2FirstRecords = Lists.newArrayList(\n+  private final List<Record> file2FirstSnapshotRecords = ImmutableList.of(\n       genericRecord.copy(ImmutableMap.of(\"id\", 10L, \"data\", \"clammy\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 11L, \"data\", \"evacuate\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 12L, \"data\", \"tissue\"))\n   );\n-  private final List<Record> file3FirstRecords = Lists.newArrayList(\n+  private final List<Record> file3FirstSnapshotRecords = ImmutableList.of(\n       genericRecord.copy(ImmutableMap.of(\"id\", 20L, \"data\", \"ocean\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 21L, \"data\", \"holistic\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 22L, \"data\", \"preventative\"))\n   );\n \n-  private final List<Record> file1SecondSnapshotRecords = Lists.newArrayList(\n+  private final List<Record> file1SecondSnapshotRecords = ImmutableList.of(\n       genericRecord.copy(ImmutableMap.of(\"id\", 4L, \"data\", \"obscure\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 5L, \"data\", \"secure\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 6L, \"data\", \"fetta\"))\n   );\n-  private final List<Record> file2SecondSnapshotRecords = Lists.newArrayList(\n+  private final List<Record> file2SecondSnapshotRecords = ImmutableList.of(\n       genericRecord.copy(ImmutableMap.of(\"id\", 14L, \"data\", \"radical\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 15L, \"data\", \"collocation\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 16L, \"data\", \"book\"))\n   );\n-  private final List<Record> file3SecondSnapshotRecords = Lists.newArrayList(\n+  private final List<Record> file3SecondSnapshotRecords = ImmutableList.of(\n       genericRecord.copy(ImmutableMap.of(\"id\", 24L, \"data\", \"cloud\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 25L, \"data\", \"zen\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 26L, \"data\", \"sky\"))\n   );\n \n-  private final List<Record> file1ThirdSnapshotRecords = Lists.newArrayList(\n+  private final List<Record> file1ThirdSnapshotRecords = ImmutableList.of(\n       genericRecord.copy(ImmutableMap.of(\"id\", 6L, \"data\", \"brainy\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 7L, \"data\", \"film\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 8L, \"data\", \"fetta\"))\n   );\n-  private final List<Record> file2ThirdSnapshotRecords = Lists.newArrayList(\n+  private final List<Record> file2ThirdSnapshotRecords = ImmutableList.of(\n       genericRecord.copy(ImmutableMap.of(\"id\", 16L, \"data\", \"cake\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 17L, \"data\", \"intrinsic\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 18L, \"data\", \"paper\"))\n   );\n-  private final List<Record> file3ThirdSnapshotRecords = Lists.newArrayList(\n+  private final List<Record> file3ThirdSnapshotRecords = ImmutableList.of(\n       genericRecord.copy(ImmutableMap.of(\"id\", 26L, \"data\", \"belleview\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 27L, \"data\", \"overview\")),\n       genericRecord.copy(ImmutableMap.of(\"id\", 28L, \"data\", \"tender\"))\n   );\n \n   private void overwriteExistingData() throws IOException {\n-    DataFile file12 = writeFile(sharedTableLocation, format.addExtension(\"file-11\"), file1SecondSnapshotRecords);\n-    DataFile file22 = writeFile(sharedTableLocation, format.addExtension(\"file-21\"), file2SecondSnapshotRecords);\n-    DataFile file32 = writeFile(sharedTableLocation, format.addExtension(\"file-31\"), file3SecondSnapshotRecords);\n+    DataFile file12 = writeFile(sharedTableLocation, format.addExtension(\"file-12\"), file1SecondSnapshotRecords);\n+    DataFile file22 = writeFile(sharedTableLocation, format.addExtension(\"file-22\"), file2SecondSnapshotRecords);\n+    DataFile file32 = writeFile(sharedTableLocation, format.addExtension(\"file-32\"), file3SecondSnapshotRecords);\n \n     sharedTable.newOverwrite()\n         .overwriteByRowFilter(Expressions.alwaysTrue())\n"}}, {"oid": "5b75cf33eb4fa39f2940b954d21080bc61cc4e64", "url": "https://github.com/apache/iceberg/commit/5b75cf33eb4fa39f2940b954d21080bc61cc4e64", "message": "address comments from Edgar", "committedDate": "2020-08-04T02:01:24Z", "type": "commit"}, {"oid": "5b75cf33eb4fa39f2940b954d21080bc61cc4e64", "url": "https://github.com/apache/iceberg/commit/5b75cf33eb4fa39f2940b954d21080bc61cc4e64", "message": "address comments from Edgar", "committedDate": "2020-08-04T02:01:24Z", "type": "forcePushed"}]}