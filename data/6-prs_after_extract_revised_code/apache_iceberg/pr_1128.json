{"pr_number": 1128, "pr_title": "Fix parquet name mapping unit test", "pr_createdAt": "2020-06-19T13:20:00Z", "pr_url": "https://github.com/apache/iceberg/pull/1128", "timeline": [{"oid": "08cbb8e40250a993d64ed6cb3854c6cf3ca3c7ca", "url": "https://github.com/apache/iceberg/commit/08cbb8e40250a993d64ed6cb3854c6cf3ca3c7ca", "message": "Fix parquet name mapping unit test", "committedDate": "2020-06-19T13:18:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA3NjMzMg==", "url": "https://github.com/apache/iceberg/pull/1128#discussion_r443076332", "bodyText": "Why not use a Parquet schema visitor?", "author": "rdblue", "createdAt": "2020-06-19T23:25:35Z", "path": "parquet/src/main/java/org/apache/iceberg/parquet/RemoveIds.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.parquet;\n+\n+import org.apache.iceberg.avro.AvroSchemaUtil;\n+import org.apache.iceberg.types.Type.PrimitiveType;\n+import org.apache.iceberg.types.TypeUtil;\n+import org.apache.iceberg.types.Types.ListType;\n+import org.apache.iceberg.types.Types.MapType;\n+import org.apache.iceberg.types.Types.NestedField;\n+import org.apache.iceberg.types.Types.StructType;\n+import org.apache.iceberg.types.Types.TimestampType;\n+import org.apache.parquet.schema.GroupType;\n+import org.apache.parquet.schema.LogicalTypeAnnotation;\n+import org.apache.parquet.schema.MessageType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.BINARY;\n+import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.BOOLEAN;\n+import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.DOUBLE;\n+import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.FIXED_LEN_BYTE_ARRAY;\n+import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.FLOAT;\n+import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.INT32;\n+import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.INT64;\n+\n+public class RemoveIds {", "originalCommit": "08cbb8e40250a993d64ed6cb3854c6cf3ca3c7ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5NjgwMw==", "url": "https://github.com/apache/iceberg/pull/1128#discussion_r443096803", "bodyText": "I was thinking it needs another schema conversion. Anyway, I just updated this by parquet type visitor. Look like a bit simple.", "author": "chenjunjiedada", "createdAt": "2020-06-20T03:24:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA3NjMzMg=="}], "type": "inlineReview", "revised_code": {"commit": "eb8154ba66e902262d60f48d0612fa95b57f929f", "chunk": "diff --git a/parquet/src/main/java/org/apache/iceberg/parquet/RemoveIds.java b/parquet/src/main/java/org/apache/iceberg/parquet/RemoveIds.java\nindex f1dd57aee..b68b5c00d 100644\n--- a/parquet/src/main/java/org/apache/iceberg/parquet/RemoveIds.java\n+++ b/parquet/src/main/java/org/apache/iceberg/parquet/RemoveIds.java\n\n@@ -19,162 +19,63 @@\n \n package org.apache.iceberg.parquet;\n \n-import org.apache.iceberg.avro.AvroSchemaUtil;\n-import org.apache.iceberg.types.Type.PrimitiveType;\n-import org.apache.iceberg.types.TypeUtil;\n-import org.apache.iceberg.types.Types.ListType;\n-import org.apache.iceberg.types.Types.MapType;\n-import org.apache.iceberg.types.Types.NestedField;\n-import org.apache.iceberg.types.Types.StructType;\n-import org.apache.iceberg.types.Types.TimestampType;\n+import java.util.List;\n import org.apache.parquet.schema.GroupType;\n-import org.apache.parquet.schema.LogicalTypeAnnotation;\n import org.apache.parquet.schema.MessageType;\n+import org.apache.parquet.schema.PrimitiveType;\n import org.apache.parquet.schema.Type;\n import org.apache.parquet.schema.Types;\n \n-import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.BINARY;\n-import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.BOOLEAN;\n-import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.DOUBLE;\n-import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.FIXED_LEN_BYTE_ARRAY;\n-import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.FLOAT;\n-import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.INT32;\n-import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.INT64;\n+public class RemoveIds extends ParquetTypeVisitor<Type> {\n+  private final String name;\n \n-public class RemoveIds {\n-  public static final int DECIMAL_INT32_MAX_DIGITS = 9;\n-  public static final int DECIMAL_INT64_MAX_DIGITS = 18;\n-  private static final LogicalTypeAnnotation STRING = LogicalTypeAnnotation.stringType();\n-  private static final LogicalTypeAnnotation DATE = LogicalTypeAnnotation.dateType();\n-  private static final LogicalTypeAnnotation TIME_MICROS = LogicalTypeAnnotation\n-      .timeType(false /* not adjusted to UTC */, LogicalTypeAnnotation.TimeUnit.MICROS);\n-  private static final LogicalTypeAnnotation TIMESTAMP_MICROS = LogicalTypeAnnotation\n-      .timestampType(false /* not adjusted to UTC */, LogicalTypeAnnotation.TimeUnit.MICROS);\n-  private static final LogicalTypeAnnotation TIMESTAMPTZ_MICROS = LogicalTypeAnnotation\n-      .timestampType(true /* adjusted to UTC */, LogicalTypeAnnotation.TimeUnit.MICROS);\n-\n-  GroupType struct(StructType struct, Type.Repetition repetition, String name) {\n-    Types.GroupBuilder<GroupType> builder = Types.buildGroup(repetition);\n-\n-    for (NestedField field : struct.fields()) {\n-      builder.addField(field(field));\n-    }\n-\n-    return builder.named(AvroSchemaUtil.makeCompatibleName(name));\n-  }\n-\n-  GroupType list(ListType list, Type.Repetition repetition, String name) {\n-    NestedField elementField = list.fields().get(0);\n-    return Types.list(repetition)\n-        .element(field(elementField))\n-        .named(AvroSchemaUtil.makeCompatibleName(name));\n+  public RemoveIds(String name) {\n+    this.name = name;\n   }\n \n-  GroupType map(MapType map, Type.Repetition repetition, String name) {\n-    NestedField keyField = map.fields().get(0);\n-    NestedField valueField = map.fields().get(1);\n-    return Types.map(repetition)\n-        .key(field(keyField))\n-        .value(field(valueField))\n-        .named(AvroSchemaUtil.makeCompatibleName(name));\n-  }\n-\n-  Type primitive(PrimitiveType primitive, Type.Repetition repetition, String originalName) {\n-    String name = AvroSchemaUtil.makeCompatibleName(originalName);\n-    switch (primitive.typeId()) {\n-      case BOOLEAN:\n-        return Types.primitive(BOOLEAN, repetition).named(name);\n-      case INTEGER:\n-        return Types.primitive(INT32, repetition).named(name);\n-      case LONG:\n-        return Types.primitive(INT64, repetition).named(name);\n-      case FLOAT:\n-        return Types.primitive(FLOAT, repetition).named(name);\n-      case DOUBLE:\n-        return Types.primitive(DOUBLE, repetition).named(name);\n-      case DATE:\n-        return Types.primitive(INT32, repetition).as(DATE).named(name);\n-      case TIME:\n-        return Types.primitive(INT64, repetition).as(TIME_MICROS).named(name);\n-      case TIMESTAMP:\n-        if (((TimestampType) primitive).shouldAdjustToUTC()) {\n-          return Types.primitive(INT64, repetition).as(TIMESTAMPTZ_MICROS).named(name);\n-        } else {\n-          return Types.primitive(INT64, repetition).as(TIMESTAMP_MICROS).named(name);\n-        }\n-      case STRING:\n-        return Types.primitive(BINARY, repetition).as(STRING).named(name);\n-      case BINARY:\n-        return Types.primitive(BINARY, repetition).named(name);\n-      case FIXED:\n-        org.apache.iceberg.types.Types.FixedType fixed = (org.apache.iceberg.types.Types.FixedType) primitive;\n-\n-        return Types.primitive(FIXED_LEN_BYTE_ARRAY, repetition).length(fixed.length()).named(name);\n-\n-      case DECIMAL:\n-        org.apache.iceberg.types.Types.DecimalType decimal = (org.apache.iceberg.types.Types.DecimalType) primitive;\n-\n-        if (decimal.precision() <= DECIMAL_INT32_MAX_DIGITS) {\n-          // store as an int\n-          return Types.primitive(INT32, repetition)\n-              .as(decimalAnnotation(decimal.precision(), decimal.scale()))\n-              .named(name);\n-\n-        } else if (decimal.precision() <= DECIMAL_INT64_MAX_DIGITS) {\n-          // store as a long\n-          return Types.primitive(INT64, repetition)\n-              .as(decimalAnnotation(decimal.precision(), decimal.scale()))\n-              .named(name);\n-\n-        } else {\n-          // store as a fixed-length array\n-          int minLength = TypeUtil.decimalRequiredBytes(decimal.precision());\n-          return Types.primitive(FIXED_LEN_BYTE_ARRAY, repetition).length(minLength)\n-              .as(decimalAnnotation(decimal.precision(), decimal.scale()))\n-              .named(name);\n-        }\n-\n-      case UUID:\n-        return Types.primitive(FIXED_LEN_BYTE_ARRAY, repetition).length(16).named(name);\n-\n-      default:\n-        throw new UnsupportedOperationException(\"Unsupported type for Parquet: \" + primitive);\n+  @Override\n+  public Type message(MessageType message, List<Type> fields) {\n+    Types.MessageTypeBuilder builder = Types.buildMessage();\n+    for (Type field : struct(message.asGroupType(), fields).asGroupType().getFields()) {\n+      builder.addField(field);\n     }\n+    return builder.named(name);\n   }\n \n-  Type field(org.apache.iceberg.types.Types.NestedField field) {\n-    Type.Repetition repetition = field.isOptional() ?\n-        Type.Repetition.OPTIONAL : Type.Repetition.REQUIRED;\n-    String name = field.name();\n-\n-    if (field.type().isPrimitiveType()) {\n-      return primitive(field.type().asPrimitiveType(), repetition, name);\n-\n-    } else {\n-      org.apache.iceberg.types.Type.NestedType nested = field.type().asNestedType();\n-      if (nested.isStructType()) {\n-        return struct(nested.asStructType(), repetition, name);\n-      } else if (nested.isMapType()) {\n-        return map(nested.asMapType(), repetition, name);\n-      } else if (nested.isListType()) {\n-        return list(nested.asListType(), repetition, name);\n-      }\n-      throw new UnsupportedOperationException(\"Can't convert unknown type: \" + nested);\n+  @Override\n+  public Type struct(GroupType struct, List<Type> fields) {\n+    Types.GroupBuilder<GroupType> builder = Types.buildGroup(struct.getRepetition());\n+    for (Type field : fields) {\n+      builder.addField(field);\n     }\n+    return builder.named(struct.getName());\n   }\n \n-  private static LogicalTypeAnnotation decimalAnnotation(int precision, int scale) {\n-    return LogicalTypeAnnotation.decimalType(scale, precision);\n+  @Override\n+  public Type list(GroupType array, Type item) {\n+    return Types.list(array.getRepetition())\n+        .element(item)\n+        .named(array.getName());\n   }\n \n-  public MessageType removeIds(org.apache.iceberg.Schema schema, String name) {\n-    Types.MessageTypeBuilder builder = Types.buildMessage();\n+  @Override\n+  public Type map(GroupType map, Type key, Type value) {\n+    return Types.map(map.getRepetition())\n+        .key(key)\n+        .value(value)\n+        .named(map.getName());\n+  }\n \n-    for (org.apache.iceberg.types.Types.NestedField field : schema.columns()) {\n-      builder.addField(field(field));\n-    }\n+  @Override\n+  public Type primitive(PrimitiveType primitive) {\n+    return Types.primitive(primitive.getPrimitiveTypeName(), primitive.getRepetition())\n+        .length(primitive.getTypeLength())\n+        .as(primitive.getLogicalTypeAnnotation())\n+        .named(primitive.getName());\n+  }\n \n-    return builder.named(AvroSchemaUtil.makeCompatibleName(name));\n+  public static MessageType removeIds(org.apache.iceberg.Schema schema, String name) {\n+    return (MessageType) ParquetTypeVisitor.visit(ParquetSchemaUtil.convert(schema, name), new RemoveIds(name));\n   }\n \n }\n"}}, {"oid": "eb8154ba66e902262d60f48d0612fa95b57f929f", "url": "https://github.com/apache/iceberg/commit/eb8154ba66e902262d60f48d0612fa95b57f929f", "message": "use parquet type visitor", "committedDate": "2020-06-20T03:20:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY5MTUxMg==", "url": "https://github.com/apache/iceberg/pull/1128#discussion_r443691512", "bodyText": "Why is name needed? The MessageType has a name that can be used instead of passing it in separately.", "author": "rdblue", "createdAt": "2020-06-22T16:42:35Z", "path": "parquet/src/main/java/org/apache/iceberg/parquet/RemoveIds.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.parquet;\n+\n+import java.util.List;\n+import org.apache.parquet.schema.GroupType;\n+import org.apache.parquet.schema.MessageType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+public class RemoveIds extends ParquetTypeVisitor<Type> {\n+  private final String name;\n+\n+  public RemoveIds(String name) {\n+    this.name = name;", "originalCommit": "eb8154ba66e902262d60f48d0612fa95b57f929f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "24d0f3bb99c88811a101b33fd6244cc9a9d569c3", "chunk": "diff --git a/parquet/src/main/java/org/apache/iceberg/parquet/RemoveIds.java b/parquet/src/main/java/org/apache/iceberg/parquet/RemoveIds.java\nindex b68b5c00d..0db22bbf7 100644\n--- a/parquet/src/main/java/org/apache/iceberg/parquet/RemoveIds.java\n+++ b/parquet/src/main/java/org/apache/iceberg/parquet/RemoveIds.java\n\n@@ -27,11 +27,6 @@ import org.apache.parquet.schema.Type;\n import org.apache.parquet.schema.Types;\n \n public class RemoveIds extends ParquetTypeVisitor<Type> {\n-  private final String name;\n-\n-  public RemoveIds(String name) {\n-    this.name = name;\n-  }\n \n   @Override\n   public Type message(MessageType message, List<Type> fields) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY5MjExMA==", "url": "https://github.com/apache/iceberg/pull/1128#discussion_r443692110", "bodyText": "It would be better to pass in MessageType instead of Schema. That way removing IDs and converting to Parquet are not mixed together.", "author": "rdblue", "createdAt": "2020-06-22T16:43:36Z", "path": "parquet/src/main/java/org/apache/iceberg/parquet/RemoveIds.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.parquet;\n+\n+import java.util.List;\n+import org.apache.parquet.schema.GroupType;\n+import org.apache.parquet.schema.MessageType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+public class RemoveIds extends ParquetTypeVisitor<Type> {\n+  private final String name;\n+\n+  public RemoveIds(String name) {\n+    this.name = name;\n+  }\n+\n+  @Override\n+  public Type message(MessageType message, List<Type> fields) {\n+    Types.MessageTypeBuilder builder = Types.buildMessage();\n+    for (Type field : struct(message.asGroupType(), fields).asGroupType().getFields()) {\n+      builder.addField(field);\n+    }\n+    return builder.named(name);\n+  }\n+\n+  @Override\n+  public Type struct(GroupType struct, List<Type> fields) {\n+    Types.GroupBuilder<GroupType> builder = Types.buildGroup(struct.getRepetition());\n+    for (Type field : fields) {\n+      builder.addField(field);\n+    }\n+    return builder.named(struct.getName());\n+  }\n+\n+  @Override\n+  public Type list(GroupType array, Type item) {\n+    return Types.list(array.getRepetition())\n+        .element(item)\n+        .named(array.getName());\n+  }\n+\n+  @Override\n+  public Type map(GroupType map, Type key, Type value) {\n+    return Types.map(map.getRepetition())\n+        .key(key)\n+        .value(value)\n+        .named(map.getName());\n+  }\n+\n+  @Override\n+  public Type primitive(PrimitiveType primitive) {\n+    return Types.primitive(primitive.getPrimitiveTypeName(), primitive.getRepetition())\n+        .length(primitive.getTypeLength())\n+        .as(primitive.getLogicalTypeAnnotation())\n+        .named(primitive.getName());\n+  }\n+\n+  public static MessageType removeIds(org.apache.iceberg.Schema schema, String name) {", "originalCommit": "eb8154ba66e902262d60f48d0612fa95b57f929f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "24d0f3bb99c88811a101b33fd6244cc9a9d569c3", "chunk": "diff --git a/parquet/src/main/java/org/apache/iceberg/parquet/RemoveIds.java b/parquet/src/main/java/org/apache/iceberg/parquet/RemoveIds.java\nindex b68b5c00d..0db22bbf7 100644\n--- a/parquet/src/main/java/org/apache/iceberg/parquet/RemoveIds.java\n+++ b/parquet/src/main/java/org/apache/iceberg/parquet/RemoveIds.java\n\n@@ -27,11 +27,6 @@ import org.apache.parquet.schema.Type;\n import org.apache.parquet.schema.Types;\n \n public class RemoveIds extends ParquetTypeVisitor<Type> {\n-  private final String name;\n-\n-  public RemoveIds(String name) {\n-    this.name = name;\n-  }\n \n   @Override\n   public Type message(MessageType message, List<Type> fields) {\n"}}, {"oid": "24d0f3bb99c88811a101b33fd6244cc9a9d569c3", "url": "https://github.com/apache/iceberg/commit/24d0f3bb99c88811a101b33fd6244cc9a9d569c3", "message": "address comments", "committedDate": "2020-06-22T23:41:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4MzIwNA==", "url": "https://github.com/apache/iceberg/pull/1128#discussion_r443883204", "bodyText": "The name isn't used.", "author": "rdblue", "createdAt": "2020-06-22T23:44:38Z", "path": "parquet/src/main/java/org/apache/iceberg/parquet/RemoveIds.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.parquet;\n+\n+import java.util.List;\n+import org.apache.parquet.schema.GroupType;\n+import org.apache.parquet.schema.MessageType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+public class RemoveIds extends ParquetTypeVisitor<Type> {\n+\n+  @Override\n+  public Type message(MessageType message, List<Type> fields) {\n+    Types.MessageTypeBuilder builder = Types.buildMessage();\n+    for (Type field : struct(message.asGroupType(), fields).asGroupType().getFields()) {\n+      builder.addField(field);\n+    }\n+    return builder.named(message.getName());\n+  }\n+\n+  @Override\n+  public Type struct(GroupType struct, List<Type> fields) {\n+    Types.GroupBuilder<GroupType> builder = Types.buildGroup(struct.getRepetition());\n+    for (Type field : fields) {\n+      builder.addField(field);\n+    }\n+    return builder.named(struct.getName());\n+  }\n+\n+  @Override\n+  public Type list(GroupType array, Type item) {\n+    return Types.list(array.getRepetition())\n+        .element(item)\n+        .named(array.getName());\n+  }\n+\n+  @Override\n+  public Type map(GroupType map, Type key, Type value) {\n+    return Types.map(map.getRepetition())\n+        .key(key)\n+        .value(value)\n+        .named(map.getName());\n+  }\n+\n+  @Override\n+  public Type primitive(PrimitiveType primitive) {\n+    return Types.primitive(primitive.getPrimitiveTypeName(), primitive.getRepetition())\n+        .length(primitive.getTypeLength())\n+        .as(primitive.getLogicalTypeAnnotation())\n+        .named(primitive.getName());\n+  }\n+\n+  public static MessageType removeIds(MessageType type, String name) {", "originalCommit": "24d0f3bb99c88811a101b33fd6244cc9a9d569c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5ODE4OA==", "url": "https://github.com/apache/iceberg/pull/1128#discussion_r443898188", "bodyText": "Oops, I need coffee in the morning before coding..", "author": "chenjunjiedada", "createdAt": "2020-06-23T00:39:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4MzIwNA=="}], "type": "inlineReview", "revised_code": {"commit": "208a9d2e8820eb5a5de800c00db079bd6ce4c267", "chunk": "diff --git a/parquet/src/main/java/org/apache/iceberg/parquet/RemoveIds.java b/parquet/src/main/java/org/apache/iceberg/parquet/RemoveIds.java\nindex 0db22bbf7..6096f0f5b 100644\n--- a/parquet/src/main/java/org/apache/iceberg/parquet/RemoveIds.java\n+++ b/parquet/src/main/java/org/apache/iceberg/parquet/RemoveIds.java\n\n@@ -69,7 +69,7 @@ public class RemoveIds extends ParquetTypeVisitor<Type> {\n         .named(primitive.getName());\n   }\n \n-  public static MessageType removeIds(MessageType type, String name) {\n+  public static MessageType removeIds(MessageType type) {\n     return (MessageType) ParquetTypeVisitor.visit(type, new RemoveIds());\n   }\n \n"}}, {"oid": "208a9d2e8820eb5a5de800c00db079bd6ce4c267", "url": "https://github.com/apache/iceberg/commit/208a9d2e8820eb5a5de800c00db079bd6ce4c267", "message": "address comments", "committedDate": "2020-06-23T00:35:53Z", "type": "commit"}]}