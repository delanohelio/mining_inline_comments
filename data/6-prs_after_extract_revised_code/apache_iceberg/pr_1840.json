{"pr_number": 1840, "pr_title": "Hive: Refactor HiveIcebergStorageHandler tests to use catalogs as parameters", "pr_createdAt": "2020-11-27T10:08:24Z", "pr_url": "https://github.com/apache/iceberg/pull/1840", "timeline": [{"oid": "e1161f985aae5bb89652bbef1611e4c1759db171", "url": "https://github.com/apache/iceberg/commit/e1161f985aae5bb89652bbef1611e4c1759db171", "message": "Refactor HiveIcebergStorageHandler tests to use catalogs as parameters 2nd try", "committedDate": "2020-11-27T12:04:07Z", "type": "forcePushed"}, {"oid": "fa0ccf062474b60a08a65ccbbbc513531c3dacda", "url": "https://github.com/apache/iceberg/commit/fa0ccf062474b60a08a65ccbbbc513531c3dacda", "message": "Refactor HiveIcebergStorageHandler tests to use catalogs as parameters 3rd try", "committedDate": "2020-11-27T14:20:08Z", "type": "commit"}, {"oid": "fa0ccf062474b60a08a65ccbbbc513531c3dacda", "url": "https://github.com/apache/iceberg/commit/fa0ccf062474b60a08a65ccbbbc513531c3dacda", "message": "Refactor HiveIcebergStorageHandler tests to use catalogs as parameters 3rd try", "committedDate": "2020-11-27T14:20:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM1Mjk1MA==", "url": "https://github.com/apache/iceberg/pull/1840#discussion_r533352950", "bodyText": "I think right now this means that the test params are only populated for Java8. The logic should be to add all file formats and all catalog types first, and then add Tez as an engine only if Java8 is detected, otherwise only mr.", "author": "marton-bod", "createdAt": "2020-12-01T11:55:40Z", "path": "mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandler.java", "diffHunk": "@@ -145,41 +142,47 @@\n       ImmutableSet.of(\"bucketing_version\", StatsSetupConst.ROW_COUNT,\n           StatsSetupConst.RAW_DATA_SIZE, StatsSetupConst.TOTAL_SIZE, StatsSetupConst.NUM_FILES, \"numFilesErasureCoded\");\n \n-  private static TestHiveShell shell;\n-\n   private static final List<Type> SUPPORTED_TYPES =\n           ImmutableList.of(Types.BooleanType.get(), Types.IntegerType.get(), Types.LongType.get(),\n                   Types.FloatType.get(), Types.DoubleType.get(), Types.DateType.get(), Types.TimestampType.withZone(),\n                   Types.TimestampType.withoutZone(), Types.StringType.get(), Types.BinaryType.get(),\n                   Types.DecimalType.of(3, 1));\n \n-  private TestTables testTables;\n-\n-  public abstract TestTables testTables(Configuration conf, TemporaryFolder tmp) throws IOException;\n-\n-  @Parameters(name = \"fileFormat={0}, engine={1}\")\n+  @Parameters(name = \"fileFormat={0}, engine={1}, catalog={2}\")\n   public static Collection<Object[]> parameters() {\n-    Collection<Object[]> testParams = new ArrayList<>();\n-    testParams.add(new Object[] { FileFormat.PARQUET, \"mr\" });\n-    testParams.add(new Object[] { FileFormat.ORC, \"mr\" });\n-    testParams.add(new Object[] { FileFormat.AVRO, \"mr\" });\n-\n-    // include Tez tests only for Java 8\n     String javaVersion = System.getProperty(\"java.specification.version\");\n-    if (javaVersion.equals(\"1.8\")) {\n-      testParams.add(new Object[] { FileFormat.PARQUET, \"tez\" });\n-      testParams.add(new Object[] { FileFormat.ORC, \"tez\" });\n-      testParams.add(new Object[] { FileFormat.AVRO, \"tez\" });\n+\n+    Collection<Object[]> testParams = new ArrayList<>();\n+    for (FileFormat fileFormat : fileFormats) {\n+      for (String engine : executionEngines) {\n+        // include Tez tests only for Java 8\n+        if (javaVersion.equals(\"1.8\")) {", "originalCommit": "fa0ccf062474b60a08a65ccbbbc513531c3dacda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU3NDgzNg==", "url": "https://github.com/apache/iceberg/pull/1840#discussion_r533574836", "bodyText": "Good catch!\nFixed! Thanks!", "author": "pvary", "createdAt": "2020-12-01T17:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM1Mjk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "35064f10762f4663ce5562013847a525f61a0259", "chunk": "diff --git a/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandler.java b/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandler.java\nindex 73516e047..4a87ede34 100644\n--- a/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandler.java\n+++ b/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandler.java\n\n@@ -153,10 +153,10 @@ public class TestHiveIcebergStorageHandler {\n     String javaVersion = System.getProperty(\"java.specification.version\");\n \n     Collection<Object[]> testParams = new ArrayList<>();\n-    for (FileFormat fileFormat : fileFormats) {\n-      for (String engine : executionEngines) {\n+    for (FileFormat fileFormat : FILE_FORMATS) {\n+      for (String engine : EXECUTION_ENGINES) {\n         // include Tez tests only for Java 8\n-        if (javaVersion.equals(\"1.8\")) {\n+        if (javaVersion.equals(\"1.8\") || \"mr\".equals(engine)) {\n           for (TestTables.TestTableType testTableType : TestTables.ALL_TABLE_TYPES) {\n             testParams.add(new Object[] {fileFormat, engine, testTableType});\n           }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM1MzUwNQ==", "url": "https://github.com/apache/iceberg/pull/1840#discussion_r533353505", "bodyText": "can we use upper case naming for these two static final variables? FILE_FORMATS and EXEC_ENGINES", "author": "marton-bod", "createdAt": "2020-12-01T11:56:36Z", "path": "mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandler.java", "diffHunk": "@@ -77,10 +73,11 @@\n import static org.junit.runners.Parameterized.Parameters;\n \n @RunWith(Parameterized.class)\n-public abstract class HiveIcebergStorageHandlerBaseTest {\n+public class TestHiveIcebergStorageHandler {\n+  private static final FileFormat[] fileFormats =", "originalCommit": "fa0ccf062474b60a08a65ccbbbc513531c3dacda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU3NDkyNg==", "url": "https://github.com/apache/iceberg/pull/1840#discussion_r533574926", "bodyText": "Done", "author": "pvary", "createdAt": "2020-12-01T17:03:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM1MzUwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "35064f10762f4663ce5562013847a525f61a0259", "chunk": "diff --git a/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandler.java b/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandler.java\nindex 73516e047..4a87ede34 100644\n--- a/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandler.java\n+++ b/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandler.java\n\n@@ -74,10 +74,10 @@ import static org.junit.runners.Parameterized.Parameters;\n \n @RunWith(Parameterized.class)\n public class TestHiveIcebergStorageHandler {\n-  private static final FileFormat[] fileFormats =\n+  private static final FileFormat[] FILE_FORMATS =\n       new FileFormat[] {FileFormat.AVRO, FileFormat.ORC, FileFormat.PARQUET};\n \n-  private static final String[] executionEngines = new String[] {\"mr\", \"tez\"};\n+  private static final String[] EXECUTION_ENGINES = new String[] {\"mr\", \"tez\"};\n \n   private static final Schema CUSTOMER_SCHEMA = new Schema(\n           optional(1, \"customer_id\", Types.LongType.get()),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2MTI0Ng==", "url": "https://github.com/apache/iceberg/pull/1840#discussion_r533361246", "bodyText": "nit: doc here is the same as above, even though behaviour is different with extra data generation step", "author": "marton-bod", "createdAt": "2020-12-01T12:10:13Z", "path": "mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java", "diffHunk": "@@ -83,12 +92,107 @@ public Tables tables() {\n   public abstract String locationForCreateTableSQL(TableIdentifier identifier);\n \n   /**\n-   * If the {@link Catalogs#LOCATION} is needed for {@link Catalogs#loadTable(Configuration, Properties)} then this\n-   * method should provide the location string. It should return <code>null</code> if the location is not needed.\n-   * @param identifier The table identifier\n-   * @return The location string for loadTable operation\n+   * If creating the Hive table independently is needed for the given Catalog then this should return the Hive SQL\n+   * string which is needed to be executed.\n+   * @param identifier The table identifier (the namespace should be \"default\")\n+   * @return The SQL string - which should be executed, null - if it is not needed.\n+   */\n+  public String createHiveTableSQL(TableIdentifier identifier) {\n+    return String.format(\"CREATE TABLE default.%s STORED BY '%s' %s\", identifier.name(),\n+        HiveIcebergStorageHandler.class.getName(), locationForCreateTableSQL(identifier));\n+  }\n+\n+  /**\n+   * Loads the given table from the actual catalog. Overridden by HadoopTables, since the parameter of the\n+   * {@link Tables#load(String)} should be the full path of the table metadata directory\n+   * @param identifier The table we want to load\n+   * @return The Table loaded from the Catalog\n    */\n-  public abstract String loadLocation(TableIdentifier identifier);\n+  public Table loadTable(TableIdentifier identifier) {\n+    return tables.load(identifier.toString());\n+  }\n+\n+  /**\n+   * Creates a Hive test table. Creates the Iceberg table/data and creates the corresponding Hive table as well when\n+   * needed. The table will be in the 'default' database.\n+   * @param shell The HiveShell used for Hive table creation\n+   * @param tableName The name of the test table\n+   * @param schema The schema used for the table creation\n+   * @param fileFormat The file format used for writing the data\n+   * @param records The records with which the table is populated\n+   * @throws IOException If there is an error writing data\n+   */\n+  public void createTable(TestHiveShell shell, String tableName, Schema schema, FileFormat fileFormat,\n+      List<Record> records) throws IOException {\n+    createIcebergTable(shell.getHiveConf(), tableName, schema, fileFormat, records);\n+    String createHiveSQL = createHiveTableSQL(TableIdentifier.of(\"default\", tableName));\n+    if (createHiveSQL != null) {\n+      shell.executeStatement(createHiveSQL);\n+    }\n+  }\n+\n+  /**\n+   * Creates a Hive test table. Creates the Iceberg table/data and creates the corresponding Hive table as well when", "originalCommit": "fa0ccf062474b60a08a65ccbbbc513531c3dacda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU3NTA2Mw==", "url": "https://github.com/apache/iceberg/pull/1840#discussion_r533575063", "bodyText": "Changed the javadoc", "author": "pvary", "createdAt": "2020-12-01T17:03:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2MTI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "35064f10762f4663ce5562013847a525f61a0259", "chunk": "diff --git a/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java b/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java\nindex 743384a23..9e1a436d1 100644\n--- a/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java\n+++ b/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java\n\n@@ -94,11 +95,13 @@ abstract class TestTables {\n   /**\n    * If creating the Hive table independently is needed for the given Catalog then this should return the Hive SQL\n    * string which is needed to be executed.\n-   * @param identifier The table identifier (the namespace should be \"default\")\n+   * @param identifier The table identifier (the namespace should be non-empty and single level)\n    * @return The SQL string - which should be executed, null - if it is not needed.\n    */\n   public String createHiveTableSQL(TableIdentifier identifier) {\n-    return String.format(\"CREATE TABLE default.%s STORED BY '%s' %s\", identifier.name(),\n+    Preconditions.checkArgument(!identifier.namespace().isEmpty(), \"Namespace should not be empty\");\n+    Preconditions.checkArgument(identifier.namespace().levels().length == 1, \"Namespace should be single level\");\n+    return String.format(\"CREATE TABLE %s.%s STORED BY '%s' %s\", identifier.namespace(), identifier.name(),\n         HiveIcebergStorageHandler.class.getName(), locationForCreateTableSQL(identifier));\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2MzA3Mg==", "url": "https://github.com/apache/iceberg/pull/1840#discussion_r533363072", "bodyText": "quick question: shouldn't we allow to pass in a custom database name via identifier.namespace()? any reason we have to force \"default\"?", "author": "marton-bod", "createdAt": "2020-12-01T12:13:31Z", "path": "mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java", "diffHunk": "@@ -83,12 +92,107 @@ public Tables tables() {\n   public abstract String locationForCreateTableSQL(TableIdentifier identifier);\n \n   /**\n-   * If the {@link Catalogs#LOCATION} is needed for {@link Catalogs#loadTable(Configuration, Properties)} then this\n-   * method should provide the location string. It should return <code>null</code> if the location is not needed.\n-   * @param identifier The table identifier\n-   * @return The location string for loadTable operation\n+   * If creating the Hive table independently is needed for the given Catalog then this should return the Hive SQL\n+   * string which is needed to be executed.\n+   * @param identifier The table identifier (the namespace should be \"default\")\n+   * @return The SQL string - which should be executed, null - if it is not needed.\n+   */\n+  public String createHiveTableSQL(TableIdentifier identifier) {\n+    return String.format(\"CREATE TABLE default.%s STORED BY '%s' %s\", identifier.name(),", "originalCommit": "fa0ccf062474b60a08a65ccbbbc513531c3dacda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU3NTMwNA==", "url": "https://github.com/apache/iceberg/pull/1840#discussion_r533575304", "bodyText": "Added the possibility", "author": "pvary", "createdAt": "2020-12-01T17:04:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2MzA3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "35064f10762f4663ce5562013847a525f61a0259", "chunk": "diff --git a/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java b/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java\nindex 743384a23..9e1a436d1 100644\n--- a/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java\n+++ b/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java\n\n@@ -94,11 +95,13 @@ abstract class TestTables {\n   /**\n    * If creating the Hive table independently is needed for the given Catalog then this should return the Hive SQL\n    * string which is needed to be executed.\n-   * @param identifier The table identifier (the namespace should be \"default\")\n+   * @param identifier The table identifier (the namespace should be non-empty and single level)\n    * @return The SQL string - which should be executed, null - if it is not needed.\n    */\n   public String createHiveTableSQL(TableIdentifier identifier) {\n-    return String.format(\"CREATE TABLE default.%s STORED BY '%s' %s\", identifier.name(),\n+    Preconditions.checkArgument(!identifier.namespace().isEmpty(), \"Namespace should not be empty\");\n+    Preconditions.checkArgument(identifier.namespace().levels().length == 1, \"Namespace should be single level\");\n+    return String.format(\"CREATE TABLE %s.%s STORED BY '%s' %s\", identifier.namespace(), identifier.name(),\n         HiveIcebergStorageHandler.class.getName(), locationForCreateTableSQL(identifier));\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2NDIyMg==", "url": "https://github.com/apache/iceberg/pull/1840#discussion_r533364222", "bodyText": "I think this string will never be null", "author": "marton-bod", "createdAt": "2020-12-01T12:15:34Z", "path": "mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java", "diffHunk": "@@ -83,12 +92,107 @@ public Tables tables() {\n   public abstract String locationForCreateTableSQL(TableIdentifier identifier);\n \n   /**\n-   * If the {@link Catalogs#LOCATION} is needed for {@link Catalogs#loadTable(Configuration, Properties)} then this\n-   * method should provide the location string. It should return <code>null</code> if the location is not needed.\n-   * @param identifier The table identifier\n-   * @return The location string for loadTable operation\n+   * If creating the Hive table independently is needed for the given Catalog then this should return the Hive SQL\n+   * string which is needed to be executed.\n+   * @param identifier The table identifier (the namespace should be \"default\")\n+   * @return The SQL string - which should be executed, null - if it is not needed.\n+   */\n+  public String createHiveTableSQL(TableIdentifier identifier) {\n+    return String.format(\"CREATE TABLE default.%s STORED BY '%s' %s\", identifier.name(),\n+        HiveIcebergStorageHandler.class.getName(), locationForCreateTableSQL(identifier));\n+  }\n+\n+  /**\n+   * Loads the given table from the actual catalog. Overridden by HadoopTables, since the parameter of the\n+   * {@link Tables#load(String)} should be the full path of the table metadata directory\n+   * @param identifier The table we want to load\n+   * @return The Table loaded from the Catalog\n    */\n-  public abstract String loadLocation(TableIdentifier identifier);\n+  public Table loadTable(TableIdentifier identifier) {\n+    return tables.load(identifier.toString());\n+  }\n+\n+  /**\n+   * Creates a Hive test table. Creates the Iceberg table/data and creates the corresponding Hive table as well when\n+   * needed. The table will be in the 'default' database.\n+   * @param shell The HiveShell used for Hive table creation\n+   * @param tableName The name of the test table\n+   * @param schema The schema used for the table creation\n+   * @param fileFormat The file format used for writing the data\n+   * @param records The records with which the table is populated\n+   * @throws IOException If there is an error writing data\n+   */\n+  public void createTable(TestHiveShell shell, String tableName, Schema schema, FileFormat fileFormat,\n+      List<Record> records) throws IOException {\n+    createIcebergTable(shell.getHiveConf(), tableName, schema, fileFormat, records);\n+    String createHiveSQL = createHiveTableSQL(TableIdentifier.of(\"default\", tableName));\n+    if (createHiveSQL != null) {", "originalCommit": "fa0ccf062474b60a08a65ccbbbc513531c3dacda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU3NTcyMA==", "url": "https://github.com/apache/iceberg/pull/1840#discussion_r533575720", "bodyText": "This will be null for HiveCatalog where we do not have to run SQL after creating the Iceberg table", "author": "pvary", "createdAt": "2020-12-01T17:04:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2NDIyMg=="}], "type": "inlineReview", "revised_code": {"commit": "35064f10762f4663ce5562013847a525f61a0259", "chunk": "diff --git a/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java b/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java\nindex 743384a23..9e1a436d1 100644\n--- a/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java\n+++ b/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java\n\n@@ -94,11 +95,13 @@ abstract class TestTables {\n   /**\n    * If creating the Hive table independently is needed for the given Catalog then this should return the Hive SQL\n    * string which is needed to be executed.\n-   * @param identifier The table identifier (the namespace should be \"default\")\n+   * @param identifier The table identifier (the namespace should be non-empty and single level)\n    * @return The SQL string - which should be executed, null - if it is not needed.\n    */\n   public String createHiveTableSQL(TableIdentifier identifier) {\n-    return String.format(\"CREATE TABLE default.%s STORED BY '%s' %s\", identifier.name(),\n+    Preconditions.checkArgument(!identifier.namespace().isEmpty(), \"Namespace should not be empty\");\n+    Preconditions.checkArgument(identifier.namespace().levels().length == 1, \"Namespace should be single level\");\n+    return String.format(\"CREATE TABLE %s.%s STORED BY '%s' %s\", identifier.namespace(), identifier.name(),\n         HiveIcebergStorageHandler.class.getName(), locationForCreateTableSQL(identifier));\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2NDk1OQ==", "url": "https://github.com/apache/iceberg/pull/1840#discussion_r533364959", "bodyText": "it doesn't seem like it will give back null in any scenario - when should it?", "author": "marton-bod", "createdAt": "2020-12-01T12:16:51Z", "path": "mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java", "diffHunk": "@@ -83,12 +92,107 @@ public Tables tables() {\n   public abstract String locationForCreateTableSQL(TableIdentifier identifier);\n \n   /**\n-   * If the {@link Catalogs#LOCATION} is needed for {@link Catalogs#loadTable(Configuration, Properties)} then this\n-   * method should provide the location string. It should return <code>null</code> if the location is not needed.\n-   * @param identifier The table identifier\n-   * @return The location string for loadTable operation\n+   * If creating the Hive table independently is needed for the given Catalog then this should return the Hive SQL\n+   * string which is needed to be executed.\n+   * @param identifier The table identifier (the namespace should be \"default\")\n+   * @return The SQL string - which should be executed, null - if it is not needed.", "originalCommit": "fa0ccf062474b60a08a65ccbbbc513531c3dacda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU3NTkxOQ==", "url": "https://github.com/apache/iceberg/pull/1840#discussion_r533575919", "bodyText": "With HiveCatalog", "author": "pvary", "createdAt": "2020-12-01T17:05:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2NDk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU4MDAwMA==", "url": "https://github.com/apache/iceberg/pull/1840#discussion_r533580000", "bodyText": "I see - it's because Hive catalog overrides this method and always gives back null. Just wasn't clear by looking at the base method itself", "author": "marton-bod", "createdAt": "2020-12-01T17:10:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2NDk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk2ODkwNg==", "url": "https://github.com/apache/iceberg/pull/1840#discussion_r533968906", "bodyText": "Updated the comment for clarity.\nThanks for the review!", "author": "pvary", "createdAt": "2020-12-02T08:11:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2NDk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "35064f10762f4663ce5562013847a525f61a0259", "chunk": "diff --git a/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java b/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java\nindex 743384a23..9e1a436d1 100644\n--- a/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java\n+++ b/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java\n\n@@ -94,11 +95,13 @@ abstract class TestTables {\n   /**\n    * If creating the Hive table independently is needed for the given Catalog then this should return the Hive SQL\n    * string which is needed to be executed.\n-   * @param identifier The table identifier (the namespace should be \"default\")\n+   * @param identifier The table identifier (the namespace should be non-empty and single level)\n    * @return The SQL string - which should be executed, null - if it is not needed.\n    */\n   public String createHiveTableSQL(TableIdentifier identifier) {\n-    return String.format(\"CREATE TABLE default.%s STORED BY '%s' %s\", identifier.name(),\n+    Preconditions.checkArgument(!identifier.namespace().isEmpty(), \"Namespace should not be empty\");\n+    Preconditions.checkArgument(identifier.namespace().levels().length == 1, \"Namespace should be single level\");\n+    return String.format(\"CREATE TABLE %s.%s STORED BY '%s' %s\", identifier.namespace(), identifier.name(),\n         HiveIcebergStorageHandler.class.getName(), locationForCreateTableSQL(identifier));\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2Njk4NQ==", "url": "https://github.com/apache/iceberg/pull/1840#discussion_r533366985", "bodyText": "would it make sense to inline the seed variable since it's always 0 in the tests? Having the extra argument makes it harder to parse/eyeball the function calls in tests as well", "author": "marton-bod", "createdAt": "2020-12-01T12:20:20Z", "path": "mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java", "diffHunk": "@@ -83,12 +92,107 @@ public Tables tables() {\n   public abstract String locationForCreateTableSQL(TableIdentifier identifier);\n \n   /**\n-   * If the {@link Catalogs#LOCATION} is needed for {@link Catalogs#loadTable(Configuration, Properties)} then this\n-   * method should provide the location string. It should return <code>null</code> if the location is not needed.\n-   * @param identifier The table identifier\n-   * @return The location string for loadTable operation\n+   * If creating the Hive table independently is needed for the given Catalog then this should return the Hive SQL\n+   * string which is needed to be executed.\n+   * @param identifier The table identifier (the namespace should be \"default\")\n+   * @return The SQL string - which should be executed, null - if it is not needed.\n+   */\n+  public String createHiveTableSQL(TableIdentifier identifier) {\n+    return String.format(\"CREATE TABLE default.%s STORED BY '%s' %s\", identifier.name(),\n+        HiveIcebergStorageHandler.class.getName(), locationForCreateTableSQL(identifier));\n+  }\n+\n+  /**\n+   * Loads the given table from the actual catalog. Overridden by HadoopTables, since the parameter of the\n+   * {@link Tables#load(String)} should be the full path of the table metadata directory\n+   * @param identifier The table we want to load\n+   * @return The Table loaded from the Catalog\n    */\n-  public abstract String loadLocation(TableIdentifier identifier);\n+  public Table loadTable(TableIdentifier identifier) {\n+    return tables.load(identifier.toString());\n+  }\n+\n+  /**\n+   * Creates a Hive test table. Creates the Iceberg table/data and creates the corresponding Hive table as well when\n+   * needed. The table will be in the 'default' database.\n+   * @param shell The HiveShell used for Hive table creation\n+   * @param tableName The name of the test table\n+   * @param schema The schema used for the table creation\n+   * @param fileFormat The file format used for writing the data\n+   * @param records The records with which the table is populated\n+   * @throws IOException If there is an error writing data\n+   */\n+  public void createTable(TestHiveShell shell, String tableName, Schema schema, FileFormat fileFormat,\n+      List<Record> records) throws IOException {\n+    createIcebergTable(shell.getHiveConf(), tableName, schema, fileFormat, records);\n+    String createHiveSQL = createHiveTableSQL(TableIdentifier.of(\"default\", tableName));\n+    if (createHiveSQL != null) {\n+      shell.executeStatement(createHiveSQL);\n+    }\n+  }\n+\n+  /**\n+   * Creates a Hive test table. Creates the Iceberg table/data and creates the corresponding Hive table as well when\n+   * needed. The table will be in the 'default' database.\n+   * @param shell The HiveShell used for Hive table creation\n+   * @param tableName The name of the test table\n+   * @param schema The schema used for the table creation\n+   * @param fileFormat The file format used for writing the data\n+   * @param numRecords The number of records should be generated and stored in the table\n+   * @param seed The seed used for the random record generation\n+   * @throws IOException If there is an error writing data\n+   */\n+  public List<Record> createTableWithGeneratedRecords(TestHiveShell shell, String tableName, Schema schema,\n+      FileFormat fileFormat, int numRecords, long seed) throws IOException {", "originalCommit": "fa0ccf062474b60a08a65ccbbbc513531c3dacda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU3NjAwOA==", "url": "https://github.com/apache/iceberg/pull/1840#discussion_r533576008", "bodyText": "Done", "author": "pvary", "createdAt": "2020-12-01T17:05:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2Njk4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "35064f10762f4663ce5562013847a525f61a0259", "chunk": "diff --git a/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java b/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java\nindex 743384a23..9e1a436d1 100644\n--- a/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java\n+++ b/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java\n\n@@ -94,11 +95,13 @@ abstract class TestTables {\n   /**\n    * If creating the Hive table independently is needed for the given Catalog then this should return the Hive SQL\n    * string which is needed to be executed.\n-   * @param identifier The table identifier (the namespace should be \"default\")\n+   * @param identifier The table identifier (the namespace should be non-empty and single level)\n    * @return The SQL string - which should be executed, null - if it is not needed.\n    */\n   public String createHiveTableSQL(TableIdentifier identifier) {\n-    return String.format(\"CREATE TABLE default.%s STORED BY '%s' %s\", identifier.name(),\n+    Preconditions.checkArgument(!identifier.namespace().isEmpty(), \"Namespace should not be empty\");\n+    Preconditions.checkArgument(identifier.namespace().levels().length == 1, \"Namespace should be single level\");\n+    return String.format(\"CREATE TABLE %s.%s STORED BY '%s' %s\", identifier.namespace(), identifier.name(),\n         HiveIcebergStorageHandler.class.getName(), locationForCreateTableSQL(identifier));\n   }\n \n"}}, {"oid": "35064f10762f4663ce5562013847a525f61a0259", "url": "https://github.com/apache/iceberg/commit/35064f10762f4663ce5562013847a525f61a0259", "message": "Addressed review comments", "committedDate": "2020-12-01T16:52:15Z", "type": "commit"}, {"oid": "d89a253457c3b73d8f43d6943825cd11856d1d4c", "url": "https://github.com/apache/iceberg/commit/d89a253457c3b73d8f43d6943825cd11856d1d4c", "message": "Updated comment for clarity", "committedDate": "2020-12-02T08:10:53Z", "type": "commit"}]}