{"pr_number": 1153, "pr_title": "Flink: Add Avro value reader, writer implementations", "pr_createdAt": "2020-07-01T09:53:47Z", "pr_url": "https://github.com/apache/iceberg/pull/1153", "timeline": [{"oid": "69dc9ab0e20ff7a4714b9f9f38ce52ffc3029e5d", "url": "https://github.com/apache/iceberg/commit/69dc9ab0e20ff7a4714b9f9f38ce52ffc3029e5d", "message": "Flink: Add Avro value reader, writer implementations", "committedDate": "2020-07-01T09:51:29Z", "type": "commit"}, {"oid": "ca598e41fbcfa7fed08aeeec5427590d6f833af1", "url": "https://github.com/apache/iceberg/commit/ca598e41fbcfa7fed08aeeec5427590d6f833af1", "message": "Fix the checkstyles", "committedDate": "2020-07-02T11:28:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNDU2Ng==", "url": "https://github.com/apache/iceberg/pull/1153#discussion_r449234566", "bodyText": "To make sure the projection is done correctly in the record reader, can you add a projection test? Here's the one we use for Iceberg generics and Avro: https://github.com/apache/iceberg/blob/master/data/src/test/java/org/apache/iceberg/data/avro/TestGenericReadProjection.java", "author": "rdblue", "createdAt": "2020-07-02T19:50:32Z", "path": "flink/src/test/java/org/apache/iceberg/flink/data/TestFlinkAvroReaderWriter.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.data;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import org.apache.flink.types.Row;\n+import org.apache.iceberg.Files;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.avro.Avro;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.io.FileAppender;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import static org.apache.iceberg.flink.data.RandomData.COMPLEX_SCHEMA;\n+\n+public class TestFlinkAvroReaderWriter {", "originalCommit": "ca598e41fbcfa7fed08aeeec5427590d6f833af1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNTg3MA==", "url": "https://github.com/apache/iceberg/pull/1153#discussion_r449235870", "bodyText": "The implementation looks fine since it relies on the parent class, but this would help catch regressions in the future.", "author": "rdblue", "createdAt": "2020-07-02T19:53:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNDU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM0OTk1Mg==", "url": "https://github.com/apache/iceberg/pull/1153#discussion_r449349952", "bodyText": "Thanks for reminding,  will address this in the next patch.", "author": "openinx", "createdAt": "2020-07-03T02:47:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNDU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3NTI5OA==", "url": "https://github.com/apache/iceberg/pull/1153#discussion_r449475298", "bodyText": "@rdblue I've addressed this by porting the unit test in TestGenericReadProjection to flink avro reader writer. Thanks.", "author": "openinx", "createdAt": "2020-07-03T09:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNDU2Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNDg0Mg==", "url": "https://github.com/apache/iceberg/pull/1153#discussion_r449234842", "bodyText": "How many records have you tested with?", "author": "rdblue", "createdAt": "2020-07-02T19:51:10Z", "path": "flink/src/test/java/org/apache/iceberg/flink/data/TestFlinkAvroReaderWriter.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.data;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import org.apache.flink.types.Row;\n+import org.apache.iceberg.Files;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.avro.Avro;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.io.FileAppender;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import static org.apache.iceberg.flink.data.RandomData.COMPLEX_SCHEMA;\n+\n+public class TestFlinkAvroReaderWriter {\n+  private static final int NUM_RECORDS = 20_000;", "originalCommit": "ca598e41fbcfa7fed08aeeec5427590d6f833af1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM1MzQ5NA==", "url": "https://github.com/apache/iceberg/pull/1153#discussion_r449353494", "bodyText": "I ran 1_000_000 rows under my host, it all passed.  Seems works fine.", "author": "openinx", "createdAt": "2020-07-03T03:04:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNDg0Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNTQ3Nw==", "url": "https://github.com/apache/iceberg/pull/1153#discussion_r449235477", "bodyText": "Should setWriter be used in setSchema above for this class as well?", "author": "rdblue", "createdAt": "2020-07-02T19:52:37Z", "path": "core/src/main/java/org/apache/iceberg/data/avro/DataWriter.java", "diffHunk": "@@ -50,13 +50,17 @@ public void setSchema(Schema schema) {\n     this.writer = (ValueWriter<T>) AvroSchemaVisitor.visit(schema, new WriteBuilder());\n   }\n \n+  protected void setWriter(ValueWriter<T> writer) {\n+    this.writer = writer;", "originalCommit": "ca598e41fbcfa7fed08aeeec5427590d6f833af1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM0ODI3OA==", "url": "https://github.com/apache/iceberg/pull/1153#discussion_r449348278", "bodyText": "Fine,  let address it in the next patch. Thanks.", "author": "openinx", "createdAt": "2020-07-03T02:39:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNTQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM5ODUzOA==", "url": "https://github.com/apache/iceberg/pull/1153#discussion_r449398538", "bodyText": "The setWriter can be removed now in the new patch because we don't need to expose it in new way.", "author": "openinx", "createdAt": "2020-07-03T06:27:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNTQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "576a47d66670e1bdc7a7e85bc0095f4874645a26", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/data/avro/DataWriter.java b/core/src/main/java/org/apache/iceberg/data/avro/DataWriter.java\nindex 6b8f7008..4765568a 100644\n--- a/core/src/main/java/org/apache/iceberg/data/avro/DataWriter.java\n+++ b/core/src/main/java/org/apache/iceberg/data/avro/DataWriter.java\n\n@@ -47,7 +47,8 @@ public class DataWriter<T> implements DatumWriter<T> {\n   @Override\n   @SuppressWarnings(\"unchecked\")\n   public void setSchema(Schema schema) {\n-    this.writer = (ValueWriter<T>) AvroSchemaVisitor.visit(schema, new WriteBuilder());\n+    ValueWriter<T> newWriter = (ValueWriter<T>) AvroSchemaVisitor.visit(schema, new WriteBuilder());\n+    setWriter(newWriter);\n   }\n \n   protected void setWriter(ValueWriter<T> writer) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNjIyNQ==", "url": "https://github.com/apache/iceberg/pull/1153#discussion_r449236225", "bodyText": "Can we remove the constructor since it is empty?", "author": "rdblue", "createdAt": "2020-07-02T19:54:24Z", "path": "core/src/main/java/org/apache/iceberg/data/avro/DataWriter.java", "diffHunk": "@@ -50,13 +50,17 @@ public void setSchema(Schema schema) {\n     this.writer = (ValueWriter<T>) AvroSchemaVisitor.visit(schema, new WriteBuilder());\n   }\n \n+  protected void setWriter(ValueWriter<T> writer) {\n+    this.writer = writer;\n+  }\n+\n   @Override\n   public void write(T datum, Encoder out) throws IOException {\n     writer.write(datum, out);\n   }\n \n-  private static class WriteBuilder extends AvroSchemaVisitor<ValueWriter<?>> {\n-    private WriteBuilder() {\n+  protected static class WriteBuilder extends AvroSchemaVisitor<ValueWriter<?>> {\n+    protected WriteBuilder() {", "originalCommit": "ca598e41fbcfa7fed08aeeec5427590d6f833af1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM0OTIxNQ==", "url": "https://github.com/apache/iceberg/pull/1153#discussion_r449349215", "bodyText": "The current FlinkAvroWriter#WriterBuilder is extending the DataWriter#WriteBuilder , so I marked this constructor as protected before, seems I could also abstract the generic codes in a BaseDataWriter so that we don't need to expose the WriterBuilder to its subclass then. (similar with the 41cc133).  let me address this in the next patch.", "author": "openinx", "createdAt": "2020-07-03T02:43:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNjIyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "576a47d66670e1bdc7a7e85bc0095f4874645a26", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/data/avro/DataWriter.java b/core/src/main/java/org/apache/iceberg/data/avro/DataWriter.java\nindex 6b8f7008..4765568a 100644\n--- a/core/src/main/java/org/apache/iceberg/data/avro/DataWriter.java\n+++ b/core/src/main/java/org/apache/iceberg/data/avro/DataWriter.java\n\n@@ -47,7 +47,8 @@ public class DataWriter<T> implements DatumWriter<T> {\n   @Override\n   @SuppressWarnings(\"unchecked\")\n   public void setSchema(Schema schema) {\n-    this.writer = (ValueWriter<T>) AvroSchemaVisitor.visit(schema, new WriteBuilder());\n+    ValueWriter<T> newWriter = (ValueWriter<T>) AvroSchemaVisitor.visit(schema, new WriteBuilder());\n+    setWriter(newWriter);\n   }\n \n   protected void setWriter(ValueWriter<T> writer) {\n"}}, {"oid": "576a47d66670e1bdc7a7e85bc0095f4874645a26", "url": "https://github.com/apache/iceberg/commit/576a47d66670e1bdc7a7e85bc0095f4874645a26", "message": "Make the ReaderBuilder & WriterBuilder private access and provid the avro project unit tests.", "committedDate": "2020-07-03T05:06:47Z", "type": "commit"}, {"oid": "61584831bc5d5a60179a99dc6f6e88c877f7f756", "url": "https://github.com/apache/iceberg/commit/61584831bc5d5a60179a99dc6f6e88c877f7f756", "message": "More unit tests.", "committedDate": "2020-07-03T09:12:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY0OTA5Nw==", "url": "https://github.com/apache/iceberg/pull/1153#discussion_r449649097", "bodyText": "Looks good. We may want to also apply these cases to ORC and Parquet also.", "author": "rdblue", "createdAt": "2020-07-03T16:13:25Z", "path": "flink/src/test/java/org/apache/iceberg/flink/data/TestRowProjection.java", "diffHunk": "@@ -0,0 +1,570 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.data;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.flink.types.Row;\n+import org.apache.iceberg.Files;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.avro.Avro;\n+import org.apache.iceberg.io.FileAppender;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Iterables;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.apache.iceberg.types.Comparators;\n+import org.apache.iceberg.types.Types;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class TestRowProjection {", "originalCommit": "61584831bc5d5a60179a99dc6f6e88c877f7f756", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}