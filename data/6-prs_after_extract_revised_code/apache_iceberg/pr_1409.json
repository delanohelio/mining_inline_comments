{"pr_number": 1409, "pr_title": "API: Introduce a builder in Catalog", "pr_createdAt": "2020-09-01T16:04:22Z", "pr_url": "https://github.com/apache/iceberg/pull/1409", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5NzA3NA==", "url": "https://github.com/apache/iceberg/pull/1409#discussion_r481397074", "bodyText": "In addition, we probably need to expose withProperties that accepts a map.", "author": "aokolnychyi", "createdAt": "2020-09-01T19:59:49Z", "path": "api/src/main/java/org/apache/iceberg/catalog/Catalog.java", "diffHunk": "@@ -303,4 +304,105 @@ default boolean dropTable(TableIdentifier identifier) {\n    * @throws NoSuchTableException if the table does not exist\n    */\n   Table loadTable(TableIdentifier identifier);\n+\n+  /**\n+   * Instantiate a builder to create a table.\n+   *\n+   * @param identifier a table identifier\n+   * @param schema a schema\n+   * @return the builder to create a table\n+   */\n+  default Builder newTable(TableIdentifier identifier, Schema schema) {\n+    return new Builder(this, identifier, schema);\n+  }\n+\n+  /**\n+   * A builder used to create valid {@link Table tables}.\n+   * <p>\n+   * Call {@link #newTable(TableIdentifier, Schema)} to create a new builder.\n+   */\n+  class Builder {\n+    private final Catalog catalog;\n+    private final TableIdentifier identifier;\n+    private final Schema schema;\n+    private final Map<String, String> properties = new HashMap<>();\n+    private PartitionSpec spec = PartitionSpec.unpartitioned();\n+    private String location = null;\n+\n+    private Builder(Catalog catalog, TableIdentifier identifier, Schema schema) {\n+      this.catalog = catalog;\n+      this.identifier = identifier;\n+      this.schema = schema;\n+    }\n+\n+    /**\n+     * Sets a partition spec for the table.\n+     *\n+     * @param newSpec a partition spec\n+     * @return this for method chaining\n+     */\n+    public Builder withPartitionSpec(PartitionSpec newSpec) {\n+      this.spec = newSpec;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets a location for the table.\n+     *\n+     * @param newLocation a location\n+     * @return this for method chaining\n+     */\n+    public Builder withLocation(String newLocation) {\n+      this.location = newLocation;\n+      return this;\n+    }\n+\n+    /**\n+     * Adds a key/value property to the table.\n+     *\n+     * @param key a key\n+     * @param value a value\n+     * @return this for method chaining\n+     */\n+    public Builder withProperty(String key, String value) {", "originalCommit": "44bfef1ba05191892e2862d82504182ac7995ac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0NjAyMQ==", "url": "https://github.com/apache/iceberg/pull/1409#discussion_r483046021", "bodyText": "Done.", "author": "aokolnychyi", "createdAt": "2020-09-03T15:00:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5NzA3NA=="}], "type": "inlineReview", "revised_code": {"commit": "24fed04933f3dbca6322adb12cac5e0c4c36183a", "chunk": "diff --git a/api/src/main/java/org/apache/iceberg/catalog/Catalog.java b/api/src/main/java/org/apache/iceberg/catalog/Catalog.java\nindex 1eed3cf58..709c871d4 100644\n--- a/api/src/main/java/org/apache/iceberg/catalog/Catalog.java\n+++ b/api/src/main/java/org/apache/iceberg/catalog/Catalog.java\n\n@@ -306,103 +305,81 @@ public interface Catalog {\n   Table loadTable(TableIdentifier identifier);\n \n   /**\n-   * Instantiate a builder to create a table.\n+   * Instantiate a builder to either create a table or start a create/replace transaction.\n    *\n    * @param identifier a table identifier\n    * @param schema a schema\n-   * @return the builder to create a table\n+   * @return the builder to create a table or start a create/replace transaction\n    */\n-  default Builder newTable(TableIdentifier identifier, Schema schema) {\n-    return new Builder(this, identifier, schema);\n+  default TableBuilder buildTable(TableIdentifier identifier, Schema schema) {\n+    throw new UnsupportedOperationException(this.getClass().getName() + \" does not implement buildTable\");\n   }\n \n   /**\n-   * A builder used to create valid {@link Table tables}.\n+   * A builder used to create valid {@link Table tables} or start create/replace {@link Transaction transactions}.\n    * <p>\n-   * Call {@link #newTable(TableIdentifier, Schema)} to create a new builder.\n+   * Call {@link #buildTable(TableIdentifier, Schema)} to create a new builder.\n    */\n-  class Builder {\n-    private final Catalog catalog;\n-    private final TableIdentifier identifier;\n-    private final Schema schema;\n-    private final Map<String, String> properties = new HashMap<>();\n-    private PartitionSpec spec = PartitionSpec.unpartitioned();\n-    private String location = null;\n-\n-    private Builder(Catalog catalog, TableIdentifier identifier, Schema schema) {\n-      this.catalog = catalog;\n-      this.identifier = identifier;\n-      this.schema = schema;\n-    }\n-\n+  interface TableBuilder {\n     /**\n      * Sets a partition spec for the table.\n      *\n-     * @param newSpec a partition spec\n+     * @param spec a partition spec\n      * @return this for method chaining\n      */\n-    public Builder withPartitionSpec(PartitionSpec newSpec) {\n-      this.spec = newSpec;\n-      return this;\n-    }\n+    TableBuilder withPartitionSpec(PartitionSpec spec);\n \n     /**\n      * Sets a location for the table.\n      *\n-     * @param newLocation a location\n+     * @param location a location\n      * @return this for method chaining\n      */\n-    public Builder withLocation(String newLocation) {\n-      this.location = newLocation;\n-      return this;\n-    }\n+    TableBuilder withLocation(String location);\n+\n+    /**\n+     * Adds key/value properties to the table.\n+     *\n+     * @param properties key/value properties\n+     * @return this for method chaining\n+     */\n+    TableBuilder withProperties(Map<String, String> properties);\n \n     /**\n      * Adds a key/value property to the table.\n      *\n-     * @param key a key\n+     * @param key   a key\n      * @param value a value\n      * @return this for method chaining\n      */\n-    public Builder withProperty(String key, String value) {\n-      properties.put(key, value);\n-      return this;\n-    }\n+    TableBuilder withProperty(String key, String value);\n \n     /**\n      * Creates the table.\n      *\n      * @return the created table\n      */\n-    public Table create() {\n-      return catalog.createTable(identifier, schema, spec, location, properties);\n-    }\n+    Table create();\n \n     /**\n      * Starts a transaction to create the table.\n      *\n      * @return the {@link Transaction} to create the table\n      */\n-    public Transaction createTransaction() {\n-      return catalog.newCreateTableTransaction(identifier, schema, spec, location, properties);\n-    }\n+    Transaction createTransaction();\n \n     /**\n      * Starts a transaction to replace the table.\n      *\n      * @return the {@link Transaction} to replace the table\n      */\n-    public Transaction replaceTransaction() {\n-      return catalog.newReplaceTableTransaction(identifier, schema, spec, location, properties, false);\n-    }\n+    Transaction replaceTransaction();\n \n     /**\n      * Starts a transaction to create or replace the table.\n      *\n      * @return the {@link Transaction} to create or replace the table\n      */\n-    public Transaction createOrReplaceTransaction() {\n-      return catalog.newReplaceTableTransaction(identifier, schema, spec, location, properties, true);\n-    }\n+    Transaction createOrReplaceTransaction();\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwNzQ1Ng==", "url": "https://github.com/apache/iceberg/pull/1409#discussion_r481407456", "bodyText": "What about ImmutableMap.Builder?", "author": "rdblue", "createdAt": "2020-09-01T20:20:10Z", "path": "api/src/main/java/org/apache/iceberg/catalog/Catalog.java", "diffHunk": "@@ -303,4 +304,105 @@ default boolean dropTable(TableIdentifier identifier) {\n    * @throws NoSuchTableException if the table does not exist\n    */\n   Table loadTable(TableIdentifier identifier);\n+\n+  /**\n+   * Instantiate a builder to create a table.\n+   *\n+   * @param identifier a table identifier\n+   * @param schema a schema\n+   * @return the builder to create a table\n+   */\n+  default Builder newTable(TableIdentifier identifier, Schema schema) {\n+    return new Builder(this, identifier, schema);\n+  }\n+\n+  /**\n+   * A builder used to create valid {@link Table tables}.\n+   * <p>\n+   * Call {@link #newTable(TableIdentifier, Schema)} to create a new builder.\n+   */\n+  class Builder {\n+    private final Catalog catalog;\n+    private final TableIdentifier identifier;\n+    private final Schema schema;\n+    private final Map<String, String> properties = new HashMap<>();", "originalCommit": "44bfef1ba05191892e2862d82504182ac7995ac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0NTkwNA==", "url": "https://github.com/apache/iceberg/pull/1409#discussion_r483045904", "bodyText": "Done.", "author": "aokolnychyi", "createdAt": "2020-09-03T14:59:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwNzQ1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "24fed04933f3dbca6322adb12cac5e0c4c36183a", "chunk": "diff --git a/api/src/main/java/org/apache/iceberg/catalog/Catalog.java b/api/src/main/java/org/apache/iceberg/catalog/Catalog.java\nindex 1eed3cf58..709c871d4 100644\n--- a/api/src/main/java/org/apache/iceberg/catalog/Catalog.java\n+++ b/api/src/main/java/org/apache/iceberg/catalog/Catalog.java\n\n@@ -306,103 +305,81 @@ public interface Catalog {\n   Table loadTable(TableIdentifier identifier);\n \n   /**\n-   * Instantiate a builder to create a table.\n+   * Instantiate a builder to either create a table or start a create/replace transaction.\n    *\n    * @param identifier a table identifier\n    * @param schema a schema\n-   * @return the builder to create a table\n+   * @return the builder to create a table or start a create/replace transaction\n    */\n-  default Builder newTable(TableIdentifier identifier, Schema schema) {\n-    return new Builder(this, identifier, schema);\n+  default TableBuilder buildTable(TableIdentifier identifier, Schema schema) {\n+    throw new UnsupportedOperationException(this.getClass().getName() + \" does not implement buildTable\");\n   }\n \n   /**\n-   * A builder used to create valid {@link Table tables}.\n+   * A builder used to create valid {@link Table tables} or start create/replace {@link Transaction transactions}.\n    * <p>\n-   * Call {@link #newTable(TableIdentifier, Schema)} to create a new builder.\n+   * Call {@link #buildTable(TableIdentifier, Schema)} to create a new builder.\n    */\n-  class Builder {\n-    private final Catalog catalog;\n-    private final TableIdentifier identifier;\n-    private final Schema schema;\n-    private final Map<String, String> properties = new HashMap<>();\n-    private PartitionSpec spec = PartitionSpec.unpartitioned();\n-    private String location = null;\n-\n-    private Builder(Catalog catalog, TableIdentifier identifier, Schema schema) {\n-      this.catalog = catalog;\n-      this.identifier = identifier;\n-      this.schema = schema;\n-    }\n-\n+  interface TableBuilder {\n     /**\n      * Sets a partition spec for the table.\n      *\n-     * @param newSpec a partition spec\n+     * @param spec a partition spec\n      * @return this for method chaining\n      */\n-    public Builder withPartitionSpec(PartitionSpec newSpec) {\n-      this.spec = newSpec;\n-      return this;\n-    }\n+    TableBuilder withPartitionSpec(PartitionSpec spec);\n \n     /**\n      * Sets a location for the table.\n      *\n-     * @param newLocation a location\n+     * @param location a location\n      * @return this for method chaining\n      */\n-    public Builder withLocation(String newLocation) {\n-      this.location = newLocation;\n-      return this;\n-    }\n+    TableBuilder withLocation(String location);\n+\n+    /**\n+     * Adds key/value properties to the table.\n+     *\n+     * @param properties key/value properties\n+     * @return this for method chaining\n+     */\n+    TableBuilder withProperties(Map<String, String> properties);\n \n     /**\n      * Adds a key/value property to the table.\n      *\n-     * @param key a key\n+     * @param key   a key\n      * @param value a value\n      * @return this for method chaining\n      */\n-    public Builder withProperty(String key, String value) {\n-      properties.put(key, value);\n-      return this;\n-    }\n+    TableBuilder withProperty(String key, String value);\n \n     /**\n      * Creates the table.\n      *\n      * @return the created table\n      */\n-    public Table create() {\n-      return catalog.createTable(identifier, schema, spec, location, properties);\n-    }\n+    Table create();\n \n     /**\n      * Starts a transaction to create the table.\n      *\n      * @return the {@link Transaction} to create the table\n      */\n-    public Transaction createTransaction() {\n-      return catalog.newCreateTableTransaction(identifier, schema, spec, location, properties);\n-    }\n+    Transaction createTransaction();\n \n     /**\n      * Starts a transaction to replace the table.\n      *\n      * @return the {@link Transaction} to replace the table\n      */\n-    public Transaction replaceTransaction() {\n-      return catalog.newReplaceTableTransaction(identifier, schema, spec, location, properties, false);\n-    }\n+    Transaction replaceTransaction();\n \n     /**\n      * Starts a transaction to create or replace the table.\n      *\n      * @return the {@link Transaction} to create or replace the table\n      */\n-    public Transaction createOrReplaceTransaction() {\n-      return catalog.newReplaceTableTransaction(identifier, schema, spec, location, properties, true);\n-    }\n+    Transaction createOrReplaceTransaction();\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwODQ1Mw==", "url": "https://github.com/apache/iceberg/pull/1409#discussion_r481408453", "bodyText": "What about buildTable instead? This doesn't really return a table, it returns a builder that will create either a Table or a Transaction.\nWe may also want to mention in Javadoc that this builder is used to either create a table or start a create or replace transaction.", "author": "rdblue", "createdAt": "2020-09-01T20:21:59Z", "path": "api/src/main/java/org/apache/iceberg/catalog/Catalog.java", "diffHunk": "@@ -303,4 +304,105 @@ default boolean dropTable(TableIdentifier identifier) {\n    * @throws NoSuchTableException if the table does not exist\n    */\n   Table loadTable(TableIdentifier identifier);\n+\n+  /**\n+   * Instantiate a builder to create a table.\n+   *\n+   * @param identifier a table identifier\n+   * @param schema a schema\n+   * @return the builder to create a table\n+   */\n+  default Builder newTable(TableIdentifier identifier, Schema schema) {", "originalCommit": "44bfef1ba05191892e2862d82504182ac7995ac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0NTgyMg==", "url": "https://github.com/apache/iceberg/pull/1409#discussion_r483045822", "bodyText": "Done.", "author": "aokolnychyi", "createdAt": "2020-09-03T14:59:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwODQ1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "24fed04933f3dbca6322adb12cac5e0c4c36183a", "chunk": "diff --git a/api/src/main/java/org/apache/iceberg/catalog/Catalog.java b/api/src/main/java/org/apache/iceberg/catalog/Catalog.java\nindex 1eed3cf58..709c871d4 100644\n--- a/api/src/main/java/org/apache/iceberg/catalog/Catalog.java\n+++ b/api/src/main/java/org/apache/iceberg/catalog/Catalog.java\n\n@@ -306,103 +305,81 @@ public interface Catalog {\n   Table loadTable(TableIdentifier identifier);\n \n   /**\n-   * Instantiate a builder to create a table.\n+   * Instantiate a builder to either create a table or start a create/replace transaction.\n    *\n    * @param identifier a table identifier\n    * @param schema a schema\n-   * @return the builder to create a table\n+   * @return the builder to create a table or start a create/replace transaction\n    */\n-  default Builder newTable(TableIdentifier identifier, Schema schema) {\n-    return new Builder(this, identifier, schema);\n+  default TableBuilder buildTable(TableIdentifier identifier, Schema schema) {\n+    throw new UnsupportedOperationException(this.getClass().getName() + \" does not implement buildTable\");\n   }\n \n   /**\n-   * A builder used to create valid {@link Table tables}.\n+   * A builder used to create valid {@link Table tables} or start create/replace {@link Transaction transactions}.\n    * <p>\n-   * Call {@link #newTable(TableIdentifier, Schema)} to create a new builder.\n+   * Call {@link #buildTable(TableIdentifier, Schema)} to create a new builder.\n    */\n-  class Builder {\n-    private final Catalog catalog;\n-    private final TableIdentifier identifier;\n-    private final Schema schema;\n-    private final Map<String, String> properties = new HashMap<>();\n-    private PartitionSpec spec = PartitionSpec.unpartitioned();\n-    private String location = null;\n-\n-    private Builder(Catalog catalog, TableIdentifier identifier, Schema schema) {\n-      this.catalog = catalog;\n-      this.identifier = identifier;\n-      this.schema = schema;\n-    }\n-\n+  interface TableBuilder {\n     /**\n      * Sets a partition spec for the table.\n      *\n-     * @param newSpec a partition spec\n+     * @param spec a partition spec\n      * @return this for method chaining\n      */\n-    public Builder withPartitionSpec(PartitionSpec newSpec) {\n-      this.spec = newSpec;\n-      return this;\n-    }\n+    TableBuilder withPartitionSpec(PartitionSpec spec);\n \n     /**\n      * Sets a location for the table.\n      *\n-     * @param newLocation a location\n+     * @param location a location\n      * @return this for method chaining\n      */\n-    public Builder withLocation(String newLocation) {\n-      this.location = newLocation;\n-      return this;\n-    }\n+    TableBuilder withLocation(String location);\n+\n+    /**\n+     * Adds key/value properties to the table.\n+     *\n+     * @param properties key/value properties\n+     * @return this for method chaining\n+     */\n+    TableBuilder withProperties(Map<String, String> properties);\n \n     /**\n      * Adds a key/value property to the table.\n      *\n-     * @param key a key\n+     * @param key   a key\n      * @param value a value\n      * @return this for method chaining\n      */\n-    public Builder withProperty(String key, String value) {\n-      properties.put(key, value);\n-      return this;\n-    }\n+    TableBuilder withProperty(String key, String value);\n \n     /**\n      * Creates the table.\n      *\n      * @return the created table\n      */\n-    public Table create() {\n-      return catalog.createTable(identifier, schema, spec, location, properties);\n-    }\n+    Table create();\n \n     /**\n      * Starts a transaction to create the table.\n      *\n      * @return the {@link Transaction} to create the table\n      */\n-    public Transaction createTransaction() {\n-      return catalog.newCreateTableTransaction(identifier, schema, spec, location, properties);\n-    }\n+    Transaction createTransaction();\n \n     /**\n      * Starts a transaction to replace the table.\n      *\n      * @return the {@link Transaction} to replace the table\n      */\n-    public Transaction replaceTransaction() {\n-      return catalog.newReplaceTableTransaction(identifier, schema, spec, location, properties, false);\n-    }\n+    Transaction replaceTransaction();\n \n     /**\n      * Starts a transaction to create or replace the table.\n      *\n      * @return the {@link Transaction} to create or replace the table\n      */\n-    public Transaction createOrReplaceTransaction() {\n-      return catalog.newReplaceTableTransaction(identifier, schema, spec, location, properties, true);\n-    }\n+    Transaction createOrReplaceTransaction();\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcxNTg2MA==", "url": "https://github.com/apache/iceberg/pull/1409#discussion_r482715860", "bodyText": "I'll need to fix CachingCatalog.", "author": "aokolnychyi", "createdAt": "2020-09-03T05:39:57Z", "path": "api/src/main/java/org/apache/iceberg/catalog/Catalog.java", "diffHunk": "@@ -303,4 +303,83 @@ default boolean dropTable(TableIdentifier identifier) {\n    * @throws NoSuchTableException if the table does not exist\n    */\n   Table loadTable(TableIdentifier identifier);\n+\n+  /**\n+   * Instantiate a builder to either create a table or start a create/replace transaction.\n+   *\n+   * @param identifier a table identifier\n+   * @param schema a schema\n+   * @return the builder to create a table or start a create/replace transaction\n+   */\n+  default TableBuilder buildTable(TableIdentifier identifier, Schema schema) {\n+    throw new UnsupportedOperationException(\"Not implemented: buildTable\");\n+  }\n+\n+  /**\n+   * A builder used to create valid {@link Table tables}.\n+   * <p>\n+   * Call {@link #buildTable(TableIdentifier, Schema)} to create a new builder.\n+   */\n+  interface TableBuilder {", "originalCommit": "206cb0551567bd4b5873cc95f19183fec60b98be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjczNTAwNw==", "url": "https://github.com/apache/iceberg/pull/1409#discussion_r482735007", "bodyText": "Also, we will need to add extra validation to the builder in HadoopCatalog.", "author": "aokolnychyi", "createdAt": "2020-09-03T06:33:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcxNTg2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0MTkzMg==", "url": "https://github.com/apache/iceberg/pull/1409#discussion_r483041932", "bodyText": "Okay, I added validation for HadoopCatalog but we can add support for buildTable in CachingCatalog later. Looks like we will need a separate builder implementation that would delegate to another builder but add caching callbacks.", "author": "aokolnychyi", "createdAt": "2020-09-03T14:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcxNTg2MA=="}], "type": "inlineReview", "revised_code": {"commit": "24fed04933f3dbca6322adb12cac5e0c4c36183a", "chunk": "diff --git a/api/src/main/java/org/apache/iceberg/catalog/Catalog.java b/api/src/main/java/org/apache/iceberg/catalog/Catalog.java\nindex faac95210..709c871d4 100644\n--- a/api/src/main/java/org/apache/iceberg/catalog/Catalog.java\n+++ b/api/src/main/java/org/apache/iceberg/catalog/Catalog.java\n\n@@ -312,11 +312,11 @@ public interface Catalog {\n    * @return the builder to create a table or start a create/replace transaction\n    */\n   default TableBuilder buildTable(TableIdentifier identifier, Schema schema) {\n-    throw new UnsupportedOperationException(\"Not implemented: buildTable\");\n+    throw new UnsupportedOperationException(this.getClass().getName() + \" does not implement buildTable\");\n   }\n \n   /**\n-   * A builder used to create valid {@link Table tables}.\n+   * A builder used to create valid {@link Table tables} or start create/replace {@link Transaction transactions}.\n    * <p>\n    * Call {@link #buildTable(TableIdentifier, Schema)} to create a new builder.\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0MDY5OA==", "url": "https://github.com/apache/iceberg/pull/1409#discussion_r483040698", "bodyText": "I am throwing UnsupportedOperationException to avoid breaking custom catalogs.", "author": "aokolnychyi", "createdAt": "2020-09-03T14:53:06Z", "path": "api/src/main/java/org/apache/iceberg/catalog/Catalog.java", "diffHunk": "@@ -303,4 +303,83 @@ default boolean dropTable(TableIdentifier identifier) {\n    * @throws NoSuchTableException if the table does not exist\n    */\n   Table loadTable(TableIdentifier identifier);\n+\n+  /**\n+   * Instantiate a builder to either create a table or start a create/replace transaction.\n+   *\n+   * @param identifier a table identifier\n+   * @param schema a schema\n+   * @return the builder to create a table or start a create/replace transaction\n+   */\n+  default TableBuilder buildTable(TableIdentifier identifier, Schema schema) {\n+    throw new UnsupportedOperationException(this.getClass().getName() + \" does not implement buildTable\");", "originalCommit": "8febaaaaaf8cdff8a4967a03e187509ffb685dc4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0OTMyMA==", "url": "https://github.com/apache/iceberg/pull/1409#discussion_r483049320", "bodyText": "Sounds good.", "author": "rdblue", "createdAt": "2020-09-03T15:04:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0MDY5OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0MjM2Mg==", "url": "https://github.com/apache/iceberg/pull/1409#discussion_r483042362", "bodyText": "I moved this logic to the builder and use the builder here.", "author": "aokolnychyi", "createdAt": "2020-09-03T14:55:16Z", "path": "core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java", "diffHunk": "@@ -50,30 +50,12 @@ public Table createTable(\n       PartitionSpec spec,\n       String location,\n       Map<String, String> properties) {\n-    Preconditions.checkArgument(isValidIdentifier(identifier), \"Invalid table identifier: %s\", identifier);", "originalCommit": "8febaaaaaf8cdff8a4967a03e187509ffb685dc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0Mjg1MQ==", "url": "https://github.com/apache/iceberg/pull/1409#discussion_r483042851", "bodyText": "We did not validate this for replace transactions before but there should be no harm.", "author": "aokolnychyi", "createdAt": "2020-09-03T14:55:57Z", "path": "core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java", "diffHunk": "@@ -212,6 +183,114 @@ public String toString() {\n \n   protected abstract String defaultWarehouseLocation(TableIdentifier tableIdentifier);\n \n+  protected class BaseMetastoreCatalogTableBuilder implements TableBuilder {\n+    private final TableIdentifier identifier;\n+    private final Schema schema;\n+    private final ImmutableMap.Builder<String, String> propertiesBuilder = ImmutableMap.builder();\n+    private PartitionSpec spec = PartitionSpec.unpartitioned();\n+    private String location = null;\n+\n+    protected BaseMetastoreCatalogTableBuilder(TableIdentifier identifier, Schema schema) {\n+      Preconditions.checkArgument(isValidIdentifier(identifier), \"Invalid table identifier: %s\", identifier);", "originalCommit": "8febaaaaaf8cdff8a4967a03e187509ffb685dc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "24fed04933f3dbca6322adb12cac5e0c4c36183a", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java b/core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java\nindex 2e15e8752..cc039db2a 100644\n--- a/core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java\n+++ b/core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java\n\n@@ -190,7 +196,7 @@ public abstract class BaseMetastoreCatalog implements Catalog {\n     private PartitionSpec spec = PartitionSpec.unpartitioned();\n     private String location = null;\n \n-    protected BaseMetastoreCatalogTableBuilder(TableIdentifier identifier, Schema schema) {\n+    public BaseMetastoreCatalogTableBuilder(TableIdentifier identifier, Schema schema) {\n       Preconditions.checkArgument(isValidIdentifier(identifier), \"Invalid table identifier: %s\", identifier);\n \n       this.identifier = identifier;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0NTQyNg==", "url": "https://github.com/apache/iceberg/pull/1409#discussion_r483045426", "bodyText": "This is now validated in the builder.", "author": "aokolnychyi", "createdAt": "2020-09-03T14:59:22Z", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -156,13 +154,6 @@ protected String name() {\n     return Lists.newArrayList(tblIdents);\n   }\n \n-  @Override\n-  public Table createTable(", "originalCommit": "bc31599ee20c8d4885cb784794100fe266314687", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "24fed04933f3dbca6322adb12cac5e0c4c36183a", "url": "https://github.com/apache/iceberg/commit/24fed04933f3dbca6322adb12cac5e0c4c36183a", "message": "API: Introduce a builder in Catalog", "committedDate": "2020-09-03T15:05:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1MDI1NA==", "url": "https://github.com/apache/iceberg/pull/1409#discussion_r483050254", "bodyText": "Why allow null here? We used to allow null for the parameter because you had to pass it, but now you don't have to pass it so maybe we should reject null?", "author": "RussellSpitzer", "createdAt": "2020-09-03T15:05:53Z", "path": "core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java", "diffHunk": "@@ -218,6 +189,114 @@ public String toString() {\n \n   protected abstract String defaultWarehouseLocation(TableIdentifier tableIdentifier);\n \n+  protected class BaseMetastoreCatalogTableBuilder implements TableBuilder {\n+    private final TableIdentifier identifier;\n+    private final Schema schema;\n+    private final ImmutableMap.Builder<String, String> propertiesBuilder = ImmutableMap.builder();\n+    private PartitionSpec spec = PartitionSpec.unpartitioned();\n+    private String location = null;\n+\n+    public BaseMetastoreCatalogTableBuilder(TableIdentifier identifier, Schema schema) {\n+      Preconditions.checkArgument(isValidIdentifier(identifier), \"Invalid table identifier: %s\", identifier);\n+\n+      this.identifier = identifier;\n+      this.schema = schema;\n+    }\n+\n+    @Override\n+    public TableBuilder withPartitionSpec(PartitionSpec newSpec) {\n+      if (spec != null) {", "originalCommit": "24fed04933f3dbca6322adb12cac5e0c4c36183a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2dcf239827a959e9e4c3a02a9f5e94eaf9db2103", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java b/core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java\nindex cc039db2a..c9dd9349b 100644\n--- a/core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java\n+++ b/core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java\n\n@@ -205,9 +205,7 @@ public abstract class BaseMetastoreCatalog implements Catalog {\n \n     @Override\n     public TableBuilder withPartitionSpec(PartitionSpec newSpec) {\n-      if (spec != null) {\n-        this.spec = newSpec;\n-      }\n+      this.spec = newSpec != null ? newSpec : PartitionSpec.unpartitioned();\n       return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1MDM3NQ==", "url": "https://github.com/apache/iceberg/pull/1409#discussion_r483050375", "bodyText": "Same null question here", "author": "RussellSpitzer", "createdAt": "2020-09-03T15:06:04Z", "path": "core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java", "diffHunk": "@@ -218,6 +189,114 @@ public String toString() {\n \n   protected abstract String defaultWarehouseLocation(TableIdentifier tableIdentifier);\n \n+  protected class BaseMetastoreCatalogTableBuilder implements TableBuilder {\n+    private final TableIdentifier identifier;\n+    private final Schema schema;\n+    private final ImmutableMap.Builder<String, String> propertiesBuilder = ImmutableMap.builder();\n+    private PartitionSpec spec = PartitionSpec.unpartitioned();\n+    private String location = null;\n+\n+    public BaseMetastoreCatalogTableBuilder(TableIdentifier identifier, Schema schema) {\n+      Preconditions.checkArgument(isValidIdentifier(identifier), \"Invalid table identifier: %s\", identifier);\n+\n+      this.identifier = identifier;\n+      this.schema = schema;\n+    }\n+\n+    @Override\n+    public TableBuilder withPartitionSpec(PartitionSpec newSpec) {\n+      if (spec != null) {\n+        this.spec = newSpec;\n+      }\n+      return this;\n+    }\n+\n+    @Override\n+    public TableBuilder withLocation(String newLocation) {\n+      this.location = newLocation;\n+      return this;\n+    }\n+\n+    @Override\n+    public TableBuilder withProperties(Map<String, String> properties) {\n+      if (properties != null) {", "originalCommit": "24fed04933f3dbca6322adb12cac5e0c4c36183a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1ODU2MQ==", "url": "https://github.com/apache/iceberg/pull/1409#discussion_r483058561", "bodyText": "We used to have this because overloaded createTable methods pass null for props:\nMap<String, String> tableProperties = properties != null ? properties : Maps.newHashMap();\n\nSince we are using the builder for the root createTable now, I added handling here too. For partition spec, it is optional but probably makes sense for consistency.", "author": "aokolnychyi", "createdAt": "2020-09-03T15:17:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1MDM3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "2dcf239827a959e9e4c3a02a9f5e94eaf9db2103", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java b/core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java\nindex cc039db2a..c9dd9349b 100644\n--- a/core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java\n+++ b/core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java\n\n@@ -205,9 +205,7 @@ public abstract class BaseMetastoreCatalog implements Catalog {\n \n     @Override\n     public TableBuilder withPartitionSpec(PartitionSpec newSpec) {\n-      if (spec != null) {\n-        this.spec = newSpec;\n-      }\n+      this.spec = newSpec != null ? newSpec : PartitionSpec.unpartitioned();\n       return this;\n     }\n \n"}}, {"oid": "bc9e2f039df516c0b9b56a7a4f8fb70a1dcece9f", "url": "https://github.com/apache/iceberg/commit/bc9e2f039df516c0b9b56a7a4f8fb70a1dcece9f", "message": "API: Introduce a builder in Catalog", "committedDate": "2020-09-03T15:12:37Z", "type": "commit"}, {"oid": "bc9e2f039df516c0b9b56a7a4f8fb70a1dcece9f", "url": "https://github.com/apache/iceberg/commit/bc9e2f039df516c0b9b56a7a4f8fb70a1dcece9f", "message": "API: Introduce a builder in Catalog", "committedDate": "2020-09-03T15:12:37Z", "type": "forcePushed"}, {"oid": "2dcf239827a959e9e4c3a02a9f5e94eaf9db2103", "url": "https://github.com/apache/iceberg/commit/2dcf239827a959e9e4c3a02a9f5e94eaf9db2103", "message": "Fix typo", "committedDate": "2020-09-03T16:18:21Z", "type": "commit"}]}