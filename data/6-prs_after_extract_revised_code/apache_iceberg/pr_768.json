{"pr_number": 768, "pr_title": "Metrics javadoc fixes #767", "pr_createdAt": "2020-02-03T03:09:37Z", "pr_url": "https://github.com/apache/iceberg/pull/768", "timeline": [{"oid": "69f8560b8586c042b5205b2ece55254d31e1d176", "url": "https://github.com/apache/iceberg/commit/69f8560b8586c042b5205b2ece55254d31e1d176", "message": "Adding docs on Metrics", "committedDate": "2020-02-03T03:04:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkwNzY4OA==", "url": "https://github.com/apache/iceberg/pull/768#discussion_r373907688", "bodyText": "Note that in this case valueCounts == nullValueCounts and the count is the same as recordCount.", "author": "edgarRd", "createdAt": "2020-02-03T03:11:36Z", "path": "core/src/test/java/org/apache/iceberg/TestMetrics.java", "diffHunk": "@@ -114,6 +114,56 @@ public abstract File writeRecords(Schema schema, Map<String, String> properties,\n \n   public abstract int splitCount(File parquetFile) throws IOException;\n \n+  @Test\n+  public void testMetricsForRepeatedValues() throws IOException {\n+    Record firstRecord = new Record(AvroSchemaUtil.convert(SIMPLE_SCHEMA.asStruct()));\n+    firstRecord.put(\"booleanCol\", true);\n+    firstRecord.put(\"intCol\", 3);\n+    firstRecord.put(\"longCol\", null);\n+    firstRecord.put(\"floatCol\", 2.0F);\n+    firstRecord.put(\"doubleCol\", 2.0D);\n+    firstRecord.put(\"decimalCol\", new BigDecimal(\"3.50\"));\n+    firstRecord.put(\"stringCol\", \"AAA\");\n+    firstRecord.put(\"dateCol\", 1500);\n+    firstRecord.put(\"timeCol\", 2000L);\n+    firstRecord.put(\"timestampCol\", 0L);\n+    firstRecord.put(\"uuidCol\", uuid);\n+    firstRecord.put(\"fixedCol\", fixed);\n+    firstRecord.put(\"binaryCol\", \"S\".getBytes());\n+    Record secondRecord = new Record(AvroSchemaUtil.convert(SIMPLE_SCHEMA.asStruct()));\n+    secondRecord.put(\"booleanCol\", true);\n+    secondRecord.put(\"intCol\", 3);\n+    secondRecord.put(\"longCol\", null);\n+    secondRecord.put(\"floatCol\", 2.0F);\n+    secondRecord.put(\"doubleCol\", 2.0D);\n+    secondRecord.put(\"decimalCol\", new BigDecimal(\"3.50\"));\n+    secondRecord.put(\"stringCol\", \"AAA\");\n+    secondRecord.put(\"dateCol\", 1500);\n+    secondRecord.put(\"timeCol\", 2000L);\n+    secondRecord.put(\"timestampCol\", 0L);\n+    secondRecord.put(\"uuidCol\", uuid);\n+    secondRecord.put(\"fixedCol\", fixed);\n+    secondRecord.put(\"binaryCol\", \"S\".getBytes());\n+\n+    File recordsFile = writeRecords(SIMPLE_SCHEMA, firstRecord, secondRecord);\n+\n+    Metrics metrics = getMetrics(Files.localInput(recordsFile));\n+    Assert.assertEquals(2L, (long) metrics.recordCount());\n+    assertCounts(1, 2L, 0L, metrics);\n+    assertCounts(2, 2L, 0L, metrics);\n+    assertCounts(3, 2L, 2L, metrics);", "originalCommit": "be1968b8adb934da72735f59c9b0fe225db36325", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "c8d760daa457a15823aeaa7bd1b8a63be17597fd", "url": "https://github.com/apache/iceberg/commit/c8d760daa457a15823aeaa7bd1b8a63be17597fd", "message": "Adding test for repeated values count on metrics", "committedDate": "2020-02-03T03:15:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyODU0Mw==", "url": "https://github.com/apache/iceberg/pull/768#discussion_r374228543", "bodyText": "Nit: should not be left blank or else we get javadoc warnings.", "author": "rdblue", "createdAt": "2020-02-03T17:13:17Z", "path": "api/src/main/java/org/apache/iceberg/Metrics.java", "diffHunk": "@@ -59,26 +62,56 @@ public Metrics(Long rowCount,\n     this.upperBounds = upperBounds;\n   }\n \n+  /**\n+   * Get the number of records (rows) in file.\n+   *\n+   * @return", "originalCommit": "c8d760daa457a15823aeaa7bd1b8a63be17597fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca2859a0998e6052aa4b8f7df76c2a6b1fb5295d", "chunk": "diff --git a/api/src/main/java/org/apache/iceberg/Metrics.java b/api/src/main/java/org/apache/iceberg/Metrics.java\nindex 75b618f6f..e4e0dbc64 100644\n--- a/api/src/main/java/org/apache/iceberg/Metrics.java\n+++ b/api/src/main/java/org/apache/iceberg/Metrics.java\n\n@@ -65,7 +65,7 @@ public class Metrics implements Serializable {\n   /**\n    * Get the number of records (rows) in file.\n    *\n-   * @return\n+   * @return the count of records (rows) in the file as a long\n    */\n   public Long recordCount() {\n     return rowCount;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyODc1Nw==", "url": "https://github.com/apache/iceberg/pull/768#discussion_r374228757", "bodyText": "All values including nulls and NaN?", "author": "rdblue", "createdAt": "2020-02-03T17:13:42Z", "path": "api/src/main/java/org/apache/iceberg/Metrics.java", "diffHunk": "@@ -59,26 +62,56 @@ public Metrics(Long rowCount,\n     this.upperBounds = upperBounds;\n   }\n \n+  /**\n+   * Get the number of records (rows) in file.\n+   *\n+   * @return\n+   */\n   public Long recordCount() {\n     return rowCount;\n   }\n \n+  /**\n+   * Get the number of bytes for all fields in a file.\n+   *\n+   * @return a Map of fieldId to the size in bytes\n+   */\n   public Map<Integer, Long> columnSizes() {\n     return columnSizes;\n   }\n \n+  /**\n+   * Get the number of all values, including null and repeated.\n+   *\n+   * @return a Map of fieldId to the number of all values", "originalCommit": "c8d760daa457a15823aeaa7bd1b8a63be17597fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca2859a0998e6052aa4b8f7df76c2a6b1fb5295d", "chunk": "diff --git a/api/src/main/java/org/apache/iceberg/Metrics.java b/api/src/main/java/org/apache/iceberg/Metrics.java\nindex 75b618f6f..e4e0dbc64 100644\n--- a/api/src/main/java/org/apache/iceberg/Metrics.java\n+++ b/api/src/main/java/org/apache/iceberg/Metrics.java\n\n@@ -65,7 +65,7 @@ public class Metrics implements Serializable {\n   /**\n    * Get the number of records (rows) in file.\n    *\n-   * @return\n+   * @return the count of records (rows) in the file as a long\n    */\n   public Long recordCount() {\n     return rowCount;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyOTAyMQ==", "url": "https://github.com/apache/iceberg/pull/768#discussion_r374229021", "bodyText": "Can we also add a reference to the conversion back to a value? And maybe one to the spec for that conversion?", "author": "rdblue", "createdAt": "2020-02-03T17:14:16Z", "path": "api/src/main/java/org/apache/iceberg/Metrics.java", "diffHunk": "@@ -59,26 +62,56 @@ public Metrics(Long rowCount,\n     this.upperBounds = upperBounds;\n   }\n \n+  /**\n+   * Get the number of records (rows) in file.\n+   *\n+   * @return\n+   */\n   public Long recordCount() {\n     return rowCount;\n   }\n \n+  /**\n+   * Get the number of bytes for all fields in a file.\n+   *\n+   * @return a Map of fieldId to the size in bytes\n+   */\n   public Map<Integer, Long> columnSizes() {\n     return columnSizes;\n   }\n \n+  /**\n+   * Get the number of all values, including null and repeated.\n+   *\n+   * @return a Map of fieldId to the number of all values\n+   */\n   public Map<Integer, Long> valueCounts() {\n     return valueCounts;\n   }\n \n+  /**\n+   * Get the number of null values for all fields in a file.\n+   *\n+   * @return a Map of fieldId to the number of nulls\n+   */\n   public Map<Integer, Long> nullValueCounts() {\n     return nullValueCounts;\n   }\n \n+  /**\n+   * Get the non-null lower bound values for all fields in a file.\n+   *\n+   * @return a Map of fieldId to the lower bound value as a ByteBuffer", "originalCommit": "c8d760daa457a15823aeaa7bd1b8a63be17597fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM1NTAyNA==", "url": "https://github.com/apache/iceberg/pull/768#discussion_r380355024", "bodyText": "Done.", "author": "edgarRd", "createdAt": "2020-02-17T20:25:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyOTAyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ca2859a0998e6052aa4b8f7df76c2a6b1fb5295d", "chunk": "diff --git a/api/src/main/java/org/apache/iceberg/Metrics.java b/api/src/main/java/org/apache/iceberg/Metrics.java\nindex 75b618f6f..e4e0dbc64 100644\n--- a/api/src/main/java/org/apache/iceberg/Metrics.java\n+++ b/api/src/main/java/org/apache/iceberg/Metrics.java\n\n@@ -65,7 +65,7 @@ public class Metrics implements Serializable {\n   /**\n    * Get the number of records (rows) in file.\n    *\n-   * @return\n+   * @return the count of records (rows) in the file as a long\n    */\n   public Long recordCount() {\n     return rowCount;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyOTc1OQ==", "url": "https://github.com/apache/iceberg/pull/768#discussion_r374229759", "bodyText": "What do you want to test with this case?", "author": "rdblue", "createdAt": "2020-02-03T17:15:47Z", "path": "core/src/test/java/org/apache/iceberg/TestMetrics.java", "diffHunk": "@@ -114,6 +114,56 @@ public abstract File writeRecords(Schema schema, Map<String, String> properties,\n \n   public abstract int splitCount(File parquetFile) throws IOException;\n \n+  @Test\n+  public void testMetricsForRepeatedValues() throws IOException {", "originalCommit": "c8d760daa457a15823aeaa7bd1b8a63be17597fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM1NTQ0Mw==", "url": "https://github.com/apache/iceberg/pull/768#discussion_r380355443", "bodyText": "This test validates the contract that counts include repeated values. In my ORC implementation counts were not included and there was no test validating that contract that now I've documented.", "author": "edgarRd", "createdAt": "2020-02-17T20:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyOTc1OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "ca2859a0998e6052aa4b8f7df76c2a6b1fb5295d", "url": "https://github.com/apache/iceberg/commit/ca2859a0998e6052aa4b8f7df76c2a6b1fb5295d", "message": "PR comments", "committedDate": "2020-02-17T20:24:52Z", "type": "commit"}]}