{"pr_number": 1920, "pr_title": "Hive: Serialize metadata location so split generation does not need to load the table", "pr_createdAt": "2020-12-12T05:49:50Z", "pr_url": "https://github.com/apache/iceberg/pull/1920", "timeline": [{"oid": "b67a58c7d07008c479b7778f8cbc9b580f3aed4f", "url": "https://github.com/apache/iceberg/commit/b67a58c7d07008c479b7778f8cbc9b580f3aed4f", "message": "Hive: Serialize metadata location so split generation does not need to load the table", "committedDate": "2020-12-12T05:56:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0ODMwMQ==", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r541548301", "bodyText": "can we get a Table instance here which does not implement HasTableOperarions and therefore would fail? Only BaseTable does so, wondering about the other Table implementations, if they can make it here?", "author": "marton-bod", "createdAt": "2020-12-12T10:19:33Z", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java", "diffHunk": "@@ -85,7 +86,10 @@ public void configureInputJobProperties(TableDesc tableDesc, Map<String, String>\n     map.put(InputFormatConfig.TABLE_IDENTIFIER, props.getProperty(Catalogs.NAME));\n     map.put(InputFormatConfig.TABLE_LOCATION, table.location());\n     map.put(InputFormatConfig.TABLE_SCHEMA, schemaJson);\n+    map.put(InputFormatConfig.METADATA_LOCATION,\n+        ((HasTableOperations) table).operations().current().metadataFileLocation());", "originalCommit": "b67a58c7d07008c479b7778f8cbc9b580f3aed4f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "902f4cc5d0f903201f7e91b7313232ab1c25853c", "chunk": "diff --git a/mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java b/mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java\nindex 58fe0e43b..abde7b3f3 100644\n--- a/mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java\n+++ b/mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java\n\n@@ -86,8 +86,9 @@ public class HiveIcebergStorageHandler implements HiveStoragePredicateHandler, H\n     map.put(InputFormatConfig.TABLE_IDENTIFIER, props.getProperty(Catalogs.NAME));\n     map.put(InputFormatConfig.TABLE_LOCATION, table.location());\n     map.put(InputFormatConfig.TABLE_SCHEMA, schemaJson);\n-    map.put(InputFormatConfig.METADATA_LOCATION,\n-        ((HasTableOperations) table).operations().current().metadataFileLocation());\n+    if (table instanceof BaseTable) {\n+      map.put(InputFormatConfig.METADATA_LOCATION, ((BaseTable) table).operations().current().metadataFileLocation());\n+    }\n \n     map.put(InputFormatConfig.FILE_IO, SerializationUtil.serializeToBase64(table.io()));\n     // save schema into table props as well to avoid repeatedly hitting the HMS during serde initializations\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0ODk4NA==", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r541548984", "bodyText": "Same as above. Wondering if the Table instance that's passed in can be something other than BaseTable, such as PartitionsTable, HistoryTable, etc.", "author": "marton-bod", "createdAt": "2020-12-12T10:24:26Z", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java", "diffHunk": "@@ -205,6 +210,8 @@ static void put(Configuration config, Table table) {\n     config.set(InputFormatConfig.TABLE_LOCATION, table.location());\n     config.set(InputFormatConfig.TABLE_SCHEMA, SchemaParser.toJson(table.schema()));\n     config.set(InputFormatConfig.PARTITION_SPEC, PartitionSpecParser.toJson(table.spec()));\n+    config.set(InputFormatConfig.METADATA_LOCATION,\n+        ((HasTableOperations) table).operations().current().metadataFileLocation());", "originalCommit": "b67a58c7d07008c479b7778f8cbc9b580f3aed4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU2NzAzOA==", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r541567038", "bodyText": "Removed StaticTable and used BaseTable instead. Also checking for BaseTable instead of HasTableOperations", "author": "pvary", "createdAt": "2020-12-12T12:28:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0ODk4NA=="}], "type": "inlineReview", "revised_code": {"commit": "902f4cc5d0f903201f7e91b7313232ab1c25853c", "chunk": "diff --git a/mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java b/mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java\nindex 58fe0e43b..abde7b3f3 100644\n--- a/mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java\n+++ b/mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java\n\n@@ -210,8 +211,10 @@ public class HiveIcebergStorageHandler implements HiveStoragePredicateHandler, H\n     config.set(InputFormatConfig.TABLE_LOCATION, table.location());\n     config.set(InputFormatConfig.TABLE_SCHEMA, SchemaParser.toJson(table.schema()));\n     config.set(InputFormatConfig.PARTITION_SPEC, PartitionSpecParser.toJson(table.spec()));\n-    config.set(InputFormatConfig.METADATA_LOCATION,\n-        ((HasTableOperations) table).operations().current().metadataFileLocation());\n+    if (table instanceof BaseTable) {\n+      config.set(InputFormatConfig.METADATA_LOCATION,\n+          ((BaseTable) table).operations().current().metadataFileLocation());\n+    }\n \n     config.set(InputFormatConfig.FILE_IO, SerializationUtil.serializeToBase64(table.io()));\n     config.set(InputFormatConfig.LOCATION_PROVIDER, SerializationUtil.serializeToBase64(table.locationProvider()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NDUwMA==", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r541574500", "bodyText": "Maybe it's better to check the instance of against HasTableOperations, in case some Table class other than BaseTable will decide to implement this interface in the future and expose operations on the table", "author": "marton-bod", "createdAt": "2020-12-12T13:17:19Z", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java", "diffHunk": "@@ -85,7 +86,11 @@ public void configureInputJobProperties(TableDesc tableDesc, Map<String, String>\n     map.put(InputFormatConfig.TABLE_IDENTIFIER, props.getProperty(Catalogs.NAME));\n     map.put(InputFormatConfig.TABLE_LOCATION, table.location());\n     map.put(InputFormatConfig.TABLE_SCHEMA, schemaJson);\n+    if (table instanceof BaseTable) {", "originalCommit": "ea2d9b08d42517786687c600c03377dbf322c748", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxNTc2Mg==", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r542915762", "bodyText": "I like using BaseTable here. I'm not sure that we're going to keep HasTableOperations around because it doesn't provide much value over BaseTable. If a table uses TableOperations, then it is just a thin wrapper so there isn't much of a need to customize.\nAnd metadata tables technically have a TableOperations that could be accessible, but replacing the table with a static one based on the metadata location in the table ops would read the table and not the metadata table. So I think it is better to be more specific here.", "author": "rdblue", "createdAt": "2020-12-14T23:15:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NDUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM3MDkwMw==", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r551370903", "bodyText": "Ended up testing for Serialization as suggested below", "author": "pvary", "createdAt": "2021-01-04T15:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NDUwMA=="}], "type": "inlineReview", "revised_code": {"commit": "051334fb9c7dc3b7e511e810c5dfb68c97651264", "chunk": "diff --git a/mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java b/mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java\nindex abde7b3f3..58fe0e43b 100644\n--- a/mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java\n+++ b/mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java\n\n@@ -86,9 +86,8 @@ public class HiveIcebergStorageHandler implements HiveStoragePredicateHandler, H\n     map.put(InputFormatConfig.TABLE_IDENTIFIER, props.getProperty(Catalogs.NAME));\n     map.put(InputFormatConfig.TABLE_LOCATION, table.location());\n     map.put(InputFormatConfig.TABLE_SCHEMA, schemaJson);\n-    if (table instanceof BaseTable) {\n-      map.put(InputFormatConfig.METADATA_LOCATION, ((BaseTable) table).operations().current().metadataFileLocation());\n-    }\n+    map.put(InputFormatConfig.METADATA_LOCATION,\n+        ((HasTableOperations) table).operations().current().metadataFileLocation());\n \n     map.put(InputFormatConfig.FILE_IO, SerializationUtil.serializeToBase64(table.io()));\n     // save schema into table props as well to avoid repeatedly hitting the HMS during serde initializations\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxNTkyMQ==", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r542915921", "bodyText": "As I noted on a thread below, I think it is better to use BaseTable.", "author": "rdblue", "createdAt": "2020-12-14T23:16:14Z", "path": "mr/src/main/java/org/apache/iceberg/mr/InputFormatConfig.java", "diffHunk": "@@ -85,6 +88,13 @@ public ConfigBuilder(Configuration conf) {\n     }\n \n     public Configuration conf() {\n+      // Store the io and the current snapshot of the table in the configuration which are needed for the split\n+      // generation\n+      Table table = Catalogs.loadTable(conf);\n+      conf.set(InputFormatConfig.METADATA_LOCATION,\n+          ((HasTableOperations) table).operations().current().metadataFileLocation());", "originalCommit": "ea2d9b08d42517786687c600c03377dbf322c748", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM3MTA2MQ==", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r551371061", "bodyText": "Using Serialization", "author": "pvary", "createdAt": "2021-01-04T15:05:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxNTkyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "545209f5a15ffbfb1804d98213e66b16661298b7", "chunk": "diff --git a/mr/src/main/java/org/apache/iceberg/mr/InputFormatConfig.java b/mr/src/main/java/org/apache/iceberg/mr/InputFormatConfig.java\nindex 5ac46c684..4d3580a64 100644\n--- a/mr/src/main/java/org/apache/iceberg/mr/InputFormatConfig.java\n+++ b/mr/src/main/java/org/apache/iceberg/mr/InputFormatConfig.java\n\n@@ -91,9 +90,10 @@ public class InputFormatConfig {\n       // Store the io and the current snapshot of the table in the configuration which are needed for the split\n       // generation\n       Table table = Catalogs.loadTable(conf);\n-      conf.set(InputFormatConfig.METADATA_LOCATION,\n-          ((HasTableOperations) table).operations().current().metadataFileLocation());\n \n+      // The FileIO serializes the configuration and we might end up recursively serializing the objects.\n+      // To avoid this unset the value before serialization and set it again in the next line.\n+      conf.unset(InputFormatConfig.FILE_IO);\n       conf.set(InputFormatConfig.FILE_IO, SerializationUtil.serializeToBase64(table.io()));\n       return conf;\n     }\n"}}, {"oid": "051334fb9c7dc3b7e511e810c5dfb68c97651264", "url": "https://github.com/apache/iceberg/commit/051334fb9c7dc3b7e511e810c5dfb68c97651264", "message": "Hive: Serialize metadata location so split generation does not need to load the table", "committedDate": "2021-01-04T09:57:13Z", "type": "commit"}, {"oid": "902f4cc5d0f903201f7e91b7313232ab1c25853c", "url": "https://github.com/apache/iceberg/commit/902f4cc5d0f903201f7e91b7313232ab1c25853c", "message": "Removed StaticTable and used BaseTable instead. Also checkinf for BaseTable instead of HasTableOperations", "committedDate": "2021-01-04T09:57:13Z", "type": "commit"}, {"oid": "902f4cc5d0f903201f7e91b7313232ab1c25853c", "url": "https://github.com/apache/iceberg/commit/902f4cc5d0f903201f7e91b7313232ab1c25853c", "message": "Removed StaticTable and used BaseTable instead. Also checkinf for BaseTable instead of HasTableOperations", "committedDate": "2021-01-04T09:57:13Z", "type": "forcePushed"}, {"oid": "545209f5a15ffbfb1804d98213e66b16661298b7", "url": "https://github.com/apache/iceberg/commit/545209f5a15ffbfb1804d98213e66b16661298b7", "message": "Rebased and moved to Serializable", "committedDate": "2021-01-04T15:03:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1OTU2Mw==", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r551459563", "bodyText": "These shouldn't need to change if writeReplace is implemented. This object won't be serialized, it will be replaced by the one to serialize.", "author": "rdblue", "createdAt": "2021-01-04T17:29:26Z", "path": "core/src/main/java/org/apache/iceberg/BaseTable.java", "diffHunk": "@@ -30,13 +32,12 @@\n  * <p>\n  * This can be extended by providing a {@link TableOperations} to the constructor.\n  */\n-public class BaseTable implements Table, HasTableOperations {\n-  private final TableOperations ops;\n-  private final String name;\n+public class BaseTable implements Table, HasTableOperations, Serializable {\n+  private transient TableOperations ops;\n+  private transient String name;", "originalCommit": "545209f5a15ffbfb1804d98213e66b16661298b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2MTc2NA==", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r551461764", "bodyText": "Okay, after reading the StaticTable, I see what you're doing. But I don't think that it is a good idea for this to make its fields transient. Can we use a readResolve method to create a BaseTable directly instead of having a StaticTable?", "author": "rdblue", "createdAt": "2021-01-04T17:33:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1OTU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc5MjE4Nw==", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r551792187", "bodyText": "I was toying with implementing the readResolve too. I decided against it because I thought it is more explicit to return a StaticTable object after deserialization instead of returning a BaseTable where the ops are StaticTableOperations and this way changing the behavior of the deserialized object, but hiding the details.\nSolved this by adding comments.", "author": "pvary", "createdAt": "2021-01-05T08:49:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1OTU2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ac14a53c9bf3db42ba0cfca4a228d393b4d9aa56", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/BaseTable.java b/core/src/main/java/org/apache/iceberg/BaseTable.java\nindex d1a2f5c14..fd5f305dd 100644\n--- a/core/src/main/java/org/apache/iceberg/BaseTable.java\n+++ b/core/src/main/java/org/apache/iceberg/BaseTable.java\n\n@@ -33,11 +32,12 @@ import org.apache.iceberg.io.LocationProvider;\n  * This can be extended by providing a {@link TableOperations} to the constructor.\n  */\n public class BaseTable implements Table, HasTableOperations, Serializable {\n-  private transient TableOperations ops;\n-  private transient String name;\n+  private final TableOperations ops;\n+  private final String name;\n \n   public BaseTable(TableOperations ops, String name) {\n-    init(ops, name);\n+    this.ops = ops;\n+    this.name = name;\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1OTcwMw==", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r551459703", "bodyText": "I don't think that this is needed. Can you remove it?", "author": "rdblue", "createdAt": "2021-01-04T17:29:44Z", "path": "core/src/main/java/org/apache/iceberg/BaseTable.java", "diffHunk": "@@ -217,4 +218,13 @@ public LocationProvider locationProvider() {\n   public String toString() {\n     return name();\n   }\n+\n+  Object writeReplace() throws ObjectStreamException {\n+    return new StaticTable(ops.io(), name(), ops.current().metadataFileLocation());\n+  }\n+\n+  void init(TableOperations tableOperations, String tableName) {\n+    this.ops = tableOperations;\n+    this.name = tableName;\n+  }", "originalCommit": "545209f5a15ffbfb1804d98213e66b16661298b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc5MjQ0Nw==", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r551792447", "bodyText": "After moving to the TableStub solution removed this change", "author": "pvary", "createdAt": "2021-01-05T08:49:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1OTcwMw=="}], "type": "inlineReview", "revised_code": {"commit": "ac14a53c9bf3db42ba0cfca4a228d393b4d9aa56", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/BaseTable.java b/core/src/main/java/org/apache/iceberg/BaseTable.java\nindex d1a2f5c14..fd5f305dd 100644\n--- a/core/src/main/java/org/apache/iceberg/BaseTable.java\n+++ b/core/src/main/java/org/apache/iceberg/BaseTable.java\n\n@@ -219,12 +219,23 @@ public class BaseTable implements Table, HasTableOperations, Serializable {\n     return name();\n   }\n \n-  Object writeReplace() throws ObjectStreamException {\n-    return new StaticTable(ops.io(), name(), ops.current().metadataFileLocation());\n+  Object writeReplace() {\n+    return new TableStub(this);\n   }\n \n-  void init(TableOperations tableOperations, String tableName) {\n-    this.ops = tableOperations;\n-    this.name = tableName;\n+  private static class TableStub implements Serializable {\n+    private FileIO io;\n+    private String name;\n+    private String metadataLocation;\n+\n+    private TableStub(BaseTable table) {\n+      io = table.io();\n+      name = table.name();\n+      metadataLocation = table.operations().current().metadataFileLocation();\n+    }\n+\n+    private Object readResolve()  {\n+      return new BaseTable(new StaticTableOperations(metadataLocation, io), name);\n+    }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2MDMwNA==", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r551460304", "bodyText": "There should be no need to implement writeReplace here because this is the replacement object. This class just needs to be Serializable.", "author": "rdblue", "createdAt": "2021-01-04T17:31:00Z", "path": "core/src/main/java/org/apache/iceberg/StaticTable.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.ObjectStreamException;\n+import org.apache.iceberg.io.FileIO;\n+\n+/**\n+ * Table implementation that provides access to metadata for a given snapshot of the Table using a\n+ * table metadata location. It will never refer to a different Metadata object than the one it was created with\n+ * and cannot be used to create or delete files.\n+ * This table could be serialized and deserialized.\n+ */\n+public class StaticTable extends BaseTable {\n+  public StaticTable(FileIO io, String name, String metadataLocation) {\n+    super(new StaticTableOperations(metadataLocation, io), name);\n+  }\n+\n+  private void writeObject(ObjectOutputStream out) throws IOException {\n+    out.writeObject(io());\n+    out.writeObject(name());\n+    out.writeObject(operations().current().metadataFileLocation());\n+  }\n+\n+  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+    FileIO io = (FileIO) in.readObject();\n+    String name = (String) in.readObject();\n+    String metadataLocation = (String) in.readObject();\n+    init(new StaticTableOperations(metadataLocation, io), name);\n+  }\n+\n+  private void readObjectNoData() throws ObjectStreamException {\n+    throw new UnsupportedOperationException(\"Deserializing empty StaticTable is not supported\");\n+  }\n+\n+  @Override\n+  Object writeReplace() throws ObjectStreamException {\n+    return this;\n+  }", "originalCommit": "545209f5a15ffbfb1804d98213e66b16661298b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc5MjU0Mg==", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r551792542", "bodyText": "After moving to the TableStub solution removed this change", "author": "pvary", "createdAt": "2021-01-05T08:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2MDMwNA=="}], "type": "inlineReview", "revised_code": {"commit": "ac14a53c9bf3db42ba0cfca4a228d393b4d9aa56", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/StaticTable.java b/core/src/main/java/org/apache/iceberg/StaticTable.java\ndeleted file mode 100644\nindex 430576ea9..000000000\n--- a/core/src/main/java/org/apache/iceberg/StaticTable.java\n+++ /dev/null\n\n@@ -1,60 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.apache.iceberg;\n-\n-import java.io.IOException;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n-import java.io.ObjectStreamException;\n-import org.apache.iceberg.io.FileIO;\n-\n-/**\n- * Table implementation that provides access to metadata for a given snapshot of the Table using a\n- * table metadata location. It will never refer to a different Metadata object than the one it was created with\n- * and cannot be used to create or delete files.\n- * This table could be serialized and deserialized.\n- */\n-public class StaticTable extends BaseTable {\n-  public StaticTable(FileIO io, String name, String metadataLocation) {\n-    super(new StaticTableOperations(metadataLocation, io), name);\n-  }\n-\n-  private void writeObject(ObjectOutputStream out) throws IOException {\n-    out.writeObject(io());\n-    out.writeObject(name());\n-    out.writeObject(operations().current().metadataFileLocation());\n-  }\n-\n-  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n-    FileIO io = (FileIO) in.readObject();\n-    String name = (String) in.readObject();\n-    String metadataLocation = (String) in.readObject();\n-    init(new StaticTableOperations(metadataLocation, io), name);\n-  }\n-\n-  private void readObjectNoData() throws ObjectStreamException {\n-    throw new UnsupportedOperationException(\"Deserializing empty StaticTable is not supported\");\n-  }\n-\n-  @Override\n-  Object writeReplace() throws ObjectStreamException {\n-    return this;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2MDc1OQ==", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r551460759", "bodyText": "Doesn't this need a public no-arg constructor?", "author": "rdblue", "createdAt": "2021-01-04T17:31:51Z", "path": "core/src/main/java/org/apache/iceberg/StaticTable.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.ObjectStreamException;\n+import org.apache.iceberg.io.FileIO;\n+\n+/**\n+ * Table implementation that provides access to metadata for a given snapshot of the Table using a\n+ * table metadata location. It will never refer to a different Metadata object than the one it was created with\n+ * and cannot be used to create or delete files.\n+ * This table could be serialized and deserialized.\n+ */\n+public class StaticTable extends BaseTable {\n+  public StaticTable(FileIO io, String name, String metadataLocation) {", "originalCommit": "545209f5a15ffbfb1804d98213e66b16661298b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc5MjczOA==", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r551792738", "bodyText": "After moving to the TableStub solution not needed anymore", "author": "pvary", "createdAt": "2021-01-05T08:50:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2MDc1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ac14a53c9bf3db42ba0cfca4a228d393b4d9aa56", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/StaticTable.java b/core/src/main/java/org/apache/iceberg/StaticTable.java\ndeleted file mode 100644\nindex 430576ea9..000000000\n--- a/core/src/main/java/org/apache/iceberg/StaticTable.java\n+++ /dev/null\n\n@@ -1,60 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.apache.iceberg;\n-\n-import java.io.IOException;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n-import java.io.ObjectStreamException;\n-import org.apache.iceberg.io.FileIO;\n-\n-/**\n- * Table implementation that provides access to metadata for a given snapshot of the Table using a\n- * table metadata location. It will never refer to a different Metadata object than the one it was created with\n- * and cannot be used to create or delete files.\n- * This table could be serialized and deserialized.\n- */\n-public class StaticTable extends BaseTable {\n-  public StaticTable(FileIO io, String name, String metadataLocation) {\n-    super(new StaticTableOperations(metadataLocation, io), name);\n-  }\n-\n-  private void writeObject(ObjectOutputStream out) throws IOException {\n-    out.writeObject(io());\n-    out.writeObject(name());\n-    out.writeObject(operations().current().metadataFileLocation());\n-  }\n-\n-  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n-    FileIO io = (FileIO) in.readObject();\n-    String name = (String) in.readObject();\n-    String metadataLocation = (String) in.readObject();\n-    init(new StaticTableOperations(metadataLocation, io), name);\n-  }\n-\n-  private void readObjectNoData() throws ObjectStreamException {\n-    throw new UnsupportedOperationException(\"Deserializing empty StaticTable is not supported\");\n-  }\n-\n-  @Override\n-  Object writeReplace() throws ObjectStreamException {\n-    return this;\n-  }\n-}\n"}}, {"oid": "ac14a53c9bf3db42ba0cfca4a228d393b4d9aa56", "url": "https://github.com/apache/iceberg/commit/ac14a53c9bf3db42ba0cfca4a228d393b4d9aa56", "message": "Use stub instead of StaticTable", "committedDate": "2021-01-05T08:35:10Z", "type": "commit"}, {"oid": "1553393cadf5dfc5a7521d7fa68679ff1074ea87", "url": "https://github.com/apache/iceberg/commit/1553393cadf5dfc5a7521d7fa68679ff1074ea87", "message": "Adding javadoc", "committedDate": "2021-01-05T08:48:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEzNjU0Ng==", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r552136546", "bodyText": "I'm also wondering if we should make Table extend Serializable. Not something to decide now, but I think this is a reasonable way to make that work.", "author": "rdblue", "createdAt": "2021-01-05T19:10:56Z", "path": "core/src/main/java/org/apache/iceberg/BaseTable.java", "diffHunk": "@@ -29,8 +30,12 @@\n  * Base {@link Table} implementation.\n  * <p>\n  * This can be extended by providing a {@link TableOperations} to the constructor.\n+ * <p>\n+ * Serializing and deserializing a BaseTable object returns a read only implementation of the BaseTable using a\n+ * {@link StaticTableOperations}. This way no Catalog related calls are needed when reading the table data after\n+ * deserialization.\n  */\n-public class BaseTable implements Table, HasTableOperations {\n+public class BaseTable implements Table, HasTableOperations, Serializable {", "originalCommit": "1553393cadf5dfc5a7521d7fa68679ff1074ea87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEzNzc4OA==", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r552137788", "bodyText": "Shouldn't these be serialized only if the table is not?", "author": "rdblue", "createdAt": "2021-01-05T19:13:31Z", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java", "diffHunk": "@@ -202,12 +208,31 @@ public static PartitionSpec spec(Configuration config) {\n    */\n   @VisibleForTesting\n   static void put(Configuration config, Table table) {\n+    // The Table contains a FileIO and the FileIO serializes the configuration so we might end up recursively\n+    // serializing the objects. To avoid this unset the values for now before serializing.\n+    config.unset(InputFormatConfig.SERIALIZED_TABLE);\n+    config.unset(InputFormatConfig.FILE_IO);\n+    config.unset(InputFormatConfig.LOCATION_PROVIDER);\n+    config.unset(InputFormatConfig.ENCRYPTION_MANAGER);\n+    config.unset(InputFormatConfig.TABLE_LOCATION);\n+    config.unset(InputFormatConfig.TABLE_SCHEMA);\n+    config.unset(InputFormatConfig.PARTITION_SPEC);\n+\n+    String base64Table = table instanceof Serializable ? SerializationUtil.serializeToBase64(table) : null;\n+    String base64Io = SerializationUtil.serializeToBase64(table.io());\n+    String base64LocationProvider = SerializationUtil.serializeToBase64(table.locationProvider());\n+    String base64EncryptionManager = SerializationUtil.serializeToBase64(table.encryption());\n+\n+    if (base64Table != null) {\n+      config.set(InputFormatConfig.SERIALIZED_TABLE, base64Table);\n+    }\n+\n+    config.set(InputFormatConfig.FILE_IO, base64Io);\n+    config.set(InputFormatConfig.LOCATION_PROVIDER, base64LocationProvider);\n+    config.set(InputFormatConfig.ENCRYPTION_MANAGER, base64EncryptionManager);", "originalCommit": "1553393cadf5dfc5a7521d7fa68679ff1074ea87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM5NjIwNw==", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r552396207", "bodyText": "Let's see what we can do about the serialization of the other table types. I would love to fully get rid of these serialized objects. Maybe even on the expense of not supporting reading some types of the tables through mr.", "author": "pvary", "createdAt": "2021-01-06T06:38:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEzNzc4OA=="}], "type": "inlineReview", "revised_code": null}]}