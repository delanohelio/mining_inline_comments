{"pr_number": 1897, "pr_title": "Add support for timestamp with local zone in Hive3", "pr_createdAt": "2020-12-09T15:09:15Z", "pr_url": "https://github.com/apache/iceberg/pull/1897", "timeline": [{"oid": "c807f72109ff665f8871f5587bf6d2fa9f6d23b0", "url": "https://github.com/apache/iceberg/commit/c807f72109ff665f8871f5587bf6d2fa9f6d23b0", "message": "Add support for timestamp with local zone in Hive3", "committedDate": "2020-12-09T14:55:32Z", "type": "commit"}, {"oid": "5eb9c9d1732873f85499d49fdfae2db7d3d1b144", "url": "https://github.com/apache/iceberg/commit/5eb9c9d1732873f85499d49fdfae2db7d3d1b144", "message": "Merge branch 'master' into hive3_timestamptz", "committedDate": "2020-12-09T15:42:23Z", "type": "commit"}, {"oid": "460089962d5aa2cae329d771ae74d45c3e025a43", "url": "https://github.com/apache/iceberg/commit/460089962d5aa2cae329d771ae74d45c3e025a43", "message": "fix checkstyle", "committedDate": "2020-12-09T15:56:58Z", "type": "commit"}, {"oid": "cb1e011fef1091c4734718cb2481d9dc88baa81d", "url": "https://github.com/apache/iceberg/commit/cb1e011fef1091c4734718cb2481d9dc88baa81d", "message": "fix checkstyle 2", "committedDate": "2020-12-09T16:39:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAwMzY4Mg==", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r540003682", "bodyText": "You might want to rebase to master. We need to implement WriteObjectInspector.\nAlso we need to test for them as well", "author": "pvary", "createdAt": "2020-12-10T09:20:54Z", "path": "hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspectorHive3.java", "diffHunk": "@@ -20,50 +20,32 @@\n package org.apache.iceberg.mr.hive.serde.objectinspector;\n \n import java.time.LocalDateTime;\n-import java.time.OffsetDateTime;\n import java.time.ZoneOffset;\n import org.apache.hadoop.hive.common.type.Timestamp;\n import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n import org.apache.hadoop.hive.serde2.objectinspector.primitive.AbstractPrimitiveJavaObjectInspector;\n import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampObjectInspector;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n \n-public abstract class IcebergTimestampObjectInspectorHive3 extends AbstractPrimitiveJavaObjectInspector\n+public class IcebergTimestampObjectInspectorHive3 extends AbstractPrimitiveJavaObjectInspector", "originalCommit": "cb1e011fef1091c4734718cb2481d9dc88baa81d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAyNDIzNA==", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r540024234", "bodyText": "I've done a merge with master, and this class IcebergTimestampObjectInspectorHive3 doesn't seem to implement WriteObjectInspector yet even on master. I can add a similar convert method that we have for IcebergTimestampObjectInspector.", "author": "marton-bod", "createdAt": "2020-12-10T09:48:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAwMzY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9a356b00e0e96453914e0decbbf93994d786d50d", "chunk": "diff --git a/hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspectorHive3.java b/hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspectorHive3.java\nindex abd4243f7..ea9cd3b7e 100644\n--- a/hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspectorHive3.java\n+++ b/hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspectorHive3.java\n\n@@ -28,7 +28,7 @@ import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampObjectIn\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n \n public class IcebergTimestampObjectInspectorHive3 extends AbstractPrimitiveJavaObjectInspector\n-    implements TimestampObjectInspector {\n+    implements TimestampObjectInspector, WriteObjectInspector {\n \n   private static final IcebergTimestampObjectInspectorHive3 INSTANCE = new IcebergTimestampObjectInspectorHive3();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAwNTU3OQ==", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r540005579", "bodyText": "Could we test that the same instant with different offset will result in the same TimestampTZ?", "author": "pvary", "createdAt": "2020-12-10T09:23:25Z", "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampWithZoneObjectInspectorHive3.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive.serde.objectinspector;\n+\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import org.apache.hadoop.hive.common.type.TimestampTZ;\n+import org.apache.hadoop.hive.serde2.io.TimestampLocalTZWritable;\n+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampLocalTZObjectInspector;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestIcebergTimestampWithZoneObjectInspectorHive3 {\n+\n+  @Test\n+  public void testIcebergTimestampLocalTZObjectInspector() {\n+    TimestampLocalTZObjectInspector oi = IcebergTimestampWithZoneObjectInspectorHive3.get();\n+\n+    Assert.assertEquals(ObjectInspector.Category.PRIMITIVE, oi.getCategory());\n+    Assert.assertEquals(PrimitiveObjectInspector.PrimitiveCategory.TIMESTAMPLOCALTZ, oi.getPrimitiveCategory());\n+\n+    Assert.assertEquals(TypeInfoFactory.timestampLocalTZTypeInfo, oi.getTypeInfo());\n+    Assert.assertEquals(TypeInfoFactory.timestampLocalTZTypeInfo.getTypeName(), oi.getTypeName());\n+\n+    Assert.assertEquals(TimestampTZ.class, oi.getJavaPrimitiveClass());\n+    Assert.assertEquals(TimestampLocalTZWritable.class, oi.getPrimitiveWritableClass());\n+\n+    Assert.assertNull(oi.copyObject(null));\n+    Assert.assertNull(oi.getPrimitiveJavaObject(null));\n+    Assert.assertNull(oi.getPrimitiveWritableObject(null));\n+\n+    long epochSeconds = 1601471970L;\n+    OffsetDateTime offsetDateTime = OffsetDateTime.of(", "originalCommit": "cb1e011fef1091c4734718cb2481d9dc88baa81d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAyNDY5Ng==", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r540024696", "bodyText": "Yes, that's a good idea.", "author": "marton-bod", "createdAt": "2020-12-10T09:49:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAwNTU3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "98e54e6a50b6ed032fbba18815a2104570135f1c", "chunk": "diff --git a/hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampWithZoneObjectInspectorHive3.java b/hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampWithZoneObjectInspectorHive3.java\nindex 4b86b6eef..7f29429ea 100644\n--- a/hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampWithZoneObjectInspectorHive3.java\n+++ b/hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampWithZoneObjectInspectorHive3.java\n\n@@ -21,6 +21,7 @@ package org.apache.iceberg.mr.hive.serde.objectinspector;\n \n import java.time.LocalDateTime;\n import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n import java.time.ZoneOffset;\n import org.apache.hadoop.hive.common.type.TimestampTZ;\n import org.apache.hadoop.hive.serde2.io.TimestampLocalTZWritable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAwNjEzNg==", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r540006136", "bodyText": "How can we be sure that this epoch seconds really result in the expected TZ?", "author": "pvary", "createdAt": "2020-12-10T09:24:15Z", "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampWithZoneObjectInspectorHive3.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive.serde.objectinspector;\n+\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import org.apache.hadoop.hive.common.type.TimestampTZ;\n+import org.apache.hadoop.hive.serde2.io.TimestampLocalTZWritable;\n+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampLocalTZObjectInspector;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestIcebergTimestampWithZoneObjectInspectorHive3 {\n+\n+  @Test\n+  public void testIcebergTimestampLocalTZObjectInspector() {\n+    TimestampLocalTZObjectInspector oi = IcebergTimestampWithZoneObjectInspectorHive3.get();\n+\n+    Assert.assertEquals(ObjectInspector.Category.PRIMITIVE, oi.getCategory());\n+    Assert.assertEquals(PrimitiveObjectInspector.PrimitiveCategory.TIMESTAMPLOCALTZ, oi.getPrimitiveCategory());\n+\n+    Assert.assertEquals(TypeInfoFactory.timestampLocalTZTypeInfo, oi.getTypeInfo());\n+    Assert.assertEquals(TypeInfoFactory.timestampLocalTZTypeInfo.getTypeName(), oi.getTypeName());\n+\n+    Assert.assertEquals(TimestampTZ.class, oi.getJavaPrimitiveClass());\n+    Assert.assertEquals(TimestampLocalTZWritable.class, oi.getPrimitiveWritableClass());\n+\n+    Assert.assertNull(oi.copyObject(null));\n+    Assert.assertNull(oi.getPrimitiveJavaObject(null));\n+    Assert.assertNull(oi.getPrimitiveWritableObject(null));\n+\n+    long epochSeconds = 1601471970L;", "originalCommit": "cb1e011fef1091c4734718cb2481d9dc88baa81d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI0ODM3OQ==", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r540248379", "bodyText": "Refactored this to use LocalDateTime instead", "author": "marton-bod", "createdAt": "2020-12-10T15:12:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAwNjEzNg=="}], "type": "inlineReview", "revised_code": {"commit": "98e54e6a50b6ed032fbba18815a2104570135f1c", "chunk": "diff --git a/hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampWithZoneObjectInspectorHive3.java b/hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampWithZoneObjectInspectorHive3.java\nindex 4b86b6eef..7f29429ea 100644\n--- a/hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampWithZoneObjectInspectorHive3.java\n+++ b/hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampWithZoneObjectInspectorHive3.java\n\n@@ -21,6 +21,7 @@ package org.apache.iceberg.mr.hive.serde.objectinspector;\n \n import java.time.LocalDateTime;\n import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n import java.time.ZoneOffset;\n import org.apache.hadoop.hive.common.type.TimestampTZ;\n import org.apache.hadoop.hive.serde2.io.TimestampLocalTZWritable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAwNjk5NA==", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r540006994", "bodyText": "Why did we remove this?", "author": "pvary", "createdAt": "2020-12-10T09:25:26Z", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspector.java", "diffHunk": "@@ -80,22 +57,16 @@ public TimestampWritable getPrimitiveWritableObject(Object o) {\n \n   @Override\n   public Object copyObject(Object o) {\n-    if (o == null) {", "originalCommit": "cb1e011fef1091c4734718cb2481d9dc88baa81d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI0OTg1Mw==", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r540249853", "bodyText": "this null check is handled in the else branch", "author": "marton-bod", "createdAt": "2020-12-10T15:14:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAwNjk5NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "98e54e6a50b6ed032fbba18815a2104570135f1c", "url": "https://github.com/apache/iceberg/commit/98e54e6a50b6ed032fbba18815a2104570135f1c", "message": "address review comments", "committedDate": "2020-12-10T17:28:38Z", "type": "commit"}, {"oid": "9a356b00e0e96453914e0decbbf93994d786d50d", "url": "https://github.com/apache/iceberg/commit/9a356b00e0e96453914e0decbbf93994d786d50d", "message": "Add convert method to timestamp inspectors", "committedDate": "2020-12-11T11:08:16Z", "type": "commit"}, {"oid": "400ada5fb23b9f89c152642237cfb73038f9d50e", "url": "https://github.com/apache/iceberg/commit/400ada5fb23b9f89c152642237cfb73038f9d50e", "message": "Add Hive3 unit tests for HiveSchemaUtil", "committedDate": "2020-12-11T11:36:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk5NDI1Mg==", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r540994252", "bodyText": "Do we lose nanos here?", "author": "pvary", "createdAt": "2020-12-11T14:40:16Z", "path": "hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspectorHive3.java", "diffHunk": "@@ -20,50 +20,38 @@\n package org.apache.iceberg.mr.hive.serde.objectinspector;\n \n import java.time.LocalDateTime;\n-import java.time.OffsetDateTime;\n import java.time.ZoneOffset;\n import org.apache.hadoop.hive.common.type.Timestamp;\n import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n import org.apache.hadoop.hive.serde2.objectinspector.primitive.AbstractPrimitiveJavaObjectInspector;\n import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampObjectInspector;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n \n-public abstract class IcebergTimestampObjectInspectorHive3 extends AbstractPrimitiveJavaObjectInspector\n-    implements TimestampObjectInspector {\n+public class IcebergTimestampObjectInspectorHive3 extends AbstractPrimitiveJavaObjectInspector\n+    implements TimestampObjectInspector, WriteObjectInspector {\n \n-  private static final IcebergTimestampObjectInspectorHive3 INSTANCE_WITH_ZONE =\n-      new IcebergTimestampObjectInspectorHive3() {\n-        @Override\n-        LocalDateTime toLocalDateTime(Object o) {\n-          return ((OffsetDateTime) o).toLocalDateTime();\n-        }\n-      };\n+  private static final IcebergTimestampObjectInspectorHive3 INSTANCE = new IcebergTimestampObjectInspectorHive3();\n \n-  private static final IcebergTimestampObjectInspectorHive3 INSTANCE_WITHOUT_ZONE =\n-      new IcebergTimestampObjectInspectorHive3() {\n-        @Override\n-        LocalDateTime toLocalDateTime(Object o) {\n-          return (LocalDateTime) o;\n-        }\n-      };\n-\n-  public static IcebergTimestampObjectInspectorHive3 get(boolean adjustToUTC) {\n-    return adjustToUTC ? INSTANCE_WITH_ZONE : INSTANCE_WITHOUT_ZONE;\n+  public static IcebergTimestampObjectInspectorHive3 get() {\n+    return INSTANCE;\n   }\n \n   private IcebergTimestampObjectInspectorHive3() {\n     super(TypeInfoFactory.timestampTypeInfo);\n   }\n \n-\n-  abstract LocalDateTime toLocalDateTime(Object object);\n+  @Override\n+  public LocalDateTime convert(Object o) {\n+    return o == null ? null : LocalDateTime.ofEpochSecond(\n+        ((TimestampWritableV2) o).getTimestamp().toEpochSecond(), 0, ZoneOffset.UTC);", "originalCommit": "400ada5fb23b9f89c152642237cfb73038f9d50e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAwNzAzNg==", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r541007036", "bodyText": "we did, but we shouldn't :) fixed", "author": "marton-bod", "createdAt": "2020-12-11T14:59:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk5NDI1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "203631a2c44ff65410df56a91aaaf3ffe30ccc4b", "chunk": "diff --git a/hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspectorHive3.java b/hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspectorHive3.java\nindex ea9cd3b7e..652cf1356 100644\n--- a/hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspectorHive3.java\n+++ b/hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspectorHive3.java\n\n@@ -42,8 +42,11 @@ public class IcebergTimestampObjectInspectorHive3 extends AbstractPrimitiveJavaO\n \n   @Override\n   public LocalDateTime convert(Object o) {\n-    return o == null ? null : LocalDateTime.ofEpochSecond(\n-        ((TimestampWritableV2) o).getTimestamp().toEpochSecond(), 0, ZoneOffset.UTC);\n+    if (o == null) {\n+      return null;\n+    }\n+    Timestamp timestamp = ((TimestampWritableV2) o).getTimestamp();\n+    return LocalDateTime.ofEpochSecond(timestamp.toEpochSecond(), timestamp.getNanos(), ZoneOffset.UTC);\n   }\n \n   @Override\n"}}, {"oid": "203631a2c44ff65410df56a91aaaf3ffe30ccc4b", "url": "https://github.com/apache/iceberg/commit/203631a2c44ff65410df56a91aaaf3ffe30ccc4b", "message": "add back nanos", "committedDate": "2020-12-11T14:58:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyOTk4MA==", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r541129980", "bodyText": "equalsIgnoreCase?", "author": "rdblue", "createdAt": "2020-12-11T18:04:18Z", "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/HiveSchemaConverter.java", "diffHunk": "@@ -99,6 +99,10 @@ Type convertType(TypeInfo typeInfo) {\n           case INTERVAL_YEAR_MONTH:\n           case INTERVAL_DAY_TIME:\n           default:\n+            // special case for Timestamp with Local TZ which is only available in Hive3\n+            if (\"TIMESTAMPLOCALTZ\".equals(((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory().name())) {", "originalCommit": "203631a2c44ff65410df56a91aaaf3ffe30ccc4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0NDYzNA==", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r541544634", "bodyText": "I think it should always be all uppercase, but I've changed it just to be safe.", "author": "marton-bod", "createdAt": "2020-12-12T09:55:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyOTk4MA=="}], "type": "inlineReview", "revised_code": {"commit": "f393a093eea127e64075cae2dcbad3cebc008f32", "chunk": "diff --git a/hive-metastore/src/main/java/org/apache/iceberg/hive/HiveSchemaConverter.java b/hive-metastore/src/main/java/org/apache/iceberg/hive/HiveSchemaConverter.java\nindex ef3d7b4f8..fec8c9ece 100644\n--- a/hive-metastore/src/main/java/org/apache/iceberg/hive/HiveSchemaConverter.java\n+++ b/hive-metastore/src/main/java/org/apache/iceberg/hive/HiveSchemaConverter.java\n\n@@ -100,7 +100,7 @@ class HiveSchemaConverter {\n           case INTERVAL_DAY_TIME:\n           default:\n             // special case for Timestamp with Local TZ which is only available in Hive3\n-            if (\"TIMESTAMPLOCALTZ\".equals(((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory().name())) {\n+            if (\"TIMESTAMPLOCALTZ\".equalsIgnoreCase(((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory().name())) {\n               return Types.TimestampType.withZone();\n             }\n             throw new IllegalArgumentException(\"Unsupported Hive type (\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI4NzIzNA==", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r541287234", "bodyText": "Is it possible to use super and add only specific fields?", "author": "pvary", "createdAt": "2020-12-11T21:02:27Z", "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/TestHiveSchemaUtilHive3.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.serde.serdeConstants;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.hive.TestHiveSchemaUtil;\n+import org.apache.iceberg.types.Types;\n+\n+import static org.apache.iceberg.types.Types.NestedField.optional;\n+\n+public class TestHiveSchemaUtilHive3 extends TestHiveSchemaUtil {\n+\n+  @Override\n+  protected List<FieldSchema> getSupportedFieldSchemas() {", "originalCommit": "203631a2c44ff65410df56a91aaaf3ffe30ccc4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0NDM3OA==", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r541544378", "bodyText": "yes, changed it to use super", "author": "marton-bod", "createdAt": "2020-12-12T09:53:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI4NzIzNA=="}], "type": "inlineReview", "revised_code": {"commit": "f393a093eea127e64075cae2dcbad3cebc008f32", "chunk": "diff --git a/hive3/src/test/java/org/apache/iceberg/mr/hive/TestHiveSchemaUtilHive3.java b/hive3/src/test/java/org/apache/iceberg/mr/hive/TestHiveSchemaUtilHive3.java\nindex ed97def74..63eb7363e 100644\n--- a/hive3/src/test/java/org/apache/iceberg/mr/hive/TestHiveSchemaUtilHive3.java\n+++ b/hive3/src/test/java/org/apache/iceberg/mr/hive/TestHiveSchemaUtilHive3.java\n\n@@ -19,12 +19,12 @@\n \n package org.apache.iceberg.mr.hive;\n \n-import java.util.ArrayList;\n import java.util.List;\n import org.apache.hadoop.hive.metastore.api.FieldSchema;\n import org.apache.hadoop.hive.serde.serdeConstants;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.hive.TestHiveSchemaUtil;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.apache.iceberg.types.Types;\n \n import static org.apache.iceberg.types.Types.NestedField.optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI5MDIxOQ==", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r541290219", "bodyText": "We do not check nanos. Do we want to do it?", "author": "pvary", "createdAt": "2020-12-11T21:05:31Z", "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampObjectInspectorHive3.java", "diffHunk": "@@ -51,6 +48,7 @@ public void testIcebergTimestampObjectInspector() {\n     Assert.assertNull(oi.copyObject(null));\n     Assert.assertNull(oi.getPrimitiveJavaObject(null));\n     Assert.assertNull(oi.getPrimitiveWritableObject(null));\n+    Assert.assertNull(oi.convert(null));\n \n     long epochMilli = 1601471970000L;\n     LocalDateTime local = LocalDateTime.ofInstant(Instant.ofEpochMilli(epochMilli), ZoneId.of(\"UTC\"));", "originalCommit": "203631a2c44ff65410df56a91aaaf3ffe30ccc4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwOTA2NA==", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r541309064", "bodyText": "Yes!", "author": "rdblue", "createdAt": "2020-12-11T21:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI5MDIxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0NDM0NA==", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r541544344", "bodyText": "Done!", "author": "marton-bod", "createdAt": "2020-12-12T09:53:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI5MDIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f393a093eea127e64075cae2dcbad3cebc008f32", "chunk": "diff --git a/hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampObjectInspectorHive3.java b/hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampObjectInspectorHive3.java\nindex 245409b31..e22f71ff2 100644\n--- a/hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampObjectInspectorHive3.java\n+++ b/hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampObjectInspectorHive3.java\n\n@@ -51,8 +51,9 @@ public class TestIcebergTimestampObjectInspectorHive3 {\n     Assert.assertNull(oi.convert(null));\n \n     long epochMilli = 1601471970000L;\n-    LocalDateTime local = LocalDateTime.ofInstant(Instant.ofEpochMilli(epochMilli), ZoneId.of(\"UTC\"));\n+    LocalDateTime local = LocalDateTime.ofInstant(Instant.ofEpochMilli(epochMilli), ZoneId.of(\"UTC\")).plusNanos(34000);\n     Timestamp ts = Timestamp.ofEpochMilli(epochMilli);\n+    ts.setNanos(34000);\n \n     Assert.assertEquals(ts, oi.getPrimitiveJavaObject(local));\n     Assert.assertEquals(new TimestampWritableV2(ts), oi.getPrimitiveWritableObject(local));\n"}}, {"oid": "f393a093eea127e64075cae2dcbad3cebc008f32", "url": "https://github.com/apache/iceberg/commit/f393a093eea127e64075cae2dcbad3cebc008f32", "message": "address review comments", "committedDate": "2020-12-12T09:52:47Z", "type": "commit"}]}