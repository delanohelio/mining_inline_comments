{"pr_number": 2001, "pr_title": "iss1980 a special close flag added to indicate that the writer is closed", "pr_createdAt": "2020-12-29T01:08:17Z", "pr_url": "https://github.com/apache/iceberg/pull/2001", "timeline": [{"oid": "99b5d297dc331fd8bef660ae8aa6d4da270c4c0a", "url": "https://github.com/apache/iceberg/commit/99b5d297dc331fd8bef660ae8aa6d4da270c4c0a", "message": "iss6369 a special close flag added to indicate that the writer is closed", "committedDate": "2020-12-29T01:07:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc5MjcxNw==", "url": "https://github.com/apache/iceberg/pull/2001#discussion_r549792717", "bodyText": "This should still use try-with-resources. You just have to keep a reference to the writer outside of it:\n  FileAppender<Record> writer = Parquet.write(...);\n  try (Closeable toClose = writer) {\n    writer.addAll(records);\n  }\n\n  writer.length();", "author": "rdblue", "createdAt": "2020-12-29T17:47:17Z", "path": "parquet/src/test/java/org/apache/iceberg/parquet/ParquetWritingTestUtils.java", "diffHunk": "@@ -53,20 +54,43 @@ static File writeRecords(TemporaryFolder temp, Schema schema,\n   }\n \n   static File writeRecords(\n-      TemporaryFolder temp,\n-      Schema schema, Map<String, String> properties,\n-      Function<MessageType, ParquetValueWriter<?>> createWriterFunc,\n-      GenericData.Record... records) throws IOException {\n+          TemporaryFolder temp,\n+          Schema schema, Map<String, String> properties,\n+          Function<MessageType, ParquetValueWriter<?>> createWriterFunc,\n+          GenericData.Record... records) throws IOException {\n+    File file = createTempFile(temp);\n+    write(file, schema, properties, createWriterFunc, records);\n+    return file;\n+  }\n+\n+  static long write(File file, Schema schema, Map<String, String> properties,\n+                    Function<MessageType, ParquetValueWriter<?>> createWriterFunc,\n+                    GenericData.Record... records) throws IOException {\n+    FileAppender<GenericData.Record> writer = Parquet.write(localOutput(file))", "originalCommit": "99b5d297dc331fd8bef660ae8aa6d4da270c4c0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "739fee73dea04657ee38b922d5275b5061c4118e", "chunk": "diff --git a/parquet/src/test/java/org/apache/iceberg/parquet/ParquetWritingTestUtils.java b/parquet/src/test/java/org/apache/iceberg/parquet/ParquetWritingTestUtils.java\nindex 446337c5..24effa74 100644\n--- a/parquet/src/test/java/org/apache/iceberg/parquet/ParquetWritingTestUtils.java\n+++ b/parquet/src/test/java/org/apache/iceberg/parquet/ParquetWritingTestUtils.java\n\n@@ -66,23 +66,21 @@ class ParquetWritingTestUtils {\n   static long write(File file, Schema schema, Map<String, String> properties,\n                     Function<MessageType, ParquetValueWriter<?>> createWriterFunc,\n                     GenericData.Record... records) throws IOException {\n+\n+    long len = 0;\n+\n     FileAppender<GenericData.Record> writer = Parquet.write(localOutput(file))\n             .schema(schema)\n             .setAll(properties)\n             .createWriterFunc(createWriterFunc)\n             .build();\n \n-    writer.addAll(Lists.newArrayList(records));\n-\n-    long len = 0;\n+    try (Closeable toClose = writer) {\n+      writer.addAll(Lists.newArrayList(records));\n+      len = writer.length(); // in deprecated adapter we need to get the length first and then close the writer\n+    }\n \n-    if (writer instanceof ParquetWriteAdapter) {\n-      // in deprecated adapter we need to get the length first and then close the writer\n-      // b/c close() function sets underlying writer to null which leads to NPE\n-      len = writer.length();\n-      IOUtils.closeQuietly(writer);\n-    } else {\n-      IOUtils.closeQuietly(writer);\n+    if (writer instanceof ParquetWriter) {\n       len = writer.length();\n     }\n     return len;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc5MjkxMQ==", "url": "https://github.com/apache/iceberg/pull/2001#discussion_r549792911", "bodyText": "Looks like a typo.", "author": "rdblue", "createdAt": "2020-12-29T17:48:05Z", "path": "parquet/src/test/java/org/apache/iceberg/parquet/TestParquet.java", "diffHunk": "@@ -82,15 +114,17 @@ private File generateFileWithTwoRowGroups(Function<MessageType, ParquetValueWrit\n       records.add(record);\n     }\n \n-    // Force multiple row groups by making the byte size very small\n+    // Force multiple row groups by making the byte size vParquetWriteAdapterery small", "originalCommit": "99b5d297dc331fd8bef660ae8aa6d4da270c4c0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "739fee73dea04657ee38b922d5275b5061c4118e", "chunk": "diff --git a/parquet/src/test/java/org/apache/iceberg/parquet/TestParquet.java b/parquet/src/test/java/org/apache/iceberg/parquet/TestParquet.java\nindex 4c942387..c931e266 100644\n--- a/parquet/src/test/java/org/apache/iceberg/parquet/TestParquet.java\n+++ b/parquet/src/test/java/org/apache/iceberg/parquet/TestParquet.java\n\n@@ -114,7 +114,7 @@ public class TestParquet {\n       records.add(record);\n     }\n \n-    // Force multiple row groups by making the byte size vParquetWriteAdapterery small\n+    // Force multiple row groups by making the byte size very small\n     // Note there'a also minimumRowGroupRecordCount which cannot be configured so we have to write\n     // at least that many records for a new row group to occur\n     File file = createTempFile(temp);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc5MzY5MQ==", "url": "https://github.com/apache/iceberg/pull/2001#discussion_r549793691", "bodyText": "If this is going to track whether the writer is closed, then it should make the close idempotent by checking the flag:\n  if (!closed) {\n    this.closed = true;\n    flushRowGroup(true);\n    writeStore.close();\n    writer.end(metadata);\n  }\nI would also add a precondition in startRowGroup that checks that closed is false.", "author": "rdblue", "createdAt": "2020-12-29T17:50:42Z", "path": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java", "diffHunk": "@@ -192,5 +203,6 @@ public void close() throws IOException {\n     flushRowGroup(true);\n     writeStore.close();\n     writer.end(metadata);\n+    this.closed = true;", "originalCommit": "99b5d297dc331fd8bef660ae8aa6d4da270c4c0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUyMTY5NQ==", "url": "https://github.com/apache/iceberg/pull/2001#discussion_r551521695", "bodyText": "I'd also add :\nelse {\n  throw new IllegalStateException(\"writer is closed\");\n}\nbut note sure if it aligns with Iceberg's coding style", "author": "dmgcodevil", "createdAt": "2021-01-04T19:31:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc5MzY5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "739fee73dea04657ee38b922d5275b5061c4118e", "chunk": "diff --git a/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java b/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\nindex 9ede5d9a..7c3940f9 100644\n--- a/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\n+++ b/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\n\n@@ -200,9 +203,11 @@ class ParquetWriter<T> implements FileAppender<T>, Closeable {\n \n   @Override\n   public void close() throws IOException {\n-    flushRowGroup(true);\n-    writeStore.close();\n-    writer.end(metadata);\n-    this.closed = true;\n+    if (!this.closed) {\n+      this.closed = true;\n+      flushRowGroup(true);\n+      writeStore.close();\n+      writer.end(metadata);\n+    }\n   }\n }\n"}}, {"oid": "739fee73dea04657ee38b922d5275b5061c4118e", "url": "https://github.com/apache/iceberg/commit/739fee73dea04657ee38b922d5275b5061c4118e", "message": "iss6369: check writer's close flag", "committedDate": "2021-01-04T19:17:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyMzM4Ng==", "url": "https://github.com/apache/iceberg/pull/2001#discussion_r551623386", "bodyText": "Error messages should begin with a capital letter.", "author": "rdblue", "createdAt": "2021-01-04T23:12:44Z", "path": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java", "diffHunk": "@@ -170,6 +181,9 @@ private void flushRowGroup(boolean finished) {\n   }\n \n   private void startRowGroup() {\n+    if (this.closed) {\n+      throw new IllegalStateException(\"writer is closed\");", "originalCommit": "739fee73dea04657ee38b922d5275b5061c4118e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ea135f1a44f87bc6426af59a7621f08311665b6", "chunk": "diff --git a/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java b/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\nindex 7c3940f9..def7f8d1 100644\n--- a/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\n+++ b/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\n\n@@ -182,8 +182,9 @@ class ParquetWriter<T> implements FileAppender<T>, Closeable {\n \n   private void startRowGroup() {\n     if (this.closed) {\n-      throw new IllegalStateException(\"writer is closed\");\n+      throw new IllegalStateException(\"Writer is closed\");\n     }\n+\n     try {\n       this.nextRowGroupSize = Math.min(writer.getNextRowGroupSize(), targetRowGroupSize);\n     } catch (IOException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyMzQ1Nw==", "url": "https://github.com/apache/iceberg/pull/2001#discussion_r551623457", "bodyText": "Can you add a blank line between control flow blocks?", "author": "rdblue", "createdAt": "2021-01-04T23:13:01Z", "path": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java", "diffHunk": "@@ -170,6 +181,9 @@ private void flushRowGroup(boolean finished) {\n   }\n \n   private void startRowGroup() {\n+    if (this.closed) {\n+      throw new IllegalStateException(\"writer is closed\");\n+    }\n     try {\n       this.nextRowGroupSize = Math.min(writer.getNextRowGroupSize(), targetRowGroupSize);\n     } catch (IOException e) {", "originalCommit": "739fee73dea04657ee38b922d5275b5061c4118e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ea135f1a44f87bc6426af59a7621f08311665b6", "chunk": "diff --git a/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java b/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\nindex 7c3940f9..def7f8d1 100644\n--- a/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\n+++ b/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\n\n@@ -182,8 +182,9 @@ class ParquetWriter<T> implements FileAppender<T>, Closeable {\n \n   private void startRowGroup() {\n     if (this.closed) {\n-      throw new IllegalStateException(\"writer is closed\");\n+      throw new IllegalStateException(\"Writer is closed\");\n     }\n+\n     try {\n       this.nextRowGroupSize = Math.min(writer.getNextRowGroupSize(), targetRowGroupSize);\n     } catch (IOException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyNDI3NA==", "url": "https://github.com/apache/iceberg/pull/2001#discussion_r551624274", "bodyText": "This isn't quite accurate. It is the number of bytes written only after the writer is closed. How about @return length of the file produced by this writer, approximate until after closed", "author": "rdblue", "createdAt": "2021-01-04T23:15:17Z", "path": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java", "diffHunk": "@@ -124,10 +125,20 @@ public Metrics metrics() {\n     return ParquetUtil.footerMetrics(writer.getFooter(), model.metrics(), metricsConfig);\n   }\n \n+  /**\n+   * Returns the number of bytes written by this writer.\n+   * NOTE: call {@link ParquetWriter#close()})} prior this method to get the exact number of bytes.\n+   *\n+   * @return the number of bytes written by this writer.", "originalCommit": "739fee73dea04657ee38b922d5275b5061c4118e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ea135f1a44f87bc6426af59a7621f08311665b6", "chunk": "diff --git a/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java b/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\nindex 7c3940f9..def7f8d1 100644\n--- a/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\n+++ b/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\n\n@@ -126,10 +126,10 @@ class ParquetWriter<T> implements FileAppender<T>, Closeable {\n   }\n \n   /**\n-   * Returns the number of bytes written by this writer.\n-   * NOTE: call {@link ParquetWriter#close()})} prior this method to get the exact number of bytes.\n-   *\n-   * @return the number of bytes written by this writer.\n+   * Returns the approximate length of the output file produced by this writer.\n+   * <p>\n+   * Prior to calling {@link ParquetWriter#close}, the result is approximate. After calling close, the length is\n+   * exact.\n    */\n   @Override\n   public long length() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyNTE0MQ==", "url": "https://github.com/apache/iceberg/pull/2001#discussion_r551625141", "bodyText": "This is going to be wrapped into a single paragraph. Also, it is okay to describe the behavior without NOTE.\nHow about this?\n  /**\n   * Returns the approximate length of the output file produced by this writer.\n   * <p>\n   * Prior to calling {@link ParquetWriter#close}, the result is approximate. After calling close, the length is exact.\n   */", "author": "rdblue", "createdAt": "2021-01-04T23:17:50Z", "path": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java", "diffHunk": "@@ -124,10 +125,20 @@ public Metrics metrics() {\n     return ParquetUtil.footerMetrics(writer.getFooter(), model.metrics(), metricsConfig);\n   }\n \n+  /**\n+   * Returns the number of bytes written by this writer.\n+   * NOTE: call {@link ParquetWriter#close()})} prior this method to get the exact number of bytes.", "originalCommit": "739fee73dea04657ee38b922d5275b5061c4118e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYzMTEwOA==", "url": "https://github.com/apache/iceberg/pull/2001#discussion_r551631108", "bodyText": "sounds good", "author": "dmgcodevil", "createdAt": "2021-01-04T23:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyNTE0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ea135f1a44f87bc6426af59a7621f08311665b6", "chunk": "diff --git a/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java b/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\nindex 7c3940f9..def7f8d1 100644\n--- a/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\n+++ b/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\n\n@@ -126,10 +126,10 @@ class ParquetWriter<T> implements FileAppender<T>, Closeable {\n   }\n \n   /**\n-   * Returns the number of bytes written by this writer.\n-   * NOTE: call {@link ParquetWriter#close()})} prior this method to get the exact number of bytes.\n-   *\n-   * @return the number of bytes written by this writer.\n+   * Returns the approximate length of the output file produced by this writer.\n+   * <p>\n+   * Prior to calling {@link ParquetWriter#close}, the result is approximate. After calling close, the length is\n+   * exact.\n    */\n   @Override\n   public long length() {\n"}}, {"oid": "7ea135f1a44f87bc6426af59a7621f08311665b6", "url": "https://github.com/apache/iceberg/commit/7ea135f1a44f87bc6426af59a7621f08311665b6", "message": "iss6369: improve docs", "committedDate": "2021-01-04T23:30:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExNzU4MA==", "url": "https://github.com/apache/iceberg/pull/2001#discussion_r552117580", "bodyText": "This needs a @return as well.", "author": "rdblue", "createdAt": "2021-01-05T18:34:07Z", "path": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java", "diffHunk": "@@ -124,10 +125,20 @@ public Metrics metrics() {\n     return ParquetUtil.footerMetrics(writer.getFooter(), model.metrics(), metricsConfig);\n   }\n \n+  /**\n+   * Returns the approximate length of the output file produced by this writer.\n+   * <p>\n+   * Prior to calling {@link ParquetWriter#close}, the result is approximate. After calling close, the length is\n+   * exact.", "originalCommit": "7ea135f1a44f87bc6426af59a7621f08311665b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49287d68165c668b989d47c9c9ff380d4d755d9e", "chunk": "diff --git a/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java b/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\nindex def7f8d1..f0a09f89 100644\n--- a/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\n+++ b/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\n\n@@ -130,6 +131,9 @@ class ParquetWriter<T> implements FileAppender<T>, Closeable {\n    * <p>\n    * Prior to calling {@link ParquetWriter#close}, the result is approximate. After calling close, the length is\n    * exact.\n+   *\n+   * @return the approximate length of the output file produced by this writer or the exact length if this writer is\n+   * closed.\n    */\n   @Override\n   public long length() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExNzc2OQ==", "url": "https://github.com/apache/iceberg/pull/2001#discussion_r552117769", "bodyText": "Nit: no need to use this. unless setting an instance variable.", "author": "rdblue", "createdAt": "2021-01-05T18:34:31Z", "path": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java", "diffHunk": "@@ -124,10 +125,20 @@ public Metrics metrics() {\n     return ParquetUtil.footerMetrics(writer.getFooter(), model.metrics(), metricsConfig);\n   }\n \n+  /**\n+   * Returns the approximate length of the output file produced by this writer.\n+   * <p>\n+   * Prior to calling {@link ParquetWriter#close}, the result is approximate. After calling close, the length is\n+   * exact.\n+   */\n   @Override\n   public long length() {\n     try {\n-      return writer.getPos() + (writeStore.isColumnFlushNeeded() ? writeStore.getBufferedSize() : 0);\n+      if (this.closed) {", "originalCommit": "7ea135f1a44f87bc6426af59a7621f08311665b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49287d68165c668b989d47c9c9ff380d4d755d9e", "chunk": "diff --git a/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java b/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\nindex def7f8d1..f0a09f89 100644\n--- a/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\n+++ b/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\n\n@@ -130,6 +131,9 @@ class ParquetWriter<T> implements FileAppender<T>, Closeable {\n    * <p>\n    * Prior to calling {@link ParquetWriter#close}, the result is approximate. After calling close, the length is\n    * exact.\n+   *\n+   * @return the approximate length of the output file produced by this writer or the exact length if this writer is\n+   * closed.\n    */\n   @Override\n   public long length() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExNzk5NQ==", "url": "https://github.com/apache/iceberg/pull/2001#discussion_r552117995", "bodyText": "We would normally use Preconditions.checkState for this, but this is minor.", "author": "rdblue", "createdAt": "2021-01-05T18:34:55Z", "path": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java", "diffHunk": "@@ -170,6 +181,10 @@ private void flushRowGroup(boolean finished) {\n   }\n \n   private void startRowGroup() {\n+    if (this.closed) {\n+      throw new IllegalStateException(\"Writer is closed\");\n+    }", "originalCommit": "7ea135f1a44f87bc6426af59a7621f08311665b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49287d68165c668b989d47c9c9ff380d4d755d9e", "chunk": "diff --git a/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java b/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\nindex def7f8d1..f0a09f89 100644\n--- a/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\n+++ b/parquet/src/main/java/org/apache/iceberg/parquet/ParquetWriter.java\n\n@@ -181,9 +185,7 @@ class ParquetWriter<T> implements FileAppender<T>, Closeable {\n   }\n \n   private void startRowGroup() {\n-    if (this.closed) {\n-      throw new IllegalStateException(\"Writer is closed\");\n-    }\n+    Preconditions.checkState(!closed, \"Writer is closed\");\n \n     try {\n       this.nextRowGroupSize = Math.min(writer.getNextRowGroupSize(), targetRowGroupSize);\n"}}, {"oid": "49287d68165c668b989d47c9c9ff380d4d755d9e", "url": "https://github.com/apache/iceberg/commit/49287d68165c668b989d47c9c9ff380d4d755d9e", "message": "iss6369: code style", "committedDate": "2021-01-05T19:27:10Z", "type": "commit"}, {"oid": "c9fb1e248728cd7ee4a71993faece7cd874711b5", "url": "https://github.com/apache/iceberg/commit/c9fb1e248728cd7ee4a71993faece7cd874711b5", "message": "iss6369: code style", "committedDate": "2021-01-05T19:31:32Z", "type": "commit"}]}