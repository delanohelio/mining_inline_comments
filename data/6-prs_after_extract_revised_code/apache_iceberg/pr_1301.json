{"pr_number": 1301, "pr_title": "Add position delete filter and utils", "pr_createdAt": "2020-08-06T01:23:50Z", "pr_url": "https://github.com/apache/iceberg/pull/1301", "timeline": [{"oid": "01dc9342b07fb64ecc9353647642232bbd8c24ec", "url": "https://github.com/apache/iceberg/commit/01dc9342b07fb64ecc9353647642232bbd8c24ec", "message": "Add position delete filter and utils.", "committedDate": "2020-08-06T01:21:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5MTYzNw==", "url": "https://github.com/apache/iceberg/pull/1301#discussion_r466091637", "bodyText": "We can move this to a better place later, but it isn't available elsewhere so it makes sense to add it here.", "author": "rdblue", "createdAt": "2020-08-06T01:25:19Z", "path": "core/src/main/java/org/apache/iceberg/deletes/Deletes.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.deletes;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import org.apache.iceberg.Accessor;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.StructLike;\n+import org.apache.iceberg.io.CloseableGroup;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.io.CloseableIterator;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Iterators;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.apache.iceberg.types.Comparators;\n+import org.apache.iceberg.types.Types;\n+import org.apache.iceberg.util.Filter;\n+import org.apache.iceberg.util.FilterIterator;\n+import org.apache.iceberg.util.SortedMerge;\n+import org.apache.iceberg.util.StructLikeWrapper;\n+\n+public class Deletes {\n+  private static final Schema POSITION_DELETE_SCHEMA = new Schema(", "originalCommit": "01dc9342b07fb64ecc9353647642232bbd8c24ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2b74c3569e937d8e900e7d03cd1e2c550fa735d6", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/deletes/Deletes.java b/core/src/main/java/org/apache/iceberg/deletes/Deletes.java\nindex 904544db3..7c3c78a03 100644\n--- a/core/src/main/java/org/apache/iceberg/deletes/Deletes.java\n+++ b/core/src/main/java/org/apache/iceberg/deletes/Deletes.java\n\n@@ -23,7 +23,6 @@ import java.io.IOException;\n import java.io.UncheckedIOException;\n import java.util.Comparator;\n import java.util.List;\n-import java.util.Set;\n import java.util.function.Function;\n import org.apache.iceberg.Accessor;\n import org.apache.iceberg.Schema;\n"}}, {"oid": "2b74c3569e937d8e900e7d03cd1e2c550fa735d6", "url": "https://github.com/apache/iceberg/commit/2b74c3569e937d8e900e7d03cd1e2c550fa735d6", "message": "Remove unused imports to fix checkstyle.", "committedDate": "2020-08-06T16:17:27Z", "type": "commit"}, {"oid": "ed60d0e0b13e9cd524d15c84dfada566b5e55ef4", "url": "https://github.com/apache/iceberg/commit/ed60d0e0b13e9cd524d15c84dfada566b5e55ef4", "message": "Fix line length for checkstyle.", "committedDate": "2020-08-06T17:50:39Z", "type": "commit"}, {"oid": "ed60d0e0b13e9cd524d15c84dfada566b5e55ef4", "url": "https://github.com/apache/iceberg/commit/ed60d0e0b13e9cd524d15c84dfada566b5e55ef4", "message": "Fix line length for checkstyle.", "committedDate": "2020-08-06T17:50:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyMTM1Mw==", "url": "https://github.com/apache/iceberg/pull/1301#discussion_r466621353", "bodyText": "Why filename and not file_path like we use for DataFile?", "author": "aokolnychyi", "createdAt": "2020-08-06T18:57:21Z", "path": "core/src/main/java/org/apache/iceberg/deletes/Deletes.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.deletes;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.function.Function;\n+import org.apache.iceberg.Accessor;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.StructLike;\n+import org.apache.iceberg.io.CloseableGroup;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.io.CloseableIterator;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.types.Comparators;\n+import org.apache.iceberg.types.Types;\n+import org.apache.iceberg.util.Filter;\n+import org.apache.iceberg.util.FilterIterator;\n+import org.apache.iceberg.util.SortedMerge;\n+\n+public class Deletes {\n+  private static final Schema POSITION_DELETE_SCHEMA = new Schema(\n+      Types.NestedField.required(1, \"filename\", Types.StringType.get(), \"Data file location of the deleted row\"),", "originalCommit": "ed60d0e0b13e9cd524d15c84dfada566b5e55ef4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1MTk1OA==", "url": "https://github.com/apache/iceberg/pull/1301#discussion_r466651958", "bodyText": "Didn't think about it. file_path sounds good to me.", "author": "rdblue", "createdAt": "2020-08-06T19:56:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyMTM1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4842c6a7e9d577b9463d8f32a6ae2e7215207ec7", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/deletes/Deletes.java b/core/src/main/java/org/apache/iceberg/deletes/Deletes.java\nindex be95f03cf..2b85cd085 100644\n--- a/core/src/main/java/org/apache/iceberg/deletes/Deletes.java\n+++ b/core/src/main/java/org/apache/iceberg/deletes/Deletes.java\n\n@@ -40,7 +40,7 @@ import org.apache.iceberg.util.SortedMerge;\n \n public class Deletes {\n   private static final Schema POSITION_DELETE_SCHEMA = new Schema(\n-      Types.NestedField.required(1, \"filename\", Types.StringType.get(), \"Data file location of the deleted row\"),\n+      Types.NestedField.required(1, \"file_path\", Types.StringType.get(), \"Data file location of the deleted row\"),\n       Types.NestedField.required(2, \"pos\", Types.LongType.get(), \"Row position in the data file of the deleted row\")\n   );\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY0Mjk2MA==", "url": "https://github.com/apache/iceberg/pull/1301#discussion_r466642960", "bodyText": "Does this mean we will filter out positions after we read data and project meta columns? Do we plan to push this down to readers in the future? How will it work with vectorized execution?", "author": "aokolnychyi", "createdAt": "2020-08-06T19:38:51Z", "path": "core/src/main/java/org/apache/iceberg/deletes/Deletes.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.deletes;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.function.Function;\n+import org.apache.iceberg.Accessor;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.StructLike;\n+import org.apache.iceberg.io.CloseableGroup;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.io.CloseableIterator;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.types.Comparators;\n+import org.apache.iceberg.types.Types;\n+import org.apache.iceberg.util.Filter;\n+import org.apache.iceberg.util.FilterIterator;\n+import org.apache.iceberg.util.SortedMerge;\n+\n+public class Deletes {\n+  private static final Schema POSITION_DELETE_SCHEMA = new Schema(\n+      Types.NestedField.required(1, \"filename\", Types.StringType.get(), \"Data file location of the deleted row\"),\n+      Types.NestedField.required(2, \"pos\", Types.LongType.get(), \"Row position in the data file of the deleted row\")\n+  );\n+\n+  private static final Accessor<StructLike> FILENAME_ACCESSOR = POSITION_DELETE_SCHEMA.accessorForField(1);\n+  private static final Accessor<StructLike> POSITION_ACCESSOR = POSITION_DELETE_SCHEMA.accessorForField(2);\n+\n+  private Deletes() {\n+  }\n+\n+  public static <T> CloseableIterable<T> positionFilter(CloseableIterable<T> rows, Function<T, Long> rowToPosition,\n+                                                        CloseableIterable<Long> posDeletes) {\n+    return new PositionDeleteFilter<>(rows, rowToPosition, posDeletes);\n+  }\n+\n+  public static CloseableIterable<Long> deletePositions(String dataLocation, CloseableIterable<StructLike> posDeletes) {\n+    return deletePositions(dataLocation, ImmutableList.of(posDeletes));\n+  }\n+\n+  public static CloseableIterable<Long> deletePositions(String dataLocation,\n+                                                        List<CloseableIterable<StructLike>> deleteFiles) {\n+    DataFileFilter locationFilter = new DataFileFilter(dataLocation);\n+    List<CloseableIterable<Long>> positions = Lists.transform(deleteFiles, deletes ->\n+        CloseableIterable.transform(locationFilter.filter(deletes), row -> (Long) POSITION_ACCESSOR.get(row)));\n+\n+    return new SortedMerge<>(Long::compare, positions);\n+  }\n+\n+  private static class PositionDeleteFilter<T> extends CloseableGroup implements CloseableIterable<T> {", "originalCommit": "ed60d0e0b13e9cd524d15c84dfada566b5e55ef4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NzcxNg==", "url": "https://github.com/apache/iceberg/pull/1301#discussion_r466667716", "bodyText": "This filter doesn't require us to answer most of those questions right now. All it requires is some object and a way to get the position of that object. That should be flexible enough that we can handle position as a column or using a class that directly supports it.\nFor the initial integration with Spark, I was thinking that we would add the _pos metadata column at the end of the requested projection. That way, we can return the rows without copying the data. At most, we would need to tell the row to report that it is one column shorter.\nThe main idea here is to make it easy for readers to create filters for tasks and apply them. The reader just needs to open the delete files, then pass them to these methods to merge deletes together and use them as a row filter.\nFor vectorization, we will probably want a different implementation, but we could reuse some of these classes (like the merging iterator).", "author": "rdblue", "createdAt": "2020-08-06T20:28:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY0Mjk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "4842c6a7e9d577b9463d8f32a6ae2e7215207ec7", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/deletes/Deletes.java b/core/src/main/java/org/apache/iceberg/deletes/Deletes.java\nindex be95f03cf..2b85cd085 100644\n--- a/core/src/main/java/org/apache/iceberg/deletes/Deletes.java\n+++ b/core/src/main/java/org/apache/iceberg/deletes/Deletes.java\n\n@@ -40,7 +40,7 @@ import org.apache.iceberg.util.SortedMerge;\n \n public class Deletes {\n   private static final Schema POSITION_DELETE_SCHEMA = new Schema(\n-      Types.NestedField.required(1, \"filename\", Types.StringType.get(), \"Data file location of the deleted row\"),\n+      Types.NestedField.required(1, \"file_path\", Types.StringType.get(), \"Data file location of the deleted row\"),\n       Types.NestedField.required(2, \"pos\", Types.LongType.get(), \"Row position in the data file of the deleted row\")\n   );\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NzYwNw==", "url": "https://github.com/apache/iceberg/pull/1301#discussion_r466657607", "bodyText": "Does this assume rows are ordered by position?", "author": "aokolnychyi", "createdAt": "2020-08-06T20:08:03Z", "path": "core/src/main/java/org/apache/iceberg/deletes/Deletes.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.deletes;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.function.Function;\n+import org.apache.iceberg.Accessor;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.StructLike;\n+import org.apache.iceberg.io.CloseableGroup;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.io.CloseableIterator;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.types.Comparators;\n+import org.apache.iceberg.types.Types;\n+import org.apache.iceberg.util.Filter;\n+import org.apache.iceberg.util.FilterIterator;\n+import org.apache.iceberg.util.SortedMerge;\n+\n+public class Deletes {\n+  private static final Schema POSITION_DELETE_SCHEMA = new Schema(\n+      Types.NestedField.required(1, \"filename\", Types.StringType.get(), \"Data file location of the deleted row\"),\n+      Types.NestedField.required(2, \"pos\", Types.LongType.get(), \"Row position in the data file of the deleted row\")\n+  );\n+\n+  private static final Accessor<StructLike> FILENAME_ACCESSOR = POSITION_DELETE_SCHEMA.accessorForField(1);\n+  private static final Accessor<StructLike> POSITION_ACCESSOR = POSITION_DELETE_SCHEMA.accessorForField(2);\n+\n+  private Deletes() {\n+  }\n+\n+  public static <T> CloseableIterable<T> positionFilter(CloseableIterable<T> rows, Function<T, Long> rowToPosition,\n+                                                        CloseableIterable<Long> posDeletes) {\n+    return new PositionDeleteFilter<>(rows, rowToPosition, posDeletes);\n+  }\n+\n+  public static CloseableIterable<Long> deletePositions(String dataLocation, CloseableIterable<StructLike> posDeletes) {\n+    return deletePositions(dataLocation, ImmutableList.of(posDeletes));\n+  }\n+\n+  public static CloseableIterable<Long> deletePositions(String dataLocation,\n+                                                        List<CloseableIterable<StructLike>> deleteFiles) {\n+    DataFileFilter locationFilter = new DataFileFilter(dataLocation);\n+    List<CloseableIterable<Long>> positions = Lists.transform(deleteFiles, deletes ->\n+        CloseableIterable.transform(locationFilter.filter(deletes), row -> (Long) POSITION_ACCESSOR.get(row)));\n+\n+    return new SortedMerge<>(Long::compare, positions);\n+  }\n+\n+  private static class PositionDeleteFilter<T> extends CloseableGroup implements CloseableIterable<T> {\n+    private final CloseableIterable<T> rows;\n+    private final Function<T, Long> extractPos;\n+    private final CloseableIterable<Long> deletePositions;\n+\n+    private PositionDeleteFilter(CloseableIterable<T> rows, Function<T, Long> extractPos,\n+                                 CloseableIterable<Long> deletePositions) {\n+      this.rows = rows;\n+      this.extractPos = extractPos;\n+      this.deletePositions = deletePositions;\n+    }\n+\n+    @Override\n+    public CloseableIterator<T> iterator() {\n+      CloseableIterator<Long> deletePosIterator = deletePositions.iterator();\n+\n+      CloseableIterator<T> iter;\n+      if (deletePosIterator.hasNext()) {\n+        iter = new PositionFilterIterator(rows.iterator(), deletePosIterator);\n+      } else {\n+        iter = rows.iterator();\n+        try {\n+          deletePosIterator.close();\n+        } catch (IOException e) {\n+          throw new UncheckedIOException(\"Failed to close delete positions iterator\", e);\n+        }\n+      }\n+\n+      addCloseable(iter);\n+\n+      return iter;\n+    }\n+\n+    private class PositionFilterIterator extends FilterIterator<T> {\n+      private final CloseableIterator<Long> deletePosIterator;\n+      private long nextDeletePos;\n+\n+      protected PositionFilterIterator(CloseableIterator<T> items, CloseableIterator<Long> deletePositions) {\n+        super(items);\n+        this.deletePosIterator = deletePositions;\n+        this.nextDeletePos = deletePosIterator.next();\n+      }\n+\n+      @Override\n+      protected boolean shouldKeep(T row) {\n+        long currentPos = extractPos.apply(row);", "originalCommit": "ed60d0e0b13e9cd524d15c84dfada566b5e55ef4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NzkwMg==", "url": "https://github.com/apache/iceberg/pull/1301#discussion_r466667902", "bodyText": "Yes, it assumes that positions are ascending, like the delete positions.", "author": "rdblue", "createdAt": "2020-08-06T20:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NzYwNw=="}], "type": "inlineReview", "revised_code": {"commit": "4842c6a7e9d577b9463d8f32a6ae2e7215207ec7", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/deletes/Deletes.java b/core/src/main/java/org/apache/iceberg/deletes/Deletes.java\nindex be95f03cf..2b85cd085 100644\n--- a/core/src/main/java/org/apache/iceberg/deletes/Deletes.java\n+++ b/core/src/main/java/org/apache/iceberg/deletes/Deletes.java\n\n@@ -40,7 +40,7 @@ import org.apache.iceberg.util.SortedMerge;\n \n public class Deletes {\n   private static final Schema POSITION_DELETE_SCHEMA = new Schema(\n-      Types.NestedField.required(1, \"filename\", Types.StringType.get(), \"Data file location of the deleted row\"),\n+      Types.NestedField.required(1, \"file_path\", Types.StringType.get(), \"Data file location of the deleted row\"),\n       Types.NestedField.required(2, \"pos\", Types.LongType.get(), \"Row position in the data file of the deleted row\")\n   );\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MTEwOA==", "url": "https://github.com/apache/iceberg/pull/1301#discussion_r466661108", "bodyText": "One of the assumptions was that positional deletes are lightweight and we can build an in-memory map from file_path to a set of deleted positions for a given task. If I understand correctly, the current logic will scan deleteFiles for every data file.", "author": "aokolnychyi", "createdAt": "2020-08-06T20:15:20Z", "path": "core/src/main/java/org/apache/iceberg/deletes/Deletes.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.deletes;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.function.Function;\n+import org.apache.iceberg.Accessor;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.StructLike;\n+import org.apache.iceberg.io.CloseableGroup;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.io.CloseableIterator;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.types.Comparators;\n+import org.apache.iceberg.types.Types;\n+import org.apache.iceberg.util.Filter;\n+import org.apache.iceberg.util.FilterIterator;\n+import org.apache.iceberg.util.SortedMerge;\n+\n+public class Deletes {\n+  private static final Schema POSITION_DELETE_SCHEMA = new Schema(\n+      Types.NestedField.required(1, \"filename\", Types.StringType.get(), \"Data file location of the deleted row\"),\n+      Types.NestedField.required(2, \"pos\", Types.LongType.get(), \"Row position in the data file of the deleted row\")\n+  );\n+\n+  private static final Accessor<StructLike> FILENAME_ACCESSOR = POSITION_DELETE_SCHEMA.accessorForField(1);\n+  private static final Accessor<StructLike> POSITION_ACCESSOR = POSITION_DELETE_SCHEMA.accessorForField(2);\n+\n+  private Deletes() {\n+  }\n+\n+  public static <T> CloseableIterable<T> positionFilter(CloseableIterable<T> rows, Function<T, Long> rowToPosition,\n+                                                        CloseableIterable<Long> posDeletes) {\n+    return new PositionDeleteFilter<>(rows, rowToPosition, posDeletes);\n+  }\n+\n+  public static CloseableIterable<Long> deletePositions(String dataLocation, CloseableIterable<StructLike> posDeletes) {\n+    return deletePositions(dataLocation, ImmutableList.of(posDeletes));\n+  }\n+\n+  public static CloseableIterable<Long> deletePositions(String dataLocation,\n+                                                        List<CloseableIterable<StructLike>> deleteFiles) {\n+    DataFileFilter locationFilter = new DataFileFilter(dataLocation);\n+    List<CloseableIterable<Long>> positions = Lists.transform(deleteFiles, deletes ->\n+        CloseableIterable.transform(locationFilter.filter(deletes), row -> (Long) POSITION_ACCESSOR.get(row)));\n+\n+    return new SortedMerge<>(Long::compare, positions);", "originalCommit": "ed60d0e0b13e9cd524d15c84dfada566b5e55ef4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MTcyMw==", "url": "https://github.com/apache/iceberg/pull/1301#discussion_r466661723", "bodyText": "Do we consider merge sort as a primary way of applying positional deletes or as a fallback when the number of delete files is too large?", "author": "aokolnychyi", "createdAt": "2020-08-06T20:16:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MTEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2ODQzMA==", "url": "https://github.com/apache/iceberg/pull/1301#discussion_r466668430", "bodyText": "That's right. This implementation is the streaming one. It should be simpler to build the version that caches deletes as a set.", "author": "rdblue", "createdAt": "2020-08-06T20:29:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MTEwOA=="}], "type": "inlineReview", "revised_code": {"commit": "4842c6a7e9d577b9463d8f32a6ae2e7215207ec7", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/deletes/Deletes.java b/core/src/main/java/org/apache/iceberg/deletes/Deletes.java\nindex be95f03cf..2b85cd085 100644\n--- a/core/src/main/java/org/apache/iceberg/deletes/Deletes.java\n+++ b/core/src/main/java/org/apache/iceberg/deletes/Deletes.java\n\n@@ -40,7 +40,7 @@ import org.apache.iceberg.util.SortedMerge;\n \n public class Deletes {\n   private static final Schema POSITION_DELETE_SCHEMA = new Schema(\n-      Types.NestedField.required(1, \"filename\", Types.StringType.get(), \"Data file location of the deleted row\"),\n+      Types.NestedField.required(1, \"file_path\", Types.StringType.get(), \"Data file location of the deleted row\"),\n       Types.NestedField.required(2, \"pos\", Types.LongType.get(), \"Row position in the data file of the deleted row\")\n   );\n \n"}}, {"oid": "4842c6a7e9d577b9463d8f32a6ae2e7215207ec7", "url": "https://github.com/apache/iceberg/commit/4842c6a7e9d577b9463d8f32a6ae2e7215207ec7", "message": "Use file_path for position delete location.", "committedDate": "2020-08-06T21:08:03Z", "type": "commit"}, {"oid": "1ec74b743522e65da60016e75a9e484a8692a0b9", "url": "https://github.com/apache/iceberg/commit/1ec74b743522e65da60016e75a9e484a8692a0b9", "message": "Fix imports for checkstyle.", "committedDate": "2020-08-06T21:09:05Z", "type": "commit"}]}