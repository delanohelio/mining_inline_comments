{"pr_number": 1340, "pr_title": "Introduce GenericAppenderFactory and GenericAppenderHelper", "pr_createdAt": "2020-08-14T06:53:00Z", "pr_url": "https://github.com/apache/iceberg/pull/1340", "timeline": [{"oid": "e2b8e6e7b7855e6051cc35dbbb86472b228c3821", "url": "https://github.com/apache/iceberg/commit/e2b8e6e7b7855e6051cc35dbbb86472b228c3821", "message": "Introduce GenericAppenderFactory and GenericAppenderHelper", "committedDate": "2020-08-14T08:27:05Z", "type": "forcePushed"}, {"oid": "31ef1f31040e8e1753bbf771f3166a215b9b89f4", "url": "https://github.com/apache/iceberg/commit/31ef1f31040e8e1753bbf771f3166a215b9b89f4", "message": "Introduce GenericAppenderFactory and GenericAppenderHelper", "committedDate": "2020-08-17T02:15:10Z", "type": "forcePushed"}, {"oid": "38e060571797e758c5562c3b0cedb76119008ffd", "url": "https://github.com/apache/iceberg/commit/38e060571797e758c5562c3b0cedb76119008ffd", "message": "Introduce GenericAppenderFactory and GenericAppenderHelper", "committedDate": "2020-08-17T08:44:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4NzIzMg==", "url": "https://github.com/apache/iceberg/pull/1340#discussion_r471887232", "bodyText": "The name is usually a table name for the given schema.   not fileFormat.   we may need to remove this line, or set it with a reasonable table name.", "author": "openinx", "createdAt": "2020-08-18T03:07:38Z", "path": "data/src/main/java/org/apache/iceberg/data/GenericAppenderFactory.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.data;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.avro.Avro;\n+import org.apache.iceberg.data.avro.DataWriter;\n+import org.apache.iceberg.data.orc.GenericOrcWriter;\n+import org.apache.iceberg.data.parquet.GenericParquetWriter;\n+import org.apache.iceberg.io.FileAppender;\n+import org.apache.iceberg.io.FileAppenderFactory;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.orc.ORC;\n+import org.apache.iceberg.parquet.Parquet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+\n+/**\n+ * Factory to create a new {@link FileAppender} to write {@link Record}s.\n+ */\n+public class GenericAppenderFactory implements FileAppenderFactory<Record> {\n+\n+  private final Schema schema;\n+  private final Map<String, String> config = Maps.newHashMap();\n+\n+  public GenericAppenderFactory(Schema schema) {\n+    this.schema = schema;\n+  }\n+\n+  public GenericAppenderFactory set(String property, String value) {\n+    config.put(property, value);\n+    return this;\n+  }\n+\n+  public GenericAppenderFactory setAll(Map<String, String> properties) {\n+    config.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public FileAppender<Record> newAppender(OutputFile outputFile, FileFormat fileFormat) {\n+    try {\n+      switch (fileFormat) {\n+        case AVRO:\n+          return Avro.write(outputFile)\n+              .schema(schema)\n+              .createWriterFunc(DataWriter::create)\n+              .named(fileFormat.name())", "originalCommit": "38e060571797e758c5562c3b0cedb76119008ffd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63744eb3c4e7b4820a4de8d77611ec54e2870a60", "chunk": "diff --git a/data/src/main/java/org/apache/iceberg/data/GenericAppenderFactory.java b/data/src/main/java/org/apache/iceberg/data/GenericAppenderFactory.java\nindex fdcf6af3b..e5d2652bc 100644\n--- a/data/src/main/java/org/apache/iceberg/data/GenericAppenderFactory.java\n+++ b/data/src/main/java/org/apache/iceberg/data/GenericAppenderFactory.java\n\n@@ -23,6 +23,7 @@ import java.io.IOException;\n import java.io.UncheckedIOException;\n import java.util.Map;\n import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.MetricsConfig;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.avro.Avro;\n import org.apache.iceberg.data.avro.DataWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4NzMwMQ==", "url": "https://github.com/apache/iceberg/pull/1340#discussion_r471887301", "bodyText": "ditto", "author": "openinx", "createdAt": "2020-08-18T03:07:53Z", "path": "data/src/main/java/org/apache/iceberg/data/GenericAppenderFactory.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.data;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.avro.Avro;\n+import org.apache.iceberg.data.avro.DataWriter;\n+import org.apache.iceberg.data.orc.GenericOrcWriter;\n+import org.apache.iceberg.data.parquet.GenericParquetWriter;\n+import org.apache.iceberg.io.FileAppender;\n+import org.apache.iceberg.io.FileAppenderFactory;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.orc.ORC;\n+import org.apache.iceberg.parquet.Parquet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+\n+/**\n+ * Factory to create a new {@link FileAppender} to write {@link Record}s.\n+ */\n+public class GenericAppenderFactory implements FileAppenderFactory<Record> {\n+\n+  private final Schema schema;\n+  private final Map<String, String> config = Maps.newHashMap();\n+\n+  public GenericAppenderFactory(Schema schema) {\n+    this.schema = schema;\n+  }\n+\n+  public GenericAppenderFactory set(String property, String value) {\n+    config.put(property, value);\n+    return this;\n+  }\n+\n+  public GenericAppenderFactory setAll(Map<String, String> properties) {\n+    config.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public FileAppender<Record> newAppender(OutputFile outputFile, FileFormat fileFormat) {\n+    try {\n+      switch (fileFormat) {\n+        case AVRO:\n+          return Avro.write(outputFile)\n+              .schema(schema)\n+              .createWriterFunc(DataWriter::create)\n+              .named(fileFormat.name())\n+              .setAll(config)\n+              .build();\n+\n+        case PARQUET:\n+          return Parquet.write(outputFile)\n+              .schema(schema)\n+              .createWriterFunc(GenericParquetWriter::buildWriter)\n+              .named(fileFormat.name())", "originalCommit": "38e060571797e758c5562c3b0cedb76119008ffd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63744eb3c4e7b4820a4de8d77611ec54e2870a60", "chunk": "diff --git a/data/src/main/java/org/apache/iceberg/data/GenericAppenderFactory.java b/data/src/main/java/org/apache/iceberg/data/GenericAppenderFactory.java\nindex fdcf6af3b..e5d2652bc 100644\n--- a/data/src/main/java/org/apache/iceberg/data/GenericAppenderFactory.java\n+++ b/data/src/main/java/org/apache/iceberg/data/GenericAppenderFactory.java\n\n@@ -23,6 +23,7 @@ import java.io.IOException;\n import java.io.UncheckedIOException;\n import java.util.Map;\n import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.MetricsConfig;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.avro.Avro;\n import org.apache.iceberg.data.avro.DataWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4NzkwOQ==", "url": "https://github.com/apache/iceberg/pull/1340#discussion_r471887909", "bodyText": "To keep the consistent semantics,  I suggest to set overwrite=true. Both flink and spark's FileAppenderFactory have enabled the overwrite.", "author": "openinx", "createdAt": "2020-08-18T03:10:12Z", "path": "data/src/main/java/org/apache/iceberg/data/GenericAppenderFactory.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.data;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.avro.Avro;\n+import org.apache.iceberg.data.avro.DataWriter;\n+import org.apache.iceberg.data.orc.GenericOrcWriter;\n+import org.apache.iceberg.data.parquet.GenericParquetWriter;\n+import org.apache.iceberg.io.FileAppender;\n+import org.apache.iceberg.io.FileAppenderFactory;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.orc.ORC;\n+import org.apache.iceberg.parquet.Parquet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+\n+/**\n+ * Factory to create a new {@link FileAppender} to write {@link Record}s.\n+ */\n+public class GenericAppenderFactory implements FileAppenderFactory<Record> {\n+\n+  private final Schema schema;\n+  private final Map<String, String> config = Maps.newHashMap();\n+\n+  public GenericAppenderFactory(Schema schema) {\n+    this.schema = schema;\n+  }\n+\n+  public GenericAppenderFactory set(String property, String value) {\n+    config.put(property, value);\n+    return this;\n+  }\n+\n+  public GenericAppenderFactory setAll(Map<String, String> properties) {\n+    config.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public FileAppender<Record> newAppender(OutputFile outputFile, FileFormat fileFormat) {\n+    try {\n+      switch (fileFormat) {\n+        case AVRO:\n+          return Avro.write(outputFile)\n+              .schema(schema)\n+              .createWriterFunc(DataWriter::create)\n+              .named(fileFormat.name())\n+              .setAll(config)\n+              .build();\n+\n+        case PARQUET:\n+          return Parquet.write(outputFile)\n+              .schema(schema)\n+              .createWriterFunc(GenericParquetWriter::buildWriter)\n+              .named(fileFormat.name())\n+              .setAll(config)\n+              .build();\n+\n+        case ORC:\n+          return ORC.write(outputFile)\n+              .schema(schema)\n+              .createWriterFunc(GenericOrcWriter::buildWriter)\n+              .setAll(config)", "originalCommit": "38e060571797e758c5562c3b0cedb76119008ffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2Nzc3Nw==", "url": "https://github.com/apache/iceberg/pull/1340#discussion_r473467777", "bodyText": "Yes, they do.", "author": "rdblue", "createdAt": "2020-08-20T00:21:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4NzkwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "63744eb3c4e7b4820a4de8d77611ec54e2870a60", "chunk": "diff --git a/data/src/main/java/org/apache/iceberg/data/GenericAppenderFactory.java b/data/src/main/java/org/apache/iceberg/data/GenericAppenderFactory.java\nindex fdcf6af3b..e5d2652bc 100644\n--- a/data/src/main/java/org/apache/iceberg/data/GenericAppenderFactory.java\n+++ b/data/src/main/java/org/apache/iceberg/data/GenericAppenderFactory.java\n\n@@ -23,6 +23,7 @@ import java.io.IOException;\n import java.io.UncheckedIOException;\n import java.util.Map;\n import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.MetricsConfig;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.avro.Avro;\n import org.apache.iceberg.data.avro.DataWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5NDcyOQ==", "url": "https://github.com/apache/iceberg/pull/1340#discussion_r471894729", "bodyText": "We could call the withPartition(partition) directly without this nullable check, because builder will handle  this inside it.", "author": "openinx", "createdAt": "2020-08-18T03:38:21Z", "path": "data/src/test/java/org/apache/iceberg/data/GenericAppenderHelper.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.data;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.iceberg.AppendFiles;\n+import org.apache.iceberg.DataFile;\n+import org.apache.iceberg.DataFiles;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.Files;\n+import org.apache.iceberg.StructLike;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.io.FileAppender;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.junit.Assert;\n+import org.junit.rules.TemporaryFolder;\n+\n+/**\n+ * Helper for appending {@link DataFile} to a table or appending {@link Record}s to a table.\n+ */\n+public class GenericAppenderHelper {\n+\n+  private final Table table;\n+  private final FileFormat fileFormat;\n+  private final TemporaryFolder tmp;\n+\n+  public GenericAppenderHelper(Table table, FileFormat fileFormat, TemporaryFolder tmp) {\n+    this.table = table;\n+    this.fileFormat = fileFormat;\n+    this.tmp = tmp;\n+  }\n+\n+  public void appendToTable(DataFile... dataFiles) {\n+    Preconditions.checkNotNull(table, \"table not set\");\n+\n+    AppendFiles append = table.newAppend();\n+\n+    for (DataFile dataFile : dataFiles) {\n+      append = append.appendFile(dataFile);\n+    }\n+\n+    append.commit();\n+  }\n+\n+  public void appendToTable(List<Record> records) throws IOException {\n+    appendToTable(null, records);\n+  }\n+\n+  public void appendToTable(StructLike partition, List<Record> records) throws IOException {\n+    appendToTable(writeFile(partition, records));\n+  }\n+\n+  public DataFile writeFile(StructLike partition, List<Record> records) throws IOException {\n+    Preconditions.checkNotNull(table, \"table not set\");\n+    File file = tmp.newFile();\n+    Assert.assertTrue(file.delete());\n+    return appendToLocalFile(table, file, fileFormat, partition, records);\n+  }\n+\n+  private static DataFile appendToLocalFile(\n+      Table table, File file, FileFormat format, StructLike partition, List<Record> records)\n+      throws IOException {\n+    FileAppender<Record> appender = new GenericAppenderFactory(table.schema()).newAppender(\n+        Files.localOutput(file), format);\n+    try (FileAppender<Record> fileAppender = appender) {\n+      fileAppender.addAll(records);\n+    }\n+\n+    DataFiles.Builder builder = DataFiles.builder(table.spec())\n+        .withRecordCount(records.size())\n+        .withFileSizeInBytes(file.length())\n+        .withPath(file.toURI().toString())\n+        .withMetrics(appender.metrics())\n+        .withFormat(format);\n+    if (partition != null) {", "originalCommit": "38e060571797e758c5562c3b0cedb76119008ffd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63744eb3c4e7b4820a4de8d77611ec54e2870a60", "chunk": "diff --git a/data/src/test/java/org/apache/iceberg/data/GenericAppenderHelper.java b/data/src/test/java/org/apache/iceberg/data/GenericAppenderHelper.java\nindex 13030883d..c32be0826 100644\n--- a/data/src/test/java/org/apache/iceberg/data/GenericAppenderHelper.java\n+++ b/data/src/test/java/org/apache/iceberg/data/GenericAppenderHelper.java\n\n@@ -85,15 +85,13 @@ public class GenericAppenderHelper {\n       fileAppender.addAll(records);\n     }\n \n-    DataFiles.Builder builder = DataFiles.builder(table.spec())\n+    return DataFiles.builder(table.spec())\n         .withRecordCount(records.size())\n         .withFileSizeInBytes(file.length())\n         .withPath(file.toURI().toString())\n         .withMetrics(appender.metrics())\n-        .withFormat(format);\n-    if (partition != null) {\n-      builder.withPartition(partition);\n-    }\n-    return builder.build();\n+        .withFormat(format)\n+        .withPartition(partition)\n+        .build();\n   }\n }\n"}}, {"oid": "63744eb3c4e7b4820a4de8d77611ec54e2870a60", "url": "https://github.com/apache/iceberg/commit/63744eb3c4e7b4820a4de8d77611ec54e2870a60", "message": "Introduce GenericAppenderFactory and GenericAppenderHelper", "committedDate": "2020-08-19T03:12:46Z", "type": "commit"}, {"oid": "63744eb3c4e7b4820a4de8d77611ec54e2870a60", "url": "https://github.com/apache/iceberg/commit/63744eb3c4e7b4820a4de8d77611ec54e2870a60", "message": "Introduce GenericAppenderFactory and GenericAppenderHelper", "committedDate": "2020-08-19T03:12:46Z", "type": "forcePushed"}]}