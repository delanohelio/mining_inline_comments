{"pr_number": 1537, "pr_title": "API: Add name to Table and Catalog APIs", "pr_createdAt": "2020-10-01T00:55:38Z", "pr_url": "https://github.com/apache/iceberg/pull/1537", "timeline": [{"oid": "e37015cf1727c0ea108b5a18cdbe03b788f3bd9a", "url": "https://github.com/apache/iceberg/commit/e37015cf1727c0ea108b5a18cdbe03b788f3bd9a", "message": "API: Add name to Table and Catalog APIs", "committedDate": "2020-10-01T00:53:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5NTIzNQ==", "url": "https://github.com/apache/iceberg/pull/1537#discussion_r497895235", "bodyText": "I did not intend to add the name to the Catalog API but we need this for proper metadata table names.", "author": "aokolnychyi", "createdAt": "2020-10-01T00:56:50Z", "path": "api/src/main/java/org/apache/iceberg/catalog/Catalog.java", "diffHunk": "@@ -35,6 +35,15 @@\n  */\n public interface Catalog {\n \n+  /**\n+   * Return the name for this catalog.\n+   *\n+   * @return this catalog's name\n+   */\n+  default String name() {", "originalCommit": "e37015cf1727c0ea108b5a18cdbe03b788f3bd9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5NjQxMw==", "url": "https://github.com/apache/iceberg/pull/1537#discussion_r497896413", "bodyText": "It is debatable whether we have to default this. I did this to avoid breaking custom implementations.", "author": "aokolnychyi", "createdAt": "2020-10-01T00:58:36Z", "path": "api/src/main/java/org/apache/iceberg/Table.java", "diffHunk": "@@ -30,6 +30,15 @@\n  */\n public interface Table {\n \n+  /**\n+   * Return the full name for this table.\n+   *\n+   * @return this table's name\n+   */\n+  default String name() {", "originalCommit": "e37015cf1727c0ea108b5a18cdbe03b788f3bd9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5NzEyNw==", "url": "https://github.com/apache/iceberg/pull/1537#discussion_r497897127", "bodyText": "This was broken before as the name of the metadata table started with its type, not catalog.", "author": "aokolnychyi", "createdAt": "2020-10-01T00:59:50Z", "path": "core/src/main/java/org/apache/iceberg/MetadataTableUtils.java", "diffHunk": "@@ -59,10 +59,10 @@ public static Table createMetadataTableInstance(TableOperations originTableOps,\n   }\n \n   public static Table createMetadataTableInstance(TableOperations originTableOps,\n+                                                  String catalogName,", "originalCommit": "e37015cf1727c0ea108b5a18cdbe03b788f3bd9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c737af65de69f1e54545d559c04c6dded23323e5", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/MetadataTableUtils.java b/core/src/main/java/org/apache/iceberg/MetadataTableUtils.java\nindex 43c03f2b..0787215b 100644\n--- a/core/src/main/java/org/apache/iceberg/MetadataTableUtils.java\n+++ b/core/src/main/java/org/apache/iceberg/MetadataTableUtils.java\n\n@@ -30,39 +30,42 @@ public class MetadataTableUtils {\n     return MetadataTableType.from(identifier.name()) != null;\n   }\n \n-  public static Table createMetadataTableInstance(TableOperations originTableOps,\n-                                                  String fullTableName,\n+  public static Table createMetadataTableInstance(TableOperations ops,\n+                                                  String baseTableName,\n+                                                  String metadataTableName,\n                                                   MetadataTableType type) {\n-    Table baseTableForMetadata = new BaseTable(originTableOps, fullTableName);\n+    Table baseTable = new BaseTable(ops, baseTableName);\n     switch (type) {\n       case ENTRIES:\n-        return new ManifestEntriesTable(originTableOps, baseTableForMetadata);\n+        return new ManifestEntriesTable(ops, baseTable, metadataTableName);\n       case FILES:\n-        return new DataFilesTable(originTableOps, baseTableForMetadata);\n+        return new DataFilesTable(ops, baseTable, metadataTableName);\n       case HISTORY:\n-        return new HistoryTable(originTableOps, baseTableForMetadata);\n+        return new HistoryTable(ops, baseTable, metadataTableName);\n       case SNAPSHOTS:\n-        return new SnapshotsTable(originTableOps, baseTableForMetadata);\n+        return new SnapshotsTable(ops, baseTable, metadataTableName);\n       case MANIFESTS:\n-        return new ManifestsTable(originTableOps, baseTableForMetadata);\n+        return new ManifestsTable(ops, baseTable, metadataTableName);\n       case PARTITIONS:\n-        return new PartitionsTable(originTableOps, baseTableForMetadata);\n+        return new PartitionsTable(ops, baseTable, metadataTableName);\n       case ALL_DATA_FILES:\n-        return new AllDataFilesTable(originTableOps, baseTableForMetadata);\n+        return new AllDataFilesTable(ops, baseTable, metadataTableName);\n       case ALL_MANIFESTS:\n-        return new AllManifestsTable(originTableOps, baseTableForMetadata);\n+        return new AllManifestsTable(ops, baseTable, metadataTableName);\n       case ALL_ENTRIES:\n-        return new AllEntriesTable(originTableOps, baseTableForMetadata);\n+        return new AllEntriesTable(ops, baseTable, metadataTableName);\n       default:\n-        throw new NoSuchTableException(\"Unknown metadata table type: %s for %s\", type, fullTableName);\n+        throw new NoSuchTableException(\"Unknown metadata table type: %s for %s\", type, metadataTableName);\n     }\n   }\n \n-  public static Table createMetadataTableInstance(TableOperations originTableOps,\n+  public static Table createMetadataTableInstance(TableOperations ops,\n                                                   String catalogName,\n-                                                  TableIdentifier originTableIdentifier,\n+                                                  TableIdentifier baseTableIdentifier,\n+                                                  TableIdentifier metadataTableIdentifier,\n                                                   MetadataTableType type) {\n-    String fullTableName = BaseMetastoreCatalog.fullTableName(catalogName, originTableIdentifier);\n-    return createMetadataTableInstance(originTableOps, fullTableName, type);\n+    String baseTableName = BaseMetastoreCatalog.fullTableName(catalogName, baseTableIdentifier);\n+    String metadataTableName = BaseMetastoreCatalog.fullTableName(catalogName, metadataTableIdentifier);\n+    return createMetadataTableInstance(ops, baseTableName, metadataTableName, type);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5ODE2NQ==", "url": "https://github.com/apache/iceberg/pull/1537#discussion_r497898165", "bodyText": "Metadata tables loaded through HadoopTables will have their names as location.type (which is weird as we normally use location#type). I am not sure whether it is a big deal or not.", "author": "aokolnychyi", "createdAt": "2020-10-01T01:01:26Z", "path": "core/src/test/java/org/apache/iceberg/hadoop/TestHadoopTables.java", "diffHunk": "@@ -139,6 +139,18 @@ public void testCustomSortOrder() {\n     Assert.assertEquals(\"Transform must match\", transform, sortOrder.fields().get(0).transform());\n   }\n \n+  @Test\n+  public void testTableName() {\n+    PartitionSpec spec = PartitionSpec.builderFor(SCHEMA)\n+        .bucket(\"data\", 16)\n+        .build();\n+    String location = tableDir.toURI().toString();\n+    TABLES.create(SCHEMA, spec, location);\n+\n+    Table table = TABLES.load(location);", "originalCommit": "e37015cf1727c0ea108b5a18cdbe03b788f3bd9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk3OTMzNg==", "url": "https://github.com/apache/iceberg/pull/1537#discussion_r497979336", "bodyText": "I think ideally you would be able to use the result of name to load the table. I'd prefer to fix it if we can. Maybe we should pass the full metadata table name in, rather than having it added by the table implementation.", "author": "rdblue", "createdAt": "2020-10-01T04:39:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5ODE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNTEwOA==", "url": "https://github.com/apache/iceberg/pull/1537#discussion_r498405108", "bodyText": "I fixed it but it did require substantially more changes.", "author": "aokolnychyi", "createdAt": "2020-10-01T17:26:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5ODE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c737af65de69f1e54545d559c04c6dded23323e5", "chunk": "diff --git a/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopTables.java b/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopTables.java\nindex 8e442ebc..c3d0918a 100644\n--- a/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopTables.java\n+++ b/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopTables.java\n\n@@ -148,7 +148,10 @@ public class TestHadoopTables {\n     TABLES.create(SCHEMA, spec, location);\n \n     Table table = TABLES.load(location);\n-    Assert.assertEquals(\"Table name must match\", location, table.name());\n+    Assert.assertEquals(\"Name must match\", location, table.name());\n+\n+    Table snapshotsTable = TABLES.load(location + \"#snapshots\");\n+    Assert.assertEquals(\"Name must match\", location + \"#snapshots\", snapshotsTable.name());\n   }\n \n   private static void createDummyTable(File tableDir, File dataDir) throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk3ODU5NQ==", "url": "https://github.com/apache/iceberg/pull/1537#discussion_r497978595", "bodyText": "Why rename this?", "author": "rdblue", "createdAt": "2020-10-01T04:35:51Z", "path": "core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java", "diffHunk": "@@ -129,16 +129,16 @@ public TableBuilder buildTable(TableIdentifier identifier, Schema schema) {\n   }\n \n   private Table loadMetadataTable(TableIdentifier identifier) {\n-    String name = identifier.name();\n-    MetadataTableType type = MetadataTableType.from(name);\n+    String tableName = identifier.name();\n+    MetadataTableType type = MetadataTableType.from(tableName);", "originalCommit": "e37015cf1727c0ea108b5a18cdbe03b788f3bd9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNDg0NA==", "url": "https://github.com/apache/iceberg/pull/1537#discussion_r498404844", "bodyText": "We use name() a few lines below now. I think it will be confusing to have name() that is the catalog name and name that is the metadata table name in the same method.", "author": "aokolnychyi", "createdAt": "2020-10-01T17:26:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk3ODU5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMTE5Nw==", "url": "https://github.com/apache/iceberg/pull/1537#discussion_r498411197", "bodyText": "Makes sense, but if this is the metadata table name (e.g. \"files\") instead of the table name, I think it might make more sense to be specific: metadataName?", "author": "rdblue", "createdAt": "2020-10-01T17:38:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk3ODU5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1OTM1Mg==", "url": "https://github.com/apache/iceberg/pull/1537#discussion_r498459352", "bodyText": "I feel like the current way is a bit more consistent with the overall structure of the method: the method name is loadMetadataTable and we use baseTableIdentifier to refer to the base table.", "author": "aokolnychyi", "createdAt": "2020-10-01T19:10:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk3ODU5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c737af65de69f1e54545d559c04c6dded23323e5", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java b/core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java\nindex 505f7b76..45689dbd 100644\n--- a/core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java\n+++ b/core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java\n\n@@ -138,7 +138,7 @@ public abstract class BaseMetastoreCatalog implements Catalog {\n         throw new NoSuchTableException(\"Table does not exist: %s\", baseTableIdentifier);\n       }\n \n-      return MetadataTableUtils.createMetadataTableInstance(ops, name(), baseTableIdentifier, type);\n+      return MetadataTableUtils.createMetadataTableInstance(ops, name(), baseTableIdentifier, identifier, type);\n     } else {\n       throw new NoSuchTableException(\"Table does not exist: %s\", identifier);\n     }\n"}}, {"oid": "c737af65de69f1e54545d559c04c6dded23323e5", "url": "https://github.com/apache/iceberg/commit/c737af65de69f1e54545d559c04c6dded23323e5", "message": "Fix Hadoop tables", "committedDate": "2020-10-01T17:22:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNDE1Ng==", "url": "https://github.com/apache/iceberg/pull/1537#discussion_r498404156", "bodyText": "We instantiate some metadata tables in tests so I kept the old constructor too. Won't harm if someone is using it directly too.", "author": "aokolnychyi", "createdAt": "2020-10-01T17:25:12Z", "path": "core/src/main/java/org/apache/iceberg/AllDataFilesTable.java", "diffHunk": "@@ -42,10 +42,16 @@\n public class AllDataFilesTable extends BaseMetadataTable {\n   private final TableOperations ops;\n   private final Table table;\n+  private final String name;\n \n   public AllDataFilesTable(TableOperations ops, Table table) {", "originalCommit": "c737af65de69f1e54545d559c04c6dded23323e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwODkxNQ==", "url": "https://github.com/apache/iceberg/pull/1537#discussion_r498408915", "bodyText": "Does it need to be public? Maybe we should make the constructors package-private while we're making these changes. What do you think?", "author": "rdblue", "createdAt": "2020-10-01T17:33:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNDE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NzYwNA==", "url": "https://github.com/apache/iceberg/pull/1537#discussion_r498457604", "bodyText": "Updated.", "author": "aokolnychyi", "createdAt": "2020-10-01T19:06:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNDE1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "62b80cbf09bcc811dbfa63e5738b0c85c5fe7512", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/AllDataFilesTable.java b/core/src/main/java/org/apache/iceberg/AllDataFilesTable.java\nindex 6fd0f599..12114f10 100644\n--- a/core/src/main/java/org/apache/iceberg/AllDataFilesTable.java\n+++ b/core/src/main/java/org/apache/iceberg/AllDataFilesTable.java\n\n@@ -44,11 +44,11 @@ public class AllDataFilesTable extends BaseMetadataTable {\n   private final Table table;\n   private final String name;\n \n-  public AllDataFilesTable(TableOperations ops, Table table) {\n+  AllDataFilesTable(TableOperations ops, Table table) {\n     this(ops, table, table.name() + \".all_data_files\");\n   }\n \n-  public AllDataFilesTable(TableOperations ops, Table table, String name) {\n+  AllDataFilesTable(TableOperations ops, Table table, String name) {\n     this.ops = ops;\n     this.table = table;\n     this.name = name;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMjE0MQ==", "url": "https://github.com/apache/iceberg/pull/1537#discussion_r498412141", "bodyText": "Minor: Although it is the same thing, I think it would make this more readable to use catalog.name() directly. That way it is clear that the name isn't coming from the caching catalog.", "author": "rdblue", "createdAt": "2020-10-01T17:39:45Z", "path": "core/src/main/java/org/apache/iceberg/CachingCatalog.java", "diffHunk": "@@ -78,7 +83,9 @@ public Table loadTable(TableIdentifier ident) {\n         TableOperations ops = ((HasTableOperations) originTable).operations();\n         MetadataTableType type = MetadataTableType.from(canonicalized.name());\n \n-        Table metadataTable = MetadataTableUtils.createMetadataTableInstance(ops, originTableIdentifier, type);\n+        Table metadataTable = MetadataTableUtils.createMetadataTableInstance(\n+            ops, name(), originTableIdentifier,", "originalCommit": "c737af65de69f1e54545d559c04c6dded23323e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NzUyMg==", "url": "https://github.com/apache/iceberg/pull/1537#discussion_r498457522", "bodyText": "Done.", "author": "aokolnychyi", "createdAt": "2020-10-01T19:06:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMjE0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "62b80cbf09bcc811dbfa63e5738b0c85c5fe7512", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/CachingCatalog.java b/core/src/main/java/org/apache/iceberg/CachingCatalog.java\nindex f4c7cd2f..723bf52a 100644\n--- a/core/src/main/java/org/apache/iceberg/CachingCatalog.java\n+++ b/core/src/main/java/org/apache/iceberg/CachingCatalog.java\n\n@@ -84,7 +84,7 @@ public class CachingCatalog implements Catalog {\n         MetadataTableType type = MetadataTableType.from(canonicalized.name());\n \n         Table metadataTable = MetadataTableUtils.createMetadataTableInstance(\n-            ops, name(), originTableIdentifier,\n+            ops, catalog.name(), originTableIdentifier,\n             canonicalized, type);\n         tableCache.put(canonicalized, metadataTable);\n         return metadataTable;\n"}}, {"oid": "62b80cbf09bcc811dbfa63e5738b0c85c5fe7512", "url": "https://github.com/apache/iceberg/commit/62b80cbf09bcc811dbfa63e5738b0c85c5fe7512", "message": "Minor updates", "committedDate": "2020-10-01T19:06:08Z", "type": "commit"}, {"oid": "ccad56763e76232eb0d7ddca84e747fd9413ac3f", "url": "https://github.com/apache/iceberg/commit/ccad56763e76232eb0d7ddca84e747fd9413ac3f", "message": "Minor cleanup", "committedDate": "2020-10-01T19:12:53Z", "type": "commit"}]}