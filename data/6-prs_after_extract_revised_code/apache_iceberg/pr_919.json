{"pr_number": 919, "pr_title": "[ISSUE #672] Add SupportsNamespaces on HiveCatalog and HadoopCatalog", "pr_createdAt": "2020-04-12T11:19:27Z", "pr_url": "https://github.com/apache/iceberg/pull/919", "timeline": [{"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3", "url": "https://github.com/apache/iceberg/commit/d96445c14fafd1ec0234f0f4a51c4469a47e3ff3", "message": "[ISSUE #672] Add SupportsNamespaces on HiveCatalog and HadoopCatalog\n\n[ISSUE #672] Add SupportsNamespaces on HiveCatalog and HadoopCatalog\n\n[ISSUE #672] Fix the code address comments by Jerryshao\n\n[ISSUE #672] Add the empty namespace check in nameSpaceToHiveDb\n\n[ISSUE #672] Fix the code address comments by Ryan Blue\n\n[ISSUE #672] Fix the code address comments by Ryan Blue\n\n[ISSUE #672] Fix the code address comments by Ryan Blue\n\n[ISSUE #672] Fix RuntimeException to RuntimeIOException\n\n[ISSUE #672] Fix the code address comments by Ryan Blue\n\n[ISSUE #672] Fix the code address comments by Jerry Shao\n\n[ISSUE #672] Fix the code address comments by Ryan Blue\n\n[ISSUE #672] Fix the code address comments by Ryan Blue\n\n[ISSUE #672] Fix the code address comments by Ryan Blue\n\n[ISSUE #672] Fix the code address comments by Ryan Blue", "committedDate": "2020-04-12T11:08:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2OTI5MQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407669291", "bodyText": "Do you think there will be changes to a namespace other than setting properties and removing properties?\nIt may be much simpler to use setProperties(Namespace, Map<String, String>) and removeProperties(Namespace, Set<String>) instead of this and the NamespaceChange classes. What do you think?", "author": "rdblue", "createdAt": "2020-04-13T19:27:26Z", "path": "api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+\n+/**\n+ * Catalog methods for working with namespaces.\n+ * <p>\n+ * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+ * and must be returned by the discovery methods {@link #listNamespaces()} and\n+ * {@link #listNamespaces(Namespace namespace)}.\n+ * <p>\n+ * Catalog implementations are not required to maintain the existence of namespaces independent of\n+ * objects in a namespace. For example, a function catalog that loads functions using reflection\n+ * and uses Java packages as namespaces is not required to support the methods to create, alter, or\n+ * drop a namespace. Implementations are allowed to discover the existence of objects or namespaces\n+ * without throwing {@link NoSuchNamespaceException} when no namespace is found.\n+ */\n+public interface SupportsNamespaces {\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace {@link Namespace}.\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  default void createNamespace(Namespace namespace) {\n+    createNamespace(namespace, ImmutableMap.of());\n+  }\n+\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a multi-part namespace\n+   * @param metadata a string ImmutableMap of properties for the given namespace\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  void createNamespace(Namespace namespace, ImmutableMap<String, String> metadata);\n+\n+  /**\n+   * List top-level namespaces from the catalog.\n+   * <p>\n+   * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+   * and must be returned by this discovery method. For example, if table a.b.t exists, this method\n+   * must return [\"a\"] in the result array.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   */\n+  default List<Namespace> listNamespaces() {\n+    return listNamespaces(Namespace.empty());\n+  }\n+\n+  /**\n+   * List  namespaces from the namespace.\n+   * <p>\n+   * For example, if table a.b.t exists, use 'SELECT NAMESPACE IN a' this method\n+   * must return Namepace.of(\"a\",\"b\") {@link Namespace}.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Load metadata properties for a namespace.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return a string map of properties for the given namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Drop namespace, while the namespace haven't table or sub namespace will return true.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return true while drop success.\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  boolean dropNamespace(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Apply a set of metadata changes to a namespace in the catalog.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @param changes a collection of changes to apply to the namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   * @throws UnsupportedOperationException If namespace properties are not supported\n+   */\n+  boolean alterNamespace(Namespace namespace, NamespaceChange... changes) throws NoSuchNamespaceException;", "originalCommit": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0MTMyOA==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407841328", "bodyText": "I think that not only change the setting properties, the namespace also support to changes, like that  alterNamespace(oldNamespace,  {\"name\" : newNameSpace})", "author": "XiaokunDing", "createdAt": "2020-04-14T03:15:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2OTI5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3ODgyNg==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408278826", "bodyText": "Renames would use a rename method, not a SetProperty change.", "author": "rdblue", "createdAt": "2020-04-14T16:38:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2OTI5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NDAzOQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408684039", "bodyText": "OK I have implement the setProperties and removeProperties methods", "author": "XiaokunDing", "createdAt": "2020-04-15T08:52:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2OTI5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMzE0Ng==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409013146", "bodyText": "Looks good. Thanks!", "author": "rdblue", "createdAt": "2020-04-15T17:30:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2OTI5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9816043a960c9652bb55c3971c43980da175c8d9", "chunk": "diff --git a/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java b/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\nindex d5024cd6d..0ab4c597a 100644\n--- a/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\n+++ b/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\n\n@@ -54,11 +54,11 @@ public interface SupportsNamespaces {\n    * Create a namespace in the catalog.\n    *\n    * @param namespace a multi-part namespace\n-   * @param metadata a string ImmutableMap of properties for the given namespace\n+   * @param metadata a string Map of properties for the given namespace\n    * @throws AlreadyExistsException If the namespace already exists\n    * @throws UnsupportedOperationException If create is not a supported operation\n    */\n-  void createNamespace(Namespace namespace, ImmutableMap<String, String> metadata);\n+  void createNamespace(Namespace namespace, Map<String, String> metadata);\n \n   /**\n    * List top-level namespaces from the catalog.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MDY1Mw==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407670653", "bodyText": "This should use Map and not ImmutableMap. We don't want to leak Guava classes through this API.", "author": "rdblue", "createdAt": "2020-04-13T19:29:56Z", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -200,7 +210,101 @@ public void renameTable(TableIdentifier from, TableIdentifier to) {\n   }\n \n   @Override\n-  public void close() throws IOException {\n+  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {", "originalCommit": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0MjI1OA==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407842258", "bodyText": "OK", "author": "XiaokunDing", "createdAt": "2020-04-14T03:18:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MDY1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9816043a960c9652bb55c3971c43980da175c8d9", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java b/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\nindex e16fe8608..6a00a7279 100644\n--- a/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\n+++ b/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\n\n@@ -210,7 +211,7 @@ public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, Su\n   }\n \n   @Override\n-  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+  public void createNamespace(Namespace namespace, Map<String, String> meta) {\n     Preconditions.checkArgument(\n         !namespace.isEmpty(),\n         \"Cannot create namespace with invalid name: %s\", namespace);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MTYxMw==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407671613", "bodyText": "This shouldn't use the outer SLASH.join. Instead, use the new Path(String, String) constructor.", "author": "rdblue", "createdAt": "2020-04-13T19:31:50Z", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -101,14 +112,13 @@ protected String name() {\n     Preconditions.checkArgument(namespace.levels().length >= 1,\n         \"Missing database in table identifier: %s\", namespace);\n \n-    Joiner slash = Joiner.on(\"/\");\n-    Path nsPath = new Path(slash.join(warehouseLocation, slash.join(namespace.levels())));\n+    Path nsPath = new Path(SLASH.join(warehouseLocation, SLASH.join(namespace.levels())));", "originalCommit": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyODkwOA==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407928908", "bodyText": "fixed", "author": "XiaokunDing", "createdAt": "2020-04-14T07:40:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MTYxMw=="}], "type": "inlineReview", "revised_code": {"commit": "9816043a960c9652bb55c3971c43980da175c8d9", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java b/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\nindex e16fe8608..6a00a7279 100644\n--- a/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\n+++ b/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\n\n@@ -112,8 +115,7 @@ public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, Su\n     Preconditions.checkArgument(namespace.levels().length >= 1,\n         \"Missing database in table identifier: %s\", namespace);\n \n-    Path nsPath = new Path(SLASH.join(warehouseLocation, SLASH.join(namespace.levels())));\n-    FileSystem fs = Util.getFs(nsPath, conf);\n+    Path nsPath = new Path(warehouseLocation, SLASH.join(namespace.levels()));\n     Set<TableIdentifier> tblIdents = Sets.newHashSet();\n \n     try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MTg3Mw==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407671873", "bodyText": "Please fix path construction here and other places that need it as well.", "author": "rdblue", "createdAt": "2020-04-13T19:32:18Z", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -200,7 +210,101 @@ public void renameTable(TableIdentifier from, TableIdentifier to) {\n   }\n \n   @Override\n-  public void close() throws IOException {\n+  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+    Preconditions.checkArgument(\n+        !namespace.isEmpty(),\n+        \"Cannot create namespace with invalid name: %s\", namespace);\n+    if (!meta.isEmpty()) {\n+      throw new UnsupportedOperationException(\"Cannot create namespace \" + namespace + \" : metadata is not supported\");\n+    }\n+\n+    Path nsPath = new Path(warehouseLocation, SLASH.join(namespace.levels()));\n+    FileSystem fs = Util.getFs(nsPath, conf);\n+\n+    try {\n+      if (isNamespace(fs, nsPath)) {\n+        throw new AlreadyExistsException(\"Namespace '%s' already exists!\", namespace);\n+      }\n+\n+      fs.mkdirs(nsPath);\n+\n+    } catch (IOException e) {\n+      throw new RuntimeIOException(e, \"Create namespace failed: %s\", namespace);\n+    }\n   }\n \n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) {\n+    Path nsPath = new Path(SLASH.join(warehouseLocation, SLASH.join(namespace.levels())));", "originalCommit": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg2OTA2Nw==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407869067", "bodyText": "OK", "author": "XiaokunDing", "createdAt": "2020-04-14T05:04:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MTg3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9816043a960c9652bb55c3971c43980da175c8d9", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java b/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\nindex e16fe8608..6a00a7279 100644\n--- a/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\n+++ b/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\n\n@@ -210,7 +211,7 @@ public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, Su\n   }\n \n   @Override\n-  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+  public void createNamespace(Namespace namespace, Map<String, String> meta) {\n     Preconditions.checkArgument(\n         !namespace.isEmpty(),\n         \"Cannot create namespace with invalid name: %s\", namespace);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MjY0Mw==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407672643", "bodyText": "This can be moved outside of the try block.", "author": "rdblue", "createdAt": "2020-04-13T19:33:50Z", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -200,7 +210,101 @@ public void renameTable(TableIdentifier from, TableIdentifier to) {\n   }\n \n   @Override\n-  public void close() throws IOException {\n+  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+    Preconditions.checkArgument(\n+        !namespace.isEmpty(),\n+        \"Cannot create namespace with invalid name: %s\", namespace);\n+    if (!meta.isEmpty()) {\n+      throw new UnsupportedOperationException(\"Cannot create namespace \" + namespace + \" : metadata is not supported\");\n+    }\n+\n+    Path nsPath = new Path(warehouseLocation, SLASH.join(namespace.levels()));\n+    FileSystem fs = Util.getFs(nsPath, conf);\n+\n+    try {\n+      if (isNamespace(fs, nsPath)) {", "originalCommit": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyOTA4NA==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407929084", "bodyText": "OK", "author": "XiaokunDing", "createdAt": "2020-04-14T07:40:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MjY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9816043a960c9652bb55c3971c43980da175c8d9", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java b/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\nindex e16fe8608..6a00a7279 100644\n--- a/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\n+++ b/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\n\n@@ -210,7 +211,7 @@ public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, Su\n   }\n \n   @Override\n-  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+  public void createNamespace(Namespace namespace, Map<String, String> meta) {\n     Preconditions.checkArgument(\n         !namespace.isEmpty(),\n         \"Cannot create namespace with invalid name: %s\", namespace);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MzE2NQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407673165", "bodyText": "This file system should always be the same one. Can you add a final instance field for it using the warehouse path instead of calling getFs in each method?", "author": "rdblue", "createdAt": "2020-04-13T19:34:48Z", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -200,7 +210,101 @@ public void renameTable(TableIdentifier from, TableIdentifier to) {\n   }\n \n   @Override\n-  public void close() throws IOException {\n+  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+    Preconditions.checkArgument(\n+        !namespace.isEmpty(),\n+        \"Cannot create namespace with invalid name: %s\", namespace);\n+    if (!meta.isEmpty()) {\n+      throw new UnsupportedOperationException(\"Cannot create namespace \" + namespace + \" : metadata is not supported\");\n+    }\n+\n+    Path nsPath = new Path(warehouseLocation, SLASH.join(namespace.levels()));\n+    FileSystem fs = Util.getFs(nsPath, conf);", "originalCommit": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NjA0Mg==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407846042", "bodyText": "OK", "author": "XiaokunDing", "createdAt": "2020-04-14T03:33:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MzE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9816043a960c9652bb55c3971c43980da175c8d9", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java b/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\nindex e16fe8608..6a00a7279 100644\n--- a/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\n+++ b/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\n\n@@ -210,7 +211,7 @@ public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, Su\n   }\n \n   @Override\n-  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+  public void createNamespace(Namespace namespace, Map<String, String> meta) {\n     Preconditions.checkArgument(\n         !namespace.isEmpty(),\n         \"Cannot create namespace with invalid name: %s\", namespace);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MzU3MA==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407673570", "bodyText": "There should be a newline between method definitions.", "author": "rdblue", "createdAt": "2020-04-13T19:35:40Z", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -200,7 +210,101 @@ public void renameTable(TableIdentifier from, TableIdentifier to) {\n   }\n \n   @Override\n-  public void close() throws IOException {\n+  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+    Preconditions.checkArgument(\n+        !namespace.isEmpty(),\n+        \"Cannot create namespace with invalid name: %s\", namespace);\n+    if (!meta.isEmpty()) {\n+      throw new UnsupportedOperationException(\"Cannot create namespace \" + namespace + \" : metadata is not supported\");\n+    }\n+\n+    Path nsPath = new Path(warehouseLocation, SLASH.join(namespace.levels()));\n+    FileSystem fs = Util.getFs(nsPath, conf);\n+\n+    try {\n+      if (isNamespace(fs, nsPath)) {\n+        throw new AlreadyExistsException(\"Namespace '%s' already exists!\", namespace);\n+      }\n+\n+      fs.mkdirs(nsPath);\n+\n+    } catch (IOException e) {\n+      throw new RuntimeIOException(e, \"Create namespace failed: %s\", namespace);\n+    }\n   }\n \n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) {\n+    Path nsPath = new Path(SLASH.join(warehouseLocation, SLASH.join(namespace.levels())));\n+    FileSystem fs = Util.getFs(nsPath, conf);\n+\n+    if (!isNamespace(fs, nsPath)) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+\n+    try {\n+      return Stream.of(fs.listStatus(nsPath))\n+        .map(FileStatus::getPath)\n+        .filter(path -> isNamespace(fs, path))\n+        .map(path -> append(namespace, path.getName()))\n+        .collect(Collectors.toList());\n+    } catch (IOException ioe) {\n+      throw new RuntimeIOException(ioe, \"Failed to list namespace under: %s\", namespace);\n+    }\n+  }\n+\n+  @Override\n+  public boolean dropNamespace(Namespace namespace) {\n+    Path nsPath = new Path(SLASH.join(warehouseLocation, SLASH.join(namespace.levels())));\n+    FileSystem fs = Util.getFs(nsPath, conf);\n+\n+    try {\n+      if (!isNamespace(fs, nsPath) || namespace.isEmpty()) {\n+        throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+      }\n+\n+      return fs.delete(nsPath, true /* recursive */);\n+\n+    } catch (IOException e) {\n+      throw new RuntimeIOException(e, \"Namespace delete failed: %s\", namespace);\n+    }\n+  }\n+\n+  @Override\n+  public boolean alterNamespace(Namespace namespace, NamespaceChange... changes) {\n+    throw new UnsupportedOperationException(\n+        \"Cannot alter namespace \" + namespace + \" : alterNamespace is not supported\");\n+  }\n+\n+  @Override\n+  public Map<String, String> loadNamespaceMetadata(Namespace namespace) {\n+    Path nsPath = new Path(SLASH.join(warehouseLocation, SLASH.join(namespace.levels())));\n+    FileSystem fs = Util.getFs(nsPath, conf);\n+\n+    if (!isNamespace(fs, nsPath) || namespace.isEmpty()) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+\n+    return ImmutableMap.of(\"location\", nsPath.toString());\n+  }\n+\n+  private boolean isNamespace(FileSystem fs, Path path) {\n+    Path metadataPath = new Path(path, \"metadata\");\n+    try {\n+      return fs.isDirectory(path) && !(fs.exists(metadataPath) && fs.isDirectory(metadataPath) &&\n+          (fs.listStatus(metadataPath, TABLE_FILTER).length >= 1));\n+\n+    } catch (IOException ioe) {\n+      throw new RuntimeIOException(ioe, \"Failed to list namespace info: %s \", path);\n+    }\n+  }\n+  static Namespace append(Namespace ns, String name) {", "originalCommit": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyOTg2OQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407829869", "bodyText": "OK", "author": "XiaokunDing", "createdAt": "2020-04-14T02:32:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MzU3MA=="}], "type": "inlineReview", "revised_code": {"commit": "9816043a960c9652bb55c3971c43980da175c8d9", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java b/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\nindex e16fe8608..6a00a7279 100644\n--- a/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\n+++ b/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\n\n@@ -210,7 +211,7 @@ public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, Su\n   }\n \n   @Override\n-  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+  public void createNamespace(Namespace namespace, Map<String, String> meta) {\n     Preconditions.checkArgument(\n         !namespace.isEmpty(),\n         \"Cannot create namespace with invalid name: %s\", namespace);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NDAxMw==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407674013", "bodyText": "Is this used elsewhere, or can it be private?\nAlso, please move this static helper after instance methods.", "author": "rdblue", "createdAt": "2020-04-13T19:36:36Z", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -200,7 +210,101 @@ public void renameTable(TableIdentifier from, TableIdentifier to) {\n   }\n \n   @Override\n-  public void close() throws IOException {\n+  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+    Preconditions.checkArgument(\n+        !namespace.isEmpty(),\n+        \"Cannot create namespace with invalid name: %s\", namespace);\n+    if (!meta.isEmpty()) {\n+      throw new UnsupportedOperationException(\"Cannot create namespace \" + namespace + \" : metadata is not supported\");\n+    }\n+\n+    Path nsPath = new Path(warehouseLocation, SLASH.join(namespace.levels()));\n+    FileSystem fs = Util.getFs(nsPath, conf);\n+\n+    try {\n+      if (isNamespace(fs, nsPath)) {\n+        throw new AlreadyExistsException(\"Namespace '%s' already exists!\", namespace);\n+      }\n+\n+      fs.mkdirs(nsPath);\n+\n+    } catch (IOException e) {\n+      throw new RuntimeIOException(e, \"Create namespace failed: %s\", namespace);\n+    }\n   }\n \n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) {\n+    Path nsPath = new Path(SLASH.join(warehouseLocation, SLASH.join(namespace.levels())));\n+    FileSystem fs = Util.getFs(nsPath, conf);\n+\n+    if (!isNamespace(fs, nsPath)) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+\n+    try {\n+      return Stream.of(fs.listStatus(nsPath))\n+        .map(FileStatus::getPath)\n+        .filter(path -> isNamespace(fs, path))\n+        .map(path -> append(namespace, path.getName()))\n+        .collect(Collectors.toList());\n+    } catch (IOException ioe) {\n+      throw new RuntimeIOException(ioe, \"Failed to list namespace under: %s\", namespace);\n+    }\n+  }\n+\n+  @Override\n+  public boolean dropNamespace(Namespace namespace) {\n+    Path nsPath = new Path(SLASH.join(warehouseLocation, SLASH.join(namespace.levels())));\n+    FileSystem fs = Util.getFs(nsPath, conf);\n+\n+    try {\n+      if (!isNamespace(fs, nsPath) || namespace.isEmpty()) {\n+        throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+      }\n+\n+      return fs.delete(nsPath, true /* recursive */);\n+\n+    } catch (IOException e) {\n+      throw new RuntimeIOException(e, \"Namespace delete failed: %s\", namespace);\n+    }\n+  }\n+\n+  @Override\n+  public boolean alterNamespace(Namespace namespace, NamespaceChange... changes) {\n+    throw new UnsupportedOperationException(\n+        \"Cannot alter namespace \" + namespace + \" : alterNamespace is not supported\");\n+  }\n+\n+  @Override\n+  public Map<String, String> loadNamespaceMetadata(Namespace namespace) {\n+    Path nsPath = new Path(SLASH.join(warehouseLocation, SLASH.join(namespace.levels())));\n+    FileSystem fs = Util.getFs(nsPath, conf);\n+\n+    if (!isNamespace(fs, nsPath) || namespace.isEmpty()) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+\n+    return ImmutableMap.of(\"location\", nsPath.toString());\n+  }\n+\n+  private boolean isNamespace(FileSystem fs, Path path) {\n+    Path metadataPath = new Path(path, \"metadata\");\n+    try {\n+      return fs.isDirectory(path) && !(fs.exists(metadataPath) && fs.isDirectory(metadataPath) &&\n+          (fs.listStatus(metadataPath, TABLE_FILTER).length >= 1));\n+\n+    } catch (IOException ioe) {\n+      throw new RuntimeIOException(ioe, \"Failed to list namespace info: %s \", path);\n+    }\n+  }\n+  static Namespace append(Namespace ns, String name) {", "originalCommit": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MDc1Ng==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407870756", "bodyText": "Ok fixed it to private", "author": "XiaokunDing", "createdAt": "2020-04-14T05:11:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NDAxMw=="}], "type": "inlineReview", "revised_code": {"commit": "9816043a960c9652bb55c3971c43980da175c8d9", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java b/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\nindex e16fe8608..6a00a7279 100644\n--- a/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\n+++ b/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\n\n@@ -210,7 +211,7 @@ public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, Su\n   }\n \n   @Override\n-  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+  public void createNamespace(Namespace namespace, Map<String, String> meta) {\n     Preconditions.checkArgument(\n         !namespace.isEmpty(),\n         \"Cannot create namespace with invalid name: %s\", namespace);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NDgwNA==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407674804", "bodyText": "What about an exists method? Is that something we should implement?", "author": "rdblue", "createdAt": "2020-04-13T19:38:10Z", "path": "api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+\n+/**\n+ * Catalog methods for working with namespaces.\n+ * <p>\n+ * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+ * and must be returned by the discovery methods {@link #listNamespaces()} and\n+ * {@link #listNamespaces(Namespace namespace)}.\n+ * <p>\n+ * Catalog implementations are not required to maintain the existence of namespaces independent of\n+ * objects in a namespace. For example, a function catalog that loads functions using reflection\n+ * and uses Java packages as namespaces is not required to support the methods to create, alter, or\n+ * drop a namespace. Implementations are allowed to discover the existence of objects or namespaces\n+ * without throwing {@link NoSuchNamespaceException} when no namespace is found.\n+ */\n+public interface SupportsNamespaces {", "originalCommit": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwMTI2MQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407901261", "bodyText": "OK I am implement an exists method", "author": "XiaokunDing", "createdAt": "2020-04-14T06:44:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NDgwNA=="}], "type": "inlineReview", "revised_code": {"commit": "9816043a960c9652bb55c3971c43980da175c8d9", "chunk": "diff --git a/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java b/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\nindex d5024cd6d..0ab4c597a 100644\n--- a/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\n+++ b/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\n\n@@ -54,11 +54,11 @@ public interface SupportsNamespaces {\n    * Create a namespace in the catalog.\n    *\n    * @param namespace a multi-part namespace\n-   * @param metadata a string ImmutableMap of properties for the given namespace\n+   * @param metadata a string Map of properties for the given namespace\n    * @throws AlreadyExistsException If the namespace already exists\n    * @throws UnsupportedOperationException If create is not a supported operation\n    */\n-  void createNamespace(Namespace namespace, ImmutableMap<String, String> metadata);\n+  void createNamespace(Namespace namespace, Map<String, String> metadata);\n \n   /**\n    * List top-level namespaces from the catalog.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NTUwNw==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407675507", "bodyText": "This violates the method contract. This should return false because the namespace did not exist.", "author": "rdblue", "createdAt": "2020-04-13T19:39:27Z", "path": "hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java", "diffHunk": "@@ -155,14 +164,146 @@ public void renameTable(TableIdentifier from, TableIdentifier to) {\n       throw new org.apache.iceberg.exceptions.AlreadyExistsException(\"Table already exists: %s\", to);\n \n     } catch (TException e) {\n-      throw new RuntimeException(\"Failed to rename \" + from.toString() + \" to \" + to.toString(), e);\n+      throw new RuntimeException(\"Failed to rename \" + from + \" to \" + to, e);\n \n     } catch (InterruptedException e) {\n       Thread.currentThread().interrupt();\n       throw new RuntimeException(\"Interrupted in call to rename\", e);\n     }\n   }\n \n+  @Override\n+  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+    Preconditions.checkArgument(\n+        !namespace.isEmpty(),\n+        \"Cannot create namespace with invalid name: %s\", namespace);\n+    Preconditions.checkArgument(\n+        namespace.levels().length == 1,\n+        \"Cannot support multi part namespace in Hive MetaStore: %s\", namespace);\n+\n+    try {\n+      clients.run(client -> {\n+        client.createDatabase(convertToDatabase(namespace, meta));\n+        return null;\n+      });\n+\n+    } catch (AlreadyExistsException e) {\n+      throw new org.apache.iceberg.exceptions.AlreadyExistsException(e, \"Namespace '%s' already exists!\",\n+            namespace);\n+\n+    } catch (TException e) {\n+      throw new RuntimeException(\"Failed to create namespace \" + namespace + \" in Hive MataStore\", e);\n+\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new RuntimeException(\n+          \"Interrupted in call to createDatabase(name) \" + namespace + \" in Hive MataStore\", e);\n+    }\n+  }\n+\n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) {\n+    if (namespace.levels().length > 1) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+    if (!namespace.isEmpty()) {\n+      return ImmutableList.of();\n+    }\n+    try {\n+      return clients.run(\n+          HiveMetaStoreClient::getAllDatabases)\n+          .stream()\n+          .map(Namespace::of)\n+          .collect(Collectors.toList());\n+\n+    } catch (TException e) {\n+      throw new RuntimeException(\"Failed to list all namespace: \" + namespace + \" in Hive MataStore\",  e);\n+\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new RuntimeException(\n+          \"Interrupted in call to getAllDatabases() \" + namespace + \" in Hive MataStore\", e);\n+    }\n+  }\n+\n+  @Override\n+  public boolean dropNamespace(Namespace namespace) {\n+    if (namespace.levels().length != 1) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);", "originalCommit": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1OTc2NQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407859765", "bodyText": "I think maybe throw an exception is better than return false. If only return a false at here, user could not know why there is false while drop a namespace.", "author": "XiaokunDing", "createdAt": "2020-04-14T04:28:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NTUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MzMyNg==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408283326", "bodyText": "No, this should return false to signal that the namespace didn't exist. The method always succeeds to make it idempotent.", "author": "rdblue", "createdAt": "2020-04-14T16:45:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NTUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1NTAyNA==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408555024", "bodyText": "OK, fixed", "author": "XiaokunDing", "createdAt": "2020-04-15T03:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NTUwNw=="}], "type": "inlineReview", "revised_code": {"commit": "9816043a960c9652bb55c3971c43980da175c8d9", "chunk": "diff --git a/hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java b/hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java\nindex c30a3ea24..3d38e6b82 100644\n--- a/hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java\n+++ b/hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java\n\n@@ -173,12 +173,11 @@ public class HiveCatalog extends BaseMetastoreCatalog implements Closeable, Supp\n   }\n \n   @Override\n-  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+  public void createNamespace(Namespace namespace, Map<String, String> meta) {\n     Preconditions.checkArgument(\n         !namespace.isEmpty(),\n         \"Cannot create namespace with invalid name: %s\", namespace);\n-    Preconditions.checkArgument(\n-        namespace.levels().length == 1,\n+    Preconditions.checkArgument(isValidateNamespace(namespace),\n         \"Cannot support multi part namespace in Hive MetaStore: %s\", namespace);\n \n     try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NTgxNw==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407675817", "bodyText": "Why does this cascade, but not delete data? Can you explain these options?", "author": "rdblue", "createdAt": "2020-04-13T19:40:01Z", "path": "hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java", "diffHunk": "@@ -155,14 +164,146 @@ public void renameTable(TableIdentifier from, TableIdentifier to) {\n       throw new org.apache.iceberg.exceptions.AlreadyExistsException(\"Table already exists: %s\", to);\n \n     } catch (TException e) {\n-      throw new RuntimeException(\"Failed to rename \" + from.toString() + \" to \" + to.toString(), e);\n+      throw new RuntimeException(\"Failed to rename \" + from + \" to \" + to, e);\n \n     } catch (InterruptedException e) {\n       Thread.currentThread().interrupt();\n       throw new RuntimeException(\"Interrupted in call to rename\", e);\n     }\n   }\n \n+  @Override\n+  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+    Preconditions.checkArgument(\n+        !namespace.isEmpty(),\n+        \"Cannot create namespace with invalid name: %s\", namespace);\n+    Preconditions.checkArgument(\n+        namespace.levels().length == 1,\n+        \"Cannot support multi part namespace in Hive MetaStore: %s\", namespace);\n+\n+    try {\n+      clients.run(client -> {\n+        client.createDatabase(convertToDatabase(namespace, meta));\n+        return null;\n+      });\n+\n+    } catch (AlreadyExistsException e) {\n+      throw new org.apache.iceberg.exceptions.AlreadyExistsException(e, \"Namespace '%s' already exists!\",\n+            namespace);\n+\n+    } catch (TException e) {\n+      throw new RuntimeException(\"Failed to create namespace \" + namespace + \" in Hive MataStore\", e);\n+\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new RuntimeException(\n+          \"Interrupted in call to createDatabase(name) \" + namespace + \" in Hive MataStore\", e);\n+    }\n+  }\n+\n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) {\n+    if (namespace.levels().length > 1) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+    if (!namespace.isEmpty()) {\n+      return ImmutableList.of();\n+    }\n+    try {\n+      return clients.run(\n+          HiveMetaStoreClient::getAllDatabases)\n+          .stream()\n+          .map(Namespace::of)\n+          .collect(Collectors.toList());\n+\n+    } catch (TException e) {\n+      throw new RuntimeException(\"Failed to list all namespace: \" + namespace + \" in Hive MataStore\",  e);\n+\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new RuntimeException(\n+          \"Interrupted in call to getAllDatabases() \" + namespace + \" in Hive MataStore\", e);\n+    }\n+  }\n+\n+  @Override\n+  public boolean dropNamespace(Namespace namespace) {\n+    if (namespace.levels().length != 1) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+\n+    try {\n+      clients.run(client -> {\n+        client.dropDatabase(namespace.level(0),\n+            false /* deleteData */,\n+            false /* ignoreUnknownDb */,\n+            true /* cascade */);", "originalCommit": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MzYzNQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407873635", "bodyText": "OK I fixed it, delete data together at here, I was think delete data is a danger operation.", "author": "XiaokunDing", "createdAt": "2020-04-14T05:22:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NTgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4NDE0Mg==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408284142", "bodyText": "Can you explain what all 3 options do? I'm not sure that this should cascade using Hive. If we are going to delete all tables, then this should probably be implemented in Iceberg so that we remove files that aren't in the table root.", "author": "rdblue", "createdAt": "2020-04-14T16:46:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NTgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NjQyOA==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408696428", "bodyText": "deleteData delete the underlying data or just delete the table in metadata store, we only delete the metadata from meta store, so deleteData is false.\ncascade is true,  while drop the database, this will drop the table of the database one by one, before drop the database. @rdblue would you means we should set cascade false if we  have not implement the iceberg table removed?", "author": "XiaokunDing", "createdAt": "2020-04-15T09:12:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NTgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxOTc4MA==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409019780", "bodyText": "I think we need to decide what the semantics are for dropNamespace. There are a few options:\n\ndropNamespace could check that the namespace is empty and throw a NamespaceNotEmptyException if it is not.\ndropNamespace could recursively delete, which I think is what cascade would do\ndropNamespace could have a cascade flag to recursively delete\n\nI think the easiest option to get this PR in is to go with Option 1. We can always add a cascade flag later to go switch to Option 3. And that way we don't have to worry about Hive behaviors and how to correctly clean up tables right now.", "author": "rdblue", "createdAt": "2020-04-15T17:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NTgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MDUxNg==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409270516", "bodyText": "OK thanks @rdblue I have implement the dropNamespace method like Option 1.", "author": "XiaokunDing", "createdAt": "2020-04-16T04:13:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NTgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0MjQ5Nw==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409742497", "bodyText": "Thank you! It looks much better. Just a few more comments.", "author": "rdblue", "createdAt": "2020-04-16T17:52:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NTgxNw=="}], "type": "inlineReview", "revised_code": {"commit": "9816043a960c9652bb55c3971c43980da175c8d9", "chunk": "diff --git a/hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java b/hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java\nindex c30a3ea24..3d38e6b82 100644\n--- a/hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java\n+++ b/hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java\n\n@@ -173,12 +173,11 @@ public class HiveCatalog extends BaseMetastoreCatalog implements Closeable, Supp\n   }\n \n   @Override\n-  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+  public void createNamespace(Namespace namespace, Map<String, String> meta) {\n     Preconditions.checkArgument(\n         !namespace.isEmpty(),\n         \"Cannot create namespace with invalid name: %s\", namespace);\n-    Preconditions.checkArgument(\n-        namespace.levels().length == 1,\n+    Preconditions.checkArgument(isValidateNamespace(namespace),\n         \"Cannot support multi part namespace in Hive MetaStore: %s\", namespace);\n \n     try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NjIwOQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407676209", "bodyText": "This is duplicated in a few places and can be refactored into a helper method, validateNamespace.", "author": "rdblue", "createdAt": "2020-04-13T19:40:44Z", "path": "hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java", "diffHunk": "@@ -155,14 +164,146 @@ public void renameTable(TableIdentifier from, TableIdentifier to) {\n       throw new org.apache.iceberg.exceptions.AlreadyExistsException(\"Table already exists: %s\", to);\n \n     } catch (TException e) {\n-      throw new RuntimeException(\"Failed to rename \" + from.toString() + \" to \" + to.toString(), e);\n+      throw new RuntimeException(\"Failed to rename \" + from + \" to \" + to, e);\n \n     } catch (InterruptedException e) {\n       Thread.currentThread().interrupt();\n       throw new RuntimeException(\"Interrupted in call to rename\", e);\n     }\n   }\n \n+  @Override\n+  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+    Preconditions.checkArgument(\n+        !namespace.isEmpty(),\n+        \"Cannot create namespace with invalid name: %s\", namespace);\n+    Preconditions.checkArgument(\n+        namespace.levels().length == 1,\n+        \"Cannot support multi part namespace in Hive MetaStore: %s\", namespace);\n+\n+    try {\n+      clients.run(client -> {\n+        client.createDatabase(convertToDatabase(namespace, meta));\n+        return null;\n+      });\n+\n+    } catch (AlreadyExistsException e) {\n+      throw new org.apache.iceberg.exceptions.AlreadyExistsException(e, \"Namespace '%s' already exists!\",\n+            namespace);\n+\n+    } catch (TException e) {\n+      throw new RuntimeException(\"Failed to create namespace \" + namespace + \" in Hive MataStore\", e);\n+\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new RuntimeException(\n+          \"Interrupted in call to createDatabase(name) \" + namespace + \" in Hive MataStore\", e);\n+    }\n+  }\n+\n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) {\n+    if (namespace.levels().length > 1) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+    if (!namespace.isEmpty()) {\n+      return ImmutableList.of();\n+    }\n+    try {\n+      return clients.run(\n+          HiveMetaStoreClient::getAllDatabases)\n+          .stream()\n+          .map(Namespace::of)\n+          .collect(Collectors.toList());\n+\n+    } catch (TException e) {\n+      throw new RuntimeException(\"Failed to list all namespace: \" + namespace + \" in Hive MataStore\",  e);\n+\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new RuntimeException(\n+          \"Interrupted in call to getAllDatabases() \" + namespace + \" in Hive MataStore\", e);\n+    }\n+  }\n+\n+  @Override\n+  public boolean dropNamespace(Namespace namespace) {\n+    if (namespace.levels().length != 1) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+\n+    try {\n+      clients.run(client -> {\n+        client.dropDatabase(namespace.level(0),\n+            false /* deleteData */,\n+            false /* ignoreUnknownDb */,\n+            true /* cascade */);\n+        return null;\n+      });\n+\n+      return true;\n+\n+    } catch (NoSuchObjectException e) {\n+      throw new NoSuchNamespaceException(e, \"Namespace does not exist: %s\", namespace);\n+\n+    } catch (TException e) {\n+      throw new RuntimeException(\"Failed to drop namespace \" + namespace + \" in Hive MataStore\", e);\n+\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new RuntimeException(\n+          \"Interrupted in call to drop dropDatabase(name) \" + namespace + \" in Hive MataStore\", e);\n+    }\n+  }\n+\n+  @Override\n+  public boolean alterNamespace(Namespace namespace, NamespaceChange... changes) {\n+    Map<String, String> newMeta = applyNamespaceChanges(loadNamespaceMetadata(namespace), changes);\n+\n+    try {\n+      clients.run(client -> {\n+        client.alterDatabase(namespace.level(0), convertToDatabase(namespace, newMeta));\n+        return null;\n+      });\n+\n+      return true;\n+\n+    } catch (NoSuchObjectException | UnknownDBException e) {\n+      throw new NoSuchNamespaceException(e, \"Namespace does not exist: %s\", namespace);\n+\n+    } catch (TException e) {\n+      throw new RuntimeException(\n+          \"Failed to list namespace under namespace: \" + namespace + \" in Hive MataStore\", e);\n+\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new RuntimeException(\"Interrupted in call to getDatabase(name) \" + namespace + \" in Hive MataStore\", e);\n+    }\n+  }\n+\n+  @Override\n+  public Map<String, String> loadNamespaceMetadata(Namespace namespace) {\n+    if (namespace.levels().length != 1) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);", "originalCommit": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4ODM3Ng==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407888376", "bodyText": "OK", "author": "XiaokunDing", "createdAt": "2020-04-14T06:08:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NjIwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "9816043a960c9652bb55c3971c43980da175c8d9", "chunk": "diff --git a/hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java b/hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java\nindex c30a3ea24..3d38e6b82 100644\n--- a/hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java\n+++ b/hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java\n\n@@ -173,12 +173,11 @@ public class HiveCatalog extends BaseMetastoreCatalog implements Closeable, Supp\n   }\n \n   @Override\n-  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+  public void createNamespace(Namespace namespace, Map<String, String> meta) {\n     Preconditions.checkArgument(\n         !namespace.isEmpty(),\n         \"Cannot create namespace with invalid name: %s\", namespace);\n-    Preconditions.checkArgument(\n-        namespace.levels().length == 1,\n+    Preconditions.checkArgument(isValidateNamespace(namespace),\n         \"Cannot support multi part namespace in Hive MetaStore: %s\", namespace);\n \n     try {\n"}}, {"oid": "9816043a960c9652bb55c3971c43980da175c8d9", "url": "https://github.com/apache/iceberg/commit/9816043a960c9652bb55c3971c43980da175c8d9", "message": "[ISSUE #672] Fix the code address comments by Ryan Blue", "committedDate": "2020-04-14T07:27:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3OTA0MQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408279041", "bodyText": "Please remove this newline.", "author": "rdblue", "createdAt": "2020-04-14T16:38:43Z", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -58,12 +65,17 @@\n  *\n  * Note: The HadoopCatalog requires that the underlying file system supports atomic rename.\n  */\n-public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable {\n+", "originalCommit": "9816043a960c9652bb55c3971c43980da175c8d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0NDc5OQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408544799", "bodyText": "OK", "author": "XiaokunDing", "createdAt": "2020-04-15T02:30:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3OTA0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "43ae7e68a93be8a8ff6a85b27e28639eb7431e57", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java b/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\nindex 6a00a7279..b1bdaf46b 100644\n--- a/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\n+++ b/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\n\n@@ -65,7 +64,6 @@ import org.apache.iceberg.exceptions.RuntimeIOException;\n  *\n  * Note: The HadoopCatalog requires that the underlying file system supports atomic rename.\n  */\n-\n public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n \n   private static final String ICEBERG_HADOOP_WAREHOUSE_BASE = \"iceberg/warehouse\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3OTIyMA==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408279220", "bodyText": "Please remove the trailing space in this error message.", "author": "rdblue", "createdAt": "2020-04-14T16:39:02Z", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -128,7 +140,7 @@ protected String name() {\n         }\n       }\n     } catch (IOException ioe) {\n-      throw new RuntimeException(\"Failed to list tables under \" + namespace, ioe);\n+      throw new RuntimeIOException(ioe, \"Failed to list tables under: %s \", namespace);", "originalCommit": "9816043a960c9652bb55c3971c43980da175c8d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0NTM0Mw==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408545343", "bodyText": "OK", "author": "XiaokunDing", "createdAt": "2020-04-15T02:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3OTIyMA=="}], "type": "inlineReview", "revised_code": {"commit": "43ae7e68a93be8a8ff6a85b27e28639eb7431e57", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java b/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\nindex 6a00a7279..b1bdaf46b 100644\n--- a/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\n+++ b/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\n\n@@ -140,7 +138,7 @@ public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, Su\n         }\n       }\n     } catch (IOException ioe) {\n-      throw new RuntimeIOException(ioe, \"Failed to list tables under: %s \", namespace);\n+      throw new RuntimeIOException(ioe, \"Failed to list tables under: %s\", namespace);\n     }\n \n     return Lists.newArrayList(tblIdents);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MDU5Mw==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408280593", "bodyText": "This should be named namespaceExists to match the table method tableExists.", "author": "rdblue", "createdAt": "2020-04-14T16:41:00Z", "path": "api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+\n+/**\n+ * Catalog methods for working with namespaces.\n+ * <p>\n+ * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+ * and must be returned by the discovery methods {@link #listNamespaces()} and\n+ * {@link #listNamespaces(Namespace namespace)}.\n+ * <p>\n+ * Catalog implementations are not required to maintain the existence of namespaces independent of\n+ * objects in a namespace. For example, a function catalog that loads functions using reflection\n+ * and uses Java packages as namespaces is not required to support the methods to create, alter, or\n+ * drop a namespace. Implementations are allowed to discover the existence of objects or namespaces\n+ * without throwing {@link NoSuchNamespaceException} when no namespace is found.\n+ */\n+public interface SupportsNamespaces {\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace {@link Namespace}.\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  default void createNamespace(Namespace namespace) {\n+    createNamespace(namespace, ImmutableMap.of());\n+  }\n+\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a multi-part namespace\n+   * @param metadata a string Map of properties for the given namespace\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  void createNamespace(Namespace namespace, Map<String, String> metadata);\n+\n+  /**\n+   * List top-level namespaces from the catalog.\n+   * <p>\n+   * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+   * and must be returned by this discovery method. For example, if table a.b.t exists, this method\n+   * must return [\"a\"] in the result array.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   */\n+  default List<Namespace> listNamespaces() {\n+    return listNamespaces(Namespace.empty());\n+  }\n+\n+  /**\n+   * List  namespaces from the namespace.\n+   * <p>\n+   * For example, if table a.b.t exists, use 'SELECT NAMESPACE IN a' this method\n+   * must return Namepace.of(\"a\",\"b\") {@link Namespace}.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Load metadata properties for a namespace.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return a string map of properties for the given namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Drop namespace, while the namespace haven't table or sub namespace will return true.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return true while drop success.\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  boolean dropNamespace(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Apply a set of metadata changes to a namespace in the catalog.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @param changes a collection of changes to apply to the namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   * @throws UnsupportedOperationException If namespace properties are not supported\n+   */\n+  boolean alterNamespace(Namespace namespace, NamespaceChange... changes) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Checks whether the Namespace exists.\n+   *\n+   * @return true if the Namespace exists, false otherwise\n+   */\n+  boolean existsNamespace(Namespace namespace);", "originalCommit": "9816043a960c9652bb55c3971c43980da175c8d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4NjA3NQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408286075", "bodyText": "I think this should have a default implementation that loads the namespace. If load returns, this should return true. Otherwise, this should return false. Like this:\n  default boolean namespaceExists(Namespace namespace) {\n    try {\n      loadNamespaceMetadata(namespace);\n      return true;\n    } catch (NoSuchNamespaceException e) {\n      return false;\n    }\n  }", "author": "rdblue", "createdAt": "2020-04-14T16:49:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MDU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MzIxOQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408553219", "bodyText": "Thanks, have fixed.", "author": "XiaokunDing", "createdAt": "2020-04-15T03:02:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MDU5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "43ae7e68a93be8a8ff6a85b27e28639eb7431e57", "chunk": "diff --git a/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java b/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\nindex 0ab4c597a..b7b4d43cc 100644\n--- a/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\n+++ b/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\n\n@@ -22,6 +22,7 @@ package org.apache.iceberg.catalog;\n import com.google.common.collect.ImmutableMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import org.apache.iceberg.exceptions.AlreadyExistsException;\n import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MDc3Ng==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408280776", "bodyText": "This needs a @param for the namespace argument.", "author": "rdblue", "createdAt": "2020-04-14T16:41:19Z", "path": "api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+\n+/**\n+ * Catalog methods for working with namespaces.\n+ * <p>\n+ * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+ * and must be returned by the discovery methods {@link #listNamespaces()} and\n+ * {@link #listNamespaces(Namespace namespace)}.\n+ * <p>\n+ * Catalog implementations are not required to maintain the existence of namespaces independent of\n+ * objects in a namespace. For example, a function catalog that loads functions using reflection\n+ * and uses Java packages as namespaces is not required to support the methods to create, alter, or\n+ * drop a namespace. Implementations are allowed to discover the existence of objects or namespaces\n+ * without throwing {@link NoSuchNamespaceException} when no namespace is found.\n+ */\n+public interface SupportsNamespaces {\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace {@link Namespace}.\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  default void createNamespace(Namespace namespace) {\n+    createNamespace(namespace, ImmutableMap.of());\n+  }\n+\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a multi-part namespace\n+   * @param metadata a string Map of properties for the given namespace\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  void createNamespace(Namespace namespace, Map<String, String> metadata);\n+\n+  /**\n+   * List top-level namespaces from the catalog.\n+   * <p>\n+   * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+   * and must be returned by this discovery method. For example, if table a.b.t exists, this method\n+   * must return [\"a\"] in the result array.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   */\n+  default List<Namespace> listNamespaces() {\n+    return listNamespaces(Namespace.empty());\n+  }\n+\n+  /**\n+   * List  namespaces from the namespace.\n+   * <p>\n+   * For example, if table a.b.t exists, use 'SELECT NAMESPACE IN a' this method\n+   * must return Namepace.of(\"a\",\"b\") {@link Namespace}.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Load metadata properties for a namespace.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return a string map of properties for the given namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Drop namespace, while the namespace haven't table or sub namespace will return true.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return true while drop success.\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  boolean dropNamespace(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Apply a set of metadata changes to a namespace in the catalog.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @param changes a collection of changes to apply to the namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   * @throws UnsupportedOperationException If namespace properties are not supported\n+   */\n+  boolean alterNamespace(Namespace namespace, NamespaceChange... changes) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Checks whether the Namespace exists.\n+   *\n+   * @return true if the Namespace exists, false otherwise", "originalCommit": "9816043a960c9652bb55c3971c43980da175c8d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MzA2OQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408553069", "bodyText": "OK", "author": "XiaokunDing", "createdAt": "2020-04-15T03:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MDc3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "43ae7e68a93be8a8ff6a85b27e28639eb7431e57", "chunk": "diff --git a/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java b/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\nindex 0ab4c597a..b7b4d43cc 100644\n--- a/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\n+++ b/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\n\n@@ -22,6 +22,7 @@ package org.apache.iceberg.catalog;\n import com.google.common.collect.ImmutableMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import org.apache.iceberg.exceptions.AlreadyExistsException;\n import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MjAxMA==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408282010", "bodyText": "This should be a namespace.", "author": "rdblue", "createdAt": "2020-04-14T16:43:11Z", "path": "api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+\n+/**\n+ * Catalog methods for working with namespaces.\n+ * <p>\n+ * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+ * and must be returned by the discovery methods {@link #listNamespaces()} and\n+ * {@link #listNamespaces(Namespace namespace)}.\n+ * <p>\n+ * Catalog implementations are not required to maintain the existence of namespaces independent of\n+ * objects in a namespace. For example, a function catalog that loads functions using reflection\n+ * and uses Java packages as namespaces is not required to support the methods to create, alter, or\n+ * drop a namespace. Implementations are allowed to discover the existence of objects or namespaces\n+ * without throwing {@link NoSuchNamespaceException} when no namespace is found.\n+ */\n+public interface SupportsNamespaces {\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace {@link Namespace}.\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  default void createNamespace(Namespace namespace) {\n+    createNamespace(namespace, ImmutableMap.of());\n+  }\n+\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a multi-part namespace\n+   * @param metadata a string Map of properties for the given namespace\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  void createNamespace(Namespace namespace, Map<String, String> metadata);\n+\n+  /**\n+   * List top-level namespaces from the catalog.\n+   * <p>\n+   * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+   * and must be returned by this discovery method. For example, if table a.b.t exists, this method\n+   * must return [\"a\"] in the result array.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   */\n+  default List<Namespace> listNamespaces() {\n+    return listNamespaces(Namespace.empty());\n+  }\n+\n+  /**\n+   * List  namespaces from the namespace.\n+   * <p>\n+   * For example, if table a.b.t exists, use 'SELECT NAMESPACE IN a' this method\n+   * must return Namepace.of(\"a\",\"b\") {@link Namespace}.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Load metadata properties for a namespace.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return a string map of properties for the given namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Drop namespace, while the namespace haven't table or sub namespace will return true.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}", "originalCommit": "9816043a960c9652bb55c3971c43980da175c8d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MjExNQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408282115", "bodyText": "Please update other instances of this as well.", "author": "rdblue", "createdAt": "2020-04-14T16:43:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MjAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MjcwOA==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408552708", "bodyText": "OK", "author": "XiaokunDing", "createdAt": "2020-04-15T03:00:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MjAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "43ae7e68a93be8a8ff6a85b27e28639eb7431e57", "chunk": "diff --git a/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java b/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\nindex 0ab4c597a..b7b4d43cc 100644\n--- a/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\n+++ b/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\n\n@@ -22,6 +22,7 @@ package org.apache.iceberg.catalog;\n import com.google.common.collect.ImmutableMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import org.apache.iceberg.exceptions.AlreadyExistsException;\n import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MjE4MQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408282181", "bodyText": "This should be true if the namespace was dropped.", "author": "rdblue", "createdAt": "2020-04-14T16:43:29Z", "path": "api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+\n+/**\n+ * Catalog methods for working with namespaces.\n+ * <p>\n+ * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+ * and must be returned by the discovery methods {@link #listNamespaces()} and\n+ * {@link #listNamespaces(Namespace namespace)}.\n+ * <p>\n+ * Catalog implementations are not required to maintain the existence of namespaces independent of\n+ * objects in a namespace. For example, a function catalog that loads functions using reflection\n+ * and uses Java packages as namespaces is not required to support the methods to create, alter, or\n+ * drop a namespace. Implementations are allowed to discover the existence of objects or namespaces\n+ * without throwing {@link NoSuchNamespaceException} when no namespace is found.\n+ */\n+public interface SupportsNamespaces {\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace {@link Namespace}.\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  default void createNamespace(Namespace namespace) {\n+    createNamespace(namespace, ImmutableMap.of());\n+  }\n+\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a multi-part namespace\n+   * @param metadata a string Map of properties for the given namespace\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  void createNamespace(Namespace namespace, Map<String, String> metadata);\n+\n+  /**\n+   * List top-level namespaces from the catalog.\n+   * <p>\n+   * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+   * and must be returned by this discovery method. For example, if table a.b.t exists, this method\n+   * must return [\"a\"] in the result array.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   */\n+  default List<Namespace> listNamespaces() {\n+    return listNamespaces(Namespace.empty());\n+  }\n+\n+  /**\n+   * List  namespaces from the namespace.\n+   * <p>\n+   * For example, if table a.b.t exists, use 'SELECT NAMESPACE IN a' this method\n+   * must return Namepace.of(\"a\",\"b\") {@link Namespace}.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Load metadata properties for a namespace.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return a string map of properties for the given namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Drop namespace, while the namespace haven't table or sub namespace will return true.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return true while drop success.", "originalCommit": "9816043a960c9652bb55c3971c43980da175c8d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MTY5OQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408551699", "bodyText": "thanks", "author": "XiaokunDing", "createdAt": "2020-04-15T02:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MjE4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "43ae7e68a93be8a8ff6a85b27e28639eb7431e57", "chunk": "diff --git a/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java b/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\nindex 0ab4c597a..b7b4d43cc 100644\n--- a/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\n+++ b/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\n\n@@ -22,6 +22,7 @@ package org.apache.iceberg.catalog;\n import com.google.common.collect.ImmutableMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import org.apache.iceberg.exceptions.AlreadyExistsException;\n import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MjQ5OA==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408282498", "bodyText": "Please remove this. This method should never throw NoSuchNamespaceException because that makes behavior ambiguous.", "author": "rdblue", "createdAt": "2020-04-14T16:43:56Z", "path": "api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+\n+/**\n+ * Catalog methods for working with namespaces.\n+ * <p>\n+ * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+ * and must be returned by the discovery methods {@link #listNamespaces()} and\n+ * {@link #listNamespaces(Namespace namespace)}.\n+ * <p>\n+ * Catalog implementations are not required to maintain the existence of namespaces independent of\n+ * objects in a namespace. For example, a function catalog that loads functions using reflection\n+ * and uses Java packages as namespaces is not required to support the methods to create, alter, or\n+ * drop a namespace. Implementations are allowed to discover the existence of objects or namespaces\n+ * without throwing {@link NoSuchNamespaceException} when no namespace is found.\n+ */\n+public interface SupportsNamespaces {\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace {@link Namespace}.\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  default void createNamespace(Namespace namespace) {\n+    createNamespace(namespace, ImmutableMap.of());\n+  }\n+\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a multi-part namespace\n+   * @param metadata a string Map of properties for the given namespace\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  void createNamespace(Namespace namespace, Map<String, String> metadata);\n+\n+  /**\n+   * List top-level namespaces from the catalog.\n+   * <p>\n+   * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+   * and must be returned by this discovery method. For example, if table a.b.t exists, this method\n+   * must return [\"a\"] in the result array.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   */\n+  default List<Namespace> listNamespaces() {\n+    return listNamespaces(Namespace.empty());\n+  }\n+\n+  /**\n+   * List  namespaces from the namespace.\n+   * <p>\n+   * For example, if table a.b.t exists, use 'SELECT NAMESPACE IN a' this method\n+   * must return Namepace.of(\"a\",\"b\") {@link Namespace}.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Load metadata properties for a namespace.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return a string map of properties for the given namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Drop namespace, while the namespace haven't table or sub namespace will return true.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return true while drop success.\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)", "originalCommit": "9816043a960c9652bb55c3971c43980da175c8d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MTUyMw==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408551523", "bodyText": "OK", "author": "XiaokunDing", "createdAt": "2020-04-15T02:55:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MjQ5OA=="}], "type": "inlineReview", "revised_code": {"commit": "43ae7e68a93be8a8ff6a85b27e28639eb7431e57", "chunk": "diff --git a/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java b/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\nindex 0ab4c597a..b7b4d43cc 100644\n--- a/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\n+++ b/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\n\n@@ -22,6 +22,7 @@ package org.apache.iceberg.catalog;\n import com.google.common.collect.ImmutableMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import org.apache.iceberg.exceptions.AlreadyExistsException;\n import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4NDkxOQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408284919", "bodyText": "Why must the namespace be non-empty?", "author": "rdblue", "createdAt": "2020-04-14T16:47:48Z", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -200,7 +211,104 @@ public void renameTable(TableIdentifier from, TableIdentifier to) {\n   }\n \n   @Override\n-  public void close() throws IOException {\n+  public void createNamespace(Namespace namespace, Map<String, String> meta) {\n+    Preconditions.checkArgument(\n+        !namespace.isEmpty(),\n+        \"Cannot create namespace with invalid name: %s\", namespace);\n+    if (!meta.isEmpty()) {\n+      throw new UnsupportedOperationException(\"Cannot create namespace \" + namespace + \" : metadata is not supported\");\n+    }\n+\n+    Path nsPath = new Path(warehouseLocation, SLASH.join(namespace.levels()));\n+\n+    if (isNamespace(nsPath)) {\n+      throw new AlreadyExistsException(\"Namespace '%s' already exists!\", namespace);\n+    }\n+\n+    try {\n+      fs.mkdirs(nsPath);\n+\n+    } catch (IOException e) {\n+      throw new RuntimeIOException(e, \"Create namespace failed: %s\", namespace);\n+    }\n+  }\n+\n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) {\n+    Path nsPath = namespace.isEmpty() ? new Path(warehouseLocation)\n+        : new Path(warehouseLocation, SLASH.join(namespace.levels()));\n+    if (!isNamespace(nsPath)) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+\n+    try {\n+      return Stream.of(fs.listStatus(nsPath))\n+        .map(FileStatus::getPath)\n+        .filter(path -> isNamespace(path))\n+        .map(path -> append(namespace, path.getName()))\n+        .collect(Collectors.toList());\n+    } catch (IOException ioe) {\n+      throw new RuntimeIOException(ioe, \"Failed to list namespace under: %s\", namespace);\n+    }\n+  }\n+\n+  private Namespace append(Namespace ns, String name) {\n+    String[] levels = Arrays.copyOfRange(ns.levels(), 0, ns.levels().length + 1);\n+    levels[ns.levels().length] = name;\n+    return Namespace.of(levels);\n+  }\n+\n+  @Override\n+  public boolean dropNamespace(Namespace namespace) {\n+    Path nsPath = new Path(warehouseLocation, SLASH.join(namespace.levels()));\n+\n+    if (!isNamespace(nsPath) || namespace.isEmpty()) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+\n+    try {\n+      return fs.delete(nsPath, true /* recursive */);\n+\n+    } catch (IOException e) {\n+      throw new RuntimeIOException(e, \"Namespace delete failed: %s\", namespace);\n+    }\n+  }\n+\n+  @Override\n+  public boolean alterNamespace(Namespace namespace, NamespaceChange... changes) {\n+    throw new UnsupportedOperationException(\n+        \"Cannot alter namespace \" + namespace + \" : alterNamespace is not supported\");\n   }\n \n+  @Override\n+  public Map<String, String> loadNamespaceMetadata(Namespace namespace) {\n+    Path nsPath = new Path(warehouseLocation, SLASH.join(namespace.levels()));\n+\n+    if (!isNamespace(nsPath) || namespace.isEmpty()) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+\n+    return ImmutableMap.of(\"location\", nsPath.toString());\n+  }\n+\n+  private boolean isNamespace(Path path) {\n+    Path metadataPath = new Path(path, \"metadata\");\n+    try {\n+      return fs.isDirectory(path) && !(fs.exists(metadataPath) && fs.isDirectory(metadataPath) &&\n+          (fs.listStatus(metadataPath, TABLE_FILTER).length >= 1));\n+\n+    } catch (IOException ioe) {\n+      throw new RuntimeIOException(ioe, \"Failed to list namespace info: %s \", path);\n+    }\n+  }\n+\n+  @Override\n+  public boolean existsNamespace(Namespace namespace) {\n+    Path nsPath = new Path(warehouseLocation, SLASH.join(namespace.levels()));\n+    return isNamespace(nsPath) && !namespace.isEmpty();", "originalCommit": "9816043a960c9652bb55c3971c43980da175c8d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MDgzMw==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408550833", "bodyText": "Because in Hive, the namespace is only one level, so namespace have not sub namespace.  the sentence like that show subNamespace from namespace we should return an empty list not throw an error.", "author": "XiaokunDing", "createdAt": "2020-04-15T02:53:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4NDkxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "43ae7e68a93be8a8ff6a85b27e28639eb7431e57", "chunk": "diff --git a/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java b/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\nindex 6a00a7279..b1bdaf46b 100644\n--- a/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\n+++ b/core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java\n\n@@ -263,7 +261,7 @@ public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, Su\n     Path nsPath = new Path(warehouseLocation, SLASH.join(namespace.levels()));\n \n     if (!isNamespace(nsPath) || namespace.isEmpty()) {\n-      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+      return false;\n     }\n \n     try {\n"}}, {"oid": "43ae7e68a93be8a8ff6a85b27e28639eb7431e57", "url": "https://github.com/apache/iceberg/commit/43ae7e68a93be8a8ff6a85b27e28639eb7431e57", "message": "[ISSUE #672] Fix the code address comments by Ryan Blue", "committedDate": "2020-04-15T10:12:52Z", "type": "commit"}, {"oid": "43ae7e68a93be8a8ff6a85b27e28639eb7431e57", "url": "https://github.com/apache/iceberg/commit/43ae7e68a93be8a8ff6a85b27e28639eb7431e57", "message": "[ISSUE #672] Fix the code address comments by Ryan Blue", "committedDate": "2020-04-15T10:12:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMTkzMw==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409011933", "bodyText": "I don't understand what this is trying to say. I think it should be this:\n\nDrop a namespace. If the namespace exists and was dropped, this will return true.\n\nIs this a recursive operation? That is, if the namespace is not empty (has child namespaces or tables) will those also be dropped?", "author": "rdblue", "createdAt": "2020-04-15T17:28:05Z", "path": "api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+\n+/**\n+ * Catalog methods for working with namespaces.\n+ * <p>\n+ * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+ * and must be returned by the discovery methods {@link #listNamespaces()} and\n+ * {@link #listNamespaces(Namespace namespace)}.\n+ * <p>\n+ * Catalog implementations are not required to maintain the existence of namespaces independent of\n+ * objects in a namespace. For example, a function catalog that loads functions using reflection\n+ * and uses Java packages as namespaces is not required to support the methods to create, alter, or\n+ * drop a namespace. Implementations are allowed to discover the existence of objects or namespaces\n+ * without throwing {@link NoSuchNamespaceException} when no namespace is found.\n+ */\n+public interface SupportsNamespaces {\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a namespace. {@link Namespace}.\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  default void createNamespace(Namespace namespace) {\n+    createNamespace(namespace, ImmutableMap.of());\n+  }\n+\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a multi-part namespace\n+   * @param metadata a string Map of properties for the given namespace\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  void createNamespace(Namespace namespace, Map<String, String> metadata);\n+\n+  /**\n+   * List top-level namespaces from the catalog.\n+   * <p>\n+   * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+   * and must be returned by this discovery method. For example, if table a.b.t exists, this method\n+   * must return [\"a\"] in the result array.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   */\n+  default List<Namespace> listNamespaces() {\n+    return listNamespaces(Namespace.empty());\n+  }\n+\n+  /**\n+   * List namespaces from the namespace.\n+   * <p>\n+   * For example, if table a.b.t exists, use 'SELECT NAMESPACE IN a' this method\n+   * must return Namepace.of(\"a\",\"b\") {@link Namespace}.\n+   *\n+   * @return a List of namespace {@link Namespace} names\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Load metadata properties for a namespace.\n+   *\n+   * @param namespace a namespace. {@link Namespace}\n+   * @return a string map of properties for the given namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Drop namespace, while the namespace haven't table or sub namespace will return true.", "originalCommit": "43ae7e68a93be8a8ff6a85b27e28639eb7431e57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMDU5Mw==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409020593", "bodyText": "I commented on the recursive options in a later thread.", "author": "rdblue", "createdAt": "2020-04-15T17:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMTkzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2OTg1MQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409269851", "bodyText": "ok I have fixed", "author": "XiaokunDing", "createdAt": "2020-04-16T04:10:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMTkzMw=="}], "type": "inlineReview", "revised_code": {"commit": "7d27a8eb60e5f6d221bc8769af9339db5215f69d", "chunk": "diff --git a/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java b/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\nindex b7b4d43cc..b52b66e9f 100644\n--- a/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\n+++ b/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\n\n@@ -24,6 +24,7 @@ import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMjk0Nw==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409012947", "bodyText": "Please remove extra newlines like this one.", "author": "rdblue", "createdAt": "2020-04-15T17:29:46Z", "path": "api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+\n+/**\n+ * Catalog methods for working with namespaces.\n+ * <p>\n+ * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+ * and must be returned by the discovery methods {@link #listNamespaces()} and\n+ * {@link #listNamespaces(Namespace namespace)}.\n+ * <p>\n+ * Catalog implementations are not required to maintain the existence of namespaces independent of\n+ * objects in a namespace. For example, a function catalog that loads functions using reflection\n+ * and uses Java packages as namespaces is not required to support the methods to create, alter, or\n+ * drop a namespace. Implementations are allowed to discover the existence of objects or namespaces\n+ * without throwing {@link NoSuchNamespaceException} when no namespace is found.\n+ */\n+public interface SupportsNamespaces {\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a namespace. {@link Namespace}.\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  default void createNamespace(Namespace namespace) {\n+    createNamespace(namespace, ImmutableMap.of());\n+  }\n+\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a multi-part namespace\n+   * @param metadata a string Map of properties for the given namespace\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  void createNamespace(Namespace namespace, Map<String, String> metadata);\n+\n+  /**\n+   * List top-level namespaces from the catalog.\n+   * <p>\n+   * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+   * and must be returned by this discovery method. For example, if table a.b.t exists, this method\n+   * must return [\"a\"] in the result array.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   */\n+  default List<Namespace> listNamespaces() {\n+    return listNamespaces(Namespace.empty());\n+  }\n+\n+  /**\n+   * List namespaces from the namespace.\n+   * <p>\n+   * For example, if table a.b.t exists, use 'SELECT NAMESPACE IN a' this method\n+   * must return Namepace.of(\"a\",\"b\") {@link Namespace}.\n+   *\n+   * @return a List of namespace {@link Namespace} names\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Load metadata properties for a namespace.\n+   *\n+   * @param namespace a namespace. {@link Namespace}\n+   * @return a string map of properties for the given namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Drop namespace, while the namespace haven't table or sub namespace will return true.\n+   *\n+   * @param namespace a namespace. {@link Namespace}\n+   * @return true if the namespace was dropped, false otherwise.\n+   */\n+  boolean dropNamespace(Namespace namespace);\n+\n+  /**\n+   * Apply a set of metadata to a namespace in the catalog.\n+   *\n+   * @param namespace a namespace. {@link Namespace}\n+   * @param properties a collection of metadata to apply to the namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   * @throws UnsupportedOperationException If namespace properties are not supported\n+   */\n+  boolean setProperties(Namespace namespace, Map<String, String> properties) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Remove a set of metadata from a namespace in the catalog.\n+   *\n+   * @param namespace a namespace. {@link Namespace}\n+   * @param properties a collection of metadata to apply to the namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   * @throws UnsupportedOperationException If namespace properties are not supported\n+   */\n+  boolean removeProperties(Namespace namespace, Set<String> properties) throws NoSuchNamespaceException;\n+", "originalCommit": "43ae7e68a93be8a8ff6a85b27e28639eb7431e57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2OTc3Mg==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409269772", "bodyText": "OK", "author": "XiaokunDing", "createdAt": "2020-04-16T04:09:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMjk0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7d27a8eb60e5f6d221bc8769af9339db5215f69d", "chunk": "diff --git a/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java b/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\nindex b7b4d43cc..b52b66e9f 100644\n--- a/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\n+++ b/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\n\n@@ -24,6 +24,7 @@ import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n \n /**\n"}}, {"oid": "7d27a8eb60e5f6d221bc8769af9339db5215f69d", "url": "https://github.com/apache/iceberg/commit/7d27a8eb60e5f6d221bc8769af9339db5215f69d", "message": "[ISSUE #672] Fix the code address comments by Ryan Blue", "committedDate": "2020-04-16T04:05:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMTQ2OA==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409731468", "bodyText": "Why is this optional?\nThis method should have a clear contract. Maybe deleting nested tables and maybe not deleting them is not reliable enough behavior.", "author": "rdblue", "createdAt": "2020-04-16T17:34:28Z", "path": "api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+\n+/**\n+ * Catalog methods for working with namespaces.\n+ * <p>\n+ * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+ * and must be returned by the discovery methods {@link #listNamespaces()} and\n+ * {@link #listNamespaces(Namespace namespace)}.\n+ * <p>\n+ * Catalog implementations are not required to maintain the existence of namespaces independent of\n+ * objects in a namespace. For example, a function catalog that loads functions using reflection\n+ * and uses Java packages as namespaces is not required to support the methods to create, alter, or\n+ * drop a namespace. Implementations are allowed to discover the existence of objects or namespaces\n+ * without throwing {@link NoSuchNamespaceException} when no namespace is found.\n+ */\n+public interface SupportsNamespaces {\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a namespace. {@link Namespace}.\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  default void createNamespace(Namespace namespace) {\n+    createNamespace(namespace, ImmutableMap.of());\n+  }\n+\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a multi-part namespace\n+   * @param metadata a string Map of properties for the given namespace\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  void createNamespace(Namespace namespace, Map<String, String> metadata);\n+\n+  /**\n+   * List top-level namespaces from the catalog.\n+   * <p>\n+   * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+   * and must be returned by this discovery method. For example, if table a.b.t exists, this method\n+   * must return [\"a\"] in the result array.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   */\n+  default List<Namespace> listNamespaces() {\n+    return listNamespaces(Namespace.empty());\n+  }\n+\n+  /**\n+   * List namespaces from the namespace.\n+   * <p>\n+   * For example, if table a.b.t exists, use 'SELECT NAMESPACE IN a' this method\n+   * must return Namepace.of(\"a\",\"b\") {@link Namespace}.\n+   *\n+   * @return a List of namespace {@link Namespace} names\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Load metadata properties for a namespace.\n+   *\n+   * @param namespace a namespace. {@link Namespace}\n+   * @return a string map of properties for the given namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Drop a namespace. If the namespace exists and was dropped, this will return true.\n+   *\n+   * @param namespace a namespace. {@link Namespace}\n+   * @return true if the namespace was dropped, false otherwise.\n+   * @throws NamespaceNotEmptyException If the namespace does not empty (optional)", "originalCommit": "7d27a8eb60e5f6d221bc8769af9339db5215f69d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMTQ3OA==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409901478", "bodyText": "Ok, thanks I have fixed it.", "author": "XiaokunDing", "createdAt": "2020-04-16T23:13:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMTQ2OA=="}], "type": "inlineReview", "revised_code": {"commit": "4e6bd757e425359c3fd6244839b944984d9fc41d", "chunk": "diff --git a/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java b/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\nindex b52b66e9f..0e3302a5a 100644\n--- a/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\n+++ b/api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java\n\n@@ -100,7 +100,7 @@ public interface SupportsNamespaces {\n    *\n    * @param namespace a namespace. {@link Namespace}\n    * @return true if the namespace was dropped, false otherwise.\n-   * @throws NamespaceNotEmptyException If the namespace does not empty (optional)\n+   * @throws NamespaceNotEmptyException If the namespace does not empty\n    */\n   boolean dropNamespace(Namespace namespace) throws NamespaceNotEmptyException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMjkzOA==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409732938", "bodyText": "What is meant by \"error\" in this context message?", "author": "rdblue", "createdAt": "2020-04-16T17:36:56Z", "path": "hive/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.hive;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.hadoop.hive.metastore.api.Database;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.types.Types;\n+import org.apache.thrift.TException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.apache.iceberg.types.Types.NestedField.required;\n+\n+public class TestHiveCatalog extends HiveMetastoreTest {\n+  private static final String hiveLocalDir = \"file:/tmp/hive/\" + UUID.randomUUID().toString();\n+  private static ImmutableMap meta = ImmutableMap.of(\n+      \"owner\", \"apache\",\n+      \"group\", \"iceberg\",\n+      \"comment\", \"iceberg  hiveCatalog test\");\n+\n+  @Test\n+  public void testCreateNamespace() throws TException {\n+    Namespace namespace1 = Namespace.of(\"noLocation\");\n+    catalog.createNamespace(namespace1, meta);\n+    Database database1 = metastoreClient.getDatabase(namespace1.toString());\n+\n+    Assert.assertTrue(database1.getParameters().get(\"owner\").equals(\"apache\"));\n+    Assert.assertTrue(database1.getParameters().get(\"group\").equals(\"iceberg\"));\n+\n+    Assert.assertEquals(\"There no same location for db and namespace\",\n+        database1.getLocationUri(), defaultUri(namespace1));\n+\n+    AssertHelpers.assertThrows(\"Should fail to create when namespace already exist \" + namespace1,\n+        org.apache.iceberg.exceptions.AlreadyExistsException.class,\n+        \"Namespace '\" + namespace1 + \"' already exists!\", () -> {\n+          catalog.createNamespace(namespace1);\n+        });\n+    ImmutableMap newMeta = ImmutableMap.<String, String>builder()\n+        .putAll(meta)\n+        .put(\"location\", hiveLocalDir)\n+        .build();\n+    Namespace namespace2 = Namespace.of(\"haveLocation\");\n+\n+    catalog.createNamespace(namespace2, newMeta);\n+    Database database2 = metastoreClient.getDatabase(namespace2.toString());\n+    Assert.assertEquals(\"There no same location for db and namespace\",\n+        database2.getLocationUri(), hiveLocalDir);\n+  }\n+\n+  @Test\n+  public void testListNamespace() throws TException {\n+    List<Namespace> namespaces;\n+    Namespace namespace1 = Namespace.of(\"dbname1\");\n+    catalog.createNamespace(namespace1, meta);\n+    namespaces = catalog.listNamespaces(namespace1);\n+    Assert.assertTrue(\"Hive db not hive the namespace 'dbname1'\", namespaces.isEmpty());\n+\n+    Namespace namespace2 = Namespace.of(\"dbname2\");\n+    catalog.createNamespace(namespace2, meta);\n+    namespaces = catalog.listNamespaces();\n+\n+    Assert.assertTrue(\"Hive db not hive the namespace 'dbname2'\", namespaces.contains(namespace2));\n+  }\n+\n+  @Test\n+  public void testLoadNamespaceMeta() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_load\");\n+\n+    catalog.createNamespace(namespace, meta);\n+\n+    Map<String, String> nameMata = catalog.loadNamespaceMetadata(namespace);\n+    Assert.assertTrue(nameMata.get(\"owner\").equals(\"apache\"));\n+    Assert.assertTrue(nameMata.get(\"group\").equals(\"iceberg\"));\n+    Assert.assertEquals(\"There no same location for db and namespace\",\n+        nameMata.get(\"location\"), catalog.convertToDatabase(namespace, meta).getLocationUri());\n+  }\n+\n+  @Test\n+  public void testNamespaceExists() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_exists\");\n+\n+    catalog.createNamespace(namespace, meta);\n+\n+    Assert.assertTrue(\"Should true to namespace exist\",\n+        catalog.namespaceExists(namespace));\n+    Assert.assertTrue(\"Should false to namespace doesn't exist\",\n+        !catalog.namespaceExists(Namespace.of(\"db2\", \"db2\", \"ns2\")));\n+  }\n+\n+  @Test\n+  public void testSetNamespaceProperties() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_set\");\n+\n+    catalog.createNamespace(namespace, meta);\n+    catalog.setProperties(namespace,\n+        ImmutableMap.of(\n+            \"owner\", \"alter_apache\",\n+            \"test\", \"test\",\n+            \"location\", \"file:/data/tmp\",\n+            \"comment\", \"iceberg test\")\n+    );\n+\n+    Database database = metastoreClient.getDatabase(namespace.level(0));\n+    Assert.assertEquals(database.getParameters().get(\"owner\"), \"alter_apache\");\n+    Assert.assertEquals(database.getParameters().get(\"test\"), \"test\");\n+    Assert.assertEquals(database.getParameters().get(\"group\"), \"iceberg\");\n+    AssertHelpers.assertThrows(\"Should fail to namespace not exist\" + namespace,\n+        org.apache.iceberg.exceptions.NoSuchNamespaceException.class,\n+        \"Namespace does not exist: \", () -> {\n+          catalog.setProperties(Namespace.of(\"db2\", \"db2\", \"ns2\"), meta);\n+        });\n+  }\n+\n+  @Test\n+  public void testRemoveNamespaceProperties() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_remove\");\n+\n+    catalog.createNamespace(namespace, meta);\n+\n+    catalog.removeProperties(namespace, ImmutableSet.of(\"comment\", \"owner\"));\n+\n+    Database database = metastoreClient.getDatabase(namespace.level(0));\n+\n+    Assert.assertEquals(database.getParameters().get(\"owner\"), null);\n+    Assert.assertEquals(database.getParameters().get(\"group\"), \"iceberg\");\n+    AssertHelpers.assertThrows(\"Should fail to namespace not exist\" + namespace,\n+        org.apache.iceberg.exceptions.NoSuchNamespaceException.class,\n+        \"Namespace does not exist: \", () -> {\n+          catalog.removeProperties(Namespace.of(\"db2\", \"db2\", \"ns2\"), ImmutableSet.of(\"comment\", \"owner\"));\n+        });\n+  }\n+\n+  @Test\n+  public void testDropNamespace() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_drop\");\n+    TableIdentifier identifier = TableIdentifier.of(namespace, \"table\");\n+    Schema schema = new Schema(Types.StructType.of(\n+        required(1, \"id\", Types.LongType.get())).fields());\n+\n+    catalog.createNamespace(namespace, meta);\n+    catalog.createTable(identifier, schema);\n+    Map<String, String> nameMata = catalog.loadNamespaceMetadata(namespace);\n+    Assert.assertTrue(nameMata.get(\"owner\").equals(\"apache\"));\n+    Assert.assertTrue(nameMata.get(\"group\").equals(\"iceberg\"));\n+\n+    AssertHelpers.assertThrows(\"Should fail to drop namespace is not empty\" + namespace,\n+        org.apache.iceberg.exceptions.NamespaceNotEmptyException.class,\n+        \"Namespace dbname_drop is not empty. One or more tables exist.\", () -> {\n+          catalog.dropNamespace(namespace);\n+        });\n+    Assert.assertTrue(catalog.dropTable(identifier, true));\n+    Assert.assertTrue(\"Drop namespace \" + namespace + \" error \", catalog.dropNamespace(namespace));", "originalCommit": "7d27a8eb60e5f6d221bc8769af9339db5215f69d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMDc0MA==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409900740", "bodyText": "fixed", "author": "XiaokunDing", "createdAt": "2020-04-16T23:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMjkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "4e6bd757e425359c3fd6244839b944984d9fc41d", "chunk": "diff --git a/hive/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java b/hive/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java\nindex 4d96ec34c..744295c1a 100644\n--- a/hive/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java\n+++ b/hive/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java\n\n@@ -29,6 +29,9 @@ import org.apache.iceberg.AssertHelpers;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.catalog.Namespace;\n import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n import org.apache.iceberg.types.Types;\n import org.apache.thrift.TException;\n import org.junit.Assert;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMzMyMQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409733321", "bodyText": "What is meant by \"error\" in this context message? The other messages describe the expectation that the assertion validates; the one above is an example of a good one: \"should fail to drop namespace if it is not empty\". Could you rephrase this to be similar?", "author": "rdblue", "createdAt": "2020-04-16T17:37:40Z", "path": "hive/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.hive;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.hadoop.hive.metastore.api.Database;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.types.Types;\n+import org.apache.thrift.TException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.apache.iceberg.types.Types.NestedField.required;\n+\n+public class TestHiveCatalog extends HiveMetastoreTest {\n+  private static final String hiveLocalDir = \"file:/tmp/hive/\" + UUID.randomUUID().toString();\n+  private static ImmutableMap meta = ImmutableMap.of(\n+      \"owner\", \"apache\",\n+      \"group\", \"iceberg\",\n+      \"comment\", \"iceberg  hiveCatalog test\");\n+\n+  @Test\n+  public void testCreateNamespace() throws TException {\n+    Namespace namespace1 = Namespace.of(\"noLocation\");\n+    catalog.createNamespace(namespace1, meta);\n+    Database database1 = metastoreClient.getDatabase(namespace1.toString());\n+\n+    Assert.assertTrue(database1.getParameters().get(\"owner\").equals(\"apache\"));\n+    Assert.assertTrue(database1.getParameters().get(\"group\").equals(\"iceberg\"));\n+\n+    Assert.assertEquals(\"There no same location for db and namespace\",\n+        database1.getLocationUri(), defaultUri(namespace1));\n+\n+    AssertHelpers.assertThrows(\"Should fail to create when namespace already exist \" + namespace1,\n+        org.apache.iceberg.exceptions.AlreadyExistsException.class,\n+        \"Namespace '\" + namespace1 + \"' already exists!\", () -> {\n+          catalog.createNamespace(namespace1);\n+        });\n+    ImmutableMap newMeta = ImmutableMap.<String, String>builder()\n+        .putAll(meta)\n+        .put(\"location\", hiveLocalDir)\n+        .build();\n+    Namespace namespace2 = Namespace.of(\"haveLocation\");\n+\n+    catalog.createNamespace(namespace2, newMeta);\n+    Database database2 = metastoreClient.getDatabase(namespace2.toString());\n+    Assert.assertEquals(\"There no same location for db and namespace\",\n+        database2.getLocationUri(), hiveLocalDir);\n+  }\n+\n+  @Test\n+  public void testListNamespace() throws TException {\n+    List<Namespace> namespaces;\n+    Namespace namespace1 = Namespace.of(\"dbname1\");\n+    catalog.createNamespace(namespace1, meta);\n+    namespaces = catalog.listNamespaces(namespace1);\n+    Assert.assertTrue(\"Hive db not hive the namespace 'dbname1'\", namespaces.isEmpty());\n+\n+    Namespace namespace2 = Namespace.of(\"dbname2\");\n+    catalog.createNamespace(namespace2, meta);\n+    namespaces = catalog.listNamespaces();\n+\n+    Assert.assertTrue(\"Hive db not hive the namespace 'dbname2'\", namespaces.contains(namespace2));\n+  }\n+\n+  @Test\n+  public void testLoadNamespaceMeta() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_load\");\n+\n+    catalog.createNamespace(namespace, meta);\n+\n+    Map<String, String> nameMata = catalog.loadNamespaceMetadata(namespace);\n+    Assert.assertTrue(nameMata.get(\"owner\").equals(\"apache\"));\n+    Assert.assertTrue(nameMata.get(\"group\").equals(\"iceberg\"));\n+    Assert.assertEquals(\"There no same location for db and namespace\",\n+        nameMata.get(\"location\"), catalog.convertToDatabase(namespace, meta).getLocationUri());\n+  }\n+\n+  @Test\n+  public void testNamespaceExists() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_exists\");\n+\n+    catalog.createNamespace(namespace, meta);\n+\n+    Assert.assertTrue(\"Should true to namespace exist\",\n+        catalog.namespaceExists(namespace));\n+    Assert.assertTrue(\"Should false to namespace doesn't exist\",\n+        !catalog.namespaceExists(Namespace.of(\"db2\", \"db2\", \"ns2\")));\n+  }\n+\n+  @Test\n+  public void testSetNamespaceProperties() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_set\");\n+\n+    catalog.createNamespace(namespace, meta);\n+    catalog.setProperties(namespace,\n+        ImmutableMap.of(\n+            \"owner\", \"alter_apache\",\n+            \"test\", \"test\",\n+            \"location\", \"file:/data/tmp\",\n+            \"comment\", \"iceberg test\")\n+    );\n+\n+    Database database = metastoreClient.getDatabase(namespace.level(0));\n+    Assert.assertEquals(database.getParameters().get(\"owner\"), \"alter_apache\");\n+    Assert.assertEquals(database.getParameters().get(\"test\"), \"test\");\n+    Assert.assertEquals(database.getParameters().get(\"group\"), \"iceberg\");\n+    AssertHelpers.assertThrows(\"Should fail to namespace not exist\" + namespace,\n+        org.apache.iceberg.exceptions.NoSuchNamespaceException.class,\n+        \"Namespace does not exist: \", () -> {\n+          catalog.setProperties(Namespace.of(\"db2\", \"db2\", \"ns2\"), meta);\n+        });\n+  }\n+\n+  @Test\n+  public void testRemoveNamespaceProperties() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_remove\");\n+\n+    catalog.createNamespace(namespace, meta);\n+\n+    catalog.removeProperties(namespace, ImmutableSet.of(\"comment\", \"owner\"));\n+\n+    Database database = metastoreClient.getDatabase(namespace.level(0));\n+\n+    Assert.assertEquals(database.getParameters().get(\"owner\"), null);\n+    Assert.assertEquals(database.getParameters().get(\"group\"), \"iceberg\");\n+    AssertHelpers.assertThrows(\"Should fail to namespace not exist\" + namespace,\n+        org.apache.iceberg.exceptions.NoSuchNamespaceException.class,\n+        \"Namespace does not exist: \", () -> {\n+          catalog.removeProperties(Namespace.of(\"db2\", \"db2\", \"ns2\"), ImmutableSet.of(\"comment\", \"owner\"));\n+        });\n+  }\n+\n+  @Test\n+  public void testDropNamespace() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_drop\");\n+    TableIdentifier identifier = TableIdentifier.of(namespace, \"table\");\n+    Schema schema = new Schema(Types.StructType.of(\n+        required(1, \"id\", Types.LongType.get())).fields());\n+\n+    catalog.createNamespace(namespace, meta);\n+    catalog.createTable(identifier, schema);\n+    Map<String, String> nameMata = catalog.loadNamespaceMetadata(namespace);\n+    Assert.assertTrue(nameMata.get(\"owner\").equals(\"apache\"));\n+    Assert.assertTrue(nameMata.get(\"group\").equals(\"iceberg\"));\n+\n+    AssertHelpers.assertThrows(\"Should fail to drop namespace is not empty\" + namespace,\n+        org.apache.iceberg.exceptions.NamespaceNotEmptyException.class,\n+        \"Namespace dbname_drop is not empty. One or more tables exist.\", () -> {\n+          catalog.dropNamespace(namespace);\n+        });\n+    Assert.assertTrue(catalog.dropTable(identifier, true));\n+    Assert.assertTrue(\"Drop namespace \" + namespace + \" error \", catalog.dropNamespace(namespace));", "originalCommit": "7d27a8eb60e5f6d221bc8769af9339db5215f69d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMDY5Ng==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409900696", "bodyText": "fixed", "author": "XiaokunDing", "createdAt": "2020-04-16T23:11:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMzMyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4e6bd757e425359c3fd6244839b944984d9fc41d", "chunk": "diff --git a/hive/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java b/hive/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java\nindex 4d96ec34c..744295c1a 100644\n--- a/hive/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java\n+++ b/hive/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java\n\n@@ -29,6 +29,9 @@ import org.apache.iceberg.AssertHelpers;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.catalog.Namespace;\n import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n import org.apache.iceberg.types.Types;\n import org.apache.thrift.TException;\n import org.junit.Assert;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMzU2MQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409733561", "bodyText": "Why not import this class?", "author": "rdblue", "createdAt": "2020-04-16T17:38:06Z", "path": "hive/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.hive;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.hadoop.hive.metastore.api.Database;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.types.Types;\n+import org.apache.thrift.TException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.apache.iceberg.types.Types.NestedField.required;\n+\n+public class TestHiveCatalog extends HiveMetastoreTest {\n+  private static final String hiveLocalDir = \"file:/tmp/hive/\" + UUID.randomUUID().toString();\n+  private static ImmutableMap meta = ImmutableMap.of(\n+      \"owner\", \"apache\",\n+      \"group\", \"iceberg\",\n+      \"comment\", \"iceberg  hiveCatalog test\");\n+\n+  @Test\n+  public void testCreateNamespace() throws TException {\n+    Namespace namespace1 = Namespace.of(\"noLocation\");\n+    catalog.createNamespace(namespace1, meta);\n+    Database database1 = metastoreClient.getDatabase(namespace1.toString());\n+\n+    Assert.assertTrue(database1.getParameters().get(\"owner\").equals(\"apache\"));\n+    Assert.assertTrue(database1.getParameters().get(\"group\").equals(\"iceberg\"));\n+\n+    Assert.assertEquals(\"There no same location for db and namespace\",\n+        database1.getLocationUri(), defaultUri(namespace1));\n+\n+    AssertHelpers.assertThrows(\"Should fail to create when namespace already exist \" + namespace1,\n+        org.apache.iceberg.exceptions.AlreadyExistsException.class,\n+        \"Namespace '\" + namespace1 + \"' already exists!\", () -> {\n+          catalog.createNamespace(namespace1);\n+        });\n+    ImmutableMap newMeta = ImmutableMap.<String, String>builder()\n+        .putAll(meta)\n+        .put(\"location\", hiveLocalDir)\n+        .build();\n+    Namespace namespace2 = Namespace.of(\"haveLocation\");\n+\n+    catalog.createNamespace(namespace2, newMeta);\n+    Database database2 = metastoreClient.getDatabase(namespace2.toString());\n+    Assert.assertEquals(\"There no same location for db and namespace\",\n+        database2.getLocationUri(), hiveLocalDir);\n+  }\n+\n+  @Test\n+  public void testListNamespace() throws TException {\n+    List<Namespace> namespaces;\n+    Namespace namespace1 = Namespace.of(\"dbname1\");\n+    catalog.createNamespace(namespace1, meta);\n+    namespaces = catalog.listNamespaces(namespace1);\n+    Assert.assertTrue(\"Hive db not hive the namespace 'dbname1'\", namespaces.isEmpty());\n+\n+    Namespace namespace2 = Namespace.of(\"dbname2\");\n+    catalog.createNamespace(namespace2, meta);\n+    namespaces = catalog.listNamespaces();\n+\n+    Assert.assertTrue(\"Hive db not hive the namespace 'dbname2'\", namespaces.contains(namespace2));\n+  }\n+\n+  @Test\n+  public void testLoadNamespaceMeta() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_load\");\n+\n+    catalog.createNamespace(namespace, meta);\n+\n+    Map<String, String> nameMata = catalog.loadNamespaceMetadata(namespace);\n+    Assert.assertTrue(nameMata.get(\"owner\").equals(\"apache\"));\n+    Assert.assertTrue(nameMata.get(\"group\").equals(\"iceberg\"));\n+    Assert.assertEquals(\"There no same location for db and namespace\",\n+        nameMata.get(\"location\"), catalog.convertToDatabase(namespace, meta).getLocationUri());\n+  }\n+\n+  @Test\n+  public void testNamespaceExists() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_exists\");\n+\n+    catalog.createNamespace(namespace, meta);\n+\n+    Assert.assertTrue(\"Should true to namespace exist\",\n+        catalog.namespaceExists(namespace));\n+    Assert.assertTrue(\"Should false to namespace doesn't exist\",\n+        !catalog.namespaceExists(Namespace.of(\"db2\", \"db2\", \"ns2\")));\n+  }\n+\n+  @Test\n+  public void testSetNamespaceProperties() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_set\");\n+\n+    catalog.createNamespace(namespace, meta);\n+    catalog.setProperties(namespace,\n+        ImmutableMap.of(\n+            \"owner\", \"alter_apache\",\n+            \"test\", \"test\",\n+            \"location\", \"file:/data/tmp\",\n+            \"comment\", \"iceberg test\")\n+    );\n+\n+    Database database = metastoreClient.getDatabase(namespace.level(0));\n+    Assert.assertEquals(database.getParameters().get(\"owner\"), \"alter_apache\");\n+    Assert.assertEquals(database.getParameters().get(\"test\"), \"test\");\n+    Assert.assertEquals(database.getParameters().get(\"group\"), \"iceberg\");\n+    AssertHelpers.assertThrows(\"Should fail to namespace not exist\" + namespace,\n+        org.apache.iceberg.exceptions.NoSuchNamespaceException.class,\n+        \"Namespace does not exist: \", () -> {\n+          catalog.setProperties(Namespace.of(\"db2\", \"db2\", \"ns2\"), meta);\n+        });\n+  }\n+\n+  @Test\n+  public void testRemoveNamespaceProperties() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_remove\");\n+\n+    catalog.createNamespace(namespace, meta);\n+\n+    catalog.removeProperties(namespace, ImmutableSet.of(\"comment\", \"owner\"));\n+\n+    Database database = metastoreClient.getDatabase(namespace.level(0));\n+\n+    Assert.assertEquals(database.getParameters().get(\"owner\"), null);\n+    Assert.assertEquals(database.getParameters().get(\"group\"), \"iceberg\");\n+    AssertHelpers.assertThrows(\"Should fail to namespace not exist\" + namespace,\n+        org.apache.iceberg.exceptions.NoSuchNamespaceException.class,", "originalCommit": "7d27a8eb60e5f6d221bc8769af9339db5215f69d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMDY0NA==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409900644", "bodyText": "fixed", "author": "XiaokunDing", "createdAt": "2020-04-16T23:10:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMzU2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4e6bd757e425359c3fd6244839b944984d9fc41d", "chunk": "diff --git a/hive/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java b/hive/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java\nindex 4d96ec34c..744295c1a 100644\n--- a/hive/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java\n+++ b/hive/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java\n\n@@ -29,6 +29,9 @@ import org.apache.iceberg.AssertHelpers;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.catalog.Namespace;\n import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n import org.apache.iceberg.types.Types;\n import org.apache.thrift.TException;\n import org.junit.Assert;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMzk0Mg==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409733942", "bodyText": "This is not accurate. It should be \"Exception raised when attempting to drop a namespace that is not empty.\"", "author": "rdblue", "createdAt": "2020-04-16T17:38:39Z", "path": "api/src/main/java/org/apache/iceberg/exceptions/NamespaceNotEmptyException.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.exceptions;\n+\n+/**\n+ * Exception raised when attempting to load a namespace that does not exist.", "originalCommit": "7d27a8eb60e5f6d221bc8769af9339db5215f69d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NjgyNw==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409896827", "bodyText": "fixed", "author": "XiaokunDing", "createdAt": "2020-04-16T23:00:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMzk0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4e6bd757e425359c3fd6244839b944984d9fc41d", "chunk": "diff --git a/api/src/main/java/org/apache/iceberg/exceptions/NamespaceNotEmptyException.java b/api/src/main/java/org/apache/iceberg/exceptions/NamespaceNotEmptyException.java\nindex 0bc3d5744..130cd3e4c 100644\n--- a/api/src/main/java/org/apache/iceberg/exceptions/NamespaceNotEmptyException.java\n+++ b/api/src/main/java/org/apache/iceberg/exceptions/NamespaceNotEmptyException.java\n\n@@ -20,7 +20,7 @@\n package org.apache.iceberg.exceptions;\n \n /**\n- * Exception raised when attempting to load a namespace that does not exist.\n+ * Exception raised when attempting to drop a namespace that is not empty.\n  */\n public class NamespaceNotEmptyException extends RuntimeException {\n   public NamespaceNotEmptyException(String message, Object... args) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczNjM1Ng==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409736356", "bodyText": "This needs a space after \"empty\" or else the namespace will not be separated.", "author": "rdblue", "createdAt": "2020-04-16T17:42:44Z", "path": "core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java", "diffHunk": "@@ -284,18 +285,27 @@ public void testDropNamespace() throws IOException {\n     Configuration conf = new Configuration();\n     String warehousePath = temp.newFolder().getAbsolutePath();\n     HadoopCatalog catalog = new HadoopCatalog(conf, warehousePath);\n+    Namespace namespace1 = Namespace.of(\"db\");\n+    Namespace namespace2 = Namespace.of(\"db\", \"ns1\");\n \n-    TableIdentifier tbl1 = TableIdentifier.of(\"db\", \"tbl1\");\n-    TableIdentifier tbl2 = TableIdentifier.of(\"db1\", \"ns1\", \"tbl1\");\n+    TableIdentifier tbl1 = TableIdentifier.of(namespace1, \"tbl1\");\n+    TableIdentifier tbl2 = TableIdentifier.of(namespace2, \"tbl1\");\n \n     Lists.newArrayList(tbl1, tbl2).forEach(t ->\n         catalog.createTable(t, SCHEMA, PartitionSpec.unpartitioned())\n     );\n \n+    AssertHelpers.assertThrows(\"Should fail to drop namespace is not empty\" + namespace1,", "originalCommit": "7d27a8eb60e5f6d221bc8769af9339db5215f69d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NjQ5Mw==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409896493", "bodyText": "OK thanks", "author": "XiaokunDing", "createdAt": "2020-04-16T22:58:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczNjM1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4e6bd757e425359c3fd6244839b944984d9fc41d", "chunk": "diff --git a/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java b/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java\nindex 4e3179b01..1cafc25ee 100644\n--- a/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java\n+++ b/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java\n\n@@ -295,7 +295,7 @@ public class TestHadoopCatalog extends HadoopTableTestBase {\n         catalog.createTable(t, SCHEMA, PartitionSpec.unpartitioned())\n     );\n \n-    AssertHelpers.assertThrows(\"Should fail to drop namespace is not empty\" + namespace1,\n+    AssertHelpers.assertThrows(\"Should fail to drop namespace is not empty \" + namespace1,\n         RuntimeIOException.class,\n         \"Namespace delete failed: \" + namespace1, () -> {\n           catalog.dropNamespace(Namespace.of(\"db\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczNjk1OQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409736959", "bodyText": "Why is this protected?", "author": "rdblue", "createdAt": "2020-04-16T17:43:42Z", "path": "hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java", "diffHunk": "@@ -361,7 +366,7 @@ protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n     return meta;\n   }\n \n-  public  Database convertToDatabase(Namespace namespace, Map<String, String> meta) {\n+  protected Database convertToDatabase(Namespace namespace, Map<String, String> meta) {", "originalCommit": "7d27a8eb60e5f6d221bc8769af9339db5215f69d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NTc5MQ==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409895791", "bodyText": "Because this method only used in hive, so I think protected is better.", "author": "XiaokunDing", "createdAt": "2020-04-16T22:56:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczNjk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwNDUxNA==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409904514", "bodyText": "Should it be private? If it is used in tests, we would normally make it package-private.", "author": "rdblue", "createdAt": "2020-04-16T23:22:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczNjk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwNzE5Mw==", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409907193", "bodyText": "OK, it should a package-private, thank you for your patience", "author": "XiaokunDing", "createdAt": "2020-04-16T23:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczNjk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9cd0e36bf29c44d3f21a81691f3b3b1379275d3c", "chunk": "diff --git a/hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java b/hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java\nindex 02447e347..4973b063f 100644\n--- a/hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java\n+++ b/hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java\n\n@@ -366,7 +366,7 @@ public class HiveCatalog extends BaseMetastoreCatalog implements Closeable, Supp\n     return meta;\n   }\n \n-  protected Database convertToDatabase(Namespace namespace, Map<String, String> meta) {\n+  Database convertToDatabase(Namespace namespace, Map<String, String> meta) {\n     String warehouseLocation = conf.get(\"hive.metastore.warehouse.dir\");\n \n     if (!isValidateNamespace(namespace)) {\n"}}, {"oid": "4e6bd757e425359c3fd6244839b944984d9fc41d", "url": "https://github.com/apache/iceberg/commit/4e6bd757e425359c3fd6244839b944984d9fc41d", "message": "[ISSUE #672] Fix the code address comments by Ryan Blue", "committedDate": "2020-04-16T23:29:55Z", "type": "commit"}, {"oid": "9cd0e36bf29c44d3f21a81691f3b3b1379275d3c", "url": "https://github.com/apache/iceberg/commit/9cd0e36bf29c44d3f21a81691f3b3b1379275d3c", "message": "[ISSUE #672] Fix convertToDatabase to package private", "committedDate": "2020-04-16T23:35:21Z", "type": "commit"}]}