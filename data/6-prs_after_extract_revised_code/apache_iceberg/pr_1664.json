{"pr_number": 1664, "pr_title": "Parquet: Optimize IN predicates in ParquetDictionaryRowGroupFilter", "pr_createdAt": "2020-10-26T19:24:56Z", "pr_url": "https://github.com/apache/iceberg/pull/1664", "timeline": [{"oid": "52471581a5bfee43eabc33167f5cf667b3ffdd14", "url": "https://github.com/apache/iceberg/commit/52471581a5bfee43eabc33167f5cf667b3ffdd14", "message": "Parquet: Optimize IN predicates in ParquetDictionaryRowGroupFilter", "committedDate": "2020-10-26T19:16:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMzczOQ==", "url": "https://github.com/apache/iceberg/pull/1664#discussion_r512213739", "bodyText": "We could rely on Collections$disjoint here knowing how it behaves but I'd prefer to have full control here and be sure this logic does not change.", "author": "aokolnychyi", "createdAt": "2020-10-26T19:26:54Z", "path": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetDictionaryRowGroupFilter.java", "diffHunk": "@@ -278,8 +278,27 @@ public Boolean or(Boolean leftResult, Boolean rightResult) {\n \n       Set<T> dictionary = dict(id, ref.comparator());\n \n-      // ROWS_CANNOT_MATCH if all values of the dictionary are not in the set (the intersection is empty)\n-      return Sets.intersection(dictionary, literalSet).isEmpty() ? ROWS_CANNOT_MATCH : ROWS_MIGHT_MATCH;\n+      // we need to find out the smaller set to iterate through\n+      Set<T> smallerSet;\n+      Set<T> biggerSet;\n+\n+      if (literalSet.size() < dictionary.size()) {\n+        smallerSet = literalSet;\n+        biggerSet = dictionary;\n+      } else {\n+        smallerSet = dictionary;\n+        biggerSet = literalSet;\n+      }\n+\n+      for (T e : smallerSet) {", "originalCommit": "52471581a5bfee43eabc33167f5cf667b3ffdd14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4MTA2MA==", "url": "https://github.com/apache/iceberg/pull/1664#discussion_r513581060", "bodyText": "Is this equivalent to reversing the order of sets passed to intersection?\nif (dictionary.size() > literalSet.size()) {\n  return Sets.intersection(dictionary, literalSet).isEmpty() ? ROWS_CANNOT_MATCH : ROWS_MIGHT_MATCH;\n} else {\n  return Sets.intersection(literalSet, dictionary).isEmpty() ? ROWS_CANNOT_MATCH : ROWS_MIGHT_MATCH;\n}\nI guess that this can return earlier if at least one value in the intersection is found.", "author": "rdblue", "createdAt": "2020-10-28T16:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMzczOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4NDQ4NA==", "url": "https://github.com/apache/iceberg/pull/1664#discussion_r513584484", "bodyText": "Calling isEmpty on intersection is equivalent to just calling Collections$disjoint. We may rely on the order of args but that seems fragile to me. There is no guarantee the internal implementation won't change.", "author": "aokolnychyi", "createdAt": "2020-10-28T16:25:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMzczOQ=="}], "type": "inlineReview", "revised_code": null}]}