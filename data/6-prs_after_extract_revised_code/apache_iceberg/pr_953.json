{"pr_number": 953, "pr_title": "Fix GenericOrcReader OutOfBoundsException when reading ORC file with \u2026", "pr_createdAt": "2020-04-23T00:51:03Z", "pr_url": "https://github.com/apache/iceberg/pull/953", "timeline": [{"oid": "f993f65f26b54120525d4025da32ba1b72844a69", "url": "https://github.com/apache/iceberg/commit/f993f65f26b54120525d4025da32ba1b72844a69", "message": "Fix GenericOrcReader OutOfBoundsException when reading ORC file with repeating rows", "committedDate": "2020-04-23T00:46:21Z", "type": "commit"}, {"oid": "034135b3ad46a9969f279fac0d15efaed51a423c", "url": "https://github.com/apache/iceberg/commit/034135b3ad46a9969f279fac0d15efaed51a423c", "message": "Fix checkstyle issues", "committedDate": "2020-04-23T02:06:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NDIwMQ==", "url": "https://github.com/apache/iceberg/pull/953#discussion_r413994201", "bodyText": "I think this should be a separate test case.", "author": "rdblue", "createdAt": "2020-04-23T17:39:34Z", "path": "data/src/test/java/org/apache/iceberg/data/orc/TestGenericData.java", "diffHunk": "@@ -71,6 +72,30 @@ protected void writeAndValidate(Schema schema) throws IOException {\n     for (int i = 0; i < expected.size(); i += 1) {\n       DataTestHelpers.assertEquals(schema.asStruct(), expected.get(i), rows.get(i));\n     }\n+\n+    // Also write and validate where all rows are the same (repeating)\n+    List<Record> expectedRepeating = Collections.nCopies(100, expected.get(0));", "originalCommit": "034135b3ad46a9969f279fac0d15efaed51a423c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMyMTA4OA==", "url": "https://github.com/apache/iceberg/pull/953#discussion_r414321088", "bodyText": "Fixed", "author": "shardulm94", "createdAt": "2020-04-24T06:14:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NDIwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "69caf5c9ddcf0ac2b5cef407ce729af054939693", "chunk": "diff --git a/data/src/test/java/org/apache/iceberg/data/orc/TestGenericData.java b/data/src/test/java/org/apache/iceberg/data/orc/TestGenericData.java\nindex 159a4a2cd..058379b90 100644\n--- a/data/src/test/java/org/apache/iceberg/data/orc/TestGenericData.java\n+++ b/data/src/test/java/org/apache/iceberg/data/orc/TestGenericData.java\n\n@@ -49,53 +49,18 @@ public class TestGenericData extends DataTest {\n   protected void writeAndValidate(Schema schema) throws IOException {\n     List<Record> expected = RandomGenericData.generate(schema, 100, 0L);\n \n-    File testFile = temp.newFile();\n-    Assert.assertTrue(\"Delete should succeed\", testFile.delete());\n-\n-    try (FileAppender<Record> writer = ORC.write(Files.localOutput(testFile))\n-        .schema(schema)\n-        .createWriterFunc(GenericOrcWriter::buildWriter)\n-        .build()) {\n-      for (Record rec : expected) {\n-        writer.add(rec);\n-      }\n-    }\n-\n-    List<Record> rows;\n-    try (CloseableIterable<Record> reader = ORC.read(Files.localInput(testFile))\n-        .project(schema)\n-        .createReaderFunc(fileSchema -> GenericOrcReader.buildReader(schema, fileSchema))\n-        .build()) {\n-      rows = Lists.newArrayList(reader);\n-    }\n-\n-    for (int i = 0; i < expected.size(); i += 1) {\n-      DataTestHelpers.assertEquals(schema.asStruct(), expected.get(i), rows.get(i));\n-    }\n-\n-    // Also write and validate where all rows are the same (repeating)\n-    List<Record> expectedRepeating = Collections.nCopies(100, expected.get(0));\n-    Assert.assertTrue(\"Delete should succeed\", testFile.delete());\n-\n-    try (FileAppender<Record> writer = ORC.write(Files.localOutput(testFile))\n-        .schema(schema)\n-        .createWriterFunc(GenericOrcWriter::buildWriter)\n-        .build()) {\n-      for (Record rec : expectedRepeating) {\n-        writer.add(rec);\n-      }\n-    }\n+    writeAndValidateRecords(schema, expected);\n+  }\n \n-    try (CloseableIterable<Record> reader = ORC.read(Files.localInput(testFile))\n-        .project(schema)\n-        .createReaderFunc(fileSchema -> GenericOrcReader.buildReader(schema, fileSchema))\n-        .build()) {\n-      rows = Lists.newArrayList(reader);\n-    }\n+  @Test\n+  public void writeAndValidateRepeatingRecords() throws IOException {\n+    Schema structSchema = new Schema(\n+        required(100, \"id\", Types.LongType.get()),\n+        required(101, \"data\", Types.StringType.get())\n+    );\n+    List<Record> expectedRepeating = Collections.nCopies(100, RandomGenericData.generate(structSchema, 1, 0L).get(0));\n \n-    for (int i = 0; i < expectedRepeating.size(); i += 1) {\n-      DataTestHelpers.assertEquals(schema.asStruct(), expectedRepeating.get(i), rows.get(i));\n-    }\n+    writeAndValidateRecords(structSchema, expectedRepeating);\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NDQ3MQ==", "url": "https://github.com/apache/iceberg/pull/953#discussion_r413994471", "bodyText": "Let's add new test cases instead of appending new validations to old ones.", "author": "rdblue", "createdAt": "2020-04-23T17:39:59Z", "path": "spark/src/test/java/org/apache/iceberg/spark/data/TestSparkOrcReader.java", "diffHunk": "@@ -60,5 +61,29 @@ protected void writeAndValidate(Schema schema) throws IOException {\n       }\n       Assert.assertFalse(\"Should not have extra rows\", actualRows.hasNext());\n     }\n+\n+    // Also write and validate where all rows are the same (repeating)\n+    final Iterable<InternalRow> expectedRepeating = Collections.nCopies(100, expected.iterator().next());", "originalCommit": "034135b3ad46a9969f279fac0d15efaed51a423c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMyMTEyMQ==", "url": "https://github.com/apache/iceberg/pull/953#discussion_r414321121", "bodyText": "Fixed", "author": "shardulm94", "createdAt": "2020-04-24T06:14:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NDQ3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "69caf5c9ddcf0ac2b5cef407ce729af054939693", "chunk": "diff --git a/spark/src/test/java/org/apache/iceberg/spark/data/TestSparkOrcReader.java b/spark/src/test/java/org/apache/iceberg/spark/data/TestSparkOrcReader.java\nindex af556a65b..071c903fd 100644\n--- a/spark/src/test/java/org/apache/iceberg/spark/data/TestSparkOrcReader.java\n+++ b/spark/src/test/java/org/apache/iceberg/spark/data/TestSparkOrcReader.java\n\n@@ -39,38 +43,30 @@ public class TestSparkOrcReader extends AvroDataTest {\n     final Iterable<InternalRow> expected = RandomData\n         .generateSpark(schema, 100, 0L);\n \n-    final File testFile = temp.newFile();\n-    Assert.assertTrue(\"Delete should succeed\", testFile.delete());\n+    writeAndValidateRecords(schema, expected);\n+  }\n \n-    try (FileAppender<InternalRow> writer = ORC.write(Files.localOutput(testFile))\n-        .createWriterFunc(SparkOrcWriter::new)\n-        .schema(schema)\n-        .build()) {\n-      writer.addAll(expected);\n-    }\n+  @Test\n+  public void writeAndValidateRepeatingRecords() throws IOException {\n+    Schema structSchema = new Schema(\n+        required(100, \"id\", Types.LongType.get()),\n+        required(101, \"data\", Types.StringType.get())\n+    );\n+    List<InternalRow> expectedRepeating = Collections.nCopies(100,\n+        RandomData.generateSpark(structSchema, 1, 0L).iterator().next());\n \n-    try (CloseableIterable<InternalRow> reader = ORC.read(Files.localInput(testFile))\n-        .project(schema)\n-        .createReaderFunc(SparkOrcReader::new)\n-        .build()) {\n-      final Iterator<InternalRow> actualRows = reader.iterator();\n-      final Iterator<InternalRow> expectedRows = expected.iterator();\n-      while (expectedRows.hasNext()) {\n-        Assert.assertTrue(\"Should have expected number of rows\", actualRows.hasNext());\n-        assertEquals(schema, expectedRows.next(), actualRows.next());\n-      }\n-      Assert.assertFalse(\"Should not have extra rows\", actualRows.hasNext());\n-    }\n+    writeAndValidateRecords(structSchema, expectedRepeating);\n+  }\n \n-    // Also write and validate where all rows are the same (repeating)\n-    final Iterable<InternalRow> expectedRepeating = Collections.nCopies(100, expected.iterator().next());\n+  private void writeAndValidateRecords(Schema schema, Iterable<InternalRow> expected) throws IOException {\n+    final File testFile = temp.newFile();\n     Assert.assertTrue(\"Delete should succeed\", testFile.delete());\n \n     try (FileAppender<InternalRow> writer = ORC.write(Files.localOutput(testFile))\n         .createWriterFunc(SparkOrcWriter::new)\n         .schema(schema)\n         .build()) {\n-      writer.addAll(expectedRepeating);\n+      writer.addAll(expected);\n     }\n \n     try (CloseableIterable<InternalRow> reader = ORC.read(Files.localInput(testFile))\n"}}, {"oid": "69caf5c9ddcf0ac2b5cef407ce729af054939693", "url": "https://github.com/apache/iceberg/commit/69caf5c9ddcf0ac2b5cef407ce729af054939693", "message": "Move test for repeated values into a separate test", "committedDate": "2020-04-24T01:14:23Z", "type": "commit"}]}