{"pr_number": 1754, "pr_title": "AWS: support Server Side Encryption for S3FileIO", "pr_createdAt": "2020-11-12T01:57:47Z", "pr_url": "https://github.com/apache/iceberg/pull/1754", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5OTgxNQ==", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r521799815", "bodyText": "Q: Why isn't the parent super.close() inside the try block as well?", "author": "rdsr", "createdAt": "2020-11-12T03:28:04Z", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java", "diffHunk": "@@ -91,9 +104,36 @@ public void close() throws IOException {\n     try {\n       stream.close();\n \n-      s3.putObject(\n-          PutObjectRequest.builder().bucket(location.bucket()).key(location.key()).build(),\n-          RequestBody.fromFile(stagingFile));\n+      PutObjectRequest.Builder requestBuilder = PutObjectRequest.builder()", "originalCommit": "62206287545fcd4b06c341a6b5bdd8d727e5cffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxMTEwMQ==", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r521811101", "bodyText": "It's called on line 101", "author": "jackye1995", "createdAt": "2020-11-12T03:45:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5OTgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxMzMzOQ==", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r521813339", "bodyText": "Ah sorry misread the question. Technically super.close() calls PositionOutputStream.close() calls OutputStream.close() which does nothing, so I think it is fine to not have it in the try block.", "author": "jackye1995", "createdAt": "2020-11-12T03:48:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5OTgxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "63d63de11d77b578fd3bddc0981c20a05d688e98", "chunk": "diff --git a/aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java b/aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java\nindex cd981286d..42b960873 100644\n--- a/aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java\n+++ b/aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java\n\n@@ -108,29 +104,28 @@ class S3OutputStream extends PositionOutputStream {\n           .bucket(location.bucket())\n           .key(location.key());\n \n-      switch (sseType.toLowerCase(Locale.ENGLISH)) {\n-        case AwsCatalogProperties.SSE_TYPE_NONE:\n+      switch (awsProperties.s3FileIoSseType().toLowerCase(Locale.ENGLISH)) {\n+        case AwsProperties.S3FILEIO_SSE_TYPE_NONE:\n           break;\n \n-        case AwsCatalogProperties.SSE_TYPE_KMS:\n+        case AwsProperties.S3FILEIO_SSE_TYPE_KMS:\n           requestBuilder.serverSideEncryption(ServerSideEncryption.AWS_KMS);\n-          if (sseKey != null) {\n-            requestBuilder.ssekmsKeyId(sseKey);\n-          }\n+          requestBuilder.ssekmsKeyId(awsProperties.s3FileIoSseKey());\n           break;\n \n-        case AwsCatalogProperties.SSE_TYPE_S3:\n+        case AwsProperties.S3FILEIO_SSE_TYPE_S3:\n           requestBuilder.serverSideEncryption(ServerSideEncryption.AES256);\n           break;\n \n-        case AwsCatalogProperties.SSE_TYPE_CUSTOM:\n+        case AwsProperties.S3FILEIO_SSE_TYPE_CUSTOM:\n           requestBuilder.sseCustomerAlgorithm(ServerSideEncryption.AES256.name());\n-          requestBuilder.sseCustomerKey(sseKey);\n-          requestBuilder.sseCustomerKeyMD5(sseMd5);\n+          requestBuilder.sseCustomerKey(awsProperties.s3FileIoSseKey());\n+          requestBuilder.sseCustomerKeyMD5(awsProperties.s3FileIoSseMd5());\n           break;\n \n         default:\n-          throw new IllegalArgumentException(\"Cannot support given S3 encryption type: \" + sseType);\n+          throw new IllegalArgumentException(\n+              \"Cannot support given S3 encryption type: \" + awsProperties.s3FileIoSseType());\n       }\n \n       s3.putObject(requestBuilder.build(), RequestBody.fromFile(stagingFile));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5ODA1Ng==", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r522298056", "bodyText": "I assume these tests are not part of the regular build?", "author": "rdsr", "createdAt": "2020-11-12T17:47:25Z", "path": "aws/src/integration/java/org/apache/iceberg/aws/AwsIntegTestUtil.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+\n+public class AwsIntegTestUtil {\n+\n+  private AwsIntegTestUtil() {\n+  }\n+\n+  /**\n+   * Set the environment variable AWS_TEST_BUCKET for a default bucket to use for testing\n+   * @return bucket name\n+   */\n+  public static String testBucketName() {\n+    return System.getenv(\"AWS_TEST_BUCKET\");", "originalCommit": "1069237d7861c45c72e5da7dec5ed13e2561dd03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwMjUxMA==", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r522302510", "bodyText": "No", "author": "jackye1995", "createdAt": "2020-11-12T17:54:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5ODA1Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI1OTkwOA==", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r523259908", "bodyText": "As mentioned in #1767, it would be nice to wrap these properties in AwsCatalogProperties as a utility class and just keep reference to the properties as opposed to enumerating them here an in BaseS3File.", "author": "danielcweeks", "createdAt": "2020-11-13T22:09:43Z", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -73,4 +89,19 @@ private S3Client client() {\n     }\n     return client;\n   }\n+\n+  @Override\n+  public void initialize(Map<String, String> properties) {\n+    this.sseType = properties.getOrDefault(AwsCatalogProperties.S3_SSE_TYPE, AwsCatalogProperties.S3_SSE_TYPE_NONE);", "originalCommit": "1069237d7861c45c72e5da7dec5ed13e2561dd03", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63d63de11d77b578fd3bddc0981c20a05d688e98", "chunk": "diff --git a/aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java b/aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java\nindex b282dce70..443c58f31 100644\n--- a/aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java\n+++ b/aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java\n\n@@ -92,16 +85,6 @@ public class S3FileIO implements FileIO {\n \n   @Override\n   public void initialize(Map<String, String> properties) {\n-    this.sseType = properties.getOrDefault(AwsCatalogProperties.S3_SSE_TYPE, AwsCatalogProperties.S3_SSE_TYPE_NONE);\n-    this.sseKey = properties.get(AwsCatalogProperties.S3_SSE_KEY);\n-    this.sseMd5 = properties.get(AwsCatalogProperties.S3_SSE_MD5);\n-    validateSseInput();\n-  }\n-\n-  private void validateSseInput() {\n-    if (AwsCatalogProperties.S3_SSE_TYPE_CUSTOM.equals(sseType)) {\n-      Preconditions.checkNotNull(sseKey, \"Cannot initialize SSE-C S3FileIO with null encryption key\");\n-      Preconditions.checkNotNull(sseMd5, \"Cannot initialize SSE-C S3FileIO with null encryption key MD5\");\n-    }\n+    this.awsProperties = new AwsProperties(properties);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NjE2MA==", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r523266160", "bodyText": "I'm trying to understand the reason for these (and below split changes).  Is this relevant to the larger PR?  My understanding is that this really doesn't change the behavior.", "author": "danielcweeks", "createdAt": "2020-11-13T22:28:25Z", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3URI.java", "diffHunk": "@@ -57,7 +57,7 @@\n     Preconditions.checkNotNull(location, \"Location cannot be null.\");\n \n     this.location = location;\n-    String [] schemeSplit = location.split(SCHEME_DELIM);\n+    String [] schemeSplit = location.split(SCHEME_DELIM, -1);", "originalCommit": "1069237d7861c45c72e5da7dec5ed13e2561dd03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5MDg5Ng==", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r524490896", "bodyText": "It's not, I am just fixing errorprone warnings along the way. Let me remove them since this PR seems pretty big at this point of time.", "author": "jackye1995", "createdAt": "2020-11-16T18:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NjE2MA=="}], "type": "inlineReview", "revised_code": {"commit": "63d63de11d77b578fd3bddc0981c20a05d688e98", "chunk": "diff --git a/aws/src/main/java/org/apache/iceberg/aws/s3/S3URI.java b/aws/src/main/java/org/apache/iceberg/aws/s3/S3URI.java\nindex 1e1630fc3..b7c936820 100644\n--- a/aws/src/main/java/org/apache/iceberg/aws/s3/S3URI.java\n+++ b/aws/src/main/java/org/apache/iceberg/aws/s3/S3URI.java\n\n@@ -57,7 +57,7 @@ class S3URI {\n     Preconditions.checkNotNull(location, \"Location cannot be null.\");\n \n     this.location = location;\n-    String [] schemeSplit = location.split(SCHEME_DELIM, -1);\n+    String [] schemeSplit = location.split(SCHEME_DELIM);\n     ValidationException.check(schemeSplit.length == 2, \"Invalid S3 URI: %s\", location);\n \n     String scheme = schemeSplit[0];\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI3MzQ2OQ==", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r523273469", "bodyText": "These four types might make sense to turn into an enumeration.  Also, are these official names for the encryption types?  I just find s3 not to be terribly descriptive for the type of encryption.", "author": "danielcweeks", "createdAt": "2020-11-13T22:52:04Z", "path": "aws/src/main/java/org/apache/iceberg/aws/AwsCatalogProperties.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+public class AwsCatalogProperties {\n+\n+  private AwsCatalogProperties() {\n+  }\n+\n+  /**\n+   * Type of S3 Server side encryption used, default to {@link AwsCatalogProperties#S3_SSE_TYPE_NONE}.\n+   */\n+  public static final String S3_SSE_TYPE = \"s3-sse-type\";\n+\n+  /**\n+   * No server side encryption.\n+   */\n+  public static final String S3_SSE_TYPE_NONE = \"none\";", "originalCommit": "1069237d7861c45c72e5da7dec5ed13e2561dd03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4OTcwMQ==", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r524489701", "bodyText": "Yeah, but unfortunately that's the official name. I am hesitated to turn them into enums, since it seems like in Iceberg people just use string instead of enum in many different places.", "author": "jackye1995", "createdAt": "2020-11-16T18:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI3MzQ2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "63d63de11d77b578fd3bddc0981c20a05d688e98", "chunk": "diff --git a/aws/src/main/java/org/apache/iceberg/aws/AwsCatalogProperties.java b/aws/src/main/java/org/apache/iceberg/aws/AwsCatalogProperties.java\ndeleted file mode 100644\nindex c5ea1a094..000000000\n--- a/aws/src/main/java/org/apache/iceberg/aws/AwsCatalogProperties.java\n+++ /dev/null\n\n@@ -1,68 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.apache.iceberg.aws;\n-\n-public class AwsCatalogProperties {\n-\n-  private AwsCatalogProperties() {\n-  }\n-\n-  /**\n-   * Type of S3 Server side encryption used, default to {@link AwsCatalogProperties#S3_SSE_TYPE_NONE}.\n-   */\n-  public static final String S3_SSE_TYPE = \"s3-sse-type\";\n-\n-  /**\n-   * No server side encryption.\n-   */\n-  public static final String S3_SSE_TYPE_NONE = \"none\";\n-\n-  /**\n-   * S3 SSE-KMS encryption.\n-   * For more details: https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html\n-   */\n-  public static final String S3_SSE_TYPE_KMS = \"kms\";\n-\n-  /**\n-   * S3 SSE-S3 encryption.\n-   * For more details: https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html\n-   */\n-  public static final String S3_SSE_TYPE_S3 = \"s3\";\n-\n-  /**\n-   * S3 SSE-C encryption.\n-   * For more details: https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html\n-   */\n-  public static final String S3_SSE_TYPE_CUSTOM = \"custom\";\n-\n-  /**\n-   * If S3 encryption type is SSE-KMS, input is a KMS Key ID or ARN.\n-   *   In case this property is not set, default key \"aws/s3\" is used.\n-   * If encryption type is SSE-C, input is a custom base-64 AES256 symmetric key.\n-   */\n-  public static final String S3_SSE_KEY = \"s3-sse-key\";\n-\n-  /**\n-   * If S3 encryption type is SSE-C, input is the base-64 MD5 digest of the secret key.\n-   * This MD5 must be explicitly passed in by the caller to ensure key integrity.\n-   */\n-  public static final String S3_SSE_MD5 = \"s3-sse-md5\";\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzMzI0Nw==", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r524433247", "bodyText": "We might want to consider shortening this to just AwsProperties because while you can define them at the catalog level, tables can deviate and it would make sense to tune various properties for specific datasets within a catalog.", "author": "danielcweeks", "createdAt": "2020-11-16T17:11:01Z", "path": "aws/src/main/java/org/apache/iceberg/aws/AwsCatalogProperties.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+public class AwsCatalogProperties {", "originalCommit": "1069237d7861c45c72e5da7dec5ed13e2561dd03", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63d63de11d77b578fd3bddc0981c20a05d688e98", "chunk": "diff --git a/aws/src/main/java/org/apache/iceberg/aws/AwsCatalogProperties.java b/aws/src/main/java/org/apache/iceberg/aws/AwsCatalogProperties.java\ndeleted file mode 100644\nindex c5ea1a094..000000000\n--- a/aws/src/main/java/org/apache/iceberg/aws/AwsCatalogProperties.java\n+++ /dev/null\n\n@@ -1,68 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.apache.iceberg.aws;\n-\n-public class AwsCatalogProperties {\n-\n-  private AwsCatalogProperties() {\n-  }\n-\n-  /**\n-   * Type of S3 Server side encryption used, default to {@link AwsCatalogProperties#S3_SSE_TYPE_NONE}.\n-   */\n-  public static final String S3_SSE_TYPE = \"s3-sse-type\";\n-\n-  /**\n-   * No server side encryption.\n-   */\n-  public static final String S3_SSE_TYPE_NONE = \"none\";\n-\n-  /**\n-   * S3 SSE-KMS encryption.\n-   * For more details: https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html\n-   */\n-  public static final String S3_SSE_TYPE_KMS = \"kms\";\n-\n-  /**\n-   * S3 SSE-S3 encryption.\n-   * For more details: https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html\n-   */\n-  public static final String S3_SSE_TYPE_S3 = \"s3\";\n-\n-  /**\n-   * S3 SSE-C encryption.\n-   * For more details: https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html\n-   */\n-  public static final String S3_SSE_TYPE_CUSTOM = \"custom\";\n-\n-  /**\n-   * If S3 encryption type is SSE-KMS, input is a KMS Key ID or ARN.\n-   *   In case this property is not set, default key \"aws/s3\" is used.\n-   * If encryption type is SSE-C, input is a custom base-64 AES256 symmetric key.\n-   */\n-  public static final String S3_SSE_KEY = \"s3-sse-key\";\n-\n-  /**\n-   * If S3 encryption type is SSE-C, input is the base-64 MD5 digest of the secret key.\n-   * This MD5 must be explicitly passed in by the caller to ensure key integrity.\n-   */\n-  public static final String S3_SSE_MD5 = \"s3-sse-md5\";\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzNjM5NA==", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r524436394", "bodyText": "As I mentioned in the comment above, this is what I think we want to try to avoid where we have to add constructor params per property we need to add.  There are already a few others we need to push through (multipart size, canned acl, etc.).  I think turning the AwsProperties into a wrapper would help as we expand this functionality.", "author": "danielcweeks", "createdAt": "2020-11-16T17:15:05Z", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputFile.java", "diffHunk": "@@ -29,7 +30,11 @@\n \n public class S3OutputFile extends BaseS3File implements OutputFile {\n   public S3OutputFile(S3Client client, S3URI uri) {\n-    super(client, uri);\n+    this(client, uri, AwsCatalogProperties.S3_SSE_TYPE_NONE, null, null);\n+  }\n+\n+  public S3OutputFile(S3Client client, S3URI uri, String sseType, String sseKey, String sseMd5) {", "originalCommit": "1069237d7861c45c72e5da7dec5ed13e2561dd03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzOTIyNw==", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r524439227", "bodyText": "Yes I agree it sounds better to have all configuration in the separated class. Let me update it.", "author": "jackye1995", "createdAt": "2020-11-16T17:19:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzNjM5NA=="}], "type": "inlineReview", "revised_code": {"commit": "63d63de11d77b578fd3bddc0981c20a05d688e98", "chunk": "diff --git a/aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputFile.java b/aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputFile.java\nindex 5af1aecfe..44a745aef 100644\n--- a/aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputFile.java\n+++ b/aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputFile.java\n\n@@ -30,11 +30,11 @@ import software.amazon.awssdk.services.s3.S3Client;\n \n public class S3OutputFile extends BaseS3File implements OutputFile {\n   public S3OutputFile(S3Client client, S3URI uri) {\n-    this(client, uri, AwsCatalogProperties.S3_SSE_TYPE_NONE, null, null);\n+    this(client, uri, new AwsProperties());\n   }\n \n-  public S3OutputFile(S3Client client, S3URI uri, String sseType, String sseKey, String sseMd5) {\n-    super(client, uri, sseType, sseKey, sseMd5);\n+  public S3OutputFile(S3Client client, S3URI uri, AwsProperties awsProperties) {\n+    super(client, uri, awsProperties);\n   }\n \n   /**\n"}}, {"oid": "63d63de11d77b578fd3bddc0981c20a05d688e98", "url": "https://github.com/apache/iceberg/commit/63d63de11d77b578fd3bddc0981c20a05d688e98", "message": "support Server Side Encryption for S3FileIO", "committedDate": "2020-11-16T18:42:50Z", "type": "commit"}, {"oid": "63d63de11d77b578fd3bddc0981c20a05d688e98", "url": "https://github.com/apache/iceberg/commit/63d63de11d77b578fd3bddc0981c20a05d688e98", "message": "support Server Side Encryption for S3FileIO", "committedDate": "2020-11-16T18:42:50Z", "type": "forcePushed"}]}