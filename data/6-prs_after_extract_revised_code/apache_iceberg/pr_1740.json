{"pr_number": 1740, "pr_title": "Fix casting issues when joining two Iceberg tables together on Tez", "pr_createdAt": "2020-11-09T10:17:56Z", "pr_url": "https://github.com/apache/iceberg/pull/1740", "timeline": [{"oid": "f15a7cc7f76c7affba3617198092dfb5a97bd6b6", "url": "https://github.com/apache/iceberg/commit/f15a7cc7f76c7affba3617198092dfb5a97bd6b6", "message": "Fix casting issues when joining two Iceberg tables together on Tez", "committedDate": "2020-11-09T10:29:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5MTE0MQ==", "url": "https://github.com/apache/iceberg/pull/1740#discussion_r520191141", "bodyText": "Why would this be called to copy a non-Date object?", "author": "rdblue", "createdAt": "2020-11-09T23:40:46Z", "path": "hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergDateObjectInspectorHive3.java", "diffHunk": "@@ -56,7 +56,15 @@ public DateWritableV2 getPrimitiveWritableObject(Object o) {\n \n   @Override\n   public Object copyObject(Object o) {\n-    return o == null ? null : new Date((Date) o);\n+    if (o == null) {\n+      return null;\n+    }\n+\n+    if (o instanceof Date) {\n+      return new Date((Date) o);\n+    } else {\n+      return o;\n+    }", "originalCommit": "f15a7cc7f76c7affba3617198092dfb5a97bd6b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwOTQyNQ==", "url": "https://github.com/apache/iceberg/pull/1740#discussion_r520409425", "bodyText": "On Tez, this is called with LocalDate. On MR we get Date, which is just a wrapper around LocalDate.", "author": "lcspinter", "createdAt": "2020-11-10T09:22:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5MTE0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk2MzY3MQ==", "url": "https://github.com/apache/iceberg/pull/1740#discussion_r520963671", "bodyText": "Why not support both representations that are possibly passed in by Hive?", "author": "rdblue", "createdAt": "2020-11-11T00:38:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5MTE0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk2Mzc4Nw==", "url": "https://github.com/apache/iceberg/pull/1740#discussion_r520963787", "bodyText": "Nevermind, I see that you did.", "author": "rdblue", "createdAt": "2020-11-11T00:38:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5MTE0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f41d5fa2680f79bf4d8b306fd6e41e031397d628", "chunk": "diff --git a/hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergDateObjectInspectorHive3.java b/hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergDateObjectInspectorHive3.java\nindex 14e920135..6ffa60073 100644\n--- a/hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergDateObjectInspectorHive3.java\n+++ b/hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergDateObjectInspectorHive3.java\n\n@@ -62,6 +62,8 @@ public final class IcebergDateObjectInspectorHive3 extends AbstractPrimitiveJava\n \n     if (o instanceof Date) {\n       return new Date((Date) o);\n+    } else if (o instanceof LocalDate) {\n+      return LocalDate.of(((LocalDate) o).getYear(), ((LocalDate) o).getMonth(), ((LocalDate) o).getDayOfMonth());\n     } else {\n       return o;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5MjU4Mg==", "url": "https://github.com/apache/iceberg/pull/1740#discussion_r520192582", "bodyText": "Could you rewrite this as a new test case with a list of types to test?\nWe consider it a best practice to start new test cases rather than adding to existing, complete cases. Each test method is run independently so you see more of the failures that way. By making longer test methods with more than one case, failures can prevent other tests from even running.\nI think it would be fine to use a loop over types in a single new case, since most of the code is the same for these.", "author": "rdblue", "createdAt": "2020-11-09T23:44:48Z", "path": "mr/src/test/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandlerBaseTest.java", "diffHunk": "@@ -211,6 +212,11 @@ public void testJoinTables() throws IOException {\n     Assert.assertArrayEquals(new Object[] {0L, \"Alice\", 100L, 11.11d}, rows.get(0));\n     Assert.assertArrayEquals(new Object[] {0L, \"Alice\", 101L, 22.22d}, rows.get(1));\n     Assert.assertArrayEquals(new Object[] {1L, \"Bob\", 102L, 33.33d}, rows.get(2));\n+\n+    joinTables(\"decimaltable\", \"decimal_col\", Types.DecimalType.of(3, 1));\n+    joinTables(\"timestamptable\", \"timestamp_col\", Types.TimestampType.withZone());\n+    joinTables(\"binarytable\", \"binary_col\", Types.BinaryType.get());\n+    joinTables(\"datetable\", \"date_col\", Types.DateType.get());", "originalCommit": "f15a7cc7f76c7affba3617198092dfb5a97bd6b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwODQ0NQ==", "url": "https://github.com/apache/iceberg/pull/1740#discussion_r520608445", "bodyText": "Thanks @rdblue for the review. I created a new test case.", "author": "lcspinter", "createdAt": "2020-11-10T14:34:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5MjU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f41d5fa2680f79bf4d8b306fd6e41e031397d628", "chunk": "diff --git a/mr/src/test/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandlerBaseTest.java b/mr/src/test/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandlerBaseTest.java\nindex 2ecbb7fa4..88f8ba2d1 100644\n--- a/mr/src/test/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandlerBaseTest.java\n+++ b/mr/src/test/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandlerBaseTest.java\n\n@@ -212,11 +219,43 @@ public abstract class HiveIcebergStorageHandlerBaseTest {\n     Assert.assertArrayEquals(new Object[] {0L, \"Alice\", 100L, 11.11d}, rows.get(0));\n     Assert.assertArrayEquals(new Object[] {0L, \"Alice\", 101L, 22.22d}, rows.get(1));\n     Assert.assertArrayEquals(new Object[] {1L, \"Bob\", 102L, 33.33d}, rows.get(2));\n+  }\n+\n+  @Test\n+  public void testJoinTablesSupportedTypes() throws IOException {\n+    for (int i = 0; i < SUPPORTED_TYPES.size(); i++) {\n+      Type type = SUPPORTED_TYPES.get(i);\n+      String tableName = type.typeId().toString().toLowerCase() + \"_table_\" + i;\n+      String columnName = type.typeId().toString().toLowerCase() + \"_column\";\n+\n+      Schema schema = new Schema(required(1, columnName, type));\n+      List<Record> records = TestHelper.generateRandomRecords(schema, 1, 0L);\n+\n+      createTable(tableName, schema, records);\n+      List<Object[]> queryResult = shell.executeStatement(\"select s.\" + columnName + \", h.\" + columnName +\n+              \" from default.\" + tableName + \" s join default.\" + tableName + \" h on h.\" + columnName + \"=s.\" +\n+              columnName);\n+      Assert.assertEquals(\"Non matching record count for table \" + tableName + \" with type \" + type,\n+              1, queryResult.size());\n+    }\n+  }\n \n-    joinTables(\"decimaltable\", \"decimal_col\", Types.DecimalType.of(3, 1));\n-    joinTables(\"timestamptable\", \"timestamp_col\", Types.TimestampType.withZone());\n-    joinTables(\"binarytable\", \"binary_col\", Types.BinaryType.get());\n-    joinTables(\"datetable\", \"date_col\", Types.DateType.get());\n+  @Test\n+  public void testSelectDistinctFromTable() throws IOException {\n+    for (int i = 0; i < SUPPORTED_TYPES.size(); i++) {\n+      Type type = SUPPORTED_TYPES.get(i);\n+      String tableName = type.typeId().toString().toLowerCase() + \"_table_\" + i;\n+      String columnName = type.typeId().toString().toLowerCase() + \"_column\";\n+\n+      Schema schema = new Schema(required(1, columnName, type));\n+      List<Record> records = TestHelper.generateRandomRecords(schema, 10, 0L);\n+      int size = records.stream().map(r -> r.getField(columnName)).collect(Collectors.toSet()).size();\n+      createTable(tableName, schema, records);\n+      List<Object[]> queryResult = shell.executeStatement(\"select count(distinct(\" + columnName +\n+              \")) from default.\" + tableName);\n+      int distincIds = ((Long) queryResult.get(0)[0]).intValue();\n+      Assert.assertEquals(tableName, size, distincIds);\n+    }\n   }\n \n   @Test\n"}}, {"oid": "f9794035a6c4596bad77ce3aff121aef5aa13239", "url": "https://github.com/apache/iceberg/commit/f9794035a6c4596bad77ce3aff121aef5aa13239", "message": "Fix casting issues when joining two Iceberg tables together on Tez", "committedDate": "2020-11-10T14:32:28Z", "type": "commit"}, {"oid": "f41d5fa2680f79bf4d8b306fd6e41e031397d628", "url": "https://github.com/apache/iceberg/commit/f41d5fa2680f79bf4d8b306fd6e41e031397d628", "message": "Review changes", "committedDate": "2020-11-10T14:32:28Z", "type": "forcePushed"}, {"oid": "217b0b26c922439c3be84c956a2e2e52eb1bc7e1", "url": "https://github.com/apache/iceberg/commit/217b0b26c922439c3be84c956a2e2e52eb1bc7e1", "message": "Review changes", "committedDate": "2020-11-10T15:01:43Z", "type": "forcePushed"}, {"oid": "f667f640dcaa2a3a979f137655b475ecd208ff95", "url": "https://github.com/apache/iceberg/commit/f667f640dcaa2a3a979f137655b475ecd208ff95", "message": "Review changes", "committedDate": "2020-11-10T15:34:13Z", "type": "commit"}, {"oid": "f667f640dcaa2a3a979f137655b475ecd208ff95", "url": "https://github.com/apache/iceberg/commit/f667f640dcaa2a3a979f137655b475ecd208ff95", "message": "Review changes", "committedDate": "2020-11-10T15:34:13Z", "type": "forcePushed"}]}