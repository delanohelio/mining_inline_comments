{"pr_number": 2947, "pr_title": "Implement role management service", "pr_createdAt": "2020-05-20T05:52:06Z", "pr_url": "https://github.com/wso2/carbon-identity-framework/pull/2947", "timeline": [{"oid": "862bd10618bedc07935a5913ef2ccaeb80911bd6", "url": "https://github.com/wso2/carbon-identity-framework/commit/862bd10618bedc07935a5913ef2ccaeb80911bd6", "message": "Implement role management service", "committedDate": "2020-05-20T05:55:22Z", "type": "forcePushed"}, {"oid": "9166d2fd570ee990c35da57a2690c685aa9a673e", "url": "https://github.com/wso2/carbon-identity-framework/commit/9166d2fd570ee990c35da57a2690c685aa9a673e", "message": "Implement role management service", "committedDate": "2020-05-20T05:58:09Z", "type": "forcePushed"}, {"oid": "03207b418c051502bf9bb0c48be1c6d621eae131", "url": "https://github.com/wso2/carbon-identity-framework/commit/03207b418c051502bf9bb0c48be1c6d621eae131", "message": "Implement role management service", "committedDate": "2020-05-20T06:01:28Z", "type": "forcePushed"}, {"oid": "3b472bf9d4d2fb960fdb2e5b7e7cf5e3838d7590", "url": "https://github.com/wso2/carbon-identity-framework/commit/3b472bf9d4d2fb960fdb2e5b7e7cf5e3838d7590", "message": "Implement role management service", "committedDate": "2020-05-20T06:10:48Z", "type": "forcePushed"}, {"oid": "d32f019cd2d115beb991716ebe5d8288b460d6ec", "url": "https://github.com/wso2/carbon-identity-framework/commit/d32f019cd2d115beb991716ebe5d8288b460d6ec", "message": "Implement role management service", "committedDate": "2020-05-20T11:06:23Z", "type": "forcePushed"}, {"oid": "ca5458675c477b9b95f2e26d14ad73346ab2e87e", "url": "https://github.com/wso2/carbon-identity-framework/commit/ca5458675c477b9b95f2e26d14ad73346ab2e87e", "message": "Implement role management service", "committedDate": "2020-05-20T12:31:36Z", "type": "forcePushed"}, {"oid": "07549f66d6c6fd1d44015205f88f15ee9c7e7694", "url": "https://github.com/wso2/carbon-identity-framework/commit/07549f66d6c6fd1d44015205f88f15ee9c7e7694", "message": "Implement role management service", "committedDate": "2020-06-11T08:56:23Z", "type": "forcePushed"}, {"oid": "ae99469b5be7536b70baa6e7c2b3bd291ab4669b", "url": "https://github.com/wso2/carbon-identity-framework/commit/ae99469b5be7536b70baa6e7c2b3bd291ab4669b", "message": "Implement role management service", "committedDate": "2020-06-12T03:48:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0Mzk0OA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r439343948", "bodyText": "shouldn't we pass userstore domain here?", "author": "emswbandara", "createdAt": "2020-06-12T10:42:25Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import java.util.List;\n+\n+/**\n+ * OSGi service interface which use to manage roles.\n+ */\n+public interface RoleManagementService {\n+\n+    /**\n+     * Add a new role.\n+     *\n+     * @param roleName     Role name.\n+     * @param userList     List of users.\n+     * @param groupList    List of groups.\n+     * @param permissions  List of permissions.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    void addRole(String roleName, List<String> userList, List<String> groupList, List<String> permissions,", "originalCommit": "ae99469b5be7536b70baa6e7c2b3bd291ab4669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4OTY2NA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r439589664", "bodyText": "According to the new concept, roles are stored internally. Only groups are specified under user stores.", "author": "ashensw", "createdAt": "2020-06-12T18:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0Mzk0OA=="}], "type": "inlineReview", "revised_code": {"commit": "24b5115c2274f7f9446ffc71b3b966470b627e12", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java\nindex 82216354aa3..d31c7e56e4c 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java\n\n@@ -28,14 +28,14 @@ public interface RoleManagementService {\n     /**\n      * Add a new role.\n      *\n-     * @param roleName     Role name.\n+     * @param roleID       Role ID.\n      * @param userList     List of users.\n      * @param groupList    List of groups.\n      * @param permissions  List of permissions.\n      * @param tenantDomain Tenant domain.\n      * @throws IdentityRoleManagementException IdentityRoleManagementException.\n      */\n-    void addRole(String roleName, List<String> userList, List<String> groupList, List<String> permissions,\n+    Role addRole(String roleID, List<String> userList, List<String> groupList, List<String> permissions,\n             String tenantDomain) throws IdentityRoleManagementException;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NTM2Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r439345363", "bodyText": "since role has an 'id' shall we add a method to retrieve roles by id?", "author": "emswbandara", "createdAt": "2020-06-12T10:45:33Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import java.util.List;\n+\n+/**\n+ * OSGi service interface which use to manage roles.\n+ */\n+public interface RoleManagementService {\n+\n+    /**\n+     * Add a new role.\n+     *\n+     * @param roleName     Role name.\n+     * @param userList     List of users.\n+     * @param groupList    List of groups.\n+     * @param permissions  List of permissions.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    void addRole(String roleName, List<String> userList, List<String> groupList, List<String> permissions,\n+            String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param tenantDomain Tenant domain.\n+     * @return List of role names.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<String> getRoles(String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param limit        Limit value.\n+     * @param offset       Offset value.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of role names.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<String> getRoles(int limit, int offset, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param filter       Filter for the role name.\n+     * @param limit        Limit value.\n+     * @param offset       Offset value.\n+     * @param sortBy       SortBy value.\n+     * @param sortOrder    Sort order value.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of role names.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<String> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve the given role.\n+     *\n+     * @param roleName     Role name.\n+     * @param tenantDomain Tenant domain.\n+     * @return The role object.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    Role getRole(String roleName, String tenantDomain) throws IdentityRoleManagementException;", "originalCommit": "ae99469b5be7536b70baa6e7c2b3bd291ab4669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU5MTI2MQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r439591261", "bodyText": "Role ID is generated in the SCIM layer and stored in SCIM tables. In this level, the role does not have an ID as we use the existing UM_HYBRID_ROLE table to store roles.", "author": "ashensw", "createdAt": "2020-06-12T18:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NTM2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "24b5115c2274f7f9446ffc71b3b966470b627e12", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java\nindex 82216354aa3..d31c7e56e4c 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java\n\n@@ -28,14 +28,14 @@ public interface RoleManagementService {\n     /**\n      * Add a new role.\n      *\n-     * @param roleName     Role name.\n+     * @param roleID       Role ID.\n      * @param userList     List of users.\n      * @param groupList    List of groups.\n      * @param permissions  List of permissions.\n      * @param tenantDomain Tenant domain.\n      * @throws IdentityRoleManagementException IdentityRoleManagementException.\n      */\n-    void addRole(String roleName, List<String> userList, List<String> groupList, List<String> permissions,\n+    Role addRole(String roleID, List<String> userList, List<String> groupList, List<String> permissions,\n             String tenantDomain) throws IdentityRoleManagementException;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NjE2MA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r439346160", "bodyText": "its better if we can pass error codes as well.", "author": "emswbandara", "createdAt": "2020-06-12T10:47:20Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public void addRole(String roleName, List<String> userList, List<String> groupList, List<String> permissions,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementException(\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getRoles(String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(tenantDomain);\n+    }\n+\n+    @Override\n+    public List<String> getRoles(int limit, int offset, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<String> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleName, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleName, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleName, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public void updateRoleName(String roleName, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.updateRoleName(roleName, newRoleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void deleteRole(String roleName, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.deleteRole(roleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<String> getUserListOfRole(String roleName, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getUserListOfRole(roleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void updateUserListOfRole(String roleName, List<String> newUserList, List<String> deletedUserList,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addUsersToRole(roleName, newUserList, tenantDomain);\n+        roleDAO.removeUsersFromRole(roleName, deletedUserList, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<String> getGroupListOfRole(String roleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getGroupListOfRole(roleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void updateGroupListOfRole(String roleName, List<String> newGroupNamesList,\n+            List<String> deletedGroupNamesList, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addGroupsToRole(roleName, newGroupNamesList, tenantDomain);\n+        roleDAO.removeGroupsFromRole(roleName, newGroupNamesList, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<String> getPermissionListOfRole(String roleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        try {\n+            return getSelectedPermissions(getUserAdminProxy().getRolePermissions(roleName, tenantId));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementException(\n+                    \"An error occurred when retrieving permissions of role : \" + roleName, e);", "originalCommit": "ae99469b5be7536b70baa6e7c2b3bd291ab4669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxMTQ5MA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r439711490", "bodyText": "Fixed and updated the PR.", "author": "ashensw", "createdAt": "2020-06-13T05:35:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NjE2MA=="}], "type": "inlineReview", "revised_code": {"commit": "5c771627b77ff9c8c269c2d6901b02c656b4212a", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\nindex 010170e5ea0..6631ce4d867 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\n\n@@ -33,6 +33,8 @@ import org.wso2.carbon.user.mgt.common.UserAdminException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n /**\n  * Implementation of the {@link RoleManagementService} interface.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NjczMQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r439346731", "bodyText": "remove redundant + in from \" + \"DB", "author": "emswbandara", "createdAt": "2020-06-12T10:48:37Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -0,0 +1,779 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.CarbonConstants;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.database.utils.jdbc.NamedPreparedStatement;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.Role;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants.RoleTableColumns;\n+import org.wso2.carbon.user.api.RealmConfiguration;\n+import org.wso2.carbon.user.api.UserRealm;\n+import org.wso2.carbon.user.api.UserStoreException;\n+import org.wso2.carbon.user.core.UserCoreConstants;\n+import org.wso2.carbon.user.core.UserStoreConfigConstants;\n+import org.wso2.carbon.user.core.util.UserCoreUtil;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_LIMIT;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_OFFSET;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.OPERATION_FORBIDDEN;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.ROLE_ALREADY_EXISTS;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.SORTING_NOT_IMPLEMENTED;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.H2;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.MICROSOFT;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.MY_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.POSTGRE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_GROUP_TO_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_GROUP_TO_ROLE_SQL_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_USER_TO_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_USER_TO_ROLE_SQL_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_GROUP_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_USER_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_LIST_OF_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_MYSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_POSTGRESQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_MYSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_POSTGRESQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_USER_LIST_OF_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.IS_ROLE_EXIST_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ON_DELETE_ROLE_REMOVE_GROUP_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ON_DELETE_ROLE_REMOVE_USER_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.REMOVE_GROUP_FROM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.REMOVE_USER_FROM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.UPDATE_ROLE_NAME_SQL;\n+\n+/**\n+ * Implementation of the {@link RoleDAO} interface.\n+ */\n+public class RoleDAOImpl implements RoleDAO {\n+\n+    private Log log = LogFactory.getLog(RoleDAOImpl.class);\n+    private static volatile RoleDAOImpl instance;\n+\n+    private RoleDAOImpl() {\n+\n+    }\n+\n+    public static RoleDAOImpl getInstance() {\n+\n+        if (instance == null) {\n+            synchronized (RoleDAOImpl.class) {\n+                if (instance == null) {\n+                    instance = new RoleDAOImpl();\n+                }\n+            }\n+        }\n+        return instance;\n+    }\n+\n+    @Override\n+    public void addRole(String roleName, List<String> userList, List<String> groupList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Creating the role: \" + roleName + \" in the tenantDomain: \" + tenantDomain);\n+        }\n+\n+        if (!this.isExistingRole(roleName, tenantDomain)) {\n+            try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+                try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, ADD_ROLE_SQL)) {\n+                    statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n+                    statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                    statement.executeUpdate();\n+                }\n+            } catch (SQLException e) {\n+                String errorMessage = \"Error while creating the role: %s in the tenantDomain: %s\";\n+                throw new IdentityRoleManagementException(String.format(errorMessage, roleName, tenantDomain), e);\n+            }\n+        } else {\n+            throw new IdentityRoleManagementException(ROLE_ALREADY_EXISTS.getCode(),\n+                    \"Role already exist for the role name: \" + roleName);\n+        }\n+\n+        // Assign users to the role.\n+        addUsersToRole(roleName, userList, tenantDomain);\n+        // Assign groups to the role.\n+        addGroupsToRole(roleName, groupList, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleName, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        Role role = new Role();\n+        role.setName(roleName);\n+        role.setTenantDomain(tenantDomain);\n+        role.setUsers(this.getUserListOfRole(roleName, tenantDomain));\n+        role.setGroups(this.getGroupListOfRole(roleName, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public List<String> getRoles(String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        List<String> roles;\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, GET_ROLES)) {\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                roles = buildRolesList(statement);\n+            }\n+        } catch (SQLException e) {\n+            throw new IdentityRoleManagementException(\"Error while listing roles in tenantDomain: \" + tenantDomain, e);\n+        }\n+        return Collections.unmodifiableList(roles);\n+    }\n+\n+    @Override\n+    public List<String> getRoles(int limit, int offset, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        validateAttributesForPagination(limit, offset);\n+        List<String> roles;\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection,\n+                    getDBTypeSpecificRolesRetrievalQuery(databaseProductName))) {\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                roles = processListRolesQuery(limit, offset, statement);\n+            }\n+        } catch (SQLException e) {\n+            throw new IdentityRoleManagementException(\"Error while listing roles in tenantDomain: \" + tenantDomain, e);\n+        }\n+        return Collections.unmodifiableList(roles);\n+    }\n+\n+    @Override\n+    public List<String> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (StringUtils.isBlank(filter) || \"*\".equals(filter)) {\n+            return getRoles(limit, offset, tenantDomain);\n+        }\n+        validateAttributesForPagination(limit, offset, sortBy, sortOrder);\n+        String filterResolvedForSQL = resolveSQLFilter(filter);\n+        List<String> roles;\n+\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection,\n+                    getDBTypeSpecificRolesRetrievalQueryByRoleName(databaseProductName))) {\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                statement.setString(RoleTableColumns.UM_ROLE_NAME, filterResolvedForSQL);\n+                roles = processListRolesQuery(limit, offset, statement);\n+            }\n+        } catch (SQLException e) {\n+            throw new IdentityRoleManagementException(\"Error while listing roles in tenantDomain: \" + tenantDomain, e);\n+        }\n+        return Collections.unmodifiableList(roles);\n+    }\n+\n+    private List<String> processListRolesQuery(int limit, int offset, NamedPreparedStatement statement)\n+            throws SQLException {\n+\n+        statement.setInt(RoleConstants.OFFSET, offset);\n+        statement.setInt(RoleConstants.LIMIT, limit);\n+        statement.setInt(RoleConstants.ZERO_BASED_START_INDEX, offset);\n+        statement.setInt(RoleConstants.ONE_BASED_START_INDEX, offset + 1);\n+        statement.setInt(RoleConstants.END_INDEX, offset + limit);\n+        return buildRolesList(statement);\n+    }\n+\n+    private List<String> buildRolesList(NamedPreparedStatement statement) throws SQLException {\n+\n+        List<String> roles = new ArrayList<>();\n+        try (ResultSet resultSet = statement.executeQuery()) {\n+            while (resultSet.next()) {\n+                String name = resultSet.getString(1);\n+                // Append the internal domain.\n+                if (!name.contains(UserCoreConstants.DOMAIN_SEPARATOR)) {\n+                    name = UserCoreConstants.INTERNAL_DOMAIN + CarbonConstants.DOMAIN_SEPARATOR + name;\n+                }\n+                roles.add(name);\n+            }\n+        }\n+        return roles;\n+    }\n+\n+    private String resolveSQLFilter(String filter) {\n+\n+        // To avoid any issues when the filter string is blank or null, assigning \"%\" to SQLFilter.\n+        String sqlfilter = \"%\";\n+        if (StringUtils.isNotBlank(filter)) {\n+            sqlfilter = filter.trim().replace(\"*\", \"%\").replace(\"?\", \"_\");\n+        }\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Input filter: \" + filter + \" resolved for SQL filter: \" + sqlfilter);\n+        }\n+        return sqlfilter;\n+    }\n+\n+    private String getDBTypeSpecificRolesRetrievalQueryByRoleName(String databaseProductName)\n+            throws IdentityRoleManagementException {\n+\n+        if (MY_SQL.equals(databaseProductName) || H2.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_MYSQL;\n+        } else if (ORACLE.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_ORACLE;\n+        } else if (MICROSOFT.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_MSSQL;\n+        } else if (POSTGRE_SQL.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_POSTGRESQL;\n+        } else if (databaseProductName != null && databaseProductName.contains(DB2)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_DB2;\n+        } else if (INFORMIX.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_INFORMIX;\n+        }\n+\n+        throw new IdentityRoleManagementException(\n+                \"Error while listing roles from \" + \"DB. Database driver for \" + databaseProductName", "originalCommit": "ae99469b5be7536b70baa6e7c2b3bd291ab4669b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxMTUwMA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r439711500", "bodyText": "Fixed and updated the PR.", "author": "ashensw", "createdAt": "2020-06-13T05:35:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NjczMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5c771627b77ff9c8c269c2d6901b02c656b4212a", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\nindex e797be5b8b2..9314fba44d3 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\n\n@@ -275,7 +275,7 @@ public class RoleDAOImpl implements RoleDAO {\n         }\n \n         throw new IdentityRoleManagementException(\n-                \"Error while listing roles from \" + \"DB. Database driver for \" + databaseProductName\n+                \"Error while listing roles from DB. Database driver for \" + databaseProductName\n                         + \"could not be identified or not supported.\");\n     }\n \n"}}, {"oid": "5c771627b77ff9c8c269c2d6901b02c656b4212a", "url": "https://github.com/wso2/carbon-identity-framework/commit/5c771627b77ff9c8c269c2d6901b02c656b4212a", "message": "Implement role management service", "committedDate": "2020-06-13T05:34:51Z", "type": "forcePushed"}, {"oid": "b3c4b19dcb8ff40ff6bd6354b6da697260a947d2", "url": "https://github.com/wso2/carbon-identity-framework/commit/b3c4b19dcb8ff40ff6bd6354b6da697260a947d2", "message": "Implement role management service", "committedDate": "2020-06-14T18:30:01Z", "type": "forcePushed"}, {"oid": "369f9fb254df1a89b0121d50b5505a3057392860", "url": "https://github.com/wso2/carbon-identity-framework/commit/369f9fb254df1a89b0121d50b5505a3057392860", "message": "Implement role management service", "committedDate": "2020-06-14T18:31:54Z", "type": "forcePushed"}, {"oid": "b6f2bafbd036743dd7a0d037421105d903d877bc", "url": "https://github.com/wso2/carbon-identity-framework/commit/b6f2bafbd036743dd7a0d037421105d903d877bc", "message": "Implement role management service", "committedDate": "2020-06-14T18:51:24Z", "type": "forcePushed"}, {"oid": "f7d27dc96406f42f2b080affe9181fb712d504bf", "url": "https://github.com/wso2/carbon-identity-framework/commit/f7d27dc96406f42f2b080affe9181fb712d504bf", "message": "Implement role management service", "committedDate": "2020-06-14T19:01:10Z", "type": "forcePushed"}, {"oid": "ad46a2631ffd916e41d34cb1213287163a5c3122", "url": "https://github.com/wso2/carbon-identity-framework/commit/ad46a2631ffd916e41d34cb1213287163a5c3122", "message": "Implement role management service", "committedDate": "2020-06-16T07:45:05Z", "type": "forcePushed"}, {"oid": "3284c54834def26d95094095aec402ae065ac2ff", "url": "https://github.com/wso2/carbon-identity-framework/commit/3284c54834def26d95094095aec402ae065ac2ff", "message": "Implement role management service", "committedDate": "2020-06-18T21:28:01Z", "type": "forcePushed"}, {"oid": "24b5115c2274f7f9446ffc71b3b966470b627e12", "url": "https://github.com/wso2/carbon-identity-framework/commit/24b5115c2274f7f9446ffc71b3b966470b627e12", "message": "Implement role management service", "committedDate": "2020-06-18T21:33:45Z", "type": "forcePushed"}, {"oid": "05de270dd375b75fe235611d3d23af2957c91f58", "url": "https://github.com/wso2/carbon-identity-framework/commit/05de270dd375b75fe235611d3d23af2957c91f58", "message": "Implement role management service", "committedDate": "2020-06-19T12:00:47Z", "type": "forcePushed"}, {"oid": "774a4cc677d8e6e189152747fcda67a1d4456bfe", "url": "https://github.com/wso2/carbon-identity-framework/commit/774a4cc677d8e6e189152747fcda67a1d4456bfe", "message": "Implement role management service", "committedDate": "2020-06-19T12:05:32Z", "type": "forcePushed"}, {"oid": "e8e0b3ae063826104d37188b30f25c39b01084d0", "url": "https://github.com/wso2/carbon-identity-framework/commit/e8e0b3ae063826104d37188b30f25c39b01084d0", "message": "Implement role management service", "committedDate": "2020-06-19T18:18:54Z", "type": "forcePushed"}, {"oid": "778c95a9c4eb64b748c7fae89a30599eb81a5d18", "url": "https://github.com/wso2/carbon-identity-framework/commit/778c95a9c4eb64b748c7fae89a30599eb81a5d18", "message": "Implement role management service", "committedDate": "2020-06-21T19:01:28Z", "type": "forcePushed"}, {"oid": "fd2e465bd8d83143aaec7b2e164f10bed0664dae", "url": "https://github.com/wso2/carbon-identity-framework/commit/fd2e465bd8d83143aaec7b2e164f10bed0664dae", "message": "Implement role management service", "committedDate": "2020-06-21T19:05:02Z", "type": "forcePushed"}, {"oid": "1a9e7cb6e6c84b1481868ca414e2bfb9f1e15562", "url": "https://github.com/wso2/carbon-identity-framework/commit/1a9e7cb6e6c84b1481868ca414e2bfb9f1e15562", "message": "Implement role management service", "committedDate": "2020-06-22T22:07:57Z", "type": "forcePushed"}, {"oid": "205bf20515692338080c2946492a9bec4c8114de", "url": "https://github.com/wso2/carbon-identity-framework/commit/205bf20515692338080c2946492a9bec4c8114de", "message": "Implement role management service", "committedDate": "2020-06-29T03:10:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyODY2Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446828662", "bodyText": "So this will be a PUT updating full permission list", "author": "malithie", "createdAt": "2020-06-29T07:36:22Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import java.util.List;\n+\n+/**\n+ * OSGi service interface which use to manage roles.\n+ */\n+public interface RoleManagementService {\n+\n+    /**\n+     * Add a new role.\n+     *\n+     * @param roleName     Role name.\n+     * @param userList     List of users IDs.\n+     * @param groupList    List of groups IDs.\n+     * @param permissions  List of permissions.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList, List<String> permissions,\n+            String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param limit        Limit value.\n+     * @param offset       Offset value.\n+     * @param sortBy       SortBy value.\n+     * @param sortOrder    Sort order value.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of roles.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param filter       Filter for the Role ID.\n+     * @param limit        Limit value.\n+     * @param offset       Offset value.\n+     * @param sortBy       SortBy value.\n+     * @param sortOrder    Sort order value.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of roles.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @return The role object.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Update Role ID.\n+     *\n+     * @param roleID       Role ID.\n+     * @param newRoleName  New Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo updateRoleName(String roleID, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**\n+     * Delete the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    void deleteRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Get user list of the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of users.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<UserBasicInfo> getUserListOfRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Update the user list of the given role.\n+     *\n+     * @param roleID          Role ID.\n+     * @param newUserList     The set of new users.\n+     * @param deletedUserList The set of deleted users.\n+     * @param tenantDomain    Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo updateUserListOfRole(String roleID, List<String> newUserList, List<String> deletedUserList,\n+            String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Get group list of the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of groups.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<GroupBasicInfo> getGroupListOfRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Update the group list of the given role.\n+     *\n+     * @param roleID                Role ID.\n+     * @param newGroupNamesList     The set of new groups.\n+     * @param deletedGroupNamesList The set of deleted groups.\n+     * @param tenantDomain          Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo updateGroupListOfRole(String roleID, List<String> newGroupNamesList,\n+            List<String> deletedGroupNamesList, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Get permission list of the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of permissions.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<String> getPermissionListOfRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Set the list of permission to the given role.\n+     *\n+     * @param roleID      Role ID.\n+     * @param permissions List of permissions.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo setPermissionsForRole(String roleID, List<String> permissions, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**", "originalCommit": "205bf20515692338080c2946492a9bec4c8114de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NzY0NQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446847645", "bodyText": "Yes. We have used the available UserRealmProxy for mange permissions which only have the capability to set full list.", "author": "ashensw", "createdAt": "2020-06-29T08:11:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyODY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2MDA4OA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446860088", "bodyText": "This is the existing RolePermissionManagementServiceImpl. We have moved the same implementation to the role management service. https://github.com/wso2/carbon-identity-framework/blob/master/components/user-mgt/org.wso2.carbon.user.mgt/src/main/java/org/wso2/carbon/user/mgt/RolePermissionManagementServiceImpl.java", "author": "ashensw", "createdAt": "2020-06-29T08:33:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyODY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE3MjM5NQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r447172395", "bodyText": "ok", "author": "malithie", "createdAt": "2020-06-29T18:34:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyODY2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "897ffe8169d6c22118ba2514b950438e17672c0a", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java\nindex 2a73969c5cd..c160c9a0108 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java\n\n@@ -33,6 +33,7 @@ public interface RoleManagementService {\n      * @param groupList    List of groups IDs.\n      * @param permissions  List of permissions.\n      * @param tenantDomain Tenant domain.\n+     * @return Basic role object.\n      * @throws IdentityRoleManagementException IdentityRoleManagementException.\n      */\n     RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList, List<String> permissions,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyOTMwMg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446829302", "bodyText": "We can move implementation to an internal package right", "author": "malithie", "createdAt": "2020-06-29T07:37:33Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;", "originalCommit": "205bf20515692338080c2946492a9bec4c8114de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0MDE0NQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r447040145", "bodyText": "Updated the PR with the changes.", "author": "ashensw", "createdAt": "2020-06-29T15:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyOTMwMg=="}], "type": "inlineReview", "revised_code": {"commit": "897ffe8169d6c22118ba2514b950438e17672c0a", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\nindex 6003a0c7912..ff2232c3d49 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\n\n@@ -24,7 +24,7 @@ import org.apache.commons.logging.LogFactory;\n import org.wso2.carbon.context.CarbonContext;\n import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n-import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleMgtDAOFactory;\n import org.wso2.carbon.user.core.UserRealm;\n import org.wso2.carbon.user.mgt.UserRealmProxy;\n import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMDMxMA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446830310", "bodyText": "Has this been the model we followed. Shouldn't the dao be a composite of the implementation and instantiated at the constructor.", "author": "malithie", "createdAt": "2020-06-29T07:39:38Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();", "originalCommit": "205bf20515692338080c2946492a9bec4c8114de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3ODkxMQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r447378911", "bodyText": "Updated the PR with the new changes.", "author": "ashensw", "createdAt": "2020-06-30T02:59:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMDMxMA=="}], "type": "inlineReview", "revised_code": {"commit": "897ffe8169d6c22118ba2514b950438e17672c0a", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\nindex 6003a0c7912..ff2232c3d49 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\n\n@@ -24,7 +24,7 @@ import org.apache.commons.logging.LogFactory;\n import org.wso2.carbon.context.CarbonContext;\n import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n-import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleMgtDAOFactory;\n import org.wso2.carbon.user.core.UserRealm;\n import org.wso2.carbon.user.mgt.UserRealmProxy;\n import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMTY3MA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446831670", "bodyText": "Should we do two operations here. Isn't it possible to handle the set to be updated at dao layer and optimize the call from there", "author": "malithie", "createdAt": "2020-06-29T07:42:25Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        RoleBasicInfo role = roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleID, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleID, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateRoleName(String roleID, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.updateRoleName(roleID, newRoleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void deleteRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.deleteRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<UserBasicInfo> getUserListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getUserListOfRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateUserListOfRole(String roleID, List<String> newUserList, List<String> deletedUserList,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addUsersToRole(roleID, newUserList, tenantDomain);\n+        return roleDAO.removeUsersFromRole(roleID, deletedUserList, tenantDomain);", "originalCommit": "205bf20515692338080c2946492a9bec4c8114de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNDcwOQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446834709", "bodyText": "Or optimize avoiding duplicated calls", "author": "malithie", "createdAt": "2020-06-29T07:48:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMTY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NjUwMQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446846501", "bodyText": "We will have to do INSERT and DELETE operations to add and remove users. So don't we need two calls for that?", "author": "ashensw", "createdAt": "2020-06-29T08:09:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMTY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3Njk5Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r447376993", "bodyText": "agree on that but shouldn't that be atomic. Not sure how the implementation should be. Better to reach for a db expert. Otherwise won't it have race conditions?", "author": "malithie", "createdAt": "2020-06-30T02:51:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMTY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyMjU4Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r447922582", "bodyText": "Added a single method in the DAO layer to handle the updateUserListOfRole as discussed.", "author": "ashensw", "createdAt": "2020-06-30T19:18:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMTY3MA=="}], "type": "inlineReview", "revised_code": {"commit": "897ffe8169d6c22118ba2514b950438e17672c0a", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\nindex 6003a0c7912..ff2232c3d49 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\n\n@@ -24,7 +24,7 @@ import org.apache.commons.logging.LogFactory;\n import org.wso2.carbon.context.CarbonContext;\n import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n-import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleMgtDAOFactory;\n import org.wso2.carbon.user.core.UserRealm;\n import org.wso2.carbon.user.mgt.UserRealmProxy;\n import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMjE3OA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446832178", "bodyText": "same case I mentioned above", "author": "malithie", "createdAt": "2020-06-29T07:43:29Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        RoleBasicInfo role = roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleID, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleID, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateRoleName(String roleID, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.updateRoleName(roleID, newRoleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void deleteRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.deleteRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<UserBasicInfo> getUserListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getUserListOfRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateUserListOfRole(String roleID, List<String> newUserList, List<String> deletedUserList,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addUsersToRole(roleID, newUserList, tenantDomain);\n+        return roleDAO.removeUsersFromRole(roleID, deletedUserList, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<GroupBasicInfo> getGroupListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getGroupListOfRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateGroupListOfRole(String roleID, List<String> newGroupNamesList,\n+            List<String> deletedGroupNamesList, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addGroupsToRole(roleID, newGroupNamesList, tenantDomain);\n+        return roleDAO.removeGroupsFromRole(roleID, newGroupNamesList, tenantDomain);", "originalCommit": "205bf20515692338080c2946492a9bec4c8114de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyMjY4MA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r447922680", "bodyText": "Added a single method in the DAO layer to handle the updateGroupListOfRole as discussed.", "author": "ashensw", "createdAt": "2020-06-30T19:18:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMjE3OA=="}], "type": "inlineReview", "revised_code": {"commit": "897ffe8169d6c22118ba2514b950438e17672c0a", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\nindex 6003a0c7912..ff2232c3d49 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\n\n@@ -24,7 +24,7 @@ import org.apache.commons.logging.LogFactory;\n import org.wso2.carbon.context.CarbonContext;\n import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n-import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleMgtDAOFactory;\n import org.wso2.carbon.user.core.UserRealm;\n import org.wso2.carbon.user.mgt.UserRealmProxy;\n import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMzg0OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446833849", "bodyText": "Doesn't this trigger duplicated queries\nCan't this be addressed as dao layer", "author": "malithie", "createdAt": "2020-06-29T07:46:48Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        RoleBasicInfo role = roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleID, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleID, tenantDomain));", "originalCommit": "205bf20515692338080c2946492a9bec4c8114de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0ODU0Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446848543", "bodyText": "We have used the available UserRealmProxy for mange permissions. So we didn't implement a DAO for that in the role management component.", "author": "ashensw", "createdAt": "2020-06-29T08:13:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMzg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2MTQwNA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446861404", "bodyText": "This is the existing RolePermissionManagementServiceImpl. We have moved the same implementation to the role management service. https://github.com/wso2/carbon-identity-framework/blob/master/components/user-mgt/org.wso2.carbon.user.mgt/src/main/java/org/wso2/carbon/user/mgt/RolePermissionManagementServiceImpl.java", "author": "ashensw", "createdAt": "2020-06-29T08:35:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMzg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE3NTI3Nw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r447175277", "bodyText": "Using user realm proxy is fine, but this initiate same query to convert role name right", "author": "malithie", "createdAt": "2020-06-29T18:39:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMzg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIyNjgxNQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r447226815", "bodyText": "Ah yes. Got the point. Moved the setPermissions logic to DAO and updated the PR.", "author": "ashensw", "createdAt": "2020-06-29T20:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMzg0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "897ffe8169d6c22118ba2514b950438e17672c0a", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\nindex 6003a0c7912..ff2232c3d49 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\n\n@@ -24,7 +24,7 @@ import org.apache.commons.logging.LogFactory;\n import org.wso2.carbon.context.CarbonContext;\n import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n-import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleMgtDAOFactory;\n import org.wso2.carbon.user.core.UserRealm;\n import org.wso2.carbon.user.mgt.UserRealmProxy;\n import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNTUxOA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446835518", "bodyText": "Shouldn't tenant domain being passed should be incorporated to pick the user realm", "author": "malithie", "createdAt": "2020-06-29T07:49:56Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        RoleBasicInfo role = roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleID, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleID, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateRoleName(String roleID, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.updateRoleName(roleID, newRoleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void deleteRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.deleteRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<UserBasicInfo> getUserListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getUserListOfRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateUserListOfRole(String roleID, List<String> newUserList, List<String> deletedUserList,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addUsersToRole(roleID, newUserList, tenantDomain);\n+        return roleDAO.removeUsersFromRole(roleID, deletedUserList, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<GroupBasicInfo> getGroupListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getGroupListOfRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateGroupListOfRole(String roleID, List<String> newGroupNamesList,\n+            List<String> deletedGroupNamesList, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addGroupsToRole(roleID, newGroupNamesList, tenantDomain);\n+        return roleDAO.removeGroupsFromRole(roleID, newGroupNamesList, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<String> getPermissionListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        String roleName = roleDAO.getRoleNameByID(roleID, tenantDomain);\n+        try {\n+            return getSelectedPermissions(getUserAdminProxy().getRolePermissions(roleName, tenantId));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when retrieving permissions of role : \" + roleID, e);\n+        }\n+    }\n+\n+    @Override\n+    public RoleBasicInfo setPermissionsForRole(String roleID, List<String> permissions, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        String roleName = roleDAO.getRoleNameByID(roleID, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+            return new RoleBasicInfo(roleID, roleName);\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleID, e);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isExistingRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.isExistingRoleID(roleID, tenantDomain);\n+    }\n+\n+    /**\n+     * Get the UserAdmin service.\n+     *\n+     * @return UserRealmProxy of UserAdmin service.\n+     */\n+    private UserRealmProxy getUserAdminProxy() {\n+\n+        UserRealm realm = (UserRealm) CarbonContext.getThreadLocalCarbonContext().getUserRealm();\n+        return new UserRealmProxy(realm);", "originalCommit": "205bf20515692338080c2946492a9bec4c8114de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyMTczOQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r447921739", "bodyText": "Updated the PR with the discussed changes and moved permissions related APIs also to the DAO layer.", "author": "ashensw", "createdAt": "2020-06-30T19:16:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNTUxOA=="}], "type": "inlineReview", "revised_code": {"commit": "897ffe8169d6c22118ba2514b950438e17672c0a", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\nindex 6003a0c7912..ff2232c3d49 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java\n\n@@ -24,7 +24,7 @@ import org.apache.commons.logging.LogFactory;\n import org.wso2.carbon.context.CarbonContext;\n import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n-import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleMgtDAOFactory;\n import org.wso2.carbon.user.core.UserRealm;\n import org.wso2.carbon.user.mgt.UserRealmProxy;\n import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNjIxNQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446836215", "bodyText": "Shouldn't this be GroupDAOImpl", "author": "malithie", "createdAt": "2020-06-29T07:51:07Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.wso2.carbon.database.utils.jdbc.NamedPreparedStatement;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementClientException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementServerException;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_REQUEST;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_ID_BY_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_NAME_BY_ID_SQL;\n+\n+/**\n+ * RoleDAO Implementation.\n+ */\n+public class GroupDAOImpl implements GroupDAO {\n+\n+    private static volatile GroupDAOImpl instance;\n+\n+    private GroupDAOImpl() {\n+\n+    }\n+\n+    public static GroupDAOImpl getInstance() {\n+\n+        if (instance == null) {\n+            synchronized (RoleDAOImpl.class) {", "originalCommit": "205bf20515692338080c2946492a9bec4c8114de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0ODc1OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446848759", "bodyText": "Fixed and updated the PR.", "author": "ashensw", "createdAt": "2020-06-29T08:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNjIxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9c35a360ca7261e59f458516e362425d8607e277", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java\nindex 8156e30497d..e5eac8c0fe9 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java\n\n@@ -52,7 +52,7 @@ public class GroupDAOImpl implements GroupDAO {\n     public static GroupDAOImpl getInstance() {\n \n         if (instance == null) {\n-            synchronized (RoleDAOImpl.class) {\n+            synchronized (GroupDAOImpl.class) {\n                 if (instance == null) {\n                     instance = new GroupDAOImpl();\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNzU3NQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446837575", "bodyText": "Should we have a singleton for DAOs ?\n@mefarazath @emswbandara , @JKAUSHALYA", "author": "malithie", "createdAt": "2020-06-29T07:53:35Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.wso2.carbon.database.utils.jdbc.NamedPreparedStatement;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementClientException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementServerException;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_REQUEST;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_ID_BY_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_NAME_BY_ID_SQL;\n+\n+/**\n+ * RoleDAO Implementation.\n+ */\n+public class GroupDAOImpl implements GroupDAO {\n+\n+    private static volatile GroupDAOImpl instance;\n+\n+    private GroupDAOImpl() {\n+\n+    }\n+\n+    public static GroupDAOImpl getInstance() {\n+\n+        if (instance == null) {\n+            synchronized (RoleDAOImpl.class) {\n+                if (instance == null) {\n+                    instance = new GroupDAOImpl();\n+                }\n+            }\n+        }\n+        return instance;\n+    }", "originalCommit": "205bf20515692338080c2946492a9bec4c8114de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1NTAwNQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446855005", "bodyText": "We can avoid the singleton pattern IMO.\nMove the DAO implementation to a private package and expose DAOs through a Factory class. WDYT?\nHaving a factory allows us to change the DAO implementation without impacting the consuming code.", "author": "mefarazath", "createdAt": "2020-06-29T08:25:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNzU3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NDc5Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446874793", "bodyText": "Ok. I'll add a DAO Factory and change the implementation accordingly.", "author": "ashensw", "createdAt": "2020-06-29T08:58:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNzU3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9c35a360ca7261e59f458516e362425d8607e277", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java\nindex 8156e30497d..e5eac8c0fe9 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java\n\n@@ -52,7 +52,7 @@ public class GroupDAOImpl implements GroupDAO {\n     public static GroupDAOImpl getInstance() {\n \n         if (instance == null) {\n-            synchronized (RoleDAOImpl.class) {\n+            synchronized (GroupDAOImpl.class) {\n                 if (instance == null) {\n                     instance = new GroupDAOImpl();\n                 }\n"}}, {"oid": "9c35a360ca7261e59f458516e362425d8607e277", "url": "https://github.com/wso2/carbon-identity-framework/commit/9c35a360ca7261e59f458516e362425d8607e277", "message": "Implement role management service", "committedDate": "2020-06-29T08:09:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1MDQ0OA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446850448", "bodyText": "shall we properly format this class?", "author": "dewniMW", "createdAt": "2020-06-29T08:16:57Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/IdentityRoleManagementException.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+/**\n+ * IdentityRoleManagementException.\n+ */\n+public class IdentityRoleManagementException extends Exception {", "originalCommit": "9c35a360ca7261e59f458516e362425d8607e277", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1MzU3NQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446853575", "bodyText": "Can you please elaborate more on the issue you see in the formatting?", "author": "ashensw", "createdAt": "2020-06-29T08:22:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1MDQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNDY4Nw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446924687", "bodyText": "adding new lines after the method declaration.", "author": "dewniMW", "createdAt": "2020-06-29T12:16:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1MDQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNzMyNg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446927326", "bodyText": "Fixed and updated the PR.", "author": "ashensw", "createdAt": "2020-06-29T12:21:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1MDQ0OA=="}], "type": "inlineReview", "revised_code": {"commit": "997efabd292a1bd734478511d0a3e2794e112417", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/IdentityRoleManagementException.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/IdentityRoleManagementException.java\nindex 4b1ac9b02ab..8755e9cd0c6 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/IdentityRoleManagementException.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/IdentityRoleManagementException.java\n\n@@ -33,6 +33,7 @@ public class IdentityRoleManagementException extends Exception {\n      * @param message Detailed message.\n      */\n     public IdentityRoleManagementException(String message) {\n+\n         super(message);\n         this.message = message;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1NjQwMg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446856402", "bodyText": "change Name to name", "author": "dewniMW", "createdAt": "2020-06-29T08:27:18Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.wso2.carbon.database.utils.jdbc.NamedPreparedStatement;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementClientException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementServerException;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_REQUEST;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_ID_BY_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_NAME_BY_ID_SQL;\n+\n+/**\n+ * RoleDAO Implementation.\n+ */\n+public class GroupDAOImpl implements GroupDAO {\n+\n+    private static volatile GroupDAOImpl instance;\n+\n+    private GroupDAOImpl() {\n+\n+    }\n+\n+    public static GroupDAOImpl getInstance() {\n+\n+        if (instance == null) {\n+            synchronized (GroupDAOImpl.class) {\n+                if (instance == null) {\n+                    instance = new GroupDAOImpl();\n+                }\n+            }\n+        }\n+        return instance;\n+    }\n+\n+    @Override\n+    public String getGroupNameByID(String id, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        String groupName = null;\n+        try (Connection connection = IdentityDatabaseUtil.getDBConnection(false)) {\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, GET_GROUP_NAME_BY_ID_SQL)) {\n+                statement.setInt(RoleConstants.RoleTableColumns.TENANT_ID, tenantId);\n+                statement.setString(RoleConstants.RoleTableColumns.ATTR_NAME, RoleConstants.ID_URI);\n+                statement.setString(RoleConstants.RoleTableColumns.ATTR_VALUE, id);\n+                int count = 0;\n+                try (ResultSet resultSet = statement.executeQuery()) {\n+                    while (resultSet.next()) {\n+                        // Handle multiple matching groups.\n+                        count++;\n+                        if (count > 1) {\n+                            String errorMessage =\n+                                    \"Invalid scenario. Multiple groups found for the given group ID: \" + id + \" and \"\n+                                            + \"tenantDomain: \" + tenantDomain;\n+                            throw new IdentityRoleManagementClientException(INVALID_REQUEST.getCode(), errorMessage);\n+                        }\n+                        groupName = resultSet.getString(1);\n+                    }\n+                }\n+            }\n+        } catch (SQLException e) {\n+            String errorMessage =\n+                    \"Error while resolving the group name for the given group ID: \" + id + \" and tenantDomain: \"\n+                            + tenantDomain;\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(), errorMessage, e);\n+        }\n+        return groupName;\n+    }\n+\n+    public Map<String, String> getGroupNamesByIDs(List<String> ids, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        Map<String, String> groupIdsToNames;\n+        try (Connection connection = IdentityDatabaseUtil.getDBConnection(false)) {\n+            groupIdsToNames = batchProcessGroupIDs(ids, tenantDomain, connection);\n+        } catch (SQLException e) {\n+            String errorMessage =\n+                    \"Error while resolving the group Name for the given group Ids in the tenantDomain: \" + tenantDomain;", "originalCommit": "9c35a360ca7261e59f458516e362425d8607e277", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5ODc1MA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446898750", "bodyText": "Fixed and updated the PR.", "author": "ashensw", "createdAt": "2020-06-29T11:29:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1NjQwMg=="}], "type": "inlineReview", "revised_code": {"commit": "897ffe8169d6c22118ba2514b950438e17672c0a", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java\nindex e5eac8c0fe9..a0a7118a30e 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java\n\n@@ -43,24 +43,6 @@ import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_NA\n  */\n public class GroupDAOImpl implements GroupDAO {\n \n-    private static volatile GroupDAOImpl instance;\n-\n-    private GroupDAOImpl() {\n-\n-    }\n-\n-    public static GroupDAOImpl getInstance() {\n-\n-        if (instance == null) {\n-            synchronized (GroupDAOImpl.class) {\n-                if (instance == null) {\n-                    instance = new GroupDAOImpl();\n-                }\n-            }\n-        }\n-        return instance;\n-    }\n-\n     @Override\n     public String getGroupNameByID(String id, String tenantDomain) throws IdentityRoleManagementException {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1OTA5Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446859093", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieve available roles.\n          \n          \n            \n                 * Retrieve available roles matching the provided filter.", "author": "dewniMW", "createdAt": "2020-06-29T08:31:43Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAO.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.wso2.carbon.identity.role.mgt.core.GroupBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.Role;\n+import org.wso2.carbon.identity.role.mgt.core.RoleBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.UserBasicInfo;\n+\n+import java.util.List;\n+\n+/**\n+ * RoleDAO interface.\n+ */\n+public interface RoleDAO {\n+\n+    /**\n+     * Add a new role.\n+     *\n+     * @param roleName     Role name.\n+     * @param userList     List of users.\n+     * @param groupList    List of groups.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param limit        Limit value.\n+     * @param offset       Offset value.\n+     * @param sortBy       SortBy value.\n+     * @param sortOrder    Sort order value.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of role names.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.", "originalCommit": "9c35a360ca7261e59f458516e362425d8607e277", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5ODcxNA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446898714", "bodyText": "Fixed and updated the PR.", "author": "ashensw", "createdAt": "2020-06-29T11:29:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1OTA5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "897ffe8169d6c22118ba2514b950438e17672c0a", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAO.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAO.java\nindex 3a3608611bf..f75e24b4f57 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAO.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAO.java\n\n@@ -38,6 +38,7 @@ public interface RoleDAO {\n      * @param userList     List of users.\n      * @param groupList    List of groups.\n      * @param tenantDomain Tenant domain.\n+     * @return Basic role object.\n      * @throws IdentityRoleManagementException IdentityRoleManagementException.\n      */\n     RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList, String tenantDomain)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1OTcwMQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446859701", "bodyText": "missing @return param. check on applicable places.", "author": "dewniMW", "createdAt": "2020-06-29T08:32:47Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAO.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.wso2.carbon.identity.role.mgt.core.GroupBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.Role;\n+import org.wso2.carbon.identity.role.mgt.core.RoleBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.UserBasicInfo;\n+\n+import java.util.List;\n+\n+/**\n+ * RoleDAO interface.\n+ */\n+public interface RoleDAO {\n+\n+    /**\n+     * Add a new role.\n+     *\n+     * @param roleName     Role name.\n+     * @param userList     List of users.\n+     * @param groupList    List of groups.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.", "originalCommit": "9c35a360ca7261e59f458516e362425d8607e277", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5ODY1Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446898653", "bodyText": "Fixed and updated the PR.", "author": "ashensw", "createdAt": "2020-06-29T11:29:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1OTcwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "897ffe8169d6c22118ba2514b950438e17672c0a", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAO.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAO.java\nindex 3a3608611bf..f75e24b4f57 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAO.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAO.java\n\n@@ -38,6 +38,7 @@ public interface RoleDAO {\n      * @param userList     List of users.\n      * @param groupList    List of groups.\n      * @param tenantDomain Tenant domain.\n+     * @return Basic role object.\n      * @throws IdentityRoleManagementException IdentityRoleManagementException.\n      */\n     RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList, String tenantDomain)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2MzgyNQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446863825", "bodyText": "shall we define a constant for \"*\" as it has been used in multiple places?", "author": "dewniMW", "createdAt": "2020-06-29T08:39:59Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -0,0 +1,1099 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.CarbonConstants;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.database.utils.jdbc.NamedPreparedStatement;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.role.mgt.core.GroupBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementClientException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementServerException;\n+import org.wso2.carbon.identity.role.mgt.core.Role;\n+import org.wso2.carbon.identity.role.mgt.core.RoleBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants.RoleTableColumns;\n+import org.wso2.carbon.identity.role.mgt.core.UserBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.util.GroupIDResolver;\n+import org.wso2.carbon.identity.role.mgt.core.util.UserIDResolver;\n+import org.wso2.carbon.user.api.RealmConfiguration;\n+import org.wso2.carbon.user.api.UserRealm;\n+import org.wso2.carbon.user.api.UserStoreException;\n+import org.wso2.carbon.user.core.UserCoreConstants;\n+import org.wso2.carbon.user.core.UserStoreConfigConstants;\n+import org.wso2.carbon.user.core.common.AbstractUserStoreManager;\n+import org.wso2.carbon.user.core.util.UserCoreUtil;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_LIMIT;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_OFFSET;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_REQUEST;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.OPERATION_FORBIDDEN;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.ROLE_ALREADY_EXISTS;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.ROLE_NOT_FOUND;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.SORTING_NOT_IMPLEMENTED;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.H2;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.MICROSOFT;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.MY_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.POSTGRE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_GROUP_TO_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_GROUP_TO_ROLE_SQL_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_SCIM_ROLE_ID_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_USER_TO_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_USER_TO_ROLE_SQL_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_GROUP_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_SCIM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_USER_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_LIST_OF_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_MYSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_POSTGRESQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_MYSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_POSTGRESQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLE_ID_BY_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLE_NAME_BY_ID_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_USER_LIST_OF_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.IS_ROLE_EXIST_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.IS_ROLE_ID_EXIST_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ON_DELETE_ROLE_REMOVE_GROUP_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ON_DELETE_ROLE_REMOVE_USER_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.REMOVE_GROUP_FROM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.REMOVE_USER_FROM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.UPDATE_ROLE_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.UPDATE_SCIM_ROLE_NAME_SQL;\n+\n+/**\n+ * Implementation of the {@link RoleDAO} interface.\n+ */\n+public class RoleDAOImpl implements RoleDAO {\n+\n+    private Log log = LogFactory.getLog(RoleDAOImpl.class);\n+    private static volatile RoleDAOImpl instance;\n+    private GroupIDResolver groupIDResolver = new GroupIDResolver();\n+    private UserIDResolver userIDResolver = new UserIDResolver();\n+\n+    private RoleDAOImpl() {\n+\n+    }\n+\n+    public static RoleDAOImpl getInstance() {\n+\n+        if (instance == null) {\n+            synchronized (RoleDAOImpl.class) {\n+                if (instance == null) {\n+                    instance = new RoleDAOImpl();\n+                }\n+            }\n+        }\n+        return instance;\n+    }\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Creating the role: \" + roleName + \" in the tenantDomain: \" + tenantDomain);\n+        }\n+\n+        if (!isExistingRoleName(roleName, tenantDomain)) {\n+            try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+                try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, ADD_ROLE_SQL)) {\n+                    statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n+                    statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                    statement.executeUpdate();\n+                }\n+            } catch (SQLException e) {\n+                String errorMessage = \"Error while creating the role: %s in the tenantDomain: %s\";\n+                throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                        String.format(errorMessage, roleName, tenantDomain), e);\n+            }\n+        } else {\n+            throw new IdentityRoleManagementClientException(ROLE_ALREADY_EXISTS.getCode(),\n+                    \"Role already exist for the role name: \" + roleName);\n+        }\n+\n+        String roleID = addRoleID(roleName, tenantDomain);\n+        // Assign users to the role.\n+        addUsersToRole(roleID, userList, tenantDomain);\n+        // Assign groups to the role.\n+        addGroupsToRole(roleID, groupList, tenantDomain);\n+\n+        return new RoleBasicInfo(roleID, roleName);\n+    }\n+\n+    protected String addRoleID(String roleName, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        String id = UUID.randomUUID().toString();\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Adding the roleID: \" + id + \" for the role: \" + roleName + \" in the tenantDomain: \"\n+                    + tenantDomain);\n+        }\n+\n+        try (Connection connection = IdentityDatabaseUtil.getDBConnection(false)) {\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, ADD_SCIM_ROLE_ID_SQL)) {\n+                statement.setInt(RoleTableColumns.TENANT_ID, tenantId);\n+                statement.setString(RoleTableColumns.ROLE_NAME, roleName);\n+                statement.setString(RoleTableColumns.ATTR_NAME, RoleConstants.ID_URI);\n+                statement.setString(RoleTableColumns.ATTR_VALUE, id);\n+                statement.executeUpdate();\n+            }\n+        } catch (SQLException e) {\n+            String errorMessage = \"Error while adding the the roleID: %s for the role: %s in the tenantDomain: %s\";\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    String.format(errorMessage, id, roleName, tenantDomain), e);\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        Role role = new Role();\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        role.setId(roleID);\n+        role.setName(roleName);\n+        role.setTenantDomain(tenantDomain);\n+        role.setUsers(getUserListOfRole(roleName, tenantDomain));\n+        role.setGroups(getGroupListOfRole(roleName, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        limit = validateLimit(limit);\n+        offset = validateOffset(offset);\n+        validateAttributesForSorting(sortBy, sortOrder);\n+        List<RoleBasicInfo> roles;\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection,\n+                    getDBTypeSpecificRolesRetrievalQuery(databaseProductName))) {\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                roles = processListRolesQuery(limit, offset, statement, tenantDomain);\n+            }\n+        } catch (SQLException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"Error while listing roles in tenantDomain: \" + tenantDomain, e);\n+        }\n+        return Collections.unmodifiableList(roles);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (StringUtils.isBlank(filter) || \"*\".equals(filter)) {", "originalCommit": "9c35a360ca7261e59f458516e362425d8607e277", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5ODU4OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446898589", "bodyText": "Fixed and updated the PR.", "author": "ashensw", "createdAt": "2020-06-29T11:29:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2MzgyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "897ffe8169d6c22118ba2514b950438e17672c0a", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\nindex 330b1b5c378..578008afb1f 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\n\n@@ -113,26 +113,9 @@ import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.UPDATE_SCIM_\n public class RoleDAOImpl implements RoleDAO {\n \n     private Log log = LogFactory.getLog(RoleDAOImpl.class);\n-    private static volatile RoleDAOImpl instance;\n     private GroupIDResolver groupIDResolver = new GroupIDResolver();\n     private UserIDResolver userIDResolver = new UserIDResolver();\n \n-    private RoleDAOImpl() {\n-\n-    }\n-\n-    public static RoleDAOImpl getInstance() {\n-\n-        if (instance == null) {\n-            synchronized (RoleDAOImpl.class) {\n-                if (instance == null) {\n-                    instance = new RoleDAOImpl();\n-                }\n-            }\n-        }\n-        return instance;\n-    }\n-\n     @Override\n     public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList, String tenantDomain)\n             throws IdentityRoleManagementException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3Nzc0Ng==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446877746", "bodyText": "shall we include the tenantDomain here?", "author": "dewniMW", "createdAt": "2020-06-29T09:02:58Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -0,0 +1,1099 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.CarbonConstants;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.database.utils.jdbc.NamedPreparedStatement;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.role.mgt.core.GroupBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementClientException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementServerException;\n+import org.wso2.carbon.identity.role.mgt.core.Role;\n+import org.wso2.carbon.identity.role.mgt.core.RoleBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants.RoleTableColumns;\n+import org.wso2.carbon.identity.role.mgt.core.UserBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.util.GroupIDResolver;\n+import org.wso2.carbon.identity.role.mgt.core.util.UserIDResolver;\n+import org.wso2.carbon.user.api.RealmConfiguration;\n+import org.wso2.carbon.user.api.UserRealm;\n+import org.wso2.carbon.user.api.UserStoreException;\n+import org.wso2.carbon.user.core.UserCoreConstants;\n+import org.wso2.carbon.user.core.UserStoreConfigConstants;\n+import org.wso2.carbon.user.core.common.AbstractUserStoreManager;\n+import org.wso2.carbon.user.core.util.UserCoreUtil;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_LIMIT;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_OFFSET;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_REQUEST;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.OPERATION_FORBIDDEN;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.ROLE_ALREADY_EXISTS;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.ROLE_NOT_FOUND;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.SORTING_NOT_IMPLEMENTED;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.H2;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.MICROSOFT;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.MY_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.POSTGRE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_GROUP_TO_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_GROUP_TO_ROLE_SQL_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_SCIM_ROLE_ID_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_USER_TO_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_USER_TO_ROLE_SQL_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_GROUP_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_SCIM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_USER_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_LIST_OF_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_MYSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_POSTGRESQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_MYSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_POSTGRESQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLE_ID_BY_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLE_NAME_BY_ID_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_USER_LIST_OF_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.IS_ROLE_EXIST_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.IS_ROLE_ID_EXIST_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ON_DELETE_ROLE_REMOVE_GROUP_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ON_DELETE_ROLE_REMOVE_USER_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.REMOVE_GROUP_FROM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.REMOVE_USER_FROM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.UPDATE_ROLE_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.UPDATE_SCIM_ROLE_NAME_SQL;\n+\n+/**\n+ * Implementation of the {@link RoleDAO} interface.\n+ */\n+public class RoleDAOImpl implements RoleDAO {\n+\n+    private Log log = LogFactory.getLog(RoleDAOImpl.class);\n+    private static volatile RoleDAOImpl instance;\n+    private GroupIDResolver groupIDResolver = new GroupIDResolver();\n+    private UserIDResolver userIDResolver = new UserIDResolver();\n+\n+    private RoleDAOImpl() {\n+\n+    }\n+\n+    public static RoleDAOImpl getInstance() {\n+\n+        if (instance == null) {\n+            synchronized (RoleDAOImpl.class) {\n+                if (instance == null) {\n+                    instance = new RoleDAOImpl();\n+                }\n+            }\n+        }\n+        return instance;\n+    }\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Creating the role: \" + roleName + \" in the tenantDomain: \" + tenantDomain);\n+        }\n+\n+        if (!isExistingRoleName(roleName, tenantDomain)) {\n+            try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+                try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, ADD_ROLE_SQL)) {\n+                    statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n+                    statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                    statement.executeUpdate();\n+                }\n+            } catch (SQLException e) {\n+                String errorMessage = \"Error while creating the role: %s in the tenantDomain: %s\";\n+                throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                        String.format(errorMessage, roleName, tenantDomain), e);\n+            }\n+        } else {\n+            throw new IdentityRoleManagementClientException(ROLE_ALREADY_EXISTS.getCode(),\n+                    \"Role already exist for the role name: \" + roleName);\n+        }\n+\n+        String roleID = addRoleID(roleName, tenantDomain);\n+        // Assign users to the role.\n+        addUsersToRole(roleID, userList, tenantDomain);\n+        // Assign groups to the role.\n+        addGroupsToRole(roleID, groupList, tenantDomain);\n+\n+        return new RoleBasicInfo(roleID, roleName);\n+    }\n+\n+    protected String addRoleID(String roleName, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        String id = UUID.randomUUID().toString();\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Adding the roleID: \" + id + \" for the role: \" + roleName + \" in the tenantDomain: \"\n+                    + tenantDomain);\n+        }\n+\n+        try (Connection connection = IdentityDatabaseUtil.getDBConnection(false)) {\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, ADD_SCIM_ROLE_ID_SQL)) {\n+                statement.setInt(RoleTableColumns.TENANT_ID, tenantId);\n+                statement.setString(RoleTableColumns.ROLE_NAME, roleName);\n+                statement.setString(RoleTableColumns.ATTR_NAME, RoleConstants.ID_URI);\n+                statement.setString(RoleTableColumns.ATTR_VALUE, id);\n+                statement.executeUpdate();\n+            }\n+        } catch (SQLException e) {\n+            String errorMessage = \"Error while adding the the roleID: %s for the role: %s in the tenantDomain: %s\";\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    String.format(errorMessage, id, roleName, tenantDomain), e);\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        Role role = new Role();\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        role.setId(roleID);\n+        role.setName(roleName);\n+        role.setTenantDomain(tenantDomain);\n+        role.setUsers(getUserListOfRole(roleName, tenantDomain));\n+        role.setGroups(getGroupListOfRole(roleName, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        limit = validateLimit(limit);\n+        offset = validateOffset(offset);\n+        validateAttributesForSorting(sortBy, sortOrder);\n+        List<RoleBasicInfo> roles;\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection,\n+                    getDBTypeSpecificRolesRetrievalQuery(databaseProductName))) {\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                roles = processListRolesQuery(limit, offset, statement, tenantDomain);\n+            }\n+        } catch (SQLException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"Error while listing roles in tenantDomain: \" + tenantDomain, e);\n+        }\n+        return Collections.unmodifiableList(roles);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (StringUtils.isBlank(filter) || \"*\".equals(filter)) {\n+            return getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+        }\n+        String filterResolvedForSQL = resolveSQLFilter(filter);\n+        limit = validateLimit(limit);\n+        offset = validateOffset(offset);\n+        validateAttributesForSorting(sortBy, sortOrder);\n+        List<RoleBasicInfo> roles;\n+\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection,\n+                    getDBTypeSpecificRolesRetrievalQueryByRoleName(databaseProductName))) {\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                statement.setString(RoleTableColumns.UM_ROLE_NAME, filterResolvedForSQL);\n+                roles = processListRolesQuery(limit, offset, statement, tenantDomain);\n+            }\n+        } catch (SQLException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"Error while listing roles in tenantDomain: \" + tenantDomain, e);\n+        }\n+        return Collections.unmodifiableList(roles);\n+    }\n+\n+    private List<RoleBasicInfo> processListRolesQuery(int limit, int offset, NamedPreparedStatement statement,\n+            String tenantDomain) throws SQLException, IdentityRoleManagementException {\n+\n+        statement.setInt(RoleConstants.OFFSET, offset);\n+        statement.setInt(RoleConstants.LIMIT, limit);\n+        statement.setInt(RoleConstants.ZERO_BASED_START_INDEX, offset);\n+        statement.setInt(RoleConstants.ONE_BASED_START_INDEX, offset + 1);\n+        statement.setInt(RoleConstants.END_INDEX, offset + limit);\n+        return buildRolesList(statement, tenantDomain);\n+    }\n+\n+    private List<RoleBasicInfo> buildRolesList(NamedPreparedStatement statement, String tenantDomain)\n+            throws SQLException, IdentityRoleManagementException {\n+\n+        List<RoleBasicInfo> roles = new ArrayList<>();\n+        try (ResultSet resultSet = statement.executeQuery()) {\n+            while (resultSet.next()) {\n+                String name = resultSet.getString(1);\n+                // Append the internal domain.\n+                if (!name.contains(UserCoreConstants.DOMAIN_SEPARATOR)) {\n+                    name = UserCoreConstants.INTERNAL_DOMAIN + CarbonConstants.DOMAIN_SEPARATOR + name;\n+                }\n+\n+                roles.add(new RoleBasicInfo(getRoleIDByName(name, tenantDomain), name));\n+            }\n+        }\n+        return roles;\n+    }\n+\n+    private String resolveSQLFilter(String filter) {\n+\n+        // To avoid any issues when the filter string is blank or null, assigning \"%\" to SQLFilter.\n+        String sqlfilter = \"%\";\n+        if (StringUtils.isNotBlank(filter)) {\n+            sqlfilter = filter.trim().replace(\"*\", \"%\").replace(\"?\", \"_\");\n+        }\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Input filter: \" + filter + \" resolved for SQL filter: \" + sqlfilter);\n+        }\n+        return sqlfilter;\n+    }\n+\n+    private String getDBTypeSpecificRolesRetrievalQueryByRoleName(String databaseProductName)\n+            throws IdentityRoleManagementException {\n+\n+        if (MY_SQL.equals(databaseProductName) || H2.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_MYSQL;\n+        } else if (ORACLE.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_ORACLE;\n+        } else if (MICROSOFT.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_MSSQL;\n+        } else if (POSTGRE_SQL.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_POSTGRESQL;\n+        } else if (databaseProductName != null && databaseProductName.contains(DB2)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_DB2;\n+        } else if (INFORMIX.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_INFORMIX;\n+        }\n+\n+        throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                \"Error while listing roles from DB. Database driver for \" + databaseProductName\n+                        + \"could not be identified or not supported.\");\n+    }\n+\n+    private String getDBTypeSpecificRolesRetrievalQuery(String databaseProductName)\n+            throws IdentityRoleManagementException {\n+\n+        if (MY_SQL.equals(databaseProductName) || H2.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_MYSQL;\n+        } else if (ORACLE.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_ORACLE;\n+        } else if (MICROSOFT.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_MSSQL;\n+        } else if (POSTGRE_SQL.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_POSTGRESQL;\n+        } else if (databaseProductName != null && databaseProductName.contains(DB2)) {\n+            return GET_ROLES_BY_TENANT_DB2;\n+        } else if (INFORMIX.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_INFORMIX;\n+        }\n+\n+        throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                \"Error while listing roles from DB. Database driver for \" + databaseProductName\n+                        + \"could not be identified or not supported.\");\n+    }\n+\n+    /**\n+     * Validate offset.\n+     *\n+     * @param offset given offset value.\n+     * @return validated offset value.\n+     * @throws IdentityRoleManagementClientException IdentityRoleManagementClientException.\n+     */\n+    private int validateOffset(Integer offset) throws IdentityRoleManagementClientException {\n+\n+        if (offset == null) {\n+            // Return first page offset.\n+            offset = 0;\n+        }\n+\n+        if (offset < 0) {\n+            String errorMessage =\n+                    \"Invalid offset requested. Offset value should be zero or greater than zero. offSet: \" + offset;\n+            throw new IdentityRoleManagementClientException(INVALID_OFFSET.getCode(), errorMessage);\n+        }\n+        return offset;\n+    }\n+\n+    /**\n+     * Validate limit.\n+     *\n+     * @param limit given limit value.\n+     * @return validated limit value.\n+     * @throws IdentityRoleManagementClientException IdentityRoleManagementClientException.\n+     */\n+    private int validateLimit(Integer limit) throws IdentityRoleManagementClientException {\n+\n+        int maximumItemsPerPage = IdentityUtil.getMaximumItemPerPage();\n+        if (limit == null) {\n+            limit = IdentityUtil.getDefaultItemsPerPage();\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Given limit is null. Therefore assigning the default limit: \" + limit);\n+            }\n+        } else if (limit < 0) {\n+            String errorMessage =\n+                    \"Invalid limit requested. Limit value should be greater than or equal to zero. limit: \" + limit;\n+            throw new IdentityRoleManagementClientException(INVALID_LIMIT.getCode(), errorMessage);\n+        } else if (limit > maximumItemsPerPage) {\n+            limit = maximumItemsPerPage;\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Given limit exceed the maximum limit. Therefore assigning the maximum limit: \"\n+                        + maximumItemsPerPage);\n+            }\n+        }\n+        return limit;\n+    }\n+\n+    /**\n+     * Validates the offset and limit values for pagination.\n+     *\n+     * @param sortBy    Sort By value.\n+     * @param sortOrder Sort order value.\n+     * @throws IdentityRoleManagementClientException IdentityRoleManagementClientException.\n+     */\n+    private void validateAttributesForSorting(String sortBy, String sortOrder)\n+            throws IdentityRoleManagementClientException {\n+\n+        if (StringUtils.isNotBlank(sortBy) || StringUtils.isNotBlank(sortOrder)) {\n+            throw new IdentityRoleManagementClientException(SORTING_NOT_IMPLEMENTED.getCode(),\n+                    \"Sorting not supported.\");\n+        }\n+    }\n+\n+    public RoleBasicInfo addUsersToRole(String roleID, List<String> userIDsList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        if (!isExistingRoleID(roleID, tenantDomain)) {\n+            throw new IdentityRoleManagementClientException(ROLE_NOT_FOUND.getCode(),\n+                    \"Role id: \" + roleID + \" does not exist in the system.\");\n+        }\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        if (CollectionUtils.isEmpty(userIDsList)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"User list is empty.\");\n+            }\n+            return new RoleBasicInfo(roleID, roleName);\n+        }\n+        List<String> userNamesList = getUserNamesByIDs(userIDsList, tenantDomain);\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+\n+        // This method is always invoked by the primary user store manager.\n+        String primaryDomainName = IdentityUtil.getPrimaryDomainName();\n+        if (primaryDomainName != null) {\n+            primaryDomainName = primaryDomainName.toUpperCase(Locale.ENGLISH);\n+        }\n+\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String sql = ADD_USER_TO_ROLE_SQL;\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            if (MICROSOFT.equals(databaseProductName)) {\n+                sql = ADD_USER_TO_ROLE_SQL_MSSQL;\n+            }\n+            processBatchUpdateForUsers(roleName, userNamesList, tenantId, primaryDomainName, connection, sql);\n+        } catch (SQLException e) {\n+            String errorMessage = \"Error while assigning users to the role: %s in the tenantDomain: %s\";\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    String.format(errorMessage, roleName, tenantDomain), e);\n+        }\n+        return new RoleBasicInfo(roleID, roleName);\n+    }\n+\n+    public RoleBasicInfo removeUsersFromRole(String roleID, List<String> userIDsList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        List<String> userNamesList = getUserNamesByIDs(userIDsList, tenantDomain);\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (CollectionUtils.isEmpty(userIDsList)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"User list is empty.\");\n+            }\n+            return new RoleBasicInfo(roleID, roleName);\n+        }\n+        // This method is always invoked by the primary user store manager.\n+        String primaryDomainName = IdentityUtil.getPrimaryDomainName();\n+        if (primaryDomainName != null) {\n+            primaryDomainName = primaryDomainName.toUpperCase(Locale.ENGLISH);\n+        }\n+\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            processBatchUpdateForUsers(roleName, userNamesList, tenantId, primaryDomainName, connection,\n+                    REMOVE_USER_FROM_ROLE_SQL);\n+        } catch (SQLException e) {\n+            String errorMessage = \"Error while removing users from the role: %s in the tenantDomain: %s\";\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    String.format(errorMessage, roleName, tenantDomain), e);\n+        }\n+        return new RoleBasicInfo(roleID, roleName);\n+    }\n+\n+    private void processBatchUpdateForUsers(String roleName, List<String> userNamesList, int tenantId,\n+            String primaryDomainName, Connection connection, String removeUserFromRoleSql) throws SQLException {\n+\n+        try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, removeUserFromRoleSql)) {\n+            for (String userName : userNamesList) {\n+                // Add domain if not set.\n+                userName = UserCoreUtil.addDomainToName(userName, primaryDomainName);\n+                // Get domain from name.\n+                String domainName = UserCoreUtil.extractDomainFromName(userName);\n+                if (domainName != null) {\n+                    domainName = domainName.toUpperCase(Locale.ENGLISH);\n+                }\n+                String nameWithoutDomain = UserCoreUtil.removeDomainFromName(userName);\n+                statement.setString(RoleTableColumns.UM_USER_NAME, nameWithoutDomain);\n+                statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                statement.setString(RoleTableColumns.UM_DOMAIN_NAME, domainName);\n+                statement.addBatch();\n+            }\n+            statement.executeBatch();\n+        }\n+    }\n+\n+    @Override\n+    public RoleBasicInfo addGroupsToRole(String roleID, List<String> groupIDsList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        if (!isExistingRoleID(roleID, tenantDomain)) {\n+            throw new IdentityRoleManagementClientException(ROLE_NOT_FOUND.getCode(),\n+                    \"Role id: \" + roleID + \" does not exist in the system.\");\n+        }\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        if (CollectionUtils.isEmpty(groupIDsList)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Group list is empty.\");\n+            }\n+            return new RoleBasicInfo(roleID, roleName);\n+        }\n+        Map<String, String> groupIdsToNames = getGroupNamesByIDs(groupIDsList, tenantDomain);\n+        List<String> groupNamesList = new ArrayList<>(groupIdsToNames.values());\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+\n+        // This method is always invoked by the primary user store manager.\n+        String primaryDomainName = IdentityUtil.getPrimaryDomainName();\n+        if (primaryDomainName != null) {\n+            primaryDomainName = primaryDomainName.toUpperCase(Locale.ENGLISH);\n+        }\n+\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String sql = ADD_GROUP_TO_ROLE_SQL;\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            if (MICROSOFT.equals(databaseProductName)) {\n+                sql = ADD_GROUP_TO_ROLE_SQL_MSSQL;\n+            }\n+            processBatchUpdateForGroups(roleName, groupNamesList, tenantId, primaryDomainName, connection, sql);\n+        } catch (SQLException e) {\n+            String errorMessage = \"Error while assigning groups to the role: %s in the tenantDomain: %s\";\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    String.format(errorMessage, roleName, tenantDomain), e);\n+        }\n+        return new RoleBasicInfo(roleID, roleName);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo removeGroupsFromRole(String roleID, List<String> groupIDsList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        Map<String, String> groupIdsToNames = getGroupNamesByIDs(groupIDsList, tenantDomain);\n+        List<String> groupNamesList = new ArrayList<>(groupIdsToNames.values());\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (CollectionUtils.isEmpty(groupIDsList)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Group list is empty.\");\n+            }\n+            return new RoleBasicInfo(roleID, roleName);\n+        }\n+\n+        // This method is always invoked by the primary user store manager.\n+        String primaryDomainName = IdentityUtil.getPrimaryDomainName();\n+        if (primaryDomainName != null) {\n+            primaryDomainName = primaryDomainName.toUpperCase(Locale.ENGLISH);\n+        }\n+\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            processBatchUpdateForGroups(roleName, groupNamesList, tenantId, primaryDomainName, connection,\n+                    REMOVE_GROUP_FROM_ROLE_SQL);\n+        } catch (SQLException e) {\n+            String errorMessage = \"Error while removing groups from the role: %s in the tenantDomain: %s\";\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    String.format(errorMessage, roleName, tenantDomain), e);\n+        }\n+        return new RoleBasicInfo(roleID, roleName);\n+    }\n+\n+    private void processBatchUpdateForGroups(String roleName, List<String> groupNamesList, int tenantId,\n+            String primaryDomainName, Connection connection, String removeGroupFromRoleSql) throws SQLException {\n+\n+        try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, removeGroupFromRoleSql)) {\n+            for (String groupName : groupNamesList) {\n+                // Add domain if not set.\n+                groupName = UserCoreUtil.addDomainToName(groupName, primaryDomainName);\n+                // Get domain from name.\n+                String domainName = UserCoreUtil.extractDomainFromName(groupName);\n+                if (domainName != null) {\n+                    domainName = domainName.toUpperCase(Locale.ENGLISH);\n+                }\n+                String nameWithoutDomain = UserCoreUtil.removeDomainFromName(groupName);\n+                statement.setString(RoleTableColumns.UM_GROUP_NAME, nameWithoutDomain);\n+                statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                statement.setString(RoleTableColumns.UM_DOMAIN_NAME, domainName);\n+                statement.addBatch();\n+            }\n+            statement.executeBatch();\n+        }\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateRoleName(String roleID, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (!isExistingRoleID(roleID, tenantDomain)) {\n+            throw new IdentityRoleManagementClientException(ROLE_NOT_FOUND.getCode(),\n+                    \"Role id: \" + roleID + \" does not exist in the system.\");\n+        }\n+        if (isExistingRoleName(newRoleName, tenantDomain)) {\n+            throw new IdentityRoleManagementClientException(ROLE_ALREADY_EXISTS.getCode(),\n+                    \"Role name: \" + newRoleName + \" is already there in the system. Please pick another role name.\");\n+        }\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Updating the roleName: \" + roleName + \" to :\" + newRoleName);", "originalCommit": "9c35a360ca7261e59f458516e362425d8607e277", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5ODUzNg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446898536", "bodyText": "Fixed and updated the PR.", "author": "ashensw", "createdAt": "2020-06-29T11:29:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3Nzc0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "897ffe8169d6c22118ba2514b950438e17672c0a", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\nindex 330b1b5c378..578008afb1f 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\n\n@@ -113,26 +113,9 @@ import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.UPDATE_SCIM_\n public class RoleDAOImpl implements RoleDAO {\n \n     private Log log = LogFactory.getLog(RoleDAOImpl.class);\n-    private static volatile RoleDAOImpl instance;\n     private GroupIDResolver groupIDResolver = new GroupIDResolver();\n     private UserIDResolver userIDResolver = new UserIDResolver();\n \n-    private RoleDAOImpl() {\n-\n-    }\n-\n-    public static RoleDAOImpl getInstance() {\n-\n-        if (instance == null) {\n-            synchronized (RoleDAOImpl.class) {\n-                if (instance == null) {\n-                    instance = new RoleDAOImpl();\n-                }\n-            }\n-        }\n-        return instance;\n-    }\n-\n     @Override\n     public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList, String tenantDomain)\n             throws IdentityRoleManagementException {\n"}}, {"oid": "897ffe8169d6c22118ba2514b950438e17672c0a", "url": "https://github.com/wso2/carbon-identity-framework/commit/897ffe8169d6c22118ba2514b950438e17672c0a", "message": "Implement role management service", "committedDate": "2020-06-29T11:28:47Z", "type": "forcePushed"}, {"oid": "997efabd292a1bd734478511d0a3e2794e112417", "url": "https://github.com/wso2/carbon-identity-framework/commit/997efabd292a1bd734478511d0a3e2794e112417", "message": "Implement role management service", "committedDate": "2020-06-29T12:20:09Z", "type": "forcePushed"}, {"oid": "afe800105ef974f56374eb97333a8a6a05513da5", "url": "https://github.com/wso2/carbon-identity-framework/commit/afe800105ef974f56374eb97333a8a6a05513da5", "message": "Implement role management service", "committedDate": "2020-06-29T13:16:38Z", "type": "forcePushed"}, {"oid": "4d1b825e2580f96feccd078b86c6d985bb9b279c", "url": "https://github.com/wso2/carbon-identity-framework/commit/4d1b825e2580f96feccd078b86c6d985bb9b279c", "message": "Implement role management service", "committedDate": "2020-06-29T13:35:49Z", "type": "forcePushed"}, {"oid": "d73b1f86a472f6cd35307ce5d3fbbecdc78a2f89", "url": "https://github.com/wso2/carbon-identity-framework/commit/d73b1f86a472f6cd35307ce5d3fbbecdc78a2f89", "message": "Implement role management service", "committedDate": "2020-06-29T20:14:29Z", "type": "forcePushed"}, {"oid": "b4e14d20ca0343c24979eb6f6e5eb74989fa2682", "url": "https://github.com/wso2/carbon-identity-framework/commit/b4e14d20ca0343c24979eb6f6e5eb74989fa2682", "message": "Implement role management service", "committedDate": "2020-06-30T19:14:06Z", "type": "forcePushed"}, {"oid": "d69bfae421dd47bc67d2aa7d5ac9c4f6056dc042", "url": "https://github.com/wso2/carbon-identity-framework/commit/d69bfae421dd47bc67d2aa7d5ac9c4f6056dc042", "message": "Implement role management service", "committedDate": "2020-07-01T03:28:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzQwMQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r448217401", "bodyText": "shall we follow the error code standard defined in \"[Architecture] WSO2 Identity Server REST API Error Response Standardization\" ?", "author": "emswbandara", "createdAt": "2020-07-01T08:53:50Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleConstants.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+/**\n+ * Role constants.\n+ */\n+public class RoleConstants {\n+\n+    private RoleConstants() {\n+\n+    }\n+\n+    public static final String DISABLED = \"Disabled\";\n+\n+    // DB product names.\n+    public static final String H2 = \"H2\";\n+    public static final String MY_SQL = \"MySQL\";\n+    public static final String ORACLE = \"Oracle\";\n+    public static final String MICROSOFT = \"Microsoft SQL Server\";\n+    public static final String POSTGRE_SQL = \"PostgreSQL\";\n+    public static final String DB2 = \"DB2\";\n+    public static final String INFORMIX = \"INFORMIX\";\n+\n+    // Named query fields.\n+    public static final String OFFSET = \"OFFSET\";\n+    public static final String LIMIT = \"LIMIT\";\n+    public static final String ZERO_BASED_START_INDEX = \"ZERO_BASED_START_INDEX\";\n+    public static final String ONE_BASED_START_INDEX = \"ONE_BASED_START_INDEX\";\n+    public static final String END_INDEX = \"END_INDEX\";\n+    public static final String WILDCARD_CHARACTER = \"*\";\n+\n+\n+    // Group related constants.\n+    public static final String ID_URI = \"urn:ietf:params:scim:schemas:core:2.0:id\";\n+\n+    /**\n+     * Grouping of constants related to database table names.\n+     */\n+    public static class RoleTableColumns {\n+\n+        public static final String UM_ROLE_NAME = \"UM_ROLE_NAME\";\n+        public static final String UM_TENANT_ID = \"UM_TENANT_ID\";\n+        public static final String NEW_UM_ROLE_NAME = \"NEW_UM_ROLE_NAME\";\n+        public static final String UM_USER_NAME = \"UM_USER_NAME\";\n+        public static final String UM_GROUP_NAME = \"UM_GROUP_NAME\";\n+        public static final String UM_DOMAIN_NAME = \"UM_DOMAIN_NAME\";\n+\n+        public static final String TENANT_ID = \"TENANT_ID\";\n+        public static final String ATTR_NAME = \"ATTR_NAME\";\n+        public static final String ATTR_VALUE = \"ATTR_VALUE\";\n+        public static final String ROLE_NAME = \"ROLE_NAME\";\n+        public static final String NEW_ROLE_NAME = \"NEW_ROLE_NAME\";\n+\n+        private RoleTableColumns() {\n+\n+        }\n+    }\n+\n+    /**\n+     * Error message enums.\n+     * <p>\n+     * Error codes for server errors start with 75 and client errors start with 70.\n+     */\n+    public enum Error {\n+\n+        UNEXPECTED_SERVER_ERROR(\"75001\"),", "originalCommit": "d69bfae421dd47bc67d2aa7d5ac9c4f6056dc042", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ2MDM1Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r448460352", "bodyText": "Changed the error codes accordingly and updated the PR.", "author": "ashensw", "createdAt": "2020-07-01T15:54:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzQwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7caab068bf1492cad2f3eef1c02c229385216bfd", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleConstants.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleConstants.java\nindex 51d4a183536..9ea2759d4d2 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleConstants.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleConstants.java\n\n@@ -80,20 +80,19 @@ public class RoleConstants {\n      */\n     public enum Error {\n \n-        UNEXPECTED_SERVER_ERROR(\"75001\"),\n-        SORTING_NOT_IMPLEMENTED(\"75002\"),\n-        ATTRIBUTE_FILTERING_NOT_IMPLEMENTED(\"75003\"),\n-\n-        INVALID_REQUEST(\"70001\"),\n-        INVALID_OFFSET(\"70002\"),\n-        INVALID_LIMIT(\"70003\"),\n-        INVALID_FILTER(\"70004\"),\n-        INVALID_SORT_BY(\"70005\"),\n-        INVALID_SORT_ORDER(\"70006\"),\n-        ROLE_NOT_FOUND(\"70007\"),\n-        ROLE_ALREADY_EXISTS(\"70008\"),\n-        OPERATION_FORBIDDEN(\"70009\"),\n-        OPERATION_NOT_SUPPORTED(\"70010\");\n+        INVALID_REQUEST(\"60001\"),\n+        INVALID_OFFSET(\"60002\"),\n+        INVALID_LIMIT(\"60003\"),\n+        INVALID_FILTER(\"60004\"),\n+        INVALID_SORT_BY(\"60005\"),\n+        INVALID_SORT_ORDER(\"60006\"),\n+        ROLE_NOT_FOUND(\"60007\"),\n+        ROLE_ALREADY_EXISTS(\"60008\"),\n+        OPERATION_FORBIDDEN(\"60009\"),\n+        OPERATION_NOT_SUPPORTED(\"60010\"),\n+\n+        UNEXPECTED_SERVER_ERROR(\"65001\"),\n+        SORTING_NOT_IMPLEMENTED(\"65002\");\n \n         private final String code;\n         private static final String ROLE_MANAGEMENT_ERROR_CODE_PREFIX = \"RMA-\";\n"}}, {"oid": "7caab068bf1492cad2f3eef1c02c229385216bfd", "url": "https://github.com/wso2/carbon-identity-framework/commit/7caab068bf1492cad2f3eef1c02c229385216bfd", "message": "Implement role management service", "committedDate": "2020-07-01T15:53:02Z", "type": "forcePushed"}, {"oid": "cc025bee3992034f50603fb2eb5d6877ffdc0a02", "url": "https://github.com/wso2/carbon-identity-framework/commit/cc025bee3992034f50603fb2eb5d6877ffdc0a02", "message": "Implement role management service", "committedDate": "2020-07-02T10:27:15Z", "type": "commit"}, {"oid": "cc025bee3992034f50603fb2eb5d6877ffdc0a02", "url": "https://github.com/wso2/carbon-identity-framework/commit/cc025bee3992034f50603fb2eb5d6877ffdc0a02", "message": "Implement role management service", "committedDate": "2020-07-02T10:27:15Z", "type": "forcePushed"}]}