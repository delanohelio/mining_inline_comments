{"pr_number": 2995, "pr_title": "Tenant qualify /identity endpoint", "pr_createdAt": "2020-07-02T09:00:47Z", "pr_url": "https://github.com/wso2/carbon-identity-framework/pull/2995", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0OTEzNg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#discussion_r451349136", "bodyText": "Shall we move chkRemember to a constant as it has been used in multiple places?", "author": "ashensw", "createdAt": "2020-07-08T07:48:48Z", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/handler/request/impl/DefaultAuthenticationRequestHandler.java", "diffHunk": "@@ -765,19 +763,41 @@ protected void sendResponse(HttpServletRequest request, HttpServletResponse resp\n \n         // redirect to the caller\n         String redirectURL;\n-        String commonauthCallerPath = context.getCallerPath();\n-\n+        String callerPath = context.getCallerPath();\n         try {\n-            String queryParamsString = \"\";\n-            if (context.getCallerSessionKey() != null) {\n-                queryParamsString = FrameworkConstants.SESSION_DATA_KEY + \"=\" +\n-                        URLEncoder.encode(context.getCallerSessionKey(), \"UTF-8\");\n-            }\n+            if (!FrameworkUtils.isAbsoluteURI(callerPath)) {\n+                ServiceURLBuilder serviceURLBuilder = ServiceURLBuilder.create().addPath(context.getCallerPath());\n+                if (context.getCallerSessionKey() != null) {\n+                    serviceURLBuilder.addParameter(FrameworkConstants.SESSION_DATA_KEY, URLEncoder.encode(context\n+                            .getCallerSessionKey(), \"UTF-8\"));\n+                }\n+\n+                if (context.isRequestAuthenticated() && context.isRememberMe()) {\n+                    serviceURLBuilder.addParameter(\"chkRemember\", \"on\");", "originalCommit": "e336730eaccec4510412c34a1349cc4b25154b8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a317e8319b43e8defe832d46e694bb61c6b6ed8", "chunk": "diff --git a/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/handler/request/impl/DefaultAuthenticationRequestHandler.java b/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/handler/request/impl/DefaultAuthenticationRequestHandler.java\nindex fe1c401e8c0..8d46806b5db 100644\n--- a/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/handler/request/impl/DefaultAuthenticationRequestHandler.java\n+++ b/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/handler/request/impl/DefaultAuthenticationRequestHandler.java\n\n@@ -773,7 +775,7 @@ public class DefaultAuthenticationRequestHandler implements AuthenticationReques\n                 }\n \n                 if (context.isRequestAuthenticated() && context.isRememberMe()) {\n-                    serviceURLBuilder.addParameter(\"chkRemember\", \"on\");\n+                    serviceURLBuilder.addParameter(CHECK_REMEMBER, CHECK_REMEMBER_ON);\n                 }\n \n                 try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0OTkwMQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#discussion_r451349901", "bodyText": "Can't we just assign the value to rememberMeParam here as the rememberMeParam is an empty string?", "author": "ashensw", "createdAt": "2020-07-08T07:50:07Z", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/handler/request/impl/DefaultAuthenticationRequestHandler.java", "diffHunk": "@@ -765,19 +763,41 @@ protected void sendResponse(HttpServletRequest request, HttpServletResponse resp\n \n         // redirect to the caller\n         String redirectURL;\n-        String commonauthCallerPath = context.getCallerPath();\n-\n+        String callerPath = context.getCallerPath();\n         try {\n-            String queryParamsString = \"\";\n-            if (context.getCallerSessionKey() != null) {\n-                queryParamsString = FrameworkConstants.SESSION_DATA_KEY + \"=\" +\n-                        URLEncoder.encode(context.getCallerSessionKey(), \"UTF-8\");\n-            }\n+            if (!FrameworkUtils.isAbsoluteURI(callerPath)) {\n+                ServiceURLBuilder serviceURLBuilder = ServiceURLBuilder.create().addPath(context.getCallerPath());\n+                if (context.getCallerSessionKey() != null) {\n+                    serviceURLBuilder.addParameter(FrameworkConstants.SESSION_DATA_KEY, URLEncoder.encode(context\n+                            .getCallerSessionKey(), \"UTF-8\"));\n+                }\n+\n+                if (context.isRequestAuthenticated() && context.isRememberMe()) {\n+                    serviceURLBuilder.addParameter(\"chkRemember\", \"on\");\n+                }\n \n-            if (StringUtils.isNotEmpty(rememberMeParam)) {\n-                queryParamsString += \"&\" + rememberMeParam;\n+                try {\n+                    redirectURL = serviceURLBuilder.build().getAbsolutePublicURL();\n+                } catch (URLBuilderException e) {\n+                    throw FrameworkRuntimeException.error(\"Error while building redirect URL.\", e);\n+                }\n+            } else {\n+                String queryParamsString = \"\";\n+                if (context.getCallerSessionKey() != null) {\n+                    queryParamsString = FrameworkConstants.SESSION_DATA_KEY + \"=\" +\n+                            URLEncoder.encode(context.getCallerSessionKey(), \"UTF-8\");\n+                }\n+                String rememberMeParam = \"\";\n+\n+                if (context.isRequestAuthenticated() && context.isRememberMe()) {\n+                    rememberMeParam = rememberMeParam + \"chkRemember=on\";", "originalCommit": "e336730eaccec4510412c34a1349cc4b25154b8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a317e8319b43e8defe832d46e694bb61c6b6ed8", "chunk": "diff --git a/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/handler/request/impl/DefaultAuthenticationRequestHandler.java b/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/handler/request/impl/DefaultAuthenticationRequestHandler.java\nindex fe1c401e8c0..8d46806b5db 100644\n--- a/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/handler/request/impl/DefaultAuthenticationRequestHandler.java\n+++ b/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/handler/request/impl/DefaultAuthenticationRequestHandler.java\n\n@@ -773,7 +775,7 @@ public class DefaultAuthenticationRequestHandler implements AuthenticationReques\n                 }\n \n                 if (context.isRequestAuthenticated() && context.isRememberMe()) {\n-                    serviceURLBuilder.addParameter(\"chkRemember\", \"on\");\n+                    serviceURLBuilder.addParameter(CHECK_REMEMBER, CHECK_REMEMBER_ON);\n                 }\n \n                 try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM1MTM4NQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#discussion_r451351385", "bodyText": "Is it correct to return true if the uri is empty?", "author": "ashensw", "createdAt": "2020-07-08T07:52:41Z", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2560,4 +2561,25 @@ public static boolean isContinueOnClaimHandlingErrorAllowed() {\n         // If config is empty or not a boolean value, the property must be set to the default value which is true.\n         return !Boolean.FALSE.toString().equalsIgnoreCase(continueOnClaimHandlingErrorValue);\n     }\n+\n+    public static boolean isAbsoluteURI(String uri) {\n+\n+        if (StringUtils.isBlank(uri)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"URI is empty.\");\n+            }\n+            return true;", "originalCommit": "e336730eaccec4510412c34a1349cc4b25154b8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a317e8319b43e8defe832d46e694bb61c6b6ed8", "chunk": "diff --git a/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java b/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java\nindex ee173f4735a..f7c59805cc4 100644\n--- a/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java\n+++ b/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java\n\n@@ -2568,18 +2581,14 @@ public class FrameworkUtils {\n             if (log.isDebugEnabled()) {\n                 log.debug(\"URI is empty.\");\n             }\n-            return true;\n+            return false;\n         }\n \n         try {\n             final URI uriObj = new URI(uri);\n             return uriObj.isAbsolute();\n         } catch (URISyntaxException e) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Unable to process the URI: \" + uri, e);\n-            }\n+            throw new RuntimeException(\"Unable to process the URI :\" + uri, e);\n         }\n-        // Default behavior of a URI is expected to be absolute;\n-        return true;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM1MjM0OA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#discussion_r451352348", "bodyText": "If the uri throws an URISyntaxException it will return true. Is it expected behavior?", "author": "ashensw", "createdAt": "2020-07-08T07:54:26Z", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2560,4 +2561,25 @@ public static boolean isContinueOnClaimHandlingErrorAllowed() {\n         // If config is empty or not a boolean value, the property must be set to the default value which is true.\n         return !Boolean.FALSE.toString().equalsIgnoreCase(continueOnClaimHandlingErrorValue);\n     }\n+\n+    public static boolean isAbsoluteURI(String uri) {\n+\n+        if (StringUtils.isBlank(uri)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"URI is empty.\");\n+            }\n+            return true;\n+        }\n+\n+        try {\n+            final URI uriObj = new URI(uri);\n+            return uriObj.isAbsolute();\n+        } catch (URISyntaxException e) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Unable to process the URI: \" + uri, e);\n+            }\n+        }\n+        // Default behavior of a URI is expected to be absolute;\n+        return true;", "originalCommit": "e336730eaccec4510412c34a1349cc4b25154b8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2MjIyNA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#discussion_r452762224", "bodyText": "fixed", "author": "emswbandara", "createdAt": "2020-07-10T10:30:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM1MjM0OA=="}], "type": "inlineReview", "revised_code": {"commit": "1a317e8319b43e8defe832d46e694bb61c6b6ed8", "chunk": "diff --git a/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java b/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java\nindex ee173f4735a..f7c59805cc4 100644\n--- a/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java\n+++ b/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java\n\n@@ -2568,18 +2581,14 @@ public class FrameworkUtils {\n             if (log.isDebugEnabled()) {\n                 log.debug(\"URI is empty.\");\n             }\n-            return true;\n+            return false;\n         }\n \n         try {\n             final URI uriObj = new URI(uri);\n             return uriObj.isAbsolute();\n         } catch (URISyntaxException e) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Unable to process the URI: \" + uri, e);\n-            }\n+            throw new RuntimeException(\"Unable to process the URI :\" + uri, e);\n         }\n-        // Default behavior of a URI is expected to be absolute;\n-        return true;\n     }\n }\n"}}, {"oid": "15dfdffa79946175666b14b114cec8e145ed2ef8", "url": "https://github.com/wso2/carbon-identity-framework/commit/15dfdffa79946175666b14b114cec8e145ed2ef8", "message": "Fix tenant qualify /identity endpoint", "committedDate": "2020-07-10T10:31:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwNzMxNg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#discussion_r455107316", "bodyText": "Should we do this?", "author": "mefarazath", "createdAt": "2020-07-15T14:44:17Z", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java", "diffHunk": "@@ -229,8 +241,17 @@ public String getType(IdentityMessageContext context) {\n         responseBuilder.setCallbackPath(getCallbackPath(context));\n         responseBuilder.setRelyingParty(getRelyingPartyId(context));\n         //type parameter is using since framework checking it, but future it'll use AUTH_NAME\n-        responseBuilder.setAuthType(getType(context));\n-        String commonAuthURL = IdentityUtil.getServerURL(FrameworkConstants.COMMONAUTH, true, true);\n+        String commonAuthURL;\n+        try {\n+            ServiceURLBuilder serviceURLBuilder = ServiceURLBuilder.create().addPath(FrameworkConstants.COMMONAUTH);\n+            commonAuthURL = serviceURLBuilder.build().getAbsolutePublicURL();\n+        } catch (URLBuilderException e) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Error occurred when building URL.\", e);\n+            }\n+            // Fallback to old way, for error scenarios.\n+            commonAuthURL = IdentityUtil.getServerURL(FrameworkConstants.COMMONAUTH, true, true);", "originalCommit": "d9b9ee0b38f361d34752af71ae3f8cbc40b5414b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a317e8319b43e8defe832d46e694bb61c6b6ed8", "chunk": "diff --git a/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java b/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java\nindex ecd8887bf5b..50023094d90 100644\n--- a/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java\n+++ b/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java\n\n@@ -246,11 +242,7 @@ public abstract class IdentityProcessor extends AbstractIdentityHandler {\n             ServiceURLBuilder serviceURLBuilder = ServiceURLBuilder.create().addPath(FrameworkConstants.COMMONAUTH);\n             commonAuthURL = serviceURLBuilder.build().getAbsolutePublicURL();\n         } catch (URLBuilderException e) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Error occurred when building URL.\", e);\n-            }\n-            // Fallback to old way, for error scenarios.\n-            commonAuthURL = IdentityUtil.getServerURL(FrameworkConstants.COMMONAUTH, true, true);\n+            throw new RuntimeException(\"Error occurred when building URL.\", e);\n         }\n         responseBuilder.setRedirectURL(commonAuthURL);\n         return responseBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwNzcwMg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#discussion_r455107702", "bodyText": "Wouldn't this cause incorrect behaviours in tenant qualified URL mode?", "author": "mefarazath", "createdAt": "2020-07-15T14:44:47Z", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java", "diffHunk": "@@ -180,7 +182,17 @@ public String getType(IdentityMessageContext context) {\n         responseBuilder.setRelyingParty(getRelyingPartyId(context));\n         //type parameter is using since framework checking it, but future it'll use AUTH_NAME\n         responseBuilder.setAuthType(getType(context));\n-        String commonAuthURL = IdentityUtil.getServerURL(FrameworkConstants.COMMONAUTH, true, true);\n+        String commonAuthURL;\n+        try {\n+            ServiceURLBuilder serviceURLBuilder = ServiceURLBuilder.create().addPath(FrameworkConstants.COMMONAUTH);\n+            commonAuthURL = serviceURLBuilder.build().getAbsolutePublicURL();\n+        } catch (URLBuilderException e) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Error occurred when building URL.\", e);\n+            }\n+            // Fallback to old way, for error scenarios.\n+            commonAuthURL = IdentityUtil.getServerURL(FrameworkConstants.COMMONAUTH, true, true);", "originalCommit": "d9b9ee0b38f361d34752af71ae3f8cbc40b5414b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a317e8319b43e8defe832d46e694bb61c6b6ed8", "chunk": "diff --git a/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java b/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java\nindex ecd8887bf5b..50023094d90 100644\n--- a/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java\n+++ b/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java\n\n@@ -187,11 +187,7 @@ public abstract class IdentityProcessor extends AbstractIdentityHandler {\n             ServiceURLBuilder serviceURLBuilder = ServiceURLBuilder.create().addPath(FrameworkConstants.COMMONAUTH);\n             commonAuthURL = serviceURLBuilder.build().getAbsolutePublicURL();\n         } catch (URLBuilderException e) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Error occurred when building URL.\", e);\n-            }\n-            // Fallback to old way, for error scenarios.\n-            commonAuthURL = IdentityUtil.getServerURL(FrameworkConstants.COMMONAUTH, true, true);\n+            throw new RuntimeException(\"Error occurred when building URL.\", e);\n         }\n         responseBuilder.setRedirectURL(commonAuthURL);\n         return responseBuilder;\n"}}, {"oid": "1a317e8319b43e8defe832d46e694bb61c6b6ed8", "url": "https://github.com/wso2/carbon-identity-framework/commit/1a317e8319b43e8defe832d46e694bb61c6b6ed8", "message": "Address comments", "committedDate": "2020-07-17T05:16:00Z", "type": "commit"}]}