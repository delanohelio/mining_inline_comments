{"pr_number": 3025, "pr_title": "Tenant qualify /identity endpoint", "pr_createdAt": "2020-07-22T09:11:54Z", "pr_url": "https://github.com/wso2/carbon-identity-framework/pull/3025", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg1NTUzMA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3025#discussion_r459855530", "bodyText": "Better to move (new URI(getCallbackPath(context)).isAbsolute()) to a private method", "author": "mefarazath", "createdAt": "2020-07-24T05:15:55Z", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java", "diffHunk": "@@ -100,6 +105,25 @@ public void init(InitConfig initConfig) {\n      */\n     public abstract String getCallbackPath(IdentityMessageContext context);\n \n+    /**\n+     * Get tenant qualified callback path.\n+     *\n+     * @param context IdentityMessageContext\n+     * @return Tenant qualified callback path\n+     */\n+    protected String getTenantQualifiedCallbackPath(IdentityMessageContext context) {\n+\n+        try {\n+            if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled() && !(new URI(getCallbackPath(context)).isAbsolute()", "originalCommit": "3f9cf8acf71ab7497bdb89a3e0d497aea689dc6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg1NTU5Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3025#discussion_r459855592", "bodyText": "Let's move !getCallbackPath(context).startsWith(\"/t/\") to a private method", "author": "mefarazath", "createdAt": "2020-07-24T05:16:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg1NTUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg1NjA5Ng==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3025#discussion_r459856096", "bodyText": "We need to handle a few cases here\n\n\ntenant qualified mode with absolute callback path\n\n\ntenant qualified mode with relative callback path without /t/\n\n\ntenant qualified mode with relative callback path with /t/ (already tenant qualified)\n\n\nnon-tenant qualified mode with absolute callback path\n\n\nnon-tenant qualified mode with relative callback path without /t/\n\n\nnon-tenant qualified mode with relative callback path with /t/ (already tenant qualified)\n\n\nCan we have a unit test to cover these cases?", "author": "mefarazath", "createdAt": "2020-07-24T05:18:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg1NTUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3NTI0Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3025#discussion_r460375242", "bodyText": "created wso2/product-is#9070 to track this.", "author": "emswbandara", "createdAt": "2020-07-25T07:06:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg1NTUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "e025bb3ac6246821b87c12542ae8a77f86a6f9eb", "chunk": "diff --git a/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java b/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java\nindex ab62e502f2a..c17773d074b 100644\n--- a/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java\n+++ b/components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java\n\n@@ -113,15 +115,50 @@ public abstract class IdentityProcessor extends AbstractIdentityHandler {\n      */\n     protected String getTenantQualifiedCallbackPath(IdentityMessageContext context) {\n \n+        String callbackPath = getCallbackPath(context);\n         try {\n-            if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled() && !(new URI(getCallbackPath(context)).isAbsolute()\n-            ) && !getCallbackPath(context).startsWith(\"/t/\")) {\n-                return ServiceURLBuilder.create().addPath(getCallbackPath(context)).build().getAbsolutePublicURL();\n+            if (!isAbsoluteURI(callbackPath) && !isTenantQualifiedURI(callbackPath)) {\n+                if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+                    callbackPath = ServiceURLBuilder.create().addPath(getCallbackPath(context)).build()\n+                            .getAbsolutePublicURL();\n+                } else {\n+                    String serverUrl = ServiceURLBuilder.create().build().getAbsolutePublicURL();\n+                    String tenantDomain = getTenantDomainFromContext();\n+                    if (!isSuperTenantFlow(tenantDomain)) {\n+                        callbackPath = serverUrl + \"/t/\" + tenantDomain + \"/\" + callbackPath;\n+                    } else {\n+                        callbackPath = serverUrl + \"/\" + callbackPath;\n+                    }\n+                }\n             }\n         } catch (URISyntaxException | URLBuilderException e) {\n             throw new RuntimeException(\"Error while building tenant qualified Callback Path.\", e);\n         }\n-        return getCallbackPath(context);\n+        return callbackPath;\n+    }\n+\n+    private boolean isAbsoluteURI(String uri) throws URISyntaxException {\n+\n+       return new URI(uri).isAbsolute();\n+    }\n+\n+    private boolean isTenantQualifiedURI(String uri) {\n+\n+        return uri.startsWith(\"/t/\") || uri.startsWith(\"t/\");\n+    }\n+\n+    private String getTenantDomainFromContext() {\n+\n+        String tenantDomain = IdentityTenantUtil.getTenantDomainFromContext();\n+        if (StringUtils.isBlank(tenantDomain)) {\n+            tenantDomain = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantDomain();\n+        }\n+        return tenantDomain;\n+    }\n+\n+    private boolean isSuperTenantFlow(String tenantDomain) {\n+\n+        return MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(tenantDomain);\n     }\n \n     /**\n"}}, {"oid": "e025bb3ac6246821b87c12542ae8a77f86a6f9eb", "url": "https://github.com/wso2/carbon-identity-framework/commit/e025bb3ac6246821b87c12542ae8a77f86a6f9eb", "message": "Tenant qualify /identity endpoint", "committedDate": "2020-07-25T07:02:02Z", "type": "commit"}]}