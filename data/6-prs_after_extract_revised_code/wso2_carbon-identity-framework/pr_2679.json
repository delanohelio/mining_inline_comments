{"pr_number": 2679, "pr_title": "Framework changes for the Script Library Management REST API", "pr_createdAt": "2020-01-19T09:11:14Z", "pr_url": "https://github.com/wso2/carbon-identity-framework/pull/2679", "timeline": [{"oid": "94f9b853adba261b9ccc0c125f62792c4a6b84ac", "url": "https://github.com/wso2/carbon-identity-framework/commit/94f9b853adba261b9ccc0c125f62792c4a6b84ac", "message": "Created framework changes for the SCL REST API", "committedDate": "2020-01-19T09:03:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5OTk5OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r368399999", "bodyText": "need to check if(log.isDebugEnabled)", "author": "emswbandara", "createdAt": "2020-01-20T07:31:48Z", "path": "components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/FunctionLibraryManagementAdminService.java", "diffHunk": "@@ -170,10 +174,11 @@ private void evaluateScript(FunctionLibrary functionLibrary) throws FunctionLibr\n             code = head + code;\n             engine.eval(code);\n         } catch (ScriptException e) {\n-            log.error(\"Function library script of \" + functionLibrary.getFunctionLibraryName() +\n+            log.debug(\"Script library script of \" + functionLibrary.getFunctionLibraryName() +", "originalCommit": "94f9b853adba261b9ccc0c125f62792c4a6b84ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwNTU2MQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r368405561", "bodyText": "My bad. It should be a log.error() not log.debug.", "author": "Wathsara", "createdAt": "2020-01-20T07:51:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5OTk5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMDAyNg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r368410026", "bodyText": "Fixed Commit", "author": "Wathsara", "createdAt": "2020-01-20T08:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5OTk5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9a526929402c0b6fb5ef8eab5d87a89fbaeee7c8", "chunk": "diff --git a/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/FunctionLibraryManagementAdminService.java b/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/FunctionLibraryManagementAdminService.java\nindex dc07d5ff635..ddccb4b7f9c 100644\n--- a/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/FunctionLibraryManagementAdminService.java\n+++ b/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/FunctionLibraryManagementAdminService.java\n\n@@ -174,7 +174,7 @@ public class FunctionLibraryManagementAdminService extends AbstractAdmin {\n             code = head + code;\n             engine.eval(code);\n         } catch (ScriptException e) {\n-            log.debug(\"Script library script of \" + functionLibrary.getFunctionLibraryName() +\n+            log.error(\"Script library script of \" + functionLibrary.getFunctionLibraryName() +\n                     \" contains errors.\" + e);\n             throw FunctionLibraryExceptionManagementUtil.handleClientException(\n                     FunctionLibraryManagementConstants.ErrorMessage.ERROR_CODE_VALIDATE_SCRIPT_LIBRARY_SCRIPT,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwMDI4OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r368400289", "bodyText": "check if debug is enabled", "author": "emswbandara", "createdAt": "2020-01-20T07:32:49Z", "path": "components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/FunctionLibraryManagementServiceImpl.java", "diffHunk": "@@ -168,10 +176,12 @@ private void evaluateScript(FunctionLibrary functionLibrary) throws FunctionLibr\n             code = head + code;\n             engine.eval(code);\n         } catch (ScriptException e) {\n-            log.error(\"Function library script of \" + functionLibrary.getFunctionLibraryName() +\n+            log.debug(\"Script library script of \" + functionLibrary.getFunctionLibraryName() +", "originalCommit": "94f9b853adba261b9ccc0c125f62792c4a6b84ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwNTYwMQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r368405601", "bodyText": "My bad. It should be a log.error() not log.debug.", "author": "Wathsara", "createdAt": "2020-01-20T07:52:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwMDI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMDcyMw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r368410723", "bodyText": "Fixed commit", "author": "Wathsara", "createdAt": "2020-01-20T08:09:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwMDI4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9a526929402c0b6fb5ef8eab5d87a89fbaeee7c8", "chunk": "diff --git a/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/FunctionLibraryManagementServiceImpl.java b/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/FunctionLibraryManagementServiceImpl.java\nindex b5112c18406..41e79f8c3c5 100644\n--- a/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/FunctionLibraryManagementServiceImpl.java\n+++ b/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/FunctionLibraryManagementServiceImpl.java\n\n@@ -176,7 +175,7 @@ public class FunctionLibraryManagementServiceImpl implements FunctionLibraryMana\n             code = head + code;\n             engine.eval(code);\n         } catch (ScriptException e) {\n-            log.debug(\"Script library script of \" + functionLibrary.getFunctionLibraryName() +\n+            log.error(\"Script library script of \" + functionLibrary.getFunctionLibraryName() +\n                     \" contains errors.\" + e);\n             throw FunctionLibraryExceptionManagementUtil.handleClientException(\n                     FunctionLibraryManagementConstants.ErrorMessage.ERROR_CODE_VALIDATE_SCRIPT_LIBRARY_SCRIPT,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwMDUyMA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r368400520", "bodyText": "why this change is required? isn't FunctionLibraryManagementServerException a subclass of FunctionLibraryManagementException?", "author": "emswbandara", "createdAt": "2020-01-20T07:33:39Z", "path": "components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/dao/impl/FunctionLibraryDAOImpl.java", "diffHunk": "@@ -56,7 +59,7 @@\n      * @throws FunctionLibraryManagementException\n      */\n     public void createFunctionLibrary(FunctionLibrary functionLibrary, String tenantDomain)\n-            throws FunctionLibraryManagementException {\n+            throws FunctionLibraryManagementServerException {", "originalCommit": "94f9b853adba261b9ccc0c125f62792c4a6b84ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMDYyMA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r368410620", "bodyText": "Fixed commit", "author": "Wathsara", "createdAt": "2020-01-20T08:08:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwMDUyMA=="}], "type": "inlineReview", "revised_code": {"commit": "9a526929402c0b6fb5ef8eab5d87a89fbaeee7c8", "chunk": "diff --git a/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/dao/impl/FunctionLibraryDAOImpl.java b/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/dao/impl/FunctionLibraryDAOImpl.java\nindex 217a9cbeb39..d6b6c08fa3c 100644\n--- a/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/dao/impl/FunctionLibraryDAOImpl.java\n+++ b/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/dao/impl/FunctionLibraryDAOImpl.java\n\n@@ -59,7 +58,7 @@ public class FunctionLibraryDAOImpl implements FunctionLibraryDAO {\n      * @throws FunctionLibraryManagementException\n      */\n     public void createFunctionLibrary(FunctionLibrary functionLibrary, String tenantDomain)\n-            throws FunctionLibraryManagementServerException {\n+            throws FunctionLibraryManagementException {\n \n         // get logged-in users tenant identifier.\n         int tenantID = MultitenantConstants.INVALID_TENANT_ID;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwMDcxNQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r368400715", "bodyText": "why this change is required? isn't FunctionLibraryManagementServerException a subclass of FunctionLibraryManagementException? In that case, we can keep the method interface as it is", "author": "emswbandara", "createdAt": "2020-01-20T07:34:18Z", "path": "components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/dao/impl/FunctionLibraryDAOImpl.java", "diffHunk": "@@ -105,10 +112,10 @@ public void createFunctionLibrary(FunctionLibrary functionLibrary, String tenant\n      * @param functionLibraryName Function library name\n      * @param tenantDomain        Tenant domain\n      * @return Function library\n-     * @throws FunctionLibraryManagementException\n+     * @throws FunctionLibraryManagementServerException\n      */\n     public FunctionLibrary getFunctionLibrary(String functionLibraryName, String tenantDomain)\n-            throws FunctionLibraryManagementException {\n+            throws FunctionLibraryManagementServerException {", "originalCommit": "94f9b853adba261b9ccc0c125f62792c4a6b84ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwMDkzNQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r368400935", "bodyText": "please check other places as well", "author": "emswbandara", "createdAt": "2020-01-20T07:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwMDcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMDQ3OA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r368410478", "bodyText": "Fixed commit", "author": "Wathsara", "createdAt": "2020-01-20T08:08:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwMDcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9a526929402c0b6fb5ef8eab5d87a89fbaeee7c8", "chunk": "diff --git a/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/dao/impl/FunctionLibraryDAOImpl.java b/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/dao/impl/FunctionLibraryDAOImpl.java\nindex 217a9cbeb39..d6b6c08fa3c 100644\n--- a/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/dao/impl/FunctionLibraryDAOImpl.java\n+++ b/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/dao/impl/FunctionLibraryDAOImpl.java\n\n@@ -112,10 +111,10 @@ public class FunctionLibraryDAOImpl implements FunctionLibraryDAO {\n      * @param functionLibraryName Function library name\n      * @param tenantDomain        Tenant domain\n      * @return Function library\n-     * @throws FunctionLibraryManagementServerException\n+     * @throws FunctionLibraryManagementException\n      */\n     public FunctionLibrary getFunctionLibrary(String functionLibraryName, String tenantDomain)\n-            throws FunctionLibraryManagementServerException {\n+            throws FunctionLibraryManagementException {\n \n         // get logged-in users tenant identifier.\n         int tenantID = MultitenantConstants.INVALID_TENANT_ID;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwMTI2MQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r368401261", "bodyText": "shall we inline line 38 and 39", "author": "emswbandara", "createdAt": "2020-01-20T07:36:18Z", "path": "components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryExceptionManagementUtil.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.identity.functions.library.mgt.util;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.functions.library.mgt.exception.FunctionLibraryManagementClientException;\n+import org.wso2.carbon.identity.functions.library.mgt.exception.FunctionLibraryManagementServerException;\n+\n+/**\n+ * Function library management error handling class.\n+ */\n+public class FunctionLibraryExceptionManagementUtil {\n+\n+    /**\n+     * This method can be used to generate a FunctionLibraryManagementClientException from\n+     * FunctionLibraryManagementConstants.ErrorMessage object when no exception is thrown.\n+     *\n+     * @param error FunctionLibraryManagementConstants.ErrorMessage.\n+     * @param data  data to replace if message needs to be replaced.\n+     * @return FunctionLibraryManagementClientException.\n+     */\n+    public static FunctionLibraryManagementClientException handleClientException(\n+            FunctionLibraryManagementConstants.ErrorMessage", "originalCommit": "94f9b853adba261b9ccc0c125f62792c4a6b84ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMDM5Nw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r368410397", "bodyText": "Fixed Commit", "author": "Wathsara", "createdAt": "2020-01-20T08:08:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwMTI2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9a526929402c0b6fb5ef8eab5d87a89fbaeee7c8", "chunk": "diff --git a/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryExceptionManagementUtil.java b/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryExceptionManagementUtil.java\nindex 707d2f446dc..c66cf06be79 100644\n--- a/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryExceptionManagementUtil.java\n+++ b/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryExceptionManagementUtil.java\n\n@@ -35,17 +35,14 @@ public class FunctionLibraryExceptionManagementUtil {\n      * @return FunctionLibraryManagementClientException.\n      */\n     public static FunctionLibraryManagementClientException handleClientException(\n-            FunctionLibraryManagementConstants.ErrorMessage\n-                    error, String data) {\n+            FunctionLibraryManagementConstants.ErrorMessage error, String data) {\n \n         String message = includeData(error, data);\n         return new FunctionLibraryManagementClientException(error.getCode(), message);\n     }\n \n     public static FunctionLibraryManagementClientException handleClientException(\n-            FunctionLibraryManagementConstants.ErrorMessage\n-                    error, String data,\n-            Throwable e) {\n+            FunctionLibraryManagementConstants.ErrorMessage error, String data, Throwable e) {\n \n         String message = includeData(error, data);\n         return new FunctionLibraryManagementClientException(error.getCode(), message, e);\n"}}, {"oid": "9a526929402c0b6fb5ef8eab5d87a89fbaeee7c8", "url": "https://github.com/wso2/carbon-identity-framework/commit/9a526929402c0b6fb5ef8eab5d87a89fbaeee7c8", "message": "Fixed PR comments", "committedDate": "2020-01-20T08:03:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMzQzNg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r369403436", "bodyText": "This will be bit consuming and error prone. We assume the error should have exactly one string place holder which we can't enforce. Would be better to give the responsibility to the callee to format/build and pass the exact message.", "author": "pulasthi7", "createdAt": "2020-01-22T07:29:00Z", "path": "components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryExceptionManagementUtil.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.identity.functions.library.mgt.util;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.functions.library.mgt.exception.FunctionLibraryManagementClientException;\n+import org.wso2.carbon.identity.functions.library.mgt.exception.FunctionLibraryManagementServerException;\n+\n+/**\n+ * Function library management error handling class.\n+ */\n+public class FunctionLibraryExceptionManagementUtil {\n+\n+    /**\n+     * This method can be used to generate a FunctionLibraryManagementClientException from\n+     * FunctionLibraryManagementConstants.ErrorMessage object when no exception is thrown.\n+     *\n+     * @param error FunctionLibraryManagementConstants.ErrorMessage.\n+     * @param data  data to replace if message needs to be replaced.\n+     * @return FunctionLibraryManagementClientException.\n+     */\n+    public static FunctionLibraryManagementClientException handleClientException(\n+            FunctionLibraryManagementConstants.ErrorMessage error, String data) {\n+\n+        String message = includeData(error, data);\n+        return new FunctionLibraryManagementClientException(error.getCode(), message);\n+    }\n+\n+    public static FunctionLibraryManagementClientException handleClientException(\n+            FunctionLibraryManagementConstants.ErrorMessage error, String data, Throwable e) {\n+\n+        String message = includeData(error, data);\n+        return new FunctionLibraryManagementClientException(error.getCode(), message, e);\n+    }\n+\n+    public static FunctionLibraryManagementClientException handleClientException(\n+            FunctionLibraryManagementConstants.ErrorMessage error) {\n+\n+        String message = error.getMessage();\n+        return new FunctionLibraryManagementClientException(error.getCode(), message);\n+    }\n+\n+    /**\n+     * This method can be used to generate a FunctionLibraryManagementServerException from\n+     * FunctionLibraryManagementConstants.ErrorMessage object when no exception is thrown.\n+     *\n+     * @param error FunctionLibraryManagementConstants.ErrorMessage.\n+     * @param data  data to replace if message needs to be replaced.\n+     * @return FunctionLibraryManagementServerException.\n+     */\n+    public static FunctionLibraryManagementServerException handleServerException(\n+            FunctionLibraryManagementConstants.ErrorMessage error, String data, Throwable e) {\n+\n+        String message = includeData(error, data);\n+        return new FunctionLibraryManagementServerException(error.getCode(), message, e);\n+    }\n+\n+    public static FunctionLibraryManagementServerException handleServerException(\n+            FunctionLibraryManagementConstants.ErrorMessage error) {\n+\n+        String message = error.getMessage();\n+        return new FunctionLibraryManagementServerException(error.getCode(), message);\n+    }\n+\n+    public static FunctionLibraryManagementServerException handleServerException(\n+            FunctionLibraryManagementConstants.ErrorMessage error, Throwable e) {\n+\n+        String message = error.getMessage();\n+        return new FunctionLibraryManagementServerException(error.getCode(), message, e);\n+    }\n+\n+    /**\n+     * Include the data to the error message.\n+     *\n+     * @param error FunctionLibraryManagementConstants.ErrorMessage.\n+     * @param data  data to replace if message needs to be replaced.\n+     * @return message format with data.\n+     */\n+    private static String includeData(FunctionLibraryManagementConstants.ErrorMessage error, String data) {\n+\n+        String message;\n+        if (StringUtils.isNotBlank(data)) {\n+            message = String.format(error.getMessage(), data);", "originalCommit": "9a526929402c0b6fb5ef8eab5d87a89fbaeee7c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMzgyOA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r369403828", "bodyText": "I Guess the code should start with matching HTTP code. @ayshsandu , @IsuraD Can you please comment?", "author": "pulasthi7", "createdAt": "2020-01-22T07:30:30Z", "path": "components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryManagementConstants.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.functions.library.mgt.util;\n+\n+/**\n+ * Function Library Management constant class.\n+ */\n+public class FunctionLibraryManagementConstants {\n+\n+    /**\n+     * Enum for error messages.\n+     */\n+    public enum ErrorMessage {\n+\n+        ERROR_CODE_UNEXPECTED(\"SCL-65001\", \"Unexpected Error\"),", "originalCommit": "9a526929402c0b6fb5ef8eab5d87a89fbaeee7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA2Mjc3OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r371062779", "bodyText": "This format was established for server and client errors", "author": "emswbandara", "createdAt": "2020-01-27T04:40:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMzgyOA=="}], "type": "inlineReview", "revised_code": {"commit": "8c5deb0813742b0687efcb1daedf5123e568cb42", "chunk": "diff --git a/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryManagementConstants.java b/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryManagementConstants.java\nindex e386b245e22..a200ad9d904 100644\n--- a/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryManagementConstants.java\n+++ b/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryManagementConstants.java\n\n@@ -41,9 +41,9 @@ public class FunctionLibraryManagementConstants {\n                 \"An error occurred while processing content stream of script library script: %s.\"),\n         ERROR_CODE_INVALID_TENANT(\"SCL-65004\", \"Error while creating script library due to invalid tenant.\"),\n         ERROR_CODE_RETRIEVE_SCRIPT_LIBRARY(\"SCL-65005\", \"Error while getting the script library: %s.\"),\n-        ERROR_CODE_RETRIEVE_SCRIPT_LIBRARIES(\"SCL-65006\", \"Error while reading Script libraries.\"),\n+        ERROR_CODE_RETRIEVE_SCRIPT_LIBRARIES(\"SCL-65006\", \"Error while reading script libraries.\"),\n         ERROR_CODE_UPDATE_SCRIPT_LIBRARY(\"SCL-65007\", \"Failed to update Script library: %s.\"),\n-        ERROR_CODE_DELETE_SCRIPT_LIBRARY(\"SCL-65008\", \"Error while deleting Script library: %s.\"),\n+        ERROR_CODE_DELETE_SCRIPT_LIBRARY(\"SCL-65008\", \"Error while deleting script library: %s.\"),\n         ERROR_CODE_FAILED_TO_CHECK_SCRIPT_LIBRARY(\"SCL-60002\", \"Script library with resource ID: %s does not exists.\");\n \n         private final String code;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTQ3OA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r369405478", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ERROR_CODE_DELETE_SCRIPT_LIBRARY(\"SCL-65008\", \"Error while deleting Script library: %s.\"),\n          \n          \n            \n                    ERROR_CODE_DELETE_SCRIPT_LIBRARY(\"SCL-65008\", \"Error while deleting script library: %s.\"),\n          \n      \n    \n    \n  \n\nCheck and fix other similar usages", "author": "pulasthi7", "createdAt": "2020-01-22T07:36:29Z", "path": "components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryManagementConstants.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.functions.library.mgt.util;\n+\n+/**\n+ * Function Library Management constant class.\n+ */\n+public class FunctionLibraryManagementConstants {\n+\n+    /**\n+     * Enum for error messages.\n+     */\n+    public enum ErrorMessage {\n+\n+        ERROR_CODE_UNEXPECTED(\"SCL-65001\", \"Unexpected Error\"),\n+        ERROR_CODE_DATABASE_CONNECTION(\"SCL-65001\", \"Couldn't get a database connection.\"),\n+        ERROR_CODE_VALIDATE_SCRIPT_LIBRARY_SCRIPT(\"SCL-60002\", \"Script library script of %s contains errors.\"),\n+        ERROR_CODE_REQUIRE_SCRIPT_LIBRARY_NAME(\"SCL-60003\", \"Script library name is required\"),\n+        ERROR_CODE_REQUIRE_SCRIPT_LIBRARY_SCRIPT(\"SCL-60003\", \"Script library script is required\"),\n+        ERROR_CODE_ALL_READY_EXIST_SCRIPT_LIBRARY(\"SCL-65004\", \"Already a script library available with the name: %s.\"),\n+        ERROR_CODE_INVALID_SCRIPT_LIBRARY_NAME(\"SCL-65004\", \"The script library name is not valid! It is not adhering\" +\n+                \" to the regex %s.\"),\n+        ERROR_CODE_ADD_SCRIPT_LIBRARY(\"SCL-65002\", \"Error while creating the script library: %s.\"),\n+        ERROR_CODE_PROCESSING_CONTENT_STREAM_SCRIPT_LIBRARY(\"SCL-65003\",\n+                \"An error occurred while processing content stream of script library script: %s.\"),\n+        ERROR_CODE_INVALID_TENANT(\"SCL-65004\", \"Error while creating script library due to invalid tenant.\"),\n+        ERROR_CODE_RETRIEVE_SCRIPT_LIBRARY(\"SCL-65005\", \"Error while getting the script library: %s.\"),\n+        ERROR_CODE_RETRIEVE_SCRIPT_LIBRARIES(\"SCL-65006\", \"Error while reading Script libraries.\"),\n+        ERROR_CODE_UPDATE_SCRIPT_LIBRARY(\"SCL-65007\", \"Failed to update Script library: %s.\"),\n+        ERROR_CODE_DELETE_SCRIPT_LIBRARY(\"SCL-65008\", \"Error while deleting Script library: %s.\"),", "originalCommit": "9a526929402c0b6fb5ef8eab5d87a89fbaeee7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3NDc2OA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r370474768", "bodyText": "Fixed commit", "author": "Wathsara", "createdAt": "2020-01-24T05:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "8c5deb0813742b0687efcb1daedf5123e568cb42", "chunk": "diff --git a/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryManagementConstants.java b/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryManagementConstants.java\nindex e386b245e22..a200ad9d904 100644\n--- a/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryManagementConstants.java\n+++ b/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryManagementConstants.java\n\n@@ -41,9 +41,9 @@ public class FunctionLibraryManagementConstants {\n                 \"An error occurred while processing content stream of script library script: %s.\"),\n         ERROR_CODE_INVALID_TENANT(\"SCL-65004\", \"Error while creating script library due to invalid tenant.\"),\n         ERROR_CODE_RETRIEVE_SCRIPT_LIBRARY(\"SCL-65005\", \"Error while getting the script library: %s.\"),\n-        ERROR_CODE_RETRIEVE_SCRIPT_LIBRARIES(\"SCL-65006\", \"Error while reading Script libraries.\"),\n+        ERROR_CODE_RETRIEVE_SCRIPT_LIBRARIES(\"SCL-65006\", \"Error while reading script libraries.\"),\n         ERROR_CODE_UPDATE_SCRIPT_LIBRARY(\"SCL-65007\", \"Failed to update Script library: %s.\"),\n-        ERROR_CODE_DELETE_SCRIPT_LIBRARY(\"SCL-65008\", \"Error while deleting Script library: %s.\"),\n+        ERROR_CODE_DELETE_SCRIPT_LIBRARY(\"SCL-65008\", \"Error while deleting script library: %s.\"),\n         ERROR_CODE_FAILED_TO_CHECK_SCRIPT_LIBRARY(\"SCL-60002\", \"Script library with resource ID: %s does not exists.\");\n \n         private final String code;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjAzNw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r369406037", "bodyText": "add a fail() before the catch, if we expect delete call to throw an exception", "author": "pulasthi7", "createdAt": "2020-01-22T07:38:39Z", "path": "components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/test/java/org/wso2/carbon/identity/functions/library/mgt/FunctionLibraryManagementServiceTest.java", "diffHunk": "@@ -123,28 +123,28 @@ public void createFunctionLibrary(Object functionLibrary, String tenantDomain) {\n \n             assertEquals(functionLibraryManagementService.getFunctionLibrary(\n                     ((FunctionLibrary) functionLibrary).getFunctionLibraryName(), tenantDomain)\n-                                                         .getFunctionLibraryName(),\n+                            .getFunctionLibraryName(),\n                     ((FunctionLibrary) functionLibrary).getFunctionLibraryName());\n \n             // Clean after test\n             functionLibraryManagementService.deleteFunctionLibrary(\n                     ((FunctionLibrary) functionLibrary).getFunctionLibraryName(), tenantDomain);\n         } catch (FunctionLibraryManagementException e) {", "originalCommit": "9a526929402c0b6fb5ef8eab5d87a89fbaeee7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3NDc0Nw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r370474747", "bodyText": "Fixed commit", "author": "Wathsara", "createdAt": "2020-01-24T05:02:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjAzNw=="}], "type": "inlineReview", "revised_code": {"commit": "8c5deb0813742b0687efcb1daedf5123e568cb42", "chunk": "diff --git a/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/test/java/org/wso2/carbon/identity/functions/library/mgt/FunctionLibraryManagementServiceTest.java b/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/test/java/org/wso2/carbon/identity/functions/library/mgt/FunctionLibraryManagementServiceTest.java\nindex b5e772047b9..abef076c528 100644\n--- a/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/test/java/org/wso2/carbon/identity/functions/library/mgt/FunctionLibraryManagementServiceTest.java\n+++ b/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/test/java/org/wso2/carbon/identity/functions/library/mgt/FunctionLibraryManagementServiceTest.java\n\n@@ -107,48 +106,21 @@ public class FunctionLibraryManagementServiceTest extends PowerMockIdentityBaseT\n         try {\n \n             PowerMockito.whenNew(FunctionLibraryDAOImpl.class).withNoArguments().thenReturn(functionLibraryDAO);\n-            if (((FunctionLibrary) functionLibrary).getFunctionLibraryName() == \"sample4\") {\n-                when(functionLibraryDAO.isFunctionLibraryExists(\"sample4\", tenantDomain)).\n-                        thenReturn(true);\n-            } else {\n-                when(functionLibraryDAO.isFunctionLibraryExists(\n-                        ((FunctionLibrary) functionLibrary).getFunctionLibraryName(), tenantDomain)).thenReturn(false);\n-            }\n             when(functionLibraryDAO.getFunctionLibrary(((FunctionLibrary) functionLibrary).getFunctionLibraryName(),\n                     tenantDomain)).thenReturn((FunctionLibrary) functionLibrary);\n             FunctionLibraryManagementService functionLibraryManagementService =\n                     FunctionLibraryManagementServiceImpl.getInstance();\n-\n             functionLibraryManagementService.createFunctionLibrary((FunctionLibrary) functionLibrary, tenantDomain);\n \n             assertEquals(functionLibraryManagementService.getFunctionLibrary(\n                     ((FunctionLibrary) functionLibrary).getFunctionLibraryName(), tenantDomain)\n-                            .getFunctionLibraryName(),\n-                    ((FunctionLibrary) functionLibrary).getFunctionLibraryName());\n+                    .getFunctionLibraryName(), ((FunctionLibrary) functionLibrary).getFunctionLibraryName());\n \n             // Clean after test\n             functionLibraryManagementService.deleteFunctionLibrary(\n                     ((FunctionLibrary) functionLibrary).getFunctionLibraryName(), tenantDomain);\n-        } catch (FunctionLibraryManagementException e) {\n-            if (((FunctionLibrary) functionLibrary).getFunctionLibraryName() == null) {\n-                assertEquals(e.getMessage(), \"script Library Name is required\");\n-            } else if (!isRegexValidated(((FunctionLibrary) functionLibrary).getFunctionLibraryName())) {\n-                assertEquals(e.getMessage(), \"The script library name is not valid! It is not adhering to the regex \" +\n-                        FunctionLibraryMgtUtil.FUNCTION_LIBRARY_NAME_VALIDATING_REGEX + \".\");\n-            } else {\n-                try {\n-                    if (functionLibraryDAO.isFunctionLibraryExists(\n-                            ((FunctionLibrary) functionLibrary).getFunctionLibraryName(), tenantDomain)) {\n-                        assertEquals(e.getMessage(),\n-                                \"Already a script library available with the name: \" +\n-                                        ((FunctionLibrary) functionLibrary).getFunctionLibraryName() + \".\");\n-                    }\n-                } catch (FunctionLibraryManagementException e1) {\n-                    log.error(\"Script Library Management Exception\");\n-                }\n-            }\n         } catch (Exception e) {\n-            log.error(\"Exception\");\n+            log.error(\"Error test Create script library \" + e);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjIxOA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r369406218", "bodyText": "Better to split these to multiple tests for clarity", "author": "pulasthi7", "createdAt": "2020-01-22T07:39:18Z", "path": "components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/test/java/org/wso2/carbon/identity/functions/library/mgt/FunctionLibraryManagementServiceTest.java", "diffHunk": "@@ -123,28 +123,28 @@ public void createFunctionLibrary(Object functionLibrary, String tenantDomain) {\n \n             assertEquals(functionLibraryManagementService.getFunctionLibrary(\n                     ((FunctionLibrary) functionLibrary).getFunctionLibraryName(), tenantDomain)\n-                                                         .getFunctionLibraryName(),\n+                            .getFunctionLibraryName(),\n                     ((FunctionLibrary) functionLibrary).getFunctionLibraryName());\n \n             // Clean after test\n             functionLibraryManagementService.deleteFunctionLibrary(\n                     ((FunctionLibrary) functionLibrary).getFunctionLibraryName(), tenantDomain);\n         } catch (FunctionLibraryManagementException e) {\n             if (((FunctionLibrary) functionLibrary).getFunctionLibraryName() == null) {\n-                assertEquals(e.getMessage(), \"Function Library Name is required\");\n+                assertEquals(e.getMessage(), \"script Library Name is required\");\n             } else if (!isRegexValidated(((FunctionLibrary) functionLibrary).getFunctionLibraryName())) {\n-                assertEquals(e.getMessage(), \"The function library name \" + ((FunctionLibrary) functionLibrary).\n-                        getFunctionLibraryName() + \" is not valid! It is not adhering \" +\n-                        \"to the regex \" + FunctionLibraryMgtUtil.FUNCTION_LIBRARY_NAME_VALIDATING_REGEX + \".\");\n+                assertEquals(e.getMessage(), \"The script library name is not valid! It is not adhering to the regex \" +", "originalCommit": "9a526929402c0b6fb5ef8eab5d87a89fbaeee7c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c5deb0813742b0687efcb1daedf5123e568cb42", "chunk": "diff --git a/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/test/java/org/wso2/carbon/identity/functions/library/mgt/FunctionLibraryManagementServiceTest.java b/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/test/java/org/wso2/carbon/identity/functions/library/mgt/FunctionLibraryManagementServiceTest.java\nindex b5e772047b9..abef076c528 100644\n--- a/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/test/java/org/wso2/carbon/identity/functions/library/mgt/FunctionLibraryManagementServiceTest.java\n+++ b/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/test/java/org/wso2/carbon/identity/functions/library/mgt/FunctionLibraryManagementServiceTest.java\n\n@@ -107,48 +106,21 @@ public class FunctionLibraryManagementServiceTest extends PowerMockIdentityBaseT\n         try {\n \n             PowerMockito.whenNew(FunctionLibraryDAOImpl.class).withNoArguments().thenReturn(functionLibraryDAO);\n-            if (((FunctionLibrary) functionLibrary).getFunctionLibraryName() == \"sample4\") {\n-                when(functionLibraryDAO.isFunctionLibraryExists(\"sample4\", tenantDomain)).\n-                        thenReturn(true);\n-            } else {\n-                when(functionLibraryDAO.isFunctionLibraryExists(\n-                        ((FunctionLibrary) functionLibrary).getFunctionLibraryName(), tenantDomain)).thenReturn(false);\n-            }\n             when(functionLibraryDAO.getFunctionLibrary(((FunctionLibrary) functionLibrary).getFunctionLibraryName(),\n                     tenantDomain)).thenReturn((FunctionLibrary) functionLibrary);\n             FunctionLibraryManagementService functionLibraryManagementService =\n                     FunctionLibraryManagementServiceImpl.getInstance();\n-\n             functionLibraryManagementService.createFunctionLibrary((FunctionLibrary) functionLibrary, tenantDomain);\n \n             assertEquals(functionLibraryManagementService.getFunctionLibrary(\n                     ((FunctionLibrary) functionLibrary).getFunctionLibraryName(), tenantDomain)\n-                            .getFunctionLibraryName(),\n-                    ((FunctionLibrary) functionLibrary).getFunctionLibraryName());\n+                    .getFunctionLibraryName(), ((FunctionLibrary) functionLibrary).getFunctionLibraryName());\n \n             // Clean after test\n             functionLibraryManagementService.deleteFunctionLibrary(\n                     ((FunctionLibrary) functionLibrary).getFunctionLibraryName(), tenantDomain);\n-        } catch (FunctionLibraryManagementException e) {\n-            if (((FunctionLibrary) functionLibrary).getFunctionLibraryName() == null) {\n-                assertEquals(e.getMessage(), \"script Library Name is required\");\n-            } else if (!isRegexValidated(((FunctionLibrary) functionLibrary).getFunctionLibraryName())) {\n-                assertEquals(e.getMessage(), \"The script library name is not valid! It is not adhering to the regex \" +\n-                        FunctionLibraryMgtUtil.FUNCTION_LIBRARY_NAME_VALIDATING_REGEX + \".\");\n-            } else {\n-                try {\n-                    if (functionLibraryDAO.isFunctionLibraryExists(\n-                            ((FunctionLibrary) functionLibrary).getFunctionLibraryName(), tenantDomain)) {\n-                        assertEquals(e.getMessage(),\n-                                \"Already a script library available with the name: \" +\n-                                        ((FunctionLibrary) functionLibrary).getFunctionLibraryName() + \".\");\n-                    }\n-                } catch (FunctionLibraryManagementException e1) {\n-                    log.error(\"Script Library Management Exception\");\n-                }\n-            }\n         } catch (Exception e) {\n-            log.error(\"Exception\");\n+            log.error(\"Error test Create script library \" + e);\n         }\n     }\n \n"}}, {"oid": "8c5deb0813742b0687efcb1daedf5123e568cb42", "url": "https://github.com/wso2/carbon-identity-framework/commit/8c5deb0813742b0687efcb1daedf5123e568cb42", "message": "Fixed PR comments", "committedDate": "2020-01-24T05:00:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA2MjI5Nw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r371062297", "bodyText": "Typo.. change ALL_READY to ALREADY", "author": "emswbandara", "createdAt": "2020-01-27T04:36:44Z", "path": "components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryManagementConstants.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.functions.library.mgt.util;\n+\n+/**\n+ * Function Library Management constant class.\n+ */\n+public class FunctionLibraryManagementConstants {\n+\n+    /**\n+     * Enum for error messages.\n+     */\n+    public enum ErrorMessage {\n+\n+        ERROR_CODE_UNEXPECTED(\"SCL-65001\", \"Unexpected Error\"),\n+        ERROR_CODE_DATABASE_CONNECTION(\"SCL-65001\", \"Couldn't get a database connection.\"),\n+        ERROR_CODE_VALIDATE_SCRIPT_LIBRARY_SCRIPT(\"SCL-60002\", \"Script library script of %s contains errors.\"),\n+        ERROR_CODE_REQUIRE_SCRIPT_LIBRARY_NAME(\"SCL-60003\", \"Script library name is required\"),\n+        ERROR_CODE_REQUIRE_SCRIPT_LIBRARY_SCRIPT(\"SCL-60003\", \"Script library script is required\"),\n+        ERROR_CODE_ALL_READY_EXIST_SCRIPT_LIBRARY(\"SCL-65004\", \"Already a script library available with the name: %s.\"),", "originalCommit": "8c5deb0813742b0687efcb1daedf5123e568cb42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA2NDEzMg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2679#discussion_r371064132", "bodyText": "Fixed commit", "author": "Wathsara", "createdAt": "2020-01-27T04:53:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA2MjI5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3d6fa4d553b0d78ca83f8d85f66d01572a985143", "chunk": "diff --git a/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryManagementConstants.java b/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryManagementConstants.java\nindex a200ad9d904..f084f5a5c14 100644\n--- a/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryManagementConstants.java\n+++ b/components/functions-library-mgt/org.wso2.carbon.identity.functions.library.mgt/src/main/java/org/wso2/carbon/identity/functions/library/mgt/util/FunctionLibraryManagementConstants.java\n\n@@ -33,7 +33,7 @@ public class FunctionLibraryManagementConstants {\n         ERROR_CODE_VALIDATE_SCRIPT_LIBRARY_SCRIPT(\"SCL-60002\", \"Script library script of %s contains errors.\"),\n         ERROR_CODE_REQUIRE_SCRIPT_LIBRARY_NAME(\"SCL-60003\", \"Script library name is required\"),\n         ERROR_CODE_REQUIRE_SCRIPT_LIBRARY_SCRIPT(\"SCL-60003\", \"Script library script is required\"),\n-        ERROR_CODE_ALL_READY_EXIST_SCRIPT_LIBRARY(\"SCL-65004\", \"Already a script library available with the name: %s.\"),\n+        ERROR_CODE_ALREADY_EXIST_SCRIPT_LIBRARY(\"SCL-65004\", \"Already a script library available with the name: %s.\"),\n         ERROR_CODE_INVALID_SCRIPT_LIBRARY_NAME(\"SCL-65004\", \"The script library name is not valid! It is not adhering\" +\n                 \" to the regex %s.\"),\n         ERROR_CODE_ADD_SCRIPT_LIBRARY(\"SCL-65002\", \"Error while creating the script library: %s.\"),\n"}}, {"oid": "3d6fa4d553b0d78ca83f8d85f66d01572a985143", "url": "https://github.com/wso2/carbon-identity-framework/commit/3d6fa4d553b0d78ca83f8d85f66d01572a985143", "message": "Fixed a typo error", "committedDate": "2020-01-27T04:52:16Z", "type": "commit"}]}