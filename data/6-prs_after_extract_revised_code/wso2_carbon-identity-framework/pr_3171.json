{"pr_number": 3171, "pr_title": " Support for password recovery using claims other than the username", "pr_createdAt": "2020-10-16T05:05:15Z", "pr_url": "https://github.com/wso2/carbon-identity-framework/pull/3171", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU5MTU5NQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3171#discussion_r511591595", "bodyText": "Shall we make this comment formatted like the other comments. Like having full stops at the EOL, having exception explanation comment. WDYT?", "author": "ShanChathusanda93", "createdAt": "2020-10-25T12:37:44Z", "path": "components/identity-mgt/org.wso2.carbon.identity.mgt.endpoint.util/src/main/java/org/wso2/carbon/identity/mgt/endpoint/util/IdentityManagementEndpointUtil.java", "diffHunk": "@@ -692,4 +692,24 @@ public static String getBasePath(String tenantDomain, String context, boolean is\n         }\n         return basePath;\n     }\n+\n+    /**\n+     * Get a query parameter value from a URL.\n+     *\n+     * @param url               URL\n+     * @param queryParameter    Required query parameter name\n+     * @return Query parameter value\n+     * @throws URISyntaxException", "originalCommit": "f54a2f2e48e7aee4472ae9728795a0b53b6a785b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU5Mzk0Nw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3171#discussion_r511593947", "bodyText": "Addressed in 09b5778", "author": "DinikaSen", "createdAt": "2020-10-25T12:57:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU5MTU5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "74a3018e3095c1791eed5a24fd32802c4fd4b730", "chunk": "diff --git a/components/identity-mgt/org.wso2.carbon.identity.mgt.endpoint.util/src/main/java/org/wso2/carbon/identity/mgt/endpoint/util/IdentityManagementEndpointUtil.java b/components/identity-mgt/org.wso2.carbon.identity.mgt.endpoint.util/src/main/java/org/wso2/carbon/identity/mgt/endpoint/util/IdentityManagementEndpointUtil.java\nindex 2035640790e..9c472379867 100644\n--- a/components/identity-mgt/org.wso2.carbon.identity.mgt.endpoint.util/src/main/java/org/wso2/carbon/identity/mgt/endpoint/util/IdentityManagementEndpointUtil.java\n+++ b/components/identity-mgt/org.wso2.carbon.identity.mgt.endpoint.util/src/main/java/org/wso2/carbon/identity/mgt/endpoint/util/IdentityManagementEndpointUtil.java\n\n@@ -693,6 +716,72 @@ public class IdentityManagementEndpointUtil {\n         return basePath;\n     }\n \n+    /**\n+     * Get status of the availability of secured (with secure vault) properties\n+     *\n+     * @return availability of secured properties\n+     */\n+    private static boolean isSecuredPropertyAvailable(Properties properties) {\n+\n+        Enumeration propertyNames = properties.propertyNames();\n+\n+        while (propertyNames.hasMoreElements()) {\n+            String key = (String) propertyNames.nextElement();\n+            if (PROTECTED_TOKENS.equals(key) && StringUtils.isNotBlank(properties.getProperty(key))) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * There can be sensitive information like passwords in configuration file. If they are encrypted using secure\n+     * vault, this method will resolve them and replace with original values.\n+     */\n+    private static void resolveSecrets(Properties properties) {\n+\n+        String secretProvider = (String) properties.get(SECRET_PROVIDER);\n+        if (StringUtils.isBlank(secretProvider)) {\n+            properties.put(SECRET_PROVIDER, DEFAULT_CALLBACK_HANDLER);\n+        }\n+        SecretResolver secretResolver = SecretResolverFactory.create(properties);\n+        if (secretResolver != null && secretResolver.isInitialized()) {\n+            for (Map.Entry<Object, Object> entry : properties.entrySet()) {\n+                String key = entry.getKey().toString();\n+                String value = entry.getValue().toString();\n+                if (value != null) {\n+                    value = MiscellaneousUtil.resolve(value, secretResolver);\n+                }\n+                properties.put(key, value);\n+            }\n+        }\n+        // Support the protectedToken alias used for encryption. ProtectedToken alias is deprecated.\n+        if (isSecuredPropertyAvailable(properties)) {\n+            SecretResolver resolver = SecretResolverFactory.create(properties, \"\");\n+            String protectedTokens = (String) properties.get(PROTECTED_TOKENS);\n+            StringTokenizer st = new StringTokenizer(protectedTokens, \",\");\n+            while (st.hasMoreElements()) {\n+                String element = st.nextElement().toString().trim();\n+\n+                if (resolver.isTokenProtected(element)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Resolving and replacing secret for \" + element);\n+                    }\n+                    // Replaces the original encrypted property with resolved property\n+                    properties.put(element, resolver.resolve(element));\n+                } else {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"No encryption done for value with key :\" + element);\n+                    }\n+                }\n+            }\n+        } else {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Secure vault encryption ignored since no protected tokens available.\");\n+            }\n+        }\n+    }\n+\n     /**\n      * Get a query parameter value from a URL.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU5MTcxOA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3171#discussion_r511591718", "bodyText": "Shall we start the comment with an uppercase letter. WDYT? Check the other places as well.", "author": "ShanChathusanda93", "createdAt": "2020-10-25T12:38:46Z", "path": "components/identity-mgt/org.wso2.carbon.identity.mgt.endpoint.util/src/main/java/org/wso2/carbon/identity/mgt/endpoint/util/client/api/PasswordRecoveryApiV1.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.mgt.endpoint.util.client.api;\n+\n+import com.sun.jersey.api.client.GenericType;\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.MultitenantConstants;\n+import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants;\n+import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointUtil;\n+import org.wso2.carbon.identity.mgt.endpoint.util.client.ApiClient;\n+import org.wso2.carbon.identity.mgt.endpoint.util.client.ApiException;\n+import org.wso2.carbon.identity.mgt.endpoint.util.client.Configuration;\n+import org.wso2.carbon.identity.mgt.endpoint.util.client.Pair;\n+import org.wso2.carbon.identity.mgt.endpoint.util.client.model.passwordrecovery.v1.AccountRecoveryType;\n+import org.wso2.carbon.identity.mgt.endpoint.util.client.model.passwordrecovery.v1.RecoveryInitRequest;\n+import org.wso2.carbon.identity.mgt.endpoint.util.client.model.passwordrecovery.v1.RecoveryRequest;\n+import org.wso2.carbon.identity.mgt.endpoint.util.client.model.passwordrecovery.v1.RecoveryResponse;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * API related to password recovery with user preferred channel.\n+ */\n+public class PasswordRecoveryApiV1 {\n+\n+    String basePath = IdentityManagementEndpointUtil.buildEndpointUrl(IdentityManagementEndpointConstants\n+            .UserInfoRecovery.RECOVERY_API_V1_RELATIVE_PATH);\n+    private ApiClient apiClient;\n+\n+    public PasswordRecoveryApiV1() {\n+\n+        this(Configuration.getDefaultApiClient());\n+    }\n+\n+    public PasswordRecoveryApiV1(ApiClient apiClient) {\n+\n+        this.apiClient = apiClient;\n+    }\n+\n+    public ApiClient getApiClient() {\n+\n+        return apiClient;\n+    }\n+\n+    public void setApiClient(ApiClient apiClient) {\n+\n+        this.apiClient = apiClient;\n+    }\n+\n+    /**\n+     * This API can be used to initiate recovering forgotten password.\n+     *\n+     * @param recoveryInitRequest Password recovery initiating request. (required)\n+     * @param tenantDomain        Tenant Domain which user belongs. Default &#x60;carbon.super&#x60; (optional)\n+     * @param headers             If reCaptcha respond is found, embedded in request header. (optional)\n+     * @return Account recovery options response object.\n+     * @throws ApiException if fails to make API call.\n+     */\n+    public List<AccountRecoveryType> initiatePasswordRecovery(RecoveryInitRequest recoveryInitRequest, String tenantDomain,\n+                                                              Map<String, String> headers) throws ApiException {\n+\n+        String localVarPath = \"/password/init\".replaceAll(\"\\\\{format\\\\}\", \"json\");\n+        return initiateRecovery(recoveryInitRequest, tenantDomain, null, localVarPath);\n+    }\n+\n+    /**\n+     * This API is used to recover password via selected recovery option.\n+     *\n+     * @param recoveryRequest   Recovery request. (required)\n+     * @param tenantDomain      Tenant Domain which user belongs. Default &#x60;carbon.super&#x60; (optional)\n+     * @param headers           Any additional headers to be embedded. (optional)\n+     * @return Recovery response.\n+     * @throws ApiException if fails to make API call.\n+     */\n+    public RecoveryResponse recoverPassword(RecoveryRequest recoveryRequest, String tenantDomain,\n+                                            Map<String, String> headers) throws ApiException {\n+\n+        String localVarPath = \"/password/recover\".replaceAll(\"\\\\{format\\\\}\", \"json\");\n+        return recover(recoveryRequest, tenantDomain, headers, localVarPath);\n+    }\n+\n+    /**\n+     * This API can be used to initiate recovering forgotten password/username.\n+     *\n+     * @param recoveryInitRequest Recovery initiating request. (required)\n+     * @param tenantDomain        Tenant Domain which user belongs. Default &#x60;carbon.super&#x60; (optional)\n+     * @param headers             If reCaptcha respond is found, embedded in request header. (optional)\n+     * @param localVarPath        Endpoint path.\n+     * @return Account recovery options response object.\n+     * @throws ApiException if fails to make API call.", "originalCommit": "f54a2f2e48e7aee4472ae9728795a0b53b6a785b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU5Mzk0MA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3171#discussion_r511593940", "bodyText": "Addressed in 09b5778", "author": "DinikaSen", "createdAt": "2020-10-25T12:57:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU5MTcxOA=="}], "type": "inlineReview", "revised_code": {"commit": "74a3018e3095c1791eed5a24fd32802c4fd4b730", "chunk": "diff --git a/components/identity-mgt/org.wso2.carbon.identity.mgt.endpoint.util/src/main/java/org/wso2/carbon/identity/mgt/endpoint/util/client/api/PasswordRecoveryApiV1.java b/components/identity-mgt/org.wso2.carbon.identity.mgt.endpoint.util/src/main/java/org/wso2/carbon/identity/mgt/endpoint/util/client/api/PasswordRecoveryApiV1.java\nindex b5bad56502a..e6cfbb15edf 100644\n--- a/components/identity-mgt/org.wso2.carbon.identity.mgt.endpoint.util/src/main/java/org/wso2/carbon/identity/mgt/endpoint/util/client/api/PasswordRecoveryApiV1.java\n+++ b/components/identity-mgt/org.wso2.carbon.identity.mgt.endpoint.util/src/main/java/org/wso2/carbon/identity/mgt/endpoint/util/client/api/PasswordRecoveryApiV1.java\n\n@@ -29,18 +29,21 @@ import org.wso2.carbon.identity.mgt.endpoint.util.client.ApiException;\n import org.wso2.carbon.identity.mgt.endpoint.util.client.Configuration;\n import org.wso2.carbon.identity.mgt.endpoint.util.client.Pair;\n import org.wso2.carbon.identity.mgt.endpoint.util.client.model.passwordrecovery.v1.AccountRecoveryType;\n+import org.wso2.carbon.identity.mgt.endpoint.util.client.model.passwordrecovery.v1.ConfirmRequest;\n+import org.wso2.carbon.identity.mgt.endpoint.util.client.model.passwordrecovery.v1.PasswordResetResponse;\n import org.wso2.carbon.identity.mgt.endpoint.util.client.model.passwordrecovery.v1.RecoveryInitRequest;\n import org.wso2.carbon.identity.mgt.endpoint.util.client.model.passwordrecovery.v1.RecoveryRequest;\n import org.wso2.carbon.identity.mgt.endpoint.util.client.model.passwordrecovery.v1.RecoveryResponse;\n+import org.wso2.carbon.identity.mgt.endpoint.util.client.model.passwordrecovery.v1.ResendConfirmationCodeResponse;\n+import org.wso2.carbon.identity.mgt.endpoint.util.client.model.passwordrecovery.v1.ResendConfirmationRequest;\n+import org.wso2.carbon.identity.mgt.endpoint.util.client.model.passwordrecovery.v1.ResetCodeResponse;\n+import org.wso2.carbon.identity.mgt.endpoint.util.client.model.passwordrecovery.v1.ResetRequest;\n \n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n-/**\n- * API related to password recovery with user preferred channel.\n- */\n public class PasswordRecoveryApiV1 {\n \n     String basePath = IdentityManagementEndpointUtil.buildEndpointUrl(IdentityManagementEndpointConstants\n"}}, {"oid": "74a3018e3095c1791eed5a24fd32802c4fd4b730", "url": "https://github.com/wso2/carbon-identity-framework/commit/74a3018e3095c1791eed5a24fd32802c4fd4b730", "message": "Add notification based password recovery API support to recovery endpoint", "committedDate": "2020-10-29T06:08:49Z", "type": "commit"}, {"oid": "b48d8c76a201f582bfeb2f942efdf7975857c6ac", "url": "https://github.com/wso2/carbon-identity-framework/commit/b48d8c76a201f582bfeb2f942efdf7975857c6ac", "message": "Remove unwanted fie and method", "committedDate": "2020-10-29T06:08:49Z", "type": "commit"}, {"oid": "b65a4e7615f2390cf018fca16b5f90e0d60dce06", "url": "https://github.com/wso2/carbon-identity-framework/commit/b65a4e7615f2390cf018fca16b5f90e0d60dce06", "message": "Format comments", "committedDate": "2020-10-29T06:08:49Z", "type": "commit"}, {"oid": "03a50caec46f132c3d29cd3ec8ccc0739cb384cd", "url": "https://github.com/wso2/carbon-identity-framework/commit/03a50caec46f132c3d29cd3ec8ccc0739cb384cd", "message": "Remove unwanted API client codes related to resend", "committedDate": "2020-10-29T06:08:49Z", "type": "commit"}, {"oid": "746f30810a9a73f36c0d3b1e93d4278591eb0cdb", "url": "https://github.com/wso2/carbon-identity-framework/commit/746f30810a9a73f36c0d3b1e93d4278591eb0cdb", "message": "Format method comments.", "committedDate": "2020-10-29T06:08:49Z", "type": "commit"}, {"oid": "746f30810a9a73f36c0d3b1e93d4278591eb0cdb", "url": "https://github.com/wso2/carbon-identity-framework/commit/746f30810a9a73f36c0d3b1e93d4278591eb0cdb", "message": "Format method comments.", "committedDate": "2020-10-29T06:08:49Z", "type": "forcePushed"}]}