{"pr_number": 3021, "pr_title": "Improvements and fixes to the Role management service", "pr_createdAt": "2020-07-17T07:54:45Z", "pr_url": "https://github.com/wso2/carbon-identity-framework/pull/3021", "timeline": [{"oid": "bcdc2396857d181baa8a40b3a26ac003a2d29774", "url": "https://github.com/wso2/carbon-identity-framework/commit/bcdc2396857d181baa8a40b3a26ac003a2d29774", "message": "Improvements and fixes to the Role management service", "committedDate": "2020-07-17T08:39:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxODIzNw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456318237", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.error(\"An error occurred while rolling back transactions. \", e1);\n          \n          \n            \n                        log.error(\"An error occurred while rolling back transactions.\", e1);", "author": "mefarazath", "createdAt": "2020-07-17T09:06:36Z", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java", "diffHunk": "@@ -69,4 +75,69 @@ private void initDatasource() {\n             log.error(\"Error while retrieving user management data source\", e);\n         }\n     }\n+\n+    /**\n+     * Returns an database connection for UM data source.\n+     *\n+     * @param shouldApplyTransaction apply transaction or not\n+     * @return Database connection.\n+     * @throws IdentityRuntimeException Exception occurred when getting the data source.\n+     */\n+    public Connection getDBConnection(boolean shouldApplyTransaction) throws IdentityRuntimeException {\n+\n+        try {\n+            Connection dbConnection = dataSource.getConnection();\n+            if (shouldApplyTransaction) {\n+                dbConnection.setAutoCommit(false);\n+                try {\n+                    dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n+                } catch (SQLException e) {\n+                    // Handling startup error for postgresql Ref: https://github.com/wso2/product-is/issues/3545\n+                    // Active SQL Transaction means that connection is not committed.\n+                    // Need to commit before setting isolation property.\n+                    if (dbConnection.getMetaData().getDriverName().contains(POSTGRESQL_DATABASE)\n+                            && PG_ACTIVE_SQL_TRANSACTION_STATE.equals(e.getSQLState())) {\n+                        dbConnection.commit();\n+                        dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n+                    }\n+                }\n+            }\n+            return dbConnection;\n+        } catch (SQLException e) {\n+            String errMsg = \"Error when getting a database connection object from the UM data source.\";\n+            throw IdentityRuntimeException.error(errMsg, e);\n+        }\n+    }\n+\n+    /**\n+     * Revoke the transaction when catch then sql transaction errors.\n+     *\n+     * @param dbConnection database connection.\n+     */\n+    public void rollbackTransaction(Connection dbConnection) {\n+\n+        try {\n+            if (dbConnection != null) {\n+                dbConnection.rollback();\n+            }\n+        } catch (SQLException e1) {\n+            log.error(\"An error occurred while rolling back transactions. \", e1);", "originalCommit": "bcdc2396857d181baa8a40b3a26ac003a2d29774", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyNDMxNw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456324317", "bodyText": "Fixed and updated the PR.", "author": "ashensw", "createdAt": "2020-07-17T09:18:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxODIzNw=="}], "type": "inlineReview", "revised_code": {"commit": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d", "chunk": "diff --git a/components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java b/components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java\nindex 1b0b1d76aeb..51ec65215b3 100644\n--- a/components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java\n+++ b/components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java\n\n@@ -121,7 +121,7 @@ public class UmPersistenceManager {\n                 dbConnection.rollback();\n             }\n         } catch (SQLException e1) {\n-            log.error(\"An error occurred while rolling back transactions. \", e1);\n+            log.error(\"An error occurred while rolling back transactions.\", e1);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxODI5Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456318292", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.error(\"An error occurred while commit transactions. \", e1);\n          \n          \n            \n                        log.error(\"An error occurred while commit transactions.\", e1);", "author": "mefarazath", "createdAt": "2020-07-17T09:06:43Z", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java", "diffHunk": "@@ -69,4 +75,69 @@ private void initDatasource() {\n             log.error(\"Error while retrieving user management data source\", e);\n         }\n     }\n+\n+    /**\n+     * Returns an database connection for UM data source.\n+     *\n+     * @param shouldApplyTransaction apply transaction or not\n+     * @return Database connection.\n+     * @throws IdentityRuntimeException Exception occurred when getting the data source.\n+     */\n+    public Connection getDBConnection(boolean shouldApplyTransaction) throws IdentityRuntimeException {\n+\n+        try {\n+            Connection dbConnection = dataSource.getConnection();\n+            if (shouldApplyTransaction) {\n+                dbConnection.setAutoCommit(false);\n+                try {\n+                    dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n+                } catch (SQLException e) {\n+                    // Handling startup error for postgresql Ref: https://github.com/wso2/product-is/issues/3545\n+                    // Active SQL Transaction means that connection is not committed.\n+                    // Need to commit before setting isolation property.\n+                    if (dbConnection.getMetaData().getDriverName().contains(POSTGRESQL_DATABASE)\n+                            && PG_ACTIVE_SQL_TRANSACTION_STATE.equals(e.getSQLState())) {\n+                        dbConnection.commit();\n+                        dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n+                    }\n+                }\n+            }\n+            return dbConnection;\n+        } catch (SQLException e) {\n+            String errMsg = \"Error when getting a database connection object from the UM data source.\";\n+            throw IdentityRuntimeException.error(errMsg, e);\n+        }\n+    }\n+\n+    /**\n+     * Revoke the transaction when catch then sql transaction errors.\n+     *\n+     * @param dbConnection database connection.\n+     */\n+    public void rollbackTransaction(Connection dbConnection) {\n+\n+        try {\n+            if (dbConnection != null) {\n+                dbConnection.rollback();\n+            }\n+        } catch (SQLException e1) {\n+            log.error(\"An error occurred while rolling back transactions. \", e1);\n+        }\n+    }\n+\n+    /**\n+     * Commit the transaction.\n+     *\n+     * @param dbConnection database connection.\n+     */\n+    public void commitTransaction(Connection dbConnection) {\n+\n+        try {\n+            if (dbConnection != null) {\n+                dbConnection.commit();\n+            }\n+        } catch (SQLException e1) {\n+            log.error(\"An error occurred while commit transactions. \", e1);", "originalCommit": "bcdc2396857d181baa8a40b3a26ac003a2d29774", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyNDM2Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456324363", "bodyText": "Fixed and updated the PR.", "author": "ashensw", "createdAt": "2020-07-17T09:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxODI5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d", "chunk": "diff --git a/components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java b/components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java\nindex 1b0b1d76aeb..51ec65215b3 100644\n--- a/components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java\n+++ b/components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java\n\n@@ -121,7 +121,7 @@ public class UmPersistenceManager {\n                 dbConnection.rollback();\n             }\n         } catch (SQLException e1) {\n-            log.error(\"An error occurred while rolling back transactions. \", e1);\n+            log.error(\"An error occurred while rolling back transactions.\", e1);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxOTAzMg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456319032", "bodyText": "any reason why we can't have primitives here?", "author": "mefarazath", "createdAt": "2020-07-17T09:08:16Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/internal/RoleManagementServiceImpl.java", "diffHunk": "@@ -47,14 +47,14 @@ public RoleBasicInfo addRole(String roleName, List<String> userList, List<String\n     }\n \n     @Override\n-    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n-            throws IdentityRoleManagementException {\n+    public List<RoleBasicInfo> getRoles(Integer limit, Integer offset, String sortBy, String sortOrder,", "originalCommit": "bcdc2396857d181baa8a40b3a26ac003a2d29774", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyMzc4MA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456323780", "bodyText": "There can be null values passed from the SCIM side if the user does not provide those values. So we validate it here and assign default values.", "author": "ashensw", "createdAt": "2020-07-17T09:17:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxOTAzMg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d", "url": "https://github.com/wso2/carbon-identity-framework/commit/0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d", "message": "Improvements and fixes to the Role management service", "committedDate": "2020-07-17T09:17:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMzMDQwMQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456330401", "bodyText": "shall we use multi-line comments?", "author": "emswbandara", "createdAt": "2020-07-17T09:29:47Z", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java", "diffHunk": "@@ -69,4 +75,69 @@ private void initDatasource() {\n             log.error(\"Error while retrieving user management data source\", e);\n         }\n     }\n+\n+    /**\n+     * Returns an database connection for UM data source.\n+     *\n+     * @param shouldApplyTransaction apply transaction or not\n+     * @return Database connection.\n+     * @throws IdentityRuntimeException Exception occurred when getting the data source.\n+     */\n+    public Connection getDBConnection(boolean shouldApplyTransaction) throws IdentityRuntimeException {\n+\n+        try {\n+            Connection dbConnection = dataSource.getConnection();\n+            if (shouldApplyTransaction) {\n+                dbConnection.setAutoCommit(false);\n+                try {\n+                    dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n+                } catch (SQLException e) {\n+                    // Handling startup error for postgresql Ref: https://github.com/wso2/product-is/issues/3545", "originalCommit": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM2MTM4NQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456361385", "bodyText": "Fixed and updated the PR.", "author": "ashensw", "createdAt": "2020-07-17T10:32:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMzMDQwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "bd899b9f109df8f871db7ad13922e4b9c29b59ec", "chunk": "diff --git a/components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java b/components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java\nindex 51ec65215b3..46c6f8079d3 100644\n--- a/components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java\n+++ b/components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java\n\n@@ -92,9 +92,9 @@ public class UmPersistenceManager {\n                 try {\n                     dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n                 } catch (SQLException e) {\n-                    // Handling startup error for postgresql Ref: https://github.com/wso2/product-is/issues/3545\n-                    // Active SQL Transaction means that connection is not committed.\n-                    // Need to commit before setting isolation property.\n+                    /* Handling startup error for postgresql Ref: https://github.com/wso2/product-is/issues/3545\n+                       Active SQL Transaction means that connection is not committed.\n+                       Need to commit before setting isolation property. */\n                     if (dbConnection.getMetaData().getDriverName().contains(POSTGRESQL_DATABASE)\n                             && PG_ACTIVE_SQL_TRANSACTION_STATE.equals(e.getSQLState())) {\n                         dbConnection.commit();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0OTE4Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456349183", "bodyText": "shall we add a debug log here", "author": "emswbandara", "createdAt": "2020-07-17T10:06:29Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -310,20 +342,41 @@ public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManag\n             throws SQLException, IdentityRoleManagementException {\n \n         List<RoleBasicInfo> roles = new ArrayList<>();\n+        List<String> roleNames = new ArrayList<>();\n+        UserRealm userRealm = CarbonContext.getThreadLocalCarbonContext().getUserRealm();\n         try (ResultSet resultSet = statement.executeQuery()) {\n             while (resultSet.next()) {\n-                String name = resultSet.getString(1);\n-                // Append the internal domain.\n-                if (!name.contains(UserCoreConstants.DOMAIN_SEPARATOR)) {\n-                    name = UserCoreConstants.INTERNAL_DOMAIN + CarbonConstants.DOMAIN_SEPARATOR + name;\n-                }\n+                String roleName = resultSet.getString(1);\n \n-                roles.add(new RoleBasicInfo(getRoleIDByName(name, tenantDomain), name));\n+                // Skip the Internal/everyone role.\n+                if (isInternalEveryoneRole(roleName, userRealm)) {\n+                    continue;", "originalCommit": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM2MTM2Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456361363", "bodyText": "Added and updated the PR.", "author": "ashensw", "createdAt": "2020-07-17T10:32:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0OTE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bd899b9f109df8f871db7ad13922e4b9c29b59ec", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\nindex c033ebf9e54..5ebd5d725d8 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\n\n@@ -350,13 +350,16 @@ public class RoleDAOImpl implements RoleDAO {\n \n                 // Skip the Internal/everyone role.\n                 if (isInternalEveryoneRole(roleName, userRealm)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Skip the role: \" + roleName + \" from the list roles results.\");\n+                    }\n                     continue;\n                 }\n                 roleNames.add(appendInternalDomain(roleName));\n             }\n         } catch (UserStoreException e) {\n             throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n-                    \"Error while getting the realmConfiguration.\", e);\n+                    \"Error while getting the realmConfiguration in the tenantDomain: \" + tenantDomain, e);\n         }\n         Map<String, String> roleNamesToIDs = getRoleIDsByNames(roleNames, tenantDomain);\n         roleNamesToIDs\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0OTQwMQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456349401", "bodyText": "let's add context info.. e.g. tenant", "author": "emswbandara", "createdAt": "2020-07-17T10:06:56Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -310,20 +342,41 @@ public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManag\n             throws SQLException, IdentityRoleManagementException {\n \n         List<RoleBasicInfo> roles = new ArrayList<>();\n+        List<String> roleNames = new ArrayList<>();\n+        UserRealm userRealm = CarbonContext.getThreadLocalCarbonContext().getUserRealm();\n         try (ResultSet resultSet = statement.executeQuery()) {\n             while (resultSet.next()) {\n-                String name = resultSet.getString(1);\n-                // Append the internal domain.\n-                if (!name.contains(UserCoreConstants.DOMAIN_SEPARATOR)) {\n-                    name = UserCoreConstants.INTERNAL_DOMAIN + CarbonConstants.DOMAIN_SEPARATOR + name;\n-                }\n+                String roleName = resultSet.getString(1);\n \n-                roles.add(new RoleBasicInfo(getRoleIDByName(name, tenantDomain), name));\n+                // Skip the Internal/everyone role.\n+                if (isInternalEveryoneRole(roleName, userRealm)) {\n+                    continue;\n+                }\n+                roleNames.add(appendInternalDomain(roleName));\n             }\n+        } catch (UserStoreException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),", "originalCommit": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM2MTMxNQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456361315", "bodyText": "Fixed and updated the PR.", "author": "ashensw", "createdAt": "2020-07-17T10:32:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0OTQwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "bd899b9f109df8f871db7ad13922e4b9c29b59ec", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\nindex c033ebf9e54..5ebd5d725d8 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\n\n@@ -350,13 +350,16 @@ public class RoleDAOImpl implements RoleDAO {\n \n                 // Skip the Internal/everyone role.\n                 if (isInternalEveryoneRole(roleName, userRealm)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Skip the role: \" + roleName + \" from the list roles results.\");\n+                    }\n                     continue;\n                 }\n                 roleNames.add(appendInternalDomain(roleName));\n             }\n         } catch (UserStoreException e) {\n             throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n-                    \"Error while getting the realmConfiguration.\", e);\n+                    \"Error while getting the realmConfiguration in the tenantDomain: \" + tenantDomain, e);\n         }\n         Map<String, String> roleNamesToIDs = getRoleIDsByNames(roleNames, tenantDomain);\n         roleNamesToIDs\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0OTkyNg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456349926", "bodyText": "let's use multi-line comments", "author": "emswbandara", "createdAt": "2020-07-17T10:08:10Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -664,55 +754,73 @@ public void deleteRole(String roleID, String tenantDomain) throws IdentityRoleMa\n                 throw new IdentityRoleManagementClientException(OPERATION_FORBIDDEN.getCode(),\n                         \"Invalid operation. Role: \" + roleName + \" Cannot be deleted.\");\n             }\n-        } catch (org.wso2.carbon.user.api.UserStoreException e) {\n+        } catch (UserStoreException e) {\n             throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n                     \"Error while getting the realmConfiguration.\", e);\n         }\n \n-        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n-            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, DELETE_ROLE_SQL)) {\n-                statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n-                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n-                statement.executeUpdate();\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection(true)) {\n+            try {\n+                try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, DELETE_ROLE_SQL)) {\n+                    statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n+                    statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                    statement.executeUpdate();\n+                }\n+\n+                // Delete the role from IDN_SCIM_GROUP table.\n+                deleteSCIMRole(roleName, tenantDomain);\n+\n+                // UM_ROLE_PERMISSION Table, roles are associated with Domain ID.\n+                // At this moment Role name doesn't contain the Domain prefix.", "originalCommit": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM2MTI0OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456361249", "bodyText": "Fixed and updated the PR.", "author": "ashensw", "createdAt": "2020-07-17T10:32:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0OTkyNg=="}], "type": "inlineReview", "revised_code": {"commit": "bd899b9f109df8f871db7ad13922e4b9c29b59ec", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\nindex c033ebf9e54..5ebd5d725d8 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\n\n@@ -770,10 +773,10 @@ public class RoleDAOImpl implements RoleDAO {\n                 // Delete the role from IDN_SCIM_GROUP table.\n                 deleteSCIMRole(roleName, tenantDomain);\n \n-                // UM_ROLE_PERMISSION Table, roles are associated with Domain ID.\n-                // At this moment Role name doesn't contain the Domain prefix.\n-                // clearRoleAuthorization() expects domain qualified name.\n-                // Hence we add the \"Internal\" Domain name explicitly here.\n+                /* UM_ROLE_PERMISSION Table, roles are associated with Domain ID.\n+                   At this moment Role name doesn't contain the Domain prefix.\n+                   clearRoleAuthorization() expects domain qualified name.\n+                   Hence we add the \"Internal\" Domain name explicitly here. */\n                 if (!roleName.contains(UserCoreConstants.DOMAIN_SEPARATOR)) {\n                     roleName = UserCoreUtil.addDomainToName(roleName, UserCoreConstants.INTERNAL_DOMAIN);\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1MDY5Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456350692", "bodyText": "why do we set autocommit to false?", "author": "emswbandara", "createdAt": "2020-07-17T10:09:50Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -794,14 +902,14 @@ public boolean isExistingRoleID(String roleID, String tenantDomain) throws Ident\n                     userList.add(new UserBasicInfo(user.getUserID(), user.getDomainQualifiedUsername()));\n                 }\n             }\n-        } catch (org.wso2.carbon.user.api.UserStoreException e) {\n+        } catch (UserStoreException e) {\n             throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n                     \"Error while getting the realmConfiguration.\", e);\n         }\n \n         List<String> disabledDomainName = getDisabledDomainNames();\n \n-        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection(false)) {", "originalCommit": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1NjA0Ng==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456356046", "bodyText": "This will not set autocommit false.", "author": "ashensw", "createdAt": "2020-07-17T10:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1MDY5Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1MTEzOA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456351138", "bodyText": "StringUtils.isNotEmpty(domain) is redundant here", "author": "emswbandara", "createdAt": "2020-07-17T10:10:49Z", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -855,8 +969,10 @@ protected String getUserIDByName(String name, String tenantDomain) throws Identi\n                         String name = resultSet.getString(1);\n                         String domain = resultSet.getString(2);\n                         if (!disabledDomainName.contains(domain)) {\n-                            if (StringUtils.isNotEmpty(domain)) {\n+                            if (StringUtils.isNotEmpty(domain) && !StringUtils.equals(primaryDomainName, domain)) {", "originalCommit": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM2MTE5OA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456361198", "bodyText": "Fixed and updated the PR.", "author": "ashensw", "createdAt": "2020-07-17T10:32:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1MTEzOA=="}], "type": "inlineReview", "revised_code": {"commit": "bd899b9f109df8f871db7ad13922e4b9c29b59ec", "chunk": "diff --git a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\nindex c033ebf9e54..5ebd5d725d8 100644\n--- a/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\n+++ b/components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java\n\n@@ -969,7 +972,7 @@ public class RoleDAOImpl implements RoleDAO {\n                         String name = resultSet.getString(1);\n                         String domain = resultSet.getString(2);\n                         if (!disabledDomainName.contains(domain)) {\n-                            if (StringUtils.isNotEmpty(domain) && !StringUtils.equals(primaryDomainName, domain)) {\n+                            if (!StringUtils.equals(primaryDomainName, domain)) {\n                                 name = UserCoreUtil.addDomainToName(name, domain);\n                             } else {\n                                 name = primaryDomainName + UserCoreConstants.DOMAIN_SEPARATOR + name;\n"}}, {"oid": "bd899b9f109df8f871db7ad13922e4b9c29b59ec", "url": "https://github.com/wso2/carbon-identity-framework/commit/bd899b9f109df8f871db7ad13922e4b9c29b59ec", "message": "Improvements and fixes to the Role management service", "committedDate": "2020-07-17T10:32:02Z", "type": "commit"}, {"oid": "bd899b9f109df8f871db7ad13922e4b9c29b59ec", "url": "https://github.com/wso2/carbon-identity-framework/commit/bd899b9f109df8f871db7ad13922e4b9c29b59ec", "message": "Improvements and fixes to the Role management service", "committedDate": "2020-07-17T10:32:02Z", "type": "forcePushed"}]}