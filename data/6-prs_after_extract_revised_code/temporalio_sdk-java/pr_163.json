{"pr_number": 163, "pr_title": "Syncs Java SDK to latest Temporal Proto", "pr_createdAt": "2020-07-30T06:46:07Z", "pr_url": "https://github.com/temporalio/sdk-java/pull/163", "timeline": [{"oid": "0cd1058bdfb8588d375151d868018233bb3edfcd", "url": "https://github.com/temporalio/sdk-java/commit/0cd1058bdfb8588d375151d868018233bb3edfcd", "message": "moves to latest submodule", "committedDate": "2020-07-30T01:02:08Z", "type": "commit"}, {"oid": "a4c8142dd5dfb4b4ff2c313879842ef13efc3b1b", "url": "https://github.com/temporalio/sdk-java/commit/a4c8142dd5dfb4b4ff2c313879842ef13efc3b1b", "message": "first pass", "committedDate": "2020-07-30T04:20:01Z", "type": "commit"}, {"oid": "f6dac690ad678d6670b773415c5b0becfeee5e01", "url": "https://github.com/temporalio/sdk-java/commit/f6dac690ad678d6670b773415c5b0becfeee5e01", "message": "second pass", "committedDate": "2020-07-30T04:51:45Z", "type": "commit"}, {"oid": "063dec9a47935d1132e2b4179650b3cb6ecd5255", "url": "https://github.com/temporalio/sdk-java/commit/063dec9a47935d1132e2b4179650b3cb6ecd5255", "message": "run gradlew build", "committedDate": "2020-07-30T04:52:17Z", "type": "commit"}, {"oid": "58e12059821640eae64eb33ab02ad5f71c865f0f", "url": "https://github.com/temporalio/sdk-java/commit/58e12059821640eae64eb33ab02ad5f71c865f0f", "message": "third pass", "committedDate": "2020-07-30T05:05:32Z", "type": "commit"}, {"oid": "5baa4b5b651761dc090043464ad78733bc517ae7", "url": "https://github.com/temporalio/sdk-java/commit/5baa4b5b651761dc090043464ad78733bc517ae7", "message": "30 errors remaining", "committedDate": "2020-07-30T05:11:25Z", "type": "commit"}, {"oid": "15111630eeb8f345053be860e88ad73b1e690536", "url": "https://github.com/temporalio/sdk-java/commit/15111630eeb8f345053be860e88ad73b1e690536", "message": "15 remaining errors", "committedDate": "2020-07-30T05:24:51Z", "type": "commit"}, {"oid": "f371776e7064f3fe6157db6d399cea7c10b54e96", "url": "https://github.com/temporalio/sdk-java/commit/f371776e7064f3fe6157db6d399cea7c10b54e96", "message": "another pass", "committedDate": "2020-07-30T05:39:46Z", "type": "commit"}, {"oid": "c86b725c734e2f7a5b654da3e2e7696290f44748", "url": "https://github.com/temporalio/sdk-java/commit/c86b725c734e2f7a5b654da3e2e7696290f44748", "message": "last file change", "committedDate": "2020-07-30T05:41:29Z", "type": "commit"}, {"oid": "5735849e79e4c82da37aae7ec215d6ba8910ab73", "url": "https://github.com/temporalio/sdk-java/commit/5735849e79e4c82da37aae7ec215d6ba8910ab73", "message": "fixes tests", "committedDate": "2020-07-30T06:19:44Z", "type": "commit"}, {"oid": "57c623846a7bf06b47f900027405c5cbc8442b30", "url": "https://github.com/temporalio/sdk-java/commit/57c623846a7bf06b47f900027405c5cbc8442b30", "message": "minor cleanup", "committedDate": "2020-07-30T06:43:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NjE3NQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462776175", "bodyText": "the current method takes in delaySeconds as a long. If we wanted to, we can have it take a Java Duration instead, although perhaps not in this PR", "author": "mastermanu", "createdAt": "2020-07-30T06:50:32Z", "path": "src/main/java/io/temporal/internal/replay/ReplayClockContext.java", "diffHunk": "@@ -140,7 +141,7 @@ boolean isReplaying() {\n     final OpenRequestInfo<?, Long> context = new OpenRequestInfo<>(firingTime);\n     final StartTimerCommandAttributes timer =\n         StartTimerCommandAttributes.newBuilder()\n-            .setStartToFireTimeoutSeconds(delaySeconds)\n+            .setStartToFireTimeout(Durations.fromSeconds(delaySeconds))", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExMzc3OQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463113779", "bodyText": "Let's make it Duration. As the API that calls it uses Duration and milliseconds.", "author": "mfateev", "createdAt": "2020-07-30T16:16:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NjE3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a1d630ae3ab18fcab7f1821bcb2e1324f096083c", "chunk": "diff --git a/src/main/java/io/temporal/internal/replay/ReplayClockContext.java b/src/main/java/io/temporal/internal/replay/ReplayClockContext.java\nindex cc0d0e49..58c66606 100644\n--- a/src/main/java/io/temporal/internal/replay/ReplayClockContext.java\n+++ b/src/main/java/io/temporal/internal/replay/ReplayClockContext.java\n\n@@ -129,19 +128,19 @@ public final class ReplayClockContext {\n     return replaying;\n   }\n \n-  Consumer<Exception> createTimer(long delaySeconds, Consumer<Exception> callback) {\n-    if (delaySeconds < 0) {\n-      throw new IllegalArgumentException(\"Negative delaySeconds: \" + delaySeconds);\n+  Consumer<Exception> createTimer(Duration delay, Consumer<Exception> callback) {\n+    if (delay.isNegative()) {\n+      throw new IllegalArgumentException(\"Negative delay: \" + delay);\n     }\n-    if (delaySeconds == 0) {\n+    if (delay.isZero()) {\n       callback.accept(null);\n       return null;\n     }\n-    long firingTime = currentTimeMillis() + TimeUnit.SECONDS.toMillis(delaySeconds);\n+    long firingTime = currentTimeMillis() + delay.toMillis();\n     final OpenRequestInfo<?, Long> context = new OpenRequestInfo<>(firingTime);\n     final StartTimerCommandAttributes timer =\n         StartTimerCommandAttributes.newBuilder()\n-            .setStartToFireTimeout(Durations.fromSeconds(delaySeconds))\n+            .setStartToFireTimeout(ProtobufTimeUtils.ToProtoDuration(delay))\n             .setTimerId(String.valueOf(commandHelper.getAndIncrementNextId()))\n             .build();\n     long startEventId = commandHelper.startTimer(timer);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NjY2NA==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462776664", "bodyText": "Should we change ReplayWorkflowContextImp to take in a java.time.Duration instead of the start time in Nanoseconds in a subsequent PR?", "author": "mastermanu", "createdAt": "2020-07-30T06:51:15Z", "path": "src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java", "diffHunk": "@@ -115,14 +118,14 @@\n           \"First event in the history is not WorkflowExecutionStarted\");\n     }\n     startedEvent = firstEvent.getWorkflowExecutionStartedEventAttributes();\n-    wfStartTimeNanos = firstEvent.getTimestamp();\n+    wfStartTimeNanos = Timestamps.toNanos(firstEvent.getEventTime());\n \n     context =\n         new ReplayWorkflowContextImpl(", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExNjA5Nw==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463116097", "bodyText": "I don't think Duration is the right class for timestamps which represent point in time.", "author": "mfateev", "createdAt": "2020-07-30T16:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NjY2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzODUyOQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463138529", "bodyText": "sorry I meant Timestamp. I definitely interchanged those quite a bit while doing this diff.", "author": "mastermanu", "createdAt": "2020-07-30T16:56:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NjY2NA=="}], "type": "inlineReview", "revised_code": {"commit": "999fe2bdcbbbdc0e826a5464635c25fdb4a7f311", "chunk": "diff --git a/src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java b/src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java\nindex acab0455..60f83fd0 100644\n--- a/src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java\n+++ b/src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java\n\n@@ -118,7 +116,7 @@ class ReplayWorkflowExecutor implements WorkflowExecutor {\n           \"First event in the history is not WorkflowExecutionStarted\");\n     }\n     startedEvent = firstEvent.getWorkflowExecutionStartedEventAttributes();\n-    wfStartTimeNanos = Timestamps.toNanos(firstEvent.getEventTime());\n+    wfStartTime = firstEvent.getEventTime();\n \n     context =\n         new ReplayWorkflowContextImpl(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3Njk4NQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462776985", "bodyText": "should we have processEventLoop take in a java.time.Duration instead?", "author": "mastermanu", "createdAt": "2020-07-30T06:51:40Z", "path": "src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java", "diffHunk": "@@ -460,7 +464,7 @@ private boolean handleWorkflowTaskImpl(\n         forceCreateNewWorkflowTask =\n             processEventLoop(\n                 startTime,\n-                startedEvent.getWorkflowTaskTimeoutSeconds(),\n+                (int) Durations.toSeconds(startedEvent.getWorkflowTaskTimeout()),", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExNjM2Mg==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463116362", "bodyText": "Yes", "author": "mfateev", "createdAt": "2020-07-30T16:20:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3Njk4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a1d630ae3ab18fcab7f1821bcb2e1324f096083c", "chunk": "diff --git a/src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java b/src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java\nindex acab0455..adf552e0 100644\n--- a/src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java\n+++ b/src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java\n\n@@ -464,7 +460,7 @@ class ReplayWorkflowExecutor implements WorkflowExecutor {\n         forceCreateNewWorkflowTask =\n             processEventLoop(\n                 startTime,\n-                (int) Durations.toSeconds(startedEvent.getWorkflowTaskTimeout()),\n+                ProtobufTimeUtils.ToJavaDuration(startedEvent.getWorkflowTaskTimeout()),\n                 taskEvents,\n                 workflowTask.hasQuery());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NzE3NA==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462777174", "bodyText": "return a Duration instead?", "author": "mastermanu", "createdAt": "2020-07-30T06:51:53Z", "path": "src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java", "diffHunk": "@@ -606,7 +610,7 @@ private boolean executeLocalActivities(long startTime, int workflowTaskTimeoutSe\n   }\n \n   int getWorkflowTaskTimeoutSeconds() {", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExNjQ3Ng==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463116476", "bodyText": "yes", "author": "mfateev", "createdAt": "2020-07-30T16:20:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NzE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "a1d630ae3ab18fcab7f1821bcb2e1324f096083c", "chunk": "diff --git a/src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java b/src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java\nindex acab0455..adf552e0 100644\n--- a/src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java\n+++ b/src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java\n\n@@ -609,8 +605,8 @@ class ReplayWorkflowExecutor implements WorkflowExecutor {\n     return false;\n   }\n \n-  int getWorkflowTaskTimeoutSeconds() {\n-    return (int) Durations.toSeconds(startedEvent.getWorkflowTaskTimeout());\n+  Duration getWorkflowTaskTimeout() {\n+    return ProtobufTimeUtils.ToJavaDuration(startedEvent.getWorkflowTaskTimeout());\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NzUyMQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462777521", "bodyText": "Should we change all the methods here to return Durations instead?", "author": "mastermanu", "createdAt": "2020-07-30T06:52:19Z", "path": "src/main/java/io/temporal/internal/replay/WorkflowContext.java", "diffHunk": "@@ -102,25 +103,25 @@ WorkflowExecution getParentWorkflowExecution() {\n \n   int getWorkflowRunTimeoutSeconds() {\n     WorkflowExecutionStartedEventAttributes attributes = getWorkflowStartedEventAttributes();\n-    return attributes.getWorkflowRunTimeoutSeconds();\n+    return (int) Durations.toSeconds(attributes.getWorkflowRunTimeout());", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExNzIzMw==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463117233", "bodyText": "yes, with exception of get..Timestamp ones.", "author": "mfateev", "createdAt": "2020-07-30T16:21:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NzUyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a1d630ae3ab18fcab7f1821bcb2e1324f096083c", "chunk": "diff --git a/src/main/java/io/temporal/internal/replay/WorkflowContext.java b/src/main/java/io/temporal/internal/replay/WorkflowContext.java\nindex 00a1ee0e..820c8c1f 100644\n--- a/src/main/java/io/temporal/internal/replay/WorkflowContext.java\n+++ b/src/main/java/io/temporal/internal/replay/WorkflowContext.java\n\n@@ -101,14 +102,14 @@ final class WorkflowContext {\n     return attributes.hasParentWorkflowExecution() ? attributes.getParentWorkflowExecution() : null;\n   }\n \n-  int getWorkflowRunTimeoutSeconds() {\n+  Duration getWorkflowRunTimeout() {\n     WorkflowExecutionStartedEventAttributes attributes = getWorkflowStartedEventAttributes();\n-    return (int) Durations.toSeconds(attributes.getWorkflowRunTimeout());\n+    return ProtobufTimeUtils.ToJavaDuration(attributes.getWorkflowRunTimeout());\n   }\n \n-  int getWorkflowExecutionTimeoutSeconds() {\n+  Duration getWorkflowExecutionTimeout() {\n     WorkflowExecutionStartedEventAttributes attributes = getWorkflowStartedEventAttributes();\n-    return (int) Durations.toSeconds(attributes.getWorkflowExecutionTimeout());\n+    return ProtobufTimeUtils.ToJavaDuration(attributes.getWorkflowExecutionTimeout());\n   }\n \n   long getWorkflowExecutionExpirationTimestampMillis() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3Nzg5MQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462777891", "bodyText": "change to return java.time.Duration?", "author": "mastermanu", "createdAt": "2020-07-30T06:52:48Z", "path": "src/main/java/io/temporal/internal/sync/ActivityInfoImpl.java", "diffHunk": "@@ -65,23 +66,22 @@ public String getActivityType() {\n \n   @Override\n   public long getScheduledTimestamp() {", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExNzYxNg==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463117616", "bodyText": "No, as it is timestamp", "author": "mfateev", "createdAt": "2020-07-30T16:22:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3Nzg5MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3ODI5Nw==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462778297", "bodyText": "should we change this to Duration?", "author": "mastermanu", "createdAt": "2020-07-30T06:53:23Z", "path": "src/main/java/io/temporal/internal/testservice/StateMachines.java", "diffHunk": "@@ -168,15 +171,15 @@\n \n   static final class WorkflowData {\n     Optional<TestServiceRetryState> retryState;\n-    int backoffStartIntervalInSeconds;\n+    long backoffStartIntervalInSeconds;", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExODU0NQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463118545", "bodyText": "To Duration or milliseconds", "author": "mfateev", "createdAt": "2020-07-30T16:23:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3ODI5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a1d630ae3ab18fcab7f1821bcb2e1324f096083c", "chunk": "diff --git a/src/main/java/io/temporal/internal/testservice/StateMachines.java b/src/main/java/io/temporal/internal/testservice/StateMachines.java\nindex 51c261c5..3e8d0116 100644\n--- a/src/main/java/io/temporal/internal/testservice/StateMachines.java\n+++ b/src/main/java/io/temporal/internal/testservice/StateMachines.java\n\n@@ -171,7 +172,7 @@ class StateMachines {\n \n   static final class WorkflowData {\n     Optional<TestServiceRetryState> retryState;\n-    long backoffStartIntervalInSeconds;\n+    Duration backoffStartInterval;\n     String cronSchedule;\n     Payloads lastCompletionResult;\n     String originalExecutionRunId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3OTE4Mg==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462779182", "bodyText": "change to use java.time.Duration and java timestamp equivalent?", "author": "mastermanu", "createdAt": "2020-07-30T06:54:39Z", "path": "src/main/java/io/temporal/internal/testservice/StateMachines.java", "diffHunk": "@@ -984,7 +987,7 @@ private static void scheduleActivityTask(\n       ScheduleActivityTaskCommandAttributes d,\n       long workflowTaskCompletedEventId) {\n     RetryPolicy retryPolicy = ensureDefaultFieldsForActivityRetryPolicy(d.getRetryPolicy());\n-    long expirationInterval = TimeUnit.SECONDS.toMillis(d.getScheduleToCloseTimeoutSeconds());\n+    long expirationInterval = Durations.toMillis(d.getScheduleToCloseTimeout());", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExOTg2NQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463119865", "bodyText": "Duration", "author": "mfateev", "createdAt": "2020-07-30T16:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3OTE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "335d08714ba886855568eca96947dbc19c3551de", "chunk": "diff --git a/src/main/java/io/temporal/internal/testservice/StateMachines.java b/src/main/java/io/temporal/internal/testservice/StateMachines.java\nindex 51c261c5..4e5585be 100644\n--- a/src/main/java/io/temporal/internal/testservice/StateMachines.java\n+++ b/src/main/java/io/temporal/internal/testservice/StateMachines.java\n\n@@ -987,8 +988,8 @@ class StateMachines {\n       ScheduleActivityTaskCommandAttributes d,\n       long workflowTaskCompletedEventId) {\n     RetryPolicy retryPolicy = ensureDefaultFieldsForActivityRetryPolicy(d.getRetryPolicy());\n-    long expirationInterval = Durations.toMillis(d.getScheduleToCloseTimeout());\n-    long expirationTime = data.store.currentTimeMillis() + expirationInterval;\n+    Duration expirationInterval = d.getScheduleToCloseTimeout();\n+    Timestamp expirationTime = Timestamps.add(data.store.currentTime(), expirationInterval);\n     TestServiceRetryState retryState = new TestServiceRetryState(retryPolicy, expirationTime);\n \n     ActivityTaskScheduledEventAttributes.Builder a =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MDExMw==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462780113", "bodyText": "change these intervals/expirations to java.time.Durations?", "author": "mastermanu", "createdAt": "2020-07-30T06:55:45Z", "path": "src/main/java/io/temporal/internal/testservice/TestServiceRetryState.java", "diffHunk": "@@ -104,10 +105,10 @@ BackoffInterval getBackoffIntervalInSeconds(Optional<String> errorType, long cur\n       // MaximumAttempts is the total attempts, including initial (non-retry) attempt.\n       return new BackoffInterval(RetryState.RETRY_STATE_MAXIMUM_ATTEMPTS_REACHED);\n     }\n-    long initInterval = TimeUnit.SECONDS.toMillis(retryPolicy.getInitialIntervalInSeconds());\n+    long initInterval = Durations.toMillis(retryPolicy.getInitialInterval());", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyMzQ0OQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463123449", "bodyText": "Only if it improves readability of this code.", "author": "mfateev", "createdAt": "2020-07-30T16:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MDExMw=="}], "type": "inlineReview", "revised_code": {"commit": "0a2fd32a999afe99c3f11f868efdc82eaa9d9ba5", "chunk": "diff --git a/src/main/java/io/temporal/internal/testservice/TestServiceRetryState.java b/src/main/java/io/temporal/internal/testservice/TestServiceRetryState.java\nindex 1d8c0c9f..92e2c9a9 100644\n--- a/src/main/java/io/temporal/internal/testservice/TestServiceRetryState.java\n+++ b/src/main/java/io/temporal/internal/testservice/TestServiceRetryState.java\n\n@@ -99,15 +99,14 @@ final class TestServiceRetryState {\n       return new BackoffInterval(RetryState.RETRY_STATE_RETRY_POLICY_NOT_SET);\n     }\n \n-    if (retryPolicy.getMaximumAttempts() > 0\n-        && getAttempt() >= retryPolicy.getMaximumAttempts() - 1) {\n-      // currAttempt starts from 0.\n+    if (retryPolicy.getMaximumAttempts() > 0 && getAttempt() >= retryPolicy.getMaximumAttempts()) {\n+      // currAttempt starts from 1.\n       // MaximumAttempts is the total attempts, including initial (non-retry) attempt.\n       return new BackoffInterval(RetryState.RETRY_STATE_MAXIMUM_ATTEMPTS_REACHED);\n     }\n     long initInterval = Durations.toMillis(retryPolicy.getInitialInterval());\n     long nextInterval =\n-        (long) (initInterval * Math.pow(retryPolicy.getBackoffCoefficient(), getAttempt()));\n+        (long) (initInterval * Math.pow(retryPolicy.getBackoffCoefficient(), getAttempt() - 1));\n     long maxInterval = Durations.toMillis(retryPolicy.getMaximumInterval());\n     if (nextInterval <= 0) {\n       // math.Pow() could overflow\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MDQ2MQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462780461", "bodyText": "change from long to Duration? Same for the rest of the items in this file", "author": "mastermanu", "createdAt": "2020-07-30T06:56:13Z", "path": "src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java", "diffHunk": "@@ -163,7 +164,7 @@\n       StartWorkflowExecutionRequest startRequest,\n       String runId,\n       Optional<TestServiceRetryState> retryState,\n-      int backoffStartIntervalInSeconds,\n+      long backoffStartIntervalInSeconds,", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyNDI5Mw==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463124293", "bodyText": "Either change to the duration or make sure that all the intervals are in milliseconds.", "author": "mfateev", "createdAt": "2020-07-30T16:33:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MDQ2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a1d630ae3ab18fcab7f1821bcb2e1324f096083c", "chunk": "diff --git a/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java b/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\nindex 2884f221..254e4edf 100644\n--- a/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\n+++ b/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\n\n@@ -156,7 +157,7 @@ class TestWorkflowMutableStateImpl implements TestWorkflowMutableState {\n \n   /**\n    * @param retryState present if workflow is a retry\n-   * @param backoffStartIntervalInSeconds\n+   * @param backoffStartInterval\n    * @param lastCompletionResult\n    * @param parentChildInitiatedEventId id of the child initiated event in the parent history\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MTQ3MA==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462781470", "bodyText": "can this argument come in as a java duration?", "author": "mastermanu", "createdAt": "2020-07-30T06:57:31Z", "path": "src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java", "diffHunk": "@@ -1258,10 +1269,10 @@ private void startNewCronRun(\n         ContinueAsNewWorkflowExecutionCommandAttributes.newBuilder()\n             .setInput(startRequest.getInput())\n             .setWorkflowType(startRequest.getWorkflowType())\n-            .setWorkflowRunTimeoutSeconds(startRequest.getWorkflowRunTimeoutSeconds())\n-            .setWorkflowTaskTimeoutSeconds(startRequest.getWorkflowTaskTimeoutSeconds())\n+            .setWorkflowRunTimeout(startRequest.getWorkflowRunTimeout())\n+            .setWorkflowTaskTimeout(startRequest.getWorkflowTaskTimeout())\n             .setTaskQueue(startRequest.getTaskQueue())\n-            .setBackoffStartIntervalInSeconds(backoffIntervalSeconds)\n+            .setBackoffStartInterval(Durations.fromSeconds(backoffIntervalSeconds))", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyNjQxNQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463126415", "bodyText": "Yes, we should remove \"Seconds\" from everwhere.", "author": "mfateev", "createdAt": "2020-07-30T16:36:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MTQ3MA=="}], "type": "inlineReview", "revised_code": {"commit": "216204ddebe829b00df3fa88d870a48f3b2bc88d", "chunk": "diff --git a/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java b/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\nindex 2884f221..d4cbc2d2 100644\n--- a/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\n+++ b/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\n\n@@ -1253,16 +1256,20 @@ class TestWorkflowMutableStateImpl implements TestWorkflowMutableState {\n       Payloads lastCompletionResult) {\n     Cron cron = parseCron(data.cronSchedule);\n \n-    Instant i = Instant.ofEpochMilli(store.currentTimeMillis());\n+    Instant i = Instant.ofEpochMilli(Timestamps.toMillis(store.currentTime()));\n     ZonedDateTime now = ZonedDateTime.ofInstant(i, ZoneOffset.UTC);\n \n     ExecutionTime executionTime = ExecutionTime.forCron(cron);\n     Optional<Duration> backoff = executionTime.timeToNextExecution(now);\n-    int backoffIntervalSeconds = roundUpToSeconds(backoff.get());\n+    Duration backoffInterval = Duration.ZERO;\n \n-    if (backoffIntervalSeconds == 0) {\n+    if (backoff.isPresent()) {\n+      backoffInterval = backoff.get();\n+    }\n+\n+    if (backoffInterval == Duration.ZERO) {\n       backoff = executionTime.timeToNextExecution(now.plusSeconds(1));\n-      backoffIntervalSeconds = roundUpToSeconds(backoff.get()) + 1;\n+      backoffInterval = backoff.get();\n     }\n \n     ContinueAsNewWorkflowExecutionCommandAttributes continueAsNewAttr =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MTY4Mg==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462781682", "bodyText": "java duration here and for the other variables in this file?", "author": "mastermanu", "createdAt": "2020-07-30T06:57:49Z", "path": "src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java", "diffHunk": "@@ -1390,7 +1401,7 @@ public void startWorkflow(\n               scheduleWorkflowTask(ctx);\n             }\n \n-            int runTimeoutSeconds = startRequest.getWorkflowRunTimeoutSeconds();\n+            long runTimeoutSeconds = Durations.toSeconds(startRequest.getWorkflowRunTimeout());", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyNjYyMA==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463126620", "bodyText": "If it improves readability", "author": "mfateev", "createdAt": "2020-07-30T16:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MTY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a1d630ae3ab18fcab7f1821bcb2e1324f096083c", "chunk": "diff --git a/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java b/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\nindex 2884f221..254e4edf 100644\n--- a/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\n+++ b/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\n\n@@ -1401,11 +1405,12 @@ class TestWorkflowMutableStateImpl implements TestWorkflowMutableState {\n               scheduleWorkflowTask(ctx);\n             }\n \n-            long runTimeoutSeconds = Durations.toSeconds(startRequest.getWorkflowRunTimeout());\n-            if (backoffStartIntervalInSeconds > 0) {\n-              runTimeoutSeconds = runTimeoutSeconds + backoffStartIntervalInSeconds;\n+            Duration runTimeout =\n+                ProtobufTimeUtils.ToJavaDuration(startRequest.getWorkflowRunTimeout());\n+            if (backoffStartInterval.compareTo(Duration.ZERO) > 0) {\n+              runTimeout = runTimeout.plus(backoffStartInterval);\n             }\n-            ctx.addTimer(runTimeoutSeconds, this::timeoutWorkflow, \"workflow execution timeout\");\n+            ctx.addTimer(runTimeout, this::timeoutWorkflow, \"workflow execution timeout\");\n           });\n     } catch (StatusRuntimeException e) {\n       if (e.getStatus().getCode() == Status.Code.NOT_FOUND) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MTg1Nw==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462781857", "bodyText": "convert to java duration?", "author": "mastermanu", "createdAt": "2020-07-30T06:58:04Z", "path": "src/main/java/io/temporal/internal/testservice/TestWorkflowService.java", "diffHunk": "@@ -257,7 +258,7 @@ StartWorkflowExecutionResponse startWorkflowExecutionImpl(\n       }\n       Optional<TestServiceRetryState> retryState;\n       if (startRequest.hasRetryPolicy()) {\n-        long expirationInterval = startRequest.getWorkflowExecutionTimeoutSeconds();\n+        long expirationInterval = Durations.toSeconds(startRequest.getWorkflowExecutionTimeout());", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f8119be58e08887bf2dc903a70e136839063554", "chunk": "diff --git a/src/main/java/io/temporal/internal/testservice/TestWorkflowService.java b/src/main/java/io/temporal/internal/testservice/TestWorkflowService.java\nindex 1553f349..3dcee2c3 100644\n--- a/src/main/java/io/temporal/internal/testservice/TestWorkflowService.java\n+++ b/src/main/java/io/temporal/internal/testservice/TestWorkflowService.java\n\n@@ -258,7 +258,8 @@ public final class TestWorkflowService extends WorkflowServiceGrpc.WorkflowServi\n       }\n       Optional<TestServiceRetryState> retryState;\n       if (startRequest.hasRetryPolicy()) {\n-        long expirationInterval = Durations.toSeconds(startRequest.getWorkflowExecutionTimeout());\n+        Duration expirationInterval =\n+            ProtobufTimeUtils.ToJavaDuration(startRequest.getWorkflowExecutionTimeout());\n         retryState = newRetryStateLocked(startRequest.getRetryPolicy(), expirationInterval);\n       } else {\n         retryState = Optional.empty();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MjE0OA==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462782148", "bodyText": "use actual duration here?", "author": "mastermanu", "createdAt": "2020-07-30T06:58:29Z", "path": "src/main/java/io/temporal/internal/worker/LocalActivityWorker.java", "diffHunk": "@@ -260,16 +262,18 @@ public Throwable wrapFailure(Task task, Throwable failure) {\n       retryPolicy.getNonRetryableErrorTypesList().toArray(doNotRetry);\n       RetryOptions retryOptions =\n           RetryOptions.newBuilder()\n-              .setMaximumInterval(Duration.ofSeconds(retryPolicy.getMaximumIntervalInSeconds()))\n-              .setInitialInterval(Duration.ofSeconds(retryPolicy.getInitialIntervalInSeconds()))\n+              .setMaximumInterval(\n+                  ProtobufTimeUtils.ToJavaDuration(retryPolicy.getMaximumInterval()))\n+              .setInitialInterval(\n+                  ProtobufTimeUtils.ToJavaDuration(retryPolicy.getInitialInterval()))\n               .setMaximumAttempts(retryPolicy.getMaximumAttempts())\n               .setBackoffCoefficient(retryPolicy.getBackoffCoefficient())\n               .setDoNotRetry(doNotRetry)\n               .build();\n       long sleepMillis = retryOptions.calculateSleepTime(attempt);\n       long elapsedTask = System.currentTimeMillis() - task.taskStartTime;\n       long elapsedTotal = elapsedTask + params.getElapsedTime();\n-      int timeoutSeconds = activityTask.getScheduleToCloseTimeoutSeconds();\n+      int timeoutSeconds = (int) Durations.toSeconds(activityTask.getScheduleToCloseTimeout());", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyNzkzMQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463127931", "bodyText": "Or Duration or millis", "author": "mfateev", "createdAt": "2020-07-30T16:39:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MjE0OA=="}], "type": "inlineReview", "revised_code": {"commit": "2f8119be58e08887bf2dc903a70e136839063554", "chunk": "diff --git a/src/main/java/io/temporal/internal/worker/LocalActivityWorker.java b/src/main/java/io/temporal/internal/worker/LocalActivityWorker.java\nindex 2d6e80ab..dc052461 100644\n--- a/src/main/java/io/temporal/internal/worker/LocalActivityWorker.java\n+++ b/src/main/java/io/temporal/internal/worker/LocalActivityWorker.java\n\n@@ -273,9 +272,9 @@ public final class LocalActivityWorker implements SuspendableWorker {\n       long sleepMillis = retryOptions.calculateSleepTime(attempt);\n       long elapsedTask = System.currentTimeMillis() - task.taskStartTime;\n       long elapsedTotal = elapsedTask + params.getElapsedTime();\n-      int timeoutSeconds = (int) Durations.toSeconds(activityTask.getScheduleToCloseTimeout());\n+      Duration timeout = ProtobufTimeUtils.ToJavaDuration(activityTask.getScheduleToCloseTimeout());\n       Optional<Duration> expiration =\n-          timeoutSeconds > 0 ? Optional.of(Duration.ofSeconds(timeoutSeconds)) : Optional.empty();\n+          timeout.compareTo(Duration.ZERO) > 0 ? Optional.of(timeout) : Optional.empty();\n       if (retryOptions.shouldRethrow(\n           result.getTaskFailed().getFailure(), expiration, attempt, elapsedTotal, sleepMillis)) {\n         return result;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MjQ2OA==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462782468", "bodyText": "use duration here?", "author": "mastermanu", "createdAt": "2020-07-30T06:58:54Z", "path": "src/main/java/io/temporal/internal/testservice/TestWorkflowService.java", "diffHunk": "@@ -305,7 +306,7 @@ private StartWorkflowExecutionResponse startWorkflowExecutionNoRunningCheckLocke\n       String runId,\n       Optional<String> continuedExecutionRunId,\n       Optional<TestServiceRetryState> retryState,\n-      int backoffStartIntervalInSeconds,\n+      long backoffStartIntervalInSeconds,", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1d630ae3ab18fcab7f1821bcb2e1324f096083c", "chunk": "diff --git a/src/main/java/io/temporal/internal/testservice/TestWorkflowService.java b/src/main/java/io/temporal/internal/testservice/TestWorkflowService.java\nindex 1553f349..2d6f34d9 100644\n--- a/src/main/java/io/temporal/internal/testservice/TestWorkflowService.java\n+++ b/src/main/java/io/temporal/internal/testservice/TestWorkflowService.java\n\n@@ -306,7 +307,7 @@ public final class TestWorkflowService extends WorkflowServiceGrpc.WorkflowServi\n       String runId,\n       Optional<String> continuedExecutionRunId,\n       Optional<TestServiceRetryState> retryState,\n-      long backoffStartIntervalInSeconds,\n+      Duration backoffStartInterval,\n       Payloads lastCompletionResult,\n       Optional<TestWorkflowMutableState> parent,\n       OptionalLong parentChildInitiatedEventId,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MjY2OA==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462782668", "bodyText": "use duration here", "author": "mastermanu", "createdAt": "2020-07-30T06:59:12Z", "path": "src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java", "diffHunk": "@@ -1485,8 +1497,8 @@ private void updateHeartbeatTimer(\n       RequestContext ctx,\n       long activityId,\n       StateMachine<ActivityTaskData> activity,\n-      int startToCloseTimeout,\n-      int heartbeatTimeout) {\n+      long startToCloseTimeout,", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1d630ae3ab18fcab7f1821bcb2e1324f096083c", "chunk": "diff --git a/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java b/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\nindex 2884f221..254e4edf 100644\n--- a/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\n+++ b/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\n\n@@ -1497,9 +1503,10 @@ class TestWorkflowMutableStateImpl implements TestWorkflowMutableState {\n       RequestContext ctx,\n       long activityId,\n       StateMachine<ActivityTaskData> activity,\n-      long startToCloseTimeout,\n-      long heartbeatTimeout) {\n-    if (heartbeatTimeout > 0 && heartbeatTimeout < startToCloseTimeout) {\n+      Duration startToCloseTimeout,\n+      Duration heartbeatTimeout) {\n+    if (heartbeatTimeout.compareTo(Duration.ZERO) > 0\n+        && heartbeatTimeout.compareTo(startToCloseTimeout) < 0) {\n       ActivityTaskData data = activity.getData();\n       data.lastHeartbeatTime = clock.getAsLong();\n       int attempt = data.getAttempt();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4Mjc2NA==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462782764", "bodyText": "use duration here", "author": "mastermanu", "createdAt": "2020-07-30T06:59:18Z", "path": "src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java", "diffHunk": "@@ -1637,8 +1649,9 @@ public boolean heartbeatActivityTask(long scheduledEventId, Payloads details) {\n           }\n           ActivityTaskData data = activity.getData();\n           data.lastHeartbeatTime = clock.getAsLong();\n-          int startToCloseTimeout = data.scheduledEvent.getStartToCloseTimeoutSeconds();\n-          int heartbeatTimeout = data.scheduledEvent.getHeartbeatTimeoutSeconds();\n+          long startToCloseTimeout =", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1d630ae3ab18fcab7f1821bcb2e1324f096083c", "chunk": "diff --git a/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java b/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\nindex 2884f221..254e4edf 100644\n--- a/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\n+++ b/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\n\n@@ -1649,9 +1656,10 @@ class TestWorkflowMutableStateImpl implements TestWorkflowMutableState {\n           }\n           ActivityTaskData data = activity.getData();\n           data.lastHeartbeatTime = clock.getAsLong();\n-          long startToCloseTimeout =\n-              Durations.toSeconds(data.scheduledEvent.getStartToCloseTimeout());\n-          long heartbeatTimeout = Durations.toSeconds(data.scheduledEvent.getHeartbeatTimeout());\n+          Duration startToCloseTimeout =\n+              ProtobufTimeUtils.ToJavaDuration(data.scheduledEvent.getStartToCloseTimeout());\n+          Duration heartbeatTimeout =\n+              ProtobufTimeUtils.ToJavaDuration(data.scheduledEvent.getHeartbeatTimeout());\n           updateHeartbeatTimer(\n               ctx, scheduledEventId, activity, startToCloseTimeout, heartbeatTimeout);\n         });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyMDcxMQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463120711", "bodyText": "Consider adding a method to ctx that returns Proto Timestamp.", "author": "mfateev", "createdAt": "2020-07-30T16:27:00Z", "path": "src/main/java/io/temporal/internal/testservice/StateMachines.java", "diffHunk": "@@ -1020,11 +1023,11 @@ private static void scheduleActivityTask(\n             .setWorkflowExecution(ctx.getExecution())\n             .setActivityId(d.getActivityId())\n             .setInput(d.getInput())\n-            .setHeartbeatTimeoutSeconds(d.getHeartbeatTimeoutSeconds())\n-            .setScheduleToCloseTimeoutSeconds(d.getScheduleToCloseTimeoutSeconds())\n-            .setStartToCloseTimeoutSeconds(d.getStartToCloseTimeoutSeconds())\n-            .setScheduledTimestamp(ctx.currentTimeInNanoseconds())\n-            .setScheduledTimestampThisAttempt(ctx.currentTimeInNanoseconds())\n+            .setHeartbeatTimeout(d.getHeartbeatTimeout())\n+            .setScheduleToCloseTimeout(d.getScheduleToCloseTimeout())\n+            .setStartToCloseTimeout(d.getStartToCloseTimeout())\n+            .setScheduledTime(Timestamps.fromNanos(ctx.currentTimeInNanoseconds()))", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0a2fd32a999afe99c3f11f868efdc82eaa9d9ba5", "chunk": "diff --git a/src/main/java/io/temporal/internal/testservice/StateMachines.java b/src/main/java/io/temporal/internal/testservice/StateMachines.java\nindex 51c261c5..d6026341 100644\n--- a/src/main/java/io/temporal/internal/testservice/StateMachines.java\n+++ b/src/main/java/io/temporal/internal/testservice/StateMachines.java\n\n@@ -1029,7 +1029,7 @@ class StateMachines {\n             .setScheduledTime(Timestamps.fromNanos(ctx.currentTimeInNanoseconds()))\n             .setCurrentAttemptScheduledTime(Timestamps.fromNanos(ctx.currentTimeInNanoseconds()))\n             .setHeader(d.getHeader())\n-            .setAttempt(0);\n+            .setAttempt(1);\n \n     TaskQueueId taskQueueId = new TaskQueueId(ctx.getNamespace(), d.getTaskQueue().getName());\n     ActivityTask activityTask = new ActivityTask(taskQueueId, taskResponse);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyMTE2OA==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463121168", "bodyText": "Consider adding a method to the store that returns Proto Timestamp.", "author": "mfateev", "createdAt": "2020-07-30T16:27:46Z", "path": "src/main/java/io/temporal/internal/testservice/StateMachines.java", "diffHunk": "@@ -1272,11 +1274,11 @@ private static void startActivityTask(\n     a.setAttempt(data.getAttempt());\n     // Setting timestamp here as the default logic will set it to the time when it is added to the\n     // history. But in the case of retry it happens only after an activity completion.\n-    long timestamp = TimeUnit.MILLISECONDS.toNanos(data.store.currentTimeMillis());\n+    Timestamp timestamp = Timestamps.fromMillis(data.store.currentTimeMillis());", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "335d08714ba886855568eca96947dbc19c3551de", "chunk": "diff --git a/src/main/java/io/temporal/internal/testservice/StateMachines.java b/src/main/java/io/temporal/internal/testservice/StateMachines.java\nindex 51c261c5..4e5585be 100644\n--- a/src/main/java/io/temporal/internal/testservice/StateMachines.java\n+++ b/src/main/java/io/temporal/internal/testservice/StateMachines.java\n\n@@ -1274,7 +1275,7 @@ class StateMachines {\n     a.setAttempt(data.getAttempt());\n     // Setting timestamp here as the default logic will set it to the time when it is added to the\n     // history. But in the case of retry it happens only after an activity completion.\n-    Timestamp timestamp = Timestamps.fromMillis(data.store.currentTimeMillis());\n+    Timestamp timestamp = data.store.currentTime();\n     HistoryEvent event =\n         HistoryEvent.newBuilder()\n             .setEventType(EventType.EVENT_TYPE_ACTIVITY_TASK_STARTED)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyMTkzMw==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463121933", "bodyText": "Consider changing the constant from seconds as well.", "author": "mfateev", "createdAt": "2020-07-30T16:29:06Z", "path": "src/main/java/io/temporal/internal/testservice/StateMachines.java", "diffHunk": "@@ -1859,17 +1862,19 @@ private static void failExternalCancellation(\n \n   // Mimics the default activity retry policy of a standard Temporal server.\n   static RetryPolicy ensureDefaultFieldsForActivityRetryPolicy(RetryPolicy originalPolicy) {\n-    int initialIntervalInSeconds =\n-        originalPolicy.getInitialIntervalInSeconds() == 0\n-            ? DEFAULT_ACTIVITY_RETRY_INITIAL_INTERVAL_SECONDS\n-            : originalPolicy.getInitialIntervalInSeconds();\n+    Duration initialInterval =\n+        Durations.compare(originalPolicy.getInitialInterval(), Durations.ZERO) == 0\n+            ? Durations.fromSeconds(DEFAULT_ACTIVITY_RETRY_INITIAL_INTERVAL_SECONDS)\n+            : originalPolicy.getInitialInterval();", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f8119be58e08887bf2dc903a70e136839063554", "chunk": "diff --git a/src/main/java/io/temporal/internal/testservice/StateMachines.java b/src/main/java/io/temporal/internal/testservice/StateMachines.java\nindex 51c261c5..b1e3af58 100644\n--- a/src/main/java/io/temporal/internal/testservice/StateMachines.java\n+++ b/src/main/java/io/temporal/internal/testservice/StateMachines.java\n\n@@ -1863,7 +1864,7 @@ class StateMachines {\n   // Mimics the default activity retry policy of a standard Temporal server.\n   static RetryPolicy ensureDefaultFieldsForActivityRetryPolicy(RetryPolicy originalPolicy) {\n     Duration initialInterval =\n-        Durations.compare(originalPolicy.getInitialInterval(), Durations.ZERO) == 0\n+        originalPolicy.getInitialInterval() == Durations.ZERO\n             ? Durations.fromSeconds(DEFAULT_ACTIVITY_RETRY_INITIAL_INTERVAL_SECONDS)\n             : originalPolicy.getInitialInterval();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyMjc5Nw==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463122797", "bodyText": "I'm curious if \"originalPolicy.getInitialInterval() == Durations.ZERO\" would work.", "author": "mfateev", "createdAt": "2020-07-30T16:30:28Z", "path": "src/main/java/io/temporal/internal/testservice/StateMachines.java", "diffHunk": "@@ -1859,17 +1862,19 @@ private static void failExternalCancellation(\n \n   // Mimics the default activity retry policy of a standard Temporal server.\n   static RetryPolicy ensureDefaultFieldsForActivityRetryPolicy(RetryPolicy originalPolicy) {\n-    int initialIntervalInSeconds =\n-        originalPolicy.getInitialIntervalInSeconds() == 0\n-            ? DEFAULT_ACTIVITY_RETRY_INITIAL_INTERVAL_SECONDS\n-            : originalPolicy.getInitialIntervalInSeconds();\n+    Duration initialInterval =\n+        Durations.compare(originalPolicy.getInitialInterval(), Durations.ZERO) == 0", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f8119be58e08887bf2dc903a70e136839063554", "chunk": "diff --git a/src/main/java/io/temporal/internal/testservice/StateMachines.java b/src/main/java/io/temporal/internal/testservice/StateMachines.java\nindex 51c261c5..b1e3af58 100644\n--- a/src/main/java/io/temporal/internal/testservice/StateMachines.java\n+++ b/src/main/java/io/temporal/internal/testservice/StateMachines.java\n\n@@ -1863,7 +1864,7 @@ class StateMachines {\n   // Mimics the default activity retry policy of a standard Temporal server.\n   static RetryPolicy ensureDefaultFieldsForActivityRetryPolicy(RetryPolicy originalPolicy) {\n     Duration initialInterval =\n-        Durations.compare(originalPolicy.getInitialInterval(), Durations.ZERO) == 0\n+        originalPolicy.getInitialInterval() == Durations.ZERO\n             ? Durations.fromSeconds(DEFAULT_ACTIVITY_RETRY_INITIAL_INTERVAL_SECONDS)\n             : originalPolicy.getInitialInterval();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyNTk3MQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463125971", "bodyText": "Let's migrate timer from seconds", "author": "mfateev", "createdAt": "2020-07-30T16:35:53Z", "path": "src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java", "diffHunk": "@@ -1059,7 +1068,8 @@ private void processStartTimer(\n     timer = StateMachines.newTimerStateMachine();\n     timers.put(timerId, timer);\n     timer.action(StateMachines.Action.START, ctx, a, workflowTaskCompletedId);\n-    ctx.addTimer(a.getStartToFireTimeoutSeconds(), () -> fireTimer(timerId), \"fire timer\");\n+    ctx.addTimer(", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1d630ae3ab18fcab7f1821bcb2e1324f096083c", "chunk": "diff --git a/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java b/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\nindex 2884f221..254e4edf 100644\n--- a/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\n+++ b/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\n\n@@ -1069,7 +1070,9 @@ class TestWorkflowMutableStateImpl implements TestWorkflowMutableState {\n     timers.put(timerId, timer);\n     timer.action(StateMachines.Action.START, ctx, a, workflowTaskCompletedId);\n     ctx.addTimer(\n-        Durations.toSeconds(a.getStartToFireTimeout()), () -> fireTimer(timerId), \"fire timer\");\n+        ProtobufTimeUtils.ToJavaDuration(a.getStartToFireTimeout()),\n+        () -> fireTimer(timerId),\n+        \"fire timer\");\n   }\n \n   private void fireTimer(String timerId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyODc3NA==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463128774", "bodyText": "the arguments should be converted to Duration", "author": "mfateev", "createdAt": "2020-07-30T16:40:35Z", "path": "src/test/java/io/temporal/testUtils/TestServiceUtils.java", "diffHunk": "@@ -59,8 +60,8 @@ public static void startWorkflowExecution(\n     request.setNamespace(namespace);\n     request.setWorkflowId(UUID.randomUUID().toString());\n     request.setTaskQueue(createNormalTaskQueue(taskqueueName));\n-    request.setWorkflowRunTimeoutSeconds(workflowRunTimeoutSeconds);\n-    request.setWorkflowTaskTimeoutSeconds(workflowTaskTimeoutSeconds);\n+    request.setWorkflowRunTimeout(Durations.fromSeconds(workflowRunTimeoutSeconds));", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f8119be58e08887bf2dc903a70e136839063554", "chunk": "diff --git a/src/test/java/io/temporal/testUtils/TestServiceUtils.java b/src/test/java/io/temporal/testUtils/TestServiceUtils.java\nindex 8bbe167e..6a9b551a 100644\n--- a/src/test/java/io/temporal/testUtils/TestServiceUtils.java\n+++ b/src/test/java/io/temporal/testUtils/TestServiceUtils.java\n\n@@ -44,15 +45,21 @@ public class TestServiceUtils {\n   public static void startWorkflowExecution(\n       String namespace, String taskqueueName, String workflowType, WorkflowServiceStubs service)\n       throws Exception {\n-    startWorkflowExecution(namespace, taskqueueName, workflowType, 100, 100, service);\n+    startWorkflowExecution(\n+        namespace,\n+        taskqueueName,\n+        workflowType,\n+        Duration.ofSeconds(100),\n+        Duration.ofSeconds(100),\n+        service);\n   }\n \n   public static void startWorkflowExecution(\n       String namespace,\n       String taskqueueName,\n       String workflowType,\n-      int workflowRunTimeoutSeconds,\n-      int workflowTaskTimeoutSeconds,\n+      Duration workflowRunTimeout,\n+      Duration workflowTaskTimeout,\n       WorkflowServiceStubs service)\n       throws Exception {\n     StartWorkflowExecutionRequest.Builder request = StartWorkflowExecutionRequest.newBuilder();\n"}}, {"oid": "ffd8bc7c0a4e591c032c850f1fe4e8fb4996bce6", "url": "https://github.com/temporalio/sdk-java/commit/ffd8bc7c0a4e591c032c850f1fe4e8fb4996bce6", "message": "fixes tests against one box server", "committedDate": "2020-07-30T17:19:13Z", "type": "commit"}, {"oid": "0a2fd32a999afe99c3f11f868efdc82eaa9d9ba5", "url": "https://github.com/temporalio/sdk-java/commit/0a2fd32a999afe99c3f11f868efdc82eaa9d9ba5", "message": "adjusts for attempt starting at 1", "committedDate": "2020-07-30T20:07:49Z", "type": "commit"}, {"oid": "0a2fd32a999afe99c3f11f868efdc82eaa9d9ba5", "url": "https://github.com/temporalio/sdk-java/commit/0a2fd32a999afe99c3f11f868efdc82eaa9d9ba5", "message": "adjusts for attempt starting at 1", "committedDate": "2020-07-30T20:07:49Z", "type": "forcePushed"}, {"oid": "a1d630ae3ab18fcab7f1821bcb2e1324f096083c", "url": "https://github.com/temporalio/sdk-java/commit/a1d630ae3ab18fcab7f1821bcb2e1324f096083c", "message": "replace seconds with durations", "committedDate": "2020-07-30T21:30:25Z", "type": "commit"}, {"oid": "2f8119be58e08887bf2dc903a70e136839063554", "url": "https://github.com/temporalio/sdk-java/commit/2f8119be58e08887bf2dc903a70e136839063554", "message": "more cleanup", "committedDate": "2020-07-30T21:45:46Z", "type": "commit"}, {"oid": "8a5b5c098b89aaddf271d38e609db7a7cad530f4", "url": "https://github.com/temporalio/sdk-java/commit/8a5b5c098b89aaddf271d38e609db7a7cad530f4", "message": "adds proto timestamp to ctx", "committedDate": "2020-07-30T22:30:16Z", "type": "commit"}, {"oid": "335d08714ba886855568eca96947dbc19c3551de", "url": "https://github.com/temporalio/sdk-java/commit/335d08714ba886855568eca96947dbc19c3551de", "message": "more changes", "committedDate": "2020-07-30T22:54:50Z", "type": "commit"}, {"oid": "999fe2bdcbbbdc0e826a5464635c25fdb4a7f311", "url": "https://github.com/temporalio/sdk-java/commit/999fe2bdcbbbdc0e826a5464635c25fdb4a7f311", "message": "final cleanup", "committedDate": "2020-07-30T23:03:53Z", "type": "commit"}, {"oid": "d868b2384f9f5a9058ec78bab0d8edb5a9b5fcbc", "url": "https://github.com/temporalio/sdk-java/commit/d868b2384f9f5a9058ec78bab0d8edb5a9b5fcbc", "message": "rename variable", "committedDate": "2020-07-30T23:11:37Z", "type": "commit"}, {"oid": "5b8259e0348bd9c6f8782b23ab713c94cc29dab3", "url": "https://github.com/temporalio/sdk-java/commit/5b8259e0348bd9c6f8782b23ab713c94cc29dab3", "message": "protects against overflow in protobuf library", "committedDate": "2020-07-30T23:13:27Z", "type": "commit"}, {"oid": "70098edc349d8a38ff2c4ce869403b6adaf7adc4", "url": "https://github.com/temporalio/sdk-java/commit/70098edc349d8a38ff2c4ce869403b6adaf7adc4", "message": "more protection against overflow", "committedDate": "2020-07-30T23:18:36Z", "type": "commit"}, {"oid": "4b8f5f9e37db771619921df334602c470b12ffb4", "url": "https://github.com/temporalio/sdk-java/commit/4b8f5f9e37db771619921df334602c470b12ffb4", "message": "nit code cleanup", "committedDate": "2020-07-30T23:22:53Z", "type": "commit"}, {"oid": "231e07ff69b9fda6a738362e4fe6f82f45bda13d", "url": "https://github.com/temporalio/sdk-java/commit/231e07ff69b9fda6a738362e4fe6f82f45bda13d", "message": "gets rid of a few places where toSeconds is used", "committedDate": "2020-07-30T23:29:02Z", "type": "commit"}, {"oid": "5c58a3bdea51db827c1297108d0bbe9fa6b7bf25", "url": "https://github.com/temporalio/sdk-java/commit/5c58a3bdea51db827c1297108d0bbe9fa6b7bf25", "message": "formatting", "committedDate": "2020-07-30T23:29:26Z", "type": "commit"}, {"oid": "3715946b03fcbde2ac6806026e1336b803549a35", "url": "https://github.com/temporalio/sdk-java/commit/3715946b03fcbde2ac6806026e1336b803549a35", "message": "fix static overflow", "committedDate": "2020-07-30T23:30:54Z", "type": "commit"}, {"oid": "8d5de8f82b739bca294ec5e5b76bb95b05b5be08", "url": "https://github.com/temporalio/sdk-java/commit/8d5de8f82b739bca294ec5e5b76bb95b05b5be08", "message": "fixes two places where we are reading a millisecond value as a second", "committedDate": "2020-07-30T23:43:42Z", "type": "commit"}, {"oid": "216204ddebe829b00df3fa88d870a48f3b2bc88d", "url": "https://github.com/temporalio/sdk-java/commit/216204ddebe829b00df3fa88d870a48f3b2bc88d", "message": "fixes situation where we are casting to seconds", "committedDate": "2020-07-30T23:46:51Z", "type": "commit"}, {"oid": "87e0c0b666cf93c6896a767546ffabfedddd7618", "url": "https://github.com/temporalio/sdk-java/commit/87e0c0b666cf93c6896a767546ffabfedddd7618", "message": "protobuf cannot directly compare with ZERO value", "committedDate": "2020-07-31T00:00:11Z", "type": "commit"}]}