{"pr_number": 260, "pr_title": "Add getLastFailure method to Workflow API", "pr_createdAt": "2020-11-18T22:03:29Z", "pr_url": "https://github.com/temporalio/sdk-java/pull/260", "timeline": [{"oid": "0ac2761fce92e6738506202fe77a9f6e7fbd7064", "url": "https://github.com/temporalio/sdk-java/commit/0ac2761fce92e6738506202fe77a9f6e7fbd7064", "message": "Seems to be working. Cleanup Next.", "committedDate": "2020-11-18T19:00:51Z", "type": "commit"}, {"oid": "809a8260fba7be62eea014beb9ef770064b303b7", "url": "https://github.com/temporalio/sdk-java/commit/809a8260fba7be62eea014beb9ef770064b303b7", "message": "Attach failure info properly now", "committedDate": "2020-11-18T20:05:20Z", "type": "commit"}, {"oid": "4839308a6faf241d4705c135f749d5dc64316d40", "url": "https://github.com/temporalio/sdk-java/commit/4839308a6faf241d4705c135f749d5dc64316d40", "message": "Turns out I do need to pass this in", "committedDate": "2020-11-18T21:59:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1NTQxNw==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r526455417", "bodyText": "Would love it if someone could fill me in here. While playing around with samples, I was able to use a @every 2s cron designation, but not here. I assume because the in-memory server mock is using a library that doesn't support that.\nAlso there appears to be some time-travel stuff going on to speed this up, but I couldn't find exactly where that is. Would appreciate a pointer for learning purposes.", "author": "Sushisource", "createdAt": "2020-11-18T22:08:26Z", "path": "temporal-sdk/src/test/java/io/temporal/workflow/WorkflowTest.java", "diffHunk": "@@ -4264,6 +4267,10 @@ public String execute(String testName) {\n \n   @Test\n   public void testWorkflowWithCronSchedule() {\n+    // REVIEW: Min interval can be less than 1min when running against a real server - what explains\n+    // that discrepancy?\n+    //   Why doesn't \"@every 1s\" work here? Different cron parsing libs?", "originalCommit": "4839308a6faf241d4705c135f749d5dc64316d40", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0NzQxMQ==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r528047411", "bodyText": "We need to update the documentation. The discrepancy is because the service uses https://github.com/robfig/cron and the java unit test service uses https://github.com/jmrozanec/cron-utils.\nThe time skipping is the major feature of the unit testing framework that supports unit testing long running workflows.", "author": "mfateev", "createdAt": "2020-11-21T01:21:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1NTQxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIzNzcwNw==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r528237707", "bodyText": "Thanks for the answer! Can you point me at info/code on the time skipping stuff?", "author": "Sushisource", "createdAt": "2020-11-21T20:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1NTQxNw=="}], "type": "inlineReview", "revised_code": {"commit": "7b749bcffefdeb253964bbfff61fe86bd25ef783", "chunk": "diff --git a/temporal-sdk/src/test/java/io/temporal/workflow/WorkflowTest.java b/temporal-sdk/src/test/java/io/temporal/workflow/WorkflowTest.java\nindex 9607a96f..eeba502a 100644\n--- a/temporal-sdk/src/test/java/io/temporal/workflow/WorkflowTest.java\n+++ b/temporal-sdk/src/test/java/io/temporal/workflow/WorkflowTest.java\n\n@@ -4267,10 +4266,6 @@ public class WorkflowTest {\n \n   @Test\n   public void testWorkflowWithCronSchedule() {\n-    // REVIEW: Min interval can be less than 1min when running against a real server - what explains\n-    // that discrepancy?\n-    //   Why doesn't \"@every 1s\" work here? Different cron parsing libs?\n-\n     // Min interval in cron is 1min. So we will not test it against real service in Jenkins.\n     // Feel free to uncomment the line below and test in local.\n     Assume.assumeFalse(\"skipping as test will timeout\", useExternalService);\n"}}, {"oid": "e525ef605cc9e7c00ec919e1b58f0b92f6e16b6f", "url": "https://github.com/temporalio/sdk-java/commit/e525ef605cc9e7c00ec919e1b58f0b92f6e16b6f", "message": "Merge branch 'master' into sj-feat-257", "committedDate": "2020-11-20T01:42:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MTkwMQ==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r528041901", "bodyText": "I believe both setLastCompletionResult and setFailure should b called only if d has the corresponding value.", "author": "mfateev", "createdAt": "2020-11-21T00:51:35Z", "path": "temporal-sdk/src/main/java/io/temporal/internal/testservice/StateMachines.java", "diffHunk": "@@ -914,6 +920,7 @@ private static void continueAsNewWorkflow(\n     a.setWorkflowTaskCompletedEventId(workflowTaskCompletedEventId);\n     a.setBackoffStartInterval(d.getBackoffStartInterval());\n     a.setLastCompletionResult(d.getLastCompletionResult());\n+    a.setFailure(d.getFailure());", "originalCommit": "e525ef605cc9e7c00ec919e1b58f0b92f6e16b6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2179ff56c3acb53f315bb1812b16e8c3a9d42366", "chunk": "diff --git a/temporal-sdk/src/main/java/io/temporal/internal/testservice/StateMachines.java b/temporal-sdk/src/main/java/io/temporal/internal/testservice/StateMachines.java\nindex 3f2b87a7..0300ff74 100644\n--- a/temporal-sdk/src/main/java/io/temporal/internal/testservice/StateMachines.java\n+++ b/temporal-sdk/src/main/java/io/temporal/internal/testservice/StateMachines.java\n\n@@ -919,8 +919,12 @@ class StateMachines {\n     }\n     a.setWorkflowTaskCompletedEventId(workflowTaskCompletedEventId);\n     a.setBackoffStartInterval(d.getBackoffStartInterval());\n-    a.setLastCompletionResult(d.getLastCompletionResult());\n-    a.setFailure(d.getFailure());\n+    if (d.hasLastCompletionResult()) {\n+      a.setLastCompletionResult(d.getLastCompletionResult());\n+    }\n+    if (d.hasFailure()) {\n+      a.setFailure(d.getFailure());\n+    }\n     a.setNewExecutionRunId(UUID.randomUUID().toString());\n     HistoryEvent event =\n         HistoryEvent.newBuilder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MjUyMA==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r528042520", "bodyText": "I would put it after the lastCompletionResult here and down in the WorkflowData constructor.", "author": "mfateev", "createdAt": "2020-11-21T00:54:20Z", "path": "temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java", "diffHunk": "@@ -183,7 +171,8 @@\n       OptionalLong parentChildInitiatedEventId,\n       Optional<String> continuedExecutionRunId,\n       TestWorkflowService service,\n-      TestWorkflowStore store) {\n+      TestWorkflowStore store,\n+      Failure lastFailure) {", "originalCommit": "e525ef605cc9e7c00ec919e1b58f0b92f6e16b6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0NTE4Mw==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r528045183", "bodyText": "And make it Optional", "author": "mfateev", "createdAt": "2020-11-21T01:08:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MjUyMA=="}], "type": "inlineReview", "revised_code": {"commit": "2179ff56c3acb53f315bb1812b16e8c3a9d42366", "chunk": "diff --git a/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java b/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\nindex cc52baef..201e55f5 100644\n--- a/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\n+++ b/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\n\n@@ -167,12 +167,12 @@ class TestWorkflowMutableStateImpl implements TestWorkflowMutableState {\n       Optional<TestServiceRetryState> retryState,\n       Duration backoffStartInterval,\n       Payloads lastCompletionResult,\n+      Optional<Failure> lastFailure,\n       Optional<TestWorkflowMutableState> parent,\n       OptionalLong parentChildInitiatedEventId,\n       Optional<String> continuedExecutionRunId,\n       TestWorkflowService service,\n-      TestWorkflowStore store,\n-      Failure lastFailure) {\n+      TestWorkflowStore store) {\n     startRequest = overrideStartWorkflowExecutionRequest(startRequest);\n     this.startRequest = startRequest;\n     this.parent = parent;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0NDA2MA==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r528044060", "bodyText": "I think a simple if condition at line 267 would be much more readable.", "author": "mfateev", "createdAt": "2020-11-21T01:02:26Z", "path": "temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowService.java", "diffHunk": "@@ -276,7 +277,8 @@ StartWorkflowExecutionResponse startWorkflowExecutionImpl(\n           parent,\n           parentChildInitiatedEventId,\n           signalWithStartSignal,\n-          workflowId);\n+          workflowId,\n+          retryState.flatMap(TestServiceRetryState::getLastFailure).orElse(null));", "originalCommit": "e525ef605cc9e7c00ec919e1b58f0b92f6e16b6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2179ff56c3acb53f315bb1812b16e8c3a9d42366", "chunk": "diff --git a/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowService.java b/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowService.java\nindex b655899d..14dc21e4 100644\n--- a/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowService.java\n+++ b/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowService.java\n\n@@ -274,11 +278,11 @@ public final class TestWorkflowService extends WorkflowServiceGrpc.WorkflowServi\n           retryState,\n           backoffStartInterval,\n           null,\n+          lastFailure,\n           parent,\n           parentChildInitiatedEventId,\n           signalWithStartSignal,\n-          workflowId,\n-          retryState.flatMap(TestServiceRetryState::getLastFailure).orElse(null));\n+          workflowId);\n     } finally {\n       lock.unlock();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0NTAyMg==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r528045022", "bodyText": "Shouldn't this be Optional?", "author": "mfateev", "createdAt": "2020-11-21T01:07:27Z", "path": "temporal-sdk/src/main/java/io/temporal/internal/testservice/StateMachines.java", "diffHunk": "@@ -199,20 +199,23 @@\n     String originalExecutionRunId;\n     Optional<String> continuedExecutionRunId;\n     Functions.Proc runTimerCancellationHandle;\n+    Failure lastFailure;\n \n     WorkflowData(\n         Optional<TestServiceRetryState> retryState,\n         Duration backoffStartInterval,\n         String cronSchedule,\n         Payloads lastCompletionResult,\n         String originalExecutionRunId,\n-        Optional<String> continuedExecutionRunId) {\n+        Optional<String> continuedExecutionRunId,\n+        Failure lastFailure) {", "originalCommit": "e525ef605cc9e7c00ec919e1b58f0b92f6e16b6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0OTc0Nw==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r528049747", "bodyText": "Could be, for sure. Java is killing me a bit with the whole Optional<T> actually has three states problem, where it can still be null. IntelliJ has a lint that whines at you when you use it as a parameter, which I've always found a bit odd, but there are reasons: https://stackoverflow.com/questions/31922866/why-should-java-8s-optional-not-be-used-in-arguments\nI don't really have much of a preference. Since we're already using them as arguments here though, I should probably stay consistent. Curious to hear your thoughts though @mfateev", "author": "Sushisource", "createdAt": "2020-11-21T01:36:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0NTAyMg=="}], "type": "inlineReview", "revised_code": {"commit": "2179ff56c3acb53f315bb1812b16e8c3a9d42366", "chunk": "diff --git a/temporal-sdk/src/main/java/io/temporal/internal/testservice/StateMachines.java b/temporal-sdk/src/main/java/io/temporal/internal/testservice/StateMachines.java\nindex 3f2b87a7..0300ff74 100644\n--- a/temporal-sdk/src/main/java/io/temporal/internal/testservice/StateMachines.java\n+++ b/temporal-sdk/src/main/java/io/temporal/internal/testservice/StateMachines.java\n\n@@ -196,19 +196,19 @@ class StateMachines {\n     Duration backoffStartInterval;\n     String cronSchedule;\n     Payloads lastCompletionResult;\n+    Optional<Failure> lastFailure;\n     String originalExecutionRunId;\n     Optional<String> continuedExecutionRunId;\n     Functions.Proc runTimerCancellationHandle;\n-    Failure lastFailure;\n \n     WorkflowData(\n         Optional<TestServiceRetryState> retryState,\n         Duration backoffStartInterval,\n         String cronSchedule,\n         Payloads lastCompletionResult,\n+        Optional<Failure> lastFailure,\n         String originalExecutionRunId,\n-        Optional<String> continuedExecutionRunId,\n-        Failure lastFailure) {\n+        Optional<String> continuedExecutionRunId) {\n       this.retryState = retryState;\n       this.backoffStartInterval = backoffStartInterval;\n       this.cronSchedule = cronSchedule;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0NTM2Ng==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r528045366", "bodyText": "gRPC doesn't support nulls.\nSo d.getFailure never returns null and Optional.of of \"d\" that has d.hasFailure==false will be an optional of an empty Failure structure.", "author": "mfateev", "createdAt": "2020-11-21T01:09:31Z", "path": "temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java", "diffHunk": "@@ -1191,7 +1181,13 @@ private void processFailWorkflowExecution(\n     }\n \n     if (!Strings.isNullOrEmpty(data.cronSchedule)) {\n-      startNewCronRun(ctx, workflowTaskCompletedId, identity, data, data.lastCompletionResult);\n+      startNewCronRun(\n+          ctx,\n+          workflowTaskCompletedId,\n+          identity,\n+          data,\n+          data.lastCompletionResult,\n+          Optional.of(d.getFailure()));", "originalCommit": "e525ef605cc9e7c00ec919e1b58f0b92f6e16b6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b749bcffefdeb253964bbfff61fe86bd25ef783", "chunk": "diff --git a/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java b/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\nindex cc52baef..176b7d30 100644\n--- a/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\n+++ b/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\n\n@@ -1182,12 +1182,7 @@ class TestWorkflowMutableStateImpl implements TestWorkflowMutableState {\n \n     if (!Strings.isNullOrEmpty(data.cronSchedule)) {\n       startNewCronRun(\n-          ctx,\n-          workflowTaskCompletedId,\n-          identity,\n-          data,\n-          data.lastCompletionResult,\n-          Optional.of(d.getFailure()));\n+          ctx, workflowTaskCompletedId, identity, data, data.lastCompletionResult, d.getFailure());\n       return;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0NjA5NQ==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r528046095", "bodyText": "Change the result type to Optional as neither Failure nor Payload are exposed to the workflow code. Use failureToException method to convert.", "author": "mfateev", "createdAt": "2020-11-21T01:13:47Z", "path": "temporal-sdk/src/main/java/io/temporal/workflow/Workflow.java", "diffHunk": "@@ -1181,6 +1182,18 @@ public static Logger getLogger(String name) {\n     return WorkflowInternal.getLastCompletionResult(resultClass, resultClass);\n   }\n \n+  /**\n+   * Extract the latest failure from some previous run for this cron workflow. This is used in\n+   * combination with cron schedule. A workflow can be started with an optional cron schedule. If\n+   * any previous workflow has failed, this function returns that failure. If no previous workflows\n+   * have failed, an empty optional is returned.\n+   *\n+   * @return The last {@link Failure} that occurred in this workflow, if there has been one.\n+   */\n+  public static Optional<Failure> getLastFailure() {", "originalCommit": "e525ef605cc9e7c00ec919e1b58f0b92f6e16b6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1Nzc1OA==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r528457758", "bodyText": "Changed. Should we change the method name as well? Pertains to my question here:temporalio/sdk-go#293 (comment)", "author": "Sushisource", "createdAt": "2020-11-23T03:36:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0NjA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7b749bcffefdeb253964bbfff61fe86bd25ef783", "chunk": "diff --git a/temporal-sdk/src/main/java/io/temporal/workflow/Workflow.java b/temporal-sdk/src/main/java/io/temporal/workflow/Workflow.java\nindex 3d63e1d3..6f3950f5 100644\n--- a/temporal-sdk/src/main/java/io/temporal/workflow/Workflow.java\n+++ b/temporal-sdk/src/main/java/io/temporal/workflow/Workflow.java\n\n@@ -1188,10 +1189,11 @@ public final class Workflow {\n    * any previous workflow has failed, this function returns that failure. If no previous workflows\n    * have failed, an empty optional is returned.\n    *\n-   * @return The last {@link Failure} that occurred in this workflow, if there has been one.\n+   * @return The last {@link Exception} that occurred in this workflow, if there has been one.\n    */\n-  public static Optional<Failure> getLastFailure() {\n-    return WorkflowInternal.getLastFailure();\n+  public static Optional<Exception> getLastFailure() {\n+    return WorkflowInternal.getLastFailure()\n+        .map(f -> FailureConverter.failureToException(f, DataConverter.getDefaultInstance()));\n   }\n \n   /**\n"}}, {"oid": "2179ff56c3acb53f315bb1812b16e8c3a9d42366", "url": "https://github.com/temporalio/sdk-java/commit/2179ff56c3acb53f315bb1812b16e8c3a9d42366", "message": "More optional typing", "committedDate": "2020-11-21T19:30:14Z", "type": "commit"}, {"oid": "7b749bcffefdeb253964bbfff61fe86bd25ef783", "url": "https://github.com/temporalio/sdk-java/commit/7b749bcffefdeb253964bbfff61fe86bd25ef783", "message": "Return exception rather than failure - fixup other review feedback", "committedDate": "2020-11-23T03:33:51Z", "type": "commit"}, {"oid": "cedec75e13ed7d6a5fa7eb1600221a0c0ead9ab9", "url": "https://github.com/temporalio/sdk-java/commit/cedec75e13ed7d6a5fa7eb1600221a0c0ead9ab9", "message": "Merge branch 'master' into sj-feat-257", "committedDate": "2020-11-24T17:09:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MzU5Nw==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r530593597", "bodyText": "We shouldn't allow null values for Optional fields. They should be either Optiona.empty or populated.", "author": "mfateev", "createdAt": "2020-11-25T19:16:20Z", "path": "temporal-sdk/src/main/java/io/temporal/internal/testservice/StateMachines.java", "diffHunk": "@@ -830,6 +833,9 @@ private static void startWorkflow(\n     if (data.lastCompletionResult != null) {\n       a.setLastCompletionResult(data.lastCompletionResult);\n     }\n+    if (data.lastFailure != null && data.lastFailure.isPresent()) {", "originalCommit": "cedec75e13ed7d6a5fa7eb1600221a0c0ead9ab9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwMDgwNg==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r530600806", "bodyText": "Maybe I'm still stuck in Rust land but, I worry about the idea that we can only rely on our own consistency to ensure Optionals are non-null. The null check is cheap and not too noisy, and allows us to consider the method by itself without ensuring data is always well constructed.\nSo, I agree with the theory, but in practice I like to check because it decreases mental load. Thoughts?", "author": "Sushisource", "createdAt": "2020-11-25T19:31:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MzU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwMzM0Nw==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r530603347", "bodyText": "Java has nice mechanism called NullPointerException to report such bugs. So adding repetitive checks all other the code for null is not serving any purpose besides adding clutter. In this particular case if  you want to add the check do in the constructor of Data.\nthis.lastFailure = Objects.requireNotNull(lastFailure);\nI would also change all Data fields that are not expected to be changed to final.", "author": "mfateev", "createdAt": "2020-11-25T19:37:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MzU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYyOTY2OA==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r530629668", "bodyText": "Ah, that's a nice way to handle it. Thanks.", "author": "Sushisource", "createdAt": "2020-11-25T20:34:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MzU5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1e98c1e73d39636404c9ba7002e6426908bfc16b", "chunk": "diff --git a/temporal-sdk/src/main/java/io/temporal/internal/testservice/StateMachines.java b/temporal-sdk/src/main/java/io/temporal/internal/testservice/StateMachines.java\nindex 0300ff74..823c1f4e 100644\n--- a/temporal-sdk/src/main/java/io/temporal/internal/testservice/StateMachines.java\n+++ b/temporal-sdk/src/main/java/io/temporal/internal/testservice/StateMachines.java\n\n@@ -833,7 +834,7 @@ class StateMachines {\n     if (data.lastCompletionResult != null) {\n       a.setLastCompletionResult(data.lastCompletionResult);\n     }\n-    if (data.lastFailure != null && data.lastFailure.isPresent()) {\n+    if (data.lastFailure.isPresent()) {\n       a.setContinuedFailure(data.lastFailure.get());\n     }\n     if (request.hasMemo()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5NDAzMA==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r530594030", "bodyText": "Revert. Change your IDE settings to not use *.", "author": "mfateev", "createdAt": "2020-11-25T19:17:15Z", "path": "temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java", "diffHunk": "@@ -37,20 +37,7 @@\n import com.google.protobuf.util.Timestamps;\n import io.grpc.Status;\n import io.grpc.StatusRuntimeException;\n-import io.temporal.api.command.v1.CancelTimerCommandAttributes;\n-import io.temporal.api.command.v1.CancelWorkflowExecutionCommandAttributes;\n-import io.temporal.api.command.v1.Command;\n-import io.temporal.api.command.v1.CompleteWorkflowExecutionCommandAttributes;\n-import io.temporal.api.command.v1.ContinueAsNewWorkflowExecutionCommandAttributes;\n-import io.temporal.api.command.v1.FailWorkflowExecutionCommandAttributes;\n-import io.temporal.api.command.v1.RecordMarkerCommandAttributes;\n-import io.temporal.api.command.v1.RequestCancelActivityTaskCommandAttributes;\n-import io.temporal.api.command.v1.RequestCancelExternalWorkflowExecutionCommandAttributes;\n-import io.temporal.api.command.v1.ScheduleActivityTaskCommandAttributes;\n-import io.temporal.api.command.v1.SignalExternalWorkflowExecutionCommandAttributes;\n-import io.temporal.api.command.v1.StartChildWorkflowExecutionCommandAttributes;\n-import io.temporal.api.command.v1.StartTimerCommandAttributes;\n-import io.temporal.api.command.v1.UpsertWorkflowSearchAttributesCommandAttributes;\n+import io.temporal.api.command.v1.*;", "originalCommit": "cedec75e13ed7d6a5fa7eb1600221a0c0ead9ab9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e98c1e73d39636404c9ba7002e6426908bfc16b", "chunk": "diff --git a/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java b/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\nindex b3fd0ec5..544eb89a 100644\n--- a/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\n+++ b/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\n\n@@ -37,7 +37,20 @@ import com.google.protobuf.util.Durations;\n import com.google.protobuf.util.Timestamps;\n import io.grpc.Status;\n import io.grpc.StatusRuntimeException;\n-import io.temporal.api.command.v1.*;\n+import io.temporal.api.command.v1.CancelTimerCommandAttributes;\n+import io.temporal.api.command.v1.CancelWorkflowExecutionCommandAttributes;\n+import io.temporal.api.command.v1.Command;\n+import io.temporal.api.command.v1.CompleteWorkflowExecutionCommandAttributes;\n+import io.temporal.api.command.v1.ContinueAsNewWorkflowExecutionCommandAttributes;\n+import io.temporal.api.command.v1.FailWorkflowExecutionCommandAttributes;\n+import io.temporal.api.command.v1.RecordMarkerCommandAttributes;\n+import io.temporal.api.command.v1.RequestCancelActivityTaskCommandAttributes;\n+import io.temporal.api.command.v1.RequestCancelExternalWorkflowExecutionCommandAttributes;\n+import io.temporal.api.command.v1.ScheduleActivityTaskCommandAttributes;\n+import io.temporal.api.command.v1.SignalExternalWorkflowExecutionCommandAttributes;\n+import io.temporal.api.command.v1.StartChildWorkflowExecutionCommandAttributes;\n+import io.temporal.api.command.v1.StartTimerCommandAttributes;\n+import io.temporal.api.command.v1.UpsertWorkflowSearchAttributesCommandAttributes;\n import io.temporal.api.common.v1.Payloads;\n import io.temporal.api.common.v1.WorkflowExecution;\n import io.temporal.api.enums.v1.EventType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5NTM0OQ==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r530595349", "bodyText": "I would move empty() initialization to else block:\nOptional<Failure> lastFailure;\nif (...) {\n   lastFailure = ...\n} else {\n   lastFailure = Optional.empty();\n}", "author": "mfateev", "createdAt": "2020-11-25T19:20:04Z", "path": "temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowService.java", "diffHunk": "@@ -259,10 +260,14 @@ StartWorkflowExecutionResponse startWorkflowExecutionImpl(\n         }\n       }\n       Optional<TestServiceRetryState> retryState;\n+      Optional<Failure> lastFailure = Optional.empty();", "originalCommit": "cedec75e13ed7d6a5fa7eb1600221a0c0ead9ab9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzNzM4Mw==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r530637383", "bodyText": "This would require us to set it to empty in two branching paths to ensure it's non-null, thus more verbose. Any particular reason not to leave it this way?", "author": "Sushisource", "createdAt": "2020-11-25T20:53:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5NTM0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1e98c1e73d39636404c9ba7002e6426908bfc16b", "chunk": "diff --git a/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowService.java b/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowService.java\nindex 25e43255..e6bb159b 100644\n--- a/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowService.java\n+++ b/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowService.java\n\n@@ -266,7 +266,7 @@ public final class TestWorkflowService extends WorkflowServiceGrpc.WorkflowServi\n             ProtobufTimeUtils.toJavaDuration(startRequest.getWorkflowExecutionTimeout());\n         retryState = newRetryStateLocked(startRequest.getRetryPolicy(), expirationInterval);\n         if (retryState.isPresent()) {\n-          lastFailure = retryState.get().getLastFailure();\n+          lastFailure = retryState.get().getPreviousRunFailure();\n         }\n       } else {\n         retryState = Optional.empty();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5NTgxMA==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r530595810", "bodyText": "It looks like we use both Optional and null for lastFailure inside the testservice. Let's make this consistent.", "author": "mfateev", "createdAt": "2020-11-25T19:21:05Z", "path": "temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java", "diffHunk": "@@ -1307,8 +1299,11 @@ private void startNewCronRun(\n             .setTaskQueue(startRequest.getTaskQueue())\n             .setBackoffStartInterval(ProtobufTimeUtils.toProtoDuration(backoffInterval))\n             .setRetryPolicy(startRequest.getRetryPolicy())\n-            .setLastCompletionResult(lastCompletionResult)\n-            .build();\n+            .setLastCompletionResult(lastCompletionResult);\n+    if (lastFailure != null) {", "originalCommit": "cedec75e13ed7d6a5fa7eb1600221a0c0ead9ab9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e98c1e73d39636404c9ba7002e6426908bfc16b", "chunk": "diff --git a/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java b/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\nindex b3fd0ec5..544eb89a 100644\n--- a/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\n+++ b/temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java\n\n@@ -1300,8 +1321,8 @@ class TestWorkflowMutableStateImpl implements TestWorkflowMutableState {\n             .setBackoffStartInterval(ProtobufTimeUtils.toProtoDuration(backoffInterval))\n             .setRetryPolicy(startRequest.getRetryPolicy())\n             .setLastCompletionResult(lastCompletionResult);\n-    if (lastFailure != null) {\n-      builder.setFailure(lastFailure);\n+    if (lastFailure.isPresent()) {\n+      builder.setFailure(lastFailure.get());\n     }\n     ContinueAsNewWorkflowExecutionCommandAttributes continueAsNewAttr = builder.build();\n     workflow.action(Action.CONTINUE_AS_NEW, ctx, continueAsNewAttr, workflowTaskCompletedId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5NzEyMw==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r530597123", "bodyText": "I would move this logic into WorkflowInternal. The idea is that Workflow is just a public layer over internal stuff without any business logic.", "author": "mfateev", "createdAt": "2020-11-25T19:24:02Z", "path": "temporal-sdk/src/main/java/io/temporal/workflow/Workflow.java", "diffHunk": "@@ -1181,6 +1183,19 @@ public static Logger getLogger(String name) {\n     return WorkflowInternal.getLastCompletionResult(resultClass, resultClass);\n   }\n \n+  /**\n+   * Extract the latest failure from some previous run for this cron workflow. This is used in\n+   * combination with cron schedule. A workflow can be started with an optional cron schedule. If\n+   * any previous workflow has failed, this function returns that failure. If no previous workflows\n+   * have failed, an empty optional is returned.\n+   *\n+   * @return The last {@link Exception} that occurred in this workflow, if there has been one.\n+   */\n+  public static Optional<Exception> getLastFailure() {\n+    return WorkflowInternal.getLastFailure()\n+        .map(f -> FailureConverter.failureToException(f, DataConverter.getDefaultInstance()));", "originalCommit": "cedec75e13ed7d6a5fa7eb1600221a0c0ead9ab9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e98c1e73d39636404c9ba7002e6426908bfc16b", "chunk": "diff --git a/temporal-sdk/src/main/java/io/temporal/workflow/Workflow.java b/temporal-sdk/src/main/java/io/temporal/workflow/Workflow.java\nindex 6f3950f5..a7b0e9e1 100644\n--- a/temporal-sdk/src/main/java/io/temporal/workflow/Workflow.java\n+++ b/temporal-sdk/src/main/java/io/temporal/workflow/Workflow.java\n\n@@ -1184,16 +1182,15 @@ public final class Workflow {\n   }\n \n   /**\n-   * Extract the latest failure from some previous run for this cron workflow. This is used in\n-   * combination with cron schedule. A workflow can be started with an optional cron schedule. If\n-   * any previous workflow has failed, this function returns that failure. If no previous workflows\n-   * have failed, an empty optional is returned.\n+   * Extract the latest failure from some previous of this workflow. If any previous run of this\n+   * workflow has failed, this function returns that failure. If no previous runs have failed, an\n+   * empty optional is returned. The run you are calling this from may have been created as a retry\n+   * of the previous failed run or as a next cron invocation for cron workflows.\n    *\n    * @return The last {@link Exception} that occurred in this workflow, if there has been one.\n    */\n-  public static Optional<Exception> getLastFailure() {\n-    return WorkflowInternal.getLastFailure()\n-        .map(f -> FailureConverter.failureToException(f, DataConverter.getDefaultInstance()));\n+  public static Optional<Exception> getPreviousRunFailure() {\n+    return WorkflowInternal.getPreviousRunFailure();\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwNTU4OQ==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r530605589", "bodyText": "Let's rename to the getPreviousRunFailure. It is not really clear what this failure is about just by the name.", "author": "mfateev", "createdAt": "2020-11-25T19:42:00Z", "path": "temporal-sdk/src/main/java/io/temporal/workflow/Workflow.java", "diffHunk": "@@ -1181,6 +1183,19 @@ public static Logger getLogger(String name) {\n     return WorkflowInternal.getLastCompletionResult(resultClass, resultClass);\n   }\n \n+  /**\n+   * Extract the latest failure from some previous run for this cron workflow. This is used in\n+   * combination with cron schedule. A workflow can be started with an optional cron schedule. If\n+   * any previous workflow has failed, this function returns that failure. If no previous workflows\n+   * have failed, an empty optional is returned.\n+   *\n+   * @return The last {@link Exception} that occurred in this workflow, if there has been one.\n+   */\n+  public static Optional<Exception> getLastFailure() {", "originalCommit": "cedec75e13ed7d6a5fa7eb1600221a0c0ead9ab9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e98c1e73d39636404c9ba7002e6426908bfc16b", "chunk": "diff --git a/temporal-sdk/src/main/java/io/temporal/workflow/Workflow.java b/temporal-sdk/src/main/java/io/temporal/workflow/Workflow.java\nindex 6f3950f5..a7b0e9e1 100644\n--- a/temporal-sdk/src/main/java/io/temporal/workflow/Workflow.java\n+++ b/temporal-sdk/src/main/java/io/temporal/workflow/Workflow.java\n\n@@ -1184,16 +1182,15 @@ public final class Workflow {\n   }\n \n   /**\n-   * Extract the latest failure from some previous run for this cron workflow. This is used in\n-   * combination with cron schedule. A workflow can be started with an optional cron schedule. If\n-   * any previous workflow has failed, this function returns that failure. If no previous workflows\n-   * have failed, an empty optional is returned.\n+   * Extract the latest failure from some previous of this workflow. If any previous run of this\n+   * workflow has failed, this function returns that failure. If no previous runs have failed, an\n+   * empty optional is returned. The run you are calling this from may have been created as a retry\n+   * of the previous failed run or as a next cron invocation for cron workflows.\n    *\n    * @return The last {@link Exception} that occurred in this workflow, if there has been one.\n    */\n-  public static Optional<Exception> getLastFailure() {\n-    return WorkflowInternal.getLastFailure()\n-        .map(f -> FailureConverter.failureToException(f, DataConverter.getDefaultInstance()));\n+  public static Optional<Exception> getPreviousRunFailure() {\n+    return WorkflowInternal.getPreviousRunFailure();\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwNzE3Mg==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r530607172", "bodyText": "This doesn't apply to cron workflows only. It applies to any workflow retries (at least this is my understanding that is worth testing). So I would say something like:\nExtract the latest failure from some previous run for this workflow. This run can be created as a retry of the previous failed run or as a next cron invocation for cron workflows.", "author": "mfateev", "createdAt": "2020-11-25T19:45:23Z", "path": "temporal-sdk/src/main/java/io/temporal/workflow/Workflow.java", "diffHunk": "@@ -1181,6 +1183,19 @@ public static Logger getLogger(String name) {\n     return WorkflowInternal.getLastCompletionResult(resultClass, resultClass);\n   }\n \n+  /**\n+   * Extract the latest failure from some previous run for this cron workflow. This is used in", "originalCommit": "cedec75e13ed7d6a5fa7eb1600221a0c0ead9ab9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e98c1e73d39636404c9ba7002e6426908bfc16b", "chunk": "diff --git a/temporal-sdk/src/main/java/io/temporal/workflow/Workflow.java b/temporal-sdk/src/main/java/io/temporal/workflow/Workflow.java\nindex 6f3950f5..a7b0e9e1 100644\n--- a/temporal-sdk/src/main/java/io/temporal/workflow/Workflow.java\n+++ b/temporal-sdk/src/main/java/io/temporal/workflow/Workflow.java\n\n@@ -1184,16 +1182,15 @@ public final class Workflow {\n   }\n \n   /**\n-   * Extract the latest failure from some previous run for this cron workflow. This is used in\n-   * combination with cron schedule. A workflow can be started with an optional cron schedule. If\n-   * any previous workflow has failed, this function returns that failure. If no previous workflows\n-   * have failed, an empty optional is returned.\n+   * Extract the latest failure from some previous of this workflow. If any previous run of this\n+   * workflow has failed, this function returns that failure. If no previous runs have failed, an\n+   * empty optional is returned. The run you are calling this from may have been created as a retry\n+   * of the previous failed run or as a next cron invocation for cron workflows.\n    *\n    * @return The last {@link Exception} that occurred in this workflow, if there has been one.\n    */\n-  public static Optional<Exception> getLastFailure() {\n-    return WorkflowInternal.getLastFailure()\n-        .map(f -> FailureConverter.failureToException(f, DataConverter.getDefaultInstance()));\n+  public static Optional<Exception> getPreviousRunFailure() {\n+    return WorkflowInternal.getPreviousRunFailure();\n   }\n \n   /**\n"}}, {"oid": "1e98c1e73d39636404c9ba7002e6426908bfc16b", "url": "https://github.com/temporalio/sdk-java/commit/1e98c1e73d39636404c9ba7002e6426908bfc16b", "message": "Address Max's review comments", "committedDate": "2020-11-25T22:55:25Z", "type": "commit"}, {"oid": "ae496df3547af5923a905cbd4a926c4a86d45a8a", "url": "https://github.com/temporalio/sdk-java/commit/ae496df3547af5923a905cbd4a926c4a86d45a8a", "message": "Merge branch 'master' into sj-feat-257", "committedDate": "2020-11-25T23:12:11Z", "type": "commit"}, {"oid": "4d1fe202c12853b58185da62c278cfbb0950bd43", "url": "https://github.com/temporalio/sdk-java/commit/4d1fe202c12853b58185da62c278cfbb0950bd43", "message": "Address Max's review comments", "committedDate": "2020-11-26T06:22:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4MDczMA==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r535880730", "bodyText": "nit. s/Fail/Failure", "author": "vitarb", "createdAt": "2020-12-04T07:06:40Z", "path": "temporal-sdk/src/main/java/io/temporal/internal/sync/SyncWorkflow.java", "diffHunk": "@@ -101,8 +102,12 @@ public void start(HistoryEvent event, ReplayWorkflowContext context) {\n         startEvent.hasLastCompletionResult()\n             ? Optional.of(startEvent.getLastCompletionResult())\n             : Optional.empty();\n+    Optional<Failure> lastFail =", "originalCommit": "ae496df3547af5923a905cbd4a926c4a86d45a8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26602a278e0b91350bb2f37e3f8a55804d77e12e", "chunk": "diff --git a/temporal-sdk/src/main/java/io/temporal/internal/sync/SyncWorkflow.java b/temporal-sdk/src/main/java/io/temporal/internal/sync/SyncWorkflow.java\nindex 38d6ad31..e2d8fce9 100644\n--- a/temporal-sdk/src/main/java/io/temporal/internal/sync/SyncWorkflow.java\n+++ b/temporal-sdk/src/main/java/io/temporal/internal/sync/SyncWorkflow.java\n\n@@ -102,12 +102,12 @@ class SyncWorkflow implements ReplayWorkflow {\n         startEvent.hasLastCompletionResult()\n             ? Optional.of(startEvent.getLastCompletionResult())\n             : Optional.empty();\n-    Optional<Failure> lastFail =\n+    Optional<Failure> lastFailure =\n         startEvent.hasContinuedFailure()\n             ? Optional.of(startEvent.getContinuedFailure())\n             : Optional.empty();\n     SyncWorkflowContext syncContext =\n-        new SyncWorkflowContext(context, dataConverter, contextPropagators, result, lastFail);\n+        new SyncWorkflowContext(context, dataConverter, contextPropagators, result, lastFailure);\n \n     workflowProc = new WorkflowExecuteRunnable(syncContext, workflow, startEvent);\n     // The following order is ensured by this code and DeterministicRunner implementation:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4MTc2MA==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r535881760", "bodyText": "nit. I know you haven't changed this, but do we really need to pass both data and data.lastCompletionResult separately?", "author": "vitarb", "createdAt": "2020-12-04T07:09:11Z", "path": "temporal-sdk/src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java", "diffHunk": "@@ -1193,7 +1197,13 @@ private void processFailWorkflowExecution(\n     }\n \n     if (!Strings.isNullOrEmpty(data.cronSchedule)) {\n-      startNewCronRun(ctx, workflowTaskCompletedId, identity, data, data.lastCompletionResult);\n+      startNewCronRun(\n+          ctx,\n+          workflowTaskCompletedId,\n+          identity,\n+          data,\n+          data.lastCompletionResult,", "originalCommit": "ae496df3547af5923a905cbd4a926c4a86d45a8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI0MDQ1NA==", "url": "https://github.com/temporalio/sdk-java/pull/260#discussion_r536240454", "bodyText": "We do - at a different call site the last completion result comes from another source.", "author": "Sushisource", "createdAt": "2020-12-04T16:55:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4MTc2MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "26602a278e0b91350bb2f37e3f8a55804d77e12e", "url": "https://github.com/temporalio/sdk-java/commit/26602a278e0b91350bb2f37e3f8a55804d77e12e", "message": "Fix review nit", "committedDate": "2020-12-04T16:56:12Z", "type": "commit"}, {"oid": "90ea2df0576b489d45e87fcb6e04bdaf1997bada", "url": "https://github.com/temporalio/sdk-java/commit/90ea2df0576b489d45e87fcb6e04bdaf1997bada", "message": "Merge remote-tracking branch 'origin/sj-feat-257' into sj-feat-257", "committedDate": "2020-12-04T16:57:44Z", "type": "commit"}]}