{"pr_number": 33, "pr_title": "Options cleanup", "pr_createdAt": "2020-03-18T03:21:48Z", "pr_url": "https://github.com/temporalio/sdk-java/pull/33", "timeline": [{"oid": "4c1d9b02f6e73eb44d22a2e17b226611663e3373", "url": "https://github.com/temporalio/sdk-java/commit/4c1d9b02f6e73eb44d22a2e17b226611663e3373", "message": "Removed disaable...worker properties", "committedDate": "2020-03-17T21:42:52Z", "type": "commit"}, {"oid": "72121061d60af24a9d7ca2394aa97ad979b56bda", "url": "https://github.com/temporalio/sdk-java/commit/72121061d60af24a9d7ca2394aa97ad979b56bda", "message": "Removed identity from worker properties", "committedDate": "2020-03-17T22:01:53Z", "type": "commit"}, {"oid": "5c12a5b787984e805ce11203e2756a5a20d47cba", "url": "https://github.com/temporalio/sdk-java/commit/5c12a5b787984e805ce11203e2756a5a20d47cba", "message": "Removed dataConverter and metricsScope from WorkerOptions", "committedDate": "2020-03-17T22:17:43Z", "type": "commit"}, {"oid": "03fcdc3099ef22c905b139514e60a5f6d047788d", "url": "https://github.com/temporalio/sdk-java/commit/03fcdc3099ef22c905b139514e60a5f6d047788d", "message": "Removed pollerOptions from WorkerOptions", "committedDate": "2020-03-17T22:26:14Z", "type": "commit"}, {"oid": "2093a544b279b855d4f33052b6ced35b23627d45", "url": "https://github.com/temporalio/sdk-java/commit/2093a544b279b855d4f33052b6ced35b23627d45", "message": "Removed retry options from WorkerOptions", "committedDate": "2020-03-17T22:37:48Z", "type": "commit"}, {"oid": "e475c62796e77386b14708873ecf4325dbebed72", "url": "https://github.com/temporalio/sdk-java/commit/e475c62796e77386b14708873ecf4325dbebed72", "message": "Removed excessive options", "committedDate": "2020-03-17T23:45:42Z", "type": "commit"}, {"oid": "3bcf0823781d0fb43981a81f6f845243ccb33efc", "url": "https://github.com/temporalio/sdk-java/commit/3bcf0823781d0fb43981a81f6f845243ccb33efc", "message": "Fixed timeout interceptor. Removed redundant and excessive options", "committedDate": "2020-03-18T02:56:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MTAwOA==", "url": "https://github.com/temporalio/sdk-java/pull/33#discussion_r394451008", "bodyText": "Are there any race conditions we need to take into account? Maybe use AtomicBoolean?", "author": "samarabbas", "createdAt": "2020-03-18T15:49:50Z", "path": "src/main/java/io/temporal/serviceclient/WorkflowServiceStubsImpl.java", "diffHunk": "@@ -106,6 +108,7 @@ private void init(WorkflowServiceStubsOptions options) {\n               .defaultLoadBalancingPolicy(\"round_robin\")\n               .usePlaintext()\n               .build();\n+      channelNeedsShutdown = true;", "originalCommit": "3bcf0823781d0fb43981a81f6f845243ccb33efc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyMzA2MA==", "url": "https://github.com/temporalio/sdk-java/pull/33#discussion_r394523060", "bodyText": "Good point. Refactored to final variable.", "author": "mfateev", "createdAt": "2020-03-18T17:33:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MTAwOA=="}], "type": "inlineReview", "revised_code": {"commit": "8ce50cd6bb8bca93db3253ac21c410814ea9dba4", "chunk": "diff --git a/src/main/java/io/temporal/serviceclient/WorkflowServiceStubsImpl.java b/src/main/java/io/temporal/serviceclient/WorkflowServiceStubsImpl.java\nindex 955502fa..3ea51f3e 100644\n--- a/src/main/java/io/temporal/serviceclient/WorkflowServiceStubsImpl.java\n+++ b/src/main/java/io/temporal/serviceclient/WorkflowServiceStubsImpl.java\n\n@@ -59,49 +59,45 @@ final class WorkflowServiceStubsImpl implements WorkflowServiceStubs {\n \n   private static final String CLIENT_IMPL_HEADER_VALUE = \"temporal-java\";\n \n-  public static final String TEMPORAL_SERVICE_ADDRESS_ENV = \"TEMPORAL_ADDRESS\";\n-\n-  private ManagedChannel channel;\n+  private final ManagedChannel channel;\n   // Shutdown channel that was created by us\n-  private boolean channelNeedsShutdown;\n-  private AtomicBoolean shutdownRequested = new AtomicBoolean();\n-  protected WorkflowServiceGrpc.WorkflowServiceBlockingStub blockingStub;\n-  protected WorkflowServiceGrpc.WorkflowServiceFutureStub futureStub;\n+  private final boolean channelNeedsShutdown;\n+  private final AtomicBoolean shutdownRequested = new AtomicBoolean();\n+  private final WorkflowServiceGrpc.WorkflowServiceBlockingStub blockingStub;\n+  private final WorkflowServiceGrpc.WorkflowServiceFutureStub futureStub;\n \n   /**\n-   * Creates a factory that connects to the Temporal according to the specified options.\n-   *\n-   * @param options connection options\n+   * Creates a factory that connects to the Temporal according to the specified options. When\n+   * serviceImpl is not null generates the client for an in-process service using an in-memory\n+   * channel. Useful for testing, usually with mock and spy services.\n    */\n-  WorkflowServiceStubsImpl(WorkflowServiceStubsOptions options) {\n-    init(options);\n-  }\n-\n-  /**\n-   * Generates the client for an in-process service using an in-memory channel. Useful for testing,\n-   * usually with mock and spy services.\n-   */\n-  WorkflowServiceStubsImpl(WorkflowServiceGrpc.WorkflowServiceImplBase serviceImpl) {\n-    String serverName = InProcessServerBuilder.generateName();\n-    try {\n-      InProcessServerBuilder.forName(serverName)\n-          .directExecutor()\n-          .addService(serviceImpl)\n-          .build()\n-          .start();\n-    } catch (IOException unexpected) {\n-      throw new RuntimeException(unexpected);\n+  WorkflowServiceStubsImpl(\n+      WorkflowServiceGrpc.WorkflowServiceImplBase serviceImpl,\n+      WorkflowServiceStubsOptions options) {\n+    if (serviceImpl != null) {\n+      if (options.getChannel() != null) {\n+        throw new IllegalArgumentException(\"both channel and serviceImpl present\");\n+      }\n+      String serverName = InProcessServerBuilder.generateName();\n+      try {\n+        InProcessServerBuilder.forName(serverName)\n+            .directExecutor()\n+            .addService(serviceImpl)\n+            .build()\n+            .start();\n+      } catch (IOException unexpected) {\n+        throw new RuntimeException(unexpected);\n+      }\n+      options =\n+          WorkflowServiceStubsOptions.newBuilder(options)\n+              .setChannel(InProcessChannelBuilder.forName(serverName).directExecutor().build())\n+              .build();\n     }\n-    init(\n-        WorkflowServiceStubsOptions.newBuilder()\n-            .setChannel(InProcessChannelBuilder.forName(serverName).directExecutor().build())\n-            .build());\n-  }\n-\n-  private void init(WorkflowServiceStubsOptions options) {\n     options = WorkflowServiceStubsOptions.newBuilder(options).validateAndBuildWithDefaults();\n     if (options.getChannel() != null) {\n       this.channel = options.getChannel();\n+      // Do not shutdown a channel passed to the constructor from outside\n+      channelNeedsShutdown = serviceImpl != null;\n     } else {\n       this.channel =\n           ManagedChannelBuilder.forTarget(options.getTarget())\n"}}, {"oid": "8ce50cd6bb8bca93db3253ac21c410814ea9dba4", "url": "https://github.com/temporalio/sdk-java/commit/8ce50cd6bb8bca93db3253ac21c410814ea9dba4", "message": "Fixed race condition in grpc service creation", "committedDate": "2020-03-18T17:16:25Z", "type": "commit"}, {"oid": "6386635c193ef4eee4603cc00c64d5103c86b61c", "url": "https://github.com/temporalio/sdk-java/commit/6386635c193ef4eee4603cc00c64d5103c86b61c", "message": "Added cron validation on workflow start in test service", "committedDate": "2020-03-18T17:33:00Z", "type": "commit"}]}