{"pr_number": 101, "pr_title": "Major error handling refactoring", "pr_createdAt": "2020-06-16T05:14:42Z", "pr_url": "https://github.com/temporalio/sdk-java/pull/101", "timeline": [{"oid": "ae0e071e463e66c390cbae4d0f50768f665da34e", "url": "https://github.com/temporalio/sdk-java/commit/ae0e071e463e66c390cbae4d0f50768f665da34e", "message": "Updated proto submodule", "committedDate": "2020-05-29T02:34:56Z", "type": "commit"}, {"oid": "8a04839e964ca76d91050a973b74be02bdb8e9ed", "url": "https://github.com/temporalio/sdk-java/commit/8a04839e964ca76d91050a973b74be02bdb8e9ed", "message": "Added io.temporal.failure", "committedDate": "2020-05-30T21:35:18Z", "type": "commit"}, {"oid": "0c559200415db8f9f5e4f03e32a907b107f04589", "url": "https://github.com/temporalio/sdk-java/commit/0c559200415db8f9f5e4f03e32a907b107f04589", "message": "cleaned up WorkflowException", "committedDate": "2020-05-30T22:38:58Z", "type": "commit"}, {"oid": "70931d3e0b79f229921d97cd6738937eec55f44c", "url": "https://github.com/temporalio/sdk-java/commit/70931d3e0b79f229921d97cd6738937eec55f44c", "message": "compiles but some tests fail", "committedDate": "2020-06-04T01:34:51Z", "type": "commit"}, {"oid": "37ec8f86a8e28b278f1a1f3af9b933f7bdb3ba89", "url": "https://github.com/temporalio/sdk-java/commit/37ec8f86a8e28b278f1a1f3af9b933f7bdb3ba89", "message": "Jackson converter with ThrowableSerializer", "committedDate": "2020-06-04T23:56:38Z", "type": "commit"}, {"oid": "30972cf26ebe072027f8aef9746ef1806ad8d8c3", "url": "https://github.com/temporalio/sdk-java/commit/30972cf26ebe072027f8aef9746ef1806ad8d8c3", "message": "Refactored DataConverter", "committedDate": "2020-06-05T02:02:14Z", "type": "commit"}, {"oid": "6dc88faf616e7cbf32e5f91fce752f187a765d40", "url": "https://github.com/temporalio/sdk-java/commit/6dc88faf616e7cbf32e5f91fce752f187a765d40", "message": "Updated proto", "committedDate": "2020-06-05T02:02:54Z", "type": "commit"}, {"oid": "b4f47889cc98d8e7b97314b74bdc08a14c9ac8a5", "url": "https://github.com/temporalio/sdk-java/commit/b4f47889cc98d8e7b97314b74bdc08a14c9ac8a5", "message": "Fixed activity completion in StateMachines", "committedDate": "2020-06-06T17:51:39Z", "type": "commit"}, {"oid": "1b933f2ef7486506cbddc3a03c37bf5b5b6d8cca", "url": "https://github.com/temporalio/sdk-java/commit/1b933f2ef7486506cbddc3a03c37bf5b5b6d8cca", "message": "updated protos", "committedDate": "2020-06-06T17:52:03Z", "type": "commit"}, {"oid": "6adbe951a6a81e3991bbdf32bd881d814085fca9", "url": "https://github.com/temporalio/sdk-java/commit/6adbe951a6a81e3991bbdf32bd881d814085fca9", "message": "it compiles", "committedDate": "2020-06-06T23:42:36Z", "type": "commit"}, {"oid": "e5bb5685bbe5c26bdba00609ebab8c04b576f86a", "url": "https://github.com/temporalio/sdk-java/commit/e5bb5685bbe5c26bdba00609ebab8c04b576f86a", "message": "It compiles", "committedDate": "2020-06-10T16:16:02Z", "type": "commit"}, {"oid": "b945c3f56bb343d4571d5334f76c81ab3abb9657", "url": "https://github.com/temporalio/sdk-java/commit/b945c3f56bb343d4571d5334f76c81ab3abb9657", "message": "Multiple unit tests fixed", "committedDate": "2020-06-11T04:48:53Z", "type": "commit"}, {"oid": "348f56017a709aa5387a663fdeb02d3f07fbbf8e", "url": "https://github.com/temporalio/sdk-java/commit/348f56017a709aa5387a663fdeb02d3f07fbbf8e", "message": "unit test fixes", "committedDate": "2020-06-11T15:40:24Z", "type": "commit"}, {"oid": "87d4dafa06504a0c066976bda54f4531d2eafd09", "url": "https://github.com/temporalio/sdk-java/commit/87d4dafa06504a0c066976bda54f4531d2eafd09", "message": "Almost there", "committedDate": "2020-06-12T04:39:23Z", "type": "commit"}, {"oid": "bfdba20d74342836adff2f2458cf18f540300994", "url": "https://github.com/temporalio/sdk-java/commit/bfdba20d74342836adff2f2458cf18f540300994", "message": "All unit tests pass", "committedDate": "2020-06-12T17:29:24Z", "type": "commit"}, {"oid": "6f37db5680440f4eb8bba960df3f53882cb70ca6", "url": "https://github.com/temporalio/sdk-java/commit/6f37db5680440f4eb8bba960df3f53882cb70ca6", "message": "Fixed warnings", "committedDate": "2020-06-12T17:43:41Z", "type": "commit"}, {"oid": "1a697dbedfe7b1cce309ad089f1fc29c28da066a", "url": "https://github.com/temporalio/sdk-java/commit/1a697dbedfe7b1cce309ad089f1fc29c28da066a", "message": "Renamed exceptions to failures", "committedDate": "2020-06-13T00:09:46Z", "type": "commit"}, {"oid": "01ee8e2ff9c0ed3ba6e77d7bb389e19a8992c998", "url": "https://github.com/temporalio/sdk-java/commit/01ee8e2ff9c0ed3ba6e77d7bb389e19a8992c998", "message": "refactored Value", "committedDate": "2020-06-14T22:46:44Z", "type": "commit"}, {"oid": "c87f1c97cd7a14a2eed0b1998f2e36375bbb09c1", "url": "https://github.com/temporalio/sdk-java/commit/c87f1c97cd7a14a2eed0b1998f2e36375bbb09c1", "message": "Cleanup of DataCnverter", "committedDate": "2020-06-14T23:34:45Z", "type": "commit"}, {"oid": "f057ab1feaf7eb9ad83f3ed6e8ba8a750ff25974", "url": "https://github.com/temporalio/sdk-java/commit/f057ab1feaf7eb9ad83f3ed6e8ba8a750ff25974", "message": "ApplicationFailure fixes", "committedDate": "2020-06-15T21:38:43Z", "type": "commit"}, {"oid": "617d5cbd78f45df3fd7ee9443b01ceccd976e574", "url": "https://github.com/temporalio/sdk-java/commit/617d5cbd78f45df3fd7ee9443b01ceccd976e574", "message": "Value fixes", "committedDate": "2020-06-16T02:57:22Z", "type": "commit"}, {"oid": "a52a4f561b02973958f922bb4d5e983b1d3eb127", "url": "https://github.com/temporalio/sdk-java/commit/a52a4f561b02973958f922bb4d5e983b1d3eb127", "message": "self review", "committedDate": "2020-06-16T04:57:22Z", "type": "commit"}, {"oid": "10185c8bbb5538187881b9680af3309afdbcade4", "url": "https://github.com/temporalio/sdk-java/commit/10185c8bbb5538187881b9680af3309afdbcade4", "message": "Merge branch 'master' of github.com:temporalio/temporal-java-sdk into error_handling", "committedDate": "2020-06-16T18:13:37Z", "type": "commit"}, {"oid": "46916db756b6cb14f4205d271a9e848eb783ef72", "url": "https://github.com/temporalio/sdk-java/commit/46916db756b6cb14f4205d271a9e848eb783ef72", "message": "Removed dead code", "committedDate": "2020-06-16T23:13:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMzMwNA==", "url": "https://github.com/temporalio/sdk-java/pull/101#discussion_r441213304", "bodyText": "Is there pros to this naming vs isRetryable? Seems off having a negative on a bool property", "author": "shawnhathaway", "createdAt": "2020-06-17T00:26:01Z", "path": "src/main/java/io/temporal/failure/ApplicationFailure.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ *  Copyright (C) 2020 Temporal Technologies, Inc. All Rights Reserved.\n+ *\n+ *  Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Modifications copyright (C) 2017 Uber Technologies, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n+ *  use this file except in compliance with the License. A copy of the License is\n+ *  located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed on\n+ *  an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package io.temporal.failure;\n+\n+import com.google.common.base.Strings;\n+import io.temporal.common.converter.DataConverter;\n+import io.temporal.common.converter.EncodedValue;\n+import io.temporal.common.converter.Value;\n+\n+/**\n+ * Application failure is used to communicate application specific failures between workflows and\n+ * activities.\n+ *\n+ * <p>Throw this exception to have full control over type and details if the exception delivered to\n+ * the caller workflow or client.\n+ *\n+ * <p>Any unhandled exception which doesn't extend {@link TemporalFailure} is converted to an\n+ * instance of this class before being returned to a caller.\n+ *\n+ * <p>The {@code type} property is used by {@link io.temporal.common.RetryOptions} to determine if\n+ * an instance of this exception is non retryable. Another way to avoid retrying an exception of\n+ * this type is by setting {@code nonRetryable} flag to @{code true}.\n+ *\n+ * <p>The conversion of an exception that doesn't extend {@link TemporalFailure} to an\n+ * ApplicationFailure is done as following:\n+ *\n+ * <ul>\n+ *   <li>type is set to the exception full type name.\n+ *   <li>message is set to the exception message\n+ *   <li>nonRetryable is set to false\n+ *   <li>details are set to null\n+ *   <li>stack trace is copied from the original exception\n+ * </ul>\n+ */\n+public final class ApplicationFailure extends TemporalFailure {\n+  private final String type;\n+  private final Value details;\n+  private boolean nonRetryable;\n+\n+  /**\n+   * @param message optional error message\n+   * @param type optional error type that is used by {@link\n+   *     io.temporal.common.RetryOptions#addDoNotRetry(String...)}.\n+   * @param details optional details about the failure. They are serialized using the same approach\n+   *     as arguments and results and can be accessed through {@link #getDetails()}\n+   * @param cause failure cause. Each element of the cause chain is converted to ApplicationFailure\n+   *     if it doesn't extend {@link TemporalFailure}.\n+   */\n+  public ApplicationFailure(String message, String type, Object details, Exception cause) {\n+    this(message, type, new EncodedValue(details), false, cause);\n+  }\n+\n+  /**\n+   * @param message optional error message\n+   * @param type optional error type that is used by {@link\n+   *     io.temporal.common.RetryOptions#addDoNotRetry(String...)}.\n+   * @param details optional details about the failure. They are serialized using the same approach\n+   *     as arguments and results.\n+   */\n+  public ApplicationFailure(String message, String type, Object details) {\n+    this(message, type, new EncodedValue(details), false, null);\n+  }\n+\n+  /**\n+   * @param message optional error message\n+   * @param type optional error type that is used by {@link\n+   *     io.temporal.common.RetryOptions#addDoNotRetry(String...)}.\n+   */\n+  public ApplicationFailure(String message, String type) {\n+    this(message, type, new EncodedValue(null), false, null);\n+  }\n+\n+  /** * @param message optional error message */\n+  public ApplicationFailure(String message) {\n+    this(message, null);\n+  }\n+\n+  ApplicationFailure(\n+      String message, String type, Value details, boolean nonRetryable, Exception cause) {\n+    super(getMessage(message, type, nonRetryable), message, cause);\n+    this.type = type;\n+    this.details = details;\n+    this.nonRetryable = nonRetryable;\n+  }\n+\n+  public String getType() {\n+    return type;\n+  }\n+\n+  public Value getDetails() {\n+    return details;\n+  }\n+\n+  public void setNonRetryable(boolean nonRetryable) {\n+    this.nonRetryable = nonRetryable;\n+  }\n+\n+  public boolean isNonRetryable() {", "originalCommit": "46916db756b6cb14f4205d271a9e848eb783ef72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1MzQ1MA==", "url": "https://github.com/temporalio/sdk-java/pull/101#discussion_r441253450", "bodyText": "The pattern I always use is to have default value as the default value of the type. For boolean the default is false.", "author": "mfateev", "createdAt": "2020-06-17T03:02:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMzMwNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyNzA0Ng==", "url": "https://github.com/temporalio/sdk-java/pull/101#discussion_r441227046", "bodyText": "For defining time intervals - Do we prefer units on ints rather than strongly typed Duration?", "author": "shawnhathaway", "createdAt": "2020-06-17T01:19:59Z", "path": "src/test/java/io/temporal/worker/StickyWorkerTest.java", "diffHunk": "@@ -226,7 +226,7 @@ public void workflowCacheEvictionDueToThreads() {\n     int count = 100;\n     ActivitiesWorkflow[] workflows = new ActivitiesWorkflow[count];\n     WorkflowParams w = new WorkflowParams();\n-    w.TemporalSleep = Duration.ofSeconds(1);\n+    w.TemporalSleepMillis = 1000;", "originalCommit": "46916db756b6cb14f4205d271a9e848eb783ef72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1MzcyMg==", "url": "https://github.com/temporalio/sdk-java/pull/101#discussion_r441253722", "bodyText": "We prefer Duration unless it has to be passed across process boundary and serialized/deserialized. We can add serialization of Duration to the Jackson json serializer, but then it might not play well with Go and other SDKs.", "author": "mfateev", "createdAt": "2020-06-17T03:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyNzA0Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyNzM2MQ==", "url": "https://github.com/temporalio/sdk-java/pull/101#discussion_r441227361", "bodyText": "Mixed time types? ReplayTimeMillis vs Backoff", "author": "shawnhathaway", "createdAt": "2020-06-17T01:21:10Z", "path": "src/main/java/io/temporal/internal/common/LocalActivityMarkerData.java", "diffHunk": "@@ -95,120 +98,115 @@ public Builder setBackoff(Duration backoff) {\n \n     public LocalActivityMarkerData build() {\n       return new LocalActivityMarkerData(\n-          activityId,\n-          activityType,\n-          replayTimeMillis,\n-          result,\n-          errReason,\n-          attempt,\n-          backoff,\n-          isCancelled);\n+          activityId, activityType, replayTimeMillis, result, failure, attempt, backoff);\n     }\n   }\n \n-  private static class LocalActivityMarkerHeader {\n-    private final String activityId;\n-    private final String activityType;\n-    private final String errReason;\n-    private final long replayTimeMillis;\n-    private final int attempt;\n-    private final Duration backoff;\n-    private final boolean isCancelled;\n+  private static class DataValue {\n+    private String activityId;\n+    private String activityType;\n+    private long replayTimeMillis;\n+    private int attempt;\n+    private long backoffMillis;\n+\n+    // Needed by Jackson deserializer\n+    DataValue() {}\n \n-    LocalActivityMarkerHeader(\n+    DataValue(\n         String activityId,\n         String activityType,\n         long replayTimeMillis,\n-        String errReason,\n         int attempt,\n-        Duration backoff,\n-        boolean isCancelled) {\n+        Duration backoff) {\n       this.activityId = activityId;\n       this.activityType = activityType;\n       this.replayTimeMillis = replayTimeMillis;\n-      this.errReason = errReason;\n       this.attempt = attempt;\n-      this.backoff = backoff;\n-      this.isCancelled = isCancelled;\n+      this.backoffMillis = backoff == null ? 0 : backoff.toMillis();\n     }\n   }\n \n-  private final LocalActivityMarkerHeader headers;\n+  private final DataValue data;\n   private final Optional<Payloads> result;\n+  private final Optional<Failure> failure;\n \n   private LocalActivityMarkerData(\n       String activityId,\n       String activityType,\n       long replayTimeMillis,\n       Optional<Payloads> result,\n-      String errReason,\n+      Optional<Failure> failure,\n       int attempt,\n-      Duration backoff,\n-      boolean isCancelled) {\n-    this.headers =\n-        new LocalActivityMarkerHeader(\n-            activityId, activityType, replayTimeMillis, errReason, attempt, backoff, isCancelled);\n+      Duration backoff) {\n+    this.data = new DataValue(activityId, activityType, replayTimeMillis, attempt, backoff);\n     this.result = result;\n+    this.failure = failure;\n   }\n \n-  private LocalActivityMarkerData(LocalActivityMarkerHeader headers, Optional<Payloads> result) {\n-    this.headers = headers;\n+  private LocalActivityMarkerData(\n+      DataValue data, Optional<Payloads> result, Optional<Failure> failure) {\n+    this.data = data;\n     this.result = result;\n+    this.failure = failure;\n   }\n \n   public String getActivityId() {\n-    return headers.activityId;\n+    return data.activityId;\n   }\n \n   public String getActivityType() {\n-    return headers.activityType;\n-  }\n-\n-  public String getErrReason() {\n-    return headers.errReason;\n+    return data.activityType;\n   }\n \n-  public Optional<Payloads> getErrJson() {\n-    return Strings.isNullOrEmpty(headers.errReason) ? Optional.empty() : result;\n+  public Optional<Failure> getFailure() {\n+    return failure;\n   }\n \n   public Optional<Payloads> getResult() {\n     return result;\n   }\n \n   public long getReplayTimeMillis() {", "originalCommit": "46916db756b6cb14f4205d271a9e848eb783ef72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1NDE3OQ==", "url": "https://github.com/temporalio/sdk-java/pull/101#discussion_r441254179", "bodyText": "ReplayTimeMillis is a specific time of replay (timestamp). Backoff is a duration which is time interval.", "author": "mfateev", "createdAt": "2020-06-17T03:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyNzM2MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIzMjM0NQ==", "url": "https://github.com/temporalio/sdk-java/pull/101#discussion_r441232345", "bodyText": "What is the reason for using string rather than types? Does previous usage cause the Illegal reflective access warnings?", "author": "shawnhathaway", "createdAt": "2020-06-17T01:40:06Z", "path": "src/main/java/io/temporal/internal/common/StartWorkflowExecutionParameters.java", "diffHunk": "@@ -348,14 +348,14 @@ public static StartWorkflowExecutionParameters fromWorkflowOptions(WorkflowOptio\n       rp.setInitialIntervalInSeconds(roundUpToSeconds(retryOptions.getInitialInterval()));\n       rp.setMaximumIntervalInSeconds(roundUpToSeconds(retryOptions.getMaximumInterval()));\n       rp.setMaximumAttempts(retryOptions.getMaximumAttempts());\n-      List<String> reasons = new ArrayList<>();\n+      List<String> types = new ArrayList<>();\n       // Use exception type name as the reason\n-      List<Class<? extends Throwable>> doNotRetry = retryOptions.getDoNotRetry();\n+      String[] doNotRetry = retryOptions.getDoNotRetry();", "originalCommit": "46916db756b6cb14f4205d271a9e848eb783ef72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1NDQxNQ==", "url": "https://github.com/temporalio/sdk-java/pull/101#discussion_r441254415", "bodyText": "This is to be compatible with other SDKs. An activity can be implemented in Go and return an error type which is not Java exception name.", "author": "mfateev", "createdAt": "2020-06-17T03:06:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIzMjM0NQ=="}], "type": "inlineReview", "revised_code": null}]}