{"pr_number": 251, "pr_title": "Stop using illegal reflective access for setting cause during exception", "pr_createdAt": "2020-11-13T19:52:15Z", "pr_url": "https://github.com/temporalio/sdk-java/pull/251", "timeline": [{"oid": "b620208419f8f7dfad0048f2bf0132618faae2b2", "url": "https://github.com/temporalio/sdk-java/commit/b620208419f8f7dfad0048f2bf0132618faae2b2", "message": "Stop using illegal reflective access for setting cause during exception\nunwrapping", "committedDate": "2020-11-13T19:43:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwMzYwMw==", "url": "https://github.com/temporalio/sdk-java/pull/251#discussion_r524603603", "bodyText": "I would move it to the top of the method to avoid unnecessary e.getMessage call.", "author": "mfateev", "createdAt": "2020-11-16T21:27:44Z", "path": "temporal-sdk/src/main/java/io/temporal/failure/FailureConverter.java", "diffHunk": "@@ -195,11 +190,14 @@ public static Failure exceptionToFailureNoUnwrapping(Throwable e) {\n     } else {\n       message = e.getMessage() == null ? \"\" : e.getMessage();\n     }\n+    if (e instanceof CheckedExceptionWrapper) {\n+      return exceptionToFailure(e.getCause());\n+    }", "originalCommit": "b620208419f8f7dfad0048f2bf0132618faae2b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYxMTYxOA==", "url": "https://github.com/temporalio/sdk-java/pull/251#discussion_r524611618", "bodyText": "Done", "author": "vitarb", "createdAt": "2020-11-16T21:34:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwMzYwMw=="}], "type": "inlineReview", "revised_code": {"commit": "798f45312ca3d885993575bb2ef7355eb26bdfdf", "chunk": "diff --git a/temporal-sdk/src/main/java/io/temporal/failure/FailureConverter.java b/temporal-sdk/src/main/java/io/temporal/failure/FailureConverter.java\nindex 894b3624..fda725f4 100644\n--- a/temporal-sdk/src/main/java/io/temporal/failure/FailureConverter.java\n+++ b/temporal-sdk/src/main/java/io/temporal/failure/FailureConverter.java\n\n@@ -190,9 +193,6 @@ public class FailureConverter {\n     } else {\n       message = e.getMessage() == null ? \"\" : e.getMessage();\n     }\n-    if (e instanceof CheckedExceptionWrapper) {\n-      return exceptionToFailure(e.getCause());\n-    }\n     String stackTrace = serializeStackTrace(e);\n     Failure.Builder failure =\n         Failure.newBuilder().setMessage(message).setSource(JAVA_SDK).setStackTrace(stackTrace);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwNzE3Nw==", "url": "https://github.com/temporalio/sdk-java/pull/251#discussion_r524607177", "bodyText": "Remove causeField and the related initialization code above.\nRemove setThrowableCause method below.", "author": "mfateev", "createdAt": "2020-11-16T21:30:44Z", "path": "temporal-sdk/src/main/java/io/temporal/internal/common/CheckedExceptionWrapper.java", "diffHunk": "@@ -69,25 +69,11 @@ public static RuntimeException wrap(Throwable e) {\n   }\n \n   /**\n-   * Removes CheckedException wrapper from the whole chain of Exceptions. Assumes that wrapper\n+   * Removes CheckedExceptionWrapper from the top of the chain of Exceptions. Assumes that wrapper", "originalCommit": "b620208419f8f7dfad0048f2bf0132618faae2b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYxMTc2MA==", "url": "https://github.com/temporalio/sdk-java/pull/251#discussion_r524611760", "bodyText": "Done", "author": "vitarb", "createdAt": "2020-11-16T21:34:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwNzE3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "798f45312ca3d885993575bb2ef7355eb26bdfdf", "chunk": "diff --git a/temporal-sdk/src/main/java/io/temporal/internal/common/CheckedExceptionWrapper.java b/temporal-sdk/src/main/java/io/temporal/internal/common/CheckedExceptionWrapper.java\nindex 14c0d637..f5fa8c92 100644\n--- a/temporal-sdk/src/main/java/io/temporal/internal/common/CheckedExceptionWrapper.java\n+++ b/temporal-sdk/src/main/java/io/temporal/internal/common/CheckedExceptionWrapper.java\n\n@@ -76,18 +65,6 @@ public final class CheckedExceptionWrapper extends RuntimeException {\n     return e instanceof CheckedExceptionWrapper ? e.getCause() : e;\n   }\n \n-  /**\n-   * Throwable.initCause throws IllegalStateException if cause is already set. This method uses\n-   * reflection to set it directly.\n-   */\n-  private static void setThrowableCause(Throwable throwable, Throwable cause) {\n-    try {\n-      causeField.set(throwable, cause);\n-    } catch (IllegalAccessException e) {\n-      throw new RuntimeException(\"unexpected\", e);\n-    }\n-  }\n-\n   private CheckedExceptionWrapper(Exception e) {\n     super(e);\n   }\n"}}, {"oid": "798f45312ca3d885993575bb2ef7355eb26bdfdf", "url": "https://github.com/temporalio/sdk-java/commit/798f45312ca3d885993575bb2ef7355eb26bdfdf", "message": "Address CR feedback", "committedDate": "2020-11-16T21:34:20Z", "type": "commit"}]}