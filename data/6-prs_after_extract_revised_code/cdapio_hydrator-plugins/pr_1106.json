{"pr_number": 1106, "pr_title": "CDAP-16875 changed joiner plugin to use new auto-join API", "pr_createdAt": "2020-06-03T22:44:55Z", "pr_url": "https://github.com/cdapio/hydrator-plugins/pull/1106", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzMTMwNQ==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1106#discussion_r436031305", "bodyText": "Just curious - is the schema name useful for the output schema? I believe the builder will use its own schema name if this is not provided, and because different plugins seem to give different schema name, and the name basically is not used anywhere. Is it important and worth to pay attention when developing a plugin in the future?", "author": "yaojiefeng", "createdAt": "2020-06-05T16:28:05Z", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -58,40 +60,83 @@\n   \"required inputs, inner join will be performed. Otherwise inner join will be performed on required inputs and \" +\n   \"records from non-required inputs will only be present if they match join criteria. If there are no required \" +\n   \"inputs, outer join will be performed\")\n-public class Joiner extends BatchJoiner<StructuredRecord, StructuredRecord, StructuredRecord> {\n+public class Joiner extends BatchAutoJoiner {\n \n   static final String JOIN_OPERATION_DESCRIPTION = \"Used as a key in a join\";\n   static final String IDENTITY_OPERATION_DESCRIPTION = \"Unchanged as part of a join\";\n   static final String RENAME_OPERATION_DESCRIPTION = \"Renamed as a part of a join\";\n \n   private final JoinerConfig conf;\n-  private Schema outputSchema;\n-  private Map<String, List<String>> perStageJoinKeys;\n-  private Table<String, String, String> perStageSelectedFields;\n-  private JoinConfig joinConfig;\n-  private Map<String, Schema> keySchemas = new HashMap<>();\n \n   public Joiner(JoinerConfig conf) {\n     this.conf = conf;\n   }\n \n+  @Nullable\n   @Override\n-  public void configurePipeline(MultiInputPipelineConfigurer pipelineConfigurer) {\n-    MultiInputStageConfigurer stageConfigurer = pipelineConfigurer.getMultiInputStageConfigurer();\n-    Map<String, Schema> inputSchemas = stageConfigurer.getInputSchemas();\n-    FailureCollector collector = pipelineConfigurer.getMultiInputStageConfigurer().getFailureCollector();\n-    init(inputSchemas, collector);\n-    collector.getOrThrowException();\n-    if (!conf.inputSchemasAvailable(inputSchemas) && !conf.containsMacro(JoinerConfig.OUTPUT_SCHEMA) &&\n+  public JoinDefinition define(AutoJoinerContext context) {\n+    FailureCollector collector = context.getFailureCollector();\n+\n+    boolean hasUnknownInputSchema = context.getInputStages().values().stream().anyMatch(Objects::isNull);\n+    if (hasUnknownInputSchema && !conf.containsMacro(JoinerConfig.OUTPUT_SCHEMA) &&\n       conf.getOutputSchema(collector) == null) {\n       // If input schemas are unknown, an output schema must be provided.\n       collector.addFailure(\"Output schema must be specified\", null).withConfigProperty(JoinerConfig.OUTPUT_SCHEMA);\n     }\n \n-    Schema outputSchema = getOutputSchema(inputSchemas, collector);\n-    if (outputSchema != null) {\n-      // Set output schema if it's not a macro.\n-      stageConfigurer.setOutputSchema(outputSchema);\n+    if (conf.requiredPropertiesContainMacros()) {\n+      return null;\n+    }\n+\n+    Set<String> requiredStages = conf.getRequiredInputs();\n+    Set<String> broadcastStages = conf.getBroadcastInputs();\n+    List<JoinStage> inputs = new ArrayList<>(context.getInputStages().size());\n+    boolean useOutputSchema = false;\n+    for (JoinStage joinStage : context.getInputStages().values()) {\n+      inputs.add(JoinStage.builder(joinStage)\n+        .setRequired(requiredStages.contains(joinStage.getStageName()))\n+        .setBroadcast(broadcastStages.contains(joinStage.getStageName()))\n+        .build());\n+      useOutputSchema = useOutputSchema || joinStage.getSchema() == null;\n+    }\n+\n+    try {\n+      JoinDefinition.Builder joinBuilder = JoinDefinition.builder()\n+        .select(conf.getSelectedFields(collector))\n+        .from(inputs)\n+        .on(JoinCondition.onKeys()\n+              .setKeys(conf.getJoinKeys(collector))\n+              .setNullSafe(conf.isNullSafe())\n+              .build());\n+      if (useOutputSchema) {\n+        joinBuilder.setOutputSchema(conf.getOutputSchema(collector));\n+      } else {\n+        joinBuilder.setOutputSchemaName(\"join.output\");", "originalCommit": "4a898449ba115f8f0bd4eb7bf39962980dac6c05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0NTc4Ng==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1106#discussion_r436845786", "bodyText": "it's important with certain types of schemas that have recursive structures, because the schema name is used instead of the object schema to prevent infinite recursion. In most situations it doesn't matter too much, setting this here since this is the schema name used before.", "author": "albertshau", "createdAt": "2020-06-08T16:43:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzMTMwNQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "125a302abc98048232e8699412d9443cf63eb3ea", "url": "https://github.com/cdapio/hydrator-plugins/commit/125a302abc98048232e8699412d9443cf63eb3ea", "message": "CDAP-16875 changed joiner plugin to use new auto-join API\n\nChanged the joiner to use the new AutoJoiner API to take\nadvantage of the performance improvements it allows in Spark\npipelines.\n\nIntroduced two new optional properties. The first determines\nwhether the join will use null safe equality, and the second\nprovides hint to the execution engine about which input datasets\nshould be broadcast to perform an in-memory join.\n\nRemoved much of the existing join logic because it has been moved\ninto the application code. Updated the documentation to use\nthe property names that show up in the UI, to display the properties\nin the same order that they appear in the UI, and to include\ndescriptions of the two new properties.", "committedDate": "2020-06-08T16:47:08Z", "type": "commit"}, {"oid": "125a302abc98048232e8699412d9443cf63eb3ea", "url": "https://github.com/cdapio/hydrator-plugins/commit/125a302abc98048232e8699412d9443cf63eb3ea", "message": "CDAP-16875 changed joiner plugin to use new auto-join API\n\nChanged the joiner to use the new AutoJoiner API to take\nadvantage of the performance improvements it allows in Spark\npipelines.\n\nIntroduced two new optional properties. The first determines\nwhether the join will use null safe equality, and the second\nprovides hint to the execution engine about which input datasets\nshould be broadcast to perform an in-memory join.\n\nRemoved much of the existing join logic because it has been moved\ninto the application code. Updated the documentation to use\nthe property names that show up in the UI, to display the properties\nin the same order that they appear in the UI, and to include\ndescriptions of the two new properties.", "committedDate": "2020-06-08T16:47:08Z", "type": "forcePushed"}]}