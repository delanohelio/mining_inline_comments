{"pr_number": 1045, "pr_title": "Cherry pick fixes to support macros in joiner plugin", "pr_createdAt": "2020-03-22T00:23:25Z", "pr_url": "https://github.com/cdapio/hydrator-plugins/pull/1045", "timeline": [{"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6", "url": "https://github.com/cdapio/hydrator-plugins/commit/c08e21e077b35a9dac3203d08d51a5ec47ea29a6", "message": "Cherry pick fixes to support macros in joiner plugin", "committedDate": "2020-03-24T22:44:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxMzgyNQ==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397513825", "bodyText": "unused?", "author": "CuriousVini", "createdAt": "2020-03-24T23:03:36Z", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -68,11 +64,14 @@\n   static final String IDENTITY_OPERATION_DESCRIPTION = \"Unchanged as part of a join\";\n   static final String RENAME_OPERATION_DESCRIPTION = \"Renamed as a part of a join\";\n \n+\n   private final JoinerConfig conf;\n   private Schema outputSchema;\n-  private Map<String, StageKeyInfo> stageKeyInfos;\n+  private Map<String, List<String>> perStageJoinKeys;\n   private Table<String, String, String> perStageSelectedFields;\n+  private Multimap<String, String> duplicateFields = ArrayListMultimap.create();", "originalCommit": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NjE4Nw==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397546187", "bodyText": "Good catch; removed.", "author": "rmstar", "createdAt": "2020-03-25T00:43:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxMzgyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6f79248b37829f0a26ead6bb961e8b9f7403c084", "chunk": "diff --git a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\nindex f102d54c..1b04137d 100644\n--- a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n+++ b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n\n@@ -64,12 +64,10 @@ public class Joiner extends BatchJoiner<StructuredRecord, StructuredRecord, Stru\n   static final String IDENTITY_OPERATION_DESCRIPTION = \"Unchanged as part of a join\";\n   static final String RENAME_OPERATION_DESCRIPTION = \"Renamed as a part of a join\";\n \n-\n   private final JoinerConfig conf;\n   private Schema outputSchema;\n   private Map<String, List<String>> perStageJoinKeys;\n   private Table<String, String, String> perStageSelectedFields;\n-  private Multimap<String, String> duplicateFields = ArrayListMultimap.create();\n   private JoinConfig joinConfig;\n   private Map<String, Schema> keySchemas = new HashMap<>();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDEyOA==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397514128", "bodyText": "nit: JoinerConfig.OUTPUT_SCHEMA", "author": "CuriousVini", "createdAt": "2020-03-24T23:04:24Z", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -82,24 +81,39 @@ public Joiner(JoinerConfig conf) {\n   public void configurePipeline(MultiInputPipelineConfigurer pipelineConfigurer) {\n     MultiInputStageConfigurer stageConfigurer = pipelineConfigurer.getMultiInputStageConfigurer();\n     Map<String, Schema> inputSchemas = stageConfigurer.getInputSchemas();\n-    FailureCollector collector = init(inputSchemas,\n-                                      pipelineConfigurer.getMultiInputStageConfigurer().getFailureCollector());\n+    FailureCollector collector = pipelineConfigurer.getMultiInputStageConfigurer().getFailureCollector();\n+    init(inputSchemas, collector);\n     collector.getOrThrowException();\n-    //validate the input schema and get the output schema for it\n-    stageConfigurer.setOutputSchema(getOutputSchema(inputSchemas, collector));\n+    if (!conf.inputSchemasAvailable(inputSchemas) && !conf.containsMacro(conf.OUTPUT_SCHEMA) &&", "originalCommit": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMTYyNw==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397521627", "bodyText": "Can we move this check to init as well?", "author": "CuriousVini", "createdAt": "2020-03-24T23:25:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NzE0Mw==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397547143", "bodyText": "Fixed conf.OUTPUT_SCHEMA -> JoinerConfig.OUTPUT_SCHEMA.\nThe check doesn't belong in init because init is called from:\n\nhere, i.e. configurePipeline\nprepareRun\ninitialize\n\nMaking this check at configure time is sufficient; IMO we don't need to check this again in other places.", "author": "rmstar", "createdAt": "2020-03-25T00:47:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDEyOA=="}], "type": "inlineReview", "revised_code": {"commit": "6f79248b37829f0a26ead6bb961e8b9f7403c084", "chunk": "diff --git a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\nindex f102d54c..1b04137d 100644\n--- a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n+++ b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n\n@@ -84,10 +82,10 @@ public class Joiner extends BatchJoiner<StructuredRecord, StructuredRecord, Stru\n     FailureCollector collector = pipelineConfigurer.getMultiInputStageConfigurer().getFailureCollector();\n     init(inputSchemas, collector);\n     collector.getOrThrowException();\n-    if (!conf.inputSchemasAvailable(inputSchemas) && !conf.containsMacro(conf.OUTPUT_SCHEMA) &&\n+    if (!conf.inputSchemasAvailable(inputSchemas) && !conf.containsMacro(JoinerConfig.OUTPUT_SCHEMA) &&\n       conf.getOutputSchema(collector) == null) {\n       // If input schemas are unknown, an output schema must be provided.\n-      collector.addFailure(\"Output schema must be specified\", null).withConfigProperty(conf.OUTPUT_SCHEMA);\n+      collector.addFailure(\"Output schema must be specified\", null).withConfigProperty(JoinerConfig.OUTPUT_SCHEMA);\n     }\n \n     Schema outputSchema = getOutputSchema(inputSchemas, collector);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDIyMQ==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397514221", "bodyText": "same here: JoinerConfig.OUTPUT_SCHEMA", "author": "CuriousVini", "createdAt": "2020-03-24T23:04:40Z", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -82,24 +81,39 @@ public Joiner(JoinerConfig conf) {\n   public void configurePipeline(MultiInputPipelineConfigurer pipelineConfigurer) {\n     MultiInputStageConfigurer stageConfigurer = pipelineConfigurer.getMultiInputStageConfigurer();\n     Map<String, Schema> inputSchemas = stageConfigurer.getInputSchemas();\n-    FailureCollector collector = init(inputSchemas,\n-                                      pipelineConfigurer.getMultiInputStageConfigurer().getFailureCollector());\n+    FailureCollector collector = pipelineConfigurer.getMultiInputStageConfigurer().getFailureCollector();\n+    init(inputSchemas, collector);\n     collector.getOrThrowException();\n-    //validate the input schema and get the output schema for it\n-    stageConfigurer.setOutputSchema(getOutputSchema(inputSchemas, collector));\n+    if (!conf.inputSchemasAvailable(inputSchemas) && !conf.containsMacro(conf.OUTPUT_SCHEMA) &&\n+      conf.getOutputSchema(collector) == null) {\n+      // If input schemas are unknown, an output schema must be provided.\n+      collector.addFailure(\"Output schema must be specified\", null).withConfigProperty(conf.OUTPUT_SCHEMA);", "originalCommit": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NzE2Mw==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397547163", "bodyText": "fixed.", "author": "rmstar", "createdAt": "2020-03-25T00:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDIyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "6f79248b37829f0a26ead6bb961e8b9f7403c084", "chunk": "diff --git a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\nindex f102d54c..1b04137d 100644\n--- a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n+++ b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n\n@@ -84,10 +82,10 @@ public class Joiner extends BatchJoiner<StructuredRecord, StructuredRecord, Stru\n     FailureCollector collector = pipelineConfigurer.getMultiInputStageConfigurer().getFailureCollector();\n     init(inputSchemas, collector);\n     collector.getOrThrowException();\n-    if (!conf.inputSchemasAvailable(inputSchemas) && !conf.containsMacro(conf.OUTPUT_SCHEMA) &&\n+    if (!conf.inputSchemasAvailable(inputSchemas) && !conf.containsMacro(JoinerConfig.OUTPUT_SCHEMA) &&\n       conf.getOutputSchema(collector) == null) {\n       // If input schemas are unknown, an output schema must be provided.\n-      collector.addFailure(\"Output schema must be specified\", null).withConfigProperty(conf.OUTPUT_SCHEMA);\n+      collector.addFailure(\"Output schema must be specified\", null).withConfigProperty(JoinerConfig.OUTPUT_SCHEMA);\n     }\n \n     Schema outputSchema = getOutputSchema(inputSchemas, collector);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDQ5MA==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397514490", "bodyText": "nit: Mark this as @VisibleForTesting", "author": "CuriousVini", "createdAt": "2020-03-24T23:05:28Z", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -215,31 +259,57 @@ public StructuredRecord merge(StructuredRecord joinKey, Iterable<JoinElement<Str\n   }\n \n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {", "originalCommit": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyNDI2Nw==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397524267", "bodyText": "looks like inputSchemasAvailable is called at many places. can we centralize that check in this method?", "author": "CuriousVini", "createdAt": "2020-03-24T23:33:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0OTAwNQ==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397549005", "bodyText": "Added @VisibleForTesting annotation.\ninputSchemasAvailable is called from:\n\nconfigurePipeline - part of check to verify that output schema is provided if input schemas are not known\nprepareRun - don't record lineage if input schemas are not available\ncreateOutputFieldInfos - bail out if input schemas are not available\nJoinerConfig.validateJoinKeySchemas - part of check to skip validation if input schemas are not available or joinKeys is a macro.\n\nSince it's used in many different contexts, I don't think it makes sense to centralize the check in init().", "author": "rmstar", "createdAt": "2020-03-25T00:53:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDQ5MA=="}], "type": "inlineReview", "revised_code": {"commit": "6f79248b37829f0a26ead6bb961e8b9f7403c084", "chunk": "diff --git a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\nindex f102d54c..1b04137d 100644\n--- a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n+++ b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n\n@@ -258,6 +256,7 @@ public class Joiner extends BatchJoiner<StructuredRecord, StructuredRecord, Stru\n     return outRecordBuilder.build();\n   }\n \n+  @VisibleForTesting\n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {\n     validateJoinKeySchemas(inputSchemas, conf.getPerStageJoinKeys(), failureCollector);\n     joinConfig = new JoinConfig(conf.getInputs());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDYxMA==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397514610", "bodyText": "we can make this method private", "author": "CuriousVini", "createdAt": "2020-03-24T23:05:50Z", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -215,31 +259,57 @@ public StructuredRecord merge(StructuredRecord joinKey, Iterable<JoinElement<Str\n   }\n \n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {\n-    Map<String, StageKeyInfo> keyInfos = new HashMap<>();\n-    StageKeyInfo prevKeyInfo = null;\n-    for (Map.Entry<String, List<String>> entry : conf.getPerStageJoinKeys().entrySet()) {\n+    validateJoinKeySchemas(inputSchemas, conf.getPerStageJoinKeys(), failureCollector);\n+    joinConfig = new JoinConfig(conf.getInputs());\n+    perStageSelectedFields = conf.getPerStageSelectedFields();\n+    return failureCollector;\n+  }\n+\n+  void validateJoinKeySchemas(Map<String, Schema> inputSchemas, Map<String, List<String>> joinKeys,", "originalCommit": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NzE4MQ==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397547181", "bodyText": "fixed", "author": "rmstar", "createdAt": "2020-03-25T00:47:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDYxMA=="}], "type": "inlineReview", "revised_code": {"commit": "6f79248b37829f0a26ead6bb961e8b9f7403c084", "chunk": "diff --git a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\nindex f102d54c..1b04137d 100644\n--- a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n+++ b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n\n@@ -258,6 +256,7 @@ public class Joiner extends BatchJoiner<StructuredRecord, StructuredRecord, Stru\n     return outRecordBuilder.build();\n   }\n \n+  @VisibleForTesting\n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {\n     validateJoinKeySchemas(inputSchemas, conf.getPerStageJoinKeys(), failureCollector);\n     joinConfig = new JoinConfig(conf.getInputs());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDg1Mg==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397514852", "bodyText": "Annotate this with @VisibleForTesting", "author": "CuriousVini", "createdAt": "2020-03-24T23:06:38Z", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -215,31 +259,57 @@ public StructuredRecord merge(StructuredRecord joinKey, Iterable<JoinElement<Str\n   }\n \n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {\n-    Map<String, StageKeyInfo> keyInfos = new HashMap<>();\n-    StageKeyInfo prevKeyInfo = null;\n-    for (Map.Entry<String, List<String>> entry : conf.getPerStageJoinKeys().entrySet()) {\n+    validateJoinKeySchemas(inputSchemas, conf.getPerStageJoinKeys(), failureCollector);\n+    joinConfig = new JoinConfig(conf.getInputs());\n+    perStageSelectedFields = conf.getPerStageSelectedFields();\n+    return failureCollector;\n+  }\n+\n+  void validateJoinKeySchemas(Map<String, Schema> inputSchemas, Map<String, List<String>> joinKeys,\n+                              FailureCollector collector) {\n+    perStageJoinKeys = joinKeys;\n+    conf.validateJoinKeySchemas(inputSchemas, joinKeys, collector);\n+\n+    List<Schema> prevSchemaList = null;\n+    for (Map.Entry<String, List<String>> entry : perStageJoinKeys.entrySet()) {\n+      ArrayList<Schema> schemaList = new ArrayList<>();\n       String stageName = entry.getKey();\n-      StageKeyInfo keyInfo = new StageKeyInfo(stageName, inputSchemas.get(stageName),\n-                                              entry.getValue(), failureCollector);\n-      if (prevKeyInfo != null && !prevKeyInfo.getSchema().equals(keyInfo.getSchema())) {\n-        failureCollector.addFailure(\n+\n+      Schema schema = inputSchemas.get(stageName);\n+      if (schema == null) {\n+        // Input schema will be null if the output schema of the previous node is a macro\n+        return;\n+      }\n+\n+      for (String joinKey : entry.getValue()) {\n+        Schema.Field field = schema.getField(joinKey);\n+        if (field == null) {\n+          collector.addFailure(\n+            String.format(\"Join key field '%s' is not present in input stage of '%s'.\", joinKey, stageName), null)\n+            .withConfigProperty(conf.JOIN_KEYS);\n+        }\n+        schemaList.add(field.getSchema());\n+      }\n+      if (prevSchemaList != null && !prevSchemaList.equals(schemaList)) {\n+        collector.addFailure(\n           String.format(\"For stage '%s', Schemas of join keys '%s' are expected to be: '%s', but found: '%s'.\",\n-                        stageName, entry.getValue(), prevKeyInfo.getFieldSchemas(), keyInfo.getFieldSchemas()), null)\n-          .withConfigProperty(JoinerConfig.JOIN_KEYS);\n-      } else {\n-        prevKeyInfo = keyInfo;\n+                        stageName, entry.getValue(), prevSchemaList.toString(), schemaList.toString()), null)\n+          .withConfigProperty(conf.JOIN_KEYS);\n       }\n-      keyInfos.put(stageName, keyInfo);\n+      prevSchemaList = schemaList;\n     }\n-\n-    stageKeyInfos = Collections.unmodifiableMap(keyInfos);\n-    joinConfig = new JoinConfig(conf.getInputs());\n-    perStageSelectedFields = conf.getPerStageSelectedFields();\n-    return failureCollector;\n   }\n \n   Schema getOutputSchema(Map<String, Schema> inputSchemas, FailureCollector collector) {", "originalCommit": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0OTAyNg==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397549026", "bodyText": "fixed.", "author": "rmstar", "createdAt": "2020-03-25T00:53:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDg1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6f79248b37829f0a26ead6bb961e8b9f7403c084", "chunk": "diff --git a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\nindex f102d54c..1b04137d 100644\n--- a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n+++ b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n\n@@ -258,6 +256,7 @@ public class Joiner extends BatchJoiner<StructuredRecord, StructuredRecord, Stru\n     return outRecordBuilder.build();\n   }\n \n+  @VisibleForTesting\n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {\n     validateJoinKeySchemas(inputSchemas, conf.getPerStageJoinKeys(), failureCollector);\n     joinConfig = new JoinConfig(conf.getInputs());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNTI4NQ==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397515285", "bodyText": "nit: JoinerConfig.JOIN_KEYS", "author": "CuriousVini", "createdAt": "2020-03-24T23:07:49Z", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -215,31 +259,57 @@ public StructuredRecord merge(StructuredRecord joinKey, Iterable<JoinElement<Str\n   }\n \n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {\n-    Map<String, StageKeyInfo> keyInfos = new HashMap<>();\n-    StageKeyInfo prevKeyInfo = null;\n-    for (Map.Entry<String, List<String>> entry : conf.getPerStageJoinKeys().entrySet()) {\n+    validateJoinKeySchemas(inputSchemas, conf.getPerStageJoinKeys(), failureCollector);\n+    joinConfig = new JoinConfig(conf.getInputs());\n+    perStageSelectedFields = conf.getPerStageSelectedFields();\n+    return failureCollector;\n+  }\n+\n+  void validateJoinKeySchemas(Map<String, Schema> inputSchemas, Map<String, List<String>> joinKeys,\n+                              FailureCollector collector) {\n+    perStageJoinKeys = joinKeys;\n+    conf.validateJoinKeySchemas(inputSchemas, joinKeys, collector);\n+\n+    List<Schema> prevSchemaList = null;\n+    for (Map.Entry<String, List<String>> entry : perStageJoinKeys.entrySet()) {\n+      ArrayList<Schema> schemaList = new ArrayList<>();\n       String stageName = entry.getKey();\n-      StageKeyInfo keyInfo = new StageKeyInfo(stageName, inputSchemas.get(stageName),\n-                                              entry.getValue(), failureCollector);\n-      if (prevKeyInfo != null && !prevKeyInfo.getSchema().equals(keyInfo.getSchema())) {\n-        failureCollector.addFailure(\n+\n+      Schema schema = inputSchemas.get(stageName);\n+      if (schema == null) {\n+        // Input schema will be null if the output schema of the previous node is a macro\n+        return;\n+      }\n+\n+      for (String joinKey : entry.getValue()) {\n+        Schema.Field field = schema.getField(joinKey);\n+        if (field == null) {\n+          collector.addFailure(\n+            String.format(\"Join key field '%s' is not present in input stage of '%s'.\", joinKey, stageName), null)\n+            .withConfigProperty(conf.JOIN_KEYS);\n+        }\n+        schemaList.add(field.getSchema());\n+      }\n+      if (prevSchemaList != null && !prevSchemaList.equals(schemaList)) {\n+        collector.addFailure(\n           String.format(\"For stage '%s', Schemas of join keys '%s' are expected to be: '%s', but found: '%s'.\",\n-                        stageName, entry.getValue(), prevKeyInfo.getFieldSchemas(), keyInfo.getFieldSchemas()), null)\n-          .withConfigProperty(JoinerConfig.JOIN_KEYS);\n-      } else {\n-        prevKeyInfo = keyInfo;\n+                        stageName, entry.getValue(), prevSchemaList.toString(), schemaList.toString()), null)\n+          .withConfigProperty(conf.JOIN_KEYS);", "originalCommit": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0OTA0Ng==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397549046", "bodyText": "fixed.", "author": "rmstar", "createdAt": "2020-03-25T00:53:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNTI4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6f79248b37829f0a26ead6bb961e8b9f7403c084", "chunk": "diff --git a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\nindex f102d54c..1b04137d 100644\n--- a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n+++ b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n\n@@ -258,6 +256,7 @@ public class Joiner extends BatchJoiner<StructuredRecord, StructuredRecord, Stru\n     return outRecordBuilder.build();\n   }\n \n+  @VisibleForTesting\n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {\n     validateJoinKeySchemas(inputSchemas, conf.getPerStageJoinKeys(), failureCollector);\n     joinConfig = new JoinConfig(conf.getInputs());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNTMwMQ==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397515301", "bodyText": "nit: JoinerConfig.JOIN_KEYS", "author": "CuriousVini", "createdAt": "2020-03-24T23:07:53Z", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -215,31 +259,57 @@ public StructuredRecord merge(StructuredRecord joinKey, Iterable<JoinElement<Str\n   }\n \n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {\n-    Map<String, StageKeyInfo> keyInfos = new HashMap<>();\n-    StageKeyInfo prevKeyInfo = null;\n-    for (Map.Entry<String, List<String>> entry : conf.getPerStageJoinKeys().entrySet()) {\n+    validateJoinKeySchemas(inputSchemas, conf.getPerStageJoinKeys(), failureCollector);\n+    joinConfig = new JoinConfig(conf.getInputs());\n+    perStageSelectedFields = conf.getPerStageSelectedFields();\n+    return failureCollector;\n+  }\n+\n+  void validateJoinKeySchemas(Map<String, Schema> inputSchemas, Map<String, List<String>> joinKeys,\n+                              FailureCollector collector) {\n+    perStageJoinKeys = joinKeys;\n+    conf.validateJoinKeySchemas(inputSchemas, joinKeys, collector);\n+\n+    List<Schema> prevSchemaList = null;\n+    for (Map.Entry<String, List<String>> entry : perStageJoinKeys.entrySet()) {\n+      ArrayList<Schema> schemaList = new ArrayList<>();\n       String stageName = entry.getKey();\n-      StageKeyInfo keyInfo = new StageKeyInfo(stageName, inputSchemas.get(stageName),\n-                                              entry.getValue(), failureCollector);\n-      if (prevKeyInfo != null && !prevKeyInfo.getSchema().equals(keyInfo.getSchema())) {\n-        failureCollector.addFailure(\n+\n+      Schema schema = inputSchemas.get(stageName);\n+      if (schema == null) {\n+        // Input schema will be null if the output schema of the previous node is a macro\n+        return;\n+      }\n+\n+      for (String joinKey : entry.getValue()) {\n+        Schema.Field field = schema.getField(joinKey);\n+        if (field == null) {\n+          collector.addFailure(\n+            String.format(\"Join key field '%s' is not present in input stage of '%s'.\", joinKey, stageName), null)\n+            .withConfigProperty(conf.JOIN_KEYS);", "originalCommit": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0OTA3Nw==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397549077", "bodyText": "fixed.", "author": "rmstar", "createdAt": "2020-03-25T00:53:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNTMwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "6f79248b37829f0a26ead6bb961e8b9f7403c084", "chunk": "diff --git a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\nindex f102d54c..1b04137d 100644\n--- a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n+++ b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n\n@@ -258,6 +256,7 @@ public class Joiner extends BatchJoiner<StructuredRecord, StructuredRecord, Stru\n     return outRecordBuilder.build();\n   }\n \n+  @VisibleForTesting\n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {\n     validateJoinKeySchemas(inputSchemas, conf.getPerStageJoinKeys(), failureCollector);\n     joinConfig = new JoinConfig(conf.getInputs());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNjI2MA==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397516260", "bodyText": "better: return !inputSchemas.isEmpty() && inputSchemas.values().stream().noneMatch(Objects::isNull);", "author": "CuriousVini", "createdAt": "2020-03-24T23:10:31Z", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/JoinerConfig.java", "diffHunk": "@@ -108,11 +121,30 @@ public String getRequiredInputs() {\n     return requiredInputs;\n   }\n \n+  @Nullable\n+  public Schema getOutputSchema(FailureCollector collector) {\n+    try {\n+      return Strings.isNullOrEmpty(schema) ? null : Schema.parseJson(schema);\n+    } catch (IOException e) {\n+      collector.addFailure(\"Invalid schema: \" + e.getMessage(), null).withConfigProperty(OUTPUT_SCHEMA);\n+    }\n+    // if there was an error that was added, it will throw an exception, otherwise, this statement will not be executed\n+    throw collector.getOrThrowException();\n+  }\n+\n+  public boolean inputSchemasAvailable(Map<String, Schema> inputSchemas) {\n+    // TODO: Remove isEmpty() check when CDAP-16351 is fixed\n+    return !inputSchemas.isEmpty() && !inputSchemas.values().stream().anyMatch(v -> v == null);", "originalCommit": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNjM1OA==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397516358", "bodyText": "the method can be package private", "author": "CuriousVini", "createdAt": "2020-03-24T23:10:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNjI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0OTE2OQ==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397549169", "bodyText": "fixed.", "author": "rmstar", "createdAt": "2020-03-25T00:53:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNjI2MA=="}], "type": "inlineReview", "revised_code": {"commit": "6f79248b37829f0a26ead6bb961e8b9f7403c084", "chunk": "diff --git a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/JoinerConfig.java b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/JoinerConfig.java\nindex fc07a5ec..0172f204 100644\n--- a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/JoinerConfig.java\n+++ b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/JoinerConfig.java\n\n@@ -132,9 +133,9 @@ public class JoinerConfig extends PluginConfig {\n     throw collector.getOrThrowException();\n   }\n \n-  public boolean inputSchemasAvailable(Map<String, Schema> inputSchemas) {\n+  boolean inputSchemasAvailable(Map<String, Schema> inputSchemas) {\n     // TODO: Remove isEmpty() check when CDAP-16351 is fixed\n-    return !inputSchemas.isEmpty() && !inputSchemas.values().stream().anyMatch(v -> v == null);\n+    return !inputSchemas.isEmpty() && inputSchemas.values().stream().noneMatch(Objects::isNull);\n   }\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMzUzMw==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397523533", "bodyText": "!inputSchemas.isEmpty()  - this is same check as inputSchemasAvailable right?", "author": "CuriousVini", "createdAt": "2020-03-24T23:30:59Z", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -477,7 +479,7 @@ public String toString() {\n \n   private void validateRequiredInputs(Map<String, Schema> inputSchemas, FailureCollector collector) {\n     for (String requiredInput : conf.getInputs()) {\n-      if (!inputSchemas.containsKey(requiredInput)) {\n+      if (!inputSchemas.isEmpty() && !inputSchemas.containsKey(requiredInput)) {", "originalCommit": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1MDExMw==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397550113", "bodyText": "It's a bit different: inputSchemasAvailable returns true if:\n\ninputSchemas is not empty, and\nNone of the values (i.e. schemas) in inputSchemas is null.", "author": "rmstar", "createdAt": "2020-03-25T00:57:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMzUzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1MjA3Ng==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397552076", "bodyText": "I think we can use inputSchemasAvailable here like you suggested. will fix.", "author": "rmstar", "createdAt": "2020-03-25T01:04:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMzUzMw=="}], "type": "inlineReview", "revised_code": {"commit": "6f79248b37829f0a26ead6bb961e8b9f7403c084", "chunk": "diff --git a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\nindex f102d54c..1b04137d 100644\n--- a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n+++ b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n\n@@ -479,7 +478,7 @@ public class Joiner extends BatchJoiner<StructuredRecord, StructuredRecord, Stru\n \n   private void validateRequiredInputs(Map<String, Schema> inputSchemas, FailureCollector collector) {\n     for (String requiredInput : conf.getInputs()) {\n-      if (!inputSchemas.isEmpty() && !inputSchemas.containsKey(requiredInput)) {\n+      if (conf.inputSchemasAvailable(inputSchemas) && !inputSchemas.containsKey(requiredInput)) {\n         collector.addFailure(String.format(\"Provided input '%s' must be an input stage name.\", requiredInput), null)\n           .withConfigElement(JoinerConfig.REQUIRED_INPUTS, requiredInput);\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwMTIzNg==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397601236", "bodyText": "nit: extra line", "author": "CuriousVini", "createdAt": "2020-03-25T04:18:22Z", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -68,11 +64,13 @@\n   static final String IDENTITY_OPERATION_DESCRIPTION = \"Unchanged as part of a join\";\n   static final String RENAME_OPERATION_DESCRIPTION = \"Renamed as a part of a join\";\n \n+", "originalCommit": "2dc61e037c1e02e154e90831a7f8a3f6027629f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwOTU1NA==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397609554", "bodyText": "fixed", "author": "rmstar", "createdAt": "2020-03-25T04:57:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwMTIzNg=="}], "type": "inlineReview", "revised_code": {"commit": "6f79248b37829f0a26ead6bb961e8b9f7403c084", "chunk": "diff --git a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\nindex bad7972a..1b04137d 100644\n--- a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n+++ b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n\n@@ -64,7 +64,6 @@ public class Joiner extends BatchJoiner<StructuredRecord, StructuredRecord, Stru\n   static final String IDENTITY_OPERATION_DESCRIPTION = \"Unchanged as part of a join\";\n   static final String RENAME_OPERATION_DESCRIPTION = \"Renamed as a part of a join\";\n \n-\n   private final JoinerConfig conf;\n   private Schema outputSchema;\n   private Map<String, List<String>> perStageJoinKeys;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwNjA1MA==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397606050", "bodyText": "nit: indentation", "author": "CuriousVini", "createdAt": "2020-03-25T04:40:57Z", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -214,32 +257,59 @@ public StructuredRecord merge(StructuredRecord joinKey, Iterable<JoinElement<Str\n     return outRecordBuilder.build();\n   }\n \n+  @VisibleForTesting\n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {\n-    Map<String, StageKeyInfo> keyInfos = new HashMap<>();\n-    StageKeyInfo prevKeyInfo = null;\n-    for (Map.Entry<String, List<String>> entry : conf.getPerStageJoinKeys().entrySet()) {\n+    validateJoinKeySchemas(inputSchemas, conf.getPerStageJoinKeys(), failureCollector);\n+    joinConfig = new JoinConfig(conf.getInputs());\n+    perStageSelectedFields = conf.getPerStageSelectedFields();\n+    return failureCollector;\n+  }\n+\n+  private void validateJoinKeySchemas(Map<String, Schema> inputSchemas, Map<String, List<String>> joinKeys,\n+                              FailureCollector collector) {", "originalCommit": "2dc61e037c1e02e154e90831a7f8a3f6027629f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwOTU3Mw==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397609573", "bodyText": "fixed", "author": "rmstar", "createdAt": "2020-03-25T04:57:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwNjA1MA=="}], "type": "inlineReview", "revised_code": {"commit": "6f79248b37829f0a26ead6bb961e8b9f7403c084", "chunk": "diff --git a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\nindex bad7972a..1b04137d 100644\n--- a/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n+++ b/core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java\n\n@@ -266,7 +265,7 @@ public class Joiner extends BatchJoiner<StructuredRecord, StructuredRecord, Stru\n   }\n \n   private void validateJoinKeySchemas(Map<String, Schema> inputSchemas, Map<String, List<String>> joinKeys,\n-                              FailureCollector collector) {\n+                                      FailureCollector collector) {\n     perStageJoinKeys = joinKeys;\n     conf.validateJoinKeySchemas(inputSchemas, joinKeys, collector);\n \n"}}, {"oid": "6f79248b37829f0a26ead6bb961e8b9f7403c084", "url": "https://github.com/cdapio/hydrator-plugins/commit/6f79248b37829f0a26ead6bb961e8b9f7403c084", "message": "Cherry pick fixes to support macros in joiner plugin", "committedDate": "2020-03-25T04:51:42Z", "type": "commit"}, {"oid": "6f79248b37829f0a26ead6bb961e8b9f7403c084", "url": "https://github.com/cdapio/hydrator-plugins/commit/6f79248b37829f0a26ead6bb961e8b9f7403c084", "message": "Cherry pick fixes to support macros in joiner plugin", "committedDate": "2020-03-25T04:51:42Z", "type": "forcePushed"}]}