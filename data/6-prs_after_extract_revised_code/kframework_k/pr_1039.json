{"pr_number": 1039, "pr_title": "Significant performance improvements to parsing and compilation time", "pr_createdAt": "2020-01-16T19:37:46Z", "pr_url": "https://github.com/kframework/k/pull/1039", "timeline": [{"oid": "8d63cd9eaad54c5ef3d7258f36b7c68183851225", "url": "https://github.com/kframework/k/commit/8d63cd9eaad54c5ef3d7258f36b7c68183851225", "message": "fix synchronization for type inferencer", "committedDate": "2020-01-15T22:39:14Z", "type": "commit"}, {"oid": "1aab3291f89c2275ba5c7bcb94bc1fc5cd5b2b11", "url": "https://github.com/kframework/k/commit/1aab3291f89c2275ba5c7bcb94bc1fc5cd5b2b11", "message": "fix blocking on set", "committedDate": "2020-01-16T18:22:51Z", "type": "commit"}, {"oid": "671e3d46986ebe9a3e15655a410c876428d57425", "url": "https://github.com/kframework/k/commit/671e3d46986ebe9a3e15655a410c876428d57425", "message": "only initialize the lazily evaluated stuff if at least one cache miss\nexists", "committedDate": "2020-01-16T18:51:04Z", "type": "commit"}, {"oid": "daa373efaf4e165dd6763a95ae9f0c745b8452f1", "url": "https://github.com/kframework/k/commit/daa373efaf4e165dd6763a95ae9f0c745b8452f1", "message": "don't call implementation of getCombinedGrammar until we actually need\nto parse something", "committedDate": "2020-01-16T18:51:41Z", "type": "commit"}, {"oid": "4bac28b6820c0712bc2fea1c5db2a74e55c3a67b", "url": "https://github.com/kframework/k/commit/4bac28b6820c0712bc2fea1c5db2a74e55c3a67b", "message": "fix serious performance regression in ExpandMacros", "committedDate": "2020-01-16T19:08:19Z", "type": "commit"}, {"oid": "da422eb174c126bde83a79cc57cdb73ae2afe8f0", "url": "https://github.com/kframework/k/commit/da422eb174c126bde83a79cc57cdb73ae2afe8f0", "message": "fix bug in macro performance fix", "committedDate": "2020-01-16T20:01:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY2ODE1MQ==", "url": "https://github.com/kframework/k/pull/1039#discussion_r367668151", "bodyText": "Can we factor out a private void loadModules() here which all of getExtensionModule(), getParsingModule(), and getDisambiguationModule() can use?", "author": "ehildenb", "createdAt": "2020-01-16T21:49:21Z", "path": "kernel/src/main/java/org/kframework/parser/concrete2kore/ParseInModule.java", "diffHunk": "@@ -92,19 +100,51 @@ public Module seedModule() {\n      * @return Module with extra productions defined during parser generator.\n      */\n     public Module getExtensionModule() {\n-        return extensionModule;\n+        Module extM = extensionModule;\n+        if (extM == null) {\n+            Tuple3<Module, Module, Module> mods = RuleGrammarGenerator.getCombinedGrammarImpl(seedModule);\n+            extM = mods._1();\n+            disambModule = mods._2();\n+            parsingModule = mods._3();\n+            extensionModule = extM;", "originalCommit": "da422eb174c126bde83a79cc57cdb73ae2afe8f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY2ODQxOA==", "url": "https://github.com/kframework/k/pull/1039#discussion_r367668418", "bodyText": "Or perhaps initializeModules() to mirror the initialize() below.", "author": "ehildenb", "createdAt": "2020-01-16T21:50:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY2ODE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY4MDE1NA==", "url": "https://github.com/kframework/k/pull/1039#discussion_r367680154", "bodyText": "I mean, the implementation of the three methods is different... I'm not really sure how I would go about doing that. I'm not opposed, but I'm just unclear how that would be done.", "author": "dwightguth", "createdAt": "2020-01-16T22:20:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY2ODE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyNzE3Ng==", "url": "https://github.com/kframework/k/pull/1039#discussion_r367727176", "bodyText": "Well you could have a codeblock which says:\nprivate void initializeModules() {\n            Tuple3<Module, Module, Module> mods = RuleGrammarGenerator.getCombinedGrammarImpl(seedModule);\n            extensionModule = mods._1()\n            disambModule = mods._2();\n            parsingModule = mods._3();\n}\n\nThen just call that function in each of these three functions.\nYour call though.", "author": "ehildenb", "createdAt": "2020-01-17T01:09:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY2ODE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYzODYwNg==", "url": "https://github.com/kframework/k/pull/1039#discussion_r368638606", "bodyText": "Unfortunately that is not possible either because in order to implement the racy single-check pattern, we need slightly different assignment statements in each of the three functions.", "author": "dwightguth", "createdAt": "2020-01-20T16:34:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY2ODE1MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "b90bd1096a81e809228977ea2259b6c005131eac", "url": "https://github.com/kframework/k/commit/b90bd1096a81e809228977ea2259b6c005131eac", "message": "Merge branch 'master' into sync", "committedDate": "2020-01-20T16:51:03Z", "type": "commit"}]}