{"pr_number": 1477, "pr_title": "Check attributes (symbolic/concrete/simplification)", "pr_createdAt": "2020-07-31T15:03:33Z", "pr_url": "https://github.com/kframework/k/pull/1477", "timeline": [{"oid": "2fd0a9288a0668b019aefa05da98e9cf709b2f1d", "url": "https://github.com/kframework/k/commit/2fd0a9288a0668b019aefa05da98e9cf709b2f1d", "message": "fix missing simplification attribute", "committedDate": "2020-08-04T15:56:23Z", "type": "commit"}, {"oid": "51ac68a0cc35faefa267fc748c309e6fb7f029c3", "url": "https://github.com/kframework/k/commit/51ac68a0cc35faefa267fc748c309e6fb7f029c3", "message": "add check for concrete and symbolic attributes", "committedDate": "2020-08-04T15:58:30Z", "type": "commit"}, {"oid": "315dbda44d9955b2ee314777246cda59c6a09f40", "url": "https://github.com/kframework/k/commit/315dbda44d9955b2ee314777246cda59c6a09f40", "message": "add test", "committedDate": "2020-08-04T16:01:39Z", "type": "commit"}, {"oid": "315dbda44d9955b2ee314777246cda59c6a09f40", "url": "https://github.com/kframework/k/commit/315dbda44d9955b2ee314777246cda59c6a09f40", "message": "add test", "committedDate": "2020-08-04T16:01:39Z", "type": "forcePushed"}, {"oid": "be8cbe1bee3c26bc921f563343b59b61e9f85085", "url": "https://github.com/kframework/k/commit/be8cbe1bee3c26bc921f563343b59b61e9f85085", "message": "Merge branch 'master' into checkatt", "committedDate": "2020-08-04T17:54:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIzMjgwMw==", "url": "https://github.com/kframework/k/pull/1477#discussion_r465232803", "bodyText": "I really am not a fan of this way of selecting \"foo\" as the default to compare too. Would prefer something like:\nSet<String> concreteVars = computeConcreteVars();\nSet<String> symbolicVars = computeSymbolicVars();\nif ((! (concreteVars.isEmpty() && symbolicVars.isEmpty())) && hasSimplification()) {\n   error(\"Can't have concrete/symbolic without simplification\");\n}\nif (concreteVars.intersects(symbolicVars)) {\n   error(\"Can't have the same variable both concrete/symbolic: \" concreteVars.intersection(symbolicVars));\n}\n\nThe logic you have here is pretty hard to read.", "author": "ehildenb", "createdAt": "2020-08-04T18:03:19Z", "path": "kernel/src/main/java/org/kframework/compile/checks/CheckKLabels.java", "diffHunk": "@@ -149,6 +150,32 @@ public void check() {\n                 kem.registerCompilerWarning(ExceptionType.UNUSED_SYMBOL, errors, \"Symbol '\" + symbol + \"' defined but not used. Add the 'unused' attribute if this is intentional.\", klabelProds.get(symbol));\n             }\n         }\n+        for (KLabel function : iterable(mainMod.functions())) {\n+            boolean allConcrete = true;\n+            boolean allSymbolic = true;\n+            for (Rule rule : iterable(mainMod.rulesFor().get(function).getOrElse(() -> Collections.<Rule>Set()))) {\n+                if ((rule.att().getOptional(Att.CONCRETE()).orElse(\"foo\").equals(\"\") &&\n+                    rule.att().contains(Att.SYMBOLIC())) ||\n+                    (rule.att().getOptional(Att.SYMBOLIC()).orElse(\"foo\").equals(\"\") &&\n+                    rule.att().contains(Att.CONCRETE()))) {\n+                    errors.add(KEMException.compilerError(\"Rule cannot be both concrete and symbolic in the same variable.\", rule));\n+                }\n+                if (!rule.att().getOptional(Att.CONCRETE()).orElse(\"foo\").equals(\"\")) {\n+                    allConcrete = false;\n+                }\n+                if (!rule.att().getOptional(Att.SYMBOLIC()).orElse(\"foo\").equals(\"\")) {\n+                    allSymbolic = false;\n+                }", "originalCommit": "be8cbe1bee3c26bc921f563343b59b61e9f85085", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIzOTEzOA==", "url": "https://github.com/kframework/k/pull/1477#discussion_r465239138", "bodyText": "I will refactor out a function with a more human-readable name, but note that we're not doing anything quite this complicated, nor do I want to implement that now when it was not specifically requested as part of this issue. We can create another issue and prioritize it next week if we want to add more advanced checks. I mostly just implemented this check as part of implementing the other one.", "author": "dwightguth", "createdAt": "2020-08-04T18:15:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIzMjgwMw=="}], "type": "inlineReview", "revised_code": {"commit": "4737e09256ae30e72c6755335392fb0bd3e79d55", "chunk": "diff --git a/kernel/src/main/java/org/kframework/compile/checks/CheckKLabels.java b/kernel/src/main/java/org/kframework/compile/checks/CheckKLabels.java\nindex b963e6fd0..cbc3fb7c2 100644\n--- a/kernel/src/main/java/org/kframework/compile/checks/CheckKLabels.java\n+++ b/kernel/src/main/java/org/kframework/compile/checks/CheckKLabels.java\n\n@@ -154,16 +158,16 @@ public class CheckKLabels {\n             boolean allConcrete = true;\n             boolean allSymbolic = true;\n             for (Rule rule : iterable(mainMod.rulesFor().get(function).getOrElse(() -> Collections.<Rule>Set()))) {\n-                if ((rule.att().getOptional(Att.CONCRETE()).orElse(\"foo\").equals(\"\") &&\n+                if ((hasAttWithNoArg(rule.att(), Att.CONCRETE()) &&\n                     rule.att().contains(Att.SYMBOLIC())) ||\n-                    (rule.att().getOptional(Att.SYMBOLIC()).orElse(\"foo\").equals(\"\") &&\n+                    (hasAttWithNoArg(rule.att(), Att.SYMBOLIC()) &&\n                     rule.att().contains(Att.CONCRETE()))) {\n                     errors.add(KEMException.compilerError(\"Rule cannot be both concrete and symbolic in the same variable.\", rule));\n                 }\n-                if (!rule.att().getOptional(Att.CONCRETE()).orElse(\"foo\").equals(\"\")) {\n+                if (!hasAttWithNoArg(rule.att(), Att.CONCRETE())) {\n                     allConcrete = false;\n                 }\n-                if (!rule.att().getOptional(Att.SYMBOLIC()).orElse(\"foo\").equals(\"\")) {\n+                if (!hasAttWithNoArg(rule.att(), Att.SYMBOLIC())) {\n                     allSymbolic = false;\n                 }\n             }\n"}}, {"oid": "f564dba2e462af2a74fa8a0944fd5b55134bd97d", "url": "https://github.com/kframework/k/commit/f564dba2e462af2a74fa8a0944fd5b55134bd97d", "message": "add test", "committedDate": "2020-08-04T18:15:56Z", "type": "commit"}, {"oid": "4737e09256ae30e72c6755335392fb0bd3e79d55", "url": "https://github.com/kframework/k/commit/4737e09256ae30e72c6755335392fb0bd3e79d55", "message": "make code more readable", "committedDate": "2020-08-04T18:18:47Z", "type": "commit"}, {"oid": "f5b2bd7d8c0d1933c0214435b252a59e3e207b40", "url": "https://github.com/kframework/k/commit/f5b2bd7d8c0d1933c0214435b252a59e3e207b40", "message": "Merge branch 'master' into checkatt", "committedDate": "2020-08-04T20:04:44Z", "type": "commit"}]}