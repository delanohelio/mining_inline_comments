{"pr_number": 1247, "pr_title": "GLR Bison parser", "pr_createdAt": "2020-05-01T19:04:15Z", "pr_url": "https://github.com/kframework/k/pull/1247", "timeline": [{"oid": "1882076507159503e8942049a60fe9094edf6623", "url": "https://github.com/kframework/k/commit/1882076507159503e8942049a60fe9094edf6623", "message": "module to declare ambiugities that persist until runtime", "committedDate": "2020-05-04T17:52:52Z", "type": "commit"}, {"oid": "9fa87cf13a57ef4c740e632acfe36e794cf6f50d", "url": "https://github.com/kframework/k/commit/9fa87cf13a57ef4c740e632acfe36e794cf6f50d", "message": "left associative list option", "committedDate": "2020-05-04T17:52:52Z", "type": "commit"}, {"oid": "39b4d0e3fc0b376885f6e68ef8e7b55449bd0ff8", "url": "https://github.com/kframework/k/commit/39b4d0e3fc0b376885f6e68ef8e7b55449bd0ff8", "message": "improve bison and flex code quality to include locations and reentrant\nparsing", "committedDate": "2020-05-04T17:52:52Z", "type": "commit"}, {"oid": "1987240529bca3c4c725c25e620fa6f13386e976", "url": "https://github.com/kframework/k/commit/1987240529bca3c4c725c25e620fa6f13386e976", "message": "glr parsing", "committedDate": "2020-05-04T17:52:52Z", "type": "commit"}, {"oid": "178157f71a442ec646113597d883afa16d687e10", "url": "https://github.com/kframework/k/commit/178157f71a442ec646113597d883afa16d687e10", "message": "remove projections from grammar", "committedDate": "2020-05-04T17:52:52Z", "type": "commit"}, {"oid": "1d267eb8a7f5b83b108bb9a8621d32df90115b28", "url": "https://github.com/kframework/k/commit/1d267eb8a7f5b83b108bb9a8621d32df90115b28", "message": "add test", "committedDate": "2020-05-04T17:52:52Z", "type": "commit"}, {"oid": "ea71bfcd25c0a12edd1dacc0415d03492b112728", "url": "https://github.com/kframework/k/commit/ea71bfcd25c0a12edd1dacc0415d03492b112728", "message": "--gen-glr-bison-parser", "committedDate": "2020-05-04T17:52:52Z", "type": "commit"}, {"oid": "112fb06b07fd59f80099c7bfe9319fa27c208e62", "url": "https://github.com/kframework/k/commit/112fb06b07fd59f80099c7bfe9319fa27c208e62", "message": "fix whitespace", "committedDate": "2020-05-04T17:52:52Z", "type": "commit"}, {"oid": "d1038aa2b3dc086bd13a2d29f73457b7eb7004e1", "url": "https://github.com/kframework/k/commit/d1038aa2b3dc086bd13a2d29f73457b7eb7004e1", "message": "fix more whitespace", "committedDate": "2020-05-04T17:52:52Z", "type": "commit"}, {"oid": "06107f918f0099f2f1102150ccaba15469fcae33", "url": "https://github.com/kframework/k/commit/06107f918f0099f2f1102150ccaba15469fcae33", "message": "fix compile error", "committedDate": "2020-05-04T17:52:52Z", "type": "commit"}, {"oid": "92cb12a50f8fcebc285618bd403f4c8c38b0bbad", "url": "https://github.com/kframework/k/commit/92cb12a50f8fcebc285618bd403f4c8c38b0bbad", "message": "fix bug in RuleGrammarGenerator", "committedDate": "2020-05-04T17:52:52Z", "type": "commit"}, {"oid": "36d45351accd7b0beb77f57c0823a09a550f1a9e", "url": "https://github.com/kframework/k/commit/36d45351accd7b0beb77f57c0823a09a550f1a9e", "message": "try to fix build", "committedDate": "2020-05-04T18:00:20Z", "type": "commit"}, {"oid": "36d45351accd7b0beb77f57c0823a09a550f1a9e", "url": "https://github.com/kframework/k/commit/36d45351accd7b0beb77f57c0823a09a550f1a9e", "message": "try to fix build", "committedDate": "2020-05-04T18:00:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1NTgwMQ==", "url": "https://github.com/kframework/k/pull/1247#discussion_r419755801", "bodyText": "Why the extra space? :)", "author": "radumereuta", "createdAt": "2020-05-04T22:02:28Z", "path": "kernel/src/main/java/org/kframework/parser/inner/kernel/Scanner.java", "diffHunk": "@@ -201,8 +207,8 @@ private void writeAction(StringBuilder flex, TerminalLike key) {\n     private void writeStandaloneAction(StringBuilder flex, TerminalLike key) {\n         flex.append(\" {\\n\" +\n             \"  int kind = \").append(tokens.get(key)._1()+1).append(\";\\n\" +\n-            \"  *((char **)&yylval) = malloc(strlen(yytext) + 1);\\n\" +\n-            \"  strcpy(*((char **)&yylval), yytext);\\n\" +\n+            \"  *((char **)yylval  ) = malloc(strlen(yytext) + 1);\\n\" +", "originalCommit": "36d45351accd7b0beb77f57c0823a09a550f1a9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "162c21f2532abfa9dd3d4f6ca9e8a2b20088cebf", "chunk": "diff --git a/kernel/src/main/java/org/kframework/parser/inner/kernel/Scanner.java b/kernel/src/main/java/org/kframework/parser/inner/kernel/Scanner.java\nindex 2c7e2e790..722743c42 100644\n--- a/kernel/src/main/java/org/kframework/parser/inner/kernel/Scanner.java\n+++ b/kernel/src/main/java/org/kframework/parser/inner/kernel/Scanner.java\n\n@@ -207,7 +207,7 @@ public class Scanner implements AutoCloseable {\n     private void writeStandaloneAction(StringBuilder flex, TerminalLike key) {\n         flex.append(\" {\\n\" +\n             \"  int kind = \").append(tokens.get(key)._1()+1).append(\";\\n\" +\n-            \"  *((char **)yylval  ) = malloc(strlen(yytext) + 1);\\n\" +\n+            \"  *((char **)yylval) = malloc(strlen(yytext) + 1);\\n\" +\n             \"  strcpy(*((char **)yylval), yytext);\\n\" +\n             \"  return kind;\\n\" +\n             \" }\\n\");\n"}}, {"oid": "162c21f2532abfa9dd3d4f6ca9e8a2b20088cebf", "url": "https://github.com/kframework/k/commit/162c21f2532abfa9dd3d4f6ca9e8a2b20088cebf", "message": "strip whitespace", "committedDate": "2020-05-05T14:42:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3MDk5NA==", "url": "https://github.com/kframework/k/pull/1247#discussion_r420170994", "bodyText": "We should emit a parser for each $ variable that shows up in the configuration, not just $PGM.", "author": "ehildenb", "createdAt": "2020-05-05T14:51:18Z", "path": "kernel/src/main/java/org/kframework/kompile/KompileOptions.java", "diffHunk": "@@ -135,6 +137,9 @@ public boolean isKore() {\n         @Parameter(names=\"--gen-bison-parser\", description=\"Emit bison parser for the PGM configuration variable within the syntax module of your definition into the kompiled definition.\")\n         public boolean genBisonParser;\n \n+        @Parameter(names=\"--gen-glr-bison-parser\", description=\"Emit GLR bison parser for the PGM configuration variable within the syntax module of your definition into the kompiled definition.\")\n+        public boolean genGlrBisonParser;", "originalCommit": "162c21f2532abfa9dd3d4f6ca9e8a2b20088cebf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3MTU1OA==", "url": "https://github.com/kframework/k/pull/1247#discussion_r420171558", "bodyText": "Should this be left instead?", "author": "ehildenb", "createdAt": "2020-05-05T14:52:00Z", "path": "kernel/src/main/java/org/kframework/kore/convertors/KILtoKORE.java", "diffHunk": "@@ -300,9 +303,15 @@ public void applyUserList(Set<org.kframework.definition.Sentence> res,\n         org.kframework.definition.Production prod1, prod3;\n \n         // Es ::= E \",\" Es\n-        prod1 = Production(KLabel(p.getKLabel(kore), immutable(p.getParams())), sort,\n-                Seq(NonTerminal(elementSort), Terminal(userList.getSeparator()), NonTerminal(sort)),\n-                attrs.add(\"right\"));\n+        if (bisonLists) {\n+          prod1 = Production(KLabel(p.getKLabel(kore), immutable(p.getParams())), sort,\n+                  Seq(NonTerminal(sort), Terminal(userList.getSeparator()), NonTerminal(elementSort)),\n+                  attrs.add(\"right\"));", "originalCommit": "162c21f2532abfa9dd3d4f6ca9e8a2b20088cebf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c36e119a1ca8c44536dc4d279bd0fbd4cae14f8e", "chunk": "diff --git a/kernel/src/main/java/org/kframework/kore/convertors/KILtoKORE.java b/kernel/src/main/java/org/kframework/kore/convertors/KILtoKORE.java\nindex 1ca80f249..6d694a7d2 100644\n--- a/kernel/src/main/java/org/kframework/kore/convertors/KILtoKORE.java\n+++ b/kernel/src/main/java/org/kframework/kore/convertors/KILtoKORE.java\n\n@@ -306,7 +306,7 @@ public class KILtoKORE extends KILTransformation<Object> {\n         if (bisonLists) {\n           prod1 = Production(KLabel(p.getKLabel(kore), immutable(p.getParams())), sort,\n                   Seq(NonTerminal(sort), Terminal(userList.getSeparator()), NonTerminal(elementSort)),\n-                  attrs.add(\"right\"));\n+                  attrs.add(\"left\"));\n         } else {\n           prod1 = Production(KLabel(p.getKLabel(kore), immutable(p.getParams())), sort,\n                   Seq(NonTerminal(elementSort), Terminal(userList.getSeparator()), NonTerminal(sort)),\n"}}, {"oid": "c36e119a1ca8c44536dc4d279bd0fbd4cae14f8e", "url": "https://github.com/kframework/k/commit/c36e119a1ca8c44536dc4d279bd0fbd4cae14f8e", "message": "fix associativity of list production with --bison-lists", "committedDate": "2020-05-05T15:33:16Z", "type": "commit"}, {"oid": "a8128f003a7fda511ac9e8dc9715f79d5458c257", "url": "https://github.com/kframework/k/commit/a8128f003a7fda511ac9e8dc9715f79d5458c257", "message": "Merge branch 'master' into glr", "committedDate": "2020-05-05T16:51:12Z", "type": "commit"}]}