{"pr_number": 5740, "pr_title": "DDF-5739: Added Core itests", "pr_createdAt": "2020-01-06T21:05:45Z", "pr_url": "https://github.com/codice/ddf/pull/5740", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4MzE3OQ==", "url": "https://github.com/codice/ddf/pull/5740#discussion_r363983179", "bodyText": "\u270f\ufe0f Combine declaration and instantiation.", "author": "jrnorth", "createdAt": "2020-01-07T22:29:17Z", "path": "distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.test.itests.core;\n+\n+import static com.jayway.restassured.RestAssured.get;\n+import static com.jayway.restassured.RestAssured.given;\n+import static com.jayway.restassured.RestAssured.when;\n+import static org.awaitility.Awaitility.await;\n+import static org.codice.ddf.itests.common.AbstractIntegrationTest.DynamicUrl.INSECURE_ROOT;\n+import static org.codice.ddf.itests.common.catalog.CatalogTestCommons.ingest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.GMD_CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswInsertRequest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswQuery;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswSourceProperties;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getMetacardIdFromCswInsertResponse;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.OPENSEARCH_FACTORY_PID;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearch;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearchSourceProperties;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.xml.HasXPath.hasXPath;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.jayway.restassured.http.ContentType;\n+import com.jayway.restassured.response.Response;\n+import com.xebialabs.restito.server.StubServer;\n+import com.xebialabs.restito.server.secure.SecureStubServer;\n+import ddf.catalog.data.Metacard;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.xml.xpath.XPathExpressionException;\n+import org.apache.commons.io.FileUtils;\n+import org.codice.ddf.itests.common.AbstractIntegrationTest;\n+import org.codice.ddf.itests.common.config.UrlResourceReaderConfigurator;\n+import org.codice.ddf.itests.common.csw.mock.FederatedCswMockServer;\n+import org.codice.ddf.test.common.annotations.AfterExam;\n+import org.codice.ddf.test.common.annotations.BeforeExam;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.junit.PaxExam;\n+import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;\n+import org.ops4j.pax.exam.spi.reactors.PerSuite;\n+\n+@RunWith(PaxExam.class)\n+@ExamReactorStrategy(PerSuite.class)\n+public class DdfCoreIT extends AbstractIntegrationTest {\n+\n+  private static final DynamicUrl SECURE_ROOT_AND_PORT =\n+      new DynamicUrl(DynamicUrl.SECURE_ROOT, HTTPS_PORT);\n+\n+  private static final DynamicUrl ADMIN_PATH =\n+      new DynamicUrl(SECURE_ROOT_AND_PORT, \"/admin/index.html\");\n+\n+  private static final String RECORD_TITLE_1 = \"myTitle\";\n+\n+  private static final String RECORD_TITLE_2 = \"myXmlTitle\";\n+\n+  private static final DynamicPort RESTITO_STUB_SERVER_PORT = new DynamicPort(6);\n+  private UrlResourceReaderConfigurator urlResourceReaderConfigurator;\n+  private static StubServer server;\n+  private static final String SAMPLE_DATA = \"sample data\";\n+  private static FederatedCswMockServer cswServer;\n+  private static final String DEFAULT_SAMPLE_PRODUCT_FILE_NAME = \"sample.txt\";\n+  private static final String DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS = \"data/products\";\n+  private final List<String> resourcesToDelete = new ArrayList<>();\n+\n+  private static final int MAX_DOWNLOAD_RETRY_ATTEMPTS = 3;\n+  private static final String CSW_STUB_SOURCE_ID = \"cswStubServer\";\n+  private static final DynamicPort CSW_STUB_SERVER_PORT = new DynamicPort(7);\n+  private static final DynamicUrl CSW_STUB_SERVER_PATH =\n+      new DynamicUrl(INSECURE_ROOT, CSW_STUB_SERVER_PORT, \"/services/csw\");\n+  private static final String POLL_INTERVAL = \"pollInterval\";\n+  private static final int CSW_SOURCE_POLL_INTERVAL = 10;\n+  private static final String CSW_SOURCE_WITH_METACARD_XML_ID = \"cswSource2\";\n+  private static final String GMD_SOURCE_ID = \"gmdSource\";\n+\n+  @BeforeExam\n+  public void beforeExam() throws Exception {\n+    getCatalogBundle().setupMaxDownloadRetryAttempts(MAX_DOWNLOAD_RETRY_ATTEMPTS);\n+\n+    setupOpenSearch();\n+\n+    setupCswServer();\n+\n+    setupGmd();\n+\n+    getCatalogBundle().waitForFederatedSource(OPENSEARCH_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_STUB_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_WITH_METACARD_XML_ID);\n+    getCatalogBundle().waitForFederatedSource(GMD_SOURCE_ID);\n+\n+    getServiceManager()\n+        .waitForSourcesToBeAvailable(\n+            REST_PATH.getUrl(),\n+            OPENSEARCH_SOURCE_ID,\n+            CSW_STUB_SOURCE_ID,\n+            CSW_SOURCE_ID,\n+            CSW_SOURCE_WITH_METACARD_XML_ID,\n+            GMD_SOURCE_ID);\n+\n+    LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n+  }\n+\n+  @AfterExam\n+  public void afterExam() {\n+    if (cswServer != null) {\n+      cswServer.stop();\n+    }\n+  }\n+\n+  @Before\n+  public void setup() throws Exception {\n+\n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+\n+    getCatalogBundle().setupCaching(false);\n+    urlResourceReaderConfigurator = getUrlResourceReaderConfigurator();\n+\n+    server = new SecureStubServer(Integer.parseInt(RESTITO_STUB_SERVER_PORT.getPort())).run();\n+    server.start();\n+\n+    cswServer.reset();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    clearCatalogAndWait();\n+    configureRestForGuest();\n+\n+    urlResourceReaderConfigurator.setUrlResourceReaderRootDirs(\n+        DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS);\n+\n+    for (String resource : resourcesToDelete) {\n+      FileUtils.deleteQuietly(new File(resource));\n+    }\n+\n+    resourcesToDelete.clear();\n+\n+    cswServer.stop();\n+\n+    getSecurityPolicy().configureRestForGuest();\n+\n+    if (server != null) {\n+      server.stop();\n+    }\n+  }\n+\n+  @Test\n+  public void testCswIngest() {\n+    Response response = ingestCswRecord();\n+\n+    response\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"1\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"0\")),\n+            hasXPath(\n+                \"//TransactionResponse/InsertResult/BriefRecord/title\",\n+                is(\"Aliquam fermentum purus quis arcu\")),\n+            hasXPath(\"//TransactionResponse/InsertResult/BriefRecord/BoundingBox\"));\n+  }\n+\n+  @Test\n+  public void testCswDeleteMultiple() {\n+    ingestCswRecord();\n+    ingestCswRecord();\n+\n+    given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(getFileContent(CSW_REQUEST_RESOURCE_PATH + \"/CswFilterDeleteRequest\"))\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"2\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"0\")));\n+  }\n+\n+  @Test\n+  public void testCswUpdateByFilterConstraint() throws IOException, XPathExpressionException {\n+    Response firstResponse = ingestCswRecord();\n+    Response secondResponse = ingestCswRecord();\n+\n+    given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(getFileContent(CSW_REQUEST_RESOURCE_PATH + \"/CswUpdateByFilterConstraintRequest\"))\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"2\")));\n+\n+    String firstId;", "originalCommit": "6267485bce585c04a16944a1d78ca821de8e4b0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffcda44d9e6a4160707ae7e8985efdcb11eaa921", "chunk": "diff --git a/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java b/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\nindex c7ecbfe2aa..8d3b1aef00 100644\n--- a/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\n+++ b/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\n\n@@ -127,6 +127,9 @@ public void beforeExam() throws Exception {\n             CSW_SOURCE_WITH_METACARD_XML_ID,\n             GMD_SOURCE_ID);\n \n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+    getCatalogBundle().setupCaching(false);\n+\n     LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4NTE5Mw==", "url": "https://github.com/codice/ddf/pull/5740#discussion_r363985193", "bodyText": "\u2753Should we remove the corresponding tests from TestCatalog?", "author": "jrnorth", "createdAt": "2020-01-07T22:35:04Z", "path": "distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.test.itests.core;\n+\n+import static com.jayway.restassured.RestAssured.get;\n+import static com.jayway.restassured.RestAssured.given;\n+import static com.jayway.restassured.RestAssured.when;\n+import static org.awaitility.Awaitility.await;\n+import static org.codice.ddf.itests.common.AbstractIntegrationTest.DynamicUrl.INSECURE_ROOT;\n+import static org.codice.ddf.itests.common.catalog.CatalogTestCommons.ingest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.GMD_CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswInsertRequest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswQuery;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswSourceProperties;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getMetacardIdFromCswInsertResponse;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.OPENSEARCH_FACTORY_PID;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearch;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearchSourceProperties;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.xml.HasXPath.hasXPath;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.jayway.restassured.http.ContentType;\n+import com.jayway.restassured.response.Response;\n+import com.xebialabs.restito.server.StubServer;\n+import com.xebialabs.restito.server.secure.SecureStubServer;\n+import ddf.catalog.data.Metacard;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.xml.xpath.XPathExpressionException;\n+import org.apache.commons.io.FileUtils;\n+import org.codice.ddf.itests.common.AbstractIntegrationTest;\n+import org.codice.ddf.itests.common.config.UrlResourceReaderConfigurator;\n+import org.codice.ddf.itests.common.csw.mock.FederatedCswMockServer;\n+import org.codice.ddf.test.common.annotations.AfterExam;\n+import org.codice.ddf.test.common.annotations.BeforeExam;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.junit.PaxExam;\n+import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;\n+import org.ops4j.pax.exam.spi.reactors.PerSuite;\n+\n+@RunWith(PaxExam.class)\n+@ExamReactorStrategy(PerSuite.class)\n+public class DdfCoreIT extends AbstractIntegrationTest {\n+\n+  private static final DynamicUrl SECURE_ROOT_AND_PORT =\n+      new DynamicUrl(DynamicUrl.SECURE_ROOT, HTTPS_PORT);\n+\n+  private static final DynamicUrl ADMIN_PATH =\n+      new DynamicUrl(SECURE_ROOT_AND_PORT, \"/admin/index.html\");\n+\n+  private static final String RECORD_TITLE_1 = \"myTitle\";\n+\n+  private static final String RECORD_TITLE_2 = \"myXmlTitle\";\n+\n+  private static final DynamicPort RESTITO_STUB_SERVER_PORT = new DynamicPort(6);\n+  private UrlResourceReaderConfigurator urlResourceReaderConfigurator;\n+  private static StubServer server;\n+  private static final String SAMPLE_DATA = \"sample data\";\n+  private static FederatedCswMockServer cswServer;\n+  private static final String DEFAULT_SAMPLE_PRODUCT_FILE_NAME = \"sample.txt\";\n+  private static final String DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS = \"data/products\";\n+  private final List<String> resourcesToDelete = new ArrayList<>();\n+\n+  private static final int MAX_DOWNLOAD_RETRY_ATTEMPTS = 3;\n+  private static final String CSW_STUB_SOURCE_ID = \"cswStubServer\";\n+  private static final DynamicPort CSW_STUB_SERVER_PORT = new DynamicPort(7);\n+  private static final DynamicUrl CSW_STUB_SERVER_PATH =\n+      new DynamicUrl(INSECURE_ROOT, CSW_STUB_SERVER_PORT, \"/services/csw\");\n+  private static final String POLL_INTERVAL = \"pollInterval\";\n+  private static final int CSW_SOURCE_POLL_INTERVAL = 10;\n+  private static final String CSW_SOURCE_WITH_METACARD_XML_ID = \"cswSource2\";\n+  private static final String GMD_SOURCE_ID = \"gmdSource\";\n+\n+  @BeforeExam\n+  public void beforeExam() throws Exception {\n+    getCatalogBundle().setupMaxDownloadRetryAttempts(MAX_DOWNLOAD_RETRY_ATTEMPTS);\n+\n+    setupOpenSearch();\n+\n+    setupCswServer();\n+\n+    setupGmd();\n+\n+    getCatalogBundle().waitForFederatedSource(OPENSEARCH_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_STUB_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_WITH_METACARD_XML_ID);\n+    getCatalogBundle().waitForFederatedSource(GMD_SOURCE_ID);\n+\n+    getServiceManager()\n+        .waitForSourcesToBeAvailable(\n+            REST_PATH.getUrl(),\n+            OPENSEARCH_SOURCE_ID,\n+            CSW_STUB_SOURCE_ID,\n+            CSW_SOURCE_ID,\n+            CSW_SOURCE_WITH_METACARD_XML_ID,\n+            GMD_SOURCE_ID);\n+\n+    LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n+  }\n+\n+  @AfterExam\n+  public void afterExam() {\n+    if (cswServer != null) {\n+      cswServer.stop();\n+    }\n+  }\n+\n+  @Before\n+  public void setup() throws Exception {\n+\n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+\n+    getCatalogBundle().setupCaching(false);\n+    urlResourceReaderConfigurator = getUrlResourceReaderConfigurator();\n+\n+    server = new SecureStubServer(Integer.parseInt(RESTITO_STUB_SERVER_PORT.getPort())).run();\n+    server.start();\n+\n+    cswServer.reset();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    clearCatalogAndWait();\n+    configureRestForGuest();\n+\n+    urlResourceReaderConfigurator.setUrlResourceReaderRootDirs(\n+        DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS);\n+\n+    for (String resource : resourcesToDelete) {\n+      FileUtils.deleteQuietly(new File(resource));\n+    }\n+\n+    resourcesToDelete.clear();\n+\n+    cswServer.stop();\n+\n+    getSecurityPolicy().configureRestForGuest();\n+\n+    if (server != null) {\n+      server.stop();\n+    }\n+  }\n+\n+  @Test\n+  public void testCswIngest() {", "originalCommit": "6267485bce585c04a16944a1d78ca821de8e4b0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffcda44d9e6a4160707ae7e8985efdcb11eaa921", "chunk": "diff --git a/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java b/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\nindex c7ecbfe2aa..8d3b1aef00 100644\n--- a/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\n+++ b/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\n\n@@ -127,6 +127,9 @@ public void beforeExam() throws Exception {\n             CSW_SOURCE_WITH_METACARD_XML_ID,\n             GMD_SOURCE_ID);\n \n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+    getCatalogBundle().setupCaching(false);\n+\n     LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4NTc4Mw==", "url": "https://github.com/codice/ddf/pull/5740#discussion_r363985783", "bodyText": "Already handled by the configureRestForGuest() call above.", "author": "jrnorth", "createdAt": "2020-01-07T22:36:49Z", "path": "distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.test.itests.core;\n+\n+import static com.jayway.restassured.RestAssured.get;\n+import static com.jayway.restassured.RestAssured.given;\n+import static com.jayway.restassured.RestAssured.when;\n+import static org.awaitility.Awaitility.await;\n+import static org.codice.ddf.itests.common.AbstractIntegrationTest.DynamicUrl.INSECURE_ROOT;\n+import static org.codice.ddf.itests.common.catalog.CatalogTestCommons.ingest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.GMD_CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswInsertRequest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswQuery;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswSourceProperties;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getMetacardIdFromCswInsertResponse;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.OPENSEARCH_FACTORY_PID;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearch;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearchSourceProperties;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.xml.HasXPath.hasXPath;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.jayway.restassured.http.ContentType;\n+import com.jayway.restassured.response.Response;\n+import com.xebialabs.restito.server.StubServer;\n+import com.xebialabs.restito.server.secure.SecureStubServer;\n+import ddf.catalog.data.Metacard;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.xml.xpath.XPathExpressionException;\n+import org.apache.commons.io.FileUtils;\n+import org.codice.ddf.itests.common.AbstractIntegrationTest;\n+import org.codice.ddf.itests.common.config.UrlResourceReaderConfigurator;\n+import org.codice.ddf.itests.common.csw.mock.FederatedCswMockServer;\n+import org.codice.ddf.test.common.annotations.AfterExam;\n+import org.codice.ddf.test.common.annotations.BeforeExam;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.junit.PaxExam;\n+import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;\n+import org.ops4j.pax.exam.spi.reactors.PerSuite;\n+\n+@RunWith(PaxExam.class)\n+@ExamReactorStrategy(PerSuite.class)\n+public class DdfCoreIT extends AbstractIntegrationTest {\n+\n+  private static final DynamicUrl SECURE_ROOT_AND_PORT =\n+      new DynamicUrl(DynamicUrl.SECURE_ROOT, HTTPS_PORT);\n+\n+  private static final DynamicUrl ADMIN_PATH =\n+      new DynamicUrl(SECURE_ROOT_AND_PORT, \"/admin/index.html\");\n+\n+  private static final String RECORD_TITLE_1 = \"myTitle\";\n+\n+  private static final String RECORD_TITLE_2 = \"myXmlTitle\";\n+\n+  private static final DynamicPort RESTITO_STUB_SERVER_PORT = new DynamicPort(6);\n+  private UrlResourceReaderConfigurator urlResourceReaderConfigurator;\n+  private static StubServer server;\n+  private static final String SAMPLE_DATA = \"sample data\";\n+  private static FederatedCswMockServer cswServer;\n+  private static final String DEFAULT_SAMPLE_PRODUCT_FILE_NAME = \"sample.txt\";\n+  private static final String DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS = \"data/products\";\n+  private final List<String> resourcesToDelete = new ArrayList<>();\n+\n+  private static final int MAX_DOWNLOAD_RETRY_ATTEMPTS = 3;\n+  private static final String CSW_STUB_SOURCE_ID = \"cswStubServer\";\n+  private static final DynamicPort CSW_STUB_SERVER_PORT = new DynamicPort(7);\n+  private static final DynamicUrl CSW_STUB_SERVER_PATH =\n+      new DynamicUrl(INSECURE_ROOT, CSW_STUB_SERVER_PORT, \"/services/csw\");\n+  private static final String POLL_INTERVAL = \"pollInterval\";\n+  private static final int CSW_SOURCE_POLL_INTERVAL = 10;\n+  private static final String CSW_SOURCE_WITH_METACARD_XML_ID = \"cswSource2\";\n+  private static final String GMD_SOURCE_ID = \"gmdSource\";\n+\n+  @BeforeExam\n+  public void beforeExam() throws Exception {\n+    getCatalogBundle().setupMaxDownloadRetryAttempts(MAX_DOWNLOAD_RETRY_ATTEMPTS);\n+\n+    setupOpenSearch();\n+\n+    setupCswServer();\n+\n+    setupGmd();\n+\n+    getCatalogBundle().waitForFederatedSource(OPENSEARCH_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_STUB_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_WITH_METACARD_XML_ID);\n+    getCatalogBundle().waitForFederatedSource(GMD_SOURCE_ID);\n+\n+    getServiceManager()\n+        .waitForSourcesToBeAvailable(\n+            REST_PATH.getUrl(),\n+            OPENSEARCH_SOURCE_ID,\n+            CSW_STUB_SOURCE_ID,\n+            CSW_SOURCE_ID,\n+            CSW_SOURCE_WITH_METACARD_XML_ID,\n+            GMD_SOURCE_ID);\n+\n+    LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n+  }\n+\n+  @AfterExam\n+  public void afterExam() {\n+    if (cswServer != null) {\n+      cswServer.stop();\n+    }\n+  }\n+\n+  @Before\n+  public void setup() throws Exception {\n+\n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+\n+    getCatalogBundle().setupCaching(false);\n+    urlResourceReaderConfigurator = getUrlResourceReaderConfigurator();\n+\n+    server = new SecureStubServer(Integer.parseInt(RESTITO_STUB_SERVER_PORT.getPort())).run();\n+    server.start();\n+\n+    cswServer.reset();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    clearCatalogAndWait();\n+    configureRestForGuest();\n+\n+    urlResourceReaderConfigurator.setUrlResourceReaderRootDirs(\n+        DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS);\n+\n+    for (String resource : resourcesToDelete) {\n+      FileUtils.deleteQuietly(new File(resource));\n+    }\n+\n+    resourcesToDelete.clear();\n+\n+    cswServer.stop();\n+\n+    getSecurityPolicy().configureRestForGuest();", "originalCommit": "6267485bce585c04a16944a1d78ca821de8e4b0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffcda44d9e6a4160707ae7e8985efdcb11eaa921", "chunk": "diff --git a/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java b/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\nindex c7ecbfe2aa..8d3b1aef00 100644\n--- a/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\n+++ b/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\n\n@@ -127,6 +127,9 @@ public void beforeExam() throws Exception {\n             CSW_SOURCE_WITH_METACARD_XML_ID,\n             GMD_SOURCE_ID);\n \n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+    getCatalogBundle().setupCaching(false);\n+\n     LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4NjY5MQ==", "url": "https://github.com/codice/ddf/pull/5740#discussion_r363986691", "bodyText": "Could these be moved to beforeExam()?", "author": "jrnorth", "createdAt": "2020-01-07T22:39:25Z", "path": "distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.test.itests.core;\n+\n+import static com.jayway.restassured.RestAssured.get;\n+import static com.jayway.restassured.RestAssured.given;\n+import static com.jayway.restassured.RestAssured.when;\n+import static org.awaitility.Awaitility.await;\n+import static org.codice.ddf.itests.common.AbstractIntegrationTest.DynamicUrl.INSECURE_ROOT;\n+import static org.codice.ddf.itests.common.catalog.CatalogTestCommons.ingest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.GMD_CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswInsertRequest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswQuery;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswSourceProperties;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getMetacardIdFromCswInsertResponse;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.OPENSEARCH_FACTORY_PID;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearch;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearchSourceProperties;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.xml.HasXPath.hasXPath;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.jayway.restassured.http.ContentType;\n+import com.jayway.restassured.response.Response;\n+import com.xebialabs.restito.server.StubServer;\n+import com.xebialabs.restito.server.secure.SecureStubServer;\n+import ddf.catalog.data.Metacard;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.xml.xpath.XPathExpressionException;\n+import org.apache.commons.io.FileUtils;\n+import org.codice.ddf.itests.common.AbstractIntegrationTest;\n+import org.codice.ddf.itests.common.config.UrlResourceReaderConfigurator;\n+import org.codice.ddf.itests.common.csw.mock.FederatedCswMockServer;\n+import org.codice.ddf.test.common.annotations.AfterExam;\n+import org.codice.ddf.test.common.annotations.BeforeExam;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.junit.PaxExam;\n+import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;\n+import org.ops4j.pax.exam.spi.reactors.PerSuite;\n+\n+@RunWith(PaxExam.class)\n+@ExamReactorStrategy(PerSuite.class)\n+public class DdfCoreIT extends AbstractIntegrationTest {\n+\n+  private static final DynamicUrl SECURE_ROOT_AND_PORT =\n+      new DynamicUrl(DynamicUrl.SECURE_ROOT, HTTPS_PORT);\n+\n+  private static final DynamicUrl ADMIN_PATH =\n+      new DynamicUrl(SECURE_ROOT_AND_PORT, \"/admin/index.html\");\n+\n+  private static final String RECORD_TITLE_1 = \"myTitle\";\n+\n+  private static final String RECORD_TITLE_2 = \"myXmlTitle\";\n+\n+  private static final DynamicPort RESTITO_STUB_SERVER_PORT = new DynamicPort(6);\n+  private UrlResourceReaderConfigurator urlResourceReaderConfigurator;\n+  private static StubServer server;\n+  private static final String SAMPLE_DATA = \"sample data\";\n+  private static FederatedCswMockServer cswServer;\n+  private static final String DEFAULT_SAMPLE_PRODUCT_FILE_NAME = \"sample.txt\";\n+  private static final String DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS = \"data/products\";\n+  private final List<String> resourcesToDelete = new ArrayList<>();\n+\n+  private static final int MAX_DOWNLOAD_RETRY_ATTEMPTS = 3;\n+  private static final String CSW_STUB_SOURCE_ID = \"cswStubServer\";\n+  private static final DynamicPort CSW_STUB_SERVER_PORT = new DynamicPort(7);\n+  private static final DynamicUrl CSW_STUB_SERVER_PATH =\n+      new DynamicUrl(INSECURE_ROOT, CSW_STUB_SERVER_PORT, \"/services/csw\");\n+  private static final String POLL_INTERVAL = \"pollInterval\";\n+  private static final int CSW_SOURCE_POLL_INTERVAL = 10;\n+  private static final String CSW_SOURCE_WITH_METACARD_XML_ID = \"cswSource2\";\n+  private static final String GMD_SOURCE_ID = \"gmdSource\";\n+\n+  @BeforeExam\n+  public void beforeExam() throws Exception {\n+    getCatalogBundle().setupMaxDownloadRetryAttempts(MAX_DOWNLOAD_RETRY_ATTEMPTS);\n+\n+    setupOpenSearch();\n+\n+    setupCswServer();\n+\n+    setupGmd();\n+\n+    getCatalogBundle().waitForFederatedSource(OPENSEARCH_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_STUB_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_WITH_METACARD_XML_ID);\n+    getCatalogBundle().waitForFederatedSource(GMD_SOURCE_ID);\n+\n+    getServiceManager()\n+        .waitForSourcesToBeAvailable(\n+            REST_PATH.getUrl(),\n+            OPENSEARCH_SOURCE_ID,\n+            CSW_STUB_SOURCE_ID,\n+            CSW_SOURCE_ID,\n+            CSW_SOURCE_WITH_METACARD_XML_ID,\n+            GMD_SOURCE_ID);\n+\n+    LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n+  }\n+\n+  @AfterExam\n+  public void afterExam() {\n+    if (cswServer != null) {\n+      cswServer.stop();\n+    }\n+  }\n+\n+  @Before\n+  public void setup() throws Exception {\n+\n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+\n+    getCatalogBundle().setupCaching(false);", "originalCommit": "6267485bce585c04a16944a1d78ca821de8e4b0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffcda44d9e6a4160707ae7e8985efdcb11eaa921", "chunk": "diff --git a/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java b/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\nindex c7ecbfe2aa..8d3b1aef00 100644\n--- a/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\n+++ b/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\n\n@@ -127,6 +127,9 @@ public void beforeExam() throws Exception {\n             CSW_SOURCE_WITH_METACARD_XML_ID,\n             GMD_SOURCE_ID);\n \n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+    getCatalogBundle().setupCaching(false);\n+\n     LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAwNDUyNg==", "url": "https://github.com/codice/ddf/pull/5740#discussion_r364004526", "bodyText": "\u270f\ufe0f Do we need any of these getPid() calls?", "author": "jrnorth", "createdAt": "2020-01-07T23:40:29Z", "path": "distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.test.itests.core;\n+\n+import static com.jayway.restassured.RestAssured.get;\n+import static com.jayway.restassured.RestAssured.given;\n+import static com.jayway.restassured.RestAssured.when;\n+import static org.awaitility.Awaitility.await;\n+import static org.codice.ddf.itests.common.AbstractIntegrationTest.DynamicUrl.INSECURE_ROOT;\n+import static org.codice.ddf.itests.common.catalog.CatalogTestCommons.ingest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.GMD_CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswInsertRequest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswQuery;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswSourceProperties;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getMetacardIdFromCswInsertResponse;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.OPENSEARCH_FACTORY_PID;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearch;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearchSourceProperties;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.xml.HasXPath.hasXPath;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.jayway.restassured.http.ContentType;\n+import com.jayway.restassured.response.Response;\n+import com.xebialabs.restito.server.StubServer;\n+import com.xebialabs.restito.server.secure.SecureStubServer;\n+import ddf.catalog.data.Metacard;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.xml.xpath.XPathExpressionException;\n+import org.apache.commons.io.FileUtils;\n+import org.codice.ddf.itests.common.AbstractIntegrationTest;\n+import org.codice.ddf.itests.common.config.UrlResourceReaderConfigurator;\n+import org.codice.ddf.itests.common.csw.mock.FederatedCswMockServer;\n+import org.codice.ddf.test.common.annotations.AfterExam;\n+import org.codice.ddf.test.common.annotations.BeforeExam;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.junit.PaxExam;\n+import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;\n+import org.ops4j.pax.exam.spi.reactors.PerSuite;\n+\n+@RunWith(PaxExam.class)\n+@ExamReactorStrategy(PerSuite.class)\n+public class DdfCoreIT extends AbstractIntegrationTest {\n+\n+  private static final DynamicUrl SECURE_ROOT_AND_PORT =\n+      new DynamicUrl(DynamicUrl.SECURE_ROOT, HTTPS_PORT);\n+\n+  private static final DynamicUrl ADMIN_PATH =\n+      new DynamicUrl(SECURE_ROOT_AND_PORT, \"/admin/index.html\");\n+\n+  private static final String RECORD_TITLE_1 = \"myTitle\";\n+\n+  private static final String RECORD_TITLE_2 = \"myXmlTitle\";\n+\n+  private static final DynamicPort RESTITO_STUB_SERVER_PORT = new DynamicPort(6);\n+  private UrlResourceReaderConfigurator urlResourceReaderConfigurator;\n+  private static StubServer server;\n+  private static final String SAMPLE_DATA = \"sample data\";\n+  private static FederatedCswMockServer cswServer;\n+  private static final String DEFAULT_SAMPLE_PRODUCT_FILE_NAME = \"sample.txt\";\n+  private static final String DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS = \"data/products\";\n+  private final List<String> resourcesToDelete = new ArrayList<>();\n+\n+  private static final int MAX_DOWNLOAD_RETRY_ATTEMPTS = 3;\n+  private static final String CSW_STUB_SOURCE_ID = \"cswStubServer\";\n+  private static final DynamicPort CSW_STUB_SERVER_PORT = new DynamicPort(7);\n+  private static final DynamicUrl CSW_STUB_SERVER_PATH =\n+      new DynamicUrl(INSECURE_ROOT, CSW_STUB_SERVER_PORT, \"/services/csw\");\n+  private static final String POLL_INTERVAL = \"pollInterval\";\n+  private static final int CSW_SOURCE_POLL_INTERVAL = 10;\n+  private static final String CSW_SOURCE_WITH_METACARD_XML_ID = \"cswSource2\";\n+  private static final String GMD_SOURCE_ID = \"gmdSource\";\n+\n+  @BeforeExam\n+  public void beforeExam() throws Exception {\n+    getCatalogBundle().setupMaxDownloadRetryAttempts(MAX_DOWNLOAD_RETRY_ATTEMPTS);\n+\n+    setupOpenSearch();\n+\n+    setupCswServer();\n+\n+    setupGmd();\n+\n+    getCatalogBundle().waitForFederatedSource(OPENSEARCH_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_STUB_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_WITH_METACARD_XML_ID);\n+    getCatalogBundle().waitForFederatedSource(GMD_SOURCE_ID);\n+\n+    getServiceManager()\n+        .waitForSourcesToBeAvailable(\n+            REST_PATH.getUrl(),\n+            OPENSEARCH_SOURCE_ID,\n+            CSW_STUB_SOURCE_ID,\n+            CSW_SOURCE_ID,\n+            CSW_SOURCE_WITH_METACARD_XML_ID,\n+            GMD_SOURCE_ID);\n+\n+    LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n+  }\n+\n+  @AfterExam\n+  public void afterExam() {\n+    if (cswServer != null) {\n+      cswServer.stop();\n+    }\n+  }\n+\n+  @Before\n+  public void setup() throws Exception {\n+\n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+\n+    getCatalogBundle().setupCaching(false);\n+    urlResourceReaderConfigurator = getUrlResourceReaderConfigurator();\n+\n+    server = new SecureStubServer(Integer.parseInt(RESTITO_STUB_SERVER_PORT.getPort())).run();\n+    server.start();\n+\n+    cswServer.reset();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    clearCatalogAndWait();\n+    configureRestForGuest();\n+\n+    urlResourceReaderConfigurator.setUrlResourceReaderRootDirs(\n+        DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS);\n+\n+    for (String resource : resourcesToDelete) {\n+      FileUtils.deleteQuietly(new File(resource));\n+    }\n+\n+    resourcesToDelete.clear();\n+\n+    cswServer.stop();\n+\n+    getSecurityPolicy().configureRestForGuest();\n+\n+    if (server != null) {\n+      server.stop();\n+    }\n+  }\n+\n+  @Test\n+  public void testCswIngest() {\n+    Response response = ingestCswRecord();\n+\n+    response\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"1\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"0\")),\n+            hasXPath(\n+                \"//TransactionResponse/InsertResult/BriefRecord/title\",\n+                is(\"Aliquam fermentum purus quis arcu\")),\n+            hasXPath(\"//TransactionResponse/InsertResult/BriefRecord/BoundingBox\"));\n+  }\n+\n+  @Test\n+  public void testCswDeleteMultiple() {\n+    ingestCswRecord();\n+    ingestCswRecord();\n+\n+    given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(getFileContent(CSW_REQUEST_RESOURCE_PATH + \"/CswFilterDeleteRequest\"))\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"2\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"0\")));\n+  }\n+\n+  @Test\n+  public void testCswUpdateByFilterConstraint() throws IOException, XPathExpressionException {\n+    Response firstResponse = ingestCswRecord();\n+    Response secondResponse = ingestCswRecord();\n+\n+    given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(getFileContent(CSW_REQUEST_RESOURCE_PATH + \"/CswUpdateByFilterConstraintRequest\"))\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"2\")));\n+\n+    String firstId;\n+    String secondId;\n+\n+    firstId = getMetacardIdFromCswInsertResponse(firstResponse);\n+    secondId = getMetacardIdFromCswInsertResponse(secondResponse);\n+\n+    String firstUrl = REST_PATH.getUrl() + firstId;\n+    when()\n+        .get(firstUrl)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        // Check that the updated attributes were changed.\n+        .body(\n+            hasXPath(\"//metacard/dateTime[@name='modified']/value\", startsWith(\"2015-08-25\")),\n+            hasXPath(\"//metacard/string[@name='title']/value\", is(\"Updated Title\")),\n+            hasXPath(\"//metacard/string[@name='media.format']/value\", is(\"\")),\n+            // Check that an attribute that was not updated was not changed.\n+            hasXPath(\n+                \"//metacard/string[@name='topic.category']/value\",\n+                is(\"Hydrography--Dictionaries\")));\n+\n+    String secondUrl = REST_PATH.getUrl() + secondId;\n+    when()\n+        .get(secondUrl)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        // Check that the updated attributes were changed.\n+        .body(\n+            hasXPath(\"//metacard/dateTime[@name='modified']/value\", startsWith(\"2015-08-25\")),\n+            hasXPath(\"//metacard/string[@name='title']/value\", is(\"Updated Title\")),\n+            hasXPath(\"//metacard/string[@name='media.format']/value\", is(\"\")),\n+            // Check that an attribute that was not updated was not changed.\n+            hasXPath(\n+                \"//metacard/string[@name='topic.category']/value\",\n+                is(\"Hydrography--Dictionaries\")));\n+  }\n+\n+  @Test\n+  public void testBasicRestAccess() throws Exception {\n+    String url = SERVICE_ROOT.getUrl() + \"/catalog/query?q=*&src=local\";\n+\n+    waitForSecurityHandlers(url);\n+\n+    configureRestForBasic(\"/services/sdk\");\n+\n+    // Make sure that no credentials receives a 401\n+    getSecurityPolicy().waitForBasicAuthReady(url);\n+    when().get(url).then().log().all().assertThat().statusCode(equalTo(401));\n+\n+    // A random user receives a 401\n+    given()\n+        .auth()\n+        .basic(\"bad\", \"user\")\n+        .when()\n+        .get(url)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        .statusCode(equalTo(401));\n+\n+    // A real user receives a SSO token\n+    String cookie =\n+        given()\n+            .auth()\n+            .basic(\"admin\", \"admin\")\n+            .when()\n+            .get(url)\n+            .then()\n+            .log()\n+            .ifValidationFails()\n+            .assertThat()\n+            .statusCode(equalTo(200))\n+            .assertThat()\n+            .header(\"Set-Cookie\", containsString(\"JSESSIONID\"))\n+            .extract()\n+            .cookie(\"JSESSIONID\");\n+\n+    // Try the session instead of basic auth\n+    given()\n+        .cookie(\"JSESSIONID\", cookie)\n+        .when()\n+        .get(url)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        .statusCode(equalTo(200));\n+\n+    // Admin user should be able to access the admin page\n+    given()\n+        .cookie(\"JSESSIONID\", cookie)\n+        .when()\n+        .get(ADMIN_PATH.getUrl())\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        .statusCode(equalTo(200));\n+  }\n+\n+  @Test\n+  public void testFederatedSpatial() throws IOException {\n+    ingest(getFileContent(JSON_RECORD_RESOURCE_PATH + \"/SimpleGeoJsonRecord\"), \"application/json\");\n+    ingestXmlWithProduct(DEFAULT_SAMPLE_PRODUCT_FILE_NAME);\n+\n+    getOpenSearch(\n+            \"xml\",\n+            null,\n+            null,\n+            \"lat=10.0\",\n+            \"lon=30.0\",\n+            \"radius=250000\",\n+            \"spatialType=POINT_RADIUS\",\n+            \"src=\" + OPENSEARCH_SOURCE_ID)\n+        .assertThat()\n+        .body(\n+            Matchers.hasXPath(\n+                \"/metacards/metacard/string[@name='\"\n+                    + Metacard.TITLE\n+                    + \"']/value[text()='\"\n+                    + RECORD_TITLE_1\n+                    + \"']\"),\n+            Matchers.hasXPath(\n+                \"/metacards/metacard/string[@name='\"\n+                    + Metacard.TITLE\n+                    + \"']/value[text()='\"\n+                    + RECORD_TITLE_2\n+                    + \"']\"));\n+  }\n+\n+  @Test\n+  public void testCswQueryByTitle() {\n+    String geojsonId =\n+        ingest(\n+            getFileContent(JSON_RECORD_RESOURCE_PATH + \"/SimpleGeoJsonRecord\"), \"application/json\");\n+\n+    String titleQuery =\n+        getCswQuery(\"title\", \"myTitle\", \"application/xml\", \"http://www.opengis.net/cat/csw/2.0.2\");\n+\n+    given()\n+        .contentType(ContentType.XML)\n+        .body(titleQuery)\n+        .when()\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .assertThat()\n+        .body(\n+            Matchers.hasXPath(\n+                \"/GetRecordsResponse/SearchResults/Record/identifier\", Matchers.is(geojsonId)),\n+            Matchers.hasXPath(\n+                \"/GetRecordsResponse/SearchResults/@numberOfRecordsReturned\", Matchers.is(\"1\")));\n+  }\n+\n+  private Response ingestCswRecord() {\n+    String uuid = UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n+\n+    return given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(\n+            getCswInsertRequest(\n+                \"csw:Record\",\n+                getFileContent(\n+                    CSW_RECORD_RESOURCE_PATH + \"/CswRecord\", ImmutableMap.of(\"id\", uuid))))\n+        .post(CSW_PATH.getUrl());\n+  }\n+\n+  private void waitForSecurityHandlers(String url) {\n+    await(\"Waiting for security handlers to become available\")\n+        .atMost(5, TimeUnit.MINUTES)\n+        .pollDelay(1, TimeUnit.SECONDS)\n+        .until(() -> get(url).statusCode() != 503);\n+  }\n+\n+  private String ingestXmlWithProduct(String filename) throws IOException {\n+    Path path = Paths.get(filename);\n+\n+    if (Files.exists(path)) {\n+      Files.delete(Paths.get(filename));\n+    }\n+\n+    Files.createFile(path);\n+    Files.write(path, Collections.singleton(SAMPLE_DATA));\n+\n+    String fileLocation = path.toUri().toURL().toString();\n+    LOGGER.debug(\"File Location: {}\", fileLocation);\n+    return ingest(getSimpleXml(fileLocation), \"text/xml\");\n+  }\n+\n+  public static String getSimpleXml(String uri) {\n+    return \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n\"\n+        + getFileContent(\n+            XML_RECORD_RESOURCE_PATH + \"/SimpleXmlNoDecMetacard\", ImmutableMap.of(\"uri\", uri));\n+  }\n+\n+  private void setupOpenSearch() throws IOException {\n+    Map<String, Object> openSearchProperties =\n+        getOpenSearchSourceProperties(\n+            OPENSEARCH_SOURCE_ID, OPENSEARCH_PATH.getUrl(), getServiceManager());\n+    getServiceManager().createManagedService(OPENSEARCH_FACTORY_PID, openSearchProperties).getPid();", "originalCommit": "6267485bce585c04a16944a1d78ca821de8e4b0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffcda44d9e6a4160707ae7e8985efdcb11eaa921", "chunk": "diff --git a/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java b/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\nindex c7ecbfe2aa..8d3b1aef00 100644\n--- a/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\n+++ b/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\n\n@@ -127,6 +127,9 @@ public void beforeExam() throws Exception {\n             CSW_SOURCE_WITH_METACARD_XML_ID,\n             GMD_SOURCE_ID);\n \n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+    getCatalogBundle().setupCaching(false);\n+\n     LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwMjQ2NQ==", "url": "https://github.com/codice/ddf/pull/5740#discussion_r364402465", "bodyText": "\u270f\ufe0f Files.delete(path)", "author": "jrnorth", "createdAt": "2020-01-08T19:25:28Z", "path": "distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.test.itests.core;\n+\n+import static com.jayway.restassured.RestAssured.get;\n+import static com.jayway.restassured.RestAssured.given;\n+import static com.jayway.restassured.RestAssured.when;\n+import static org.awaitility.Awaitility.await;\n+import static org.codice.ddf.itests.common.AbstractIntegrationTest.DynamicUrl.INSECURE_ROOT;\n+import static org.codice.ddf.itests.common.catalog.CatalogTestCommons.ingest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.GMD_CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswInsertRequest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswQuery;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswSourceProperties;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getMetacardIdFromCswInsertResponse;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.OPENSEARCH_FACTORY_PID;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearch;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearchSourceProperties;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.xml.HasXPath.hasXPath;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.jayway.restassured.http.ContentType;\n+import com.jayway.restassured.response.Response;\n+import com.xebialabs.restito.server.StubServer;\n+import com.xebialabs.restito.server.secure.SecureStubServer;\n+import ddf.catalog.data.Metacard;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.xml.xpath.XPathExpressionException;\n+import org.apache.commons.io.FileUtils;\n+import org.codice.ddf.itests.common.AbstractIntegrationTest;\n+import org.codice.ddf.itests.common.config.UrlResourceReaderConfigurator;\n+import org.codice.ddf.itests.common.csw.mock.FederatedCswMockServer;\n+import org.codice.ddf.test.common.annotations.AfterExam;\n+import org.codice.ddf.test.common.annotations.BeforeExam;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.junit.PaxExam;\n+import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;\n+import org.ops4j.pax.exam.spi.reactors.PerSuite;\n+\n+@RunWith(PaxExam.class)\n+@ExamReactorStrategy(PerSuite.class)\n+public class DdfCoreIT extends AbstractIntegrationTest {\n+\n+  private static final DynamicUrl SECURE_ROOT_AND_PORT =\n+      new DynamicUrl(DynamicUrl.SECURE_ROOT, HTTPS_PORT);\n+\n+  private static final DynamicUrl ADMIN_PATH =\n+      new DynamicUrl(SECURE_ROOT_AND_PORT, \"/admin/index.html\");\n+\n+  private static final String RECORD_TITLE_1 = \"myTitle\";\n+\n+  private static final String RECORD_TITLE_2 = \"myXmlTitle\";\n+\n+  private static final DynamicPort RESTITO_STUB_SERVER_PORT = new DynamicPort(6);\n+  private UrlResourceReaderConfigurator urlResourceReaderConfigurator;\n+  private static StubServer server;\n+  private static final String SAMPLE_DATA = \"sample data\";\n+  private static FederatedCswMockServer cswServer;\n+  private static final String DEFAULT_SAMPLE_PRODUCT_FILE_NAME = \"sample.txt\";\n+  private static final String DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS = \"data/products\";\n+  private final List<String> resourcesToDelete = new ArrayList<>();\n+\n+  private static final int MAX_DOWNLOAD_RETRY_ATTEMPTS = 3;\n+  private static final String CSW_STUB_SOURCE_ID = \"cswStubServer\";\n+  private static final DynamicPort CSW_STUB_SERVER_PORT = new DynamicPort(7);\n+  private static final DynamicUrl CSW_STUB_SERVER_PATH =\n+      new DynamicUrl(INSECURE_ROOT, CSW_STUB_SERVER_PORT, \"/services/csw\");\n+  private static final String POLL_INTERVAL = \"pollInterval\";\n+  private static final int CSW_SOURCE_POLL_INTERVAL = 10;\n+  private static final String CSW_SOURCE_WITH_METACARD_XML_ID = \"cswSource2\";\n+  private static final String GMD_SOURCE_ID = \"gmdSource\";\n+\n+  @BeforeExam\n+  public void beforeExam() throws Exception {\n+    getCatalogBundle().setupMaxDownloadRetryAttempts(MAX_DOWNLOAD_RETRY_ATTEMPTS);\n+\n+    setupOpenSearch();\n+\n+    setupCswServer();\n+\n+    setupGmd();\n+\n+    getCatalogBundle().waitForFederatedSource(OPENSEARCH_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_STUB_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_WITH_METACARD_XML_ID);\n+    getCatalogBundle().waitForFederatedSource(GMD_SOURCE_ID);\n+\n+    getServiceManager()\n+        .waitForSourcesToBeAvailable(\n+            REST_PATH.getUrl(),\n+            OPENSEARCH_SOURCE_ID,\n+            CSW_STUB_SOURCE_ID,\n+            CSW_SOURCE_ID,\n+            CSW_SOURCE_WITH_METACARD_XML_ID,\n+            GMD_SOURCE_ID);\n+\n+    LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n+  }\n+\n+  @AfterExam\n+  public void afterExam() {\n+    if (cswServer != null) {\n+      cswServer.stop();\n+    }\n+  }\n+\n+  @Before\n+  public void setup() throws Exception {\n+\n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+\n+    getCatalogBundle().setupCaching(false);\n+    urlResourceReaderConfigurator = getUrlResourceReaderConfigurator();\n+\n+    server = new SecureStubServer(Integer.parseInt(RESTITO_STUB_SERVER_PORT.getPort())).run();\n+    server.start();\n+\n+    cswServer.reset();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    clearCatalogAndWait();\n+    configureRestForGuest();\n+\n+    urlResourceReaderConfigurator.setUrlResourceReaderRootDirs(\n+        DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS);\n+\n+    for (String resource : resourcesToDelete) {\n+      FileUtils.deleteQuietly(new File(resource));\n+    }\n+\n+    resourcesToDelete.clear();\n+\n+    cswServer.stop();\n+\n+    getSecurityPolicy().configureRestForGuest();\n+\n+    if (server != null) {\n+      server.stop();\n+    }\n+  }\n+\n+  @Test\n+  public void testCswIngest() {\n+    Response response = ingestCswRecord();\n+\n+    response\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"1\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"0\")),\n+            hasXPath(\n+                \"//TransactionResponse/InsertResult/BriefRecord/title\",\n+                is(\"Aliquam fermentum purus quis arcu\")),\n+            hasXPath(\"//TransactionResponse/InsertResult/BriefRecord/BoundingBox\"));\n+  }\n+\n+  @Test\n+  public void testCswDeleteMultiple() {\n+    ingestCswRecord();\n+    ingestCswRecord();\n+\n+    given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(getFileContent(CSW_REQUEST_RESOURCE_PATH + \"/CswFilterDeleteRequest\"))\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"2\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"0\")));\n+  }\n+\n+  @Test\n+  public void testCswUpdateByFilterConstraint() throws IOException, XPathExpressionException {\n+    Response firstResponse = ingestCswRecord();\n+    Response secondResponse = ingestCswRecord();\n+\n+    given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(getFileContent(CSW_REQUEST_RESOURCE_PATH + \"/CswUpdateByFilterConstraintRequest\"))\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"2\")));\n+\n+    String firstId;\n+    String secondId;\n+\n+    firstId = getMetacardIdFromCswInsertResponse(firstResponse);\n+    secondId = getMetacardIdFromCswInsertResponse(secondResponse);\n+\n+    String firstUrl = REST_PATH.getUrl() + firstId;\n+    when()\n+        .get(firstUrl)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        // Check that the updated attributes were changed.\n+        .body(\n+            hasXPath(\"//metacard/dateTime[@name='modified']/value\", startsWith(\"2015-08-25\")),\n+            hasXPath(\"//metacard/string[@name='title']/value\", is(\"Updated Title\")),\n+            hasXPath(\"//metacard/string[@name='media.format']/value\", is(\"\")),\n+            // Check that an attribute that was not updated was not changed.\n+            hasXPath(\n+                \"//metacard/string[@name='topic.category']/value\",\n+                is(\"Hydrography--Dictionaries\")));\n+\n+    String secondUrl = REST_PATH.getUrl() + secondId;\n+    when()\n+        .get(secondUrl)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        // Check that the updated attributes were changed.\n+        .body(\n+            hasXPath(\"//metacard/dateTime[@name='modified']/value\", startsWith(\"2015-08-25\")),\n+            hasXPath(\"//metacard/string[@name='title']/value\", is(\"Updated Title\")),\n+            hasXPath(\"//metacard/string[@name='media.format']/value\", is(\"\")),\n+            // Check that an attribute that was not updated was not changed.\n+            hasXPath(\n+                \"//metacard/string[@name='topic.category']/value\",\n+                is(\"Hydrography--Dictionaries\")));\n+  }\n+\n+  @Test\n+  public void testBasicRestAccess() throws Exception {\n+    String url = SERVICE_ROOT.getUrl() + \"/catalog/query?q=*&src=local\";\n+\n+    waitForSecurityHandlers(url);\n+\n+    configureRestForBasic(\"/services/sdk\");\n+\n+    // Make sure that no credentials receives a 401\n+    getSecurityPolicy().waitForBasicAuthReady(url);\n+    when().get(url).then().log().all().assertThat().statusCode(equalTo(401));\n+\n+    // A random user receives a 401\n+    given()\n+        .auth()\n+        .basic(\"bad\", \"user\")\n+        .when()\n+        .get(url)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        .statusCode(equalTo(401));\n+\n+    // A real user receives a SSO token\n+    String cookie =\n+        given()\n+            .auth()\n+            .basic(\"admin\", \"admin\")\n+            .when()\n+            .get(url)\n+            .then()\n+            .log()\n+            .ifValidationFails()\n+            .assertThat()\n+            .statusCode(equalTo(200))\n+            .assertThat()\n+            .header(\"Set-Cookie\", containsString(\"JSESSIONID\"))\n+            .extract()\n+            .cookie(\"JSESSIONID\");\n+\n+    // Try the session instead of basic auth\n+    given()\n+        .cookie(\"JSESSIONID\", cookie)\n+        .when()\n+        .get(url)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        .statusCode(equalTo(200));\n+\n+    // Admin user should be able to access the admin page\n+    given()\n+        .cookie(\"JSESSIONID\", cookie)\n+        .when()\n+        .get(ADMIN_PATH.getUrl())\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        .statusCode(equalTo(200));\n+  }\n+\n+  @Test\n+  public void testFederatedSpatial() throws IOException {\n+    ingest(getFileContent(JSON_RECORD_RESOURCE_PATH + \"/SimpleGeoJsonRecord\"), \"application/json\");\n+    ingestXmlWithProduct(DEFAULT_SAMPLE_PRODUCT_FILE_NAME);\n+\n+    getOpenSearch(\n+            \"xml\",\n+            null,\n+            null,\n+            \"lat=10.0\",\n+            \"lon=30.0\",\n+            \"radius=250000\",\n+            \"spatialType=POINT_RADIUS\",\n+            \"src=\" + OPENSEARCH_SOURCE_ID)\n+        .assertThat()\n+        .body(\n+            Matchers.hasXPath(\n+                \"/metacards/metacard/string[@name='\"\n+                    + Metacard.TITLE\n+                    + \"']/value[text()='\"\n+                    + RECORD_TITLE_1\n+                    + \"']\"),\n+            Matchers.hasXPath(\n+                \"/metacards/metacard/string[@name='\"\n+                    + Metacard.TITLE\n+                    + \"']/value[text()='\"\n+                    + RECORD_TITLE_2\n+                    + \"']\"));\n+  }\n+\n+  @Test\n+  public void testCswQueryByTitle() {\n+    String geojsonId =\n+        ingest(\n+            getFileContent(JSON_RECORD_RESOURCE_PATH + \"/SimpleGeoJsonRecord\"), \"application/json\");\n+\n+    String titleQuery =\n+        getCswQuery(\"title\", \"myTitle\", \"application/xml\", \"http://www.opengis.net/cat/csw/2.0.2\");\n+\n+    given()\n+        .contentType(ContentType.XML)\n+        .body(titleQuery)\n+        .when()\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .assertThat()\n+        .body(\n+            Matchers.hasXPath(\n+                \"/GetRecordsResponse/SearchResults/Record/identifier\", Matchers.is(geojsonId)),\n+            Matchers.hasXPath(\n+                \"/GetRecordsResponse/SearchResults/@numberOfRecordsReturned\", Matchers.is(\"1\")));\n+  }\n+\n+  private Response ingestCswRecord() {\n+    String uuid = UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n+\n+    return given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(\n+            getCswInsertRequest(\n+                \"csw:Record\",\n+                getFileContent(\n+                    CSW_RECORD_RESOURCE_PATH + \"/CswRecord\", ImmutableMap.of(\"id\", uuid))))\n+        .post(CSW_PATH.getUrl());\n+  }\n+\n+  private void waitForSecurityHandlers(String url) {\n+    await(\"Waiting for security handlers to become available\")\n+        .atMost(5, TimeUnit.MINUTES)\n+        .pollDelay(1, TimeUnit.SECONDS)\n+        .until(() -> get(url).statusCode() != 503);\n+  }\n+\n+  private String ingestXmlWithProduct(String filename) throws IOException {\n+    Path path = Paths.get(filename);\n+\n+    if (Files.exists(path)) {\n+      Files.delete(Paths.get(filename));", "originalCommit": "6267485bce585c04a16944a1d78ca821de8e4b0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffcda44d9e6a4160707ae7e8985efdcb11eaa921", "chunk": "diff --git a/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java b/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\nindex c7ecbfe2aa..8d3b1aef00 100644\n--- a/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\n+++ b/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\n\n@@ -127,6 +127,9 @@ public void beforeExam() throws Exception {\n             CSW_SOURCE_WITH_METACARD_XML_ID,\n             GMD_SOURCE_ID);\n \n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+    getCatalogBundle().setupCaching(false);\n+\n     LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQxMTI1NA==", "url": "https://github.com/codice/ddf/pull/5740#discussion_r364411254", "bodyText": "\u2753Are the tests actually using all these sources? It looks like the only one the tests really need is the OpenSearch source.", "author": "jrnorth", "createdAt": "2020-01-08T19:46:03Z", "path": "distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.test.itests.core;\n+\n+import static com.jayway.restassured.RestAssured.get;\n+import static com.jayway.restassured.RestAssured.given;\n+import static com.jayway.restassured.RestAssured.when;\n+import static org.awaitility.Awaitility.await;\n+import static org.codice.ddf.itests.common.AbstractIntegrationTest.DynamicUrl.INSECURE_ROOT;\n+import static org.codice.ddf.itests.common.catalog.CatalogTestCommons.ingest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.GMD_CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswInsertRequest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswQuery;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswSourceProperties;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getMetacardIdFromCswInsertResponse;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.OPENSEARCH_FACTORY_PID;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearch;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearchSourceProperties;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.xml.HasXPath.hasXPath;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.jayway.restassured.http.ContentType;\n+import com.jayway.restassured.response.Response;\n+import com.xebialabs.restito.server.StubServer;\n+import com.xebialabs.restito.server.secure.SecureStubServer;\n+import ddf.catalog.data.Metacard;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.xml.xpath.XPathExpressionException;\n+import org.apache.commons.io.FileUtils;\n+import org.codice.ddf.itests.common.AbstractIntegrationTest;\n+import org.codice.ddf.itests.common.config.UrlResourceReaderConfigurator;\n+import org.codice.ddf.itests.common.csw.mock.FederatedCswMockServer;\n+import org.codice.ddf.test.common.annotations.AfterExam;\n+import org.codice.ddf.test.common.annotations.BeforeExam;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.junit.PaxExam;\n+import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;\n+import org.ops4j.pax.exam.spi.reactors.PerSuite;\n+\n+@RunWith(PaxExam.class)\n+@ExamReactorStrategy(PerSuite.class)\n+public class DdfCoreIT extends AbstractIntegrationTest {\n+\n+  private static final DynamicUrl SECURE_ROOT_AND_PORT =\n+      new DynamicUrl(DynamicUrl.SECURE_ROOT, HTTPS_PORT);\n+\n+  private static final DynamicUrl ADMIN_PATH =\n+      new DynamicUrl(SECURE_ROOT_AND_PORT, \"/admin/index.html\");\n+\n+  private static final String RECORD_TITLE_1 = \"myTitle\";\n+\n+  private static final String RECORD_TITLE_2 = \"myXmlTitle\";\n+\n+  private static final DynamicPort RESTITO_STUB_SERVER_PORT = new DynamicPort(6);\n+  private UrlResourceReaderConfigurator urlResourceReaderConfigurator;\n+  private static StubServer server;\n+  private static final String SAMPLE_DATA = \"sample data\";\n+  private static FederatedCswMockServer cswServer;\n+  private static final String DEFAULT_SAMPLE_PRODUCT_FILE_NAME = \"sample.txt\";\n+  private static final String DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS = \"data/products\";\n+  private final List<String> resourcesToDelete = new ArrayList<>();\n+\n+  private static final int MAX_DOWNLOAD_RETRY_ATTEMPTS = 3;\n+  private static final String CSW_STUB_SOURCE_ID = \"cswStubServer\";\n+  private static final DynamicPort CSW_STUB_SERVER_PORT = new DynamicPort(7);\n+  private static final DynamicUrl CSW_STUB_SERVER_PATH =\n+      new DynamicUrl(INSECURE_ROOT, CSW_STUB_SERVER_PORT, \"/services/csw\");\n+  private static final String POLL_INTERVAL = \"pollInterval\";\n+  private static final int CSW_SOURCE_POLL_INTERVAL = 10;\n+  private static final String CSW_SOURCE_WITH_METACARD_XML_ID = \"cswSource2\";\n+  private static final String GMD_SOURCE_ID = \"gmdSource\";\n+\n+  @BeforeExam\n+  public void beforeExam() throws Exception {\n+    getCatalogBundle().setupMaxDownloadRetryAttempts(MAX_DOWNLOAD_RETRY_ATTEMPTS);\n+\n+    setupOpenSearch();\n+\n+    setupCswServer();\n+\n+    setupGmd();\n+\n+    getCatalogBundle().waitForFederatedSource(OPENSEARCH_SOURCE_ID);", "originalCommit": "6267485bce585c04a16944a1d78ca821de8e4b0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkzMDA5NA==", "url": "https://github.com/codice/ddf/pull/5740#discussion_r365930094", "bodyText": "Yes, Opensearch is the main one that is used, then CSW is used for a few. GMD is required by the CSW tests / source.", "author": "AzGoalie", "createdAt": "2020-01-13T17:28:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQxMTI1NA=="}], "type": "inlineReview", "revised_code": {"commit": "ffcda44d9e6a4160707ae7e8985efdcb11eaa921", "chunk": "diff --git a/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java b/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\nindex c7ecbfe2aa..8d3b1aef00 100644\n--- a/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\n+++ b/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\n\n@@ -127,6 +127,9 @@ public void beforeExam() throws Exception {\n             CSW_SOURCE_WITH_METACARD_XML_ID,\n             GMD_SOURCE_ID);\n \n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+    getCatalogBundle().setupCaching(false);\n+\n     LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4NzAxNA==", "url": "https://github.com/codice/ddf/pull/5740#discussion_r367087014", "bodyText": "\u2753 Should we remove all of the other tests you moved to core?", "author": "pklinef", "createdAt": "2020-01-15T20:19:37Z", "path": "distribution/test/itests/test-itests-ddf/src/test/java/ddf/test/itests/catalog/TestCatalog.java", "diffHunk": "@@ -515,27 +515,6 @@ private Response ingestXmlWithHeaderMetacard() {\n         .post(CSW_PATH.getUrl());\n   }\n \n-  @Test\n-  public void testCswIngest() {", "originalCommit": "a0217af37d25d9d85a4abe3b338e3e036dbf2d25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwMDcwOA==", "url": "https://github.com/codice/ddf/pull/5740#discussion_r367100708", "bodyText": "Done", "author": "AzGoalie", "createdAt": "2020-01-15T20:52:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4NzAxNA=="}], "type": "inlineReview", "revised_code": {"commit": "cc0359190971d92c098bd6fc26928fc726eabc38", "chunk": "diff --git a/distribution/test/itests/test-itests-ddf/src/test/java/ddf/test/itests/catalog/TestCatalog.java b/distribution/test/itests/test-itests-ddf/src/test/java/ddf/test/itests/catalog/TestCatalog.java\nindex 13cfceaf77..6f245edceb 100644\n--- a/distribution/test/itests/test-itests-ddf/src/test/java/ddf/test/itests/catalog/TestCatalog.java\n+++ b/distribution/test/itests/test-itests-ddf/src/test/java/ddf/test/itests/catalog/TestCatalog.java\n\n@@ -515,6 +515,27 @@ private Response ingestXmlWithHeaderMetacard() {\n         .post(CSW_PATH.getUrl());\n   }\n \n+  @Test\n+  public void testCswIngest() {\n+    Response response = ingestCswRecord();\n+    ValidatableResponse validatableResponse = response.then();\n+\n+    validatableResponse.body(\n+        hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"1\")),\n+        hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"0\")),\n+        hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"0\")),\n+        hasXPath(\n+            \"//TransactionResponse/InsertResult/BriefRecord/title\",\n+            is(\"Aliquam fermentum purus quis arcu\")),\n+        hasXPath(\"//TransactionResponse/InsertResult/BriefRecord/BoundingBox\"));\n+\n+    try {\n+      CatalogTestCommons.deleteMetacardUsingCswResponseId(response);\n+    } catch (IOException | XPathExpressionException e) {\n+      fail(\"Could not retrieve the ingested record's ID from the response.\");\n+    }\n+  }\n+\n   @Test\n   public void testCswIngestWithMetadataBackup() throws Exception {\n     getServiceManager().startFeature(true, METACARD_BACKUP_FILE_STORAGE_FEATURE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNDgxMQ==", "url": "https://github.com/codice/ddf/pull/5740#discussion_r367134811", "bodyText": "\u2754 Should we comment on why these are considered Core tests? What are the criteria or how we determine what is a core test in the future? Not sure if belongs here, but seems like it would be great for anybody who gets into this file.", "author": "shaundmorris", "createdAt": "2020-01-15T22:12:51Z", "path": "distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java", "diffHunk": "@@ -0,0 +1,471 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.test.itests.core;\n+\n+import static com.jayway.restassured.RestAssured.get;\n+import static com.jayway.restassured.RestAssured.given;\n+import static com.jayway.restassured.RestAssured.when;\n+import static org.awaitility.Awaitility.await;\n+import static org.codice.ddf.itests.common.AbstractIntegrationTest.DynamicUrl.INSECURE_ROOT;\n+import static org.codice.ddf.itests.common.catalog.CatalogTestCommons.ingest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.GMD_CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswInsertRequest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswQuery;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswSourceProperties;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getMetacardIdFromCswInsertResponse;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.OPENSEARCH_FACTORY_PID;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearch;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearchSourceProperties;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.xml.HasXPath.hasXPath;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.jayway.restassured.http.ContentType;\n+import com.jayway.restassured.response.Response;\n+import com.xebialabs.restito.server.StubServer;\n+import com.xebialabs.restito.server.secure.SecureStubServer;\n+import ddf.catalog.data.Metacard;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.xml.xpath.XPathExpressionException;\n+import org.apache.commons.io.FileUtils;\n+import org.codice.ddf.itests.common.AbstractIntegrationTest;\n+import org.codice.ddf.itests.common.config.UrlResourceReaderConfigurator;\n+import org.codice.ddf.itests.common.csw.mock.FederatedCswMockServer;\n+import org.codice.ddf.test.common.annotations.AfterExam;\n+import org.codice.ddf.test.common.annotations.BeforeExam;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.junit.PaxExam;\n+import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;\n+import org.ops4j.pax.exam.spi.reactors.PerSuite;\n+\n+@RunWith(PaxExam.class)\n+@ExamReactorStrategy(PerSuite.class)\n+public class DdfCoreIT extends AbstractIntegrationTest {", "originalCommit": "e83f455188369a56f3ec692da13815ad23cc40e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2MTg3Mg==", "url": "https://github.com/codice/ddf/pull/5740#discussion_r367161872", "bodyText": "Ideally we would try to only have a set of a dozen end to end tests going forward.  It would be good to have a comment that for something to be added, something needs to be brought down to a lower level.  The only things tested here should be those things that can only be tested end to end and are critical for a functional system.  Everything else should be added at a lower level of the test pyramid.", "author": "pklinef", "createdAt": "2020-01-15T23:31:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNDgxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "cc0359190971d92c098bd6fc26928fc726eabc38", "chunk": "diff --git a/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java b/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\nindex 8d3b1aef00..c7ecbfe2aa 100644\n--- a/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\n+++ b/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\n\n@@ -127,9 +127,6 @@ public void beforeExam() throws Exception {\n             CSW_SOURCE_WITH_METACARD_XML_ID,\n             GMD_SOURCE_ID);\n \n-    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n-    getCatalogBundle().setupCaching(false);\n-\n     LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1MDc4MQ==", "url": "https://github.com/codice/ddf/pull/5740#discussion_r368250781", "bodyText": "\u2753 Should this be private instead? Even if someone else is calling this, should we allow dependencies on the test classes themselves?", "author": "Lambeaux", "createdAt": "2020-01-18T21:56:52Z", "path": "distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java", "diffHunk": "@@ -0,0 +1,471 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.test.itests.core;\n+\n+import static com.jayway.restassured.RestAssured.get;\n+import static com.jayway.restassured.RestAssured.given;\n+import static com.jayway.restassured.RestAssured.when;\n+import static org.awaitility.Awaitility.await;\n+import static org.codice.ddf.itests.common.AbstractIntegrationTest.DynamicUrl.INSECURE_ROOT;\n+import static org.codice.ddf.itests.common.catalog.CatalogTestCommons.ingest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.GMD_CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswInsertRequest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswQuery;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswSourceProperties;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getMetacardIdFromCswInsertResponse;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.OPENSEARCH_FACTORY_PID;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearch;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearchSourceProperties;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.xml.HasXPath.hasXPath;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.jayway.restassured.http.ContentType;\n+import com.jayway.restassured.response.Response;\n+import com.xebialabs.restito.server.StubServer;\n+import com.xebialabs.restito.server.secure.SecureStubServer;\n+import ddf.catalog.data.Metacard;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.xml.xpath.XPathExpressionException;\n+import org.apache.commons.io.FileUtils;\n+import org.codice.ddf.itests.common.AbstractIntegrationTest;\n+import org.codice.ddf.itests.common.config.UrlResourceReaderConfigurator;\n+import org.codice.ddf.itests.common.csw.mock.FederatedCswMockServer;\n+import org.codice.ddf.test.common.annotations.AfterExam;\n+import org.codice.ddf.test.common.annotations.BeforeExam;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.junit.PaxExam;\n+import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;\n+import org.ops4j.pax.exam.spi.reactors.PerSuite;\n+\n+@RunWith(PaxExam.class)\n+@ExamReactorStrategy(PerSuite.class)\n+public class DdfCoreIT extends AbstractIntegrationTest {\n+\n+  private static final DynamicUrl SECURE_ROOT_AND_PORT =\n+      new DynamicUrl(DynamicUrl.SECURE_ROOT, HTTPS_PORT);\n+\n+  private static final DynamicUrl ADMIN_PATH =\n+      new DynamicUrl(SECURE_ROOT_AND_PORT, \"/admin/index.html\");\n+\n+  private static final String RECORD_TITLE_1 = \"myTitle\";\n+\n+  private static final String RECORD_TITLE_2 = \"myXmlTitle\";\n+\n+  private static final DynamicPort RESTITO_STUB_SERVER_PORT = new DynamicPort(6);\n+  private UrlResourceReaderConfigurator urlResourceReaderConfigurator;\n+  private static StubServer server;\n+  private static final String SAMPLE_DATA = \"sample data\";\n+  private static FederatedCswMockServer cswServer;\n+  private static final String DEFAULT_SAMPLE_PRODUCT_FILE_NAME = \"sample.txt\";\n+  private static final String DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS = \"data/products\";\n+  private final List<String> resourcesToDelete = new ArrayList<>();\n+\n+  private static final int MAX_DOWNLOAD_RETRY_ATTEMPTS = 3;\n+  private static final String CSW_STUB_SOURCE_ID = \"cswStubServer\";\n+  private static final DynamicPort CSW_STUB_SERVER_PORT = new DynamicPort(7);\n+  private static final DynamicUrl CSW_STUB_SERVER_PATH =\n+      new DynamicUrl(INSECURE_ROOT, CSW_STUB_SERVER_PORT, \"/services/csw\");\n+  private static final String POLL_INTERVAL = \"pollInterval\";\n+  private static final int CSW_SOURCE_POLL_INTERVAL = 10;\n+  private static final String CSW_SOURCE_WITH_METACARD_XML_ID = \"cswSource2\";\n+  private static final String GMD_SOURCE_ID = \"gmdSource\";\n+\n+  @BeforeExam\n+  public void beforeExam() throws Exception {\n+    getCatalogBundle().setupMaxDownloadRetryAttempts(MAX_DOWNLOAD_RETRY_ATTEMPTS);\n+\n+    setupOpenSearch();\n+\n+    setupCswServer();\n+\n+    setupGmd();\n+\n+    getCatalogBundle().waitForFederatedSource(OPENSEARCH_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_STUB_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_WITH_METACARD_XML_ID);\n+    getCatalogBundle().waitForFederatedSource(GMD_SOURCE_ID);\n+\n+    getServiceManager()\n+        .waitForSourcesToBeAvailable(\n+            REST_PATH.getUrl(),\n+            OPENSEARCH_SOURCE_ID,\n+            CSW_STUB_SOURCE_ID,\n+            CSW_SOURCE_ID,\n+            CSW_SOURCE_WITH_METACARD_XML_ID,\n+            GMD_SOURCE_ID);\n+\n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+    getCatalogBundle().setupCaching(false);\n+\n+    LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n+  }\n+\n+  @AfterExam\n+  public void afterExam() {\n+    if (cswServer != null) {\n+      cswServer.stop();\n+    }\n+  }\n+\n+  @Before\n+  public void setup() throws Exception {\n+    urlResourceReaderConfigurator = getUrlResourceReaderConfigurator();\n+\n+    server = new SecureStubServer(Integer.parseInt(RESTITO_STUB_SERVER_PORT.getPort())).run();\n+    server.start();\n+\n+    cswServer.reset();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    clearCatalogAndWait();\n+    configureRestForGuest();\n+\n+    urlResourceReaderConfigurator.setUrlResourceReaderRootDirs(\n+        DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS);\n+\n+    for (String resource : resourcesToDelete) {\n+      FileUtils.deleteQuietly(new File(resource));\n+    }\n+\n+    resourcesToDelete.clear();\n+\n+    cswServer.stop();\n+\n+    if (server != null) {\n+      server.stop();\n+    }\n+  }\n+\n+  @Test\n+  public void testCswIngest() {\n+    Response response = ingestCswRecord();\n+\n+    response\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"1\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"0\")),\n+            hasXPath(\n+                \"//TransactionResponse/InsertResult/BriefRecord/title\",\n+                is(\"Aliquam fermentum purus quis arcu\")),\n+            hasXPath(\"//TransactionResponse/InsertResult/BriefRecord/BoundingBox\"));\n+  }\n+\n+  @Test\n+  public void testCswDeleteMultiple() {\n+    ingestCswRecord();\n+    ingestCswRecord();\n+\n+    given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(getFileContent(CSW_REQUEST_RESOURCE_PATH + \"/CswFilterDeleteRequest\"))\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"2\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"0\")));\n+  }\n+\n+  @Test\n+  public void testCswUpdateByFilterConstraint() throws IOException, XPathExpressionException {\n+    Response firstResponse = ingestCswRecord();\n+    Response secondResponse = ingestCswRecord();\n+\n+    given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(getFileContent(CSW_REQUEST_RESOURCE_PATH + \"/CswUpdateByFilterConstraintRequest\"))\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"2\")));\n+\n+    String firstId = getMetacardIdFromCswInsertResponse(firstResponse);\n+    String secondId = getMetacardIdFromCswInsertResponse(secondResponse);\n+\n+    String firstUrl = REST_PATH.getUrl() + firstId;\n+    when()\n+        .get(firstUrl)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        // Check that the updated attributes were changed.\n+        .body(\n+            hasXPath(\"//metacard/dateTime[@name='modified']/value\", startsWith(\"2015-08-25\")),\n+            hasXPath(\"//metacard/string[@name='title']/value\", is(\"Updated Title\")),\n+            hasXPath(\"//metacard/string[@name='media.format']/value\", is(\"\")),\n+            // Check that an attribute that was not updated was not changed.\n+            hasXPath(\n+                \"//metacard/string[@name='topic.category']/value\",\n+                is(\"Hydrography--Dictionaries\")));\n+\n+    String secondUrl = REST_PATH.getUrl() + secondId;\n+    when()\n+        .get(secondUrl)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        // Check that the updated attributes were changed.\n+        .body(\n+            hasXPath(\"//metacard/dateTime[@name='modified']/value\", startsWith(\"2015-08-25\")),\n+            hasXPath(\"//metacard/string[@name='title']/value\", is(\"Updated Title\")),\n+            hasXPath(\"//metacard/string[@name='media.format']/value\", is(\"\")),\n+            // Check that an attribute that was not updated was not changed.\n+            hasXPath(\n+                \"//metacard/string[@name='topic.category']/value\",\n+                is(\"Hydrography--Dictionaries\")));\n+  }\n+\n+  @Test\n+  public void testBasicRestAccess() throws Exception {\n+    String url = SERVICE_ROOT.getUrl() + \"/catalog/query?q=*&src=local\";\n+\n+    waitForSecurityHandlers(url);\n+\n+    configureRestForBasic(\"/services/sdk\");\n+\n+    // Make sure that no credentials receives a 401\n+    getSecurityPolicy().waitForBasicAuthReady(url);\n+    when().get(url).then().log().all().assertThat().statusCode(equalTo(401));\n+\n+    // A random user receives a 401\n+    given()\n+        .auth()\n+        .basic(\"bad\", \"user\")\n+        .when()\n+        .get(url)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        .statusCode(equalTo(401));\n+\n+    // A real user receives a SSO token\n+    String cookie =\n+        given()\n+            .auth()\n+            .basic(\"admin\", \"admin\")\n+            .when()\n+            .get(url)\n+            .then()\n+            .log()\n+            .ifValidationFails()\n+            .assertThat()\n+            .statusCode(equalTo(200))\n+            .assertThat()\n+            .header(\"Set-Cookie\", containsString(\"JSESSIONID\"))\n+            .extract()\n+            .cookie(\"JSESSIONID\");\n+\n+    // Try the session instead of basic auth\n+    given()\n+        .cookie(\"JSESSIONID\", cookie)\n+        .when()\n+        .get(url)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        .statusCode(equalTo(200));\n+\n+    // Admin user should be able to access the admin page\n+    given()\n+        .cookie(\"JSESSIONID\", cookie)\n+        .when()\n+        .get(ADMIN_PATH.getUrl())\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        .statusCode(equalTo(200));\n+  }\n+\n+  @Test\n+  public void testFederatedSpatial() throws IOException {\n+    ingest(getFileContent(JSON_RECORD_RESOURCE_PATH + \"/SimpleGeoJsonRecord\"), \"application/json\");\n+    ingestXmlWithProduct(DEFAULT_SAMPLE_PRODUCT_FILE_NAME);\n+\n+    getOpenSearch(\n+            \"xml\",\n+            null,\n+            null,\n+            \"lat=10.0\",\n+            \"lon=30.0\",\n+            \"radius=250000\",\n+            \"spatialType=POINT_RADIUS\",\n+            \"src=\" + OPENSEARCH_SOURCE_ID)\n+        .assertThat()\n+        .body(\n+            Matchers.hasXPath(\n+                \"/metacards/metacard/string[@name='\"\n+                    + Metacard.TITLE\n+                    + \"']/value[text()='\"\n+                    + RECORD_TITLE_1\n+                    + \"']\"),\n+            Matchers.hasXPath(\n+                \"/metacards/metacard/string[@name='\"\n+                    + Metacard.TITLE\n+                    + \"']/value[text()='\"\n+                    + RECORD_TITLE_2\n+                    + \"']\"));\n+  }\n+\n+  @Test\n+  public void testCswQueryByTitle() {\n+    String geojsonId =\n+        ingest(\n+            getFileContent(JSON_RECORD_RESOURCE_PATH + \"/SimpleGeoJsonRecord\"), \"application/json\");\n+\n+    String titleQuery =\n+        getCswQuery(\"title\", \"myTitle\", \"application/xml\", \"http://www.opengis.net/cat/csw/2.0.2\");\n+\n+    given()\n+        .contentType(ContentType.XML)\n+        .body(titleQuery)\n+        .when()\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .assertThat()\n+        .body(\n+            Matchers.hasXPath(\n+                \"/GetRecordsResponse/SearchResults/Record/identifier\", Matchers.is(geojsonId)),\n+            Matchers.hasXPath(\n+                \"/GetRecordsResponse/SearchResults/@numberOfRecordsReturned\", Matchers.is(\"1\")));\n+  }\n+\n+  private Response ingestCswRecord() {\n+    String uuid = UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n+\n+    return given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(\n+            getCswInsertRequest(\n+                \"csw:Record\",\n+                getFileContent(\n+                    CSW_RECORD_RESOURCE_PATH + \"/CswRecord\", ImmutableMap.of(\"id\", uuid))))\n+        .post(CSW_PATH.getUrl());\n+  }\n+\n+  private void waitForSecurityHandlers(String url) {\n+    await(\"Waiting for security handlers to become available\")\n+        .atMost(5, TimeUnit.MINUTES)\n+        .pollDelay(1, TimeUnit.SECONDS)\n+        .until(() -> get(url).statusCode() != 503);\n+  }\n+\n+  private String ingestXmlWithProduct(String filename) throws IOException {\n+    Path path = Paths.get(filename);\n+\n+    if (Files.exists(path)) {\n+      Files.delete(path);\n+    }\n+\n+    Files.createFile(path);\n+    Files.write(path, Collections.singleton(SAMPLE_DATA));\n+\n+    String fileLocation = path.toUri().toURL().toString();\n+    LOGGER.debug(\"File Location: {}\", fileLocation);\n+    return ingest(getSimpleXml(fileLocation), \"text/xml\");\n+  }\n+\n+  public static String getSimpleXml(String uri) {", "originalCommit": "e83f455188369a56f3ec692da13815ad23cc40e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cc0359190971d92c098bd6fc26928fc726eabc38", "chunk": "diff --git a/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java b/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\nindex 8d3b1aef00..c7ecbfe2aa 100644\n--- a/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\n+++ b/distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java\n\n@@ -127,9 +127,6 @@ public void beforeExam() throws Exception {\n             CSW_SOURCE_WITH_METACARD_XML_ID,\n             GMD_SOURCE_ID);\n \n-    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n-    getCatalogBundle().setupCaching(false);\n-\n     LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n   }\n \n"}}, {"oid": "cc0359190971d92c098bd6fc26928fc726eabc38", "url": "https://github.com/codice/ddf/commit/cc0359190971d92c098bd6fc26928fc726eabc38", "message": "DDF-5739: Added core itest module\n\nUpdated to next development version\n\nAdded testCswDeleteMultiple testCswUpdateFilterCOntraint\n\nAdded testFederatedSpatial and testCswQueryByTitle\n\nRefactored and cleaned up code\n\nRemoved security setup\n\nUpdated to next development version\n\nFixed name and made ddf-itests depend on the core itests\n\nRemoved unused variables\n\nFixed typo", "committedDate": "2020-01-21T22:15:08Z", "type": "commit"}, {"oid": "ffcda44d9e6a4160707ae7e8985efdcb11eaa921", "url": "https://github.com/codice/ddf/commit/ffcda44d9e6a4160707ae7e8985efdcb11eaa921", "message": "Addressed comments about refactoring.", "committedDate": "2020-01-21T22:15:08Z", "type": "commit"}, {"oid": "4dc95f4c0427f6e378b4de044ef9b6c79413235f", "url": "https://github.com/codice/ddf/commit/4dc95f4c0427f6e378b4de044ef9b6c79413235f", "message": "Removed ITests that were moved to core.", "committedDate": "2020-01-21T22:15:08Z", "type": "commit"}, {"oid": "4dc95f4c0427f6e378b4de044ef9b6c79413235f", "url": "https://github.com/codice/ddf/commit/4dc95f4c0427f6e378b4de044ef9b6c79413235f", "message": "Removed ITests that were moved to core.", "committedDate": "2020-01-21T22:15:08Z", "type": "forcePushed"}]}