{"pr_number": 6046, "pr_title": "[2.21.x] Enhanced catalog framework to support retrieval of derived resources", "pr_createdAt": "2020-05-06T06:51:20Z", "pr_url": "https://github.com/codice/ddf/pull/6046", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxODg5Nw==", "url": "https://github.com/codice/ddf/pull/6046#discussion_r420918897", "bodyText": "\u2757 I do not think the ID case is secure.  Redacted metacards will always contain their ID.  The RESOURCE_URI case should be safe since the resource URI would be redacted or filtered if you did not have access to it.\nIf request by ID is made, we should at least check if the resource URI is present.", "author": "pklinef", "createdAt": "2020-05-06T16:17:53Z", "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/impl/operations/ResourceOperations.java", "diffHunk": "@@ -577,18 +634,35 @@ protected ResourceInfo getResourceInfo(\n         String metacardId = (String) value;\n         LOGGER.debug(\"metacardId = {},   site = {}\", metacardId, site);\n         query = createMetacardIdQuery(metacardId);\n-      }\n+      } else if (ResourceRequest.GET_RESOURCE_BY_METACARD.equals(name)) {\n+        // no need to actually perform the query, just create a resource info with the metacard\n+        LOGGER.debug(\"get resource by metacard\");\n+        final Metacard metacard = (Metacard) value;\n+        final String metacardId = metacard.getId();\n \n-      QueryRequest queryRequest =\n-          new QueryRequestImpl(\n-              anyTag(query, site, isEnterprise),\n-              isEnterprise,\n-              Collections.singletonList(site == null ? this.getId() : site),\n-              resourceRequest.getProperties());\n+        LOGGER.debug(\"metacardId = {},   site = {}\", metacardId, site);\n+        if (!requestProperties.containsKey(Metacard.ID)) {", "originalCommit": "451fa43c2d6ca80475407888e8d78cfbaaaf0fef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkyNzA0MQ==", "url": "https://github.com/codice/ddf/pull/6046#discussion_r420927041", "bodyText": "For local content resources, the URI is always content:id, so in that case, it wouldn't be secure either.", "author": "stustison", "createdAt": "2020-05-06T16:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxODg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkyNzk1MQ==", "url": "https://github.com/codice/ddf/pull/6046#discussion_r420927951", "bodyText": "How is that different than the above branch (i.e. by metacard ID)?", "author": "paouelle", "createdAt": "2020-05-06T16:31:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxODg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk0MjYwMQ==", "url": "https://github.com/codice/ddf/pull/6046#discussion_r420942601", "bodyText": "@stustison Don't we redact all fields including resource URI though even in the local content resources case?", "author": "pklinef", "createdAt": "2020-05-06T16:53:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxODg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk0MzU4NQ==", "url": "https://github.com/codice/ddf/pull/6046#discussion_r420943585", "bodyText": "@paouelle The difference is before we always did a search which would filter or redact that value if the current user does not have proper access.  This new path allows a way to bypass that check so we need to make sure that the metacard they have has not been redacted of everything other than its ID and security attributes.", "author": "pklinef", "createdAt": "2020-05-06T16:55:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxODg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk0NTAyOA==", "url": "https://github.com/codice/ddf/pull/6046#discussion_r420945028", "bodyText": "but it does mean that you have gotten your hands on such a metacard through a query of your own which would have redacted the data the same way. It just moves the query request before the resource request.", "author": "paouelle", "createdAt": "2020-05-06T16:57:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxODg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk0NzYwMQ==", "url": "https://github.com/codice/ddf/pull/6046#discussion_r420947601", "bodyText": "We redact the local content resource uri, yes, but as long as you have the metacard id and know that the scheme is simply \"content\" then you can request the resource.", "author": "stustison", "createdAt": "2020-05-06T17:01:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxODg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3OTQzMQ==", "url": "https://github.com/codice/ddf/pull/6046#discussion_r420979431", "bodyText": "I missed the if (resourceInfo.getResourceUri() == null) { throw new ResourceNotFoundException just beyond the diff portion being displayed. So this would work as is as long as an endpoint never allowed a way to request a resource and provided the client a way to pass it a metacard.", "author": "pklinef", "createdAt": "2020-05-06T17:50:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxODg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA5OTg0MA==", "url": "https://github.com/codice/ddf/pull/6046#discussion_r421099840", "bodyText": "Removed this part of the PR and kept it around to re-introduce if need be later", "author": "paouelle", "createdAt": "2020-05-06T21:20:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxODg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "93b7678f4aa73e188d0dc16ed8fa022202028b0d", "chunk": "diff --git a/catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/impl/operations/ResourceOperations.java b/catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/impl/operations/ResourceOperations.java\nindex ad14625346..3416f8a242 100644\n--- a/catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/impl/operations/ResourceOperations.java\n+++ b/catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/impl/operations/ResourceOperations.java\n\n@@ -634,35 +634,19 @@ protected ResourceInfo getResourceInfo(\n         String metacardId = (String) value;\n         LOGGER.debug(\"metacardId = {},   site = {}\", metacardId, site);\n         query = createMetacardIdQuery(metacardId);\n-      } else if (ResourceRequest.GET_RESOURCE_BY_METACARD.equals(name)) {\n-        // no need to actually perform the query, just create a resource info with the metacard\n-        LOGGER.debug(\"get resource by metacard\");\n-        final Metacard metacard = (Metacard) value;\n-        final String metacardId = metacard.getId();\n-\n-        LOGGER.debug(\"metacardId = {},   site = {}\", metacardId, site);\n-        if (!requestProperties.containsKey(Metacard.ID)) {\n-          requestProperties.put(Metacard.ID, metacardId);\n-        }\n-        resourceUri = metacard.getResourceURI();\n-        if (!requestProperties.containsKey(Metacard.RESOURCE_URI)) {\n-          requestProperties.put(Metacard.RESOURCE_URI, resourceUri);\n-        }\n-        resourceInfo = new ResourceInfo(metacard, resourceUri);\n       }\n \n-      if (resourceInfo == null) {\n-        QueryRequest queryRequest =\n-            new QueryRequestImpl(\n-                anyTag(query, site, isEnterprise),\n-                isEnterprise,\n-                Collections.singletonList(site == null ? this.getId() : site),\n-                resourceRequest.getProperties());\n-\n-        resourceInfo =\n-            getResourceInfo(\n-                queryRequest, resourceUri, requestProperties, federatedSite, fanoutEnabled);\n-      }\n+      QueryRequest queryRequest =\n+          new QueryRequestImpl(\n+              anyTag(query, site, isEnterprise),\n+              isEnterprise,\n+              Collections.singletonList(site == null ? this.getId() : site),\n+              resourceRequest.getProperties());\n+\n+      resourceInfo =\n+          getResourceInfo(\n+              queryRequest, resourceUri, requestProperties, federatedSite, fanoutEnabled);\n+\n     } catch (UnsupportedQueryException | FederationException e) {\n \n       throw new ResourceNotFoundException(DEFAULT_RESOURCE_NOT_FOUND_MESSAGE, e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzMzYxMw==", "url": "https://github.com/codice/ddf/pull/6046#discussion_r420933613", "bodyText": "\u2757 I'm not sure that this is exactly true. You may not need to perform the query in order to do this operation, but we count on this rolling through all of the security plugins around query in order to restrict who can view what metacards. Doing this, you're bypassing all of that logic and allowing someone to go straight to a resource. They could even brute force their way to any resource the system knows about.", "author": "stustison", "createdAt": "2020-05-06T16:39:41Z", "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/impl/operations/ResourceOperations.java", "diffHunk": "@@ -577,18 +634,35 @@ protected ResourceInfo getResourceInfo(\n         String metacardId = (String) value;\n         LOGGER.debug(\"metacardId = {},   site = {}\", metacardId, site);\n         query = createMetacardIdQuery(metacardId);\n-      }\n+      } else if (ResourceRequest.GET_RESOURCE_BY_METACARD.equals(name)) {\n+        // no need to actually perform the query, just create a resource info with the metacard", "originalCommit": "451fa43c2d6ca80475407888e8d78cfbaaaf0fef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzNDY3Mg==", "url": "https://github.com/codice/ddf/pull/6046#discussion_r420934672", "bodyText": "You have two options, as I see it. You can manually roll through the plugins here (not as desirable imo), or you can add implementations to the resource sections of the policy and access plugins (better) so we don't need to worry about this in the future, and you can continue to skip the query at this point.", "author": "stustison", "createdAt": "2020-05-06T16:41:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzMzYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk0OTk3MA==", "url": "https://github.com/codice/ddf/pull/6046#discussion_r420949970", "bodyText": "but that metacard would have been retrieved via query to start with right? This means it would have gone through all those plugins already ... unless I am missing something", "author": "paouelle", "createdAt": "2020-05-06T17:04:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzMzYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk1NjkyOQ==", "url": "https://github.com/codice/ddf/pull/6046#discussion_r420956929", "bodyText": "I do not have a public example but there are downstream examples of redaction plugins that redact all values except ID, source, and security attributes so you can understand why it was redacted.", "author": "pklinef", "createdAt": "2020-05-06T17:15:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzMzYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2MDE4OA==", "url": "https://github.com/codice/ddf/pull/6046#discussion_r420960188", "bodyText": "This is the security plugin Scott is referring to.  If we properly implemented this method then we would not have to rely on the query security to protect the resource.\nhttps://github.com/codice/ddf/blob/0d9f282/catalog/security/catalog-security-filter/src/main/java/ddf/catalog/security/filter/plugin/FilterPlugin.java#L282-L285", "author": "pklinef", "createdAt": "2020-05-06T17:20:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzMzYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2MzUzNw==", "url": "https://github.com/codice/ddf/pull/6046#discussion_r420963537", "bodyText": "Also the policy plugins (but these should be pretty simple), for example: https://github.com/codice/ddf/blob/master/catalog/security/catalog-security-metacardattributeplugin/src/main/java/org/codice/ddf/catalog/security/policy/metacard/MetacardAttributeSecurityPolicyPlugin.java", "author": "stustison", "createdAt": "2020-05-06T17:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzMzYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwMDIwOA==", "url": "https://github.com/codice/ddf/pull/6046#discussion_r421100208", "bodyText": "Removed this part of the PR and kept it around to re-introduce if need be later", "author": "paouelle", "createdAt": "2020-05-06T21:21:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzMzYxMw=="}], "type": "inlineReview", "revised_code": {"commit": "93b7678f4aa73e188d0dc16ed8fa022202028b0d", "chunk": "diff --git a/catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/impl/operations/ResourceOperations.java b/catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/impl/operations/ResourceOperations.java\nindex ad14625346..3416f8a242 100644\n--- a/catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/impl/operations/ResourceOperations.java\n+++ b/catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/impl/operations/ResourceOperations.java\n\n@@ -634,35 +634,19 @@ protected ResourceInfo getResourceInfo(\n         String metacardId = (String) value;\n         LOGGER.debug(\"metacardId = {},   site = {}\", metacardId, site);\n         query = createMetacardIdQuery(metacardId);\n-      } else if (ResourceRequest.GET_RESOURCE_BY_METACARD.equals(name)) {\n-        // no need to actually perform the query, just create a resource info with the metacard\n-        LOGGER.debug(\"get resource by metacard\");\n-        final Metacard metacard = (Metacard) value;\n-        final String metacardId = metacard.getId();\n-\n-        LOGGER.debug(\"metacardId = {},   site = {}\", metacardId, site);\n-        if (!requestProperties.containsKey(Metacard.ID)) {\n-          requestProperties.put(Metacard.ID, metacardId);\n-        }\n-        resourceUri = metacard.getResourceURI();\n-        if (!requestProperties.containsKey(Metacard.RESOURCE_URI)) {\n-          requestProperties.put(Metacard.RESOURCE_URI, resourceUri);\n-        }\n-        resourceInfo = new ResourceInfo(metacard, resourceUri);\n       }\n \n-      if (resourceInfo == null) {\n-        QueryRequest queryRequest =\n-            new QueryRequestImpl(\n-                anyTag(query, site, isEnterprise),\n-                isEnterprise,\n-                Collections.singletonList(site == null ? this.getId() : site),\n-                resourceRequest.getProperties());\n-\n-        resourceInfo =\n-            getResourceInfo(\n-                queryRequest, resourceUri, requestProperties, federatedSite, fanoutEnabled);\n-      }\n+      QueryRequest queryRequest =\n+          new QueryRequestImpl(\n+              anyTag(query, site, isEnterprise),\n+              isEnterprise,\n+              Collections.singletonList(site == null ? this.getId() : site),\n+              resourceRequest.getProperties());\n+\n+      resourceInfo =\n+          getResourceInfo(\n+              queryRequest, resourceUri, requestProperties, federatedSite, fanoutEnabled);\n+\n     } catch (UnsupportedQueryException | FederationException e) {\n \n       throw new ResourceNotFoundException(DEFAULT_RESOURCE_NOT_FOUND_MESSAGE, e);\n"}}, {"oid": "93b7678f4aa73e188d0dc16ed8fa022202028b0d", "url": "https://github.com/codice/ddf/commit/93b7678f4aa73e188d0dc16ed8fa022202028b0d", "message": "Added support for retrieving derived resources instead of the metacard resource in the catalog framework", "committedDate": "2020-05-06T21:03:15Z", "type": "commit"}, {"oid": "ca88807865511be254670c98d8cda4c7f7d514ff", "url": "https://github.com/codice/ddf/commit/ca88807865511be254670c98d8cda4c7f7d514ff", "message": "Fixed jacoco numbers", "committedDate": "2020-05-06T21:11:54Z", "type": "commit"}, {"oid": "ca88807865511be254670c98d8cda4c7f7d514ff", "url": "https://github.com/codice/ddf/commit/ca88807865511be254670c98d8cda4c7f7d514ff", "message": "Fixed jacoco numbers", "committedDate": "2020-05-06T21:11:54Z", "type": "forcePushed"}, {"oid": "a4c05a5375b19659bf453e6e748ecd015dd6e69c", "url": "https://github.com/codice/ddf/commit/a4c05a5375b19659bf453e6e748ecd015dd6e69c", "message": "Updated query parameter key to match other places", "committedDate": "2020-05-07T13:59:52Z", "type": "commit"}]}