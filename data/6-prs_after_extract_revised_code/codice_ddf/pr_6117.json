{"pr_number": 6117, "pr_title": "Extract Solr from Catalog Core", "pr_createdAt": "2020-06-04T01:53:04Z", "pr_url": "https://github.com/codice/ddf/pull/6117", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1MzI0Mg==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435453242", "bodyText": "\u270f\ufe0f  do we want any debug or trace logging here? Perhaps to log that we found and added cache sources to the properties?", "author": "rzwiefel", "createdAt": "2020-06-04T18:13:03Z", "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/CacheModeQueryPlugin.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.operation.QueryRequest;\n+import ddf.catalog.operation.impl.QueryRequestImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PreQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.HashMap;\n+\n+public class CacheModeQueryPlugin implements PreQueryPlugin {\n+\n+  @Override\n+  public QueryRequest process(QueryRequest input)\n+      throws PluginExecutionException, StopProcessingException {\n+    if (!\"cache\".equals(input.getProperties().get(\"mode\"))) {\n+      return input;\n+    }\n+\n+    HashMap<String, Serializable> props = new HashMap<>(input.getProperties());\n+    props.put(\"cache-sources\", String.join(\",\", input.getSourceIds()));\n+", "originalCommit": "19d243c30e8c731c101c8a43592ac3299ee9571c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1NTk4Nw==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435455987", "bodyText": "I was going back and forth on that just last night before pushing up the PR.  I backed off since I had changed so much already.  I can go back and see where it would not be possible to see a side effect from some other down range log statement.", "author": "pklinef", "createdAt": "2020-06-04T18:17:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1MzI0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NjI1NA==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435566254", "bodyText": "I added more logging.", "author": "pklinef", "createdAt": "2020-06-04T21:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1MzI0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b3dc07f7745ffb5431eca9941655778a5af6640f", "chunk": "diff --git a/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/CacheModeQueryPlugin.java b/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/CacheModeQueryPlugin.java\nindex 4eaf148c89..84d5d5b0b3 100644\n--- a/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/CacheModeQueryPlugin.java\n+++ b/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/CacheModeQueryPlugin.java\n\n@@ -21,9 +21,13 @@\n import java.io.Serializable;\n import java.util.Collections;\n import java.util.HashMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class CacheModeQueryPlugin implements PreQueryPlugin {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(CacheModeQueryPlugin.class);\n+\n   @Override\n   public QueryRequest process(QueryRequest input)\n       throws PluginExecutionException, StopProcessingException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1MzgwOA==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435453808", "bodyText": "\u270f\ufe0f just double checking, was using the logger for SolrCacheSource.class intended?", "author": "rzwiefel", "createdAt": "2020-06-04T18:14:10Z", "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SolrCacheSource.class);", "originalCommit": "19d243c30e8c731c101c8a43592ac3299ee9571c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1NjIxNw==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435456217", "bodyText": "Whoops, copy and paste fail. \ud83d\ude05", "author": "pklinef", "createdAt": "2020-06-04T18:18:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1MzgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NjMyNQ==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435566325", "bodyText": "Fixed", "author": "pklinef", "createdAt": "2020-06-04T21:35:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1MzgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "b3dc07f7745ffb5431eca9941655778a5af6640f", "chunk": "diff --git a/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java b/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java\nindex 5f6c9d1849..499cab5d8e 100644\n--- a/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java\n+++ b/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java\n\n@@ -36,7 +36,7 @@\n \n public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(SolrCacheSource.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n \n   private final SolrCacheSource cacheSource;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3OTEyOA==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435479128", "bodyText": "You can ignore both of these, I was just checking into other ways to do this with optional/streaming to see how it looked but don't really strike me as advantageous. And that second one was just for POC, you can kinda curry args as you build up ctor parameters.. so while nifty.... having to specify the Function since it can't infer the type is not pretty at all  (neither is nested lambdas really) \ud83d\ude02\nclonedResults\n    .stream()\n    .findFirst()\n    .map(Result::getMetacard)\n    .map(Metacard::getSourceId)\n    .ifPresent(sourceId -> sourceResponse.getProcessingDetails()\n        .stream()\n        .map(sourceDetails -> new ProcessingDetailsImpl(sourceDetails, sourceId))\n        .collect(Collectors.toSet()));\n      clonedResults\n        .stream()\n        .findFirst()\n        .map(Result::getMetacard)\n        .map(Metacard::getSourceId)\n        .map(\n            sourceId ->\n                (Function<SourceProcessingDetails, ProcessingDetailsImpl>)\n                    sourceDetail -> new ProcessingDetailsImpl(sourceDetail, sourceId))\n        .map(\n            pdcreator ->\n                response\n                    .getProcessingDetails()\n                    .stream()\n                    .map(pdcreator)\n                    .collect(Collectors.toSet()))\n        .orElseGet(HashSet::new);", "author": "rzwiefel", "createdAt": "2020-06-04T18:50:06Z", "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SolrCacheSource.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;\n+\n+  private CacheBulkProcessor cacheBulkProcessor;\n+\n+  private boolean isCachingFederatedResponses = true;\n+\n+  public QueryResultCachePlugin(\n+      SolrCache solrCache,\n+      SolrCacheSource solrCacheSource,\n+      ExecutorService solrCacheExecutorService) {\n+    cacheSource = solrCacheSource;\n+    cacheExecutorService = solrCacheExecutorService;\n+\n+    cacheCommitPhaser = new CacheCommitPhaser(solrCache);\n+    cacheBulkProcessor = new CacheBulkProcessor(solrCache);\n+  }\n+\n+  @Override\n+  public QueryResponse process(QueryResponse input)\n+      throws PluginExecutionException, StopProcessingException {\n+\n+    LOGGER.debug(\"Post query processing of QueryResponse.\");\n+    if (!isCachingFederatedResponses) {\n+      return input;\n+    }\n+\n+    if (!\"update\".equals(input.getRequest().getProperties().get(\"mode\"))) {\n+      return input;\n+    }\n+\n+    if (Requests.isLocal(input.getRequest())) {\n+      return input;\n+    }\n+\n+    if (cacheSource\n+        .getId()\n+        .equals(input.getRequest().getProperties().get(Constants.SERVICE_TITLE))) {\n+      return input;\n+    }\n+\n+    addToCache(input);\n+\n+    return input;\n+  }\n+\n+  void setCacheCommitPhaser(CacheCommitPhaser cacheCommitPhaser) {\n+    this.cacheCommitPhaser = cacheCommitPhaser;\n+  }\n+\n+  void setCacheBulkProcessor(CacheBulkProcessor cacheBulkProcessor) {\n+    this.cacheBulkProcessor = cacheBulkProcessor;\n+  }\n+\n+  public void setCachingFederatedResponses(boolean cachingFederatedResponses) {\n+    this.isCachingFederatedResponses = cachingFederatedResponses;\n+  }\n+\n+  public void shutdown() {\n+    cacheCommitPhaser.shutdown();\n+    cacheBulkProcessor.shutdown();\n+  }\n+\n+  private void addToCache(QueryResponse input) {\n+    SourceResponse clonedSourceResponse = cloneResponse(input);\n+    cacheExecutorService.submit(\n+        () -> {\n+          try {\n+            cacheBulkProcessor.add(clonedSourceResponse.getResults());\n+          } catch (VirtualMachineError vme) {\n+            throw vme;\n+          } catch (Throwable throwable) {\n+            LOGGER.warn(\"Unable to add results for bulk processing\", throwable);\n+          }\n+        });\n+  }\n+\n+  private SourceResponse cloneResponse(SourceResponse sourceResponse) {\n+\n+    List<Result> clonedResults =\n+        sourceResponse\n+            .getResults()\n+            .stream()\n+            .map(Result::getMetacard)\n+            .map(m -> new MetacardImpl(m, m.getMetacardType()))\n+            .map(ResultImpl::new)\n+            .collect(Collectors.toList());\n+\n+    Set<ProcessingDetails> processingDetails = new HashSet<>();\n+    if (clonedResults.size() > 0) {\n+      String sourceId = clonedResults.get(0).getMetacard().getSourceId();\n+      processingDetails =\n+          sourceResponse\n+              .getProcessingDetails()\n+              .stream()\n+              .map(sourceDetails -> new ProcessingDetailsImpl(sourceDetails, sourceId))\n+              .collect(Collectors.toSet());\n+    }", "originalCommit": "19d243c30e8c731c101c8a43592ac3299ee9571c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3dc07f7745ffb5431eca9941655778a5af6640f", "chunk": "diff --git a/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java b/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java\nindex 5f6c9d1849..499cab5d8e 100644\n--- a/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java\n+++ b/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java\n\n@@ -36,7 +36,7 @@\n \n public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(SolrCacheSource.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n \n   private final SolrCacheSource cacheSource;\n \n"}}, {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f", "url": "https://github.com/codice/ddf/commit/b3dc07f7745ffb5431eca9941655778a5af6640f", "message": "Extract Solr from Catalog Core\n\nExtracted all Solr concerns out of catalog core.\nExtracted Solr cache from federation strategy in standard catalog framework.\nSolr cache is now a source and plugins.\nRemoved unused, outdated, alternative federation strategies.", "committedDate": "2020-06-04T21:34:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MzM1MQ==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435573351", "bodyText": "\u2753 Making a note for later (might already be addressed) - should the cache separately support management commands with similar semantics so you can still work with it or verify behavior?", "author": "Lambeaux", "createdAt": "2020-06-04T21:51:45Z", "path": "catalog/core/catalog-core-commands/src/main/java/org/codice/ddf/commands/catalog/RemoveAllCommand.java", "diffHunk": "@@ -98,9 +95,6 @@\n   )\n   boolean force = false;\n \n-  @Option(name = \"--cache\", description = \"Only remove cached entries.\")\n-  boolean cache = false;", "originalCommit": "b3dc07f7745ffb5431eca9941655778a5af6640f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3MzEzNw==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436173137", "bodyText": "If you need to query, you can use the current endpoints to query the new cache source.  Generally you should not have to manually manage the cache contents.  There are settings to manage when cached results age out.  If something makes it into the cache that needs to be immediately removed then there is still a cache clear command available.", "author": "pklinef", "createdAt": "2020-06-05T21:31:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MzM1MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NDYxMg==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435574612", "bodyText": "\u2753 Just so I'm understanding this correctly - pulling out the cache renders this mode property completely unnecessary now?", "author": "Lambeaux", "createdAt": "2020-06-04T21:55:12Z", "path": "catalog/core/catalog-core-commands/src/main/java/org/codice/ddf/commands/catalog/RemoveAllCommand.java", "diffHunk": "@@ -295,15 +267,10 @@ private QueryRequest getIntendedQuery(FilterBuilder filterBuilder, boolean isReq\n     }\n \n     QueryImpl query = new QueryImpl(filter);\n-\n     query.setRequestsTotalResultsCount(isRequestForTotal);\n-\n     query.setPageSize(batchSize);\n \n-    Map<String, Serializable> properties = new HashMap<>();\n-    properties.put(\"mode\", \"native\");", "originalCommit": "b3dc07f7745ffb5431eca9941655778a5af6640f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3MzUwOQ==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436173509", "bodyText": "This mode was only ever used by the old, removed Standard UI.  I removed it since there are no plans to use this feature in the future since it was too slow and did not scale well.", "author": "pklinef", "createdAt": "2020-06-05T21:32:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NDYxMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NTU3Nw==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435575577", "bodyText": "\u2753 This will never run against the cache, even if it happens to be installed, so filters are now fair game in all cases?", "author": "Lambeaux", "createdAt": "2020-06-04T21:57:38Z", "path": "catalog/core/catalog-core-commands/src/main/java/org/codice/ddf/commands/catalog/RemoveCommand.java", "diffHunk": "@@ -124,7 +90,7 @@ private Object executeRemoveFromStore() throws CatalogCommandException {\n       }\n \n       if (hasFilter()) {\n-        QueryRequestImpl queryRequest = new QueryRequestImpl(getQuery(), false);\n+        QueryRequestImpl queryRequest = new QueryRequestImpl(new QueryImpl(getFilter()), false);", "originalCommit": "b3dc07f7745ffb5431eca9941655778a5af6640f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5NjE1NQ==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436196155", "bodyText": "Correct. This will only impact the catalog provider now.", "author": "pklinef", "createdAt": "2020-06-05T22:44:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NTU3Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNjM1Mw==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435606353", "bodyText": "\u2753 Is this being reassigned? Can it be final instead?", "author": "Lambeaux", "createdAt": "2020-06-04T23:28:10Z", "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/federation/impl/SortedFederationStrategy.java", "diffHunk": "@@ -127,97 +88,43 @@\n    */\n   protected List<PostFederatedQueryPlugin> postQuery;\n \n-  private SortedQueryMonitorFactory sortedQueryMonitorFactory = new SortedQueryMonitorFactory(this);\n+  private SortedQueryMonitorFactory sortedQueryMonitorFactory = new SortedQueryMonitorFactory();", "originalCommit": "b3dc07f7745ffb5431eca9941655778a5af6640f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5Njk3MA==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436196970", "bodyText": "It is replaced with a mock during testing.  I added a @VisibleForTesting to its setter.", "author": "pklinef", "createdAt": "2020-06-05T22:48:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNjM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxOTgyNw==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436219827", "bodyText": "\u2753  Any reason it couldn't just get passed through the constructor instead? Does it need to change mid-test or would re-building the object before each test be unnecessarily verbose?", "author": "Lambeaux", "createdAt": "2020-06-06T00:44:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNjM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5ODU1OA==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436898558", "bodyText": "Nope.  Looks like it is only used in the setup method.  I think I was just trying to avoid anything that would impact blueprint but it appears this will only impact the test.  I can fix this one.", "author": "pklinef", "createdAt": "2020-06-08T18:10:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNjM1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9127b587995db62285bf67c68977b2062a02f664", "chunk": "diff --git a/catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/federation/impl/SortedFederationStrategy.java b/catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/federation/impl/SortedFederationStrategy.java\nindex 84efee8b55..7d6dc5dac3 100644\n--- a/catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/federation/impl/SortedFederationStrategy.java\n+++ b/catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/federation/impl/SortedFederationStrategy.java\n\n@@ -116,6 +117,7 @@ public SortedFederationStrategy(\n     this.maxStartIndex = DEFAULT_MAX_START_INDEX;\n   }\n \n+  @VisibleForTesting\n   void setSortedQueryMonitorFactory(SortedQueryMonitorFactory sortedQueryMonitorFactory) {\n     this.sortedQueryMonitorFactory = sortedQueryMonitorFactory;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYxMDkwMg==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435610902", "bodyText": "\u2753 I'm a tad confused why we need finalSourceQueryRequest, is it because of side effects? If so do we need to copy sourceQueryRequest instead of just assigning? Or was this done just for readability?", "author": "Lambeaux", "createdAt": "2020-06-04T23:36:29Z", "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/federation/impl/SortedFederationStrategy.java", "diffHunk": "@@ -274,9 +181,9 @@ private QueryResponse sourceFederate(List<Source> sources, final QueryRequest qu\n           LOGGER.info(\"Plugin stopped processing\", e);\n         }\n \n+        QueryRequest finalSourceQueryRequest = sourceQueryRequest;\n         futures.put(\n-            queryCompletion.submit(\n-                new CallableSourceResponse(new TimedSource(source), sourceQueryRequest)),\n+            queryCompletion.submit(() -> new TimedSource(source).query(finalSourceQueryRequest)),", "originalCommit": "b3dc07f7745ffb5431eca9941655778a5af6640f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3Njg3OQ==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436176879", "bodyText": "I think the new lambda could not access that local variable since it was not effectively final due to the PreFederatedQueryPlugins could change the reference of that variable.  finalSourceQueryRequest is effectively final since it is never modified for the rest of its scope.", "author": "pklinef", "createdAt": "2020-06-05T21:42:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYxMDkwMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyMjQwOQ==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435622409", "bodyText": "\u2753 Are both this federateStrategy and the above strategy necessary? They seem like dupes. Are they stateful and are you comparing state? Seems like they were made for different tests but it's not clear what the difference is.", "author": "Lambeaux", "createdAt": "2020-06-05T00:05:45Z", "path": "catalog/core/catalog-core-standardframework/src/test/java/ddf/catalog/federation/impl/SortedFederationStrategyTest.java", "diffHunk": "@@ -0,0 +1,458 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.federation.impl;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.Query;\n+import ddf.catalog.operation.QueryRequest;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryImpl;\n+import ddf.catalog.operation.impl.QueryRequestImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PreFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.source.Source;\n+import ddf.catalog.source.UnsupportedQueryException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.CompletionService;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.geotools.filter.NullFilterImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.opengis.filter.sort.SortBy;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SortedFederationStrategyTest {\n+\n+  private static final long LONG_TIMEOUT = 1000;\n+\n+  /** Constant to test contract of source latency prefix. */\n+  private static final String METRICS_SOURCE_ELAPSED_PREFIX = \"metrics.source.elapsed.\";\n+\n+  private ExecutorService queryExecutor;\n+\n+  @Mock private Query mockQuery;\n+\n+  private SortedFederationStrategy strategy;\n+\n+  private SortedFederationStrategy federateStrategy;\n+\n+  @Mock private PreFederatedQueryPlugin preQueryPlugin;\n+\n+  private MetacardImpl metacard;\n+\n+  @Mock private SourceResponse mockResponse;\n+\n+  @Mock private SortedQueryMonitorFactory mockSortedQueryMonitorFactory;\n+\n+  @Mock private SortedQueryMonitor mockSortedQueryMonitor;\n+\n+  private HashMap<String, Serializable> properties;\n+\n+  private ArgumentCaptor<QueryRequestImpl> requestArgumentCaptor;\n+\n+  ArgumentCaptor<QueryResponseImpl> responseArgumentCaptor;\n+\n+  @Before\n+  public void setup() throws Exception {\n+\n+    queryExecutor = MoreExecutors.newDirectExecutorService();\n+\n+    when(preQueryPlugin.process(any(), any()))\n+        .thenAnswer(invocation -> invocation.getArguments()[1]);\n+\n+    strategy =\n+        new SortedFederationStrategy(\n+            queryExecutor, Arrays.asList(preQueryPlugin), new ArrayList<>());\n+\n+    federateStrategy =", "originalCommit": "b3dc07f7745ffb5431eca9941655778a5af6640f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMDQ4MA==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436220480", "bodyText": "\u2753 Any word on this \u261d\ufe0f  question?", "author": "Lambeaux", "createdAt": "2020-06-06T00:47:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyMjQwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxMjE3Nw==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436912177", "bodyText": "Looks like the difference was only needed for one test.  I will push that mock and different strategy down to that one test.", "author": "pklinef", "createdAt": "2020-06-08T18:35:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyMjQwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5745afb3f3d046e0f817034f048c635d6e152d8c", "chunk": "diff --git a/catalog/core/catalog-core-standardframework/src/test/java/ddf/catalog/federation/impl/SortedFederationStrategyTest.java b/catalog/core/catalog-core-standardframework/src/test/java/ddf/catalog/federation/impl/SortedFederationStrategyTest.java\nindex c0fcf1b645..293c401dd5 100644\n--- a/catalog/core/catalog-core-standardframework/src/test/java/ddf/catalog/federation/impl/SortedFederationStrategyTest.java\n+++ b/catalog/core/catalog-core-standardframework/src/test/java/ddf/catalog/federation/impl/SortedFederationStrategyTest.java\n\n@@ -80,16 +80,12 @@\n \n   private SortedFederationStrategy strategy;\n \n-  private SortedFederationStrategy federateStrategy;\n-\n   @Mock private PreFederatedQueryPlugin preQueryPlugin;\n \n   private MetacardImpl metacard;\n \n   @Mock private SourceResponse mockResponse;\n \n-  @Mock private SortedQueryMonitorFactory mockSortedQueryMonitorFactory;\n-\n   @Mock private SortedQueryMonitor mockSortedQueryMonitor;\n \n   private HashMap<String, Serializable> properties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNjg2Mw==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435626863", "bodyText": "\u2753 Properties can't be null right?", "author": "Lambeaux", "createdAt": "2020-06-05T00:24:01Z", "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/CacheModeQueryPlugin.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.operation.QueryRequest;\n+import ddf.catalog.operation.impl.QueryRequestImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PreQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CacheModeQueryPlugin implements PreQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(CacheModeQueryPlugin.class);\n+\n+  @Override\n+  public QueryRequest process(QueryRequest input)\n+      throws PluginExecutionException, StopProcessingException {\n+    if (!\"cache\".equals(input.getProperties().get(\"mode\"))) {", "originalCommit": "b3dc07f7745ffb5431eca9941655778a5af6640f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3ODM4OA==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436178388", "bodyText": "Most plugins make this assumption today.  I left this the way it was without adding more defensive checks but I did go back and forth on it.", "author": "pklinef", "createdAt": "2020-06-05T21:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNjg2Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNzg5Nw==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435627897", "bodyText": "\u2753 Is it worth making these final by removing the setters and doing constructor injection instead?", "author": "Lambeaux", "createdAt": "2020-06-05T00:28:20Z", "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;\n+\n+  private CacheBulkProcessor cacheBulkProcessor;", "originalCommit": "b3dc07f7745ffb5431eca9941655778a5af6640f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxMTE4OA==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436911188", "bodyText": "Doesn't look like this impacts Blueprint or tests so I will go ahead and fix it.", "author": "pklinef", "createdAt": "2020-06-08T18:33:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNzg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "959700cb0316a0c5d26ffe9584af105836c5fe5e", "chunk": "diff --git a/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java b/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java\nindex 499cab5d8e..8541ec5c18 100644\n--- a/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java\n+++ b/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java\n\n@@ -13,6 +13,7 @@\n  */\n package org.codice.ddf.catalog.solr.cache.impl;\n \n+import com.google.common.annotations.VisibleForTesting;\n import ddf.catalog.Constants;\n import ddf.catalog.data.Result;\n import ddf.catalog.data.impl.MetacardImpl;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyODQ2Mg==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435628462", "bodyText": "\u2753 Do we need null checks for any of these things in the ctor?", "author": "Lambeaux", "createdAt": "2020-06-05T00:30:53Z", "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;\n+\n+  private CacheBulkProcessor cacheBulkProcessor;\n+\n+  private boolean isCachingFederatedResponses = true;\n+\n+  public QueryResultCachePlugin(\n+      SolrCache solrCache,\n+      SolrCacheSource solrCacheSource,\n+      ExecutorService solrCacheExecutorService) {\n+    cacheSource = solrCacheSource;\n+    cacheExecutorService = solrCacheExecutorService;", "originalCommit": "b3dc07f7745ffb5431eca9941655778a5af6640f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4MDA5Mw==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436180093", "bodyText": "We are inconsistent on if we null check things that we construct and inject from Blueprint.  I think SolrCacheSource is the only class that had constructor validation that came over from the original code.", "author": "pklinef", "createdAt": "2020-06-05T21:51:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyODQ2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4MTk1Mw==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436181953", "bodyText": "Adding more ctor null checks.", "author": "pklinef", "createdAt": "2020-06-05T21:57:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyODQ2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "959700cb0316a0c5d26ffe9584af105836c5fe5e", "chunk": "diff --git a/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java b/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java\nindex 499cab5d8e..8541ec5c18 100644\n--- a/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java\n+++ b/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java\n\n@@ -13,6 +13,7 @@\n  */\n package org.codice.ddf.catalog.solr.cache.impl;\n \n+import com.google.common.annotations.VisibleForTesting;\n import ddf.catalog.Constants;\n import ddf.catalog.data.Result;\n import ddf.catalog.data.impl.MetacardImpl;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyODU3OQ==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435628579", "bodyText": "\u2753 If we don't make them final do we need to null check in the setters or here?", "author": "Lambeaux", "createdAt": "2020-06-05T00:31:23Z", "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;\n+\n+  private CacheBulkProcessor cacheBulkProcessor;\n+\n+  private boolean isCachingFederatedResponses = true;\n+\n+  public QueryResultCachePlugin(\n+      SolrCache solrCache,\n+      SolrCacheSource solrCacheSource,\n+      ExecutorService solrCacheExecutorService) {\n+    cacheSource = solrCacheSource;\n+    cacheExecutorService = solrCacheExecutorService;\n+\n+    cacheCommitPhaser = new CacheCommitPhaser(solrCache);\n+    cacheBulkProcessor = new CacheBulkProcessor(solrCache);\n+  }\n+\n+  @Override\n+  public QueryResponse process(QueryResponse input)\n+      throws PluginExecutionException, StopProcessingException {\n+\n+    if (!isCachingFederatedResponses) {\n+      return input;\n+    }\n+\n+    if (!\"update\".equals(input.getRequest().getProperties().get(\"mode\"))) {\n+      return input;\n+    }\n+\n+    if (Requests.isLocal(input.getRequest())) {\n+      return input;\n+    }\n+\n+    if (cacheSource\n+        .getId()\n+        .equals(input.getRequest().getProperties().get(Constants.SERVICE_TITLE))) {\n+      return input;\n+    }\n+\n+    LOGGER.debug(\"Adding {} federated query results to cache.\", input.getResults().size());\n+    addToCache(input);\n+\n+    return input;\n+  }\n+\n+  void setCacheCommitPhaser(CacheCommitPhaser cacheCommitPhaser) {\n+    this.cacheCommitPhaser = cacheCommitPhaser;\n+  }\n+\n+  void setCacheBulkProcessor(CacheBulkProcessor cacheBulkProcessor) {\n+    this.cacheBulkProcessor = cacheBulkProcessor;\n+  }\n+\n+  public void setCachingFederatedResponses(boolean cachingFederatedResponses) {\n+    this.isCachingFederatedResponses = cachingFederatedResponses;\n+  }\n+\n+  public void shutdown() {", "originalCommit": "b3dc07f7745ffb5431eca9941655778a5af6640f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4Mjk1NA==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436182954", "bodyText": "The setter is package private for testing.  I added @VisibleForTesting to the setter.", "author": "pklinef", "createdAt": "2020-06-05T22:00:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyODU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMTUxNw==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436221517", "bodyText": "\u2753  Should we null check in the setter, then? If the shutdown() method gets called and we get an NPE the stack trace we analyze won't have anything to do with the actual bug.", "author": "Lambeaux", "createdAt": "2020-06-06T00:55:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyODU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxMTkwMw==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436911903", "bodyText": "This is now OBE based on other changes to a previous comment.", "author": "pklinef", "createdAt": "2020-06-08T18:34:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyODU3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "959700cb0316a0c5d26ffe9584af105836c5fe5e", "chunk": "diff --git a/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java b/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java\nindex 499cab5d8e..8541ec5c18 100644\n--- a/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java\n+++ b/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java\n\n@@ -13,6 +13,7 @@\n  */\n package org.codice.ddf.catalog.solr.cache.impl;\n \n+import com.google.common.annotations.VisibleForTesting;\n import ddf.catalog.Constants;\n import ddf.catalog.data.Result;\n import ddf.catalog.data.impl.MetacardImpl;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzODg1MQ==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435638851", "bodyText": "\ud83d\udc4d   I think seeing this addresses one of my earlier questions.", "author": "Lambeaux", "createdAt": "2020-06-05T01:14:18Z", "path": "catalog/solr/catalog-solr-commands/src/main/java/org/codice/ddf/commands/solr/CacheCommand.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.commands.solr;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.IOException;\n+import org.apache.karaf.shell.api.action.Command;\n+import org.apache.karaf.shell.api.action.Option;\n+import org.apache.karaf.shell.api.action.lifecycle.Reference;\n+import org.apache.karaf.shell.api.action.lifecycle.Service;\n+import org.apache.karaf.shell.api.console.Session;\n+import org.codice.solr.client.solrj.SolrClient;\n+import org.codice.solr.factory.SolrClientFactory;\n+\n+@Service\n+@Command(\n+  scope = SolrCommands.NAMESPACE,\n+  name = \"cache\",\n+  description = \"Support the remote result cache.\"\n+)\n+public class CacheCommand extends SolrCommands {\n+\n+  @Option(name = \"--clear\", description = \"Clear the remote result cache.\", required = true)\n+  @VisibleForTesting\n+  protected boolean clear = false;", "originalCommit": "b3dc07f7745ffb5431eca9941655778a5af6640f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzOTkyOQ==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435639929", "bodyText": "\u2753 Do we have any other E2E tests for the cache? Can we run them independently now?", "author": "Lambeaux", "createdAt": "2020-06-05T01:19:03Z", "path": "distribution/test/itests/test-itests-ddf/src/test/java/ddf/test/itests/catalog/TestCatalog.java", "diffHunk": "@@ -1189,44 +1188,6 @@ public void testUpdateContentResourceUri() throws IOException {\n     deleteTemporaryFile(fileName);\n   }\n \n-  @Test\n-  public void testCachedContentLengthHeader() throws IOException {", "originalCommit": "b3dc07f7745ffb5431eca9941655778a5af6640f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4NTcwMg==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436185702", "bodyText": "I think we used to have E2E tests for the Standard UI and the cache.  I think this was just left over.  You should be able to test this independently now.", "author": "pklinef", "createdAt": "2020-06-05T22:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzOTkyOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA2ODQ3Nw==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436068477", "bodyText": "is this being used anymore?", "author": "lamhuy", "createdAt": "2020-06-05T17:41:36Z", "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;", "originalCommit": "b3dc07f7745ffb5431eca9941655778a5af6640f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3MTMyMg==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436171322", "bodyText": "Good catch.  This is no longer needed now that we do not support the index mode used by the old, removed Standard UI.  I will remove it.", "author": "pklinef", "createdAt": "2020-06-05T21:25:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA2ODQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "959700cb0316a0c5d26ffe9584af105836c5fe5e", "chunk": "diff --git a/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java b/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java\nindex 499cab5d8e..8541ec5c18 100644\n--- a/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java\n+++ b/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java\n\n@@ -13,6 +13,7 @@\n  */\n package org.codice.ddf.catalog.solr.cache.impl;\n \n+import com.google.common.annotations.VisibleForTesting;\n import ddf.catalog.Constants;\n import ddf.catalog.data.Result;\n import ddf.catalog.data.impl.MetacardImpl;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3MDY3MQ==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436070671", "bodyText": "is this class being used anymore?", "author": "lamhuy", "createdAt": "2020-06-05T17:46:04Z", "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/LocalCatalogIdSupplier.java", "diffHunk": "@@ -12,12 +12,13 @@\n  * <http://www.gnu.org/licenses/lgpl.html>.\n  */\n \n-package ddf.catalog.cache.solr.impl;\n+package org.codice.ddf.catalog.solr.cache.impl;\n \n import ddf.catalog.CatalogFramework;\n import java.util.function.Supplier;\n \n public class LocalCatalogIdSupplier implements Supplier<String> {", "originalCommit": "b3dc07f7745ffb5431eca9941655778a5af6640f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExMTAzMQ==", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436111031", "bodyText": "Looks like it gets statically set on the CacheStrategy.\n\n  \n    \n      ddf/catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/cache/solr/impl/LocalCatalogIdSupplier.java\n    \n    \n         Line 25\n      in\n      b054ac2\n    \n    \n    \n    \n\n        \n          \n           CacheStrategy.setLocalSourceIdSupplier(this);", "author": "pklinef", "createdAt": "2020-06-05T19:03:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3MDY3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "959700cb0316a0c5d26ffe9584af105836c5fe5e", "chunk": "diff --git a/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/LocalCatalogIdSupplier.java b/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/LocalCatalogIdSupplier.java\nindex d4260dcb03..746a6a9a30 100644\n--- a/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/LocalCatalogIdSupplier.java\n+++ b/catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/LocalCatalogIdSupplier.java\n\n@@ -16,12 +16,16 @@\n \n import ddf.catalog.CatalogFramework;\n import java.util.function.Supplier;\n+import org.apache.commons.lang3.Validate;\n \n public class LocalCatalogIdSupplier implements Supplier<String> {\n \n   private final CatalogFramework catalogFramework;\n \n   public LocalCatalogIdSupplier(CatalogFramework catalogFramework) {\n+\n+    Validate.notNull(catalogFramework, \"Valid CatalogFramework required.\");\n+\n     this.catalogFramework = catalogFramework;\n     CacheStrategy.setLocalSourceIdSupplier(this);\n   }\n"}}, {"oid": "959700cb0316a0c5d26ffe9584af105836c5fe5e", "url": "https://github.com/codice/ddf/commit/959700cb0316a0c5d26ffe9584af105836c5fe5e", "message": "Extract Solr from Catalog Core\n\nExtracted all Solr concerns out of catalog core.\nExtracted Solr cache from federation strategy in standard catalog framework.\nSolr cache is now a source and plugins.\nRemoved unused, outdated, alternative federation strategies.", "committedDate": "2020-06-05T22:16:47Z", "type": "forcePushed"}, {"oid": "9127b587995db62285bf67c68977b2062a02f664", "url": "https://github.com/codice/ddf/commit/9127b587995db62285bf67c68977b2062a02f664", "message": "Extract Solr from Catalog Core\n\nExtracted all Solr concerns out of catalog core.\nExtracted Solr cache from federation strategy in standard catalog framework.\nSolr cache is now a source and plugins.\nRemoved unused, outdated, alternative federation strategies.", "committedDate": "2020-06-05T22:53:07Z", "type": "forcePushed"}, {"oid": "5745afb3f3d046e0f817034f048c635d6e152d8c", "url": "https://github.com/codice/ddf/commit/5745afb3f3d046e0f817034f048c635d6e152d8c", "message": "Extract Solr from Catalog Core\n\nExtracted all Solr concerns out of catalog core.\nExtracted Solr cache from federation strategy in standard catalog framework.\nSolr cache is now a source and plugins.\nRemoved unused, outdated, alternative federation strategies.", "committedDate": "2020-06-08T18:35:57Z", "type": "commit"}, {"oid": "5745afb3f3d046e0f817034f048c635d6e152d8c", "url": "https://github.com/codice/ddf/commit/5745afb3f3d046e0f817034f048c635d6e152d8c", "message": "Extract Solr from Catalog Core\n\nExtracted all Solr concerns out of catalog core.\nExtracted Solr cache from federation strategy in standard catalog framework.\nSolr cache is now a source and plugins.\nRemoved unused, outdated, alternative federation strategies.", "committedDate": "2020-06-08T18:35:57Z", "type": "forcePushed"}]}