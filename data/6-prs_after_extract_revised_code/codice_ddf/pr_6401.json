{"pr_number": 6401, "pr_title": "DDF-6400 Upgrade to Camel 3.4.0", "pr_createdAt": "2020-10-26T18:04:48Z", "pr_url": "https://github.com/codice/ddf/pull/6401", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2OTgyMQ==", "url": "https://github.com/codice/ddf/pull/6401#discussion_r512169821", "bodyText": "See https://camel.apache.org/manual/latest/camel-3-migration-guide.html#_controlling_routes", "author": "SmithJosh", "createdAt": "2020-10-26T18:12:09Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java", "diffHunk": "@@ -216,10 +218,10 @@ private void removeRoutes() {\n       try {\n         String routeId = routeDef.getId();\n         LOGGER.trace(\"Stopping route with ID = {} and path {}\", routeId, monitoredDirectory);\n-        camelContext.stopRoute(routeId);\n+        camelContext.getRouteController().stopRoute(routeId);", "originalCommit": "a46b71ad84c91913f551eb2f3e1fda8d0f8a433d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a05da2b56ef2ff32c72588ded3bd136c0656b97b", "chunk": "diff --git a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java\nindex d369e953e4..a83d216494 100644\n--- a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java\n+++ b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java\n\n@@ -218,10 +216,10 @@ private void removeRoutes() {\n       try {\n         String routeId = routeDef.getId();\n         LOGGER.trace(\"Stopping route with ID = {} and path {}\", routeId, monitoredDirectory);\n-        camelContext.getRouteController().stopRoute(routeId);\n+        camelContext.stopRoute(routeId);\n         boolean status = camelContext.removeRoute(routeId);\n         LOGGER.trace(\"Status of removing route {} is {}\", routeId, status);\n-        camelContext.adapt(ModelCamelContext.class).removeRouteDefinition(routeDef);\n+        camelContext.removeRouteDefinition(routeDef);\n       } catch (Exception e) {\n         LOGGER.debug(\"Unable to stop Camel route with route ID = {}\", routeDef.getId(), e);\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3MDA2Mg==", "url": "https://github.com/codice/ddf/pull/6401#discussion_r512170062", "bodyText": "See https://camel.apache.org/manual/latest/camel-3-migration-guide.html#_modelcamelcontext", "author": "SmithJosh", "createdAt": "2020-10-26T18:12:34Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java", "diffHunk": "@@ -216,10 +218,10 @@ private void removeRoutes() {\n       try {\n         String routeId = routeDef.getId();\n         LOGGER.trace(\"Stopping route with ID = {} and path {}\", routeId, monitoredDirectory);\n-        camelContext.stopRoute(routeId);\n+        camelContext.getRouteController().stopRoute(routeId);\n         boolean status = camelContext.removeRoute(routeId);\n         LOGGER.trace(\"Status of removing route {} is {}\", routeId, status);\n-        camelContext.removeRouteDefinition(routeDef);\n+        camelContext.adapt(ModelCamelContext.class).removeRouteDefinition(routeDef);", "originalCommit": "a46b71ad84c91913f551eb2f3e1fda8d0f8a433d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a05da2b56ef2ff32c72588ded3bd136c0656b97b", "chunk": "diff --git a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java\nindex d369e953e4..a83d216494 100644\n--- a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java\n+++ b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java\n\n@@ -218,10 +216,10 @@ private void removeRoutes() {\n       try {\n         String routeId = routeDef.getId();\n         LOGGER.trace(\"Stopping route with ID = {} and path {}\", routeId, monitoredDirectory);\n-        camelContext.getRouteController().stopRoute(routeId);\n+        camelContext.stopRoute(routeId);\n         boolean status = camelContext.removeRoute(routeId);\n         LOGGER.trace(\"Status of removing route {} is {}\", routeId, status);\n-        camelContext.adapt(ModelCamelContext.class).removeRouteDefinition(routeDef);\n+        camelContext.removeRouteDefinition(routeDef);\n       } catch (Exception e) {\n         LOGGER.debug(\"Unable to stop Camel route with route ID = {}\", routeDef.getId(), e);\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3MDgzMw==", "url": "https://github.com/codice/ddf/pull/6401#discussion_r512170833", "bodyText": "See https://camel.apache.org/manual/latest/camel-3-migration-guide.html#_generic_information\nCompositeRegistry is removed. DefaultRegistry is recommended replacement", "author": "SmithJosh", "createdAt": "2020-10-26T18:13:56Z", "path": "catalog/plugin/catalog-plugin-metacardbackup-s3storage/src/main/java/org/codice/ddf/catalog/plugin/metacard/backup/storage/s3storage/MetacardS3StorageRoute.java", "diffHunk": "@@ -88,11 +89,9 @@\n \n   public MetacardS3StorageRoute(CamelContext camelContext) {\n     super(camelContext);\n-    registry = new org.apache.camel.impl.SimpleRegistry();\n-    CompositeRegistry compositeRegistry = new CompositeRegistry();\n-    compositeRegistry.addRegistry(camelContext.getRegistry());\n-    compositeRegistry.addRegistry(registry);\n-    ((DefaultCamelContext) camelContext).setRegistry(compositeRegistry);", "originalCommit": "a46b71ad84c91913f551eb2f3e1fda8d0f8a433d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a05da2b56ef2ff32c72588ded3bd136c0656b97b", "chunk": "diff --git a/catalog/plugin/catalog-plugin-metacardbackup-s3storage/src/main/java/org/codice/ddf/catalog/plugin/metacard/backup/storage/s3storage/MetacardS3StorageRoute.java b/catalog/plugin/catalog-plugin-metacardbackup-s3storage/src/main/java/org/codice/ddf/catalog/plugin/metacard/backup/storage/s3storage/MetacardS3StorageRoute.java\nindex faefd02136..2e9069d21f 100644\n--- a/catalog/plugin/catalog-plugin-metacardbackup-s3storage/src/main/java/org/codice/ddf/catalog/plugin/metacard/backup/storage/s3storage/MetacardS3StorageRoute.java\n+++ b/catalog/plugin/catalog-plugin-metacardbackup-s3storage/src/main/java/org/codice/ddf/catalog/plugin/metacard/backup/storage/s3storage/MetacardS3StorageRoute.java\n\n@@ -89,9 +88,11 @@\n \n   public MetacardS3StorageRoute(CamelContext camelContext) {\n     super(camelContext);\n-    registry = new SimpleRegistry();\n-    DefaultRegistry defaultRegistry = new DefaultRegistry(camelContext.getRegistry(), registry);\n-    ((DefaultCamelContext) camelContext).setRegistry(defaultRegistry);\n+    registry = new org.apache.camel.impl.SimpleRegistry();\n+    CompositeRegistry compositeRegistry = new CompositeRegistry();\n+    compositeRegistry.addRegistry(camelContext.getRegistry());\n+    compositeRegistry.addRegistry(registry);\n+    ((DefaultCamelContext) camelContext).setRegistry(compositeRegistry);\n   }\n \n   public String getObjectTemplate() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2MzQzNQ==", "url": "https://github.com/codice/ddf/pull/6401#discussion_r514463435", "bodyText": "\u270f\ufe0f The string should contain the name of variable with the same case. So, it would be camelContext, not CamelContext.", "author": "glenhein", "createdAt": "2020-10-29T18:05:39Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java", "diffHunk": "@@ -117,7 +119,7 @@ public ContentDirectoryMonitor(\n       int delayBetweenRetries,\n       Executor configurationExecutor,\n       Security security) {\n-    this.camelContext = camelContext;\n+    this.camelContext = Objects.requireNonNull(camelContext, \"CamelContext cannot be null\");", "originalCommit": "f12c5e451269348d6a6f6d2b108ce68b17908ba7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a010c6cd1bef37efd3872e4eb9f01c619c5d275", "chunk": "diff --git a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java\nindex d369e953e4..661e8ca025 100644\n--- a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java\n+++ b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java\n\n@@ -119,7 +119,7 @@ public ContentDirectoryMonitor(\n       int delayBetweenRetries,\n       Executor configurationExecutor,\n       Security security) {\n-    this.camelContext = Objects.requireNonNull(camelContext, \"CamelContext cannot be null\");\n+    this.camelContext = Objects.requireNonNull(camelContext, \"camelContext cannot be null\");\n     this.attributeRegistry = attributeRegistry;\n     this.maxRetries = maxRetries;\n     this.delayBetweenRetries = delayBetweenRetries;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3MDY5Ng==", "url": "https://github.com/codice/ddf/pull/6401#discussion_r514470696", "bodyText": "Does an InputSource need to be closed?", "author": "glenhein", "createdAt": "2020-10-29T18:17:04Z", "path": "catalog/spatial/wfs/spatial-wfs-source/src/main/java/org/codice/ddf/spatial/ogc/wfs/catalog/source/reader/XmlSchemaMessageBodyReader.java", "diffHunk": "@@ -66,20 +81,33 @@ public XmlSchema readFrom(\n       MultivaluedMap<String, String> headers,\n       InputStream inStream)\n       throws IOException, WebApplicationException {\n-    // Determine if this is an XMLSchema\n-    String input = IOUtils.toString(inStream);\n+\n+    String input = IOUtils.toString(inStream, StandardCharsets.UTF_8);\n     inStream.reset();\n-    String count = COUNT_XPATH_BUILDER.evaluate(camelContext, input);\n-    // See if there exactly one instance of \"xsd:schema\" in this doc\n-    if (Integer.parseInt(count) == 1) {\n-      XmlSchema schema = null;\n+\n+    if (isValid(new InputSource(inStream))) {", "originalCommit": "f12c5e451269348d6a6f6d2b108ce68b17908ba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4NDM1Mg==", "url": "https://github.com/codice/ddf/pull/6401#discussion_r514484352", "bodyText": "No, an InputSource is not closable. It just reads from the underlying stream. As for whether or not to close the stream, the javadoc for MessageBodyReader says not to [1]:\n\nThe caller is responsible for ensuring that the input stream ends when the entity has been consumed. The implementation should not close the input stream.\n\n[1] https://eclipse-ee4j.github.io/jaxrs-api/apidocs/2.1.6/javax/ws/rs/ext/MessageBodyReader.html#readFrom(java.lang.Class,java.lang.reflect.Type,java.lang.annotation.Annotation%5B%5D,javax.ws.rs.core.MediaType,javax.ws.rs.core.MultivaluedMap,java.io.InputStream)", "author": "SmithJosh", "createdAt": "2020-10-29T18:39:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3MDY5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a05da2b56ef2ff32c72588ded3bd136c0656b97b", "chunk": "diff --git a/catalog/spatial/wfs/spatial-wfs-source/src/main/java/org/codice/ddf/spatial/ogc/wfs/catalog/source/reader/XmlSchemaMessageBodyReader.java b/catalog/spatial/wfs/spatial-wfs-source/src/main/java/org/codice/ddf/spatial/ogc/wfs/catalog/source/reader/XmlSchemaMessageBodyReader.java\nindex 5f516a4a32..99d443f300 100644\n--- a/catalog/spatial/wfs/spatial-wfs-source/src/main/java/org/codice/ddf/spatial/ogc/wfs/catalog/source/reader/XmlSchemaMessageBodyReader.java\n+++ b/catalog/spatial/wfs/spatial-wfs-source/src/main/java/org/codice/ddf/spatial/ogc/wfs/catalog/source/reader/XmlSchemaMessageBodyReader.java\n\n@@ -81,33 +66,20 @@ public XmlSchema readFrom(\n       MultivaluedMap<String, String> headers,\n       InputStream inStream)\n       throws IOException, WebApplicationException {\n-\n-    String input = IOUtils.toString(inStream, StandardCharsets.UTF_8);\n+    // Determine if this is an XMLSchema\n+    String input = IOUtils.toString(inStream);\n     inStream.reset();\n-\n-    if (isValid(new InputSource(inStream))) {\n+    String count = COUNT_XPATH_BUILDER.evaluate(camelContext, input);\n+    // See if there exactly one instance of \"xsd:schema\" in this doc\n+    if (Integer.parseInt(count) == 1) {\n+      XmlSchema schema = null;\n       XmlSchemaCollection schemaCollection = new XmlSchemaCollection();\n       schemaCollection.init();\n       schemaCollection.setSchemaResolver(wfsUriResolver);\n-      return schemaCollection.read(new StringReader(input));\n-    } else {\n-      LOGGER.debug(\"Did not receive valid XML Schema, instead got: \\n{}\", input);\n-      return null;\n-    }\n-  }\n-\n-  /**\n-   * Checks that the given InputSource represents a valid schema. Schemas may contain external links\n-   * and resolving them is slow, so instead of doing full validation against the XML schema schema,\n-   * we just check for the \"xsd:schema\" element at the root.\n-   *\n-   * @param inputSource the schema to validate\n-   */\n-  private boolean isValid(InputSource inputSource) {\n-    try {\n-      return (boolean) IS_SCHEMA_XPATH.evaluate(inputSource, XPathConstants.BOOLEAN);\n-    } catch (XPathExpressionException e) {\n-      throw new XmlSchemaException(\"Unable to validate schema\", e);\n+      schema = schemaCollection.read(new InputSource(inStream));\n+      return schema;\n     }\n+    LOGGER.debug(\"Did not receive valid XML Schema, instead got: \\n{}\", input);\n+    return null;\n   }\n }\n"}}, {"oid": "8a010c6cd1bef37efd3872e4eb9f01c619c5d275", "url": "https://github.com/codice/ddf/commit/8a010c6cd1bef37efd3872e4eb9f01c619c5d275", "message": "Address comments", "committedDate": "2020-10-29T23:24:23Z", "type": "forcePushed"}, {"oid": "a05da2b56ef2ff32c72588ded3bd136c0656b97b", "url": "https://github.com/codice/ddf/commit/a05da2b56ef2ff32c72588ded3bd136c0656b97b", "message": "Upgrade to Camel 3.4.4", "committedDate": "2020-11-04T16:49:31Z", "type": "commit"}, {"oid": "308cc6f7fe90e14fc0327a2ecdda4161eacdd136", "url": "https://github.com/codice/ddf/commit/308cc6f7fe90e14fc0327a2ecdda4161eacdd136", "message": "Upgrade to Jakarta Mail", "committedDate": "2020-11-04T16:49:31Z", "type": "commit"}, {"oid": "6258d87b221de08c1fb0666248c9044ffa8c71a4", "url": "https://github.com/codice/ddf/commit/6258d87b221de08c1fb0666248c9044ffa8c71a4", "message": "Fix compilation errors", "committedDate": "2020-11-04T16:49:31Z", "type": "commit"}, {"oid": "0c25f63b48e4c92d2ef918e8d73412ad0ffe5d8a", "url": "https://github.com/codice/ddf/commit/0c25f63b48e4c92d2ef918e8d73412ad0ffe5d8a", "message": "Remove platform-http-proxy module and update proxy-camel-route to httpclient 4", "committedDate": "2020-11-04T16:49:31Z", "type": "commit"}, {"oid": "6bfd70e2334d48b65dcebd3dc46811351e644bfb", "url": "https://github.com/codice/ddf/commit/6bfd70e2334d48b65dcebd3dc46811351e644bfb", "message": "Fix tests", "committedDate": "2020-11-04T16:49:31Z", "type": "commit"}, {"oid": "ca8d84aae14aaa090d6d5997057c1d6e4c106257", "url": "https://github.com/codice/ddf/commit/ca8d84aae14aaa090d6d5997057c1d6e4c106257", "message": "Remove unused Camel features", "committedDate": "2020-11-04T16:49:32Z", "type": "commit"}, {"oid": "9c7213ab940bf40d5019cabd761a25da4ba973e3", "url": "https://github.com/codice/ddf/commit/9c7213ab940bf40d5019cabd761a25da4ba973e3", "message": "Address comments", "committedDate": "2020-11-04T16:49:32Z", "type": "commit"}, {"oid": "148d28e0c7ed8b327020d9e555d8b7b9eb166d34", "url": "https://github.com/codice/ddf/commit/148d28e0c7ed8b327020d9e555d8b7b9eb166d34", "message": "Fix permissions", "committedDate": "2020-11-04T16:49:32Z", "type": "commit"}, {"oid": "dff45fdb05b87a5bb56cdf7905e7e8d19d78c582", "url": "https://github.com/codice/ddf/commit/dff45fdb05b87a5bb56cdf7905e7e8d19d78c582", "message": "Switch to Camel 3.4.0 due to bug in 3.4.4", "committedDate": "2020-11-04T16:49:49Z", "type": "commit"}, {"oid": "dff45fdb05b87a5bb56cdf7905e7e8d19d78c582", "url": "https://github.com/codice/ddf/commit/dff45fdb05b87a5bb56cdf7905e7e8d19d78c582", "message": "Switch to Camel 3.4.0 due to bug in 3.4.4", "committedDate": "2020-11-04T16:49:49Z", "type": "forcePushed"}, {"oid": "e47b0a4316dfa74ddd13301ed9fc60359fc21d3f", "url": "https://github.com/codice/ddf/commit/e47b0a4316dfa74ddd13301ed9fc60359fc21d3f", "message": "Fix broken routes", "committedDate": "2020-11-10T17:37:35Z", "type": "commit"}, {"oid": "7f4d155a77ccaed8c0ad22a809b5a188b7a50ced", "url": "https://github.com/codice/ddf/commit/7f4d155a77ccaed8c0ad22a809b5a188b7a50ced", "message": "Fix WFS query errors", "committedDate": "2020-11-10T17:46:22Z", "type": "commit"}, {"oid": "7f4d155a77ccaed8c0ad22a809b5a188b7a50ced", "url": "https://github.com/codice/ddf/commit/7f4d155a77ccaed8c0ad22a809b5a188b7a50ced", "message": "Fix WFS query errors", "committedDate": "2020-11-10T17:46:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4OTI5OA==", "url": "https://github.com/codice/ddf/pull/6401#discussion_r520789298", "bodyText": "I suppose the body was already in memory, but is there anyway that this could blow up memory, thus creating a possible DNS attack?", "author": "glenhein", "createdAt": "2020-11-10T18:45:43Z", "path": "catalog/spatial/wfs/spatial-wfs-featuretransformer/src/main/java/org/codice/ddf/spatial/ogc/wfs/featuretransformer/impl/WfsRouteBuilder.java", "diffHunk": "@@ -33,22 +33,33 @@\n \n   @Override\n   public void configure() {\n+    /*\n+     * This route is designed to be called via a Camel proxy using the FeatureTransformationService\n+     * interface. Arguments are bound to the message body as an array, i.e.\n+     *\n+     * method: apply(InputStream featureCollection, WfsMetadata metadata)\n+     * message body: new Object[] { featureCollection, metadata }\n+     */\n     from(FEATURECOLLECTION_ENDPOINT_URL)\n         .id(\"TransformFeatureCollectionRoute\")\n+        .streamCaching()\n         .setHeader(\"metadata\", simple(\"${body[1]}\"))\n-        .setHeader(\"xml\", simple(\"${body[0]}\"))\n+        // Stream caching doesn't work when the input stream is located in a header. Copying the\n+        // stream to the body first is a workaround. It causes the stream to be cached, then we can\n+        // copy that cache to the header so we can access it later.\n+        .setBody(simple(\"${body[0]}\"))", "originalCommit": "7f4d155a77ccaed8c0ad22a809b5a188b7a50ced", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc5Njc1MQ==", "url": "https://github.com/codice/ddf/pull/6401#discussion_r520796751", "bodyText": "If the stream is too large, Camel won't load it into memory. From the docs [1]:\n\nlarge stream messages (over 64 KB in Camel 2.11 or older, and 128 KB from Camel 2.12 onwards) will be cached in a temporary file instead\u2009\u2014\u2009Camel itself will handle deleting the temporary file once the cached stream is no longer necessary.\n\n[1] https://camel.apache.org/manual/latest/stream-caching.html", "author": "SmithJosh", "createdAt": "2020-11-10T18:53:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4OTI5OA=="}], "type": "inlineReview", "revised_code": null}]}