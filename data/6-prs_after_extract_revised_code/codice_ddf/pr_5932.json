{"pr_number": 5932, "pr_title": "DDF-UI-135 filter blank attributes from CSV export result", "pr_createdAt": "2020-03-25T14:16:45Z", "pr_url": "https://github.com/codice/ddf/pull/5932", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODczNDY1Ng==", "url": "https://github.com/codice/ddf/pull/5932#discussion_r398734656", "bodyText": "\u270f\ufe0f could use CollectionUtils.isEmpty(attributes) here instead", "author": "zta6", "createdAt": "2020-03-26T16:57:56Z", "path": "catalog/transformer/catalog-transformer-csv-queryresponse/src/main/java/ddf/catalog/transformer/csv/CsvMetacardTransformer.java", "diffHunk": "@@ -49,18 +49,18 @@ public BinaryContent transform(Metacard metacard, Map<String, Serializable> argu\n     String attributeString = (String) arguments.get(\"columnOrder\");\n     ArrayList<String> attributes =\n         new ArrayList<String>(Arrays.asList((attributeString).split(\",\")));\n-\n-    Appendable appendable =\n-        writeMetacardsToCsv(\n-            Collections.singletonList(metacard),\n-            new ArrayList<AttributeDescriptor>(\n-                metacard\n-                    .getMetacardType()\n-                    .getAttributeDescriptors()\n+    ArrayList<AttributeDescriptor> allAttributes =\n+        new ArrayList<AttributeDescriptor>(metacard.getMetacardType().getAttributeDescriptors());\n+    ArrayList<AttributeDescriptor> descriptors =\n+        new ArrayList<AttributeDescriptor>(\n+            attributes == null || attributes.isEmpty()", "originalCommit": "9ff05537afa6de0a6a4d472305611479c06976a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2b023ee7e27d7a38935644e983a217e1050d9d0b", "chunk": "diff --git a/catalog/transformer/catalog-transformer-csv-queryresponse/src/main/java/ddf/catalog/transformer/csv/CsvMetacardTransformer.java b/catalog/transformer/catalog-transformer-csv-queryresponse/src/main/java/ddf/catalog/transformer/csv/CsvMetacardTransformer.java\nindex e7268cf8f4..a17c261df2 100644\n--- a/catalog/transformer/catalog-transformer-csv-queryresponse/src/main/java/ddf/catalog/transformer/csv/CsvMetacardTransformer.java\n+++ b/catalog/transformer/catalog-transformer-csv-queryresponse/src/main/java/ddf/catalog/transformer/csv/CsvMetacardTransformer.java\n\n@@ -49,18 +49,18 @@ public BinaryContent transform(Metacard metacard, Map<String, Serializable> argu\n     String attributeString = (String) arguments.get(\"columnOrder\");\n     ArrayList<String> attributes =\n         new ArrayList<String>(Arrays.asList((attributeString).split(\",\")));\n-    ArrayList<AttributeDescriptor> allAttributes =\n-        new ArrayList<AttributeDescriptor>(metacard.getMetacardType().getAttributeDescriptors());\n-    ArrayList<AttributeDescriptor> descriptors =\n-        new ArrayList<AttributeDescriptor>(\n-            attributes == null || attributes.isEmpty()\n-                ? allAttributes\n-                : allAttributes\n+\n+    Appendable appendable =\n+        writeMetacardsToCsv(\n+            Collections.singletonList(metacard),\n+            new ArrayList<AttributeDescriptor>(\n+                metacard\n+                    .getMetacardType()\n+                    .getAttributeDescriptors()\n                     .stream()\n                     .filter(attr -> attributes.contains(attr.getName()))\n-                    .collect(Collectors.toList()));\n-    Appendable appendable =\n-        writeMetacardsToCsv(Collections.singletonList(metacard), descriptors, aliases);\n+                    .collect(Collectors.toList())),\n+            aliases);\n     return createResponse(appendable);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1MTY3Mw==", "url": "https://github.com/codice/ddf/pull/5932#discussion_r423351673", "bodyText": "columnOrder is defined in a constant here\n\n  \n    \n      ddf/catalog/transformer/catalog-transformer-csv-queryresponse/src/main/java/ddf/catalog/transformer/csv/CsvQueryResponseTransformer.java\n    \n    \n         Line 46\n      in\n      b054ac2\n    \n    \n    \n    \n\n        \n          \n           public static final String COLUMN_ORDER_KEY = \"columnOrder\";", "author": "bdeining", "createdAt": "2020-05-11T22:17:12Z", "path": "catalog/transformer/catalog-transformer-csv-queryresponse/src/main/java/ddf/catalog/transformer/csv/CsvMetacardTransformer.java", "diffHunk": "@@ -43,12 +48,20 @@ public BinaryContent transform(Metacard metacard, Map<String, Serializable> argu\n \n     Map<String, String> aliases =\n         (Map<String, String>) arguments.getOrDefault(\"aliases\", new HashMap<>());\n-\n+    String attributeString =\n+        arguments.get(\"columnOrder\") != null ? (String) arguments.get(\"columnOrder\") : \"\";", "originalCommit": "c0fb1c0e68b2799d2e3bbfbeb836396f5b583bc8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2b023ee7e27d7a38935644e983a217e1050d9d0b", "chunk": "diff --git a/catalog/transformer/catalog-transformer-csv-queryresponse/src/main/java/ddf/catalog/transformer/csv/CsvMetacardTransformer.java b/catalog/transformer/catalog-transformer-csv-queryresponse/src/main/java/ddf/catalog/transformer/csv/CsvMetacardTransformer.java\nindex 898f7205ea..a17c261df2 100644\n--- a/catalog/transformer/catalog-transformer-csv-queryresponse/src/main/java/ddf/catalog/transformer/csv/CsvMetacardTransformer.java\n+++ b/catalog/transformer/catalog-transformer-csv-queryresponse/src/main/java/ddf/catalog/transformer/csv/CsvMetacardTransformer.java\n\n@@ -48,20 +46,21 @@ public BinaryContent transform(Metacard metacard, Map<String, Serializable> argu\n \n     Map<String, String> aliases =\n         (Map<String, String>) arguments.getOrDefault(\"aliases\", new HashMap<>());\n-    String attributeString =\n-        arguments.get(\"columnOrder\") != null ? (String) arguments.get(\"columnOrder\") : \"\";\n-    List<String> attributes = Arrays.asList((attributeString).split(\",\"));\n-    List<AttributeDescriptor> allAttributes =\n-        new ArrayList<AttributeDescriptor>(metacard.getMetacardType().getAttributeDescriptors());\n-    List<AttributeDescriptor> descriptors =\n-        CollectionUtils.isEmpty(attributes)\n-            ? allAttributes\n-            : allAttributes\n-                .stream()\n-                .filter(attr -> attributes.contains(attr.getName()))\n-                .collect(Collectors.toList());\n+    String attributeString = (String) arguments.get(\"columnOrder\");\n+    ArrayList<String> attributes =\n+        new ArrayList<String>(Arrays.asList((attributeString).split(\",\")));\n+\n     Appendable appendable =\n-        writeMetacardsToCsv(Collections.singletonList(metacard), descriptors, aliases);\n+        writeMetacardsToCsv(\n+            Collections.singletonList(metacard),\n+            new ArrayList<AttributeDescriptor>(\n+                metacard\n+                    .getMetacardType()\n+                    .getAttributeDescriptors()\n+                    .stream()\n+                    .filter(attr -> attributes.contains(attr.getName()))\n+                    .collect(Collectors.toList())),\n+            aliases);\n     return createResponse(appendable);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQyOTg3Ng==", "url": "https://github.com/codice/ddf/pull/5932#discussion_r455429876", "bodyText": "Something to consider is using the columnOrder constant here as well in case the constant value ever changed (however maybe unlikely). I wouldn't hold up the PR for it. Would the test just fail in that case?", "author": "shaundmorris", "createdAt": "2020-07-15T23:52:29Z", "path": "catalog/transformer/catalog-transformer-csv-queryresponse/src/test/java/ddf/catalog/transformer/csv/CsvMetacardTransformerTest.java", "diffHunk": "@@ -67,7 +67,7 @@\n   public void setUp() {\n     this.transformer = new CsvMetacardTransformer();\n     this.arguments = new HashMap<>();\n-    arguments.put(\"columnOrder\", ImmutableList.of(\"stringAtt\", \"intAtt\", \"doubleAtt\"));", "originalCommit": "0d227a8d801919acb027bba8d58ac59339b1d327", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ0ODc5NA==", "url": "https://github.com/codice/ddf/pull/5932#discussion_r473448794", "bodyText": "@shaundmorris yes, good catch. the other prs have already been merged, otherwise i'd make the change.", "author": "cassandrabailey293", "createdAt": "2020-08-19T23:53:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQyOTg3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2b023ee7e27d7a38935644e983a217e1050d9d0b", "chunk": "diff --git a/catalog/transformer/catalog-transformer-csv-queryresponse/src/test/java/ddf/catalog/transformer/csv/CsvMetacardTransformerTest.java b/catalog/transformer/catalog-transformer-csv-queryresponse/src/test/java/ddf/catalog/transformer/csv/CsvMetacardTransformerTest.java\nindex 508a1a2acc..38eac1ddd9 100644\n--- a/catalog/transformer/catalog-transformer-csv-queryresponse/src/test/java/ddf/catalog/transformer/csv/CsvMetacardTransformerTest.java\n+++ b/catalog/transformer/catalog-transformer-csv-queryresponse/src/test/java/ddf/catalog/transformer/csv/CsvMetacardTransformerTest.java\n\n@@ -67,7 +67,7 @@\n   public void setUp() {\n     this.transformer = new CsvMetacardTransformer();\n     this.arguments = new HashMap<>();\n-    arguments.put(\"columnOrder\", \"stringAtt,intAtt,doubleAtt\");\n+    arguments.put(\"columnOrder\", ImmutableList.of(\"stringAtt\", \"intAtt\", \"doubleAtt\"));\n     normalMC = buildMetacard();\n   }\n \n"}}, {"oid": "2b023ee7e27d7a38935644e983a217e1050d9d0b", "url": "https://github.com/codice/ddf/commit/2b023ee7e27d7a38935644e983a217e1050d9d0b", "message": "DDF-UI-135 pass attributes to the csv transformer", "committedDate": "2020-08-20T00:54:52Z", "type": "commit"}, {"oid": "7c90a3f5ecc1188478230e882221c6b9ae392150", "url": "https://github.com/codice/ddf/commit/7c90a3f5ecc1188478230e882221c6b9ae392150", "message": "DDF-UI-135 only filter if columnOrder is provided", "committedDate": "2020-08-20T00:54:52Z", "type": "commit"}, {"oid": "57b175df3885f33bd1d2f5b7e9e7471e2315a5f6", "url": "https://github.com/codice/ddf/commit/57b175df3885f33bd1d2f5b7e9e7471e2315a5f6", "message": "DDF-UI-135 use List instead of ArrayList", "committedDate": "2020-08-20T00:54:52Z", "type": "commit"}, {"oid": "ff266d8536cc28ffd3343d2dcd0d3f13d1acad45", "url": "https://github.com/codice/ddf/commit/ff266d8536cc28ffd3343d2dcd0d3f13d1acad45", "message": "DDF-UI-135 use CollectionUtils and import List", "committedDate": "2020-08-20T00:54:52Z", "type": "commit"}, {"oid": "f265fefcc9a40b94ee6e4f240fbe51d6af32e05e", "url": "https://github.com/codice/ddf/commit/f265fefcc9a40b94ee6e4f240fbe51d6af32e05e", "message": "DDF-UI-135 guard against null columnOrder", "committedDate": "2020-08-20T00:54:52Z", "type": "commit"}, {"oid": "3a4e8ef4c02dc73c45b15eb9d90bc749021a44da", "url": "https://github.com/codice/ddf/commit/3a4e8ef4c02dc73c45b15eb9d90bc749021a44da", "message": "DDF-UI-135 remove unnecessary new operators", "committedDate": "2020-08-20T00:54:52Z", "type": "commit"}, {"oid": "14e10c7a4da4fec070de431693e6f344ad8a4a85", "url": "https://github.com/codice/ddf/commit/14e10c7a4da4fec070de431693e6f344ad8a4a85", "message": "DDF-UI-135 fix unit test", "committedDate": "2020-08-20T00:54:52Z", "type": "commit"}, {"oid": "e97b15e63f680b07ea5221c19e95e66c60fd8267", "url": "https://github.com/codice/ddf/commit/e97b15e63f680b07ea5221c19e95e66c60fd8267", "message": "DDF-UI-135 use defined constant for columnOrder", "committedDate": "2020-08-20T00:54:52Z", "type": "commit"}, {"oid": "667f75aacdecf0248ac3c653c7f08529b92ac5f6", "url": "https://github.com/codice/ddf/commit/667f75aacdecf0248ac3c653c7f08529b92ac5f6", "message": "DDF-UI-135 format", "committedDate": "2020-08-20T13:28:35Z", "type": "commit"}, {"oid": "667f75aacdecf0248ac3c653c7f08529b92ac5f6", "url": "https://github.com/codice/ddf/commit/667f75aacdecf0248ac3c653c7f08529b92ac5f6", "message": "DDF-UI-135 format", "committedDate": "2020-08-20T13:28:35Z", "type": "forcePushed"}]}