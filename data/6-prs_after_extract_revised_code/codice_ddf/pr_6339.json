{"pr_number": 6339, "pr_title": "CDM timeout update", "pr_createdAt": "2020-09-22T19:08:06Z", "pr_url": "https://github.com/codice/ddf/pull/6339", "timeline": [{"oid": "342ea5fdc01684004a8d73102c37e3cedbf52788", "url": "https://github.com/codice/ddf/commit/342ea5fdc01684004a8d73102c37e3cedbf52788", "message": "DDF-6334 added logging & camel will expire messages. Also set max number of threads for CDM", "committedDate": "2020-09-17T23:03:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4ODkxNg==", "url": "https://github.com/codice/ddf/pull/6339#discussion_r492988916", "bodyText": "Do we need that second condition, !failedAndNotUpdated(files[c])? It seems like the while loop before this would only satisfy the first condition (c < file length) if line 391's failedAndNotUpdated were false", "author": "josephthweatt", "createdAt": "2020-09-22T19:42:13Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -383,7 +387,12 @@ private void checkAndNotify(\n \n     int c = 0;\n     for (final AsyncFileEntry entry : previous) {\n-      if (c < files.length && !expiredNotUpdated(files[c])) {\n+\n+      while (c < files.length && failedAndNotUpdated(files[c])) {\n+        c++;\n+      }\n+\n+      if (c < files.length && !failedAndNotUpdated(files[c])) {", "originalCommit": "2b0e848d9cd60caf823a6e7585a4bc33fa1f15be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5NTY3Nw==", "url": "https://github.com/codice/ddf/pull/6339#discussion_r493095677", "bodyText": "Nope. We can remove the whole if statement now.", "author": "clockard", "createdAt": "2020-09-22T23:50:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4ODkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "82aebb6569eea79dbdc808ed4706cba1b3cd15e8", "chunk": "diff --git a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\nindex 1ae68080e1..2acbc3b705 100644\n--- a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n+++ b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n\n@@ -387,17 +397,11 @@ private void checkAndNotify(\n \n     int c = 0;\n     for (final AsyncFileEntry entry : previous) {\n-\n-      while (c < files.length && failedAndNotUpdated(files[c])) {\n+      while (c < files.length && entry.compareToFile(files[c]) > 0) {\n+        doCreate(new AsyncFileEntry(parent, files[c]), listenerCopy);\n         c++;\n       }\n \n-      if (c < files.length && !failedAndNotUpdated(files[c])) {\n-        while (c < files.length && entry.compareToFile(files[c]) > 0) {\n-          doCreate(new AsyncFileEntry(parent, files[c]), listenerCopy);\n-          c++;\n-        }\n-      }\n       if (c < files.length && entry.compareToFile(files[c]) == 0) {\n         doMatch(entry, listenerCopy);\n         checkAndNotify(entry, entry.getChildren(), listFiles(files[c]), listenerCopy);\n"}}, {"oid": "82aebb6569eea79dbdc808ed4706cba1b3cd15e8", "url": "https://github.com/codice/ddf/commit/82aebb6569eea79dbdc808ed4706cba1b3cd15e8", "message": "Update CDM timeouts to use camel component timeouts", "committedDate": "2020-09-22T23:48:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0MTQxMQ==", "url": "https://github.com/codice/ddf/pull/6339#discussion_r493741411", "bodyText": "\u2754  This shouldn't occur enough to fill the logs at info level, right?", "author": "shaundmorris", "createdAt": "2020-09-23T16:48:35Z", "path": "catalog/core/catalog-core-camelcomponent/src/main/java/ddf/camel/component/catalog/framework/FrameworkProducer.java", "diffHunk": "@@ -218,6 +241,32 @@ private void create(final Exchange exchange)\n     processCatalogResponse(createResponse, exchange);\n   }\n \n+  <T extends Operation, R> R processWithTimeout(\n+      long timeout, CatalogFunction<T, R> catalog, T request)\n+      throws InterruptedException, IngestTimeoutException, ExecutionException {", "originalCommit": "29e02db28bf772793e2756712c7f3b09a4213b16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NDQ1OA==", "url": "https://github.com/codice/ddf/pull/6339#discussion_r493784458", "bodyText": "It shouldn't but it also shouldn't be info. Changing to trace.", "author": "clockard", "createdAt": "2020-09-23T17:59:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0MTQxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "fcb33081afcee3ecb0c80266aa33d33a2610e2df", "chunk": "diff --git a/catalog/core/catalog-core-camelcomponent/src/main/java/ddf/camel/component/catalog/framework/FrameworkProducer.java b/catalog/core/catalog-core-camelcomponent/src/main/java/ddf/camel/component/catalog/framework/FrameworkProducer.java\nindex 57cbfa34c7..1e19e94d0c 100644\n--- a/catalog/core/catalog-core-camelcomponent/src/main/java/ddf/camel/component/catalog/framework/FrameworkProducer.java\n+++ b/catalog/core/catalog-core-camelcomponent/src/main/java/ddf/camel/component/catalog/framework/FrameworkProducer.java\n\n@@ -244,7 +244,7 @@ private void create(final Exchange exchange)\n   <T extends Operation, R> R processWithTimeout(\n       long timeout, CatalogFunction<T, R> catalog, T request)\n       throws InterruptedException, IngestTimeoutException, ExecutionException {\n-    LOGGER.info(\"Running catalog operation with timeout of {}\", timeout);\n+    LOGGER.trace(\"Running catalog operation with timeout of {}\", timeout);\n     Subject subject = SecurityUtils.getSubject();\n     if (subject instanceof ddf.security.Subject) {\n       request\n"}}, {"oid": "fcb33081afcee3ecb0c80266aa33d33a2610e2df", "url": "https://github.com/codice/ddf/commit/fcb33081afcee3ecb0c80266aa33d33a2610e2df", "message": "Add failure retry", "committedDate": "2020-09-23T21:23:05Z", "type": "forcePushed"}, {"oid": "73230f593ccd2e0122268bd24f7f879a92289320", "url": "https://github.com/codice/ddf/commit/73230f593ccd2e0122268bd24f7f879a92289320", "message": "Update FrameworkProducer and TransformProducer to support timeouts", "committedDate": "2020-09-24T17:07:46Z", "type": "commit"}, {"oid": "d9324ea0233883010e903988a8d3bda1bdfc0cd9", "url": "https://github.com/codice/ddf/commit/d9324ea0233883010e903988a8d3bda1bdfc0cd9", "message": "Add failure retry", "committedDate": "2020-09-24T17:07:47Z", "type": "forcePushed"}, {"oid": "c68bf3621d951090ecdecf8e70437b675ee88437", "url": "https://github.com/codice/ddf/commit/c68bf3621d951090ecdecf8e70437b675ee88437", "message": "Add failure retry", "committedDate": "2020-09-24T17:46:04Z", "type": "forcePushed"}, {"oid": "1a231167caf923fb64df027af17d9a0d01bf91e4", "url": "https://github.com/codice/ddf/commit/1a231167caf923fb64df027af17d9a0d01bf91e4", "message": "Update CDM timeouts to use camel component timeouts", "committedDate": "2020-09-24T19:04:55Z", "type": "commit"}, {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a", "url": "https://github.com/codice/ddf/commit/4d3da17aff306d1319a7e885ad360647ae659f3a", "message": "Add failure retry", "committedDate": "2020-09-24T19:04:55Z", "type": "commit"}, {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a", "url": "https://github.com/codice/ddf/commit/4d3da17aff306d1319a7e885ad360647ae659f3a", "message": "Add failure retry", "committedDate": "2020-09-24T19:04:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2ODU3NQ==", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494568575", "bodyText": "This should be in all capital letters.", "author": "cjlange", "createdAt": "2020-09-24T19:44:16Z", "path": "catalog/core/catalog-core-camelcomponent/src/main/java/ddf/camel/component/catalog/framework/IngestTimeoutException.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.camel.component.catalog.framework;\n+\n+public class IngestTimeoutException extends FrameworkProducerException {\n+  /** The constant serialVersionUID. */\n+  private static final long serialVersionUID = 1L;", "originalCommit": "4d3da17aff306d1319a7e885ad360647ae659f3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc0MzUzNg==", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494743536", "bodyText": "Normally you would be right but it needs to be this way for java serialization.", "author": "clockard", "createdAt": "2020-09-25T04:41:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2ODU3NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2OTUzNw==", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494569537", "bodyText": "This should be in all capital letters.", "author": "cjlange", "createdAt": "2020-09-24T19:45:58Z", "path": "catalog/core/catalog-core-camelcomponent/src/main/java/ddf/camel/component/catalog/transformer/TransformerTimeoutException.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.camel.component.catalog.transformer;\n+\n+public class TransformerTimeoutException extends RuntimeException {\n+\n+  /** The constant serialVersionUID. */\n+  private static final long serialVersionUID = 1L;", "originalCommit": "4d3da17aff306d1319a7e885ad360647ae659f3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc0MzYyMg==", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494743622", "bodyText": "See previous comment", "author": "clockard", "createdAt": "2020-09-25T04:41:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2OTUzNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MTM0NA==", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494571344", "bodyText": "This test needs a verification.", "author": "cjlange", "createdAt": "2020-09-24T19:49:28Z", "path": "catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.camel.component.catalog.framework;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import ddf.camel.component.catalog.CatalogComponent;\n+import ddf.camel.component.catalog.CatalogEndpoint;\n+import ddf.catalog.CatalogFramework;\n+import ddf.catalog.data.Metacard;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.security.Subject;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.shiro.SecurityUtils;\n+import org.apache.shiro.mgt.SecurityManager;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FrameworkProducerTest {\n+\n+  private static final String CREATE_OPERATION = \"CREATE\";\n+\n+  private static final String UPDATE_OPERATION = \"UPDATE\";\n+\n+  private static final String DELETE_OPERATION = \"DELETE\";\n+\n+  private static final String OPERATION_HEADER_KEY = \"operation\";\n+\n+  private static final String TIMEOUT_HEADER_KEY = \"timeoutMilliseconds\";\n+\n+  CatalogEndpoint catalogEndpoint;\n+\n+  List<Future<Object>> futures;\n+\n+  FrameworkProducer frameworkProducer;\n+\n+  @Before\n+  public void setup() {\n+    SecurityUtils.setSecurityManager(mock(SecurityManager.class));\n+    when(SecurityUtils.getSubject()).thenReturn(mock(Subject.class));\n+  }\n+\n+  private void setupFrameworkProducer(boolean timeout) throws Exception {\n+    CatalogFramework catalogFramework = mock(CatalogFramework.class);\n+    catalogEndpoint = mock(CatalogEndpoint.class);\n+\n+    CatalogComponent catalogComponent = mock(CatalogComponent.class);\n+    when(catalogEndpoint.getComponent()).thenReturn(catalogComponent);\n+\n+    futures = new ArrayList<>();\n+    Future<Object> future = mock(Future.class);\n+    when(future.isDone()).thenReturn(!timeout);\n+    futures.add(future);\n+\n+    ExecutorService executorService = mock(ExecutorService.class);\n+    when(executorService.invokeAll(any(), anyLong(), any(TimeUnit.class))).thenReturn(futures);\n+    when(catalogEndpoint.getExecutor()).thenReturn(executorService);\n+\n+    frameworkProducer = new FrameworkProducer(catalogEndpoint, catalogFramework);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerCreate() throws Exception {", "originalCommit": "4d3da17aff306d1319a7e885ad360647ae659f3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc0Mzc2OA==", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494743768", "bodyText": "Added verification", "author": "clockard", "createdAt": "2020-09-25T04:42:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MTM0NA=="}], "type": "inlineReview", "revised_code": {"commit": "398002e832539fd6c318bdbb05d42bc1ea4d0b95", "chunk": "diff --git a/catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java b/catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java\nindex afa2df1ee4..a0b8917962 100644\n--- a/catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java\n+++ b/catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java\n\n@@ -16,16 +16,23 @@\n import static org.mockito.Matchers.any;\n import static org.mockito.Matchers.anyLong;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import ddf.camel.component.catalog.CatalogComponent;\n import ddf.camel.component.catalog.CatalogEndpoint;\n import ddf.catalog.CatalogFramework;\n-import ddf.catalog.data.Metacard;\n import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.operation.CreateRequest;\n+import ddf.catalog.operation.DeleteRequest;\n+import ddf.catalog.operation.DeleteResponse;\n+import ddf.catalog.operation.UpdateRequest;\n import ddf.security.Subject;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MTY0Ng==", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494571646", "bodyText": "This test needs a verification.", "author": "cjlange", "createdAt": "2020-09-24T19:50:03Z", "path": "catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.camel.component.catalog.framework;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import ddf.camel.component.catalog.CatalogComponent;\n+import ddf.camel.component.catalog.CatalogEndpoint;\n+import ddf.catalog.CatalogFramework;\n+import ddf.catalog.data.Metacard;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.security.Subject;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.shiro.SecurityUtils;\n+import org.apache.shiro.mgt.SecurityManager;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FrameworkProducerTest {\n+\n+  private static final String CREATE_OPERATION = \"CREATE\";\n+\n+  private static final String UPDATE_OPERATION = \"UPDATE\";\n+\n+  private static final String DELETE_OPERATION = \"DELETE\";\n+\n+  private static final String OPERATION_HEADER_KEY = \"operation\";\n+\n+  private static final String TIMEOUT_HEADER_KEY = \"timeoutMilliseconds\";\n+\n+  CatalogEndpoint catalogEndpoint;\n+\n+  List<Future<Object>> futures;\n+\n+  FrameworkProducer frameworkProducer;\n+\n+  @Before\n+  public void setup() {\n+    SecurityUtils.setSecurityManager(mock(SecurityManager.class));\n+    when(SecurityUtils.getSubject()).thenReturn(mock(Subject.class));\n+  }\n+\n+  private void setupFrameworkProducer(boolean timeout) throws Exception {\n+    CatalogFramework catalogFramework = mock(CatalogFramework.class);\n+    catalogEndpoint = mock(CatalogEndpoint.class);\n+\n+    CatalogComponent catalogComponent = mock(CatalogComponent.class);\n+    when(catalogEndpoint.getComponent()).thenReturn(catalogComponent);\n+\n+    futures = new ArrayList<>();\n+    Future<Object> future = mock(Future.class);\n+    when(future.isDone()).thenReturn(!timeout);\n+    futures.add(future);\n+\n+    ExecutorService executorService = mock(ExecutorService.class);\n+    when(executorService.invokeAll(any(), anyLong(), any(TimeUnit.class))).thenReturn(futures);\n+    when(catalogEndpoint.getExecutor()).thenReturn(executorService);\n+\n+    frameworkProducer = new FrameworkProducer(catalogEndpoint, catalogFramework);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerCreate() throws Exception {\n+    setupFrameworkProducer(false);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(CREATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test(expected = IngestTimeoutException.class)\n+  public void testFrameworkProducerCreateTimeout() throws Exception {\n+    setupFrameworkProducer(true);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(CREATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerUpdate() throws Exception {", "originalCommit": "4d3da17aff306d1319a7e885ad360647ae659f3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc0MzgwNg==", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494743806", "bodyText": "added verification", "author": "clockard", "createdAt": "2020-09-25T04:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MTY0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "398002e832539fd6c318bdbb05d42bc1ea4d0b95", "chunk": "diff --git a/catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java b/catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java\nindex afa2df1ee4..a0b8917962 100644\n--- a/catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java\n+++ b/catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java\n\n@@ -16,16 +16,23 @@\n import static org.mockito.Matchers.any;\n import static org.mockito.Matchers.anyLong;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import ddf.camel.component.catalog.CatalogComponent;\n import ddf.camel.component.catalog.CatalogEndpoint;\n import ddf.catalog.CatalogFramework;\n-import ddf.catalog.data.Metacard;\n import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.operation.CreateRequest;\n+import ddf.catalog.operation.DeleteRequest;\n+import ddf.catalog.operation.DeleteResponse;\n+import ddf.catalog.operation.UpdateRequest;\n import ddf.security.Subject;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MTgwNw==", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494571807", "bodyText": "This test needs a verification.", "author": "cjlange", "createdAt": "2020-09-24T19:50:21Z", "path": "catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.camel.component.catalog.framework;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import ddf.camel.component.catalog.CatalogComponent;\n+import ddf.camel.component.catalog.CatalogEndpoint;\n+import ddf.catalog.CatalogFramework;\n+import ddf.catalog.data.Metacard;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.security.Subject;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.shiro.SecurityUtils;\n+import org.apache.shiro.mgt.SecurityManager;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FrameworkProducerTest {\n+\n+  private static final String CREATE_OPERATION = \"CREATE\";\n+\n+  private static final String UPDATE_OPERATION = \"UPDATE\";\n+\n+  private static final String DELETE_OPERATION = \"DELETE\";\n+\n+  private static final String OPERATION_HEADER_KEY = \"operation\";\n+\n+  private static final String TIMEOUT_HEADER_KEY = \"timeoutMilliseconds\";\n+\n+  CatalogEndpoint catalogEndpoint;\n+\n+  List<Future<Object>> futures;\n+\n+  FrameworkProducer frameworkProducer;\n+\n+  @Before\n+  public void setup() {\n+    SecurityUtils.setSecurityManager(mock(SecurityManager.class));\n+    when(SecurityUtils.getSubject()).thenReturn(mock(Subject.class));\n+  }\n+\n+  private void setupFrameworkProducer(boolean timeout) throws Exception {\n+    CatalogFramework catalogFramework = mock(CatalogFramework.class);\n+    catalogEndpoint = mock(CatalogEndpoint.class);\n+\n+    CatalogComponent catalogComponent = mock(CatalogComponent.class);\n+    when(catalogEndpoint.getComponent()).thenReturn(catalogComponent);\n+\n+    futures = new ArrayList<>();\n+    Future<Object> future = mock(Future.class);\n+    when(future.isDone()).thenReturn(!timeout);\n+    futures.add(future);\n+\n+    ExecutorService executorService = mock(ExecutorService.class);\n+    when(executorService.invokeAll(any(), anyLong(), any(TimeUnit.class))).thenReturn(futures);\n+    when(catalogEndpoint.getExecutor()).thenReturn(executorService);\n+\n+    frameworkProducer = new FrameworkProducer(catalogEndpoint, catalogFramework);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerCreate() throws Exception {\n+    setupFrameworkProducer(false);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(CREATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test(expected = IngestTimeoutException.class)\n+  public void testFrameworkProducerCreateTimeout() throws Exception {\n+    setupFrameworkProducer(true);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(CREATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerUpdate() throws Exception {\n+    setupFrameworkProducer(false);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(UPDATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test(expected = IngestTimeoutException.class)\n+  public void testFrameworkProducerUpdateTimeout() throws Exception {\n+    setupFrameworkProducer(true);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(UPDATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerDelete() throws Exception {", "originalCommit": "4d3da17aff306d1319a7e885ad360647ae659f3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc0MzgzNQ==", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494743835", "bodyText": "added verification", "author": "clockard", "createdAt": "2020-09-25T04:42:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MTgwNw=="}], "type": "inlineReview", "revised_code": {"commit": "398002e832539fd6c318bdbb05d42bc1ea4d0b95", "chunk": "diff --git a/catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java b/catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java\nindex afa2df1ee4..a0b8917962 100644\n--- a/catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java\n+++ b/catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java\n\n@@ -16,16 +16,23 @@\n import static org.mockito.Matchers.any;\n import static org.mockito.Matchers.anyLong;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import ddf.camel.component.catalog.CatalogComponent;\n import ddf.camel.component.catalog.CatalogEndpoint;\n import ddf.catalog.CatalogFramework;\n-import ddf.catalog.data.Metacard;\n import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.operation.CreateRequest;\n+import ddf.catalog.operation.DeleteRequest;\n+import ddf.catalog.operation.DeleteResponse;\n+import ddf.catalog.operation.UpdateRequest;\n import ddf.security.Subject;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MjI3Ng==", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494572276", "bodyText": "This test needs a verification.", "author": "cjlange", "createdAt": "2020-09-24T19:51:13Z", "path": "catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/inputtransformer/InputTransformerProducerTest.java", "diffHunk": "@@ -136,4 +166,30 @@ public void testMessageInputStreamIsClosed() throws Exception {\n     inputTransformerProducer.transform(message, \"\", \"\", mimeTypeToTransformerMapper);\n     verify(is).close();\n   }\n+\n+  @Test(expected = TransformerTimeoutException.class)\n+  public void testTransformTimeout() throws Exception {\n+    setupCatalogEndpoint(true);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(\"timeoutMilliseconds\")).thenReturn(1000L);\n+\n+    inputTransformerProducer.process(mockExchange);\n+  }\n+\n+  @Test\n+  public void testTransformNoTimeout() throws Exception {", "originalCommit": "4d3da17aff306d1319a7e885ad360647ae659f3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc0MzkwMA==", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494743900", "bodyText": "added verification", "author": "clockard", "createdAt": "2020-09-25T04:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MjI3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "398002e832539fd6c318bdbb05d42bc1ea4d0b95", "chunk": "diff --git a/catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/inputtransformer/InputTransformerProducerTest.java b/catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/inputtransformer/InputTransformerProducerTest.java\nindex c51495b17c..f80a8972c6 100644\n--- a/catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/inputtransformer/InputTransformerProducerTest.java\n+++ b/catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/inputtransformer/InputTransformerProducerTest.java\n\n@@ -191,5 +198,6 @@ public void testTransformNoTimeout() throws Exception {\n     when(mockExchange.getIn().getHeader(\"timeoutMilliseconds\")).thenReturn(1000L);\n \n     inputTransformerProducer.process(mockExchange);\n+    verify(message).setBody(any(Metacard.class));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4MzI0MA==", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494583240", "bodyText": "Is this going to be addressed in this pull request?", "author": "cjlange", "createdAt": "2020-09-24T20:12:31Z", "path": "catalog/core/catalog-core-directorymonitor/src/test/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitorIT.java", "diffHunk": "@@ -179,10 +180,12 @@ public void setup() throws Exception {\n   }\n \n   @Test\n+  @Ignore // Ignoring for now as the test requires a security manager", "originalCommit": "4d3da17aff306d1319a7e885ad360647ae659f3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc0NDU0Ng==", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494744546", "bodyText": "No. It sounds like it would be a significant effort to enable the security needed for this test now. It is a simple create test that has been throughly tested manually though. If this is ported to a newer branch it would be worth looking into re-enabling it.", "author": "clockard", "createdAt": "2020-09-25T04:45:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4MzI0MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "398002e832539fd6c318bdbb05d42bc1ea4d0b95", "url": "https://github.com/codice/ddf/commit/398002e832539fd6c318bdbb05d42bc1ea4d0b95", "message": "Camel component test updates", "committedDate": "2020-09-25T04:40:02Z", "type": "commit"}]}