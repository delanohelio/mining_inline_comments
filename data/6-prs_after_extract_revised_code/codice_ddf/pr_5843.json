{"pr_number": 5843, "pr_title": "DDF-5649 G-6176 Add interface to filter warnings", "pr_createdAt": "2020-02-15T06:18:49Z", "pr_url": "https://github.com/codice/ddf/pull/5843", "timeline": [{"oid": "0d2dd15a2639f4ddddebdf284525067a4bcd9901", "url": "https://github.com/codice/ddf/commit/0d2dd15a2639f4ddddebdf284525067a4bcd9901", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction. This\ncommit provides infrastructure which supports this desire in that it:\n\n - enables that a SourceResponse contain the ProcessingDetails which a\n   Source generates via a query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter() the warnings of the ProcessingDetails of\n   the SourceResponse which it receives back from a query and thereby\n   produce a Set which contains, exclusively, each warning of the\n   ProcessingDetails which describes or explains a malfunction which\n   occurred in the execution of the query\n\n - refactors some of the code which relates to the changes listed above", "committedDate": "2020-02-15T06:40:49Z", "type": "forcePushed"}, {"oid": "04353d9d565d85a750df6abfed79199132a7c081", "url": "https://github.com/codice/ddf/commit/04353d9d565d85a750df6abfed79199132a7c081", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction. This\ncommit provides infrastructure which supports this desire in that it:\n\n - enables that a SourceResponse contain the ProcessingDetails which a\n   Source generates via a query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter() the warnings of the ProcessingDetails of\n   the SourceResponse which it receives from the execution of a query\n   and, thereby, produce a Set which contains, exclusively, each warning\n   of the ProcessingDetails which describes or explains a malfunction\n   which occurred in the execution of the query\n\n - refactors some of the code which relates to the changes listed above", "committedDate": "2020-02-15T06:56:35Z", "type": "forcePushed"}, {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67", "url": "https://github.com/codice/ddf/commit/36ad872a851ae587645d8e86586baa79cf3b6e67", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction. This\ncommit provides infrastructure which supports the user's aforementioned\ndesire in that it:\n\n - enables that a SourceResponse contain the ProcessingDetails which a\n   Source generates via a query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter() the warnings of the ProcessingDetails of\n   the SourceResponse which it receives from the execution of a query\n   and, thereby, produce a Set which contains, exclusively, each warning\n   of the ProcessingDetails which describes or explains a malfunction\n   which occurred in the execution of the query\n\n - refactors some of the code which relates to the changes listed above", "committedDate": "2020-02-15T07:02:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5NzQwNg==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380397406", "bodyText": "\u2753 Do these lines conform to our formatter? If not, we need to format. If so, we should update the formatter. This can make it difficult debugging the result of the condition because there's a chance the stack context gets lost immediately. You don't want the stack to immediately change in the debugger window when this == o evals to true, you'd want an extra frame to verify that flow without losing your stack.", "author": "Lambeaux", "createdAt": "2020-02-17T23:31:06Z", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +83,20 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+    if (!super.equals(o)) return false;\n+    ProcessingDetailsImpl that = (ProcessingDetailsImpl) o;\n+    return Objects.equals(sourceId, that.sourceId) && Objects.equals(exception, that.exception);", "originalCommit": "36ad872a851ae587645d8e86586baa79cf3b6e67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzMDY3NA==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380430674", "bodyText": "These lines conform to our formatter, so do with that information what you will. I'll assuage your concerns about these lines and the others like them with an appropriate refactor, though.", "author": "kentmorrissey", "createdAt": "2020-02-18T02:45:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5NzQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "chunk": "diff --git a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java\nindex 60455d2cfc..ab1fe73575 100644\n--- a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java\n+++ b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java\n\n@@ -85,11 +85,12 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n \n   @Override\n   public boolean equals(Object o) {\n-    if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n-    if (!super.equals(o)) return false;\n+    if (!super.equals(o)) {\n+      return false;\n+    }\n     ProcessingDetailsImpl that = (ProcessingDetailsImpl) o;\n-    return Objects.equals(sourceId, that.sourceId) && Objects.equals(exception, that.exception);\n+    return Objects.equals(this.sourceId, that.sourceId)\n+        && Objects.equals(this.exception, that.exception);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5Nzg5MQ==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380397891", "bodyText": "\u2753 Can this javadoc just be a summary since we iterate each argument down below? This seems unnecessarily verbose.", "author": "Lambeaux", "createdAt": "2020-02-17T23:34:30Z", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/QueryResponseImpl.java", "diffHunk": "@@ -109,19 +111,52 @@ public QueryResponseImpl(\n       boolean closeResultQueue,\n       long hits,\n       Map<String, Serializable> properties) {\n+    this(request, results, closeResultQueue, hits, properties, null);\n+  }\n+\n+  /**\n+   * Instantiates a new {@code QueryResponseImpl} with: a {@link QueryRequest}, a {@link List} of\n+   * {@link Result}s from the {@link QueryRequest}, an indicator of whether to close this {@code\n+   * QueryResponseImpl}'s {@link #queue} of {@link Result}s, the number of distinct {@link Result}s\n+   * which this {@code QueryResponseImpl} contains, a {@link Map} which contains the keys and values\n+   * of this {@code QueryResponseImpl}'s properties, and the {@link Set} of {@link\n+   * ProcessingDetails} from the execution of the {@link QueryRequest}", "originalCommit": "36ad872a851ae587645d8e86586baa79cf3b6e67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "chunk": "diff --git a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/QueryResponseImpl.java b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/QueryResponseImpl.java\nindex c4aeb86800..a5a340848f 100644\n--- a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/QueryResponseImpl.java\n+++ b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/QueryResponseImpl.java\n\n@@ -116,20 +116,20 @@ public QueryResponseImpl(\n \n   /**\n    * Instantiates a new {@code QueryResponseImpl} with: a {@link QueryRequest}, a {@link List} of\n-   * {@link Result}s from the {@link QueryRequest}, an indicator of whether to close this {@code\n-   * QueryResponseImpl}'s {@link #queue} of {@link Result}s, the number of distinct {@link Result}s\n-   * which this {@code QueryResponseImpl} contains, a {@link Map} which contains the keys and values\n-   * of this {@code QueryResponseImpl}'s properties, and the {@link Set} of {@link\n-   * ProcessingDetails} from the execution of the {@link QueryRequest}\n+   * {@link Result}s, the indicator of whether to close the {@link #queue}, the number of {@link\n+   * Result}s, properties, and a {@link Set} of {@link ProcessingDetails}\n    *\n-   * @param request the {@link QueryRequest}\n-   * @param results the {@link List} of {@link Result}s\n-   * @param shouldCloseResultQueue the indicator of whether to close the {@link #queue}\n-   * @param hits the number of distinct {@link Result}s\n-   * @param properties the {@link Map} of this {@code QueryResponseImpl}'s properties' keys to their\n-   *     values\n-   * @param processingDetails the {@link Set} of {@link ProcessingDetails} of the {@link\n-   *     QueryRequest}'s execution\n+   * @param request the {@link QueryRequest} used to elicit this {@code QueryResponseImpl}\n+   * @param results the {@link List} of {@link Result}s which the execution of the request has\n+   *     returned\n+   * @param shouldCloseResultQueue the indicator of whether to close this {@code\n+   *     QueryResponseImpl}'s {@link #queue} of {@link Result}s or to leave the {@link #queue} open\n+   *     so that it may continue to add {@link Result}s as they become available\n+   * @param hits the number of distinct {@link Result}s in the list of results\n+   * @param properties the {@link Map} from each key of this {@code QueryResponseImpl}'s properties\n+   *     to its value\n+   * @param processingDetails the {@link Set} of {@link ProcessingDetails} which the execution of\n+   *     the request generated\n    */\n   public QueryResponseImpl(\n       QueryRequest request,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5ODE4OA==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380398188", "bodyText": "\u2753 Same question here.", "author": "Lambeaux", "createdAt": "2020-02-17T23:36:38Z", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +38,28 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n+    if (this.warnings == null) return that.warnings == null;\n+    if (that.warnings == null) return false;", "originalCommit": "36ad872a851ae587645d8e86586baa79cf3b6e67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "chunk": "diff --git a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\nindex 67f077c556..aaa66602ba 100644\n--- a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\n+++ b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\n\n@@ -40,19 +39,24 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n \n   @Override\n   public boolean equals(Object o) {\n-    if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n     SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n-    if (this.warnings == null) return that.warnings == null;\n-    if (that.warnings == null) return false;\n-    ListIterator<String> thisWarningsIterator = this.warnings.listIterator();\n-    ListIterator<String> thatWarningsIterator = that.warnings.listIterator();\n-    while (thisWarningsIterator.hasNext() && thatWarningsIterator.hasNext()) {\n-      String thisNextWarning = thisWarningsIterator.next();\n-      String thatNextWarning = thatWarningsIterator.next();\n-      if (!Objects.equals(thisNextWarning, thatNextWarning)) return false;\n+    if (this.warnings == null) {\n+      return that.warnings == null;\n     }\n-    return !thisWarningsIterator.hasNext() && !thatWarningsIterator.hasNext();\n+\n+    if (that.warnings == null) {\n+      return false;\n+    }\n+\n+    return this.warnings.size() == that.warnings.size() && this.warnings.containsAll(that.warnings);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMDc0NQ==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380400745", "bodyText": "\u2753 Should we test if this list preserves null values as well?", "author": "Lambeaux", "createdAt": "2020-02-17T23:53:47Z", "path": "catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/SourceResponseImplTest.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.operation;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import ddf.catalog.operation.impl.SourceResponseImpl;\n+import org.junit.Test;\n+\n+public class SourceResponseImplTest {\n+\n+  @Test\n+  public void testGetProcessingDetailsDoesNotReturnNull() {\n+    assertThat(\n+        (new SourceResponseImpl(null, null, null, 0, null)).getProcessingDetails(),\n+        is(notNullValue()));", "originalCommit": "36ad872a851ae587645d8e86586baa79cf3b6e67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyOTUzMg==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380429532", "bodyText": "Nevermind. This is a ctor I thought I saw a list literal. Wrong language.", "author": "Lambeaux", "createdAt": "2020-02-18T02:39:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMDc0NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMTUyMg==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380401522", "bodyText": "\u2753 Why not just return a new ProcessingDetails object? Why does this filtering operation have to lose object granularity?", "author": "Lambeaux", "createdAt": "2020-02-17T23:58:21Z", "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.security;\n+\n+import ddf.catalog.operation.ProcessingDetails;\n+import java.util.Set;\n+\n+/**\n+ * <b> This code is experimental. While this interface is functional and tested, it may change or be\n+ * removed in a future version of the library. </b>\n+ */\n+public interface SourceWarningsFilter {\n+\n+  /**\n+   * Get the identifier of this {@code SourceWarningsFilter}\n+   *\n+   * @return either the identifier or, if this {@code SourceWarningsFilter} has no identifier, the\n+   *     empty {@link String}\n+   */\n+  String getId();\n+\n+  /**\n+   * Determine whether this {@code SourceWarningsFilter} can correctly filter out unreadable or\n+   * useless {@code warnings} contained in the {@link ProcessingDetails} passed to it. If it can, so\n+   * filter the {@link ProcessingDetails}'s {@code warnings} and create a {@link Set} composed\n+   * exclusively of the {@code warnings} which pass through the filter.\n+   *\n+   * @param details the {@link ProcessingDetails} which contain the {@code warnings} which this\n+   *     method filters\n+   * @return either a {@link Set} composed exclusively of the parameter's filtered {@code warnings}\n+   *     or, if no {@code warnings} pass through the filter, the empty {@link Set}\n+   */\n+  Set<String> filter(ProcessingDetails details);", "originalCommit": "36ad872a851ae587645d8e86586baa79cf3b6e67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "chunk": "diff --git a/catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java b/catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java\nindex d8ebb332cd..23e9afed85 100644\n--- a/catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java\n+++ b/catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java\n\n@@ -14,7 +14,6 @@\n package ddf.catalog.security;\n \n import ddf.catalog.operation.ProcessingDetails;\n-import java.util.Set;\n \n /**\n  * <b> This code is experimental. While this interface is functional and tested, it may change or be\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMTkzNw==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380401937", "bodyText": "\u2753 Are we filtering or determining? What happens if this SourceWarningsFilter can't correctly filter? Does it throw an exception? Should we also have a canFilter function as well? Or is this documentation irrelevant because all SourceWarningsFilters can actually filter any ProcessingDetails object it comes across?", "author": "Lambeaux", "createdAt": "2020-02-18T00:01:13Z", "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.security;\n+\n+import ddf.catalog.operation.ProcessingDetails;\n+import java.util.Set;\n+\n+/**\n+ * <b> This code is experimental. While this interface is functional and tested, it may change or be\n+ * removed in a future version of the library. </b>\n+ */\n+public interface SourceWarningsFilter {\n+\n+  /**\n+   * Get the identifier of this {@code SourceWarningsFilter}\n+   *\n+   * @return either the identifier or, if this {@code SourceWarningsFilter} has no identifier, the\n+   *     empty {@link String}\n+   */\n+  String getId();\n+\n+  /**\n+   * Determine whether this {@code SourceWarningsFilter} can correctly filter out unreadable or\n+   * useless {@code warnings} contained in the {@link ProcessingDetails} passed to it. If it can, so\n+   * filter the {@link ProcessingDetails}'s {@code warnings} and create a {@link Set} composed\n+   * exclusively of the {@code warnings} which pass through the filter.", "originalCommit": "36ad872a851ae587645d8e86586baa79cf3b6e67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMzM5Mg==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380403392", "bodyText": "This \u261d\ufe0f is probably the most crucial thing that needs resolution.", "author": "Lambeaux", "createdAt": "2020-02-18T00:11:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMTkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwNzg0MQ==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380407841", "bodyText": "I think we should change getId() to canFilter() and rewrite the Javadoc of this method to specify that no class should filter() until it has determined that it canFilter(). @mojogitoverhere, we sort of talked about this. What do you think?", "author": "kentmorrissey", "createdAt": "2020-02-18T00:38:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMTkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxMTgxOQ==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380411819", "bodyText": "Alternatively, we could specify in this Javadoc that filter() should return an empty Set if it determines that it can't correctly filter() the ProcessingDetails which it receives as the argument.", "author": "kentmorrissey", "createdAt": "2020-02-18T01:03:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMTkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyNjMyMg==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380426322", "bodyText": "\u2757\ufe0f I wouldn't return an empty set if we can't correctly filter. Then how would we tell the difference between an inability to filter and a successful filter that yields empty?", "author": "Lambeaux", "createdAt": "2020-02-18T02:22:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMTkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1NTA3Mw==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r381055073", "bodyText": "Using canFilter() would make the whole SourceWarningsFilter plugin system more generic. Right now, each SourceWarningsFilter is tied to a single source since we only use a filter if its getId() matches the source id of the ProcessingDetails object it is filtering. After talking with @kentmorrissey a while back, I think we agreed that using canFilter() would be more complex and we probably aren't going to need it (YAGNI) so we opted to stick with getId() for now.\nTo answer your questions @Lambeaux:\n\nAre we filtering or determining?\n\nFiltering\n\nWhat happens if this SourceWarningsFilter can't correctly filter? Does it throw an exception?\n\nI'm not sure I understand how the filtering could fail. The idea was that we would check if warning string matches some kind of pattern. If it matches, then keep the warning, otherwise filter it out.\n\nShould we also have a canFilter function as well? Or is this documentation irrelevant because all SourceWarningsFilters can actually filter any ProcessingDetails object it comes across?\n\nLike I said above, we thought about using a canFilter() function but thought that added too much overhead. Instead each SourceWarningsFilter is tied directly to a source by its id.", "author": "mojogitoverhere", "createdAt": "2020-02-19T03:07:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMTkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3NzEzOQ==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r381577139", "bodyText": "After talking in person we decided to go with the canFilter() approach. And to clarify the javadoc accordingly.", "author": "Lambeaux", "createdAt": "2020-02-19T22:14:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMTkzNw=="}], "type": "inlineReview", "revised_code": {"commit": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "chunk": "diff --git a/catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java b/catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java\nindex d8ebb332cd..23e9afed85 100644\n--- a/catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java\n+++ b/catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java\n\n@@ -14,7 +14,6 @@\n package ddf.catalog.security;\n \n import ddf.catalog.operation.ProcessingDetails;\n-import java.util.Set;\n \n /**\n  * <b> This code is experimental. While this interface is functional and tested, it may change or be\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMjYyNg==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380402626", "bodyText": "\u270f\ufe0f Consider consolidating constructor parameters into one or two domain objects to reduce parameter clutter", "author": "mazarag2", "createdAt": "2020-02-18T00:05:58Z", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/QueryResponseImpl.java", "diffHunk": "@@ -109,19 +111,52 @@ public QueryResponseImpl(\n       boolean closeResultQueue,\n       long hits,\n       Map<String, Serializable> properties) {\n+    this(request, results, closeResultQueue, hits, properties, null);\n+  }\n+\n+  /**\n+   * Instantiates a new {@code QueryResponseImpl} with: a {@link QueryRequest}, a {@link List} of\n+   * {@link Result}s from the {@link QueryRequest}, an indicator of whether to close this {@code\n+   * QueryResponseImpl}'s {@link #queue} of {@link Result}s, the number of distinct {@link Result}s\n+   * which this {@code QueryResponseImpl} contains, a {@link Map} which contains the keys and values\n+   * of this {@code QueryResponseImpl}'s properties, and the {@link Set} of {@link\n+   * ProcessingDetails} from the execution of the {@link QueryRequest}\n+   *\n+   * @param request the {@link QueryRequest}\n+   * @param results the {@link List} of {@link Result}s\n+   * @param shouldCloseResultQueue the indicator of whether to close the {@link #queue}\n+   * @param hits the number of distinct {@link Result}s\n+   * @param properties the {@link Map} of this {@code QueryResponseImpl}'s properties' keys to their\n+   *     values\n+   * @param processingDetails the {@link Set} of {@link ProcessingDetails} of the {@link\n+   *     QueryRequest}'s execution\n+   */\n+  public QueryResponseImpl(\n+      QueryRequest request,\n+      List<Result> results,\n+      boolean shouldCloseResultQueue,\n+      long hits,\n+      Map<String, Serializable> properties,\n+      Set<ProcessingDetails> processingDetails) {", "originalCommit": "36ad872a851ae587645d8e86586baa79cf3b6e67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyOTc1Ng==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380429756", "bodyText": "\ud83d\udc4e I personally would not do that. The classes would incur more overhead than they resolve.", "author": "Lambeaux", "createdAt": "2020-02-18T02:40:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMjYyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc3NTQ4Mg==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380775482", "bodyText": "From my understanding If we're using Sonar as part of our Code Quality Policy in DDF this will break the build\nhttps://rules.sonarsource.com/java/RSPEC-107", "author": "mazarag2", "createdAt": "2020-02-18T16:11:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMjYyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3OTA0Mw==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r381579043", "bodyText": "There's a lot about Sonar that is good. But I don't think we fix every finding that gets reported. We're only at six arguments, that's not terrible. If we need to add more, then it might be time to reconsider.\nGood candidate for suppression IMHO.", "author": "Lambeaux", "createdAt": "2020-02-19T22:18:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMjYyNg=="}], "type": "inlineReview", "revised_code": {"commit": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "chunk": "diff --git a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/QueryResponseImpl.java b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/QueryResponseImpl.java\nindex c4aeb86800..a5a340848f 100644\n--- a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/QueryResponseImpl.java\n+++ b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/QueryResponseImpl.java\n\n@@ -116,20 +116,20 @@ public QueryResponseImpl(\n \n   /**\n    * Instantiates a new {@code QueryResponseImpl} with: a {@link QueryRequest}, a {@link List} of\n-   * {@link Result}s from the {@link QueryRequest}, an indicator of whether to close this {@code\n-   * QueryResponseImpl}'s {@link #queue} of {@link Result}s, the number of distinct {@link Result}s\n-   * which this {@code QueryResponseImpl} contains, a {@link Map} which contains the keys and values\n-   * of this {@code QueryResponseImpl}'s properties, and the {@link Set} of {@link\n-   * ProcessingDetails} from the execution of the {@link QueryRequest}\n+   * {@link Result}s, the indicator of whether to close the {@link #queue}, the number of {@link\n+   * Result}s, properties, and a {@link Set} of {@link ProcessingDetails}\n    *\n-   * @param request the {@link QueryRequest}\n-   * @param results the {@link List} of {@link Result}s\n-   * @param shouldCloseResultQueue the indicator of whether to close the {@link #queue}\n-   * @param hits the number of distinct {@link Result}s\n-   * @param properties the {@link Map} of this {@code QueryResponseImpl}'s properties' keys to their\n-   *     values\n-   * @param processingDetails the {@link Set} of {@link ProcessingDetails} of the {@link\n-   *     QueryRequest}'s execution\n+   * @param request the {@link QueryRequest} used to elicit this {@code QueryResponseImpl}\n+   * @param results the {@link List} of {@link Result}s which the execution of the request has\n+   *     returned\n+   * @param shouldCloseResultQueue the indicator of whether to close this {@code\n+   *     QueryResponseImpl}'s {@link #queue} of {@link Result}s or to leave the {@link #queue} open\n+   *     so that it may continue to add {@link Result}s as they become available\n+   * @param hits the number of distinct {@link Result}s in the list of results\n+   * @param properties the {@link Map} from each key of this {@code QueryResponseImpl}'s properties\n+   *     to its value\n+   * @param processingDetails the {@link Set} of {@link ProcessingDetails} which the execution of\n+   *     the request generated\n    */\n   public QueryResponseImpl(\n       QueryRequest request,\n"}}, {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9", "url": "https://github.com/codice/ddf/commit/73757ebc0045362a1390ac66db5dd00fe0955bf9", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction so that\nthe user can more easily resolve the malfunction. This commit supports\nthe user's aforementioned desire in that it:\n\n - enables that a SourceResponse contain the ProcessingDetails which a\n   Source generates via a query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter() the warnings of the ProcessingDetails of\n   the SourceResponse which it receives from the execution of a query\n   and, thereby, produce a Set which contains, exclusively, each warning\n   of the ProcessingDetails which describes or explains a malfunction\n   which occurred in the execution of the query\n\n - refactors some of the code which relates to the changes listed above", "committedDate": "2020-02-17T23:43:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc3NzMxMA==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380777310", "bodyText": "\u270f\ufe0f this can be a static constant", "author": "bdeining", "createdAt": "2020-02-18T16:14:38Z", "path": "catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/ProcessingDetailsImplTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.operation;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.source.UnsupportedQueryException;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.Test;\n+\n+public class ProcessingDetailsImplTest {\n+\n+  @Test\n+  public void testEquality() {\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    ProcessingDetails processingDetails =\n+        new ProcessingDetailsImpl(\"test source\", exception, \"warning\");\n+    ProcessingDetails identicalProcessingDetails =\n+        new ProcessingDetailsImpl(\"test source\", exception, \"warning\");\n+    assertThat(processingDetails, is(identicalProcessingDetails));\n+  }\n+\n+  @Test\n+  public void testInequalityOfSourceIds() {\n+    String sourceId = \"test source\";\n+    String differentSourceId = \"different test source\";\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    List<String> warning = Collections.singletonList(\"warning\");\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl(sourceId, exception, warning);\n+    ProcessingDetails processingDetailsWithDifferentSourceId =\n+        new ProcessingDetailsImpl(differentSourceId, exception, warning);\n+    assertThat(processingDetails, is(not(processingDetailsWithDifferentSourceId)));\n+  }\n+\n+  @Test\n+  public void testInequalityOfExceptions() {\n+    String sourceId = \"test source\";\n+    List<String> warning = Collections.singletonList(\"warning\");\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    Exception differentException =\n+        new UnsupportedQueryException(\"We do not support this query either\");\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl(sourceId, exception, warning);\n+    ProcessingDetails processingDetailsWithDifferentException =\n+        new ProcessingDetailsImpl(sourceId, differentException, warning);\n+    assertThat(processingDetails, is(not(processingDetailsWithDifferentException)));\n+  }\n+\n+  @Test\n+  public void testInequalityOfWarnings() {\n+    String sourceId = \"test source\";", "originalCommit": "73757ebc0045362a1390ac66db5dd00fe0955bf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc3NzU3Mg==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380777572", "bodyText": "same for a bunch of these objects", "author": "bdeining", "createdAt": "2020-02-18T16:15:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc3NzMxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3Mzc5MA==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r387273790", "bodyText": "Reduce duplication by making many of these objects static", "author": "brianfelix", "createdAt": "2020-03-03T20:26:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc3NzMxMA=="}], "type": "inlineReview", "revised_code": {"commit": "cf426512e0dd6d5e924f340b3367c4c27cb446f7", "chunk": "diff --git a/catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/ProcessingDetailsImplTest.java b/catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/ProcessingDetailsImplTest.java\nindex 2da73b8163..5e3bb8d679 100644\n--- a/catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/ProcessingDetailsImplTest.java\n+++ b/catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/ProcessingDetailsImplTest.java\n\n@@ -95,16 +95,6 @@ public void testEqualityWithNullExceptions() {\n     assertThat(processingDetails, is(identicalProcessingDetails));\n   }\n \n-  @Test\n-  public void testEqualityWithNullWarnings() {\n-    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n-    ProcessingDetails processingDetails =\n-        new ProcessingDetailsImpl(\"test source\", exception, (List<String>) null);\n-    ProcessingDetails identicalProcessingDetails =\n-        new ProcessingDetailsImpl(\"test source\", exception, (List<String>) null);\n-    assertThat(processingDetails, is(identicalProcessingDetails));\n-  }\n-\n   @Test\n   public void testEqualityOfHashCodes() {\n     Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5OTg0MA==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380399840", "bodyText": "I think this method's logic can be shortened. to\nreturn (o!=null && getClass() == o.getClass() && super.equals(o)\nThis is because line 91 and 92 do the same comparison that is done in this classes super class.\nIn fact, you could probably omit this method and just rely on the super method (unless you need to know if two compared objects are of the same impl type instead of just the same interface type).", "author": "brianfelix", "createdAt": "2020-02-17T23:47:58Z", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +83,20 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {", "originalCommit": "36ad872a851ae587645d8e86586baa79cf3b6e67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3OTY4Nw==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r381579687", "bodyText": "@kentmorrissey were these equals() and hashcode() functions generated by IntelliJ?", "author": "Lambeaux", "createdAt": "2020-02-19T22:20:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5OTg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0OTc5NA==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r384149794", "bodyText": "I don't think I should omit this method because the inclusion of this method allows that, where applicable, tests can verify that exceptions and sourceIds match in addition to warnings.", "author": "kentmorrissey", "createdAt": "2020-02-25T21:54:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5OTg0MA=="}], "type": "inlineReview", "revised_code": {"commit": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "chunk": "diff --git a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java\nindex 60455d2cfc..ab1fe73575 100644\n--- a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java\n+++ b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java\n\n@@ -85,11 +85,12 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n \n   @Override\n   public boolean equals(Object o) {\n-    if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n-    if (!super.equals(o)) return false;\n+    if (!super.equals(o)) {\n+      return false;\n+    }\n     ProcessingDetailsImpl that = (ProcessingDetailsImpl) o;\n-    return Objects.equals(sourceId, that.sourceId) && Objects.equals(exception, that.exception);\n+    return Objects.equals(this.sourceId, that.sourceId)\n+        && Objects.equals(this.exception, that.exception);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMzQxMw==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380903413", "bodyText": "Could probably replace this method with:\nif(o==null || getClass() != o.getClass()){\n\treturn false;\n}\nSourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\nif(this.warnings==null && that.warnings == null){\n\treturn true;\n}else{\n\treturn (this.warnings!=null && that.warnings!=null && this.warnings.size() == that.warnings.size() && this.warnings.containsAll(that.warnings));\n}\n\nfor added clarity", "author": "brianfelix", "createdAt": "2020-02-18T20:00:38Z", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +38,28 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;", "originalCommit": "73757ebc0045362a1390ac66db5dd00fe0955bf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3OTcyMw==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r381579723", "bodyText": "@kentmorrissey were these equals() and hashcode() functions generated by IntelliJ?", "author": "Lambeaux", "createdAt": "2020-02-19T22:20:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMzQxMw=="}], "type": "inlineReview", "revised_code": {"commit": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "chunk": "diff --git a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\nindex 67f077c556..aaa66602ba 100644\n--- a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\n+++ b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\n\n@@ -40,19 +39,24 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n \n   @Override\n   public boolean equals(Object o) {\n-    if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n     SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n-    if (this.warnings == null) return that.warnings == null;\n-    if (that.warnings == null) return false;\n-    ListIterator<String> thisWarningsIterator = this.warnings.listIterator();\n-    ListIterator<String> thatWarningsIterator = that.warnings.listIterator();\n-    while (thisWarningsIterator.hasNext() && thatWarningsIterator.hasNext()) {\n-      String thisNextWarning = thisWarningsIterator.next();\n-      String thatNextWarning = thatWarningsIterator.next();\n-      if (!Objects.equals(thisNextWarning, thatNextWarning)) return false;\n+    if (this.warnings == null) {\n+      return that.warnings == null;\n     }\n-    return !thisWarningsIterator.hasNext() && !thatWarningsIterator.hasNext();\n+\n+    if (that.warnings == null) {\n+      return false;\n+    }\n+\n+    return this.warnings.size() == that.warnings.size() && this.warnings.containsAll(that.warnings);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNzgwMQ==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380907801", "bodyText": "\u270f\ufe0f If you are just checking for equality to null, you can avoid implementing the equals method and replace\nprocessingDetails.equals(null)\n\nwith\nprocessingDetals == null\n\nNote that not implementing the equals method is only if you don't need the equals method for other checks of equality.", "author": "brianfelix", "createdAt": "2020-02-18T20:09:15Z", "path": "catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/ProcessingDetailsImplTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.operation;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.source.UnsupportedQueryException;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.Test;\n+\n+public class ProcessingDetailsImplTest {\n+\n+  @Test\n+  public void testEquality() {\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    ProcessingDetails processingDetails =\n+        new ProcessingDetailsImpl(\"test source\", exception, \"warning\");\n+    ProcessingDetails identicalProcessingDetails =\n+        new ProcessingDetailsImpl(\"test source\", exception, \"warning\");\n+    assertThat(processingDetails, is(identicalProcessingDetails));\n+  }\n+\n+  @Test\n+  public void testInequalityOfSourceIds() {\n+    String sourceId = \"test source\";\n+    String differentSourceId = \"different test source\";\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    List<String> warning = Collections.singletonList(\"warning\");\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl(sourceId, exception, warning);\n+    ProcessingDetails processingDetailsWithDifferentSourceId =\n+        new ProcessingDetailsImpl(differentSourceId, exception, warning);\n+    assertThat(processingDetails, is(not(processingDetailsWithDifferentSourceId)));\n+  }\n+\n+  @Test\n+  public void testInequalityOfExceptions() {\n+    String sourceId = \"test source\";\n+    List<String> warning = Collections.singletonList(\"warning\");\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    Exception differentException =\n+        new UnsupportedQueryException(\"We do not support this query either\");\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl(sourceId, exception, warning);\n+    ProcessingDetails processingDetailsWithDifferentException =\n+        new ProcessingDetailsImpl(sourceId, differentException, warning);\n+    assertThat(processingDetails, is(not(processingDetailsWithDifferentException)));\n+  }\n+\n+  @Test\n+  public void testInequalityOfWarnings() {\n+    String sourceId = \"test source\";\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    List<String> warning = Collections.singletonList(\"warning\");\n+    List<String> differentWarning = Collections.singletonList(\"different warning\");\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl(sourceId, exception, warning);\n+    ProcessingDetails processingDetailsWithDifferentWarnings =\n+        new ProcessingDetailsImpl(sourceId, exception, differentWarning);\n+    assertThat(processingDetails, is(not(processingDetailsWithDifferentWarnings)));\n+  }\n+\n+  @Test\n+  public void testInequalityWithNull() {\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl();\n+    assertThat(processingDetails.equals(null), is(false));", "originalCommit": "73757ebc0045362a1390ac66db5dd00fe0955bf9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cf426512e0dd6d5e924f340b3367c4c27cb446f7", "chunk": "diff --git a/catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/ProcessingDetailsImplTest.java b/catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/ProcessingDetailsImplTest.java\nindex 2da73b8163..5e3bb8d679 100644\n--- a/catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/ProcessingDetailsImplTest.java\n+++ b/catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/ProcessingDetailsImplTest.java\n\n@@ -95,16 +95,6 @@ public void testEqualityWithNullExceptions() {\n     assertThat(processingDetails, is(identicalProcessingDetails));\n   }\n \n-  @Test\n-  public void testEqualityWithNullWarnings() {\n-    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n-    ProcessingDetails processingDetails =\n-        new ProcessingDetailsImpl(\"test source\", exception, (List<String>) null);\n-    ProcessingDetails identicalProcessingDetails =\n-        new ProcessingDetailsImpl(\"test source\", exception, (List<String>) null);\n-    assertThat(processingDetails, is(identicalProcessingDetails));\n-  }\n-\n   @Test\n   public void testEqualityOfHashCodes() {\n     Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwOTM5OQ==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380909399", "bodyText": "\u270f\ufe0f If you are just checking for equality to null, you can avoid implementing the equals method and replace\nprocessingDetails.equals(null)\n\nwith\nprocessingDetals == null\n\nNote that not implementing the equals method is only if you don't need the equals method for other checks of equality.", "author": "brianfelix", "createdAt": "2020-02-18T20:12:22Z", "path": "catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/SourceProcessingDetailsImplTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.operation;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+\n+import ddf.catalog.operation.impl.SourceProcessingDetailsImpl;\n+import java.util.Collections;\n+import org.junit.Test;\n+\n+public class SourceProcessingDetailsImplTest {\n+\n+  @Test\n+  public void testEquality() {\n+    SourceProcessingDetails sourceProcessingDetails =\n+        new SourceProcessingDetailsImpl(Collections.singletonList(\"warning\"));\n+    SourceProcessingDetails identicalSourceProcessingDetails =\n+        new SourceProcessingDetailsImpl(Collections.singletonList(\"warning\"));\n+    assertThat(sourceProcessingDetails, is(identicalSourceProcessingDetails));\n+  }\n+\n+  @Test\n+  public void testInequality() {\n+    SourceProcessingDetails sourceProcessingDetails =\n+        new SourceProcessingDetailsImpl(Collections.singletonList(\"warning\"));\n+    SourceProcessingDetails unequalSourceProcessingDetails =\n+        new SourceProcessingDetailsImpl(Collections.singletonList(\"different warning\"));\n+    assertThat(sourceProcessingDetails, is(not(unequalSourceProcessingDetails)));\n+  }\n+\n+  @Test\n+  public void testInequalityWithNull() {\n+    SourceProcessingDetails sourceProcessingDetails = new SourceProcessingDetailsImpl();\n+    assertThat(sourceProcessingDetails.equals(null), is(false));", "originalCommit": "73757ebc0045362a1390ac66db5dd00fe0955bf9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cf426512e0dd6d5e924f340b3367c4c27cb446f7", "chunk": "diff --git a/catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/SourceProcessingDetailsImplTest.java b/catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/SourceProcessingDetailsImplTest.java\nindex 97d2bf94c5..002e6c0eed 100644\n--- a/catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/SourceProcessingDetailsImplTest.java\n+++ b/catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/SourceProcessingDetailsImplTest.java\n\n@@ -47,14 +47,6 @@ public void testInequalityWithNull() {\n     assertThat(sourceProcessingDetails.equals(null), is(false));\n   }\n \n-  @Test\n-  public void testEqualityWithNullWarnings() {\n-    SourceProcessingDetails sourceProcessingDetails = new SourceProcessingDetailsImpl(null);\n-    SourceProcessingDetails identicalSourceProcessingDetails =\n-        new SourceProcessingDetailsImpl(null);\n-    assertThat(sourceProcessingDetails, is(identicalSourceProcessingDetails));\n-  }\n-\n   @Test\n   public void testEqualityOfHashCodes() {\n     SourceProcessingDetails sourceProcessingDetails =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxMTE2NA==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380911164", "bodyText": "I'm not sure what this javadoc is saying in the sentence: \"If it can, so filter the ProcessingDetails warnings and create...\". The part that confuses me is \"so filter\"", "author": "brianfelix", "createdAt": "2020-02-18T20:16:13Z", "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.security;\n+\n+import ddf.catalog.operation.ProcessingDetails;\n+import java.util.Set;\n+\n+/**\n+ * <b> This code is experimental. While this interface is functional and tested, it may change or be\n+ * removed in a future version of the library. </b>\n+ */\n+public interface SourceWarningsFilter {\n+\n+  /**\n+   * Get the identifier of this {@code SourceWarningsFilter}\n+   *\n+   * @return either the identifier or, if this {@code SourceWarningsFilter} has no identifier, the\n+   *     empty {@link String}\n+   */\n+  String getId();\n+\n+  /**\n+   * Determine whether this {@code SourceWarningsFilter} can correctly filter out unreadable or\n+   * useless {@code warnings} contained in the {@link ProcessingDetails} passed to it. If it can, so\n+   * filter the {@link ProcessingDetails}'s {@code warnings} and create a {@link Set} composed", "originalCommit": "73757ebc0045362a1390ac66db5dd00fe0955bf9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "chunk": "diff --git a/catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java b/catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java\nindex d8ebb332cd..23e9afed85 100644\n--- a/catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java\n+++ b/catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java\n\n@@ -14,7 +14,6 @@\n package ddf.catalog.security;\n \n import ddf.catalog.operation.ProcessingDetails;\n-import java.util.Set;\n \n /**\n  * <b> This code is experimental. While this interface is functional and tested, it may change or be\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MjgwNQ==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380942805", "bodyText": "Rename the variable \"that\" to increase readability.", "author": "brianfelix", "createdAt": "2020-02-18T21:23:06Z", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +83,20 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+    if (!super.equals(o)) return false;\n+    ProcessingDetailsImpl that = (ProcessingDetailsImpl) o;", "originalCommit": "73757ebc0045362a1390ac66db5dd00fe0955bf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MTcxMA==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380951710", "bodyText": "What do you suggest as a more readable name?", "author": "kentmorrissey", "createdAt": "2020-02-18T21:41:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MjgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwNDA4MQ==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r384804081", "bodyText": "Spoke with @kentmorrissey and I am fine with leaving this name as is.", "author": "brianfelix", "createdAt": "2020-02-26T22:23:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MjgwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "chunk": "diff --git a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java\nindex 60455d2cfc..ab1fe73575 100644\n--- a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java\n+++ b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java\n\n@@ -85,11 +85,12 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n \n   @Override\n   public boolean equals(Object o) {\n-    if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n-    if (!super.equals(o)) return false;\n+    if (!super.equals(o)) {\n+      return false;\n+    }\n     ProcessingDetailsImpl that = (ProcessingDetailsImpl) o;\n-    return Objects.equals(sourceId, that.sourceId) && Objects.equals(exception, that.exception);\n+    return Objects.equals(this.sourceId, that.sourceId)\n+        && Objects.equals(this.exception, that.exception);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MzExMQ==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380943111", "bodyText": "Rename the variable \"that\" to increase readability.", "author": "brianfelix", "createdAt": "2020-02-18T21:23:46Z", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +38,28 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;", "originalCommit": "73757ebc0045362a1390ac66db5dd00fe0955bf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwNDE1OA==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r384804158", "bodyText": "Spoke with @kentmorrissey and I am fine with leaving this name as is.", "author": "brianfelix", "createdAt": "2020-02-26T22:23:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MzExMQ=="}], "type": "inlineReview", "revised_code": {"commit": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "chunk": "diff --git a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\nindex 67f077c556..aaa66602ba 100644\n--- a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\n+++ b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\n\n@@ -40,19 +39,24 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n \n   @Override\n   public boolean equals(Object o) {\n-    if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n     SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n-    if (this.warnings == null) return that.warnings == null;\n-    if (that.warnings == null) return false;\n-    ListIterator<String> thisWarningsIterator = this.warnings.listIterator();\n-    ListIterator<String> thatWarningsIterator = that.warnings.listIterator();\n-    while (thisWarningsIterator.hasNext() && thatWarningsIterator.hasNext()) {\n-      String thisNextWarning = thisWarningsIterator.next();\n-      String thatNextWarning = thatWarningsIterator.next();\n-      if (!Objects.equals(thisNextWarning, thatNextWarning)) return false;\n+    if (this.warnings == null) {\n+      return that.warnings == null;\n     }\n-    return !thisWarningsIterator.hasNext() && !thatWarningsIterator.hasNext();\n+\n+    if (that.warnings == null) {\n+      return false;\n+    }\n+\n+    return this.warnings.size() == that.warnings.size() && this.warnings.containsAll(that.warnings);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NTkyMQ==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380945921", "bodyText": "Braces should be added to conform to google style as listed on the \"Coding Standards\" page on confluence. This statement applies to the entire PR.\n\n4.1.1 Braces are used where optional\nBraces are used with if, else, for, do and while statements, even when the body is empty or contains only a single statement.", "author": "brianfelix", "createdAt": "2020-02-18T21:29:36Z", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +38,28 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {", "originalCommit": "73757ebc0045362a1390ac66db5dd00fe0955bf9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "chunk": "diff --git a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\nindex 67f077c556..aaa66602ba 100644\n--- a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\n+++ b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\n\n@@ -40,19 +39,24 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n \n   @Override\n   public boolean equals(Object o) {\n-    if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n     SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n-    if (this.warnings == null) return that.warnings == null;\n-    if (that.warnings == null) return false;\n-    ListIterator<String> thisWarningsIterator = this.warnings.listIterator();\n-    ListIterator<String> thatWarningsIterator = that.warnings.listIterator();\n-    while (thisWarningsIterator.hasNext() && thatWarningsIterator.hasNext()) {\n-      String thisNextWarning = thisWarningsIterator.next();\n-      String thatNextWarning = thatWarningsIterator.next();\n-      if (!Objects.equals(thisNextWarning, thatNextWarning)) return false;\n+    if (this.warnings == null) {\n+      return that.warnings == null;\n     }\n-    return !thisWarningsIterator.hasNext() && !thatWarningsIterator.hasNext();\n+\n+    if (that.warnings == null) {\n+      return false;\n+    }\n+\n+    return this.warnings.size() == that.warnings.size() && this.warnings.containsAll(that.warnings);\n   }\n \n   @Override\n"}}, {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "url": "https://github.com/codice/ddf/commit/80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction so that\nthe user can more easily resolve the malfunction. This commit supports\nthe user's aforementioned desire in that it:\n\n - enables that a SourceResponse contain the ProcessingDetails which a\n   Source generates via a query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter the warnings of the ProcessingDetails of\n   the SourceResponse which the Source receives from the execution of a\n   query and, thereby, produce new ProcessingDetails whose warnings\n   contain only each warning of the original ProcessingDetails which\n   describes or explains a malfunction which occurred in the execution\n   of the query\n\n - refactors some of the code which relates to the changes listed above", "committedDate": "2020-02-28T05:21:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNTMyOQ==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r386615329", "bodyText": "\u2753 Why are null semantics leaking into the equals(..) method? Shouldn't the constructor enforce that, worst case, the list of warnings are empty?", "author": "Lambeaux", "createdAt": "2020-03-02T19:54:40Z", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +37,33 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n+    if (this.warnings == null) {\n+      return that.warnings == null;\n+    }\n+\n+    if (that.warnings == null) {\n+      return false;\n+    }", "originalCommit": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNTM2OA==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r386625368", "bodyText": "Maybe the constructor should enforce that, but it doesn't. Do you recommend that I alter the constructor such that it enforces that its warnings cannot take a null value?", "author": "kentmorrissey", "createdAt": "2020-03-02T20:15:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNTMyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3NTkyNA==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r387275924", "bodyText": "Yes that would be a good improvement. It should not support taking null but, rather, an empty list if necessary. That cleans up your equals method and the associated tests.", "author": "Lambeaux", "createdAt": "2020-03-03T20:30:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNTMyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4NTg0Mw==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r387285843", "bodyText": "Do you think that the constructor should throw an Exception when it receives null as an argument, or just set warnings to an empty List in that case?", "author": "kentmorrissey", "createdAt": "2020-03-03T20:51:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNTMyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzMDQ5NA==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r387930494", "bodyText": "Definitely throw. Something like notNull(your_object, \"this thing can't be null\") would work fine.", "author": "Lambeaux", "createdAt": "2020-03-04T20:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNTMyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8e20967291c43f1c24fd51d58c90d6c9b3dcbca4", "chunk": "diff --git a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\nindex aaa66602ba..b821ccfeff 100644\n--- a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\n+++ b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\n\n@@ -39,7 +39,7 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n \n   @Override\n   public boolean equals(Object o) {\n-    if (this == o) {\n+    if (super.equals(o)) {\n       return true;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNjQ1OQ==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r386616459", "bodyText": "\u2753 You're defining equality as this.warnings being a superset of that.warnings, is that really what you want?", "author": "Lambeaux", "createdAt": "2020-03-02T19:56:41Z", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +37,33 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n+    if (this.warnings == null) {\n+      return that.warnings == null;\n+    }\n+\n+    if (that.warnings == null) {\n+      return false;\n+    }\n+\n+    return this.warnings.size() == that.warnings.size() && this.warnings.containsAll(that.warnings);", "originalCommit": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxODM2OQ==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r386618369", "bodyText": "\u2757\ufe0f Verify this is not a bug.", "author": "Lambeaux", "createdAt": "2020-03-02T20:00:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNjQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNzc1NA==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r386627754", "bodyText": "How would it be a bug?", "author": "kentmorrissey", "createdAt": "2020-03-02T20:20:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNjQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3MzI4Ng==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r387273286", "bodyText": "@Lambeaux In the case that this.warnings is a superset of that.warnings, that.warnings.size() will not be equal to this.warnings.size() which will correctly have the method return false.", "author": "brianfelix", "createdAt": "2020-03-03T20:25:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNjQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3NTA1NQ==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r387275055", "bodyText": "Ah! Totally missed that. My eyes focused in on the one-sided contains check. That should be fine \ud83d\udc4d", "author": "Lambeaux", "createdAt": "2020-03-03T20:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNjQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4NDI2Mg==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r387284262", "bodyText": "Any set is a superset of itself.", "author": "kentmorrissey", "createdAt": "2020-03-03T20:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNjQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8e20967291c43f1c24fd51d58c90d6c9b3dcbca4", "chunk": "diff --git a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\nindex aaa66602ba..b821ccfeff 100644\n--- a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\n+++ b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\n\n@@ -39,7 +39,7 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n \n   @Override\n   public boolean equals(Object o) {\n-    if (this == o) {\n+    if (super.equals(o)) {\n       return true;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNzI1NA==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r386617254", "bodyText": "\u2753 Can we be consistent with our equals methods? The other object defers to super.equals(..) and this one basically re-implements it.", "author": "Lambeaux", "createdAt": "2020-03-02T19:58:21Z", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +37,33 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }", "originalCommit": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyODY0MQ==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r386628641", "bodyText": "Which super.equals() does this method basically reimplement?", "author": "kentmorrissey", "createdAt": "2020-03-02T20:22:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNzI1NA=="}], "type": "inlineReview", "revised_code": {"commit": "8e20967291c43f1c24fd51d58c90d6c9b3dcbca4", "chunk": "diff --git a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\nindex aaa66602ba..b821ccfeff 100644\n--- a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\n+++ b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\n\n@@ -39,7 +39,7 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n \n   @Override\n   public boolean equals(Object o) {\n-    if (this == o) {\n+    if (super.equals(o)) {\n       return true;\n     }\n \n"}}, {"oid": "8e20967291c43f1c24fd51d58c90d6c9b3dcbca4", "url": "https://github.com/codice/ddf/commit/8e20967291c43f1c24fd51d58c90d6c9b3dcbca4", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction so that\nthe user can more easily resolve the malfunction. This commit supports\nthe user's aforementioned desire in that it:\n\n - enables that a SourceResponse contain the ProcessingDetails which a\n   Source generates via a query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter the warnings of ProcessingDetails of a\n   SourceResponse which the Source may receive from the execution of a\n   query and, thereby, produce new ProcessingDetails whose warnings\n   contain only each warning of the original ProcessingDetails which\n   describes or explains a malfunction which occurred in the execution\n   of the query\n\n - refactors some of the code which relates to the changes listed above", "committedDate": "2020-03-02T20:31:12Z", "type": "forcePushed"}, {"oid": "cf426512e0dd6d5e924f340b3367c4c27cb446f7", "url": "https://github.com/codice/ddf/commit/cf426512e0dd6d5e924f340b3367c4c27cb446f7", "message": "DDF-5649 REVIEW THIS COMMIT IN PARTICULAR\n\nand then squash it into the previous commit so that no record\nof this message remains on this earth or any other.", "committedDate": "2020-03-05T00:53:11Z", "type": "forcePushed"}, {"oid": "546a5a32eca8b6e777ae74a13c22b00c55cb4b93", "url": "https://github.com/codice/ddf/commit/546a5a32eca8b6e777ae74a13c22b00c55cb4b93", "message": "DDF-5649 GSR-6176 REVIEW THIS COMMIT IN PARTICULAR\n\nand then squash it into the previous commit so that no record\nof this message remains", "committedDate": "2020-03-05T03:02:18Z", "type": "forcePushed"}, {"oid": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc", "url": "https://github.com/codice/ddf/commit/c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc", "message": "DDF-5649 GSR-6176 REVIEW THIS COMMIT IN PARTICULAR\n\nand then squash it into the previous commit so that no record\nof this message remains", "committedDate": "2020-03-05T05:38:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTI5NA==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388565294", "bodyText": "\u270f\ufe0f This is fine, but it hides the fact that all you're really doing is a reference equality comparison. Unless of course this object's inheritance hierarchy changed. Better to be explicit.", "author": "Lambeaux", "createdAt": "2020-03-05T21:06:00Z", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -13,29 +13,57 @@\n  */\n package ddf.catalog.operation.impl;\n \n+import static org.apache.commons.lang.Validate.notNull;\n+\n import ddf.catalog.operation.SourceProcessingDetails;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n \n /**\n  * The SourceProcessingDetailsImpl class represents a default implementation of a {@link\n  * SourceProcessingDetails} to provide {@link Source} warnings.\n  */\n public class SourceProcessingDetailsImpl implements SourceProcessingDetails {\n \n-  protected List<String> warnings = null;\n+  protected List<String> warnings;\n \n-  /** Instantiates a new SourceProcessingDetailsImpl. */\n-  public SourceProcessingDetailsImpl() {}\n+  /** Instantiates a new SourceProcessingDetailsImpl */\n+  public SourceProcessingDetailsImpl() {\n+    warnings = new ArrayList<>();\n+  }\n \n   /**\n    * Instantiates a new SourceProcessingDetailsImpl.\n    *\n    * @param warnings the warnings associated with the {@link Source}\n    */\n   public SourceProcessingDetailsImpl(List<String> warnings) {\n+    notNull(\n+        warnings, \"the constructor of SourceProcessingDetailsImpl does not accept null warnings\");\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (super.equals(o)) {\n+      return true;\n+    }", "originalCommit": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3MTQzNA==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388571434", "bodyText": "So you think I should change line 49 back to if (this == 0)?", "author": "kentmorrissey", "createdAt": "2020-03-05T21:18:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MDIxNg==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388580216", "bodyText": "Oh I see what you did. You tried to be consistent, per my previous comment, but one of the objects actually needed to reference the parent. Okay this is fine.", "author": "Lambeaux", "createdAt": "2020-03-05T21:36:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTI5NA=="}], "type": "inlineReview", "revised_code": {"commit": "8007ee9288503a8e6258cfbd1451cdf3f82c8121", "chunk": "diff --git a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\nindex 3427624702..bb3d0b89d9 100644\n--- a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\n+++ b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java\n\n@@ -16,7 +16,7 @@\n import static org.apache.commons.lang.Validate.notNull;\n \n import ddf.catalog.operation.SourceProcessingDetails;\n-import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTcxOA==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388565718", "bodyText": "\u270f\ufe0f Same here. It's fine for now. But it adds an unnecessary level of indirection.", "author": "Lambeaux", "createdAt": "2020-03-05T21:06:59Z", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +93,21 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (!super.equals(o)) {\n+      return false;\n+    }", "originalCommit": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3MjI4MQ==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388572281", "bodyText": "These lines call SourceProcessingDetailsImpl's equals(). Do you think that adds an unnecessary level of indirection?", "author": "kentmorrissey", "createdAt": "2020-03-05T21:20:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTcxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MDY5OA==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388580698", "bodyText": "No, you're right. I missed that. \ud83d\udc4d", "author": "Lambeaux", "createdAt": "2020-03-05T21:37:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTcxOA=="}], "type": "inlineReview", "revised_code": {"commit": "8007ee9288503a8e6258cfbd1451cdf3f82c8121", "chunk": "diff --git a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java\nindex 4f541adc8d..c88a807a60 100644\n--- a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java\n+++ b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java\n\n@@ -87,12 +87,6 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     this.sourceId = sourceId;\n   }\n \n-  private static List<String> toWarningList(String warning) {\n-    List<String> warnings = new ArrayList<String>();\n-    warnings.add(warning);\n-    return warnings;\n-  }\n-\n   @Override\n   public boolean equals(Object o) {\n     if (!super.equals(o)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NzM5Mw==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388567393", "bodyText": "\u270f\ufe0f Could use Collections.singletonList(...) instead.", "author": "Lambeaux", "createdAt": "2020-03-05T21:10:33Z", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +93,21 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;", "originalCommit": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3MzgyMA==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388573820", "bodyText": "...instead of to \u200dtoWarningList()?", "author": "kentmorrissey", "createdAt": "2020-03-05T21:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NzM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3OTI3OQ==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388579279", "bodyText": "Correct. The toWarningList() method is creating a general purpose collection, meant to hold multiple elements, and is mutable. By using Collections.singletonList(list) you are cutting down on code, memory usage, and get immutability for free.", "author": "Lambeaux", "createdAt": "2020-03-05T21:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NzM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NTA5OA==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388585098", "bodyText": "It's mutable, but never mutates. Neither ProcessingDetailsImpl nor SourceProcessingDetailsImpl either adds a warning to this.warnings or provides a method to do so. If I use Collections.singletonList() as you suggest, shouldn't I delete toWarningList()?", "author": "kentmorrissey", "createdAt": "2020-03-05T21:47:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NzM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MDE2Mg==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388590162", "bodyText": "Yes the idea is that singletonList() replaces toWarningList() and similar cases where a method like that would be needed. But I'm not mandating the change for approval.", "author": "Lambeaux", "createdAt": "2020-03-05T21:55:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NzM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MTM1MQ==", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388591351", "bodyText": "I know. I just wanted to make sure that I understood your suggestion. I agree with you, so I'll make the change which you suggested in this comment.", "author": "kentmorrissey", "createdAt": "2020-03-05T21:58:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NzM5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8007ee9288503a8e6258cfbd1451cdf3f82c8121", "chunk": "diff --git a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java\nindex 4f541adc8d..c88a807a60 100644\n--- a/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java\n+++ b/catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java\n\n@@ -87,12 +87,6 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     this.sourceId = sourceId;\n   }\n \n-  private static List<String> toWarningList(String warning) {\n-    List<String> warnings = new ArrayList<String>();\n-    warnings.add(warning);\n-    return warnings;\n-  }\n-\n   @Override\n   public boolean equals(Object o) {\n     if (!super.equals(o)) {\n"}}, {"oid": "8007ee9288503a8e6258cfbd1451cdf3f82c8121", "url": "https://github.com/codice/ddf/commit/8007ee9288503a8e6258cfbd1451cdf3f82c8121", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction so that\nthe user can more easily resolve the malfunction. This commit supports\nthe user's aforementioned desire in that it:\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter the warnings of ProcessingDetails of a\n   SourceResponse which the Source may receive from the execution of a\n   query and, thereby, produce new ProcessingDetails whose warnings\n   contain only each warning of the original ProcessingDetails which\n   describes or explains a malfunction which occurred in the execution\n   of the query\n\n - refactors some of the code which relates to the changes listed above", "committedDate": "2020-03-05T23:47:53Z", "type": "forcePushed"}, {"oid": "602e93375c7dde776a761d65d30e511bdd7930ac", "url": "https://github.com/codice/ddf/commit/602e93375c7dde776a761d65d30e511bdd7930ac", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction so that\nthe user can more easily resolve the malfunction. This commit supports\nthe user's aforementioned desire in that it:\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter the warnings of ProcessingDetails of a\n   SourceResponse which the Source may receive from the execution of a\n   query and, thereby, produce new ProcessingDetails whose warnings\n   contain only each warning of the original ProcessingDetails which\n   describes or explains a malfunction which occurred in the execution\n   of the query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - refactors some of the code which relates to the changes listed above", "committedDate": "2020-03-05T23:54:29Z", "type": "commit"}, {"oid": "602e93375c7dde776a761d65d30e511bdd7930ac", "url": "https://github.com/codice/ddf/commit/602e93375c7dde776a761d65d30e511bdd7930ac", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction so that\nthe user can more easily resolve the malfunction. This commit supports\nthe user's aforementioned desire in that it:\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter the warnings of ProcessingDetails of a\n   SourceResponse which the Source may receive from the execution of a\n   query and, thereby, produce new ProcessingDetails whose warnings\n   contain only each warning of the original ProcessingDetails which\n   describes or explains a malfunction which occurred in the execution\n   of the query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - refactors some of the code which relates to the changes listed above", "committedDate": "2020-03-05T23:54:29Z", "type": "forcePushed"}]}