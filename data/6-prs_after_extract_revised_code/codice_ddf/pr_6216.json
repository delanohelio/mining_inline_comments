{"pr_number": 6216, "pr_title": "DDF-6215 Upgrade to Karaf 4.2.9", "pr_createdAt": "2020-08-04T00:37:36Z", "pr_url": "https://github.com/codice/ddf/pull/6216", "timeline": [{"oid": "e1ebd9cf56b81f1d8645cf4e6e7f5395a1d5446c", "url": "https://github.com/codice/ddf/commit/e1ebd9cf56b81f1d8645cf4e6e7f5395a1d5446c", "message": "DDF-6215 Move DelegateServletFilter to SercurityFilter chain", "committedDate": "2020-08-04T16:51:46Z", "type": "forcePushed"}, {"oid": "67a84308bc89130aea164e6a861df92a3b025500", "url": "https://github.com/codice/ddf/commit/67a84308bc89130aea164e6a861df92a3b025500", "message": "DDF-6215 Upgrade to Karaf v4.2.9", "committedDate": "2020-08-06T00:16:51Z", "type": "commit"}, {"oid": "88a0803db0ce5fc5707ed6909155d266c2d43387", "url": "https://github.com/codice/ddf/commit/88a0803db0ce5fc5707ed6909155d266c2d43387", "message": "DDF-6215 Move DelegateServletFilter to SercurityFilter chain", "committedDate": "2020-08-06T00:16:51Z", "type": "commit"}, {"oid": "88a0803db0ce5fc5707ed6909155d266c2d43387", "url": "https://github.com/codice/ddf/commit/88a0803db0ce5fc5707ed6909155d266c2d43387", "message": "DDF-6215 Move DelegateServletFilter to SercurityFilter chain", "committedDate": "2020-08-06T00:16:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzMjYzNA==", "url": "https://github.com/codice/ddf/pull/6216#discussion_r468132634", "bodyText": "this should be parameterized", "author": "bdeining", "createdAt": "2020-08-10T19:29:14Z", "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingSecurityFilter.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.pax.web.jetty;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import javax.servlet.Filter;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import org.codice.ddf.platform.filter.AuthenticationException;\n+import org.codice.ddf.platform.filter.FilterChain;\n+import org.codice.ddf.platform.filter.SecurityFilter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Hands the request off to a set chain of servlet {@link Filter}s. Since SecurityFilters are run on\n+ * each request, this provides a mechanism to add global servlet filters. As of OSGi R6, there is a\n+ * proper way to define global servlets/filters/listeners/etc., defined by the HTTP Whiteboard spec.\n+ * However, pax-web does not yet implement that feature, so we're left using this workaround.\n+ *\n+ * <p>When https://ops4j1.jira.com/browse/PAXWEB-1123 is resolved, this workaround should be\n+ * revisited.\n+ */\n+public class DelegatingSecurityFilter implements SecurityFilter {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(DelegatingSecurityFilter.class);\n+\n+  private final List<Filter> filters;\n+\n+  public DelegatingSecurityFilter(List<Filter> filters) {\n+    this.filters = filters;\n+  }\n+\n+  @Override\n+  public void init() {\n+    LOGGER.debug(\"Initialized \" + DelegatingSecurityFilter.class.getSimpleName());", "originalCommit": "88a0803db0ce5fc5707ed6909155d266c2d43387", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18d71829ef8f20d2f40413c39103f7cbe1f24b38", "chunk": "diff --git a/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingSecurityFilter.java b/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingSecurityFilter.java\ndeleted file mode 100644\nindex e804396d97..0000000000\n--- a/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingSecurityFilter.java\n+++ /dev/null\n\n@@ -1,68 +0,0 @@\n-/**\n- * Copyright (c) Codice Foundation\n- *\n- * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n- * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n- * the License, or any later version.\n- *\n- * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n- * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n- * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n- * License is distributed along with this program and can be found at\n- * <http://www.gnu.org/licenses/lgpl.html>.\n- */\n-package org.codice.ddf.pax.web.jetty;\n-\n-import java.io.IOException;\n-import java.util.List;\n-import javax.servlet.Filter;\n-import javax.servlet.ServletException;\n-import javax.servlet.ServletRequest;\n-import javax.servlet.ServletResponse;\n-import org.codice.ddf.platform.filter.AuthenticationException;\n-import org.codice.ddf.platform.filter.FilterChain;\n-import org.codice.ddf.platform.filter.SecurityFilter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * Hands the request off to a set chain of servlet {@link Filter}s. Since SecurityFilters are run on\n- * each request, this provides a mechanism to add global servlet filters. As of OSGi R6, there is a\n- * proper way to define global servlets/filters/listeners/etc., defined by the HTTP Whiteboard spec.\n- * However, pax-web does not yet implement that feature, so we're left using this workaround.\n- *\n- * <p>When https://ops4j1.jira.com/browse/PAXWEB-1123 is resolved, this workaround should be\n- * revisited.\n- */\n-public class DelegatingSecurityFilter implements SecurityFilter {\n-\n-  private static final Logger LOGGER = LoggerFactory.getLogger(DelegatingSecurityFilter.class);\n-\n-  private final List<Filter> filters;\n-\n-  public DelegatingSecurityFilter(List<Filter> filters) {\n-    this.filters = filters;\n-  }\n-\n-  @Override\n-  public void init() {\n-    LOGGER.debug(\"Initialized \" + DelegatingSecurityFilter.class.getSimpleName());\n-  }\n-\n-  @Override\n-  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n-      throws IOException, AuthenticationException {\n-    LOGGER.debug(\"Delegating to {} global ServletFilters.\", filters.size());\n-    try {\n-      new ProxyFilterChain(filters).doFilter(request, response);\n-    } catch (ServletException e) {\n-      throw new AuthenticationException(\"Error in global ServletFilter chain\", e);\n-    }\n-    chain.doFilter(request, response);\n-  }\n-\n-  @Override\n-  public void destroy() {\n-    LOGGER.debug(\"Destroyed \" + DelegatingSecurityFilter.class.getSimpleName());\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzMjc1Nw==", "url": "https://github.com/codice/ddf/pull/6216#discussion_r468132757", "bodyText": "this should be parameterized", "author": "bdeining", "createdAt": "2020-08-10T19:29:26Z", "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingSecurityFilter.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.pax.web.jetty;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import javax.servlet.Filter;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import org.codice.ddf.platform.filter.AuthenticationException;\n+import org.codice.ddf.platform.filter.FilterChain;\n+import org.codice.ddf.platform.filter.SecurityFilter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Hands the request off to a set chain of servlet {@link Filter}s. Since SecurityFilters are run on\n+ * each request, this provides a mechanism to add global servlet filters. As of OSGi R6, there is a\n+ * proper way to define global servlets/filters/listeners/etc., defined by the HTTP Whiteboard spec.\n+ * However, pax-web does not yet implement that feature, so we're left using this workaround.\n+ *\n+ * <p>When https://ops4j1.jira.com/browse/PAXWEB-1123 is resolved, this workaround should be\n+ * revisited.\n+ */\n+public class DelegatingSecurityFilter implements SecurityFilter {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(DelegatingSecurityFilter.class);\n+\n+  private final List<Filter> filters;\n+\n+  public DelegatingSecurityFilter(List<Filter> filters) {\n+    this.filters = filters;\n+  }\n+\n+  @Override\n+  public void init() {\n+    LOGGER.debug(\"Initialized \" + DelegatingSecurityFilter.class.getSimpleName());\n+  }\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, AuthenticationException {\n+    LOGGER.debug(\"Delegating to {} global ServletFilters.\", filters.size());\n+    try {\n+      new ProxyFilterChain(filters).doFilter(request, response);\n+    } catch (ServletException e) {\n+      throw new AuthenticationException(\"Error in global ServletFilter chain\", e);\n+    }\n+    chain.doFilter(request, response);\n+  }\n+\n+  @Override\n+  public void destroy() {\n+    LOGGER.debug(\"Destroyed \" + DelegatingSecurityFilter.class.getSimpleName());", "originalCommit": "88a0803db0ce5fc5707ed6909155d266c2d43387", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18d71829ef8f20d2f40413c39103f7cbe1f24b38", "chunk": "diff --git a/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingSecurityFilter.java b/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingSecurityFilter.java\ndeleted file mode 100644\nindex e804396d97..0000000000\n--- a/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingSecurityFilter.java\n+++ /dev/null\n\n@@ -1,68 +0,0 @@\n-/**\n- * Copyright (c) Codice Foundation\n- *\n- * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n- * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n- * the License, or any later version.\n- *\n- * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n- * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n- * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n- * License is distributed along with this program and can be found at\n- * <http://www.gnu.org/licenses/lgpl.html>.\n- */\n-package org.codice.ddf.pax.web.jetty;\n-\n-import java.io.IOException;\n-import java.util.List;\n-import javax.servlet.Filter;\n-import javax.servlet.ServletException;\n-import javax.servlet.ServletRequest;\n-import javax.servlet.ServletResponse;\n-import org.codice.ddf.platform.filter.AuthenticationException;\n-import org.codice.ddf.platform.filter.FilterChain;\n-import org.codice.ddf.platform.filter.SecurityFilter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * Hands the request off to a set chain of servlet {@link Filter}s. Since SecurityFilters are run on\n- * each request, this provides a mechanism to add global servlet filters. As of OSGi R6, there is a\n- * proper way to define global servlets/filters/listeners/etc., defined by the HTTP Whiteboard spec.\n- * However, pax-web does not yet implement that feature, so we're left using this workaround.\n- *\n- * <p>When https://ops4j1.jira.com/browse/PAXWEB-1123 is resolved, this workaround should be\n- * revisited.\n- */\n-public class DelegatingSecurityFilter implements SecurityFilter {\n-\n-  private static final Logger LOGGER = LoggerFactory.getLogger(DelegatingSecurityFilter.class);\n-\n-  private final List<Filter> filters;\n-\n-  public DelegatingSecurityFilter(List<Filter> filters) {\n-    this.filters = filters;\n-  }\n-\n-  @Override\n-  public void init() {\n-    LOGGER.debug(\"Initialized \" + DelegatingSecurityFilter.class.getSimpleName());\n-  }\n-\n-  @Override\n-  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n-      throws IOException, AuthenticationException {\n-    LOGGER.debug(\"Delegating to {} global ServletFilters.\", filters.size());\n-    try {\n-      new ProxyFilterChain(filters).doFilter(request, response);\n-    } catch (ServletException e) {\n-      throw new AuthenticationException(\"Error in global ServletFilter chain\", e);\n-    }\n-    chain.doFilter(request, response);\n-  }\n-\n-  @Override\n-  public void destroy() {\n-    LOGGER.debug(\"Destroyed \" + DelegatingSecurityFilter.class.getSimpleName());\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzMzA2Mw==", "url": "https://github.com/codice/ddf/pull/6216#discussion_r468133063", "bodyText": "the logging in this method might be more appropriate at the trace level", "author": "bdeining", "createdAt": "2020-08-10T19:29:59Z", "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingSecurityFilter.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.pax.web.jetty;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import javax.servlet.Filter;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import org.codice.ddf.platform.filter.AuthenticationException;\n+import org.codice.ddf.platform.filter.FilterChain;\n+import org.codice.ddf.platform.filter.SecurityFilter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Hands the request off to a set chain of servlet {@link Filter}s. Since SecurityFilters are run on\n+ * each request, this provides a mechanism to add global servlet filters. As of OSGi R6, there is a\n+ * proper way to define global servlets/filters/listeners/etc., defined by the HTTP Whiteboard spec.\n+ * However, pax-web does not yet implement that feature, so we're left using this workaround.\n+ *\n+ * <p>When https://ops4j1.jira.com/browse/PAXWEB-1123 is resolved, this workaround should be\n+ * revisited.\n+ */\n+public class DelegatingSecurityFilter implements SecurityFilter {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(DelegatingSecurityFilter.class);\n+\n+  private final List<Filter> filters;\n+\n+  public DelegatingSecurityFilter(List<Filter> filters) {\n+    this.filters = filters;\n+  }\n+\n+  @Override\n+  public void init() {\n+    LOGGER.debug(\"Initialized \" + DelegatingSecurityFilter.class.getSimpleName());\n+  }\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, AuthenticationException {\n+    LOGGER.debug(\"Delegating to {} global ServletFilters.\", filters.size());", "originalCommit": "88a0803db0ce5fc5707ed6909155d266c2d43387", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMTcwOQ==", "url": "https://github.com/codice/ddf/pull/6216#discussion_r470331709", "bodyText": "I changed it to trace", "author": "SmithJosh", "createdAt": "2020-08-14T00:32:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzMzA2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "18d71829ef8f20d2f40413c39103f7cbe1f24b38", "chunk": "diff --git a/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingSecurityFilter.java b/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingSecurityFilter.java\ndeleted file mode 100644\nindex e804396d97..0000000000\n--- a/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingSecurityFilter.java\n+++ /dev/null\n\n@@ -1,68 +0,0 @@\n-/**\n- * Copyright (c) Codice Foundation\n- *\n- * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n- * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n- * the License, or any later version.\n- *\n- * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n- * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n- * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n- * License is distributed along with this program and can be found at\n- * <http://www.gnu.org/licenses/lgpl.html>.\n- */\n-package org.codice.ddf.pax.web.jetty;\n-\n-import java.io.IOException;\n-import java.util.List;\n-import javax.servlet.Filter;\n-import javax.servlet.ServletException;\n-import javax.servlet.ServletRequest;\n-import javax.servlet.ServletResponse;\n-import org.codice.ddf.platform.filter.AuthenticationException;\n-import org.codice.ddf.platform.filter.FilterChain;\n-import org.codice.ddf.platform.filter.SecurityFilter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * Hands the request off to a set chain of servlet {@link Filter}s. Since SecurityFilters are run on\n- * each request, this provides a mechanism to add global servlet filters. As of OSGi R6, there is a\n- * proper way to define global servlets/filters/listeners/etc., defined by the HTTP Whiteboard spec.\n- * However, pax-web does not yet implement that feature, so we're left using this workaround.\n- *\n- * <p>When https://ops4j1.jira.com/browse/PAXWEB-1123 is resolved, this workaround should be\n- * revisited.\n- */\n-public class DelegatingSecurityFilter implements SecurityFilter {\n-\n-  private static final Logger LOGGER = LoggerFactory.getLogger(DelegatingSecurityFilter.class);\n-\n-  private final List<Filter> filters;\n-\n-  public DelegatingSecurityFilter(List<Filter> filters) {\n-    this.filters = filters;\n-  }\n-\n-  @Override\n-  public void init() {\n-    LOGGER.debug(\"Initialized \" + DelegatingSecurityFilter.class.getSimpleName());\n-  }\n-\n-  @Override\n-  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n-      throws IOException, AuthenticationException {\n-    LOGGER.debug(\"Delegating to {} global ServletFilters.\", filters.size());\n-    try {\n-      new ProxyFilterChain(filters).doFilter(request, response);\n-    } catch (ServletException e) {\n-      throw new AuthenticationException(\"Error in global ServletFilter chain\", e);\n-    }\n-    chain.doFilter(request, response);\n-  }\n-\n-  @Override\n-  public void destroy() {\n-    LOGGER.debug(\"Destroyed \" + DelegatingSecurityFilter.class.getSimpleName());\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MTkwMA==", "url": "https://github.com/codice/ddf/pull/6216#discussion_r468151900", "bodyText": "\u2753 Isn't this deletion going to break metrics and other cross-cutting concerns (i.e. client info filter but I doubt anyone still cares about that)? I think we have some dependents on this class without any viable substitutes as of yet.\nI don't think your SecurityFilter workaround is valid in all current cases.", "author": "Lambeaux", "createdAt": "2020-08-10T20:07:26Z", "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegateServletFilter.java", "diffHunk": "@@ -1,54 +0,0 @@\n-/**\n- * Copyright (c) Codice Foundation\n- *\n- * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n- * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n- * the License, or any later version.\n- *\n- * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n- * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n- * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n- * License is distributed along with this program and can be found at\n- * <http://www.gnu.org/licenses/lgpl.html>.\n- */\n-package org.codice.ddf.pax.web.jetty;\n-\n-import java.io.IOException;\n-import java.util.List;\n-import javax.servlet.Filter;\n-import javax.servlet.FilterChain;\n-import javax.servlet.FilterConfig;\n-import javax.servlet.ServletException;\n-import javax.servlet.ServletRequest;\n-import javax.servlet.ServletResponse;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class DelegateServletFilter implements Filter {", "originalCommit": "88a0803db0ce5fc5707ed6909155d266c2d43387", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1OTIxMw==", "url": "https://github.com/codice/ddf/pull/6216#discussion_r468159213", "bodyText": "Isn't this deletion going to break metrics and other cross-cutting concerns (i.e. client info filter but I doubt anyone still cares about that)? I think we have some dependents on this class without any viable substitutes as of yet.\n\nI only changed the name of this class. It's now DelegateSecurityFilter, but it still performs the same behavior, picking up all registered ServletFilters and passing incoming requests off to them.\nAnd what do you mean by \"dependencies\"? I wasn't aware anybody used this class itself. They should just be registering ServletFilters which will get picked up by this.\n\nI don't think your SecurityFilter workaround is valid in all current cases.\n\nDo you have an example by chance where this wouldn't work?", "author": "SmithJosh", "createdAt": "2020-08-10T20:16:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MTkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MjcwNw==", "url": "https://github.com/codice/ddf/pull/6216#discussion_r470342707", "bodyText": "You were right. The DoPrivilegedFilter wasn't working either, since the doPrivileged call terminated as soon as all the Filters had run. The delegate filter wasn't really running the the filters as part of the chain.\nI believe I fixed that now, so marking this as resolved", "author": "SmithJosh", "createdAt": "2020-08-14T00:49:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MTkwMA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "18d71829ef8f20d2f40413c39103f7cbe1f24b38", "url": "https://github.com/codice/ddf/commit/18d71829ef8f20d2f40413c39103f7cbe1f24b38", "message": "DDF-6215 Move DelegatingSecurityFilter to the Jetty Handler chain", "committedDate": "2020-08-14T00:27:58Z", "type": "commit"}, {"oid": "18d71829ef8f20d2f40413c39103f7cbe1f24b38", "url": "https://github.com/codice/ddf/commit/18d71829ef8f20d2f40413c39103f7cbe1f24b38", "message": "DDF-6215 Move DelegatingSecurityFilter to the Jetty Handler chain", "committedDate": "2020-08-14T00:27:58Z", "type": "forcePushed"}, {"oid": "59247a0c9512a96075539b9e2737613b5d2080f4", "url": "https://github.com/codice/ddf/commit/59247a0c9512a96075539b9e2737613b5d2080f4", "message": "DDF-6215 Address PR comments", "committedDate": "2020-08-14T00:31:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzNDU1NA==", "url": "https://github.com/codice/ddf/pull/6216#discussion_r470334554", "bodyText": "The delegating servlet filter has a new home \ud83d\ude02 This time it's the Jetty Handler chain", "author": "SmithJosh", "createdAt": "2020-08-14T00:37:12Z", "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.pax.web.jetty;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.IOException;\n+import java.util.Objects;\n+import javax.servlet.Filter;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.codice.ddf.platform.filter.HttpFilter;\n+import org.eclipse.jetty.server.Request;\n+import org.eclipse.jetty.server.handler.HandlerWrapper;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.FrameworkUtil;\n+import org.osgi.util.tracker.ServiceTracker;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Hands the request off to a set chain of servlet {@link Filter}s. Since SecurityFilters are run on\n+ * each request, this provides a mechanism to add global servlet filters. As of OSGi R6, there is a\n+ * proper way to define global servlets/filters/listeners/etc., defined by the HTTP Whiteboard spec.\n+ * However, pax-web does not yet implement that feature, so we're left using this workaround.\n+ *\n+ * <p>When https://ops4j1.jira.com/browse/PAXWEB-1123 is resolved, this workaround should be\n+ * revisited.\n+ */\n+public class DelegatingHttpFilterHandler extends HandlerWrapper {", "originalCommit": "18d71829ef8f20d2f40413c39103f7cbe1f24b38", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa8168d7a268597abc6d2898ad20d8cce79fc6bb", "chunk": "diff --git a/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java b/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java\nindex 12f4a23b81..577189658d 100644\n--- a/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java\n+++ b/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java\n\n@@ -13,24 +13,28 @@\n  */\n package org.codice.ddf.pax.web.jetty;\n \n-import com.google.common.annotations.VisibleForTesting;\n import java.io.IOException;\n+import java.util.Collection;\n import java.util.Objects;\n-import javax.servlet.Filter;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-import org.codice.ddf.platform.filter.HttpFilter;\n+import org.codice.ddf.platform.filter.http.HttpFilter;\n+import org.codice.ddf.platform.util.SortedServiceList;\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.handler.HandlerWrapper;\n import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n import org.osgi.framework.FrameworkUtil;\n-import org.osgi.util.tracker.ServiceTracker;\n+import org.osgi.framework.InvalidSyntaxException;\n+import org.osgi.framework.ServiceEvent;\n+import org.osgi.framework.ServiceListener;\n+import org.osgi.framework.ServiceReference;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- * Hands the request off to a set chain of servlet {@link Filter}s. Since SecurityFilters are run on\n+ * Hands the request off to a set chain of {@link HttpFilter}s. Since SecurityFilters are run on\n  * each request, this provides a mechanism to add global servlet filters. As of OSGi R6, there is a\n  * proper way to define global servlets/filters/listeners/etc., defined by the HTTP Whiteboard spec.\n  * However, pax-web does not yet implement that feature, so we're left using this workaround.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzNzEyNg==", "url": "https://github.com/codice/ddf/pull/6216#discussion_r470337126", "bodyText": "The Jetty Handlers take HttpServletRequests. In order to inject stuff into that chain, I needed to have a filter interface that takes HttpServletRequests as well. Oddly enough this is not already a thing.\nAny filters we used to inject via the delegate filter will need to be changed to implement this new interface. That will require changing the method signature and removing the init/destroy methods since those aren't used anymore.", "author": "SmithJosh", "createdAt": "2020-08-14T00:41:13Z", "path": "platform/security-filter-api/src/main/java/org/codice/ddf/platform/filter/HttpFilter.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.platform.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * An HttpFilter is an object that performs filtering tasks on either the request to a resource (a\n+ * servlet or static content), or on the response from a resource, or both.\n+ *\n+ * <p>It is modelled after {@link javax.servlet.Filter} but its {@code doFilter} method accepts\n+ * {@link HttpServletRequest} and {@link HttpServletResponse} arguments instead.\n+ */\n+public interface HttpFilter {\n+\n+  void doFilter(", "originalCommit": "18d71829ef8f20d2f40413c39103f7cbe1f24b38", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa8168d7a268597abc6d2898ad20d8cce79fc6bb", "chunk": "diff --git a/platform/security-filter-api/src/main/java/org/codice/ddf/platform/filter/HttpFilter.java b/platform/http-filter-api/src/main/java/org/codice/ddf/platform/filter/http/HttpFilter.java\nsimilarity index 96%\nrename from platform/security-filter-api/src/main/java/org/codice/ddf/platform/filter/HttpFilter.java\nrename to platform/http-filter-api/src/main/java/org/codice/ddf/platform/filter/http/HttpFilter.java\nindex 97e9459930..c534570ef6 100644\n--- a/platform/security-filter-api/src/main/java/org/codice/ddf/platform/filter/HttpFilter.java\n+++ b/platform/http-filter-api/src/main/java/org/codice/ddf/platform/filter/http/HttpFilter.java\n\n@@ -11,7 +11,7 @@\n  * License is distributed along with this program and can be found at\n  * <http://www.gnu.org/licenses/lgpl.html>.\n  */\n-package org.codice.ddf.platform.filter;\n+package org.codice.ddf.platform.filter.http;\n \n import java.io.IOException;\n import javax.servlet.ServletException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzODY5OQ==", "url": "https://github.com/codice/ddf/pull/6216#discussion_r470338699", "bodyText": "Here's an example of converting an existing Filter into an HttpFilter", "author": "SmithJosh", "createdAt": "2020-08-14T00:43:47Z", "path": "platform/metrics/metrics-servlet-filter/src/main/java/org/codice/ddf/metrics/servlet/ServletMetrics.java", "diffHunk": "@@ -18,45 +18,34 @@\n import java.io.IOException;\n import javax.servlet.AsyncEvent;\n import javax.servlet.AsyncListener;\n-import javax.servlet.Filter;\n-import javax.servlet.FilterChain;\n-import javax.servlet.FilterConfig;\n import javax.servlet.ServletException;\n-import javax.servlet.ServletRequest;\n-import javax.servlet.ServletResponse;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import org.codice.ddf.platform.filter.HttpFilter;\n+import org.codice.ddf.platform.filter.HttpFilterChain;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class ServletMetrics implements Filter {\n+public class ServletMetrics implements HttpFilter {", "originalCommit": "59247a0c9512a96075539b9e2737613b5d2080f4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa8168d7a268597abc6d2898ad20d8cce79fc6bb", "chunk": "diff --git a/platform/metrics/metrics-servlet-filter/src/main/java/org/codice/ddf/metrics/servlet/ServletMetrics.java b/platform/metrics/metrics-servlet-filter/src/main/java/org/codice/ddf/metrics/servlet/ServletMetrics.java\nindex 45ce91b572..cc6e2d1c95 100644\n--- a/platform/metrics/metrics-servlet-filter/src/main/java/org/codice/ddf/metrics/servlet/ServletMetrics.java\n+++ b/platform/metrics/metrics-servlet-filter/src/main/java/org/codice/ddf/metrics/servlet/ServletMetrics.java\n\n@@ -21,8 +21,8 @@\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-import org.codice.ddf.platform.filter.HttpFilter;\n-import org.codice.ddf.platform.filter.HttpFilterChain;\n+import org.codice.ddf.platform.filter.http.HttpFilter;\n+import org.codice.ddf.platform.filter.http.HttpFilterChain;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MTA3MQ==", "url": "https://github.com/codice/ddf/pull/6216#discussion_r470341071", "bodyText": "This is getting injected into the Jetty Handler chain via the jetty.xml config, so I couldn't just inject a service reference list like it did before. If anybody has better ideas for how to do this, I'm open to suggestions.", "author": "SmithJosh", "createdAt": "2020-08-14T00:47:22Z", "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.pax.web.jetty;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.IOException;\n+import java.util.Objects;\n+import javax.servlet.Filter;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.codice.ddf.platform.filter.HttpFilter;\n+import org.eclipse.jetty.server.Request;\n+import org.eclipse.jetty.server.handler.HandlerWrapper;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.FrameworkUtil;\n+import org.osgi.util.tracker.ServiceTracker;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Hands the request off to a set chain of servlet {@link Filter}s. Since SecurityFilters are run on\n+ * each request, this provides a mechanism to add global servlet filters. As of OSGi R6, there is a\n+ * proper way to define global servlets/filters/listeners/etc., defined by the HTTP Whiteboard spec.\n+ * However, pax-web does not yet implement that feature, so we're left using this workaround.\n+ *\n+ * <p>When https://ops4j1.jira.com/browse/PAXWEB-1123 is resolved, this workaround should be\n+ * revisited.\n+ */\n+public class DelegatingHttpFilterHandler extends HandlerWrapper {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(DelegatingHttpFilterHandler.class);\n+\n+  private final ServiceTracker<HttpFilter, HttpFilter> filterTracker;\n+\n+  @VisibleForTesting\n+  DelegatingHttpFilterHandler(ServiceTracker<HttpFilter, HttpFilter> filterTracker) {\n+    this.filterTracker = Objects.requireNonNull(filterTracker);\n+  }\n+\n+  public DelegatingHttpFilterHandler() {\n+    Bundle bundle = FrameworkUtil.getBundle(DelegatingHttpFilterHandler.class);\n+    Objects.requireNonNull(bundle, \"Bundle must not be null\");\n+    Objects.requireNonNull(bundle.getBundleContext(), \"Bundle has no valid BundleContext\");\n+\n+    this.filterTracker =\n+        new ServiceTracker(bundle.getBundleContext(), HttpFilter.class.getName(), null);\n+  }\n+\n+  @Override\n+  public void handle(\n+      String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)\n+      throws IOException, ServletException {\n+    HttpFilter[] filters = getFilters();\n+    LOGGER.trace(\"Delegating to {} HttpFilters.\", filters.length);\n+\n+    ProxyHttpFilterChain filterChain =\n+        new ProxyHttpFilterChain(filters, getHandler(), target, baseRequest);\n+    filterChain.doFilter(request, response);\n+  }\n+\n+  private HttpFilter[] getFilters() {\n+    HttpFilter[] filters = new HttpFilter[filterTracker.size()];\n+    return filterTracker.getServices(filters);", "originalCommit": "59247a0c9512a96075539b9e2737613b5d2080f4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa8168d7a268597abc6d2898ad20d8cce79fc6bb", "chunk": "diff --git a/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java b/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java\nindex 32f245789c..577189658d 100644\n--- a/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java\n+++ b/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java\n\n@@ -13,24 +13,28 @@\n  */\n package org.codice.ddf.pax.web.jetty;\n \n-import com.google.common.annotations.VisibleForTesting;\n import java.io.IOException;\n+import java.util.Collection;\n import java.util.Objects;\n-import javax.servlet.Filter;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-import org.codice.ddf.platform.filter.HttpFilter;\n+import org.codice.ddf.platform.filter.http.HttpFilter;\n+import org.codice.ddf.platform.util.SortedServiceList;\n import org.eclipse.jetty.server.Request;\n import org.eclipse.jetty.server.handler.HandlerWrapper;\n import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n import org.osgi.framework.FrameworkUtil;\n-import org.osgi.util.tracker.ServiceTracker;\n+import org.osgi.framework.InvalidSyntaxException;\n+import org.osgi.framework.ServiceEvent;\n+import org.osgi.framework.ServiceListener;\n+import org.osgi.framework.ServiceReference;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- * Hands the request off to a set chain of servlet {@link Filter}s. Since SecurityFilters are run on\n+ * Hands the request off to a set chain of {@link HttpFilter}s. Since SecurityFilters are run on\n  * each request, this provides a mechanism to add global servlet filters. As of OSGi R6, there is a\n  * proper way to define global servlets/filters/listeners/etc., defined by the HTTP Whiteboard spec.\n  * However, pax-web does not yet implement that feature, so we're left using this workaround.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0ODI2OQ==", "url": "https://github.com/codice/ddf/pull/6216#discussion_r471748269", "bodyText": "\u2753 Why is this part of security-filter-api instead of part of platform-paxweb-jettyconfig or some other Jetty or HTTP concerned bundle?  This interface does not seem related to security as it is.", "author": "pklinef", "createdAt": "2020-08-17T20:10:40Z", "path": "platform/security-filter-api/src/main/java/org/codice/ddf/platform/filter/HttpFilter.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.platform.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * An HttpFilter is an object that performs filtering tasks on either the request to a resource (a\n+ * servlet or static content), or on the response from a resource, or both.\n+ *\n+ * <p>It is modelled after {@link javax.servlet.Filter} but its {@code doFilter} method accepts\n+ * {@link HttpServletRequest} and {@link HttpServletResponse} arguments instead.\n+ */\n+public interface HttpFilter {", "originalCommit": "59247a0c9512a96075539b9e2737613b5d2080f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1Nzg0Nw==", "url": "https://github.com/codice/ddf/pull/6216#discussion_r471757847", "bodyText": "Yeah I guess it's not necessarily related to security. I put it here since most of the filter implementations are security-related, but it may make more sense in a new api bundle.\nI don't think it should go into platform-paxweb-jettyconfig since that would pull in a bunch of other transitive dependencies as well.", "author": "SmithJosh", "createdAt": "2020-08-17T20:30:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0ODI2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1OTgzNQ==", "url": "https://github.com/codice/ddf/pull/6216#discussion_r471759835", "bodyText": "A new API bundle would be safest.  Currently platform-api looks pretty safe but that runs the risk of being exposed to other unrelated dependencies in the future.  Already it depends on javax.validation.", "author": "pklinef", "createdAt": "2020-08-17T20:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0ODI2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc2MDM2Nw==", "url": "https://github.com/codice/ddf/pull/6216#discussion_r471760367", "bodyText": "Ok I'll create a new bundle", "author": "SmithJosh", "createdAt": "2020-08-17T20:35:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0ODI2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "fa8168d7a268597abc6d2898ad20d8cce79fc6bb", "chunk": "diff --git a/platform/security-filter-api/src/main/java/org/codice/ddf/platform/filter/HttpFilter.java b/platform/http-filter-api/src/main/java/org/codice/ddf/platform/filter/http/HttpFilter.java\nsimilarity index 96%\nrename from platform/security-filter-api/src/main/java/org/codice/ddf/platform/filter/HttpFilter.java\nrename to platform/http-filter-api/src/main/java/org/codice/ddf/platform/filter/http/HttpFilter.java\nindex 97e9459930..c534570ef6 100644\n--- a/platform/security-filter-api/src/main/java/org/codice/ddf/platform/filter/HttpFilter.java\n+++ b/platform/http-filter-api/src/main/java/org/codice/ddf/platform/filter/http/HttpFilter.java\n\n@@ -11,7 +11,7 @@\n  * License is distributed along with this program and can be found at\n  * <http://www.gnu.org/licenses/lgpl.html>.\n  */\n-package org.codice.ddf.platform.filter;\n+package org.codice.ddf.platform.filter.http;\n \n import java.io.IOException;\n import javax.servlet.ServletException;\n"}}, {"oid": "fa8168d7a268597abc6d2898ad20d8cce79fc6bb", "url": "https://github.com/codice/ddf/commit/fa8168d7a268597abc6d2898ad20d8cce79fc6bb", "message": "DDF-6215 Move HttpFilter interface to new bundle and use service ranking to order HttpFilters", "committedDate": "2020-08-18T18:40:54Z", "type": "commit"}, {"oid": "a3113f578bda468e1e00dd3a65424720ac9e1a8f", "url": "https://github.com/codice/ddf/commit/a3113f578bda468e1e00dd3a65424720ac9e1a8f", "message": "DDF-6215 Update javadoc for DelegatingHttpFilterHandler", "committedDate": "2020-08-18T18:52:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzNjI4MQ==", "url": "https://github.com/codice/ddf/pull/6216#discussion_r472436281", "bodyText": "\u2753 Iterators are stateful. Does a new instance of this chain get created for each request? If not, and all requests share it, then how is this working?", "author": "Lambeaux", "createdAt": "2020-08-18T19:40:45Z", "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/ProxyHttpFilterChain.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.pax.web.jetty;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import javax.servlet.Filter;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.codice.ddf.platform.filter.http.HttpFilter;\n+import org.codice.ddf.platform.filter.http.HttpFilterChain;\n+import org.eclipse.jetty.server.Handler;\n+import org.eclipse.jetty.server.Request;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Implementation of filter chain that allows the ability to dynamically add new {@link Filter}s to\n+ * a chain. The {@link ProxyHttpFilterChain} may not be reused. That is, once the {@link\n+ * ProxyHttpFilterChain#doFilter} method is called, no more {@link HttpFilter}s may be added.\n+ */\n+public class ProxyHttpFilterChain implements HttpFilterChain {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ProxyHttpFilterChain.class);\n+\n+  private final Iterator<HttpFilter> iterator;\n+  private final Handler handler;\n+  private final String target;\n+  private final Request baseRequest;\n+\n+  public ProxyHttpFilterChain(\n+      List<HttpFilter> filters, Handler handler, String target, Request baseRequest) {\n+    this.iterator = filters.iterator();", "originalCommit": "a3113f578bda468e1e00dd3a65424720ac9e1a8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0Nzg2NA==", "url": "https://github.com/codice/ddf/pull/6216#discussion_r472447864", "bodyText": "Yep, the ProxyHttpFilterChain is single-use. A new instance gets created for each request", "author": "SmithJosh", "createdAt": "2020-08-18T20:03:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzNjI4MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzODA0NA==", "url": "https://github.com/codice/ddf/pull/6216#discussion_r472438044", "bodyText": "\ud83d\udc4d  I see - should be fine", "author": "Lambeaux", "createdAt": "2020-08-18T19:44:27Z", "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.pax.web.jetty;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Objects;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.codice.ddf.platform.filter.http.HttpFilter;\n+import org.codice.ddf.platform.util.SortedServiceList;\n+import org.eclipse.jetty.server.Request;\n+import org.eclipse.jetty.server.handler.HandlerWrapper;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.FrameworkUtil;\n+import org.osgi.framework.InvalidSyntaxException;\n+import org.osgi.framework.ServiceEvent;\n+import org.osgi.framework.ServiceListener;\n+import org.osgi.framework.ServiceReference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@code DelegatingHttpFilterHandler} provides a way to create global filters which will apply\n+ * to all requests. It finds any registered {@link HttpFilter} services and passes incoming\n+ * requests to them in order of service ranking.\n+ *\n+ * As of OSGi R6, there is a proper way to define global servlets/filters/listeners/etc., defined\n+ * by the HTTP Whiteboard spec. However, pax-web does not yet implement that feature, so we're left\n+ * using this workaround.\n+ *\n+ * <p>When https://ops4j1.jira.com/browse/PAXWEB-1123 is resolved, this workaround should be\n+ * revisited.\n+ */\n+public class DelegatingHttpFilterHandler extends HandlerWrapper {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(DelegatingHttpFilterHandler.class);\n+\n+  private static final String FILTER = \"(objectclass=\" + HttpFilter.class.getName() + \")\";\n+\n+  private final HttpFilterServiceListener listener = new HttpFilterServiceListener();\n+\n+  private final SortedServiceList<HttpFilter> httpFilters;\n+\n+  private final BundleContext context;\n+\n+  private static BundleContext getContext() {\n+    Bundle bundle = FrameworkUtil.getBundle(DelegatingHttpFilterHandler.class);\n+    Objects.requireNonNull(bundle, \"Bundle cannot be null\");\n+    return bundle.getBundleContext();\n+  }\n+\n+  public DelegatingHttpFilterHandler() throws InvalidSyntaxException {\n+    this(getContext());\n+  }\n+\n+  public DelegatingHttpFilterHandler(BundleContext context) throws InvalidSyntaxException {\n+    Objects.requireNonNull(context, \"Bundle context cannot be null\");\n+    this.context = context;\n+    this.context.addServiceListener(listener, FILTER);\n+    this.httpFilters =\n+        new SortedServiceList<HttpFilter>() {\n+          @Override\n+          protected BundleContext getContext() {\n+            return context;\n+          }\n+        };\n+\n+    /*\n+     * The service listener won't pick up services that are already registered. Must manually\n+     * add them to the service list.\n+     */\n+    Collection<ServiceReference<HttpFilter>> serviceReferences =\n+        this.context.getServiceReferences(HttpFilter.class, FILTER);\n+    for (ServiceReference<HttpFilter> reference : serviceReferences) {\n+      this.listener.serviceChanged(new ServiceEvent(ServiceEvent.REGISTERED, reference));\n+    }\n+  }\n+\n+  @Override\n+  public void handle(\n+      String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)\n+      throws IOException, ServletException {\n+    LOGGER.trace(\"Delegating to {} HttpFilters.\", httpFilters.size());\n+\n+    ProxyHttpFilterChain filterChain =\n+        new ProxyHttpFilterChain(httpFilters, getHandler(), target, baseRequest);\n+    filterChain.doFilter(request, response);", "originalCommit": "a3113f578bda468e1e00dd3a65424720ac9e1a8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de5046debd1100d6967709e8528c2a0da8db0feb", "chunk": "diff --git a/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java b/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java\nindex 67226984ed..532cce8ccd 100644\n--- a/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java\n+++ b/platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java\n\n@@ -35,10 +35,10 @@\n \n /**\n  * The {@code DelegatingHttpFilterHandler} provides a way to create global filters which will apply\n- * to all requests. It finds any registered {@link HttpFilter} services and passes incoming\n- * requests to them in order of service ranking.\n+ * to all requests. It finds any registered {@link HttpFilter} services and passes incoming requests\n+ * to them in order of service ranking.\n  *\n- * As of OSGi R6, there is a proper way to define global servlets/filters/listeners/etc., defined\n+ * <p>As of OSGi R6, there is a proper way to define global servlets/filters/listeners/etc., defined\n  * by the HTTP Whiteboard spec. However, pax-web does not yet implement that feature, so we're left\n  * using this workaround.\n  *\n"}}, {"oid": "de5046debd1100d6967709e8528c2a0da8db0feb", "url": "https://github.com/codice/ddf/commit/de5046debd1100d6967709e8528c2a0da8db0feb", "message": "DDF-6215 Fix formatting", "committedDate": "2020-08-19T20:55:04Z", "type": "commit"}]}