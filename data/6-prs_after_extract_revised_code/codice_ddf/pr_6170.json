{"pr_number": 6170, "pr_title": "DDF-6169 fixes support for multiple wfs 1.1.0 sources", "pr_createdAt": "2020-07-07T21:30:24Z", "pr_url": "https://github.com/codice/ddf/pull/6170", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcwNTE1Ng==", "url": "https://github.com/codice/ddf/pull/6170#discussion_r451705156", "bodyText": "\u270f\ufe0f Extra parentheses", "author": "jrnorth", "createdAt": "2020-07-08T17:19:51Z", "path": "catalog/spatial/wfs/spatial-wfs-metacardtype-registry/src/main/java/org/codice/ddf/spatial/ogc/wfs/catalog/metacardtype/registry/impl/WfsMetacardTypeRegistryImpl.java", "diffHunk": "@@ -81,7 +82,24 @@ public void registerMetacardType(\n   }\n \n   /** {@inheritDoc} */\n-  public void clear() {\n+  @Override\n+  public void clear(String sourceId) {\n+    Verify.verifyNotNull(sourceId, \"argument 'sourceId' may not be null.\");\n+    for (Iterator<ServiceRegistration<MetacardType>> iter = serviceRegistrations.iterator();\n+        iter.hasNext(); ) {\n+      ServiceRegistration registration = iter.next();\n+      if (registration.getReference() != null\n+          && registration.getReference().getProperty((SOURCE_ID)) != null", "originalCommit": "1a7c752b1e043a67e920c0697b078f717774c3aa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ac64705b64d4836915c6d2485e9f7f9ca3970bb9", "chunk": "diff --git a/catalog/spatial/wfs/spatial-wfs-metacardtype-registry/src/main/java/org/codice/ddf/spatial/ogc/wfs/catalog/metacardtype/registry/impl/WfsMetacardTypeRegistryImpl.java b/catalog/spatial/wfs/spatial-wfs-metacardtype-registry/src/main/java/org/codice/ddf/spatial/ogc/wfs/catalog/metacardtype/registry/impl/WfsMetacardTypeRegistryImpl.java\nindex d0c75bee91..606e12804b 100644\n--- a/catalog/spatial/wfs/spatial-wfs-metacardtype-registry/src/main/java/org/codice/ddf/spatial/ogc/wfs/catalog/metacardtype/registry/impl/WfsMetacardTypeRegistryImpl.java\n+++ b/catalog/spatial/wfs/spatial-wfs-metacardtype-registry/src/main/java/org/codice/ddf/spatial/ogc/wfs/catalog/metacardtype/registry/impl/WfsMetacardTypeRegistryImpl.java\n\n@@ -78,29 +88,43 @@ public void registerMetacardType(\n     properties.put(FEATURE_NAME, featureSimpleName);\n     ServiceRegistration<MetacardType> serviceRegistration =\n         bundleContext.registerService(MetacardType.class, metacardType, properties);\n-    serviceRegistrations.add(serviceRegistration);\n+    try {\n+      registryLock.lock();\n+      serviceRegistrations.add(serviceRegistration);\n+    } finally {\n+      registryLock.unlock();\n+    }\n   }\n \n   /** {@inheritDoc} */\n   @Override\n   public void clear(String sourceId) {\n     Verify.verifyNotNull(sourceId, \"argument 'sourceId' may not be null.\");\n-    for (Iterator<ServiceRegistration<MetacardType>> iter = serviceRegistrations.iterator();\n-        iter.hasNext(); ) {\n-      ServiceRegistration registration = iter.next();\n-      if (registration.getReference() != null\n-          && registration.getReference().getProperty((SOURCE_ID)) != null\n-          && registration.getReference().getProperty(SOURCE_ID).equals(sourceId)) {\n-        registration.unregister();\n-        iter.remove();\n+    try {\n+      registryLock.lock();\n+      for (Iterator<ServiceRegistration<MetacardType>> iter = serviceRegistrations.iterator();\n+          iter.hasNext(); ) {\n+        ServiceRegistration registration = iter.next();\n+        if (registration.getReference() != null\n+            && registration.getReference().getProperty(SOURCE_ID).equals(sourceId)) {\n+          registration.unregister();\n+          iter.remove();\n+        }\n       }\n+    } finally {\n+      registryLock.unlock();\n     }\n   }\n \n   /** {@inheritDoc} */\n   @Override\n   public void clearAll() {\n-    serviceRegistrations.stream().forEach(ServiceRegistration::unregister);\n-    serviceRegistrations.clear();\n+    try {\n+      registryLock.lock();\n+      serviceRegistrations.stream().forEach(ServiceRegistration::unregister);\n+      serviceRegistrations.clear();\n+    } finally {\n+      registryLock.unlock();\n+    }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5ODkxOQ==", "url": "https://github.com/codice/ddf/pull/6170#discussion_r451898919", "bodyText": "\u270f\ufe0f The feature name stubs can be removed since they won't be called during this test. These feature names don't match the ones used to register the metacard types anyway.", "author": "jrnorth", "createdAt": "2020-07-09T00:36:00Z", "path": "catalog/spatial/wfs/spatial-wfs-metacardtype-registry/src/test/java/org/codice/ddf/spatial/ogc/wfs/catalog/metacardtype/registry/impl/WfsMetacardTypeRegistryTest.java", "diffHunk": "@@ -94,13 +96,46 @@ public void testLookupMetacardTypeBySimpleName() {\n   }\n \n   @Test\n-  public void testClear() {\n+  public void testClearAll() {\n     wfsMetacardTypeRegistry.registerMetacardType(\n         mockMetacardType, TEST_SOURCE_ID, TEST_FEATURE_SIMPLE_NAME);\n-    wfsMetacardTypeRegistry.clear();\n+    wfsMetacardTypeRegistry.clearAll();\n     verify(mockServiceRegistration, times(1)).unregister();\n   }\n \n+  @Test\n+  public void testClear() {\n+    ServiceRegistration mockServiceRegistration1 = mock(ServiceRegistration.class);\n+    ServiceRegistration mockServiceRegistration2 = mock(ServiceRegistration.class);\n+    ServiceReference mockServiceReference1 = mock(ServiceReference.class);\n+    ServiceReference mockServiceReference2 = mock(ServiceReference.class);\n+    String featureA = \"featureA\";\n+    String featureB = \"featureB\";\n+\n+    when(mockServiceRegistration1.getReference()).thenReturn(mockServiceReference1);\n+    when(mockServiceRegistration2.getReference()).thenReturn(mockServiceReference2);\n+    when(mockServiceReference1.getProperty(WfsMetacardTypeRegistryImpl.SOURCE_ID))\n+        .thenReturn(TEST_SOURCE_ID);\n+    when(mockServiceReference2.getProperty(WfsMetacardTypeRegistryImpl.SOURCE_ID))\n+        .thenReturn(TEST_SOURCE_ID_2);\n+    when(mockServiceReference1.getProperty(WfsMetacardTypeRegistryImpl.FEATURE_NAME))", "originalCommit": "1a7c752b1e043a67e920c0697b078f717774c3aa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d556e755dc3ee76a9a0a9f68b70b82258d215e55", "chunk": "diff --git a/catalog/spatial/wfs/spatial-wfs-metacardtype-registry/src/test/java/org/codice/ddf/spatial/ogc/wfs/catalog/metacardtype/registry/impl/WfsMetacardTypeRegistryTest.java b/catalog/spatial/wfs/spatial-wfs-metacardtype-registry/src/test/java/org/codice/ddf/spatial/ogc/wfs/catalog/metacardtype/registry/impl/WfsMetacardTypeRegistryTest.java\nindex a8e068bade..0b3dd7db3a 100644\n--- a/catalog/spatial/wfs/spatial-wfs-metacardtype-registry/src/test/java/org/codice/ddf/spatial/ogc/wfs/catalog/metacardtype/registry/impl/WfsMetacardTypeRegistryTest.java\n+++ b/catalog/spatial/wfs/spatial-wfs-metacardtype-registry/src/test/java/org/codice/ddf/spatial/ogc/wfs/catalog/metacardtype/registry/impl/WfsMetacardTypeRegistryTest.java\n\n@@ -105,6 +106,7 @@ public void testClearAll() {\n \n   @Test\n   public void testClear() {\n+    // setup\n     ServiceRegistration mockServiceRegistration1 = mock(ServiceRegistration.class);\n     ServiceRegistration mockServiceRegistration2 = mock(ServiceRegistration.class);\n     ServiceReference mockServiceReference1 = mock(ServiceReference.class);\n"}}, {"oid": "d556e755dc3ee76a9a0a9f68b70b82258d215e55", "url": "https://github.com/codice/ddf/commit/d556e755dc3ee76a9a0a9f68b70b82258d215e55", "message": "DDF-6169 fixes support for multiple wfs 1.1.0 sources", "committedDate": "2020-07-16T16:02:32Z", "type": "commit"}, {"oid": "3fc076dccf2aeedda58b68a39324ddf733d34e5a", "url": "https://github.com/codice/ddf/commit/3fc076dccf2aeedda58b68a39324ddf733d34e5a", "message": "DDF-6169 code cleanup", "committedDate": "2020-07-16T16:02:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMjQzMQ==", "url": "https://github.com/codice/ddf/pull/6170#discussion_r455902431", "bodyText": "\u270f\ufe0f You already verify that sourceId is not null.  You could remove the previous line if you do sourceId.equals(registration.getReference().getProperty(SOURCE_ID))", "author": "pklinef", "createdAt": "2020-07-16T16:08:28Z", "path": "catalog/spatial/wfs/spatial-wfs-metacardtype-registry/src/main/java/org/codice/ddf/spatial/ogc/wfs/catalog/metacardtype/registry/impl/WfsMetacardTypeRegistryImpl.java", "diffHunk": "@@ -81,7 +82,24 @@ public void registerMetacardType(\n   }\n \n   /** {@inheritDoc} */\n-  public void clear() {\n+  @Override\n+  public void clear(String sourceId) {\n+    Verify.verifyNotNull(sourceId, \"argument 'sourceId' may not be null.\");\n+    for (Iterator<ServiceRegistration<MetacardType>> iter = serviceRegistrations.iterator();\n+        iter.hasNext(); ) {\n+      ServiceRegistration registration = iter.next();\n+      if (registration.getReference() != null\n+          && registration.getReference().getProperty((SOURCE_ID)) != null\n+          && registration.getReference().getProperty(SOURCE_ID).equals(sourceId)) {", "originalCommit": "1a7c752b1e043a67e920c0697b078f717774c3aa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ac64705b64d4836915c6d2485e9f7f9ca3970bb9", "chunk": "diff --git a/catalog/spatial/wfs/spatial-wfs-metacardtype-registry/src/main/java/org/codice/ddf/spatial/ogc/wfs/catalog/metacardtype/registry/impl/WfsMetacardTypeRegistryImpl.java b/catalog/spatial/wfs/spatial-wfs-metacardtype-registry/src/main/java/org/codice/ddf/spatial/ogc/wfs/catalog/metacardtype/registry/impl/WfsMetacardTypeRegistryImpl.java\nindex d0c75bee91..606e12804b 100644\n--- a/catalog/spatial/wfs/spatial-wfs-metacardtype-registry/src/main/java/org/codice/ddf/spatial/ogc/wfs/catalog/metacardtype/registry/impl/WfsMetacardTypeRegistryImpl.java\n+++ b/catalog/spatial/wfs/spatial-wfs-metacardtype-registry/src/main/java/org/codice/ddf/spatial/ogc/wfs/catalog/metacardtype/registry/impl/WfsMetacardTypeRegistryImpl.java\n\n@@ -78,29 +88,43 @@ public void registerMetacardType(\n     properties.put(FEATURE_NAME, featureSimpleName);\n     ServiceRegistration<MetacardType> serviceRegistration =\n         bundleContext.registerService(MetacardType.class, metacardType, properties);\n-    serviceRegistrations.add(serviceRegistration);\n+    try {\n+      registryLock.lock();\n+      serviceRegistrations.add(serviceRegistration);\n+    } finally {\n+      registryLock.unlock();\n+    }\n   }\n \n   /** {@inheritDoc} */\n   @Override\n   public void clear(String sourceId) {\n     Verify.verifyNotNull(sourceId, \"argument 'sourceId' may not be null.\");\n-    for (Iterator<ServiceRegistration<MetacardType>> iter = serviceRegistrations.iterator();\n-        iter.hasNext(); ) {\n-      ServiceRegistration registration = iter.next();\n-      if (registration.getReference() != null\n-          && registration.getReference().getProperty((SOURCE_ID)) != null\n-          && registration.getReference().getProperty(SOURCE_ID).equals(sourceId)) {\n-        registration.unregister();\n-        iter.remove();\n+    try {\n+      registryLock.lock();\n+      for (Iterator<ServiceRegistration<MetacardType>> iter = serviceRegistrations.iterator();\n+          iter.hasNext(); ) {\n+        ServiceRegistration registration = iter.next();\n+        if (registration.getReference() != null\n+            && registration.getReference().getProperty(SOURCE_ID).equals(sourceId)) {\n+          registration.unregister();\n+          iter.remove();\n+        }\n       }\n+    } finally {\n+      registryLock.unlock();\n     }\n   }\n \n   /** {@inheritDoc} */\n   @Override\n   public void clearAll() {\n-    serviceRegistrations.stream().forEach(ServiceRegistration::unregister);\n-    serviceRegistrations.clear();\n+    try {\n+      registryLock.lock();\n+      serviceRegistrations.stream().forEach(ServiceRegistration::unregister);\n+      serviceRegistrations.clear();\n+    } finally {\n+      registryLock.unlock();\n+    }\n   }\n }\n"}}, {"oid": "ac64705b64d4836915c6d2485e9f7f9ca3970bb9", "url": "https://github.com/codice/ddf/commit/ac64705b64d4836915c6d2485e9f7f9ca3970bb9", "message": "DDF-6169 addresses review commits", "committedDate": "2020-07-16T16:41:00Z", "type": "commit"}, {"oid": "ac64705b64d4836915c6d2485e9f7f9ca3970bb9", "url": "https://github.com/codice/ddf/commit/ac64705b64d4836915c6d2485e9f7f9ca3970bb9", "message": "DDF-6169 addresses review commits", "committedDate": "2020-07-16T16:41:00Z", "type": "forcePushed"}]}