{"pr_number": 6014, "pr_title": "[2.19.x] DDF-6013 G-5272 Allow users to remove themselves from the sharing list", "pr_createdAt": "2020-04-23T15:26:36Z", "pr_url": "https://github.com/codice/ddf/pull/6014", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYyNzYxNg==", "url": "https://github.com/codice/ddf/pull/6014#discussion_r419627616", "bodyText": "\u2753 does calling this put mutate the prev metacard? it's adding the remove-user-access into the prevMap, but is that updating the metacard itself?", "author": "cassandrabailey293", "createdAt": "2020-05-04T18:08:51Z", "path": "catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/security/accesscontrol/AccessControlAccessPlugin.java", "diffHunk": "@@ -104,6 +109,36 @@ private boolean isOwnerChanged(Metacard prev, Metacard updated) {\n     return !isAnyObjectNull(prev, updated) && OWNER_HAS_CHANGED.apply(prev, updated);\n   }\n \n+  private boolean hasRemoveAccess(Metacard updated) {\n+    Attribute attr = updated.getAttribute(Metacard.SECURITY);\n+    if (attr == null) {\n+      return false;\n+    }\n+    Map<String, Set<String>> map = (Map<String, Set<String>>) attr.getValue();\n+    if (map == null) {\n+      return false;\n+    }\n+    KeyValueCollectionPermission securityPermission =\n+        new KeyValueCollectionPermission(CollectionPermission.UPDATE_ACTION, map);\n+    return securityPermission\n+        .getPermissionList()\n+        .stream()\n+        .filter(p -> p instanceof KeyValuePermission)\n+        .map(p -> (KeyValuePermission) p)\n+        .anyMatch(\n+            p ->\n+                \"remove-user-access\".equals(p.getKey())\n+                    && p.getValues().contains(subjectSupplier.get()));\n+  }\n+\n+  private void addRemoveAccess(Metacard prev, Metacard updated) {\n+    Map<String, Set<String>> prevMap =\n+        (Map<String, Set<String>>) prev.getAttribute(Metacard.SECURITY).getValue();\n+    Map<String, Set<String>> updatedMap =\n+        (Map<String, Set<String>>) updated.getAttribute(Metacard.SECURITY).getValue();\n+    prevMap.put(\"remove-user-access\", updatedMap.get(\"remove-user-access\"));", "originalCommit": "b32a583bd61a0369b1aa3fed288aafe501025b6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1MzYxMg==", "url": "https://github.com/codice/ddf/pull/6014#discussion_r419653612", "bodyText": "Yeah prevMap will have the same reference so it will be updated in the metacard obj as well", "author": "andrewzimmer", "createdAt": "2020-05-04T18:52:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYyNzYxNg=="}], "type": "inlineReview", "revised_code": {"commit": "a108495619c91f19213924dfdadabdb77e9d77f4", "chunk": "diff --git a/catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/security/accesscontrol/AccessControlAccessPlugin.java b/catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/security/accesscontrol/AccessControlAccessPlugin.java\nindex e8ec0babe7..1d25b9f42b 100644\n--- a/catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/security/accesscontrol/AccessControlAccessPlugin.java\n+++ b/catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/security/accesscontrol/AccessControlAccessPlugin.java\n\n@@ -105,38 +110,53 @@ private boolean isAccessControlUpdated(Metacard prev, Metacard updated) {\n             || ACCESS_GROUPS_READ_HAS_CHANGED.apply(prev, updated));\n   }\n \n-  private boolean isOwnerChanged(Metacard prev, Metacard updated) {\n-    return !isAnyObjectNull(prev, updated) && OWNER_HAS_CHANGED.apply(prev, updated);\n+  private boolean isAccessControlAttribute(String attribute) {\n+    return !isAnyObjectNull(attribute)\n+        && (Security.ACCESS_ADMINISTRATORS.equals(attribute)\n+            || Security.ACCESS_INDIVIDUALS.equals(attribute)\n+            || Security.ACCESS_INDIVIDUALS_READ.equals(attribute));\n   }\n \n-  private boolean hasRemoveAccess(Metacard updated) {\n-    Attribute attr = updated.getAttribute(Metacard.SECURITY);\n-    if (attr == null) {\n-      return false;\n+  private boolean isUserAccessControlRemoved(Metacard prev, Metacard updated) {\n+    if (!isAnyObjectNull(prev, updated)\n+        && (ACCESS_ADMIN_HAS_CHANGED.apply(prev, updated)\n+            || ACCESS_INDIVIDUALS_HAS_CHANGED.apply(prev, updated)\n+            || ACCESS_INDIVIDUALS_READ_HAS_CHANGED.apply(prev, updated))) {\n+\n+      Set<AttributeDescriptor> attributeDescriptors =\n+          new HashSet<>(prev.getMetacardType().getAttributeDescriptors());\n+      attributeDescriptors.addAll(updated.getMetacardType().getAttributeDescriptors());\n+\n+      List<AttributeDescriptor> updatedAttributes =\n+          attributeDescriptors\n+              .stream()\n+              .filter(attribute -> attributeHasChanged(prev, updated, attribute.getName()))\n+              .collect(Collectors.toList());\n+\n+      boolean nonAccessControlUpdated =\n+          updatedAttributes.stream().anyMatch(attr -> !isAccessControlAttribute(attr.getName()));\n+\n+      return !nonAccessControlUpdated\n+          && updatedAttributes\n+              .stream()\n+              .filter(attr -> isAccessControlAttribute(attr.getName()))\n+              .allMatch(attr -> isUserOnlyRemoved(prev, updated, attr.getName()));\n     }\n-    Map<String, Set<String>> map = (Map<String, Set<String>>) attr.getValue();\n-    if (map == null) {\n-      return false;\n+    return false;\n+  }\n+\n+  private boolean isUserOnlyRemoved(Metacard prev, Metacard updated, String attribute) {\n+    List<String> prevValues = new ArrayList<>(getValuesOrEmpty(prev, attribute));\n+    List<String> updatedValues = getValuesOrEmpty(updated, attribute);\n+    if (prevValues.size() > updatedValues.size()) {\n+      prevValues.removeAll(updatedValues);\n+      return prevValues.size() == 1 && prevValues.contains(subjectSupplier.get());\n     }\n-    KeyValueCollectionPermission securityPermission =\n-        new KeyValueCollectionPermission(CollectionPermission.UPDATE_ACTION, map);\n-    return securityPermission\n-        .getPermissionList()\n-        .stream()\n-        .filter(p -> p instanceof KeyValuePermission)\n-        .map(p -> (KeyValuePermission) p)\n-        .anyMatch(\n-            p ->\n-                \"remove-user-access\".equals(p.getKey())\n-                    && p.getValues().contains(subjectSupplier.get()));\n+    return false;\n   }\n \n-  private void addRemoveAccess(Metacard prev, Metacard updated) {\n-    Map<String, Set<String>> prevMap =\n-        (Map<String, Set<String>>) prev.getAttribute(Metacard.SECURITY).getValue();\n-    Map<String, Set<String>> updatedMap =\n-        (Map<String, Set<String>>) updated.getAttribute(Metacard.SECURITY).getValue();\n-    prevMap.put(\"remove-user-access\", updatedMap.get(\"remove-user-access\"));\n+  private boolean isOwnerChanged(Metacard prev, Metacard updated) {\n+    return !isAnyObjectNull(prev, updated) && OWNER_HAS_CHANGED.apply(prev, updated);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzMDQ2OA==", "url": "https://github.com/codice/ddf/pull/6014#discussion_r419630468", "bodyText": "\u270f\ufe0f isOnlyUserAccessControlRemoved for the method name, more consistent with the one above?", "author": "cassandrabailey293", "createdAt": "2020-05-04T18:13:30Z", "path": "catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/security/accesscontrol/AccessControlPolicyPlugin.java", "diffHunk": "@@ -104,9 +124,64 @@ public PolicyResponse processPostQuery(Result input, Map<String, Serializable> p\n     return new PolicyResponseImpl(Collections.emptyMap(), getPolicy(metacard));\n   }\n \n+  private boolean isUserOnlyRemoved(Metacard prev, Metacard updated, String attribute) {\n+    List<String> prevValues = new ArrayList<>(getValuesOrEmpty(prev, attribute));\n+    List<String> updatedValues = getValuesOrEmpty(updated, attribute);\n+    if (prevValues.size() > updatedValues.size()) {\n+      prevValues.removeAll(updatedValues);\n+      return prevValues.size() == 1 && prevValues.contains(subjectSupplier.get());\n+    }\n+    return false;\n+  }\n+\n+  private boolean isOnlyUserRemovedFromAccessControlAttribute(\n+      Metacard prev, Metacard updated, String attribute) {\n+    if (!attributeHasChanged(prev, updated, attribute)) {\n+      return true;\n+    }\n+    return (Security.ACCESS_ADMINISTRATORS.equals(attribute)\n+            || Security.ACCESS_INDIVIDUALS.equals(attribute)\n+            || Security.ACCESS_INDIVIDUALS_READ.equals(attribute))\n+        && isUserOnlyRemoved(prev, updated, attribute);\n+  }\n+\n+  private boolean onlyUserAccessControlRemoved(Metacard prev, Metacard updated) {", "originalCommit": "b32a583bd61a0369b1aa3fed288aafe501025b6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a108495619c91f19213924dfdadabdb77e9d77f4", "chunk": "diff --git a/catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/security/accesscontrol/AccessControlPolicyPlugin.java b/catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/security/accesscontrol/AccessControlPolicyPlugin.java\nindex e70c00551c..bbd7e198b4 100644\n--- a/catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/security/accesscontrol/AccessControlPolicyPlugin.java\n+++ b/catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/security/accesscontrol/AccessControlPolicyPlugin.java\n\n@@ -124,64 +104,9 @@ public PolicyResponse processPostQuery(Result input, Map<String, Serializable> p\n     return new PolicyResponseImpl(Collections.emptyMap(), getPolicy(metacard));\n   }\n \n-  private boolean isUserOnlyRemoved(Metacard prev, Metacard updated, String attribute) {\n-    List<String> prevValues = new ArrayList<>(getValuesOrEmpty(prev, attribute));\n-    List<String> updatedValues = getValuesOrEmpty(updated, attribute);\n-    if (prevValues.size() > updatedValues.size()) {\n-      prevValues.removeAll(updatedValues);\n-      return prevValues.size() == 1 && prevValues.contains(subjectSupplier.get());\n-    }\n-    return false;\n-  }\n-\n-  private boolean isOnlyUserRemovedFromAccessControlAttribute(\n-      Metacard prev, Metacard updated, String attribute) {\n-    if (!attributeHasChanged(prev, updated, attribute)) {\n-      return true;\n-    }\n-    return (Security.ACCESS_ADMINISTRATORS.equals(attribute)\n-            || Security.ACCESS_INDIVIDUALS.equals(attribute)\n-            || Security.ACCESS_INDIVIDUALS_READ.equals(attribute))\n-        && isUserOnlyRemoved(prev, updated, attribute);\n-  }\n-\n-  private boolean onlyUserAccessControlRemoved(Metacard prev, Metacard updated) {\n-    if (isAnyObjectNull(prev, updated)\n-        || getOwner(prev).equals(subjectSupplier.get())\n-        || (!ACCESS_ADMIN_HAS_CHANGED.apply(prev, updated)\n-            && !ACCESS_INDIVIDUALS_HAS_CHANGED.apply(prev, updated)\n-            && !ACCESS_INDIVIDUALS_READ_HAS_CHANGED.apply(prev, updated))) {\n-      return false;\n-    }\n-\n-    Set<AttributeDescriptor> attributeDescriptors =\n-        new HashSet<>(prev.getMetacardType().getAttributeDescriptors());\n-    attributeDescriptors.addAll(updated.getMetacardType().getAttributeDescriptors());\n-\n-    return attributeDescriptors\n-        .stream()\n-        .allMatch(\n-            attribute ->\n-                isOnlyUserRemovedFromAccessControlAttribute(prev, updated, attribute.getName()));\n-  }\n-\n   @Override\n   public PolicyResponse processPreUpdate(Metacard metacard, Map<String, Serializable> properties) {\n-    Map<String, Set<String>> policy = getPolicy(metacard);\n-    OperationTransaction operationProperties =\n-        ((OperationTransaction) properties.get(OPERATION_TRANSACTION_KEY));\n-    Optional<Metacard> oldMetacard =\n-        operationProperties != null\n-            ? operationProperties\n-                .getPreviousStateMetacards()\n-                .stream()\n-                .filter(m -> metacard.getId().equals(m.getId()))\n-                .findFirst()\n-            : Optional.empty();\n-    if (oldMetacard.isPresent() && onlyUserAccessControlRemoved(oldMetacard.get(), metacard)) {\n-      policy.put(\"remove-user-access\", Collections.singleton(subjectSupplier.get()));\n-    }\n-    return new PolicyResponseImpl(Collections.emptyMap(), policy);\n+    return new PolicyResponseImpl(Collections.emptyMap(), getPolicy(metacard));\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzMDk1MQ==", "url": "https://github.com/codice/ddf/pull/6014#discussion_r419630951", "bodyText": "\u270f\ufe0f isOnlyUserRemoved for consistency with the methods below?", "author": "cassandrabailey293", "createdAt": "2020-05-04T18:14:14Z", "path": "catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/security/accesscontrol/AccessControlPolicyPlugin.java", "diffHunk": "@@ -104,9 +124,64 @@ public PolicyResponse processPostQuery(Result input, Map<String, Serializable> p\n     return new PolicyResponseImpl(Collections.emptyMap(), getPolicy(metacard));\n   }\n \n+  private boolean isUserOnlyRemoved(Metacard prev, Metacard updated, String attribute) {", "originalCommit": "b32a583bd61a0369b1aa3fed288aafe501025b6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a108495619c91f19213924dfdadabdb77e9d77f4", "chunk": "diff --git a/catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/security/accesscontrol/AccessControlPolicyPlugin.java b/catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/security/accesscontrol/AccessControlPolicyPlugin.java\nindex e70c00551c..bbd7e198b4 100644\n--- a/catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/security/accesscontrol/AccessControlPolicyPlugin.java\n+++ b/catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/security/accesscontrol/AccessControlPolicyPlugin.java\n\n@@ -124,64 +104,9 @@ public PolicyResponse processPostQuery(Result input, Map<String, Serializable> p\n     return new PolicyResponseImpl(Collections.emptyMap(), getPolicy(metacard));\n   }\n \n-  private boolean isUserOnlyRemoved(Metacard prev, Metacard updated, String attribute) {\n-    List<String> prevValues = new ArrayList<>(getValuesOrEmpty(prev, attribute));\n-    List<String> updatedValues = getValuesOrEmpty(updated, attribute);\n-    if (prevValues.size() > updatedValues.size()) {\n-      prevValues.removeAll(updatedValues);\n-      return prevValues.size() == 1 && prevValues.contains(subjectSupplier.get());\n-    }\n-    return false;\n-  }\n-\n-  private boolean isOnlyUserRemovedFromAccessControlAttribute(\n-      Metacard prev, Metacard updated, String attribute) {\n-    if (!attributeHasChanged(prev, updated, attribute)) {\n-      return true;\n-    }\n-    return (Security.ACCESS_ADMINISTRATORS.equals(attribute)\n-            || Security.ACCESS_INDIVIDUALS.equals(attribute)\n-            || Security.ACCESS_INDIVIDUALS_READ.equals(attribute))\n-        && isUserOnlyRemoved(prev, updated, attribute);\n-  }\n-\n-  private boolean onlyUserAccessControlRemoved(Metacard prev, Metacard updated) {\n-    if (isAnyObjectNull(prev, updated)\n-        || getOwner(prev).equals(subjectSupplier.get())\n-        || (!ACCESS_ADMIN_HAS_CHANGED.apply(prev, updated)\n-            && !ACCESS_INDIVIDUALS_HAS_CHANGED.apply(prev, updated)\n-            && !ACCESS_INDIVIDUALS_READ_HAS_CHANGED.apply(prev, updated))) {\n-      return false;\n-    }\n-\n-    Set<AttributeDescriptor> attributeDescriptors =\n-        new HashSet<>(prev.getMetacardType().getAttributeDescriptors());\n-    attributeDescriptors.addAll(updated.getMetacardType().getAttributeDescriptors());\n-\n-    return attributeDescriptors\n-        .stream()\n-        .allMatch(\n-            attribute ->\n-                isOnlyUserRemovedFromAccessControlAttribute(prev, updated, attribute.getName()));\n-  }\n-\n   @Override\n   public PolicyResponse processPreUpdate(Metacard metacard, Map<String, Serializable> properties) {\n-    Map<String, Set<String>> policy = getPolicy(metacard);\n-    OperationTransaction operationProperties =\n-        ((OperationTransaction) properties.get(OPERATION_TRANSACTION_KEY));\n-    Optional<Metacard> oldMetacard =\n-        operationProperties != null\n-            ? operationProperties\n-                .getPreviousStateMetacards()\n-                .stream()\n-                .filter(m -> metacard.getId().equals(m.getId()))\n-                .findFirst()\n-            : Optional.empty();\n-    if (oldMetacard.isPresent() && onlyUserAccessControlRemoved(oldMetacard.get(), metacard)) {\n-      policy.put(\"remove-user-access\", Collections.singleton(subjectSupplier.get()));\n-    }\n-    return new PolicyResponseImpl(Collections.emptyMap(), policy);\n+    return new PolicyResponseImpl(Collections.emptyMap(), getPolicy(metacard));\n   }\n \n   @Override\n"}}, {"oid": "a108495619c91f19213924dfdadabdb77e9d77f4", "url": "https://github.com/codice/ddf/commit/a108495619c91f19213924dfdadabdb77e9d77f4", "message": "DDF-6013 Allow users to remove themselves from the sharing list", "committedDate": "2020-05-18T22:27:54Z", "type": "commit"}, {"oid": "2924adfc77b60ac7256cd3a873654a1b317bbfd7", "url": "https://github.com/codice/ddf/commit/2924adfc77b60ac7256cd3a873654a1b317bbfd7", "message": "DDF-6013 fix everything", "committedDate": "2020-05-18T22:27:54Z", "type": "commit"}, {"oid": "67c56b6870ffdbac8d80a7d553fd096eb9787cd5", "url": "https://github.com/codice/ddf/commit/67c56b6870ffdbac8d80a7d553fd096eb9787cd5", "message": "DDF-6013 more", "committedDate": "2020-05-18T22:27:54Z", "type": "commit"}, {"oid": "0f93aa3575e53dfe1895addff58bc24800e05c83", "url": "https://github.com/codice/ddf/commit/0f93aa3575e53dfe1895addff58bc24800e05c83", "message": "DDF-6013 owner check", "committedDate": "2020-05-18T22:27:54Z", "type": "commit"}, {"oid": "f71e3deddcd0fc10b9fb569fa508d8fbc19a3a89", "url": "https://github.com/codice/ddf/commit/f71e3deddcd0fc10b9fb569fa508d8fbc19a3a89", "message": "DDF-6013 change userId", "committedDate": "2020-05-18T22:27:54Z", "type": "commit"}, {"oid": "fa5f188a9f637a0563db0719b169a5a95403648c", "url": "https://github.com/codice/ddf/commit/fa5f188a9f637a0563db0719b169a5a95403648c", "message": "DDF-6013 ui fixes", "committedDate": "2020-05-18T22:27:54Z", "type": "commit"}, {"oid": "0e0a61619889c8f5ff0e6cea39fec394a1e5d450", "url": "https://github.com/codice/ddf/commit/0e0a61619889c8f5ff0e6cea39fec394a1e5d450", "message": "DFF-6013 update for read access items", "committedDate": "2020-05-18T22:27:54Z", "type": "commit"}, {"oid": "883472e3612a1db981d6bcbad2f14dcb282568cf", "url": "https://github.com/codice/ddf/commit/883472e3612a1db981d6bcbad2f14dcb282568cf", "message": "DDF-6013 fix tests", "committedDate": "2020-05-18T22:27:54Z", "type": "commit"}, {"oid": "52b8422806411e07439561df152f736161b5c92c", "url": "https://github.com/codice/ddf/commit/52b8422806411e07439561df152f736161b5c92c", "message": "DDF-6013 address comments", "committedDate": "2020-05-18T22:27:54Z", "type": "commit"}, {"oid": "fb599fc47b4b8b4e54e51e202963d31cd41b1df3", "url": "https://github.com/codice/ddf/commit/fb599fc47b4b8b4e54e51e202963d31cd41b1df3", "message": "DDF-6013 fix result form actions", "committedDate": "2020-05-18T22:27:54Z", "type": "commit"}, {"oid": "094631e1d27311390057ecbb1ed541ac714c09a5", "url": "https://github.com/codice/ddf/commit/094631e1d27311390057ecbb1ed541ac714c09a5", "message": "DDF-6013 adding tests", "committedDate": "2020-05-21T17:56:37Z", "type": "commit"}, {"oid": "094631e1d27311390057ecbb1ed541ac714c09a5", "url": "https://github.com/codice/ddf/commit/094631e1d27311390057ecbb1ed541ac714c09a5", "message": "DDF-6013 adding tests", "committedDate": "2020-05-21T17:56:37Z", "type": "forcePushed"}]}