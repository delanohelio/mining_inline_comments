{"pr_number": 6064, "pr_title": "DDF-6048 Improve Logging for CDM ", "pr_createdAt": "2020-05-18T16:28:36Z", "pr_url": "https://github.com/codice/ddf/pull/6064", "timeline": [{"oid": "601cb54a256cfe36445878379f76cfd773a01614", "url": "https://github.com/codice/ddf/commit/601cb54a256cfe36445878379f76cfd773a01614", "message": "DDF-6048 added log file for cdm", "committedDate": "2020-05-08T13:27:14Z", "type": "commit"}, {"oid": "6fa3facb2d6a4a1a43bf1f51aa4430791a107447", "url": "https://github.com/codice/ddf/commit/6fa3facb2d6a4a1a43bf1f51aa4430791a107447", "message": "DDF-6408 all CDM logs go to cdm.log, AsyncFileAlterationObserver saves processing file entries", "committedDate": "2020-05-11T17:20:59Z", "type": "commit"}, {"oid": "cada389edcd1af7d6526b6a60ad445743b98de33", "url": "https://github.com/codice/ddf/commit/cada389edcd1af7d6526b6a60ad445743b98de33", "message": "DDF-6408 Changed processing to concurrent set with AsyncFileEntry", "committedDate": "2020-05-12T13:01:41Z", "type": "commit"}, {"oid": "dd2ae8dc836efafc96cbcbf38da75bc2590a6d16", "url": "https://github.com/codice/ddf/commit/dd2ae8dc836efafc96cbcbf38da75bc2590a6d16", "message": "DDF-6408 refactoring", "committedDate": "2020-05-12T13:17:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyODY1Mg==", "url": "https://github.com/codice/ddf/pull/6064#discussion_r427428652", "bodyText": "\u2753 Should this be higher than debug? I'm not sure how frequently this would occur or if it would be considered noise.", "author": "mcalcote", "createdAt": "2020-05-19T16:16:58Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/synchronizations/CompletionSynchronization.java", "diffHunk": "@@ -49,6 +51,11 @@ public final void onFailure(Exchange exchange) {\n     if (!connected) {\n       LOGGER.debug(\n           \"a network error occurred, The file [{}] failed to process\", asyncFileEntry.getName());\n+    } else if (exchange.getException() != null) {\n+      LOGGER.debug(", "originalCommit": "dd2ae8dc836efafc96cbcbf38da75bc2590a6d16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d09f7822af8286f849008dafc588604e802c6bbb", "chunk": "diff --git a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/synchronizations/CompletionSynchronization.java b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/synchronizations/CompletionSynchronization.java\nindex 3c32054fb5..0b98c16461 100644\n--- a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/synchronizations/CompletionSynchronization.java\n+++ b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/synchronizations/CompletionSynchronization.java\n\n@@ -52,7 +52,7 @@ public final void onFailure(Exchange exchange) {\n       LOGGER.debug(\n           \"a network error occurred, The file [{}] failed to process\", asyncFileEntry.getName());\n     } else if (exchange.getException() != null) {\n-      LOGGER.debug(\n+      LOGGER.trace(\n           \"Exchange {} failed synchronization on exception: {}\",\n           exchange.getExchangeId(),\n           exchange.getException());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3MTQyMg==", "url": "https://github.com/codice/ddf/pull/6064#discussion_r427471422", "bodyText": "Maybe make this \"Initializing monitor for...\" to distinguish between the init() and configure() method below.", "author": "aaronilovici", "createdAt": "2020-05-19T17:23:07Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java", "diffHunk": "@@ -172,6 +174,7 @@ public Integer getReadLockIntervalMilliseconds() {\n    * called whenever an existing route is updated.\n    */\n   public void init() {\n+    LOGGER.debug(\"Configuring monitor for {}\", monitoredDirectory);", "originalCommit": "dd2ae8dc836efafc96cbcbf38da75bc2590a6d16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d09f7822af8286f849008dafc588604e802c6bbb", "chunk": "diff --git a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java\nindex 4820a8d222..a83d216494 100644\n--- a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java\n+++ b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java\n\n@@ -174,7 +176,7 @@ public Integer getReadLockIntervalMilliseconds() {\n    * called whenever an existing route is updated.\n    */\n   public void init() {\n-    LOGGER.debug(\"Configuring monitor for {}\", monitoredDirectory);\n+    CDM_LOGGER.debug(\"Initializing monitor for {}\", monitoredDirectory);\n     security.runAsAdmin(\n         () -> {\n           CompletableFuture.runAsync(this::configure, configurationExecutor);\n"}}, {"oid": "d09f7822af8286f849008dafc588604e802c6bbb", "url": "https://github.com/codice/ddf/commit/d09f7822af8286f849008dafc588604e802c6bbb", "message": "DDF-6408 reduced logging in CDM", "committedDate": "2020-05-21T17:22:07Z", "type": "commit"}, {"oid": "12f1424b73713ba93b533e4d8f9dc3f7dbc68ab2", "url": "https://github.com/codice/ddf/commit/12f1424b73713ba93b533e4d8f9dc3f7dbc68ab2", "message": "DDF-6408 readded logs and NPE fix", "committedDate": "2020-05-21T20:48:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMyNzQxNA==", "url": "https://github.com/codice/ddf/pull/6064#discussion_r429327414", "bodyText": "These numbers could be constants", "author": "clockard", "createdAt": "2020-05-22T15:53:16Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -66,6 +73,11 @@ public AsyncFileAlterationObserver(File fileToObserve, ObjectPersistentStore ser\n     }\n     this.serializer = serializer;\n     rootFile = new AsyncFileEntry(fileToObserve);\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      timer = new Timer();\n+      timer.scheduleAtFixedRate(new LogProcessing(), 500, 5000);", "originalCommit": "12f1424b73713ba93b533e4d8f9dc3f7dbc68ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "28a8fba61a804d30b5dfdf9431bbec4d1c8333c2", "chunk": "diff --git a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\nindex 7c3cc3ceb6..5469a969af 100644\n--- a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n+++ b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n\n@@ -76,7 +79,7 @@ public AsyncFileAlterationObserver(File fileToObserve, ObjectPersistentStore ser\n \n     if (LOGGER.isDebugEnabled()) {\n       timer = new Timer();\n-      timer.scheduleAtFixedRate(new LogProcessing(), 500, 5000);\n+      timer.scheduleAtFixedRate(new LogProcessing(), LOGGING_TIME_DELAY, LOGGING_TIME_INTERVAL);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMyNzY3NQ==", "url": "https://github.com/codice/ddf/pull/6064#discussion_r429327675", "bodyText": "Should this timer be closed/canceled in a destroy method?", "author": "clockard", "createdAt": "2020-05-22T15:53:49Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -66,6 +73,11 @@ public AsyncFileAlterationObserver(File fileToObserve, ObjectPersistentStore ser\n     }\n     this.serializer = serializer;\n     rootFile = new AsyncFileEntry(fileToObserve);\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      timer = new Timer();", "originalCommit": "12f1424b73713ba93b533e4d8f9dc3f7dbc68ab2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MTg3Ng==", "url": "https://github.com/codice/ddf/pull/6064#discussion_r431371876", "bodyText": "\u2757 What Chris said is important to ensure a bundle is properly stopped", "author": "paouelle", "createdAt": "2020-05-27T18:57:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMyNzY3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "28a8fba61a804d30b5dfdf9431bbec4d1c8333c2", "chunk": "diff --git a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\nindex 7c3cc3ceb6..5469a969af 100644\n--- a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n+++ b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n\n@@ -76,7 +79,7 @@ public AsyncFileAlterationObserver(File fileToObserve, ObjectPersistentStore ser\n \n     if (LOGGER.isDebugEnabled()) {\n       timer = new Timer();\n-      timer.scheduleAtFixedRate(new LogProcessing(), 500, 5000);\n+      timer.scheduleAtFixedRate(new LogProcessing(), LOGGING_TIME_DELAY, LOGGING_TIME_INTERVAL);\n     }\n   }\n \n"}}, {"oid": "28a8fba61a804d30b5dfdf9431bbec4d1c8333c2", "url": "https://github.com/codice/ddf/commit/28a8fba61a804d30b5dfdf9431bbec4d1c8333c2", "message": "DDF-6408 adding constants for AsyncFileAlterationObserver", "committedDate": "2020-05-26T12:41:55Z", "type": "commit"}, {"oid": "c2a47b9960997f79253ec9506c92c384fe5cf5f7", "url": "https://github.com/codice/ddf/commit/c2a47b9960997f79253ec9506c92c384fe5cf5f7", "message": "DDF-6408 timer cancelled at end of object life", "committedDate": "2020-05-27T18:59:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MTAyNQ==", "url": "https://github.com/codice/ddf/pull/6064#discussion_r431371025", "bodyText": "\u2757 All onFinish() should be called in a finally clause to ensure we properly cleanup", "author": "paouelle", "createdAt": "2020-05-27T18:56:29Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -283,12 +302,18 @@ else if (!entry.hasChildren()) {\n    * @param success Boolean that shows if the task failed or completed successfully\n    */\n   private void commitDelete(AsyncFileEntry entry, boolean success) {\n-    LOGGER.debug(\"commitDelete({},{}): Starting...\", entry.getName(), success);\n+    LOGGER.trace(\"commitDelete({},{}): Starting...\", entry.getName(), success);\n     if (success) {\n       entry.getParent().ifPresent(e -> e.removeChild(entry));\n       entry.destroy();\n+      LOGGER.debug(\n+          \"{} was removed from {}\",\n+          entry.getName(),\n+          entry.getParent().map(AsyncFileEntry::getName).orElse(\"parent\"));\n+    } else {\n+      LOGGER.debug(\"Delete task failed for {}\", entry.getName());\n     }\n-    onFinish();\n+    onFinish(entry);", "originalCommit": "28a8fba61a804d30b5dfdf9431bbec4d1c8333c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "331fed0aee87339f66b1d711fc6144d6a8fe2520", "chunk": "diff --git a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\nindex 5469a969af..4aadb85492 100644\n--- a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n+++ b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n\n@@ -303,6 +310,7 @@ else if (!entry.hasChildren()) {\n    */\n   private void commitDelete(AsyncFileEntry entry, boolean success) {\n     LOGGER.trace(\"commitDelete({},{}): Starting...\", entry.getName(), success);\n+    try {\n     if (success) {\n       entry.getParent().ifPresent(e -> e.removeChild(entry));\n       entry.destroy();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MTQ4Ng==", "url": "https://github.com/codice/ddf/pull/6064#discussion_r431371486", "bodyText": "\u2757 See other comment", "author": "paouelle", "createdAt": "2020-05-27T18:57:18Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -246,11 +263,14 @@ private void doMatch(AsyncFileEntry entry, final AsyncFileAlterationListener lis\n    * @param success Boolean that shows if the task failed or completed successfully\n    */\n   private void commitMatch(AsyncFileEntry entry, boolean success) {\n-    LOGGER.debug(\"commitMatch({},{}): Starting...\", entry.getName(), success);\n     if (success) {\n+      LOGGER.trace(\"commitMatch({},{}): Starting...\", entry.getName(), success);\n       entry.commit();\n+      LOGGER.debug(\"{} committed\", entry.getName());\n+    } else {\n+      LOGGER.debug(\"Match task failed for {}\", entry.getName());\n     }\n-    onFinish();\n+    onFinish(entry);", "originalCommit": "28a8fba61a804d30b5dfdf9431bbec4d1c8333c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "331fed0aee87339f66b1d711fc6144d6a8fe2520", "chunk": "diff --git a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\nindex 5469a969af..4aadb85492 100644\n--- a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n+++ b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n\n@@ -263,6 +267,7 @@ private void doMatch(AsyncFileEntry entry, final AsyncFileAlterationListener lis\n    * @param success Boolean that shows if the task failed or completed successfully\n    */\n   private void commitMatch(AsyncFileEntry entry, boolean success) {\n+    try {\n     if (success) {\n       LOGGER.trace(\"commitMatch({},{}): Starting...\", entry.getName(), success);\n       entry.commit();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MTU4OQ==", "url": "https://github.com/codice/ddf/pull/6064#discussion_r431371589", "bodyText": "\u2757 See other comment", "author": "paouelle", "createdAt": "2020-05-27T18:57:28Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -208,12 +220,18 @@ private void doCreate(AsyncFileEntry entry, final AsyncFileAlterationListener li\n    */\n   private void commitCreate(AsyncFileEntry entry, boolean success) {\n \n-    LOGGER.debug(\"commitCreate({},{}): Starting...\", entry.getName(), success);\n+    LOGGER.trace(\"commitCreate({},{}): Starting...\", entry.getName(), success);\n     if (success) {\n       entry.commit();\n       entry.getParent().ifPresent(e -> e.addChild(entry));\n+      LOGGER.debug(\n+          \"File {} committed to {}\",\n+          entry.getName(),\n+          entry.getParent().map(AsyncFileEntry::getName).orElse(\"parent\"));\n+    } else {\n+      LOGGER.debug(\"Create task failed for {}\", entry.getName());\n     }\n-    onFinish();\n+    onFinish(entry);", "originalCommit": "28a8fba61a804d30b5dfdf9431bbec4d1c8333c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "331fed0aee87339f66b1d711fc6144d6a8fe2520", "chunk": "diff --git a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\nindex 5469a969af..4aadb85492 100644\n--- a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n+++ b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n\n@@ -221,17 +221,21 @@ private void doCreate(AsyncFileEntry entry, final AsyncFileAlterationListener li\n   private void commitCreate(AsyncFileEntry entry, boolean success) {\n \n     LOGGER.trace(\"commitCreate({},{}): Starting...\", entry.getName(), success);\n-    if (success) {\n-      entry.commit();\n-      entry.getParent().ifPresent(e -> e.addChild(entry));\n-      LOGGER.debug(\n-          \"File {} committed to {}\",\n-          entry.getName(),\n-          entry.getParent().map(AsyncFileEntry::getName).orElse(\"parent\"));\n-    } else {\n-      LOGGER.debug(\"Create task failed for {}\", entry.getName());\n+    try {\n+      if (success) {\n+        entry.commit();\n+        entry.getParent().ifPresent(e -> e.addChild(entry));\n+        LOGGER.debug(\n+                \"File {} committed to {}\",\n+                entry.getName(),\n+                entry.getParent().map(AsyncFileEntry::getName).orElse(\"parent\"));\n+      } else {\n+        LOGGER.debug(\"Create task failed for {}\", entry.getName());\n+      }\n+    }\n+    finally{\n+      onFinish(entry);\n     }\n-    onFinish(entry);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3NDQ3MQ==", "url": "https://github.com/codice/ddf/pull/6064#discussion_r431374471", "bodyText": "\u270f\ufe0f Please don't create a temp collection just to get a string representation of it. There are collectors for streams that will do that directly.", "author": "paouelle", "createdAt": "2020-05-27T19:02:34Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -367,12 +392,37 @@ private void initChildEntries(AsyncFileEntry parent) throws IllegalStateExceptio\n     }\n   }\n \n-  private void onFinish() {\n+  private void onFinish(AsyncFileEntry entry) {\n     synchronized (processingLock) {\n-      if (processing.decrementAndGet() == 0) {\n+      processing.remove(entry);\n+      if (processing.isEmpty()) {\n+        LOGGER.debug(\"All files finished processing\");\n         serializer.store(rootFile.getName(), rootFile);\n         isProcessing = false;\n       }\n     }\n   }\n+\n+  private class LogProcessing extends TimerTask {\n+\n+    /** Log files still in processing at scheduled intervals */\n+    public void run() {\n+      if (!processing.isEmpty()) {\n+        String files =\n+            processing\n+                .stream()\n+                .map(AsyncFileEntry::getName)\n+                .collect(Collectors.toList())", "originalCommit": "c2a47b9960997f79253ec9506c92c384fe5cf5f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "331fed0aee87339f66b1d711fc6144d6a8fe2520", "chunk": "diff --git a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\nindex 79f7eb4079..4aadb85492 100644\n--- a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n+++ b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n\n@@ -412,8 +422,7 @@ public void run() {\n             processing\n                 .stream()\n                 .map(AsyncFileEntry::getName)\n-                .collect(Collectors.toList())\n-                .toString();\n+                .collect(Collectors.joining(\", \"));\n         LOGGER.debug(\"{} files being processed: {}\", processing.size(), files);\n       }\n     }\n"}}, {"oid": "331fed0aee87339f66b1d711fc6144d6a8fe2520", "url": "https://github.com/codice/ddf/commit/331fed0aee87339f66b1d711fc6144d6a8fe2520", "message": "DDF-6408 patrick's suggestions", "committedDate": "2020-05-27T19:24:25Z", "type": "commit"}, {"oid": "4e330e167ffc71ecfb393307e064aa13d0d3bcf6", "url": "https://github.com/codice/ddf/commit/4e330e167ffc71ecfb393307e064aa13d0d3bcf6", "message": "DDF-6408 formatting", "committedDate": "2020-05-28T13:53:32Z", "type": "commit"}, {"oid": "bd11de843ac846805310365e445d6be5d623ad25", "url": "https://github.com/codice/ddf/commit/bd11de843ac846805310365e445d6be5d623ad25", "message": "DDF-6408 fixed finalize method in AsyncFileAlterationObserver", "committedDate": "2020-05-28T14:37:53Z", "type": "commit"}, {"oid": "5ff3ad465a60b6e76069d2a9a5b82506414fa716", "url": "https://github.com/codice/ddf/commit/5ff3ad465a60b6e76069d2a9a5b82506414fa716", "message": "DDF-6408 made logging time constants static", "committedDate": "2020-06-01T13:23:07Z", "type": "commit"}, {"oid": "657bf1247915e0c269acee8ee8c71480a8027d2a", "url": "https://github.com/codice/ddf/commit/657bf1247915e0c269acee8ee8c71480a8027d2a", "message": "DDF-6408 added documentation for cdmLogging", "committedDate": "2020-06-02T19:22:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNTM2NQ==", "url": "https://github.com/codice/ddf/pull/6064#discussion_r434135365", "bodyText": "\u2757 using finalization is not advisable. In addition, this object will never be GCed since at init time, a timer task is created and registered in the timer. Therefore, there will always be a hard reference to this object which is why it will never be GCed", "author": "paouelle", "createdAt": "2020-06-02T19:46:44Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -367,12 +402,36 @@ private void initChildEntries(AsyncFileEntry parent) throws IllegalStateExceptio\n     }\n   }\n \n-  private void onFinish() {\n+  private void onFinish(AsyncFileEntry entry) {\n     synchronized (processingLock) {\n-      if (processing.decrementAndGet() == 0) {\n+      processing.remove(entry);\n+      if (processing.isEmpty()) {\n+        LOGGER.debug(\"All files finished processing\");\n         serializer.store(rootFile.getName(), rootFile);\n         isProcessing = false;\n       }\n     }\n   }\n+\n+  private class LogProcessing extends TimerTask {\n+\n+    /** Log files still in processing at scheduled intervals */\n+    public void run() {\n+      if (!processing.isEmpty()) {\n+        String files =\n+            processing.stream().map(AsyncFileEntry::getName).collect(Collectors.joining(\", \"));\n+        LOGGER.debug(\"{} files being processed: {}\", processing.size(), files);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  protected void finalize() throws Throwable {", "originalCommit": "657bf1247915e0c269acee8ee8c71480a8027d2a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c2b68c0797ac9cba03781afe1c641799d58b172", "chunk": "diff --git a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\nindex 6be3d755e1..efff10035c 100644\n--- a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n+++ b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n\n@@ -417,21 +422,11 @@ private void onFinish(AsyncFileEntry entry) {\n \n     /** Log files still in processing at scheduled intervals */\n     public void run() {\n-      if (!processing.isEmpty()) {\n+      if (LOGGER.isDebugEnabled() && !processing.isEmpty()) {\n         String files =\n             processing.stream().map(AsyncFileEntry::getName).collect(Collectors.joining(\", \"));\n         LOGGER.debug(\"{} files being processed: {}\", processing.size(), files);\n       }\n     }\n   }\n-\n-  @Override\n-  protected void finalize() throws Throwable {\n-    super.finalize();\n-\n-    if (timer != null) {\n-      timer.cancel();\n-      timer.purge();\n-    }\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MDAyOQ==", "url": "https://github.com/codice/ddf/pull/6064#discussion_r434170029", "bodyText": "you might want to add another condition to the if: LOGGER.isDebugEnabled()", "author": "paouelle", "createdAt": "2020-06-02T20:55:16Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -367,12 +402,36 @@ private void initChildEntries(AsyncFileEntry parent) throws IllegalStateExceptio\n     }\n   }\n \n-  private void onFinish() {\n+  private void onFinish(AsyncFileEntry entry) {\n     synchronized (processingLock) {\n-      if (processing.decrementAndGet() == 0) {\n+      processing.remove(entry);\n+      if (processing.isEmpty()) {\n+        LOGGER.debug(\"All files finished processing\");\n         serializer.store(rootFile.getName(), rootFile);\n         isProcessing = false;\n       }\n     }\n   }\n+\n+  private class LogProcessing extends TimerTask {\n+\n+    /** Log files still in processing at scheduled intervals */\n+    public void run() {\n+      if (!processing.isEmpty()) {", "originalCommit": "657bf1247915e0c269acee8ee8c71480a8027d2a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c2b68c0797ac9cba03781afe1c641799d58b172", "chunk": "diff --git a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\nindex 6be3d755e1..efff10035c 100644\n--- a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n+++ b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n\n@@ -417,21 +422,11 @@ private void onFinish(AsyncFileEntry entry) {\n \n     /** Log files still in processing at scheduled intervals */\n     public void run() {\n-      if (!processing.isEmpty()) {\n+      if (LOGGER.isDebugEnabled() && !processing.isEmpty()) {\n         String files =\n             processing.stream().map(AsyncFileEntry::getName).collect(Collectors.joining(\", \"));\n         LOGGER.debug(\"{} files being processed: {}\", processing.size(), files);\n       }\n     }\n   }\n-\n-  @Override\n-  protected void finalize() throws Throwable {\n-    super.finalize();\n-\n-    if (timer != null) {\n-      timer.cancel();\n-      timer.purge();\n-    }\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4MTc2Mw==", "url": "https://github.com/codice/ddf/pull/6064#discussion_r434181763", "bodyText": "\u2757 This is actually not a good idea to do in the constructor as you are creating a timer and scheduling a task that will have an implicit reference to this object but this object has not yet been created.", "author": "paouelle", "createdAt": "2020-06-02T21:19:35Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -66,6 +77,11 @@ public AsyncFileAlterationObserver(File fileToObserve, ObjectPersistentStore ser\n     }\n     this.serializer = serializer;\n     rootFile = new AsyncFileEntry(fileToObserve);\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      timer = new Timer();\n+      timer.scheduleAtFixedRate(new LogProcessing(), LOGGING_TIME_DELAY, LOGGING_TIME_INTERVAL);", "originalCommit": "657bf1247915e0c269acee8ee8c71480a8027d2a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c2b68c0797ac9cba03781afe1c641799d58b172", "chunk": "diff --git a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\nindex 6be3d755e1..efff10035c 100644\n--- a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n+++ b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n\n@@ -77,11 +77,6 @@ public AsyncFileAlterationObserver(File fileToObserve, ObjectPersistentStore ser\n     }\n     this.serializer = serializer;\n     rootFile = new AsyncFileEntry(fileToObserve);\n-\n-    if (LOGGER.isDebugEnabled()) {\n-      timer = new Timer();\n-      timer.scheduleAtFixedRate(new LogProcessing(), LOGGING_TIME_DELAY, LOGGING_TIME_INTERVAL);\n-    }\n   }\n \n   private AsyncFileAlterationObserver(AsyncFileEntry entry, ObjectPersistentStore serializer) {\n"}}, {"oid": "2c2b68c0797ac9cba03781afe1c641799d58b172", "url": "https://github.com/codice/ddf/commit/2c2b68c0797ac9cba03781afe1c641799d58b172", "message": "DDF-6408 AsyncFileAlterationObserver initialize called when first created", "committedDate": "2020-06-02T21:33:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjU4Mw==", "url": "https://github.com/codice/ddf/pull/6064#discussion_r434192583", "bodyText": "\u2753 Did you realize that you will only startup the timer thread if, at init time, debug is enabled?", "author": "paouelle", "createdAt": "2020-06-02T21:43:41Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -120,10 +115,20 @@ private AsyncFileAlterationObserver(AsyncFileEntry entry, ObjectPersistentStore\n   public void initialize() throws IllegalStateException {\n     initChildEntries(rootFile);\n     serializer.store(rootFile.getName(), rootFile);\n+\n+    if (LOGGER.isDebugEnabled()) {", "originalCommit": "2c2b68c0797ac9cba03781afe1c641799d58b172", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMDk1MQ==", "url": "https://github.com/codice/ddf/pull/6064#discussion_r434200951", "bodyText": "Good point. The timertask checks for debug before working anyway, I'll just remove this one", "author": "josephthweatt", "createdAt": "2020-06-02T22:04:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjU4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9bd9a04c609200e9a8fe175236872d3d0cf7a950", "chunk": "diff --git a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\nindex efff10035c..a229d256f8 100644\n--- a/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n+++ b/catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java\n\n@@ -116,10 +116,8 @@ public void initialize() throws IllegalStateException {\n     initChildEntries(rootFile);\n     serializer.store(rootFile.getName(), rootFile);\n \n-    if (LOGGER.isDebugEnabled()) {\n-      timer = new Timer();\n-      timer.scheduleAtFixedRate(new LogProcessing(), LOGGING_TIME_DELAY, LOGGING_TIME_INTERVAL);\n-    }\n+    timer = new Timer();\n+    timer.scheduleAtFixedRate(new LogProcessing(), LOGGING_TIME_DELAY, LOGGING_TIME_INTERVAL);\n   }\n \n   public void destroy() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MzE3OA==", "url": "https://github.com/codice/ddf/pull/6064#discussion_r434193178", "bodyText": "\u2757 Because you re-used the same destroy() method that already existed on the observer, the side effect is that the file will also be deleted. is that what you want?", "author": "paouelle", "createdAt": "2020-06-02T21:45:02Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/DurableFileSystemFileConsumer.java", "diffHunk": "@@ -108,5 +108,9 @@ private AsyncFileAlterationObserver backwardsCompatibility(String fileName) {\n   public void shutdown() throws Exception {\n     super.shutdown();\n     listener.destroy();\n+\n+    if (observer != null) {\n+      observer.destroy();", "originalCommit": "2c2b68c0797ac9cba03781afe1c641799d58b172", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NzkzMw==", "url": "https://github.com/codice/ddf/pull/6064#discussion_r434197933", "bodyText": "Hmm, this should be fine. This destroy method will delete the root folder, which should be safe to get rid of if the object is being destroyed. Everything that accesses that variable is ultimately called by DurableFileSystemFileConsumer, so sincee we're shutting it down in that class I can't see it needing to be used again", "author": "josephthweatt", "createdAt": "2020-06-02T21:56:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MzE3OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "9bd9a04c609200e9a8fe175236872d3d0cf7a950", "url": "https://github.com/codice/ddf/commit/9bd9a04c609200e9a8fe175236872d3d0cf7a950", "message": "DDF-6408 removed initial timer check for debug", "committedDate": "2020-06-02T22:06:01Z", "type": "commit"}, {"oid": "16a80e13462097d8d1680ab044833840773f894a", "url": "https://github.com/codice/ddf/commit/16a80e13462097d8d1680ab044833840773f894a", "message": "DDF-6408 observers initialize on creation", "committedDate": "2020-06-03T20:03:35Z", "type": "commit"}, {"oid": "462ee93b05ca8d02525c2ce9079380e83b568fb1", "url": "https://github.com/codice/ddf/commit/462ee93b05ca8d02525c2ce9079380e83b568fb1", "message": "DDF-6408 separated time logging initialization from regular init processes", "committedDate": "2020-06-05T12:55:06Z", "type": "commit"}]}