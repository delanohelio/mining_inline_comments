{"pr_number": 9645, "pr_title": "CB-10327 We should wait for the flow to finish by deafult. The await(\u2026", "pr_createdAt": "2020-12-12T08:27:00Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/9645", "timeline": [{"oid": "29d257f32c08fc8bf13a106c9c410dc93c4ba086", "url": "https://github.com/hortonworks/cloudbreak/commit/29d257f32c08fc8bf13a106c9c410dc93c4ba086", "message": "ASD", "committedDate": "2020-12-12T10:45:06Z", "type": "forcePushed"}, {"oid": "ff53ccf579d226e4a8ab41df6a64864777c8bd20", "url": "https://github.com/hortonworks/cloudbreak/commit/ff53ccf579d226e4a8ab41df6a64864777c8bd20", "message": "ASD", "committedDate": "2020-12-12T14:02:33Z", "type": "forcePushed"}, {"oid": "8390ecd0cf0e574eff3d783d5ec4082df8989f1a", "url": "https://github.com/hortonworks/cloudbreak/commit/8390ecd0cf0e574eff3d783d5ec4082df8989f1a", "message": "CB-10327 We should wait for the flow to finish by deafult. The await() will wait until the flow finished and after that will check the status. I have alse removed the await(), awaitForFlow(), and status checker redundancy because these are very hard to maintainance.", "committedDate": "2020-12-12T15:28:22Z", "type": "forcePushed"}, {"oid": "fab619a8c804844608dc1e0665e8e294ec8f702f", "url": "https://github.com/hortonworks/cloudbreak/commit/fab619a8c804844608dc1e0665e8e294ec8f702f", "message": "CB-10327 We should wait for the flow to finish by deafult. The await() will wait until the flow finished and after that will check the status. I have alse removed the await(), awaitForFlow(), and status checker redundancy because these are very hard to maintainance.", "committedDate": "2020-12-14T07:27:34Z", "type": "forcePushed"}, {"oid": "18c1b3703e27146d8ed9419e798c59f4603a738a", "url": "https://github.com/hortonworks/cloudbreak/commit/18c1b3703e27146d8ed9419e798c59f4603a738a", "message": "CB-10327 We should wait for the flow to finish by deafult. The await() will wait until the flow finished and after that will check the status. I have alse removed the await(), awaitForFlow(), and status checker redundancy because these are very hard to maintainance.", "committedDate": "2020-12-14T08:10:18Z", "type": "forcePushed"}, {"oid": "3e2e2ee3a4568d00524e51db22636e90c644cf38", "url": "https://github.com/hortonworks/cloudbreak/commit/3e2e2ee3a4568d00524e51db22636e90c644cf38", "message": "CB-10327 We should wait for the flow to finish by deafult. The await() will wait until the flow finished and after that will check the status. I have alse removed the await(), awaitForFlow(), and status checker redundancy because these are very hard to maintainance.", "committedDate": "2020-12-14T10:35:48Z", "type": "forcePushed"}, {"oid": "b0f697708b7764fe4f3ba6f27e9aeb0a3b6efb98", "url": "https://github.com/hortonworks/cloudbreak/commit/b0f697708b7764fe4f3ba6f27e9aeb0a3b6efb98", "message": "CB-10327 We should wait for the flow to finish by deafult. The await() will wait until the flow finished and after that will check the status. I have alse removed the await(), awaitForFlow(), and status checker redundancy because these are very hard to maintainance.", "committedDate": "2020-12-14T12:28:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQwMzI0OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9645#discussion_r542403249", "bodyText": "As far as I see we can rename this to a more general, for example WaitFailedChecker or FailedChecker, because of this is not only for CloudbreakClient or CloudbreakService", "author": "aszegedi", "createdAt": "2020-12-14T13:58:02Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/CloudbreakFailedChecker.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.sequenceiq.it.cloudbreak.util.wait.service;\n+\n+import java.util.Map;\n+\n+import javax.ws.rs.NotFoundException;\n+import javax.ws.rs.ProcessingException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.sequenceiq.it.cloudbreak.exception.TestFailException;\n+\n+public class CloudbreakFailedChecker<T extends WaitObject> extends ExceptionChecker<T> {", "originalCommit": "b0f697708b7764fe4f3ba6f27e9aeb0a3b6efb98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQxNzI0MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9645#discussion_r542417240", "bodyText": "This name is ok for me", "author": "topolyai5", "createdAt": "2020-12-14T14:17:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQwMzI0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "15e1698f56fc0d29ce04c179d2691bd867a68b4d", "chunk": "diff --git a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/CloudbreakFailedChecker.java b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/WaitFailedChecker.java\nsimilarity index 97%\nrename from integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/CloudbreakFailedChecker.java\nrename to integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/WaitFailedChecker.java\nindex 5b7d969af4..c617c38497 100644\n--- a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/CloudbreakFailedChecker.java\n+++ b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/WaitFailedChecker.java\n\n@@ -10,9 +10,9 @@ import org.slf4j.LoggerFactory;\n \n import com.sequenceiq.it.cloudbreak.exception.TestFailException;\n \n-public class CloudbreakFailedChecker<T extends WaitObject> extends ExceptionChecker<T> {\n+public class WaitFailedChecker<T extends WaitObject> extends ExceptionChecker<T> {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(CloudbreakFailedChecker.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WaitFailedChecker.class);\n \n     @Override\n     public boolean checkStatus(T waitObject) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQwNDE3NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9645#discussion_r542404175", "bodyText": "Also this can be called WaitOperationChecker or OperationChecker.", "author": "aszegedi", "createdAt": "2020-12-14T13:59:18Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/CloudbreakOperationChecker.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.sequenceiq.it.cloudbreak.util.wait.service;\n+\n+import java.util.Map;\n+\n+import javax.ws.rs.ProcessingException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.sequenceiq.it.cloudbreak.exception.TestFailException;\n+\n+public class CloudbreakOperationChecker<T extends WaitObject> extends ExceptionChecker<T> {", "originalCommit": "b0f697708b7764fe4f3ba6f27e9aeb0a3b6efb98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQxNzI3OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9645#discussion_r542417279", "bodyText": "This name is ok for me", "author": "topolyai5", "createdAt": "2020-12-14T14:17:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQwNDE3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "15e1698f56fc0d29ce04c179d2691bd867a68b4d", "chunk": "diff --git a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/CloudbreakOperationChecker.java b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/WaitOperationChecker.java\nsimilarity index 97%\nrename from integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/CloudbreakOperationChecker.java\nrename to integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/WaitOperationChecker.java\nindex aeaf4b8db6..4bcf0209ff 100644\n--- a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/CloudbreakOperationChecker.java\n+++ b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/WaitOperationChecker.java\n\n@@ -9,9 +9,9 @@ import org.slf4j.LoggerFactory;\n \n import com.sequenceiq.it.cloudbreak.exception.TestFailException;\n \n-public class CloudbreakOperationChecker<T extends WaitObject> extends ExceptionChecker<T> {\n+public class WaitOperationChecker<T extends WaitObject> extends ExceptionChecker<T> {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(CloudbreakOperationChecker.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WaitOperationChecker.class);\n \n     @Override\n     public boolean checkStatus(T waitObject) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQwNDQ3Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9645#discussion_r542404477", "bodyText": "Also this can be called WaitTerminationChecker or TerminationChecker.", "author": "aszegedi", "createdAt": "2020-12-14T13:59:42Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/CloudbreakTerminationChecker.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.sequenceiq.it.cloudbreak.util.wait.service;\n+\n+import static com.sequenceiq.cloudbreak.api.endpoint.v4.common.Status.DELETE_COMPLETED;\n+\n+import java.util.Map;\n+\n+import javax.ws.rs.NotFoundException;\n+import javax.ws.rs.ProcessingException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.sequenceiq.it.cloudbreak.exception.TestFailException;\n+\n+public class CloudbreakTerminationChecker<T extends WaitObject> extends ExceptionChecker<T> {", "originalCommit": "b0f697708b7764fe4f3ba6f27e9aeb0a3b6efb98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQxNzM0MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9645#discussion_r542417340", "bodyText": "This name is ok for me", "author": "topolyai5", "createdAt": "2020-12-14T14:17:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQwNDQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "15e1698f56fc0d29ce04c179d2691bd867a68b4d", "chunk": "diff --git a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/CloudbreakTerminationChecker.java b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/WaitTerminationChecker.java\nsimilarity index 96%\nrename from integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/CloudbreakTerminationChecker.java\nrename to integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/WaitTerminationChecker.java\nindex 8ac8e699c8..9b2a50c655 100644\n--- a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/CloudbreakTerminationChecker.java\n+++ b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/WaitTerminationChecker.java\n\n@@ -12,9 +12,9 @@ import org.slf4j.LoggerFactory;\n \n import com.sequenceiq.it.cloudbreak.exception.TestFailException;\n \n-public class CloudbreakTerminationChecker<T extends WaitObject> extends ExceptionChecker<T> {\n+public class WaitTerminationChecker<T extends WaitObject> extends ExceptionChecker<T> {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(CloudbreakTerminationChecker.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WaitTerminationChecker.class);\n \n     @Override\n     public boolean checkStatus(T waitObject) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQwNzAzNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9645#discussion_r542407036", "bodyText": "What is the purpose of this, where it is going to be used?", "author": "aszegedi", "createdAt": "2020-12-14T14:03:04Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/ResourceAwait.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.sequenceiq.it.cloudbreak.util.wait.service;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.it.cloudbreak.MicroserviceClient;\n+import com.sequenceiq.it.cloudbreak.context.RunningParameter;\n+import com.sequenceiq.it.cloudbreak.context.TestContext;\n+import com.sequenceiq.it.cloudbreak.dto.CloudbreakTestDto;\n+import com.sequenceiq.it.cloudbreak.log.Log;\n+import com.sequenceiq.it.cloudbreak.util.ResponseUtil;\n+\n+@Component\n+public class ResourceAwait {", "originalCommit": "b0f697708b7764fe4f3ba6f27e9aeb0a3b6efb98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQxODE5Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9645#discussion_r542418192", "bodyText": "we call this from the TestContext in the awaitForFlow()", "author": "topolyai5", "createdAt": "2020-12-14T14:18:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQwNzAzNg=="}], "type": "inlineReview", "revised_code": {"commit": "15e1698f56fc0d29ce04c179d2691bd867a68b4d", "chunk": "diff --git a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/ResourceAwait.java b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/ResourceAwait.java\nindex 645dfda8ee..efe4892d69 100644\n--- a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/ResourceAwait.java\n+++ b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/service/ResourceAwait.java\n\n@@ -32,12 +32,12 @@ public class ResourceAwait {\n             String name = entity.getName();\n             WaitObject waitObject = client.waitObject(entity, name, desiredStatuses, testContext);\n             if (waitObject.isDeletionCheck()) {\n-                client.waiterService().waitObject(new CloudbreakTerminationChecker<>(), waitObject, testContext, pollingInterval, maxRetry, 1);\n+                client.waiterService().waitObject(new WaitTerminationChecker<>(), waitObject, testContext, pollingInterval, maxRetry, 1);\n             } else if (waitObject.isFailedCheck()) {\n-                client.waiterService().waitObject(new CloudbreakFailedChecker<>(), waitObject, testContext, pollingInterval, maxRetry, 1);\n+                client.waiterService().waitObject(new WaitFailedChecker<>(), waitObject, testContext, pollingInterval, maxRetry, 1);\n                 entity.refresh();\n             } else {\n-                client.waiterService().waitObject(new CloudbreakOperationChecker<>(), waitObject, testContext, pollingInterval, maxRetry, 1);\n+                client.waiterService().waitObject(new WaitOperationChecker<>(), waitObject, testContext, pollingInterval, maxRetry, 1);\n                 entity.refresh();\n             }\n         } catch (Exception e) {\n"}}, {"oid": "15e1698f56fc0d29ce04c179d2691bd867a68b4d", "url": "https://github.com/hortonworks/cloudbreak/commit/15e1698f56fc0d29ce04c179d2691bd867a68b4d", "message": "CB-10327 We should wait for the flow to finish by deafult. The await() will wait until the flow finished and after that will check the status. I have alse removed the await(), awaitForFlow(), and status checker redundancy because these are very hard to maintainance.", "committedDate": "2020-12-14T14:21:58Z", "type": "commit"}, {"oid": "15e1698f56fc0d29ce04c179d2691bd867a68b4d", "url": "https://github.com/hortonworks/cloudbreak/commit/15e1698f56fc0d29ce04c179d2691bd867a68b4d", "message": "CB-10327 We should wait for the flow to finish by deafult. The await() will wait until the flow finished and after that will check the status. I have alse removed the await(), awaitForFlow(), and status checker redundancy because these are very hard to maintainance.", "committedDate": "2020-12-14T14:21:58Z", "type": "forcePushed"}]}