{"pr_number": 9388, "pr_title": "CB-9534 Refactoring GrpcUmsClient so it can have proper caching. ", "pr_createdAt": "2020-11-09T12:35:39Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/9388", "timeline": [{"oid": "70a77d3868162b175456b49d94ab7a7ebebae737", "url": "https://github.com/hortonworks/cloudbreak/commit/70a77d3868162b175456b49d94ab7a7ebebae737", "message": "CB-9534 Refactoring GrpcUmsClient so it can have proper caching. Still need to extract EntitlementService to authorization common or another proper module.", "committedDate": "2020-11-09T14:50:39Z", "type": "forcePushed"}, {"oid": "8cee0414012092cc21accc4414876550b9491c20", "url": "https://github.com/hortonworks/cloudbreak/commit/8cee0414012092cc21accc4414876550b9491c20", "message": "CB-9534 Refactoring GrpcUmsClient so it can have proper caching. Still need to extract EntitlementService to authorization common or another proper module.", "committedDate": "2020-11-10T10:19:16Z", "type": "forcePushed"}, {"oid": "179f8dee11d9bdf53b31cee9e29bb2699b27368b", "url": "https://github.com/hortonworks/cloudbreak/commit/179f8dee11d9bdf53b31cee9e29bb2699b27368b", "message": "CB-9534 Refactoring GrpcUmsClient so it can have proper caching. Still need to extract EntitlementService to authorization common or another proper module.", "committedDate": "2020-11-10T12:18:26Z", "type": "forcePushed"}, {"oid": "c816afbcbf5785826a4c9f5f47bd08b5b0207584", "url": "https://github.com/hortonworks/cloudbreak/commit/c816afbcbf5785826a4c9f5f47bd08b5b0207584", "message": "CB-9534 Refactoring GrpcUmsClient so it can have proper caching. Still need to extract EntitlementService to authorization common or another proper module.", "committedDate": "2020-11-12T15:24:21Z", "type": "forcePushed"}, {"oid": "369c9acd33cd3dc4f7c42857d34b0ddce23cfa6d", "url": "https://github.com/hortonworks/cloudbreak/commit/369c9acd33cd3dc4f7c42857d34b0ddce23cfa6d", "message": "CB-9534 Refactoring GrpcUmsClient so it can have proper caching. Still need to extract EntitlementService to authorization common or another proper module.", "committedDate": "2020-11-13T10:38:35Z", "type": "forcePushed"}, {"oid": "1597bd324f786d7e38f63c520171cbc5b55f734c", "url": "https://github.com/hortonworks/cloudbreak/commit/1597bd324f786d7e38f63c520171cbc5b55f734c", "message": "CB-9534 Refactoring GrpcUmsClient so it can have proper caching. Still need to extract EntitlementService to authorization common or another proper module.", "committedDate": "2020-11-13T11:55:57Z", "type": "forcePushed"}, {"oid": "f560173dc345307af766e7c43c24152b9048114d", "url": "https://github.com/hortonworks/cloudbreak/commit/f560173dc345307af766e7c43c24152b9048114d", "message": "CB-9534 Refactoring GrpcUmsClient so it can have proper caching. Still need to extract EntitlementService to authorization common or another proper module.", "committedDate": "2020-11-13T14:22:18Z", "type": "forcePushed"}, {"oid": "7b5a053d728069ffbbe4bef0b20e6f0a164cb4a0", "url": "https://github.com/hortonworks/cloudbreak/commit/7b5a053d728069ffbbe4bef0b20e6f0a164cb4a0", "message": "CB-9534 Refactoring GrpcUmsClient so it can have proper caching. Still need to extract EntitlementService to authorization common or another proper module.", "committedDate": "2020-11-13T14:46:27Z", "type": "forcePushed"}, {"oid": "4afc6015331360d4b287891f8910803b2bc3c4bc", "url": "https://github.com/hortonworks/cloudbreak/commit/4afc6015331360d4b287891f8910803b2bc3c4bc", "message": "CB-9534 Refactoring GrpcUmsClient so it can have proper caching. Still need to extract EntitlementService to authorization common or another proper module.", "committedDate": "2020-11-16T10:51:20Z", "type": "forcePushed"}, {"oid": "59e310bbafa8f6d037815a8cab3e998049ab6640", "url": "https://github.com/hortonworks/cloudbreak/commit/59e310bbafa8f6d037815a8cab3e998049ab6640", "message": "CB-9534 Refactoring GrpcUmsClient so it can have proper caching. Still need to extract EntitlementService to authorization common or another proper module.", "committedDate": "2020-11-16T16:37:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIwOTg5OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9388#discussion_r525209899", "bodyText": "Is it intentional that you want to use same cache as used for hasRights ?", "author": "horadla23", "createdAt": "2020-11-17T14:46:06Z", "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "diffHunk": "@@ -403,32 +398,61 @@ public Account getAccountDetails(String actorCrn, String accountId, Optional<Str\n         }\n     }\n \n-    @Cacheable(cacheNames = \"umsUserRoleAssigmentsCache\", key = \"{ #actorCrn, #userCrn }\")\n+    @Cacheable(cacheNames = \"umsUserRoleAssigmentsCache\", key = \"{ #userCrn }\")\n     public List<UserManagementProto.ResourceAssignment> listResourceRoleAssigments(String actorCrn, String userCrn, Optional<String> requestId) {\n         try (ManagedChannelWrapper channelWrapper = makeWrapper()) {\n             UmsClient client = makeClient(channelWrapper.getChannel(), actorCrn);\n             return client.listAssigmentsOfUser(requestId.orElse(UUID.randomUUID().toString()), userCrn);\n         }\n     }\n \n-    //\"#value.concat(#fieldId).concat(#projectId)\"\n-//    @Cacheable(cacheNames = \"umsUserRightsCache\", key = \"{ #actorCrn, #userCrn, #right, #resource }\")\n-    @Cacheable(cacheNames = \"umsUserRightsCache\", key = \"{ #userCrn, #right, #resource }\")\n-    public boolean checkRight(String actorCrn, String userCrn, String right, String resource, Optional<String> requestId) {\n+    @Cacheable(cacheNames = \"umsUserHasRightsForResourceCache\", key = \"{ #userCrn, #right, #resource }\")", "originalCommit": "59e310bbafa8f6d037815a8cab3e998049ab6640", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIxNzQ3Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9388#discussion_r525217473", "bodyText": "is there a meaningful difference on the ask towards ums from a caching point of view?", "author": "lnardai", "createdAt": "2020-11-17T14:55:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIwOTg5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIzMzg4OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9388#discussion_r525233888", "bodyText": "i guess not, only the name of the cache deceived me, but it's not important", "author": "horadla23", "createdAt": "2020-11-17T15:14:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIwOTg5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "01cc31e62f9d1cc9fa13568bc8049b6da812eca9", "chunk": "diff --git a/auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java b/auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java\nindex 30cc671e16..19dcfa02a5 100644\n--- a/auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java\n+++ b/auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java\n\n@@ -391,19 +363,15 @@ public class GrpcUmsClient {\n      */\n     @Cacheable(cacheNames = \"umsAccountCache\", key = \"{ #accountId }\")\n     public Account getAccountDetails(String actorCrn, String accountId, Optional<String> requestId) {\n-        try (ManagedChannelWrapper channelWrapper = makeWrapper()) {\n-            UmsClient client = makeClient(channelWrapper.getChannel(), actorCrn);\n-            LOGGER.debug(\"Getting information for account ID {} using request ID {}\", accountId, requestId);\n-            return client.getAccount(requestId.orElse(UUID.randomUUID().toString()), accountId);\n-        }\n+        UmsClient client = makeClient(channelWrapper.getChannel(), actorCrn);\n+        LOGGER.debug(\"Getting information for account ID {} using request ID {}\", accountId, requestId);\n+        return client.getAccount(RequestIdUtil.getOrGenerate(requestId), accountId);\n     }\n \n-    @Cacheable(cacheNames = \"umsUserRoleAssigmentsCache\", key = \"{ #userCrn }\")\n-    public List<UserManagementProto.ResourceAssignment> listResourceRoleAssigments(String actorCrn, String userCrn, Optional<String> requestId) {\n-        try (ManagedChannelWrapper channelWrapper = makeWrapper()) {\n-            UmsClient client = makeClient(channelWrapper.getChannel(), actorCrn);\n-            return client.listAssigmentsOfUser(requestId.orElse(UUID.randomUUID().toString()), userCrn);\n-        }\n+    @Cacheable(cacheNames = \"umsUserRoleAssigmentsCache\", key = \"{ #actorCrn, #userCrn }\")\n+    public List<ResourceAssignment> listResourceRoleAssigments(String actorCrn, String userCrn, Optional<String> requestId) {\n+        UmsClient client = makeClient(channelWrapper.getChannel(), actorCrn);\n+        return client.listAssigmentsOfUser(RequestIdUtil.getOrGenerate(requestId), userCrn);\n     }\n \n     @Cacheable(cacheNames = \"umsUserHasRightsForResourceCache\", key = \"{ #userCrn, #right, #resource }\")\n"}}, {"oid": "01cc31e62f9d1cc9fa13568bc8049b6da812eca9", "url": "https://github.com/hortonworks/cloudbreak/commit/01cc31e62f9d1cc9fa13568bc8049b6da812eca9", "message": "CB-9534 Refactoring GrpcUmsClient so it can have proper caching. Still need to extract EntitlementService to authorization common or another proper module.", "committedDate": "2020-11-26T10:05:50Z", "type": "forcePushed"}, {"oid": "8332dad1995e646bad33d16a5ff1bbe825af6652", "url": "https://github.com/hortonworks/cloudbreak/commit/8332dad1995e646bad33d16a5ff1bbe825af6652", "message": "CB-9534 Refactoring GrpcUmsClient so it can have proper caching. Still need to extract EntitlementService to authorization common or another proper module.", "committedDate": "2020-11-26T12:44:50Z", "type": "forcePushed"}, {"oid": "ec2daa5753ae8d79ad8c6d06813fc3d91fd03c54", "url": "https://github.com/hortonworks/cloudbreak/commit/ec2daa5753ae8d79ad8c6d06813fc3d91fd03c54", "message": "CB-9534 Refactoring GrpcUmsClient so it can have proper caching. Still need to extract EntitlementService to authorization common or another proper module.", "committedDate": "2020-11-30T15:31:06Z", "type": "forcePushed"}, {"oid": "9977b2a7ef2e35a22099adc21290d8f5b6bb543d", "url": "https://github.com/hortonworks/cloudbreak/commit/9977b2a7ef2e35a22099adc21290d8f5b6bb543d", "message": "CB-9534 Refactoring GrpcUmsClient so it can have proper caching. Moved out EntitlementChecking from GrpcClient. Refactored IsEntitlementEnabled to cache on account level. Refactored unit tests.", "committedDate": "2020-12-01T12:47:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk3MDgxOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9388#discussion_r533970818", "bodyText": "i haven't noticed it, but int test brought out this double ##\n\"statusReason\":\"Error message: \\\"Internal server error: Expression [{ ##actorCrn, userCrn, #right, #resource }] @3: EL1043E: Unexpected token. Expected 'identifier' but was 'hash(#)'\\\"\"", "author": "horadla23", "createdAt": "2020-12-02T08:15:05Z", "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "diffHunk": "@@ -379,24 +374,53 @@ public Account getAccountDetails(String actorCrn, String accountId, Optional<Str\n         return client.listAssigmentsOfUser(RequestIdUtil.getOrGenerate(requestId), userCrn);\n     }\n \n-    //\"#value.concat(#fieldId).concat(#projectId)\"\n-//    @Cacheable(cacheNames = \"umsUserRightsCache\", key = \"{ #actorCrn, #userCrn, #right, #resource }\")\n-    @Cacheable(cacheNames = \"umsUserRightsCache\", key = \"{ #userCrn, #right, #resource }\")\n-    public boolean checkRight(String actorCrn, String userCrn, String right, String resource, Optional<String> requestId) {\n+    @Cacheable(cacheNames = \"umsUserHasRightsForResourceCache\", key = \"{ #actorCrn, #userCrn, #right, #resource }\")\n+    public boolean checkResourceRight(String actorCrn, String userCrn, String right, String resource, Optional<String> requestId) {\n         if (InternalCrnBuilder.isInternalCrn(userCrn)) {\n             LOGGER.info(\"InternalCrn, allow right {} for user {}!\", right, userCrn);\n             return true;\n         }\n-        if (!isEntitledAndLogResult(actorCrn, ThreadBasedUserCrnProvider.getAccountId(), Entitlement.CB_AUTHZ_POWER_USERS)) {\n-            if (RightUtil.isReadRight(right)) {\n-                LOGGER.info(\"In account {} authorization related entitlement disabled, thus skipping permission check!!\",\n-                        ThreadBasedUserCrnProvider.getAccountId());\n-                return true;\n-            } else {\n-                // if legacy authz then we will check permission on account level\n-                resource = null;\n-            }\n+        return makeCheckRightCall(actorCrn, userCrn, right, resource, requestId);\n+    }\n+\n+    @Cacheable(cacheNames = \"umsUserHasRightsForResourceCache\", key = \"{ ##actorCrn, userCrn, #right, #resource }\")", "originalCommit": "9977b2a7ef2e35a22099adc21290d8f5b6bb543d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDExODQ3Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/9388#discussion_r534118476", "bodyText": "Thank you!", "author": "lnardai", "createdAt": "2020-12-02T12:09:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk3MDgxOA=="}], "type": "inlineReview", "revised_code": {"commit": "dca1f048aaaaeab40bfc8345fc77369b54fa73c8", "chunk": "diff --git a/auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java b/auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java\nindex 9b5a9ed46a..d2246a75e2 100644\n--- a/auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java\n+++ b/auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java\n\n@@ -383,7 +383,7 @@ public class GrpcUmsClient {\n         return makeCheckRightCall(actorCrn, userCrn, right, resource, requestId);\n     }\n \n-    @Cacheable(cacheNames = \"umsUserHasRightsForResourceCache\", key = \"{ ##actorCrn, userCrn, #right, #resource }\")\n+    @Cacheable(cacheNames = \"umsUserHasRightsForResourceCache\", key = \"{ #actorCrn, userCrn, #right, #resource }\")\n     public boolean checkResourceRightLegacy(String actorCrn, String userCrn, String right, String resource, Optional<String> requestId) {\n         if (InternalCrnBuilder.isInternalCrn(userCrn)) {\n             LOGGER.info(\"InternalCrn, allow right {} for user {}!\", right, userCrn);\n"}}, {"oid": "dca1f048aaaaeab40bfc8345fc77369b54fa73c8", "url": "https://github.com/hortonworks/cloudbreak/commit/dca1f048aaaaeab40bfc8345fc77369b54fa73c8", "message": "CB-9534 Refactoring GrpcUmsClient so it can have proper caching. Moved out EntitlementChecking from GrpcClient. Refactored IsEntitlementEnabled to cache on account level. Refactored unit tests.", "committedDate": "2020-12-02T09:43:53Z", "type": "forcePushed"}, {"oid": "f81e060cf1a7bda19d1bf720c8e6f118288fe320", "url": "https://github.com/hortonworks/cloudbreak/commit/f81e060cf1a7bda19d1bf720c8e6f118288fe320", "message": "CB-9534 Refactoring GrpcUmsClient so it can have proper caching. Still need to extract EntitlementService to authorization common or another proper module.", "committedDate": "2020-12-02T14:15:05Z", "type": "commit"}, {"oid": "94e56742e017e117b9577761c2516e9b0c6f167e", "url": "https://github.com/hortonworks/cloudbreak/commit/94e56742e017e117b9577761c2516e9b0c6f167e", "message": "CB-9534 Refactoring GrpcUmsClient so it can have proper caching. Moved out EntitlementChecking from GrpcClient. Refactored IsEntitlementEnabled to cache on account level. Refactored unit tests.", "committedDate": "2020-12-03T06:24:22Z", "type": "commit"}, {"oid": "94e56742e017e117b9577761c2516e9b0c6f167e", "url": "https://github.com/hortonworks/cloudbreak/commit/94e56742e017e117b9577761c2516e9b0c6f167e", "message": "CB-9534 Refactoring GrpcUmsClient so it can have proper caching. Moved out EntitlementChecking from GrpcClient. Refactored IsEntitlementEnabled to cache on account level. Refactored unit tests.", "committedDate": "2020-12-03T06:24:22Z", "type": "forcePushed"}]}