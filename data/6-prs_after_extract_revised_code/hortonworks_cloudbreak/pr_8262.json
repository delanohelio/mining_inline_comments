{"pr_number": 8262, "pr_title": "CB-7147 - [ASRG] Refactor termination resource collection", "pr_createdAt": "2020-06-11T18:55:06Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8262", "timeline": [{"oid": "f24f9e7fe91c08c3ffa0995b2825fca4d2d881e5", "url": "https://github.com/hortonworks/cloudbreak/commit/f24f9e7fe91c08c3ffa0995b2825fca4d2d881e5", "message": "CB-7147 - [ASRG] Refactor termination resource collection and E2E test", "committedDate": "2020-06-11T19:10:19Z", "type": "forcePushed"}, {"oid": "acfa07fc0612211936da040dba47fd3144efd01f", "url": "https://github.com/hortonworks/cloudbreak/commit/acfa07fc0612211936da040dba47fd3144efd01f", "message": "CB-7147 - [ASRG] Refactor termination resource collection and E2E test", "committedDate": "2020-06-11T19:42:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE1NDQ5Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8262#discussion_r440154492", "bodyText": "This part could maybe go into AzureUtils or even AzureClient as findNetworkInterfacesByName", "author": "gergopapi2", "createdAt": "2020-06-15T12:54:52Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/task/networkinterface/NetworkInterfaceDetachChecker.java", "diffHunk": "@@ -38,26 +35,20 @@ public NetworkInterfaceDetachChecker(AuthenticatedContext authenticatedContext,\n     @Override\n     protected Boolean doCall() {\n         LOGGER.info(\"Waiting for network interfaces to be detached: {}\", attachedNetworkInterfaces);\n-        List<Completable> networkInterfacesCompletables = new ArrayList<>();\n-        List<NetworkInterface> networkInterfaces = new ArrayList<>();\n-        List<String> failedToRetriveNetworkInterfaces = new ArrayList<>();\n-        for (String networkInterfaceName : attachedNetworkInterfaces) {\n-            networkInterfacesCompletables.add(Completable.fromObservable(\n-                    context.getAzureClient().getNetworkInterfaceAsync(context.getResourceGroupName(), networkInterfaceName)\n-                            .doOnError(throwable -> {\n-                                LOGGER.error(\"Error happened on azure network interface retrieval: {}\", networkInterfaceName, throwable);\n-                                failedToRetriveNetworkInterfaces.add(networkInterfaceName);\n-                            })\n-                            .doOnNext(ni -> networkInterfaces.add(ni))\n-                            .subscribeOn(Schedulers.io())));\n-        }\n-        Completable.merge(networkInterfacesCompletables).await();\n-        if (!failedToRetriveNetworkInterfaces.isEmpty()) {\n-            LOGGER.error(\"Can't retrieve the following network interfaces: {}\", failedToRetriveNetworkInterfaces);\n-            throw new CloudbreakServiceException(\"Can't retrieve the following network interfaces: \" + failedToRetriveNetworkInterfaces);\n-        }\n-        attachedNetworkInterfaces = networkInterfaces.stream()\n-                .filter(ni -> ni.virtualMachineId() != null).map(NetworkInterface::name).collect(Collectors.toSet());\n+\n+        PagedList<NetworkInterface> networkInterfaces = context.getAzureClient().getNetworkInterfaces(context.getResourceGroupName());\n+        networkInterfaces.loadAll();\n+        List<NetworkInterface> filteredNetworkInterfaces = networkInterfaces\n+                .stream()\n+                .filter(networkInterface -> attachedNetworkInterfaces\n+                        .contains(networkInterface.name()))\n+                .collect(Collectors.toList());", "originalCommit": "acfa07fc0612211936da040dba47fd3144efd01f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5738e49c59874c5f4f03f4f3529e7cbe81a18097", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/task/networkinterface/NetworkInterfaceDetachChecker.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/task/networkinterface/NetworkInterfaceDetachChecker.java\nindex ee4016e817..921a5269bc 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/task/networkinterface/NetworkInterfaceDetachChecker.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/task/networkinterface/NetworkInterfaceDetachChecker.java\n\n@@ -36,13 +36,9 @@ public class NetworkInterfaceDetachChecker extends PollBooleanStateTask {\n     protected Boolean doCall() {\n         LOGGER.info(\"Waiting for network interfaces to be detached: {}\", attachedNetworkInterfaces);\n \n-        PagedList<NetworkInterface> networkInterfaces = context.getAzureClient().getNetworkInterfaces(context.getResourceGroupName());\n-        networkInterfaces.loadAll();\n-        List<NetworkInterface> filteredNetworkInterfaces = networkInterfaces\n-                .stream()\n-                .filter(networkInterface -> attachedNetworkInterfaces\n-                        .contains(networkInterface.name()))\n-                .collect(Collectors.toList());\n+        AzureClient azureClient = context.getAzureClient();\n+        String resourceGroupName = context.getResourceGroupName();\n+        List<NetworkInterface> filteredNetworkInterfaces = azureClient.getNetworkInterfaceListByNames(resourceGroupName, attachedNetworkInterfaces);\n \n         attachedNetworkInterfaces = filteredNetworkInterfaces\n                 .stream()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1MjM2MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8262#discussion_r440252361", "bodyText": "I would move this to a separate method", "author": "gergopapi2", "createdAt": "2020-06-15T15:17:35Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureTerminationHelperService.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.management.compute.VirtualMachine;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureComputeResourceService;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudInstance;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResourceStatus;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudStack;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureTerminationHelperService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureTerminationHelperService.class);\n+\n+    @Inject\n+    private AzureResourceGroupMetadataProvider azureResourceGroupMetadataProvider;\n+\n+    @Inject\n+    private AzureVirtualMachineService azureVirtualMachineService;\n+\n+    @Inject\n+    private AzureUtils azureUtils;\n+\n+    @Inject\n+    private AzureComputeResourceService azureComputeResourceService;\n+\n+    @Inject\n+    private AzureResourceConnector azureResourceConnector;\n+\n+    @Inject\n+    private AzureCloudResourceService azureCloudResourceService;\n+\n+    @Inject\n+    private PersistenceNotifier resourceNotifier;\n+\n+    public List<CloudResourceStatus> downscale(AuthenticatedContext ac, CloudStack stack, List<CloudInstance> vms,\n+            List<CloudResource> allResources, List<CloudResource> resourcesToRemove) {\n+        List<CloudResource> networkResources = azureCloudResourceService.getNetworkResources(allResources);\n+        return terminateResources(ac, stack, vms, resourcesToRemove, networkResources, false);\n+    }\n+\n+    public List<CloudResourceStatus> terminate(AuthenticatedContext ac, CloudStack stack, List<CloudResource> resourcesToRemove) {\n+        List<CloudInstance> vms = new ArrayList<>();\n+        stack.getGroups().forEach(group -> vms.addAll(group.getInstances()));\n+        List<CloudResource> networkResources = azureCloudResourceService.getNetworkResources(resourcesToRemove);\n+        return terminateResources(ac, stack, vms, resourcesToRemove, networkResources, true);\n+    }\n+\n+    private List<CloudResourceStatus> terminateResources(AuthenticatedContext ac, CloudStack stack, List<CloudInstance> vms,\n+            List<CloudResource> resourcesToRemove, List<CloudResource> networkResources, boolean deleteWholeDeployment) {\n+        LOGGER.debug(\"Terminating the following resources: {}\", resourcesToRemove);\n+        LOGGER.debug(\"Operation is: {}\", deleteWholeDeployment ? \"terminate\" : \"downscale\");\n+        AzureClient client = ac.getParameter(AzureClient.class);\n+\n+        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(ac.getCloudContext(), stack);\n+\n+        Map<String, VirtualMachine> vmsFromAzure = azureVirtualMachineService.getVmsFromAzureAndFillStatuses(ac, vms, new ArrayList<>());\n+        List<CloudInstance> cloudInstancesSyncedWithAzure = vms.stream()\n+                .filter(cloudInstance -> vmsFromAzure.containsKey(cloudInstance.getInstanceId()))\n+                .collect(Collectors.toList());\n+        azureUtils.deleteInstances(ac, cloudInstancesSyncedWithAzure);\n+        deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_INSTANCE);\n+\n+        List<String> networkInterfaceNames = getResourceNamesByResourceType(resourcesToRemove, ResourceType.AZURE_NETWORK_INTERFACE);\n+        azureUtils.waitForDetachNetworkInterfaces(ac, client, resourceGroupName, networkInterfaceNames);\n+        azureUtils.deleteNetworkInterfaces(client, resourceGroupName, networkInterfaceNames);\n+        deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_INSTANCE);\n+\n+\n+        List<String> publicAddressNames = getResourceNamesByResourceType(resourcesToRemove, ResourceType.AZURE_PUBLIC_IP);\n+        azureUtils.deletePublicIps(client, resourceGroupName, publicAddressNames);\n+        deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_PUBLIC_IP);\n+\n+        List<String> managedDiskIds = getResourceIdsByResourceType(resourcesToRemove, ResourceType.AZURE_DISK);\n+        azureUtils.deleteManagedDisks(client, managedDiskIds);\n+        deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_DISK);\n+\n+        try {\n+            List<CloudResource> volumeSetsToDelete =\n+                    resourcesToRemove.stream()\n+                            .filter(cloudResource -> cloudResource.getType().equals(ResourceType.AZURE_VOLUMESET))\n+                            .collect(Collectors.toList());\n+            azureComputeResourceService.deleteComputeResources(ac, stack, volumeSetsToDelete, networkResources);\n+        } catch (CloudConnectorException e) {\n+            throw e;\n+        } catch (RuntimeException e) {\n+            throw new CloudConnectorException(String.format(\"Failed to delete resources during downscale: %s\", resourceGroupName), e);\n+        }", "originalCommit": "acfa07fc0612211936da040dba47fd3144efd01f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5738e49c59874c5f4f03f4f3529e7cbe81a18097", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureTerminationHelperService.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureTerminationHelperService.java\nindex 276f930b80..da7cd83a94 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureTerminationHelperService.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureTerminationHelperService.java\n\n@@ -92,17 +92,7 @@ public class AzureTerminationHelperService {\n         azureUtils.deleteManagedDisks(client, managedDiskIds);\n         deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_DISK);\n \n-        try {\n-            List<CloudResource> volumeSetsToDelete =\n-                    resourcesToRemove.stream()\n-                            .filter(cloudResource -> cloudResource.getType().equals(ResourceType.AZURE_VOLUMESET))\n-                            .collect(Collectors.toList());\n-            azureComputeResourceService.deleteComputeResources(ac, stack, volumeSetsToDelete, networkResources);\n-        } catch (CloudConnectorException e) {\n-            throw e;\n-        } catch (RuntimeException e) {\n-            throw new CloudConnectorException(String.format(\"Failed to delete resources during downscale: %s\", resourceGroupName), e);\n-        }\n+        deleteVolumeSets(ac, stack, resourcesToRemove, networkResources, resourceGroupName);\n \n         if (deleteWholeDeployment) {\n             List<String> availabiltySetNames = getResourceNamesByResourceType(resourcesToRemove, ResourceType.AZURE_AVAILABILITY_SET);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYzODM1Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8262#discussion_r440638357", "bodyText": "An Observable comes back from the Collection deletion, that is, one String in exchange for a collection of Strings. What is the output of the log line, what is disk?", "author": "gergopapi2", "createdAt": "2020-06-16T07:22:49Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java", "diffHunk": "@@ -401,4 +433,21 @@ public void deleteManagedDisks(AzureClient azureClient, Collection<String> manag\n                     resourceType, resourceId, errorCode, cloudError.message(), details));\n         }\n     }\n+\n+    @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n+    public void deleteManagedDisks(AzureClient azureClient, Collection<String> managedDiskIds) {\n+        if (CollectionUtils.isNotEmpty(managedDiskIds)) {\n+            LOGGER.info(\"Delete managed disks with id-s: {}\", managedDiskIds);\n+\n+            Observable<String> deletionObservable = azureClient.deleteManagedDiskAsync(managedDiskIds)\n+                    .doOnError(throwable -> {\n+                        LOGGER.error(\"Error happened during the deletion of the managed disks \", throwable);\n+                        throw new CloudbreakServiceException(\"Can't delete all managed disks: \", throwable);\n+                    })\n+                    .doOnCompleted(() -> LOGGER.debug(\"Delete managed disks completed successfully\"))\n+                    .subscribeOn(Schedulers.io());\n+            deletionObservable.subscribe(disk -> LOGGER.debug(\"Deleting {}\", disk));", "originalCommit": "acfa07fc0612211936da040dba47fd3144efd01f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxOTEyMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8262#discussion_r440819123", "bodyText": "From SupportsBatchDeletion interface: \"@return a representation of the deferred computation of this call returning the resource ID of each successfully deleted resource\"", "author": "pdarvasi", "createdAt": "2020-06-16T12:43:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYzODM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5738e49c59874c5f4f03f4f3529e7cbe81a18097", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java\nindex fadad9136c..3877cdf3aa 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java\n\n@@ -450,4 +456,13 @@ public class AzureUtils {\n             deletionObservable.toCompletable().await();\n         }\n     }\n+\n+    public void checkResourceGroupExistence(AzureClient client, String resourceGroupName) {\n+        retryService.testWith2SecDelayMax5Times(() -> {\n+            if (!client.resourceGroupExists(resourceGroupName)) {\n+                throw new Retry.ActionFailedException(\"Resource group not exists\");\n+            }\n+            return true;\n+        });\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYzOTc2Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8262#discussion_r440639767", "bodyText": "If possible, I would get rid of the double negation.", "author": "gergopapi2", "createdAt": "2020-06-16T07:25:29Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureVirtualMachineService.java", "diffHunk": "@@ -76,8 +76,15 @@ public void refreshInstanceViews(Map<String, VirtualMachine> virtualMachines) {\n     }\n \n     private boolean hasMissingVm(PagedList<VirtualMachine> virtualMachines, Collection<String> privateInstanceIds) {\n-        Set<String> virtualMachineNames = virtualMachines.stream().map(VirtualMachine::name).collect(Collectors.toSet());\n-        return !virtualMachineNames.containsAll(privateInstanceIds);\n+        Set<String> virtualMachineNames = virtualMachines\n+                .stream()\n+                .map(VirtualMachine::name)\n+                .collect(Collectors.toSet());\n+        boolean hasMissingVm = !virtualMachineNames.containsAll(privateInstanceIds);\n+        if (hasMissingVm) {\n+            LOGGER.info(\"Fetched VM id-s ({}) do not contain one of the following id-s: {}\", virtualMachineNames, privateInstanceIds);\n+        }\n+        return !hasMissingVm;", "originalCommit": "acfa07fc0612211936da040dba47fd3144efd01f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyNzcxNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8262#discussion_r440827717", "bodyText": "Nice catch!", "author": "pdarvasi", "createdAt": "2020-06-16T12:56:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYzOTc2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5738e49c59874c5f4f03f4f3529e7cbe81a18097", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureVirtualMachineService.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureVirtualMachineService.java\nindex 2df217e231..f7fd010752 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureVirtualMachineService.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureVirtualMachineService.java\n\n@@ -84,7 +84,7 @@ public class AzureVirtualMachineService {\n         if (hasMissingVm) {\n             LOGGER.info(\"Fetched VM id-s ({}) do not contain one of the following id-s: {}\", virtualMachineNames, privateInstanceIds);\n         }\n-        return !hasMissingVm;\n+        return hasMissingVm;\n     }\n \n     private Map<String, VirtualMachine> collectVirtualMachinesByName(Collection<String> privateInstanceIds, PagedList<VirtualMachine> virtualMachines) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNDA3Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8262#discussion_r440724073", "bodyText": "This part could go into AzureUtils.", "author": "gergopapi2", "createdAt": "2020-06-16T09:44:38Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureResourceConnector.java", "diffHunk": "@@ -236,35 +210,35 @@ private void checkTemplateDeployment(List<CloudResourceStatus> result, AzureClie\n     public List<CloudResourceStatus> terminate(AuthenticatedContext ac, CloudStack stack, List<CloudResource> resources) {\n         AzureClient client = ac.getParameter(AzureClient.class);\n         String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(ac.getCloudContext(), stack);\n-        try {\n+        Boolean singleResourceGroup = azureResourceGroupMetadataProvider.useSingleResourceGroup(stack);\n+\n+        if (singleResourceGroup) {\n+            List<CloudResource> cloudResourceList = collectResourcesToRemove(ac, stack, resources, azureUtils.getInstanceList(stack));\n+            resources.addAll(cloudResourceList);\n+            azureTerminationHelperService.terminate(ac, stack, resources);\n+            return check(ac, Collections.emptyList());\n+        } else {\n             try {\n-                retryService.testWith2SecDelayMax5Times(() -> {\n-                    if (!client.resourceGroupExists(resourceGroupName)) {\n-                        throw new ActionFailedException(\"Resource group not exists\");\n-                    }\n-                    return true;\n-                });\n-                client.deleteResourceGroup(resourceGroupName);\n-            } catch (ActionFailedException ignored) {\n-                LOGGER.debug(\"Resource group not found with name: {}\", resourceGroupName);\n-            }\n-            if (azureStorage.isPersistentStorage(azureStorage.getPersistentStorageName(stack))) {\n-                CloudContext cloudCtx = ac.getCloudContext();\n-                AzureCredentialView azureCredentialView = new AzureCredentialView(ac.getCloudCredential());\n-\n-                String imageStorageName = azureStorage.getImageStorageName(azureCredentialView, cloudCtx, stack);\n-                String imageResourceGroupName = azureResourceGroupMetadataProvider.getImageResourceGroupName(cloudCtx, stack);\n-                String diskContainer = azureStorage.getDiskContainerName(cloudCtx);\n-                deleteContainer(client, imageResourceGroupName, imageStorageName, diskContainer);\n-            }\n-        } catch (CloudException e) {\n-            if (e.response().code() != AzureConstants.NOT_FOUND) {\n-                throw new CloudConnectorException(String.format(\"Could not delete resource group: %s\", resourceGroupName), e);\n-            } else {\n-                return check(ac, Collections.emptyList());\n+                try {\n+                    retryService.testWith2SecDelayMax5Times(() -> {\n+                        if (!client.resourceGroupExists(resourceGroupName)) {\n+                            throw new ActionFailedException(\"Resource group not exists\");\n+                        }\n+                        return true;\n+                    });", "originalCommit": "acfa07fc0612211936da040dba47fd3144efd01f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5738e49c59874c5f4f03f4f3529e7cbe81a18097", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureResourceConnector.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureResourceConnector.java\nindex 8b4be1e92a..8b17b191db 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureResourceConnector.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureResourceConnector.java\n\n@@ -220,12 +202,7 @@ public class AzureResourceConnector extends AbstractResourceConnector {\n         } else {\n             try {\n                 try {\n-                    retryService.testWith2SecDelayMax5Times(() -> {\n-                        if (!client.resourceGroupExists(resourceGroupName)) {\n-                            throw new ActionFailedException(\"Resource group not exists\");\n-                        }\n-                        return true;\n-                    });\n+                    azureUtils.checkResourceGroupExistence(client, resourceGroupName);\n                     client.deleteResourceGroup(resourceGroupName);\n                 } catch (ActionFailedException ignored) {\n                     LOGGER.debug(\"Resource group not found with name: {}\", resourceGroupName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNzQ4OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8262#discussion_r440727489", "bodyText": "StartDatabaseServer and StopDatabaseServer are identical to the base implementation (NotImplemented), can be deleted.", "author": "gergopapi2", "createdAt": "2020-06-16T09:50:22Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureResourceConnector.java", "diffHunk": "@@ -45,32 +34,22 @@\n import com.sequenceiq.cloudbreak.cloud.model.CloudStack;\n import com.sequenceiq.cloudbreak.cloud.model.DatabaseStack;\n import com.sequenceiq.cloudbreak.cloud.model.ExternalDatabaseStatus;\n-import com.sequenceiq.cloudbreak.cloud.model.Group;\n import com.sequenceiq.cloudbreak.cloud.model.ResourceStatus;\n import com.sequenceiq.cloudbreak.cloud.model.TlsInfo;\n import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.template.AbstractResourceConnector;\n import com.sequenceiq.cloudbreak.service.Retry;\n import com.sequenceiq.cloudbreak.service.Retry.ActionFailedException;\n import com.sequenceiq.common.api.type.AdjustmentType;\n import com.sequenceiq.common.api.type.ResourceType;\n \n @Service\n-public class AzureResourceConnector implements ResourceConnector<Map<String, Map<String, Object>>> {\n+public class AzureResourceConnector extends AbstractResourceConnector {", "originalCommit": "acfa07fc0612211936da040dba47fd3144efd01f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5738e49c59874c5f4f03f4f3529e7cbe81a18097", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureResourceConnector.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureResourceConnector.java\nindex 8b4be1e92a..8b17b191db 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureResourceConnector.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureResourceConnector.java\n\n@@ -38,7 +37,6 @@ import com.sequenceiq.cloudbreak.cloud.model.ResourceStatus;\n import com.sequenceiq.cloudbreak.cloud.model.TlsInfo;\n import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n import com.sequenceiq.cloudbreak.cloud.template.AbstractResourceConnector;\n-import com.sequenceiq.cloudbreak.service.Retry;\n import com.sequenceiq.cloudbreak.service.Retry.ActionFailedException;\n import com.sequenceiq.common.api.type.AdjustmentType;\n import com.sequenceiq.common.api.type.ResourceType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyODIzMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8262#discussion_r440728230", "bodyText": "Can be package private.", "author": "gergopapi2", "createdAt": "2020-06-16T09:51:39Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureResourceConnector.java", "diffHunk": "@@ -45,32 +34,22 @@\n import com.sequenceiq.cloudbreak.cloud.model.CloudStack;\n import com.sequenceiq.cloudbreak.cloud.model.DatabaseStack;\n import com.sequenceiq.cloudbreak.cloud.model.ExternalDatabaseStatus;\n-import com.sequenceiq.cloudbreak.cloud.model.Group;\n import com.sequenceiq.cloudbreak.cloud.model.ResourceStatus;\n import com.sequenceiq.cloudbreak.cloud.model.TlsInfo;\n import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.template.AbstractResourceConnector;\n import com.sequenceiq.cloudbreak.service.Retry;\n import com.sequenceiq.cloudbreak.service.Retry.ActionFailedException;\n import com.sequenceiq.common.api.type.AdjustmentType;\n import com.sequenceiq.common.api.type.ResourceType;\n \n @Service\n-public class AzureResourceConnector implements ResourceConnector<Map<String, Map<String, Object>>> {\n+public class AzureResourceConnector extends AbstractResourceConnector {\n \n     public static final String RESOURCE_GROUP_NAME = \"resourceGroupName\";", "originalCommit": "acfa07fc0612211936da040dba47fd3144efd01f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5738e49c59874c5f4f03f4f3529e7cbe81a18097", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureResourceConnector.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureResourceConnector.java\nindex 8b4be1e92a..8b17b191db 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureResourceConnector.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureResourceConnector.java\n\n@@ -38,7 +37,6 @@ import com.sequenceiq.cloudbreak.cloud.model.ResourceStatus;\n import com.sequenceiq.cloudbreak.cloud.model.TlsInfo;\n import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n import com.sequenceiq.cloudbreak.cloud.template.AbstractResourceConnector;\n-import com.sequenceiq.cloudbreak.service.Retry;\n import com.sequenceiq.cloudbreak.service.Retry.ActionFailedException;\n import com.sequenceiq.common.api.type.AdjustmentType;\n import com.sequenceiq.common.api.type.ResourceType;\n"}}, {"oid": "5738e49c59874c5f4f03f4f3529e7cbe81a18097", "url": "https://github.com/hortonworks/cloudbreak/commit/5738e49c59874c5f4f03f4f3529e7cbe81a18097", "message": "CB-7147 - [ASRG] Refactor termination resource collection and E2E test", "committedDate": "2020-06-16T13:23:48Z", "type": "forcePushed"}, {"oid": "fc8a642287e71044eeab608f5029f7a36d7f7aac", "url": "https://github.com/hortonworks/cloudbreak/commit/fc8a642287e71044eeab608f5029f7a36d7f7aac", "message": "CB-6584 [ASRG] Termination - refactor downscale code", "committedDate": "2020-06-16T14:34:25Z", "type": "commit"}, {"oid": "09ef90c8141f1a19755d5b3ae5bf5ab562b90123", "url": "https://github.com/hortonworks/cloudbreak/commit/09ef90c8141f1a19755d5b3ae5bf5ab562b90123", "message": "CB-7147 - [ASRG] Refactor termination resource collection and E2E test", "committedDate": "2020-06-16T14:34:25Z", "type": "forcePushed"}, {"oid": "c44bc666026877e9a0f681779b7cdfa79c8ee203", "url": "https://github.com/hortonworks/cloudbreak/commit/c44bc666026877e9a0f681779b7cdfa79c8ee203", "message": "CB-7147 - [ASRG] Refactor termination resource collection and E2E test", "committedDate": "2020-06-16T14:45:20Z", "type": "commit"}, {"oid": "c44bc666026877e9a0f681779b7cdfa79c8ee203", "url": "https://github.com/hortonworks/cloudbreak/commit/c44bc666026877e9a0f681779b7cdfa79c8ee203", "message": "CB-7147 - [ASRG] Refactor termination resource collection and E2E test", "committedDate": "2020-06-16T14:45:20Z", "type": "forcePushed"}]}