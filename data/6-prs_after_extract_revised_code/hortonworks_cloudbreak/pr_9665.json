{"pr_number": 9665, "pr_title": "CB-9954\tand CB-9953: back-end cloudbreak change to set up separate bu\u2026", "pr_createdAt": "2020-12-16T16:25:12Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/9665", "timeline": [{"oid": "722043138bef47059aa8adabcdbb825542019939", "url": "https://github.com/hortonworks/cloudbreak/commit/722043138bef47059aa8adabcdbb825542019939", "message": "CB-9954\tand CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads.", "committedDate": "2020-12-16T16:31:22Z", "type": "forcePushed"}, {"oid": "941ba6dc2507b7697d9956fc7874d0c291583a18", "url": "https://github.com/hortonworks/cloudbreak/commit/941ba6dc2507b7697d9956fc7874d0c291583a18", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads.", "committedDate": "2021-01-12T17:08:04Z", "type": "forcePushed"}, {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "url": "https://github.com/hortonworks/cloudbreak/commit/e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads.", "committedDate": "2021-01-13T16:28:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY3OTAwMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557679000", "bodyText": "missing @Valid annotation", "author": "bergerdenes", "createdAt": "2021-01-14T20:28:35Z", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentEditRequest.java", "diffHunk": "@@ -31,6 +32,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private BackupRequest backupRequest;", "originalCommit": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExNTYxNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564115617", "bodyText": "Thanks! updated.", "author": "christmasferret", "createdAt": "2021-01-25T23:36:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY3OTAwMA=="}], "type": "inlineReview", "revised_code": {"commit": "c2ae05b48d10dd86a1eecf6a509da2e358b33f72", "chunk": "diff --git a/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentEditRequest.java b/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentEditRequest.java\nindex 6dcd3c9a87..1a1a5d38fe 100644\n--- a/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentEditRequest.java\n+++ b/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentEditRequest.java\n\n@@ -33,7 +33,7 @@ public class EnvironmentEditRequest {\n     private TelemetryRequest telemetry;\n \n     @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n-    private BackupRequest backupRequest;\n+    private @Valid BackupRequest backupRequest;\n \n     @ApiModelProperty(EnvironmentModelDescription.SECURITY_ACCESS)\n     private @Valid SecurityAccessRequest securityAccess;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDIxMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557680213", "bodyText": "missing @Valid annotation", "author": "bergerdenes", "createdAt": "2021-01-14T20:30:46Z", "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;", "originalCommit": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExNTYzOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564115639", "bodyText": "Thanks! updated.", "author": "christmasferret", "createdAt": "2021-01-25T23:36:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDIxMw=="}], "type": "inlineReview", "revised_code": {"commit": "c2ae05b48d10dd86a1eecf6a509da2e358b33f72", "chunk": "diff --git a/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java b/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java\nindex 8907adb5e2..945909ac4c 100644\n--- a/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java\n+++ b/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java\n\n@@ -2,6 +2,7 @@ package com.sequenceiq.common.api.backup.base;\n \n import java.io.Serializable;\n \n+import javax.validation.Valid;\n import javax.validation.constraints.NotNull;\n \n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDI1NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557680255", "bodyText": "missing @Valid annotation", "author": "bergerdenes", "createdAt": "2021-01-14T20:30:51Z", "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_ADLS_GEN_2_ATTRIBUTES)\n+    private AdlsGen2CloudStorageV1Parameters adlsGen2;", "originalCommit": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExNzEyNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564117126", "bodyText": "I didn't add @Valid for this class as AdlsGen2CloudStorageV1Parameters doesn't have validation inside. Was a copy and pre-exist in LoggingBase.java.", "author": "christmasferret", "createdAt": "2021-01-25T23:40:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDI1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDMzMTUyNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564331524", "bodyText": "we can always make the code better and fix missing things ;)", "author": "bergerdenes", "createdAt": "2021-01-26T08:36:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDI1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTM5NDc1OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r565394758", "bodyText": "I mean AdlsGen2CloudStorageV1Parameters.java doesn't have an annotation that needs to be validated, not like the others that have annotations inside that need validation. I added @Valid to the other classes you are suggesting but just not this one. Thanks!", "author": "christmasferret", "createdAt": "2021-01-27T15:20:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c2ae05b48d10dd86a1eecf6a509da2e358b33f72", "chunk": "diff --git a/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java b/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java\nindex 8907adb5e2..945909ac4c 100644\n--- a/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java\n+++ b/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java\n\n@@ -2,6 +2,7 @@ package com.sequenceiq.common.api.backup.base;\n \n import java.io.Serializable;\n \n+import javax.validation.Valid;\n import javax.validation.constraints.NotNull;\n \n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDMwNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557680304", "bodyText": "missing @Valid annotation", "author": "bergerdenes", "createdAt": "2021-01-14T20:30:57Z", "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_ADLS_GEN_2_ATTRIBUTES)\n+    private AdlsGen2CloudStorageV1Parameters adlsGen2;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_GCS_ATTRIBUTES)\n+    private GcsCloudStorageV1Parameters gcs;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_CLOUDWATCH_ATTRIBUTES)\n+    private BackupCloudwatchParams cloudwatch;", "originalCommit": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExNTcwOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564115709", "bodyText": "Thanks! updated.", "author": "christmasferret", "createdAt": "2021-01-25T23:36:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDMwNA=="}], "type": "inlineReview", "revised_code": {"commit": "c2ae05b48d10dd86a1eecf6a509da2e358b33f72", "chunk": "diff --git a/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java b/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java\nindex 8907adb5e2..945909ac4c 100644\n--- a/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java\n+++ b/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java\n\n@@ -2,6 +2,7 @@ package com.sequenceiq.common.api.backup.base;\n \n import java.io.Serializable;\n \n+import javax.validation.Valid;\n import javax.validation.constraints.NotNull;\n \n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDM0OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557680349", "bodyText": "missing @Valid annotation", "author": "bergerdenes", "createdAt": "2021-01-14T20:31:03Z", "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_ADLS_GEN_2_ATTRIBUTES)\n+    private AdlsGen2CloudStorageV1Parameters adlsGen2;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_GCS_ATTRIBUTES)\n+    private GcsCloudStorageV1Parameters gcs;", "originalCommit": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExNTczMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564115730", "bodyText": "Thanks! updated.", "author": "christmasferret", "createdAt": "2021-01-25T23:36:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDM0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c2ae05b48d10dd86a1eecf6a509da2e358b33f72", "chunk": "diff --git a/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java b/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java\nindex 8907adb5e2..945909ac4c 100644\n--- a/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java\n+++ b/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java\n\n@@ -2,6 +2,7 @@ package com.sequenceiq.common.api.backup.base;\n \n import java.io.Serializable;\n \n+import javax.validation.Valid;\n import javax.validation.constraints.NotNull;\n \n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDQ4OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557680488", "bodyText": "gcs is missing", "author": "bergerdenes", "createdAt": "2021-01-14T20:31:22Z", "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_ADLS_GEN_2_ATTRIBUTES)\n+    private AdlsGen2CloudStorageV1Parameters adlsGen2;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_GCS_ATTRIBUTES)\n+    private GcsCloudStorageV1Parameters gcs;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_CLOUDWATCH_ATTRIBUTES)\n+    private BackupCloudwatchParams cloudwatch;\n+\n+    public String getStorageLocation() {\n+        return storageLocation;\n+    }\n+\n+    public void setStorageLocation(String storageLocation) {\n+        this.storageLocation = storageLocation;\n+    }\n+\n+    public S3CloudStorageV1Parameters getS3() {\n+        return s3;\n+    }\n+\n+    public void setS3(S3CloudStorageV1Parameters s3) {\n+        this.s3 = s3;\n+    }\n+\n+    public AdlsGen2CloudStorageV1Parameters getAdlsGen2() {\n+        return adlsGen2;\n+    }\n+\n+    public void setAdlsGen2(AdlsGen2CloudStorageV1Parameters adlsGen2) {\n+        this.adlsGen2 = adlsGen2;\n+    }\n+\n+    public GcsCloudStorageV1Parameters getGcs() {\n+        return gcs;\n+    }\n+\n+    public void setGcs(GcsCloudStorageV1Parameters gcs) {\n+        this.gcs = gcs;\n+    }\n+\n+    public BackupCloudwatchParams getCloudwatch() {\n+        return cloudwatch;\n+    }\n+\n+    public void setCloudwatch(BackupCloudwatchParams cloudwatch) {\n+        this.cloudwatch = cloudwatch;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"BackupBase{\" +\n+                \"storageLocation='\" + storageLocation + '\\'' +\n+                \", s3=\" + s3 +\n+                \", adlsGen2=\" + adlsGen2 +", "originalCommit": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA4MzkxNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564083917", "bodyText": "Thanks! Added.\nIt was missing in LoggingBase.java as well. It was added in this PR a few weeks ago.\nhttps://github.com/hortonworks/cloudbreak/pull/9684/files", "author": "christmasferret", "createdAt": "2021-01-25T22:22:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDQ4OA=="}], "type": "inlineReview", "revised_code": {"commit": "c2ae05b48d10dd86a1eecf6a509da2e358b33f72", "chunk": "diff --git a/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java b/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java\nindex 8907adb5e2..945909ac4c 100644\n--- a/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java\n+++ b/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java\n\n@@ -2,6 +2,7 @@ package com.sequenceiq.common.api.backup.base;\n \n import java.io.Serializable;\n \n+import javax.validation.Valid;\n import javax.validation.constraints.NotNull;\n \n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MTU5NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557681594", "bodyText": "missing @Valid annotation", "author": "bergerdenes", "createdAt": "2021-01-14T20:33:33Z", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentRequest.java", "diffHunk": "@@ -63,6 +64,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private BackupRequest backupRequest;", "originalCommit": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExODc1Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564118757", "bodyText": "Thanks! updated", "author": "christmasferret", "createdAt": "2021-01-25T23:45:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MTU5NA=="}], "type": "inlineReview", "revised_code": {"commit": "a791d184b3246860f3ad8d01d24b9f1cbb0ff0ab", "chunk": "diff --git a/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentRequest.java b/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentRequest.java\nindex 597b4914de..8b035d98ca 100644\n--- a/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentRequest.java\n+++ b/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentRequest.java\n\n@@ -65,7 +65,7 @@ public class EnvironmentRequest extends EnvironmentBaseRequest implements Creden\n     private TelemetryRequest telemetry;\n \n     @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n-    private BackupRequest backupRequest;\n+    private @Valid BackupRequest backupRequest;\n \n     @Valid\n     @ApiModelProperty(EnvironmentModelDescription.AUTHENTICATION)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MjcyNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557682724", "bodyText": "missing @Valid annotation", "author": "bergerdenes", "createdAt": "2021-01-14T20:35:41Z", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java", "diffHunk": "@@ -53,6 +54,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryResponse telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private BackupResponse backupResponse;", "originalCommit": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExODcxMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564118713", "bodyText": "Thanks! updated", "author": "christmasferret", "createdAt": "2021-01-25T23:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MjcyNA=="}], "type": "inlineReview", "revised_code": {"commit": "a791d184b3246860f3ad8d01d24b9f1cbb0ff0ab", "chunk": "diff --git a/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java b/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java\nindex 3465281d5b..b524db8697 100644\n--- a/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java\n+++ b/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java\n\n@@ -55,7 +57,7 @@ public abstract class EnvironmentBaseResponse implements ResourceCrnAwareApiMode\n     private TelemetryResponse telemetry;\n \n     @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n-    private BackupResponse backupResponse;\n+    private @Valid BackupResponse backupResponse;\n \n     @ApiModelProperty(EnvironmentModelDescription.NETWORK)\n     private EnvironmentNetworkResponse network;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4NjM0OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557686349", "bodyText": "missing @Valid annotation", "author": "bergerdenes", "createdAt": "2021-01-14T20:42:40Z", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/create/CreateFreeIpaRequest.java", "diffHunk": "@@ -74,6 +75,9 @@\n     @ApiModelProperty(FreeIpaModelDescriptions.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(FreeIpaModelDescriptions.BACKUP)\n+    private BackupRequest backupRequest;", "originalCommit": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExNjA0Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564116043", "bodyText": "thanks! updated.", "author": "christmasferret", "createdAt": "2021-01-25T23:37:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4NjM0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c2ae05b48d10dd86a1eecf6a509da2e358b33f72", "chunk": "diff --git a/freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/create/CreateFreeIpaRequest.java b/freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/create/CreateFreeIpaRequest.java\nindex 8c80e2509f..84a5cd032e 100644\n--- a/freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/create/CreateFreeIpaRequest.java\n+++ b/freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/create/CreateFreeIpaRequest.java\n\n@@ -76,7 +76,7 @@ public class CreateFreeIpaRequest implements TaggableRequest {\n     private TelemetryRequest telemetry;\n \n     @ApiModelProperty(FreeIpaModelDescriptions.BACKUP)\n-    private BackupRequest backupRequest;\n+    private @Valid BackupRequest backupRequest;\n \n     @ApiModelProperty(FreeIpaModelDescriptions.TAGS)\n     private Map<String, String> tags = new HashMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4NzU3Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557687572", "bodyText": "misleading comment?", "author": "bergerdenes", "createdAt": "2021-01-14T20:45:08Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.environment.environment.validation.cloudstorage;\n+\n+import java.util.Optional;\n+\n+import com.sequenceiq.environment.environment.dto.EnvironmentBackup;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.validation.ValidationResult;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+\n+@Component\n+public class EnvironmentBackupLocationValidator {\n+\n+    private final CloudStorageLocationValidator cloudStorageLocationValidator;\n+\n+    public EnvironmentBackupLocationValidator(CloudStorageLocationValidator cloudStorageLocationValidator) {\n+        this.cloudStorageLocationValidator = cloudStorageLocationValidator;\n+    }\n+\n+    /**\n+     * Validate telemetry related logging storage location.", "originalCommit": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA3NTYxNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564075615", "bodyText": "Thanks! Corrected it!", "author": "christmasferret", "createdAt": "2021-01-25T22:05:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4NzU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExNjU2OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564116569", "bodyText": "Thanks! changed it as it is a typo.", "author": "christmasferret", "createdAt": "2021-01-25T23:39:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4NzU3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c2ae05b48d10dd86a1eecf6a509da2e358b33f72", "chunk": "diff --git a/environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java b/environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java\nindex 3d6884afc6..5adb70187d 100644\n--- a/environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java\n+++ b/environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java\n\n@@ -18,7 +18,7 @@ public class EnvironmentBackupLocationValidator {\n     }\n \n     /**\n-     * Validate telemetry related logging storage location.\n+     * Validate backup storage location.\n      * Currently, filter out cloudwatch (or any other cloud logging service) related validations\n      */\n     public ValidationResult validateBackupStorageLocation(Environment environment) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4Nzc5MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557687791", "bodyText": "gcs?", "author": "bergerdenes", "createdAt": "2021-01-14T20:45:33Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.environment.environment.validation.cloudstorage;\n+\n+import java.util.Optional;\n+\n+import com.sequenceiq.environment.environment.dto.EnvironmentBackup;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.validation.ValidationResult;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+\n+@Component\n+public class EnvironmentBackupLocationValidator {\n+\n+    private final CloudStorageLocationValidator cloudStorageLocationValidator;\n+\n+    public EnvironmentBackupLocationValidator(CloudStorageLocationValidator cloudStorageLocationValidator) {\n+        this.cloudStorageLocationValidator = cloudStorageLocationValidator;\n+    }\n+\n+    /**\n+     * Validate telemetry related logging storage location.\n+     * Currently, filter out cloudwatch (or any other cloud logging service) related validations\n+     */\n+    public ValidationResult validateBackupStorageLocation(Environment environment) {\n+        ValidationResult.ValidationResultBuilder resultBuilder = new ValidationResult.ValidationResultBuilder();\n+        Optional.ofNullable(environment.getBackup())\n+                .filter(backup -> isCloudStorageEnabled(backup) && backup.getCloudwatch() == null)\n+                .map(EnvironmentBackup::getStorageLocation)\n+                .ifPresent(location -> cloudStorageLocationValidator.validateBackup(location, environment, resultBuilder));\n+        return resultBuilder.build();\n+    }\n+\n+    private boolean isCloudStorageEnabled(EnvironmentBackup backup) {\n+        return backup.getS3() != null || backup.getAdlsGen2() != null;", "originalCommit": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA2NzUxOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564067518", "bodyText": "Because I am only separating from logging bucket to backup bucket, I will not introduce gcs changes as it is not there for logging bucket validation now.\nIn the com.sequenceiq.environment.environment.validation.cloudstorage.EnvironmentLogStorageLocationValidator file, we have same thing that was committed by @oleewere. The purpose of this jira is to separate backup from logging bucket but keeps everything as of now.\n_private boolean isCloudStorageEnabled(EnvironmentLogging logging) {\n    return logging.getS3() != null || logging.getAdlsGen2() != null;\n}_", "author": "christmasferret", "createdAt": "2021-01-25T21:50:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4Nzc5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzgwNTM4Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567805386", "bodyText": "yeah, good point, I need to include gcs there\nas gcs was not there, that means validation is not happening for gcs env", "author": "oleewere", "createdAt": "2021-02-01T12:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4Nzc5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c2ae05b48d10dd86a1eecf6a509da2e358b33f72", "chunk": "diff --git a/environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java b/environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java\nindex 3d6884afc6..5adb70187d 100644\n--- a/environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java\n+++ b/environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java\n\n@@ -18,7 +18,7 @@ public class EnvironmentBackupLocationValidator {\n     }\n \n     /**\n-     * Validate telemetry related logging storage location.\n+     * Validate backup storage location.\n      * Currently, filter out cloudwatch (or any other cloud logging service) related validations\n      */\n     public ValidationResult validateBackupStorageLocation(Environment environment) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MDI5Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557690292", "bodyText": "do I understand correctly if cloud storage location is validated only if there is no cloudwatch field  set on the backup?", "author": "bergerdenes", "createdAt": "2021-01-14T20:50:07Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.environment.environment.validation.cloudstorage;\n+\n+import java.util.Optional;\n+\n+import com.sequenceiq.environment.environment.dto.EnvironmentBackup;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.validation.ValidationResult;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+\n+@Component\n+public class EnvironmentBackupLocationValidator {\n+\n+    private final CloudStorageLocationValidator cloudStorageLocationValidator;\n+\n+    public EnvironmentBackupLocationValidator(CloudStorageLocationValidator cloudStorageLocationValidator) {\n+        this.cloudStorageLocationValidator = cloudStorageLocationValidator;\n+    }\n+\n+    /**\n+     * Validate telemetry related logging storage location.\n+     * Currently, filter out cloudwatch (or any other cloud logging service) related validations\n+     */\n+    public ValidationResult validateBackupStorageLocation(Environment environment) {\n+        ValidationResult.ValidationResultBuilder resultBuilder = new ValidationResult.ValidationResultBuilder();\n+        Optional.ofNullable(environment.getBackup())\n+                .filter(backup -> isCloudStorageEnabled(backup) && backup.getCloudwatch() == null)", "originalCommit": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA2NDcyMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564064720", "bodyText": "The purpose of this jira is to separate backup from logging bucket but keeps everything as of now.\n@oleewere https://github.com/hortonworks/cloudbreak/pull/6851/files\nThis is a direct copy of @oleewere's change in the above pull request from the EnvironmentLogStorageLocationValidator.\n.filter(logging -> logging.getCloudwatch() == null)\nAs I am only separating backup bucket from logging bucket, I am coping the same validation policy as what is working currently.\nOliver specifically commented \"* Currently, filter out cloudwatch (or any other cloud logging service) related validations\"\nHi @oleewere Would you mind checking why it is filtering by cloudwatch == null in your previous commits? Thanks!", "author": "christmasferret", "createdAt": "2021-01-25T21:45:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MDI5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzgwNjg3OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567806879", "bodyText": "sorry for late response, so we can send log data to cloudwatch instead of s3, but the instance profile is validated against s3, so we only do the validation if no cloudwatch enabled. all of this won't be related for backup", "author": "oleewere", "createdAt": "2021-02-01T13:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MDI5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c2ae05b48d10dd86a1eecf6a509da2e358b33f72", "chunk": "diff --git a/environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java b/environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java\nindex 3d6884afc6..5adb70187d 100644\n--- a/environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java\n+++ b/environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java\n\n@@ -18,7 +18,7 @@ public class EnvironmentBackupLocationValidator {\n     }\n \n     /**\n-     * Validate telemetry related logging storage location.\n+     * Validate backup storage location.\n      * Currently, filter out cloudwatch (or any other cloud logging service) related validations\n      */\n     public ValidationResult validateBackupStorageLocation(Environment environment) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MDgwNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557690804", "bodyText": "is it telemetry or just backup? (question stands for all below)", "author": "bergerdenes", "createdAt": "2021-01-14T20:51:08Z", "path": "common-model/src/main/java/com/sequenceiq/common/api/telemetry/doc/TelemetryModelDescription.java", "diffHunk": "@@ -14,6 +15,11 @@\n     public static final String TELEMETRY_LOGGING_GCS_ATTRIBUTES = \"telemetry - logging gcs attributes\";\n     public static final String TELEMETRY_LOGGING_CLOUDWATCH_ATTRIBUTES = \"telemetry - logging cloudwatch attributes\";\n     public static final String TELEMETRY_LOGGING_STORAGE_LOCATION = \"telemetry - logging storage location / container\";\n+    public static final String TELEMETRY_BACKUP_S3_ATTRIBUTES = \"telemetry - backup s3 attributes\";", "originalCommit": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExNjQ1NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564116455", "bodyText": "Thanks! removed it as it is a typo.", "author": "christmasferret", "createdAt": "2021-01-25T23:38:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MDgwNA=="}], "type": "inlineReview", "revised_code": {"commit": "c2ae05b48d10dd86a1eecf6a509da2e358b33f72", "chunk": "diff --git a/common-model/src/main/java/com/sequenceiq/common/api/telemetry/doc/TelemetryModelDescription.java b/common-model/src/main/java/com/sequenceiq/common/api/telemetry/doc/TelemetryModelDescription.java\nindex 845a0323ad..c6424f91b8 100644\n--- a/common-model/src/main/java/com/sequenceiq/common/api/telemetry/doc/TelemetryModelDescription.java\n+++ b/common-model/src/main/java/com/sequenceiq/common/api/telemetry/doc/TelemetryModelDescription.java\n\n@@ -15,11 +14,6 @@ public class TelemetryModelDescription {\n     public static final String TELEMETRY_LOGGING_GCS_ATTRIBUTES = \"telemetry - logging gcs attributes\";\n     public static final String TELEMETRY_LOGGING_CLOUDWATCH_ATTRIBUTES = \"telemetry - logging cloudwatch attributes\";\n     public static final String TELEMETRY_LOGGING_STORAGE_LOCATION = \"telemetry - logging storage location / container\";\n-    public static final String TELEMETRY_BACKUP_S3_ATTRIBUTES = \"telemetry - backup s3 attributes\";\n-    public static final String TELEMETRY_BACKUP_ADLS_GEN_2_ATTRIBUTES = \"telemetry - backup adls gen2 attributes\";\n-    public static final String TELEMETRY_BACKUP_GCS_ATTRIBUTES = \"telemetry - backup gcs attributes\";\n-    public static final String TELEMETRY_BACKUP_CLOUDWATCH_ATTRIBUTES = \"telemetry - backup cloudwatch attributes\";\n-    public static final String TELEMETRY_BACKUP_STORAGE_LOCATION = \"telemetry - backup storage location / container\";\n     public static final String TELEMETRY_CLUSTER_LOGS_COLLECTION_ENABLED = \"enable cluster logs collection\";\n     public static final String TELEMETRY_CLUSTER_MONITORING_ENABLED = \"enable monitoring for cluster services\";\n     public static final String TELEMETRY_CLOUD_STORAGE_LOGGING_ENABLED = \"enable uploading daemon service logs to cloud storage from the cluster nodes. \" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MDg1NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557690855", "bodyText": "is it telemetry or just backup?", "author": "bergerdenes", "createdAt": "2021-01-14T20:51:13Z", "path": "common-model/src/main/java/com/sequenceiq/common/api/telemetry/doc/TelemetryModelDescription.java", "diffHunk": "@@ -2,6 +2,7 @@\n \n public class TelemetryModelDescription {\n \n+    public static final String TELEMETRY_BACKUP = \"Cloud backup (telemetry) settings.\";", "originalCommit": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExNjI5MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564116290", "bodyText": "Thanks! removed it as it is a typo.", "author": "christmasferret", "createdAt": "2021-01-25T23:38:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MDg1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c2ae05b48d10dd86a1eecf6a509da2e358b33f72", "chunk": "diff --git a/common-model/src/main/java/com/sequenceiq/common/api/telemetry/doc/TelemetryModelDescription.java b/common-model/src/main/java/com/sequenceiq/common/api/telemetry/doc/TelemetryModelDescription.java\nindex 845a0323ad..c6424f91b8 100644\n--- a/common-model/src/main/java/com/sequenceiq/common/api/telemetry/doc/TelemetryModelDescription.java\n+++ b/common-model/src/main/java/com/sequenceiq/common/api/telemetry/doc/TelemetryModelDescription.java\n\n@@ -2,7 +2,6 @@ package com.sequenceiq.common.api.telemetry.doc;\n \n public class TelemetryModelDescription {\n \n-    public static final String TELEMETRY_BACKUP = \"Cloud backup (telemetry) settings.\";\n     public static final String TELEMETRY_LOGGING = \"Cloud Logging (telemetry) settings.\";\n     public static final String TELEMETRY_WORKLOAD_ANALYTICS = \"Workload analytics (telemetry) settings.\";\n     public static final String TELEMETRY_WORKLOAD_ANALYTICS_ATTRIBUTES = \"Workload analytics (telemetry) attributes.\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MjQwMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557692402", "bodyText": "response variable is not needed, just return Optional.empty()", "author": "bergerdenes", "createdAt": "2021-01-14T20:53:46Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/CloudStorageLocationValidator.java", "diffHunk": "@@ -60,6 +61,37 @@ public void validate(String storageLocation, Environment environment, Validation\n         return response;\n     }\n \n+    public void validateBackup(String storageLocation, Environment environment, ValidationResultBuilder resultBuilder) {\n+        Optional<FileSystemType> fileSystemType = getBackupFileSystemType(environment);\n+        String bucketName = getBucketName(fileSystemType, storageLocation);\n+        CloudCredential cloudCredential = credentialToCloudCredentialConverter.convert(environment.getCredential());\n+        ObjectStorageMetadataRequest request = createObjectStorageMetadataRequest(environment.getCloudPlatform(), cloudCredential, bucketName);\n+        ObjectStorageMetadataResponse response = ThreadBasedUserCrnProvider.doAsInternalActor(() ->\n+                cloudProviderServicesV4Endopint.getObjectStorageMetaData(request));\n+        resultBuilder.ifError(() -> response.getStatus() == ResponseStatus.OK && !environment.getLocation().equals(response.getRegion()),\n+                String.format(\"Object storage location [%s] of bucket '%s' must match environment location [%s]\",\n+                        response.getRegion(),\n+                        bucketName,\n+                        environment.getLocation()));\n+    }\n+\n+    private Optional<FileSystemType> getBackupFileSystemType(Environment environment) {\n+        Optional<FileSystemType> response = Optional.empty();\n+        if (environment.getBackup() != null) {\n+            EnvironmentBackup backup = environment.getBackup();\n+            if (backup.getS3() != null) {\n+                return Optional.of(backup.getS3().getType());\n+            }\n+            if (backup.getAdlsGen2() != null) {\n+                return Optional.of(backup.getAdlsGen2().getType());\n+            }\n+            if (backup.getGcs() != null) {\n+                return Optional.of(backup.getGcs().getType());\n+            }\n+        }\n+        return response;", "originalCommit": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA3OTc4Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564079786", "bodyText": "Thanks! Made the change.", "author": "christmasferret", "createdAt": "2021-01-25T22:13:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MjQwMg=="}], "type": "inlineReview", "revised_code": {"commit": "c2ae05b48d10dd86a1eecf6a509da2e358b33f72", "chunk": "diff --git a/environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/CloudStorageLocationValidator.java b/environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/CloudStorageLocationValidator.java\nindex 1edd454302..77d485d877 100644\n--- a/environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/CloudStorageLocationValidator.java\n+++ b/environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/CloudStorageLocationValidator.java\n\n@@ -76,7 +76,6 @@ public class CloudStorageLocationValidator {\n     }\n \n     private Optional<FileSystemType> getBackupFileSystemType(Environment environment) {\n-        Optional<FileSystemType> response = Optional.empty();\n         if (environment.getBackup() != null) {\n             EnvironmentBackup backup = environment.getBackup();\n             if (backup.getS3() != null) {\n"}}, {"oid": "c2ae05b48d10dd86a1eecf6a509da2e358b33f72", "url": "https://github.com/hortonworks/cloudbreak/commit/c2ae05b48d10dd86a1eecf6a509da2e358b33f72", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads.", "committedDate": "2021-01-25T23:32:55Z", "type": "forcePushed"}, {"oid": "a791d184b3246860f3ad8d01d24b9f1cbb0ff0ab", "url": "https://github.com/hortonworks/cloudbreak/commit/a791d184b3246860f3ad8d01d24b9f1cbb0ff0ab", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads.", "committedDate": "2021-01-25T23:44:12Z", "type": "forcePushed"}, {"oid": "a491e3c6cfcda4080bfa522b98366c49ff831cb8", "url": "https://github.com/hortonworks/cloudbreak/commit/a491e3c6cfcda4080bfa522b98366c49ff831cb8", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads.", "committedDate": "2021-01-27T05:48:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQyMjg4NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r565422884", "bodyText": "I think the environment service also needs logic like this. (we need it in both places)", "author": "jamisonbennett", "createdAt": "2021-01-27T15:53:13Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/stack/CreateFreeIpaRequestToStackConverter.java", "diffHunk": "@@ -120,7 +120,11 @@ public Stack convert(CreateFreeIpaRequest source, String accountId, Future<Strin\n             stack.setNetwork(networkConverter.convert(source.getNetwork()));\n         }\n         stack.setTelemetry(telemetryConverter.convert(source.getTelemetry()));\n-        stack.setBackup(backupConverter.convert(source.getTelemetry()));\n+        if (source.getBackupRequest() != null && isNotEmpty(source.getBackupRequest().getStorageLocation())) {", "originalCommit": "a491e3c6cfcda4080bfa522b98366c49ff831cb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTYwMDMxMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r565600312", "bodyText": "Thanks! I added the logic in EnvironmentApiConverter.java\n                .withBackup((request.getBackupRequest() != null && isNotEmpty(request.getBackupRequest().getStorageLocation())) ?\n                        backupConverter.convert(request.getBackupRequest()) : backupConverter.convert(request.getTelemetry()))\n\nI tested again using old UI and old dpcli\n\nSo now the environment table has the backup populated as log.\n\nConfirmed backup in log folder.", "author": "christmasferret", "createdAt": "2021-01-27T20:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQyMjg4NA=="}], "type": "inlineReview", "revised_code": {"commit": "313b98e557df85e0d8e8590f39df4fdc211424fb", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/stack/CreateFreeIpaRequestToStackConverter.java b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/stack/CreateFreeIpaRequestToStackConverter.java\nindex 2afbfcef8a..abc0f825e2 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/stack/CreateFreeIpaRequestToStackConverter.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/stack/CreateFreeIpaRequestToStackConverter.java\n\n@@ -120,8 +120,8 @@ public class CreateFreeIpaRequestToStackConverter {\n             stack.setNetwork(networkConverter.convert(source.getNetwork()));\n         }\n         stack.setTelemetry(telemetryConverter.convert(source.getTelemetry()));\n-        if (source.getBackupRequest() != null && isNotEmpty(source.getBackupRequest().getStorageLocation())) {\n-            stack.setBackup(backupConverter.convert(source.getBackupRequest()));\n+        if (source.getBackup() != null && isNotEmpty(source.getBackup().getStorageLocation())) {\n+            stack.setBackup(backupConverter.convert(source.getBackup()));\n         } else {\n             stack.setBackup(backupConverter.convert(source.getTelemetry()));\n         }\n"}}, {"oid": "75da1c777a3b9afcfb306e3cdff66365c9034d6e", "url": "https://github.com/hortonworks/cloudbreak/commit/75da1c777a3b9afcfb306e3cdff66365c9034d6e", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads.", "committedDate": "2021-01-27T18:21:16Z", "type": "forcePushed"}, {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28", "url": "https://github.com/hortonworks/cloudbreak/commit/64dc260947b1c141d7d491328c2ef6c7657cff28", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads.", "committedDate": "2021-01-27T18:25:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNTY5MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566125690", "bodyText": "Sorry for noticing this point just now but I would like to ask to rename the backupRequest to simply backup. I don't know how big effort is this at the UI side.\nSimilar renames are commented below.", "author": "bergerdenes", "createdAt": "2021-01-28T14:15:13Z", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentEditRequest.java", "diffHunk": "@@ -31,6 +32,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private @Valid BackupRequest backupRequest;", "originalCommit": "64dc260947b1c141d7d491328c2ef6c7657cff28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU1OTY5OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567559699", "bodyText": "Thanks! Changed it.", "author": "christmasferret", "createdAt": "2021-02-01T04:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNTY5MA=="}], "type": "inlineReview", "revised_code": {"commit": "313b98e557df85e0d8e8590f39df4fdc211424fb", "chunk": "diff --git a/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentEditRequest.java b/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentEditRequest.java\nindex 1a1a5d38fe..b03ffe5e96 100644\n--- a/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentEditRequest.java\n+++ b/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentEditRequest.java\n\n@@ -33,7 +33,7 @@ public class EnvironmentEditRequest {\n     private TelemetryRequest telemetry;\n \n     @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n-    private @Valid BackupRequest backupRequest;\n+    private @Valid BackupRequest backup;\n \n     @ApiModelProperty(EnvironmentModelDescription.SECURITY_ACCESS)\n     private @Valid SecurityAccessRequest securityAccess;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNTk1OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566125958", "bodyText": "Please rename the backupRequest to backup", "author": "bergerdenes", "createdAt": "2021-01-28T14:15:30Z", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentRequest.java", "diffHunk": "@@ -63,6 +64,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private @Valid BackupRequest backupRequest;", "originalCommit": "64dc260947b1c141d7d491328c2ef6c7657cff28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU1OTc0OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567559748", "bodyText": "Thanks! Changed it.", "author": "christmasferret", "createdAt": "2021-02-01T04:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNTk1OA=="}], "type": "inlineReview", "revised_code": {"commit": "313b98e557df85e0d8e8590f39df4fdc211424fb", "chunk": "diff --git a/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentRequest.java b/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentRequest.java\nindex 8b035d98ca..d11c964071 100644\n--- a/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentRequest.java\n+++ b/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentRequest.java\n\n@@ -65,7 +65,7 @@ public class EnvironmentRequest extends EnvironmentBaseRequest implements Creden\n     private TelemetryRequest telemetry;\n \n     @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n-    private @Valid BackupRequest backupRequest;\n+    private @Valid BackupRequest backup;\n \n     @Valid\n     @ApiModelProperty(EnvironmentModelDescription.AUTHENTICATION)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNjI2NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566126265", "bodyText": "Please rename the backupResponse to backup", "author": "bergerdenes", "createdAt": "2021-01-28T14:15:53Z", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/DetailedEnvironmentResponse.java", "diffHunk": "@@ -70,6 +71,8 @@ public void setProxyConfig(ProxyResponse proxyConfig) {\n \n         private TelemetryResponse telemetry;\n \n+        private BackupResponse backupResponse;", "originalCommit": "64dc260947b1c141d7d491328c2ef6c7657cff28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU1OTk1Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567559956", "bodyText": "Thanks. changed it", "author": "christmasferret", "createdAt": "2021-02-01T04:39:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNjI2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "313b98e557df85e0d8e8590f39df4fdc211424fb", "chunk": "diff --git a/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/DetailedEnvironmentResponse.java b/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/DetailedEnvironmentResponse.java\nindex 8b02f859e4..24acd29e9e 100644\n--- a/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/DetailedEnvironmentResponse.java\n+++ b/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/DetailedEnvironmentResponse.java\n\n@@ -71,7 +71,7 @@ public class DetailedEnvironmentResponse extends EnvironmentBaseResponse {\n \n         private TelemetryResponse telemetry;\n \n-        private BackupResponse backupResponse;\n+        private BackupResponse backup;\n \n         private EnvironmentStatus environmentStatus;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNjQ3NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566126475", "bodyText": "Please rename the backupResponse to backup", "author": "bergerdenes", "createdAt": "2021-01-28T14:16:10Z", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java", "diffHunk": "@@ -53,6 +56,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryResponse telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private @Valid BackupResponse backupResponse;", "originalCommit": "64dc260947b1c141d7d491328c2ef6c7657cff28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU2MDAyNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567560026", "bodyText": "Thanks! Changed.", "author": "christmasferret", "createdAt": "2021-02-01T04:39:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNjQ3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "313b98e557df85e0d8e8590f39df4fdc211424fb", "chunk": "diff --git a/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java b/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java\nindex b524db8697..488af34227 100644\n--- a/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java\n+++ b/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java\n\n@@ -57,7 +57,7 @@ public abstract class EnvironmentBaseResponse implements ResourceCrnAwareApiMode\n     private TelemetryResponse telemetry;\n \n     @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n-    private @Valid BackupResponse backupResponse;\n+    private @Valid BackupResponse backup;\n \n     @ApiModelProperty(EnvironmentModelDescription.NETWORK)\n     private EnvironmentNetworkResponse network;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNjY1NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566126654", "bodyText": "Please rename the backupResponse to backup", "author": "bergerdenes", "createdAt": "2021-01-28T14:16:24Z", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/SimpleEnvironmentResponse.java", "diffHunk": "@@ -63,6 +64,8 @@ public static Builder builder() {\n \n         private TelemetryResponse telemetry;\n \n+        private BackupResponse backupResponse;", "originalCommit": "64dc260947b1c141d7d491328c2ef6c7657cff28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU1OTg5MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567559891", "bodyText": "Thanks! Changed it.", "author": "christmasferret", "createdAt": "2021-02-01T04:38:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNjY1NA=="}], "type": "inlineReview", "revised_code": {"commit": "313b98e557df85e0d8e8590f39df4fdc211424fb", "chunk": "diff --git a/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/SimpleEnvironmentResponse.java b/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/SimpleEnvironmentResponse.java\nindex c5874c1b51..f7fe928bf2 100644\n--- a/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/SimpleEnvironmentResponse.java\n+++ b/environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/SimpleEnvironmentResponse.java\n\n@@ -64,7 +64,7 @@ public class SimpleEnvironmentResponse extends EnvironmentBaseResponse {\n \n         private TelemetryResponse telemetry;\n \n-        private BackupResponse backupResponse;\n+        private BackupResponse backup;\n \n         private EnvironmentNetworkResponse network;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjE5NTQ2OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566195468", "bodyText": "@Valid should be in a separate line, like @NotNull", "author": "lacikaaa", "createdAt": "2021-01-28T15:44:01Z", "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private @Valid S3CloudStorageV1Parameters s3;", "originalCommit": "64dc260947b1c141d7d491328c2ef6c7657cff28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU2MDE3OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567560178", "bodyText": "Thanks! Changed it.", "author": "christmasferret", "createdAt": "2021-02-01T04:40:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjE5NTQ2OA=="}], "type": "inlineReview", "revised_code": {"commit": "313b98e557df85e0d8e8590f39df4fdc211424fb", "chunk": "diff --git a/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java b/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java\nindex 945909ac4c..9338279335 100644\n--- a/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java\n+++ b/common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java\n\n@@ -25,17 +25,20 @@ public abstract class BackupBase implements Serializable {\n     @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n     private String storageLocation;\n \n+    @Valid\n     @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n-    private @Valid S3CloudStorageV1Parameters s3;\n+    private S3CloudStorageV1Parameters s3;\n \n     @ApiModelProperty(BackupModelDescription.BACKUP_ADLS_GEN_2_ATTRIBUTES)\n     private AdlsGen2CloudStorageV1Parameters adlsGen2;\n \n+    @Valid\n     @ApiModelProperty(BackupModelDescription.BACKUP_GCS_ATTRIBUTES)\n-    private @Valid GcsCloudStorageV1Parameters gcs;\n+    private GcsCloudStorageV1Parameters gcs;\n \n+    @Valid\n     @ApiModelProperty(BackupModelDescription.BACKUP_CLOUDWATCH_ATTRIBUTES)\n-    private @Valid BackupCloudwatchParams cloudwatch;\n+    private BackupCloudwatchParams cloudwatch;\n \n     public String getStorageLocation() {\n         return storageLocation;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIwNDIwMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566204201", "bodyText": "why is this copy necessary?", "author": "lacikaaa", "createdAt": "2021-01-28T15:54:47Z", "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.sequenceiq.common.api.backup.model;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchParams;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchStreamKey;\n+\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class BackupCloudwatchParams implements Serializable {\n+\n+    @ApiModelProperty\n+    @NotNull\n+    private String instanceProfile;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS_REGION)\n+    private String region;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS)\n+    private CloudwatchStreamKey streamKey = CloudwatchStreamKey.HOSTNAME;\n+\n+    public String getInstanceProfile() {\n+        return instanceProfile;\n+    }\n+\n+    public void setInstanceProfile(String instanceProfile) {\n+        this.instanceProfile = instanceProfile;\n+    }\n+\n+    public CloudwatchStreamKey getStreamKey() {\n+        return streamKey;\n+    }\n+\n+    public void setStreamKey(CloudwatchStreamKey streamKey) {\n+        this.streamKey = streamKey;\n+    }\n+\n+    public String getRegion() {\n+        return region;\n+    }\n+\n+    public void setRegion(String region) {\n+        this.region = region;\n+    }\n+\n+    @JsonIgnore\n+    public static BackupCloudwatchParams copy(BackupCloudwatchParams cloudwatchParams) {", "originalCommit": "64dc260947b1c141d7d491328c2ef6c7657cff28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU2MjUwMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567562500", "bodyText": "This is a copy of the current working logging code.\nIn TelemetryConverter.java, in the createLoggingRequestFromSource() method, there is one line as below,\nloggingRequest.setCloudwatch(CloudwatchParams.copy(logging.getCloudwatch()));\nIt creates a deep copy of the cloudwatch variable and assigns it to the logging request so that the logging object in telemetry and logging object in LoggingRequest are decoupled. Change one will not change the other one.\nWhen I separated the backup from logging, I did the same thing to create a deep copy so that the variable is decoupled in different objects.", "author": "christmasferret", "createdAt": "2021-02-01T04:50:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIwNDIwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "313b98e557df85e0d8e8590f39df4fdc211424fb", "chunk": "diff --git a/common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java b/common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java\nindex fd656a19a4..04fc1f0748 100644\n--- a/common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java\n+++ b/common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java\n\n@@ -8,7 +8,6 @@ import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n import com.fasterxml.jackson.annotation.JsonInclude;\n import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n-import com.sequenceiq.common.api.telemetry.model.CloudwatchParams;\n import com.sequenceiq.common.api.telemetry.model.CloudwatchStreamKey;\n \n import io.swagger.annotations.ApiModelProperty;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIwNTg3MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566205870", "bodyText": "this looks like more a converter than a copy. I'm not sure if this really belongs into this class. Or it could be a constructor which accepts this class, but it's definitely not a copy", "author": "lacikaaa", "createdAt": "2021-01-28T15:56:45Z", "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.sequenceiq.common.api.backup.model;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchParams;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchStreamKey;\n+\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class BackupCloudwatchParams implements Serializable {\n+\n+    @ApiModelProperty\n+    @NotNull\n+    private String instanceProfile;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS_REGION)\n+    private String region;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS)\n+    private CloudwatchStreamKey streamKey = CloudwatchStreamKey.HOSTNAME;\n+\n+    public String getInstanceProfile() {\n+        return instanceProfile;\n+    }\n+\n+    public void setInstanceProfile(String instanceProfile) {\n+        this.instanceProfile = instanceProfile;\n+    }\n+\n+    public CloudwatchStreamKey getStreamKey() {\n+        return streamKey;\n+    }\n+\n+    public void setStreamKey(CloudwatchStreamKey streamKey) {\n+        this.streamKey = streamKey;\n+    }\n+\n+    public String getRegion() {\n+        return region;\n+    }\n+\n+    public void setRegion(String region) {\n+        this.region = region;\n+    }\n+\n+    @JsonIgnore\n+    public static BackupCloudwatchParams copy(BackupCloudwatchParams cloudwatchParams) {\n+        BackupCloudwatchParams newCloudwatchParams = null;\n+        if (cloudwatchParams != null) {\n+            newCloudwatchParams = new BackupCloudwatchParams();\n+            newCloudwatchParams.setStreamKey(cloudwatchParams.getStreamKey());\n+            newCloudwatchParams.setInstanceProfile(cloudwatchParams.getInstanceProfile());\n+            newCloudwatchParams.setRegion(cloudwatchParams.getRegion());\n+        }\n+        return newCloudwatchParams;\n+    }\n+\n+    @JsonIgnore\n+    public static BackupCloudwatchParams copy(CloudwatchParams cloudwatchParams) {", "originalCommit": "64dc260947b1c141d7d491328c2ef6c7657cff28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU2MjY5MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567562691", "bodyText": "Thanks a lot for the suggestion! You are right. I moved it to convertBackupCloudwatchParams() method.", "author": "christmasferret", "createdAt": "2021-02-01T04:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIwNTg3MA=="}], "type": "inlineReview", "revised_code": {"commit": "313b98e557df85e0d8e8590f39df4fdc211424fb", "chunk": "diff --git a/common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java b/common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java\nindex fd656a19a4..04fc1f0748 100644\n--- a/common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java\n+++ b/common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java\n\n@@ -8,7 +8,6 @@ import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n import com.fasterxml.jackson.annotation.JsonInclude;\n import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n-import com.sequenceiq.common.api.telemetry.model.CloudwatchParams;\n import com.sequenceiq.common.api.telemetry.model.CloudwatchStreamKey;\n \n import io.swagger.annotations.ApiModelProperty;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIwNzc3Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566207772", "bodyText": "what's the motivation to initialize this with null?\nI think this style is more clear:\nif (params == null) {\n\treturn null;\n} else {\n\tcopy logic;\n\treturn ...;\n}", "author": "lacikaaa", "createdAt": "2021-01-28T15:58:56Z", "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.sequenceiq.common.api.backup.model;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchParams;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchStreamKey;\n+\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class BackupCloudwatchParams implements Serializable {\n+\n+    @ApiModelProperty\n+    @NotNull\n+    private String instanceProfile;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS_REGION)\n+    private String region;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS)\n+    private CloudwatchStreamKey streamKey = CloudwatchStreamKey.HOSTNAME;\n+\n+    public String getInstanceProfile() {\n+        return instanceProfile;\n+    }\n+\n+    public void setInstanceProfile(String instanceProfile) {\n+        this.instanceProfile = instanceProfile;\n+    }\n+\n+    public CloudwatchStreamKey getStreamKey() {\n+        return streamKey;\n+    }\n+\n+    public void setStreamKey(CloudwatchStreamKey streamKey) {\n+        this.streamKey = streamKey;\n+    }\n+\n+    public String getRegion() {\n+        return region;\n+    }\n+\n+    public void setRegion(String region) {\n+        this.region = region;\n+    }\n+\n+    @JsonIgnore\n+    public static BackupCloudwatchParams copy(BackupCloudwatchParams cloudwatchParams) {\n+        BackupCloudwatchParams newCloudwatchParams = null;\n+        if (cloudwatchParams != null) {", "originalCommit": "64dc260947b1c141d7d491328c2ef6c7657cff28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU4MDE2Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567580167", "bodyText": "Thanks! I changed to as above. It makes sense.", "author": "christmasferret", "createdAt": "2021-02-01T05:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIwNzc3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "313b98e557df85e0d8e8590f39df4fdc211424fb", "chunk": "diff --git a/common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java b/common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java\nindex fd656a19a4..04fc1f0748 100644\n--- a/common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java\n+++ b/common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java\n\n@@ -8,7 +8,6 @@ import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n import com.fasterxml.jackson.annotation.JsonInclude;\n import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n-import com.sequenceiq.common.api.telemetry.model.CloudwatchParams;\n import com.sequenceiq.common.api.telemetry.model.CloudwatchStreamKey;\n \n import io.swagger.annotations.ApiModelProperty;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIwODgyNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566208826", "bodyText": "missing ignoreuknown", "author": "lacikaaa", "createdAt": "2021-01-28T16:00:11Z", "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/response/BackupResponse.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.sequenceiq.common.api.backup.response;\n+\n+import com.sequenceiq.common.api.backup.base.BackupBase;\n+import io.swagger.annotations.ApiModel;\n+\n+@ApiModel(value = \"BackupResponse\")", "originalCommit": "64dc260947b1c141d7d491328c2ef6c7657cff28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU2NzcxNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567567714", "bodyText": "Thanks. added ignoreUnknown = true", "author": "christmasferret", "createdAt": "2021-02-01T05:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIwODgyNg=="}], "type": "inlineReview", "revised_code": {"commit": "313b98e557df85e0d8e8590f39df4fdc211424fb", "chunk": "diff --git a/common-model/src/main/java/com/sequenceiq/common/api/backup/response/BackupResponse.java b/common-model/src/main/java/com/sequenceiq/common/api/backup/response/BackupResponse.java\nindex 9f00e303f5..0ac4e11d85 100644\n--- a/common-model/src/main/java/com/sequenceiq/common/api/backup/response/BackupResponse.java\n+++ b/common-model/src/main/java/com/sequenceiq/common/api/backup/response/BackupResponse.java\n\n@@ -1,8 +1,10 @@\n package com.sequenceiq.common.api.backup.response;\n \n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n import com.sequenceiq.common.api.backup.base.BackupBase;\n import io.swagger.annotations.ApiModel;\n \n @ApiModel(value = \"BackupResponse\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n public class BackupResponse extends BackupBase {\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyMTQzNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566221435", "bodyText": "valid to new line", "author": "lacikaaa", "createdAt": "2021-01-28T16:15:43Z", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/create/CreateFreeIpaRequest.java", "diffHunk": "@@ -74,6 +75,9 @@\n     @ApiModelProperty(FreeIpaModelDescriptions.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(FreeIpaModelDescriptions.BACKUP)\n+    private @Valid BackupRequest backupRequest;", "originalCommit": "64dc260947b1c141d7d491328c2ef6c7657cff28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU2ODA2OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567568069", "bodyText": "thanks! changed.", "author": "christmasferret", "createdAt": "2021-02-01T05:14:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyMTQzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "313b98e557df85e0d8e8590f39df4fdc211424fb", "chunk": "diff --git a/freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/create/CreateFreeIpaRequest.java b/freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/create/CreateFreeIpaRequest.java\nindex 84a5cd032e..3d7198f850 100644\n--- a/freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/create/CreateFreeIpaRequest.java\n+++ b/freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/create/CreateFreeIpaRequest.java\n\n@@ -76,7 +76,8 @@ public class CreateFreeIpaRequest implements TaggableRequest {\n     private TelemetryRequest telemetry;\n \n     @ApiModelProperty(FreeIpaModelDescriptions.BACKUP)\n-    private @Valid BackupRequest backupRequest;\n+    @Valid\n+    private BackupRequest backup;\n \n     @ApiModelProperty(FreeIpaModelDescriptions.TAGS)\n     private Map<String, String> tags = new HashMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyNDE5Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566224193", "bodyText": "I think you should check both backup and request against null or neither of them", "author": "lacikaaa", "createdAt": "2021-01-28T16:19:05Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java", "diffHunk": "@@ -62,4 +75,28 @@ private void decorateBackupFromLoggingRequest(Backup backup, LoggingRequest logg\n             }\n         }\n     }\n+\n+    private void decorateBackupFromBackupRequest(Backup backup, BackupRequest backupRequest) {\n+        if (backupRequest != null) {", "originalCommit": "64dc260947b1c141d7d491328c2ef6c7657cff28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU2ODIyNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567568227", "bodyText": "Thanks! I checked both now. Indeed it makes sense.", "author": "christmasferret", "createdAt": "2021-02-01T05:15:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyNDE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "313b98e557df85e0d8e8590f39df4fdc211424fb", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java\nindex 6cf632847e..a1e274e424 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java\n\n@@ -77,7 +77,7 @@ public class BackupConverter {\n     }\n \n     private void decorateBackupFromBackupRequest(Backup backup, BackupRequest backupRequest) {\n-        if (backupRequest != null) {\n+        if (backup != null && backupRequest != null) {\n             backup.setStorageLocation(backupRequest.getStorageLocation());\n             if (backupRequest.getS3() != null) {\n                 S3CloudStorageV1Parameters s3Params = new S3CloudStorageV1Parameters();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyNTc5Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566225793", "bodyText": "this is not tested", "author": "lacikaaa", "createdAt": "2021-01-28T16:21:10Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java", "diffHunk": "@@ -62,4 +75,28 @@ private void decorateBackupFromLoggingRequest(Backup backup, LoggingRequest logg\n             }\n         }\n     }\n+\n+    private void decorateBackupFromBackupRequest(Backup backup, BackupRequest backupRequest) {\n+        if (backupRequest != null) {\n+            backup.setStorageLocation(backupRequest.getStorageLocation());\n+            if (backupRequest.getS3() != null) {\n+                S3CloudStorageV1Parameters s3Params = new S3CloudStorageV1Parameters();\n+                s3Params.setInstanceProfile(backupRequest.getS3().getInstanceProfile());\n+                backup.setS3(s3Params);\n+            } else if (backupRequest.getAdlsGen2() != null) {\n+                AdlsGen2CloudStorageV1Parameters adlsGen2Params = new AdlsGen2CloudStorageV1Parameters();\n+                AdlsGen2CloudStorageV1Parameters adlsGen2FromRequest = backupRequest.getAdlsGen2();\n+                adlsGen2Params.setAccountKey(adlsGen2FromRequest.getAccountKey());\n+                adlsGen2Params.setAccountName(adlsGen2FromRequest.getAccountName());\n+                adlsGen2Params.setSecure(adlsGen2FromRequest.isSecure());\n+                adlsGen2Params.setManagedIdentity(adlsGen2FromRequest.getManagedIdentity());\n+                backup.setAdlsGen2(adlsGen2Params);\n+            } else if (backupRequest.getGcs() != null) {\n+                GcsCloudStorageV1Parameters gcsParams = new GcsCloudStorageV1Parameters();\n+                GcsCloudStorageV1Parameters gcsFromRequest = backupRequest.getGcs();\n+                gcsParams.setServiceAccountEmail(gcsFromRequest.getServiceAccountEmail());\n+                backup.setGcs(gcsParams);\n+            }", "originalCommit": "64dc260947b1c141d7d491328c2ef6c7657cff28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU2ODM5OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567568399", "bodyText": "Thanks! This is a copy of the original working code where backup location was fetched from the logging request. As I am only separating backup from logging, this will work as exactly before.\nprivate void decorateBackupFromLoggingRequest(Backup backup, LoggingRequest loggingRequest) {\n        if (backup != null && loggingRequest != null) {\n            backup.setStorageLocation(loggingRequest.getStorageLocation());\n            if (loggingRequest.getS3() != null) {\n                S3CloudStorageV1Parameters s3Params = new S3CloudStorageV1Parameters();\n                s3Params.setInstanceProfile(loggingRequest.getS3().getInstanceProfile());\n                backup.setS3(s3Params);\n            } else if (loggingRequest.getAdlsGen2() != null) {\n                AdlsGen2CloudStorageV1Parameters adlsGen2Params = new AdlsGen2CloudStorageV1Parameters();\n                AdlsGen2CloudStorageV1Parameters adlsGen2FromRequest = loggingRequest.getAdlsGen2();\n                adlsGen2Params.setAccountKey(adlsGen2FromRequest.getAccountKey());\n                adlsGen2Params.setAccountName(adlsGen2FromRequest.getAccountName());\n                adlsGen2Params.setSecure(adlsGen2FromRequest.isSecure());\n                adlsGen2Params.setManagedIdentity(adlsGen2FromRequest.getManagedIdentity());\n                backup.setAdlsGen2(adlsGen2Params);\n            } else if (loggingRequest.getGcs() != null) {\n                GcsCloudStorageV1Parameters gcsParams = new GcsCloudStorageV1Parameters();\n                GcsCloudStorageV1Parameters gcsFromRequest = loggingRequest.getGcs();\n                gcsParams.setServiceAccountEmail(gcsFromRequest.getServiceAccountEmail());\n                backup.setGcs(gcsParams);\n            }\n        }\n    }", "author": "christmasferret", "createdAt": "2021-02-01T05:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyNTc5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "313b98e557df85e0d8e8590f39df4fdc211424fb", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java\nindex 6cf632847e..a1e274e424 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java\n\n@@ -77,7 +77,7 @@ public class BackupConverter {\n     }\n \n     private void decorateBackupFromBackupRequest(Backup backup, BackupRequest backupRequest) {\n-        if (backupRequest != null) {\n+        if (backup != null && backupRequest != null) {\n             backup.setStorageLocation(backupRequest.getStorageLocation());\n             if (backupRequest.getS3() != null) {\n                 S3CloudStorageV1Parameters s3Params = new S3CloudStorageV1Parameters();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyNjg2MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566226861", "bodyText": "when freeIpaBackupEnabled is false or request is null is not tested", "author": "lacikaaa", "createdAt": "2021-01-28T16:22:38Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java", "diffHunk": "@@ -39,6 +40,18 @@ public Backup convert(TelemetryRequest request) {\n         return backup;\n     }\n \n+    public Backup convert(BackupRequest request) {\n+        Backup backup = null;\n+        if (freeIpaBackupEnabled && request != null) {", "originalCommit": "64dc260947b1c141d7d491328c2ef6c7657cff28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU2ODU5MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567568590", "bodyText": "Thanks! Now I added test cases for freeIpaBackupEnabled is false or request is null.\nThis is a copy of the original working code\n    public Backup convert(TelemetryRequest request) {\n        Backup backup = null;\n        if (freeIpaBackupEnabled && request != null && request.getLogging() != null) {", "author": "christmasferret", "createdAt": "2021-02-01T05:16:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyNjg2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "313b98e557df85e0d8e8590f39df4fdc211424fb", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java\nindex 6cf632847e..a1e274e424 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java\n\n@@ -53,7 +53,7 @@ public class BackupConverter {\n     }\n \n     private void decorateBackupFromLoggingRequest(Backup backup, LoggingRequest loggingRequest) {\n-        if (loggingRequest != null) {\n+        if (backup != null && loggingRequest != null) {\n             backup.setStorageLocation(loggingRequest.getStorageLocation());\n             if (loggingRequest.getS3() != null) {\n                 S3CloudStorageV1Parameters s3Params = new S3CloudStorageV1Parameters();\n"}}, {"oid": "313b98e557df85e0d8e8590f39df4fdc211424fb", "url": "https://github.com/hortonworks/cloudbreak/commit/313b98e557df85e0d8e8590f39df4fdc211424fb", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads.", "committedDate": "2021-02-01T04:33:44Z", "type": "forcePushed"}, {"oid": "bb67a4a7fd7bb518c15b150ddbef89d0d214edb3", "url": "https://github.com/hortonworks/cloudbreak/commit/bb67a4a7fd7bb518c15b150ddbef89d0d214edb3", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads.", "committedDate": "2021-02-01T05:57:40Z", "type": "forcePushed"}, {"oid": "c71434b6b71c6c25c0b499313619692284b0558b", "url": "https://github.com/hortonworks/cloudbreak/commit/c71434b6b71c6c25c0b499313619692284b0558b", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads.", "committedDate": "2021-02-03T14:07:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDAwMzU4NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r570003584", "bodyText": "I think this new line might not be intentional. could you revert this?", "author": "lacikaaa", "createdAt": "2021-02-04T07:37:48Z", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/FreeIpaV1Endpoint.java", "diffHunk": "@@ -34,7 +34,8 @@\n import io.swagger.annotations.ApiOperation;\n \n @RetryAndMetrics\n-@Path(\"/v1/freeipa\")\n+@Path(\"/\" +", "originalCommit": "c71434b6b71c6c25c0b499313619692284b0558b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDI3ODE4MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r570278180", "bodyText": "Thanks a lot! Surprised this is not caught by style check. reverted it.", "author": "christmasferret", "createdAt": "2021-02-04T14:43:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDAwMzU4NA=="}], "type": "inlineReview", "revised_code": {"commit": "c8ced05c17b4ad70b5b3db079b56020437c8d4ed", "chunk": "diff --git a/freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/FreeIpaV1Endpoint.java b/freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/FreeIpaV1Endpoint.java\nindex b5df7e8b68..ccb39e21a8 100644\n--- a/freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/FreeIpaV1Endpoint.java\n+++ b/freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/FreeIpaV1Endpoint.java\n\n@@ -34,8 +34,7 @@ import io.swagger.annotations.Api;\n import io.swagger.annotations.ApiOperation;\n \n @RetryAndMetrics\n-@Path(\"/\" +\n-        \"v1/freeipa\")\n+@Path(\"/v1/freeipa\")\n @Consumes(MediaType.APPLICATION_JSON)\n @Api(value = \"/v1/freeipa\", protocols = \"http,https\", consumes = MediaType.APPLICATION_JSON)\n public interface FreeIpaV1Endpoint {\n"}}, {"oid": "c8ced05c17b4ad70b5b3db079b56020437c8d4ed", "url": "https://github.com/hortonworks/cloudbreak/commit/c8ced05c17b4ad70b5b3db079b56020437c8d4ed", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\n                                                            Backups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\n                                                            It should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads.", "committedDate": "2021-02-04T14:41:52Z", "type": "forcePushed"}, {"oid": "124ef42bbeee72601b58838a0e3d3b9eeb8a7caa", "url": "https://github.com/hortonworks/cloudbreak/commit/124ef42bbeee72601b58838a0e3d3b9eeb8a7caa", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\n                                                            Backups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\n                                                            It should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads.", "committedDate": "2021-02-04T15:14:43Z", "type": "commit"}, {"oid": "124ef42bbeee72601b58838a0e3d3b9eeb8a7caa", "url": "https://github.com/hortonworks/cloudbreak/commit/124ef42bbeee72601b58838a0e3d3b9eeb8a7caa", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\n                                                            Backups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\n                                                            It should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads.", "committedDate": "2021-02-04T15:14:43Z", "type": "forcePushed"}]}