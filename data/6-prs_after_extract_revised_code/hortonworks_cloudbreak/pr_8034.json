{"pr_number": 8034, "pr_title": "CB-4785 Better error message display for environment+sdx accidental A\u2026", "pr_createdAt": "2020-05-13T10:08:39Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8034", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2ODgwMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424368801", "bodyText": "hmm.. can we throw badrequest instead of internal server error from cloudbreak side?", "author": "sodre90", "createdAt": "2020-05-13T11:36:16Z", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java", "diffHunk": "@@ -175,7 +176,7 @@ public void startStackProvisioning(Long id, DetailedEnvironmentResponse environm\n                 sdxClusterRepository.save(sdxCluster);\n                 cloudbreakFlowService.saveLastCloudbreakFlowChainId(sdxCluster, stackV4Response.getFlowIdentifier());\n                 LOGGER.info(\"Sdx cluster updated\");\n-            } catch (ClientErrorException e) {\n+            } catch (ClientErrorException | InternalServerErrorException e) {", "originalCommit": "9ad3166cee886b4d9cdfbfe04640ce38cb7638d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2OTc0OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424369748", "bodyText": "We do not throw internal exception directly, It is a common jax-rs exception of HTTP code 500. But we need to handle it because the reason message was 500 internal error on the UI", "author": "topolyai5", "createdAt": "2020-05-13T11:38:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2ODgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3MzU3NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424373575", "bodyText": "but why is it 500? why not something else? maybe a bad exceptionmapper?", "author": "sodre90", "createdAt": "2020-05-13T11:45:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2ODgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3ODkxMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424378912", "bodyText": "Imagine that user error when someone would like to attach an AZURE SDX to an AWS env.\nSomewhere in the CB throw a ClassCastException. Should we create a mapper all of the unexpected wrong user interaction?\nSorry, my fault: in the DefaultExceptionMapper we throw an InternalServerError", "author": "topolyai5", "createdAt": "2020-05-13T11:55:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2ODgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0ODY0Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424448642", "bodyText": "please use WebApplicationException (it will catch both client and server errors)", "author": "sodre90", "createdAt": "2020-05-13T13:44:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2ODgwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f2a5a0111f59a58cf096a1401046e77492568f1d", "chunk": "diff --git a/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java b/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java\nindex 0a2412eb16..27f6b57a0c 100644\n--- a/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java\n+++ b/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java\n\n@@ -176,13 +175,13 @@ public class ProvisionerService {\n                 sdxClusterRepository.save(sdxCluster);\n                 cloudbreakFlowService.saveLastCloudbreakFlowChainId(sdxCluster, stackV4Response.getFlowIdentifier());\n                 LOGGER.info(\"Sdx cluster updated\");\n-            } catch (ClientErrorException | InternalServerErrorException e) {\n+            } catch (WebApplicationException e) {\n                 String errorMessage = webApplicationExceptionMessageExtractor.getErrorMessage(e);\n-                LOGGER.info(\"Can not start provisioning: {}\", errorMessage, e);\n-                throw new RuntimeException(\"Can not start provisioning, client error happened on Cloudbreak side: \" + errorMessage);\n+                LOGGER.info(\"Cannot start provisioning: {}\", errorMessage, e);\n+                throw new RuntimeException(\"Cannot start provisioning, some error happened on Cloudbreak side: \" + errorMessage);\n             } catch (IOException e) {\n-                LOGGER.info(\"Can not parse stackrequest to json\", e);\n-                throw new RuntimeException(\"Can not write stackrequest to json: \" + e.getMessage());\n+                LOGGER.info(\"Cannot parse stackrequest to json\", e);\n+                throw new RuntimeException(\"Cannot write stackrequest to json: \" + e.getMessage());\n             }\n         }, () -> {\n             throw notFound(\"SDX cluster\", id).get();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2OTkzOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424369938", "bodyText": "The exception message is misleading", "author": "daszabo", "createdAt": "2020-05-13T11:38:30Z", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java", "diffHunk": "@@ -175,7 +176,7 @@ public void startStackProvisioning(Long id, DetailedEnvironmentResponse environm\n                 sdxClusterRepository.save(sdxCluster);\n                 cloudbreakFlowService.saveLastCloudbreakFlowChainId(sdxCluster, stackV4Response.getFlowIdentifier());\n                 LOGGER.info(\"Sdx cluster updated\");\n-            } catch (ClientErrorException e) {\n+            } catch (ClientErrorException | InternalServerErrorException e) {\n                 String errorMessage = webApplicationExceptionMessageExtractor.getErrorMessage(e);\n                 LOGGER.info(\"Can not start provisioning: {}\", errorMessage, e);\n                 throw new RuntimeException(\"Can not start provisioning, client error happened on Cloudbreak side: \" + errorMessage);", "originalCommit": "9ad3166cee886b4d9cdfbfe04640ce38cb7638d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3MzM1MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424373351", "bodyText": "is it better? \"Can not start provisioning, some error happened on Cloudbreak side: \" + errorMessage", "author": "topolyai5", "createdAt": "2020-05-13T11:45:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2OTkzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM4ODQzOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424388438", "bodyText": "Cannot*", "author": "attilapalfi92", "createdAt": "2020-05-13T12:13:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2OTkzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM5MjExMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424392113", "bodyText": "https://www.lexico.com/grammar/cannot-or-can-not\nsomeone prefer that format, what is the problem with that?", "author": "topolyai5", "createdAt": "2020-05-13T12:20:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2OTkzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM5NjA5MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424396090", "bodyText": "\"the first is much more usual\". Users will see this and they would also think can not looks weird and unusual", "author": "attilapalfi92", "createdAt": "2020-05-13T12:26:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2OTkzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM5Njk2Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424396963", "bodyText": "ok", "author": "topolyai5", "createdAt": "2020-05-13T12:28:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2OTkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "f2a5a0111f59a58cf096a1401046e77492568f1d", "chunk": "diff --git a/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java b/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java\nindex 0a2412eb16..27f6b57a0c 100644\n--- a/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java\n+++ b/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java\n\n@@ -176,13 +175,13 @@ public class ProvisionerService {\n                 sdxClusterRepository.save(sdxCluster);\n                 cloudbreakFlowService.saveLastCloudbreakFlowChainId(sdxCluster, stackV4Response.getFlowIdentifier());\n                 LOGGER.info(\"Sdx cluster updated\");\n-            } catch (ClientErrorException | InternalServerErrorException e) {\n+            } catch (WebApplicationException e) {\n                 String errorMessage = webApplicationExceptionMessageExtractor.getErrorMessage(e);\n-                LOGGER.info(\"Can not start provisioning: {}\", errorMessage, e);\n-                throw new RuntimeException(\"Can not start provisioning, client error happened on Cloudbreak side: \" + errorMessage);\n+                LOGGER.info(\"Cannot start provisioning: {}\", errorMessage, e);\n+                throw new RuntimeException(\"Cannot start provisioning, some error happened on Cloudbreak side: \" + errorMessage);\n             } catch (IOException e) {\n-                LOGGER.info(\"Can not parse stackrequest to json\", e);\n-                throw new RuntimeException(\"Can not write stackrequest to json: \" + e.getMessage());\n+                LOGGER.info(\"Cannot parse stackrequest to json\", e);\n+                throw new RuntimeException(\"Cannot write stackrequest to json: \" + e.getMessage());\n             }\n         }, () -> {\n             throw notFound(\"SDX cluster\", id).get();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3MDkxMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424370910", "bodyText": "Should we throw an exception, if the AZ list is empty? If not, at least log the fact please.", "author": "daszabo", "createdAt": "2020-05-13T11:40:27Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java", "diffHunk": "@@ -636,12 +636,15 @@ private CloudVmTypes getCloudVmTypes(CloudCredential cloudCredential, Region reg\n         Map<String, Set<VmType>> cloudVmResponses = new HashMap<>();\n         Map<String, VmType> defaultCloudVmResponses = new HashMap<>();\n \n-        for (AvailabilityZone availabilityZone : regions.getCloudRegions().get(region)) {\n-            Set<VmType> types = vmTypes.get(region).stream()\n-                    .filter(enabledInstanceTypeFilter)\n-                    .collect(Collectors.toSet());\n-            cloudVmResponses.put(availabilityZone.value(), types);\n-            defaultCloudVmResponses.put(availabilityZone.value(), defaultVmTypes.get(region));\n+        List<AvailabilityZone> availabilityZones = regions.getCloudRegions().get(region);\n+        if (availabilityZones != null && !availabilityZones.isEmpty()) {\n+            for (AvailabilityZone availabilityZone : availabilityZones) {\n+                Set<VmType> types = vmTypes.get(region).stream()\n+                        .filter(enabledInstanceTypeFilter)\n+                        .collect(Collectors.toSet());\n+                cloudVmResponses.put(availabilityZone.value(), types);\n+                defaultCloudVmResponses.put(availabilityZone.value(), defaultVmTypes.get(region));\n+            }\n         }", "originalCommit": "9ad3166cee886b4d9cdfbfe04640ce38cb7638d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3MjU0MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424372541", "bodyText": "Are the AZs required? Are you sure that we do not break the process with exception?", "author": "topolyai5", "createdAt": "2020-05-13T11:43:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3MDkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQxMjQ3OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424412478", "bodyText": "Well, without an exception, the dropdown on the UI will be empty, which might also be a good enough clue for the user, that something is amiss.", "author": "daszabo", "createdAt": "2020-05-13T12:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3MDkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNDE5OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424424198", "bodyText": "the log message is ok for me, I will update with it", "author": "topolyai5", "createdAt": "2020-05-13T13:10:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3MDkxMA=="}], "type": "inlineReview", "revised_code": {"commit": "f2a5a0111f59a58cf096a1401046e77492568f1d", "chunk": "diff --git a/cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java b/cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java\nindex aea4921422..c7479f565a 100644\n--- a/cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java\n+++ b/cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java\n\n@@ -645,6 +645,8 @@ public class AwsPlatformResources implements PlatformResources {\n                 cloudVmResponses.put(availabilityZone.value(), types);\n                 defaultCloudVmResponses.put(availabilityZone.value(), defaultVmTypes.get(region));\n             }\n+        } else {\n+            LOGGER.info(\"Availability zones is null or empty in {}\", region.getRegionName());\n         }\n \n         return new CloudVmTypes(cloudVmResponses, defaultCloudVmResponses);\n"}}, {"oid": "f2a5a0111f59a58cf096a1401046e77492568f1d", "url": "https://github.com/hortonworks/cloudbreak/commit/f2a5a0111f59a58cf096a1401046e77492568f1d", "message": "CB-4785 Better error message display for environment+sdx accidental Azure-AWS mix-up", "committedDate": "2020-05-13T14:23:21Z", "type": "forcePushed"}, {"oid": "b847a37e8c071eb90c8b3e4e7a4e1e210c38b095", "url": "https://github.com/hortonworks/cloudbreak/commit/b847a37e8c071eb90c8b3e4e7a4e1e210c38b095", "message": "CB-4785 Better error message display for environment+sdx accidental Azure-AWS mix-up", "committedDate": "2020-05-14T05:51:51Z", "type": "commit"}, {"oid": "b847a37e8c071eb90c8b3e4e7a4e1e210c38b095", "url": "https://github.com/hortonworks/cloudbreak/commit/b847a37e8c071eb90c8b3e4e7a4e1e210c38b095", "message": "CB-4785 Better error message display for environment+sdx accidental Azure-AWS mix-up", "committedDate": "2020-05-14T05:51:51Z", "type": "forcePushed"}]}