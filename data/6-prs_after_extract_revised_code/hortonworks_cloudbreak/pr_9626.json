{"pr_number": 9626, "pr_title": "CB-9711 - OS upgrade for datahubs should work", "pr_createdAt": "2020-12-10T14:31:43Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/9626", "timeline": [{"oid": "75b5887241204d9fff0c52c335b604669e845e08", "url": "https://github.com/hortonworks/cloudbreak/commit/75b5887241204d9fff0c52c335b604669e845e08", "message": "CB-9711 - OS upgrade for datahubs should work", "committedDate": "2020-12-10T19:18:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4OTA2MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9626#discussion_r540889061", "bodyText": "Can you please rename this method to something that is describing the return value? For example getInstancesByHostGroup or sometging like that.", "author": "tiborpopovics", "createdAt": "2020-12-11T11:43:29Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/chain/UpgradeDistroxFlowEventChainFactory.java", "diffHunk": "@@ -14,30 +21,58 @@\n import com.sequenceiq.cloudbreak.core.flow2.event.ClusterUpgradeTriggerEvent;\n import com.sequenceiq.cloudbreak.core.flow2.event.DistroxUpgradeTriggerEvent;\n import com.sequenceiq.cloudbreak.core.flow2.event.StackImageUpdateTriggerEvent;\n+import com.sequenceiq.cloudbreak.domain.stack.ManualClusterRepairMode;\n+import com.sequenceiq.cloudbreak.domain.stack.instance.InstanceMetaData;\n import com.sequenceiq.cloudbreak.reactor.api.event.StackEvent;\n+import com.sequenceiq.cloudbreak.reactor.api.event.orchestration.ClusterRepairTriggerEvent;\n+import com.sequenceiq.cloudbreak.service.cluster.ClusterRepairService;\n+import com.sequenceiq.cloudbreak.service.cluster.model.HostGroupName;\n+import com.sequenceiq.cloudbreak.service.cluster.model.RepairValidation;\n+import com.sequenceiq.cloudbreak.service.cluster.model.Result;\n import com.sequenceiq.flow.core.chain.FlowEventChainFactory;\n \n @Component\n public class UpgradeDistroxFlowEventChainFactory implements FlowEventChainFactory<DistroxUpgradeTriggerEvent> {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(UpgradeDistroxFlowEventChainFactory.class);\n \n+    @Inject\n+    private ClusterRepairService clusterRepairService;\n+\n     @Override\n     public String initEvent() {\n         return FlowChainTriggers.DISTROX_CLUSTER_UPGRADE_CHAIN_TRIGGER_EVENT;\n     }\n \n     @Override\n     public Queue<Selectable> createFlowTriggerEventQueue(DistroxUpgradeTriggerEvent event) {\n+        LOGGER.debug(\"Creating flow trigger event queue for distrox upgrade with event {}\", event);\n         Queue<Selectable> chain = new ConcurrentLinkedQueue<>();\n         chain.add(new StackEvent(SaltUpdateEvent.SALT_UPDATE_EVENT.event(), event.getResourceId(), event.accepted()));\n         chain.add(new ClusterUpgradeTriggerEvent(CLUSTER_UPGRADE_INIT_EVENT.event(), event.getResourceId(), event.accepted(),\n                 event.getImageChangeDto().getImageId()));\n         chain.add(new StackImageUpdateTriggerEvent(FlowChainTriggers.STACK_IMAGE_UPDATE_TRIGGER_EVENT, event.getImageChangeDto()));\n         if (event.isReplaceVms()) {\n-            // TODO\n-            LOGGER.warn(\"Replace VMs for DistroX is not implemented!\");\n+            Map<String, List<String>> nodeMap = getNodeMap(event);\n+            chain.add(new ClusterRepairTriggerEvent(FlowChainTriggers.CLUSTER_REPAIR_TRIGGER_EVENT, event.getResourceId(), nodeMap, false, true));\n         }\n         return chain;\n     }\n+\n+    private Map<String, List<String>> getNodeMap(DistroxUpgradeTriggerEvent event) {", "originalCommit": "75b5887241204d9fff0c52c335b604669e845e08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "080c36648e078a13a7cf5f6253a9cdef7b6c81d3", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/chain/UpgradeDistroxFlowEventChainFactory.java b/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/chain/UpgradeDistroxFlowEventChainFactory.java\nindex d1e7e442e2..867fa0c64f 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/chain/UpgradeDistroxFlowEventChainFactory.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/chain/UpgradeDistroxFlowEventChainFactory.java\n\n@@ -53,13 +53,13 @@ public class UpgradeDistroxFlowEventChainFactory implements FlowEventChainFactor\n                 event.getImageChangeDto().getImageId()));\n         chain.add(new StackImageUpdateTriggerEvent(FlowChainTriggers.STACK_IMAGE_UPDATE_TRIGGER_EVENT, event.getImageChangeDto()));\n         if (event.isReplaceVms()) {\n-            Map<String, List<String>> nodeMap = getNodeMap(event);\n+            Map<String, List<String>> nodeMap = getReplaceableInstancesByHostgroup(event);\n             chain.add(new ClusterRepairTriggerEvent(FlowChainTriggers.CLUSTER_REPAIR_TRIGGER_EVENT, event.getResourceId(), nodeMap, false, true));\n         }\n         return chain;\n     }\n \n-    private Map<String, List<String>> getNodeMap(DistroxUpgradeTriggerEvent event) {\n+    private Map<String, List<String>> getReplaceableInstancesByHostgroup(DistroxUpgradeTriggerEvent event) {\n         Result<Map<HostGroupName, Set<InstanceMetaData>>, RepairValidation> validationResult =\n                 clusterRepairService.validateRepair(ManualClusterRepairMode.ALL, event.getResourceId(), Set.of(), false);\n         return toStringMap(validationResult.getSuccess());\n"}}, {"oid": "080c36648e078a13a7cf5f6253a9cdef7b6c81d3", "url": "https://github.com/hortonworks/cloudbreak/commit/080c36648e078a13a7cf5f6253a9cdef7b6c81d3", "message": "CB-9711 - OS upgrade for datahubs should work", "committedDate": "2020-12-11T12:05:30Z", "type": "commit"}, {"oid": "080c36648e078a13a7cf5f6253a9cdef7b6c81d3", "url": "https://github.com/hortonworks/cloudbreak/commit/080c36648e078a13a7cf5f6253a9cdef7b6c81d3", "message": "CB-9711 - OS upgrade for datahubs should work", "committedDate": "2020-12-11T12:05:30Z", "type": "forcePushed"}]}