{"pr_number": 9051, "pr_title": "CB-8878 - added tracing instrumentation for azure api calls", "pr_createdAt": "2020-09-21T13:45:54Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/9051", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ4MjI3Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9051#discussion_r492482277", "bodyText": "I think these magic strings like component, http.method, error should come from TracingUtil or similar class, so when you add support to another sdk, etc we won't duplicate those.", "author": "lacikaaa", "createdAt": "2020-09-22T05:31:39Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClientCredentials.java", "diffHunk": "@@ -32,24 +40,53 @@\n \n     private final AuthenticationContextProvider authenticationContextProvider;\n \n+    private final Tracer tracer;\n+\n     public AzureClientCredentials(AzureCredentialView credentialView, LogLevel logLevel, CBRefreshTokenClientProvider cbRefreshTokenClientProvider,\n-                    AuthenticationContextProvider authenticationContextProvider) {\n+            AuthenticationContextProvider authenticationContextProvider, Tracer tracer) {\n         this.authenticationContextProvider = authenticationContextProvider;\n         this.cbRefreshTokenClientProvider = cbRefreshTokenClientProvider;\n         this.credentialView = credentialView;\n         this.logLevel = logLevel;\n+        this.tracer = tracer;\n         azureClientCredentials = getAzureCredentials();\n     }\n \n     public Azure getAzure() {\n         return Azure\n                 .configure()\n+                .withInterceptor(getTracingInterceptor())\n                 .withProxyAuthenticator(new JavaNetAuthenticator())\n                 .withLogLevel(logLevel)\n                 .authenticate(azureClientCredentials)\n                 .withSubscription(credentialView.getSubscriptionId());\n     }\n \n+    private Interceptor getTracingInterceptor() {\n+        return chain -> {\n+            Request request = chain.request();\n+            String loggingContext = request.header(\"x-ms-logging-context\").split(\" \")[0];\n+            Span span = tracer.buildSpan(\"[\" + request.method() + \"] \" + loggingContext)\n+                    .addReference(References.FOLLOWS_FROM, tracer.activeSpan() != null ? tracer.activeSpan().context() : null)\n+                    .start();\n+            span.setTag(\"component\", \"java-azure-sdk\");", "originalCommit": "08d457bd1a7121d758849fc0ce00faa259f9c31c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e40b0e0352667e6537c8e4f6c16e8ba81940fec8", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClientCredentials.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClientCredentials.java\nindex dacd393e38..c6bd75d241 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClientCredentials.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClientCredentials.java\n\n@@ -40,53 +33,28 @@ public class AzureClientCredentials {\n \n     private final AuthenticationContextProvider authenticationContextProvider;\n \n-    private final Tracer tracer;\n+    private final AzureOkHttp3TracingInterceptor tracingInterceptor;\n \n     public AzureClientCredentials(AzureCredentialView credentialView, LogLevel logLevel, CBRefreshTokenClientProvider cbRefreshTokenClientProvider,\n-            AuthenticationContextProvider authenticationContextProvider, Tracer tracer) {\n+            AuthenticationContextProvider authenticationContextProvider, AzureOkHttp3TracingInterceptor tracingInterceptor) {\n         this.authenticationContextProvider = authenticationContextProvider;\n         this.cbRefreshTokenClientProvider = cbRefreshTokenClientProvider;\n         this.credentialView = credentialView;\n         this.logLevel = logLevel;\n-        this.tracer = tracer;\n+        this.tracingInterceptor = tracingInterceptor;\n         azureClientCredentials = getAzureCredentials();\n     }\n \n     public Azure getAzure() {\n         return Azure\n                 .configure()\n-                .withInterceptor(getTracingInterceptor())\n+                .withInterceptor(tracingInterceptor)\n                 .withProxyAuthenticator(new JavaNetAuthenticator())\n                 .withLogLevel(logLevel)\n                 .authenticate(azureClientCredentials)\n                 .withSubscription(credentialView.getSubscriptionId());\n     }\n \n-    private Interceptor getTracingInterceptor() {\n-        return chain -> {\n-            Request request = chain.request();\n-            String loggingContext = request.header(\"x-ms-logging-context\").split(\" \")[0];\n-            Span span = tracer.buildSpan(\"[\" + request.method() + \"] \" + loggingContext)\n-                    .addReference(References.FOLLOWS_FROM, tracer.activeSpan() != null ? tracer.activeSpan().context() : null)\n-                    .start();\n-            span.setTag(\"component\", \"java-azure-sdk\");\n-            span.setTag(\"http.method\", request.method());\n-            TracingUtil.setTagsFromMdc(span);\n-            try (Scope ignored = tracer.activateSpan(span)) {\n-                Response response = chain.proceed(request);\n-                if (response.isSuccessful()) {\n-                    span.setTag(\"error\", false);\n-                } else {\n-                    span.setTag(\"error\", true);\n-                    span.log(Map.of(\"responseCode\", response.code(), \"message\", response.message()));\n-                }\n-                return response;\n-            } finally {\n-                span.finish();\n-            }\n-        };\n-    }\n-\n     private AzureTokenCredentials getAzureCredentials() {\n         String tenantId = credentialView.getTenantId();\n         String clientId = credentialView.getAccessKey();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ4MzM4NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9051#discussion_r492483385", "bodyText": "I think it would be nice if you would inject a new class here, like AzureTracer and it would have the public Interceptor getTracingInterceptor() method and you could pass that along. So it would have the responsibility creating the interceptor instead of AzureClientCredentials. What do you think?", "author": "lacikaaa", "createdAt": "2020-09-22T05:36:07Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClientService.java", "diffHunk": "@@ -23,6 +25,9 @@\n     @Inject\n     private AuthenticationContextProvider authenticationContextProvider;\n \n+    @Inject\n+    private Tracer tracer;", "originalCommit": "08d457bd1a7121d758849fc0ce00faa259f9c31c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ5MjYxNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9051#discussion_r492492616", "bodyText": "Im going to create TracingInterceptor as a separate class and inject it directly instead", "author": "attilapalfi92", "createdAt": "2020-09-22T06:10:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ4MzM4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e40b0e0352667e6537c8e4f6c16e8ba81940fec8", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClientService.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClientService.java\nindex f6c242baa5..99c209b3a0 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClientService.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClientService.java\n\n@@ -26,7 +25,7 @@ public class AzureClientService {\n     private AuthenticationContextProvider authenticationContextProvider;\n \n     @Inject\n-    private Tracer tracer;\n+    private AzureOkHttp3TracingInterceptor tracingInterceptor;\n \n     public AuthenticatedContext createAuthenticatedContext(CloudContext cloudContext, CloudCredential cloudCredential) {\n         AuthenticatedContext authenticatedContext = new AuthenticatedContext(cloudContext, cloudCredential);\n"}}, {"oid": "e40b0e0352667e6537c8e4f6c16e8ba81940fec8", "url": "https://github.com/hortonworks/cloudbreak/commit/e40b0e0352667e6537c8e4f6c16e8ba81940fec8", "message": "CB-8878 - added opentracing instrumentation for azure api calls", "committedDate": "2020-09-22T08:16:24Z", "type": "forcePushed"}, {"oid": "4c0021a92bd81c91161a78621bd82d31327002af", "url": "https://github.com/hortonworks/cloudbreak/commit/4c0021a92bd81c91161a78621bd82d31327002af", "message": "CB-8878 - added opentracing instrumentation for azure api calls", "committedDate": "2020-09-22T08:59:03Z", "type": "commit"}, {"oid": "4c0021a92bd81c91161a78621bd82d31327002af", "url": "https://github.com/hortonworks/cloudbreak/commit/4c0021a92bd81c91161a78621bd82d31327002af", "message": "CB-8878 - added opentracing instrumentation for azure api calls", "committedDate": "2020-09-22T08:59:03Z", "type": "forcePushed"}]}