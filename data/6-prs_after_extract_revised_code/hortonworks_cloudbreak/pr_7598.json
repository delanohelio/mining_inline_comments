{"pr_number": 7598, "pr_title": "CB-5904: Use CA DNS name for Kerberos and LDAP", "pr_createdAt": "2020-03-16T16:26:04Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7598", "timeline": [{"oid": "434c4ef67b8e73a7dedc2db4a162cb3838ebb362", "url": "https://github.com/hortonworks/cloudbreak/commit/434c4ef67b8e73a7dedc2db4a162cb3838ebb362", "message": "CB-5904: Use CA DNS name for Kerberos and LDAP\n\nThe kerberos configuration and ldap configuration will use a DNS load\nbalanced entry. This will allow a failed client to reconnect to a\ndifferent server.\n\nSome of the unit tests were updated and it was manually tested with an\nLDAP client. The LDAP client tries the first DNS entry and on failure,\nit can retry. FreeIPA returns the entries in a random order, so it\nwill eventually try a working node. Java can be configured to cache\ngood and bad nodes.", "committedDate": "2020-03-17T03:56:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ5OTEyNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7598#discussion_r393499127", "bodyText": "please remove these too", "author": "lacikaaa", "createdAt": "2020-03-17T08:01:25Z", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/doc/FreeIpaModelDescriptions.java", "diffHunk": "@@ -89,5 +89,9 @@ private FreeIpaModelDescriptions() {\n         public static final String HOSTNAME = \"Base hostname for FreeIPA servers\";\n         public static final String ADMIN_GROUP_NAME = \"Name of the admin group to be used for all the services.\";\n         public static final String TAGS = \"Tags on freeipa.\";\n+        public static final String FREEIPA_HOST = \"A DNS load balanced FQDN to the FreeIPA servers\";\n+        public static final String FREEIPA_PORT = \"The port for the load balanced FQDN to the FreeIPA servers\";\n+        public static final String IPA_HOST = \"A DNS load balanced FQDN to the FreeIPA servers\";\n+        public static final String IPA_PORT = \"The port for the load balanced FQDN to the FreeIPA servers\";", "originalCommit": "434c4ef67b8e73a7dedc2db4a162cb3838ebb362", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8365f247770a54055ad815a9ceee8eda9a3228fc", "chunk": "diff --git a/freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/doc/FreeIpaModelDescriptions.java b/freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/doc/FreeIpaModelDescriptions.java\nindex 04520350af..6e744a69fa 100644\n--- a/freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/doc/FreeIpaModelDescriptions.java\n+++ b/freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/doc/FreeIpaModelDescriptions.java\n\n@@ -91,7 +91,5 @@ public class FreeIpaModelDescriptions {\n         public static final String TAGS = \"Tags on freeipa.\";\n         public static final String FREEIPA_HOST = \"A DNS load balanced FQDN to the FreeIPA servers\";\n         public static final String FREEIPA_PORT = \"The port for the load balanced FQDN to the FreeIPA servers\";\n-        public static final String IPA_HOST = \"A DNS load balanced FQDN to the FreeIPA servers\";\n-        public static final String IPA_PORT = \"The port for the load balanced FQDN to the FreeIPA servers\";\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwMDMwOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7598#discussion_r393500309", "bodyText": "why error? asdj?", "author": "lacikaaa", "createdAt": "2020-03-17T08:04:02Z", "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClient.java", "diffHunk": "@@ -468,6 +468,20 @@ public DnsZone addReverseDnsZone(String cidr) throws FreeIpaClientException {\n         return (DnsZone) invoke(\"dnszone_add\", flags, params, DnsZone.class).getResult();\n     }\n \n+    public DnsRecord getDnsRecord(String dnsZoneName, String recordName) throws FreeIpaClientException {\n+        List<String> flags = List.of(dnsZoneName, recordName);\n+        Map<String, Object> params = Map.of();\n+        return (DnsRecord) invoke(\"dnsrecord_show\", flags, params, DnsRecord.class).getResult();\n+    }\n+\n+    public DnsRecord addDnsCnameRecord(String dnsZoneName, String recordName, String cnameRecord) throws FreeIpaClientException {\n+        LOGGER.error(\"ASDJ CNAME \" + dnsZoneName + \" -- \" + recordName + \"  -- \" + cnameRecord + \" -- \");", "originalCommit": "434c4ef67b8e73a7dedc2db4a162cb3838ebb362", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwNDk1Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7598#discussion_r393704956", "bodyText": "I removed this log statement. The caller of this method logs debug messages.", "author": "jamisonbennett", "createdAt": "2020-03-17T14:07:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwMDMwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8365f247770a54055ad815a9ceee8eda9a3228fc", "chunk": "diff --git a/freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClient.java b/freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClient.java\nindex a2ac1d6475..4b4d579b1c 100644\n--- a/freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClient.java\n+++ b/freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClient.java\n\n@@ -475,7 +475,6 @@ public class FreeIpaClient {\n     }\n \n     public DnsRecord addDnsCnameRecord(String dnsZoneName, String recordName, String cnameRecord) throws FreeIpaClientException {\n-        LOGGER.error(\"ASDJ CNAME \" + dnsZoneName + \" -- \" + recordName + \"  -- \" + cnameRecord + \" -- \");\n         List<String> flags = List.of(dnsZoneName, recordName);\n         Map<String, Object> params = Map.of(\n                 \"cnamerecord\", Set.of(cnameRecord + \".\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwMTQwMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7598#discussion_r393501402", "bodyText": "could you move these to a separate class?", "author": "lacikaaa", "createdAt": "2020-03-17T08:06:40Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/flow/FreeIpaPostInstallService.java", "diffHunk": "@@ -95,4 +104,35 @@ private void modifyAdminPasswordExpirationIfNeeded(FreeIpaClient client) throws\n             LOGGER.debug(\"Password expiration is already set.\");\n         }\n     }\n+\n+    private void addDnsLoadBalancedEntries(FreeIpaClient client, FreeIpa freeIpa) throws FreeIpaClientException {\n+\n+        String domain = freeIpa.getDomain();\n+        String loadBalancedName = FreeIpaDomainUtils.getBuiltInFreeIpaDnsLoadBalancedName(domain);\n+        Set<String> cnames = Set.of(\n+                FreeIpaDomainUtils.getKdcHost(),\n+                FreeIpaDomainUtils.getKerberosHost(),\n+                FreeIpaDomainUtils.getLdapHost(),\n+                FreeIpaDomainUtils.getFreeIpaHost());\n+\n+        for (String cname : cnames) {\n+            if (!hasDnsRecord(client, domain, cname)) {\n+                client.addDnsCnameRecord(domain, cname, loadBalancedName);\n+            } else {\n+                LOGGER.debug(\"Skipping adding DNS cname for {} because it already exists\", cname);\n+            }\n+        }\n+    }\n+\n+    private boolean hasDnsRecord(FreeIpaClient client, String domain, String cname) throws FreeIpaClientException {\n+        try {\n+            client.getDnsRecord(domain, cname);\n+            return true;\n+        } catch (FreeIpaClientException e) {\n+            if (FreeIpaClientExceptionUtil.isNotFoundException(e)) {\n+                return false;\n+            }\n+            throw e;\n+        }\n+    }", "originalCommit": "434c4ef67b8e73a7dedc2db4a162cb3838ebb362", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8365f247770a54055ad815a9ceee8eda9a3228fc", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/flow/FreeIpaPostInstallService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/flow/FreeIpaPostInstallService.java\nindex 28a51c89ae..929d858a04 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/flow/FreeIpaPostInstallService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/flow/FreeIpaPostInstallService.java\n\n@@ -105,34 +106,4 @@ public class FreeIpaPostInstallService {\n         }\n     }\n \n-    private void addDnsLoadBalancedEntries(FreeIpaClient client, FreeIpa freeIpa) throws FreeIpaClientException {\n-\n-        String domain = freeIpa.getDomain();\n-        String loadBalancedName = FreeIpaDomainUtils.getBuiltInFreeIpaDnsLoadBalancedName(domain);\n-        Set<String> cnames = Set.of(\n-                FreeIpaDomainUtils.getKdcHost(),\n-                FreeIpaDomainUtils.getKerberosHost(),\n-                FreeIpaDomainUtils.getLdapHost(),\n-                FreeIpaDomainUtils.getFreeIpaHost());\n-\n-        for (String cname : cnames) {\n-            if (!hasDnsRecord(client, domain, cname)) {\n-                client.addDnsCnameRecord(domain, cname, loadBalancedName);\n-            } else {\n-                LOGGER.debug(\"Skipping adding DNS cname for {} because it already exists\", cname);\n-            }\n-        }\n-    }\n-\n-    private boolean hasDnsRecord(FreeIpaClient client, String domain, String cname) throws FreeIpaClientException {\n-        try {\n-            client.getDnsRecord(domain, cname);\n-            return true;\n-        } catch (FreeIpaClientException e) {\n-            if (FreeIpaClientExceptionUtil.isNotFoundException(e)) {\n-                return false;\n-            }\n-            throw e;\n-        }\n-    }\n }\n"}}, {"oid": "8365f247770a54055ad815a9ceee8eda9a3228fc", "url": "https://github.com/hortonworks/cloudbreak/commit/8365f247770a54055ad815a9ceee8eda9a3228fc", "message": "CB-5904: Use CA DNS name for Kerberos and LDAP\n\nThe kerberos configuration and ldap configuration will use a DNS load\nbalanced entry. This will allow a failed client to reconnect to a\ndifferent server.\n\nSome of the unit tests were updated and it was manually tested with an\nLDAP client. The LDAP client tries the first DNS entry and on failure,\nit can retry. FreeIPA returns the entries in a random order, so it\nwill eventually try a working node. Java can be configured to cache\ngood and bad nodes.", "committedDate": "2020-03-17T14:05:47Z", "type": "forcePushed"}, {"oid": "7a722caaaeec47c6a7800e690617223b70395179", "url": "https://github.com/hortonworks/cloudbreak/commit/7a722caaaeec47c6a7800e690617223b70395179", "message": "CB-5904: Use CA DNS name for Kerberos and LDAP\n\nThe kerberos configuration and ldap configuration will use a DNS load\nbalanced entry. This will allow a failed client to reconnect to a\ndifferent server.\n\nSome of the unit tests were updated and it was manually tested with an\nLDAP client. The LDAP client tries the first DNS entry and on failure,\nit can retry. FreeIPA returns the entries in a random order, so it\nwill eventually try a working node. Java can be configured to cache\ngood and bad nodes.", "committedDate": "2020-03-19T13:18:21Z", "type": "forcePushed"}, {"oid": "c6610c4bb5862e6952e94f3a62e2108b98a80673", "url": "https://github.com/hortonworks/cloudbreak/commit/c6610c4bb5862e6952e94f3a62e2108b98a80673", "message": "CB-5904: Use CA DNS name for Kerberos and LDAP\n\nThe kerberos configuration and ldap configuration will use a DNS load\nbalanced entry. This will allow a failed client to reconnect to a\ndifferent server.\n\nSome of the unit tests were updated and it was manually tested with an\nLDAP client. The LDAP client tries the first DNS entry and on failure,\nit can retry. FreeIPA returns the entries in a random order, so it\nwill eventually try a working node. Java can be configured to cache\ngood and bad nodes.", "committedDate": "2020-03-19T18:14:51Z", "type": "commit"}, {"oid": "c6610c4bb5862e6952e94f3a62e2108b98a80673", "url": "https://github.com/hortonworks/cloudbreak/commit/c6610c4bb5862e6952e94f3a62e2108b98a80673", "message": "CB-5904: Use CA DNS name for Kerberos and LDAP\n\nThe kerberos configuration and ldap configuration will use a DNS load\nbalanced entry. This will allow a failed client to reconnect to a\ndifferent server.\n\nSome of the unit tests were updated and it was manually tested with an\nLDAP client. The LDAP client tries the first DNS entry and on failure,\nit can retry. FreeIPA returns the entries in a random order, so it\nwill eventually try a working node. Java can be configured to cache\ngood and bad nodes.", "committedDate": "2020-03-19T18:14:51Z", "type": "forcePushed"}]}