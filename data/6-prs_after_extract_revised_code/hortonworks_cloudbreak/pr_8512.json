{"pr_number": 8512, "pr_title": "Cb-7808 Flow events are missing from Structuctured events", "pr_createdAt": "2020-07-08T15:53:00Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8512", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc5MjgyMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8512#discussion_r451792823", "bodyText": "egacy -> legacy", "author": "doktoric", "createdAt": "2020-07-08T20:00:09Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/decorator/responseprovider/StackResponseEventProvider.java", "diffHunk": "@@ -15,17 +19,34 @@\n \n @Component\n public class StackResponseEventProvider implements ResponseProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackResponseEventProvider.class);\n+\n     @Inject\n     private CloudbreakEventsFacade cloudbreakEventsFacade;\n \n     @Override\n     public StackV4Response providerEntriesToStackResponse(Stack stack, StackV4Response stackResponse) {\n+        List<CloudbreakEventV4Response> events = new ArrayList<>();\n         List<CloudbreakEventV4Response> cloudbreakEvents = cloudbreakEventsFacade\n                 .retrieveEventsByStack(stack.getId(), stack.getType(), PageRequest.of(0, Integer.MAX_VALUE)).getContent();\n-        stackResponse.setCloudbreakEvents(cloudbreakEvents);\n+        events.addAll(cloudbreakEvents);\n+        events.addAll(getLegacyStackType(stack));\n+        stackResponse.setCloudbreakEvents(events);\n         return stackResponse;\n     }\n \n+    private List<CloudbreakEventV4Response> getLegacyStackType(Stack stack) {\n+        List<CloudbreakEventV4Response> events = cloudbreakEventsFacade\n+                .retrieveEventsByStack(stack.getId(), StackType.LEGACY, PageRequest.of(0, Integer.MAX_VALUE)).getContent();\n+        if (events.isEmpty()) {\n+            LOGGER.info(\"Cannot find any legacy events for stack: {}, crn: {}\", stack.getId(), stack.getResourceCrn());\n+        } else {\n+            LOGGER.info(\"{} egacy events for stack: {}, crn: {}\", events.size(), stack.getId(), stack.getResourceCrn());", "originalCommit": "5e1d94f5ebf97e58d00a2fec8763b44e7466f08f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8b766a05a8cdb0e8aea8b9b401cd485b298c1fd0", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/service/decorator/responseprovider/StackResponseEventProvider.java b/core/src/main/java/com/sequenceiq/cloudbreak/service/decorator/responseprovider/StackResponseEventProvider.java\nindex 8646a57037..f91b9b6749 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/service/decorator/responseprovider/StackResponseEventProvider.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/service/decorator/responseprovider/StackResponseEventProvider.java\n\n@@ -42,7 +42,7 @@ public class StackResponseEventProvider implements ResponseProvider {\n         if (events.isEmpty()) {\n             LOGGER.info(\"Cannot find any legacy events for stack: {}, crn: {}\", stack.getId(), stack.getResourceCrn());\n         } else {\n-            LOGGER.info(\"{} egacy events for stack: {}, crn: {}\", events.size(), stack.getId(), stack.getResourceCrn());\n+            LOGGER.info(\"{} legacy events for stack: {}, crn: {}\", events.size(), stack.getId(), stack.getResourceCrn());\n         }\n         return events;\n     }\n"}}, {"oid": "8b766a05a8cdb0e8aea8b9b401cd485b298c1fd0", "url": "https://github.com/hortonworks/cloudbreak/commit/8b766a05a8cdb0e8aea8b9b401cd485b298c1fd0", "message": "Cb-7808 Flow events are missing from Structuctured events\nWe filtered the structured events to datalake and datahub only but before 2.25 the CB stored as stacks. The legacy resource type added", "committedDate": "2020-07-09T05:58:56Z", "type": "commit"}, {"oid": "8b766a05a8cdb0e8aea8b9b401cd485b298c1fd0", "url": "https://github.com/hortonworks/cloudbreak/commit/8b766a05a8cdb0e8aea8b9b401cd485b298c1fd0", "message": "Cb-7808 Flow events are missing from Structuctured events\nWe filtered the structured events to datalake and datahub only but before 2.25 the CB stored as stacks. The legacy resource type added", "committedDate": "2020-07-09T05:58:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA3Nzg0NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8512#discussion_r452077844", "bodyText": "I don't see any tests which ensure that events are not broken again.", "author": "akanto", "createdAt": "2020-07-09T09:13:35Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/decorator/responseprovider/StackResponseEventProvider.java", "diffHunk": "@@ -15,17 +19,34 @@\n \n @Component\n public class StackResponseEventProvider implements ResponseProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackResponseEventProvider.class);\n+\n     @Inject\n     private CloudbreakEventsFacade cloudbreakEventsFacade;\n \n     @Override\n     public StackV4Response providerEntriesToStackResponse(Stack stack, StackV4Response stackResponse) {\n+        List<CloudbreakEventV4Response> events = new ArrayList<>();\n         List<CloudbreakEventV4Response> cloudbreakEvents = cloudbreakEventsFacade\n                 .retrieveEventsByStack(stack.getId(), stack.getType(), PageRequest.of(0, Integer.MAX_VALUE)).getContent();\n-        stackResponse.setCloudbreakEvents(cloudbreakEvents);\n+        events.addAll(cloudbreakEvents);\n+        events.addAll(getLegacyStackType(stack));\n+        stackResponse.setCloudbreakEvents(events);\n         return stackResponse;\n     }\n \n+    private List<CloudbreakEventV4Response> getLegacyStackType(Stack stack) {", "originalCommit": "8b766a05a8cdb0e8aea8b9b401cd485b298c1fd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwNTU5MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8512#discussion_r452105590", "bodyText": "I think we don't have any tests what can catch this. Here is the use case:\nStart a distrox with 2.24\nUpdate Cb to 2.25\nBefore the fix, the resource type with stacks was filtered out.\nIf you want I can write a UT, but I think this test will not prevent similar cases.", "author": "topolyai5", "createdAt": "2020-07-09T10:00:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA3Nzg0NA=="}], "type": "inlineReview", "revised_code": null}]}