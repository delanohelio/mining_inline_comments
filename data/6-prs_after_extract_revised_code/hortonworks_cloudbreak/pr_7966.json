{"pr_number": 7966, "pr_title": "CB-6282 Version based image choosing", "pr_createdAt": "2020-05-04T18:37:52Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7966", "timeline": [{"oid": "96d7912fcc4005c962506cd6da86f77cf89abd88", "url": "https://github.com/hortonworks/cloudbreak/commit/96d7912fcc4005c962506cd6da86f77cf89abd88", "message": "CB-6282 Version based image choosing", "committedDate": "2020-05-05T07:27:42Z", "type": "forcePushed"}, {"oid": "68c2901885e68873a93733120a8a89f633f49b26", "url": "https://github.com/hortonworks/cloudbreak/commit/68c2901885e68873a93733120a8a89f633f49b26", "message": "CB-6282 Version based image choosing", "committedDate": "2020-05-05T08:49:40Z", "type": "forcePushed"}, {"oid": "9f7d3cea324877837931763f2282a3e6850ed3e0", "url": "https://github.com/hortonworks/cloudbreak/commit/9f7d3cea324877837931763f2282a3e6850ed3e0", "message": "CB-6282 Version based image choosing", "committedDate": "2020-05-05T10:22:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc0NDA3Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7966#discussion_r420744077", "bodyText": "you could remove the package here", "author": "lacikaaa", "createdAt": "2020-05-06T12:16:41Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java", "diffHunk": "@@ -8,12 +8,12 @@\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.common.api.type.InstanceGroupType;\n-import com.sequenceiq.freeipa.entity.Image;\n+import com.sequenceiq.freeipa.entity.ImageEntity;\n \n @Component\n-public class ImageConverter implements Converter<Image, com.sequenceiq.cloudbreak.cloud.model.Image> {\n+public class ImageConverter implements Converter<ImageEntity, com.sequenceiq.cloudbreak.cloud.model.Image> {\n     @Override\n-    public com.sequenceiq.cloudbreak.cloud.model.Image convert(Image source) {\n+    public com.sequenceiq.cloudbreak.cloud.model.Image convert(ImageEntity source) {", "originalCommit": "9f7d3cea324877837931763f2282a3e6850ed3e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java\nindex 6e8684cf39..94e509bfba 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java\n\n@@ -7,15 +7,16 @@ import java.util.Optional;\n import org.springframework.core.convert.converter.Converter;\n import org.springframework.stereotype.Component;\n \n+import com.sequenceiq.cloudbreak.cloud.model.Image;\n import com.sequenceiq.common.api.type.InstanceGroupType;\n import com.sequenceiq.freeipa.entity.ImageEntity;\n \n @Component\n-public class ImageConverter implements Converter<ImageEntity, com.sequenceiq.cloudbreak.cloud.model.Image> {\n+public class ImageConverter implements Converter<ImageEntity, Image> {\n     @Override\n-    public com.sequenceiq.cloudbreak.cloud.model.Image convert(ImageEntity source) {\n-        com.sequenceiq.cloudbreak.cloud.model.Image image =\n-                new com.sequenceiq.cloudbreak.cloud.model.Image(source.getImageName(),\n+    public Image convert(ImageEntity source) {\n+        Image image =\n+                new Image(source.getImageName(),\n                         Map.of(InstanceGroupType.GATEWAY, Optional.ofNullable(source.getUserdata()).orElse(\"\")),\n                         source.getOs(),\n                         source.getOsType(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc0NDI2Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7966#discussion_r420744262", "bodyText": "same here, remove the package", "author": "lacikaaa", "createdAt": "2020-05-06T12:17:03Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java", "diffHunk": "@@ -3,15 +3,15 @@\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.cloudbreak.converter.AbstractConversionServiceAwareConverter;\n-import com.sequenceiq.freeipa.entity.Image;\n+import com.sequenceiq.freeipa.entity.ImageEntity;\n \n @Component\n-public class ImageToImageEntityConverter extends AbstractConversionServiceAwareConverter<com.sequenceiq.freeipa.api.model.image.Image, Image> {\n+public class ImageToImageEntityConverter extends AbstractConversionServiceAwareConverter<com.sequenceiq.freeipa.api.model.image.Image, ImageEntity> {\n \n     @Override\n-    public Image convert(com.sequenceiq.freeipa.api.model.image.Image source) {\n+    public ImageEntity convert(com.sequenceiq.freeipa.api.model.image.Image source) {", "originalCommit": "9f7d3cea324877837931763f2282a3e6850ed3e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java\nindex ad0e461498..47cd6b393d 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java\n\n@@ -3,13 +3,14 @@ package com.sequenceiq.freeipa.converter.image;\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.cloudbreak.converter.AbstractConversionServiceAwareConverter;\n+import com.sequenceiq.freeipa.api.model.image.Image;\n import com.sequenceiq.freeipa.entity.ImageEntity;\n \n @Component\n-public class ImageToImageEntityConverter extends AbstractConversionServiceAwareConverter<com.sequenceiq.freeipa.api.model.image.Image, ImageEntity> {\n+public class ImageToImageEntityConverter extends AbstractConversionServiceAwareConverter<Image, ImageEntity> {\n \n     @Override\n-    public ImageEntity convert(com.sequenceiq.freeipa.api.model.image.Image source) {\n+    public ImageEntity convert(Image source) {\n \n         ImageEntity imageEntity = new ImageEntity();\n         imageEntity.setImageId(source.getUuid());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc0NjQyNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7966#discussion_r420746427", "bodyText": "refactor this into a method please. I mean the part after versions ->", "author": "lacikaaa", "createdAt": "2020-05-06T12:20:54Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java", "diffHunk": "@@ -91,7 +93,19 @@ private ImageCatalog filterImagesByOsType(ImageCatalog catalog) {\n         }\n         List<Image> catalogImages = catalog.getImages().getFreeipaImages();\n         List<Image> filterImages = filterImages(catalogImages, enabledOsPredicate());\n-        return new ImageCatalog(new Images(filterImages));\n+        List<FreeIpaVersions> filteredVersions = filterVersions(catalog, filterImages);\n+        return new ImageCatalog(new Images(filterImages), new Versions(filteredVersions));\n+    }\n+\n+    private List<FreeIpaVersions> filterVersions(ImageCatalog catalog, List<Image> filterImages) {\n+        List<String> filteredUuids = filterImages.stream().map(Image::getUuid).collect(Collectors.toList());\n+        return catalog.getVersions().getFreeIpaVersions().stream()\n+                .map(versions -> {\n+                    List<String> defaults = versions.getDefaults().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n+                    List<String> imageIds = versions.getImageIds().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n+                    LOGGER.debug(\"Filtered versions: [versions: {}, defaults: {}, images: {}]\", versions.getVersions(), defaults, imageIds);\n+                    return new FreeIpaVersions(versions.getVersions(), defaults, imageIds);\n+                }).collect(Collectors.toList());", "originalCommit": "9f7d3cea324877837931763f2282a3e6850ed3e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java\nindex fdabd589bb..13d951dcfc 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java\n\n@@ -99,13 +99,16 @@ public class ImageCatalogProvider {\n \n     private List<FreeIpaVersions> filterVersions(ImageCatalog catalog, List<Image> filterImages) {\n         List<String> filteredUuids = filterImages.stream().map(Image::getUuid).collect(Collectors.toList());\n+        LOGGER.debug(\"The following uuids will be removed from defaults and image ids fields: [{}]\", filteredUuids);\n         return catalog.getVersions().getFreeIpaVersions().stream()\n-                .map(versions -> {\n-                    List<String> defaults = versions.getDefaults().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n-                    List<String> imageIds = versions.getImageIds().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n-                    LOGGER.debug(\"Filtered versions: [versions: {}, defaults: {}, images: {}]\", versions.getVersions(), defaults, imageIds);\n-                    return new FreeIpaVersions(versions.getVersions(), defaults, imageIds);\n-                }).collect(Collectors.toList());\n+                .map(versions -> filterDefaultsAndImageIds(filteredUuids, versions)).collect(Collectors.toList());\n+    }\n+\n+    private FreeIpaVersions filterDefaultsAndImageIds(List<String> filteredUuids, FreeIpaVersions versions) {\n+        List<String> defaults = versions.getDefaults().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n+        List<String> imageIds = versions.getImageIds().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n+        LOGGER.debug(\"Filtered versions: [versions: {}, defaults: {}, images: {}]\", versions.getVersions(), defaults, imageIds);\n+        return new FreeIpaVersions(versions.getVersions(), defaults, imageIds);\n     }\n \n     private List<Image> filterImages(List<Image> imageList, Predicate<Image> predicate) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc0NjczNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7966#discussion_r420746737", "bodyText": "should we log this? just to make investigation easier", "author": "lacikaaa", "createdAt": "2020-05-06T12:21:26Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java", "diffHunk": "@@ -91,7 +93,19 @@ private ImageCatalog filterImagesByOsType(ImageCatalog catalog) {\n         }\n         List<Image> catalogImages = catalog.getImages().getFreeipaImages();\n         List<Image> filterImages = filterImages(catalogImages, enabledOsPredicate());\n-        return new ImageCatalog(new Images(filterImages));\n+        List<FreeIpaVersions> filteredVersions = filterVersions(catalog, filterImages);\n+        return new ImageCatalog(new Images(filterImages), new Versions(filteredVersions));\n+    }\n+\n+    private List<FreeIpaVersions> filterVersions(ImageCatalog catalog, List<Image> filterImages) {\n+        List<String> filteredUuids = filterImages.stream().map(Image::getUuid).collect(Collectors.toList());", "originalCommit": "9f7d3cea324877837931763f2282a3e6850ed3e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java\nindex fdabd589bb..13d951dcfc 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java\n\n@@ -99,13 +99,16 @@ public class ImageCatalogProvider {\n \n     private List<FreeIpaVersions> filterVersions(ImageCatalog catalog, List<Image> filterImages) {\n         List<String> filteredUuids = filterImages.stream().map(Image::getUuid).collect(Collectors.toList());\n+        LOGGER.debug(\"The following uuids will be removed from defaults and image ids fields: [{}]\", filteredUuids);\n         return catalog.getVersions().getFreeIpaVersions().stream()\n-                .map(versions -> {\n-                    List<String> defaults = versions.getDefaults().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n-                    List<String> imageIds = versions.getImageIds().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n-                    LOGGER.debug(\"Filtered versions: [versions: {}, defaults: {}, images: {}]\", versions.getVersions(), defaults, imageIds);\n-                    return new FreeIpaVersions(versions.getVersions(), defaults, imageIds);\n-                }).collect(Collectors.toList());\n+                .map(versions -> filterDefaultsAndImageIds(filteredUuids, versions)).collect(Collectors.toList());\n+    }\n+\n+    private FreeIpaVersions filterDefaultsAndImageIds(List<String> filteredUuids, FreeIpaVersions versions) {\n+        List<String> defaults = versions.getDefaults().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n+        List<String> imageIds = versions.getImageIds().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n+        LOGGER.debug(\"Filtered versions: [versions: {}, defaults: {}, images: {}]\", versions.getVersions(), defaults, imageIds);\n+        return new FreeIpaVersions(versions.getVersions(), defaults, imageIds);\n     }\n \n     private List<Image> filterImages(List<Image> imageList, Predicate<Image> predicate) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc0ODIxNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7966#discussion_r420748217", "bodyText": "so I think this will match something 2.2.2-dcv, 2.2.2-rev etc. I think we should match only dev or rc", "author": "lacikaaa", "createdAt": "2020-05-06T12:24:04Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java", "diffHunk": "@@ -29,6 +36,8 @@\n \n     private static final String DEFAULT_REGION = \"default\";\n \n+    private static final Pattern VERSION_PATTERN = Pattern.compile(\"^([0-9]+\\\\.[0-9]+\\\\.[0-9]+-([d,r][e,c][v]?\\\\.|[b]))[0-9]+$\");", "originalCommit": "9f7d3cea324877837931763f2282a3e6850ed3e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 03b6639445..6984c6b2bb 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n\n@@ -36,7 +37,7 @@ public class ImageService {\n \n     private static final String DEFAULT_REGION = \"default\";\n \n-    private static final Pattern VERSION_PATTERN = Pattern.compile(\"^([0-9]+\\\\.[0-9]+\\\\.[0-9]+-([d,r][e,c][v]?\\\\.|[b]))[0-9]+$\");\n+    private static final Pattern VERSION_PATTERN = Pattern.compile(\"^([0-9]+\\\\.[0-9]+\\\\.[0-9]+-(dev\\\\.|rc\\\\.|[b]))[0-9]+$\");\n \n     @Inject\n     private ImageToImageEntityConverter imageConverter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc0ODk5NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7966#discussion_r420748995", "bodyText": "extract to method please", "author": "lacikaaa", "createdAt": "2020-05-06T12:25:24Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java", "diffHunk": "@@ -53,46 +65,111 @@ public Image create(Stack stack, ImageSettingsRequest imageRequest) {\n         LOGGER.info(\"Selected VM image for CloudPlatform '{}' and region '{}' is: {} from: {} image catalog\",\n                 platformString, region, imageName, catalogUrl);\n \n-        Image image = imageConverter.convert(imageCatalogImage);\n-        image.setStack(stack);\n-        image.setImageName(imageName);\n-        image.setImageCatalogUrl(catalogUrl);\n-        return imageRepository.save(image);\n+        ImageEntity imageEntity = imageConverter.convert(imageCatalogImage);\n+        imageEntity.setStack(stack);\n+        imageEntity.setImageName(imageName);\n+        imageEntity.setImageCatalogUrl(catalogUrl);\n+        return imageRepository.save(imageEntity);\n     }\n \n-    public Image getByStack(Stack stack) {\n+    public ImageEntity getByStack(Stack stack) {\n         return imageRepository.getByStack(stack);\n     }\n \n-    public Image getByStackId(Long stackId) {\n+    public ImageEntity getByStackId(Long stackId) {\n         return imageRepository.getByStackId(stackId);\n     }\n \n-    public Image decorateImageWithUserDataForStack(Stack stack, String userdata) {\n-        Image image = getByStack(stack);\n-        image.setUserdata(userdata);\n-        return imageRepository.save(image);\n+    public ImageEntity decorateImageWithUserDataForStack(Stack stack, String userdata) {\n+        ImageEntity imageEntity = getByStack(stack);\n+        imageEntity.setUserdata(userdata);\n+        return imageRepository.save(imageEntity);\n     }\n \n-    public com.sequenceiq.freeipa.api.model.image.Image getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n+    public Image getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n         String imageId = imageSettings.getId();\n         String catalogUrl = Objects.nonNull(imageSettings.getCatalog()) ? imageSettings.getCatalog() : defaultCatalogUrl;\n         String imageOs = Objects.nonNull(imageSettings.getOs()) ? imageSettings.getOs() : defaultOs;\n \n-        List<com.sequenceiq.freeipa.api.model.image.Image> images = imageCatalogProvider.getImageCatalog(catalogUrl).getImages().getFreeipaImages();\n-        Optional<? extends com.sequenceiq.freeipa.api.model.image.Image> image = findImage(imageId, imageOs, images, region, platform);\n-        if (image.isEmpty()) {\n-            imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n-            images = imageCatalogProvider.getImageCatalog(catalogUrl).getImages().getFreeipaImages();\n-            image = findImage(imageId, imageOs, images, region, platform);\n-            if (image.isEmpty()) {\n-                throw new ImageNotFoundException(String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs));\n-            }\n+        ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+        return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n+                .or(() -> {\n+                    LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n+                    LOGGER.debug(\"Evicting image catalog cache to retry.\");\n+                    imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n+                    ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+                    return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);", "originalCommit": "9f7d3cea324877837931763f2282a3e6850ed3e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 03b6639445..6984c6b2bb 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n\n@@ -93,17 +94,26 @@ public class ImageService {\n \n         ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n         return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n-                .or(() -> {\n-                    LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n-                    LOGGER.debug(\"Evicting image catalog cache to retry.\");\n-                    imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n-                    ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n-                    return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n-                })\n-                .orElseThrow(() -> {\n-                    String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n-                    return new ImageNotFoundException(message);\n-                });\n+                .or(retryAfterEvictingCache(region, platform, imageId, catalogUrl, imageOs))\n+                .orElseThrow(throwImageNotFoundException(region, imageId, imageOs));\n+    }\n+\n+    private Supplier<ImageNotFoundException> throwImageNotFoundException(String region, String imageId, String imageOs) {\n+        return () -> {\n+            LOGGER.warn(\"Image not found in refreshed image catalog, by parameters: imageid: {}, region: {}, imageOs: {}\", imageId, region, imageOs);\n+            String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n+            return new ImageNotFoundException(message);\n+        };\n+    }\n+\n+    private Supplier<Optional<? extends Image>> retryAfterEvictingCache(String region, String platform, String imageId, String catalogUrl, String imageOs) {\n+        return () -> {\n+            LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n+            LOGGER.debug(\"Evicting image catalog cache to retry.\");\n+            imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n+            ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+            return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n+        };\n     }\n \n     private Optional<Image> findImageForAppVersion(String region, String platform, String imageId, String imageOs, ImageCatalog catalog) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc0OTU5Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7966#discussion_r420749597", "bodyText": "extract this also, maybe we should log something here", "author": "lacikaaa", "createdAt": "2020-05-06T12:26:27Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java", "diffHunk": "@@ -53,46 +65,111 @@ public Image create(Stack stack, ImageSettingsRequest imageRequest) {\n         LOGGER.info(\"Selected VM image for CloudPlatform '{}' and region '{}' is: {} from: {} image catalog\",\n                 platformString, region, imageName, catalogUrl);\n \n-        Image image = imageConverter.convert(imageCatalogImage);\n-        image.setStack(stack);\n-        image.setImageName(imageName);\n-        image.setImageCatalogUrl(catalogUrl);\n-        return imageRepository.save(image);\n+        ImageEntity imageEntity = imageConverter.convert(imageCatalogImage);\n+        imageEntity.setStack(stack);\n+        imageEntity.setImageName(imageName);\n+        imageEntity.setImageCatalogUrl(catalogUrl);\n+        return imageRepository.save(imageEntity);\n     }\n \n-    public Image getByStack(Stack stack) {\n+    public ImageEntity getByStack(Stack stack) {\n         return imageRepository.getByStack(stack);\n     }\n \n-    public Image getByStackId(Long stackId) {\n+    public ImageEntity getByStackId(Long stackId) {\n         return imageRepository.getByStackId(stackId);\n     }\n \n-    public Image decorateImageWithUserDataForStack(Stack stack, String userdata) {\n-        Image image = getByStack(stack);\n-        image.setUserdata(userdata);\n-        return imageRepository.save(image);\n+    public ImageEntity decorateImageWithUserDataForStack(Stack stack, String userdata) {\n+        ImageEntity imageEntity = getByStack(stack);\n+        imageEntity.setUserdata(userdata);\n+        return imageRepository.save(imageEntity);\n     }\n \n-    public com.sequenceiq.freeipa.api.model.image.Image getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n+    public Image getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n         String imageId = imageSettings.getId();\n         String catalogUrl = Objects.nonNull(imageSettings.getCatalog()) ? imageSettings.getCatalog() : defaultCatalogUrl;\n         String imageOs = Objects.nonNull(imageSettings.getOs()) ? imageSettings.getOs() : defaultOs;\n \n-        List<com.sequenceiq.freeipa.api.model.image.Image> images = imageCatalogProvider.getImageCatalog(catalogUrl).getImages().getFreeipaImages();\n-        Optional<? extends com.sequenceiq.freeipa.api.model.image.Image> image = findImage(imageId, imageOs, images, region, platform);\n-        if (image.isEmpty()) {\n-            imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n-            images = imageCatalogProvider.getImageCatalog(catalogUrl).getImages().getFreeipaImages();\n-            image = findImage(imageId, imageOs, images, region, platform);\n-            if (image.isEmpty()) {\n-                throw new ImageNotFoundException(String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs));\n-            }\n+        ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+        return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n+                .or(() -> {\n+                    LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n+                    LOGGER.debug(\"Evicting image catalog cache to retry.\");\n+                    imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n+                    ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+                    return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n+                })\n+                .orElseThrow(() -> {\n+                    String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n+                    return new ImageNotFoundException(message);", "originalCommit": "9f7d3cea324877837931763f2282a3e6850ed3e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 03b6639445..6984c6b2bb 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n\n@@ -93,17 +94,26 @@ public class ImageService {\n \n         ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n         return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n-                .or(() -> {\n-                    LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n-                    LOGGER.debug(\"Evicting image catalog cache to retry.\");\n-                    imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n-                    ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n-                    return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n-                })\n-                .orElseThrow(() -> {\n-                    String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n-                    return new ImageNotFoundException(message);\n-                });\n+                .or(retryAfterEvictingCache(region, platform, imageId, catalogUrl, imageOs))\n+                .orElseThrow(throwImageNotFoundException(region, imageId, imageOs));\n+    }\n+\n+    private Supplier<ImageNotFoundException> throwImageNotFoundException(String region, String imageId, String imageOs) {\n+        return () -> {\n+            LOGGER.warn(\"Image not found in refreshed image catalog, by parameters: imageid: {}, region: {}, imageOs: {}\", imageId, region, imageOs);\n+            String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n+            return new ImageNotFoundException(message);\n+        };\n+    }\n+\n+    private Supplier<Optional<? extends Image>> retryAfterEvictingCache(String region, String platform, String imageId, String catalogUrl, String imageOs) {\n+        return () -> {\n+            LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n+            LOGGER.debug(\"Evicting image catalog cache to retry.\");\n+            imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n+            ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+            return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n+        };\n     }\n \n     private Optional<Image> findImageForAppVersion(String region, String platform, String imageId, String imageOs, ImageCatalog catalog) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1MDU0NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7966#discussion_r420750545", "bodyText": "these should be moved to a well named method so I don't have to check the log lines to see whats happening :)", "author": "lacikaaa", "createdAt": "2020-05-06T12:28:02Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java", "diffHunk": "@@ -53,46 +65,111 @@ public Image create(Stack stack, ImageSettingsRequest imageRequest) {\n         LOGGER.info(\"Selected VM image for CloudPlatform '{}' and region '{}' is: {} from: {} image catalog\",\n                 platformString, region, imageName, catalogUrl);\n \n-        Image image = imageConverter.convert(imageCatalogImage);\n-        image.setStack(stack);\n-        image.setImageName(imageName);\n-        image.setImageCatalogUrl(catalogUrl);\n-        return imageRepository.save(image);\n+        ImageEntity imageEntity = imageConverter.convert(imageCatalogImage);\n+        imageEntity.setStack(stack);\n+        imageEntity.setImageName(imageName);\n+        imageEntity.setImageCatalogUrl(catalogUrl);\n+        return imageRepository.save(imageEntity);\n     }\n \n-    public Image getByStack(Stack stack) {\n+    public ImageEntity getByStack(Stack stack) {\n         return imageRepository.getByStack(stack);\n     }\n \n-    public Image getByStackId(Long stackId) {\n+    public ImageEntity getByStackId(Long stackId) {\n         return imageRepository.getByStackId(stackId);\n     }\n \n-    public Image decorateImageWithUserDataForStack(Stack stack, String userdata) {\n-        Image image = getByStack(stack);\n-        image.setUserdata(userdata);\n-        return imageRepository.save(image);\n+    public ImageEntity decorateImageWithUserDataForStack(Stack stack, String userdata) {\n+        ImageEntity imageEntity = getByStack(stack);\n+        imageEntity.setUserdata(userdata);\n+        return imageRepository.save(imageEntity);\n     }\n \n-    public com.sequenceiq.freeipa.api.model.image.Image getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n+    public Image getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n         String imageId = imageSettings.getId();\n         String catalogUrl = Objects.nonNull(imageSettings.getCatalog()) ? imageSettings.getCatalog() : defaultCatalogUrl;\n         String imageOs = Objects.nonNull(imageSettings.getOs()) ? imageSettings.getOs() : defaultOs;\n \n-        List<com.sequenceiq.freeipa.api.model.image.Image> images = imageCatalogProvider.getImageCatalog(catalogUrl).getImages().getFreeipaImages();\n-        Optional<? extends com.sequenceiq.freeipa.api.model.image.Image> image = findImage(imageId, imageOs, images, region, platform);\n-        if (image.isEmpty()) {\n-            imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n-            images = imageCatalogProvider.getImageCatalog(catalogUrl).getImages().getFreeipaImages();\n-            image = findImage(imageId, imageOs, images, region, platform);\n-            if (image.isEmpty()) {\n-                throw new ImageNotFoundException(String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs));\n-            }\n+        ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+        return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n+                .or(() -> {\n+                    LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n+                    LOGGER.debug(\"Evicting image catalog cache to retry.\");\n+                    imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n+                    ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+                    return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n+                })\n+                .orElseThrow(() -> {\n+                    String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n+                    return new ImageNotFoundException(message);\n+                });\n+    }\n+\n+    private Optional<Image> findImageForAppVersion(String region, String platform, String imageId, String imageOs, ImageCatalog catalog) {\n+        List<FreeIpaVersions> versions = filterFreeIpaVersionsByAppVersion(catalog.getVersions().getFreeIpaVersions());\n+        List<Image> compatibleImages = findImage(imageId, imageOs, catalog.getImages().getFreeipaImages(), region, platform);\n+        LOGGER.debug(\"[{}] compatible images found, by the following parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\",\n+                compatibleImages.size(), imageId, imageOs, region, platform);\n+\n+        LOGGER.debug(\"Attempt to find a default image to use.\");\n+        return filterImages(versions, compatibleImages, FreeIpaVersions::getDefaults).or(\n+                () -> {\n+                    LOGGER.debug(\"Default image not found. Attempt to find an image, compatible with the application version.\");\n+                    return filterImages(versions, compatibleImages, FreeIpaVersions::getImageIds);\n+                }\n+        ).or(\n+                () -> {\n+                    LOGGER.debug(\"Not found any image compatible with the application version. Falling back to the most recent image.\");\n+                    return compatibleImages.stream().max(Comparator.comparing(Image::getDate));\n+                }", "originalCommit": "9f7d3cea324877837931763f2282a3e6850ed3e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 03b6639445..6984c6b2bb 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n\n@@ -93,17 +94,26 @@ public class ImageService {\n \n         ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n         return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n-                .or(() -> {\n-                    LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n-                    LOGGER.debug(\"Evicting image catalog cache to retry.\");\n-                    imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n-                    ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n-                    return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n-                })\n-                .orElseThrow(() -> {\n-                    String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n-                    return new ImageNotFoundException(message);\n-                });\n+                .or(retryAfterEvictingCache(region, platform, imageId, catalogUrl, imageOs))\n+                .orElseThrow(throwImageNotFoundException(region, imageId, imageOs));\n+    }\n+\n+    private Supplier<ImageNotFoundException> throwImageNotFoundException(String region, String imageId, String imageOs) {\n+        return () -> {\n+            LOGGER.warn(\"Image not found in refreshed image catalog, by parameters: imageid: {}, region: {}, imageOs: {}\", imageId, region, imageOs);\n+            String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n+            return new ImageNotFoundException(message);\n+        };\n+    }\n+\n+    private Supplier<Optional<? extends Image>> retryAfterEvictingCache(String region, String platform, String imageId, String catalogUrl, String imageOs) {\n+        return () -> {\n+            LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n+            LOGGER.debug(\"Evicting image catalog cache to retry.\");\n+            imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n+            ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+            return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n+        };\n     }\n \n     private Optional<Image> findImageForAppVersion(String region, String platform, String imageId, String imageOs, ImageCatalog catalog) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1NjI1OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7966#discussion_r420756258", "bodyText": "it's a bit hard to understand at first glance what's happening here, so I would suggest some refactor to make it easier.\nso appVersionrefix (which is misspelled) could come from a method and could be optional. similarly versionPrefix could come from a well named method and finally you could have a return like appVersionrefix.isPresent() && versionPrefix.isPresent() && appVersionrefix.get().equals(versionPrefix.get())", "author": "lacikaaa", "createdAt": "2020-05-06T12:37:37Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java", "diffHunk": "@@ -53,46 +65,111 @@ public Image create(Stack stack, ImageSettingsRequest imageRequest) {\n         LOGGER.info(\"Selected VM image for CloudPlatform '{}' and region '{}' is: {} from: {} image catalog\",\n                 platformString, region, imageName, catalogUrl);\n \n-        Image image = imageConverter.convert(imageCatalogImage);\n-        image.setStack(stack);\n-        image.setImageName(imageName);\n-        image.setImageCatalogUrl(catalogUrl);\n-        return imageRepository.save(image);\n+        ImageEntity imageEntity = imageConverter.convert(imageCatalogImage);\n+        imageEntity.setStack(stack);\n+        imageEntity.setImageName(imageName);\n+        imageEntity.setImageCatalogUrl(catalogUrl);\n+        return imageRepository.save(imageEntity);\n     }\n \n-    public Image getByStack(Stack stack) {\n+    public ImageEntity getByStack(Stack stack) {\n         return imageRepository.getByStack(stack);\n     }\n \n-    public Image getByStackId(Long stackId) {\n+    public ImageEntity getByStackId(Long stackId) {\n         return imageRepository.getByStackId(stackId);\n     }\n \n-    public Image decorateImageWithUserDataForStack(Stack stack, String userdata) {\n-        Image image = getByStack(stack);\n-        image.setUserdata(userdata);\n-        return imageRepository.save(image);\n+    public ImageEntity decorateImageWithUserDataForStack(Stack stack, String userdata) {\n+        ImageEntity imageEntity = getByStack(stack);\n+        imageEntity.setUserdata(userdata);\n+        return imageRepository.save(imageEntity);\n     }\n \n-    public com.sequenceiq.freeipa.api.model.image.Image getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n+    public Image getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n         String imageId = imageSettings.getId();\n         String catalogUrl = Objects.nonNull(imageSettings.getCatalog()) ? imageSettings.getCatalog() : defaultCatalogUrl;\n         String imageOs = Objects.nonNull(imageSettings.getOs()) ? imageSettings.getOs() : defaultOs;\n \n-        List<com.sequenceiq.freeipa.api.model.image.Image> images = imageCatalogProvider.getImageCatalog(catalogUrl).getImages().getFreeipaImages();\n-        Optional<? extends com.sequenceiq.freeipa.api.model.image.Image> image = findImage(imageId, imageOs, images, region, platform);\n-        if (image.isEmpty()) {\n-            imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n-            images = imageCatalogProvider.getImageCatalog(catalogUrl).getImages().getFreeipaImages();\n-            image = findImage(imageId, imageOs, images, region, platform);\n-            if (image.isEmpty()) {\n-                throw new ImageNotFoundException(String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs));\n-            }\n+        ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+        return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n+                .or(() -> {\n+                    LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n+                    LOGGER.debug(\"Evicting image catalog cache to retry.\");\n+                    imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n+                    ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+                    return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n+                })\n+                .orElseThrow(() -> {\n+                    String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n+                    return new ImageNotFoundException(message);\n+                });\n+    }\n+\n+    private Optional<Image> findImageForAppVersion(String region, String platform, String imageId, String imageOs, ImageCatalog catalog) {\n+        List<FreeIpaVersions> versions = filterFreeIpaVersionsByAppVersion(catalog.getVersions().getFreeIpaVersions());\n+        List<Image> compatibleImages = findImage(imageId, imageOs, catalog.getImages().getFreeipaImages(), region, platform);\n+        LOGGER.debug(\"[{}] compatible images found, by the following parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\",\n+                compatibleImages.size(), imageId, imageOs, region, platform);\n+\n+        LOGGER.debug(\"Attempt to find a default image to use.\");\n+        return filterImages(versions, compatibleImages, FreeIpaVersions::getDefaults).or(\n+                () -> {\n+                    LOGGER.debug(\"Default image not found. Attempt to find an image, compatible with the application version.\");\n+                    return filterImages(versions, compatibleImages, FreeIpaVersions::getImageIds);\n+                }\n+        ).or(\n+                () -> {\n+                    LOGGER.debug(\"Not found any image compatible with the application version. Falling back to the most recent image.\");\n+                    return compatibleImages.stream().max(Comparator.comparing(Image::getDate));\n+                }\n+        );\n+    }\n+\n+    private Optional<Image> filterImages(List<FreeIpaVersions> freeIpaVersions, List<Image> images,\n+            Function<FreeIpaVersions, List<String>> memberFunction) {\n+        List<String> imageIds = freeIpaVersions.stream().map(memberFunction).flatMap(Collection::stream).collect(Collectors.toList());\n+        return images.stream().filter(image -> imageIds.contains(image.getUuid())).max(Comparator.comparing(Image::getDate));\n+    }\n+\n+    private List<FreeIpaVersions> filterFreeIpaVersionsByAppVersion(List<FreeIpaVersions> freeIpaVersions) {\n+        List<FreeIpaVersions> exactFreeIpaVersionsMatches = freeIpaVersions.stream().filter(toExactVersionMatch()).collect(Collectors.toList());\n+        if (!exactFreeIpaVersionsMatches.isEmpty()) {\n+            LOGGER.debug(\"Exact version match found in image catalog for app version: {}\", freeIpaVersion);\n+            return exactFreeIpaVersionsMatches;\n+        }\n+        List<FreeIpaVersions> prefixFreeIpaVersions = freeIpaVersions.stream().filter(toPrefixVersionMatch()).collect(Collectors.toList());\n+        if (!prefixFreeIpaVersions.isEmpty()) {\n+            LOGGER.debug(\"Prefix version match found in image catalog for app version: {}\", freeIpaVersion);\n+            return prefixFreeIpaVersions;\n         }\n-        return image.get();\n+\n+        LOGGER.warn(\"Not found matching version in image catalog. Falling back to most recent image.\");\n+        return freeIpaVersions;\n+    }\n+\n+    private Predicate<? super FreeIpaVersions> toPrefixVersionMatch() {\n+        return freeIpaVersions -> freeIpaVersions.getVersions().stream().anyMatch(\n+                version -> {\n+                    Matcher appVersionMatcher = VERSION_PATTERN.matcher(freeIpaVersion);\n+                    if (!appVersionMatcher.matches() || appVersionMatcher.groupCount() != 2) {\n+                        return false;\n+                    }\n+                    String appVersionrefix = appVersionMatcher.group(1);\n+                    Matcher versionPrefixMatcher = VERSION_PATTERN.matcher(version);\n+                    if (!versionPrefixMatcher.matches() || versionPrefixMatcher.groupCount() != 2) {\n+                        return false;\n+                    }\n+                    String versionPrefix = versionPrefixMatcher.group(1);\n+                    return appVersionrefix.equals(versionPrefix);\n+                });", "originalCommit": "9f7d3cea324877837931763f2282a3e6850ed3e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 03b6639445..6984c6b2bb 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n\n@@ -93,17 +94,26 @@ public class ImageService {\n \n         ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n         return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n-                .or(() -> {\n-                    LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n-                    LOGGER.debug(\"Evicting image catalog cache to retry.\");\n-                    imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n-                    ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n-                    return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n-                })\n-                .orElseThrow(() -> {\n-                    String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n-                    return new ImageNotFoundException(message);\n-                });\n+                .or(retryAfterEvictingCache(region, platform, imageId, catalogUrl, imageOs))\n+                .orElseThrow(throwImageNotFoundException(region, imageId, imageOs));\n+    }\n+\n+    private Supplier<ImageNotFoundException> throwImageNotFoundException(String region, String imageId, String imageOs) {\n+        return () -> {\n+            LOGGER.warn(\"Image not found in refreshed image catalog, by parameters: imageid: {}, region: {}, imageOs: {}\", imageId, region, imageOs);\n+            String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n+            return new ImageNotFoundException(message);\n+        };\n+    }\n+\n+    private Supplier<Optional<? extends Image>> retryAfterEvictingCache(String region, String platform, String imageId, String catalogUrl, String imageOs) {\n+        return () -> {\n+            LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n+            LOGGER.debug(\"Evicting image catalog cache to retry.\");\n+            imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n+            ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+            return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n+        };\n     }\n \n     private Optional<Image> findImageForAppVersion(String region, String platform, String imageId, String imageOs, ImageCatalog catalog) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1ODU2OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7966#discussion_r420758569", "bodyText": "could you add a test case where the version doesn't match the pattern?", "author": "lacikaaa", "createdAt": "2020-05-06T12:41:36Z", "path": "freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java", "diffHunk": "@@ -65,10 +67,22 @@ public void setup() throws Exception {\n         image = imageCatalog.getImages().getFreeipaImages().get(0);\n         ReflectionTestUtils.setField(underTest, ImageService.class, \"defaultCatalogUrl\", DEFAULT_CATALOG_URL, null);\n         ReflectionTestUtils.setField(underTest, ImageService.class, \"defaultOs\", DEFAULT_OS, null);\n+        ReflectionTestUtils.setField(underTest, ImageService.class, \"freeIpaVersion\", DEFAULT_VERSION, null);\n+    }\n+\n+    @Test\n+    public void testGetImageGivenNoInputWithGbnAppVersion() {", "originalCommit": "9f7d3cea324877837931763f2282a3e6850ed3e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "chunk": "diff --git a/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java b/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\nindex a1a44a97ba..d1d9089193 100644\n--- a/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\n+++ b/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\n\n@@ -70,6 +70,16 @@ public class ImageServiceTest {\n         ReflectionTestUtils.setField(underTest, ImageService.class, \"freeIpaVersion\", DEFAULT_VERSION, null);\n     }\n \n+    @Test\n+    public void testGetImageGivenNoInputWithInvalidAppVersion() {\n+        ReflectionTestUtils.setField(underTest, ImageService.class, \"freeIpaVersion\", \"2.21.0-dcv.1\", null);\n+        ImageSettingsRequest is = setupImageSettingsRequest(null, null, \"centos7\");\n+        Image image = underTest.getImage(is, DEFAULT_REGION, DEFAULT_PLATFORM);\n+        assertEquals(\"centos7\", image.getOs());\n+        assertEquals(\"Assuming the latest image to be selected\", \"2019-05-09\", image.getDate());\n+        assertEquals(\"91851893-8340-411d-afb7-e1b55107fb10\", image.getUuid());\n+    }\n+\n     @Test\n     public void testGetImageGivenNoInputWithGbnAppVersion() {\n         ReflectionTestUtils.setField(underTest, ImageService.class, \"freeIpaVersion\", \"2.21.0-b1\", null);\n"}}, {"oid": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "url": "https://github.com/hortonworks/cloudbreak/commit/46ccb46063a3136d41aa10741a46f8fd8a01a366", "message": "CB-6282 Version based image choosing", "committedDate": "2020-05-07T13:22:06Z", "type": "forcePushed"}, {"oid": "eefc90318efb4c428601267f57741080bcfef0d8", "url": "https://github.com/hortonworks/cloudbreak/commit/eefc90318efb4c428601267f57741080bcfef0d8", "message": "CB-6282 Version based image choosing", "committedDate": "2020-05-08T09:06:18Z", "type": "commit"}, {"oid": "eefc90318efb4c428601267f57741080bcfef0d8", "url": "https://github.com/hortonworks/cloudbreak/commit/eefc90318efb4c428601267f57741080bcfef0d8", "message": "CB-6282 Version based image choosing", "committedDate": "2020-05-08T09:06:18Z", "type": "forcePushed"}]}