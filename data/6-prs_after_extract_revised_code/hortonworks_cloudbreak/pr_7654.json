{"pr_number": 7654, "pr_title": "CB-5989: support HDP-3.1.5", "pr_createdAt": "2020-03-26T08:01:15Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7654", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMTExNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7654#discussion_r399101115", "bodyText": "isStackPaywallProtected() could check this setting, too, as it already checks almost the same logic", "author": "pdarvasi", "createdAt": "2020-03-27T08:25:32Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/stack/PaywallCredentialValidator.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.sequenceiq.cloudbreak.controller.validation.stack;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.api.model.AmbariRepoDetailsJson;\n+import com.sequenceiq.cloudbreak.api.model.AmbariStackDetailsJson;\n+import com.sequenceiq.cloudbreak.api.model.stack.cluster.ClusterRequest;\n+import com.sequenceiq.cloudbreak.cloud.model.component.AmbariInfo;\n+import com.sequenceiq.cloudbreak.cloud.model.component.DefaultHDFEntries;\n+import com.sequenceiq.cloudbreak.cloud.model.component.DefaultHDPEntries;\n+import com.sequenceiq.cloudbreak.cloud.model.component.StackInfo;\n+import com.sequenceiq.cloudbreak.controller.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.service.DefaultAmbariRepoService;\n+import com.sequenceiq.cloudbreak.service.credential.PaywallCredentialService;\n+\n+@Component\n+public class PaywallCredentialValidator {\n+\n+    @Inject\n+    private PaywallCredentialService paywallCredentialService;\n+\n+    @Inject\n+    private DefaultHDPEntries defaultHDPEntries;\n+\n+    @Inject\n+    private DefaultHDFEntries defaultHDFEntries;\n+\n+    @Inject\n+    private DefaultAmbariRepoService defaultAmbariRepoService;\n+\n+    public void validateCredential(ClusterRequest clusterRequest, String stackType, String stackVersion) {\n+        StackInfo stackInfo = getStackInfo(stackType, stackVersion);\n+        boolean noPaywallCredentialAvailable = noPaywallCredentialAvailable();\n+        if (clusterRequest.getAmbariStackDetails() != null && clusterRequest.getAmbariRepoDetailsJson() != null) {\n+            if ((isStackPaywallProtected(clusterRequest, stackInfo) || isAmbariPaywallProtected(clusterRequest)) && noPaywallCredentialAvailable) {\n+                throwException();\n+            }\n+        } else if (stackInfo != null && stackInfo.isPaywallProtected() && noPaywallCredentialAvailable) {", "originalCommit": "9907d64c347078819b2cfbc8a92b1644b72ccdca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ca618d290ab52693e0c5ed9883de1d1b9fde7a4", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/stack/PaywallCredentialValidator.java b/core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/stack/PaywallCredentialValidator.java\nindex 4b2b3b1dc9..bc0c353c45 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/stack/PaywallCredentialValidator.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/stack/PaywallCredentialValidator.java\n\n@@ -13,6 +13,7 @@ import com.sequenceiq.cloudbreak.cloud.model.component.AmbariInfo;\n import com.sequenceiq.cloudbreak.cloud.model.component.DefaultHDFEntries;\n import com.sequenceiq.cloudbreak.cloud.model.component.DefaultHDPEntries;\n import com.sequenceiq.cloudbreak.cloud.model.component.StackInfo;\n+import com.sequenceiq.cloudbreak.cloud.model.component.StackType;\n import com.sequenceiq.cloudbreak.controller.exception.BadRequestException;\n import com.sequenceiq.cloudbreak.service.DefaultAmbariRepoService;\n import com.sequenceiq.cloudbreak.service.credential.PaywallCredentialService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMjA5MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7654#discussion_r399102090", "bodyText": "You can use StackType enum instead of the constant here", "author": "pdarvasi", "createdAt": "2020-03-27T08:27:28Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/stack/PaywallCredentialValidator.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.sequenceiq.cloudbreak.controller.validation.stack;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.api.model.AmbariRepoDetailsJson;\n+import com.sequenceiq.cloudbreak.api.model.AmbariStackDetailsJson;\n+import com.sequenceiq.cloudbreak.api.model.stack.cluster.ClusterRequest;\n+import com.sequenceiq.cloudbreak.cloud.model.component.AmbariInfo;\n+import com.sequenceiq.cloudbreak.cloud.model.component.DefaultHDFEntries;\n+import com.sequenceiq.cloudbreak.cloud.model.component.DefaultHDPEntries;\n+import com.sequenceiq.cloudbreak.cloud.model.component.StackInfo;\n+import com.sequenceiq.cloudbreak.controller.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.service.DefaultAmbariRepoService;\n+import com.sequenceiq.cloudbreak.service.credential.PaywallCredentialService;\n+\n+@Component\n+public class PaywallCredentialValidator {\n+\n+    @Inject\n+    private PaywallCredentialService paywallCredentialService;\n+\n+    @Inject\n+    private DefaultHDPEntries defaultHDPEntries;\n+\n+    @Inject\n+    private DefaultHDFEntries defaultHDFEntries;\n+\n+    @Inject\n+    private DefaultAmbariRepoService defaultAmbariRepoService;\n+\n+    public void validateCredential(ClusterRequest clusterRequest, String stackType, String stackVersion) {\n+        StackInfo stackInfo = getStackInfo(stackType, stackVersion);\n+        boolean noPaywallCredentialAvailable = noPaywallCredentialAvailable();\n+        if (clusterRequest.getAmbariStackDetails() != null && clusterRequest.getAmbariRepoDetailsJson() != null) {\n+            if ((isStackPaywallProtected(clusterRequest, stackInfo) || isAmbariPaywallProtected(clusterRequest)) && noPaywallCredentialAvailable) {\n+                throwException();\n+            }\n+        } else if (stackInfo != null && stackInfo.isPaywallProtected() && noPaywallCredentialAvailable) {\n+            throwException();\n+        }\n+    }\n+\n+    private StackInfo getStackInfo(String stackType, String stackVersion) {\n+        return \"HDP\".equals(stackType) ? defaultHDPEntries.getEntries().get(stackVersion) : defaultHDFEntries.getEntries().get(stackVersion);", "originalCommit": "9907d64c347078819b2cfbc8a92b1644b72ccdca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ca618d290ab52693e0c5ed9883de1d1b9fde7a4", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/stack/PaywallCredentialValidator.java b/core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/stack/PaywallCredentialValidator.java\nindex 4b2b3b1dc9..bc0c353c45 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/stack/PaywallCredentialValidator.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/stack/PaywallCredentialValidator.java\n\n@@ -13,6 +13,7 @@ import com.sequenceiq.cloudbreak.cloud.model.component.AmbariInfo;\n import com.sequenceiq.cloudbreak.cloud.model.component.DefaultHDFEntries;\n import com.sequenceiq.cloudbreak.cloud.model.component.DefaultHDPEntries;\n import com.sequenceiq.cloudbreak.cloud.model.component.StackInfo;\n+import com.sequenceiq.cloudbreak.cloud.model.component.StackType;\n import com.sequenceiq.cloudbreak.controller.exception.BadRequestException;\n import com.sequenceiq.cloudbreak.service.DefaultAmbariRepoService;\n import com.sequenceiq.cloudbreak.service.credential.PaywallCredentialService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNTcyNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7654#discussion_r399105727", "bodyText": "Does this mean that we do not allow e.g. 2.6 anymore? Isn't it needed?", "author": "pdarvasi", "createdAt": "2020-03-27T08:34:50Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/converter/BlueprintRequestToBlueprintConverter.java", "diffHunk": "@@ -77,9 +77,10 @@ private void validateBlueprintStackVersion(Blueprint blueprint) {\n         try {\n             JsonNode root = JsonUtil.readTree(blueprint.getBlueprintText());\n             String stackVersion = blueprintUtils.getBlueprintStackVersion(root);\n-            if (StringUtils.isBlank(stackVersion) || !stackVersion.matches(\"[0-9]+\\\\.[0-9]+\")) {\n-                throw new BadRequestException(String.format(\"Stack version [%s] is not valid. Valid stack version is in MAJOR.MINOR format eg.: 2.6\",\n-                        stackVersion));\n+            if (StringUtils.isBlank(stackVersion) || !stackVersion.matches(\"[0-9]+\\\\.[0-9]?(\\\\.?[0-9])\")) {", "originalCommit": "9907d64c347078819b2cfbc8a92b1644b72ccdca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE5MDU5OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7654#discussion_r399190598", "bodyText": "We allow both version type. This modification is allows the three-part versions too.", "author": "tiborpopovics", "createdAt": "2020-03-27T11:11:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNTcyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE5MzY2OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7654#discussion_r399193669", "bodyText": "Perfect, thanks", "author": "pdarvasi", "createdAt": "2020-03-27T11:17:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNTcyNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNzQzMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7654#discussion_r399107431", "bodyText": "Is this being used here?", "author": "pdarvasi", "createdAt": "2020-03-27T08:38:23Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/RepositoryValidator.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.sequenceiq.cloudbreak.service;\n+\n+import java.io.IOException;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.api.model.stack.StackDescriptor;\n+import com.sequenceiq.cloudbreak.cloud.VersionComparator;\n+import com.sequenceiq.cloudbreak.cloud.model.AmbariRepo;\n+import com.sequenceiq.cloudbreak.cloud.model.Image;\n+import com.sequenceiq.cloudbreak.cloud.model.component.StackRepoDetails;\n+import com.sequenceiq.cloudbreak.controller.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.domain.stack.Component;\n+import com.sequenceiq.cloudbreak.domain.stack.cluster.ClusterComponent;\n+import com.sequenceiq.cloudbreak.service.credential.PaywallCredentialService;\n+\n+@Service\n+public class RepositoryValidator {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RepositoryValidator.class);\n+\n+    @Inject\n+    private StackMatrixService stackMatrixService;\n+\n+    @Inject\n+    private PaywallCredentialService paywallCredentialService;", "originalCommit": "9907d64c347078819b2cfbc8a92b1644b72ccdca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ca618d290ab52693e0c5ed9883de1d1b9fde7a4", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/service/RepositoryValidator.java b/core/src/main/java/com/sequenceiq/cloudbreak/service/RepositoryValidator.java\nindex c504a8f1c0..0dc3cc6b74 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/service/RepositoryValidator.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/service/RepositoryValidator.java\n\n@@ -16,7 +16,6 @@ import com.sequenceiq.cloudbreak.cloud.model.component.StackRepoDetails;\n import com.sequenceiq.cloudbreak.controller.exception.BadRequestException;\n import com.sequenceiq.cloudbreak.domain.stack.Component;\n import com.sequenceiq.cloudbreak.domain.stack.cluster.ClusterComponent;\n-import com.sequenceiq.cloudbreak.service.credential.PaywallCredentialService;\n \n @Service\n public class RepositoryValidator {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwODE2Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7654#discussion_r399108167", "bodyText": "We should log the fact if it is not available.", "author": "pdarvasi", "createdAt": "2020-03-27T08:39:46Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/credential/PaywallCredentialService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.sequenceiq.cloudbreak.service.credential;\n+\n+import static java.util.Collections.singletonMap;\n+\n+import java.util.Map;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.orchestrator.model.SaltPillarProperties;\n+\n+@Component\n+public class PaywallCredentialService {\n+\n+    private static final int SHIFT = 3;\n+\n+    @Value(\"${cb.paywall.username:}\")\n+    private String paywallUserName;\n+\n+    @Value(\"${cb.paywall.password:}\")\n+    private String paywallPassword;\n+\n+    public String addCredentialForUrl(String url) {\n+        if (paywallCredentialAvailable()) {", "originalCommit": "9907d64c347078819b2cfbc8a92b1644b72ccdca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ca618d290ab52693e0c5ed9883de1d1b9fde7a4", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/service/credential/PaywallCredentialService.java b/core/src/main/java/com/sequenceiq/cloudbreak/service/credential/PaywallCredentialService.java\nindex 300bf4f227..06aedc4ea5 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/service/credential/PaywallCredentialService.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/service/credential/PaywallCredentialService.java\n\n@@ -4,6 +4,8 @@ import static java.util.Collections.singletonMap;\n \n import java.util.Map;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n"}}, {"oid": "5ca618d290ab52693e0c5ed9883de1d1b9fde7a4", "url": "https://github.com/hortonworks/cloudbreak/commit/5ca618d290ab52693e0c5ed9883de1d1b9fde7a4", "message": "CB-5989: support HDP-3.1.5", "committedDate": "2020-03-30T06:44:49Z", "type": "commit"}, {"oid": "5ca618d290ab52693e0c5ed9883de1d1b9fde7a4", "url": "https://github.com/hortonworks/cloudbreak/commit/5ca618d290ab52693e0c5ed9883de1d1b9fde7a4", "message": "CB-5989: support HDP-3.1.5", "committedDate": "2020-03-30T06:44:49Z", "type": "forcePushed"}]}