{"pr_number": 9289, "pr_title": "CB-9313 - added Vault client side tracing", "pr_createdAt": "2020-10-26T18:07:04Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/9289", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MTAwMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9289#discussion_r512551000", "bodyText": "This may throw exception", "author": "bbihari", "createdAt": "2020-10-27T09:53:36Z", "path": "secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java", "diffHunk": "@@ -31,13 +41,22 @@ public VaultRetryService(MetricService metricService) {\n                     maxDelayExpression = \"${vault.retry.maxdelay:10000}\")\n     )\n     public <T> T tryReadingVault(Supplier<T> action) throws Retry.ActionFailedException {\n-        try {\n-            return action.get();\n-        } catch (RuntimeException e) {\n-            LOGGER.error(\"Exception during reading vault\", e);\n-            metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n-            throw new Retry.ActionFailedException(e.getMessage());\n-        }\n+        Optional<Span> optionalSpan = initSpan(\"read\");\n+        return optionalSpan.map(span -> {\n+            try (Scope ignored = tracer.activateSpan(span)) {\n+                try {\n+                    return action.get();\n+                } catch (RuntimeException e) {\n+                    LOGGER.error(\"Exception during reading vault\", e);\n+                    span.setTag(TracingUtil.ERROR, true);\n+                    span.setTag(TracingUtil.MESSAGE, e.getMessage());\n+                    metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n+                    throw new Retry.ActionFailedException(e.getMessage());\n+                }\n+            } finally {\n+                span.finish();\n+            }\n+        }).orElseGet(action::get);", "originalCommit": "81cdbc75b5da9b8e0a6691dad0080924ab3b5f5b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c6109bf4d67cc7473f222c4f5138da824b40cf38", "chunk": "diff --git a/secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java b/secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java\nindex 3930a5def2..11981b9f46 100644\n--- a/secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java\n+++ b/secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java\n\n@@ -41,22 +41,7 @@ public class VaultRetryService {\n                     maxDelayExpression = \"${vault.retry.maxdelay:10000}\")\n     )\n     public <T> T tryReadingVault(Supplier<T> action) throws Retry.ActionFailedException {\n-        Optional<Span> optionalSpan = initSpan(\"read\");\n-        return optionalSpan.map(span -> {\n-            try (Scope ignored = tracer.activateSpan(span)) {\n-                try {\n-                    return action.get();\n-                } catch (RuntimeException e) {\n-                    LOGGER.error(\"Exception during reading vault\", e);\n-                    span.setTag(TracingUtil.ERROR, true);\n-                    span.setTag(TracingUtil.MESSAGE, e.getMessage());\n-                    metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n-                    throw new Retry.ActionFailedException(e.getMessage());\n-                }\n-            } finally {\n-                span.finish();\n-            }\n-        }).orElseGet(action::get);\n+        return executeVaultOperationWithTrace(action, \"read\", MetricType.VAULT_READ_FAILED);\n     }\n \n     @Retryable(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MTYyNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9289#discussion_r512551626", "bodyText": "This can throw RuntimeException", "author": "bbihari", "createdAt": "2020-10-27T09:54:29Z", "path": "secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java", "diffHunk": "@@ -48,12 +67,34 @@ public VaultRetryService(MetricService metricService) {\n                     maxDelayExpression = \"${vault.retry.maxdelay:10000}\")\n     )\n     public <T> T tryWritingVault(Supplier<T> action) throws Retry.ActionFailedException {\n-        try {\n-            return action.get();\n-        } catch (RuntimeException e) {\n-            LOGGER.error(\"Exception during writing vault\", e);\n-            metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n-            throw new Retry.ActionFailedException(e.getMessage());\n+\n+        Optional<Span> optionalSpan = initSpan(\"write\");\n+        return optionalSpan.map(span -> {\n+            try (Scope ignored = tracer.activateSpan(span)) {\n+                try {\n+                    return action.get();\n+                } catch (RuntimeException e) {\n+                    LOGGER.error(\"Exception during writing vault\", e);\n+                    span.setTag(TracingUtil.ERROR, true);\n+                    span.setTag(TracingUtil.MESSAGE, e.getMessage());\n+                    metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n+                    throw new Retry.ActionFailedException(e.getMessage());\n+                }\n+            } finally {\n+                span.finish();\n+            }\n+        }).orElseGet(action::get);", "originalCommit": "81cdbc75b5da9b8e0a6691dad0080924ab3b5f5b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c6109bf4d67cc7473f222c4f5138da824b40cf38", "chunk": "diff --git a/secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java b/secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java\nindex 3930a5def2..11981b9f46 100644\n--- a/secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java\n+++ b/secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java\n\n@@ -67,23 +52,30 @@ public class VaultRetryService {\n                     maxDelayExpression = \"${vault.retry.maxdelay:10000}\")\n     )\n     public <T> T tryWritingVault(Supplier<T> action) throws Retry.ActionFailedException {\n+        return executeVaultOperationWithTrace(action, \"write\", MetricType.VAULT_WRITE_FAILED);\n+    }\n \n-        Optional<Span> optionalSpan = initSpan(\"write\");\n+    private <T> T executeVaultOperationWithTrace(Supplier<T> action, String operation, MetricType metricType) {\n+        Optional<Span> optionalSpan = initSpan(operation);\n         return optionalSpan.map(span -> {\n             try (Scope ignored = tracer.activateSpan(span)) {\n                 try {\n                     return action.get();\n                 } catch (RuntimeException e) {\n-                    LOGGER.error(\"Exception during writing vault\", e);\n                     span.setTag(TracingUtil.ERROR, true);\n                     span.setTag(TracingUtil.MESSAGE, e.getMessage());\n-                    metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n-                    throw new Retry.ActionFailedException(e.getMessage());\n+                    return handleException(operation, e, metricType);\n                 }\n             } finally {\n                 span.finish();\n             }\n-        }).orElseGet(action::get);\n+        }).orElseGet(() -> {\n+            try {\n+                return action.get();\n+            } catch (RuntimeException e) {\n+                return handleException(operation, e, metricType);\n+            }\n+        });\n     }\n \n     private Optional<Span> initSpan(String operationType) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MzMzNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9289#discussion_r512553336", "bodyText": "this function could be more compact with Optional.ofNullable(...).map(...)", "author": "bbihari", "createdAt": "2020-10-27T09:56:59Z", "path": "secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java", "diffHunk": "@@ -48,12 +67,34 @@ public VaultRetryService(MetricService metricService) {\n                     maxDelayExpression = \"${vault.retry.maxdelay:10000}\")\n     )\n     public <T> T tryWritingVault(Supplier<T> action) throws Retry.ActionFailedException {\n-        try {\n-            return action.get();\n-        } catch (RuntimeException e) {\n-            LOGGER.error(\"Exception during writing vault\", e);\n-            metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n-            throw new Retry.ActionFailedException(e.getMessage());\n+\n+        Optional<Span> optionalSpan = initSpan(\"write\");\n+        return optionalSpan.map(span -> {\n+            try (Scope ignored = tracer.activateSpan(span)) {\n+                try {\n+                    return action.get();\n+                } catch (RuntimeException e) {\n+                    LOGGER.error(\"Exception during writing vault\", e);\n+                    span.setTag(TracingUtil.ERROR, true);\n+                    span.setTag(TracingUtil.MESSAGE, e.getMessage());\n+                    metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n+                    throw new Retry.ActionFailedException(e.getMessage());\n+                }\n+            } finally {\n+                span.finish();\n+            }\n+        }).orElseGet(action::get);\n+    }\n+\n+    private Optional<Span> initSpan(String operationType) {\n+        Span activeSpan = tracer.activeSpan();", "originalCommit": "81cdbc75b5da9b8e0a6691dad0080924ab3b5f5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2MTgzNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9289#discussion_r512561837", "bodyText": "ok", "author": "attilapalfi92", "createdAt": "2020-10-27T10:09:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MzMzNg=="}], "type": "inlineReview", "revised_code": {"commit": "c6109bf4d67cc7473f222c4f5138da824b40cf38", "chunk": "diff --git a/secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java b/secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java\nindex 3930a5def2..11981b9f46 100644\n--- a/secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java\n+++ b/secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java\n\n@@ -67,23 +52,30 @@ public class VaultRetryService {\n                     maxDelayExpression = \"${vault.retry.maxdelay:10000}\")\n     )\n     public <T> T tryWritingVault(Supplier<T> action) throws Retry.ActionFailedException {\n+        return executeVaultOperationWithTrace(action, \"write\", MetricType.VAULT_WRITE_FAILED);\n+    }\n \n-        Optional<Span> optionalSpan = initSpan(\"write\");\n+    private <T> T executeVaultOperationWithTrace(Supplier<T> action, String operation, MetricType metricType) {\n+        Optional<Span> optionalSpan = initSpan(operation);\n         return optionalSpan.map(span -> {\n             try (Scope ignored = tracer.activateSpan(span)) {\n                 try {\n                     return action.get();\n                 } catch (RuntimeException e) {\n-                    LOGGER.error(\"Exception during writing vault\", e);\n                     span.setTag(TracingUtil.ERROR, true);\n                     span.setTag(TracingUtil.MESSAGE, e.getMessage());\n-                    metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n-                    throw new Retry.ActionFailedException(e.getMessage());\n+                    return handleException(operation, e, metricType);\n                 }\n             } finally {\n                 span.finish();\n             }\n-        }).orElseGet(action::get);\n+        }).orElseGet(() -> {\n+            try {\n+                return action.get();\n+            } catch (RuntimeException e) {\n+                return handleException(operation, e, metricType);\n+            }\n+        });\n     }\n \n     private Optional<Span> initSpan(String operationType) {\n"}}, {"oid": "c6109bf4d67cc7473f222c4f5138da824b40cf38", "url": "https://github.com/hortonworks/cloudbreak/commit/c6109bf4d67cc7473f222c4f5138da824b40cf38", "message": "CB-9313 - added Vault client side tracing\nUsing this optional construct to avoid tracing of lonely vault spans.\nNot adding the usual tags from the MDC Context because it would be very very redundant and consume lot of memory unnecessarily.", "committedDate": "2020-10-27T10:03:09Z", "type": "forcePushed"}, {"oid": "4f7491e66d43b77e1b447d86fd1eee94a72466b5", "url": "https://github.com/hortonworks/cloudbreak/commit/4f7491e66d43b77e1b447d86fd1eee94a72466b5", "message": "CB-9313 - added Vault client side tracing\nUsing this optional construct to avoid tracing of lonely vault spans.\nNot adding the usual tags from the MDC Context because it would be very very redundant and consume lot of memory unnecessarily.", "committedDate": "2020-10-27T10:09:57Z", "type": "commit"}, {"oid": "4f7491e66d43b77e1b447d86fd1eee94a72466b5", "url": "https://github.com/hortonworks/cloudbreak/commit/4f7491e66d43b77e1b447d86fd1eee94a72466b5", "message": "CB-9313 - added Vault client side tracing\nUsing this optional construct to avoid tracing of lonely vault spans.\nNot adding the usual tags from the MDC Context because it would be very very redundant and consume lot of memory unnecessarily.", "committedDate": "2020-10-27T10:09:57Z", "type": "forcePushed"}]}