{"pr_number": 7587, "pr_title": "CB-5992 Restore disabled test cases for SDX Repair E2E", "pr_createdAt": "2020-03-14T16:24:29Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7587", "timeline": [{"oid": "21b87df3501c5f540ca47ca40eaa4afe8c7701a3", "url": "https://github.com/hortonworks/cloudbreak/commit/21b87df3501c5f540ca47ca40eaa4afe8c7701a3", "message": "CB-5992 Restore disabled test cases for SDX Repair E2E", "committedDate": "2020-03-16T10:13:49Z", "type": "forcePushed"}, {"oid": "f1a6c0a7958f0f9bbf4a999c8ee7ec839e3d931b", "url": "https://github.com/hortonworks/cloudbreak/commit/f1a6c0a7958f0f9bbf4a999c8ee7ec839e3d931b", "message": "CB-5992 Restore disabled test cases for SDX Repair E2E", "committedDate": "2020-03-16T10:15:49Z", "type": "forcePushed"}, {"oid": "b9e36039ef285a02578caa8dc885db9421053d91", "url": "https://github.com/hortonworks/cloudbreak/commit/b9e36039ef285a02578caa8dc885db9421053d91", "message": "CB-5992 Restore disabled test cases for SDX Repair E2E", "committedDate": "2020-03-16T11:11:05Z", "type": "forcePushed"}, {"oid": "d766744543544e78e610a483cd199b3d719f1ed4", "url": "https://github.com/hortonworks/cloudbreak/commit/d766744543544e78e610a483cd199b3d719f1ed4", "message": "CB-5992 Restore disabled test cases for SDX Repair E2E", "committedDate": "2020-03-16T15:37:15Z", "type": "forcePushed"}, {"oid": "f36858b3f57073f78f66cf33cbfefefceb1aa43b", "url": "https://github.com/hortonworks/cloudbreak/commit/f36858b3f57073f78f66cf33cbfefefceb1aa43b", "message": "CB-5992 Restore disabled test cases for SDX Repair E2E", "committedDate": "2020-03-16T15:49:26Z", "type": "forcePushed"}, {"oid": "7ef9171017917eb52ac22d8ed5d5c5c2788eeaec", "url": "https://github.com/hortonworks/cloudbreak/commit/7ef9171017917eb52ac22d8ed5d5c5c2788eeaec", "message": "CB-5992 Restore disabled test cases for SDX Repair E2E", "committedDate": "2020-03-16T15:50:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ5MTA3Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7587#discussion_r393491073", "bodyText": "This will break other testcases and limit the configurability within the DTO.\nWhat if I don't want to use the DEFAULT_SDX_BLUEPRINT for my InternalSdxDto?\nIn a builder, for e.g. withStackRequets you should only change the object in the parameter.\nIt's also quite strange to have such a method where we pass both of these other testDto's\nI've already did a similar refactor for this:\n\n  \n    \n      cloudbreak/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/sdx/SdxInternalTestDto.java\n    \n    \n         Line 89\n      in\n      60cb349\n    \n    \n    \n    \n\n        \n          \n           .withLightDutySettings()", "author": "lnardai", "createdAt": "2020-03-17T07:42:04Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/sdx/SdxInternalTestDto.java", "diffHunk": "@@ -172,6 +172,19 @@ private SdxInternalTestDto withLightDutySettings() {\n     }\n \n     private SdxInternalTestDto withStackRequest(StackTestDto stack, ClusterTestDto cluster) {\n+        if (getTestContext().given(InstanceGroupTestDto.class).getResponse() == null) {", "originalCommit": "7ef9171017917eb52ac22d8ed5d5c5c2788eeaec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7860fba3a77574e465723a7492be9c8aab7b9f35", "chunk": "diff --git a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/sdx/SdxInternalTestDto.java b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/sdx/SdxInternalTestDto.java\nindex 99cab74be9..32bfe861f6 100644\n--- a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/sdx/SdxInternalTestDto.java\n+++ b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/sdx/SdxInternalTestDto.java\n\n@@ -131,53 +126,36 @@ public class SdxInternalTestDto extends AbstractSdxTestDto<SdxInternalClusterReq\n         return this;\n     }\n \n-    public SdxInternalTestDto withStackRequest() {\n-        StackTestDto stack = getTestContext().given(StackTestDto.class);\n-        ClusterTestDto cluster = getTestContext().given(ClusterTestDto.class);\n-\n-        return withStackRequest(stack, cluster);\n+    public SdxInternalTestDto withStackRequest(StackV4Request stackV4Request) {\n+        getRequest().setStackV4Request(stackV4Request);\n+        return this;\n     }\n \n-    public SdxInternalTestDto withStackRequest(String stackKey, String clusterKey) {\n-        StackTestDto stack = getTestContext().given(stackKey, StackTestDto.class);\n-        ClusterTestDto cluster = getTestContext().given(clusterKey, ClusterTestDto.class);\n-\n-        return withStackRequest(stack, cluster);\n+    private SdxInternalTestDto withStackRequest(ClusterTestDto cluster, StackTestDto stack) {\n+        stack.withCluster(cluster);\n+        return withStackRequest(stack.getRequest());\n     }\n \n-    private SdxInternalTestDto withLightDutySettings() {\n-        StackTestDto stack = getTestContext().given(StackTestDto.class);\n-        ClusterTestDto cluster = getTestContext().given(ClusterTestDto.class);\n+    public SdxInternalTestDto withStackRequest(RunningParameter clusterKey, RunningParameter stackKey) {\n+        ClusterTestDto cluster = getTestContext().get(clusterKey.getKey());\n+        StackTestDto stack = getTestContext().get(stackKey.getKey());\n \n-        if (getTestContext().given(InstanceGroupTestDto.class).getResponse() == null) {\n-            getTestContext()\n-                    .given(\"master\", InstanceGroupTestDto.class).withHostGroup(MASTER).withNodeCount(1)\n-                    .given(\"idbroker\", InstanceGroupTestDto.class).withHostGroup(IDBROKER).withNodeCount(1);\n+        if (cluster == null) {\n+            throw new IllegalArgumentException(\"Cluster is null with given key: \" + clusterKey.getKey());\n         }\n-\n-        cluster.withName(cluster.getName())\n-                .withBlueprintName(DEFAULT_SDX_BLUEPRINT_NAME)\n-                .withValidateBlueprint(Boolean.FALSE);\n-        stack.withName(stack.getName())\n-                .withImageSettings(getCloudProvider().imageSettings(getTestContext().given(ImageSettingsTestDto.class)))\n-                .withPlacement(getTestContext().given(PlacementSettingsTestDto.class))\n-                .withInstanceGroupsEntity(InstanceGroupTestDto.sdxHostGroup(getTestContext()))\n-                .withInstanceGroups(MASTER.getName(), IDBROKER.getName())\n-                .withStackAuthentication(getCloudProvider().stackAuthentication(given(StackAuthenticationTestDto.class)))\n-                .withGatewayPort(getCloudProvider().gatewayPort(stack))\n-                .withCluster(cluster);\n-        SdxInternalTestDto sdxInternalTestDto = withStackRequest(stack.getRequest());\n-        sdxInternalTestDto.withRuntimeVersion(DEFAULT_SDX_RUNTIME);\n-        return sdxInternalTestDto;\n+        if (stack == null) {\n+            throw new IllegalArgumentException(\"Stack is null with given key: \" + stackKey.getKey());\n+        }\n+        return withStackRequest(cluster, stack);\n     }\n \n-    private SdxInternalTestDto withStackRequest(StackTestDto stack, ClusterTestDto cluster) {\n-        if (getTestContext().given(InstanceGroupTestDto.class).getResponse() == null) {\n-            getTestContext()\n-                    .given(\"master\", InstanceGroupTestDto.class).withHostGroup(MASTER).withNodeCount(1)\n-                    .given(\"idbroker\", InstanceGroupTestDto.class).withHostGroup(IDBROKER).withNodeCount(1);\n-        }\n+    public SdxInternalTestDto withDefaultSDXSettings() {\n+        StackTestDto stack = getTestContext().given(StackTestDto.class);\n+        ClusterTestDto cluster = getTestContext().given(ClusterTestDto.class);\n \n+        getTestContext()\n+                .given(\"master\", InstanceGroupTestDto.class).withHostGroup(MASTER).withNodeCount(1)\n+                .given(\"idbroker\", InstanceGroupTestDto.class).withHostGroup(IDBROKER).withNodeCount(1);\n         cluster.withName(cluster.getName())\n                 .withBlueprintName(DEFAULT_SDX_BLUEPRINT_NAME)\n                 .withValidateBlueprint(Boolean.FALSE);\n"}}, {"oid": "7860fba3a77574e465723a7492be9c8aab7b9f35", "url": "https://github.com/hortonworks/cloudbreak/commit/7860fba3a77574e465723a7492be9c8aab7b9f35", "message": "CB-6103 Fix Default SDX Internal Stack Request", "committedDate": "2020-03-17T22:36:58Z", "type": "forcePushed"}, {"oid": "4f1340e49606db78b76e2d64a04649c7a8a17aac", "url": "https://github.com/hortonworks/cloudbreak/commit/4f1340e49606db78b76e2d64a04649c7a8a17aac", "message": "CB-6103 Fix Default SDX Internal Stack Request", "committedDate": "2020-03-17T22:43:27Z", "type": "forcePushed"}, {"oid": "d4f9b29c5a5dca0d36aac7da75584d6278b57a41", "url": "https://github.com/hortonworks/cloudbreak/commit/d4f9b29c5a5dca0d36aac7da75584d6278b57a41", "message": "CB-5992 Restore disabled test cases for SDX Repair E2E", "committedDate": "2020-03-17T22:49:20Z", "type": "commit"}, {"oid": "15979a62e0e02356a288f034636c26448669599a", "url": "https://github.com/hortonworks/cloudbreak/commit/15979a62e0e02356a288f034636c26448669599a", "message": "CB-6103 Fix Default SDX Internal Stack Request", "committedDate": "2020-03-17T22:49:20Z", "type": "commit"}, {"oid": "15979a62e0e02356a288f034636c26448669599a", "url": "https://github.com/hortonworks/cloudbreak/commit/15979a62e0e02356a288f034636c26448669599a", "message": "CB-6103 Fix Default SDX Internal Stack Request", "committedDate": "2020-03-17T22:49:20Z", "type": "forcePushed"}]}