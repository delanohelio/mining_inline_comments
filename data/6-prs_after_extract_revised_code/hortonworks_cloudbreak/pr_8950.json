{"pr_number": 8950, "pr_title": "CB-8739 Consistent Hostnames Enhancements", "pr_createdAt": "2020-09-09T05:47:49Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8950", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ2OTM3NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8950#discussion_r485469374", "bodyText": "this should be private or moved to a separate class", "author": "lacikaaa", "createdAt": "2020-09-09T09:23:59Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java", "diffHunk": "@@ -361,4 +373,21 @@ private void validatePollingResultForCancellation(PollingResult pollingResult, S\n         }\n     }\n \n+    String getNodeNameForInstance(InstanceMetaData im, Stack stack,", "originalCommit": "2ab8927b87e722e9e11fd5409a8ecba88815d28e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE2NjUwMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8950#discussion_r486166502", "bodyText": "ok", "author": "smaniraju", "createdAt": "2020-09-10T08:39:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ2OTM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "eaae6ce323073da35dcc4be86514e9e019e2ed72", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java b/core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java\nindex e5151e5065..6fc0d7e8f1 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java\n\n@@ -373,21 +375,12 @@ public class ClusterBootstrapper {\n         }\n     }\n \n-    String getNodeNameForInstance(InstanceMetaData im, Stack stack,\n-            Map<String, AtomicLong> hostGroupNodeIndex, Set<String> clusterNodeNames) {\n-        if (isNotBlank(im.getShortHostname())) {\n-            return im.getShortHostname();\n-        }\n-        AtomicLong hostGroupIndex = hostGroupNodeIndex.computeIfAbsent(im.getInstanceGroup().getGroupName(),\n-                instantGroup -> new AtomicLong(0));\n-        String generatedHostName;\n-        do {\n-            generatedHostName = hostDiscoveryService.calculateHostname(stack.getCustomHostname(), im.getShortHostname(),\n-                    im.getInstanceGroupName(), hostGroupIndex.getAndIncrement(), stack.isHostgroupNameAsHostname());\n-        } while (clusterNodeNames.contains(generatedHostName));\n-\n-        LOGGER.debug(\"Generated hostname {} for address: {}\", generatedHostName, im.getPrivateIp());\n-        clusterNodeNames.add(generatedHostName);\n-        return generatedHostName;\n+    private Map<String, AtomicLong> getNodeCountWithDiscoveryFQDNByHostGroup(Stack stack) {\n+        return stack.getInstanceGroups().stream().collect(Collectors.toMap(\n+                InstanceGroup::getGroupName,\n+                instanceGroup -> new AtomicLong(instanceGroup.getNotTerminatedInstanceMetaDataSet().stream()\n+                        .filter(im -> isNoneBlank(im.getDiscoveryFQDN()))\n+                        .collect(Collectors.counting()))\n+        ));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ2OTkxNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8950#discussion_r485469916", "bodyText": "unnecessary line break", "author": "lacikaaa", "createdAt": "2020-09-09T09:24:48Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java", "diffHunk": "@@ -361,4 +373,21 @@ private void validatePollingResultForCancellation(PollingResult pollingResult, S\n         }\n     }\n \n+    String getNodeNameForInstance(InstanceMetaData im, Stack stack,\n+            Map<String, AtomicLong> hostGroupNodeIndex, Set<String> clusterNodeNames) {", "originalCommit": "2ab8927b87e722e9e11fd5409a8ecba88815d28e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE2NjYxNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8950#discussion_r486166617", "bodyText": "fixed", "author": "smaniraju", "createdAt": "2020-09-10T08:39:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ2OTkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "eaae6ce323073da35dcc4be86514e9e019e2ed72", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java b/core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java\nindex e5151e5065..6fc0d7e8f1 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java\n\n@@ -373,21 +375,12 @@ public class ClusterBootstrapper {\n         }\n     }\n \n-    String getNodeNameForInstance(InstanceMetaData im, Stack stack,\n-            Map<String, AtomicLong> hostGroupNodeIndex, Set<String> clusterNodeNames) {\n-        if (isNotBlank(im.getShortHostname())) {\n-            return im.getShortHostname();\n-        }\n-        AtomicLong hostGroupIndex = hostGroupNodeIndex.computeIfAbsent(im.getInstanceGroup().getGroupName(),\n-                instantGroup -> new AtomicLong(0));\n-        String generatedHostName;\n-        do {\n-            generatedHostName = hostDiscoveryService.calculateHostname(stack.getCustomHostname(), im.getShortHostname(),\n-                    im.getInstanceGroupName(), hostGroupIndex.getAndIncrement(), stack.isHostgroupNameAsHostname());\n-        } while (clusterNodeNames.contains(generatedHostName));\n-\n-        LOGGER.debug(\"Generated hostname {} for address: {}\", generatedHostName, im.getPrivateIp());\n-        clusterNodeNames.add(generatedHostName);\n-        return generatedHostName;\n+    private Map<String, AtomicLong> getNodeCountWithDiscoveryFQDNByHostGroup(Stack stack) {\n+        return stack.getInstanceGroups().stream().collect(Collectors.toMap(\n+                InstanceGroup::getGroupName,\n+                instanceGroup -> new AtomicLong(instanceGroup.getNotTerminatedInstanceMetaDataSet().stream()\n+                        .filter(im -> isNoneBlank(im.getDiscoveryFQDN()))\n+                        .collect(Collectors.counting()))\n+        ));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ3MDE2NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8950#discussion_r485470164", "bodyText": "missing else to indicate there are multiple exit point for the method", "author": "lacikaaa", "createdAt": "2020-09-09T09:25:12Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java", "diffHunk": "@@ -361,4 +373,21 @@ private void validatePollingResultForCancellation(PollingResult pollingResult, S\n         }\n     }\n \n+    String getNodeNameForInstance(InstanceMetaData im, Stack stack,\n+            Map<String, AtomicLong> hostGroupNodeIndex, Set<String> clusterNodeNames) {\n+        if (isNotBlank(im.getShortHostname())) {\n+            return im.getShortHostname();\n+        }", "originalCommit": "2ab8927b87e722e9e11fd5409a8ecba88815d28e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE2NjcxMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8950#discussion_r486166710", "bodyText": "fixed.", "author": "smaniraju", "createdAt": "2020-09-10T08:39:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ3MDE2NA=="}], "type": "inlineReview", "revised_code": {"commit": "eaae6ce323073da35dcc4be86514e9e019e2ed72", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java b/core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java\nindex e5151e5065..6fc0d7e8f1 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java\n\n@@ -373,21 +375,12 @@ public class ClusterBootstrapper {\n         }\n     }\n \n-    String getNodeNameForInstance(InstanceMetaData im, Stack stack,\n-            Map<String, AtomicLong> hostGroupNodeIndex, Set<String> clusterNodeNames) {\n-        if (isNotBlank(im.getShortHostname())) {\n-            return im.getShortHostname();\n-        }\n-        AtomicLong hostGroupIndex = hostGroupNodeIndex.computeIfAbsent(im.getInstanceGroup().getGroupName(),\n-                instantGroup -> new AtomicLong(0));\n-        String generatedHostName;\n-        do {\n-            generatedHostName = hostDiscoveryService.calculateHostname(stack.getCustomHostname(), im.getShortHostname(),\n-                    im.getInstanceGroupName(), hostGroupIndex.getAndIncrement(), stack.isHostgroupNameAsHostname());\n-        } while (clusterNodeNames.contains(generatedHostName));\n-\n-        LOGGER.debug(\"Generated hostname {} for address: {}\", generatedHostName, im.getPrivateIp());\n-        clusterNodeNames.add(generatedHostName);\n-        return generatedHostName;\n+    private Map<String, AtomicLong> getNodeCountWithDiscoveryFQDNByHostGroup(Stack stack) {\n+        return stack.getInstanceGroups().stream().collect(Collectors.toMap(\n+                InstanceGroup::getGroupName,\n+                instanceGroup -> new AtomicLong(instanceGroup.getNotTerminatedInstanceMetaDataSet().stream()\n+                        .filter(im -> isNoneBlank(im.getDiscoveryFQDN()))\n+                        .collect(Collectors.counting()))\n+        ));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ3MDczMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8950#discussion_r485470732", "bodyText": "0L instead of integer 0", "author": "lacikaaa", "createdAt": "2020-09-09T09:26:05Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java", "diffHunk": "@@ -361,4 +373,21 @@ private void validatePollingResultForCancellation(PollingResult pollingResult, S\n         }\n     }\n \n+    String getNodeNameForInstance(InstanceMetaData im, Stack stack,\n+            Map<String, AtomicLong> hostGroupNodeIndex, Set<String> clusterNodeNames) {\n+        if (isNotBlank(im.getShortHostname())) {\n+            return im.getShortHostname();\n+        }\n+        AtomicLong hostGroupIndex = hostGroupNodeIndex.computeIfAbsent(im.getInstanceGroup().getGroupName(),\n+                instantGroup -> new AtomicLong(0));", "originalCommit": "2ab8927b87e722e9e11fd5409a8ecba88815d28e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE2Njg1NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8950#discussion_r486166855", "bodyText": "ok", "author": "smaniraju", "createdAt": "2020-09-10T08:40:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ3MDczMg=="}], "type": "inlineReview", "revised_code": {"commit": "eaae6ce323073da35dcc4be86514e9e019e2ed72", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java b/core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java\nindex e5151e5065..6fc0d7e8f1 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java\n\n@@ -373,21 +375,12 @@ public class ClusterBootstrapper {\n         }\n     }\n \n-    String getNodeNameForInstance(InstanceMetaData im, Stack stack,\n-            Map<String, AtomicLong> hostGroupNodeIndex, Set<String> clusterNodeNames) {\n-        if (isNotBlank(im.getShortHostname())) {\n-            return im.getShortHostname();\n-        }\n-        AtomicLong hostGroupIndex = hostGroupNodeIndex.computeIfAbsent(im.getInstanceGroup().getGroupName(),\n-                instantGroup -> new AtomicLong(0));\n-        String generatedHostName;\n-        do {\n-            generatedHostName = hostDiscoveryService.calculateHostname(stack.getCustomHostname(), im.getShortHostname(),\n-                    im.getInstanceGroupName(), hostGroupIndex.getAndIncrement(), stack.isHostgroupNameAsHostname());\n-        } while (clusterNodeNames.contains(generatedHostName));\n-\n-        LOGGER.debug(\"Generated hostname {} for address: {}\", generatedHostName, im.getPrivateIp());\n-        clusterNodeNames.add(generatedHostName);\n-        return generatedHostName;\n+    private Map<String, AtomicLong> getNodeCountWithDiscoveryFQDNByHostGroup(Stack stack) {\n+        return stack.getInstanceGroups().stream().collect(Collectors.toMap(\n+                InstanceGroup::getGroupName,\n+                instanceGroup -> new AtomicLong(instanceGroup.getNotTerminatedInstanceMetaDataSet().stream()\n+                        .filter(im -> isNoneBlank(im.getDiscoveryFQDN()))\n+                        .collect(Collectors.counting()))\n+        ));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ3MTgxMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8950#discussion_r485471811", "bodyText": "this doesn't scale well at first blink, if I have a 300 node cluster in a single hostgroup and upscale with 50 node what would happen?", "author": "lacikaaa", "createdAt": "2020-09-09T09:27:45Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java", "diffHunk": "@@ -361,4 +373,21 @@ private void validatePollingResultForCancellation(PollingResult pollingResult, S\n         }\n     }\n \n+    String getNodeNameForInstance(InstanceMetaData im, Stack stack,\n+            Map<String, AtomicLong> hostGroupNodeIndex, Set<String> clusterNodeNames) {\n+        if (isNotBlank(im.getShortHostname())) {\n+            return im.getShortHostname();\n+        }\n+        AtomicLong hostGroupIndex = hostGroupNodeIndex.computeIfAbsent(im.getInstanceGroup().getGroupName(),\n+                instantGroup -> new AtomicLong(0));\n+        String generatedHostName;\n+        do {\n+            generatedHostName = hostDiscoveryService.calculateHostname(stack.getCustomHostname(), im.getShortHostname(),\n+                    im.getInstanceGroupName(), hostGroupIndex.getAndIncrement(), stack.isHostgroupNameAsHostname());\n+        } while (clusterNodeNames.contains(generatedHostName));", "originalCommit": "2ab8927b87e722e9e11fd5409a8ecba88815d28e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE3MDgwOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8950#discussion_r486170808", "bodyText": "if 300 node cluster in hostgroup, hostGroupNodeIndex would be initialized to 300 before hitting this loop. So the first new node would get 301 index and subsequent nodes would get next sequential indexes. The existing clusterNodeNames check is failSafe to ensure no duplicate name is generated as that would fail the cluster launch\\scaling.", "author": "smaniraju", "createdAt": "2020-09-10T08:46:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ3MTgxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "eaae6ce323073da35dcc4be86514e9e019e2ed72", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java b/core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java\nindex e5151e5065..6fc0d7e8f1 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java\n\n@@ -373,21 +375,12 @@ public class ClusterBootstrapper {\n         }\n     }\n \n-    String getNodeNameForInstance(InstanceMetaData im, Stack stack,\n-            Map<String, AtomicLong> hostGroupNodeIndex, Set<String> clusterNodeNames) {\n-        if (isNotBlank(im.getShortHostname())) {\n-            return im.getShortHostname();\n-        }\n-        AtomicLong hostGroupIndex = hostGroupNodeIndex.computeIfAbsent(im.getInstanceGroup().getGroupName(),\n-                instantGroup -> new AtomicLong(0));\n-        String generatedHostName;\n-        do {\n-            generatedHostName = hostDiscoveryService.calculateHostname(stack.getCustomHostname(), im.getShortHostname(),\n-                    im.getInstanceGroupName(), hostGroupIndex.getAndIncrement(), stack.isHostgroupNameAsHostname());\n-        } while (clusterNodeNames.contains(generatedHostName));\n-\n-        LOGGER.debug(\"Generated hostname {} for address: {}\", generatedHostName, im.getPrivateIp());\n-        clusterNodeNames.add(generatedHostName);\n-        return generatedHostName;\n+    private Map<String, AtomicLong> getNodeCountWithDiscoveryFQDNByHostGroup(Stack stack) {\n+        return stack.getInstanceGroups().stream().collect(Collectors.toMap(\n+                InstanceGroup::getGroupName,\n+                instanceGroup -> new AtomicLong(instanceGroup.getNotTerminatedInstanceMetaDataSet().stream()\n+                        .filter(im -> isNoneBlank(im.getDiscoveryFQDN()))\n+                        .collect(Collectors.counting()))\n+        ));\n     }\n }\n"}}, {"oid": "eaae6ce323073da35dcc4be86514e9e019e2ed72", "url": "https://github.com/hortonworks/cloudbreak/commit/eaae6ce323073da35dcc4be86514e9e019e2ed72", "message": "CB-8739 Consistent Hostnames Enhancements\n\nNode name generation logic enhanced so that all  hostgroup's nodes start with index 0.", "committedDate": "2020-09-10T08:11:42Z", "type": "forcePushed"}, {"oid": "cfbd729ccab8601f2877127fc0a04e5e8c4e62eb", "url": "https://github.com/hortonworks/cloudbreak/commit/cfbd729ccab8601f2877127fc0a04e5e8c4e62eb", "message": "CB-8739 Consistent Hostnames Enhancements\n\nNode name generation logic enhanced so that all  hostgroup's nodes start with index 0.", "committedDate": "2020-09-11T11:06:15Z", "type": "forcePushed"}, {"oid": "92976cb9f57b230b1be2a0d9304146d3bce76ee2", "url": "https://github.com/hortonworks/cloudbreak/commit/92976cb9f57b230b1be2a0d9304146d3bce76ee2", "message": "CB-8739 Consistent Hostnames Enhancements\n\nNode name generation logic enhanced so that all  hostgroup's nodes start with index 0.", "committedDate": "2020-09-11T13:10:27Z", "type": "commit"}, {"oid": "92976cb9f57b230b1be2a0d9304146d3bce76ee2", "url": "https://github.com/hortonworks/cloudbreak/commit/92976cb9f57b230b1be2a0d9304146d3bce76ee2", "message": "CB-8739 Consistent Hostnames Enhancements\n\nNode name generation logic enhanced so that all  hostgroup's nodes start with index 0.", "committedDate": "2020-09-11T13:10:27Z", "type": "forcePushed"}]}