{"pr_number": 8684, "pr_title": "CB-7930 adding UMSClient to tests so we can assign resourceRoles", "pr_createdAt": "2020-07-31T15:36:55Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8684", "timeline": [{"oid": "2d25e56456cf804e568cdcdf7cb49c9102d68277", "url": "https://github.com/hortonworks/cloudbreak/commit/2d25e56456cf804e568cdcdf7cb49c9102d68277", "message": "CB-7930 adding UMSClient to tests so we can assign resourceRoles", "committedDate": "2020-08-03T06:09:44Z", "type": "forcePushed"}, {"oid": "fd758d4549eee171e1ed044c1805f090f640f844", "url": "https://github.com/hortonworks/cloudbreak/commit/fd758d4549eee171e1ed044c1805f090f640f844", "message": "CB-7930 adding UMSClient to tests so we can assign resourceRoles", "committedDate": "2020-08-03T08:55:01Z", "type": "forcePushed"}, {"oid": "6ec9369e63c2b0dd33803a0df5808f71ec88503b", "url": "https://github.com/hortonworks/cloudbreak/commit/6ec9369e63c2b0dd33803a0df5808f71ec88503b", "message": "CB-7930 adding UMSClient to tests so we can assign resourceRoles", "committedDate": "2020-08-03T12:11:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM3NDQ5Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8684#discussion_r464374497", "bodyText": "if you can use the it framework log message too then it will be on the test report as well (it is logWhen, or something, I'll check for you if you couldn't find)", "author": "afarsang", "createdAt": "2020-08-03T12:14:11Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/action/ums/AssignUmsRoleAction.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.it.cloudbreak.action.ums;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.sequenceiq.it.cloudbreak.UmsClient;\n+import com.sequenceiq.it.cloudbreak.action.Action;\n+import com.sequenceiq.it.cloudbreak.actor.CloudbreakUser;\n+import com.sequenceiq.it.cloudbreak.context.TestContext;\n+import com.sequenceiq.it.cloudbreak.dto.environment.EnvironmentTestDto;\n+\n+public class AssignUmsRoleAction implements Action<EnvironmentTestDto, UmsClient> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AssignUmsRoleAction.class);\n+\n+    private String userKey;\n+\n+    private String userRoleCrn;\n+\n+    public AssignUmsRoleAction(String userKey, String userRoleCrn) {\n+        this.userKey = userKey;\n+        this.userRoleCrn = userRoleCrn;\n+    }\n+\n+    @Override\n+    public EnvironmentTestDto action(TestContext testContext, EnvironmentTestDto testDto, UmsClient client) throws Exception {", "originalCommit": "6ec9369e63c2b0dd33803a0df5808f71ec88503b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea2532c19044f1da3b0a982a9b2219fb7ed562b6", "chunk": "diff --git a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/action/ums/AssignUmsRoleAction.java b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/action/ums/AssignUmsRoleAction.java\nindex 5e5fd67a0b..ae9dfc6408 100644\n--- a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/action/ums/AssignUmsRoleAction.java\n+++ b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/action/ums/AssignUmsRoleAction.java\n\n@@ -8,27 +8,26 @@ import org.slf4j.LoggerFactory;\n import com.sequenceiq.it.cloudbreak.UmsClient;\n import com.sequenceiq.it.cloudbreak.action.Action;\n import com.sequenceiq.it.cloudbreak.actor.CloudbreakUser;\n+import com.sequenceiq.it.cloudbreak.actor.CloudbreakUserCache;\n import com.sequenceiq.it.cloudbreak.context.TestContext;\n-import com.sequenceiq.it.cloudbreak.dto.environment.EnvironmentTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.ums.UmsTestDto;\n \n-public class AssignUmsRoleAction implements Action<EnvironmentTestDto, UmsClient> {\n+public class AssignUmsRoleAction implements Action<UmsTestDto, UmsClient> {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(AssignUmsRoleAction.class);\n \n-    private String userKey;\n+    private final String userKey;\n \n-    private String userRoleCrn;\n-\n-    public AssignUmsRoleAction(String userKey, String userRoleCrn) {\n+    public AssignUmsRoleAction(String userKey) {\n         this.userKey = userKey;\n-        this.userRoleCrn = userRoleCrn;\n     }\n \n     @Override\n-    public EnvironmentTestDto action(TestContext testContext, EnvironmentTestDto testDto, UmsClient client) throws Exception {\n-        LOGGER.info(\"Assigning resourceRole Datahubcreator for environment\");\n-        CloudbreakUser user = testContext.getUser(userKey);\n-        client.getUmsClient().assignResourceRole(user.getCrn(), testDto.getResponse().getCrn(), userRoleCrn, Optional.of(\"\"));\n+    public UmsTestDto action(TestContext testContext, UmsTestDto testDto, UmsClient client) throws Exception {\n+        CloudbreakUser user = CloudbreakUserCache.getInstance().getByName(userKey);\n+        LOGGER.info(String.format(\"Assigning resourceRole %s over resource %s for user \",\n+                testDto.getRequest().getRoleCrn(), testDto.getRequest().getResourceCrn()), user.getCrn());\n+        client.getUmsClient().assignResourceRole(user.getCrn(), testDto.getRequest().getResourceCrn(), testDto.getRequest().getRoleCrn(), Optional.of(\"\"));\n         return testDto;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM3ODczMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8684#discussion_r464378731", "bodyText": "I wouldn't enhance the basic vocabulary (given, when, then, ...), isn't it a kind of \"when\" at least \"whenAssignRole\". So the basic idea is \"given an entity/resource, when action, then assertion\".", "author": "afarsang", "createdAt": "2020-08-03T12:23:22Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/AbstractEnvironmentTestDto.java", "diffHunk": "@@ -45,6 +46,10 @@ public T when(Action<T, EnvironmentClient> action) {\n         return getTestContext().when((T) this, EnvironmentClient.class, action, emptyRunningParameter());\n     }\n \n+    public T assignRole(Action<T, UmsClient> action) {", "originalCommit": "6ec9369e63c2b0dd33803a0df5808f71ec88503b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQxMTcwOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8684#discussion_r464411708", "bodyText": "Sure, let's have a quick call about this. The generic interface was not working since the UmsClient can't inherit from the Microservices client, since it's a Grpc client, but if we can find out something happy to do so.", "author": "lnardai", "createdAt": "2020-08-03T13:26:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM3ODczMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM4NTc3Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8684#discussion_r464385772", "bodyText": "Frankly I am not fond of the testContext argument in the test. It feels somehow strange (I'm already calling testContext's method, and shall I pass a testContext). Could we find some way to solve this?", "author": "afarsang", "createdAt": "2020-08-03T12:38:13Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/authorization/DatalakeDatahubCreateAuthTest.java", "diffHunk": "@@ -81,11 +81,11 @@ public void testCreateEnvironment(MockedTestContext testContext) {\n                 .when(sdxTestClient.createInternal(), key(sdxInternal))\n                 .awaitForFlow(key(sdxInternal))\n                 .await(SdxClusterStatusResponse.RUNNING)\n-                .when(sdxTestClient.describeInternal(), RunningParameter.who(Actor.useRealUmsUser(AuthUserKeys.MGMT_CONSOLE_ADMIN_B)))\n+                .when(sdxTestClient.describeInternal(), RunningParameter.who(Actor.useRealUmsUser(AuthUserKeys.MGMT_CONSOLE_ADMIN_B, testContext)))", "originalCommit": "6ec9369e63c2b0dd33803a0df5808f71ec88503b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQxMTkwNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8684#discussion_r464411905", "bodyText": "Agree, it's ugly but it's working, we should find a better way for this.", "author": "lnardai", "createdAt": "2020-08-03T13:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM4NTc3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ea2532c19044f1da3b0a982a9b2219fb7ed562b6", "chunk": "diff --git a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/authorization/DatalakeDatahubCreateAuthTest.java b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/authorization/DatalakeDatahubCreateAuthTest.java\nindex 6ff8629a1c..1bc996e550 100644\n--- a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/authorization/DatalakeDatahubCreateAuthTest.java\n+++ b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/authorization/DatalakeDatahubCreateAuthTest.java\n\n@@ -81,11 +81,11 @@ public class DatalakeDatahubCreateAuthTest extends AbstractIntegrationTest {\n                 .when(sdxTestClient.createInternal(), key(sdxInternal))\n                 .awaitForFlow(key(sdxInternal))\n                 .await(SdxClusterStatusResponse.RUNNING)\n-                .when(sdxTestClient.describeInternal(), RunningParameter.who(Actor.useRealUmsUser(AuthUserKeys.MGMT_CONSOLE_ADMIN_B, testContext)))\n+                .when(sdxTestClient.describeInternal(), RunningParameter.who(Actor.useRealUmsUser(AuthUserKeys.MGMT_CONSOLE_ADMIN_B)))\n                 .expect(ForbiddenException.class,\n                         RunningParameter.expectedMessage(\"You have no right to perform datalake/describeDetailedDatalake on resource crn:cdp.*\")\n                                 .withKey(\"SdxDescribeInternalAction\"))\n-                .when(sdxTestClient.describeInternal(), RunningParameter.who(Actor.useRealUmsUser(AuthUserKeys.ZERO_RIGHTS, testContext)))\n+                .when(sdxTestClient.describeInternal(), RunningParameter.who(Actor.useRealUmsUser(AuthUserKeys.ZERO_RIGHTS)))\n                 .expect(ForbiddenException.class,\n                         RunningParameter.expectedMessage(\"You have no right to perform datalake/describeDetailedDatalake on resource crn:cdp.*\")\n                                 .withKey(\"SdxDescribeInternalAction\"))\n"}}, {"oid": "ea2532c19044f1da3b0a982a9b2219fb7ed562b6", "url": "https://github.com/hortonworks/cloudbreak/commit/ea2532c19044f1da3b0a982a9b2219fb7ed562b6", "message": "CB-7930 adding UMSClient to tests so we can assign resourceRoles", "committedDate": "2020-08-05T13:10:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc0Mzk4MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8684#discussion_r465743980", "bodyText": "it seems like a test although no test in the name, and testannotation on the method", "author": "afarsang", "createdAt": "2020-08-05T13:54:59Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/authorization/CreateDhWithDatahubCreator.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.sequenceiq.it.cloudbreak.testcase.authorization;\n+\n+import static com.sequenceiq.it.cloudbreak.context.RunningParameter.key;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.ForbiddenException;\n+\n+import com.sequenceiq.environment.api.v1.environment.model.response.EnvironmentStatus;\n+import com.sequenceiq.it.cloudbreak.actor.Actor;\n+import com.sequenceiq.it.cloudbreak.client.CredentialTestClient;\n+import com.sequenceiq.it.cloudbreak.client.DistroXTestClient;\n+import com.sequenceiq.it.cloudbreak.client.EnvironmentTestClient;\n+import com.sequenceiq.it.cloudbreak.client.FreeIpaTestClient;\n+import com.sequenceiq.it.cloudbreak.context.MockedTestContext;\n+import com.sequenceiq.it.cloudbreak.context.RunningParameter;\n+import com.sequenceiq.it.cloudbreak.context.TestContext;\n+import com.sequenceiq.it.cloudbreak.dto.credential.CredentialTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.distrox.DistroXTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.environment.EnvironmentTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.ums.UmsTestDto;\n+import com.sequenceiq.it.cloudbreak.mock.ITResponse;\n+import com.sequenceiq.it.cloudbreak.mock.freeipa.FreeIpaRouteHandler;\n+import com.sequenceiq.it.cloudbreak.spark.DynamicRouteStack;\n+import com.sequenceiq.it.cloudbreak.testcase.AbstractIntegrationTest;\n+\n+public class CreateDhWithDatahubCreator extends AbstractIntegrationTest {", "originalCommit": "ea2532c19044f1da3b0a982a9b2219fb7ed562b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1ODUxMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8684#discussion_r465758513", "bodyText": "I'll pick this up in another PR.", "author": "lnardai", "createdAt": "2020-08-05T14:15:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc0Mzk4MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc0NDYyMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8684#discussion_r465744620", "bodyText": "getResponsecan be null", "author": "afarsang", "createdAt": "2020-08-05T13:55:51Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/environment/EnvironmentTestDto.java", "diffHunk": "@@ -370,4 +371,8 @@ private String getResourceGroupUsage() {\n         return getTestParameter().get(ResourceGroupTest.AZURE_RESOURCE_GROUP_USAGE);\n     }\n \n+    @Override\n+    public String getCrn() {\n+        return getResponse().getCrn();", "originalCommit": "ea2532c19044f1da3b0a982a9b2219fb7ed562b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "31de010e02c02035ab8c288dbab4ca482d6d2ab5", "chunk": "diff --git a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/environment/EnvironmentTestDto.java b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/environment/EnvironmentTestDto.java\nindex 613b65cde7..d4e463b059 100644\n--- a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/environment/EnvironmentTestDto.java\n+++ b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/environment/EnvironmentTestDto.java\n\n@@ -373,6 +373,9 @@ public class EnvironmentTestDto\n \n     @Override\n     public String getCrn() {\n+        if (getResponse() == null) {\n+            throw new IllegalStateException(\"You have tried to assign to a Dto that hasn't been created and therefore has no Response object.\");\n+        }\n         return getResponse().getCrn();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc0NDg5Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8684#discussion_r465744892", "bodyText": "agree :)", "author": "afarsang", "createdAt": "2020-08-05T13:56:10Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/ums/UmsTestDto.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.sequenceiq.it.cloudbreak.dto.ums;\n+\n+import static com.sequenceiq.it.cloudbreak.context.RunningParameter.emptyRunningParameter;\n+\n+import com.sequenceiq.it.cloudbreak.Prototype;\n+import com.sequenceiq.it.cloudbreak.UmsClient;\n+import com.sequenceiq.it.cloudbreak.action.Action;\n+import com.sequenceiq.it.cloudbreak.action.ums.AssignResourceRequest;\n+import com.sequenceiq.it.cloudbreak.assign.Assignable;\n+import com.sequenceiq.it.cloudbreak.context.TestContext;\n+import com.sequenceiq.it.cloudbreak.dto.AbstractTestDto;\n+\n+@Prototype\n+public class UmsTestDto extends AbstractTestDto<AssignResourceRequest, Object, UmsTestDto, UmsClient> {\n+\n+    private static final String UMS = \"UMS\";\n+\n+    private static final String DH_CREATOR_CRN = \"crn:altus:iam:us-west-1:altus:resourceRole:DataHubCreator\";\n+\n+    public UmsTestDto(TestContext testContext) {\n+        super(new AssignResourceRequest(), testContext);\n+    }\n+\n+    public UmsTestDto() {\n+        super(UmsTestDto.class.getSimpleName().toUpperCase());\n+        setRequest(new AssignResourceRequest());\n+    }\n+\n+    public UmsTestDto withDatahubCreator() {\n+        getRequest().setRoleCrn(DH_CREATOR_CRN);\n+        return this;\n+    }\n+\n+    public UmsTestDto assignTarget(String key) {\n+        // TODO castExceptionHandling", "originalCommit": "ea2532c19044f1da3b0a982a9b2219fb7ed562b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "31de010e02c02035ab8c288dbab4ca482d6d2ab5", "chunk": "diff --git a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/ums/UmsTestDto.java b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/ums/UmsTestDto.java\nindex 2eb32fc588..344a75aafc 100644\n--- a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/ums/UmsTestDto.java\n+++ b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/ums/UmsTestDto.java\n\n@@ -32,9 +32,12 @@ public class UmsTestDto extends AbstractTestDto<AssignResourceRequest, Object, U\n     }\n \n     public UmsTestDto assignTarget(String key) {\n-        // TODO castExceptionHandling\n-        Assignable dto = getTestContext().get(key);\n-        getRequest().setResourceCrn(dto.getCrn());\n+        try {\n+            Assignable dto = getTestContext().get(key);\n+            getRequest().setResourceCrn(dto.getCrn());\n+        } catch (ClassCastException e) {\n+            throw new IllegalArgumentException(String.format(\"TestContext member with key %s does not implement %s interface\", key, Assignable.class.getCanonicalName()), e);\n+        }\n         return this;\n     }\n \n"}}, {"oid": "31de010e02c02035ab8c288dbab4ca482d6d2ab5", "url": "https://github.com/hortonworks/cloudbreak/commit/31de010e02c02035ab8c288dbab4ca482d6d2ab5", "message": "CB-7930 adding UMSClient to tests so we can assign resourceRoles", "committedDate": "2020-08-05T15:20:24Z", "type": "forcePushed"}, {"oid": "f57127abfbff2281a05b31272c5a0f8c804cd8f9", "url": "https://github.com/hortonworks/cloudbreak/commit/f57127abfbff2281a05b31272c5a0f8c804cd8f9", "message": "CB-7930 adding UMSClient to tests so we can assign resourceRoles", "committedDate": "2020-08-05T16:27:52Z", "type": "commit"}, {"oid": "f57127abfbff2281a05b31272c5a0f8c804cd8f9", "url": "https://github.com/hortonworks/cloudbreak/commit/f57127abfbff2281a05b31272c5a0f8c804cd8f9", "message": "CB-7930 adding UMSClient to tests so we can assign resourceRoles", "committedDate": "2020-08-05T16:27:52Z", "type": "forcePushed"}]}