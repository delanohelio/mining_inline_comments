{"pr_number": 7184, "pr_title": "CB-5076 subnet configurations for experiences", "pr_createdAt": "2020-01-31T10:10:59Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7184", "timeline": [{"oid": "395acafcda692290bb5237dc9fb11a27cb654294", "url": "https://github.com/hortonworks/cloudbreak/commit/395acafcda692290bb5237dc9fb11a27cb654294", "message": "CB-5076 subnet configurations for experiences", "committedDate": "2020-02-03T16:02:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxMjY1Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7184#discussion_r374512652", "bodyText": "unnecessary line break", "author": "topolyai5", "createdAt": "2020-02-04T07:38:17Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsNetworkCfTemplateProvider.java", "diffHunk": "@@ -43,8 +43,11 @@ public String provide(String vpcCidr, List<SubnetRequest> subnets, boolean priva\n         }\n     }\n \n-    private Map<String, Object> createModel(String vpcCidr, List<SubnetRequest> subnets, boolean privateSubnetEnabled) {\n+    private Map<String, Object> createModel(String envName, Long envId, String vpcCidr, List<SubnetRequest> subnets,\n+        boolean privateSubnetEnabled) {", "originalCommit": "395acafcda692290bb5237dc9fb11a27cb654294", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "996eba33925d27ed3d363f6f1d20de91bfef50f7", "chunk": "diff --git a/cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsNetworkCfTemplateProvider.java b/cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsNetworkCfTemplateProvider.java\nindex 3f938695ef..eccef68f85 100644\n--- a/cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsNetworkCfTemplateProvider.java\n+++ b/cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsNetworkCfTemplateProvider.java\n\n@@ -43,8 +43,7 @@ public class AwsNetworkCfTemplateProvider {\n         }\n     }\n \n-    private Map<String, Object> createModel(String envName, Long envId, String vpcCidr, List<SubnetRequest> subnets,\n-        boolean privateSubnetEnabled) {\n+    private Map<String, Object> createModel(String envName, Long envId, String vpcCidr, List<SubnetRequest> subnets, boolean privateSubnetEnabled) {\n         Map<String, Object> model = new HashMap<>();\n         model.put(\"environmentName\", envName);\n         model.put(\"environmentId\", envId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxMjc4OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7184#discussion_r374512789", "bodyText": "you can move the private subnet inside the function", "author": "topolyai5", "createdAt": "2020-02-04T07:38:42Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsNetworkCfTemplateProvider.java", "diffHunk": "@@ -31,9 +31,9 @@\n     @Inject\n     private FreeMarkerTemplateUtils freeMarkerTemplateUtils;\n \n-    public String provide(String vpcCidr, List<SubnetRequest> subnets, boolean privateSubnetEnabled) {\n+    public String provide(String envName, Long envId, String vpcCidr, List<SubnetRequest> subnets, boolean privateSubnetEnabled) {\n \n-        Map<String, Object> model = createModel(vpcCidr, subnets, privateSubnetEnabled);\n+        Map<String, Object> model = createModel(envName, envId, vpcCidr, subnets, privateSubnetEnabled);", "originalCommit": "395acafcda692290bb5237dc9fb11a27cb654294", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxMzg1MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7184#discussion_r374513851", "bodyText": "i think you want to use the private subnet cidrs", "author": "topolyai5", "createdAt": "2020-02-04T07:42:01Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSubnetRequestProvider.java", "diffHunk": "@@ -14,23 +13,29 @@\n @Component\n public class AwsSubnetRequestProvider {\n \n-    public List<SubnetRequest> provide(AmazonEC2Client ec2Client, List<String> subnetCidrs) {\n-        Assert.isTrue(subnetCidrs.size() % 2 == 0, \"The number of the subnets should be even!\");\n+    public List<SubnetRequest> provide(AmazonEC2Client ec2Client, List<String> publicSubnetCidrs,  List<String> privateSubnetCidrs) {\n         List<String> az = getAvailabilityZones(ec2Client);\n         List<SubnetRequest> subnets = new ArrayList<>();\n-        int sunetIndex = 0;\n-        for (int i = 0; i < subnetCidrs.size() / 2; i++) {\n+        int index = 0;\n+\n+        for (int i = 0; i < publicSubnetCidrs.size(); i++) {\n+            SubnetRequest subnetRequest = new SubnetRequest();\n+            subnetRequest.setPublicSubnetCidr(publicSubnetCidrs.get(i));\n+            subnetRequest.setAvailabilityZone(az.get(i % az.size()));\n+            subnetRequest.setSubnetGroup(i % publicSubnetCidrs.size());\n+            subnetRequest.setIndex(index++);\n+            subnets.add(subnetRequest);\n+        }\n+\n+        for (int i = 0; i < privateSubnetCidrs.size(); i++) {\n             SubnetRequest subnetRequest = new SubnetRequest();\n-            subnetRequest.setPublicSubnetCidr(subnetCidrs.get(sunetIndex));\n-            subnetRequest.setPrivateSubnetCidr(subnetCidrs.get(sunetIndex + 1));\n-            sunetIndex += 2;\n-            if (i < az.size()) {\n-                subnetRequest.setAvailabilityZone(az.get(i));\n-            } else {\n-                subnetRequest.setAvailabilityZone(az.get(az.size() - 1));\n-            }\n+            subnetRequest.setPrivateSubnetCidr(privateSubnetCidrs.get(i));\n+            subnetRequest.setAvailabilityZone(az.get(i % az.size()));\n+            subnetRequest.setSubnetGroup(i % publicSubnetCidrs.size());", "originalCommit": "395acafcda692290bb5237dc9fb11a27cb654294", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "996eba33925d27ed3d363f6f1d20de91bfef50f7", "chunk": "diff --git a/cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSubnetRequestProvider.java b/cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSubnetRequestProvider.java\nindex 2e74d3c24b..4d205b90ca 100644\n--- a/cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSubnetRequestProvider.java\n+++ b/cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSubnetRequestProvider.java\n\n@@ -31,6 +31,7 @@ public class AwsSubnetRequestProvider {\n             SubnetRequest subnetRequest = new SubnetRequest();\n             subnetRequest.setPrivateSubnetCidr(privateSubnetCidrs.get(i));\n             subnetRequest.setAvailabilityZone(az.get(i % az.size()));\n+            // we will create 3 public subnet for nat gateways so we need to loadbalance between the public subnets\n             subnetRequest.setSubnetGroup(i % publicSubnetCidrs.size());\n             subnetRequest.setIndex(index++);\n             subnets.add(subnetRequest);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxNjE5Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7184#discussion_r374516197", "bodyText": "same in AWS", "author": "topolyai5", "createdAt": "2020-02-04T07:49:11Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureSubnetRequestProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.network.SubnetRequest;\n+\n+@Component\n+public class AzureSubnetRequestProvider {\n+\n+    public List<SubnetRequest> provide(String region, List<String> publicSubnetCidrs,  List<String> privateSubnetCidrs) {\n+        List<SubnetRequest> subnets = new ArrayList<>();\n+        int index = 0;\n+\n+        for (int i = 0; i < publicSubnetCidrs.size(); i++) {\n+            SubnetRequest subnetRequest = new SubnetRequest();\n+            subnetRequest.setPublicSubnetCidr(publicSubnetCidrs.get(i));\n+            subnetRequest.setAvailabilityZone(region);\n+            subnetRequest.setSubnetGroup(i % publicSubnetCidrs.size());\n+            subnetRequest.setIndex(index++);\n+            subnets.add(subnetRequest);\n+        }\n+\n+        for (int i = 0; i < privateSubnetCidrs.size(); i++) {\n+            SubnetRequest subnetRequest = new SubnetRequest();\n+            subnetRequest.setPrivateSubnetCidr(privateSubnetCidrs.get(i));\n+            subnetRequest.setAvailabilityZone(region);\n+            subnetRequest.setSubnetGroup(i % publicSubnetCidrs.size());\n+            subnetRequest.setIndex(index++);", "originalCommit": "395acafcda692290bb5237dc9fb11a27cb654294", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxNjcwNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7184#discussion_r374516705", "bodyText": "I think you can refactor these lines", "author": "topolyai5", "createdAt": "2020-02-04T07:50:42Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureSubnetRequestProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.network.SubnetRequest;\n+\n+@Component\n+public class AzureSubnetRequestProvider {\n+\n+    public List<SubnetRequest> provide(String region, List<String> publicSubnetCidrs,  List<String> privateSubnetCidrs) {\n+        List<SubnetRequest> subnets = new ArrayList<>();\n+        int index = 0;\n+\n+        for (int i = 0; i < publicSubnetCidrs.size(); i++) {", "originalCommit": "395acafcda692290bb5237dc9fb11a27cb654294", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "996eba33925d27ed3d363f6f1d20de91bfef50f7", "url": "https://github.com/hortonworks/cloudbreak/commit/996eba33925d27ed3d363f6f1d20de91bfef50f7", "message": "CB-5076 subnet configurations for experiences", "committedDate": "2020-02-04T07:59:24Z", "type": "commit"}, {"oid": "996eba33925d27ed3d363f6f1d20de91bfef50f7", "url": "https://github.com/hortonworks/cloudbreak/commit/996eba33925d27ed3d363f6f1d20de91bfef50f7", "message": "CB-5076 subnet configurations for experiences", "committedDate": "2020-02-04T07:59:24Z", "type": "forcePushed"}]}