{"pr_number": 7846, "pr_title": "CB-6583 Allow ManagementConsoleUser's to use our default provided image catalog", "pr_createdAt": "2020-04-21T07:32:34Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7846", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2ODczNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#discussion_r411968736", "bodyText": "Is there a reason to switch to constructor injection? I have no problem with it, just other classes in the module don't use it", "author": "horadla23", "createdAt": "2020-04-21T08:10:40Z", "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java", "diffHunk": "@@ -18,39 +22,95 @@\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.stereotype.Component;\n \n+import com.google.common.base.Joiner;\n import com.google.common.collect.Lists;\n-import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n+import com.google.common.collect.Maps;\n import com.sequenceiq.authorization.annotation.AuthorizationResource;\n+import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.authorization.resource.RightUtils;\n \n @Component\n public class CommonPermissionCheckingUtils {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CommonPermissionCheckingUtils.class);\n \n-    @Inject\n-    private UmsAccountAuthorizationService umsAccountAuthorizationService;\n+    private final UmsAccountAuthorizationService umsAccountAuthorizationService;\n+\n+    private final UmsResourceAuthorizationService umsResourceAuthorizationService;\n+\n+    private final Map<AuthorizationResourceType, DefaultResourceChecker> defaultResourceCheckers;\n \n     @Inject\n-    private UmsResourceAuthorizationService umsResourceAuthorizationService;\n+    public CommonPermissionCheckingUtils(UmsAccountAuthorizationService umsAccountAuthorizationService,\n+            UmsResourceAuthorizationService umsResourceAuthorizationService,\n+            List<DefaultResourceChecker> defaultResourceCheckers) {\n+        this.umsAccountAuthorizationService = umsAccountAuthorizationService;\n+        this.umsResourceAuthorizationService = umsResourceAuthorizationService;\n+        this.defaultResourceCheckers = Maps.immutableEnumMap(defaultResourceCheckers.stream()\n+                .collect(toMap(DefaultResourceChecker::getResourceType, Function.identity())));\n+    }", "originalCommit": "eb2912824e11018aa304ce6b6d4482cccf380e39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3NTQ5NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#discussion_r412175494", "bodyText": "This way the field can be final and we don't need a silly @PostConstruct. Of course we can start a religious war like \"follow the conventions\", you could have done it from java config  or there is nothing wrong with non final fields and @PostConstruct. I think it's better to make it final and use an immutable EnumMap here in the constructor.", "author": "foldik", "createdAt": "2020-04-21T13:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2ODczNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwODgzNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#discussion_r412208836", "bodyText": "I can live with this (although for me the other way feels more comfortable), but one day one team member will start that war, i'm almost 100% sure about that :) I'm just like if a module follows one direction regarding things like this injection stuff based on team agreement, but I do not want to start (or getting involved in) a long discussion about this. Anyway I suggest to involve at least one other team member to check this, because some people do not like this, because I know there were discussions regarding this topic.", "author": "horadla23", "createdAt": "2020-04-21T13:58:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2ODczNg=="}], "type": "inlineReview", "revised_code": {"commit": "e0b66b9fe3fc9776d06d2efef5bc498e7c9ecd4a", "chunk": "diff --git a/authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java b/authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java\nindex 42e1109feb..556d95b7a3 100644\n--- a/authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java\n+++ b/authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java\n\n@@ -61,12 +61,7 @@ public class CommonPermissionCheckingUtils {\n         if (defaultResourceChecker == null || !defaultResourceChecker.isDefault(resourceCrn)) {\n             umsResourceAuthorizationService.checkRightOfUserOnResource(userCrn, resource, action, resourceCrn);\n         } else {\n-            if (!defaultResourceChecker.isAllowedAction(action)) {\n-                String right = RightUtils.getRight(resource, action);\n-                String msg = String.format(\"You have no right to perform %s on resource %s\", right, resourceCrn);\n-                LOGGER.error(msg);\n-                throw new AccessDeniedException(msg);\n-            }\n+            throwAccessDeniedIfActionNotAllowed(resource, action, List.of(resourceCrn), defaultResourceChecker);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2OTA3NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#discussion_r411969075", "bodyText": "This block occurs twice, please move into a method", "author": "horadla23", "createdAt": "2020-04-21T08:11:04Z", "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java", "diffHunk": "@@ -18,39 +22,95 @@\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.stereotype.Component;\n \n+import com.google.common.base.Joiner;\n import com.google.common.collect.Lists;\n-import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n+import com.google.common.collect.Maps;\n import com.sequenceiq.authorization.annotation.AuthorizationResource;\n+import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.authorization.resource.RightUtils;\n \n @Component\n public class CommonPermissionCheckingUtils {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CommonPermissionCheckingUtils.class);\n \n-    @Inject\n-    private UmsAccountAuthorizationService umsAccountAuthorizationService;\n+    private final UmsAccountAuthorizationService umsAccountAuthorizationService;\n+\n+    private final UmsResourceAuthorizationService umsResourceAuthorizationService;\n+\n+    private final Map<AuthorizationResourceType, DefaultResourceChecker> defaultResourceCheckers;\n \n     @Inject\n-    private UmsResourceAuthorizationService umsResourceAuthorizationService;\n+    public CommonPermissionCheckingUtils(UmsAccountAuthorizationService umsAccountAuthorizationService,\n+            UmsResourceAuthorizationService umsResourceAuthorizationService,\n+            List<DefaultResourceChecker> defaultResourceCheckers) {\n+        this.umsAccountAuthorizationService = umsAccountAuthorizationService;\n+        this.umsResourceAuthorizationService = umsResourceAuthorizationService;\n+        this.defaultResourceCheckers = Maps.immutableEnumMap(defaultResourceCheckers.stream()\n+                .collect(toMap(DefaultResourceChecker::getResourceType, Function.identity())));\n+    }\n \n     public void checkPermissionForUser(AuthorizationResourceType resource, AuthorizationResourceAction action, String userCrn) {\n         umsAccountAuthorizationService.checkRightOfUser(userCrn, resource, action);\n     }\n \n     public void checkPermissionForUserOnResource(AuthorizationResourceType resource, AuthorizationResourceAction action, String userCrn, String resourceCrn) {\n-        umsResourceAuthorizationService.checkRightOfUserOnResource(userCrn, resource, action, resourceCrn);\n+        DefaultResourceChecker defaultResourceChecker = defaultResourceCheckers.get(resource);\n+        if (defaultResourceChecker == null || !defaultResourceChecker.isDefault(resourceCrn)) {\n+            umsResourceAuthorizationService.checkRightOfUserOnResource(userCrn, resource, action, resourceCrn);\n+        } else {\n+            if (!defaultResourceChecker.isAllowedAction(action)) {\n+                String right = RightUtils.getRight(resource, action);\n+                String msg = String.format(\"You have no right to perform %s on resource %s\", right, resourceCrn);\n+                LOGGER.error(msg);\n+                throw new AccessDeniedException(msg);", "originalCommit": "eb2912824e11018aa304ce6b6d4482cccf380e39", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0b66b9fe3fc9776d06d2efef5bc498e7c9ecd4a", "chunk": "diff --git a/authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java b/authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java\nindex 42e1109feb..556d95b7a3 100644\n--- a/authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java\n+++ b/authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java\n\n@@ -61,12 +61,7 @@ public class CommonPermissionCheckingUtils {\n         if (defaultResourceChecker == null || !defaultResourceChecker.isDefault(resourceCrn)) {\n             umsResourceAuthorizationService.checkRightOfUserOnResource(userCrn, resource, action, resourceCrn);\n         } else {\n-            if (!defaultResourceChecker.isAllowedAction(action)) {\n-                String right = RightUtils.getRight(resource, action);\n-                String msg = String.format(\"You have no right to perform %s on resource %s\", right, resourceCrn);\n-                LOGGER.error(msg);\n-                throw new AccessDeniedException(msg);\n-            }\n+            throwAccessDeniedIfActionNotAllowed(resource, action, List.of(resourceCrn), defaultResourceChecker);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2OTY3MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#discussion_r411969670", "bodyText": "This also appears twice, maybe it is wort to move out into a method to increase readability of the code", "author": "horadla23", "createdAt": "2020-04-21T08:11:47Z", "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java", "diffHunk": "@@ -18,39 +22,95 @@\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.stereotype.Component;\n \n+import com.google.common.base.Joiner;\n import com.google.common.collect.Lists;\n-import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n+import com.google.common.collect.Maps;\n import com.sequenceiq.authorization.annotation.AuthorizationResource;\n+import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.authorization.resource.RightUtils;\n \n @Component\n public class CommonPermissionCheckingUtils {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CommonPermissionCheckingUtils.class);\n \n-    @Inject\n-    private UmsAccountAuthorizationService umsAccountAuthorizationService;\n+    private final UmsAccountAuthorizationService umsAccountAuthorizationService;\n+\n+    private final UmsResourceAuthorizationService umsResourceAuthorizationService;\n+\n+    private final Map<AuthorizationResourceType, DefaultResourceChecker> defaultResourceCheckers;\n \n     @Inject\n-    private UmsResourceAuthorizationService umsResourceAuthorizationService;\n+    public CommonPermissionCheckingUtils(UmsAccountAuthorizationService umsAccountAuthorizationService,\n+            UmsResourceAuthorizationService umsResourceAuthorizationService,\n+            List<DefaultResourceChecker> defaultResourceCheckers) {\n+        this.umsAccountAuthorizationService = umsAccountAuthorizationService;\n+        this.umsResourceAuthorizationService = umsResourceAuthorizationService;\n+        this.defaultResourceCheckers = Maps.immutableEnumMap(defaultResourceCheckers.stream()\n+                .collect(toMap(DefaultResourceChecker::getResourceType, Function.identity())));\n+    }\n \n     public void checkPermissionForUser(AuthorizationResourceType resource, AuthorizationResourceAction action, String userCrn) {\n         umsAccountAuthorizationService.checkRightOfUser(userCrn, resource, action);\n     }\n \n     public void checkPermissionForUserOnResource(AuthorizationResourceType resource, AuthorizationResourceAction action, String userCrn, String resourceCrn) {\n-        umsResourceAuthorizationService.checkRightOfUserOnResource(userCrn, resource, action, resourceCrn);\n+        DefaultResourceChecker defaultResourceChecker = defaultResourceCheckers.get(resource);\n+        if (defaultResourceChecker == null || !defaultResourceChecker.isDefault(resourceCrn)) {\n+            umsResourceAuthorizationService.checkRightOfUserOnResource(userCrn, resource, action, resourceCrn);\n+        } else {\n+            if (!defaultResourceChecker.isAllowedAction(action)) {\n+                String right = RightUtils.getRight(resource, action);\n+                String msg = String.format(\"You have no right to perform %s on resource %s\", right, resourceCrn);\n+                LOGGER.error(msg);\n+                throw new AccessDeniedException(msg);\n+            }\n+        }\n     }\n \n     public void checkPermissionForUserOnResources(AuthorizationResourceType resource, AuthorizationResourceAction action,\n             String userCrn, Collection<String> resourceCrns) {\n-        umsResourceAuthorizationService.checkRightOfUserOnResources(userCrn, resource, action, resourceCrns);\n+        DefaultResourceChecker defaultResourceChecker = defaultResourceCheckers.get(resource);\n+        if (defaultResourceChecker == null) {\n+            umsResourceAuthorizationService.checkRightOfUserOnResources(userCrn, resource, action, resourceCrns);\n+        } else {\n+            Collection<String> defaultResourceCrns = defaultResourceChecker.getDefaultResourceCrns(resourceCrns);\n+            Collection<String> notDefaultResourceCrns = resourceCrns.stream()\n+                    .filter(crn -> !defaultResourceCrns.contains(crn))\n+                    .collect(Collectors.toList());", "originalCommit": "eb2912824e11018aa304ce6b6d4482cccf380e39", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0b66b9fe3fc9776d06d2efef5bc498e7c9ecd4a", "chunk": "diff --git a/authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java b/authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java\nindex 42e1109feb..556d95b7a3 100644\n--- a/authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java\n+++ b/authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java\n\n@@ -61,12 +61,7 @@ public class CommonPermissionCheckingUtils {\n         if (defaultResourceChecker == null || !defaultResourceChecker.isDefault(resourceCrn)) {\n             umsResourceAuthorizationService.checkRightOfUserOnResource(userCrn, resource, action, resourceCrn);\n         } else {\n-            if (!defaultResourceChecker.isAllowedAction(action)) {\n-                String right = RightUtils.getRight(resource, action);\n-                String msg = String.format(\"You have no right to perform %s on resource %s\", right, resourceCrn);\n-                LOGGER.error(msg);\n-                throw new AccessDeniedException(msg);\n-            }\n+            throwAccessDeniedIfActionNotAllowed(resource, action, List.of(resourceCrn), defaultResourceChecker);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3MzE5MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#discussion_r411973190", "bodyText": "Are these the CRNs of default catalogs? Format doesn't like a CRN format", "author": "horadla23", "createdAt": "2020-04-21T08:16:50Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/ImageCatalogService.java", "diffHunk": "@@ -54,15 +59,20 @@\n import com.sequenceiq.cloudbreak.service.account.PreferencesService;\n import com.sequenceiq.cloudbreak.service.user.UserProfileHandler;\n import com.sequenceiq.cloudbreak.service.user.UserProfileService;\n+import com.sequenceiq.cloudbreak.service.workspace.WorkspaceService;\n import com.sequenceiq.cloudbreak.workspace.model.User;\n import com.sequenceiq.cloudbreak.workspace.model.Workspace;\n import com.sequenceiq.cloudbreak.workspace.repository.workspace.WorkspaceResourceRepository;\n \n @Component\n-public class ImageCatalogService extends AbstractWorkspaceAwareResourceService<ImageCatalog> {\n+public class ImageCatalogService extends AbstractWorkspaceAwareResourceService<ImageCatalog> implements ResourceBasedCrnProvider {\n \n     public static final String UNDEFINED = \"\";\n \n+    public static final String CLOUDBREAK_DEFAULT_CATALOG_CRN = \"cloudbreak-default-catalog-crn\";\n+\n+    public static final String CDP_DEFAULT_CATALOG_CRN = \"cdp-default-catalog-crn\";", "originalCommit": "eb2912824e11018aa304ce6b6d4482cccf380e39", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0b66b9fe3fc9776d06d2efef5bc498e7c9ecd4a", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/service/image/ImageCatalogService.java b/core/src/main/java/com/sequenceiq/cloudbreak/service/image/ImageCatalogService.java\nindex 06671fda6e..89f22c55e8 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/service/image/ImageCatalogService.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/service/image/ImageCatalogService.java\n\n@@ -59,7 +60,6 @@ import com.sequenceiq.cloudbreak.service.AbstractWorkspaceAwareResourceService;\n import com.sequenceiq.cloudbreak.service.account.PreferencesService;\n import com.sequenceiq.cloudbreak.service.user.UserProfileHandler;\n import com.sequenceiq.cloudbreak.service.user.UserProfileService;\n-import com.sequenceiq.cloudbreak.service.workspace.WorkspaceService;\n import com.sequenceiq.cloudbreak.workspace.model.User;\n import com.sequenceiq.cloudbreak.workspace.model.Workspace;\n import com.sequenceiq.cloudbreak.workspace.repository.workspace.WorkspaceResourceRepository;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3NDA1Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#discussion_r411974057", "bodyText": "I think we should talk about these default catalogs, I am not sure I get the logic here", "author": "horadla23", "createdAt": "2020-04-21T08:18:07Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/ImageCatalogService.java", "diffHunk": "@@ -691,6 +692,54 @@ private String createCRN(String accountId) {\n                 .toString();\n     }\n \n+    @Override\n+    public String getResourceCrnByResourceName(String resourceName) {\n+        if (CDP_DEFAULT_CATALOG_NAME.equals(resourceName)) {\n+            return CDP_DEFAULT_CATALOG_CRN;\n+        } else if (legacyCatalogEnabled && CLOUDBREAK_DEFAULT_CATALOG_NAME.equals(resourceName)) {\n+            return CLOUDBREAK_DEFAULT_CATALOG_CRN;\n+        } else {\n+            return imageCatalogRepository.findResourceCrnByNameAndWorkspaceId(resourceName, workspaceService.getForCurrentUser().getId())\n+                    .orElseThrow(() -> NotFoundException.notFoundException(\"Image catalog\", resourceName));", "originalCommit": "eb2912824e11018aa304ce6b6d4482cccf380e39", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0b66b9fe3fc9776d06d2efef5bc498e7c9ecd4a", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/service/image/ImageCatalogService.java b/core/src/main/java/com/sequenceiq/cloudbreak/service/image/ImageCatalogService.java\nindex 06671fda6e..89f22c55e8 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/service/image/ImageCatalogService.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/service/image/ImageCatalogService.java\n\n@@ -695,11 +704,11 @@ public class ImageCatalogService extends AbstractWorkspaceAwareResourceService<I\n     @Override\n     public String getResourceCrnByResourceName(String resourceName) {\n         if (CDP_DEFAULT_CATALOG_NAME.equals(resourceName)) {\n-            return CDP_DEFAULT_CATALOG_CRN;\n+            return getCloudbreakDefaultImageCatalog().getResourceCrn();\n         } else if (legacyCatalogEnabled && CLOUDBREAK_DEFAULT_CATALOG_NAME.equals(resourceName)) {\n-            return CLOUDBREAK_DEFAULT_CATALOG_CRN;\n+            return getCloudbreakLegacyDefaultImageCatalog().getResourceCrn();\n         } else {\n-            return imageCatalogRepository.findResourceCrnByNameAndWorkspaceId(resourceName, workspaceService.getForCurrentUser().getId())\n+            return imageCatalogRepository.findResourceCrnByNameAndTenantId(resourceName, ThreadBasedUserCrnProvider.getAccountId())\n                     .orElseThrow(() -> NotFoundException.notFoundException(\"Image catalog\", resourceName));\n         }\n     }\n"}}, {"oid": "e0b66b9fe3fc9776d06d2efef5bc498e7c9ecd4a", "url": "https://github.com/hortonworks/cloudbreak/commit/e0b66b9fe3fc9776d06d2efef5bc498e7c9ecd4a", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog.", "committedDate": "2020-04-21T12:22:20Z", "type": "forcePushed"}, {"oid": "7024a341b45f4e3a58c71c4ff6fd9dd204a4dd62", "url": "https://github.com/hortonworks/cloudbreak/commit/7024a341b45f4e3a58c71c4ff6fd9dd204a4dd62", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog.", "committedDate": "2020-04-22T08:56:55Z", "type": "forcePushed"}, {"oid": "2d1a95079a228dfb2d5c70234dd6b1ef69443f36", "url": "https://github.com/hortonworks/cloudbreak/commit/2d1a95079a228dfb2d5c70234dd6b1ef69443f36", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog.", "committedDate": "2020-04-22T09:30:16Z", "type": "forcePushed"}, {"oid": "0c845a813ed7eda339500caadf0a829392086cba", "url": "https://github.com/hortonworks/cloudbreak/commit/0c845a813ed7eda339500caadf0a829392086cba", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog.", "committedDate": "2020-04-22T09:51:27Z", "type": "forcePushed"}, {"oid": "03d6c883d431af42c3eebe4b9fdc58a166c80d0a", "url": "https://github.com/hortonworks/cloudbreak/commit/03d6c883d431af42c3eebe4b9fdc58a166c80d0a", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog.", "committedDate": "2020-04-27T06:51:27Z", "type": "forcePushed"}, {"oid": "27b64ead57d90576c1c8d3792b72ea80032b6b70", "url": "https://github.com/hortonworks/cloudbreak/commit/27b64ead57d90576c1c8d3792b72ea80032b6b70", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog.", "committedDate": "2020-04-27T07:15:25Z", "type": "forcePushed"}, {"oid": "21f0c2e97de25313ff224fed53d41c21ba39882d", "url": "https://github.com/hortonworks/cloudbreak/commit/21f0c2e97de25313ff224fed53d41c21ba39882d", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog.", "committedDate": "2020-04-27T08:32:10Z", "type": "forcePushed"}, {"oid": "2f0df1ae5aae23da79edd141e34bab3dc6d0536b", "url": "https://github.com/hortonworks/cloudbreak/commit/2f0df1ae5aae23da79edd141e34bab3dc6d0536b", "message": "CB-6583 Add authorization to image catalog.", "committedDate": "2020-04-27T11:01:28Z", "type": "forcePushed"}, {"oid": "f8d3ff4e4da0e002429d65e2aee4f6006ea10524", "url": "https://github.com/hortonworks/cloudbreak/commit/f8d3ff4e4da0e002429d65e2aee4f6006ea10524", "message": "CB-6583 Add authorization to image catalog.", "committedDate": "2020-05-04T08:33:28Z", "type": "forcePushed"}, {"oid": "34cf00a199a942d386dfd087e6d365956fcf395e", "url": "https://github.com/hortonworks/cloudbreak/commit/34cf00a199a942d386dfd087e6d365956fcf395e", "message": "CB-6583 Add authorization to image catalog.", "committedDate": "2020-05-04T10:57:31Z", "type": "commit"}, {"oid": "34cf00a199a942d386dfd087e6d365956fcf395e", "url": "https://github.com/hortonworks/cloudbreak/commit/34cf00a199a942d386dfd087e6d365956fcf395e", "message": "CB-6583 Add authorization to image catalog.", "committedDate": "2020-05-04T10:57:31Z", "type": "forcePushed"}]}