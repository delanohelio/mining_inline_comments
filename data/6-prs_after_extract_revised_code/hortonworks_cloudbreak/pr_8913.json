{"pr_number": 8913, "pr_title": "CB-8611. Implement CB flow for CM based diagnostics collection (DistroX)", "pr_createdAt": "2020-09-02T17:11:03Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8913", "timeline": [{"oid": "fa8e4dfca64f9c08e610e3a2d8c875d79850afda", "url": "https://github.com/hortonworks/cloudbreak/commit/fa8e4dfca64f9c08e610e3a2d8c875d79850afda", "message": "CB-8611. Implement CB flow for CM based diagnostics collection (DistroX)", "committedDate": "2020-09-03T16:42:18Z", "type": "forcePushed"}, {"oid": "490b4f5d41934e51ddf71357a4e28aa97f37f0ee", "url": "https://github.com/hortonworks/cloudbreak/commit/490b4f5d41934e51ddf71357a4e28aa97f37f0ee", "message": "CB-8611. Implement CB flow for CM based diagnostics collection (DistroX)", "committedDate": "2020-09-03T18:48:37Z", "type": "forcePushed"}, {"oid": "f7aaeb95bc9b32a12e69d450ee9dbf3a71227067", "url": "https://github.com/hortonworks/cloudbreak/commit/f7aaeb95bc9b32a12e69d450ee9dbf3a71227067", "message": "CB-8611. Implement CB flow for CM based diagnostics collection (DistroX)\ndetails:\n- adding new CM based diagnostics flow for distrox & stack (stack api will be used for SDX flow)\n= flow has 4 steps (similar as filecollector based), init/collect/upload/cleanup\n- init/upload/cleanup steps are reused from the filecollector flow (initialization: create required configs for filecollector, upload - send data to cloud storage, cleanup - delete files from filecollector location)\n- collect phase: run diagnostics command against CM, wait for it to finish, then copy collected file from /tmp folder (to fit into the filecollector flow, so we can upload the file)\n- disable PHONE_HOME parameter globally for CM, there is no phone home option for the Api command, so that's the easiest way\n- adding roles endpoint in order to know what roles can be filtered", "committedDate": "2020-09-04T17:57:04Z", "type": "forcePushed"}, {"oid": "8e0551fc33856e8bde6774abaff70933b24446c0", "url": "https://github.com/hortonworks/cloudbreak/commit/8e0551fc33856e8bde6774abaff70933b24446c0", "message": "CB-8611. Implement CB flow for CM based diagnostics collection (DistroX)\ndetails:\n- adding new CM based diagnostics flow for distrox & stack (stack api will be used for SDX flow)\n= flow has 4 steps (similar as filecollector based), init/collect/upload/cleanup\n- init/upload/cleanup steps are reused from the filecollector flow (initialization: create required configs for filecollector, upload - send data to cloud storage, cleanup - delete files from filecollector location)\n- collect phase: run diagnostics command against CM, wait for it to finish, then copy collected file from /tmp folder (to fit into the filecollector flow, so we can upload the file)\n- disable PHONE_HOME parameter globally for CM, there is no phone home option for the Api command, so that's the easiest way\n- adding roles endpoint in order to know what roles can be filtered", "committedDate": "2020-09-04T18:07:56Z", "type": "forcePushed"}, {"oid": "98766359af3fe8704c7e9bb9c713a9969fb033b7", "url": "https://github.com/hortonworks/cloudbreak/commit/98766359af3fe8704c7e9bb9c713a9969fb033b7", "message": "CB-8611. Implement CB flow for CM based diagnostics collection (DistroX)\ndetails:\n- adding new CM based diagnostics flow for distrox & stack (stack api will be used for SDX flow)\n= flow has 4 steps (similar as filecollector based), init/collect/upload/cleanup\n- init/upload/cleanup steps are reused from the filecollector flow (initialization: create required configs for filecollector, upload - send data to cloud storage, cleanup - delete files from filecollector location)\n- collect phase: run diagnostics command against CM, wait for it to finish, then copy collected file from /tmp folder (to fit into the filecollector flow, so we can upload the file)\n- disable PHONE_HOME parameter globally for CM, there is no phone home option for the Api command, so that's the easiest way\n- adding roles endpoint in order to know what roles can be filtered", "committedDate": "2020-09-04T18:26:12Z", "type": "forcePushed"}, {"oid": "aa3ebd48efc9ae0755cfd0ca095bf365d1101955", "url": "https://github.com/hortonworks/cloudbreak/commit/aa3ebd48efc9ae0755cfd0ca095bf365d1101955", "message": "CB-8611. Implement CB flow for CM based diagnostics collection (DistroX)\ndetails:\n- adding new CM based diagnostics flow for distrox & stack (stack api will be used for SDX flow)\n= flow has 4 steps (similar as filecollector based), init/collect/upload/cleanup\n- init/upload/cleanup steps are reused from the filecollector flow (initialization: create required configs for filecollector, upload - send data to cloud storage, cleanup - delete files from filecollector location)\n- collect phase: run diagnostics command against CM, wait for it to finish, then copy collected file from /tmp folder (to fit into the filecollector flow, so we can upload the file)\n- disable PHONE_HOME parameter globally for CM, there is no phone home option for the Api command, so that's the easiest way\n- adding roles endpoint in order to know what roles can be filtered", "committedDate": "2020-09-07T08:11:04Z", "type": "forcePushed"}, {"oid": "753353f32edced1debb744c87b5483e6aa8f32c1", "url": "https://github.com/hortonworks/cloudbreak/commit/753353f32edced1debb744c87b5483e6aa8f32c1", "message": "CB-8611. Implement CB flow for CM based diagnostics collection (DistroX)\ndetails:\n- adding new CM based diagnostics flow for distrox & stack (stack api will be used for SDX flow)\n= flow has 4 steps (similar as filecollector based), init/collect/upload/cleanup\n- init/upload/cleanup steps are reused from the filecollector flow (initialization: create required configs for filecollector, upload - send data to cloud storage, cleanup - delete files from filecollector location)\n- collect phase: run diagnostics command against CM, wait for it to finish, then copy collected file from /tmp folder (to fit into the filecollector flow, so we can upload the file)\n- disable PHONE_HOME parameter globally for CM, there is no phone home option for the Api command, so that's the easiest way\n- adding roles endpoint in order to know what roles can be filtered", "committedDate": "2020-09-07T09:18:45Z", "type": "commit"}, {"oid": "753353f32edced1debb744c87b5483e6aa8f32c1", "url": "https://github.com/hortonworks/cloudbreak/commit/753353f32edced1debb744c87b5483e6aa8f32c1", "message": "CB-8611. Implement CB flow for CM based diagnostics collection (DistroX)\ndetails:\n- adding new CM based diagnostics flow for distrox & stack (stack api will be used for SDX flow)\n= flow has 4 steps (similar as filecollector based), init/collect/upload/cleanup\n- init/upload/cleanup steps are reused from the filecollector flow (initialization: create required configs for filecollector, upload - send data to cloud storage, cleanup - delete files from filecollector location)\n- collect phase: run diagnostics command against CM, wait for it to finish, then copy collected file from /tmp folder (to fit into the filecollector flow, so we can upload the file)\n- disable PHONE_HOME parameter globally for CM, there is no phone home option for the Api command, so that's the easiest way\n- adding roles endpoint in order to know what roles can be filtered", "committedDate": "2020-09-07T09:18:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM3OTgzNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8913#discussion_r484379837", "bodyText": "a log would be nice here. \"starting polling blabla...\" or something", "author": "attilapalfi92", "createdAt": "2020-09-07T11:43:24Z", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerDiagnosticsService.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.sequenceiq.cloudbreak.cm;\n+\n+import static com.sequenceiq.cloudbreak.polling.PollingResult.isExited;\n+import static com.sequenceiq.cloudbreak.polling.PollingResult.isTimeout;\n+\n+import java.math.BigDecimal;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.joda.time.DateTime;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Service;\n+\n+import com.cloudera.api.swagger.ClouderaManagerResourceApi;\n+import com.cloudera.api.swagger.client.ApiClient;\n+import com.cloudera.api.swagger.client.ApiException;\n+import com.cloudera.api.swagger.model.ApiCollectDiagnosticDataArguments;\n+import com.cloudera.api.swagger.model.ApiCommand;\n+import com.sequenceiq.cloudbreak.client.HttpClientConfig;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.CancellationException;\n+import com.sequenceiq.cloudbreak.cluster.api.ClusterDiagnosticsService;\n+import com.sequenceiq.cloudbreak.cluster.service.ClusterClientInitException;\n+import com.sequenceiq.cloudbreak.cm.client.ClouderaManagerApiClientProvider;\n+import com.sequenceiq.cloudbreak.cm.client.ClouderaManagerClientInitException;\n+import com.sequenceiq.cloudbreak.cm.client.retry.ClouderaManagerApiFactory;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerPollingServiceProvider;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.domain.stack.cluster.Cluster;\n+import com.sequenceiq.cloudbreak.polling.PollingResult;\n+import com.sequenceiq.cloudbreak.service.CloudbreakException;\n+import com.sequenceiq.common.model.diagnostics.CmDiagnosticsParameters;\n+\n+@Service\n+@Scope(\"prototype\")\n+public class ClouderaManagerDiagnosticsService implements ClusterDiagnosticsService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClouderaManagerDiagnosticsService.class);\n+\n+    @Inject\n+    private ClouderaManagerApiClientProvider clouderaManagerApiClientProvider;\n+\n+    @Inject\n+    private ClouderaManagerApiFactory clouderaManagerApiFactory;\n+\n+    @Inject\n+    private ClouderaManagerPollingServiceProvider clouderaManagerPollingServiceProvider;\n+\n+    private final Stack stack;\n+\n+    private final HttpClientConfig clientConfig;\n+\n+    private ApiClient client;\n+\n+    public ClouderaManagerDiagnosticsService(Stack stack, HttpClientConfig clientConfig) {\n+        this.stack = stack;\n+        this.clientConfig = clientConfig;\n+    }\n+\n+    @PostConstruct\n+    public void initApiClient() throws ClusterClientInitException {\n+        Cluster cluster = stack.getCluster();\n+        String cloudbreakAmbariUser = cluster.getCloudbreakAmbariUser();\n+        String cloudbreakAmbariPassword = cluster.getCloudbreakAmbariPassword();\n+        try {\n+            client = clouderaManagerApiClientProvider\n+                    .getClient(stack.getGatewayPort(), cloudbreakAmbariUser, cloudbreakAmbariPassword, clientConfig);\n+        } catch (ClouderaManagerClientInitException e) {\n+            throw new ClusterClientInitException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void collectDiagnostics(CmDiagnosticsParameters parameters) throws CloudbreakException {\n+        ClouderaManagerResourceApi resourceApi = clouderaManagerApiFactory.getClouderaManagerResourceApi(client);\n+        try {\n+            ApiCommand collectDiagnostics = resourceApi.collectDiagnosticDataCommand(convertToCollectDiagnosticDataArguments(parameters));\n+            PollingResult pollingResult = clouderaManagerPollingServiceProvider.startPollingCollectDiagnostics(stack, client, collectDiagnostics.getId());", "originalCommit": "753353f32edced1debb744c87b5483e6aa8f32c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM4NDQ5MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8913#discussion_r484384490", "bodyText": "actually there is a log in startPollingCollectDiagnostics call itself", "author": "oleewere", "createdAt": "2020-09-07T11:53:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM3OTgzNw=="}], "type": "inlineReview", "revised_code": null}]}