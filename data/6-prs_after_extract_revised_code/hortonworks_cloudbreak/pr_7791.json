{"pr_number": 7791, "pr_title": "CB-6569. Encode (base64) regex input for anonymization rules (log collection)", "pr_createdAt": "2020-04-14T15:44:46Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7791", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NTk4NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7791#discussion_r408685985", "bodyText": "please use stream with filter instead of for and ifs", "author": "horadla23", "createdAt": "2020-04-15T08:55:48Z", "path": "common/src/main/java/com/sequenceiq/cloudbreak/telemetry/fluent/FluentConfigService.java", "diffHunk": "@@ -68,10 +72,28 @@ public FluentConfigView createFluentConfigs(TelemetryClusterDetails clusterDetai\n         return builder\n                 .withEnabled(enabled)\n                 .withClusterDetails(clusterDetails)\n-                .withAnonymizationRules(anonymizationRules)\n+                .withAnonymizationRules(decodeRules(anonymizationRules))\n                 .build();\n     }\n \n+    @VisibleForTesting\n+    List<AnonymizationRule> decodeRules(List<AnonymizationRule> rules) {\n+        List<AnonymizationRule> finalRules = null;\n+        if (CollectionUtils.isNotEmpty(rules)) {\n+            finalRules = new ArrayList<>();\n+            for (AnonymizationRule rule : rules) {", "originalCommit": "a595d749f40d01d4abe47b932024533ad7acbd76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "30c21ec0e5664ea492b181f1e11861d2478f0431", "chunk": "diff --git a/common/src/main/java/com/sequenceiq/cloudbreak/telemetry/fluent/FluentConfigService.java b/common/src/main/java/com/sequenceiq/cloudbreak/telemetry/fluent/FluentConfigService.java\nindex 9570247ed4..ec2e056042 100644\n--- a/common/src/main/java/com/sequenceiq/cloudbreak/telemetry/fluent/FluentConfigService.java\n+++ b/common/src/main/java/com/sequenceiq/cloudbreak/telemetry/fluent/FluentConfigService.java\n\n@@ -78,20 +78,18 @@ public class FluentConfigService {\n \n     @VisibleForTesting\n     List<AnonymizationRule> decodeRules(List<AnonymizationRule> rules) {\n-        List<AnonymizationRule> finalRules = null;\n-        if (CollectionUtils.isNotEmpty(rules)) {\n-            finalRules = new ArrayList<>();\n-            for (AnonymizationRule rule : rules) {\n-                if (StringUtils.isNotBlank(rule.getValue())) {\n+        return Optional.ofNullable(rules)\n+                .orElse(new ArrayList<>())\n+                .stream()\n+                .filter(rule -> StringUtils.isNotBlank(rule.getValue()))\n+                .map(rule -> {\n                     AnonymizationRule newRule = new AnonymizationRule();\n                     newRule.setReplacement(rule.getReplacement());\n                     newRule.setValue(new String(Base64.getDecoder().decode(\n                             rule.getValue().getBytes())));\n-                    finalRules.add(newRule);\n-                }\n-            }\n-        }\n-        return finalRules;\n+                    return newRule;\n+                })\n+                .collect(Collectors.toList());\n     }\n \n     private boolean determineAndSetLogging(FluentConfigView.Builder builder, Telemetry telemetry, boolean databusEnabled,\n"}}, {"oid": "30c21ec0e5664ea492b181f1e11861d2478f0431", "url": "https://github.com/hortonworks/cloudbreak/commit/30c21ec0e5664ea492b181f1e11861d2478f0431", "message": "CB-6569. Encode (base64) regex input for anonymization rules (log collection).", "committedDate": "2020-04-15T09:28:09Z", "type": "commit"}, {"oid": "30c21ec0e5664ea492b181f1e11861d2478f0431", "url": "https://github.com/hortonworks/cloudbreak/commit/30c21ec0e5664ea492b181f1e11861d2478f0431", "message": "CB-6569. Encode (base64) regex input for anonymization rules (log collection).", "committedDate": "2020-04-15T09:28:09Z", "type": "forcePushed"}]}