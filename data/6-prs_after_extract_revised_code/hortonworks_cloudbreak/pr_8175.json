{"pr_number": 8175, "pr_title": "CB-7165 [ASRG] Implement Redbeams CloudResource based termination flow", "pr_createdAt": "2020-05-28T14:48:05Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8175", "timeline": [{"oid": "9972e22b6bb10c0188e32799612e405b740433f2", "url": "https://github.com/hortonworks/cloudbreak/commit/9972e22b6bb10c0188e32799612e405b740433f2", "message": "CB-7165 [ASRG] Implement Redbeams CloudResource based termination flow", "committedDate": "2020-05-29T07:52:51Z", "type": "forcePushed"}, {"oid": "e98948358388af73b6026c66ac87a1b9ab48d4ef", "url": "https://github.com/hortonworks/cloudbreak/commit/e98948358388af73b6026c66ac87a1b9ab48d4ef", "message": "CB-7165 [ASRG] Implement Redbeams CloudResource based termination flow", "committedDate": "2020-05-29T08:11:49Z", "type": "forcePushed"}, {"oid": "e74006a13d229ffb01b521b0b69ec61e91271af4", "url": "https://github.com/hortonworks/cloudbreak/commit/e74006a13d229ffb01b521b0b69ec61e91271af4", "message": "CB-7165 [ASRG] Implement Redbeams CloudResource based termination flow", "committedDate": "2020-05-29T08:59:28Z", "type": "forcePushed"}, {"oid": "2698fb52596a3ea132d7e58e707e37ab60f2b831", "url": "https://github.com/hortonworks/cloudbreak/commit/2698fb52596a3ea132d7e58e707e37ab60f2b831", "message": "CB-7165 [ASRG] Implement Redbeams CloudResource based termination flow", "committedDate": "2020-05-29T12:10:58Z", "type": "forcePushed"}, {"oid": "eb0219aed6b5357bd9576102b56e41e6cca3dec4", "url": "https://github.com/hortonworks/cloudbreak/commit/eb0219aed6b5357bd9576102b56e41e6cca3dec4", "message": "CB-7165 [ASRG] Implement Redbeams CloudResource based termination flow", "committedDate": "2020-05-29T13:44:09Z", "type": "commit"}, {"oid": "eb0219aed6b5357bd9576102b56e41e6cca3dec4", "url": "https://github.com/hortonworks/cloudbreak/commit/eb0219aed6b5357bd9576102b56e41e6cca3dec4", "message": "CB-7165 [ASRG] Implement Redbeams CloudResource based termination flow", "committedDate": "2020-05-29T13:44:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1MTE0MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8175#discussion_r434451141", "bodyText": "e.body() is used 5 times, should be extracted", "author": "pdarvasi", "createdAt": "2020-06-03T09:58:08Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "diffHunk": "@@ -112,52 +116,83 @@\n                 .name(Integer.toString(POSTGRESQL_SERVER_PORT))\n                 .build());\n         databaseResources.add(CloudResource.builder()\n-                .type(ResourceType.AZURE_RESOURCE_GROUP)\n+                .type(AZURE_RESOURCE_GROUP)\n                 .name(resourceGroupName)\n                 .build());\n         return databaseResources;\n     }\n \n-    public List<CloudResourceStatus> terminateDatabaseServer(AuthenticatedContext ac, DatabaseStack stack, boolean force) {\n+    public List<CloudResourceStatus> terminateDatabaseServer(AuthenticatedContext ac, DatabaseStack stack, List<CloudResource> resources, boolean force) {\n         CloudContext cloudContext = ac.getCloudContext();\n         AzureClient client = ac.getParameter(AzureClient.class);\n-        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(cloudContext, stack);\n \n+        return azureResourceGroupMetadataProvider.useSingleResourceGroup(stack)\n+                ? deleteDatabaseServer(resources, force, client)\n+                : deleteResourceGroup(stack, force, cloudContext, client);\n+    }\n+\n+    private List<CloudResourceStatus> deleteResourceGroup(DatabaseStack stack, boolean force, CloudContext cloudContext, AzureClient client) {\n+        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(cloudContext, stack);\n+        LOGGER.debug(\"Deleting resource group {}\", resourceGroupName);\n         try {\n             client.deleteResourceGroup(resourceGroupName);\n         } catch (CloudException e) {\n-            String errorMessage = null;\n-            if (e.body() != null) {\n-                String errorCode = e.body().code();\n-                if (\"ResourceGroupNotFound\".equals(errorCode)) {\n-                    LOGGER.warn(\"Resource group {} does not exist, assuming that it has already been deleted\", resourceGroupName);\n-                    // leave errorMessage null => do not throw exception\n-                } else {\n-                    String details = e.body().details() != null ? e.body().details().stream().map(CloudError::message).collect(Collectors.joining(\", \")) : \"\";\n-                    errorMessage = String.format(\"Resource group %s deletion failed, status code %s, error message: %s, details: %s\",\n-                            resourceGroupName, errorCode, e.body().message(), details);\n-                }\n-            } else {\n-                errorMessage = String.format(\"Resource group %s deletion failed: '%s', please go to Azure Portal for details\",\n-                        resourceGroupName, e.getMessage());\n-            }\n-\n-            if (errorMessage != null) {\n-                if (force) {\n-                    LOGGER.warn(errorMessage);\n-                    LOGGER.warn(\"Resource group {} deletion failed, continuing because termination is forced\", resourceGroupName);\n-                } else {\n-                    throw new CloudConnectorException(errorMessage, e);\n-                }\n-            }\n+            errorHandling(force, e, \"resource group\", resourceGroupName);\n         }\n \n         return Lists.newArrayList(new CloudResourceStatus(CloudResource.builder()\n-                .type(ResourceType.AZURE_RESOURCE_GROUP)\n+                .type(AZURE_RESOURCE_GROUP)\n                 .name(resourceGroupName)\n                 .build(), ResourceStatus.DELETED));\n     }\n \n+    private List<CloudResourceStatus> deleteDatabaseServer(List<CloudResource> resources, boolean force, AzureClient client) {\n+        LOGGER.debug(\"Deleting database server\");\n+        Optional<CloudResource> dbServerResourceOptional = resources.stream().filter(r -> AZURE_DATABASE.equals(r.getType())).findFirst();\n+        if (dbServerResourceOptional.isEmpty()) {\n+            LOGGER.warn(\"Azure database id not found in database, deleting nothing\");\n+            return List.of();\n+        }\n+        String databaseServerId = dbServerResourceOptional.get().getReference();\n+        try {\n+            azureUtils.deleteDatabaseServer(client, databaseServerId);\n+        } catch (CloudException e) {\n+            errorHandling(force, e, \"Database server\", databaseServerId);\n+        }\n+\n+        return Lists.newArrayList(new CloudResourceStatus(CloudResource.builder()\n+                .type(AZURE_DATABASE)\n+                .name(databaseServerId)\n+                .build(), ResourceStatus.DELETED));\n+    }\n+\n+    private void errorHandling(boolean force, CloudException e, String resourceType, String resourceId) {\n+        String errorMessage = null;\n+        if (e.body() != null) {", "originalCommit": "eb0219aed6b5357bd9576102b56e41e6cca3dec4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1MTQ3Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/8175#discussion_r434451476", "bodyText": "I would prefer handleErrors() - verb first", "author": "pdarvasi", "createdAt": "2020-06-03T09:58:40Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "diffHunk": "@@ -112,52 +116,83 @@\n                 .name(Integer.toString(POSTGRESQL_SERVER_PORT))\n                 .build());\n         databaseResources.add(CloudResource.builder()\n-                .type(ResourceType.AZURE_RESOURCE_GROUP)\n+                .type(AZURE_RESOURCE_GROUP)\n                 .name(resourceGroupName)\n                 .build());\n         return databaseResources;\n     }\n \n-    public List<CloudResourceStatus> terminateDatabaseServer(AuthenticatedContext ac, DatabaseStack stack, boolean force) {\n+    public List<CloudResourceStatus> terminateDatabaseServer(AuthenticatedContext ac, DatabaseStack stack, List<CloudResource> resources, boolean force) {\n         CloudContext cloudContext = ac.getCloudContext();\n         AzureClient client = ac.getParameter(AzureClient.class);\n-        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(cloudContext, stack);\n \n+        return azureResourceGroupMetadataProvider.useSingleResourceGroup(stack)\n+                ? deleteDatabaseServer(resources, force, client)\n+                : deleteResourceGroup(stack, force, cloudContext, client);\n+    }\n+\n+    private List<CloudResourceStatus> deleteResourceGroup(DatabaseStack stack, boolean force, CloudContext cloudContext, AzureClient client) {\n+        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(cloudContext, stack);\n+        LOGGER.debug(\"Deleting resource group {}\", resourceGroupName);\n         try {\n             client.deleteResourceGroup(resourceGroupName);\n         } catch (CloudException e) {\n-            String errorMessage = null;\n-            if (e.body() != null) {\n-                String errorCode = e.body().code();\n-                if (\"ResourceGroupNotFound\".equals(errorCode)) {\n-                    LOGGER.warn(\"Resource group {} does not exist, assuming that it has already been deleted\", resourceGroupName);\n-                    // leave errorMessage null => do not throw exception\n-                } else {\n-                    String details = e.body().details() != null ? e.body().details().stream().map(CloudError::message).collect(Collectors.joining(\", \")) : \"\";\n-                    errorMessage = String.format(\"Resource group %s deletion failed, status code %s, error message: %s, details: %s\",\n-                            resourceGroupName, errorCode, e.body().message(), details);\n-                }\n-            } else {\n-                errorMessage = String.format(\"Resource group %s deletion failed: '%s', please go to Azure Portal for details\",\n-                        resourceGroupName, e.getMessage());\n-            }\n-\n-            if (errorMessage != null) {\n-                if (force) {\n-                    LOGGER.warn(errorMessage);\n-                    LOGGER.warn(\"Resource group {} deletion failed, continuing because termination is forced\", resourceGroupName);\n-                } else {\n-                    throw new CloudConnectorException(errorMessage, e);\n-                }\n-            }\n+            errorHandling(force, e, \"resource group\", resourceGroupName);\n         }\n \n         return Lists.newArrayList(new CloudResourceStatus(CloudResource.builder()\n-                .type(ResourceType.AZURE_RESOURCE_GROUP)\n+                .type(AZURE_RESOURCE_GROUP)\n                 .name(resourceGroupName)\n                 .build(), ResourceStatus.DELETED));\n     }\n \n+    private List<CloudResourceStatus> deleteDatabaseServer(List<CloudResource> resources, boolean force, AzureClient client) {\n+        LOGGER.debug(\"Deleting database server\");\n+        Optional<CloudResource> dbServerResourceOptional = resources.stream().filter(r -> AZURE_DATABASE.equals(r.getType())).findFirst();\n+        if (dbServerResourceOptional.isEmpty()) {\n+            LOGGER.warn(\"Azure database id not found in database, deleting nothing\");\n+            return List.of();\n+        }\n+        String databaseServerId = dbServerResourceOptional.get().getReference();\n+        try {\n+            azureUtils.deleteDatabaseServer(client, databaseServerId);\n+        } catch (CloudException e) {\n+            errorHandling(force, e, \"Database server\", databaseServerId);\n+        }\n+\n+        return Lists.newArrayList(new CloudResourceStatus(CloudResource.builder()\n+                .type(AZURE_DATABASE)\n+                .name(databaseServerId)\n+                .build(), ResourceStatus.DELETED));\n+    }\n+\n+    private void errorHandling(boolean force, CloudException e, String resourceType, String resourceId) {", "originalCommit": "eb0219aed6b5357bd9576102b56e41e6cca3dec4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1MTcyOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8175#discussion_r434451729", "bodyText": "We should log the error in this case, too", "author": "pdarvasi", "createdAt": "2020-06-03T09:59:11Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "diffHunk": "@@ -112,52 +116,83 @@\n                 .name(Integer.toString(POSTGRESQL_SERVER_PORT))\n                 .build());\n         databaseResources.add(CloudResource.builder()\n-                .type(ResourceType.AZURE_RESOURCE_GROUP)\n+                .type(AZURE_RESOURCE_GROUP)\n                 .name(resourceGroupName)\n                 .build());\n         return databaseResources;\n     }\n \n-    public List<CloudResourceStatus> terminateDatabaseServer(AuthenticatedContext ac, DatabaseStack stack, boolean force) {\n+    public List<CloudResourceStatus> terminateDatabaseServer(AuthenticatedContext ac, DatabaseStack stack, List<CloudResource> resources, boolean force) {\n         CloudContext cloudContext = ac.getCloudContext();\n         AzureClient client = ac.getParameter(AzureClient.class);\n-        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(cloudContext, stack);\n \n+        return azureResourceGroupMetadataProvider.useSingleResourceGroup(stack)\n+                ? deleteDatabaseServer(resources, force, client)\n+                : deleteResourceGroup(stack, force, cloudContext, client);\n+    }\n+\n+    private List<CloudResourceStatus> deleteResourceGroup(DatabaseStack stack, boolean force, CloudContext cloudContext, AzureClient client) {\n+        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(cloudContext, stack);\n+        LOGGER.debug(\"Deleting resource group {}\", resourceGroupName);\n         try {\n             client.deleteResourceGroup(resourceGroupName);\n         } catch (CloudException e) {\n-            String errorMessage = null;\n-            if (e.body() != null) {\n-                String errorCode = e.body().code();\n-                if (\"ResourceGroupNotFound\".equals(errorCode)) {\n-                    LOGGER.warn(\"Resource group {} does not exist, assuming that it has already been deleted\", resourceGroupName);\n-                    // leave errorMessage null => do not throw exception\n-                } else {\n-                    String details = e.body().details() != null ? e.body().details().stream().map(CloudError::message).collect(Collectors.joining(\", \")) : \"\";\n-                    errorMessage = String.format(\"Resource group %s deletion failed, status code %s, error message: %s, details: %s\",\n-                            resourceGroupName, errorCode, e.body().message(), details);\n-                }\n-            } else {\n-                errorMessage = String.format(\"Resource group %s deletion failed: '%s', please go to Azure Portal for details\",\n-                        resourceGroupName, e.getMessage());\n-            }\n-\n-            if (errorMessage != null) {\n-                if (force) {\n-                    LOGGER.warn(errorMessage);\n-                    LOGGER.warn(\"Resource group {} deletion failed, continuing because termination is forced\", resourceGroupName);\n-                } else {\n-                    throw new CloudConnectorException(errorMessage, e);\n-                }\n-            }\n+            errorHandling(force, e, \"resource group\", resourceGroupName);\n         }\n \n         return Lists.newArrayList(new CloudResourceStatus(CloudResource.builder()\n-                .type(ResourceType.AZURE_RESOURCE_GROUP)\n+                .type(AZURE_RESOURCE_GROUP)\n                 .name(resourceGroupName)\n                 .build(), ResourceStatus.DELETED));\n     }\n \n+    private List<CloudResourceStatus> deleteDatabaseServer(List<CloudResource> resources, boolean force, AzureClient client) {\n+        LOGGER.debug(\"Deleting database server\");\n+        Optional<CloudResource> dbServerResourceOptional = resources.stream().filter(r -> AZURE_DATABASE.equals(r.getType())).findFirst();\n+        if (dbServerResourceOptional.isEmpty()) {\n+            LOGGER.warn(\"Azure database id not found in database, deleting nothing\");\n+            return List.of();\n+        }\n+        String databaseServerId = dbServerResourceOptional.get().getReference();\n+        try {\n+            azureUtils.deleteDatabaseServer(client, databaseServerId);\n+        } catch (CloudException e) {\n+            errorHandling(force, e, \"Database server\", databaseServerId);\n+        }\n+\n+        return Lists.newArrayList(new CloudResourceStatus(CloudResource.builder()\n+                .type(AZURE_DATABASE)\n+                .name(databaseServerId)\n+                .build(), ResourceStatus.DELETED));\n+    }\n+\n+    private void errorHandling(boolean force, CloudException e, String resourceType, String resourceId) {\n+        String errorMessage = null;\n+        if (e.body() != null) {\n+            String errorCode = e.body().code();\n+            if (\"ResourceGroupNotFound\".equals(errorCode)) {\n+                LOGGER.warn(\"{} {} does not exist, assuming that it has already been deleted\", resourceType, resourceId);\n+                // leave errorMessage null => do not throw exception\n+            } else {\n+                String details = e.body().details() != null ? e.body().details().stream().map(CloudError::message).collect(Collectors.joining(\", \")) : \"\";\n+                errorMessage = String.format(\"%s %s deletion failed, status code %s, error message: %s, details: %s\",\n+                        resourceType, resourceId, errorCode, e.body().message(), details);\n+            }\n+        } else {\n+            errorMessage = String.format(\"%s %s deletion failed: '%s', please go to Azure Portal for details\",\n+                    resourceType, resourceId, e.getMessage());\n+        }\n+\n+        if (errorMessage != null) {\n+            if (force) {\n+                LOGGER.warn(errorMessage);\n+                LOGGER.warn(\"{} {} deletion failed, continuing because termination is forced\", resourceType, resourceId);\n+            } else {\n+                throw new CloudConnectorException(errorMessage, e);", "originalCommit": "eb0219aed6b5357bd9576102b56e41e6cca3dec4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1MzMxMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8175#discussion_r434453313", "bodyText": "We should consider deleting the actual resource as it won't be reused in future.", "author": "pdarvasi", "createdAt": "2020-06-03T10:02:00Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "diffHunk": "@@ -112,52 +116,83 @@\n                 .name(Integer.toString(POSTGRESQL_SERVER_PORT))\n                 .build());\n         databaseResources.add(CloudResource.builder()\n-                .type(ResourceType.AZURE_RESOURCE_GROUP)\n+                .type(AZURE_RESOURCE_GROUP)\n                 .name(resourceGroupName)\n                 .build());\n         return databaseResources;\n     }\n \n-    public List<CloudResourceStatus> terminateDatabaseServer(AuthenticatedContext ac, DatabaseStack stack, boolean force) {\n+    public List<CloudResourceStatus> terminateDatabaseServer(AuthenticatedContext ac, DatabaseStack stack, List<CloudResource> resources, boolean force) {\n         CloudContext cloudContext = ac.getCloudContext();\n         AzureClient client = ac.getParameter(AzureClient.class);\n-        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(cloudContext, stack);\n \n+        return azureResourceGroupMetadataProvider.useSingleResourceGroup(stack)\n+                ? deleteDatabaseServer(resources, force, client)\n+                : deleteResourceGroup(stack, force, cloudContext, client);\n+    }\n+\n+    private List<CloudResourceStatus> deleteResourceGroup(DatabaseStack stack, boolean force, CloudContext cloudContext, AzureClient client) {\n+        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(cloudContext, stack);\n+        LOGGER.debug(\"Deleting resource group {}\", resourceGroupName);\n         try {\n             client.deleteResourceGroup(resourceGroupName);\n         } catch (CloudException e) {\n-            String errorMessage = null;\n-            if (e.body() != null) {\n-                String errorCode = e.body().code();\n-                if (\"ResourceGroupNotFound\".equals(errorCode)) {\n-                    LOGGER.warn(\"Resource group {} does not exist, assuming that it has already been deleted\", resourceGroupName);\n-                    // leave errorMessage null => do not throw exception\n-                } else {\n-                    String details = e.body().details() != null ? e.body().details().stream().map(CloudError::message).collect(Collectors.joining(\", \")) : \"\";\n-                    errorMessage = String.format(\"Resource group %s deletion failed, status code %s, error message: %s, details: %s\",\n-                            resourceGroupName, errorCode, e.body().message(), details);\n-                }\n-            } else {\n-                errorMessage = String.format(\"Resource group %s deletion failed: '%s', please go to Azure Portal for details\",\n-                        resourceGroupName, e.getMessage());\n-            }\n-\n-            if (errorMessage != null) {\n-                if (force) {\n-                    LOGGER.warn(errorMessage);\n-                    LOGGER.warn(\"Resource group {} deletion failed, continuing because termination is forced\", resourceGroupName);\n-                } else {\n-                    throw new CloudConnectorException(errorMessage, e);\n-                }\n-            }\n+            errorHandling(force, e, \"resource group\", resourceGroupName);\n         }\n \n         return Lists.newArrayList(new CloudResourceStatus(CloudResource.builder()\n-                .type(ResourceType.AZURE_RESOURCE_GROUP)\n+                .type(AZURE_RESOURCE_GROUP)\n                 .name(resourceGroupName)\n                 .build(), ResourceStatus.DELETED));\n     }\n \n+    private List<CloudResourceStatus> deleteDatabaseServer(List<CloudResource> resources, boolean force, AzureClient client) {\n+        LOGGER.debug(\"Deleting database server\");\n+        Optional<CloudResource> dbServerResourceOptional = resources.stream().filter(r -> AZURE_DATABASE.equals(r.getType())).findFirst();\n+        if (dbServerResourceOptional.isEmpty()) {\n+            LOGGER.warn(\"Azure database id not found in database, deleting nothing\");\n+            return List.of();\n+        }\n+        String databaseServerId = dbServerResourceOptional.get().getReference();\n+        try {\n+            azureUtils.deleteDatabaseServer(client, databaseServerId);\n+        } catch (CloudException e) {\n+            errorHandling(force, e, \"Database server\", databaseServerId);\n+        }\n+\n+        return Lists.newArrayList(new CloudResourceStatus(CloudResource.builder()", "originalCommit": "eb0219aed6b5357bd9576102b56e41e6cca3dec4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}