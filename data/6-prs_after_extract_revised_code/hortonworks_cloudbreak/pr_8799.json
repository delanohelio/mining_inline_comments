{"pr_number": 8799, "pr_title": "CB-7975 - [ASRG] Save and manage managed images and storage accounts \u2026", "pr_createdAt": "2020-08-12T21:32:58Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8799", "timeline": [{"oid": "d87bc2d37805a7aaeb8a11d3d292aa86415570c4", "url": "https://github.com/hortonworks/cloudbreak/commit/d87bc2d37805a7aaeb8a11d3d292aa86415570c4", "message": "CB-7975 - [ASRG] Save and manage managed images and storage accounts if CB created RG", "committedDate": "2020-08-13T06:35:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg2MTk4OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8799#discussion_r469861988", "bodyText": "I would rename methods that return a CustomImage object to getCustomImage", "author": "gergopapi2", "createdAt": "2020-08-13T10:43:50Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorage.java", "diffHunk": "@@ -75,11 +76,11 @@ public ArmAttachedStorageOption getArmAttachedStorageOption(Map<String, String>\n         return ArmAttachedStorageOption.valueOf(attachedStorageOption);\n     }\n \n-    public String getCustomImageId(AzureClient client, AuthenticatedContext ac, CloudStack stack) {\n+    public AzureImage getCustomImageId(AzureClient client, AuthenticatedContext ac, CloudStack stack) {", "originalCommit": "d87bc2d37805a7aaeb8a11d3d292aa86415570c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dea73e51b6aca41bcf22b563a99b685bf1d596dd", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorage.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorage.java\nindex 83480ec74a..f0d3123ddf 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorage.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorage.java\n\n@@ -76,20 +76,20 @@ public class AzureStorage {\n         return ArmAttachedStorageOption.valueOf(attachedStorageOption);\n     }\n \n-    public AzureImage getCustomImageId(AzureClient client, AuthenticatedContext ac, CloudStack stack) {\n-        return getCustomImageId(client, ac, stack, stack.getImage().getImageName());\n+    public AzureImage getCustomImage(AzureClient client, AuthenticatedContext ac, CloudStack stack) {\n+        return getCustomImage(client, ac, stack, stack.getImage().getImageName());\n     }\n \n-    public AzureImage getCustomImageId(AzureClient client, AuthenticatedContext ac, CloudStack stack, String imageName) {\n+    public AzureImage getCustomImage(AzureClient client, AuthenticatedContext ac, CloudStack stack, String imageName) {\n         String imageResourceGroupName = azureResourceGroupMetadataProvider.getImageResourceGroupName(ac.getCloudContext(), stack);\n         AzureCredentialView acv = new AzureCredentialView(ac.getCloudCredential());\n         String imageStorageName = getImageStorageName(acv, ac.getCloudContext(), stack);\n         String imageBlobUri = client.getImageBlobUri(imageResourceGroupName, imageStorageName, IMAGES_CONTAINER, imageName);\n         String region = ac.getCloudContext().getLocation().getRegion().value();\n-        return getCustomImageId(imageBlobUri, imageResourceGroupName, region, client);\n+        return getCustomImage(imageBlobUri, imageResourceGroupName, region, client);\n     }\n \n-    private AzureImage getCustomImageId(String vhd, String imageResourceGroupName, String region, AzureClient client) {\n+    private AzureImage getCustomImage(String vhd, String imageResourceGroupName, String region, AzureClient client) {\n         AzureImage image = client.getCustomImageId(imageResourceGroupName, vhd, region);\n         String customImageId = image.getId();\n         LOGGER.debug(\"Custom image id: {}\", customImageId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyMzcwOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8799#discussion_r469923708", "bodyText": "I would put this into a finally clause. Since the storage account has more than 1 resource it could happen that the storage account is created but for some reason the blobService not, and an exception is thrown.", "author": "gergopapi2", "createdAt": "2020-08-13T12:45:38Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountService.java", "diffHunk": "@@ -40,13 +45,22 @@\n     @Inject\n     private AzureStorage armStorage;\n \n+    @Inject\n+    private AzureCloudResourceService azureCloudResourceService;\n+\n+    @Inject\n+    private ResourceNotifier resourceNotifier;\n+\n     public void createStorageAccount(AuthenticatedContext ac, AzureClient client, String resourceGroup, String storageName, String region, CloudStack stack) {\n         StorageAccount storageAccount = client.getStorageAccountByGroup(resourceGroup, storageName);\n         if (storageAccount == null) {\n             try {\n                 LOGGER.info(\"Creating storage account: {}\", storageName);\n-                armStorage.createStorage(client, storageName, LOCALLY_REDUNDANT, resourceGroup, region, isEncryptionNeeded(stack), stack.getTags());\n+                StorageAccount storage = armStorage.createStorage(client, storageName, LOCALLY_REDUNDANT, resourceGroup, region, isEncryptionNeeded(stack),\n+                        stack.getTags());\n                 pollStorageAccountCreation(ac, new StorageAccountCheckerContext(client, resourceGroup, storageName));\n+                CloudResource cloudResource = azureCloudResourceService.buildCloudResource(storage.name(), storage.id(), ResourceType.AZURE_STORAGE);\n+                azureCloudResourceService.saveCloudResources(resourceNotifier, ac.getCloudContext(), List.of(cloudResource));", "originalCommit": "d87bc2d37805a7aaeb8a11d3d292aa86415570c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3MzcwMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8799#discussion_r470473700", "bodyText": "You are right, but we do not know the storage acc id in the \"finally\" clause, we could go and fetch the deployment from Azure there but it is cumbersome as we don't have the deployment's id.\nin such cases, the whole deployment will fail, the user will be notified about the failing storage account and at most a storage account will not be deleted, which is free. As this is a temp solution, I would not make a major effort to fix this.", "author": "pdarvasi", "createdAt": "2020-08-14T08:05:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyMzcwOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyNjI2MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8799#discussion_r469926261", "bodyText": "I am not convinced this is the right place. What if a datahub is being terminated, will it delete the images and the storage account? What about concurrent termination of cluster A and provisioning of cluster B? I might be missing something, sorry for that.", "author": "gergopapi2", "createdAt": "2020-08-13T12:49:55Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureTerminationHelperService.java", "diffHunk": "@@ -95,18 +95,31 @@\n         deleteVolumeSets(ac, stack, resourcesToRemove, networkResources, resourceGroupName);\n \n         if (deleteWholeDeployment) {\n+            // deleting availability sets\n             List<String> availabiltySetNames = getResourceNamesByResourceType(resourcesToRemove, ResourceType.AZURE_AVAILABILITY_SET);\n             azureUtils.deleteAvailabilitySets(client, resourceGroupName, availabiltySetNames);\n             deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_AVAILABILITY_SET);\n \n+            // deleting networks\n             List<String> networkIds = getResourceIdsByResourceType(resourcesToRemove, ResourceType.AZURE_NETWORK);\n             azureUtils.deleteNetworks(client, networkIds);\n             deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_NETWORK);\n             deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_SUBNET);\n \n+            // deleting security groups\n             List<String> securityGroupIds = getResourceIdsByResourceType(resourcesToRemove, ResourceType.AZURE_SECURITY_GROUP);\n             azureUtils.deleteSecurityGroups(client, securityGroupIds);\n             deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_SECURITY_GROUP);\n+\n+            // deleting images\n+            List<String> imageIds = getResourceIdsByResourceType(resourcesToRemove, ResourceType.AZURE_MANAGED_IMAGE);\n+            azureUtils.deleteImages(client, imageIds);\n+            deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_MANAGED_IMAGE);\n+\n+            // deleting storage account\n+            List<String> accountIds = getResourceIdsByResourceType(resourcesToRemove, ResourceType.AZURE_STORAGE);\n+            azureUtils.deleteStorageAccounts(client, accountIds);\n+            deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_STORAGE);", "originalCommit": "d87bc2d37805a7aaeb8a11d3d292aa86415570c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2NzE2Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8799#discussion_r469967162", "bodyText": "We had a conversation with @pdarvasi. This would cause a performance hit in case a customer is creating a large number of short-lived datahubs: the image would be copied frequently, causing 10-20 minutes of extra datahub provisioning time. If this potential performance hit is not a problem then this PR can be merged.", "author": "gergopapi2", "createdAt": "2020-08-13T13:52:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyNjI2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0MTg0NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8799#discussion_r470441844", "bodyText": "As clarified, it will not cause any perf hit.", "author": "gergopapi2", "createdAt": "2020-08-14T06:50:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyNjI2MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "dea73e51b6aca41bcf22b563a99b685bf1d596dd", "url": "https://github.com/hortonworks/cloudbreak/commit/dea73e51b6aca41bcf22b563a99b685bf1d596dd", "message": "CB-7975 - [ASRG] Save and manage managed images and storage accounts if CB created RG", "committedDate": "2020-08-14T07:07:50Z", "type": "commit"}, {"oid": "dea73e51b6aca41bcf22b563a99b685bf1d596dd", "url": "https://github.com/hortonworks/cloudbreak/commit/dea73e51b6aca41bcf22b563a99b685bf1d596dd", "message": "CB-7975 - [ASRG] Save and manage managed images and storage accounts if CB created RG", "committedDate": "2020-08-14T07:07:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyMDQxMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8799#discussion_r470520410", "bodyText": "This is create, not delete - can go to follow-up.", "author": "gergopapi2", "createdAt": "2020-08-14T09:38:10Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorage.java", "diffHunk": "@@ -108,14 +110,15 @@ public String getAttachedDiskStorageName(ArmAttachedStorageOption armAttachedSto\n         return buildStorageName(armAttachedStorageOption, acv, vmId, cloudContext, storageType);\n     }\n \n-    public void createStorage(AzureClient client, String osStorageName, AzureDiskType storageType, String storageGroup, String region, Boolean encrypted,\n-            Map<String, String> tags)\n+    public StorageAccount createStorage(AzureClient client, String osStorageName, AzureDiskType storageType, String storageGroup,\n+            String region, Boolean encrypted, Map<String, String> tags)\n             throws CloudException {\n         if (!storageAccountExist(client, osStorageName)) {\n             StorageAccountParameters storageAccountParameters = new StorageAccountParameters(\n                     storageGroup, osStorageName, region, skuTypeResolver.resolveFromAzureDiskType(storageType), encrypted, tags);\n-            azureStorageAccountBuilderService.buildStorageAccount(client, storageAccountParameters);\n+            return azureStorageAccountBuilderService.buildStorageAccount(client, storageAccountParameters);\n         }\n+        throw new CloudbreakServiceException(String.format(\"Trying to delete non-existing storage account %s\", osStorageName));", "originalCommit": "dea73e51b6aca41bcf22b563a99b685bf1d596dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyMTIyOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8799#discussion_r470521229", "bodyText": "I would put sections labelled with comments into separate methods with descriptive names. Can go into follow-up.", "author": "gergopapi2", "createdAt": "2020-08-14T09:39:54Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureTerminationHelperService.java", "diffHunk": "@@ -95,18 +95,31 @@\n         deleteVolumeSets(ac, stack, resourcesToRemove, networkResources, resourceGroupName);\n \n         if (deleteWholeDeployment) {\n+            // deleting availability sets\n             List<String> availabiltySetNames = getResourceNamesByResourceType(resourcesToRemove, ResourceType.AZURE_AVAILABILITY_SET);\n             azureUtils.deleteAvailabilitySets(client, resourceGroupName, availabiltySetNames);\n             deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_AVAILABILITY_SET);\n \n+            // deleting networks\n             List<String> networkIds = getResourceIdsByResourceType(resourcesToRemove, ResourceType.AZURE_NETWORK);\n             azureUtils.deleteNetworks(client, networkIds);\n             deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_NETWORK);\n             deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_SUBNET);\n \n+            // deleting security groups\n             List<String> securityGroupIds = getResourceIdsByResourceType(resourcesToRemove, ResourceType.AZURE_SECURITY_GROUP);\n             azureUtils.deleteSecurityGroups(client, securityGroupIds);\n             deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_SECURITY_GROUP);\n+", "originalCommit": "dea73e51b6aca41bcf22b563a99b685bf1d596dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}