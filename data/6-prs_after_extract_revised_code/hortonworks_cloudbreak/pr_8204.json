{"pr_number": 8204, "pr_title": "CB-7267 [ASRG] Implement resource group termination step", "pr_createdAt": "2020-06-04T10:36:45Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8204", "timeline": [{"oid": "5b4192248397276777ad38831961ce7917c18097", "url": "https://github.com/hortonworks/cloudbreak/commit/5b4192248397276777ad38831961ce7917c18097", "message": "CB-7267 [ASRG] Implement resource group termination step", "committedDate": "2020-06-04T11:41:20Z", "type": "forcePushed"}, {"oid": "ab2fab3841d1e6c30fbe609e468898937e975c6d", "url": "https://github.com/hortonworks/cloudbreak/commit/ab2fab3841d1e6c30fbe609e468898937e975c6d", "message": "CB-7267 [ASRG] Implement resource group termination step", "committedDate": "2020-06-04T14:01:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxMjc1Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r435512753", "bodyText": "Is this line always safe for NPE?", "author": "pdarvasi", "createdAt": "2020-06-04T19:54:39Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureSetup.java", "diffHunk": "@@ -168,6 +173,23 @@ public void createEnvironmentPrerequisites(EnvironmentPrerequisitesCreateRequest\n                 environmentPrerequisitesCreateRequest.getAzure().getTags());\n     }\n \n+    @Override\n+    public void deleteEnvironmentPrerequisites(EnvironmentPrerequisiteDeleteRequest environmentPrerequisiteDeleteRequest) {\n+        AzureClient azureClient = azureClientService.getClient(environmentPrerequisiteDeleteRequest.getCloudCredential());\n+        String resourceGroupName = environmentPrerequisiteDeleteRequest.getAzurePrerequisiteDeleteRequest().getResourceGroupName();", "originalCommit": "ab2fab3841d1e6c30fbe609e468898937e975c6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5NTMzMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r435895332", "bodyText": "Thanks for spotting this!", "author": "gergopapi2", "createdAt": "2020-06-05T12:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxMjc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6b772be045b9b23690e9ae43b524c8337e27207b", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureSetup.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureSetup.java\nindex 13438f06d9..1466cf5a3a 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureSetup.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureSetup.java\n\n@@ -176,7 +177,15 @@ public class AzureSetup implements Setup {\n     @Override\n     public void deleteEnvironmentPrerequisites(EnvironmentPrerequisiteDeleteRequest environmentPrerequisiteDeleteRequest) {\n         AzureClient azureClient = azureClientService.getClient(environmentPrerequisiteDeleteRequest.getCloudCredential());\n-        String resourceGroupName = environmentPrerequisiteDeleteRequest.getAzurePrerequisiteDeleteRequest().getResourceGroupName();\n+        environmentPrerequisiteDeleteRequest.getAzurePrerequisiteDeleteRequest()\n+                .map(AzurePrerequisiteDeleteRequest::getResourceGroupName)\n+                .ifPresentOrElse(\n+                        resourceGroupName -> deleteResourceGroup(azureClient, resourceGroupName),\n+                        () -> LOGGER.debug(\"No azure resource group was defined, not deleting resource group.\")\n+                );\n+    }\n+\n+    private void deleteResourceGroup(AzureClient azureClient, String resourceGroupName) {\n         try {\n             if (!azureClient.isResourceGroupEmpty(resourceGroupName)) {\n                 String message = String.format(\"Resource group %s is not empty, cannot proceed with deleting the environment. \" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxMzM5MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r435513390", "bodyText": "IMHO, we should not fail hard in such cases, we might warn and continue without deleting the RG. Its presence does not cost any money anyways.", "author": "pdarvasi", "createdAt": "2020-06-04T19:55:56Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureSetup.java", "diffHunk": "@@ -168,6 +173,23 @@ public void createEnvironmentPrerequisites(EnvironmentPrerequisitesCreateRequest\n                 environmentPrerequisitesCreateRequest.getAzure().getTags());\n     }\n \n+    @Override\n+    public void deleteEnvironmentPrerequisites(EnvironmentPrerequisiteDeleteRequest environmentPrerequisiteDeleteRequest) {\n+        AzureClient azureClient = azureClientService.getClient(environmentPrerequisiteDeleteRequest.getCloudCredential());\n+        String resourceGroupName = environmentPrerequisiteDeleteRequest.getAzurePrerequisiteDeleteRequest().getResourceGroupName();\n+        try {\n+            if (!azureClient.isResourceGroupEmpty(resourceGroupName)) {\n+                String message = String.format(\"Resource group %s is not empty, cannot proceed with deleting the environment. \" +\n+                        \"Please check contents on azure portal.\", resourceGroupName);\n+                LOGGER.warn(message);\n+                throw new CloudConnectorException(message);", "originalCommit": "ab2fab3841d1e6c30fbe609e468898937e975c6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczMzAyMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r435733020", "bodyText": "Warn, you mean LOGGER.warn?\nPersonally I would hate if a 3rd party software that leaks resources or does not clean up properly after itself. At a bare minimum we should let the user at least know we could not delete it, however, with the env gone I do not know how to alert him that some resources remained.\nOn the other hand I well do see your point to create an experience as smooth as possible. Would it be ok for you to have a discussion at our standup on this? I will then change code accordingly.", "author": "gergopapi2", "createdAt": "2020-06-05T07:17:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxMzM5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMyNTA2NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r437325065", "bodyText": "Decided non-empty RG delete to fail", "author": "pdarvasi", "createdAt": "2020-06-09T11:04:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxMzM5MA=="}], "type": "inlineReview", "revised_code": {"commit": "6b772be045b9b23690e9ae43b524c8337e27207b", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureSetup.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureSetup.java\nindex 13438f06d9..1466cf5a3a 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureSetup.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureSetup.java\n\n@@ -176,7 +177,15 @@ public class AzureSetup implements Setup {\n     @Override\n     public void deleteEnvironmentPrerequisites(EnvironmentPrerequisiteDeleteRequest environmentPrerequisiteDeleteRequest) {\n         AzureClient azureClient = azureClientService.getClient(environmentPrerequisiteDeleteRequest.getCloudCredential());\n-        String resourceGroupName = environmentPrerequisiteDeleteRequest.getAzurePrerequisiteDeleteRequest().getResourceGroupName();\n+        environmentPrerequisiteDeleteRequest.getAzurePrerequisiteDeleteRequest()\n+                .map(AzurePrerequisiteDeleteRequest::getResourceGroupName)\n+                .ifPresentOrElse(\n+                        resourceGroupName -> deleteResourceGroup(azureClient, resourceGroupName),\n+                        () -> LOGGER.debug(\"No azure resource group was defined, not deleting resource group.\")\n+                );\n+    }\n+\n+    private void deleteResourceGroup(AzureClient azureClient, String resourceGroupName) {\n         try {\n             if (!azureClient.isResourceGroupEmpty(resourceGroupName)) {\n                 String message = String.format(\"Resource group %s is not empty, cannot proceed with deleting the environment. \" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxNjM0Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r435516342", "bodyText": "I liked the version with logging more in deleteDatabaseServer, could you pls add logging?", "author": "pdarvasi", "createdAt": "2020-06-04T20:01:40Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java", "diffHunk": "@@ -348,19 +352,54 @@ public void deleteManagedDisks(AzureClient azureClient, Collection<String> manag\n     }\n \n     @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n-    public void deleteDatabaseServer(AzureClient azureClient, String databaseServerId) {\n-        LOGGER.info(\"Delete database server: {}\", databaseServerId);\n-        List<String> failedToDeleteDatabaseServer = new ArrayList<>();\n-        Completable databaseServerDeleteCompletable = azureClient.deleteDatabaseServer(databaseServerId)\n-                .doOnError(throwable -> {\n-                    LOGGER.error(\"Error happend on azure database server delete: {}\", databaseServerId, throwable);\n-                    failedToDeleteDatabaseServer.add(databaseServerId);\n-                })\n-                .subscribeOn(Schedulers.io());\n-        databaseServerDeleteCompletable.await();\n-        if (!failedToDeleteDatabaseServer.isEmpty()) {\n-            LOGGER.error(\"Can't delete database server: {}\", failedToDeleteDatabaseServer);\n-            throw new CloudbreakServiceException(\"Can't delete database server: \" + failedToDeleteDatabaseServer);\n+    public Optional<String> deleteDatabaseServer(AzureClient azureClient, String databaseServerId, boolean cancelException) {\n+        return handleDeleteErrors(resourceId -> {\n+            LOGGER.info(\"Delete database server: {}\", resourceId);\n+            azureClient.deleteDatabaseServer(resourceId);\n+        }, \"DatabaseServer\", databaseServerId, true);\n+    }\n+\n+    @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n+    public Optional<String> deleteResourceGroup(AzureClient azureClient, String resourceGroupId, boolean cancelException) {\n+        return handleDeleteErrors(azureClient::deleteResourceGroup, \"ResourceGroup\", resourceGroupId, cancelException);", "originalCommit": "ab2fab3841d1e6c30fbe609e468898937e975c6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b772be045b9b23690e9ae43b524c8337e27207b", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java\nindex d2ba29ecbc..52663e1f3d 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java\n\n@@ -353,10 +353,7 @@ public class AzureUtils {\n \n     @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n     public Optional<String> deleteDatabaseServer(AzureClient azureClient, String databaseServerId, boolean cancelException) {\n-        return handleDeleteErrors(resourceId -> {\n-            LOGGER.info(\"Delete database server: {}\", resourceId);\n-            azureClient.deleteDatabaseServer(resourceId);\n-        }, \"DatabaseServer\", databaseServerId, true);\n+        return handleDeleteErrors(azureClient::deleteDatabaseServer, \"DatabaseServer\", databaseServerId, true);\n     }\n \n     @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxODI2Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r435518266", "bodyText": "This could be an async operation as we don't need to wait for it we can throw a CloudbreakServiceException inside doOnError()", "author": "pdarvasi", "createdAt": "2020-06-04T20:05:37Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java", "diffHunk": "@@ -348,19 +352,54 @@ public void deleteManagedDisks(AzureClient azureClient, Collection<String> manag\n     }\n \n     @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n-    public void deleteDatabaseServer(AzureClient azureClient, String databaseServerId) {\n-        LOGGER.info(\"Delete database server: {}\", databaseServerId);\n-        List<String> failedToDeleteDatabaseServer = new ArrayList<>();\n-        Completable databaseServerDeleteCompletable = azureClient.deleteDatabaseServer(databaseServerId)\n-                .doOnError(throwable -> {\n-                    LOGGER.error(\"Error happend on azure database server delete: {}\", databaseServerId, throwable);\n-                    failedToDeleteDatabaseServer.add(databaseServerId);\n-                })\n-                .subscribeOn(Schedulers.io());\n-        databaseServerDeleteCompletable.await();\n-        if (!failedToDeleteDatabaseServer.isEmpty()) {\n-            LOGGER.error(\"Can't delete database server: {}\", failedToDeleteDatabaseServer);\n-            throw new CloudbreakServiceException(\"Can't delete database server: \" + failedToDeleteDatabaseServer);\n+    public Optional<String> deleteDatabaseServer(AzureClient azureClient, String databaseServerId, boolean cancelException) {\n+        return handleDeleteErrors(resourceId -> {\n+            LOGGER.info(\"Delete database server: {}\", resourceId);\n+            azureClient.deleteDatabaseServer(resourceId);", "originalCommit": "ab2fab3841d1e6c30fbe609e468898937e975c6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMyNTM4Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r437325387", "bodyText": "Subject candidate for future refactor", "author": "pdarvasi", "createdAt": "2020-06-09T11:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxODI2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6b772be045b9b23690e9ae43b524c8337e27207b", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java\nindex d2ba29ecbc..52663e1f3d 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java\n\n@@ -353,10 +353,7 @@ public class AzureUtils {\n \n     @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n     public Optional<String> deleteDatabaseServer(AzureClient azureClient, String databaseServerId, boolean cancelException) {\n-        return handleDeleteErrors(resourceId -> {\n-            LOGGER.info(\"Delete database server: {}\", resourceId);\n-            azureClient.deleteDatabaseServer(resourceId);\n-        }, \"DatabaseServer\", databaseServerId, true);\n+        return handleDeleteErrors(azureClient::deleteDatabaseServer, \"DatabaseServer\", databaseServerId, true);\n     }\n \n     @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyMDM5Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r435520392", "bodyText": "creating --> deleting", "author": "pdarvasi", "createdAt": "2020-06-04T20:09:44Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/deletion/handler/PrerequisitesDeleteHandler.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package com.sequenceiq.environment.environment.flow.deletion.handler;\n+\n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteHandlerSelectors.DELETE_PREREQUISITES_EVENT;\n+import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteStateSelectors.FINISH_ENV_DELETE_EVENT;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupUsagePattern.USE_MULTIPLE;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.Setup;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudPlatformVariant;\n+import com.sequenceiq.cloudbreak.cloud.model.Platform;\n+import com.sequenceiq.cloudbreak.cloud.model.Variant;\n+import com.sequenceiq.cloudbreak.cloud.model.prerequisite.AzurePrerequisiteDeleteRequest;\n+import com.sequenceiq.cloudbreak.cloud.model.prerequisite.EnvironmentPrerequisiteDeleteRequest;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.environment.credential.v1.converter.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationEvent;\n+import com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteFailedEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.parameters.dto.AzureParametersDto;\n+import com.sequenceiq.environment.parameters.dto.AzureResourceGroupDto;\n+import com.sequenceiq.environment.parameters.dto.ParametersDto;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.flow.reactor.api.handler.EventSenderAwareHandler;\n+\n+import reactor.bus.Event;\n+\n+@Component\n+public class PrerequisitesDeleteHandler extends EventSenderAwareHandler<EnvironmentDto> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PrerequisitesDeleteHandler.class);\n+\n+    private final EnvironmentService environmentService;\n+\n+    private final CredentialToCloudCredentialConverter credentialToCloudCredentialConverter;\n+\n+    private final CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    protected PrerequisitesDeleteHandler(EventSender eventSender, EnvironmentService environmentService,\n+            CredentialToCloudCredentialConverter credentialToCloudCredentialConverter, CloudPlatformConnectors cloudPlatformConnectors) {\n+        super(eventSender);\n+        this.environmentService = environmentService;\n+        this.credentialToCloudCredentialConverter = credentialToCloudCredentialConverter;\n+        this.cloudPlatformConnectors = cloudPlatformConnectors;\n+    }\n+\n+    @Override\n+    public String selector() {\n+        return DELETE_PREREQUISITES_EVENT.selector();\n+    }\n+\n+    @Override\n+    public void accept(Event<EnvironmentDto> environmentDtoEvent) {\n+        EnvironmentDto environmentDto = environmentDtoEvent.getData();\n+        environmentService.findEnvironmentById(environmentDto.getId())\n+                .ifPresentOrElse(environment -> {\n+                            try {\n+                                if (AZURE.name().equals(environmentDto.getCloudPlatform())) {\n+                                    deleteResourceGroupIfEmpty(environmentDto, environment);\n+                                } else {\n+                                    LOGGER.debug(\"Cloudplatform not azure, not creating resource group.\");\n+                                }\n+                                goToFinishedState(environmentDtoEvent);\n+                            } catch (Exception e) {\n+                                goToFailedState(environmentDtoEvent, e.getMessage());\n+                            }\n+                        }, () -> goToFailedState(environmentDtoEvent, String.format(\"Environment was not found with id '%s'.\", environmentDto.getId()))\n+                );\n+    }\n+\n+    private void deleteResourceGroupIfEmpty(EnvironmentDto environmentDto, Environment environment) {\n+        Optional<AzureResourceGroupDto> azureResourceGroupDtoOptional = getAzureResourceGroupDto(environmentDto);\n+        if (azureResourceGroupDtoOptional.isEmpty()) {\n+            LOGGER.debug(\"No azure resource group dto defined, not creating resource group.\");", "originalCommit": "ab2fab3841d1e6c30fbe609e468898937e975c6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b772be045b9b23690e9ae43b524c8337e27207b", "chunk": "diff --git a/environment/src/main/java/com/sequenceiq/environment/environment/flow/deletion/handler/PrerequisitesDeleteHandler.java b/environment/src/main/java/com/sequenceiq/environment/environment/flow/deletion/handler/PrerequisitesDeleteHandler.java\nindex 1cc18a2d5a..8f8a53812f 100644\n--- a/environment/src/main/java/com/sequenceiq/environment/environment/flow/deletion/handler/PrerequisitesDeleteHandler.java\n+++ b/environment/src/main/java/com/sequenceiq/environment/environment/flow/deletion/handler/PrerequisitesDeleteHandler.java\n\n@@ -3,8 +3,6 @@ package com.sequenceiq.environment.environment.flow.deletion.handler;\n import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteHandlerSelectors.DELETE_PREREQUISITES_EVENT;\n import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteStateSelectors.FINISH_ENV_DELETE_EVENT;\n-import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n-import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupUsagePattern.USE_MULTIPLE;\n \n import java.util.Optional;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyMDkwMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r435520900", "bodyText": "not --> has not been", "author": "pdarvasi", "createdAt": "2020-06-04T20:10:42Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/deletion/handler/PrerequisitesDeleteHandler.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package com.sequenceiq.environment.environment.flow.deletion.handler;\n+\n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteHandlerSelectors.DELETE_PREREQUISITES_EVENT;\n+import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteStateSelectors.FINISH_ENV_DELETE_EVENT;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupUsagePattern.USE_MULTIPLE;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.Setup;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudPlatformVariant;\n+import com.sequenceiq.cloudbreak.cloud.model.Platform;\n+import com.sequenceiq.cloudbreak.cloud.model.Variant;\n+import com.sequenceiq.cloudbreak.cloud.model.prerequisite.AzurePrerequisiteDeleteRequest;\n+import com.sequenceiq.cloudbreak.cloud.model.prerequisite.EnvironmentPrerequisiteDeleteRequest;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.environment.credential.v1.converter.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationEvent;\n+import com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteFailedEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.parameters.dto.AzureParametersDto;\n+import com.sequenceiq.environment.parameters.dto.AzureResourceGroupDto;\n+import com.sequenceiq.environment.parameters.dto.ParametersDto;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.flow.reactor.api.handler.EventSenderAwareHandler;\n+\n+import reactor.bus.Event;\n+\n+@Component\n+public class PrerequisitesDeleteHandler extends EventSenderAwareHandler<EnvironmentDto> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PrerequisitesDeleteHandler.class);\n+\n+    private final EnvironmentService environmentService;\n+\n+    private final CredentialToCloudCredentialConverter credentialToCloudCredentialConverter;\n+\n+    private final CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    protected PrerequisitesDeleteHandler(EventSender eventSender, EnvironmentService environmentService,\n+            CredentialToCloudCredentialConverter credentialToCloudCredentialConverter, CloudPlatformConnectors cloudPlatformConnectors) {\n+        super(eventSender);\n+        this.environmentService = environmentService;\n+        this.credentialToCloudCredentialConverter = credentialToCloudCredentialConverter;\n+        this.cloudPlatformConnectors = cloudPlatformConnectors;\n+    }\n+\n+    @Override\n+    public String selector() {\n+        return DELETE_PREREQUISITES_EVENT.selector();\n+    }\n+\n+    @Override\n+    public void accept(Event<EnvironmentDto> environmentDtoEvent) {\n+        EnvironmentDto environmentDto = environmentDtoEvent.getData();\n+        environmentService.findEnvironmentById(environmentDto.getId())\n+                .ifPresentOrElse(environment -> {\n+                            try {\n+                                if (AZURE.name().equals(environmentDto.getCloudPlatform())) {\n+                                    deleteResourceGroupIfEmpty(environmentDto, environment);\n+                                } else {\n+                                    LOGGER.debug(\"Cloudplatform not azure, not creating resource group.\");\n+                                }\n+                                goToFinishedState(environmentDtoEvent);\n+                            } catch (Exception e) {\n+                                goToFailedState(environmentDtoEvent, e.getMessage());\n+                            }\n+                        }, () -> goToFailedState(environmentDtoEvent, String.format(\"Environment was not found with id '%s'.\", environmentDto.getId()))\n+                );\n+    }\n+\n+    private void deleteResourceGroupIfEmpty(EnvironmentDto environmentDto, Environment environment) {\n+        Optional<AzureResourceGroupDto> azureResourceGroupDtoOptional = getAzureResourceGroupDto(environmentDto);\n+        if (azureResourceGroupDtoOptional.isEmpty()) {\n+            LOGGER.debug(\"No azure resource group dto defined, not creating resource group.\");\n+            return;\n+        }\n+\n+        AzureResourceGroupDto azureResourceGroupDto = azureResourceGroupDtoOptional.get();\n+        LOGGER.debug(\"Azure resource group dto: {}\", azureResourceGroupDto);\n+        if (USE_MULTIPLE.equals(azureResourceGroupDto.getResourceGroupUsagePattern()) || !CREATE_NEW.equals(azureResourceGroupDto.getResourceGroupCreation())) {\n+            LOGGER.debug(\"Not deleting resource group.\");\n+            return;\n+        }\n+\n+        String resourceGroupName = azureResourceGroupDto.getName();\n+        deleteResourceGroupIfEmpty(environmentDto, resourceGroupName);\n+        LOGGER.debug(\"Azure resource group created successfully.\");\n+    }\n+\n+    private void deleteResourceGroupIfEmpty(EnvironmentDto environmentDto, String resourceGroupName) {\n+        try {\n+            Optional<Setup> setupOptional = getSetupConnector(environmentDto.getCloudPlatform());\n+            if (setupOptional.isEmpty()) {\n+                LOGGER.debug(\"No setup defined for platform {}, resource group not created.\", environmentDto.getCloudPlatform());", "originalCommit": "ab2fab3841d1e6c30fbe609e468898937e975c6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b772be045b9b23690e9ae43b524c8337e27207b", "chunk": "diff --git a/environment/src/main/java/com/sequenceiq/environment/environment/flow/deletion/handler/PrerequisitesDeleteHandler.java b/environment/src/main/java/com/sequenceiq/environment/environment/flow/deletion/handler/PrerequisitesDeleteHandler.java\nindex 1cc18a2d5a..8f8a53812f 100644\n--- a/environment/src/main/java/com/sequenceiq/environment/environment/flow/deletion/handler/PrerequisitesDeleteHandler.java\n+++ b/environment/src/main/java/com/sequenceiq/environment/environment/flow/deletion/handler/PrerequisitesDeleteHandler.java\n\n@@ -3,8 +3,6 @@ package com.sequenceiq.environment.environment.flow.deletion.handler;\n import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteHandlerSelectors.DELETE_PREREQUISITES_EVENT;\n import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteStateSelectors.FINISH_ENV_DELETE_EVENT;\n-import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n-import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupUsagePattern.USE_MULTIPLE;\n \n import java.util.Optional;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc1OTc3Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r435759777", "bodyText": "Am I missing here something? The class looks a little over-engineered. I mean the usage of function reference here.", "author": "attilapalfi92", "createdAt": "2020-06-05T08:11:44Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java", "diffHunk": "@@ -348,19 +352,54 @@ public void deleteManagedDisks(AzureClient azureClient, Collection<String> manag\n     }\n \n     @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n-    public void deleteDatabaseServer(AzureClient azureClient, String databaseServerId) {\n-        LOGGER.info(\"Delete database server: {}\", databaseServerId);\n-        List<String> failedToDeleteDatabaseServer = new ArrayList<>();\n-        Completable databaseServerDeleteCompletable = azureClient.deleteDatabaseServer(databaseServerId)\n-                .doOnError(throwable -> {\n-                    LOGGER.error(\"Error happend on azure database server delete: {}\", databaseServerId, throwable);\n-                    failedToDeleteDatabaseServer.add(databaseServerId);\n-                })\n-                .subscribeOn(Schedulers.io());\n-        databaseServerDeleteCompletable.await();\n-        if (!failedToDeleteDatabaseServer.isEmpty()) {\n-            LOGGER.error(\"Can't delete database server: {}\", failedToDeleteDatabaseServer);\n-            throw new CloudbreakServiceException(\"Can't delete database server: \" + failedToDeleteDatabaseServer);\n+    public Optional<String> deleteDatabaseServer(AzureClient azureClient, String databaseServerId, boolean cancelException) {\n+        return handleDeleteErrors(resourceId -> {\n+            LOGGER.info(\"Delete database server: {}\", resourceId);\n+            azureClient.deleteDatabaseServer(resourceId);\n+        }, \"DatabaseServer\", databaseServerId, true);\n+    }\n+\n+    @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n+    public Optional<String> deleteResourceGroup(AzureClient azureClient, String resourceGroupId, boolean cancelException) {\n+        return handleDeleteErrors(azureClient::deleteResourceGroup, \"ResourceGroup\", resourceGroupId, cancelException);\n+    }\n+\n+    private <T> Optional<String> handleDeleteErrors(Consumer<String> deleteConsumer, String resourceType, String resourceId, boolean cancelException) {", "originalCommit": "ab2fab3841d1e6c30fbe609e468898937e975c6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b772be045b9b23690e9ae43b524c8337e27207b", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java\nindex d2ba29ecbc..52663e1f3d 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java\n\n@@ -353,10 +353,7 @@ public class AzureUtils {\n \n     @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n     public Optional<String> deleteDatabaseServer(AzureClient azureClient, String databaseServerId, boolean cancelException) {\n-        return handleDeleteErrors(resourceId -> {\n-            LOGGER.info(\"Delete database server: {}\", resourceId);\n-            azureClient.deleteDatabaseServer(resourceId);\n-        }, \"DatabaseServer\", databaseServerId, true);\n+        return handleDeleteErrors(azureClient::deleteDatabaseServer, \"DatabaseServer\", databaseServerId, true);\n     }\n \n     @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2Mzg3Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r435763872", "bodyText": "Please remove the if here and use the composite pattern to determine the specific cloud-api that is needed to delete the prerequisites. Move every azure specific implementation to the cloud-azure module.", "author": "attilapalfi92", "createdAt": "2020-06-05T08:19:54Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/deletion/handler/PrerequisitesDeleteHandler.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package com.sequenceiq.environment.environment.flow.deletion.handler;\n+\n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteHandlerSelectors.DELETE_PREREQUISITES_EVENT;\n+import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteStateSelectors.FINISH_ENV_DELETE_EVENT;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupUsagePattern.USE_MULTIPLE;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.Setup;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudPlatformVariant;\n+import com.sequenceiq.cloudbreak.cloud.model.Platform;\n+import com.sequenceiq.cloudbreak.cloud.model.Variant;\n+import com.sequenceiq.cloudbreak.cloud.model.prerequisite.AzurePrerequisiteDeleteRequest;\n+import com.sequenceiq.cloudbreak.cloud.model.prerequisite.EnvironmentPrerequisiteDeleteRequest;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.environment.credential.v1.converter.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationEvent;\n+import com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteFailedEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.parameters.dto.AzureParametersDto;\n+import com.sequenceiq.environment.parameters.dto.AzureResourceGroupDto;\n+import com.sequenceiq.environment.parameters.dto.ParametersDto;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.flow.reactor.api.handler.EventSenderAwareHandler;\n+\n+import reactor.bus.Event;\n+\n+@Component\n+public class PrerequisitesDeleteHandler extends EventSenderAwareHandler<EnvironmentDto> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PrerequisitesDeleteHandler.class);\n+\n+    private final EnvironmentService environmentService;\n+\n+    private final CredentialToCloudCredentialConverter credentialToCloudCredentialConverter;\n+\n+    private final CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    protected PrerequisitesDeleteHandler(EventSender eventSender, EnvironmentService environmentService,\n+            CredentialToCloudCredentialConverter credentialToCloudCredentialConverter, CloudPlatformConnectors cloudPlatformConnectors) {\n+        super(eventSender);\n+        this.environmentService = environmentService;\n+        this.credentialToCloudCredentialConverter = credentialToCloudCredentialConverter;\n+        this.cloudPlatformConnectors = cloudPlatformConnectors;\n+    }\n+\n+    @Override\n+    public String selector() {\n+        return DELETE_PREREQUISITES_EVENT.selector();\n+    }\n+\n+    @Override\n+    public void accept(Event<EnvironmentDto> environmentDtoEvent) {\n+        EnvironmentDto environmentDto = environmentDtoEvent.getData();\n+        environmentService.findEnvironmentById(environmentDto.getId())\n+                .ifPresentOrElse(environment -> {\n+                            try {\n+                                if (AZURE.name().equals(environmentDto.getCloudPlatform())) {", "originalCommit": "ab2fab3841d1e6c30fbe609e468898937e975c6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NTc0MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r435765741", "bodyText": "See PublicKeyCreationHandler for reference.", "author": "attilapalfi92", "createdAt": "2020-06-05T08:23:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2Mzg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIwNTg1Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r437205853", "bodyText": "Why is this if still here? Please remove it like in PublicKeyCreationHandler", "author": "attilapalfi92", "createdAt": "2020-06-09T07:51:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2Mzg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNzIwMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r437217200", "bodyText": "Deleted, thanks for spotting it.", "author": "gergopapi2", "createdAt": "2020-06-09T08:10:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2Mzg3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6b772be045b9b23690e9ae43b524c8337e27207b", "chunk": "diff --git a/environment/src/main/java/com/sequenceiq/environment/environment/flow/deletion/handler/PrerequisitesDeleteHandler.java b/environment/src/main/java/com/sequenceiq/environment/environment/flow/deletion/handler/PrerequisitesDeleteHandler.java\nindex 1cc18a2d5a..8f8a53812f 100644\n--- a/environment/src/main/java/com/sequenceiq/environment/environment/flow/deletion/handler/PrerequisitesDeleteHandler.java\n+++ b/environment/src/main/java/com/sequenceiq/environment/environment/flow/deletion/handler/PrerequisitesDeleteHandler.java\n\n@@ -3,8 +3,6 @@ package com.sequenceiq.environment.environment.flow.deletion.handler;\n import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteHandlerSelectors.DELETE_PREREQUISITES_EVENT;\n import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteStateSelectors.FINISH_ENV_DELETE_EVENT;\n-import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n-import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupUsagePattern.USE_MULTIPLE;\n \n import java.util.Optional;\n \n"}}, {"oid": "6b772be045b9b23690e9ae43b524c8337e27207b", "url": "https://github.com/hortonworks/cloudbreak/commit/6b772be045b9b23690e9ae43b524c8337e27207b", "message": "CB-7267 [ASRG] Implement resource group termination step", "committedDate": "2020-06-08T19:15:03Z", "type": "forcePushed"}, {"oid": "a315e32ff471175f12ae318da175f121c351c0da", "url": "https://github.com/hortonworks/cloudbreak/commit/a315e32ff471175f12ae318da175f121c351c0da", "message": "CB-7267 [ASRG] Implement resource group termination step", "committedDate": "2020-06-08T19:19:16Z", "type": "forcePushed"}, {"oid": "def722a112341b92686aa7e4ad548b806bcaeb00", "url": "https://github.com/hortonworks/cloudbreak/commit/def722a112341b92686aa7e4ad548b806bcaeb00", "message": "CB-7267 [ASRG] Implement resource group termination step", "committedDate": "2020-06-09T08:04:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5NzExMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r437297110", "bodyText": "cancelException is not passed here", "author": "pdarvasi", "createdAt": "2020-06-09T10:10:54Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java", "diffHunk": "@@ -348,19 +352,53 @@ public void deleteManagedDisks(AzureClient azureClient, Collection<String> manag\n     }\n \n     @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n-    public void deleteDatabaseServer(AzureClient azureClient, String databaseServerId) {\n-        LOGGER.info(\"Delete database server: {}\", databaseServerId);\n-        List<String> failedToDeleteDatabaseServer = new ArrayList<>();\n-        Completable databaseServerDeleteCompletable = azureClient.deleteDatabaseServer(databaseServerId)\n-                .doOnError(throwable -> {\n-                    LOGGER.error(\"Error happend on azure database server delete: {}\", databaseServerId, throwable);\n-                    failedToDeleteDatabaseServer.add(databaseServerId);\n-                })\n-                .subscribeOn(Schedulers.io());\n-        databaseServerDeleteCompletable.await();\n-        if (!failedToDeleteDatabaseServer.isEmpty()) {\n-            LOGGER.error(\"Can't delete database server: {}\", failedToDeleteDatabaseServer);\n-            throw new CloudbreakServiceException(\"Can't delete database server: \" + failedToDeleteDatabaseServer);\n+    public Optional<String> deleteDatabaseServer(AzureClient azureClient, String databaseServerId, boolean cancelException) {\n+        return handleDeleteErrors(azureClient::deleteDatabaseServer, \"DatabaseServer\", databaseServerId, true);", "originalCommit": "def722a112341b92686aa7e4ad548b806bcaeb00", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fde758cedf9eb6a7bfc75edaa35680d129aeadc", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java\nindex 52663e1f3d..fe3581a8f7 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java\n\n@@ -353,7 +353,7 @@ public class AzureUtils {\n \n     @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n     public Optional<String> deleteDatabaseServer(AzureClient azureClient, String databaseServerId, boolean cancelException) {\n-        return handleDeleteErrors(azureClient::deleteDatabaseServer, \"DatabaseServer\", databaseServerId, true);\n+        return handleDeleteErrors(azureClient::deleteDatabaseServer, \"DatabaseServer\", databaseServerId, cancelException);\n     }\n \n     @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n"}}, {"oid": "0fde758cedf9eb6a7bfc75edaa35680d129aeadc", "url": "https://github.com/hortonworks/cloudbreak/commit/0fde758cedf9eb6a7bfc75edaa35680d129aeadc", "message": "CB-7267 [ASRG] Implement resource group termination step", "committedDate": "2020-06-09T10:17:25Z", "type": "commit"}, {"oid": "0fde758cedf9eb6a7bfc75edaa35680d129aeadc", "url": "https://github.com/hortonworks/cloudbreak/commit/0fde758cedf9eb6a7bfc75edaa35680d129aeadc", "message": "CB-7267 [ASRG] Implement resource group termination step", "committedDate": "2020-06-09T10:17:25Z", "type": "forcePushed"}]}