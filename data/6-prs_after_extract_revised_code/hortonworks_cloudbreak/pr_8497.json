{"pr_number": 8497, "pr_title": "CB-7829-CB User Sync in periscope", "pr_createdAt": "2020-07-07T12:20:44Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8497", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg2MDE5MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8497#discussion_r450860191", "bodyText": "I'm not familiar with the UNINITIALIZED_WORKSPACE_ID and why it would have value -1.\nBut if you wish to call a CB API directly, you should always use workspaceID 0.\nThat will default to the tenant default workspace which should be already existing.", "author": "lnardai", "createdAt": "2020-07-07T13:23:35Z", "path": "autoscale/src/main/java/com/sequenceiq/periscope/filter/CloudbreakUserConfiguratorFilter.java", "diffHunk": "@@ -34,16 +34,15 @@ public CloudbreakUserConfiguratorFilter(AutoscaleRestRequestThreadLocalService r\n \n     @Override\n     protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n-        CloudbreakUser cloudbreakUser = authenticatedUserService.getCbUser();\n+        CloudbreakUser cbUser = authenticatedUserService.getCbUser();\n         Long workspaceId = UNINITIALIZED_WORKSPACE_ID;", "originalCommit": "68f502b361196357cd20c6503a8c7a29b06af5db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNzQ2NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8497#discussion_r450917465", "bodyText": "ack. as discussed will default cluster to tenant scope and remove workspace related ids.", "author": "smaniraju", "createdAt": "2020-07-07T14:41:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg2MDE5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "77155c69be652adfe1e75f053286e6beafd02a57", "chunk": "diff --git a/autoscale/src/main/java/com/sequenceiq/periscope/filter/CloudbreakUserConfiguratorFilter.java b/autoscale/src/main/java/com/sequenceiq/periscope/filter/CloudbreakUserConfiguratorFilter.java\nindex c821cb7576..aab69c39cb 100644\n--- a/autoscale/src/main/java/com/sequenceiq/periscope/filter/CloudbreakUserConfiguratorFilter.java\n+++ b/autoscale/src/main/java/com/sequenceiq/periscope/filter/CloudbreakUserConfiguratorFilter.java\n\n@@ -23,25 +19,16 @@ public class CloudbreakUserConfiguratorFilter extends OncePerRequestFilter {\n \n     private final AuthenticatedUserService authenticatedUserService;\n \n-    private final ClusterPertainService clusterPertainService;\n-\n     public CloudbreakUserConfiguratorFilter(AutoscaleRestRequestThreadLocalService restRequestThreadLocalService,\n-            AuthenticatedUserService authenticatedUserService, ClusterPertainService clusterPertainService) {\n+            AuthenticatedUserService authenticatedUserService) {\n         this.restRequestThreadLocalService = restRequestThreadLocalService;\n         this.authenticatedUserService = authenticatedUserService;\n-        this.clusterPertainService = clusterPertainService;\n     }\n \n     @Override\n     protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n-        CloudbreakUser cbUser = authenticatedUserService.getCbUser();\n-        Long workspaceId = UNINITIALIZED_WORKSPACE_ID;\n-        if (cbUser != null) {\n-            ClusterPertain cbSyncedUser = clusterPertainService.getOrCreateUser(cbUser.getUserId(), cbUser.getUserCrn(), cbUser.getTenant());\n-            workspaceId = cbSyncedUser.getWorkspaceId();\n-        }\n-\n-        restRequestThreadLocalService.setCloudbreakUser(cbUser, workspaceId);\n+        CloudbreakUser cloudbreakUser = authenticatedUserService.getCbUser();\n+        restRequestThreadLocalService.setCloudbreakUser(cloudbreakUser);\n         filterChain.doFilter(request, response);\n         restRequestThreadLocalService.removeCloudbreakUser();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3MjI0OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8497#discussion_r450872248", "bodyText": "There should be no such endpoint, this controller will be soon removed.", "author": "lnardai", "createdAt": "2020-07-07T13:40:27Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/v4/AutoscaleV4Controller.java", "diffHunk": "@@ -126,6 +137,15 @@ public StackV4Response get(String crn) {\n         return stackCommonService.getByCrn(crn, Collections.emptySet());\n     }\n \n+    @Override\n+    @DisableCheckPermissions\n+    @PreAuthorize(\"hasRole('AUTOSCALE')\")\n+    public WorkspaceV4Response getDefaultWorkspaceForUser(String userId, String tenant) {", "originalCommit": "68f502b361196357cd20c6503a8c7a29b06af5db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3MzQyNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8497#discussion_r450873425", "bodyText": "To be more precise, Workspace related API will be removed soon, so WorkspaceResponse should not be used", "author": "horadla23", "createdAt": "2020-07-07T13:42:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3MjI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNjcxMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8497#discussion_r450916712", "bodyText": "ack will remove this change.", "author": "smaniraju", "createdAt": "2020-07-07T14:40:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3MjI0OA=="}], "type": "inlineReview", "revised_code": {"commit": "77155c69be652adfe1e75f053286e6beafd02a57", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/controller/v4/AutoscaleV4Controller.java b/core/src/main/java/com/sequenceiq/cloudbreak/controller/v4/AutoscaleV4Controller.java\nindex 852cb772b8..b76168fa58 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/controller/v4/AutoscaleV4Controller.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/controller/v4/AutoscaleV4Controller.java\n\n@@ -137,15 +126,6 @@ public class AutoscaleV4Controller implements AutoscaleV4Endpoint {\n         return stackCommonService.getByCrn(crn, Collections.emptySet());\n     }\n \n-    @Override\n-    @DisableCheckPermissions\n-    @PreAuthorize(\"hasRole('AUTOSCALE')\")\n-    public WorkspaceV4Response getDefaultWorkspaceForUser(String userId, String tenant) {\n-        User cbUser = userService.getByUserIdAndTenant(userId, tenant)\n-                .orElseThrow(NotFoundException.notFound(\"user\", userId));\n-        return converterUtil.convert(workspaceService.getDefaultWorkspaceForUser(cbUser), WorkspaceV4Response.class);\n-    }\n-\n     @Override\n     @DisableCheckPermissions\n     @PreAuthorize(\"hasRole('AUTOSCALE') or hasRole('INTERNAL')\")\n"}}, {"oid": "77155c69be652adfe1e75f053286e6beafd02a57", "url": "https://github.com/hortonworks/cloudbreak/commit/77155c69be652adfe1e75f053286e6beafd02a57", "message": "CB-7829\n\n1. Scope periscope cluster entities at tenant level and not workspace level, since workspace concept is deprecated.\n2. Cluster within same tenant can be configured for autoscaling by tenant user as long as the authenticated user has appropriate UMS Authorization permission.", "committedDate": "2020-07-07T15:36:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4MDg0NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8497#discussion_r451380844", "bodyText": "Where do we use this ClusterID?\nI'm ok with using Name and Tenant since it might come handy on the CLI, but we are not really using clusterID anywhere.", "author": "lnardai", "createdAt": "2020-07-08T08:42:12Z", "path": "autoscale/src/main/java/com/sequenceiq/periscope/repository/ClusterRepository.java", "diffHunk": "@@ -19,16 +19,16 @@\n     Cluster findByStackId(@Param(\"stackId\") Long stackId);\n \n     @Query(\" SELECT c FROM Cluster c LEFT JOIN FETCH c.clusterPertain \" +\n-            \" WHERE c.stackCrn = :stackCrn and c.clusterPertain.workspaceId = :workspaceId\")\n-    Optional<Cluster> findByStackCrnAndWorkspaceId(@Param(\"stackCrn\") String stackCrn, @Param(\"workspaceId\") Long workspaceId);\n+            \" WHERE c.stackCrn = :stackCrn and c.clusterPertain.tenant = :tenant\")\n+    Optional<Cluster> findByStackCrnAndTenant(@Param(\"stackCrn\") String stackCrn, @Param(\"tenant\") String tenant);\n \n     @Query(\" SELECT c FROM Cluster c LEFT JOIN FETCH c.clusterPertain \" +\n-            \" WHERE c.stackName = :stackName and c.clusterPertain.workspaceId = :workspaceId\")\n-    Optional<Cluster> findByStackNameAndWorkspaceId(@Param(\"stackName\") String stackName, @Param(\"workspaceId\") Long workspaceId);\n+            \" WHERE c.stackName = :stackName and c.clusterPertain.tenant = :tenant\")\n+    Optional<Cluster> findByStackNameAndTenant(@Param(\"stackName\") String stackName, @Param(\"tenant\") String tenant);\n \n     @Query(\" SELECT c FROM Cluster c LEFT JOIN FETCH c.clusterPertain \" +", "originalCommit": "77155c69be652adfe1e75f053286e6beafd02a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4NDk5OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8497#discussion_r451384999", "bodyText": "This is not used now since Id based endpoints is disabled in periscope now. This was used in Id based AlertEndpoint which is disabled but not deleted.", "author": "smaniraju", "createdAt": "2020-07-08T08:48:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4MDg0NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4Mjk3Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8497#discussion_r451382972", "bodyText": "Why change userCRN to userID? userID is an old concept we should rely on userCRN as much as possible.\nAlso I don't really get the use case why I would want to get a list based on someones CRN.", "author": "lnardai", "createdAt": "2020-07-08T08:45:34Z", "path": "autoscale/src/main/java/com/sequenceiq/periscope/service/ClusterService.java", "diffHunk": "@@ -102,7 +102,7 @@ public Cluster create(AutoscaleStackV4Response stack) {\n         ClusterPertain clusterPertain =\n                 new ClusterPertain(stack.getTenant(), stack.getWorkspaceId(), stack.getUserId(), stack.getUserCrn());\n         cluster.setClusterPertain(\n-                clusterPertainRepository.findByUserCrn(clusterPertain.getUserCrn())\n+                clusterPertainRepository.findByUserId(clusterPertain.getUserId())", "originalCommit": "77155c69be652adfe1e75f053286e6beafd02a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwNTU2OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8497#discussion_r451405569", "bodyText": "ok updated to use userCRN.", "author": "smaniraju", "createdAt": "2020-07-08T09:23:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4Mjk3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3bc4ea8e8914a91dbef5231fc2d7cf927b603eb2", "chunk": "diff --git a/autoscale/src/main/java/com/sequenceiq/periscope/service/ClusterService.java b/autoscale/src/main/java/com/sequenceiq/periscope/service/ClusterService.java\nindex 23c8c7a17e..e39c18267f 100644\n--- a/autoscale/src/main/java/com/sequenceiq/periscope/service/ClusterService.java\n+++ b/autoscale/src/main/java/com/sequenceiq/periscope/service/ClusterService.java\n\n@@ -102,7 +102,7 @@ public class ClusterService implements ResourceBasedCrnProvider {\n         ClusterPertain clusterPertain =\n                 new ClusterPertain(stack.getTenant(), stack.getWorkspaceId(), stack.getUserId(), stack.getUserCrn());\n         cluster.setClusterPertain(\n-                clusterPertainRepository.findByUserId(clusterPertain.getUserId())\n+                clusterPertainRepository.findByUserCrn(clusterPertain.getUserCrn())\n                         .orElseGet(() -> clusterPertainRepository.save(clusterPertain)));\n \n         cluster = save(cluster);\n"}}, {"oid": "3bc4ea8e8914a91dbef5231fc2d7cf927b603eb2", "url": "https://github.com/hortonworks/cloudbreak/commit/3bc4ea8e8914a91dbef5231fc2d7cf927b603eb2", "message": "CB-7829\n\n1. Scope periscope cluster entities at tenant level and not workspace level, since workspace concept is deprecated.\n2. Cluster within same tenant can be configured for autoscaling by tenant user as long as the authenticated user has appropriate UMS Authorization permission.", "committedDate": "2020-07-08T09:18:57Z", "type": "commit"}, {"oid": "3bc4ea8e8914a91dbef5231fc2d7cf927b603eb2", "url": "https://github.com/hortonworks/cloudbreak/commit/3bc4ea8e8914a91dbef5231fc2d7cf927b603eb2", "message": "CB-7829\n\n1. Scope periscope cluster entities at tenant level and not workspace level, since workspace concept is deprecated.\n2. Cluster within same tenant can be configured for autoscaling by tenant user as long as the authenticated user has appropriate UMS Authorization permission.", "committedDate": "2020-07-08T09:18:57Z", "type": "forcePushed"}]}