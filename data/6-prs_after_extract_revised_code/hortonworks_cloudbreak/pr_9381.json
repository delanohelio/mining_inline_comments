{"pr_number": 9381, "pr_title": "CB-9625 enable rest logging on request response pairs. This using a n\u2026", "pr_createdAt": "2020-11-06T08:14:58Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/9381", "timeline": [{"oid": "07b4f9ccd76d372021ab531dd6687b82a5e0415c", "url": "https://github.com/hortonworks/cloudbreak/commit/07b4f9ccd76d372021ab531dd6687b82a5e0415c", "message": "CB-9625 enable rest logging on request response pairs. This using a new filter where we can enable on deployment level this logging. RestLoggerFilter can be improved with new fields if we need that.", "committedDate": "2020-11-09T08:31:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzODI0Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519838247", "bodyText": "Do we need it as a separate enum?", "author": "akanto", "createdAt": "2020-11-09T14:06:03Z", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerField.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+public enum RestLoggerField {", "originalCommit": "07b4f9ccd76d372021ab531dd6687b82a5e0415c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1MjQyMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519852421", "bodyText": "I thought it is nicer this way. Should I remove it ?", "author": "doktoric", "createdAt": "2020-11-09T14:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzODI0Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzODkyOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519838929", "bodyText": "Usually, this is private final static Logger LOGGER and usually, we are not using getClass(), but setting it to the class directly", "author": "akanto", "createdAt": "2020-11-09T14:07:05Z", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.util.ContentCachingRequestWrapper;\n+import org.springframework.web.util.ContentCachingResponseWrapper;\n+\n+import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n+\n+public class RestLoggerFilter extends OncePerRequestFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());", "originalCommit": "07b4f9ccd76d372021ab531dd6687b82a5e0415c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "88dd4706fe9d842a6bbb698adc49f99b88252e72", "chunk": "diff --git a/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java b/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java\nindex b8425a2590..e4b5054240 100644\n--- a/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java\n+++ b/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java\n\n@@ -23,16 +23,12 @@ import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n \n public class RestLoggerFilter extends OncePerRequestFilter {\n \n-    private final Logger logger = LoggerFactory.getLogger(getClass());\n-\n-    private final DateFormat formatter;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RestLoggerFilter.class);\n \n     private final boolean restLoggerEnabled;\n \n     public RestLoggerFilter(boolean restLoggerEnabled) {\n         this.restLoggerEnabled = restLoggerEnabled;\n-        this.formatter = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n-        this.formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzOTI4NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519839285", "bodyText": "DateFormate is not thread safe! You cannot use it as a member variable in a filter.", "author": "akanto", "createdAt": "2020-11-09T14:07:38Z", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.util.ContentCachingRequestWrapper;\n+import org.springframework.web.util.ContentCachingResponseWrapper;\n+\n+import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n+\n+public class RestLoggerFilter extends OncePerRequestFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final DateFormat formatter;", "originalCommit": "07b4f9ccd76d372021ab531dd6687b82a5e0415c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "88dd4706fe9d842a6bbb698adc49f99b88252e72", "chunk": "diff --git a/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java b/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java\nindex b8425a2590..e4b5054240 100644\n--- a/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java\n+++ b/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java\n\n@@ -23,16 +23,12 @@ import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n \n public class RestLoggerFilter extends OncePerRequestFilter {\n \n-    private final Logger logger = LoggerFactory.getLogger(getClass());\n-\n-    private final DateFormat formatter;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RestLoggerFilter.class);\n \n     private final boolean restLoggerEnabled;\n \n     public RestLoggerFilter(boolean restLoggerEnabled) {\n         this.restLoggerEnabled = restLoggerEnabled;\n-        this.formatter = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n-        this.formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MDU0MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519840540", "bodyText": "2020-11-09 15:04:43,771 [http-nio-9091-exec-1] anonymize:34 INFO  c.s.c.c.a.AnonymizerUtil - [type:springLog] [crn:] [name:] [flow:] [requestid:75737203-c895-4fc1-b357-2975722d3b3d] [tenant:] [userCrn:] [environment:] [traceId:] [spanId:] Anonymize the content with length: 2 2020-11-09 15:04:43,772 [http-nio-9091-exec-1] anonymize:34 INFO  c.s.c.c.a.AnonymizerUtil - [type:springLog] [crn:] [name:] [flow:] [requestid:75737203-c895-4fc1-b357-2975722d3b3d] [tenant:] [userCrn:] [environment:] [traceId:] [spanId:] Anonymize the content with length: 15 2020-11-09 15:04:43,773 [http-nio-9091-exec-1] doFilterInternal:62 DEBUG c.s.c.l.RestLoggerFilter - [type:springLog] [crn:] [name:] [flow:] [requestid:75737203-c895-4fc1-b357-2975722d3b3d] [tenant:] [userCrn:] [environment:] [traceId:] [spanId:] startTime: 14:04:26.385  endTime: 14:04:26.536  duration: 151 ms  httpMethod: GET  path: /cb/health  queryString: null  clientIp: 127.0.0.1  request: {}  responseStatus: 200  response: {\"status\":\"UP\"}  \nUnfortunately, thenant Id traceId and such things were not filled out.", "author": "akanto", "createdAt": "2020-11-09T14:09:34Z", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.util.ContentCachingRequestWrapper;\n+import org.springframework.web.util.ContentCachingResponseWrapper;\n+\n+import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n+\n+public class RestLoggerFilter extends OncePerRequestFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final DateFormat formatter;\n+\n+    private final boolean restLoggerEnabled;\n+\n+    public RestLoggerFilter(boolean restLoggerEnabled) {\n+        this.restLoggerEnabled = restLoggerEnabled;\n+        this.formatter = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n+        this.formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n+        Date start = new Date(System.currentTimeMillis());\n+        ContentCachingRequestWrapper wrappedRequest = getWrappedRequest(request);\n+        ContentCachingResponseWrapper wrappedResponse = getWrappedResponse(response);\n+\n+        filterChain.doFilter(wrappedRequest, wrappedResponse);\n+\n+        if (restLoggerEnabled) {\n+            Date end = new Date(System.currentTimeMillis());\n+            String log = new StringBuilder()\n+                    .append(appendLine(RestLoggerField.START_TIME, formatter.format(start)))\n+                    .append(appendLine(RestLoggerField.END_TIME, formatter.format(end)))\n+                    .append(appendLine(RestLoggerField.DURATION, Math.abs(end.getTime() - start.getTime()) + \" ms\"))\n+                    .append(appendLine(RestLoggerField.HTTP_METHOD, request.getMethod()))\n+                    .append(appendLine(RestLoggerField.PATH, request.getRequestURI()))\n+                    .append(appendLine(RestLoggerField.QUERY_STRING, request.getQueryString()))\n+                    .append(appendLine(RestLoggerField.CLIENT_IP, request.getRemoteAddr()))\n+                    .append(appendLine(RestLoggerField.REQUEST,\n+                            logContent(wrappedRequest.getContentAsByteArray(), request.getCharacterEncoding())))\n+                    .append(appendLine(RestLoggerField.RESPONSE_STATUS, String.valueOf(response.getStatus())))\n+                    .append(appendLine(RestLoggerField.RESPONSE,\n+                            logContent(wrappedResponse.getContentAsByteArray(), request.getCharacterEncoding())))\n+                    .toString();\n+            logger.debug(log);", "originalCommit": "07b4f9ccd76d372021ab531dd6687b82a5e0415c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg4MDYzMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519880633", "bodyText": "ok let me reorder the filters mdc must come first", "author": "doktoric", "createdAt": "2020-11-09T15:03:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MDU0MA=="}], "type": "inlineReview", "revised_code": {"commit": "88dd4706fe9d842a6bbb698adc49f99b88252e72", "chunk": "diff --git a/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java b/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java\nindex b8425a2590..e4b5054240 100644\n--- a/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java\n+++ b/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java\n\n@@ -23,16 +23,12 @@ import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n \n public class RestLoggerFilter extends OncePerRequestFilter {\n \n-    private final Logger logger = LoggerFactory.getLogger(getClass());\n-\n-    private final DateFormat formatter;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RestLoggerFilter.class);\n \n     private final boolean restLoggerEnabled;\n \n     public RestLoggerFilter(boolean restLoggerEnabled) {\n         this.restLoggerEnabled = restLoggerEnabled;\n-        this.formatter = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n-        this.formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MDkwMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519840900", "bodyText": "Log should be pushed through anonymization.", "author": "akanto", "createdAt": "2020-11-09T14:10:09Z", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.util.ContentCachingRequestWrapper;\n+import org.springframework.web.util.ContentCachingResponseWrapper;\n+\n+import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n+\n+public class RestLoggerFilter extends OncePerRequestFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final DateFormat formatter;\n+\n+    private final boolean restLoggerEnabled;\n+\n+    public RestLoggerFilter(boolean restLoggerEnabled) {\n+        this.restLoggerEnabled = restLoggerEnabled;\n+        this.formatter = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n+        this.formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n+        Date start = new Date(System.currentTimeMillis());\n+        ContentCachingRequestWrapper wrappedRequest = getWrappedRequest(request);\n+        ContentCachingResponseWrapper wrappedResponse = getWrappedResponse(response);\n+\n+        filterChain.doFilter(wrappedRequest, wrappedResponse);\n+\n+        if (restLoggerEnabled) {\n+            Date end = new Date(System.currentTimeMillis());\n+            String log = new StringBuilder()", "originalCommit": "07b4f9ccd76d372021ab531dd6687b82a5e0415c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1MTA2MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519851060", "bodyText": "the request and response pairs are already anonymized do we all other field as well ?", "author": "doktoric", "createdAt": "2020-11-09T14:24:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MDkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3Njg1MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519876851", "bodyText": "Oh, I haven't seen it, so I guess then it should be fine.", "author": "akanto", "createdAt": "2020-11-09T14:58:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MDkwMA=="}], "type": "inlineReview", "revised_code": {"commit": "88dd4706fe9d842a6bbb698adc49f99b88252e72", "chunk": "diff --git a/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java b/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java\nindex b8425a2590..e4b5054240 100644\n--- a/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java\n+++ b/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java\n\n@@ -23,16 +23,12 @@ import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n \n public class RestLoggerFilter extends OncePerRequestFilter {\n \n-    private final Logger logger = LoggerFactory.getLogger(getClass());\n-\n-    private final DateFormat formatter;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RestLoggerFilter.class);\n \n     private final boolean restLoggerEnabled;\n \n     public RestLoggerFilter(boolean restLoggerEnabled) {\n         this.restLoggerEnabled = restLoggerEnabled;\n-        this.formatter = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n-        this.formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MjAwMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519842003", "bodyText": "Do we want to have this multi-line log approach separated by \\n?  I am not sure how easy to parse and handle from fluentd.\n@oleewere @sodre90", "author": "akanto", "createdAt": "2020-11-09T14:11:50Z", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.util.ContentCachingRequestWrapper;\n+import org.springframework.web.util.ContentCachingResponseWrapper;\n+\n+import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n+\n+public class RestLoggerFilter extends OncePerRequestFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final DateFormat formatter;\n+\n+    private final boolean restLoggerEnabled;\n+\n+    public RestLoggerFilter(boolean restLoggerEnabled) {\n+        this.restLoggerEnabled = restLoggerEnabled;\n+        this.formatter = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n+        this.formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n+        Date start = new Date(System.currentTimeMillis());\n+        ContentCachingRequestWrapper wrappedRequest = getWrappedRequest(request);\n+        ContentCachingResponseWrapper wrappedResponse = getWrappedResponse(response);\n+\n+        filterChain.doFilter(wrappedRequest, wrappedResponse);\n+\n+        if (restLoggerEnabled) {\n+            Date end = new Date(System.currentTimeMillis());\n+            String log = new StringBuilder()\n+                    .append(appendLine(RestLoggerField.START_TIME, formatter.format(start)))\n+                    .append(appendLine(RestLoggerField.END_TIME, formatter.format(end)))", "originalCommit": "07b4f9ccd76d372021ab531dd6687b82a5e0415c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMzA3Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r520603072", "bodyText": "on mow environment, the message part is reformatted inside a json, so technically it always using a json parser, does not matter what. is inside that. also from some time - because of this change: d0aad2d - the logs are joined based on some metadata informations not by '\\n' in the end of the docker logs events", "author": "oleewere", "createdAt": "2020-11-10T14:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MjAwMw=="}], "type": "inlineReview", "revised_code": {"commit": "88dd4706fe9d842a6bbb698adc49f99b88252e72", "chunk": "diff --git a/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java b/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java\nindex b8425a2590..e4b5054240 100644\n--- a/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java\n+++ b/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java\n\n@@ -23,16 +23,12 @@ import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n \n public class RestLoggerFilter extends OncePerRequestFilter {\n \n-    private final Logger logger = LoggerFactory.getLogger(getClass());\n-\n-    private final DateFormat formatter;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RestLoggerFilter.class);\n \n     private final boolean restLoggerEnabled;\n \n     public RestLoggerFilter(boolean restLoggerEnabled) {\n         this.restLoggerEnabled = restLoggerEnabled;\n-        this.formatter = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n-        this.formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3NTc3MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519875770", "bodyText": "Logging should be added here, just to ensure that we see if something is wrong...", "author": "akanto", "createdAt": "2020-11-09T14:57:29Z", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.util.ContentCachingRequestWrapper;\n+import org.springframework.web.util.ContentCachingResponseWrapper;\n+\n+import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n+\n+public class RestLoggerFilter extends OncePerRequestFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final DateFormat formatter;\n+\n+    private final boolean restLoggerEnabled;\n+\n+    public RestLoggerFilter(boolean restLoggerEnabled) {\n+        this.restLoggerEnabled = restLoggerEnabled;\n+        this.formatter = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n+        this.formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n+        Date start = new Date(System.currentTimeMillis());\n+        ContentCachingRequestWrapper wrappedRequest = getWrappedRequest(request);\n+        ContentCachingResponseWrapper wrappedResponse = getWrappedResponse(response);\n+\n+        filterChain.doFilter(wrappedRequest, wrappedResponse);\n+\n+        if (restLoggerEnabled) {\n+            Date end = new Date(System.currentTimeMillis());\n+            String log = new StringBuilder()\n+                    .append(appendLine(RestLoggerField.START_TIME, formatter.format(start)))\n+                    .append(appendLine(RestLoggerField.END_TIME, formatter.format(end)))\n+                    .append(appendLine(RestLoggerField.DURATION, Math.abs(end.getTime() - start.getTime()) + \" ms\"))\n+                    .append(appendLine(RestLoggerField.HTTP_METHOD, request.getMethod()))\n+                    .append(appendLine(RestLoggerField.PATH, request.getRequestURI()))\n+                    .append(appendLine(RestLoggerField.QUERY_STRING, request.getQueryString()))\n+                    .append(appendLine(RestLoggerField.CLIENT_IP, request.getRemoteAddr()))\n+                    .append(appendLine(RestLoggerField.REQUEST,\n+                            logContent(wrappedRequest.getContentAsByteArray(), request.getCharacterEncoding())))\n+                    .append(appendLine(RestLoggerField.RESPONSE_STATUS, String.valueOf(response.getStatus())))\n+                    .append(appendLine(RestLoggerField.RESPONSE,\n+                            logContent(wrappedResponse.getContentAsByteArray(), request.getCharacterEncoding())))\n+                    .toString();\n+            logger.debug(log);\n+        }\n+        wrappedResponse.copyBodyToResponse();\n+    }\n+\n+    @NotNull\n+    private ContentCachingResponseWrapper getWrappedResponse(HttpServletResponse response) {\n+        return new ContentCachingResponseWrapper(response);\n+    }\n+\n+    @NotNull\n+    private ContentCachingRequestWrapper getWrappedRequest(HttpServletRequest request) {\n+        return new ContentCachingRequestWrapper(request);\n+    }\n+\n+    private static String logContent(byte[] content, String contentEncoding) {\n+        String contentString;\n+        try {\n+            contentString = new String(content, contentEncoding);\n+        } catch (UnsupportedEncodingException e) {\n+            contentString = \"\";", "originalCommit": "07b4f9ccd76d372021ab531dd6687b82a5e0415c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg4MDc2OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519880768", "bodyText": "fair point thanks", "author": "doktoric", "createdAt": "2020-11-09T15:04:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3NTc3MA=="}], "type": "inlineReview", "revised_code": {"commit": "88dd4706fe9d842a6bbb698adc49f99b88252e72", "chunk": "diff --git a/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java b/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java\nindex b8425a2590..e4b5054240 100644\n--- a/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java\n+++ b/common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java\n\n@@ -23,16 +23,12 @@ import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n \n public class RestLoggerFilter extends OncePerRequestFilter {\n \n-    private final Logger logger = LoggerFactory.getLogger(getClass());\n-\n-    private final DateFormat formatter;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RestLoggerFilter.class);\n \n     private final boolean restLoggerEnabled;\n \n     public RestLoggerFilter(boolean restLoggerEnabled) {\n         this.restLoggerEnabled = restLoggerEnabled;\n-        this.formatter = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n-        this.formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n     }\n \n     @Override\n"}}, {"oid": "88dd4706fe9d842a6bbb698adc49f99b88252e72", "url": "https://github.com/hortonworks/cloudbreak/commit/88dd4706fe9d842a6bbb698adc49f99b88252e72", "message": "CB-9625 enable rest logging on request response pairs. This using a new filter where we can enable on deployment level this logging. RestLoggerFilter can be improved with new fields if we need that.", "committedDate": "2020-11-09T15:04:59Z", "type": "forcePushed"}, {"oid": "b8110296d75dabcb72c51e48f2a94d9e402c7047", "url": "https://github.com/hortonworks/cloudbreak/commit/b8110296d75dabcb72c51e48f2a94d9e402c7047", "message": "CB-9625 enable rest logging on request response pairs. This using a new filter where we can enable on deployment level this logging. RestLoggerFilter can be improved with new fields if we need that.", "committedDate": "2020-11-10T13:34:02Z", "type": "commit"}, {"oid": "b8110296d75dabcb72c51e48f2a94d9e402c7047", "url": "https://github.com/hortonworks/cloudbreak/commit/b8110296d75dabcb72c51e48f2a94d9e402c7047", "message": "CB-9625 enable rest logging on request response pairs. This using a new filter where we can enable on deployment level this logging. RestLoggerFilter can be improved with new fields if we need that.", "committedDate": "2020-11-10T13:34:02Z", "type": "forcePushed"}]}