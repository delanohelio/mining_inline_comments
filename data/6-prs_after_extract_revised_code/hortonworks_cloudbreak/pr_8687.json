{"pr_number": 8687, "pr_title": "[CB-8188] Add Medium Duty HA Entitlement enforcement", "pr_createdAt": "2020-07-31T18:34:56Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8687", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4Mjc1NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463782755", "bodyText": "This is not needed.", "author": "frozenwizard", "createdAt": "2020-07-31T19:07:41Z", "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterResponse.java", "diffHunk": "@@ -37,14 +37,17 @@\n \n     private boolean rangerRazEnabled;\n \n+    private boolean mediumDutyHAEnabled;", "originalCommit": "1e5a0ad9189555e6b54865360dc1d2825ca70d11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "75788a241a8e8704bc97b7b1a5144c7b0ea44a90", "chunk": "diff --git a/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterResponse.java b/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterResponse.java\nindex 5bfa3b6e22..4f3249c1c3 100644\n--- a/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterResponse.java\n+++ b/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterResponse.java\n\n@@ -37,8 +37,6 @@ public class SdxClusterResponse implements ResourceCrnAwareApiModel {\n \n     private boolean rangerRazEnabled;\n \n-    private boolean mediumDutyHAEnabled;\n-\n     public SdxClusterResponse() {\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4NTA2NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463785065", "bodyText": "Yea this doesn't need to be part of the response.  Remove it for the other files.", "author": "frozenwizard", "createdAt": "2020-07-31T19:13:04Z", "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterDetailResponse.java", "diffHunk": "@@ -18,7 +18,8 @@ public SdxClusterDetailResponse(SdxClusterResponse sdxClusterResponse, StackV4Re\n                 sdxClusterResponse.getEnvironmentCrn(), sdxClusterResponse.getStackCrn(),\n                 sdxClusterResponse.getClusterShape(), sdxClusterResponse.getCloudStorageBaseLocation(),\n                 sdxClusterResponse.getCloudStorageFileSystemType(), sdxClusterResponse.getRuntime(),\n-                sdxClusterResponse.getRangerRazEnabled());\n+                sdxClusterResponse.getRangerRazEnabled(),", "originalCommit": "1e5a0ad9189555e6b54865360dc1d2825ca70d11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "75788a241a8e8704bc97b7b1a5144c7b0ea44a90", "chunk": "diff --git a/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterDetailResponse.java b/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterDetailResponse.java\nindex 6addaa805a..c30c119e3c 100644\n--- a/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterDetailResponse.java\n+++ b/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterDetailResponse.java\n\n@@ -18,8 +18,7 @@ public class SdxClusterDetailResponse extends SdxClusterResponse implements Tagg\n                 sdxClusterResponse.getEnvironmentCrn(), sdxClusterResponse.getStackCrn(),\n                 sdxClusterResponse.getClusterShape(), sdxClusterResponse.getCloudStorageBaseLocation(),\n                 sdxClusterResponse.getCloudStorageFileSystemType(), sdxClusterResponse.getRuntime(),\n-                sdxClusterResponse.getRangerRazEnabled(),\n-                sdxClusterResponse.getMediumDutyHAEnabled());\n+                sdxClusterResponse.getRangerRazEnabled());\n         this.stackV4Response = stackV4Response;\n     }\n \n"}}, {"oid": "75788a241a8e8704bc97b7b1a5144c7b0ea44a90", "url": "https://github.com/hortonworks/cloudbreak/commit/75788a241a8e8704bc97b7b1a5144c7b0ea44a90", "message": "[CB-8188] Added medium duty ha entitlement capabilities and tests to SDX cluster creation logic", "committedDate": "2020-07-31T19:16:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwNDkyOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463804929", "bodyText": "I don't understand why we need this? Shouldn't you just check if the cluster shape is Medium Duty?", "author": "kmanamcheri", "createdAt": "2020-07-31T19:58:12Z", "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterRequest.java", "diffHunk": "@@ -108,4 +110,12 @@ public boolean isEnableRangerRaz() {\n     public void setEnableRangerRaz(boolean enableRangerRaz) {\n         this.enableRangerRaz = enableRangerRaz;\n     }\n+\n+    public boolean isEnableMediumDutyHA() {", "originalCommit": "75788a241a8e8704bc97b7b1a5144c7b0ea44a90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxMTQ3MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463811470", "bodyText": "yeah, good point.", "author": "atxmemo", "createdAt": "2020-07-31T20:07:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwNDkyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "68ef59118ceb6d99c474b9544a034c9debad3924", "chunk": "diff --git a/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterRequest.java b/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterRequest.java\nindex 65db179f90..00c03a2287 100644\n--- a/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterRequest.java\n+++ b/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterRequest.java\n\n@@ -110,12 +108,4 @@ public class SdxClusterRequest implements TaggableRequest {\n     public void setEnableRangerRaz(boolean enableRangerRaz) {\n         this.enableRangerRaz = enableRangerRaz;\n     }\n-\n-    public boolean isEnableMediumDutyHA() {\n-        return enableMediumDutyHA;\n-    }\n-\n-    public void setEnableMediumDutyHA(boolean enableMediumDutyHA) {\n-        this.enableMediumDutyHA = enableMediumDutyHA;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwNTIwMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463805200", "bodyText": "Shouldn't this check if the cluster shape requested is medium duty? If it is, then you validate that you have the entitlement.", "author": "kmanamcheri", "createdAt": "2020-07-31T19:58:47Z", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java", "diffHunk": "@@ -452,6 +453,24 @@ private void validateRazEnablement(SdxClusterRequest sdxClusterRequest, Detailed\n         }\n     }\n \n+    private void validateMediumDutyHaEnablement(SdxClusterRequest sdxClusterRequest, DetailedEnvironmentResponse environment) {\n+        ValidationResultBuilder validationBuilder = new ValidationResultBuilder();\n+        if (sdxClusterRequest.isEnableMediumDutyHA()) {", "originalCommit": "75788a241a8e8704bc97b7b1a5144c7b0ea44a90", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68ef59118ceb6d99c474b9544a034c9debad3924", "chunk": "diff --git a/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java b/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java\nindex 1ca4e21173..c0c8d47453 100644\n--- a/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java\n+++ b/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java\n\n@@ -455,7 +455,7 @@ public class SdxService implements ResourceIdProvider, ResourceBasedCrnProvider\n \n     private void validateMediumDutyHaEnablement(SdxClusterRequest sdxClusterRequest, DetailedEnvironmentResponse environment) {\n         ValidationResultBuilder validationBuilder = new ValidationResultBuilder();\n-        if (sdxClusterRequest.isEnableMediumDutyHA()) {\n+        if (sdxClusterRequest.getClusterShape().equals(SdxClusterShape.MEDIUM_DUTY_HA)) {\n             boolean mediumDutyHAEntitlementEnabled = entitlementService.mediumDutyHAEnabled(environment.getCreator(),\n                     Crn.safeFromString(environment.getCreator()).getAccountId());\n             if (!mediumDutyHAEntitlementEnabled) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwNTE0Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463805147", "bodyText": "Remove all changes in this file.  As discussed, the SdxClusterShape says whether or not it is light, custom or medium.", "author": "frozenwizard", "createdAt": "2020-07-31T19:58:40Z", "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterRequest.java", "diffHunk": "@@ -29,6 +29,8 @@\n \n     private boolean enableRangerRaz;\n \n+    private boolean enableMediumDutyHA;", "originalCommit": "75788a241a8e8704bc97b7b1a5144c7b0ea44a90", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68ef59118ceb6d99c474b9544a034c9debad3924", "chunk": "diff --git a/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterRequest.java b/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterRequest.java\nindex 65db179f90..00c03a2287 100644\n--- a/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterRequest.java\n+++ b/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterRequest.java\n\n@@ -29,8 +29,6 @@ public class SdxClusterRequest implements TaggableRequest {\n \n     private boolean enableRangerRaz;\n \n-    private boolean enableMediumDutyHA;\n-\n     public String getEnvironment() {\n         return environment;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwNTQ5Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463805497", "bodyText": "Here compare the sdxClusterRequest.sdxclustershape to SDXClusterShape.MEDIUM_DUTY_HA", "author": "frozenwizard", "createdAt": "2020-07-31T19:59:26Z", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java", "diffHunk": "@@ -452,6 +453,24 @@ private void validateRazEnablement(SdxClusterRequest sdxClusterRequest, Detailed\n         }\n     }\n \n+    private void validateMediumDutyHaEnablement(SdxClusterRequest sdxClusterRequest, DetailedEnvironmentResponse environment) {\n+        ValidationResultBuilder validationBuilder = new ValidationResultBuilder();\n+        if (sdxClusterRequest.isEnableMediumDutyHA()) {", "originalCommit": "75788a241a8e8704bc97b7b1a5144c7b0ea44a90", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68ef59118ceb6d99c474b9544a034c9debad3924", "chunk": "diff --git a/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java b/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java\nindex 1ca4e21173..c0c8d47453 100644\n--- a/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java\n+++ b/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java\n\n@@ -455,7 +455,7 @@ public class SdxService implements ResourceIdProvider, ResourceBasedCrnProvider\n \n     private void validateMediumDutyHaEnablement(SdxClusterRequest sdxClusterRequest, DetailedEnvironmentResponse environment) {\n         ValidationResultBuilder validationBuilder = new ValidationResultBuilder();\n-        if (sdxClusterRequest.isEnableMediumDutyHA()) {\n+        if (sdxClusterRequest.getClusterShape().equals(SdxClusterShape.MEDIUM_DUTY_HA)) {\n             boolean mediumDutyHAEntitlementEnabled = entitlementService.mediumDutyHAEnabled(environment.getCreator(),\n                     Crn.safeFromString(environment.getCreator()).getAccountId());\n             if (!mediumDutyHAEntitlementEnabled) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwNjMyMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463806321", "bodyText": "remove.", "author": "frozenwizard", "createdAt": "2020-07-31T20:00:46Z", "path": "datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java", "diffHunk": "@@ -624,6 +625,100 @@ void testSdxCreateRazEnabled720Runtime() {\n         assertEquals(\"1. Provisioning Ranger Raz is only valid for CM version > 7.2.1 and not 7.2.0\", badRequestException.getMessage());\n     }\n \n+    @Test\n+    void testSdxCreateMediumDutyHAEnabled() throws IOException, TransactionExecutionException {\n+        final String runtime = \"7.2.2\";\n+        when(transactionService.required(isA(Supplier.class))).thenAnswer(invocation -> invocation.getArgument(0, Supplier.class).get());\n+        String lightDutyJson = FileReaderUtils.readFileFromClasspath(\"/runtime/\" + runtime + \"/aws/medium_duty_ha.json\");\n+        when(cdpConfigService.getConfigForKey(any())).thenReturn(JsonUtil.readValue(lightDutyJson, StackV4Request.class));\n+        when(sdxReactorFlowManager.triggerSdxCreation(any())).thenReturn(new FlowIdentifier(FlowType.FLOW, \"FLOW_ID\"));\n+        SdxClusterRequest sdxClusterRequest = new SdxClusterRequest();\n+        sdxClusterRequest.setRuntime(runtime);\n+        sdxClusterRequest.setClusterShape(MEDIUM_DUTY_HA);\n+        Map<String, String> tags = new HashMap<>();\n+        tags.put(\"mytag\", \"tagecske\");\n+        sdxClusterRequest.addTags(tags);\n+        sdxClusterRequest.setEnvironment(\"envir\");\n+        when(sdxClusterRepository.findByAccountIdAndEnvNameAndDeletedIsNull(anyString(), anyString())).thenReturn(new ArrayList<>());\n+        long id = 10L;\n+        when(sdxClusterRepository.save(any(SdxCluster.class))).thenAnswer(invocation -> {\n+            SdxCluster sdxWithId = invocation.getArgument(0, SdxCluster.class);\n+            sdxWithId.setId(id);\n+            return sdxWithId;\n+        });\n+        when(clock.getCurrentTimeMillis()).thenReturn(1L);\n+        mockEnvironmentCall(sdxClusterRequest, CloudPlatform.AWS);\n+        sdxClusterRequest.setEnableMediumDutyHA(true);", "originalCommit": "75788a241a8e8704bc97b7b1a5144c7b0ea44a90", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68ef59118ceb6d99c474b9544a034c9debad3924", "chunk": "diff --git a/datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java b/datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java\nindex aaa7caa0e5..4a008fe353 100644\n--- a/datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java\n+++ b/datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java\n\n@@ -648,7 +648,6 @@ class SdxServiceTest {\n         });\n         when(clock.getCurrentTimeMillis()).thenReturn(1L);\n         mockEnvironmentCall(sdxClusterRequest, CloudPlatform.AWS);\n-        sdxClusterRequest.setEnableMediumDutyHA(true);\n         when(entitlementService.mediumDutyHAEnabled(anyString(), anyString())).thenReturn(true);\n         Pair<SdxCluster, FlowIdentifier> result = underTest.createSdx(USER_CRN, CLUSTER_NAME, sdxClusterRequest, null);\n         SdxCluster createdSdxCluster = result.getLeft();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwNjU0NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463806545", "bodyText": "remove", "author": "frozenwizard", "createdAt": "2020-07-31T20:01:05Z", "path": "datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java", "diffHunk": "@@ -624,6 +625,100 @@ void testSdxCreateRazEnabled720Runtime() {\n         assertEquals(\"1. Provisioning Ranger Raz is only valid for CM version > 7.2.1 and not 7.2.0\", badRequestException.getMessage());\n     }\n \n+    @Test\n+    void testSdxCreateMediumDutyHAEnabled() throws IOException, TransactionExecutionException {\n+        final String runtime = \"7.2.2\";\n+        when(transactionService.required(isA(Supplier.class))).thenAnswer(invocation -> invocation.getArgument(0, Supplier.class).get());\n+        String lightDutyJson = FileReaderUtils.readFileFromClasspath(\"/runtime/\" + runtime + \"/aws/medium_duty_ha.json\");\n+        when(cdpConfigService.getConfigForKey(any())).thenReturn(JsonUtil.readValue(lightDutyJson, StackV4Request.class));\n+        when(sdxReactorFlowManager.triggerSdxCreation(any())).thenReturn(new FlowIdentifier(FlowType.FLOW, \"FLOW_ID\"));\n+        SdxClusterRequest sdxClusterRequest = new SdxClusterRequest();\n+        sdxClusterRequest.setRuntime(runtime);\n+        sdxClusterRequest.setClusterShape(MEDIUM_DUTY_HA);\n+        Map<String, String> tags = new HashMap<>();\n+        tags.put(\"mytag\", \"tagecske\");\n+        sdxClusterRequest.addTags(tags);\n+        sdxClusterRequest.setEnvironment(\"envir\");\n+        when(sdxClusterRepository.findByAccountIdAndEnvNameAndDeletedIsNull(anyString(), anyString())).thenReturn(new ArrayList<>());\n+        long id = 10L;\n+        when(sdxClusterRepository.save(any(SdxCluster.class))).thenAnswer(invocation -> {\n+            SdxCluster sdxWithId = invocation.getArgument(0, SdxCluster.class);\n+            sdxWithId.setId(id);\n+            return sdxWithId;\n+        });\n+        when(clock.getCurrentTimeMillis()).thenReturn(1L);\n+        mockEnvironmentCall(sdxClusterRequest, CloudPlatform.AWS);\n+        sdxClusterRequest.setEnableMediumDutyHA(true);\n+        when(entitlementService.mediumDutyHAEnabled(anyString(), anyString())).thenReturn(true);\n+        Pair<SdxCluster, FlowIdentifier> result = underTest.createSdx(USER_CRN, CLUSTER_NAME, sdxClusterRequest, null);\n+        SdxCluster createdSdxCluster = result.getLeft();\n+        Assertions.assertEquals(id, createdSdxCluster.getId());\n+        final ArgumentCaptor<SdxCluster> captor = ArgumentCaptor.forClass(SdxCluster.class);\n+        verify(sdxClusterRepository, times(1)).save(captor.capture());\n+        SdxCluster capturedSdx = captor.getValue();\n+        assertTrue(capturedSdx.getClusterShape().equals(MEDIUM_DUTY_HA));\n+    }\n+\n+    @Test\n+    void testSdxCreateMediumDutyHANoEntitlement() throws IOException {\n+        final String runtime = \"7.2.2\";\n+        SdxClusterRequest sdxClusterRequest = new SdxClusterRequest();\n+        sdxClusterRequest.setRuntime(runtime);\n+        sdxClusterRequest.setClusterShape(MEDIUM_DUTY_HA);\n+        Map<String, String> tags = new HashMap<>();\n+        tags.put(\"mytag\", \"tagecske\");\n+        sdxClusterRequest.addTags(tags);\n+        sdxClusterRequest.setEnvironment(\"envir\");\n+        when(sdxClusterRepository.findByAccountIdAndEnvNameAndDeletedIsNull(anyString(), anyString())).thenReturn(new ArrayList<>());\n+        long id = 10L;\n+        mockEnvironmentCall(sdxClusterRequest, CloudPlatform.AWS);\n+        sdxClusterRequest.setEnableMediumDutyHA(true);", "originalCommit": "75788a241a8e8704bc97b7b1a5144c7b0ea44a90", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68ef59118ceb6d99c474b9544a034c9debad3924", "chunk": "diff --git a/datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java b/datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java\nindex aaa7caa0e5..4a008fe353 100644\n--- a/datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java\n+++ b/datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java\n\n@@ -648,7 +648,6 @@ class SdxServiceTest {\n         });\n         when(clock.getCurrentTimeMillis()).thenReturn(1L);\n         mockEnvironmentCall(sdxClusterRequest, CloudPlatform.AWS);\n-        sdxClusterRequest.setEnableMediumDutyHA(true);\n         when(entitlementService.mediumDutyHAEnabled(anyString(), anyString())).thenReturn(true);\n         Pair<SdxCluster, FlowIdentifier> result = underTest.createSdx(USER_CRN, CLUSTER_NAME, sdxClusterRequest, null);\n         SdxCluster createdSdxCluster = result.getLeft();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwNjk4NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463806985", "bodyText": "remove", "author": "frozenwizard", "createdAt": "2020-07-31T20:01:39Z", "path": "datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java", "diffHunk": "@@ -624,6 +625,100 @@ void testSdxCreateRazEnabled720Runtime() {\n         assertEquals(\"1. Provisioning Ranger Raz is only valid for CM version > 7.2.1 and not 7.2.0\", badRequestException.getMessage());\n     }\n \n+    @Test\n+    void testSdxCreateMediumDutyHAEnabled() throws IOException, TransactionExecutionException {\n+        final String runtime = \"7.2.2\";\n+        when(transactionService.required(isA(Supplier.class))).thenAnswer(invocation -> invocation.getArgument(0, Supplier.class).get());\n+        String lightDutyJson = FileReaderUtils.readFileFromClasspath(\"/runtime/\" + runtime + \"/aws/medium_duty_ha.json\");\n+        when(cdpConfigService.getConfigForKey(any())).thenReturn(JsonUtil.readValue(lightDutyJson, StackV4Request.class));\n+        when(sdxReactorFlowManager.triggerSdxCreation(any())).thenReturn(new FlowIdentifier(FlowType.FLOW, \"FLOW_ID\"));\n+        SdxClusterRequest sdxClusterRequest = new SdxClusterRequest();\n+        sdxClusterRequest.setRuntime(runtime);\n+        sdxClusterRequest.setClusterShape(MEDIUM_DUTY_HA);\n+        Map<String, String> tags = new HashMap<>();\n+        tags.put(\"mytag\", \"tagecske\");\n+        sdxClusterRequest.addTags(tags);\n+        sdxClusterRequest.setEnvironment(\"envir\");\n+        when(sdxClusterRepository.findByAccountIdAndEnvNameAndDeletedIsNull(anyString(), anyString())).thenReturn(new ArrayList<>());\n+        long id = 10L;\n+        when(sdxClusterRepository.save(any(SdxCluster.class))).thenAnswer(invocation -> {\n+            SdxCluster sdxWithId = invocation.getArgument(0, SdxCluster.class);\n+            sdxWithId.setId(id);\n+            return sdxWithId;\n+        });\n+        when(clock.getCurrentTimeMillis()).thenReturn(1L);\n+        mockEnvironmentCall(sdxClusterRequest, CloudPlatform.AWS);\n+        sdxClusterRequest.setEnableMediumDutyHA(true);\n+        when(entitlementService.mediumDutyHAEnabled(anyString(), anyString())).thenReturn(true);\n+        Pair<SdxCluster, FlowIdentifier> result = underTest.createSdx(USER_CRN, CLUSTER_NAME, sdxClusterRequest, null);\n+        SdxCluster createdSdxCluster = result.getLeft();\n+        Assertions.assertEquals(id, createdSdxCluster.getId());\n+        final ArgumentCaptor<SdxCluster> captor = ArgumentCaptor.forClass(SdxCluster.class);\n+        verify(sdxClusterRepository, times(1)).save(captor.capture());\n+        SdxCluster capturedSdx = captor.getValue();\n+        assertTrue(capturedSdx.getClusterShape().equals(MEDIUM_DUTY_HA));\n+    }\n+\n+    @Test\n+    void testSdxCreateMediumDutyHANoEntitlement() throws IOException {\n+        final String runtime = \"7.2.2\";\n+        SdxClusterRequest sdxClusterRequest = new SdxClusterRequest();\n+        sdxClusterRequest.setRuntime(runtime);\n+        sdxClusterRequest.setClusterShape(MEDIUM_DUTY_HA);\n+        Map<String, String> tags = new HashMap<>();\n+        tags.put(\"mytag\", \"tagecske\");\n+        sdxClusterRequest.addTags(tags);\n+        sdxClusterRequest.setEnvironment(\"envir\");\n+        when(sdxClusterRepository.findByAccountIdAndEnvNameAndDeletedIsNull(anyString(), anyString())).thenReturn(new ArrayList<>());\n+        long id = 10L;\n+        mockEnvironmentCall(sdxClusterRequest, CloudPlatform.AWS);\n+        sdxClusterRequest.setEnableMediumDutyHA(true);\n+        when(entitlementService.mediumDutyHAEnabled(anyString(), anyString())).thenReturn(false);\n+        BadRequestException badRequestException = assertThrows(BadRequestException.class,\n+                () -> underTest.createSdx(USER_CRN, CLUSTER_NAME, sdxClusterRequest, null));\n+        assertEquals(\"1. Provisioning a Medium Duty HA shape is not enabled for this account.\", badRequestException.getMessage());\n+    }\n+\n+    @Test\n+    void testSdxCreateMediumDutyHAEnabled710Runtime() {\n+        final String invalidRuntime = \"7.1.0\";\n+        SdxClusterRequest sdxClusterRequest = new SdxClusterRequest();\n+        sdxClusterRequest.setRuntime(invalidRuntime);\n+        sdxClusterRequest.setClusterShape(MEDIUM_DUTY_HA);\n+        Map<String, String> tags = new HashMap<>();\n+        tags.put(\"mytag\", \"tagecske\");\n+        sdxClusterRequest.addTags(tags);\n+        sdxClusterRequest.setEnvironment(\"envir\");\n+        when(sdxClusterRepository.findByAccountIdAndEnvNameAndDeletedIsNull(anyString(), anyString())).thenReturn(new ArrayList<>());\n+        long id = 10L;\n+        mockEnvironmentCall(sdxClusterRequest, CloudPlatform.AWS);\n+        sdxClusterRequest.setEnableMediumDutyHA(true);\n+        when(entitlementService.mediumDutyHAEnabled(anyString(), anyString())).thenReturn(true);\n+        BadRequestException badRequestException = assertThrows(BadRequestException.class,\n+                () -> underTest.createSdx(USER_CRN, CLUSTER_NAME, sdxClusterRequest, null));\n+        assertEquals(\"1. Provisioning a Medium Duty HA shape is only valid for CM version > 7.2.2 and not \" + invalidRuntime, badRequestException.getMessage());\n+    }\n+\n+    @Test\n+    void testSdxCreateMediumDutyHAEnabled720Runtime() {\n+        final String invalidRuntime = \"7.2.0\";\n+        SdxClusterRequest sdxClusterRequest = new SdxClusterRequest();\n+        sdxClusterRequest.setRuntime(invalidRuntime);\n+        sdxClusterRequest.setClusterShape(MEDIUM_DUTY_HA);\n+        Map<String, String> tags = new HashMap<>();\n+        tags.put(\"mytag\", \"tagecske\");\n+        sdxClusterRequest.addTags(tags);\n+        sdxClusterRequest.setEnvironment(\"envir\");\n+        when(sdxClusterRepository.findByAccountIdAndEnvNameAndDeletedIsNull(anyString(), anyString())).thenReturn(new ArrayList<>());\n+        long id = 10L;\n+        mockEnvironmentCall(sdxClusterRequest, CloudPlatform.AWS);\n+        sdxClusterRequest.setEnableMediumDutyHA(true);", "originalCommit": "75788a241a8e8704bc97b7b1a5144c7b0ea44a90", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68ef59118ceb6d99c474b9544a034c9debad3924", "chunk": "diff --git a/datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java b/datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java\nindex aaa7caa0e5..4a008fe353 100644\n--- a/datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java\n+++ b/datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java\n\n@@ -648,7 +648,6 @@ class SdxServiceTest {\n         });\n         when(clock.getCurrentTimeMillis()).thenReturn(1L);\n         mockEnvironmentCall(sdxClusterRequest, CloudPlatform.AWS);\n-        sdxClusterRequest.setEnableMediumDutyHA(true);\n         when(entitlementService.mediumDutyHAEnabled(anyString(), anyString())).thenReturn(true);\n         Pair<SdxCluster, FlowIdentifier> result = underTest.createSdx(USER_CRN, CLUSTER_NAME, sdxClusterRequest, null);\n         SdxCluster createdSdxCluster = result.getLeft();\n"}}, {"oid": "68ef59118ceb6d99c474b9544a034c9debad3924", "url": "https://github.com/hortonworks/cloudbreak/commit/68ef59118ceb6d99c474b9544a034c9debad3924", "message": "[CB-8188] Added medium duty ha entitlement capabilities and tests to SDX cluster creation logic", "committedDate": "2020-07-31T20:06:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyMTM0MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463821340", "bodyText": "Swap this around, cluster shape could be null and thus null.equals throws a npe.", "author": "frozenwizard", "createdAt": "2020-07-31T20:31:23Z", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java", "diffHunk": "@@ -452,6 +453,24 @@ private void validateRazEnablement(SdxClusterRequest sdxClusterRequest, Detailed\n         }\n     }\n \n+    private void validateMediumDutyHaEnablement(SdxClusterRequest sdxClusterRequest, DetailedEnvironmentResponse environment) {\n+        ValidationResultBuilder validationBuilder = new ValidationResultBuilder();\n+        if (sdxClusterRequest.getClusterShape().equals(SdxClusterShape.MEDIUM_DUTY_HA)) {", "originalCommit": "68ef59118ceb6d99c474b9544a034c9debad3924", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78162d0830233a3718ac8aff4e42f98f1028032b", "chunk": "diff --git a/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java b/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java\nindex c0c8d47453..435603e3c0 100644\n--- a/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java\n+++ b/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java\n\n@@ -455,7 +455,7 @@ public class SdxService implements ResourceIdProvider, ResourceBasedCrnProvider\n \n     private void validateMediumDutyHaEnablement(SdxClusterRequest sdxClusterRequest, DetailedEnvironmentResponse environment) {\n         ValidationResultBuilder validationBuilder = new ValidationResultBuilder();\n-        if (sdxClusterRequest.getClusterShape().equals(SdxClusterShape.MEDIUM_DUTY_HA)) {\n+        if (SdxClusterShape.MEDIUM_DUTY_HA.equals(sdxClusterRequest.getClusterShape())) {\n             boolean mediumDutyHAEntitlementEnabled = entitlementService.mediumDutyHAEnabled(environment.getCreator(),\n                     Crn.safeFromString(environment.getCreator()).getAccountId());\n             if (!mediumDutyHAEntitlementEnabled) {\n"}}, {"oid": "78162d0830233a3718ac8aff4e42f98f1028032b", "url": "https://github.com/hortonworks/cloudbreak/commit/78162d0830233a3718ac8aff4e42f98f1028032b", "message": "[CB-8188] Added medium duty ha entitlement capabilities and tests to SDX cluster creation logic", "committedDate": "2020-07-31T20:34:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDExODcwMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r464118702", "bodyText": "CDP_MEDIUM_DUTY_SDX ?", "author": "doktoric", "createdAt": "2020-08-02T20:13:24Z", "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/EntitlementService.java", "diffHunk": "@@ -41,6 +41,9 @@\n     @VisibleForTesting\n     static final String CDP_RAZ = \"CDP_RAZ\";\n \n+    @VisibleForTesting\n+    static final String CDP_MEDIUM_DUTY_HA = \"CDP_MEDIUM_DUTY_HA\";", "originalCommit": "78162d0830233a3718ac8aff4e42f98f1028032b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a82497200887da1b646ff49a429c41b0295ca2d6", "chunk": "diff --git a/auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/EntitlementService.java b/auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/EntitlementService.java\nindex 1e406c1000..5645a00431 100644\n--- a/auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/EntitlementService.java\n+++ b/auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/EntitlementService.java\n\n@@ -42,7 +42,7 @@ public class EntitlementService {\n     static final String CDP_RAZ = \"CDP_RAZ\";\n \n     @VisibleForTesting\n-    static final String CDP_MEDIUM_DUTY_HA = \"CDP_MEDIUM_DUTY_HA\";\n+    static final String CDP_MEDIUM_DUTY_SDX = \"CDP_MEDIUM_DUTY_SDX\";\n \n     @VisibleForTesting\n     static final String CDP_RUNTIME_UPGRADE = \"CDP_RUNTIME_UPGRADE\";\n"}}, {"oid": "a82497200887da1b646ff49a429c41b0295ca2d6", "url": "https://github.com/hortonworks/cloudbreak/commit/a82497200887da1b646ff49a429c41b0295ca2d6", "message": "[CB-8188] Added medium duty ha entitlement capabilities and tests to SDX cluster creation logic", "committedDate": "2020-08-03T15:00:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5ODczOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r464598738", "bodyText": "Is 7.2.2 supported? If so, then it should be \">=\" not \">\".", "author": "kmanamcheri", "createdAt": "2020-08-03T18:49:02Z", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java", "diffHunk": "@@ -452,6 +453,24 @@ private void validateRazEnablement(SdxClusterRequest sdxClusterRequest, Detailed\n         }\n     }\n \n+    private void validateMediumDutySdxEnablement(SdxClusterRequest sdxClusterRequest, DetailedEnvironmentResponse environment) {\n+        ValidationResultBuilder validationBuilder = new ValidationResultBuilder();\n+        if (SdxClusterShape.MEDIUM_DUTY_HA.equals(sdxClusterRequest.getClusterShape())) {\n+            boolean mediumDutySdxEntitlementEnabled = entitlementService.mediumDutySdxEnabled(environment.getCreator(),\n+                    Crn.safeFromString(environment.getCreator()).getAccountId());\n+            if (!mediumDutySdxEntitlementEnabled) {\n+                validationBuilder.error(\"Provisioning a Medium Duty SDX shape is not enabled for this account.\");\n+            }\n+            if (!isMediumDutySdxSupported(sdxClusterRequest.getRuntime())) {\n+                validationBuilder.error(\"Provisioning a Medium Duty SDX shape is only valid for CM version > 7.2.2 and not \" + sdxClusterRequest.getRuntime());", "originalCommit": "a82497200887da1b646ff49a429c41b0295ca2d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b6bddfcd5269a93de8f66fd141d4e101f14637e", "chunk": "diff --git a/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java b/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java\nindex 5597e18bee..f21e7468cf 100644\n--- a/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java\n+++ b/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java\n\n@@ -459,10 +459,11 @@ public class SdxService implements ResourceIdProvider, ResourceBasedCrnProvider\n             boolean mediumDutySdxEntitlementEnabled = entitlementService.mediumDutySdxEnabled(environment.getCreator(),\n                     Crn.safeFromString(environment.getCreator()).getAccountId());\n             if (!mediumDutySdxEntitlementEnabled) {\n-                validationBuilder.error(\"Provisioning a Medium Duty SDX shape is not enabled for this account.\");\n+                validationBuilder.error(\"Provisioning a medium duty data lake cluster is not enabled for this account. \" +\n+                        \"Contact Cloudera support to enable CDP_MEDIUM_DUTY_SDX entitlement for the account.\");\n             }\n             if (!isMediumDutySdxSupported(sdxClusterRequest.getRuntime())) {\n-                validationBuilder.error(\"Provisioning a Medium Duty SDX shape is only valid for CM version > 7.2.2 and not \" + sdxClusterRequest.getRuntime());\n+                validationBuilder.error(\"Provisioning a Medium Duty SDX shape is only valid for CM version >= 7.2.2 and not \" + sdxClusterRequest.getRuntime());\n             }\n         }\n         ValidationResult validationResult = validationBuilder.build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5OTQ0OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r464599448", "bodyText": "Improve this error message to state what entitlement should be enabled.\n\"Provisioning a medium duty data lake cluster is not enabled for this account. Contact Cloudera support to enable CDP_MEDIUM_DUTY_SDX entitlement for the account\"", "author": "kmanamcheri", "createdAt": "2020-08-03T18:50:27Z", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java", "diffHunk": "@@ -452,6 +453,24 @@ private void validateRazEnablement(SdxClusterRequest sdxClusterRequest, Detailed\n         }\n     }\n \n+    private void validateMediumDutySdxEnablement(SdxClusterRequest sdxClusterRequest, DetailedEnvironmentResponse environment) {\n+        ValidationResultBuilder validationBuilder = new ValidationResultBuilder();\n+        if (SdxClusterShape.MEDIUM_DUTY_HA.equals(sdxClusterRequest.getClusterShape())) {\n+            boolean mediumDutySdxEntitlementEnabled = entitlementService.mediumDutySdxEnabled(environment.getCreator(),\n+                    Crn.safeFromString(environment.getCreator()).getAccountId());\n+            if (!mediumDutySdxEntitlementEnabled) {\n+                validationBuilder.error(\"Provisioning a Medium Duty SDX shape is not enabled for this account.\");", "originalCommit": "a82497200887da1b646ff49a429c41b0295ca2d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b6bddfcd5269a93de8f66fd141d4e101f14637e", "chunk": "diff --git a/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java b/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java\nindex 5597e18bee..f21e7468cf 100644\n--- a/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java\n+++ b/datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java\n\n@@ -459,10 +459,11 @@ public class SdxService implements ResourceIdProvider, ResourceBasedCrnProvider\n             boolean mediumDutySdxEntitlementEnabled = entitlementService.mediumDutySdxEnabled(environment.getCreator(),\n                     Crn.safeFromString(environment.getCreator()).getAccountId());\n             if (!mediumDutySdxEntitlementEnabled) {\n-                validationBuilder.error(\"Provisioning a Medium Duty SDX shape is not enabled for this account.\");\n+                validationBuilder.error(\"Provisioning a medium duty data lake cluster is not enabled for this account. \" +\n+                        \"Contact Cloudera support to enable CDP_MEDIUM_DUTY_SDX entitlement for the account.\");\n             }\n             if (!isMediumDutySdxSupported(sdxClusterRequest.getRuntime())) {\n-                validationBuilder.error(\"Provisioning a Medium Duty SDX shape is only valid for CM version > 7.2.2 and not \" + sdxClusterRequest.getRuntime());\n+                validationBuilder.error(\"Provisioning a Medium Duty SDX shape is only valid for CM version >= 7.2.2 and not \" + sdxClusterRequest.getRuntime());\n             }\n         }\n         ValidationResult validationResult = validationBuilder.build();\n"}}, {"oid": "6b6bddfcd5269a93de8f66fd141d4e101f14637e", "url": "https://github.com/hortonworks/cloudbreak/commit/6b6bddfcd5269a93de8f66fd141d4e101f14637e", "message": "[CB-8188] Added medium duty ha entitlement capabilities and tests to SDX cluster creation logic", "committedDate": "2020-08-03T19:04:04Z", "type": "commit"}, {"oid": "6b6bddfcd5269a93de8f66fd141d4e101f14637e", "url": "https://github.com/hortonworks/cloudbreak/commit/6b6bddfcd5269a93de8f66fd141d4e101f14637e", "message": "[CB-8188] Added medium duty ha entitlement capabilities and tests to SDX cluster creation logic", "committedDate": "2020-08-03T19:04:04Z", "type": "forcePushed"}, {"oid": "eb521159c69f07a9b45929e0f8b46c41d478e15d", "url": "https://github.com/hortonworks/cloudbreak/commit/eb521159c69f07a9b45929e0f8b46c41d478e15d", "message": "Merge branch 'master' into CB-8188", "committedDate": "2020-08-04T16:30:41Z", "type": "commit"}, {"oid": "89e0da07524f88c36f2de773fafe2efe0b0357a8", "url": "https://github.com/hortonworks/cloudbreak/commit/89e0da07524f88c36f2de773fafe2efe0b0357a8", "message": "[CB-8188] Formatting", "committedDate": "2020-08-04T16:54:28Z", "type": "commit"}]}