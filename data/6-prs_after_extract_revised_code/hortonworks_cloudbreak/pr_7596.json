{"pr_number": 7596, "pr_title": "CB-6084 add verifyPermissions flag to credential", "pr_createdAt": "2020-03-16T15:13:17Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7596", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI4MDc3NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7596#discussion_r393280774", "bodyText": "as I see this method did not changed but in an other place. Can we put back to the original place? This is just noise in the PR", "author": "doktoric", "createdAt": "2020-03-16T20:04:44Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsCredentialConnector.java", "diffHunk": "@@ -135,11 +98,53 @@ private CloudCredentialStatus verifyAccessKeySecretKeyIsAssumable(CloudCredentia\n             LOGGER.warn(errorMessage, e);\n             return new CloudCredentialStatus(cloudCredential, CredentialStatus.FAILED, e, errorMessage);\n         }\n-        try {\n-            awsCredentialVerifier.validateAws(awsCredential);\n-        } catch (AwsPermissionMissingException e) {\n-            return new CloudCredentialStatus(cloudCredential, CredentialStatus.PERMISSIONS_MISSING, new Exception(e.getMessage()), e.getMessage());\n+        if (cloudCredential.isVerifyPermissions()) {\n+            try {\n+                awsCredentialVerifier.validateAws(awsCredential);\n+            } catch (AwsPermissionMissingException e) {\n+                return new CloudCredentialStatus(cloudCredential, CredentialStatus.PERMISSIONS_MISSING, new Exception(e.getMessage()), e.getMessage());\n+            }\n         }\n         return new CloudCredentialStatus(cloudCredential, CredentialStatus.VERIFIED);\n     }\n+\n+    @Override", "originalCommit": "36931967fea86a2e32c1511232dc2736418dfeb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ2MjYxNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7596#discussion_r393462614", "bodyText": "yes, idea rearranged the code and I didn't recognize, thanks", "author": "sodre90", "createdAt": "2020-03-17T06:12:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI4MDc3NA=="}], "type": "inlineReview", "revised_code": {"commit": "a3a908ff19b383e2abddd3b8f513a0a63294c76e", "chunk": "diff --git a/cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsCredentialConnector.java b/cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsCredentialConnector.java\nindex 956d78102a..9d8fd00ede 100644\n--- a/cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsCredentialConnector.java\n+++ b/cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsCredentialConnector.java\n\n@@ -107,44 +146,4 @@ public class AwsCredentialConnector implements CredentialConnector {\n         }\n         return new CloudCredentialStatus(cloudCredential, CredentialStatus.VERIFIED);\n     }\n-\n-    @Override\n-    public CloudCredentialStatus verify(AuthenticatedContext authenticatedContext) {\n-        CloudCredential credential = authenticatedContext.getCloudCredential();\n-        LOGGER.debug(\"Create credential: {}\", credential);\n-        AwsCredentialView awsCredential = credentialViewProvider.createAwsCredentialView(credential);\n-        String roleArn = awsCredential.getRoleArn();\n-        String accessKey = awsCredential.getAccessKey();\n-        String secretKey = awsCredential.getSecretKey();\n-        if (isNoneEmpty(roleArn, accessKey, secretKey)) {\n-            String message = \"Please only provide the 'role arn' or the 'access' and 'secret key'\";\n-            return new CloudCredentialStatus(credential, CredentialStatus.FAILED, new Exception(message), message);\n-        }\n-        if (isNotEmpty(roleArn)) {\n-            return verifyIamRoleIsAssumable(credential);\n-        }\n-        if (isEmpty(accessKey) || isEmpty(secretKey)) {\n-            String message = \"Please provide both the 'access' and 'secret key'\";\n-            return new CloudCredentialStatus(credential, CredentialStatus.FAILED, new Exception(message), message);\n-        } else {\n-            return verifyAccessKeySecretKeyIsAssumable(credential);\n-        }\n-    }\n-\n-    @Override\n-    public CloudCredentialStatus create(AuthenticatedContext auth) {\n-        return new CloudCredentialStatus(auth.getCloudCredential(), CredentialStatus.CREATED);\n-    }\n-\n-    @Override\n-    public CloudCredentialStatus delete(AuthenticatedContext auth) {\n-        return new CloudCredentialStatus(auth.getCloudCredential(), CredentialStatus.DELETED);\n-    }\n-\n-    @Override\n-    public CredentialPrerequisitesResponse getPrerequisites(CloudContext cloudContext, String externalId, String deploymentAddress) {\n-        AwsCredentialPrerequisites awsPrerequisites = new AwsCredentialPrerequisites(externalId, awsPlatformParameters.getCredentialPoliciesJson());\n-        return new CredentialPrerequisitesResponse(cloudContext.getPlatform().value(), accountId, awsPrerequisites);\n-    }\n-\n }\n"}}, {"oid": "fd5f3fe55d63fe6e844252f0fcd7aaf93fb12030", "url": "https://github.com/hortonworks/cloudbreak/commit/fd5f3fe55d63fe6e844252f0fcd7aaf93fb12030", "message": "CB-6084 add verifyPermissions flag to credential", "committedDate": "2020-03-17T06:06:01Z", "type": "forcePushed"}, {"oid": "a3a908ff19b383e2abddd3b8f513a0a63294c76e", "url": "https://github.com/hortonworks/cloudbreak/commit/a3a908ff19b383e2abddd3b8f513a0a63294c76e", "message": "CB-6084 add verifyPermissions flag to credential", "committedDate": "2020-03-17T06:10:51Z", "type": "commit"}, {"oid": "a3a908ff19b383e2abddd3b8f513a0a63294c76e", "url": "https://github.com/hortonworks/cloudbreak/commit/a3a908ff19b383e2abddd3b8f513a0a63294c76e", "message": "CB-6084 add verifyPermissions flag to credential", "committedDate": "2020-03-17T06:10:51Z", "type": "forcePushed"}]}