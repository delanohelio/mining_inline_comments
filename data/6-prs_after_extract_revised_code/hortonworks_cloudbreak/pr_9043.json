{"pr_number": 9043, "pr_title": "CB-8491 Structured event storing in FreeIPA Database. Flow and rest e\u2026", "pr_createdAt": "2020-09-18T18:53:04Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/9043", "timeline": [{"oid": "eef3f38cd4e55807629944790b6a4b54a472961b", "url": "https://github.com/hortonworks/cloudbreak/commit/eef3f38cd4e55807629944790b6a4b54a472961b", "message": "CB-8491 Structured event storing in FreeIPA Database. Flow and rest event added, notification is missing yet. Integration tests and unit tests added.", "committedDate": "2020-09-18T19:43:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyMDY0MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r491920640", "bodyText": "if stack is not found, is it ok to let the exception propagate?", "author": "lacikaaa", "createdAt": "2020-09-21T09:55:21Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CustomCrnOrNameProvider;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Component\n+public class FreeIpaCustomCrnOrNameProvider implements CustomCrnOrNameProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaCustomCrnOrNameProvider.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Override\n+    public void provide(RestCallDetails restCallDetails, CDPOperationDetails operationDetails, Map<String, String> restParams,\n+            String nameField, String crnField) {\n+        try {\n+            String requestUri = restCallDetails.getRestRequest().getRequestUri();\n+            URI uri = new URI(requestUri);\n+            List<NameValuePair> queryParams = URLEncodedUtils.parse(uri, StandardCharsets.UTF_8);\n+            Optional<NameValuePair> environmentValue = queryParams.stream().filter(p -> \"environment\".equals(p.getName())).findFirst();\n+            environmentValue.ifPresent(nameValuePair -> {\n+                String accountId = ThreadBasedUserCrnProvider.getAccountId();\n+                Stack stack = stackService.getByEnvironmentCrnAndAccountIdEvenIfTerminated(nameValuePair.getValue(), accountId);", "originalCommit": "eef3f38cd4e55807629944790b6a4b54a472961b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk0MTcyMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r491941722", "bodyText": "Yes, in this case, the structured event could not be created", "author": "topolyai5", "createdAt": "2020-09-21T10:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyMDY0MA=="}], "type": "inlineReview", "revised_code": {"commit": "ecfde6f943518d4a8870334458d25535cb1fad94", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java b/freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java\nindex 8a344ce1b0..6302dc62cc 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java\n\n@@ -1,54 +1,22 @@\n package com.sequenceiq.freeipa.events;\n \n-import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n-\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.nio.charset.StandardCharsets;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n \n import javax.inject.Inject;\n \n-import org.apache.http.NameValuePair;\n-import org.apache.http.client.utils.URLEncodedUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n-import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n-import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n-import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n-import com.sequenceiq.cloudbreak.structuredevent.rest.CustomCrnOrNameProvider;\n-import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResource;\n import com.sequenceiq.freeipa.service.stack.StackService;\n \n-@Component\n-public class FreeIpaCustomCrnOrNameProvider implements CustomCrnOrNameProvider {\n-\n-    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaCustomCrnOrNameProvider.class);\n+@Component(\"freeipaCustomCrnOrNameProvider\")\n+public class FreeIpaCustomCrnOrNameProvider extends AbstractCustomCrnOrNameProvider {\n \n     @Inject\n     private StackService stackService;\n \n     @Override\n-    public void provide(RestCallDetails restCallDetails, CDPOperationDetails operationDetails, Map<String, String> restParams,\n-            String nameField, String crnField) {\n-        try {\n-            String requestUri = restCallDetails.getRestRequest().getRequestUri();\n-            URI uri = new URI(requestUri);\n-            List<NameValuePair> queryParams = URLEncodedUtils.parse(uri, StandardCharsets.UTF_8);\n-            Optional<NameValuePair> environmentValue = queryParams.stream().filter(p -> \"environment\".equals(p.getName())).findFirst();\n-            environmentValue.ifPresent(nameValuePair -> {\n-                String accountId = ThreadBasedUserCrnProvider.getAccountId();\n-                Stack stack = stackService.getByEnvironmentCrnAndAccountIdEvenIfTerminated(nameValuePair.getValue(), accountId);\n-                restParams.put(nameField, stack.getName());\n-                restParams.put(crnField, stack.getResourceCrn());\n-                restParams.put(RESOURCE_ID, stack.getId().toString());\n-            });\n-        } catch (URISyntaxException e) {\n-            LOGGER.warn(\"Cannot provide name and crn because the uri is invalid or any error occurred: {}\", e.getMessage(), e);\n-        }\n+    protected List<? extends AccountAwareResource> getResource(String environmentCrn, String accountId) {\n+        return List.of(stackService.getByEnvironmentCrnAndAccountIdEvenIfTerminated(environmentCrn, accountId));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyNDc2Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r491924763", "bodyText": "unfortunately only FreeIpaV1Endpoint has environment in the URI, LDAP and Kerberos related endpoints have environmentCrn. I think those should be handled alse", "author": "lacikaaa", "createdAt": "2020-09-21T10:02:41Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CustomCrnOrNameProvider;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Component\n+public class FreeIpaCustomCrnOrNameProvider implements CustomCrnOrNameProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaCustomCrnOrNameProvider.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Override\n+    public void provide(RestCallDetails restCallDetails, CDPOperationDetails operationDetails, Map<String, String> restParams,\n+            String nameField, String crnField) {\n+        try {\n+            String requestUri = restCallDetails.getRestRequest().getRequestUri();\n+            URI uri = new URI(requestUri);\n+            List<NameValuePair> queryParams = URLEncodedUtils.parse(uri, StandardCharsets.UTF_8);\n+            Optional<NameValuePair> environmentValue = queryParams.stream().filter(p -> \"environment\".equals(p.getName())).findFirst();", "originalCommit": "eef3f38cd4e55807629944790b6a4b54a472961b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk0MjEwOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r491942109", "bodyText": "I love the consistency", "author": "topolyai5", "createdAt": "2020-09-21T10:33:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyNDc2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ecfde6f943518d4a8870334458d25535cb1fad94", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java b/freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java\nindex 8a344ce1b0..6302dc62cc 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java\n\n@@ -1,54 +1,22 @@\n package com.sequenceiq.freeipa.events;\n \n-import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n-\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.nio.charset.StandardCharsets;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n \n import javax.inject.Inject;\n \n-import org.apache.http.NameValuePair;\n-import org.apache.http.client.utils.URLEncodedUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n-import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n-import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n-import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n-import com.sequenceiq.cloudbreak.structuredevent.rest.CustomCrnOrNameProvider;\n-import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResource;\n import com.sequenceiq.freeipa.service.stack.StackService;\n \n-@Component\n-public class FreeIpaCustomCrnOrNameProvider implements CustomCrnOrNameProvider {\n-\n-    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaCustomCrnOrNameProvider.class);\n+@Component(\"freeipaCustomCrnOrNameProvider\")\n+public class FreeIpaCustomCrnOrNameProvider extends AbstractCustomCrnOrNameProvider {\n \n     @Inject\n     private StackService stackService;\n \n     @Override\n-    public void provide(RestCallDetails restCallDetails, CDPOperationDetails operationDetails, Map<String, String> restParams,\n-            String nameField, String crnField) {\n-        try {\n-            String requestUri = restCallDetails.getRestRequest().getRequestUri();\n-            URI uri = new URI(requestUri);\n-            List<NameValuePair> queryParams = URLEncodedUtils.parse(uri, StandardCharsets.UTF_8);\n-            Optional<NameValuePair> environmentValue = queryParams.stream().filter(p -> \"environment\".equals(p.getName())).findFirst();\n-            environmentValue.ifPresent(nameValuePair -> {\n-                String accountId = ThreadBasedUserCrnProvider.getAccountId();\n-                Stack stack = stackService.getByEnvironmentCrnAndAccountIdEvenIfTerminated(nameValuePair.getValue(), accountId);\n-                restParams.put(nameField, stack.getName());\n-                restParams.put(crnField, stack.getResourceCrn());\n-                restParams.put(RESOURCE_ID, stack.getId().toString());\n-            });\n-        } catch (URISyntaxException e) {\n-            LOGGER.warn(\"Cannot provide name and crn because the uri is invalid or any error occurred: {}\", e.getMessage(), e);\n-        }\n+    protected List<? extends AccountAwareResource> getResource(String environmentCrn, String accountId) {\n+        return List.of(stackService.getByEnvironmentCrnAndAccountIdEvenIfTerminated(environmentCrn, accountId));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyODg3Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r491928872", "bodyText": "refactor suggestion: break up into smaller methods\n    public void provide(RestCallDetails restCallDetails, CDPOperationDetails operationDetails, Map<String, String> restParams,\n            String nameField, String crnField) {\n        try {\n            Optional<NameValuePair> environmentValue = extractEnvironmentValue(restCallDetails);\n            environmentValue.ifPresent(nameValuePair -> updateRestParams(restParams, nameField, crnField, nameValuePair));\n        } catch (URISyntaxException e) {\n            LOGGER.warn(\"Cannot provide name and crn because the uri is invalid or any error occurred: {}\", e.getMessage(), e);\n        }\n    }\n\n    private void updateRestParams(Map<String, String> restParams, String nameField, String crnField, NameValuePair nameValuePair) {\n        String accountId = ThreadBasedUserCrnProvider.getAccountId();\n        Stack stack = stackService.getByEnvironmentCrnAndAccountIdEvenIfTerminated(nameValuePair.getValue(), accountId);\n        restParams.put(nameField, stack.getName());\n        restParams.put(crnField, stack.getResourceCrn());\n        restParams.put(RESOURCE_ID, stack.getId().toString());\n    }\n\n    private Optional<NameValuePair> extractEnvironmentValue(RestCallDetails restCallDetails) throws URISyntaxException {\n        String requestUri = restCallDetails.getRestRequest().getRequestUri();\n        URI uri = new URI(requestUri);\n        List<NameValuePair> queryParams = URLEncodedUtils.parse(uri, StandardCharsets.UTF_8);\n        Optional<NameValuePair> environmentValue = queryParams.stream().filter(p -> \"environment\".equals(p.getName())).findFirst();\n        return environmentValue;\n    }", "author": "lacikaaa", "createdAt": "2020-09-21T10:10:22Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CustomCrnOrNameProvider;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Component\n+public class FreeIpaCustomCrnOrNameProvider implements CustomCrnOrNameProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaCustomCrnOrNameProvider.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Override\n+    public void provide(RestCallDetails restCallDetails, CDPOperationDetails operationDetails, Map<String, String> restParams,", "originalCommit": "eef3f38cd4e55807629944790b6a4b54a472961b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ecfde6f943518d4a8870334458d25535cb1fad94", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java b/freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java\nindex 8a344ce1b0..6302dc62cc 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java\n\n@@ -1,54 +1,22 @@\n package com.sequenceiq.freeipa.events;\n \n-import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n-\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.nio.charset.StandardCharsets;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n \n import javax.inject.Inject;\n \n-import org.apache.http.NameValuePair;\n-import org.apache.http.client.utils.URLEncodedUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n-import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n-import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n-import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n-import com.sequenceiq.cloudbreak.structuredevent.rest.CustomCrnOrNameProvider;\n-import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResource;\n import com.sequenceiq.freeipa.service.stack.StackService;\n \n-@Component\n-public class FreeIpaCustomCrnOrNameProvider implements CustomCrnOrNameProvider {\n-\n-    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaCustomCrnOrNameProvider.class);\n+@Component(\"freeipaCustomCrnOrNameProvider\")\n+public class FreeIpaCustomCrnOrNameProvider extends AbstractCustomCrnOrNameProvider {\n \n     @Inject\n     private StackService stackService;\n \n     @Override\n-    public void provide(RestCallDetails restCallDetails, CDPOperationDetails operationDetails, Map<String, String> restParams,\n-            String nameField, String crnField) {\n-        try {\n-            String requestUri = restCallDetails.getRestRequest().getRequestUri();\n-            URI uri = new URI(requestUri);\n-            List<NameValuePair> queryParams = URLEncodedUtils.parse(uri, StandardCharsets.UTF_8);\n-            Optional<NameValuePair> environmentValue = queryParams.stream().filter(p -> \"environment\".equals(p.getName())).findFirst();\n-            environmentValue.ifPresent(nameValuePair -> {\n-                String accountId = ThreadBasedUserCrnProvider.getAccountId();\n-                Stack stack = stackService.getByEnvironmentCrnAndAccountIdEvenIfTerminated(nameValuePair.getValue(), accountId);\n-                restParams.put(nameField, stack.getName());\n-                restParams.put(crnField, stack.getResourceCrn());\n-                restParams.put(RESOURCE_ID, stack.getId().toString());\n-            });\n-        } catch (URISyntaxException e) {\n-            LOGGER.warn(\"Cannot provide name and crn because the uri is invalid or any error occurred: {}\", e.getMessage(), e);\n-        }\n+    protected List<? extends AccountAwareResource> getResource(String environmentCrn, String accountId) {\n+        return List.of(stackService.getByEnvironmentCrnAndAccountIdEvenIfTerminated(environmentCrn, accountId));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkzMDU2Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r491930567", "bodyText": "shall we introduce other parsers for the other endpoints? like KerberosMgmtV1Endpoint, KerberosConfigV1Endpoint, LdapConfigV1Endpoint, DnsV1Endpoint?", "author": "lacikaaa", "createdAt": "2020-09-21T10:13:36Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeipaUrlParser.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.structuredevent.event.CloudbreakEventService;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser;\n+\n+@Component\n+public class FreeipaUrlParser extends CDPRestUrlParser {", "originalCommit": "eef3f38cd4e55807629944790b6a4b54a472961b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk0MjUxMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r491942510", "bodyText": "Good questions, I will ask", "author": "topolyai5", "createdAt": "2020-09-21T10:34:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkzMDU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3MDgzMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r492570832", "bodyText": "Only Kerberos config and Ldap config added", "author": "topolyai5", "createdAt": "2020-09-22T08:46:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkzMDU2Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkzOTIzOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r491939239", "bodyText": "it would be more \"clean\" if this method would return with the restParams, indicating it modifies it's content.\nThe most elegant way would be to make a copy of the restParams parameter to initialize the result and add values to that one, as the parameter could be even an immutable map", "author": "lacikaaa", "createdAt": "2020-09-21T10:27:56Z", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/CustomCrnOrNameProvider.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.sequenceiq.cloudbreak.structuredevent.rest;\n+\n+import java.util.Map;\n+\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+\n+public interface CustomCrnOrNameProvider {\n+\n+    void provide(RestCallDetails restCallDetails, CDPOperationDetails operationDetails, Map<String, String> restParams, String nameField, String crnField);", "originalCommit": "eef3f38cd4e55807629944790b6a4b54a472961b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ecfde6f943518d4a8870334458d25535cb1fad94", "chunk": "diff --git a/structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/CustomCrnOrNameProvider.java b/structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/CustomCrnOrNameProvider.java\nindex 000589d598..d5697bfade 100644\n--- a/structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/CustomCrnOrNameProvider.java\n+++ b/structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/CustomCrnOrNameProvider.java\n\n@@ -7,5 +7,6 @@ import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n \n public interface CustomCrnOrNameProvider {\n \n-    void provide(RestCallDetails restCallDetails, CDPOperationDetails operationDetails, Map<String, String> restParams, String nameField, String crnField);\n+    Map<String, String> provide(RestCallDetails restCallDetails, CDPOperationDetails operationDetails, Map<String, String> restParams,\n+            String nameField, String crnField);\n }\n"}}, {"oid": "ecfde6f943518d4a8870334458d25535cb1fad94", "url": "https://github.com/hortonworks/cloudbreak/commit/ecfde6f943518d4a8870334458d25535cb1fad94", "message": "CB-8491 Structured event storing in FreeIPA Database.\nFlow and rest event added to FreeIpa, notification is missing yet. Only rest event stored for kerberos config and ldap.\nIntegration tests and unit tests added.", "committedDate": "2020-09-22T08:45:31Z", "type": "forcePushed"}, {"oid": "4e24227826f0e33d0a2e064a93574a91e9498849", "url": "https://github.com/hortonworks/cloudbreak/commit/4e24227826f0e33d0a2e064a93574a91e9498849", "message": "CB-8491 Structured event storing in FreeIPA Database.\nFlow and rest event added to FreeIpa, notification is missing yet. Only rest event stored for kerberos config and ldap.\nIntegration tests and unit tests added.", "committedDate": "2020-09-22T12:22:23Z", "type": "forcePushed"}, {"oid": "902eff885ab1c2337393bfd0e9633c061248777b", "url": "https://github.com/hortonworks/cloudbreak/commit/902eff885ab1c2337393bfd0e9633c061248777b", "message": "CB-8491 Structured event storing in FreeIPA Database.\nFlow and rest event added to FreeIpa, notification is missing yet. Only rest event stored for kerberos config and ldap.\nIntegration tests and unit tests added.", "committedDate": "2020-09-22T12:54:05Z", "type": "forcePushed"}, {"oid": "ea943757cf6da3087cfc024181a9b4520aed2490", "url": "https://github.com/hortonworks/cloudbreak/commit/ea943757cf6da3087cfc024181a9b4520aed2490", "message": "CB-8491 Structured event storing in FreeIPA Database.\nFlow and rest event added to FreeIpa, notification is missing yet. Only rest event stored for kerberos config and ldap.\nIntegration tests and unit tests added.", "committedDate": "2020-09-22T13:42:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MTU3MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r492741570", "bodyText": "could you drop this as it's not used anymore", "author": "lacikaaa", "createdAt": "2020-09-22T13:39:51Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/entity/Stack.java", "diffHunk": "@@ -349,6 +350,15 @@ public void setAccountId(String accountId) {\n         this.accountId = accountId;\n     }\n \n+    public String getCreator() {", "originalCommit": "902eff885ab1c2337393bfd0e9633c061248777b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "93136b630b2fbc9e504e1d115fda2d9f0e84da71", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/entity/Stack.java b/freeipa/src/main/java/com/sequenceiq/freeipa/entity/Stack.java\nindex 96dbf00bdf..7c34021b84 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/entity/Stack.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/entity/Stack.java\n\n@@ -350,10 +350,6 @@ public class Stack implements AccountAwareResource {\n         this.accountId = accountId;\n     }\n \n-    public String getCreator() {\n-        return owner;\n-    }\n-\n     @Override\n     public String getResourceName() {\n         return name;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MzkzNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r492743934", "bodyText": "please remove this, we don't really use jetbrains annotations", "author": "lacikaaa", "createdAt": "2020-09-22T13:42:47Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/AbstractCustomCrnOrNameProvider.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResource;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CustomCrnOrNameProvider;\n+\n+public abstract class AbstractCustomCrnOrNameProvider implements CustomCrnOrNameProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaCustomCrnOrNameProvider.class);\n+\n+    private final Set<String> environmentParams = Set.of(\"environment\", \"environmentCrn\");\n+\n+    @Override\n+    public Map<String, String> provide(RestCallDetails restCallDetails, CDPOperationDetails operationDetails, Map<String, String> restParams,\n+            String nameField, String crnField) {\n+        Map<String, String> param = new HashMap<>();\n+        try {\n+            Optional<NameValuePair> environmentValue = findEnvironmentCrnInQueryParams(restCallDetails);\n+            environmentValue.ifPresent(nameValuePair -> addFieldToParams(param, nameField, crnField, nameValuePair));\n+        } catch (URISyntaxException e) {\n+            LOGGER.warn(\"Cannot provide name and crn because the uri is invalid or any error occurred: {}\", e.getMessage(), e);\n+        }\n+        return param;\n+    }\n+\n+    private void addFieldToParams(Map<String, String> restParams, String nameField, String crnField, NameValuePair nameValuePair) {\n+        String accountId = ThreadBasedUserCrnProvider.getAccountId();\n+        List<? extends AccountAwareResource> resources = getResource(nameValuePair.getValue(), accountId);\n+        restParams.put(nameField, resources.stream().map(AccountAwareResource::getName).collect(Collectors.joining(\",\")));\n+        restParams.put(crnField, resources.stream().map(AccountAwareResource::getResourceCrn).collect(Collectors.joining(\",\")));\n+        restParams.put(RESOURCE_ID, resources.stream().map(r -> r.getId().toString()).collect(Collectors.joining(\",\")));\n+    }\n+\n+    protected abstract List<? extends AccountAwareResource> getResource(String environmentCrn, String accountId);\n+\n+    @NotNull", "originalCommit": "902eff885ab1c2337393bfd0e9633c061248777b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "93136b630b2fbc9e504e1d115fda2d9f0e84da71", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/events/AbstractCustomCrnOrNameProvider.java b/freeipa/src/main/java/com/sequenceiq/freeipa/events/AbstractCustomCrnOrNameProvider.java\nindex ea78a48a0f..fb355e1e01 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/events/AbstractCustomCrnOrNameProvider.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/events/AbstractCustomCrnOrNameProvider.java\n\n@@ -14,7 +14,6 @@ import java.util.stream.Collectors;\n \n import org.apache.http.NameValuePair;\n import org.apache.http.client.utils.URLEncodedUtils;\n-import org.jetbrains.annotations.NotNull;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0Nzk3Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r492747973", "bodyText": "if this is named, shouldn't be the others too?", "author": "lacikaaa", "createdAt": "2020-09-22T13:47:57Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResource;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Component(\"freeipaCustomCrnOrNameProvider\")", "originalCommit": "ea943757cf6da3087cfc024181a9b4520aed2490", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwMDEwOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r492800109", "bodyText": "No, it should not. It is need because the resourcetype is freeipa but the naming convention is FreeIpa. The others is fine", "author": "topolyai5", "createdAt": "2020-09-22T14:52:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0Nzk3Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0ODMyMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r492748320", "bodyText": "wrong class", "author": "lacikaaa", "createdAt": "2020-09-22T13:48:27Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/AbstractCustomCrnOrNameProvider.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResource;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CustomCrnOrNameProvider;\n+\n+public abstract class AbstractCustomCrnOrNameProvider implements CustomCrnOrNameProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaCustomCrnOrNameProvider.class);", "originalCommit": "ea943757cf6da3087cfc024181a9b4520aed2490", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "93136b630b2fbc9e504e1d115fda2d9f0e84da71", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/events/AbstractCustomCrnOrNameProvider.java b/freeipa/src/main/java/com/sequenceiq/freeipa/events/AbstractCustomCrnOrNameProvider.java\nindex ea78a48a0f..fb355e1e01 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/events/AbstractCustomCrnOrNameProvider.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/events/AbstractCustomCrnOrNameProvider.java\n\n@@ -14,7 +14,6 @@ import java.util.stream.Collectors;\n \n import org.apache.http.NameValuePair;\n import org.apache.http.client.utils.URLEncodedUtils;\n-import org.jetbrains.annotations.NotNull;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc1MDQ0NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r492750445", "bodyText": "note: hell of a constructor, a builder might be better", "author": "lacikaaa", "createdAt": "2020-09-22T13:51:07Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeipaStructuredFlowEventFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType.FLOW;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import com.sequenceiq.cloudbreak.structuredevent.event.CloudbreakEventService;\n+import com.sequenceiq.cloudbreak.structuredevent.event.FlowDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredFlowEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPStructuredFlowEventFactory;\n+import com.sequenceiq.flow.ha.NodeConfig;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Component\n+public class FreeipaStructuredFlowEventFactory implements CDPStructuredFlowEventFactory {\n+\n+    @Inject\n+    private Clock clock;\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private NodeConfig nodeConfig;\n+\n+    @Value(\"${info.app.version:}\")\n+    private String serviceVersion;\n+\n+    @Override\n+    public CDPStructuredFlowEvent createStructuredFlowEvent(Long resourceId, FlowDetails flowDetails, Boolean detailed) {\n+        return createStructuredFlowEvent(resourceId, flowDetails, detailed, null);\n+    }\n+\n+    @Override\n+    public CDPStructuredFlowEvent createStructuredFlowEvent(Long resourceId, FlowDetails flowDetails, Boolean detailed, Exception exception) {\n+        Stack stack = stackService.getStackById(resourceId);\n+        String resourceType = CloudbreakEventService.FREEIPA_RESOURCE_TYPE;\n+        CDPOperationDetails operationDetails = new CDPOperationDetails(clock.getCurrentTimeMillis(), FLOW, resourceType, stack.getId(),", "originalCommit": "ea943757cf6da3087cfc024181a9b4520aed2490", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIxNzM5NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r493217394", "bodyText": "please create a follow-up jira", "author": "topolyai5", "createdAt": "2020-09-23T06:03:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc1MDQ0NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc1NjQ2Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r492756463", "bodyText": "duplicating the entity seems a bit overkill, isn't there any better solution? like creating a common ancestor having all the field\nor if you need only some field you should only include those here and make this only readable", "author": "lacikaaa", "createdAt": "2020-09-22T13:58:30Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberos/KerberosConfigWithArchived.java", "diffHunk": "@@ -0,0 +1,310 @@\n+package com.sequenceiq.freeipa.kerberos;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+import com.sequenceiq.cloudbreak.auth.security.AuthResource;\n+import com.sequenceiq.cloudbreak.common.archive.ArchivableResource;\n+import com.sequenceiq.cloudbreak.service.secret.SecretValue;\n+import com.sequenceiq.cloudbreak.service.secret.domain.Secret;\n+import com.sequenceiq.cloudbreak.service.secret.domain.SecretToString;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResource;\n+import com.sequenceiq.freeipa.api.v1.kerberos.model.KerberosType;\n+import com.sequenceiq.freeipa.entity.util.KerberosTypeConverter;\n+\n+@Entity\n+@Table(name = \"kerberosconfig\")\n+public class KerberosConfigWithArchived implements ArchivableResource, AuthResource, AccountAwareResource {", "originalCommit": "ea943757cf6da3087cfc024181a9b4520aed2490", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc1NzI5NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r492757295", "bodyText": "same note as for kerberos entity", "author": "lacikaaa", "createdAt": "2020-09-22T13:59:30Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/ldap/LdapConfigWithArchived.java", "diffHunk": "@@ -0,0 +1,346 @@\n+package com.sequenceiq.freeipa.ldap;\n+\n+import java.util.Objects;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+import com.sequenceiq.cloudbreak.auth.security.AuthResource;\n+import com.sequenceiq.cloudbreak.common.archive.ArchivableResource;\n+import com.sequenceiq.cloudbreak.service.secret.SecretValue;\n+import com.sequenceiq.cloudbreak.service.secret.domain.Secret;\n+import com.sequenceiq.cloudbreak.service.secret.domain.SecretToString;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResource;\n+import com.sequenceiq.freeipa.api.v1.ldap.model.DirectoryType;\n+\n+@Entity\n+@Table(name = \"ldapconfig\")\n+public class LdapConfigWithArchived implements ArchivableResource, AuthResource, AccountAwareResource {", "originalCommit": "ea943757cf6da3087cfc024181a9b4520aed2490", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "93136b630b2fbc9e504e1d115fda2d9f0e84da71", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/ldap/LdapConfigWithArchived.java b/freeipa/src/main/java/com/sequenceiq/freeipa/ldap/LdapConfigWithArchived.java\nindex 173d9cd9a3..a341a311c8 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/ldap/LdapConfigWithArchived.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/ldap/LdapConfigWithArchived.java\n\n@@ -1,346 +1,10 @@\n package com.sequenceiq.freeipa.ldap;\n \n-import java.util.Objects;\n-\n-import javax.persistence.Column;\n-import javax.persistence.Convert;\n import javax.persistence.Entity;\n-import javax.persistence.EnumType;\n-import javax.persistence.Enumerated;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n-import javax.persistence.Id;\n-import javax.persistence.SequenceGenerator;\n import javax.persistence.Table;\n \n-import com.sequenceiq.cloudbreak.auth.security.AuthResource;\n-import com.sequenceiq.cloudbreak.common.archive.ArchivableResource;\n-import com.sequenceiq.cloudbreak.service.secret.SecretValue;\n-import com.sequenceiq.cloudbreak.service.secret.domain.Secret;\n-import com.sequenceiq.cloudbreak.service.secret.domain.SecretToString;\n-import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResource;\n-import com.sequenceiq.freeipa.api.v1.ldap.model.DirectoryType;\n-\n @Entity\n @Table(name = \"ldapconfig\")\n-public class LdapConfigWithArchived implements ArchivableResource, AuthResource, AccountAwareResource {\n-    @Id\n-    @GeneratedValue(strategy = GenerationType.AUTO, generator = \"ldapconfig_generator\")\n-    @SequenceGenerator(name = \"ldapconfig_generator\", sequenceName = \"ldapconfig_id_seq\", allocationSize = 1)\n-    private Long id;\n-\n-    @Column(nullable = false)\n-    private String resourceCrn;\n-\n-    @Column(nullable = false)\n-    private String name;\n-\n-    @Column(length = 1000000, columnDefinition = \"TEXT\")\n-    private String description;\n-\n-    private String accountId;\n-\n-    private String environmentCrn;\n-\n-    private String clusterName;\n-\n-    private boolean archived;\n-\n-    private Long deletionTimestamp = -1L;\n-\n-    @Column(nullable = false)\n-    private String serverHost;\n-\n-    @Column(nullable = false)\n-    private Integer serverPort;\n-\n-    @Column(nullable = false)\n-    private String protocol;\n-\n-    @Column(nullable = false)\n-    @Convert(converter = SecretToString.class)\n-    @SecretValue\n-    private Secret bindDn = Secret.EMPTY;\n-\n-    @Column(nullable = false)\n-    @Convert(converter = SecretToString.class)\n-    @SecretValue\n-    private Secret bindPassword = Secret.EMPTY;\n-\n-    @Enumerated(EnumType.STRING)\n-    private DirectoryType directoryType;\n-\n-    @Column(nullable = false)\n-    private String userSearchBase;\n-\n-    private String userDnPattern;\n-\n-    private String userNameAttribute;\n-\n-    private String userObjectClass;\n-\n-    private String groupSearchBase;\n-\n-    private String groupNameAttribute;\n-\n-    private String groupObjectClass;\n-\n-    private String groupMemberAttribute;\n-\n-    private String domain;\n-\n-    private String adminGroup;\n-\n-    private String userGroup;\n-\n-    private String certificate;\n-\n-    public Long getId() {\n-        return id;\n-    }\n-\n-    public void setId(Long id) {\n-        this.id = id;\n-    }\n-\n-    public String getResourceCrn() {\n-        return resourceCrn;\n-    }\n-\n-    public void setResourceCrn(String resourceCrn) {\n-        this.resourceCrn = resourceCrn;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n-\n-    public String getDescription() {\n-        return description;\n-    }\n-\n-    public void setDescription(String description) {\n-        this.description = description;\n-    }\n-\n-    @Override\n-    public String getAccountId() {\n-        return accountId;\n-    }\n-\n-    @Override\n-    public void setAccountId(String accountId) {\n-        this.accountId = accountId;\n-    }\n-\n-    public String getEnvironmentCrn() {\n-        return environmentCrn;\n-    }\n-\n-    public void setEnvironmentCrn(String environmentCrn) {\n-        this.environmentCrn = environmentCrn;\n-    }\n-\n-    @Override\n-    public void setDeletionTimestamp(Long timestampMillisecs) {\n-        deletionTimestamp = timestampMillisecs;\n-    }\n-\n-    @Override\n-    public void setArchived(boolean archived) {\n-        this.archived = archived;\n-    }\n-\n-    public boolean isArchived() {\n-        return archived;\n-    }\n-\n-    public Long getDeletionTimestamp() {\n-        return deletionTimestamp;\n-    }\n-\n-    @Override\n-    public void unsetRelationsToEntitiesToBeDeleted() {\n-    }\n-\n-    public String getServerHost() {\n-        return serverHost;\n-    }\n-\n-    public void setServerHost(String serverHost) {\n-        this.serverHost = serverHost;\n-    }\n-\n-    public Integer getServerPort() {\n-        return serverPort;\n-    }\n-\n-    public void setServerPort(Integer serverPort) {\n-        this.serverPort = serverPort;\n-    }\n-\n-    public String getProtocol() {\n-        return protocol;\n-    }\n-\n-    public void setProtocol(String protocol) {\n-        this.protocol = protocol;\n-    }\n-\n-    public String getBindDn() {\n-        return bindDn.getRaw();\n-    }\n-\n-    public String getBindDnSecret() {\n-        return bindDn.getSecret();\n-    }\n-\n-    public void setBindDn(String bindDn) {\n-        this.bindDn = new Secret(bindDn);\n-    }\n-\n-    public String getBindPassword() {\n-        return bindPassword.getRaw();\n-    }\n-\n-    public String getBindPasswordSecret() {\n-        return bindPassword.getSecret();\n-    }\n-\n-    public void setBindPassword(String bindPassword) {\n-        this.bindPassword = new Secret(bindPassword);\n-    }\n-\n-    public DirectoryType getDirectoryType() {\n-        return directoryType;\n-    }\n-\n-    public void setDirectoryType(DirectoryType directoryType) {\n-        this.directoryType = directoryType;\n-    }\n-\n-    public String getUserSearchBase() {\n-        return userSearchBase;\n-    }\n-\n-    public void setUserSearchBase(String userSearchBase) {\n-        this.userSearchBase = userSearchBase;\n-    }\n-\n-    public String getUserNameAttribute() {\n-        return userNameAttribute;\n-    }\n-\n-    public void setUserNameAttribute(String userNameAttribute) {\n-        this.userNameAttribute = userNameAttribute;\n-    }\n-\n-    public String getUserObjectClass() {\n-        return userObjectClass;\n-    }\n-\n-    public void setUserObjectClass(String userObjectClass) {\n-        this.userObjectClass = userObjectClass;\n-    }\n-\n-    public String getGroupSearchBase() {\n-        return groupSearchBase;\n-    }\n-\n-    public void setGroupSearchBase(String groupSearchBase) {\n-        this.groupSearchBase = groupSearchBase;\n-    }\n-\n-    public String getGroupNameAttribute() {\n-        return groupNameAttribute;\n-    }\n-\n-    public void setGroupNameAttribute(String groupNameAttribute) {\n-        this.groupNameAttribute = groupNameAttribute;\n-    }\n-\n-    public String getGroupObjectClass() {\n-        return groupObjectClass;\n-    }\n-\n-    public void setGroupObjectClass(String groupObjectClass) {\n-        this.groupObjectClass = groupObjectClass;\n-    }\n-\n-    public String getGroupMemberAttribute() {\n-        return groupMemberAttribute;\n-    }\n-\n-    public void setGroupMemberAttribute(String groupMemberAttribute) {\n-        this.groupMemberAttribute = groupMemberAttribute;\n-    }\n-\n-    public String getDomain() {\n-        return domain;\n-    }\n-\n-    public void setDomain(String domain) {\n-        this.domain = domain;\n-    }\n-\n-    public String getAdminGroup() {\n-        return adminGroup;\n-    }\n-\n-    public void setAdminGroup(String adminGroup) {\n-        this.adminGroup = adminGroup;\n-    }\n-\n-    public String getUserGroup() {\n-        return userGroup;\n-    }\n-\n-    public void setUserGroup(String userGroup) {\n-        this.userGroup = userGroup;\n-    }\n-\n-    public String getUserDnPattern() {\n-        return userDnPattern;\n-    }\n-\n-    public void setUserDnPattern(String userDnPattern) {\n-        this.userDnPattern = userDnPattern;\n-    }\n-\n-    public String getCertificate() {\n-        return certificate;\n-    }\n-\n-    public void setCertificate(String certificate) {\n-        this.certificate = certificate;\n-    }\n-\n-    public String getClusterName() {\n-        return clusterName;\n-    }\n-\n-    public void setClusterName(String clusterName) {\n-        this.clusterName = clusterName;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-        LdapConfigWithArchived that = (LdapConfigWithArchived) o;\n-        return Objects.equals(id, that.id);\n-    }\n+public class LdapConfigWithArchived extends LdapConfigBase {\n \n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(id);\n-    }\n }\n"}}, {"oid": "93136b630b2fbc9e504e1d115fda2d9f0e84da71", "url": "https://github.com/hortonworks/cloudbreak/commit/93136b630b2fbc9e504e1d115fda2d9f0e84da71", "message": "CB-8491 Refactor LdapConfig, LdapConfigWithArchived, KerberosConfig and KerberosConfigWithrchived. Create a base class with all field and create 2 empty implementations. We need this because we added the @Where annotation to the class and this annotation filter the archived records. Our SQL queries used this annotation logic in the repositories (we use the spring method name like SQLs). Safe reasons, I don't want to rewrite these queries", "committedDate": "2020-09-23T06:24:27Z", "type": "forcePushed"}, {"oid": "41588e5a932a3e33e8ab59f43346c89ff467cd04", "url": "https://github.com/hortonworks/cloudbreak/commit/41588e5a932a3e33e8ab59f43346c89ff467cd04", "message": "CB-8491 Structured event storing in FreeIPA Database.\nFlow and rest event added to FreeIpa, notification is missing yet. Only rest event stored for kerberos config and ldap.\nIntegration tests and unit tests added.", "committedDate": "2020-09-23T06:38:44Z", "type": "commit"}, {"oid": "41588e5a932a3e33e8ab59f43346c89ff467cd04", "url": "https://github.com/hortonworks/cloudbreak/commit/41588e5a932a3e33e8ab59f43346c89ff467cd04", "message": "CB-8491 Structured event storing in FreeIPA Database.\nFlow and rest event added to FreeIpa, notification is missing yet. Only rest event stored for kerberos config and ldap.\nIntegration tests and unit tests added.", "committedDate": "2020-09-23T06:38:44Z", "type": "forcePushed"}]}