{"pr_number": 7446, "pr_title": "CB-5868 No suitable subnet found as there were neither private nor an\u2026", "pr_createdAt": "2020-03-03T10:12:48Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7446", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkyNDU2NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7446#discussion_r386924564", "bodyText": "else is missing", "author": "lacikaaa", "createdAt": "2020-03-03T10:24:00Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategy.java", "diffHunk": "@@ -1,55 +1,61 @@\n package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n \n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n \n-import javax.ws.rs.BadRequestException;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n public abstract class SubnetSelectorStrategy {\n \n+    static final String NOT_ENOUGH_AZ = \"Acceptable subnets are in %d different AZs, but subnets in %d different AZs required.\";\n+\n     private static final Logger LOGGER = LoggerFactory.getLogger(SubnetSelectorStrategy.class);\n \n-    public List<CloudSubnet> select(List<CloudSubnet> subnetMetas) {\n+    public SubnetSelectionResult select(List<CloudSubnet> subnetMetas) {\n         LOGGER.debug(\"Subnet selection with strategy '{}'\", getType());\n-        quickValidate(subnetMetas);\n-        List<CloudSubnet> selectedNetworks = selectInternal(subnetMetas);\n-        LOGGER.debug(\"Selected subnets: {}\", String.join(\", \", selectedNetworks.stream().toString()));\n-        return selectedNetworks;\n-    }\n-\n-    private void quickValidate(List<CloudSubnet> subnetMetas) {\n-        if (subnetMetas == null || subnetMetas.isEmpty()) {\n-            error(\"There are no subnets in this network.\");\n-        }\n-        if (subnetMetas.size() < getMinimumNumberOfSubnets()) {\n-            error(String.format(\"There are not enough subnets in this network, found: %d, expected: %d.\", subnetMetas.size(), getMinimumNumberOfSubnets()));\n+        Optional<String> errorMessage = quickValidate(subnetMetas);\n+        if (errorMessage.isPresent()) {\n+            return new SubnetSelectionResult(errorMessage.get());\n         }\n+        SubnetSelectionResult selectionResult = selectInternal(subnetMetas);\n+        logResult(selectionResult);\n+        return selectionResult;", "originalCommit": "e9968d13a80041ecca36057393c6ca244a1d5787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkyODkwNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7446#discussion_r386928904", "bodyText": "What do you mean by else? You mean, fallback strategy? That you will find at SubnetIdProvider or at SubnetChooser, as they do different things on fallback (does this answer your question?)", "author": "gergopapi2", "createdAt": "2020-03-03T10:31:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkyNDU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkzODE1MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7446#discussion_r386938150", "bodyText": "you have an if, and this is the else part. makes the code easier to read if you don't have hidden returns", "author": "lacikaaa", "createdAt": "2020-03-03T10:48:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkyNDU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyNjc4Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7446#discussion_r387026787", "bodyText": "I am not sure I agree. I think this is opinion based, as some like single returns, whereas others prefer early returns. I personally think there is value in early returns as it avoids nesting and gives a clear flow to the code.", "author": "gergopapi2", "createdAt": "2020-03-03T13:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkyNDU2NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "930ee68bd8a2b183df111f2c7f4f3b4c8632edee", "url": "https://github.com/hortonworks/cloudbreak/commit/930ee68bd8a2b183df111f2c7f4f3b4c8632edee", "message": "CB-5868 No suitable subnet found as there were neither private nor any suitable public subnets", "committedDate": "2020-03-03T10:39:45Z", "type": "commit"}, {"oid": "930ee68bd8a2b183df111f2c7f4f3b4c8632edee", "url": "https://github.com/hortonworks/cloudbreak/commit/930ee68bd8a2b183df111f2c7f4f3b4c8632edee", "message": "CB-5868 No suitable subnet found as there were neither private nor any suitable public subnets", "committedDate": "2020-03-03T10:39:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkzODQxMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7446#discussion_r386938411", "bodyText": "a bit strange that logresult returns", "author": "lacikaaa", "createdAt": "2020-03-03T10:48:37Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/subnet/selector/AzureSubnetSelectorService.java", "diffHunk": "@@ -3,34 +3,38 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-import javax.ws.rs.BadRequestException;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Service;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionParameters;\n+import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n @Service\n public class AzureSubnetSelectorService {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(AzureSubnetSelectorService.class);\n \n-    public List<CloudSubnet> select(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters) {\n+    public SubnetSelectionResult select(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters) {\n         if (subnetMetas == null || subnetMetas.isEmpty()) {\n-            return logAndThrow(\"Azure subnet selection: there are no subnets to choose from.\");\n+            return logResult(new SubnetSelectionResult(\"Azure subnet selection: there are no subnets to choose from.\"));\n         }\n         if (subnetSelectionParameters == null) {\n-            return logAndThrow(\"Azure subnet selection: parameters were not specified.\");\n+            return logResult(new SubnetSelectionResult(\"Azure subnet selection: parameters were not specified.\"));\n         }\n-        return subnetSelectionParameters.isForDatabase()\n+        List<CloudSubnet> selectedSubnets = subnetSelectionParameters.isForDatabase()\n                 ? new ArrayList<>(subnetMetas)\n                 : List.of(subnetMetas.get(0));\n+        return logResult(new SubnetSelectionResult(selectedSubnets));\n     }\n \n-    private List<CloudSubnet> logAndThrow(String message) {\n-        LOGGER.debug(message);\n-        throw new BadRequestException(message);\n+    private SubnetSelectionResult logResult(SubnetSelectionResult subnetSelectionResult) {", "originalCommit": "930ee68bd8a2b183df111f2c7f4f3b4c8632edee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyNzIzMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7446#discussion_r387027231", "bodyText": "I changed it, thanks.", "author": "gergopapi2", "createdAt": "2020-03-03T13:45:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkzODQxMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkzOTM5MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7446#discussion_r386939391", "bodyText": "add a log here please", "author": "lacikaaa", "createdAt": "2020-03-03T10:50:29Z", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "diffHunk": "@@ -30,9 +30,16 @@ public String provide(NetworkDto network, Tunnel tunnel, CloudPlatform cloudPlat\n             LOGGER.debug(\"Check failed, returning null\");\n             return null;\n         }\n-        List<CloudSubnet> selectedSubnets = cloudPlatformConnectors.get(new CloudPlatformVariant(cloudPlatform.name(), cloudPlatform.name()))\n+        SubnetSelectionResult subnetSelectionResult = cloudPlatformConnectors.get(new CloudPlatformVariant(cloudPlatform.name(), cloudPlatform.name()))\n                 .networkConnector()\n                 .selectSubnets(new ArrayList<>(network.getSubnetMetas().values()), SubnetSelectionParameters.builder().withTunnel(tunnel).build());\n-        return selectedSubnets.get(0).getId();\n+        CloudSubnet selectedSubnet = subnetSelectionResult.hasResult()\n+                ? subnetSelectionResult.getResult().get(0)\n+                : fallback(network);\n+        return selectedSubnet.getId();\n+    }\n+\n+    private CloudSubnet fallback(NetworkDto network) {", "originalCommit": "930ee68bd8a2b183df111f2c7f4f3b4c8632edee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyNzUwMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7446#discussion_r387027500", "bodyText": "Yes, thanks for pointing that out! I added it.", "author": "gergopapi2", "createdAt": "2020-03-03T13:45:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkzOTM5MQ=="}], "type": "inlineReview", "revised_code": null}]}