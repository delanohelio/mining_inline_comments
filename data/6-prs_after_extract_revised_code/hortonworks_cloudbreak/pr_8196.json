{"pr_number": 8196, "pr_title": "CB-7268 - Implemented tracing support for flow", "pr_createdAt": "2020-06-02T20:23:26Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8196", "timeline": [{"oid": "b79501d3b783a3a69fdf4c9d96e069cb37686f32", "url": "https://github.com/hortonworks/cloudbreak/commit/b79501d3b783a3a69fdf4c9d96e069cb37686f32", "message": "CB-7268 - Implemented tracing support for flow", "committedDate": "2020-06-03T08:55:23Z", "type": "forcePushed"}, {"oid": "5459b16ee11e0d5edccc227f7b9ff1f4a598a675", "url": "https://github.com/hortonworks/cloudbreak/commit/5459b16ee11e0d5edccc227f7b9ff1f4a598a675", "message": "CB-7268 - Implemented tracing support for flow", "committedDate": "2020-06-03T09:09:43Z", "type": "forcePushed"}, {"oid": "c412316b9c7b5216a7203629561a6eb775d9b4a1", "url": "https://github.com/hortonworks/cloudbreak/commit/c412316b9c7b5216a7203629561a6eb775d9b4a1", "message": "CB-7268 - Implemented tracing support for flow", "committedDate": "2020-06-03T11:42:28Z", "type": "forcePushed"}, {"oid": "52aafb0db2f29075166028f6510fc2f900e6bfdc", "url": "https://github.com/hortonworks/cloudbreak/commit/52aafb0db2f29075166028f6510fc2f900e6bfdc", "message": "CB-7268 - Implemented tracing support for flow", "committedDate": "2020-06-03T13:00:12Z", "type": "forcePushed"}, {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af", "url": "https://github.com/hortonworks/cloudbreak/commit/fdc2445efbea2b0c7e042a12dbc6f33cb09df3af", "message": "CB-7268 - Implemented tracing support for flow", "committedDate": "2020-06-04T09:41:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0NzQwMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435147403", "bodyText": "could you refactor so both the if and else body is in a method?", "author": "lacikaaa", "createdAt": "2020-06-04T10:18:52Z", "path": "flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java", "diffHunk": "@@ -74,24 +81,28 @@ public void execute(StateContext<S, E> context) {\n             try {\n                 Map<Object, Object> variables = context.getExtendedState().getVariables();\n                 prepareExecution(payload, variables);\n-                flowContext = createFlowContext(flowParameters, context, payload);\n-                Object flowStartTime = variables.get(FLOW_START_TIME);\n-                if (flowStartTime != null) {\n-                    Object execTime = variables.get(FLOW_START_EXEC_TIME);\n-                    long flowElapsed = (System.currentTimeMillis() - (long) flowStartTime) / MS_PER_SEC;\n-                    long execElapsed = (System.currentTimeMillis() - (long) execTime) / MS_PER_SEC;\n-                    String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n-                    long executionTime = Math.max(execElapsed, flowElapsed);\n-                    LOGGER.debug(\"Stack: {}, flow state: {}, phase: {}, execution time {} sec\", payload.getResourceId(),\n-                            flowStateName, execElapsed > flowElapsed ? \"doExec\" : \"service\", executionTime);\n-                    metricService.submit(FlowMetricType.FLOW_STEP, executionTime, Map.of(\"name\", flowStateName.toLowerCase()));\n+                String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n+                Span activeSpan = tracer.activeSpan();\n+                String operationName = context.getEvent().name();\n+                SpanContext spanContext = flowParameters.getSpanContext();\n+                if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {", "originalCommit": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0OTA4MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435149080", "bodyText": "also some log would be nice to see what's happening around here", "author": "lacikaaa", "createdAt": "2020-06-04T10:21:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0NzQwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4NDc4Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435184782", "bodyText": "ok", "author": "attilapalfi92", "createdAt": "2020-06-04T11:31:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0NzQwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI5Mjc0OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435292748", "bodyText": "didnt find a way to do it. multiple exit points all the time", "author": "attilapalfi92", "createdAt": "2020-06-04T14:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0NzQwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3NjgyNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435376824", "bodyText": "you must find one, try it harder please!", "author": "schfeca75", "createdAt": "2020-06-04T16:07:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0NzQwMw=="}], "type": "inlineReview", "revised_code": {"commit": "c2c656cba6a0725ef051e07a26abeb77ffbfa2f1", "chunk": "diff --git a/flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java b/flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java\nindex f934572d18..f648227153 100644\n--- a/flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java\n+++ b/flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java\n\n@@ -86,18 +86,20 @@ public abstract class AbstractAction<S extends FlowState, E extends FlowEvent, C\n                 String operationName = context.getEvent().name();\n                 SpanContext spanContext = flowParameters.getSpanContext();\n                 if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+                    LOGGER.debug(\"Reusing existing span. {}\", activeSpan.context());\n                     flowContext = createFlowContext(flowParameters, context, payload);\n-                    doExecute(context, payload, flowContext, variables, flowStateName);\n+                    executeAction(context, payload, flowContext, variables, flowStateName);\n                 } else {\n                     Span span = TracingUtil.getSpan(tracer, operationName, spanContext, flowParameters.getFlowId(),\n                             null, flowParameters.getFlowTriggerUserCrn());\n+                    LOGGER.debug(\"Creating new span. {}\", span.context());\n                     if (spanContext == null) {\n                         spanContext = span.context();\n                     }\n                     flowParameters.setSpanContext(spanContext);\n                     try (Scope ignored = tracer.activateSpan(span)) {\n                         flowContext = createFlowContext(flowParameters, context, payload);\n-                        doExecute(context, payload, flowContext, variables, flowStateName);\n+                        executeAction(context, payload, flowContext, variables, flowStateName);\n                     } finally {\n                         span.finish();\n                     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0ODM1MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435148350", "bodyText": "if we create above a span with spanContext, do we really need this if? we could go with\nflowParameters.setSpanContext(span.context());\nif I'm not mistaken", "author": "lacikaaa", "createdAt": "2020-06-04T10:20:28Z", "path": "flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java", "diffHunk": "@@ -74,24 +81,28 @@ public void execute(StateContext<S, E> context) {\n             try {\n                 Map<Object, Object> variables = context.getExtendedState().getVariables();\n                 prepareExecution(payload, variables);\n-                flowContext = createFlowContext(flowParameters, context, payload);\n-                Object flowStartTime = variables.get(FLOW_START_TIME);\n-                if (flowStartTime != null) {\n-                    Object execTime = variables.get(FLOW_START_EXEC_TIME);\n-                    long flowElapsed = (System.currentTimeMillis() - (long) flowStartTime) / MS_PER_SEC;\n-                    long execElapsed = (System.currentTimeMillis() - (long) execTime) / MS_PER_SEC;\n-                    String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n-                    long executionTime = Math.max(execElapsed, flowElapsed);\n-                    LOGGER.debug(\"Stack: {}, flow state: {}, phase: {}, execution time {} sec\", payload.getResourceId(),\n-                            flowStateName, execElapsed > flowElapsed ? \"doExec\" : \"service\", executionTime);\n-                    metricService.submit(FlowMetricType.FLOW_STEP, executionTime, Map.of(\"name\", flowStateName.toLowerCase()));\n+                String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n+                Span activeSpan = tracer.activeSpan();\n+                String operationName = context.getEvent().name();\n+                SpanContext spanContext = flowParameters.getSpanContext();\n+                if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+                    flowContext = createFlowContext(flowParameters, context, payload);\n+                    doExecute(context, payload, flowContext, variables, flowStateName);\n+                } else {\n+                    Span span = TracingUtil.getSpan(tracer, operationName, spanContext, flowParameters.getFlowId(),\n+                            null, flowParameters.getFlowTriggerUserCrn());\n+                    if (spanContext == null) {\n+                        spanContext = span.context();\n+                    }", "originalCommit": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4NDM5Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435184396", "bodyText": "Yes it is needed because we always reuse the original and first span context. This way the trace will be usable, otherwise spans would be recursively coming from each other which is untrue for the flow. They come after each other and not child of each other.\nIf a context is present we use it, else if this is the first step of a flow, we have to use the current span's context.", "author": "attilapalfi92", "createdAt": "2020-06-04T11:30:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0ODM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "c2c656cba6a0725ef051e07a26abeb77ffbfa2f1", "chunk": "diff --git a/flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java b/flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java\nindex f934572d18..f648227153 100644\n--- a/flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java\n+++ b/flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java\n\n@@ -86,18 +86,20 @@ public abstract class AbstractAction<S extends FlowState, E extends FlowEvent, C\n                 String operationName = context.getEvent().name();\n                 SpanContext spanContext = flowParameters.getSpanContext();\n                 if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+                    LOGGER.debug(\"Reusing existing span. {}\", activeSpan.context());\n                     flowContext = createFlowContext(flowParameters, context, payload);\n-                    doExecute(context, payload, flowContext, variables, flowStateName);\n+                    executeAction(context, payload, flowContext, variables, flowStateName);\n                 } else {\n                     Span span = TracingUtil.getSpan(tracer, operationName, spanContext, flowParameters.getFlowId(),\n                             null, flowParameters.getFlowTriggerUserCrn());\n+                    LOGGER.debug(\"Creating new span. {}\", span.context());\n                     if (spanContext == null) {\n                         spanContext = span.context();\n                     }\n                     flowParameters.setSpanContext(spanContext);\n                     try (Scope ignored = tracer.activateSpan(span)) {\n                         flowContext = createFlowContext(flowParameters, context, payload);\n-                        doExecute(context, payload, flowContext, variables, flowStateName);\n+                        executeAction(context, payload, flowContext, variables, flowStateName);\n                     } finally {\n                         span.finish();\n                     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0OTY3MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435149671", "bodyText": "same here, do we really need this?", "author": "lacikaaa", "createdAt": "2020-06-04T10:22:47Z", "path": "flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java", "diffHunk": "@@ -71,14 +75,37 @@\n     @Inject\n     private ApplicationFlowInformation applicationFlowInformation;\n \n+    @Inject\n+    private Tracer tracer;\n+\n     @Override\n     public void accept(Event<? extends Payload> event) {\n         String key = (String) event.getKey();\n         Payload payload = event.getData();\n         String flowId = getFlowId(event);\n         String flowChainId = getFlowChainId(event);\n         String flowTriggerUserCrn = getFlowTriggerUserCrn(event);\n-        FlowParameters flowParameters = new FlowParameters(flowId, flowTriggerUserCrn);\n+        Span activeSpan = tracer.activeSpan();\n+        SpanContext spanContext = event.getHeaders().get(FlowConstants.SPAN_CONTEXT);\n+        String operationName = event.getKey().toString();\n+        if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+            doAccept(event, key, payload, flowId, flowChainId, flowTriggerUserCrn, spanContext);\n+        } else {\n+            Span span = TracingUtil.getSpan(tracer, operationName, spanContext, flowId, flowChainId, flowTriggerUserCrn);\n+            if (spanContext == null) {\n+                spanContext = span.context();\n+            }", "originalCommit": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5MTcyMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435191723", "bodyText": "same answer", "author": "attilapalfi92", "createdAt": "2020-06-04T11:45:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0OTY3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c2c656cba6a0725ef051e07a26abeb77ffbfa2f1", "chunk": "diff --git a/flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java b/flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java\nindex 039be7627c..2afed62115 100644\n--- a/flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java\n+++ b/flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java\n\n@@ -89,13 +89,15 @@ public class Flow2Handler implements Consumer<Event<? extends Payload>> {\n         SpanContext spanContext = event.getHeaders().get(FlowConstants.SPAN_CONTEXT);\n         String operationName = event.getKey().toString();\n         if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+            LOGGER.debug(\"Reusing existing span. {}\", activeSpan.context());\n             doAccept(event, key, payload, flowId, flowChainId, flowTriggerUserCrn, spanContext);\n         } else {\n             Span span = TracingUtil.getSpan(tracer, operationName, spanContext, flowId, flowChainId, flowTriggerUserCrn);\n+            LOGGER.debug(\"Creating new span. {}\", span.context());\n             if (spanContext == null) {\n                 spanContext = span.context();\n             }\n-            try (Scope scope = tracer.activateSpan(span)) {\n+            try (Scope ignored = tracer.activateSpan(span)) {\n                 doAccept(event, key, payload, flowId, flowChainId, flowTriggerUserCrn, spanContext);\n             } finally {\n                 span.finish();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1MTg5Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435151896", "bodyText": "this doExecute is a bit strange, doesn't have any extra info. Could you come up with a better naming, also we already have a doExecute call inside this method", "author": "lacikaaa", "createdAt": "2020-06-04T10:27:02Z", "path": "flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java", "diffHunk": "@@ -102,6 +113,23 @@ public void execute(StateContext<S, E> context) {\n         });\n     }\n \n+    private void doExecute(StateContext<S, E> context, P payload, C flowContext, Map<Object, Object> variables, String flowStateName) throws Exception {", "originalCommit": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4MTg0Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435181846", "bodyText": "shit, there is one indeed. no extra info is needed, it does the execution. any idea what should I name it?", "author": "attilapalfi92", "createdAt": "2020-06-04T11:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1MTg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI5NjExMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435296111", "bodyText": "renamed to executeAction", "author": "attilapalfi92", "createdAt": "2020-06-04T14:20:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1MTg5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c2c656cba6a0725ef051e07a26abeb77ffbfa2f1", "chunk": "diff --git a/flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java b/flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java\nindex f934572d18..f648227153 100644\n--- a/flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java\n+++ b/flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java\n\n@@ -113,7 +115,7 @@ public abstract class AbstractAction<S extends FlowState, E extends FlowEvent, C\n         });\n     }\n \n-    private void doExecute(StateContext<S, E> context, P payload, C flowContext, Map<Object, Object> variables, String flowStateName) throws Exception {\n+    private void executeAction(StateContext<S, E> context, P payload, C flowContext, Map<Object, Object> variables, String flowStateName) throws Exception {\n         Object flowStartTime = variables.get(FLOW_START_TIME);\n         if (flowStartTime != null) {\n             Object execTime = variables.get(FLOW_START_EXEC_TIME);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1Mjc0MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435152741", "bodyText": "similar here, can we come up with a meaningful name? like acceptWithSpanContext or whatever", "author": "lacikaaa", "createdAt": "2020-06-04T10:28:35Z", "path": "flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java", "diffHunk": "@@ -71,14 +75,37 @@\n     @Inject\n     private ApplicationFlowInformation applicationFlowInformation;\n \n+    @Inject\n+    private Tracer tracer;\n+\n     @Override\n     public void accept(Event<? extends Payload> event) {\n         String key = (String) event.getKey();\n         Payload payload = event.getData();\n         String flowId = getFlowId(event);\n         String flowChainId = getFlowChainId(event);\n         String flowTriggerUserCrn = getFlowTriggerUserCrn(event);\n-        FlowParameters flowParameters = new FlowParameters(flowId, flowTriggerUserCrn);\n+        Span activeSpan = tracer.activeSpan();\n+        SpanContext spanContext = event.getHeaders().get(FlowConstants.SPAN_CONTEXT);\n+        String operationName = event.getKey().toString();\n+        if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+            doAccept(event, key, payload, flowId, flowChainId, flowTriggerUserCrn, spanContext);\n+        } else {\n+            Span span = TracingUtil.getSpan(tracer, operationName, spanContext, flowId, flowChainId, flowTriggerUserCrn);\n+            if (spanContext == null) {\n+                spanContext = span.context();\n+            }\n+            try (Scope scope = tracer.activateSpan(span)) {\n+                doAccept(event, key, payload, flowId, flowChainId, flowTriggerUserCrn, spanContext);\n+            } finally {\n+                span.finish();\n+            }\n+        }\n+    }\n+\n+    private void doAccept(Event<? extends Payload> event, String key, Payload payload, String flowId, String flowChainId,", "originalCommit": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4MTM1MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435181350", "bodyText": "I think doAccept is better, this is a common java terminology for calling a private method that does the actual think, like accepting in this case.", "author": "attilapalfi92", "createdAt": "2020-06-04T11:24:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1Mjc0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c2c656cba6a0725ef051e07a26abeb77ffbfa2f1", "chunk": "diff --git a/flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java b/flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java\nindex 039be7627c..2afed62115 100644\n--- a/flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java\n+++ b/flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java\n\n@@ -89,13 +89,15 @@ public class Flow2Handler implements Consumer<Event<? extends Payload>> {\n         SpanContext spanContext = event.getHeaders().get(FlowConstants.SPAN_CONTEXT);\n         String operationName = event.getKey().toString();\n         if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+            LOGGER.debug(\"Reusing existing span. {}\", activeSpan.context());\n             doAccept(event, key, payload, flowId, flowChainId, flowTriggerUserCrn, spanContext);\n         } else {\n             Span span = TracingUtil.getSpan(tracer, operationName, spanContext, flowId, flowChainId, flowTriggerUserCrn);\n+            LOGGER.debug(\"Creating new span. {}\", span.context());\n             if (spanContext == null) {\n                 spanContext = span.context();\n             }\n-            try (Scope scope = tracer.activateSpan(span)) {\n+            try (Scope ignored = tracer.activateSpan(span)) {\n                 doAccept(event, key, payload, flowId, flowChainId, flowTriggerUserCrn, spanContext);\n             } finally {\n                 span.finish();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1NDk2NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435154964", "bodyText": "same", "author": "lacikaaa", "createdAt": "2020-06-04T10:32:39Z", "path": "flow/src/main/java/com/sequenceiq/flow/reactor/FlowParametersAspects.java", "diffHunk": "@@ -29,16 +39,37 @@ public Object setFlowTriggerUserCrnForReactorHandler(ProceedingJoinPoint proceed\n         Event<?> event = (Event<?>) proceedingJoinPoint.getArgs()[0];\n         String flowTriggerUserCrn = event.getHeaders().get(FlowConstants.FLOW_TRIGGER_USERCRN);\n         return ThreadBasedUserCrnProvider.doAsAndThrow(flowTriggerUserCrn, () -> {\n-            if (flowTriggerUserCrn != null) {\n-                try {\n-                    MDCBuilder.buildMdcContextFromCrn(Crn.fromString(flowTriggerUserCrn));\n-                } catch (Exception e) {\n-                    LOGGER.debug(\"Couldn't set MDCContext from crn: [{}]\", flowTriggerUserCrn, e);\n+            String operationName = event.getKey().toString();\n+            SpanContext spanContext = event.getHeaders().get(FlowConstants.SPAN_CONTEXT);\n+            Span activeSpan = tracer.activeSpan();\n+            if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+                return doProceed(proceedingJoinPoint, flowTriggerUserCrn, event, spanContext);\n+            } else {\n+                Span span = TracingUtil.getSpan(tracer, operationName, spanContext, event.getHeaders().get(FlowConstants.FLOW_ID),\n+                        event.getHeaders().get(FlowConstants.FLOW_CHAIN_ID), flowTriggerUserCrn);\n+                try (Scope ignored = tracer.activateSpan(span)) {\n+                    if (spanContext == null) {\n+                        spanContext = span.context();\n+                    }", "originalCommit": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5MTc4MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435191781", "bodyText": "same answer", "author": "attilapalfi92", "createdAt": "2020-06-04T11:45:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1NDk2NA=="}], "type": "inlineReview", "revised_code": {"commit": "c2c656cba6a0725ef051e07a26abeb77ffbfa2f1", "chunk": "diff --git a/flow/src/main/java/com/sequenceiq/flow/reactor/FlowParametersAspects.java b/flow/src/main/java/com/sequenceiq/flow/reactor/FlowParametersAspects.java\nindex dca0e4c3fa..9f0c3b3d27 100644\n--- a/flow/src/main/java/com/sequenceiq/flow/reactor/FlowParametersAspects.java\n+++ b/flow/src/main/java/com/sequenceiq/flow/reactor/FlowParametersAspects.java\n\n@@ -43,10 +43,12 @@ public class FlowParametersAspects {\n             SpanContext spanContext = event.getHeaders().get(FlowConstants.SPAN_CONTEXT);\n             Span activeSpan = tracer.activeSpan();\n             if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+                LOGGER.debug(\"Reusing existing span. {}\", activeSpan.context());\n                 return doProceed(proceedingJoinPoint, flowTriggerUserCrn, event, spanContext);\n             } else {\n                 Span span = TracingUtil.getSpan(tracer, operationName, spanContext, event.getHeaders().get(FlowConstants.FLOW_ID),\n                         event.getHeaders().get(FlowConstants.FLOW_CHAIN_ID), flowTriggerUserCrn);\n+                LOGGER.debug(\"Creating new span. {}\", span.context());\n                 try (Scope ignored = tracer.activateSpan(span)) {\n                     if (spanContext == null) {\n                         spanContext = span.context();\n"}}, {"oid": "c2c656cba6a0725ef051e07a26abeb77ffbfa2f1", "url": "https://github.com/hortonworks/cloudbreak/commit/c2c656cba6a0725ef051e07a26abeb77ffbfa2f1", "message": "CB-7268 - Implemented tracing support for flow", "committedDate": "2020-06-04T14:20:46Z", "type": "forcePushed"}, {"oid": "12619e43cf4802761fd188ca83de7b8e6dff4a35", "url": "https://github.com/hortonworks/cloudbreak/commit/12619e43cf4802761fd188ca83de7b8e6dff4a35", "message": "CB-7268 - Implemented tracing support for flow", "committedDate": "2020-06-05T15:14:33Z", "type": "commit"}, {"oid": "12619e43cf4802761fd188ca83de7b8e6dff4a35", "url": "https://github.com/hortonworks/cloudbreak/commit/12619e43cf4802761fd188ca83de7b8e6dff4a35", "message": "CB-7268 - Implemented tracing support for flow", "committedDate": "2020-06-05T15:14:33Z", "type": "forcePushed"}]}