{"pr_number": 9258, "pr_title": "CB-8945 Ability to run tests against MOW Dev", "pr_createdAt": "2020-10-20T19:33:13Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/9258", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwOTM1OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9258#discussion_r509109358", "bodyText": "Can we refactor this to smaller methods and do less in the catch block? It's kind hard to read.\nSomething like:\ngetMockBasedUser()\ngetRealUmsUser()\ngetTestParamUser()", "author": "lnardai", "createdAt": "2020-10-21T08:59:06Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/context/TestContext.java", "diffHunk": "@@ -447,15 +448,57 @@ protected String getActingUserAccessKey() {\n     }\n \n     public Crn getActingUserCrn() {\n-        // real ums user\n-        if (Crn.isCrn(getActingUser().getCrn())) {\n-            return Crn.fromString(getActingUser().getCrn());\n+        try {\n+            /**\n+             * Default application parameter:\n+             * integrationtest.user.crn or \"localhost\" in ~/.dp/config\n+             */\n+            return Crn.fromString(new String(Base64.getDecoder().decode(getActingUserAccessKey())));\n+        } catch (Exception e) {\n+            if (Crn.isCrn(getActingUser().getCrn())) {\n+                /**\n+                 * Real UMS user:\n+                 * useRealUmsUser(testContext, AuthUserKeys.ACCOUNT_ADMIN);\n+                 */\n+                return Crn.fromString(getActingUser().getCrn());\n+            }\n+            if (!testParameter.get(CloudbreakTest.USER_CRN).isEmpty() || testParameter.get(CloudbreakTest.USER_CRN) != null) {\n+                /**\n+                 * Application parameter:\n+                 * integrationtest.user.crn\n+                 */\n+                return Crn.fromString(testParameter.get(CloudbreakTest.USER_CRN));\n+            }\n+            LOGGER.error(\"Cannot find acting user: '{}' - Crn, because of: '{}'\", getActingUserAccessKey(), e.getMessage(), e);\n+            throw new TestFailException(String.format(\"Cannot find acting user: '%s' - Crn, because of: '%s'\", getActingUserAccessKey(), e.getMessage()), e);", "originalCommit": "ea6ac7a1db7250abc8dcbe10c9cee882fc6082b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12db6a1175dad7c64a680c1691bb21e97c05e190", "chunk": "diff --git a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/context/TestContext.java b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/context/TestContext.java\nindex d132701844..b7d1c82f50 100644\n--- a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/context/TestContext.java\n+++ b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/context/TestContext.java\n\n@@ -448,56 +448,96 @@ public abstract class TestContext implements ApplicationContextAware {\n     }\n \n     public Crn getActingUserCrn() {\n+        Crn userCrn;\n         try {\n-            /**\n-             * Default application parameter:\n-             * integrationtest.user.crn or \"localhost\" in ~/.dp/config\n-             */\n-            return Crn.fromString(new String(Base64.getDecoder().decode(getActingUserAccessKey())));\n+            userCrn = getMockUserCrn();\n         } catch (Exception e) {\n-            if (Crn.isCrn(getActingUser().getCrn())) {\n-                /**\n-                 * Real UMS user:\n-                 * useRealUmsUser(testContext, AuthUserKeys.ACCOUNT_ADMIN);\n-                 */\n-                return Crn.fromString(getActingUser().getCrn());\n+            userCrn = getRealUMSUserCrn() != null ? getRealUMSUserCrn() : getUserParameterCrn();\n+            if (userCrn == null) {\n+                LOGGER.error(\"Cannot find acting user: '{}' - Crn, because of: '{}'\", getActingUserAccessKey(), e.getMessage(), e);\n+                throw new TestFailException(String.format(\"Cannot find acting user: '%s' - Crn, because of: '%s'\", getActingUserAccessKey(), e.getMessage()),\n+                        e);\n             }\n-            if (!testParameter.get(CloudbreakTest.USER_CRN).isEmpty() || testParameter.get(CloudbreakTest.USER_CRN) != null) {\n-                /**\n-                 * Application parameter:\n-                 * integrationtest.user.crn\n-                 */\n-                return Crn.fromString(testParameter.get(CloudbreakTest.USER_CRN));\n-            }\n-            LOGGER.error(\"Cannot find acting user: '{}' - Crn, because of: '{}'\", getActingUserAccessKey(), e.getMessage(), e);\n-            throw new TestFailException(String.format(\"Cannot find acting user: '%s' - Crn, because of: '%s'\", getActingUserAccessKey(), e.getMessage()), e);\n+        }\n+        return userCrn;\n+    }\n+\n+    /**\n+     * Default application parameter:\n+     * integrationtest.user.crn or \"localhost\" in ~/.dp/config\n+     */\n+    private Crn getMockUserCrn() {\n+        return Crn.fromString(new String(Base64.getDecoder().decode(getActingUserAccessKey())));\n+    }\n+\n+    /**\n+     * Real UMS user:\n+     * useRealUmsUser(testContext, AuthUserKeys.ACCOUNT_ADMIN);\n+     */\n+    private Crn getRealUMSUserCrn() {\n+        if (Crn.isCrn(getActingUser().getCrn())) {\n+            return Crn.fromString(getActingUser().getCrn());\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Application parameter:\n+     * integrationtest.user.crn\n+     */\n+    private Crn getUserParameterCrn() {\n+        if (!testParameter.get(CloudbreakTest.USER_CRN).isEmpty() || testParameter.get(CloudbreakTest.USER_CRN) != null) {\n+            return Crn.fromString(testParameter.get(CloudbreakTest.USER_CRN));\n+        } else {\n+            return null;\n         }\n     }\n \n     public String getActingUserName() {\n+        String userName;\n         try {\n-            /**\n-             * Default application parameter:\n-             * integrationtest.user.name or \"localhost\" in ~/.dp/config\n-             */\n-            return Objects.requireNonNull(Crn.fromString(new String(Base64.getDecoder().decode(getActingUserAccessKey())))).getUserId();\n+            userName = getMockUserName();\n         } catch (Exception e) {\n-            if (Crn.isCrn(getActingUser().getCrn())) {\n-                /**\n-                 * Real UMS user:\n-                 * useRealUmsUser(testContext, AuthUserKeys.ACCOUNT_ADMIN);\n-                 */\n-                return Objects.requireNonNull(Crn.fromString(getActingUser().getCrn())).getUserId();\n+            userName = getRealUMSUserName() != null ? getRealUMSUserName() : getUserParameterName();\n+            if (userName == null) {\n+                LOGGER.error(\"Cannot find acting user: '{}' - Name, because of: '{}'\", getActingUserAccessKey(), e.getMessage(), e);\n+                throw new TestFailException(String.format(\"Cannot find acting user: '%s' - Name, because of: '%s'\", getActingUserAccessKey(), e.getMessage()),\n+                        e);\n             }\n-            if (!testParameter.get(CloudbreakTest.USER_NAME).isEmpty() || testParameter.get(CloudbreakTest.USER_NAME) != null) {\n-                /**\n-                 * Application parameter:\n-                 * integrationtest.user.name\n-                 */\n-                return testParameter.get(CloudbreakTest.USER_NAME);\n-            }\n-            LOGGER.error(\"Cannot find acting user: '{}' - Name, because of: '{}'\", getActingUserAccessKey(), e.getMessage(), e);\n-            throw new TestFailException(String.format(\"Cannot find acting user: '%s' - Name, because of: '%s'\", getActingUserAccessKey(), e.getMessage()), e);\n+        }\n+        return userName;\n+    }\n+\n+    /**\n+     * Default application parameter:\n+     * integrationtest.user.crn or \"localhost\" in ~/.dp/config\n+     */\n+    private String getMockUserName() {\n+        return Objects.requireNonNull(Crn.fromString(new String(Base64.getDecoder().decode(getActingUserAccessKey())))).getUserId();\n+    }\n+\n+    /**\n+     * Real UMS user:\n+     * useRealUmsUser(testContext, AuthUserKeys.ACCOUNT_ADMIN);\n+     */\n+    private String getRealUMSUserName() {\n+        if (Crn.isCrn(getActingUser().getCrn())) {\n+            return Objects.requireNonNull(Crn.fromString(getActingUser().getCrn())).getUserId();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Application parameter:\n+     * integrationtest.user.name\n+     */\n+    private String getUserParameterName() {\n+        if (!testParameter.get(CloudbreakTest.USER_NAME).isEmpty() || testParameter.get(CloudbreakTest.USER_NAME) != null) {\n+            return testParameter.get(CloudbreakTest.USER_NAME);\n+        } else {\n+            return null;\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwOTY0OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9258#discussion_r509109649", "bodyText": "Same applies here as before.", "author": "lnardai", "createdAt": "2020-10-21T08:59:29Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/context/TestContext.java", "diffHunk": "@@ -447,15 +448,57 @@ protected String getActingUserAccessKey() {\n     }\n \n     public Crn getActingUserCrn() {\n-        // real ums user\n-        if (Crn.isCrn(getActingUser().getCrn())) {\n-            return Crn.fromString(getActingUser().getCrn());\n+        try {\n+            /**\n+             * Default application parameter:\n+             * integrationtest.user.crn or \"localhost\" in ~/.dp/config\n+             */\n+            return Crn.fromString(new String(Base64.getDecoder().decode(getActingUserAccessKey())));\n+        } catch (Exception e) {\n+            if (Crn.isCrn(getActingUser().getCrn())) {\n+                /**\n+                 * Real UMS user:\n+                 * useRealUmsUser(testContext, AuthUserKeys.ACCOUNT_ADMIN);\n+                 */\n+                return Crn.fromString(getActingUser().getCrn());\n+            }\n+            if (!testParameter.get(CloudbreakTest.USER_CRN).isEmpty() || testParameter.get(CloudbreakTest.USER_CRN) != null) {\n+                /**\n+                 * Application parameter:\n+                 * integrationtest.user.crn\n+                 */\n+                return Crn.fromString(testParameter.get(CloudbreakTest.USER_CRN));\n+            }\n+            LOGGER.error(\"Cannot find acting user: '{}' - Crn, because of: '{}'\", getActingUserAccessKey(), e.getMessage(), e);\n+            throw new TestFailException(String.format(\"Cannot find acting user: '%s' - Crn, because of: '%s'\", getActingUserAccessKey(), e.getMessage()), e);\n         }\n-        return Crn.fromString(new String(Base64.getDecoder().decode(getActingUserAccessKey())));\n     }\n \n     public String getActingUserName() {\n-        return Crn.fromString(new String(Base64.getDecoder().decode(getActingUserAccessKey()))).getUserId();\n+        try {\n+            /**\n+             * Default application parameter:\n+             * integrationtest.user.name or \"localhost\" in ~/.dp/config\n+             */\n+            return Objects.requireNonNull(Crn.fromString(new String(Base64.getDecoder().decode(getActingUserAccessKey())))).getUserId();", "originalCommit": "ea6ac7a1db7250abc8dcbe10c9cee882fc6082b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12db6a1175dad7c64a680c1691bb21e97c05e190", "chunk": "diff --git a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/context/TestContext.java b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/context/TestContext.java\nindex d132701844..b7d1c82f50 100644\n--- a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/context/TestContext.java\n+++ b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/context/TestContext.java\n\n@@ -448,56 +448,96 @@ public abstract class TestContext implements ApplicationContextAware {\n     }\n \n     public Crn getActingUserCrn() {\n+        Crn userCrn;\n         try {\n-            /**\n-             * Default application parameter:\n-             * integrationtest.user.crn or \"localhost\" in ~/.dp/config\n-             */\n-            return Crn.fromString(new String(Base64.getDecoder().decode(getActingUserAccessKey())));\n+            userCrn = getMockUserCrn();\n         } catch (Exception e) {\n-            if (Crn.isCrn(getActingUser().getCrn())) {\n-                /**\n-                 * Real UMS user:\n-                 * useRealUmsUser(testContext, AuthUserKeys.ACCOUNT_ADMIN);\n-                 */\n-                return Crn.fromString(getActingUser().getCrn());\n+            userCrn = getRealUMSUserCrn() != null ? getRealUMSUserCrn() : getUserParameterCrn();\n+            if (userCrn == null) {\n+                LOGGER.error(\"Cannot find acting user: '{}' - Crn, because of: '{}'\", getActingUserAccessKey(), e.getMessage(), e);\n+                throw new TestFailException(String.format(\"Cannot find acting user: '%s' - Crn, because of: '%s'\", getActingUserAccessKey(), e.getMessage()),\n+                        e);\n             }\n-            if (!testParameter.get(CloudbreakTest.USER_CRN).isEmpty() || testParameter.get(CloudbreakTest.USER_CRN) != null) {\n-                /**\n-                 * Application parameter:\n-                 * integrationtest.user.crn\n-                 */\n-                return Crn.fromString(testParameter.get(CloudbreakTest.USER_CRN));\n-            }\n-            LOGGER.error(\"Cannot find acting user: '{}' - Crn, because of: '{}'\", getActingUserAccessKey(), e.getMessage(), e);\n-            throw new TestFailException(String.format(\"Cannot find acting user: '%s' - Crn, because of: '%s'\", getActingUserAccessKey(), e.getMessage()), e);\n+        }\n+        return userCrn;\n+    }\n+\n+    /**\n+     * Default application parameter:\n+     * integrationtest.user.crn or \"localhost\" in ~/.dp/config\n+     */\n+    private Crn getMockUserCrn() {\n+        return Crn.fromString(new String(Base64.getDecoder().decode(getActingUserAccessKey())));\n+    }\n+\n+    /**\n+     * Real UMS user:\n+     * useRealUmsUser(testContext, AuthUserKeys.ACCOUNT_ADMIN);\n+     */\n+    private Crn getRealUMSUserCrn() {\n+        if (Crn.isCrn(getActingUser().getCrn())) {\n+            return Crn.fromString(getActingUser().getCrn());\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Application parameter:\n+     * integrationtest.user.crn\n+     */\n+    private Crn getUserParameterCrn() {\n+        if (!testParameter.get(CloudbreakTest.USER_CRN).isEmpty() || testParameter.get(CloudbreakTest.USER_CRN) != null) {\n+            return Crn.fromString(testParameter.get(CloudbreakTest.USER_CRN));\n+        } else {\n+            return null;\n         }\n     }\n \n     public String getActingUserName() {\n+        String userName;\n         try {\n-            /**\n-             * Default application parameter:\n-             * integrationtest.user.name or \"localhost\" in ~/.dp/config\n-             */\n-            return Objects.requireNonNull(Crn.fromString(new String(Base64.getDecoder().decode(getActingUserAccessKey())))).getUserId();\n+            userName = getMockUserName();\n         } catch (Exception e) {\n-            if (Crn.isCrn(getActingUser().getCrn())) {\n-                /**\n-                 * Real UMS user:\n-                 * useRealUmsUser(testContext, AuthUserKeys.ACCOUNT_ADMIN);\n-                 */\n-                return Objects.requireNonNull(Crn.fromString(getActingUser().getCrn())).getUserId();\n+            userName = getRealUMSUserName() != null ? getRealUMSUserName() : getUserParameterName();\n+            if (userName == null) {\n+                LOGGER.error(\"Cannot find acting user: '{}' - Name, because of: '{}'\", getActingUserAccessKey(), e.getMessage(), e);\n+                throw new TestFailException(String.format(\"Cannot find acting user: '%s' - Name, because of: '%s'\", getActingUserAccessKey(), e.getMessage()),\n+                        e);\n             }\n-            if (!testParameter.get(CloudbreakTest.USER_NAME).isEmpty() || testParameter.get(CloudbreakTest.USER_NAME) != null) {\n-                /**\n-                 * Application parameter:\n-                 * integrationtest.user.name\n-                 */\n-                return testParameter.get(CloudbreakTest.USER_NAME);\n-            }\n-            LOGGER.error(\"Cannot find acting user: '{}' - Name, because of: '{}'\", getActingUserAccessKey(), e.getMessage(), e);\n-            throw new TestFailException(String.format(\"Cannot find acting user: '%s' - Name, because of: '%s'\", getActingUserAccessKey(), e.getMessage()), e);\n+        }\n+        return userName;\n+    }\n+\n+    /**\n+     * Default application parameter:\n+     * integrationtest.user.crn or \"localhost\" in ~/.dp/config\n+     */\n+    private String getMockUserName() {\n+        return Objects.requireNonNull(Crn.fromString(new String(Base64.getDecoder().decode(getActingUserAccessKey())))).getUserId();\n+    }\n+\n+    /**\n+     * Real UMS user:\n+     * useRealUmsUser(testContext, AuthUserKeys.ACCOUNT_ADMIN);\n+     */\n+    private String getRealUMSUserName() {\n+        if (Crn.isCrn(getActingUser().getCrn())) {\n+            return Objects.requireNonNull(Crn.fromString(getActingUser().getCrn())).getUserId();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Application parameter:\n+     * integrationtest.user.name\n+     */\n+    private String getUserParameterName() {\n+        if (!testParameter.get(CloudbreakTest.USER_NAME).isEmpty() || testParameter.get(CloudbreakTest.USER_NAME) != null) {\n+            return testParameter.get(CloudbreakTest.USER_NAME);\n+        } else {\n+            return null;\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExMTQ0OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9258#discussion_r509111448", "bodyText": "I'm not sure about his change. At least the Owner tag should contain the creator's name not the CRN I think.", "author": "lnardai", "createdAt": "2020-10-21T09:01:59Z", "path": "integration-test/src/main/java/com/sequenceiq/it/util/TagsUtil.java", "diffHunk": "@@ -109,14 +110,17 @@ private void validateOwnerTag(TaggedResponse response, String tag, TestContext t\n     }\n \n     private void validateClouderaCreatorResourceNameTag(TaggedResponse response, String tag, TestContext testContext) {\n-        if (response.getTagValue(tag).contains(testContext.getActingUserName())) {\n-            Log.log(LOGGER, format(\" Default tag: [%s] value is: [%s] contains [%s] acting user name! \", tag, response.getTagValue(tag),\n-                    testContext.getActingUserName()));\n+        Crn actingUserCrn = testContext.getActingUserCrn();\n+        Crn clouderaCreatorResourceName = Crn.fromString(response.getTagValue(tag));\n+\n+        if (clouderaCreatorResourceName.equals(actingUserCrn)) {", "originalCommit": "ea6ac7a1db7250abc8dcbe10c9cee882fc6082b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMxOTAyMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9258#discussion_r509319021", "bodyText": "Unfortunately we had to upgrade this comparison, because of:\n\nThe account basis value is a string that will be converted into SFDC account ID format that serves as the primary key for the account. This is distinct from the CDP-internal account ID UUID that shows up in CRNs and many API calls.\n...\nThe user basis value works along similar lines but results in the primary key for the user within the account.\n\nfrom CDPCP Account Helper > Creating Test Users\nFor instance a mocked: \"Cloudera-Creator-Resource-Name\":\"crn:altus:iam:us-west-1:qe-aws:user:cloudbreak-qe@hortonworks.com\" and a real one: \"Cloudera-Creator-Resource-Name\":\"crn:altus:iam:us-west-1:9d74eee4-1cad-45d7-b645-7ccf9edbb73d:user:9e6ff6c7-7a4b-4086-8989-731c2d57fbf7\"", "author": "aszegedi", "createdAt": "2020-10-21T14:08:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExMTQ0OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "12db6a1175dad7c64a680c1691bb21e97c05e190", "url": "https://github.com/hortonworks/cloudbreak/commit/12db6a1175dad7c64a680c1691bb21e97c05e190", "message": "CB-8945 Ability to run tests against MOW Dev", "committedDate": "2020-10-21T13:57:26Z", "type": "forcePushed"}, {"oid": "6fc048a0fe3903e3e7a59f7e047f8db205dc71e7", "url": "https://github.com/hortonworks/cloudbreak/commit/6fc048a0fe3903e3e7a59f7e047f8db205dc71e7", "message": "CB-8945 Ability to run tests against MOW Dev", "committedDate": "2020-10-21T15:03:41Z", "type": "forcePushed"}, {"oid": "1581bb0347862fc49bcb30f0a7070210a5a8c9de", "url": "https://github.com/hortonworks/cloudbreak/commit/1581bb0347862fc49bcb30f0a7070210a5a8c9de", "message": "CB-8945 Ability to run tests against MOW Dev", "committedDate": "2020-10-22T14:56:17Z", "type": "forcePushed"}, {"oid": "bf7066cb093fa022b2057b22703bf51882fd6946", "url": "https://github.com/hortonworks/cloudbreak/commit/bf7066cb093fa022b2057b22703bf51882fd6946", "message": "CB-8945 Ability to run tests against MOW Dev", "committedDate": "2020-10-22T14:57:06Z", "type": "commit"}, {"oid": "bf7066cb093fa022b2057b22703bf51882fd6946", "url": "https://github.com/hortonworks/cloudbreak/commit/bf7066cb093fa022b2057b22703bf51882fd6946", "message": "CB-8945 Ability to run tests against MOW Dev", "committedDate": "2020-10-22T14:57:06Z", "type": "forcePushed"}]}