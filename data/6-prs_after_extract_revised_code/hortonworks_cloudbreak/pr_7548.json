{"pr_number": 7548, "pr_title": "CDPCP-1601. set-password now uses credentials from control plane", "pr_createdAt": "2020-03-11T19:12:10Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7548", "timeline": [{"oid": "6b1f0cff5cd95a603429bbc55013eb9eb2d55527", "url": "https://github.com/hortonworks/cloudbreak/commit/6b1f0cff5cd95a603429bbc55013eb9eb2d55527", "message": "CDPCP-1601. set-password now uses credentials from control plane\n\nThe setPassword call now uses the password hash and keys from ums\nwhen possible. Note that we plan to deprecate / remove this endpoint\nsoon, but for now the UI is still calling it and this behavior\nwill keep the UMS keys consistent with the keys in FreeIPA, which\nis desirable for user keytab generation.", "committedDate": "2020-03-11T19:20:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYxMTE5Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7548#discussion_r391611196", "bodyText": "few things:\n\nmethod name should start with verb, like create\nI don't like this static method, because it will make it hard to mock during testing. Maybe moving this logic into a converter component would make it easier to mock and test\nmissing tests", "author": "lacikaaa", "createdAt": "2020-03-12T13:14:21Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/model/WorkloadCredential.java", "diffHunk": "@@ -32,4 +33,12 @@ public String getHashedPassword() {\n     public Optional<Instant> getExpirationDate() {\n         return expirationDate;\n     }\n+\n+    public static WorkloadCredential fromGetActorWorkloadCredentialsResponse(GetActorWorkloadCredentialsResponse response) {", "originalCommit": "6b1f0cff5cd95a603429bbc55013eb9eb2d55527", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE3MjQxNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7548#discussion_r392172414", "bodyText": "Fixed. Also, instead of moving to a provider I ended up put the logic in a UmsCredentialProvider which also makes the grpc call.", "author": "aarman-cloudera", "createdAt": "2020-03-13T11:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYxMTE5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7eab15ee72fc22433dd41cc22f47fd21c00befc4", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/model/WorkloadCredential.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/model/WorkloadCredential.java\nindex 48f15a7286..2b0c4d55f9 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/model/WorkloadCredential.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/model/WorkloadCredential.java\n\n@@ -33,12 +32,4 @@ public class WorkloadCredential {\n     public Optional<Instant> getExpirationDate() {\n         return expirationDate;\n     }\n-\n-    public static WorkloadCredential fromGetActorWorkloadCredentialsResponse(GetActorWorkloadCredentialsResponse response) {\n-        String hashedPassword = response.getPasswordHash();\n-        List<ActorKerberosKey> keys = response.getKerberosKeysList();\n-        long expirationDate = response.getPasswordHashExpirationDate();\n-        Optional<Instant> expirationInstant = expirationDate == 0 ? Optional.empty() : Optional.of(Instant.ofEpochMilli(expirationDate));\n-        return new WorkloadCredential(hashedPassword, keys, expirationInstant);\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxNjE3OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7548#discussion_r391816179", "bodyText": "doesn't quite feel right in the FreeIpaClient class. We will also likely start checking other object classes as well.\nI suggest pulling this out into a separate class. Maybe FreeIpaObjectClasses or FreeIpaCapabilities", "author": "handavid", "createdAt": "2020-03-12T18:34:29Z", "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClient.java", "diffHunk": "@@ -197,6 +197,11 @@ public User userSetPasswordHash(String user, String hashedPassword,\n         return userMod(user, params);\n     }\n \n+    public boolean hasSetPasswordHashSupport() throws FreeIpaClientException {", "originalCommit": "6b1f0cff5cd95a603429bbc55013eb9eb2d55527", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE3MDc2Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7548#discussion_r392170767", "bodyText": "Moved it into a FreeIpaCapabilities class. I assume you meant we still want it in the freeipa client package.", "author": "aarman-cloudera", "createdAt": "2020-03-13T11:23:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxNjE3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7eab15ee72fc22433dd41cc22f47fd21c00befc4", "chunk": "diff --git a/freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClient.java b/freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClient.java\nindex 1d45af5576..35a049aa7e 100644\n--- a/freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClient.java\n+++ b/freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClient.java\n\n@@ -197,11 +197,6 @@ public class FreeIpaClient {\n         return userMod(user, params);\n     }\n \n-    public boolean hasSetPasswordHashSupport() throws FreeIpaClientException {\n-        Set<String> ipauserobjectclasses = getConfig().getIpauserobjectclasses();\n-        return ipauserobjectclasses != null && !ipauserobjectclasses.contains(Config.CDP_USER_ATTRIBUTE);\n-    }\n-\n     String formatDate(Optional<Instant> instant) {\n         if (instant.isPresent()) {\n             return DATE_TIME_FORMATTER.format(ZonedDateTime.ofInstant(instant.get(), ZoneOffset.UTC));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxNzY1MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7548#discussion_r391817651", "bodyText": "Let's add a log message here also. This will let us search to logs for whether anyone is using the \"old way\"", "author": "handavid", "createdAt": "2020-03-12T18:37:14Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/freeipa/user/handler/SetPasswordHandler.java", "diffHunk": "@@ -43,7 +70,13 @@ public void accept(Event<SetPasswordRequest> setPasswordRequestEvent) {\n             MDCBuilder.buildMdcContext(stack);\n \n             FreeIpaClient freeIpaClient = freeIpaClientFactory.getFreeIpaClientForStack(stack);\n-            freeIpaClient.userSetPasswordWithExpiration(request.getUsername(), request.getPassword(), request.getExpirationInstant());\n+            if (freeIpaClient.hasSetPasswordHashSupport()) {\n+                LOGGER.info(\"IPA has password hash support, credentials information from UMS will be used.\");\n+                setPasswordHashFromUms(freeIpaClient, request.getUsername(), request.getUserCrn(), request.getExpirationInstant());\n+            } else {\n+                freeIpaClient.userSetPasswordWithExpiration(", "originalCommit": "6b1f0cff5cd95a603429bbc55013eb9eb2d55527", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eab15ee72fc22433dd41cc22f47fd21c00befc4", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/flow/freeipa/user/handler/SetPasswordHandler.java b/freeipa/src/main/java/com/sequenceiq/freeipa/flow/freeipa/user/handler/SetPasswordHandler.java\nindex d114339acc..5e327542b4 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/flow/freeipa/user/handler/SetPasswordHandler.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/flow/freeipa/user/handler/SetPasswordHandler.java\n\n@@ -70,10 +68,11 @@ public class SetPasswordHandler implements EventHandler<SetPasswordRequest> {\n             MDCBuilder.buildMdcContext(stack);\n \n             FreeIpaClient freeIpaClient = freeIpaClientFactory.getFreeIpaClientForStack(stack);\n-            if (freeIpaClient.hasSetPasswordHashSupport()) {\n+            if (FreeIpaCapabilities.hasSetPasswordHashSupport(freeIpaClient.getConfig())) {\n                 LOGGER.info(\"IPA has password hash support, credentials information from UMS will be used.\");\n                 setPasswordHashFromUms(freeIpaClient, request.getUsername(), request.getUserCrn(), request.getExpirationInstant());\n             } else {\n+                LOGGER.info(\"IPA does not have password hash support, using the provided password directly.\");\n                 freeIpaClient.userSetPasswordWithExpiration(\n                         request.getUsername(), request.getPassword(), request.getExpirationInstant());\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxODI4MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7548#discussion_r391818280", "bodyText": "I like the re-wording. it's clearer", "author": "handavid", "createdAt": "2020-03-12T18:38:31Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UserSyncService.java", "diffHunk": "@@ -270,14 +269,12 @@ private void applyStateDifferenceToIpa(String environmentCrn, FreeIpaClient free\n \n     private void processUsersWorkloadCredentials(\n             String environmentCrn, UmsUsersState umsUsersState, FreeIpaClient freeIpaClient) throws IOException, FreeIpaClientException {\n-        Config config = freeIpaClient.getConfig();\n-        if (config.getIpauserobjectclasses() == null || !config.getIpauserobjectclasses().contains(Config.CDP_USER_ATTRIBUTE)) {\n-            LOGGER.debug(\"Doesn't seems like having config attribute, no credentials sync required for env:{}\", environmentCrn);\n+        if (!freeIpaClient.hasSetPasswordHashSupport()) {\n+            LOGGER.debug(\"IPA doesn't have password hash support, no credentials sync required for env:{}\", environmentCrn);", "originalCommit": "6b1f0cff5cd95a603429bbc55013eb9eb2d55527", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eab15ee72fc22433dd41cc22f47fd21c00befc4", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UserSyncService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UserSyncService.java\nindex f24f0602ab..ebee4949ed 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UserSyncService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UserSyncService.java\n\n@@ -269,7 +270,7 @@ public class UserSyncService {\n \n     private void processUsersWorkloadCredentials(\n             String environmentCrn, UmsUsersState umsUsersState, FreeIpaClient freeIpaClient) throws IOException, FreeIpaClientException {\n-        if (!freeIpaClient.hasSetPasswordHashSupport()) {\n+        if (!FreeIpaCapabilities.hasSetPasswordHashSupport(freeIpaClient.getConfig())) {\n             LOGGER.debug(\"IPA doesn't have password hash support, no credentials sync required for env:{}\", environmentCrn);\n             return;\n         }\n"}}, {"oid": "7eab15ee72fc22433dd41cc22f47fd21c00befc4", "url": "https://github.com/hortonworks/cloudbreak/commit/7eab15ee72fc22433dd41cc22f47fd21c00befc4", "message": "CDPCP-1601. set-password now uses credentials from control plane\n\nThe setPassword call now uses the password hash and keys from ums\nwhen possible. Note that we plan to deprecate / remove this endpoint\nsoon, but for now the UI is still calling it and this behavior\nwill keep the UMS keys consistent with the keys in FreeIPA, which\nis desirable for user keytab generation.", "committedDate": "2020-03-13T11:14:38Z", "type": "forcePushed"}, {"oid": "a6a3455c0ee0478440d97295ede21f968cb0eeca", "url": "https://github.com/hortonworks/cloudbreak/commit/a6a3455c0ee0478440d97295ede21f968cb0eeca", "message": "CDPCP-1601. set-password now uses credentials from control plane\n\nThe setPassword call now uses the password hash and keys from ums\nwhen possible. Note that we plan to deprecate / remove this endpoint\nsoon, but for now the UI is still calling it and this behavior\nwill keep the UMS keys consistent with the keys in FreeIPA, which\nis desirable for user keytab generation.", "committedDate": "2020-03-19T07:13:23Z", "type": "forcePushed"}, {"oid": "cfc2f8a5b592d63c677551b2da2f5ef322b7b1e6", "url": "https://github.com/hortonworks/cloudbreak/commit/cfc2f8a5b592d63c677551b2da2f5ef322b7b1e6", "message": "CDPCP-1601. set-password now uses credentials from control plane\n\nThe setPassword call now uses the password hash and keys from ums\nwhen possible. Note that we plan to deprecate / remove this endpoint\nsoon, but for now the UI is still calling it and this behavior\nwill keep the UMS keys consistent with the keys in FreeIPA, which\nis desirable for user keytab generation.", "committedDate": "2020-03-20T10:08:48Z", "type": "forcePushed"}, {"oid": "23530243cdcb408dc6775d7792c7eec2e9300673", "url": "https://github.com/hortonworks/cloudbreak/commit/23530243cdcb408dc6775d7792c7eec2e9300673", "message": "CDPCP-1601. set-password now uses credentials from control plane\n\nThe setPassword call now uses the password hash and keys from ums\nwhen possible. Note that we plan to deprecate / remove this endpoint\nsoon, but for now the UI is still calling it and this behavior\nwill keep the UMS keys consistent with the keys in FreeIPA, which\nis desirable for user keytab generation.", "committedDate": "2020-03-20T10:27:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxMTcyOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7548#discussion_r396811728", "bodyText": "the comment seems wrong. Maybe say \"Attribute name to store users passwords ....\"", "author": "giladwolff", "createdAt": "2020-03-23T23:10:39Z", "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaCapabilities.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package com.sequenceiq.freeipa.client;\n+\n+import com.sequenceiq.freeipa.client.model.Config;\n+\n+import java.util.Set;\n+\n+public class FreeIpaCapabilities {\n+\n+    // users for password setting in FreeIPA Plugin", "originalCommit": "23530243cdcb408dc6775d7792c7eec2e9300673", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1OTY5MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7548#discussion_r397659691", "bodyText": "fixed", "author": "aarman-cloudera", "createdAt": "2020-03-25T07:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxMTcyOA=="}], "type": "inlineReview", "revised_code": {"commit": "a8f4bc268ab8174adefe824a63dc3ee137e44774", "chunk": "diff --git a/freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaCapabilities.java b/freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaCapabilities.java\nindex 4ee3930ac9..119fb1ecb8 100644\n--- a/freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaCapabilities.java\n+++ b/freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaCapabilities.java\n\n@@ -6,11 +6,10 @@ import java.util.Set;\n \n public class FreeIpaCapabilities {\n \n-    // users for password setting in FreeIPA Plugin\n+    // Attribute name to store users passwords (enabled through FreeIPA plugin)\n     private static final String CDP_USER_ATTRIBUTE = \"cdpUserAttr\";\n \n     private FreeIpaCapabilities() {\n-        //not called\n     }\n \n     public static boolean hasSetPasswordHashSupport(Config ipaConfig) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxMjMwMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7548#discussion_r396812303", "bodyText": "why have it at all?", "author": "giladwolff", "createdAt": "2020-03-23T23:12:36Z", "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaCapabilities.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package com.sequenceiq.freeipa.client;\n+\n+import com.sequenceiq.freeipa.client.model.Config;\n+\n+import java.util.Set;\n+\n+public class FreeIpaCapabilities {\n+\n+    // users for password setting in FreeIPA Plugin\n+    private static final String CDP_USER_ATTRIBUTE = \"cdpUserAttr\";\n+\n+    private FreeIpaCapabilities() {", "originalCommit": "23530243cdcb408dc6775d7792c7eec2e9300673", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY2MTE1NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7548#discussion_r397661154", "bodyText": "This class only provides static methods and should not be instantiated, hence private constructor. There are other utility classes in this package do the same. Actually I'll remove the comment so that it's consistent with those classes.", "author": "aarman-cloudera", "createdAt": "2020-03-25T07:52:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxMjMwMw=="}], "type": "inlineReview", "revised_code": {"commit": "a8f4bc268ab8174adefe824a63dc3ee137e44774", "chunk": "diff --git a/freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaCapabilities.java b/freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaCapabilities.java\nindex 4ee3930ac9..119fb1ecb8 100644\n--- a/freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaCapabilities.java\n+++ b/freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaCapabilities.java\n\n@@ -6,11 +6,10 @@ import java.util.Set;\n \n public class FreeIpaCapabilities {\n \n-    // users for password setting in FreeIPA Plugin\n+    // Attribute name to store users passwords (enabled through FreeIPA plugin)\n     private static final String CDP_USER_ATTRIBUTE = \"cdpUserAttr\";\n \n     private FreeIpaCapabilities() {\n-        //not called\n     }\n \n     public static boolean hasSetPasswordHashSupport(Config ipaConfig) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxNDQ4Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7548#discussion_r396814486", "bodyText": "I assume that the userCrn is the actor for which the password is set? and that is extracted from the authentication context? Maybe call this actorCrn as the caller maybe a machine user? Also, how do you know the username at this point? This is the workload username, right?", "author": "giladwolff", "createdAt": "2020-03-23T23:19:12Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/freeipa/user/event/SetPasswordRequest.java", "diffHunk": "@@ -9,14 +9,17 @@\n \n     private final String username;\n \n+    private final String userCrn;\n+\n     private final String password;\n \n     private final Optional<Instant> expirationInstant;\n \n-    public SetPasswordRequest(Long stackId, String environment, String username, String password, Optional<Instant> expirationInstant) {\n+    public SetPasswordRequest(Long stackId, String environment, String username, String userCrn, String password, Optional<Instant> expirationInstant) {", "originalCommit": "23530243cdcb408dc6775d7792c7eec2e9300673", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY3ODQ4OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7548#discussion_r397678488", "bodyText": "Yes userCrn is the actor for which the password is set and is pulled from authentication context. Changing it to actorCrn does make sense though I'm seeing userCrn be used for both user and machine user in other places in this package. I think we can leave at as userCrn for now, since we will probably deprecate this path once single user sync is in.\nThe username is the workload username, the existing code calls ums to get the workload username from ums. See PasswordService.getUserIdFromUserCrn(...)", "author": "aarman-cloudera", "createdAt": "2020-03-25T08:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxNDQ4Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxNTI3OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7548#discussion_r396815279", "bodyText": "So not you, but there are nicer ways to do this, like using guava object helper.", "author": "giladwolff", "createdAt": "2020-03-23T23:20:24Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/freeipa/user/event/SetPasswordRequest.java", "diffHunk": "@@ -43,6 +50,7 @@ public String toString() {\n                 + \"stackId='\" + getResourceId() + '\\''\n                 + \"environment='\" + environment + '\\''\n                 + \"username='\" + username + '\\''\n+                + \"userCrn='\" + userCrn + '\\''", "originalCommit": "23530243cdcb408dc6775d7792c7eec2e9300673", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4MDM3OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7548#discussion_r397680379", "bodyText": "Ah nice one. I'll try it out on new classes. And I'll keep this one the same for consistency.", "author": "aarman-cloudera", "createdAt": "2020-03-25T08:32:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxNTI3OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxNzY4Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7548#discussion_r396817682", "bodyText": "I could swear that I've seen this code before.", "author": "giladwolff", "createdAt": "2020-03-23T23:23:19Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UmsCredentialProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.sequenceiq.freeipa.service.freeipa.user;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.GetActorWorkloadCredentialsResponse;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.freeipa.service.freeipa.user.model.WorkloadCredential;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.time.Instant;\n+import java.util.Optional;\n+\n+import static com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient.INTERNAL_ACTOR_CRN;\n+\n+@Component\n+public class UmsCredentialProvider {\n+\n+    @Inject\n+    private GrpcUmsClient grpcUmsClient;\n+\n+    public WorkloadCredential getCredentials(String userCrn, Optional<String> requestId) {", "originalCommit": "23530243cdcb408dc6775d7792c7eec2e9300673", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4MzEyOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7548#discussion_r397683128", "bodyText": "Well this was extracted off of UmsUsersStateProvider, and thanks to your comment I just realized I forgot remove it from there since it's no longer used (weird that code quality doesn't complain about unused functions).", "author": "aarman-cloudera", "createdAt": "2020-03-25T08:37:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxNzY4Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a8f4bc268ab8174adefe824a63dc3ee137e44774", "url": "https://github.com/hortonworks/cloudbreak/commit/a8f4bc268ab8174adefe824a63dc3ee137e44774", "message": "CDPCP-1601. set-password now uses credentials from control plane\n\nThe setPassword call now uses the password hash and keys from ums\nwhen possible. Note that we plan to deprecate / remove this endpoint\nsoon, but for now the UI is still calling it and this behavior\nwill keep the UMS keys consistent with the keys in FreeIPA, which\nis desirable for user keytab generation.", "committedDate": "2020-03-25T08:41:51Z", "type": "forcePushed"}, {"oid": "fca0d956bbe744cc0ecfdcd654bd319a8b645eee", "url": "https://github.com/hortonworks/cloudbreak/commit/fca0d956bbe744cc0ecfdcd654bd319a8b645eee", "message": "CDPCP-1601. set-password now uses credentials from control plane\n\nThe setPassword call now uses the password hash and keys from ums\nwhen possible. Note that we plan to deprecate / remove this endpoint\nsoon, but for now the UI is still calling it and this behavior\nwill keep the UMS keys consistent with the keys in FreeIPA, which\nis desirable for user keytab generation.", "committedDate": "2020-03-25T18:12:18Z", "type": "commit"}, {"oid": "fca0d956bbe744cc0ecfdcd654bd319a8b645eee", "url": "https://github.com/hortonworks/cloudbreak/commit/fca0d956bbe744cc0ecfdcd654bd319a8b645eee", "message": "CDPCP-1601. set-password now uses credentials from control plane\n\nThe setPassword call now uses the password hash and keys from ums\nwhen possible. Note that we plan to deprecate / remove this endpoint\nsoon, but for now the UI is still calling it and this behavior\nwill keep the UMS keys consistent with the keys in FreeIPA, which\nis desirable for user keytab generation.", "committedDate": "2020-03-25T18:12:18Z", "type": "forcePushed"}]}