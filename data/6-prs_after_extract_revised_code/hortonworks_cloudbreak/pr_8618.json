{"pr_number": 8618, "pr_title": "CB-8088 Periscope Downscaling should use YARN downscale recommendation", "pr_createdAt": "2020-07-22T11:55:04Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8618", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNzQ1NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8618#discussion_r459207455", "bodyText": "All of the history changes here are part of another patch right? Can you please backport that independently of this change?", "author": "sidseth", "createdAt": "2020-07-23T04:23:27Z", "path": "autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/CronTimeEvaluator.java", "diffHunk": "@@ -80,15 +108,21 @@ public void execute() {\n         long start = System.currentTimeMillis();\n         Cluster cluster = clusterService.findById(clusterId);\n         MDCBuilder.buildMdcContext(cluster);\n-        publishIfNeeded(alertRepository.findAllByCluster(clusterId));\n+        publishIfNeeded(alertRepository.findAllByClusterIdOrderById(clusterId));\n         LOGGER.debug(\"Finished cronTimeEvaluator for cluster {} in {} ms\", cluster.getStackCrn(), System.currentTimeMillis() - start);\n     }\n \n-    private void publishIfNeeded(List<TimeAlert> alerts) {\n+    protected void publishIfNeeded(List<TimeAlert> alerts) {\n+        TimeAlert triggeredAlert = null;\n         for (TimeAlert alert : alerts) {\n-            if (isPolicyAttached(alert) && isTrigger(alert)) {\n+            boolean alertTriggerable = isTrigger(alert);\n+            if (isPolicyAttached(alert) && alertTriggerable && null == triggeredAlert) {\n                 publish(alert);\n-                break;\n+                triggeredAlert = alert;", "originalCommit": "7ace5107cdbcce8a68711189fde7a107f32cce7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1Mjg5Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/8618#discussion_r459252896", "bodyText": "done.", "author": "smaniraju", "createdAt": "2020-07-23T07:08:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNzQ1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "2227619d9d0f047085f76afad0d07484d5b38835", "chunk": "diff --git a/autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/CronTimeEvaluator.java b/autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/CronTimeEvaluator.java\nindex 969b4788fe..7da25d1760 100644\n--- a/autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/CronTimeEvaluator.java\n+++ b/autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/CronTimeEvaluator.java\n\n@@ -113,16 +108,10 @@ public class CronTimeEvaluator extends EvaluatorExecutor {\n     }\n \n     protected void publishIfNeeded(List<TimeAlert> alerts) {\n-        TimeAlert triggeredAlert = null;\n         for (TimeAlert alert : alerts) {\n-            boolean alertTriggerable = isTrigger(alert);\n-            if (isPolicyAttached(alert) && alertTriggerable && null == triggeredAlert) {\n+            if (isPolicyAttached(alert) && isTrigger(alert)) {\n                 publish(alert);\n-                triggeredAlert = alert;\n-            } else if (alertTriggerable && triggeredAlert != null) {\n-                historyService.createEntry(ScalingStatus.TRIGGER_FAILED, String.format(\n-                        \"Autoscaling Schedule '%s' overlaps with '%s'.\", alert.getName(), triggeredAlert.getName()),\n-                        alert.getCluster());\n+                break;\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwODk4Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/8618#discussion_r459208986", "bodyText": "Is this needed if YARN is already processing this?", "author": "sidseth", "createdAt": "2020-07-23T04:31:10Z", "path": "autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/load/YarnResponseUtils.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.sequenceiq.periscope.monitor.evaluator.load;\n+\n+import static com.sequenceiq.periscope.monitor.evaluator.ScalingConstants.DEFAULT_MAX_SCALE_UP_STEP_SIZE;\n+\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.periscope.model.yarn.YarnScalingServiceV1Response;\n+\n+@Component\n+public class YarnResponseUtils {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(YarnResponseUtils.class);\n+\n+    public List<String> getYarnRecommendedDecommissionHostsForHostGroup(String clusterCrn, YarnScalingServiceV1Response yarnResponse,\n+            Map<String, String> hostFqdnsToInstanceId, int maxAllowedDownScale, Optional<Integer> mandatoryDownScaleCount) {\n+        Set<String> consideredNodeIds = new HashSet<>();\n+        Integer allowedDownscale = Math.max(maxAllowedDownScale, mandatoryDownScaleCount.orElse(0));\n+        List<String> decommissionNodes = yarnResponse.getScaleDownCandidates().orElse(List.of()).stream()\n+                .sorted(Comparator.comparingInt(YarnScalingServiceV1Response.DecommissionCandidate::getAmCount))", "originalCommit": "7ace5107cdbcce8a68711189fde7a107f32cce7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1MjgyNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8618#discussion_r459252827", "bodyText": "removed the sorting.", "author": "smaniraju", "createdAt": "2020-07-23T07:08:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwODk4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2227619d9d0f047085f76afad0d07484d5b38835", "chunk": "diff --git a/autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/load/YarnResponseUtils.java b/autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/load/YarnResponseUtils.java\nindex 49f5d97336..93ef5a553e 100644\n--- a/autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/load/YarnResponseUtils.java\n+++ b/autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/load/YarnResponseUtils.java\n\n@@ -2,7 +2,6 @@ package com.sequenceiq.periscope.monitor.evaluator.load;\n \n import static com.sequenceiq.periscope.monitor.evaluator.ScalingConstants.DEFAULT_MAX_SCALE_UP_STEP_SIZE;\n \n-import java.util.Comparator;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n"}}, {"oid": "2227619d9d0f047085f76afad0d07484d5b38835", "url": "https://github.com/hortonworks/cloudbreak/commit/2227619d9d0f047085f76afad0d07484d5b38835", "message": "DISTX-474 Schedule-Based downscaling integrated with YarnResponse\n\nSchedule-Based Downscaling integrated with Yarn Response.\nYarn Scaling Response refactored to be reused between Schedule-Based and Load-Based Autoscaling.", "committedDate": "2020-07-23T06:23:15Z", "type": "forcePushed"}, {"oid": "41e347a84ed633aa7cf927d391862a6276a03ddf", "url": "https://github.com/hortonworks/cloudbreak/commit/41e347a84ed633aa7cf927d391862a6276a03ddf", "message": "DISTX-474 Schedule-Based downscaling integrated with YarnResponse\n\nSchedule-Based Downscaling integrated with Yarn Response.\nYarn Scaling Response refactored to be reused between Schedule-Based and Load-Based Autoscaling.", "committedDate": "2020-07-23T07:30:55Z", "type": "commit"}, {"oid": "41e347a84ed633aa7cf927d391862a6276a03ddf", "url": "https://github.com/hortonworks/cloudbreak/commit/41e347a84ed633aa7cf927d391862a6276a03ddf", "message": "DISTX-474 Schedule-Based downscaling integrated with YarnResponse\n\nSchedule-Based Downscaling integrated with Yarn Response.\nYarn Scaling Response refactored to be reused between Schedule-Based and Load-Based Autoscaling.", "committedDate": "2020-07-23T07:30:55Z", "type": "forcePushed"}]}