{"pr_number": 8907, "pr_title": "CB-8597, CB-8604 Remove create new Single Resource Group option from \u2026", "pr_createdAt": "2020-09-02T07:02:13Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8907", "timeline": [{"oid": "d5aeabf1bc02ad0aedcaed9994d9ccf3946e6a14", "url": "https://github.com/hortonworks/cloudbreak/commit/d5aeabf1bc02ad0aedcaed9994d9ccf3946e6a14", "message": "CB-8597, CB-8604 Remove create new Single Resource Group option from backend, AND Storage Account deletion causes issues with other ENVs in the same Resource Group\n\nOn azure in case of cloudbreak created single RG termination required the RG to be empty. This meant that storage account and image had to be deleted as well. This, however had serious implications in other cases, like another environment using that storage account would be crippled. Partly because of these issues it was decided to remove the whole feature and leave images and the storage account in place.", "committedDate": "2020-09-02T08:22:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3ODEwNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8907#discussion_r481978104", "bodyText": "May I ask, why was this deleted?", "author": "pdarvasi", "createdAt": "2020-09-02T10:50:41Z", "path": "environment/src/test/java/com/sequenceiq/environment/environment/v1/converter/EnvironmentApiConverterTest.java", "diffHunk": "@@ -174,35 +172,6 @@ void testInitEditDto() {\n         verify(networkRequestToDtoConverter).convert(request.getNetwork());\n     }\n \n-    @ParameterizedTest\n-    @ValueSource(booleans = { false, true })\n-    void testAzureSingleRgEnabledWithEmptyAzureRequest(Boolean azureSingleResourceGroupDeploymentEnabled) {", "originalCommit": "d5aeabf1bc02ad0aedcaed9994d9ccf3946e6a14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4MTMxNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8907#discussion_r481981316", "bodyText": "Because now, even if entitlement for single RG exists, resources will not be deployed into a single automatically, only if the name of the RG and SINGLE usage is provided. From now on cloudbreak needs a name I think.", "author": "gergopapi2", "createdAt": "2020-09-02T10:56:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3ODEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5NDIzMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8907#discussion_r481994231", "bodyText": "After personal communication we agreed to reintroduce the test. I also added another one.", "author": "gergopapi2", "createdAt": "2020-09-02T11:22:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3ODEwNA=="}], "type": "inlineReview", "revised_code": {"commit": "a0210c9dd1d797f617d01f66ce8fa74b0f2bbecb", "chunk": "diff --git a/environment/src/test/java/com/sequenceiq/environment/environment/v1/converter/EnvironmentApiConverterTest.java b/environment/src/test/java/com/sequenceiq/environment/environment/v1/converter/EnvironmentApiConverterTest.java\nindex 329891a155..a4fe111e95 100644\n--- a/environment/src/test/java/com/sequenceiq/environment/environment/v1/converter/EnvironmentApiConverterTest.java\n+++ b/environment/src/test/java/com/sequenceiq/environment/environment/v1/converter/EnvironmentApiConverterTest.java\n\n@@ -172,6 +173,62 @@ public class EnvironmentApiConverterTest {\n         verify(networkRequestToDtoConverter).convert(request.getNetwork());\n     }\n \n+    @Test\n+    void testAzureSingleRgEnabledAndEmptyAzureRequest() {\n+        EnvironmentRequest request = createEnvironmentRequest(AZURE);\n+        request.setAzure(null);\n+        FreeIpaCreationDto freeIpaCreationDto = mock(FreeIpaCreationDto.class);\n+        EnvironmentTelemetry environmentTelemetry = mock(EnvironmentTelemetry.class);\n+        AccountTelemetry accountTelemetry = mock(AccountTelemetry.class);\n+        Features features = mock(Features.class);\n+        NetworkDto networkDto = mock(NetworkDto.class);\n+        when(credentialService.getCloudPlatformByCredential(anyString(), anyString(), any())).thenReturn(AZURE.name());\n+        when(freeIpaConverter.convert(request.getFreeIpa())).thenReturn(freeIpaCreationDto);\n+        when(accountTelemetry.getFeatures()).thenReturn(features);\n+        when(accountTelemetryService.getOrDefault(any())).thenReturn(accountTelemetry);\n+        when(telemetryApiConverter.convert(eq(request.getTelemetry()), any())).thenReturn(environmentTelemetry);\n+        when(tunnelConverter.convert(request.getTunnel())).thenReturn(request.getTunnel());\n+        when(networkRequestToDtoConverter.convert(request.getNetwork())).thenReturn(networkDto);\n+        when(entitlementService.azureSingleResourceGroupDeploymentEnabled(anyString(), anyString())).thenReturn(true);\n+\n+        EnvironmentCreationDto actual = underTest.initCreationDto(request);\n+\n+        assertEquals(ResourceGroupUsagePattern.USE_MULTIPLE,\n+                actual.getParameters().getAzureParametersDto().getAzureResourceGroupDto().getResourceGroupUsagePattern());\n+    }\n+\n+    @Test\n+    void testAzureSingleRgEnabledAndAzureRequestWithSingleUsageAndName() {\n+        EnvironmentRequest request = createEnvironmentRequest(AZURE);\n+        request.setAzure(AzureEnvironmentParameters.builder()\n+                .withAzureResourceGroup(\n+                        AzureResourceGroup.builder()\n+                                .withName(\"myResourceGroup\")\n+                                .withResourceGroupUsage(ResourceGroupUsage.SINGLE)\n+                                .build())\n+                .build());\n+        FreeIpaCreationDto freeIpaCreationDto = mock(FreeIpaCreationDto.class);\n+        EnvironmentTelemetry environmentTelemetry = mock(EnvironmentTelemetry.class);\n+        AccountTelemetry accountTelemetry = mock(AccountTelemetry.class);\n+        Features features = mock(Features.class);\n+        NetworkDto networkDto = mock(NetworkDto.class);\n+        when(credentialService.getCloudPlatformByCredential(anyString(), anyString(), any())).thenReturn(AZURE.name());\n+        when(freeIpaConverter.convert(request.getFreeIpa())).thenReturn(freeIpaCreationDto);\n+        when(accountTelemetry.getFeatures()).thenReturn(features);\n+        when(accountTelemetryService.getOrDefault(any())).thenReturn(accountTelemetry);\n+        when(telemetryApiConverter.convert(eq(request.getTelemetry()), any())).thenReturn(environmentTelemetry);\n+        when(tunnelConverter.convert(request.getTunnel())).thenReturn(request.getTunnel());\n+        when(networkRequestToDtoConverter.convert(request.getNetwork())).thenReturn(networkDto);\n+        when(entitlementService.azureSingleResourceGroupDeploymentEnabled(anyString(), anyString())).thenReturn(true);\n+\n+        EnvironmentCreationDto actual = underTest.initCreationDto(request);\n+\n+        assertEquals(ResourceGroupUsagePattern.USE_SINGLE,\n+                actual.getParameters().getAzureParametersDto().getAzureResourceGroupDto().getResourceGroupUsagePattern());\n+        assertEquals(\"myResourceGroup\",\n+                actual.getParameters().getAzureParametersDto().getAzureResourceGroupDto().getName());\n+    }\n+\n     private void assertLocation(LocationRequest request, LocationDto actual) {\n         assertEquals(request.getName(), actual.getName());\n         assertEquals(request.getLatitude(), actual.getLatitude());\n"}}, {"oid": "a0210c9dd1d797f617d01f66ce8fa74b0f2bbecb", "url": "https://github.com/hortonworks/cloudbreak/commit/a0210c9dd1d797f617d01f66ce8fa74b0f2bbecb", "message": "CB-8597, CB-8604 Remove create new Single Resource Group option from backend, AND Storage Account deletion causes issues with other ENVs in the same Resource Group\n\nOn azure in case of cloudbreak created single RG termination required the RG to be empty. This meant that storage account and image had to be deleted as well. This, however had serious implications in other cases, like another environment using that storage account would be crippled. Partly because of these issues it was decided to remove the whole feature and leave images and the storage account in place.", "committedDate": "2020-09-02T11:19:58Z", "type": "commit"}, {"oid": "a0210c9dd1d797f617d01f66ce8fa74b0f2bbecb", "url": "https://github.com/hortonworks/cloudbreak/commit/a0210c9dd1d797f617d01f66ce8fa74b0f2bbecb", "message": "CB-8597, CB-8604 Remove create new Single Resource Group option from backend, AND Storage Account deletion causes issues with other ENVs in the same Resource Group\n\nOn azure in case of cloudbreak created single RG termination required the RG to be empty. This meant that storage account and image had to be deleted as well. This, however had serious implications in other cases, like another environment using that storage account would be crippled. Partly because of these issues it was decided to remove the whole feature and leave images and the storage account in place.", "committedDate": "2020-09-02T11:19:58Z", "type": "forcePushed"}]}