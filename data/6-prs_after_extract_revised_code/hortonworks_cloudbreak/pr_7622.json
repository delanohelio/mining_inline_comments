{"pr_number": 7622, "pr_title": "CB-5944 List api methods should be filtered correctly based on Crn", "pr_createdAt": "2020-03-20T13:02:48Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7622", "timeline": [{"oid": "c3d4ed6d70aec9a9cb75989eaae849f8974d2a8f", "url": "https://github.com/hortonworks/cloudbreak/commit/c3d4ed6d70aec9a9cb75989eaae849f8974d2a8f", "message": "CB-5944 List api methods should be filtered correctly based on Crn", "committedDate": "2020-03-23T09:09:18Z", "type": "forcePushed"}, {"oid": "b6dd243b005d49d6fadb7d90d6a527f72aec3e4e", "url": "https://github.com/hortonworks/cloudbreak/commit/b6dd243b005d49d6fadb7d90d6a527f72aec3e4e", "message": "CB-5944 List api methods should be filtered correctly based on Crn", "committedDate": "2020-03-23T11:05:02Z", "type": "forcePushed"}, {"oid": "7a2e0217fb47b39f5b4e43b905a793647bffc373", "url": "https://github.com/hortonworks/cloudbreak/commit/7a2e0217fb47b39f5b4e43b905a793647bffc373", "message": "CB-5944 List api methods should be filtered correctly based on Crn", "committedDate": "2020-03-23T11:06:51Z", "type": "forcePushed"}, {"oid": "0499ccefea1f4d1541048a7ce3322fa3c7ea08ed", "url": "https://github.com/hortonworks/cloudbreak/commit/0499ccefea1f4d1541048a7ce3322fa3c7ea08ed", "message": "CB-5944 List api methods should be filtered correctly based on Crn", "committedDate": "2020-03-23T16:08:52Z", "type": "forcePushed"}, {"oid": "835d3ff6d85aef58e64491af46d42a2e66484ef1", "url": "https://github.com/hortonworks/cloudbreak/commit/835d3ff6d85aef58e64491af46d42a2e66484ef1", "message": "CB-5944 List api methods should be filtered correctly based on Crn", "committedDate": "2020-03-23T16:15:26Z", "type": "forcePushed"}, {"oid": "03af418e57bdeabcc8ce0cb82e24b6f24ef7d4bf", "url": "https://github.com/hortonworks/cloudbreak/commit/03af418e57bdeabcc8ce0cb82e24b6f24ef7d4bf", "message": "CB-5944 List api methods should be filtered correctly based on Crn", "committedDate": "2020-03-23T16:38:00Z", "type": "forcePushed"}, {"oid": "1d81befa0ba1340066f4f990ec7074bca5df7cf9", "url": "https://github.com/hortonworks/cloudbreak/commit/1d81befa0ba1340066f4f990ec7074bca5df7cf9", "message": "CB-5944 List api methods should be filtered correctly based on Crn", "committedDate": "2020-03-24T07:56:42Z", "type": "forcePushed"}, {"oid": "4758cd546246015a349b4503104e8e56535ad78f", "url": "https://github.com/hortonworks/cloudbreak/commit/4758cd546246015a349b4503104e8e56535ad78f", "message": "CB-5944 List api methods should be filtered correctly based on Crn", "committedDate": "2020-03-24T12:05:54Z", "type": "forcePushed"}, {"oid": "0d48fa6c265dbedf3f9fae58b14d2fcbbbae7693", "url": "https://github.com/hortonworks/cloudbreak/commit/0d48fa6c265dbedf3f9fae58b14d2fcbbbae7693", "message": "CB-5944 List api methods should be filtered correctly based on Crn", "committedDate": "2020-03-25T08:18:39Z", "type": "forcePushed"}, {"oid": "8339d970c0a7485333d2610b3b0e566bbceba566", "url": "https://github.com/hortonworks/cloudbreak/commit/8339d970c0a7485333d2610b3b0e566bbceba566", "message": "CB-5944 List api methods should be filtered correctly based on Crn", "committedDate": "2020-03-25T08:23:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxMDM4OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7622#discussion_r397710388", "bodyText": "The hasRights method before has an incorrect logging (called with 2 args although the log will contain only the first argument). Can you please fix that?\n\t        LOGGER.info(\"Checking whether member [] has rights [{}]\",\n                memberCrn,\n                rightChecks.stream().map(AuthorizationProto.RightCheck::getRight).collect(Collectors.toList()));\t                rightChecks.stream().map(AuthorizationProto.RightCheck::getRight).collect(Collectors.toList()))", "author": "foldik", "createdAt": "2020-03-25T09:24:55Z", "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "diffHunk": "@@ -379,13 +379,15 @@ public boolean checkRight(String actorCrn, String userCrn, String right, Optiona\n         }\n     }\n \n-    public List<Boolean> hasRights(String actorCrn, String memberCrn, Map<String, String> rightCheckMap, Optional<String> requestId) {\n+    public Map<String, Boolean> hasRights(String actorCrn, String memberCrn, List<String> resources, String right, Optional<String> requestId) {\n         List<AuthorizationProto.RightCheck> rightChecks = Lists.newArrayList();\n-        rightCheckMap.entrySet().stream().forEach(entry -> rightChecks.add(AuthorizationProto.RightCheck.newBuilder()\n-                .setResource(entry.getKey())\n-                .setRight(entry.getValue())\n+        resources.stream().forEach(resource -> rightChecks.add(AuthorizationProto.RightCheck.newBuilder()\n+                .setResource(resource)\n+                .setRight(right)\n                 .build()));\n-        return hasRights(actorCrn, memberCrn, rightChecks, requestId);\n+        List<Boolean> result = hasRights(actorCrn, memberCrn, rightChecks, requestId);", "originalCommit": "8339d970c0a7485333d2610b3b0e566bbceba566", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0NTEzOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7622#discussion_r397745139", "bodyText": "sure", "author": "horadla23", "createdAt": "2020-03-25T10:21:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxMDM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "2fc7ac44ef5aed31351e873d3e644a05b3524368", "chunk": "diff --git a/auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java b/auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java\nindex b1d8a080de..6eccaf2897 100644\n--- a/auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java\n+++ b/auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java\n\n@@ -380,11 +378,12 @@ public class GrpcUmsClient {\n     }\n \n     public Map<String, Boolean> hasRights(String actorCrn, String memberCrn, List<String> resources, String right, Optional<String> requestId) {\n-        List<AuthorizationProto.RightCheck> rightChecks = Lists.newArrayList();\n-        resources.stream().forEach(resource -> rightChecks.add(AuthorizationProto.RightCheck.newBuilder()\n-                .setResource(resource)\n-                .setRight(right)\n-                .build()));\n+        List<AuthorizationProto.RightCheck> rightChecks = resources.stream()\n+                .map(resource -> AuthorizationProto.RightCheck.newBuilder()\n+                    .setResource(resource)\n+                    .setRight(right)\n+                    .build())\n+                .collect(Collectors.toList());\n         List<Boolean> result = hasRights(actorCrn, memberCrn, rightChecks, requestId);\n         return resources.stream().collect(\n                 Collectors.toMap(resource -> resource, resource -> result.get(resources.indexOf(resource))));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxNjY4OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7622#discussion_r397716689", "bodyText": "Please rewire it to stream().map(...).collect() format.", "author": "foldik", "createdAt": "2020-03-25T09:34:47Z", "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "diffHunk": "@@ -379,13 +379,15 @@ public boolean checkRight(String actorCrn, String userCrn, String right, Optiona\n         }\n     }\n \n-    public List<Boolean> hasRights(String actorCrn, String memberCrn, Map<String, String> rightCheckMap, Optional<String> requestId) {\n+    public Map<String, Boolean> hasRights(String actorCrn, String memberCrn, List<String> resources, String right, Optional<String> requestId) {\n         List<AuthorizationProto.RightCheck> rightChecks = Lists.newArrayList();", "originalCommit": "8339d970c0a7485333d2610b3b0e566bbceba566", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0NjE3Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7622#discussion_r397746176", "bodyText": "ok, I do not know why I didn't use for the first time :)", "author": "horadla23", "createdAt": "2020-03-25T10:22:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxNjY4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2fc7ac44ef5aed31351e873d3e644a05b3524368", "chunk": "diff --git a/auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java b/auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java\nindex b1d8a080de..6eccaf2897 100644\n--- a/auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java\n+++ b/auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java\n\n@@ -380,11 +378,12 @@ public class GrpcUmsClient {\n     }\n \n     public Map<String, Boolean> hasRights(String actorCrn, String memberCrn, List<String> resources, String right, Optional<String> requestId) {\n-        List<AuthorizationProto.RightCheck> rightChecks = Lists.newArrayList();\n-        resources.stream().forEach(resource -> rightChecks.add(AuthorizationProto.RightCheck.newBuilder()\n-                .setResource(resource)\n-                .setRight(right)\n-                .build()));\n+        List<AuthorizationProto.RightCheck> rightChecks = resources.stream()\n+                .map(resource -> AuthorizationProto.RightCheck.newBuilder()\n+                    .setResource(resource)\n+                    .setRight(right)\n+                    .build())\n+                .collect(Collectors.toList());\n         List<Boolean> result = hasRights(actorCrn, memberCrn, rightChecks, requestId);\n         return resources.stream().collect(\n                 Collectors.toMap(resource -> resource, resource -> result.get(resources.indexOf(resource))));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyOTM4Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7622#discussion_r397729383", "bodyText": "Please use a Collectors.toSet() here.", "author": "foldik", "createdAt": "2020-03-25T09:55:21Z", "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/ListPermissionChecker.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package com.sequenceiq.authorization.service;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.authorization.annotation.FilterListBasedOnPermissions;\n+import com.sequenceiq.authorization.resource.AuthorizationFilterableResponseCollection;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.authorization.resource.ResourceCrnAwareApiModel;\n+import com.sequenceiq.authorization.resource.ListResponseAuthorizationType;\n+\n+@Component\n+public class ListPermissionChecker implements PermissionChecker<FilterListBasedOnPermissions> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ListPermissionChecker.class);\n+\n+    @Inject\n+    private CommonPermissionCheckingUtils commonPermissionCheckingUtils;\n+\n+    @Inject\n+    private List<ResourceBasedCrnProvider> resourceBasedCrnProviders;\n+\n+    private final Map<AuthorizationResourceType, ResourceBasedCrnProvider> resourceBasedCrnProviderMap = new HashMap<>();\n+\n+    @PostConstruct\n+    public void populateResourceBasedCrnProviderMap() {\n+        resourceBasedCrnProviders.forEach(resourceBasedCrnProvider ->\n+                resourceBasedCrnProviderMap.put(resourceBasedCrnProvider.getResourceType(), resourceBasedCrnProvider));\n+    }\n+\n+    @Override\n+    public <T extends Annotation> Object checkPermissions(T rawMethodAnnotation, AuthorizationResourceType resourceType, String userCrn,\n+            ProceedingJoinPoint proceedingJoinPoint, MethodSignature methodSignature, long startTime) {\n+        FilterListBasedOnPermissions methodAnnotation = (FilterListBasedOnPermissions) rawMethodAnnotation;\n+        AuthorizationResourceAction action = methodAnnotation.action();\n+        List<String> allResourceCrns = resourceBasedCrnProviderMap.get(resourceType).getResourceCrnsInAccount();\n+        List<String> filteredResourceCrns = commonPermissionCheckingUtils.getPermissionsForUserOnResources(resourceType, action, userCrn, allResourceCrns)\n+                .entrySet()\n+                .stream()\n+                .filter(Map.Entry::getValue)\n+                .map(Map.Entry::getKey)\n+                .collect(Collectors.toList());", "originalCommit": "8339d970c0a7485333d2610b3b0e566bbceba566", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0NzcwNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7622#discussion_r397747705", "bodyText": "ok", "author": "horadla23", "createdAt": "2020-03-25T10:25:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyOTM4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "2fc7ac44ef5aed31351e873d3e644a05b3524368", "chunk": "diff --git a/authorization-common/src/main/java/com/sequenceiq/authorization/service/ListPermissionChecker.java b/authorization-common/src/main/java/com/sequenceiq/authorization/service/ListPermissionChecker.java\nindex 28f1c485a0..00b88fd643 100644\n--- a/authorization-common/src/main/java/com/sequenceiq/authorization/service/ListPermissionChecker.java\n+++ b/authorization-common/src/main/java/com/sequenceiq/authorization/service/ListPermissionChecker.java\n\n@@ -50,12 +50,12 @@ public class ListPermissionChecker implements PermissionChecker<FilterListBasedO\n         FilterListBasedOnPermissions methodAnnotation = (FilterListBasedOnPermissions) rawMethodAnnotation;\n         AuthorizationResourceAction action = methodAnnotation.action();\n         List<String> allResourceCrns = resourceBasedCrnProviderMap.get(resourceType).getResourceCrnsInAccount();\n-        List<String> filteredResourceCrns = commonPermissionCheckingUtils.getPermissionsForUserOnResources(resourceType, action, userCrn, allResourceCrns)\n+        Set<String> filteredResourceCrns = commonPermissionCheckingUtils.getPermissionsForUserOnResources(resourceType, action, userCrn, allResourceCrns)\n                 .entrySet()\n                 .stream()\n                 .filter(Map.Entry::getValue)\n                 .map(Map.Entry::getKey)\n-                .collect(Collectors.toList());\n+                .collect(Collectors.toSet());\n         Object result = commonPermissionCheckingUtils.proceed(proceedingJoinPoint, methodSignature, startTime);\n         switch (ListResponseAuthorizationType.getByClass(result.getClass())) {\n             case SET:\n"}}, {"oid": "2fc7ac44ef5aed31351e873d3e644a05b3524368", "url": "https://github.com/hortonworks/cloudbreak/commit/2fc7ac44ef5aed31351e873d3e644a05b3524368", "message": "CB-5944 List api methods should be filtered correctly based on Crn", "committedDate": "2020-03-25T10:27:17Z", "type": "forcePushed"}, {"oid": "aff9bb4a8be51e42675d6c4b6bee5a43636df04b", "url": "https://github.com/hortonworks/cloudbreak/commit/aff9bb4a8be51e42675d6c4b6bee5a43636df04b", "message": "CB-5944 List api methods should be filtered correctly based on Crn", "committedDate": "2020-03-25T10:55:03Z", "type": "commit"}, {"oid": "aff9bb4a8be51e42675d6c4b6bee5a43636df04b", "url": "https://github.com/hortonworks/cloudbreak/commit/aff9bb4a8be51e42675d6c4b6bee5a43636df04b", "message": "CB-5944 List api methods should be filtered correctly based on Crn", "committedDate": "2020-03-25T10:55:03Z", "type": "forcePushed"}]}