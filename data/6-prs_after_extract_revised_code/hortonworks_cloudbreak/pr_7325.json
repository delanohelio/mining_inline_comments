{"pr_number": 7325, "pr_title": "CB-4502 Consolidate DistroX/SDX/FreeIPA/RDS tagging", "pr_createdAt": "2020-02-19T13:40:29Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7325", "timeline": [{"oid": "aa444218c42bd360a7e267467367d05a48f92616", "url": "https://github.com/hortonworks/cloudbreak/commit/aa444218c42bd360a7e267467367d05a48f92616", "message": "CB-4502 moved to the right package", "committedDate": "2020-02-21T11:20:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNzEwNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#discussion_r382517105", "bodyText": "is the com.sequenceiq.cloudbreak best package? what was the problem with template package? it is moved to the template core module", "author": "topolyai5", "createdAt": "2020-02-21T10:50:19Z", "path": "common-handlebar/src/main/java/com/sequenceiq/cloudbreak/EqHelper.java", "diffHunk": "@@ -1,4 +1,4 @@\n-package com.sequenceiq.cloudbreak.template;\n+package com.sequenceiq.cloudbreak;", "originalCommit": "f4e725fa20a8f76cefa15e690567bf17fc334fc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa444218c42bd360a7e267467367d05a48f92616", "chunk": "diff --git a/common-handlebar/src/main/java/com/sequenceiq/cloudbreak/EqHelper.java b/common-handlebar/src/main/java/com/sequenceiq/cloudbreak/handlebar/EqHelper.java\nsimilarity index 95%\nrename from common-handlebar/src/main/java/com/sequenceiq/cloudbreak/EqHelper.java\nrename to common-handlebar/src/main/java/com/sequenceiq/cloudbreak/handlebar/EqHelper.java\nindex 065b2e4aff..2e369fda16 100644\n--- a/common-handlebar/src/main/java/com/sequenceiq/cloudbreak/EqHelper.java\n+++ b/common-handlebar/src/main/java/com/sequenceiq/cloudbreak/handlebar/EqHelper.java\n\n@@ -1,4 +1,4 @@\n-package com.sequenceiq.cloudbreak;\n+package com.sequenceiq.cloudbreak.handlebar;\n \n import java.io.IOException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1NTg3MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#discussion_r382555870", "bodyText": "please add aTVF to exception", "author": "topolyai5", "createdAt": "2020-02-21T12:29:08Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/stack/StackService.java", "diffHunk": "@@ -537,11 +543,15 @@ private void setDefaultTags(Stack stack) {\n                     .withResourceCrn(stack.getResourceCrn())\n                     .withIsInternalTenant(internalTenant)\n                     .withUserName(stack.getCreator().getUserName())\n+                    .withAccountTags(accountTagClientService.list())\n+                    .withUserDefinedTags(userDefinedTags)\n                     .build();\n \n             Map<String, String> defaultTags = stackTag.getDefaultTags();\n             defaultTags.putAll(costTagging.prepareDefaultTags(request));\n-            stack.setTags(new Json(new StackTags(stackTag.getUserDefinedTags(), stackTag.getApplicationTags(), defaultTags)));\n+            stack.setTags(new Json(new StackTags(userDefinedTags, stackTag.getApplicationTags(), defaultTags)));\n+        } catch (AccountTagValidationFailed aTVF) {\n+            throw new BadRequestException(aTVF.getMessage());", "originalCommit": "aa444218c42bd360a7e267467367d05a48f92616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43b8bdd6444f85ef58a54f85ec5db397ea016039", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/service/stack/StackService.java b/core/src/main/java/com/sequenceiq/cloudbreak/service/stack/StackService.java\nindex 34f5808a74..25ccf64bc6 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/service/stack/StackService.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/service/stack/StackService.java\n\n@@ -544,14 +542,11 @@ public class StackService implements ResourceIdProvider {\n                     .withIsInternalTenant(internalTenant)\n                     .withUserName(stack.getCreator().getUserName())\n                     .withAccountTags(accountTagClientService.list())\n-                    .withUserDefinedTags(userDefinedTags)\n                     .build();\n \n             Map<String, String> defaultTags = stackTag.getDefaultTags();\n             defaultTags.putAll(costTagging.prepareDefaultTags(request));\n-            stack.setTags(new Json(new StackTags(userDefinedTags, stackTag.getApplicationTags(), defaultTags)));\n-        } catch (AccountTagValidationFailed aTVF) {\n-            throw new BadRequestException(aTVF.getMessage());\n+            stack.setTags(new Json(new StackTags(stackTag.getUserDefinedTags(), stackTag.getApplicationTags(), defaultTags)));\n         } catch (Exception e) {\n             LOGGER.debug(\"Exception during reading default tags.\", e);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1OTI5NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#discussion_r382559295", "bodyText": "Please add log message and e to the new exception", "author": "topolyai5", "createdAt": "2020-02-21T12:38:08Z", "path": "environment/src/main/java/com/sequenceiq/environment/tags/service/AccountTagService.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.sequenceiq.environment.tags.service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.environment.tags.domain.AccountTag;\n+import com.sequenceiq.environment.tags.repository.AccountTagRepository;\n+\n+@Service\n+public class AccountTagService {\n+\n+    private final AccountTagRepository accountTagRepository;\n+\n+    public AccountTagService(AccountTagRepository accountTagRepository) {\n+        this.accountTagRepository = accountTagRepository;\n+    }\n+\n+    public Set<AccountTag> get(String accountId) {\n+        return accountTagRepository.findAllInAccount(accountId);\n+    }\n+\n+    public List<AccountTag> create(List<AccountTag> accountTags, String accountId) {\n+        try {\n+            accountTagRepository.arhiveAll(accountId);\n+\n+            List<AccountTag> result = new ArrayList<>();\n+            for (AccountTag accountTag : accountTags) {\n+                accountTag.setAccountId(accountId);\n+                accountTag.setArchived(false);\n+                accountTag.setResourceCrn(createCRN(accountId));\n+                result.add(accountTagRepository.save(accountTag));\n+            }\n+            return result;\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AccessDeniedException(\"Access denied\");", "originalCommit": "aa444218c42bd360a7e267467367d05a48f92616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd02cc815c74155e27fcfe76bd777f14b82a6695", "chunk": "diff --git a/environment/src/main/java/com/sequenceiq/environment/tags/service/AccountTagService.java b/environment/src/main/java/com/sequenceiq/environment/tags/service/AccountTagService.java\nindex ea0dc7dc6b..8aea64dbcb 100644\n--- a/environment/src/main/java/com/sequenceiq/environment/tags/service/AccountTagService.java\n+++ b/environment/src/main/java/com/sequenceiq/environment/tags/service/AccountTagService.java\n\n@@ -39,7 +39,7 @@ public class AccountTagService {\n             }\n             return result;\n         } catch (DataIntegrityViolationException e) {\n-            throw new AccessDeniedException(\"Access denied\");\n+            throw new AccessDeniedException(\"Access denied\", e);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2MzIxOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#discussion_r382563219", "bodyText": "maybe the e would be good in the log message", "author": "topolyai5", "createdAt": "2020-02-21T12:47:58Z", "path": "template-manager-tag/src/main/java/com/sequenceiq/cloudbreak/tag/CentralTagUpdater.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package com.sequenceiq.cloudbreak.tag;\n+\n+import java.io.IOException;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class CentralTagUpdater {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CentralTagUpdater.class);\n+\n+    @Inject\n+    private TagTemplateProcessor tagTemplateProcessor;\n+\n+    public String getTagText(TagPreparationObject model, String tagText) {\n+        try {\n+            tagText = updateTagConfiguration(model, tagText);\n+        } catch (IOException e) {\n+            String message = String.format(\"Unable to update tag with default properties which was: %s\", tagText);\n+            LOGGER.warn(message);", "originalCommit": "aa444218c42bd360a7e267467367d05a48f92616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd02cc815c74155e27fcfe76bd777f14b82a6695", "chunk": "diff --git a/template-manager-tag/src/main/java/com/sequenceiq/cloudbreak/tag/CentralTagUpdater.java b/template-manager-tag/src/main/java/com/sequenceiq/cloudbreak/tag/CentralTagUpdater.java\nindex 7fa9c47f8c..140fd2769b 100644\n--- a/template-manager-tag/src/main/java/com/sequenceiq/cloudbreak/tag/CentralTagUpdater.java\n+++ b/template-manager-tag/src/main/java/com/sequenceiq/cloudbreak/tag/CentralTagUpdater.java\n\n@@ -21,7 +21,7 @@ public class CentralTagUpdater {\n             tagText = updateTagConfiguration(model, tagText);\n         } catch (IOException e) {\n             String message = String.format(\"Unable to update tag with default properties which was: %s\", tagText);\n-            LOGGER.warn(message);\n+            LOGGER.warn(message, e);\n             throw new TagProcessingException(message, e);\n         }\n         return tagText;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2MzU5Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#discussion_r382563596", "bodyText": "if you add a comment, you can separate in a method", "author": "topolyai5", "createdAt": "2020-02-21T12:48:48Z", "path": "template-manager-tag/src/main/java/com/sequenceiq/cloudbreak/tag/DefaultCostTaggingService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.sequenceiq.cloudbreak.tag;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.google.common.base.Strings;\n+import com.sequenceiq.cloudbreak.tag.request.CDPTagGenerationRequest;\n+import com.sequenceiq.cloudbreak.tag.request.CDPTagMergeRequest;\n+\n+@Service\n+public class DefaultCostTaggingService implements CostTagging {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultCostTaggingService.class);\n+\n+    @Inject\n+    private CentralTagUpdater centralTagUpdater;\n+\n+    @Override\n+    public Map<String, String> prepareDefaultTags(CDPTagGenerationRequest request) {\n+        LOGGER.debug(\"About to prepare default tag(s)...\");\n+        Map<String, String> result = new HashMap<>();\n+        String platform = request.getPlatform();\n+        validateResourceTagsNotContainTheSameTag(request.getUserDefinedTags(), request.getAccountTags());\n+        addCDPCrnIfPresent(result, DefaultApplicationTag.ENVIRONMENT_CRN, request.getEnvironmentCrn(), platform);\n+        addCDPCrnIfPresent(result, DefaultApplicationTag.CREATOR_CRN, request.getCreatorCrn(), platform);\n+        addCDPCrnIfPresent(result, DefaultApplicationTag.RESOURCE_CRN, request.getResourceCrn(), platform);\n+\n+        // Generate Account Tags", "originalCommit": "aa444218c42bd360a7e267467367d05a48f92616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43b8bdd6444f85ef58a54f85ec5db397ea016039", "chunk": "diff --git a/template-manager-tag/src/main/java/com/sequenceiq/cloudbreak/tag/DefaultCostTaggingService.java b/template-manager-tag/src/main/java/com/sequenceiq/cloudbreak/tag/DefaultCostTaggingService.java\nindex 1fa1d924f1..b6925a8f88 100644\n--- a/template-manager-tag/src/main/java/com/sequenceiq/cloudbreak/tag/DefaultCostTaggingService.java\n+++ b/template-manager-tag/src/main/java/com/sequenceiq/cloudbreak/tag/DefaultCostTaggingService.java\n\n@@ -2,8 +2,6 @@ package com.sequenceiq.cloudbreak.tag;\n \n import java.util.HashMap;\n import java.util.Map;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2NzA2Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#discussion_r382567067", "bodyText": "if you use Clock, you can use this method from there (and the other places as well)", "author": "topolyai5", "createdAt": "2020-02-21T12:57:10Z", "path": "template-manager-tag/src/main/java/com/sequenceiq/cloudbreak/tag/TagTemplateProcessor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.sequenceiq.cloudbreak.tag;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.github.jknack.handlebars.Handlebars;\n+import com.github.jknack.handlebars.Template;\n+import com.sequenceiq.cloudbreak.handlebar.HandlebarTemplate;\n+import com.sequenceiq.cloudbreak.handlebar.HandlebarUtils;\n+import com.sequenceiq.cloudbreak.common.json.JsonUtil;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+\n+@Component\n+public class TagTemplateProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TagTemplateProcessor.class);\n+\n+    private final Handlebars handlebars = HandlebarUtils.handlebars();\n+\n+    @Inject\n+    private Clock clock;\n+\n+    public String process(String sourceTemplate, TagPreparationObject model) throws IOException {\n+        long started = System.currentTimeMillis();", "originalCommit": "aa444218c42bd360a7e267467367d05a48f92616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU4NTEwOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#discussion_r382585108", "bodyText": "I think this is different here", "author": "doktoric", "createdAt": "2020-02-21T13:39:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2NzA2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "43b8bdd6444f85ef58a54f85ec5db397ea016039", "chunk": "diff --git a/template-manager-tag/src/main/java/com/sequenceiq/cloudbreak/tag/TagTemplateProcessor.java b/template-manager-tag/src/main/java/com/sequenceiq/cloudbreak/tag/TagTemplateProcessor.java\nindex 2b095ce8f7..1ba83f35f8 100644\n--- a/template-manager-tag/src/main/java/com/sequenceiq/cloudbreak/tag/TagTemplateProcessor.java\n+++ b/template-manager-tag/src/main/java/com/sequenceiq/cloudbreak/tag/TagTemplateProcessor.java\n\n@@ -12,8 +12,8 @@ import org.springframework.stereotype.Component;\n \n import com.github.jknack.handlebars.Handlebars;\n import com.github.jknack.handlebars.Template;\n-import com.sequenceiq.cloudbreak.handlebar.HandlebarTemplate;\n-import com.sequenceiq.cloudbreak.handlebar.HandlebarUtils;\n+import com.sequenceiq.cloudbreak.HandlebarTemplate;\n+import com.sequenceiq.cloudbreak.HandlebarUtils;\n import com.sequenceiq.cloudbreak.common.json.JsonUtil;\n import com.sequenceiq.cloudbreak.common.service.Clock;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2ODM4Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#discussion_r382568382", "bodyText": "hm, copy/paste pattern for test name and tested method?", "author": "topolyai5", "createdAt": "2020-02-21T13:00:16Z", "path": "template-manager-tag/src/test/java/com/sequenceiq/cloudbreak/DefaultCostTaggingServiceAccountTagValidationTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.sequenceiq.cloudbreak;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.tag.AccountTagValidationFailed;\n+import com.sequenceiq.cloudbreak.tag.CentralTagUpdater;\n+import com.sequenceiq.cloudbreak.tag.DefaultCostTaggingService;\n+import com.sequenceiq.cloudbreak.tag.request.CDPTagGenerationRequest;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class DefaultCostTaggingServiceAccountTagValidationTest {\n+\n+    @Mock\n+    private CentralTagUpdater centralTagUpdater;\n+\n+    @InjectMocks\n+    private DefaultCostTaggingService underTest;\n+\n+    @Test\n+    void getWithResourceTagValidationWhenUserDefinedResourceTagsIsNull() throws AccountTagValidationFailed {\n+        underTest.prepareDefaultTags(tagRequest(null));", "originalCommit": "aa444218c42bd360a7e267467367d05a48f92616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43b8bdd6444f85ef58a54f85ec5db397ea016039", "chunk": "diff --git a/template-manager-tag/src/test/java/com/sequenceiq/cloudbreak/DefaultCostTaggingServiceAccountTagValidationTest.java b/template-manager-tag/src/test/java/com/sequenceiq/cloudbreak/DefaultCostTaggingServiceAccountTagValidationTest.java\ndeleted file mode 100644\nindex d91a501237..0000000000\n--- a/template-manager-tag/src/test/java/com/sequenceiq/cloudbreak/DefaultCostTaggingServiceAccountTagValidationTest.java\n+++ /dev/null\n\n@@ -1,104 +0,0 @@\n-package com.sequenceiq.cloudbreak;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Objects;\n-\n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import org.mockito.InjectMocks;\n-import org.mockito.Mock;\n-import org.mockito.junit.jupiter.MockitoExtension;\n-\n-import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n-import com.sequenceiq.cloudbreak.tag.AccountTagValidationFailed;\n-import com.sequenceiq.cloudbreak.tag.CentralTagUpdater;\n-import com.sequenceiq.cloudbreak.tag.DefaultCostTaggingService;\n-import com.sequenceiq.cloudbreak.tag.request.CDPTagGenerationRequest;\n-\n-@ExtendWith(MockitoExtension.class)\n-public class DefaultCostTaggingServiceAccountTagValidationTest {\n-\n-    @Mock\n-    private CentralTagUpdater centralTagUpdater;\n-\n-    @InjectMocks\n-    private DefaultCostTaggingService underTest;\n-\n-    @Test\n-    void getWithResourceTagValidationWhenUserDefinedResourceTagsIsNull() throws AccountTagValidationFailed {\n-        underTest.prepareDefaultTags(tagRequest(null));\n-    }\n-\n-    @Test\n-    void getWithResourceTagValidationWhenUserDefinedResourceTagsIsEmpty() throws AccountTagValidationFailed {\n-        underTest.prepareDefaultTags(tagRequest(new HashMap<>()));\n-    }\n-\n-    @Test\n-    void getWithResourceTagValidationWhenUserDefinedResourceTagsNotContainsAccountTagsKey() throws AccountTagValidationFailed {\n-        Map<String, String> userDefinedTags = Map.of(\"aNotCollidingKey\", \"aValue\");\n-\n-        underTest.prepareDefaultTags(tagRequest(userDefinedTags));\n-    }\n-\n-    @Test\n-    void getWithResourceTagValidationWhenUserDefinedResourceTagsContainsAccountTagsKey() {\n-        String collidingTagKey = \"accountTagKey2\";\n-        Map<String, String> userDefinedTags = Map.of(collidingTagKey, \"a colliding key's Value\");\n-\n-        AccountTagValidationFailed exception = Assertions.assertThrows(AccountTagValidationFailed.class,\n-                () -> underTest.prepareDefaultTags(tagRequest(userDefinedTags)));\n-\n-        Assertions.assertTrue(exception.getMessage().contains(collidingTagKey));\n-    }\n-\n-    @Test\n-    void getWithResourceTagValidationWhenUserDefinedResourceTagsContainsMultipleAccountTagsKey() {\n-        String collidingTagKey = \"accountTagKey2\";\n-        String collidingTagKey2 = \"accountTagKey\";\n-        Map<String, String> resourceTags = Map.of(\n-                collidingTagKey, \"a colliding key's Value\",\n-                collidingTagKey2, \"an other colliding key's value\");\n-\n-        AccountTagValidationFailed exception = Assertions.assertThrows(AccountTagValidationFailed.class,\n-                () -> underTest.prepareDefaultTags(tagRequest(resourceTags)));\n-\n-        Assertions.assertTrue(exception.getMessage().contains(collidingTagKey));\n-        Assertions.assertTrue(exception.getMessage().contains(collidingTagKey2));\n-    }\n-\n-    @Test\n-    void getWithResourceTagValidationWhenAccountTagsIsEmpty() throws AccountTagValidationFailed {\n-        String notCollidingTagKey = \"tagKey2\";\n-        String notCollidingTagKey2 = \"tagKey\";\n-        Map<String, String> resourceTags = Map.of(\n-                notCollidingTagKey, \"a not colliding key's Value\",\n-                notCollidingTagKey2, \"another not colliding key's value\");\n-\n-        underTest.prepareDefaultTags(tagRequest(resourceTags, new HashMap<>()));\n-    }\n-\n-    private CDPTagGenerationRequest tagRequest(Map<String, String> userDefinedResourceTags) {\n-        return tagRequest(userDefinedResourceTags, null);\n-    }\n-\n-    private CDPTagGenerationRequest tagRequest(Map<String, String> userDefinedResourceTags, Map<String, String> accountTags) {\n-        Map<String, String> defaultccountTagKey = Map.of(\"accountTagKey\", \"accountTagValue\",\n-                \"accountTagKey2\", \"accountTagValue2\");\n-\n-        return CDPTagGenerationRequest.Builder.builder()\n-                .withEnvironmentCrn(\"environment-crn\")\n-                .withCreatorCrn(\"creator-crn\")\n-                .withResourceCrn(\"resource-crn\")\n-                .withUserName(\"apache1@apache.com\")\n-                .withPlatform(CloudPlatform.MOCK.name())\n-                .withAccountId(\"pepsi\")\n-                .withIsInternalTenant(true)\n-                .withSourceMap(new HashMap<>())\n-                .withUserDefinedTags(userDefinedResourceTags)\n-                .withAccountTags(Objects.requireNonNullElseGet(accountTags, () -> defaultccountTagKey))\n-                .build();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2ODc0Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#discussion_r382568743", "bodyText": "what are you testing here?", "author": "topolyai5", "createdAt": "2020-02-21T13:00:57Z", "path": "template-manager-tag/src/test/java/com/sequenceiq/cloudbreak/DefaultCostTaggingServiceAccountTagValidationTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.sequenceiq.cloudbreak;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.tag.AccountTagValidationFailed;\n+import com.sequenceiq.cloudbreak.tag.CentralTagUpdater;\n+import com.sequenceiq.cloudbreak.tag.DefaultCostTaggingService;\n+import com.sequenceiq.cloudbreak.tag.request.CDPTagGenerationRequest;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class DefaultCostTaggingServiceAccountTagValidationTest {\n+\n+    @Mock\n+    private CentralTagUpdater centralTagUpdater;\n+\n+    @InjectMocks\n+    private DefaultCostTaggingService underTest;\n+\n+    @Test\n+    void getWithResourceTagValidationWhenUserDefinedResourceTagsIsNull() throws AccountTagValidationFailed {", "originalCommit": "aa444218c42bd360a7e267467367d05a48f92616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43b8bdd6444f85ef58a54f85ec5db397ea016039", "chunk": "diff --git a/template-manager-tag/src/test/java/com/sequenceiq/cloudbreak/DefaultCostTaggingServiceAccountTagValidationTest.java b/template-manager-tag/src/test/java/com/sequenceiq/cloudbreak/DefaultCostTaggingServiceAccountTagValidationTest.java\ndeleted file mode 100644\nindex d91a501237..0000000000\n--- a/template-manager-tag/src/test/java/com/sequenceiq/cloudbreak/DefaultCostTaggingServiceAccountTagValidationTest.java\n+++ /dev/null\n\n@@ -1,104 +0,0 @@\n-package com.sequenceiq.cloudbreak;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Objects;\n-\n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import org.mockito.InjectMocks;\n-import org.mockito.Mock;\n-import org.mockito.junit.jupiter.MockitoExtension;\n-\n-import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n-import com.sequenceiq.cloudbreak.tag.AccountTagValidationFailed;\n-import com.sequenceiq.cloudbreak.tag.CentralTagUpdater;\n-import com.sequenceiq.cloudbreak.tag.DefaultCostTaggingService;\n-import com.sequenceiq.cloudbreak.tag.request.CDPTagGenerationRequest;\n-\n-@ExtendWith(MockitoExtension.class)\n-public class DefaultCostTaggingServiceAccountTagValidationTest {\n-\n-    @Mock\n-    private CentralTagUpdater centralTagUpdater;\n-\n-    @InjectMocks\n-    private DefaultCostTaggingService underTest;\n-\n-    @Test\n-    void getWithResourceTagValidationWhenUserDefinedResourceTagsIsNull() throws AccountTagValidationFailed {\n-        underTest.prepareDefaultTags(tagRequest(null));\n-    }\n-\n-    @Test\n-    void getWithResourceTagValidationWhenUserDefinedResourceTagsIsEmpty() throws AccountTagValidationFailed {\n-        underTest.prepareDefaultTags(tagRequest(new HashMap<>()));\n-    }\n-\n-    @Test\n-    void getWithResourceTagValidationWhenUserDefinedResourceTagsNotContainsAccountTagsKey() throws AccountTagValidationFailed {\n-        Map<String, String> userDefinedTags = Map.of(\"aNotCollidingKey\", \"aValue\");\n-\n-        underTest.prepareDefaultTags(tagRequest(userDefinedTags));\n-    }\n-\n-    @Test\n-    void getWithResourceTagValidationWhenUserDefinedResourceTagsContainsAccountTagsKey() {\n-        String collidingTagKey = \"accountTagKey2\";\n-        Map<String, String> userDefinedTags = Map.of(collidingTagKey, \"a colliding key's Value\");\n-\n-        AccountTagValidationFailed exception = Assertions.assertThrows(AccountTagValidationFailed.class,\n-                () -> underTest.prepareDefaultTags(tagRequest(userDefinedTags)));\n-\n-        Assertions.assertTrue(exception.getMessage().contains(collidingTagKey));\n-    }\n-\n-    @Test\n-    void getWithResourceTagValidationWhenUserDefinedResourceTagsContainsMultipleAccountTagsKey() {\n-        String collidingTagKey = \"accountTagKey2\";\n-        String collidingTagKey2 = \"accountTagKey\";\n-        Map<String, String> resourceTags = Map.of(\n-                collidingTagKey, \"a colliding key's Value\",\n-                collidingTagKey2, \"an other colliding key's value\");\n-\n-        AccountTagValidationFailed exception = Assertions.assertThrows(AccountTagValidationFailed.class,\n-                () -> underTest.prepareDefaultTags(tagRequest(resourceTags)));\n-\n-        Assertions.assertTrue(exception.getMessage().contains(collidingTagKey));\n-        Assertions.assertTrue(exception.getMessage().contains(collidingTagKey2));\n-    }\n-\n-    @Test\n-    void getWithResourceTagValidationWhenAccountTagsIsEmpty() throws AccountTagValidationFailed {\n-        String notCollidingTagKey = \"tagKey2\";\n-        String notCollidingTagKey2 = \"tagKey\";\n-        Map<String, String> resourceTags = Map.of(\n-                notCollidingTagKey, \"a not colliding key's Value\",\n-                notCollidingTagKey2, \"another not colliding key's value\");\n-\n-        underTest.prepareDefaultTags(tagRequest(resourceTags, new HashMap<>()));\n-    }\n-\n-    private CDPTagGenerationRequest tagRequest(Map<String, String> userDefinedResourceTags) {\n-        return tagRequest(userDefinedResourceTags, null);\n-    }\n-\n-    private CDPTagGenerationRequest tagRequest(Map<String, String> userDefinedResourceTags, Map<String, String> accountTags) {\n-        Map<String, String> defaultccountTagKey = Map.of(\"accountTagKey\", \"accountTagValue\",\n-                \"accountTagKey2\", \"accountTagValue2\");\n-\n-        return CDPTagGenerationRequest.Builder.builder()\n-                .withEnvironmentCrn(\"environment-crn\")\n-                .withCreatorCrn(\"creator-crn\")\n-                .withResourceCrn(\"resource-crn\")\n-                .withUserName(\"apache1@apache.com\")\n-                .withPlatform(CloudPlatform.MOCK.name())\n-                .withAccountId(\"pepsi\")\n-                .withIsInternalTenant(true)\n-                .withSourceMap(new HashMap<>())\n-                .withUserDefinedTags(userDefinedResourceTags)\n-                .withAccountTags(Objects.requireNonNullElseGet(accountTags, () -> defaultccountTagKey))\n-                .build();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2ODgwNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#discussion_r382568807", "bodyText": "what are you testing here?", "author": "topolyai5", "createdAt": "2020-02-21T13:01:11Z", "path": "template-manager-tag/src/test/java/com/sequenceiq/cloudbreak/DefaultCostTaggingServiceAccountTagValidationTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.sequenceiq.cloudbreak;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.tag.AccountTagValidationFailed;\n+import com.sequenceiq.cloudbreak.tag.CentralTagUpdater;\n+import com.sequenceiq.cloudbreak.tag.DefaultCostTaggingService;\n+import com.sequenceiq.cloudbreak.tag.request.CDPTagGenerationRequest;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class DefaultCostTaggingServiceAccountTagValidationTest {\n+\n+    @Mock\n+    private CentralTagUpdater centralTagUpdater;\n+\n+    @InjectMocks\n+    private DefaultCostTaggingService underTest;\n+\n+    @Test\n+    void getWithResourceTagValidationWhenUserDefinedResourceTagsIsNull() throws AccountTagValidationFailed {\n+        underTest.prepareDefaultTags(tagRequest(null));\n+    }\n+\n+    @Test\n+    void getWithResourceTagValidationWhenUserDefinedResourceTagsIsEmpty() throws AccountTagValidationFailed {", "originalCommit": "aa444218c42bd360a7e267467367d05a48f92616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43b8bdd6444f85ef58a54f85ec5db397ea016039", "chunk": "diff --git a/template-manager-tag/src/test/java/com/sequenceiq/cloudbreak/DefaultCostTaggingServiceAccountTagValidationTest.java b/template-manager-tag/src/test/java/com/sequenceiq/cloudbreak/DefaultCostTaggingServiceAccountTagValidationTest.java\ndeleted file mode 100644\nindex d91a501237..0000000000\n--- a/template-manager-tag/src/test/java/com/sequenceiq/cloudbreak/DefaultCostTaggingServiceAccountTagValidationTest.java\n+++ /dev/null\n\n@@ -1,104 +0,0 @@\n-package com.sequenceiq.cloudbreak;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Objects;\n-\n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import org.mockito.InjectMocks;\n-import org.mockito.Mock;\n-import org.mockito.junit.jupiter.MockitoExtension;\n-\n-import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n-import com.sequenceiq.cloudbreak.tag.AccountTagValidationFailed;\n-import com.sequenceiq.cloudbreak.tag.CentralTagUpdater;\n-import com.sequenceiq.cloudbreak.tag.DefaultCostTaggingService;\n-import com.sequenceiq.cloudbreak.tag.request.CDPTagGenerationRequest;\n-\n-@ExtendWith(MockitoExtension.class)\n-public class DefaultCostTaggingServiceAccountTagValidationTest {\n-\n-    @Mock\n-    private CentralTagUpdater centralTagUpdater;\n-\n-    @InjectMocks\n-    private DefaultCostTaggingService underTest;\n-\n-    @Test\n-    void getWithResourceTagValidationWhenUserDefinedResourceTagsIsNull() throws AccountTagValidationFailed {\n-        underTest.prepareDefaultTags(tagRequest(null));\n-    }\n-\n-    @Test\n-    void getWithResourceTagValidationWhenUserDefinedResourceTagsIsEmpty() throws AccountTagValidationFailed {\n-        underTest.prepareDefaultTags(tagRequest(new HashMap<>()));\n-    }\n-\n-    @Test\n-    void getWithResourceTagValidationWhenUserDefinedResourceTagsNotContainsAccountTagsKey() throws AccountTagValidationFailed {\n-        Map<String, String> userDefinedTags = Map.of(\"aNotCollidingKey\", \"aValue\");\n-\n-        underTest.prepareDefaultTags(tagRequest(userDefinedTags));\n-    }\n-\n-    @Test\n-    void getWithResourceTagValidationWhenUserDefinedResourceTagsContainsAccountTagsKey() {\n-        String collidingTagKey = \"accountTagKey2\";\n-        Map<String, String> userDefinedTags = Map.of(collidingTagKey, \"a colliding key's Value\");\n-\n-        AccountTagValidationFailed exception = Assertions.assertThrows(AccountTagValidationFailed.class,\n-                () -> underTest.prepareDefaultTags(tagRequest(userDefinedTags)));\n-\n-        Assertions.assertTrue(exception.getMessage().contains(collidingTagKey));\n-    }\n-\n-    @Test\n-    void getWithResourceTagValidationWhenUserDefinedResourceTagsContainsMultipleAccountTagsKey() {\n-        String collidingTagKey = \"accountTagKey2\";\n-        String collidingTagKey2 = \"accountTagKey\";\n-        Map<String, String> resourceTags = Map.of(\n-                collidingTagKey, \"a colliding key's Value\",\n-                collidingTagKey2, \"an other colliding key's value\");\n-\n-        AccountTagValidationFailed exception = Assertions.assertThrows(AccountTagValidationFailed.class,\n-                () -> underTest.prepareDefaultTags(tagRequest(resourceTags)));\n-\n-        Assertions.assertTrue(exception.getMessage().contains(collidingTagKey));\n-        Assertions.assertTrue(exception.getMessage().contains(collidingTagKey2));\n-    }\n-\n-    @Test\n-    void getWithResourceTagValidationWhenAccountTagsIsEmpty() throws AccountTagValidationFailed {\n-        String notCollidingTagKey = \"tagKey2\";\n-        String notCollidingTagKey2 = \"tagKey\";\n-        Map<String, String> resourceTags = Map.of(\n-                notCollidingTagKey, \"a not colliding key's Value\",\n-                notCollidingTagKey2, \"another not colliding key's value\");\n-\n-        underTest.prepareDefaultTags(tagRequest(resourceTags, new HashMap<>()));\n-    }\n-\n-    private CDPTagGenerationRequest tagRequest(Map<String, String> userDefinedResourceTags) {\n-        return tagRequest(userDefinedResourceTags, null);\n-    }\n-\n-    private CDPTagGenerationRequest tagRequest(Map<String, String> userDefinedResourceTags, Map<String, String> accountTags) {\n-        Map<String, String> defaultccountTagKey = Map.of(\"accountTagKey\", \"accountTagValue\",\n-                \"accountTagKey2\", \"accountTagValue2\");\n-\n-        return CDPTagGenerationRequest.Builder.builder()\n-                .withEnvironmentCrn(\"environment-crn\")\n-                .withCreatorCrn(\"creator-crn\")\n-                .withResourceCrn(\"resource-crn\")\n-                .withUserName(\"apache1@apache.com\")\n-                .withPlatform(CloudPlatform.MOCK.name())\n-                .withAccountId(\"pepsi\")\n-                .withIsInternalTenant(true)\n-                .withSourceMap(new HashMap<>())\n-                .withUserDefinedTags(userDefinedResourceTags)\n-                .withAccountTags(Objects.requireNonNullElseGet(accountTags, () -> defaultccountTagKey))\n-                .build();\n-    }\n-}\n"}}, {"oid": "43b8bdd6444f85ef58a54f85ec5db397ea016039", "url": "https://github.com/hortonworks/cloudbreak/commit/43b8bdd6444f85ef58a54f85ec5db397ea016039", "message": "CB-4502 Consolidate DistroX/SDX/FreeIPA/RDS tagging", "committedDate": "2020-02-24T07:56:11Z", "type": "commit"}, {"oid": "ad00aef24e5be9baa197b00a8bfa96e142edfa22", "url": "https://github.com/hortonworks/cloudbreak/commit/ad00aef24e5be9baa197b00a8bfa96e142edfa22", "message": "CB-5634 not to allow tags with key that is presented as account tag", "committedDate": "2020-02-24T07:56:11Z", "type": "commit"}, {"oid": "5dbc733b8c7ffc88ab1e304f46a40205a18b786c", "url": "https://github.com/hortonworks/cloudbreak/commit/5dbc733b8c7ffc88ab1e304f46a40205a18b786c", "message": "CB-4502 moved to the right package", "committedDate": "2020-02-24T07:56:11Z", "type": "commit"}, {"oid": "fd02cc815c74155e27fcfe76bd777f14b82a6695", "url": "https://github.com/hortonworks/cloudbreak/commit/fd02cc815c74155e27fcfe76bd777f14b82a6695", "message": "CB-4502 fixed review comments", "committedDate": "2020-02-24T07:56:11Z", "type": "commit"}, {"oid": "1f04883eb8403c1792914af5062f99e13aa6aaa6", "url": "https://github.com/hortonworks/cloudbreak/commit/1f04883eb8403c1792914af5062f99e13aa6aaa6", "message": "CB-4502 fixed review comments n2", "committedDate": "2020-02-24T07:56:11Z", "type": "commit"}, {"oid": "ee1ebf0b9ef978d7224dd3c08dc551a3e38ba777", "url": "https://github.com/hortonworks/cloudbreak/commit/ee1ebf0b9ef978d7224dd3c08dc551a3e38ba777", "message": "CB-4502 fixed review comments n3", "committedDate": "2020-02-24T08:14:49Z", "type": "commit"}, {"oid": "ee1ebf0b9ef978d7224dd3c08dc551a3e38ba777", "url": "https://github.com/hortonworks/cloudbreak/commit/ee1ebf0b9ef978d7224dd3c08dc551a3e38ba777", "message": "CB-4502 fixed review comments n3", "committedDate": "2020-02-24T08:14:49Z", "type": "forcePushed"}]}