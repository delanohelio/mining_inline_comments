{"pr_number": 7642, "pr_title": "CB-6122 Introduce environment level http proxy config, which will be used on the freeipa, sdx and distrox clusters automatically", "pr_createdAt": "2020-03-24T23:06:41Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7642", "timeline": [{"oid": "2f838f95f861db960d5aa2a0c2dc37fdd7414c95", "url": "https://github.com/hortonworks/cloudbreak/commit/2f838f95f861db960d5aa2a0c2dc37fdd7414c95", "message": "proxy support", "committedDate": "2020-03-24T23:45:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4MDEzNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r397680136", "bodyText": "so I feel some inconsistency here\nYou have an optional and call get without checking if it's present and then do a null check in userdatabuilder. I suggest to pass the optional as param and replace the null check with isPresent", "author": "lacikaaa", "createdAt": "2020-03-25T08:31:44Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java", "diffHunk": "@@ -84,8 +89,9 @@ public void createUserData(Long stackId) throws CloudbreakImageNotFoundException\n         try {\n             PlatformParameters platformParameters = platformParametersFuture.get();\n             CcmParameters ccmParameters = fetchCcmParameters(stack);\n+            Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByEnvironmentCrn(stack.getEnvironmentCrn());\n             Map<InstanceGroupType, String> userData = userDataBuilder.buildUserData(Platform.platform(stack.getCloudPlatform()), cbSshKeyDer,\n-                    sshUser, platformParameters, saltBootPassword, cbCert, ccmParameters);\n+                    sshUser, platformParameters, saltBootPassword, cbCert, ccmParameters, proxyConfig.get());", "originalCommit": "2f838f95f861db960d5aa2a0c2dc37fdd7414c95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxNjIzMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r398616231", "bodyText": "Optional.orElse(null) will be used instead of Optional.get(). The Optional as method parameter is not recommended, so I wouldn't use it.", "author": "schfeca75", "createdAt": "2020-03-26T14:28:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4MDEzNg=="}], "type": "inlineReview", "revised_code": {"commit": "32484ce3c07a4b36c17a3dd927e1936f774c3daa", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java b/core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java\nindex 8cf3645760..66f88e017f 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java\n\n@@ -91,7 +91,7 @@ public class UserDataService {\n             CcmParameters ccmParameters = fetchCcmParameters(stack);\n             Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByEnvironmentCrn(stack.getEnvironmentCrn());\n             Map<InstanceGroupType, String> userData = userDataBuilder.buildUserData(Platform.platform(stack.getCloudPlatform()), cbSshKeyDer,\n-                    sshUser, platformParameters, saltBootPassword, cbCert, ccmParameters, proxyConfig.get());\n+                    sshUser, platformParameters, saltBootPassword, cbCert, ccmParameters, proxyConfig.orElse(null));\n             imageService.decorateImageWithUserDataForStack(stack, userData);\n             if (ccmParameters != null) {\n                 String minaSshdServiceId = ccmParameters.getServerParameters().getMinaSshdServiceId();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4MDYwMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r397680602", "bodyText": "if this can be null please use Optional.ofNullable", "author": "lacikaaa", "createdAt": "2020-03-25T08:32:38Z", "path": "environment-support/src/main/java/com/sequenceiq/cloudbreak/service/proxy/ProxyConfigDtoService.java", "diffHunk": "@@ -37,6 +38,14 @@ public ProxyConfig getByCrn(String resourceCrn) {\n         return convert(getProxyConfig(resourceCrn, proxyEndpoint::getByResourceCrn));\n     }\n \n+    public Optional<ProxyConfig> getByEnvironmentCrn(String environmentCrn) {\n+        try {\n+            return Optional.of(convert(proxyEndpoint.getByEnvironmentCrn(environmentCrn)));", "originalCommit": "2f838f95f861db960d5aa2a0c2dc37fdd7414c95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32484ce3c07a4b36c17a3dd927e1936f774c3daa", "chunk": "diff --git a/environment-support/src/main/java/com/sequenceiq/cloudbreak/service/proxy/ProxyConfigDtoService.java b/environment-support/src/main/java/com/sequenceiq/cloudbreak/service/proxy/ProxyConfigDtoService.java\nindex 35ead34505..d8afcaf632 100644\n--- a/environment-support/src/main/java/com/sequenceiq/cloudbreak/service/proxy/ProxyConfigDtoService.java\n+++ b/environment-support/src/main/java/com/sequenceiq/cloudbreak/service/proxy/ProxyConfigDtoService.java\n\n@@ -40,7 +40,7 @@ public class ProxyConfigDtoService {\n \n     public Optional<ProxyConfig> getByEnvironmentCrn(String environmentCrn) {\n         try {\n-            return Optional.of(convert(proxyEndpoint.getByEnvironmentCrn(environmentCrn)));\n+            return Optional.ofNullable(convert(proxyEndpoint.getByEnvironmentCrn(environmentCrn)));\n         } catch (RuntimeException rex) {\n             return Optional.empty();\n         }\n"}}, {"oid": "32484ce3c07a4b36c17a3dd927e1936f774c3daa", "url": "https://github.com/hortonworks/cloudbreak/commit/32484ce3c07a4b36c17a3dd927e1936f774c3daa", "message": "proxy support", "committedDate": "2020-03-26T14:25:11Z", "type": "forcePushed"}, {"oid": "9db760a5a5abf71898724000895b61539f4e03ca", "url": "https://github.com/hortonworks/cloudbreak/commit/9db760a5a5abf71898724000895b61539f4e03ca", "message": "proxy support", "committedDate": "2020-03-28T20:37:46Z", "type": "forcePushed"}, {"oid": "f88dfdb5fef4da361907b302c1adfe094d5bbc4b", "url": "https://github.com/hortonworks/cloudbreak/commit/f88dfdb5fef4da361907b302c1adfe094d5bbc4b", "message": "proxy support", "committedDate": "2020-03-28T21:43:13Z", "type": "forcePushed"}, {"oid": "abc7555d140bb898e6e6dd77e962263a09020cb5", "url": "https://github.com/hortonworks/cloudbreak/commit/abc7555d140bb898e6e6dd77e962263a09020cb5", "message": "proxy support", "committedDate": "2020-03-31T11:12:46Z", "type": "forcePushed"}, {"oid": "73de350fe5edb39ec2856b772a245d2e6c9002fd", "url": "https://github.com/hortonworks/cloudbreak/commit/73de350fe5edb39ec2856b772a245d2e6c9002fd", "message": "proxy support", "committedDate": "2020-04-01T12:15:58Z", "type": "forcePushed"}, {"oid": "3a040566f00f5f9d494507e494c37044f27a46fb", "url": "https://github.com/hortonworks/cloudbreak/commit/3a040566f00f5f9d494507e494c37044f27a46fb", "message": "proxy support", "committedDate": "2020-04-01T13:08:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyMjMwOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r401622308", "bodyText": "move this into a method please", "author": "lacikaaa", "createdAt": "2020-04-01T13:39:21Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/cluster/ClusterBuilderService.java", "diffHunk": "@@ -134,15 +134,13 @@ public void buildCluster(Long stackId) throws CloudbreakException {\n         clusterService.updateCluster(cluster);\n         final Telemetry telemetry = componentConfigProviderService.getTelemetry(stackId);\n \n-        if (cluster.getProxyConfigCrn() != null) {\n-            ProxyConfig proxyConfig = proxyConfigDtoService.getByCrn(cluster.getProxyConfigCrn());\n-            if (proxyConfig != null) {\n-                LOGGER.info(\"proxyConfig is not null, setup proxy for cluster\");\n-                connector.clusterSetupService().setupProxy(proxyConfig);\n-            } else {\n-                LOGGER.info(\"proxyConfig was not found by proxyConfigCrn\");\n-            }\n-        }\n+        Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByCrnWithEnvironmentFallback(cluster.getProxyConfigCrn(), cluster.getEnvironmentCrn());\n+        proxyConfig.ifPresentOrElse(\n+                pc -> {\n+                    LOGGER.info(\"proxyConfig is not null, setup proxy for cluster\");\n+                    connector.clusterSetupService().setupProxy(pc);\n+                },", "originalCommit": "3a040566f00f5f9d494507e494c37044f27a46fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4ODU4Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r402488587", "bodyText": "I removed all the proxy setup part to a different method. Is it ok?", "author": "schfeca75", "createdAt": "2020-04-02T17:32:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyMjMwOA=="}], "type": "inlineReview", "revised_code": {"commit": "65ed7578b15d2d5b0ba77da88c90c3b2ad572f5d", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/core/cluster/ClusterBuilderService.java b/core/src/main/java/com/sequenceiq/cloudbreak/core/cluster/ClusterBuilderService.java\nindex 060db64a56..8087a1a23a 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/core/cluster/ClusterBuilderService.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/core/cluster/ClusterBuilderService.java\n\n@@ -134,14 +134,7 @@ public class ClusterBuilderService {\n         clusterService.updateCluster(cluster);\n         final Telemetry telemetry = componentConfigProviderService.getTelemetry(stackId);\n \n-        Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByCrnWithEnvironmentFallback(cluster.getProxyConfigCrn(), cluster.getEnvironmentCrn());\n-        proxyConfig.ifPresentOrElse(\n-                pc -> {\n-                    LOGGER.info(\"proxyConfig is not null, setup proxy for cluster\");\n-                    connector.clusterSetupService().setupProxy(pc);\n-                },\n-                () -> LOGGER.info(\"proxyConfig was not found by proxyConfigCrn\"));\n-\n+        setupProxy(connector, cluster);\n         Set<DatalakeResources> datalakeResources = datalakeResourcesService\n                 .findDatalakeResourcesByWorkspaceAndEnvironment(stack.getWorkspace().getId(), stack.getEnvironmentCrn());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyNDA4NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r401624085", "bodyText": "you should add if all has value, so you could use StringUtils#isNoneBlank here", "author": "lacikaaa", "createdAt": "2020-04-01T13:41:46Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataBuilder.java", "diffHunk": "@@ -62,9 +64,26 @@ private String build(InstanceGroupType type, Platform cloudPlatform, byte[] cbSs\n         model.put(\"saltBootPassword\", saltBootPassword);\n         model.put(\"cbCert\", cbCert);\n         CcmParameters.addToTemplateModel(ccmParameters, model);\n+        extendModelWithProxyParams(type, proxyConfig, model);\n         return build(model);\n     }\n \n+    private void extendModelWithProxyParams(InstanceGroupType type, ProxyConfig proxyConfig, Map<String, Object> model) {\n+        if (type == InstanceGroupType.GATEWAY && proxyConfig != null) {\n+            model.put(\"proxyEnabled\", Boolean.TRUE);\n+            model.put(\"proxyHost\", proxyConfig.getServerHost());\n+            model.put(\"proxyPort\", proxyConfig.getServerPort().toString());\n+            if (!StringUtils.isEmpty(proxyConfig.getUserName())) {\n+                model.put(\"proxyUser\", proxyConfig.getUserName());\n+            }\n+            if (!StringUtils.isEmpty(proxyConfig.getPassword())) {\n+                model.put(\"proxyPassword\", proxyConfig.getPassword());\n+            }", "originalCommit": "3a040566f00f5f9d494507e494c37044f27a46fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65ed7578b15d2d5b0ba77da88c90c3b2ad572f5d", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataBuilder.java b/core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataBuilder.java\nindex 5c503ecfbc..a9a2856ec4 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataBuilder.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataBuilder.java\n\n@@ -73,12 +72,10 @@ public class UserDataBuilder {\n             model.put(\"proxyEnabled\", Boolean.TRUE);\n             model.put(\"proxyHost\", proxyConfig.getServerHost());\n             model.put(\"proxyPort\", proxyConfig.getServerPort().toString());\n-            if (!StringUtils.isEmpty(proxyConfig.getUserName())) {\n-                model.put(\"proxyUser\", proxyConfig.getUserName());\n-            }\n-            if (!StringUtils.isEmpty(proxyConfig.getPassword())) {\n-                model.put(\"proxyPassword\", proxyConfig.getPassword());\n-            }\n+            proxyConfig.getProxyAuthentication().ifPresent(auth -> {\n+                model.put(\"proxyUser\", auth.getUserName());\n+                model.put(\"proxyPassword\", auth.getPassword());\n+            });\n         } else {\n             model.put(\"proxyEnabled\", Boolean.FALSE);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyNTk5Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r401625996", "bodyText": "are we sure we need it in the Simple one?", "author": "lacikaaa", "createdAt": "2020-04-01T13:44:20Z", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/SimpleEnvironmentResponse.java", "diffHunk": "@@ -14,6 +15,8 @@\n \n     private CredentialViewResponse credential;\n \n+    private ProxyViewResponse proxyConfig;", "originalCommit": "3a040566f00f5f9d494507e494c37044f27a46fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2NTk3NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r402165974", "bodyText": "@doktoric What do you think?", "author": "schfeca75", "createdAt": "2020-04-02T09:12:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyNTk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNzM1OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r402917358", "bodyText": "yes we need that.", "author": "doktoric", "createdAt": "2020-04-03T10:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyNTk5Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyOTA2OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r401629068", "bodyText": "don't forget about this", "author": "lacikaaa", "createdAt": "2020-04-01T13:48:27Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/config/FreeIpaConfigService.java", "diffHunk": "@@ -72,6 +76,7 @@ private FreeIpaBackupConfigView determineAndSetBackup(Stack stack) {\n         final FreeIpaBackupConfigView.Builder builder = new FreeIpaBackupConfigView.Builder();\n         if (backup != null) {\n             builder.withEnabled(true)\n+//            builder.withEnabled(!proxyConfigDtoService.isProxyConfiguredForEnvironment(stack.getEnvironmentCrn()))", "originalCommit": "3a040566f00f5f9d494507e494c37044f27a46fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d5a6ce4202c3f91c0e0be9542a7cd8632fb2059b", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/config/FreeIpaConfigService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/config/FreeIpaConfigService.java\nindex 1659a2ad9f..ec984dee70 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/config/FreeIpaConfigService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/config/FreeIpaConfigService.java\n\n@@ -76,11 +76,10 @@ public class FreeIpaConfigService {\n         final FreeIpaBackupConfigView.Builder builder = new FreeIpaBackupConfigView.Builder();\n         if (backup != null) {\n             builder.withEnabled(true)\n-//            builder.withEnabled(!proxyConfigDtoService.isProxyConfiguredForEnvironment(stack.getEnvironmentCrn()))\n-                    .withMonthlyFullEnabled(backup.isMonthlyFullEnabled())\n-                    .withHourlyEnabled(backup.isHourlyEnabled())\n-                    .withInitialFullEnabled(backup.isInitialFullEnabled())\n-                    .withLocation(backup.getStorageLocation());\n+                   .withMonthlyFullEnabled(backup.isMonthlyFullEnabled())\n+                   .withHourlyEnabled(backup.isHourlyEnabled())\n+                   .withInitialFullEnabled(backup.isInitialFullEnabled())\n+                   .withLocation(backup.getStorageLocation());\n             if (backup.getS3() != null) {\n                 builder.withPlatform(CloudPlatform.AWS.name());\n                 LOGGER.debug(\"Backups will be configured to use S3 output.\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyOTgwNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r401629804", "bodyText": "same as above, both or neither of them, maybe it worth adding validation on proxy config creation if doesn't exist", "author": "lacikaaa", "createdAt": "2020-04-01T13:49:21Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/userdata/UserDataBuilder.java", "diffHunk": "@@ -55,9 +57,26 @@ private String build(Platform cloudPlatform, byte[] cbSshKeyDer, String sshUser,\n         model.put(\"saltBootPassword\", saltBootPassword);\n         model.put(\"cbCert\", cbCert);\n         CcmParameters.addToTemplateModel(ccmParameters, model);\n+        extendModelWithProxyParams(proxyConfig, model);\n         return build(model);\n     }\n \n+    private void extendModelWithProxyParams(ProxyConfig proxyConfig, Map<String, Object> model) {\n+        if (proxyConfig != null) {\n+            model.put(\"proxyEnabled\", Boolean.TRUE);\n+            model.put(\"proxyHost\", proxyConfig.getServerHost());\n+            model.put(\"proxyPort\", proxyConfig.getServerPort().toString());\n+            if (!StringUtils.isEmpty(proxyConfig.getUserName())) {\n+                model.put(\"proxyUser\", proxyConfig.getUserName());\n+            }\n+            if (!StringUtils.isEmpty(proxyConfig.getPassword())) {\n+                model.put(\"proxyPassword\", proxyConfig.getPassword());\n+            }", "originalCommit": "3a040566f00f5f9d494507e494c37044f27a46fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65ed7578b15d2d5b0ba77da88c90c3b2ad572f5d", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/userdata/UserDataBuilder.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/userdata/UserDataBuilder.java\nindex 397cef1b8a..b322f6f68a 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/userdata/UserDataBuilder.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/userdata/UserDataBuilder.java\n\n@@ -66,12 +65,10 @@ public class UserDataBuilder {\n             model.put(\"proxyEnabled\", Boolean.TRUE);\n             model.put(\"proxyHost\", proxyConfig.getServerHost());\n             model.put(\"proxyPort\", proxyConfig.getServerPort().toString());\n-            if (!StringUtils.isEmpty(proxyConfig.getUserName())) {\n-                model.put(\"proxyUser\", proxyConfig.getUserName());\n-            }\n-            if (!StringUtils.isEmpty(proxyConfig.getPassword())) {\n-                model.put(\"proxyPassword\", proxyConfig.getPassword());\n-            }\n+            proxyConfig.getProxyAuthentication().ifPresent(auth -> {\n+                model.put(\"proxyUser\", auth.getUserName());\n+                model.put(\"proxyPassword\", auth.getPassword());\n+            });\n         } else {\n             model.put(\"proxyEnabled\", Boolean.FALSE);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYzMDg5Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r401630893", "bodyText": "could you add a test for proxy configuration?", "author": "lacikaaa", "createdAt": "2020-04-01T13:50:48Z", "path": "core/src/test/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataBuilderTest.java", "diffHunk": "@@ -66,7 +66,7 @@ public void testBuildUserDataAzure() throws IOException {\n         String expectedCoreScript = FileReaderUtils.readFileFromClasspath(\"azure-core-init.sh\");\n         // JSA todo add test for CCM parameters\n         Map<InstanceGroupType, String> userdata = underTest.buildUserData(Platform.platform(\"AZURE\"), \"priv-key\".getBytes(),\n-            \"cloudbreak\", getPlatformParameters(), \"pass\", \"cert\", null);\n+            \"cloudbreak\", getPlatformParameters(), \"pass\", \"cert\", null, null);", "originalCommit": "3a040566f00f5f9d494507e494c37044f27a46fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d5a6ce4202c3f91c0e0be9542a7cd8632fb2059b", "chunk": "diff --git a/core/src/test/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataBuilderTest.java b/core/src/test/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataBuilderTest.java\nindex 59016cc4b2..6dc17b8c32 100644\n--- a/core/src/test/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataBuilderTest.java\n+++ b/core/src/test/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataBuilderTest.java\n\n@@ -71,6 +73,39 @@ public class UserDataBuilderTest {\n         Assert.assertEquals(expectedCoreScript, userdata.get(InstanceGroupType.CORE));\n     }\n \n+    @Test\n+    public void testBuildUserDataAzureWithNoAuthProxy() throws IOException {\n+        String expectedGwScript = FileReaderUtils.readFileFromClasspath(\"azure-gateway-init-noauthproxy.sh\");\n+        String expectedCoreScript = FileReaderUtils.readFileFromClasspath(\"azure-core-init.sh\");\n+        ProxyConfig proxyConfig = ProxyConfig.builder()\n+                .withServerHost(\"proxy.host\")\n+                .withServerPort(1234)\n+                .build();\n+        Map<InstanceGroupType, String> userdata = underTest.buildUserData(Platform.platform(\"AZURE\"), \"priv-key\".getBytes(),\n+                \"cloudbreak\", getPlatformParameters(), \"pass\", \"cert\", null, proxyConfig);\n+        Assert.assertEquals(expectedGwScript, userdata.get(InstanceGroupType.GATEWAY));\n+        Assert.assertEquals(expectedCoreScript, userdata.get(InstanceGroupType.CORE));\n+    }\n+\n+    @Test\n+    public void testBuildUserDataAzureWithAuthProxy() throws IOException {\n+        String expectedGwScript = FileReaderUtils.readFileFromClasspath(\"azure-gateway-init-authproxy.sh\");\n+        String expectedCoreScript = FileReaderUtils.readFileFromClasspath(\"azure-core-init.sh\");\n+        ProxyAuthentication proxyAuthentication = ProxyAuthentication.builder()\n+                .withUserName(\"user\")\n+                .withPassword(\"pwd\")\n+                .build();\n+        ProxyConfig proxyConfig = ProxyConfig.builder()\n+                .withServerHost(\"proxy.host\")\n+                .withServerPort(1234)\n+                .withProxyAuthentication(proxyAuthentication)\n+                .build();\n+        Map<InstanceGroupType, String> userdata = underTest.buildUserData(Platform.platform(\"AZURE\"), \"priv-key\".getBytes(),\n+                \"cloudbreak\", getPlatformParameters(), \"pass\", \"cert\", null, proxyConfig);\n+        Assert.assertEquals(expectedGwScript, userdata.get(InstanceGroupType.GATEWAY));\n+        Assert.assertEquals(expectedCoreScript, userdata.get(InstanceGroupType.CORE));\n+    }\n+\n     private PlatformParameters getPlatformParameters() {\n         return new TestPlatformParameters();\n     }\n"}}, {"oid": "65ed7578b15d2d5b0ba77da88c90c3b2ad572f5d", "url": "https://github.com/hortonworks/cloudbreak/commit/65ed7578b15d2d5b0ba77da88c90c3b2ad572f5d", "message": "proxy support", "committedDate": "2020-04-02T17:29:23Z", "type": "forcePushed"}, {"oid": "d5a6ce4202c3f91c0e0be9542a7cd8632fb2059b", "url": "https://github.com/hortonworks/cloudbreak/commit/d5a6ce4202c3f91c0e0be9542a7cd8632fb2059b", "message": "proxy support", "committedDate": "2020-04-03T10:35:00Z", "type": "forcePushed"}, {"oid": "9bd3cfad030e0e2e7696de1bf24510561da75930", "url": "https://github.com/hortonworks/cloudbreak/commit/9bd3cfad030e0e2e7696de1bf24510561da75930", "message": "proxy support", "committedDate": "2020-04-03T11:01:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4ODI2Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r402988263", "bodyText": "please add logging to both branches here, you could log the config too", "author": "lacikaaa", "createdAt": "2020-04-03T13:01:38Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataBuilder.java", "diffHunk": "@@ -62,9 +63,24 @@ private String build(InstanceGroupType type, Platform cloudPlatform, byte[] cbSs\n         model.put(\"saltBootPassword\", saltBootPassword);\n         model.put(\"cbCert\", cbCert);\n         CcmParameters.addToTemplateModel(ccmParameters, model);\n+        extendModelWithProxyParams(type, proxyConfig, model);\n         return build(model);\n     }\n \n+    private void extendModelWithProxyParams(InstanceGroupType type, ProxyConfig proxyConfig, Map<String, Object> model) {\n+        if (type == InstanceGroupType.GATEWAY && proxyConfig != null) {\n+            model.put(\"proxyEnabled\", Boolean.TRUE);\n+            model.put(\"proxyHost\", proxyConfig.getServerHost());\n+            model.put(\"proxyPort\", proxyConfig.getServerPort().toString());\n+            proxyConfig.getProxyAuthentication().ifPresent(auth -> {\n+                model.put(\"proxyUser\", auth.getUserName());\n+                model.put(\"proxyPassword\", auth.getPassword());\n+            });\n+        } else {\n+            model.put(\"proxyEnabled\", Boolean.FALSE);\n+        }", "originalCommit": "9bd3cfad030e0e2e7696de1bf24510561da75930", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c44534de44a8dc76e44d383502f6b473645fe62", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataBuilder.java b/core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataBuilder.java\nindex a9a2856ec4..cb4ee24360 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataBuilder.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataBuilder.java\n\n@@ -76,8 +75,10 @@ public class UserDataBuilder {\n                 model.put(\"proxyUser\", auth.getUserName());\n                 model.put(\"proxyPassword\", auth.getPassword());\n             });\n+            LOGGER.info(\"Proxy config set up for gateway instances' userdata script: {}\", proxyConfig);\n         } else {\n             model.put(\"proxyEnabled\", Boolean.FALSE);\n+            LOGGER.info(\"No proxy config set up for {} instances' userdata script\", type);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4ODUyMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r402988521", "bodyText": "we could log the config here", "author": "lacikaaa", "createdAt": "2020-04-03T13:02:06Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/cluster/ClusterBuilderService.java", "diffHunk": "@@ -197,6 +188,16 @@ public void buildCluster(Long stackId) throws CloudbreakException {\n         }\n     }\n \n+    private void setupProxy(ClusterApi connector, Cluster cluster) {\n+        Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByCrnWithEnvironmentFallback(cluster.getProxyConfigCrn(), cluster.getEnvironmentCrn());\n+        proxyConfig.ifPresentOrElse(\n+                pc -> {\n+                    LOGGER.info(\"proxyConfig is not null, setup proxy for cluster\");", "originalCommit": "9bd3cfad030e0e2e7696de1bf24510561da75930", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c44534de44a8dc76e44d383502f6b473645fe62", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/core/cluster/ClusterBuilderService.java b/core/src/main/java/com/sequenceiq/cloudbreak/core/cluster/ClusterBuilderService.java\nindex 8087a1a23a..13680844e4 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/core/cluster/ClusterBuilderService.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/core/cluster/ClusterBuilderService.java\n\n@@ -192,7 +192,7 @@ public class ClusterBuilderService {\n         Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByCrnWithEnvironmentFallback(cluster.getProxyConfigCrn(), cluster.getEnvironmentCrn());\n         proxyConfig.ifPresentOrElse(\n                 pc -> {\n-                    LOGGER.info(\"proxyConfig is not null, setup proxy for cluster\");\n+                    LOGGER.info(\"proxyConfig is not null, setup proxy for cluster: {}\", pc);\n                     connector.clusterSetupService().setupProxy(pc);\n                 },\n                 () -> LOGGER.info(\"proxyConfig was not found by proxyConfigCrn\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4ODgxOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r402988819", "bodyText": "we should just pass the optional here and not null", "author": "lacikaaa", "createdAt": "2020-04-03T13:02:32Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java", "diffHunk": "@@ -84,8 +89,9 @@ public void createUserData(Long stackId) throws CloudbreakImageNotFoundException\n         try {\n             PlatformParameters platformParameters = platformParametersFuture.get();\n             CcmParameters ccmParameters = fetchCcmParameters(stack);\n+            Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByEnvironmentCrn(stack.getEnvironmentCrn());\n             Map<InstanceGroupType, String> userData = userDataBuilder.buildUserData(Platform.platform(stack.getCloudPlatform()), cbSshKeyDer,\n-                    sshUser, platformParameters, saltBootPassword, cbCert, ccmParameters);\n+                    sshUser, platformParameters, saltBootPassword, cbCert, ccmParameters, proxyConfig.orElse(null));", "originalCommit": "9bd3cfad030e0e2e7696de1bf24510561da75930", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAyODg0OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r403028848", "bodyText": "Finally we agreed with @lacikaaa to not use optional as method param, as it is not recommended and Idea warns about it as well...", "author": "schfeca75", "createdAt": "2020-04-03T14:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4ODgxOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4OTA2Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r402989066", "bodyText": "add some log here too", "author": "lacikaaa", "createdAt": "2020-04-03T13:03:00Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/proxy/ProxyConfigProvider.java", "diffHunk": "@@ -25,18 +25,17 @@\n     private ProxyConfigDtoService proxyConfigDtoService;\n \n     public void decoratePillarWithProxyDataIfNeeded(Map<String, SaltPillarProperties> servicePillar, Cluster cluster) {\n-        String proxyConfigCrn = cluster.getProxyConfigCrn();\n-        if (StringUtils.isNotEmpty(proxyConfigCrn)) {\n-            ProxyConfig proxyConfig = proxyConfigDtoService.getByCrn(proxyConfigCrn);\n+        Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByCrnWithEnvironmentFallback(cluster.getProxyConfigCrn(), cluster.getEnvironmentCrn());\n+        proxyConfig.ifPresent(pc -> {", "originalCommit": "9bd3cfad030e0e2e7696de1bf24510561da75930", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c44534de44a8dc76e44d383502f6b473645fe62", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/service/proxy/ProxyConfigProvider.java b/core/src/main/java/com/sequenceiq/cloudbreak/service/proxy/ProxyConfigProvider.java\nindex 7660feb7cf..108188e251 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/service/proxy/ProxyConfigProvider.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/service/proxy/ProxyConfigProvider.java\n\n@@ -16,11 +18,12 @@ import com.sequenceiq.cloudbreak.orchestrator.model.SaltPillarProperties;\n \n @Service\n public class ProxyConfigProvider {\n-\n     public static final String PROXY_KEY = \"proxy\";\n \n     public static final String PROXY_SLS_PATH = \"/proxy/proxy.sls\";\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProxyConfigProvider.class);\n+\n     @Inject\n     private ProxyConfigDtoService proxyConfigDtoService;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5MzAxNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r402993016", "bodyText": "with org.apache.commons.lang3\nStringUtils.isAllEmpty(user,password) || StringUtils.isNoneBlank(user,password)", "author": "lacikaaa", "createdAt": "2020-04-03T13:09:48Z", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/proxy/validation/ProxyConfigAuthValidator.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.sequenceiq.environment.api.v1.proxy.validation;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+\n+import org.springframework.util.StringUtils;\n+\n+import com.sequenceiq.environment.api.v1.proxy.model.request.ProxyRequest;\n+\n+public class ProxyConfigAuthValidator implements ConstraintValidator<ValidProxyConfigAuthRequest, ProxyRequest> {\n+    @Override\n+    public boolean isValid(ProxyRequest proxyRequest, ConstraintValidatorContext constraintValidatorContext) {\n+        String user = proxyRequest.getUserName();\n+        String password = proxyRequest.getPassword();\n+        return (StringUtils.isEmpty(user) && StringUtils.isEmpty(password)) || (StringUtils.hasLength(user) && StringUtils.hasLength(password));", "originalCommit": "9bd3cfad030e0e2e7696de1bf24510561da75930", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c44534de44a8dc76e44d383502f6b473645fe62", "chunk": "diff --git a/environment-api/src/main/java/com/sequenceiq/environment/api/v1/proxy/validation/ProxyConfigAuthValidator.java b/environment-api/src/main/java/com/sequenceiq/environment/api/v1/proxy/validation/ProxyConfigAuthValidator.java\nindex 9f9ea7edae..392a6bbd84 100644\n--- a/environment-api/src/main/java/com/sequenceiq/environment/api/v1/proxy/validation/ProxyConfigAuthValidator.java\n+++ b/environment-api/src/main/java/com/sequenceiq/environment/api/v1/proxy/validation/ProxyConfigAuthValidator.java\n\n@@ -3,7 +3,8 @@ package com.sequenceiq.environment.api.v1.proxy.validation;\n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n \n-import org.springframework.util.StringUtils;\n+\n+import org.apache.commons.lang3.StringUtils;\n \n import com.sequenceiq.environment.api.v1.proxy.model.request.ProxyRequest;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5MzUzNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r402993537", "bodyText": "test?", "author": "lacikaaa", "createdAt": "2020-04-03T13:10:44Z", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/proxy/validation/ProxyConfigAuthValidator.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.sequenceiq.environment.api.v1.proxy.validation;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+\n+import org.springframework.util.StringUtils;\n+\n+import com.sequenceiq.environment.api.v1.proxy.model.request.ProxyRequest;\n+\n+public class ProxyConfigAuthValidator implements ConstraintValidator<ValidProxyConfigAuthRequest, ProxyRequest> {", "originalCommit": "9bd3cfad030e0e2e7696de1bf24510561da75930", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c44534de44a8dc76e44d383502f6b473645fe62", "chunk": "diff --git a/environment-api/src/main/java/com/sequenceiq/environment/api/v1/proxy/validation/ProxyConfigAuthValidator.java b/environment-api/src/main/java/com/sequenceiq/environment/api/v1/proxy/validation/ProxyConfigAuthValidator.java\nindex 9f9ea7edae..392a6bbd84 100644\n--- a/environment-api/src/main/java/com/sequenceiq/environment/api/v1/proxy/validation/ProxyConfigAuthValidator.java\n+++ b/environment-api/src/main/java/com/sequenceiq/environment/api/v1/proxy/validation/ProxyConfigAuthValidator.java\n\n@@ -3,7 +3,8 @@ package com.sequenceiq.environment.api.v1.proxy.validation;\n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n \n-import org.springframework.util.StringUtils;\n+\n+import org.apache.commons.lang3.StringUtils;\n \n import com.sequenceiq.environment.api.v1.proxy.model.request.ProxyRequest;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5NzAxMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r402997010", "bodyText": "StringUtils#noneBlank as I think if there is faulty config (eg username is some space) in the DB from earlier or whatever, we should not use it as valid", "author": "lacikaaa", "createdAt": "2020-04-03T13:16:17Z", "path": "environment-common/src/main/java/com/sequenceiq/cloudbreak/service/proxy/ProxyConfigDtoService.java", "diffHunk": "@@ -37,16 +42,43 @@ public ProxyConfig getByCrn(String resourceCrn) {\n         return convert(getProxyConfig(resourceCrn, proxyEndpoint::getByResourceCrn));\n     }\n \n+    public Optional<ProxyConfig> getByCrnWithEnvironmentFallback(String resourceCrn, @Nonnull String environmentCrn) {\n+        if (!StringUtils.isEmpty(resourceCrn)) {\n+            return Optional.ofNullable(getByCrn(resourceCrn));\n+        } else {\n+            return getByEnvironmentCrn(environmentCrn);\n+        }\n+    }\n+\n+    public Optional<ProxyConfig> getByEnvironmentCrn(String environmentCrn) {\n+        try {\n+            return Optional.ofNullable(convert(proxyEndpoint.getByEnvironmentCrn(environmentCrn)));\n+        } catch (NotFoundException ex) {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    public boolean isProxyConfiguredForEnvironment(String environmentCrn) {\n+        try {\n+            return proxyEndpoint.getByEnvironmentCrn(environmentCrn) != null;\n+        } catch (NotFoundException ex) {\n+            return false;\n+        }\n+    }\n+\n     private ProxyConfig convert(ProxyResponse proxyResponse) {\n-        return ProxyConfig.builder()\n+        ProxyConfig.ProxyConfigBuilder proxyConfigBuilder = ProxyConfig.builder()\n                 .withName(proxyResponse.getName())\n                 .withCrn(proxyResponse.getCrn())\n                 .withProtocol(proxyResponse.getProtocol())\n                 .withServerHost(proxyResponse.getHost())\n-                .withServerPort(proxyResponse.getPort())\n-                .withUserName(getSecret(proxyResponse.getUserName()))\n-                .withPassword(getSecret(proxyResponse.getPassword()))\n-                .build();\n+                .withServerPort(proxyResponse.getPort());\n+        if (proxyResponse.getUserName() != null && proxyResponse.getPassword() != null) {", "originalCommit": "9bd3cfad030e0e2e7696de1bf24510561da75930", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE4MzAxNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r403183017", "bodyText": "the username and the password is SecretResponse, not a string. Currently it is not possible to create a proxy config with nonblank username and password, we agreed that we will skip this check here.", "author": "schfeca75", "createdAt": "2020-04-03T17:40:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5NzAxMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5OTM3MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r402999371", "bodyText": "creator?", "author": "lacikaaa", "createdAt": "2020-04-03T13:20:04Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentResourceService.java", "diffHunk": "@@ -72,6 +77,18 @@ public Credential getCredentialFromRequest(CredentialAwareEnvRequest request, St\n         return credential;\n     }\n \n+    public Optional<ProxyConfig> getProxyConfig(String proxyConfigName, String accountId, String creator) {", "originalCommit": "9bd3cfad030e0e2e7696de1bf24510561da75930", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c44534de44a8dc76e44d383502f6b473645fe62", "chunk": "diff --git a/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentResourceService.java b/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentResourceService.java\nindex 83fe1f0c16..a50891958d 100644\n--- a/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentResourceService.java\n+++ b/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentResourceService.java\n\n@@ -77,7 +77,7 @@ public class EnvironmentResourceService {\n         return credential;\n     }\n \n-    public Optional<ProxyConfig> getProxyConfig(String proxyConfigName, String accountId, String creator) {\n+    public Optional<ProxyConfig> getProxyConfig(String proxyConfigName, String accountId) {\n         ProxyConfig proxyConfig = null;\n         if (StringUtils.isNotEmpty(proxyConfigName)) {\n             try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5OTk4OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r402999989", "bodyText": "move down one line", "author": "lacikaaa", "createdAt": "2020-04-03T13:21:01Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentCreationService.java", "diffHunk": "@@ -127,7 +128,10 @@ private Environment initializeEnvironment(EnvironmentCreationDto creationDto) {\n         environment.setResourceCrn(creationDto.getCrn());\n         Credential credential = environmentResourceService\n                 .getCredentialFromRequest(creationDto.getCredential(), creationDto.getAccountId(), creationDto.getCreator());\n+        Optional<ProxyConfig> proxyConfig = environmentResourceService.getProxyConfig(creationDto.getProxyConfigName(), creationDto.getAccountId(),", "originalCommit": "9bd3cfad030e0e2e7696de1bf24510561da75930", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c44534de44a8dc76e44d383502f6b473645fe62", "chunk": "diff --git a/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentCreationService.java b/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentCreationService.java\nindex f9b9e2dfe3..78d85a00dd 100644\n--- a/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentCreationService.java\n+++ b/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentCreationService.java\n\n@@ -126,11 +126,9 @@ public class EnvironmentCreationService {\n     private Environment initializeEnvironment(EnvironmentCreationDto creationDto) {\n         Environment environment = environmentDtoConverter.creationDtoToEnvironment(creationDto);\n         environment.setResourceCrn(creationDto.getCrn());\n-        Credential credential = environmentResourceService\n-                .getCredentialFromRequest(creationDto.getCredential(), creationDto.getAccountId(), creationDto.getCreator());\n-        Optional<ProxyConfig> proxyConfig = environmentResourceService.getProxyConfig(creationDto.getProxyConfigName(), creationDto.getAccountId(),\n-                creationDto.getCreator());\n+        Credential credential = environmentResourceService.getCredentialFromRequest(creationDto.getCredential(), creationDto.getAccountId());\n         environment.setCredential(credential);\n+        Optional<ProxyConfig> proxyConfig = environmentResourceService.getProxyConfig(creationDto.getProxyConfigName(), creationDto.getAccountId());\n         proxyConfig.ifPresent(pc -> environment.setProxyConfig(pc));\n         environment.setCloudPlatform(credential.getCloudPlatform());\n         environment.setAuthentication(authenticationDtoConverter.dtoToAuthentication(creationDto.getAuthentication()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDM0NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r403004345", "bodyText": "it looks like to it's not used", "author": "lacikaaa", "createdAt": "2020-04-03T13:27:43Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/config/FreeIpaConfigService.java", "diffHunk": "@@ -48,6 +49,9 @@\n     @Inject\n     private FreeIpaClientFactory freeIpaClientFactory;\n \n+    @Inject\n+    private ProxyConfigDtoService proxyConfigDtoService;", "originalCommit": "9bd3cfad030e0e2e7696de1bf24510561da75930", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NDc0MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r403094741", "bodyText": "Finally it is used, as freeipa backup will only be executed if there is no proxy settings.", "author": "schfeca75", "createdAt": "2020-04-03T15:40:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDM0NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDY1Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r403004656", "bodyText": "some logging here too please", "author": "lacikaaa", "createdAt": "2020-04-03T13:28:09Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/userdata/UserDataBuilder.java", "diffHunk": "@@ -55,9 +56,24 @@ private String build(Platform cloudPlatform, byte[] cbSshKeyDer, String sshUser,\n         model.put(\"saltBootPassword\", saltBootPassword);\n         model.put(\"cbCert\", cbCert);\n         CcmParameters.addToTemplateModel(ccmParameters, model);\n+        extendModelWithProxyParams(proxyConfig, model);\n         return build(model);\n     }\n \n+    private void extendModelWithProxyParams(ProxyConfig proxyConfig, Map<String, Object> model) {\n+        if (proxyConfig != null) {\n+            model.put(\"proxyEnabled\", Boolean.TRUE);\n+            model.put(\"proxyHost\", proxyConfig.getServerHost());\n+            model.put(\"proxyPort\", proxyConfig.getServerPort().toString());\n+            proxyConfig.getProxyAuthentication().ifPresent(auth -> {\n+                model.put(\"proxyUser\", auth.getUserName());\n+                model.put(\"proxyPassword\", auth.getPassword());\n+            });\n+        } else {\n+            model.put(\"proxyEnabled\", Boolean.FALSE);\n+        }", "originalCommit": "9bd3cfad030e0e2e7696de1bf24510561da75930", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ca1b72ecca7dcce44b1baafa453b3dee00dd56f", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/userdata/UserDataBuilder.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/userdata/UserDataBuilder.java\nindex b322f6f68a..254f8a5561 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/userdata/UserDataBuilder.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/userdata/UserDataBuilder.java\n\n@@ -69,8 +69,10 @@ public class UserDataBuilder {\n                 model.put(\"proxyUser\", auth.getUserName());\n                 model.put(\"proxyPassword\", auth.getPassword());\n             });\n+            LOGGER.info(\"Proxy config set up for freeipa instances' userdata script: {}\", proxyConfig);\n         } else {\n             model.put(\"proxyEnabled\", Boolean.FALSE);\n+            LOGGER.info(\"No proxy config set up for freeipa instances' userdata script\");\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDk5Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r403004996", "bodyText": "pass on optional instead of null here too", "author": "lacikaaa", "createdAt": "2020-04-03T13:28:37Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/userdata/UserDataService.java", "diffHunk": "@@ -84,8 +89,9 @@ public void createUserData(Long stackId) {\n         try {\n             PlatformParameters platformParameters = platformParametersFuture.get();\n             CcmParameters ccmParameters = fetchCcmParameters(stack);\n+            Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByEnvironmentCrn(stack.getEnvironmentCrn());\n             String userData = userDataBuilder.buildUserData(Platform.platform(stack.getCloudPlatform()), cbSshKeyDer, sshUser, platformParameters,\n-                    saltBootPassword, cbCert, ccmParameters);\n+                    saltBootPassword, cbCert, ccmParameters, proxyConfig.orElse(null));", "originalCommit": "9bd3cfad030e0e2e7696de1bf24510561da75930", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNTM3NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r403005375", "bodyText": "and it's not necessary here neither", "author": "lacikaaa", "createdAt": "2020-04-03T13:29:12Z", "path": "freeipa/src/test/java/com/sequenceiq/freeipa/service/freeipa/config/FreeIpaConfigServiceTest.java", "diffHunk": "@@ -69,6 +70,9 @@\n     @Mock\n     private FreeIpaClientFactory freeIpaClientFactory;\n \n+    @Mock\n+    private ProxyConfigDtoService proxyConfigDtoService;", "originalCommit": "9bd3cfad030e0e2e7696de1bf24510561da75930", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NTA5NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7642#discussion_r403095095", "bodyText": "but finally yes", "author": "schfeca75", "createdAt": "2020-04-03T15:40:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNTM3NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "7c44534de44a8dc76e44d383502f6b473645fe62", "url": "https://github.com/hortonworks/cloudbreak/commit/7c44534de44a8dc76e44d383502f6b473645fe62", "message": "proxy support", "committedDate": "2020-04-03T15:37:05Z", "type": "forcePushed"}, {"oid": "9ca1b72ecca7dcce44b1baafa453b3dee00dd56f", "url": "https://github.com/hortonworks/cloudbreak/commit/9ca1b72ecca7dcce44b1baafa453b3dee00dd56f", "message": "proxy support", "committedDate": "2020-04-03T15:45:47Z", "type": "forcePushed"}, {"oid": "9c001e3e5c6dc4a19c95488204bfba5099db2b3f", "url": "https://github.com/hortonworks/cloudbreak/commit/9c001e3e5c6dc4a19c95488204bfba5099db2b3f", "message": "proxy support", "committedDate": "2020-04-03T16:20:05Z", "type": "forcePushed"}, {"oid": "f688a618489a5f0871236493f9b42df835d005a4", "url": "https://github.com/hortonworks/cloudbreak/commit/f688a618489a5f0871236493f9b42df835d005a4", "message": "CB-6122 Introduce environment level http proxy config, which will be used on the freeipa, sdx and distrox clusters automatically", "committedDate": "2020-04-03T18:03:08Z", "type": "forcePushed"}, {"oid": "9890fe69f55f1380b2b7c47175ea38c2b18ceb16", "url": "https://github.com/hortonworks/cloudbreak/commit/9890fe69f55f1380b2b7c47175ea38c2b18ceb16", "message": "CB-6122 Introduce environment level http proxy config, which will be used on the freeipa, sdx and distrox clusters automatically", "committedDate": "2020-04-06T07:56:13Z", "type": "commit"}, {"oid": "9890fe69f55f1380b2b7c47175ea38c2b18ceb16", "url": "https://github.com/hortonworks/cloudbreak/commit/9890fe69f55f1380b2b7c47175ea38c2b18ceb16", "message": "CB-6122 Introduce environment level http proxy config, which will be used on the freeipa, sdx and distrox clusters automatically", "committedDate": "2020-04-06T07:56:13Z", "type": "forcePushed"}]}