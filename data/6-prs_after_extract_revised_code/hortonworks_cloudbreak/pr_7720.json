{"pr_number": 7720, "pr_title": "CB-5734 Additional Validations for DistroX Autoscale API", "pr_createdAt": "2020-04-02T11:26:06Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7720", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNjYxOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7720#discussion_r402606619", "bodyText": "Do we need to check for the existence of the hostGroup in the cluster?", "author": "sidseth", "createdAt": "2020-04-02T21:28:17Z", "path": "autoscale/src/main/java/com/sequenceiq/periscope/controller/AlertController.java", "diffHunk": "@@ -229,14 +224,34 @@ private LoadAlertResponse createLoadAlertResponse(LoadAlert loadAlert) {\n         return loadAlertResponseConverter.convert(loadAlert);\n     }\n \n-    private void validateTimeAlert(Long clusterId, Optional<Long> alertId, TimeAlertRequest json) throws ParseException {\n-        validateAlertForUpdate(clusterId, alertId, AlertType.TIME);\n-        dateService.validateTimeZone(json.getTimeZone());\n-        dateService.getCronExpression(json.getCron());\n+    private void validateTimeAlert(Long clusterId, Optional<Long> alertId, TimeAlertRequest json) {\n+        alertId.ifPresent(alert -> validateAlertForUpdate(clusterId, alert, AlertType.TIME));\n+        try {\n+            dateService.validateTimeZone(json.getTimeZone());\n+            dateService.getCronExpression(json.getCron());\n+        } catch (ParseException parseException) {\n+            throw new BadRequestException(parseException.getMessage(), parseException);\n+        }\n     }\n \n-    private void validateLoadAlert(Long clusterId, Optional<Long> alertId, LoadAlertRequest json) throws ParseException {\n-        validateAlertForUpdate(clusterId, alertId, AlertType.LOAD);\n+    private void validateLoadAlert(Long clusterId, Optional<Long> alertId, LoadAlertRequest json) {\n+        Cluster cluster = clusterService.findById(clusterId);\n+        alertId.ifPresentOrElse(\n+                updateAlert -> {\n+                    validateAlertForUpdate(clusterId, updateAlert, AlertType.LOAD);\n+                }, () -> {\n+                    if (!cluster.getTunnel().useClusterProxy()) {\n+                        throw new BadRequestException(String.format(\"Cluster '%s' is not configured with Cluster Proxy Tunnel, \" +\n+                                \"Cluster Tunnel is %s. Load Based Scaling not supported\", cluster.getStackCrn(), cluster.getTunnel()));\n+                    }\n+\n+                    String hostGroup = json.getScalingPolicy().getHostGroup();", "originalCommit": "43edbd16cb6d455a671bf51df90576fb488558ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk2ODU3Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7720#discussion_r402968576", "bodyText": "we would also need the hostGroup services validation, which can be added based on our other discussion.", "author": "smaniraju", "createdAt": "2020-04-03T12:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNjYxOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNzIwOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7720#discussion_r402607209", "bodyText": "This looks good based on the assumption that we're going with w.r.t all clusters using the ClusterProxy. Will have to include this in the documentation eventually.", "author": "sidseth", "createdAt": "2020-04-02T21:29:32Z", "path": "autoscale/src/main/java/com/sequenceiq/periscope/controller/AlertController.java", "diffHunk": "@@ -229,14 +224,34 @@ private LoadAlertResponse createLoadAlertResponse(LoadAlert loadAlert) {\n         return loadAlertResponseConverter.convert(loadAlert);\n     }\n \n-    private void validateTimeAlert(Long clusterId, Optional<Long> alertId, TimeAlertRequest json) throws ParseException {\n-        validateAlertForUpdate(clusterId, alertId, AlertType.TIME);\n-        dateService.validateTimeZone(json.getTimeZone());\n-        dateService.getCronExpression(json.getCron());\n+    private void validateTimeAlert(Long clusterId, Optional<Long> alertId, TimeAlertRequest json) {\n+        alertId.ifPresent(alert -> validateAlertForUpdate(clusterId, alert, AlertType.TIME));\n+        try {\n+            dateService.validateTimeZone(json.getTimeZone());\n+            dateService.getCronExpression(json.getCron());\n+        } catch (ParseException parseException) {\n+            throw new BadRequestException(parseException.getMessage(), parseException);\n+        }\n     }\n \n-    private void validateLoadAlert(Long clusterId, Optional<Long> alertId, LoadAlertRequest json) throws ParseException {\n-        validateAlertForUpdate(clusterId, alertId, AlertType.LOAD);\n+    private void validateLoadAlert(Long clusterId, Optional<Long> alertId, LoadAlertRequest json) {\n+        Cluster cluster = clusterService.findById(clusterId);\n+        alertId.ifPresentOrElse(\n+                updateAlert -> {\n+                    validateAlertForUpdate(clusterId, updateAlert, AlertType.LOAD);\n+                }, () -> {\n+                    if (!cluster.getTunnel().useClusterProxy()) {", "originalCommit": "43edbd16cb6d455a671bf51df90576fb488558ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNzM1Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7720#discussion_r402607357", "bodyText": "Nit: Move into the (alert == null) block.", "author": "sidseth", "createdAt": "2020-04-02T21:29:53Z", "path": "autoscale/src/main/java/com/sequenceiq/periscope/controller/AlertController.java", "diffHunk": "@@ -265,30 +280,27 @@ private PrometheusAlertResponse createPrometheusAlertResponse(PrometheusAlert al\n         return prometheusAlertResponseConverter.convert(alarm);\n     }\n \n-    private void validateAlertForUpdate(Long clusterId, Optional<Long> alertIdRequest, AlertType alertType) {\n-        alertIdRequest.ifPresent(alertId -> {\n-            BaseAlert alert;\n-            String clusterCrn = clusterService.findStackCrnById(clusterId);\n-            switch (alertType) {\n-                case LOAD:\n-                    alert = alertService.findLoadAlertByCluster(clusterId, alertId);\n-                    break;\n-                case TIME:\n-                    alert = alertService.findTimeAlertByCluster(clusterId, alertId);\n-                    break;\n-                case METRIC:\n-                    alert = alertService.findMetricAlertByCluster(clusterId, alertId);\n-                    break;\n-                case PROMETHEUS:\n-                    alert = alertService.findPrometheusAlertByCluster(clusterId, alertId);\n-                    break;\n-                default:\n-                    alert = null;\n-\n-            }\n-            if (alert == null) {\n-                throw new NotFoundException(String.format(\"Could not find %s alert with id: '%s', for cluster: '%s'\", alertType, alertId, clusterCrn));\n-            }\n-        });\n+    private void validateAlertForUpdate(Long clusterId, Long alertId, AlertType alertType) {\n+        BaseAlert alert;\n+        String clusterCrn = clusterService.findStackCrnById(clusterId);", "originalCommit": "43edbd16cb6d455a671bf51df90576fb488558ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk2NjM3NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7720#discussion_r402966375", "bodyText": "ack", "author": "smaniraju", "createdAt": "2020-04-03T12:22:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNzM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "aa84a242393ead16f0609abe74a28e5fa7cdd619", "chunk": "diff --git a/autoscale/src/main/java/com/sequenceiq/periscope/controller/AlertController.java b/autoscale/src/main/java/com/sequenceiq/periscope/controller/AlertController.java\nindex 19579af142..7e0e922b6f 100644\n--- a/autoscale/src/main/java/com/sequenceiq/periscope/controller/AlertController.java\n+++ b/autoscale/src/main/java/com/sequenceiq/periscope/controller/AlertController.java\n\n@@ -281,8 +281,7 @@ public class AlertController implements AlertEndpoint {\n     }\n \n     private void validateAlertForUpdate(Long clusterId, Long alertId, AlertType alertType) {\n-        BaseAlert alert;\n-        String clusterCrn = clusterService.findStackCrnById(clusterId);\n+        BaseAlert alert; \n         switch (alertType) {\n             case LOAD:\n                 alert = alertService.findLoadAlertByCluster(clusterId, alertId);\n"}}, {"oid": "aa84a242393ead16f0609abe74a28e5fa7cdd619", "url": "https://github.com/hortonworks/cloudbreak/commit/aa84a242393ead16f0609abe74a28e5fa7cdd619", "message": "CB-5734 Additional Validations", "committedDate": "2020-04-03T12:27:53Z", "type": "commit"}, {"oid": "aa84a242393ead16f0609abe74a28e5fa7cdd619", "url": "https://github.com/hortonworks/cloudbreak/commit/aa84a242393ead16f0609abe74a28e5fa7cdd619", "message": "CB-5734 Additional Validations", "committedDate": "2020-04-03T12:27:53Z", "type": "forcePushed"}]}