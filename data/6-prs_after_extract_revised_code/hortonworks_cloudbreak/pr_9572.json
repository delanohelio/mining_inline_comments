{"pr_number": 9572, "pr_title": "CB-9123 URL configurable in the integration test. Supported: how many\u2026", "pr_createdAt": "2020-12-04T11:44:29Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/9572", "timeline": [{"oid": "ad9ae8ab992085574d03dbc3ad5b517b033b2629", "url": "https://github.com/hortonworks/cloudbreak/commit/ad9ae8ab992085574d03dbc3ad5b517b033b2629", "message": "CB-9123 URL configurable in the integration test. Supported: how many times, custom status codes with messages. The pre-defined responses are pertians to a resource only and exclusively. You can define easily in the ITs", "committedDate": "2020-12-07T08:14:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxNTM0MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9572#discussion_r537415340", "bodyText": "Why so many commented code lines?", "author": "attilapalfi92", "createdAt": "2020-12-07T11:00:10Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/mock/answer/DefaultResponseConfigure.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.sequenceiq.it.cloudbreak.dto.mock.answer;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.hamcrest.Matcher;\n+\n+import com.sequenceiq.it.cloudbreak.dto.CloudbreakTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.mock.Method;\n+import com.sequenceiq.it.cloudbreak.mock.ExecuteQueryToMockInfrastructure;\n+import com.sequenceiq.it.cloudbreak.testcase.mock.response.MockResponse;\n+\n+public class DefaultResponseConfigure<T extends CloudbreakTestDto> {\n+    private final Method method;\n+\n+    private final String path;\n+\n+    private final T testDto;\n+\n+    private final ExecuteQueryToMockInfrastructure executeQuery;\n+\n+    private final Map<String, String> pathVariables = new HashMap<>();\n+\n+    public DefaultResponseConfigure(Method method, String path, T testDto, ExecuteQueryToMockInfrastructure executeQuery) {\n+        this.method = method;\n+        this.path = path;\n+        this.executeQuery = executeQuery;\n+        this.testDto = testDto;\n+    }\n+\n+    public Method getMethod() {\n+        return method;\n+    }\n+\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    public T clearDefinedResponses() {\n+//        mock.getDynamicRouteStack().clear(method.getHttpMethod(), path);", "originalCommit": "ad9ae8ab992085574d03dbc3ad5b517b033b2629", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQzMDQ0Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/9572#discussion_r537430446", "bodyText": "this functionality is disabled temporary. I split the epic to multiple parts but I don't want to remove the old codes. I will re-enable these lines if I can.", "author": "topolyai5", "createdAt": "2020-12-07T11:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxNTM0MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "4e32919e9374f73f1eefe85662a821f2e12d73e3", "url": "https://github.com/hortonworks/cloudbreak/commit/4e32919e9374f73f1eefe85662a821f2e12d73e3", "message": "CB-9123 URL configurable in the integration test. Supported: how many times, custom status codes with messages. The pre-defined responses are pertians to a resource only and exclusively. You can define easily in the ITs", "committedDate": "2020-12-07T11:16:16Z", "type": "forcePushed"}, {"oid": "4e32919e9374f73f1eefe85662a821f2e12d73e3", "url": "https://github.com/hortonworks/cloudbreak/commit/4e32919e9374f73f1eefe85662a821f2e12d73e3", "message": "CB-9123 URL configurable in the integration test. Supported: how many times, custom status codes with messages. The pre-defined responses are pertians to a resource only and exclusively. You can define easily in the ITs", "committedDate": "2020-12-07T11:16:16Z", "type": "forcePushed"}, {"oid": "5d89a376152ae9816ddf34f9fb9311250d06c180", "url": "https://github.com/hortonworks/cloudbreak/commit/5d89a376152ae9816ddf34f9fb9311250d06c180", "message": "CB-9123 URL configurable in the integration test. Supported: how many times, custom status codes with messages. The pre-defined responses are pertians to a resource only and exclusively. You can define easily in the ITs", "committedDate": "2020-12-07T14:42:36Z", "type": "commit"}, {"oid": "5d89a376152ae9816ddf34f9fb9311250d06c180", "url": "https://github.com/hortonworks/cloudbreak/commit/5d89a376152ae9816ddf34f9fb9311250d06c180", "message": "CB-9123 URL configurable in the integration test. Supported: how many times, custom status codes with messages. The pre-defined responses are pertians to a resource only and exclusively. You can define easily in the ITs", "committedDate": "2020-12-07T14:42:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYyMzg5Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/9572#discussion_r538623896", "bodyText": "If sparkservice eliminated we might consider to rename this annotation,or even yield this from a swagger doc (if I recall correctly mocks are generated based on swagger)", "author": "afarsang", "createdAt": "2020-12-08T17:18:40Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/mock/endpoint/ClouderaManagerEndpoints.java", "diffHunk": "@@ -1,157 +1,201 @@\n package com.sequenceiq.it.cloudbreak.dto.mock.endpoint;\n \n-import com.cloudera.api.swagger.model.ApiAuthRoleMetadataList;\n import com.cloudera.api.swagger.model.ApiClusterTemplate;\n-import com.cloudera.api.swagger.model.ApiCommand;\n-import com.cloudera.api.swagger.model.ApiCommandList;\n-import com.cloudera.api.swagger.model.ApiConfigList;\n-import com.cloudera.api.swagger.model.ApiEcho;\n-import com.cloudera.api.swagger.model.ApiHostList;\n-import com.cloudera.api.swagger.model.ApiHostTemplateList;\n-import com.cloudera.api.swagger.model.ApiParcelList;\n-import com.cloudera.api.swagger.model.ApiRemoteDataContext;\n-import com.cloudera.api.swagger.model.ApiRole;\n-import com.cloudera.api.swagger.model.ApiRoleList;\n-import com.cloudera.api.swagger.model.ApiService;\n-import com.cloudera.api.swagger.model.ApiServiceList;\n import com.cloudera.api.swagger.model.ApiUser2;\n-import com.cloudera.api.swagger.model.ApiUser2List;\n-import com.cloudera.api.swagger.model.ApiVersionInfo;\n+import com.sequenceiq.it.cloudbreak.dto.CloudbreakTestDto;\n import com.sequenceiq.it.cloudbreak.dto.mock.SparkUri;\n-import com.sequenceiq.it.cloudbreak.dto.mock.answer.AnswerWithoutRequest;\n-import com.sequenceiq.it.cloudbreak.dto.mock.answer.ClouderaManagerPreparedRequestAnswer;\n-import com.sequenceiq.it.cloudbreak.dto.mock.answer.StringRequestAnswer;\n+import com.sequenceiq.it.cloudbreak.dto.mock.answer.DefaultResponseConfigure;\n+import com.sequenceiq.it.cloudbreak.mock.ExecuteQueryToMockInfrastructure;\n \n-public final class ClouderaManagerEndpoints {\n+public final class ClouderaManagerEndpoints<T extends CloudbreakTestDto> {\n     public static final String API_ROOT = \"/api/v31\";\n \n-    private ClouderaManagerEndpoints() {\n+    private T testDto;\n+\n+    private ExecuteQueryToMockInfrastructure executeQueryToMockInfrastructure;\n+\n+    public ClouderaManagerEndpoints(T testDto, ExecuteQueryToMockInfrastructure executeQueryToMockInfrastructure) {\n+        this.testDto = testDto;\n+        this.executeQueryToMockInfrastructure = executeQueryToMockInfrastructure;\n+    }\n+\n+    public Users<T> users() {\n+        return (Users<T>) EndpointProxyFactory.create(Users.class, testDto, executeQueryToMockInfrastructure);\n+    }\n+\n+    public Admin<T> usersAdmin() {\n+        return (Admin<T>) EndpointProxyFactory.create(Admin.class, testDto, executeQueryToMockInfrastructure);\n+    }\n+\n+    public ClusterHosts<T> clusterHosts() {\n+        return (ClusterHosts<T>) EndpointProxyFactory.create(ClusterHosts.class, testDto, executeQueryToMockInfrastructure);\n+    }\n+\n+    public ClusterCommands.DeployConfig<T> clusterCommandsDeployConfig() {\n+        return (ClusterCommands.DeployConfig<T>) EndpointProxyFactory.create(ClusterCommands.DeployConfig.class, testDto, executeQueryToMockInfrastructure);\n+    }\n+\n+    public ClusterHostTemplates.CommandsApplyHostTemplate<T> commandsApplyHostTemplate() {\n+        return (ClusterHostTemplates.CommandsApplyHostTemplate<T>)\n+                EndpointProxyFactory.create(ClusterHostTemplates.CommandsApplyHostTemplate.class, testDto, executeQueryToMockInfrastructure);\n+    }\n+\n+    public Commands<T> commands() {\n+        return (Commands<T>) EndpointProxyFactory.create(Commands.class, testDto, executeQueryToMockInfrastructure);\n+    }\n+\n+    public ClouderaManagerHosts<T> clouderaManagerHosts() {\n+        return (ClouderaManagerHosts<T>) EndpointProxyFactory.create(ClouderaManagerHosts.class, testDto, executeQueryToMockInfrastructure);\n     }\n \n     @SparkUri(url = API_ROOT + \"/cm/importClusterTemplate\", requestType = ApiClusterTemplate.class)", "originalCommit": "5d89a376152ae9816ddf34f9fb9311250d06c180", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYzNDI1Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9572#discussion_r538634257", "bodyText": "Honestly I am missing the original keywords here (given when then) a bit.\nwould it make sense call this as 'whenMockSpiRequestedWith()' or something similar?", "author": "afarsang", "createdAt": "2020-12-08T17:28:25Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/EnvironmentEditTest.java", "diffHunk": "@@ -50,39 +51,37 @@ protected void setupTest(TestContext testContext) {\n             when = \"change managed ssh key to existing one\",\n             then = \"delete managed ssh key but not create new one\")\n     public void authenticationEditWhenSetExistingKeyAndDeleteManagedSuccessfully(MockedTestContext testContext) {\n+        String randomPublicKeyId = UUID.randomUUID().toString();\n         testContext\n-                .given(HttpMock.class).whenRequested(SpiEndpoints.RegisterPublicKey.class).post()\n-                .thenReturn((s, uriParameters) -> \"\")\n-                .whenRequested(SpiEndpoints.GetPublicKey.class).get()\n-                .pathVariable(\"publicKeyId\", \"id\")\n-                .thenReturn((s, uriParameters) -> true)\n+                .given(HttpMock.class)\n+                .mockSpi().getPublicKey().get()", "originalCommit": "5d89a376152ae9816ddf34f9fb9311250d06c180", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY1MDM5OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9572#discussion_r538650399", "bodyText": "I guess this line wanted to be 'registerPublikKey()' verification", "author": "afarsang", "createdAt": "2020-12-08T17:43:04Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/EnvironmentEditTest.java", "diffHunk": "@@ -50,39 +51,37 @@ protected void setupTest(TestContext testContext) {\n             when = \"change managed ssh key to existing one\",\n             then = \"delete managed ssh key but not create new one\")\n     public void authenticationEditWhenSetExistingKeyAndDeleteManagedSuccessfully(MockedTestContext testContext) {\n+        String randomPublicKeyId = UUID.randomUUID().toString();\n         testContext\n-                .given(HttpMock.class).whenRequested(SpiEndpoints.RegisterPublicKey.class).post()\n-                .thenReturn((s, uriParameters) -> \"\")\n-                .whenRequested(SpiEndpoints.GetPublicKey.class).get()\n-                .pathVariable(\"publicKeyId\", \"id\")\n-                .thenReturn((s, uriParameters) -> true)\n+                .given(HttpMock.class)\n+                .mockSpi().getPublicKey().get()\n+                .pathVariable(\"publicKeyId\", randomPublicKeyId)\n+                .thenReturn(Map.of(\"publicKeyId\", randomPublicKeyId, \"publicKey\", \"asd\"))\n+\n                 .given(EnvironmentTestDto.class)\n                 .withCreateFreeIpa(false)\n                 .when(environmentTestClient.create())\n                 .await(EnvironmentStatus.AVAILABLE)\n \n-//                .given(HttpMock.class).whenRequested(SpiEndpoints.UnregisterPublicKey.class).post().clearCalls()\n-//                .whenRequested(SpiEndpoints.UnregisterPublicKey.class).post()\n-//                .thenReturn((s, model, uriParameters) -> false)\n                 .given(EnvironmentAuthenticationTestDto.class)\n-                .withPublicKeyId(\"existing-public-key\")\n+                .withPublicKeyId(randomPublicKeyId)\n                 .withPublicKey(null)\n                 .given(EnvironmentTestDto.class)\n                 .when(environmentTestClient.changeAuthentication())\n                 .when(environmentTestClient.describe())\n                 .then((tc, t, c) -> {\n                     String publicKeyId = t.getResponse().getAuthentication().getPublicKeyId();\n                     String publicKey = t.getResponse().getAuthentication().getPublicKey();\n-                    if (!\"existing-public-key\".equals(publicKeyId)) {\n+                    if (!randomPublicKeyId.equals(publicKeyId)) {\n                         throw new TestFailException(\"The auth public key id was not changed, but it should be changed\");\n                     }\n                     if (publicKey != null) {\n                         throw new TestFailException(\"The auth public key should be null\");\n                     }\n                     return t;\n                 })\n-                .given(HttpMock.class).whenRequested(SpiEndpoints.UnregisterPublicKey.class).post().verify(CheckCount.times(1))\n-                .given(HttpMock.class).whenRequested(SpiEndpoints.RegisterPublicKey.class).post().verify(CheckCount.times(0))\n+                .mockSpi().unregisterPublicKey().post().times(1).verify()\n+                .mockSpi().unregisterPublicKey().post().times(0).verify()", "originalCommit": "5d89a376152ae9816ddf34f9fb9311250d06c180", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}