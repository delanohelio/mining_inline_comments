{"pr_number": 7135, "pr_title": "Fix of Datahub cluster terminations when FreeIPA clean failed previously", "pr_createdAt": "2020-01-23T17:03:07Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7135", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1MDUyMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7135#discussion_r370250521", "bodyText": "please move this condition into the status as a method, so you don't have the implementation twice", "author": "lacikaaa", "createdAt": "2020-01-23T17:19:29Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "diffHunk": "@@ -71,25 +72,43 @@ private String toClusterProxyBasepath(String freeIpaClusterCrn) {\n \n     public FreeIpaClient getFreeIpaClientForStack(Stack stack) throws FreeIpaClientException {\n         LOGGER.debug(\"Creating FreeIpaClient for stack {}\", stack.getResourceCrn());\n-\n-        try {\n-            if (clusterProxyService.isCreateConfigForClusterProxy(stack)) {\n-                return getFreeIpaClientBuilderForClusterProxy(stack).build();\n-            } else {\n-                return getFreeIpaClientBuilder(stack).build();\n+        Status stackStatus = stack.getStackStatus().getStatus();\n+        if (!Status.FREEIPA_UNREACHABLE_STATUSES.contains(stackStatus)) {", "originalCommit": "42f3ae446512af6bdf7ed56695ff0471e795f232", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "098866ca250be2aeb245b0cc1ea7b38896a38c18", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java\nindex 57118a351a..9bd22e711d 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java\n\n@@ -73,7 +73,7 @@ public class FreeIpaClientFactory {\n     public FreeIpaClient getFreeIpaClientForStack(Stack stack) throws FreeIpaClientException {\n         LOGGER.debug(\"Creating FreeIpaClient for stack {}\", stack.getResourceCrn());\n         Status stackStatus = stack.getStackStatus().getStatus();\n-        if (!Status.FREEIPA_UNREACHABLE_STATUSES.contains(stackStatus)) {\n+        if (!stackStatus.isFreeIpaUnreachableStatus()) {\n             try {\n                 if (clusterProxyService.isCreateConfigForClusterProxy(stack)) {\n                     return getFreeIpaClientBuilderForClusterProxy(stack).build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1MTA3Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7135#discussion_r370251076", "bodyText": "this else branch can be moved into a separate method", "author": "lacikaaa", "createdAt": "2020-01-23T17:20:40Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "diffHunk": "@@ -71,25 +72,43 @@ private String toClusterProxyBasepath(String freeIpaClusterCrn) {\n \n     public FreeIpaClient getFreeIpaClientForStack(Stack stack) throws FreeIpaClientException {\n         LOGGER.debug(\"Creating FreeIpaClient for stack {}\", stack.getResourceCrn());\n-\n-        try {\n-            if (clusterProxyService.isCreateConfigForClusterProxy(stack)) {\n-                return getFreeIpaClientBuilderForClusterProxy(stack).build();\n-            } else {\n-                return getFreeIpaClientBuilder(stack).build();\n+        Status stackStatus = stack.getStackStatus().getStatus();\n+        if (!Status.FREEIPA_UNREACHABLE_STATUSES.contains(stackStatus)) {\n+            try {\n+                if (clusterProxyService.isCreateConfigForClusterProxy(stack)) {\n+                    return getFreeIpaClientBuilderForClusterProxy(stack).build();\n+                } else {\n+                    return getFreeIpaClientBuilder(stack).build();\n+                }\n+            } catch (Exception e) {\n+                throw new FreeIpaClientException(\"Couldn't build FreeIPA client. \"\n+                        + \"Check if the FreeIPA security rules have not changed and the instance is in running state. \" + e.getLocalizedMessage(), e);\n             }\n-        } catch (Exception e) {\n-            throw new FreeIpaClientException(\"Couldn't build FreeIPA client. \"\n-                    + \"Check if the FreeIPA security rules have not changed and the instance is in running state. \" + e.getLocalizedMessage(), e);\n+        } else {\n+            String message = String.format(\"Couldn't build FreeIPA client. Because FreeIPA is in invalid state: '%s'\", stackStatus);\n+            LOGGER.warn(message);", "originalCommit": "42f3ae446512af6bdf7ed56695ff0471e795f232", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "098866ca250be2aeb245b0cc1ea7b38896a38c18", "chunk": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java\nindex 57118a351a..9bd22e711d 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java\n\n@@ -73,7 +73,7 @@ public class FreeIpaClientFactory {\n     public FreeIpaClient getFreeIpaClientForStack(Stack stack) throws FreeIpaClientException {\n         LOGGER.debug(\"Creating FreeIpaClient for stack {}\", stack.getResourceCrn());\n         Status stackStatus = stack.getStackStatus().getStatus();\n-        if (!Status.FREEIPA_UNREACHABLE_STATUSES.contains(stackStatus)) {\n+        if (!stackStatus.isFreeIpaUnreachableStatus()) {\n             try {\n                 if (clusterProxyService.isCreateConfigForClusterProxy(stack)) {\n                     return getFreeIpaClientBuilderForClusterProxy(stack).build();\n"}}, {"oid": "098866ca250be2aeb245b0cc1ea7b38896a38c18", "url": "https://github.com/hortonworks/cloudbreak/commit/098866ca250be2aeb245b0cc1ea7b38896a38c18", "message": "CB-5190 avoid timeouts of DistroX/Cluster termination triggers", "committedDate": "2020-01-23T21:13:24Z", "type": "forcePushed"}, {"oid": "9a737166b0e73f0942ef592931e6cfb7030f6731", "url": "https://github.com/hortonworks/cloudbreak/commit/9a737166b0e73f0942ef592931e6cfb7030f6731", "message": "CB-5190 avoid timeouts of DistroX/Cluster termination triggers", "committedDate": "2020-01-24T00:13:49Z", "type": "forcePushed"}, {"oid": "b6171bdee467c19a2a42aebdb9e0a3e8be1d1104", "url": "https://github.com/hortonworks/cloudbreak/commit/b6171bdee467c19a2a42aebdb9e0a3e8be1d1104", "message": "CB-5190 client builder based on stack state in FreeIPA", "committedDate": "2020-01-24T08:13:04Z", "type": "commit"}, {"oid": "770c0c32ae18b6c589a1801113f34226920c6cb0", "url": "https://github.com/hortonworks/cloudbreak/commit/770c0c32ae18b6c589a1801113f34226920c6cb0", "message": "CB-5190 avoid timeouts of DistroX/Cluster termination triggers", "committedDate": "2020-01-24T08:13:04Z", "type": "commit"}, {"oid": "770c0c32ae18b6c589a1801113f34226920c6cb0", "url": "https://github.com/hortonworks/cloudbreak/commit/770c0c32ae18b6c589a1801113f34226920c6cb0", "message": "CB-5190 avoid timeouts of DistroX/Cluster termination triggers", "committedDate": "2020-01-24T08:13:04Z", "type": "forcePushed"}]}