{"pr_number": 7088, "pr_title": "CB-5117 Update existing security groups of environments", "pr_createdAt": "2020-01-16T14:59:35Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7088", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ3MzM2Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367473367", "bodyText": "I think this should be IllegalStateException or some other one but definitely not IllegalArgumentException since we don't know whether this method has got some illegal input argument or just something happened.", "author": "gregito", "createdAt": "2020-01-16T15:12:43Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java", "diffHunk": "@@ -483,6 +484,18 @@ public CloudSecurityGroups securityGroups(CloudCredential cloudCredential, Regio\n         return new CloudSecurityGroups(result);\n     }\n \n+    private List<SecurityGroup> fetchSecurityGroups(AmazonEC2Client ec2Client, DescribeSecurityGroupsRequest describeSecurityGroupsRequest) {\n+        try {\n+            return ec2Client.describeSecurityGroups(describeSecurityGroupsRequest).getSecurityGroups();\n+        } catch (AmazonEC2Exception e) {\n+            if (e.getStatusCode() == HttpStatus.BAD_REQUEST.value() || e.getStatusCode() == HttpStatus.NOT_FOUND.value()) {\n+                throw new IllegalArgumentException(e.getErrorMessage(), e);", "originalCommit": "56168b67b6e18975d149070cc655cd16828decef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwMTQzMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367501431", "bodyText": "or, throw CloudConnectorException.", "author": "bergerdenes", "createdAt": "2020-01-16T15:58:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ3MzM2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5MDg4Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367790886", "bodyText": "It is just an internal exception. I'm fine with a dedicated exception, but the CloudConnectorEception is not the best solution. @bergerdenes if you search in the pr, I handle the exception in GetPlatformSecurityGroupsHandler. I need to mark as a Permanent exception and I need to exit from the retry. I think the CloudConnector is a retryable exception in this code", "author": "topolyai5", "createdAt": "2020-01-17T06:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ3MzM2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2d39e3c927b0d099043694ea2432c5595672139c", "chunk": "diff --git a/cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java b/cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java\nindex fce61a3c42..ed3cd18440 100644\n--- a/cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java\n+++ b/cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java\n\n@@ -489,7 +490,7 @@ public class AwsPlatformResources implements PlatformResources {\n             return ec2Client.describeSecurityGroups(describeSecurityGroupsRequest).getSecurityGroups();\n         } catch (AmazonEC2Exception e) {\n             if (e.getStatusCode() == HttpStatus.BAD_REQUEST.value() || e.getStatusCode() == HttpStatus.NOT_FOUND.value()) {\n-                throw new IllegalArgumentException(e.getErrorMessage(), e);\n+                throw new PermanentlyFailedException(e.getErrorMessage(), e);\n             } else {\n                 throw e;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ3Mzg4Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367473886", "bodyText": "same here. we don't know why the networkSecurityGroup is null, hence this is a state where we don't know what to do. -> IllegalStateException", "author": "gregito", "createdAt": "2020-01-16T15:13:37Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java", "diffHunk": "@@ -121,15 +122,17 @@ public CloudSshKeys sshKeys(CloudCredential cloudCredential, Region region, Map<\n     public CloudSecurityGroups securityGroups(CloudCredential cloudCredential, Region region, Map<String, String> filters) {\n         AzureClient client = azureClientService.getClient(cloudCredential);\n         Map<String, Set<CloudSecurityGroup>> result = new HashMap<>();\n-\n-        for (NetworkSecurityGroup securityGroup : client.getSecurityGroups().list()) {\n-            String actualRegion = securityGroup.region().label();\n-            if (regionMatch(actualRegion, region)) {\n-                Map<String, Object> properties = new HashMap<>();\n-                properties.put(\"resourceGroupName\", securityGroup.resourceGroupName());\n-                properties.put(\"networkInterfaceIds\", securityGroup.networkInterfaceIds());\n-                CloudSecurityGroup cloudSecurityGroup = new CloudSecurityGroup(securityGroup.name(), securityGroup.id(), properties);\n-                result.computeIfAbsent(actualRegion, s -> new HashSet<>()).add(cloudSecurityGroup);\n+        PlatformResourceSecurityGroupFilterView filter = new PlatformResourceSecurityGroupFilterView(filters);\n+        String groupId = filter.getGroupId();\n+        if (groupId != null) {\n+            NetworkSecurityGroup networkSecurityGroup = client.getSecurityGroups().getById(groupId);\n+            if (networkSecurityGroup == null) {\n+                throw new IllegalArgumentException(\"Nothing found on Azure with id: \" + groupId);", "originalCommit": "56168b67b6e18975d149070cc655cd16828decef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwNDQyNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367504425", "bodyText": "or CloudConnectorException", "author": "bergerdenes", "createdAt": "2020-01-16T16:03:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ3Mzg4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2d39e3c927b0d099043694ea2432c5595672139c", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java\nindex d12de1abbe..957488c614 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java\n\n@@ -125,10 +127,7 @@ public class AzurePlatformResources implements PlatformResources {\n         PlatformResourceSecurityGroupFilterView filter = new PlatformResourceSecurityGroupFilterView(filters);\n         String groupId = filter.getGroupId();\n         if (groupId != null) {\n-            NetworkSecurityGroup networkSecurityGroup = client.getSecurityGroups().getById(groupId);\n-            if (networkSecurityGroup == null) {\n-                throw new IllegalArgumentException(\"Nothing found on Azure with id: \" + groupId);\n-            }\n+            NetworkSecurityGroup networkSecurityGroup = getNetworkSecurityGroup(client, groupId);\n             convertAndAddToResult(region, result, networkSecurityGroup);\n         } else {\n             for (NetworkSecurityGroup securityGroup : client.getSecurityGroups().list()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwNDk4NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367504984", "bodyText": "use the exception class from earlier comments", "author": "bergerdenes", "createdAt": "2020-01-16T16:04:10Z", "path": "cloud-reactor/src/main/java/com/sequenceiq/cloudbreak/cloud/handler/GetPlatformSecurityGroupsHandler.java", "diffHunk": "@@ -44,6 +45,8 @@ public void accept(Event<GetPlatformSecurityGroupsRequest> getPlatformSecurityGr\n             GetPlatformSecurityGroupsResult getPlatformSecurityGroupsResult = new GetPlatformSecurityGroupsResult(request.getResourceId(), securityGroups);\n             request.getResult().onNext(getPlatformSecurityGroupsResult);\n             LOGGER.debug(\"Query platform networks types finished.\");\n+        } catch (IllegalArgumentException e) {", "originalCommit": "56168b67b6e18975d149070cc655cd16828decef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5MTA1Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367791057", "bodyText": "I need to mark as a Permanent exception and I need to exit from the retry. I think the CloudConnector is a retryable exception in this code", "author": "topolyai5", "createdAt": "2020-01-17T06:51:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwNDk4NA=="}], "type": "inlineReview", "revised_code": {"commit": "2d39e3c927b0d099043694ea2432c5595672139c", "chunk": "diff --git a/cloud-reactor/src/main/java/com/sequenceiq/cloudbreak/cloud/handler/GetPlatformSecurityGroupsHandler.java b/cloud-reactor/src/main/java/com/sequenceiq/cloudbreak/cloud/handler/GetPlatformSecurityGroupsHandler.java\nindex 22a296d989..f5765bb729 100644\n--- a/cloud-reactor/src/main/java/com/sequenceiq/cloudbreak/cloud/handler/GetPlatformSecurityGroupsHandler.java\n+++ b/cloud-reactor/src/main/java/com/sequenceiq/cloudbreak/cloud/handler/GetPlatformSecurityGroupsHandler.java\n\n@@ -45,7 +46,7 @@ public class GetPlatformSecurityGroupsHandler implements CloudPlatformEventHandl\n             GetPlatformSecurityGroupsResult getPlatformSecurityGroupsResult = new GetPlatformSecurityGroupsResult(request.getResourceId(), securityGroups);\n             request.getResult().onNext(getPlatformSecurityGroupsResult);\n             LOGGER.debug(\"Query platform networks types finished.\");\n-        } catch (IllegalArgumentException e) {\n+        } catch (PermanentlyFailedException e) {\n             request.getResult().onNext(new GetPlatformSecurityGroupsResult(EventStatus.PERMANENTLY_FAILED, e.getMessage(), e, request.getResourceId()));\n         } catch (Exception e) {\n             request.getResult().onNext(new GetPlatformSecurityGroupsResult(e.getMessage(), e, request.getResourceId()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3OTAyNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367579027", "bodyText": "this is not good as EnvironmentCreationService is also using this method and CIDR setting is impossible with this change", "author": "bergerdenes", "createdAt": "2020-01-16T18:27:54Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java", "diffHunk": "@@ -207,9 +208,25 @@ public CreateAWSEnvironmentRequest getCreateAWSEnvironmentForCli(EnvironmentDto\n         return environmentRepository.findByResourceCrnAndAccountIdAndArchivedIsFalse(resourceCrn, accountId);\n     }\n \n+    /**\n+     * The CIDR could not be edited so the first step we clear the the existed CIDR every time.\n+     * We are assuming the security access has the proper security group ids and we don't check it again.\n+     * If the knox or default security groups are blank we don't set\n+     * @param environment the security access will be update for this environment\n+     * @param securityAccess this should contains the knox and default security groups\n+     */\n+    void editSecurityAccess(Environment environment, SecurityAccessDto securityAccess) {\n+        environment.setCidr(null);\n+        if (StringUtils.isNotBlank(securityAccess.getDefaultSecurityGroupId())) {\n+            environment.setDefaultSecurityGroupId(securityAccess.getDefaultSecurityGroupId());\n+        }\n+        if (StringUtils.isNotBlank(securityAccess.getSecurityGroupIdForKnox())) {\n+            environment.setSecurityGroupIdForKnox(securityAccess.getSecurityGroupIdForKnox());\n+        }\n+    }\n+\n     void setSecurityAccess(Environment environment, SecurityAccessDto securityAccess) {\n         if (securityAccess != null) {\n-            environment.setCidr(securityAccess.getCidr());", "originalCommit": "56168b67b6e18975d149070cc655cd16828decef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5MzA2Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367793066", "bodyText": "hm, I revert this", "author": "topolyai5", "createdAt": "2020-01-17T07:00:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3OTAyNw=="}], "type": "inlineReview", "revised_code": {"commit": "2d39e3c927b0d099043694ea2432c5595672139c", "chunk": "diff --git a/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java b/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java\nindex 7a5a261d58..cc61bc97e3 100644\n--- a/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java\n+++ b/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java\n\n@@ -212,7 +212,8 @@ public class EnvironmentService implements ResourceIdProvider {\n      * The CIDR could not be edited so the first step we clear the the existed CIDR every time.\n      * We are assuming the security access has the proper security group ids and we don't check it again.\n      * If the knox or default security groups are blank we don't set\n-     * @param environment the security access will be update for this environment\n+     *\n+     * @param environment    the security access will be update for this environment\n      * @param securityAccess this should contains the knox and default security groups\n      */\n     void editSecurityAccess(Environment environment, SecurityAccessDto securityAccess) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3OTM3Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367579373", "bodyText": "is it a hard requirement?", "author": "bergerdenes", "createdAt": "2020-01-16T18:28:41Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java", "diffHunk": "@@ -207,9 +208,25 @@ public CreateAWSEnvironmentRequest getCreateAWSEnvironmentForCli(EnvironmentDto\n         return environmentRepository.findByResourceCrnAndAccountIdAndArchivedIsFalse(resourceCrn, accountId);\n     }\n \n+    /**\n+     * The CIDR could not be edited so the first step we clear the the existed CIDR every time.", "originalCommit": "56168b67b6e18975d149070cc655cd16828decef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5MTQyMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367791420", "bodyText": "what do you mean hard? Yes, if we edit a security group we always clear the cidr because we replace by a security group id", "author": "topolyai5", "createdAt": "2020-01-17T06:53:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3OTM3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "2d39e3c927b0d099043694ea2432c5595672139c", "chunk": "diff --git a/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java b/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java\nindex 7a5a261d58..cc61bc97e3 100644\n--- a/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java\n+++ b/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java\n\n@@ -212,7 +212,8 @@ public class EnvironmentService implements ResourceIdProvider {\n      * The CIDR could not be edited so the first step we clear the the existed CIDR every time.\n      * We are assuming the security access has the proper security group ids and we don't check it again.\n      * If the knox or default security groups are blank we don't set\n-     * @param environment the security access will be update for this environment\n+     *\n+     * @param environment    the security access will be update for this environment\n      * @param securityAccess this should contains the knox and default security groups\n      */\n     void editSecurityAccess(Environment environment, SecurityAccessDto securityAccess) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3OTQxOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367579419", "bodyText": "why?", "author": "bergerdenes", "createdAt": "2020-01-16T18:28:47Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java", "diffHunk": "@@ -207,9 +208,25 @@ public CreateAWSEnvironmentRequest getCreateAWSEnvironmentForCli(EnvironmentDto\n         return environmentRepository.findByResourceCrnAndAccountIdAndArchivedIsFalse(resourceCrn, accountId);\n     }\n \n+    /**\n+     * The CIDR could not be edited so the first step we clear the the existed CIDR every time.\n+     * We are assuming the security access has the proper security group ids and we don't check it again.", "originalCommit": "56168b67b6e18975d149070cc655cd16828decef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5Mjg2Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367792862", "bodyText": "Because I check the security access one step before it. I don't want to check here again, so if anyone wants to use this function, calculate with that, I clear the cidr and set anything that they set to SecurityAccess without validation.", "author": "topolyai5", "createdAt": "2020-01-17T06:59:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3OTQxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "2d39e3c927b0d099043694ea2432c5595672139c", "chunk": "diff --git a/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java b/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java\nindex 7a5a261d58..cc61bc97e3 100644\n--- a/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java\n+++ b/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java\n\n@@ -212,7 +212,8 @@ public class EnvironmentService implements ResourceIdProvider {\n      * The CIDR could not be edited so the first step we clear the the existed CIDR every time.\n      * We are assuming the security access has the proper security group ids and we don't check it again.\n      * If the knox or default security groups are blank we don't set\n-     * @param environment the security access will be update for this environment\n+     *\n+     * @param environment    the security access will be update for this environment\n      * @param securityAccess this should contains the knox and default security groups\n      */\n     void editSecurityAccess(Environment environment, SecurityAccessDto securityAccess) {\n"}}, {"oid": "2d39e3c927b0d099043694ea2432c5595672139c", "url": "https://github.com/hortonworks/cloudbreak/commit/2d39e3c927b0d099043694ea2432c5595672139c", "message": "CB-5117 Update existing security groups of environments", "committedDate": "2020-01-17T09:50:03Z", "type": "forcePushed"}, {"oid": "2222a9edfee55372ecb49dcc7ee73d737e95f460", "url": "https://github.com/hortonworks/cloudbreak/commit/2222a9edfee55372ecb49dcc7ee73d737e95f460", "message": "CB-5117 Update existing security groups of environments", "committedDate": "2020-01-17T09:55:42Z", "type": "forcePushed"}, {"oid": "94699c78c529e625edee73b3028e51c4c2c93d74", "url": "https://github.com/hortonworks/cloudbreak/commit/94699c78c529e625edee73b3028e51c4c2c93d74", "message": "CB-5117 Update existing security groups of environments", "committedDate": "2020-01-17T10:30:19Z", "type": "commit"}, {"oid": "94699c78c529e625edee73b3028e51c4c2c93d74", "url": "https://github.com/hortonworks/cloudbreak/commit/94699c78c529e625edee73b3028e51c4c2c93d74", "message": "CB-5117 Update existing security groups of environments", "committedDate": "2020-01-17T10:30:19Z", "type": "forcePushed"}]}