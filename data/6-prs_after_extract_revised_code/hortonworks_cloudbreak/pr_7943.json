{"pr_number": 7943, "pr_title": "CB-6830 Run AWS e2e tests on spot instances", "pr_createdAt": "2020-04-30T10:10:37Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7943", "timeline": [{"oid": "483615b0eb3a3c989c00fd999bb4e7cf2b257017", "url": "https://github.com/hortonworks/cloudbreak/commit/483615b0eb3a3c989c00fd999bb4e7cf2b257017", "message": "CB-6830 Run AWS integration tests on spot instances", "committedDate": "2020-04-30T10:49:51Z", "type": "forcePushed"}, {"oid": "283c9a8d36ba8ad706d5fa5d8567282584e99925", "url": "https://github.com/hortonworks/cloudbreak/commit/283c9a8d36ba8ad706d5fa5d8567282584e99925", "message": "CB-6830 Run AWS integration tests on spot instances", "committedDate": "2020-05-15T14:10:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5NzQwOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7943#discussion_r426597409", "bodyText": "100 should be getSpotPercentage()", "author": "bergerdenes", "createdAt": "2020-05-18T12:44:27Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/aws/AwsCloudProvider.java", "diffHunk": "@@ -371,6 +391,28 @@ public void setInstanceTemplateV1Parameters(InstanceTemplateV1Request instanceTe\n         AwsEncryptionV1Parameters awsEncryptionV1Parameters = new AwsEncryptionV1Parameters();\n         awsEncryptionV1Parameters.setType(EncryptionType.DEFAULT);\n         awsInstanceTemplateV1Parameters.setEncryption(awsEncryptionV1Parameters);\n+        awsInstanceTemplateV1Parameters.setSpot(getAwsInstanceTemplateV1SpotParameters());\n         instanceTemplateV1Request.setAws(awsInstanceTemplateV1Parameters);\n     }\n+\n+    private AwsInstanceTemplateV1SpotParameters getAwsInstanceTemplateV1SpotParameters() {\n+        AwsInstanceTemplateV1SpotParameters awsInstanceTemplateV1SpotParameters = new AwsInstanceTemplateV1SpotParameters();\n+        awsInstanceTemplateV1SpotParameters.setPercentage(100);", "originalCommit": "283c9a8d36ba8ad706d5fa5d8567282584e99925", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f2519b78502937e7dad69ec6f5a9e08f318285a", "chunk": "diff --git a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/aws/AwsCloudProvider.java b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/aws/AwsCloudProvider.java\nindex 29a902bdf7..e31ea08e59 100644\n--- a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/aws/AwsCloudProvider.java\n+++ b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/aws/AwsCloudProvider.java\n\n@@ -397,7 +392,7 @@ public class AwsCloudProvider extends AbstractCloudProvider {\n \n     private AwsInstanceTemplateV1SpotParameters getAwsInstanceTemplateV1SpotParameters() {\n         AwsInstanceTemplateV1SpotParameters awsInstanceTemplateV1SpotParameters = new AwsInstanceTemplateV1SpotParameters();\n-        awsInstanceTemplateV1SpotParameters.setPercentage(100);\n+        awsInstanceTemplateV1SpotParameters.setPercentage(SpotUtil.getSpotPercentage());\n         return awsInstanceTemplateV1SpotParameters;\n     }\n \n"}}, {"oid": "1f2519b78502937e7dad69ec6f5a9e08f318285a", "url": "https://github.com/hortonworks/cloudbreak/commit/1f2519b78502937e7dad69ec6f5a9e08f318285a", "message": "CB-6830 Revert unnecessary changes", "committedDate": "2020-05-20T15:03:41Z", "type": "forcePushed"}, {"oid": "7464bc349dbe73ceb8ba057804fd2de47fdb2502", "url": "https://github.com/hortonworks/cloudbreak/commit/7464bc349dbe73ceb8ba057804fd2de47fdb2502", "message": "CB-6830 Run AWS e2e tests on spot instances", "committedDate": "2020-05-21T14:09:09Z", "type": "forcePushed"}, {"oid": "4540c07921aa4d00d69a01e6663dc1a3b32d14a5", "url": "https://github.com/hortonworks/cloudbreak/commit/4540c07921aa4d00d69a01e6663dc1a3b32d14a5", "message": "CB-6830 Run AWS e2e tests on spot instances", "committedDate": "2020-05-21T15:19:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMzI3Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7943#discussion_r428633277", "bodyText": "this class uses DTOs only as return values. The AttachedFreeIpaRequest has its own DTO counterpart: FreeIpaCreationDto. Check please how could you utilize that.", "author": "bergerdenes", "createdAt": "2020-05-21T12:54:51Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/AbstractCloudProvider.java", "diffHunk": "@@ -173,6 +174,11 @@ public EnvironmentSecurityAccessTestDto environmentSecurityAccess(EnvironmentSec\n         return environmentSecurityAccessTestDto;\n     }\n \n+    @Override\n+    public AttachedFreeIpaRequest getAttachedFreeIpaRequest() {", "originalCommit": "91aa09dd8c62df899c67ec8c52c209642a09bcec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7999b135883b966c5cd6e601c27d8897e4638e7", "chunk": "diff --git a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/AbstractCloudProvider.java b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/AbstractCloudProvider.java\nindex ae978027ce..d8bbc80ffb 100644\n--- a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/AbstractCloudProvider.java\n+++ b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/AbstractCloudProvider.java\n\n@@ -174,11 +184,6 @@ public abstract class AbstractCloudProvider implements CloudProvider {\n         return environmentSecurityAccessTestDto;\n     }\n \n-    @Override\n-    public AttachedFreeIpaRequest getAttachedFreeIpaRequest() {\n-        return new AttachedFreeIpaRequest();\n-    }\n-\n     protected abstract ClusterTestDto withCluster(ClusterTestDto cluster);\n \n     protected abstract DistroXClusterTestDto withCluster(DistroXClusterTestDto cluster);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMzY2OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7943#discussion_r428633668", "bodyText": "Use DTO please.", "author": "bergerdenes", "createdAt": "2020-05-21T12:55:33Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/CloudProvider.java", "diffHunk": "@@ -137,4 +138,6 @@\n \n     void setInstanceTemplateV1Parameters(InstanceTemplateV1Request instanceTemplateV1Request);\n \n+    AttachedFreeIpaRequest getAttachedFreeIpaRequest();", "originalCommit": "91aa09dd8c62df899c67ec8c52c209642a09bcec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7999b135883b966c5cd6e601c27d8897e4638e7", "chunk": "diff --git a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/CloudProvider.java b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/CloudProvider.java\nindex 328b5bb41d..96a96d7243 100644\n--- a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/CloudProvider.java\n+++ b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/CloudProvider.java\n\n@@ -138,6 +137,4 @@ public interface CloudProvider {\n \n     void setInstanceTemplateV1Parameters(InstanceTemplateV1Request instanceTemplateV1Request);\n \n-    AttachedFreeIpaRequest getAttachedFreeIpaRequest();\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY0Mjk4NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7943#discussion_r428642985", "bodyText": "might worth logging the retested method or some other metadata", "author": "bergerdenes", "createdAt": "2020-05-21T13:14:17Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/spot/SpotRetryOnceTestListener.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.sequenceiq.it.cloudbreak.util.spot;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestListener;\n+import org.testng.ITestNGMethod;\n+import org.testng.ITestResult;\n+\n+@Component\n+public class SpotRetryOnceTestListener implements ITestListener {\n+\n+    /**\n+     * Add {@link SpotRetryOnce} retry analyzer to test methods that should be retried on failure.\n+     */\n+    @Override\n+    public void onTestStart(ITestResult result) {\n+        ITestNGMethod testNGMethod = result.getMethod();\n+        if (SpotUtil.shouldUseSpotInstances(testNGMethod.getConstructorOrMethod().getMethod())) {\n+            testNGMethod.setRetryAnalyzerClass(SpotRetryOnce.class);\n+        }\n+    }\n+\n+    public static class SpotRetryOnce implements IRetryAnalyzer {\n+\n+        private static final Logger LOGGER = LoggerFactory.getLogger(SpotRetryOnce.class);\n+\n+        @Override\n+        public boolean retry(ITestResult result) {\n+            if (SpotRetryUtil.willRetry(result.getMethod())) {\n+                LOGGER.info(\"Retrying test\");", "originalCommit": "91aa09dd8c62df899c67ec8c52c209642a09bcec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0OTc1MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7943#discussion_r431049751", "bodyText": "This is the full log line written:\n13:33:32.279 [main] INFO  c.s.i.c.u.s.SpotRetryOnceTestListener$SpotRetryOnce [UseSpotInstancesExampleTest.failure] - Retrying test\nIt contains the test class and method name.", "author": "Bajzathd", "createdAt": "2020-05-27T11:34:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY0Mjk4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7464bc349dbe73ceb8ba057804fd2de47fdb2502", "chunk": "diff --git a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/spot/SpotRetryOnceTestListener.java b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/spot/SpotRetryOnceTestListener.java\nindex a10465cb89..0d79d920c6 100644\n--- a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/spot/SpotRetryOnceTestListener.java\n+++ b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/spot/SpotRetryOnceTestListener.java\n\n@@ -2,13 +2,11 @@ package com.sequenceiq.it.cloudbreak.util.spot;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.stereotype.Component;\n import org.testng.IRetryAnalyzer;\n import org.testng.ITestListener;\n import org.testng.ITestNGMethod;\n import org.testng.ITestResult;\n \n-@Component\n public class SpotRetryOnceTestListener implements ITestListener {\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAyNDc2NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7943#discussion_r431024764", "bodyText": "pls move this method to the bottom", "author": "bergerdenes", "createdAt": "2020-05-27T10:43:34Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/spot/SpotUtil.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.sequenceiq.it.cloudbreak.util.spot;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.it.cloudbreak.cloud.v4.CommonCloudProperties;\n+import com.sequenceiq.it.cloudbreak.config.SpotProperties;\n+\n+@Component\n+public class SpotUtil {\n+\n+    private static final ThreadLocal<Boolean> USE_SPOT_INSTANCES = new ThreadLocal<>();\n+\n+    private final SpotProperties spotProperties;\n+\n+    private final CommonCloudProperties commonCloudProperties;\n+\n+    public SpotUtil(SpotProperties spotProperties, CommonCloudProperties commonCloudProperties) {\n+        this.spotProperties = spotProperties;\n+        this.commonCloudProperties = commonCloudProperties;\n+    }\n+\n+    public boolean shouldUseSpotInstancesForTest(Method testMethod) {\n+        return spotIsEnabledOnCurrentCloudPlatform()\n+                && testMethod.isAnnotationPresent(UseSpotInstances.class);\n+    }\n+\n+    private boolean spotIsEnabledOnCurrentCloudPlatform() {", "originalCommit": "fa9d025eb6e99c94aca7164c3465c7e15672059f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce4508f1a25cff703ecc65c70b6bbbed5617557b", "chunk": "diff --git a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/spot/SpotUtil.java b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/spot/SpotUtil.java\nindex 60eedcfe49..af116b90ce 100644\n--- a/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/spot/SpotUtil.java\n+++ b/integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/spot/SpotUtil.java\n\n@@ -3,39 +3,23 @@ package com.sequenceiq.it.cloudbreak.util.spot;\n import java.lang.reflect.Method;\n import java.util.Optional;\n \n-import org.springframework.stereotype.Component;\n-\n-import com.sequenceiq.it.cloudbreak.cloud.v4.CommonCloudProperties;\n-import com.sequenceiq.it.cloudbreak.config.SpotProperties;\n-\n-@Component\n public class SpotUtil {\n \n     private static final ThreadLocal<Boolean> USE_SPOT_INSTANCES = new ThreadLocal<>();\n \n-    private final SpotProperties spotProperties;\n-\n-    private final CommonCloudProperties commonCloudProperties;\n-\n-    public SpotUtil(SpotProperties spotProperties, CommonCloudProperties commonCloudProperties) {\n-        this.spotProperties = spotProperties;\n-        this.commonCloudProperties = commonCloudProperties;\n-    }\n+    private SpotUtil() {\n \n-    public boolean shouldUseSpotInstancesForTest(Method testMethod) {\n-        return spotIsEnabledOnCurrentCloudPlatform()\n-                && testMethod.isAnnotationPresent(UseSpotInstances.class);\n     }\n \n-    private boolean spotIsEnabledOnCurrentCloudPlatform() {\n-        return spotProperties.getEnabledCloudPlatforms().contains(commonCloudProperties.getCloudProvider());\n+    public static boolean shouldUseSpotInstances(Method testMethod) {\n+        return testMethod.isAnnotationPresent(UseSpotInstances.class);\n     }\n \n-    public void setUseSpotInstances(Boolean useSpotInstances) {\n+    public static void useSpotInstances(Boolean useSpotInstances) {\n         USE_SPOT_INSTANCES.set(useSpotInstances);\n     }\n \n-    public boolean isUseSpotInstances() {\n-        return Optional.ofNullable(USE_SPOT_INSTANCES.get()).orElse(Boolean.FALSE);\n+    public static int getSpotPercentage() {\n+        return Optional.ofNullable(USE_SPOT_INSTANCES.get()).orElse(Boolean.FALSE) ? 100 : 0;\n     }\n }\n"}}, {"oid": "ce4508f1a25cff703ecc65c70b6bbbed5617557b", "url": "https://github.com/hortonworks/cloudbreak/commit/ce4508f1a25cff703ecc65c70b6bbbed5617557b", "message": "CB-6830 Run AWS e2e tests on spot instances", "committedDate": "2020-05-29T15:20:22Z", "type": "commit"}, {"oid": "2a49fdd91b9982c8bc393f2154f76934b28f6f58", "url": "https://github.com/hortonworks/cloudbreak/commit/2a49fdd91b9982c8bc393f2154f76934b28f6f58", "message": "CB-6830 Restrict spot logic to AWS", "committedDate": "2020-05-29T15:20:22Z", "type": "commit"}, {"oid": "c7999b135883b966c5cd6e601c27d8897e4638e7", "url": "https://github.com/hortonworks/cloudbreak/commit/c7999b135883b966c5cd6e601c27d8897e4638e7", "message": "CB-6830 Fix review comments", "committedDate": "2020-05-29T15:20:22Z", "type": "commit"}, {"oid": "8ed2551c4c853b32df18cf8c3aa74130f098842e", "url": "https://github.com/hortonworks/cloudbreak/commit/8ed2551c4c853b32df18cf8c3aa74130f098842e", "message": "CB-6830 Add AwsDistroXSpotInstanceTest to aws-e2e-tests test suite", "committedDate": "2020-05-29T15:20:22Z", "type": "commit"}, {"oid": "8ed2551c4c853b32df18cf8c3aa74130f098842e", "url": "https://github.com/hortonworks/cloudbreak/commit/8ed2551c4c853b32df18cf8c3aa74130f098842e", "message": "CB-6830 Add AwsDistroXSpotInstanceTest to aws-e2e-tests test suite", "committedDate": "2020-05-29T15:20:22Z", "type": "forcePushed"}]}