{"pr_number": 8757, "pr_title": "CB-8274: Re-write ranger admin group in ranger policies.", "pr_createdAt": "2020-08-07T20:34:31Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8757", "timeline": [{"oid": "a4a458e34d0f968cff4012c12c7419da0893e4ef", "url": "https://github.com/hortonworks/cloudbreak/commit/a4a458e34d0f968cff4012c12c7419da0893e4ef", "message": "CB-8274: Re-write ranger admin group in ranger policies.", "committedDate": "2020-08-10T13:24:21Z", "type": "commit"}, {"oid": "a4a458e34d0f968cff4012c12c7419da0893e4ef", "url": "https://github.com/hortonworks/cloudbreak/commit/a4a458e34d0f968cff4012c12c7419da0893e4ef", "message": "CB-8274: Re-write ranger admin group in ranger policies.", "committedDate": "2020-08-10T13:24:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NjA4Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r467296086", "bodyText": "suggestion: For the Database backup failed state, since we're passing so many null values in, and reusing this BackupRestoreContext for both active and failed backups and restores, it seems to me that we may want to create a new context type.", "author": "brycederriso", "createdAt": "2020-08-07T21:50:47Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/datalake/dr/backup/DatabaseBackupActions.java", "diffHunk": "@@ -81,7 +82,7 @@ protected BackupRestoreContext createFlowContext(FlowParameters flowParameters,\n                     DatabaseBackupFailedEvent payload) {\n                 Flow flow = getFlow(flowParameters.getFlowId());\n                 flow.setFlowFailed(payload.getException());\n-                return BackupRestoreContext.from(flowParameters, payload, null, null);\n+                return BackupRestoreContext.from(flowParameters, payload, null, null, null);", "originalCommit": "44a0f58b149ab261e205e4c7f4257ade0f401d0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk0NTM0OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r467945349", "bodyText": "not relevant.", "author": "kkalvagadda1", "createdAt": "2020-08-10T14:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NjA4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a4a458e34d0f968cff4012c12c7419da0893e4ef", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/datalake/dr/backup/DatabaseBackupActions.java b/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/datalake/dr/backup/DatabaseBackupActions.java\nindex f7fef980f0..8cae123338 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/datalake/dr/backup/DatabaseBackupActions.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/datalake/dr/backup/DatabaseBackupActions.java\n\n@@ -82,7 +81,7 @@ public class DatabaseBackupActions {\n                     DatabaseBackupFailedEvent payload) {\n                 Flow flow = getFlow(flowParameters.getFlowId());\n                 flow.setFlowFailed(payload.getException());\n-                return BackupRestoreContext.from(flowParameters, payload, null, null, null);\n+                return BackupRestoreContext.from(flowParameters, payload, null, null);\n             }\n \n             @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5ODE3Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r467298177", "bodyText": "suggestion: append _KEY to the end of this constant, since it refers to the key value we have to line up with in the key:value pair of our Yaml pillar.", "author": "brycederriso", "createdAt": "2020-08-07T21:53:29Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/BackupRestoreSaltConfigGenerator.java", "diffHunk": "@@ -27,14 +26,17 @@\n \n     public static final String AWS_REGION_KEY = \"aws_region\";\n \n-    public SaltConfig createSaltConfig(String location, String backupId, Stack stack) throws URISyntaxException {\n+    public static final String RANGER_ADMIN_GROUP = \"ranger_admin_group\";", "originalCommit": "44a0f58b149ab261e205e4c7f4257ade0f401d0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "41d6a523a49d89e6d7ce65ef1b97689bbb1d1950", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/BackupRestoreSaltConfigGenerator.java b/core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/BackupRestoreSaltConfigGenerator.java\nindex f8c69aa383..94c7024019 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/BackupRestoreSaltConfigGenerator.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/BackupRestoreSaltConfigGenerator.java\n\n@@ -26,7 +26,7 @@ public class BackupRestoreSaltConfigGenerator {\n \n     public static final String AWS_REGION_KEY = \"aws_region\";\n \n-    public static final String RANGER_ADMIN_GROUP = \"ranger_admin_group\";\n+    public static final String RANGER_ADMIN_GROUP_KEY = \"ranger_admin_group\";\n \n     public SaltConfig createSaltConfig(String location, String backupId, String rangerAdminGroup, Stack stack) throws URISyntaxException {\n         String fullLocation = buildFullLocation(location, backupId, stack.getCloudPlatform());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwMTY3NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r467301674", "bodyText": "suggestion: refer to this from public constant attached to the BackupRestoreSaltConfigGenerator instead of redefining a string literal that must match.", "author": "brycederriso", "createdAt": "2020-08-07T21:58:06Z", "path": "datalake/src/test/java/com/sequenceiq/datalake/service/sdx/dr/SdxDatabaseDrServiceTest.java", "diffHunk": "@@ -40,6 +40,8 @@\n \n     private static final String BACKUPLOCATION = \"location/of/backup\";\n \n+    private static final String RANGERADMINGROUP = \"ranger_admin_group\";", "originalCommit": "44a0f58b149ab261e205e4c7f4257ade0f401d0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk0NTUzMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r467945532", "bodyText": "not relevant.", "author": "kkalvagadda1", "createdAt": "2020-08-10T14:31:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwMTY3NA=="}], "type": "inlineReview", "revised_code": {"commit": "a4a458e34d0f968cff4012c12c7419da0893e4ef", "chunk": "diff --git a/datalake/src/test/java/com/sequenceiq/datalake/service/sdx/dr/SdxDatabaseDrServiceTest.java b/datalake/src/test/java/com/sequenceiq/datalake/service/sdx/dr/SdxDatabaseDrServiceTest.java\nindex d0612c1039..1093a0d2bc 100644\n--- a/datalake/src/test/java/com/sequenceiq/datalake/service/sdx/dr/SdxDatabaseDrServiceTest.java\n+++ b/datalake/src/test/java/com/sequenceiq/datalake/service/sdx/dr/SdxDatabaseDrServiceTest.java\n\n@@ -40,8 +40,6 @@ public class SdxDatabaseDrServiceTest {\n \n     private static final String BACKUPLOCATION = \"location/of/backup\";\n \n-    private static final String RANGERADMINGROUP = \"ranger_admin_group\";\n-\n     private static final String DBHOST = \"loclhost\";\n \n     private static final String USER_CRN = \"crn:cdp:iam:us-west-1:\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzMTc1OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r467931759", "bodyText": "question: Should this actually be a LOGGER.info or debug?", "author": "brycederriso", "createdAt": "2020-08-10T14:12:07Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/backup/DatabaseBackupHandler.java", "diffHunk": "@@ -71,7 +88,14 @@ protected Selectable doAccept(HandlerEvent event) {\n             GatewayConfig gatewayConfig = gatewayConfigService.getGatewayConfig(stack, gatewayInstance, cluster.hasGateway());\n             Set<String> gatewayFQDN = Collections.singleton(gatewayInstance.getDiscoveryFQDN());\n             ExitCriteriaModel exitModel = ClusterDeletionBasedExitCriteriaModel.clusterDeletionBasedModel(stackId, cluster.getId());\n-            SaltConfig saltConfig = saltConfigGenerator.createSaltConfig(request.getBackupLocation(), request.getBackupId(), stack);\n+            Optional<LdapView> ldapView = ldapConfigService.get(stack.getEnvironmentCrn(), stack.getName());\n+            String virtualGroupsEnvironmentCrn = environmentConfigProvider.getParentEnvironmentCrn(stack.getEnvironmentCrn());\n+            String adminGroup = ldapView.orElseThrow(() -> new CloudbreakServiceException(\"Ranger admin group not found.\"))\n+                    .getAdminGroup();\n+            LOGGER.error(\"Admin Group:\", adminGroup);", "originalCommit": "a4a458e34d0f968cff4012c12c7419da0893e4ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk0NjUxOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r467946518", "bodyText": "I was testing changes e2e so I 've added it as an error log. Updated to a debug log.", "author": "kkalvagadda1", "createdAt": "2020-08-10T14:33:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzMTc1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e67dd692fa4d9dd4b97405279c4c794cf95beca8", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/backup/DatabaseBackupHandler.java b/core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/backup/DatabaseBackupHandler.java\nindex 0ae6ec4602..e90af9c5a2 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/backup/DatabaseBackupHandler.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/backup/DatabaseBackupHandler.java\n\n@@ -88,13 +75,7 @@ public class DatabaseBackupHandler extends ExceptionCatcherEventHandler<Database\n             GatewayConfig gatewayConfig = gatewayConfigService.getGatewayConfig(stack, gatewayInstance, cluster.hasGateway());\n             Set<String> gatewayFQDN = Collections.singleton(gatewayInstance.getDiscoveryFQDN());\n             ExitCriteriaModel exitModel = ClusterDeletionBasedExitCriteriaModel.clusterDeletionBasedModel(stackId, cluster.getId());\n-            Optional<LdapView> ldapView = ldapConfigService.get(stack.getEnvironmentCrn(), stack.getName());\n-            String virtualGroupsEnvironmentCrn = environmentConfigProvider.getParentEnvironmentCrn(stack.getEnvironmentCrn());\n-            String adminGroup = ldapView.orElseThrow(() -> new CloudbreakServiceException(\"Ranger admin group not found.\"))\n-                    .getAdminGroup();\n-            LOGGER.error(\"Admin Group:\", adminGroup);\n-            VirtualGroupRequest virtualGroupRequest = new VirtualGroupRequest(virtualGroupsEnvironmentCrn, adminGroup);\n-            String rangerAdminGroup = virtualGroupService.getVirtualGroup(virtualGroupRequest, UmsRight.RANGER_ADMIN.getRight());\n+            String rangerAdminGroup = rangerVirtualGroupService.getRangerVirtualGroup(stack);\n             SaltConfig saltConfig = saltConfigGenerator.createSaltConfig(request.getBackupLocation(), request.getBackupId(), rangerAdminGroup, stack);\n             hostOrchestrator.backupDatabase(gatewayConfig, gatewayFQDN, stackUtil.collectReachableNodes(stack), saltConfig, exitModel);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzMTk4NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r467931984", "bodyText": "praise: Good use of orElseThrow().", "author": "brycederriso", "createdAt": "2020-08-10T14:12:26Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/backup/DatabaseBackupHandler.java", "diffHunk": "@@ -71,7 +88,14 @@ protected Selectable doAccept(HandlerEvent event) {\n             GatewayConfig gatewayConfig = gatewayConfigService.getGatewayConfig(stack, gatewayInstance, cluster.hasGateway());\n             Set<String> gatewayFQDN = Collections.singleton(gatewayInstance.getDiscoveryFQDN());\n             ExitCriteriaModel exitModel = ClusterDeletionBasedExitCriteriaModel.clusterDeletionBasedModel(stackId, cluster.getId());\n-            SaltConfig saltConfig = saltConfigGenerator.createSaltConfig(request.getBackupLocation(), request.getBackupId(), stack);\n+            Optional<LdapView> ldapView = ldapConfigService.get(stack.getEnvironmentCrn(), stack.getName());\n+            String virtualGroupsEnvironmentCrn = environmentConfigProvider.getParentEnvironmentCrn(stack.getEnvironmentCrn());\n+            String adminGroup = ldapView.orElseThrow(() -> new CloudbreakServiceException(\"Ranger admin group not found.\"))", "originalCommit": "a4a458e34d0f968cff4012c12c7419da0893e4ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e67dd692fa4d9dd4b97405279c4c794cf95beca8", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/backup/DatabaseBackupHandler.java b/core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/backup/DatabaseBackupHandler.java\nindex 0ae6ec4602..e90af9c5a2 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/backup/DatabaseBackupHandler.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/backup/DatabaseBackupHandler.java\n\n@@ -88,13 +75,7 @@ public class DatabaseBackupHandler extends ExceptionCatcherEventHandler<Database\n             GatewayConfig gatewayConfig = gatewayConfigService.getGatewayConfig(stack, gatewayInstance, cluster.hasGateway());\n             Set<String> gatewayFQDN = Collections.singleton(gatewayInstance.getDiscoveryFQDN());\n             ExitCriteriaModel exitModel = ClusterDeletionBasedExitCriteriaModel.clusterDeletionBasedModel(stackId, cluster.getId());\n-            Optional<LdapView> ldapView = ldapConfigService.get(stack.getEnvironmentCrn(), stack.getName());\n-            String virtualGroupsEnvironmentCrn = environmentConfigProvider.getParentEnvironmentCrn(stack.getEnvironmentCrn());\n-            String adminGroup = ldapView.orElseThrow(() -> new CloudbreakServiceException(\"Ranger admin group not found.\"))\n-                    .getAdminGroup();\n-            LOGGER.error(\"Admin Group:\", adminGroup);\n-            VirtualGroupRequest virtualGroupRequest = new VirtualGroupRequest(virtualGroupsEnvironmentCrn, adminGroup);\n-            String rangerAdminGroup = virtualGroupService.getVirtualGroup(virtualGroupRequest, UmsRight.RANGER_ADMIN.getRight());\n+            String rangerAdminGroup = rangerVirtualGroupService.getRangerVirtualGroup(stack);\n             SaltConfig saltConfig = saltConfigGenerator.createSaltConfig(request.getBackupLocation(), request.getBackupId(), rangerAdminGroup, stack);\n             hostOrchestrator.backupDatabase(gatewayConfig, gatewayFQDN, stackUtil.collectReachableNodes(stack), saltConfig, exitModel);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzNDUwMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r467934501", "bodyText": "suggestion: If this block of additions is identical to the one in DatabaseBackupHandler, could we move it into it's own class for retrieving the rangerAdminGroup and then inject just that single class in both handlers?\nI think that could help improve the testability of this functionality, and help reduce the number of direct dependencies for these ...Handlers.", "author": "brycederriso", "createdAt": "2020-08-10T14:16:10Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/restore/DatabaseRestoreHandler.java", "diffHunk": "@@ -71,7 +88,14 @@ protected Selectable doAccept(HandlerEvent event) {\n             GatewayConfig gatewayConfig = gatewayConfigService.getGatewayConfig(stack, gatewayInstance, cluster.hasGateway());\n             Set<String> gatewayFQDN = Collections.singleton(gatewayInstance.getDiscoveryFQDN());\n             ExitCriteriaModel exitModel = ClusterDeletionBasedExitCriteriaModel.clusterDeletionBasedModel(stackId, cluster.getId());\n-            SaltConfig saltConfig = saltConfigGenerator.createSaltConfig(request.getBackupLocation(), request.getBackupId(), stack);\n+            Optional<LdapView> ldapView = ldapConfigService.get(stack.getEnvironmentCrn(), stack.getName());\n+            String virtualGroupsEnvironmentCrn = environmentConfigProvider.getParentEnvironmentCrn(stack.getEnvironmentCrn());\n+            String adminGroup = ldapView.orElseThrow(() -> new CloudbreakServiceException(\"Ranger admin group not found.\"))\n+                    .getAdminGroup();\n+            LOGGER.error(\"Admin Group:\", adminGroup);\n+            VirtualGroupRequest virtualGroupRequest = new VirtualGroupRequest(virtualGroupsEnvironmentCrn, adminGroup);\n+            String rangerAdminGroup = virtualGroupService.getVirtualGroup(virtualGroupRequest, UmsRight.RANGER_ADMIN.getRight());\n+            SaltConfig saltConfig = saltConfigGenerator.createSaltConfig(request.getBackupLocation(), request.getBackupId(), rangerAdminGroup, stack);", "originalCommit": "a4a458e34d0f968cff4012c12c7419da0893e4ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAxMDA3Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r468010072", "bodyText": "Good one. Will update the patch accordingly.", "author": "kkalvagadda1", "createdAt": "2020-08-10T15:56:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzNDUwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "e67dd692fa4d9dd4b97405279c4c794cf95beca8", "chunk": "diff --git a/core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/restore/DatabaseRestoreHandler.java b/core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/restore/DatabaseRestoreHandler.java\nindex 52c82c765e..ea2ab519f8 100644\n--- a/core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/restore/DatabaseRestoreHandler.java\n+++ b/core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/restore/DatabaseRestoreHandler.java\n\n@@ -88,13 +75,7 @@ public class DatabaseRestoreHandler extends ExceptionCatcherEventHandler<Databas\n             GatewayConfig gatewayConfig = gatewayConfigService.getGatewayConfig(stack, gatewayInstance, cluster.hasGateway());\n             Set<String> gatewayFQDN = Collections.singleton(gatewayInstance.getDiscoveryFQDN());\n             ExitCriteriaModel exitModel = ClusterDeletionBasedExitCriteriaModel.clusterDeletionBasedModel(stackId, cluster.getId());\n-            Optional<LdapView> ldapView = ldapConfigService.get(stack.getEnvironmentCrn(), stack.getName());\n-            String virtualGroupsEnvironmentCrn = environmentConfigProvider.getParentEnvironmentCrn(stack.getEnvironmentCrn());\n-            String adminGroup = ldapView.orElseThrow(() -> new CloudbreakServiceException(\"Ranger admin group not found.\"))\n-                    .getAdminGroup();\n-            LOGGER.error(\"Admin Group:\", adminGroup);\n-            VirtualGroupRequest virtualGroupRequest = new VirtualGroupRequest(virtualGroupsEnvironmentCrn, adminGroup);\n-            String rangerAdminGroup = virtualGroupService.getVirtualGroup(virtualGroupRequest, UmsRight.RANGER_ADMIN.getRight());\n+            String rangerAdminGroup = rangerVirtualGroupService.getRangerVirtualGroup(stack);\n             SaltConfig saltConfig = saltConfigGenerator.createSaltConfig(request.getBackupLocation(), request.getBackupId(), rangerAdminGroup, stack);\n             hostOrchestrator.restoreDatabase(gatewayConfig, gatewayFQDN, stackUtil.collectReachableNodes(stack), saltConfig, exitModel);\n \n"}}, {"oid": "e67dd692fa4d9dd4b97405279c4c794cf95beca8", "url": "https://github.com/hortonworks/cloudbreak/commit/e67dd692fa4d9dd4b97405279c4c794cf95beca8", "message": "CB-8274: Re-write ranger admin group in ranger policies.Addressed review comments.", "committedDate": "2020-08-10T18:38:37Z", "type": "forcePushed"}, {"oid": "41d6a523a49d89e6d7ce65ef1b97689bbb1d1950", "url": "https://github.com/hortonworks/cloudbreak/commit/41d6a523a49d89e6d7ce65ef1b97689bbb1d1950", "message": "CB-8274: Re-write ranger admin group in ranger policies.Addressed review comments.", "committedDate": "2020-08-10T18:43:18Z", "type": "forcePushed"}, {"oid": "e29243169a74edefd4ff673ad708393984599966", "url": "https://github.com/hortonworks/cloudbreak/commit/e29243169a74edefd4ff673ad708393984599966", "message": "CB-8274: Re-write ranger admin group in ranger policies.Addressed review comments.", "committedDate": "2020-08-10T19:21:31Z", "type": "commit"}, {"oid": "e29243169a74edefd4ff673ad708393984599966", "url": "https://github.com/hortonworks/cloudbreak/commit/e29243169a74edefd4ff673ad708393984599966", "message": "CB-8274: Re-write ranger admin group in ranger policies.Addressed review comments.", "committedDate": "2020-08-10T19:21:31Z", "type": "forcePushed"}]}