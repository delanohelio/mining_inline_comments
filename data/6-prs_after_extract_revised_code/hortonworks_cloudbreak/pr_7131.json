{"pr_number": 7131, "pr_title": "CB-5115 Attach/detach existing subnet to/from existing environments", "pr_createdAt": "2020-01-23T15:11:53Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7131", "timeline": [{"oid": "793f1157eaa6edc5525654da4a9ed6604242b40f", "url": "https://github.com/hortonworks/cloudbreak/commit/793f1157eaa6edc5525654da4a9ed6604242b40f", "message": "CB-5115 Attach/detach existing subnet to/from existing environments", "committedDate": "2020-01-23T15:58:18Z", "type": "forcePushed"}, {"oid": "678472d60543fbb69238be0ec4b0611f712f5313", "url": "https://github.com/hortonworks/cloudbreak/commit/678472d60543fbb69238be0ec4b0611f712f5313", "message": "CB-5115 Attach/detach existing subnet to/from existing environments", "committedDate": "2020-01-23T15:58:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5NTk0NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370195944", "bodyText": "\"If subnetId\"  =>  \"If VNetId\" - actually it was me who added this nice sentence :D", "author": "gergopapi2", "createdAt": "2020-01-23T15:43:52Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/network/AzureEnvironmentNetworkValidator.java", "diffHunk": "@@ -64,11 +64,11 @@ private void checkExistingNetworkParamsProvidedWhenSubnetsPresent(NetworkDto net\n         }\n     }\n \n-    private void checkSubnetsProvidedWhenExistingNetwork(\n-            NetworkDto networkDto, ValidationResult.ValidationResultBuilder resultBuilder, AzureParams azureParams) {\n+    private void checkSubnetsProvidedWhenExistingNetwork(ValidationResult.ValidationResultBuilder resultBuilder,\n+            AzureParams azureParams, Map<String, CloudSubnet> subnetMetas) {\n         if (StringUtils.isNotEmpty(azureParams.getNetworkId()) && StringUtils.isNotEmpty(azureParams.getResourceGroupName())\n-                && networkDto.getSubnetIds().isEmpty()) {\n-            String message = String.format(\"If subnetId and resourceGroupName are specified then subnet ids must be specified as well.\",\n+                && subnetMetas.isEmpty()) {\n+            String message = String.format(\"If subnetId (%s) and resourceGroupName (%s) are specified then subnet ids must be specified as well.\",", "originalCommit": "c470803243580c4ca6cab286055ba482c742a03e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba331f293d40102c7fe144add8aa4bfa694df669", "chunk": "diff --git a/environment/src/main/java/com/sequenceiq/environment/environment/validation/network/AzureEnvironmentNetworkValidator.java b/environment/src/main/java/com/sequenceiq/environment/environment/validation/network/AzureEnvironmentNetworkValidator.java\nindex 5700dcf75f..e9dcbfc393 100644\n--- a/environment/src/main/java/com/sequenceiq/environment/environment/validation/network/AzureEnvironmentNetworkValidator.java\n+++ b/environment/src/main/java/com/sequenceiq/environment/environment/validation/network/AzureEnvironmentNetworkValidator.java\n\n@@ -68,7 +68,7 @@ public class AzureEnvironmentNetworkValidator implements EnvironmentNetworkValid\n             AzureParams azureParams, Map<String, CloudSubnet> subnetMetas) {\n         if (StringUtils.isNotEmpty(azureParams.getNetworkId()) && StringUtils.isNotEmpty(azureParams.getResourceGroupName())\n                 && subnetMetas.isEmpty()) {\n-            String message = String.format(\"If subnetId (%s) and resourceGroupName (%s) are specified then subnet ids must be specified as well.\",\n+            String message = String.format(\"If networkId (%s) and resourceGroupName (%s) are specified then subnet ids must be specified as well.\",\n                     azureParams.getNetworkId(), azureParams.getResourceGroupName());\n             LOGGER.info(message);\n             resultBuilder.error(message);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3OTA5NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370579094", "bodyText": "I would rename it clone or copy", "author": "gergopapi2", "createdAt": "2020-01-24T11:00:39Z", "path": "environment/src/main/java/com/sequenceiq/environment/network/dto/NetworkDto.java", "diffHunk": "@@ -59,6 +59,10 @@ public static Builder builder() {\n         return new Builder();\n     }\n \n+    public static Builder builder(NetworkDto networkDto) {", "originalCommit": "678472d60543fbb69238be0ec4b0611f712f5313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEzNjk2Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r371136966", "bodyText": "I think the builder is better than copy or clone. It is meaning clone the networkDto and it is not creating a builder for it", "author": "topolyai5", "createdAt": "2020-01-27T09:35:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3OTA5NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MzA2OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370583069", "bodyText": "Lines 99-104 I would refactor into a method: getNetworksByResourceGroup", "author": "gergopapi2", "createdAt": "2020-01-24T11:11:38Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java", "diffHunk": "@@ -92,21 +93,22 @@ private String getMachineType(String it) {\n     public CloudNetworks networks(CloudCredential cloudCredential, Region region, Map<String, String> filters) {\n         AzureClient client = azureClientService.getClient(cloudCredential);\n         Map<String, Set<CloudNetwork>> result = new HashMap<>();\n-\n-        for (Network network : client.getNetworks()) {\n+        String networkId = filters.get(\"networkId\");\n+        String resourceGroupName = filters.get(\"resourceGroupName\");\n+        if (!StringUtils.isEmpty(networkId) && !StringUtils.isEmpty(resourceGroupName)) {\n+            Network network = client.getNetworkByResourceGroup(resourceGroupName, networkId);", "originalCommit": "678472d60543fbb69238be0ec4b0611f712f5313", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba331f293d40102c7fe144add8aa4bfa694df669", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java\nindex 1e90554554..e503d78330 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java\n\n@@ -97,18 +97,10 @@ public class AzurePlatformResources implements PlatformResources {\n         String resourceGroupName = filters.get(\"resourceGroupName\");\n         if (!StringUtils.isEmpty(networkId) && !StringUtils.isEmpty(resourceGroupName)) {\n             Network network = client.getNetworkByResourceGroup(resourceGroupName, networkId);\n-            String actualRegion = network.region().label();\n-            if (regionMatch(actualRegion, region)) {\n-                CloudNetwork cloudNetwork = convertToCloudNetwork(network);\n-                result.put(actualRegion, Set.of(cloudNetwork));\n-            }\n+            addToResultIfRegionsAreMatch(region, result, network);\n         } else {\n             for (Network network : client.getNetworks()) {\n-                String actualRegion = network.region().label();\n-                if (regionMatch(actualRegion, region)) {\n-                    CloudNetwork cloudNetwork = convertToCloudNetwork(network);\n-                    result.computeIfAbsent(actualRegion, s -> new HashSet<>()).add(cloudNetwork);\n-                }\n+                addToResultIfRegionsAreMatch(region, result, network);\n             }\n         }\n         if (result.isEmpty() && Objects.nonNull(region)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MzI4MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370583280", "bodyText": "Lines 106-113 I would refactor into a method called getAllNetworksByRegion() or similar", "author": "gergopapi2", "createdAt": "2020-01-24T11:12:13Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java", "diffHunk": "@@ -92,21 +93,22 @@ private String getMachineType(String it) {\n     public CloudNetworks networks(CloudCredential cloudCredential, Region region, Map<String, String> filters) {\n         AzureClient client = azureClientService.getClient(cloudCredential);\n         Map<String, Set<CloudNetwork>> result = new HashMap<>();\n-\n-        for (Network network : client.getNetworks()) {\n+        String networkId = filters.get(\"networkId\");\n+        String resourceGroupName = filters.get(\"resourceGroupName\");\n+        if (!StringUtils.isEmpty(networkId) && !StringUtils.isEmpty(resourceGroupName)) {\n+            Network network = client.getNetworkByResourceGroup(resourceGroupName, networkId);\n             String actualRegion = network.region().label();\n             if (regionMatch(actualRegion, region)) {\n-                Set<CloudSubnet> subnets = new HashSet<>();\n-                for (Entry<String, Subnet> subnet : network.subnets().entrySet()) {\n-                    subnets.add(new CloudSubnet(subnet.getKey(), subnet.getKey(), null, subnet.getValue().addressPrefix()));\n+                CloudNetwork cloudNetwork = convertToCloudNetwork(network);\n+                result.put(actualRegion, Set.of(cloudNetwork));\n+            }\n+        } else {\n+            for (Network network : client.getNetworks()) {", "originalCommit": "678472d60543fbb69238be0ec4b0611f712f5313", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba331f293d40102c7fe144add8aa4bfa694df669", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java\nindex 1e90554554..e503d78330 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java\n\n@@ -97,18 +97,10 @@ public class AzurePlatformResources implements PlatformResources {\n         String resourceGroupName = filters.get(\"resourceGroupName\");\n         if (!StringUtils.isEmpty(networkId) && !StringUtils.isEmpty(resourceGroupName)) {\n             Network network = client.getNetworkByResourceGroup(resourceGroupName, networkId);\n-            String actualRegion = network.region().label();\n-            if (regionMatch(actualRegion, region)) {\n-                CloudNetwork cloudNetwork = convertToCloudNetwork(network);\n-                result.put(actualRegion, Set.of(cloudNetwork));\n-            }\n+            addToResultIfRegionsAreMatch(region, result, network);\n         } else {\n             for (Network network : client.getNetworks()) {\n-                String actualRegion = network.region().label();\n-                if (regionMatch(actualRegion, region)) {\n-                    CloudNetwork cloudNetwork = convertToCloudNetwork(network);\n-                    result.computeIfAbsent(actualRegion, s -> new HashSet<>()).add(cloudNetwork);\n-                }\n+                addToResultIfRegionsAreMatch(region, result, network);\n             }\n         }\n         if (result.isEmpty() && Objects.nonNull(region)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4OTMxNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370589314", "bodyText": "In case of an exception are we going to set the cluster state somewhere else to update failed? Or is the cluster state set at all when network update is started?", "author": "gergopapi2", "createdAt": "2020-01-24T11:29:18Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentModificationService.java", "diffHunk": "@@ -122,31 +119,19 @@ private EnvironmentDto changeCredential(String accountId, String environmentName\n \n     private void editNetworkIfChanged(Environment environment, EnvironmentEditDto editDto) {\n         if (networkChanged(editDto)) {\n-            Optional<BaseNetwork> original = networkService.findByEnvironment(environment.getId());\n-            original.ifPresent(baseNetwork -> editDto.getNetworkDto().setId(baseNetwork.getId()));\n-            try {\n-                BaseNetwork network = createAndSetNetwork(environment, editDto.getNetworkDto(), editDto.getAccountId());\n-                if (network != null) {\n-                    environment.setNetwork(network);\n-                }\n-            } catch (Exception e) {\n-                environment.setStatus(EnvironmentStatus.UPDATE_FAILED);", "originalCommit": "678472d60543fbb69238be0ec4b0611f712f5313", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba331f293d40102c7fe144add8aa4bfa694df669", "chunk": "diff --git a/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentModificationService.java b/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentModificationService.java\nindex 729cc59d4e..e40983892e 100644\n--- a/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentModificationService.java\n+++ b/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentModificationService.java\n\n@@ -119,12 +118,10 @@ public class EnvironmentModificationService {\n \n     private void editNetworkIfChanged(Environment environment, EnvironmentEditDto editDto) {\n         if (networkChanged(editDto)) {\n-            BaseNetwork network = networkService.mergeNetworkDtoWithNetwork(environment.getNetwork(), editDto, environment);\n+            BaseNetwork network = networkService.validateAndReplaceSubnets(environment.getNetwork(), editDto, environment);\n             if (network != null) {\n                 environment.setNetwork(network);\n             }\n-            environment.setStatus(EnvironmentStatus.AVAILABLE);\n-            environment.setStatusReason(\"\");\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MDUyMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370590520", "bodyText": "I would change it to:\n\"You need to reinstall the environment into an existing VPC\"\nIf this is what you meant.", "author": "gergopapi2", "createdAt": "2020-01-24T11:32:37Z", "path": "environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java", "diffHunk": "@@ -77,36 +85,72 @@ private CloudPlatform getCloudPlatform(Environment environment) {\n     public Map<String, CloudSubnet> retrieveSubnetMetadata(Environment environment, NetworkDto network) {\n         if (network == null || network.getSubnetIds().isEmpty()) {\n             return Map.of();\n-        } else if (CloudPlatform.AWS.name().equalsIgnoreCase(environment.getCloudPlatform())) {\n-            String regionName = environment.getRegionSet().iterator().next().getName();\n-            PlatformResourceRequest platformResourceRequest = new PlatformResourceRequest();\n-            platformResourceRequest.setCredential(environment.getCredential());\n-            platformResourceRequest.setCloudPlatform(environment.getCloudPlatform());\n-            platformResourceRequest.setRegion(regionName);\n-            getAwsVpcId(network)\n-                    .ifPresent(vpcId -> platformResourceRequest.setFilters(Map.of(\"vpcId\", vpcId)));\n-\n-            CloudNetworks cloudNetworks = platformParameterService.getCloudNetworks(platformResourceRequest);\n-            Set<CloudNetwork> cloudNetworkSet = cloudNetworks.getCloudNetworkResponses().get(regionName);\n-            return cloudNetworkSet.stream()\n-                    .filter(n -> n.getId().equals(getAwsVpcId(network).orElse(null)))\n-                    .findFirst()\n-                    .map(CloudNetwork::getSubnetsMeta)\n-                    .stream()\n-                    .flatMap(Set::stream)\n-                    .filter(sn -> network.getSubnetIds().contains(sn.getId()))\n-                    .collect(Collectors.toMap(CloudSubnet::getId, Function.identity()));\n+        } else if (isAws(environment)) {\n+            Map<String, String> filter = getAwsVpcId(network)\n+                    .map(vpcId -> Map.of(\"vpcId\", vpcId))\n+                    .orElse(Map.of());\n+            return fetchCloudNetwork(environment, network, filter);\n+        } else if (isAzure(environment)) {\n+            Map<String, String> filter = new HashMap<>();\n+            filter.put(\"networkId\", network.getAzure().getNetworkId());\n+            filter.put(\"resourceGroupName\", network.getAzure().getResourceGroupName());\n+            return fetchCloudNetwork(environment, network, filter);\n         } else {\n-            return network.getSubnetIds().stream().collect(Collectors.toMap(Function.identity(), id -> new CloudSubnet(id, null)));\n+            return network.getSubnetIds().stream().collect(toMap(Function.identity(), id -> new CloudSubnet(id, null)));\n         }\n     }\n \n+    private Map<String, CloudSubnet> fetchCloudNetwork(Environment environment, NetworkDto network, Map<String, String> filter) {\n+        String regionName = environment.getRegionSet().iterator().next().getName();\n+        PlatformResourceRequest platformResourceRequest = new PlatformResourceRequest();\n+        platformResourceRequest.setCredential(environment.getCredential());\n+        platformResourceRequest.setCloudPlatform(environment.getCloudPlatform());\n+        platformResourceRequest.setRegion(regionName);\n+        platformResourceRequest.setFilters(filter);\n+\n+        CloudNetworks cloudNetworks = platformParameterService.getCloudNetworks(platformResourceRequest);\n+        Set<CloudNetwork> cloudNetworkSet = cloudNetworks.getCloudNetworkResponses().get(regionName);\n+        return cloudNetworkSet.stream()\n+                .flatMap(it -> it.getSubnetsMeta().stream())\n+                .filter(sn -> network.getSubnetIds().contains(sn.getId()))\n+                .collect(toMap(CloudSubnet::getId, Function.identity()));\n+    }\n+\n+    private boolean isAzure(Environment environment) {\n+        return CloudPlatform.AZURE.name().equalsIgnoreCase(environment.getCloudPlatform());\n+    }\n+\n+    private boolean isAws(Environment environment) {\n+        return CloudPlatform.AWS.name().equalsIgnoreCase(environment.getCloudPlatform());\n+    }\n+\n     public Optional<String> getAwsVpcId(NetworkDto networkDto) {\n         return Optional.ofNullable(networkDto)\n                 .map(NetworkDto::getAws)\n                 .map(AwsParams::getVpcId);\n     }\n \n+    public BaseNetwork mergeNetworkDtoWithNetwork(BaseNetwork originalNetwork, EnvironmentEditDto editDto, Environment environment) {\n+        EnvironmentNetworkConverter environmentNetworkConverter = environmentNetworkConverterMap.get(CloudPlatform.valueOf(environment.getCloudPlatform()));\n+        NetworkDto networkDto = environmentNetworkConverter.convertToDto(originalNetwork);\n+        NetworkDto cloneNetworkDto = NetworkDto.builder(networkDto)\n+                .withSubnetMetas(editDto.getNetworkDto().getSubnetMetas())\n+                .build();\n+        Map<String, CloudSubnet> subnetMetadatas = retrieveSubnetMetadata(environment, cloneNetworkDto);\n+        ValidationResult.ValidationResultBuilder validationResultBuilder = networkCreationValidator.validateNetworkEdit(environment, cloneNetworkDto,\n+                subnetMetadatas);\n+        if (networkDto.getRegistrationType() == RegistrationType.CREATE_NEW) {\n+            validationResultBuilder.error(\"Subnet could not be attached to this environment, because it is newly created by Cloudbreak. \" +\n+                    \"You need to re-install the the environment with existed VPC\");", "originalCommit": "678472d60543fbb69238be0ec4b0611f712f5313", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba331f293d40102c7fe144add8aa4bfa694df669", "chunk": "diff --git a/environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java b/environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java\nindex 562ec0eb68..5c5cc0a961 100644\n--- a/environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java\n+++ b/environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java\n\n@@ -130,19 +130,19 @@ public class NetworkService {\n                 .map(AwsParams::getVpcId);\n     }\n \n-    public BaseNetwork mergeNetworkDtoWithNetwork(BaseNetwork originalNetwork, EnvironmentEditDto editDto, Environment environment) {\n+    public BaseNetwork validateAndReplaceSubnets(BaseNetwork originalNetwork, EnvironmentEditDto editDto, Environment environment) {\n+        if (originalNetwork.getRegistrationType() == RegistrationType.CREATE_NEW) {\n+            throw new BadRequestException(\"Subnet could not be attached to this environment, because it is newly created by Cloudbreak. \" +\n+                    \"You need to re-install the the environment into an existing VPC\");\n+        }\n         EnvironmentNetworkConverter environmentNetworkConverter = environmentNetworkConverterMap.get(CloudPlatform.valueOf(environment.getCloudPlatform()));\n-        NetworkDto networkDto = environmentNetworkConverter.convertToDto(originalNetwork);\n-        NetworkDto cloneNetworkDto = NetworkDto.builder(networkDto)\n+        NetworkDto originalNetworkDto = environmentNetworkConverter.convertToDto(originalNetwork);\n+        NetworkDto cloneNetworkDto = NetworkDto.builder(originalNetworkDto)\n                 .withSubnetMetas(editDto.getNetworkDto().getSubnetMetas())\n                 .build();\n         Map<String, CloudSubnet> subnetMetadatas = retrieveSubnetMetadata(environment, cloneNetworkDto);\n         ValidationResult.ValidationResultBuilder validationResultBuilder = networkCreationValidator.validateNetworkEdit(environment, cloneNetworkDto,\n                 subnetMetadatas);\n-        if (networkDto.getRegistrationType() == RegistrationType.CREATE_NEW) {\n-            validationResultBuilder.error(\"Subnet could not be attached to this environment, because it is newly created by Cloudbreak. \" +\n-                    \"You need to re-install the the environment with existed VPC\");\n-        }\n         ValidationResult validationResult = validationResultBuilder.build();\n         if (validationResult.hasError()) {\n             throw new BadRequestException(validationResult.getFormattedErrors());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTA0Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370591046", "bodyText": "This if statement could come right after the networkDto is created and do an early return with validation error, or do we need to get the cloud networks etc and validate them also in this case?", "author": "gergopapi2", "createdAt": "2020-01-24T11:34:08Z", "path": "environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java", "diffHunk": "@@ -77,36 +85,72 @@ private CloudPlatform getCloudPlatform(Environment environment) {\n     public Map<String, CloudSubnet> retrieveSubnetMetadata(Environment environment, NetworkDto network) {\n         if (network == null || network.getSubnetIds().isEmpty()) {\n             return Map.of();\n-        } else if (CloudPlatform.AWS.name().equalsIgnoreCase(environment.getCloudPlatform())) {\n-            String regionName = environment.getRegionSet().iterator().next().getName();\n-            PlatformResourceRequest platformResourceRequest = new PlatformResourceRequest();\n-            platformResourceRequest.setCredential(environment.getCredential());\n-            platformResourceRequest.setCloudPlatform(environment.getCloudPlatform());\n-            platformResourceRequest.setRegion(regionName);\n-            getAwsVpcId(network)\n-                    .ifPresent(vpcId -> platformResourceRequest.setFilters(Map.of(\"vpcId\", vpcId)));\n-\n-            CloudNetworks cloudNetworks = platformParameterService.getCloudNetworks(platformResourceRequest);\n-            Set<CloudNetwork> cloudNetworkSet = cloudNetworks.getCloudNetworkResponses().get(regionName);\n-            return cloudNetworkSet.stream()\n-                    .filter(n -> n.getId().equals(getAwsVpcId(network).orElse(null)))\n-                    .findFirst()\n-                    .map(CloudNetwork::getSubnetsMeta)\n-                    .stream()\n-                    .flatMap(Set::stream)\n-                    .filter(sn -> network.getSubnetIds().contains(sn.getId()))\n-                    .collect(Collectors.toMap(CloudSubnet::getId, Function.identity()));\n+        } else if (isAws(environment)) {\n+            Map<String, String> filter = getAwsVpcId(network)\n+                    .map(vpcId -> Map.of(\"vpcId\", vpcId))\n+                    .orElse(Map.of());\n+            return fetchCloudNetwork(environment, network, filter);\n+        } else if (isAzure(environment)) {\n+            Map<String, String> filter = new HashMap<>();\n+            filter.put(\"networkId\", network.getAzure().getNetworkId());\n+            filter.put(\"resourceGroupName\", network.getAzure().getResourceGroupName());\n+            return fetchCloudNetwork(environment, network, filter);\n         } else {\n-            return network.getSubnetIds().stream().collect(Collectors.toMap(Function.identity(), id -> new CloudSubnet(id, null)));\n+            return network.getSubnetIds().stream().collect(toMap(Function.identity(), id -> new CloudSubnet(id, null)));\n         }\n     }\n \n+    private Map<String, CloudSubnet> fetchCloudNetwork(Environment environment, NetworkDto network, Map<String, String> filter) {\n+        String regionName = environment.getRegionSet().iterator().next().getName();\n+        PlatformResourceRequest platformResourceRequest = new PlatformResourceRequest();\n+        platformResourceRequest.setCredential(environment.getCredential());\n+        platformResourceRequest.setCloudPlatform(environment.getCloudPlatform());\n+        platformResourceRequest.setRegion(regionName);\n+        platformResourceRequest.setFilters(filter);\n+\n+        CloudNetworks cloudNetworks = platformParameterService.getCloudNetworks(platformResourceRequest);\n+        Set<CloudNetwork> cloudNetworkSet = cloudNetworks.getCloudNetworkResponses().get(regionName);\n+        return cloudNetworkSet.stream()\n+                .flatMap(it -> it.getSubnetsMeta().stream())\n+                .filter(sn -> network.getSubnetIds().contains(sn.getId()))\n+                .collect(toMap(CloudSubnet::getId, Function.identity()));\n+    }\n+\n+    private boolean isAzure(Environment environment) {\n+        return CloudPlatform.AZURE.name().equalsIgnoreCase(environment.getCloudPlatform());\n+    }\n+\n+    private boolean isAws(Environment environment) {\n+        return CloudPlatform.AWS.name().equalsIgnoreCase(environment.getCloudPlatform());\n+    }\n+\n     public Optional<String> getAwsVpcId(NetworkDto networkDto) {\n         return Optional.ofNullable(networkDto)\n                 .map(NetworkDto::getAws)\n                 .map(AwsParams::getVpcId);\n     }\n \n+    public BaseNetwork mergeNetworkDtoWithNetwork(BaseNetwork originalNetwork, EnvironmentEditDto editDto, Environment environment) {\n+        EnvironmentNetworkConverter environmentNetworkConverter = environmentNetworkConverterMap.get(CloudPlatform.valueOf(environment.getCloudPlatform()));\n+        NetworkDto networkDto = environmentNetworkConverter.convertToDto(originalNetwork);\n+        NetworkDto cloneNetworkDto = NetworkDto.builder(networkDto)\n+                .withSubnetMetas(editDto.getNetworkDto().getSubnetMetas())\n+                .build();\n+        Map<String, CloudSubnet> subnetMetadatas = retrieveSubnetMetadata(environment, cloneNetworkDto);\n+        ValidationResult.ValidationResultBuilder validationResultBuilder = networkCreationValidator.validateNetworkEdit(environment, cloneNetworkDto,\n+                subnetMetadatas);\n+        if (networkDto.getRegistrationType() == RegistrationType.CREATE_NEW) {", "originalCommit": "678472d60543fbb69238be0ec4b0611f712f5313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxNjA5Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370616096", "bodyText": "Yes, we want to write all of the errors", "author": "topolyai5", "createdAt": "2020-01-24T12:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTA0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ba331f293d40102c7fe144add8aa4bfa694df669", "chunk": "diff --git a/environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java b/environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java\nindex 562ec0eb68..5c5cc0a961 100644\n--- a/environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java\n+++ b/environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java\n\n@@ -130,19 +130,19 @@ public class NetworkService {\n                 .map(AwsParams::getVpcId);\n     }\n \n-    public BaseNetwork mergeNetworkDtoWithNetwork(BaseNetwork originalNetwork, EnvironmentEditDto editDto, Environment environment) {\n+    public BaseNetwork validateAndReplaceSubnets(BaseNetwork originalNetwork, EnvironmentEditDto editDto, Environment environment) {\n+        if (originalNetwork.getRegistrationType() == RegistrationType.CREATE_NEW) {\n+            throw new BadRequestException(\"Subnet could not be attached to this environment, because it is newly created by Cloudbreak. \" +\n+                    \"You need to re-install the the environment into an existing VPC\");\n+        }\n         EnvironmentNetworkConverter environmentNetworkConverter = environmentNetworkConverterMap.get(CloudPlatform.valueOf(environment.getCloudPlatform()));\n-        NetworkDto networkDto = environmentNetworkConverter.convertToDto(originalNetwork);\n-        NetworkDto cloneNetworkDto = NetworkDto.builder(networkDto)\n+        NetworkDto originalNetworkDto = environmentNetworkConverter.convertToDto(originalNetwork);\n+        NetworkDto cloneNetworkDto = NetworkDto.builder(originalNetworkDto)\n                 .withSubnetMetas(editDto.getNetworkDto().getSubnetMetas())\n                 .build();\n         Map<String, CloudSubnet> subnetMetadatas = retrieveSubnetMetadata(environment, cloneNetworkDto);\n         ValidationResult.ValidationResultBuilder validationResultBuilder = networkCreationValidator.validateNetworkEdit(environment, cloneNetworkDto,\n                 subnetMetadatas);\n-        if (networkDto.getRegistrationType() == RegistrationType.CREATE_NEW) {\n-            validationResultBuilder.error(\"Subnet could not be attached to this environment, because it is newly created by Cloudbreak. \" +\n-                    \"You need to re-install the the environment with existed VPC\");\n-        }\n         ValidationResult validationResult = validationResultBuilder.build();\n         if (validationResult.hasError()) {\n             throw new BadRequestException(validationResult.getFormattedErrors());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTE1NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370591155", "bodyText": "networkDto I would name: originalNetworkDto", "author": "gergopapi2", "createdAt": "2020-01-24T11:34:28Z", "path": "environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java", "diffHunk": "@@ -77,36 +85,72 @@ private CloudPlatform getCloudPlatform(Environment environment) {\n     public Map<String, CloudSubnet> retrieveSubnetMetadata(Environment environment, NetworkDto network) {\n         if (network == null || network.getSubnetIds().isEmpty()) {\n             return Map.of();\n-        } else if (CloudPlatform.AWS.name().equalsIgnoreCase(environment.getCloudPlatform())) {\n-            String regionName = environment.getRegionSet().iterator().next().getName();\n-            PlatformResourceRequest platformResourceRequest = new PlatformResourceRequest();\n-            platformResourceRequest.setCredential(environment.getCredential());\n-            platformResourceRequest.setCloudPlatform(environment.getCloudPlatform());\n-            platformResourceRequest.setRegion(regionName);\n-            getAwsVpcId(network)\n-                    .ifPresent(vpcId -> platformResourceRequest.setFilters(Map.of(\"vpcId\", vpcId)));\n-\n-            CloudNetworks cloudNetworks = platformParameterService.getCloudNetworks(platformResourceRequest);\n-            Set<CloudNetwork> cloudNetworkSet = cloudNetworks.getCloudNetworkResponses().get(regionName);\n-            return cloudNetworkSet.stream()\n-                    .filter(n -> n.getId().equals(getAwsVpcId(network).orElse(null)))\n-                    .findFirst()\n-                    .map(CloudNetwork::getSubnetsMeta)\n-                    .stream()\n-                    .flatMap(Set::stream)\n-                    .filter(sn -> network.getSubnetIds().contains(sn.getId()))\n-                    .collect(Collectors.toMap(CloudSubnet::getId, Function.identity()));\n+        } else if (isAws(environment)) {\n+            Map<String, String> filter = getAwsVpcId(network)\n+                    .map(vpcId -> Map.of(\"vpcId\", vpcId))\n+                    .orElse(Map.of());\n+            return fetchCloudNetwork(environment, network, filter);\n+        } else if (isAzure(environment)) {\n+            Map<String, String> filter = new HashMap<>();\n+            filter.put(\"networkId\", network.getAzure().getNetworkId());\n+            filter.put(\"resourceGroupName\", network.getAzure().getResourceGroupName());\n+            return fetchCloudNetwork(environment, network, filter);\n         } else {\n-            return network.getSubnetIds().stream().collect(Collectors.toMap(Function.identity(), id -> new CloudSubnet(id, null)));\n+            return network.getSubnetIds().stream().collect(toMap(Function.identity(), id -> new CloudSubnet(id, null)));\n         }\n     }\n \n+    private Map<String, CloudSubnet> fetchCloudNetwork(Environment environment, NetworkDto network, Map<String, String> filter) {\n+        String regionName = environment.getRegionSet().iterator().next().getName();\n+        PlatformResourceRequest platformResourceRequest = new PlatformResourceRequest();\n+        platformResourceRequest.setCredential(environment.getCredential());\n+        platformResourceRequest.setCloudPlatform(environment.getCloudPlatform());\n+        platformResourceRequest.setRegion(regionName);\n+        platformResourceRequest.setFilters(filter);\n+\n+        CloudNetworks cloudNetworks = platformParameterService.getCloudNetworks(platformResourceRequest);\n+        Set<CloudNetwork> cloudNetworkSet = cloudNetworks.getCloudNetworkResponses().get(regionName);\n+        return cloudNetworkSet.stream()\n+                .flatMap(it -> it.getSubnetsMeta().stream())\n+                .filter(sn -> network.getSubnetIds().contains(sn.getId()))\n+                .collect(toMap(CloudSubnet::getId, Function.identity()));\n+    }\n+\n+    private boolean isAzure(Environment environment) {\n+        return CloudPlatform.AZURE.name().equalsIgnoreCase(environment.getCloudPlatform());\n+    }\n+\n+    private boolean isAws(Environment environment) {\n+        return CloudPlatform.AWS.name().equalsIgnoreCase(environment.getCloudPlatform());\n+    }\n+\n     public Optional<String> getAwsVpcId(NetworkDto networkDto) {\n         return Optional.ofNullable(networkDto)\n                 .map(NetworkDto::getAws)\n                 .map(AwsParams::getVpcId);\n     }\n \n+    public BaseNetwork mergeNetworkDtoWithNetwork(BaseNetwork originalNetwork, EnvironmentEditDto editDto, Environment environment) {\n+        EnvironmentNetworkConverter environmentNetworkConverter = environmentNetworkConverterMap.get(CloudPlatform.valueOf(environment.getCloudPlatform()));\n+        NetworkDto networkDto = environmentNetworkConverter.convertToDto(originalNetwork);", "originalCommit": "678472d60543fbb69238be0ec4b0611f712f5313", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba331f293d40102c7fe144add8aa4bfa694df669", "chunk": "diff --git a/environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java b/environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java\nindex 562ec0eb68..5c5cc0a961 100644\n--- a/environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java\n+++ b/environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java\n\n@@ -130,19 +130,19 @@ public class NetworkService {\n                 .map(AwsParams::getVpcId);\n     }\n \n-    public BaseNetwork mergeNetworkDtoWithNetwork(BaseNetwork originalNetwork, EnvironmentEditDto editDto, Environment environment) {\n+    public BaseNetwork validateAndReplaceSubnets(BaseNetwork originalNetwork, EnvironmentEditDto editDto, Environment environment) {\n+        if (originalNetwork.getRegistrationType() == RegistrationType.CREATE_NEW) {\n+            throw new BadRequestException(\"Subnet could not be attached to this environment, because it is newly created by Cloudbreak. \" +\n+                    \"You need to re-install the the environment into an existing VPC\");\n+        }\n         EnvironmentNetworkConverter environmentNetworkConverter = environmentNetworkConverterMap.get(CloudPlatform.valueOf(environment.getCloudPlatform()));\n-        NetworkDto networkDto = environmentNetworkConverter.convertToDto(originalNetwork);\n-        NetworkDto cloneNetworkDto = NetworkDto.builder(networkDto)\n+        NetworkDto originalNetworkDto = environmentNetworkConverter.convertToDto(originalNetwork);\n+        NetworkDto cloneNetworkDto = NetworkDto.builder(originalNetworkDto)\n                 .withSubnetMetas(editDto.getNetworkDto().getSubnetMetas())\n                 .build();\n         Map<String, CloudSubnet> subnetMetadatas = retrieveSubnetMetadata(environment, cloneNetworkDto);\n         ValidationResult.ValidationResultBuilder validationResultBuilder = networkCreationValidator.validateNetworkEdit(environment, cloneNetworkDto,\n                 subnetMetadatas);\n-        if (networkDto.getRegistrationType() == RegistrationType.CREATE_NEW) {\n-            validationResultBuilder.error(\"Subnet could not be attached to this environment, because it is newly created by Cloudbreak. \" +\n-                    \"You need to re-install the the environment with existed VPC\");\n-        }\n         ValidationResult validationResult = validationResultBuilder.build();\n         if (validationResult.hasError()) {\n             throw new BadRequestException(validationResult.getFormattedErrors());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYwNzA0MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370607041", "bodyText": "I think the else clause is not needed.", "author": "gergopapi2", "createdAt": "2020-01-24T12:21:12Z", "path": "common/src/main/java/com/sequenceiq/cloudbreak/validation/ValidationResult.java", "diffHunk": "@@ -11,27 +11,37 @@\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n \n+import org.apache.commons.lang3.StringUtils;\n+\n public class ValidationResult {\n \n     private final State state;\n \n     private final List<String> errors;\n \n-    private final String formattedErrors;\n+    private String formattedErrors;\n+\n+    private final String prefix;\n \n-    private ValidationResult(State state, SortedSet<String> errors) {\n+    private ValidationResult(State state, SortedSet<String> errors, String prefix) {\n         this.state = state;\n         this.errors = new ArrayList<>(errors);\n-        formattedErrors = IntStream.range(0, this.errors.size())\n+        this.prefix = prefix;\n+        if (!StringUtils.isEmpty(prefix)) {\n+            formattedErrors = prefix + \": \\n\";\n+        } else {", "originalCommit": "678472d60543fbb69238be0ec4b0611f712f5313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxNTY2MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370615660", "bodyText": "Unfortunately, the else clause is needed because if formattedErrors  is null, the null will appear the start of the formatted errors", "author": "topolyai5", "createdAt": "2020-01-24T12:45:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYwNzA0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ba331f293d40102c7fe144add8aa4bfa694df669", "chunk": "diff --git a/common/src/main/java/com/sequenceiq/cloudbreak/validation/ValidationResult.java b/common/src/main/java/com/sequenceiq/cloudbreak/validation/ValidationResult.java\nindex 8217af8a24..a58ef0994b 100644\n--- a/common/src/main/java/com/sequenceiq/cloudbreak/validation/ValidationResult.java\n+++ b/common/src/main/java/com/sequenceiq/cloudbreak/validation/ValidationResult.java\n\n@@ -19,7 +19,7 @@ public class ValidationResult {\n \n     private final List<String> errors;\n \n-    private String formattedErrors;\n+    private String formattedErrors = \"\";\n \n     private final String prefix;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxODI4Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370618286", "bodyText": "As per personal communications it seems this line is not needed.", "author": "gergopapi2", "createdAt": "2020-01-24T12:52:42Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentModificationService.java", "diffHunk": "@@ -122,31 +119,19 @@ private EnvironmentDto changeCredential(String accountId, String environmentName\n \n     private void editNetworkIfChanged(Environment environment, EnvironmentEditDto editDto) {\n         if (networkChanged(editDto)) {\n-            Optional<BaseNetwork> original = networkService.findByEnvironment(environment.getId());\n-            original.ifPresent(baseNetwork -> editDto.getNetworkDto().setId(baseNetwork.getId()));\n-            try {\n-                BaseNetwork network = createAndSetNetwork(environment, editDto.getNetworkDto(), editDto.getAccountId());\n-                if (network != null) {\n-                    environment.setNetwork(network);\n-                }\n-            } catch (Exception e) {\n-                environment.setStatus(EnvironmentStatus.UPDATE_FAILED);\n-                environment.setStatusReason(e.getMessage());\n-                environmentService.save(environment);\n-                throw e;\n+            BaseNetwork network = networkService.mergeNetworkDtoWithNetwork(environment.getNetwork(), editDto, environment);\n+            if (network != null) {\n+                environment.setNetwork(network);\n             }\n+            environment.setStatus(EnvironmentStatus.AVAILABLE);", "originalCommit": "678472d60543fbb69238be0ec4b0611f712f5313", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba331f293d40102c7fe144add8aa4bfa694df669", "chunk": "diff --git a/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentModificationService.java b/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentModificationService.java\nindex 729cc59d4e..e40983892e 100644\n--- a/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentModificationService.java\n+++ b/environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentModificationService.java\n\n@@ -119,12 +118,10 @@ public class EnvironmentModificationService {\n \n     private void editNetworkIfChanged(Environment environment, EnvironmentEditDto editDto) {\n         if (networkChanged(editDto)) {\n-            BaseNetwork network = networkService.mergeNetworkDtoWithNetwork(environment.getNetwork(), editDto, environment);\n+            BaseNetwork network = networkService.validateAndReplaceSubnets(environment.getNetwork(), editDto, environment);\n             if (network != null) {\n                 environment.setNetwork(network);\n             }\n-            environment.setStatus(EnvironmentStatus.AVAILABLE);\n-            environment.setStatusReason(\"\");\n         }\n     }\n \n"}}, {"oid": "ba331f293d40102c7fe144add8aa4bfa694df669", "url": "https://github.com/hortonworks/cloudbreak/commit/ba331f293d40102c7fe144add8aa4bfa694df669", "message": "CB-5115 Attach/detach existing subnet to/from existing environments", "committedDate": "2020-01-27T12:06:11Z", "type": "forcePushed"}, {"oid": "1f835a25e0c2d5f25165013ef7595ee043ddeeec", "url": "https://github.com/hortonworks/cloudbreak/commit/1f835a25e0c2d5f25165013ef7595ee043ddeeec", "message": "CB-5115 Attach/detach existing subnet to/from existing environments", "committedDate": "2020-01-27T13:40:09Z", "type": "forcePushed"}, {"oid": "93d787a55e8311d5e0988fb96c8c10ac8d497c43", "url": "https://github.com/hortonworks/cloudbreak/commit/93d787a55e8311d5e0988fb96c8c10ac8d497c43", "message": "CB-5115 Attach/detach existing subnet to/from existing environments", "committedDate": "2020-01-27T14:29:29Z", "type": "commit"}, {"oid": "93d787a55e8311d5e0988fb96c8c10ac8d497c43", "url": "https://github.com/hortonworks/cloudbreak/commit/93d787a55e8311d5e0988fb96c8c10ac8d497c43", "message": "CB-5115 Attach/detach existing subnet to/from existing environments", "committedDate": "2020-01-27T14:29:29Z", "type": "forcePushed"}]}