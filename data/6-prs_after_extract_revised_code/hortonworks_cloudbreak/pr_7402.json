{"pr_number": 7402, "pr_title": "CB-5791 Don't attempt to disable autorestart without KNOX service name", "pr_createdAt": "2020-02-27T09:32:06Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7402", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzMzc5NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7402#discussion_r385033794", "bodyText": "Maybe the cluster name should be added to the log message", "author": "doktoric", "createdAt": "2020-02-27T10:19:55Z", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerConfigService.java", "diffHunk": "@@ -82,23 +85,35 @@ public void disableKnoxAutorestartIfCmVersionAtLeast(Versioned versionAtLeast, A\n     }\n \n     private void disableKnoxAutorestart(ApiClient client, String clusterName) {\n-        try {\n             ServicesResourceApi servicesResourceApi = clouderaManagerApiFactory.getServicesResourceApi(client);\n-            String knoxServiceName = getKnoxServiceName(clusterName, servicesResourceApi);\n+            getKnoxServiceName(clusterName, servicesResourceApi)\n+                    .ifPresentOrElse(\n+                            doDisableKnoxAutorestart(clusterName, servicesResourceApi),\n+                            () -> LOGGER.info(\"KNOX service name is missing, skipping disabling the autorestart property.\"));\n+    }\n \n+    private Consumer<String> doDisableKnoxAutorestart(String clusterName, ServicesResourceApi servicesResourceApi) {\n+        return knoxServiceName -> {\n             ApiConfig autorestartConfig = new ApiConfig().name(KNOX_AUTORESTART_ON_STOP).value(Boolean.FALSE.toString());\n             ApiServiceConfig serviceConfig = new ApiServiceConfig().addItemsItem(autorestartConfig);\n-            servicesResourceApi.updateServiceConfig(clusterName, knoxServiceName, \"\", serviceConfig);\n-        } catch (ApiException e) {\n-            LOGGER.debug(\"Failed to set autorestart_on_stop to KNOX in Cloudera Manager.\", e);\n-        }\n+            try {\n+                servicesResourceApi.updateServiceConfig(clusterName, knoxServiceName, \"\", serviceConfig);\n+            } catch (ApiException e) {\n+                LOGGER.debug(\"Failed to set autorestart_on_stop to KNOX in Cloudera Manager.\", e);\n+            }\n+        };\n     }\n \n-    private String getKnoxServiceName(String clusterName, ServicesResourceApi servicesResourceApi) throws ApiException {\n-        ApiServiceList serviceList = servicesResourceApi.readServices(clusterName, DataView.SUMMARY.name());\n-        return serviceList.getItems().stream()\n-                .filter(service -> KNOX_SERVICE.equals(service.getType()))\n-                .map(ApiService::getName)\n-                .findFirst().orElse(KNOX_SERVICE);\n+    private Optional<String> getKnoxServiceName(String clusterName, ServicesResourceApi servicesResourceApi) {\n+        try {\n+            ApiServiceList serviceList = servicesResourceApi.readServices(clusterName, DataView.SUMMARY.name());\n+            return serviceList.getItems().stream()\n+                    .filter(service -> KNOX_SERVICE.equals(service.getType()))\n+                    .map(ApiService::getName)\n+                    .findFirst();\n+        } catch (ApiException e) {\n+            LOGGER.debug(\"Failed to get KNOX service name from Cloudera Manager.\", e);", "originalCommit": "ca104ce29503b8e0e43d3d822cac5fa1f4fc793c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzNTU2MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7402#discussion_r385035560", "bodyText": "Ideally the log entry should already contain it.", "author": "daszabo", "createdAt": "2020-02-27T10:23:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzMzc5NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzMzg0MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7402#discussion_r385033841", "bodyText": "Maybe the cluster name should be added to the log message", "author": "doktoric", "createdAt": "2020-02-27T10:20:00Z", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerConfigService.java", "diffHunk": "@@ -82,23 +85,35 @@ public void disableKnoxAutorestartIfCmVersionAtLeast(Versioned versionAtLeast, A\n     }\n \n     private void disableKnoxAutorestart(ApiClient client, String clusterName) {\n-        try {\n             ServicesResourceApi servicesResourceApi = clouderaManagerApiFactory.getServicesResourceApi(client);\n-            String knoxServiceName = getKnoxServiceName(clusterName, servicesResourceApi);\n+            getKnoxServiceName(clusterName, servicesResourceApi)\n+                    .ifPresentOrElse(\n+                            doDisableKnoxAutorestart(clusterName, servicesResourceApi),\n+                            () -> LOGGER.info(\"KNOX service name is missing, skipping disabling the autorestart property.\"));\n+    }\n \n+    private Consumer<String> doDisableKnoxAutorestart(String clusterName, ServicesResourceApi servicesResourceApi) {\n+        return knoxServiceName -> {\n             ApiConfig autorestartConfig = new ApiConfig().name(KNOX_AUTORESTART_ON_STOP).value(Boolean.FALSE.toString());\n             ApiServiceConfig serviceConfig = new ApiServiceConfig().addItemsItem(autorestartConfig);\n-            servicesResourceApi.updateServiceConfig(clusterName, knoxServiceName, \"\", serviceConfig);\n-        } catch (ApiException e) {\n-            LOGGER.debug(\"Failed to set autorestart_on_stop to KNOX in Cloudera Manager.\", e);\n-        }\n+            try {\n+                servicesResourceApi.updateServiceConfig(clusterName, knoxServiceName, \"\", serviceConfig);\n+            } catch (ApiException e) {\n+                LOGGER.debug(\"Failed to set autorestart_on_stop to KNOX in Cloudera Manager.\", e);", "originalCommit": "ca104ce29503b8e0e43d3d822cac5fa1f4fc793c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "74dd0e39c9d44f85fa331333b2afb7fcd037ffac", "url": "https://github.com/hortonworks/cloudbreak/commit/74dd0e39c9d44f85fa331333b2afb7fcd037ffac", "message": "CB-5791 Don't attempt to dosable autorestart without KNOX service name", "committedDate": "2020-02-27T10:54:50Z", "type": "forcePushed"}, {"oid": "61fba725894b6dfc5c99c69e6754b79ae1055d6d", "url": "https://github.com/hortonworks/cloudbreak/commit/61fba725894b6dfc5c99c69e6754b79ae1055d6d", "message": "CB-5791 Don't attempt to dosable autorestart without KNOX service name", "committedDate": "2020-02-27T12:57:57Z", "type": "commit"}, {"oid": "61fba725894b6dfc5c99c69e6754b79ae1055d6d", "url": "https://github.com/hortonworks/cloudbreak/commit/61fba725894b6dfc5c99c69e6754b79ae1055d6d", "message": "CB-5791 Don't attempt to dosable autorestart without KNOX service name", "committedDate": "2020-02-27T12:57:57Z", "type": "forcePushed"}]}