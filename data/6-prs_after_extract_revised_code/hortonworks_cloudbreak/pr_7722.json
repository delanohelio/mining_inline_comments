{"pr_number": 7722, "pr_title": "CB-6397: FreeIPA Single mode can't be repaired when FreeIPA host was \u2026", "pr_createdAt": "2020-04-02T14:24:10Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7722", "timeline": [{"oid": "caff594f4c40be66afaf49faae8da8e02d13db74", "url": "https://github.com/hortonworks/cloudbreak/commit/caff594f4c40be66afaf49faae8da8e02d13db74", "message": "CB-6397: FreeIPA Single mode can't be repaired when FreeIPA host was stopped on Azure\n\nAzure has a similar lifecycle to AWS and stopped instances cannot be\nrebooted and must be started.", "committedDate": "2020-04-02T18:03:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3Nzg3MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7722#discussion_r402777871", "bodyText": "I think there is only one line difference in these 2 methods. caould you refactor it? I would do something like:\nif (vm.getStatus() == InstanceStatus.STARTED) {\n    doReboot(completables, vm, statuses, () -> azureClient.rebootVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId()));\n} else if (vm.getStatus() == InstanceStatus.STOPPED) {\n    doReboot(completables, vm, statuses, () -> azureClient.startVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId()));\n}\n\nand\nprivate void doReboot(List<Completable> completables, CloudVmInstanceStatus vm, List<CloudVmInstanceStatus> statuses, Supplier<Completable> supplier) {\n        completables.add(supplier.get()\n                .doOnError(throwable -> {\n                    LOGGER.error(\"Error happend on azure instance reboot: {}\", vm, throwable);\n                    statuses.add(new CloudVmInstanceStatus(vm.getCloudInstance(), InstanceStatus.FAILED, throwable.getMessage()));\n                })\n                .doOnCompleted(() -> statuses.add(new CloudVmInstanceStatus(vm.getCloudInstance(), InstanceStatus.STARTED)))\n                .subscribeOn(Schedulers.io()));\n    }", "author": "lacikaaa", "createdAt": "2020-04-03T07:10:26Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureInstanceConnector.java", "diffHunk": "@@ -68,22 +68,47 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n     public List<CloudVmInstanceStatus> reboot(AuthenticatedContext ac, List<CloudInstance> vms) {\n         LOGGER.info(\"Rebooting vms on Azure: {}\", vms.stream().map(CloudInstance::getInstanceId).collect(Collectors.toList()));\n         List<CloudVmInstanceStatus> statuses = new ArrayList<>();\n-        List<Completable> rebootCompletables = new ArrayList<>();\n-        for (CloudInstance vm : vms) {\n-            String resourceGroupName = azureUtils.getResourceGroupName(ac.getCloudContext(), vm);\n-            AzureClient azureClient = ac.getParameter(AzureClient.class);\n-            rebootCompletables.add(azureClient.rebootVirtualMachineAsync(resourceGroupName, vm.getInstanceId())\n-                    .doOnError(throwable -> {\n-                        LOGGER.error(\"Error happend on azure instance reboot: {}\", vm, throwable);\n-                        statuses.add(new CloudVmInstanceStatus(vm, InstanceStatus.FAILED, throwable.getMessage()));\n-                    })\n-                    .doOnCompleted(() -> statuses.add(new CloudVmInstanceStatus(vm, InstanceStatus.STARTED)))\n-                    .subscribeOn(Schedulers.io()));\n+        List<Completable> completables = new ArrayList<>();\n+        List<CloudVmInstanceStatus> currentStatuses = check(ac, vms);\n+        for (CloudVmInstanceStatus vm : currentStatuses) {\n+            if (vm.getStatus() == InstanceStatus.STARTED) {\n+                doReboot(completables, ac, vm, statuses);\n+            } else if (vm.getStatus() == InstanceStatus.STOPPED) {\n+                doStart(completables, ac, vm, statuses);\n+            } else {\n+                LOGGER.error(String.format(\"Unable to reboot instance %s because of invalid status %s.\",\n+                        vm.getCloudInstance().getInstanceId(), vm.getStatus().toString()));\n+            }\n         }\n-        Completable.merge(rebootCompletables).await();\n+        Completable.merge(completables).await();\n         return statuses;\n     }\n \n+    private void doReboot(List<Completable> completables, AuthenticatedContext ac, CloudVmInstanceStatus vm, List<CloudVmInstanceStatus> statuses) {\n+        AzureClient azureClient = ac.getParameter(AzureClient.class);\n+        String resourceGroupName = azureUtils.getResourceGroupName(ac.getCloudContext(), vm.getCloudInstance());\n+        completables.add(azureClient.rebootVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId())\n+                .doOnError(throwable -> {\n+                    LOGGER.error(\"Error happend on azure instance reboot: {}\", vm, throwable);\n+                    statuses.add(new CloudVmInstanceStatus(vm.getCloudInstance(), InstanceStatus.FAILED, throwable.getMessage()));\n+                })\n+                .doOnCompleted(() -> statuses.add(new CloudVmInstanceStatus(vm.getCloudInstance(), InstanceStatus.STARTED)))\n+                .subscribeOn(Schedulers.io()));\n+    }\n+\n+    private void doStart(List<Completable> completables, AuthenticatedContext ac, CloudVmInstanceStatus vm, List<CloudVmInstanceStatus> statuses) {\n+        AzureClient azureClient = ac.getParameter(AzureClient.class);\n+        String resourceGroupName = azureUtils.getResourceGroupName(ac.getCloudContext(), vm.getCloudInstance());\n+        completables.add(azureClient.startVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId())\n+                .doOnError(throwable -> {\n+                    LOGGER.error(\"Error happend on azure instance start: {}\", vm, throwable);\n+                    statuses.add(new CloudVmInstanceStatus(vm.getCloudInstance(), InstanceStatus.FAILED, throwable.getMessage()));\n+                })\n+                .doOnCompleted(() -> statuses.add(new CloudVmInstanceStatus(vm.getCloudInstance(), InstanceStatus.STARTED)))\n+                .subscribeOn(Schedulers.io()));\n+\n+    }", "originalCommit": "caff594f4c40be66afaf49faae8da8e02d13db74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0NDU3Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7722#discussion_r403244572", "bodyText": "changed", "author": "holleyism", "createdAt": "2020-04-03T18:55:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3Nzg3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "80731721d160f513f000cf307a3c529e87c277d0", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureInstanceConnector.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureInstanceConnector.java\nindex 458981dc06..4d46046a1d 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureInstanceConnector.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureInstanceConnector.java\n\n@@ -71,10 +72,12 @@ public class AzureInstanceConnector implements InstanceConnector {\n         List<Completable> completables = new ArrayList<>();\n         List<CloudVmInstanceStatus> currentStatuses = check(ac, vms);\n         for (CloudVmInstanceStatus vm : currentStatuses) {\n+            AzureClient azureClient = ac.getParameter(AzureClient.class);\n+            String resourceGroupName = azureUtils.getResourceGroupName(ac.getCloudContext(), vm.getCloudInstance());\n             if (vm.getStatus() == InstanceStatus.STARTED) {\n-                doReboot(completables, ac, vm, statuses);\n+                doReboot(completables, ac, vm, statuses, () -> azureClient.rebootVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId()));\n             } else if (vm.getStatus() == InstanceStatus.STOPPED) {\n-                doStart(completables, ac, vm, statuses);\n+                doReboot(completables, ac, vm, statuses, () -> azureClient.startVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId()));\n             } else {\n                 LOGGER.error(String.format(\"Unable to reboot instance %s because of invalid status %s.\",\n                         vm.getCloudInstance().getInstanceId(), vm.getStatus().toString()));\n"}}, {"oid": "80731721d160f513f000cf307a3c529e87c277d0", "url": "https://github.com/hortonworks/cloudbreak/commit/80731721d160f513f000cf307a3c529e87c277d0", "message": "CB-6397: FreeIPA Single mode can't be repaired when FreeIPA host was stopped on Azure\n\nAzure has a similar lifecycle to AWS and stopped instances cannot be\nrebooted and must be started.", "committedDate": "2020-04-03T14:00:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAzNjk4Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7722#discussion_r403036987", "bodyText": "so AuthenticatedContext ac is not used anymore, could you remove?\nalso could you give supplier a bit more meaningful name? thanks", "author": "lacikaaa", "createdAt": "2020-04-03T14:16:30Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureInstanceConnector.java", "diffHunk": "@@ -68,22 +69,35 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n     public List<CloudVmInstanceStatus> reboot(AuthenticatedContext ac, List<CloudInstance> vms) {\n         LOGGER.info(\"Rebooting vms on Azure: {}\", vms.stream().map(CloudInstance::getInstanceId).collect(Collectors.toList()));\n         List<CloudVmInstanceStatus> statuses = new ArrayList<>();\n-        List<Completable> rebootCompletables = new ArrayList<>();\n-        for (CloudInstance vm : vms) {\n-            String resourceGroupName = azureUtils.getResourceGroupName(ac.getCloudContext(), vm);\n+        List<Completable> completables = new ArrayList<>();\n+        List<CloudVmInstanceStatus> currentStatuses = check(ac, vms);\n+        for (CloudVmInstanceStatus vm : currentStatuses) {\n             AzureClient azureClient = ac.getParameter(AzureClient.class);\n-            rebootCompletables.add(azureClient.rebootVirtualMachineAsync(resourceGroupName, vm.getInstanceId())\n-                    .doOnError(throwable -> {\n-                        LOGGER.error(\"Error happend on azure instance reboot: {}\", vm, throwable);\n-                        statuses.add(new CloudVmInstanceStatus(vm, InstanceStatus.FAILED, throwable.getMessage()));\n-                    })\n-                    .doOnCompleted(() -> statuses.add(new CloudVmInstanceStatus(vm, InstanceStatus.STARTED)))\n-                    .subscribeOn(Schedulers.io()));\n+            String resourceGroupName = azureUtils.getResourceGroupName(ac.getCloudContext(), vm.getCloudInstance());\n+            if (vm.getStatus() == InstanceStatus.STARTED) {\n+                doReboot(completables, ac, vm, statuses, () -> azureClient.rebootVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId()));\n+            } else if (vm.getStatus() == InstanceStatus.STOPPED) {\n+                doReboot(completables, ac, vm, statuses, () -> azureClient.startVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId()));\n+            } else {\n+                LOGGER.error(String.format(\"Unable to reboot instance %s because of invalid status %s.\",\n+                        vm.getCloudInstance().getInstanceId(), vm.getStatus().toString()));\n+            }\n         }\n-        Completable.merge(rebootCompletables).await();\n+        Completable.merge(completables).await();\n         return statuses;\n     }\n \n+    private void doReboot(List<Completable> completables, AuthenticatedContext ac, CloudVmInstanceStatus vm, List<CloudVmInstanceStatus> statuses,", "originalCommit": "80731721d160f513f000cf307a3c529e87c277d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5MzMxMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7722#discussion_r403293312", "bodyText": "fixed", "author": "holleyism", "createdAt": "2020-04-03T20:07:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAzNjk4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6048505c155456b8383b543c28b58a661aedcb5f", "chunk": "diff --git a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureInstanceConnector.java b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureInstanceConnector.java\nindex 4d46046a1d..f82f63805f 100644\n--- a/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureInstanceConnector.java\n+++ b/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureInstanceConnector.java\n\n@@ -75,9 +75,9 @@ public class AzureInstanceConnector implements InstanceConnector {\n             AzureClient azureClient = ac.getParameter(AzureClient.class);\n             String resourceGroupName = azureUtils.getResourceGroupName(ac.getCloudContext(), vm.getCloudInstance());\n             if (vm.getStatus() == InstanceStatus.STARTED) {\n-                doReboot(completables, ac, vm, statuses, () -> azureClient.rebootVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId()));\n+                doReboot(completables, vm, statuses, () -> azureClient.rebootVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId()));\n             } else if (vm.getStatus() == InstanceStatus.STOPPED) {\n-                doReboot(completables, ac, vm, statuses, () -> azureClient.startVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId()));\n+                doReboot(completables, vm, statuses, () -> azureClient.startVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId()));\n             } else {\n                 LOGGER.error(String.format(\"Unable to reboot instance %s because of invalid status %s.\",\n                         vm.getCloudInstance().getInstanceId(), vm.getStatus().toString()));\n"}}, {"oid": "6048505c155456b8383b543c28b58a661aedcb5f", "url": "https://github.com/hortonworks/cloudbreak/commit/6048505c155456b8383b543c28b58a661aedcb5f", "message": "CB-6397: FreeIPA Single mode can't be repaired when FreeIPA host was stopped on Azure\n\nAzure has a similar lifecycle to AWS and stopped instances cannot be\nrebooted and must be started.", "committedDate": "2020-04-03T20:06:50Z", "type": "commit"}, {"oid": "6048505c155456b8383b543c28b58a661aedcb5f", "url": "https://github.com/hortonworks/cloudbreak/commit/6048505c155456b8383b543c28b58a661aedcb5f", "message": "CB-6397: FreeIPA Single mode can't be repaired when FreeIPA host was stopped on Azure\n\nAzure has a similar lifecycle to AWS and stopped instances cannot be\nrebooted and must be started.", "committedDate": "2020-04-03T20:06:50Z", "type": "forcePushed"}]}