{"pr_number": 8286, "pr_title": "CB-7477: Define API's for datalake and CB services to fasten the integration.", "pr_createdAt": "2020-06-15T21:40:00Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8286", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ2NzMyOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8286#discussion_r440467328", "bodyText": "Is the \"name\" in this context the Data Lake CRN?", "author": "brycederriso", "createdAt": "2020-06-15T21:51:26Z", "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/endpoint/SdxEndpoint.java", "diffHunk": "@@ -165,4 +169,27 @@ SdxClusterResponse create(@ValidStackNameFormat @ValidStackNameLength @PathParam\n     @ApiOperation(value = \"list advertised datalake versions\", produces = MediaType.APPLICATION_JSON, nickname = \"advertisedruntimes\")\n     List<AdvertisedRuntime> advertisedRuntimes();\n \n+    @POST\n+    @Path(\"{name}/backupDatabase\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = \"backup the database backing datalake \", produces = MediaType.APPLICATION_JSON, nickname = \"backupDatabase\")\n+    SdxDatabaseBackupResponse backupDatabaseByName(@PathParam(\"name\") String name, @QueryParam(\"backupId\") String backupId, @QueryParam(\"backupLocation\") String backupLocation);", "originalCommit": "365b229e118da2e5e997de46a30409480ffc0022", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3205dc9e1a83b2de3d4ab6d2c6912728b3467870", "chunk": "diff --git a/datalake-api/src/main/java/com/sequenceiq/sdx/api/endpoint/SdxEndpoint.java b/datalake-api/src/main/java/com/sequenceiq/sdx/api/endpoint/SdxEndpoint.java\nindex 59ee8b1fbc..a3ca88bc13 100644\n--- a/datalake-api/src/main/java/com/sequenceiq/sdx/api/endpoint/SdxEndpoint.java\n+++ b/datalake-api/src/main/java/com/sequenceiq/sdx/api/endpoint/SdxEndpoint.java\n\n@@ -173,23 +173,27 @@ public interface SdxEndpoint {\n     @Path(\"{name}/backupDatabase\")\n     @Produces(MediaType.APPLICATION_JSON)\n     @ApiOperation(value = \"backup the database backing datalake \", produces = MediaType.APPLICATION_JSON, nickname = \"backupDatabase\")\n-    SdxDatabaseBackupResponse backupDatabaseByName(@PathParam(\"name\") String name, @QueryParam(\"backupId\") String backupId, @QueryParam(\"backupLocation\") String backupLocation);\n+    SdxDatabaseBackupResponse backupDatabaseByName(@PathParam(\"name\") String name,\n+            @QueryParam(\"backupId\") String backupId, @QueryParam(\"backupLocation\") String backupLocation);\n \n     @POST\n     @Path(\"{name}/restoreDatabase\")\n     @Produces(MediaType.APPLICATION_JSON)\n     @ApiOperation(value = \"restore the database backing datalake \", produces = MediaType.APPLICATION_JSON, nickname = \"restoreDatabase\")\n-    SdxDatabaseRestoreResponse restoreDatabaseByName(@PathParam(\"name\") String name, @QueryParam(\"backupId\") String backupId, @QueryParam(\"backupLocation\") String backupLocation);\n+    SdxDatabaseRestoreResponse restoreDatabaseByName(@PathParam(\"name\") String name,\n+            @QueryParam(\"backupId\") String backupId, @QueryParam(\"backupLocation\") String backupLocation);\n \n     @GET\n     @Path(\"{name}/backupDatabaseStatus\")\n     @Produces(MediaType.APPLICATION_JSON)\n     @ApiOperation(value = \"Get the status of datalake database backup operation\", produces = MediaType.APPLICATION_JSON, nickname = \"backupDatabaseStatus\")\n-    SdxDatabaseBackupStatusResponse backupDatabaseStatusByName(@PathParam(\"name\") String name, @QueryParam(\"operationId\") String operationId);\n+    SdxDatabaseBackupStatusResponse backupDatabaseStatusByName(@PathParam(\"name\") String name,\n+            @QueryParam(\"operationId\") String operationId);\n \n     @GET\n     @Path(\"{name}/restoreDatabaseStatus\")\n     @Produces(MediaType.APPLICATION_JSON)\n     @ApiOperation(value = \"Get the status of datalake database restore operation\", produces = MediaType.APPLICATION_JSON, nickname = \"restoreDatabaseStatus\")\n-    SdxDatabaseRestoreStatusResponse restoreDatabaseStatusByName(@PathParam(\"name\") String name, @QueryParam(\"operationId\") String operationId);\n+    SdxDatabaseRestoreStatusResponse restoreDatabaseStatusByName(@PathParam(\"name\") String name,\n+            @QueryParam(\"operationId\") String operationId);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyODA2OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8286#discussion_r440728069", "bodyText": "backupId is the UUID or the name of the backup? I assume \"name\" parameter is the stack's name and was expecting a \"backupName\" param here.\nOr is this id generated by the DR Service?", "author": "pdarvasi", "createdAt": "2020-06-16T09:51:23Z", "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/stacks/StackV4Endpoint.java", "diffHunk": "@@ -269,4 +273,17 @@ FlowIdentifier setClusterMaintenanceMode(@PathParam(\"workspaceId\") Long workspac\n     @ApiOperation(value = UPDATE_SALT, nickname = \"updateSaltByName\")\n     FlowIdentifier updateSaltByName(@PathParam(\"workspaceId\") Long workspaceId, @PathParam(\"name\") String name);\n \n+    @POST\n+    @Path(\"{name}/database_backup\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = DATABASE_BACKUP, nickname = \"databaseBackup\")\n+    BackupV4Response backupDatabaseByName(@PathParam(\"workspaceId\") Long workspaceId, @PathParam(\"name\") String name,\n+            @QueryParam(\"backupLocation\") String backupLocation, @QueryParam(\"backupId\") String backupId);", "originalCommit": "365b229e118da2e5e997de46a30409480ffc0022", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyNzQ1OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8286#discussion_r440827458", "bodyText": "backupId is the UUID for the backup. It is the Id generated by datalake-dr service. Yes, the name is the stack name. There is no use for backup name here.", "author": "kkalvagadda1", "createdAt": "2020-06-16T12:56:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyODA2OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0MDk1OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8286#discussion_r440740958", "bodyText": "the same here.. is it uuid or name?", "author": "pdarvasi", "createdAt": "2020-06-16T10:13:46Z", "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/stacks/StackV4Endpoint.java", "diffHunk": "@@ -269,4 +273,17 @@ FlowIdentifier setClusterMaintenanceMode(@PathParam(\"workspaceId\") Long workspac\n     @ApiOperation(value = UPDATE_SALT, nickname = \"updateSaltByName\")\n     FlowIdentifier updateSaltByName(@PathParam(\"workspaceId\") Long workspaceId, @PathParam(\"name\") String name);\n \n+    @POST\n+    @Path(\"{name}/database_backup\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = DATABASE_BACKUP, nickname = \"databaseBackup\")\n+    BackupV4Response backupDatabaseByName(@PathParam(\"workspaceId\") Long workspaceId, @PathParam(\"name\") String name,\n+            @QueryParam(\"backupLocation\") String backupLocation, @QueryParam(\"backupId\") String backupId);\n+\n+    @POST\n+    @Path(\"{name}/database_restore\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = DATABASE_RESTORE, nickname = \"databaseRestore\")\n+    RestoreV4Response restoreDatabaseByName(@PathParam(\"workspaceId\") Long workspaceId, @PathParam(\"name\") String name,\n+            @QueryParam(\"backupLocation\") String backupLocation, @QueryParam(\"backupId\") String backupId);", "originalCommit": "365b229e118da2e5e997de46a30409480ffc0022", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0MjgxMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8286#discussion_r440842813", "bodyText": "backupId is the UUID for the backup. It is the Id generated by datalake-dr service. Yes, the name is the stack name. There is no use for backup name here.", "author": "kkalvagadda1", "createdAt": "2020-06-16T13:19:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0MDk1OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0NTU1MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8286#discussion_r440745550", "bodyText": "the same here.. is it uuid or name?", "author": "pdarvasi", "createdAt": "2020-06-16T10:21:58Z", "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/endpoint/SdxEndpoint.java", "diffHunk": "@@ -165,4 +169,27 @@ SdxClusterResponse create(@ValidStackNameFormat @ValidStackNameLength @PathParam\n     @ApiOperation(value = \"list advertised datalake versions\", produces = MediaType.APPLICATION_JSON, nickname = \"advertisedruntimes\")\n     List<AdvertisedRuntime> advertisedRuntimes();\n \n+    @POST\n+    @Path(\"{name}/backupDatabase\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = \"backup the database backing datalake \", produces = MediaType.APPLICATION_JSON, nickname = \"backupDatabase\")\n+    SdxDatabaseBackupResponse backupDatabaseByName(@PathParam(\"name\") String name, @QueryParam(\"backupId\") String backupId, @QueryParam(\"backupLocation\") String backupLocation);", "originalCommit": "365b229e118da2e5e997de46a30409480ffc0022", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0Mjk5Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8286#discussion_r440842997", "bodyText": "backupId is the UUID for the backup. It is the Id generated by datalake-dr service. Yes, the name is the stack name. There is no use for backup name here.", "author": "kkalvagadda1", "createdAt": "2020-06-16T13:20:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0NTU1MA=="}], "type": "inlineReview", "revised_code": {"commit": "3205dc9e1a83b2de3d4ab6d2c6912728b3467870", "chunk": "diff --git a/datalake-api/src/main/java/com/sequenceiq/sdx/api/endpoint/SdxEndpoint.java b/datalake-api/src/main/java/com/sequenceiq/sdx/api/endpoint/SdxEndpoint.java\nindex 59ee8b1fbc..a3ca88bc13 100644\n--- a/datalake-api/src/main/java/com/sequenceiq/sdx/api/endpoint/SdxEndpoint.java\n+++ b/datalake-api/src/main/java/com/sequenceiq/sdx/api/endpoint/SdxEndpoint.java\n\n@@ -173,23 +173,27 @@ public interface SdxEndpoint {\n     @Path(\"{name}/backupDatabase\")\n     @Produces(MediaType.APPLICATION_JSON)\n     @ApiOperation(value = \"backup the database backing datalake \", produces = MediaType.APPLICATION_JSON, nickname = \"backupDatabase\")\n-    SdxDatabaseBackupResponse backupDatabaseByName(@PathParam(\"name\") String name, @QueryParam(\"backupId\") String backupId, @QueryParam(\"backupLocation\") String backupLocation);\n+    SdxDatabaseBackupResponse backupDatabaseByName(@PathParam(\"name\") String name,\n+            @QueryParam(\"backupId\") String backupId, @QueryParam(\"backupLocation\") String backupLocation);\n \n     @POST\n     @Path(\"{name}/restoreDatabase\")\n     @Produces(MediaType.APPLICATION_JSON)\n     @ApiOperation(value = \"restore the database backing datalake \", produces = MediaType.APPLICATION_JSON, nickname = \"restoreDatabase\")\n-    SdxDatabaseRestoreResponse restoreDatabaseByName(@PathParam(\"name\") String name, @QueryParam(\"backupId\") String backupId, @QueryParam(\"backupLocation\") String backupLocation);\n+    SdxDatabaseRestoreResponse restoreDatabaseByName(@PathParam(\"name\") String name,\n+            @QueryParam(\"backupId\") String backupId, @QueryParam(\"backupLocation\") String backupLocation);\n \n     @GET\n     @Path(\"{name}/backupDatabaseStatus\")\n     @Produces(MediaType.APPLICATION_JSON)\n     @ApiOperation(value = \"Get the status of datalake database backup operation\", produces = MediaType.APPLICATION_JSON, nickname = \"backupDatabaseStatus\")\n-    SdxDatabaseBackupStatusResponse backupDatabaseStatusByName(@PathParam(\"name\") String name, @QueryParam(\"operationId\") String operationId);\n+    SdxDatabaseBackupStatusResponse backupDatabaseStatusByName(@PathParam(\"name\") String name,\n+            @QueryParam(\"operationId\") String operationId);\n \n     @GET\n     @Path(\"{name}/restoreDatabaseStatus\")\n     @Produces(MediaType.APPLICATION_JSON)\n     @ApiOperation(value = \"Get the status of datalake database restore operation\", produces = MediaType.APPLICATION_JSON, nickname = \"restoreDatabaseStatus\")\n-    SdxDatabaseRestoreStatusResponse restoreDatabaseStatusByName(@PathParam(\"name\") String name, @QueryParam(\"operationId\") String operationId);\n+    SdxDatabaseRestoreStatusResponse restoreDatabaseStatusByName(@PathParam(\"name\") String name,\n+            @QueryParam(\"operationId\") String operationId);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0ODM0OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8286#discussion_r440748349", "bodyText": "what is the value set? If it is fixed then I would prefer using an enum, if not then it is fine.", "author": "pdarvasi", "createdAt": "2020-06-16T10:27:21Z", "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxDatabaseBackupStatusResponse.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.sequenceiq.sdx.api.model;\n+\n+public class SdxDatabaseBackupStatusResponse {\n+    private String status;", "originalCommit": "365b229e118da2e5e997de46a30409480ffc0022", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0MjkzMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8286#discussion_r440842932", "bodyText": "backupId is the UUID for the backup. It is the Id generated by datalake-dr service. Yes, the name is the stack name. There is no use for backup name here.", "author": "kkalvagadda1", "createdAt": "2020-06-16T13:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0ODM0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3205dc9e1a83b2de3d4ab6d2c6912728b3467870", "chunk": "diff --git a/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxDatabaseBackupStatusResponse.java b/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxDatabaseBackupStatusResponse.java\nindex ee5b79a2ef..17ca72e980 100644\n--- a/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxDatabaseBackupStatusResponse.java\n+++ b/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxDatabaseBackupStatusResponse.java\n\n@@ -1,21 +1,21 @@\n package com.sequenceiq.sdx.api.model;\n \n public class SdxDatabaseBackupStatusResponse {\n-    private String status;\n+    private DatalakeDatabaseDrStatus status;\n \n     private String statusReason;\n \n-    public SdxDatabaseBackupStatusResponse(String status) {\n+    public SdxDatabaseBackupStatusResponse(DatalakeDatabaseDrStatus status) {\n         this.status = status;\n     }\n \n-    public SdxDatabaseBackupStatusResponse(String status, String statusReason) {\n+    public SdxDatabaseBackupStatusResponse(DatalakeDatabaseDrStatus status, String statusReason) {\n         this.status = status;\n         this.statusReason = statusReason;\n \n     }\n \n-    public String getStatus() {\n+    public DatalakeDatabaseDrStatus getStatus() {\n         return status;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0ODQxNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8286#discussion_r440748415", "bodyText": "what is the value set? If it is fixed then I would prefer using an enum, if not then it is fine.", "author": "pdarvasi", "createdAt": "2020-06-16T10:27:29Z", "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxDatabaseRestoreStatusResponse.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.sequenceiq.sdx.api.model;\n+\n+public class SdxDatabaseRestoreStatusResponse {\n+    private String status;", "originalCommit": "365b229e118da2e5e997de46a30409480ffc0022", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0MzIxMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8286#discussion_r440843212", "bodyText": "done", "author": "kkalvagadda1", "createdAt": "2020-06-16T13:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0ODQxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3205dc9e1a83b2de3d4ab6d2c6912728b3467870", "chunk": "diff --git a/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxDatabaseRestoreStatusResponse.java b/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxDatabaseRestoreStatusResponse.java\nindex 306a0f8a04..09379439fd 100644\n--- a/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxDatabaseRestoreStatusResponse.java\n+++ b/datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxDatabaseRestoreStatusResponse.java\n\n@@ -1,21 +1,21 @@\n package com.sequenceiq.sdx.api.model;\n \n public class SdxDatabaseRestoreStatusResponse {\n-    private String status;\n+    private DatalakeDatabaseDrStatus status;\n \n     private String statusReason;\n \n-    public SdxDatabaseRestoreStatusResponse(String status) {\n+    public SdxDatabaseRestoreStatusResponse(DatalakeDatabaseDrStatus status) {\n         this.status = status;\n     }\n \n-    public SdxDatabaseRestoreStatusResponse(String status, String statusReason) {\n+    public SdxDatabaseRestoreStatusResponse(DatalakeDatabaseDrStatus status, String statusReason) {\n         this.status = status;\n         this.statusReason = statusReason;\n \n     }\n \n-    public String getStatus() {\n+    public DatalakeDatabaseDrStatus getStatus() {\n         return status;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc1MDQ0MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8286#discussion_r440750441", "bodyText": "Pls. introduce new AuthorizationResourceAction regarding backup/restore", "author": "pdarvasi", "createdAt": "2020-06-16T10:31:20Z", "path": "datalake/src/main/java/com/sequenceiq/datalake/controller/sdx/SdxController.java", "diffHunk": "@@ -239,4 +243,27 @@ public FlowIdentifier stopByCrn(@ResourceCrn String crn) {\n         return cdpConfigService.getAdvertisedRuntimes();\n     }\n \n+    @Override\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.DATALAKE_READ)", "originalCommit": "365b229e118da2e5e997de46a30409480ffc0022", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0MzEwOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8286#discussion_r440843108", "bodyText": "done", "author": "kkalvagadda1", "createdAt": "2020-06-16T13:20:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc1MDQ0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "3205dc9e1a83b2de3d4ab6d2c6912728b3467870", "chunk": "diff --git a/datalake/src/main/java/com/sequenceiq/datalake/controller/sdx/SdxController.java b/datalake/src/main/java/com/sequenceiq/datalake/controller/sdx/SdxController.java\nindex d589e52dd5..b52fc6a9e8 100644\n--- a/datalake/src/main/java/com/sequenceiq/datalake/controller/sdx/SdxController.java\n+++ b/datalake/src/main/java/com/sequenceiq/datalake/controller/sdx/SdxController.java\n\n@@ -244,26 +244,26 @@ public class SdxController implements SdxEndpoint {\n     }\n \n     @Override\n-    @CheckPermissionByAccount(action = AuthorizationResourceAction.DATALAKE_READ)\n-    public SdxDatabaseBackupResponse backupDatabaseByName(String name, String backupId, String backupLocation) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.BACKUP_DATALAKE)\n+    public SdxDatabaseBackupResponse backupDatabaseByName(@ResourceName String name, String backupId, String backupLocation) {\n         return null;\n     }\n \n     @Override\n-    @CheckPermissionByAccount(action = AuthorizationResourceAction.DATALAKE_WRITE)\n-    public SdxDatabaseRestoreResponse restoreDatabaseByName(String name, String backupId, String backupLocation) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.RESTORE_DATALAKE)\n+    public SdxDatabaseRestoreResponse restoreDatabaseByName(@ResourceName String name, String backupId, String backupLocation) {\n         return null;\n     }\n \n     @Override\n-    @CheckPermissionByAccount(action = AuthorizationResourceAction.DATALAKE_READ)\n-    public SdxDatabaseBackupStatusResponse backupDatabaseStatusByName(String name, String operationId) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.BACKUP_DATALAKE)\n+    public SdxDatabaseBackupStatusResponse backupDatabaseStatusByName(@ResourceName String name, String operationId) {\n         return null;\n     }\n \n     @Override\n-    @CheckPermissionByAccount(action = AuthorizationResourceAction.DATALAKE_READ)\n-    public SdxDatabaseRestoreStatusResponse restoreDatabaseStatusByName(String name, String operationId) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.RESTORE_DATALAKE)\n+    public SdxDatabaseRestoreStatusResponse restoreDatabaseStatusByName(@ResourceName String name, String operationId) {\n         return null;\n     }\n }\n"}}, {"oid": "3205dc9e1a83b2de3d4ab6d2c6912728b3467870", "url": "https://github.com/hortonworks/cloudbreak/commit/3205dc9e1a83b2de3d4ab6d2c6912728b3467870", "message": "CB-7477: Define API's for datalake and CB services to fasten the integration.\nAddressed review comments. Updated the actions.json with appropriate rights.", "committedDate": "2020-06-16T15:15:39Z", "type": "forcePushed"}, {"oid": "a876ae2ee2998c5eee6dbff91a2887013b61ed8a", "url": "https://github.com/hortonworks/cloudbreak/commit/a876ae2ee2998c5eee6dbff91a2887013b61ed8a", "message": "CB-7477: Define API's for datalake and CB services to fasten the integration.\nAddressed review comments. Updated the actions.json with appropriate rights.", "committedDate": "2020-06-16T16:27:35Z", "type": "forcePushed"}, {"oid": "b7ac820f5c39b201ad8c1964228cb664d9b3472d", "url": "https://github.com/hortonworks/cloudbreak/commit/b7ac820f5c39b201ad8c1964228cb664d9b3472d", "message": "CB-7477: Define API's for datalake and CB services to fasten the integration.\nAddressed review comments. Updated the actions.json with appropriate rights.", "committedDate": "2020-06-16T16:44:36Z", "type": "commit"}, {"oid": "b7ac820f5c39b201ad8c1964228cb664d9b3472d", "url": "https://github.com/hortonworks/cloudbreak/commit/b7ac820f5c39b201ad8c1964228cb664d9b3472d", "message": "CB-7477: Define API's for datalake and CB services to fasten the integration.\nAddressed review comments. Updated the actions.json with appropriate rights.", "committedDate": "2020-06-16T16:44:36Z", "type": "forcePushed"}, {"oid": "591677307f8ee138d705ba5e47cea83cb7ae19f1", "url": "https://github.com/hortonworks/cloudbreak/commit/591677307f8ee138d705ba5e47cea83cb7ae19f1", "message": "CB-7477: Define API's for datalake and CB services to fasten the integration.\nfixed unit test failure", "committedDate": "2020-06-16T17:27:56Z", "type": "commit"}]}