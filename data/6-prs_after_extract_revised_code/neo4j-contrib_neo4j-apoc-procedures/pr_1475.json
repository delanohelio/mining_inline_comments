{"pr_number": 1475, "pr_title": "Only register with kernel if there are triggers", "pr_createdAt": "2020-04-14T15:01:25Z", "pr_url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1475", "timeline": [{"oid": "18256280a54b01ebe51f9804bf3951ccee6bbc83", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/18256280a54b01ebe51f9804bf3951ccee6bbc83", "message": "Only register with kernel if there are triggers\n\nThe kernel event handling creates a big expensive transaction snapshot\nfor every transaction if there are registered event handlers.\n\nTo avoid paying that overhead, unregister from the kernel if there\nare no triggers.\n\nThis works as a complement to the config option, so you can deploy\nlarge groups of databases with the config enabled but only pay the\noverhead on those databases that use trigger.\n\nThis is backporting the respective commit from 4.0 branch.", "committedDate": "2020-04-14T13:47:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyNDI2MA==", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1475#discussion_r408224260", "bodyText": "Should this be synchronized, in case multiple callers invoke procedures simultaneously?", "author": "jakewins", "createdAt": "2020-04-14T15:22:49Z", "path": "src/main/java/apoc/trigger/Trigger.java", "diffHunk": "@@ -148,80 +149,107 @@ public TriggerInfo toTriggerInfo(Map.Entry<String, Object> e) {\n     @Procedure(mode = Mode.WRITE)\n     @Description(\"list all installed triggers\")\n     public Stream<TriggerInfo> list() {\n-        return TriggerHandler.list().entrySet().stream()\n+        return TriggerHandler.getInstance().list().entrySet().stream()\n                 .map( (e) -> new TriggerInfo(e.getKey(),(String)e.getValue().get(\"kernelTransaction\"),(Map<String,Object>)e.getValue().get(\"selector\"), (Map<String, Object>) e.getValue().get(\"params\"),true, (Boolean) e.getValue().get(\"paused\")));\n     }\n \n     @Procedure(mode = Mode.WRITE)\n     @Description(\"CALL apoc.trigger.pause(name) | it pauses the trigger\")\n     public Stream<TriggerInfo> pause(@Name(\"name\")String name) {\n-        Map<String, Object> paused = TriggerHandler.paused(name);\n+        Map<String, Object> paused = TriggerHandler.getInstance().paused(name);\n \n         return Stream.of(new TriggerInfo(name,(String)paused.get(\"kernelTransaction\"), (Map<String,Object>) paused.get(\"selector\"), (Map<String,Object>) paused.get(\"params\"),true, true));\n     }\n \n     @Procedure(mode = Mode.WRITE)\n     @Description(\"CALL apoc.trigger.resume(name) | it resumes the paused trigger\")\n     public Stream<TriggerInfo> resume(@Name(\"name\")String name) {\n-        Map<String, Object> resume = TriggerHandler.resume(name);\n+        Map<String, Object> resume = TriggerHandler.getInstance().resume(name);\n \n         return Stream.of(new TriggerInfo(name,(String)resume.get(\"kernelTransaction\"), (Map<String,Object>) resume.get(\"selector\"), (Map<String,Object>) resume.get(\"params\"),true, false));\n     }\n \n     public static class TriggerHandler implements TransactionEventHandler {\n         public static final String APOC_TRIGGER = \"apoc.trigger\";\n-        static ConcurrentHashMap<String,Map<String,Object>> triggers = new ConcurrentHashMap(map(\"\",map()));\n-        private static GraphProperties properties;\n+        private final ConcurrentHashMap<String,Map<String,Object>> triggers = new ConcurrentHashMap(map(\"\",map()));\n+        private final GraphProperties properties;\n         private final Log log;\n \n         public static final String NOT_ENABLED_ERROR = \"Triggers have not been enabled.\" +\n                 \" Set 'apoc.trigger.enabled=true' in your neo4j.conf file located in the $NEO4J_HOME/conf/ directory.\";\n+        private final GraphDatabaseService db;\n+        private final AtomicBoolean registeredWithKernel = new AtomicBoolean(false);\n \n-        public TriggerHandler(GraphDatabaseAPI api, Log log) {\n+        private static TriggerHandler instance;\n+\n+        private TriggerHandler(GraphDatabaseAPI api, Log log) {\n             properties = api.getDependencyResolver().resolveDependency(EmbeddedProxySPI.class).newGraphPropertiesProxy();\n //            Pools.SCHEDULED.submit(() -> updateTriggers(null,null));\n             this.log = log;\n+            this.db = api;\n         }\n \n-        public static void checkEnabled() {\n+        public static TriggerHandler initialize(GraphDatabaseAPI api, Log log) {", "originalCommit": "18256280a54b01ebe51f9804bf3951ccee6bbc83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyNTMzMA==", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1475#discussion_r408225330", "bodyText": "Oop, nvm, only called from start()", "author": "jakewins", "createdAt": "2020-04-14T15:24:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyNDI2MA=="}], "type": "inlineReview", "revised_code": null}]}