{"pr_number": 1651, "pr_title": "db specific initializers", "pr_createdAt": "2020-09-05T12:41:21Z", "pr_url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1651", "timeline": [{"oid": "21567a0efd18ba4f60ba86a78107602f4552ba99", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/21567a0efd18ba4f60ba86a78107602f4552ba99", "message": "adding a junit test rule allowing to modify env settings\n\nThis is useful if testcases need to have different env settings. A nice way to declaratively test with different apoc settings.", "committedDate": "2020-09-05T11:56:29Z", "type": "commit"}, {"oid": "d4da1e169b7a9d0c1d92ae64aeedd8d4c64cd98d", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/d4da1e169b7a9d0c1d92ae64aeedd8d4c64cd98d", "message": "fixes #1644 - support for db specific initializers", "committedDate": "2020-09-05T12:26:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIzMjM3MA==", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1651#discussion_r484232370", "bodyText": "It's nice if you're deprecating things to add some info on what the replacement is:\ne.g.\n/**\n     * @deprecated\n     * This has been replaced by database-specific initialisers.\n     * Use apoc.initializer.<database name> instead.\n     */", "author": "eastlondoner", "createdAt": "2020-09-07T07:26:52Z", "path": "core/src/main/java/apoc/ApocConfig.java", "diffHunk": "@@ -57,7 +57,9 @@\n     public static final String APOC_CONFIG_JOBS_SCHEDULED_NUM_THREADS = \"apoc.jobs.scheduled.num_threads\";\n     public static final String APOC_CONFIG_JOBS_POOL_NUM_THREADS = \"apoc.jobs.pool.num_threads\";\n     public static final String APOC_CONFIG_JOBS_QUEUE_SIZE = \"apoc.jobs.queue.size\";\n-    public static final String APOC_CONFIG_INITIALIZER_CYPHER = \"apoc.initializer.cypher\";\n+    public static final String APOC_CONFIG_INITIALIZER = \"apoc.initializer\";\n+    @Deprecated", "originalCommit": "d4da1e169b7a9d0c1d92ae64aeedd8d4c64cd98d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI0MzMwOQ==", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1651#discussion_r484243309", "bodyText": "good catch, added your suggestions.", "author": "sarmbruster", "createdAt": "2020-09-07T07:45:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIzMjM3MA=="}], "type": "inlineReview", "revised_code": {"commit": "4de2174e09f3c19125d1a0edef98bc85fb5c187d", "chunk": "diff --git a/core/src/main/java/apoc/ApocConfig.java b/core/src/main/java/apoc/ApocConfig.java\nindex e7518586..ac29e8c5 100644\n--- a/core/src/main/java/apoc/ApocConfig.java\n+++ b/core/src/main/java/apoc/ApocConfig.java\n\n@@ -58,6 +58,12 @@ public class ApocConfig extends LifecycleAdapter {\n     public static final String APOC_CONFIG_JOBS_POOL_NUM_THREADS = \"apoc.jobs.pool.num_threads\";\n     public static final String APOC_CONFIG_JOBS_QUEUE_SIZE = \"apoc.jobs.queue.size\";\n     public static final String APOC_CONFIG_INITIALIZER = \"apoc.initializer\";\n+\n+    /**\n+     * @deprecated\n+     * This has been replaced by database-specific initialisers.\n+     * Use apoc.initializer.<database name> instead.\n+     */\n     @Deprecated\n     public static final String APOC_CONFIG_INITIALIZER_CYPHER = APOC_CONFIG_INITIALIZER + \".cypher\";\n \n"}}, {"oid": "4de2174e09f3c19125d1a0edef98bc85fb5c187d", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/4de2174e09f3c19125d1a0edef98bc85fb5c187d", "message": "document deprecation details", "committedDate": "2020-09-07T07:45:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI0ODc1Ng==", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1651#discussion_r484248756", "bodyText": "can we move this higher as a guard clause and just return from the method?\nalso can this whole collecting initializers go into a separate method?", "author": "jexp", "createdAt": "2020-09-07T07:51:10Z", "path": "core/src/main/java/apoc/cypher/CypherInitializer.java", "diffHunk": "@@ -46,23 +52,31 @@ public void available() {\n         Util.newDaemonThread(() -> {\n \n             try {\n-                awaitApocProceduresRegistered();\n+                final boolean isSystemDatabase = db.databaseName().equals(GraphDatabaseSettings.SYSTEM_DATABASE_NAME);\n+                if (!isSystemDatabase) {\n+                    awaitApocProceduresRegistered();\n+                }\n                 Configuration config = dependencyResolver.resolveDependency(ApocConfig.class).getConfig();\n \n-                TreeMap<String, String> initializers = Iterators.stream(config.getKeys(ApocConfig.APOC_CONFIG_INITIALIZER_CYPHER))\n-                        .collect(Collectors.toMap(k -> k, k -> config.getString(k),\n-                                (v1, v2) -> {\n-                                    throw new RuntimeException(String.format(\"Duplicate key for values %s and %s\", v1, v2));\n-                                },\n-                                TreeMap::new));\n+                TreeMap<String, String> initializers = new TreeMap<>();\n+\n+                config.getKeys(ApocConfig.APOC_CONFIG_INITIALIZER + \".\" + db.databaseName()).forEachRemaining(key -> initializers.put(key, config.getString(key)));\n+\n+                if (!isSystemDatabase) {", "originalCommit": "4de2174e09f3c19125d1a0edef98bc85fb5c187d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMzNzQxOA==", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1651#discussion_r484337418", "bodyText": "moving higher doesn't make a lot of sense IMO. We do want to execute initializers for any db (including system). Systemdb is just treated differently.\nCollecting initializers is now in a separate method, see my commit below.", "author": "sarmbruster", "createdAt": "2020-09-07T10:16:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI0ODc1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "fb7ad706d88ea4ac4c914576dbe5cfb5139300b4", "chunk": "diff --git a/core/src/main/java/apoc/cypher/CypherInitializer.java b/core/src/main/java/apoc/cypher/CypherInitializer.java\nindex 4b72a837..f85d3cf3 100644\n--- a/core/src/main/java/apoc/cypher/CypherInitializer.java\n+++ b/core/src/main/java/apoc/cypher/CypherInitializer.java\n\n@@ -50,7 +50,6 @@ public class CypherInitializer implements AvailabilityListener {\n         // we need to wait until apoc procs are registered\n         // unfortunately an AvailabilityListener is triggered before that\n         Util.newDaemonThread(() -> {\n-\n             try {\n                 final boolean isSystemDatabase = db.databaseName().equals(GraphDatabaseSettings.SYSTEM_DATABASE_NAME);\n                 if (!isSystemDatabase) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI0OTIwNg==", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1651#discussion_r484249206", "bodyText": "what is an example of this?", "author": "jexp", "createdAt": "2020-09-07T07:51:41Z", "path": "core/src/main/java/apoc/cypher/CypherInitializer.java", "diffHunk": "@@ -46,23 +52,31 @@ public void available() {\n         Util.newDaemonThread(() -> {\n \n             try {\n-                awaitApocProceduresRegistered();\n+                final boolean isSystemDatabase = db.databaseName().equals(GraphDatabaseSettings.SYSTEM_DATABASE_NAME);\n+                if (!isSystemDatabase) {\n+                    awaitApocProceduresRegistered();\n+                }\n                 Configuration config = dependencyResolver.resolveDependency(ApocConfig.class).getConfig();\n \n-                TreeMap<String, String> initializers = Iterators.stream(config.getKeys(ApocConfig.APOC_CONFIG_INITIALIZER_CYPHER))\n-                        .collect(Collectors.toMap(k -> k, k -> config.getString(k),\n-                                (v1, v2) -> {\n-                                    throw new RuntimeException(String.format(\"Duplicate key for values %s and %s\", v1, v2));\n-                                },\n-                                TreeMap::new));\n+                TreeMap<String, String> initializers = new TreeMap<>();\n+\n+                config.getKeys(ApocConfig.APOC_CONFIG_INITIALIZER + \".\" + db.databaseName()).forEachRemaining(key -> initializers.put(key, config.getString(key)));\n+\n+                if (!isSystemDatabase) {\n+                    config.getKeys(ApocConfig.APOC_CONFIG_INITIALIZER_CYPHER).forEachRemaining(key -> initializers.put(key, config.getString(key)));\n+                }\n \n                 for (Object initializer : initializers.values()) {\n                     String query = initializer.toString();\n-                    try {\n-                        db.executeTransactionally(query);\n-                        userLog.info(\"successfully initialized: \" + query);\n-                    } catch (Exception e) {\n-                        userLog.warn(\"error upon initialization, running: \" + query, e);\n+                    if (!query.isEmpty()) {\n+                        try {\n+                            // we need to apply a retry strategy here since in systemdb we potentially conflict with\n+                            // creating contraints which could cause our query to fail with a transient error.", "originalCommit": "4de2174e09f3c19125d1a0edef98bc85fb5c187d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI1MzgzMg==", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/1651#discussion_r484253832", "bodyText": "when not having the retry strategy I found that an initializer of apoc.initializer.system=create user dummy set password 'abc' resulted in a transaction failed since a concurrent transaction was setting up a constraint.", "author": "sarmbruster", "createdAt": "2020-09-07T07:56:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI0OTIwNg=="}], "type": "inlineReview", "revised_code": {"commit": "fb7ad706d88ea4ac4c914576dbe5cfb5139300b4", "chunk": "diff --git a/core/src/main/java/apoc/cypher/CypherInitializer.java b/core/src/main/java/apoc/cypher/CypherInitializer.java\nindex 4b72a837..f85d3cf3 100644\n--- a/core/src/main/java/apoc/cypher/CypherInitializer.java\n+++ b/core/src/main/java/apoc/cypher/CypherInitializer.java\n\n@@ -50,7 +50,6 @@ public class CypherInitializer implements AvailabilityListener {\n         // we need to wait until apoc procs are registered\n         // unfortunately an AvailabilityListener is triggered before that\n         Util.newDaemonThread(() -> {\n-\n             try {\n                 final boolean isSystemDatabase = db.databaseName().equals(GraphDatabaseSettings.SYSTEM_DATABASE_NAME);\n                 if (!isSystemDatabase) {\n"}}, {"oid": "fb7ad706d88ea4ac4c914576dbe5cfb5139300b4", "url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/fb7ad706d88ea4ac4c914576dbe5cfb5139300b4", "message": "refactor collecting initializers into a separate method", "committedDate": "2020-09-07T10:13:46Z", "type": "commit"}]}