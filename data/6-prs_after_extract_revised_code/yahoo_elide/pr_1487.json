{"pr_number": 1487, "pr_title": "Add SQLDialect implementations and tests.", "pr_createdAt": "2020-08-10T16:58:35Z", "pr_url": "https://github.com/yahoo/elide/pull/1487", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2MzcwMw==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468163703", "bodyText": "This function should be merged with the one above.  We can change the name to explain and remove the other function.  This will require a few other changes as well.", "author": "aklish", "createdAt": "2020-08-10T20:21:27Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -200,4 +201,14 @@ public Table getTable(String classAlias) {\n      * @return SQL string corresponding to the given query\n      */\n     public abstract String explain(Query query);\n+\n+    /**\n+     * Builds the specified {@link Query} against a specific persistent storage, which understand the provided\n+     * {@link Query}.\n+     *\n+     * @param query The query customized for a particular persistent storage or storage client\n+     * @return query string\n+     */\n+    public abstract List<String> showQueries(Query query);", "originalCommit": "1c611aad0de02a9466368be524fbb95bde38c049", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b9c3bf41b64b32e2593b908f8a4f6b44761ebcd", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 0f8de380b..6be5ec359 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n\n@@ -196,19 +196,11 @@ public abstract class QueryEngine {\n     }\n \n     /**\n-     * Explains the specified query passed in\n-     * @param query The query customized for a particular persistent storage or storage client\n-     * @return SQL string corresponding to the given query\n-     */\n-    public abstract String explain(Query query);\n-\n-    /**\n-     * Builds the specified {@link Query} against a specific persistent storage, which understand the provided\n-     * {@link Query}.\n+     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n      *\n      * @param query The query customized for a particular persistent storage or storage client\n-     * @return query string\n+     * @return List of SQL string(s) corresponding to the given query\n      */\n-    public abstract List<String> showQueries(Query query);\n+    public abstract List<String> explain(Query query);\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NDk3OQ==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468164979", "bodyText": "All of these classes need the copyright statement added and also javadoc at the class level so the linter doesn't complain.", "author": "aklish", "createdAt": "2020-08-10T20:24:04Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects;", "originalCommit": "1c611aad0de02a9466368be524fbb95bde38c049", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eaac789a20b652b6281921827a7da418570da71", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 582c38099..be2e35638 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n\n@@ -1,5 +1,13 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n package com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects;\n \n+/**\n+ * Common code for {@link SQLDialect} implementations\n+ */\n public abstract class AbstractSqlDialect implements SQLDialect {\n \n     public String generateCountDistinctClause(String dimensions){\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NzM2Mw==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468167363", "bodyText": "No asterisk imports.  I wonder if the checkstyle is not enabled on this code?  It ought to be.", "author": "aklish", "createdAt": "2020-08-10T20:28:54Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/PrestoShowQueriesTest.java", "diffHunk": "@@ -0,0 +1,309 @@\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n+\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+import com.yahoo.elide.datastores.aggregation.framework.SQLUnitTest;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialectFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.*;", "originalCommit": "1c611aad0de02a9466368be524fbb95bde38c049", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5OTU4MA==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468199580", "bodyText": "Yeah, I don't think codacy complained about this one. Do new files need to be added to a config to get checked?", "author": "HarveyC3", "createdAt": "2020-08-10T21:35:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NzM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIxNDQ3Mg==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468214472", "bodyText": "Not codacy - but checkstyle.  All the elide repos have a checkstyle plugin that gets run during the compile phase.  The build should fail if there is a problem.", "author": "aklish", "createdAt": "2020-08-10T22:11:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NzM2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8312841079c41f9485625109db19458c3fb00c9d", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/PrestoShowQueriesTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/PrestoShowQueriesTest.java\nindex eeaf7f314..ecb60c655 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/PrestoShowQueriesTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/PrestoShowQueriesTest.java\n\n@@ -1,12 +1,22 @@\n package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n \n+import com.google.common.collect.Lists;\n+import com.yahoo.elide.core.Path;\n import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.Operator;\n import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+import com.yahoo.elide.core.pagination.PaginationImpl;\n+import com.yahoo.elide.core.sort.SortingImpl;\n+import com.yahoo.elide.datastores.aggregation.example.PlayerStats;\n import com.yahoo.elide.datastores.aggregation.framework.SQLUnitTest;\n+import com.yahoo.elide.datastores.aggregation.metadata.enums.TimeGrain;\n import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialect;\n import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialectFactory;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.HiveDialect;\n+import com.yahoo.elide.request.Sorting;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3NTM1OA==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468175358", "bodyText": "Instead of having a static method and map that binds these values to their respective queries - the enumeration itself can have arguments for each value.  I would make a QueryProvider (function that takes no arguments and returns a query) as the argument to each enumeration value.", "author": "aklish", "createdAt": "2020-08-10T20:45:02Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,", "originalCommit": "1c611aad0de02a9466368be524fbb95bde38c049", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwOTQ5Mg==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468209492", "bodyText": "Do you mean something like this:\nprotected enum TestQuery {\n    WHERE_METRICS_ONLY {\n        public Query QueryProvider() { return QueryBuilder....build(); }\n     }\n     ...\n     public Query QueryProvider();\n}", "author": "HarveyC3", "createdAt": "2020-08-10T21:58:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3NTM1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIxNjczMw==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468216733", "bodyText": "Similar idea.  I was thinking something like:\nprotected enum TestQuery {\n    WHERE_METRICS_ONLY( () -> { return QueryBuilder....build(); }),\n     ...\n\n    private Provider<Query> queryProvider;\n}", "author": "aklish", "createdAt": "2020-08-10T22:17:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3NTM1OA=="}], "type": "inlineReview", "revised_code": {"commit": "8312841079c41f9485625109db19458c3fb00c9d", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex fdb7e2f07..3d9ffc41b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n\n@@ -98,8 +94,6 @@ public abstract class SQLUnitTest {\n     }\n     protected static Map<TestQueryName, Query> testQueries;\n \n-    protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n-\n     public static void init(SQLDialect sqlDialect) {\n         emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n         EntityManager em = emf.createEntityManager();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5MDQyNQ==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468190425", "bodyText": "What about pagination offset and limit?", "author": "aklish", "createdAt": "2020-08-10T21:16:01Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,\n+        WHERE_DIMS_ONLY,\n+        WHERE_METRICS_AND_DIMS,\n+        WHERE_METRICS_OR_DIMS,\n+        WHERE_METRICS_AGGREGATION,\n+        HAVING_METRICS_ONLY,\n+        HAVING_DIMS_ONLY,\n+        HAVING_METRICS_AND_DIMS,\n+        HAVING_METRICS_OR_DIMS,\n+        PAGINATION_TOTAL,", "originalCommit": "1c611aad0de02a9466368be524fbb95bde38c049", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMTk2Nw==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468201967", "bodyText": "how should the queries differ for those?", "author": "HarveyC3", "createdAt": "2020-08-10T21:41:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5MDQyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIxNDk0NQ==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468214945", "bodyText": "There are three things you can ask for pagination:\n\ntotals - total number of rows\noffset - starting row\nlimit - number of rows returned in the response.\n\nEach dialect will have a different way of paginating offset and limit.", "author": "aklish", "createdAt": "2020-08-10T22:12:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5MDQyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "8312841079c41f9485625109db19458c3fb00c9d", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex fdb7e2f07..3d9ffc41b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n\n@@ -98,8 +94,6 @@ public abstract class SQLUnitTest {\n     }\n     protected static Map<TestQueryName, Query> testQueries;\n \n-    protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n-\n     public static void init(SQLDialect sqlDialect) {\n         emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n         EntityManager em = emf.createEntityManager();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5Mjc2Nw==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468192767", "bodyText": "Not sure what this means.  the group by is in the select isn't it?", "author": "aklish", "createdAt": "2020-08-10T21:20:57Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,\n+        WHERE_DIMS_ONLY,\n+        WHERE_METRICS_AND_DIMS,\n+        WHERE_METRICS_OR_DIMS,\n+        WHERE_METRICS_AGGREGATION,\n+        HAVING_METRICS_ONLY,\n+        HAVING_DIMS_ONLY,\n+        HAVING_METRICS_AND_DIMS,\n+        HAVING_METRICS_OR_DIMS,\n+        PAGINATION_TOTAL,\n+        SORT_METRIC_ASC,\n+        SORT_METRIC_DESC,\n+        SORT_DIM_DESC,\n+        SORT_METRIC_AND_DIM_DESC,\n+        SUBQUERY,\n+        GROUP_BY_DIMENSION_NOT_IN_SELECT,", "originalCommit": "1c611aad0de02a9466368be524fbb95bde38c049", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMjg2Mw==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468202863", "bodyText": "The intent is to have a field in the GROUP BY that's not part of the SELECT. I'll double check what's going wrong with this one.", "author": "HarveyC3", "createdAt": "2020-08-10T21:43:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5Mjc2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIxNTA2MQ==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468215061", "bodyText": "I think it is part of the select though.", "author": "aklish", "createdAt": "2020-08-10T22:12:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5Mjc2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2NzM5Nw==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r469567397", "bodyText": "I changed this from GROUP BY to ORDER BY, which doesn't push the field into the SELECT.", "author": "HarveyC3", "createdAt": "2020-08-12T21:51:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5Mjc2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8312841079c41f9485625109db19458c3fb00c9d", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex fdb7e2f07..3d9ffc41b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n\n@@ -98,8 +94,6 @@ public abstract class SQLUnitTest {\n     }\n     protected static Map<TestQueryName, Query> testQueries;\n \n-    protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n-\n     public static void init(SQLDialect sqlDialect) {\n         emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n         EntityManager em = emf.createEntityManager();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5MzQzOA==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468193438", "bodyText": "I think we ought to add a few tests for time dimensions - time dimensions in WHERE, time dimensions in HAVING, and time dimensions in GROUP BY", "author": "aklish", "createdAt": "2020-08-10T21:22:28Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,\n+        WHERE_DIMS_ONLY,\n+        WHERE_METRICS_AND_DIMS,\n+        WHERE_METRICS_OR_DIMS,\n+        WHERE_METRICS_AGGREGATION,\n+        HAVING_METRICS_ONLY,\n+        HAVING_DIMS_ONLY,\n+        HAVING_METRICS_AND_DIMS,\n+        HAVING_METRICS_OR_DIMS,\n+        PAGINATION_TOTAL,", "originalCommit": "1c611aad0de02a9466368be524fbb95bde38c049", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8312841079c41f9485625109db19458c3fb00c9d", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex fdb7e2f07..3d9ffc41b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n\n@@ -98,8 +94,6 @@ public abstract class SQLUnitTest {\n     }\n     protected static Map<TestQueryName, Query> testQueries;\n \n-    protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n-\n     public static void init(SQLDialect sqlDialect) {\n         emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n         EntityManager em = emf.createEntityManager();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5NDMyMQ==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468194321", "bodyText": "It would be good to break out most of these feature tests by table and by subquery.  By features, I mean:\nWHERE\nHAVING\nTIME Dimensions\nPAGINATION\nSORTING", "author": "aklish", "createdAt": "2020-08-10T21:24:26Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +76,31 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQueryName {\n+        WHERE_METRICS_ONLY,\n+        WHERE_DIMS_ONLY,\n+        WHERE_METRICS_AND_DIMS,\n+        WHERE_METRICS_OR_DIMS,\n+        WHERE_METRICS_AGGREGATION,\n+        HAVING_METRICS_ONLY,\n+        HAVING_DIMS_ONLY,\n+        HAVING_METRICS_AND_DIMS,\n+        HAVING_METRICS_OR_DIMS,\n+        PAGINATION_TOTAL,\n+        SORT_METRIC_ASC,\n+        SORT_METRIC_DESC,\n+        SORT_DIM_DESC,\n+        SORT_METRIC_AND_DIM_DESC,\n+        SUBQUERY,", "originalCommit": "1c611aad0de02a9466368be524fbb95bde38c049", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNDIwNg==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468204206", "bodyText": "Is your ask to create two versions of the existing tests - 1 for table and 1 for subquery? Or just to update the names to clearly show whether they're table or subquery tests?", "author": "HarveyC3", "createdAt": "2020-08-10T21:46:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5NDMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIxNTI2MQ==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r468215261", "bodyText": "The former - I think we should test most features for both tables and subqueries.", "author": "aklish", "createdAt": "2020-08-10T22:13:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5NDMyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "8312841079c41f9485625109db19458c3fb00c9d", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex fdb7e2f07..3d9ffc41b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n\n@@ -98,8 +94,6 @@ public abstract class SQLUnitTest {\n     }\n     protected static Map<TestQueryName, Query> testQueries;\n \n-    protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n-\n     public static void init(SQLDialect sqlDialect) {\n         emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n         EntityManager em = emf.createEntityManager();\n"}}, {"oid": "8312841079c41f9485625109db19458c3fb00c9d", "url": "https://github.com/yahoo/elide/commit/8312841079c41f9485625109db19458c3fb00c9d", "message": "Add SQLDialect implementations and tests.", "committedDate": "2020-08-13T21:04:42Z", "type": "commit"}, {"oid": "a02bbb25eaf329dc79b81eccbd87c92c7fcd39ea", "url": "https://github.com/yahoo/elide/commit/a02bbb25eaf329dc79b81eccbd87c92c7fcd39ea", "message": "Cleanup based on codacy feedback", "committedDate": "2020-08-13T21:04:42Z", "type": "commit"}, {"oid": "763f3ad133a7919f1723b71083a3bb1e5cf26539", "url": "https://github.com/yahoo/elide/commit/763f3ad133a7919f1723b71083a3bb1e5cf26539", "message": "fix * import", "committedDate": "2020-08-13T21:04:42Z", "type": "commit"}, {"oid": "6b9c3bf41b64b32e2593b908f8a4f6b44761ebcd", "url": "https://github.com/yahoo/elide/commit/6b9c3bf41b64b32e2593b908f8a4f6b44761ebcd", "message": "Merge showQueries() into explain()", "committedDate": "2020-08-13T21:04:42Z", "type": "commit"}, {"oid": "7eaac789a20b652b6281921827a7da418570da71", "url": "https://github.com/yahoo/elide/commit/7eaac789a20b652b6281921827a7da418570da71", "message": "Add copyright statements and class javadoc entries", "committedDate": "2020-08-13T21:04:42Z", "type": "commit"}, {"oid": "55a481db9409ee59162772ac179fc3132f971490", "url": "https://github.com/yahoo/elide/commit/55a481db9409ee59162772ac179fc3132f971490", "message": "Remove * import in PrestoExplainQueryTest", "committedDate": "2020-08-13T21:04:42Z", "type": "commit"}, {"oid": "395ee7101ad46e383058ef8e67e39e680d86fcf3", "url": "https://github.com/yahoo/elide/commit/395ee7101ad46e383058ef8e67e39e680d86fcf3", "message": "Rework TestQuery enum.\nChange GROUP_BY_NOT_IN_SELECT to ORDER_BY_NOT_IN_SELECT.", "committedDate": "2020-08-13T21:04:42Z", "type": "commit"}, {"oid": "80b8c09756aefa2090d0ae3110e1a210ea1239dd", "url": "https://github.com/yahoo/elide/commit/80b8c09756aefa2090d0ae3110e1a210ea1239dd", "message": "Fix checkstyle errors", "committedDate": "2020-08-13T21:04:42Z", "type": "commit"}, {"oid": "462e8aec1f690a68f428c4ea47a804380e8a8369", "url": "https://github.com/yahoo/elide/commit/462e8aec1f690a68f428c4ea47a804380e8a8369", "message": "Update QueryEngine.java", "committedDate": "2020-08-13T21:21:05Z", "type": "commit"}, {"oid": "462e8aec1f690a68f428c4ea47a804380e8a8369", "url": "https://github.com/yahoo/elide/commit/462e8aec1f690a68f428c4ea47a804380e8a8369", "message": "Update QueryEngine.java", "committedDate": "2020-08-13T21:21:05Z", "type": "forcePushed"}, {"oid": "75694576e6dc72914350ade3f9c6dfea75b997e0", "url": "https://github.com/yahoo/elide/commit/75694576e6dc72914350ade3f9c6dfea75b997e0", "message": "Add setHighScoreNoAgg() in PlayerStats.java", "committedDate": "2020-08-17T15:56:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA3MjYzOA==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r473072638", "bodyText": "I would make a new static method for parsing filter expressions that throws an Illegal State or Argument exception.  Codacy doesn't like runtime exceptions.", "author": "aklish", "createdAt": "2020-08-19T14:28:18Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -62,7 +83,225 @@\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQuery {\n+        WHERE_METRICS_ONLY (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n+                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                    .whereFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n+                            Operator.GT,\n+                            Arrays.asList(9000)))\n+                    .build();\n+        }),\n+        WHERE_DIMS_ONLY (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .whereFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                            Operator.NOTNULL,\n+                            new ArrayList<Object>()))\n+                    .build();\n+        }),\n+        WHERE_METRICS_AND_DIMS (() -> {\n+            FilterPredicate ratingFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                    Operator.NOTNULL, new ArrayList<Object>());\n+            FilterPredicate highScoreFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .whereFilter(new AndFilterExpression(ratingFilter, highScoreFilter))\n+                    .build();\n+        }),\n+        WHERE_METRICS_OR_DIMS (() -> {\n+            FilterPredicate ratingFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                    Operator.NOTNULL, new ArrayList<Object>());\n+            FilterPredicate highScoreFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .whereFilter(new OrFilterExpression(ratingFilter, highScoreFilter))\n+                    .build();\n+        }),\n+        WHERE_METRICS_AGGREGATION (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                    .whereFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                            Operator.GT,\n+                            Arrays.asList(9000)))\n+                    .build();\n+        }),\n+        HAVING_METRICS_ONLY (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n+                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                    .havingFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n+                            Operator.GT,\n+                            Arrays.asList(9000)))\n+                    .build();\n+        }),\n+        HAVING_DIMS_ONLY (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .havingFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                            Operator.NOTNULL,\n+                            new ArrayList<Object>()))\n+                    .build();\n+        }),\n+        HAVING_METRICS_AND_DIMS (() -> {\n+            FilterPredicate ratingFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                    Operator.NOTNULL, new ArrayList<Object>());\n+            FilterPredicate highScoreFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .havingFilter(new AndFilterExpression(ratingFilter, highScoreFilter))\n+                    .build();\n+        }),\n+        HAVING_METRICS_OR_DIMS (() -> {\n+            FilterPredicate ratingFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                    Operator.NOTNULL, new ArrayList<Object>());\n+            FilterPredicate highScoreFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .havingFilter(new OrFilterExpression(ratingFilter, highScoreFilter))\n+                    .build();\n+        }),\n+        PAGINATION_TOTAL (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.DAY))\n+                    .pagination(new ImmutablePagination(0, 1, false, true))\n+                    .build();\n+        }),\n+        SORT_METRIC_ASC (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.asc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        SORT_METRIC_DESC (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.desc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        SORT_DIM_DESC (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        SORT_METRIC_AND_DIM_DESC (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"highScore\", Sorting.SortOrder.desc);\n+            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        SUBQUERY (() -> {\n+            Table playerStatsViewTable = engine.getTable(\"playerStatsView\");\n+            return Query.builder()\n+                    .table(playerStatsViewTable)\n+                    .metric(invoke(playerStatsViewTable.getMetric(\"highScore\")))\n+                    .build();\n+        }),\n+        ORDER_BY_DIMENSION_NOT_IN_SELECT (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        COMPLICATED (() -> {\n+            // Sorting\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.desc);\n+            // WHERE filter\n+            FilterPredicate predicate = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            try {\n+                return Query.builder()\n+                        .table(playerStatsTable)\n+                        .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                        .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                        .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.DAY))\n+                        .pagination(new ImmutablePagination(0, 1, false, true))\n+                        .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                        .whereFilter(predicate)\n+                        // force a join to look up countryIsoCode\n+                        .havingFilter(filterParser.parseFilterExpression(\"countryIsoCode==USA\",", "originalCommit": "75694576e6dc72914350ade3f9c6dfea75b997e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c67bc4eb6528e75befda6214c9b2f5736d266b0", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 99ca73508..7a3c1d1fc 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n\n@@ -270,22 +271,18 @@ public abstract class SQLUnitTest {\n                     new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n                     Operator.GT,\n                     Arrays.asList(9000));\n-            try {\n-                return Query.builder()\n-                        .table(playerStatsTable)\n-                        .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                        .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                        .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.DAY))\n-                        .pagination(new ImmutablePagination(0, 1, false, true))\n-                        .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n-                        .whereFilter(predicate)\n-                        // force a join to look up countryIsoCode\n-                        .havingFilter(filterParser.parseFilterExpression(\"countryIsoCode==USA\",\n-                                PlayerStats.class, false))\n-                        .build();\n-            } catch (ParseException pe) {\n-                throw new RuntimeException(pe);\n-            }\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.DAY))\n+                    .pagination(new ImmutablePagination(0, 1, false, true))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .whereFilter(predicate)\n+                    // force a join to look up countryIsoCode\n+                    .havingFilter(parseFilterExpression(\"countryIsoCode==USA\",\n+                            PlayerStats.class, false))\n+                    .build();\n         });\n \n         private Provider<Query> queryProvider;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwNzI3MA==", "url": "https://github.com/yahoo/elide/pull/1487#discussion_r474207270", "bodyText": "We should have comments for the interface methods", "author": "aklish", "createdAt": "2020-08-20T19:04:51Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialect.java", "diffHunk": "@@ -0,0 +1,16 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects;\n+\n+/**\n+ * Interface for SQL Dialects used to customize SQL queries for specific persistent storage.\n+ */\n+public interface SQLDialect {\n+\n+    String getDialectType();", "originalCommit": "75694576e6dc72914350ade3f9c6dfea75b997e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c67bc4eb6528e75befda6214c9b2f5736d266b0", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialect.java\nindex a1d2598b0..d107671bf 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialect.java\n\n@@ -10,7 +10,16 @@ package com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects;\n  */\n public interface SQLDialect {\n \n+    /**\n+     * Returns the name of the Dialect.\n+     * @return dialect name.\n+     */\n     String getDialectType();\n \n+    /**\n+     * Generates an SQL clause that requests the count of distinct values for the input dimensions.\n+     * @param dimensions for which to request a distinct count.\n+     * @return the SQL clause as a string.\n+     */\n     String generateCountDistinctClause(String dimensions);\n }\n"}}, {"oid": "0c67bc4eb6528e75befda6214c9b2f5736d266b0", "url": "https://github.com/yahoo/elide/commit/0c67bc4eb6528e75befda6214c9b2f5736d266b0", "message": "Add method comments to SQLDialect. Don't throw RuntimeException in SQLUnitTest.", "committedDate": "2020-08-21T16:01:26Z", "type": "commit"}]}