{"pr_number": 1291, "pr_title": "Issue 1197 add memberof operator", "pr_createdAt": "2020-04-27T20:19:52Z", "pr_url": "https://github.com/yahoo/elide/pull/1291", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0MTc5OQ==", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416141799", "bodyText": "There is a method in Path to get the last element.", "author": "aklish", "createdAt": "2020-04-27T20:55:23Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/FilterPredicate.java", "diffHunk": "@@ -59,6 +59,12 @@ public static boolean toManyInPathExceptLastPathElement(EntityDictionary diction\n                 .anyMatch(RelationshipType::isToMany);\n     }\n \n+    public static boolean checkLastPathElementType(EntityDictionary dictionary, Path path, Class<?> clz) {\n+        int pathLength = path.getPathElements().size();\n+        PathElement lastPathElement = path.getPathElements().get(pathLength - 1);", "originalCommit": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0NDQ0NA==", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416144444", "bodyText": "Check out in the same file:\n    public static boolean toManyInPath(EntityDictionary dictionary, Path path) {\n        return path.getPathElements().stream()\n                .map(element -> dictionary.getRelationshipType(element.getType(), element.getFieldName()))\n                .anyMatch(RelationshipType::isToMany);\n    }\n\n    public static boolean toManyInPathExceptLastPathElement(EntityDictionary dictionary, Path path) {\n        int pathLength = path.getPathElements().size();\n        return path.getPathElements().stream()\n                .limit(pathLength - 1)\n                .map(element -> dictionary.getRelationshipType(element.getType(), element.getFieldName()))\n                .anyMatch(RelationshipType::isToMany);\n    }\nLet's add a method that looks like one of these (toManyInLastPathElement):", "author": "aklish", "createdAt": "2020-04-27T20:59:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0MTc5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3ec37984a60ec9cb46f2e47df6af95aad887509c", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/filter/FilterPredicate.java b/elide-core/src/main/java/com/yahoo/elide/core/filter/FilterPredicate.java\nindex ceb127852..3b7be3937 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/filter/FilterPredicate.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/filter/FilterPredicate.java\n\n@@ -59,12 +59,6 @@ public class FilterPredicate implements FilterExpression, Function<RequestScope,\n                 .anyMatch(RelationshipType::isToMany);\n     }\n \n-    public static boolean checkLastPathElementType(EntityDictionary dictionary, Path path, Class<?> clz) {\n-        int pathLength = path.getPathElements().size();\n-        PathElement lastPathElement = path.getPathElements().get(pathLength - 1);\n-        return clz.isAssignableFrom(dictionary.getType(lastPathElement.getType(), lastPathElement.getFieldName()));\n-    }\n-\n     public FilterPredicate(PathElement pathElement, Operator op, List<Object> values) {\n         this(new Path(Collections.singletonList(pathElement)), op, values);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0OTcyMg==", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416149722", "bodyText": "coerce into val.getClass().  We probably want to support lists of numbers too.", "author": "aklish", "createdAt": "2020-04-27T21:07:55Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -350,6 +366,25 @@ public static Operator fromString(final String string) {\n         };\n     }\n \n+    private static <T> Predicate<T> hasMember(String field, List<Object> values, RequestScope requestScope) {\n+        return (T entity) -> {\n+            if (values.size() != 1) {\n+                throw new InvalidPredicateException(\"HasMember can only take one argument\");\n+            }\n+            Object val = getFieldValue(entity, field, requestScope);\n+            String filterStr = CoerceUtil.coerce(values.get(0), String.class);", "originalCommit": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNjUxMw==", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416906513", "bodyText": "Object val will be an instance of Collection. To get the parameterized type of collection, I think we need to iterate over the path and get paremeterizedType from entityDict. I am not sure how to get parameterized type from Collection object", "author": "Chandrasekar-Rajasekar", "createdAt": "2020-04-28T20:37:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0OTcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4NjI2Mw==", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r418286263", "bodyText": "You are right, we'll need to iterate over it.\nAnother alternative is to convert field into a Path object in Elide.  That will do all the type conversion for you.", "author": "aklish", "createdAt": "2020-04-30T21:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0OTcyMg=="}], "type": "inlineReview", "revised_code": {"commit": "22cb18170753dfb2954e1ba3896706e6b4debf6b", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java b/elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java\nindex 5b41497d5..dffc7071c 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java\n\n@@ -366,12 +367,12 @@ public enum Operator {\n         };\n     }\n \n-    private static <T> Predicate<T> hasMember(String field, List<Object> values, RequestScope requestScope) {\n+    private static <T> Predicate<T> hasMember(Path fieldPath, List<Object> values, RequestScope requestScope) {\n         return (T entity) -> {\n             if (values.size() != 1) {\n                 throw new InvalidPredicateException(\"HasMember can only take one argument\");\n             }\n-            Object val = getFieldValue(entity, field, requestScope);\n+            Object val = getFieldValue(entity, fieldPath, requestScope);\n             String filterStr = CoerceUtil.coerce(values.get(0), String.class);\n             if (val == null) { return false; }\n             if (val instanceof Collection<?>) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1MDgyMg==", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416150822", "bodyText": "This check seems redundant with the validation logic below.  Do we also need this check?", "author": "aklish", "createdAt": "2020-04-27T21:09:52Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/DefaultFilterDialect.java", "diffHunk": "@@ -111,12 +112,19 @@ public FilterExpression parseGlobalExpression(String path, MultivaluedMap<String\n                 throw new ParseException(String.format(\"Invalid predicate: %s\", filterPredicate));\n             }\n \n+            if ((filterPredicate.getOperator().equals(Operator.HASMEMBER)", "originalCommit": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE3MDYwOQ==", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416170609", "bodyText": "This check is for Global Filter. The validation logic below is for the typed filter. Previously we did not have toMany relationship check for global filter. So I decided to include only Iscollection check for global filter.\nWithout this check in global filter, we allow filter expr like book?filter=title=hasmember='1' to pass through and jpql rejects these statement.", "author": "Chandrasekar-Rajasekar", "createdAt": "2020-04-27T21:44:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1MDgyMg=="}], "type": "inlineReview", "revised_code": {"commit": "3ec37984a60ec9cb46f2e47df6af95aad887509c", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/DefaultFilterDialect.java b/elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/DefaultFilterDialect.java\nindex 4ac9d7d44..5b7888145 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/DefaultFilterDialect.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/DefaultFilterDialect.java\n\n@@ -112,19 +111,12 @@ public class DefaultFilterDialect implements JoinFilterDialect, SubqueryFilterDi\n                 throw new ParseException(String.format(\"Invalid predicate: %s\", filterPredicate));\n             }\n \n-            if ((filterPredicate.getOperator().equals(Operator.HASMEMBER)\n-                    || filterPredicate.getOperator().equals(Operator.HASNOMEMBER))\n-                && !FilterPredicate.checkLastPathElementType(dictionary, filterPredicate.getPath(), Collection.class)) {\n-                throw new ParseException(\"Invalid Path: Last Path Element has to be a collection type\");\n-            }\n-\n             if (joinedExpression == null) {\n                 joinedExpression = filterPredicate;\n             } else {\n                 joinedExpression = new AndFilterExpression(joinedExpression, filterPredicate);\n             }\n         }\n-\n         return joinedExpression;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1Mjk0Ng==", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416152946", "bodyText": "Can we remove the local variable here?", "author": "aklish", "createdAt": "2020-04-27T21:13:29Z", "path": "elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/filter/FilterTranslator.java", "diffHunk": "@@ -170,6 +172,21 @@\n             return String.format(\"%s IS NOT EMPTY\", columnAlias);\n         });\n \n+        operatorGenerators.put(HASMEMBER, (columnAlias, params) -> {\n+            Preconditions.checkArgument(params.size() == 1);\n+            String x =  String.format(\"%s MEMBER OF %s\",", "originalCommit": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80d22b78686e239dca0e205ee82917b1928cb21d", "chunk": "diff --git a/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/filter/FilterTranslator.java b/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/filter/FilterTranslator.java\nindex 0acdf5496..48089f09b 100644\n--- a/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/filter/FilterTranslator.java\n+++ b/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/filter/FilterTranslator.java\n\n@@ -174,10 +174,9 @@ public class FilterTranslator implements FilterOperation<String> {\n \n         operatorGenerators.put(HASMEMBER, (columnAlias, params) -> {\n             Preconditions.checkArgument(params.size() == 1);\n-            String x =  String.format(\"%s MEMBER OF %s\",\n+            return String.format(\"%s MEMBER OF %s\",\n                     params.get(0).getPlaceholder(),\n                     columnAlias);\n-            return x;\n         });\n \n         operatorGenerators.put(HASNOMEMBER, (columnAlias, params) -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1NTQ3OQ==", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r416155479", "bodyText": "There is a much cleaner way to do these comparisons with hamcrest Matchers.  There are some good examples in PaginationIT.", "author": "aklish", "createdAt": "2020-04-27T21:18:02Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java", "diffHunk": "@@ -1654,6 +1655,146 @@ void testExceptionOnEmptyOperator() throws IOException {\n \n     }\n \n+    @Test\n+    @Tag(\"memberOfOperation\")\n+    void testMemberOfOnAttributes() throws IOException {\n+        JsonNode result;\n+        String filterString = \"Booker Prize\";\n+        Set<JsonNode> awardBook = new HashSet<>();\n+        Set<JsonNode> nullNedAwardBook = new HashSet<>();\n+\n+\n+        // * Filter On Root Entity *\n+        for (JsonNode book : books.get(\"data\")) {\n+            Iterator<JsonNode> awards = book.get(\"attributes\").get(\"awards\").elements();\n+            while (awards.hasNext()) {\n+                if (awards.next().asText().equals(filterString)) {\n+                    awardBook.add(book.get(\"id\"));\n+                    break;\n+                }\n+            }\n+        }\n+        // Test Default filter type on Root Entity\n+        result = getAsNode(String.format(\"/book?filter[book.awards][hasmember]=%s\", filterString));\n+        assertEquals(awardBook.size(), result.get(\"data\").size());\n+        for (JsonNode book : result.get(\"data\")) {\n+            assertTrue(awardBook.contains(book.get(\"id\")));", "originalCommit": "f9833baed7c4cf4f0259f6b380a6360d5b027f7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ec37984a60ec9cb46f2e47df6af95aad887509c", "chunk": "diff --git a/elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java b/elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java\nindex 76f5bb59f..e74173689 100644\n--- a/elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java\n+++ b/elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java\n\n@@ -1656,7 +1670,7 @@ public class FilterIT extends IntegrationTest {\n     }\n \n     @Test\n-    @Tag(\"memberOfOperation\")\n+    @Tag(\"memberOfAttributeCollection\")\n     void testMemberOfOnAttributes() throws IOException {\n         JsonNode result;\n         String filterString = \"Booker Prize\";\n"}}, {"oid": "c9b92444fd95a5f214154e98f311d73dbad6250c", "url": "https://github.com/yahoo/elide/commit/c9b92444fd95a5f214154e98f311d73dbad6250c", "message": "Allow memberof operation for only attributes and collection types", "committedDate": "2020-04-27T22:11:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4MzU1Mw==", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r418283553", "bodyText": "Can we rename this method to something more specific about what it's checking?\nHow about isLastPathElementAssignableFrom", "author": "aklish", "createdAt": "2020-04-30T20:55:41Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/FilterPredicate.java", "diffHunk": "@@ -59,6 +59,15 @@ public static boolean toManyInPathExceptLastPathElement(EntityDictionary diction\n                 .anyMatch(RelationshipType::isToMany);\n     }\n \n+    public static boolean checkLastPathElementType(EntityDictionary dictionary, Path path, Class<?> clz) {", "originalCommit": "3403e4c865c0912cb8a40265e8b4ba64991df703", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ec37984a60ec9cb46f2e47df6af95aad887509c", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/filter/FilterPredicate.java b/elide-core/src/main/java/com/yahoo/elide/core/filter/FilterPredicate.java\nindex d1d1ce0f9..3b7be3937 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/filter/FilterPredicate.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/filter/FilterPredicate.java\n\n@@ -59,15 +59,6 @@ public class FilterPredicate implements FilterExpression, Function<RequestScope,\n                 .anyMatch(RelationshipType::isToMany);\n     }\n \n-    public static boolean checkLastPathElementType(EntityDictionary dictionary, Path path, Class<?> clz) {\n-        return path.lastElement()\n-                .map(last ->\n-                        clz.isAssignableFrom(\n-                                dictionary.getType(last.getType(), last.getFieldName())\n-                        ))\n-                .orElse(false);\n-    }\n-\n     public FilterPredicate(PathElement pathElement, Operator op, List<Object> values) {\n         this(new Path(Collections.singletonList(pathElement)), op, values);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczMjA3MA==", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r418732070", "bodyText": "We still need to fix the coercion.", "author": "aklish", "createdAt": "2020-05-01T20:50:12Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java", "diffHunk": "@@ -350,6 +367,25 @@ public static Operator fromString(final String string) {\n         };\n     }\n \n+    private static <T> Predicate<T> hasMember(Path fieldPath, List<Object> values, RequestScope requestScope) {\n+        return (T entity) -> {\n+            if (values.size() != 1) {\n+                throw new InvalidPredicateException(\"HasMember can only take one argument\");\n+            }\n+            Object val = getFieldValue(entity, fieldPath, requestScope);\n+            String filterStr = CoerceUtil.coerce(values.get(0), String.class);", "originalCommit": "3b60f953353aa8480a30cac56d90bf168d063ee5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ec37984a60ec9cb46f2e47df6af95aad887509c", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java b/elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java\nindex 9cfb707f8..bbae4ce60 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/filter/Operator.java\n\n@@ -367,12 +366,12 @@ public enum Operator {\n         };\n     }\n \n-    private static <T> Predicate<T> hasMember(Path fieldPath, List<Object> values, RequestScope requestScope) {\n+    private static <T> Predicate<T> hasMember(String field, List<Object> values, RequestScope requestScope) {\n         return (T entity) -> {\n             if (values.size() != 1) {\n                 throw new InvalidPredicateException(\"HasMember can only take one argument\");\n             }\n-            Object val = getFieldValue(entity, fieldPath, requestScope);\n+            Object val = getFieldValue(entity, field, requestScope);\n             String filterStr = CoerceUtil.coerce(values.get(0), String.class);\n             if (val == null) { return false; }\n             if (val instanceof Collection<?>) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3MDI1MA==", "url": "https://github.com/yahoo/elide/pull/1291#discussion_r419670250", "bodyText": "Can we also add error tests for book.authors and book.publisher?", "author": "aklish", "createdAt": "2020-05-04T19:20:56Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java", "diffHunk": "@@ -1668,6 +1674,156 @@ void testExceptionOnEmptyOperator() throws IOException {\n \n     }\n \n+    @Test\n+    @Tag(\"excludeOnHibernate3\")\n+    void testMemberOfOnAttributes() throws IOException {\n+        String filterString = \"Booker Prize\";\n+        Set<String> awardBook = new HashSet<>();\n+        Set<String> nullNedAwardBook = new HashSet<>();\n+\n+\n+        // * Filter On Root Entity *\n+        for (JsonNode book : books.get(\"data\")) {\n+            Iterator<JsonNode> awards = book.get(\"attributes\").get(\"awards\").elements();\n+            while (awards.hasNext()) {\n+                if (awards.next().asText().equals(filterString)) {\n+                    awardBook.add(book.get(\"id\").asText());\n+                    break;\n+                }\n+            }\n+        }\n+        // Test Default filter type on Root Entity\n+        when()\n+                .get(String.format(\"/book?filter[book.awards][hasmember]=%s\", filterString))\n+                .then()\n+                .body(\"data\", hasSize(awardBook.size()),\n+                        \"data.id\", contains(awardBook.toArray())\n+                );\n+\n+\n+        // Test RSQL type filter on Root Entity\n+        when()\n+                .get(String.format(\"/book?filter[book]=awards=hasmember=\\\"%s\\\"\", filterString))\n+                .then()\n+                .body(\"data\", hasSize(awardBook.size()),\n+                        \"data.id\", contains(awardBook.toArray())\n+                );\n+\n+\n+        // * Filter On Non Root Entity *\n+        for (JsonNode book : nullNedBooks.get(\"data\")) {\n+            Iterator<JsonNode> awards = book.get(\"attributes\").get(\"awards\").elements();\n+            while (awards.hasNext()) {\n+                if (awards.next().asText().equals(filterString)) {\n+                    nullNedAwardBook.add(book.get(\"id\").asText());\n+                    break;\n+                }\n+            }\n+        }\n+//        // Test Default filter type on NonRoot Entity\n+//        when()\n+//                .get(String.format(\"/author/%s/books?filter[book.awards][hasmember]=%s\", nullNedId, filterString))\n+//                .then()\n+//                .body(\"data\", hasSize(nullNedAwardBook.size()),\n+//                        \"data.id\", contains(nullNedAwardBook.toArray())\n+//                );\n+//\n+//\n+//\n+//        // Test RSQL type filter on NonRoot Entity\n+//        when()\n+//                .get(String.format(\"/author/%s/books?filter[book]=awards=hasmember=\\\"%s\\\"\", nullNedId, filterString))\n+//                .then()\n+//                .body(\"data\", hasSize(nullNedAwardBook.size()),\n+//                        \"data.id\", contains(nullNedAwardBook.toArray())\n+//                );\n+    }\n+\n+    @Test\n+    @Tag(\"excludeOnHibernate3\")\n+    void testMemberOfOnRelationships() throws IOException {\n+        String phoneNumber = \"987-654-3210\";\n+        Set<String> publisherBook = new HashSet<>();\n+\n+\n+        // * Filter On Root Entity *\n+        for (JsonNode book : books.get(\"data\")) {\n+            int publisherId = book.get(\"relationships\").get(\"publisher\").get(\"data\").get(\"id\").asInt();\n+            if (publisherId == 1) {\n+                publisherBook.add(book.get(\"id\").asText());\n+                break;\n+            }\n+        }\n+        // Test Default filter type on Root Entity\n+        when()\n+                .get(String.format(\"/book?filter[book.publisher.phoneNumbers][hasmember]=%s\", phoneNumber))\n+                .then()\n+                .body(\"data\", hasSize(publisherBook.size()),\n+                        \"data.id\", contains(publisherBook.toArray())\n+                );\n+\n+        // Test RSQL type filter on Root Entity\n+        when()\n+                .get(String.format(\"/book?filter[book]=publisher.phoneNumbers=hasmember=\\\"%s\\\"\", phoneNumber))\n+                .then()\n+                .body(\"data\", hasSize(publisherBook.size()),\n+                        \"data.id\", contains(publisherBook.toArray())\n+                );\n+\n+    }\n+\n+    @Test\n+    @Tag(\"excludeOnHibernate3\")\n+    void testExceptionOnMemberOfOperator() throws IOException {", "originalCommit": "8262b3da49cb7ac869f456b94c84e6090269fd21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ec37984a60ec9cb46f2e47df6af95aad887509c", "chunk": "diff --git a/elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java b/elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java\nindex d25137eaa..e74173689 100644\n--- a/elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java\n+++ b/elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java\n\n@@ -1675,11 +1670,12 @@ public class FilterIT extends IntegrationTest {\n     }\n \n     @Test\n-    @Tag(\"excludeOnHibernate3\")\n+    @Tag(\"memberOfAttributeCollection\")\n     void testMemberOfOnAttributes() throws IOException {\n+        JsonNode result;\n         String filterString = \"Booker Prize\";\n-        Set<String> awardBook = new HashSet<>();\n-        Set<String> nullNedAwardBook = new HashSet<>();\n+        Set<JsonNode> awardBook = new HashSet<>();\n+        Set<JsonNode> nullNedAwardBook = new HashSet<>();\n \n \n         // * Filter On Root Entity *\n"}}, {"oid": "3ec37984a60ec9cb46f2e47df6af95aad887509c", "url": "https://github.com/yahoo/elide/commit/3ec37984a60ec9cb46f2e47df6af95aad887509c", "message": "Hasmember operation added for attribute collection", "committedDate": "2020-05-07T19:19:32Z", "type": "commit"}, {"oid": "7c04f620f7ce82a876650fb44d894ec8d07feb5a", "url": "https://github.com/yahoo/elide/commit/7c04f620f7ce82a876650fb44d894ec8d07feb5a", "message": "Allow memberof operation for only attributes and collection types", "committedDate": "2020-05-07T19:19:32Z", "type": "commit"}, {"oid": "80d22b78686e239dca0e205ee82917b1928cb21d", "url": "https://github.com/yahoo/elide/commit/80d22b78686e239dca0e205ee82917b1928cb21d", "message": "make tags to datastore", "committedDate": "2020-05-07T19:19:32Z", "type": "commit"}, {"oid": "f81daa3479bd09fd8612d72e8cd9d177f14ffcfc", "url": "https://github.com/yahoo/elide/commit/f81daa3479bd09fd8612d72e8cd9d177f14ffcfc", "message": "Add exclude tags to test", "committedDate": "2020-05-07T19:19:32Z", "type": "commit"}, {"oid": "9e7bb79b982e7b84706af0b83eacafc2fbc11fba", "url": "https://github.com/yahoo/elide/commit/9e7bb79b982e7b84706af0b83eacafc2fbc11fba", "message": "import error fix", "committedDate": "2020-05-07T19:19:32Z", "type": "commit"}, {"oid": "22cb18170753dfb2954e1ba3896706e6b4debf6b", "url": "https://github.com/yahoo/elide/commit/22cb18170753dfb2954e1ba3896706e6b4debf6b", "message": "Refactor Operator.java", "committedDate": "2020-05-07T19:22:00Z", "type": "commit"}, {"oid": "4f7975312ee7fff886e432d5fbc3e2cfd61856e7", "url": "https://github.com/yahoo/elide/commit/4f7975312ee7fff886e432d5fbc3e2cfd61856e7", "message": "refactor OperatorTest", "committedDate": "2020-05-07T19:22:01Z", "type": "commit"}, {"oid": "91ed767a2de8ce8712e92819fef1cac2fa87e735", "url": "https://github.com/yahoo/elide/commit/91ed767a2de8ce8712e92819fef1cac2fa87e735", "message": "member of accepts all type", "committedDate": "2020-05-07T19:22:01Z", "type": "commit"}, {"oid": "bdfc04d9fc1be477d294815617ff03b94ede9a2d", "url": "https://github.com/yahoo/elide/commit/bdfc04d9fc1be477d294815617ff03b94ede9a2d", "message": "Add extra test case", "committedDate": "2020-05-07T19:22:01Z", "type": "commit"}, {"oid": "3913423ddd3ccf2b3eee728e4f178f0cbf98e3d6", "url": "https://github.com/yahoo/elide/commit/3913423ddd3ccf2b3eee728e4f178f0cbf98e3d6", "message": "Update FilterIT.java", "committedDate": "2020-05-07T19:22:01Z", "type": "commit"}, {"oid": "e6925755b4b9e067f5f8d4efa66dd1eed0cc181b", "url": "https://github.com/yahoo/elide/commit/e6925755b4b9e067f5f8d4efa66dd1eed0cc181b", "message": "Add unit test", "committedDate": "2020-05-07T19:22:01Z", "type": "commit"}, {"oid": "7bb1fe746404437372e96c0977d1bef4a1092466", "url": "https://github.com/yahoo/elide/commit/7bb1fe746404437372e96c0977d1bef4a1092466", "message": "unit test for filter dialect", "committedDate": "2020-05-07T19:22:01Z", "type": "commit"}, {"oid": "43ced021e114a1d8d4686fab6963aa593c8d6040", "url": "https://github.com/yahoo/elide/commit/43ced021e114a1d8d4686fab6963aa593c8d6040", "message": "new unist test for member of filter translator", "committedDate": "2020-05-07T19:22:01Z", "type": "commit"}, {"oid": "43ced021e114a1d8d4686fab6963aa593c8d6040", "url": "https://github.com/yahoo/elide/commit/43ced021e114a1d8d4686fab6963aa593c8d6040", "message": "new unist test for member of filter translator", "committedDate": "2020-05-07T19:22:01Z", "type": "forcePushed"}, {"oid": "de2151baf3ed9d3c4d32fa43929c26be59c6a031", "url": "https://github.com/yahoo/elide/commit/de2151baf3ed9d3c4d32fa43929c26be59c6a031", "message": "compilation fix", "committedDate": "2020-05-07T19:52:33Z", "type": "commit"}, {"oid": "707fd9f6ee28b015c78ace13b394c34105c6b020", "url": "https://github.com/yahoo/elide/commit/707fd9f6ee28b015c78ace13b394c34105c6b020", "message": "Merge branch 'master' into ISSUE-1197_add_memberof_operator", "committedDate": "2020-05-07T20:25:51Z", "type": "commit"}, {"oid": "68ebef9005634f1f5a20ef62562e1b7517e05e85", "url": "https://github.com/yahoo/elide/commit/68ebef9005634f1f5a20ef62562e1b7517e05e85", "message": "Update pom.xml\n\nUpdated CVSS limit to 7 to unblock release.", "committedDate": "2020-05-07T23:46:33Z", "type": "commit"}, {"oid": "4206477eed3c49b874bc6e332554fd9a5b4739c3", "url": "https://github.com/yahoo/elide/commit/4206477eed3c49b874bc6e332554fd9a5b4739c3", "message": "Merge branch 'master' into ISSUE-1197_add_memberof_operator", "committedDate": "2020-05-08T02:41:52Z", "type": "commit"}, {"oid": "c4dccc0cacfbfcdb57ad73bcc8f79f385db9241f", "url": "https://github.com/yahoo/elide/commit/c4dccc0cacfbfcdb57ad73bcc8f79f385db9241f", "message": "Bug fix", "committedDate": "2020-05-08T17:48:10Z", "type": "commit"}, {"oid": "b31c5aca2d327cad0eace2fca477d929e5624c36", "url": "https://github.com/yahoo/elide/commit/b31c5aca2d327cad0eace2fca477d929e5624c36", "message": "Merge branch 'master' into ISSUE-1197_add_memberof_operator", "committedDate": "2020-05-08T17:54:57Z", "type": "commit"}]}