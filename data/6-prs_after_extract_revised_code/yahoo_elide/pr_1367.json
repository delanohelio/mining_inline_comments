{"pr_number": 1367, "pr_title": "implement cancel function", "pr_createdAt": "2020-06-03T22:38:23Z", "pr_url": "https://github.com/yahoo/elide/pull/1367", "timeline": [{"oid": "c0492ff9887bf3ead882e6676f8d4b6bef2fbc12", "url": "https://github.com/yahoo/elide/commit/c0492ff9887bf3ead882e6676f8d4b6bef2fbc12", "message": "implement cancel function", "committedDate": "2020-06-03T22:35:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3Nzg2MA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435277860", "bodyText": "Elide core should not depend directly on Hibernate.  Only the data stores that use hibernate should have this dependency.", "author": "aklish", "createdAt": "2020-06-04T13:56:48Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+import org.hibernate.Session;", "originalCommit": "c0492ff9887bf3ead882e6676f8d4b6bef2fbc12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6dd1de7fddc77fd1ca4f814b4d6e0f0d5de3bb1", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java b/elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java\ndeleted file mode 100644\nindex ebabaf06a..000000000\n--- a/elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java\n+++ /dev/null\n\n@@ -1,23 +0,0 @@\n-/*\n- * Copyright 2020, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-\n-import org.hibernate.Session;\n-\n-/**\n- * Cancel Session implementation.\n- */\n-\n-public abstract class CancelSession {\n-   private final Session session;\n-   \n-   protected CancelSession(Session session) {\n-       this.session = session;\n-   }\n-\n-   public void cancel() {\n-       session.cancelQuery();\n-   }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4MTUyMw==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435281523", "bodyText": "Instead of creating an abstract class - create a functional interface (with no dependencies on things like hibernate).", "author": "aklish", "createdAt": "2020-06-04T14:01:36Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+import org.hibernate.Session;\n+\n+/**\n+ * Cancel Session implementation.\n+ */\n+\n+public abstract class CancelSession {", "originalCommit": "c0492ff9887bf3ead882e6676f8d4b6bef2fbc12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI5MDkzMQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435290931", "bodyText": "I think the functionalInterface will require an entityManager as an argument - and as such - it should probably live in the Aggregation Store and JpaStore respectively.", "author": "aklish", "createdAt": "2020-06-04T14:13:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4MTUyMw=="}], "type": "inlineReview", "revised_code": {"commit": "a6dd1de7fddc77fd1ca4f814b4d6e0f0d5de3bb1", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java b/elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java\ndeleted file mode 100644\nindex ebabaf06a..000000000\n--- a/elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java\n+++ /dev/null\n\n@@ -1,23 +0,0 @@\n-/*\n- * Copyright 2020, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-\n-import org.hibernate.Session;\n-\n-/**\n- * Cancel Session implementation.\n- */\n-\n-public abstract class CancelSession {\n-   private final Session session;\n-   \n-   protected CancelSession(Session session) {\n-       this.session = session;\n-   }\n-\n-   public void cancel() {\n-       session.cancelQuery();\n-   }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NzAyNQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435287025", "bodyText": "YOu can make this a local variable and use it multiple places.", "author": "aklish", "createdAt": "2020-06-04T14:08:36Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -376,10 +378,10 @@ default AuditLogger getAuditLogger() {\n      */\n     default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n             EntityManagerFactory entityManagerFactory) {\n-\n+\tCancelSession cancelSession = new CancelSession(entityManagerFactory.get().unwrap(Session.class));", "originalCommit": "c0492ff9887bf3ead882e6676f8d4b6bef2fbc12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4ODMwOQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435288309", "bodyText": "Another issue - you are unwrapping the factory - not the entity manager.  I don't think that is correct.", "author": "aklish", "createdAt": "2020-06-04T14:10:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NzAyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a6dd1de7fddc77fd1ca4f814b4d6e0f0d5de3bb1", "chunk": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex ec2563f21..55d936b65 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n\n@@ -378,11 +377,10 @@ public interface ElideStandaloneSettings {\n      */\n     default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n             EntityManagerFactory entityManagerFactory) {\n-\tCancelSession cancelSession = new CancelSession(entityManagerFactory.get().unwrap(Session.class));\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                (em -> { return new NonJtaTransaction(em, cancelSession); }));\n-\n+\t\t(em -> { return new NonJtaTransaction(em, em.unwrap(Session.class).cancelQuery()); }),\n+                     (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n         return dataStore;\n"}}, {"oid": "a6dd1de7fddc77fd1ca4f814b4d6e0f0d5de3bb1", "url": "https://github.com/yahoo/elide/commit/a6dd1de7fddc77fd1ca4f814b4d6e0f0d5de3bb1", "message": "addressing comments", "committedDate": "2020-06-04T19:59:53Z", "type": "commit"}, {"oid": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "url": "https://github.com/yahoo/elide/commit/b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "message": "addressing comments", "committedDate": "2020-06-04T20:01:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NzQ0Nw==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435567447", "bodyText": "Don't create an entityManager here.  Let the transaction create the entity manager.", "author": "aklish", "createdAt": "2020-06-04T21:37:57Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java", "diffHunk": "@@ -75,6 +83,23 @@ public void populateEntityDictionary(EntityDictionary dictionary) {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine);\n+\tEntityManager entityManager = entityManagerSupplier.get();        ", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de929061ff81b6969c97c27683791b478c0ac1c2", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex ad108f971..e0a5b1a84 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n\n@@ -83,23 +79,14 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-\tEntityManager entityManager = entityManagerSupplier.get();        \n-        return new AggregationDataStoreTransaction(entityManager, queryEngine, aggregationDataStoreTransactionCancel);\n-    }\n-\n-    /**\n-     * Functional interface for describing a method to supply EntityManager.\n-     */\n-    @FunctionalInterface\n-    public interface EntityManagerSupplier {\n-        EntityManager get();\n+        return new AggregationDataStoreTransaction(queryEngine, cancelTransaction);\n     }\n \n     /**\n      * Functional interface for describing a method to supply AggregationDataStoreTransaction.\n      */\n     @FunctionalInterface\n-    public interface  AggregationDataStoreTransactionCancel {\n+    public interface CancelTransaction {\n         public void cancel(EntityManager entityManager);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NzYyMg==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435567622", "bodyText": "Let's not add an EntityManagerSupplier to the constructor.", "author": "aklish", "createdAt": "2020-06-04T21:38:24Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java", "diffHunk": "@@ -22,26 +22,34 @@\n import java.util.List;\n import java.util.Set;\n \n+import javax.persistence.EntityManager;\n+\n /**\n  * DataStore that supports Aggregation. Uses {@link QueryEngine} to return results.\n  */\n public class AggregationDataStore implements DataStore {\n     private QueryEngine queryEngine;\n     private Set<Class<?>> dynamicCompiledClasses;\n+    protected final AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel;\n+    protected final EntityManagerSupplier entityManagerSupplier;\n \n     /**\n      * These are the classes the Aggregation Store manages.\n      */\n     private static final List<Class<? extends Annotation>> AGGREGATION_STORE_CLASSES =\n             Arrays.asList(FromTable.class, FromSubquery.class);\n \n-    public AggregationDataStore(QueryEngine queryEngine) {\n+    public AggregationDataStore(EntityManagerSupplier entityManagerSupplier, QueryEngine queryEngine, AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel) {", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de929061ff81b6969c97c27683791b478c0ac1c2", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex ad108f971..e0a5b1a84 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n\n@@ -30,26 +30,22 @@ import javax.persistence.EntityManager;\n public class AggregationDataStore implements DataStore {\n     private QueryEngine queryEngine;\n     private Set<Class<?>> dynamicCompiledClasses;\n-    protected final AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel;\n-    protected final EntityManagerSupplier entityManagerSupplier;\n-\n+    protected final CancelTransaction cancelTransaction;\n     /**\n      * These are the classes the Aggregation Store manages.\n      */\n     private static final List<Class<? extends Annotation>> AGGREGATION_STORE_CLASSES =\n             Arrays.asList(FromTable.class, FromSubquery.class);\n \n-    public AggregationDataStore(EntityManagerSupplier entityManagerSupplier, QueryEngine queryEngine, AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel) {\n-\tthis.entityManagerSupplier = entityManagerSupplier;\n+    public AggregationDataStore(QueryEngine queryEngine, CancelTransaction cancelTransaction) {\n         this.queryEngine = queryEngine;\n-\tthis.aggregationDataStoreTransactionCancel = aggregationDataStoreTransactionCancel;\n+\tthis.cancelTransaction = cancelTransaction;\n     }\n \n-    public AggregationDataStore(EntityManagerSupplier entityManagerSupplier, QueryEngine queryEngine, Set<Class<?>> dynamicCompiledClasses, AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel) {\n- \tthis.entityManagerSupplier = entityManagerSupplier;\n+    public AggregationDataStore(QueryEngine queryEngine, Set<Class<?>> dynamicCompiledClasses, CancelTransaction cancelTransaction) {\n         this.queryEngine = queryEngine;\n         this.dynamicCompiledClasses = dynamicCompiledClasses;\n-    \tthis.aggregationDataStoreTransactionCancel = aggregationDataStoreTransactionCancel;\n+    \tthis.cancelTransaction = cancelTransaction;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NzY4OA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435567688", "bodyText": "Remove", "author": "aklish", "createdAt": "2020-06-04T21:38:35Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java", "diffHunk": "@@ -75,6 +83,23 @@ public void populateEntityDictionary(EntityDictionary dictionary) {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine);\n+\tEntityManager entityManager = entityManagerSupplier.get();        \n+        return new AggregationDataStoreTransaction(entityManager, queryEngine, aggregationDataStoreTransactionCancel);\n+    }\n+\n+    /**\n+     * Functional interface for describing a method to supply EntityManager.\n+     */\n+    @FunctionalInterface\n+    public interface EntityManagerSupplier {", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de929061ff81b6969c97c27683791b478c0ac1c2", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex ad108f971..e0a5b1a84 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n\n@@ -83,23 +79,14 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-\tEntityManager entityManager = entityManagerSupplier.get();        \n-        return new AggregationDataStoreTransaction(entityManager, queryEngine, aggregationDataStoreTransactionCancel);\n-    }\n-\n-    /**\n-     * Functional interface for describing a method to supply EntityManager.\n-     */\n-    @FunctionalInterface\n-    public interface EntityManagerSupplier {\n-        EntityManager get();\n+        return new AggregationDataStoreTransaction(queryEngine, cancelTransaction);\n     }\n \n     /**\n      * Functional interface for describing a method to supply AggregationDataStoreTransaction.\n      */\n     @FunctionalInterface\n-    public interface  AggregationDataStoreTransactionCancel {\n+    public interface CancelTransaction {\n         public void cancel(EntityManager entityManager);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2Nzk3OQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435567979", "bodyText": "Can we shorten the name of this interface (we already know this is for the AggregationDataStore since it is an inner class).", "author": "aklish", "createdAt": "2020-06-04T21:39:14Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java", "diffHunk": "@@ -75,6 +83,23 @@ public void populateEntityDictionary(EntityDictionary dictionary) {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine);\n+\tEntityManager entityManager = entityManagerSupplier.get();        \n+        return new AggregationDataStoreTransaction(entityManager, queryEngine, aggregationDataStoreTransactionCancel);\n+    }\n+\n+    /**\n+     * Functional interface for describing a method to supply EntityManager.\n+     */\n+    @FunctionalInterface\n+    public interface EntityManagerSupplier {\n+        EntityManager get();\n+    }\n+\n+    /**\n+     * Functional interface for describing a method to supply AggregationDataStoreTransaction.\n+     */\n+    @FunctionalInterface\n+    public interface  AggregationDataStoreTransactionCancel {", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de929061ff81b6969c97c27683791b478c0ac1c2", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex ad108f971..e0a5b1a84 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n\n@@ -83,23 +79,14 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-\tEntityManager entityManager = entityManagerSupplier.get();        \n-        return new AggregationDataStoreTransaction(entityManager, queryEngine, aggregationDataStoreTransactionCancel);\n-    }\n-\n-    /**\n-     * Functional interface for describing a method to supply EntityManager.\n-     */\n-    @FunctionalInterface\n-    public interface EntityManagerSupplier {\n-        EntityManager get();\n+        return new AggregationDataStoreTransaction(queryEngine, cancelTransaction);\n     }\n \n     /**\n      * Functional interface for describing a method to supply AggregationDataStoreTransaction.\n      */\n     @FunctionalInterface\n-    public interface  AggregationDataStoreTransactionCancel {\n+    public interface CancelTransaction {\n         public void cancel(EntityManager entityManager);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2ODQzNg==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435568436", "bodyText": "Remove the entity manager from the constructor.  The AggregationStore (other than the SQLQueryEngine) should not have a direct dependency on the EntityManager", "author": "aklish", "createdAt": "2020-06-04T21:40:23Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java", "diffHunk": "@@ -15,13 +15,20 @@\n import com.google.common.annotations.VisibleForTesting;\n \n import java.io.IOException;\n+\n+import javax.persistence.EntityManager;\n+\n /**\n  * Transaction handler for {@link AggregationDataStore}.\n  */\n public class AggregationDataStoreTransaction extends DataStoreTransactionImplementation {\n+    private EntityManager em;\n     private QueryEngine queryEngine;\n-    public AggregationDataStoreTransaction(QueryEngine queryEngine) {\n-        this.queryEngine = queryEngine;\n+    private AggregationDataStore.AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel;\n+    public AggregationDataStoreTransaction(EntityManager em, QueryEngine queryEngine, AggregationDataStore.AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel) {", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8064be350bc30ffb58923074f4a08d143f3c21c5", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex ecaddcba8..fc85f554b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n\n@@ -15,7 +15,7 @@ import com.yahoo.elide.request.EntityProjection;\n import com.google.common.annotations.VisibleForTesting;\n \n import java.io.IOException;\n-\n+import java.util.concurrent.Future;\n import javax.persistence.EntityManager;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MDAxOQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435570019", "bodyText": "Instead of implementing cancel here, why not move this to the super class?", "author": "aklish", "createdAt": "2020-06-04T21:44:12Z", "path": "elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/NonJtaTransaction.java", "diffHunk": "@@ -61,4 +63,9 @@ public void close() throws IOException {\n     public boolean isOpen() {\n         return transaction.isActive();\n     }\n+\n+    @Override\n+    public void cancel() {", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de929061ff81b6969c97c27683791b478c0ac1c2", "chunk": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/NonJtaTransaction.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/NonJtaTransaction.java\nindex 66055e633..551b37567 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/NonJtaTransaction.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/NonJtaTransaction.java\n\n@@ -64,8 +64,4 @@ public class NonJtaTransaction extends AbstractJpaTransaction {\n         return transaction.isActive();\n     }\n \n-    @Override\n-    public void cancel() {\n-\tjpaTransactionCancel.cancel(em);\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MDE3Nw==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435570177", "bodyText": "Why not implement cancel here so we don't have to redefine it in each subclass.", "author": "aklish", "createdAt": "2020-06-04T21:44:35Z", "path": "elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java", "diffHunk": "@@ -55,10 +56,12 @@\n     protected final EntityManager em;\n     private final EntityManagerWrapper emWrapper;\n     private final LinkedHashSet<Runnable> deferredTasks = new LinkedHashSet<>();\n+    private final JpaDataStore.JpaTransactionCancel jpaTransactionCancel;\n \n-    protected AbstractJpaTransaction(EntityManager em) {\n+    protected AbstractJpaTransaction(EntityManager em, JpaDataStore.JpaTransactionCancel jpaTransactionCancel) {\n         this.em = em;\n         this.emWrapper = new EntityManagerWrapper(em);\n+\tthis.jpaTransactionCancel = jpaTransactionCancel;", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c637d51fba403ac0e2c8fad524d4ea781e985951", "chunk": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\nindex eb4a70896..4bf1cb9fb 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\n\n@@ -56,12 +56,12 @@ public abstract class AbstractJpaTransaction extends DataStoreTransactionImpleme\n     protected final EntityManager em;\n     private final EntityManagerWrapper emWrapper;\n     private final LinkedHashSet<Runnable> deferredTasks = new LinkedHashSet<>();\n-    private final JpaDataStore.JpaTransactionCancel jpaTransactionCancel;\n+    private final JpaTransactionCancel jpaTransactionCancel;\n \n-    protected AbstractJpaTransaction(EntityManager em, JpaDataStore.JpaTransactionCancel jpaTransactionCancel) {\n+    protected AbstractJpaTransaction(EntityManager em, JpaTransactionCancel jpaTransactionCancel) {\n         this.em = em;\n         this.emWrapper = new EntityManagerWrapper(em);\n-\tthis.jpaTransactionCancel = jpaTransactionCancel;\n+        this.jpaTransactionCancel = jpaTransactionCancel;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MDY1NA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435570654", "bodyText": "This can be assigned like:\njpaTransactionCancel = (entityManager) -> { entityManager.unwrap(Session.class).cancelQuery();};\nand then you can reuse jpaTransactionCancel below.", "author": "aklish", "createdAt": "2020-06-04T21:45:41Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -170,19 +171,25 @@ public DataStore buildDataStore(EntityManagerFactory entityManagerFactory, Query\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n         AggregationDataStore aggregationDataStore = null;\n+\tJpaDataStore.JpaTransactionCancel jpaTransactionCancel = null;\t", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de929061ff81b6969c97c27683791b478c0ac1c2", "chunk": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 69b41af46..7f8dc2c24 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n\n@@ -171,25 +176,21 @@ public class ElideAutoConfiguration {\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n         AggregationDataStore aggregationDataStore = null;\n-\tJpaDataStore.JpaTransactionCancel jpaTransactionCancel = null;\t\n \n         if (isDynamicConfigEnabled(settings)) {\n             ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n             Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(FromTable.class);\n             annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n             aggregationDataStore = new AggregationDataStore(\n-\t\t () -> { return entityManagerFactory.createEntityManager(); },\n-\t\tqueryEngine, annotatedClass, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+\t\tqueryEngine, annotatedClass));\n         } else {\n             aggregationDataStore = new AggregationDataStore(\n-\t\t () -> { return entityManagerFactory.createEntityManager(); },\n-\t\tqueryEngine, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+\t\tqueryEngine);\n         }\n \t\n         JpaDataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                    (em -> { return new NonJtaTransaction(em, em.unwrap(Session.class).cancelQuery()); }),\n-\t\t     (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+                    (em -> { return new NonJtaTransaction(em, jpaTransactionCancel); }));\n \n         // meta data store needs to be put at first to populate meta data models\n         return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MTU4MQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435571581", "bodyText": "This doesn't look right - why are we defining the cancel method twice here and passing it through two separate functions?", "author": "aklish", "createdAt": "2020-06-04T21:47:44Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -376,11 +377,10 @@ default AuditLogger getAuditLogger() {\n      */\n     default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n             EntityManagerFactory entityManagerFactory) {\n-\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                (em -> { return new NonJtaTransaction(em); }));\n-\n+\t\t(em -> { return new NonJtaTransaction(em, em.unwrap(Session.class).cancelQuery()); }),\n+                     (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de929061ff81b6969c97c27683791b478c0ac1c2", "chunk": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 55d936b65..b14fa3bee 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n\n@@ -379,8 +384,7 @@ public interface ElideStandaloneSettings {\n             EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-\t\t(em -> { return new NonJtaTransaction(em, em.unwrap(Session.class).cancelQuery()); }),\n-                     (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+\t\t(em -> { return new NonJtaTransaction(em, jpaTransactionCancel); }));\n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n         return dataStore;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4MTg4Ng==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435581886", "bodyText": "Remove entityManagerFactory as an argument.", "author": "aklish", "createdAt": "2020-06-04T22:13:56Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -393,18 +393,19 @@ default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore\n      * @return AggregationDataStore object initialized.\n      */\n     default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler, EntityManagerFactory entityManagerFactory) {", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de929061ff81b6969c97c27683791b478c0ac1c2", "chunk": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 55d936b65..b14fa3bee 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n\n@@ -393,18 +397,16 @@ public interface ElideStandaloneSettings {\n      * @return AggregationDataStore object initialized.\n      */\n     default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler, EntityManagerFactory entityManagerFactory) {\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n         AggregationDataStore aggregationDataStore = null;\n         if (enableDynamicModelConfig()) {\n             Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n             annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n \t    aggregationDataStore = new AggregationDataStore(\n-            \t() -> { return entityManagerFactory.createEntityManager(); },\n-                queryEngine, annotatedClass, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+\t\tqueryEngine, annotatedClass);\n         } else {\n             aggregationDataStore = new AggregationDataStore(\n-            \t() -> { return entityManagerFactory.createEntityManager(); },\n-                queryEngine, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+\t\tqueryEngine);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4MjE3Mg==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435582172", "bodyText": "We define the transaction cancel method four times.  Let's define this once with a static, final variable and just use that everywhere.", "author": "aklish", "createdAt": "2020-06-04T22:14:39Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -393,18 +393,19 @@ default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore\n      * @return AggregationDataStore object initialized.\n      */\n     default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler, EntityManagerFactory entityManagerFactory) {\n         AggregationDataStore aggregationDataStore = null;\n-\n         if (enableDynamicModelConfig()) {\n             Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n             annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n-            aggregationDataStore = new AggregationDataStore(queryEngine, annotatedClasses);\n+\t    aggregationDataStore = new AggregationDataStore(\n+            \t() -> { return entityManagerFactory.createEntityManager(); },\n+                queryEngine, annotatedClass, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n         } else {\n-            aggregationDataStore = new AggregationDataStore(queryEngine);\n+            aggregationDataStore = new AggregationDataStore(\n+            \t() -> { return entityManagerFactory.createEntityManager(); },\n+                queryEngine, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de929061ff81b6969c97c27683791b478c0ac1c2", "chunk": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 55d936b65..b14fa3bee 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n\n@@ -393,18 +397,16 @@ public interface ElideStandaloneSettings {\n      * @return AggregationDataStore object initialized.\n      */\n     default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler, EntityManagerFactory entityManagerFactory) {\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n         AggregationDataStore aggregationDataStore = null;\n         if (enableDynamicModelConfig()) {\n             Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n             annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n \t    aggregationDataStore = new AggregationDataStore(\n-            \t() -> { return entityManagerFactory.createEntityManager(); },\n-                queryEngine, annotatedClass, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+\t\tqueryEngine, annotatedClass);\n         } else {\n             aggregationDataStore = new AggregationDataStore(\n-            \t() -> { return entityManagerFactory.createEntityManager(); },\n-                queryEngine, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+\t\tqueryEngine);\n         }\n     }\n \n"}}, {"oid": "de929061ff81b6969c97c27683791b478c0ac1c2", "url": "https://github.com/yahoo/elide/commit/de929061ff81b6969c97c27683791b478c0ac1c2", "message": "Future implementation", "committedDate": "2020-06-05T18:23:32Z", "type": "commit"}, {"oid": "f13304cf0dbe305f4b321d4d1a6626186bb82370", "url": "https://github.com/yahoo/elide/commit/f13304cf0dbe305f4b321d4d1a6626186bb82370", "message": "Future implementation", "committedDate": "2020-06-05T18:24:36Z", "type": "commit"}, {"oid": "9013381cc2c3b0e5c639b3d61dba7211a7c9af33", "url": "https://github.com/yahoo/elide/commit/9013381cc2c3b0e5c639b3d61dba7211a7c9af33", "message": "Future implementation", "committedDate": "2020-06-05T18:29:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwMDM5Mg==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r436100392", "bodyText": "Just return a Future here instead of the Implementation.", "author": "aklish", "createdAt": "2020-06-05T18:40:58Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -163,7 +163,7 @@ private void populateMetaData(MetaDataStore metaDataStore) {\n      * @param query The query customized for a particular persistent storage or storage client\n      * @return query results\n      */\n-    public abstract QueryResult executeQuery(Query query);\n+    public abstract FutureImplementation<QueryResult> executeQuery(Query query);", "originalCommit": "9013381cc2c3b0e5c639b3d61dba7211a7c9af33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex b96ff49c0..e2e4a3c9a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n\n@@ -163,7 +163,7 @@ public abstract class QueryEngine {\n      * @param query The query customized for a particular persistent storage or storage client\n      * @return query results\n      */\n-    public abstract FutureImplementation<QueryResult> executeQuery(Query query);\n+    public abstract Future<QueryResult> executeQuery(Query query);\n \n     /**\n      * Returns the schema for a given entity class.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwMDc3MA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r436100770", "bodyText": "You could make this an inner class of the SQLQueryEngine - not abstract - and it can just call the TransactionCancel member.", "author": "aklish", "createdAt": "2020-06-05T18:41:39Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/FutureImplementation.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+import com.yahoo.elide.datastores.aggregation.query.QueryResult;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.query.SQLQueryEngine;\n+\n+import java.util.concurrent.Future;\n+\n+public abstract class FutureImplementation implements Future<QueryResult> {", "originalCommit": "9013381cc2c3b0e5c639b3d61dba7211a7c9af33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/FutureImplementation.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/FutureImplementation.java\ndeleted file mode 100644\nindex 66439cf94..000000000\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/FutureImplementation.java\n+++ /dev/null\n\n@@ -1,21 +0,0 @@\n-/*\n- * Copyright 2020, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-\n-import com.yahoo.elide.datastores.aggregation.query.QueryResult;\n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.query.SQLQueryEngine;\n-\n-import java.util.concurrent.Future;\n-\n-public abstract class FutureImplementation implements Future<QueryResult> {\n-\n-    /**\n-     * Cancels transaction\n-     */\n-    @Override\n-    public boolean cancel(boolean mayInterruptIfRunning) {\n-        SQLQueryEngine.cancel();\n-    }\n-}\n"}}, {"oid": "8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "url": "https://github.com/yahoo/elide/commit/8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "message": "Future implementation", "committedDate": "2020-06-05T19:56:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3NDU4MA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r436174580", "bodyText": "So this line creates a new session and then immediately cancels it.  We want to close the existing session - not a new one.", "author": "aklish", "createdAt": "2020-06-05T21:35:28Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -289,4 +291,28 @@ private SQLQuery toPageTotalSQL(SQLQuery sql) {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n+\n+    /**\n+     * Functional interface for describing a method to supply JpaTransaction.\n+     */\n+    @FunctionalInterface\n+    public interface TransactionCancel {\n+        public void cancel(EntityManager entityManager);\n+    }\n+  \n+    public class FutureImplementation implements Future<QueryResult> {\n+        private final TransactionCancel transactionCancel;\n+\tprivate final EntityManagerFactory entityManagerFactory;\n+        /**\n+\t * Cancels transaction\n+         */\n+    \t@Override\n+\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n+\t    this.transactionCancel = transactionCancel;\n+\t    this.entityManagerFactory = entityManagerFactory;\n+\t}\n+    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n+            transactionCancel.cancel(entityManagerFactory.createEntityManager());", "originalCommit": "8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f08727cf16a6ab9570bf506573ee9b5995ecb910", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..f0e721383 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n\n@@ -300,19 +309,56 @@ public class SQLQueryEngine extends QueryEngine {\n         public void cancel(EntityManager entityManager);\n     }\n   \n-    public class FutureImplementation implements Future<QueryResult> {\n-        private final TransactionCancel transactionCancel;\n-\tprivate final EntityManagerFactory entityManagerFactory;\n+    public class QueryResultFuture<QueryResult> implements Future<QueryResult> {\n         /**\n-\t * Cancels transaction\n+\t * Future Implementation of Query Result\n          */\n-    \t@Override\n-\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n-\t    this.transactionCancel = transactionCancel;\n-\t    this.entityManagerFactory = entityManagerFactory;\n+\tprivate static enum RESULT {RUNNING, CANCELLED}\n+\tfinal CountDownLatch countDownLatch = new CountDownLatch(1);\n+\tprivate RESUlT Result = RESULT.RUNNING;\t\n+\tprivate QueryResult queryResult;\t\n+\t\n+\tpublic QueryResultFuture() {\n+\t     this.queryResult = queryResult;\n+\t     countDownLatch.countDown();\n \t}\n+\n+        @Override\n+        public QueryResult get() {\n+            countDownLatch.await();\n+            return queryResult;\n+\t}\n+\t\n+\t@Override\n     \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManagerFactory.createEntityManager());\n-    \t}    \t\n+\t    try {\n+            \ttransactionCancel.cancel(entityManager);\n+\t\tResult = RESULT.CANCELLED;\t\n+            \treturn true;\n+            }\n+\t    catch (Exception e) {\n+\t    \tthrow e;\n+            }\n+    \t}\n+\t\n+\t@Override\n+\tboolean isCancelled() {\n+\t    return Result == RESULT.CANCELLED;\n+\t}\n+\n+\t@Override\n+\tboolean isDone() {\n+\t    return true;\n+\t}\n+\n+\t@Override\n+\t@Override\n+\tpublic QueryResult get(long timeout, TimeUnit unit) throws TimeoutException {\n+\t    if (countDownLatch.await(timeout, unit)) {\n+                return queryResult;\n+            } else {\n+                throw new TimeoutException();\n+            }\n+\t}\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3NDcwOA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r436174708", "bodyText": "There are several places where spacing is off.", "author": "aklish", "createdAt": "2020-06-05T21:35:50Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -60,13 +61,14 @@\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n-\n+    private final TransactionCancel transactionCancel;\n     private final SQLReferenceTable referenceTable;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache, TransactionCancel transactionCancel) {\n         super(metaDataStore, cache);\n         this.entityManagerFactory = entityManagerFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n+\tthis.transactionCancel = transactionCancel;", "originalCommit": "8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f08727cf16a6ab9570bf506573ee9b5995ecb910", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..f0e721383 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n\n@@ -63,12 +68,13 @@ public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n     private final TransactionCancel transactionCancel;\n     private final SQLReferenceTable referenceTable;\n+    private final EntityManager entityManager = null;    \n \n     public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache, TransactionCancel transactionCancel) {\n         super(metaDataStore, cache);\n         this.entityManagerFactory = entityManagerFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-\tthis.transactionCancel = transactionCancel;\n+        this.transactionCancel = transactionCancel;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3NTA2MA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r436175060", "bodyText": "An inner class can reference the members of the outer class if it is not static.  There is no need to:\n\nDefine private members\nHave a constructor with arguments.", "author": "aklish", "createdAt": "2020-06-05T21:36:52Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -289,4 +291,28 @@ private SQLQuery toPageTotalSQL(SQLQuery sql) {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n+\n+    /**\n+     * Functional interface for describing a method to supply JpaTransaction.\n+     */\n+    @FunctionalInterface\n+    public interface TransactionCancel {\n+        public void cancel(EntityManager entityManager);\n+    }\n+  \n+    public class FutureImplementation implements Future<QueryResult> {\n+        private final TransactionCancel transactionCancel;", "originalCommit": "8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f08727cf16a6ab9570bf506573ee9b5995ecb910", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..f0e721383 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n\n@@ -300,19 +309,56 @@ public class SQLQueryEngine extends QueryEngine {\n         public void cancel(EntityManager entityManager);\n     }\n   \n-    public class FutureImplementation implements Future<QueryResult> {\n-        private final TransactionCancel transactionCancel;\n-\tprivate final EntityManagerFactory entityManagerFactory;\n+    public class QueryResultFuture<QueryResult> implements Future<QueryResult> {\n         /**\n-\t * Cancels transaction\n+\t * Future Implementation of Query Result\n          */\n-    \t@Override\n-\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n-\t    this.transactionCancel = transactionCancel;\n-\t    this.entityManagerFactory = entityManagerFactory;\n+\tprivate static enum RESULT {RUNNING, CANCELLED}\n+\tfinal CountDownLatch countDownLatch = new CountDownLatch(1);\n+\tprivate RESUlT Result = RESULT.RUNNING;\t\n+\tprivate QueryResult queryResult;\t\n+\t\n+\tpublic QueryResultFuture() {\n+\t     this.queryResult = queryResult;\n+\t     countDownLatch.countDown();\n \t}\n+\n+        @Override\n+        public QueryResult get() {\n+            countDownLatch.await();\n+            return queryResult;\n+\t}\n+\t\n+\t@Override\n     \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManagerFactory.createEntityManager());\n-    \t}    \t\n+\t    try {\n+            \ttransactionCancel.cancel(entityManager);\n+\t\tResult = RESULT.CANCELLED;\t\n+            \treturn true;\n+            }\n+\t    catch (Exception e) {\n+\t    \tthrow e;\n+            }\n+    \t}\n+\t\n+\t@Override\n+\tboolean isCancelled() {\n+\t    return Result == RESULT.CANCELLED;\n+\t}\n+\n+\t@Override\n+\tboolean isDone() {\n+\t    return true;\n+\t}\n+\n+\t@Override\n+\t@Override\n+\tpublic QueryResult get(long timeout, TimeUnit unit) throws TimeoutException {\n+\t    if (countDownLatch.await(timeout, unit)) {\n+                return queryResult;\n+            } else {\n+                throw new TimeoutException();\n+            }\n+\t}\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3NTUzMw==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r436175533", "bodyText": "Let's find a better name than FutureImplementation.  How about QueryResultFuture?", "author": "aklish", "createdAt": "2020-06-05T21:38:06Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -289,4 +291,28 @@ private SQLQuery toPageTotalSQL(SQLQuery sql) {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n+\n+    /**\n+     * Functional interface for describing a method to supply JpaTransaction.\n+     */\n+    @FunctionalInterface\n+    public interface TransactionCancel {\n+        public void cancel(EntityManager entityManager);\n+    }\n+  \n+    public class FutureImplementation implements Future<QueryResult> {\n+        private final TransactionCancel transactionCancel;\n+\tprivate final EntityManagerFactory entityManagerFactory;\n+        /**\n+\t * Cancels transaction\n+         */\n+    \t@Override\n+\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {", "originalCommit": "8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f08727cf16a6ab9570bf506573ee9b5995ecb910", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..f0e721383 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n\n@@ -300,19 +309,56 @@ public class SQLQueryEngine extends QueryEngine {\n         public void cancel(EntityManager entityManager);\n     }\n   \n-    public class FutureImplementation implements Future<QueryResult> {\n-        private final TransactionCancel transactionCancel;\n-\tprivate final EntityManagerFactory entityManagerFactory;\n+    public class QueryResultFuture<QueryResult> implements Future<QueryResult> {\n         /**\n-\t * Cancels transaction\n+\t * Future Implementation of Query Result\n          */\n-    \t@Override\n-\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n-\t    this.transactionCancel = transactionCancel;\n-\t    this.entityManagerFactory = entityManagerFactory;\n+\tprivate static enum RESULT {RUNNING, CANCELLED}\n+\tfinal CountDownLatch countDownLatch = new CountDownLatch(1);\n+\tprivate RESUlT Result = RESULT.RUNNING;\t\n+\tprivate QueryResult queryResult;\t\n+\t\n+\tpublic QueryResultFuture() {\n+\t     this.queryResult = queryResult;\n+\t     countDownLatch.countDown();\n \t}\n+\n+        @Override\n+        public QueryResult get() {\n+            countDownLatch.await();\n+            return queryResult;\n+\t}\n+\t\n+\t@Override\n     \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManagerFactory.createEntityManager());\n-    \t}    \t\n+\t    try {\n+            \ttransactionCancel.cancel(entityManager);\n+\t\tResult = RESULT.CANCELLED;\t\n+            \treturn true;\n+            }\n+\t    catch (Exception e) {\n+\t    \tthrow e;\n+            }\n+    \t}\n+\t\n+\t@Override\n+\tboolean isCancelled() {\n+\t    return Result == RESULT.CANCELLED;\n+\t}\n+\n+\t@Override\n+\tboolean isDone() {\n+\t    return true;\n+\t}\n+\n+\t@Override\n+\t@Override\n+\tpublic QueryResult get(long timeout, TimeUnit unit) throws TimeoutException {\n+\t    if (countDownLatch.await(timeout, unit)) {\n+                return queryResult;\n+            } else {\n+                throw new TimeoutException();\n+            }\n+\t}\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3NTY4OQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r436175689", "bodyText": "Add @Override.", "author": "aklish", "createdAt": "2020-06-05T21:38:33Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -289,4 +291,28 @@ private SQLQuery toPageTotalSQL(SQLQuery sql) {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n+\n+    /**\n+     * Functional interface for describing a method to supply JpaTransaction.\n+     */\n+    @FunctionalInterface\n+    public interface TransactionCancel {\n+        public void cancel(EntityManager entityManager);\n+    }\n+  \n+    public class FutureImplementation implements Future<QueryResult> {\n+        private final TransactionCancel transactionCancel;\n+\tprivate final EntityManagerFactory entityManagerFactory;\n+        /**\n+\t * Cancels transaction\n+         */\n+    \t@Override\n+\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n+\t    this.transactionCancel = transactionCancel;\n+\t    this.entityManagerFactory = entityManagerFactory;\n+\t}\n+    \tpublic boolean cancel(boolean mayInterruptIfRunning) {", "originalCommit": "8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f08727cf16a6ab9570bf506573ee9b5995ecb910", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..f0e721383 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n\n@@ -300,19 +309,56 @@ public class SQLQueryEngine extends QueryEngine {\n         public void cancel(EntityManager entityManager);\n     }\n   \n-    public class FutureImplementation implements Future<QueryResult> {\n-        private final TransactionCancel transactionCancel;\n-\tprivate final EntityManagerFactory entityManagerFactory;\n+    public class QueryResultFuture<QueryResult> implements Future<QueryResult> {\n         /**\n-\t * Cancels transaction\n+\t * Future Implementation of Query Result\n          */\n-    \t@Override\n-\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n-\t    this.transactionCancel = transactionCancel;\n-\t    this.entityManagerFactory = entityManagerFactory;\n+\tprivate static enum RESULT {RUNNING, CANCELLED}\n+\tfinal CountDownLatch countDownLatch = new CountDownLatch(1);\n+\tprivate RESUlT Result = RESULT.RUNNING;\t\n+\tprivate QueryResult queryResult;\t\n+\t\n+\tpublic QueryResultFuture() {\n+\t     this.queryResult = queryResult;\n+\t     countDownLatch.countDown();\n \t}\n+\n+        @Override\n+        public QueryResult get() {\n+            countDownLatch.await();\n+            return queryResult;\n+\t}\n+\t\n+\t@Override\n     \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManagerFactory.createEntityManager());\n-    \t}    \t\n+\t    try {\n+            \ttransactionCancel.cancel(entityManager);\n+\t\tResult = RESULT.CANCELLED;\t\n+            \treturn true;\n+            }\n+\t    catch (Exception e) {\n+\t    \tthrow e;\n+            }\n+    \t}\n+\t\n+\t@Override\n+\tboolean isCancelled() {\n+\t    return Result == RESULT.CANCELLED;\n+\t}\n+\n+\t@Override\n+\tboolean isDone() {\n+\t    return true;\n+\t}\n+\n+\t@Override\n+\t@Override\n+\tpublic QueryResult get(long timeout, TimeUnit unit) throws TimeoutException {\n+\t    if (countDownLatch.await(timeout, unit)) {\n+                return queryResult;\n+            } else {\n+                throw new TimeoutException();\n+            }\n+\t}\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3NjMwMA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r436176300", "bodyText": "I don't see the implementation of executeQuery that returns a Future here.", "author": "aklish", "createdAt": "2020-06-05T21:40:26Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -60,13 +61,14 @@\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n-\n+    private final TransactionCancel transactionCancel;", "originalCommit": "8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f08727cf16a6ab9570bf506573ee9b5995ecb910", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..f0e721383 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n\n@@ -63,12 +68,13 @@ public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n     private final TransactionCancel transactionCancel;\n     private final SQLReferenceTable referenceTable;\n+    private final EntityManager entityManager = null;    \n \n     public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache, TransactionCancel transactionCancel) {\n         super(metaDataStore, cache);\n         this.entityManagerFactory = entityManagerFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-\tthis.transactionCancel = transactionCancel;\n+        this.transactionCancel = transactionCancel;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3Njg4NQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r436176885", "bodyText": "You are missing a lot of the other Future functions.  There is more than just cancel.", "author": "aklish", "createdAt": "2020-06-05T21:42:10Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -289,4 +291,28 @@ private SQLQuery toPageTotalSQL(SQLQuery sql) {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n+\n+    /**\n+     * Functional interface for describing a method to supply JpaTransaction.\n+     */\n+    @FunctionalInterface\n+    public interface TransactionCancel {\n+        public void cancel(EntityManager entityManager);\n+    }\n+  \n+    public class FutureImplementation implements Future<QueryResult> {\n+        private final TransactionCancel transactionCancel;\n+\tprivate final EntityManagerFactory entityManagerFactory;\n+        /**\n+\t * Cancels transaction\n+         */\n+    \t@Override\n+\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n+\t    this.transactionCancel = transactionCancel;\n+\t    this.entityManagerFactory = entityManagerFactory;\n+\t}\n+    \tpublic boolean cancel(boolean mayInterruptIfRunning) {", "originalCommit": "8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f08727cf16a6ab9570bf506573ee9b5995ecb910", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..f0e721383 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n\n@@ -300,19 +309,56 @@ public class SQLQueryEngine extends QueryEngine {\n         public void cancel(EntityManager entityManager);\n     }\n   \n-    public class FutureImplementation implements Future<QueryResult> {\n-        private final TransactionCancel transactionCancel;\n-\tprivate final EntityManagerFactory entityManagerFactory;\n+    public class QueryResultFuture<QueryResult> implements Future<QueryResult> {\n         /**\n-\t * Cancels transaction\n+\t * Future Implementation of Query Result\n          */\n-    \t@Override\n-\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n-\t    this.transactionCancel = transactionCancel;\n-\t    this.entityManagerFactory = entityManagerFactory;\n+\tprivate static enum RESULT {RUNNING, CANCELLED}\n+\tfinal CountDownLatch countDownLatch = new CountDownLatch(1);\n+\tprivate RESUlT Result = RESULT.RUNNING;\t\n+\tprivate QueryResult queryResult;\t\n+\t\n+\tpublic QueryResultFuture() {\n+\t     this.queryResult = queryResult;\n+\t     countDownLatch.countDown();\n \t}\n+\n+        @Override\n+        public QueryResult get() {\n+            countDownLatch.await();\n+            return queryResult;\n+\t}\n+\t\n+\t@Override\n     \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManagerFactory.createEntityManager());\n-    \t}    \t\n+\t    try {\n+            \ttransactionCancel.cancel(entityManager);\n+\t\tResult = RESULT.CANCELLED;\t\n+            \treturn true;\n+            }\n+\t    catch (Exception e) {\n+\t    \tthrow e;\n+            }\n+    \t}\n+\t\n+\t@Override\n+\tboolean isCancelled() {\n+\t    return Result == RESULT.CANCELLED;\n+\t}\n+\n+\t@Override\n+\tboolean isDone() {\n+\t    return true;\n+\t}\n+\n+\t@Override\n+\t@Override\n+\tpublic QueryResult get(long timeout, TimeUnit unit) throws TimeoutException {\n+\t    if (countDownLatch.await(timeout, unit)) {\n+                return queryResult;\n+            } else {\n+                throw new TimeoutException();\n+            }\n+\t}\n     }\n }\n"}}, {"oid": "f08727cf16a6ab9570bf506573ee9b5995ecb910", "url": "https://github.com/yahoo/elide/commit/f08727cf16a6ab9570bf506573ee9b5995ecb910", "message": "Future implementation", "committedDate": "2020-06-06T00:02:15Z", "type": "commit"}, {"oid": "4e694992ae92fcce5f385921b2180c2c8a5458e4", "url": "https://github.com/yahoo/elide/commit/4e694992ae92fcce5f385921b2180c2c8a5458e4", "message": "adding Future Task", "committedDate": "2020-06-09T21:35:10Z", "type": "commit"}, {"oid": "b69bb59dc6373110fb697c9f912cc73857df7c26", "url": "https://github.com/yahoo/elide/commit/b69bb59dc6373110fb697c9f912cc73857df7c26", "message": "adding Future Task", "committedDate": "2020-06-09T22:09:12Z", "type": "commit"}, {"oid": "65af8b243bc06462059e6c1977505db4efcf5388", "url": "https://github.com/yahoo/elide/commit/65af8b243bc06462059e6c1977505db4efcf5388", "message": "adding Future Task", "committedDate": "2020-06-09T22:33:27Z", "type": "commit"}, {"oid": "8064be350bc30ffb58923074f4a08d143f3c21c5", "url": "https://github.com/yahoo/elide/commit/8064be350bc30ffb58923074f4a08d143f3c21c5", "message": "fixing future implementation", "committedDate": "2020-06-10T17:04:53Z", "type": "commit"}, {"oid": "e34abc31bbdf2ddbdb8dc969684bc3c0c624c3c6", "url": "https://github.com/yahoo/elide/commit/e34abc31bbdf2ddbdb8dc969684bc3c0c624c3c6", "message": "fixing future implementation", "committedDate": "2020-06-10T18:05:10Z", "type": "commit"}, {"oid": "4c63c3d82c2ec38784396bc1fd4ca2d8b18dd891", "url": "https://github.com/yahoo/elide/commit/4c63c3d82c2ec38784396bc1fd4ca2d8b18dd891", "message": "fixing future implementation", "committedDate": "2020-06-10T18:07:37Z", "type": "commit"}, {"oid": "4688f151689cff2275c12a329d38538c7ad565f6", "url": "https://github.com/yahoo/elide/commit/4688f151689cff2275c12a329d38538c7ad565f6", "message": "fixing future implementation", "committedDate": "2020-06-10T18:55:24Z", "type": "commit"}, {"oid": "82d67de6ec5eec028d55c9df130c44932fedfe53", "url": "https://github.com/yahoo/elide/commit/82d67de6ec5eec028d55c9df130c44932fedfe53", "message": "fixing future implementation", "committedDate": "2020-06-10T19:02:28Z", "type": "commit"}, {"oid": "c637d51fba403ac0e2c8fad524d4ea781e985951", "url": "https://github.com/yahoo/elide/commit/c637d51fba403ac0e2c8fad524d4ea781e985951", "message": "fixing issues", "committedDate": "2020-06-10T21:39:13Z", "type": "commit"}, {"oid": "3ea7627e62a20cc5592eae3bf24453e210b79cd9", "url": "https://github.com/yahoo/elide/commit/3ea7627e62a20cc5592eae3bf24453e210b79cd9", "message": "fixing issues", "committedDate": "2020-06-10T22:01:16Z", "type": "commit"}, {"oid": "ffb6b1c36820405ee659715b424ba9fffeb98848", "url": "https://github.com/yahoo/elide/commit/ffb6b1c36820405ee659715b424ba9fffeb98848", "message": "fixing issues", "committedDate": "2020-06-10T22:05:31Z", "type": "commit"}, {"oid": "3cd05225a53f92969d1ad2e198bcc69a8bbf6553", "url": "https://github.com/yahoo/elide/commit/3cd05225a53f92969d1ad2e198bcc69a8bbf6553", "message": "fixing issues", "committedDate": "2020-06-11T00:50:38Z", "type": "commit"}, {"oid": "29a38cdada5722b35cd77d0afa75b6a83402edcc", "url": "https://github.com/yahoo/elide/commit/29a38cdada5722b35cd77d0afa75b6a83402edcc", "message": "fixing issues", "committedDate": "2020-06-11T00:55:14Z", "type": "commit"}, {"oid": "db6c4df81cfb8cccb5e68525a34a81e9dbac1615", "url": "https://github.com/yahoo/elide/commit/db6c4df81cfb8cccb5e68525a34a81e9dbac1615", "message": "fixing issues", "committedDate": "2020-06-11T01:12:50Z", "type": "commit"}, {"oid": "68abcb04edd68bd0f0ea6af213cc5e78fe3c1031", "url": "https://github.com/yahoo/elide/commit/68abcb04edd68bd0f0ea6af213cc5e78fe3c1031", "message": "fixing issues", "committedDate": "2020-06-11T01:27:34Z", "type": "commit"}, {"oid": "3ebdbab6e70fcaf1d59b9ebb0981c0c121a88b03", "url": "https://github.com/yahoo/elide/commit/3ebdbab6e70fcaf1d59b9ebb0981c0c121a88b03", "message": "fixing issues", "committedDate": "2020-06-11T01:43:40Z", "type": "commit"}, {"oid": "7d139dd8d8e92c95d0b8f84fa9d055008d19a276", "url": "https://github.com/yahoo/elide/commit/7d139dd8d8e92c95d0b8f84fa9d055008d19a276", "message": "fixing issues", "committedDate": "2020-06-11T03:10:16Z", "type": "commit"}, {"oid": "9e0ab2803bf8ac47057c1034d4d1959febdbf99a", "url": "https://github.com/yahoo/elide/commit/9e0ab2803bf8ac47057c1034d4d1959febdbf99a", "message": "fixing issues", "committedDate": "2020-06-11T03:21:38Z", "type": "commit"}, {"oid": "a8a42cd685b6b84d87214b0a08760ed7f087499b", "url": "https://github.com/yahoo/elide/commit/a8a42cd685b6b84d87214b0a08760ed7f087499b", "message": "fixing issues", "committedDate": "2020-06-11T03:28:35Z", "type": "commit"}, {"oid": "ffe953c5821f3ca64e149b0920ec0f47ee862d81", "url": "https://github.com/yahoo/elide/commit/ffe953c5821f3ca64e149b0920ec0f47ee862d81", "message": "fixing issues", "committedDate": "2020-06-11T03:35:13Z", "type": "commit"}, {"oid": "3fee0a69a9fbf86639427c06f3c1675cd95d7abb", "url": "https://github.com/yahoo/elide/commit/3fee0a69a9fbf86639427c06f3c1675cd95d7abb", "message": "fixing issues", "committedDate": "2020-06-11T03:49:26Z", "type": "commit"}, {"oid": "24a43c7260331ffdf3b6a62853a3601a983a5f63", "url": "https://github.com/yahoo/elide/commit/24a43c7260331ffdf3b6a62853a3601a983a5f63", "message": "fixing issues", "committedDate": "2020-06-11T03:52:03Z", "type": "commit"}, {"oid": "9a6dbc1186dfd5231d531fe04795a27b68f4fcd2", "url": "https://github.com/yahoo/elide/commit/9a6dbc1186dfd5231d531fe04795a27b68f4fcd2", "message": "fixing issues", "committedDate": "2020-06-11T04:44:12Z", "type": "commit"}, {"oid": "07810b7bffcba1c415accbeada4401a05592beca", "url": "https://github.com/yahoo/elide/commit/07810b7bffcba1c415accbeada4401a05592beca", "message": "fixing issues", "committedDate": "2020-06-11T05:06:25Z", "type": "commit"}, {"oid": "c210de6174fbb8680f4aa6a04ae3adeda9f90e7d", "url": "https://github.com/yahoo/elide/commit/c210de6174fbb8680f4aa6a04ae3adeda9f90e7d", "message": "fixing issues", "committedDate": "2020-06-11T05:22:27Z", "type": "commit"}, {"oid": "18a8cc9d0da96a239329ca6b6c4b7eecee346b8e", "url": "https://github.com/yahoo/elide/commit/18a8cc9d0da96a239329ca6b6c4b7eecee346b8e", "message": "fixing issues", "committedDate": "2020-06-11T05:49:07Z", "type": "commit"}, {"oid": "310d11332a6723ae95ce225bfbec09597935909b", "url": "https://github.com/yahoo/elide/commit/310d11332a6723ae95ce225bfbec09597935909b", "message": "fixing issues", "committedDate": "2020-06-11T06:22:02Z", "type": "commit"}, {"oid": "da7ea017126a52888a1be9b1b4aa5c084a8700bd", "url": "https://github.com/yahoo/elide/commit/da7ea017126a52888a1be9b1b4aa5c084a8700bd", "message": "fixing issues", "committedDate": "2020-06-11T06:25:43Z", "type": "commit"}, {"oid": "9e8f8450a484566ff07562918af320fbffa4c5ed", "url": "https://github.com/yahoo/elide/commit/9e8f8450a484566ff07562918af320fbffa4c5ed", "message": "fixing issues", "committedDate": "2020-06-11T06:49:39Z", "type": "commit"}, {"oid": "f287eb56a4bde971ba3121faf61d3c579827e2cd", "url": "https://github.com/yahoo/elide/commit/f287eb56a4bde971ba3121faf61d3c579827e2cd", "message": "fixing issues", "committedDate": "2020-06-11T07:09:21Z", "type": "commit"}, {"oid": "479ad805c404204be32af9870b7bf439d3cf6862", "url": "https://github.com/yahoo/elide/commit/479ad805c404204be32af9870b7bf439d3cf6862", "message": "fixing issues", "committedDate": "2020-06-11T07:29:28Z", "type": "commit"}, {"oid": "c492c68cc1cd98c7ae88b9286a345b73443a8af3", "url": "https://github.com/yahoo/elide/commit/c492c68cc1cd98c7ae88b9286a345b73443a8af3", "message": "fixing bugs", "committedDate": "2020-06-11T14:34:20Z", "type": "commit"}, {"oid": "6b630aaf4f5175e7587005b180b5617e104cd172", "url": "https://github.com/yahoo/elide/commit/6b630aaf4f5175e7587005b180b5617e104cd172", "message": "fixing issues", "committedDate": "2020-06-11T14:40:52Z", "type": "commit"}, {"oid": "3716a136a00ca61ed4365003e1ccad69f61fc6d3", "url": "https://github.com/yahoo/elide/commit/3716a136a00ca61ed4365003e1ccad69f61fc6d3", "message": "fixing issues", "committedDate": "2020-06-11T14:52:59Z", "type": "commit"}, {"oid": "26f34ef28a3beaf029049dd3beec09acf765d0df", "url": "https://github.com/yahoo/elide/commit/26f34ef28a3beaf029049dd3beec09acf765d0df", "message": "fixing issues", "committedDate": "2020-06-11T15:08:02Z", "type": "commit"}, {"oid": "a4f5aecf8e7d441dc3839c820184852cdac19e2a", "url": "https://github.com/yahoo/elide/commit/a4f5aecf8e7d441dc3839c820184852cdac19e2a", "message": "fixing issues", "committedDate": "2020-06-11T15:23:43Z", "type": "commit"}, {"oid": "471c4d3c04b78a7e762f891c3b8bc8f8cd62c01d", "url": "https://github.com/yahoo/elide/commit/471c4d3c04b78a7e762f891c3b8bc8f8cd62c01d", "message": "fixing bugs", "committedDate": "2020-06-11T15:44:51Z", "type": "commit"}, {"oid": "6f302a834556e9a38bece0c4b6f1bca6173db345", "url": "https://github.com/yahoo/elide/commit/6f302a834556e9a38bece0c4b6f1bca6173db345", "message": "fixing bugs", "committedDate": "2020-06-11T16:05:55Z", "type": "commit"}, {"oid": "e08e565fc31abb27d39659a8381192db2831f858", "url": "https://github.com/yahoo/elide/commit/e08e565fc31abb27d39659a8381192db2831f858", "message": "fixing bugs", "committedDate": "2020-06-11T16:26:12Z", "type": "commit"}, {"oid": "dbc78efebfee88fee8f9052ca71b03de71d4361c", "url": "https://github.com/yahoo/elide/commit/dbc78efebfee88fee8f9052ca71b03de71d4361c", "message": "fixing bugs", "committedDate": "2020-06-11T16:57:40Z", "type": "commit"}, {"oid": "e5069401f814dc776db4b3487dfa8b8a7f7b1f09", "url": "https://github.com/yahoo/elide/commit/e5069401f814dc776db4b3487dfa8b8a7f7b1f09", "message": "fixing bugs", "committedDate": "2020-06-11T17:13:24Z", "type": "commit"}, {"oid": "4cdd85204ff743b88bbdc0422484c5730888a136", "url": "https://github.com/yahoo/elide/commit/4cdd85204ff743b88bbdc0422484c5730888a136", "message": "fixing bugs", "committedDate": "2020-06-11T17:33:46Z", "type": "commit"}, {"oid": "86c33d3c97613f23a745dff57f381775d776d1c6", "url": "https://github.com/yahoo/elide/commit/86c33d3c97613f23a745dff57f381775d776d1c6", "message": "fixing bugs", "committedDate": "2020-06-11T17:59:11Z", "type": "commit"}, {"oid": "97ae6a5c40ca2d4afdc72228d181f8c115f77c48", "url": "https://github.com/yahoo/elide/commit/97ae6a5c40ca2d4afdc72228d181f8c115f77c48", "message": "fixing bugs", "committedDate": "2020-06-11T18:11:42Z", "type": "commit"}, {"oid": "d54810e706258af15b2411b879d8c33ad66f6772", "url": "https://github.com/yahoo/elide/commit/d54810e706258af15b2411b879d8c33ad66f6772", "message": "ExecutionException", "committedDate": "2020-06-11T18:29:12Z", "type": "commit"}, {"oid": "a285916e33b17f94ef6c9d76dd39cf45ad365d25", "url": "https://github.com/yahoo/elide/commit/a285916e33b17f94ef6c9d76dd39cf45ad365d25", "message": "fixing issues", "committedDate": "2020-06-11T21:49:27Z", "type": "commit"}, {"oid": "6d62363e7c52af8ec7d45eb0c06a7c22bdcf9bc0", "url": "https://github.com/yahoo/elide/commit/6d62363e7c52af8ec7d45eb0c06a7c22bdcf9bc0", "message": "aggregation changes", "committedDate": "2020-06-11T22:44:35Z", "type": "commit"}, {"oid": "b8996a29ba6b51f4a375860b1a17bf103ca2de92", "url": "https://github.com/yahoo/elide/commit/b8996a29ba6b51f4a375860b1a17bf103ca2de92", "message": "aggregation changes", "committedDate": "2020-06-11T23:02:00Z", "type": "commit"}, {"oid": "f7097877104df197c860dc14db785fbad533d5ee", "url": "https://github.com/yahoo/elide/commit/f7097877104df197c860dc14db785fbad533d5ee", "message": "aggregation changes", "committedDate": "2020-06-11T23:29:20Z", "type": "commit"}, {"oid": "3123771c5f0dd5b3f4684a3315f57c941aa3a1f4", "url": "https://github.com/yahoo/elide/commit/3123771c5f0dd5b3f4684a3315f57c941aa3a1f4", "message": "fixing bugs", "committedDate": "2020-06-12T03:12:42Z", "type": "commit"}, {"oid": "bf243848d8af7942dbef80d6cd6f8b0e2c5a2ea4", "url": "https://github.com/yahoo/elide/commit/bf243848d8af7942dbef80d6cd6f8b0e2c5a2ea4", "message": "fixing bugs", "committedDate": "2020-06-12T03:18:44Z", "type": "commit"}, {"oid": "43ce9e801ed051344593d1af60db17481904b045", "url": "https://github.com/yahoo/elide/commit/43ce9e801ed051344593d1af60db17481904b045", "message": "fixing bugs", "committedDate": "2020-06-12T03:42:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MjAyOQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439492029", "bodyText": "Can you mention in the comments that the implementation must be thread-safe?", "author": "aklish", "createdAt": "2020-06-12T15:34:55Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java", "diffHunk": "@@ -267,4 +267,9 @@ default boolean supportsPagination(Class<?> entityClass, FilterExpression expres\n      * @return UUID id\n      */\n     UUID getRequestId();\n+\n+    /**\n+     * cancel running transaction", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\nindex a18f6995b..3c55ced35 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n\n@@ -269,7 +269,8 @@ public interface DataStoreTransaction extends Closeable {\n     UUID getRequestId();\n \n     /**\n-     * cancel running transaction\n+     * Cancel running transaction.\n+     * Thread-safe implementation\n      */\n     void cancel();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MjQ3Nw==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439492477", "bodyText": "You don't need to call run() here.  Calling queryResult.get() should invoke queryResult.run()", "author": "aklish", "createdAt": "2020-06-12T15:35:44Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java", "diffHunk": "@@ -52,11 +56,21 @@ public void createObject(Object entity, RequestScope scope) {\n     @Override\n     public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n         Query query = buildQuery(entityProjection, scope);\n-        QueryResult result = queryEngine.executeQuery(query);\n-        if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n-            entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+        queryResult = queryEngine.executeQuery(query);\n+        queryResult.run();", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 979ed0247..a4fe2cefa 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n\n@@ -56,30 +62,35 @@ public class AggregationDataStoreTransaction extends DataStoreTransactionImpleme\n     @Override\n     public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n         Query query = buildQuery(entityProjection, scope);\n-        queryResult = queryEngine.executeQuery(query);\n-        queryResult.run();\n-        try {\n-            QueryResult result = queryResult.get();\n-            if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n-                entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+        QueryResult result = null;\n+\n+        String cacheKey = null;\n+        if (cache != null && !query.isBypassingCache()) {\n+            String tableVersion = queryEngine.getTableVersion(query.getTable(), queryEngineTransaction);\n+            if (tableVersion != null) {\n+                cacheKey = tableVersion + ';' + QueryKeyExtractor.extractKey(query);\n+                result = cache.get(cacheKey);\n+            }\n+        }\n+        if (result == null) {\n+            result = queryEngine.executeQuery(query, queryEngineTransaction);\n+            if (cacheKey != null) {\n+                cache.put(cacheKey, result);\n             }\n-            return result.getData();\n-        } catch (TransactionException e) {\n-            throw new TransactionException(null);\n-        } catch (InterruptedException e) {\n-            throw new IllegalStateException(e);\n-        } catch (ExecutionException e) {\n-            throw new IllegalStateException(e);\n         }\n+        if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n+            entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+        }\n+        return result.getData();\n     }\n \n     @Override\n     public void close() throws IOException {\n-\n+        queryEngineTransaction.close();\n     }\n \n     @VisibleForTesting\n-    private Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n+    Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n         Table table = queryEngine.getTable(scope.getDictionary().getJsonAliasFor(entityProjection.getType()));\n         EntityProjectionTranslator translator = new EntityProjectionTranslator(\n                 queryEngine,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5Mjk0NA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439492944", "bodyText": "Don't set null here.", "author": "aklish", "createdAt": "2020-06-12T15:36:36Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java", "diffHunk": "@@ -52,11 +56,21 @@ public void createObject(Object entity, RequestScope scope) {\n     @Override\n     public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n         Query query = buildQuery(entityProjection, scope);\n-        QueryResult result = queryEngine.executeQuery(query);\n-        if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n-            entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+        queryResult = queryEngine.executeQuery(query);\n+        queryResult.run();\n+        try {\n+            QueryResult result = queryResult.get();\n+            if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n+                entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+            }\n+            return result.getData();\n+        } catch (TransactionException e) {\n+            throw new TransactionException(null);", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 979ed0247..a4fe2cefa 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n\n@@ -56,30 +62,35 @@ public class AggregationDataStoreTransaction extends DataStoreTransactionImpleme\n     @Override\n     public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n         Query query = buildQuery(entityProjection, scope);\n-        queryResult = queryEngine.executeQuery(query);\n-        queryResult.run();\n-        try {\n-            QueryResult result = queryResult.get();\n-            if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n-                entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+        QueryResult result = null;\n+\n+        String cacheKey = null;\n+        if (cache != null && !query.isBypassingCache()) {\n+            String tableVersion = queryEngine.getTableVersion(query.getTable(), queryEngineTransaction);\n+            if (tableVersion != null) {\n+                cacheKey = tableVersion + ';' + QueryKeyExtractor.extractKey(query);\n+                result = cache.get(cacheKey);\n+            }\n+        }\n+        if (result == null) {\n+            result = queryEngine.executeQuery(query, queryEngineTransaction);\n+            if (cacheKey != null) {\n+                cache.put(cacheKey, result);\n             }\n-            return result.getData();\n-        } catch (TransactionException e) {\n-            throw new TransactionException(null);\n-        } catch (InterruptedException e) {\n-            throw new IllegalStateException(e);\n-        } catch (ExecutionException e) {\n-            throw new IllegalStateException(e);\n         }\n+        if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n+            entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+        }\n+        return result.getData();\n     }\n \n     @Override\n     public void close() throws IOException {\n-\n+        queryEngineTransaction.close();\n     }\n \n     @VisibleForTesting\n-    private Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n+    Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n         Table table = queryEngine.getTable(scope.getDictionary().getJsonAliasFor(entityProjection.getType()));\n         EntityProjectionTranslator translator = new EntityProjectionTranslator(\n                 queryEngine,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5Mzk1NQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439493955", "bodyText": "cache is much more readable than cx.  Can you revert back to the more readable variable names?", "author": "aklish", "createdAt": "2020-06-12T15:38:23Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -60,13 +62,15 @@\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n-\n+    private final TransactionCancel transactionCancel;\n     private final SQLReferenceTable referenceTable;\n+    private EntityManager entityManager;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache) {\n-        super(metaDataStore, cache);\n-        this.entityManagerFactory = entityManagerFactory;\n-        this.referenceTable = new SQLReferenceTable(metaDataStore);\n+    public SQLQueryEngine(MetaDataStore mDStore, EntityManagerFactory emFactory, Cache cx, TransactionCancel txCancel) {", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NDEwNA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439494104", "bodyText": "Same for mDStore, qEngine, emFactory, etc.", "author": "aklish", "createdAt": "2020-06-12T15:38:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5Mzk1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex d61cdea2c..b63187a63 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n\n@@ -64,13 +62,12 @@ public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n     private final TransactionCancel transactionCancel;\n     private final SQLReferenceTable referenceTable;\n-    private EntityManager entityManager;\n \n-    public SQLQueryEngine(MetaDataStore mDStore, EntityManagerFactory emFactory, Cache cx, TransactionCancel txCancel) {\n-        super(mDStore, cx);\n-        this.entityManagerFactory = emFactory;\n-        this.referenceTable = new SQLReferenceTable(mDStore);\n-        this.transactionCancel = txCancel;\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, TransactionCancel txCancel) {\n+        super(metaDataStore);\n+        this.entityManagerFactory = entityManagerFactory;\n+        this.referenceTable = new SQLReferenceTable(metaDataStore);\n+\tthis.transactionCancel = txCancel;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NTY3Mg==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439495672", "bodyText": "This inner class is missing javadoc.  The linter will complain.", "author": "aklish", "createdAt": "2020-06-12T15:41:21Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -289,4 +302,27 @@ private SQLQuery toPageTotalSQL(SQLQuery sql) {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n+\n+    /**\n+     * Functional interface for describing a method to supply JpaTransaction.\n+     */\n+    @FunctionalInterface\n+    public interface TransactionCancel {\n+        public void cancel(EntityManager entityManager);\n+    }\n+\n+    public class QueryResultFuture<V> extends FutureTask<V> {", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex d61cdea2c..b63187a63 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n\n@@ -310,19 +343,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public interface TransactionCancel {\n         public void cancel(EntityManager entityManager);\n     }\n-\n-    public class QueryResultFuture<V> extends FutureTask<V> {\n-        /**\n-         * FutureTask Implementation of Query Result.\n-         */\n-         public QueryResultFuture(Callable<V> callable) {\n-             super(callable);\n-         }\n-\n-        @Override\n-        public boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManager);\n-            return super.cancel(true);\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NzQxOQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439497419", "bodyText": "This code is violating DRY (do not repeat yourself).  Make a function in this class to avoid repeating the same block over and over.", "author": "aklish", "createdAt": "2020-06-12T15:44:44Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java", "diffHunk": "@@ -55,8 +58,20 @@ public void testFullTableLoad() {\n                 .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.DAY))\n                 .build();\n \n-        List<Object> results = StreamSupport.stream(engine.executeQuery(query).getData().spliterator(), false)\n+        List<Object> results;\n+        FutureTask<QueryResult> queryResult = engine.executeQuery(query);\n+        queryResult.run();", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\nindex 2636feb5a..2ba98ccea 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n\n@@ -50,7 +45,7 @@ public class QueryEngineTest extends SQLUnitTest {\n      * Test loading all three records from the table.\n      */\n     @Test\n-    public void testFullTableLoad() {\n+    public void testFullTableLoad() throws Exception {\n         Query query = Query.builder()\n                 .table(playerStatsTable)\n                 .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5Nzc5MA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439497790", "bodyText": "Remove all references to queryResult.run() in this PR.", "author": "aklish", "createdAt": "2020-06-12T15:45:25Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java", "diffHunk": "@@ -87,7 +92,10 @@ public void testJoinToFilter() throws Exception {\n                         PlayerStats.class, false))\n                 .build();\n \n-        List<Object> results = StreamSupport.stream(engine.executeQuery(query).getData().spliterator(), false)\n+        FutureTask<QueryResult> queryResult = engine.executeQuery(query);\n+        queryResult.run();", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5ODM3MA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439498370", "bodyText": "The delta between the original line and your modifications can be just 4 characters:\nList<Object> results = StreamSupport.stream(engine.executeQuery(query).get().getData().spliterator(), false)", "author": "aklish", "createdAt": "2020-06-12T15:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5Nzc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\nindex 24d1c4ce0..6201c6ba9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\n\n@@ -92,11 +84,7 @@ public class SubselectTest extends SQLUnitTest {\n                         PlayerStats.class, false))\n                 .build();\n \n-        FutureTask<QueryResult> queryResult = engine.executeQuery(query);\n-        queryResult.run();\n-        QueryResult result = queryResult.get();\n-        List<Object> results = StreamSupport.stream(result.getData().spliterator(), false)\n-                .collect(Collectors.toList());\n+        List<Object> results = toList(engine.executeQuery(query, transaction).getData());\n \n         PlayerStats stats1 = new PlayerStats();\n         stats1.setId(\"0\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5OTAwMg==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439499002", "bodyText": "For UnitTests, you can simply have the test throw Exception and avoid all these try catch blocks.\nLook at my prior comments - all of this can be changed by just adding 4 characters - without these large blocks of duplicate code.", "author": "aklish", "createdAt": "2020-06-12T15:47:40Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java", "diffHunk": "@@ -46,8 +50,20 @@ public void testViewAttribute() {\n                 .sorting(new SortingImpl(sortMap, PlayerStatsWithView.class, dictionary))\n                 .build();\n \n-        List<Object> results = StreamSupport.stream(engine.executeQuery(query).getData().spliterator(), false)\n+        List<Object> results;\n+        FutureTask<QueryResult> queryResult = engine.executeQuery(query);\n+        queryResult.run();\n+        try {\n+            QueryResult result = queryResult.get();\n+            results = StreamSupport.stream(result.getData().spliterator(), false)\n                 .collect(Collectors.toList());\n+        } catch (TransactionException e) {", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\nindex 212705ac8..ef4267b20 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\n\n@@ -50,20 +44,7 @@ public class ViewTest extends SQLUnitTest {\n                 .sorting(new SortingImpl(sortMap, PlayerStatsWithView.class, dictionary))\n                 .build();\n \n-        List<Object> results;\n-        FutureTask<QueryResult> queryResult = engine.executeQuery(query);\n-        queryResult.run();\n-        try {\n-            QueryResult result = queryResult.get();\n-            results = StreamSupport.stream(result.getData().spliterator(), false)\n-                .collect(Collectors.toList());\n-        } catch (TransactionException e) {\n-            throw new TransactionException(null);\n-        } catch (InterruptedException e) {\n-            throw new IllegalStateException(e);\n-        } catch (ExecutionException e) {\n-            throw new IllegalStateException(e);\n-        }\n+        List<Object> results = toList(engine.executeQuery(query, transaction).getData());\n \n         PlayerStatsWithView usa0 = new PlayerStatsWithView();\n         usa0.setId(\"0\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwMDE2MQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439500161", "bodyText": "You shouldn't need to pass transactionCancel as an argument to the supplier.  When the supplier is created, it can have a reference to transactionSupplier through closure.  Remove this extra argument.", "author": "aklish", "createdAt": "2020-06-12T15:49:47Z", "path": "elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java", "diffHunk": "@@ -73,15 +78,15 @@ public void populateEntityDictionary(EntityDictionary dictionary) {\n     @Override\n     public DataStoreTransaction beginReadTransaction() {\n         EntityManager entityManager = entityManagerSupplier.get();\n-        JpaTransaction transaction = readTransactionSupplier.get(entityManager);\n+        JpaTransaction transaction = readTransactionSupplier.get(entityManager, jpaTransactionCancel);\n         transaction.begin();\n         return transaction;\n     }\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n         EntityManager entityManager = entityManagerSupplier.get();\n-        JpaTransaction transaction = writeTransactionSupplier.get(entityManager);\n+        JpaTransaction transaction = writeTransactionSupplier.get(entityManager, jpaTransactionCancel);", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "chunk": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\nindex e8ecaaf22..daf88dcda 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n\n@@ -78,7 +78,7 @@ public class JpaDataStore implements JPQLDataStore {\n     @Override\n     public DataStoreTransaction beginReadTransaction() {\n         EntityManager entityManager = entityManagerSupplier.get();\n-        JpaTransaction transaction = readTransactionSupplier.get(entityManager, jpaTransactionCancel);\n+        JpaTransaction transaction = readTransactionSupplier.get(entityManager);\n         transaction.begin();\n         return transaction;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwMTIwNQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439501205", "bodyText": "So for example, there is no need to include txCancel as a parameter to the supplier.  Rewrite like:\n(entityManager) -> { return new NonJtaTransaction(entityManager, jpaTransactionCancel); }", "author": "aklish", "createdAt": "2020-06-12T15:51:43Z", "path": "elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java", "diffHunk": "@@ -96,7 +99,8 @@ public JpaDataStoreHarness() {\n \n         store = new JpaDataStore(\n                 () -> { return emf.createEntityManager(); },\n-                (entityManager) -> { return new NonJtaTransaction(entityManager); }\n+                (entityManager, txCancel) -> { return new NonJtaTransaction(entityManager, txCancel); },", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "chunk": "diff --git a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\nindex d44837d6b..c35738d2c 100644\n--- a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n+++ b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n\n@@ -99,8 +99,7 @@ public class JpaDataStoreHarness implements DataStoreTestHarness {\n \n         store = new JpaDataStore(\n                 () -> { return emf.createEntityManager(); },\n-                (entityManager, txCancel) -> { return new NonJtaTransaction(entityManager, txCancel); },\n-                jpaTransactionCancel\n+                (entityManager) -> { return new NonJtaTransaction(entityManager, jpaTransactionCancel); }\n         );\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwMjQzMQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439502431", "bodyText": "Because the signatures are the same, you may be able to define this once as a Function rather than the concrete types above - and just use the single reference below.", "author": "aklish", "createdAt": "2020-06-12T15:54:01Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -56,6 +58,10 @@\n      * @return An instance of ElideDynamicEntityCompiler.\n      * @throws Exception Exception thrown.\n      */\n+\n+     private final AbstractJpaTransaction.JpaTransactionCancel jTC = (e) -> { e.unwrap(Session.class).cancelQuery(); };", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "chunk": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 859b84d88..3e7fd6fe7 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n\n@@ -61,6 +61,7 @@ public class ElideAutoConfiguration {\n \n      private final AbstractJpaTransaction.JpaTransactionCancel jTC = (e) -> { e.unwrap(Session.class).cancelQuery(); };\n      private final SQLQueryEngine.TransactionCancel txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+     //public final Function<AbstractJpaTransaction.JpaTransactionCancel, Void> FUNC = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n     @Bean\n     @ConditionalOnMissingBean\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwMjk0NA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439502944", "bodyText": "Remove txCancel from the supplier.", "author": "aklish", "createdAt": "2020-06-12T15:54:59Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -376,10 +382,10 @@ default AuditLogger getAuditLogger() {\n      */\n     default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n             EntityManagerFactory entityManagerFactory) {\n-\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                (em -> { return new NonJtaTransaction(em); }));\n+                ((em, txCancel) -> { return new NonJtaTransaction(em, txCancel); }),", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "chunk": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7cb6ff25e..28faa41df 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n\n@@ -384,8 +386,7 @@ public interface ElideStandaloneSettings {\n             EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                ((em, txCancel) -> { return new NonJtaTransaction(em, txCancel); }),\n-                JTC);\n+                (em) -> { return new NonJtaTransaction(em, JTC); } );\n \n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwMzE4Ng==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439503186", "bodyText": "See if these can be consolidated into a single variable using one of Java's built in Function classes.", "author": "aklish", "createdAt": "2020-06-12T15:55:22Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -56,6 +58,10 @@\n  */\n public interface ElideStandaloneSettings {\n     /* Elide settings */\n+\n+     public final AbstractJpaTransaction.JpaTransactionCancel JTC = (m) -> { m.unwrap(Session.class).cancelQuery(); };", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "chunk": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7cb6ff25e..28faa41df 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n\n@@ -61,6 +62,7 @@ public interface ElideStandaloneSettings {\n \n      public final AbstractJpaTransaction.JpaTransactionCancel JTC = (m) -> { m.unwrap(Session.class).cancelQuery(); };\n      public final SQLQueryEngine.TransactionCancel TXCANCEL = (m) -> { m.unwrap(Session.class).cancelQuery(); };\n+     //public final Function<AbstractJpaTransaction.JpaTransactionCancel, Void> CANCELFUNCTION = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n     /**\n      * A map containing check mappings for security across Elide. If not provided, then an empty map is used.\n"}}, {"oid": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "url": "https://github.com/yahoo/elide/commit/8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "message": "rebasing", "committedDate": "2020-06-12T23:23:05Z", "type": "commit"}, {"oid": "5094ce020f2de18f1a34294178dd857eba7af5c4", "url": "https://github.com/yahoo/elide/commit/5094ce020f2de18f1a34294178dd857eba7af5c4", "message": "Merge branch 'elide-5.x' into implement-cancel-function", "committedDate": "2020-06-12T23:44:45Z", "type": "commit"}, {"oid": "d7556cb189b6e83070942c10bdaf33054ecc0f71", "url": "https://github.com/yahoo/elide/commit/d7556cb189b6e83070942c10bdaf33054ecc0f71", "message": "adddressing comments", "committedDate": "2020-06-13T04:39:35Z", "type": "commit"}, {"oid": "d6dd7bddcc572305a4c25663c97a26506b81bc86", "url": "https://github.com/yahoo/elide/commit/d6dd7bddcc572305a4c25663c97a26506b81bc86", "message": "adddressing comments", "committedDate": "2020-06-13T04:58:46Z", "type": "commit"}, {"oid": "10b08031c01a3228c6f335ba5b1d51b0da68f8e6", "url": "https://github.com/yahoo/elide/commit/10b08031c01a3228c6f335ba5b1d51b0da68f8e6", "message": "addressing comments", "committedDate": "2020-06-13T04:59:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYyMDI5Ng==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r441620296", "bodyText": "Remove this comment.", "author": "aklish", "createdAt": "2020-06-17T15:08:41Z", "path": "elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java", "diffHunk": "@@ -8,7 +8,7 @@\n import com.yahoo.elide.core.DataStoreTransaction;\n import com.yahoo.elide.core.EntityDictionary;\n import com.yahoo.elide.core.datastore.JPQLDataStore;\n-import com.yahoo.elide.datastores.jpa.transaction.AbstractJpaTransaction;\n+//import com.yahoo.elide.datastores.jpa.transaction.AbstractJpaTransaction;", "originalCommit": "10b08031c01a3228c6f335ba5b1d51b0da68f8e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "127517bb46972dbe127cfd5e32d70439aa385381", "chunk": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\nindex c50018750..71f19da8a 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n\n@@ -8,7 +8,6 @@ package com.yahoo.elide.datastores.jpa;\n import com.yahoo.elide.core.DataStoreTransaction;\n import com.yahoo.elide.core.EntityDictionary;\n import com.yahoo.elide.core.datastore.JPQLDataStore;\n-//import com.yahoo.elide.datastores.jpa.transaction.AbstractJpaTransaction;\n import com.yahoo.elide.datastores.jpa.transaction.JpaTransaction;\n \n import java.util.HashSet;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYyMTI5Ng==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r441621296", "bodyText": "Unify the variable names txCancel and jpaTransactionCancel.", "author": "aklish", "createdAt": "2020-06-17T15:09:57Z", "path": "elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java", "diffHunk": "@@ -22,11 +23,11 @@\n @Slf4j\n public class JtaTransaction extends AbstractJpaTransaction {\n     private final UserTransaction transaction;\n-    public JtaTransaction(EntityManager entityManager, JpaTransactionCancel jpaTransactionCancel) {\n+    public JtaTransaction(EntityManager entityManager, Consumer<EntityManager> jpaTransactionCancel) {\n         this(entityManager, lookupUserTransaction(), jpaTransactionCancel);\n     }\n \n-    public JtaTransaction(EntityManager entityManager, UserTransaction transaction, JpaTransactionCancel txCancel) {\n+    public JtaTransaction(EntityManager entityManager, UserTransaction transaction, Consumer<EntityManager> txCancel) {", "originalCommit": "10b08031c01a3228c6f335ba5b1d51b0da68f8e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "127517bb46972dbe127cfd5e32d70439aa385381", "chunk": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java\nindex 3372a60ee..131e4a5b2 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java\n\n@@ -23,8 +23,8 @@ import javax.transaction.UserTransaction;\n @Slf4j\n public class JtaTransaction extends AbstractJpaTransaction {\n     private final UserTransaction transaction;\n-    public JtaTransaction(EntityManager entityManager, Consumer<EntityManager> jpaTransactionCancel) {\n-        this(entityManager, lookupUserTransaction(), jpaTransactionCancel);\n+    public JtaTransaction(EntityManager entityManager, Consumer<EntityManager> txCancel) {\n+        this(entityManager, lookupUserTransaction(), txCancel);\n     }\n \n     public JtaTransaction(EntityManager entityManager, UserTransaction transaction, Consumer<EntityManager> txCancel) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYyMzU3Mg==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r441623572", "bodyText": "txCancel was a better name than func.  I would change everywhere.", "author": "aklish", "createdAt": "2020-06-17T15:12:43Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -59,8 +60,7 @@\n      * @throws Exception Exception thrown.\n      */\n \n-     private final AbstractJpaTransaction.JpaTransactionCancel jTC = (e) -> { e.unwrap(Session.class).cancelQuery(); };\n-     private final SQLQueryEngine.TransactionCancel txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+     private final Consumer<EntityManager> func = (em) -> { em.unwrap(Session.class).cancelQuery(); };", "originalCommit": "10b08031c01a3228c6f335ba5b1d51b0da68f8e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "127517bb46972dbe127cfd5e32d70439aa385381", "chunk": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 6d992dade..bf98cbb1f 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n\n@@ -60,7 +60,7 @@ public class ElideAutoConfiguration {\n      * @throws Exception Exception thrown.\n      */\n \n-     private final Consumer<EntityManager> func = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+     private final Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n     @Bean\n     @ConditionalOnMissingBean\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYyNDI5NQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r441624295", "bodyText": "Rename to TXCANCEL", "author": "aklish", "createdAt": "2020-06-17T15:13:33Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -59,8 +59,7 @@\n public interface ElideStandaloneSettings {\n     /* Elide settings */\n \n-     public final AbstractJpaTransaction.JpaTransactionCancel JTC = (m) -> { m.unwrap(Session.class).cancelQuery(); };\n-     public final SQLQueryEngine.TransactionCancel TXCANCEL = (m) -> { m.unwrap(Session.class).cancelQuery(); };\n+     public final Consumer<EntityManager> FUNC = (em) -> { em.unwrap(Session.class).cancelQuery(); };", "originalCommit": "10b08031c01a3228c6f335ba5b1d51b0da68f8e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "127517bb46972dbe127cfd5e32d70439aa385381", "chunk": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7e16c486e..7e9a2aeb8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n\n@@ -59,7 +59,7 @@ import javax.persistence.EntityManagerFactory;\n public interface ElideStandaloneSettings {\n     /* Elide settings */\n \n-     public final Consumer<EntityManager> FUNC = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+     public final Consumer<EntityManager> TXCANCEL = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n     /**\n      * A map containing check mappings for security across Elide. If not provided, then an empty map is used.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYyNTA0NA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r441625044", "bodyText": "Let's add javadoc for cancel (close isn't needed because it is an Override).", "author": "aklish", "createdAt": "2020-06-17T15:14:37Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -157,6 +156,7 @@ private void populateMetaData(MetaDataStore metaDataStore) {\n     public interface Transaction extends AutoCloseable {\n         @Override\n         void close();\n+        void cancel();", "originalCommit": "10b08031c01a3228c6f335ba5b1d51b0da68f8e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "127517bb46972dbe127cfd5e32d70439aa385381", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 5338bc3ad..74c41318f 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n\n@@ -156,6 +156,10 @@ public abstract class QueryEngine {\n     public interface Transaction extends AutoCloseable {\n         @Override\n         void close();\n+\n+        /**\n+         * Cancels running transaction\n+         */\n         void cancel();\n     }\n \n"}}, {"oid": "127517bb46972dbe127cfd5e32d70439aa385381", "url": "https://github.com/yahoo/elide/commit/127517bb46972dbe127cfd5e32d70439aa385381", "message": "addressing comments", "committedDate": "2020-06-17T15:57:56Z", "type": "commit"}]}