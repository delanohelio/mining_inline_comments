{"pr_number": 1407, "pr_title": "Carbon 213 - Add Category to table and columns", "pr_createdAt": "2020-06-30T02:31:33Z", "pr_url": "https://github.com/yahoo/elide/pull/1407", "timeline": [{"oid": "901e2fdf6e3c7038ed9c329d426936649b8d4d0d", "url": "https://github.com/yahoo/elide/commit/901e2fdf6e3c7038ed9c329d426936649b8d4d0d", "message": "add category to aggregate", "committedDate": "2020-06-26T19:52:58Z", "type": "commit"}, {"oid": "eb81cebe77735efc5a13e493dd95afb3d1204353", "url": "https://github.com/yahoo/elide/commit/eb81cebe77735efc5a13e493dd95afb3d1204353", "message": "initial working code", "committedDate": "2020-06-29T22:27:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2MzY4Ng==", "url": "https://github.com/yahoo/elide/pull/1407#discussion_r447963686", "bodyText": "WHy do MetricFunctions need categories - when the associated metric already has one?", "author": "aklish", "createdAt": "2020-06-30T20:37:10Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/MetricFunction.java", "diffHunk": "@@ -30,6 +30,8 @@\n \n     private String description;\n \n+    private String category;", "originalCommit": "eb81cebe77735efc5a13e493dd95afb3d1204353", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3MTkwMA==", "url": "https://github.com/yahoo/elide/pull/1407#discussion_r447971900", "bodyText": "#1005 (comment) i saw this in the RFC", "author": "ayeswarya", "createdAt": "2020-06-30T20:52:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2MzY4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1214273eca1fa38e8621023b1b5d6ec9e9375ed1", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/MetricFunction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/MetricFunction.java\nindex 377048b2d..0b68d8b21 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/MetricFunction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/MetricFunction.java\n\n@@ -30,8 +30,6 @@ public class MetricFunction {\n \n     private String description;\n \n-    private String category;\n-\n     private String expression;\n \n     @OneToMany\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NDkxMw==", "url": "https://github.com/yahoo/elide/pull/1407#discussion_r447964913", "bodyText": "This looks like a separate test.  Let's not complicate existing tests by joining them together.  Also, there are already metadata tests - let's see how this new test relates to those.", "author": "aklish", "createdAt": "2020-06-30T20:39:44Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/AggregationDataStoreIntegrationTest.java", "diffHunk": "@@ -749,6 +748,24 @@ public void metaDataTest() {\n                 .body(\"data.attributes.expression\",  equalTo(\"player.name\"))\n                 .body(\"data.relationships.table.data.id\", equalTo(\"playerStats\"));\n \n+        given()", "originalCommit": "eb81cebe77735efc5a13e493dd95afb3d1204353", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "282b1a764c0b46b42ab75f5d2992f702cf2765c3", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/AggregationDataStoreIntegrationTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/AggregationDataStoreIntegrationTest.java\nindex e747b6497..5d091bb6b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/AggregationDataStoreIntegrationTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/AggregationDataStoreIntegrationTest.java\n\n@@ -748,39 +753,10 @@ public class AggregationDataStoreIntegrationTest extends IntegrationTest {\n                 .body(\"data.attributes.expression\",  equalTo(\"player.name\"))\n                 .body(\"data.relationships.table.data.id\", equalTo(\"playerStats\"));\n \n-        given()\n-                .accept(\"application/vnd.api+json\")\n-                .get(\"/metric/playerStats.highScore?include=metricFunction\")\n-                .then()\n-                .statusCode(HttpStatus.SC_OK)\n-                .body(\"data.attributes.name\", equalTo(\"highScore\"))\n-                .body(\"data.attributes.valueType\",  equalTo(\"INTEGER\"))\n-                .body(\"data.attributes.columnType\",  equalTo(\"FIELD\"))\n-                .body(\"data.attributes.expression\",  equalTo(\"highScore\"))\n-                .body(\"data.attributes.category\",  equalTo(\"Score Category\"))\n-                .body(\"data.attributes.description\",  equalTo(\"very awesome score\"))\n-                .body(\"data.relationships.table.data.id\", equalTo(\"playerStats\"))\n-                .body(\"data.relationships.metricFunction.data.id\", equalTo(\"playerStats.highScore[max]\"))\n-                .body(\"included.id\", hasItem(\"playerStats.highScore[max]\"))\n-                .body(\"included.attributes.category\", hasItem(\"sql function\"))\n-                .body(\"included.attributes.description\", hasItem(\"very awesome score\"))\n-                .body(\"included.attributes.expression\", hasItem(\"MAX(%s)\"));\n+    }\n \n-        given()\n-                .accept(\"application/vnd.api+json\")\n-                .get(\"/metric/playerStats.lowScore?include=metricFunction\")\n-                .then()\n-                .statusCode(HttpStatus.SC_OK)\n-                .body(\"data.attributes.name\", equalTo(\"lowScore\"))\n-                .body(\"data.attributes.valueType\",  equalTo(\"INTEGER\"))\n-                .body(\"data.attributes.columnType\",  equalTo(\"FIELD\"))\n-                .body(\"data.attributes.expression\",  equalTo(\"lowScore\"))\n-                .body(\"data.relationships.table.data.id\", equalTo(\"playerStats\"))\n-                .body(\"data.relationships.metricFunction.data.id\", equalTo(\"playerStats.lowScore[min]\"))\n-                .body(\"included.id\", hasItem(\"playerStats.lowScore[min]\"))\n-                .body(\"included.attributes.category\", hasItem(\"sql function\"))\n-                .body(\"included.attributes.description\", hasItem(\"sql min function\"))\n-                .body(\"included.attributes.expression\", hasItem(\"MIN(%s)\"));\n+    @Test\n+    public void timeDimensionMetaDataTest() {\n \n         given()\n                 .accept(\"application/vnd.api+json\")\n"}}, {"oid": "282b1a764c0b46b42ab75f5d2992f702cf2765c3", "url": "https://github.com/yahoo/elide/commit/282b1a764c0b46b42ab75f5d2992f702cf2765c3", "message": "refactor testcases:", "committedDate": "2020-07-01T04:18:22Z", "type": "commit"}, {"oid": "a698360915f12dbe5e806178441a1c65b43be637", "url": "https://github.com/yahoo/elide/commit/a698360915f12dbe5e806178441a1c65b43be637", "message": "test table category", "committedDate": "2020-07-01T14:01:44Z", "type": "commit"}, {"oid": "1214273eca1fa38e8621023b1b5d6ec9e9375ed1", "url": "https://github.com/yahoo/elide/commit/1214273eca1fa38e8621023b1b5d6ec9e9375ed1", "message": "remove category for metric function", "committedDate": "2020-07-01T19:53:58Z", "type": "commit"}]}