{"pr_number": 1712, "pr_title": "Join Type support in aggregation store.", "pr_createdAt": "2020-12-08T21:57:23Z", "pr_url": "https://github.com/yahoo/elide/pull/1712", "timeline": [{"oid": "1cea3474a39a27b617c75f3295fec78d86a6c557", "url": "https://github.com/yahoo/elide/commit/1cea3474a39a27b617c75f3295fec78d86a6c557", "message": "Join Type support in aggregation store.", "committedDate": "2020-12-08T21:54:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg0ODA3OQ==", "url": "https://github.com/yahoo/elide/pull/1712#discussion_r538848079", "bodyText": "it will fail during service start if full join type is used for H2 database.", "author": "rishi-aga", "createdAt": "2020-12-08T22:15:24Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/H2Dialect.java", "diffHunk": "@@ -20,4 +20,9 @@ public String getDialectType() {\n     public String generateOffsetLimitClause(int offset, int limit) {\n         return LIMIT + limit + SPACE + OFFSET + offset;\n     }\n+\n+    @Override\n+    public String getFullJoinKeyword() {\n+        throw new IllegalArgumentException(\"Full Join is not supported for: \" + getDialectType());\n+    }", "originalCommit": "1cea3474a39a27b617c75f3295fec78d86a6c557", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg2MjE1Nw==", "url": "https://github.com/yahoo/elide/pull/1712#discussion_r538862157", "bodyText": "Can we remove the TODOs above?", "author": "aklish", "createdAt": "2020-12-08T22:40:27Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceTable.java", "diffHunk": "@@ -196,6 +197,17 @@ private String extractJoinClause(Class<?> fromClass,\n                 Join.class,\n                 joinField);\n \n+        String joinKeyword = join == null", "originalCommit": "1cea3474a39a27b617c75f3295fec78d86a6c557", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "f309ee3d4d2211dfb019263990de06e8b796d86c", "url": "https://github.com/yahoo/elide/commit/f309ee3d4d2211dfb019263990de06e8b796d86c", "message": "Model Config validation changes to support Cross Join Type", "committedDate": "2020-12-08T23:09:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg3ODk2NQ==", "url": "https://github.com/yahoo/elide/pull/1712#discussion_r538878965", "bodyText": "For cross join, definition is ignored if provided.", "author": "rishi-aga", "createdAt": "2020-12-08T23:13:10Z", "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidator.java", "diffHunk": "@@ -689,15 +689,21 @@ private static void validateSql(String sqlDefinition) {\n      * Check if input join definition is valid.\n      */\n     private void validateJoin(Join join) {\n-        validateSql(join.getDefinition());\n-\n         String joinModelName = join.getTo();\n \n         if (!(elideTableConfig.hasTable(joinModelName) || staticModelDetails.exists(joinModelName, NO_VERSION))) {\n             throw new IllegalStateException(\n                             \"Model: \" + joinModelName + \" is neither included in dynamic models nor in static models\");\n         }\n \n+        if (join.getType() == Join.Type.CROSS) {\n+            return; // Join's definition validation not required.", "originalCommit": "f309ee3d4d2211dfb019263990de06e8b796d86c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}