{"pr_number": 1468, "pr_title": "Disable Aggregation DataStore by default", "pr_createdAt": "2020-07-27T20:24:34Z", "pr_url": "https://github.com/yahoo/elide/pull/1468", "timeline": [{"oid": "699491f3fe0268ebb63471e9f2038f367f9aee1f", "url": "https://github.com/yahoo/elide/commit/699491f3fe0268ebb63471e9f2038f367f9aee1f", "message": "Elide Standalone: Disable Aggregation DataStore by default", "committedDate": "2020-07-28T13:25:58Z", "type": "commit"}, {"oid": "699491f3fe0268ebb63471e9f2038f367f9aee1f", "url": "https://github.com/yahoo/elide/commit/699491f3fe0268ebb63471e9f2038f367f9aee1f", "message": "Elide Standalone: Disable Aggregation DataStore by default", "committedDate": "2020-07-28T13:25:58Z", "type": "forcePushed"}, {"oid": "57bf092e5fd3d32cb17239d328d74a2b189cc5ec", "url": "https://github.com/yahoo/elide/commit/57bf092e5fd3d32cb17239d328d74a2b189cc5ec", "message": "Elide Springboot: Disable Aggregation DataStore by default", "committedDate": "2020-07-28T18:41:09Z", "type": "commit"}, {"oid": "0506887baef1d083c370f1fd33e3ad7b422e7d09", "url": "https://github.com/yahoo/elide/commit/0506887baef1d083c370f1fd33e3ad7b422e7d09", "message": "Elide Springboot: Integration Test for Disable Aggregation DataStore by default", "committedDate": "2020-07-28T21:05:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MTAxMg==", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r461891012", "bodyText": "Remove commented code.", "author": "moizarafat", "createdAt": "2020-07-28T21:29:34Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java", "diffHunk": "@@ -44,7 +44,8 @@\n @Slf4j\n @Configuration\n @EnableConfigurationProperties(ElideConfigProperties.class)\n-@ConditionalOnExpression(\"${elide.dynamic-config.enabled:false}\")\n+//@ConditionalOnExpression(\"${elide.dynamic-config.enabled}\")", "originalCommit": "0506887baef1d083c370f1fd33e3ad7b422e7d09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d57168846e3decdfc9de64d2eec76037d272d34", "chunk": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java\nindex af3115d67..88bca4ab7 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java\n\n@@ -44,7 +44,6 @@ import javax.sql.DataSource;\n @Slf4j\n @Configuration\n @EnableConfigurationProperties(ElideConfigProperties.class)\n-//@ConditionalOnExpression(\"${elide.dynamic-config.enabled}\")\n @ConditionalOnExpression(\"${elide.aggregation-store.enabled:false} and ${elide.dynamic-config.enabled:false}\")\n public class ElideDynamicConfiguration {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MTU4MA==", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r461891580", "bodyText": "Instead of reusing ControllerProperties, we should create a new properties file.", "author": "moizarafat", "createdAt": "2020-07-28T21:30:40Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideConfigProperties.java", "diffHunk": "@@ -43,6 +43,11 @@\n      */\n     private DynamicConfigProperties dynamicConfig;\n \n+    /**\n+     * Settings for the Aggregation Store.\n+     */\n+    private ControllerProperties aggregationStore;", "originalCommit": "0506887baef1d083c370f1fd33e3ad7b422e7d09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5NTc3Mw==", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r461895773", "bodyText": "Sure.", "author": "rishi-aga", "createdAt": "2020-07-28T21:39:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MTU4MA=="}], "type": "inlineReview", "revised_code": {"commit": "2d57168846e3decdfc9de64d2eec76037d272d34", "chunk": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideConfigProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideConfigProperties.java\nindex a33e48751..326915895 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideConfigProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideConfigProperties.java\n\n@@ -46,7 +46,7 @@ public class ElideConfigProperties {\n     /**\n      * Settings for the Aggregation Store.\n      */\n-    private ControllerProperties aggregationStore;\n+    private AggregationStoreProperties aggregationStore;\n \n     /**\n      * Default pagination size for collections if the client doesn't paginate.\n"}}, {"oid": "2d57168846e3decdfc9de64d2eec76037d272d34", "url": "https://github.com/yahoo/elide/commit/2d57168846e3decdfc9de64d2eec76037d272d34", "message": "Review Comments", "committedDate": "2020-07-28T21:39:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5MTk0Ng==", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r461991946", "bodyText": "you can just return jpaDataStore", "author": "moizarafat", "createdAt": "2020-07-29T01:55:27Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -185,29 +191,35 @@ public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n     @ConditionalOnMissingBean\n     @DependsOn({\"buildQueryLogger\"})\n     public DataStore buildDataStore(EntityManagerFactory entityManagerFactory,\n-                                    QueryEngine queryEngine,\n+                                    ObjectProvider<QueryEngine> queryEngine,\n                                     ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler,\n                                     ElideConfigProperties settings,\n                                     @Autowired(required = false) Cache cache,\n                                     @Autowired(required = false) QueryLogger querylogger)\n             throws ClassNotFoundException {\n-        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder()\n-                .queryEngine(queryEngine);\n-        if (isDynamicConfigEnabled(settings)) {\n-            ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n-            Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(FromTable.class);\n-            annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n-            aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClass);\n-        }\n-        aggregationDataStoreBuilder.cache(cache);\n-        aggregationDataStoreBuilder.queryLogger(querylogger);\n-        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder.build();\n \n         JpaDataStore jpaDataStore = new JpaDataStore(entityManagerFactory::createEntityManager,\n                                                      (em) -> { return new NonJtaTransaction(em, txCancel); });\n \n-        // meta data store needs to be put at first to populate meta data models\n-        return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n+        if (isAggregationStoreEnabled(settings)) {\n+            AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder =\n+                            AggregationDataStore.builder().queryEngine(queryEngine.getIfAvailable());\n+            if (isDynamicConfigEnabled(settings)) {\n+                ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n+                Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(FromTable.class);\n+                annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n+                aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClass);\n+            }\n+            aggregationDataStoreBuilder.cache(cache);\n+            aggregationDataStoreBuilder.queryLogger(querylogger);\n+            AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder.build();\n+\n+            // meta data store needs to be put at first to populate meta data models\n+            return new MultiplexManager(jpaDataStore, queryEngine.getIfAvailable().getMetaDataStore(),\n+                            aggregationDataStore);\n+        }\n+\n+        return new MultiplexManager(jpaDataStore);", "originalCommit": "2d57168846e3decdfc9de64d2eec76037d272d34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzY5Ng==", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462367696", "bodyText": "sure.", "author": "rishi-aga", "createdAt": "2020-07-29T15:00:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5MTk0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c711c630d9c32d77b5be805514d1af221a6252bf", "chunk": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex b5f0222a4..9ea36a768 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n\n@@ -219,7 +219,7 @@ public class ElideAutoConfiguration {\n                             aggregationDataStore);\n         }\n \n-        return new MultiplexManager(jpaDataStore);\n+        return jpaDataStore;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5NzUyNA==", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r461997524", "bodyText": "2020", "author": "moizarafat", "createdAt": "2020-07-29T02:15:54Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/DisableAggStoreControllerTest.java", "diffHunk": "@@ -0,0 +1,418 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.", "originalCommit": "2d57168846e3decdfc9de64d2eec76037d272d34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c711c630d9c32d77b5be805514d1af221a6252bf", "chunk": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/DisableAggStoreControllerTest.java b/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/DisableAggStoreControllerTest.java\nindex f2b66844f..086e089d2 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/DisableAggStoreControllerTest.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/DisableAggStoreControllerTest.java\n\n@@ -1,360 +1,25 @@\n /*\n- * Copyright 2019, Yahoo Inc.\n+ * Copyright 2020, Yahoo Inc.\n  * Licensed under the Apache License, Version 2.0\n  * See LICENSE file in project root for terms.\n  */\n package example.tests;\n \n-import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.argument;\n-import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.arguments;\n-import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.field;\n-import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.query;\n-import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.selection;\n-import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.selections;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.linkage;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.patchOperation;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.patchSet;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.relation;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.relationships;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.elements.PatchOperationType.add;\n-import static io.restassured.RestAssured.given;\n import static io.restassured.RestAssured.when;\n-import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.containsInAnyOrder;\n-import static org.hamcrest.Matchers.equalTo;\n \n-import com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL;\n import com.yahoo.elide.core.HttpStatus;\n-import com.yahoo.elide.spring.controllers.JsonApiController;\n-import example.models.jpa.ArtifactGroup;\n \n import org.junit.jupiter.api.Test;\n-import org.springframework.test.context.jdbc.Sql;\n-import org.springframework.test.context.jdbc.SqlMergeMode;\n-\n-import java.io.IOException;\n-import javax.ws.rs.core.MediaType;\n+import org.springframework.test.context.ActiveProfiles;\n \n /**\n- * Example functional test.\n+ * Executes Controller tests with Aggregation Store disabled.\n  */\n-@SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n-@Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n-        statements = \"INSERT INTO ArtifactGroup (name, commonName, description, deprecated) VALUES\\n\"\n-                + \"\\t\\t('com.example.repository','Example Repository','The code for this project', false);\")\n-@Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n-        statements = \"DELETE FROM ArtifactVersion; DELETE FROM ArtifactProduct; DELETE FROM ArtifactGroup;\")\n-public class DisableAggStoreControllerTest extends DisableAggStoreIntegrationTest {\n-    /**\n-     * This test demonstrates an example test using the JSON-API DSL.\n-     */\n-    @Test\n-    public void jsonApiGetTest() {\n-        when()\n-                .get(\"/json/group\")\n-                .then()\n-                .body(equalTo(\n-                        data(\n-                                resource(\n-                                        type(\"group\"),\n-                                        id(\"com.example.repository\"),\n-                                        attributes(\n-                                                attr(\"commonName\", \"Example Repository\"),\n-                                                attr(\"deprecated\", false),\n-                                                attr(\"description\", \"The code for this project\")\n-                                        ),\n-                                        relationships(\n-                                                relation(\"products\")\n-                                        )\n-                                )\n-                        ).toJSON())\n-                )\n-                .statusCode(HttpStatus.SC_OK);\n-    }\n-\n-    @Test\n-    public void versionedJsonApiGetTest() {\n-        given()\n-                .header(\"ApiVersion\", \"1.0\")\n-                .when()\n-                .get(\"/json/group\")\n-                .then()\n-                .body(equalTo(\n-                        data(\n-                                resource(\n-                                        type(\"group\"),\n-                                        id(\"com.example.repository\"),\n-                                        attributes(\n-                                                attr(\"title\", \"Example Repository\")\n-                                        )\n-                                )\n-                        ).toJSON())\n-                )\n-                .statusCode(HttpStatus.SC_OK);\n-    }\n-\n-    @Test\n-    public void jsonApiPatchTest() {\n-        given()\n-            .contentType(JsonApiController.JSON_API_CONTENT_TYPE)\n-            .body(\n-                datum(\n-                    resource(\n-                        type(\"group\"),\n-                        id(\"com.example.repository\"),\n-                        attributes(\n-                            attr(\"commonName\", \"Changed It.\")\n-                        )\n-                    )\n-                )\n-            )\n-            .when()\n-                .patch(\"/json/group/com.example.repository\")\n-            .then()\n-                .statusCode(HttpStatus.SC_NO_CONTENT);\n-\n-\n-        when()\n-                .get(\"/json/group\")\n-                .then()\n-                .body(equalTo(\n-                        data(\n-                                resource(\n-                                        type(\"group\"),\n-                                        id(\"com.example.repository\"),\n-                                        attributes(\n-                                                attr(\"commonName\", \"Changed It.\"),\n-                                                attr(\"deprecated\", false),\n-                                                attr(\"description\", \"The code for this project\")\n-                                        ),\n-                                        relationships(\n-                                                relation(\"products\")\n-                                        )\n-                                )\n-                        ).toJSON())\n-                )\n-                .statusCode(HttpStatus.SC_OK);\n-    }\n-\n-    @Test\n-    public void jsonForbiddenApiPatchTest() {\n-        given()\n-                .contentType(JsonApiController.JSON_API_CONTENT_TYPE)\n-                .body(\n-                        datum(\n-                                resource(\n-                                        type(\"group\"),\n-                                        id(\"com.example.repository\"),\n-                                        attributes(\n-                                                attr(\"commonName\", \"Changed It.\"),\n-                                                attr(\"deprecated\", true)\n-                                        )\n-                                )\n-                        )\n-                )\n-                .when()\n-                .patch(\"/json/group/com.example.repository\")\n-                .then()\n-                .statusCode(HttpStatus.SC_FORBIDDEN);\n-    }\n-\n-    @Test\n-    public void jsonApiPatchExtensionTest() {\n-        given()\n-                .contentType(JsonApiController.JSON_API_PATCH_CONTENT_TYPE)\n-                .accept(JsonApiController.JSON_API_PATCH_CONTENT_TYPE)\n-                .body(\n-                        patchSet(\n-                                patchOperation(add, \"/group\",\n-                                        resource(\n-                                                type(\"group\"),\n-                                                id(\"com.example.repository.foo\"),\n-                                                attributes(\n-                                                    attr(\"commonName\", \"Foo\")\n-                                                )\n-                                        )\n-                                )\n-                        )\n-                )\n-                .when()\n-                .patch(\"/json\")\n-                .then()\n-                .statusCode(HttpStatus.SC_OK);\n-    }\n-\n-    @Test\n-    public void jsonApiPostTest() {\n-        given()\n-                .contentType(JsonApiController.JSON_API_CONTENT_TYPE)\n-                .body(\n-                        datum(\n-                                resource(\n-                                        type(\"group\"),\n-                                        id(\"com.example.repository2\"),\n-                                        attributes(\n-                                                attr(\"commonName\", \"New group.\")\n-                                        )\n-                                )\n-                        )\n-                )\n-                .when()\n-                .post(\"/json/group\")\n-                .then()\n-                .body(equalTo(datum(\n-                        resource(\n-                                type(\"group\"),\n-                                id(\"com.example.repository2\"),\n-                                attributes(\n-                                        attr(\"commonName\", \"New group.\"),\n-                                        attr(\"deprecated\", false),\n-                                        attr(\"description\", \"\")\n-                                ),\n-                                relationships(\n-                                        relation(\"products\")\n-                                )\n-                        )\n-                ).toJSON()))\n-                .statusCode(HttpStatus.SC_CREATED);\n-    }\n-\n-    @Test\n-    public void jsonApiDeleteTest() {\n-        when()\n-            .delete(\"/json/group/com.example.repository\")\n-        .then()\n-            .statusCode(HttpStatus.SC_NO_CONTENT);\n-    }\n-\n-    @Test\n-    @Sql(statements = {\n-            \"INSERT INTO ArtifactProduct (name, commonName, description, group_name) VALUES\\n\"\n-                    + \"\\t\\t('foo','foo Core','The guts of foo','com.example.repository');\"\n-    })\n-    public void jsonApiDeleteRelationshipTest() {\n-        given()\n-            .contentType(JsonApiController.JSON_API_CONTENT_TYPE)\n-            .body(datum(\n-                linkage(type(\"product\"), id(\"foo\"))\n-            ))\n-        .when()\n-                .delete(\"/json/group/com.example.repository\")\n-                .then()\n-                .statusCode(HttpStatus.SC_NO_CONTENT);\n-    }\n-\n-    /**\n-     * This test demonstrates an example test using the GraphQL DSL.\n-     */\n-    @Test\n-    public void graphqlTest() {\n-        given()\n-            .contentType(MediaType.APPLICATION_JSON)\n-            .accept(MediaType.APPLICATION_JSON)\n-            .body(\"{ \\\"query\\\" : \\\"\" + GraphQLDSL.document(\n-                query(\n-                    selection(\n-                        field(\"group\",\n-                            selections(\n-                                field(\"name\"),\n-                                field(\"commonName\"),\n-                                field(\"description\")\n-                            )\n-                        )\n-                    )\n-                )\n-            ).toQuery() + \"\\\" }\"\n-        )\n-        .when()\n-            .post(\"/graphql\")\n-            .then()\n-            .body(equalTo(GraphQLDSL.document(\n-                selection(\n-                    field(\n-                        \"group\",\n-                        selections(\n-                            field(\"name\", \"com.example.repository\"),\n-                            field(\"commonName\", \"Example Repository\"),\n-                            field(\"description\", \"The code for this project\")\n-                        )\n-                    )\n-                )\n-            ).toResponse()))\n-            .statusCode(HttpStatus.SC_OK);\n-    }\n-\n-    @Test\n-    public void testInvalidApiVersion() throws IOException {\n-\n-        String graphQLRequest = GraphQLDSL.document(\n-                selection(\n-                        field(\n-                                \"group\",\n-                                selections(\n-                                        field(\"name\")\n-                                )\n-                        )\n-                )\n-        ).toQuery();\n-\n-        String expected = \"{\\\"errors\\\":[{\\\"message\\\":\\\"Invalid operation: Invalid API Version\\\"}]}\";\n-\n-        given()\n-                .contentType(MediaType.APPLICATION_JSON)\n-                .accept(MediaType.APPLICATION_JSON)\n-                .header(\"ApiVersion\", \"2.0\")\n-                .body(\"{ \\\"query\\\" : \\\"\" + graphQLRequest + \"\\\" }\")\n-                .post(\"/graphql\")\n-                .then()\n-                .body(equalTo(expected))\n-                .statusCode(HttpStatus.SC_BAD_REQUEST);\n-    }\n-\n-    /**\n-     * This test demonstrates an example test using the GraphQL DSL.\n-     */\n-    @Test\n-    public void versionedGraphqlTest() {\n-        given()\n-                .contentType(MediaType.APPLICATION_JSON)\n-                .accept(MediaType.APPLICATION_JSON)\n-                .header(\"ApiVersion\", \"1.0\")\n-                .body(\"{ \\\"query\\\" : \\\"\" + GraphQLDSL.document(\n-                        query(\n-                                selection(\n-                                        field(\"group\",\n-                                                selections(\n-                                                        field(\"name\"),\n-                                                        field(\"title\")\n-                                                )\n-                                        )\n-                                )\n-                        )\n-                        ).toQuery() + \"\\\" }\"\n-                )\n-                .when()\n-                .post(\"/graphql\")\n-                .then()\n-                .body(equalTo(GraphQLDSL.document(\n-                        selection(\n-                                field(\n-                                        \"group\",\n-                                        selections(\n-                                                field(\"name\", \"com.example.repository\"),\n-                                                field(\"title\", \"Example Repository\")\n-                                        )\n-                                )\n-                        )\n-                ).toResponse()))\n-                .statusCode(HttpStatus.SC_OK);\n-    }\n+@ActiveProfiles(\"disableAggStore\")\n+public class DisableAggStoreControllerTest extends ControllerTest {\n \n+    @Override\n     @Test\n     public void swaggerDocumentTest() {\n         when()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5NzkxOQ==", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r461997919", "bodyText": "Since this class is exact replica of ControllerTest with few minor differences. I suggest we have ControllerBaseTest class with all the common test cases and ControllerTest and DisableAggStoreControllerTest will both inherit this class and add any unique test cases. This would keep making updates to test cases easier.", "author": "moizarafat", "createdAt": "2020-07-29T02:17:12Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/DisableAggStoreControllerTest.java", "diffHunk": "@@ -0,0 +1,418 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package example.tests;\n+\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.argument;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.arguments;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.field;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.query;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.selection;\n+import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.selections;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.linkage;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.patchOperation;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.patchSet;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.relation;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.relationships;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.elements.PatchOperationType.add;\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.when;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL;\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.spring.controllers.JsonApiController;\n+import example.models.jpa.ArtifactGroup;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.test.context.jdbc.Sql;\n+import org.springframework.test.context.jdbc.SqlMergeMode;\n+\n+import java.io.IOException;\n+import javax.ws.rs.core.MediaType;\n+\n+/**\n+ * Example functional test.\n+ */\n+@SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+@Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+        statements = \"INSERT INTO ArtifactGroup (name, commonName, description, deprecated) VALUES\\n\"\n+                + \"\\t\\t('com.example.repository','Example Repository','The code for this project', false);\")\n+@Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n+        statements = \"DELETE FROM ArtifactVersion; DELETE FROM ArtifactProduct; DELETE FROM ArtifactGroup;\")\n+public class DisableAggStoreControllerTest extends DisableAggStoreIntegrationTest {", "originalCommit": "2d57168846e3decdfc9de64d2eec76037d272d34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2OTM5MQ==", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462369391", "bodyText": "changed to DisableAggStoreControllerTest inheriting and overriding from ControllerTest. I can pass profile in sub class so removing DisableAggStoreIntegrationTest.", "author": "rishi-aga", "createdAt": "2020-07-29T15:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5NzkxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c711c630d9c32d77b5be805514d1af221a6252bf", "chunk": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/DisableAggStoreControllerTest.java b/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/DisableAggStoreControllerTest.java\nindex f2b66844f..086e089d2 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/DisableAggStoreControllerTest.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/DisableAggStoreControllerTest.java\n\n@@ -1,360 +1,25 @@\n /*\n- * Copyright 2019, Yahoo Inc.\n+ * Copyright 2020, Yahoo Inc.\n  * Licensed under the Apache License, Version 2.0\n  * See LICENSE file in project root for terms.\n  */\n package example.tests;\n \n-import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.argument;\n-import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.arguments;\n-import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.field;\n-import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.query;\n-import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.selection;\n-import static com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL.selections;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.linkage;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.patchOperation;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.patchSet;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.relation;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.relationships;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.elements.PatchOperationType.add;\n-import static io.restassured.RestAssured.given;\n import static io.restassured.RestAssured.when;\n-import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.containsInAnyOrder;\n-import static org.hamcrest.Matchers.equalTo;\n \n-import com.yahoo.elide.contrib.testhelpers.graphql.GraphQLDSL;\n import com.yahoo.elide.core.HttpStatus;\n-import com.yahoo.elide.spring.controllers.JsonApiController;\n-import example.models.jpa.ArtifactGroup;\n \n import org.junit.jupiter.api.Test;\n-import org.springframework.test.context.jdbc.Sql;\n-import org.springframework.test.context.jdbc.SqlMergeMode;\n-\n-import java.io.IOException;\n-import javax.ws.rs.core.MediaType;\n+import org.springframework.test.context.ActiveProfiles;\n \n /**\n- * Example functional test.\n+ * Executes Controller tests with Aggregation Store disabled.\n  */\n-@SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n-@Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n-        statements = \"INSERT INTO ArtifactGroup (name, commonName, description, deprecated) VALUES\\n\"\n-                + \"\\t\\t('com.example.repository','Example Repository','The code for this project', false);\")\n-@Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n-        statements = \"DELETE FROM ArtifactVersion; DELETE FROM ArtifactProduct; DELETE FROM ArtifactGroup;\")\n-public class DisableAggStoreControllerTest extends DisableAggStoreIntegrationTest {\n-    /**\n-     * This test demonstrates an example test using the JSON-API DSL.\n-     */\n-    @Test\n-    public void jsonApiGetTest() {\n-        when()\n-                .get(\"/json/group\")\n-                .then()\n-                .body(equalTo(\n-                        data(\n-                                resource(\n-                                        type(\"group\"),\n-                                        id(\"com.example.repository\"),\n-                                        attributes(\n-                                                attr(\"commonName\", \"Example Repository\"),\n-                                                attr(\"deprecated\", false),\n-                                                attr(\"description\", \"The code for this project\")\n-                                        ),\n-                                        relationships(\n-                                                relation(\"products\")\n-                                        )\n-                                )\n-                        ).toJSON())\n-                )\n-                .statusCode(HttpStatus.SC_OK);\n-    }\n-\n-    @Test\n-    public void versionedJsonApiGetTest() {\n-        given()\n-                .header(\"ApiVersion\", \"1.0\")\n-                .when()\n-                .get(\"/json/group\")\n-                .then()\n-                .body(equalTo(\n-                        data(\n-                                resource(\n-                                        type(\"group\"),\n-                                        id(\"com.example.repository\"),\n-                                        attributes(\n-                                                attr(\"title\", \"Example Repository\")\n-                                        )\n-                                )\n-                        ).toJSON())\n-                )\n-                .statusCode(HttpStatus.SC_OK);\n-    }\n-\n-    @Test\n-    public void jsonApiPatchTest() {\n-        given()\n-            .contentType(JsonApiController.JSON_API_CONTENT_TYPE)\n-            .body(\n-                datum(\n-                    resource(\n-                        type(\"group\"),\n-                        id(\"com.example.repository\"),\n-                        attributes(\n-                            attr(\"commonName\", \"Changed It.\")\n-                        )\n-                    )\n-                )\n-            )\n-            .when()\n-                .patch(\"/json/group/com.example.repository\")\n-            .then()\n-                .statusCode(HttpStatus.SC_NO_CONTENT);\n-\n-\n-        when()\n-                .get(\"/json/group\")\n-                .then()\n-                .body(equalTo(\n-                        data(\n-                                resource(\n-                                        type(\"group\"),\n-                                        id(\"com.example.repository\"),\n-                                        attributes(\n-                                                attr(\"commonName\", \"Changed It.\"),\n-                                                attr(\"deprecated\", false),\n-                                                attr(\"description\", \"The code for this project\")\n-                                        ),\n-                                        relationships(\n-                                                relation(\"products\")\n-                                        )\n-                                )\n-                        ).toJSON())\n-                )\n-                .statusCode(HttpStatus.SC_OK);\n-    }\n-\n-    @Test\n-    public void jsonForbiddenApiPatchTest() {\n-        given()\n-                .contentType(JsonApiController.JSON_API_CONTENT_TYPE)\n-                .body(\n-                        datum(\n-                                resource(\n-                                        type(\"group\"),\n-                                        id(\"com.example.repository\"),\n-                                        attributes(\n-                                                attr(\"commonName\", \"Changed It.\"),\n-                                                attr(\"deprecated\", true)\n-                                        )\n-                                )\n-                        )\n-                )\n-                .when()\n-                .patch(\"/json/group/com.example.repository\")\n-                .then()\n-                .statusCode(HttpStatus.SC_FORBIDDEN);\n-    }\n-\n-    @Test\n-    public void jsonApiPatchExtensionTest() {\n-        given()\n-                .contentType(JsonApiController.JSON_API_PATCH_CONTENT_TYPE)\n-                .accept(JsonApiController.JSON_API_PATCH_CONTENT_TYPE)\n-                .body(\n-                        patchSet(\n-                                patchOperation(add, \"/group\",\n-                                        resource(\n-                                                type(\"group\"),\n-                                                id(\"com.example.repository.foo\"),\n-                                                attributes(\n-                                                    attr(\"commonName\", \"Foo\")\n-                                                )\n-                                        )\n-                                )\n-                        )\n-                )\n-                .when()\n-                .patch(\"/json\")\n-                .then()\n-                .statusCode(HttpStatus.SC_OK);\n-    }\n-\n-    @Test\n-    public void jsonApiPostTest() {\n-        given()\n-                .contentType(JsonApiController.JSON_API_CONTENT_TYPE)\n-                .body(\n-                        datum(\n-                                resource(\n-                                        type(\"group\"),\n-                                        id(\"com.example.repository2\"),\n-                                        attributes(\n-                                                attr(\"commonName\", \"New group.\")\n-                                        )\n-                                )\n-                        )\n-                )\n-                .when()\n-                .post(\"/json/group\")\n-                .then()\n-                .body(equalTo(datum(\n-                        resource(\n-                                type(\"group\"),\n-                                id(\"com.example.repository2\"),\n-                                attributes(\n-                                        attr(\"commonName\", \"New group.\"),\n-                                        attr(\"deprecated\", false),\n-                                        attr(\"description\", \"\")\n-                                ),\n-                                relationships(\n-                                        relation(\"products\")\n-                                )\n-                        )\n-                ).toJSON()))\n-                .statusCode(HttpStatus.SC_CREATED);\n-    }\n-\n-    @Test\n-    public void jsonApiDeleteTest() {\n-        when()\n-            .delete(\"/json/group/com.example.repository\")\n-        .then()\n-            .statusCode(HttpStatus.SC_NO_CONTENT);\n-    }\n-\n-    @Test\n-    @Sql(statements = {\n-            \"INSERT INTO ArtifactProduct (name, commonName, description, group_name) VALUES\\n\"\n-                    + \"\\t\\t('foo','foo Core','The guts of foo','com.example.repository');\"\n-    })\n-    public void jsonApiDeleteRelationshipTest() {\n-        given()\n-            .contentType(JsonApiController.JSON_API_CONTENT_TYPE)\n-            .body(datum(\n-                linkage(type(\"product\"), id(\"foo\"))\n-            ))\n-        .when()\n-                .delete(\"/json/group/com.example.repository\")\n-                .then()\n-                .statusCode(HttpStatus.SC_NO_CONTENT);\n-    }\n-\n-    /**\n-     * This test demonstrates an example test using the GraphQL DSL.\n-     */\n-    @Test\n-    public void graphqlTest() {\n-        given()\n-            .contentType(MediaType.APPLICATION_JSON)\n-            .accept(MediaType.APPLICATION_JSON)\n-            .body(\"{ \\\"query\\\" : \\\"\" + GraphQLDSL.document(\n-                query(\n-                    selection(\n-                        field(\"group\",\n-                            selections(\n-                                field(\"name\"),\n-                                field(\"commonName\"),\n-                                field(\"description\")\n-                            )\n-                        )\n-                    )\n-                )\n-            ).toQuery() + \"\\\" }\"\n-        )\n-        .when()\n-            .post(\"/graphql\")\n-            .then()\n-            .body(equalTo(GraphQLDSL.document(\n-                selection(\n-                    field(\n-                        \"group\",\n-                        selections(\n-                            field(\"name\", \"com.example.repository\"),\n-                            field(\"commonName\", \"Example Repository\"),\n-                            field(\"description\", \"The code for this project\")\n-                        )\n-                    )\n-                )\n-            ).toResponse()))\n-            .statusCode(HttpStatus.SC_OK);\n-    }\n-\n-    @Test\n-    public void testInvalidApiVersion() throws IOException {\n-\n-        String graphQLRequest = GraphQLDSL.document(\n-                selection(\n-                        field(\n-                                \"group\",\n-                                selections(\n-                                        field(\"name\")\n-                                )\n-                        )\n-                )\n-        ).toQuery();\n-\n-        String expected = \"{\\\"errors\\\":[{\\\"message\\\":\\\"Invalid operation: Invalid API Version\\\"}]}\";\n-\n-        given()\n-                .contentType(MediaType.APPLICATION_JSON)\n-                .accept(MediaType.APPLICATION_JSON)\n-                .header(\"ApiVersion\", \"2.0\")\n-                .body(\"{ \\\"query\\\" : \\\"\" + graphQLRequest + \"\\\" }\")\n-                .post(\"/graphql\")\n-                .then()\n-                .body(equalTo(expected))\n-                .statusCode(HttpStatus.SC_BAD_REQUEST);\n-    }\n-\n-    /**\n-     * This test demonstrates an example test using the GraphQL DSL.\n-     */\n-    @Test\n-    public void versionedGraphqlTest() {\n-        given()\n-                .contentType(MediaType.APPLICATION_JSON)\n-                .accept(MediaType.APPLICATION_JSON)\n-                .header(\"ApiVersion\", \"1.0\")\n-                .body(\"{ \\\"query\\\" : \\\"\" + GraphQLDSL.document(\n-                        query(\n-                                selection(\n-                                        field(\"group\",\n-                                                selections(\n-                                                        field(\"name\"),\n-                                                        field(\"title\")\n-                                                )\n-                                        )\n-                                )\n-                        )\n-                        ).toQuery() + \"\\\" }\"\n-                )\n-                .when()\n-                .post(\"/graphql\")\n-                .then()\n-                .body(equalTo(GraphQLDSL.document(\n-                        selection(\n-                                field(\n-                                        \"group\",\n-                                        selections(\n-                                                field(\"name\", \"com.example.repository\"),\n-                                                field(\"title\", \"Example Repository\")\n-                                        )\n-                                )\n-                        )\n-                ).toResponse()))\n-                .statusCode(HttpStatus.SC_OK);\n-    }\n+@ActiveProfiles(\"disableAggStore\")\n+public class DisableAggStoreControllerTest extends ControllerTest {\n \n+    @Override\n     @Test\n     public void swaggerDocumentTest() {\n         when()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5ODgwMg==", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r461998802", "bodyText": "you can just return jpaDataStore", "author": "moizarafat", "createdAt": "2020-07-29T02:20:37Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -400,13 +409,19 @@ default Cache getQueryCache() {\n      * @param entityManagerFactory EntityManagerFactory object.\n      * @return EntityDictionary object initialized.\n      */\n-    default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n-            EntityManagerFactory entityManagerFactory) {\n+    default DataStore getDataStore(Optional<MetaDataStore> metaDataStore,\n+            Optional<AggregationDataStore> aggregationDataStore, EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                 (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n \n-        DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n+        DataStore dataStore = null;\n+\n+        if (enableAggregationDataStore()) {\n+            dataStore = new MultiplexManager(jpaDataStore, metaDataStore.get(), aggregationDataStore.get());\n+        } else {\n+            dataStore = new MultiplexManager(jpaDataStore);", "originalCommit": "2d57168846e3decdfc9de64d2eec76037d272d34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2OTY1MQ==", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462369651", "bodyText": "sure.", "author": "rishi-aga", "createdAt": "2020-07-29T15:03:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5ODgwMg=="}], "type": "inlineReview", "revised_code": {"commit": "c711c630d9c32d77b5be805514d1af221a6252bf", "chunk": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex b8957561d..82fcd6347 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n\n@@ -415,15 +415,9 @@ public interface ElideStandaloneSettings {\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                 (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n \n-        DataStore dataStore = null;\n-\n-        if (enableAggregationDataStore()) {\n-            dataStore = new MultiplexManager(jpaDataStore, metaDataStore.get(), aggregationDataStore.get());\n-        } else {\n-            dataStore = new MultiplexManager(jpaDataStore);\n-        }\n-\n-        return dataStore;\n+        return (enableAggregationDataStore())\n+                        ? new MultiplexManager(jpaDataStore, metaDataStore.get(), aggregationDataStore.get())\n+                        : jpaDataStore;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5OTUzOQ==", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r461999539", "bodyText": "Can this extend ElideStandaloneTest as is ? and just override init and swaggerDocumentTest cases?", "author": "moizarafat", "createdAt": "2020-07-29T02:23:44Z", "path": "elide-standalone/src/test/java/example/ElideStandaloneDisableAggregationDataStoreTest.java", "diffHunk": "@@ -0,0 +1,296 @@\n+/*\n+ * Copyright 2018, Oath Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package example;\n+\n+import static com.yahoo.elide.Elide.JSONAPI_CONTENT_TYPE;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.when;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.hasKey;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import com.yahoo.elide.async.service.AsyncQueryDAO;\n+import com.yahoo.elide.standalone.ElideStandalone;\n+import com.yahoo.elide.standalone.config.ElideStandaloneSettings;\n+import example.models.Post;\n+import org.apache.http.HttpStatus;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+\n+import io.restassured.response.Response;\n+\n+import java.util.Properties;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+/**\n+ * Tests ElideStandalone starts and works.\n+ */\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class ElideStandaloneDisableAggregationDataStoreTest {", "originalCommit": "2d57168846e3decdfc9de64d2eec76037d272d34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3MDI5MA==", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462370290", "bodyText": "Updated. Had to override testJsonAPIPost also.", "author": "rishi-aga", "createdAt": "2020-07-29T15:03:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5OTUzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c711c630d9c32d77b5be805514d1af221a6252bf", "chunk": "diff --git a/elide-standalone/src/test/java/example/ElideStandaloneDisableAggregationDataStoreTest.java b/elide-standalone/src/test/java/example/ElideStandaloneDisableAggregationDataStoreTest.java\ndeleted file mode 100644\nindex f2253867d..000000000\n--- a/elide-standalone/src/test/java/example/ElideStandaloneDisableAggregationDataStoreTest.java\n+++ /dev/null\n\n@@ -1,296 +0,0 @@\n-/*\n- * Copyright 2018, Oath Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package example;\n-\n-import static com.yahoo.elide.Elide.JSONAPI_CONTENT_TYPE;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n-import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n-import static io.restassured.RestAssured.given;\n-import static io.restassured.RestAssured.when;\n-import static org.hamcrest.CoreMatchers.equalTo;\n-import static org.hamcrest.CoreMatchers.notNullValue;\n-import static org.hamcrest.Matchers.containsInAnyOrder;\n-import static org.hamcrest.Matchers.hasKey;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.fail;\n-\n-import com.yahoo.elide.async.service.AsyncQueryDAO;\n-import com.yahoo.elide.standalone.ElideStandalone;\n-import com.yahoo.elide.standalone.config.ElideStandaloneSettings;\n-import example.models.Post;\n-import org.apache.http.HttpStatus;\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.TestInstance;\n-\n-import io.restassured.response.Response;\n-\n-import java.util.Properties;\n-\n-import javax.ws.rs.core.MediaType;\n-\n-/**\n- * Tests ElideStandalone starts and works.\n- */\n-@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n-public class ElideStandaloneDisableAggregationDataStoreTest {\n-    private ElideStandalone elide;\n-\n-    @BeforeAll\n-    public void init() throws Exception {\n-        elide = new ElideStandalone(new ElideStandaloneSettings() {\n-\n-            @Override\n-            public Properties getDatabaseProperties() {\n-                Properties options = new Properties();\n-\n-                options.put(\"hibernate.show_sql\", \"true\");\n-                options.put(\"hibernate.hbm2ddl.auto\", \"create\");\n-                options.put(\"hibernate.dialect\", \"org.hibernate.dialect.H2Dialect\");\n-                options.put(\"hibernate.current_session_context_class\", \"thread\");\n-                options.put(\"hibernate.jdbc.use_scrollable_resultset\", \"true\");\n-\n-                options.put(\"javax.persistence.jdbc.driver\", \"org.h2.Driver\");\n-                options.put(\"javax.persistence.jdbc.url\", \"jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE;\");\n-                options.put(\"javax.persistence.jdbc.user\", \"sa\");\n-                options.put(\"javax.persistence.jdbc.password\", \"\");\n-                return options;\n-            }\n-\n-            @Override\n-            public String getModelPackageName() {\n-                return Post.class.getPackage().getName();\n-            }\n-\n-            @Override\n-            public boolean enableSwagger() {\n-                return true;\n-            }\n-            @Override\n-            public boolean enableGraphQL() {\n-                return true;\n-            }\n-\n-            @Override\n-            public boolean enableJSONAPI() {\n-                return true;\n-            }\n-\n-            @Override\n-            public boolean enableAsync() {\n-                return true;\n-            }\n-\n-            @Override\n-            public boolean enableAsyncCleanup() {\n-                return true;\n-            }\n-\n-            @Override\n-            public Integer getAsyncThreadSize() {\n-                return 3;\n-            }\n-\n-            @Override\n-            public Integer getAsyncMaxRunTimeMinutes() {\n-                return 30;\n-            }\n-\n-            @Override\n-            public Integer getAsyncQueryCleanupDays() {\n-                return 3;\n-            }\n-\n-            @Override\n-            public AsyncQueryDAO getAsyncQueryDAO() {\n-                return null;\n-            }\n-\n-            @Override\n-            public boolean enableDynamicModelConfig() {\n-                return false;\n-            }\n-\n-            @Override\n-            public boolean enableAggregationDataStore() {\n-                return false;\n-            }\n-\n-            @Override\n-            public String getDynamicConfigPath() {\n-                return \"src/test/resources/models/\";\n-            }\n-        });\n-        elide.start(false);\n-    }\n-\n-    @AfterAll\n-    public void shutdown() throws Exception {\n-        elide.stop();\n-    }\n-\n-    @Test\n-    public void testVersionedJsonAPIPost() {\n-        given()\n-                .contentType(JSONAPI_CONTENT_TYPE)\n-                .accept(JSONAPI_CONTENT_TYPE)\n-                .header(\"ApiVersion\", \"1.0\")\n-                .body(\n-                        datum(\n-                                resource(\n-                                        type(\"post\"),\n-                                        id(\"2\"),\n-                                        attributes(\n-                                                attr(\"text\", \"This is my first post. woot.\"),\n-                                                attr(\"date\", \"2019-01-01T00:00Z\")\n-                                        )\n-                                )\n-                        )\n-                )\n-                .post(\"/api/v1/post\")\n-                .then()\n-                .statusCode(HttpStatus.SC_CREATED)\n-                .extract().body().asString();\n-    }\n-\n-    @Test\n-    public void testForbiddenJsonAPIPost() {\n-        given()\n-            .contentType(JSONAPI_CONTENT_TYPE)\n-            .accept(JSONAPI_CONTENT_TYPE)\n-            .body(\n-                datum(\n-                    resource(\n-                        type(\"post\"),\n-                        id(\"2\"),\n-                        attributes(\n-                            attr(\"content\", \"This is my first post. woot.\"),\n-                            attr(\"date\", \"2019-01-01T00:00Z\"),\n-                            attr(\"abusiveContent\", true)\n-                        )\n-                    )\n-                )\n-            )\n-            .post(\"/api/v1/post\")\n-            .then()\n-            .statusCode(HttpStatus.SC_FORBIDDEN)\n-            .extract().body().asString();\n-    }\n-\n-    @Test\n-    public void testMetricsServlet() throws Exception {\n-        given()\n-                .when()\n-                .get(\"/stats/metrics\")\n-                .then()\n-                .statusCode(200)\n-                .body(\"meters\", hasKey(\"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\"));\n-    }\n-\n-    @Test\n-    public void testHealthCheckServlet() throws Exception {\n-            given()\n-                .when()\n-                .get(\"/stats/healthcheck\")\n-                .then()\n-                .statusCode(501); //Returns 'Not Implemented' if there are no Health Checks Registered\n-    }\n-\n-    @Test\n-    public void testSwaggerEndpoint() throws Exception {\n-        given()\n-                .when()\n-                .get(\"/swagger/doc/test\")\n-                .then()\n-                .statusCode(200);\n-    }\n-\n-    @Test\n-    public void swaggerDocumentTest() {\n-        when()\n-               .get(\"/swagger/doc/test\")\n-                .then()\n-                .statusCode(200)\n-                .body(\"tags.name\", containsInAnyOrder(\"post\", \"asyncQuery\"));\n-    }\n-\n-    @Test\n-    public void testAsyncApiEndpoint() throws InterruptedException {\n-        //Create Async Request\n-        given()\n-                .contentType(JSONAPI_CONTENT_TYPE)\n-                .body(\n-                        data(\n-                                resource(\n-                                        type(\"asyncQuery\"),\n-                                        id(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                        attributes(\n-                                                attr(\"query\", \"/post\"),\n-                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n-                                                attr(\"status\", \"QUEUED\")\n-                                        )\n-                                )\n-                        ).toJSON())\n-                .when()\n-                .post(\"/api/v1/asyncQuery\").asString();\n-\n-        int i = 0;\n-        while (i < 1000) {\n-            Thread.sleep(10);\n-            Response response = given()\n-                    .accept(\"application/vnd.api+json\")\n-                    .get(\"/api/v1/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\");\n-\n-            String outputResponse = response.jsonPath().getString(\"data.attributes.status\");\n-\n-            // If Async Query is created and completed\n-            if (outputResponse.equals(\"COMPLETE\")) {\n-\n-                // Validate AsyncQuery Response\n-                response\n-                        .then()\n-                        .statusCode(com.yahoo.elide.core.HttpStatus.SC_OK)\n-                        .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n-                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.attributes.result.contentLength\", notNullValue())\n-                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n-                                + \"[{\\\"type\\\":\\\"post\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"abusiveContent\\\":false,\"\n-                                + \"\\\"content\\\":\\\"This is my first post. woot.\\\",\\\"date\\\":\\\"2019-01-01T00:00Z\\\"}}]}\"));\n-\n-                // Validate GraphQL Response\n-                String responseGraphQL = given()\n-                        .contentType(MediaType.APPLICATION_JSON)\n-                        .accept(MediaType.APPLICATION_JSON)\n-                        .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n-                                + \"{ edges { node { id queryType status result \"\n-                                + \"{ responseBody httpStatus resultType contentLength } } } } }\\\",\"\n-                                + \"\\\"variables\\\":null}\")\n-                        .post(\"/graphql/api/v1/\")\n-                        .asString();\n-\n-                String expectedResponse = \"{\\\"data\\\":{\\\"asyncQuery\\\":{\\\"edges\\\":[{\\\"node\\\":{\\\"id\\\":\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\",\\\"queryType\\\":\\\"JSONAPI_V1_0\\\",\\\"status\\\":\\\"COMPLETE\\\",\\\"result\\\":{\\\"responseBody\\\":\\\"{\\\\\\\"data\\\\\\\":[{\\\\\\\"type\\\\\\\":\\\\\\\"post\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"abusiveContent\\\\\\\":false,\\\\\\\"content\\\\\\\":\\\\\\\"This is my first post. woot.\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"2019-01-01T00:00Z\\\\\\\"}}]}\\\",\\\"httpStatus\\\":200,\\\"resultType\\\":\\\"EMBEDDED\\\",\\\"contentLength\\\":141}}}]}}}\";\n-                assertEquals(expectedResponse, responseGraphQL);\n-                break;\n-            } else if (!(outputResponse.equals(\"PROCESSING\"))) {\n-                fail(\"Async Query has failed.\");\n-                break;\n-            }\n-            i++;\n-\n-            if (i == 1000) {\n-                fail(\"Async Query not completed.\");\n-            }\n-        }\n-    }\n-}\n"}}, {"oid": "c711c630d9c32d77b5be805514d1af221a6252bf", "url": "https://github.com/yahoo/elide/commit/c711c630d9c32d77b5be805514d1af221a6252bf", "message": "Reuse Unit Tests", "committedDate": "2020-07-29T15:04:33Z", "type": "commit"}, {"oid": "78ffbcb7d565fe9cda1e2949ea1a5febb88401db", "url": "https://github.com/yahoo/elide/commit/78ffbcb7d565fe9cda1e2949ea1a5febb88401db", "message": "Checkstyle fixes", "committedDate": "2020-07-29T15:14:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjkzOQ==", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462406939", "bodyText": "What is the benefit of changing the bean argument from a QueryEngine to a function which returns a QueryEngine?", "author": "aklish", "createdAt": "2020-07-29T15:54:23Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -185,29 +191,35 @@ public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n     @ConditionalOnMissingBean\n     @DependsOn({\"buildQueryLogger\"})\n     public DataStore buildDataStore(EntityManagerFactory entityManagerFactory,\n-                                    QueryEngine queryEngine,\n+                                    ObjectProvider<QueryEngine> queryEngine,", "originalCommit": "78ffbcb7d565fe9cda1e2949ea1a5febb88401db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwODE0NA==", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462408144", "bodyText": "This method seems to have two mechanisms for optional bean arguments (required = false) and the ObjectProvider.  I think the former might be the \"Spring way\"", "author": "aklish", "createdAt": "2020-07-29T15:56:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMDM0NA==", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462500344", "bodyText": "QueryEngine bean is not created if aggregation store is disabled, so its optional now.\nReplaced ObjectProvider with (required = false) for both queryEngine and compiler to make it consistent.", "author": "rishi-aga", "createdAt": "2020-07-29T18:25:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "2a2d2b332a8959c6f1a915eda5cc3f26729b91b3", "chunk": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 9ea36a768..8ef21fef7 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n\n@@ -191,8 +191,8 @@ public class ElideAutoConfiguration {\n     @ConditionalOnMissingBean\n     @DependsOn({\"buildQueryLogger\"})\n     public DataStore buildDataStore(EntityManagerFactory entityManagerFactory,\n-                                    ObjectProvider<QueryEngine> queryEngine,\n-                                    ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler,\n+                                    @Autowired(required = false) QueryEngine queryEngine,\n+                                    @Autowired(required = false) ElideDynamicEntityCompiler compiler,\n                                     ElideConfigProperties settings,\n                                     @Autowired(required = false) Cache cache,\n                                     @Autowired(required = false) QueryLogger querylogger)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwOTQxNA==", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462409414", "bodyText": "Was this intended to have tests?", "author": "aklish", "createdAt": "2020-07-29T15:57:45Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/DisableAggStoreAsyncTest.java", "diffHunk": "@@ -0,0 +1,16 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package example.tests;\n+\n+import org.springframework.test.context.ActiveProfiles;\n+\n+/**\n+ * Executes Async tests with Aggregation Store disabled.\n+ */\n+@ActiveProfiles(\"disableAggStore\")\n+public class DisableAggStoreAsyncTest extends AsyncTest {\n+", "originalCommit": "78ffbcb7d565fe9cda1e2949ea1a5febb88401db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxNzI2NA==", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462417264", "bodyText": "No. Ensures existing async tests pass with aggregation store disabled.", "author": "rishi-aga", "createdAt": "2020-07-29T16:09:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwOTQxNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxMzM1Mw==", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462413353", "bodyText": "If the enableAggregationDataStore is enabled, but the aggregation store or metadata store is not provided, we need a good way to alert the user to their configuration error.\nInstead of using so many optionals, I'm wondering if we should provide different getDataStore methods with different required parameters (that we use Precondition to check are non-null).  Elide can call the right one depending on what is enabled/disabled.", "author": "aklish", "createdAt": "2020-07-29T16:03:17Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -400,35 +409,41 @@ default Cache getQueryCache() {\n      * @param entityManagerFactory EntityManagerFactory object.\n      * @return EntityDictionary object initialized.\n      */\n-    default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n-            EntityManagerFactory entityManagerFactory) {\n+    default DataStore getDataStore(Optional<MetaDataStore> metaDataStore,\n+            Optional<AggregationDataStore> aggregationDataStore, EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                 (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n \n-        DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n-\n-        return dataStore;\n+        return (enableAggregationDataStore())\n+                        ? new MultiplexManager(jpaDataStore, metaDataStore.get(), aggregationDataStore.get())", "originalCommit": "78ffbcb7d565fe9cda1e2949ea1a5febb88401db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MjYxOA==", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r462562618", "bodyText": "overloaded getDataStore method to avoid Optionals", "author": "rishi-aga", "createdAt": "2020-07-29T20:17:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxMzM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE1NzIwMg==", "url": "https://github.com/yahoo/elide/pull/1468#discussion_r463157202", "bodyText": "Added null check for metadata store and aggregation store. Without these checks also application was failing to start by giving NPE during queryEngine.init and populateEntityDictionary methods.", "author": "rishi-aga", "createdAt": "2020-07-30T17:29:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxMzM1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bdf0fe23ac06188e6661b57c4804ceb21890c84f", "chunk": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 82fcd6347..c527d814a 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n\n@@ -407,43 +407,50 @@ public interface ElideStandaloneSettings {\n      * @param metaDataStore MetaDataStore object.\n      * @param aggregationDataStore AggregationDataStore object.\n      * @param entityManagerFactory EntityManagerFactory object.\n-     * @return EntityDictionary object initialized.\n+     * @return DataStore object initialized.\n+     */\n+    default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n+            EntityManagerFactory entityManagerFactory) {\n+        DataStore jpaDataStore = new JpaDataStore(\n+                () -> { return entityManagerFactory.createEntityManager(); },\n+                (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n+\n+        DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n+\n+        return dataStore;\n+    }\n+\n+    /**\n+     * Gets the DataStore for elide when aggregation store is disabled.\n+     * @param entityManagerFactory EntityManagerFactory object.\n+     * @return DataStore object initialized.\n      */\n-    default DataStore getDataStore(Optional<MetaDataStore> metaDataStore,\n-            Optional<AggregationDataStore> aggregationDataStore, EntityManagerFactory entityManagerFactory) {\n+    default DataStore getDataStore(EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                 (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n \n-        return (enableAggregationDataStore())\n-                        ? new MultiplexManager(jpaDataStore, metaDataStore.get(), aggregationDataStore.get())\n-                        : jpaDataStore;\n+        return jpaDataStore;\n     }\n \n     /**\n      * Gets the AggregationDataStore for elide.\n      * @param queryEngine query engine object.\n      * @param optionalCompiler optional dynamic compiler object.\n-     * @return Optional AggregationDataStore object initialized.\n+     * @return AggregationDataStore object initialized.\n      */\n-    default Optional<AggregationDataStore> getAggregationDataStore(Optional<QueryEngine> queryEngine,\n+    default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n             Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        AggregationDataStore aggregationDataStore = null;\n-\n-        if (enableAggregationDataStore()) {\n-            AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore\n-                            .builder().queryEngine(queryEngine.get()).queryLogger(new NoopQueryLogger());\n-            if (enableDynamicModelConfig()) {\n-                Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n-                annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n-                aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n-            }\n+        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder()\n+                .queryEngine(queryEngine).queryLogger(new NoopQueryLogger());\n \n-            aggregationDataStoreBuilder.cache(getQueryCache());\n-            aggregationDataStore = aggregationDataStoreBuilder.build();\n+        if (enableDynamicModelConfig()) {\n+            Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n+            annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n+            aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n         }\n-\n-        return Optional.ofNullable(aggregationDataStore);\n+        aggregationDataStoreBuilder.cache(getQueryCache());\n+        return aggregationDataStoreBuilder.build();\n     }\n \n     /**\n"}}, {"oid": "2a2d2b332a8959c6f1a915eda5cc3f26729b91b3", "url": "https://github.com/yahoo/elide/commit/2a2d2b332a8959c6f1a915eda5cc3f26729b91b3", "message": "Replace ObjectProvider for optional beans", "committedDate": "2020-07-29T18:25:27Z", "type": "commit"}, {"oid": "92c4ae9c98ab6431d39cec7b446cd019708c82e1", "url": "https://github.com/yahoo/elide/commit/92c4ae9c98ab6431d39cec7b446cd019708c82e1", "message": "Use ConditionalOnProperty for optional beans", "committedDate": "2020-07-29T19:33:31Z", "type": "commit"}, {"oid": "bdf0fe23ac06188e6661b57c4804ceb21890c84f", "url": "https://github.com/yahoo/elide/commit/bdf0fe23ac06188e6661b57c4804ceb21890c84f", "message": "Overload getDataStore method to avoid Optionals", "committedDate": "2020-07-29T19:54:54Z", "type": "commit"}, {"oid": "2df1d1398c6200a313753246e58fe9231d7e5a3b", "url": "https://github.com/yahoo/elide/commit/2df1d1398c6200a313753246e58fe9231d7e5a3b", "message": "Add check for missing datastore", "committedDate": "2020-07-30T17:24:46Z", "type": "commit"}]}