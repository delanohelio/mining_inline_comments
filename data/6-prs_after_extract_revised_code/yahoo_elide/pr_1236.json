{"pr_number": 1236, "pr_title": "Enforce ReadPermission for filter joins", "pr_createdAt": "2020-03-25T20:50:40Z", "pr_url": "https://github.com/yahoo/elide/pull/1236", "timeline": [{"oid": "b7647dd13a4b502a1d3eb924216c6bd67de5d0ef", "url": "https://github.com/yahoo/elide/commit/b7647dd13a4b502a1d3eb924216c6bd67de5d0ef", "message": "Enforce Read Permissions on Join Filter", "committedDate": "2020-03-25T13:30:03Z", "type": "commit"}, {"oid": "354297ee574a2da59a32216d208f2a764c00f5f7", "url": "https://github.com/yahoo/elide/commit/354297ee574a2da59a32216d208f2a764c00f5f7", "message": "move filterexpression into filter method", "committedDate": "2020-03-25T20:33:37Z", "type": "commit"}, {"oid": "a985f0f9c448aabe70bc904337096399de4576dc", "url": "https://github.com/yahoo/elide/commit/a985f0f9c448aabe70bc904337096399de4576dc", "message": "Merge branch 'master' into enforce_join_filter", "committedDate": "2020-03-25T20:50:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE3OTUzMA==", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398179530", "bodyText": "should be left || right.", "author": "aklish", "createdAt": "2020-03-25T21:25:27Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.core.exceptions.ForbiddenAccessException;\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.FilterExpressionVisitor;\n+import com.yahoo.elide.core.filter.expression.NotFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.Spliterators;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Enforce read permission on filter join\n+ */\n+public class EnforceJoinFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {\n+    private PersistentResource<?> resource;\n+\n+    public EnforceJoinFilterExpressionVisitor(PersistentResource<?> resource) {\n+        this.resource = resource;\n+    }\n+\n+    /**\n+     * Enforce ReadPermission on provided query filter\n+     *\n+     * @return true if allowed, false if rejected\n+     */\n+    @Override\n+    public Boolean visitPredicate(FilterPredicate filterPredicate) {\n+        RequestScope requestScope = resource.getRequestScope();\n+        Set<PersistentResource> val = Collections.singleton(resource);\n+        for (Path.PathElement pathElement : filterPredicate.getPath().getPathElements()) {\n+            Class<?> entityClass = pathElement.getType();\n+            String fieldName = pathElement.getFieldName();\n+\n+            if (\"this\".equals(fieldName)) {\n+                continue;\n+            }\n+\n+            try {\n+                val = val.stream()\n+                        .filter(Objects::nonNull)\n+                        .flatMap(x -> getValueChecked(x, fieldName, requestScope))\n+                        .filter(Objects::nonNull)\n+                        .collect(Collectors.toSet());\n+            } catch (IllegalArgumentException e) {\n+                // Not a persistent resource\n+            } catch (ForbiddenAccessException e) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    private Stream<PersistentResource> getValueChecked(PersistentResource<?> resource, String fieldName,\n+            RequestScope requestScope) {\n+        // checkFieldAwareReadPermissions\n+        requestScope.getPermissionExecutor().checkSpecificFieldPermissions(resource, null, ReadPermission.class,\n+                fieldName);\n+        Object obj = PersistentResource.getValue(resource.getObject(), fieldName, requestScope);\n+        PersistentResourceSet persistentResourceSet;\n+        if (obj instanceof Iterable) {\n+            persistentResourceSet = new PersistentResourceSet(resource, (Iterable) obj, requestScope);\n+        } else if (obj != null) {\n+            persistentResourceSet = new PersistentResourceSet(resource, Collections.singleton(obj), requestScope);\n+        } else {\n+            return Stream.empty();\n+        }\n+\n+        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(persistentResourceSet.iterator(), 0), false);\n+    }\n+\n+    @Override\n+    public Boolean visitAndExpression(AndFilterExpression expression) {\n+        Boolean left = expression.getLeft().accept(this);\n+        Boolean right = expression.getRight().accept(this);\n+        // neither rejected\n+        return left && right;\n+    }\n+\n+    @Override\n+    public Boolean visitOrExpression(OrFilterExpression expression) {\n+        Boolean left = expression.getLeft().accept(this);\n+        Boolean right = expression.getRight().accept(this);\n+        // neither rejected\n+        return left && right;", "originalCommit": "a985f0f9c448aabe70bc904337096399de4576dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4ODgyNQ==", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398188825", "bodyText": "No. true is valid, false is rejected.  If either is rejected, we want false.", "author": "wcekan", "createdAt": "2020-03-25T21:43:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE3OTUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "1c22884f2f80b84fb2ffd3948604f204bf33b69d", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java b/elide-core/src/main/java/com/yahoo/elide/core/VerifyFieldAccessFilterExpressionVisitor.java\nsimilarity index 92%\nrename from elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java\nrename to elide-core/src/main/java/com/yahoo/elide/core/VerifyFieldAccessFilterExpressionVisitor.java\nindex dad14cb15..39b1f537c 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/VerifyFieldAccessFilterExpressionVisitor.java\n\n@@ -24,10 +24,10 @@ import java.util.stream.StreamSupport;\n /**\n  * Enforce read permission on filter join\n  */\n-public class EnforceJoinFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {\n+public class VerifyFieldAccessFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {\n     private PersistentResource<?> resource;\n \n-    public EnforceJoinFilterExpressionVisitor(PersistentResource<?> resource) {\n+    public VerifyFieldAccessFilterExpressionVisitor(PersistentResource<?> resource) {\n         this.resource = resource;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE3OTgyMg==", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398179822", "bodyText": "We need to negate the value of the accept.", "author": "aklish", "createdAt": "2020-03-25T21:25:53Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.core.exceptions.ForbiddenAccessException;\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.FilterExpressionVisitor;\n+import com.yahoo.elide.core.filter.expression.NotFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.Spliterators;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Enforce read permission on filter join\n+ */\n+public class EnforceJoinFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {\n+    private PersistentResource<?> resource;\n+\n+    public EnforceJoinFilterExpressionVisitor(PersistentResource<?> resource) {\n+        this.resource = resource;\n+    }\n+\n+    /**\n+     * Enforce ReadPermission on provided query filter\n+     *\n+     * @return true if allowed, false if rejected\n+     */\n+    @Override\n+    public Boolean visitPredicate(FilterPredicate filterPredicate) {\n+        RequestScope requestScope = resource.getRequestScope();\n+        Set<PersistentResource> val = Collections.singleton(resource);\n+        for (Path.PathElement pathElement : filterPredicate.getPath().getPathElements()) {\n+            Class<?> entityClass = pathElement.getType();\n+            String fieldName = pathElement.getFieldName();\n+\n+            if (\"this\".equals(fieldName)) {\n+                continue;\n+            }\n+\n+            try {\n+                val = val.stream()\n+                        .filter(Objects::nonNull)\n+                        .flatMap(x -> getValueChecked(x, fieldName, requestScope))\n+                        .filter(Objects::nonNull)\n+                        .collect(Collectors.toSet());\n+            } catch (IllegalArgumentException e) {\n+                // Not a persistent resource\n+            } catch (ForbiddenAccessException e) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    private Stream<PersistentResource> getValueChecked(PersistentResource<?> resource, String fieldName,\n+            RequestScope requestScope) {\n+        // checkFieldAwareReadPermissions\n+        requestScope.getPermissionExecutor().checkSpecificFieldPermissions(resource, null, ReadPermission.class,\n+                fieldName);\n+        Object obj = PersistentResource.getValue(resource.getObject(), fieldName, requestScope);\n+        PersistentResourceSet persistentResourceSet;\n+        if (obj instanceof Iterable) {\n+            persistentResourceSet = new PersistentResourceSet(resource, (Iterable) obj, requestScope);\n+        } else if (obj != null) {\n+            persistentResourceSet = new PersistentResourceSet(resource, Collections.singleton(obj), requestScope);\n+        } else {\n+            return Stream.empty();\n+        }\n+\n+        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(persistentResourceSet.iterator(), 0), false);\n+    }\n+\n+    @Override\n+    public Boolean visitAndExpression(AndFilterExpression expression) {\n+        Boolean left = expression.getLeft().accept(this);\n+        Boolean right = expression.getRight().accept(this);\n+        // neither rejected\n+        return left && right;\n+    }\n+\n+    @Override\n+    public Boolean visitOrExpression(OrFilterExpression expression) {\n+        Boolean left = expression.getLeft().accept(this);\n+        Boolean right = expression.getRight().accept(this);\n+        // neither rejected\n+        return left && right;\n+    }\n+\n+    @Override\n+    public Boolean visitNotExpression(NotFilterExpression expression) {\n+        // check rejected\n+        return expression.getNegated().accept(this);", "originalCommit": "a985f0f9c448aabe70bc904337096399de4576dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5OTQ0OQ==", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398199449", "bodyText": "No.  We are not negating allowed or rejected.\nbook.authors.homeAddress[NOT]='main' should still be rejected.", "author": "wcekan", "createdAt": "2020-03-25T22:06:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE3OTgyMg=="}], "type": "inlineReview", "revised_code": {"commit": "1c22884f2f80b84fb2ffd3948604f204bf33b69d", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java b/elide-core/src/main/java/com/yahoo/elide/core/VerifyFieldAccessFilterExpressionVisitor.java\nsimilarity index 92%\nrename from elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java\nrename to elide-core/src/main/java/com/yahoo/elide/core/VerifyFieldAccessFilterExpressionVisitor.java\nindex dad14cb15..39b1f537c 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/VerifyFieldAccessFilterExpressionVisitor.java\n\n@@ -24,10 +24,10 @@ import java.util.stream.StreamSupport;\n /**\n  * Enforce read permission on filter join\n  */\n-public class EnforceJoinFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {\n+public class VerifyFieldAccessFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {\n     private PersistentResource<?> resource;\n \n-    public EnforceJoinFilterExpressionVisitor(PersistentResource<?> resource) {\n+    public VerifyFieldAccessFilterExpressionVisitor(PersistentResource<?> resource) {\n         this.resource = resource;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4MDUwNA==", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398180504", "bodyText": "Maybe a better name would be VerifyFieldAccessFilterExpressionVisitor", "author": "aklish", "createdAt": "2020-03-25T21:27:19Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.core.exceptions.ForbiddenAccessException;\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.FilterExpressionVisitor;\n+import com.yahoo.elide.core.filter.expression.NotFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.Spliterators;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Enforce read permission on filter join\n+ */\n+public class EnforceJoinFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {", "originalCommit": "a985f0f9c448aabe70bc904337096399de4576dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5OTczMA==", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398199730", "bodyText": "sure.", "author": "wcekan", "createdAt": "2020-03-25T22:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4MDUwNA=="}], "type": "inlineReview", "revised_code": {"commit": "1c22884f2f80b84fb2ffd3948604f204bf33b69d", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java b/elide-core/src/main/java/com/yahoo/elide/core/VerifyFieldAccessFilterExpressionVisitor.java\nsimilarity index 92%\nrename from elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java\nrename to elide-core/src/main/java/com/yahoo/elide/core/VerifyFieldAccessFilterExpressionVisitor.java\nindex dad14cb15..39b1f537c 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/VerifyFieldAccessFilterExpressionVisitor.java\n\n@@ -24,10 +24,10 @@ import java.util.stream.StreamSupport;\n /**\n  * Enforce read permission on filter join\n  */\n-public class EnforceJoinFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {\n+public class VerifyFieldAccessFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {\n     private PersistentResource<?> resource;\n \n-    public EnforceJoinFilterExpressionVisitor(PersistentResource<?> resource) {\n+    public VerifyFieldAccessFilterExpressionVisitor(PersistentResource<?> resource) {\n         this.resource = resource;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4NjU4MA==", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398186580", "bodyText": "Update the javadoc above.", "author": "aklish", "createdAt": "2020-03-25T21:39:12Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java", "diffHunk": "@@ -1557,7 +1558,8 @@ protected void addInverseRelation(String relationName, Object inverseObj) {\n      * @return Filtered set of resources\n      */\n     protected static Set<PersistentResource> filter(Class<? extends Annotation> permission,\n-                                                    Set<PersistentResource> resources) {\n+            Optional<FilterExpression> filter,\n+            Set<PersistentResource> resources) {", "originalCommit": "a985f0f9c448aabe70bc904337096399de4576dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzNzgxNQ==", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398237815", "bodyText": "done.", "author": "wcekan", "createdAt": "2020-03-25T23:46:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4NjU4MA=="}], "type": "inlineReview", "revised_code": {"commit": "1c22884f2f80b84fb2ffd3948604f204bf33b69d", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java b/elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java\nindex 2996f44b4..a007e66e6 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java\n\n@@ -1552,6 +1552,7 @@ public class PersistentResource<T> implements com.yahoo.elide.security.Persisten\n \n     /**\n      * Filter a set of PersistentResources.\n+     * Verify fields have ReadPermission on filter join.\n      *\n      * @param permission the permission\n      * @param resources  the resources\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4Nzc0NA==", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398187744", "bodyText": "Why does this give a bad request but the above tests returns an empty data?  I suspect the RSQL filter is formatted incorrectly.", "author": "aklish", "createdAt": "2020-03-25T21:41:34Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java", "diffHunk": "@@ -1362,6 +1362,21 @@ void testFailFilterAuthorBookByChapter() throws IOException {\n         assertNotNull(result.get(\"errors\"));\n     }\n \n+    @Test\n+    void testFailFilterBookByAuthorAddress() throws IOException {\n+        /* Test default */\n+        JsonNode result = getAsNode(\"book?filter[book.authors.homeAddress]=main&include=authors\");\n+        JsonNode data = result.get(\"data\");\n+        assertEquals(0, data.size(), result.toString());\n+\n+        /* Test RSQL */\n+        result = getAsNode(\n+                String.format(\"book?filter[book]=authors.homeAddress=='main'\", hemingwayId),\n+                HttpStatus.SC_BAD_REQUEST);", "originalCommit": "a985f0f9c448aabe70bc904337096399de4576dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5OTk4Nw==", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398199987", "bodyText": "Bad merge.  Will fix that.", "author": "wcekan", "createdAt": "2020-03-25T22:07:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4Nzc0NA=="}], "type": "inlineReview", "revised_code": {"commit": "1c22884f2f80b84fb2ffd3948604f204bf33b69d", "chunk": "diff --git a/elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java b/elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java\nindex 3a93af76f..8fa150351 100644\n--- a/elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java\n+++ b/elide-integration-tests/src/test/java/com/yahoo/elide/tests/FilterIT.java\n\n@@ -1370,9 +1370,8 @@ public class FilterIT extends IntegrationTest {\n         assertEquals(0, data.size(), result.toString());\n \n         /* Test RSQL */\n-        result = getAsNode(\n-                String.format(\"book?filter[book]=authors.homeAddress=='main'\", hemingwayId),\n-                HttpStatus.SC_BAD_REQUEST);\n+        result = getAsNode(\"book?filter=authors.homeAddress=='main'\");\n+        data = result.get(\"data\");\n         assertEquals(0, data.size(), result.toString());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4ODA3Nw==", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398188077", "bodyText": "Can we add a Unit test for this class to test the different visitor methods?", "author": "aklish", "createdAt": "2020-03-25T21:42:12Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.core;\n+\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.core.exceptions.ForbiddenAccessException;\n+import com.yahoo.elide.core.filter.FilterPredicate;\n+import com.yahoo.elide.core.filter.expression.AndFilterExpression;\n+import com.yahoo.elide.core.filter.expression.FilterExpressionVisitor;\n+import com.yahoo.elide.core.filter.expression.NotFilterExpression;\n+import com.yahoo.elide.core.filter.expression.OrFilterExpression;\n+\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.Spliterators;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Enforce read permission on filter join\n+ */\n+public class EnforceJoinFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {", "originalCommit": "a985f0f9c448aabe70bc904337096399de4576dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMDEwOA==", "url": "https://github.com/yahoo/elide/pull/1236#discussion_r398200108", "bodyText": "Can try.", "author": "wcekan", "createdAt": "2020-03-25T22:07:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4ODA3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1c22884f2f80b84fb2ffd3948604f204bf33b69d", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java b/elide-core/src/main/java/com/yahoo/elide/core/VerifyFieldAccessFilterExpressionVisitor.java\nsimilarity index 92%\nrename from elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java\nrename to elide-core/src/main/java/com/yahoo/elide/core/VerifyFieldAccessFilterExpressionVisitor.java\nindex dad14cb15..39b1f537c 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/EnforceJoinFilterExpressionVisitor.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/VerifyFieldAccessFilterExpressionVisitor.java\n\n@@ -24,10 +24,10 @@ import java.util.stream.StreamSupport;\n /**\n  * Enforce read permission on filter join\n  */\n-public class EnforceJoinFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {\n+public class VerifyFieldAccessFilterExpressionVisitor implements FilterExpressionVisitor<Boolean> {\n     private PersistentResource<?> resource;\n \n-    public EnforceJoinFilterExpressionVisitor(PersistentResource<?> resource) {\n+    public VerifyFieldAccessFilterExpressionVisitor(PersistentResource<?> resource) {\n         this.resource = resource;\n     }\n \n"}}, {"oid": "1c22884f2f80b84fb2ffd3948604f204bf33b69d", "url": "https://github.com/yahoo/elide/commit/1c22884f2f80b84fb2ffd3948604f204bf33b69d", "message": "respond to comments", "committedDate": "2020-03-25T23:38:31Z", "type": "commit"}, {"oid": "1c22884f2f80b84fb2ffd3948604f204bf33b69d", "url": "https://github.com/yahoo/elide/commit/1c22884f2f80b84fb2ffd3948604f204bf33b69d", "message": "respond to comments", "committedDate": "2020-03-25T23:38:31Z", "type": "forcePushed"}, {"oid": "deb6448b48c20415c4bedc574d5260bc990ca659", "url": "https://github.com/yahoo/elide/commit/deb6448b48c20415c4bedc574d5260bc990ca659", "message": "codacy suggestions", "committedDate": "2020-03-26T00:01:42Z", "type": "commit"}, {"oid": "deb6448b48c20415c4bedc574d5260bc990ca659", "url": "https://github.com/yahoo/elide/commit/deb6448b48c20415c4bedc574d5260bc990ca659", "message": "codacy suggestions", "committedDate": "2020-03-26T00:01:42Z", "type": "forcePushed"}, {"oid": "2dbe0fd4a2f03d47be3cf3e6f25cf937f6cf433c", "url": "https://github.com/yahoo/elide/commit/2dbe0fd4a2f03d47be3cf3e6f25cf937f6cf433c", "message": "shortcut optimization", "committedDate": "2020-03-26T05:12:02Z", "type": "commit"}, {"oid": "2dbe0fd4a2f03d47be3cf3e6f25cf937f6cf433c", "url": "https://github.com/yahoo/elide/commit/2dbe0fd4a2f03d47be3cf3e6f25cf937f6cf433c", "message": "shortcut optimization", "committedDate": "2020-03-26T05:12:02Z", "type": "forcePushed"}, {"oid": "273c702d30fd84e7135726a7543761604a0a6f1c", "url": "https://github.com/yahoo/elide/commit/273c702d30fd84e7135726a7543761604a0a6f1c", "message": "update comments", "committedDate": "2020-03-26T13:10:03Z", "type": "commit"}]}