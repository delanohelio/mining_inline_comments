{"pr_number": 1459, "pr_title": "Rebased fetch for included relations", "pr_createdAt": "2020-07-22T23:46:45Z", "pr_url": "https://github.com/yahoo/elide/pull/1459", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MjMxMA==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459662310", "bodyText": "I don't think you need the entityClass if you also have the projection (The projection should have the class as well).", "author": "aklish", "createdAt": "2020-07-23T18:57:37Z", "path": "elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/RootCollectionFetchQueryBuilder.java", "diffHunk": "@@ -24,10 +25,10 @@\n \n     private Class<?> entityClass;\n \n-    public RootCollectionFetchQueryBuilder(Class<?> entityClass,\n+    public RootCollectionFetchQueryBuilder(EntityProjection entityProjection, Class<?> entityClass,", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0db34723da81bd09818b7b57eda150197c318cba", "chunk": "diff --git a/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/RootCollectionFetchQueryBuilder.java b/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/RootCollectionFetchQueryBuilder.java\nindex 0b1b4d2f6..77f2b22d9 100644\n--- a/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/RootCollectionFetchQueryBuilder.java\n+++ b/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/RootCollectionFetchQueryBuilder.java\n\n@@ -23,13 +24,10 @@ import java.util.Collection;\n  */\n public class RootCollectionFetchQueryBuilder extends AbstractHQLQueryBuilder {\n \n-    private Class<?> entityClass;\n-\n-    public RootCollectionFetchQueryBuilder(EntityProjection entityProjection, Class<?> entityClass,\n+    public RootCollectionFetchQueryBuilder(EntityProjection entityProjection,\n                                            EntityDictionary dictionary,\n                                            Session session) {\n         super(entityProjection, dictionary, session);\n-        this.entityClass = dictionary.lookupEntityClass(entityClass);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MzA1NQ==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459663055", "bodyText": "Remove entityClass.", "author": "aklish", "createdAt": "2020-07-23T18:59:05Z", "path": "elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/RootCollectionPageTotalsQueryBuilder.java", "diffHunk": "@@ -27,23 +25,14 @@\n \n     private Class<?> entityClass;\n \n-    public RootCollectionPageTotalsQueryBuilder(Class<?> entityClass,\n+    public RootCollectionPageTotalsQueryBuilder(EntityProjection entityProjection,\n+                                                Class<?> entityClass,", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0db34723da81bd09818b7b57eda150197c318cba", "chunk": "diff --git a/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/RootCollectionPageTotalsQueryBuilder.java b/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/RootCollectionPageTotalsQueryBuilder.java\nindex 7fd75323e..ac9285bf9 100644\n--- a/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/RootCollectionPageTotalsQueryBuilder.java\n+++ b/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/RootCollectionPageTotalsQueryBuilder.java\n\n@@ -23,14 +24,10 @@ import java.util.HashSet;\n  */\n public class RootCollectionPageTotalsQueryBuilder extends AbstractHQLQueryBuilder {\n \n-    private Class<?> entityClass;\n-\n     public RootCollectionPageTotalsQueryBuilder(EntityProjection entityProjection,\n-                                                Class<?> entityClass,\n                                                 EntityDictionary dictionary,\n                                                 Session session) {\n         super(entityProjection, dictionary, session);\n-        this.entityClass = dictionary.lookupEntityClass(entityClass);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MTc3OQ==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459671779", "bodyText": "There is a bit of duplication between fields inside the relationship and fields inside the entityProjection.\nNot a huge deal, but I think we ought to refactor the Relationship interface in AbstractHQLQueryBuilder by:\n\nremove getChildren (its never used).\nadd a method to return the projection.\ngetChildType should have a default implementation that sources this data from the new method in 2.", "author": "aklish", "createdAt": "2020-07-23T19:15:39Z", "path": "elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/SubCollectionFetchQueryBuilder.java", "diffHunk": "@@ -24,10 +25,11 @@\n \n     private final Relationship relationship;\n \n-    public SubCollectionFetchQueryBuilder(Relationship relationship,\n+    public SubCollectionFetchQueryBuilder(EntityProjection entityProjection,", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca6b1b71b43a460049e8a1e1b5ce17b3e9adf3cb", "chunk": "diff --git a/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/SubCollectionFetchQueryBuilder.java b/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/SubCollectionFetchQueryBuilder.java\nindex e5aa5e5f3..32c82cc08 100644\n--- a/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/SubCollectionFetchQueryBuilder.java\n+++ b/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/SubCollectionFetchQueryBuilder.java\n\n@@ -25,11 +25,10 @@ public class SubCollectionFetchQueryBuilder extends AbstractHQLQueryBuilder {\n \n     private final Relationship relationship;\n \n-    public SubCollectionFetchQueryBuilder(EntityProjection entityProjection,\n-                                          Relationship relationship,\n+    public SubCollectionFetchQueryBuilder(Relationship relationship,\n                                           EntityDictionary dictionary,\n                                           Session session) {\n-        super(entityProjection, dictionary, session);\n+        super(relationship.getRelationship().getProjection(), dictionary, session);\n         this.relationship = relationship;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MzI3NA==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459673274", "bodyText": "We can remove entityClass (as it is already contained in the new entity projection parameter)", "author": "aklish", "createdAt": "2020-07-23T19:18:36Z", "path": "elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java", "diffHunk": "@@ -270,13 +267,13 @@ public Object getRelation(\n      * @param <T>              The type of entity\n      * @return The total row count.\n      */\n-    private <T> Long getTotalRecords(Class<T> entityClass,\n+    private <T> Long getTotalRecords(EntityProjection entityProjection, Class<T> entityClass,", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0db34723da81bd09818b7b57eda150197c318cba", "chunk": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\nindex b40652f7b..9a59b7ee0 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\n\n@@ -261,21 +263,17 @@ public abstract class AbstractJpaTransaction implements JpaTransaction {\n     /**\n      * Returns the total record count for a root entity and an optional filter expression.\n      *\n-     * @param entityClass      The entity type to count\n-     * @param filterExpression optional security and request filters\n+     * @param entityProjection The entity projection to count\n      * @param dictionary       the entity dictionary\n      * @param <T>              The type of entity\n      * @return The total row count.\n      */\n-    private <T> Long getTotalRecords(EntityProjection entityProjection, Class<T> entityClass,\n-                                     Optional<FilterExpression> filterExpression,\n+    private <T> Long getTotalRecords(EntityProjection entityProjection,\n                                      EntityDictionary dictionary) {\n \n \n         QueryWrapper query = (QueryWrapper)\n-                new RootCollectionPageTotalsQueryBuilder(entityProjection, entityClass, dictionary, emWrapper)\n-                        .withPossibleFilterExpression(filterExpression)\n-                        .build();\n+                new RootCollectionPageTotalsQueryBuilder(entityProjection, dictionary, emWrapper).build();\n \n         return (Long) query.getQuery().getSingleResult();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MzYzMQ==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459673631", "bodyText": "We can remove entityClass parameter.", "author": "aklish", "createdAt": "2020-07-23T19:19:17Z", "path": "elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java", "diffHunk": "@@ -252,13 +250,13 @@ public Object getRelation(\n      * @param <T> The type of entity\n      * @return The total row count.\n      */\n-    private <T> Long getTotalRecords(Class<T> entityClass,\n+    private <T> Long getTotalRecords(EntityProjection entityProjection, Class<T> entityClass,\n                                      Optional<FilterExpression> filterExpression,\n                                      EntityDictionary dictionary) {\n \n \n         QueryWrapper query = (QueryWrapper)\n-                new RootCollectionPageTotalsQueryBuilder(entityClass, dictionary, sessionWrapper)\n+                new RootCollectionPageTotalsQueryBuilder(entityProjection, entityClass, dictionary, sessionWrapper)", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0db34723da81bd09818b7b57eda150197c318cba", "chunk": "diff --git a/elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java b/elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java\nindex d9b264e46..59174e4fa 100644\n--- a/elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java\n+++ b/elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java\n\n@@ -244,21 +246,17 @@ public class HibernateTransaction implements DataStoreTransaction {\n \n     /**\n      * Returns the total record count for a root entity and an optional filter expression.\n-     * @param entityClass The entity type to count\n-     * @param filterExpression optional security and request filters\n+     * @param entityProjection The entity projection to count\n      * @param dictionary the entity dictionary\n      * @param <T> The type of entity\n      * @return The total row count.\n      */\n-    private <T> Long getTotalRecords(EntityProjection entityProjection, Class<T> entityClass,\n-                                     Optional<FilterExpression> filterExpression,\n-                                     EntityDictionary dictionary) {\n+    private <T> Long getTotalRecords(EntityProjection entityProjection, EntityDictionary dictionary) {\n \n \n         QueryWrapper query = (QueryWrapper)\n-                new RootCollectionPageTotalsQueryBuilder(entityProjection, entityClass, dictionary, sessionWrapper)\n-                .withPossibleFilterExpression(filterExpression)\n-                .build();\n+                new RootCollectionPageTotalsQueryBuilder(entityProjection, dictionary, sessionWrapper)\n+                        .build();\n \n         return (Long) query.getQuery().uniqueResult();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3Mzc1NQ==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459673755", "bodyText": "We can remove entityClass parameter.", "author": "aklish", "createdAt": "2020-07-23T19:19:30Z", "path": "elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java", "diffHunk": "@@ -252,13 +250,13 @@ public Object getRelation(\n      * @param <T> The type of entity\n      * @return The total row count.\n      */\n-    private <T> Long getTotalRecords(Class<T> entityClass,\n+    private <T> Long getTotalRecords(EntityProjection entityProjection, Class<T> entityClass,", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0db34723da81bd09818b7b57eda150197c318cba", "chunk": "diff --git a/elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java b/elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java\nindex d9b264e46..59174e4fa 100644\n--- a/elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java\n+++ b/elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java\n\n@@ -244,21 +246,17 @@ public class HibernateTransaction implements DataStoreTransaction {\n \n     /**\n      * Returns the total record count for a root entity and an optional filter expression.\n-     * @param entityClass The entity type to count\n-     * @param filterExpression optional security and request filters\n+     * @param entityProjection The entity projection to count\n      * @param dictionary the entity dictionary\n      * @param <T> The type of entity\n      * @return The total row count.\n      */\n-    private <T> Long getTotalRecords(EntityProjection entityProjection, Class<T> entityClass,\n-                                     Optional<FilterExpression> filterExpression,\n-                                     EntityDictionary dictionary) {\n+    private <T> Long getTotalRecords(EntityProjection entityProjection, EntityDictionary dictionary) {\n \n \n         QueryWrapper query = (QueryWrapper)\n-                new RootCollectionPageTotalsQueryBuilder(entityProjection, entityClass, dictionary, sessionWrapper)\n-                .withPossibleFilterExpression(filterExpression)\n-                .build();\n+                new RootCollectionPageTotalsQueryBuilder(entityProjection, dictionary, sessionWrapper)\n+                        .build();\n \n         return (Long) query.getQuery().uniqueResult();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NDg1Mw==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459674853", "bodyText": "We can remove the entityClass param.", "author": "aklish", "createdAt": "2020-07-23T19:21:22Z", "path": "elide-datastore/elide-datastore-hibernate3/src/main/java/com/yahoo/elide/datastores/hibernate3/HibernateTransaction.java", "diffHunk": "@@ -245,31 +246,35 @@ public Object getRelation(\n      * @param <T> The type of entity\n      * @return The total row count.\n      */\n-    private <T> Long getTotalRecords(Class<T> entityClass,\n+    private <T> Long getTotalRecords(EntityProjection entityProjection,\n+                                     Class<T> entityClass,", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0db34723da81bd09818b7b57eda150197c318cba", "chunk": "diff --git a/elide-datastore/elide-datastore-hibernate3/src/main/java/com/yahoo/elide/datastores/hibernate3/HibernateTransaction.java b/elide-datastore/elide-datastore-hibernate3/src/main/java/com/yahoo/elide/datastores/hibernate3/HibernateTransaction.java\nindex 33f0b6846..1c76fac13 100644\n--- a/elide-datastore/elide-datastore-hibernate3/src/main/java/com/yahoo/elide/datastores/hibernate3/HibernateTransaction.java\n+++ b/elide-datastore/elide-datastore-hibernate3/src/main/java/com/yahoo/elide/datastores/hibernate3/HibernateTransaction.java\n\n@@ -241,21 +245,16 @@ public class HibernateTransaction implements DataStoreTransaction {\n \n     /**\n      * Returns the total record count for a root entity and an optional filter expression.\n-     * @param entityClass The entity type to count\n-     * @param filterExpression optional security and request filters\n+     * @param entityProjection The entity projection to count\n      * @param <T> The type of entity\n      * @return The total row count.\n      */\n     private <T> Long getTotalRecords(EntityProjection entityProjection,\n-                                     Class<T> entityClass,\n-                                     Optional<FilterExpression> filterExpression,\n                                      EntityDictionary dictionary) {\n \n         QueryWrapper query =\n-                (QueryWrapper) new RootCollectionPageTotalsQueryBuilder(entityProjection, entityClass,\n-                        dictionary, sessionWrapper)\n-                        .withPossibleFilterExpression(filterExpression)\n-                        .build();\n+                (QueryWrapper) new RootCollectionPageTotalsQueryBuilder(entityProjection,\n+                        dictionary, sessionWrapper).build();\n \n         return (Long) query.getQuery().uniqueResult();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NTA1OA==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459675058", "bodyText": "We can remove the entityClass param.", "author": "aklish", "createdAt": "2020-07-23T19:21:44Z", "path": "elide-datastore/elide-datastore-hibernate3/src/main/java/com/yahoo/elide/datastores/hibernate3/HibernateTransaction.java", "diffHunk": "@@ -163,18 +164,16 @@ public Object loadObject(EntityProjection projection,\n         Class<?> entityClass = projection.getType();\n         Pagination pagination = projection.getPagination();\n         FilterExpression filterExpression = projection.getFilterExpression();\n-        Sorting sorting = projection.getSorting();\n \n         if (pagination != null && pagination.returnPageTotals()) {\n-            pagination.setPageTotals(getTotalRecords(entityClass,\n+            pagination.setPageTotals(getTotalRecords(projection, entityClass,\n                     Optional.ofNullable(filterExpression), scope.getDictionary()));\n         }\n \n         final QueryWrapper query =\n-                (QueryWrapper) new RootCollectionFetchQueryBuilder(entityClass, scope.getDictionary(), sessionWrapper)\n+                (QueryWrapper) new RootCollectionFetchQueryBuilder(projection, entityClass,\n+                        scope.getDictionary(), sessionWrapper)", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0db34723da81bd09818b7b57eda150197c318cba", "chunk": "diff --git a/elide-datastore/elide-datastore-hibernate3/src/main/java/com/yahoo/elide/datastores/hibernate3/HibernateTransaction.java b/elide-datastore/elide-datastore-hibernate3/src/main/java/com/yahoo/elide/datastores/hibernate3/HibernateTransaction.java\nindex 33f0b6846..1c76fac13 100644\n--- a/elide-datastore/elide-datastore-hibernate3/src/main/java/com/yahoo/elide/datastores/hibernate3/HibernateTransaction.java\n+++ b/elide-datastore/elide-datastore-hibernate3/src/main/java/com/yahoo/elide/datastores/hibernate3/HibernateTransaction.java\n\n@@ -160,26 +161,30 @@ public class HibernateTransaction implements DataStoreTransaction {\n     public Iterable<Object> loadObjects(\n             EntityProjection projection,\n             RequestScope scope) {\n-\n-        Class<?> entityClass = projection.getType();\n         Pagination pagination = projection.getPagination();\n-        FilterExpression filterExpression = projection.getFilterExpression();\n-\n-        if (pagination != null && pagination.returnPageTotals()) {\n-            pagination.setPageTotals(getTotalRecords(projection, entityClass,\n-                    Optional.ofNullable(filterExpression), scope.getDictionary()));\n-        }\n \n         final QueryWrapper query =\n-                (QueryWrapper) new RootCollectionFetchQueryBuilder(projection, entityClass,\n-                        scope.getDictionary(), sessionWrapper)\n-                        .withPossibleFilterExpression(Optional.ofNullable(filterExpression))\n+                (QueryWrapper) new RootCollectionFetchQueryBuilder(projection, scope.getDictionary(), sessionWrapper)\n                         .build();\n \n+        Iterable results;\n+        final boolean hasResults;\n         if (isScrollEnabled) {\n-            return new ScrollableIterator<>(query.getQuery().scroll());\n+            results = new ScrollableIterator<>(query.getQuery().scroll());\n+            hasResults = ((ScrollableIterator) results).hasNext();\n+        } else {\n+            results = query.getQuery().list();\n+            hasResults = ! ((Collection) results).isEmpty();\n         }\n-        return query.getQuery().list();\n+\n+        if (pagination != null) {\n+            //Issue #1429\n+            if (pagination.returnPageTotals() && (hasResults || pagination.getLimit() == 0)) {\n+                pagination.setPageTotals(getTotalRecords(projection, scope.getDictionary()));\n+            }\n+        }\n+\n+        return results;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NzI0MQ==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459677241", "bodyText": "Technically, the entity projection should have the filter clause too.", "author": "aklish", "createdAt": "2020-07-23T19:25:49Z", "path": "elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/SubCollectionPageTotalsQueryBuilderTest.java", "diffHunk": "@@ -132,8 +189,10 @@ public void testSubCollectionPageTotalsWithJoinFilter() {\n                 new Path(publisherNamePath),\n                 \"Pub1\");\n \n+        EntityProjection entityProjection = EntityProjection.builder().type(Book.class).build();", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0db34723da81bd09818b7b57eda150197c318cba", "chunk": "diff --git a/elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/SubCollectionPageTotalsQueryBuilderTest.java b/elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/SubCollectionPageTotalsQueryBuilderTest.java\nindex d5d64b026..1c5e2c697 100644\n--- a/elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/SubCollectionPageTotalsQueryBuilderTest.java\n+++ b/elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/SubCollectionPageTotalsQueryBuilderTest.java\n\n@@ -189,14 +176,23 @@ public class SubCollectionPageTotalsQueryBuilderTest {\n                 new Path(publisherNamePath),\n                 \"Pub1\");\n \n-        EntityProjection entityProjection = EntityProjection.builder().type(Book.class).build();\n+        EntityProjection entityProjection = EntityProjection.builder()\n+                .type(Book.class)\n+                .filterExpression(publisherNamePredicate)\n+                .build();\n+\n+        Relationship relationshipProjection = Relationship.builder().name(BOOKS).projection(entityProjection).build();\n+\n+        RelationshipImpl relationship = new RelationshipImpl(\n+                Author.class,\n+                author,\n+                relationshipProjection\n+        );\n \n         SubCollectionPageTotalsQueryBuilder builder = new SubCollectionPageTotalsQueryBuilder(\n                 entityProjection, relationship, dictionary, new TestSessionWrapper());\n \n-        TestQueryWrapper query = (TestQueryWrapper) builder\n-                .withPossibleFilterExpression(Optional.of(publisherNamePredicate))\n-                .build();\n+        TestQueryWrapper query = (TestQueryWrapper) builder.build();\n \n         String expected =\n                 \"SELECT COUNT(DISTINCT example_Author_books) \"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcxMTkxNw==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459711917", "bodyText": "Setting and resetting the mock this way (including the old code) seems fairly hacky.\nI suggest we initialize this class with a mock entity projection.  Let's add a @BeforeEach or AfterEach annotation which resets the mocks.\nEach method will have to setup the projection the way that. makes the most sense.", "author": "aklish", "createdAt": "2020-07-23T20:33:59Z", "path": "elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/AbstractHQLQueryBuilderTest.java", "diffHunk": "@@ -179,20 +190,20 @@ public void testSettingQueryParams() {\n     public void testSettingQueryPagination() {\n         Query query = mock(Query.class);\n \n-        Optional<Pagination> previousPagination = pagination;\n-\n         PaginationImpl paginationMock = mock(PaginationImpl.class);\n         when(paginationMock.getLimit()).thenReturn(10);\n         when(paginationMock.getOffset()).thenReturn(50);\n \n-        pagination = Optional.of(paginationMock);\n+        EntityProjection previousEntityProjection = entityProjection;\n+        entityProjection = mock(EntityProjection.class);", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0db34723da81bd09818b7b57eda150197c318cba", "chunk": "diff --git a/elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/AbstractHQLQueryBuilderTest.java b/elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/AbstractHQLQueryBuilderTest.java\nindex bfd3e646e..afb073be8 100644\n--- a/elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/AbstractHQLQueryBuilderTest.java\n+++ b/elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/AbstractHQLQueryBuilderTest.java\n\n@@ -194,16 +199,11 @@ public class AbstractHQLQueryBuilderTest extends AbstractHQLQueryBuilder {\n         when(paginationMock.getLimit()).thenReturn(10);\n         when(paginationMock.getOffset()).thenReturn(50);\n \n-        EntityProjection previousEntityProjection = entityProjection;\n-        entityProjection = mock(EntityProjection.class);\n-        when(entityProjection.getPagination()).thenReturn(paginationMock);\n-\n-        try {\n-            addPaginationToQuery(query);\n-            verify(query, times(1)).setMaxResults(10);\n-            verify(query, times(1)).setFirstResult(50);\n-        } finally {\n-            entityProjection = previousEntityProjection;\n-        }\n+        when(this.entityProjection.getPagination()).thenReturn(paginationMock);\n+\n+\n+        addPaginationToQuery(query);\n+        verify(query, times(1)).setMaxResults(10);\n+        verify(query, times(1)).setFirstResult(50);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcxMjExMw==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459712113", "bodyText": "Do we need a method for this?", "author": "aklish", "createdAt": "2020-07-23T20:34:22Z", "path": "elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/AbstractHQLQueryBuilderTest.java", "diffHunk": "@@ -54,15 +55,21 @@\n     private static final String DEF = \"DEF\";\n     private static final String NAME = \"name\";\n \n+\n     public AbstractHQLQueryBuilderTest() {\n-        super(new EntityDictionary(new HashMap<>()), new TestSessionWrapper());\n+        super(getMockEntityProjection(), new EntityDictionary(new HashMap<>()), new TestSessionWrapper());\n         dictionary.bindEntity(Author.class);\n         dictionary.bindEntity(Book.class);\n         dictionary.bindEntity(Chapter.class);\n         dictionary.bindEntity(Publisher.class);\n         dictionary.bindEntity(Left.class);\n     }\n \n+    private static  EntityProjection getMockEntityProjection() {", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwMDI0Mw==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r469400243", "bodyText": "I had to create this method, due to the fact that calling super should be the first statement of the constructor, where this method is used.", "author": "suriyasundar92", "createdAt": "2020-08-12T16:49:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcxMjExMw=="}], "type": "inlineReview", "revised_code": {"commit": "0db34723da81bd09818b7b57eda150197c318cba", "chunk": "diff --git a/elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/AbstractHQLQueryBuilderTest.java b/elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/AbstractHQLQueryBuilderTest.java\nindex bfd3e646e..afb073be8 100644\n--- a/elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/AbstractHQLQueryBuilderTest.java\n+++ b/elide-datastore/elide-datastore-hibernate/src/test/java/com/yahoo/elide/datastores/hibernate/hql/AbstractHQLQueryBuilderTest.java\n\n@@ -71,6 +72,11 @@ public class AbstractHQLQueryBuilderTest extends AbstractHQLQueryBuilder {\n         return entityProjection;\n     }\n \n+    @BeforeEach\n+    public void reInitializeMock() {\n+        this.entityProjection = getMockEntityProjection();\n+    }\n+\n     @Override\n     public Query build() {\n         return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcxMzY3MQ==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r459713671", "bodyText": "The entity projection includes the Filter as well (not just the sorting and the pagination)", "author": "aklish", "createdAt": "2020-07-23T20:37:29Z", "path": "elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/AbstractHQLQueryBuilder.java", "diffHunk": "@@ -88,16 +86,6 @@ public AbstractHQLQueryBuilder withPossibleFilterExpression(Optional<FilterExpre\n         return this;\n     }\n \n-    public AbstractHQLQueryBuilder withPossibleSorting(final Optional<Sorting> possibleSorting) {", "originalCommit": "02bacc3cb2bb1860cb257cfbb4cdd1164f1eea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0db34723da81bd09818b7b57eda150197c318cba", "chunk": "diff --git a/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/AbstractHQLQueryBuilder.java b/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/AbstractHQLQueryBuilder.java\nindex 96c5179fc..d09c3fbc6 100644\n--- a/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/AbstractHQLQueryBuilder.java\n+++ b/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/AbstractHQLQueryBuilder.java\n\n@@ -60,32 +58,30 @@ public abstract class AbstractHQLQueryBuilder {\n      * Represents a relationship between two entities.\n      */\n     public interface Relationship {\n-        public Class<?> getParentType();\n \n-        public Class<?> getChildType();\n+        com.yahoo.elide.request.Relationship getRelationship();\n \n-        public String getRelationshipName();\n+        Class<?> getParentType();\n \n-        public Object getParent();\n+        default Class<?> getChildType() {\n+            return getRelationship().getProjection().getType();\n+        }\n+\n+        default String getRelationshipName() {\n+            return getRelationship().getName();\n+        }\n \n-        public Collection<?> getChildren();\n+        Object getParent();\n     }\n \n     public AbstractHQLQueryBuilder(EntityProjection entityProjection, EntityDictionary dictionary, Session session) {\n         this.session = session;\n         this.dictionary = dictionary;\n         this.entityProjection = entityProjection;\n-        filterExpression = Optional.empty();\n-\n     }\n \n     public abstract Query build();\n \n-    public AbstractHQLQueryBuilder withPossibleFilterExpression(Optional<FilterExpression> filterExpression) {\n-        this.filterExpression = filterExpression;\n-        return this;\n-    }\n-\n     /**\n      * Given a collection of filter predicates and a Hibernate query, populates the named parameters in the\n      * Hibernate query.\n"}}, {"oid": "0db34723da81bd09818b7b57eda150197c318cba", "url": "https://github.com/yahoo/elide/commit/0db34723da81bd09818b7b57eda150197c318cba", "message": "Adding fetch joins only when required", "committedDate": "2020-08-12T16:12:06Z", "type": "forcePushed"}, {"oid": "37710dc6829b8043ad92fb1d9f8a4e4b2acc32c2", "url": "https://github.com/yahoo/elide/commit/37710dc6829b8043ad92fb1d9f8a4e4b2acc32c2", "message": "Adding fetch joins only when required", "committedDate": "2020-08-13T04:45:59Z", "type": "commit"}, {"oid": "37710dc6829b8043ad92fb1d9f8a4e4b2acc32c2", "url": "https://github.com/yahoo/elide/commit/37710dc6829b8043ad92fb1d9f8a4e4b2acc32c2", "message": "Adding fetch joins only when required", "committedDate": "2020-08-13T04:45:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxNjk4NQ==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r470716985", "bodyText": "This method should get the entityProjection from the relationship - so there is no parameter duplication", "author": "aklish", "createdAt": "2020-08-14T16:05:55Z", "path": "elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/SubCollectionFetchQueryBuilder.java", "diffHunk": "@@ -24,10 +26,11 @@\n \n     private final Relationship relationship;\n \n-    public SubCollectionFetchQueryBuilder(Relationship relationship,\n+    public SubCollectionFetchQueryBuilder(EntityProjection entityProjection,\n+                                          Relationship relationship,", "originalCommit": "37710dc6829b8043ad92fb1d9f8a4e4b2acc32c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca6b1b71b43a460049e8a1e1b5ce17b3e9adf3cb", "chunk": "diff --git a/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/SubCollectionFetchQueryBuilder.java b/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/SubCollectionFetchQueryBuilder.java\nindex 24746bc2d..32c82cc08 100644\n--- a/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/SubCollectionFetchQueryBuilder.java\n+++ b/elide-datastore/elide-datastore-hibernate/src/main/java/com/yahoo/elide/core/hibernate/hql/SubCollectionFetchQueryBuilder.java\n\n@@ -26,11 +25,10 @@ public class SubCollectionFetchQueryBuilder extends AbstractHQLQueryBuilder {\n \n     private final Relationship relationship;\n \n-    public SubCollectionFetchQueryBuilder(EntityProjection entityProjection,\n-                                          Relationship relationship,\n+    public SubCollectionFetchQueryBuilder(Relationship relationship,\n                                           EntityDictionary dictionary,\n                                           Session session) {\n-        super(entityProjection, dictionary, session);\n+        super(relationship.getRelationship().getProjection(), dictionary, session);\n         this.relationship = relationship;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxNzcxNQ==", "url": "https://github.com/yahoo/elide/pull/1459#discussion_r470717715", "bodyText": "Same comment here.  getTotalRecords should only really need the relationship.", "author": "aklish", "createdAt": "2020-08-14T16:07:25Z", "path": "elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java", "diffHunk": "@@ -223,26 +218,23 @@ public Object getRelation(\n                     return val;\n                 }\n \n-                Class<?> relationClass = dictionary.getParameterizedType(entity, relation.getName());\n-\n                 RelationshipImpl relationship = new RelationshipImpl(\n                         dictionary.lookupEntityClass(entity.getClass()),\n-                        relationClass,\n-                        relation.getName(),\n                         entity,\n-                        filteredVal);\n+                        relation\n+                );\n \n                 if (pagination != null && pagination.returnPageTotals()) {\n-                    pagination.setPageTotals(getTotalRecords(relationship,\n-                            Optional.ofNullable(filterExpression), scope.getDictionary()));\n+                    pagination.setPageTotals(getTotalRecords(", "originalCommit": "37710dc6829b8043ad92fb1d9f8a4e4b2acc32c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca6b1b71b43a460049e8a1e1b5ce17b3e9adf3cb", "chunk": "diff --git a/elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java b/elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java\nindex 59174e4fa..358a16cf4 100644\n--- a/elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java\n+++ b/elide-datastore/elide-datastore-hibernate5/src/main/java/com/yahoo/elide/datastores/hibernate5/HibernateTransaction.java\n\n@@ -226,15 +226,13 @@ public class HibernateTransaction implements DataStoreTransaction {\n \n                 if (pagination != null && pagination.returnPageTotals()) {\n                     pagination.setPageTotals(getTotalRecords(\n-                            relation.getProjection(),\n                             relationship,\n                             scope.getDictionary()\n                     ));\n                 }\n \n                 final QueryWrapper query = (QueryWrapper)\n-                        new SubCollectionFetchQueryBuilder(relation.getProjection(), relationship,\n-                                dictionary, sessionWrapper).build();\n+                        new SubCollectionFetchQueryBuilder(relationship, dictionary, sessionWrapper).build();\n \n                 if (query != null) {\n                     return query.getQuery().list();\n"}}, {"oid": "ca6b1b71b43a460049e8a1e1b5ce17b3e9adf3cb", "url": "https://github.com/yahoo/elide/commit/ca6b1b71b43a460049e8a1e1b5ce17b3e9adf3cb", "message": "Addressing comments", "committedDate": "2020-08-16T14:39:17Z", "type": "commit"}, {"oid": "687c88dd0a638cac1bfadcf95c3733ca43db81e2", "url": "https://github.com/yahoo/elide/commit/687c88dd0a638cac1bfadcf95c3733ca43db81e2", "message": "Remove unused argument", "committedDate": "2020-08-17T15:21:38Z", "type": "commit"}]}