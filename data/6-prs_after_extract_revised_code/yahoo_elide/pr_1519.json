{"pr_number": 1519, "pr_title": "Introduce case insensitive equality rsql operator. Default is case sensitive", "pr_createdAt": "2020-08-31T21:40:33Z", "pr_url": "https://github.com/yahoo/elide/pull/1519", "timeline": [{"oid": "709a5b27e09d28e52e03d392444daf423927bf4f", "url": "https://github.com/yahoo/elide/commit/709a5b27e09d28e52e03d392444daf423927bf4f", "message": "introduce case insensitive equality rsql operator. Default is case sensitive", "committedDate": "2020-08-31T21:31:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzMTkxNQ==", "url": "https://github.com/yahoo/elide/pull/1519#discussion_r481331915", "bodyText": "Looks good, but we should add all the insensitive operators here as well (PREFIXI, INFIXI, etc)", "author": "aklish", "createdAt": "2020-09-01T18:01:38Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/RSQLFilterDialect.java", "diffHunk": "@@ -59,6 +60,8 @@\n     private static final String SINGLE_PARAMETER_ONLY = \"There can only be a single filter query parameter\";\n     private static final String INVALID_QUERY_PARAMETER = \"Invalid query parameter: \";\n     private static final Pattern TYPED_FILTER_PATTERN = Pattern.compile(\"filter\\\\[([^\\\\]]+)\\\\]\");\n+    private static final ComparisonOperator INI = new ComparisonOperator(\"=ini=\", true);\n+    private static final ComparisonOperator NOT_INI = new ComparisonOperator(\"=outi=\", true);", "originalCommit": "709a5b27e09d28e52e03d392444daf423927bf4f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzMjM4OA==", "url": "https://github.com/yahoo/elide/pull/1519#discussion_r481332388", "bodyText": "Let's make these else if statements.", "author": "aklish", "createdAt": "2020-09-01T18:02:32Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/RSQLFilterDialect.java", "diffHunk": "@@ -343,10 +348,16 @@ public FilterExpression visit(ComparisonNode node, Class entityType) {\n                     .collect(Collectors.toList());\n \n             if (op.equals(RSQLOperators.EQUAL) || op.equals(RSQLOperators.IN)) {\n-                return equalityExpression(arguments.get(0), path, values);\n+                return equalityExpression(arguments.get(0), path, values, true);\n+            }\n+            if (op.equals(INI)) {", "originalCommit": "709a5b27e09d28e52e03d392444daf423927bf4f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d4d4ea16de55cc2b1515efbb0f20aadee8c16d6", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/RSQLFilterDialect.java b/elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/RSQLFilterDialect.java\nindex a938b8b11..225a0734e 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/RSQLFilterDialect.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/RSQLFilterDialect.java\n\n@@ -347,19 +347,16 @@ public class RSQLFilterDialect implements SubqueryFilterDialect, JoinFilterDiale\n                     .map((argument) -> (Object) CoerceUtil.coerce(argument, relationshipType))\n                     .collect(Collectors.toList());\n \n+\n             if (op.equals(RSQLOperators.EQUAL) || op.equals(RSQLOperators.IN)) {\n                 return equalityExpression(arguments.get(0), path, values, true);\n-            }\n-            if (op.equals(INI)) {\n+            } else if (op.equals(INI)) {\n                 return equalityExpression(arguments.get(0), path, values, false);\n-            }\n-            if (op.equals(RSQLOperators.NOT_EQUAL) || op.equals(RSQLOperators.NOT_IN)) {\n+            } else if (op.equals(RSQLOperators.NOT_EQUAL) || op.equals(RSQLOperators.NOT_IN)) {\n                 return new NotFilterExpression(equalityExpression(arguments.get(0), path, values, true));\n-            }\n-            if (op.equals(NOT_INI)) {\n+            } else if (op.equals(NOT_INI)) {\n                 return new NotFilterExpression(equalityExpression(arguments.get(0), path, values, false));\n-            }\n-            if (OPERATOR_MAP.containsKey(op)) {\n+            } else if (OPERATOR_MAP.containsKey(op)) {\n                 return new FilterPredicate(path, OPERATOR_MAP.get(op), values);\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNzAyMg==", "url": "https://github.com/yahoo/elide/pull/1519#discussion_r481337022", "bodyText": "I believe we need to add explicit conditions for INFIXI, PREFIX, etc.", "author": "aklish", "createdAt": "2020-09-01T18:11:08Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/RSQLFilterDialect.java", "diffHunk": "@@ -343,10 +348,16 @@ public FilterExpression visit(ComparisonNode node, Class entityType) {\n                     .collect(Collectors.toList());\n \n             if (op.equals(RSQLOperators.EQUAL) || op.equals(RSQLOperators.IN)) {\n-                return equalityExpression(arguments.get(0), path, values);\n+                return equalityExpression(arguments.get(0), path, values, true);\n+            }\n+            if (op.equals(INI)) {\n+                return equalityExpression(arguments.get(0), path, values, false);\n             }\n             if (op.equals(RSQLOperators.NOT_EQUAL) || op.equals(RSQLOperators.NOT_IN)) {\n-                return new NotFilterExpression(equalityExpression(arguments.get(0), path, values));\n+                return new NotFilterExpression(equalityExpression(arguments.get(0), path, values, true));\n+            }\n+            if (op.equals(NOT_INI)) {", "originalCommit": "709a5b27e09d28e52e03d392444daf423927bf4f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d4d4ea16de55cc2b1515efbb0f20aadee8c16d6", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/RSQLFilterDialect.java b/elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/RSQLFilterDialect.java\nindex a938b8b11..225a0734e 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/RSQLFilterDialect.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/filter/dialect/RSQLFilterDialect.java\n\n@@ -347,19 +347,16 @@ public class RSQLFilterDialect implements SubqueryFilterDialect, JoinFilterDiale\n                     .map((argument) -> (Object) CoerceUtil.coerce(argument, relationshipType))\n                     .collect(Collectors.toList());\n \n+\n             if (op.equals(RSQLOperators.EQUAL) || op.equals(RSQLOperators.IN)) {\n                 return equalityExpression(arguments.get(0), path, values, true);\n-            }\n-            if (op.equals(INI)) {\n+            } else if (op.equals(INI)) {\n                 return equalityExpression(arguments.get(0), path, values, false);\n-            }\n-            if (op.equals(RSQLOperators.NOT_EQUAL) || op.equals(RSQLOperators.NOT_IN)) {\n+            } else if (op.equals(RSQLOperators.NOT_EQUAL) || op.equals(RSQLOperators.NOT_IN)) {\n                 return new NotFilterExpression(equalityExpression(arguments.get(0), path, values, true));\n-            }\n-            if (op.equals(NOT_INI)) {\n+            } else if (op.equals(NOT_INI)) {\n                 return new NotFilterExpression(equalityExpression(arguments.get(0), path, values, false));\n-            }\n-            if (OPERATOR_MAP.containsKey(op)) {\n+            } else if (OPERATOR_MAP.containsKey(op)) {\n                 return new FilterPredicate(path, OPERATOR_MAP.get(op), values);\n             }\n \n"}}, {"oid": "3d4d4ea16de55cc2b1515efbb0f20aadee8c16d6", "url": "https://github.com/yahoo/elide/commit/3d4d4ea16de55cc2b1515efbb0f20aadee8c16d6", "message": "refactoring", "committedDate": "2020-09-01T20:09:36Z", "type": "commit"}]}