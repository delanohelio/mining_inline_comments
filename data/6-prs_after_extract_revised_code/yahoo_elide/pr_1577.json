{"pr_number": 1577, "pr_title": "Revert composite id changes for Table", "pr_createdAt": "2020-10-07T12:58:46Z", "pr_url": "https://github.com/yahoo/elide/pull/1577", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2MzY5MQ==", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501063691", "bodyText": "we dont need version in ID anymore", "author": "moizarafat", "createdAt": "2020-10-07T14:34:44Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/Table.java", "diffHunk": "@@ -105,7 +105,12 @@ public Table(Class<?> cls, EntityDictionary dictionary) {\n             dbConnectionName = ((FromSubquery) annotation).dbConnectionName();\n         }\n \n-        this.id = new TableId(this.name, this.version, dbConnectionName);\n+        if (this.version != null && ! this.version.isEmpty()) {\n+            this.id = this.name + \".\" + this.version;", "originalCommit": "baa3e5cc994d4966e665c71e9c596f8582a51c17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2NTkyMw==", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501065923", "bodyText": "yes. that require changes to Metadatstore o/w tests fail, will update after testing Metadatastore changes.", "author": "rishi-aga", "createdAt": "2020-10-07T14:37:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2MzY5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d8b51bc402fe5dd5b937e35af3a5d08a255da4e6", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/Table.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/Table.java\nindex f88db8a2c..4ce992e36 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/Table.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/models/Table.java\n\n@@ -105,11 +105,7 @@ public class Table {\n             dbConnectionName = ((FromSubquery) annotation).dbConnectionName();\n         }\n \n-        if (this.version != null && ! this.version.isEmpty()) {\n-            this.id = this.name + \".\" + this.version;\n-        } else {\n-            this.id = this.name;\n-        }\n+        this.id = this.name;\n         this.dbConnectionName = dbConnectionName;\n \n         this.columns = constructColumns(cls, dictionary);\n"}}, {"oid": "d8b51bc402fe5dd5b937e35af3a5d08a255da4e6", "url": "https://github.com/yahoo/elide/commit/d8b51bc402fe5dd5b937e35af3a5d08a255da4e6", "message": "MetaDataStore changes", "committedDate": "2020-10-07T21:10:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzMjE3MQ==", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501832171", "bodyText": "Instead of opening this up publicly, what if we add a method to add something to the storage instead?", "author": "aklish", "createdAt": "2020-10-08T15:56:00Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/datastore/inmemory/HashMapDataStore.java", "diffHunk": "@@ -78,6 +78,10 @@ public DataStore getDataStore() {\n         return this;\n     }\n \n+    public Map<Class<?>, Map<String, Object>> getStorage() {", "originalCommit": "cb8c7a5e47056dc6e7a76d200f439aea82ee6b8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkwNzAzMg==", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501907032", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-10-08T17:54:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzMjE3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e9fddacc9b92733f10527e8ea5e7ac79b5ef48a5", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/datastore/inmemory/HashMapDataStore.java b/elide-core/src/main/java/com/yahoo/elide/core/datastore/inmemory/HashMapDataStore.java\nindex 3ed5c8528..85f907f2a 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/datastore/inmemory/HashMapDataStore.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/datastore/inmemory/HashMapDataStore.java\n\n@@ -78,10 +78,6 @@ public class HashMapDataStore implements DataStore, DataStoreTestHarness {\n         return this;\n     }\n \n-    public Map<Class<?>, Map<String, Object>> getStorage() {\n-        return dataStore;\n-    }\n-\n     @Override\n     public void cleanseTestData() {\n         for (Map<String, Object> objects : dataStore.values()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzNDIyMA==", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501834220", "bodyText": "I don't think we want to throw a 500 error here.  This should be some kind of 4XX.", "author": "aklish", "createdAt": "2020-10-08T15:58:53Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/MetaDataStoreIntegrationTest.java", "diffHunk": "@@ -216,15 +213,43 @@ public void metricMetaDataTest() {\n                 .body(\"data.attributes.valueType\",  equalTo(\"DECIMAL\"))\n                 .body(\"data.attributes.columnType\",  equalTo(\"FORMULA\"))\n                 .body(\"data.attributes.expression\",  equalTo(\"({{timeSpent}} / (CASE WHEN SUM({{game_rounds}}) = 0 THEN 1 ELSE {{sessions}} END))\"))\n-                .body(\"data.relationships.table.data.id\", equalTo(getTableId(\"videoGame\", \"\", \"mycon\")));\n+                .body(\"data.relationships.table.data.id\", equalTo(\"videoGame\"));\n \n     }\n \n-    private String getTableId(String name, String version, String dbConnectionName) {\n-        return new TableId(name, version, dbConnectionName).toString();\n-    }\n+    @Test\n+    public void versioningTest() {\n+\n+        given()\n+                .accept(\"application/vnd.api+json\")\n+                .get(\"/table\")\n+                .then()\n+                .statusCode(HttpStatus.SC_OK)\n+                .body(\"data\", hasSize(greaterThan(30)));\n+\n+        given()\n+                .header(\"ApiVersion\", \"\")\n+                .accept(\"application/vnd.api+json\")\n+                .get(\"/table\")\n+                .then()\n+                .statusCode(HttpStatus.SC_OK)\n+                .body(\"data\", hasSize(greaterThan(30)));\n+\n+        given()\n+                .header(\"ApiVersion\", \"1.0\")\n+                .accept(\"application/vnd.api+json\")\n+                .get(\"/table\")\n+                .then()\n+                .statusCode(HttpStatus.SC_OK)\n+                .body(\"data\", hasSize(1))\n+                .body(\"data.attributes.name\", hasItem(\"book\"))\n+                .body(\"data.attributes.dbConnectionName\", hasItem(\"\"));\n \n-    private String getTableId(String name) {\n-        return getTableId(name, \"\", \"\");\n+        given()\n+                .header(\"ApiVersion\", \"2.0\")\n+                .accept(\"application/vnd.api+json\")\n+                .get(\"/table\")\n+                .then()\n+                .statusCode(HttpStatus.SC_INTERNAL_SERVER_ERROR);", "originalCommit": "cb8c7a5e47056dc6e7a76d200f439aea82ee6b8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkwNjg3Mw==", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501906873", "bodyText": "\ud83d\udc4d", "author": "rishi-aga", "createdAt": "2020-10-08T17:54:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzNDIyMA=="}], "type": "inlineReview", "revised_code": {"commit": "e9fddacc9b92733f10527e8ea5e7ac79b5ef48a5", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/MetaDataStoreIntegrationTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/MetaDataStoreIntegrationTest.java\nindex 778c32ecb..81b2b9df6 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/MetaDataStoreIntegrationTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/MetaDataStoreIntegrationTest.java\n\n@@ -216,40 +214,4 @@ public class MetaDataStoreIntegrationTest extends IntegrationTest {\n                 .body(\"data.relationships.table.data.id\", equalTo(\"videoGame\"));\n \n     }\n-\n-    @Test\n-    public void versioningTest() {\n-\n-        given()\n-                .accept(\"application/vnd.api+json\")\n-                .get(\"/table\")\n-                .then()\n-                .statusCode(HttpStatus.SC_OK)\n-                .body(\"data\", hasSize(greaterThan(30)));\n-\n-        given()\n-                .header(\"ApiVersion\", \"\")\n-                .accept(\"application/vnd.api+json\")\n-                .get(\"/table\")\n-                .then()\n-                .statusCode(HttpStatus.SC_OK)\n-                .body(\"data\", hasSize(greaterThan(30)));\n-\n-        given()\n-                .header(\"ApiVersion\", \"1.0\")\n-                .accept(\"application/vnd.api+json\")\n-                .get(\"/table\")\n-                .then()\n-                .statusCode(HttpStatus.SC_OK)\n-                .body(\"data\", hasSize(1))\n-                .body(\"data.attributes.name\", hasItem(\"book\"))\n-                .body(\"data.attributes.dbConnectionName\", hasItem(\"\"));\n-\n-        given()\n-                .header(\"ApiVersion\", \"2.0\")\n-                .accept(\"application/vnd.api+json\")\n-                .get(\"/table\")\n-                .then()\n-                .statusCode(HttpStatus.SC_INTERNAL_SERVER_ERROR);\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzODk2Ng==", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501838966", "bodyText": "Maybe throw a 403 error (HttpStatusException) for some of these that relate to client requests.", "author": "aklish", "createdAt": "2020-10-08T16:06:01Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStoreTransaction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.metadata;\n+\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.core.datastore.inmemory.HashMapDataStore;\n+import com.yahoo.elide.core.filter.expression.FilterExpression;\n+\n+import com.yahoo.elide.request.EntityProjection;\n+import com.yahoo.elide.request.Relationship;\n+import com.yahoo.elide.request.Sorting;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+/**\n+ * MetaDataStore transaction handler.\n+ */\n+public class MetaDataStoreTransaction implements DataStoreTransaction {\n+    private final Map<String, HashMapDataStore> hashMapDataStores;\n+\n+    public MetaDataStoreTransaction(Map<String, HashMapDataStore> hashMapDataStores) {\n+        this.hashMapDataStores = hashMapDataStores;\n+    }\n+\n+    @Override\n+    public void flush(RequestScope requestScope) {\n+        // Do nothing\n+    }\n+\n+    @Override\n+    public void save(Object object, RequestScope requestScope) {\n+        // Do nothing", "originalCommit": "758e48626127abcfb944bf0c74c20eefc3609cfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkwNjc0MQ==", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501906741", "bodyText": "throwing InvalidOperationException for save and delete.", "author": "rishi-aga", "createdAt": "2020-10-08T17:54:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzODk2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e9fddacc9b92733f10527e8ea5e7ac79b5ef48a5", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStoreTransaction.java\ndeleted file mode 100644\nindex fb5fc037c..000000000\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStoreTransaction.java\n+++ /dev/null\n\n@@ -1,105 +0,0 @@\n-/*\n- * Copyright 2020, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.datastores.aggregation.metadata;\n-\n-import com.yahoo.elide.core.DataStoreTransaction;\n-import com.yahoo.elide.core.RequestScope;\n-import com.yahoo.elide.core.datastore.inmemory.HashMapDataStore;\n-import com.yahoo.elide.core.filter.expression.FilterExpression;\n-\n-import com.yahoo.elide.request.EntityProjection;\n-import com.yahoo.elide.request.Relationship;\n-import com.yahoo.elide.request.Sorting;\n-\n-import java.io.IOException;\n-import java.io.Serializable;\n-import java.util.Map;\n-\n-/**\n- * MetaDataStore transaction handler.\n- */\n-public class MetaDataStoreTransaction implements DataStoreTransaction {\n-    private final Map<String, HashMapDataStore> hashMapDataStores;\n-\n-    public MetaDataStoreTransaction(Map<String, HashMapDataStore> hashMapDataStores) {\n-        this.hashMapDataStores = hashMapDataStores;\n-    }\n-\n-    @Override\n-    public void flush(RequestScope requestScope) {\n-        // Do nothing\n-    }\n-\n-    @Override\n-    public void save(Object object, RequestScope requestScope) {\n-        // Do nothing\n-    }\n-\n-    @Override\n-    public void delete(Object object, RequestScope requestScope) {\n-        // Do nothing\n-    }\n-\n-    @Override\n-    public void commit(RequestScope scope) {\n-        // Do nothing\n-    }\n-\n-    @Override\n-    public void createObject(Object entity, RequestScope scope) {\n-        // Do nothing\n-    }\n-\n-    @Override\n-    public Object getRelation(DataStoreTransaction relationTx, Object entity, Relationship relationship,\n-                    RequestScope scope) {\n-        return hashMapDataStores\n-                        .computeIfAbsent(scope.getApiVersion(), MetaDataStore.ERROR_OUT)\n-                        .getDictionary()\n-                        .getValue(entity, relationship.getName(), scope);\n-    }\n-\n-    @Override\n-    public Iterable<Object> loadObjects(EntityProjection projection, RequestScope scope) {\n-        return hashMapDataStores\n-                        .computeIfAbsent(scope.getApiVersion(), MetaDataStore.ERROR_OUT)\n-                        .beginTransaction()\n-                        .loadObjects(projection, scope);\n-    }\n-\n-    @Override\n-    public Object loadObject(EntityProjection projection, Serializable id, RequestScope scope) {\n-        return hashMapDataStores\n-                        .computeIfAbsent(scope.getApiVersion(), MetaDataStore.ERROR_OUT)\n-                        .beginTransaction()\n-                        .loadObject(projection, id, scope);\n-    }\n-\n-    @Override\n-    public void close() throws IOException {\n-        // Do nothing\n-    }\n-\n-    @Override\n-    public FeatureSupport supportsFiltering(Class<?> entityClass, FilterExpression expression) {\n-        return FeatureSupport.NONE;\n-    }\n-\n-    @Override\n-    public boolean supportsSorting(Class<?> entityClass, Sorting sorting) {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean supportsPagination(Class<?> entityClass, FilterExpression expression) {\n-        return false;\n-    }\n-\n-    @Override\n-    public void cancel(RequestScope scope) {\n-        // Do nothing\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0MDU3Ng==", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501840576", "bodyText": "HttpStatusException throw some 4XX error.", "author": "aklish", "createdAt": "2020-10-08T16:08:16Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -35,22 +37,47 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n \n /**\n  * MetaDataStore is a in-memory data store that manage data models for an {@link AggregationDataStore}.\n  */\n-public class MetaDataStore extends HashMapDataStore {\n+public class MetaDataStore implements DataStore {\n     private static final Package META_DATA_PACKAGE = Table.class.getPackage();\n \n     private static final List<Class<? extends Annotation>> METADATA_STORE_ANNOTATIONS =\n             Arrays.asList(FromTable.class, FromSubquery.class, Subselect.class, javax.persistence.Table.class);\n \n+    public static final Function<String, HashMapDataStore> ERROR_OUT = new Function<String, HashMapDataStore>() {\n+        @Override\n+        public HashMapDataStore apply(String key) {\n+            throw new IllegalStateException(\"API version \" + key + \" not found\");", "originalCommit": "758e48626127abcfb944bf0c74c20eefc3609cfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkwNjUwMA==", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501906500", "bodyText": "changed to BadRequestException", "author": "rishi-aga", "createdAt": "2020-10-08T17:53:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0MDU3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e9fddacc9b92733f10527e8ea5e7ac79b5ef48a5", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java\nindex 8b58766eb..7f23ac6c4 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java\n\n@@ -37,47 +35,22 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.util.function.Function;\n import java.util.stream.Collectors;\n \n /**\n  * MetaDataStore is a in-memory data store that manage data models for an {@link AggregationDataStore}.\n  */\n-public class MetaDataStore implements DataStore {\n+public class MetaDataStore extends HashMapDataStore {\n     private static final Package META_DATA_PACKAGE = Table.class.getPackage();\n \n     private static final List<Class<? extends Annotation>> METADATA_STORE_ANNOTATIONS =\n             Arrays.asList(FromTable.class, FromSubquery.class, Subselect.class, javax.persistence.Table.class);\n \n-    public static final Function<String, HashMapDataStore> ERROR_OUT = new Function<String, HashMapDataStore>() {\n-        @Override\n-        public HashMapDataStore apply(String key) {\n-            throw new IllegalStateException(\"API version \" + key + \" not found\");\n-        }\n-    };\n-\n-    private static final Function<String, HashMapDataStore> SETUP_NEW = new Function<String, HashMapDataStore>() {\n-        @Override\n-        public HashMapDataStore apply(String key) {\n-            HashMapDataStore hashMapDataStore = new HashMapDataStore(META_DATA_PACKAGE);\n-            EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n-            ClassScanner.getAllClasses(META_DATA_PACKAGE.getName()).forEach(dictionary::bindEntity);\n-            hashMapDataStore.populateEntityDictionary(dictionary);\n-            return hashMapDataStore;\n-        }\n-    };\n-\n     @Getter\n     private final Set<Class<?>> modelsToBind;\n \n     private Map<Class<?>, Table> tables = new HashMap<>();\n \n-    @Getter\n-    private EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n-\n-    @Getter\n-    private Map<String, HashMapDataStore> hashMapDataStores = new HashMap<>();\n-\n     public MetaDataStore() {\n         this(ClassScanner.getAnnotatedClasses(METADATA_STORE_ANNOTATIONS));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0NTg0MA==", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501845840", "bodyText": "This would throw an internal error (as it doesn't relate to the client request, but rather the setup of the server).", "author": "aklish", "createdAt": "2020-10-08T16:16:21Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -100,8 +131,10 @@ public void populateEntityDictionary(EntityDictionary dictionary) {\n      * @param table table metadata\n      */\n     public void addTable(Table table) {\n-        tables.put(dictionary.getEntityClass(table.getName(), table.getVersion()), table);\n-        addMetaData(table);\n+        String version = table.getVersion();\n+        EntityDictionary dictionary = hashMapDataStores.computeIfAbsent(version, ERROR_OUT).getDictionary();", "originalCommit": "758e48626127abcfb944bf0c74c20eefc3609cfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkwNjA2NA==", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501906064", "bodyText": "changed to InternalServerErrorException .", "author": "rishi-aga", "createdAt": "2020-10-08T17:53:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0NTg0MA=="}], "type": "inlineReview", "revised_code": {"commit": "e9fddacc9b92733f10527e8ea5e7ac79b5ef48a5", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java\nindex 8b58766eb..7f23ac6c4 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java\n\n@@ -131,10 +100,8 @@ public class MetaDataStore implements DataStore {\n      * @param table table metadata\n      */\n     public void addTable(Table table) {\n-        String version = table.getVersion();\n-        EntityDictionary dictionary = hashMapDataStores.computeIfAbsent(version, ERROR_OUT).getDictionary();\n-        tables.put(dictionary.getEntityClass(table.getName(), version), table);\n-        addMetaData(table, version);\n+        tables.put(dictionary.getEntityClass(table.getName(), table.getVersion()), table);\n+        addMetaData(table);\n         table.getColumns().forEach(this::addColumn);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0NzkyOQ==", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501847929", "bodyText": "Instead of exposing the data storage, I wonder if it would be cleaner to add a method to add something to the storage.", "author": "aklish", "createdAt": "2020-10-08T16:19:29Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -158,35 +192,39 @@ private void addColumn(Column column) {\n      *\n      * @param metricFunction metric function metadata\n      */\n-    private void addMetricFunction(MetricFunction metricFunction) {\n-        addMetaData(metricFunction);\n-        metricFunction.getArguments().forEach(this::addFunctionArgument);\n+    private void addMetricFunction(MetricFunction metricFunction, String version) {\n+        addMetaData(metricFunction, version);\n+        metricFunction.getArguments().forEach(arg -> addFunctionArgument(arg, version));\n     }\n \n     /**\n      * Add a function argument metadata object.\n      *\n      * @param functionArgument function argument metadata\n      */\n-    private void addFunctionArgument(FunctionArgument functionArgument) {\n-        addMetaData(functionArgument);\n+    private void addFunctionArgument(FunctionArgument functionArgument, String version) {\n+        addMetaData(functionArgument, version);\n     }\n \n     /**\n      * Add a time dimension grain metadata object.\n      *\n      * @param timeDimensionGrain time dimension grain metadata\n      */\n-    private void addTimeDimensionGrain(TimeDimensionGrain timeDimensionGrain) {\n-        addMetaData(timeDimensionGrain);\n+    private void addTimeDimensionGrain(TimeDimensionGrain timeDimensionGrain, String version) {\n+        addMetaData(timeDimensionGrain, version);\n     }\n \n     /**\n      * Add a meta data object into this data store, check for duplication.\n      *\n      * @param object a meta data object\n      */\n-    private void addMetaData(Object object) {\n+    private void addMetaData(Object object, String version) {\n+\n+        HashMapDataStore hashMapDataStore = hashMapDataStores.computeIfAbsent(version, ERROR_OUT);\n+        EntityDictionary dictionary = hashMapDataStore.getDictionary();\n+        Map<Class<?>, Map<String, Object>> dataStore = hashMapDataStore.getStorage();", "originalCommit": "758e48626127abcfb944bf0c74c20eefc3609cfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkwNTY5Mw==", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501905693", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-10-08T17:52:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0NzkyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "e9fddacc9b92733f10527e8ea5e7ac79b5ef48a5", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java\nindex 8b58766eb..7f23ac6c4 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java\n\n@@ -192,9 +158,9 @@ public class MetaDataStore implements DataStore {\n      *\n      * @param metricFunction metric function metadata\n      */\n-    private void addMetricFunction(MetricFunction metricFunction, String version) {\n-        addMetaData(metricFunction, version);\n-        metricFunction.getArguments().forEach(arg -> addFunctionArgument(arg, version));\n+    private void addMetricFunction(MetricFunction metricFunction) {\n+        addMetaData(metricFunction);\n+        metricFunction.getArguments().forEach(this::addFunctionArgument);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg1NzEzNQ==", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501857135", "bodyText": "I don't think we need this.  This appears to be unused.", "author": "aklish", "createdAt": "2020-10-08T16:33:52Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -35,22 +37,47 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n \n /**\n  * MetaDataStore is a in-memory data store that manage data models for an {@link AggregationDataStore}.\n  */\n-public class MetaDataStore extends HashMapDataStore {\n+public class MetaDataStore implements DataStore {\n     private static final Package META_DATA_PACKAGE = Table.class.getPackage();\n \n     private static final List<Class<? extends Annotation>> METADATA_STORE_ANNOTATIONS =\n             Arrays.asList(FromTable.class, FromSubquery.class, Subselect.class, javax.persistence.Table.class);\n \n+    public static final Function<String, HashMapDataStore> ERROR_OUT = new Function<String, HashMapDataStore>() {\n+        @Override\n+        public HashMapDataStore apply(String key) {\n+            throw new IllegalStateException(\"API version \" + key + \" not found\");\n+        }\n+    };\n+\n+    private static final Function<String, HashMapDataStore> SETUP_NEW = new Function<String, HashMapDataStore>() {\n+        @Override\n+        public HashMapDataStore apply(String key) {\n+            HashMapDataStore hashMapDataStore = new HashMapDataStore(META_DATA_PACKAGE);\n+            EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n+            ClassScanner.getAllClasses(META_DATA_PACKAGE.getName()).forEach(dictionary::bindEntity);\n+            hashMapDataStore.populateEntityDictionary(dictionary);\n+            return hashMapDataStore;\n+        }\n+    };\n+\n     @Getter\n     private final Set<Class<?>> modelsToBind;\n \n     private Map<Class<?>, Table> tables = new HashMap<>();\n \n+    @Getter\n+    private EntityDictionary dictionary = new EntityDictionary(new HashMap<>());", "originalCommit": "758e48626127abcfb944bf0c74c20eefc3609cfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkwNTUwMQ==", "url": "https://github.com/yahoo/elide/pull/1577#discussion_r501905501", "bodyText": "Its used in QueryEngine, ColumnVisitor etc. Renamed it to metadataDictionary to make it clear.", "author": "rishi-aga", "createdAt": "2020-10-08T17:52:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg1NzEzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "e9fddacc9b92733f10527e8ea5e7ac79b5ef48a5", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java\nindex 8b58766eb..7f23ac6c4 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java\n\n@@ -37,47 +35,22 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.util.function.Function;\n import java.util.stream.Collectors;\n \n /**\n  * MetaDataStore is a in-memory data store that manage data models for an {@link AggregationDataStore}.\n  */\n-public class MetaDataStore implements DataStore {\n+public class MetaDataStore extends HashMapDataStore {\n     private static final Package META_DATA_PACKAGE = Table.class.getPackage();\n \n     private static final List<Class<? extends Annotation>> METADATA_STORE_ANNOTATIONS =\n             Arrays.asList(FromTable.class, FromSubquery.class, Subselect.class, javax.persistence.Table.class);\n \n-    public static final Function<String, HashMapDataStore> ERROR_OUT = new Function<String, HashMapDataStore>() {\n-        @Override\n-        public HashMapDataStore apply(String key) {\n-            throw new IllegalStateException(\"API version \" + key + \" not found\");\n-        }\n-    };\n-\n-    private static final Function<String, HashMapDataStore> SETUP_NEW = new Function<String, HashMapDataStore>() {\n-        @Override\n-        public HashMapDataStore apply(String key) {\n-            HashMapDataStore hashMapDataStore = new HashMapDataStore(META_DATA_PACKAGE);\n-            EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n-            ClassScanner.getAllClasses(META_DATA_PACKAGE.getName()).forEach(dictionary::bindEntity);\n-            hashMapDataStore.populateEntityDictionary(dictionary);\n-            return hashMapDataStore;\n-        }\n-    };\n-\n     @Getter\n     private final Set<Class<?>> modelsToBind;\n \n     private Map<Class<?>, Table> tables = new HashMap<>();\n \n-    @Getter\n-    private EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n-\n-    @Getter\n-    private Map<String, HashMapDataStore> hashMapDataStores = new HashMap<>();\n-\n     public MetaDataStore() {\n         this(ClassScanner.getAnnotatedClasses(METADATA_STORE_ANNOTATIONS));\n     }\n"}}, {"oid": "e9fddacc9b92733f10527e8ea5e7ac79b5ef48a5", "url": "https://github.com/yahoo/elide/commit/e9fddacc9b92733f10527e8ea5e7ac79b5ef48a5", "message": "Revert composite id changes for Table", "committedDate": "2020-10-08T16:44:51Z", "type": "commit"}, {"oid": "0ca77f40a69ad830f064e83c5267244cd6ffcc7d", "url": "https://github.com/yahoo/elide/commit/0ca77f40a69ad830f064e83c5267244cd6ffcc7d", "message": "MetaDataStore changes", "committedDate": "2020-10-08T16:44:51Z", "type": "commit"}, {"oid": "0de95b7d7e34d55cdd434f24fb2ef522131e3272", "url": "https://github.com/yahoo/elide/commit/0de95b7d7e34d55cdd434f24fb2ef522131e3272", "message": "Integration Test", "committedDate": "2020-10-08T16:44:51Z", "type": "commit"}, {"oid": "f4be4f05f04159cadf67dfe1c8bae15183d0208e", "url": "https://github.com/yahoo/elide/commit/f4be4f05f04159cadf67dfe1c8bae15183d0208e", "message": "Add Versioned interface", "committedDate": "2020-10-08T16:45:29Z", "type": "commit"}, {"oid": "ce0010a2237b31716402169725a0a5a362d9d6d9", "url": "https://github.com/yahoo/elide/commit/ce0010a2237b31716402169725a0a5a362d9d6d9", "message": "Minor Change", "committedDate": "2020-10-08T16:45:29Z", "type": "commit"}, {"oid": "f16cc3e1096adff27f36c9136cbbb0478640b12e", "url": "https://github.com/yahoo/elide/commit/f16cc3e1096adff27f36c9136cbbb0478640b12e", "message": "Review Comments:", "committedDate": "2020-10-08T17:46:56Z", "type": "commit"}, {"oid": "f16cc3e1096adff27f36c9136cbbb0478640b12e", "url": "https://github.com/yahoo/elide/commit/f16cc3e1096adff27f36c9136cbbb0478640b12e", "message": "Review Comments:", "committedDate": "2020-10-08T17:46:56Z", "type": "forcePushed"}, {"oid": "5eb6e75dfcc1eda90d2bb0348e8da11af6c6e299", "url": "https://github.com/yahoo/elide/commit/5eb6e75dfcc1eda90d2bb0348e8da11af6c6e299", "message": "Review Comments", "committedDate": "2020-10-08T18:02:52Z", "type": "commit"}, {"oid": "240cb9da4bcbf30caabdc307e8652b80b490a3ea", "url": "https://github.com/yahoo/elide/commit/240cb9da4bcbf30caabdc307e8652b80b490a3ea", "message": "Minor Change", "committedDate": "2020-10-08T18:10:24Z", "type": "commit"}, {"oid": "1665934165fb6583346ead060ae7a3fd1a3b3837", "url": "https://github.com/yahoo/elide/commit/1665934165fb6583346ead060ae7a3fd1a3b3837", "message": "Javadoc", "committedDate": "2020-10-08T18:28:50Z", "type": "commit"}]}