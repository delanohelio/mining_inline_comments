{"pr_number": 1179, "pr_title": "metadata refactor", "pr_createdAt": "2020-02-05T22:45:30Z", "pr_url": "https://github.com/yahoo/elide/pull/1179", "timeline": [{"oid": "3fb21af63bf0be474e45f2abd9046bb11cdc6829", "url": "https://github.com/yahoo/elide/commit/3fb21af63bf0be474e45f2abd9046bb11cdc6829", "message": "metadata refactor", "committedDate": "2020-02-05T22:40:46Z", "type": "commit"}, {"oid": "11420dc0af6c9dfc01aa09ac6dd38d97c6136bef", "url": "https://github.com/yahoo/elide/commit/11420dc0af6c9dfc01aa09ac6dd38d97c6136bef", "message": "merge table and analyticView", "committedDate": "2020-02-10T19:40:08Z", "type": "commit"}, {"oid": "c281fdf3743aeb44623a73ad80696344c238d04b", "url": "https://github.com/yahoo/elide/commit/c281fdf3743aeb44623a73ad80696344c238d04b", "message": "fix reflection package", "committedDate": "2020-02-10T20:22:21Z", "type": "commit"}, {"oid": "b7cecc1aad0d583d8dfe2bfb6c0b6484f7ce9ddb", "url": "https://github.com/yahoo/elide/commit/b7cecc1aad0d583d8dfe2bfb6c0b6484f7ce9ddb", "message": "Make Table constrcut its own columns", "committedDate": "2020-02-10T21:55:55Z", "type": "commit"}, {"oid": "dbad4f49a8ca84db32c6d082780a1ad30070dd39", "url": "https://github.com/yahoo/elide/commit/dbad4f49a8ca84db32c6d082780a1ad30070dd39", "message": "Merge branch 'elide-5.x' into elide-metadata-refactor", "committedDate": "2020-02-10T22:02:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5MjY5NQ==", "url": "https://github.com/yahoo/elide/pull/1179#discussion_r377792695", "bodyText": "We need to remove all concept of Class<?> with the QueryEngine and metadata classes so that Fili can leverage this as well.", "author": "aklish", "createdAt": "2020-02-11T17:42:18Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -51,7 +60,31 @@\n  * <p>\n  * This is a {@link java.util.function functional interface} whose functional method is {@link #executeQuery(Query)}.\n  */\n-public interface QueryEngine {\n+public abstract class QueryEngine {\n+    @Getter\n+    private final MetaDataStore metaDataStore;\n+\n+    @Getter\n+    private final EntityDictionary metadataDictionary;\n+\n+    @Getter\n+    private final Map<Class<?>, Table> tables;", "originalCommit": "dbad4f49a8ca84db32c6d082780a1ad30070dd39", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dcfec5c0f87283cf5c6082d6eb8cded8865c24dc", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 3721c98f0..1d1f5f3c4 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n\n@@ -68,14 +68,14 @@ public abstract class QueryEngine {\n     private final EntityDictionary metadataDictionary;\n \n     @Getter\n-    private final Map<Class<?>, Table> tables;\n+    private final Map<String, Table> tables;\n \n     public QueryEngine(MetaDataStore metaDataStore) {\n         this.metaDataStore = metaDataStore;\n         this.metadataDictionary = metaDataStore.getDictionary();\n         populateMetaData(metaDataStore);\n         this.tables = metaDataStore.getMetaData(Table.class).stream()\n-                .collect(Collectors.toMap(Table::getCls, Functions.identity()));\n+                .collect(Collectors.toMap(Table::getName, Functions.identity()));\n     }\n \n     protected abstract Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5MzE3NQ==", "url": "https://github.com/yahoo/elide/pull/1179#discussion_r377793175", "bodyText": "Same comment - we need to use table names - not classes for mapping.", "author": "aklish", "createdAt": "2020-02-11T17:43:09Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -61,12 +94,14 @@\n      *\n      * @return query results\n      */\n-    Iterable<Object> executeQuery(Query query);\n+    public abstract Iterable<Object> executeQuery(Query query);\n \n     /**\n      * Returns the schema for a given entity class.\n      * @param entityClass The class to map to a schema.\n      * @return The schema that represents the provided entity.\n      */\n-    Table getTable(Class<?> entityClass);\n+    public Table getTable(Class<?> entityClass) {", "originalCommit": "dbad4f49a8ca84db32c6d082780a1ad30070dd39", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dcfec5c0f87283cf5c6082d6eb8cded8865c24dc", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 3721c98f0..1d1f5f3c4 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n\n@@ -98,10 +98,10 @@ public abstract class QueryEngine {\n \n     /**\n      * Returns the schema for a given entity class.\n-     * @param entityClass The class to map to a schema.\n+     * @param classAlias json type alias for that class\n      * @return The schema that represents the provided entity.\n      */\n-    public Table getTable(Class<?> entityClass) {\n-        return tables.get(entityClass);\n+    public Table getTable(String classAlias) {\n+        return tables.get(classAlias);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwMTI5OA==", "url": "https://github.com/yahoo/elide/pull/1179#discussion_r377801298", "bodyText": "Should this return MetricFunction?", "author": "aklish", "createdAt": "2020-02-11T17:58:02Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLMetric.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql.metadata;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.FunctionArgument;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Metric;\n+import com.yahoo.elide.datastores.aggregation.metadata.models.MetricFunction;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.metric.SQLMetricFunction;\n+\n+import java.util.Set;\n+\n+/**\n+ * SQLMetric would contain {@link SQLMetricFunction} instead of {@link MetricFunction}.\n+ */\n+public class SQLMetric extends Metric {\n+    public SQLMetric(Class<?> tableClass, String fieldName, EntityDictionary dictionary) {\n+        super(tableClass, fieldName, dictionary);\n+    }\n+\n+    @Override\n+    protected SQLMetricFunction constructMetricFunction(String id,", "originalCommit": "dbad4f49a8ca84db32c6d082780a1ad30070dd39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3OTIzNQ==", "url": "https://github.com/yahoo/elide/pull/1179#discussion_r377879235", "bodyText": "I think this is fine.", "author": "hellohanchen", "createdAt": "2020-02-11T20:27:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwMTI5OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwMTc4OQ==", "url": "https://github.com/yahoo/elide/pull/1179#discussion_r377801789", "bodyText": "Should the override methods return the base type?  Like Metric here?", "author": "aklish", "createdAt": "2020-02-11T17:58:57Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLTable.java", "diffHunk": "@@ -5,47 +5,39 @@\n  */\n package com.yahoo.elide.datastores.aggregation.queryengines.sql.metadata;\n \n-import static com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore.isMetricField;\n-\n import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.datastores.aggregation.metadata.models.Column;\n import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n \n import lombok.Data;\n import lombok.EqualsAndHashCode;\n \n-import java.util.Map;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-\n /**\n  * SQL extension of {@link Table} which also contains sql column meta data.\n  */\n @EqualsAndHashCode(callSuper = true)\n @Data\n public class SQLTable extends Table {\n-    private Map<String, SQLColumn> sqlColumns;\n-\n     public SQLTable(Class<?> cls, EntityDictionary dictionary) {\n         super(cls, dictionary);\n-        this.sqlColumns = resolveSQLDimensions(cls, dictionary);\n     }\n \n-    /**\n-     * Resolve all sql columns of a table.\n-     *\n-     * @param cls table class\n-     * @param dictionary dictionary contains the table class\n-     * @return all resolved sql column metadata\n-     */\n-    public static Map<String, SQLColumn> resolveSQLDimensions(Class<?> cls, EntityDictionary dictionary) {\n-        return dictionary.getAllFields(cls).stream()\n-                .filter(field -> Column.getDataType(cls, field, dictionary) != null)\n-                .filter(field -> !isMetricField(dictionary, cls, field))\n-                .collect(Collectors.toMap(Function.identity(), field -> new SQLColumn(cls, field, dictionary)));\n+    public final SQLColumn getSQLColumn(String fieldName) {\n+        SQLDimension dimension = getColumn(SQLDimension.class, fieldName);\n+        return dimension == null ? getColumn(SQLTimeDimension.class, fieldName) : dimension;\n+    }\n+\n+    @Override\n+    protected SQLMetric constructMetric(Class<?> cls, String fieldName, EntityDictionary dictionary) {", "originalCommit": "dbad4f49a8ca84db32c6d082780a1ad30070dd39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3OTI1MQ==", "url": "https://github.com/yahoo/elide/pull/1179#discussion_r377879251", "bodyText": "I think this is fine.", "author": "hellohanchen", "createdAt": "2020-02-11T20:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwMTc4OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwNDI4Mw==", "url": "https://github.com/yahoo/elide/pull/1179#discussion_r377804283", "bodyText": "We should provide a bean that allows users to override the QueryEngine bean that is used.", "author": "aklish", "createdAt": "2020-02-11T18:03:27Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -135,15 +136,4 @@ public Swagger buildSwagger(EntityDictionary dictionary, ElideConfigProperties s\n \n         return swagger;\n     }\n-\n-    /**\n-     * Configure the QueryEngineFactory that the Aggregation Data Store uses.\n-     * @param entityManagerFactory Needed by the SQLQueryEngine\n-     * @return a SQLQueryEngineFactory\n-     */\n-    @Bean\n-    @ConditionalOnMissingBean\n-    public QueryEngineFactory buildQueryEngineFactory(EntityManagerFactory entityManagerFactory) {", "originalCommit": "dbad4f49a8ca84db32c6d082780a1ad30070dd39", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "dcfec5c0f87283cf5c6082d6eb8cded8865c24dc", "url": "https://github.com/yahoo/elide/commit/dcfec5c0f87283cf5c6082d6eb8cded8865c24dc", "message": "table json type alias", "committedDate": "2020-02-11T20:39:35Z", "type": "commit"}, {"oid": "c7b5e2e05a1fbec27c52081bf9f36fa7132a68d0", "url": "https://github.com/yahoo/elide/commit/c7b5e2e05a1fbec27c52081bf9f36fa7132a68d0", "message": "add comment", "committedDate": "2020-02-11T20:45:16Z", "type": "commit"}]}