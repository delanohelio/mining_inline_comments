{"pr_number": 1280, "pr_title": "Patch Extension Lifecycle tests", "pr_createdAt": "2020-04-25T19:22:04Z", "pr_url": "https://github.com/yahoo/elide/pull/1280", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEyNjk2NA==", "url": "https://github.com/yahoo/elide/pull/1280#discussion_r415126964", "bodyText": "This will require #1278 for a proper error", "author": "wcekan", "createdAt": "2020-04-25T19:24:48Z", "path": "elide-core/src/test/java/com/yahoo/elide/core/LifeCycleTest.java", "diffHunk": "@@ -664,6 +665,183 @@ public void testElidePatchFailure() throws Exception {\n         verify(tx).close();\n     }\n \n+    @Test\n+    public void testElidePatchExtensionCreate() throws Exception {\n+        DataStore store = mock(DataStore.class);\n+        DataStoreTransaction tx = mock(DataStoreTransaction.class);\n+        FieldTestModel mockModel = mock(FieldTestModel.class);\n+\n+        Elide elide = getElide(store, dictionary, MOCK_AUDIT_LOGGER);\n+\n+        String body = \"[{\\\"op\\\": \\\"add\\\",\\\"path\\\": \\\"/testModel\\\",\\\"value\\\":{\"\n+                + \"\\\"type\\\":\\\"testModel\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\": {\\\"field\\\":\\\"Foo\\\"}}}]\";\n+\n+        when(store.beginTransaction()).thenReturn(tx);\n+        when(tx.createNewObject(FieldTestModel.class)).thenReturn(mockModel);\n+\n+        String contentType = JSONAPI_CONTENT_TYPE_WITH_JSON_PATCH_EXTENSION;\n+        ElideResponse response = elide.patch(contentType, contentType, \"/\", body, null);\n+        assertEquals(HttpStatus.SC_OK, response.getResponseCode());\n+\n+        verify(mockModel, times(1)).classCallback(eq(READ), eq(PRESECURITY));\n+        verify(mockModel, times(1)).classCallback(eq(READ), eq(PRECOMMIT));\n+        verify(mockModel, times(1)).classCallback(eq(READ), eq(POSTCOMMIT));\n+        verify(mockModel, times(1)).classCallback(eq(CREATE), eq(PRESECURITY));\n+        verify(mockModel, times(1)).classCallback(eq(CREATE), eq(PRECOMMIT));\n+        verify(mockModel, times(1)).classCallback(eq(CREATE), eq(POSTCOMMIT));\n+        verify(mockModel, never()).classCallback(eq(UPDATE), any());\n+        verify(mockModel, never()).classCallback(eq(DELETE), any());\n+\n+        verify(mockModel, times(2)).classAllFieldsCallback(any(), any());\n+        verify(mockModel, times(2)).classAllFieldsCallback(eq(CREATE), eq(PRECOMMIT));\n+\n+        verify(mockModel, times(1)).attributeCallback(eq(READ), eq(PRESECURITY), any());\n+        verify(mockModel, times(1)).attributeCallback(eq(READ), eq(PRECOMMIT), any());\n+        verify(mockModel, times(1)).attributeCallback(eq(READ), eq(POSTCOMMIT), any());\n+        verify(mockModel, times(1)).attributeCallback(eq(CREATE), eq(PRESECURITY), any());\n+        verify(mockModel, times(1)).attributeCallback(eq(CREATE), eq(PRECOMMIT), any());\n+        verify(mockModel, times(1)).attributeCallback(eq(CREATE), eq(POSTCOMMIT), any());\n+        verify(mockModel, never()).attributeCallback(eq(UPDATE), any(), any());\n+        verify(mockModel, never()).attributeCallback(eq(DELETE), any(), any());\n+\n+        verify(mockModel, times(1)).relationCallback(eq(READ), eq(PRESECURITY), any());\n+        verify(mockModel, times(1)).relationCallback(eq(READ), eq(PRECOMMIT), any());\n+        verify(mockModel, times(1)).relationCallback(eq(READ), eq(POSTCOMMIT), any());\n+        verify(mockModel, times(1)).relationCallback(eq(CREATE), eq(PRESECURITY), any());\n+        verify(mockModel, times(1)).relationCallback(eq(CREATE), eq(PRECOMMIT), any());\n+        verify(mockModel, times(1)).relationCallback(eq(CREATE), eq(POSTCOMMIT), any());\n+        verify(mockModel, never()).relationCallback(eq(UPDATE), any(), any());\n+        verify(mockModel, never()).relationCallback(eq(DELETE), any(), any());\n+\n+        verify(tx).preCommit();\n+        verify(tx, times(1)).createObject(eq(mockModel), isA(RequestScope.class));\n+        verify(tx).flush(isA(RequestScope.class));\n+        verify(tx).commit(isA(RequestScope.class));\n+        verify(tx).close();\n+    }\n+\n+    @Test\n+    public void failElidePatchExtensionCreate() throws Exception {\n+        DataStore store = mock(DataStore.class);\n+        DataStoreTransaction tx = mock(DataStoreTransaction.class);\n+        FieldTestModel mockModel = mock(FieldTestModel.class);\n+\n+        Elide elide = getElide(store, dictionary, MOCK_AUDIT_LOGGER);\n+\n+        String body = \"[{\\\"op\\\": \\\"add\\\",\\\"path\\\": \\\"/testModel\\\",\\\"value\\\":{\"\n+                + \"\\\"type\\\":\\\"testModel\\\",\\\"attributes\\\": {\\\"field\\\":\\\"Foo\\\"}}}]\";\n+\n+        when(store.beginTransaction()).thenReturn(tx);\n+        when(tx.createNewObject(FieldTestModel.class)).thenReturn(mockModel);\n+\n+        String contentType = JSONAPI_CONTENT_TYPE_WITH_JSON_PATCH_EXTENSION;\n+        ElideResponse response = elide.patch(contentType, contentType, \"/\", body, null);\n+        assertEquals(HttpStatus.SC_BAD_REQUEST, response.getResponseCode());\n+        assertTrue(response.getBody().startsWith(\n+                \"[{\\\"errors\\\":[{\\\"detail\\\":\\\"Invalid value: Resource(type=testModel, id=null, attributes={field=null}, relationships={models=com.yahoo.elide.jsonapi.models.Relationship@\"));", "originalCommit": "54d88920dc631eae3b02cb1943ec9e0104c94333", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e61da6aaa5fde41995b8fc5f8b1f180a682963d", "chunk": "diff --git a/elide-core/src/test/java/com/yahoo/elide/core/LifeCycleTest.java b/elide-core/src/test/java/com/yahoo/elide/core/LifeCycleTest.java\nindex 555a37199..9cdc25d35 100644\n--- a/elide-core/src/test/java/com/yahoo/elide/core/LifeCycleTest.java\n+++ b/elide-core/src/test/java/com/yahoo/elide/core/LifeCycleTest.java\n\n@@ -810,6 +810,7 @@ public class LifeCycleTest {\n \n         String contentType = JSONAPI_CONTENT_TYPE_WITH_JSON_PATCH_EXTENSION;\n         ElideResponse response = elide.patch(contentType, contentType, \"/\", body, null);\n+        assertEquals(HttpStatus.SC_OK, response.getResponseCode());\n \n         verify(mockModel, never()).classAllFieldsCallback(any(), any());\n \n"}}, {"oid": "d14c985b54bd8de4f4423bfae454f51fff815679", "url": "https://github.com/yahoo/elide/commit/d14c985b54bd8de4f4423bfae454f51fff815679", "message": "Patch Extension Lifecycle tests", "committedDate": "2020-04-28T16:18:44Z", "type": "commit"}, {"oid": "3e61da6aaa5fde41995b8fc5f8b1f180a682963d", "url": "https://github.com/yahoo/elide/commit/3e61da6aaa5fde41995b8fc5f8b1f180a682963d", "message": "Missing check", "committedDate": "2020-04-28T16:18:44Z", "type": "commit"}, {"oid": "f79f70ec9372f505d210e007c0ee1a5c094eb2af", "url": "https://github.com/yahoo/elide/commit/f79f70ec9372f505d210e007c0ee1a5c094eb2af", "message": "Update error body", "committedDate": "2020-04-28T16:23:49Z", "type": "forcePushed"}, {"oid": "8697aa69a019610b5e926ed4c99ecca9189d8fb6", "url": "https://github.com/yahoo/elide/commit/8697aa69a019610b5e926ed4c99ecca9189d8fb6", "message": "Update error body", "committedDate": "2020-04-28T16:32:53Z", "type": "commit"}, {"oid": "8697aa69a019610b5e926ed4c99ecca9189d8fb6", "url": "https://github.com/yahoo/elide/commit/8697aa69a019610b5e926ed4c99ecca9189d8fb6", "message": "Update error body", "committedDate": "2020-04-28T16:32:53Z", "type": "forcePushed"}]}