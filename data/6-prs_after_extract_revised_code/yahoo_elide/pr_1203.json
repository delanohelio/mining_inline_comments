{"pr_number": 1203, "pr_title": "Elide 5.x async", "pr_createdAt": "2020-02-26T22:40:34Z", "pr_url": "https://github.com/yahoo/elide/pull/1203", "timeline": [{"oid": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "url": "https://github.com/yahoo/elide/commit/58d1f0feb452839cbbb06efc9460b3410a79a88c", "message": "Singleton for Cleaner Service\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-04-02T23:57:04Z", "type": "commit"}, {"oid": "0fc51739a27fbf1828172e16f150ab3555a0cc67", "url": "https://github.com/yahoo/elide/commit/0fc51739a27fbf1828172e16f150ab3555a0cc67", "message": "Singleton for Cleaner Service\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-04-03T00:09:27Z", "type": "commit"}, {"oid": "0031731c426fff44ad21eaae4e30f890864f68da", "url": "https://github.com/yahoo/elide/commit/0031731c426fff44ad21eaae4e30f890864f68da", "message": "Singleton for Cleaner Service\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-04-03T00:11:59Z", "type": "commit"}, {"oid": "09f137109e11ee682a14db111dcd3392069d80d8", "url": "https://github.com/yahoo/elide/commit/09f137109e11ee682a14db111dcd3392069d80d8", "message": "Singleton for Executor Service\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-04-04T23:33:21Z", "type": "commit"}, {"oid": "dca87e2651f100294dbae473e969961f8041d66c", "url": "https://github.com/yahoo/elide/commit/dca87e2651f100294dbae473e969961f8041d66c", "message": "Sync with Standalone Value", "committedDate": "2020-04-09T17:47:56Z", "type": "commit"}, {"oid": "c40e5afd00bf2204c090b93de2b1d96721ebf191", "url": "https://github.com/yahoo/elide/commit/c40e5afd00bf2204c090b93de2b1d96721ebf191", "message": "Merge branch 'elide-5.x' into elide-5.x-async", "committedDate": "2020-04-15T15:50:32Z", "type": "commit"}, {"oid": "4c5f2032a987878e9f3b2ff1dab1aa93f030f476", "url": "https://github.com/yahoo/elide/commit/4c5f2032a987878e9f3b2ff1dab1aa93f030f476", "message": "Changes to change UUID columns type as varchar(36)", "committedDate": "2020-04-15T19:36:38Z", "type": "commit"}, {"oid": "61f93eedadc588ddf31a7024038fb36cea0ecda5", "url": "https://github.com/yahoo/elide/commit/61f93eedadc588ddf31a7024038fb36cea0ecda5", "message": "Merge branch 'elide-5.x-async' of github.com:yahoo/elide into elide-5.x-async", "committedDate": "2020-04-15T19:36:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY2NzIyOA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r411667228", "bodyText": "Copyright.", "author": "aklish", "createdAt": "2020-04-20T20:24:18Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncBase.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.yahoo.elide.async.models;", "originalCommit": "61f93eedadc588ddf31a7024038fb36cea0ecda5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY2NzQ4Mg==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r411667482", "bodyText": "My guess is elide-async is not running checkstyles.  Otherwise the build would break and catch this.", "author": "aklish", "createdAt": "2020-04-20T20:24:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY2NzIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "8f118c6ed355db72cdad6ef8e1bc65d52d504128", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncBase.java b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncBase.java\nindex a8cf25861..b58e05fdc 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncBase.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncBase.java\n\n@@ -1,5 +1,14 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n package com.yahoo.elide.async.models;\n \n+import com.yahoo.elide.annotation.Exclude;\n+\n+import lombok.Getter;\n+\n import java.util.Date;\n import java.util.UUID;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY3NzUwNA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r411677504", "bodyText": "I don't remember the reason - but why don't we pass a filter expression here (instead of a collection) and then filter and update in single DAO call?", "author": "aklish", "createdAt": "2020-04-20T20:41:28Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.util.Collection;\n+import java.util.UUID;\n+\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+\n+/**\n+ * Utility interface which uses the elide datastore to modify, update and create\n+ * AsyncQuery and AsyncQueryResult Objects\n+ */\n+public interface AsyncQueryDAO {\n+\n+    /**\n+     * This method updates the QueryStatus for AsyncQuery for given QueryStatus.\n+     * @param asyncQuery The AsyncQuery Object to be updated\n+     * @param status Status from Enum QueryStatus\n+     * @return AsyncQuery Updated AsyncQuery Object\n+     */\n+    public AsyncQuery updateStatus(AsyncQuery asyncQuery, QueryStatus status);\n+\n+    /**\n+     * This method uses the filter expression to evaluate a list of filtered results based on the expression\n+     * and returns a collection of filtered AsyncQuery objects.\n+     * @param filterExpression filter expression for filtering from datastore\n+     * @return filtered results\n+     */\n+    public Collection<AsyncQuery> loadQueries(String filterExpression);\n+\n+    /**\n+     * This method persists the model for AsyncQueryResult, AsyncQuery object and establishes the relationship\n+     * @param status ElideResponse status from AsyncQuery\n+     * @param responseBody ElideResponse responseBody from AsyncQuery\n+     * @param asyncQuery AsyncQuery object to be associated with the AsyncQueryResult object\n+     * @param asyncQueryId UUID of the AsyncQuery to be associated with the AsyncQueryResult object\n+     * @return AsyncQueryResult Object\n+     */\n+    public AsyncQueryResult createAsyncQueryResult(Integer status, String responseBody, AsyncQuery asyncQuery, UUID asyncQueryId);\n+\n+    /**\n+     * This method deletes a collection of AsyncQuery and its associated AsyncQueryResult objects from database and\n+     * returns the objects deleted.\n+     * @param filterExpression filter expression to delete AsyncQuery Objects based on\n+     * @return query object list deleted\n+     */\n+    public Collection<AsyncQuery> deleteAsyncQueryAndResultCollection(String filterExpression);\n+\n+    /**\n+     * This method updates the status for a collection of AsyncQuery objects from database and\n+     * returns the objects updated.\n+     * @param asyncQueryList Iterable list of AsyncQuery objects to be updated\n+     * @param status status to be updated\n+     * @return query object list updated\n+     */\n+    public Collection<AsyncQuery> updateStatusAsyncQueryCollection(Collection<AsyncQuery> asyncQueryList, QueryStatus status);", "originalCommit": "61f93eedadc588ddf31a7024038fb36cea0ecda5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f118c6ed355db72cdad6ef8e1bc65d52d504128", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\nindex 39a5aa51b..5fef60d27 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\n\n@@ -5,16 +5,15 @@\n  */\n package com.yahoo.elide.async.service;\n \n-import java.util.Collection;\n-import java.util.UUID;\n-\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.AsyncQueryResult;\n import com.yahoo.elide.async.models.QueryStatus;\n \n+import java.util.Collection;\n+import java.util.UUID;\n+\n /**\n- * Utility interface which uses the elide datastore to modify, update and create\n- * AsyncQuery and AsyncQueryResult Objects\n+ * Utility interface which uses the elide datastore to modify and create AsyncQuery and AsyncQueryResult Objects.\n  */\n public interface AsyncQueryDAO {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY3OTE5MQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r411679191", "bodyText": "We should only update to COMPLETE after we've created the response.  Swap this line with the next.", "author": "aklish", "createdAt": "2020-04-20T20:44:17Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.net.URISyntaxException;\n+\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.NoHttpResponseException;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.async.models.QueryType;\n+import com.yahoo.elide.graphql.QueryRunner;\n+import com.yahoo.elide.security.User;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for executing the query provided in Async Query.\n+ * It will also update the query status and result object at different\n+ * stages of execution.\n+ */\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+public class AsyncQueryThread implements Runnable {\n+\n+    private AsyncQuery queryObj;\n+    private User user;\n+    private Elide elide;\n+    private QueryRunner runner;\n+    private AsyncQueryDAO asyncQueryDao;\n+\n+    @Override\n+    public void run() {\n+        processQuery();\n+    }\n+\n+    /**\n+     * This is the main method which processes the Async Query request, executes the query and updates\n+     * values for AsyncQuery and AsyncQueryResult models accordingly.\n+     */\n+    protected void processQuery() {\n+        try {\n+            // Change async query to processing\n+            asyncQueryDao.updateStatus(queryObj, QueryStatus.PROCESSING);\n+            ElideResponse response = null;\n+            log.debug(\"AsyncQuery Object from request: {}\", queryObj);\n+            if (queryObj.getQueryType().equals(QueryType.JSONAPI_V1_0)) {\n+                MultivaluedMap<String, String> queryParams = getQueryParams(queryObj.getQuery());\n+                log.debug(\"Extracted QueryParams from AsyncQuery Object: {}\", queryParams);\n+                response = elide.get(getPath(queryObj.getQuery()), queryParams, user);\n+                log.debug(\"JSONAPI_V1_0 getResponseCode: {}, JSONAPI_V1_0 getBody: {}\", response.getResponseCode(), response.getBody());\n+            }\n+            else if (queryObj.getQueryType().equals(QueryType.GRAPHQL_V1_0)) {\n+                response = runner.run(queryObj.getQuery(), user);\n+                log.debug(\"GRAPHQL_V1_0 getResponseCode: {}, GRAPHQL_V1_0 getBody: {}\", response.getResponseCode(), response.getBody());\n+            }\n+            if (response == null){\n+                throw new NoHttpResponseException(\"Response for request returned as null\");\n+            }\n+            // If we receive a response update Query Status to complete\n+            asyncQueryDao.updateStatus(queryObj, QueryStatus.COMPLETE);", "originalCommit": "61f93eedadc588ddf31a7024038fb36cea0ecda5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f118c6ed355db72cdad6ef8e1bc65d52d504128", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\nindex abf73e908..13c26da5a 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n\n@@ -5,15 +5,6 @@\n  */\n package com.yahoo.elide.async.service;\n \n-import java.net.URISyntaxException;\n-\n-import javax.ws.rs.core.MultivaluedHashMap;\n-import javax.ws.rs.core.MultivaluedMap;\n-\n-import org.apache.http.NameValuePair;\n-import org.apache.http.NoHttpResponseException;\n-import org.apache.http.client.utils.URIBuilder;\n-\n import com.yahoo.elide.Elide;\n import com.yahoo.elide.ElideResponse;\n import com.yahoo.elide.async.models.AsyncQuery;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4NTgzNA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r411685834", "bodyText": "This can be moved outside the try block (by making it final).", "author": "aklish", "createdAt": "2020-04-20T20:55:26Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.UUID;\n+\n+import javax.inject.Singleton;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.core.DataStore;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.core.filter.dialect.ParseException;\n+import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n+import com.yahoo.elide.core.filter.expression.FilterExpression;\n+import com.yahoo.elide.jsonapi.models.JsonApiDocument;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Utility class which implements AsyncQueryDAO\n+ */\n+@Singleton\n+@Slf4j\n+public class DefaultAsyncQueryDAO implements AsyncQueryDAO {\n+\n+    @Setter private Elide elide;\n+    @Setter private DataStore dataStore;\n+\n+    // Default constructor is needed for standalone implementation for override in getAsyncQueryDao\n+    public DefaultAsyncQueryDAO() {\n+    }\n+\n+    public DefaultAsyncQueryDAO(Elide elide, DataStore dataStore) {\n+    \tthis.elide = elide;\n+    \tthis.dataStore = dataStore;\n+    }\n+\n+    @Override\n+    public AsyncQuery updateStatus(AsyncQuery asyncQuery, QueryStatus status) {\n+        return updateAsyncQuery(asyncQuery, (asyncQueryObj) -> {\n+            asyncQueryObj.setStatus(status);\n+        });\n+    }\n+\n+    /**\n+     * This method updates the model for AsyncQuery with passed value.\n+     * @param asyncQuery The AsyncQuery Object which will be updated\n+     * @param updateFunction Functional interface for updating AsyncQuery Object\n+     * @return AsyncQuery Object\n+     */\n+    private AsyncQuery updateAsyncQuery(AsyncQuery asyncQuery, UpdateQuery updateFunction) {\n+        log.debug(\"updateAsyncQuery\");\n+        AsyncQuery queryObj = (AsyncQuery) executeInTransaction(dataStore, (tx, scope) -> {\n+            updateFunction.update(asyncQuery);\n+            tx.save(asyncQuery, scope);\n+            return asyncQuery;\n+        });\n+        return queryObj;\n+    }\n+\n+    @Override\n+    public Collection<AsyncQuery> updateStatusAsyncQueryCollection(Collection<AsyncQuery> asyncQueryList, QueryStatus status) {\n+        return updateAsyncQueryCollection(asyncQueryList, (asyncQuery) -> {\n+            asyncQuery.setStatus(status);\n+            });\n+    }\n+\n+    /**\n+     * This method updates a collection of AsyncQuery objects from database and\n+     * returns the objects updated.\n+     * @param asyncQueryList Iterable list of AsyncQuery objects to be updated\n+     * @return query object list updated\n+     */\n+    private Collection<AsyncQuery> updateAsyncQueryCollection(Collection<AsyncQuery> asyncQueryList, UpdateQuery updateFunction) {\n+        log.debug(\"updateAsyncQueryCollection\");\n+        executeInTransaction(dataStore, (tx, scope) -> {\n+            Iterator<AsyncQuery> itr = asyncQueryList.iterator();\n+            while(itr.hasNext()) {\n+                AsyncQuery query = (AsyncQuery) itr.next();\n+                updateFunction.update(query);\n+                tx.save(query, scope);\n+            }\n+            return asyncQueryList;\n+        });\n+        return asyncQueryList;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Collection<AsyncQuery> deleteAsyncQueryAndResultCollection(String filterExpression) {\n+        log.debug(\"deleteAsyncQueryAndResultCollection\");\n+        EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n+        RSQLFilterDialect filterParser = new RSQLFilterDialect(dictionary);\n+\n+        Collection<AsyncQuery> asyncQueryList = (Collection<AsyncQuery>) executeInTransaction(dataStore, (tx, scope) -> {\n+            try {\n+                FilterExpression filter = filterParser.parseFilterExpression(filterExpression, AsyncQuery.class, false);", "originalCommit": "61f93eedadc588ddf31a7024038fb36cea0ecda5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg0Mzk1Ng==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r411843956", "bodyText": "We are unable to move this outside the try block because the ParseException is thrown by the filterParser.parseFilterExpression method itself.", "author": "moizarafat", "createdAt": "2020-04-21T03:37:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4NTgzNA=="}], "type": "inlineReview", "revised_code": {"commit": "8f118c6ed355db72cdad6ef8e1bc65d52d504128", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java b/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\nindex c501312a9..4db49e6d3 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\n\n@@ -5,15 +5,6 @@\n  */\n package com.yahoo.elide.async.service;\n \n-import java.io.IOException;\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.UUID;\n-\n-import javax.inject.Singleton;\n-import javax.ws.rs.core.MultivaluedHashMap;\n-import javax.ws.rs.core.MultivaluedMap;\n-\n import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.AsyncQueryResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4Njk1OQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r411686959", "bodyText": "Spacing is off.", "author": "aklish", "createdAt": "2020-04-20T20:57:24Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.UUID;\n+\n+import javax.inject.Singleton;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.core.DataStore;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.core.filter.dialect.ParseException;\n+import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n+import com.yahoo.elide.core.filter.expression.FilterExpression;\n+import com.yahoo.elide.jsonapi.models.JsonApiDocument;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Utility class which implements AsyncQueryDAO\n+ */\n+@Singleton\n+@Slf4j\n+public class DefaultAsyncQueryDAO implements AsyncQueryDAO {\n+\n+    @Setter private Elide elide;\n+    @Setter private DataStore dataStore;\n+\n+    // Default constructor is needed for standalone implementation for override in getAsyncQueryDao\n+    public DefaultAsyncQueryDAO() {\n+    }\n+\n+    public DefaultAsyncQueryDAO(Elide elide, DataStore dataStore) {\n+    \tthis.elide = elide;", "originalCommit": "61f93eedadc588ddf31a7024038fb36cea0ecda5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f118c6ed355db72cdad6ef8e1bc65d52d504128", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java b/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\nindex c501312a9..4db49e6d3 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\n\n@@ -5,15 +5,6 @@\n  */\n package com.yahoo.elide.async.service;\n \n-import java.io.IOException;\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.UUID;\n-\n-import javax.inject.Singleton;\n-import javax.ws.rs.core.MultivaluedHashMap;\n-import javax.ws.rs.core.MultivaluedMap;\n-\n import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.AsyncQueryResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5NzExMQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r411697111", "bodyText": "Maybe return the default one here?", "author": "aklish", "createdAt": "2020-04-20T21:15:11Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -167,6 +168,60 @@ default boolean enableJSONAPI() {\n     default boolean enableGraphQL() {\n         return true;\n     }\n+    \n+    /**\n+     * Enable the support for Async querying feature. If false, the async feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsync() {\n+        return false;\n+    }\n+\n+    /**\n+     * Enable the support for cleaning up Async query history. If false, the async cleanup feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsyncCleanup() {\n+        return false;\n+    }\n+\n+    /**\n+     * Thread Size for Async queries to run in parallel.\n+     *\n+     * @return Default: 5\n+     */\n+    default Integer getAsyncThreadSize() {\n+        return 5;\n+    }\n+\n+    /**\n+     * Maximum Query Run time for Async Queries to mark as TIMEDOUT.\n+     *\n+     * @return Default: 60\n+     */\n+    default Integer getAsyncMaxRunTimeMinutes() {\n+        return 60;\n+    }\n+\n+    /**\n+     * Number of days history to retain for async query executions and results.\n+     *\n+     * @return Default: 7\n+     */\n+    default Integer getAsyncQueryCleanupDays() {\n+        return 7;\n+    }\n+\n+    /**\n+     * Implementation of AsyncQueryDAO to use.\n+     *\n+     * @return AsyncQueryDAO type object.\n+     */\n+    default AsyncQueryDAO getAsyncQueryDAO() {\n+        return null;", "originalCommit": "61f93eedadc588ddf31a7024038fb36cea0ecda5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f118c6ed355db72cdad6ef8e1bc65d52d504128", "chunk": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex d40569f6f..2bcd7903c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n\n@@ -220,7 +220,7 @@ public interface ElideStandaloneSettings {\n      * @return AsyncQueryDAO type object.\n      */\n     default AsyncQueryDAO getAsyncQueryDAO() {\n-        return null;\n+        return new DefaultAsyncQueryDAO();\n     }\n \n     /**\n"}}, {"oid": "8f118c6ed355db72cdad6ef8e1bc65d52d504128", "url": "https://github.com/yahoo/elide/commit/8f118c6ed355db72cdad6ef8e1bc65d52d504128", "message": "Review Comments", "committedDate": "2020-04-21T17:39:19Z", "type": "commit"}, {"oid": "2adebc4ad0f35f66c33d3f919030fe2e9471b2a8", "url": "https://github.com/yahoo/elide/commit/2adebc4ad0f35f66c33d3f919030fe2e9471b2a8", "message": "Review Comments", "committedDate": "2020-04-21T19:16:02Z", "type": "commit"}, {"oid": "13a2a0dc04534cc5d10706ab6a6ce6b8be3dcf2a", "url": "https://github.com/yahoo/elide/commit/13a2a0dc04534cc5d10706ab6a6ce6b8be3dcf2a", "message": "Fix review comments\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-04-21T20:00:46Z", "type": "commit"}, {"oid": "5ad702fc971d04fce1efd41a179a3fc68015ed1b", "url": "https://github.com/yahoo/elide/commit/5ad702fc971d04fce1efd41a179a3fc68015ed1b", "message": "Updating per review comments", "committedDate": "2020-04-21T22:07:33Z", "type": "commit"}, {"oid": "6a93b9f6429e42e4599b368d0ce873609f4744c2", "url": "https://github.com/yahoo/elide/commit/6a93b9f6429e42e4599b368d0ce873609f4744c2", "message": "Remove unused import", "committedDate": "2020-04-21T22:32:35Z", "type": "commit"}, {"oid": "23ec6e16bf492e6054c6e04c360fed32acc034c2", "url": "https://github.com/yahoo/elide/commit/23ec6e16bf492e6054c6e04c360fed32acc034c2", "message": "Removing status change to Queued", "committedDate": "2020-04-22T17:59:49Z", "type": "commit"}, {"oid": "2326a43900a5a731cb653afc08643a58293b1433", "url": "https://github.com/yahoo/elide/commit/2326a43900a5a731cb653afc08643a58293b1433", "message": "removing unused import", "committedDate": "2020-04-22T18:02:23Z", "type": "commit"}, {"oid": "2ad63946c2dc4678df23ae5b70316c1aecb47adb", "url": "https://github.com/yahoo/elide/commit/2ad63946c2dc4678df23ae5b70316c1aecb47adb", "message": "prepersist for status", "committedDate": "2020-04-22T18:09:53Z", "type": "commit"}, {"oid": "ab5010759aa47ef5b766ae624a96ae96cfa32db2", "url": "https://github.com/yahoo/elide/commit/ab5010759aa47ef5b766ae624a96ae96cfa32db2", "message": "Merge branch 'elide-5.x' into elide-5.x-async", "committedDate": "2020-04-22T19:21:15Z", "type": "commit"}, {"oid": "5533530593f0fdfae9287a2341b39a861e060b82", "url": "https://github.com/yahoo/elide/commit/5533530593f0fdfae9287a2341b39a861e060b82", "message": "Adding Async Entity Models\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-02-25T21:12:45Z", "type": "commit"}, {"oid": "25bf86a18195408978d8cf85651cce6699e127f4", "url": "https://github.com/yahoo/elide/commit/25bf86a18195408978d8cf85651cce6699e127f4", "message": "Adding async module and fixing parent pom version\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-02-25T21:46:34Z", "type": "commit"}, {"oid": "2e52636f29d6446967fa6d63229a2fd14476863f", "url": "https://github.com/yahoo/elide/commit/2e52636f29d6446967fa6d63229a2fd14476863f", "message": "Adding async service classes, security and cleanup services\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-02-25T23:07:30Z", "type": "commit"}, {"oid": "9a735db86f0a93ae65931ca947faa443c18a6b0b", "url": "https://github.com/yahoo/elide/commit/9a735db86f0a93ae65931ca947faa443c18a6b0b", "message": "Adding Copyright License Header to Async module classes\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-02-25T23:13:13Z", "type": "commit"}, {"oid": "7a9d1e677d7b33f0d94ade2d311efdf16d3285a2", "url": "https://github.com/yahoo/elide/commit/7a9d1e677d7b33f0d94ade2d311efdf16d3285a2", "message": "Using new request scope for datastore transactions\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-02-26T01:48:05Z", "type": "commit"}, {"oid": "2c33710f46d1f426da5d65d8ad61ed9fd9e7ac2f", "url": "https://github.com/yahoo/elide/commit/2c33710f46d1f426da5d65d8ad61ed9fd9e7ac2f", "message": "Remove thread sleep used in testing\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-02-26T20:56:08Z", "type": "commit"}, {"oid": "767b4c5607f1e8c807347622fd70d2318c18d4ba", "url": "https://github.com/yahoo/elide/commit/767b4c5607f1e8c807347622fd70d2318c18d4ba", "message": "Fixing based on code quality review from codacy\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-02-26T22:53:44Z", "type": "commit"}, {"oid": "b5234add7d3dade7b010032c176e1c146174de10", "url": "https://github.com/yahoo/elide/commit/b5234add7d3dade7b010032c176e1c146174de10", "message": " Fixing additional issues based on code quality review from codacy\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-02-26T23:32:51Z", "type": "commit"}, {"oid": "ad3d6ded474fe081fc4d79d03ed32c0ff06c3101", "url": "https://github.com/yahoo/elide/commit/ad3d6ded474fe081fc4d79d03ed32c0ff06c3101", "message": "Adding getter for AsyncQueryResult\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-02-27T00:02:08Z", "type": "commit"}, {"oid": "be563fe606cf6e3ecba989b0d12863d23b4afe3d", "url": "https://github.com/yahoo/elide/commit/be563fe606cf6e3ecba989b0d12863d23b4afe3d", "message": "Reformatting.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-02-27T04:39:51Z", "type": "commit"}, {"oid": "c88d08a94c994f16ee51c6a51c39694411fb8c59", "url": "https://github.com/yahoo/elide/commit/c88d08a94c994f16ee51c6a51c39694411fb8c59", "message": "Adding mappedBy.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-02-27T15:44:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIyNjU3OA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385226578", "bodyText": "You can use lombok @Data and remove a lot of boilerplate.", "author": "aklish", "createdAt": "2020-02-27T16:35:31Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.security.Principal;\n+import java.util.UUID;\n+\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.async.models.QueryType;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.graphql.QueryRunner;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for executing the query provided in Async Query.\n+ * It will also update the query status and result object at different\n+ * stages of execution.\n+ */\n+@Slf4j\n+public class AsyncQueryThread implements Runnable {\n+\n+\tprivate String query;\n+\tprivate QueryType queryType;\n+\tprivate Principal user;\n+\tprivate Elide elide;\n+\tprivate QueryRunner runner;\n+\tprivate UUID id;\n+\n+    public AsyncQueryThread(String query, QueryType queryType, Principal user, Elide elide, QueryRunner runner, UUID id){", "originalCommit": "c88d08a94c994f16ee51c6a51c39694411fb8c59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\nindex 6d1acea7f..abf73e908 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n\n@@ -5,28 +5,25 @@\n  */\n package com.yahoo.elide.async.service;\n \n-import java.io.IOException;\n import java.net.URISyntaxException;\n-import java.security.Principal;\n-import java.util.UUID;\n \n import javax.ws.rs.core.MultivaluedHashMap;\n import javax.ws.rs.core.MultivaluedMap;\n \n import org.apache.http.NameValuePair;\n+import org.apache.http.NoHttpResponseException;\n import org.apache.http.client.utils.URIBuilder;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.ElideResponse;\n import com.yahoo.elide.async.models.AsyncQuery;\n-import com.yahoo.elide.async.models.AsyncQueryResult;\n import com.yahoo.elide.async.models.QueryStatus;\n import com.yahoo.elide.async.models.QueryType;\n-import com.yahoo.elide.core.DataStoreTransaction;\n-import com.yahoo.elide.core.RequestScope;\n import com.yahoo.elide.graphql.QueryRunner;\n-import com.yahoo.elide.request.EntityProjection;\n+import com.yahoo.elide.security.User;\n \n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIyODk1MA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385228950", "bodyText": "GraphQL can return response codes of 200 and still have errors.  Let's discuss with UI and figure out what we want to do in this case.", "author": "aklish", "createdAt": "2020-02-27T16:39:07Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.security.Principal;\n+import java.util.UUID;\n+\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.async.models.QueryType;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.graphql.QueryRunner;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for executing the query provided in Async Query.\n+ * It will also update the query status and result object at different\n+ * stages of execution.\n+ */\n+@Slf4j\n+public class AsyncQueryThread implements Runnable {\n+\n+\tprivate String query;\n+\tprivate QueryType queryType;\n+\tprivate Principal user;\n+\tprivate Elide elide;\n+\tprivate QueryRunner runner;\n+\tprivate UUID id;\n+\n+    public AsyncQueryThread(String query, QueryType queryType, Principal user, Elide elide, QueryRunner runner, UUID id){\n+        log.debug(\"New Async Query thread created\");\n+        this.query = query;\n+        this.queryType = queryType;\n+        this.user = user;\n+        this.elide = elide;\n+        this.runner = runner;\n+        this.id = id;\n+    }\n+\n+    @Override\n+    public void run() {\n+        processQuery();\n+    }\n+\n+    /**\n+     * This is the main method which processes the Async Query request, executes the query and updates\n+     * values for AsyncQuery and AsyncQueryResult models accordingly.\n+     */\n+    protected void processQuery() {\n+        try {\n+            // Change async query to processing\n+            updateAsyncQueryStatus(QueryStatus.PROCESSING, id);\n+            ElideResponse response = null;\n+            log.debug(\"query: {}\", query);\n+            log.debug(\"queryType: {}\", queryType);\n+            AsyncQuery asyncQuery;\n+            AsyncQueryResult asyncQueryResult;\n+            if (queryType.equals(QueryType.JSONAPI_V1_0)) {\n+                MultivaluedMap<String, String> queryParams = getQueryParams(query);\n+                response = elide.get(getPath(query), queryParams, user);\n+                log.debug(\"JSONAPI_V1_0 getResponseCode: {}\", response.getResponseCode());\n+                log.debug(\"JSONAPI_V1_0 getBody: {}\", response.getBody());\n+            }\n+            else if (queryType.equals(QueryType.GRAPHQL_V1_0)) {\n+                response = runner.run(query, user);\n+                log.debug(\"GRAPHQL_V1_0 getResponseCode: {}\", response.getResponseCode());\n+                log.debug(\"GRAPHQL_V1_0 getBody: {}\", response.getBody());\n+            }\n+            // if 200 - response code then Change async query to complete else change to Failure\n+            if (response.getResponseCode() == 200) {\n+                asyncQuery = updateAsyncQueryStatus(QueryStatus.COMPLETE, id);", "originalCommit": "c88d08a94c994f16ee51c6a51c39694411fb8c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwODgzMw==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385908833", "bodyText": "@jkusa", "author": "aklish", "createdAt": "2020-02-28T20:32:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIyODk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk5MDU5MQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r388990591", "bodyText": "If we can fetch the query status (whether the query failed or succeeded) we should return a 200.", "author": "jkusa", "createdAt": "2020-03-06T16:04:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIyODk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\nindex 6d1acea7f..abf73e908 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n\n@@ -5,28 +5,25 @@\n  */\n package com.yahoo.elide.async.service;\n \n-import java.io.IOException;\n import java.net.URISyntaxException;\n-import java.security.Principal;\n-import java.util.UUID;\n \n import javax.ws.rs.core.MultivaluedHashMap;\n import javax.ws.rs.core.MultivaluedMap;\n \n import org.apache.http.NameValuePair;\n+import org.apache.http.NoHttpResponseException;\n import org.apache.http.client.utils.URIBuilder;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.ElideResponse;\n import com.yahoo.elide.async.models.AsyncQuery;\n-import com.yahoo.elide.async.models.AsyncQueryResult;\n import com.yahoo.elide.async.models.QueryStatus;\n import com.yahoo.elide.async.models.QueryType;\n-import com.yahoo.elide.core.DataStoreTransaction;\n-import com.yahoo.elide.core.RequestScope;\n import com.yahoo.elide.graphql.QueryRunner;\n-import com.yahoo.elide.request.EntityProjection;\n+import com.yahoo.elide.security.User;\n \n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIyOTUzOQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385229539", "bodyText": "We need to put this in a try block to make sure the tx gets closed if there is an exception.  Otherwise we may leak DB connections.", "author": "aklish", "createdAt": "2020-02-27T16:40:05Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.security.Principal;\n+import java.util.UUID;\n+\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.async.models.QueryType;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.graphql.QueryRunner;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for executing the query provided in Async Query.\n+ * It will also update the query status and result object at different\n+ * stages of execution.\n+ */\n+@Slf4j\n+public class AsyncQueryThread implements Runnable {\n+\n+\tprivate String query;\n+\tprivate QueryType queryType;\n+\tprivate Principal user;\n+\tprivate Elide elide;\n+\tprivate QueryRunner runner;\n+\tprivate UUID id;\n+\n+    public AsyncQueryThread(String query, QueryType queryType, Principal user, Elide elide, QueryRunner runner, UUID id){\n+        log.debug(\"New Async Query thread created\");\n+        this.query = query;\n+        this.queryType = queryType;\n+        this.user = user;\n+        this.elide = elide;\n+        this.runner = runner;\n+        this.id = id;\n+    }\n+\n+    @Override\n+    public void run() {\n+        processQuery();\n+    }\n+\n+    /**\n+     * This is the main method which processes the Async Query request, executes the query and updates\n+     * values for AsyncQuery and AsyncQueryResult models accordingly.\n+     */\n+    protected void processQuery() {\n+        try {\n+            // Change async query to processing\n+            updateAsyncQueryStatus(QueryStatus.PROCESSING, id);\n+            ElideResponse response = null;\n+            log.debug(\"query: {}\", query);\n+            log.debug(\"queryType: {}\", queryType);\n+            AsyncQuery asyncQuery;\n+            AsyncQueryResult asyncQueryResult;\n+            if (queryType.equals(QueryType.JSONAPI_V1_0)) {\n+                MultivaluedMap<String, String> queryParams = getQueryParams(query);\n+                response = elide.get(getPath(query), queryParams, user);\n+                log.debug(\"JSONAPI_V1_0 getResponseCode: {}\", response.getResponseCode());\n+                log.debug(\"JSONAPI_V1_0 getBody: {}\", response.getBody());\n+            }\n+            else if (queryType.equals(QueryType.GRAPHQL_V1_0)) {\n+                response = runner.run(query, user);\n+                log.debug(\"GRAPHQL_V1_0 getResponseCode: {}\", response.getResponseCode());\n+                log.debug(\"GRAPHQL_V1_0 getBody: {}\", response.getBody());\n+            }\n+            // if 200 - response code then Change async query to complete else change to Failure\n+            if (response.getResponseCode() == 200) {\n+                asyncQuery = updateAsyncQueryStatus(QueryStatus.COMPLETE, id);\n+            } else {\n+                asyncQuery = updateAsyncQueryStatus(QueryStatus.FAILURE, id);\n+            }\n+\n+            // Create AsyncQueryResult entry for AsyncQuery\n+            asyncQueryResult = createAsyncQueryResult(response.getResponseCode(), response.getBody(), asyncQuery, id);\n+\n+            // Add queryResult object to query object\n+            updateAsyncQueryStatus(asyncQueryResult, id);\n+\n+        } catch (IOException e) {\n+            log.error(\"IOException: {}\", e.getMessage());\n+        } catch (URISyntaxException e) {\n+            log.error(\"URISyntaxException: {}\", e.getMessage());\n+        } catch (Exception e) {\n+            log.error(\"Exception: {}\", e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * This method parses the url and gets the query params and adds them into a MultivaluedMap\n+     * to be used by underlying Elide.get method\n+     * @param query query from the Async request\n+     * @throws URISyntaxException URISyntaxException from malformed or incorrect URI\n+     * @return MultivaluedMap with query parameters\n+     */\n+    protected MultivaluedMap<String, String> getQueryParams(String query) throws URISyntaxException {\n+        URIBuilder uri;\n+        uri = new URIBuilder(query);\n+        MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<String, String>();\n+        for (NameValuePair queryParam : uri.getQueryParams()) {\n+            queryParams.add(queryParam.getName(), queryParam.getValue());\n+        }\n+        log.debug(\"QueryParams: {}\", queryParams);\n+        return queryParams;\n+    }\n+\n+    /**\n+     * This method parses the url and gets the query params and retrieves path\n+     * to be used by underlying Elide.get method\n+     * @param query query from the Async request\n+     * @throws URISyntaxException URISyntaxException from malformed or incorrect URI\n+     * @return Path extracted from URI\n+     */\n+    protected String getPath(String query) throws URISyntaxException {\n+        URIBuilder uri;\n+        uri = new URIBuilder(query);\n+        log.debug(\"Retrieving path from query\");\n+        return uri.getPath();\n+    }\n+\n+    /**\n+     * This method updates the model for AsyncQuery with passed status value.\n+     * @param status new status based on the enum QueryStatus\n+     * @param asyncQueryId queryId from asyncQuery request\n+     * @throws IOException IOException from DataStoreTransaction\n+     * @return AsyncQuery Object\n+     */\n+    protected AsyncQuery updateAsyncQueryStatus(QueryStatus status, UUID asyncQueryId) throws IOException {\n+        log.debug(\"Updating AsyncQuery status to {}\", status);\n+        DataStoreTransaction tx = elide.getDataStore().beginTransaction();", "originalCommit": "c88d08a94c994f16ee51c6a51c39694411fb8c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMyNzYxNA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385327614", "bodyText": "Right now this method throws a exception and is caught by the surrounding try - catch block in the processQuery method. That try catch block should catch any of the leaked leak DB connections cause by the database transactions. Should we put a try catch block in each of the DB transactions methods separately?", "author": "Abhino", "createdAt": "2020-02-27T19:35:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIyOTUzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\nindex 6d1acea7f..abf73e908 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n\n@@ -5,28 +5,25 @@\n  */\n package com.yahoo.elide.async.service;\n \n-import java.io.IOException;\n import java.net.URISyntaxException;\n-import java.security.Principal;\n-import java.util.UUID;\n \n import javax.ws.rs.core.MultivaluedHashMap;\n import javax.ws.rs.core.MultivaluedMap;\n \n import org.apache.http.NameValuePair;\n+import org.apache.http.NoHttpResponseException;\n import org.apache.http.client.utils.URIBuilder;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.ElideResponse;\n import com.yahoo.elide.async.models.AsyncQuery;\n-import com.yahoo.elide.async.models.AsyncQueryResult;\n import com.yahoo.elide.async.models.QueryStatus;\n import com.yahoo.elide.async.models.QueryType;\n-import com.yahoo.elide.core.DataStoreTransaction;\n-import com.yahoo.elide.core.RequestScope;\n import com.yahoo.elide.graphql.QueryRunner;\n-import com.yahoo.elide.request.EntityProjection;\n+import com.yahoo.elide.security.User;\n \n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIzMDk4Mw==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385230983", "bodyText": "Instead of setting these parameters to null, I would Mimic elide.get:\n            JsonApiDocument jsonApiDoc = new JsonApiDocument();\n            RequestScope requestScope = new RequestScope(path, jsonApiDoc, tx, user, queryParams, elideSettings);\nThe user should be set to the principal object.", "author": "aklish", "createdAt": "2020-02-27T16:42:19Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.security.Principal;\n+import java.util.UUID;\n+\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.async.models.QueryType;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.graphql.QueryRunner;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for executing the query provided in Async Query.\n+ * It will also update the query status and result object at different\n+ * stages of execution.\n+ */\n+@Slf4j\n+public class AsyncQueryThread implements Runnable {\n+\n+\tprivate String query;\n+\tprivate QueryType queryType;\n+\tprivate Principal user;\n+\tprivate Elide elide;\n+\tprivate QueryRunner runner;\n+\tprivate UUID id;\n+\n+    public AsyncQueryThread(String query, QueryType queryType, Principal user, Elide elide, QueryRunner runner, UUID id){\n+        log.debug(\"New Async Query thread created\");\n+        this.query = query;\n+        this.queryType = queryType;\n+        this.user = user;\n+        this.elide = elide;\n+        this.runner = runner;\n+        this.id = id;\n+    }\n+\n+    @Override\n+    public void run() {\n+        processQuery();\n+    }\n+\n+    /**\n+     * This is the main method which processes the Async Query request, executes the query and updates\n+     * values for AsyncQuery and AsyncQueryResult models accordingly.\n+     */\n+    protected void processQuery() {\n+        try {\n+            // Change async query to processing\n+            updateAsyncQueryStatus(QueryStatus.PROCESSING, id);\n+            ElideResponse response = null;\n+            log.debug(\"query: {}\", query);\n+            log.debug(\"queryType: {}\", queryType);\n+            AsyncQuery asyncQuery;\n+            AsyncQueryResult asyncQueryResult;\n+            if (queryType.equals(QueryType.JSONAPI_V1_0)) {\n+                MultivaluedMap<String, String> queryParams = getQueryParams(query);\n+                response = elide.get(getPath(query), queryParams, user);\n+                log.debug(\"JSONAPI_V1_0 getResponseCode: {}\", response.getResponseCode());\n+                log.debug(\"JSONAPI_V1_0 getBody: {}\", response.getBody());\n+            }\n+            else if (queryType.equals(QueryType.GRAPHQL_V1_0)) {\n+                response = runner.run(query, user);\n+                log.debug(\"GRAPHQL_V1_0 getResponseCode: {}\", response.getResponseCode());\n+                log.debug(\"GRAPHQL_V1_0 getBody: {}\", response.getBody());\n+            }\n+            // if 200 - response code then Change async query to complete else change to Failure\n+            if (response.getResponseCode() == 200) {\n+                asyncQuery = updateAsyncQueryStatus(QueryStatus.COMPLETE, id);\n+            } else {\n+                asyncQuery = updateAsyncQueryStatus(QueryStatus.FAILURE, id);\n+            }\n+\n+            // Create AsyncQueryResult entry for AsyncQuery\n+            asyncQueryResult = createAsyncQueryResult(response.getResponseCode(), response.getBody(), asyncQuery, id);\n+\n+            // Add queryResult object to query object\n+            updateAsyncQueryStatus(asyncQueryResult, id);\n+\n+        } catch (IOException e) {\n+            log.error(\"IOException: {}\", e.getMessage());\n+        } catch (URISyntaxException e) {\n+            log.error(\"URISyntaxException: {}\", e.getMessage());\n+        } catch (Exception e) {\n+            log.error(\"Exception: {}\", e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * This method parses the url and gets the query params and adds them into a MultivaluedMap\n+     * to be used by underlying Elide.get method\n+     * @param query query from the Async request\n+     * @throws URISyntaxException URISyntaxException from malformed or incorrect URI\n+     * @return MultivaluedMap with query parameters\n+     */\n+    protected MultivaluedMap<String, String> getQueryParams(String query) throws URISyntaxException {\n+        URIBuilder uri;\n+        uri = new URIBuilder(query);\n+        MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<String, String>();\n+        for (NameValuePair queryParam : uri.getQueryParams()) {\n+            queryParams.add(queryParam.getName(), queryParam.getValue());\n+        }\n+        log.debug(\"QueryParams: {}\", queryParams);\n+        return queryParams;\n+    }\n+\n+    /**\n+     * This method parses the url and gets the query params and retrieves path\n+     * to be used by underlying Elide.get method\n+     * @param query query from the Async request\n+     * @throws URISyntaxException URISyntaxException from malformed or incorrect URI\n+     * @return Path extracted from URI\n+     */\n+    protected String getPath(String query) throws URISyntaxException {\n+        URIBuilder uri;\n+        uri = new URIBuilder(query);\n+        log.debug(\"Retrieving path from query\");\n+        return uri.getPath();\n+    }\n+\n+    /**\n+     * This method updates the model for AsyncQuery with passed status value.\n+     * @param status new status based on the enum QueryStatus\n+     * @param asyncQueryId queryId from asyncQuery request\n+     * @throws IOException IOException from DataStoreTransaction\n+     * @return AsyncQuery Object\n+     */\n+    protected AsyncQuery updateAsyncQueryStatus(QueryStatus status, UUID asyncQueryId) throws IOException {\n+        log.debug(\"Updating AsyncQuery status to {}\", status);\n+        DataStoreTransaction tx = elide.getDataStore().beginTransaction();\n+\n+        // Creating new RequestScope for Datastore transaction\n+        RequestScope scope = new RequestScope(null, null, tx, null, null, elide.getElideSettings());", "originalCommit": "c88d08a94c994f16ee51c6a51c39694411fb8c59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\nindex 6d1acea7f..abf73e908 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n\n@@ -5,28 +5,25 @@\n  */\n package com.yahoo.elide.async.service;\n \n-import java.io.IOException;\n import java.net.URISyntaxException;\n-import java.security.Principal;\n-import java.util.UUID;\n \n import javax.ws.rs.core.MultivaluedHashMap;\n import javax.ws.rs.core.MultivaluedMap;\n \n import org.apache.http.NameValuePair;\n+import org.apache.http.NoHttpResponseException;\n import org.apache.http.client.utils.URIBuilder;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.ElideResponse;\n import com.yahoo.elide.async.models.AsyncQuery;\n-import com.yahoo.elide.async.models.AsyncQueryResult;\n import com.yahoo.elide.async.models.QueryStatus;\n import com.yahoo.elide.async.models.QueryType;\n-import com.yahoo.elide.core.DataStoreTransaction;\n-import com.yahoo.elide.core.RequestScope;\n import com.yahoo.elide.graphql.QueryRunner;\n-import com.yahoo.elide.request.EntityProjection;\n+import com.yahoo.elide.security.User;\n \n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIzMjg2Nw==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385232867", "bodyText": "Rather than duplicate the transaction setup and teardown, make a general function 'updateAsynQuery' and pass a function argument to it that actually updates the AsyncQuery object.  Then you can reuse the logic for all of your updates.", "author": "aklish", "createdAt": "2020-02-27T16:45:32Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.security.Principal;\n+import java.util.UUID;\n+\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.async.models.QueryType;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.graphql.QueryRunner;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for executing the query provided in Async Query.\n+ * It will also update the query status and result object at different\n+ * stages of execution.\n+ */\n+@Slf4j\n+public class AsyncQueryThread implements Runnable {\n+\n+\tprivate String query;\n+\tprivate QueryType queryType;\n+\tprivate Principal user;\n+\tprivate Elide elide;\n+\tprivate QueryRunner runner;\n+\tprivate UUID id;\n+\n+    public AsyncQueryThread(String query, QueryType queryType, Principal user, Elide elide, QueryRunner runner, UUID id){\n+        log.debug(\"New Async Query thread created\");\n+        this.query = query;\n+        this.queryType = queryType;\n+        this.user = user;\n+        this.elide = elide;\n+        this.runner = runner;\n+        this.id = id;\n+    }\n+\n+    @Override\n+    public void run() {\n+        processQuery();\n+    }\n+\n+    /**\n+     * This is the main method which processes the Async Query request, executes the query and updates\n+     * values for AsyncQuery and AsyncQueryResult models accordingly.\n+     */\n+    protected void processQuery() {\n+        try {\n+            // Change async query to processing\n+            updateAsyncQueryStatus(QueryStatus.PROCESSING, id);\n+            ElideResponse response = null;\n+            log.debug(\"query: {}\", query);\n+            log.debug(\"queryType: {}\", queryType);\n+            AsyncQuery asyncQuery;\n+            AsyncQueryResult asyncQueryResult;\n+            if (queryType.equals(QueryType.JSONAPI_V1_0)) {\n+                MultivaluedMap<String, String> queryParams = getQueryParams(query);\n+                response = elide.get(getPath(query), queryParams, user);\n+                log.debug(\"JSONAPI_V1_0 getResponseCode: {}\", response.getResponseCode());\n+                log.debug(\"JSONAPI_V1_0 getBody: {}\", response.getBody());\n+            }\n+            else if (queryType.equals(QueryType.GRAPHQL_V1_0)) {\n+                response = runner.run(query, user);\n+                log.debug(\"GRAPHQL_V1_0 getResponseCode: {}\", response.getResponseCode());\n+                log.debug(\"GRAPHQL_V1_0 getBody: {}\", response.getBody());\n+            }\n+            // if 200 - response code then Change async query to complete else change to Failure\n+            if (response.getResponseCode() == 200) {\n+                asyncQuery = updateAsyncQueryStatus(QueryStatus.COMPLETE, id);\n+            } else {\n+                asyncQuery = updateAsyncQueryStatus(QueryStatus.FAILURE, id);\n+            }\n+\n+            // Create AsyncQueryResult entry for AsyncQuery\n+            asyncQueryResult = createAsyncQueryResult(response.getResponseCode(), response.getBody(), asyncQuery, id);\n+\n+            // Add queryResult object to query object\n+            updateAsyncQueryStatus(asyncQueryResult, id);\n+\n+        } catch (IOException e) {\n+            log.error(\"IOException: {}\", e.getMessage());\n+        } catch (URISyntaxException e) {\n+            log.error(\"URISyntaxException: {}\", e.getMessage());\n+        } catch (Exception e) {\n+            log.error(\"Exception: {}\", e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * This method parses the url and gets the query params and adds them into a MultivaluedMap\n+     * to be used by underlying Elide.get method\n+     * @param query query from the Async request\n+     * @throws URISyntaxException URISyntaxException from malformed or incorrect URI\n+     * @return MultivaluedMap with query parameters\n+     */\n+    protected MultivaluedMap<String, String> getQueryParams(String query) throws URISyntaxException {\n+        URIBuilder uri;\n+        uri = new URIBuilder(query);\n+        MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<String, String>();\n+        for (NameValuePair queryParam : uri.getQueryParams()) {\n+            queryParams.add(queryParam.getName(), queryParam.getValue());\n+        }\n+        log.debug(\"QueryParams: {}\", queryParams);\n+        return queryParams;\n+    }\n+\n+    /**\n+     * This method parses the url and gets the query params and retrieves path\n+     * to be used by underlying Elide.get method\n+     * @param query query from the Async request\n+     * @throws URISyntaxException URISyntaxException from malformed or incorrect URI\n+     * @return Path extracted from URI\n+     */\n+    protected String getPath(String query) throws URISyntaxException {\n+        URIBuilder uri;\n+        uri = new URIBuilder(query);\n+        log.debug(\"Retrieving path from query\");\n+        return uri.getPath();\n+    }\n+\n+    /**\n+     * This method updates the model for AsyncQuery with passed status value.\n+     * @param status new status based on the enum QueryStatus\n+     * @param asyncQueryId queryId from asyncQuery request\n+     * @throws IOException IOException from DataStoreTransaction\n+     * @return AsyncQuery Object\n+     */\n+    protected AsyncQuery updateAsyncQueryStatus(QueryStatus status, UUID asyncQueryId) throws IOException {\n+        log.debug(\"Updating AsyncQuery status to {}\", status);\n+        DataStoreTransaction tx = elide.getDataStore().beginTransaction();\n+\n+        // Creating new RequestScope for Datastore transaction\n+        RequestScope scope = new RequestScope(null, null, tx, null, null, elide.getElideSettings());\n+\n+        EntityProjection asyncQueryCollection = EntityProjection.builder()\n+            .type(AsyncQuery.class)\n+            .build();\n+        AsyncQuery query = (AsyncQuery) tx.loadObject(asyncQueryCollection, asyncQueryId, scope);\n+        query.setQueryStatus(status);\n+        tx.save(query, scope);\n+        tx.commit(scope);\n+        tx.flush(scope);\n+        tx.close();\n+        return query;\n+    }\n+\n+    /**\n+     * This method updates the model for AsyncQuery with result object,\n+     * @param asyncQueryResult AsyncQueryResult object to be associated with the AsyncQuery object\n+     * @param asyncQueryId UUID of the AsyncQuery to be associated with the AsyncQueryResult object\n+     * @throws IOException IOException from DataStoreTransaction\n+     */\n+    protected void updateAsyncQueryStatus(AsyncQueryResult asyncQueryResult, UUID asyncQueryId) throws IOException {\n+        log.debug(\"Updating AsyncQueryResult to {}\", asyncQueryResult);", "originalCommit": "c88d08a94c994f16ee51c6a51c39694411fb8c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNTA2NA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385335064", "bodyText": "Right now we have a overloaded method for updateAsyncQueryStatus - one of them is used to update Query Status and the other one is used to add the AsyncQueryResult Object. We do it this way because at any instance we only need to update either the query status or add the result object.  Could you please elaborate on how we can create this generic updateAsyncQuery function ?", "author": "Abhino", "createdAt": "2020-02-27T19:49:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIzMjg2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\nindex 6d1acea7f..abf73e908 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n\n@@ -5,28 +5,25 @@\n  */\n package com.yahoo.elide.async.service;\n \n-import java.io.IOException;\n import java.net.URISyntaxException;\n-import java.security.Principal;\n-import java.util.UUID;\n \n import javax.ws.rs.core.MultivaluedHashMap;\n import javax.ws.rs.core.MultivaluedMap;\n \n import org.apache.http.NameValuePair;\n+import org.apache.http.NoHttpResponseException;\n import org.apache.http.client.utils.URIBuilder;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.ElideResponse;\n import com.yahoo.elide.async.models.AsyncQuery;\n-import com.yahoo.elide.async.models.AsyncQueryResult;\n import com.yahoo.elide.async.models.QueryStatus;\n import com.yahoo.elide.async.models.QueryType;\n-import com.yahoo.elide.core.DataStoreTransaction;\n-import com.yahoo.elide.core.RequestScope;\n import com.yahoo.elide.graphql.QueryRunner;\n-import com.yahoo.elide.request.EntityProjection;\n+import com.yahoo.elide.security.User;\n \n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NjE1OA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385246158", "bodyText": "Can we use lombok and get rid of all the boilerplate getters & setters?", "author": "aklish", "createdAt": "2020-02-27T17:06:19Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.models;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.inject.Inject;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Transient;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.OnCreatePostCommit;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.async.service.AsyncExecutorService;\n+import com.yahoo.elide.core.RequestScope;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Model for Async Query\n+ */\n+@Entity\n+@Include(type = \"query\", rootLevel = true)\n+@ReadPermission(expression = \"Principal is Owner\")\n+@UpdatePermission(expression = \"Prefab.Role.None\")\n+@Slf4j\n+public class AsyncQuery implements PrincipalOwned {\n+    @Id\n+    private UUID id; //Can be generated or provided.\n+\n+    //Extracted from the Principal object\n+    private String principalName;\n+\n+    private String query;  //JSON-API PATH or GraphQL payload.\n+\n+    private QueryType queryType; //GRAPHQL, JSONAPI\n+\n+    @UpdatePermission(expression = \"Principal is Owner AND value is Cancelled\")\n+    private QueryStatus status;\n+\n+    @OneToOne(mappedBy = \"query\")\n+    private AsyncQueryResult result;\n+\n+    private Date createdOn;\n+\n+    private Date updatedOn;\n+\n+    @Inject\n+    @Transient\n+    private AsyncExecutorService asyncExecutorService;\n+\n+    @Override\n+\tpublic String getPrincipalName() {\n+\t\treturn principalName;\n+\t}\n+\n+    @PrePersist\n+    public void prePersist() {\n+        createdOn = updatedOn = new Date();\n+    }\n+\n+    @PreUpdate\n+    public void preUpdate() {\n+        this.updatedOn = new Date();\n+    }\n+\n+    public void setResult(AsyncQueryResult result) {\n+        this.result = result;\n+    }\n+\n+    public Date getUpdatedOn() {", "originalCommit": "c88d08a94c994f16ee51c6a51c39694411fb8c59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\nindex db8ea25e7..e3b6394fc 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\n\n@@ -5,42 +5,40 @@\n  */\n package com.yahoo.elide.async.models;\n \n-import java.security.Principal;\n-import java.util.Date;\n import java.util.UUID;\n \n import javax.inject.Inject;\n+import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.OneToOne;\n-import javax.persistence.PrePersist;\n-import javax.persistence.PreUpdate;\n import javax.persistence.Transient;\n \n+import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Exclude;\n import com.yahoo.elide.annotation.Include;\n import com.yahoo.elide.annotation.OnCreatePostCommit;\n+import com.yahoo.elide.annotation.OnCreatePreSecurity;\n import com.yahoo.elide.annotation.ReadPermission;\n import com.yahoo.elide.annotation.UpdatePermission;\n import com.yahoo.elide.async.service.AsyncExecutorService;\n import com.yahoo.elide.core.RequestScope;\n \n-import lombok.extern.slf4j.Slf4j;\n+import lombok.Data;\n \n /**\n  * Model for Async Query\n  */\n @Entity\n-@Include(type = \"query\", rootLevel = true)\n+@Include(type = \"asyncQuery\", rootLevel = true)\n @ReadPermission(expression = \"Principal is Owner\")\n @UpdatePermission(expression = \"Prefab.Role.None\")\n-@Slf4j\n-public class AsyncQuery implements PrincipalOwned {\n+@DeletePermission(expression = \"Prefab.Role.None\")\n+@Data\n+public class AsyncQuery extends AsyncBase implements PrincipalOwned {\n     @Id\n     private UUID id; //Can be generated or provided.\n \n-    //Extracted from the Principal object\n-    private String principalName;\n-\n     private String query;  //JSON-API PATH or GraphQL payload.\n \n     private QueryType queryType; //GRAPHQL, JSONAPI\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NjgzMw==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385246833", "bodyText": "What about DeletePermission?", "author": "aklish", "createdAt": "2020-02-27T17:07:30Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.models;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.inject.Inject;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Transient;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.OnCreatePostCommit;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.async.service.AsyncExecutorService;\n+import com.yahoo.elide.core.RequestScope;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Model for Async Query\n+ */\n+@Entity\n+@Include(type = \"query\", rootLevel = true)\n+@ReadPermission(expression = \"Principal is Owner\")\n+@UpdatePermission(expression = \"Prefab.Role.None\")", "originalCommit": "c88d08a94c994f16ee51c6a51c39694411fb8c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxMjU5OA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385312598", "bodyText": "Will make the DeletePermission as None?", "author": "moizarafat", "createdAt": "2020-02-27T19:07:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NjgzMw=="}], "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\nindex db8ea25e7..e3b6394fc 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\n\n@@ -5,42 +5,40 @@\n  */\n package com.yahoo.elide.async.models;\n \n-import java.security.Principal;\n-import java.util.Date;\n import java.util.UUID;\n \n import javax.inject.Inject;\n+import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.OneToOne;\n-import javax.persistence.PrePersist;\n-import javax.persistence.PreUpdate;\n import javax.persistence.Transient;\n \n+import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Exclude;\n import com.yahoo.elide.annotation.Include;\n import com.yahoo.elide.annotation.OnCreatePostCommit;\n+import com.yahoo.elide.annotation.OnCreatePreSecurity;\n import com.yahoo.elide.annotation.ReadPermission;\n import com.yahoo.elide.annotation.UpdatePermission;\n import com.yahoo.elide.async.service.AsyncExecutorService;\n import com.yahoo.elide.core.RequestScope;\n \n-import lombok.extern.slf4j.Slf4j;\n+import lombok.Data;\n \n /**\n  * Model for Async Query\n  */\n @Entity\n-@Include(type = \"query\", rootLevel = true)\n+@Include(type = \"asyncQuery\", rootLevel = true)\n @ReadPermission(expression = \"Principal is Owner\")\n @UpdatePermission(expression = \"Prefab.Role.None\")\n-@Slf4j\n-public class AsyncQuery implements PrincipalOwned {\n+@DeletePermission(expression = \"Prefab.Role.None\")\n+@Data\n+public class AsyncQuery extends AsyncBase implements PrincipalOwned {\n     @Id\n     private UUID id; //Can be generated or provided.\n \n-    //Extracted from the Principal object\n-    private String principalName;\n-\n     private String query;  //JSON-API PATH or GraphQL payload.\n \n     private QueryType queryType; //GRAPHQL, JSONAPI\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NzAzMQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385247031", "bodyText": "What about DeletePermission", "author": "aklish", "createdAt": "2020-02-27T17:07:49Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.models;\n+\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+\n+import com.yahoo.elide.annotation.CreatePermission;\n+import com.yahoo.elide.annotation.Exclude;\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+\n+/**\n+ * Model for Async Query Result\n+ */\n+@Entity\n+@Include(type=\"queryResult\")\n+@ReadPermission(expression = \"Principal is Owner\")\n+@UpdatePermission(expression = \"Prefab.Role.None\")\n+@CreatePermission(expression = \"Prefab.Role.None\")\n+public class AsyncQueryResult implements PrincipalOwned {", "originalCommit": "c88d08a94c994f16ee51c6a51c39694411fb8c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxMjk1NA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385312954", "bodyText": "Should we set the DeletePermission as None for the AsyncQueryResult ?", "author": "Abhino", "createdAt": "2020-02-27T19:08:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NzAzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java\nindex 3f1cd64d0..a8eba3d7e 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java\n\n@@ -5,30 +5,32 @@\n  */\n package com.yahoo.elide.async.models;\n \n-import java.util.Date;\n import java.util.UUID;\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.OneToOne;\n-import javax.persistence.PrePersist;\n-import javax.persistence.PreUpdate;\n \n import com.yahoo.elide.annotation.CreatePermission;\n+import com.yahoo.elide.annotation.DeletePermission;\n import com.yahoo.elide.annotation.Exclude;\n import com.yahoo.elide.annotation.Include;\n import com.yahoo.elide.annotation.ReadPermission;\n import com.yahoo.elide.annotation.UpdatePermission;\n \n+import lombok.Data;\n+\n /**\n  * Model for Async Query Result\n  */\n @Entity\n-@Include(type=\"queryResult\")\n+@Include(type=\"asyncQueryResult\")\n @ReadPermission(expression = \"Principal is Owner\")\n @UpdatePermission(expression = \"Prefab.Role.None\")\n @CreatePermission(expression = \"Prefab.Role.None\")\n-public class AsyncQueryResult implements PrincipalOwned {\n+@DeletePermission(expression = \"Prefab.Role.None\")\n+@Data\n+public class AsyncQueryResult extends AsyncBase implements PrincipalOwned {\n     @Id\n     private UUID id; //Matches UUID in query.\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NzIyOQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385247229", "bodyText": "Let's use lombok to remove getters & setters.", "author": "aklish", "createdAt": "2020-02-27T17:08:13Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.models;\n+\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+\n+import com.yahoo.elide.annotation.CreatePermission;\n+import com.yahoo.elide.annotation.Exclude;\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+\n+/**\n+ * Model for Async Query Result\n+ */\n+@Entity\n+@Include(type=\"queryResult\")\n+@ReadPermission(expression = \"Principal is Owner\")\n+@UpdatePermission(expression = \"Prefab.Role.None\")\n+@CreatePermission(expression = \"Prefab.Role.None\")\n+public class AsyncQueryResult implements PrincipalOwned {\n+    @Id\n+    private UUID id; //Matches UUID in query.\n+\n+    private Integer contentLength;\n+\n+    private String responseBody; //success or errors\n+\n+    private Integer status; // HTTP Status\n+\n+    private Date createdOn;\n+\n+    private Date updatedOn;\n+\n+    @OneToOne\n+    private AsyncQuery query;\n+\n+    @Exclude\n+    public String getPrincipalName() {", "originalCommit": "c88d08a94c994f16ee51c6a51c39694411fb8c59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java\nindex 3f1cd64d0..a8eba3d7e 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java\n\n@@ -5,30 +5,32 @@\n  */\n package com.yahoo.elide.async.models;\n \n-import java.util.Date;\n import java.util.UUID;\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.OneToOne;\n-import javax.persistence.PrePersist;\n-import javax.persistence.PreUpdate;\n \n import com.yahoo.elide.annotation.CreatePermission;\n+import com.yahoo.elide.annotation.DeletePermission;\n import com.yahoo.elide.annotation.Exclude;\n import com.yahoo.elide.annotation.Include;\n import com.yahoo.elide.annotation.ReadPermission;\n import com.yahoo.elide.annotation.UpdatePermission;\n \n+import lombok.Data;\n+\n /**\n  * Model for Async Query Result\n  */\n @Entity\n-@Include(type=\"queryResult\")\n+@Include(type=\"asyncQueryResult\")\n @ReadPermission(expression = \"Principal is Owner\")\n @UpdatePermission(expression = \"Prefab.Role.None\")\n @CreatePermission(expression = \"Prefab.Role.None\")\n-public class AsyncQueryResult implements PrincipalOwned {\n+@DeletePermission(expression = \"Prefab.Role.None\")\n+@Data\n+public class AsyncQueryResult extends AsyncBase implements PrincipalOwned {\n     @Id\n     private UUID id; //Matches UUID in query.\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0ODM3MQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385248371", "bodyText": "Cast to PrincipalOwned.  Then you don't need to handle the two cases differently.\nAlso - let's file a ticket to move this to a FilterExpressionCheck", "author": "aklish", "createdAt": "2020-02-27T17:10:05Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/models/security/AsyncQueryOperationChecks.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.models.security;\n+\n+import java.security.Principal;\n+import java.util.Optional;\n+\n+import com.yahoo.elide.annotation.SecurityCheck;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.security.ChangeSpec;\n+import com.yahoo.elide.security.RequestScope;\n+import com.yahoo.elide.security.checks.OperationCheck;\n+\n+/**\n+ * Operation Checks on the Async Query and Result objects.\n+ */\n+public class AsyncQueryOperationChecks {\n+    @SecurityCheck(AsyncQueryOwner.PRINCIPAL_IS_OWNER)\n+    public static class AsyncQueryOwner extends OperationCheck<Object> {\n+\n+        public static final String PRINCIPAL_IS_OWNER = \"Principal is Owner\";\n+\n+        @Override\n+        public boolean ok(Object object, RequestScope requestScope, Optional<ChangeSpec> changeSpec) {\n+            Principal principal = ((Principal) requestScope.getUser().getOpaqueUser());\n+\n+            if(object.getClass().equals(AsyncQuery.class)) {", "originalCommit": "c88d08a94c994f16ee51c6a51c39694411fb8c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2MTQzNw==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385461437", "bodyText": "I can not remember the reason, but can you explain what will be the advantage of moving this to FilterExpressionCheck vs the OperationCheck?", "author": "moizarafat", "createdAt": "2020-02-28T01:18:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0ODM3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/models/security/AsyncQueryOperationChecks.java b/elide-async/src/main/java/com/yahoo/elide/async/models/security/AsyncQueryOperationChecks.java\nindex 6aae80870..29dd066ca 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/models/security/AsyncQueryOperationChecks.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/models/security/AsyncQueryOperationChecks.java\n\n@@ -10,7 +10,7 @@ import java.util.Optional;\n \n import com.yahoo.elide.annotation.SecurityCheck;\n import com.yahoo.elide.async.models.AsyncQuery;\n-import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.async.models.PrincipalOwned;\n import com.yahoo.elide.async.models.QueryStatus;\n import com.yahoo.elide.security.ChangeSpec;\n import com.yahoo.elide.security.RequestScope;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1MTE0OA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385251148", "bodyText": "Move all this math to a separate function:\nboolean isTimedOut(AsyncQuery query) { .. }", "author": "aklish", "createdAt": "2020-02-27T17:14:19Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n+import com.yahoo.elide.core.filter.expression.FilterExpression;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for updating AsyncQueryThread status\n+ * beyond the max run time and if not terminated by interrupt process\n+ * due to app/host crash or restart.\n+ */\n+@Slf4j\n+public class AsyncQueryCleanerThread implements Runnable {\n+\n+    private int maxRunTime;\n+    private Elide elide;\n+\n+    AsyncQueryCleanerThread(int maxRunTime, Elide elide) {\n+        log.debug(\"New Async Query Cleaner thread created\");\n+        this.maxRunTime = maxRunTime;\n+        this.elide = elide;\n+    }\n+\n+    @Override\n+    public void run() {\n+        timeoutAsyncQuery();\n+    }\n+\n+    /**\n+     * This method updates the status of long running async query which\n+     * were not interrupted due to host crash/app shutdown to TIMEDOUT.\n+     * */\n+    private void timeoutAsyncQuery() {\n+        DataStoreTransaction tx = elide.getDataStore().beginTransaction();\n+\n+        try {\n+            EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n+            RSQLFilterDialect filterParser = new RSQLFilterDialect(dictionary);\n+            RequestScope scope = new RequestScope(null, null, tx, null, null, elide.getElideSettings());\n+\n+            FilterExpression filter = filterParser.parseFilterExpression(\"status=in=(\" + QueryStatus.PROCESSING.toString() + \",\"\n+                + QueryStatus.QUEUED.toString() + \")\", AsyncQuery.class, false);\n+\n+            EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                    .type(AsyncQuery.class)\n+                    .filterExpression(filter)\n+                    .build();\n+\n+            Iterable<Object> loaded = tx.loadObjects(asyncQueryCollection, scope);\n+            Iterator<Object> itr = loaded.iterator();\n+            while(itr.hasNext()) {\n+                AsyncQuery query = (AsyncQuery) itr.next();\n+                long differenceInMillies = Math.abs((new Date()).getTime() - query.getCreatedOn().getTime());", "originalCommit": "c88d08a94c994f16ee51c6a51c39694411fb8c59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\nindex 22a1e08b6..9bbe7c2f9 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n\n@@ -5,21 +5,18 @@\n  */\n package com.yahoo.elide.async.service;\n \n-import java.io.IOException;\n+import java.text.Format;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Collection;\n import java.util.Date;\n-import java.util.Iterator;\n-import java.util.concurrent.TimeUnit;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.QueryStatus;\n-import com.yahoo.elide.core.DataStoreTransaction;\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.core.RequestScope;\n-import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n-import com.yahoo.elide.core.filter.expression.FilterExpression;\n-import com.yahoo.elide.request.EntityProjection;\n \n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1MTM2OA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385251368", "bodyText": "Do the date.getTime outside the loop once.  There could be a lot of records.", "author": "aklish", "createdAt": "2020-02-27T17:14:44Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n+import com.yahoo.elide.core.filter.expression.FilterExpression;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for updating AsyncQueryThread status\n+ * beyond the max run time and if not terminated by interrupt process\n+ * due to app/host crash or restart.\n+ */\n+@Slf4j\n+public class AsyncQueryCleanerThread implements Runnable {\n+\n+    private int maxRunTime;\n+    private Elide elide;\n+\n+    AsyncQueryCleanerThread(int maxRunTime, Elide elide) {\n+        log.debug(\"New Async Query Cleaner thread created\");\n+        this.maxRunTime = maxRunTime;\n+        this.elide = elide;\n+    }\n+\n+    @Override\n+    public void run() {\n+        timeoutAsyncQuery();\n+    }\n+\n+    /**\n+     * This method updates the status of long running async query which\n+     * were not interrupted due to host crash/app shutdown to TIMEDOUT.\n+     * */\n+    private void timeoutAsyncQuery() {\n+        DataStoreTransaction tx = elide.getDataStore().beginTransaction();\n+\n+        try {\n+            EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n+            RSQLFilterDialect filterParser = new RSQLFilterDialect(dictionary);\n+            RequestScope scope = new RequestScope(null, null, tx, null, null, elide.getElideSettings());\n+\n+            FilterExpression filter = filterParser.parseFilterExpression(\"status=in=(\" + QueryStatus.PROCESSING.toString() + \",\"\n+                + QueryStatus.QUEUED.toString() + \")\", AsyncQuery.class, false);\n+\n+            EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                    .type(AsyncQuery.class)\n+                    .filterExpression(filter)\n+                    .build();\n+\n+            Iterable<Object> loaded = tx.loadObjects(asyncQueryCollection, scope);\n+            Iterator<Object> itr = loaded.iterator();\n+            while(itr.hasNext()) {\n+                AsyncQuery query = (AsyncQuery) itr.next();\n+                long differenceInMillies = Math.abs((new Date()).getTime() - query.getCreatedOn().getTime());", "originalCommit": "c88d08a94c994f16ee51c6a51c39694411fb8c59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\nindex 22a1e08b6..9bbe7c2f9 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n\n@@ -5,21 +5,18 @@\n  */\n package com.yahoo.elide.async.service;\n \n-import java.io.IOException;\n+import java.text.Format;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Collection;\n import java.util.Date;\n-import java.util.Iterator;\n-import java.util.concurrent.TimeUnit;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.QueryStatus;\n-import com.yahoo.elide.core.DataStoreTransaction;\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.core.RequestScope;\n-import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n-import com.yahoo.elide.core.filter.expression.FilterExpression;\n-import com.yahoo.elide.request.EntityProjection;\n \n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1Mjc0Mw==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385252743", "bodyText": "This thread should delete the query rather than timing it out.", "author": "aklish", "createdAt": "2020-02-27T17:17:07Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n+import com.yahoo.elide.core.filter.expression.FilterExpression;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for updating AsyncQueryThread status\n+ * beyond the max run time and if not terminated by interrupt process\n+ * due to app/host crash or restart.\n+ */\n+@Slf4j\n+public class AsyncQueryCleanerThread implements Runnable {\n+\n+    private int maxRunTime;\n+    private Elide elide;\n+\n+    AsyncQueryCleanerThread(int maxRunTime, Elide elide) {\n+        log.debug(\"New Async Query Cleaner thread created\");\n+        this.maxRunTime = maxRunTime;\n+        this.elide = elide;\n+    }\n+\n+    @Override\n+    public void run() {\n+        timeoutAsyncQuery();\n+    }\n+\n+    /**\n+     * This method updates the status of long running async query which\n+     * were not interrupted due to host crash/app shutdown to TIMEDOUT.\n+     * */\n+    private void timeoutAsyncQuery() {\n+        DataStoreTransaction tx = elide.getDataStore().beginTransaction();\n+\n+        try {\n+            EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n+            RSQLFilterDialect filterParser = new RSQLFilterDialect(dictionary);\n+            RequestScope scope = new RequestScope(null, null, tx, null, null, elide.getElideSettings());\n+\n+            FilterExpression filter = filterParser.parseFilterExpression(\"status=in=(\" + QueryStatus.PROCESSING.toString() + \",\"\n+                + QueryStatus.QUEUED.toString() + \")\", AsyncQuery.class, false);\n+\n+            EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                    .type(AsyncQuery.class)\n+                    .filterExpression(filter)\n+                    .build();\n+\n+            Iterable<Object> loaded = tx.loadObjects(asyncQueryCollection, scope);\n+            Iterator<Object> itr = loaded.iterator();\n+            while(itr.hasNext()) {\n+                AsyncQuery query = (AsyncQuery) itr.next();\n+                long differenceInMillies = Math.abs((new Date()).getTime() - query.getCreatedOn().getTime());\n+                long difference = TimeUnit.MINUTES.convert(differenceInMillies, TimeUnit.MILLISECONDS);\n+\n+                // Check if its twice as long as max run time. It means the host/app crashed or restarted.\n+                if(difference > maxRunTime * 2) {\n+                    log.info(\"Updating Async Query Status to TIMEDOUT\");\n+                    query.setQueryStatus(QueryStatus.TIMEDOUT);", "originalCommit": "c88d08a94c994f16ee51c6a51c39694411fb8c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNDUzMQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385304531", "bodyText": "If we delete the Query entry on the restart, it will confuse the user where the query went because an application crash or restart will not be known to him.", "author": "moizarafat", "createdAt": "2020-02-27T18:52:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1Mjc0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\nindex 22a1e08b6..9bbe7c2f9 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n\n@@ -5,21 +5,18 @@\n  */\n package com.yahoo.elide.async.service;\n \n-import java.io.IOException;\n+import java.text.Format;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Collection;\n import java.util.Date;\n-import java.util.Iterator;\n-import java.util.concurrent.TimeUnit;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.QueryStatus;\n-import com.yahoo.elide.core.DataStoreTransaction;\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.core.RequestScope;\n-import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n-import com.yahoo.elide.core.filter.expression.FilterExpression;\n-import com.yahoo.elide.request.EntityProjection;\n \n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1MzE4Mg==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385253182", "bodyText": "Let's make these configurable.", "author": "aklish", "createdAt": "2020-02-27T17:17:58Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptThread.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.UUID;\n+import java.util.concurrent.Future;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for terminating AsyncQueryThread executing\n+ * beyond the max run time and update status.\n+ */\n+@Slf4j\n+public class AsyncQueryInterruptThread implements Runnable {\n+\n+    private Elide elide;\n+    private Future<?> task;\n+    private UUID id;\n+    private Date submittedOn;\n+    private int interruptTime;\n+\n+    public AsyncQueryInterruptThread(Elide elide, Future<?> task, UUID id, Date submittedOn, int interruptTime){\n+        log.debug(\"New Async Query Interrupt thread created\");\n+        this.elide = elide;\n+        this.task = task;\n+        this.id = id;\n+        this.submittedOn = submittedOn;\n+        this.interruptTime = interruptTime;\n+    }\n+\n+    @Override\n+    public void run() {\n+        interruptQuery();\n+    }\n+\n+    /**\n+     * This is the main method which interrupts the Async Query request, if it has executed beyond\n+     * the maximum run time.\n+     */\n+    protected void interruptQuery() {\n+        try {\n+            long interruptTimeInMillies = interruptTime * 60 * 1000;", "originalCommit": "c88d08a94c994f16ee51c6a51c39694411fb8c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxNTg4Mg==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385315882", "bodyText": "interruptTime is set when the elide instance comes up based on the properties/settings set by the user in application.yaml/settings.java and it gets applied to all the queries. If the user does not set it, its defaulted to 60 minutes.  Do you mean it should be an attribute in AsyncQuery and every query should have its own timeout provided by the user? if not provided, we default it.", "author": "moizarafat", "createdAt": "2020-02-27T19:13:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1MzE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptThread.java\nindex 845c269b3..addbc716c 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptThread.java\n\n@@ -5,18 +5,18 @@\n  */\n package com.yahoo.elide.async.service;\n \n-import java.io.IOException;\n import java.util.Date;\n-import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.QueryStatus;\n-import com.yahoo.elide.core.DataStoreTransaction;\n-import com.yahoo.elide.core.RequestScope;\n-import com.yahoo.elide.request.EntityProjection;\n \n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1NDQ4NQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385254485", "bodyText": "Instead of sleeping here, just wait on the future with the given timeout:\nfuture.get(long\u00a0timeout,\u00a0TimeUnit\u00a0unit)\nIf the task returns early, this thread can exit early too.", "author": "aklish", "createdAt": "2020-02-27T17:20:11Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptThread.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.UUID;\n+import java.util.concurrent.Future;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for terminating AsyncQueryThread executing\n+ * beyond the max run time and update status.\n+ */\n+@Slf4j\n+public class AsyncQueryInterruptThread implements Runnable {\n+\n+    private Elide elide;\n+    private Future<?> task;\n+    private UUID id;\n+    private Date submittedOn;\n+    private int interruptTime;\n+\n+    public AsyncQueryInterruptThread(Elide elide, Future<?> task, UUID id, Date submittedOn, int interruptTime){\n+        log.debug(\"New Async Query Interrupt thread created\");\n+        this.elide = elide;\n+        this.task = task;\n+        this.id = id;\n+        this.submittedOn = submittedOn;\n+        this.interruptTime = interruptTime;\n+    }\n+\n+    @Override\n+    public void run() {\n+        interruptQuery();\n+    }\n+\n+    /**\n+     * This is the main method which interrupts the Async Query request, if it has executed beyond\n+     * the maximum run time.\n+     */\n+    protected void interruptQuery() {\n+        try {\n+            long interruptTimeInMillies = interruptTime * 60 * 1000;\n+            long differenceInMillies = interruptTimeInMillies - ((new Date()).getTime() - submittedOn.getTime());\n+            \n+            if(differenceInMillies > 0) {\n+               log.debug(\"Sleeping for {}\", differenceInMillies);\n+               Thread.sleep(differenceInMillies);", "originalCommit": "c88d08a94c994f16ee51c6a51c39694411fb8c59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptThread.java\nindex 845c269b3..addbc716c 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptThread.java\n\n@@ -5,18 +5,18 @@\n  */\n package com.yahoo.elide.async.service;\n \n-import java.io.IOException;\n import java.util.Date;\n-import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.QueryStatus;\n-import com.yahoo.elide.core.DataStoreTransaction;\n-import com.yahoo.elide.core.RequestScope;\n-import com.yahoo.elide.request.EntityProjection;\n \n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1NTExNQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385255115", "bodyText": "Let's commonize all of this logic to load an AsyncQuery and do something (pass in a function that manipulates the query).", "author": "aklish", "createdAt": "2020-02-27T17:21:15Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptThread.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.UUID;\n+import java.util.concurrent.Future;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for terminating AsyncQueryThread executing\n+ * beyond the max run time and update status.\n+ */\n+@Slf4j\n+public class AsyncQueryInterruptThread implements Runnable {\n+\n+    private Elide elide;\n+    private Future<?> task;\n+    private UUID id;\n+    private Date submittedOn;\n+    private int interruptTime;\n+\n+    public AsyncQueryInterruptThread(Elide elide, Future<?> task, UUID id, Date submittedOn, int interruptTime){\n+        log.debug(\"New Async Query Interrupt thread created\");\n+        this.elide = elide;\n+        this.task = task;\n+        this.id = id;\n+        this.submittedOn = submittedOn;\n+        this.interruptTime = interruptTime;\n+    }\n+\n+    @Override\n+    public void run() {\n+        interruptQuery();\n+    }\n+\n+    /**\n+     * This is the main method which interrupts the Async Query request, if it has executed beyond\n+     * the maximum run time.\n+     */\n+    protected void interruptQuery() {\n+        try {\n+            long interruptTimeInMillies = interruptTime * 60 * 1000;\n+            long differenceInMillies = interruptTimeInMillies - ((new Date()).getTime() - submittedOn.getTime());\n+            \n+            if(differenceInMillies > 0) {\n+               log.debug(\"Sleeping for {}\", differenceInMillies);\n+               Thread.sleep(differenceInMillies);\n+            }\n+\n+            if(!task.isDone()) {\n+                log.debug(\"Interrupting the task\");\n+                task.cancel(true);\n+                updateAsyncQueryStatus(QueryStatus.TIMEDOUT, id);\n+            }\n+        } catch (InterruptedException e) {\n+            log.error(\"InterruptedException: {}\", e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * This method updates the model for AsyncQuery with passed query status value.\n+     * @param status new status based on the enum QueryStatus\n+     * @param asyncQueryId queryId from asyncQuery request\n+     */\n+    protected void updateAsyncQueryStatus(QueryStatus status, UUID asyncQueryId) {\n+        log.debug(\"Updating AsyncQuery status to {}\", status);\n+        DataStoreTransaction tx = elide.getDataStore().beginTransaction();\n+\n+        // Creating new RequestScope for Datastore transaction\n+        RequestScope scope = new RequestScope(null, null, tx, null, null, elide.getElideSettings());\n+\n+        try {\n+            EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                    .type(AsyncQuery.class)\n+                    .build();\n+            AsyncQuery query = (AsyncQuery) tx.loadObject(asyncQueryCollection, asyncQueryId, scope);", "originalCommit": "c88d08a94c994f16ee51c6a51c39694411fb8c59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptThread.java\nindex 845c269b3..addbc716c 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptThread.java\n\n@@ -5,18 +5,18 @@\n  */\n package com.yahoo.elide.async.service;\n \n-import java.io.IOException;\n import java.util.Date;\n-import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.QueryStatus;\n-import com.yahoo.elide.core.DataStoreTransaction;\n-import com.yahoo.elide.core.RequestScope;\n-import com.yahoo.elide.request.EntityProjection;\n \n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1NzE3Nw==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385257177", "bodyText": "All of the Elide models should implement hashcode & equals.  There are some best practices around how to make this work with ORMs.  You can look at BaseId in Elide to get one of the approaches.", "author": "aklish", "createdAt": "2020-02-27T17:24:54Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.models;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.inject.Inject;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Transient;\n+\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.OnCreatePostCommit;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.async.service.AsyncExecutorService;\n+import com.yahoo.elide.core.RequestScope;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Model for Async Query\n+ */\n+@Entity\n+@Include(type = \"query\", rootLevel = true)\n+@ReadPermission(expression = \"Principal is Owner\")\n+@UpdatePermission(expression = \"Prefab.Role.None\")\n+@Slf4j\n+public class AsyncQuery implements PrincipalOwned {", "originalCommit": "c88d08a94c994f16ee51c6a51c39694411fb8c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1MTA0OA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385351048", "bodyText": "We are adding @Data for AsyncQuery.java which internally includes @EqualsAndHashCode. Do we need to add these separately for the models?", "author": "Abhino", "createdAt": "2020-02-27T20:22:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1NzE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ5MDkwMw==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r386490903", "bodyText": "@Data should be sufficient.", "author": "aklish", "createdAt": "2020-03-02T16:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1NzE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ5MjA5OQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r386492099", "bodyText": "@Data equals & hashcode is not sufficient for use with ORMs.  Go check out BaseId in Elide.", "author": "aklish", "createdAt": "2020-03-02T16:13:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1NzE3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\nindex db8ea25e7..e3b6394fc 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\n\n@@ -5,42 +5,40 @@\n  */\n package com.yahoo.elide.async.models;\n \n-import java.security.Principal;\n-import java.util.Date;\n import java.util.UUID;\n \n import javax.inject.Inject;\n+import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.OneToOne;\n-import javax.persistence.PrePersist;\n-import javax.persistence.PreUpdate;\n import javax.persistence.Transient;\n \n+import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Exclude;\n import com.yahoo.elide.annotation.Include;\n import com.yahoo.elide.annotation.OnCreatePostCommit;\n+import com.yahoo.elide.annotation.OnCreatePreSecurity;\n import com.yahoo.elide.annotation.ReadPermission;\n import com.yahoo.elide.annotation.UpdatePermission;\n import com.yahoo.elide.async.service.AsyncExecutorService;\n import com.yahoo.elide.core.RequestScope;\n \n-import lombok.extern.slf4j.Slf4j;\n+import lombok.Data;\n \n /**\n  * Model for Async Query\n  */\n @Entity\n-@Include(type = \"query\", rootLevel = true)\n+@Include(type = \"asyncQuery\", rootLevel = true)\n @ReadPermission(expression = \"Principal is Owner\")\n @UpdatePermission(expression = \"Prefab.Role.None\")\n-@Slf4j\n-public class AsyncQuery implements PrincipalOwned {\n+@DeletePermission(expression = \"Prefab.Role.None\")\n+@Data\n+public class AsyncQuery extends AsyncBase implements PrincipalOwned {\n     @Id\n     private UUID id; //Can be generated or provided.\n \n-    //Extracted from the Principal object\n-    private String principalName;\n-\n     private String query;  //JSON-API PATH or GraphQL payload.\n \n     private QueryType queryType; //GRAPHQL, JSONAPI\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1NzYzOA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385257638", "bodyText": "To be on the safe side, I would add lombok hashcode and equals to all threads that are being managed by a thread pool.", "author": "aklish", "createdAt": "2020-02-27T17:25:45Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n+import com.yahoo.elide.core.filter.expression.FilterExpression;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for updating AsyncQueryThread status\n+ * beyond the max run time and if not terminated by interrupt process\n+ * due to app/host crash or restart.\n+ */\n+@Slf4j\n+public class AsyncQueryCleanerThread implements Runnable {", "originalCommit": "c88d08a94c994f16ee51c6a51c39694411fb8c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1MjY1MA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r385352650", "bodyText": "We are already adding @Data for AsyncQueryCleanerThread.java which internally includes @EqualsAndHashCode. Do we need to add these separately for the threads?", "author": "Abhino", "createdAt": "2020-02-27T20:26:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1NzYzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ5MDczNg==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r386490736", "bodyText": "@Data should be sufficient.", "author": "aklish", "createdAt": "2020-03-02T16:11:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1NzYzOA=="}], "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\nindex 22a1e08b6..9bbe7c2f9 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n\n@@ -5,21 +5,18 @@\n  */\n package com.yahoo.elide.async.service;\n \n-import java.io.IOException;\n+import java.text.Format;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Collection;\n import java.util.Date;\n-import java.util.Iterator;\n-import java.util.concurrent.TimeUnit;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.QueryStatus;\n-import com.yahoo.elide.core.DataStoreTransaction;\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.core.RequestScope;\n-import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n-import com.yahoo.elide.core.filter.expression.FilterExpression;\n-import com.yahoo.elide.request.EntityProjection;\n \n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n"}}, {"oid": "2fab13ce0767392ec3ff610e7753f2b98af05474", "url": "https://github.com/yahoo/elide/commit/2fab13ce0767392ec3ff610e7753f2b98af05474", "message": "Fixing several review comments - pom, lombok, thread exec\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-02-27T20:36:12Z", "type": "commit"}, {"oid": "12232236cb3d500701eaad32a1b2b509ff207563", "url": "https://github.com/yahoo/elide/commit/12232236cb3d500701eaad32a1b2b509ff207563", "message": "Merge branch 'elide-5.x-async' of github.com:yahoo/elide into elide-5.x-async", "committedDate": "2020-02-27T20:36:43Z", "type": "commit"}, {"oid": "65cf55b9a0263afff80e7d9f34028dd2ec0abacd", "url": "https://github.com/yahoo/elide/commit/65cf55b9a0263afff80e7d9f34028dd2ec0abacd", "message": "Fixing codacity errors\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-02-27T20:43:43Z", "type": "commit"}, {"oid": "12a0514cb02bc4b56c880d2a185b758edc728934", "url": "https://github.com/yahoo/elide/commit/12a0514cb02bc4b56c880d2a185b758edc728934", "message": "Moving all the DB ORM logic to a utility class for Async\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-02-28T19:46:13Z", "type": "commit"}, {"oid": "993f2510bdc2c8ce895b82001d2128d55ecbae4f", "url": "https://github.com/yahoo/elide/commit/993f2510bdc2c8ce895b82001d2128d55ecbae4f", "message": "Remove dependency on number of hosts, delete permission, separate method for interrupttime calculation\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-01T21:05:51Z", "type": "commit"}, {"oid": "91f71412e524f9d469df5e0abd86917b2ff58da4", "url": "https://github.com/yahoo/elide/commit/91f71412e524f9d469df5e0abd86917b2ff58da4", "message": "Variable Naming convention.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-01T21:09:55Z", "type": "commit"}, {"oid": "2b5784452773277d23e6eb31b81bf0f150bc9f56", "url": "https://github.com/yahoo/elide/commit/2b5784452773277d23e6eb31b81bf0f150bc9f56", "message": "Variable Naming convention.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-01T21:15:30Z", "type": "commit"}, {"oid": "490d1a1437efd4347ce2b6ca3d0876b53b0d7c20", "url": "https://github.com/yahoo/elide/commit/490d1a1437efd4347ce2b6ca3d0876b53b0d7c20", "message": "Removing unwanted params.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-01T22:02:02Z", "type": "commit"}, {"oid": "7c315d81e856126b6de48a8e709a99e32ad08b8e", "url": "https://github.com/yahoo/elide/commit/7c315d81e856126b6de48a8e709a99e32ad08b8e", "message": "Making cleaner a separate service.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-02T16:19:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ5NTk5OA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r386495998", "bodyText": "My comments about using functional style here still applies.", "author": "aklish", "createdAt": "2020-03-02T16:19:38Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncDbUtil.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.io.IOException;\n+import java.util.UUID;\n+\n+import javax.inject.Singleton;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+/**\n+ * Utility class which uses the elide datastore to modify, update and create\n+ * AsyncQuery and AsyncQueryResult Objects\n+ */\n+@Singleton\n+public class AsyncDbUtil {\n+\n+\tprivate Elide elide;\n+\tprivate static AsyncDbUtil asyncUtil;\n+\n+    protected static AsyncDbUtil getInstance(Elide elide) {\n+        if (asyncUtil == null) {\n+            synchronized (AsyncDbUtil.class) {\n+                asyncUtil = new AsyncDbUtil(elide);\n+            }\n+        }\n+        return asyncUtil;\n+      }\n+\n+\tprotected AsyncDbUtil(Elide elide) {\n+        this.elide = elide;\n+\t}\n+\n+    /**\n+     * This method updates the model for AsyncQuery with passed value.\n+     * @param updatedAttribute Attribute from asyncQuery which needs to be updated\n+     * @param asyncQueryId Unique UUID for the AsyncQuery Object\n+     * @throws IOException IOException from DataStoreTransaction\n+     * @return AsyncQuery Object\n+     */\n+    protected AsyncQuery updateAsyncQuery(Object updatedAttribute, UUID asyncQueryId) throws IOException {\n+        DataStoreTransaction tx = elide.getDataStore().beginTransaction();\n+        EntityProjection asyncQueryCollection = EntityProjection.builder()\n+            .type(AsyncQuery.class)\n+            .build();\n+        RequestScope scope = new RequestScope(null, null, tx, null, null, elide.getElideSettings());\n+        AsyncQuery query = (AsyncQuery) tx.loadObject(asyncQueryCollection, asyncQueryId, scope);\n+        if (updatedAttribute.getClass().getSimpleName().equals(\"QueryStatus\")) {\n+            query.setStatus((QueryStatus) updatedAttribute);\n+        }\n+        else if (updatedAttribute.getClass().getSimpleName().equals(\"AsyncQueryResult\")) {\n+            query.setResult((AsyncQueryResult)updatedAttribute);\n+        }\n+        tx.save(query, scope);", "originalCommit": "490d1a1437efd4347ce2b6ca3d0876b53b0d7c20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncDbUtil.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncDbUtil.java\ndeleted file mode 100644\nindex 9cb3a5b11..000000000\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncDbUtil.java\n+++ /dev/null\n\n@@ -1,100 +0,0 @@\n-/*\n- * Copyright 2020, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.async.service;\n-\n-import java.io.IOException;\n-import java.util.UUID;\n-\n-import javax.inject.Singleton;\n-\n-import com.yahoo.elide.Elide;\n-import com.yahoo.elide.async.models.AsyncQuery;\n-import com.yahoo.elide.async.models.AsyncQueryResult;\n-import com.yahoo.elide.async.models.QueryStatus;\n-import com.yahoo.elide.core.DataStoreTransaction;\n-import com.yahoo.elide.core.RequestScope;\n-import com.yahoo.elide.request.EntityProjection;\n-\n-/**\n- * Utility class which uses the elide datastore to modify, update and create\n- * AsyncQuery and AsyncQueryResult Objects\n- */\n-@Singleton\n-public class AsyncDbUtil {\n-\n-\tprivate Elide elide;\n-\tprivate static AsyncDbUtil asyncUtil;\n-\n-    protected static AsyncDbUtil getInstance(Elide elide) {\n-        if (asyncUtil == null) {\n-            synchronized (AsyncDbUtil.class) {\n-                asyncUtil = new AsyncDbUtil(elide);\n-            }\n-        }\n-        return asyncUtil;\n-      }\n-\n-\tprotected AsyncDbUtil(Elide elide) {\n-        this.elide = elide;\n-\t}\n-\n-    /**\n-     * This method updates the model for AsyncQuery with passed value.\n-     * @param updatedAttribute Attribute from asyncQuery which needs to be updated\n-     * @param asyncQueryId Unique UUID for the AsyncQuery Object\n-     * @throws IOException IOException from DataStoreTransaction\n-     * @return AsyncQuery Object\n-     */\n-    protected AsyncQuery updateAsyncQuery(Object updatedAttribute, UUID asyncQueryId) throws IOException {\n-        DataStoreTransaction tx = elide.getDataStore().beginTransaction();\n-        EntityProjection asyncQueryCollection = EntityProjection.builder()\n-            .type(AsyncQuery.class)\n-            .build();\n-        RequestScope scope = new RequestScope(null, null, tx, null, null, elide.getElideSettings());\n-        AsyncQuery query = (AsyncQuery) tx.loadObject(asyncQueryCollection, asyncQueryId, scope);\n-        if (updatedAttribute.getClass().getSimpleName().equals(\"QueryStatus\")) {\n-            query.setStatus((QueryStatus) updatedAttribute);\n-        }\n-        else if (updatedAttribute.getClass().getSimpleName().equals(\"AsyncQueryResult\")) {\n-            query.setResult((AsyncQueryResult)updatedAttribute);\n-        }\n-        tx.save(query, scope);\n-        tx.commit(scope);\n-        tx.flush(scope);\n-        tx.close();\n-        return query;\n-    }\n-\n-    /**\n-     * This method persists the model for AsyncQueryResult\n-     * @param status ElideResponse status from AsyncQuery\n-     * @param responseBody ElideResponse responseBody from AsyncQuery\n-     * @param asyncQuery AsyncQuery object to be associated with the AsyncQueryResult object\n-     * @param asyncQueryId UUID of the AsyncQuery to be associated with the AsyncQueryResult object\n-     * @throws IOException IOException from DataStoreTransaction\n-     * @return AsyncQueryResult Object\n-     */\n-    protected AsyncQueryResult createAsyncQueryResult(Integer status, String responseBody, AsyncQuery asyncQuery, UUID asyncQueryId) throws IOException {\n-        DataStoreTransaction tx = elide.getDataStore().beginTransaction();\n-\n-        // Creating new RequestScope for Datastore transaction\n-        RequestScope scope = new RequestScope(null, null, tx, null, null, elide.getElideSettings());\n-\n-        AsyncQueryResult asyncQueryResult = new AsyncQueryResult();\n-        asyncQueryResult.setStatus(status);\n-        asyncQueryResult.setResponseBody(responseBody);\n-        asyncQueryResult.setContentLength(responseBody.length());\n-        asyncQueryResult.setId(asyncQueryId);\n-        asyncQueryResult.setQuery(asyncQuery);\n-        tx.createObject(asyncQueryResult, scope);\n-        tx.save(asyncQueryResult, scope);\n-        tx.commit(scope);\n-        tx.flush(scope);\n-        tx.close();\n-        return asyncQueryResult;\n-    }\n-\n-}\n"}}, {"oid": "8fce3fbcd65a9077442e8276620d677279b85eb5", "url": "https://github.com/yahoo/elide/commit/8fce3fbcd65a9077442e8276620d677279b85eb5", "message": "Remove unwanted params.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-02T16:39:42Z", "type": "commit"}, {"oid": "7058821b3ed64054ebb7c7206d52cd5f97d020b1", "url": "https://github.com/yahoo/elide/commit/7058821b3ed64054ebb7c7206d52cd5f97d020b1", "message": "Remove unwanted tabs.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-02T18:08:19Z", "type": "commit"}, {"oid": "3115fd5e638e4fcac072a00a248f89512ffd6e95", "url": "https://github.com/yahoo/elide/commit/3115fd5e638e4fcac072a00a248f89512ffd6e95", "message": "Updating order of modules.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-02T19:13:25Z", "type": "commit"}, {"oid": "9ea67160d2067eeddd5466139d0fb07613bcbbef", "url": "https://github.com/yahoo/elide/commit/9ea67160d2067eeddd5466139d0fb07613bcbbef", "message": "Adding cleanup sql.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-02T20:09:53Z", "type": "commit"}, {"oid": "eec27e6d1f0a0771d610caf71248b2448e9dae2a", "url": "https://github.com/yahoo/elide/commit/eec27e6d1f0a0771d610caf71248b2448e9dae2a", "message": "Adding delete logic.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-03T01:27:08Z", "type": "commit"}, {"oid": "c9eaf8bd3f741442d5676e5d6e60fae77dd1aee2", "url": "https://github.com/yahoo/elide/commit/c9eaf8bd3f741442d5676e5d6e60fae77dd1aee2", "message": "Adding query result retention.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-03T01:41:41Z", "type": "commit"}, {"oid": "eaf72d175442455711907a62ba78faac4c65251d", "url": "https://github.com/yahoo/elide/commit/eaf72d175442455711907a62ba78faac4c65251d", "message": "Resolving build error.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-03T17:50:17Z", "type": "commit"}, {"oid": "16874f7994bbd588e178190bfe806b9faa316595", "url": "https://github.com/yahoo/elide/commit/16874f7994bbd588e178190bfe806b9faa316595", "message": "Changing AsyncDbUtil to use Functional Interface\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-04T22:24:58Z", "type": "commit"}, {"oid": "f59dfd596bfb283132916ce1ca6bca0fe3cd04c1", "url": "https://github.com/yahoo/elide/commit/f59dfd596bfb283132916ce1ca6bca0fe3cd04c1", "message": "Removing sleep\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T01:41:22Z", "type": "commit"}, {"oid": "b93bece9f2fb0985684f52a49a7a7f9ba89ad3bc", "url": "https://github.com/yahoo/elide/commit/b93bece9f2fb0985684f52a49a7a7f9ba89ad3bc", "message": "Adding functional interface logic for executeInTransaction\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T06:33:42Z", "type": "commit"}, {"oid": "260ebee98d3c970c2022b2df4fe58a6626f30c17", "url": "https://github.com/yahoo/elide/commit/260ebee98d3c970c2022b2df4fe58a6626f30c17", "message": "Adding debug statements for AsyncDbUtil\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T07:01:11Z", "type": "commit"}, {"oid": "e8558c84c6d4fcf6aeca6d786802757d5c3bbad2", "url": "https://github.com/yahoo/elide/commit/e8558c84c6d4fcf6aeca6d786802757d5c3bbad2", "message": "Codacity errors, exception handling\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T17:15:13Z", "type": "commit"}, {"oid": "cdc11cf525aadba36eaf4e638f84da2933aa6380", "url": "https://github.com/yahoo/elide/commit/cdc11cf525aadba36eaf4e638f84da2933aa6380", "message": "Adding Async Entity Models\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T17:17:23Z", "type": "commit"}, {"oid": "9dd5e44fdf15abf4884e373e2e78d99c00282976", "url": "https://github.com/yahoo/elide/commit/9dd5e44fdf15abf4884e373e2e78d99c00282976", "message": "Adding async module and fixing parent pom version\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T17:17:23Z", "type": "commit"}, {"oid": "749eb3ad6aa59d66ace1bd33c1bd2cb65a59ef30", "url": "https://github.com/yahoo/elide/commit/749eb3ad6aa59d66ace1bd33c1bd2cb65a59ef30", "message": "Adding async service classes, security and cleanup services\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T17:17:23Z", "type": "commit"}, {"oid": "9e362f9d148dfbf6adce17b089dad821fc60d2b0", "url": "https://github.com/yahoo/elide/commit/9e362f9d148dfbf6adce17b089dad821fc60d2b0", "message": "Adding Copyright License Header to Async module classes\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T17:17:23Z", "type": "commit"}, {"oid": "7d991b72b662a24ccf68e7af36ea4a7063edaafa", "url": "https://github.com/yahoo/elide/commit/7d991b72b662a24ccf68e7af36ea4a7063edaafa", "message": "Using new request scope for datastore transactions\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T17:17:23Z", "type": "commit"}, {"oid": "72789cb76aba893163e95a980f5a2f32448ee308", "url": "https://github.com/yahoo/elide/commit/72789cb76aba893163e95a980f5a2f32448ee308", "message": "Remove thread sleep used in testing\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T17:17:23Z", "type": "commit"}, {"oid": "92a57364ba5b0c8dad63852f186398adcab90dd8", "url": "https://github.com/yahoo/elide/commit/92a57364ba5b0c8dad63852f186398adcab90dd8", "message": "Fixing based on code quality review from codacy\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T17:17:23Z", "type": "commit"}, {"oid": "d4e4941dd592d5a1cd823ab17567410895c1e25d", "url": "https://github.com/yahoo/elide/commit/d4e4941dd592d5a1cd823ab17567410895c1e25d", "message": " Fixing additional issues based on code quality review from codacy\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T17:17:23Z", "type": "commit"}, {"oid": "d2f0dadf431e37f7caf90340392f71e1a385757b", "url": "https://github.com/yahoo/elide/commit/d2f0dadf431e37f7caf90340392f71e1a385757b", "message": "Adding getter for AsyncQueryResult\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T17:17:23Z", "type": "commit"}, {"oid": "7763d5a8f524d4432542f77413d6c51bed670412", "url": "https://github.com/yahoo/elide/commit/7763d5a8f524d4432542f77413d6c51bed670412", "message": "Reformatting.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T17:17:23Z", "type": "commit"}, {"oid": "7055771a2b516eb434a7b4eecf493ffea4cb4702", "url": "https://github.com/yahoo/elide/commit/7055771a2b516eb434a7b4eecf493ffea4cb4702", "message": "Adding mappedBy.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T17:17:23Z", "type": "commit"}, {"oid": "76b8fd9955c80c70877447399beb33593a07d1a6", "url": "https://github.com/yahoo/elide/commit/76b8fd9955c80c70877447399beb33593a07d1a6", "message": "Fixing several review comments - pom, lombok, thread exec\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T17:17:23Z", "type": "commit"}, {"oid": "0c9e427d8e81871808703670b16c472ca851512d", "url": "https://github.com/yahoo/elide/commit/0c9e427d8e81871808703670b16c472ca851512d", "message": "Fixing codacity errors\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T17:17:23Z", "type": "commit"}, {"oid": "17318af1c0f1af3749d4f1c638b8f16eabd018b3", "url": "https://github.com/yahoo/elide/commit/17318af1c0f1af3749d4f1c638b8f16eabd018b3", "message": "Moving all the DB ORM logic to a utility class for Async\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T17:17:23Z", "type": "commit"}, {"oid": "510ec3c07ac159cc9688a6416686b33672895234", "url": "https://github.com/yahoo/elide/commit/510ec3c07ac159cc9688a6416686b33672895234", "message": "Remove dependency on number of hosts, delete permission, separate method for interrupttime calculation\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T17:17:24Z", "type": "commit"}, {"oid": "ada611df1d33adab5d052d0be4957a7fbb02b405", "url": "https://github.com/yahoo/elide/commit/ada611df1d33adab5d052d0be4957a7fbb02b405", "message": "Variable Naming convention.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T17:17:24Z", "type": "commit"}, {"oid": "46f15ef30db3c5d82ed3f7fb908a88af4e2d0180", "url": "https://github.com/yahoo/elide/commit/46f15ef30db3c5d82ed3f7fb908a88af4e2d0180", "message": "Variable Naming convention.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T17:17:24Z", "type": "commit"}, {"oid": "0b34181314a6a2b469b532ac920a2721a17e028b", "url": "https://github.com/yahoo/elide/commit/0b34181314a6a2b469b532ac920a2721a17e028b", "message": "Removing unwanted params.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T17:17:24Z", "type": "commit"}, {"oid": "34b462ea5792da7c318220860baedcf9c08420a8", "url": "https://github.com/yahoo/elide/commit/34b462ea5792da7c318220860baedcf9c08420a8", "message": "Making cleaner a separate service.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T17:17:24Z", "type": "commit"}, {"oid": "e6210ad843e496fbcfd2956456438150b251e361", "url": "https://github.com/yahoo/elide/commit/e6210ad843e496fbcfd2956456438150b251e361", "message": "Remove unwanted params.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T17:17:24Z", "type": "commit"}, {"oid": "f0b2dae750571b17ae9bcfe196338c92cf18d845", "url": "https://github.com/yahoo/elide/commit/f0b2dae750571b17ae9bcfe196338c92cf18d845", "message": "Remove unwanted tabs.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T17:17:24Z", "type": "commit"}, {"oid": "0ea4b5651a395df665c49195c4a21758e0bd4f4c", "url": "https://github.com/yahoo/elide/commit/0ea4b5651a395df665c49195c4a21758e0bd4f4c", "message": "Updating order of modules.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T17:17:24Z", "type": "commit"}, {"oid": "52ab19cbb3113b93a0813b997489d9e1e21086f2", "url": "https://github.com/yahoo/elide/commit/52ab19cbb3113b93a0813b997489d9e1e21086f2", "message": "Adding cleanup sql.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T17:17:24Z", "type": "commit"}, {"oid": "dd1c7f605bcc055abda15c647aa56d4d05ed335a", "url": "https://github.com/yahoo/elide/commit/dd1c7f605bcc055abda15c647aa56d4d05ed335a", "message": "Adding delete logic.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T17:17:24Z", "type": "commit"}, {"oid": "5c2d50741e25373745503021d73308699ccd2307", "url": "https://github.com/yahoo/elide/commit/5c2d50741e25373745503021d73308699ccd2307", "message": "Adding query result retention.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T17:17:24Z", "type": "commit"}, {"oid": "dfbf21f26d1c1b63ac31eb4ff0977112d82033e1", "url": "https://github.com/yahoo/elide/commit/dfbf21f26d1c1b63ac31eb4ff0977112d82033e1", "message": "Resolving build error.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T17:17:24Z", "type": "commit"}, {"oid": "8dc8de6b8f0022533f9e11a679c643d0e873ec2e", "url": "https://github.com/yahoo/elide/commit/8dc8de6b8f0022533f9e11a679c643d0e873ec2e", "message": "Changing AsyncDbUtil to use Functional Interface\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T17:17:24Z", "type": "commit"}, {"oid": "fd3e514cb9e695eca9d3b34b6c4b8f2e078a7247", "url": "https://github.com/yahoo/elide/commit/fd3e514cb9e695eca9d3b34b6c4b8f2e078a7247", "message": "Removing sleep\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T17:17:24Z", "type": "commit"}, {"oid": "cd4f07d650c56391475e1f64cb4cf1b0f2b9dff2", "url": "https://github.com/yahoo/elide/commit/cd4f07d650c56391475e1f64cb4cf1b0f2b9dff2", "message": "Adding functional interface logic for executeInTransaction\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T17:17:24Z", "type": "commit"}, {"oid": "e009a8aa5ae0ac9f03b57736c09d7764751ab277", "url": "https://github.com/yahoo/elide/commit/e009a8aa5ae0ac9f03b57736c09d7764751ab277", "message": "Adding debug statements for AsyncDbUtil\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T17:17:24Z", "type": "commit"}, {"oid": "dbe6bf21ac7329dcc47492b39a270f25016be3f3", "url": "https://github.com/yahoo/elide/commit/dbe6bf21ac7329dcc47492b39a270f25016be3f3", "message": "Codacity errors, exception handling\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T17:17:24Z", "type": "commit"}, {"oid": "1845f8caa84de070025956fffcca5e11bf741acd", "url": "https://github.com/yahoo/elide/commit/1845f8caa84de070025956fffcca5e11bf741acd", "message": "Rebased with elide-5.x and changed User principal logic\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T17:27:13Z", "type": "commit"}, {"oid": "57568baad2400c6e6e0d7e613d9aee938db7d1fc", "url": "https://github.com/yahoo/elide/commit/57568baad2400c6e6e0d7e613d9aee938db7d1fc", "message": "Resolving merge conflicts\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T17:31:09Z", "type": "commit"}, {"oid": "6fd953f1b05ae74dd99ea777b39f3e1a492edb56", "url": "https://github.com/yahoo/elide/commit/6fd953f1b05ae74dd99ea777b39f3e1a492edb56", "message": "Rebase\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T20:02:45Z", "type": "commit"}, {"oid": "20e4560272b7f0dc095e7f6f9212886720e54efb", "url": "https://github.com/yahoo/elide/commit/20e4560272b7f0dc095e7f6f9212886720e54efb", "message": "Changing CleanerThread to use ExecuteInTransaction\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T22:02:44Z", "type": "commit"}, {"oid": "8c16d9aca3f5420ad96b10e5191afb40c7d3f50e", "url": "https://github.com/yahoo/elide/commit/8c16d9aca3f5420ad96b10e5191afb40c7d3f50e", "message": "Removing unused imports\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-05T22:13:31Z", "type": "commit"}, {"oid": "274032d64e41d7f54ad1946a0553d2afb2587e0e", "url": "https://github.com/yahoo/elide/commit/274032d64e41d7f54ad1946a0553d2afb2587e0e", "message": "Delete Method changes\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-06T15:16:10Z", "type": "commit"}, {"oid": "2d59b4dd6e76642c2df578175859e845027ca549", "url": "https://github.com/yahoo/elide/commit/2d59b4dd6e76642c2df578175859e845027ca549", "message": "Overriding hashCode and equals\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-06T16:27:35Z", "type": "commit"}, {"oid": "f4fdcf277bd434ac388b28a36dae9167804d4895", "url": "https://github.com/yahoo/elide/commit/f4fdcf277bd434ac388b28a36dae9167804d4895", "message": "Overriding hashCode and equals\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-06T18:41:36Z", "type": "commit"}, {"oid": "51a42a5ddfe6a666d6d52e11b1229a313ea89b02", "url": "https://github.com/yahoo/elide/commit/51a42a5ddfe6a666d6d52e11b1229a313ea89b02", "message": "Removing unused method\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-06T18:42:56Z", "type": "commit"}, {"oid": "bfb921004e713b2a0e0daf298761ac14cf52fcfc", "url": "https://github.com/yahoo/elide/commit/bfb921004e713b2a0e0daf298761ac14cf52fcfc", "message": "Changing response logic for AsyncQuery\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-06T20:55:33Z", "type": "commit"}, {"oid": "acf3f94963a1111820a6e5a69b907c6367fb203c", "url": "https://github.com/yahoo/elide/commit/acf3f94963a1111820a6e5a69b907c6367fb203c", "message": "Merge branch 'elide-5.x-async' of github.com:yahoo/elide into elide-5.x-async", "committedDate": "2020-03-06T23:19:17Z", "type": "commit"}, {"oid": "63fc19ab13d7882666c47bbd0e1be53338e09f84", "url": "https://github.com/yahoo/elide/commit/63fc19ab13d7882666c47bbd0e1be53338e09f84", "message": "Adding return to delete method", "committedDate": "2020-03-09T19:43:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3NDI4NA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389874284", "bodyText": "Can we move this inside the try block?  Elide does something like:\n        try (DataStoreTransaction tx = transaction.get()) {", "author": "aklish", "createdAt": "2020-03-09T18:16:59Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncDbUtil.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.io.IOException;\n+import java.util.UUID;\n+\n+import javax.inject.Singleton;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.core.DataStore;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.jsonapi.models.JsonApiDocument;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Utility class which uses the elide datastore to modify, update and create\n+ * AsyncQuery and AsyncQueryResult Objects\n+ */\n+@Singleton\n+@Slf4j\n+public class AsyncDbUtil {\n+\n+    private Elide elide;\n+    private static AsyncDbUtil asyncUtil;\n+    private DataStore dataStore;\n+\n+    protected static AsyncDbUtil getInstance(Elide elide) {\n+        if (asyncUtil == null) {\n+            synchronized (AsyncDbUtil.class) {\n+                asyncUtil = new AsyncDbUtil(elide);\n+            }\n+        }\n+        return asyncUtil;\n+      }\n+\n+    protected AsyncDbUtil(Elide elide) {\n+        this.elide = elide;\n+        this.dataStore = elide.getDataStore();\n+    }\n+\n+    /**\n+     * This method updates the model for AsyncQuery with passed value.\n+     * @param asyncQueryId Unique UUID for the AsyncQuery Object\n+     * @param updateFunction Functional interface for updating AsyncQuery Object\n+     * @return AsyncQuery Object\n+     */\n+    protected AsyncQuery updateAsyncQuery(UUID asyncQueryId, UpdateQuery updateFunction) {\n+        log.debug(\"AsyncDbUtil updateAsyncQuery\");\n+        AsyncQuery queryObj = (AsyncQuery) executeInTransaction(dataStore, (tx, scope) -> {\n+            EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                    .type(AsyncQuery.class)\n+                    .build();\n+            AsyncQuery query = (AsyncQuery) tx.loadObject(asyncQueryCollection, asyncQueryId, scope);\n+            updateFunction.update(query);\n+            tx.save(query, scope);\n+            return query;\n+        });\n+        return queryObj;\n+    }\n+\n+    /**\n+     * This method deletes the AsyncQueryResult and AsyncQueryResult object from database.\n+     * @param asyncQueryResultId Unique UUID for the AsyncQuery Object\n+     */\n+    protected void deleteAsyncQueryAndResult(UUID asyncQueryResultId) {\n+        log.debug(\"AsyncDbUtil deleteAsyncQueryResult\");\n+        executeInTransaction(dataStore, (tx, scope) -> {\n+            EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                    .type(AsyncQuery.class)\n+                    .build();\n+            AsyncQuery query = (AsyncQuery) tx.loadObject(asyncQueryCollection, asyncQueryResultId, scope);\n+            AsyncQueryResult queryResult = query.getResult();\n+            if(queryResult != null) {\n+                tx.delete(queryResult, scope);\n+            }\n+            if(query != null) {\n+                tx.delete(query, scope);\n+            }\n+            return queryResult;\n+        });\n+    }\n+\n+    /**\n+     * This method persists the model for AsyncQueryResult\n+     * @param status ElideResponse status from AsyncQuery\n+     * @param responseBody ElideResponse responseBody from AsyncQuery\n+     * @param asyncQuery AsyncQuery object to be associated with the AsyncQueryResult object\n+     * @param asyncQueryId UUID of the AsyncQuery to be associated with the AsyncQueryResult object\n+     * @return AsyncQueryResult Object\n+     */\n+    protected AsyncQueryResult createAsyncQueryResult(Integer status, String responseBody, AsyncQuery asyncQuery, UUID asyncQueryId) {\n+        log.debug(\"AsyncDbUtil createAsyncQueryResult\");\n+        AsyncQueryResult queryResultObj = (AsyncQueryResult) executeInTransaction(dataStore, (tx, scope) -> {\n+            AsyncQueryResult asyncQueryResult = new AsyncQueryResult();\n+            asyncQueryResult.setStatus(status);\n+            asyncQueryResult.setResponseBody(responseBody);\n+            asyncQueryResult.setContentLength(responseBody.length());\n+            asyncQueryResult.setId(asyncQueryId);\n+            asyncQueryResult.setQuery(asyncQuery);\n+            tx.createObject(asyncQueryResult, scope);\n+            return asyncQueryResult;\n+        });\n+        return queryResultObj;\n+    }\n+\n+    /**\n+     * This method creates a transaction from the datastore, performs the DB action using\n+     * a generic functional interface and closes the transaction.\n+     * @param dataStore Elide datastore retrieved from Elide object\n+     * @param action Functional interface to perform DB action\n+     * @return Object Returns Entity Object (AsyncQueryResult or AsyncResult)\n+     */\n+    public Object executeInTransaction(DataStore dataStore, Transactional action) {\n+        log.debug(\"executeInTransaction\");\n+        DataStoreTransaction tx = dataStore.beginTransaction();", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncDbUtil.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncDbUtil.java\ndeleted file mode 100644\nindex d73264f92..000000000\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncDbUtil.java\n+++ /dev/null\n\n@@ -1,148 +0,0 @@\n-/*\n- * Copyright 2020, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.async.service;\n-\n-import java.io.IOException;\n-import java.util.UUID;\n-\n-import javax.inject.Singleton;\n-import javax.ws.rs.core.MultivaluedHashMap;\n-import javax.ws.rs.core.MultivaluedMap;\n-\n-import com.yahoo.elide.Elide;\n-import com.yahoo.elide.async.models.AsyncQuery;\n-import com.yahoo.elide.async.models.AsyncQueryResult;\n-import com.yahoo.elide.core.DataStore;\n-import com.yahoo.elide.core.DataStoreTransaction;\n-import com.yahoo.elide.core.RequestScope;\n-import com.yahoo.elide.jsonapi.models.JsonApiDocument;\n-import com.yahoo.elide.request.EntityProjection;\n-\n-import lombok.extern.slf4j.Slf4j;\n-\n-/**\n- * Utility class which uses the elide datastore to modify, update and create\n- * AsyncQuery and AsyncQueryResult Objects\n- */\n-@Singleton\n-@Slf4j\n-public class AsyncDbUtil {\n-\n-    private Elide elide;\n-    private static AsyncDbUtil asyncUtil;\n-    private DataStore dataStore;\n-\n-    protected static AsyncDbUtil getInstance(Elide elide) {\n-        if (asyncUtil == null) {\n-            synchronized (AsyncDbUtil.class) {\n-                asyncUtil = new AsyncDbUtil(elide);\n-            }\n-        }\n-        return asyncUtil;\n-      }\n-\n-    protected AsyncDbUtil(Elide elide) {\n-        this.elide = elide;\n-        this.dataStore = elide.getDataStore();\n-    }\n-\n-    /**\n-     * This method updates the model for AsyncQuery with passed value.\n-     * @param asyncQueryId Unique UUID for the AsyncQuery Object\n-     * @param updateFunction Functional interface for updating AsyncQuery Object\n-     * @return AsyncQuery Object\n-     */\n-    protected AsyncQuery updateAsyncQuery(UUID asyncQueryId, UpdateQuery updateFunction) {\n-        log.debug(\"AsyncDbUtil updateAsyncQuery\");\n-        AsyncQuery queryObj = (AsyncQuery) executeInTransaction(dataStore, (tx, scope) -> {\n-            EntityProjection asyncQueryCollection = EntityProjection.builder()\n-                    .type(AsyncQuery.class)\n-                    .build();\n-            AsyncQuery query = (AsyncQuery) tx.loadObject(asyncQueryCollection, asyncQueryId, scope);\n-            updateFunction.update(query);\n-            tx.save(query, scope);\n-            return query;\n-        });\n-        return queryObj;\n-    }\n-\n-    /**\n-     * This method deletes the AsyncQueryResult and AsyncQueryResult object from database.\n-     * @param asyncQueryResultId Unique UUID for the AsyncQuery Object\n-     */\n-    protected void deleteAsyncQueryAndResult(UUID asyncQueryResultId) {\n-        log.debug(\"AsyncDbUtil deleteAsyncQueryResult\");\n-        executeInTransaction(dataStore, (tx, scope) -> {\n-            EntityProjection asyncQueryCollection = EntityProjection.builder()\n-                    .type(AsyncQuery.class)\n-                    .build();\n-            AsyncQuery query = (AsyncQuery) tx.loadObject(asyncQueryCollection, asyncQueryResultId, scope);\n-            AsyncQueryResult queryResult = query.getResult();\n-            if(queryResult != null) {\n-                tx.delete(queryResult, scope);\n-            }\n-            if(query != null) {\n-                tx.delete(query, scope);\n-            }\n-            return queryResult;\n-        });\n-    }\n-\n-    /**\n-     * This method persists the model for AsyncQueryResult\n-     * @param status ElideResponse status from AsyncQuery\n-     * @param responseBody ElideResponse responseBody from AsyncQuery\n-     * @param asyncQuery AsyncQuery object to be associated with the AsyncQueryResult object\n-     * @param asyncQueryId UUID of the AsyncQuery to be associated with the AsyncQueryResult object\n-     * @return AsyncQueryResult Object\n-     */\n-    protected AsyncQueryResult createAsyncQueryResult(Integer status, String responseBody, AsyncQuery asyncQuery, UUID asyncQueryId) {\n-        log.debug(\"AsyncDbUtil createAsyncQueryResult\");\n-        AsyncQueryResult queryResultObj = (AsyncQueryResult) executeInTransaction(dataStore, (tx, scope) -> {\n-            AsyncQueryResult asyncQueryResult = new AsyncQueryResult();\n-            asyncQueryResult.setStatus(status);\n-            asyncQueryResult.setResponseBody(responseBody);\n-            asyncQueryResult.setContentLength(responseBody.length());\n-            asyncQueryResult.setId(asyncQueryId);\n-            asyncQueryResult.setQuery(asyncQuery);\n-            tx.createObject(asyncQueryResult, scope);\n-            return asyncQueryResult;\n-        });\n-        return queryResultObj;\n-    }\n-\n-    /**\n-     * This method creates a transaction from the datastore, performs the DB action using\n-     * a generic functional interface and closes the transaction.\n-     * @param dataStore Elide datastore retrieved from Elide object\n-     * @param action Functional interface to perform DB action\n-     * @return Object Returns Entity Object (AsyncQueryResult or AsyncResult)\n-     */\n-    public Object executeInTransaction(DataStore dataStore, Transactional action) {\n-        log.debug(\"executeInTransaction\");\n-        DataStoreTransaction tx = dataStore.beginTransaction();\n-        JsonApiDocument jsonApiDoc = new JsonApiDocument();\n-        MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<String, String>();\n-        RequestScope scope = new RequestScope(\"query\", jsonApiDoc, tx, null, queryParams, elide.getElideSettings());\n-        Object result = null;\n-        try {\n-            result = action.execute(tx, scope);\n-            tx.commit(scope);\n-            tx.flush(scope);\n-        } catch (Exception e) {\n-            log.error(\"Exception: {}\", e.getMessage());\n-        } finally {\n-            // Finally block to close a transaction incase of DB Exceptions\n-            try {\n-                tx.close();\n-            } catch (IOException e) {\n-                log.error(\"IOException: {}\", e.getMessage());\n-            }\n-        }\n-        return result;\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3NTY2Mg==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389875662", "bodyText": "You could simplify this by changing the ORM data model for AsyncQuery to cascade deletes to the AsyncQueryResult.  Then you can simply delete the query here.\nCheck out the @Cascade annotation.", "author": "aklish", "createdAt": "2020-03-09T18:19:33Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncDbUtil.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.io.IOException;\n+import java.util.UUID;\n+\n+import javax.inject.Singleton;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.core.DataStore;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.jsonapi.models.JsonApiDocument;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Utility class which uses the elide datastore to modify, update and create\n+ * AsyncQuery and AsyncQueryResult Objects\n+ */\n+@Singleton\n+@Slf4j\n+public class AsyncDbUtil {\n+\n+    private Elide elide;\n+    private static AsyncDbUtil asyncUtil;\n+    private DataStore dataStore;\n+\n+    protected static AsyncDbUtil getInstance(Elide elide) {\n+        if (asyncUtil == null) {\n+            synchronized (AsyncDbUtil.class) {\n+                asyncUtil = new AsyncDbUtil(elide);\n+            }\n+        }\n+        return asyncUtil;\n+      }\n+\n+    protected AsyncDbUtil(Elide elide) {\n+        this.elide = elide;\n+        this.dataStore = elide.getDataStore();\n+    }\n+\n+    /**\n+     * This method updates the model for AsyncQuery with passed value.\n+     * @param asyncQueryId Unique UUID for the AsyncQuery Object\n+     * @param updateFunction Functional interface for updating AsyncQuery Object\n+     * @return AsyncQuery Object\n+     */\n+    protected AsyncQuery updateAsyncQuery(UUID asyncQueryId, UpdateQuery updateFunction) {\n+        log.debug(\"AsyncDbUtil updateAsyncQuery\");\n+        AsyncQuery queryObj = (AsyncQuery) executeInTransaction(dataStore, (tx, scope) -> {\n+            EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                    .type(AsyncQuery.class)\n+                    .build();\n+            AsyncQuery query = (AsyncQuery) tx.loadObject(asyncQueryCollection, asyncQueryId, scope);\n+            updateFunction.update(query);\n+            tx.save(query, scope);\n+            return query;\n+        });\n+        return queryObj;\n+    }\n+\n+    /**\n+     * This method deletes the AsyncQueryResult and AsyncQueryResult object from database.\n+     * @param asyncQueryResultId Unique UUID for the AsyncQuery Object\n+     */\n+    protected void deleteAsyncQueryAndResult(UUID asyncQueryResultId) {\n+        log.debug(\"AsyncDbUtil deleteAsyncQueryResult\");\n+        executeInTransaction(dataStore, (tx, scope) -> {\n+            EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                    .type(AsyncQuery.class)\n+                    .build();\n+            AsyncQuery query = (AsyncQuery) tx.loadObject(asyncQueryCollection, asyncQueryResultId, scope);\n+            AsyncQueryResult queryResult = query.getResult();\n+            if(queryResult != null) {", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncDbUtil.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncDbUtil.java\ndeleted file mode 100644\nindex d73264f92..000000000\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncDbUtil.java\n+++ /dev/null\n\n@@ -1,148 +0,0 @@\n-/*\n- * Copyright 2020, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.async.service;\n-\n-import java.io.IOException;\n-import java.util.UUID;\n-\n-import javax.inject.Singleton;\n-import javax.ws.rs.core.MultivaluedHashMap;\n-import javax.ws.rs.core.MultivaluedMap;\n-\n-import com.yahoo.elide.Elide;\n-import com.yahoo.elide.async.models.AsyncQuery;\n-import com.yahoo.elide.async.models.AsyncQueryResult;\n-import com.yahoo.elide.core.DataStore;\n-import com.yahoo.elide.core.DataStoreTransaction;\n-import com.yahoo.elide.core.RequestScope;\n-import com.yahoo.elide.jsonapi.models.JsonApiDocument;\n-import com.yahoo.elide.request.EntityProjection;\n-\n-import lombok.extern.slf4j.Slf4j;\n-\n-/**\n- * Utility class which uses the elide datastore to modify, update and create\n- * AsyncQuery and AsyncQueryResult Objects\n- */\n-@Singleton\n-@Slf4j\n-public class AsyncDbUtil {\n-\n-    private Elide elide;\n-    private static AsyncDbUtil asyncUtil;\n-    private DataStore dataStore;\n-\n-    protected static AsyncDbUtil getInstance(Elide elide) {\n-        if (asyncUtil == null) {\n-            synchronized (AsyncDbUtil.class) {\n-                asyncUtil = new AsyncDbUtil(elide);\n-            }\n-        }\n-        return asyncUtil;\n-      }\n-\n-    protected AsyncDbUtil(Elide elide) {\n-        this.elide = elide;\n-        this.dataStore = elide.getDataStore();\n-    }\n-\n-    /**\n-     * This method updates the model for AsyncQuery with passed value.\n-     * @param asyncQueryId Unique UUID for the AsyncQuery Object\n-     * @param updateFunction Functional interface for updating AsyncQuery Object\n-     * @return AsyncQuery Object\n-     */\n-    protected AsyncQuery updateAsyncQuery(UUID asyncQueryId, UpdateQuery updateFunction) {\n-        log.debug(\"AsyncDbUtil updateAsyncQuery\");\n-        AsyncQuery queryObj = (AsyncQuery) executeInTransaction(dataStore, (tx, scope) -> {\n-            EntityProjection asyncQueryCollection = EntityProjection.builder()\n-                    .type(AsyncQuery.class)\n-                    .build();\n-            AsyncQuery query = (AsyncQuery) tx.loadObject(asyncQueryCollection, asyncQueryId, scope);\n-            updateFunction.update(query);\n-            tx.save(query, scope);\n-            return query;\n-        });\n-        return queryObj;\n-    }\n-\n-    /**\n-     * This method deletes the AsyncQueryResult and AsyncQueryResult object from database.\n-     * @param asyncQueryResultId Unique UUID for the AsyncQuery Object\n-     */\n-    protected void deleteAsyncQueryAndResult(UUID asyncQueryResultId) {\n-        log.debug(\"AsyncDbUtil deleteAsyncQueryResult\");\n-        executeInTransaction(dataStore, (tx, scope) -> {\n-            EntityProjection asyncQueryCollection = EntityProjection.builder()\n-                    .type(AsyncQuery.class)\n-                    .build();\n-            AsyncQuery query = (AsyncQuery) tx.loadObject(asyncQueryCollection, asyncQueryResultId, scope);\n-            AsyncQueryResult queryResult = query.getResult();\n-            if(queryResult != null) {\n-                tx.delete(queryResult, scope);\n-            }\n-            if(query != null) {\n-                tx.delete(query, scope);\n-            }\n-            return queryResult;\n-        });\n-    }\n-\n-    /**\n-     * This method persists the model for AsyncQueryResult\n-     * @param status ElideResponse status from AsyncQuery\n-     * @param responseBody ElideResponse responseBody from AsyncQuery\n-     * @param asyncQuery AsyncQuery object to be associated with the AsyncQueryResult object\n-     * @param asyncQueryId UUID of the AsyncQuery to be associated with the AsyncQueryResult object\n-     * @return AsyncQueryResult Object\n-     */\n-    protected AsyncQueryResult createAsyncQueryResult(Integer status, String responseBody, AsyncQuery asyncQuery, UUID asyncQueryId) {\n-        log.debug(\"AsyncDbUtil createAsyncQueryResult\");\n-        AsyncQueryResult queryResultObj = (AsyncQueryResult) executeInTransaction(dataStore, (tx, scope) -> {\n-            AsyncQueryResult asyncQueryResult = new AsyncQueryResult();\n-            asyncQueryResult.setStatus(status);\n-            asyncQueryResult.setResponseBody(responseBody);\n-            asyncQueryResult.setContentLength(responseBody.length());\n-            asyncQueryResult.setId(asyncQueryId);\n-            asyncQueryResult.setQuery(asyncQuery);\n-            tx.createObject(asyncQueryResult, scope);\n-            return asyncQueryResult;\n-        });\n-        return queryResultObj;\n-    }\n-\n-    /**\n-     * This method creates a transaction from the datastore, performs the DB action using\n-     * a generic functional interface and closes the transaction.\n-     * @param dataStore Elide datastore retrieved from Elide object\n-     * @param action Functional interface to perform DB action\n-     * @return Object Returns Entity Object (AsyncQueryResult or AsyncResult)\n-     */\n-    public Object executeInTransaction(DataStore dataStore, Transactional action) {\n-        log.debug(\"executeInTransaction\");\n-        DataStoreTransaction tx = dataStore.beginTransaction();\n-        JsonApiDocument jsonApiDoc = new JsonApiDocument();\n-        MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<String, String>();\n-        RequestScope scope = new RequestScope(\"query\", jsonApiDoc, tx, null, queryParams, elide.getElideSettings());\n-        Object result = null;\n-        try {\n-            result = action.execute(tx, scope);\n-            tx.commit(scope);\n-            tx.flush(scope);\n-        } catch (Exception e) {\n-            log.error(\"Exception: {}\", e.getMessage());\n-        } finally {\n-            // Finally block to close a transaction incase of DB Exceptions\n-            try {\n-                tx.close();\n-            } catch (IOException e) {\n-                log.error(\"IOException: {}\", e.getMessage());\n-            }\n-        }\n-        return result;\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3ODcxNQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389878715", "bodyText": "Copyright is needed.", "author": "aklish", "createdAt": "2020-03-09T18:25:13Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/UpdateQuery.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.yahoo.elide.async.service;", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3OTAyMA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389879020", "bodyText": "Javadoc is missing.", "author": "aklish", "createdAt": "2020-03-09T18:25:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3ODcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/UpdateQuery.java b/elide-async/src/main/java/com/yahoo/elide/async/service/UpdateQuery.java\nindex 6a6e47607..9e9b68e42 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/UpdateQuery.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/UpdateQuery.java\n\n@@ -1,7 +1,15 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n package com.yahoo.elide.async.service;\n \n import com.yahoo.elide.async.models.AsyncQuery;\n \n+/**\n+ * Function which will be invoked for updating elide async query.\n+ */\n @FunctionalInterface\n public interface UpdateQuery {\n     public void update(AsyncQuery query);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3ODgxMQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389878811", "bodyText": "Copyright is needed as is javadoc for the class", "author": "aklish", "createdAt": "2020-03-09T18:25:27Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/Transactional.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package com.yahoo.elide.async.service;", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/Transactional.java b/elide-async/src/main/java/com/yahoo/elide/async/service/Transactional.java\nindex 10e262a30..8360316a7 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/Transactional.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/Transactional.java\n\n@@ -1,8 +1,16 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n package com.yahoo.elide.async.service;\n \n import com.yahoo.elide.core.DataStoreTransaction;\n import com.yahoo.elide.core.RequestScope;\n \n+/**\n+ * Function which will be invoked for executing elide async transactions.\n+ */\n @FunctionalInterface\n public interface Transactional {\n     public Object execute(DataStoreTransaction tx, RequestScope scope);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwMDA4Mg==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389900082", "bodyText": "The principalName should be set by a lifecycle (OnCreatePreCommit) hook automatically rather than having the user provide it in the API request.", "author": "aklish", "createdAt": "2020-03-09T19:04:48Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.models;\n+\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.inject.Inject;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Transient;\n+\n+import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.OnCreatePostCommit;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.async.service.AsyncExecutorService;\n+import com.yahoo.elide.core.RequestScope;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Model for Async Query\n+ */\n+@Entity\n+@Include(type = \"query\", rootLevel = true)\n+@ReadPermission(expression = \"Principal is Owner\")\n+@UpdatePermission(expression = \"Prefab.Role.None\")\n+@DeletePermission(expression = \"Prefab.Role.None\")\n+@Slf4j\n+@Data\n+public class AsyncQuery implements PrincipalOwned {\n+    @Id\n+    private UUID id; //Can be generated or provided.\n+\n+    //Extracted from the Principal object\n+    private String principalName;", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM2NTExMQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r390365111", "bodyText": "Had to use OnCreatePreSecurity as using OnCreatePreCommit threw Null Pointer Exception.", "author": "moizarafat", "createdAt": "2020-03-10T14:42:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwMDA4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\nindex c7e3fc699..e3b6394fc 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\n\n@@ -5,45 +5,40 @@\n  */\n package com.yahoo.elide.async.models;\n \n-import java.util.Date;\n import java.util.UUID;\n \n import javax.inject.Inject;\n+import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.OneToOne;\n-import javax.persistence.PrePersist;\n-import javax.persistence.PreUpdate;\n import javax.persistence.Transient;\n \n import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Exclude;\n import com.yahoo.elide.annotation.Include;\n import com.yahoo.elide.annotation.OnCreatePostCommit;\n+import com.yahoo.elide.annotation.OnCreatePreSecurity;\n import com.yahoo.elide.annotation.ReadPermission;\n import com.yahoo.elide.annotation.UpdatePermission;\n import com.yahoo.elide.async.service.AsyncExecutorService;\n import com.yahoo.elide.core.RequestScope;\n \n import lombok.Data;\n-import lombok.extern.slf4j.Slf4j;\n \n /**\n  * Model for Async Query\n  */\n @Entity\n-@Include(type = \"query\", rootLevel = true)\n+@Include(type = \"asyncQuery\", rootLevel = true)\n @ReadPermission(expression = \"Principal is Owner\")\n @UpdatePermission(expression = \"Prefab.Role.None\")\n @DeletePermission(expression = \"Prefab.Role.None\")\n-@Slf4j\n @Data\n-public class AsyncQuery implements PrincipalOwned {\n+public class AsyncQuery extends AsyncBase implements PrincipalOwned {\n     @Id\n     private UUID id; //Can be generated or provided.\n \n-    //Extracted from the Principal object\n-    private String principalName;\n-\n     private String query;  //JSON-API PATH or GraphQL payload.\n \n     private QueryType queryType; //GRAPHQL, JSONAPI\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwMjkxMQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389902911", "bodyText": "An alternative way to generate dates is:\n    @Generated(GenerationTime.INSERT)\n    @Column(updatable = false, insertable = false, columnDefinition = \"timestamp default current_timestamp\")\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date createdOn;\n\n    @Generated(GenerationTime.ALWAYS)\n    @Column(updatable = false, insertable = false, columnDefinition = \"timestamp default current_timestamp\")\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date updatedOn;", "author": "aklish", "createdAt": "2020-03-09T19:10:11Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.models;\n+\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.inject.Inject;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Transient;\n+\n+import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.OnCreatePostCommit;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.async.service.AsyncExecutorService;\n+import com.yahoo.elide.core.RequestScope;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Model for Async Query\n+ */\n+@Entity\n+@Include(type = \"query\", rootLevel = true)\n+@ReadPermission(expression = \"Principal is Owner\")\n+@UpdatePermission(expression = \"Prefab.Role.None\")\n+@DeletePermission(expression = \"Prefab.Role.None\")\n+@Slf4j\n+@Data\n+public class AsyncQuery implements PrincipalOwned {\n+    @Id\n+    private UUID id; //Can be generated or provided.\n+\n+    //Extracted from the Principal object\n+    private String principalName;\n+\n+    private String query;  //JSON-API PATH or GraphQL payload.\n+\n+    private QueryType queryType; //GRAPHQL, JSONAPI\n+\n+    @UpdatePermission(expression = \"Principal is Owner AND value is Cancelled\")\n+    private QueryStatus status;\n+\n+    @OneToOne(mappedBy = \"query\")\n+    private AsyncQueryResult result;\n+\n+    private Date createdOn;", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1OTg5Mw==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389959893", "bodyText": "As discussed, we will keep as is since @Generated is hibernate annotations.", "author": "moizarafat", "createdAt": "2020-03-09T21:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwMjkxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\nindex c7e3fc699..e3b6394fc 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\n\n@@ -5,45 +5,40 @@\n  */\n package com.yahoo.elide.async.models;\n \n-import java.util.Date;\n import java.util.UUID;\n \n import javax.inject.Inject;\n+import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.OneToOne;\n-import javax.persistence.PrePersist;\n-import javax.persistence.PreUpdate;\n import javax.persistence.Transient;\n \n import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Exclude;\n import com.yahoo.elide.annotation.Include;\n import com.yahoo.elide.annotation.OnCreatePostCommit;\n+import com.yahoo.elide.annotation.OnCreatePreSecurity;\n import com.yahoo.elide.annotation.ReadPermission;\n import com.yahoo.elide.annotation.UpdatePermission;\n import com.yahoo.elide.async.service.AsyncExecutorService;\n import com.yahoo.elide.core.RequestScope;\n \n import lombok.Data;\n-import lombok.extern.slf4j.Slf4j;\n \n /**\n  * Model for Async Query\n  */\n @Entity\n-@Include(type = \"query\", rootLevel = true)\n+@Include(type = \"asyncQuery\", rootLevel = true)\n @ReadPermission(expression = \"Principal is Owner\")\n @UpdatePermission(expression = \"Prefab.Role.None\")\n @DeletePermission(expression = \"Prefab.Role.None\")\n-@Slf4j\n @Data\n-public class AsyncQuery implements PrincipalOwned {\n+public class AsyncQuery extends AsyncBase implements PrincipalOwned {\n     @Id\n     private UUID id; //Can be generated or provided.\n \n-    //Extracted from the Principal object\n-    private String principalName;\n-\n     private String query;  //JSON-API PATH or GraphQL payload.\n \n     private QueryType queryType; //GRAPHQL, JSONAPI\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwMzUwMQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389903501", "bodyText": "The natural key needs to be persisted to get hashCode & equals to work correctly.  hashCode & equals only uses the natural key or comparisons.  Remove Transient and add Exclude.", "author": "aklish", "createdAt": "2020-03-09T19:11:16Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.models;\n+\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.inject.Inject;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Transient;\n+\n+import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.OnCreatePostCommit;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.async.service.AsyncExecutorService;\n+import com.yahoo.elide.core.RequestScope;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Model for Async Query\n+ */\n+@Entity\n+@Include(type = \"query\", rootLevel = true)\n+@ReadPermission(expression = \"Principal is Owner\")\n+@UpdatePermission(expression = \"Prefab.Role.None\")\n+@DeletePermission(expression = \"Prefab.Role.None\")\n+@Slf4j\n+@Data\n+public class AsyncQuery implements PrincipalOwned {\n+    @Id\n+    private UUID id; //Can be generated or provided.\n+\n+    //Extracted from the Principal object\n+    private String principalName;\n+\n+    private String query;  //JSON-API PATH or GraphQL payload.\n+\n+    private QueryType queryType; //GRAPHQL, JSONAPI\n+\n+    @UpdatePermission(expression = \"Principal is Owner AND value is Cancelled\")\n+    private QueryStatus status;\n+\n+    @OneToOne(mappedBy = \"query\")\n+    private AsyncQueryResult result;\n+\n+    private Date createdOn;\n+\n+    private Date updatedOn;\n+\n+    @Inject\n+    @Transient\n+    private AsyncExecutorService asyncExecutorService;\n+\n+    @Transient", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\nindex c7e3fc699..e3b6394fc 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\n\n@@ -5,45 +5,40 @@\n  */\n package com.yahoo.elide.async.models;\n \n-import java.util.Date;\n import java.util.UUID;\n \n import javax.inject.Inject;\n+import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.OneToOne;\n-import javax.persistence.PrePersist;\n-import javax.persistence.PreUpdate;\n import javax.persistence.Transient;\n \n import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Exclude;\n import com.yahoo.elide.annotation.Include;\n import com.yahoo.elide.annotation.OnCreatePostCommit;\n+import com.yahoo.elide.annotation.OnCreatePreSecurity;\n import com.yahoo.elide.annotation.ReadPermission;\n import com.yahoo.elide.annotation.UpdatePermission;\n import com.yahoo.elide.async.service.AsyncExecutorService;\n import com.yahoo.elide.core.RequestScope;\n \n import lombok.Data;\n-import lombok.extern.slf4j.Slf4j;\n \n /**\n  * Model for Async Query\n  */\n @Entity\n-@Include(type = \"query\", rootLevel = true)\n+@Include(type = \"asyncQuery\", rootLevel = true)\n @ReadPermission(expression = \"Principal is Owner\")\n @UpdatePermission(expression = \"Prefab.Role.None\")\n @DeletePermission(expression = \"Prefab.Role.None\")\n-@Slf4j\n @Data\n-public class AsyncQuery implements PrincipalOwned {\n+public class AsyncQuery extends AsyncBase implements PrincipalOwned {\n     @Id\n     private UUID id; //Can be generated or provided.\n \n-    //Extracted from the Principal object\n-    private String principalName;\n-\n     private String query;  //JSON-API PATH or GraphQL payload.\n \n     private QueryType queryType; //GRAPHQL, JSONAPI\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwNDM0OA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389904348", "bodyText": "Why not just pass the Query object in here instead of breaking out params for it.", "author": "aklish", "createdAt": "2020-03-09T19:13:01Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.models;\n+\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.inject.Inject;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Transient;\n+\n+import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.OnCreatePostCommit;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.async.service.AsyncExecutorService;\n+import com.yahoo.elide.core.RequestScope;\n+\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Model for Async Query\n+ */\n+@Entity\n+@Include(type = \"query\", rootLevel = true)\n+@ReadPermission(expression = \"Principal is Owner\")\n+@UpdatePermission(expression = \"Prefab.Role.None\")\n+@DeletePermission(expression = \"Prefab.Role.None\")\n+@Slf4j\n+@Data\n+public class AsyncQuery implements PrincipalOwned {\n+    @Id\n+    private UUID id; //Can be generated or provided.\n+\n+    //Extracted from the Principal object\n+    private String principalName;\n+\n+    private String query;  //JSON-API PATH or GraphQL payload.\n+\n+    private QueryType queryType; //GRAPHQL, JSONAPI\n+\n+    @UpdatePermission(expression = \"Principal is Owner AND value is Cancelled\")\n+    private QueryStatus status;\n+\n+    @OneToOne(mappedBy = \"query\")\n+    private AsyncQueryResult result;\n+\n+    private Date createdOn;\n+\n+    private Date updatedOn;\n+\n+    @Inject\n+    @Transient\n+    private AsyncExecutorService asyncExecutorService;\n+\n+    @Transient\n+    protected String naturalKey = UUID.randomUUID().toString();\n+\n+    @Override\n+    public String getPrincipalName() {\n+        return principalName;\n+    }\n+\n+    @PrePersist\n+    public void prePersist() {\n+        createdOn = updatedOn = new Date();\n+    }\n+\n+    @PreUpdate\n+    public void preUpdate() {\n+        this.updatedOn = new Date();\n+    }\n+\n+    @OnCreatePostCommit\n+    public void executeQueryFromExecutor(RequestScope scope) {\n+        log.info(\"AsyncExecutorService executor object: {}\", asyncExecutorService);\n+        asyncExecutorService.executeQuery(query, queryType, scope.getUser(), id);", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\nindex c7e3fc699..e3b6394fc 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java\n\n@@ -5,45 +5,40 @@\n  */\n package com.yahoo.elide.async.models;\n \n-import java.util.Date;\n import java.util.UUID;\n \n import javax.inject.Inject;\n+import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.OneToOne;\n-import javax.persistence.PrePersist;\n-import javax.persistence.PreUpdate;\n import javax.persistence.Transient;\n \n import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Exclude;\n import com.yahoo.elide.annotation.Include;\n import com.yahoo.elide.annotation.OnCreatePostCommit;\n+import com.yahoo.elide.annotation.OnCreatePreSecurity;\n import com.yahoo.elide.annotation.ReadPermission;\n import com.yahoo.elide.annotation.UpdatePermission;\n import com.yahoo.elide.async.service.AsyncExecutorService;\n import com.yahoo.elide.core.RequestScope;\n \n import lombok.Data;\n-import lombok.extern.slf4j.Slf4j;\n \n /**\n  * Model for Async Query\n  */\n @Entity\n-@Include(type = \"query\", rootLevel = true)\n+@Include(type = \"asyncQuery\", rootLevel = true)\n @ReadPermission(expression = \"Principal is Owner\")\n @UpdatePermission(expression = \"Prefab.Role.None\")\n @DeletePermission(expression = \"Prefab.Role.None\")\n-@Slf4j\n @Data\n-public class AsyncQuery implements PrincipalOwned {\n+public class AsyncQuery extends AsyncBase implements PrincipalOwned {\n     @Id\n     private UUID id; //Can be generated or provided.\n \n-    //Extracted from the Principal object\n-    private String principalName;\n-\n     private String query;  //JSON-API PATH or GraphQL payload.\n \n     private QueryType queryType; //GRAPHQL, JSONAPI\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwNDg5OA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389904898", "bodyText": "Change to @Exclude", "author": "aklish", "createdAt": "2020-03-09T19:14:08Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.models;\n+\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Transient;\n+\n+import com.yahoo.elide.annotation.CreatePermission;\n+import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Exclude;\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+\n+import lombok.Data;\n+\n+/**\n+ * Model for Async Query Result\n+ */\n+@Entity\n+@Include(type=\"queryResult\")\n+@ReadPermission(expression = \"Principal is Owner\")\n+@UpdatePermission(expression = \"Prefab.Role.None\")\n+@CreatePermission(expression = \"Prefab.Role.None\")\n+@DeletePermission(expression = \"Prefab.Role.None\")\n+@Data\n+public class AsyncQueryResult implements PrincipalOwned {\n+    @Id\n+    private UUID id; //Matches UUID in query.\n+\n+    private Integer contentLength;\n+\n+    private String responseBody; //success or errors\n+\n+    private Integer status; // HTTP Status\n+\n+    private Date createdOn;\n+\n+    private Date updatedOn;\n+\n+    @Transient", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java\nindex 7487cb92c..a8eba3d7e 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java\n\n@@ -5,15 +5,11 @@\n  */\n package com.yahoo.elide.async.models;\n \n-import java.util.Date;\n import java.util.UUID;\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.OneToOne;\n-import javax.persistence.PrePersist;\n-import javax.persistence.PreUpdate;\n-import javax.persistence.Transient;\n \n import com.yahoo.elide.annotation.CreatePermission;\n import com.yahoo.elide.annotation.DeletePermission;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwODU0NQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389908545", "bodyText": "Do we need both a a Cleaner and a CleanerService?  Why not just combine these into a single concept?", "author": "aklish", "createdAt": "2020-03-09T19:21:29Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleaner.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import javax.inject.Singleton;\n+\n+/**\n+ * Class for initializing the Query Cleaner.\n+ */\n+@Singleton\n+class AsyncQueryCleaner {", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleaner.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleaner.java\ndeleted file mode 100644\nindex 22eba05ac..000000000\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleaner.java\n+++ /dev/null\n\n@@ -1,38 +0,0 @@\n-/*\n- * Copyright 2020, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.async.service;\n-\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ScheduledExecutorService;\n-\n-import javax.inject.Singleton;\n-\n-/**\n- * Class for initializing the Query Cleaner.\n- */\n-@Singleton\n-class AsyncQueryCleaner {\n-\n-    private static AsyncQueryCleaner cleaner;\n-    private ScheduledExecutorService cleanerService;\n-\n-    protected static AsyncQueryCleaner getInstance() {\n-        if (cleaner == null) {\n-          synchronized (AsyncQueryCleaner.class) {\n-          cleaner = new AsyncQueryCleaner();\n-          }\n-        }\n-        return cleaner;\n-    }\n-\n-    protected AsyncQueryCleaner() {\n-      cleanerService = Executors.newSingleThreadScheduledExecutor();\n-    }\n-\n-    protected ScheduledExecutorService getExecutorService() {\n-      return cleanerService;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwODk2Mw==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389908963", "bodyText": "Do we need both an Executor and an ExecutorService?  Can we combine them?", "author": "aklish", "createdAt": "2020-03-09T19:22:20Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryExecutor.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import javax.inject.Singleton;\n+\n+/**\n+ * Class for initializing the Query Executor.\n+ */\n+@Singleton\n+class AsyncQueryExecutor {", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryExecutor.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryExecutor.java\ndeleted file mode 100644\nindex 0cb9f9be3..000000000\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryExecutor.java\n+++ /dev/null\n\n@@ -1,38 +0,0 @@\n-/*\n- * Copyright 2020, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.async.service;\n-\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-\n-import javax.inject.Singleton;\n-\n-/**\n- * Class for initializing the Query Executor.\n- */\n-@Singleton\n-class AsyncQueryExecutor {\n-\n-    private static AsyncQueryExecutor executor;\n-    private ExecutorService executorService;\n-\n-    protected static AsyncQueryExecutor getInstance(int threadPoolSize) {\n-      if (executor == null) {\n-        synchronized (AsyncQueryExecutor.class) {\n-          executor = new AsyncQueryExecutor(threadPoolSize);\n-          }\n-        }\n-      return executor;\n-    }\n-\n-    protected AsyncQueryExecutor(int threadPoolSize) {\n-      executorService = Executors.newFixedThreadPool(threadPoolSize);\n-    }\n-\n-    protected ExecutorService getExecutorService() {\n-      return executorService;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwOTc4OA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389909788", "bodyText": "You can move a lot of this setup code outside the closure (and hence outside the transaction).", "author": "aklish", "createdAt": "2020-03-09T19:23:58Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.text.Format;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n+import com.yahoo.elide.core.filter.expression.FilterExpression;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for updating AsyncQueryThread status\n+ * beyond the max run time and if not terminated by interrupt process\n+ * due to app/host crash or restart.\n+ */\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+public class AsyncQueryCleanerThread implements Runnable {\n+\n+    private int maxRunTimeMinutes;\n+    private Elide elide;\n+    private int queryCleanupDays;\n+\n+    @Override\n+    public void run() {\n+        deleteAsyncQuery();\n+        timeoutAsyncQuery();\n+    }\n+\n+    /**\n+     * This method updates the status of long running async query which\n+     * were not interrupted due to host crash/app shutdown to TIMEDOUT.\n+     * */\n+    @SuppressWarnings(\"unchecked\")\n+    private void deleteAsyncQuery() {\n+        AsyncDbUtil asyncDbUtil = AsyncDbUtil.getInstance(elide);\n+        Iterable<Object> loaded = (Iterable<Object>) asyncDbUtil.executeInTransaction(elide.getDataStore(), (tx, scope) -> {\n+            try {\n+                EntityDictionary dictionary = elide.getElideSettings().getDictionary();", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\nindex 1766b716b..9bbe7c2f9 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n\n@@ -8,17 +8,12 @@ package com.yahoo.elide.async.service;\n import java.text.Format;\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n+import java.util.Collection;\n import java.util.Date;\n-import java.util.Iterator;\n-import java.util.concurrent.TimeUnit;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.QueryStatus;\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n-import com.yahoo.elide.core.filter.expression.FilterExpression;\n-import com.yahoo.elide.request.EntityProjection;\n \n import lombok.AllArgsConstructor;\n import lombok.Data;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxMjI1Ng==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389912256", "bodyText": "This is where using the DataStoreTransaction interface in Elide is less than ideal.  There is no bulk edit interface.  This will generate lots of round trips to the database to delete objects one at a time (rather than delete them in bulk).  We should at least change the DbUtil.deleteAsync function take a list of objects to delete - and to remove them in a single transaction.  DdUtil should be an interface that can be created and overridden (as a Spring bean) if there are performance problems with this general approach.", "author": "aklish", "createdAt": "2020-03-09T19:28:58Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.text.Format;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n+import com.yahoo.elide.core.filter.expression.FilterExpression;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for updating AsyncQueryThread status\n+ * beyond the max run time and if not terminated by interrupt process\n+ * due to app/host crash or restart.\n+ */\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+public class AsyncQueryCleanerThread implements Runnable {\n+\n+    private int maxRunTimeMinutes;\n+    private Elide elide;\n+    private int queryCleanupDays;\n+\n+    @Override\n+    public void run() {\n+        deleteAsyncQuery();\n+        timeoutAsyncQuery();\n+    }\n+\n+    /**\n+     * This method updates the status of long running async query which\n+     * were not interrupted due to host crash/app shutdown to TIMEDOUT.\n+     * */\n+    @SuppressWarnings(\"unchecked\")\n+    private void deleteAsyncQuery() {\n+        AsyncDbUtil asyncDbUtil = AsyncDbUtil.getInstance(elide);\n+        Iterable<Object> loaded = (Iterable<Object>) asyncDbUtil.executeInTransaction(elide.getDataStore(), (tx, scope) -> {\n+            try {\n+                EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n+                RSQLFilterDialect filterParser = new RSQLFilterDialect(dictionary);\n+\n+                //Calculate date to clean up\n+                Calendar cal = Calendar.getInstance();\n+                cal.setTime(new Date());\n+                cal.add(Calendar.DATE, -(queryCleanupDays));\n+                Date cleanupDate = cal.getTime();\n+                Format dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm'Z'\");\n+                String cleanupDateFormatted = dateFormat.format(cleanupDate);\n+                log.debug(\"cleanupDateFormatted = {}\", cleanupDateFormatted);\n+\n+                FilterExpression filter = filterParser.parseFilterExpression(\"createdOn=le='\" + cleanupDateFormatted + \"'\",\n+                        AsyncQuery.class, false);\n+                log.debug(\"filter = {}\", filter.toString());\n+\n+                EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                        .type(AsyncQuery.class)\n+                        .filterExpression(filter)\n+                        .build();\n+\n+                Iterable<Object> loadedObjects = tx.loadObjects(asyncQueryCollection, scope);\n+                return loadedObjects;\n+            } catch (Exception e) {\n+                log.error(\"Exception: {}\", e.getMessage());\n+            }\n+            return null;\n+        });\n+        Iterator<Object> itr = loaded.iterator();\n+        while(itr.hasNext()) {\n+            AsyncQuery query = (AsyncQuery) itr.next();\n+\n+            log.info(\"Found a query to DELETE\");\n+            asyncDbUtil.deleteAsyncQueryAndResult(query.getId());", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\nindex 1766b716b..9bbe7c2f9 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n\n@@ -8,17 +8,12 @@ package com.yahoo.elide.async.service;\n import java.text.Format;\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n+import java.util.Collection;\n import java.util.Date;\n-import java.util.Iterator;\n-import java.util.concurrent.TimeUnit;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.QueryStatus;\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n-import com.yahoo.elide.core.filter.expression.FilterExpression;\n-import com.yahoo.elide.request.EntityProjection;\n \n import lombok.AllArgsConstructor;\n import lombok.Data;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxMzc4NA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389913784", "bodyText": "Multiplying maxRunTimeMinutes by 2 should be done in a single place across all the code.", "author": "aklish", "createdAt": "2020-03-09T19:31:56Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.text.Format;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n+import com.yahoo.elide.core.filter.expression.FilterExpression;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for updating AsyncQueryThread status\n+ * beyond the max run time and if not terminated by interrupt process\n+ * due to app/host crash or restart.\n+ */\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+public class AsyncQueryCleanerThread implements Runnable {\n+\n+    private int maxRunTimeMinutes;\n+    private Elide elide;\n+    private int queryCleanupDays;\n+\n+    @Override\n+    public void run() {\n+        deleteAsyncQuery();\n+        timeoutAsyncQuery();\n+    }\n+\n+    /**\n+     * This method updates the status of long running async query which\n+     * were not interrupted due to host crash/app shutdown to TIMEDOUT.\n+     * */\n+    @SuppressWarnings(\"unchecked\")\n+    private void deleteAsyncQuery() {\n+        AsyncDbUtil asyncDbUtil = AsyncDbUtil.getInstance(elide);\n+        Iterable<Object> loaded = (Iterable<Object>) asyncDbUtil.executeInTransaction(elide.getDataStore(), (tx, scope) -> {\n+            try {\n+                EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n+                RSQLFilterDialect filterParser = new RSQLFilterDialect(dictionary);\n+\n+                //Calculate date to clean up\n+                Calendar cal = Calendar.getInstance();\n+                cal.setTime(new Date());\n+                cal.add(Calendar.DATE, -(queryCleanupDays));\n+                Date cleanupDate = cal.getTime();\n+                Format dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm'Z'\");\n+                String cleanupDateFormatted = dateFormat.format(cleanupDate);\n+                log.debug(\"cleanupDateFormatted = {}\", cleanupDateFormatted);\n+\n+                FilterExpression filter = filterParser.parseFilterExpression(\"createdOn=le='\" + cleanupDateFormatted + \"'\",\n+                        AsyncQuery.class, false);\n+                log.debug(\"filter = {}\", filter.toString());\n+\n+                EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                        .type(AsyncQuery.class)\n+                        .filterExpression(filter)\n+                        .build();\n+\n+                Iterable<Object> loadedObjects = tx.loadObjects(asyncQueryCollection, scope);\n+                return loadedObjects;\n+            } catch (Exception e) {\n+                log.error(\"Exception: {}\", e.getMessage());\n+            }\n+            return null;\n+        });\n+        Iterator<Object> itr = loaded.iterator();\n+        while(itr.hasNext()) {\n+            AsyncQuery query = (AsyncQuery) itr.next();\n+\n+            log.info(\"Found a query to DELETE\");\n+            asyncDbUtil.deleteAsyncQueryAndResult(query.getId());\n+        }\n+    }\n+    \n+    /**\n+     * This method updates the status of long running async query which\n+     * were not interrupted due to host crash/app shutdown to TIMEDOUT.\n+     * */\n+\t@SuppressWarnings(\"unchecked\")\n+    private void timeoutAsyncQuery() {\n+        AsyncDbUtil asyncDbUtil = AsyncDbUtil.getInstance(elide);\n+        Iterable<Object> loaded = (Iterable<Object>) asyncDbUtil.executeInTransaction(elide.getDataStore(), (tx, scope) -> {\n+            try {\n+                EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n+                RSQLFilterDialect filterParser = new RSQLFilterDialect(dictionary);\n+                FilterExpression filter = filterParser.parseFilterExpression(\"status=in=(\" + QueryStatus.PROCESSING.toString() + \",\"\n+                        + QueryStatus.QUEUED.toString() + \")\", AsyncQuery.class, false);\n+\n+                EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                        .type(AsyncQuery.class)\n+                        .filterExpression(filter)\n+                        .build();\n+\n+                Iterable<Object> loadedObj = tx.loadObjects(asyncQueryCollection, scope);\n+                return loadedObj;\n+            } catch (Exception e) {\n+                log.error(\"Exception: {}\", e.getMessage());\n+            }\n+            return null;\n+        });\n+        Iterator<Object> itr = loaded.iterator();\n+        long currentTime = new Date().getTime();\n+        while(itr.hasNext()) {\n+            AsyncQuery query = (AsyncQuery) itr.next();\n+\n+            if(isTimedOut(currentTime, query)) {\n+                log.info(\"Updating Async Query Status to TIMEDOUT\");\n+                asyncDbUtil.updateAsyncQuery(query.getId(), (asyncQueryObj) -> {\n+                    asyncQueryObj.setStatus(QueryStatus.TIMEDOUT);\n+                    });\n+            }\n+        }\n+    }\n+\n+    private boolean isTimedOut(long currentTime, AsyncQuery query) {\n+        long differenceMillies = Math.abs(currentTime - query.getCreatedOn().getTime());\n+        long differenceMinutes = TimeUnit.MINUTES.convert(differenceMillies, TimeUnit.MILLISECONDS);\n+\n+        // Check if its twice as long as max run time. It means the host/app crashed or restarted.\n+        return (differenceMinutes > maxRunTimeMinutes * 2);", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\nindex 1766b716b..9bbe7c2f9 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n\n@@ -8,17 +8,12 @@ package com.yahoo.elide.async.service;\n import java.text.Format;\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n+import java.util.Collection;\n import java.util.Date;\n-import java.util.Iterator;\n-import java.util.concurrent.TimeUnit;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.QueryStatus;\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n-import com.yahoo.elide.core.filter.expression.FilterExpression;\n-import com.yahoo.elide.request.EntityProjection;\n \n import lombok.AllArgsConstructor;\n import lombok.Data;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNTI0Nw==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389915247", "bodyText": "We can push this logic into the RSQL filter expression.", "author": "aklish", "createdAt": "2020-03-09T19:34:52Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.text.Format;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n+import com.yahoo.elide.core.filter.expression.FilterExpression;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for updating AsyncQueryThread status\n+ * beyond the max run time and if not terminated by interrupt process\n+ * due to app/host crash or restart.\n+ */\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+public class AsyncQueryCleanerThread implements Runnable {\n+\n+    private int maxRunTimeMinutes;\n+    private Elide elide;\n+    private int queryCleanupDays;\n+\n+    @Override\n+    public void run() {\n+        deleteAsyncQuery();\n+        timeoutAsyncQuery();\n+    }\n+\n+    /**\n+     * This method updates the status of long running async query which\n+     * were not interrupted due to host crash/app shutdown to TIMEDOUT.\n+     * */\n+    @SuppressWarnings(\"unchecked\")\n+    private void deleteAsyncQuery() {\n+        AsyncDbUtil asyncDbUtil = AsyncDbUtil.getInstance(elide);\n+        Iterable<Object> loaded = (Iterable<Object>) asyncDbUtil.executeInTransaction(elide.getDataStore(), (tx, scope) -> {\n+            try {\n+                EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n+                RSQLFilterDialect filterParser = new RSQLFilterDialect(dictionary);\n+\n+                //Calculate date to clean up\n+                Calendar cal = Calendar.getInstance();\n+                cal.setTime(new Date());\n+                cal.add(Calendar.DATE, -(queryCleanupDays));\n+                Date cleanupDate = cal.getTime();\n+                Format dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm'Z'\");\n+                String cleanupDateFormatted = dateFormat.format(cleanupDate);\n+                log.debug(\"cleanupDateFormatted = {}\", cleanupDateFormatted);\n+\n+                FilterExpression filter = filterParser.parseFilterExpression(\"createdOn=le='\" + cleanupDateFormatted + \"'\",\n+                        AsyncQuery.class, false);\n+                log.debug(\"filter = {}\", filter.toString());\n+\n+                EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                        .type(AsyncQuery.class)\n+                        .filterExpression(filter)\n+                        .build();\n+\n+                Iterable<Object> loadedObjects = tx.loadObjects(asyncQueryCollection, scope);\n+                return loadedObjects;\n+            } catch (Exception e) {\n+                log.error(\"Exception: {}\", e.getMessage());\n+            }\n+            return null;\n+        });\n+        Iterator<Object> itr = loaded.iterator();\n+        while(itr.hasNext()) {\n+            AsyncQuery query = (AsyncQuery) itr.next();\n+\n+            log.info(\"Found a query to DELETE\");\n+            asyncDbUtil.deleteAsyncQueryAndResult(query.getId());\n+        }\n+    }\n+    \n+    /**\n+     * This method updates the status of long running async query which\n+     * were not interrupted due to host crash/app shutdown to TIMEDOUT.\n+     * */\n+\t@SuppressWarnings(\"unchecked\")\n+    private void timeoutAsyncQuery() {\n+        AsyncDbUtil asyncDbUtil = AsyncDbUtil.getInstance(elide);\n+        Iterable<Object> loaded = (Iterable<Object>) asyncDbUtil.executeInTransaction(elide.getDataStore(), (tx, scope) -> {\n+            try {\n+                EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n+                RSQLFilterDialect filterParser = new RSQLFilterDialect(dictionary);\n+                FilterExpression filter = filterParser.parseFilterExpression(\"status=in=(\" + QueryStatus.PROCESSING.toString() + \",\"\n+                        + QueryStatus.QUEUED.toString() + \")\", AsyncQuery.class, false);\n+\n+                EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                        .type(AsyncQuery.class)\n+                        .filterExpression(filter)\n+                        .build();\n+\n+                Iterable<Object> loadedObj = tx.loadObjects(asyncQueryCollection, scope);\n+                return loadedObj;\n+            } catch (Exception e) {\n+                log.error(\"Exception: {}\", e.getMessage());\n+            }\n+            return null;\n+        });\n+        Iterator<Object> itr = loaded.iterator();\n+        long currentTime = new Date().getTime();\n+        while(itr.hasNext()) {\n+            AsyncQuery query = (AsyncQuery) itr.next();\n+\n+            if(isTimedOut(currentTime, query)) {\n+                log.info(\"Updating Async Query Status to TIMEDOUT\");\n+                asyncDbUtil.updateAsyncQuery(query.getId(), (asyncQueryObj) -> {\n+                    asyncQueryObj.setStatus(QueryStatus.TIMEDOUT);\n+                    });\n+            }\n+        }\n+    }\n+\n+    private boolean isTimedOut(long currentTime, AsyncQuery query) {\n+        long differenceMillies = Math.abs(currentTime - query.getCreatedOn().getTime());", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\nindex 1766b716b..9bbe7c2f9 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n\n@@ -8,17 +8,12 @@ package com.yahoo.elide.async.service;\n import java.text.Format;\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n+import java.util.Collection;\n import java.util.Date;\n-import java.util.Iterator;\n-import java.util.concurrent.TimeUnit;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.QueryStatus;\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n-import com.yahoo.elide.core.filter.expression.FilterExpression;\n-import com.yahoo.elide.request.EntityProjection;\n \n import lombok.AllArgsConstructor;\n import lombok.Data;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNjE5OA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389916198", "bodyText": "The two functions can generalized with a common function that does a load and takes an FilterExpression to filter the results.\nThe two functions can call the generalized function to do a filtered load and then either update or delete the queries respectively.", "author": "aklish", "createdAt": "2020-03-09T19:36:39Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.text.Format;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n+import com.yahoo.elide.core.filter.expression.FilterExpression;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for updating AsyncQueryThread status\n+ * beyond the max run time and if not terminated by interrupt process\n+ * due to app/host crash or restart.\n+ */\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+public class AsyncQueryCleanerThread implements Runnable {\n+\n+    private int maxRunTimeMinutes;\n+    private Elide elide;\n+    private int queryCleanupDays;\n+\n+    @Override\n+    public void run() {\n+        deleteAsyncQuery();\n+        timeoutAsyncQuery();\n+    }\n+\n+    /**\n+     * This method updates the status of long running async query which\n+     * were not interrupted due to host crash/app shutdown to TIMEDOUT.\n+     * */\n+    @SuppressWarnings(\"unchecked\")\n+    private void deleteAsyncQuery() {\n+        AsyncDbUtil asyncDbUtil = AsyncDbUtil.getInstance(elide);", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\nindex 1766b716b..9bbe7c2f9 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n\n@@ -8,17 +8,12 @@ package com.yahoo.elide.async.service;\n import java.text.Format;\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n+import java.util.Collection;\n import java.util.Date;\n-import java.util.Iterator;\n-import java.util.concurrent.TimeUnit;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.QueryStatus;\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n-import com.yahoo.elide.core.filter.expression.FilterExpression;\n-import com.yahoo.elide.request.EntityProjection;\n \n import lombok.AllArgsConstructor;\n import lombok.Data;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNzM3Nw==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389917377", "bodyText": "Can this be combined with the Interruptor service?", "author": "aklish", "createdAt": "2020-03-09T19:38:53Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptor.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import javax.inject.Singleton;\n+\n+/**\n+ * Class for initializing the Query Interruptor.\n+ */\n+@Singleton\n+class AsyncQueryInterruptor {", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptor.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptor.java\ndeleted file mode 100644\nindex 73587f47c..000000000\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptor.java\n+++ /dev/null\n\n@@ -1,38 +0,0 @@\n-/*\n- * Copyright 2020, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.async.service;\n-\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-\n-import javax.inject.Singleton;\n-\n-/**\n- * Class for initializing the Query Interruptor.\n- */\n-@Singleton\n-class AsyncQueryInterruptor {\n-\n-    private static AsyncQueryInterruptor interruptor;\n-    private ExecutorService interruptorService;\n-\n-    protected static AsyncQueryInterruptor getInstance(int threadPoolSize) {\n-      if (interruptor == null) {\n-        synchronized (AsyncQueryInterruptor.class) {\n-        interruptor = new AsyncQueryInterruptor(threadPoolSize);\n-        }\n-      }\n-      return interruptor;\n-    }\n-\n-    protected AsyncQueryInterruptor(int threadPoolSize) {\n-      interruptorService = Executors.newFixedThreadPool(threadPoolSize);\n-    }\n-\n-    protected ExecutorService getExecutorService() {\n-      return interruptorService;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNzY3OQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389917679", "bodyText": "Remove.", "author": "aklish", "createdAt": "2020-03-09T19:39:31Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.net.URISyntaxException;\n+import java.util.UUID;\n+\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.async.models.QueryType;\n+import com.yahoo.elide.graphql.QueryRunner;\n+import com.yahoo.elide.security.User;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for executing the query provided in Async Query.\n+ * It will also update the query status and result object at different\n+ * stages of execution.\n+ */\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+public class AsyncQueryThread implements Runnable {\n+\n+    private String query;\n+    private QueryType queryType;\n+    private User user;\n+    private Elide elide;\n+    private QueryRunner runner;\n+    private UUID id;\n+\n+    @Override\n+    public void run() {\n+        processQuery();\n+    }\n+\n+    /**\n+     * This is the main method which processes the Async Query request, executes the query and updates\n+     * values for AsyncQuery and AsyncQueryResult models accordingly.\n+     */\n+    protected void processQuery() {\n+        AsyncDbUtil asyncDbUtil = AsyncDbUtil.getInstance(elide);\n+        try {\n+            // Change async query to processing\n+            asyncDbUtil.updateAsyncQuery(id, (asyncQuery) -> {\n+                asyncQuery.setStatus(QueryStatus.PROCESSING);\n+                });\n+            //Thread.sleep(180000);", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\nindex b626e6dc5..abf73e908 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n\n@@ -6,18 +6,17 @@\n package com.yahoo.elide.async.service;\n \n import java.net.URISyntaxException;\n-import java.util.UUID;\n \n import javax.ws.rs.core.MultivaluedHashMap;\n import javax.ws.rs.core.MultivaluedMap;\n \n import org.apache.http.NameValuePair;\n+import org.apache.http.NoHttpResponseException;\n import org.apache.http.client.utils.URIBuilder;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.ElideResponse;\n import com.yahoo.elide.async.models.AsyncQuery;\n-import com.yahoo.elide.async.models.AsyncQueryResult;\n import com.yahoo.elide.async.models.QueryStatus;\n import com.yahoo.elide.async.models.QueryType;\n import com.yahoo.elide.graphql.QueryRunner;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNzg4OQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389917889", "bodyText": "It would be good to log the entire query object here.", "author": "aklish", "createdAt": "2020-03-09T19:39:57Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.net.URISyntaxException;\n+import java.util.UUID;\n+\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.async.models.QueryType;\n+import com.yahoo.elide.graphql.QueryRunner;\n+import com.yahoo.elide.security.User;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for executing the query provided in Async Query.\n+ * It will also update the query status and result object at different\n+ * stages of execution.\n+ */\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+public class AsyncQueryThread implements Runnable {\n+\n+    private String query;\n+    private QueryType queryType;\n+    private User user;\n+    private Elide elide;\n+    private QueryRunner runner;\n+    private UUID id;\n+\n+    @Override\n+    public void run() {\n+        processQuery();\n+    }\n+\n+    /**\n+     * This is the main method which processes the Async Query request, executes the query and updates\n+     * values for AsyncQuery and AsyncQueryResult models accordingly.\n+     */\n+    protected void processQuery() {\n+        AsyncDbUtil asyncDbUtil = AsyncDbUtil.getInstance(elide);\n+        try {\n+            // Change async query to processing\n+            asyncDbUtil.updateAsyncQuery(id, (asyncQuery) -> {\n+                asyncQuery.setStatus(QueryStatus.PROCESSING);\n+                });\n+            //Thread.sleep(180000);\n+            ElideResponse response = null;\n+            log.debug(\"query: {}\", query);", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\nindex b626e6dc5..abf73e908 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n\n@@ -6,18 +6,17 @@\n package com.yahoo.elide.async.service;\n \n import java.net.URISyntaxException;\n-import java.util.UUID;\n \n import javax.ws.rs.core.MultivaluedHashMap;\n import javax.ws.rs.core.MultivaluedMap;\n \n import org.apache.http.NameValuePair;\n+import org.apache.http.NoHttpResponseException;\n import org.apache.http.client.utils.URIBuilder;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.ElideResponse;\n import com.yahoo.elide.async.models.AsyncQuery;\n-import com.yahoo.elide.async.models.AsyncQueryResult;\n import com.yahoo.elide.async.models.QueryStatus;\n import com.yahoo.elide.async.models.QueryType;\n import com.yahoo.elide.graphql.QueryRunner;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxODY3OQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389918679", "bodyText": "Can we collapse these log lines into one?", "author": "aklish", "createdAt": "2020-03-09T19:41:32Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.net.URISyntaxException;\n+import java.util.UUID;\n+\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.async.models.QueryType;\n+import com.yahoo.elide.graphql.QueryRunner;\n+import com.yahoo.elide.security.User;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for executing the query provided in Async Query.\n+ * It will also update the query status and result object at different\n+ * stages of execution.\n+ */\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+public class AsyncQueryThread implements Runnable {\n+\n+    private String query;\n+    private QueryType queryType;\n+    private User user;\n+    private Elide elide;\n+    private QueryRunner runner;\n+    private UUID id;\n+\n+    @Override\n+    public void run() {\n+        processQuery();\n+    }\n+\n+    /**\n+     * This is the main method which processes the Async Query request, executes the query and updates\n+     * values for AsyncQuery and AsyncQueryResult models accordingly.\n+     */\n+    protected void processQuery() {\n+        AsyncDbUtil asyncDbUtil = AsyncDbUtil.getInstance(elide);\n+        try {\n+            // Change async query to processing\n+            asyncDbUtil.updateAsyncQuery(id, (asyncQuery) -> {\n+                asyncQuery.setStatus(QueryStatus.PROCESSING);\n+                });\n+            //Thread.sleep(180000);\n+            ElideResponse response = null;\n+            log.debug(\"query: {}\", query);\n+            log.debug(\"queryType: {}\", queryType);\n+            AsyncQuery asyncQuery;\n+            AsyncQueryResult asyncQueryResult;\n+            if (queryType.equals(QueryType.JSONAPI_V1_0)) {\n+                MultivaluedMap<String, String> queryParams = getQueryParams(query);\n+                response = elide.get(getPath(query), queryParams, user);\n+                log.debug(\"JSONAPI_V1_0 getResponseCode: {}\", response.getResponseCode());", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\nindex b626e6dc5..abf73e908 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n\n@@ -6,18 +6,17 @@\n package com.yahoo.elide.async.service;\n \n import java.net.URISyntaxException;\n-import java.util.UUID;\n \n import javax.ws.rs.core.MultivaluedHashMap;\n import javax.ws.rs.core.MultivaluedMap;\n \n import org.apache.http.NameValuePair;\n+import org.apache.http.NoHttpResponseException;\n import org.apache.http.client.utils.URIBuilder;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.ElideResponse;\n import com.yahoo.elide.async.models.AsyncQuery;\n-import com.yahoo.elide.async.models.AsyncQueryResult;\n import com.yahoo.elide.async.models.QueryStatus;\n import com.yahoo.elide.async.models.QueryType;\n import com.yahoo.elide.graphql.QueryRunner;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxODc2MQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389918761", "bodyText": "Cab we collapse these log lines into one?", "author": "aklish", "createdAt": "2020-03-09T19:41:43Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.net.URISyntaxException;\n+import java.util.UUID;\n+\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.async.models.QueryType;\n+import com.yahoo.elide.graphql.QueryRunner;\n+import com.yahoo.elide.security.User;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for executing the query provided in Async Query.\n+ * It will also update the query status and result object at different\n+ * stages of execution.\n+ */\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+public class AsyncQueryThread implements Runnable {\n+\n+    private String query;\n+    private QueryType queryType;\n+    private User user;\n+    private Elide elide;\n+    private QueryRunner runner;\n+    private UUID id;\n+\n+    @Override\n+    public void run() {\n+        processQuery();\n+    }\n+\n+    /**\n+     * This is the main method which processes the Async Query request, executes the query and updates\n+     * values for AsyncQuery and AsyncQueryResult models accordingly.\n+     */\n+    protected void processQuery() {\n+        AsyncDbUtil asyncDbUtil = AsyncDbUtil.getInstance(elide);\n+        try {\n+            // Change async query to processing\n+            asyncDbUtil.updateAsyncQuery(id, (asyncQuery) -> {\n+                asyncQuery.setStatus(QueryStatus.PROCESSING);\n+                });\n+            //Thread.sleep(180000);\n+            ElideResponse response = null;\n+            log.debug(\"query: {}\", query);\n+            log.debug(\"queryType: {}\", queryType);\n+            AsyncQuery asyncQuery;\n+            AsyncQueryResult asyncQueryResult;\n+            if (queryType.equals(QueryType.JSONAPI_V1_0)) {\n+                MultivaluedMap<String, String> queryParams = getQueryParams(query);\n+                response = elide.get(getPath(query), queryParams, user);\n+                log.debug(\"JSONAPI_V1_0 getResponseCode: {}\", response.getResponseCode());\n+                log.debug(\"JSONAPI_V1_0 getBody: {}\", response.getBody());\n+            }\n+            else if (queryType.equals(QueryType.GRAPHQL_V1_0)) {\n+                response = runner.run(query, user);\n+                log.debug(\"GRAPHQL_V1_0 getResponseCode: {}\", response.getResponseCode());", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\nindex b626e6dc5..abf73e908 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n\n@@ -6,18 +6,17 @@\n package com.yahoo.elide.async.service;\n \n import java.net.URISyntaxException;\n-import java.util.UUID;\n \n import javax.ws.rs.core.MultivaluedHashMap;\n import javax.ws.rs.core.MultivaluedMap;\n \n import org.apache.http.NameValuePair;\n+import org.apache.http.NoHttpResponseException;\n import org.apache.http.client.utils.URIBuilder;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.ElideResponse;\n import com.yahoo.elide.async.models.AsyncQuery;\n-import com.yahoo.elide.async.models.AsyncQueryResult;\n import com.yahoo.elide.async.models.QueryStatus;\n import com.yahoo.elide.async.models.QueryType;\n import com.yahoo.elide.graphql.QueryRunner;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxOTI1Ng==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389919256", "bodyText": "Creating the response and updating the status should be done inside a single transaction to the database.", "author": "aklish", "createdAt": "2020-03-09T19:42:46Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.net.URISyntaxException;\n+import java.util.UUID;\n+\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.async.models.QueryType;\n+import com.yahoo.elide.graphql.QueryRunner;\n+import com.yahoo.elide.security.User;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for executing the query provided in Async Query.\n+ * It will also update the query status and result object at different\n+ * stages of execution.\n+ */\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+public class AsyncQueryThread implements Runnable {\n+\n+    private String query;\n+    private QueryType queryType;\n+    private User user;\n+    private Elide elide;\n+    private QueryRunner runner;\n+    private UUID id;\n+\n+    @Override\n+    public void run() {\n+        processQuery();\n+    }\n+\n+    /**\n+     * This is the main method which processes the Async Query request, executes the query and updates\n+     * values for AsyncQuery and AsyncQueryResult models accordingly.\n+     */\n+    protected void processQuery() {\n+        AsyncDbUtil asyncDbUtil = AsyncDbUtil.getInstance(elide);\n+        try {\n+            // Change async query to processing\n+            asyncDbUtil.updateAsyncQuery(id, (asyncQuery) -> {\n+                asyncQuery.setStatus(QueryStatus.PROCESSING);\n+                });\n+            //Thread.sleep(180000);\n+            ElideResponse response = null;\n+            log.debug(\"query: {}\", query);\n+            log.debug(\"queryType: {}\", queryType);\n+            AsyncQuery asyncQuery;\n+            AsyncQueryResult asyncQueryResult;\n+            if (queryType.equals(QueryType.JSONAPI_V1_0)) {\n+                MultivaluedMap<String, String> queryParams = getQueryParams(query);\n+                response = elide.get(getPath(query), queryParams, user);\n+                log.debug(\"JSONAPI_V1_0 getResponseCode: {}\", response.getResponseCode());\n+                log.debug(\"JSONAPI_V1_0 getBody: {}\", response.getBody());\n+            }\n+            else if (queryType.equals(QueryType.GRAPHQL_V1_0)) {\n+                response = runner.run(query, user);\n+                log.debug(\"GRAPHQL_V1_0 getResponseCode: {}\", response.getResponseCode());\n+                log.debug(\"GRAPHQL_V1_0 getBody: {}\", response.getBody());\n+            }\n+            if (response != null){\n+                asyncQuery = asyncDbUtil.updateAsyncQuery(id, (asyncQueryObj) -> {\n+                    asyncQueryObj.setStatus(QueryStatus.COMPLETE);\n+                });\n+\n+                // Create AsyncQueryResult entry for AsyncQuery\n+                asyncQueryResult = asyncDbUtil.createAsyncQueryResult(response.getResponseCode(), response.getBody(), asyncQuery, id);", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\nindex b626e6dc5..abf73e908 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n\n@@ -6,18 +6,17 @@\n package com.yahoo.elide.async.service;\n \n import java.net.URISyntaxException;\n-import java.util.UUID;\n \n import javax.ws.rs.core.MultivaluedHashMap;\n import javax.ws.rs.core.MultivaluedMap;\n \n import org.apache.http.NameValuePair;\n+import org.apache.http.NoHttpResponseException;\n import org.apache.http.client.utils.URIBuilder;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.ElideResponse;\n import com.yahoo.elide.async.models.AsyncQuery;\n-import com.yahoo.elide.async.models.AsyncQueryResult;\n import com.yahoo.elide.async.models.QueryStatus;\n import com.yahoo.elide.async.models.QueryType;\n import com.yahoo.elide.graphql.QueryRunner;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxOTk4OA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389919988", "bodyText": "If we log the entire asyncQuery object, we won't need all of these separate, sprinkled log messages.", "author": "aklish", "createdAt": "2020-03-09T19:44:10Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.net.URISyntaxException;\n+import java.util.UUID;\n+\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.async.models.QueryType;\n+import com.yahoo.elide.graphql.QueryRunner;\n+import com.yahoo.elide.security.User;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for executing the query provided in Async Query.\n+ * It will also update the query status and result object at different\n+ * stages of execution.\n+ */\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+public class AsyncQueryThread implements Runnable {\n+\n+    private String query;\n+    private QueryType queryType;\n+    private User user;\n+    private Elide elide;\n+    private QueryRunner runner;\n+    private UUID id;\n+\n+    @Override\n+    public void run() {\n+        processQuery();\n+    }\n+\n+    /**\n+     * This is the main method which processes the Async Query request, executes the query and updates\n+     * values for AsyncQuery and AsyncQueryResult models accordingly.\n+     */\n+    protected void processQuery() {\n+        AsyncDbUtil asyncDbUtil = AsyncDbUtil.getInstance(elide);\n+        try {\n+            // Change async query to processing\n+            asyncDbUtil.updateAsyncQuery(id, (asyncQuery) -> {\n+                asyncQuery.setStatus(QueryStatus.PROCESSING);\n+                });\n+            //Thread.sleep(180000);\n+            ElideResponse response = null;\n+            log.debug(\"query: {}\", query);\n+            log.debug(\"queryType: {}\", queryType);\n+            AsyncQuery asyncQuery;\n+            AsyncQueryResult asyncQueryResult;\n+            if (queryType.equals(QueryType.JSONAPI_V1_0)) {\n+                MultivaluedMap<String, String> queryParams = getQueryParams(query);\n+                response = elide.get(getPath(query), queryParams, user);\n+                log.debug(\"JSONAPI_V1_0 getResponseCode: {}\", response.getResponseCode());\n+                log.debug(\"JSONAPI_V1_0 getBody: {}\", response.getBody());\n+            }\n+            else if (queryType.equals(QueryType.GRAPHQL_V1_0)) {\n+                response = runner.run(query, user);\n+                log.debug(\"GRAPHQL_V1_0 getResponseCode: {}\", response.getResponseCode());\n+                log.debug(\"GRAPHQL_V1_0 getBody: {}\", response.getBody());\n+            }\n+            if (response != null){\n+                asyncQuery = asyncDbUtil.updateAsyncQuery(id, (asyncQueryObj) -> {\n+                    asyncQueryObj.setStatus(QueryStatus.COMPLETE);\n+                });\n+\n+                // Create AsyncQueryResult entry for AsyncQuery\n+                asyncQueryResult = asyncDbUtil.createAsyncQueryResult(response.getResponseCode(), response.getBody(), asyncQuery, id);\n+\n+                // Add queryResult object to query object\n+                asyncDbUtil.updateAsyncQuery(id, (asyncQueryObj) -> {\n+                    asyncQueryObj.setResult(asyncQueryResult);\n+                });\n+            } else {\n+                // If no response is returned on AsyncQuery request we set the QueryStatus to FAILURE\n+                // No AsyncQueryResult will be set for this case\n+                asyncQuery = asyncDbUtil.updateAsyncQuery(id, (asyncQueryObj) -> {\n+                    asyncQueryObj.setStatus(QueryStatus.FAILURE);\n+                 });\n+            }\n+        } catch (Exception e) {\n+            log.error(\"Exception: {}\", e.getMessage());\n+            // If an Exception is encountered we set the QueryStatus to FAILURE\n+            //No AsyncQueryResult will be set for this case\n+            asyncDbUtil.updateAsyncQuery(id, (asyncQueryObj) -> {\n+                asyncQueryObj.setStatus(QueryStatus.FAILURE);\n+            });\n+        }\n+    }\n+\n+    /**\n+     * This method parses the url and gets the query params and adds them into a MultivaluedMap\n+     * to be used by underlying Elide.get method\n+     * @param query query from the Async request\n+     * @throws URISyntaxException URISyntaxException from malformed or incorrect URI\n+     * @return MultivaluedMap with query parameters\n+     */\n+    protected MultivaluedMap<String, String> getQueryParams(String query) throws URISyntaxException {\n+        URIBuilder uri;\n+        uri = new URIBuilder(query);\n+        MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<String, String>();\n+        for (NameValuePair queryParam : uri.getQueryParams()) {\n+            queryParams.add(queryParam.getName(), queryParam.getValue());\n+        }\n+        log.debug(\"QueryParams: {}\", queryParams);", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\nindex b626e6dc5..abf73e908 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n\n@@ -6,18 +6,17 @@\n package com.yahoo.elide.async.service;\n \n import java.net.URISyntaxException;\n-import java.util.UUID;\n \n import javax.ws.rs.core.MultivaluedHashMap;\n import javax.ws.rs.core.MultivaluedMap;\n \n import org.apache.http.NameValuePair;\n+import org.apache.http.NoHttpResponseException;\n import org.apache.http.client.utils.URIBuilder;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.ElideResponse;\n import com.yahoo.elide.async.models.AsyncQuery;\n-import com.yahoo.elide.async.models.AsyncQueryResult;\n import com.yahoo.elide.async.models.QueryStatus;\n import com.yahoo.elide.async.models.QueryType;\n import com.yahoo.elide.graphql.QueryRunner;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyMDE5Mg==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r389920192", "bodyText": "Remove log statement.  Let's consolidate logging into fewer (more complete log statements).", "author": "aklish", "createdAt": "2020-03-09T19:44:33Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.net.URISyntaxException;\n+import java.util.UUID;\n+\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.async.models.QueryType;\n+import com.yahoo.elide.graphql.QueryRunner;\n+import com.yahoo.elide.security.User;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for executing the query provided in Async Query.\n+ * It will also update the query status and result object at different\n+ * stages of execution.\n+ */\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+public class AsyncQueryThread implements Runnable {\n+\n+    private String query;\n+    private QueryType queryType;\n+    private User user;\n+    private Elide elide;\n+    private QueryRunner runner;\n+    private UUID id;\n+\n+    @Override\n+    public void run() {\n+        processQuery();\n+    }\n+\n+    /**\n+     * This is the main method which processes the Async Query request, executes the query and updates\n+     * values for AsyncQuery and AsyncQueryResult models accordingly.\n+     */\n+    protected void processQuery() {\n+        AsyncDbUtil asyncDbUtil = AsyncDbUtil.getInstance(elide);\n+        try {\n+            // Change async query to processing\n+            asyncDbUtil.updateAsyncQuery(id, (asyncQuery) -> {\n+                asyncQuery.setStatus(QueryStatus.PROCESSING);\n+                });\n+            //Thread.sleep(180000);\n+            ElideResponse response = null;\n+            log.debug(\"query: {}\", query);\n+            log.debug(\"queryType: {}\", queryType);\n+            AsyncQuery asyncQuery;\n+            AsyncQueryResult asyncQueryResult;\n+            if (queryType.equals(QueryType.JSONAPI_V1_0)) {\n+                MultivaluedMap<String, String> queryParams = getQueryParams(query);\n+                response = elide.get(getPath(query), queryParams, user);\n+                log.debug(\"JSONAPI_V1_0 getResponseCode: {}\", response.getResponseCode());\n+                log.debug(\"JSONAPI_V1_0 getBody: {}\", response.getBody());\n+            }\n+            else if (queryType.equals(QueryType.GRAPHQL_V1_0)) {\n+                response = runner.run(query, user);\n+                log.debug(\"GRAPHQL_V1_0 getResponseCode: {}\", response.getResponseCode());\n+                log.debug(\"GRAPHQL_V1_0 getBody: {}\", response.getBody());\n+            }\n+            if (response != null){\n+                asyncQuery = asyncDbUtil.updateAsyncQuery(id, (asyncQueryObj) -> {\n+                    asyncQueryObj.setStatus(QueryStatus.COMPLETE);\n+                });\n+\n+                // Create AsyncQueryResult entry for AsyncQuery\n+                asyncQueryResult = asyncDbUtil.createAsyncQueryResult(response.getResponseCode(), response.getBody(), asyncQuery, id);\n+\n+                // Add queryResult object to query object\n+                asyncDbUtil.updateAsyncQuery(id, (asyncQueryObj) -> {\n+                    asyncQueryObj.setResult(asyncQueryResult);\n+                });\n+            } else {\n+                // If no response is returned on AsyncQuery request we set the QueryStatus to FAILURE\n+                // No AsyncQueryResult will be set for this case\n+                asyncQuery = asyncDbUtil.updateAsyncQuery(id, (asyncQueryObj) -> {\n+                    asyncQueryObj.setStatus(QueryStatus.FAILURE);\n+                 });\n+            }\n+        } catch (Exception e) {\n+            log.error(\"Exception: {}\", e.getMessage());\n+            // If an Exception is encountered we set the QueryStatus to FAILURE\n+            //No AsyncQueryResult will be set for this case\n+            asyncDbUtil.updateAsyncQuery(id, (asyncQueryObj) -> {\n+                asyncQueryObj.setStatus(QueryStatus.FAILURE);\n+            });\n+        }\n+    }\n+\n+    /**\n+     * This method parses the url and gets the query params and adds them into a MultivaluedMap\n+     * to be used by underlying Elide.get method\n+     * @param query query from the Async request\n+     * @throws URISyntaxException URISyntaxException from malformed or incorrect URI\n+     * @return MultivaluedMap with query parameters\n+     */\n+    protected MultivaluedMap<String, String> getQueryParams(String query) throws URISyntaxException {\n+        URIBuilder uri;\n+        uri = new URIBuilder(query);\n+        MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<String, String>();\n+        for (NameValuePair queryParam : uri.getQueryParams()) {\n+            queryParams.add(queryParam.getName(), queryParam.getValue());\n+        }\n+        log.debug(\"QueryParams: {}\", queryParams);\n+        return queryParams;\n+    }\n+\n+    /**\n+     * This method parses the url and gets the query params and retrieves path\n+     * to be used by underlying Elide.get method\n+     * @param query query from the Async request\n+     * @throws URISyntaxException URISyntaxException from malformed or incorrect URI\n+     * @return Path extracted from URI\n+     */\n+    protected String getPath(String query) throws URISyntaxException {\n+        URIBuilder uri;\n+        uri = new URIBuilder(query);\n+        log.debug(\"Retrieving path from query\");", "originalCommit": "acf3f94963a1111820a6e5a69b907c6367fb203c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\nindex b626e6dc5..abf73e908 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n\n@@ -6,18 +6,17 @@\n package com.yahoo.elide.async.service;\n \n import java.net.URISyntaxException;\n-import java.util.UUID;\n \n import javax.ws.rs.core.MultivaluedHashMap;\n import javax.ws.rs.core.MultivaluedMap;\n \n import org.apache.http.NameValuePair;\n+import org.apache.http.NoHttpResponseException;\n import org.apache.http.client.utils.URIBuilder;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.ElideResponse;\n import com.yahoo.elide.async.models.AsyncQuery;\n-import com.yahoo.elide.async.models.AsyncQueryResult;\n import com.yahoo.elide.async.models.QueryStatus;\n import com.yahoo.elide.async.models.QueryType;\n import com.yahoo.elide.graphql.QueryRunner;\n"}}, {"oid": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "url": "https://github.com/yahoo/elide/commit/7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "message": "Resolving Review Comments\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-11T15:30:34Z", "type": "commit"}, {"oid": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "url": "https://github.com/yahoo/elide/commit/7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "message": "Resolving Review Comments\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-11T15:30:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5ODI1NA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391098254", "bodyText": "I would move all of this common code to a base class like BaseId", "author": "aklish", "createdAt": "2020-03-11T16:25:16Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.models;\n+\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+\n+import com.yahoo.elide.annotation.CreatePermission;\n+import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Exclude;\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+\n+import lombok.Data;\n+\n+/**\n+ * Model for Async Query Result\n+ */\n+@Entity\n+@Include(type=\"queryResult\")\n+@ReadPermission(expression = \"Principal is Owner\")\n+@UpdatePermission(expression = \"Prefab.Role.None\")\n+@CreatePermission(expression = \"Prefab.Role.None\")\n+@DeletePermission(expression = \"Prefab.Role.None\")\n+@Data\n+public class AsyncQueryResult implements PrincipalOwned {\n+    @Id\n+    private UUID id; //Matches UUID in query.\n+\n+    private Integer contentLength;\n+\n+    private String responseBody; //success or errors\n+\n+    private Integer status; // HTTP Status\n+\n+    private Date createdOn;\n+\n+    private Date updatedOn;\n+\n+    @OneToOne\n+    private AsyncQuery query;\n+\n+    @Exclude\n+    protected String naturalKey = UUID.randomUUID().toString();\n+\n+    @Exclude\n+    public String getPrincipalName() {\n+        return query.getPrincipalName();\n+    }\n+\n+    @PrePersist\n+    public void prePersist() {\n+        createdOn = updatedOn = new Date();\n+    }\n+\n+    @PreUpdate\n+    public void preUpdate() {\n+        updatedOn = new Date();\n+    }\n+\n+    @Override\n+    public int hashCode() {", "originalCommit": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5OTIwNA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391099204", "bodyText": "You can even move the createdOn, updatedOn, and owner fields to a common super class.", "author": "aklish", "createdAt": "2020-03-11T16:26:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5ODI1NA=="}], "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java\nindex 9eb57da04..a8eba3d7e 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java\n\n@@ -5,14 +5,11 @@\n  */\n package com.yahoo.elide.async.models;\n \n-import java.util.Date;\n import java.util.UUID;\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.OneToOne;\n-import javax.persistence.PrePersist;\n-import javax.persistence.PreUpdate;\n \n import com.yahoo.elide.annotation.CreatePermission;\n import com.yahoo.elide.annotation.DeletePermission;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5OTYyNg==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391099626", "bodyText": "Spacing is off in this function.", "author": "aklish", "createdAt": "2020-03-11T16:27:17Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncCleanerService.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.util.Random;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.yahoo.elide.Elide;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Service to execute Async queries. It will schedule task to track long\n+ * running queries and kills them. It will also schedule task to update\n+ * orphan query statuses after host/app crash or restart.\n+ */\n+@Slf4j\n+@Singleton\n+public class AsyncCleanerService {\n+\n+    private final int DEFAULT_CLEANUP_DELAY_MINUTES = 360;\n+    private final int MAX_CLEANUP_INTIAL_DELAY_MINUTES = 100;\n+\n+    private static AsyncCleanerService asyncCleanerService;\n+    private ScheduledExecutorService cleanerService;\n+\n+    @Inject\n+    public AsyncCleanerService(Elide elide, Integer maxRunTimeMinutes, Integer queryCleanupDays, AsyncQueryDAO asyncQueryDao) {\n+\n+    \t//If query is still running for twice than maxRunTime, then interrupt did not work due to host/app crash.\n+    \tint queryRunTimeThresholdMinutes = maxRunTimeMinutes * 2;", "originalCommit": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncCleanerService.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncCleanerService.java\nindex 7d4886f22..507b25eb3 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncCleanerService.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncCleanerService.java\n\n@@ -11,7 +11,6 @@ import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n import javax.inject.Inject;\n-import javax.inject.Singleton;\n \n import com.yahoo.elide.Elide;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwMDc2MA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391100760", "bodyText": "This seems like a constructor argument rather than an interface contract.  I would remove.", "author": "aklish", "createdAt": "2020-03-11T16:28:55Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.util.UUID;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.core.DataStore;\n+\n+/**\n+ * Utility interface which uses the elide datastore to modify, update and create\n+ * AsyncQuery and AsyncQueryResult Objects\n+ */\n+public interface AsyncQueryDAO {\n+\n+    /**\n+     * Set elide object\n+     * @param elide Elide Object.\n+     */\n+    public void setElide(Elide elide);", "originalCommit": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\nindex fe223aa73..39a5aa51b 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\n\n@@ -5,12 +5,12 @@\n  */\n package com.yahoo.elide.async.service;\n \n+import java.util.Collection;\n import java.util.UUID;\n \n-import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.AsyncQueryResult;\n-import com.yahoo.elide.core.DataStore;\n+import com.yahoo.elide.async.models.QueryStatus;\n \n /**\n  * Utility interface which uses the elide datastore to modify, update and create\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwMTAxNA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391101014", "bodyText": "Same comment.  We don't need this in the interface.", "author": "aklish", "createdAt": "2020-03-11T16:29:18Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.util.UUID;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.core.DataStore;\n+\n+/**\n+ * Utility interface which uses the elide datastore to modify, update and create\n+ * AsyncQuery and AsyncQueryResult Objects\n+ */\n+public interface AsyncQueryDAO {\n+\n+    /**\n+     * Set elide object\n+     * @param elide Elide Object.\n+     */\n+    public void setElide(Elide elide);\n+\n+    /**\n+     * Set data store object\n+     * @param dataStore Datastore Object from Elide.\n+     */\n+    public void setDataStore(DataStore dataStore);", "originalCommit": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\nindex fe223aa73..39a5aa51b 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\n\n@@ -5,12 +5,12 @@\n  */\n package com.yahoo.elide.async.service;\n \n+import java.util.Collection;\n import java.util.UUID;\n \n-import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.AsyncQueryResult;\n-import com.yahoo.elide.core.DataStore;\n+import com.yahoo.elide.async.models.QueryStatus;\n \n /**\n  * Utility interface which uses the elide datastore to modify, update and create\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwNDEwOQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391104109", "bodyText": "I don't think we should expose implementation details like UpdateQuery in a DAO interface.\nWe should have methods like updateStatus(UUID asyncQueryId, QueryStatus status)", "author": "aklish", "createdAt": "2020-03-11T16:34:01Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.util.UUID;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.core.DataStore;\n+\n+/**\n+ * Utility interface which uses the elide datastore to modify, update and create\n+ * AsyncQuery and AsyncQueryResult Objects\n+ */\n+public interface AsyncQueryDAO {\n+\n+    /**\n+     * Set elide object\n+     * @param elide Elide Object.\n+     */\n+    public void setElide(Elide elide);\n+\n+    /**\n+     * Set data store object\n+     * @param dataStore Datastore Object from Elide.\n+     */\n+    public void setDataStore(DataStore dataStore);\n+\n+    /**\n+     * This method updates the model for AsyncQuery with passed value.\n+     * @param asyncQueryId Unique UUID for the AsyncQuery Object\n+     * @param updateFunction Functional interface for updating AsyncQuery Object\n+     * @return AsyncQuery Object\n+     */\n+    public AsyncQuery updateAsyncQuery(UUID asyncQueryId, UpdateQuery updateFunction);", "originalCommit": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\nindex fe223aa73..39a5aa51b 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\n\n@@ -5,12 +5,12 @@\n  */\n package com.yahoo.elide.async.service;\n \n+import java.util.Collection;\n import java.util.UUID;\n \n-import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.AsyncQueryResult;\n-import com.yahoo.elide.core.DataStore;\n+import com.yahoo.elide.async.models.QueryStatus;\n \n /**\n  * Utility interface which uses the elide datastore to modify, update and create\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwNDM1OQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391104359", "bodyText": "Remove - see earlier comment.", "author": "aklish", "createdAt": "2020-03-11T16:34:23Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.util.UUID;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.core.DataStore;\n+\n+/**\n+ * Utility interface which uses the elide datastore to modify, update and create\n+ * AsyncQuery and AsyncQueryResult Objects\n+ */\n+public interface AsyncQueryDAO {\n+\n+    /**\n+     * Set elide object\n+     * @param elide Elide Object.\n+     */\n+    public void setElide(Elide elide);\n+\n+    /**\n+     * Set data store object\n+     * @param dataStore Datastore Object from Elide.\n+     */\n+    public void setDataStore(DataStore dataStore);\n+\n+    /**\n+     * This method updates the model for AsyncQuery with passed value.\n+     * @param asyncQueryId Unique UUID for the AsyncQuery Object\n+     * @param updateFunction Functional interface for updating AsyncQuery Object\n+     * @return AsyncQuery Object\n+     */\n+    public AsyncQuery updateAsyncQuery(UUID asyncQueryId, UpdateQuery updateFunction);\n+\n+    /**\n+     * This method updates a collection of AsyncQuery objects from database and\n+     * returns the objects updated.\n+     * @param asyncQueryList Iterable list of AsyncQuery objects to be updated\n+     * @return query object list updated\n+     */\n+    public Iterable<Object> updateAsyncQueryCollection(Iterable<Object> asyncQueryList, UpdateQuery updateFunction);\n+\n+    /**\n+     * This method deletes a collection of AsyncQuery and AsyncQueryResult objects from database and\n+     * returns the objects deleted.\n+     * @param asyncQueryList Iterable list of AsyncQuery objects to be deleted\n+     * @return query object list deleted\n+     */\n+    public Iterable<Object> deleteAsyncQueryAndResultCollection(Iterable<Object> asyncQueryList);\n+\n+    /**\n+     * This method persists the model for AsyncQueryResult, AsyncQuery object and establishes the relationship\n+     * @param status ElideResponse status from AsyncQuery\n+     * @param responseBody ElideResponse responseBody from AsyncQuery\n+     * @param asyncQuery AsyncQuery object to be associated with the AsyncQueryResult object\n+     * @param asyncQueryId UUID of the AsyncQuery to be associated with the AsyncQueryResult object\n+     * @return AsyncQueryResult Object\n+     */\n+    public AsyncQueryResult setAsyncQueryAndResult(Integer status, String responseBody, AsyncQuery asyncQuery, UUID asyncQueryId);\n+\n+    /**\n+     * This method creates a transaction from the datastore, performs the DB action using\n+     * a generic functional interface and closes the transaction.\n+     * @param dataStore Elide datastore retrieved from Elide object\n+     * @param action Functional interface to perform DB action\n+     * @return Object Returns Entity Object (AsyncQueryResult or AsyncResult)\n+     */\n+    public Object executeInTransaction(DataStore dataStore, Transactional action);", "originalCommit": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\nindex fe223aa73..39a5aa51b 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\n\n@@ -5,12 +5,12 @@\n  */\n package com.yahoo.elide.async.service;\n \n+import java.util.Collection;\n import java.util.UUID;\n \n-import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.AsyncQueryResult;\n-import com.yahoo.elide.core.DataStore;\n+import com.yahoo.elide.async.models.QueryStatus;\n \n /**\n  * Utility interface which uses the elide datastore to modify, update and create\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwNTA1Mg==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391105052", "bodyText": "Let's not use Object here.  This should delete a collection of AsyncQuery objects.", "author": "aklish", "createdAt": "2020-03-11T16:35:24Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.util.UUID;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.core.DataStore;\n+\n+/**\n+ * Utility interface which uses the elide datastore to modify, update and create\n+ * AsyncQuery and AsyncQueryResult Objects\n+ */\n+public interface AsyncQueryDAO {\n+\n+    /**\n+     * Set elide object\n+     * @param elide Elide Object.\n+     */\n+    public void setElide(Elide elide);\n+\n+    /**\n+     * Set data store object\n+     * @param dataStore Datastore Object from Elide.\n+     */\n+    public void setDataStore(DataStore dataStore);\n+\n+    /**\n+     * This method updates the model for AsyncQuery with passed value.\n+     * @param asyncQueryId Unique UUID for the AsyncQuery Object\n+     * @param updateFunction Functional interface for updating AsyncQuery Object\n+     * @return AsyncQuery Object\n+     */\n+    public AsyncQuery updateAsyncQuery(UUID asyncQueryId, UpdateQuery updateFunction);\n+\n+    /**\n+     * This method updates a collection of AsyncQuery objects from database and\n+     * returns the objects updated.\n+     * @param asyncQueryList Iterable list of AsyncQuery objects to be updated\n+     * @return query object list updated\n+     */\n+    public Iterable<Object> updateAsyncQueryCollection(Iterable<Object> asyncQueryList, UpdateQuery updateFunction);\n+\n+    /**\n+     * This method deletes a collection of AsyncQuery and AsyncQueryResult objects from database and\n+     * returns the objects deleted.\n+     * @param asyncQueryList Iterable list of AsyncQuery objects to be deleted\n+     * @return query object list deleted\n+     */\n+    public Iterable<Object> deleteAsyncQueryAndResultCollection(Iterable<Object> asyncQueryList);", "originalCommit": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\nindex fe223aa73..39a5aa51b 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\n\n@@ -5,12 +5,12 @@\n  */\n package com.yahoo.elide.async.service;\n \n+import java.util.Collection;\n import java.util.UUID;\n \n-import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.AsyncQueryResult;\n-import com.yahoo.elide.core.DataStore;\n+import com.yahoo.elide.async.models.QueryStatus;\n \n /**\n  * Utility interface which uses the elide datastore to modify, update and create\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwNTIzMw==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391105233", "bodyText": "Remove or replace with more specific functions.", "author": "aklish", "createdAt": "2020-03-11T16:35:37Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.util.UUID;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.core.DataStore;\n+\n+/**\n+ * Utility interface which uses the elide datastore to modify, update and create\n+ * AsyncQuery and AsyncQueryResult Objects\n+ */\n+public interface AsyncQueryDAO {\n+\n+    /**\n+     * Set elide object\n+     * @param elide Elide Object.\n+     */\n+    public void setElide(Elide elide);\n+\n+    /**\n+     * Set data store object\n+     * @param dataStore Datastore Object from Elide.\n+     */\n+    public void setDataStore(DataStore dataStore);\n+\n+    /**\n+     * This method updates the model for AsyncQuery with passed value.\n+     * @param asyncQueryId Unique UUID for the AsyncQuery Object\n+     * @param updateFunction Functional interface for updating AsyncQuery Object\n+     * @return AsyncQuery Object\n+     */\n+    public AsyncQuery updateAsyncQuery(UUID asyncQueryId, UpdateQuery updateFunction);\n+\n+    /**\n+     * This method updates a collection of AsyncQuery objects from database and\n+     * returns the objects updated.\n+     * @param asyncQueryList Iterable list of AsyncQuery objects to be updated\n+     * @return query object list updated\n+     */\n+    public Iterable<Object> updateAsyncQueryCollection(Iterable<Object> asyncQueryList, UpdateQuery updateFunction);", "originalCommit": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\nindex fe223aa73..39a5aa51b 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\n\n@@ -5,12 +5,12 @@\n  */\n package com.yahoo.elide.async.service;\n \n+import java.util.Collection;\n import java.util.UUID;\n \n-import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.AsyncQueryResult;\n-import com.yahoo.elide.core.DataStore;\n+import com.yahoo.elide.async.models.QueryStatus;\n \n /**\n  * Utility interface which uses the elide datastore to modify, update and create\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwNjk1Ng==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391106956", "bodyText": "Spacing is off.", "author": "aklish", "createdAt": "2020-03-11T16:38:04Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.UUID;\n+\n+import javax.inject.Singleton;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.core.DataStore;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.jsonapi.models.JsonApiDocument;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Utility class which implements AsyncQueryDAO\n+ */\n+@Singleton\n+@Slf4j\n+public class DefaultAsyncQueryDAO implements AsyncQueryDAO {\n+\n+    private Elide elide;\n+    private DataStore dataStore;\n+\n+    public DefaultAsyncQueryDAO() {}\n+\n+    public DefaultAsyncQueryDAO(Elide elide, DataStore dataStore) {\n+    \tthis.elide = elide;\n+    \tthis.dataStore = dataStore;\n+    }\n+\n+    @Override\n+    public void setElide(Elide elide) {\n+        this.elide = elide;\n+    }\n+\n+    @Override\n+    public void setDataStore(DataStore dataStore) {\n+        this.dataStore = dataStore;\n+    }\n+\n+    @Override\n+    public AsyncQuery updateAsyncQuery(UUID asyncQueryId, UpdateQuery updateFunction) {\n+        log.debug(\"updateAsyncQuery\");\n+        AsyncQuery queryObj = (AsyncQuery) executeInTransaction(dataStore, (tx, scope) -> {\n+            EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                    .type(AsyncQuery.class)\n+                    .build();\n+            AsyncQuery query = (AsyncQuery) tx.loadObject(asyncQueryCollection, asyncQueryId, scope);\n+            updateFunction.update(query);\n+            tx.save(query, scope);\n+            return query;\n+        });\n+        return queryObj;\n+    }\n+\n+    @Override\n+    public Iterable<Object> updateAsyncQueryCollection(Iterable<Object> asyncQueryList, UpdateQuery updateFunction) {\n+        log.debug(\"updateAsyncQueryCollection\");\n+        executeInTransaction(dataStore, (tx, scope) -> {\n+            EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                    .type(AsyncQuery.class)\n+                    .build();\n+\n+            Iterator<Object> itr = asyncQueryList.iterator();\n+            while(itr.hasNext()) {\n+                AsyncQuery query = (AsyncQuery) itr.next();\n+                AsyncQuery asyncQuery = (AsyncQuery) tx.loadObject(asyncQueryCollection, query.getId(), scope);\n+                updateFunction.update(asyncQuery);\n+                tx.save(asyncQuery, scope);\n+            }\n+            return asyncQueryList;\n+        });\n+        return asyncQueryList;\n+    }\n+\n+    @Override\n+    public Iterable<Object> deleteAsyncQueryAndResultCollection(Iterable<Object> asyncQueryList) {\n+        log.debug(\"deleteAsyncQueryAndResultCollection\");\n+        executeInTransaction(dataStore, (tx, scope) -> {\n+            EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                    .type(AsyncQuery.class)\n+                    .build();\n+\n+            Iterator<Object> itr = asyncQueryList.iterator();\n+\n+            while(itr.hasNext()) {\n+                AsyncQuery query = (AsyncQuery) itr.next();\n+                AsyncQuery asyncQuery = (AsyncQuery) tx.loadObject(asyncQueryCollection, query.getId(), scope);\n+                if(asyncQuery != null) {\n+                    tx.delete(asyncQuery, scope);\n+                }\n+            }\n+\n+            return asyncQueryList;\n+        });\n+        return asyncQueryList;\n+    }\n+\n+    @Override\n+    public AsyncQueryResult setAsyncQueryAndResult(Integer status, String responseBody, AsyncQuery asyncQuery, UUID asyncQueryId) {\n+        log.debug(\"createAsyncQueryResult\");\n+        AsyncQueryResult queryResultObj = (AsyncQueryResult) executeInTransaction(dataStore, (tx, scope) -> {\n+            AsyncQueryResult asyncQueryResult = new AsyncQueryResult();\n+            asyncQueryResult.setStatus(status);\n+            asyncQueryResult.setResponseBody(responseBody);\n+            asyncQueryResult.setContentLength(responseBody.length());\n+            asyncQueryResult.setQuery(asyncQuery);\n+            asyncQueryResult.setId(asyncQueryId);\n+            asyncQuery.setResult(asyncQueryResult);\n+            tx.createObject(asyncQueryResult, scope);\n+            tx.save(asyncQuery, scope);\n+            return asyncQueryResult;\n+        });\n+        return queryResultObj;\n+    }\n+\n+    @Override\n+    public Object executeInTransaction(DataStore dataStore, Transactional action) {\n+        log.debug(\"executeInTransaction\");\n+        Object result = null;\n+        try (DataStoreTransaction tx = dataStore.beginTransaction()) {\n+\t        JsonApiDocument jsonApiDoc = new JsonApiDocument();", "originalCommit": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4MzQzMQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r411683431", "bodyText": "Spacing is still off.", "author": "aklish", "createdAt": "2020-04-20T20:51:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwNjk1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java b/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\nindex 376eda9cb..c501312a9 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\n\n@@ -6,6 +6,7 @@\n package com.yahoo.elide.async.service;\n \n import java.io.IOException;\n+import java.util.Collection;\n import java.util.Iterator;\n import java.util.UUID;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwODUyMQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391108521", "bodyText": "Separate the load and delete.  This function should only delete (and not load anything).", "author": "aklish", "createdAt": "2020-03-11T16:40:15Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.UUID;\n+\n+import javax.inject.Singleton;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.core.DataStore;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.jsonapi.models.JsonApiDocument;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Utility class which implements AsyncQueryDAO\n+ */\n+@Singleton\n+@Slf4j\n+public class DefaultAsyncQueryDAO implements AsyncQueryDAO {\n+\n+    private Elide elide;\n+    private DataStore dataStore;\n+\n+    public DefaultAsyncQueryDAO() {}\n+\n+    public DefaultAsyncQueryDAO(Elide elide, DataStore dataStore) {\n+    \tthis.elide = elide;\n+    \tthis.dataStore = dataStore;\n+    }\n+\n+    @Override\n+    public void setElide(Elide elide) {\n+        this.elide = elide;\n+    }\n+\n+    @Override\n+    public void setDataStore(DataStore dataStore) {\n+        this.dataStore = dataStore;\n+    }\n+\n+    @Override\n+    public AsyncQuery updateAsyncQuery(UUID asyncQueryId, UpdateQuery updateFunction) {\n+        log.debug(\"updateAsyncQuery\");\n+        AsyncQuery queryObj = (AsyncQuery) executeInTransaction(dataStore, (tx, scope) -> {\n+            EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                    .type(AsyncQuery.class)\n+                    .build();\n+            AsyncQuery query = (AsyncQuery) tx.loadObject(asyncQueryCollection, asyncQueryId, scope);\n+            updateFunction.update(query);\n+            tx.save(query, scope);\n+            return query;\n+        });\n+        return queryObj;\n+    }\n+\n+    @Override\n+    public Iterable<Object> updateAsyncQueryCollection(Iterable<Object> asyncQueryList, UpdateQuery updateFunction) {\n+        log.debug(\"updateAsyncQueryCollection\");\n+        executeInTransaction(dataStore, (tx, scope) -> {\n+            EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                    .type(AsyncQuery.class)\n+                    .build();\n+\n+            Iterator<Object> itr = asyncQueryList.iterator();\n+            while(itr.hasNext()) {\n+                AsyncQuery query = (AsyncQuery) itr.next();\n+                AsyncQuery asyncQuery = (AsyncQuery) tx.loadObject(asyncQueryCollection, query.getId(), scope);\n+                updateFunction.update(asyncQuery);\n+                tx.save(asyncQuery, scope);\n+            }\n+            return asyncQueryList;\n+        });\n+        return asyncQueryList;\n+    }\n+\n+    @Override\n+    public Iterable<Object> deleteAsyncQueryAndResultCollection(Iterable<Object> asyncQueryList) {", "originalCommit": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java b/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\nindex 376eda9cb..c501312a9 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\n\n@@ -6,6 +6,7 @@\n package com.yahoo.elide.async.service;\n \n import java.io.IOException;\n+import java.util.Collection;\n import java.util.Iterator;\n import java.util.UUID;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwOTE4Mw==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391109183", "bodyText": "I don't think this function should load anything.  Load can be a separate function.", "author": "aklish", "createdAt": "2020-03-11T16:41:08Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.UUID;\n+\n+import javax.inject.Singleton;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.core.DataStore;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.jsonapi.models.JsonApiDocument;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Utility class which implements AsyncQueryDAO\n+ */\n+@Singleton\n+@Slf4j\n+public class DefaultAsyncQueryDAO implements AsyncQueryDAO {\n+\n+    private Elide elide;\n+    private DataStore dataStore;\n+\n+    public DefaultAsyncQueryDAO() {}\n+\n+    public DefaultAsyncQueryDAO(Elide elide, DataStore dataStore) {\n+    \tthis.elide = elide;\n+    \tthis.dataStore = dataStore;\n+    }\n+\n+    @Override\n+    public void setElide(Elide elide) {\n+        this.elide = elide;\n+    }\n+\n+    @Override\n+    public void setDataStore(DataStore dataStore) {\n+        this.dataStore = dataStore;\n+    }\n+\n+    @Override\n+    public AsyncQuery updateAsyncQuery(UUID asyncQueryId, UpdateQuery updateFunction) {\n+        log.debug(\"updateAsyncQuery\");\n+        AsyncQuery queryObj = (AsyncQuery) executeInTransaction(dataStore, (tx, scope) -> {\n+            EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                    .type(AsyncQuery.class)\n+                    .build();\n+            AsyncQuery query = (AsyncQuery) tx.loadObject(asyncQueryCollection, asyncQueryId, scope);\n+            updateFunction.update(query);\n+            tx.save(query, scope);\n+            return query;\n+        });\n+        return queryObj;\n+    }\n+\n+    @Override\n+    public Iterable<Object> updateAsyncQueryCollection(Iterable<Object> asyncQueryList, UpdateQuery updateFunction) {\n+        log.debug(\"updateAsyncQueryCollection\");\n+        executeInTransaction(dataStore, (tx, scope) -> {\n+            EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                    .type(AsyncQuery.class)\n+                    .build();\n+\n+            Iterator<Object> itr = asyncQueryList.iterator();\n+            while(itr.hasNext()) {\n+                AsyncQuery query = (AsyncQuery) itr.next();\n+                AsyncQuery asyncQuery = (AsyncQuery) tx.loadObject(asyncQueryCollection, query.getId(), scope);", "originalCommit": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NzYxOA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r397467618", "bodyText": "Same comment still applies.  All of these objects have already been loaded.  This will result in a lot of unnecessary calls to the DB.\nInstead of loading them, just call the updateFunction and save.", "author": "aklish", "createdAt": "2020-03-24T21:19:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwOTE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java b/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\nindex 376eda9cb..c501312a9 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\n\n@@ -6,6 +6,7 @@\n package com.yahoo.elide.async.service;\n \n import java.io.IOException;\n+import java.util.Collection;\n import java.util.Iterator;\n import java.util.UUID;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTExMTY0Ng==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391111646", "bodyText": "Add a function (see later comments):\nCollection<AsyncQuery> loadQueries(FilterExpression filter)", "author": "aklish", "createdAt": "2020-03-11T16:44:51Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.util.UUID;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.AsyncQueryResult;\n+import com.yahoo.elide.core.DataStore;\n+\n+/**\n+ * Utility interface which uses the elide datastore to modify, update and create\n+ * AsyncQuery and AsyncQueryResult Objects\n+ */\n+public interface AsyncQueryDAO {\n+\n+    /**\n+     * Set elide object\n+     * @param elide Elide Object.\n+     */\n+    public void setElide(Elide elide);\n+\n+    /**\n+     * Set data store object\n+     * @param dataStore Datastore Object from Elide.\n+     */\n+    public void setDataStore(DataStore dataStore);\n+", "originalCommit": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\nindex fe223aa73..39a5aa51b 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java\n\n@@ -5,12 +5,12 @@\n  */\n package com.yahoo.elide.async.service;\n \n+import java.util.Collection;\n import java.util.UUID;\n \n-import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.AsyncQueryResult;\n-import com.yahoo.elide.core.DataStore;\n+import com.yahoo.elide.async.models.QueryStatus;\n \n /**\n  * Utility interface which uses the elide datastore to modify, update and create\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTExNDE3MA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391114170", "bodyText": "We are logging the response above before we check for null here.", "author": "aklish", "createdAt": "2020-03-11T16:48:38Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.net.URISyntaxException;\n+\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideResponse;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.async.models.QueryType;\n+import com.yahoo.elide.graphql.QueryRunner;\n+import com.yahoo.elide.security.User;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for executing the query provided in Async Query.\n+ * It will also update the query status and result object at different\n+ * stages of execution.\n+ */\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+public class AsyncQueryThread implements Runnable {\n+\n+    private AsyncQuery queryObj;\n+    private User user;\n+    private Elide elide;\n+    private QueryRunner runner;\n+    private AsyncQueryDAO asyncQueryDao;\n+\n+    @Override\n+    public void run() {\n+        processQuery();\n+    }\n+\n+    /**\n+     * This is the main method which processes the Async Query request, executes the query and updates\n+     * values for AsyncQuery and AsyncQueryResult models accordingly.\n+     */\n+    protected void processQuery() {\n+        try {\n+            // Change async query to processing\n+            asyncQueryDao.updateAsyncQuery(queryObj.getId(), (asyncQuery) -> {\n+                asyncQuery.setStatus(QueryStatus.PROCESSING);\n+                });\n+            ElideResponse response = null;\n+            log.debug(\"AsyncQuery Object from request: {}\", queryObj);\n+            if (queryObj.getQueryType().equals(QueryType.JSONAPI_V1_0)) {\n+                MultivaluedMap<String, String> queryParams = getQueryParams(queryObj.getQuery());\n+                log.debug(\"Extracted QueryParams from AsyncQuery Object: {}\", queryParams);\n+                response = elide.get(getPath(queryObj.getQuery()), queryParams, user);\n+                log.debug(\"JSONAPI_V1_0 getResponseCode: {}, JSONAPI_V1_0 getBody: {}\", response.getResponseCode(), response.getBody());\n+            }\n+            else if (queryObj.getQueryType().equals(QueryType.GRAPHQL_V1_0)) {\n+                response = runner.run(queryObj.getQuery(), user);\n+                log.debug(\"GRAPHQL_V1_0 getResponseCode: {}, GRAPHQL_V1_0 getBody: {}\", response.getResponseCode(), response.getBody());\n+            }\n+            if (response != null){", "originalCommit": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTExNDkzOQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391114939", "bodyText": "Technically, I don't think this ever returns null.  I think it either returns non-null or throws an exception.", "author": "aklish", "createdAt": "2020-03-11T16:49:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTExNDE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTExNTM5NQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391115395", "bodyText": "Instead of checking for null, we can just add an assert here that will throw an exception if response is null.", "author": "aklish", "createdAt": "2020-03-11T16:50:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTExNDE3MA=="}], "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\nindex 9b205d0c8..abf73e908 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryThread.java\n\n@@ -11,6 +11,7 @@ import javax.ws.rs.core.MultivaluedHashMap;\n import javax.ws.rs.core.MultivaluedMap;\n \n import org.apache.http.NameValuePair;\n+import org.apache.http.NoHttpResponseException;\n import org.apache.http.client.utils.URIBuilder;\n \n import com.yahoo.elide.Elide;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTExNzc1Mw==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391117753", "bodyText": "There is some duplicate code here with the prior function.   We should write a utility function to consolidate it.", "author": "aklish", "createdAt": "2020-03-11T16:53:50Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.text.Format;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n+import com.yahoo.elide.core.filter.expression.FilterExpression;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for updating AsyncQueryThread status\n+ * beyond the max run time and if not terminated by interrupt process\n+ * due to app/host crash or restart.\n+ */\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+public class AsyncQueryCleanerThread implements Runnable {\n+\n+    private int maxRunTimeMinutes;\n+    private Elide elide;\n+    private int queryCleanupDays;\n+    private AsyncQueryDAO asyncQueryDao;\n+\n+    @Override\n+    public void run() {\n+        deleteAsyncQuery();\n+        timeoutAsyncQuery();\n+    }\n+\n+    /**\n+     * This method updates the status of long running async query which\n+     * were not interrupted due to host crash/app shutdown to TIMEDOUT.\n+     * */\n+    @SuppressWarnings(\"unchecked\")\n+    private void deleteAsyncQuery() {\n+\n+        //Calculate date to clean up\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(new Date());\n+        cal.add(Calendar.DATE, -(queryCleanupDays));\n+        Date cleanupDate = cal.getTime();\n+        Format dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm'Z'\");\n+        String cleanupDateFormatted = dateFormat.format(cleanupDate);\n+        log.debug(\"cleanupDateFormatted = {}\", cleanupDateFormatted);\n+\n+        String filterExpression = \"createdOn=le='\" + cleanupDateFormatted + \"'\";\n+\n+        Iterable<Object> loaded = getFilteredResults(filterExpression);\n+\n+        asyncQueryDao.deleteAsyncQueryAndResultCollection(loaded);\n+\n+    }\n+    \n+    /**\n+     * This method updates the status of long running async query which\n+     * were not interrupted due to host crash/app shutdown to TIMEDOUT.\n+     * */\n+\t@SuppressWarnings(\"unchecked\")\n+    private void timeoutAsyncQuery() {\n+\n+        //Calculate date to filter for clean up\n+        Calendar cal = Calendar.getInstance();", "originalCommit": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\nindex c36073e74..9bbe7c2f9 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n\n@@ -8,15 +8,12 @@ package com.yahoo.elide.async.service;\n import java.text.Format;\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n+import java.util.Collection;\n import java.util.Date;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.QueryStatus;\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n-import com.yahoo.elide.core.filter.expression.FilterExpression;\n-import com.yahoo.elide.request.EntityProjection;\n \n import lombok.AllArgsConstructor;\n import lombok.Data;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTExODAxNg==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391118016", "bodyText": "Shouldn't this be TIMEDOUT instead of PROCESSING?", "author": "aklish", "createdAt": "2020-03-11T16:54:15Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.text.Format;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n+import com.yahoo.elide.core.filter.expression.FilterExpression;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Runnable thread for updating AsyncQueryThread status\n+ * beyond the max run time and if not terminated by interrupt process\n+ * due to app/host crash or restart.\n+ */\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+public class AsyncQueryCleanerThread implements Runnable {\n+\n+    private int maxRunTimeMinutes;\n+    private Elide elide;\n+    private int queryCleanupDays;\n+    private AsyncQueryDAO asyncQueryDao;\n+\n+    @Override\n+    public void run() {\n+        deleteAsyncQuery();\n+        timeoutAsyncQuery();\n+    }\n+\n+    /**\n+     * This method updates the status of long running async query which\n+     * were not interrupted due to host crash/app shutdown to TIMEDOUT.\n+     * */\n+    @SuppressWarnings(\"unchecked\")\n+    private void deleteAsyncQuery() {\n+\n+        //Calculate date to clean up\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(new Date());\n+        cal.add(Calendar.DATE, -(queryCleanupDays));\n+        Date cleanupDate = cal.getTime();\n+        Format dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm'Z'\");\n+        String cleanupDateFormatted = dateFormat.format(cleanupDate);\n+        log.debug(\"cleanupDateFormatted = {}\", cleanupDateFormatted);\n+\n+        String filterExpression = \"createdOn=le='\" + cleanupDateFormatted + \"'\";\n+\n+        Iterable<Object> loaded = getFilteredResults(filterExpression);\n+\n+        asyncQueryDao.deleteAsyncQueryAndResultCollection(loaded);\n+\n+    }\n+    \n+    /**\n+     * This method updates the status of long running async query which\n+     * were not interrupted due to host crash/app shutdown to TIMEDOUT.\n+     * */\n+\t@SuppressWarnings(\"unchecked\")\n+    private void timeoutAsyncQuery() {\n+\n+        //Calculate date to filter for clean up\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(new Date());\n+        cal.add(Calendar.MINUTE, -(maxRunTimeMinutes));\n+        Date filterDate = cal.getTime();\n+        Format dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm'Z'\");\n+        String filterDateFormatted = dateFormat.format(filterDate);\n+        log.debug(\"FilterDateFormatted = {}\", filterDateFormatted);\n+        String filterExpression = \"status=in=(\" + QueryStatus.PROCESSING.toString() + \",\"\n+                + QueryStatus.QUEUED.toString() + \");createdOn=le='\" + filterDateFormatted + \"'\";\n+\n+        Iterable<Object> loaded = getFilteredResults(filterExpression);\n+\n+        asyncQueryDao.updateAsyncQueryCollection(loaded, (asyncQuery) -> {\n+            asyncQuery.setStatus(QueryStatus.PROCESSING);", "originalCommit": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\nindex c36073e74..9bbe7c2f9 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryCleanerThread.java\n\n@@ -8,15 +8,12 @@ package com.yahoo.elide.async.service;\n import java.text.Format;\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n+import java.util.Collection;\n import java.util.Date;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n import com.yahoo.elide.async.models.QueryStatus;\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.core.filter.dialect.RSQLFilterDialect;\n-import com.yahoo.elide.core.filter.expression.FilterExpression;\n-import com.yahoo.elide.request.EntityProjection;\n \n import lombok.AllArgsConstructor;\n import lombok.Data;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyMDEyOA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391120128", "bodyText": "This doesn't look right to me.  I don't think a Constructor should be calling the a factory method for itself (the singleton).", "author": "aklish", "createdAt": "2020-03-11T16:57:26Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncCleanerService.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.util.Random;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.yahoo.elide.Elide;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Service to execute Async queries. It will schedule task to track long\n+ * running queries and kills them. It will also schedule task to update\n+ * orphan query statuses after host/app crash or restart.\n+ */\n+@Slf4j\n+@Singleton\n+public class AsyncCleanerService {\n+\n+    private final int DEFAULT_CLEANUP_DELAY_MINUTES = 360;\n+    private final int MAX_CLEANUP_INTIAL_DELAY_MINUTES = 100;\n+\n+    private static AsyncCleanerService asyncCleanerService;\n+    private ScheduledExecutorService cleanerService;\n+\n+    @Inject\n+    public AsyncCleanerService(Elide elide, Integer maxRunTimeMinutes, Integer queryCleanupDays, AsyncQueryDAO asyncQueryDao) {\n+\n+    \t//If query is still running for twice than maxRunTime, then interrupt did not work due to host/app crash.\n+    \tint queryRunTimeThresholdMinutes = maxRunTimeMinutes * 2;\n+    \t\n+        // Setting up query cleaner that marks long running query as TIMEDOUT.\n+        ScheduledExecutorService cleaner = AsyncCleanerService.getInstance().getExecutorService();", "originalCommit": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncCleanerService.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncCleanerService.java\nindex 7d4886f22..507b25eb3 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncCleanerService.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncCleanerService.java\n\n@@ -11,7 +11,6 @@ import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n import javax.inject.Inject;\n-import javax.inject.Singleton;\n \n import com.yahoo.elide.Elide;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyMDYzOQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391120639", "bodyText": "Why do we have the two constructors?", "author": "aklish", "createdAt": "2020-03-11T16:58:09Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncCleanerService.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.util.Random;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.yahoo.elide.Elide;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Service to execute Async queries. It will schedule task to track long\n+ * running queries and kills them. It will also schedule task to update\n+ * orphan query statuses after host/app crash or restart.\n+ */\n+@Slf4j\n+@Singleton\n+public class AsyncCleanerService {\n+\n+    private final int DEFAULT_CLEANUP_DELAY_MINUTES = 360;\n+    private final int MAX_CLEANUP_INTIAL_DELAY_MINUTES = 100;\n+\n+    private static AsyncCleanerService asyncCleanerService;\n+    private ScheduledExecutorService cleanerService;\n+\n+    @Inject\n+    public AsyncCleanerService(Elide elide, Integer maxRunTimeMinutes, Integer queryCleanupDays, AsyncQueryDAO asyncQueryDao) {\n+\n+    \t//If query is still running for twice than maxRunTime, then interrupt did not work due to host/app crash.\n+    \tint queryRunTimeThresholdMinutes = maxRunTimeMinutes * 2;\n+    \t\n+        // Setting up query cleaner that marks long running query as TIMEDOUT.\n+        ScheduledExecutorService cleaner = AsyncCleanerService.getInstance().getExecutorService();\n+        AsyncQueryCleanerThread cleanUpTask = new AsyncQueryCleanerThread(queryRunTimeThresholdMinutes, elide, queryCleanupDays, asyncQueryDao);\n+\n+        // Since there will be multiple hosts running the elide service,\n+        // setting up random delays to avoid all of them trying to cleanup at the same time.\n+        Random random = new Random();\n+        int initialDelayMinutes = random.ints(0, MAX_CLEANUP_INTIAL_DELAY_MINUTES).limit(1).findFirst().getAsInt();\n+        log.debug(\"Initial Delay for cleaner service is {}\", initialDelayMinutes);\n+\n+        //Having a delay of at least DEFAULT_CLEANUP_DELAY between two cleanup attempts.\n+        //Or maxRunTimeMinutes * 2 so that this process does not coincides with query interrupt process.\n+        cleaner.scheduleWithFixedDelay(cleanUpTask, initialDelayMinutes, Math.max(DEFAULT_CLEANUP_DELAY_MINUTES, queryRunTimeThresholdMinutes), TimeUnit.MINUTES);\n+    }\n+\n+    private static AsyncCleanerService getInstance() {\n+        if (asyncCleanerService == null) {\n+          synchronized (AsyncCleanerService.class) {\n+        \t  asyncCleanerService = new AsyncCleanerService();\n+          }\n+        }\n+        return asyncCleanerService;\n+    }\n+\n+    private AsyncCleanerService() {", "originalCommit": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncCleanerService.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncCleanerService.java\nindex 7d4886f22..507b25eb3 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncCleanerService.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncCleanerService.java\n\n@@ -11,7 +11,6 @@ import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n import javax.inject.Inject;\n-import javax.inject.Singleton;\n \n import com.yahoo.elide.Elide;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyMTAzOQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391121039", "bodyText": "Why do we need these two constructors?", "author": "aklish", "createdAt": "2020-03-11T16:58:42Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.util.Date;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.graphql.QueryRunner;\n+import com.yahoo.elide.security.User;\n+\n+/**\n+ * Service to execute Async queries. It will schedule task to track long\n+ * running queries and kills them. It will also schedule task to update\n+ * orphan query statuses after host/app crash or restart.\n+ */\n+@Singleton\n+public class AsyncExecutorService {\n+\n+    private final int DEFAULT_THREADPOOL_SIZE = 6;\n+\n+    private Elide elide;\n+    private QueryRunner runner;\n+    private ExecutorService executor;\n+    private ExecutorService interruptor;\n+    private int maxRunTime;\n+    private static AsyncExecutorService asyncExecutorService;\n+    private AsyncQueryDAO asyncQueryDao;\n+    \n+\n+    @Inject\n+    public AsyncExecutorService(Elide elide, Integer threadPoolSize, Integer maxRunTime, AsyncQueryDAO asyncQueryDao) {\n+        this.elide = elide;\n+        this.runner = new QueryRunner(elide);\n+        this.maxRunTime = maxRunTime;\n+        executor = AsyncExecutorService.getInstance(threadPoolSize == null ? DEFAULT_THREADPOOL_SIZE : threadPoolSize).getExecutorService();\n+        interruptor = AsyncExecutorService.getInstance(threadPoolSize == null ? DEFAULT_THREADPOOL_SIZE : threadPoolSize).getInterruptorService();\n+        this.asyncQueryDao = asyncQueryDao;\n+    }\n+\n+    public void executeQuery(AsyncQuery queryObj, User user) {\n+        AsyncQueryThread queryWorker = new AsyncQueryThread(queryObj, user, elide, runner, asyncQueryDao);\n+        // Change async query in Datastore to queued\n+        asyncQueryDao.updateAsyncQuery(queryObj.getId(), (asyncQueryObj) -> {\n+            asyncQueryObj.setStatus(QueryStatus.QUEUED);\n+            });\n+        AsyncQueryInterruptThread queryInterruptWorker = new AsyncQueryInterruptThread(elide, executor.submit(queryWorker), queryObj.getId(), new Date(), \n+                maxRunTime, asyncQueryDao);\n+        interruptor.execute(queryInterruptWorker);\n+    }\n+\n+    private static AsyncExecutorService getInstance(int threadPoolSize) {\n+        if (asyncExecutorService == null) {\n+          synchronized (AsyncExecutorService.class) {\n+        \t  asyncExecutorService = new AsyncExecutorService(threadPoolSize);\n+            }\n+          }\n+        return asyncExecutorService;\n+    }\n+\n+    private AsyncExecutorService(int threadPoolSize) {", "originalCommit": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java\nindex aa456982e..ab858b2ef 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java\n\n@@ -10,7 +10,6 @@ import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n \n import javax.inject.Inject;\n-import javax.inject.Singleton;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyMTM5Nw==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r391121397", "bodyText": "This looks wrong to me.  A constructor should not call a factory method on itself.  Maybe we should just eliminate all the singletons?", "author": "aklish", "createdAt": "2020-03-11T16:59:16Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.service;\n+\n+import java.util.Date;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryStatus;\n+import com.yahoo.elide.graphql.QueryRunner;\n+import com.yahoo.elide.security.User;\n+\n+/**\n+ * Service to execute Async queries. It will schedule task to track long\n+ * running queries and kills them. It will also schedule task to update\n+ * orphan query statuses after host/app crash or restart.\n+ */\n+@Singleton\n+public class AsyncExecutorService {\n+\n+    private final int DEFAULT_THREADPOOL_SIZE = 6;\n+\n+    private Elide elide;\n+    private QueryRunner runner;\n+    private ExecutorService executor;\n+    private ExecutorService interruptor;\n+    private int maxRunTime;\n+    private static AsyncExecutorService asyncExecutorService;\n+    private AsyncQueryDAO asyncQueryDao;\n+    \n+\n+    @Inject\n+    public AsyncExecutorService(Elide elide, Integer threadPoolSize, Integer maxRunTime, AsyncQueryDAO asyncQueryDao) {\n+        this.elide = elide;\n+        this.runner = new QueryRunner(elide);\n+        this.maxRunTime = maxRunTime;\n+        executor = AsyncExecutorService.getInstance(threadPoolSize == null ? DEFAULT_THREADPOOL_SIZE : threadPoolSize).getExecutorService();", "originalCommit": "7b16cb4c979d3ffc9b47a8634fc2aa8a39a89a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java\nindex aa456982e..ab858b2ef 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java\n\n@@ -10,7 +10,6 @@ import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n \n import javax.inject.Inject;\n-import javax.inject.Singleton;\n \n import com.yahoo.elide.Elide;\n import com.yahoo.elide.async.models.AsyncQuery;\n"}}, {"oid": "e222f31ab23061016e4a67116e65e75ce13ff71a", "url": "https://github.com/yahoo/elide/commit/e222f31ab23061016e4a67116e65e75ce13ff71a", "message": "Resolve some review comments\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-12T18:33:33Z", "type": "commit"}, {"oid": "05c496e7c62ad6fe6ffd77af34c926ceef8009a7", "url": "https://github.com/yahoo/elide/commit/05c496e7c62ad6fe6ffd77af34c926ceef8009a7", "message": "Changing the DAO contract and updating references to DAO\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-13T17:53:51Z", "type": "commit"}, {"oid": "46f20fb0f933d6a931c315d424055f0b0e7dc7de", "url": "https://github.com/yahoo/elide/commit/46f20fb0f933d6a931c315d424055f0b0e7dc7de", "message": "Removing singletons and extra constructors, simplyfing logic\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-15T20:55:19Z", "type": "commit"}, {"oid": "71c902eb201c824953109bad119d84b544599bfc", "url": "https://github.com/yahoo/elide/commit/71c902eb201c824953109bad119d84b544599bfc", "message": "Adding default constructor and setters for DefaultDAO\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-15T21:47:08Z", "type": "commit"}, {"oid": "78dd5dfd30c7ba3b6861bd94d4bf1adb02c9ae77", "url": "https://github.com/yahoo/elide/commit/78dd5dfd30c7ba3b6861bd94d4bf1adb02c9ae77", "message": "Fixing codacy error\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-16T14:47:36Z", "type": "commit"}, {"oid": "fe6f5300333ba380eb0cdfb19138a35eb925ec7f", "url": "https://github.com/yahoo/elide/commit/fe6f5300333ba380eb0cdfb19138a35eb925ec7f", "message": "Changing Base to use correct obj\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-20T23:45:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNzg3MA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r397437870", "bodyText": "let's check that the object classes are also equal.", "author": "aklish", "createdAt": "2020-03-24T20:24:45Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncBase.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.yahoo.elide.async.models;\n+\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+\n+import com.yahoo.elide.annotation.Exclude;\n+\n+import lombok.Getter;\n+\n+@MappedSuperclass\n+public abstract class AsyncBase {\n+\n+    @Getter private Date createdOn;\n+\n+    @Getter private Date updatedOn;\n+\n+    @Exclude\n+    protected String naturalKey = UUID.randomUUID().toString();\n+\n+    @PrePersist\n+    public void prePersist() {\n+        createdOn = updatedOn = new Date();\n+    }\n+\n+    @PreUpdate\n+    public void preUpdate() {\n+        this.updatedOn = new Date();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return naturalKey.hashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == null || !(obj instanceof AsyncBase)) {", "originalCommit": "fe6f5300333ba380eb0cdfb19138a35eb925ec7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncBase.java b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncBase.java\nindex 901df35e1..a8cf25861 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncBase.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/models/AsyncBase.java\n\n@@ -38,7 +38,7 @@ public abstract class AsyncBase {\n \n     @Override\n     public boolean equals(Object obj) {\n-        if (obj == null || !(obj instanceof AsyncBase)) {\n+        if (obj == null || !(obj instanceof AsyncBase) || this.getClass() != obj.getClass()) {\n             return false;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NDI1MQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r397464251", "bodyText": "This one line can be moved outside the transaction.", "author": "aklish", "createdAt": "2020-03-24T21:12:42Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java", "diffHunk": "@@ -127,8 +149,38 @@ public AsyncQueryResult setAsyncQueryAndResult(Integer status, String responseBo\n         return queryResultObj;\n     }\n \n-    @Override\n-    public Object executeInTransaction(DataStore dataStore, Transactional action) {\n+    @SuppressWarnings(\"unchecked\")\n+    public Collection<AsyncQuery> loadQueries(String filterExpression) {\n+        EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n+        RSQLFilterDialect filterParser = new RSQLFilterDialect(dictionary);\n+\n+        Collection<AsyncQuery> loaded = (Collection<AsyncQuery>) executeInTransaction(dataStore, (tx, scope) -> {\n+            try {\n+                FilterExpression filter = filterParser.parseFilterExpression(filterExpression, AsyncQuery.class, false);", "originalCommit": "fe6f5300333ba380eb0cdfb19138a35eb925ec7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NjEwNA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r397546104", "bodyText": "If we move this line outside the anonymous function - we would have to put it in a try catch block and move the filter variable as a class level variable else we get: Local variable filter defined in an enclosing scope must be final or effectively final. Do you want this variable to be a class level variable?", "author": "Abhino", "createdAt": "2020-03-25T00:43:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NDI1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4NDk1Mw==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r411684953", "bodyText": "You can make filter final inside the loadQueries function.  Then you can move outside the try/catch block.", "author": "aklish", "createdAt": "2020-04-20T20:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NDI1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java b/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\nindex fe3b4fb70..c501312a9 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\n\n@@ -165,7 +167,7 @@ public class DefaultAsyncQueryDAO implements AsyncQueryDAO {\n \n                 Iterable<Object> loadedObj = tx.loadObjects(asyncQueryCollection, scope);\n                 return loadedObj;\n-            } catch (Exception e) {\n+            } catch (ParseException e) {\n                 log.error(\"Exception: {}\", e);\n             }\n             return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NDc5Mw==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r397464793", "bodyText": "I wonder if this will swallow exceptions that would have been caught and handled by the outer transaction function.  Would it be better to let that function handle the exceptions?", "author": "aklish", "createdAt": "2020-03-24T21:13:45Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java", "diffHunk": "@@ -127,8 +149,38 @@ public AsyncQueryResult setAsyncQueryAndResult(Integer status, String responseBo\n         return queryResultObj;\n     }\n \n-    @Override\n-    public Object executeInTransaction(DataStore dataStore, Transactional action) {\n+    @SuppressWarnings(\"unchecked\")\n+    public Collection<AsyncQuery> loadQueries(String filterExpression) {\n+        EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n+        RSQLFilterDialect filterParser = new RSQLFilterDialect(dictionary);\n+\n+        Collection<AsyncQuery> loaded = (Collection<AsyncQuery>) executeInTransaction(dataStore, (tx, scope) -> {\n+            try {\n+                FilterExpression filter = filterParser.parseFilterExpression(filterExpression, AsyncQuery.class, false);\n+\n+                EntityProjection asyncQueryCollection = EntityProjection.builder()\n+                        .type(AsyncQuery.class)\n+                        .filterExpression(filter)\n+                        .build();\n+\n+                Iterable<Object> loadedObj = tx.loadObjects(asyncQueryCollection, scope);\n+                return loadedObj;\n+            } catch (Exception e) {", "originalCommit": "fe6f5300333ba380eb0cdfb19138a35eb925ec7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java b/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\nindex fe3b4fb70..c501312a9 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\n\n@@ -165,7 +167,7 @@ public class DefaultAsyncQueryDAO implements AsyncQueryDAO {\n \n                 Iterable<Object> loadedObj = tx.loadObjects(asyncQueryCollection, scope);\n                 return loadedObj;\n-            } catch (Exception e) {\n+            } catch (ParseException e) {\n                 log.error(\"Exception: {}\", e);\n             }\n             return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2ODg4OA==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r397468888", "bodyText": "Same comment about the load below.  The objects can be assumed to have already been loaded.  This function can just call tx.delete.", "author": "aklish", "createdAt": "2020-03-24T21:21:56Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java", "diffHunk": "@@ -87,14 +109,14 @@ public AsyncQuery updateAsyncQuery(UUID asyncQueryId, UpdateQuery updateFunction\n     }\n \n     @Override\n-    public Iterable<Object> deleteAsyncQueryAndResultCollection(Iterable<Object> asyncQueryList) {\n+    public Collection<AsyncQuery> deleteAsyncQueryAndResultCollection(Collection<AsyncQuery> asyncQueryList) {\n         log.debug(\"deleteAsyncQueryAndResultCollection\");\n         executeInTransaction(dataStore, (tx, scope) -> {\n             EntityProjection asyncQueryCollection = EntityProjection.builder()\n                     .type(AsyncQuery.class)\n                     .build();\n \n-            Iterator<Object> itr = asyncQueryList.iterator();\n+            Iterator<AsyncQuery> itr = asyncQueryList.iterator();", "originalCommit": "fe6f5300333ba380eb0cdfb19138a35eb925ec7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3NDM1OQ==", "url": "https://github.com/yahoo/elide/pull/1203#discussion_r397574359", "bodyText": "We are able to remove the load object logic for the update, but does not work with delete. Even calling save before delete does not work. It throws TransactionException trying to remove a detached entity.", "author": "moizarafat", "createdAt": "2020-03-25T02:28:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2ODg4OA=="}], "type": "inlineReview", "revised_code": {"commit": "58d1f0feb452839cbbb06efc9460b3410a79a88c", "chunk": "diff --git a/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java b/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\nindex fe3b4fb70..c501312a9 100644\n--- a/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\n+++ b/elide-async/src/main/java/com/yahoo/elide/async/service/DefaultAsyncQueryDAO.java\n\n@@ -92,16 +89,11 @@ public class DefaultAsyncQueryDAO implements AsyncQueryDAO {\n     private Collection<AsyncQuery> updateAsyncQueryCollection(Collection<AsyncQuery> asyncQueryList, UpdateQuery updateFunction) {\n         log.debug(\"updateAsyncQueryCollection\");\n         executeInTransaction(dataStore, (tx, scope) -> {\n-            EntityProjection asyncQueryCollection = EntityProjection.builder()\n-                    .type(AsyncQuery.class)\n-                    .build();\n-\n             Iterator<AsyncQuery> itr = asyncQueryList.iterator();\n             while(itr.hasNext()) {\n                 AsyncQuery query = (AsyncQuery) itr.next();\n-                AsyncQuery asyncQuery = (AsyncQuery) tx.loadObject(asyncQueryCollection, query.getId(), scope);\n-                updateFunction.update(asyncQuery);\n-                tx.save(asyncQuery, scope);\n+                updateFunction.update(query);\n+                tx.save(query, scope);\n             }\n             return asyncQueryList;\n         });\n"}}, {"oid": "fac0a26ebb73a28517694dbf6eca0588739f1154", "url": "https://github.com/yahoo/elide/commit/fac0a26ebb73a28517694dbf6eca0588739f1154", "message": "Fixing review comments\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-25T07:27:33Z", "type": "commit"}, {"oid": "681ee7603c4c3f56341124af0f0904e2022e33a7", "url": "https://github.com/yahoo/elide/commit/681ee7603c4c3f56341124af0f0904e2022e33a7", "message": "Resolving review comments\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-25T16:34:40Z", "type": "commit"}, {"oid": "26f83caac1e5f9d314fb5df562de880925cb4147", "url": "https://github.com/yahoo/elide/commit/26f83caac1e5f9d314fb5df562de880925cb4147", "message": "Review comments\n\nCo-authored-by: Abhino <Abhino@gmail.com>", "committedDate": "2020-03-25T21:02:49Z", "type": "commit"}, {"oid": "5a2325c7c1daf0919a4256bcb82784b5bab8d284", "url": "https://github.com/yahoo/elide/commit/5a2325c7c1daf0919a4256bcb82784b5bab8d284", "message": "Merge branch 'elide-5.x' into elide-5.x-async", "committedDate": "2020-03-26T16:58:47Z", "type": "commit"}, {"oid": "70038d5a065c54556906c736ca9125784be81e76", "url": "https://github.com/yahoo/elide/commit/70038d5a065c54556906c736ca9125784be81e76", "message": "Elide 5.x elide-async integration in elide-standalone (#1205)\n\n* Integrating elide-async.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Default enableAsync to False.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Default enableAsync to False.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Integrating elide-async.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Default enableAsync to False.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Default enableAsync to False.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Resolving review comments.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Resolving review comments.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Removing unwanted params.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Binding Cleaner service.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\nBinding Cleaner service.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Adding query result retention.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Integrating elide-async.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Default enableAsync to False.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Default enableAsync to False.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Integrating elide-async.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Resolving review comments.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Resolving review comments.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Removing unwanted params.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Binding Cleaner service.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\nBinding Cleaner service.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Adding query result retention.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Making AsyncQueryDAO configurable\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Making AsyncQueryDAO configurable\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Review comments\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Review comments\r\n\r\nCo-authored-by: abhino <abhino@gmail.com>\r\n\r\n* Changing call to DefaultAsyncQueryDAO\r\n\r\n* Review comments\r\n\r\nCo-authored-by: Abhino <Abhino@gmail.com>\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-26T19:24:04Z", "type": "commit"}, {"oid": "98c5c3ce85b133dd7c8962a94e6b788e6dfbe205", "url": "https://github.com/yahoo/elide/commit/98c5c3ce85b133dd7c8962a94e6b788e6dfbe205", "message": "Elide 5.x elide-async integration in elide-spring (#1204)\n\n* Integrating elide-async.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\nIntegrating elide-async.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Removing unwanted params.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Binding Cleaner service.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Adding query result retention.\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Adding DAO configuration\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Checkstyle error\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Review comments\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Review comments\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>\r\n\r\n* Review comments\r\n\r\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-26T19:37:23Z", "type": "commit"}, {"oid": "517697dfd9864fa1387a69c3f36e801cc6bf4360", "url": "https://github.com/yahoo/elide/commit/517697dfd9864fa1387a69c3f36e801cc6bf4360", "message": "Codacy Error\n\nCo-authored-by: Abhino <Abhino@gmail.com>", "committedDate": "2020-03-26T19:56:50Z", "type": "commit"}, {"oid": "26ff9607c3d38d6c02b87ac8bc3b4fc92f8bd384", "url": "https://github.com/yahoo/elide/commit/26ff9607c3d38d6c02b87ac8bc3b4fc92f8bd384", "message": "Changing include type to asyncQuery to avoid conflict\n\nCo-authored-by: moizarafat <moiz.arafat@gmail.com>", "committedDate": "2020-03-26T21:23:41Z", "type": "commit"}, {"oid": "9232b3f2b1dbfb35a8b488bd9a91b81adf1006cd", "url": "https://github.com/yahoo/elide/commit/9232b3f2b1dbfb35a8b488bd9a91b81adf1006cd", "message": "Sync\n\nCo-authored-by: Abhino <Abhino@gmail.com>", "committedDate": "2020-03-26T22:13:05Z", "type": "commit"}]}