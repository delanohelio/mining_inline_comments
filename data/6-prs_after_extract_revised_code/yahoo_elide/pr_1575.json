{"pr_number": 1575, "pr_title": "Standardize Template Substitutions for Join definition", "pr_createdAt": "2020-10-05T15:31:13Z", "pr_url": "https://github.com/yahoo/elide/pull/1575", "timeline": [{"oid": "04cb650f8ef8f1dccc83b4196dcd3ee5cb479f00", "url": "https://github.com/yahoo/elide/commit/04cb650f8ef8f1dccc83b4196dcd3ee5cb479f00", "message": "Update validation logic", "committedDate": "2020-10-09T13:55:14Z", "type": "forcePushed"}, {"oid": "33bf630ffbc4e83e7416233c5b40d5052c445868", "url": "https://github.com/yahoo/elide/commit/33bf630ffbc4e83e7416233c5b40d5052c445868", "message": "Update validation logic", "committedDate": "2020-10-13T20:29:25Z", "type": "forcePushed"}, {"oid": "84853a0e4200aa506a7455d646e8b3353888bb06", "url": "https://github.com/yahoo/elide/commit/84853a0e4200aa506a7455d646e8b3353888bb06", "message": "Standardize template substitutions for Join Expressions", "committedDate": "2020-10-17T21:37:42Z", "type": "forcePushed"}, {"oid": "15bdededd5b7441576a522cc43a930c83780762c", "url": "https://github.com/yahoo/elide/commit/15bdededd5b7441576a522cc43a930c83780762c", "message": "Standardize template substitutions for Join Expressions", "committedDate": "2020-10-18T16:29:56Z", "type": "forcePushed"}, {"oid": "c32d30ffd928765cc8e6b829c32ffa9912b8fbd3", "url": "https://github.com/yahoo/elide/commit/c32d30ffd928765cc8e6b829c32ffa9912b8fbd3", "message": "Standardize template substitutions for Join Expressions", "committedDate": "2020-10-18T17:55:34Z", "type": "forcePushed"}, {"oid": "b525886e83361827bc8f9f10da1a5fc0a13c45ed", "url": "https://github.com/yahoo/elide/commit/b525886e83361827bc8f9f10da1a5fc0a13c45ed", "message": "Standardize template substitutions for Join Expressions", "committedDate": "2020-10-18T17:56:59Z", "type": "forcePushed"}, {"oid": "8ac044652e6052bef9813ba0fe4706008b9c55e6", "url": "https://github.com/yahoo/elide/commit/8ac044652e6052bef9813ba0fe4706008b9c55e6", "message": "Standardize template substitutions for Join Expressions", "committedDate": "2020-10-18T18:05:30Z", "type": "forcePushed"}, {"oid": "129ac3ed1985bfc3e42629b80cee4957f402a305", "url": "https://github.com/yahoo/elide/commit/129ac3ed1985bfc3e42629b80cee4957f402a305", "message": "Standardize template substitutions for Join Expressions", "committedDate": "2020-10-18T18:13:55Z", "type": "forcePushed"}, {"oid": "7debbb3b3244f3cc78186abf314bd93cbb70ade0", "url": "https://github.com/yahoo/elide/commit/7debbb3b3244f3cc78186abf314bd93cbb70ade0", "message": "Standardize template substitutions for Join Expressions", "committedDate": "2020-10-19T00:11:26Z", "type": "forcePushed"}, {"oid": "25baa2b465bafc08c36de31e587cdc46194012f6", "url": "https://github.com/yahoo/elide/commit/25baa2b465bafc08c36de31e587cdc46194012f6", "message": "Standardize template substitutions for Join Expressions", "committedDate": "2020-10-19T13:56:45Z", "type": "forcePushed"}, {"oid": "dab8d19a3668efe5683dd1c4741299c403d1c7ba", "url": "https://github.com/yahoo/elide/commit/dab8d19a3668efe5683dd1c4741299c403d1c7ba", "message": "Standardize template substitutions for Join Expressions", "committedDate": "2020-10-19T14:32:44Z", "type": "forcePushed"}, {"oid": "40dfb5343b9cd8aa63980e4db26debdb6c1f1502", "url": "https://github.com/yahoo/elide/commit/40dfb5343b9cd8aa63980e4db26debdb6c1f1502", "message": "Standardize template substitutions for Join Expressions", "committedDate": "2020-10-19T15:32:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NzQyOQ==", "url": "https://github.com/yahoo/elide/pull/1575#discussion_r507897429", "bodyText": "This works a little different than how other references are resolved.  The SQLReferenceVisitor is normally called at service start and all the references are saved off in the SQLReferenceTable.  From that point onward, only lookups happen in the reference table.\nIs there any reason we can't follow the same approach here?", "author": "aklish", "createdAt": "2020-10-19T16:41:04Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/query/QueryTranslator.java", "diffHunk": "@@ -268,14 +270,29 @@ private String extractJoinClause(Class<?> fromClass,\n                         dictionary.getAnnotatedColumnName(\n                                 joinClass,\n                                 dictionary.getIdFieldName(joinClass)))\n-                : extractJoinExpression(join.value(), fromAlias, joinAlias);\n+                : getJoinClause(fromClass, fromAlias, joinClass, joinAlias, join.value());\n \n         return String.format(\"LEFT JOIN %s AS %s ON %s\",\n                 joinSource,\n                 joinAlias,\n                 joinClause);\n     }\n \n+    /**\n+     * Resolve references to construct a join ON clause.\n+     *\n+     * @param fromClass parent class\n+     * @param fromAlias parent alias\n+     * @param joinClass join class\n+     * @param joinAlias join alias\n+     * @param expr unresolved ON clause\n+     * @return string resolved ON clause\n+     */\n+    private String getJoinClause(Class<?> fromClass, String fromAlias, Class<?> joinClass, String joinAlias,\n+                    String expr) {\n+        SQLReferenceVisitor visitor = new SQLReferenceVisitor(referenceTable.getMetaDataStore(), fromAlias);", "originalCommit": "40dfb5343b9cd8aa63980e4db26debdb6c1f1502", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "532ee1f2cc79774cbc431faf813154e8cab49f23", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/query/QueryTranslator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/query/QueryTranslator.java\nindex 88219b4d3..677d207d8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/query/QueryTranslator.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/query/QueryTranslator.java\n\n@@ -270,7 +271,7 @@ public class QueryTranslator implements QueryVisitor<SQLQuery.SQLQueryBuilder> {\n                         dictionary.getAnnotatedColumnName(\n                                 joinClass,\n                                 dictionary.getIdFieldName(joinClass)))\n-                : getJoinClause(fromClass, fromAlias, joinClass, joinAlias, join.value());\n+                : getJoinClause(fromClass, fromAlias, join.value());\n \n         return String.format(\"LEFT JOIN %s AS %s ON %s\",\n                 joinSource,\n"}}, {"oid": "532ee1f2cc79774cbc431faf813154e8cab49f23", "url": "https://github.com/yahoo/elide/commit/532ee1f2cc79774cbc431faf813154e8cab49f23", "message": "Allow physical column references from referred table in parent table.", "committedDate": "2020-10-20T17:12:21Z", "type": "forcePushed"}, {"oid": "5eff935503fa924d1bd6b23747f1008f27a64914", "url": "https://github.com/yahoo/elide/commit/5eff935503fa924d1bd6b23747f1008f27a64914", "message": "Allow physical column references from referred table in parent table.", "committedDate": "2020-10-20T17:13:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczNzc1MA==", "url": "https://github.com/yahoo/elide/pull/1575#discussion_r508737750", "bodyText": "Make this protected.", "author": "aklish", "createdAt": "2020-10-20T18:12:45Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/Path.java", "diffHunk": "@@ -58,6 +58,9 @@ public PathElement(Class type, Class fieldType, String fieldName) {\n         }\n     }\n \n+    public Path() {", "originalCommit": "5eff935503fa924d1bd6b23747f1008f27a64914", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc2NzIyMg==", "url": "https://github.com/yahoo/elide/pull/1575#discussion_r508767222", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-10-20T18:57:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczNzc1MA=="}], "type": "inlineReview", "revised_code": {"commit": "665681176c5a4143443fd05b75bb0093c04e5818", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/Path.java b/elide-core/src/main/java/com/yahoo/elide/core/Path.java\nindex 026e50d4c..e48f25327 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/Path.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/Path.java\n\n@@ -58,7 +58,7 @@ public class Path {\n         }\n     }\n \n-    public Path() {\n+    protected Path() {\n     }\n \n     public Path(Path copy) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc0MzEwNQ==", "url": "https://github.com/yahoo/elide/pull/1575#discussion_r508743105", "bodyText": "Since we don't know the field type, we could make it Object.class.", "author": "aklish", "createdAt": "2020-10-20T18:21:14Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/JoinPath.java", "diffHunk": "@@ -61,4 +63,43 @@ public JoinPath extend(String extensionPath, EntityDictionary dictionary) {\n         toExtend.addAll(extension.getPathElements());\n         return new JoinPath(toExtend);\n     }\n+\n+    /**\n+     * Resolve a dot separated path into list of path elements.\n+     *\n+     * @param entityClass root class e.g. \"foo\"\n+     * @param dictionary dictionary\n+     * @param dotSeparatedPath path e.g. \"bar.baz\"\n+     * @return list of path elements e.g. [\"foo.bar\", \"bar.baz\"]\n+     */\n+    private List<PathElement> resolvePathElements(Class<?> entityClass,\n+                                                  EntityDictionary dictionary,\n+                                                  String dotSeparatedPath) {\n+        List<PathElement> elements = new ArrayList<>();\n+        String[] fieldNames = dotSeparatedPath.split(\"\\\\.\");\n+\n+        Class<?> currentClass = entityClass;\n+        for (String fieldName : fieldNames) {\n+            if (needNavigation(currentClass, fieldName, dictionary)) {\n+                Class<?> joinClass = dictionary.getParameterizedType(currentClass, fieldName);\n+                elements.add(new PathElement(currentClass, joinClass, fieldName));\n+                currentClass = joinClass;\n+            } else {\n+                elements.add(resolvePathAttribute(currentClass, dictionary, fieldName));\n+            }\n+        }\n+\n+        return ImmutableList.copyOf(elements);\n+    }\n+\n+    private PathElement resolvePathAttribute(Class<?> entityClass,\n+                                             EntityDictionary dictionary,\n+                                             String fieldName) {\n+        Class<?> attributeClass = null;", "originalCommit": "5eff935503fa924d1bd6b23747f1008f27a64914", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc2NzE1Mg==", "url": "https://github.com/yahoo/elide/pull/1575#discussion_r508767152", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-10-20T18:57:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc0MzEwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "665681176c5a4143443fd05b75bb0093c04e5818", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/JoinPath.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/JoinPath.java\nindex 36ef0a324..c0088c8b9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/JoinPath.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/core/JoinPath.java\n\n@@ -95,7 +95,7 @@ public class JoinPath extends Path {\n     private PathElement resolvePathAttribute(Class<?> entityClass,\n                                              EntityDictionary dictionary,\n                                              String fieldName) {\n-        Class<?> attributeClass = null;\n+        Class<?> attributeClass = Object.class;\n         if (dictionary.isAttribute(entityClass, fieldName)\n                         || fieldName.equals(dictionary.getIdFieldName(entityClass))) {\n             attributeClass = dictionary.getType(entityClass, fieldName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc0Njc1Mg==", "url": "https://github.com/yahoo/elide/pull/1575#discussion_r508746752", "bodyText": "Should this be private?", "author": "aklish", "createdAt": "2020-10-20T18:27:14Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceVisitor.java", "diffHunk": "@@ -81,16 +81,25 @@ protected String visitFormulaDimension(ColumnProjection dimension) {\n      * @return\n      */\n     private String visitFormulaColumn(ColumnProjection column) {\n-        Queryable source  = column.getSource();\n+        return resolveReferences(column.getSource(), column.getExpression(), column.getName());\n+    }\n \n-        String expr = column.getExpression();\n+    /**\n+     * Resolve references.\n+     *\n+     * @param source\n+     * @param expr expression with unresolved references\n+     * @param logicalName logical column name\n+     * @return expression with resolved references\n+     */\n+    public String resolveReferences(Queryable source, String expr, String logicalName) {", "originalCommit": "5eff935503fa924d1bd6b23747f1008f27a64914", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc2NzA4MA==", "url": "https://github.com/yahoo/elide/pull/1575#discussion_r508767080", "bodyText": "No, Its called from QueryTranslator's getJoinClause method", "author": "rishi-aga", "createdAt": "2020-10-20T18:57:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc0Njc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQxOTE4Mg==", "url": "https://github.com/yahoo/elide/pull/1575#discussion_r509419182", "bodyText": "I'd prefer is this class was kept private to the construction of the SQLReferenceTable.", "author": "aklish", "createdAt": "2020-10-21T16:12:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc0Njc1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e5e51fdaefbef8cf2d8ca432098d3132ce724bc3", "chunk": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceVisitor.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceVisitor.java\nindex e880000e1..cf5c161c8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceVisitor.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/metadata/SQLReferenceVisitor.java\n\n@@ -81,25 +82,16 @@ public class SQLReferenceVisitor extends ColumnVisitor<String> {\n      * @return\n      */\n     private String visitFormulaColumn(ColumnProjection column) {\n-        return resolveReferences(column.getSource(), column.getExpression(), column.getName());\n-    }\n+        Queryable source  = column.getSource();\n \n-    /**\n-     * Resolve references.\n-     *\n-     * @param source\n-     * @param expr expression with unresolved references\n-     * @param logicalName logical column name\n-     * @return expression with resolved references\n-     */\n-    public String resolveReferences(Queryable source, String expr, String logicalName) {\n+        String expr = column.getExpression();\n \n         // replace references with resolved statements/expressions\n-        for (String reference : resolveFormulaReferences(expr)) {\n+        for (String reference : resolveFormulaReferences(column.getExpression())) {\n             String resolvedReference;\n \n             //The column is sourced from a query rather than a table.\n-            if (source != source.getSource()) {\n+            if (column.getSource() != column.getSource().getSource()) {\n                 resolvedReference = visitPhysicalReference(reference);\n \n             //The reference is a join to another logical column.\n"}}, {"oid": "665681176c5a4143443fd05b75bb0093c04e5818", "url": "https://github.com/yahoo/elide/commit/665681176c5a4143443fd05b75bb0093c04e5818", "message": "Review Comments", "committedDate": "2020-10-20T19:20:38Z", "type": "forcePushed"}, {"oid": "e5e51fdaefbef8cf2d8ca432098d3132ce724bc3", "url": "https://github.com/yahoo/elide/commit/e5e51fdaefbef8cf2d8ca432098d3132ce724bc3", "message": "Standardize template substitutions for Join Expressions", "committedDate": "2020-10-27T00:47:19Z", "type": "commit"}, {"oid": "62254b7e6317822109529b5493ad860ff4c46d61", "url": "https://github.com/yahoo/elide/commit/62254b7e6317822109529b5493ad860ff4c46d61", "message": "Allow physical column references from referred table in parent table.", "committedDate": "2020-10-27T00:50:31Z", "type": "commit"}, {"oid": "2289b841132a9d72f37f9c78940e7b7c696441a1", "url": "https://github.com/yahoo/elide/commit/2289b841132a9d72f37f9c78940e7b7c696441a1", "message": "Review Comments", "committedDate": "2020-10-27T00:50:31Z", "type": "commit"}, {"oid": "db3e1f0934491a3b8014ac3f75fe04392c662379", "url": "https://github.com/yahoo/elide/commit/db3e1f0934491a3b8014ac3f75fe04392c662379", "message": "Resolve join expressions during service start", "committedDate": "2020-10-27T00:50:31Z", "type": "commit"}, {"oid": "b775033734d11fc21438576f948db2fe84ea2428", "url": "https://github.com/yahoo/elide/commit/b775033734d11fc21438576f948db2fe84ea2428", "message": "Timegrain rebase", "committedDate": "2020-10-27T01:16:21Z", "type": "commit"}, {"oid": "b775033734d11fc21438576f948db2fe84ea2428", "url": "https://github.com/yahoo/elide/commit/b775033734d11fc21438576f948db2fe84ea2428", "message": "Timegrain rebase", "committedDate": "2020-10-27T01:16:21Z", "type": "forcePushed"}, {"oid": "d9b4720a83a26d02b82c5b8fea1d3778b0b4567a", "url": "https://github.com/yahoo/elide/commit/d9b4720a83a26d02b82c5b8fea1d3778b0b4567a", "message": "revert method split", "committedDate": "2020-10-27T02:43:30Z", "type": "commit"}, {"oid": "c73ba437e5ca486d8dd49b0c0459cf9cf7e6b94e", "url": "https://github.com/yahoo/elide/commit/c73ba437e5ca486d8dd49b0c0459cf9cf7e6b94e", "message": "Codacy error", "committedDate": "2020-10-27T14:25:36Z", "type": "commit"}, {"oid": "91fc34df3fae64c254f55d059f30d2ac6890206b", "url": "https://github.com/yahoo/elide/commit/91fc34df3fae64c254f55d059f30d2ac6890206b", "message": "Remove unused code", "committedDate": "2020-10-27T15:44:38Z", "type": "commit"}]}