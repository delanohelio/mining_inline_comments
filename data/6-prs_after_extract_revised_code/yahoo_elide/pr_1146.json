{"pr_number": 1146, "pr_title": "Removed UpdateOnCreate.  Refactored AuditLogger, Pagination, & Sorting", "pr_createdAt": "2020-01-19T00:59:15Z", "pr_url": "https://github.com/yahoo/elide/pull/1146", "timeline": [{"oid": "1e1b957d3983049b877ccf777d52bab4db3bf00f", "url": "https://github.com/yahoo/elide/commit/1e1b957d3983049b877ccf777d52bab4db3bf00f", "message": "Removed UpdateOnCreate.  Refactored AuditLogger", "committedDate": "2020-01-19T00:56:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1ODE5Mg==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r368258192", "bodyText": "@aklish Currently, our audit logger uses requestScope to access the transaction in order to save audit record information to the database.  Is there another way then to access request scope?", "author": "wcekan", "createdAt": "2020-01-19T01:17:11Z", "path": "elide-core/src/main/java/com/yahoo/elide/audit/AuditLogger.java", "diffHunk": "@@ -27,7 +25,7 @@ public void log(LogMessage message) {\n         messages.get().add(message);\n     }\n \n-    public abstract void commit(RequestScope requestScope) throws IOException;\n+    public abstract void commit() throws IOException;", "originalCommit": "1e1b957d3983049b877ccf777d52bab4db3bf00f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "a9393a211380076634f6765f96c377651ad8a004", "url": "https://github.com/yahoo/elide/commit/a9393a211380076634f6765f96c377651ad8a004", "message": "Refactored Sorting", "committedDate": "2020-01-20T20:34:57Z", "type": "commit"}, {"oid": "16a5cd76820a17af6f95fa699ae9813f0d7c4235", "url": "https://github.com/yahoo/elide/commit/16a5cd76820a17af6f95fa699ae9813f0d7c4235", "message": "Refactored Pagination", "committedDate": "2020-01-21T04:32:32Z", "type": "commit"}, {"oid": "8d080be2d4c69cfb4070366ed0bc4f2f218e5426", "url": "https://github.com/yahoo/elide/commit/8d080be2d4c69cfb4070366ed0bc4f2f218e5426", "message": "Refactored Pagination", "committedDate": "2020-01-21T20:53:47Z", "type": "commit"}, {"oid": "75d03c4f5cc11e7a58080b7c24a77be8e771337b", "url": "https://github.com/yahoo/elide/commit/75d03c4f5cc11e7a58080b7c24a77be8e771337b", "message": "Pagination refactor builds and tests pass", "committedDate": "2020-01-21T21:53:33Z", "type": "commit"}, {"oid": "a188983b4083687f65f1ce346f8da4b04018a52d", "url": "https://github.com/yahoo/elide/commit/a188983b4083687f65f1ce346f8da4b04018a52d", "message": "Codacy fixes", "committedDate": "2020-01-22T18:34:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2ODA3Mg==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372168072", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2015, Yahoo Inc.\n          \n          \n            \n             * Copyright 2020, Yahoo Inc.", "author": "jkusa", "createdAt": "2020-01-29T03:02:07Z", "path": "elide-core/src/main/java/com/yahoo/elide/audit/LogMessageImpl.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2015, Yahoo Inc.", "originalCommit": "1e1b957d3983049b877ccf777d52bab4db3bf00f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY0MTU5Nw==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r373641597", "bodyText": "changed", "author": "aklish", "createdAt": "2020-01-31T19:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2ODA3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "eb37bef6117a79cb933533e7ea72307e9b5c75ee", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/audit/LogMessageImpl.java b/elide-core/src/main/java/com/yahoo/elide/audit/LogMessageImpl.java\nindex 216925b75..0cb46e517 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/audit/LogMessageImpl.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/audit/LogMessageImpl.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2015, Yahoo Inc.\n+ * Copyright 2020, Yahoo Inc.\n  * Licensed under the Apache License, Version 2.0\n  * See LICENSE file in project root for terms.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2ODQzMw==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372168433", "bodyText": "What is an operation code in this context?", "author": "jkusa", "createdAt": "2020-01-29T03:03:32Z", "path": "elide-core/src/main/java/com/yahoo/elide/audit/LogMessage.java", "diffHunk": "@@ -1,202 +1,54 @@\n /*\n- * Copyright 2015, Yahoo Inc.\n+ * Copyright 2019, Yahoo Inc.\n  * Licensed under the Apache License, Version 2.0\n  * See LICENSE file in project root for terms.\n  */\n+\n package com.yahoo.elide.audit;\n \n-import com.yahoo.elide.annotation.Audit;\n-import com.yahoo.elide.core.PersistentResource;\n-import com.yahoo.elide.core.RequestScope;\n-import com.yahoo.elide.core.ResourceLineage;\n import com.yahoo.elide.security.ChangeSpec;\n-\n+import com.yahoo.elide.security.PersistentResource;\n import com.yahoo.elide.security.User;\n-import de.odysseus.el.ExpressionFactoryImpl;\n-import de.odysseus.el.util.SimpleContext;\n \n-import java.text.MessageFormat;\n-import java.util.List;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n-\n-import javax.el.ELException;\n-import javax.el.ExpressionFactory;\n-import javax.el.PropertyNotFoundException;\n-import javax.el.ValueExpression;\n \n /**\n- * An audit log message that can be logged to a logger.\n+ * Elide audit entity for a CRUD action.\n  */\n-public class LogMessage {\n-    //Supposedly this is thread safe.\n-    private static final ExpressionFactory EXPRESSION_FACTORY = new ExpressionFactoryImpl();\n-    private static final String[] EMPTY_STRING_ARRAY = new String[0];\n-\n-    private final String template;\n-    private final PersistentResource record;\n-    private final String[] expressions;\n-    private final int operationCode;\n-    private final Optional<ChangeSpec> changeSpec;\n+public interface LogMessage {\n \n     /**\n-     * Construct a log message that does not involve any templating.\n-     * @param template - The unsubstituted text that will be logged.\n-     * @param code - The operation code of the auditable action.\n+     * Gets message.\n+     *\n+     * @return the message\n      */\n-    public LogMessage(String template, int code) {\n-        this(template, null, EMPTY_STRING_ARRAY, code, Optional.empty());\n-    }\n+    public String getMessage();\n \n     /**\n-     * Construct a log message from an Audit annotation and the record that was updated in some way.\n-     * @param audit - The annotation containing the type of operation (UPDATE, DELETE, CREATE)\n-     * @param record - The modified record\n-     * @param changeSpec - Change spec of modified elements (if logging object change). empty otherwise\n-     * @throws InvalidSyntaxException if the Audit annotation has invalid syntax.\n+     * Gets operation code.\n+     *\n+     * @return the operation code\n      */\n-    public LogMessage(Audit audit, PersistentResource record, Optional<ChangeSpec> changeSpec)\n-            throws InvalidSyntaxException {\n-        this(audit.logStatement(), record, audit.logExpressions(), audit.operation(), changeSpec);\n-    }\n+    public int getOperationCode();", "originalCommit": "1e1b957d3983049b877ccf777d52bab4db3bf00f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3ODk2Ng==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372578966", "bodyText": "The original audit design allowed for all log messages to have an audit code.  Most audit systems have something like this (in addition to a log message).", "author": "aklish", "createdAt": "2020-01-29T19:15:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2ODQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MDE1NA==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372590154", "bodyText": "This is a generic value correct? Can we mention that in the javadocs?", "author": "jkusa", "createdAt": "2020-01-29T19:38:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2ODQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY0MjIxNw==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r373642217", "bodyText": "\ud83d\udc4d", "author": "aklish", "createdAt": "2020-01-31T19:18:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2ODQzMw=="}], "type": "inlineReview", "revised_code": {"commit": "5ca920427f85c0500ea16affc4a06a84ad25ece8", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/audit/LogMessage.java b/elide-core/src/main/java/com/yahoo/elide/audit/LogMessage.java\nindex a6ed8f38a..18e383de0 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/audit/LogMessage.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/audit/LogMessage.java\n\n@@ -25,7 +25,8 @@ public interface LogMessage {\n     public String getMessage();\n \n     /**\n-     * Gets operation code.\n+     * Gets operation code.  The operation code is assigned by the developer to uniquely identify\n+     * the type of change that is being audited.  Operation code definitions are outside the scope of Elide.\n      *\n      * @return the operation code\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3MDg3Mg==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372170872", "bodyText": "Can we rename the file to LogMessageImplTest.java?", "author": "jkusa", "createdAt": "2020-01-29T03:14:42Z", "path": "elide-core/src/test/java/com/yahoo/elide/audit/LogMessageTest.java", "diffHunk": "@@ -73,15 +73,15 @@ public String getName() {\n     @Test\n     public void verifyOpaqueUserExpressions() {\n         final String[] expressions = { \"${opaqueUser.name}\", \"${opaqueUser.name}\" };\n-        final LogMessage message = new LogMessage(\"{0} {1}\", childRecord, expressions, 1, Optional.empty());\n+        final LogMessageImpl message = new LogMessageImpl(\"{0} {1}\", childRecord, expressions, 1, Optional.empty());", "originalCommit": "1e1b957d3983049b877ccf777d52bab4db3bf00f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4Mjk5MQ==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372582991", "bodyText": "\ud83d\udc4d", "author": "aklish", "createdAt": "2020-01-29T19:23:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3MDg3Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3MTU0MA==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372171540", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LogMessageImpl message = new LogMessageImpl(annotation, this, Optional.of(changeSpec));\n          \n          \n            \n                            LogMessage message = new LogMessageImpl(annotation, this, Optional.of(changeSpec));", "author": "jkusa", "createdAt": "2020-01-29T03:18:24Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java", "diffHunk": "@@ -1768,7 +1768,7 @@ protected void auditField(final ChangeSpec changeSpec) {\n         }\n         for (Audit annotation : annotations) {\n             if (annotation.action().length == 1 && annotation.action()[0] == Audit.Action.UPDATE) {\n-                LogMessage message = new LogMessage(annotation, this, Optional.of(changeSpec));\n+                LogMessageImpl message = new LogMessageImpl(annotation, this, Optional.of(changeSpec));", "originalCommit": "1e1b957d3983049b877ccf777d52bab4db3bf00f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3OTY5MA==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372579690", "bodyText": "\ud83d\udc4d", "author": "aklish", "createdAt": "2020-01-29T19:17:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3MTU0MA=="}], "type": "inlineReview", "revised_code": {"commit": "eb37bef6117a79cb933533e7ea72307e9b5c75ee", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java b/elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java\nindex 703b2daa5..161f4bf3d 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java\n\n@@ -1768,7 +1766,7 @@ public class PersistentResource<T> implements com.yahoo.elide.security.Persisten\n         }\n         for (Audit annotation : annotations) {\n             if (annotation.action().length == 1 && annotation.action()[0] == Audit.Action.UPDATE) {\n-                LogMessageImpl message = new LogMessageImpl(annotation, this, Optional.of(changeSpec));\n+                LogMessage message = new LogMessageImpl(annotation, this, Optional.of(changeSpec));\n                 getRequestScope().getAuditLogger().log(message);\n             } else {\n                 throw new InvalidSyntaxException(\"Only Audit.Action.UPDATE is allowed on fields.\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3MTczOA==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372171738", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                LogMessageImpl message = new LogMessageImpl(annotation, this, Optional.ofNullable(changeSpec));\n          \n          \n            \n                                LogMessage message = new LogMessageImpl(annotation, this, Optional.ofNullable(changeSpec));", "author": "jkusa", "createdAt": "2020-01-29T03:19:34Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java", "diffHunk": "@@ -1791,7 +1791,7 @@ protected void auditClass(Audit.Action action, ChangeSpec changeSpec) {\n         for (Audit annotation : annotations) {\n             for (Audit.Action auditAction : annotation.action()) {\n                 if (auditAction == action) { // compare object reference\n-                    LogMessage message = new LogMessage(annotation, this, Optional.ofNullable(changeSpec));\n+                    LogMessageImpl message = new LogMessageImpl(annotation, this, Optional.ofNullable(changeSpec));", "originalCommit": "1e1b957d3983049b877ccf777d52bab4db3bf00f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY0MjQzNA==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r373642434", "bodyText": "Already changed", "author": "aklish", "createdAt": "2020-01-31T19:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3MTczOA=="}], "type": "inlineReview", "revised_code": {"commit": "eb37bef6117a79cb933533e7ea72307e9b5c75ee", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java b/elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java\nindex 703b2daa5..161f4bf3d 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/PersistentResource.java\n\n@@ -1791,7 +1789,7 @@ public class PersistentResource<T> implements com.yahoo.elide.security.Persisten\n         for (Audit annotation : annotations) {\n             for (Audit.Action auditAction : annotation.action()) {\n                 if (auditAction == action) { // compare object reference\n-                    LogMessageImpl message = new LogMessageImpl(annotation, this, Optional.ofNullable(changeSpec));\n+                    LogMessage message = new LogMessageImpl(annotation, this, Optional.ofNullable(changeSpec));\n                     getRequestScope().getAuditLogger().log(message);\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NDg2Ng==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372174866", "bodyText": "Could this be simplified with:\nSorting sorting = SortingImpl.parseQueryParams(scope.getQueryParams().get(), entityClass, dictionary);", "author": "jkusa", "createdAt": "2020-01-29T03:37:21Z", "path": "elide-core/src/main/java/com/yahoo/elide/jsonapi/EntityProjectionMaker.java", "diffHunk": "@@ -136,11 +138,16 @@ public EntityProjection parseInclude(Class<?> entityClass) {\n             Class<?> entityClass = getEntityClass(parentClass, entityName);\n             FilterExpression filter = scope.getExpressionForRelation(parentClass, entityName).orElse(null);\n \n+            Sorting sorting = SortingImpl.getDefaultEmptyInstance();\n+            if (scope.getQueryParams().isPresent()) {\n+                sorting = SortingImpl.parseQueryParams(scope.getQueryParams().get(), entityClass, dictionary);", "originalCommit": "a9393a211380076634f6765f96c377651ad8a004", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4MjA3Ng==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372582076", "bodyText": "That doesn't cover the case where there are no query params.   I believe the code is as simple as can be.", "author": "aklish", "createdAt": "2020-01-29T19:22:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NDg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MjUxOA==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372592518", "bodyText": "Can this cover that case:\n\n  \n    \n      elide/elide-core/src/main/java/com/yahoo/elide/core/sort/SortingImpl.java\n    \n    \n         Line 152\n      in\n      eb37bef\n    \n    \n    \n    \n\n        \n          \n           return sortingRules.isEmpty() ? DEFAULT_EMPTY_INSTANCE : new SortingImpl(sortingRules, type, dictionary);", "author": "jkusa", "createdAt": "2020-01-29T19:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NDg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY1NDA5Mg==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r373654092", "bodyText": "Check out the new refactor.", "author": "aklish", "createdAt": "2020-01-31T19:45:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NDg2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "eb37bef6117a79cb933533e7ea72307e9b5c75ee", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/jsonapi/EntityProjectionMaker.java b/elide-core/src/main/java/com/yahoo/elide/jsonapi/EntityProjectionMaker.java\nindex 143a2c99a..9d6143f61 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/jsonapi/EntityProjectionMaker.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/jsonapi/EntityProjectionMaker.java\n\n@@ -139,8 +141,11 @@ public class EntityProjectionMaker\n             FilterExpression filter = scope.getExpressionForRelation(parentClass, entityName).orElse(null);\n \n             Sorting sorting = SortingImpl.getDefaultEmptyInstance();\n+            Pagination pagination = PaginationImpl.getDefaultPagination(entityClass, scope.getElideSettings());\n             if (scope.getQueryParams().isPresent()) {\n                 sorting = SortingImpl.parseQueryParams(scope.getQueryParams().get(), entityClass, dictionary);\n+                pagination = PaginationImpl.parseQueryParams(entityClass,\n+                        scope.getQueryParams().get(), scope.getElideSettings());\n             }\n \n             return NamedEntityProjection.builder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NTI2MQ==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372175261", "bodyText": "Do we need this? Can simply return null in parseSortRules?", "author": "jkusa", "createdAt": "2020-01-29T03:39:40Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/sort/SortingImpl.java", "diffHunk": "@@ -25,25 +27,29 @@\n  */\n @ToString\n @EqualsAndHashCode\n-public class Sorting {\n-\n-    /**\n-     * Denotes the intended sort type from json-api field.\n-     */\n-    public enum SortOrder { asc, desc }\n+public class SortingImpl implements Sorting {\n \n     private final Map<String, SortOrder> sortRules = new LinkedHashMap<>();\n-    private static final Sorting DEFAULT_EMPTY_INSTANCE = null;\n+    private static final SortingImpl DEFAULT_EMPTY_INSTANCE = null;", "originalCommit": "a9393a211380076634f6765f96c377651ad8a004", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4MDQ0Mg==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372580442", "bodyText": "This makes sorting consistent with pagination and allows us to introduce a default Sort annotation similar to what we have for Pagination in the future.", "author": "aklish", "createdAt": "2020-01-29T19:18:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NTI2MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NTMwOA==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372175308", "bodyText": "Same here?", "author": "jkusa", "createdAt": "2020-01-29T03:39:55Z", "path": "elide-core/src/main/java/com/yahoo/elide/jsonapi/EntityProjectionMaker.java", "diffHunk": "@@ -261,11 +268,16 @@ public EntityProjection visitIncludePath(Path path) {\n                 filter = scope.getExpressionForRelation(parentClass, collectionNameText).orElse(null);\n             }\n \n+            Sorting sorting = SortingImpl.getDefaultEmptyInstance();", "originalCommit": "a9393a211380076634f6765f96c377651ad8a004", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4MjEyNg==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372582126", "bodyText": "See above.", "author": "aklish", "createdAt": "2020-01-29T19:22:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NTMwOA=="}], "type": "inlineReview", "revised_code": {"commit": "eb37bef6117a79cb933533e7ea72307e9b5c75ee", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/jsonapi/EntityProjectionMaker.java b/elide-core/src/main/java/com/yahoo/elide/jsonapi/EntityProjectionMaker.java\nindex 143a2c99a..9d6143f61 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/jsonapi/EntityProjectionMaker.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/jsonapi/EntityProjectionMaker.java\n\n@@ -269,8 +274,11 @@ public class EntityProjectionMaker\n             }\n \n             Sorting sorting = SortingImpl.getDefaultEmptyInstance();\n+            Pagination pagination = PaginationImpl.getDefaultPagination(entityClass, scope.getElideSettings());\n             if (scope.getQueryParams().isPresent()) {\n                 sorting = SortingImpl.parseQueryParams(scope.getQueryParams().get(), entityClass, dictionary);\n+                pagination = PaginationImpl.parseQueryParams(entityClass,\n+                        scope.getQueryParams().get(), scope.getElideSettings());\n             }\n \n             return NamedEntityProjection.builder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NjA2OQ==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372176069", "bodyText": "Would this be better named isEmpty()", "author": "jkusa", "createdAt": "2020-01-29T03:44:13Z", "path": "elide-core/src/main/java/com/yahoo/elide/request/Sorting.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.request;\n+\n+import com.yahoo.elide.core.Path;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents a client request to sort a collection.\n+ */\n+public interface Sorting {\n+\n+   /**\n+    * Denotes the intended sort direction (ascending or descending).\n+    */\n+    public enum SortOrder { asc, desc }\n+\n+    /**\n+     * Return an ordered map of paths and their sort order.\n+     * @param <T> The type to sort.\n+     * @return An ordered map of paths and their sort order.\n+     */\n+    public <T> Map<Path, SortOrder> getSortingPaths();\n+\n+    /**\n+     * Get the type of the collection to sort.\n+     * @return the collection type.\n+     */\n+    public Class<?> getType();\n+\n+    /**\n+     * Is this sorting the default instance (not present).\n+     * @return true if sorting wasn't requested.  False otherwise.\n+     */\n+    public boolean isDefaultInstance();", "originalCommit": "a9393a211380076634f6765f96c377651ad8a004", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4MjczNw==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372582737", "bodyText": "Default may not equal empty in the future.", "author": "aklish", "createdAt": "2020-01-29T19:23:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NjA2OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3Nzc5MQ==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372177791", "bodyText": "Should these constants be defined in the interface?", "author": "jkusa", "createdAt": "2020-01-29T03:54:23Z", "path": "elide-core/src/main/java/com/yahoo/elide/ElideSettingsBuilder.java", "diffHunk": "@@ -45,8 +45,8 @@\n     private List<JoinFilterDialect> joinFilterDialects;\n     private List<SubqueryFilterDialect> subqueryFilterDialects;\n     private Map<Class, Serde> serdes;\n-    private int defaultMaxPageSize = Pagination.MAX_PAGE_LIMIT;\n-    private int defaultPageSize = Pagination.DEFAULT_PAGE_LIMIT;\n+    private int defaultMaxPageSize = PaginationImpl.MAX_PAGE_LIMIT;\n+    private int defaultPageSize = PaginationImpl.DEFAULT_PAGE_LIMIT;", "originalCommit": "16a5cd76820a17af6f95fa699ae9813f0d7c4235", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3ODUxOA==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372578518", "bodyText": "\ud83d\udc4d", "author": "aklish", "createdAt": "2020-01-29T19:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3Nzc5MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3ODg0MQ==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372178841", "bodyText": "isEmpty? hasNone?", "author": "jkusa", "createdAt": "2020-01-29T04:00:52Z", "path": "elide-core/src/main/java/com/yahoo/elide/request/Pagination.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.request;\n+\n+/**\n+ * Represents a client request to paginate a collection.\n+ */\n+public interface Pagination {\n+    /**\n+     * Get the page offset.\n+     * @return record offset.\n+     */\n+    int getOffset();\n+\n+    /**\n+     * Get the page limit.\n+     * @return record limit.\n+     */\n+    int getLimit();\n+\n+    /**\n+     * Whether or not to fetch the collection size or not.\n+     * @return true if the client wants the total size of the collection.\n+     */\n+    boolean returnPageTotals();\n+\n+    /**\n+     * Get the total size of the collection\n+     * @return total record count.\n+     */\n+    long getPageTotals();\n+\n+    /**\n+     * Set the total size of the collection.\n+     * @param pageTotals the total size.\n+     */\n+    void setPageTotals(long pageTotals);\n+\n+    /**\n+     * Is this the default instance (not present).\n+     * @return true if pagination wasn't requested.  False otherwise.\n+     */\n+    public boolean isDefaultInstance();", "originalCommit": "16a5cd76820a17af6f95fa699ae9813f0d7c4235", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb37bef6117a79cb933533e7ea72307e9b5c75ee", "chunk": "diff --git a/elide-core/src/main/java/com/yahoo/elide/request/Pagination.java b/elide-core/src/main/java/com/yahoo/elide/request/Pagination.java\nindex 8098fdb42..a0d69f817 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/request/Pagination.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/request/Pagination.java\n\n@@ -10,39 +10,55 @@ package com.yahoo.elide.request;\n  * Represents a client request to paginate a collection.\n  */\n public interface Pagination {\n+\n+    /**\n+     * Default offset (in records) it client does not provide one.\n+     */\n+    public static final int DEFAULT_OFFSET = 0;\n+\n+    /**\n+     * Default page limit (in records) it client does not provide one.\n+     */\n+    public static final int DEFAULT_PAGE_LIMIT = 500;\n+\n+    /**\n+     * Maximum allowable page limit (in records).\n+     */\n+    public static final int MAX_PAGE_LIMIT = 10000;\n+\n     /**\n      * Get the page offset.\n      * @return record offset.\n      */\n-    int getOffset();\n+    Integer getOffset();\n \n     /**\n      * Get the page limit.\n      * @return record limit.\n      */\n-    int getLimit();\n+    Integer getLimit();\n \n     /**\n      * Whether or not to fetch the collection size or not.\n      * @return true if the client wants the total size of the collection.\n      */\n-    boolean returnPageTotals();\n+    Boolean returnPageTotals();\n \n     /**\n      * Get the total size of the collection\n      * @return total record count.\n      */\n-    long getPageTotals();\n+    Long getPageTotals();\n \n     /**\n      * Set the total size of the collection.\n      * @param pageTotals the total size.\n      */\n-    void setPageTotals(long pageTotals);\n+    void setPageTotals(Long pageTotals);\n \n     /**\n      * Is this the default instance (not present).\n      * @return true if pagination wasn't requested.  False otherwise.\n      */\n-    public boolean isDefaultInstance();\n+    public Boolean isDefaultInstance();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3OTEzOQ==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372179139", "bodyText": "Should we rename the file to PaginationImplTest.java", "author": "jkusa", "createdAt": "2020-01-29T04:02:39Z", "path": "elide-core/src/test/java/com/yahoo/elide/core/PaginationLogicTest.java", "diffHunk": "@@ -14,7 +14,7 @@\n import com.yahoo.elide.ElideSettingsBuilder;\n import com.yahoo.elide.annotation.Paginate;\n import com.yahoo.elide.core.exceptions.InvalidValueException;\n-import com.yahoo.elide.core.pagination.Pagination;\n+import com.yahoo.elide.core.pagination.PaginationImpl;", "originalCommit": "16a5cd76820a17af6f95fa699ae9813f0d7c4235", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4MzI1Ng==", "url": "https://github.com/yahoo/elide/pull/1146#discussion_r372583256", "bodyText": "\ud83d\udc4d", "author": "aklish", "createdAt": "2020-01-29T19:24:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3OTEzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "eb37bef6117a79cb933533e7ea72307e9b5c75ee", "chunk": "diff --git a/elide-core/src/test/java/com/yahoo/elide/core/PaginationLogicTest.java b/elide-core/src/test/java/com/yahoo/elide/core/PaginationImplTest.java\nsimilarity index 61%\nrename from elide-core/src/test/java/com/yahoo/elide/core/PaginationLogicTest.java\nrename to elide-core/src/test/java/com/yahoo/elide/core/PaginationImplTest.java\nindex f2ac525fb..25a30ca70 100644\n--- a/elide-core/src/test/java/com/yahoo/elide/core/PaginationLogicTest.java\n+++ b/elide-core/src/test/java/com/yahoo/elide/core/PaginationImplTest.java\n\n@@ -18,14 +18,12 @@ import com.yahoo.elide.core.pagination.PaginationImpl;\n import org.glassfish.jersey.internal.util.collection.MultivaluedStringMap;\n import org.junit.jupiter.api.Test;\n \n-import java.util.Optional;\n-\n import javax.ws.rs.core.MultivaluedMap;\n \n /**\n  * Tests parsing the page params for json-api pagination.\n  */\n-public class PaginationLogicTest {\n+public class PaginationImplTest {\n     private final ElideSettings elideSettings =\n             new ElideSettingsBuilder(null).build();\n \n"}}, {"oid": "eb37bef6117a79cb933533e7ea72307e9b5c75ee", "url": "https://github.com/yahoo/elide/commit/eb37bef6117a79cb933533e7ea72307e9b5c75ee", "message": "Inspection rework", "committedDate": "2020-01-29T19:27:27Z", "type": "commit"}, {"oid": "42436f1191a806a10defbae5a78b462f31c09ba9", "url": "https://github.com/yahoo/elide/commit/42436f1191a806a10defbae5a78b462f31c09ba9", "message": "Fixes build", "committedDate": "2020-01-30T04:44:10Z", "type": "commit"}, {"oid": "5ca920427f85c0500ea16affc4a06a84ad25ece8", "url": "https://github.com/yahoo/elide/commit/5ca920427f85c0500ea16affc4a06a84ad25ece8", "message": "More inspection rework", "committedDate": "2020-01-31T19:46:04Z", "type": "commit"}, {"oid": "c13d306d52976f20a6ae8b5b95cf86fa9f85610f", "url": "https://github.com/yahoo/elide/commit/c13d306d52976f20a6ae8b5b95cf86fa9f85610f", "message": "Fix build", "committedDate": "2020-01-31T20:58:13Z", "type": "commit"}]}