{"pr_number": 1239, "pr_title": "ColumnProjection Refactor", "pr_createdAt": "2020-03-26T19:30:24Z", "pr_url": "https://github.com/yahoo/elide/pull/1239", "timeline": [{"oid": "3dbb55598cb13f018cecaa457bfaf4ff348dcf31", "url": "https://github.com/yahoo/elide/commit/3dbb55598cb13f018cecaa457bfaf4ff348dcf31", "message": "unify projections", "committedDate": "2020-03-26T19:26:13Z", "type": "commit"}, {"oid": "0df1d658611d8b3049bd82b2a79bb88f7ff14a46", "url": "https://github.com/yahoo/elide/commit/0df1d658611d8b3049bd82b2a79bb88f7ff14a46", "message": "remove getFunction()", "committedDate": "2020-03-26T19:39:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1NjYwMQ==", "url": "https://github.com/yahoo/elide/pull/1239#discussion_r398856601", "bodyText": "return this instead?  DO we need this function?", "author": "aklish", "createdAt": "2020-03-26T20:03:32Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/query/TimeDimensionProjection.java", "diffHunk": "@@ -55,16 +47,17 @@ default Column getColumn() {\n      * @return a new projection\n      */\n     default TimeDimensionProjection toTimeGrain(TimeGrain newGrain) {\n-        if (getTimeDimension().getSupportedGrains().stream()\n+        if (getColumn().getSupportedGrains().stream()\n                 .noneMatch(supportedGrain -> supportedGrain.getGrain().equals(newGrain))) {\n-            throw new InvalidValueException(getTimeDimension().getId() + \" doesn't support grain \" + newGrain);\n+            throw new InvalidValueException(getColumn().getId() + \" doesn't support grain \" + newGrain);\n         }\n \n         TimeDimensionProjection projection = this;\n+", "originalCommit": "0df1d658611d8b3049bd82b2a79bb88f7ff14a46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyODUyMQ==", "url": "https://github.com/yahoo/elide/pull/1239#discussion_r399328521", "bodyText": "TimeDimensionProjection is just an interface, so I return a new implementation here.", "author": "hellohanchen", "createdAt": "2020-03-27T15:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1NjYwMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyNjQyNg==", "url": "https://github.com/yahoo/elide/pull/1239#discussion_r398926426", "bodyText": "We could probably use generics here.", "author": "aklish", "createdAt": "2020-03-26T22:18:11Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/query/MetricProjection.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.query;\n+\n+import com.yahoo.elide.datastores.aggregation.metadata.models.Metric;\n+\n+/**\n+ * Represents a projected metric column as an alias in a query.\n+ */\n+public interface MetricProjection extends ColumnProjection {\n+    /**\n+     * Get the projected metric.\n+     *\n+     * @return metric column\n+     */\n+    @Override\n+    Metric getColumn();", "originalCommit": "0df1d658611d8b3049bd82b2a79bb88f7ff14a46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "6ee5b3166257eb2d495bce5c0cb76d5ea473f148", "url": "https://github.com/yahoo/elide/commit/6ee5b3166257eb2d495bce5c0cb76d5ea473f148", "message": "add table into query template", "committedDate": "2020-03-27T15:58:55Z", "type": "commit"}]}