{"pr_number": 1843, "pr_title": "Switch from using sync to async Infinispan methods", "pr_createdAt": "2020-03-18T14:24:15Z", "pr_url": "https://github.com/eclipse/hono/pull/1843", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4NzIzNg==", "url": "https://github.com/eclipse/hono/pull/1843#discussion_r394587236", "bodyText": "I find the naming of MoreFutures.create() somewhat unintuitive (are more/multiple Futures created here?).\nLooking at the Javadoc of the class and the method, I think something like FuturesHelper.mapCompletionStageResult() would make it more obvious what is being done here. WDYT?", "author": "calohmn", "createdAt": "2020-03-18T19:24:59Z", "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java", "diffHunk": "@@ -162,44 +162,45 @@ public void addReconnectListener(final ReconnectListener<HotrodCache<K, V>> list\n     @Override\n     public Future<V> put(final K key, final V value) {\n \n-        final Promise<V> result = Promise.promise();\n         if (cache == null) {\n-            result.fail(new ServerErrorException(HttpURLConnection.HTTP_UNAVAILABLE, \"no connection to data grid\"));\n+\n+            return noConnectionFailure();\n+\n         } else {\n-            vertx.executeBlocking(outcome -> {\n-                try {\n-                    final V replacedValue = cache.put(key, value);\n-                    outcome.complete(replacedValue);\n-                } catch (final Throwable e) {\n-                    outcome.fail(e);\n-                }\n-            }, result);\n+\n+            return MoreFutures.create(() -> {", "originalCommit": "16eefec56feee03a843451d84ace484939c65c26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5MDQ1NQ==", "url": "https://github.com/eclipse/hono/pull/1843#discussion_r394890455", "bodyText": "I followed this pattern: https://guava.dev/releases/23.0/api/docs/com/google/common/base/MoreObjects.html\nBut I am open to making changes to the name.", "author": "ctron", "createdAt": "2020-03-19T09:26:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4NzIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1ODYwNw==", "url": "https://github.com/eclipse/hono/pull/1843#discussion_r395458607", "bodyText": "I think with MoreObjects that pattern works, because it complements the Objects helper class. Since there is no Futures helper class for Vert.x or Java futures, this pattern doesn't work so well here, IMHO.", "author": "calohmn", "createdAt": "2020-03-20T06:41:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4NzIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ2NTgxMA==", "url": "https://github.com/eclipse/hono/pull/1843#discussion_r395465810", "bodyText": "Then why not simply call the class Futures?", "author": "sophokles73", "createdAt": "2020-03-20T07:11:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4NzIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUyNzExOA==", "url": "https://github.com/eclipse/hono/pull/1843#discussion_r395527118", "bodyText": "Because we already have a class called Futures in our classpath: com.google.common.util.concurrent.Futures.", "author": "ctron", "createdAt": "2020-03-20T09:43:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4NzIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUyODM2NA==", "url": "https://github.com/eclipse/hono/pull/1843#discussion_r395528364", "bodyText": "Assuming you still prefer Futures, I updated the pull request to that name. If you re-consider, I can still revert back to MoreFutures.", "author": "ctron", "createdAt": "2020-03-20T09:45:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4NzIzNg=="}], "type": "inlineReview", "revised_code": {"commit": "faccb913b243a9a48294eac716733b9f4c4750a2", "chunk": "diff --git a/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java b/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java\nindex 329cbd7ba..b5b8a1562 100644\n--- a/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java\n+++ b/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java\n\n@@ -183,8 +183,7 @@ public final class HotrodCache<K, V> implements RemoteCache<K, V>, ConnectionLif\n \n         if (cache == null) {\n \n-            return Future.failedFuture(new ServerErrorException(\n-                    HttpURLConnection.HTTP_UNAVAILABLE, \"no connection to data grid\"));\n+            return noConnectionFailure();\n \n         } else {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4Nzg1Ng==", "url": "https://github.com/eclipse/hono/pull/1843#discussion_r394587856", "bodyText": "Replace with return noConnectionFailure();?", "author": "calohmn", "createdAt": "2020-03-18T19:26:05Z", "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java", "diffHunk": "@@ -162,44 +162,45 @@ public void addReconnectListener(final ReconnectListener<HotrodCache<K, V>> list\n     @Override\n     public Future<V> put(final K key, final V value) {\n \n-        final Promise<V> result = Promise.promise();\n         if (cache == null) {\n-            result.fail(new ServerErrorException(HttpURLConnection.HTTP_UNAVAILABLE, \"no connection to data grid\"));\n+\n+            return noConnectionFailure();\n+\n         } else {\n-            vertx.executeBlocking(outcome -> {\n-                try {\n-                    final V replacedValue = cache.put(key, value);\n-                    outcome.complete(replacedValue);\n-                } catch (final Throwable e) {\n-                    outcome.fail(e);\n-                }\n-            }, result);\n+\n+            return MoreFutures.create(() -> {\n+                return cache\n+                    .withFlags(Flag.FORCE_RETURN_VALUE)\n+                    .putAsync(key, value);\n+            });\n+\n         }\n-        return result.future();\n+\n     }\n \n     @Override\n     public Future<Boolean> removeWithVersion(final K key, final long version) {\n \n-        final Promise<Boolean> result = Promise.promise();\n         if (cache == null) {\n-            result.fail(new ServerErrorException(HttpURLConnection.HTTP_UNAVAILABLE, \"no connection to data grid\"));\n+\n+            return Future.failedFuture(new ServerErrorException(\n+                    HttpURLConnection.HTTP_UNAVAILABLE, \"no connection to data grid\"));", "originalCommit": "16eefec56feee03a843451d84ace484939c65c26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faccb913b243a9a48294eac716733b9f4c4750a2", "chunk": "diff --git a/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java b/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java\nindex 329cbd7ba..b5b8a1562 100644\n--- a/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java\n+++ b/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java\n\n@@ -183,8 +183,7 @@ public final class HotrodCache<K, V> implements RemoteCache<K, V>, ConnectionLif\n \n         if (cache == null) {\n \n-            return Future.failedFuture(new ServerErrorException(\n-                    HttpURLConnection.HTTP_UNAVAILABLE, \"no connection to data grid\"));\n+            return noConnectionFailure();\n \n         } else {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4ODA4NQ==", "url": "https://github.com/eclipse/hono/pull/1843#discussion_r394588085", "bodyText": "Replace with return noConnectionFailure();?", "author": "calohmn", "createdAt": "2020-03-18T19:26:33Z", "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java", "diffHunk": "@@ -235,38 +235,46 @@ public void addReconnectListener(final ReconnectListener<HotrodCache<K, V>> list\n     @Override\n     public Future<Versioned<V>> getWithVersion(final K key) {\n \n-        final Promise<Versioned<V>> result = Promise.promise();\n         if (cache == null) {\n-            result.fail(new ServerErrorException(HttpURLConnection.HTTP_UNAVAILABLE, \"no connection to data grid\"));\n+\n+            return Future.failedFuture(new ServerErrorException(\n+                    HttpURLConnection.HTTP_UNAVAILABLE, \"no connection to data grid\"));", "originalCommit": "16eefec56feee03a843451d84ace484939c65c26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faccb913b243a9a48294eac716733b9f4c4750a2", "chunk": "diff --git a/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java b/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java\nindex 329cbd7ba..b5b8a1562 100644\n--- a/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java\n+++ b/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java\n\n@@ -237,8 +236,7 @@ public final class HotrodCache<K, V> implements RemoteCache<K, V>, ConnectionLif\n \n         if (cache == null) {\n \n-            return Future.failedFuture(new ServerErrorException(\n-                    HttpURLConnection.HTTP_UNAVAILABLE, \"no connection to data grid\"));\n+            return noConnectionFailure();\n \n         } else {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4ODE1Nw==", "url": "https://github.com/eclipse/hono/pull/1843#discussion_r394588157", "bodyText": "Replace with return noConnectionFailure();?", "author": "calohmn", "createdAt": "2020-03-18T19:26:43Z", "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java", "diffHunk": "@@ -235,38 +235,46 @@ public void addReconnectListener(final ReconnectListener<HotrodCache<K, V>> list\n     @Override\n     public Future<Versioned<V>> getWithVersion(final K key) {\n \n-        final Promise<Versioned<V>> result = Promise.promise();\n         if (cache == null) {\n-            result.fail(new ServerErrorException(HttpURLConnection.HTTP_UNAVAILABLE, \"no connection to data grid\"));\n+\n+            return Future.failedFuture(new ServerErrorException(\n+                    HttpURLConnection.HTTP_UNAVAILABLE, \"no connection to data grid\"));\n+\n         } else {\n-            vertx.executeBlocking(outcome -> {\n-                try {\n-                    final MetadataValue<V> value = cache.getWithMetadata(key);\n-                    outcome.complete(value != null ? new Versioned<>(value.getVersion(), value.getValue()) : null);\n-                } catch (final Throwable e) {\n-                    outcome.fail(e);\n-                }\n-            }, result);\n+\n+            return MoreFutures.create(() -> {\n+                return cache\n+                    .getWithMetadataAsync(key)\n+                    .thenApply(value -> {\n+                        if (value != null ) {\n+                            return new Versioned<>(value.getVersion(), value.getValue());\n+                        } else {\n+                            return null;\n+                        }\n+                    });\n+            });\n+\n         }\n-        return result.future();\n+\n     }\n \n     @Override\n     public Future<Map<K, V>> getAll(final Set<? extends K> keys) {\n-        final Promise<Map<K, V>> result = Promise.promise();\n+\n         if (cache == null) {\n-            result.fail(new ServerErrorException(HttpURLConnection.HTTP_UNAVAILABLE, \"no connection to data grid\"));\n+\n+            return Future.failedFuture(new ServerErrorException(\n+                    HttpURLConnection.HTTP_UNAVAILABLE, \"no connection to data grid\"));", "originalCommit": "16eefec56feee03a843451d84ace484939c65c26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faccb913b243a9a48294eac716733b9f4c4750a2", "chunk": "diff --git a/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java b/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java\nindex 329cbd7ba..b5b8a1562 100644\n--- a/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java\n+++ b/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java\n\n@@ -237,8 +236,7 @@ public final class HotrodCache<K, V> implements RemoteCache<K, V>, ConnectionLif\n \n         if (cache == null) {\n \n-            return Future.failedFuture(new ServerErrorException(\n-                    HttpURLConnection.HTTP_UNAVAILABLE, \"no connection to data grid\"));\n+            return noConnectionFailure();\n \n         } else {\n \n"}}, {"oid": "faccb913b243a9a48294eac716733b9f4c4750a2", "url": "https://github.com/eclipse/hono/commit/faccb913b243a9a48294eac716733b9f4c4750a2", "message": "Switch from using sync to async Infinispan methods", "committedDate": "2020-03-19T09:28:04Z", "type": "forcePushed"}, {"oid": "a394d5a0897d25c8babffdb671fa06c0d47bb65c", "url": "https://github.com/eclipse/hono/commit/a394d5a0897d25c8babffdb671fa06c0d47bb65c", "message": "Switch from using sync to async Infinispan methods", "committedDate": "2020-03-20T09:45:10Z", "type": "commit"}, {"oid": "a394d5a0897d25c8babffdb671fa06c0d47bb65c", "url": "https://github.com/eclipse/hono/commit/a394d5a0897d25c8babffdb671fa06c0d47bb65c", "message": "Switch from using sync to async Infinispan methods", "committedDate": "2020-03-20T09:45:10Z", "type": "forcePushed"}]}