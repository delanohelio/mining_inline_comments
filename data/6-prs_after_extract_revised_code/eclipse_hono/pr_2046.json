{"pr_number": 2046, "pr_title": "[#2020] Reject unknown properties in Tenant Management HTTP endpoint", "pr_createdAt": "2020-06-22T14:24:29Z", "pr_url": "https://github.com/eclipse/hono/pull/2046", "timeline": [{"oid": "526767bcc9f934c76b676b53a2a1a075f1af6636", "url": "https://github.com/eclipse/hono/commit/526767bcc9f934c76b676b53a2a1a075f1af6636", "message": "[#2020] Reject unknown properties in Tenant Management HTTP endpoint\n\nAdded explicit error handling in case of failure to process requests.\nRemoved obsolete request payload parsing/modification.\nImproved integration tests.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-06-22T14:22:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5MzI2NA==", "url": "https://github.com/eclipse/hono/pull/2046#discussion_r444093264", "bodyText": "What if we make validator a function? Then you can pass any logic to verify your parameter value, like pattern matching, optional, etc. It would make 'optional' field obsolete as well.", "author": "dejanb", "createdAt": "2020-06-23T09:35:16Z", "path": "service-base/src/main/java/org/eclipse/hono/service/http/AbstractHttpEndpoint.java", "diffHunk": "@@ -201,6 +205,58 @@ protected final String getDeviceIdParam(final RoutingContext ctx) {\n         return ctx.request().getParam(PARAM_DEVICE_ID);\n     }\n \n+    /**\n+     * Gets the value of a request parameter.\n+     *\n+     * @param ctx The routing context to get the parameter from.\n+     * @param paramName The name of the parameter.\n+     * @param validator A predicate to use for validating the parameter value or\n+     *                  {@code null} if the value should not be validated.\n+     * @param optional {@code true} if parameter is not mandatory.\n+     * @return A future indicating the outcome of the operation.\n+     *         If the request does not contain a parameter with the given name, the future will be\n+     *         <ul>\n+     *         <li>completed with an empty optional if the <em>optional</em> flag is {@code true}, or</li>\n+     *         <li>failed with a {@link ClientErrorException} with status 400 if the flag is {@code false}.</li>\n+     *         </ul>\n+     *         If the request does contain a parameter with the given name, the future will be\n+     *         <ul>\n+     *         <li>failed with a {@link ClientErrorException} with status 400 if a predicate has been\n+     *         given and the predicate evaluates to {@code false}, or</li>\n+     *         <li>otherwise be completed with the parameter value.</li>\n+     *         </ul>\n+     * @throws NullPointerException If ctx or paramName are {@code null}.\n+     */\n+    protected final Future<Optional<String>> getRequestParameter(\n+            final RoutingContext ctx,\n+            final String paramName,\n+            final Pattern validator,", "originalCommit": "526767bcc9f934c76b676b53a2a1a075f1af6636", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwNjg2Mw==", "url": "https://github.com/eclipse/hono/pull/2046#discussion_r444106863", "bodyText": "That might work if the function's return type is a Future<String> so that we can handle the cause for failures properly. Let me think about it ...", "author": "sophokles73", "createdAt": "2020-06-23T09:58:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5MzI2NA=="}], "type": "inlineReview", "revised_code": {"commit": "c279eb5b752ac2286ab4f3f438549376f4ac75ab", "chunk": "diff --git a/service-base/src/main/java/org/eclipse/hono/service/http/AbstractHttpEndpoint.java b/service-base/src/main/java/org/eclipse/hono/service/http/AbstractHttpEndpoint.java\nindex adc933e21..c8d29e9a3 100644\n--- a/service-base/src/main/java/org/eclipse/hono/service/http/AbstractHttpEndpoint.java\n+++ b/service-base/src/main/java/org/eclipse/hono/service/http/AbstractHttpEndpoint.java\n\n@@ -210,9 +210,10 @@ public abstract class AbstractHttpEndpoint<T extends ServiceConfigProperties> ex\n      *\n      * @param ctx The routing context to get the parameter from.\n      * @param paramName The name of the parameter.\n-     * @param validator A predicate to use for validating the parameter value or\n-     *                  {@code null} if the value should not be validated.\n-     * @param optional {@code true} if parameter is not mandatory.\n+     * @param validator A predicate to use for validating the parameter value.\n+     *                  The predicate may throw an {@code IllegalArgumentException}\n+     *                  instead of returning {@code false} in order to convey additional\n+     *                  information about why the test failed.\n      * @return A future indicating the outcome of the operation.\n      *         If the request does not contain a parameter with the given name, the future will be\n      *         <ul>\n"}}, {"oid": "c279eb5b752ac2286ab4f3f438549376f4ac75ab", "url": "https://github.com/eclipse/hono/commit/c279eb5b752ac2286ab4f3f438549376f4ac75ab", "message": "Use predicate for validating parameter values\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-06-23T14:12:36Z", "type": "commit"}]}