{"pr_number": 2278, "pr_title": "[#2267] Add AMQP 1.0 based DeviceRegistrationClient implementation", "pr_createdAt": "2020-11-03T14:17:40Z", "pr_url": "https://github.com/eclipse/hono/pull/2278", "timeline": [{"oid": "c2170f3ba1b90f09d263b494bd045c789bb0237a", "url": "https://github.com/eclipse/hono/commit/c2170f3ba1b90f09d263b494bd045c789bb0237a", "message": "[#2267] Add AMQP 1.0 based DeviceRegistrationClient implementation\n\nAdded implementations of the adapter client's DeviceRegistrationClient\ninterface which simply wraps the existing vertx-proton based\n\"legacy\" RegistrationClientImpl.\n\nIn order to be able to use the legacy CommandTargetMapper, its direct\ndependency on RegistrationClientFactory and\nBasicDeviceConnectionClientFactory has been replaced with a\nCommandTargetMapperContext interface which provides access to the\nrequired functionality. Existing code using the CommandTargetMapper with\nthe legacy client will need to be adapted. For convenience, the\nCommandTargetMapper.createContext() method can be used to get an\nimplementation based on RegistrationClientFactory and\nBasicDeviceConnectionClientFactory.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-11-03T13:22:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwNjA1NQ==", "url": "https://github.com/eclipse/hono/pull/2278#discussion_r516706055", "bodyText": "The {@link RegistrationClient} ref in the javadoc of this method can't be resolved. I guess the sentence there should be changed anyway.", "author": "calohmn", "createdAt": "2020-11-03T14:27:37Z", "path": "test-utils/service-base-test-utils/src/main/java/org/eclipse/hono/service/test/ProtocolAdapterTestSupport.java", "diffHunk": "@@ -179,24 +174,20 @@ protected void createClientFactories() {\n      */\n     protected void createClients() {", "originalCommit": "c2170f3ba1b90f09d263b494bd045c789bb0237a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7a899e661cfad1ac959ba4d42903795dfd3a238", "chunk": "diff --git a/test-utils/service-base-test-utils/src/main/java/org/eclipse/hono/service/test/ProtocolAdapterTestSupport.java b/test-utils/service-base-test-utils/src/main/java/org/eclipse/hono/service/test/ProtocolAdapterTestSupport.java\nindex 454a1982d..5512b35e0 100644\n--- a/test-utils/service-base-test-utils/src/main/java/org/eclipse/hono/service/test/ProtocolAdapterTestSupport.java\n+++ b/test-utils/service-base-test-utils/src/main/java/org/eclipse/hono/service/test/ProtocolAdapterTestSupport.java\n\n@@ -157,37 +157,36 @@ public abstract class ProtocolAdapterTestSupport<C extends ProtocolAdapterProper\n     }\n \n     /**\n-     * Creates mock instances of the service clients and\n-     * configures the factories to return them.\n+     * Prepares the (mock) service clients with default behavior.\n      * <p>\n      * This method is separate from {@link #createClientFactories()} in order to\n-     * support setups where the factories are created once for all test cases but\n+     * support setups where the factories/clients are created once for all test cases but\n      * the client instances need to be (re-)set for each individual test case.\n      * <p>\n-     * All clients are configured to return succeeded futures\n-     * containing <em>happy-path</em> results.\n-     * <p>\n-     * Creates a {@link TenantClient} and a {@link RegistrationClient}.\n-     *\n-     * @throws IllegalStateException if any of factories for which\n-     *         a mock client instance is to be created is {@code null}.\n+     * This method configures\n+     * <ul>\n+     * <li>the Tenant client to always return a succeeded future containing a TenantObject\n+     * for the given tenant</li>\n+     * <li>the Device Registration service client to always return a succeeded future containing\n+     * a {@link RegistrationAssertion} for the given device</li>\n+     * </ul>\n      */\n-    protected void createClients() {\n+    protected void prepareClients() {\n \n-        if (registrationClient == null) {\n-            throw new IllegalStateException(\"factories are not initialized\");\n+        if (tenantClient != null) {\n+            when(tenantClient.get(anyString(), any(SpanContext.class))).thenAnswer(invocation -> {\n+                return Future.succeededFuture(TenantObject.from(invocation.getArgument(0), true));\n+            });\n         }\n \n-        when(tenantClient.get(anyString(), any(SpanContext.class))).thenAnswer(invocation -> {\n-            return Future.succeededFuture(TenantObject.from(invocation.getArgument(0), true));\n-        });\n-\n-        when(registrationClient.assertRegistration(anyString(), anyString(), any(), (SpanContext) any()))\n-                .thenAnswer(invocation -> {\n-                    final String deviceId = invocation.getArgument(1);\n-                    final RegistrationAssertion regAssertion = new RegistrationAssertion(deviceId);\n-                    return Future.succeededFuture(regAssertion);\n-                });\n+        if (registrationClient != null) {\n+            when(registrationClient.assertRegistration(anyString(), anyString(), any(), (SpanContext) any()))\n+            .thenAnswer(invocation -> {\n+                final String deviceId = invocation.getArgument(1);\n+                final RegistrationAssertion regAssertion = new RegistrationAssertion(deviceId);\n+                return Future.succeededFuture(regAssertion);\n+            });\n+        }\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwNzU2OQ==", "url": "https://github.com/eclipse/hono/pull/2278#discussion_r516707569", "bodyText": "\"public\" modifier is redundant here.", "author": "calohmn", "createdAt": "2020-11-03T14:29:36Z", "path": "client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java", "diffHunk": "@@ -45,6 +52,53 @@\n  */\n public interface CommandTargetMapper {\n \n+    /**\n+     * Access to collaborators that the mapper needs for doing its work.\n+     *\n+     */\n+    public interface CommandTargetMapperContext {", "originalCommit": "c2170f3ba1b90f09d263b494bd045c789bb0237a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7a899e661cfad1ac959ba4d42903795dfd3a238", "chunk": "diff --git a/client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java b/client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java\nindex ab65ca485..12b90cc0e 100644\n--- a/client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java\n+++ b/client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java\n\n@@ -56,7 +56,7 @@ public interface CommandTargetMapper {\n      * Access to collaborators that the mapper needs for doing its work.\n      *\n      */\n-    public interface CommandTargetMapperContext {\n+    interface CommandTargetMapperContext {\n \n         /**\n          * Gets the device identifiers of the gateways that an edge device may connect via.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcxMjc0Mg==", "url": "https://github.com/eclipse/hono/pull/2278#discussion_r516712742", "bodyText": "Block could be made shorter, inlining result and converting to expression lambda.", "author": "calohmn", "createdAt": "2020-11-03T14:36:01Z", "path": "client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java", "diffHunk": "@@ -57,16 +111,67 @@ static CommandTargetMapper create(final Tracer tracer) {\n     }\n \n     /**\n-     * Initializes the CommandTargetMapper with the given components.\n+     * Creates a mapper context for client factories.\n      *\n-     * @param registrationClientFactory The factory to create a registration client instance. Note that no\n-     *            initialization of this factory will be done here, that is supposed to be done by the calling method.\n-     * @param deviceConnectionClientFactory The factory to create a device connection client instance. Note that no\n-     *            initialization of this factory will be done here, that is supposed to be done by the calling method.\n-     * @throws NullPointerException if any of the parameters is {@code null}.\n+     * @param registrationClientFactory The factory for creating Device Registration service clients.\n+     * @param deviceConnectionClientFactory The factory for creating Device Connection service clients.\n+     * @return The mapper context.\n+     */\n+    static CommandTargetMapperContext createContext(\n+            RegistrationClientFactory registrationClientFactory,\n+            BasicDeviceConnectionClientFactory deviceConnectionClientFactory) {\n+\n+        Objects.requireNonNull(registrationClientFactory);\n+        Objects.requireNonNull(deviceConnectionClientFactory);\n+\n+        return new CommandTargetMapperContext() {\n+\n+            @Override\n+            public Future<List<String>> getViaGateways(\n+                    final String tenant,\n+                    final String deviceId,\n+                    final SpanContext context) {\n+\n+                Objects.requireNonNull(tenant);\n+                Objects.requireNonNull(deviceId);\n+\n+                return registrationClientFactory.getOrCreateRegistrationClient(tenant)\n+                        .compose(client -> client.assertRegistration(deviceId, null, context))\n+                        .map(json -> Optional.ofNullable(json.getJsonArray(RegistrationConstants.FIELD_VIA))\n+                                .map(array -> {\n+                                    final List<String> result = array.stream()", "originalCommit": "c2170f3ba1b90f09d263b494bd045c789bb0237a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7a899e661cfad1ac959ba4d42903795dfd3a238", "chunk": "diff --git a/client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java b/client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java\nindex ab65ca485..12b90cc0e 100644\n--- a/client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java\n+++ b/client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java\n\n@@ -118,8 +118,8 @@ public interface CommandTargetMapper {\n      * @return The mapper context.\n      */\n     static CommandTargetMapperContext createContext(\n-            RegistrationClientFactory registrationClientFactory,\n-            BasicDeviceConnectionClientFactory deviceConnectionClientFactory) {\n+            final RegistrationClientFactory registrationClientFactory,\n+            final BasicDeviceConnectionClientFactory deviceConnectionClientFactory) {\n \n         Objects.requireNonNull(registrationClientFactory);\n         Objects.requireNonNull(deviceConnectionClientFactory);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcyMDM5NA==", "url": "https://github.com/eclipse/hono/pull/2278#discussion_r516720394", "bodyText": "final parameters.\nIt looks like a Checkstyle bug to me, that the FinalParameters rule doesn't take static interface methods into account.", "author": "calohmn", "createdAt": "2020-11-03T14:45:14Z", "path": "client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java", "diffHunk": "@@ -57,16 +111,67 @@ static CommandTargetMapper create(final Tracer tracer) {\n     }\n \n     /**\n-     * Initializes the CommandTargetMapper with the given components.\n+     * Creates a mapper context for client factories.\n      *\n-     * @param registrationClientFactory The factory to create a registration client instance. Note that no\n-     *            initialization of this factory will be done here, that is supposed to be done by the calling method.\n-     * @param deviceConnectionClientFactory The factory to create a device connection client instance. Note that no\n-     *            initialization of this factory will be done here, that is supposed to be done by the calling method.\n-     * @throws NullPointerException if any of the parameters is {@code null}.\n+     * @param registrationClientFactory The factory for creating Device Registration service clients.\n+     * @param deviceConnectionClientFactory The factory for creating Device Connection service clients.\n+     * @return The mapper context.\n+     */\n+    static CommandTargetMapperContext createContext(\n+            RegistrationClientFactory registrationClientFactory,\n+            BasicDeviceConnectionClientFactory deviceConnectionClientFactory) {", "originalCommit": "c2170f3ba1b90f09d263b494bd045c789bb0237a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7a899e661cfad1ac959ba4d42903795dfd3a238", "chunk": "diff --git a/client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java b/client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java\nindex ab65ca485..12b90cc0e 100644\n--- a/client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java\n+++ b/client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java\n\n@@ -118,8 +118,8 @@ public interface CommandTargetMapper {\n      * @return The mapper context.\n      */\n     static CommandTargetMapperContext createContext(\n-            RegistrationClientFactory registrationClientFactory,\n-            BasicDeviceConnectionClientFactory deviceConnectionClientFactory) {\n+            final RegistrationClientFactory registrationClientFactory,\n+            final BasicDeviceConnectionClientFactory deviceConnectionClientFactory) {\n \n         Objects.requireNonNull(registrationClientFactory);\n         Objects.requireNonNull(deviceConnectionClientFactory);\n"}}, {"oid": "f7a899e661cfad1ac959ba4d42903795dfd3a238", "url": "https://github.com/eclipse/hono/commit/f7a899e661cfad1ac959ba4d42903795dfd3a238", "message": "Incorporate feedback\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-11-03T16:09:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc5NDgzMA==", "url": "https://github.com/eclipse/hono/pull/2278#discussion_r516794830", "bodyText": "The \"Error getting registration assertion\" log message only looks correct if one knows what getViaGateways is doing internally. So, \"Error getting 'via' gateways\" would be more obvious here.", "author": "calohmn", "createdAt": "2020-11-03T16:25:33Z", "path": "client/src/main/java/org/eclipse/hono/client/impl/CommandTargetMapperImpl.java", "diffHunk": "@@ -85,19 +77,12 @@ public void initialize(final RegistrationClientFactory registrationClientFactory\n                 .withTag(TracingHelper.TAG_DEVICE_ID, deviceId)\n                 .start();\n \n-        return registrationClientFactory.getOrCreateRegistrationClient(tenantId)\n-                .compose(client -> client.assertRegistration(deviceId, null, span.context()))\n+        return mapperContext.getViaGateways(tenantId, deviceId, span.context())\n                 .recover(t -> {\n                     LOG.debug(\"Error getting registration assertion\", t);\n                     return Future.failedFuture(t);", "originalCommit": "f7a899e661cfad1ac959ba4d42903795dfd3a238", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99029b449f371e7fd2701bdc1b3f4823c2eaa2fd", "chunk": "diff --git a/client/src/main/java/org/eclipse/hono/client/impl/CommandTargetMapperImpl.java b/client/src/main/java/org/eclipse/hono/client/impl/CommandTargetMapperImpl.java\nindex c2dbab95b..da331f64c 100644\n--- a/client/src/main/java/org/eclipse/hono/client/impl/CommandTargetMapperImpl.java\n+++ b/client/src/main/java/org/eclipse/hono/client/impl/CommandTargetMapperImpl.java\n\n@@ -79,7 +79,8 @@ public class CommandTargetMapperImpl implements CommandTargetMapper {\n \n         return mapperContext.getViaGateways(tenantId, deviceId, span.context())\n                 .recover(t -> {\n-                    LOG.debug(\"Error getting registration assertion\", t);\n+                    LOG.debug(\"Error retrieving gateways authorized to act on behalf of device [tenant-id: {}, device-id: {}]\",\n+                            tenantId, deviceId, t);\n                     return Future.failedFuture(t);\n                 }).compose(viaGateways -> {\n                     return mapperContext.getCommandHandlingAdapterInstances(tenantId, deviceId, viaGateways, span.context())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg3MjgwNg==", "url": "https://github.com/eclipse/hono/pull/2278#discussion_r516872806", "bodyText": "Missing info in JavaDoc regarding null checks.", "author": "kaniyan", "createdAt": "2020-11-03T18:28:40Z", "path": "client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java", "diffHunk": "@@ -57,16 +111,67 @@ static CommandTargetMapper create(final Tracer tracer) {\n     }\n \n     /**\n-     * Initializes the CommandTargetMapper with the given components.\n+     * Creates a mapper context for client factories.\n      *\n-     * @param registrationClientFactory The factory to create a registration client instance. Note that no\n-     *            initialization of this factory will be done here, that is supposed to be done by the calling method.\n-     * @param deviceConnectionClientFactory The factory to create a device connection client instance. Note that no\n-     *            initialization of this factory will be done here, that is supposed to be done by the calling method.\n-     * @throws NullPointerException if any of the parameters is {@code null}.\n+     * @param registrationClientFactory The factory for creating Device Registration service clients.\n+     * @param deviceConnectionClientFactory The factory for creating Device Connection service clients.\n+     * @return The mapper context.\n+     */", "originalCommit": "c2170f3ba1b90f09d263b494bd045c789bb0237a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99029b449f371e7fd2701bdc1b3f4823c2eaa2fd", "chunk": "diff --git a/client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java b/client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java\nindex ab65ca485..a9dfea354 100644\n--- a/client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java\n+++ b/client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java\n\n@@ -116,10 +116,11 @@ public interface CommandTargetMapper {\n      * @param registrationClientFactory The factory for creating Device Registration service clients.\n      * @param deviceConnectionClientFactory The factory for creating Device Connection service clients.\n      * @return The mapper context.\n+     * @throws NullPointerException if any of the parameters are {@code null}.\n      */\n     static CommandTargetMapperContext createContext(\n-            RegistrationClientFactory registrationClientFactory,\n-            BasicDeviceConnectionClientFactory deviceConnectionClientFactory) {\n+            final RegistrationClientFactory registrationClientFactory,\n+            final BasicDeviceConnectionClientFactory deviceConnectionClientFactory) {\n \n         Objects.requireNonNull(registrationClientFactory);\n         Objects.requireNonNull(deviceConnectionClientFactory);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4MzM3Mg==", "url": "https://github.com/eclipse/hono/pull/2278#discussion_r516883372", "bodyText": "cacheProvider is not being null checked. How about @throws NullPointerException if any of the parameters other than cacheProvider are {@code null}.?", "author": "kaniyan", "createdAt": "2020-11-03T18:48:10Z", "path": "clients/adapter-amqp/src/main/java/org/eclipse/hono/adapter/client/registry/amqp/ProtonBasedDeviceRegistrationClient.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.adapter.client.registry.amqp;\n+\n+import java.net.HttpURLConnection;\n+import java.util.Objects;\n+\n+import org.eclipse.hono.adapter.client.registry.DeviceRegistrationClient;\n+import org.eclipse.hono.cache.CacheProvider;\n+import org.eclipse.hono.client.HonoConnection;\n+import org.eclipse.hono.client.RegistrationClient;\n+import org.eclipse.hono.client.SendMessageSampler;\n+import org.eclipse.hono.client.ServerErrorException;\n+import org.eclipse.hono.client.impl.CachingClientFactory;\n+import org.eclipse.hono.client.impl.RegistrationClientImpl;\n+import org.eclipse.hono.config.ProtocolAdapterProperties;\n+import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.RegistrationAssertion;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.eventbus.Message;\n+import io.vertx.core.json.DecodeException;\n+\n+\n+/**\n+ * A vertx-proton based client of Hono's Device Registration service.\n+ *\n+ */\n+public class ProtonBasedDeviceRegistrationClient extends AbstractRequestResponseClient<RegistrationResult>\n+        implements DeviceRegistrationClient {\n+\n+    private final CachingClientFactory<org.eclipse.hono.client.RegistrationClient> clientFactory;\n+\n+    /**\n+     * Creates a new client for a connection.\n+     *\n+     * @param connection The connection to the Device Registration service.\n+     * @param samplerFactory The factory for creating samplers for tracing AMQP messages being sent.\n+     * @param adapterConfig The protocol adapter's configuration properties.\n+     * @param cacheProvider The cache provider to use for creating a cache for service responses.\n+     * @throws NullPointerException if any of the parameters are {@code null}.", "originalCommit": "c2170f3ba1b90f09d263b494bd045c789bb0237a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99029b449f371e7fd2701bdc1b3f4823c2eaa2fd", "chunk": "diff --git a/clients/adapter-amqp/src/main/java/org/eclipse/hono/adapter/client/registry/amqp/ProtonBasedDeviceRegistrationClient.java b/clients/adapter-amqp/src/main/java/org/eclipse/hono/adapter/client/registry/amqp/ProtonBasedDeviceRegistrationClient.java\nindex cc963d135..6c61e3827 100644\n--- a/clients/adapter-amqp/src/main/java/org/eclipse/hono/adapter/client/registry/amqp/ProtonBasedDeviceRegistrationClient.java\n+++ b/clients/adapter-amqp/src/main/java/org/eclipse/hono/adapter/client/registry/amqp/ProtonBasedDeviceRegistrationClient.java\n\n@@ -52,8 +52,9 @@ public class ProtonBasedDeviceRegistrationClient extends AbstractRequestResponse\n      * @param connection The connection to the Device Registration service.\n      * @param samplerFactory The factory for creating samplers for tracing AMQP messages being sent.\n      * @param adapterConfig The protocol adapter's configuration properties.\n-     * @param cacheProvider The cache provider to use for creating a cache for service responses.\n-     * @throws NullPointerException if any of the parameters are {@code null}.\n+     * @param cacheProvider The cache provider to use for creating a cache for service responses or\n+     *                      {@code null} if responses should not be cached.\n+     * @throws NullPointerException if any of the parameters other than the cache provider are {@code null}.\n      */\n     public ProtonBasedDeviceRegistrationClient(\n             final HonoConnection connection,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4NTUzMw==", "url": "https://github.com/eclipse/hono/pull/2278#discussion_r516885533", "bodyText": "How about RequestResponseClient::isOpen instead of c-> c.isOpen()?", "author": "kaniyan", "createdAt": "2020-11-03T18:52:02Z", "path": "clients/adapter-amqp/src/main/java/org/eclipse/hono/adapter/client/registry/amqp/ProtonBasedDeviceRegistrationClient.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.adapter.client.registry.amqp;\n+\n+import java.net.HttpURLConnection;\n+import java.util.Objects;\n+\n+import org.eclipse.hono.adapter.client.registry.DeviceRegistrationClient;\n+import org.eclipse.hono.cache.CacheProvider;\n+import org.eclipse.hono.client.HonoConnection;\n+import org.eclipse.hono.client.RegistrationClient;\n+import org.eclipse.hono.client.SendMessageSampler;\n+import org.eclipse.hono.client.ServerErrorException;\n+import org.eclipse.hono.client.impl.CachingClientFactory;\n+import org.eclipse.hono.client.impl.RegistrationClientImpl;\n+import org.eclipse.hono.config.ProtocolAdapterProperties;\n+import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.RegistrationAssertion;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.eventbus.Message;\n+import io.vertx.core.json.DecodeException;\n+\n+\n+/**\n+ * A vertx-proton based client of Hono's Device Registration service.\n+ *\n+ */\n+public class ProtonBasedDeviceRegistrationClient extends AbstractRequestResponseClient<RegistrationResult>\n+        implements DeviceRegistrationClient {\n+\n+    private final CachingClientFactory<org.eclipse.hono.client.RegistrationClient> clientFactory;\n+\n+    /**\n+     * Creates a new client for a connection.\n+     *\n+     * @param connection The connection to the Device Registration service.\n+     * @param samplerFactory The factory for creating samplers for tracing AMQP messages being sent.\n+     * @param adapterConfig The protocol adapter's configuration properties.\n+     * @param cacheProvider The cache provider to use for creating a cache for service responses.\n+     * @throws NullPointerException if any of the parameters are {@code null}.\n+     */\n+    public ProtonBasedDeviceRegistrationClient(\n+            final HonoConnection connection,\n+            final SendMessageSampler.Factory samplerFactory,\n+            final ProtocolAdapterProperties adapterConfig,\n+            final CacheProvider cacheProvider) {\n+        super(connection, samplerFactory, adapterConfig, cacheProvider);\n+        this.clientFactory = new CachingClientFactory<>(connection.getVertx(), c -> c.isOpen());", "originalCommit": "c2170f3ba1b90f09d263b494bd045c789bb0237a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99029b449f371e7fd2701bdc1b3f4823c2eaa2fd", "chunk": "diff --git a/clients/adapter-amqp/src/main/java/org/eclipse/hono/adapter/client/registry/amqp/ProtonBasedDeviceRegistrationClient.java b/clients/adapter-amqp/src/main/java/org/eclipse/hono/adapter/client/registry/amqp/ProtonBasedDeviceRegistrationClient.java\nindex cc963d135..6c61e3827 100644\n--- a/clients/adapter-amqp/src/main/java/org/eclipse/hono/adapter/client/registry/amqp/ProtonBasedDeviceRegistrationClient.java\n+++ b/clients/adapter-amqp/src/main/java/org/eclipse/hono/adapter/client/registry/amqp/ProtonBasedDeviceRegistrationClient.java\n\n@@ -52,8 +52,9 @@ public class ProtonBasedDeviceRegistrationClient extends AbstractRequestResponse\n      * @param connection The connection to the Device Registration service.\n      * @param samplerFactory The factory for creating samplers for tracing AMQP messages being sent.\n      * @param adapterConfig The protocol adapter's configuration properties.\n-     * @param cacheProvider The cache provider to use for creating a cache for service responses.\n-     * @throws NullPointerException if any of the parameters are {@code null}.\n+     * @param cacheProvider The cache provider to use for creating a cache for service responses or\n+     *                      {@code null} if responses should not be cached.\n+     * @throws NullPointerException if any of the parameters other than the cache provider are {@code null}.\n      */\n     public ProtonBasedDeviceRegistrationClient(\n             final HonoConnection connection,\n"}}, {"oid": "99029b449f371e7fd2701bdc1b3f4823c2eaa2fd", "url": "https://github.com/eclipse/hono/commit/99029b449f371e7fd2701bdc1b3f4823c2eaa2fd", "message": "Incorporate feedback\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-11-04T08:11:37Z", "type": "commit"}]}