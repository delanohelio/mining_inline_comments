{"pr_number": 2275, "pr_title": "Create downstream message from properties gathered from context", "pr_createdAt": "2020-10-30T07:52:05Z", "pr_url": "https://github.com/eclipse/hono/pull/2275", "timeline": [{"oid": "227e38a04f5e87e50a8fd2c66a0c0c02a42bb8f0", "url": "https://github.com/eclipse/hono/commit/227e38a04f5e87e50a8fd2c66a0c0c02a42bb8f0", "message": "Create downstream message from properties gathered from context\n\nThe protocol adapters now create downstream messages using the new\nMessageHelper.newMessage() method which accepts a Map of properties to\ninclude in the message.\n\nThis is in preparation for the adapters being refactored to use the new\nTelemetrySender and EventSender instead of the legacy DownstreamSender.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-10-29T17:46:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1Njg4MQ==", "url": "https://github.com/eclipse/hono/pull/2275#discussion_r514956881", "bodyText": "The waitForOutcome method parameter is now not used anymore in the method.", "author": "calohmn", "createdAt": "2020-10-30T09:06:50Z", "path": "adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/AbstractVertxBasedCoapAdapter.java", "diffHunk": "@@ -695,7 +695,7 @@ protected final String getAuthId(final CoapExchange exchange) {\n             final String gatewayId = context.getGatewayId();\n             final String tenantId = context.getOriginDevice().getTenantId();\n             final String deviceId = context.getOriginDevice().getDeviceId();\n-            final MetricsTags.QoS qos = waitForOutcome ? MetricsTags.QoS.AT_LEAST_ONCE : MetricsTags.QoS.AT_MOST_ONCE;", "originalCommit": "227e38a04f5e87e50a8fd2c66a0c0c02a42bb8f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1OTMyMA==", "url": "https://github.com/eclipse/hono/pull/2275#discussion_r514959320", "bodyText": "Optional.ofNullable not really needed here since exchange.getRequestOptions().getUriPathString() doesn't return null.", "author": "calohmn", "createdAt": "2020-10-30T09:11:37Z", "path": "adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/CoapContext.java", "diffHunk": "@@ -416,4 +417,26 @@ private Integer getIntegerQueryParameter(final String parameterName) {\n     public QoS getRequestedQos() {\n         return isConfirmable() ? QoS.AT_LEAST_ONCE : QoS.AT_MOST_ONCE;\n     }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @return An empty optional.\n+     */\n+    @Override\n+    public Optional<Duration> getTimeToLive() {\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @return The <em>Uri-Path</em> request option prefixed with a <em>/</em> character.\n+     */\n+    @Override\n+    public String getOrigAddress() {\n+        return Optional.ofNullable(exchange.getRequestOptions().getUriPathString())", "originalCommit": "227e38a04f5e87e50a8fd2c66a0c0c02a42bb8f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11127f6c2a6e9be8f3ff0b06975a99d1f2497502", "chunk": "diff --git a/adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/CoapContext.java b/adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/CoapContext.java\nindex 55884c17f..f0c9c3cb3 100644\n--- a/adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/CoapContext.java\n+++ b/adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/CoapContext.java\n\n@@ -435,8 +435,6 @@ public final class CoapContext extends MapBasedTelemetryExecutionContext {\n      */\n     @Override\n     public String getOrigAddress() {\n-        return Optional.ofNullable(exchange.getRequestOptions().getUriPathString())\n-                .map(address -> \"/\" + address)\n-                .orElse(null);\n+        return \"/\" + exchange.getRequestOptions().getUriPathString();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk5OTMwMA==", "url": "https://github.com/eclipse/hono/pull/2275#discussion_r514999300", "bodyText": "Always adding a second seems a bit strange here (would also cause \"limiting device provided TTL [{}ms] to max TTL\" log output if client always uses the maxTtl value here). In my view, using\nmessage.getTtl() >= 1000 ? message.getTtl() : 1000\nwould be better.", "author": "calohmn", "createdAt": "2020-10-30T10:25:25Z", "path": "adapters/amqp-vertx/src/main/java/org/eclipse/hono/adapter/amqp/impl/AmqpContext.java", "diffHunk": "@@ -106,6 +108,18 @@ final String getMessageContentType() {\n         return message.getContentType();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public final Optional<Duration> getTimeToLive() {\n+        if (endpoint == EndpointType.EVENT && message.getTtl() > 0) {\n+            // make sure it is at least one second\n+            return Optional.of(Duration.ofMillis(message.getTtl() + 1000L));", "originalCommit": "227e38a04f5e87e50a8fd2c66a0c0c02a42bb8f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11127f6c2a6e9be8f3ff0b06975a99d1f2497502", "chunk": "diff --git a/adapters/amqp-vertx/src/main/java/org/eclipse/hono/adapter/amqp/impl/AmqpContext.java b/adapters/amqp-vertx/src/main/java/org/eclipse/hono/adapter/amqp/impl/AmqpContext.java\nindex fdd019468..6a8d50b93 100644\n--- a/adapters/amqp-vertx/src/main/java/org/eclipse/hono/adapter/amqp/impl/AmqpContext.java\n+++ b/adapters/amqp-vertx/src/main/java/org/eclipse/hono/adapter/amqp/impl/AmqpContext.java\n\n@@ -115,7 +115,7 @@ public class AmqpContext extends MapBasedTelemetryExecutionContext {\n     public final Optional<Duration> getTimeToLive() {\n         if (endpoint == EndpointType.EVENT && message.getTtl() > 0) {\n             // make sure it is at least one second\n-            return Optional.of(Duration.ofMillis(message.getTtl() + 1000L));\n+            return Optional.of(Duration.ofMillis(message.getTtl() >= 1000L ? message.getTtl() : 1000L));\n         }\n         return Optional.empty();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA0Mjc3Ng==", "url": "https://github.com/eclipse/hono/pull/2275#discussion_r515042776", "bodyText": "(Redundant String cast.)\nThe extra propertyBag check looks superfluous here since all MqttContext fields except timer are effectively final. (And there is a different content-type constant being used compared to the constructor code.)", "author": "calohmn", "createdAt": "2020-10-30T11:49:32Z", "path": "adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/MqttContext.java", "diffHunk": "@@ -152,11 +156,22 @@ public Device authenticatedDevice() {\n \n     /**\n      * Gets the content type of the message payload.\n+     * <p>\n+     * The type is the value set via {@link #setContentType(String)}.\n+     * Otherwise, the type is determined from the message topic's property\n+     * bag, if if contains a content type.\n+     * Otherwise, the {@linkplain MessageHelper#CONTENT_TYPE_OCTET_STREAM default\n+     * content type} is used.\n      *\n-     * @return The type or {@code null} if the content type is unknown.\n+     * @return The type of the message payload.\n      */\n     public String contentType() {\n-        return contentType;\n+        if (contentType != null) {\n+            return contentType;\n+        }\n+        return Optional.ofNullable(propertyBag)\n+                .flatMap(bag -> Optional.ofNullable((String) bag.getProperty(HttpHeaders.CONTENT_TYPE.toString())))\n+                .orElse(MessageHelper.CONTENT_TYPE_OCTET_STREAM);", "originalCommit": "227e38a04f5e87e50a8fd2c66a0c0c02a42bb8f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA1MjA1MA==", "url": "https://github.com/eclipse/hono/pull/2275#discussion_r515052050", "bodyText": "Yes, I stumbled across that as well during the refactoring. I will remove the setContentType method and make the contentType field final, initializing it from the property bag during creation ...", "author": "sophokles73", "createdAt": "2020-10-30T12:07:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA0Mjc3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "11127f6c2a6e9be8f3ff0b06975a99d1f2497502", "chunk": "diff --git a/adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/MqttContext.java b/adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/MqttContext.java\nindex 3a5cc801b..2d120e193 100644\n--- a/adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/MqttContext.java\n+++ b/adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/MqttContext.java\n\n@@ -157,8 +171,7 @@ public final class MqttContext extends MapBasedTelemetryExecutionContext {\n     /**\n      * Gets the content type of the message payload.\n      * <p>\n-     * The type is the value set via {@link #setContentType(String)}.\n-     * Otherwise, the type is determined from the message topic's property\n+     * The type determined from the message topic's property\n      * bag, if if contains a content type.\n      * Otherwise, the {@linkplain MessageHelper#CONTENT_TYPE_OCTET_STREAM default\n      * content type} is used.\n"}}, {"oid": "11127f6c2a6e9be8f3ff0b06975a99d1f2497502", "url": "https://github.com/eclipse/hono/commit/11127f6c2a6e9be8f3ff0b06975a99d1f2497502", "message": "Incorporate feedback\n\nIn particular, read properties from topic's property bag during creation\nof MQTTContext.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-10-30T14:17:38Z", "type": "commit"}]}