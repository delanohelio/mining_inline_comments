{"pr_number": 2172, "pr_title": "[#2115] Add ExecutionContext#getTracingSpan", "pr_createdAt": "2020-09-11T14:02:33Z", "pr_url": "https://github.com/eclipse/hono/pull/2172", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3NjI4OQ==", "url": "https://github.com/eclipse/hono/pull/2172#discussion_r487876289", "bodyText": "final ?", "author": "sophokles73", "createdAt": "2020-09-14T12:34:55Z", "path": "core/src/main/java/org/eclipse/hono/util/MapBasedExecutionContext.java", "diffHunk": "@@ -35,25 +47,30 @@\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public final <T> T get(final String key, final T defaultValue) {\n-        return Optional.ofNullable(getData().get(key)).map(value -> {\n-            return (T) value;\n-        }).orElse(defaultValue);\n+        return Optional.ofNullable(getData().get(key))\n+                .map(value -> (T) value)\n+                .orElse(defaultValue);\n     }\n \n     @Override\n     public final void put(final String key, final Object value) {\n         getData().put(key, value);\n     }\n \n-\n+    /**\n+     * Gets the <em>OpenTracing</em> root span that is used to\n+     * track the processing of this context.\n+     *\n+     * @return The span.\n+     */\n     @Override\n-    public SpanContext getTracingContext() {\n-        return spanContext;\n+    public Span getTracingSpan() {", "originalCommit": "59c0dd34ee6c22c9292a408b3cfea191d36c14f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aebf4ca815cfcdcb88e1937b3a1a137f4ff34614", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/util/MapBasedExecutionContext.java b/core/src/main/java/org/eclipse/hono/util/MapBasedExecutionContext.java\nindex ccf6b666c..08897c630 100644\n--- a/core/src/main/java/org/eclipse/hono/util/MapBasedExecutionContext.java\n+++ b/core/src/main/java/org/eclipse/hono/util/MapBasedExecutionContext.java\n\n@@ -64,12 +64,12 @@ public abstract class MapBasedExecutionContext implements ExecutionContext {\n      * @return The span.\n      */\n     @Override\n-    public Span getTracingSpan() {\n+    public final Span getTracingSpan() {\n         return span;\n     }\n \n     @Override\n-    public SpanContext getTracingContext() {\n+    public final SpanContext getTracingContext() {\n         return span.context();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3NjQxOQ==", "url": "https://github.com/eclipse/hono/pull/2172#discussion_r487876419", "bodyText": "final ?", "author": "sophokles73", "createdAt": "2020-09-14T12:35:05Z", "path": "core/src/main/java/org/eclipse/hono/util/MapBasedExecutionContext.java", "diffHunk": "@@ -35,25 +47,30 @@\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public final <T> T get(final String key, final T defaultValue) {\n-        return Optional.ofNullable(getData().get(key)).map(value -> {\n-            return (T) value;\n-        }).orElse(defaultValue);\n+        return Optional.ofNullable(getData().get(key))\n+                .map(value -> (T) value)\n+                .orElse(defaultValue);\n     }\n \n     @Override\n     public final void put(final String key, final Object value) {\n         getData().put(key, value);\n     }\n \n-\n+    /**\n+     * Gets the <em>OpenTracing</em> root span that is used to\n+     * track the processing of this context.\n+     *\n+     * @return The span.\n+     */\n     @Override\n-    public SpanContext getTracingContext() {\n-        return spanContext;\n+    public Span getTracingSpan() {\n+        return span;\n     }\n \n     @Override\n-    public void setTracingContext(final SpanContext spanContext) {\n-        this.spanContext = spanContext;\n+    public SpanContext getTracingContext() {", "originalCommit": "59c0dd34ee6c22c9292a408b3cfea191d36c14f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aebf4ca815cfcdcb88e1937b3a1a137f4ff34614", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/util/MapBasedExecutionContext.java b/core/src/main/java/org/eclipse/hono/util/MapBasedExecutionContext.java\nindex ccf6b666c..08897c630 100644\n--- a/core/src/main/java/org/eclipse/hono/util/MapBasedExecutionContext.java\n+++ b/core/src/main/java/org/eclipse/hono/util/MapBasedExecutionContext.java\n\n@@ -64,12 +64,12 @@ public abstract class MapBasedExecutionContext implements ExecutionContext {\n      * @return The span.\n      */\n     @Override\n-    public Span getTracingSpan() {\n+    public final Span getTracingSpan() {\n         return span;\n     }\n \n     @Override\n-    public SpanContext getTracingContext() {\n+    public final SpanContext getTracingContext() {\n         return span.context();\n     }\n \n"}}, {"oid": "aebf4ca815cfcdcb88e1937b3a1a137f4ff34614", "url": "https://github.com/eclipse/hono/commit/aebf4ca815cfcdcb88e1937b3a1a137f4ff34614", "message": "[#2115] Add ExecutionContext#getTracingSpan.\n\nRequire the MapBasedExecutionContext classes to have a non-null\nSpan object. This is a preparation for having the authentication\nhandler classes apply a trace sampling priority on the span of the\nExecutionContext.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-09-15T13:53:47Z", "type": "commit"}, {"oid": "aebf4ca815cfcdcb88e1937b3a1a137f4ff34614", "url": "https://github.com/eclipse/hono/commit/aebf4ca815cfcdcb88e1937b3a1a137f4ff34614", "message": "[#2115] Add ExecutionContext#getTracingSpan.\n\nRequire the MapBasedExecutionContext classes to have a non-null\nSpan object. This is a preparation for having the authentication\nhandler classes apply a trace sampling priority on the span of the\nExecutionContext.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-09-15T13:53:47Z", "type": "forcePushed"}]}