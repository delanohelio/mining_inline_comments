{"pr_number": 1932, "pr_title": "Use new interface in createCommandConsumer() return value.", "pr_createdAt": "2020-04-29T14:54:37Z", "pr_url": "https://github.com/eclipse/hono/pull/1932", "timeline": [{"oid": "c702ddc749cd2d02484e9567bb48248967a16ccc", "url": "https://github.com/eclipse/hono/commit/c702ddc749cd2d02484e9567bb48248967a16ccc", "message": "Use new interface in createCommandConsumer() return value.\n\nThe previously used \"MessageConsumer\" interface with its flow()\nand getRemainingCredit() methods wasn't a good fit anymore\nbecause both these methods do nothing in the implementation\nused for the ProtocolAdapterCommandConsumerFactory.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-04-29T14:47:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4ODg3NA==", "url": "https://github.com/eclipse/hono/pull/1932#discussion_r420588874", "bodyText": "If I am not mistaken, then this code sends a disconnect event for each subscription being canceled. However, FMPOV we only need to send the disconnect once after all subscriptions have been canceled. WDYT?", "author": "sophokles73", "createdAt": "2020-05-06T07:18:11Z", "path": "adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/AbstractVertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -1196,12 +1201,12 @@ protected final void close(final MqttEndpoint endpoint, final Device authenticat\n \n         final Span span = newSpan(\"CLOSE\", endpoint, authenticatedDevice, traceSamplingPriority);\n         onClose(endpoint);\n-        cmdHandler.removeAllSubscriptions((tenant, device) -> {\n-            final Span closeHandlerSpan = newSpan(\"Send Disconnected Event\", endpoint, authenticatedDevice,\n-                    traceSamplingPriority);\n-            sendDisconnectedTtdEvent(tenant, device, authenticatedDevice, span.context())\n-                    .setHandler(sendAttempt -> closeHandlerSpan.finish());\n-        });\n+        final CompositeFuture removalDoneFuture = cmdHandler.removeAllSubscriptions((tenant, device) -> {\n+            final Span sendEventSpan = newChildSpan(span.context(), \"Send Disconnected Event\", endpoint,\n+                    authenticatedDevice);\n+            return sendDisconnectedTtdEvent(tenant, device, authenticatedDevice, sendEventSpan.context())\n+                    .onComplete(r -> sendEventSpan.finish()).mapEmpty();", "originalCommit": "c702ddc749cd2d02484e9567bb48248967a16ccc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxNjkyNg==", "url": "https://github.com/eclipse/hono/pull/1932#discussion_r420616926", "bodyText": "IMHO, the only scenario, where an MQTT device would want to create multiple subscriptions over the same MQTT connection, would be for a gateway device to add multiple subscriptions for commands targeted at different, specific devices. In that case, the sendDisconnectedTtdEvent method with its deviceId parameter should actually be called for all these devices separately.\nSo, I think, the code makes sense, the way it is.", "author": "calohmn", "createdAt": "2020-05-06T08:14:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4ODg3NA=="}], "type": "inlineReview", "revised_code": null}]}