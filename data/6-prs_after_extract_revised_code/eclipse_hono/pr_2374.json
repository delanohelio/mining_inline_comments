{"pr_number": 2374, "pr_title": "Make inclusion of tenant ID configurable", "pr_createdAt": "2020-12-18T08:46:16Z", "pr_url": "https://github.com/eclipse/hono/pull/2374", "timeline": [{"oid": "8dc406cbd6bf47f24c1eccc53e9550d94fa248d4", "url": "https://github.com/eclipse/hono/commit/8dc406cbd6bf47f24c1eccc53e9550d94fa248d4", "message": "Encapsulate creation of command topic\n\nThe topic name to use for publishing a command to a device is now\nencapsulated within the CommandSubscription where all relevant\ninformation is available.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-12-21T13:33:31Z", "type": "commit"}, {"oid": "69d36739b16ef9d297564e6107c5deb3abc859b8", "url": "https://github.com/eclipse/hono/commit/69d36739b16ef9d297564e6107c5deb3abc859b8", "message": "[#2363] Support inclusion of tenant ID in command topic\n\nThe MQTT adapter now allows clients to indicate whether they want the\ntarget device's tenant and/or device IDs to be included in the topic\nused when publishing commands.\n\nThis can be helpful for implementing (multi-tenant) protocol gateways\nwhich can then determine a device's tenant and/or device ID from the\ntopic name.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-12-21T13:33:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcyMTk5Mw==", "url": "https://github.com/eclipse/hono/pull/2374#discussion_r546721993", "bodyText": "Not needed anymore.", "author": "calohmn", "createdAt": "2020-12-21T14:02:18Z", "path": "adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/CommandSubscription.java", "diffHunk": "@@ -32,13 +33,19 @@\n  * <p>\n  * Examples:\n  * <ol>\n- * <li>{@code command/+/+/req/#} - authenticated device and verbose format</li>\n- * <li>{@code c/+/+/q/#} - authenticated device with short format</li>\n- * <li>{@code command/DEFAULT_TENANT/4711/req/#} unauthenticated device with verbose format</li>\n+ * <li>{@code command/DEFAULT_TENANT/4711/req/#} unauthenticated device</li>\n+ * <li>{@code command///req/#} - authenticated device</li>\n+ * <li>{@code c///q/#} - authenticated device using short names</li>\n  * </ol>\n  */\n public final class CommandSubscription {\n \n+    /**\n+     * The name of the MQTT adapter configuration property that defines if the tenant ID is\n+     * always included in the topic name that is used for publishing a command to a client.\n+     */\n+    public static final String CONFIG_PROPERTY_ALWAYS_INCLUDE_TENANT_ID = \"always-include-tenant-id\";", "originalCommit": "69d36739b16ef9d297564e6107c5deb3abc859b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczMzQ4NA==", "url": "https://github.com/eclipse/hono/pull/2374#discussion_r546733484", "bodyText": "true", "author": "sophokles73", "createdAt": "2020-12-21T14:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcyMTk5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c181c3b2241919f58a8952b388b22e20b2d393a4", "chunk": "diff --git a/adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/CommandSubscription.java b/adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/CommandSubscription.java\nindex 389c4670f..eb820bfaa 100644\n--- a/adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/CommandSubscription.java\n+++ b/adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/CommandSubscription.java\n\n@@ -40,12 +40,6 @@ import io.vertx.mqtt.MqttTopicSubscription;\n  */\n public final class CommandSubscription {\n \n-    /**\n-     * The name of the MQTT adapter configuration property that defines if the tenant ID is\n-     * always included in the topic name that is used for publishing a command to a client.\n-     */\n-    public static final String CONFIG_PROPERTY_ALWAYS_INCLUDE_TENANT_ID = \"always-include-tenant-id\";\n-\n     private static final Logger LOG = LoggerFactory.getLogger(CommandSubscription.class);\n \n     private final String endpoint;\n"}}, {"oid": "c181c3b2241919f58a8952b388b22e20b2d393a4", "url": "https://github.com/eclipse/hono/commit/c181c3b2241919f58a8952b388b22e20b2d393a4", "message": "[#2363] Support inclusion of tenant ID in command topic\n\nThe MQTT adapter now allows clients to indicate whether they want the\ntarget device's tenant and/or device IDs to be included in the topic\nused when publishing commands.\n\nThis can be helpful for implementing (multi-tenant) protocol gateways\nwhich can then determine a device's tenant and/or device ID from the\ntopic name.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-12-21T14:26:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczNDQ4NA==", "url": "https://github.com/eclipse/hono/pull/2374#discussion_r546734484", "bodyText": "Missing  null check information in JavaDoc.", "author": "kaniyan", "createdAt": "2020-12-21T14:26:00Z", "path": "adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/CommandSubscription.java", "diffHunk": "@@ -252,15 +269,11 @@ public boolean isGatewaySubscriptionForSpecificDevice() {\n      */\n     public String getCommandPublishTopic(final Command command) {\n \n-        // build topic string; examples:\n-        // command///req/xyz/light (authenticated device)\n-        // command///req//light (authenticated device, one-way)\n-        // command/DEFAULT_TENANT/4711/req/xyz/light (unauthenticated device)\n-        // command//4712/req/xyz/light (authenticated gateway)\n+        Objects.requireNonNull(command);", "originalCommit": "69d36739b16ef9d297564e6107c5deb3abc859b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8cd9ace38c706590ea3410926cf97df03bf98e1", "chunk": "diff --git a/adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/CommandSubscription.java b/adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/CommandSubscription.java\nindex 389c4670f..75278009a 100644\n--- a/adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/CommandSubscription.java\n+++ b/adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/CommandSubscription.java\n\n@@ -266,6 +260,7 @@ public final class CommandSubscription {\n      *\n      * @param command The command to publish.\n      * @return The topic name.\n+     * @throws NullPointerException if command is {@code null}.\n      */\n     public String getCommandPublishTopic(final Command command) {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczNjg5Mw==", "url": "https://github.com/eclipse/hono/pull/2374#discussion_r546736893", "bodyText": "At the end of the line, there is an extra semicolon.", "author": "kaniyan", "createdAt": "2020-12-21T14:30:12Z", "path": "adapters/mqtt-vertx-base/src/test/java/org/eclipse/hono/adapter/mqtt/CommandSubscriptionTest.java", "diffHunk": "@@ -30,177 +38,397 @@\n public class CommandSubscriptionTest {\n \n     private final Device device = new Device(\"tenant\", \"device\");\n+    private final Device gw = new Device(\"tenant\", \"gw\");\n \n-    /**\n-     * Verifies subscription pattern without authenticated device and correct pattern.\n-     */\n-    @Test\n-    public void testSubscriptionUnauth() {\n+    static Stream<String> endpointNames() {\n+        return Stream.of(getCommandEndpoint(), getCommandEndpointShort());\n+    }\n \n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"/tenant1/deviceA/req/#\", null);\n-        assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(\"tenant1\");\n-        assertThat(subscription.getDeviceId()).isEqualTo(\"deviceA\");\n-        assertThat(subscription.getEndpoint()).isEqualTo(getCommandEndpoint());\n-        assertThat(subscription.getRequestPart()).isEqualTo(\"req\");\n+    static Stream<Arguments> endpointAndReqNames() {\n+        return Stream.of(\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART),\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT));\n     }\n \n-    /**\n-     * Verifies subscription pattern without authenticated device and correct short pattern.\n-     */\n-    @Test\n-    public void testSubscriptionUnauthShort() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"c/tenant1/deviceA/q/#\", null);\n-        assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(\"tenant1\");\n-        assertThat(subscription.getDeviceId()).isEqualTo(\"deviceA\");\n-        assertThat(subscription.getEndpoint()).isEqualTo(CommandConstants.COMMAND_ENDPOINT_SHORT);\n-        assertThat(subscription.getRequestPart()).isEqualTo(CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT);\n+    static Stream<Arguments> endpointAndReqNamesWithQoS() {\n+        return Stream.of(\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART, MqttQoS.AT_MOST_ONCE),\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART, MqttQoS.AT_LEAST_ONCE),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART, MqttQoS.AT_MOST_ONCE),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART, MqttQoS.AT_LEAST_ONCE),\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT, MqttQoS.AT_MOST_ONCE),\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT, MqttQoS.AT_LEAST_ONCE),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT, MqttQoS.AT_MOST_ONCE),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT, MqttQoS.AT_LEAST_ONCE));\n     }\n \n     /**\n-     * Verifies subscription pattern with authenticated device and correct pattern.\n+     * Verifies that creating a subscription for a topic fails if the endpoint is neither\n+     * {@value CommandConstants#COMMAND_ENDPOINT} nor {@value CommandConstants#COMMAND_ENDPOINT_SHORT}.\n      */\n     @Test\n-    public void testSubscriptionAuth() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"/tenant/device/req/#\", device);\n-        assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n-        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+    public void testSubscriptionRequiresCorrectEndpoint() {\n+        final CommandSubscription subscription = CommandSubscription.fromTopic(\"cx/tenant/device/req/#\", null);\n+        assertThat(subscription).isNull();\n     }\n \n     /**\n-     * Verifies subscription pattern with authenticated device, correct pattern and valid qos.\n+     * Verifies that creating a subscription for a topic fails if the client is unauthenticated and neither\n+     * tenant nor device ID are specified explicitly.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n      */\n-    @Test\n-    public void testSubscriptionAuthWithQoS() {\n-        final MqttTopicSubscription mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n-                getCommandEndpoint() + \"/+/+/req/#\", MqttQoS.AT_LEAST_ONCE);\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device,\n-                \"testMqttClient\");\n-        assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(device.getTenantId());\n-        assertThat(subscription.getDeviceId()).isEqualTo(device.getDeviceId());\n-        assertThat(subscription.getTopic()).isEqualTo(getCommandEndpoint() + \"/+/+/req/#\");\n-        assertThat(subscription.getQos()).isEqualTo(MqttQoS.AT_LEAST_ONCE);\n-        assertThat(subscription.getClientId()).isEqualTo(\"testMqttClient\");\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNames\")\n+    public void testSubscriptionRequiresExplicitTenantAndDeviceIdForUnauthenticatedClient(\n+            final String endpointName,\n+            final String reqPartName) {\n+\n+        String topic = String.format(\"%s///%s/#\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n+\n+        topic = String.format(\"%s/+/+/%s/#\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n     }\n \n     /**\n-     * Verifies subscription pattern with auth device differing device id in topic.\n-     * This represents a scenario where a gateway subscribes on behalf of a device.\n+     * Verifies that creating a subscription for a topic fails if the request part in the topic is neither\n+     * {@value CommandConstants#COMMAND_RESPONSE_REQUEST_PART} nor {@value CommandConstants#COMMAND_RESPONSE_REQUEST_PART_SHORT}.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n      */\n-    @Test\n-    public void testSubscriptionAuthWithDifferentDeviceId() {\n-        final String gatewayManagedDeviceId = \"gatewayManagedDevice\";\n-        final MqttTopicSubscription mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n-                getCommandEndpoint() + \"//\" + gatewayManagedDeviceId + \"/req/#\", MqttQoS.AT_LEAST_ONCE);\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device,\n-                \"testMqttClient\");\n-        assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(device.getTenantId());\n-        assertThat(subscription.getDeviceId()).isEqualTo(gatewayManagedDeviceId);\n-        assertThat(subscription.getAuthenticatedDeviceId()).isEqualTo(device.getDeviceId());\n-        assertThat(subscription.getTopic()).isEqualTo(getCommandEndpoint() + \"//\" + gatewayManagedDeviceId + \"/req/#\");\n-        assertThat(subscription.getQos()).isEqualTo(MqttQoS.AT_LEAST_ONCE);\n-        assertThat(subscription.getClientId()).isEqualTo(\"testMqttClient\");\n-        assertThat(subscription.isGatewaySubscriptionForSpecificDevice()).isEqualTo(true);\n+    @ParameterizedTest\n+    @MethodSource(\"endpointNames\")\n+    public void testSubscriptionRequiresValidReqPart(final String endpointName) {\n+\n+        String topic = String.format(\"%s/tenant/device/notReqNorQ/#\", endpointName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n+\n+        topic = String.format(\"%s///notReqNorQ/#\", endpointName);\n+        assertThat(CommandSubscription.fromTopic(topic, device)).isNull();\n+\n+        topic = String.format(\"%s/+/+/notReqNorQ/#\", endpointName);\n+        assertThat(CommandSubscription.fromTopic(topic, device)).isNull();\n     }\n \n     /**\n-     * Verifies subscription pattern with authenticated device and correct short pattern.\n+     * Verifies that creating a subscription for a topic fails if the topic ends in something else than the <em>#</em>\n+     * character.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n      */\n-    @Test\n-    public void testSubscriptionAuthShort() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"c/tenant/device/q/#\", device);\n-        assertThat(subscription).isNotNull();\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNames\")\n+    public void testSubscriptionRequiresWildcardSegmentAtEnd(\n+            final String endpointName,\n+            final String reqPartName) {\n+\n+        String topic = String.format(\"%s/tenant/device/%s/not#\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n+\n+        topic = String.format(\"%s///%s/not#\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, device)).isNull();\n+\n+        topic = String.format(\"%s/+/+/%s/not#\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, device)).isNull();\n     }\n \n     /**\n-     * Verifies subscription pattern with authenticated device and correct pattern with different tenant/device as in\n-     * authentication is not allowed.\n+     * Verifies that creating a subscription for a topic fails if the topic contains\n+     * fewer or more than 5 segments.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n      */\n-    @Test\n-    public void testSubscriptionAuthDeviceDifferent() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"/tenantA/deviceB/req/#\", device);\n-        assertThat(subscription).isNull();\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNames\")\n+    public void testSubscriptionRequiresTopicWithFiveSegments(\n+            final String endpointName,\n+            final String reqPartName) {\n+\n+        String topic = String.format(\"%s/tenant/device/%s/#/additionalSegment\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n+\n+        topic = String.format(\"%s/tenant/device/%s\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n     }\n \n+\n     /**\n-     * Verifies subscription pattern with authenticated device and correct pattern without given tenant/device.\n+     * Verifies that an unauthenticated device can successfully subscribe for commands\n+     * using the default topic.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n+     * @param qos The requested QoS.\n      */\n-    @Test\n-    public void testSubscriptionAuthWithPattern() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"/+/+/req/#\", device);\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNamesWithQoS\")\n+    public void testSubscriptionSucceedsForUnauthenticatedDevice(\n+            final String endpointName,\n+            final String reqPartName,\n+            final MqttQoS qos) {\n+\n+        final MqttTopicSubscription mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/tenant1/deviceA/%s/#\", endpointName, reqPartName),\n+                qos);\n+\n+        final CommandSubscription subscription = CommandSubscription.fromTopic(mqttTopicSubscription, null, \"clientId\");\n         assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(device.getTenantId());\n-        assertThat(subscription.getDeviceId()).isEqualTo(device.getDeviceId());\n-        assertThat(subscription.getEndpoint()).isEqualTo(getCommandEndpoint());\n-        assertThat(subscription.getRequestPart()).isEqualTo(CommandConstants.COMMAND_RESPONSE_REQUEST_PART);\n+        assertThat(subscription.getClientId()).isEqualTo(\"clientId\");\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant1\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"deviceA\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n     }\n \n     /**\n-     * Verifies subscription pattern with authenticated device omitting tenant and device IDs.\n+     * Verifies that an authenticated device can successfully subscribe for commands\n+     * targeted at itself using all variants of topic names.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n+     * @param qos The requested QoS.\n      */\n-    @Test\n-    public void testSubscriptionAuthWithoutTenantDevice() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"///req/#\", device);\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNamesWithQoS\")\n+    public void testSubscriptionSucceedsForAuthenticatedDevice(\n+            final String endpointName,\n+            final String reqPartName,\n+            final MqttQoS qos) {\n+\n+        final Command command = mock(Command.class);\n+        when(command.isTargetedAtGateway()).thenReturn(false);\n+        when(command.getTenant()).thenReturn(device.getTenantId());\n+        when(command.getDeviceId()).thenReturn(device.getDeviceId());\n+        when(command.getRequestId()).thenReturn(\"requestId\");\n+        when(command.getName()).thenReturn(\"doSomething\");\n+\n+        // WHEN subscribing to commands using explicit topic\n+        MqttTopicSubscription mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/tenant/device/%s/#\", endpointName, reqPartName),\n+                qos);\n+\n+        CommandSubscription subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\");\n         assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(device.getTenantId());\n-        assertThat(subscription.getDeviceId()).isEqualTo(device.getDeviceId());\n-        assertThat(subscription.getEndpoint()).isEqualTo(getCommandEndpoint());\n-        assertThat(subscription.getRequestPart()).isEqualTo(CommandConstants.COMMAND_RESPONSE_REQUEST_PART);\n-    }\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        // THEN the command topic does include both the tenant and device ID\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s/%s/%s/%s/requestId/doSomething\",\n+                    endpointName, device.getTenantId(), device.getDeviceId(), reqPartName));\n \n-    /**\n-     * Verifies subscription pattern without authenticated device and not given tenant/device is not allowed.\n-     */\n-    @Test\n-    public void testSubscriptionUnauthWithPattern() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"/+/+/req/#\", null);\n-        assertThat(subscription).isNull();\n-    }\n+        // WHEN subscribing to commands including tenant only\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/tenant//%s/#\", endpointName, reqPartName),\n+                qos);\n \n-    /**\n-     * Verifies subscription pattern with other endpoint as c and control is not allowed.\n-     */\n-    @Test\n-    public void testSubscriptionEndpoint() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"cx/tenant/device/q/#\", null);\n-        assertThat(subscription).isNull();\n-    }\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        // THEN the command topic does include the tenant as well\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s/%s//%s/requestId/doSomething\",\n+                    endpointName, device.getTenantId(), reqPartName));\n \n-    /**\n-     * Verifies subscription pattern with other req part as q and req is not allowed.\n-     */\n-    @Test\n-    public void testSubscriptionReq() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"c/tenant/device/qx/#\", null);\n-        assertThat(subscription).isNull();\n-    }\n+        // WHEN subscribing to commands including device ID only\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s//device/%s/#\", endpointName, reqPartName),\n+                qos);\n \n-    /**\n-     * Verifies subscription pattern with other ending part as # is not allowed.\n-     */\n-    @Test\n-    public void testSubscriptionEnd() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"c/tenant/device/q/a\", null);\n-        assertThat(subscription).isNull();\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        // THEN the command topic does include the device ID as well\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s//%s/%s/requestId/doSomething\",\n+                    endpointName, device.getDeviceId(), reqPartName));\n+\n+        // WHEN subscribing to commands using implicit topic\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s///%s/#\", endpointName, reqPartName),\n+                qos);\n+\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        // THEN the command topic does not include tenant nor device ID\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s///%s/requestId/doSomething\",\n+                    endpointName, reqPartName));\n+\n+        // WHEN subscribing to commands using the deprecated topic filter\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/+/+/%s/#\", endpointName, reqPartName),\n+                qos);\n+\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        // THEN the command topic does not include tenant nor device ID\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s///%s/requestId/doSomething\",\n+                    endpointName, reqPartName));\n+\n+        // using a tenant other than the tenant that the device belongs to should fail\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/otherTenant/device/%s/#\", endpointName, reqPartName),\n+                qos);\n+        assertThat(CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\")).isNull();;", "originalCommit": "c181c3b2241919f58a8952b388b22e20b2d393a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8cd9ace38c706590ea3410926cf97df03bf98e1", "chunk": "diff --git a/adapters/mqtt-vertx-base/src/test/java/org/eclipse/hono/adapter/mqtt/CommandSubscriptionTest.java b/adapters/mqtt-vertx-base/src/test/java/org/eclipse/hono/adapter/mqtt/CommandSubscriptionTest.java\nindex 1d9ffc39a..9496d3d70 100644\n--- a/adapters/mqtt-vertx-base/src/test/java/org/eclipse/hono/adapter/mqtt/CommandSubscriptionTest.java\n+++ b/adapters/mqtt-vertx-base/src/test/java/org/eclipse/hono/adapter/mqtt/CommandSubscriptionTest.java\n\n@@ -298,7 +298,7 @@ public class CommandSubscriptionTest {\n         mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n                 String.format(\"%s/otherTenant/device/%s/#\", endpointName, reqPartName),\n                 qos);\n-        assertThat(CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\")).isNull();;\n+        assertThat(CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\")).isNull();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczNjk5Ng==", "url": "https://github.com/eclipse/hono/pull/2374#discussion_r546736996", "bodyText": "At the end of the line, there is an extra semicolon.", "author": "kaniyan", "createdAt": "2020-12-21T14:30:22Z", "path": "adapters/mqtt-vertx-base/src/test/java/org/eclipse/hono/adapter/mqtt/CommandSubscriptionTest.java", "diffHunk": "@@ -30,177 +38,397 @@\n public class CommandSubscriptionTest {\n \n     private final Device device = new Device(\"tenant\", \"device\");\n+    private final Device gw = new Device(\"tenant\", \"gw\");\n \n-    /**\n-     * Verifies subscription pattern without authenticated device and correct pattern.\n-     */\n-    @Test\n-    public void testSubscriptionUnauth() {\n+    static Stream<String> endpointNames() {\n+        return Stream.of(getCommandEndpoint(), getCommandEndpointShort());\n+    }\n \n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"/tenant1/deviceA/req/#\", null);\n-        assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(\"tenant1\");\n-        assertThat(subscription.getDeviceId()).isEqualTo(\"deviceA\");\n-        assertThat(subscription.getEndpoint()).isEqualTo(getCommandEndpoint());\n-        assertThat(subscription.getRequestPart()).isEqualTo(\"req\");\n+    static Stream<Arguments> endpointAndReqNames() {\n+        return Stream.of(\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART),\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT));\n     }\n \n-    /**\n-     * Verifies subscription pattern without authenticated device and correct short pattern.\n-     */\n-    @Test\n-    public void testSubscriptionUnauthShort() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"c/tenant1/deviceA/q/#\", null);\n-        assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(\"tenant1\");\n-        assertThat(subscription.getDeviceId()).isEqualTo(\"deviceA\");\n-        assertThat(subscription.getEndpoint()).isEqualTo(CommandConstants.COMMAND_ENDPOINT_SHORT);\n-        assertThat(subscription.getRequestPart()).isEqualTo(CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT);\n+    static Stream<Arguments> endpointAndReqNamesWithQoS() {\n+        return Stream.of(\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART, MqttQoS.AT_MOST_ONCE),\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART, MqttQoS.AT_LEAST_ONCE),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART, MqttQoS.AT_MOST_ONCE),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART, MqttQoS.AT_LEAST_ONCE),\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT, MqttQoS.AT_MOST_ONCE),\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT, MqttQoS.AT_LEAST_ONCE),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT, MqttQoS.AT_MOST_ONCE),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT, MqttQoS.AT_LEAST_ONCE));\n     }\n \n     /**\n-     * Verifies subscription pattern with authenticated device and correct pattern.\n+     * Verifies that creating a subscription for a topic fails if the endpoint is neither\n+     * {@value CommandConstants#COMMAND_ENDPOINT} nor {@value CommandConstants#COMMAND_ENDPOINT_SHORT}.\n      */\n     @Test\n-    public void testSubscriptionAuth() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"/tenant/device/req/#\", device);\n-        assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n-        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+    public void testSubscriptionRequiresCorrectEndpoint() {\n+        final CommandSubscription subscription = CommandSubscription.fromTopic(\"cx/tenant/device/req/#\", null);\n+        assertThat(subscription).isNull();\n     }\n \n     /**\n-     * Verifies subscription pattern with authenticated device, correct pattern and valid qos.\n+     * Verifies that creating a subscription for a topic fails if the client is unauthenticated and neither\n+     * tenant nor device ID are specified explicitly.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n      */\n-    @Test\n-    public void testSubscriptionAuthWithQoS() {\n-        final MqttTopicSubscription mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n-                getCommandEndpoint() + \"/+/+/req/#\", MqttQoS.AT_LEAST_ONCE);\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device,\n-                \"testMqttClient\");\n-        assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(device.getTenantId());\n-        assertThat(subscription.getDeviceId()).isEqualTo(device.getDeviceId());\n-        assertThat(subscription.getTopic()).isEqualTo(getCommandEndpoint() + \"/+/+/req/#\");\n-        assertThat(subscription.getQos()).isEqualTo(MqttQoS.AT_LEAST_ONCE);\n-        assertThat(subscription.getClientId()).isEqualTo(\"testMqttClient\");\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNames\")\n+    public void testSubscriptionRequiresExplicitTenantAndDeviceIdForUnauthenticatedClient(\n+            final String endpointName,\n+            final String reqPartName) {\n+\n+        String topic = String.format(\"%s///%s/#\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n+\n+        topic = String.format(\"%s/+/+/%s/#\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n     }\n \n     /**\n-     * Verifies subscription pattern with auth device differing device id in topic.\n-     * This represents a scenario where a gateway subscribes on behalf of a device.\n+     * Verifies that creating a subscription for a topic fails if the request part in the topic is neither\n+     * {@value CommandConstants#COMMAND_RESPONSE_REQUEST_PART} nor {@value CommandConstants#COMMAND_RESPONSE_REQUEST_PART_SHORT}.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n      */\n-    @Test\n-    public void testSubscriptionAuthWithDifferentDeviceId() {\n-        final String gatewayManagedDeviceId = \"gatewayManagedDevice\";\n-        final MqttTopicSubscription mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n-                getCommandEndpoint() + \"//\" + gatewayManagedDeviceId + \"/req/#\", MqttQoS.AT_LEAST_ONCE);\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device,\n-                \"testMqttClient\");\n-        assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(device.getTenantId());\n-        assertThat(subscription.getDeviceId()).isEqualTo(gatewayManagedDeviceId);\n-        assertThat(subscription.getAuthenticatedDeviceId()).isEqualTo(device.getDeviceId());\n-        assertThat(subscription.getTopic()).isEqualTo(getCommandEndpoint() + \"//\" + gatewayManagedDeviceId + \"/req/#\");\n-        assertThat(subscription.getQos()).isEqualTo(MqttQoS.AT_LEAST_ONCE);\n-        assertThat(subscription.getClientId()).isEqualTo(\"testMqttClient\");\n-        assertThat(subscription.isGatewaySubscriptionForSpecificDevice()).isEqualTo(true);\n+    @ParameterizedTest\n+    @MethodSource(\"endpointNames\")\n+    public void testSubscriptionRequiresValidReqPart(final String endpointName) {\n+\n+        String topic = String.format(\"%s/tenant/device/notReqNorQ/#\", endpointName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n+\n+        topic = String.format(\"%s///notReqNorQ/#\", endpointName);\n+        assertThat(CommandSubscription.fromTopic(topic, device)).isNull();\n+\n+        topic = String.format(\"%s/+/+/notReqNorQ/#\", endpointName);\n+        assertThat(CommandSubscription.fromTopic(topic, device)).isNull();\n     }\n \n     /**\n-     * Verifies subscription pattern with authenticated device and correct short pattern.\n+     * Verifies that creating a subscription for a topic fails if the topic ends in something else than the <em>#</em>\n+     * character.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n      */\n-    @Test\n-    public void testSubscriptionAuthShort() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"c/tenant/device/q/#\", device);\n-        assertThat(subscription).isNotNull();\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNames\")\n+    public void testSubscriptionRequiresWildcardSegmentAtEnd(\n+            final String endpointName,\n+            final String reqPartName) {\n+\n+        String topic = String.format(\"%s/tenant/device/%s/not#\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n+\n+        topic = String.format(\"%s///%s/not#\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, device)).isNull();\n+\n+        topic = String.format(\"%s/+/+/%s/not#\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, device)).isNull();\n     }\n \n     /**\n-     * Verifies subscription pattern with authenticated device and correct pattern with different tenant/device as in\n-     * authentication is not allowed.\n+     * Verifies that creating a subscription for a topic fails if the topic contains\n+     * fewer or more than 5 segments.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n      */\n-    @Test\n-    public void testSubscriptionAuthDeviceDifferent() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"/tenantA/deviceB/req/#\", device);\n-        assertThat(subscription).isNull();\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNames\")\n+    public void testSubscriptionRequiresTopicWithFiveSegments(\n+            final String endpointName,\n+            final String reqPartName) {\n+\n+        String topic = String.format(\"%s/tenant/device/%s/#/additionalSegment\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n+\n+        topic = String.format(\"%s/tenant/device/%s\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n     }\n \n+\n     /**\n-     * Verifies subscription pattern with authenticated device and correct pattern without given tenant/device.\n+     * Verifies that an unauthenticated device can successfully subscribe for commands\n+     * using the default topic.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n+     * @param qos The requested QoS.\n      */\n-    @Test\n-    public void testSubscriptionAuthWithPattern() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"/+/+/req/#\", device);\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNamesWithQoS\")\n+    public void testSubscriptionSucceedsForUnauthenticatedDevice(\n+            final String endpointName,\n+            final String reqPartName,\n+            final MqttQoS qos) {\n+\n+        final MqttTopicSubscription mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/tenant1/deviceA/%s/#\", endpointName, reqPartName),\n+                qos);\n+\n+        final CommandSubscription subscription = CommandSubscription.fromTopic(mqttTopicSubscription, null, \"clientId\");\n         assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(device.getTenantId());\n-        assertThat(subscription.getDeviceId()).isEqualTo(device.getDeviceId());\n-        assertThat(subscription.getEndpoint()).isEqualTo(getCommandEndpoint());\n-        assertThat(subscription.getRequestPart()).isEqualTo(CommandConstants.COMMAND_RESPONSE_REQUEST_PART);\n+        assertThat(subscription.getClientId()).isEqualTo(\"clientId\");\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant1\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"deviceA\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n     }\n \n     /**\n-     * Verifies subscription pattern with authenticated device omitting tenant and device IDs.\n+     * Verifies that an authenticated device can successfully subscribe for commands\n+     * targeted at itself using all variants of topic names.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n+     * @param qos The requested QoS.\n      */\n-    @Test\n-    public void testSubscriptionAuthWithoutTenantDevice() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"///req/#\", device);\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNamesWithQoS\")\n+    public void testSubscriptionSucceedsForAuthenticatedDevice(\n+            final String endpointName,\n+            final String reqPartName,\n+            final MqttQoS qos) {\n+\n+        final Command command = mock(Command.class);\n+        when(command.isTargetedAtGateway()).thenReturn(false);\n+        when(command.getTenant()).thenReturn(device.getTenantId());\n+        when(command.getDeviceId()).thenReturn(device.getDeviceId());\n+        when(command.getRequestId()).thenReturn(\"requestId\");\n+        when(command.getName()).thenReturn(\"doSomething\");\n+\n+        // WHEN subscribing to commands using explicit topic\n+        MqttTopicSubscription mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/tenant/device/%s/#\", endpointName, reqPartName),\n+                qos);\n+\n+        CommandSubscription subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\");\n         assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(device.getTenantId());\n-        assertThat(subscription.getDeviceId()).isEqualTo(device.getDeviceId());\n-        assertThat(subscription.getEndpoint()).isEqualTo(getCommandEndpoint());\n-        assertThat(subscription.getRequestPart()).isEqualTo(CommandConstants.COMMAND_RESPONSE_REQUEST_PART);\n-    }\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        // THEN the command topic does include both the tenant and device ID\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s/%s/%s/%s/requestId/doSomething\",\n+                    endpointName, device.getTenantId(), device.getDeviceId(), reqPartName));\n \n-    /**\n-     * Verifies subscription pattern without authenticated device and not given tenant/device is not allowed.\n-     */\n-    @Test\n-    public void testSubscriptionUnauthWithPattern() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"/+/+/req/#\", null);\n-        assertThat(subscription).isNull();\n-    }\n+        // WHEN subscribing to commands including tenant only\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/tenant//%s/#\", endpointName, reqPartName),\n+                qos);\n \n-    /**\n-     * Verifies subscription pattern with other endpoint as c and control is not allowed.\n-     */\n-    @Test\n-    public void testSubscriptionEndpoint() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"cx/tenant/device/q/#\", null);\n-        assertThat(subscription).isNull();\n-    }\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        // THEN the command topic does include the tenant as well\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s/%s//%s/requestId/doSomething\",\n+                    endpointName, device.getTenantId(), reqPartName));\n \n-    /**\n-     * Verifies subscription pattern with other req part as q and req is not allowed.\n-     */\n-    @Test\n-    public void testSubscriptionReq() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"c/tenant/device/qx/#\", null);\n-        assertThat(subscription).isNull();\n-    }\n+        // WHEN subscribing to commands including device ID only\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s//device/%s/#\", endpointName, reqPartName),\n+                qos);\n \n-    /**\n-     * Verifies subscription pattern with other ending part as # is not allowed.\n-     */\n-    @Test\n-    public void testSubscriptionEnd() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"c/tenant/device/q/a\", null);\n-        assertThat(subscription).isNull();\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        // THEN the command topic does include the device ID as well\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s//%s/%s/requestId/doSomething\",\n+                    endpointName, device.getDeviceId(), reqPartName));\n+\n+        // WHEN subscribing to commands using implicit topic\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s///%s/#\", endpointName, reqPartName),\n+                qos);\n+\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        // THEN the command topic does not include tenant nor device ID\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s///%s/requestId/doSomething\",\n+                    endpointName, reqPartName));\n+\n+        // WHEN subscribing to commands using the deprecated topic filter\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/+/+/%s/#\", endpointName, reqPartName),\n+                qos);\n+\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        // THEN the command topic does not include tenant nor device ID\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s///%s/requestId/doSomething\",\n+                    endpointName, reqPartName));\n+\n+        // using a tenant other than the tenant that the device belongs to should fail\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/otherTenant/device/%s/#\", endpointName, reqPartName),\n+                qos);\n+        assertThat(CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\")).isNull();;\n     }\n \n     /**\n-     * Verifies subscription pattern with other then 5 parts is not allowed.\n+     * Verifies that an authenticated gateway can successfully subscribe for commands\n+     * targeted at one of devices that it is authorized to act on behalf of.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n+     * @param qos The requested QoS.\n      */\n-    @Test\n-    public void testSubscriptionParts() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"c/tenant/device/q/#/x\", null);\n-        assertThat(subscription).isNull();\n-        final CommandSubscription subscription2 = CommandSubscription.fromTopic(\"c/tenant/device/q\", null);\n-        assertThat(subscription2).isNull();\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNamesWithQoS\")\n+    public void testSubscriptionSucceedsForAuthenticatedGateway(\n+            final String endpointName,\n+            final String reqPartName,\n+            final MqttQoS qos) {\n+\n+        final String gatewayManagedDeviceId = \"gatewayManagedDevice\";\n+\n+        final Command command = mock(Command.class);\n+        when(command.isTargetedAtGateway()).thenReturn(true);\n+        when(command.getTenant()).thenReturn(gw.getTenantId());\n+        when(command.getDeviceId()).thenReturn(gw.getDeviceId());\n+        when(command.getOriginalDeviceId()).thenReturn(gatewayManagedDeviceId);\n+        when(command.getRequestId()).thenReturn(\"requestId\");\n+        when(command.getName()).thenReturn(\"doSomething\");\n+\n+        // WHEN subscribing to commands for a specific device omitting tenant\n+        MqttTopicSubscription mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s//%s/%s/#\", endpointName, gatewayManagedDeviceId, reqPartName),\n+                qos);\n+\n+        CommandSubscription subscription = CommandSubscription.fromTopic(mqttTopicSubscription, gw, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(gw.getTenantId());\n+        assertThat(subscription.getDeviceId()).isEqualTo(gatewayManagedDeviceId);\n+        assertThat(subscription.getAuthenticatedDeviceId()).isEqualTo(gw.getDeviceId());\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        assertThat(subscription.getClientId()).isEqualTo(\"clientId\");\n+        assertThat(subscription.isGatewaySubscriptionForSpecificDevice()).isEqualTo(true);\n+        // THEN the command topic does not include the tenant either\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s//%s/%s/requestId/doSomething\",\n+                    endpointName, gatewayManagedDeviceId, reqPartName));\n+\n+        // WHEN subscribing to commands for a specific device including the tenant\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/%s/%s/%s/#\", endpointName, device.getTenantId(), gatewayManagedDeviceId, reqPartName),\n+                qos);\n+\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, gw, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(gw.getTenantId());\n+        assertThat(subscription.getDeviceId()).isEqualTo(gatewayManagedDeviceId);\n+        assertThat(subscription.getAuthenticatedDeviceId()).isEqualTo(gw.getDeviceId());\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        assertThat(subscription.getClientId()).isEqualTo(\"clientId\");\n+        assertThat(subscription.isGatewaySubscriptionForSpecificDevice()).isEqualTo(true);\n+        // THEN the command topic does include the tenant as well\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s/%s/%s/%s/requestId/doSomething\",\n+                    endpointName, gw.getTenantId(), gatewayManagedDeviceId, reqPartName));\n+\n+        // WHEN subscribing to commands for all devices omitting tenant\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s//+/%s/#\", endpointName, reqPartName),\n+                qos);\n+\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, gw, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(gw.getTenantId());\n+        assertThat(subscription.getDeviceId()).isEqualTo(gw.getDeviceId());\n+        assertThat(subscription.getAuthenticatedDeviceId()).isEqualTo(gw.getDeviceId());\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        assertThat(subscription.getClientId()).isEqualTo(\"clientId\");\n+        assertThat(subscription.isGatewaySubscriptionForSpecificDevice()).isEqualTo(false);\n+        // THEN the command topic does not include the tenant either\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s//%s/%s/requestId/doSomething\",\n+                    endpointName, gatewayManagedDeviceId, reqPartName));\n+\n+        // WHEN subscribing to commands for all devices including the tenant\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/%s/+/%s/#\", endpointName, device.getTenantId(), reqPartName),\n+                qos);\n+\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, gw, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(gw.getTenantId());\n+        assertThat(subscription.getDeviceId()).isEqualTo(gw.getDeviceId());\n+        assertThat(subscription.getAuthenticatedDeviceId()).isEqualTo(gw.getDeviceId());\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        assertThat(subscription.getClientId()).isEqualTo(\"clientId\");\n+        assertThat(subscription.isGatewaySubscriptionForSpecificDevice()).isEqualTo(false);\n+        // THEN the command topic does include the tenant as well\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s/%s/%s/%s/requestId/doSomething\",\n+                    endpointName, gw.getTenantId(), gatewayManagedDeviceId, reqPartName));\n+\n+        // WHEN subscribing to commands for all devices using the deprecated topic filter\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/+/+/%s/#\", endpointName, reqPartName),\n+                qos);\n+\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, gw, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(gw.getTenantId());\n+        assertThat(subscription.getDeviceId()).isEqualTo(gw.getDeviceId());\n+        assertThat(subscription.getAuthenticatedDeviceId()).isEqualTo(gw.getDeviceId());\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        assertThat(subscription.getClientId()).isEqualTo(\"clientId\");\n+        assertThat(subscription.isGatewaySubscriptionForSpecificDevice()).isEqualTo(false);\n+        // THEN the command topic does not include the tenant either\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s//%s/%s/requestId/doSomething\",\n+                    endpointName, gatewayManagedDeviceId, reqPartName));\n+\n+        // using a tenant other than the tenant that the gateway belongs to should fail\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/otherTenant/+/%s/#\", endpointName, reqPartName),\n+                qos);\n+        assertThat(CommandSubscription.fromTopic(mqttTopicSubscription, gw, \"clientId\")).isNull();;", "originalCommit": "c181c3b2241919f58a8952b388b22e20b2d393a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8cd9ace38c706590ea3410926cf97df03bf98e1", "chunk": "diff --git a/adapters/mqtt-vertx-base/src/test/java/org/eclipse/hono/adapter/mqtt/CommandSubscriptionTest.java b/adapters/mqtt-vertx-base/src/test/java/org/eclipse/hono/adapter/mqtt/CommandSubscriptionTest.java\nindex 1d9ffc39a..9496d3d70 100644\n--- a/adapters/mqtt-vertx-base/src/test/java/org/eclipse/hono/adapter/mqtt/CommandSubscriptionTest.java\n+++ b/adapters/mqtt-vertx-base/src/test/java/org/eclipse/hono/adapter/mqtt/CommandSubscriptionTest.java\n\n@@ -298,7 +298,7 @@ public class CommandSubscriptionTest {\n         mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n                 String.format(\"%s/otherTenant/device/%s/#\", endpointName, reqPartName),\n                 qos);\n-        assertThat(CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\")).isNull();;\n+        assertThat(CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\")).isNull();\n     }\n \n     /**\n"}}, {"oid": "c8cd9ace38c706590ea3410926cf97df03bf98e1", "url": "https://github.com/eclipse/hono/commit/c8cd9ace38c706590ea3410926cf97df03bf98e1", "message": "[#2363] Support inclusion of tenant ID in command topic\n\nThe MQTT adapter now allows clients to indicate whether they want the\ntarget device's tenant and/or device IDs to be included in the topic\nused when publishing commands.\n\nThis can be helpful for implementing (multi-tenant) protocol gateways\nwhich can then determine a device's tenant and/or device ID from the\ntopic name.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-12-21T17:34:45Z", "type": "commit"}, {"oid": "c8cd9ace38c706590ea3410926cf97df03bf98e1", "url": "https://github.com/eclipse/hono/commit/c8cd9ace38c706590ea3410926cf97df03bf98e1", "message": "[#2363] Support inclusion of tenant ID in command topic\n\nThe MQTT adapter now allows clients to indicate whether they want the\ntarget device's tenant and/or device IDs to be included in the topic\nused when publishing commands.\n\nThis can be helpful for implementing (multi-tenant) protocol gateways\nwhich can then determine a device's tenant and/or device ID from the\ntopic name.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-12-21T17:34:45Z", "type": "forcePushed"}]}