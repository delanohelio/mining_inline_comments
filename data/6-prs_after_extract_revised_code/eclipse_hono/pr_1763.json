{"pr_number": 1763, "pr_title": "[#1346] Remove event bus from credential management endpoint", "pr_createdAt": "2020-02-11T16:42:04Z", "pr_url": "https://github.com/eclipse/hono/pull/1763", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEzMTYyMA==", "url": "https://github.com/eclipse/hono/pull/1763#discussion_r378131620", "bodyText": "We moved this to the static field in other implementations.", "author": "dejanb", "createdAt": "2020-02-12T09:31:52Z", "path": "service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.management.credentials;\n+\n+import io.opentracing.Span;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+import java.net.HttpURLConnection;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.service.http.AbstractHttpEndpoint;\n+import org.eclipse.hono.service.http.HttpUtils;\n+import org.eclipse.hono.service.http.TracingHandler;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Util;\n+\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * An {@code HttpEndpoint} for managing device credentials.\n+ * <p>\n+ * This endpoint implements Hono's <a href=\"https://www.eclipse.org/hono/docs/api/credentials//\">Credentials API</a>.\n+ * It receives HTTP requests representing operation invocations and forward them to the\n+ * Credential Management Service Implementation for processing.\n+ * The outcome is then returned to the client in the HTTP response.\n+ */\n+public abstract class AbstractCredentialsManagementHttpEndpoint extends AbstractHttpEndpoint<ServiceConfigProperties> {\n+\n+\n+    private static final String SPAN_NAME_GET_CREDENTIALS = \"get Credentials from management API\";\n+    private static final String SPAN_NAME_UPDATE_CREDENTIALS = \"update Credentials from management API\";\n+\n+    /**\n+     * Creates an endpoint for a Vertx instance.\n+     *\n+     * @param vertx The Vertx instance to use.\n+     * @throws NullPointerException if vertx is {@code null};\n+     */\n+    @Autowired\n+    public AbstractCredentialsManagementHttpEndpoint(final Vertx vertx) {\n+        super(Objects.requireNonNull(vertx));\n+    }\n+\n+    /**\n+     * Returns an empty String as this implementation does not use event bus.\n+     */\n+    @Override\n+    protected String getEventBusAddress() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return String.format(\"%s/%s\",", "originalCommit": "0e065c6314bbe2a3fafdc2495ec01dac88eacd61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd0ad98109154f7e8cca4b3b44ffa742ce1594c8", "chunk": "diff --git a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\nindex 2f3f88aeb..1334c1745 100644\n--- a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\n+++ b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\n\n@@ -57,6 +57,10 @@ public abstract class AbstractCredentialsManagementHttpEndpoint extends Abstract\n     private static final String SPAN_NAME_GET_CREDENTIALS = \"get Credentials from management API\";\n     private static final String SPAN_NAME_UPDATE_CREDENTIALS = \"update Credentials from management API\";\n \n+    private static final String CREDENTIALS_MANAGEMENT_ENDPOINT_NAME = String.format(\"%s/%s\",\n+                    RegistryManagementConstants.API_VERSION,\n+                    RegistryManagementConstants.CREDENTIALS_HTTP_ENDPOINT);\n+\n     /**\n      * Creates an endpoint for a Vertx instance.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEzMjYyMQ==", "url": "https://github.com/eclipse/hono/pull/1763#discussion_r378132621", "bodyText": "Take a look at how Util.getRequestParam() is used in tenant implementation. We should be consistent here and change device endpoint as well.", "author": "dejanb", "createdAt": "2020-02-12T09:33:35Z", "path": "service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.management.credentials;\n+\n+import io.opentracing.Span;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+import java.net.HttpURLConnection;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.service.http.AbstractHttpEndpoint;\n+import org.eclipse.hono.service.http.HttpUtils;\n+import org.eclipse.hono.service.http.TracingHandler;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Util;\n+\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * An {@code HttpEndpoint} for managing device credentials.\n+ * <p>\n+ * This endpoint implements Hono's <a href=\"https://www.eclipse.org/hono/docs/api/credentials//\">Credentials API</a>.\n+ * It receives HTTP requests representing operation invocations and forward them to the\n+ * Credential Management Service Implementation for processing.\n+ * The outcome is then returned to the client in the HTTP response.\n+ */\n+public abstract class AbstractCredentialsManagementHttpEndpoint extends AbstractHttpEndpoint<ServiceConfigProperties> {\n+\n+\n+    private static final String SPAN_NAME_GET_CREDENTIALS = \"get Credentials from management API\";\n+    private static final String SPAN_NAME_UPDATE_CREDENTIALS = \"update Credentials from management API\";\n+\n+    /**\n+     * Creates an endpoint for a Vertx instance.\n+     *\n+     * @param vertx The Vertx instance to use.\n+     * @throws NullPointerException if vertx is {@code null};\n+     */\n+    @Autowired\n+    public AbstractCredentialsManagementHttpEndpoint(final Vertx vertx) {\n+        super(Objects.requireNonNull(vertx));\n+    }\n+\n+    /**\n+     * Returns an empty String as this implementation does not use event bus.\n+     */\n+    @Override\n+    protected String getEventBusAddress() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return String.format(\"%s/%s\",\n+                RegistryManagementConstants.API_VERSION,\n+                RegistryManagementConstants.CREDENTIALS_HTTP_ENDPOINT);\n+    }\n+\n+    @Override\n+    public void addRoutes(final Router router) {\n+\n+        final String pathWithTenantAndDeviceId = String.format(\"/%s/:%s/:%s\",\n+                getName(), PARAM_TENANT_ID, PARAM_DEVICE_ID);\n+\n+\n+        // Add CORS handler\n+        router.route(pathWithTenantAndDeviceId).handler(createCorsHandler(config.getCorsAllowedOrigin(), EnumSet.of(HttpMethod.GET, HttpMethod.PUT)));\n+\n+        final BodyHandler bodyHandler = BodyHandler.create();\n+        bodyHandler.setBodyLimit(config.getMaxPayloadSize());\n+\n+        // get all credentials for a given device\n+        router.get(pathWithTenantAndDeviceId).handler(this::getCredentialsForDevice);\n+\n+        // set credentials for a given device\n+        router.put(pathWithTenantAndDeviceId).handler(bodyHandler);\n+        router.put(pathWithTenantAndDeviceId).handler(this::extractRequiredJsonArrayPayload);\n+        router.put(pathWithTenantAndDeviceId).handler(this::extractIfMatchVersionParam);\n+        router.put(pathWithTenantAndDeviceId).handler(this::updateCredentials);\n+    }\n+\n+\n+    /**\n+     * The service to forward requests to.\n+     *\n+     * @return The service to bind to, must never return {@code null}.\n+     */\n+    protected abstract CredentialsManagementService getService();\n+\n+    private void updateCredentials(final RoutingContext ctx) {\n+\n+        final Span span = Util.newChildSpan(SPAN_NAME_UPDATE_CREDENTIALS, TracingHandler.serverSpanContext(ctx), tracer,\n+                getClass().getSimpleName());\n+\n+        final JsonArray credentials = ctx.get(KEY_REQUEST_BODY);\n+\n+        final String deviceId = getDeviceIdParam(ctx);\n+        final Optional<String> resourceVersion = Optional.ofNullable(ctx.get(KEY_RESOURCE_VERSION));\n+        final String tenantId = getTenantParam(ctx);\n+\n+        if (tenantId == null) {", "originalCommit": "0e065c6314bbe2a3fafdc2495ec01dac88eacd61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd0ad98109154f7e8cca4b3b44ffa742ce1594c8", "chunk": "diff --git a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\nindex 2f3f88aeb..1334c1745 100644\n--- a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\n+++ b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\n\n@@ -57,6 +57,10 @@ public abstract class AbstractCredentialsManagementHttpEndpoint extends Abstract\n     private static final String SPAN_NAME_GET_CREDENTIALS = \"get Credentials from management API\";\n     private static final String SPAN_NAME_UPDATE_CREDENTIALS = \"update Credentials from management API\";\n \n+    private static final String CREDENTIALS_MANAGEMENT_ENDPOINT_NAME = String.format(\"%s/%s\",\n+                    RegistryManagementConstants.API_VERSION,\n+                    RegistryManagementConstants.CREDENTIALS_HTTP_ENDPOINT);\n+\n     /**\n      * Creates an endpoint for a Vertx instance.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEzMzA2MQ==", "url": "https://github.com/eclipse/hono/pull/1763#discussion_r378133061", "bodyText": "We need to finish response and span here (and return?)", "author": "dejanb", "createdAt": "2020-02-12T09:34:24Z", "path": "service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.management.credentials;\n+\n+import io.opentracing.Span;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+import java.net.HttpURLConnection;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.service.http.AbstractHttpEndpoint;\n+import org.eclipse.hono.service.http.HttpUtils;\n+import org.eclipse.hono.service.http.TracingHandler;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Util;\n+\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * An {@code HttpEndpoint} for managing device credentials.\n+ * <p>\n+ * This endpoint implements Hono's <a href=\"https://www.eclipse.org/hono/docs/api/credentials//\">Credentials API</a>.\n+ * It receives HTTP requests representing operation invocations and forward them to the\n+ * Credential Management Service Implementation for processing.\n+ * The outcome is then returned to the client in the HTTP response.\n+ */\n+public abstract class AbstractCredentialsManagementHttpEndpoint extends AbstractHttpEndpoint<ServiceConfigProperties> {\n+\n+\n+    private static final String SPAN_NAME_GET_CREDENTIALS = \"get Credentials from management API\";\n+    private static final String SPAN_NAME_UPDATE_CREDENTIALS = \"update Credentials from management API\";\n+\n+    /**\n+     * Creates an endpoint for a Vertx instance.\n+     *\n+     * @param vertx The Vertx instance to use.\n+     * @throws NullPointerException if vertx is {@code null};\n+     */\n+    @Autowired\n+    public AbstractCredentialsManagementHttpEndpoint(final Vertx vertx) {\n+        super(Objects.requireNonNull(vertx));\n+    }\n+\n+    /**\n+     * Returns an empty String as this implementation does not use event bus.\n+     */\n+    @Override\n+    protected String getEventBusAddress() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return String.format(\"%s/%s\",\n+                RegistryManagementConstants.API_VERSION,\n+                RegistryManagementConstants.CREDENTIALS_HTTP_ENDPOINT);\n+    }\n+\n+    @Override\n+    public void addRoutes(final Router router) {\n+\n+        final String pathWithTenantAndDeviceId = String.format(\"/%s/:%s/:%s\",\n+                getName(), PARAM_TENANT_ID, PARAM_DEVICE_ID);\n+\n+\n+        // Add CORS handler\n+        router.route(pathWithTenantAndDeviceId).handler(createCorsHandler(config.getCorsAllowedOrigin(), EnumSet.of(HttpMethod.GET, HttpMethod.PUT)));\n+\n+        final BodyHandler bodyHandler = BodyHandler.create();\n+        bodyHandler.setBodyLimit(config.getMaxPayloadSize());\n+\n+        // get all credentials for a given device\n+        router.get(pathWithTenantAndDeviceId).handler(this::getCredentialsForDevice);\n+\n+        // set credentials for a given device\n+        router.put(pathWithTenantAndDeviceId).handler(bodyHandler);\n+        router.put(pathWithTenantAndDeviceId).handler(this::extractRequiredJsonArrayPayload);\n+        router.put(pathWithTenantAndDeviceId).handler(this::extractIfMatchVersionParam);\n+        router.put(pathWithTenantAndDeviceId).handler(this::updateCredentials);\n+    }\n+\n+\n+    /**\n+     * The service to forward requests to.\n+     *\n+     * @return The service to bind to, must never return {@code null}.\n+     */\n+    protected abstract CredentialsManagementService getService();\n+\n+    private void updateCredentials(final RoutingContext ctx) {\n+\n+        final Span span = Util.newChildSpan(SPAN_NAME_UPDATE_CREDENTIALS, TracingHandler.serverSpanContext(ctx), tracer,\n+                getClass().getSimpleName());\n+\n+        final JsonArray credentials = ctx.get(KEY_REQUEST_BODY);\n+\n+        final String deviceId = getDeviceIdParam(ctx);\n+        final Optional<String> resourceVersion = Optional.ofNullable(ctx.get(KEY_RESOURCE_VERSION));\n+        final String tenantId = getTenantParam(ctx);\n+\n+        if (tenantId == null) {\n+            logger.debug(\"missing tenant ID\");\n+            TracingHelper.logError(span, \"missing tenant ID\");\n+            ctx.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST, \"missing tenant ID\"));\n+        } else if (credentials == null) {\n+            logger.debug(\"missing payload\");\n+            TracingHelper.logError(span, \"missing payload\");\n+            ctx.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST, \"missing payload\"));\n+        } else {\n+\n+            try {\n+                decodeCredentials(credentials);\n+            } catch (final IllegalArgumentException | IllegalStateException e) {\n+                logger.debug(\"Error parsing credentials\");\n+                ctx.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST, e));", "originalCommit": "0e065c6314bbe2a3fafdc2495ec01dac88eacd61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd0ad98109154f7e8cca4b3b44ffa742ce1594c8", "chunk": "diff --git a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\nindex 2f3f88aeb..1334c1745 100644\n--- a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\n+++ b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\n\n@@ -57,6 +57,10 @@ public abstract class AbstractCredentialsManagementHttpEndpoint extends Abstract\n     private static final String SPAN_NAME_GET_CREDENTIALS = \"get Credentials from management API\";\n     private static final String SPAN_NAME_UPDATE_CREDENTIALS = \"update Credentials from management API\";\n \n+    private static final String CREDENTIALS_MANAGEMENT_ENDPOINT_NAME = String.format(\"%s/%s\",\n+                    RegistryManagementConstants.API_VERSION,\n+                    RegistryManagementConstants.CREDENTIALS_HTTP_ENDPOINT);\n+\n     /**\n      * Creates an endpoint for a Vertx instance.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEzMzM0OA==", "url": "https://github.com/eclipse/hono/pull/1763#discussion_r378133348", "bodyText": "Again, see if you can use getRequestParam()", "author": "dejanb", "createdAt": "2020-02-12T09:34:57Z", "path": "service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.management.credentials;\n+\n+import io.opentracing.Span;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+import java.net.HttpURLConnection;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.service.http.AbstractHttpEndpoint;\n+import org.eclipse.hono.service.http.HttpUtils;\n+import org.eclipse.hono.service.http.TracingHandler;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Util;\n+\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * An {@code HttpEndpoint} for managing device credentials.\n+ * <p>\n+ * This endpoint implements Hono's <a href=\"https://www.eclipse.org/hono/docs/api/credentials//\">Credentials API</a>.\n+ * It receives HTTP requests representing operation invocations and forward them to the\n+ * Credential Management Service Implementation for processing.\n+ * The outcome is then returned to the client in the HTTP response.\n+ */\n+public abstract class AbstractCredentialsManagementHttpEndpoint extends AbstractHttpEndpoint<ServiceConfigProperties> {\n+\n+\n+    private static final String SPAN_NAME_GET_CREDENTIALS = \"get Credentials from management API\";\n+    private static final String SPAN_NAME_UPDATE_CREDENTIALS = \"update Credentials from management API\";\n+\n+    /**\n+     * Creates an endpoint for a Vertx instance.\n+     *\n+     * @param vertx The Vertx instance to use.\n+     * @throws NullPointerException if vertx is {@code null};\n+     */\n+    @Autowired\n+    public AbstractCredentialsManagementHttpEndpoint(final Vertx vertx) {\n+        super(Objects.requireNonNull(vertx));\n+    }\n+\n+    /**\n+     * Returns an empty String as this implementation does not use event bus.\n+     */\n+    @Override\n+    protected String getEventBusAddress() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return String.format(\"%s/%s\",\n+                RegistryManagementConstants.API_VERSION,\n+                RegistryManagementConstants.CREDENTIALS_HTTP_ENDPOINT);\n+    }\n+\n+    @Override\n+    public void addRoutes(final Router router) {\n+\n+        final String pathWithTenantAndDeviceId = String.format(\"/%s/:%s/:%s\",\n+                getName(), PARAM_TENANT_ID, PARAM_DEVICE_ID);\n+\n+\n+        // Add CORS handler\n+        router.route(pathWithTenantAndDeviceId).handler(createCorsHandler(config.getCorsAllowedOrigin(), EnumSet.of(HttpMethod.GET, HttpMethod.PUT)));\n+\n+        final BodyHandler bodyHandler = BodyHandler.create();\n+        bodyHandler.setBodyLimit(config.getMaxPayloadSize());\n+\n+        // get all credentials for a given device\n+        router.get(pathWithTenantAndDeviceId).handler(this::getCredentialsForDevice);\n+\n+        // set credentials for a given device\n+        router.put(pathWithTenantAndDeviceId).handler(bodyHandler);\n+        router.put(pathWithTenantAndDeviceId).handler(this::extractRequiredJsonArrayPayload);\n+        router.put(pathWithTenantAndDeviceId).handler(this::extractIfMatchVersionParam);\n+        router.put(pathWithTenantAndDeviceId).handler(this::updateCredentials);\n+    }\n+\n+\n+    /**\n+     * The service to forward requests to.\n+     *\n+     * @return The service to bind to, must never return {@code null}.\n+     */\n+    protected abstract CredentialsManagementService getService();\n+\n+    private void updateCredentials(final RoutingContext ctx) {\n+\n+        final Span span = Util.newChildSpan(SPAN_NAME_UPDATE_CREDENTIALS, TracingHandler.serverSpanContext(ctx), tracer,\n+                getClass().getSimpleName());\n+\n+        final JsonArray credentials = ctx.get(KEY_REQUEST_BODY);\n+\n+        final String deviceId = getDeviceIdParam(ctx);\n+        final Optional<String> resourceVersion = Optional.ofNullable(ctx.get(KEY_RESOURCE_VERSION));\n+        final String tenantId = getTenantParam(ctx);\n+\n+        if (tenantId == null) {\n+            logger.debug(\"missing tenant ID\");\n+            TracingHelper.logError(span, \"missing tenant ID\");\n+            ctx.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST, \"missing tenant ID\"));\n+        } else if (credentials == null) {\n+            logger.debug(\"missing payload\");\n+            TracingHelper.logError(span, \"missing payload\");\n+            ctx.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST, \"missing payload\"));\n+        } else {\n+\n+            try {\n+                decodeCredentials(credentials);\n+            } catch (final IllegalArgumentException | IllegalStateException e) {\n+                logger.debug(\"Error parsing credentials\");\n+                ctx.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST, e));\n+            }\n+\n+            logger.debug(\"updating credentials [tenant: {}, device-id: {}] - {}\", tenantId, deviceId, credentials);\n+\n+            final Promise<OperationResult<Void>> result = Promise.promise();\n+            result.future().setHandler(handler -> {\n+                    final OperationResult<Void> operationResult = handler.result();\n+                    Util.writeOperationResponse(\n+                            ctx,\n+                            operationResult,\n+                            null,\n+                            span);\n+            });\n+\n+            getService().set(tenantId, deviceId, resourceVersion, decodeCredentials(credentials), span, result);\n+        }\n+    }\n+\n+    private void getCredentialsForDevice(final RoutingContext ctx) {\n+\n+        final Span span = Util.newChildSpan(SPAN_NAME_GET_CREDENTIALS, TracingHandler.serverSpanContext(ctx), tracer,\n+                getClass().getSimpleName());\n+\n+        // mandatory params\n+        final String tenantId = getTenantParam(ctx);", "originalCommit": "0e065c6314bbe2a3fafdc2495ec01dac88eacd61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd0ad98109154f7e8cca4b3b44ffa742ce1594c8", "chunk": "diff --git a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\nindex 2f3f88aeb..1334c1745 100644\n--- a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\n+++ b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\n\n@@ -57,6 +57,10 @@ public abstract class AbstractCredentialsManagementHttpEndpoint extends Abstract\n     private static final String SPAN_NAME_GET_CREDENTIALS = \"get Credentials from management API\";\n     private static final String SPAN_NAME_UPDATE_CREDENTIALS = \"update Credentials from management API\";\n \n+    private static final String CREDENTIALS_MANAGEMENT_ENDPOINT_NAME = String.format(\"%s/%s\",\n+                    RegistryManagementConstants.API_VERSION,\n+                    RegistryManagementConstants.CREDENTIALS_HTTP_ENDPOINT);\n+\n     /**\n      * Creates an endpoint for a Vertx instance.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEzNDI4MA==", "url": "https://github.com/eclipse/hono/pull/1763#discussion_r378134280", "bodyText": "Formatting  (tabs) are not right", "author": "dejanb", "createdAt": "2020-02-12T09:36:38Z", "path": "service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.management.credentials;\n+\n+import io.opentracing.Span;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+import java.net.HttpURLConnection;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.service.http.AbstractHttpEndpoint;\n+import org.eclipse.hono.service.http.HttpUtils;\n+import org.eclipse.hono.service.http.TracingHandler;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Util;\n+\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * An {@code HttpEndpoint} for managing device credentials.\n+ * <p>\n+ * This endpoint implements Hono's <a href=\"https://www.eclipse.org/hono/docs/api/credentials//\">Credentials API</a>.\n+ * It receives HTTP requests representing operation invocations and forward them to the\n+ * Credential Management Service Implementation for processing.\n+ * The outcome is then returned to the client in the HTTP response.\n+ */\n+public abstract class AbstractCredentialsManagementHttpEndpoint extends AbstractHttpEndpoint<ServiceConfigProperties> {\n+\n+\n+    private static final String SPAN_NAME_GET_CREDENTIALS = \"get Credentials from management API\";\n+    private static final String SPAN_NAME_UPDATE_CREDENTIALS = \"update Credentials from management API\";\n+\n+    /**\n+     * Creates an endpoint for a Vertx instance.\n+     *\n+     * @param vertx The Vertx instance to use.\n+     * @throws NullPointerException if vertx is {@code null};\n+     */\n+    @Autowired\n+    public AbstractCredentialsManagementHttpEndpoint(final Vertx vertx) {\n+        super(Objects.requireNonNull(vertx));\n+    }\n+\n+    /**\n+     * Returns an empty String as this implementation does not use event bus.\n+     */\n+    @Override\n+    protected String getEventBusAddress() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return String.format(\"%s/%s\",\n+                RegistryManagementConstants.API_VERSION,\n+                RegistryManagementConstants.CREDENTIALS_HTTP_ENDPOINT);\n+    }\n+\n+    @Override\n+    public void addRoutes(final Router router) {\n+\n+        final String pathWithTenantAndDeviceId = String.format(\"/%s/:%s/:%s\",\n+                getName(), PARAM_TENANT_ID, PARAM_DEVICE_ID);\n+\n+\n+        // Add CORS handler\n+        router.route(pathWithTenantAndDeviceId).handler(createCorsHandler(config.getCorsAllowedOrigin(), EnumSet.of(HttpMethod.GET, HttpMethod.PUT)));\n+\n+        final BodyHandler bodyHandler = BodyHandler.create();\n+        bodyHandler.setBodyLimit(config.getMaxPayloadSize());\n+\n+        // get all credentials for a given device\n+        router.get(pathWithTenantAndDeviceId).handler(this::getCredentialsForDevice);\n+\n+        // set credentials for a given device\n+        router.put(pathWithTenantAndDeviceId).handler(bodyHandler);\n+        router.put(pathWithTenantAndDeviceId).handler(this::extractRequiredJsonArrayPayload);\n+        router.put(pathWithTenantAndDeviceId).handler(this::extractIfMatchVersionParam);\n+        router.put(pathWithTenantAndDeviceId).handler(this::updateCredentials);\n+    }\n+\n+\n+    /**\n+     * The service to forward requests to.\n+     *\n+     * @return The service to bind to, must never return {@code null}.\n+     */\n+    protected abstract CredentialsManagementService getService();\n+\n+    private void updateCredentials(final RoutingContext ctx) {\n+\n+        final Span span = Util.newChildSpan(SPAN_NAME_UPDATE_CREDENTIALS, TracingHandler.serverSpanContext(ctx), tracer,\n+                getClass().getSimpleName());\n+\n+        final JsonArray credentials = ctx.get(KEY_REQUEST_BODY);\n+\n+        final String deviceId = getDeviceIdParam(ctx);\n+        final Optional<String> resourceVersion = Optional.ofNullable(ctx.get(KEY_RESOURCE_VERSION));\n+        final String tenantId = getTenantParam(ctx);\n+\n+        if (tenantId == null) {\n+            logger.debug(\"missing tenant ID\");\n+            TracingHelper.logError(span, \"missing tenant ID\");\n+            ctx.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST, \"missing tenant ID\"));\n+        } else if (credentials == null) {\n+            logger.debug(\"missing payload\");\n+            TracingHelper.logError(span, \"missing payload\");\n+            ctx.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST, \"missing payload\"));\n+        } else {\n+\n+            try {\n+                decodeCredentials(credentials);\n+            } catch (final IllegalArgumentException | IllegalStateException e) {\n+                logger.debug(\"Error parsing credentials\");\n+                ctx.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST, e));\n+            }\n+\n+            logger.debug(\"updating credentials [tenant: {}, device-id: {}] - {}\", tenantId, deviceId, credentials);\n+\n+            final Promise<OperationResult<Void>> result = Promise.promise();\n+            result.future().setHandler(handler -> {\n+                    final OperationResult<Void> operationResult = handler.result();\n+                    Util.writeOperationResponse(\n+                            ctx,\n+                            operationResult,\n+                            null,\n+                            span);\n+            });\n+\n+            getService().set(tenantId, deviceId, resourceVersion, decodeCredentials(credentials), span, result);\n+        }\n+    }\n+\n+    private void getCredentialsForDevice(final RoutingContext ctx) {\n+\n+        final Span span = Util.newChildSpan(SPAN_NAME_GET_CREDENTIALS, TracingHandler.serverSpanContext(ctx), tracer,\n+                getClass().getSimpleName());\n+\n+        // mandatory params\n+        final String tenantId = getTenantParam(ctx);\n+        final String deviceId = getDeviceIdParam(ctx);\n+\n+        final HttpServerResponse response = ctx.response();\n+\n+        logger.debug(\"getCredentialsForDevice [tenant: {}, device-id: {}]]\", tenantId, deviceId);\n+        final Promise<OperationResult<List<CommonCredential>>> result = Promise.promise();\n+\n+        result.future().setHandler(handler -> {\n+            final OperationResult<List<CommonCredential>> operationResult = handler.result();\n+            final int status = operationResult.getStatus();\n+            response.setStatusCode(status);\n+            switch (status) {\n+            case HttpURLConnection.HTTP_OK:\n+                final JsonArray credentialsArray = new JsonArray();\n+                for (final CommonCredential credential : operationResult.getPayload()) {\n+                    credentialsArray.add(JsonObject.mapFrom(credential));\n+                }\n+                operationResult.getResourceVersion().ifPresent(v -> response.putHeader(HttpHeaders.ETAG, v));\n+                HttpUtils.setResponseBody(response, credentialsArray);\n+                response.end();\n+\n+                // falls through intentionally\n+            default:\n+                Tags.HTTP_STATUS.set(span, status);\n+                span.finish();\n+                response.end();\n+            }\n+        });\n+\n+        getService().get(tenantId, deviceId, span, result);\n+    }\n+\n+    /**\n+     * Decode a list of secrets from a JSON array.\n+     * <p>\n+     * This is a convenience method, decoding a list of secrets from a JSON array.\n+     *\n+     * @param objects The JSON array.\n+     * @return The list of decoded secrets.\n+     * @throws NullPointerException in the case the {@code objects} parameter is {@code null}.\n+     * @throws IllegalStateException if the {@code type} field was not set in a credentials object.\n+     * @throws IllegalArgumentException If a credentials object is invalid.\n+     */\n+    protected List<CommonCredential> decodeCredentials(final JsonArray objects) {\n+        return objects\n+                .stream()\n+                .filter(JsonObject.class::isInstance)\n+                .map(JsonObject.class::cast)\n+                .map(this::decodeCredential)\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Decode a credential from a JSON object.\n+     *\n+     * @param object The object to device from.\n+     * @return The decoded secret. Or {@code null} if the provided JSON object was {@code null}.\n+     * @throws IllegalStateException if the {@code type} field was not set.\n+     * @throws IllegalArgumentException If the credential object is invalid.\n+     */\n+    protected CommonCredential decodeCredential(final JsonObject object) {\n+\n+        if (object == null) {\n+            return null;\n+        }\n+\n+        final String type = object.getString(\"type\");\n+        if (type == null || type.isEmpty()) {\n+            // TODO this should rather be an IllegalArgumentException\n+            throw new IllegalStateException(\"'type' field must be set\");\n+        }\n+\n+        return decodeCredential(type, object);\n+    }\n+\n+    /**\n+     * Decode a credential, based on the provided type.\n+     *\n+     * @param type The type of the secret. Will never be {@code null}.\n+     * @param object The JSON object to decode. Will never be {@code null}.\n+     * @return The decoded secret.\n+     * @throws IllegalArgumentException If the credential object is invalid.\n+     */\n+    protected CommonCredential decodeCredential(final String type, final JsonObject object) {", "originalCommit": "0e065c6314bbe2a3fafdc2495ec01dac88eacd61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd0ad98109154f7e8cca4b3b44ffa742ce1594c8", "chunk": "diff --git a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\nindex 2f3f88aeb..1334c1745 100644\n--- a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\n+++ b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\n\n@@ -57,6 +57,10 @@ public abstract class AbstractCredentialsManagementHttpEndpoint extends Abstract\n     private static final String SPAN_NAME_GET_CREDENTIALS = \"get Credentials from management API\";\n     private static final String SPAN_NAME_UPDATE_CREDENTIALS = \"update Credentials from management API\";\n \n+    private static final String CREDENTIALS_MANAGEMENT_ENDPOINT_NAME = String.format(\"%s/%s\",\n+                    RegistryManagementConstants.API_VERSION,\n+                    RegistryManagementConstants.CREDENTIALS_HTTP_ENDPOINT);\n+\n     /**\n      * Creates an endpoint for a Vertx instance.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEzNTAzNQ==", "url": "https://github.com/eclipse/hono/pull/1763#discussion_r378135035", "bodyText": "Add a deprecation comment", "author": "dejanb", "createdAt": "2020-02-12T09:38:07Z", "path": "services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/AutowiredCredentialsManagementAdapter.java", "diffHunk": "@@ -28,6 +28,7 @@\n  */\n @Component\n @ConditionalOnBean(CredentialsManagementService.class)\n+@Deprecated(forRemoval = true)", "originalCommit": "0e065c6314bbe2a3fafdc2495ec01dac88eacd61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd0ad98109154f7e8cca4b3b44ffa742ce1594c8", "chunk": "diff --git a/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/AutowiredCredentialsManagementAdapter.java b/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/AutowiredCredentialsManagementAdapter.java\nindex bfc1989c1..a5b47cf4c 100644\n--- a/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/AutowiredCredentialsManagementAdapter.java\n+++ b/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/AutowiredCredentialsManagementAdapter.java\n\n@@ -25,6 +25,8 @@ import org.springframework.stereotype.Component;\n  * <p>\n  * This wires up the actual service instance with the mapping to the event bus implementation. It is intended to be used\n  * in a Spring Boot environment.\n+ * @deprecated This class will be removed in future versions as HTTP endpoint does not use event bus anymore.\n+ *              Please use {@link org.eclipse.hono.service.management.credentials.AbstractCredentialsManagementHttpEndpoint} based implementation in the future.\n  */\n @Component\n @ConditionalOnBean(CredentialsManagementService.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEzNjcwMA==", "url": "https://github.com/eclipse/hono/pull/1763#discussion_r378136700", "bodyText": "This seems unnecessary.", "author": "dejanb", "createdAt": "2020-02-12T09:41:04Z", "path": "service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.management.credentials;\n+\n+import io.opentracing.Span;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+import java.net.HttpURLConnection;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.service.http.AbstractHttpEndpoint;\n+import org.eclipse.hono.service.http.HttpUtils;\n+import org.eclipse.hono.service.http.TracingHandler;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Util;\n+\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * An {@code HttpEndpoint} for managing device credentials.\n+ * <p>\n+ * This endpoint implements Hono's <a href=\"https://www.eclipse.org/hono/docs/api/credentials//\">Credentials API</a>.\n+ * It receives HTTP requests representing operation invocations and forward them to the\n+ * Credential Management Service Implementation for processing.\n+ * The outcome is then returned to the client in the HTTP response.\n+ */\n+public abstract class AbstractCredentialsManagementHttpEndpoint extends AbstractHttpEndpoint<ServiceConfigProperties> {\n+\n+\n+    private static final String SPAN_NAME_GET_CREDENTIALS = \"get Credentials from management API\";\n+    private static final String SPAN_NAME_UPDATE_CREDENTIALS = \"update Credentials from management API\";\n+\n+    /**\n+     * Creates an endpoint for a Vertx instance.\n+     *\n+     * @param vertx The Vertx instance to use.\n+     * @throws NullPointerException if vertx is {@code null};\n+     */\n+    @Autowired\n+    public AbstractCredentialsManagementHttpEndpoint(final Vertx vertx) {\n+        super(Objects.requireNonNull(vertx));\n+    }\n+\n+    /**\n+     * Returns an empty String as this implementation does not use event bus.\n+     */\n+    @Override\n+    protected String getEventBusAddress() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return String.format(\"%s/%s\",\n+                RegistryManagementConstants.API_VERSION,\n+                RegistryManagementConstants.CREDENTIALS_HTTP_ENDPOINT);\n+    }\n+\n+    @Override\n+    public void addRoutes(final Router router) {\n+\n+        final String pathWithTenantAndDeviceId = String.format(\"/%s/:%s/:%s\",\n+                getName(), PARAM_TENANT_ID, PARAM_DEVICE_ID);\n+\n+\n+        // Add CORS handler\n+        router.route(pathWithTenantAndDeviceId).handler(createCorsHandler(config.getCorsAllowedOrigin(), EnumSet.of(HttpMethod.GET, HttpMethod.PUT)));\n+\n+        final BodyHandler bodyHandler = BodyHandler.create();\n+        bodyHandler.setBodyLimit(config.getMaxPayloadSize());\n+\n+        // get all credentials for a given device\n+        router.get(pathWithTenantAndDeviceId).handler(this::getCredentialsForDevice);\n+\n+        // set credentials for a given device\n+        router.put(pathWithTenantAndDeviceId).handler(bodyHandler);\n+        router.put(pathWithTenantAndDeviceId).handler(this::extractRequiredJsonArrayPayload);\n+        router.put(pathWithTenantAndDeviceId).handler(this::extractIfMatchVersionParam);\n+        router.put(pathWithTenantAndDeviceId).handler(this::updateCredentials);\n+    }\n+\n+\n+    /**\n+     * The service to forward requests to.\n+     *\n+     * @return The service to bind to, must never return {@code null}.\n+     */\n+    protected abstract CredentialsManagementService getService();\n+\n+    private void updateCredentials(final RoutingContext ctx) {\n+\n+        final Span span = Util.newChildSpan(SPAN_NAME_UPDATE_CREDENTIALS, TracingHandler.serverSpanContext(ctx), tracer,\n+                getClass().getSimpleName());\n+\n+        final JsonArray credentials = ctx.get(KEY_REQUEST_BODY);\n+\n+        final String deviceId = getDeviceIdParam(ctx);\n+        final Optional<String> resourceVersion = Optional.ofNullable(ctx.get(KEY_RESOURCE_VERSION));\n+        final String tenantId = getTenantParam(ctx);\n+\n+        if (tenantId == null) {\n+            logger.debug(\"missing tenant ID\");\n+            TracingHelper.logError(span, \"missing tenant ID\");\n+            ctx.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST, \"missing tenant ID\"));\n+        } else if (credentials == null) {\n+            logger.debug(\"missing payload\");\n+            TracingHelper.logError(span, \"missing payload\");\n+            ctx.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST, \"missing payload\"));\n+        } else {\n+\n+            try {\n+                decodeCredentials(credentials);\n+            } catch (final IllegalArgumentException | IllegalStateException e) {\n+                logger.debug(\"Error parsing credentials\");\n+                ctx.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST, e));\n+            }\n+\n+            logger.debug(\"updating credentials [tenant: {}, device-id: {}] - {}\", tenantId, deviceId, credentials);\n+\n+            final Promise<OperationResult<Void>> result = Promise.promise();\n+            result.future().setHandler(handler -> {\n+                    final OperationResult<Void> operationResult = handler.result();\n+                    Util.writeOperationResponse(\n+                            ctx,\n+                            operationResult,\n+                            null,\n+                            span);\n+            });\n+\n+            getService().set(tenantId, deviceId, resourceVersion, decodeCredentials(credentials), span, result);\n+        }\n+    }\n+\n+    private void getCredentialsForDevice(final RoutingContext ctx) {\n+\n+        final Span span = Util.newChildSpan(SPAN_NAME_GET_CREDENTIALS, TracingHandler.serverSpanContext(ctx), tracer,\n+                getClass().getSimpleName());\n+\n+        // mandatory params\n+        final String tenantId = getTenantParam(ctx);\n+        final String deviceId = getDeviceIdParam(ctx);\n+\n+        final HttpServerResponse response = ctx.response();\n+\n+        logger.debug(\"getCredentialsForDevice [tenant: {}, device-id: {}]]\", tenantId, deviceId);\n+        final Promise<OperationResult<List<CommonCredential>>> result = Promise.promise();\n+\n+        result.future().setHandler(handler -> {\n+            final OperationResult<List<CommonCredential>> operationResult = handler.result();\n+            final int status = operationResult.getStatus();\n+            response.setStatusCode(status);\n+            switch (status) {\n+            case HttpURLConnection.HTTP_OK:\n+                final JsonArray credentialsArray = new JsonArray();\n+                for (final CommonCredential credential : operationResult.getPayload()) {\n+                    credentialsArray.add(JsonObject.mapFrom(credential));\n+                }\n+                operationResult.getResourceVersion().ifPresent(v -> response.putHeader(HttpHeaders.ETAG, v));\n+                HttpUtils.setResponseBody(response, credentialsArray);\n+                response.end();", "originalCommit": "0e065c6314bbe2a3fafdc2495ec01dac88eacd61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd0ad98109154f7e8cca4b3b44ffa742ce1594c8", "chunk": "diff --git a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\nindex 2f3f88aeb..1334c1745 100644\n--- a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\n+++ b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\n\n@@ -57,6 +57,10 @@ public abstract class AbstractCredentialsManagementHttpEndpoint extends Abstract\n     private static final String SPAN_NAME_GET_CREDENTIALS = \"get Credentials from management API\";\n     private static final String SPAN_NAME_UPDATE_CREDENTIALS = \"update Credentials from management API\";\n \n+    private static final String CREDENTIALS_MANAGEMENT_ENDPOINT_NAME = String.format(\"%s/%s\",\n+                    RegistryManagementConstants.API_VERSION,\n+                    RegistryManagementConstants.CREDENTIALS_HTTP_ENDPOINT);\n+\n     /**\n      * Creates an endpoint for a Vertx instance.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2ODk4NA==", "url": "https://github.com/eclipse/hono/pull/1763#discussion_r378168984", "bodyText": "I feel like I could extract this as getMandatoryPayload() in AbstractHttpEndpoint. @dejanb WDYT ?", "author": "jbtrystram", "createdAt": "2020-02-12T10:39:13Z", "path": "service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.management.credentials;\n+\n+import io.opentracing.Span;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+import java.net.HttpURLConnection;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.service.http.AbstractHttpEndpoint;\n+import org.eclipse.hono.service.http.HttpUtils;\n+import org.eclipse.hono.service.http.TracingHandler;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Util;\n+\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * An {@code HttpEndpoint} for managing device credentials.\n+ * <p>\n+ * This endpoint implements Hono's <a href=\"https://www.eclipse.org/hono/docs/api/credentials//\">Credentials API</a>.\n+ * It receives HTTP requests representing operation invocations and forward them to the\n+ * Credential Management Service Implementation for processing.\n+ * The outcome is then returned to the client in the HTTP response.\n+ */\n+public abstract class AbstractCredentialsManagementHttpEndpoint extends AbstractHttpEndpoint<ServiceConfigProperties> {\n+\n+\n+    private static final String SPAN_NAME_GET_CREDENTIALS = \"get Credentials from management API\";\n+    private static final String SPAN_NAME_UPDATE_CREDENTIALS = \"update Credentials from management API\";\n+\n+    private static final String CREDENTIALS_MANAGEMENT_ENDPOINT_NAME = String.format(\"%s/%s\",\n+                    RegistryManagementConstants.API_VERSION,\n+                    RegistryManagementConstants.CREDENTIALS_HTTP_ENDPOINT);\n+\n+    /**\n+     * Creates an endpoint for a Vertx instance.\n+     *\n+     * @param vertx The Vertx instance to use.\n+     * @throws NullPointerException if vertx is {@code null};\n+     */\n+    @Autowired\n+    public AbstractCredentialsManagementHttpEndpoint(final Vertx vertx) {\n+        super(Objects.requireNonNull(vertx));\n+    }\n+\n+    /**\n+     * Returns an empty String as this implementation does not use event bus.\n+     */\n+    @Override\n+    protected String getEventBusAddress() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return CREDENTIALS_MANAGEMENT_ENDPOINT_NAME;\n+    }\n+\n+    @Override\n+    public void addRoutes(final Router router) {\n+\n+        final String pathWithTenantAndDeviceId = String.format(\"/%s/:%s/:%s\",\n+                getName(), PARAM_TENANT_ID, PARAM_DEVICE_ID);\n+\n+\n+        // Add CORS handler\n+        router.route(pathWithTenantAndDeviceId).handler(createCorsHandler(config.getCorsAllowedOrigin(), EnumSet.of(HttpMethod.GET, HttpMethod.PUT)));\n+\n+        final BodyHandler bodyHandler = BodyHandler.create();\n+        bodyHandler.setBodyLimit(config.getMaxPayloadSize());\n+\n+        // get all credentials for a given device\n+        router.get(pathWithTenantAndDeviceId).handler(this::getCredentialsForDevice);\n+\n+        // set credentials for a given device\n+        router.put(pathWithTenantAndDeviceId).handler(bodyHandler);\n+        router.put(pathWithTenantAndDeviceId).handler(this::extractRequiredJsonArrayPayload);\n+        router.put(pathWithTenantAndDeviceId).handler(this::extractIfMatchVersionParam);\n+        router.put(pathWithTenantAndDeviceId).handler(this::updateCredentials);\n+    }\n+\n+\n+    /**\n+     * The service to forward requests to.\n+     *\n+     * @return The service to bind to, must never return {@code null}.\n+     */\n+    protected abstract CredentialsManagementService getService();\n+\n+    private void updateCredentials(final RoutingContext ctx) {\n+\n+        final Span span = Util.newChildSpan(SPAN_NAME_UPDATE_CREDENTIALS, TracingHandler.serverSpanContext(ctx), tracer,\n+                getClass().getSimpleName());\n+\n+        final JsonArray credentials = ctx.get(KEY_REQUEST_BODY);\n+\n+        final String tenantId = getMandatoryRequestParam(PARAM_TENANT_ID, ctx, span);\n+        final String deviceId = getMandatoryRequestParam(PARAM_DEVICE_ID, ctx, span);\n+        final Optional<String> resourceVersion = Optional.ofNullable(getRequestParam(KEY_RESOURCE_VERSION, ctx, span, true));\n+\n+        if (credentials == null) {\n+            final String msg = String.format(\"Missing request payload\");\n+            logger.debug(msg);\n+            TracingHelper.logError(span, msg);\n+            HttpUtils.badRequest(ctx, msg);\n+            Tags.HTTP_STATUS.set(span, HttpURLConnection.HTTP_BAD_REQUEST);\n+            span.finish();\n+            return;", "originalCommit": "9313b48f6a43857333f250efd5b612b050e37efd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3ODgwNg==", "url": "https://github.com/eclipse/hono/pull/1763#discussion_r378178806", "bodyText": "Yeah, looks like it", "author": "dejanb", "createdAt": "2020-02-12T10:57:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2ODk4NA=="}], "type": "inlineReview", "revised_code": {"commit": "bd0ad98109154f7e8cca4b3b44ffa742ce1594c8", "chunk": "diff --git a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\nindex 7797be263..1334c1745 100644\n--- a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\n+++ b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\n\n@@ -125,7 +125,7 @@ public abstract class AbstractCredentialsManagementHttpEndpoint extends Abstract\n \n         final String tenantId = getMandatoryRequestParam(PARAM_TENANT_ID, ctx, span);\n         final String deviceId = getMandatoryRequestParam(PARAM_DEVICE_ID, ctx, span);\n-        final Optional<String> resourceVersion = Optional.ofNullable(getRequestParam(KEY_RESOURCE_VERSION, ctx, span, true));\n+        final Optional<String> resourceVersion = Optional.ofNullable(ctx.get(KEY_RESOURCE_VERSION));\n \n         if (credentials == null) {\n             final String msg = String.format(\"Missing request payload\");\n"}}, {"oid": "bd0ad98109154f7e8cca4b3b44ffa742ce1594c8", "url": "https://github.com/eclipse/hono/commit/bd0ad98109154f7e8cca4b3b44ffa742ce1594c8", "message": "dejan feedback", "committedDate": "2020-02-12T10:52:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3OTIyOA==", "url": "https://github.com/eclipse/hono/pull/1763#discussion_r378179228", "bodyText": "Are we sure we don't need this anymore?", "author": "dejanb", "createdAt": "2020-02-12T10:58:32Z", "path": "service-base/src/main/java/org/eclipse/hono/service/http/AbstractHttpEndpoint.java", "diffHunk": "@@ -188,12 +188,7 @@ protected final void extractOptionalJsonPayload(final RoutingContext ctx) {\n      */\n     protected final void extractRequiredJsonArrayPayload(final RoutingContext ctx) {\n         extractRequiredJson(ctx, body -> {\n-            final var payload = body.getBodyAsJsonArray();\n-            if (payload != null && payload.getList() == null) {\n-                // work around eclipse-vertx/vert.x#2993\n-                return null;\n-            }\n-            return payload;\n+            return body.getBodyAsJsonArray();", "originalCommit": "bd0ad98109154f7e8cca4b3b44ffa742ce1594c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4ODY3Nw==", "url": "https://github.com/eclipse/hono/pull/1763#discussion_r378188677", "bodyText": "the bug is fixed : eclipse-vertx/vert.x#2993\nand hono updated to a more recent version of vertx (3.8.4)", "author": "jbtrystram", "createdAt": "2020-02-12T11:17:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3OTIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE5MDExMg==", "url": "https://github.com/eclipse/hono/pull/1763#discussion_r378190112", "bodyText": "OK. Great.", "author": "dejanb", "createdAt": "2020-02-12T11:20:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3OTIyOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE5MTk5MQ==", "url": "https://github.com/eclipse/hono/pull/1763#discussion_r378191991", "bodyText": "case should be indented.", "author": "dejanb", "createdAt": "2020-02-12T11:25:08Z", "path": "service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.management.credentials;\n+\n+import io.opentracing.Span;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+import java.net.HttpURLConnection;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.service.http.AbstractHttpEndpoint;\n+import org.eclipse.hono.service.http.HttpUtils;\n+import org.eclipse.hono.service.http.TracingHandler;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Util;\n+\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * An {@code HttpEndpoint} for managing device credentials.\n+ * <p>\n+ * This endpoint implements Hono's <a href=\"https://www.eclipse.org/hono/docs/api/credentials//\">Credentials API</a>.\n+ * It receives HTTP requests representing operation invocations and forward them to the\n+ * Credential Management Service Implementation for processing.\n+ * The outcome is then returned to the client in the HTTP response.\n+ */\n+public abstract class AbstractCredentialsManagementHttpEndpoint extends AbstractHttpEndpoint<ServiceConfigProperties> {\n+\n+\n+    private static final String SPAN_NAME_GET_CREDENTIALS = \"get Credentials from management API\";\n+    private static final String SPAN_NAME_UPDATE_CREDENTIALS = \"update Credentials from management API\";\n+\n+    private static final String CREDENTIALS_MANAGEMENT_ENDPOINT_NAME = String.format(\"%s/%s\",\n+                    RegistryManagementConstants.API_VERSION,\n+                    RegistryManagementConstants.CREDENTIALS_HTTP_ENDPOINT);\n+\n+    /**\n+     * Creates an endpoint for a Vertx instance.\n+     *\n+     * @param vertx The Vertx instance to use.\n+     * @throws NullPointerException if vertx is {@code null};\n+     */\n+    @Autowired\n+    public AbstractCredentialsManagementHttpEndpoint(final Vertx vertx) {\n+        super(Objects.requireNonNull(vertx));\n+    }\n+\n+    /**\n+     * Returns an empty String as this implementation does not use event bus.\n+     */\n+    @Override\n+    protected String getEventBusAddress() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return CREDENTIALS_MANAGEMENT_ENDPOINT_NAME;\n+    }\n+\n+    @Override\n+    public void addRoutes(final Router router) {\n+\n+        final String pathWithTenantAndDeviceId = String.format(\"/%s/:%s/:%s\",\n+                getName(), PARAM_TENANT_ID, PARAM_DEVICE_ID);\n+\n+\n+        // Add CORS handler\n+        router.route(pathWithTenantAndDeviceId).handler(createCorsHandler(config.getCorsAllowedOrigin(), EnumSet.of(HttpMethod.GET, HttpMethod.PUT)));\n+\n+        final BodyHandler bodyHandler = BodyHandler.create();\n+        bodyHandler.setBodyLimit(config.getMaxPayloadSize());\n+\n+        // get all credentials for a given device\n+        router.get(pathWithTenantAndDeviceId).handler(this::getCredentialsForDevice);\n+\n+        // set credentials for a given device\n+        router.put(pathWithTenantAndDeviceId).handler(bodyHandler);\n+        router.put(pathWithTenantAndDeviceId).handler(this::extractRequiredJsonArrayPayload);\n+        router.put(pathWithTenantAndDeviceId).handler(this::extractIfMatchVersionParam);\n+        router.put(pathWithTenantAndDeviceId).handler(this::updateCredentials);\n+    }\n+\n+\n+    /**\n+     * The service to forward requests to.\n+     *\n+     * @return The service to bind to, must never return {@code null}.\n+     */\n+    protected abstract CredentialsManagementService getService();\n+\n+    private void updateCredentials(final RoutingContext ctx) {\n+\n+        final Span span = Util.newChildSpan(SPAN_NAME_UPDATE_CREDENTIALS, TracingHandler.serverSpanContext(ctx), tracer,\n+                getClass().getSimpleName());\n+\n+        final JsonArray credentials = ctx.get(KEY_REQUEST_BODY);\n+\n+        final String tenantId = getMandatoryRequestParam(PARAM_TENANT_ID, ctx, span);\n+        final String deviceId = getMandatoryRequestParam(PARAM_DEVICE_ID, ctx, span);\n+        final Optional<String> resourceVersion = Optional.ofNullable(ctx.get(KEY_RESOURCE_VERSION));\n+\n+        if (credentials == null) {\n+            final String msg = String.format(\"Missing request payload\");\n+            logger.debug(msg);\n+            TracingHelper.logError(span, msg);\n+            HttpUtils.badRequest(ctx, msg);\n+            Tags.HTTP_STATUS.set(span, HttpURLConnection.HTTP_BAD_REQUEST);\n+            span.finish();\n+            return;\n+        } else {\n+\n+            try {\n+                decodeCredentials(credentials);\n+            } catch (final IllegalArgumentException | IllegalStateException e) {\n+                logger.debug(\"Error parsing credentials\");\n+                ctx.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST, e));\n+                span.finish();\n+            }\n+\n+            logger.debug(\"updating credentials [tenant: {}, device-id: {}] - {}\", tenantId, deviceId, credentials);\n+\n+            final Promise<OperationResult<Void>> result = Promise.promise();\n+            result.future().setHandler(handler -> {\n+                    final OperationResult<Void> operationResult = handler.result();\n+                    Util.writeOperationResponse(\n+                            ctx,\n+                            operationResult,\n+                            null,\n+                            span);\n+            });\n+\n+            getService().set(tenantId, deviceId, resourceVersion, decodeCredentials(credentials), span, result);\n+        }\n+    }\n+\n+    private void getCredentialsForDevice(final RoutingContext ctx) {\n+\n+        final Span span = Util.newChildSpan(SPAN_NAME_GET_CREDENTIALS, TracingHandler.serverSpanContext(ctx), tracer,\n+                getClass().getSimpleName());\n+\n+        // mandatory params\n+        final String tenantId = getMandatoryRequestParam(PARAM_TENANT_ID, ctx, span);\n+        final String deviceId = getMandatoryRequestParam(PARAM_DEVICE_ID, ctx, span);\n+\n+        final HttpServerResponse response = ctx.response();\n+\n+        logger.debug(\"getCredentialsForDevice [tenant: {}, device-id: {}]]\", tenantId, deviceId);\n+        final Promise<OperationResult<List<CommonCredential>>> result = Promise.promise();\n+\n+        result.future().setHandler(handler -> {\n+            final OperationResult<List<CommonCredential>> operationResult = handler.result();\n+            final int status = operationResult.getStatus();\n+            response.setStatusCode(status);\n+            switch (status) {\n+            case HttpURLConnection.HTTP_OK:", "originalCommit": "bd0ad98109154f7e8cca4b3b44ffa742ce1594c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a72cfa4798d2f91b9fa99638d854f2246bcae43b", "chunk": "diff --git a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\nindex 1334c1745..0dd24499f 100644\n--- a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\n+++ b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/AbstractCredentialsManagementHttpEndpoint.java\n\n@@ -121,44 +121,34 @@ public abstract class AbstractCredentialsManagementHttpEndpoint extends Abstract\n         final Span span = Util.newChildSpan(SPAN_NAME_UPDATE_CREDENTIALS, TracingHandler.serverSpanContext(ctx), tracer,\n                 getClass().getSimpleName());\n \n-        final JsonArray credentials = ctx.get(KEY_REQUEST_BODY);\n+        final JsonArray credentials = getMandatoryRequestBody(ctx, span);\n \n         final String tenantId = getMandatoryRequestParam(PARAM_TENANT_ID, ctx, span);\n         final String deviceId = getMandatoryRequestParam(PARAM_DEVICE_ID, ctx, span);\n         final Optional<String> resourceVersion = Optional.ofNullable(ctx.get(KEY_RESOURCE_VERSION));\n \n-        if (credentials == null) {\n-            final String msg = String.format(\"Missing request payload\");\n-            logger.debug(msg);\n-            TracingHelper.logError(span, msg);\n-            HttpUtils.badRequest(ctx, msg);\n-            Tags.HTTP_STATUS.set(span, HttpURLConnection.HTTP_BAD_REQUEST);\n+        try {\n+            decodeCredentials(credentials);\n+        } catch (final IllegalArgumentException | IllegalStateException e) {\n+            logger.debug(\"Error parsing credentials\");\n+            ctx.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST, e));\n             span.finish();\n-            return;\n-        } else {\n-\n-            try {\n-                decodeCredentials(credentials);\n-            } catch (final IllegalArgumentException | IllegalStateException e) {\n-                logger.debug(\"Error parsing credentials\");\n-                ctx.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST, e));\n-                span.finish();\n-            }\n+        }\n \n-            logger.debug(\"updating credentials [tenant: {}, device-id: {}] - {}\", tenantId, deviceId, credentials);\n+        logger.debug(\"updating credentials [tenant: {}, device-id: {}] - {}\", tenantId, deviceId, credentials);\n \n-            final Promise<OperationResult<Void>> result = Promise.promise();\n-            result.future().setHandler(handler -> {\n-                    final OperationResult<Void> operationResult = handler.result();\n-                    Util.writeOperationResponse(\n-                            ctx,\n-                            operationResult,\n-                            null,\n-                            span);\n-            });\n+        final Promise<OperationResult<Void>> result = Promise.promise();\n+        result.future().setHandler(handler -> {\n+                final OperationResult<Void> operationResult = handler.result();\n+                Util.writeOperationResponse(\n+                        ctx,\n+                        operationResult,\n+                        null,\n+                        span);\n+        });\n+\n+        getService().set(tenantId, deviceId, resourceVersion, decodeCredentials(credentials), span, result);\n \n-            getService().set(tenantId, deviceId, resourceVersion, decodeCredentials(credentials), span, result);\n-        }\n     }\n \n     private void getCredentialsForDevice(final RoutingContext ctx) {\n"}}, {"oid": "a72cfa4798d2f91b9fa99638d854f2246bcae43b", "url": "https://github.com/eclipse/hono/commit/a72cfa4798d2f91b9fa99638d854f2246bcae43b", "message": "[#1346] Remove event bus from credential management endpoint", "committedDate": "2020-02-12T11:37:53Z", "type": "forcePushed"}, {"oid": "45ba92c4dff7957a5dc289d70925264a7578149f", "url": "https://github.com/eclipse/hono/commit/45ba92c4dff7957a5dc289d70925264a7578149f", "message": "[#1346] Remove event bus from credential management endpoint\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-02-12T11:38:12Z", "type": "forcePushed"}, {"oid": "8d7206f461e0ed4b4a2a1f68d9daeaec1568b8af", "url": "https://github.com/eclipse/hono/commit/8d7206f461e0ed4b4a2a1f68d9daeaec1568b8af", "message": "[#1346] Remove event bus from credential management endpoint\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-02-12T11:39:48Z", "type": "commit"}, {"oid": "8d7206f461e0ed4b4a2a1f68d9daeaec1568b8af", "url": "https://github.com/eclipse/hono/commit/8d7206f461e0ed4b4a2a1f68d9daeaec1568b8af", "message": "[#1346] Remove event bus from credential management endpoint\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-02-12T11:39:48Z", "type": "forcePushed"}]}