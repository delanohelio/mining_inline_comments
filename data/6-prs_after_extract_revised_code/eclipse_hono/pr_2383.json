{"pr_number": 2383, "pr_title": "[#2239] Implement search tenants operation in the MongoDB based device registry", "pr_createdAt": "2020-12-23T15:23:40Z", "pr_url": "https://github.com/eclipse/hono/pull/2383", "timeline": [{"oid": "743956eb1c020d7af312c1e96df1b36dbb1c8310", "url": "https://github.com/eclipse/hono/commit/743956eb1c020d7af312c1e96df1b36dbb1c8310", "message": "[#2239] Pull up a method for reuse by the search tenants operation\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-12-23T14:48:45Z", "type": "commit"}, {"oid": "0b53f9dc80385dcc305c8e3cf1a64c5aea3b4442", "url": "https://github.com/eclipse/hono/commit/0b53f9dc80385dcc305c8e3cf1a64c5aea3b4442", "message": "[#2239] Implement search tenants operation in MongoDB based device registry\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-12-23T15:22:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyMDI0MQ==", "url": "https://github.com/eclipse/hono/pull/2383#discussion_r548020241", "bodyText": "searchTenants", "author": "sophokles73", "createdAt": "2020-12-23T15:43:56Z", "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementSearchTenantsTest.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.tenant;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.service.management.Filter;\n+import org.eclipse.hono.service.management.SearchResult;\n+import org.eclipse.hono.service.management.Sort;\n+import org.eclipse.hono.util.Adapter;\n+import org.junit.jupiter.api.Test;\n+\n+import io.opentracing.noop.NoopSpan;\n+import io.vertx.core.Future;\n+import io.vertx.junit5.VertxTestContext;\n+\n+/**\n+ * A suite of tests for verifying implementations of the Tenant management's \n+ * search tenants operation.\n+ * <p>\n+ * Concrete subclasses need to provide the service implementations under test\n+ * by means of implementing the {@link #getTenantManagementService()} method.\n+ * Also the subclasses should clean up any fixture in the database that has\n+ * been created by individual test cases.\n+ */\n+public interface AbstractTenantManagementSearchTenantsTest {\n+\n+    /**\n+     * Gets tenant management service being tested.\n+     *\n+     * @return The tenant management service\n+     */\n+    TenantManagementService getTenantManagementService();\n+\n+    /**\n+     * Verifies that a request to search tenants fails with a {@value HttpURLConnection#HTTP_NOT_FOUND}\n+     * when no matching tenants are found.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    default void testSearchTenantsWhenNoTenantsAreFound(final VertxTestContext ctx) {\n+        final String tenantId = DeviceRegistryUtils.getUniqueIdentifier();\n+        final int pageSize = 10;\n+        final int pageOffset = 0;\n+        final Filter filter = new Filter(\"/enabled\", false);\n+\n+        createTenants(Map.of(tenantId, new Tenant().setEnabled(true)))\n+                .compose(ok -> getTenantManagementService()\n+                        .searchTenants(pageSize, pageOffset, List.of(filter), List.of(), NoopSpan.INSTANCE))\n+                .onComplete(ctx.succeeding(s -> {\n+                    ctx.verify(() -> {\n+                        assertThat(s.isError()).isTrue();\n+                        assertThat(s.getStatus()).isEqualTo(HttpURLConnection.HTTP_NOT_FOUND);\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a request to search tenants with a valid filter succeeds and matching tenants are found.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    default void testSearchTenantsWithAValidFilterSucceeds(final VertxTestContext ctx) {\n+        final String tenantId1 = DeviceRegistryUtils.getUniqueIdentifier();\n+        final String tenantId2 = DeviceRegistryUtils.getUniqueIdentifier();\n+        final int pageSize = 10;\n+        final int pageOffset = 0;\n+        final Filter filter = new Filter(\"/enabled\", true);\n+\n+        createTenants(Map.of(\n+                tenantId1, new Tenant().setEnabled(true),\n+                tenantId2, new Tenant().setEnabled(false)))\n+                        .compose(ok -> getTenantManagementService()\n+                                .searchTenants(pageSize, pageOffset, List.of(filter), List.of(), NoopSpan.INSTANCE))\n+                        .onComplete(ctx.succeeding(s -> {\n+                            ctx.verify(() -> {\n+                                assertThat(s.getStatus()).isEqualTo(HttpURLConnection.HTTP_OK);\n+\n+                                final SearchResult<TenantWithId> searchResult = s.getPayload();\n+                                assertThat(searchResult.getTotal()).isEqualTo(1);\n+                                assertThat(searchResult.getResult().get(0).getId()).isEqualTo(tenantId1);\n+                            });\n+                            ctx.completeNow();\n+                        }));\n+    }\n+\n+    /**\n+     * Verifies that a request to search tenants with multiple filters succeeds and matching tenants are found.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    default void testSearchTenantsWithMultipleFiltersSucceeds(final VertxTestContext ctx) {\n+        final String tenantId1 = DeviceRegistryUtils.getUniqueIdentifier();\n+        final String tenantId2 = DeviceRegistryUtils.getUniqueIdentifier();\n+        final int pageSize = 10;\n+        final int pageOffset = 0;\n+        final Filter filter1 = new Filter(\"/enabled\", true);\n+        final Filter filter2 = new Filter(\"/adapters/0/type\", \"MQTT\");\n+        final Filter filter3 = new Filter(\"/ext/group\", \"A\");\n+\n+        createTenants(Map.of(\n+                tenantId1, new Tenant().setEnabled(true).setExtensions(Map.of(\"group\", \"A\")),\n+                tenantId2, new Tenant().setEnabled(true).addAdapterConfig(new Adapter(\"MQTT\"))\n+                        .setExtensions(Map.of(\"group\", \"A\"))))\n+                                .compose(ok -> getTenantManagementService()\n+                                        .searchTenants(pageSize, pageOffset, List.of(filter1, filter2, filter3),\n+                                                List.of(), NoopSpan.INSTANCE)\n+                                        .onComplete(ctx.succeeding(s -> {\n+                                            ctx.verify(() -> {\n+                                                assertThat(s.getStatus()).isEqualTo(HttpURLConnection.HTTP_OK);\n+\n+                                                final SearchResult<TenantWithId> searchResult = s.getPayload();\n+                                                assertThat(searchResult.getTotal()).isEqualTo(1);\n+                                                assertThat(searchResult.getResult()).hasSize(1);\n+                                                assertThat(searchResult.getResult().get(0).getId())\n+                                                        .isEqualTo(tenantId2);\n+                                            });\n+                                            ctx.completeNow();\n+                                        })));\n+    }\n+\n+    /**\n+     * Verifies that a request to search tenants with a valid pageSize succeeds and the result is in accordance\n+     * with the specified page size.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    default void testSearchTenantsWithPageSize(final VertxTestContext ctx) {\n+        final String tenantId1 = DeviceRegistryUtils.getUniqueIdentifier();\n+        final String tenantId2 = DeviceRegistryUtils.getUniqueIdentifier();\n+        final int pageSize = 1;\n+        final int pageOffset = 0;\n+        final Filter filter = new Filter(\"/enabled\", true);\n+\n+        createTenants(Map.of(\n+                tenantId1, new Tenant().setEnabled(true),\n+                tenantId2, new Tenant().setEnabled(true)))\n+                        .compose(ok -> getTenantManagementService()\n+                                .searchTenants(pageSize, pageOffset, List.of(filter), List.of(), NoopSpan.INSTANCE))\n+                        .onComplete(ctx.succeeding(s -> {\n+                            ctx.verify(() -> {\n+                                assertThat(s.getStatus()).isEqualTo(HttpURLConnection.HTTP_OK);\n+                                final SearchResult<TenantWithId> searchResult = s.getPayload();\n+                                assertThat(searchResult.getTotal()).isEqualTo(2);\n+                                assertThat(searchResult.getResult()).hasSize(1);\n+                            });\n+                            ctx.completeNow();\n+                        }));\n+    }\n+\n+    /**\n+     * Verifies that a request to search tenants with valid page offset succeeds and the result is in accordance with\n+     * the specified page offset.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    default void testSearchTenantsWithPageOffset(final VertxTestContext ctx) {\n+        final String tenantId1 = DeviceRegistryUtils.getUniqueIdentifier();\n+        final String tenantId2 = DeviceRegistryUtils.getUniqueIdentifier();\n+        final int pageSize = 1;\n+        final int pageOffset = 1;\n+        final Filter filter = new Filter(\"/enabled\", true);\n+        final Sort sortOption = new Sort(\"/ext/id\");\n+        sortOption.setDirection(Sort.Direction.desc);\n+\n+        createTenants(Map.of(\n+                tenantId1, new Tenant().setEnabled(true).setExtensions(Map.of(\"id\", \"1\")),\n+                tenantId2, new Tenant().setEnabled(true).setExtensions(Map.of(\"id\", \"2\"))))\n+                        .compose(ok -> getTenantManagementService()\n+                                .searchTenants(pageSize, pageOffset, List.of(filter), List.of(sortOption),\n+                                        NoopSpan.INSTANCE))\n+                        .onComplete(ctx.succeeding(s -> {\n+                            ctx.verify(() -> {\n+                                assertThat(s.getStatus()).isEqualTo(HttpURLConnection.HTTP_OK);\n+                                final SearchResult<TenantWithId> searchResult = s.getPayload();\n+                                assertThat(searchResult.getTotal()).isEqualTo(2);\n+                                assertThat(searchResult.getResult()).hasSize(1);\n+                                assertThat(searchResult.getResult().get(0).getId()).isEqualTo(tenantId1);\n+                            });\n+                            ctx.completeNow();\n+                        }));\n+    }\n+\n+    /**\n+     * Verifies that a request to search tenants with a sort option succeeds and the result is in accordance with the\n+     * specified sort option.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    default void testSearchTenantsWithSortOptions(final VertxTestContext ctx) {\n+        final String tenantId1 = DeviceRegistryUtils.getUniqueIdentifier();\n+        final String tenantId2 = DeviceRegistryUtils.getUniqueIdentifier();\n+        final String tenantId3 = DeviceRegistryUtils.getUniqueIdentifier();\n+        final int pageSize = 1;\n+        final int pageOffset = 0;\n+        final Filter filter = new Filter(\"/enabled\", true);\n+        final Sort sortOption1 = new Sort(\"/ext/group\");\n+        final Sort sortOption2 = new Sort(\"/ext/id\");\n+        sortOption1.setDirection(Sort.Direction.desc);\n+        sortOption2.setDirection(Sort.Direction.asc);\n+\n+        createTenants(Map.of(\n+                tenantId1, new Tenant().setEnabled(false).setExtensions(Map.of(\"id\", \"1\", \"group\", \"B\")),\n+                tenantId2, new Tenant().setEnabled(true).setExtensions(Map.of(\"id\", \"2\", \"group\", \"B\")),\n+                tenantId3, new Tenant().setEnabled(true).setExtensions(Map.of(\"id\", \"3\", \"group\", \"B\"))))\n+                        .compose(ok -> getTenantManagementService()\n+                                .searchTenants(pageSize, pageOffset, List.of(filter), List.of(sortOption1, sortOption2),\n+                                        NoopSpan.INSTANCE))\n+                        .onComplete(ctx.succeeding(s -> {\n+                            ctx.verify(() -> {\n+                                assertThat(s.getStatus()).isEqualTo(HttpURLConnection.HTTP_OK);\n+                                final SearchResult<TenantWithId> searchResult = s.getPayload();\n+                                assertThat(searchResult.getTotal()).isEqualTo(2);\n+                                assertThat(searchResult.getResult()).hasSize(1);\n+                                assertThat(searchResult.getResult().get(0).getId()).isEqualTo(tenantId2);\n+                            });\n+                            ctx.completeNow();\n+                        }));\n+    }\n+\n+    /**\n+     * Verifies that a request to search tenants with filters containing the wildcard character '*' \n+     * succeeds and matching tenants are found.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    default void testSearchDevicesWithWildCardToMatchMultipleCharacters(final VertxTestContext ctx) {", "originalCommit": "0b53f9dc80385dcc305c8e3cf1a64c5aea3b4442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyMzU5MA==", "url": "https://github.com/eclipse/hono/pull/2383#discussion_r548023590", "bodyText": "I have corrected it.", "author": "kaniyan", "createdAt": "2020-12-23T15:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyMDI0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a8c9b18243115a9142b1d55f2d757bd73cd7ed9b", "chunk": "diff --git a/services/device-registry-base/src/test/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementSearchTenantsTest.java b/services/device-registry-base/src/test/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementSearchTenantsTest.java\nindex 03dcff6da..08d800ace 100644\n--- a/services/device-registry-base/src/test/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementSearchTenantsTest.java\n+++ b/services/device-registry-base/src/test/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementSearchTenantsTest.java\n\n@@ -248,7 +248,7 @@ public interface AbstractTenantManagementSearchTenantsTest {\n      * @param ctx The vert.x test context.\n      */\n     @Test\n-    default void testSearchDevicesWithWildCardToMatchMultipleCharacters(final VertxTestContext ctx) {\n+    default void testSearchTenantsWithWildCardToMatchMultipleCharacters(final VertxTestContext ctx) {\n         final String tenantId1 = DeviceRegistryUtils.getUniqueIdentifier();\n         final String tenantId2 = DeviceRegistryUtils.getUniqueIdentifier();\n         final String tenantId3 = DeviceRegistryUtils.getUniqueIdentifier();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyMTEwNg==", "url": "https://github.com/eclipse/hono/pull/2383#discussion_r548021106", "bodyText": "shouldn't this be implemented by some test class?", "author": "sophokles73", "createdAt": "2020-12-23T15:45:45Z", "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementSearchTenantsTest.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.tenant;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.service.management.Filter;\n+import org.eclipse.hono.service.management.SearchResult;\n+import org.eclipse.hono.service.management.Sort;\n+import org.eclipse.hono.util.Adapter;\n+import org.junit.jupiter.api.Test;\n+\n+import io.opentracing.noop.NoopSpan;\n+import io.vertx.core.Future;\n+import io.vertx.junit5.VertxTestContext;\n+\n+/**\n+ * A suite of tests for verifying implementations of the Tenant management's \n+ * search tenants operation.\n+ * <p>\n+ * Concrete subclasses need to provide the service implementations under test\n+ * by means of implementing the {@link #getTenantManagementService()} method.\n+ * Also the subclasses should clean up any fixture in the database that has\n+ * been created by individual test cases.\n+ */\n+public interface AbstractTenantManagementSearchTenantsTest {", "originalCommit": "0b53f9dc80385dcc305c8e3cf1a64c5aea3b4442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyMzQ5NA==", "url": "https://github.com/eclipse/hono/pull/2383#discussion_r548023494", "bodyText": "yes. I missed to include that  class in the last commit. Now I have included.", "author": "kaniyan", "createdAt": "2020-12-23T15:50:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyMTEwNg=="}], "type": "inlineReview", "revised_code": {"commit": "a8c9b18243115a9142b1d55f2d757bd73cd7ed9b", "chunk": "diff --git a/services/device-registry-base/src/test/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementSearchTenantsTest.java b/services/device-registry-base/src/test/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementSearchTenantsTest.java\nindex 03dcff6da..08d800ace 100644\n--- a/services/device-registry-base/src/test/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementSearchTenantsTest.java\n+++ b/services/device-registry-base/src/test/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementSearchTenantsTest.java\n\n@@ -248,7 +248,7 @@ public interface AbstractTenantManagementSearchTenantsTest {\n      * @param ctx The vert.x test context.\n      */\n     @Test\n-    default void testSearchDevicesWithWildCardToMatchMultipleCharacters(final VertxTestContext ctx) {\n+    default void testSearchTenantsWithWildCardToMatchMultipleCharacters(final VertxTestContext ctx) {\n         final String tenantId1 = DeviceRegistryUtils.getUniqueIdentifier();\n         final String tenantId2 = DeviceRegistryUtils.getUniqueIdentifier();\n         final String tenantId3 = DeviceRegistryUtils.getUniqueIdentifier();\n"}}, {"oid": "a8c9b18243115a9142b1d55f2d757bd73cd7ed9b", "url": "https://github.com/eclipse/hono/commit/a8c9b18243115a9142b1d55f2d757bd73cd7ed9b", "message": "Implement review comments\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-12-23T15:49:12Z", "type": "commit"}]}