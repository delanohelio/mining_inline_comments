{"pr_number": 1946, "pr_title": "Verify tenant from command target address", "pr_createdAt": "2020-05-07T11:08:28Z", "pr_url": "https://github.com/eclipse/hono/pull/1946", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ2MDU5OQ==", "url": "https://github.com/eclipse/hono/pull/1946#discussion_r421460599", "bodyText": "What about a downstream application sending a command on a command/TenantA link and using command/TenantB/someDevice in the command message to address?\nCan we be sure that the AMQP messaging network rejects such a message if the sender has only been given rights to send on the command/TenantA address? I'm not sure if the qdrouter for example checks the to address here as well.", "author": "calohmn", "createdAt": "2020-05-07T12:21:39Z", "path": "client/src/main/java/org/eclipse/hono/client/impl/MappingAndDelegatingCommandHandler.java", "diffHunk": "@@ -96,34 +96,45 @@ public MappingAndDelegatingCommandHandler(final HonoConnection connection,\n     }\n \n     /**\n+     * Delegates an incoming command to the protocol adapter instance that the target\n+     * device is connected to.\n+     * <p>\n      * Determines the target gateway (if applicable) and protocol adapter instance for an incoming command\n      * and delegates the command either to the local AdapterInstanceCommandHandler or to the resulting\n      * protocol adapter instance.\n      *\n-     * @param tenantId The tenant id.\n      * @param originalMessageDelivery The delivery of the command message.\n      * @param message The command message.\n      * @throws NullPointerException if any of the parameters is {@code null}.\n      */\n-    public void mapAndDelegateIncomingCommandMessage(final String tenantId,\n-            final ProtonDelivery originalMessageDelivery, final Message message) {\n-        Objects.requireNonNull(tenantId);\n+    public void mapAndDelegateIncomingCommandMessage(final ProtonDelivery originalMessageDelivery, final Message message) {\n         Objects.requireNonNull(originalMessageDelivery);\n         Objects.requireNonNull(message);\n \n-        // this is the place where a command message on the \"command/tenant\" address arrives *first*\n-        final String deviceId = message.getAddress() != null ? ResourceIdentifier.fromString(message.getAddress()).getResourceId() : null;\n-        if (deviceId == null) {\n-            LOG.debug(\"address of command message is invalid: {}\", message.getAddress());\n+        // this is the place where a command message on the \"command/${tenant}\" address arrives *first*\n+        if (message.getAddress() == null) {\n+            LOG.debug(\"command message has no address\");\n+            final Rejected rejected = new Rejected();\n+            rejected.setError(new ErrorCondition(Constants.AMQP_BAD_REQUEST, \"missing command target address\"));\n+            originalMessageDelivery.disposition(rejected, true);\n+            return;\n+        }\n+        final ResourceIdentifier targetAddress = ResourceIdentifier.fromString(message.getAddress());\n+        final String tenantId = targetAddress.getTenantId();", "originalCommit": "4e351112dbe69c4f951d021f34a212a828ed7de3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg4NzQxNQ==", "url": "https://github.com/eclipse/hono/pull/1946#discussion_r422887415", "bodyText": "Good point. This, however, means that we would not be able to receive all commands for all tenants using a link source address of tenant/#.\nBTW the current implementation also does not check if the tenant ID from the command target address matches the tenant from the link source address used to receive the command. Instead, we simply use the tenant from the link source address with the device ID from the command target address. This effectively prevents applications from sending a command to a device of another tenant but does not detect programming errors if a device with the same ID exists in multiple tenants ...", "author": "sophokles73", "createdAt": "2020-05-11T08:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ2MDU5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYwMDk3OQ==", "url": "https://github.com/eclipse/hono/pull/1946#discussion_r423600979", "bodyText": "This, however, means that we would not be able to receive all commands for all tenants using a link source address of tenant/#.\n\n(You mean command/#, I guess.)\nI've done a test here and the Qdrouter seems to allow sending messages with a to address, to which the sender hasn't been given rights for, as long as there are rights for the link address. (I guess the more expensive to address auth check in the Qdrouter for every received message is only done in case of a sender on the anonymous link address.)\nSo that is something that speaks against using the command/# receiver link instead of the tenant based links.\nTherefore I would suggest keeping the tenant parameter here. The missing comparison with the tenant from the to address is indeed missing and should be added.", "author": "calohmn", "createdAt": "2020-05-12T09:39:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ2MDU5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIwODc5NA==", "url": "https://github.com/eclipse/hono/pull/1946#discussion_r428208794", "bodyText": "@calohmn I have added the check for the tenant from the command message.\nWould you mind taking another look?", "author": "sophokles73", "createdAt": "2020-05-20T18:07:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ2MDU5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "465e69cdcfdc16d6bd39fd612b98cb5637d99b31", "chunk": "diff --git a/client/src/main/java/org/eclipse/hono/client/impl/MappingAndDelegatingCommandHandler.java b/client/src/main/java/org/eclipse/hono/client/impl/MappingAndDelegatingCommandHandler.java\nindex 2c41233ee..9817c85f5 100644\n--- a/client/src/main/java/org/eclipse/hono/client/impl/MappingAndDelegatingCommandHandler.java\n+++ b/client/src/main/java/org/eclipse/hono/client/impl/MappingAndDelegatingCommandHandler.java\n\n@@ -103,11 +104,17 @@ public class MappingAndDelegatingCommandHandler {\n      * and delegates the command either to the local AdapterInstanceCommandHandler or to the resulting\n      * protocol adapter instance.\n      *\n+     * @param tenantId The tenant that the command target must belong to.\n      * @param originalMessageDelivery The delivery of the command message.\n      * @param message The command message.\n      * @throws NullPointerException if any of the parameters is {@code null}.\n      */\n-    public void mapAndDelegateIncomingCommandMessage(final ProtonDelivery originalMessageDelivery, final Message message) {\n+    public void mapAndDelegateIncomingCommandMessage(\n+            final String tenantId,\n+            final ProtonDelivery originalMessageDelivery,\n+            final Message message) {\n+\n+        Objects.requireNonNull(tenantId);\n         Objects.requireNonNull(originalMessageDelivery);\n         Objects.requireNonNull(message);\n \n"}}, {"oid": "465e69cdcfdc16d6bd39fd612b98cb5637d99b31", "url": "https://github.com/eclipse/hono/commit/465e69cdcfdc16d6bd39fd612b98cb5637d99b31", "message": "Verify tenant from command target address\n\nWhen mapping and delegating a command message, the tenant from the\nmessage's address is now being compared to the tenant that the command\nreceiver link is scoped to.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-05-20T18:04:51Z", "type": "commit"}, {"oid": "465e69cdcfdc16d6bd39fd612b98cb5637d99b31", "url": "https://github.com/eclipse/hono/commit/465e69cdcfdc16d6bd39fd612b98cb5637d99b31", "message": "Verify tenant from command target address\n\nWhen mapping and delegating a command message, the tenant from the\nmessage's address is now being compared to the tenant that the command\nreceiver link is scoped to.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-05-20T18:04:51Z", "type": "forcePushed"}]}