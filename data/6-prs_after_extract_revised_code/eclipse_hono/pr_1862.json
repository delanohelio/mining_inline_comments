{"pr_number": 1862, "pr_title": "custom mapper", "pr_createdAt": "2020-03-30T09:33:29Z", "pr_url": "https://github.com/eclipse/hono/pull/1862", "timeline": [{"oid": "4d8fc4f95818e23ed27d0d394462ff552a60eb2c", "url": "https://github.com/eclipse/hono/commit/4d8fc4f95818e23ed27d0d394462ff552a60eb2c", "message": "initial commit custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-03-30T09:33:43Z", "type": "forcePushed"}, {"oid": "5c47966bf1ba9804eeed245a148c36210bdda369", "url": "https://github.com/eclipse/hono/commit/5c47966bf1ba9804eeed245a148c36210bdda369", "message": "revert test\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-03-30T09:48:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExNzY0Mg==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400117642", "bodyText": "how do you set these?", "author": "sophokles73", "createdAt": "2020-03-30T11:26:39Z", "path": "core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java", "diffHunk": "@@ -229,4 +231,15 @@ public Duration getTenantIdleTimeout() {\n     public void setTenantIdleTimeout(final Duration tenantIdleTimeout) {\n         this.tenantIdleTimeout = Objects.requireNonNull(tenantIdleTimeout);\n     }\n+\n+    /**\n+     * Gets the configured mappers for this adapter\n+     * <p>\n+     * The default value of this property is an empty hashMap. Ths results in not having custom mapping at all.\n+     *\n+     * @return HashMap of mapper endpoints\n+     */\n+    public HashMap<String, MapperEndpoint> getMapperEndpoints() {", "originalCommit": "b5456ff998a4329b915ba5b5352a4e14e0733fc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1MDE1Mw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400150153", "bodyText": "Did not run it yet but was hoping for the spring-boot to provide this via the properties file", "author": "BobClaerhout", "createdAt": "2020-03-30T12:26:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExNzY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyMTk2Nw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400221967", "bodyText": "you better try this out :-)", "author": "sophokles73", "createdAt": "2020-03-30T14:10:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExNzY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI3ODIwMQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400278201", "bodyText": "I tried it out and it works :)\nFollowing configuration (in the application.yaml) results in 2 mapperEndpoints being configured in the (mqtt) adapter:\n  mqtt:\n    .....\n    mapperEndpoints:\n      test:\n        host: host\n        port: 123\n        uri: uri\n      test2:\n        host: host2\n        port: 321\n        uri: uri2", "author": "BobClaerhout", "createdAt": "2020-03-30T15:21:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExNzY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5MTIzOQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400291239", "bodyText": "Now you will only need to find a way to document this :-)", "author": "sophokles73", "createdAt": "2020-03-30T15:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExNzY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyNTY5NQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400325695", "bodyText": "OK, I tested this with a command line option:\nhono.mqtt.mapperEndpoints.test.port=1234 (works for other properties as wel.\nThis also works when you are using the environment variables exactly the same:\nhono.mqtt.mapperEndpoints.test.port=1234\nI saw that all other ENV variables are uppercase but I can't seem to find where this conversion happens because if I change it to HONO_MQTT_MAPPER_ENDPOINTS_TEST_PORT=1234 it no longer works.", "author": "BobClaerhout", "createdAt": "2020-03-30T16:25:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExNzY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMDA0NQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400330045", "bodyText": "I updated the documentation assuming it's OK to use that sort of configuration in the environment variables. If not, we should try to find out how we can do this configuration in the environment variables using the upper case naming.", "author": "BobClaerhout", "createdAt": "2020-03-30T16:31:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExNzY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY3MzAwNQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400673005", "bodyText": "new day, new insights. Shouldn't have added the underscore in MAPPER_ENDPOINTS but left it as is: MAPPERENDPOINTS. Now it's wrorking. Documentation also updated.", "author": "BobClaerhout", "createdAt": "2020-03-31T06:33:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExNzY0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java b/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\nindex de0096460..1c559c310 100644\n--- a/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\n+++ b/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\n\n@@ -233,13 +233,24 @@ public class ProtocolAdapterProperties extends ServiceConfigProperties {\n     }\n \n     /**\n-     * Gets the configured mappers for this adapter\n+     * Sets the configured mappers for this adapter\n      * <p>\n-     * The default value of this property is an empty hashMap. Ths results in not having custom mapping at all.\n+     * Setting this property to an empty hashMap will disable mapping for this adapter.\n      *\n-     * @return HashMap of mapper endpoints\n+     * @param mapperEndpoints The new hashMap with mapper endpoints\n+     * @throws NullPointerException if parameter is {@code null}.\n+     */\n+    public final void setMapperEndpoints(final HashMap<String, MapperEndpoint> mapperEndpoints) {\n+        this.mapperEndpoints = Objects.requireNonNull(mapperEndpoints);\n+    }\n+\n+    /**\n+     * Gets the configured mapper for the given key.\n+     *\n+     * @param key The key to identify the mapper\n+     * @return the mapperEndpoint. If not found, will return {@code null}.\n      */\n-    public HashMap<String, MapperEndpoint> getMapperEndpoints() {\n-        return mapperEndpoints;\n+    public final MapperEndpoint getMapperEndpoint(final String key) {\n+        return mapperEndpoints.get(key);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExODI1NA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400118254", "bodyText": "This seems to be the description of the memberOf field ...", "author": "sophokles73", "createdAt": "2020-03-30T11:27:47Z", "path": "core/src/main/java/org/eclipse/hono/util/RegistrationConstants.java", "diffHunk": "@@ -71,6 +71,14 @@\n      */\n     public static final String FIELD_MEMBER_OF = \"memberOf\";\n \n+    /**\n+     * The name of the field in a device registration information that contains the identifier of the names\n+     * of the groups in which the device is member of (either as string value or inside a JSON array).\n+     * Note, that it is only possible to either set the 'via' or the 'memberOf' property since groups of groups\n+     * are currently not supported.", "originalCommit": "b5456ff998a4329b915ba5b5352a4e14e0733fc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1MjQxNQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400152415", "bodyText": "right, forgot to change it.", "author": "BobClaerhout", "createdAt": "2020-03-30T12:29:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExODI1NA=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/util/RegistrationConstants.java b/core/src/main/java/org/eclipse/hono/util/RegistrationConstants.java\nindex 17d548a50..599b7430c 100644\n--- a/core/src/main/java/org/eclipse/hono/util/RegistrationConstants.java\n+++ b/core/src/main/java/org/eclipse/hono/util/RegistrationConstants.java\n\n@@ -48,34 +45,14 @@ public final class RegistrationConstants extends RequestResponseApiConstants {\n     public static final String FIELD_DATA         = \"data\";\n \n     /**\n-     * The name of the field in a device's registration information that contains\n-     * the identifier of the gateway that it is connected to (either as string value or inside a JSON array).\n-     * Note, that it is only possible to either set the 'via' or the 'memberOf' property since gateways of gateways\n-     * are currently not supported.\n+     * The name of the field in a response to the <em>assert Device Registration</em> operation\n+     * that contains the identifiers of those gateways that may act on behalf of the device.\n      */\n     public static final String FIELD_VIA = \"via\";\n \n     /**\n-     * The name of the field in the device registration information that contains the identifier of the gateways groups\n-     * that the device is connected to (either as String value or inside a JSON array).\n-     * Note, that is is only possible to either set the 'viaGroups' or the 'memberOf' property since groups of groups\n-     * are currently not supported.\n-     */\n-    public static final String FIELD_VIA_GROUPS = \"viaGroups\";\n-\n-    /**\n-     * The name of the field in a device registration information that contains the identifier of the names\n-     * of the groups in which the device is member of (either as string value or inside a JSON array).\n-     * Note, that it is only possible to either set the 'via' or the 'memberOf' property since groups of groups\n-     * are currently not supported.\n-     */\n-    public static final String FIELD_MEMBER_OF = \"memberOf\";\n-\n-    /**\n-     * The name of the field in a device registration information that contains the identifier of the names\n-     * of the groups in which the device is member of (either as string value or inside a JSON array).\n-     * Note, that it is only possible to either set the 'via' or the 'memberOf' property since groups of groups\n-     * are currently not supported.\n+     * The name of the mapper used. This mapper should be configured for the adapter and can be referenced using\n+     * this field.\n      */\n     public static final String FIELD_MAPPER = \"mapper\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMDc5NA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400120794", "bodyText": "better use com.google.common.io.BaseEncoding.base16().encode(byte[])", "author": "sophokles73", "createdAt": "2020-03-30T11:32:55Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -14,27 +14,42 @@\n package org.eclipse.hono.adapter.mqtt.impl;\n \n import java.net.HttpURLConnection;\n+import java.util.HashMap;\n \n import org.eclipse.hono.adapter.mqtt.AbstractVertxBasedMqttProtocolAdapter;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.MapperEndpoint;\n import org.eclipse.hono.service.metric.MetricsTags;\n import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.RegistrationConstants;\n import org.eclipse.hono.util.ResourceIdentifier;\n \n import io.netty.handler.codec.mqtt.MqttQoS;\n import io.vertx.core.Future;\n import io.vertx.core.Promise;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n \n /**\n  * A Vert.x based Hono protocol adapter for publishing messages to Hono's Telemetry and Event APIs using MQTT.\n  */\n public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttProtocolAdapter<MqttProtocolAdapterProperties> {\n \n+    private static final String HEXES = \"0123456789ABCDEF\";\n+\n+    static String getHex(final byte[] raw) {", "originalCommit": "b5456ff998a4329b915ba5b5352a4e14e0733fc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1NjU4NQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400156585", "bodyText": "Removed this code as we are now sending the buffer. No hex needed", "author": "BobClaerhout", "createdAt": "2020-03-30T12:36:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMDc5NA=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\nindex 2c07e66a9..0d39a2f0f 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n\n@@ -14,38 +14,26 @@\n package org.eclipse.hono.adapter.mqtt.impl;\n \n import java.net.HttpURLConnection;\n-import java.util.HashMap;\n \n import org.eclipse.hono.adapter.mqtt.AbstractVertxBasedMqttProtocolAdapter;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n import org.eclipse.hono.client.ClientErrorException;\n-import org.eclipse.hono.config.MapperEndpoint;\n import org.eclipse.hono.service.metric.MetricsTags;\n import org.eclipse.hono.util.Constants;\n-import org.eclipse.hono.util.RegistrationConstants;\n import org.eclipse.hono.util.ResourceIdentifier;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n import io.netty.handler.codec.mqtt.MqttQoS;\n import io.vertx.core.Future;\n import io.vertx.core.Promise;\n-import io.vertx.ext.web.client.WebClient;\n import io.vertx.mqtt.messages.MqttPublishMessage;\n \n /**\n  * A Vert.x based Hono protocol adapter for publishing messages to Hono's Telemetry and Event APIs using MQTT.\n  */\n public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttProtocolAdapter<MqttProtocolAdapterProperties> {\n-\n-    private static final String HEXES = \"0123456789ABCDEF\";\n-\n-    static String getHex(final byte[] raw) {\n-        final StringBuilder hex = new StringBuilder(2 * raw.length);\n-        for (final byte b : raw) {\n-            hex.append(HEXES.charAt((b & 0xF0) >> 4)).append(HEXES.charAt((b & 0x0F)));\n-        }\n-        return hex.toString();\n-    }\n+    private MessageMapping messageMapping;\n \n     /**\n      * {@inheritDoc}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMzM1OQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400123359", "bodyText": "The response to get Registration Assertion only contains the default properties to be included in all downstream messages. I don't think that this field should be configured as a default property, though ...", "author": "sophokles73", "createdAt": "2020-03-30T11:37:44Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -96,4 +112,38 @@ protected String getTypeName() {\n         }\n         return result.future();\n     }\n+\n+    private Future<ResourceIdentifier> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress, final MqttPublishMessage message) {\n+        return getRegistrationAssertion(targetAddress.getTenantId(), targetAddress.getResourceId(),\n+                ctx.authenticatedDevice(), ctx.getTracingContext()).compose(registratonInfo -> {\n+            final Promise<ResourceIdentifier> result = Promise.promise();\n+            if (!registratonInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n+                result.complete(targetAddress);\n+                return result.future();\n+            }", "originalCommit": "b5456ff998a4329b915ba5b5352a4e14e0733fc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1MzIyMA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400153220", "bodyText": "Ok, this is valuable information to me. I was indeed not trying to get the defaults property but trying to get the (newly created) mapper field as you see below. How do I get these properties?", "author": "BobClaerhout", "createdAt": "2020-03-30T12:31:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMzM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyMDk2NQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400220965", "bodyText": "Let me try to understand what you want to do first. The device that has been authenticated at this point is a gateway, right? You now want to retrieve the configuration data that has been registered for the gateway in order to determine the URL to invoke for mapping payload data, right?", "author": "sophokles73", "createdAt": "2020-03-30T14:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMzM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzNjAxMA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400236010", "bodyText": "yes, that's right.", "author": "BobClaerhout", "createdAt": "2020-03-30T14:28:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMzM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI1MjIyOA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400252228", "bodyText": "Ok, then you would probably want to access data that has been registered under ext for the gateway. However, the Device Registration API doesn't support this for now. We can, of course, change it to either support a dedicated get Registration operation or we also include the ext data in the response to the get Registration Assertion operation. We would need to make that optional, however, for the time being. Otherwise, we would introduce an implementation breaking change to the Device Registration API. This means that the whole mapping functionality that you want to add would only work with a device registry that supports returning the ext properties ...", "author": "sophokles73", "createdAt": "2020-03-30T14:48:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMzM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5ODQwOQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400298409", "bodyText": "I do not see why this should be under ext? The description of ext in the documentation is the following one: Allows arbitrary properties as extension to the ones specified by the Hono API. I think we are adding the mapping to the Hono API and therefor it should be a field as well. Just as via is a field on a device", "author": "BobClaerhout", "createdAt": "2020-03-30T15:47:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMzM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzOTUxMg==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400839512", "bodyText": "Why can't we get it the same as the VIA property retrieved in the following line:\n\n  \n    \n      hono/service-base/src/main/java/org/eclipse/hono/service/AbstractProtocolAdapterBase.java\n    \n    \n         Line 1109\n      in\n      9a37b82\n    \n    \n    \n    \n\n        \n          \n           final Object viaObj = registrationAssertion.getValue(RegistrationConstants.FIELD_VIA);", "author": "BobClaerhout", "createdAt": "2020-03-31T11:30:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMzM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0OTI1NQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400849255", "bodyText": "I've changed the device registry GetAssertionPayload to provide it. Question remains: is this allowed?", "author": "BobClaerhout", "createdAt": "2020-03-31T11:49:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMzM1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\nindex 2c07e66a9..0d39a2f0f 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n\n@@ -113,37 +123,7 @@ public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttP\n         return result.future();\n     }\n \n-    private Future<ResourceIdentifier> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress, final MqttPublishMessage message) {\n-        return getRegistrationAssertion(targetAddress.getTenantId(), targetAddress.getResourceId(),\n-                ctx.authenticatedDevice(), ctx.getTracingContext()).compose(registratonInfo -> {\n-            final Promise<ResourceIdentifier> result = Promise.promise();\n-            if (!registratonInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n-                result.complete(targetAddress);\n-                return result.future();\n-            }\n-            final String mapper = registratonInfo.getString(RegistrationConstants.FIELD_MAPPER);\n-            if (mapper.isBlank()) {\n-                result.complete(targetAddress);\n-                return result.future();\n-            }\n-            final HashMap<String, MapperEndpoint> mapperEndpoints = getConfig().getMapperEndpoints();\n-            if (!mapperEndpoints.containsKey(mapper)) {\n-                result.complete(targetAddress);\n-                return result.future();\n-            }\n-            final MapperEndpoint mapperEndpoint = mapperEndpoints.get(mapper);\n-            final WebClient webClient = WebClient.create(vertx);\n-            webClient.get(mapperEndpoint.getPort(), mapperEndpoint.getHost(), mapperEndpoint.getUri())\n-                    .addQueryParam(\"payload\", getHex(message.payload().getBytes()))\n-                    .send(httpResponseAsyncResult -> {\n-                        if (httpResponseAsyncResult.succeeded()) {\n-                            result.complete(\n-                                    //TODO\n-                            );\n-                        }\n-                    });\n \n-            return result.future();\n-        });\n-    }\n+\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyNDcwOA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400124708", "bodyText": "I would rather do a POST and include the payload as a plain byte array in the request body so that there is no need to encode the data to a HEX string.", "author": "sophokles73", "createdAt": "2020-03-30T11:40:14Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -96,4 +112,38 @@ protected String getTypeName() {\n         }\n         return result.future();\n     }\n+\n+    private Future<ResourceIdentifier> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress, final MqttPublishMessage message) {\n+        return getRegistrationAssertion(targetAddress.getTenantId(), targetAddress.getResourceId(),\n+                ctx.authenticatedDevice(), ctx.getTracingContext()).compose(registratonInfo -> {\n+            final Promise<ResourceIdentifier> result = Promise.promise();\n+            if (!registratonInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n+                result.complete(targetAddress);\n+                return result.future();\n+            }\n+            final String mapper = registratonInfo.getString(RegistrationConstants.FIELD_MAPPER);\n+            if (mapper.isBlank()) {\n+                result.complete(targetAddress);\n+                return result.future();\n+            }\n+            final HashMap<String, MapperEndpoint> mapperEndpoints = getConfig().getMapperEndpoints();\n+            if (!mapperEndpoints.containsKey(mapper)) {\n+                result.complete(targetAddress);\n+                return result.future();\n+            }\n+            final MapperEndpoint mapperEndpoint = mapperEndpoints.get(mapper);\n+            final WebClient webClient = WebClient.create(vertx);\n+            webClient.get(mapperEndpoint.getPort(), mapperEndpoint.getHost(), mapperEndpoint.getUri())\n+                    .addQueryParam(\"payload\", getHex(message.payload().getBytes()))", "originalCommit": "b5456ff998a4329b915ba5b5352a4e14e0733fc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1NDUwNA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400154504", "bodyText": "I agree, better this way", "author": "BobClaerhout", "createdAt": "2020-03-30T12:33:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyNDcwOA=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\nindex 2c07e66a9..0d39a2f0f 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n\n@@ -113,37 +123,7 @@ public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttP\n         return result.future();\n     }\n \n-    private Future<ResourceIdentifier> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress, final MqttPublishMessage message) {\n-        return getRegistrationAssertion(targetAddress.getTenantId(), targetAddress.getResourceId(),\n-                ctx.authenticatedDevice(), ctx.getTracingContext()).compose(registratonInfo -> {\n-            final Promise<ResourceIdentifier> result = Promise.promise();\n-            if (!registratonInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n-                result.complete(targetAddress);\n-                return result.future();\n-            }\n-            final String mapper = registratonInfo.getString(RegistrationConstants.FIELD_MAPPER);\n-            if (mapper.isBlank()) {\n-                result.complete(targetAddress);\n-                return result.future();\n-            }\n-            final HashMap<String, MapperEndpoint> mapperEndpoints = getConfig().getMapperEndpoints();\n-            if (!mapperEndpoints.containsKey(mapper)) {\n-                result.complete(targetAddress);\n-                return result.future();\n-            }\n-            final MapperEndpoint mapperEndpoint = mapperEndpoints.get(mapper);\n-            final WebClient webClient = WebClient.create(vertx);\n-            webClient.get(mapperEndpoint.getPort(), mapperEndpoint.getHost(), mapperEndpoint.getUri())\n-                    .addQueryParam(\"payload\", getHex(message.payload().getBytes()))\n-                    .send(httpResponseAsyncResult -> {\n-                        if (httpResponseAsyncResult.succeeded()) {\n-                            result.complete(\n-                                    //TODO\n-                            );\n-                        }\n-                    });\n \n-            return result.future();\n-        });\n-    }\n+\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyNTUxMg==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400125512", "bodyText": "Do we really need to configure the mapping endpoints per device? Will they be different for all devices or can't we simply configure the (limited set of) mapper endpoints at the tenant level instead?", "author": "sophokles73", "createdAt": "2020-03-30T11:41:44Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -96,4 +112,38 @@ protected String getTypeName() {\n         }\n         return result.future();\n     }\n+\n+    private Future<ResourceIdentifier> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress, final MqttPublishMessage message) {\n+        return getRegistrationAssertion(targetAddress.getTenantId(), targetAddress.getResourceId(),\n+                ctx.authenticatedDevice(), ctx.getTracingContext()).compose(registratonInfo -> {\n+            final Promise<ResourceIdentifier> result = Promise.promise();\n+            if (!registratonInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n+                result.complete(targetAddress);\n+                return result.future();\n+            }\n+            final String mapper = registratonInfo.getString(RegistrationConstants.FIELD_MAPPER);\n+            if (mapper.isBlank()) {\n+                result.complete(targetAddress);\n+                return result.future();\n+            }\n+            final HashMap<String, MapperEndpoint> mapperEndpoints = getConfig().getMapperEndpoints();", "originalCommit": "b5456ff998a4329b915ba5b5352a4e14e0733fc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1NTE2OQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400155169", "bodyText": "In our case, we might have different mapping endpoint per device in the same tenant.\nAlso, I thought this configuration is on the protocol adapter (which supports multiple tenants) so a list of mapperEndpoints should be injected here or am I wrong?", "author": "BobClaerhout", "createdAt": "2020-03-30T12:34:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyNTUxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk1NDkyOA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400954928", "bodyText": "I see. However, instead of exposing the Map to this class here, what about adding a getMapperEndpoint(String) to the ProtocolAdapterProperties class instead?", "author": "sophokles73", "createdAt": "2020-03-31T14:23:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyNTUxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAyODgwOQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403028809", "bodyText": "Done", "author": "BobClaerhout", "createdAt": "2020-04-03T14:04:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyNTUxMg=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\nindex 2c07e66a9..0d39a2f0f 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n\n@@ -113,37 +123,7 @@ public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttP\n         return result.future();\n     }\n \n-    private Future<ResourceIdentifier> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress, final MqttPublishMessage message) {\n-        return getRegistrationAssertion(targetAddress.getTenantId(), targetAddress.getResourceId(),\n-                ctx.authenticatedDevice(), ctx.getTracingContext()).compose(registratonInfo -> {\n-            final Promise<ResourceIdentifier> result = Promise.promise();\n-            if (!registratonInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n-                result.complete(targetAddress);\n-                return result.future();\n-            }\n-            final String mapper = registratonInfo.getString(RegistrationConstants.FIELD_MAPPER);\n-            if (mapper.isBlank()) {\n-                result.complete(targetAddress);\n-                return result.future();\n-            }\n-            final HashMap<String, MapperEndpoint> mapperEndpoints = getConfig().getMapperEndpoints();\n-            if (!mapperEndpoints.containsKey(mapper)) {\n-                result.complete(targetAddress);\n-                return result.future();\n-            }\n-            final MapperEndpoint mapperEndpoint = mapperEndpoints.get(mapper);\n-            final WebClient webClient = WebClient.create(vertx);\n-            webClient.get(mapperEndpoint.getPort(), mapperEndpoint.getHost(), mapperEndpoint.getUri())\n-                    .addQueryParam(\"payload\", getHex(message.payload().getBytes()))\n-                    .send(httpResponseAsyncResult -> {\n-                        if (httpResponseAsyncResult.succeeded()) {\n-                            result.complete(\n-                                    //TODO\n-                            );\n-                        }\n-                    });\n \n-            return result.future();\n-        });\n-    }\n+\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzMTA0Mg==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400831042", "bodyText": "MessageHelper.APP_PROPERTY_DEVICE_ID", "author": "sophokles73", "createdAt": "2020-03-31T11:14:44Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -36,6 +40,11 @@\n  * A Vert.x based Hono protocol adapter for publishing messages to Hono's Telemetry and Event APIs using MQTT.\n  */\n public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttProtocolAdapter<MqttProtocolAdapterProperties> {\n+    /**\n+     * The name of the AMQP 1.0 message application property containing the id of the device that has reported the data\n+     * belongs to.\n+     */\n+    public static final String APP_PROPERTY_DEVICE_ID = \"device_id\";", "originalCommit": "3681cb1f36571d78ae5a3792f17b766cd610916e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\nindex c7db1e33c..0d39a2f0f 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n\n@@ -14,37 +14,26 @@\n package org.eclipse.hono.adapter.mqtt.impl;\n \n import java.net.HttpURLConnection;\n-import java.util.HashMap;\n \n-import io.vertx.core.MultiMap;\n-import io.vertx.core.buffer.Buffer;\n-import io.vertx.ext.web.client.HttpResponse;\n-import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n import org.eclipse.hono.adapter.mqtt.AbstractVertxBasedMqttProtocolAdapter;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n import org.eclipse.hono.client.ClientErrorException;\n-import org.eclipse.hono.config.MapperEndpoint;\n import org.eclipse.hono.service.metric.MetricsTags;\n import org.eclipse.hono.util.Constants;\n-import org.eclipse.hono.util.RegistrationConstants;\n import org.eclipse.hono.util.ResourceIdentifier;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n import io.netty.handler.codec.mqtt.MqttQoS;\n import io.vertx.core.Future;\n import io.vertx.core.Promise;\n-import io.vertx.ext.web.client.WebClient;\n import io.vertx.mqtt.messages.MqttPublishMessage;\n \n /**\n  * A Vert.x based Hono protocol adapter for publishing messages to Hono's Telemetry and Event APIs using MQTT.\n  */\n public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttProtocolAdapter<MqttProtocolAdapterProperties> {\n-    /**\n-     * The name of the AMQP 1.0 message application property containing the id of the device that has reported the data\n-     * belongs to.\n-     */\n-    public static final String APP_PROPERTY_DEVICE_ID = \"device_id\";\n+    private MessageMapping messageMapping;\n \n     /**\n      * {@inheritDoc}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1NDkzNw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400854937", "bodyText": "... configured for the adapter ...", "author": "sophokles73", "createdAt": "2020-03-31T11:59:14Z", "path": "core/src/main/java/org/eclipse/hono/util/RegistrationConstants.java", "diffHunk": "@@ -71,6 +71,12 @@\n      */\n     public static final String FIELD_MEMBER_OF = \"memberOf\";\n \n+    /**\n+     * The name of the mapper used. This mapper should be configured in on the adapter and can be referenced using", "originalCommit": "59d8c938de86b8c2c11a11c691d9f5d3d40431a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/util/RegistrationConstants.java b/core/src/main/java/org/eclipse/hono/util/RegistrationConstants.java\nindex 244e6eaf9..599b7430c 100644\n--- a/core/src/main/java/org/eclipse/hono/util/RegistrationConstants.java\n+++ b/core/src/main/java/org/eclipse/hono/util/RegistrationConstants.java\n\n@@ -48,31 +45,13 @@ public final class RegistrationConstants extends RequestResponseApiConstants {\n     public static final String FIELD_DATA         = \"data\";\n \n     /**\n-     * The name of the field in a device's registration information that contains\n-     * the identifier of the gateway that it is connected to (either as string value or inside a JSON array).\n-     * Note, that it is only possible to either set the 'via' or the 'memberOf' property since gateways of gateways\n-     * are currently not supported.\n+     * The name of the field in a response to the <em>assert Device Registration</em> operation\n+     * that contains the identifiers of those gateways that may act on behalf of the device.\n      */\n     public static final String FIELD_VIA = \"via\";\n \n     /**\n-     * The name of the field in the device registration information that contains the identifier of the gateways groups\n-     * that the device is connected to (either as String value or inside a JSON array).\n-     * Note, that is is only possible to either set the 'viaGroups' or the 'memberOf' property since groups of groups\n-     * are currently not supported.\n-     */\n-    public static final String FIELD_VIA_GROUPS = \"viaGroups\";\n-\n-    /**\n-     * The name of the field in a device registration information that contains the identifier of the names\n-     * of the groups in which the device is member of (either as string value or inside a JSON array).\n-     * Note, that it is only possible to either set the 'via' or the 'memberOf' property since groups of groups\n-     * are currently not supported.\n-     */\n-    public static final String FIELD_MEMBER_OF = \"memberOf\";\n-\n-    /**\n-     * The name of the mapper used. This mapper should be configured in on the adapter and can be referenced using\n+     * The name of the mapper used. This mapper should be configured for the adapter and can be referenced using\n      * this field.\n      */\n     public static final String FIELD_MAPPER = \"mapper\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1NTQzNQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400855435", "bodyText": "can you also add a setter so that this can be used in unit tests without requiring reflection?", "author": "sophokles73", "createdAt": "2020-03-31T12:00:07Z", "path": "core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java", "diffHunk": "@@ -229,4 +231,15 @@ public Duration getTenantIdleTimeout() {\n     public void setTenantIdleTimeout(final Duration tenantIdleTimeout) {\n         this.tenantIdleTimeout = Objects.requireNonNull(tenantIdleTimeout);\n     }\n+\n+    /**\n+     * Gets the configured mappers for this adapter\n+     * <p>\n+     * The default value of this property is an empty hashMap. Ths results in not having custom mapping at all.\n+     *\n+     * @return HashMap of mapper endpoints\n+     */\n+    public HashMap<String, MapperEndpoint> getMapperEndpoints() {", "originalCommit": "59d8c938de86b8c2c11a11c691d9f5d3d40431a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1NTYxNA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400855614", "bodyText": "please also make the getter and setter final", "author": "sophokles73", "createdAt": "2020-03-31T12:00:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1NTQzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java b/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\nindex de0096460..1c559c310 100644\n--- a/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\n+++ b/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\n\n@@ -233,13 +233,24 @@ public class ProtocolAdapterProperties extends ServiceConfigProperties {\n     }\n \n     /**\n-     * Gets the configured mappers for this adapter\n+     * Sets the configured mappers for this adapter\n      * <p>\n-     * The default value of this property is an empty hashMap. Ths results in not having custom mapping at all.\n+     * Setting this property to an empty hashMap will disable mapping for this adapter.\n      *\n-     * @return HashMap of mapper endpoints\n+     * @param mapperEndpoints The new hashMap with mapper endpoints\n+     * @throws NullPointerException if parameter is {@code null}.\n+     */\n+    public final void setMapperEndpoints(final HashMap<String, MapperEndpoint> mapperEndpoints) {\n+        this.mapperEndpoints = Objects.requireNonNull(mapperEndpoints);\n+    }\n+\n+    /**\n+     * Gets the configured mapper for the given key.\n+     *\n+     * @param key The key to identify the mapper\n+     * @return the mapperEndpoint. If not found, will return {@code null}.\n      */\n-    public HashMap<String, MapperEndpoint> getMapperEndpoints() {\n-        return mapperEndpoints;\n+    public final MapperEndpoint getMapperEndpoint(final String key) {\n+        return mapperEndpoints.get(key);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1NTkwOA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400855908", "bodyText": "final?", "author": "sophokles73", "createdAt": "2020-03-31T12:01:01Z", "path": "core/src/main/java/org/eclipse/hono/config/MapperEndpoint.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.config;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Configuration class for custom mappers.\n+ */\n+public class MapperEndpoint {", "originalCommit": "59d8c938de86b8c2c11a11c691d9f5d3d40431a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/config/MapperEndpoint.java b/core/src/main/java/org/eclipse/hono/config/MapperEndpoint.java\nindex ffe898b4a..712e0bf9b 100644\n--- a/core/src/main/java/org/eclipse/hono/config/MapperEndpoint.java\n+++ b/core/src/main/java/org/eclipse/hono/config/MapperEndpoint.java\n\n@@ -18,7 +18,7 @@ import java.util.Objects;\n /**\n  * Configuration class for custom mappers.\n  */\n-public class MapperEndpoint {\n+public final class MapperEndpoint {\n     private String host;\n     private Integer port;\n     private String uri;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1NjM2Ng==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400856366", "bodyText": "how about making this class immutable and provide a static factory method that accepts all three properties?", "author": "sophokles73", "createdAt": "2020-03-31T12:01:53Z", "path": "core/src/main/java/org/eclipse/hono/config/MapperEndpoint.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.config;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Configuration class for custom mappers.\n+ */\n+public class MapperEndpoint {\n+    private String host;\n+    private Integer port;\n+    private String uri;\n+\n+    /**\n+     * Gets the host name or IP address of this mapper.\n+     *\n+     * @return The host name.\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the host name or IP address of this mapper.\n+     *\n+     * @param host The host name or IP address.\n+     * @throws NullPointerException if host is {@code null}.\n+     */\n+    public void setHost(final String host) {", "originalCommit": "59d8c938de86b8c2c11a11c691d9f5d3d40431a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4MTk5OA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r401381998", "bodyText": "Doesn't work with the spring boot properties binding.", "author": "BobClaerhout", "createdAt": "2020-04-01T06:26:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1NjM2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/config/MapperEndpoint.java b/core/src/main/java/org/eclipse/hono/config/MapperEndpoint.java\nindex ffe898b4a..712e0bf9b 100644\n--- a/core/src/main/java/org/eclipse/hono/config/MapperEndpoint.java\n+++ b/core/src/main/java/org/eclipse/hono/config/MapperEndpoint.java\n\n@@ -18,7 +18,7 @@ import java.util.Objects;\n /**\n  * Configuration class for custom mappers.\n  */\n-public class MapperEndpoint {\n+public final class MapperEndpoint {\n     private String host;\n     private Integer port;\n     private String uri;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk1MzM2Ng==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400953366", "bodyText": "This seems to be a class that is only used within this package so I propose to declare it and its properties package private in order to prevent other code to start using an depending on it ...", "author": "sophokles73", "createdAt": "2020-03-31T14:21:42Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+public class MappedMessage {", "originalCommit": "59d8c938de86b8c2c11a11c691d9f5d3d40431a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\nindex 33b0f4687..ae13bec2d 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\n\n@@ -1,17 +1,106 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n package org.eclipse.hono.adapter.mqtt.impl;\n \n-import io.vertx.mqtt.messages.MqttPublishMessage;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.util.ResourceIdentifier;\n \n-public class MappedMessage {\n-    final public MqttContext ctx;\n-    final public ResourceIdentifier resource;\n-    final public MqttPublishMessage message;\n+import io.vertx.core.MultiMap;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n \n-    public MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message) {\n+/**\n+ * Structure to provide a mapped message.\n+ */\n+class MappedMessage {\n+    private final MqttContext ctx;\n+    private final ResourceIdentifier resource;\n+    private final MqttPublishMessage message;\n+    private final MultiMap mapperResponseHeaders;\n+    private final boolean mappedExternally;\n+\n+    private MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message,\n+                    final MultiMap mapperResponseHeaders, final boolean mappedExternally) {\n         this.ctx = ctx;\n         this.resource = resource;\n         this.message = message;\n+        this.mapperResponseHeaders = mapperResponseHeaders;\n+        this.mappedExternally = mappedExternally;\n+    }\n+\n+    /**\n+     * Creates a new mappedMessage which is actually not mapped by an external service.\n+     *  @param ctx The context used for this message\n+     * @param resource The resourceIdentifier used for this message\n+     * @param message The actual message with its payload\n+     * @param mapperResponseHeaders The headers returned from the mapper service\n+     */\n+    MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message, final MultiMap mapperResponseHeaders) {\n+        this(ctx, resource, message, mapperResponseHeaders, true);\n+    }\n+\n+    /**\n+     * Creates a new mappedMessage.\n+     *  @param ctx The context used for this message\n+     * @param resource The resourceIdentifier used for this message\n+     * @param message The actual message with its payload\n+     */\n+    MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message) {\n+        this(ctx, resource, message, null, false);\n+    }\n+        /**\n+         * Gets the context.\n+         *\n+         * @return the context\n+         */\n+    MqttContext getCtx() {\n+        return ctx;\n+    }\n+\n+    /**\n+     * Gets the resourceIdentifier.\n+     *\n+     * @return the resourceIdentifier\n+     */\n+    ResourceIdentifier getResource() {\n+        return resource;\n+    }\n+\n+    /**\n+     * Gets the message.\n+     *\n+     * @return the actual message\n+     */\n+    MqttPublishMessage getMessage() {\n+        return message;\n+    }\n+\n+    /**\n+     * Gets the headers returned by the mapper.\n+     *\n+     * @return headers returned from the mapper service\n+     */\n+\n+    public MultiMap getMapperResponseHeaders() {\n+        return mapperResponseHeaders;\n+    }\n+\n+    /**\n+     * Gets whether the message is mapped by an external service or not.\n+     *\n+     * @return true when mapped by external service.\n+     */\n+    public boolean isMappedByExternalService() {\n+        return mappedExternally;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk1NTI2OQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400955269", "bodyText": "this should probably go into its own method ...", "author": "sophokles73", "createdAt": "2020-03-31T14:24:02Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -96,4 +111,48 @@ protected String getTypeName() {\n         }\n         return result.future();\n     }\n+\n+    private Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,\n+                                 final MqttPublishMessage message) {\n+        return getRegistrationAssertion(targetAddress.getTenantId(), targetAddress.getResourceId(),\n+                ctx.authenticatedDevice(), ctx.getTracingContext()).compose(registratonInfo -> {\n+            final Promise<MappedMessage> result = Promise.promise();\n+            if (!registratonInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n+                result.complete(new MappedMessage(ctx, targetAddress, message));\n+                return result.future();\n+            }\n+            final String mapper = registratonInfo.getString(RegistrationConstants.FIELD_MAPPER);\n+            if (mapper.isBlank()) {\n+                result.complete(new MappedMessage(ctx, targetAddress, message));\n+                return result.future();\n+            }\n+            final HashMap<String, MapperEndpoint> mapperEndpoints = getConfig().getMapperEndpoints();\n+            if (!mapperEndpoints.containsKey(mapper)) {\n+                result.complete(new MappedMessage(ctx, targetAddress, message));\n+                return result.future();\n+            }\n+            final MapperEndpoint mapperEndpoint = mapperEndpoints.get(mapper);\n+            final WebClient webClient = WebClient.create(vertx);\n+            webClient.post(mapperEndpoint.getPort(), mapperEndpoint.getHost(), mapperEndpoint.getUri())\n+                    .sendBuffer(message.payload(), httpResponseAsyncResult -> {\n+                        if (httpResponseAsyncResult.succeeded()) {\n+                            final HttpResponse<Buffer> httpResponse = httpResponseAsyncResult.result();\n+                            final MqttPublishMessageImpl mqttPublishMessage = new MqttPublishMessageImpl(ctx.message().messageId(), ctx.message().qosLevel(),\n+                                    ctx.message().isDup(), ctx.message().isRetain(), ctx.message().topicName(),\n+                                    httpResponse.bodyAsBuffer().getByteBuf());\n+                            final MultiMap headers = httpResponse.headers();\n+                            String deviceId = targetAddress.getResourceId();\n+                            if (headers.contains(APP_PROPERTY_DEVICE_ID)){\n+                                deviceId = headers.get(APP_PROPERTY_DEVICE_ID);\n+                            }\n+                            result.complete(\n+                                    new MappedMessage(ctx, ResourceIdentifier.from(targetAddress,\n+                                            targetAddress.getTenantId(), deviceId), mqttPublishMessage)\n+                            );\n+                        }\n+                    });", "originalCommit": "59d8c938de86b8c2c11a11c691d9f5d3d40431a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\nindex c7db1e33c..0d39a2f0f 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n\n@@ -112,47 +123,7 @@ public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttP\n         return result.future();\n     }\n \n-    private Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,\n-                                 final MqttPublishMessage message) {\n-        return getRegistrationAssertion(targetAddress.getTenantId(), targetAddress.getResourceId(),\n-                ctx.authenticatedDevice(), ctx.getTracingContext()).compose(registratonInfo -> {\n-            final Promise<MappedMessage> result = Promise.promise();\n-            if (!registratonInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n-                result.complete(new MappedMessage(ctx, targetAddress, message));\n-                return result.future();\n-            }\n-            final String mapper = registratonInfo.getString(RegistrationConstants.FIELD_MAPPER);\n-            if (mapper.isBlank()) {\n-                result.complete(new MappedMessage(ctx, targetAddress, message));\n-                return result.future();\n-            }\n-            final HashMap<String, MapperEndpoint> mapperEndpoints = getConfig().getMapperEndpoints();\n-            if (!mapperEndpoints.containsKey(mapper)) {\n-                result.complete(new MappedMessage(ctx, targetAddress, message));\n-                return result.future();\n-            }\n-            final MapperEndpoint mapperEndpoint = mapperEndpoints.get(mapper);\n-            final WebClient webClient = WebClient.create(vertx);\n-            webClient.post(mapperEndpoint.getPort(), mapperEndpoint.getHost(), mapperEndpoint.getUri())\n-                    .sendBuffer(message.payload(), httpResponseAsyncResult -> {\n-                        if (httpResponseAsyncResult.succeeded()) {\n-                            final HttpResponse<Buffer> httpResponse = httpResponseAsyncResult.result();\n-                            final MqttPublishMessageImpl mqttPublishMessage = new MqttPublishMessageImpl(ctx.message().messageId(), ctx.message().qosLevel(),\n-                                    ctx.message().isDup(), ctx.message().isRetain(), ctx.message().topicName(),\n-                                    httpResponse.bodyAsBuffer().getByteBuf());\n-                            final MultiMap headers = httpResponse.headers();\n-                            String deviceId = targetAddress.getResourceId();\n-                            if (headers.contains(APP_PROPERTY_DEVICE_ID)){\n-                                deviceId = headers.get(APP_PROPERTY_DEVICE_ID);\n-                            }\n-                            result.complete(\n-                                    new MappedMessage(ctx, ResourceIdentifier.from(targetAddress,\n-                                            targetAddress.getTenantId(), deviceId), mqttPublishMessage)\n-                            );\n-                        }\n-                    });\n \n-            return result.future();\n-        });\n-    }\n+\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAyOTY5OA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r401029698", "bodyText": "remove the setters?", "author": "sophokles73", "createdAt": "2020-03-31T15:59:11Z", "path": "core/src/main/java/org/eclipse/hono/config/MapperEndpoint.java", "diffHunk": "@@ -79,4 +79,20 @@ public String getUri() {\n     public void setUri(final String uri) {\n         this.uri = Objects.requireNonNull(uri);\n     }\n+\n+    /**\n+     * Gets mapperEndpoint configuration object from the different configuration parts.\n+     *\n+     * @param host The host to connect to\n+     * @param port The port to connect to\n+     * @param uri The uri to use when requesting a mapping\n+     * @return the mapperEndpoint configuration\n+     */\n+    public static MapperEndpoint from(final String host, final int port, final String uri) {\n+        final MapperEndpoint ep = new MapperEndpoint();\n+        ep.host = host;\n+        ep.port = port;\n+        ep.uri = uri;\n+        return ep;\n+    }", "originalCommit": "a828b7aaa0d69dd0536d75902fd00c45ec182447", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4MjY5Ng==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r401382696", "bodyText": "Needed for spring boot properties binding.", "author": "BobClaerhout", "createdAt": "2020-04-01T06:28:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAyOTY5OA=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/config/MapperEndpoint.java b/core/src/main/java/org/eclipse/hono/config/MapperEndpoint.java\nindex ba8c81086..712e0bf9b 100644\n--- a/core/src/main/java/org/eclipse/hono/config/MapperEndpoint.java\n+++ b/core/src/main/java/org/eclipse/hono/config/MapperEndpoint.java\n\n@@ -81,12 +81,12 @@ public final class MapperEndpoint {\n     }\n \n     /**\n-     * Gets mapperEndpoint configuration object from the different configuration parts.\n+     * Generate a mapperEndpoint from the given parameters.\n      *\n-     * @param host The host to connect to\n-     * @param port The port to connect to\n-     * @param uri The uri to use when requesting a mapping\n-     * @return the mapperEndpoint configuration\n+     * @param host The host on which the mapper service is listening\n+     * @param port The port on which the mapper service is listening\n+     * @param uri The uri on which the mapper service is listening\n+     * @return The constructed mapperEndpoint\n      */\n     public static MapperEndpoint from(final String host, final int port, final String uri) {\n         final MapperEndpoint ep = new MapperEndpoint();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAyOTkxNw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r401029917", "bodyText": "final ?", "author": "sophokles73", "createdAt": "2020-03-31T15:59:29Z", "path": "core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java", "diffHunk": "@@ -254,4 +243,17 @@ public void setTenantIdleTimeout(final Duration tenantIdleTimeout) {\n     public final void setMapperEndpoints(final HashMap<String, MapperEndpoint> mapperEndpoints) {\n         this.mapperEndpoints = Objects.requireNonNull(mapperEndpoints);\n     }\n+\n+    /**\n+     * Gets the configured mapper for the given key.\n+     *\n+     * @param key The key to identify the mapper\n+     * @return the mapperEndpoint. If not found, will return {@code null}.\n+     */\n+    public MapperEndpoint getMapperEndpoint(final String key) {", "originalCommit": "a828b7aaa0d69dd0536d75902fd00c45ec182447", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java b/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\nindex 08566a363..1c559c310 100644\n--- a/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\n+++ b/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\n\n@@ -250,10 +250,7 @@ public class ProtocolAdapterProperties extends ServiceConfigProperties {\n      * @param key The key to identify the mapper\n      * @return the mapperEndpoint. If not found, will return {@code null}.\n      */\n-    public MapperEndpoint getMapperEndpoint(final String key) {\n-        if (!mapperEndpoints.containsKey(key)) {\n-            return null;\n-        }\n+    public final MapperEndpoint getMapperEndpoint(final String key) {\n         return mapperEndpoints.get(key);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAzMTU3Nw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r401031577", "bodyText": "I would assume that this can be safely removed, can't it?", "author": "sophokles73", "createdAt": "2020-03-31T16:01:49Z", "path": "core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java", "diffHunk": "@@ -254,4 +243,17 @@ public void setTenantIdleTimeout(final Duration tenantIdleTimeout) {\n     public final void setMapperEndpoints(final HashMap<String, MapperEndpoint> mapperEndpoints) {\n         this.mapperEndpoints = Objects.requireNonNull(mapperEndpoints);\n     }\n+\n+    /**\n+     * Gets the configured mapper for the given key.\n+     *\n+     * @param key The key to identify the mapper\n+     * @return the mapperEndpoint. If not found, will return {@code null}.\n+     */\n+    public MapperEndpoint getMapperEndpoint(final String key) {\n+        if (!mapperEndpoints.containsKey(key)) {\n+            return null;\n+        }", "originalCommit": "a828b7aaa0d69dd0536d75902fd00c45ec182447", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4MzE4MA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r401383180", "bodyText": "If somebody configures a mapper on a device which doesn't exist we will get a keyNotFoundException if we ommit this check? Apart from the fact that you can catch that exception I rather not have an exception at all.", "author": "BobClaerhout", "createdAt": "2020-04-01T06:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAzMTU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4NzMzMA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r401387330", "bodyText": "If I am not mistaken then Map.get() returns null instead of throwing an exception if the map doesn't contain the given key ...", "author": "sophokles73", "createdAt": "2020-04-01T06:40:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAzMTU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4ODgxMw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r401388813", "bodyText": "You're right. Habit from another language :)", "author": "BobClaerhout", "createdAt": "2020-04-01T06:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAzMTU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java b/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\nindex 08566a363..1c559c310 100644\n--- a/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\n+++ b/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\n\n@@ -250,10 +250,7 @@ public class ProtocolAdapterProperties extends ServiceConfigProperties {\n      * @param key The key to identify the mapper\n      * @return the mapperEndpoint. If not found, will return {@code null}.\n      */\n-    public MapperEndpoint getMapperEndpoint(final String key) {\n-        if (!mapperEndpoints.containsKey(key)) {\n-            return null;\n-        }\n+    public final MapperEndpoint getMapperEndpoint(final String key) {\n         return mapperEndpoints.get(key);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NjI4OA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r401396288", "bodyText": "I'd rather have a single combination of qos and endpoint but have a real test instead of all combinations without any assertions.\nFor that, I guess the WebClient needs to be a field of the adapter so that we can easily use a mock in order to verify the adapter's interactions with it ...", "author": "sophokles73", "createdAt": "2020-04-01T07:02:38Z", "path": "adapters/mqtt-vertx/src/test/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapterTest.java", "diffHunk": "@@ -257,6 +257,47 @@ public void testMapTopicSupportsShortAndLongTopicNames(final VertxTestContext ct\n \n     }\n \n+    /**\n+     * Verifies that the adapter calls the mapper if configured. Also the updated payload and deviceId is checked.\n+     *\n+     * @param ctx The helper to use for running tests on vert.x.\n+     */\n+    @Test\n+    public void testMapperShouldUpdatePayloadAndDeviceId(final VertxTestContext ctx) {\n+        //TODO: change test to address mapping.\n+        givenAnAdapter();\n+\n+        MqttPublishMessage message = newMessage(MqttQoS.AT_LEAST_ONCE, EventConstants.EVENT_ENDPOINT);\n+        MqttContext context = newContext(message, null);\n+        adapter.mapTopic(context).setHandler(ctx.succeeding(address -> {\n+            ctx.verify(() -> assertThat(MetricsTags.EndpointType.fromString(address.getEndpoint())).isEqualTo(MetricsTags.EndpointType.EVENT));\n+        }));\n+\n+        message = newMessage(MqttQoS.AT_LEAST_ONCE, EventConstants.EVENT_ENDPOINT_SHORT);\n+        context = newContext(message, null);\n+        adapter.mapTopic(context).setHandler(ctx.succeeding(address -> {\n+            ctx.verify(() -> assertThat(MetricsTags.EndpointType.fromString(address.getEndpoint())).isEqualTo(MetricsTags.EndpointType.EVENT));\n+        }));\n+\n+        message = newMessage(MqttQoS.AT_LEAST_ONCE, TelemetryConstants.TELEMETRY_ENDPOINT);\n+        context = newContext(message, null);\n+        adapter.mapTopic(context).setHandler(ctx.succeeding(address -> {\n+            ctx.verify(() -> assertThat(MetricsTags.EndpointType.fromString(address.getEndpoint())).isEqualTo(MetricsTags.EndpointType.TELEMETRY));\n+        }));\n+\n+        message = newMessage(MqttQoS.AT_LEAST_ONCE, TelemetryConstants.TELEMETRY_ENDPOINT_SHORT);\n+        context = newContext(message, null);\n+        adapter.mapTopic(context).setHandler(ctx.succeeding(address -> {\n+            ctx.verify(() -> assertThat(MetricsTags.EndpointType.fromString(address.getEndpoint())).isEqualTo(MetricsTags.EndpointType.TELEMETRY));\n+        }));\n+\n+        message = newMessage(MqttQoS.AT_LEAST_ONCE, \"unknown\");\n+        context = newContext(message, null);\n+        adapter.mapTopic(context).setHandler(ctx.failing());\n+        ctx.completeNow();\n+", "originalCommit": "5368d97f73b63c15b0b7589eaaf6f2dfac5d3694", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQwODkwMw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r401408903", "bodyText": "I agree. Test was still todo though. Will do that today and will create a field for the web client indeed.", "author": "BobClaerhout", "createdAt": "2020-04-01T07:30:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NjI4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAyODU3MA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403028570", "bodyText": "I added a more effective test now.", "author": "BobClaerhout", "createdAt": "2020-04-03T14:03:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NjI4OA=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/adapters/mqtt-vertx/src/test/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapterTest.java b/adapters/mqtt-vertx/src/test/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapterTest.java\nindex 42b2f695b..3cf948287 100644\n--- a/adapters/mqtt-vertx/src/test/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapterTest.java\n+++ b/adapters/mqtt-vertx/src/test/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapterTest.java\n\n@@ -264,37 +313,43 @@ public class VertxBasedMqttProtocolAdapterTest {\n      */\n     @Test\n     public void testMapperShouldUpdatePayloadAndDeviceId(final VertxTestContext ctx) {\n-        //TODO: change test to address mapping.\n-        givenAnAdapter();\n-\n-        MqttPublishMessage message = newMessage(MqttQoS.AT_LEAST_ONCE, EventConstants.EVENT_ENDPOINT);\n-        MqttContext context = newContext(message, null);\n-        adapter.mapTopic(context).setHandler(ctx.succeeding(address -> {\n-            ctx.verify(() -> assertThat(MetricsTags.EndpointType.fromString(address.getEndpoint())).isEqualTo(MetricsTags.EndpointType.EVENT));\n-        }));\n-\n-        message = newMessage(MqttQoS.AT_LEAST_ONCE, EventConstants.EVENT_ENDPOINT_SHORT);\n-        context = newContext(message, null);\n-        adapter.mapTopic(context).setHandler(ctx.succeeding(address -> {\n-            ctx.verify(() -> assertThat(MetricsTags.EndpointType.fromString(address.getEndpoint())).isEqualTo(MetricsTags.EndpointType.EVENT));\n+        givenAnAdapterWithMapper();\n+        final MessageMapping messageMapping = new MessageMapping(mapperWebClient);\n+\n+        final ResourceIdentifier targetAddress = ResourceIdentifier.from(TelemetryConstants.TELEMETRY_ENDPOINT, TEST_TENANT_ID, TEST_DEVICE);\n+        final HttpRequest httpRequest = mock(HttpRequest.class);\n+        when(mapperWebClient.post(any(int.class), any(String.class), any(String.class))).thenReturn(httpRequest);\n+        when(httpRequest.putHeaders(any(MultiMap.class))).thenReturn(httpRequest);\n+        final AsyncResult asyncResult = mock(AsyncResult.class);\n+        when(asyncResult.succeeded()).thenReturn(true);\n+        final HttpResponse httpResponse = mock(HttpResponse.class);\n+        when(asyncResult.result()).thenReturn(httpResponse);\n+        final VertxHttpHeaders headers = new VertxHttpHeaders();\n+        final String newDeviceId = \"new-device\";\n+        headers.add(MessageHelper.APP_PROPERTY_DEVICE_ID, newDeviceId);\n+        when(httpResponse.headers()).thenReturn(headers);\n+        final Buffer changedBuffer = Buffer.buffer(\"changed\");\n+        when(httpResponse.bodyAsBuffer()).thenReturn(changedBuffer);\n+\n+        final MqttPublishMessage message = newMessage(MqttQoS.AT_LEAST_ONCE, EventConstants.EVENT_ENDPOINT);\n+        final MqttContext context = newContext(message, null);\n+        final MapperEndpoint mapperEndpoint = MapperEndpoint.from(\"host\", 1234, \"/uri\");\n+        messageMapping.mapMessageRequest(context, targetAddress, message, mapperEndpoint, headers).setHandler(ctx.succeeding(mappedMessage -> {\n         }));\n \n-        message = newMessage(MqttQoS.AT_LEAST_ONCE, TelemetryConstants.TELEMETRY_ENDPOINT);\n-        context = newContext(message, null);\n-        adapter.mapTopic(context).setHandler(ctx.succeeding(address -> {\n-            ctx.verify(() -> assertThat(MetricsTags.EndpointType.fromString(address.getEndpoint())).isEqualTo(MetricsTags.EndpointType.TELEMETRY));\n-        }));\n \n-        message = newMessage(MqttQoS.AT_LEAST_ONCE, TelemetryConstants.TELEMETRY_ENDPOINT_SHORT);\n-        context = newContext(message, null);\n-        adapter.mapTopic(context).setHandler(ctx.succeeding(address -> {\n-            ctx.verify(() -> assertThat(MetricsTags.EndpointType.fromString(address.getEndpoint())).isEqualTo(MetricsTags.EndpointType.TELEMETRY));\n-        }));\n+        final ArgumentCaptor<Handler<AsyncResult<HttpResponse<Buffer>>>> captor =\n+                ArgumentCaptor.forClass(Handler.class);\n+        Mockito.verify(httpRequest).sendBuffer(any(Buffer.class), captor.capture());\n+        final Handler<AsyncResult<HttpResponse<Buffer>>> handler = captor.getValue();\n \n-        message = newMessage(MqttQoS.AT_LEAST_ONCE, \"unknown\");\n-        context = newContext(message, null);\n-        adapter.mapTopic(context).setHandler(ctx.failing());\n+        handler.handle(asyncResult);\n         ctx.completeNow();\n+    }\n+\n+    private void givenAnAdapterWithMapper() {\n+        givenAnAdapter();\n+        mapperWebClient = mock(WebClient.class);\n \n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NzYxNA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r401397614", "bodyText": "please do not look up the key twice ...", "author": "sophokles73", "createdAt": "2020-04-01T07:05:47Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -343,6 +343,10 @@ private JsonArray convertObjectToJsonArray(final Object object) {\n                     if (!via.isEmpty()) {\n                         result.put(RegistrationConstants.FIELD_VIA, via);\n                     }\n+                    if (registrationInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n+                        result.put(RegistrationConstants.FIELD_MAPPER,\n+                                registrationInfo.getString(RegistrationConstants.FIELD_MAPPER));\n+                    }", "originalCommit": "5368d97f73b63c15b0b7589eaaf6f2dfac5d3694", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java b/services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java\nindex 518dd2482..06193a65a 100644\n--- a/services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java\n+++ b/services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java\n\n@@ -343,9 +355,9 @@ public abstract class AbstractRegistrationService implements RegistrationService\n                     if (!via.isEmpty()) {\n                         result.put(RegistrationConstants.FIELD_VIA, via);\n                     }\n-                    if (registrationInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n-                        result.put(RegistrationConstants.FIELD_MAPPER,\n-                                registrationInfo.getString(RegistrationConstants.FIELD_MAPPER));\n+                    final String mapper = registrationInfo.getString(RegistrationConstants.FIELD_MAPPER);\n+                    if (mapper != null) {\n+                        result.put(RegistrationConstants.FIELD_MAPPER, mapper);\n                     }\n                     final JsonObject defaults = registrationInfo.getJsonObject(RegistrationConstants.FIELD_PAYLOAD_DEFAULTS);\n                     if (defaults != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNTg4MA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r401725880", "bodyText": "this should be autowired and injected via Spring FMPOV", "author": "sophokles73", "createdAt": "2020-04-01T15:57:00Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -49,6 +52,23 @@ protected String getTypeName() {\n         return Constants.PROTOCOL_ADAPTER_TYPE_MQTT;\n     }\n \n+    private WebClient getWebClient() {\n+        if (webClient == null) {\n+            webClient = WebClient.create(vertx);\n+        }\n+        return webClient;\n+    }\n+\n+    /**\n+     * Sets the vertx webClient to use when mapping payload.\n+     *\n+     * @param webClient the webClient to set\n+     */\n+    public void setWebClient(final WebClient webClient) {", "originalCommit": "0b245ad3cfeeeae962f1596443a24738e331ffd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNzI3OQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r401727279", "bodyText": "In fact, I believe that it makes a lot of sense to create a dedicated interface for message mapping that hides away the specifics of how the mapper is invoked (HTTP in this case) and which also encapsulates the configuration of the supported mapper endpoints. WDYT?", "author": "sophokles73", "createdAt": "2020-04-01T15:58:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNTg4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAyODEyOA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403028128", "bodyText": "I agree. I've created another class for this. However, I can't seem to autowire the WebClient in it. Can you point me to where I should configure this?", "author": "BobClaerhout", "createdAt": "2020-04-03T14:03:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNTg4MA=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\nindex d27793032..0d39a2f0f 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n\n@@ -52,23 +45,16 @@ public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttP\n         return Constants.PROTOCOL_ADAPTER_TYPE_MQTT;\n     }\n \n-    private WebClient getWebClient() {\n-        if (webClient == null) {\n-            webClient = WebClient.create(vertx);\n-        }\n-        return webClient;\n-    }\n-\n     /**\n-     * Sets the vertx webClient to use when mapping payload.\n+     * Sets the messageMapping for this adapter.\n      *\n-     * @param webClient the webClient to set\n+     * @param messageMapping the messageMapping\n      */\n-    public void setWebClient(final WebClient webClient) {\n-        this.webClient = webClient;\n+    @Autowired\n+    public void setMessageMapping(final MessageMapping messageMapping) {\n+        this.messageMapping = messageMapping;\n     }\n \n-\n     /**\n      * {@inheritDoc}\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MjM3Nw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r402272377", "bodyText": "what is this good for?", "author": "sophokles73", "createdAt": "2020-04-02T12:25:33Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -147,28 +148,33 @@ public void setWebClient(final WebClient webClient) {\n                 return result.future();\n             }\n \n-            return mapMessageRequest(ctx, targetAddress, message, mapperEndpoint);\n+            final VertxHttpHeaders headers = new VertxHttpHeaders();\n+            registratonInfo.iterator().forEachRemaining(stringObjectEntry -> headers.add(stringObjectEntry.getKey(),\n+                    stringObjectEntry.getValue()));\n+", "originalCommit": "a5877f5d38e95794a65c65686232fd0aa101a06e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAyNzQ5OA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403027498", "bodyText": "It allows for some configuration in the defaults to be passed on to the mapper. I think this can be useful if you're writing your own mapping.", "author": "BobClaerhout", "createdAt": "2020-04-03T14:02:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MjM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5MjA5MQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403092091", "bodyText": "The defaults have well defined semantics and I would rather not encourage people to abuse them for something else. If we need to be able to forward properties that have been registered for the device then these should probably come from the ext properties ...", "author": "sophokles73", "createdAt": "2020-04-03T15:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MjM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkwNTEzMw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403905133", "bodyText": "Ok. We are currently using those defaults to configure our custom mapping after the adapters because the ext properties are not passed on.\nWe are coming back to the discussion on Gitter... Also the reason why I asked you on Gitter. Can we just pass on all ext properties from now on?", "author": "BobClaerhout", "createdAt": "2020-04-06T08:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MjM3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\nindex d8b43d5be..0d39a2f0f 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n\n@@ -127,57 +123,7 @@ public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttP\n         return result.future();\n     }\n \n-    Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,\n-                                             final MqttPublishMessage message) {\n-        return getRegistrationAssertion(targetAddress.getTenantId(), targetAddress.getResourceId(),\n-                ctx.authenticatedDevice(), ctx.getTracingContext()).compose(registratonInfo -> {\n-            final Promise<MappedMessage> result = Promise.promise();\n-            if (!registratonInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n-                result.complete(new MappedMessage(ctx, targetAddress, message));\n-                return result.future();\n-            }\n-            final String mapper = registratonInfo.getString(RegistrationConstants.FIELD_MAPPER);\n-            if (mapper.isBlank()) {\n-                result.complete(new MappedMessage(ctx, targetAddress, message));\n-                return result.future();\n-            }\n-\n-            final MapperEndpoint mapperEndpoint = getConfig().getMapperEndpoint(mapper);\n-            if (mapperEndpoint == null) {\n-                result.complete(new MappedMessage(ctx, targetAddress, message));\n-                return result.future();\n-            }\n-\n-            final VertxHttpHeaders headers = new VertxHttpHeaders();\n-            registratonInfo.iterator().forEachRemaining(stringObjectEntry -> headers.add(stringObjectEntry.getKey(),\n-                    stringObjectEntry.getValue()));\n-\n-            return mapMessageRequest(ctx, targetAddress, message, mapperEndpoint, headers);\n-        });\n-    }\n \n-    Future<MappedMessage> mapMessageRequest(final MqttContext ctx, final ResourceIdentifier targetAddress,\n-                                            final MqttPublishMessage message, final MapperEndpoint mapperEndpoint, final VertxHttpHeaders headers) {\n-        final Promise<MappedMessage> result = Promise.promise();\n-        getWebClient().post(mapperEndpoint.getPort(), mapperEndpoint.getHost(), mapperEndpoint.getUri())\n-                .putHeaders(headers)\n-                .sendBuffer(message.payload(), httpResponseAsyncResult -> {\n-                    if (httpResponseAsyncResult.succeeded()) {\n-                        final HttpResponse<Buffer> httpResponse = httpResponseAsyncResult.result();\n-                        final MqttPublishMessageImpl mqttPublishMessage = new MqttPublishMessageImpl(ctx.message().messageId(), ctx.message().qosLevel(),\n-                                ctx.message().isDup(), ctx.message().isRetain(), ctx.message().topicName(),\n-                                httpResponse.bodyAsBuffer().getByteBuf());\n-                        final MultiMap responseHeaders = httpResponse.headers();\n-                        String deviceId = targetAddress.getResourceId();\n-                        if (headers.contains(MessageHelper.APP_PROPERTY_DEVICE_ID)) {\n-                            deviceId = headers.get(MessageHelper.APP_PROPERTY_DEVICE_ID);\n-                        }\n-                        result.complete(\n-                                new MappedMessage(ctx, ResourceIdentifier.from(targetAddress,\n-                                        targetAddress.getTenantId(), deviceId), mqttPublishMessage, responseHeaders)\n-                        );\n-                    }\n-                });\n-        return result.future();\n-    }\n+\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5MzM5Nw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403093397", "bodyText": "we don't need this FMPOV", "author": "sophokles73", "createdAt": "2020-04-03T15:38:21Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component.\n+ */\n+@Component\n+public class MessageMapping {\n+\n+    private WebClient webClient;\n+\n+    private WebClient getWebClient() {\n+        if (webClient == null) {\n+            webClient = WebClient.create(null);\n+        }\n+        return webClient;\n+    }", "originalCommit": "d6c6896d27cc53470db15fdb75d61ca3c7db947b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4MzI5MA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403983290", "bodyText": "Yes, removed", "author": "BobClaerhout", "createdAt": "2020-04-06T10:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5MzM5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\nindex 6e882a7aa..27129e007 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n\n@@ -19,8 +19,6 @@ import org.eclipse.hono.config.MapperEndpoint;\n import org.eclipse.hono.util.MessageHelper;\n import org.eclipse.hono.util.RegistrationConstants;\n import org.eclipse.hono.util.ResourceIdentifier;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n import io.vertx.core.Future;\n import io.vertx.core.MultiMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5MzgzOA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403093838", "bodyText": "IMHO we should inject this via the class' constructor so we can be sure that it will always be set.", "author": "sophokles73", "createdAt": "2020-04-03T15:38:54Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component.\n+ */\n+@Component\n+public class MessageMapping {\n+\n+    private WebClient webClient;\n+\n+    private WebClient getWebClient() {\n+        if (webClient == null) {\n+            webClient = WebClient.create(null);\n+        }\n+        return webClient;\n+    }\n+\n+    /**\n+     * Sets the vertx webClient to use when mapping payload.\n+     *\n+     * @param webClient the webClient to set\n+     */\n+    @Autowired\n+    public void setWebClient(final WebClient webClient) {\n+        this.webClient = webClient;\n+    }", "originalCommit": "d6c6896d27cc53470db15fdb75d61ca3c7db947b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4MzE5Ng==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403983196", "bodyText": "Done", "author": "BobClaerhout", "createdAt": "2020-04-06T10:21:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5MzgzOA=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\nindex 6e882a7aa..27129e007 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n\n@@ -19,8 +19,6 @@ import org.eclipse.hono.config.MapperEndpoint;\n import org.eclipse.hono.util.MessageHelper;\n import org.eclipse.hono.util.RegistrationConstants;\n import org.eclipse.hono.util.ResourceIdentifier;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n import io.vertx.core.Future;\n import io.vertx.core.MultiMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NDA1Mw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403094053", "bodyText": "final?", "author": "sophokles73", "createdAt": "2020-04-03T15:39:12Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component.\n+ */\n+@Component\n+public class MessageMapping {", "originalCommit": "d6c6896d27cc53470db15fdb75d61ca3c7db947b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4MzkyMw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403983923", "bodyText": "Done", "author": "BobClaerhout", "createdAt": "2020-04-06T10:23:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NDA1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\nindex 6e882a7aa..27129e007 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n\n@@ -19,8 +19,6 @@ import org.eclipse.hono.config.MapperEndpoint;\n import org.eclipse.hono.util.MessageHelper;\n import org.eclipse.hono.util.RegistrationConstants;\n import org.eclipse.hono.util.ResourceIdentifier;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n import io.vertx.core.Future;\n import io.vertx.core.MultiMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NTA0NQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403095045", "bodyText": "I'd rather not annotate this but instead create an instance of it in the Config class", "author": "sophokles73", "createdAt": "2020-04-03T15:40:42Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component.\n+ */\n+@Component", "originalCommit": "d6c6896d27cc53470db15fdb75d61ca3c7db947b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4MzQxOQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403983419", "bodyText": "Ok, changed.", "author": "BobClaerhout", "createdAt": "2020-04-06T10:22:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NTA0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\nindex 6e882a7aa..27129e007 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n\n@@ -19,8 +19,6 @@ import org.eclipse.hono.config.MapperEndpoint;\n import org.eclipse.hono.util.MessageHelper;\n import org.eclipse.hono.util.RegistrationConstants;\n import org.eclipse.hono.util.ResourceIdentifier;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n import io.vertx.core.Future;\n import io.vertx.core.MultiMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NTEzNQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403095135", "bodyText": "public ?\ncould also use a proper JavaDoc comment", "author": "sophokles73", "createdAt": "2020-04-03T15:40:51Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component.\n+ */\n+@Component\n+public class MessageMapping {\n+\n+    private WebClient webClient;\n+\n+    private WebClient getWebClient() {\n+        if (webClient == null) {\n+            webClient = WebClient.create(null);\n+        }\n+        return webClient;\n+    }\n+\n+    /**\n+     * Sets the vertx webClient to use when mapping payload.\n+     *\n+     * @param webClient the webClient to set\n+     */\n+    @Autowired\n+    public void setWebClient(final WebClient webClient) {\n+        this.webClient = webClient;\n+    }\n+\n+    Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,", "originalCommit": "d6c6896d27cc53470db15fdb75d61ca3c7db947b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4MzUzMw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403983533", "bodyText": "Fixed that", "author": "BobClaerhout", "createdAt": "2020-04-06T10:22:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NTEzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\nindex 6e882a7aa..27129e007 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n\n@@ -19,8 +19,6 @@ import org.eclipse.hono.config.MapperEndpoint;\n import org.eclipse.hono.util.MessageHelper;\n import org.eclipse.hono.util.RegistrationConstants;\n import org.eclipse.hono.util.ResourceIdentifier;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n import io.vertx.core.Future;\n import io.vertx.core.MultiMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NTI3OA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403095278", "bodyText": "private?", "author": "sophokles73", "createdAt": "2020-04-03T15:41:06Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component.\n+ */\n+@Component\n+public class MessageMapping {\n+\n+    private WebClient webClient;\n+\n+    private WebClient getWebClient() {\n+        if (webClient == null) {\n+            webClient = WebClient.create(null);\n+        }\n+        return webClient;\n+    }\n+\n+    /**\n+     * Sets the vertx webClient to use when mapping payload.\n+     *\n+     * @param webClient the webClient to set\n+     */\n+    @Autowired\n+    public void setWebClient(final WebClient webClient) {\n+        this.webClient = webClient;\n+    }\n+\n+    Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,\n+                                     final MqttPublishMessage message, final JsonObject registratonInfo, final MqttProtocolAdapterProperties config) {\n+        final Promise<MappedMessage> result = Promise.promise();\n+        if (!registratonInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+        final String mapper = registratonInfo.getString(RegistrationConstants.FIELD_MAPPER);\n+        if (mapper.isBlank()) {\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+\n+        final MapperEndpoint mapperEndpoint = config.getMapperEndpoint(mapper);\n+        if (mapperEndpoint == null) {\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+\n+        final VertxHttpHeaders headers = new VertxHttpHeaders();\n+        registratonInfo.iterator().forEachRemaining(stringObjectEntry -> headers.add(stringObjectEntry.getKey(),\n+                stringObjectEntry.getValue()));\n+\n+        return mapMessageRequest(ctx, targetAddress, message, mapperEndpoint, headers);\n+    }\n+\n+    Future<MappedMessage> mapMessageRequest(final MqttContext ctx, final ResourceIdentifier targetAddress,", "originalCommit": "d6c6896d27cc53470db15fdb75d61ca3c7db947b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1NTExOA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403955118", "bodyText": "package-private for testing", "author": "BobClaerhout", "createdAt": "2020-04-06T09:34:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NTI3OA=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\nindex 6e882a7aa..27129e007 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n\n@@ -19,8 +19,6 @@ import org.eclipse.hono.config.MapperEndpoint;\n import org.eclipse.hono.util.MessageHelper;\n import org.eclipse.hono.util.RegistrationConstants;\n import org.eclipse.hono.util.ResourceIdentifier;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n import io.vertx.core.Future;\n import io.vertx.core.MultiMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NTc2MQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403095761", "bodyText": "private", "author": "sophokles73", "createdAt": "2020-04-03T15:41:58Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -19,29 +19,21 @@\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n import org.eclipse.hono.client.ClientErrorException;\n-import org.eclipse.hono.config.MapperEndpoint;\n import org.eclipse.hono.service.metric.MetricsTags;\n import org.eclipse.hono.util.Constants;\n-import org.eclipse.hono.util.MessageHelper;\n-import org.eclipse.hono.util.RegistrationConstants;\n import org.eclipse.hono.util.ResourceIdentifier;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n import io.netty.handler.codec.mqtt.MqttQoS;\n import io.vertx.core.Future;\n-import io.vertx.core.MultiMap;\n import io.vertx.core.Promise;\n-import io.vertx.core.buffer.Buffer;\n-import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n-import io.vertx.ext.web.client.HttpResponse;\n-import io.vertx.ext.web.client.WebClient;\n import io.vertx.mqtt.messages.MqttPublishMessage;\n-import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n /**\n  * A Vert.x based Hono protocol adapter for publishing messages to Hono's Telemetry and Event APIs using MQTT.\n  */\n public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttProtocolAdapter<MqttProtocolAdapterProperties> {\n-\n-    private WebClient webClient;\n+    MessageMapping messageMapping;", "originalCommit": "d6c6896d27cc53470db15fdb75d61ca3c7db947b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4MzYxMg==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403983612", "bodyText": "done", "author": "BobClaerhout", "createdAt": "2020-04-06T10:22:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NTc2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\nindex 19df6538e..0d39a2f0f 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n\n@@ -33,7 +33,7 @@ import io.vertx.mqtt.messages.MqttPublishMessage;\n  * A Vert.x based Hono protocol adapter for publishing messages to Hono's Telemetry and Event APIs using MQTT.\n  */\n public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttProtocolAdapter<MqttProtocolAdapterProperties> {\n-    MessageMapping messageMapping;\n+    private MessageMapping messageMapping;\n \n     /**\n      * {@inheritDoc}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NjYzNg==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403096636", "bodyText": "what if no MessageMapping instance has been set?", "author": "sophokles73", "createdAt": "2020-04-03T15:43:18Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -88,6 +73,12 @@ public void setWebClient(final WebClient webClient) {\n                 });\n     }\n \n+    private Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,\n+                                 final MqttPublishMessage message) {\n+        return getRegistrationAssertion(targetAddress.getTenantId(), targetAddress.getResourceId(),\n+                ctx.authenticatedDevice(), ctx.getTracingContext()).compose(registratonInfo -> messageMapping.mapMessage(ctx, targetAddress, message, registratonInfo, getConfig()));", "originalCommit": "d6c6896d27cc53470db15fdb75d61ca3c7db947b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4Mzc2MA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403983760", "bodyText": "added a check", "author": "BobClaerhout", "createdAt": "2020-04-06T10:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NjYzNg=="}], "type": "inlineReview", "revised_code": {"commit": "c5a7f8e67b04119aae27f0d297413bdad956e507", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\nindex 19df6538e..0d39a2f0f 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n\n@@ -75,6 +75,11 @@ public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttP\n \n     private Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,\n                                  final MqttPublishMessage message) {\n+        if (messageMapping == null) {\n+            final Promise<MappedMessage> result = Promise.promise();\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n         return getRegistrationAssertion(targetAddress.getTenantId(), targetAddress.getResourceId(),\n                 ctx.authenticatedDevice(), ctx.getTracingContext()).compose(registratonInfo -> messageMapping.mapMessage(ctx, targetAddress, message, registratonInfo, getConfig()));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMwNDc1Mw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r405304753", "bodyText": "it looks like the result will never be completed if the HTTP request fails ...", "author": "sophokles73", "createdAt": "2020-04-08T07:11:38Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -87,7 +86,7 @@ public void setWebClient(final WebClient webClient) {\n     Future<MappedMessage> mapMessageRequest(final MqttContext ctx, final ResourceIdentifier targetAddress,\n                                             final MqttPublishMessage message, final MapperEndpoint mapperEndpoint, final VertxHttpHeaders headers) {\n         final Promise<MappedMessage> result = Promise.promise();\n-        getWebClient().post(mapperEndpoint.getPort(), mapperEndpoint.getHost(), mapperEndpoint.getUri())\n+        webClient.post(mapperEndpoint.getPort(), mapperEndpoint.getHost(), mapperEndpoint.getUri())", "originalCommit": "46a8a6df37e2b5223fa86a894fbbd9e9adc59a5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ1NTI0MA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r411455240", "bodyText": "good catch. It should now", "author": "BobClaerhout", "createdAt": "2020-04-20T15:07:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMwNDc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d4b08994beb81813efdda829aeedaa9a1eeefcd1", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\nindex 27129e007..d8fbf7611 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n\n@@ -88,22 +88,27 @@ public final class MessageMapping {\n         final Promise<MappedMessage> result = Promise.promise();\n         webClient.post(mapperEndpoint.getPort(), mapperEndpoint.getHost(), mapperEndpoint.getUri())\n                 .putHeaders(headers)\n+                .ssl(mapperEndpoint.ssl)\n                 .sendBuffer(message.payload(), httpResponseAsyncResult -> {\n                     if (httpResponseAsyncResult.succeeded()) {\n                         final HttpResponse<Buffer> httpResponse = httpResponseAsyncResult.result();\n-                        final MqttPublishMessageImpl mqttPublishMessage = new MqttPublishMessageImpl(ctx.message().messageId(), ctx.message().qosLevel(),\n-                                ctx.message().isDup(), ctx.message().isRetain(), ctx.message().topicName(),\n-                                httpResponse.bodyAsBuffer().getByteBuf());\n-                        final MultiMap responseHeaders = httpResponse.headers();\n-                        String deviceId = targetAddress.getResourceId();\n-                        if (headers.contains(MessageHelper.APP_PROPERTY_DEVICE_ID)) {\n-                            deviceId = headers.get(MessageHelper.APP_PROPERTY_DEVICE_ID);\n+                        if (httpResponse.statusCode() == 200) {\n+                            final MqttPublishMessageImpl mqttPublishMessage = new MqttPublishMessageImpl(ctx.message().messageId(), ctx.message().qosLevel(),\n+                                    ctx.message().isDup(), ctx.message().isRetain(), ctx.message().topicName(),\n+                                    httpResponse.bodyAsBuffer().getByteBuf());\n+                            final MultiMap responseHeaders = httpResponse.headers();\n+                            String deviceId = targetAddress.getResourceId();\n+                            if (headers.contains(MessageHelper.APP_PROPERTY_DEVICE_ID)) {\n+                                deviceId = headers.get(MessageHelper.APP_PROPERTY_DEVICE_ID);\n+                            }\n+                            result.complete(\n+                                    new MappedMessage(ctx, ResourceIdentifier.from(targetAddress,\n+                                            targetAddress.getTenantId(), deviceId), mqttPublishMessage, responseHeaders)\n+                            );\n+                            return;\n                         }\n-                        result.complete(\n-                                new MappedMessage(ctx, ResourceIdentifier.from(targetAddress,\n-                                        targetAddress.getTenantId(), deviceId), mqttPublishMessage, responseHeaders)\n-                        );\n                     }\n+                    result.complete(new MappedMessage(ctx, targetAddress, message));\n                 });\n         return result.future();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMwNjg1OQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r405306859", "bodyText": "is the MessageMapping bean required or not? In the Confiugration you create the bean so it will get injected. The setMessageMapping method's @Autowired annotation also requires a mapping to be injected (otherwise it should be @Autowired(required = false). That setter should also throw a NullPointerException if the given mapping is null ...", "author": "sophokles73", "createdAt": "2020-04-08T07:15:59Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -75,6 +75,11 @@ public void setMessageMapping(final MessageMapping messageMapping) {\n \n     private Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,\n                                  final MqttPublishMessage message) {\n+        if (messageMapping == null) {", "originalCommit": "46a8a6df37e2b5223fa86a894fbbd9e9adc59a5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4b08994beb81813efdda829aeedaa9a1eeefcd1", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\nindex 0d39a2f0f..7cb4d9c88 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n\n@@ -75,11 +78,6 @@ public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttP\n \n     private Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,\n                                  final MqttPublishMessage message) {\n-        if (messageMapping == null) {\n-            final Promise<MappedMessage> result = Promise.promise();\n-            result.complete(new MappedMessage(ctx, targetAddress, message));\n-            return result.future();\n-        }\n         return getRegistrationAssertion(targetAddress.getTenantId(), targetAddress.getResourceId(),\n                 ctx.authenticatedDevice(), ctx.getTracingContext()).compose(registratonInfo -> messageMapping.mapMessage(ctx, targetAddress, message, registratonInfo, getConfig()));\n     }\n"}}, {"oid": "c5a7f8e67b04119aae27f0d297413bdad956e507", "url": "https://github.com/eclipse/hono/commit/c5a7f8e67b04119aae27f0d297413bdad956e507", "message": "initial commit custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-04-20T14:52:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk1MzIyMg==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r411953222", "bodyText": "this probably deserves a (debug) log statement?", "author": "sophokles73", "createdAt": "2020-04-21T07:47:53Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -103,6 +103,8 @@ public MessageMapping(final WebClient webClient) {\n                                 new MappedMessage(ctx, ResourceIdentifier.from(targetAddress,\n                                         targetAddress.getTenantId(), deviceId), mqttPublishMessage, responseHeaders)\n                         );\n+                    } else {\n+                        result.complete(new MappedMessage(ctx, targetAddress, message));", "originalCommit": "c9a1c5b67e4da736f1352a4d052c2f37906e4bd4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4b08994beb81813efdda829aeedaa9a1eeefcd1", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\nindex 4fe0ae107..d8fbf7611 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n\n@@ -88,24 +88,27 @@ public final class MessageMapping {\n         final Promise<MappedMessage> result = Promise.promise();\n         webClient.post(mapperEndpoint.getPort(), mapperEndpoint.getHost(), mapperEndpoint.getUri())\n                 .putHeaders(headers)\n+                .ssl(mapperEndpoint.ssl)\n                 .sendBuffer(message.payload(), httpResponseAsyncResult -> {\n                     if (httpResponseAsyncResult.succeeded()) {\n                         final HttpResponse<Buffer> httpResponse = httpResponseAsyncResult.result();\n-                        final MqttPublishMessageImpl mqttPublishMessage = new MqttPublishMessageImpl(ctx.message().messageId(), ctx.message().qosLevel(),\n-                                ctx.message().isDup(), ctx.message().isRetain(), ctx.message().topicName(),\n-                                httpResponse.bodyAsBuffer().getByteBuf());\n-                        final MultiMap responseHeaders = httpResponse.headers();\n-                        String deviceId = targetAddress.getResourceId();\n-                        if (headers.contains(MessageHelper.APP_PROPERTY_DEVICE_ID)) {\n-                            deviceId = headers.get(MessageHelper.APP_PROPERTY_DEVICE_ID);\n+                        if (httpResponse.statusCode() == 200) {\n+                            final MqttPublishMessageImpl mqttPublishMessage = new MqttPublishMessageImpl(ctx.message().messageId(), ctx.message().qosLevel(),\n+                                    ctx.message().isDup(), ctx.message().isRetain(), ctx.message().topicName(),\n+                                    httpResponse.bodyAsBuffer().getByteBuf());\n+                            final MultiMap responseHeaders = httpResponse.headers();\n+                            String deviceId = targetAddress.getResourceId();\n+                            if (headers.contains(MessageHelper.APP_PROPERTY_DEVICE_ID)) {\n+                                deviceId = headers.get(MessageHelper.APP_PROPERTY_DEVICE_ID);\n+                            }\n+                            result.complete(\n+                                    new MappedMessage(ctx, ResourceIdentifier.from(targetAddress,\n+                                            targetAddress.getTenantId(), deviceId), mqttPublishMessage, responseHeaders)\n+                            );\n+                            return;\n                         }\n-                        result.complete(\n-                                new MappedMessage(ctx, ResourceIdentifier.from(targetAddress,\n-                                        targetAddress.getTenantId(), deviceId), mqttPublishMessage, responseHeaders)\n-                        );\n-                    } else {\n-                        result.complete(new MappedMessage(ctx, targetAddress, message));\n                     }\n+                    result.complete(new MappedMessage(ctx, targetAddress, message));\n                 });\n         return result.future();\n     }\n"}}, {"oid": "d4b08994beb81813efdda829aeedaa9a1eeefcd1", "url": "https://github.com/eclipse/hono/commit/d4b08994beb81813efdda829aeedaa9a1eeefcd1", "message": "add extra check on statuscode and configurable ssl\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-04-21T13:04:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMDc2Ng==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r412700766", "bodyText": "formatting", "author": "sophokles73", "createdAt": "2020-04-22T06:20:12Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+\n+/**\n+ * Structure to provide a mapped message.\n+ */\n+class MappedMessage {\n+    private final MqttContext ctx;\n+    private final ResourceIdentifier resource;\n+    private final MqttPublishMessage message;\n+    private final MultiMap mapperResponseHeaders;\n+    private final boolean mappedExternally;\n+\n+    private MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message,\n+                    final MultiMap mapperResponseHeaders, final boolean mappedExternally) {\n+        this.ctx = ctx;\n+        this.resource = resource;\n+        this.message = message;\n+        this.mapperResponseHeaders = mapperResponseHeaders;\n+        this.mappedExternally = mappedExternally;\n+    }\n+\n+    /**\n+     * Creates a new mappedMessage which is actually not mapped by an external service.\n+     *  @param ctx The context used for this message\n+     * @param resource The resourceIdentifier used for this message", "originalCommit": "d4b08994beb81813efdda829aeedaa9a1eeefcd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6120e090899a2291a54856ae38c745ce2f9eea3b", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\nindex ae13bec2d..f8e3764f4 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\n\n@@ -16,7 +16,6 @@ package org.eclipse.hono.adapter.mqtt.impl;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.util.ResourceIdentifier;\n \n-import io.vertx.core.MultiMap;\n import io.vertx.mqtt.messages.MqttPublishMessage;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMDgzMg==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r412700832", "bodyText": "formatting", "author": "sophokles73", "createdAt": "2020-04-22T06:20:20Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+\n+/**\n+ * Structure to provide a mapped message.\n+ */\n+class MappedMessage {\n+    private final MqttContext ctx;\n+    private final ResourceIdentifier resource;\n+    private final MqttPublishMessage message;\n+    private final MultiMap mapperResponseHeaders;\n+    private final boolean mappedExternally;\n+\n+    private MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message,\n+                    final MultiMap mapperResponseHeaders, final boolean mappedExternally) {\n+        this.ctx = ctx;\n+        this.resource = resource;\n+        this.message = message;\n+        this.mapperResponseHeaders = mapperResponseHeaders;\n+        this.mappedExternally = mappedExternally;\n+    }\n+\n+    /**\n+     * Creates a new mappedMessage which is actually not mapped by an external service.\n+     *  @param ctx The context used for this message\n+     * @param resource The resourceIdentifier used for this message\n+     * @param message The actual message with its payload\n+     * @param mapperResponseHeaders The headers returned from the mapper service\n+     */\n+    MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message, final MultiMap mapperResponseHeaders) {\n+        this(ctx, resource, message, mapperResponseHeaders, true);\n+    }\n+\n+    /**\n+     * Creates a new mappedMessage.\n+     *  @param ctx The context used for this message", "originalCommit": "d4b08994beb81813efdda829aeedaa9a1eeefcd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6120e090899a2291a54856ae38c745ce2f9eea3b", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\nindex ae13bec2d..f8e3764f4 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\n\n@@ -16,7 +16,6 @@ package org.eclipse.hono.adapter.mqtt.impl;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.util.ResourceIdentifier;\n \n-import io.vertx.core.MultiMap;\n import io.vertx.mqtt.messages.MqttPublishMessage;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMTAwMg==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r412701002", "bodyText": "formatting", "author": "sophokles73", "createdAt": "2020-04-22T06:20:44Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+\n+/**\n+ * Structure to provide a mapped message.\n+ */\n+class MappedMessage {\n+    private final MqttContext ctx;\n+    private final ResourceIdentifier resource;\n+    private final MqttPublishMessage message;\n+    private final MultiMap mapperResponseHeaders;\n+    private final boolean mappedExternally;\n+\n+    private MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message,\n+                    final MultiMap mapperResponseHeaders, final boolean mappedExternally) {\n+        this.ctx = ctx;\n+        this.resource = resource;\n+        this.message = message;\n+        this.mapperResponseHeaders = mapperResponseHeaders;\n+        this.mappedExternally = mappedExternally;\n+    }\n+\n+    /**\n+     * Creates a new mappedMessage which is actually not mapped by an external service.\n+     *  @param ctx The context used for this message\n+     * @param resource The resourceIdentifier used for this message\n+     * @param message The actual message with its payload\n+     * @param mapperResponseHeaders The headers returned from the mapper service\n+     */\n+    MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message, final MultiMap mapperResponseHeaders) {\n+        this(ctx, resource, message, mapperResponseHeaders, true);\n+    }\n+\n+    /**\n+     * Creates a new mappedMessage.\n+     *  @param ctx The context used for this message\n+     * @param resource The resourceIdentifier used for this message\n+     * @param message The actual message with its payload\n+     */\n+    MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message) {\n+        this(ctx, resource, message, null, false);\n+    }\n+        /**\n+         * Gets the context.\n+         *\n+         * @return the context\n+         */\n+    MqttContext getCtx() {", "originalCommit": "d4b08994beb81813efdda829aeedaa9a1eeefcd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6120e090899a2291a54856ae38c745ce2f9eea3b", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\nindex ae13bec2d..f8e3764f4 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\n\n@@ -16,7 +16,6 @@ package org.eclipse.hono.adapter.mqtt.impl;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.util.ResourceIdentifier;\n \n-import io.vertx.core.MultiMap;\n import io.vertx.mqtt.messages.MqttPublishMessage;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMTIwMA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r412701200", "bodyText": "formatting", "author": "sophokles73", "createdAt": "2020-04-22T06:21:05Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+\n+/**\n+ * Structure to provide a mapped message.\n+ */\n+class MappedMessage {\n+    private final MqttContext ctx;\n+    private final ResourceIdentifier resource;\n+    private final MqttPublishMessage message;\n+    private final MultiMap mapperResponseHeaders;\n+    private final boolean mappedExternally;\n+\n+    private MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message,\n+                    final MultiMap mapperResponseHeaders, final boolean mappedExternally) {\n+        this.ctx = ctx;\n+        this.resource = resource;\n+        this.message = message;\n+        this.mapperResponseHeaders = mapperResponseHeaders;\n+        this.mappedExternally = mappedExternally;\n+    }\n+\n+    /**\n+     * Creates a new mappedMessage which is actually not mapped by an external service.\n+     *  @param ctx The context used for this message\n+     * @param resource The resourceIdentifier used for this message\n+     * @param message The actual message with its payload\n+     * @param mapperResponseHeaders The headers returned from the mapper service\n+     */\n+    MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message, final MultiMap mapperResponseHeaders) {\n+        this(ctx, resource, message, mapperResponseHeaders, true);\n+    }\n+\n+    /**\n+     * Creates a new mappedMessage.\n+     *  @param ctx The context used for this message\n+     * @param resource The resourceIdentifier used for this message\n+     * @param message The actual message with its payload\n+     */\n+    MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message) {\n+        this(ctx, resource, message, null, false);\n+    }\n+        /**\n+         * Gets the context.\n+         *\n+         * @return the context\n+         */\n+    MqttContext getCtx() {\n+        return ctx;\n+    }\n+\n+    /**\n+     * Gets the resourceIdentifier.\n+     *\n+     * @return the resourceIdentifier\n+     */\n+    ResourceIdentifier getResource() {\n+        return resource;\n+    }\n+\n+    /**\n+     * Gets the message.\n+     *\n+     * @return the actual message\n+     */\n+    MqttPublishMessage getMessage() {\n+        return message;\n+    }\n+\n+    /**\n+     * Gets the headers returned by the mapper.\n+     *\n+     * @return headers returned from the mapper service\n+     */\n+\n+    public MultiMap getMapperResponseHeaders() {\n+        return mapperResponseHeaders;\n+    }", "originalCommit": "d4b08994beb81813efdda829aeedaa9a1eeefcd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6120e090899a2291a54856ae38c745ce2f9eea3b", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\nindex ae13bec2d..f8e3764f4 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\n\n@@ -16,7 +16,6 @@ package org.eclipse.hono.adapter.mqtt.impl;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.util.ResourceIdentifier;\n \n-import io.vertx.core.MultiMap;\n import io.vertx.mqtt.messages.MqttPublishMessage;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMTc2OA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r412701768", "bodyText": "Please provide a more meaningful description which indicates the purpose of this class. Nobody knows what a mapping component is ...", "author": "sophokles73", "createdAt": "2020-04-22T06:22:18Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component.", "originalCommit": "d4b08994beb81813efdda829aeedaa9a1eeefcd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6120e090899a2291a54856ae38c745ce2f9eea3b", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\nindex d8fbf7611..2d688cdab 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n\n@@ -13,18 +13,22 @@\n \n package org.eclipse.hono.adapter.mqtt.impl;\n \n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n import org.eclipse.hono.config.MapperEndpoint;\n import org.eclipse.hono.util.MessageHelper;\n import org.eclipse.hono.util.RegistrationConstants;\n import org.eclipse.hono.util.ResourceIdentifier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import io.vertx.core.Future;\n import io.vertx.core.MultiMap;\n import io.vertx.core.Promise;\n import io.vertx.core.buffer.Buffer;\n import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.Json;\n import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.client.HttpResponse;\n import io.vertx.ext.web.client.WebClient;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwNjAxOQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r412706019", "bodyText": "this will throw a ClassCastException if the property is not a string. IMHO you should use a more defensive approach here ...", "author": "sophokles73", "createdAt": "2020-04-22T06:31:32Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component.\n+ */\n+public final class MessageMapping {\n+\n+    private WebClient webClient;\n+\n+    /**\n+     * Constructs the messageMapping client used to call external/custom messageMapping.\n+     *\n+     * @param webClient Vert.x webclient to use in the messageMapping\n+     */\n+    public MessageMapping(final WebClient webClient) {\n+        this.webClient = webClient;\n+    }\n+\n+    /**\n+     * Fetches the mapper if configured and calls the external mapping service.\n+     *\n+     * @param ctx The mqtt context\n+     * @param targetAddress The resourceIdentifier with the current targetAddress\n+     * @param message Received message\n+     * @param registrationInfo information retrieved from the device registry\n+     * @param config Mqtt protocol adapter properties\n+     * @return Mapped message\n+     */\n+    public Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,\n+                                     final MqttPublishMessage message, final JsonObject registrationInfo, final MqttProtocolAdapterProperties config) {\n+        final Promise<MappedMessage> result = Promise.promise();\n+        if (!registrationInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+        final String mapper = registrationInfo.getString(RegistrationConstants.FIELD_MAPPER);", "originalCommit": "d4b08994beb81813efdda829aeedaa9a1eeefcd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6120e090899a2291a54856ae38c745ce2f9eea3b", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\nindex d8fbf7611..2d688cdab 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n\n@@ -13,18 +13,22 @@\n \n package org.eclipse.hono.adapter.mqtt.impl;\n \n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n import org.eclipse.hono.config.MapperEndpoint;\n import org.eclipse.hono.util.MessageHelper;\n import org.eclipse.hono.util.RegistrationConstants;\n import org.eclipse.hono.util.ResourceIdentifier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import io.vertx.core.Future;\n import io.vertx.core.MultiMap;\n import io.vertx.core.Promise;\n import io.vertx.core.buffer.Buffer;\n import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.Json;\n import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.client.HttpResponse;\n import io.vertx.ext.web.client.WebClient;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxMDIwNA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r412710204", "bodyText": "If I am not mistaken this should try to retrieve the (mapped) device ID from the response headers, shouldn't it?", "author": "sophokles73", "createdAt": "2020-04-22T06:39:59Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component.\n+ */\n+public final class MessageMapping {\n+\n+    private WebClient webClient;\n+\n+    /**\n+     * Constructs the messageMapping client used to call external/custom messageMapping.\n+     *\n+     * @param webClient Vert.x webclient to use in the messageMapping\n+     */\n+    public MessageMapping(final WebClient webClient) {\n+        this.webClient = webClient;\n+    }\n+\n+    /**\n+     * Fetches the mapper if configured and calls the external mapping service.\n+     *\n+     * @param ctx The mqtt context\n+     * @param targetAddress The resourceIdentifier with the current targetAddress\n+     * @param message Received message\n+     * @param registrationInfo information retrieved from the device registry\n+     * @param config Mqtt protocol adapter properties\n+     * @return Mapped message\n+     */\n+    public Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,\n+                                     final MqttPublishMessage message, final JsonObject registrationInfo, final MqttProtocolAdapterProperties config) {\n+        final Promise<MappedMessage> result = Promise.promise();\n+        if (!registrationInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+        final String mapper = registrationInfo.getString(RegistrationConstants.FIELD_MAPPER);\n+        if (mapper.isBlank()) {\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+\n+        final MapperEndpoint mapperEndpoint = config.getMapperEndpoint(mapper);\n+        if (mapperEndpoint == null) {\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+\n+        final VertxHttpHeaders headers = new VertxHttpHeaders();\n+        registrationInfo.iterator().forEachRemaining(stringObjectEntry -> headers.add(stringObjectEntry.getKey(),\n+                stringObjectEntry.getValue()));\n+\n+        return mapMessageRequest(ctx, targetAddress, message, mapperEndpoint, headers);\n+    }\n+\n+    Future<MappedMessage> mapMessageRequest(final MqttContext ctx, final ResourceIdentifier targetAddress,\n+                                            final MqttPublishMessage message, final MapperEndpoint mapperEndpoint, final VertxHttpHeaders headers) {\n+        final Promise<MappedMessage> result = Promise.promise();\n+        webClient.post(mapperEndpoint.getPort(), mapperEndpoint.getHost(), mapperEndpoint.getUri())\n+                .putHeaders(headers)\n+                .ssl(mapperEndpoint.ssl)\n+                .sendBuffer(message.payload(), httpResponseAsyncResult -> {\n+                    if (httpResponseAsyncResult.succeeded()) {\n+                        final HttpResponse<Buffer> httpResponse = httpResponseAsyncResult.result();\n+                        if (httpResponse.statusCode() == 200) {\n+                            final MqttPublishMessageImpl mqttPublishMessage = new MqttPublishMessageImpl(ctx.message().messageId(), ctx.message().qosLevel(),\n+                                    ctx.message().isDup(), ctx.message().isRetain(), ctx.message().topicName(),\n+                                    httpResponse.bodyAsBuffer().getByteBuf());\n+                            final MultiMap responseHeaders = httpResponse.headers();\n+                            String deviceId = targetAddress.getResourceId();\n+                            if (headers.contains(MessageHelper.APP_PROPERTY_DEVICE_ID)) {\n+                                deviceId = headers.get(MessageHelper.APP_PROPERTY_DEVICE_ID);\n+                            }", "originalCommit": "d4b08994beb81813efdda829aeedaa9a1eeefcd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6120e090899a2291a54856ae38c745ce2f9eea3b", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\nindex d8fbf7611..2d688cdab 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n\n@@ -13,18 +13,22 @@\n \n package org.eclipse.hono.adapter.mqtt.impl;\n \n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n import org.eclipse.hono.config.MapperEndpoint;\n import org.eclipse.hono.util.MessageHelper;\n import org.eclipse.hono.util.RegistrationConstants;\n import org.eclipse.hono.util.ResourceIdentifier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import io.vertx.core.Future;\n import io.vertx.core.MultiMap;\n import io.vertx.core.Promise;\n import io.vertx.core.buffer.Buffer;\n import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.Json;\n import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.client.HttpResponse;\n import io.vertx.ext.web.client.WebClient;\n"}}, {"oid": "6120e090899a2291a54856ae38c745ce2f9eea3b", "url": "https://github.com/eclipse/hono/commit/6120e090899a2291a54856ae38c745ce2f9eea3b", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-04-23T11:43:01Z", "type": "forcePushed"}, {"oid": "381e46532311d07aa7c531f57f601d848319205c", "url": "https://github.com/eclipse/hono/commit/381e46532311d07aa7c531f57f601d848319205c", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-04-23T11:44:10Z", "type": "forcePushed"}, {"oid": "d4c2c01c23f3bf0e97aeac6c66c60f32de2ed5f2", "url": "https://github.com/eclipse/hono/commit/d4c2c01c23f3bf0e97aeac6c66c60f32de2ed5f2", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-05-07T12:13:35Z", "type": "forcePushed"}, {"oid": "a49b8f2bdc5b053270d0879b26034b1770a2160f", "url": "https://github.com/eclipse/hono/commit/a49b8f2bdc5b053270d0879b26034b1770a2160f", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-05-07T12:27:37Z", "type": "forcePushed"}, {"oid": "f84876e21919aa52e3d8900844f782243e71664f", "url": "https://github.com/eclipse/hono/commit/f84876e21919aa52e3d8900844f782243e71664f", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-05-07T12:31:16Z", "type": "forcePushed"}, {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "url": "https://github.com/eclipse/hono/commit/a8d9a50e5b214414b90d22a153e25607a43a0dc9", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-05-07T12:41:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU0ODM5MA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421548390", "bodyText": "????", "author": "sophokles73", "createdAt": "2020-05-07T14:27:53Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/Config.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation\n+ * Copyright (c) 2016, 2019 Contributors to the Eclipse Foundation", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA1OTg4Mg==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r422059882", "bodyText": "must have been from the rebase", "author": "BobClaerhout", "createdAt": "2020-05-08T10:06:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU0ODM5MA=="}], "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/Config.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/Config.java\nindex 3005ad928..37394116d 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/Config.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/Config.java\n\n@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2016, 2019 Contributors to the Eclipse Foundation\n+ * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation\n  *\n  * See the NOTICE file(s) distributed with this work for additional\n  * information regarding copyright ownership.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU0ODc3NA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421548774", "bodyText": "I think you can do better than this ...", "author": "sophokles73", "createdAt": "2020-05-07T14:28:21Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/Config.java", "diffHunk": "@@ -122,4 +123,15 @@ public ObjectFactoryCreatingFactoryBean serviceFactory() {\n         factory.setTargetBeanName(BEAN_NAME_VERTX_BASED_MQTT_PROTOCOL_ADAPTER);\n         return factory;\n     }\n+\n+    /**\n+     * Constructs messageMapping.\n+     *\n+     * @return Returns constructed messageMapping", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/Config.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/Config.java\nindex 3005ad928..37394116d 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/Config.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/Config.java\n\n@@ -127,10 +127,10 @@ public class Config extends AbstractAdapterConfig {\n     /**\n      * Constructs messageMapping.\n      *\n-     * @return Returns constructed messageMapping\n+     * @return Returns MessageMapping containing a webclient to perform mapper requests.\n      */\n     @Bean\n-    public MessageMapping messageMapping() {\n+    public IMessageMapping messageMapping() {\n         final WebClient webClient = WebClient.create(vertx());\n         return new MessageMapping(webClient);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU0OTI2MA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421549260", "bodyText": "final ?", "author": "sophokles73", "createdAt": "2020-05-07T14:28:58Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+\n+/**\n+ * Structure to provide a mapped message.\n+ */\n+class MappedMessage {", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\nindex f8e3764f4..cd4a5da62 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\n\n@@ -21,16 +21,17 @@ import io.vertx.mqtt.messages.MqttPublishMessage;\n /**\n  * Structure to provide a mapped message.\n  */\n-class MappedMessage {\n+final class MappedMessage {\n     private final MqttContext ctx;\n     private final ResourceIdentifier resource;\n     private final MqttPublishMessage message;\n \n     /**\n      * Creates a new mappedMessage.\n-     * @param ctx The context used for this message\n-     * @param resource The resourceIdentifier used for this message\n-     * @param message The actual message with its payload\n+     *\n+     * @param ctx The original context of the received message.\n+     * @param resource The original ResourceIdentifier in which the deviceId may be altered by the mapper.\n+     * @param message The received message from the gateway/device in which the payload may be altered by the mapper.\n      */\n     MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message) {\n         this.ctx = ctx;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1MDMwNg==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421550306", "bodyText": "I think you can do better than this.\nAlso, please insert an empty line between description and params.\nPlease finish the param description with a .", "author": "sophokles73", "createdAt": "2020-05-07T14:30:18Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+\n+/**\n+ * Structure to provide a mapped message.\n+ */\n+class MappedMessage {\n+    private final MqttContext ctx;\n+    private final ResourceIdentifier resource;\n+    private final MqttPublishMessage message;\n+\n+    /**\n+     * Creates a new mappedMessage.\n+     * @param ctx The context used for this message\n+     * @param resource The resourceIdentifier used for this message\n+     * @param message The actual message with its payload", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\nindex f8e3764f4..cd4a5da62 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java\n\n@@ -21,16 +21,17 @@ import io.vertx.mqtt.messages.MqttPublishMessage;\n /**\n  * Structure to provide a mapped message.\n  */\n-class MappedMessage {\n+final class MappedMessage {\n     private final MqttContext ctx;\n     private final ResourceIdentifier resource;\n     private final MqttPublishMessage message;\n \n     /**\n      * Creates a new mappedMessage.\n-     * @param ctx The context used for this message\n-     * @param resource The resourceIdentifier used for this message\n-     * @param message The actual message with its payload\n+     *\n+     * @param ctx The original context of the received message.\n+     * @param resource The original ResourceIdentifier in which the deviceId may be altered by the mapper.\n+     * @param message The received message from the gateway/device in which the payload may be altered by the mapper.\n      */\n     MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message) {\n         this.ctx = ctx;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1MTE2Ng==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421551166", "bodyText": "It would be helpful to understand what is being mapped and why, e.g. describe a common use case.", "author": "sophokles73", "createdAt": "2020-05-07T14:31:25Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.Json;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component. This component requests mapping from another server over HTTP(S) if this\n+ * is configured properly. The headers are overwritten with the result of the mapper (which includes the resourceId).", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA2MjExMw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r422062113", "bodyText": "updated", "author": "BobClaerhout", "createdAt": "2020-05-08T10:12:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1MTE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\nindex 2d688cdab..2108a5826 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n\n@@ -13,6 +13,8 @@\n \n package org.eclipse.hono.adapter.mqtt.impl;\n \n+import java.util.Objects;\n+\n import org.eclipse.hono.adapter.mqtt.MqttConstants;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1MTQ1OQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421551459", "bodyText": "make this static", "author": "sophokles73", "createdAt": "2020-05-07T14:31:48Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.Json;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component. This component requests mapping from another server over HTTP(S) if this\n+ * is configured properly. The headers are overwritten with the result of the mapper (which includes the resourceId).\n+ */\n+public final class MessageMapping {\n+\n+    private final Logger log = LoggerFactory.getLogger(getClass());", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA0MDAzNA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r422040034", "bodyText": "not possible because of the getClass which is not static", "author": "BobClaerhout", "createdAt": "2020-05-08T09:20:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1MTQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgxOTI3MQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r422819271", "bodyText": "try LoggerFactory.getLogger(MessageMapping.class)", "author": "sophokles73", "createdAt": "2020-05-11T06:52:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1MTQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\nindex 2d688cdab..2108a5826 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n\n@@ -13,6 +13,8 @@\n \n package org.eclipse.hono.adapter.mqtt.impl;\n \n+import java.util.Objects;\n+\n import org.eclipse.hono.adapter.mqtt.MqttConstants;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1MTYyMA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421551620", "bodyText": "final", "author": "sophokles73", "createdAt": "2020-05-07T14:31:59Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.Json;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component. This component requests mapping from another server over HTTP(S) if this\n+ * is configured properly. The headers are overwritten with the result of the mapper (which includes the resourceId).\n+ */\n+public final class MessageMapping {\n+\n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    private WebClient webClient;", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\nindex 2d688cdab..2108a5826 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n\n@@ -13,6 +13,8 @@\n \n package org.eclipse.hono.adapter.mqtt.impl;\n \n+import java.util.Objects;\n+\n import org.eclipse.hono.adapter.mqtt.MqttConstants;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1MTg3OA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421551878", "bodyText": "what if webclient is null?", "author": "sophokles73", "createdAt": "2020-05-07T14:32:19Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.Json;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component. This component requests mapping from another server over HTTP(S) if this\n+ * is configured properly. The headers are overwritten with the result of the mapper (which includes the resourceId).\n+ */\n+public final class MessageMapping {\n+\n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    private WebClient webClient;\n+\n+    /**\n+     * Constructs the messageMapping client used to call external/custom messageMapping.\n+     *\n+     * @param webClient Vert.x webclient to use in the messageMapping", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\nindex 2d688cdab..2108a5826 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n\n@@ -13,6 +13,8 @@\n \n package org.eclipse.hono.adapter.mqtt.impl;\n \n+import java.util.Objects;\n+\n import org.eclipse.hono.adapter.mqtt.MqttConstants;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1MjY0Nw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421552647", "bodyText": "are the params allowed to be null?", "author": "sophokles73", "createdAt": "2020-05-07T14:33:18Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.Json;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component. This component requests mapping from another server over HTTP(S) if this\n+ * is configured properly. The headers are overwritten with the result of the mapper (which includes the resourceId).\n+ */\n+public final class MessageMapping {\n+\n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    private WebClient webClient;\n+\n+    /**\n+     * Constructs the messageMapping client used to call external/custom messageMapping.\n+     *\n+     * @param webClient Vert.x webclient to use in the messageMapping\n+     */\n+    public MessageMapping(final WebClient webClient) {\n+        this.webClient = webClient;\n+    }\n+\n+    /**\n+     * Fetches the mapper if configured and calls the external mapping service.\n+     *\n+     * @param ctx The mqtt context\n+     * @param targetAddress The resourceIdentifier with the current targetAddress\n+     * @param message Received message\n+     * @param registrationInfo information retrieved from the device registry\n+     * @param config Mqtt protocol adapter properties\n+     * @return Mapped message\n+     */\n+    public Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\nindex 2d688cdab..2108a5826 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n\n@@ -13,6 +13,8 @@\n \n package org.eclipse.hono.adapter.mqtt.impl;\n \n+import java.util.Objects;\n+\n import org.eclipse.hono.adapter.mqtt.MqttConstants;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1MzM0MQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421553341", "bodyText": "it would be much easier to test the interaction of the protocol adapter with the mapping service if this were an interface which can then be mocked in unit tests ...", "author": "sophokles73", "createdAt": "2020-05-07T14:34:08Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.Json;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component. This component requests mapping from another server over HTTP(S) if this\n+ * is configured properly. The headers are overwritten with the result of the mapper (which includes the resourceId).\n+ */\n+public final class MessageMapping {", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\nindex 2d688cdab..2108a5826 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n\n@@ -13,6 +13,8 @@\n \n package org.eclipse.hono.adapter.mqtt.impl;\n \n+import java.util.Objects;\n+\n import org.eclipse.hono.adapter.mqtt.MqttConstants;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1NDgzNg==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421554836", "bodyText": "why do we want to pass in the static adapter config properties to each method invocation instead of keeping them in a field populated by the constructor?", "author": "sophokles73", "createdAt": "2020-05-07T14:35:42Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.Json;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component. This component requests mapping from another server over HTTP(S) if this\n+ * is configured properly. The headers are overwritten with the result of the mapper (which includes the resourceId).\n+ */\n+public final class MessageMapping {\n+\n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    private WebClient webClient;\n+\n+    /**\n+     * Constructs the messageMapping client used to call external/custom messageMapping.\n+     *\n+     * @param webClient Vert.x webclient to use in the messageMapping\n+     */\n+    public MessageMapping(final WebClient webClient) {\n+        this.webClient = webClient;\n+    }\n+\n+    /**\n+     * Fetches the mapper if configured and calls the external mapping service.\n+     *\n+     * @param ctx The mqtt context\n+     * @param targetAddress The resourceIdentifier with the current targetAddress\n+     * @param message Received message\n+     * @param registrationInfo information retrieved from the device registry\n+     * @param config Mqtt protocol adapter properties\n+     * @return Mapped message\n+     */\n+    public Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,\n+                                     final MqttPublishMessage message, final JsonObject registrationInfo, final MqttProtocolAdapterProperties config) {", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\nindex 2d688cdab..2108a5826 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n\n@@ -13,6 +13,8 @@\n \n package org.eclipse.hono.adapter.mqtt.impl;\n \n+import java.util.Objects;\n+\n import org.eclipse.hono.adapter.mqtt.MqttConstants;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1NzU2Mg==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421557562", "bodyText": "use io.vertx.core.MultiMap instead ...", "author": "sophokles73", "createdAt": "2020-05-07T14:39:05Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.Json;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component. This component requests mapping from another server over HTTP(S) if this\n+ * is configured properly. The headers are overwritten with the result of the mapper (which includes the resourceId).\n+ */\n+public final class MessageMapping {\n+\n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    private WebClient webClient;\n+\n+    /**\n+     * Constructs the messageMapping client used to call external/custom messageMapping.\n+     *\n+     * @param webClient Vert.x webclient to use in the messageMapping\n+     */\n+    public MessageMapping(final WebClient webClient) {\n+        this.webClient = webClient;\n+    }\n+\n+    /**\n+     * Fetches the mapper if configured and calls the external mapping service.\n+     *\n+     * @param ctx The mqtt context\n+     * @param targetAddress The resourceIdentifier with the current targetAddress\n+     * @param message Received message\n+     * @param registrationInfo information retrieved from the device registry\n+     * @param config Mqtt protocol adapter properties\n+     * @return Mapped message\n+     */\n+    public Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,\n+                                     final MqttPublishMessage message, final JsonObject registrationInfo, final MqttProtocolAdapterProperties config) {\n+        final Promise<MappedMessage> result = Promise.promise();\n+        if (!registrationInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+\n+        final Object mapperObject = registrationInfo.getValue(RegistrationConstants.FIELD_MAPPER);\n+        if (!(mapperObject instanceof String)) {\n+            log.debug(\"Mapper configuration is a string. Not requesting mapping\");\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+        final String mapper = (String) mapperObject;\n+        if (mapper.isBlank()) {\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+\n+        final MapperEndpoint mapperEndpoint = config.getMapperEndpoint(mapper);\n+        if (mapperEndpoint == null) {\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+\n+        final VertxHttpHeaders headers = new VertxHttpHeaders();", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\nindex 2d688cdab..2108a5826 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java\n\n@@ -13,6 +13,8 @@\n \n package org.eclipse.hono.adapter.mqtt.impl;\n \n+import java.util.Objects;\n+\n import org.eclipse.hono.adapter.mqtt.MqttConstants;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2MTMwNw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421561307", "bodyText": "??", "author": "sophokles73", "createdAt": "2020-05-07T14:43:48Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -96,4 +144,8 @@ protected String getTypeName() {\n         }\n         return result.future();\n     }\n+\n+\n+\n+", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\nindex c33d2b92b..6237dab24 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n\n@@ -144,8 +144,4 @@ public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttP\n         }\n         return result.future();\n     }\n-\n-\n-\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2MzMyNw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421563327", "bodyText": "use Map as parameter type", "author": "sophokles73", "createdAt": "2020-05-07T14:46:18Z", "path": "core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java", "diffHunk": "@@ -229,4 +231,26 @@ public Duration getTenantIdleTimeout() {\n     public void setTenantIdleTimeout(final Duration tenantIdleTimeout) {\n         this.tenantIdleTimeout = Objects.requireNonNull(tenantIdleTimeout);\n     }\n+\n+    /**\n+     * Sets the configured mappers for this adapter\n+     * <p>\n+     * Setting this property to an empty hashMap will disable mapping for this adapter.\n+     *\n+     * @param mapperEndpoints The new hashMap with mapper endpoints\n+     * @throws NullPointerException if parameter is {@code null}.\n+     */\n+    public final void setMapperEndpoints(final HashMap<String, MapperEndpoint> mapperEndpoints) {", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java b/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\nindex 5a6832b00..580439661 100644\n--- a/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\n+++ b/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\n\n@@ -240,8 +241,10 @@ public class ProtocolAdapterProperties extends ServiceConfigProperties {\n      * @param mapperEndpoints The new hashMap with mapper endpoints\n      * @throws NullPointerException if parameter is {@code null}.\n      */\n-    public final void setMapperEndpoints(final HashMap<String, MapperEndpoint> mapperEndpoints) {\n-        this.mapperEndpoints = Objects.requireNonNull(mapperEndpoints);\n+    public final void setMapperEndpoints(final Map<String, MapperEndpoint> mapperEndpoints) {\n+        Objects.requireNonNull(mapperEndpoints);\n+        this.mapperEndpoints.clear();\n+        this.mapperEndpoints.putAll(mapperEndpoints);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2MzU2NA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421563564", "bodyText": "use Map as type", "author": "sophokles73", "createdAt": "2020-05-07T14:46:35Z", "path": "core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java", "diffHunk": "@@ -34,6 +35,7 @@\n     private long eventLoopBlockedCheckTimeout = 5000L;\n     private int maxConnections = 0;\n     private Duration tenantIdleTimeout = DEFAULT_TENANT_IDLE_TIMEOUT;\n+    private HashMap<String, MapperEndpoint> mapperEndpoints = new HashMap<>();", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java b/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\nindex 5a6832b00..580439661 100644\n--- a/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\n+++ b/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\n\n@@ -35,7 +36,7 @@ public class ProtocolAdapterProperties extends ServiceConfigProperties {\n     private long eventLoopBlockedCheckTimeout = 5000L;\n     private int maxConnections = 0;\n     private Duration tenantIdleTimeout = DEFAULT_TENANT_IDLE_TIMEOUT;\n-    private HashMap<String, MapperEndpoint> mapperEndpoints = new HashMap<>();\n+    private Map<String, MapperEndpoint> mapperEndpoints = new HashMap<>();\n \n     /**\n      * Checks whether the protocol adapter always authenticates devices using their provided credentials as defined\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2NTAzOA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421565038", "bodyText": "you should better copy all elements, i.e.\nthis.mapperEndpoints.clear();\nthis.mapperEndpoints.addAll(mapperEndpoints);\n\nso that future modifications of the passed in map have no impact on this config class", "author": "sophokles73", "createdAt": "2020-05-07T14:48:31Z", "path": "core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java", "diffHunk": "@@ -229,4 +231,26 @@ public Duration getTenantIdleTimeout() {\n     public void setTenantIdleTimeout(final Duration tenantIdleTimeout) {\n         this.tenantIdleTimeout = Objects.requireNonNull(tenantIdleTimeout);\n     }\n+\n+    /**\n+     * Sets the configured mappers for this adapter\n+     * <p>\n+     * Setting this property to an empty hashMap will disable mapping for this adapter.\n+     *\n+     * @param mapperEndpoints The new hashMap with mapper endpoints\n+     * @throws NullPointerException if parameter is {@code null}.\n+     */\n+    public final void setMapperEndpoints(final HashMap<String, MapperEndpoint> mapperEndpoints) {\n+        this.mapperEndpoints = Objects.requireNonNull(mapperEndpoints);", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java b/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\nindex 5a6832b00..580439661 100644\n--- a/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\n+++ b/core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java\n\n@@ -240,8 +241,10 @@ public class ProtocolAdapterProperties extends ServiceConfigProperties {\n      * @param mapperEndpoints The new hashMap with mapper endpoints\n      * @throws NullPointerException if parameter is {@code null}.\n      */\n-    public final void setMapperEndpoints(final HashMap<String, MapperEndpoint> mapperEndpoints) {\n-        this.mapperEndpoints = Objects.requireNonNull(mapperEndpoints);\n+    public final void setMapperEndpoints(final Map<String, MapperEndpoint> mapperEndpoints) {\n+        Objects.requireNonNull(mapperEndpoints);\n+        this.mapperEndpoints.clear();\n+        this.mapperEndpoints.putAll(mapperEndpoints);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2Nzg1Nw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421567857", "bodyText": "does this really need to be configured at the device instead of the tenant level?", "author": "sophokles73", "createdAt": "2020-05-07T14:52:13Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -54,6 +54,9 @@\n     @JsonFormat(with = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)\n     private List<String> memberOf = new LinkedList<>();\n \n+    @JsonInclude(value = Include.NON_EMPTY)\n+    private String mapper = \"\";", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA0NDc2Mw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r422044763", "bodyText": "yes, we support different sensors in 1 installation and for 1 tenant. Some of these devices need this specific mapper, while other don't.", "author": "BobClaerhout", "createdAt": "2020-05-08T09:31:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2Nzg1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java b/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java\nindex bd64acad7..19bca714f 100644\n--- a/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java\n+++ b/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java\n\n@@ -54,8 +54,8 @@ public class Device {\n     @JsonFormat(with = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)\n     private List<String> memberOf = new LinkedList<>();\n \n-    @JsonInclude(value = Include.NON_EMPTY)\n-    private String mapper = \"\";\n+    @JsonInclude(value = Include.NON_NULL)\n+    private String mapper = null;\n \n     /**\n      * Creates a new Device instance.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2ODU3Ng==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421568576", "bodyText": "IMHO this should be Include.NON_NULL and the field should be null by default.", "author": "sophokles73", "createdAt": "2020-05-07T14:53:09Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -54,6 +54,9 @@\n     @JsonFormat(with = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)\n     private List<String> memberOf = new LinkedList<>();\n \n+    @JsonInclude(value = Include.NON_EMPTY)", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java b/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java\nindex bd64acad7..19bca714f 100644\n--- a/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java\n+++ b/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java\n\n@@ -54,8 +54,8 @@ public class Device {\n     @JsonFormat(with = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)\n     private List<String> memberOf = new LinkedList<>();\n \n-    @JsonInclude(value = Include.NON_EMPTY)\n-    private String mapper = \"\";\n+    @JsonInclude(value = Include.NON_NULL)\n+    private String mapper = null;\n \n     /**\n      * Creates a new Device instance.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2OTAyNQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421569025", "bodyText": "setMapper\nfinal?", "author": "sophokles73", "createdAt": "2020-05-07T14:53:44Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -235,4 +239,24 @@ public Device setMemberOf(final List<String> memberOf) {\n         return this;\n     }\n \n+    /**\n+     * Sets the mapper property for this device.\n+     *\n+     * @param mapper The mapper property to set.\n+     * @return        a reference to this for fluent use.\n+     */\n+    public Device setmapper(final String mapper) {", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA0NjA3MQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r422046071", "bodyText": "I'm not an expert on the final thing but the other methods in this class do not have it either...", "author": "BobClaerhout", "createdAt": "2020-05-08T09:34:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2OTAyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java b/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java\nindex bd64acad7..19bca714f 100644\n--- a/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java\n+++ b/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java\n\n@@ -245,7 +245,7 @@ public class Device {\n      * @param mapper The mapper property to set.\n      * @return        a reference to this for fluent use.\n      */\n-    public Device setmapper(final String mapper) {\n+    public Device setMapper(final String mapper) {\n         this.mapper = mapper;\n         return this;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2OTI0Mw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421569243", "bodyText": "what is the purpose of this property?", "author": "sophokles73", "createdAt": "2020-05-07T14:54:00Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -235,4 +239,24 @@ public Device setMemberOf(final List<String> memberOf) {\n         return this;\n     }\n \n+    /**\n+     * Sets the mapper property for this device.\n+     *\n+     * @param mapper The mapper property to set.\n+     * @return        a reference to this for fluent use.", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA0NTg3Mg==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r422045872", "bodyText": "for testing purposes. Just as the other properties in this class.", "author": "BobClaerhout", "createdAt": "2020-05-08T09:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2OTI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java b/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java\nindex bd64acad7..19bca714f 100644\n--- a/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java\n+++ b/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java\n\n@@ -245,7 +245,7 @@ public class Device {\n      * @param mapper The mapper property to set.\n      * @return        a reference to this for fluent use.\n      */\n-    public Device setmapper(final String mapper) {\n+    public Device setMapper(final String mapper) {\n         this.mapper = mapper;\n         return this;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2OTg3Mg==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421569872", "bodyText": "final?", "author": "sophokles73", "createdAt": "2020-05-07T14:54:49Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -235,4 +239,24 @@ public Device setMemberOf(final List<String> memberOf) {\n         return this;\n     }\n \n+    /**\n+     * Sets the mapper property for this device.\n+     *\n+     * @param mapper The mapper property to set.\n+     * @return        a reference to this for fluent use.\n+     */\n+    public Device setmapper(final String mapper) {\n+        this.mapper = mapper;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the mapper for this devices.\n+     *\n+     * @return mapper for this device.\n+     */\n+    public String getMapper() {", "originalCommit": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA0NjE4Nw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r422046187", "bodyText": "same here", "author": "BobClaerhout", "createdAt": "2020-05-08T09:34:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2OTg3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7d377605af15af64b4936fb3bf272211eaad9ce8", "chunk": "diff --git a/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java b/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java\nindex bd64acad7..19bca714f 100644\n--- a/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java\n+++ b/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java\n\n@@ -245,7 +245,7 @@ public class Device {\n      * @param mapper The mapper property to set.\n      * @return        a reference to this for fluent use.\n      */\n-    public Device setmapper(final String mapper) {\n+    public Device setMapper(final String mapper) {\n         this.mapper = mapper;\n         return this;\n     }\n"}}, {"oid": "7d377605af15af64b4936fb3bf272211eaad9ce8", "url": "https://github.com/eclipse/hono/commit/7d377605af15af64b4936fb3bf272211eaad9ce8", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-05-08T09:45:46Z", "type": "forcePushed"}, {"oid": "4dca1f6641a9e707ec415742fa66b9b8d2642176", "url": "https://github.com/eclipse/hono/commit/4dca1f6641a9e707ec415742fa66b9b8d2642176", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-05-08T10:06:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgxNjMxNw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r422816317", "bodyText": "We do not use this naming pattern to indicate an interface. This is simply the MessageMapping interface and your implementation might be the HttpBasedMessageMapping or something indicating its particular strategy for mapping the messages.", "author": "sophokles73", "createdAt": "2020-05-11T06:45:25Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/IMessageMapping.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+\n+/**\n+ * A message mapping interface. This component requests mapping from another server is configured properly. The\n+ * headers are overwritten with the result of the mapper (which includes the resourceId).\n+ * E.g.: when the deviceId is in the payload of the message, the deviceId can be deducted in the custom mapper and\n+ * the payload can be changed accordingly to the payload originally received by the gateway.\n+ */\n+public interface IMessageMapping {", "originalCommit": "4dca1f6641a9e707ec415742fa66b9b8d2642176", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "253da7f00b447217f7a1b224cafdfc903e55cb56", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/IMessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/IMessageMapping.java\ndeleted file mode 100644\nindex e6d0eb073..000000000\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/IMessageMapping.java\n+++ /dev/null\n\n@@ -1,42 +0,0 @@\n-/*******************************************************************************\n- * Copyright (c) 2020 Contributors to the Eclipse Foundation\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information regarding copyright ownership.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- *******************************************************************************/\n-\n-package org.eclipse.hono.adapter.mqtt.impl;\n-\n-import org.eclipse.hono.adapter.mqtt.MqttContext;\n-import org.eclipse.hono.util.ResourceIdentifier;\n-\n-import io.vertx.core.Future;\n-import io.vertx.core.json.JsonObject;\n-import io.vertx.mqtt.messages.MqttPublishMessage;\n-\n-/**\n- * A message mapping interface. This component requests mapping from another server is configured properly. The\n- * headers are overwritten with the result of the mapper (which includes the resourceId).\n- * E.g.: when the deviceId is in the payload of the message, the deviceId can be deducted in the custom mapper and\n- * the payload can be changed accordingly to the payload originally received by the gateway.\n- */\n-public interface IMessageMapping {\n-\n-    /**\n-     * Fetches the mapper if configured and calls the external mapping service.\n-     *\n-     * @param ctx The mqtt context\n-     * @param targetAddress The resourceIdentifier with the current targetAddress\n-     * @param message Received message\n-     * @param registrationInfo information retrieved from the device registry\n-     * @return Mapped message\n-     */\n-    Future<MappedMessage> mapMessage(MqttContext ctx, ResourceIdentifier targetAddress,\n-                                     MqttPublishMessage message, JsonObject registrationInfo);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgxODY2OQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r422818669", "bodyText": "The first sentence is supposed to tell the reader a little about the nature of this class/interface. IMHO you should simply remove the first sentence.\nHere is a nice introduction to how to write good JavaDoc comments ...", "author": "sophokles73", "createdAt": "2020-05-11T06:51:01Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/IMessageMapping.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+\n+/**\n+ * A message mapping interface. This component requests mapping from another server is configured properly. The", "originalCommit": "4dca1f6641a9e707ec415742fa66b9b8d2642176", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "253da7f00b447217f7a1b224cafdfc903e55cb56", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/IMessageMapping.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/IMessageMapping.java\ndeleted file mode 100644\nindex e6d0eb073..000000000\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/IMessageMapping.java\n+++ /dev/null\n\n@@ -1,42 +0,0 @@\n-/*******************************************************************************\n- * Copyright (c) 2020 Contributors to the Eclipse Foundation\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information regarding copyright ownership.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- *******************************************************************************/\n-\n-package org.eclipse.hono.adapter.mqtt.impl;\n-\n-import org.eclipse.hono.adapter.mqtt.MqttContext;\n-import org.eclipse.hono.util.ResourceIdentifier;\n-\n-import io.vertx.core.Future;\n-import io.vertx.core.json.JsonObject;\n-import io.vertx.mqtt.messages.MqttPublishMessage;\n-\n-/**\n- * A message mapping interface. This component requests mapping from another server is configured properly. The\n- * headers are overwritten with the result of the mapper (which includes the resourceId).\n- * E.g.: when the deviceId is in the payload of the message, the deviceId can be deducted in the custom mapper and\n- * the payload can be changed accordingly to the payload originally received by the gateway.\n- */\n-public interface IMessageMapping {\n-\n-    /**\n-     * Fetches the mapper if configured and calls the external mapping service.\n-     *\n-     * @param ctx The mqtt context\n-     * @param targetAddress The resourceIdentifier with the current targetAddress\n-     * @param message Received message\n-     * @param registrationInfo information retrieved from the device registry\n-     * @return Mapped message\n-     */\n-    Future<MappedMessage> mapMessage(MqttContext ctx, ResourceIdentifier targetAddress,\n-                                     MqttPublishMessage message, JsonObject registrationInfo);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgxOTcxMw==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r422819713", "bodyText": "parameter names always start with a lower case letter ..", "author": "sophokles73", "createdAt": "2020-05-11T06:53:32Z", "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -14,48 +14,96 @@\n package org.eclipse.hono.adapter.mqtt.impl;\n \n import java.net.HttpURLConnection;\n+import java.util.Map;\n+import java.util.Objects;\n \n+import org.apache.qpid.proton.message.Message;\n import org.eclipse.hono.adapter.mqtt.AbstractVertxBasedMqttProtocolAdapter;\n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n import org.eclipse.hono.client.ClientErrorException;\n import org.eclipse.hono.service.metric.MetricsTags;\n import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.MessageHelper;\n import org.eclipse.hono.util.ResourceIdentifier;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n import io.netty.handler.codec.mqtt.MqttQoS;\n import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n import io.vertx.core.Promise;\n+import io.vertx.core.json.Json;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+\n \n /**\n  * A Vert.x based Hono protocol adapter for publishing messages to Hono's Telemetry and Event APIs using MQTT.\n  */\n public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttProtocolAdapter<MqttProtocolAdapterProperties> {\n+    private IMessageMapping IMessageMapping;\n \n     /**\n      * {@inheritDoc}\n-     * \n+     *\n      * @return {@link Constants#PROTOCOL_ADAPTER_TYPE_MQTT}\n      */\n     @Override\n     protected String getTypeName() {\n         return Constants.PROTOCOL_ADAPTER_TYPE_MQTT;\n     }\n \n+    /**\n+     * Sets the messageMapping for this adapter.\n+     *\n+     * @param IMessageMapping the messageMapping\n+     * @throws NullPointerException if messageMapping is {@code null}.\n+     */\n+    @Autowired\n+    public void setMessageMapping(final IMessageMapping IMessageMapping) {", "originalCommit": "4dca1f6641a9e707ec415742fa66b9b8d2642176", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "253da7f00b447217f7a1b224cafdfc903e55cb56", "chunk": "diff --git a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\nindex 778476dec..d0a099875 100644\n--- a/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n+++ b/adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java\n\n@@ -41,7 +41,7 @@ import io.vertx.mqtt.messages.MqttPublishMessage;\n  * A Vert.x based Hono protocol adapter for publishing messages to Hono's Telemetry and Event APIs using MQTT.\n  */\n public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttProtocolAdapter<MqttProtocolAdapterProperties> {\n-    private IMessageMapping IMessageMapping;\n+    private MessageMapping messageMapping;\n \n     /**\n      * {@inheritDoc}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgyMTE1OA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r422821158", "bodyText": "This actually seems to be a test for the MessageMapping class but not for the protocol adapter, doesn't it?\nAlso, it doesn't seem to test anything as there are no assertions, or am I mistaken?", "author": "sophokles73", "createdAt": "2020-05-11T06:56:44Z", "path": "adapters/mqtt-vertx/src/test/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapterTest.java", "diffHunk": "@@ -257,37 +306,58 @@ public void testMapTopicSupportsShortAndLongTopicNames(final VertxTestContext ct\n \n     }\n \n-    private void givenAnAdapter() {\n-\n-        config = new MqttProtocolAdapterProperties();\n-        adapter = new VertxBasedMqttProtocolAdapter();\n-        adapter.setConfig(config);\n-    }\n-\n-    private static MqttPublishMessage newMessage(final MqttQoS qosLevel, final String topic) {\n-        return newMessage(qosLevel, topic, Buffer.buffer(\"test\"));\n-    }\n+    /**\n+     * Verifies that the adapter calls the mapper if configured. Also the updated payload and deviceId is checked.\n+     *\n+     * @param ctx The helper to use for running tests on vert.x.\n+     */\n+    @Test\n+    public void testMapperShouldUpdatePayloadAndDeviceId(final VertxTestContext ctx) {\n+        givenAnAdapterWithMapper();\n+        final MessageMapping messageMapping = new MessageMapping(mapperWebClient, config);\n+\n+        final ResourceIdentifier targetAddress = ResourceIdentifier.from(TelemetryConstants.TELEMETRY_ENDPOINT, TEST_TENANT_ID, TEST_DEVICE);\n+        final HttpRequest httpRequest = mock(HttpRequest.class);\n+        when(mapperWebClient.post(any(int.class), any(String.class), any(String.class))).thenReturn(httpRequest);\n+        when(httpRequest.putHeaders(any(MultiMap.class))).thenReturn(httpRequest);\n+        when(httpRequest.ssl(any(Boolean.class))).thenReturn(httpRequest);\n+        final AsyncResult asyncResult = mock(AsyncResult.class);\n+        when(asyncResult.succeeded()).thenReturn(true);\n+        final HttpResponse httpResponse = mock(HttpResponse.class);\n+        when(asyncResult.result()).thenReturn(httpResponse);\n+        final VertxHttpHeaders headers = new VertxHttpHeaders();\n+        final String newDeviceId = \"new-device\";\n+        headers.add(MessageHelper.APP_PROPERTY_DEVICE_ID, newDeviceId);\n+        when(httpResponse.headers()).thenReturn(headers);\n+        final Buffer changedBuffer = Buffer.buffer(\"changed\");\n+        when(httpResponse.bodyAsBuffer()).thenReturn(changedBuffer);\n+\n+        final MqttPublishMessage message = newMessage(MqttQoS.AT_LEAST_ONCE, EventConstants.EVENT_ENDPOINT);\n+        final MqttContext context = newContext(message, null);\n+        final MapperEndpoint mapperEndpoint = MapperEndpoint.from(\"host\", 1234, \"/uri\", false);\n+        messageMapping.mapMessageRequest(context, targetAddress, message, mapperEndpoint, headers).onComplete(ctx.succeeding(mappedMessage -> {\n+        }));", "originalCommit": "4dca1f6641a9e707ec415742fa66b9b8d2642176", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "253da7f00b447217f7a1b224cafdfc903e55cb56", "chunk": "diff --git a/adapters/mqtt-vertx/src/test/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapterTest.java b/adapters/mqtt-vertx/src/test/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapterTest.java\nindex d1bd2477c..e9c6f28dc 100644\n--- a/adapters/mqtt-vertx/src/test/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapterTest.java\n+++ b/adapters/mqtt-vertx/src/test/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapterTest.java\n\n@@ -314,7 +314,7 @@ public class VertxBasedMqttProtocolAdapterTest {\n     @Test\n     public void testMapperShouldUpdatePayloadAndDeviceId(final VertxTestContext ctx) {\n         givenAnAdapterWithMapper();\n-        final MessageMapping messageMapping = new MessageMapping(mapperWebClient, config);\n+        final HttpBasedMessageMapping messageMapping = new HttpBasedMessageMapping(mapperWebClient, config);\n \n         final ResourceIdentifier targetAddress = ResourceIdentifier.from(TelemetryConstants.TELEMETRY_ENDPOINT, TEST_TENANT_ID, TEST_DEVICE);\n         final HttpRequest httpRequest = mock(HttpRequest.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgyMjIwNQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r422822205", "bodyText": "just for reference, in Java you do not need to explicitly initialize with null as it is the default. It doesn't harm to make it explicit, though, of course ...", "author": "sophokles73", "createdAt": "2020-05-11T06:59:04Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -54,6 +54,9 @@\n     @JsonFormat(with = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)\n     private List<String> memberOf = new LinkedList<>();\n \n+    @JsonInclude(value = Include.NON_NULL)\n+    private String mapper = null;", "originalCommit": "4dca1f6641a9e707ec415742fa66b9b8d2642176", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "253da7f00b447217f7a1b224cafdfc903e55cb56", "chunk": "diff --git a/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java b/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java\nindex 19bca714f..bd5318804 100644\n--- a/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java\n+++ b/services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java\n\n@@ -55,7 +55,7 @@ public class Device {\n     private List<String> memberOf = new LinkedList<>();\n \n     @JsonInclude(value = Include.NON_NULL)\n-    private String mapper = null;\n+    private String mapper;\n \n     /**\n      * Creates a new Device instance.\n"}}, {"oid": "253da7f00b447217f7a1b224cafdfc903e55cb56", "url": "https://github.com/eclipse/hono/commit/253da7f00b447217f7a1b224cafdfc903e55cb56", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-05-11T13:00:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAzMTA0OA==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r423031048", "bodyText": "this doesn't seem to be testing any functionality of the MQTT adapter, i.e. this should be a test case of HttpBasedMessageMappingTest, right?", "author": "sophokles73", "createdAt": "2020-05-11T13:16:56Z", "path": "adapters/mqtt-vertx/src/test/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapterTest.java", "diffHunk": "@@ -257,37 +306,60 @@ public void testMapTopicSupportsShortAndLongTopicNames(final VertxTestContext ct\n \n     }\n \n-    private void givenAnAdapter() {\n+    /**\n+     * Verifies that the adapter calls the mapper if configured. Also the updated payload and deviceId is checked.\n+     *\n+     * @param ctx The helper to use for running tests on vert.x.\n+     */\n+    @Test\n+    public void testMapperShouldUpdatePayloadAndDeviceId(final VertxTestContext ctx) {", "originalCommit": "253da7f00b447217f7a1b224cafdfc903e55cb56", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4a5d28341aea00476948ee50d508a59532f7422", "chunk": "diff --git a/adapters/mqtt-vertx/src/test/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapterTest.java b/adapters/mqtt-vertx/src/test/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapterTest.java\nindex e9c6f28dc..d64e2ad05 100644\n--- a/adapters/mqtt-vertx/src/test/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapterTest.java\n+++ b/adapters/mqtt-vertx/src/test/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapterTest.java\n\n@@ -306,58 +282,7 @@ public class VertxBasedMqttProtocolAdapterTest {\n \n     }\n \n-    /**\n-     * Verifies that the adapter calls the mapper if configured. Also the updated payload and deviceId is checked.\n-     *\n-     * @param ctx The helper to use for running tests on vert.x.\n-     */\n-    @Test\n-    public void testMapperShouldUpdatePayloadAndDeviceId(final VertxTestContext ctx) {\n-        givenAnAdapterWithMapper();\n-        final HttpBasedMessageMapping messageMapping = new HttpBasedMessageMapping(mapperWebClient, config);\n-\n-        final ResourceIdentifier targetAddress = ResourceIdentifier.from(TelemetryConstants.TELEMETRY_ENDPOINT, TEST_TENANT_ID, TEST_DEVICE);\n-        final HttpRequest httpRequest = mock(HttpRequest.class);\n-        when(mapperWebClient.post(any(int.class), any(String.class), any(String.class))).thenReturn(httpRequest);\n-        when(httpRequest.putHeaders(any(MultiMap.class))).thenReturn(httpRequest);\n-        when(httpRequest.ssl(any(Boolean.class))).thenReturn(httpRequest);\n-        final AsyncResult asyncResult = mock(AsyncResult.class);\n-        when(asyncResult.succeeded()).thenReturn(true);\n-        final HttpResponse httpResponse = mock(HttpResponse.class);\n-        when(asyncResult.result()).thenReturn(httpResponse);\n-        final VertxHttpHeaders headers = new VertxHttpHeaders();\n-        final String newDeviceId = \"new-device\";\n-        headers.add(MessageHelper.APP_PROPERTY_DEVICE_ID, newDeviceId);\n-        when(httpResponse.headers()).thenReturn(headers);\n-        final Buffer changedBuffer = Buffer.buffer(\"changed\");\n-        when(httpResponse.bodyAsBuffer()).thenReturn(changedBuffer);\n-        when(httpResponse.statusCode()).thenReturn(200);\n-\n-        final MqttPublishMessage message = newMessage(MqttQoS.AT_LEAST_ONCE, EventConstants.EVENT_ENDPOINT);\n-        final MqttContext context = newContext(message, null);\n-        final MapperEndpoint mapperEndpoint = MapperEndpoint.from(\"host\", 1234, \"/uri\", false);\n-        messageMapping.mapMessageRequest(context, targetAddress, message, mapperEndpoint, headers).onComplete(ctx.succeeding(mappedMessage -> {\n-            ctx.verify(() -> assertThat(mappedMessage.getResource().getResourceId()).isEqualTo(\"new-device\"));\n-            ctx.verify(() -> assertThat(mappedMessage.getMessage().payload()).isEqualTo(changedBuffer));\n-        }));\n-\n-        final ArgumentCaptor<Handler<AsyncResult<HttpResponse<Buffer>>>> captor =\n-                ArgumentCaptor.forClass(Handler.class);\n-        Mockito.verify(httpRequest).sendBuffer(any(Buffer.class), captor.capture());\n-        final Handler<AsyncResult<HttpResponse<Buffer>>> handler = captor.getValue();\n-\n-        handler.handle(asyncResult);\n-        ctx.completeNow();\n-    }\n-\n-    private void givenAnAdapterWithMapper() {\n-        givenAnAdapter();\n-        mapperWebClient = mock(WebClient.class);\n-\n-    }\n-\n     private void givenAnAdapter() {\n-\n         config = new MqttProtocolAdapterProperties();\n         adapter = new VertxBasedMqttProtocolAdapter();\n         adapter.setConfig(config);\n"}}, {"oid": "d4a5d28341aea00476948ee50d508a59532f7422", "url": "https://github.com/eclipse/hono/commit/d4a5d28341aea00476948ee50d508a59532f7422", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-05-11T13:34:33Z", "type": "forcePushed"}, {"oid": "8cb6e48af41388808d7b64f0ffafaee16788a8fc", "url": "https://github.com/eclipse/hono/commit/8cb6e48af41388808d7b64f0ffafaee16788a8fc", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-05-11T13:37:45Z", "type": "forcePushed"}, {"oid": "ff1582ea7e47dfa698ffe46c4f97e2c682916b3a", "url": "https://github.com/eclipse/hono/commit/ff1582ea7e47dfa698ffe46c4f97e2c682916b3a", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-05-12T06:40:20Z", "type": "commit"}, {"oid": "ff1582ea7e47dfa698ffe46c4f97e2c682916b3a", "url": "https://github.com/eclipse/hono/commit/ff1582ea7e47dfa698ffe46c4f97e2c682916b3a", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-05-12T06:40:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNjMyOQ==", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r426506329", "bodyText": "JavaDoc?", "author": "sophokles73", "createdAt": "2020-05-18T09:53:11Z", "path": "adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/MqttConstants.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt;\n+\n+/**\n+ * Constants used in the mqtt adapter.\n+ */\n+public class MqttConstants {\n+\n+    public static final String MAPPER_DATA = \"mapper_data\";", "originalCommit": "ff1582ea7e47dfa698ffe46c4f97e2c682916b3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}