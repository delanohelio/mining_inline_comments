{"pr_number": 2293, "pr_title": "[#2029] Add Command Router client", "pr_createdAt": "2020-11-12T07:51:58Z", "pr_url": "https://github.com/eclipse/hono/pull/2293", "timeline": [{"oid": "ace3c0d6baccf4e4e0f6c379c0fb1a956c42b9c9", "url": "https://github.com/eclipse/hono/commit/ace3c0d6baccf4e4e0f6c379c0fb1a956c42b9c9", "message": "[#2029] Add Command Router client.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-11-12T08:37:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyMzE0NA==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521923144", "bodyText": "just out of curiosity: when would an adapter need to invoke this method with gatewayId = deviceId?", "author": "sophokles73", "createdAt": "2020-11-12T08:29:39Z", "path": "clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.client.command;\n+\n+import java.time.Duration;\n+\n+import org.eclipse.hono.util.Lifecycle;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+\n+/**\n+ * A client for accessing Hono's Command Router API.\n+ * <p>\n+ * See Hono's <a href=\"https://www.eclipse.org/hono/docs/api/command-router\">\n+ * Command Router API</a> for a description of the status codes returned.\n+ */\n+public interface CommandRouterClient extends Lifecycle {\n+\n+    /**\n+     * Sets the given gateway as the last gateway that acted on behalf of the given device.\n+     * <p>\n+     * If a device connects directly instead of through a gateway, the device identifier itself is to be used as value", "originalCommit": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM2OTkzNw==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r522369937", "bodyText": "Whether there really is a real need is a good question.\nWhen a device has connected directly to a protocol adapter and has subscribed for commands there, incoming commands will always be routed to that device directly, not taking any gateways into account and not using the lastKnownGateway information.\nThe lastKnownGateway information is currently only used, if there was no explicit subscription for the device id of the command message, so that the via gateways of the device are checked, using the lastKnownGateway information to choose from potentially multiple subscribed gateways.\nIn that sense there is no need to invoke lastKnownGateway with gatewayId = deviceId with respect to the command routing algorithm.\nIndependent of that, I think the original idea of the lastKnownGateway information was just that it should reflect the most up-to-date information about the device connection, whether it be a direct connection or via a gateway, in so far as can be deduced from telemetry/event messages received at the adapter.\nIf the lastKnownGateway information continues to not be used for purposes other than command routing, we might as well skip setting it for cases with gatewayId = deviceId. But I think this would probably not have that many performance benefits over all, since a device having non-empty via entries and connecting directly to an adapter is probably not the usual case.", "author": "calohmn", "createdAt": "2020-11-12T19:33:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyMzE0NA=="}], "type": "inlineReview", "revised_code": {"commit": "ace3c0d6baccf4e4e0f6c379c0fb1a956c42b9c9", "chunk": "diff --git a/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java b/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\nindex 887230065..aee3549f2 100644\n--- a/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\n+++ b/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\n\n@@ -46,7 +46,7 @@ public interface CommandRouterClient extends Lifecycle {\n     Future<Void> setLastKnownGatewayForDevice(String tenantId, String deviceId, String gatewayId, SpanContext context);\n \n     /**\n-     * Registers a protocol adapter instance as the consumer of command & control messages\n+     * Registers a protocol adapter instance as the consumer of command &amp; control messages\n      * for a device.\n      *\n      * @param tenantId The tenant id.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyMzk2Nw==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521923967", "bodyText": "or tenant id", "author": "sophokles73", "createdAt": "2020-11-12T08:30:50Z", "path": "clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.client.command;\n+\n+import java.time.Duration;\n+\n+import org.eclipse.hono.util.Lifecycle;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+\n+/**\n+ * A client for accessing Hono's Command Router API.\n+ * <p>\n+ * See Hono's <a href=\"https://www.eclipse.org/hono/docs/api/command-router\">\n+ * Command Router API</a> for a description of the status codes returned.\n+ */\n+public interface CommandRouterClient extends Lifecycle {\n+\n+    /**\n+     * Sets the given gateway as the last gateway that acted on behalf of the given device.\n+     * <p>\n+     * If a device connects directly instead of through a gateway, the device identifier itself is to be used as value\n+     * for the <em>gatewayId</em> parameter.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param gatewayId The gateway id (or the device id if the last message came from the device directly).\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.\n+     * @throws NullPointerException if device id or gateway id is {@code null}.\n+     */\n+    Future<Void> setLastKnownGatewayForDevice(String tenantId, String deviceId, String gatewayId, SpanContext context);\n+\n+    /**\n+     * Registers a protocol adapter instance as the consumer of command & control messages\n+     * for a device.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param adapterInstanceId The protocol adapter instance id.\n+     * @param lifespan The lifespan of the registration entry. Using a negative duration or {@code null} here is\n+     *                 interpreted as an unlimited lifespan. Only the number of seconds in the given duration\n+     *                 will be taken into account.\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.\n+     * @throws NullPointerException if device id or adapter instance id is {@code null}.", "originalCommit": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ace3c0d6baccf4e4e0f6c379c0fb1a956c42b9c9", "chunk": "diff --git a/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java b/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\nindex 887230065..aee3549f2 100644\n--- a/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\n+++ b/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\n\n@@ -46,7 +46,7 @@ public interface CommandRouterClient extends Lifecycle {\n     Future<Void> setLastKnownGatewayForDevice(String tenantId, String deviceId, String gatewayId, SpanContext context);\n \n     /**\n-     * Registers a protocol adapter instance as the consumer of command & control messages\n+     * Registers a protocol adapter instance as the consumer of command &amp; control messages\n      * for a device.\n      *\n      * @param tenantId The tenant id.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNDQ0Nw==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521924447", "bodyText": "how about\n\n... if the device is currently mapped to the given adapter instance.", "author": "sophokles73", "createdAt": "2020-11-12T08:31:39Z", "path": "clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.client.command;\n+\n+import java.time.Duration;\n+\n+import org.eclipse.hono.util.Lifecycle;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+\n+/**\n+ * A client for accessing Hono's Command Router API.\n+ * <p>\n+ * See Hono's <a href=\"https://www.eclipse.org/hono/docs/api/command-router\">\n+ * Command Router API</a> for a description of the status codes returned.\n+ */\n+public interface CommandRouterClient extends Lifecycle {\n+\n+    /**\n+     * Sets the given gateway as the last gateway that acted on behalf of the given device.\n+     * <p>\n+     * If a device connects directly instead of through a gateway, the device identifier itself is to be used as value\n+     * for the <em>gatewayId</em> parameter.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param gatewayId The gateway id (or the device id if the last message came from the device directly).\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.\n+     * @throws NullPointerException if device id or gateway id is {@code null}.\n+     */\n+    Future<Void> setLastKnownGatewayForDevice(String tenantId, String deviceId, String gatewayId, SpanContext context);\n+\n+    /**\n+     * Registers a protocol adapter instance as the consumer of command & control messages\n+     * for a device.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param adapterInstanceId The protocol adapter instance id.\n+     * @param lifespan The lifespan of the registration entry. Using a negative duration or {@code null} here is\n+     *                 interpreted as an unlimited lifespan. Only the number of seconds in the given duration\n+     *                 will be taken into account.\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.\n+     * @throws NullPointerException if device id or adapter instance id is {@code null}.\n+     */\n+    Future<Void> registerCommandConsumer(String tenantId, String deviceId, String adapterInstanceId, Duration lifespan,\n+            SpanContext context);\n+\n+    /**\n+     * Unregisters a command consumer for a device.\n+     * <p>\n+     * The registration entry is only deleted if its value contains the given protocol adapter instance id.", "originalCommit": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ace3c0d6baccf4e4e0f6c379c0fb1a956c42b9c9", "chunk": "diff --git a/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java b/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\nindex 887230065..aee3549f2 100644\n--- a/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\n+++ b/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\n\n@@ -46,7 +46,7 @@ public interface CommandRouterClient extends Lifecycle {\n     Future<Void> setLastKnownGatewayForDevice(String tenantId, String deviceId, String gatewayId, SpanContext context);\n \n     /**\n-     * Registers a protocol adapter instance as the consumer of command & control messages\n+     * Registers a protocol adapter instance as the consumer of command &amp; control messages\n      * for a device.\n      *\n      * @param tenantId The tenant id.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNDUzNw==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521924537", "bodyText": "or tenant id", "author": "sophokles73", "createdAt": "2020-11-12T08:31:49Z", "path": "clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.client.command;\n+\n+import java.time.Duration;\n+\n+import org.eclipse.hono.util.Lifecycle;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+\n+/**\n+ * A client for accessing Hono's Command Router API.\n+ * <p>\n+ * See Hono's <a href=\"https://www.eclipse.org/hono/docs/api/command-router\">\n+ * Command Router API</a> for a description of the status codes returned.\n+ */\n+public interface CommandRouterClient extends Lifecycle {\n+\n+    /**\n+     * Sets the given gateway as the last gateway that acted on behalf of the given device.\n+     * <p>\n+     * If a device connects directly instead of through a gateway, the device identifier itself is to be used as value\n+     * for the <em>gatewayId</em> parameter.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param gatewayId The gateway id (or the device id if the last message came from the device directly).\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.\n+     * @throws NullPointerException if device id or gateway id is {@code null}.\n+     */\n+    Future<Void> setLastKnownGatewayForDevice(String tenantId, String deviceId, String gatewayId, SpanContext context);\n+\n+    /**\n+     * Registers a protocol adapter instance as the consumer of command & control messages\n+     * for a device.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param adapterInstanceId The protocol adapter instance id.\n+     * @param lifespan The lifespan of the registration entry. Using a negative duration or {@code null} here is\n+     *                 interpreted as an unlimited lifespan. Only the number of seconds in the given duration\n+     *                 will be taken into account.\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.\n+     * @throws NullPointerException if device id or adapter instance id is {@code null}.\n+     */\n+    Future<Void> registerCommandConsumer(String tenantId, String deviceId, String adapterInstanceId, Duration lifespan,\n+            SpanContext context);\n+\n+    /**\n+     * Unregisters a command consumer for a device.\n+     * <p>\n+     * The registration entry is only deleted if its value contains the given protocol adapter instance id.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param adapterInstanceId The protocol adapter instance id that the entry to be removed has to contain.\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating the outcome of the operation, with its value indicating whether the protocol\n+     *         adapter instance value was removed or not.\n+     *         <p>\n+     *         The future will be failed with a {@link org.eclipse.hono.client.ServiceInvocationException} if there\n+     *         was an error removing the value.\n+     * @throws NullPointerException if device id or adapter instance id is {@code null}.", "originalCommit": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ace3c0d6baccf4e4e0f6c379c0fb1a956c42b9c9", "chunk": "diff --git a/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java b/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\nindex 887230065..aee3549f2 100644\n--- a/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\n+++ b/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\n\n@@ -46,7 +46,7 @@ public interface CommandRouterClient extends Lifecycle {\n     Future<Void> setLastKnownGatewayForDevice(String tenantId, String deviceId, String gatewayId, SpanContext context);\n \n     /**\n-     * Registers a protocol adapter instance as the consumer of command & control messages\n+     * Registers a protocol adapter instance as the consumer of command &amp; control messages\n      * for a device.\n      *\n      * @param tenantId The tenant id.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNDgzNg==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521924836", "bodyText": "The future will be failed with a {@code org.eclipse.hono.client.ServiceInvocationException} if there", "author": "sophokles73", "createdAt": "2020-11-12T08:32:16Z", "path": "clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.client.command;\n+\n+import java.time.Duration;\n+\n+import org.eclipse.hono.util.Lifecycle;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+\n+/**\n+ * A client for accessing Hono's Command Router API.\n+ * <p>\n+ * See Hono's <a href=\"https://www.eclipse.org/hono/docs/api/command-router\">\n+ * Command Router API</a> for a description of the status codes returned.\n+ */\n+public interface CommandRouterClient extends Lifecycle {\n+\n+    /**\n+     * Sets the given gateway as the last gateway that acted on behalf of the given device.\n+     * <p>\n+     * If a device connects directly instead of through a gateway, the device identifier itself is to be used as value\n+     * for the <em>gatewayId</em> parameter.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param gatewayId The gateway id (or the device id if the last message came from the device directly).\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.\n+     * @throws NullPointerException if device id or gateway id is {@code null}.\n+     */\n+    Future<Void> setLastKnownGatewayForDevice(String tenantId, String deviceId, String gatewayId, SpanContext context);\n+\n+    /**\n+     * Registers a protocol adapter instance as the consumer of command & control messages\n+     * for a device.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param adapterInstanceId The protocol adapter instance id.\n+     * @param lifespan The lifespan of the registration entry. Using a negative duration or {@code null} here is\n+     *                 interpreted as an unlimited lifespan. Only the number of seconds in the given duration\n+     *                 will be taken into account.\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.\n+     * @throws NullPointerException if device id or adapter instance id is {@code null}.\n+     */\n+    Future<Void> registerCommandConsumer(String tenantId, String deviceId, String adapterInstanceId, Duration lifespan,\n+            SpanContext context);\n+\n+    /**\n+     * Unregisters a command consumer for a device.\n+     * <p>\n+     * The registration entry is only deleted if its value contains the given protocol adapter instance id.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param adapterInstanceId The protocol adapter instance id that the entry to be removed has to contain.\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating the outcome of the operation, with its value indicating whether the protocol\n+     *         adapter instance value was removed or not.\n+     *         <p>\n+     *         The future will be failed with a {@link org.eclipse.hono.client.ServiceInvocationException} if there", "originalCommit": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ace3c0d6baccf4e4e0f6c379c0fb1a956c42b9c9", "chunk": "diff --git a/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java b/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\nindex 887230065..aee3549f2 100644\n--- a/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\n+++ b/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\n\n@@ -46,7 +46,7 @@ public interface CommandRouterClient extends Lifecycle {\n     Future<Void> setLastKnownGatewayForDevice(String tenantId, String deviceId, String gatewayId, SpanContext context);\n \n     /**\n-     * Registers a protocol adapter instance as the consumer of command & control messages\n+     * Registers a protocol adapter instance as the consumer of command &amp; control messages\n      * for a device.\n      *\n      * @param tenantId The tenant id.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNTM1Nw==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521925357", "bodyText": "IMHO we could/should be a little more specific about the type of exception that the future might be failed with", "author": "sophokles73", "createdAt": "2020-11-12T08:33:17Z", "path": "clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.client.command;\n+\n+import java.time.Duration;\n+\n+import org.eclipse.hono.util.Lifecycle;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+\n+/**\n+ * A client for accessing Hono's Command Router API.\n+ * <p>\n+ * See Hono's <a href=\"https://www.eclipse.org/hono/docs/api/command-router\">\n+ * Command Router API</a> for a description of the status codes returned.\n+ */\n+public interface CommandRouterClient extends Lifecycle {\n+\n+    /**\n+     * Sets the given gateway as the last gateway that acted on behalf of the given device.\n+     * <p>\n+     * If a device connects directly instead of through a gateway, the device identifier itself is to be used as value\n+     * for the <em>gatewayId</em> parameter.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param gatewayId The gateway id (or the device id if the last message came from the device directly).\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.", "originalCommit": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjcyNjk0OA==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r522726948", "bodyText": "Yes, I've added a note about a ServiceInvocationException getting used then.", "author": "calohmn", "createdAt": "2020-11-13T07:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNTM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ace3c0d6baccf4e4e0f6c379c0fb1a956c42b9c9", "chunk": "diff --git a/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java b/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\nindex 887230065..aee3549f2 100644\n--- a/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\n+++ b/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\n\n@@ -46,7 +46,7 @@ public interface CommandRouterClient extends Lifecycle {\n     Future<Void> setLastKnownGatewayForDevice(String tenantId, String deviceId, String gatewayId, SpanContext context);\n \n     /**\n-     * Registers a protocol adapter instance as the consumer of command & control messages\n+     * Registers a protocol adapter instance as the consumer of command &amp; control messages\n      * for a device.\n      *\n      * @param tenantId The tenant id.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNTQyMg==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521925422", "bodyText": "IMHO we could/should be a little more specific about the type of exception that the future might be failed with", "author": "sophokles73", "createdAt": "2020-11-12T08:33:25Z", "path": "clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.client.command;\n+\n+import java.time.Duration;\n+\n+import org.eclipse.hono.util.Lifecycle;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+\n+/**\n+ * A client for accessing Hono's Command Router API.\n+ * <p>\n+ * See Hono's <a href=\"https://www.eclipse.org/hono/docs/api/command-router\">\n+ * Command Router API</a> for a description of the status codes returned.\n+ */\n+public interface CommandRouterClient extends Lifecycle {\n+\n+    /**\n+     * Sets the given gateway as the last gateway that acted on behalf of the given device.\n+     * <p>\n+     * If a device connects directly instead of through a gateway, the device identifier itself is to be used as value\n+     * for the <em>gatewayId</em> parameter.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param gatewayId The gateway id (or the device id if the last message came from the device directly).\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.\n+     * @throws NullPointerException if device id or gateway id is {@code null}.\n+     */\n+    Future<Void> setLastKnownGatewayForDevice(String tenantId, String deviceId, String gatewayId, SpanContext context);\n+\n+    /**\n+     * Registers a protocol adapter instance as the consumer of command & control messages\n+     * for a device.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param adapterInstanceId The protocol adapter instance id.\n+     * @param lifespan The lifespan of the registration entry. Using a negative duration or {@code null} here is\n+     *                 interpreted as an unlimited lifespan. Only the number of seconds in the given duration\n+     *                 will be taken into account.\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.", "originalCommit": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjcyNzA2Mg==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r522727062", "bodyText": "Yes, I've added a note about a ServiceInvocationException getting used then.", "author": "calohmn", "createdAt": "2020-11-13T07:27:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNTQyMg=="}], "type": "inlineReview", "revised_code": {"commit": "ace3c0d6baccf4e4e0f6c379c0fb1a956c42b9c9", "chunk": "diff --git a/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java b/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\nindex 887230065..aee3549f2 100644\n--- a/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\n+++ b/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\n\n@@ -46,7 +46,7 @@ public interface CommandRouterClient extends Lifecycle {\n     Future<Void> setLastKnownGatewayForDevice(String tenantId, String deviceId, String gatewayId, SpanContext context);\n \n     /**\n-     * Registers a protocol adapter instance as the consumer of command & control messages\n+     * Registers a protocol adapter instance as the consumer of command &amp; control messages\n      * for a device.\n      *\n      * @param tenantId The tenant id.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNTcxMg==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521925712", "bodyText": "do we need this?", "author": "sophokles73", "createdAt": "2020-11-12T08:33:58Z", "path": "core/src/main/java/org/eclipse/hono/util/CommandRouterConstants.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.util;\n+\n+/**\n+ * Constants &amp; utility methods used throughout the Command Router API.\n+ */\n+\n+public final class CommandRouterConstants extends RequestResponseApiConstants {\n+\n+    /**\n+     * The name of the Command Router API endpoint.\n+     */\n+    public static final String COMMAND_ROUTER_ENDPOINT = \"cmd_router\";\n+\n+    /**\n+     * Request actions that belong to the Command Router API.\n+     */\n+    public enum CommandRouterAction {\n+        /**\n+         * The <em>set last known gateway for device</em> operation.\n+         */\n+        SET_LAST_KNOWN_GATEWAY(\"set-last-known-gw\"),\n+        /**\n+         * The <em>register command consumer</em> operation.\n+         */\n+        REGISTER_COMMAND_CONSUMER(\"register-command-consumer\"),\n+        /**\n+         * The <em>unregister command consumer</em> operation.\n+         */\n+        UNREGISTER_COMMAND_CONSUMER(\"unregister-command-consumer\"),\n+        /**\n+         * The <em>unknown</em> operation.\n+         */\n+        UNKNOWN(\"unknown\");", "originalCommit": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEwMzg4Nw==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r522103887", "bodyText": "I've followed the same approach here as with the corresponding classes from the DeviceConnection, Tenant and Credentials APIs. It's used so that CommandRouterAction.from doesn't return null, meaning no extra null check is needed to use the return value in a \"switch .. case\".", "author": "calohmn", "createdAt": "2020-11-12T13:27:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNTcxMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNjE2NQ==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521926165", "bodyText": "is this class required to be in the core module? IMHO it will only ever be needed in the context of the client itself, or am I mistaken?", "author": "sophokles73", "createdAt": "2020-11-12T08:34:47Z", "path": "core/src/main/java/org/eclipse/hono/util/CommandRouterConstants.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.util;", "originalCommit": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjcxNDAzNg==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r522714036", "bodyText": "There are 2 use cases of the class:\nThe client uses the endpoint name and the action names (\"set-last-known-gw\", etc.) when opening the link/sending messages. (And the endpoint name is used as a bean qualifier.)\nThe server uses the endpoint name and actions in DelegatingCommandRouterAmqpEndpoint to receive/map incoming messages. That class would go into the service-base module if sticking to current conventions.\nSo, if not wanting to duplicate endpoint name and actions, I don't see a different, common place where these things can be put in. The service-base module isn't an option because it isn't referenced by hono-client-adapter-amqp.", "author": "calohmn", "createdAt": "2020-11-13T07:13:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNjE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc1MjM3Ng==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r522752376", "bodyText": "I see. You're right ...", "author": "sophokles73", "createdAt": "2020-11-13T07:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNjE2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNjk0MA==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521926940", "bodyText": "is this class required to be in the core module? IMHO it will only ever be needed in the context of the client itself, or am I mistaken?", "author": "sophokles73", "createdAt": "2020-11-12T08:36:10Z", "path": "core/src/main/java/org/eclipse/hono/util/CommandRouterResult.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.util;", "originalCommit": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE1ODQxNg==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r522158416", "bodyText": "If sticking to the way the other API services are implemented, the Result class is also used in the service interface in the form of Future<CommandRouterResult> method return values. That means it's also used in the command router server implementation.", "author": "calohmn", "createdAt": "2020-11-12T14:43:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNjk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjcwMTY2Nw==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r522701667", "bodyText": "Actually, in the client the CommandRouterResult isn't really needed. It's only used internally in the ProtonBasedTenantCommandRouterClient class and can be replaced with RequestResponseResult<JsonObject> there.\nSo, I've done the replacement and removed the class for now.", "author": "calohmn", "createdAt": "2020-11-13T06:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNjk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc3MTE5NQ==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r522771195", "bodyText": "I did not want to suggest to remove the class altogether but to simply move it to the adapter-amqp module or even make it a private class of ProtonBasedTenantCommandRouterClient. Your choice ...", "author": "sophokles73", "createdAt": "2020-11-13T08:09:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNjk0MA=="}], "type": "inlineReview", "revised_code": {"commit": "c01147f7c0e30489254774f4475b9cf3ef214e8f", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/util/CommandRouterResult.java b/core/src/main/java/org/eclipse/hono/util/CommandRouterResult.java\ndeleted file mode 100644\nindex 98b10ec3f..000000000\n--- a/core/src/main/java/org/eclipse/hono/util/CommandRouterResult.java\n+++ /dev/null\n\n@@ -1,102 +0,0 @@\n-/*******************************************************************************\n- * Copyright (c) 2020 Contributors to the Eclipse Foundation\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information regarding copyright ownership.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- *******************************************************************************/\n-\n-package org.eclipse.hono.util;\n-\n-import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n-\n-import io.vertx.core.json.DecodeException;\n-import io.vertx.core.json.JsonObject;\n-\n-/**\n- * A container for the result returned by Hono's Command Router API.\n- *\n- */\n-public final class CommandRouterResult extends RequestResponseResult<JsonObject> {\n-\n-    private CommandRouterResult(\n-            final int status,\n-            final JsonObject payload,\n-            final CacheDirective cacheDirective,\n-            final ApplicationProperties applicationProperties) {\n-        super(status, payload, cacheDirective, applicationProperties);\n-    }\n-\n-    /**\n-     * Creates a new result for a status code.\n-     *\n-     * @param status The status code.\n-     * @return The result.\n-     */\n-    public static CommandRouterResult from(final int status) {\n-        return new CommandRouterResult(status, null, null, null);\n-    }\n-\n-    /**\n-     * Creates a new result for a status code and a payload.\n-     *\n-     * @param status The status code.\n-     * @param payload The payload to include in the result.\n-     * @return The result.\n-     */\n-    public static CommandRouterResult from(final int status, final JsonObject payload) {\n-        return new CommandRouterResult(status, payload, null, null);\n-    }\n-\n-    /**\n-     * Creates a new result for a status code and a payload.\n-     *\n-     * @param status The status code.\n-     * @param payload The string representation of the JSON payload\n-     *                to include in the result (may be {@code null}).\n-     * @return The result.\n-     * @throws DecodeException if the given payload is not valid JSON.\n-     */\n-    public static CommandRouterResult from(final int status, final String payload) {\n-        if (payload != null) {\n-            return new CommandRouterResult(status, new JsonObject(payload), null, null);\n-        } else {\n-            return new CommandRouterResult(status, null, null, null);\n-        }\n-    }\n-\n-    /**\n-     * Creates a new result for a status code and a payload.\n-     *\n-     * @param status The status code.\n-     * @param payload The payload to include in the result.\n-     * @param cacheDirective Restrictions regarding the caching of the payload.\n-     * @return The result.\n-     */\n-    public static CommandRouterResult from(final int status, final JsonObject payload, final CacheDirective cacheDirective) {\n-        return new CommandRouterResult(status, payload, cacheDirective, null);\n-    }\n-\n-    /**\n-     * Creates a new result for a status code and a payload.\n-     *\n-     * @param status The status code.\n-     * @param payload The payload to include in the result.\n-     * @param cacheDirective Restrictions regarding the caching of the payload.\n-     * @param applicationProperties Arbitrary properties conveyed in the response message's\n-     *                              <em>application-properties</em>.\n-     * @return The result.\n-     */\n-    public static CommandRouterResult from(\n-            final int status,\n-            final JsonObject payload,\n-            final CacheDirective cacheDirective,\n-            final ApplicationProperties applicationProperties) {\n-        return new CommandRouterResult(status, payload, cacheDirective, applicationProperties);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMDE4Mg==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521930182", "bodyText": "there is no cache provider param ...", "author": "sophokles73", "createdAt": "2020-11-12T08:41:38Z", "path": "clients/adapter-amqp/src/main/java/org/eclipse/hono/adapter/client/command/amqp/ProtonBasedTenantCommandRouterClient.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.client.command.amqp;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.client.HonoConnection;\n+import org.eclipse.hono.client.SendMessageSampler;\n+import org.eclipse.hono.client.ServiceInvocationException;\n+import org.eclipse.hono.client.StatusCodeMapper;\n+import org.eclipse.hono.client.impl.AbstractRequestResponseClient;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.CacheDirective;\n+import org.eclipse.hono.util.CommandRouterConstants;\n+import org.eclipse.hono.util.CommandRouterResult;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.proton.ProtonDelivery;\n+import io.vertx.proton.ProtonReceiver;\n+import io.vertx.proton.ProtonSender;\n+\n+/**\n+ * A Vertx-Proton based client for Hono's Command Router API, scoped to a specific tenant.\n+ *\n+ */\n+class ProtonBasedTenantCommandRouterClient extends AbstractRequestResponseClient<CommandRouterResult> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ProtonBasedTenantCommandRouterClient.class);\n+\n+    /**\n+     * Creates a new client for accessing the Command Router service.\n+     * <p>\n+     * The client will be ready to use after invoking {@link #createLinks()} or\n+     * {@link #createLinks(Handler, Handler)} only.\n+     *\n+     * @param connection The connection to the Command Router service.\n+     * @param tenantId The identifier of the tenant for which the client should be created.\n+     * @param sampler The sampler to use.\n+     */\n+    protected ProtonBasedTenantCommandRouterClient(final HonoConnection connection, final String tenantId, final SendMessageSampler sampler) {\n+        super(connection, tenantId, sampler);\n+    }\n+\n+    /**\n+     * Creates a new client for accessing the Command Router service.\n+     *\n+     * @param connection The connection to the Command Router service.\n+     * @param tenantId The identifier of the tenant for which the client should be created.\n+     * @param sender The AMQP link to use for sending requests to the service.\n+     * @param receiver The AMQP link to use for receiving responses from the service.\n+     * @param sampler The sampler to use.\n+     */\n+    protected ProtonBasedTenantCommandRouterClient(\n+            final HonoConnection connection,\n+            final String tenantId,\n+            final ProtonSender sender,\n+            final ProtonReceiver receiver,\n+            final SendMessageSampler sampler) {\n+\n+        super(connection, tenantId, sender, receiver, sampler);\n+    }\n+\n+    /**\n+     * Gets the AMQP <em>target</em> address to use for sending requests to Hono's Command Router API endpoint.\n+     *\n+     * @param tenantId The tenant to upload data for.\n+     * @return The target address.\n+     * @throws NullPointerException if tenant is {@code null}.\n+     */\n+    public static final String getTargetAddress(final String tenantId) {\n+        return String.format(\"%s/%s\", CommandRouterConstants.COMMAND_ROUTER_ENDPOINT, Objects.requireNonNull(tenantId));\n+    }\n+\n+    @Override\n+    protected final String getName() {\n+        return CommandRouterConstants.COMMAND_ROUTER_ENDPOINT;\n+    }\n+\n+    @Override\n+    protected final String createMessageId() {\n+        return String.format(\"cmd-router-client-%s\", UUID.randomUUID());\n+    }\n+\n+    @Override\n+    protected final CommandRouterResult getResult(\n+            final int status,\n+            final String contentType,\n+            final Buffer payload,\n+            final CacheDirective cacheDirective,\n+            final ApplicationProperties applicationProperties) {\n+\n+        if (payload == null) {\n+            return CommandRouterResult.from(status, null, null, applicationProperties);\n+        } else {\n+            try {\n+                // ignoring given cacheDirective param here - command router results shall not be cached\n+                return CommandRouterResult.from(status, new JsonObject(payload), CacheDirective.noCacheDirective(), applicationProperties);\n+            } catch (final DecodeException e) {\n+                LOG.warn(\"received malformed payload from Command Router service\", e);\n+                return CommandRouterResult.from(HttpURLConnection.HTTP_INTERNAL_ERROR, null, null, applicationProperties);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Creates a new command router client for a tenant.\n+     *\n+     * @param con The connection to the server.\n+     * @param tenantId The tenant to consumer events for.\n+     * @param sampler The sampler to use.\n+     * @param senderCloseHook A handler to invoke if the peer closes the sender link unexpectedly.\n+     * @param receiverCloseHook A handler to invoke if the peer closes the receiver link unexpectedly.\n+     * @return A future indicating the outcome of the creation attempt.\n+     * @throws NullPointerException if any of the parameters other than cache provider is {@code null}.", "originalCommit": "ace3c0d6baccf4e4e0f6c379c0fb1a956c42b9c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5ec1fa240b30083fda54d7a3e34cf75282dd98a", "chunk": "diff --git a/clients/adapter-amqp/src/main/java/org/eclipse/hono/adapter/client/command/amqp/ProtonBasedTenantCommandRouterClient.java b/clients/adapter-amqp/src/main/java/org/eclipse/hono/adapter/client/command/amqp/ProtonBasedTenantCommandRouterClient.java\nindex 593669094..5f7df8283 100644\n--- a/clients/adapter-amqp/src/main/java/org/eclipse/hono/adapter/client/command/amqp/ProtonBasedTenantCommandRouterClient.java\n+++ b/clients/adapter-amqp/src/main/java/org/eclipse/hono/adapter/client/command/amqp/ProtonBasedTenantCommandRouterClient.java\n\n@@ -140,7 +140,7 @@ class ProtonBasedTenantCommandRouterClient extends AbstractRequestResponseClient\n      * @param senderCloseHook A handler to invoke if the peer closes the sender link unexpectedly.\n      * @param receiverCloseHook A handler to invoke if the peer closes the receiver link unexpectedly.\n      * @return A future indicating the outcome of the creation attempt.\n-     * @throws NullPointerException if any of the parameters other than cache provider is {@code null}.\n+     * @throws NullPointerException if any of the parameters is {@code null}.\n      */\n     public static final Future<ProtonBasedTenantCommandRouterClient> create(\n             final HonoConnection con,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMjQyNA==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521932424", "bodyText": "we do not return a boolean value here, do we?", "author": "sophokles73", "createdAt": "2020-11-12T08:45:14Z", "path": "clients/adapter-amqp/src/test/java/org/eclipse/hono/adapter/client/command/amqp/ProtonBasedTenantCommandRouterClientTest.java", "diffHunk": "@@ -0,0 +1,510 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.client.command.amqp;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Duration;\n+\n+import org.apache.qpid.proton.amqp.messaging.Rejected;\n+import org.apache.qpid.proton.amqp.transport.Target;\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.client.HonoConnection;\n+import org.eclipse.hono.client.RequestResponseClientConfigProperties;\n+import org.eclipse.hono.client.SendMessageSampler;\n+import org.eclipse.hono.client.ServiceInvocationException;\n+import org.eclipse.hono.config.ClientConfigProperties;\n+import org.eclipse.hono.test.TracingMockSupport;\n+import org.eclipse.hono.test.VertxMockSupport;\n+import org.eclipse.hono.util.CacheDirective;\n+import org.eclipse.hono.util.CommandRouterConstants.CommandRouterAction;\n+import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import io.vertx.proton.ProtonDelivery;\n+import io.vertx.proton.ProtonHelper;\n+import io.vertx.proton.ProtonQoS;\n+import io.vertx.proton.ProtonReceiver;\n+import io.vertx.proton.ProtonSender;\n+\n+\n+/**\n+ * Tests verifying behavior of {@link ProtonBasedTenantCommandRouterClient}.\n+ *\n+ */\n+@ExtendWith(VertxExtension.class)\n+public class ProtonBasedTenantCommandRouterClientTest {\n+\n+    private ProtonSender sender;\n+    private ProtonBasedTenantCommandRouterClient client;\n+    private Span span;\n+\n+    /**\n+     * Sets up the fixture.\n+     */\n+    @BeforeEach\n+    public void setUp() {\n+\n+        span = TracingMockSupport.mockSpan();\n+        final Tracer tracer = TracingMockSupport.mockTracer(span);\n+\n+        final Vertx vertx = mock(Vertx.class);\n+        final ProtonReceiver receiver = mockProtonReceiver();\n+        sender = mockProtonSender();\n+\n+        final RequestResponseClientConfigProperties config = new RequestResponseClientConfigProperties();\n+        final HonoConnection connection = mockHonoConnection(vertx, config, tracer);\n+        when(connection.getTracer()).thenReturn(tracer);\n+\n+        client = new ProtonBasedTenantCommandRouterClient(connection, Constants.DEFAULT_TENANT, sender, receiver, SendMessageSampler.noop());\n+    }\n+\n+    /**\n+     * Verifies that the client handles the response of the <em>set-last-known-gateway</em> operation from the\n+     * Command Router service.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    public void testSetLastKnownGatewayForDeviceSuccess(final VertxTestContext ctx) {\n+\n+        // WHEN setting the last known gateway\n+        client.setLastKnownGatewayForDevice(\"deviceId\", \"gatewayId\", span.context())\n+                .onComplete(ctx.succeeding(r -> {\n+                    ctx.verify(() -> {\n+                        // THEN the response has been handled and the span is finished\n+                        verify(span).finish();\n+                    });\n+                    ctx.completeNow();\n+                }));\n+\n+        final Message sentMessage = verifySenderSend();\n+        final Message response = createNoContentResponseMessage(sentMessage.getMessageId());\n+        client.doHandleResponse(mock(ProtonDelivery.class), response);\n+    }\n+\n+    /**\n+     * Verifies that the client handles the response of the <em>register-command-consumer</em> operation from the\n+     * Command Router service.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    public void testRegisterCommandConsumer(final VertxTestContext ctx) {\n+\n+        // WHEN registering the command consumer\n+        client.registerCommandConsumer(\"deviceId\", \"adapterInstanceId\", null, span.context())\n+                .onComplete(ctx.succeeding(r -> {\n+                    ctx.verify(() -> {\n+                        // THEN the response has been handled and the span is finished\n+                        verify(span).finish();\n+                    });\n+                    ctx.completeNow();\n+                }));\n+\n+        final Message sentMessage = verifySenderSend();\n+        final Message response = createNoContentResponseMessage(sentMessage.getMessageId());\n+        client.doHandleResponse(mock(ProtonDelivery.class), response);\n+    }\n+\n+    /**\n+     * Verifies that the client handles the response of the <em>unregister-command-consumer</em> operation from the\n+     * Command Router service.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    public void testUnregisterCommandConsumer(final VertxTestContext ctx) {\n+\n+        // WHEN unregistering the command consumer\n+        client.unregisterCommandConsumer(\"deviceId\", \"adapterInstanceId\", span.context())\n+                .onComplete(ctx.succeeding(r -> {\n+                    ctx.verify(() -> {\n+                        // THEN the response has been handled and the span is finished\n+                        verify(span).finish();\n+                    });\n+                    ctx.completeNow();\n+                }));\n+\n+        final Message sentMessage = verifySenderSend();\n+        final Message response = createNoContentResponseMessage(sentMessage.getMessageId());\n+        client.doHandleResponse(mock(ProtonDelivery.class), response);\n+    }\n+\n+    /**\n+     * Verifies that a client invocation of the <em>set-last-known-gateway</em> operation fails\n+     * if the command router service cannot be reached.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    public void testSetLastKnownGatewayForDeviceFailsWithSendError(final VertxTestContext ctx) {\n+\n+        // GIVEN a client with no credit left\n+        when(sender.sendQueueFull()).thenReturn(true);\n+\n+        // WHEN setting last known gateway information\n+        client.setLastKnownGatewayForDevice(\"deviceId\", \"gatewayId\", span.context())\n+                .onComplete(ctx.failing(t -> {\n+                    ctx.verify(() -> {\n+                        // THEN the invocation fails and the span is marked as erroneous\n+                        verify(span).setTag(eq(Tags.ERROR.getKey()), eq(Boolean.TRUE));\n+                        // and the span is finished\n+                        verify(span).finish();\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a client invocation of the <em>register-command-consumer</em> operation fails\n+     * if the command router service cannot be reached.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    public void testRegisterCommandConsumerFailsWithSendError(final VertxTestContext ctx) {\n+\n+        // GIVEN a client with no credit left\n+        when(sender.sendQueueFull()).thenReturn(true);\n+\n+        // WHEN registering the command consumer\n+        client.registerCommandConsumer(\"deviceId\", \"adapterInstanceId\", null, span.context())\n+                .onComplete(ctx.failing(t -> {\n+                    ctx.verify(() -> {\n+                        // THEN the invocation fails and the span is marked as erroneous\n+                        verify(span).setTag(eq(Tags.ERROR.getKey()), eq(Boolean.TRUE));\n+                        // and the span is finished\n+                        verify(span).finish();\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a client invocation of the <em>unregister-command-consumer</em> operation fails\n+     * if the command router service cannot be reached.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    public void testUnregisterCommandConsumerFailsWithSendError(final VertxTestContext ctx) {\n+\n+        // GIVEN a client with no credit left\n+        when(sender.sendQueueFull()).thenReturn(true);\n+\n+        // WHEN unregistering the command consumer\n+        client.unregisterCommandConsumer(\"deviceId\", \"adapterInstanceId\", span.context())\n+                .onComplete(ctx.failing(t -> {\n+                    ctx.verify(() -> {\n+                        // THEN the invocation fails and the span is marked as erroneous\n+                        verify(span).setTag(eq(Tags.ERROR.getKey()), eq(Boolean.TRUE));\n+                        // and the span is finished\n+                        verify(span).finish();\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a client invocation of the <em>unregister-command-consumer</em> operation\n+     * returns a <em>Boolean.FALSE</em> value if a <em>PRECON_FAILED</em> response was returned.", "originalCommit": "ace3c0d6baccf4e4e0f6c379c0fb1a956c42b9c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5ec1fa240b30083fda54d7a3e34cf75282dd98a", "chunk": "diff --git a/clients/adapter-amqp/src/test/java/org/eclipse/hono/adapter/client/command/amqp/ProtonBasedTenantCommandRouterClientTest.java b/clients/adapter-amqp/src/test/java/org/eclipse/hono/adapter/client/command/amqp/ProtonBasedTenantCommandRouterClientTest.java\nindex 27cf0ce2a..d9cd24765 100644\n--- a/clients/adapter-amqp/src/test/java/org/eclipse/hono/adapter/client/command/amqp/ProtonBasedTenantCommandRouterClientTest.java\n+++ b/clients/adapter-amqp/src/test/java/org/eclipse/hono/adapter/client/command/amqp/ProtonBasedTenantCommandRouterClientTest.java\n\n@@ -238,7 +238,7 @@ public class ProtonBasedTenantCommandRouterClientTest {\n \n     /**\n      * Verifies that a client invocation of the <em>unregister-command-consumer</em> operation\n-     * returns a <em>Boolean.FALSE</em> value if a <em>PRECON_FAILED</em> response was returned.\n+     * fails if a <em>PRECON_FAILED</em> response was returned from the command router service.\n      *\n      * @param ctx The vert.x test context.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMzA3MQ==", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521933071", "bodyText": "or tenant id", "author": "sophokles73", "createdAt": "2020-11-12T08:46:21Z", "path": "clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.client.command;\n+\n+import java.time.Duration;\n+\n+import org.eclipse.hono.util.Lifecycle;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+\n+/**\n+ * A client for accessing Hono's Command Router API.\n+ * <p>\n+ * See Hono's <a href=\"https://www.eclipse.org/hono/docs/api/command-router\">\n+ * Command Router API</a> for a description of the status codes returned.\n+ */\n+public interface CommandRouterClient extends Lifecycle {\n+\n+    /**\n+     * Sets the given gateway as the last gateway that acted on behalf of the given device.\n+     * <p>\n+     * If a device connects directly instead of through a gateway, the device identifier itself is to be used as value\n+     * for the <em>gatewayId</em> parameter.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param gatewayId The gateway id (or the device id if the last message came from the device directly).\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.\n+     * @throws NullPointerException if device id or gateway id is {@code null}.", "originalCommit": "ace3c0d6baccf4e4e0f6c379c0fb1a956c42b9c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5ec1fa240b30083fda54d7a3e34cf75282dd98a", "chunk": "diff --git a/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java b/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\nindex aee3549f2..ed0cd75c5 100644\n--- a/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\n+++ b/clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java\n\n@@ -41,7 +41,7 @@ public interface CommandRouterClient extends Lifecycle {\n      *            An implementation should use this as the parent for any span it creates for tracing\n      *            the execution of this operation.\n      * @return A future indicating whether the operation succeeded or not.\n-     * @throws NullPointerException if device id or gateway id is {@code null}.\n+     * @throws NullPointerException if any of the parameters except context is {@code null}.\n      */\n     Future<Void> setLastKnownGatewayForDevice(String tenantId, String deviceId, String gatewayId, SpanContext context);\n \n"}}, {"oid": "f5ec1fa240b30083fda54d7a3e34cf75282dd98a", "url": "https://github.com/eclipse/hono/commit/f5ec1fa240b30083fda54d7a3e34cf75282dd98a", "message": "[#2029] Add Command Router client.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-11-12T13:35:55Z", "type": "forcePushed"}, {"oid": "c01147f7c0e30489254774f4475b9cf3ef214e8f", "url": "https://github.com/eclipse/hono/commit/c01147f7c0e30489254774f4475b9cf3ef214e8f", "message": "[#2029] Add Command Router client.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-11-13T06:57:10Z", "type": "forcePushed"}, {"oid": "61e97b4c7b9620fdf83062f3ddc7ed6b540360bf", "url": "https://github.com/eclipse/hono/commit/61e97b4c7b9620fdf83062f3ddc7ed6b540360bf", "message": "[#2029] Add Command Router client.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-11-13T07:26:27Z", "type": "commit"}, {"oid": "61e97b4c7b9620fdf83062f3ddc7ed6b540360bf", "url": "https://github.com/eclipse/hono/commit/61e97b4c7b9620fdf83062f3ddc7ed6b540360bf", "message": "[#2029] Add Command Router client.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-11-13T07:26:27Z", "type": "forcePushed"}]}