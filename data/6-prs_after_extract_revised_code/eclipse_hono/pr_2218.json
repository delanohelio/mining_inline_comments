{"pr_number": 2218, "pr_title": "Release and settle delivery when waiting for update timed out", "pr_createdAt": "2020-09-28T09:20:58Z", "pr_url": "https://github.com/eclipse/hono/pull/2218", "timeline": [{"oid": "d82b78a2036dd365ae74ecf0cb2da24f4d6bf961", "url": "https://github.com/eclipse/hono/commit/d82b78a2036dd365ae74ecf0cb2da24f4d6bf961", "message": "Release and settle delivery when waiting for update timed out.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-10-05T07:11:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc2MTM0Nw==", "url": "https://github.com/eclipse/hono/pull/2218#discussion_r500761347", "bodyText": "how about adding a comment here explaining why we are doing this?", "author": "sophokles73", "createdAt": "2020-10-07T06:16:53Z", "path": "client/src/main/java/org/eclipse/hono/client/impl/AbstractSender.java", "diffHunk": "@@ -282,13 +285,15 @@ protected final Span startSpan(final Message message) {\n                                         + connection.getConfig().getSendMessageTimeout() + \"ms\");\n                         logMessageSendingError(\"waiting for delivery update timed out for message [ID: {}, address: {}] after {}ms\",\n                                 messageId, getMessageAddress(message), connection.getConfig().getSendMessageTimeout());\n+                        Optional.ofNullable(deliveryRef.get())", "originalCommit": "d82b78a2036dd365ae74ecf0cb2da24f4d6bf961", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98352f47da27fcb3ee7b6e10bc9f0873cc2f41b3", "chunk": "diff --git a/client/src/main/java/org/eclipse/hono/client/impl/AbstractSender.java b/client/src/main/java/org/eclipse/hono/client/impl/AbstractSender.java\nindex 2b371990f..a4c1e966a 100644\n--- a/client/src/main/java/org/eclipse/hono/client/impl/AbstractSender.java\n+++ b/client/src/main/java/org/eclipse/hono/client/impl/AbstractSender.java\n\n@@ -285,6 +285,9 @@ public abstract class AbstractSender extends AbstractHonoClient implements Messa\n                                         + connection.getConfig().getSendMessageTimeout() + \"ms\");\n                         logMessageSendingError(\"waiting for delivery update timed out for message [ID: {}, address: {}] after {}ms\",\n                                 messageId, getMessageAddress(message), connection.getConfig().getSendMessageTimeout());\n+                        // settle and release the delivery - this ensures that the message isn't considered \"in flight\"\n+                        // anymore in the AMQP messaging network and that it doesn't count towards the link capacity\n+                        // (it would be enough to just settle the delivery without an outcome but that cannot be done with proton-j as of now)\n                         Optional.ofNullable(deliveryRef.get())\n                                 .ifPresent(delivery -> ProtonHelper.released(delivery, true));\n                         result.fail(exception);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc2MTQwNg==", "url": "https://github.com/eclipse/hono/pull/2218#discussion_r500761406", "bodyText": "comment?", "author": "sophokles73", "createdAt": "2020-10-07T06:17:08Z", "path": "client/src/main/java/org/eclipse/hono/client/impl/DelegatedCommandSenderImpl.java", "diffHunk": "@@ -142,13 +146,15 @@ public String getEndpoint() {\n                                         + connection.getConfig().getSendMessageTimeout() + \"ms\");\n                         logMessageSendingError(\"waiting for delivery update timed out for message [ID: {}, address: {}] after {}ms\",\n                                 messageId, getMessageAddress(message), connection.getConfig().getSendMessageTimeout());\n+                        Optional.ofNullable(deliveryRef.get())", "originalCommit": "d82b78a2036dd365ae74ecf0cb2da24f4d6bf961", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98352f47da27fcb3ee7b6e10bc9f0873cc2f41b3", "chunk": "diff --git a/client/src/main/java/org/eclipse/hono/client/impl/DelegatedCommandSenderImpl.java b/client/src/main/java/org/eclipse/hono/client/impl/DelegatedCommandSenderImpl.java\nindex d2b989e23..34ee5328c 100644\n--- a/client/src/main/java/org/eclipse/hono/client/impl/DelegatedCommandSenderImpl.java\n+++ b/client/src/main/java/org/eclipse/hono/client/impl/DelegatedCommandSenderImpl.java\n\n@@ -146,6 +146,9 @@ public class DelegatedCommandSenderImpl extends AbstractSender implements Delega\n                                         + connection.getConfig().getSendMessageTimeout() + \"ms\");\n                         logMessageSendingError(\"waiting for delivery update timed out for message [ID: {}, address: {}] after {}ms\",\n                                 messageId, getMessageAddress(message), connection.getConfig().getSendMessageTimeout());\n+                        // settle and release the delivery - this ensures that the message isn't considered \"in flight\"\n+                        // anymore in the AMQP messaging network and that it doesn't count towards the link capacity\n+                        // (it would be enough to just settle the delivery without an outcome but that cannot be done with proton-j as of now)\n                         Optional.ofNullable(deliveryRef.get())\n                                 .ifPresent(delivery -> ProtonHelper.released(delivery, true));\n                         result.fail(exception);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc2MTY2NA==", "url": "https://github.com/eclipse/hono/pull/2218#discussion_r500761664", "bodyText": "comment?", "author": "sophokles73", "createdAt": "2020-10-07T06:17:54Z", "path": "client/src/main/java/org/eclipse/hono/client/impl/TelemetrySenderImpl.java", "diffHunk": "@@ -180,6 +184,8 @@ protected String getTo(final String deviceId) {\n                         logMessageSendingError(\n                                 \"waiting for delivery update timed out for message [ID: {}, address: {}] after {}ms\",\n                                 messageId, getMessageAddress(message), connection.getConfig().getSendMessageTimeout());\n+                        Optional.ofNullable(deliveryRef.get())", "originalCommit": "d82b78a2036dd365ae74ecf0cb2da24f4d6bf961", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98352f47da27fcb3ee7b6e10bc9f0873cc2f41b3", "chunk": "diff --git a/client/src/main/java/org/eclipse/hono/client/impl/TelemetrySenderImpl.java b/client/src/main/java/org/eclipse/hono/client/impl/TelemetrySenderImpl.java\nindex 711695015..c7a6d8b43 100644\n--- a/client/src/main/java/org/eclipse/hono/client/impl/TelemetrySenderImpl.java\n+++ b/client/src/main/java/org/eclipse/hono/client/impl/TelemetrySenderImpl.java\n\n@@ -184,6 +184,9 @@ public class TelemetrySenderImpl extends AbstractDownstreamSender {\n                         logMessageSendingError(\n                                 \"waiting for delivery update timed out for message [ID: {}, address: {}] after {}ms\",\n                                 messageId, getMessageAddress(message), connection.getConfig().getSendMessageTimeout());\n+                        // settle and release the delivery - this ensures that the message isn't considered \"in flight\"\n+                        // anymore in the AMQP messaging network and that it doesn't count towards the link capacity\n+                        // (it would be enough to just settle the delivery without an outcome but that cannot be done with proton-j as of now)\n                         Optional.ofNullable(deliveryRef.get())\n                                 .ifPresent(delivery -> ProtonHelper.released(delivery, true));\n                         TracingHelper.logError(currentSpan, exception.getMessage());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc2NDMwMA==", "url": "https://github.com/eclipse/hono/pull/2218#discussion_r500764300", "bodyText": "IMHO we should tie this check to after the HTTP client has gotten back its 501 response (and then wait some) in order to make it more robust against timing issues induced by scarce computing resources on the CI system ...", "author": "sophokles73", "createdAt": "2020-10-07T06:24:41Z", "path": "tests/src/test/java/org/eclipse/hono/tests/http/TelemetryHttpIT.java", "diffHunk": "@@ -194,8 +199,22 @@ public void testUploadQos1MessageFailsIfDeliveryStateNotUpdated(final VertxTestC\n                         tenantId, \n                         (delivery, msg) -> {\n                             logger.debug(\"received {}\", msg);\n+                            ctx.verify(() -> {\n+                                assertThat(delivery.remotelySettled()).isFalse();\n+                                assertThat(delivery.getRemoteState()).isNull();\n+                            });\n                             messageReceived.flag();\n                             // don't update the delivery state here\n+                            // wait for the delivery to get remotely settled via the timeout handling in the adapter\n+                            vertx.setTimer(ClientConfigProperties.DEFAULT_SEND_MESSAGE_TIMEOUT + 50, tid -> {", "originalCommit": "d82b78a2036dd365ae74ecf0cb2da24f4d6bf961", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98352f47da27fcb3ee7b6e10bc9f0873cc2f41b3", "chunk": "diff --git a/tests/src/test/java/org/eclipse/hono/tests/http/TelemetryHttpIT.java b/tests/src/test/java/org/eclipse/hono/tests/http/TelemetryHttpIT.java\nindex bce873f0f..9e6cb84cc 100644\n--- a/tests/src/test/java/org/eclipse/hono/tests/http/TelemetryHttpIT.java\n+++ b/tests/src/test/java/org/eclipse/hono/tests/http/TelemetryHttpIT.java\n\n@@ -193,11 +194,13 @@ public class TelemetryHttpIT extends HttpTestBase {\n \n         final VertxTestContext setup = new VertxTestContext();\n         final Checkpoint setupDone = setup.checkpoint();\n+        final AtomicReference<ProtonDelivery> deliveryRef = new AtomicReference<>();\n         helper.registry\n                 .addDeviceForTenant(tenantId, tenant, deviceId, PWD)\n                 .compose(ok -> helper.applicationClientFactory.createTelemetryConsumer(\n                         tenantId, \n                         (delivery, msg) -> {\n+                            deliveryRef.set(delivery);\n                             logger.debug(\"received {}\", msg);\n                             ctx.verify(() -> {\n                                 assertThat(delivery.remotelySettled()).isFalse();\n"}}, {"oid": "98352f47da27fcb3ee7b6e10bc9f0873cc2f41b3", "url": "https://github.com/eclipse/hono/commit/98352f47da27fcb3ee7b6e10bc9f0873cc2f41b3", "message": "Release and settle delivery when waiting for update has timed out.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-10-07T07:01:27Z", "type": "commit"}, {"oid": "98352f47da27fcb3ee7b6e10bc9f0873cc2f41b3", "url": "https://github.com/eclipse/hono/commit/98352f47da27fcb3ee7b6e10bc9f0873cc2f41b3", "message": "Release and settle delivery when waiting for update has timed out.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-10-07T07:01:27Z", "type": "forcePushed"}]}