{"pr_number": 1711, "pr_title": "[#1710] stop registry to return hashed-passwords details", "pr_createdAt": "2020-01-17T09:50:11Z", "pr_url": "https://github.com/eclipse/hono/pull/1711", "timeline": [{"oid": "a68c3c04ca7758fc2be6a54edf674e51e2fa9bc4", "url": "https://github.com/eclipse/hono/commit/a68c3c04ca7758fc2be6a54edf674e51e2fa9bc4", "message": "[#1710] stop registry to return hashed-passwords details but only returns metadata. Add a secret ID to secrets\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-01-17T10:01:21Z", "type": "forcePushed"}, {"oid": "4e067e5446006de2af4777dec5fd19fdc53e1afc", "url": "https://github.com/eclipse/hono/commit/4e067e5446006de2af4777dec5fd19fdc53e1afc", "message": "[#1710] stop registry to return hashed-passwords details but only returns metadata. Add a secret ID to secrets\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-01-22T10:09:15Z", "type": "forcePushed"}, {"oid": "f7c1f5375182eefc715d5eeb91a9c7627230a3e6", "url": "https://github.com/eclipse/hono/commit/f7c1f5375182eefc715d5eeb91a9c7627230a3e6", "message": "include Kai feedback\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-01-23T09:28:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEwNTMzNQ==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r370105335", "bodyText": "How about renaming this to the more general FIELD_ID since it is not really secrets specific anyway and might be used for other entities as well. WDYT?", "author": "sophokles73", "createdAt": "2020-01-23T13:06:20Z", "path": "core/src/main/java/org/eclipse/hono/util/RegistryManagementConstants.java", "diffHunk": "@@ -107,6 +107,10 @@\n     public static final String FIELD_CREDENTIALS_TOTAL           = \"total\";\n \n     /* secrets fields */\n+    /**\n+     * The name of the field that contains the secret id.\n+     */\n+    public static final String FIELD_SECRETS_ID                 = \"id\";", "originalCommit": "f7c1f5375182eefc715d5eeb91a9c7627230a3e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1ODA4MA==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r370558080", "bodyText": "Why not. I updated the description so it doesn't lower the code readability.", "author": "jbtrystram", "createdAt": "2020-01-24T10:11:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEwNTMzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3ac9016b8e53ed0e928172211ebd65e005a8ee57", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/util/RegistryManagementConstants.java b/core/src/main/java/org/eclipse/hono/util/RegistryManagementConstants.java\nindex 80e8678e1..1170035cb 100644\n--- a/core/src/main/java/org/eclipse/hono/util/RegistryManagementConstants.java\n+++ b/core/src/main/java/org/eclipse/hono/util/RegistryManagementConstants.java\n\n@@ -105,12 +105,12 @@ public final class RegistryManagementConstants extends RequestResponseApiConstan\n      * The name of the field that contains the number of credentials contained in a message.\n      */\n     public static final String FIELD_CREDENTIALS_TOTAL           = \"total\";\n-\n-    /* secrets fields */\n     /**\n-     * The name of the field that contains the secret id.\n+     * The name of the field that contains the id of the entity (e.g. secret id).\n      */\n-    public static final String FIELD_SECRETS_ID                 = \"id\";\n+    public static final String FIELD_ID = \"id\";\n+\n+    /* secrets fields */\n     /**\n      * The name of the field that contains the password hash.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEwNjAzNQ==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r370106035", "bodyText": "what is the uniqueness scope of this ID? I assume it is just the containing Credentials instance, right? However, IMHO we should document this here.", "author": "sophokles73", "createdAt": "2020-01-23T13:08:08Z", "path": "service-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonSecret.java", "diffHunk": "@@ -55,6 +58,21 @@ public CommonSecret setEnabled(final Boolean enabled) {\n         return this;\n     }\n \n+    public String getId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Sets the ID of the secret. This id may be assigned by the device registry.", "originalCommit": "f7c1f5375182eefc715d5eeb91a9c7627230a3e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1OTMyNg==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r370559326", "bodyText": "I updated the description.", "author": "jbtrystram", "createdAt": "2020-01-24T10:13:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEwNjAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0Nzc4MA==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r370647780", "bodyText": "Can these IDs be assigned by a client, i.e. when registering the credentials? If so, do we check that the IDs are unique within the credentials?", "author": "sophokles73", "createdAt": "2020-01-24T14:02:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEwNjAzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3ac9016b8e53ed0e928172211ebd65e005a8ee57", "chunk": "diff --git a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonSecret.java b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonSecret.java\nindex f2f078bff..bad795d96 100644\n--- a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonSecret.java\n+++ b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonSecret.java\n\n@@ -64,6 +64,7 @@ public abstract class CommonSecret {\n \n     /**\n      * Sets the ID of the secret. This id may be assigned by the device registry.\n+     * The id must be unique within the credentials set containing it.\n      *\n      * @param id The string to set as the id.\n      * @return   a reference to this for fluent use.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDExMTQ4Mw==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r370111483", "bodyText": "you shouldn't complete the context for each secret ...", "author": "sophokles73", "createdAt": "2020-01-23T13:20:37Z", "path": "tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsHttpIT.java", "diffHunk": "@@ -403,9 +403,11 @@ public void testGetAddedCredentials(final VertxTestContext context) {\n                 HttpURLConnection.HTTP_NO_CONTENT)\n                 .compose(ar -> registry.getCredentials(TENANT, deviceId))\n                 .setHandler(context.succeeding(b -> {\n-                    context.verify(() -> assertThat(b.toJsonArray())\n-                            .isEqualTo(new JsonArray().add(JsonObject.mapFrom(hashedPasswordCredential))));\n-                    context.completeNow();\n+                    final PasswordCredential cred = b.toJsonArray().getJsonObject(0).mapTo(PasswordCredential.class);\n+                    cred.getSecrets().forEach(secret -> {\n+                        context.verify(() -> assertThat(secret.getId()).isNotNull());\n+                        context.completeNow();;", "originalCommit": "f7c1f5375182eefc715d5eeb91a9c7627230a3e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NDI1Nw==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r370584257", "bodyText": "Good catch, thanks", "author": "jbtrystram", "createdAt": "2020-01-24T11:15:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDExMTQ4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3ac9016b8e53ed0e928172211ebd65e005a8ee57", "chunk": "diff --git a/tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsHttpIT.java b/tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsHttpIT.java\nindex 5b60ff513..4474f67f3 100644\n--- a/tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsHttpIT.java\n+++ b/tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsHttpIT.java\n\n@@ -406,8 +406,8 @@ public class CredentialsHttpIT {\n                     final PasswordCredential cred = b.toJsonArray().getJsonObject(0).mapTo(PasswordCredential.class);\n                     cred.getSecrets().forEach(secret -> {\n                         context.verify(() -> assertThat(secret.getId()).isNotNull());\n-                        context.completeNow();;\n                     });\n+                    context.completeNow();;\n                 }));\n \n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDExMjQxOA==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r370112418", "bodyText": "there is not much left to compare, is there?", "author": "sophokles73", "createdAt": "2020-01-23T13:22:44Z", "path": "tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsHttpIT.java", "diffHunk": "@@ -541,8 +543,33 @@ public void testGetAddedCredentialsButWithWrongAuthId(final VertxTestContext con\n     private static void assertResponseBodyContainsAllCredentials(final VertxTestContext context, final JsonArray responseBody,\n             final List<CommonCredential> expected) {\n \n+        assertThat(expected.size()).isEqualTo(responseBody.size());\n+\n+        responseBody.forEach(credential -> {\n+            JsonObject.mapFrom(credential).getJsonArray(CredentialsConstants.FIELD_SECRETS)\n+                    .forEach(secret -> {\n+                        // each secret should contain an ID.\n+                        assertThat(JsonObject.mapFrom(secret)\n+                                .getString(RegistryManagementConstants.FIELD_SECRETS_ID)).isNotNull();\n+                    });\n+        });\n+\n+        // secrets id were added by registry, strip it so we can compare other fields.\n+        responseBody.forEach(credential ->{\n+            ((JsonObject) credential).getJsonArray(CredentialsConstants.FIELD_SECRETS)\n+                    .forEach(secret -> {\n+                        ((JsonObject) secret).remove(RegistryManagementConstants.FIELD_SECRETS_ID);\n+                    });\n+        });\n+\n+        // The returned secrets won't contains the hashed password details fields, strip them from the expected values.\n         final JsonArray expectedArray = new JsonArray();\n-        expected.stream().forEach(credential -> expectedArray.add(JsonObject.mapFrom(credential)));\n+        expected.stream().forEach(credential -> {\n+            final JsonObject jsonCredential = JsonObject.mapFrom(credential);\n+            expectedArray.add(stripHashAndSaltFromPasswordSecret(jsonCredential));", "originalCommit": "f7c1f5375182eefc715d5eeb91a9c7627230a3e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NDEwMg==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r370584102", "bodyText": "the credential type, auth-id and all the credential-level fields are still there", "author": "jbtrystram", "createdAt": "2020-01-24T11:14:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDExMjQxOA=="}], "type": "inlineReview", "revised_code": {"commit": "3ac9016b8e53ed0e928172211ebd65e005a8ee57", "chunk": "diff --git a/tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsHttpIT.java b/tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsHttpIT.java\nindex 5b60ff513..4474f67f3 100644\n--- a/tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsHttpIT.java\n+++ b/tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsHttpIT.java\n\n@@ -550,7 +550,7 @@ public class CredentialsHttpIT {\n                     .forEach(secret -> {\n                         // each secret should contain an ID.\n                         assertThat(JsonObject.mapFrom(secret)\n-                                .getString(RegistryManagementConstants.FIELD_SECRETS_ID)).isNotNull();\n+                                .getString(RegistryManagementConstants.FIELD_ID)).isNotNull();\n                     });\n         });\n \n"}}, {"oid": "3ac9016b8e53ed0e928172211ebd65e005a8ee57", "url": "https://github.com/eclipse/hono/commit/3ac9016b8e53ed0e928172211ebd65e005a8ee57", "message": "include Kai feedback\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-01-24T11:25:40Z", "type": "forcePushed"}, {"oid": "ac424b8ee2e53ff15adee31b5ef7634d751ba84c", "url": "https://github.com/eclipse/hono/commit/ac424b8ee2e53ff15adee31b5ef7634d751ba84c", "message": "include Kai feedback\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-01-24T13:43:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0ODM5Mg==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r370648392", "bodyText": "what if they already have an ID, e.g. provided by the client?", "author": "sophokles73", "createdAt": "2020-01-24T14:03:47Z", "path": "services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java", "diffHunk": "@@ -539,6 +539,10 @@ public void set(final String tenantId, final String deviceId, final Optional<Str\n                 credentialsJson.put(CredentialsConstants.FIELD_SECRETS, secretsJson);\n             }\n             secretsJson.addAll(credentialObject.getJsonArray(CredentialsConstants.FIELD_SECRETS));\n+            // add an id for each secret.\n+            secretsJson.forEach(secret -> {", "originalCommit": "ac424b8ee2e53ff15adee31b5ef7634d751ba84c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2e148959b26ef049489ba5a579e15c3575813e8", "chunk": "diff --git a/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java b/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\nindex 3f89a494c..23aa254dd 100644\n--- a/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\n+++ b/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\n\n@@ -532,17 +535,65 @@ public final class FileBasedCredentialsService extends AbstractVerticle\n             // start updating\n             dirty = true;\n \n-            var secretsJson = credentialsJson.getJsonArray(CredentialsConstants.FIELD_SECRETS);\n+            JsonArray secretsJson = credentialsJson.getJsonArray(CredentialsConstants.FIELD_SECRETS);\n             if (secretsJson == null) {\n                 // secrets field was missing, assign\n                 secretsJson = new JsonArray();\n                 credentialsJson.put(CredentialsConstants.FIELD_SECRETS, secretsJson);\n             }\n-            secretsJson.addAll(credentialObject.getJsonArray(CredentialsConstants.FIELD_SECRETS));\n-            // add an id for each secret.\n-            secretsJson.forEach(secret -> {\n-                ((JsonObject) secret).put(RegistryManagementConstants.FIELD_ID, UUID.randomUUID().toString());\n-            });\n+\n+            final JsonArray inputSecrets = credentialObject.getJsonArray(CredentialsConstants.FIELD_SECRETS);\n+            final JsonArray definitiveInputSecret = new JsonArray();\n+            for (Object inputSecret : inputSecrets) {\n+                final JsonObject secret = (JsonObject) inputSecret;\n+                final String secretId = secret.getString(RegistryManagementConstants.FIELD_ID);\n+\n+                // No secret ID specified : create a new secret\n+                if (Strings.isNullOrEmpty(secretId)) {\n+                    secret.put(RegistryManagementConstants.FIELD_ID, UUID.randomUUID().toString());\n+                    definitiveInputSecret.add(secret);\n+                // secret ID specified\n+                } else {\n+                    // Find the corresponding secret with the given ID.\n+                    boolean found = false;\n+                    for (Object st : secretsJson) {\n+                        final JsonObject existingSecret = (JsonObject) st;\n+                        if (secretId.equals(existingSecret.getString(RegistryManagementConstants.FIELD_ID))) {\n+                            found = true;\n+                            final JsonObject newSecret = new JsonObject();\n+                            // First we carry over existing details\n+                            for (String field : existingSecret.fieldNames()) {\n+                                newSecret.put(field, existingSecret.getValue(field));\n+                            }\n+                            // update the secret : remove the old values.\n+                            if (secret.containsKey(CredentialsConstants.FIELD_SECRETS_PWD_PLAIN)\n+                                    || secret.containsKey(CredentialsConstants.FIELD_SECRETS_KEY)\n+                                    || secret.containsKey(CredentialsConstants.FIELD_SECRETS_PWD_HASH)\n+                                    || secret.containsKey(CredentialsConstants.FIELD_SECRETS_SALT)) {\n+\n+                                removePasswordDetailsFromSecret(newSecret);\n+                            }\n+                            // then copy the new details.\n+                            for (String field : secret.fieldNames()) {\n+                                newSecret.put(field, secret.getValue(field));\n+                            }\n+                            definitiveInputSecret.add(newSecret);\n+                        }\n+                    }\n+\n+                    // check if the secretID given was found\n+                    if (! found) {\n+                        TracingHelper.logError(span, \"secret ID given does not exist for this auth-id and type.\");\n+                        return OperationResult.empty(HttpURLConnection.HTTP_BAD_REQUEST);\n+                    }\n+                }\n+            }\n+\n+            // Now we can remove all the secrets\n+            secretsJson.clear();\n+\n+            // Write the new secrets\n+            secretsJson.addAll(definitiveInputSecret);\n             credentialsForTenant.put(authId, json);\n         }\n \n"}}, {"oid": "f2e148959b26ef049489ba5a579e15c3575813e8", "url": "https://github.com/eclipse/hono/commit/f2e148959b26ef049489ba5a579e15c3575813e8", "message": "add unit tests\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-02-04T08:52:26Z", "type": "forcePushed"}, {"oid": "fe4277bdc0e5240900582cea8acaeaa7d587426e", "url": "https://github.com/eclipse/hono/commit/fe4277bdc0e5240900582cea8acaeaa7d587426e", "message": "add unit tests\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-02-04T14:18:39Z", "type": "forcePushed"}, {"oid": "8ee3909b3420f625939462e61998836570363be8", "url": "https://github.com/eclipse/hono/commit/8ee3909b3420f625939462e61998836570363be8", "message": "add unit tests\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-02-04T15:04:06Z", "type": "forcePushed"}, {"oid": "a944110fabf8ce2f308004e1643dd861322eb2ea", "url": "https://github.com/eclipse/hono/commit/a944110fabf8ce2f308004e1643dd861322eb2ea", "message": "[#1710] stop registry to return hashed-passwords details but only returns metadata. Add a secret ID to secrets\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-02-04T15:06:18Z", "type": "forcePushed"}, {"oid": "f6a4f182da030c3f02dfc8a9e9dd6697846e55b9", "url": "https://github.com/eclipse/hono/commit/f6a4f182da030c3f02dfc8a9e9dd6697846e55b9", "message": "[#1710] stop registry to return hashed-passwords details but only returns metadata. Add a secret ID to secrets\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-02-10T14:28:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3Njc2MQ==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r377576761", "bodyText": "Can we keep formatting consistent. There are a couple of places where there's no space after bracket and at some places there's a space in negation statement. We can also consider adding it to the check style.", "author": "dejanb", "createdAt": "2020-02-11T11:24:53Z", "path": "service-base/src/main/java/org/eclipse/hono/service/management/credentials/PasswordSecret.java", "diffHunk": "@@ -112,6 +112,9 @@ protected ToStringHelper toStringHelper() {\n     @Override\n     public void checkValidity() {\n         super.checkValidity();\n+        if (containsOnlySecretId()){", "originalCommit": "f6a4f182da030c3f02dfc8a9e9dd6697846e55b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ec32a2a2bb5078efeb42655de55adc4cd7226b8", "chunk": "diff --git a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/PasswordSecret.java b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/PasswordSecret.java\nindex 7b9006bbf..885e1ad89 100644\n--- a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/PasswordSecret.java\n+++ b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/PasswordSecret.java\n\n@@ -112,7 +112,7 @@ public class PasswordSecret extends CommonSecret {\n     @Override\n     public void checkValidity() {\n         super.checkValidity();\n-        if (containsOnlySecretId()){\n+        if (containsOnlySecretId()) {\n             return;\n         }\n         if (!Strings.isNullOrEmpty(passwordPlain)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3Njg3OQ==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r377576879", "bodyText": "Inconsistent formatting.", "author": "dejanb", "createdAt": "2020-02-11T11:25:11Z", "path": "service-base/src/main/java/org/eclipse/hono/service/management/credentials/PasswordSecret.java", "diffHunk": "@@ -123,6 +126,18 @@ public void checkValidity() {\n         }\n     }\n \n+    /**\n+     * Asserts if the secret do not contain secret details and only an id.\n+     *\n+     * @return        true if an ID is present and no new secret detail is set.\n+     */\n+    public boolean containsOnlySecretId(){", "originalCommit": "f6a4f182da030c3f02dfc8a9e9dd6697846e55b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ec32a2a2bb5078efeb42655de55adc4cd7226b8", "chunk": "diff --git a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/PasswordSecret.java b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/PasswordSecret.java\nindex 7b9006bbf..885e1ad89 100644\n--- a/service-base/src/main/java/org/eclipse/hono/service/management/credentials/PasswordSecret.java\n+++ b/service-base/src/main/java/org/eclipse/hono/service/management/credentials/PasswordSecret.java\n\n@@ -131,7 +131,7 @@ public class PasswordSecret extends CommonSecret {\n      *\n      * @return        true if an ID is present and no new secret detail is set.\n      */\n-    public boolean containsOnlySecretId(){\n+    public boolean containsOnlySecretId() {\n         return (!Strings.isNullOrEmpty(getId())\n                 && Strings.isNullOrEmpty(passwordPlain)\n                 && Strings.isNullOrEmpty(hashFunction)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3NzA0NA==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r377577044", "bodyText": "Inconsistent formatting.", "author": "dejanb", "createdAt": "2020-02-11T11:25:31Z", "path": "services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java", "diffHunk": "@@ -479,17 +480,19 @@ public void set(final String tenantId, final String deviceId, final Optional<Str\n         final var newVersion = UUID.randomUUID().toString();\n         setResourceVersion(tenantId, deviceId, newVersion);\n \n-        // clean out all existing credentials for this device\n-        try {\n-            removeAllForDevice(tenantId, deviceId, span);\n-        } catch (final ClientErrorException e) {\n-            TracingHelper.logError(span, e);\n-            return OperationResult.empty(e.getErrorCode());\n-        }\n \n         // authId->credentials[]\n         final Map<String, JsonArray> credentialsForTenant = createOrGetCredentialsForTenant(tenantId);\n \n+        if (! credentialsForTenant.isEmpty()){", "originalCommit": "f6a4f182da030c3f02dfc8a9e9dd6697846e55b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ec32a2a2bb5078efeb42655de55adc4cd7226b8", "chunk": "diff --git a/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java b/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\nindex b4c497bb2..cc8228d83 100644\n--- a/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\n+++ b/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\n\n@@ -484,10 +484,10 @@ public final class FileBasedCredentialsService extends AbstractVerticle\n         // authId->credentials[]\n         final Map<String, JsonArray> credentialsForTenant = createOrGetCredentialsForTenant(tenantId);\n \n-        if (! credentialsForTenant.isEmpty()){\n+        if (!credentialsForTenant.isEmpty()) {\n             try {\n                 verifyOverwriteEnabled(span);\n-            } catch (ClientErrorException e){\n+            } catch (ClientErrorException e) {\n                 TracingHelper.logError(span, e);\n                 return OperationResult.empty(e.getErrorCode());\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3NzE1Ng==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r377577156", "bodyText": "Inconsistent formatting.", "author": "dejanb", "createdAt": "2020-02-11T11:25:43Z", "path": "services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java", "diffHunk": "@@ -479,17 +480,19 @@ public void set(final String tenantId, final String deviceId, final Optional<Str\n         final var newVersion = UUID.randomUUID().toString();\n         setResourceVersion(tenantId, deviceId, newVersion);\n \n-        // clean out all existing credentials for this device\n-        try {\n-            removeAllForDevice(tenantId, deviceId, span);\n-        } catch (final ClientErrorException e) {\n-            TracingHelper.logError(span, e);\n-            return OperationResult.empty(e.getErrorCode());\n-        }\n \n         // authId->credentials[]\n         final Map<String, JsonArray> credentialsForTenant = createOrGetCredentialsForTenant(tenantId);\n \n+        if (! credentialsForTenant.isEmpty()){\n+            try {\n+                verifyOverwriteEnabled(span);\n+            } catch (ClientErrorException e){", "originalCommit": "f6a4f182da030c3f02dfc8a9e9dd6697846e55b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ec32a2a2bb5078efeb42655de55adc4cd7226b8", "chunk": "diff --git a/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java b/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\nindex b4c497bb2..cc8228d83 100644\n--- a/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\n+++ b/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\n\n@@ -484,10 +484,10 @@ public final class FileBasedCredentialsService extends AbstractVerticle\n         // authId->credentials[]\n         final Map<String, JsonArray> credentialsForTenant = createOrGetCredentialsForTenant(tenantId);\n \n-        if (! credentialsForTenant.isEmpty()){\n+        if (!credentialsForTenant.isEmpty()) {\n             try {\n                 verifyOverwriteEnabled(span);\n-            } catch (ClientErrorException e){\n+            } catch (ClientErrorException e) {\n                 TracingHelper.logError(span, e);\n                 return OperationResult.empty(e.getErrorCode());\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3NzQyMg==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r377577422", "bodyText": "Inconsistent formatting.", "author": "dejanb", "createdAt": "2020-02-11T11:26:17Z", "path": "services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java", "diffHunk": "@@ -804,4 +856,41 @@ public String toString() {\n     protected int getMaxBcryptIterations() {\n         return getConfig().getMaxBcryptIterations();\n     }\n+\n+    /**\n+     * Strips the hashed-password details from the jsonObject if needed.\n+     */\n+    private static void removePasswordDetailsFromCredential(final JsonObject credential){", "originalCommit": "f6a4f182da030c3f02dfc8a9e9dd6697846e55b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ec32a2a2bb5078efeb42655de55adc4cd7226b8", "chunk": "diff --git a/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java b/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\nindex b4c497bb2..cc8228d83 100644\n--- a/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\n+++ b/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\n\n@@ -860,7 +860,7 @@ public final class FileBasedCredentialsService extends AbstractVerticle\n     /**\n      * Strips the hashed-password details from the jsonObject if needed.\n      */\n-    private static void removePasswordDetailsFromCredential(final JsonObject credential){\n+    private static void removePasswordDetailsFromCredential(final JsonObject credential) {\n         if (credential.getString(CredentialsConstants.FIELD_TYPE).equals(CredentialsConstants.SECRETS_TYPE_HASHED_PASSWORD)){\n \n             credential.getJsonArray(CredentialsConstants.FIELD_SECRETS).forEach(secret ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3NzUyMw==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r377577523", "bodyText": "Inconsistent formatting.", "author": "dejanb", "createdAt": "2020-02-11T11:26:31Z", "path": "services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java", "diffHunk": "@@ -804,4 +856,41 @@ public String toString() {\n     protected int getMaxBcryptIterations() {\n         return getConfig().getMaxBcryptIterations();\n     }\n+\n+    /**\n+     * Strips the hashed-password details from the jsonObject if needed.\n+     */\n+    private static void removePasswordDetailsFromCredential(final JsonObject credential){\n+        if (credential.getString(CredentialsConstants.FIELD_TYPE).equals(CredentialsConstants.SECRETS_TYPE_HASHED_PASSWORD)){", "originalCommit": "f6a4f182da030c3f02dfc8a9e9dd6697846e55b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ec32a2a2bb5078efeb42655de55adc4cd7226b8", "chunk": "diff --git a/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java b/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\nindex b4c497bb2..cc8228d83 100644\n--- a/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\n+++ b/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\n\n@@ -860,7 +860,7 @@ public final class FileBasedCredentialsService extends AbstractVerticle\n     /**\n      * Strips the hashed-password details from the jsonObject if needed.\n      */\n-    private static void removePasswordDetailsFromCredential(final JsonObject credential){\n+    private static void removePasswordDetailsFromCredential(final JsonObject credential) {\n         if (credential.getString(CredentialsConstants.FIELD_TYPE).equals(CredentialsConstants.SECRETS_TYPE_HASHED_PASSWORD)){\n \n             credential.getJsonArray(CredentialsConstants.FIELD_SECRETS).forEach(secret ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3NzYwNw==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r377577607", "bodyText": "Inconsistent formatting.", "author": "dejanb", "createdAt": "2020-02-11T11:26:40Z", "path": "services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java", "diffHunk": "@@ -804,4 +856,41 @@ public String toString() {\n     protected int getMaxBcryptIterations() {\n         return getConfig().getMaxBcryptIterations();\n     }\n+\n+    /**\n+     * Strips the hashed-password details from the jsonObject if needed.\n+     */\n+    private static void removePasswordDetailsFromCredential(final JsonObject credential){\n+        if (credential.getString(CredentialsConstants.FIELD_TYPE).equals(CredentialsConstants.SECRETS_TYPE_HASHED_PASSWORD)){\n+\n+            credential.getJsonArray(CredentialsConstants.FIELD_SECRETS).forEach(secret ->\n+                    removePasswordDetailsFromSecret((JsonObject) secret));\n+        }\n+    }\n+\n+    private static void removePasswordDetailsFromSecret(final JsonObject secret){", "originalCommit": "f6a4f182da030c3f02dfc8a9e9dd6697846e55b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ec32a2a2bb5078efeb42655de55adc4cd7226b8", "chunk": "diff --git a/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java b/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\nindex b4c497bb2..cc8228d83 100644\n--- a/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\n+++ b/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\n\n@@ -860,7 +860,7 @@ public final class FileBasedCredentialsService extends AbstractVerticle\n     /**\n      * Strips the hashed-password details from the jsonObject if needed.\n      */\n-    private static void removePasswordDetailsFromCredential(final JsonObject credential){\n+    private static void removePasswordDetailsFromCredential(final JsonObject credential) {\n         if (credential.getString(CredentialsConstants.FIELD_TYPE).equals(CredentialsConstants.SECRETS_TYPE_HASHED_PASSWORD)){\n \n             credential.getJsonArray(CredentialsConstants.FIELD_SECRETS).forEach(secret ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3NzY3Ng==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r377577676", "bodyText": "Inconsistent formatting.", "author": "dejanb", "createdAt": "2020-02-11T11:26:48Z", "path": "services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java", "diffHunk": "@@ -804,4 +856,41 @@ public String toString() {\n     protected int getMaxBcryptIterations() {\n         return getConfig().getMaxBcryptIterations();\n     }\n+\n+    /**\n+     * Strips the hashed-password details from the jsonObject if needed.\n+     */\n+    private static void removePasswordDetailsFromCredential(final JsonObject credential){\n+        if (credential.getString(CredentialsConstants.FIELD_TYPE).equals(CredentialsConstants.SECRETS_TYPE_HASHED_PASSWORD)){\n+\n+            credential.getJsonArray(CredentialsConstants.FIELD_SECRETS).forEach(secret ->\n+                    removePasswordDetailsFromSecret((JsonObject) secret));\n+        }\n+    }\n+\n+    private static void removePasswordDetailsFromSecret(final JsonObject secret){\n+\n+        secret.remove(CredentialsConstants.FIELD_SECRETS_HASH_FUNCTION);\n+        secret.remove(CredentialsConstants.FIELD_SECRETS_PWD_HASH);\n+        secret.remove(CredentialsConstants.FIELD_SECRETS_SALT);\n+        secret.remove(CredentialsConstants.FIELD_SECRETS_PWD_PLAIN);\n+        secret.remove(CredentialsConstants.FIELD_SECRETS_KEY);\n+    }\n+\n+    private static void copySecretFields(final JsonObject in, final JsonObject out){", "originalCommit": "f6a4f182da030c3f02dfc8a9e9dd6697846e55b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ec32a2a2bb5078efeb42655de55adc4cd7226b8", "chunk": "diff --git a/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java b/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\nindex b4c497bb2..cc8228d83 100644\n--- a/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\n+++ b/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\n\n@@ -860,7 +860,7 @@ public final class FileBasedCredentialsService extends AbstractVerticle\n     /**\n      * Strips the hashed-password details from the jsonObject if needed.\n      */\n-    private static void removePasswordDetailsFromCredential(final JsonObject credential){\n+    private static void removePasswordDetailsFromCredential(final JsonObject credential) {\n         if (credential.getString(CredentialsConstants.FIELD_TYPE).equals(CredentialsConstants.SECRETS_TYPE_HASHED_PASSWORD)){\n \n             credential.getJsonArray(CredentialsConstants.FIELD_SECRETS).forEach(secret ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3Nzc0Ng==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r377577746", "bodyText": "Inconsistent formatting.", "author": "dejanb", "createdAt": "2020-02-11T11:26:56Z", "path": "services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java", "diffHunk": "@@ -804,4 +856,41 @@ public String toString() {\n     protected int getMaxBcryptIterations() {\n         return getConfig().getMaxBcryptIterations();\n     }\n+\n+    /**\n+     * Strips the hashed-password details from the jsonObject if needed.\n+     */\n+    private static void removePasswordDetailsFromCredential(final JsonObject credential){\n+        if (credential.getString(CredentialsConstants.FIELD_TYPE).equals(CredentialsConstants.SECRETS_TYPE_HASHED_PASSWORD)){\n+\n+            credential.getJsonArray(CredentialsConstants.FIELD_SECRETS).forEach(secret ->\n+                    removePasswordDetailsFromSecret((JsonObject) secret));\n+        }\n+    }\n+\n+    private static void removePasswordDetailsFromSecret(final JsonObject secret){\n+\n+        secret.remove(CredentialsConstants.FIELD_SECRETS_HASH_FUNCTION);\n+        secret.remove(CredentialsConstants.FIELD_SECRETS_PWD_HASH);\n+        secret.remove(CredentialsConstants.FIELD_SECRETS_SALT);\n+        secret.remove(CredentialsConstants.FIELD_SECRETS_PWD_PLAIN);\n+        secret.remove(CredentialsConstants.FIELD_SECRETS_KEY);\n+    }\n+\n+    private static void copySecretFields(final JsonObject in, final JsonObject out){\n+\n+        out.put(CredentialsConstants.FIELD_SECRETS_HASH_FUNCTION, in.getString(CredentialsConstants.FIELD_SECRETS_HASH_FUNCTION));\n+        out.put(CredentialsConstants.FIELD_SECRETS_PWD_HASH, in.getString(CredentialsConstants.FIELD_SECRETS_PWD_HASH));\n+        out.put(CredentialsConstants.FIELD_SECRETS_SALT, in.getString(CredentialsConstants.FIELD_SECRETS_SALT));\n+        out.put(CredentialsConstants.FIELD_SECRETS_PWD_PLAIN, in.getString(CredentialsConstants.FIELD_SECRETS_PWD_PLAIN));\n+    }\n+\n+    private void verifyOverwriteEnabled(final Span span) {\n+\n+        // check if we may overwrite\n+        if (! config.isModificationEnabled()) {", "originalCommit": "f6a4f182da030c3f02dfc8a9e9dd6697846e55b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ec32a2a2bb5078efeb42655de55adc4cd7226b8", "chunk": "diff --git a/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java b/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\nindex b4c497bb2..cc8228d83 100644\n--- a/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\n+++ b/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\n\n@@ -860,7 +860,7 @@ public final class FileBasedCredentialsService extends AbstractVerticle\n     /**\n      * Strips the hashed-password details from the jsonObject if needed.\n      */\n-    private static void removePasswordDetailsFromCredential(final JsonObject credential){\n+    private static void removePasswordDetailsFromCredential(final JsonObject credential) {\n         if (credential.getString(CredentialsConstants.FIELD_TYPE).equals(CredentialsConstants.SECRETS_TYPE_HASHED_PASSWORD)){\n \n             credential.getJsonArray(CredentialsConstants.FIELD_SECRETS).forEach(secret ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3NzkyOQ==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r377577929", "bodyText": "Inconsistent formatting.", "author": "dejanb", "createdAt": "2020-02-11T11:27:17Z", "path": "tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsHttpIT.java", "diffHunk": "@@ -566,4 +593,20 @@ private static PskCredential newPskCredentials(final String authId) {\n     private JsonObject extractFirstCredential(final JsonObject json) {\n         return json.getJsonArray(CredentialsConstants.CREDENTIALS_ENDPOINT).getJsonObject(0);\n     }\n+\n+    private static JsonObject stripHashAndSaltFromPasswordSecret(final JsonObject credential){", "originalCommit": "f6a4f182da030c3f02dfc8a9e9dd6697846e55b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ec32a2a2bb5078efeb42655de55adc4cd7226b8", "chunk": "diff --git a/tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsHttpIT.java b/tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsHttpIT.java\nindex 4474f67f3..492cf13e6 100644\n--- a/tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsHttpIT.java\n+++ b/tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsHttpIT.java\n\n@@ -594,7 +594,7 @@ public class CredentialsHttpIT {\n         return json.getJsonArray(CredentialsConstants.CREDENTIALS_ENDPOINT).getJsonObject(0);\n     }\n \n-    private static JsonObject stripHashAndSaltFromPasswordSecret(final JsonObject credential){\n+    private static JsonObject stripHashAndSaltFromPasswordSecret(final JsonObject credential) {\n         if (credential.getString(CredentialsConstants.FIELD_TYPE).equals(CredentialsConstants.SECRETS_TYPE_HASHED_PASSWORD)) {\n \n             credential.getJsonArray(CredentialsConstants.FIELD_SECRETS)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3ODA0MA==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r377578040", "bodyText": "Inconsistent formatting.", "author": "dejanb", "createdAt": "2020-02-11T11:27:33Z", "path": "tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsHttpIT.java", "diffHunk": "@@ -541,8 +543,33 @@ public void testGetAddedCredentialsButWithWrongAuthId(final VertxTestContext con\n     private static void assertResponseBodyContainsAllCredentials(final VertxTestContext context, final JsonArray responseBody,\n             final List<CommonCredential> expected) {\n \n+        assertThat(expected.size()).isEqualTo(responseBody.size());\n+\n+        responseBody.forEach(credential -> {\n+            JsonObject.mapFrom(credential).getJsonArray(CredentialsConstants.FIELD_SECRETS)\n+                    .forEach(secret -> {\n+                        // each secret should contain an ID.\n+                        assertThat(JsonObject.mapFrom(secret)\n+                                .getString(RegistryManagementConstants.FIELD_ID)).isNotNull();\n+                    });\n+        });\n+\n+        // secrets id were added by registry, strip it so we can compare other fields.\n+        responseBody.forEach(credential ->{", "originalCommit": "f6a4f182da030c3f02dfc8a9e9dd6697846e55b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ec32a2a2bb5078efeb42655de55adc4cd7226b8", "chunk": "diff --git a/tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsHttpIT.java b/tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsHttpIT.java\nindex 4474f67f3..492cf13e6 100644\n--- a/tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsHttpIT.java\n+++ b/tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsHttpIT.java\n\n@@ -555,7 +555,7 @@ public class CredentialsHttpIT {\n         });\n \n         // secrets id were added by registry, strip it so we can compare other fields.\n-        responseBody.forEach(credential ->{\n+        responseBody.forEach(credential -> {\n             ((JsonObject) credential).getJsonArray(CredentialsConstants.FIELD_SECRETS)\n                     .forEach(secret -> {\n                         ((JsonObject) secret).remove(RegistryManagementConstants.FIELD_ID);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3ODI1Mw==", "url": "https://github.com/eclipse/hono/pull/1711#discussion_r377578253", "bodyText": "Inconsistent formatting.", "author": "dejanb", "createdAt": "2020-02-11T11:28:02Z", "path": "services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java", "diffHunk": "@@ -529,16 +532,68 @@ public void set(final String tenantId, final String deviceId, final Optional<Str\n                 return OperationResult.empty(HttpURLConnection.HTTP_CONFLICT);\n             }\n \n-            // start updating\n-            dirty = true;\n-\n-            var secretsJson = credentialsJson.getJsonArray(CredentialsConstants.FIELD_SECRETS);\n+            JsonArray secretsJson = credentialsJson.getJsonArray(CredentialsConstants.FIELD_SECRETS);\n             if (secretsJson == null) {\n                 // secrets field was missing, assign\n                 secretsJson = new JsonArray();\n-                credentialsJson.put(CredentialsConstants.FIELD_SECRETS, secretsJson);\n             }\n-            secretsJson.addAll(credentialObject.getJsonArray(CredentialsConstants.FIELD_SECRETS));\n+\n+            final JsonArray inputSecrets = credentialObject.getJsonArray(CredentialsConstants.FIELD_SECRETS);\n+            final JsonArray definitiveInputSecret = new JsonArray();\n+            for (Object inputSecret : inputSecrets) {\n+                final JsonObject secret = (JsonObject) inputSecret;\n+                final String secretId = secret.getString(RegistryManagementConstants.FIELD_ID);\n+\n+                // No secret ID specified : create a new secret\n+                if (Strings.isNullOrEmpty(secretId)) {\n+                    secret.put(RegistryManagementConstants.FIELD_ID, UUID.randomUUID().toString());\n+                    definitiveInputSecret.add(secret);\n+                // secret ID specified\n+                } else {\n+                    // Find the corresponding secret with the given ID.\n+                    boolean found = false;\n+                    for (Object st : secretsJson) {\n+                        final JsonObject existingSecret = (JsonObject) st;\n+                        if (secretId.equals(existingSecret.getString(RegistryManagementConstants.FIELD_ID))) {\n+                            found = true;\n+                            final JsonObject newSecret = new JsonObject();\n+                            copySecretFields(secret, newSecret);\n+\n+                            // update the secret : remove the old values.\n+                            if (secret.containsKey(CredentialsConstants.FIELD_SECRETS_PWD_PLAIN)\n+                                    || secret.containsKey(CredentialsConstants.FIELD_SECRETS_KEY)\n+                                    || secret.containsKey(CredentialsConstants.FIELD_SECRETS_PWD_HASH)\n+                                    || secret.containsKey(CredentialsConstants.FIELD_SECRETS_SALT)) {\n+\n+                                removePasswordDetailsFromSecret(newSecret);\n+                            }\n+                            // then copy the new details.\n+                            for (String field : secret.fieldNames()) {\n+                                newSecret.put(field, secret.getValue(field));\n+                            }\n+                            definitiveInputSecret.add(newSecret);\n+                        }\n+                    }\n+\n+                    // check if the secretID given was found\n+                    if (! found) {", "originalCommit": "f6a4f182da030c3f02dfc8a9e9dd6697846e55b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ec32a2a2bb5078efeb42655de55adc4cd7226b8", "chunk": "diff --git a/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java b/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\nindex b4c497bb2..cc8228d83 100644\n--- a/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\n+++ b/services/device-registry/src/main/java/org/eclipse/hono/deviceregistry/FileBasedCredentialsService.java\n\n@@ -576,7 +576,7 @@ public final class FileBasedCredentialsService extends AbstractVerticle\n                     }\n \n                     // check if the secretID given was found\n-                    if (! found) {\n+                    if (!found) {\n                         TracingHelper.logError(span, \"secret ID given does not exist for this auth-id and type.\");\n                         return OperationResult.empty(HttpURLConnection.HTTP_BAD_REQUEST);\n                     }\n"}}, {"oid": "4ec32a2a2bb5078efeb42655de55adc4cd7226b8", "url": "https://github.com/eclipse/hono/commit/4ec32a2a2bb5078efeb42655de55adc4cd7226b8", "message": "[#1710] stop registry to return hashed-passwords details but only returns metadata. Add a secret ID to secrets\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-02-11T12:08:30Z", "type": "forcePushed"}, {"oid": "86f332bbf252eb65abfcc6797a08c56f8e48272b", "url": "https://github.com/eclipse/hono/commit/86f332bbf252eb65abfcc6797a08c56f8e48272b", "message": "[#1710] stop registry to return hashed-passwords details but only returns metadata. Add a secret ID to secrets\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-02-11T14:00:44Z", "type": "commit"}, {"oid": "86f332bbf252eb65abfcc6797a08c56f8e48272b", "url": "https://github.com/eclipse/hono/commit/86f332bbf252eb65abfcc6797a08c56f8e48272b", "message": "[#1710] stop registry to return hashed-passwords details but only returns metadata. Add a secret ID to secrets\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-02-11T14:00:44Z", "type": "forcePushed"}]}