{"pr_number": 2179, "pr_title": "Add unit tests for HTTP 503 responses", "pr_createdAt": "2020-09-15T19:07:55Z", "pr_url": "https://github.com/eclipse/hono/pull/2179", "timeline": [{"oid": "c08d0695daca42fec9a1ccbc6474c0655087a0fa", "url": "https://github.com/eclipse/hono/commit/c08d0695daca42fec9a1ccbc6474c0655087a0fa", "message": "Add unit tests for HTTP 503 responses.\n\nExtend ApplicationClientFactory with extra consumer\nmethods to allow setting the delivery state explicitly.\nPreparation for #2166.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-09-16T05:28:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwNTE3MQ==", "url": "https://github.com/eclipse/hono/pull/2179#discussion_r489205171", "bodyText": "under which circumstances would you want to set this to false?", "author": "sophokles73", "createdAt": "2020-09-16T06:55:46Z", "path": "client/src/main/java/org/eclipse/hono/client/ApplicationClientFactory.java", "diffHunk": "@@ -56,6 +56,29 @@ static ApplicationClientFactory create(final HonoConnection connection, final Se\n      *\n      * @param tenantId The tenant to consume data for.\n      * @param telemetryConsumer The handler to invoke with every message received.\n+     * @param autoAccept {@code true} if received deliveries should be automatically accepted (and settled)", "originalCommit": "c08d0695daca42fec9a1ccbc6474c0655087a0fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0NTM5OQ==", "url": "https://github.com/eclipse/hono/pull/2179#discussion_r489245399", "bodyText": "In case accepting/rejecting the delivery should be done asynchronously.\nIn the case of the added test case here, a scenario should be simulated where the consumer takes a long time to accept the delivery - longer than the sendMessageTimeout. Without the autoAccept=false flag, this would mean having to block the event loop thread in the message handler, requiring the use of an extra HonoConnection/ApplicationClientFactory instance in the test.", "author": "calohmn", "createdAt": "2020-09-16T08:08:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwNTE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5MDMxOA==", "url": "https://github.com/eclipse/hono/pull/2179#discussion_r489290318", "bodyText": "What you describe as the use is actually an anti pattern, isn't it? It means that the messages sent downstream will remain in flight for an indeterminate amount of time :-(\nIMHO we should be very explicit in the JavaDoc that a consumer should not perform any time consuming work in the handler but should spawn a new thread or something like that in such a case, but otherwise quickly settle the incoming transfer.", "author": "sophokles73", "createdAt": "2020-09-16T09:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwNTE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyNTI0MA==", "url": "https://github.com/eclipse/hono/pull/2179#discussion_r489425240", "bodyText": "I've added a corresponding note in the javadocs.", "author": "calohmn", "createdAt": "2020-09-16T13:12:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwNTE3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "85c48e11c07c2ef2be31cbe8d4c7cc7c6b6d1fac", "chunk": "diff --git a/client/src/main/java/org/eclipse/hono/client/ApplicationClientFactory.java b/client/src/main/java/org/eclipse/hono/client/ApplicationClientFactory.java\nindex 1ea258304..cfe0c7525 100644\n--- a/client/src/main/java/org/eclipse/hono/client/ApplicationClientFactory.java\n+++ b/client/src/main/java/org/eclipse/hono/client/ApplicationClientFactory.java\n\n@@ -58,7 +58,9 @@ public interface ApplicationClientFactory extends ConnectionLifecycle<HonoConnec\n      * @param telemetryConsumer The handler to invoke with every message received.\n      * @param autoAccept {@code true} if received deliveries should be automatically accepted (and settled)\n      *                   after the message handler runs for them, if no other disposition has been applied\n-     *                   during handling.\n+     *                   during handling. NOTE: When using {@code false} here, make sure that deliveries are\n+     *                   quickly updated and settled, so that the messages don't remain <em>in flight</em>\n+     *                   for long.\n      * @param closeHandler The handler invoked when the peer detaches the link.\n      * @return A future that will complete with the consumer once the link has been established.\n      *         The future will fail if the link cannot be established, e.g. because this factory\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwNTc1Mg==", "url": "https://github.com/eclipse/hono/pull/2179#discussion_r489205752", "bodyText": "why would you want to set this to false?", "author": "sophokles73", "createdAt": "2020-09-16T06:57:09Z", "path": "client/src/main/java/org/eclipse/hono/client/ApplicationClientFactory.java", "diffHunk": "@@ -67,11 +90,32 @@ static ApplicationClientFactory create(final HonoConnection connection, final Se\n             Consumer<Message> telemetryConsumer,\n             Handler<Void> closeHandler);\n \n+    /**\n+     * Creates a client for consuming events from Hono's north bound <em>Event API</em>.\n+     *\n+     * @param tenantId The tenant to consume events for.\n+     * @param eventConsumer The handler to invoke with every event received.\n+     * @param closeHandler The handler invoked when the peer detaches the link.\n+     * @param autoAccept {@code true} if received deliveries should be automatically accepted (and settled)", "originalCommit": "c08d0695daca42fec9a1ccbc6474c0655087a0fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0NTkyMw==", "url": "https://github.com/eclipse/hono/pull/2179#discussion_r489245923", "bodyText": "See above.", "author": "calohmn", "createdAt": "2020-09-16T08:09:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwNTc1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "85c48e11c07c2ef2be31cbe8d4c7cc7c6b6d1fac", "chunk": "diff --git a/client/src/main/java/org/eclipse/hono/client/ApplicationClientFactory.java b/client/src/main/java/org/eclipse/hono/client/ApplicationClientFactory.java\nindex 1ea258304..cfe0c7525 100644\n--- a/client/src/main/java/org/eclipse/hono/client/ApplicationClientFactory.java\n+++ b/client/src/main/java/org/eclipse/hono/client/ApplicationClientFactory.java\n\n@@ -98,7 +100,9 @@ public interface ApplicationClientFactory extends ConnectionLifecycle<HonoConnec\n      * @param closeHandler The handler invoked when the peer detaches the link.\n      * @param autoAccept {@code true} if received deliveries should be automatically accepted (and settled)\n      *                   after the message handler runs for them, if no other disposition has been applied\n-     *                   during handling.\n+     *                   during handling. NOTE: When using {@code false} here, make sure that deliveries are\n+     *                   quickly updated and settled, so that the messages don't remain <em>in flight</em>\n+     *                   for long.\n      * @return A future that will complete with the consumer once the link has been established.\n      *         The future will fail if the link cannot be established, e.g. because this factory\n      *         is not connected.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwNjk0NA==", "url": "https://github.com/eclipse/hono/pull/2179#discussion_r489206944", "bodyText": "IMHO tests checking for literal string values produced elsewhere in the code base will be very flaky.\nFMPOV we can either check for a constant that is used in both places or remove this check.", "author": "sophokles73", "createdAt": "2020-09-16T06:59:39Z", "path": "tests/src/test/java/org/eclipse/hono/tests/http/TelemetryHttpIT.java", "diffHunk": "@@ -125,4 +127,102 @@ public void testUploadMessageFailsForLargePayload(final VertxTestContext ctx) {\n             // THEN the message gets rejected by the HTTP adapter with a 413\n             .onComplete(ctx.completing());\n     }\n+\n+    /**\n+     * Verifies that the upload of a telemetry message fails with a 503 status code\n+     * when there is no consumer.\n+     *\n+     * @param ctx The test context\n+     */\n+    @Test\n+    public void testUploadMessageFailsForNoConsumer(final VertxTestContext ctx) {\n+\n+        // GIVEN a device\n+        final Tenant tenant = new Tenant();\n+\n+        helper.registry\n+                .addDeviceForTenant(tenantId, tenant, deviceId, PWD)\n+                .compose(ok -> {\n+\n+                    // WHEN the device tries to upload a telemetry message while there is no consumer for it\n+                    final MultiMap requestHeaders = MultiMap.caseInsensitiveMultiMap()\n+                            .add(HttpHeaders.CONTENT_TYPE, \"text/plain\")\n+                            .add(HttpHeaders.AUTHORIZATION, authorization);\n+\n+                    return httpClient.create(\n+                            getEndpointUri(),\n+                            Buffer.buffer(\"hello\"),\n+                            requestHeaders,\n+                            ResponsePredicate.status(HttpURLConnection.HTTP_UNAVAILABLE));\n+\n+                })\n+                // THEN the message gets rejected by the HTTP adapter with a 503\n+                .onComplete(ctx.succeeding(response -> {\n+                    ctx.verify(() -> {\n+                        assertThat(response.bodyAsString()).isEqualTo(\"temporarily unavailable\");", "originalCommit": "c08d0695daca42fec9a1ccbc6474c0655087a0fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1MzI0Mg==", "url": "https://github.com/eclipse/hono/pull/2179#discussion_r489253242", "bodyText": "I mainly added this here so that with the fix for #2166, the more specific error message can be checked upon here.\nI have removed the check now and will add it again with the fix for #2166 (using a constant then).", "author": "calohmn", "createdAt": "2020-09-16T08:21:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwNjk0NA=="}], "type": "inlineReview", "revised_code": {"commit": "00704c96a5b8fe370ca682350c262645b1c21563", "chunk": "diff --git a/tests/src/test/java/org/eclipse/hono/tests/http/TelemetryHttpIT.java b/tests/src/test/java/org/eclipse/hono/tests/http/TelemetryHttpIT.java\nindex b7cc590ba..6a906f640 100644\n--- a/tests/src/test/java/org/eclipse/hono/tests/http/TelemetryHttpIT.java\n+++ b/tests/src/test/java/org/eclipse/hono/tests/http/TelemetryHttpIT.java\n\n@@ -153,16 +153,11 @@ public class TelemetryHttpIT extends HttpTestBase {\n                             getEndpointUri(),\n                             Buffer.buffer(\"hello\"),\n                             requestHeaders,\n+                            // THEN the message gets rejected by the HTTP adapter with a 503\n                             ResponsePredicate.status(HttpURLConnection.HTTP_UNAVAILABLE));\n \n                 })\n-                // THEN the message gets rejected by the HTTP adapter with a 503\n-                .onComplete(ctx.succeeding(response -> {\n-                    ctx.verify(() -> {\n-                        assertThat(response.bodyAsString()).isEqualTo(\"temporarily unavailable\");\n-                    });\n-                    ctx.completeNow();\n-                }));\n+                .onComplete(ctx.completing());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwNzEwOQ==", "url": "https://github.com/eclipse/hono/pull/2179#discussion_r489207109", "bodyText": "same here", "author": "sophokles73", "createdAt": "2020-09-16T07:00:01Z", "path": "tests/src/test/java/org/eclipse/hono/tests/http/TelemetryHttpIT.java", "diffHunk": "@@ -125,4 +127,102 @@ public void testUploadMessageFailsForLargePayload(final VertxTestContext ctx) {\n             // THEN the message gets rejected by the HTTP adapter with a 413\n             .onComplete(ctx.completing());\n     }\n+\n+    /**\n+     * Verifies that the upload of a telemetry message fails with a 503 status code\n+     * when there is no consumer.\n+     *\n+     * @param ctx The test context\n+     */\n+    @Test\n+    public void testUploadMessageFailsForNoConsumer(final VertxTestContext ctx) {\n+\n+        // GIVEN a device\n+        final Tenant tenant = new Tenant();\n+\n+        helper.registry\n+                .addDeviceForTenant(tenantId, tenant, deviceId, PWD)\n+                .compose(ok -> {\n+\n+                    // WHEN the device tries to upload a telemetry message while there is no consumer for it\n+                    final MultiMap requestHeaders = MultiMap.caseInsensitiveMultiMap()\n+                            .add(HttpHeaders.CONTENT_TYPE, \"text/plain\")\n+                            .add(HttpHeaders.AUTHORIZATION, authorization);\n+\n+                    return httpClient.create(\n+                            getEndpointUri(),\n+                            Buffer.buffer(\"hello\"),\n+                            requestHeaders,\n+                            ResponsePredicate.status(HttpURLConnection.HTTP_UNAVAILABLE));\n+\n+                })\n+                // THEN the message gets rejected by the HTTP adapter with a 503\n+                .onComplete(ctx.succeeding(response -> {\n+                    ctx.verify(() -> {\n+                        assertThat(response.bodyAsString()).isEqualTo(\"temporarily unavailable\");\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that the upload of a QoS 1 telemetry message fails with a 503 status code\n+     * when the consumer doesn't update the message delivery state and the\n+     * <em>sendMessageTimeout</em> has elapsed.\n+     *\n+     * @param ctx The test context\n+     * @throws InterruptedException if test is interrupted while running.\n+     */\n+    @Test\n+    public void testUploadQos1MessageFailsIfDeliveryStateNotUpdated(final VertxTestContext ctx)\n+            throws InterruptedException {\n+\n+        // GIVEN a device and a northbound message consumer that doesn't update the message delivery state\n+        final Tenant tenant = new Tenant();\n+        final Checkpoint messageReceived = ctx.checkpoint();\n+        final Checkpoint httpResponseReceived = ctx.checkpoint();\n+\n+        final VertxTestContext setup = new VertxTestContext();\n+        final Checkpoint setupDone = setup.checkpoint();\n+        helper.registry\n+                .addDeviceForTenant(tenantId, tenant, deviceId, PWD)\n+                .compose(ok -> helper.applicationClientFactory.createTelemetryConsumer(\n+                        tenantId, \n+                        (delivery, msg) -> {\n+                            logger.debug(\"received {}\", msg);\n+                            messageReceived.flag();\n+                            // don't update the delivery state here\n+                        },\n+                        false, \n+                        remoteClose -> {}))\n+                .onComplete(setup.succeeding(v -> setupDone.flag()));\n+\n+        assertThat(setup.awaitCompletion(helper.getTestSetupTimeout(), TimeUnit.SECONDS)).isTrue();\n+        if (setup.failed()) {\n+            ctx.failNow(setup.causeOfFailure());\n+            return;\n+        }\n+\n+        // WHEN the device tries to upload a telemetry message\n+        final MultiMap requestHeaders = MultiMap.caseInsensitiveMultiMap()\n+                .add(HttpHeaders.CONTENT_TYPE, \"binary/octet-stream\")\n+                .add(HttpHeaders.AUTHORIZATION, authorization)\n+                .add(HttpHeaders.ORIGIN, ORIGIN_URI)\n+                .add(Constants.HEADER_QOS_LEVEL, \"1\");\n+\n+        // THEN the message gets rejected by the HTTP adapter with a 503\n+        final Future<HttpResponse<Buffer>> httpResponseFuture = httpClient.create(\n+                getEndpointUri(),\n+                Buffer.buffer(\"hello\"),\n+                requestHeaders,\n+                ResponsePredicate.status(HttpURLConnection.HTTP_UNAVAILABLE));\n+\n+        httpResponseFuture\n+                .onComplete(ctx.succeeding(response -> {\n+                    ctx.verify(() -> {\n+                        assertThat(response.bodyAsString()).isEqualTo(\"temporarily unavailable\");", "originalCommit": "c08d0695daca42fec9a1ccbc6474c0655087a0fa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00704c96a5b8fe370ca682350c262645b1c21563", "chunk": "diff --git a/tests/src/test/java/org/eclipse/hono/tests/http/TelemetryHttpIT.java b/tests/src/test/java/org/eclipse/hono/tests/http/TelemetryHttpIT.java\nindex b7cc590ba..6a906f640 100644\n--- a/tests/src/test/java/org/eclipse/hono/tests/http/TelemetryHttpIT.java\n+++ b/tests/src/test/java/org/eclipse/hono/tests/http/TelemetryHttpIT.java\n\n@@ -153,16 +153,11 @@ public class TelemetryHttpIT extends HttpTestBase {\n                             getEndpointUri(),\n                             Buffer.buffer(\"hello\"),\n                             requestHeaders,\n+                            // THEN the message gets rejected by the HTTP adapter with a 503\n                             ResponsePredicate.status(HttpURLConnection.HTTP_UNAVAILABLE));\n \n                 })\n-                // THEN the message gets rejected by the HTTP adapter with a 503\n-                .onComplete(ctx.succeeding(response -> {\n-                    ctx.verify(() -> {\n-                        assertThat(response.bodyAsString()).isEqualTo(\"temporarily unavailable\");\n-                    });\n-                    ctx.completeNow();\n-                }));\n+                .onComplete(ctx.completing());\n     }\n \n     /**\n"}}, {"oid": "00704c96a5b8fe370ca682350c262645b1c21563", "url": "https://github.com/eclipse/hono/commit/00704c96a5b8fe370ca682350c262645b1c21563", "message": "Add unit tests for HTTP 503 responses.\n\nExtend ApplicationClientFactory with extra consumer\nmethods to allow setting the delivery state explicitly.\nPreparation for #2166.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-09-16T08:21:05Z", "type": "forcePushed"}, {"oid": "85c48e11c07c2ef2be31cbe8d4c7cc7c6b6d1fac", "url": "https://github.com/eclipse/hono/commit/85c48e11c07c2ef2be31cbe8d4c7cc7c6b6d1fac", "message": "Add unit tests for HTTP 503 responses.\n\nExtend ApplicationClientFactory with extra consumer\nmethods to allow setting the delivery state explicitly.\nPreparation for #2166.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-09-16T13:10:40Z", "type": "commit"}, {"oid": "85c48e11c07c2ef2be31cbe8d4c7cc7c6b6d1fac", "url": "https://github.com/eclipse/hono/commit/85c48e11c07c2ef2be31cbe8d4c7cc7c6b6d1fac", "message": "Add unit tests for HTTP 503 responses.\n\nExtend ApplicationClientFactory with extra consumer\nmethods to allow setting the delivery state explicitly.\nPreparation for #2166.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-09-16T13:10:40Z", "type": "forcePushed"}]}