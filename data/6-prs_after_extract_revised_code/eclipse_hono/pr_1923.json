{"pr_number": 1923, "pr_title": "[#1714] Set TTL for connection event messages.", "pr_createdAt": "2020-04-23T22:42:49Z", "pr_url": "https://github.com/eclipse/hono/pull/1923", "timeline": [{"oid": "834a661c88b3d47458bbf541a2e92d9d08f79837", "url": "https://github.com/eclipse/hono/commit/834a661c88b3d47458bbf541a2e92d9d08f79837", "message": "[#1714] Set TTL for connection event messages.\n\nfixes #1714\n\nSigned-off-by: Alfusainey Jallow <alf.jallow@gmail.com>", "committedDate": "2020-04-24T09:23:33Z", "type": "forcePushed"}, {"oid": "55afda39249f3194b4f0b53ab891271df907bdd1", "url": "https://github.com/eclipse/hono/commit/55afda39249f3194b4f0b53ab891271df907bdd1", "message": "[#1714] Set TTL for connection event messages.\n\nfixes #1714\n\nSigned-off-by: Alfusainey Jallow <alf.jallow@gmail.com>", "committedDate": "2020-04-28T21:19:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMjYyNw==", "url": "https://github.com/eclipse/hono/pull/1923#discussion_r417412627", "bodyText": "I'd rather not introduce a new parameter here but instead simply use the MessageSender.send(Message) method for sending the event ...", "author": "sophokles73", "createdAt": "2020-04-29T15:37:00Z", "path": "client/src/main/java/org/eclipse/hono/client/DownstreamSender.java", "diffHunk": "@@ -162,6 +166,7 @@\n      * @throws IllegalArgumentException if the content type specifies an unsupported character set.\n      */\n     Future<ProtonDelivery> send(\n+            Long maxTtl,", "originalCommit": "55afda39249f3194b4f0b53ab891271df907bdd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "44b468ca4d40ce9877a26e851ae2f6f51697cc2f", "chunk": "diff --git a/client/src/main/java/org/eclipse/hono/client/DownstreamSender.java b/client/src/main/java/org/eclipse/hono/client/DownstreamSender.java\nindex 56a7cb65c..7479dbe78 100644\n--- a/client/src/main/java/org/eclipse/hono/client/DownstreamSender.java\n+++ b/client/src/main/java/org/eclipse/hono/client/DownstreamSender.java\n\n@@ -166,7 +162,6 @@ public interface DownstreamSender extends MessageSender {\n      * @throws IllegalArgumentException if the content type specifies an unsupported character set.\n      */\n     Future<ProtonDelivery> send(\n-            Long maxTtl,\n             String deviceId,\n             Map<String, ?> properties,\n             byte[] payload,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxNDI0Mw==", "url": "https://github.com/eclipse/hono/pull/1923#discussion_r417414243", "bodyText": "we can use MessageHelper.newMessage() here to create the message and send it using DownstreamSender.send(Message) ...", "author": "sophokles73", "createdAt": "2020-04-29T15:39:10Z", "path": "service-base/src/main/java/org/eclipse/hono/service/monitoring/AbstractMessageSenderConnectionEventProducer.java", "diffHunk": "@@ -82,23 +82,29 @@ protected AbstractMessageSenderConnectionEventProducer(\n             return Future.succeededFuture();\n         }\n \n-        return getOrCreateSender(context.getMessageSenderClient(), authenticatedDevice.getTenantId())\n-                .compose(sender -> {\n-\n-                    final JsonObject payload = new JsonObject();\n-                    payload.put(\"cause\", cause);\n-                    payload.put(\"remote-id\", remoteId);\n-                    payload.put(\"source\", protocolAdapter);\n-\n-                    if (data != null) {\n-                        payload.put(\"data\", data);\n-                    }\n-\n-                    return sender.send(\n-                            authenticatedDevice.getDeviceId(),\n-                            payload.encode().getBytes(StandardCharsets.UTF_8),\n-                            EventConstants.EVENT_CONNECTION_NOTIFICATION_CONTENT_TYPE\n-                            );\n+        return context.getTenantClient().getOrCreateTenantClient()\n+                .map(tenantClient -> tenantClient.get(authenticatedDevice.getTenantId()))\n+                .map(tenantObject -> {\n+                    return getOrCreateSender(context.getMessageSenderClient(), authenticatedDevice.getTenantId())\n+                            .compose(sender -> {\n+\n+                                final JsonObject payload = new JsonObject();\n+                                payload.put(\"cause\", cause);\n+                                payload.put(\"remote-id\", remoteId);\n+                                payload.put(\"source\", protocolAdapter);\n+\n+                                if (data != null) {\n+                                    payload.put(\"data\", data);\n+                                }\n+\n+                                final Long maxTtl = tenantObject.result().getResourceLimits().getMaxTtl();\n+                                return sender.send(", "originalCommit": "55afda39249f3194b4f0b53ab891271df907bdd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczNTAxMA==", "url": "https://github.com/eclipse/hono/pull/1923#discussion_r417735010", "bodyText": "MessageHelper.newMessage() sets the message's orig_adapter application property to the name of the adapter forwarding the connection event. however, the name of the adapter is already included in the message's payload. i added a todo comment in the source code to get some feedback", "author": "Alfusainey", "createdAt": "2020-04-30T03:36:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxNDI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwODUzNg==", "url": "https://github.com/eclipse/hono/pull/1923#discussion_r418508536", "bodyText": "@sophokles73 if you have time, can you take a look at rev. 4913146 ?", "author": "Alfusainey", "createdAt": "2020-05-01T11:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxNDI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "44b468ca4d40ce9877a26e851ae2f6f51697cc2f", "chunk": "diff --git a/service-base/src/main/java/org/eclipse/hono/service/monitoring/AbstractMessageSenderConnectionEventProducer.java b/service-base/src/main/java/org/eclipse/hono/service/monitoring/AbstractMessageSenderConnectionEventProducer.java\nindex 72153f41c..68f0172b5 100644\n--- a/service-base/src/main/java/org/eclipse/hono/service/monitoring/AbstractMessageSenderConnectionEventProducer.java\n+++ b/service-base/src/main/java/org/eclipse/hono/service/monitoring/AbstractMessageSenderConnectionEventProducer.java\n\n@@ -82,28 +85,39 @@ public abstract class AbstractMessageSenderConnectionEventProducer implements Co\n             return Future.succeededFuture();\n         }\n \n-        return context.getTenantClient().getOrCreateTenantClient()\n+        return context.getTenantClientFactory().getOrCreateTenantClient()\n                 .map(tenantClient -> tenantClient.get(authenticatedDevice.getTenantId()))\n-                .map(tenantObject -> {\n+                .map(tenantObjectFuture -> {\n                     return getOrCreateSender(context.getMessageSenderClient(), authenticatedDevice.getTenantId())\n                             .compose(sender -> {\n \n                                 final JsonObject payload = new JsonObject();\n                                 payload.put(\"cause\", cause);\n                                 payload.put(\"remote-id\", remoteId);\n+                                // TODO: can this be removed in favour of 'orig_dapter'?\n                                 payload.put(\"source\", protocolAdapter);\n \n                                 if (data != null) {\n                                     payload.put(\"data\", data);\n                                 }\n \n-                                final Long maxTtl = tenantObject.result().getResourceLimits().getMaxTtl();\n-                                return sender.send(\n-                                        maxTtl,\n-                                        authenticatedDevice.getDeviceId(),\n-                                        null,\n-                                        payload.encode().getBytes(StandardCharsets.UTF_8),\n-                                        EventConstants.EVENT_CONNECTION_NOTIFICATION_CONTENT_TYPE);\n+                                final String tenantId = authenticatedDevice.getTenantId();\n+                                final String deviceId = authenticatedDevice.getDeviceId();\n+                                final ResourceIdentifier target = ResourceIdentifier.from(EventConstants.EVENT_ENDPOINT, tenantId, deviceId);\n+                                final Duration timeToLive = Duration.ofSeconds(tenantObjectFuture.result().getResourceLimits().getMaxTtl());\n+\n+                                // the 'orig_adapter' will be added to the message's application\n+                                // properties to contain the name of the protocol adapter\n+                                // forwarding this connection event\n+                                final Message msg = MessageHelper.newMessage(\n+                                        target, \n+                                        EventConstants.EVENT_CONNECTION_NOTIFICATION_CONTENT_TYPE, \n+                                        payload.toBuffer(), \n+                                        tenantObjectFuture.result(), \n+                                        timeToLive,\n+                                        protocolAdapter);\n+\n+                                return sender.send(msg);\n                             });\n                 });\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxNDk4Mg==", "url": "https://github.com/eclipse/hono/pull/1923#discussion_r417414982", "bodyText": "IMHO this should be called getTenantClientFactory instead", "author": "sophokles73", "createdAt": "2020-04-29T15:40:10Z", "path": "service-base/src/main/java/org/eclipse/hono/service/monitoring/ConnectionEventProducer.java", "diffHunk": "@@ -52,6 +53,14 @@\n          *         use. This client has to be initialized and started.\n          */\n         DownstreamSenderFactory getMessageSenderClient();\n+        /**\n+         * Provides the tenant client which the {@link ConnectionEventProducer} should use to lookup the tenant\n+         * that the device connecting to a protocol adapter belongs to.\n+         * \n+         * @return The tenant client instance. This client has to be initialized and started.\n+         */\n+        TenantClientFactory getTenantClient();", "originalCommit": "55afda39249f3194b4f0b53ab891271df907bdd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "44b468ca4d40ce9877a26e851ae2f6f51697cc2f", "chunk": "diff --git a/service-base/src/main/java/org/eclipse/hono/service/monitoring/ConnectionEventProducer.java b/service-base/src/main/java/org/eclipse/hono/service/monitoring/ConnectionEventProducer.java\nindex e41dfacf7..5171d01be 100644\n--- a/service-base/src/main/java/org/eclipse/hono/service/monitoring/ConnectionEventProducer.java\n+++ b/service-base/src/main/java/org/eclipse/hono/service/monitoring/ConnectionEventProducer.java\n\n@@ -59,7 +59,7 @@ public interface ConnectionEventProducer {\n          * \n          * @return The tenant client instance. This client has to be initialized and started.\n          */\n-        TenantClientFactory getTenantClient();\n+        TenantClientFactory getTenantClientFactory();\n \n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzNDM2OA==", "url": "https://github.com/eclipse/hono/pull/1923#discussion_r418934368", "bodyText": "I don't think so because the Event API defines this as a mandatory property of the message body.", "author": "sophokles73", "createdAt": "2020-05-02T09:07:07Z", "path": "service-base/src/main/java/org/eclipse/hono/service/monitoring/AbstractMessageSenderConnectionEventProducer.java", "diffHunk": "@@ -82,27 +85,45 @@ protected AbstractMessageSenderConnectionEventProducer(\n             return Future.succeededFuture();\n         }\n \n-        return getOrCreateSender(context.getMessageSenderClient(), authenticatedDevice.getTenantId())\n-                .compose(sender -> {\n-\n-                    final JsonObject payload = new JsonObject();\n-                    payload.put(\"cause\", cause);\n-                    payload.put(\"remote-id\", remoteId);\n-                    payload.put(\"source\", protocolAdapter);\n-\n-                    if (data != null) {\n-                        payload.put(\"data\", data);\n-                    }\n-\n-                    return sender.send(\n-                            authenticatedDevice.getDeviceId(),\n-                            payload.encode().getBytes(StandardCharsets.UTF_8),\n-                            EventConstants.EVENT_CONNECTION_NOTIFICATION_CONTENT_TYPE\n-                            );\n+        return context.getTenantClientFactory().getOrCreateTenantClient()\n+                .map(tenantClient -> tenantClient.get(authenticatedDevice.getTenantId()))\n+                .map(tenantObjectFuture -> {\n+                    return getOrCreateSender(context.getMessageSenderClient(), authenticatedDevice.getTenantId())\n+                            .compose(sender -> {\n+\n+                                final JsonObject payload = new JsonObject();\n+                                payload.put(\"cause\", cause);\n+                                payload.put(\"remote-id\", remoteId);\n+                                // TODO: can this be removed in favour of 'orig_dapter'?", "originalCommit": "491314621515851f8d927b0734116f349fbfb346", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6099296328b44801e81c031dd7a92997230c3846", "chunk": "diff --git a/service-base/src/main/java/org/eclipse/hono/service/monitoring/AbstractMessageSenderConnectionEventProducer.java b/service-base/src/main/java/org/eclipse/hono/service/monitoring/AbstractMessageSenderConnectionEventProducer.java\nindex 68f0172b5..72153f41c 100644\n--- a/service-base/src/main/java/org/eclipse/hono/service/monitoring/AbstractMessageSenderConnectionEventProducer.java\n+++ b/service-base/src/main/java/org/eclipse/hono/service/monitoring/AbstractMessageSenderConnectionEventProducer.java\n\n@@ -85,39 +82,28 @@ public abstract class AbstractMessageSenderConnectionEventProducer implements Co\n             return Future.succeededFuture();\n         }\n \n-        return context.getTenantClientFactory().getOrCreateTenantClient()\n+        return context.getTenantClient().getOrCreateTenantClient()\n                 .map(tenantClient -> tenantClient.get(authenticatedDevice.getTenantId()))\n-                .map(tenantObjectFuture -> {\n+                .map(tenantObject -> {\n                     return getOrCreateSender(context.getMessageSenderClient(), authenticatedDevice.getTenantId())\n                             .compose(sender -> {\n \n                                 final JsonObject payload = new JsonObject();\n                                 payload.put(\"cause\", cause);\n                                 payload.put(\"remote-id\", remoteId);\n-                                // TODO: can this be removed in favour of 'orig_dapter'?\n                                 payload.put(\"source\", protocolAdapter);\n \n                                 if (data != null) {\n                                     payload.put(\"data\", data);\n                                 }\n \n-                                final String tenantId = authenticatedDevice.getTenantId();\n-                                final String deviceId = authenticatedDevice.getDeviceId();\n-                                final ResourceIdentifier target = ResourceIdentifier.from(EventConstants.EVENT_ENDPOINT, tenantId, deviceId);\n-                                final Duration timeToLive = Duration.ofSeconds(tenantObjectFuture.result().getResourceLimits().getMaxTtl());\n-\n-                                // the 'orig_adapter' will be added to the message's application\n-                                // properties to contain the name of the protocol adapter\n-                                // forwarding this connection event\n-                                final Message msg = MessageHelper.newMessage(\n-                                        target, \n-                                        EventConstants.EVENT_CONNECTION_NOTIFICATION_CONTENT_TYPE, \n-                                        payload.toBuffer(), \n-                                        tenantObjectFuture.result(), \n-                                        timeToLive,\n-                                        protocolAdapter);\n-\n-                                return sender.send(msg);\n+                                final Long maxTtl = tenantObject.result().getResourceLimits().getMaxTtl();\n+                                return sender.send(\n+                                        maxTtl,\n+                                        authenticatedDevice.getDeviceId(),\n+                                        null,\n+                                        payload.encode().getBytes(StandardCharsets.UTF_8),\n+                                        EventConstants.EVENT_CONNECTION_NOTIFICATION_CONTENT_TYPE);\n                             });\n                 });\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2NjM2MQ==", "url": "https://github.com/eclipse/hono/pull/1923#discussion_r420566361", "bodyText": "applications", "author": "sophokles73", "createdAt": "2020-05-06T06:18:02Z", "path": "service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java", "diffHunk": "@@ -686,6 +696,44 @@ public void verifyConnectionDurationLimitIsReached(final VertxTestContext ctx) {\n                 }));\n     }\n \n+    /**\n+     * Verifies that the (default) ConnectionEvent API configured for a protocol adapter\n+     * sets the connection event message's TTL header value before forwarding the message\n+     * to downstream aoplications.", "originalCommit": "5098391dc4743fb682c57cc2d0df5ee7153f32c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6099296328b44801e81c031dd7a92997230c3846", "chunk": "diff --git a/service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java b/service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java\nindex 3af3987be..5344ab73b 100644\n--- a/service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java\n+++ b/service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java\n\n@@ -696,44 +686,6 @@ public class AbstractProtocolAdapterBaseTest {\n                 }));\n     }\n \n-    /**\n-     * Verifies that the (default) ConnectionEvent API configured for a protocol adapter\n-     * sets the connection event message's TTL header value before forwarding the message\n-     * to downstream aoplications.\n-     * \n-     * @param ctx The vert.x test context.\n-     */\n-    @Test\n-    public void tesForwardedConnectionEventMessageHasTtlHeaderSet(final VertxTestContext ctx) {\n-\n-        // GIVEN a protocol adapter configured to send connection events\n-        final ConnectionEventProducer connectionEventProducer = new HonoEventConnectionEventProducer();\n-        adapter.setConnectionEventProducer(connectionEventProducer);\n-        final DownstreamSender connectionEventSender = mock(DownstreamSender.class);\n-        when(connectionEventSender.send(any(Message.class))).thenReturn(Future.succeededFuture());\n-        when(downstreamSenderFactory.getOrCreateEventSender(Constants.DEFAULT_TENANT)).thenReturn(Future.succeededFuture(connectionEventSender));\n-\n-        // WHEN a device, belonging to a tenant for which a max TTL is configured, connects to such an adapter\n-        final Device authenticatedDevice = new Device(Constants.DEFAULT_TENANT, \"4711\");\n-        final TenantClient tenantClient = mock(TenantClient.class);\n-        when(tenantClientFactory.getOrCreateTenantClient()).thenReturn(Future.succeededFuture(tenantClient));\n-        final TenantObject tenantObject = TenantObject.from(Constants.DEFAULT_TENANT, true);\n-        final ResourceLimits tenantLimits = mock(ResourceLimits.class);\n-        when(tenantLimits.getMaxTtl()).thenReturn(5L);\n-        tenantObject.setResourceLimits(tenantLimits);\n-        when(tenantClient.get(Constants.DEFAULT_TENANT)).thenReturn(Future.succeededFuture(tenantObject));\n-\n-        // THEN the adapter forwards the connection event message downstream\n-        adapter.sendConnectedEvent(\"remote-id\", authenticatedDevice).setHandler(ctx.succeeding(result -> {\n-            final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);\n-            verify(connectionEventSender).send(messageCaptor.capture());\n-\n-            // AND the forwarded connection event message contains the TTL value (in milliseconds) in its header\n-            ctx.verify(() -> assertThat(messageCaptor.getValue().getTtl(), is(Duration.ofSeconds(5L).toMillis())));\n-            ctx.completeNow();\n-        }));\n-    }\n-\n     private AbstractProtocolAdapterBase<ProtocolAdapterProperties> newProtocolAdapter(final ProtocolAdapterProperties props) {\n \n         return newProtocolAdapter(props, ADAPTER_NAME);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2NjQ3NA==", "url": "https://github.com/eclipse/hono/pull/1923#discussion_r420566474", "bodyText": "testForwarded ...", "author": "sophokles73", "createdAt": "2020-05-06T06:18:22Z", "path": "service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java", "diffHunk": "@@ -686,6 +696,44 @@ public void verifyConnectionDurationLimitIsReached(final VertxTestContext ctx) {\n                 }));\n     }\n \n+    /**\n+     * Verifies that the (default) ConnectionEvent API configured for a protocol adapter\n+     * sets the connection event message's TTL header value before forwarding the message\n+     * to downstream aoplications.\n+     * \n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    public void tesForwardedConnectionEventMessageHasTtlHeaderSet(final VertxTestContext ctx) {", "originalCommit": "5098391dc4743fb682c57cc2d0df5ee7153f32c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6099296328b44801e81c031dd7a92997230c3846", "chunk": "diff --git a/service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java b/service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java\nindex 3af3987be..5344ab73b 100644\n--- a/service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java\n+++ b/service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java\n\n@@ -696,44 +686,6 @@ public class AbstractProtocolAdapterBaseTest {\n                 }));\n     }\n \n-    /**\n-     * Verifies that the (default) ConnectionEvent API configured for a protocol adapter\n-     * sets the connection event message's TTL header value before forwarding the message\n-     * to downstream aoplications.\n-     * \n-     * @param ctx The vert.x test context.\n-     */\n-    @Test\n-    public void tesForwardedConnectionEventMessageHasTtlHeaderSet(final VertxTestContext ctx) {\n-\n-        // GIVEN a protocol adapter configured to send connection events\n-        final ConnectionEventProducer connectionEventProducer = new HonoEventConnectionEventProducer();\n-        adapter.setConnectionEventProducer(connectionEventProducer);\n-        final DownstreamSender connectionEventSender = mock(DownstreamSender.class);\n-        when(connectionEventSender.send(any(Message.class))).thenReturn(Future.succeededFuture());\n-        when(downstreamSenderFactory.getOrCreateEventSender(Constants.DEFAULT_TENANT)).thenReturn(Future.succeededFuture(connectionEventSender));\n-\n-        // WHEN a device, belonging to a tenant for which a max TTL is configured, connects to such an adapter\n-        final Device authenticatedDevice = new Device(Constants.DEFAULT_TENANT, \"4711\");\n-        final TenantClient tenantClient = mock(TenantClient.class);\n-        when(tenantClientFactory.getOrCreateTenantClient()).thenReturn(Future.succeededFuture(tenantClient));\n-        final TenantObject tenantObject = TenantObject.from(Constants.DEFAULT_TENANT, true);\n-        final ResourceLimits tenantLimits = mock(ResourceLimits.class);\n-        when(tenantLimits.getMaxTtl()).thenReturn(5L);\n-        tenantObject.setResourceLimits(tenantLimits);\n-        when(tenantClient.get(Constants.DEFAULT_TENANT)).thenReturn(Future.succeededFuture(tenantObject));\n-\n-        // THEN the adapter forwards the connection event message downstream\n-        adapter.sendConnectedEvent(\"remote-id\", authenticatedDevice).setHandler(ctx.succeeding(result -> {\n-            final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);\n-            verify(connectionEventSender).send(messageCaptor.capture());\n-\n-            // AND the forwarded connection event message contains the TTL value (in milliseconds) in its header\n-            ctx.verify(() -> assertThat(messageCaptor.getValue().getTtl(), is(Duration.ofSeconds(5L).toMillis())));\n-            ctx.completeNow();\n-        }));\n-    }\n-\n     private AbstractProtocolAdapterBase<ProtocolAdapterProperties> newProtocolAdapter(final ProtocolAdapterProperties props) {\n \n         return newProtocolAdapter(props, ADAPTER_NAME);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2Nzc0Nw==", "url": "https://github.com/eclipse/hono/pull/1923#discussion_r420567747", "bodyText": "there is no need to mock this class, is there?", "author": "sophokles73", "createdAt": "2020-05-06T06:22:20Z", "path": "service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java", "diffHunk": "@@ -686,6 +696,44 @@ public void verifyConnectionDurationLimitIsReached(final VertxTestContext ctx) {\n                 }));\n     }\n \n+    /**\n+     * Verifies that the (default) ConnectionEvent API configured for a protocol adapter\n+     * sets the connection event message's TTL header value before forwarding the message\n+     * to downstream aoplications.\n+     * \n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    public void tesForwardedConnectionEventMessageHasTtlHeaderSet(final VertxTestContext ctx) {\n+\n+        // GIVEN a protocol adapter configured to send connection events\n+        final ConnectionEventProducer connectionEventProducer = new HonoEventConnectionEventProducer();\n+        adapter.setConnectionEventProducer(connectionEventProducer);\n+        final DownstreamSender connectionEventSender = mock(DownstreamSender.class);\n+        when(connectionEventSender.send(any(Message.class))).thenReturn(Future.succeededFuture());\n+        when(downstreamSenderFactory.getOrCreateEventSender(Constants.DEFAULT_TENANT)).thenReturn(Future.succeededFuture(connectionEventSender));\n+\n+        // WHEN a device, belonging to a tenant for which a max TTL is configured, connects to such an adapter\n+        final Device authenticatedDevice = new Device(Constants.DEFAULT_TENANT, \"4711\");\n+        final TenantClient tenantClient = mock(TenantClient.class);\n+        when(tenantClientFactory.getOrCreateTenantClient()).thenReturn(Future.succeededFuture(tenantClient));\n+        final TenantObject tenantObject = TenantObject.from(Constants.DEFAULT_TENANT, true);\n+        final ResourceLimits tenantLimits = mock(ResourceLimits.class);", "originalCommit": "5098391dc4743fb682c57cc2d0df5ee7153f32c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyOTQ4OA==", "url": "https://github.com/eclipse/hono/pull/1923#discussion_r420729488", "bodyText": "no, not really. will be fixed", "author": "Alfusainey", "createdAt": "2020-05-06T11:49:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2Nzc0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6099296328b44801e81c031dd7a92997230c3846", "chunk": "diff --git a/service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java b/service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java\nindex 3af3987be..5344ab73b 100644\n--- a/service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java\n+++ b/service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java\n\n@@ -696,44 +686,6 @@ public class AbstractProtocolAdapterBaseTest {\n                 }));\n     }\n \n-    /**\n-     * Verifies that the (default) ConnectionEvent API configured for a protocol adapter\n-     * sets the connection event message's TTL header value before forwarding the message\n-     * to downstream aoplications.\n-     * \n-     * @param ctx The vert.x test context.\n-     */\n-    @Test\n-    public void tesForwardedConnectionEventMessageHasTtlHeaderSet(final VertxTestContext ctx) {\n-\n-        // GIVEN a protocol adapter configured to send connection events\n-        final ConnectionEventProducer connectionEventProducer = new HonoEventConnectionEventProducer();\n-        adapter.setConnectionEventProducer(connectionEventProducer);\n-        final DownstreamSender connectionEventSender = mock(DownstreamSender.class);\n-        when(connectionEventSender.send(any(Message.class))).thenReturn(Future.succeededFuture());\n-        when(downstreamSenderFactory.getOrCreateEventSender(Constants.DEFAULT_TENANT)).thenReturn(Future.succeededFuture(connectionEventSender));\n-\n-        // WHEN a device, belonging to a tenant for which a max TTL is configured, connects to such an adapter\n-        final Device authenticatedDevice = new Device(Constants.DEFAULT_TENANT, \"4711\");\n-        final TenantClient tenantClient = mock(TenantClient.class);\n-        when(tenantClientFactory.getOrCreateTenantClient()).thenReturn(Future.succeededFuture(tenantClient));\n-        final TenantObject tenantObject = TenantObject.from(Constants.DEFAULT_TENANT, true);\n-        final ResourceLimits tenantLimits = mock(ResourceLimits.class);\n-        when(tenantLimits.getMaxTtl()).thenReturn(5L);\n-        tenantObject.setResourceLimits(tenantLimits);\n-        when(tenantClient.get(Constants.DEFAULT_TENANT)).thenReturn(Future.succeededFuture(tenantObject));\n-\n-        // THEN the adapter forwards the connection event message downstream\n-        adapter.sendConnectedEvent(\"remote-id\", authenticatedDevice).setHandler(ctx.succeeding(result -> {\n-            final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);\n-            verify(connectionEventSender).send(messageCaptor.capture());\n-\n-            // AND the forwarded connection event message contains the TTL value (in milliseconds) in its header\n-            ctx.verify(() -> assertThat(messageCaptor.getValue().getTtl(), is(Duration.ofSeconds(5L).toMillis())));\n-            ctx.completeNow();\n-        }));\n-    }\n-\n     private AbstractProtocolAdapterBase<ProtocolAdapterProperties> newProtocolAdapter(final ProtocolAdapterProperties props) {\n \n         return newProtocolAdapter(props, ADAPTER_NAME);\n"}}, {"oid": "6099296328b44801e81c031dd7a92997230c3846", "url": "https://github.com/eclipse/hono/commit/6099296328b44801e81c031dd7a92997230c3846", "message": "[#1714] Set TTL for connection event messages.\n\nfixes #1714\n\nSigned-off-by: Alfusainey Jallow <alf.jallow@gmail.com>", "committedDate": "2020-05-06T11:56:51Z", "type": "commit"}, {"oid": "44b468ca4d40ce9877a26e851ae2f6f51697cc2f", "url": "https://github.com/eclipse/hono/commit/44b468ca4d40ce9877a26e851ae2f6f51697cc2f", "message": "Use MessageHelper.new() to create AMQP message\n\nSigned-off-by: Alfusainey Jallow <alf.jallow@gmail.com>", "committedDate": "2020-05-06T11:56:51Z", "type": "commit"}, {"oid": "dfbea36299a3c3d0b7a0be6adc507ea5fdf6abdc", "url": "https://github.com/eclipse/hono/commit/dfbea36299a3c3d0b7a0be6adc507ea5fdf6abdc", "message": "verify that TTL is set on connect event messages\n\nSigned-off-by: Alfusainey Jallow <alf.jallow@gmail.com>", "committedDate": "2020-05-06T11:56:51Z", "type": "commit"}, {"oid": "163cab9c05e81b30f1784a874bdfa4e3f622a968", "url": "https://github.com/eclipse/hono/commit/163cab9c05e81b30f1784a874bdfa4e3f622a968", "message": "minor fixes\n\nSigned-off-by: Alfusainey Jallow <alf.jallow@gmail.com>", "committedDate": "2020-05-06T12:11:33Z", "type": "commit"}, {"oid": "163cab9c05e81b30f1784a874bdfa4e3f622a968", "url": "https://github.com/eclipse/hono/commit/163cab9c05e81b30f1784a874bdfa4e3f622a968", "message": "minor fixes\n\nSigned-off-by: Alfusainey Jallow <alf.jallow@gmail.com>", "committedDate": "2020-05-06T12:11:33Z", "type": "forcePushed"}]}