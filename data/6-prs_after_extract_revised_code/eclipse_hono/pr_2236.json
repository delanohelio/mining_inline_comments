{"pr_number": 2236, "pr_title": "[#2230] Support limiting resource usage in hono-client", "pr_createdAt": "2020-10-08T09:19:46Z", "pr_url": "https://github.com/eclipse/hono/pull/2236", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI5NjY3NA==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r502296674", "bodyText": "Since the AMQP spec associates 0 with an unlimited size and requires a ulong, I think MAX_MESSAGE_SIZE_UNLIMITED should be 0 instead of   -1 (otherwise the attach frame would contain a value of 18446744073709551615 here, I guess).\nWith that, the condition above can be simplified to size < 0 and then the existing exception text also takes the unlimited case into account.", "author": "calohmn", "createdAt": "2020-10-09T09:14:18Z", "path": "core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java", "diffHunk": "@@ -575,4 +603,140 @@ public final Pattern getAddressRewritePattern() {\n     public final String getAddressRewriteReplacement() {\n         return addressRewriteReplacement;\n     }\n+\n+    /**\n+     * Gets the minimum size of AMQP 1.0 messages that this client requires a peer to accept.\n+     * <p>\n+     * The default value of this property is {@value #MIN_MESSAGE_SIZE_NONE}.\n+     * <p>\n+     * The value of this property will be used by the client during sender link establishment.\n+     * Link establishment will fail, if the peer indicates a max-message-size in its <em>attach</em>\n+     * frame that is smaller than the configured minimum message size.\n+     *\n+     * @return The message size in bytes or {@value #MIN_MESSAGE_SIZE_NONE}, indicating no minimum size at all.\n+     */\n+    public final long getMinMessageSize() {\n+        return minMessageSize;\n+    }\n+\n+    /**\n+     * Sets the minimum size of AMQP 1.0 messages that this client requires a peer to accept.\n+     * <p>\n+     * The default value of this property is {@value #MIN_MESSAGE_SIZE_NONE}.\n+     * <p>\n+     * The value of this property will be used by the client during sender link establishment.\n+     * Link establishment will fail, if the peer indicates a max-message-size in its <em>attach</em>\n+     * frame that is smaller than the configured minimum message size.\n+     *\n+     * @param size The message size in bytes or {@value #MIN_MESSAGE_SIZE_NONE}, indicating no minimum size at all.\n+     * @throws IllegalArgumentException if size is &lt; 0.\n+     */\n+    public final void setMinMessageSize(final long size) {\n+        if (size < MIN_MESSAGE_SIZE_NONE) {\n+            throw new IllegalArgumentException(\"min message size must be >= 0\");\n+        }\n+        this.minMessageSize = size;\n+    }\n+\n+\n+    /**\n+     * Gets the maximum size of an AMQP 1.0 message that this client accepts from a peer.\n+     * <p>\n+     * The default value of this property is {@value #MAX_MESSAGE_SIZE_UNLIMITED}.\n+     *\n+     * @return The message size in bytes or {@value #MAX_MESSAGE_SIZE_UNLIMITED}, indicating messages of any size.\n+     */\n+    public final long getMaxMessageSize() {\n+        return maxMessageSize;\n+    }\n+\n+    /**\n+     * Sets the maximum size of an AMQP 1.0 message that this client should accept from a peer.\n+     * <p>\n+     * The default value of this property is {@value #MAX_MESSAGE_SIZE_UNLIMITED}.\n+     *\n+     * @param size The message size in bytes or {@value #MAX_MESSAGE_SIZE_UNLIMITED}, indicating messages of any size.\n+     * @throws IllegalArgumentException if size is &lt; 0 and not {@value #MAX_MESSAGE_SIZE_UNLIMITED}.\n+     */\n+    public final void setMaxMessageSize(final long size) {\n+        if (size != MAX_MESSAGE_SIZE_UNLIMITED && size < 0) {\n+            throw new IllegalArgumentException(\"max-message-size must be >= 0\");", "originalCommit": "f15438df774eb9a5d84bddeb190c56ea79531c16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM4MDgwMg==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r502380802", "bodyText": "That is true. However, I wanted to use the same semantics as with MAX_FRAME_SIZE, i.e. use -1 in both cases to indicate no limit. In fact, the ProtonClientOptions require a negative value to indicate no limit ...", "author": "sophokles73", "createdAt": "2020-10-09T12:05:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI5NjY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5NjA4MQ==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r503096081", "bodyText": "Ok. I that case I would suggest adding a check when applying the MaxMessageSize value, either not using the value at all:\n                if (clientConfigProperties.getMaxMessageSize() != ClientConfigProperties.MAX_MESSAGE_SIZE_UNLIMITED) {\n                    receiver.setMaxMessageSize(new UnsignedLong(clientConfigProperties.getMaxMessageSize()));\n                }\n\nor applying 0 in the \"unlimited size\" case, in order to not transport 18446744073709551615 on the wire.\nAnd I would also change the exception text to max-message-size must be >= -1.", "author": "calohmn", "createdAt": "2020-10-12T07:40:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI5NjY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEzNzM1Nw==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r503137357", "bodyText": "yes, that makes sense ...", "author": "sophokles73", "createdAt": "2020-10-12T08:49:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI5NjY3NA=="}], "type": "inlineReview", "revised_code": {"commit": "b4bdea071062c09031b995b1bc04c4b11a440fa9", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java b/core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java\nindex 687dfdc69..469b0cb18 100644\n--- a/core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java\n+++ b/core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java\n\n@@ -607,35 +608,35 @@ public class ClientConfigProperties extends AuthenticatingClientConfigProperties\n     /**\n      * Gets the minimum size of AMQP 1.0 messages that this client requires a peer to accept.\n      * <p>\n-     * The default value of this property is {@value #MIN_MESSAGE_SIZE_NONE}.\n+     * The default value of this property is {@value #MIN_MAX_MESSAGE_SIZE_NONE}.\n      * <p>\n      * The value of this property will be used by the client during sender link establishment.\n      * Link establishment will fail, if the peer indicates a max-message-size in its <em>attach</em>\n      * frame that is smaller than the configured minimum message size.\n      *\n-     * @return The message size in bytes or {@value #MIN_MESSAGE_SIZE_NONE}, indicating no minimum size at all.\n+     * @return The message size in bytes or {@value #MIN_MAX_MESSAGE_SIZE_NONE}, indicating no minimum size at all.\n      */\n-    public final long getMinMessageSize() {\n-        return minMessageSize;\n+    public final long getMinMaxMessageSize() {\n+        return minMaxMessageSize;\n     }\n \n     /**\n      * Sets the minimum size of AMQP 1.0 messages that this client requires a peer to accept.\n      * <p>\n-     * The default value of this property is {@value #MIN_MESSAGE_SIZE_NONE}.\n+     * The default value of this property is {@value #MIN_MAX_MESSAGE_SIZE_NONE}.\n      * <p>\n      * The value of this property will be used by the client during sender link establishment.\n      * Link establishment will fail, if the peer indicates a max-message-size in its <em>attach</em>\n      * frame that is smaller than the configured minimum message size.\n      *\n-     * @param size The message size in bytes or {@value #MIN_MESSAGE_SIZE_NONE}, indicating no minimum size at all.\n+     * @param size The message size in bytes or {@value #MIN_MAX_MESSAGE_SIZE_NONE}, indicating no minimum size at all.\n      * @throws IllegalArgumentException if size is &lt; 0.\n      */\n-    public final void setMinMessageSize(final long size) {\n-        if (size < MIN_MESSAGE_SIZE_NONE) {\n+    public final void setMinMaxMessageSize(final long size) {\n+        if (size < MIN_MAX_MESSAGE_SIZE_NONE) {\n             throw new IllegalArgumentException(\"min message size must be >= 0\");\n         }\n-        this.minMessageSize = size;\n+        this.minMaxMessageSize = size;\n     }\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzMDU0MA==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r502330540", "bodyText": "I think this property is quite confusing. Just guessing from the name, I would think that with such a setting, messages with a smaller size than configured here would be dropped/rejected. However, its actual semantics would be described by a name like getMinimumRequiredPeerMaxMessageSize() (which is maybe a bit long), right?\nAlso the fact that getMaxMessageSize only applies to a receiver whereas getMinMessageSize is only for a sender makes things somewhat hard to grasp at first sight.\nCan there be a better name? Or, do we really need this property?", "author": "calohmn", "createdAt": "2020-10-09T10:17:35Z", "path": "core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java", "diffHunk": "@@ -575,4 +603,140 @@ public final Pattern getAddressRewritePattern() {\n     public final String getAddressRewriteReplacement() {\n         return addressRewriteReplacement;\n     }\n+\n+    /**\n+     * Gets the minimum size of AMQP 1.0 messages that this client requires a peer to accept.\n+     * <p>\n+     * The default value of this property is {@value #MIN_MESSAGE_SIZE_NONE}.\n+     * <p>\n+     * The value of this property will be used by the client during sender link establishment.\n+     * Link establishment will fail, if the peer indicates a max-message-size in its <em>attach</em>\n+     * frame that is smaller than the configured minimum message size.\n+     *\n+     * @return The message size in bytes or {@value #MIN_MESSAGE_SIZE_NONE}, indicating no minimum size at all.\n+     */\n+    public final long getMinMessageSize() {\n+        return minMessageSize;", "originalCommit": "f15438df774eb9a5d84bddeb190c56ea79531c16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM4MTcyNQ==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r502381725", "bodyText": "Or, do we really need this property?\n\nWhat is the alternative? Having the sender link being closed on each message being sent that is bigger than the peer's max-message-size?", "author": "sophokles73", "createdAt": "2020-10-09T12:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzMDU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEwNjcwMA==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r503106700", "bodyText": "What is the alternative? Having the sender link being closed on each message being sent that is bigger than the peer's max-message-size?\n\nRight, having that check on link establishment already is better. For the use case of the telemetry/event sender clients in the protocol adapters, I think this config value should internally be modified to be at least the configured ServiceConfigProperties#getMaxPayloadSize value.\nI still think the name should be changed, though. How about getMinMaxMessageSize or getMinMessageSizeLimit?\n(MinMaxMessageSize would be similar in naming to the MIN-MAX-FRAME-SIZE constant of the AMQP spec).", "author": "calohmn", "createdAt": "2020-10-12T07:59:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzMDU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEzNjk3Mg==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r503136972", "bodyText": "let's use minMaxMessageSize then ...", "author": "sophokles73", "createdAt": "2020-10-12T08:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzMDU0MA=="}], "type": "inlineReview", "revised_code": {"commit": "b4bdea071062c09031b995b1bc04c4b11a440fa9", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java b/core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java\nindex 687dfdc69..469b0cb18 100644\n--- a/core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java\n+++ b/core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java\n\n@@ -607,35 +608,35 @@ public class ClientConfigProperties extends AuthenticatingClientConfigProperties\n     /**\n      * Gets the minimum size of AMQP 1.0 messages that this client requires a peer to accept.\n      * <p>\n-     * The default value of this property is {@value #MIN_MESSAGE_SIZE_NONE}.\n+     * The default value of this property is {@value #MIN_MAX_MESSAGE_SIZE_NONE}.\n      * <p>\n      * The value of this property will be used by the client during sender link establishment.\n      * Link establishment will fail, if the peer indicates a max-message-size in its <em>attach</em>\n      * frame that is smaller than the configured minimum message size.\n      *\n-     * @return The message size in bytes or {@value #MIN_MESSAGE_SIZE_NONE}, indicating no minimum size at all.\n+     * @return The message size in bytes or {@value #MIN_MAX_MESSAGE_SIZE_NONE}, indicating no minimum size at all.\n      */\n-    public final long getMinMessageSize() {\n-        return minMessageSize;\n+    public final long getMinMaxMessageSize() {\n+        return minMaxMessageSize;\n     }\n \n     /**\n      * Sets the minimum size of AMQP 1.0 messages that this client requires a peer to accept.\n      * <p>\n-     * The default value of this property is {@value #MIN_MESSAGE_SIZE_NONE}.\n+     * The default value of this property is {@value #MIN_MAX_MESSAGE_SIZE_NONE}.\n      * <p>\n      * The value of this property will be used by the client during sender link establishment.\n      * Link establishment will fail, if the peer indicates a max-message-size in its <em>attach</em>\n      * frame that is smaller than the configured minimum message size.\n      *\n-     * @param size The message size in bytes or {@value #MIN_MESSAGE_SIZE_NONE}, indicating no minimum size at all.\n+     * @param size The message size in bytes or {@value #MIN_MAX_MESSAGE_SIZE_NONE}, indicating no minimum size at all.\n      * @throws IllegalArgumentException if size is &lt; 0.\n      */\n-    public final void setMinMessageSize(final long size) {\n-        if (size < MIN_MESSAGE_SIZE_NONE) {\n+    public final void setMinMaxMessageSize(final long size) {\n+        if (size < MIN_MAX_MESSAGE_SIZE_NONE) {\n             throw new IllegalArgumentException(\"min message size must be >= 0\");\n         }\n-        this.minMessageSize = size;\n+        this.minMaxMessageSize = size;\n     }\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzNDA2OA==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r502334068", "bodyText": "I think throwing a ClientErrorException here means that we have to adapt the code for sending telemetry messages for example by catching this ClientErrorException and rethrowing it back as a ServerErrorException, so that the device gets a 5xx error here.", "author": "calohmn", "createdAt": "2020-10-09T10:24:40Z", "path": "client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java", "diffHunk": "@@ -769,9 +832,20 @@ public void closeAndFree(\n \n                     } else if (HonoProtonHelper.isLinkEstablished(sender)) {\n \n-                        log.debug(\"sender open [target: {}, sendQueueFull: {}]\", targetAddress, sender.sendQueueFull());\n-                        // wait on credits a little time, if not already given\n-                        if (sender.getCredit() <= 0) {\n+                        log.debug(\"sender open [target: {}, sendQueueFull: {}, remote max-message-size: {}]\",\n+                                targetAddress, sender.sendQueueFull(), sender.getRemoteMaxMessageSize());\n+                        final long remoteMaxMessageSize = Optional.ofNullable(sender.getRemoteMaxMessageSize())\n+                                .map(UnsignedLong::longValue)\n+                                .orElse(0L);\n+                        if (remoteMaxMessageSize < clientConfigProperties.getMinMessageSize()) {\n+                            // peer won't accept our (biggest) messages\n+                            sender.close();\n+                            log.debug(\"peer does not support minimum message size [required: {}, supported: {}\",\n+                                    clientConfigProperties.getMinMessageSize(), remoteMaxMessageSize);\n+                            senderPromise.tryFail(new ClientErrorException(HttpURLConnection.HTTP_PRECON_FAILED,\n+                                    \"peer does not meet sender's minimum max-message-size requirement\"));", "originalCommit": "f15438df774eb9a5d84bddeb190c56ea79531c16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM4NDA4MQ==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r502384081", "bodyText": "Well, both the DownstreamSender.send() and HonoConnection.createSender() JavaDoc allow the returned Future to be failed with a ClientErrorException. Or am I missing something?", "author": "sophokles73", "createdAt": "2020-10-09T12:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzNDA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMjk4Mg==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r503112982", "bodyText": "Yes, I see there is a case already where a ClientErrorException is thrown in HonoConnection.createSender().\nSo that is an issue independent of this PR really, preventing a ClientErrorException on createSender() for a telemetry/event sender to be propagated to the device. I'll create an issue for that. EDIT: Created issue #2247.", "author": "calohmn", "createdAt": "2020-10-12T08:10:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzNDA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "b4bdea071062c09031b995b1bc04c4b11a440fa9", "chunk": "diff --git a/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java b/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java\nindex c27101504..f987d3411 100644\n--- a/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java\n+++ b/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java\n\n@@ -837,13 +837,14 @@ public class HonoConnectionImpl implements HonoConnection {\n                         final long remoteMaxMessageSize = Optional.ofNullable(sender.getRemoteMaxMessageSize())\n                                 .map(UnsignedLong::longValue)\n                                 .orElse(0L);\n-                        if (remoteMaxMessageSize < clientConfigProperties.getMinMessageSize()) {\n+                        if (remoteMaxMessageSize > 0 && remoteMaxMessageSize < clientConfigProperties.getMinMaxMessageSize()) {\n                             // peer won't accept our (biggest) messages\n                             sender.close();\n-                            log.debug(\"peer does not support minimum message size [required: {}, supported: {}\",\n-                                    clientConfigProperties.getMinMessageSize(), remoteMaxMessageSize);\n-                            senderPromise.tryFail(new ClientErrorException(HttpURLConnection.HTTP_PRECON_FAILED,\n-                                    \"peer does not meet sender's minimum max-message-size requirement\"));\n+                            final String msg = String.format(\n+                                    \"peer does not support minimum max-message-size [required: {}, supported: {}\",\n+                                    clientConfigProperties.getMinMaxMessageSize(), remoteMaxMessageSize);\n+                            log.debug(msg);\n+                            senderPromise.tryFail(new ClientErrorException(HttpURLConnection.HTTP_PRECON_FAILED, msg));\n                         } else if (sender.getCredit() <= 0) {\n                             // wait on credits a little time, if not already given\n                             final long waitOnCreditsTimerId = vertx.setTimer(clientConfigProperties.getFlowLatency(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1NzkxNg==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r503257916", "bodyText": "I think the connection should be closed in this case here (that was also the old behaviour triggered via the close handler of the ProtonConnectionImpl default session).\nOr the session should be recreated - but probably better to close the connection here, so that connection and session get recreated on reconnect.", "author": "calohmn", "createdAt": "2020-10-12T12:22:32Z", "path": "client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java", "diffHunk": "@@ -707,6 +718,58 @@ public void closeAndFree(\n         }\n     }\n \n+    private Future<ProtonSession> createDefaultSession(final ProtonConnection connection) {\n+\n+        final Promise<ProtonSession> result = Promise.promise();\n+        if (connection == null) {\n+            result.fail(new NullPointerException(\"connection must not be null\"));\n+        } else {\n+            log.debug(\"trying to establish AMQP session with server [{}:{}, role: {}]\",\n+                    connectionFactory.getHost(),\n+                    connectionFactory.getPort(),\n+                    connectionFactory.getServerRole());\n+            final ProtonSession session = connection.createSession();\n+            session.openHandler(beginAttempt -> {\n+                if (beginAttempt.succeeded()) {\n+                    log.debug(\"successfully established AMQP session with server [{}:{}, role: {}]\",\n+                            connectionFactory.getHost(),\n+                            connectionFactory.getPort(),\n+                            connectionFactory.getServerRole());\n+                    result.complete(session);\n+                } else {\n+                    log.debug(\"failed to establish AMQP session with server [{}:{}, role: {}]\",\n+                            connectionFactory.getHost(),\n+                            connectionFactory.getPort(),\n+                            connectionFactory.getServerRole(),\n+                            beginAttempt.cause());\n+                    result.fail(new ClientErrorException(\n+                            HttpURLConnection.HTTP_BAD_REQUEST,\n+                            \"failed to establish AMQP session with peer\",\n+                            beginAttempt.cause()));\n+                }\n+            });\n+            session.closeHandler(remoteClose -> {\n+                final ErrorCondition error = session.getRemoteCondition();\n+                if (error == null) {\n+                    log.debug(\"server [{}:{}, role: {}] closed session\",\n+                            connectionFactory.getHost(),\n+                            connectionFactory.getPort(),\n+                            connectionFactory.getServerRole());\n+                } else {\n+                    log.debug(\"server [{}:{}, role: {}] closed session with error [condition: {}, description: {}]\",\n+                            connectionFactory.getHost(),\n+                            connectionFactory.getPort(),\n+                            connectionFactory.getServerRole(),\n+                            error.getCondition(),\n+                            error.getDescription());\n+                }", "originalCommit": "85c96618bdac058047a16ca01ccdc3b3dc9ddd45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM3MDAwOA==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r503370008", "bodyText": "yes, closing the connection seems to be the right thing to do. I will set a corresponding handler ...", "author": "sophokles73", "createdAt": "2020-10-12T15:24:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1NzkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "b4bdea071062c09031b995b1bc04c4b11a440fa9", "chunk": "diff --git a/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java b/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java\nindex 838fb700d..f987d3411 100644\n--- a/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java\n+++ b/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java\n\n@@ -749,20 +755,14 @@ public class HonoConnectionImpl implements HonoConnection {\n                 }\n             });\n             session.closeHandler(remoteClose -> {\n-                final ErrorCondition error = session.getRemoteCondition();\n-                if (error == null) {\n-                    log.debug(\"server [{}:{}, role: {}] closed session\",\n-                            connectionFactory.getHost(),\n-                            connectionFactory.getPort(),\n-                            connectionFactory.getServerRole());\n-                } else {\n-                    log.debug(\"server [{}:{}, role: {}] closed session with error [condition: {}, description: {}]\",\n-                            connectionFactory.getHost(),\n-                            connectionFactory.getPort(),\n-                            connectionFactory.getServerRole(),\n-                            error.getCondition(),\n-                            error.getDescription());\n-                }\n+                final StringBuilder msgBuilder = new StringBuilder(\"the connection's session closed unexpectedly\");\n+                Optional.ofNullable(session.getRemoteCondition())\n+                    .ifPresent(error -> {\n+                        msgBuilder.append(String.format(\" [condition: %s, description: %s]\",\n+                                error.getCondition(), error.getDescription()));\n+                    });\n+                Optional.ofNullable(connectionCloseHandler)\n+                    .ifPresent(ch -> ch.handle(Future.failedFuture(msgBuilder.toString())));\n             });\n             session.setIncomingCapacity(clientConfigProperties.getMaxSessionWindowSize());\n             session.open();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2NDUyMg==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r503264522", "bodyText": "This line should also be added to AmqpCliClient#connectToAdapter() FMPOV.", "author": "calohmn", "createdAt": "2020-10-12T12:34:59Z", "path": "core/src/main/java/org/eclipse/hono/connection/impl/ConnectionFactoryImpl.java", "diffHunk": "@@ -403,6 +403,7 @@ private ProtonClientOptions createClientOptions() {\n         final ProtonClientOptions options = new ProtonClientOptions();\n         options.setConnectTimeout(config.getConnectTimeout());\n         options.setHeartbeat(config.getHeartbeatInterval());\n+        options.setMaxFrameSize(config.getMaxFrameSize());", "originalCommit": "85c96618bdac058047a16ca01ccdc3b3dc9ddd45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3OTkxMQ==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r503279911", "bodyText": "Instead of failing all reconnect attempts like this, close the connection and call reconnect in the onFailure case here instead?", "author": "calohmn", "createdAt": "2020-10-12T13:01:07Z", "path": "client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java", "diffHunk": "@@ -436,8 +441,14 @@ private void connect(\n                                             connectionFactory.getPort(),\n                                             connectionFactory.getServerRole(),\n                                             newConnection.getRemoteContainer());\n-                                    setConnection(newConnection);\n-                                    wrappedConnectionHandler.handle(Future.succeededFuture(this));\n+                                    createDefaultSession(newConnection)\n+                                        .onSuccess(newSession -> {\n+                                            setConnection(newConnection, newSession);\n+                                            wrappedConnectionHandler.handle(Future.succeededFuture(this));\n+                                        })\n+                                        .onFailure(t -> {\n+                                            wrappedConnectionHandler.handle(Future.failedFuture(t));", "originalCommit": "85c96618bdac058047a16ca01ccdc3b3dc9ddd45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwMDc3MA==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r503700770", "bodyText": "If the peer does not accept the session I do not really see why it should accept it in subsequent attempts. FMPOV this is comparable to wrong credentials, the peer either is willing to open a session or not, or am I mistaken?\nI agree that we should close the newly opened connection but then I guess we will need to fail the connection attempt. WDYT?", "author": "sophokles73", "createdAt": "2020-10-13T06:40:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3OTkxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2NDM2OA==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r503764368", "bodyText": "For a session to not get established by the remote peer, here Qpid in particular, I could think of 2 reasons:\n\nmaxSessions having been reached already (shouldn't happen here since we only use one session per connection)\nor Qpid not having enough memory to create a new session.\n\nFor the 2nd case, I think it would be good to retry the connection attempt, potentially ending up at another Qpid instance or Qpid having been restarted then.\nFailing the connection attempt instead in this case would be fatal and cause the whole adapter to need a restart in case of the telemetry/event sender connection for example, if I'm not mistaken.", "author": "calohmn", "createdAt": "2020-10-13T08:29:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3OTkxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2NTY2Nw==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r503865667", "bodyText": "I see your point and it makes sense to me. The default session in vertx-proton only has a close handler which is used to trigger the underlying connection's close handler. This mechanism is already being used by Hono implicitly, so I guess we could use the same approach here as well, i.e. do not register an explicit open handler for the session at all but simply rely on the (standard) behavior of the connection's close handler to trigger reconnect. WDYT?", "author": "sophokles73", "createdAt": "2020-10-13T11:12:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3OTkxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkxMDIyMg==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r503910222", "bodyText": "Yes, I agree.", "author": "calohmn", "createdAt": "2020-10-13T12:30:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3OTkxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b4bdea071062c09031b995b1bc04c4b11a440fa9", "chunk": "diff --git a/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java b/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java\nindex 838fb700d..f987d3411 100644\n--- a/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java\n+++ b/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java\n\n@@ -447,6 +449,9 @@ public class HonoConnectionImpl implements HonoConnection {\n                                             wrappedConnectionHandler.handle(Future.succeededFuture(this));\n                                         })\n                                         .onFailure(t -> {\n+                                            newConnection.closeHandler(null);\n+                                            newConnection.disconnectHandler(null);\n+                                            newConnection.close();\n                                             wrappedConnectionHandler.handle(Future.failedFuture(t));\n                                         });\n                                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI4Nzc0Mg==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r503287742", "bodyText": "I think in the condition here there is an added remoteMaxMessageSize > 0 missing.", "author": "calohmn", "createdAt": "2020-10-12T13:14:37Z", "path": "client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java", "diffHunk": "@@ -769,9 +832,20 @@ public void closeAndFree(\n \n                     } else if (HonoProtonHelper.isLinkEstablished(sender)) {\n \n-                        log.debug(\"sender open [target: {}, sendQueueFull: {}]\", targetAddress, sender.sendQueueFull());\n-                        // wait on credits a little time, if not already given\n-                        if (sender.getCredit() <= 0) {\n+                        log.debug(\"sender open [target: {}, sendQueueFull: {}, remote max-message-size: {}]\",\n+                                targetAddress, sender.sendQueueFull(), sender.getRemoteMaxMessageSize());\n+                        final long remoteMaxMessageSize = Optional.ofNullable(sender.getRemoteMaxMessageSize())\n+                                .map(UnsignedLong::longValue)\n+                                .orElse(0L);\n+                        if (remoteMaxMessageSize < clientConfigProperties.getMinMaxMessageSize()) {\n+                            // peer won't accept our (biggest) messages\n+                            sender.close();", "originalCommit": "85c96618bdac058047a16ca01ccdc3b3dc9ddd45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4bdea071062c09031b995b1bc04c4b11a440fa9", "chunk": "diff --git a/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java b/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java\nindex 838fb700d..f987d3411 100644\n--- a/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java\n+++ b/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java\n\n@@ -837,13 +837,14 @@ public class HonoConnectionImpl implements HonoConnection {\n                         final long remoteMaxMessageSize = Optional.ofNullable(sender.getRemoteMaxMessageSize())\n                                 .map(UnsignedLong::longValue)\n                                 .orElse(0L);\n-                        if (remoteMaxMessageSize < clientConfigProperties.getMinMaxMessageSize()) {\n+                        if (remoteMaxMessageSize > 0 && remoteMaxMessageSize < clientConfigProperties.getMinMaxMessageSize()) {\n                             // peer won't accept our (biggest) messages\n                             sender.close();\n-                            log.debug(\"peer does not support minimum message size [required: {}, supported: {}\",\n+                            final String msg = String.format(\n+                                    \"peer does not support minimum max-message-size [required: {}, supported: {}\",\n                                     clientConfigProperties.getMinMaxMessageSize(), remoteMaxMessageSize);\n-                            senderPromise.tryFail(new ClientErrorException(HttpURLConnection.HTTP_PRECON_FAILED,\n-                                    \"peer does not meet sender's minimum max-message-size requirement\"));\n+                            log.debug(msg);\n+                            senderPromise.tryFail(new ClientErrorException(HttpURLConnection.HTTP_PRECON_FAILED, msg));\n                         } else if (sender.getCredit() <= 0) {\n                             // wait on credits a little time, if not already given\n                             final long waitOnCreditsTimerId = vertx.setTimer(clientConfigProperties.getFlowLatency(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI5NjI0OA==", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r503296248", "bodyText": "Maybe include the remoteMaxMessageSize in the exception text so that it appears in the surrounding tracing span (if one exists) via the logged error message? (So that the application doesn't needed to be restarted if not run with DEBUG log level in order to find out about the actual advertised value.)", "author": "calohmn", "createdAt": "2020-10-12T13:28:52Z", "path": "client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java", "diffHunk": "@@ -769,9 +832,20 @@ public void closeAndFree(\n \n                     } else if (HonoProtonHelper.isLinkEstablished(sender)) {\n \n-                        log.debug(\"sender open [target: {}, sendQueueFull: {}]\", targetAddress, sender.sendQueueFull());\n-                        // wait on credits a little time, if not already given\n-                        if (sender.getCredit() <= 0) {\n+                        log.debug(\"sender open [target: {}, sendQueueFull: {}, remote max-message-size: {}]\",\n+                                targetAddress, sender.sendQueueFull(), sender.getRemoteMaxMessageSize());\n+                        final long remoteMaxMessageSize = Optional.ofNullable(sender.getRemoteMaxMessageSize())\n+                                .map(UnsignedLong::longValue)\n+                                .orElse(0L);\n+                        if (remoteMaxMessageSize < clientConfigProperties.getMinMaxMessageSize()) {\n+                            // peer won't accept our (biggest) messages\n+                            sender.close();\n+                            log.debug(\"peer does not support minimum message size [required: {}, supported: {}\",\n+                                    clientConfigProperties.getMinMaxMessageSize(), remoteMaxMessageSize);\n+                            senderPromise.tryFail(new ClientErrorException(HttpURLConnection.HTTP_PRECON_FAILED,\n+                                    \"peer does not meet sender's minimum max-message-size requirement\"));", "originalCommit": "85c96618bdac058047a16ca01ccdc3b3dc9ddd45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4bdea071062c09031b995b1bc04c4b11a440fa9", "chunk": "diff --git a/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java b/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java\nindex 838fb700d..f987d3411 100644\n--- a/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java\n+++ b/client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java\n\n@@ -837,13 +837,14 @@ public class HonoConnectionImpl implements HonoConnection {\n                         final long remoteMaxMessageSize = Optional.ofNullable(sender.getRemoteMaxMessageSize())\n                                 .map(UnsignedLong::longValue)\n                                 .orElse(0L);\n-                        if (remoteMaxMessageSize < clientConfigProperties.getMinMaxMessageSize()) {\n+                        if (remoteMaxMessageSize > 0 && remoteMaxMessageSize < clientConfigProperties.getMinMaxMessageSize()) {\n                             // peer won't accept our (biggest) messages\n                             sender.close();\n-                            log.debug(\"peer does not support minimum message size [required: {}, supported: {}\",\n+                            final String msg = String.format(\n+                                    \"peer does not support minimum max-message-size [required: {}, supported: {}\",\n                                     clientConfigProperties.getMinMaxMessageSize(), remoteMaxMessageSize);\n-                            senderPromise.tryFail(new ClientErrorException(HttpURLConnection.HTTP_PRECON_FAILED,\n-                                    \"peer does not meet sender's minimum max-message-size requirement\"));\n+                            log.debug(msg);\n+                            senderPromise.tryFail(new ClientErrorException(HttpURLConnection.HTTP_PRECON_FAILED, msg));\n                         } else if (sender.getCredit() <= 0) {\n                             // wait on credits a little time, if not already given\n                             final long waitOnCreditsTimerId = vertx.setTimer(clientConfigProperties.getFlowLatency(),\n"}}, {"oid": "b4bdea071062c09031b995b1bc04c4b11a440fa9", "url": "https://github.com/eclipse/hono/commit/b4bdea071062c09031b995b1bc04c4b11a440fa9", "message": "Improve handling of failure to establish session\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-10-13T07:04:09Z", "type": "forcePushed"}, {"oid": "a619d68bfdc23c545015116c6313f713f8c48b40", "url": "https://github.com/eclipse/hono/commit/a619d68bfdc23c545015116c6313f713f8c48b40", "message": "[#2230] Support limiting resource usage in hono-client\n\nThe client now supports setting\n- the max frame size that should be used for outgoing connections and\n- the max-message-size to be used for (receiver) links created by the\nclient and\n- the incoming window size of sessions created by the client.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-10-14T07:46:22Z", "type": "commit"}, {"oid": "35eb6c394763ee60306449ec1e04b8154641307e", "url": "https://github.com/eclipse/hono/commit/35eb6c394763ee60306449ec1e04b8154641307e", "message": "Improve documentation\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-10-14T07:46:22Z", "type": "commit"}, {"oid": "4a43d983674bc2845375a753a044586bcb192a3a", "url": "https://github.com/eclipse/hono/commit/4a43d983674bc2845375a753a044586bcb192a3a", "message": "Incorporate feedback\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-10-14T07:46:23Z", "type": "commit"}, {"oid": "4536afff60810d708be199c652fc9e6fa33e0e74", "url": "https://github.com/eclipse/hono/commit/4536afff60810d708be199c652fc9e6fa33e0e74", "message": "Improve handling of failure to establish session\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-10-14T07:46:23Z", "type": "commit"}, {"oid": "b2c6bb313886735a40b043449c94d3fa35fcc403", "url": "https://github.com/eclipse/hono/commit/b2c6bb313886735a40b043449c94d3fa35fcc403", "message": "Register a session close handler only\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-10-14T07:46:23Z", "type": "commit"}, {"oid": "b2c6bb313886735a40b043449c94d3fa35fcc403", "url": "https://github.com/eclipse/hono/commit/b2c6bb313886735a40b043449c94d3fa35fcc403", "message": "Register a session close handler only\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-10-14T07:46:23Z", "type": "forcePushed"}, {"oid": "05edfce52f488c33014df567020279515316eae6", "url": "https://github.com/eclipse/hono/commit/05edfce52f488c33014df567020279515316eae6", "message": "Add entry to release notes\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>", "committedDate": "2020-10-14T09:29:49Z", "type": "commit"}]}