{"pr_number": 2071, "pr_title": "[#2070] Implement downstream address rewrite feature", "pr_createdAt": "2020-07-06T15:45:09Z", "pr_url": "https://github.com/eclipse/hono/pull/2071", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MDc2Mg==", "url": "https://github.com/eclipse/hono/pull/2071#discussion_r450670762", "bodyText": "is this supposed to match the regex that is configured in the registry for tenant and device IDs? If so, I believe that we will need to find a way to keep them in sync, right?", "author": "sophokles73", "createdAt": "2020-07-07T07:42:52Z", "path": "core/src/main/java/org/eclipse/hono/util/AddressHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.util;\n+\n+import java.util.Objects;\n+import java.util.regex.PatternSyntaxException;\n+\n+/**\n+ * Utility class for handling AMQP addresses.\n+ */\n+public class AddressHelper {\n+\n+    static final String ID_REGEX = \"[a-zA-Z0-9-_\\\\.]+\";", "originalCommit": "140a4c8a38bf848be5efecb9e047e70e4921fcfc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e59bb93c993b426afdd8cd44df43395134afe314", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/util/AddressHelper.java b/core/src/main/java/org/eclipse/hono/util/AddressHelper.java\nindex 67c69e341..7fb358fbc 100644\n--- a/core/src/main/java/org/eclipse/hono/util/AddressHelper.java\n+++ b/core/src/main/java/org/eclipse/hono/util/AddressHelper.java\n\n@@ -20,8 +20,6 @@ import java.util.regex.PatternSyntaxException;\n  */\n public class AddressHelper {\n \n-    static final String ID_REGEX = \"[a-zA-Z0-9-_\\\\.]+\";\n-\n     private AddressHelper() {\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MzcwMg==", "url": "https://github.com/eclipse/hono/pull/2071#discussion_r450673702", "bodyText": "maybe split this up into distinct test cases?", "author": "sophokles73", "createdAt": "2020-07-07T07:48:49Z", "path": "core/src/test/java/org/eclipse/hono/util/AddressHelperTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.util;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Tests address rewrite rules.\n+ */\n+public class AddressHelperTest {\n+\n+    /**\n+     * Tests address rewrite rules.\n+     */\n+    @Test\n+    public void testAddressRewrite() {", "originalCommit": "140a4c8a38bf848be5efecb9e047e70e4921fcfc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e59bb93c993b426afdd8cd44df43395134afe314", "chunk": "diff --git a/core/src/test/java/org/eclipse/hono/util/AddressHelperTest.java b/core/src/test/java/org/eclipse/hono/util/AddressHelperTest.java\nindex b7b9861de..e5233bd49 100644\n--- a/core/src/test/java/org/eclipse/hono/util/AddressHelperTest.java\n+++ b/core/src/test/java/org/eclipse/hono/util/AddressHelperTest.java\n\n@@ -21,13 +21,14 @@ import org.junit.jupiter.api.Test;\n  */\n public class AddressHelperTest {\n \n+    final String address = \"telemetry/DEFAULT\";\n+\n     /**\n      * Tests address rewrite rules.\n      */\n     @Test\n     public void testAddressRewrite() {\n \n-        final String address = \"telemetry/DEFAULT\";\n         final String vhostRewrite = \"(${ENDPOINT})/(${ID}) test-vhost/$1/$2\";\n         assertEquals(\"test-vhost/\" + address, AddressHelper.rewrite(TelemetryConstants.TELEMETRY_ENDPOINT, address, vhostRewrite));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NDEwMw==", "url": "https://github.com/eclipse/hono/pull/2071#discussion_r450674103", "bodyText": "final ?", "author": "sophokles73", "createdAt": "2020-07-07T07:49:35Z", "path": "core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java", "diffHunk": "@@ -518,4 +519,24 @@ public final void setIdleTimeout(final int idleTimeoutMillis) {\n             this.idleTimeoutMillis = idleTimeoutMillis;\n         }\n     }\n+\n+    /**\n+     * Gets the rewrite rule for downstream addresses.\n+     * See {@link org.eclipse.hono.util.AddressHelper#rewrite(String, String, String)} for more information about syntax and behavior of this property.\n+     *\n+     * @return The rewrite rule to be applied to the address.\n+     */\n+    public final String getAddressRewriteRule() {\n+        return addressRewriteRule;\n+    }\n+\n+    /**\n+     * Sets the rewrite rule for downstream addresses.\n+     * See {@link org.eclipse.hono.util.AddressHelper#rewrite(String, String, String)} for more information about syntax and behavior of this property.\n+     *\n+     * @param addressRewriteRule The rewrite rule to be applied to the address.\n+     */\n+    public void setAddressRewriteRule(final String addressRewriteRule) {", "originalCommit": "140a4c8a38bf848be5efecb9e047e70e4921fcfc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e59bb93c993b426afdd8cd44df43395134afe314", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java b/core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java\nindex f01b889ad..e4bf2edd0 100644\n--- a/core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java\n+++ b/core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java\n\n@@ -536,7 +536,7 @@ public class ClientConfigProperties extends AuthenticatingClientConfigProperties\n      *\n      * @param addressRewriteRule The rewrite rule to be applied to the address.\n      */\n-    public void setAddressRewriteRule(final String addressRewriteRule) {\n+    public final void setAddressRewriteRule(final String addressRewriteRule) {\n         this.addressRewriteRule = addressRewriteRule;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NTQ0MQ==", "url": "https://github.com/eclipse/hono/pull/2071#discussion_r450675441", "bodyText": "how about keeping the getTargetAddress method and just change its implementation to delegate to AddressHelper. This would mean much fewer changes in the other code, wouldn't it?", "author": "sophokles73", "createdAt": "2020-07-07T07:52:09Z", "path": "client/src/main/java/org/eclipse/hono/client/impl/TelemetrySenderImpl.java", "diffHunk": "@@ -59,32 +60,14 @@ protected TelemetrySenderImpl(\n         super(con, sender, tenantId, targetAddress);\n     }\n \n-    /**\n-     * Gets the AMQP <em>target</em> address to use for uploading data to Hono's telemetry endpoint.\n-     *\n-     * @param tenantId The tenant to upload data for.\n-     * @param deviceId The device to upload data for. If {@code null}, the target address can be used\n-     *                 to upload data for arbitrary devices belonging to the tenant.\n-     * @return The target address.\n-     * @throws NullPointerException if tenant is {@code null}.\n-     */\n-    public static String getTargetAddress(final String tenantId, final String deviceId) {\n-        final StringBuilder targetAddress = new StringBuilder(TelemetryConstants.TELEMETRY_ENDPOINT)\n-                .append(\"/\").append(Objects.requireNonNull(tenantId));\n-        if (deviceId != null && deviceId.length() > 0) {\n-            targetAddress.append(\"/\").append(deviceId);\n-        }\n-        return targetAddress.toString();\n-    }\n-\n     @Override\n     public String getEndpoint() {\n         return TelemetryConstants.TELEMETRY_ENDPOINT;\n     }\n \n     @Override\n     protected String getTo(final String deviceId) {\n-        return getTargetAddress(tenantId, deviceId);\n+        return AddressHelper.getTargetAddress(TelemetryConstants.TELEMETRY_ENDPOINT, tenantId, deviceId, connection.getConfig().getAddressRewriteRule());", "originalCommit": "140a4c8a38bf848be5efecb9e047e70e4921fcfc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3NDUyNA==", "url": "https://github.com/eclipse/hono/pull/2071#discussion_r450874524", "bodyText": "@sophokles73 It would still require changes everywhere, as we need to add/pass additional argument to this method. I was having it like that in the beginning but noted that the implementation was not consistent among classes, so I moved the logic to the helper method call. At that point I didn't see any value in these intermediary methods, so I removed them.\nI can reintroduce them back if you want, I don't have a strong opinion on that.", "author": "dejanb", "createdAt": "2020-07-07T13:43:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NTQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg5MjY1NA==", "url": "https://github.com/eclipse/hono/pull/2071#discussion_r450892654", "bodyText": "No worries, I see your point ...", "author": "sophokles73", "createdAt": "2020-07-07T14:08:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NTQ0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "dd52438e0c0da7d9d4d5d660798aa9f5b9f3435d", "chunk": "diff --git a/client/src/main/java/org/eclipse/hono/client/impl/TelemetrySenderImpl.java b/client/src/main/java/org/eclipse/hono/client/impl/TelemetrySenderImpl.java\nindex 024270bb2..ba140d9a2 100644\n--- a/client/src/main/java/org/eclipse/hono/client/impl/TelemetrySenderImpl.java\n+++ b/client/src/main/java/org/eclipse/hono/client/impl/TelemetrySenderImpl.java\n\n@@ -67,7 +67,7 @@ public class TelemetrySenderImpl extends AbstractDownstreamSender {\n \n     @Override\n     protected String getTo(final String deviceId) {\n-        return AddressHelper.getTargetAddress(TelemetryConstants.TELEMETRY_ENDPOINT, tenantId, deviceId, connection.getConfig().getAddressRewriteRule());\n+        return AddressHelper.getTargetAddress(TelemetryConstants.TELEMETRY_ENDPOINT, tenantId, deviceId, null);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NjEzOQ==", "url": "https://github.com/eclipse/hono/pull/2071#discussion_r450676139", "bodyText": "the AmqpAdapterClientFactory is supposed to be used by devices and gateways to connect to the AMQP adapter. IMHO we do not need to rewrite addresses in that case, do we?", "author": "sophokles73", "createdAt": "2020-07-07T07:53:27Z", "path": "client/src/main/java/org/eclipse/hono/client/impl/AmqpAdapterClientFactoryImpl.java", "diffHunk": "@@ -80,7 +83,7 @@ protected void onDisconnect() {\n     @Override\n     public Future<TelemetrySender> getOrCreateTelemetrySender() {\n \n-        final String cacheKey = TelemetrySenderImpl.getTargetAddress(tenantId, null);\n+        final String cacheKey = AddressHelper.getTargetAddress(TelemetryConstants.TELEMETRY_ENDPOINT, tenantId, null, connection.getConfig().getAddressRewriteRule());", "originalCommit": "140a4c8a38bf848be5efecb9e047e70e4921fcfc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e59bb93c993b426afdd8cd44df43395134afe314", "chunk": "diff --git a/client/src/main/java/org/eclipse/hono/client/impl/AmqpAdapterClientFactoryImpl.java b/client/src/main/java/org/eclipse/hono/client/impl/AmqpAdapterClientFactoryImpl.java\nindex 631e7f4ce..8aabdc1bf 100644\n--- a/client/src/main/java/org/eclipse/hono/client/impl/AmqpAdapterClientFactoryImpl.java\n+++ b/client/src/main/java/org/eclipse/hono/client/impl/AmqpAdapterClientFactoryImpl.java\n\n@@ -83,7 +83,7 @@ public final class AmqpAdapterClientFactoryImpl extends AbstractHonoClientFactor\n     @Override\n     public Future<TelemetrySender> getOrCreateTelemetrySender() {\n \n-        final String cacheKey = AddressHelper.getTargetAddress(TelemetryConstants.TELEMETRY_ENDPOINT, tenantId, null, connection.getConfig().getAddressRewriteRule());\n+        final String cacheKey = AddressHelper.getTargetAddress(TelemetryConstants.TELEMETRY_ENDPOINT, tenantId, null, null);\n         return connection.isConnected(getDefaultConnectionCheckTimeout())\n                 .compose(v -> connection.executeOnContext(result -> {\n                     telemetrySenderClientFactory.getOrCreateClient(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc0OTc3OA==", "url": "https://github.com/eclipse/hono/pull/2071#discussion_r450749778", "bodyText": "I think it makes sense in this case to pre-compile the regular expression using Pattern.", "author": "ctron", "createdAt": "2020-07-07T09:59:22Z", "path": "core/src/main/java/org/eclipse/hono/util/AddressHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.util;\n+\n+import java.util.Objects;\n+import java.util.regex.PatternSyntaxException;\n+\n+/**\n+ * Utility class for handling AMQP addresses.\n+ */\n+public class AddressHelper {\n+\n+    static final String ID_REGEX = \"[a-zA-Z0-9-_\\\\.]+\";", "originalCommit": "140a4c8a38bf848be5efecb9e047e70e4921fcfc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3NzQ4MQ==", "url": "https://github.com/eclipse/hono/pull/2071#discussion_r450877481", "bodyText": "@ctron It's not a pattern at this point, but a substitute that can be used when writing rules, so you can write telemetry/${ID} instead of telemetry/[a-zA-Z0-9-_\\\\.]+. It's also moved now to the other place per Kai's suggestion.", "author": "dejanb", "createdAt": "2020-07-07T13:47:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc0OTc3OA=="}], "type": "inlineReview", "revised_code": {"commit": "e59bb93c993b426afdd8cd44df43395134afe314", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/util/AddressHelper.java b/core/src/main/java/org/eclipse/hono/util/AddressHelper.java\nindex 67c69e341..7fb358fbc 100644\n--- a/core/src/main/java/org/eclipse/hono/util/AddressHelper.java\n+++ b/core/src/main/java/org/eclipse/hono/util/AddressHelper.java\n\n@@ -20,8 +20,6 @@ import java.util.regex.PatternSyntaxException;\n  */\n public class AddressHelper {\n \n-    static final String ID_REGEX = \"[a-zA-Z0-9-_\\\\.]+\";\n-\n     private AddressHelper() {\n     }\n \n"}}, {"oid": "e59bb93c993b426afdd8cd44df43395134afe314", "url": "https://github.com/eclipse/hono/commit/e59bb93c993b426afdd8cd44df43395134afe314", "message": "[#2070] Implement downstream address rewrite feature", "committedDate": "2020-07-07T11:34:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3NTQ4OA==", "url": "https://github.com/eclipse/hono/pull/2071#discussion_r450875488", "bodyText": "@sophokles73 it is indeed the same regex, just without end delimiters. I moved it here and based other ones on it. Let me know if you have any other ideas on how improve on this.", "author": "dejanb", "createdAt": "2020-07-07T13:45:12Z", "path": "core/src/main/java/org/eclipse/hono/util/RegistryManagementConstants.java", "diffHunk": "@@ -285,15 +285,20 @@\n      */\n     public static final String FIELD_TRACING_SAMPLING_MODE_PER_AUTH_ID = \"sampling-mode-per-auth-id\";\n \n+    /**\n+     * The default regular expression validating IDs contain only legal characters.\n+     */\n+    public static final String DEFAULT_ID_REGEX = \"[a-zA-Z0-9-_\\\\.]+\";", "originalCommit": "e59bb93c993b426afdd8cd44df43395134afe314", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3ODQ5Ng==", "url": "https://github.com/eclipse/hono/pull/2071#discussion_r450878496", "bodyText": "what if the tenant ID and/or device ID regex are being configured explicitly, i.e. do not have their default value?", "author": "sophokles73", "createdAt": "2020-07-07T13:49:19Z", "path": "core/src/main/java/org/eclipse/hono/util/AddressHelper.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.util;\n+\n+import java.util.Objects;\n+import java.util.regex.PatternSyntaxException;\n+\n+/**\n+ * Utility class for handling AMQP addresses.\n+ */\n+public class AddressHelper {\n+\n+    private AddressHelper() {\n+    }\n+\n+    /**\n+     * Gets the AMQP <em>target</em> address to use for creating with specific Hono endpoint.\n+     *\n+     * @param endpoint The endpoint for the address (e.g. telemetry).\n+     * @param tenantId The tenant of the address.\n+     * @param resourceId The device to upload data for. If {@code null}, the target address can be used\n+     *                 to upload data for arbitrary devices belonging to the tenant.\n+     * @param addressRewriteRule The rewrite rule to be applied to the address.\n+     *                           See {@link #rewrite(String, String, String)} for more information about syntax and behavior of this property.\n+     * @return The target address.\n+     * @throws NullPointerException if endpoint or tenant is {@code null}.\n+     */\n+    public static String getTargetAddress(final String endpoint, final String tenantId, final String resourceId, final String addressRewriteRule) {\n+        final StringBuilder addressBuilder = new StringBuilder(Objects.requireNonNull(endpoint))\n+                .append(\"/\").append(Objects.requireNonNull(tenantId));\n+        if (!Strings.isNullOrEmpty(resourceId)) {\n+            addressBuilder.append(\"/\").append(resourceId);\n+        }\n+\n+        return AddressHelper.rewrite(endpoint, addressBuilder.toString(), addressRewriteRule);\n+    }\n+\n+    /**\n+     * Rewrites address for a certain endpoint according to the provided rule.\n+     *\n+     * @param endpoint The messaging endpoint.\n+     * @param address The address to be rewritten.\n+     * @param rewriteRule The rewrite rule. The rule is in the <em>$PATTERN $SUBSTITUTION</em> format.\n+     *                    The <em>$PATTERN</em> should match the original address. It uses the regular Java pattern syntax. There\n+     *                    are two helper constants introduced:\n+     *                    <ul>\n+     *                      <li><em>ENDPOINT</em> - that will match the current endpoint being used</li>\n+     *                      <li><em>ID</em> - a pattern for id representations in the system</li>\n+     *                    </ul>\n+     *\n+     *                    Example:\n+     *                    <em>(${ENDPOINT})/(${ID}) test-vhost/$1/$2</em>\n+     *                    will rewrite\n+     *                    <em>telemetry/DEFAULT_TENANT</em> to <em>test-vhost/telemetry/DEFAULT-TENANT</em>\n+     *                    If the rule is {@code null}, in the wrong format or the pattern doesn't match the address,\n+     *                    the original address will be returned.\n+     * @return The address to be used.\n+     */\n+    public static String rewrite(final String endpoint, final String address, final String rewriteRule) {\n+        if (Strings.isNullOrEmpty(rewriteRule)) {\n+            return address;\n+        }\n+\n+        final String[] elements = rewriteRule.split(\" \", 2);\n+        if (elements.length != 2) {\n+            return address;\n+        }\n+        return rewrite(endpoint, address, elements[0], elements[1]);\n+    }\n+\n+    static String rewrite(final String endpoint, final String address, final String regex, final String replacement) {\n+        try {\n+            return address.replaceAll(regexSubstitues(endpoint, regex), replacement);\n+        } catch (PatternSyntaxException pe) {\n+            return address;\n+        }\n+    }\n+\n+    static String regexSubstitues(final String endpoint, final String regex) {\n+        return regex\n+                .replaceAll(\"\\\\$\\\\{ENDPOINT\\\\}\", endpoint)\n+                .replaceAll(\"\\\\$\\\\{ID\\\\}\", RegistryManagementConstants.DEFAULT_ID_REGEX);", "originalCommit": "e59bb93c993b426afdd8cd44df43395134afe314", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0MzYzOQ==", "url": "https://github.com/eclipse/hono/pull/2071#discussion_r450943639", "bodyText": "It won't work. But it's just a simple helper, so it's not something that you must use to make it work. I just thought some these would make configuration look simpler for common use-cases.\nWe can do more in this area and do substitutions based on configuration, environment variables, etc. But I didn't want to go there until we have the basics sorted.\nIf this is confusing we can remove substitutions for the time being and rethink them later on.", "author": "dejanb", "createdAt": "2020-07-07T15:15:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3ODQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1MDcyMg==", "url": "https://github.com/eclipse/hono/pull/2071#discussion_r450950722", "bodyText": "I guess it will be very hard to trace and understand the source of the problem in this case. So FMPOV we should either omit the substitution logic for the time being or integrate it properly with the configurable tenant and device ID patterns ...", "author": "sophokles73", "createdAt": "2020-07-07T15:25:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3ODQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk2MzQ4OQ==", "url": "https://github.com/eclipse/hono/pull/2071#discussion_r450963489", "bodyText": "OK, I'll remove it completely for now.", "author": "dejanb", "createdAt": "2020-07-07T15:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3ODQ5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1ee7722da691fe57c86a39e34f22b5aa5d75c338", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/util/AddressHelper.java b/core/src/main/java/org/eclipse/hono/util/AddressHelper.java\nindex 7fb358fbc..b09d85b10 100644\n--- a/core/src/main/java/org/eclipse/hono/util/AddressHelper.java\n+++ b/core/src/main/java/org/eclipse/hono/util/AddressHelper.java\n\n@@ -31,7 +31,7 @@ public class AddressHelper {\n      * @param resourceId The device to upload data for. If {@code null}, the target address can be used\n      *                 to upload data for arbitrary devices belonging to the tenant.\n      * @param addressRewriteRule The rewrite rule to be applied to the address.\n-     *                           See {@link #rewrite(String, String, String)} for more information about syntax and behavior of this property.\n+     *                           See {@link #rewrite(String, String)} for more information about syntax and behavior of this property.\n      * @return The target address.\n      * @throws NullPointerException if endpoint or tenant is {@code null}.\n      */\n"}}, {"oid": "1ee7722da691fe57c86a39e34f22b5aa5d75c338", "url": "https://github.com/eclipse/hono/commit/1ee7722da691fe57c86a39e34f22b5aa5d75c338", "message": "[#2070] Implement downstream address rewrite feature", "committedDate": "2020-07-08T09:29:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2OTQ5Mg==", "url": "https://github.com/eclipse/hono/pull/2071#discussion_r451469492", "bodyText": "I still think we should use pre-compiled patterns for this.", "author": "ctron", "createdAt": "2020-07-08T11:24:24Z", "path": "core/src/main/java/org/eclipse/hono/util/AddressHelper.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.util;\n+\n+import java.util.Objects;\n+import java.util.regex.PatternSyntaxException;\n+\n+/**\n+ * Utility class for handling AMQP addresses.\n+ */\n+public class AddressHelper {\n+\n+    private AddressHelper() {\n+    }\n+\n+    /**\n+     * Gets the AMQP <em>target</em> address to use for creating with specific Hono endpoint.\n+     *\n+     * @param endpoint The endpoint for the address (e.g. telemetry).\n+     * @param tenantId The tenant of the address.\n+     * @param resourceId The device to upload data for. If {@code null}, the target address can be used\n+     *                 to upload data for arbitrary devices belonging to the tenant.\n+     * @param addressRewriteRule The rewrite rule to be applied to the address.\n+     *                           See {@link #rewrite(String, String)} for more information about syntax and behavior of this property.\n+     * @return The target address.\n+     * @throws NullPointerException if endpoint or tenant is {@code null}.\n+     */\n+    public static String getTargetAddress(final String endpoint, final String tenantId, final String resourceId, final String addressRewriteRule) {\n+        final StringBuilder addressBuilder = new StringBuilder(Objects.requireNonNull(endpoint))\n+                .append(\"/\").append(Objects.requireNonNull(tenantId));\n+        if (!Strings.isNullOrEmpty(resourceId)) {\n+            addressBuilder.append(\"/\").append(resourceId);\n+        }\n+\n+        return AddressHelper.rewrite(addressBuilder.toString(), addressRewriteRule);\n+    }\n+\n+    /**\n+     * Rewrites address for a certain endpoint according to the provided rule.\n+     *\n+     * @param address The address to be rewritten.\n+     * @param rewriteRule The rewrite rule. The rule is in the <em>$PATTERN $SUBSTITUTION</em> format.\n+     *                    Pattern and substitution use the regular Java pattern syntax.\n+     *                    The pattern should match the original address.\n+     *\n+     *                    Example:\n+     *                    <em>([a-z_]+)/([\\\\w-]+) test-vhost/$1/$2</em>\n+     *                    will rewrite\n+     *                    <em>telemetry/DEFAULT_TENANT</em> to <em>test-vhost/telemetry/DEFAULT-TENANT</em>\n+     *\n+     *                    If the rule is {@code null}, empty, in the wrong format or the pattern doesn't match the address,\n+     *                    the original address will be returned.\n+     * @return The address to be used.\n+     */\n+    public static String rewrite(final String address, final String rewriteRule) {\n+        if (Strings.isNullOrEmpty(rewriteRule)) {\n+            return address;\n+        }\n+\n+        final String[] elements = rewriteRule.split(\" \", 2);\n+        if (elements.length != 2) {\n+            return address;\n+        }\n+\n+        try {\n+            return address.replaceAll(elements[0], elements[1]);", "originalCommit": "1ee7722da691fe57c86a39e34f22b5aa5d75c338", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ4NTk2MQ==", "url": "https://github.com/eclipse/hono/pull/2071#discussion_r451485961", "bodyText": "It makes sense if we initialize AddressHelper and reuse that Pattern instead of using it statically. I'll take a look at that.", "author": "dejanb", "createdAt": "2020-07-08T11:57:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2OTQ5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "dd52438e0c0da7d9d4d5d660798aa9f5b9f3435d", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/util/AddressHelper.java b/core/src/main/java/org/eclipse/hono/util/AddressHelper.java\nindex b09d85b10..ee932cecb 100644\n--- a/core/src/main/java/org/eclipse/hono/util/AddressHelper.java\n+++ b/core/src/main/java/org/eclipse/hono/util/AddressHelper.java\n\n@@ -13,7 +13,8 @@\n package org.eclipse.hono.util;\n \n import java.util.Objects;\n-import java.util.regex.PatternSyntaxException;\n+\n+import org.eclipse.hono.config.ClientConfigProperties;\n \n /**\n  * Utility class for handling AMQP addresses.\n"}}, {"oid": "653d40eb3065e113d0372ecafd373391b9c69442", "url": "https://github.com/eclipse/hono/commit/653d40eb3065e113d0372ecafd373391b9c69442", "message": "[#2070] Implement downstream address rewrite feature", "committedDate": "2020-07-08T12:01:49Z", "type": "forcePushed"}, {"oid": "dd52438e0c0da7d9d4d5d660798aa9f5b9f3435d", "url": "https://github.com/eclipse/hono/commit/dd52438e0c0da7d9d4d5d660798aa9f5b9f3435d", "message": "[#2070] Implement downstream address rewrite feature", "committedDate": "2020-07-09T11:26:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5MzU3Ng==", "url": "https://github.com/eclipse/hono/pull/2071#discussion_r452293576", "bodyText": "final?", "author": "sophokles73", "createdAt": "2020-07-09T15:14:08Z", "path": "core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java", "diffHunk": "@@ -518,4 +525,54 @@ public final void setIdleTimeout(final int idleTimeoutMillis) {\n             this.idleTimeoutMillis = idleTimeoutMillis;\n         }\n     }\n+\n+    /**\n+     * Gets the rewrite rule for downstream addresses.\n+     * See {@link org.eclipse.hono.util.AddressHelper#rewrite(String, String, ClientConfigProperties)} for more information about syntax and behavior of this property.\n+     *\n+     * @return The rewrite rule to be applied to the address.\n+     */\n+    public final String getAddressRewriteRule() {\n+        return addressRewriteRule;\n+    }\n+\n+    /**\n+     * Sets the rewrite rule for downstream addresses.\n+     * This method parses the rule and tries to precompile the pattern to be used.\n+     * The pattern and replacement can be obtained by {@link #getAddressRewritePattern()} and {@link #getAddressRewriteReplacement()} methods.\n+     *\n+     * For more information about syntax and behavior of this property see {@link org.eclipse.hono.util.AddressHelper#rewrite(String, ClientConfigProperties)} method.\n+     *\n+     * @param addressRewriteRule The rewrite rule to be applied to the address.\n+     */\n+    public final void setAddressRewriteRule(final String addressRewriteRule) {\n+        this.addressRewriteRule = addressRewriteRule;\n+        if (!Strings.isNullOrEmpty(addressRewriteRule)) {\n+            final String[] elements = addressRewriteRule.split(\" \", 2);\n+            if (elements.length == 2) {\n+                try {\n+                    addressRewritePattern = Pattern.compile(elements[0]);\n+                    addressRewriteReplacement = elements[1];\n+                } catch (PatternSyntaxException pe) { }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Gets precompiled address rewrite pattern.\n+     *\n+     * @return The precompiled address rewrite pattern.\n+     */\n+    public Pattern getAddressRewritePattern() {", "originalCommit": "dd52438e0c0da7d9d4d5d660798aa9f5b9f3435d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f8ea9dc5d78c6c92baee57bbcc64690171904257", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java b/core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java\nindex 6f8db5eac..232562968 100644\n--- a/core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java\n+++ b/core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java\n\n@@ -563,7 +563,7 @@ public class ClientConfigProperties extends AuthenticatingClientConfigProperties\n      *\n      * @return The precompiled address rewrite pattern.\n      */\n-    public Pattern getAddressRewritePattern() {\n+    public final Pattern getAddressRewritePattern() {\n         return addressRewritePattern;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5MzY0Nw==", "url": "https://github.com/eclipse/hono/pull/2071#discussion_r452293647", "bodyText": "final?", "author": "sophokles73", "createdAt": "2020-07-09T15:14:14Z", "path": "core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java", "diffHunk": "@@ -518,4 +525,54 @@ public final void setIdleTimeout(final int idleTimeoutMillis) {\n             this.idleTimeoutMillis = idleTimeoutMillis;\n         }\n     }\n+\n+    /**\n+     * Gets the rewrite rule for downstream addresses.\n+     * See {@link org.eclipse.hono.util.AddressHelper#rewrite(String, String, ClientConfigProperties)} for more information about syntax and behavior of this property.\n+     *\n+     * @return The rewrite rule to be applied to the address.\n+     */\n+    public final String getAddressRewriteRule() {\n+        return addressRewriteRule;\n+    }\n+\n+    /**\n+     * Sets the rewrite rule for downstream addresses.\n+     * This method parses the rule and tries to precompile the pattern to be used.\n+     * The pattern and replacement can be obtained by {@link #getAddressRewritePattern()} and {@link #getAddressRewriteReplacement()} methods.\n+     *\n+     * For more information about syntax and behavior of this property see {@link org.eclipse.hono.util.AddressHelper#rewrite(String, ClientConfigProperties)} method.\n+     *\n+     * @param addressRewriteRule The rewrite rule to be applied to the address.\n+     */\n+    public final void setAddressRewriteRule(final String addressRewriteRule) {\n+        this.addressRewriteRule = addressRewriteRule;\n+        if (!Strings.isNullOrEmpty(addressRewriteRule)) {\n+            final String[] elements = addressRewriteRule.split(\" \", 2);\n+            if (elements.length == 2) {\n+                try {\n+                    addressRewritePattern = Pattern.compile(elements[0]);\n+                    addressRewriteReplacement = elements[1];\n+                } catch (PatternSyntaxException pe) { }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Gets precompiled address rewrite pattern.\n+     *\n+     * @return The precompiled address rewrite pattern.\n+     */\n+    public Pattern getAddressRewritePattern() {\n+        return addressRewritePattern;\n+    }\n+\n+    /**\n+     * Gets address rewrite replacement.\n+     *\n+     * @return The address rewrite replacement.\n+     */\n+    public String getAddressRewriteReplacement() {", "originalCommit": "dd52438e0c0da7d9d4d5d660798aa9f5b9f3435d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f8ea9dc5d78c6c92baee57bbcc64690171904257", "chunk": "diff --git a/core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java b/core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java\nindex 6f8db5eac..232562968 100644\n--- a/core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java\n+++ b/core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java\n\n@@ -563,7 +563,7 @@ public class ClientConfigProperties extends AuthenticatingClientConfigProperties\n      *\n      * @return The precompiled address rewrite pattern.\n      */\n-    public Pattern getAddressRewritePattern() {\n+    public final Pattern getAddressRewritePattern() {\n         return addressRewritePattern;\n     }\n \n"}}, {"oid": "f8ea9dc5d78c6c92baee57bbcc64690171904257", "url": "https://github.com/eclipse/hono/commit/f8ea9dc5d78c6c92baee57bbcc64690171904257", "message": "[#2070] Implement downstream address rewrite feature", "committedDate": "2020-07-09T15:32:50Z", "type": "forcePushed"}, {"oid": "f0354a963d2a0f505d2bd60313156eef502597c7", "url": "https://github.com/eclipse/hono/commit/f0354a963d2a0f505d2bd60313156eef502597c7", "message": "[#2070] Implement downstream address rewrite feature", "committedDate": "2020-07-10T08:23:11Z", "type": "commit"}, {"oid": "f0354a963d2a0f505d2bd60313156eef502597c7", "url": "https://github.com/eclipse/hono/commit/f0354a963d2a0f505d2bd60313156eef502597c7", "message": "[#2070] Implement downstream address rewrite feature", "committedDate": "2020-07-10T08:23:11Z", "type": "forcePushed"}]}