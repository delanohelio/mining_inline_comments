{"pr_number": 1803, "pr_title": "[#1802] Refactor device management service to return future", "pr_createdAt": "2020-03-03T13:28:33Z", "pr_url": "https://github.com/eclipse/hono/pull/1803", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExMTE2MA==", "url": "https://github.com/eclipse/hono/pull/1803#discussion_r387111160", "bodyText": "It looks to me as if the\n.setHandler(ctx.succeeding(s -> Future.succeededFuture(s)))\npart can be removed.\nThe future returned by createDevice gets a handler here and is assigned to phase1Future.\nSome lines below the phase1Future gets a handler again, overwriting the previous one. Therefore the above line looks superfluous.\nSame applies to 7 other occurrences of a similar block in this class.", "author": "calohmn", "createdAt": "2020-03-03T15:48:15Z", "path": "service-base/src/test/java/org/eclipse/hono/service/credentials/AbstractCredentialsServiceTest.java", "diffHunk": "@@ -702,16 +700,15 @@ public void testDisableCredentials(final VertxTestContext ctx) {\n \n         // create device\n \n-        final Promise<?> phase1 = Promise.promise();\n-        getDeviceManagementService().createDevice(\n-                tenantId, Optional.of(deviceId), new Device(), NoopSpan.INSTANCE,\n-                ctx.succeeding(s -> phase1.complete()));\n+        final Future<OperationResult<Id>> phase1Future = getDeviceManagementService().createDevice(\n+                tenantId, Optional.of(deviceId), new Device(), NoopSpan.INSTANCE)\n+                .setHandler(ctx.succeeding(s -> Future.succeededFuture(s)));", "originalCommit": "75aaa49f8f58b85e5df8617aed7531e104507d70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4NzQxNQ==", "url": "https://github.com/eclipse/hono/pull/1803#discussion_r387187415", "bodyText": "@calohmn Done. Also I have replaced phase1Future with inline reference.", "author": "kaniyan", "createdAt": "2020-03-03T17:45:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExMTE2MA=="}], "type": "inlineReview", "revised_code": {"commit": "7a182aef81bba9ab9e047eb1db3b973cd70bca13", "chunk": "diff --git a/service-base/src/test/java/org/eclipse/hono/service/credentials/AbstractCredentialsServiceTest.java b/service-base/src/test/java/org/eclipse/hono/service/credentials/AbstractCredentialsServiceTest.java\nindex 3c7b3c1b0..569d7bef8 100644\n--- a/service-base/src/test/java/org/eclipse/hono/service/credentials/AbstractCredentialsServiceTest.java\n+++ b/service-base/src/test/java/org/eclipse/hono/service/credentials/AbstractCredentialsServiceTest.java\n\n@@ -698,21 +692,17 @@ public abstract class AbstractCredentialsServiceTest {\n \n         final List<CommonCredential> credentials = Arrays.asList(credential, disabledCredential);\n \n-        // create device\n-\n-        final Future<OperationResult<Id>> phase1Future = getDeviceManagementService().createDevice(\n-                tenantId, Optional.of(deviceId), new Device(), NoopSpan.INSTANCE)\n-                .setHandler(ctx.succeeding(s -> Future.succeededFuture(s)));\n-\n-        // set credentials\n+        // create device & set credentials\n \n         final Promise<?> phase2 = Promise.promise();\n \n-        phase1Future.setHandler(ctx.succeeding(n -> {\n-            getCredentialsManagementService()\n-                    .updateCredentials(tenantId, deviceId, credentials, Optional.empty(), NoopSpan.INSTANCE,\n-                            ctx.succeeding(s -> phase2.complete()));\n-        }));\n+        getDeviceManagementService()\n+                .createDevice(tenantId, Optional.of(deviceId), new Device(), NoopSpan.INSTANCE)\n+                .setHandler(ctx.succeeding(n -> {\n+                    getCredentialsManagementService()\n+                            .updateCredentials(tenantId, deviceId, credentials, Optional.empty(), NoopSpan.INSTANCE,\n+                                    ctx.succeeding(s -> phase2.complete()));\n+                }));\n \n         // validate credentials - enabled\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExMzEzMA==", "url": "https://github.com/eclipse/hono/pull/1803#discussion_r387113130", "bodyText": "Using when(underTest.createDevice(...)).thenReturn(Future.succeededFuture(...)); looks simpler here.\nSame in 2 other places below.", "author": "calohmn", "createdAt": "2020-03-03T15:50:54Z", "path": "service-base/src/test/java/org/eclipse/hono/service/management/device/AutoProvisioningEnabledDeviceBackendTest.java", "diffHunk": "@@ -80,11 +80,9 @@ public void testProvisionDeviceSucceeds(final VertxTestContext ctx) {\n         final AutoProvisioningEnabledDeviceBackend underTest = mock(AutoProvisioningEnabledDeviceBackend.class);\n         when(underTest.provisionDevice(anyString(), any(), any())).thenCallRealMethod();\n \n-        doAnswer(invocation -> {\n-            final Promise<OperationResult<Id>> promise = invocation.getArgument(4);\n-            promise.complete(OperationResult.ok(201, Id.of(DEVICE_ID), Optional.empty(), Optional.empty()));\n-            return null;\n-        }).when(underTest).createDevice(any(), any(), any(), any(), any(Handler.class));\n+        doAnswer(invocation -> Future\n+                .succeededFuture(OperationResult.ok(201, Id.of(DEVICE_ID), Optional.empty(), Optional.empty()))\n+        ).when(underTest).createDevice(any(), any(), any(), any());", "originalCommit": "75aaa49f8f58b85e5df8617aed7531e104507d70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4OTAwMQ==", "url": "https://github.com/eclipse/hono/pull/1803#discussion_r387189001", "bodyText": "I though of the same and I tried to keep it as close to the original code, so its easier to review. I changed it now.", "author": "kaniyan", "createdAt": "2020-03-03T17:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExMzEzMA=="}], "type": "inlineReview", "revised_code": {"commit": "7a182aef81bba9ab9e047eb1db3b973cd70bca13", "chunk": "diff --git a/service-base/src/test/java/org/eclipse/hono/service/management/device/AutoProvisioningEnabledDeviceBackendTest.java b/service-base/src/test/java/org/eclipse/hono/service/management/device/AutoProvisioningEnabledDeviceBackendTest.java\nindex a1ca23b13..e22bae0e3 100644\n--- a/service-base/src/test/java/org/eclipse/hono/service/management/device/AutoProvisioningEnabledDeviceBackendTest.java\n+++ b/service-base/src/test/java/org/eclipse/hono/service/management/device/AutoProvisioningEnabledDeviceBackendTest.java\n\n@@ -80,9 +80,9 @@ public class AutoProvisioningEnabledDeviceBackendTest {\n         final AutoProvisioningEnabledDeviceBackend underTest = mock(AutoProvisioningEnabledDeviceBackend.class);\n         when(underTest.provisionDevice(anyString(), any(), any())).thenCallRealMethod();\n \n-        doAnswer(invocation -> Future\n-                .succeededFuture(OperationResult.ok(201, Id.of(DEVICE_ID), Optional.empty(), Optional.empty()))\n-        ).when(underTest).createDevice(any(), any(), any(), any());\n+        when(underTest.createDevice(any(), any(), any(), any()))\n+                .thenReturn(Future.succeededFuture(\n+                        OperationResult.ok(201, Id.of(DEVICE_ID), Optional.empty(), Optional.empty())));\n \n         doAnswer(invocation -> {\n             final Promise<OperationResult<Void>> promise = invocation.getArgument(5);\n"}}, {"oid": "7a182aef81bba9ab9e047eb1db3b973cd70bca13", "url": "https://github.com/eclipse/hono/commit/7a182aef81bba9ab9e047eb1db3b973cd70bca13", "message": "[#1802] Refactor device management service to return future instead of passing on handler.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-03-03T17:45:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyMzIyNg==", "url": "https://github.com/eclipse/hono/pull/1803#discussion_r388223226", "bodyText": "I guess this was added by mistake.", "author": "calohmn", "createdAt": "2020-03-05T11:03:19Z", "path": "service-base/src/main/java/org/eclipse/hono/service/management/device/DeviceManagementService.java", "diffHunk": "@@ -113,7 +110,7 @@ void updateDevice(String tenantId, String deviceId, Device device, Optional<Stri\n      * @throws NullPointerException if any of the parameters is {@code null}.\n      * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/#/devices/deleteRegistration\">\n      *      Device Registry Management API - Delete Device Registration</a>\n+     * @return", "originalCommit": "7a182aef81bba9ab9e047eb1db3b973cd70bca13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNjk1Mw==", "url": "https://github.com/eclipse/hono/pull/1803#discussion_r388236953", "bodyText": "I have removed it now.", "author": "kaniyan", "createdAt": "2020-03-05T11:31:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyMzIyNg=="}], "type": "inlineReview", "revised_code": {"commit": "9c156814b319cf6f2f75fb5e4dc4aa28f506905a", "chunk": "diff --git a/service-base/src/main/java/org/eclipse/hono/service/management/device/DeviceManagementService.java b/service-base/src/main/java/org/eclipse/hono/service/management/device/DeviceManagementService.java\nindex 9eef0f603..6722d091b 100644\n--- a/service-base/src/main/java/org/eclipse/hono/service/management/device/DeviceManagementService.java\n+++ b/service-base/src/main/java/org/eclipse/hono/service/management/device/DeviceManagementService.java\n\n@@ -110,7 +110,6 @@ public interface DeviceManagementService {\n      * @throws NullPointerException if any of the parameters is {@code null}.\n      * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/#/devices/deleteRegistration\">\n      *      Device Registry Management API - Delete Device Registration</a>\n-     * @return\n      */\n     Future<Result<Void>> deleteDevice(String tenantId, String deviceId, Optional<String> resourceVersion, Span span);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyNTMyMQ==", "url": "https://github.com/eclipse/hono/pull/1803#discussion_r388225321", "bodyText": "Indentation in this method seems non-standard.\nSomething which was there in the code before already: Since resourceVersion can be null, Optional.ofNullable(resourceVersion) should be used, I guess.", "author": "calohmn", "createdAt": "2020-03-05T11:07:27Z", "path": "service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java", "diffHunk": "@@ -655,27 +592,23 @@ public void testUpdateSucceedWithMissingResourceVersion(final VertxTestContext c\n     @Test\n     public void testUpdateSucceedWithCorrectResourceVersion(final VertxTestContext ctx) {\n \n-        final Promise<OperationResult<Id>> result = Promise.promise();\n         final Checkpoint register = ctx.checkpoint(2);\n         final JsonObject version = new JsonObject();\n \n-        getDeviceManagementService().createDevice(TENANT, Optional.of(DEVICE), new Device(), NoopSpan.INSTANCE, result);\n-        result.future()\n-        .map(response -> {\n-            assertEquals(HttpURLConnection.HTTP_CREATED, response.getStatus());\n-            register.flag();\n-            return response;\n-        }).compose(rr -> {\n-            final Promise<OperationResult<Id>> update = Promise.promise();\n+        getDeviceManagementService().createDevice(TENANT, Optional.of(DEVICE), new Device(), NoopSpan.INSTANCE)\n+                .map(response -> {\n+                    assertEquals(HttpURLConnection.HTTP_CREATED, response.getStatus());\n+                    register.flag();\n+                    return response;\n+                }).compose(rr -> {\n             final String resourceVersion = rr.getResourceVersion().orElse(null);\n             version.put(\"1\", resourceVersion);\n \n-            getDeviceManagementService().updateDevice(\n-                    TENANT, DEVICE,\n-                    new JsonObject().put(\"ext\", new JsonObject().put(\"customKey\", \"customValue\")).mapTo(Device.class),\n-                    Optional.of(resourceVersion), NoopSpan.INSTANCE,\n-                    update);\n-            return update.future();\n+            return getDeviceManagementService()\n+                    .updateDevice(TENANT, DEVICE,\n+                            new JsonObject().put(\"ext\", new JsonObject().put(\"customKey\", \"customValue\"))\n+                                    .mapTo(Device.class),\n+                            Optional.of(resourceVersion), NoopSpan.INSTANCE);", "originalCommit": "7a182aef81bba9ab9e047eb1db3b973cd70bca13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2MjIyNQ==", "url": "https://github.com/eclipse/hono/pull/1803#discussion_r388262225", "bodyText": "Something which was there in the code before already: Since resourceVersion can be null, Optional.ofNullable(resourceVersion) should be used, I guess.\n\nThis has been already there and not added in this refactoring. Also in some places, I have seen scope for some optimisations and I don't want address this as part of this PR as this focuses mainly on refactoring the code to return future. IMHO a separate PR would be good. Also in the above test, Optional.of(resourceVersion) is used to create an instance of Optional and for me it seems ok and I didn't get it why it should be Optional.ofNullable(...)", "author": "kaniyan", "createdAt": "2020-03-05T12:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyNTMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2NzYwOA==", "url": "https://github.com/eclipse/hono/pull/1803#discussion_r388267608", "bodyText": "Also in the above test, Optional.of(resourceVersion) is used to create an instance of Optional and for me it seems ok and I didn't get it why it should be Optional.ofNullable(...)\n\nFor resourceVersion==null, Optional.of(resourceVersion) will produce a NPE. But that change could also be put in another PR.", "author": "calohmn", "createdAt": "2020-03-05T12:39:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyNTMyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9c156814b319cf6f2f75fb5e4dc4aa28f506905a", "chunk": "diff --git a/service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java b/service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java\nindex 758bf0001..2a62175ef 100644\n--- a/service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java\n+++ b/service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java\n\n@@ -601,22 +603,22 @@ public abstract class AbstractRegistrationServiceTest {\n                     register.flag();\n                     return response;\n                 }).compose(rr -> {\n-            final String resourceVersion = rr.getResourceVersion().orElse(null);\n-            version.put(\"1\", resourceVersion);\n+                    final String resourceVersion = rr.getResourceVersion().orElse(null);\n+                    version.put(\"1\", resourceVersion);\n \n-            return getDeviceManagementService()\n-                    .updateDevice(TENANT, DEVICE,\n-                            new JsonObject().put(\"ext\", new JsonObject().put(\"customKey\", \"customValue\"))\n-                                    .mapTo(Device.class),\n-                            Optional.of(resourceVersion), NoopSpan.INSTANCE);\n-        }).setHandler(\n-                ctx.succeeding(response -> ctx.verify(() -> {\n-                    final String secondResourceVersion = response.getResourceVersion().orElse(null);\n-\n-                    assertEquals(HttpURLConnection.HTTP_NO_CONTENT, response.getStatus());\n-                    assertNotEquals(secondResourceVersion, version.getString(\"1\"));\n-                    register.flag();\n-                })));\n+                    return getDeviceManagementService()\n+                            .updateDevice(TENANT, DEVICE,\n+                                    new JsonObject().put(\"ext\", new JsonObject().put(\"customKey\", \"customValue\"))\n+                                            .mapTo(Device.class),\n+                                    Optional.of(resourceVersion), NoopSpan.INSTANCE);\n+                }).setHandler(\n+                        ctx.succeeding(response -> ctx.verify(() -> {\n+                            final String secondResourceVersion = response.getResourceVersion().orElse(null);\n+\n+                            assertEquals(HttpURLConnection.HTTP_NO_CONTENT, response.getStatus());\n+                            assertNotEquals(secondResourceVersion, version.getString(\"1\"));\n+                            register.flag();\n+                        })));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyNTU5MA==", "url": "https://github.com/eclipse/hono/pull/1803#discussion_r388225590", "bodyText": "Indentation in this method seems non-standard.\nSomething which was there in the code before already: Since resourceVersion can be null, Optional.ofNullable(resourceVersion) should be used, I guess.", "author": "calohmn", "createdAt": "2020-03-05T11:08:00Z", "path": "service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java", "diffHunk": "@@ -724,22 +650,17 @@ public void testDeleteSucceedWithMissingResourceVersion(final VertxTestContext c\n     @Test\n     public void testDeleteSucceedWithCorrectResourceVersion(final VertxTestContext ctx) {\n \n-        final Promise<OperationResult<Id>> result = Promise.promise();\n         final Checkpoint register = ctx.checkpoint(2);\n \n-        getDeviceManagementService().createDevice(TENANT, Optional.of(DEVICE), new Device(), NoopSpan.INSTANCE, result);\n-        result.future()\n-        .map(response -> {\n-            assertEquals(HttpURLConnection.HTTP_CREATED, response.getStatus());\n-            register.flag();\n-            return response;\n-        }).compose(rr -> {\n-            final Promise<Result<Void>> update = Promise.promise();\n+        getDeviceManagementService().createDevice(TENANT, Optional.of(DEVICE), new Device(), NoopSpan.INSTANCE)\n+                .map(response -> {\n+                    assertEquals(HttpURLConnection.HTTP_CREATED, response.getStatus());\n+                    register.flag();\n+                    return response;\n+                }).compose(rr -> {\n             final String resourceVersion = rr.getResourceVersion().orElse(null);\n-\n-            getDeviceManagementService().deleteDevice(\n-                    TENANT, DEVICE, Optional.of(resourceVersion), NoopSpan.INSTANCE, update);\n-            return update.future();\n+            return getDeviceManagementService()\n+                    .deleteDevice(TENANT, DEVICE, Optional.of(resourceVersion), NoopSpan.INSTANCE);", "originalCommit": "7a182aef81bba9ab9e047eb1db3b973cd70bca13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c156814b319cf6f2f75fb5e4dc4aa28f506905a", "chunk": "diff --git a/service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java b/service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java\nindex 758bf0001..2a62175ef 100644\n--- a/service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java\n+++ b/service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java\n\n@@ -658,14 +660,14 @@ public abstract class AbstractRegistrationServiceTest {\n                     register.flag();\n                     return response;\n                 }).compose(rr -> {\n-            final String resourceVersion = rr.getResourceVersion().orElse(null);\n-            return getDeviceManagementService()\n-                    .deleteDevice(TENANT, DEVICE, Optional.of(resourceVersion), NoopSpan.INSTANCE);\n-        }).setHandler(\n-                ctx.succeeding(response -> ctx.verify(() -> {\n-                    assertEquals(HttpURLConnection.HTTP_NO_CONTENT, response.getStatus());\n-                    register.flag();\n-                })));\n+                    final String resourceVersion = rr.getResourceVersion().orElse(null);\n+                    return getDeviceManagementService()\n+                            .deleteDevice(TENANT, DEVICE, Optional.of(resourceVersion), NoopSpan.INSTANCE);\n+                }).setHandler(\n+                        ctx.succeeding(response -> ctx.verify(() -> {\n+                            assertEquals(HttpURLConnection.HTTP_NO_CONTENT, response.getStatus());\n+                            register.flag();\n+                        })));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMDc5Nw==", "url": "https://github.com/eclipse/hono/pull/1803#discussion_r388230797", "bodyText": "Indentation in this method seems non-standard.", "author": "calohmn", "createdAt": "2020-03-05T11:18:53Z", "path": "service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java", "diffHunk": "@@ -513,23 +474,18 @@ public void testGetReturnsCopyOfOriginalData(final VertxTestContext ctx) {\n     @Test\n     public void testGetFailsForDeregisteredDevice(final VertxTestContext ctx) {\n \n-        final Promise<OperationResult<Id>> result = Promise.promise();\n         final Checkpoint get = ctx.checkpoint(3);\n \n-        getDeviceManagementService().createDevice(TENANT, Optional.of(DEVICE), new Device(), NoopSpan.INSTANCE, result);\n-        result.future()\n-        .compose(response -> {\n-            assertEquals(HttpURLConnection.HTTP_CREATED, response.getStatus());\n-            get.flag();\n-            final Promise<Result<Void>> deregisterResult = Promise.promise();\n-            getDeviceManagementService().deleteDevice(TENANT, DEVICE, Optional.empty(), NoopSpan.INSTANCE, deregisterResult);\n-            return deregisterResult.future();\n-        }).compose(response -> {\n+        getDeviceManagementService().createDevice(TENANT, Optional.of(DEVICE), new Device(), NoopSpan.INSTANCE)\n+                .compose(response -> {\n+                    assertEquals(HttpURLConnection.HTTP_CREATED, response.getStatus());\n+                    get.flag();\n+                    return getDeviceManagementService()\n+                            .deleteDevice(TENANT, DEVICE, Optional.empty(), NoopSpan.INSTANCE);\n+                }).compose(response -> {", "originalCommit": "7a182aef81bba9ab9e047eb1db3b973cd70bca13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c156814b319cf6f2f75fb5e4dc4aa28f506905a", "chunk": "diff --git a/service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java b/service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java\nindex 758bf0001..2a62175ef 100644\n--- a/service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java\n+++ b/service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java\n\n@@ -483,13 +483,13 @@ public abstract class AbstractRegistrationServiceTest {\n                     return getDeviceManagementService()\n                             .deleteDevice(TENANT, DEVICE, Optional.empty(), NoopSpan.INSTANCE);\n                 }).compose(response -> {\n-            assertEquals(HttpURLConnection.HTTP_NO_CONTENT, response.getStatus());\n-            get.flag();\n-            return getDeviceManagementService().readDevice(TENANT, DEVICE, NoopSpan.INSTANCE);\n-        }).setHandler(ctx.succeeding(response -> ctx.verify(() -> {\n-            assertEquals(HttpURLConnection.HTTP_NOT_FOUND, response.getStatus());\n-            get.flag();\n-        })));\n+                    assertEquals(HttpURLConnection.HTTP_NO_CONTENT, response.getStatus());\n+                    get.flag();\n+                    return getDeviceManagementService().readDevice(TENANT, DEVICE, NoopSpan.INSTANCE);\n+                }).setHandler(ctx.succeeding(response -> ctx.verify(() -> {\n+                    assertEquals(HttpURLConnection.HTTP_NOT_FOUND, response.getStatus());\n+                    get.flag();\n+                })));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMTAyNg==", "url": "https://github.com/eclipse/hono/pull/1803#discussion_r388231026", "bodyText": "Indentation in this method seems non-standard.", "author": "calohmn", "createdAt": "2020-03-05T11:19:24Z", "path": "service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java", "diffHunk": "@@ -588,25 +538,20 @@ public void testAddSucceedAndContainsResourceVersion(final VertxTestContext ctx)\n     @Test\n     public void testUpdateFailsWithInvalidResourceVersion(final VertxTestContext ctx) {\n \n-        final Promise<OperationResult<Id>> result = Promise.promise();\n         final Checkpoint register = ctx.checkpoint(2);\n \n-        getDeviceManagementService().createDevice(TENANT, Optional.of(DEVICE), new Device(), NoopSpan.INSTANCE, result);\n-        result.future()\n-        .map(response -> {\n-            assertEquals(HttpURLConnection.HTTP_CREATED, response.getStatus());\n-            register.flag();\n-            return response;\n-        }).compose(rr -> {\n-            final Promise<OperationResult<Id>> update = Promise.promise();\n+        getDeviceManagementService().createDevice(TENANT, Optional.of(DEVICE), new Device(), NoopSpan.INSTANCE)\n+                .map(response -> {\n+                    assertEquals(HttpURLConnection.HTTP_CREATED, response.getStatus());\n+                    register.flag();\n+                    return response;\n+                }).compose(rr -> {", "originalCommit": "7a182aef81bba9ab9e047eb1db3b973cd70bca13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c156814b319cf6f2f75fb5e4dc4aa28f506905a", "chunk": "diff --git a/service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java b/service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java\nindex 758bf0001..2a62175ef 100644\n--- a/service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java\n+++ b/service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java\n\n@@ -546,16 +546,17 @@ public abstract class AbstractRegistrationServiceTest {\n                     register.flag();\n                     return response;\n                 }).compose(rr -> {\n-            final String resourceVersion = rr.getResourceVersion().orElse(null);\n-\n-            return getDeviceManagementService().updateDevice(\n-                    TENANT, DEVICE,\n-                    new JsonObject().put(\"ext\", new JsonObject().put(\"customKey\", \"customValue\")).mapTo(Device.class),\n-                    Optional.of(resourceVersion + \"abc\"), NoopSpan.INSTANCE);\n-        }).setHandler(\n-                ctx.succeeding(response -> ctx.verify(() -> {\n-                    assertEquals(HttpURLConnection.HTTP_PRECON_FAILED, response.getStatus());\n-                    register.flag();\n+                    final String resourceVersion = rr.getResourceVersion().orElse(null);\n+\n+                    return getDeviceManagementService().updateDevice(\n+                            TENANT, DEVICE,\n+                            new JsonObject().put(\"ext\", new JsonObject().put(\"customKey\", \"customValue\"))\n+                                    .mapTo(Device.class),\n+                            Optional.of(resourceVersion + \"abc\"), NoopSpan.INSTANCE);\n+                }).setHandler(\n+                        ctx.succeeding(response -> ctx.verify(() -> {\n+                            assertEquals(HttpURLConnection.HTTP_PRECON_FAILED, response.getStatus());\n+                            register.flag();\n                 })));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMTc4Mw==", "url": "https://github.com/eclipse/hono/pull/1803#discussion_r388231783", "bodyText": "Indentation in this method seems non-standard.", "author": "calohmn", "createdAt": "2020-03-05T11:21:03Z", "path": "service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java", "diffHunk": "@@ -755,22 +676,17 @@ public void testDeleteSucceedWithCorrectResourceVersion(final VertxTestContext c\n     @Test\n     public void testDeleteFailsWithInvalidResourceVersion(final VertxTestContext ctx) {\n \n-        final Promise<OperationResult<Id>> result = Promise.promise();\n         final Checkpoint register = ctx.checkpoint(2);\n \n-        getDeviceManagementService().createDevice(TENANT, Optional.of(DEVICE), new Device(), NoopSpan.INSTANCE, result);\n-        result.future()\n-        .map(response -> {\n-            assertEquals(HttpURLConnection.HTTP_CREATED, response.getStatus());\n-            register.flag();\n-            return response;\n-        }).compose(rr -> {\n-            final Promise<Result<Void>> update = Promise.promise();\n+        getDeviceManagementService().createDevice(TENANT, Optional.of(DEVICE), new Device(), NoopSpan.INSTANCE)\n+                .map(response -> {\n+                    assertEquals(HttpURLConnection.HTTP_CREATED, response.getStatus());\n+                    register.flag();\n+                    return response;\n+                }).compose(rr -> {", "originalCommit": "7a182aef81bba9ab9e047eb1db3b973cd70bca13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c156814b319cf6f2f75fb5e4dc4aa28f506905a", "chunk": "diff --git a/service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java b/service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java\nindex 758bf0001..2a62175ef 100644\n--- a/service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java\n+++ b/service-base/src/test/java/org/eclipse/hono/service/registration/AbstractRegistrationServiceTest.java\n\n@@ -684,14 +686,14 @@ public abstract class AbstractRegistrationServiceTest {\n                     register.flag();\n                     return response;\n                 }).compose(rr -> {\n-            final String resourceVersion = rr.getResourceVersion().orElse(null);\n-            return getDeviceManagementService().deleteDevice(\n-                    TENANT, DEVICE, Optional.of(resourceVersion + 10), NoopSpan.INSTANCE);\n-        }).setHandler(\n-                ctx.succeeding(response -> ctx.verify(() -> {\n-                    assertEquals(HttpURLConnection.HTTP_PRECON_FAILED, response.getStatus());\n-                    register.flag();\n-                })));\n+                    final String resourceVersion = rr.getResourceVersion().orElse(null);\n+                    return getDeviceManagementService().deleteDevice(\n+                            TENANT, DEVICE, Optional.of(resourceVersion + 10), NoopSpan.INSTANCE);\n+                }).setHandler(\n+                        ctx.succeeding(response -> ctx.verify(() -> {\n+                            assertEquals(HttpURLConnection.HTTP_PRECON_FAILED, response.getStatus());\n+                            register.flag();\n+                        })));\n     }\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMzI0NQ==", "url": "https://github.com/eclipse/hono/pull/1803#discussion_r388233245", "bodyText": "Can be simplified (when(underTest.deleteDevice)...).", "author": "calohmn", "createdAt": "2020-03-05T11:24:06Z", "path": "service-base/src/test/java/org/eclipse/hono/service/management/device/AutoProvisioningEnabledDeviceBackendTest.java", "diffHunk": "@@ -119,17 +117,12 @@ public void testProvisionDeviceRemovesDeviceIfCredentialsCreationFails(final Ver\n         final AutoProvisioningEnabledDeviceBackend underTest = mock(AutoProvisioningEnabledDeviceBackend.class);\n         when(underTest.provisionDevice(anyString(), any(), any())).thenCallRealMethod();\n \n-        doAnswer(invocation -> {\n-            final Promise<OperationResult<Id>> promise = invocation.getArgument(4);\n-            promise.complete(OperationResult.ok(201, Id.of(DEVICE_ID), Optional.empty(), Optional.empty()));\n-            return null;\n-        }).when(underTest).createDevice(any(), any(), any(), any(), any(Handler.class));\n+        when(underTest.createDevice(any(), any(), any(), any()))\n+                .thenReturn(Future.succeededFuture(\n+                        OperationResult.ok(201, Id.of(DEVICE_ID), Optional.empty(), Optional.empty())));\n \n-        doAnswer(invocation -> {\n-            final Promise<Result<Void>> promise = invocation.getArgument(4);\n-            promise.complete(Result.from(204));\n-            return null;\n-        }).when(underTest).deleteDevice(any(), any(), any(), any(), any(Handler.class));\n+        doAnswer(invocation -> Future.succeededFuture(Result.from(204)))\n+                .when(underTest).deleteDevice(any(), any(), any(), any());", "originalCommit": "7a182aef81bba9ab9e047eb1db3b973cd70bca13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NjU4OQ==", "url": "https://github.com/eclipse/hono/pull/1803#discussion_r388286589", "bodyText": "@calohmn I have updated it. Also made changes regarding indentation as in the above comments. Would you mind taking a look again?", "author": "kaniyan", "createdAt": "2020-03-05T13:18:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMzI0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9c156814b319cf6f2f75fb5e4dc4aa28f506905a", "chunk": "diff --git a/service-base/src/test/java/org/eclipse/hono/service/management/device/AutoProvisioningEnabledDeviceBackendTest.java b/service-base/src/test/java/org/eclipse/hono/service/management/device/AutoProvisioningEnabledDeviceBackendTest.java\nindex e22bae0e3..9217c7f95 100644\n--- a/service-base/src/test/java/org/eclipse/hono/service/management/device/AutoProvisioningEnabledDeviceBackendTest.java\n+++ b/service-base/src/test/java/org/eclipse/hono/service/management/device/AutoProvisioningEnabledDeviceBackendTest.java\n\n@@ -121,8 +121,8 @@ public class AutoProvisioningEnabledDeviceBackendTest {\n                 .thenReturn(Future.succeededFuture(\n                         OperationResult.ok(201, Id.of(DEVICE_ID), Optional.empty(), Optional.empty())));\n \n-        doAnswer(invocation -> Future.succeededFuture(Result.from(204)))\n-                .when(underTest).deleteDevice(any(), any(), any(), any());\n+        when(underTest.deleteDevice(any(), any(), any(), any()))\n+                .thenReturn(Future.succeededFuture(Result.from(204)));\n \n         doAnswer(invocation -> {\n             final Promise<OperationResult<Void>> promise = invocation.getArgument(5);\n"}}, {"oid": "9c156814b319cf6f2f75fb5e4dc4aa28f506905a", "url": "https://github.com/eclipse/hono/commit/9c156814b319cf6f2f75fb5e4dc4aa28f506905a", "message": "[#1802] Refactor device management service to return future instead of passing on handler.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-03-05T13:01:47Z", "type": "forcePushed"}, {"oid": "dfc2f2ef1d7a6ccb08b5f5e973525d600dc874e9", "url": "https://github.com/eclipse/hono/commit/dfc2f2ef1d7a6ccb08b5f5e973525d600dc874e9", "message": "[#1802] Refactor device management service to return future instead of passing a handler as an argument.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-03-05T13:30:47Z", "type": "commit"}, {"oid": "dfc2f2ef1d7a6ccb08b5f5e973525d600dc874e9", "url": "https://github.com/eclipse/hono/commit/dfc2f2ef1d7a6ccb08b5f5e973525d600dc874e9", "message": "[#1802] Refactor device management service to return future instead of passing a handler as an argument.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-03-05T13:30:47Z", "type": "forcePushed"}]}