{"pr_number": 2365, "pr_title": "[#2053] Adding integration tests for gateway-based auto provisioning.", "pr_createdAt": "2020-12-10T08:40:29Z", "pr_url": "https://github.com/eclipse/hono/pull/2365", "timeline": [{"oid": "2a3a4fe05e70b1cd5cdf503033abbdc1e4d8eb78", "url": "https://github.com/eclipse/hono/commit/2a3a4fe05e70b1cd5cdf503033abbdc1e4d8eb78", "message": "[#2053] Adding integration tests for gateway-based auto provisioning.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-05T15:26:31Z", "type": "forcePushed"}, {"oid": "4fcfb05598e694670ad3ca0ed06a0b27d0acb9c7", "url": "https://github.com/eclipse/hono/commit/4fcfb05598e694670ad3ca0ed06a0b27d0acb9c7", "message": "[#2053] Adding integration tests for gateway-based auto provisioning.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-08T14:02:36Z", "type": "forcePushed"}, {"oid": "f07279d7ca221cf1b44e2ba5bd83079e18f0f11e", "url": "https://github.com/eclipse/hono/commit/f07279d7ca221cf1b44e2ba5bd83079e18f0f11e", "message": "[#2053] Adding integration tests for gateway-based auto provisioning.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-08T14:21:48Z", "type": "forcePushed"}, {"oid": "eeb844d0ad5fa000b3adb41bb517d039379d711d", "url": "https://github.com/eclipse/hono/commit/eeb844d0ad5fa000b3adb41bb517d039379d711d", "message": "[#2053] Adding integration tests for gateway-based auto provisioning.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-08T14:40:04Z", "type": "forcePushed"}, {"oid": "c87e31d2d310c2928a492754cf2d79bfb2aba90e", "url": "https://github.com/eclipse/hono/commit/c87e31d2d310c2928a492754cf2d79bfb2aba90e", "message": "[#2053] Adding integration tests for gateway-based auto provisioning.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-11T07:24:44Z", "type": "forcePushed"}, {"oid": "8ee5ccdde1dd8a4e6b017dc95cb961f931174893", "url": "https://github.com/eclipse/hono/commit/8ee5ccdde1dd8a4e6b017dc95cb961f931174893", "message": "[#2053] Adding integration tests for gateway-based auto provisioning.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-12T11:27:37Z", "type": "forcePushed"}, {"oid": "d914e1c6ce29acb636dad0d07e970ae99e47c65b", "url": "https://github.com/eclipse/hono/commit/d914e1c6ce29acb636dad0d07e970ae99e47c65b", "message": "[#2053] Adding integration tests for gateway-based auto provisioning.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-14T16:12:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzUzOTMyOA==", "url": "https://github.com/eclipse/hono/pull/2365#discussion_r557539328", "bodyText": "you should either consider the senderQoS being passed into the test method or do not run this as a parameterized test. FMPOV the latter would be ok.", "author": "sophokles73", "createdAt": "2021-01-14T16:47:15Z", "path": "tests/src/test/java/org/eclipse/hono/tests/amqp/AmqpUploadTestBase.java", "diffHunk": "@@ -241,6 +244,76 @@ public void testAdapterClosesLinkOnMessageExceedingMaxPayloadSize(final VertxTes\n \n     }\n \n+    /**\n+     * Verifies that an edge device is auto-provisioned if it connects via a gateway equipped with the corresponding\n+     * authority.\n+     *\n+     * @param senderQos The delivery semantics to use for the device.\n+     * @throws InterruptedException if test is interrupted while running.\n+     */\n+    @ParameterizedTest(name = IntegrationTestSupport.PARAMETERIZED_TEST_NAME_PATTERN)\n+    @MethodSource(\"senderQoSTypes\")\n+    public void testAutoProvisioningViaGateway(final ProtonQoS senderQos) throws InterruptedException {\n+\n+        final String tenantId = helper.getRandomTenantId();\n+        final String gatewayId = helper.getRandomDeviceId(tenantId);\n+        final Device gateway = new Device()\n+                .setAuthorities(Collections.singleton(RegistryManagementConstants.AUTHORITY_AUTO_PROVISIONING_ENABLED));\n+\n+        final String username = IntegrationTestSupport.getUsername(gatewayId, tenantId);\n+        final VertxTestContext emptyEventReceived = new VertxTestContext();\n+        helper.applicationClientFactory.createEventConsumer(tenantId,\n+                msg -> emptyEventReceived.verify( () -> {\n+                    assertThat(msg.getContentType()).isEqualTo(EventConstants.CONTENT_TYPE_EMPTY_NOTIFICATION);\n+                    assertThat(MessageHelper.getRegistrationStatus(msg)).isEqualTo(EventConstants.RegistrationStatus.NEW.name());\n+                    emptyEventReceived.completeNow();\n+                }),\n+                close -> {});\n+\n+        final VertxTestContext telemetryReceived = new VertxTestContext();\n+        createConsumer(tenantId, msg -> {\n+            telemetryReceived.verify( () -> {\n+                assertThat(msg.getContentType()).isEqualTo(\"text/plain\");\n+                assertMessageProperties(telemetryReceived, msg);\n+            });\n+            telemetryReceived.completeNow();\n+        });\n+\n+        final VertxTestContext setup = new VertxTestContext();\n+        helper.registry\n+                .addDeviceForTenant(tenantId, new Tenant(), gatewayId, gateway, DEVICE_PASSWORD)\n+                .compose(ok -> connectToAdapter(username, DEVICE_PASSWORD))\n+                .compose(con -> createProducer(null, senderQos))\n+                .recover(t -> {\n+                    log.error(\"error setting up AMQP protocol adapter\", t);\n+                    return Future.failedFuture(t);\n+                })\n+                .onComplete(setup.succeeding(s -> {\n+                    sender = s;\n+                    setup.completeNow();\n+                }));\n+\n+        assertThat(setup.awaitCompletion(5, TimeUnit.SECONDS)).isTrue();\n+        assertThat(setup.failed())\n+                .as(\"successfully connect to adapter\")\n+                .isFalse();\n+\n+        final VertxTestContext messageSent = new VertxTestContext();\n+        final Message msg = ProtonHelper.message(\"apFoobar\");\n+        msg.setContentType(\"text/plain\");\n+\n+        final String deviceId = helper.getRandomDeviceId(tenantId);\n+        msg.setAddress(String.format(\"%s/%s/%s\", getEndpointName(), tenantId, deviceId));\n+        sender.send(msg, delivery -> {", "originalCommit": "d914e1c6ce29acb636dad0d07e970ae99e47c65b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6821687ed4dde97f29de615736acd3c97cd3dcf0", "chunk": "diff --git a/tests/src/test/java/org/eclipse/hono/tests/amqp/AmqpUploadTestBase.java b/tests/src/test/java/org/eclipse/hono/tests/amqp/AmqpUploadTestBase.java\nindex fae591d4b..3f95321b1 100644\n--- a/tests/src/test/java/org/eclipse/hono/tests/amqp/AmqpUploadTestBase.java\n+++ b/tests/src/test/java/org/eclipse/hono/tests/amqp/AmqpUploadTestBase.java\n\n@@ -248,12 +248,11 @@ public abstract class AmqpUploadTestBase extends AmqpAdapterTestBase {\n      * Verifies that an edge device is auto-provisioned if it connects via a gateway equipped with the corresponding\n      * authority.\n      *\n-     * @param senderQos The delivery semantics to use for the device.\n-     * @throws InterruptedException if test is interrupted while running.\n+     * @param ctx The Vert.x test context.\n      */\n-    @ParameterizedTest(name = IntegrationTestSupport.PARAMETERIZED_TEST_NAME_PATTERN)\n-    @MethodSource(\"senderQoSTypes\")\n-    public void testAutoProvisioningViaGateway(final ProtonQoS senderQos) throws InterruptedException {\n+    @Test\n+    @Timeout(timeUnit = TimeUnit.SECONDS, value = 10)\n+    public void testAutoProvisioningViaGateway(final VertxTestContext ctx) {\n \n         final String tenantId = helper.getRandomTenantId();\n         final String gatewayId = helper.getRandomDeviceId(tenantId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzUzOTk1NQ==", "url": "https://github.com/eclipse/hono/pull/2365#discussion_r557539955", "bodyText": "how about using a simple Checkpoint instead of coordinating three TestContexts?", "author": "sophokles73", "createdAt": "2021-01-14T16:48:01Z", "path": "tests/src/test/java/org/eclipse/hono/tests/amqp/AmqpUploadTestBase.java", "diffHunk": "@@ -241,6 +244,76 @@ public void testAdapterClosesLinkOnMessageExceedingMaxPayloadSize(final VertxTes\n \n     }\n \n+    /**\n+     * Verifies that an edge device is auto-provisioned if it connects via a gateway equipped with the corresponding\n+     * authority.\n+     *\n+     * @param senderQos The delivery semantics to use for the device.\n+     * @throws InterruptedException if test is interrupted while running.\n+     */\n+    @ParameterizedTest(name = IntegrationTestSupport.PARAMETERIZED_TEST_NAME_PATTERN)\n+    @MethodSource(\"senderQoSTypes\")\n+    public void testAutoProvisioningViaGateway(final ProtonQoS senderQos) throws InterruptedException {\n+\n+        final String tenantId = helper.getRandomTenantId();\n+        final String gatewayId = helper.getRandomDeviceId(tenantId);\n+        final Device gateway = new Device()\n+                .setAuthorities(Collections.singleton(RegistryManagementConstants.AUTHORITY_AUTO_PROVISIONING_ENABLED));\n+\n+        final String username = IntegrationTestSupport.getUsername(gatewayId, tenantId);\n+        final VertxTestContext emptyEventReceived = new VertxTestContext();\n+        helper.applicationClientFactory.createEventConsumer(tenantId,\n+                msg -> emptyEventReceived.verify( () -> {\n+                    assertThat(msg.getContentType()).isEqualTo(EventConstants.CONTENT_TYPE_EMPTY_NOTIFICATION);\n+                    assertThat(MessageHelper.getRegistrationStatus(msg)).isEqualTo(EventConstants.RegistrationStatus.NEW.name());\n+                    emptyEventReceived.completeNow();\n+                }),\n+                close -> {});\n+\n+        final VertxTestContext telemetryReceived = new VertxTestContext();\n+        createConsumer(tenantId, msg -> {\n+            telemetryReceived.verify( () -> {\n+                assertThat(msg.getContentType()).isEqualTo(\"text/plain\");\n+                assertMessageProperties(telemetryReceived, msg);\n+            });\n+            telemetryReceived.completeNow();\n+        });\n+\n+        final VertxTestContext setup = new VertxTestContext();\n+        helper.registry\n+                .addDeviceForTenant(tenantId, new Tenant(), gatewayId, gateway, DEVICE_PASSWORD)\n+                .compose(ok -> connectToAdapter(username, DEVICE_PASSWORD))\n+                .compose(con -> createProducer(null, senderQos))\n+                .recover(t -> {\n+                    log.error(\"error setting up AMQP protocol adapter\", t);\n+                    return Future.failedFuture(t);\n+                })\n+                .onComplete(setup.succeeding(s -> {\n+                    sender = s;\n+                    setup.completeNow();\n+                }));\n+\n+        assertThat(setup.awaitCompletion(5, TimeUnit.SECONDS)).isTrue();\n+        assertThat(setup.failed())\n+                .as(\"successfully connect to adapter\")\n+                .isFalse();\n+\n+        final VertxTestContext messageSent = new VertxTestContext();\n+        final Message msg = ProtonHelper.message(\"apFoobar\");\n+        msg.setContentType(\"text/plain\");\n+\n+        final String deviceId = helper.getRandomDeviceId(tenantId);\n+        msg.setAddress(String.format(\"%s/%s/%s\", getEndpointName(), tenantId, deviceId));\n+        sender.send(msg, delivery -> {\n+            messageSent.verify(() -> assertThat(delivery.getRemoteState()).isInstanceOf(Accepted.class));\n+            messageSent.completeNow();\n+        });\n+\n+        assertThat(messageSent.awaitCompletion(5, TimeUnit.SECONDS)).isTrue();\n+        assertThat(emptyEventReceived.awaitCompletion(5, TimeUnit.SECONDS)).isTrue();\n+        assertThat(telemetryReceived.awaitCompletion(5, TimeUnit.SECONDS)).isTrue();", "originalCommit": "d914e1c6ce29acb636dad0d07e970ae99e47c65b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6821687ed4dde97f29de615736acd3c97cd3dcf0", "chunk": "diff --git a/tests/src/test/java/org/eclipse/hono/tests/amqp/AmqpUploadTestBase.java b/tests/src/test/java/org/eclipse/hono/tests/amqp/AmqpUploadTestBase.java\nindex fae591d4b..3f95321b1 100644\n--- a/tests/src/test/java/org/eclipse/hono/tests/amqp/AmqpUploadTestBase.java\n+++ b/tests/src/test/java/org/eclipse/hono/tests/amqp/AmqpUploadTestBase.java\n\n@@ -248,12 +248,11 @@ public abstract class AmqpUploadTestBase extends AmqpAdapterTestBase {\n      * Verifies that an edge device is auto-provisioned if it connects via a gateway equipped with the corresponding\n      * authority.\n      *\n-     * @param senderQos The delivery semantics to use for the device.\n-     * @throws InterruptedException if test is interrupted while running.\n+     * @param ctx The Vert.x test context.\n      */\n-    @ParameterizedTest(name = IntegrationTestSupport.PARAMETERIZED_TEST_NAME_PATTERN)\n-    @MethodSource(\"senderQoSTypes\")\n-    public void testAutoProvisioningViaGateway(final ProtonQoS senderQos) throws InterruptedException {\n+    @Test\n+    @Timeout(timeUnit = TimeUnit.SECONDS, value = 10)\n+    public void testAutoProvisioningViaGateway(final VertxTestContext ctx) {\n \n         final String tenantId = helper.getRandomTenantId();\n         final String gatewayId = helper.getRandomDeviceId(tenantId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU0MTc0NQ==", "url": "https://github.com/eclipse/hono/pull/2365#discussion_r557541745", "bodyText": "one gateway, isn't it?", "author": "sophokles73", "createdAt": "2021-01-14T16:50:30Z", "path": "tests/src/test/java/org/eclipse/hono/tests/coap/CoapTestBase.java", "diffHunk": "@@ -408,6 +410,56 @@ public void testUploadMessagesViaGateway(final VertxTestContext ctx) throws Inte\n                 });\n     }\n \n+    /**\n+     * Verifies that an edge device is auto-provisioned if it connects via a gateway equipped with the corresponding\n+     * authority.\n+     *\n+     * @param ctx The test context.\n+     * @throws InterruptedException if the test fails.\n+     */\n+    @Test\n+    public void testAutoProvisioningViaGateway(final VertxTestContext ctx) throws InterruptedException {\n+\n+        // GIVEN a device that is connected via two gateways", "originalCommit": "d914e1c6ce29acb636dad0d07e970ae99e47c65b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6821687ed4dde97f29de615736acd3c97cd3dcf0", "chunk": "diff --git a/tests/src/test/java/org/eclipse/hono/tests/coap/CoapTestBase.java b/tests/src/test/java/org/eclipse/hono/tests/coap/CoapTestBase.java\nindex 5390fec45..64daed966 100644\n--- a/tests/src/test/java/org/eclipse/hono/tests/coap/CoapTestBase.java\n+++ b/tests/src/test/java/org/eclipse/hono/tests/coap/CoapTestBase.java\n\n@@ -420,44 +419,24 @@ public abstract class CoapTestBase {\n     @Test\n     public void testAutoProvisioningViaGateway(final VertxTestContext ctx) throws InterruptedException {\n \n-        // GIVEN a device that is connected via two gateways\n         final Tenant tenant = new Tenant();\n         final String gatewayId = helper.getRandomDeviceId(tenantId);\n         final Device gateway = new Device()\n                 .setAuthorities(Collections.singleton(RegistryManagementConstants.AUTHORITY_AUTO_PROVISIONING_ENABLED));\n \n-        final VertxTestContext setup = new VertxTestContext();\n-        helper.registry.addPskDeviceForTenant(tenantId, tenant, gatewayId, gateway, SECRET)\n-                .onComplete(setup.completing());\n-        ctx.verify(() -> assertThat(setup.awaitCompletion(5, TimeUnit.SECONDS)).isTrue());\n-\n-        final CoapClient gatewayClient = getCoapsClient(gatewayId, tenantId, SECRET);\n+        final String edgeDeviceId = helper.getRandomDeviceId(tenantId);\n+        helper.createAutoProvisioningMessageConsumers(ctx, tenantId, edgeDeviceId)\n+                .compose(ok -> helper.registry.addPskDeviceForTenant(tenantId, tenant, gatewayId, gateway, SECRET))\n+                .compose(ok -> {\n+                    final Promise<OptionSet> result = Promise.promise();\n+                    final Request request = createCoapsRequest(Code.PUT, getPutResource(tenantId, edgeDeviceId), 0);\n \n-        final VertxTestContext emptyEventReceived = new VertxTestContext();\n-        helper.applicationClientFactory.createEventConsumer(tenantId,\n-                msg -> emptyEventReceived.verify( () -> {\n-                    // ignore potential events of warmup\n-                    if (MessageHelper.getDeviceId(msg).equals(deviceId)) {\n-                        assertThat(msg.getContentType()).isEqualTo(EventConstants.CONTENT_TYPE_EMPTY_NOTIFICATION);\n-                        assertThat(MessageHelper.getRegistrationStatus(msg)).isEqualTo(EventConstants.RegistrationStatus.NEW.name());\n-                        emptyEventReceived.completeNow();\n-                    }\n-                }),\n-                close -> {});\n+                    final CoapClient client = getCoapsClient(gatewayId, tenantId, SECRET);\n+                    client.advanced(getHandler(result), request);\n \n-        testUploadMessages(ctx, tenantId,\n-                () -> warmUp(gatewayClient, createCoapsRequest(Code.PUT, getPutResource(tenantId, helper.getRandomDeviceId(tenantId)), 0)),\n-                null,\n-                count -> {\n-                    final Promise<OptionSet> result = Promise.promise();\n-                    final Request request = createCoapsRequest(Code.PUT, getPutResource(tenantId, deviceId), count);\n-                    gatewayClient.advanced(getHandler(result), request);\n                     return result.future();\n-                },\n-                1,\n-                null);\n-\n-        assertThat(emptyEventReceived.awaitCompletion(5, TimeUnit.SECONDS)).isTrue();\n+                })\n+                .onComplete(ctx.succeeding());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU0Mzk4Mg==", "url": "https://github.com/eclipse/hono/pull/2365#discussion_r557543982", "bodyText": "IMHO sending the message could/should be done in a much simpler way, e.g. as in the testUploadMessageFailsForDisabledDevice test method ...", "author": "sophokles73", "createdAt": "2021-01-14T16:53:41Z", "path": "tests/src/test/java/org/eclipse/hono/tests/coap/CoapTestBase.java", "diffHunk": "@@ -408,6 +410,56 @@ public void testUploadMessagesViaGateway(final VertxTestContext ctx) throws Inte\n                 });\n     }\n \n+    /**\n+     * Verifies that an edge device is auto-provisioned if it connects via a gateway equipped with the corresponding\n+     * authority.\n+     *\n+     * @param ctx The test context.\n+     * @throws InterruptedException if the test fails.\n+     */\n+    @Test\n+    public void testAutoProvisioningViaGateway(final VertxTestContext ctx) throws InterruptedException {\n+\n+        // GIVEN a device that is connected via two gateways\n+        final Tenant tenant = new Tenant();\n+        final String gatewayId = helper.getRandomDeviceId(tenantId);\n+        final Device gateway = new Device()\n+                .setAuthorities(Collections.singleton(RegistryManagementConstants.AUTHORITY_AUTO_PROVISIONING_ENABLED));\n+\n+        final VertxTestContext setup = new VertxTestContext();\n+        helper.registry.addPskDeviceForTenant(tenantId, tenant, gatewayId, gateway, SECRET)\n+                .onComplete(setup.completing());\n+        ctx.verify(() -> assertThat(setup.awaitCompletion(5, TimeUnit.SECONDS)).isTrue());\n+\n+        final CoapClient gatewayClient = getCoapsClient(gatewayId, tenantId, SECRET);\n+\n+        final VertxTestContext emptyEventReceived = new VertxTestContext();\n+        helper.applicationClientFactory.createEventConsumer(tenantId,\n+                msg -> emptyEventReceived.verify( () -> {\n+                    // ignore potential events of warmup\n+                    if (MessageHelper.getDeviceId(msg).equals(deviceId)) {\n+                        assertThat(msg.getContentType()).isEqualTo(EventConstants.CONTENT_TYPE_EMPTY_NOTIFICATION);\n+                        assertThat(MessageHelper.getRegistrationStatus(msg)).isEqualTo(EventConstants.RegistrationStatus.NEW.name());\n+                        emptyEventReceived.completeNow();\n+                    }\n+                }),\n+                close -> {});\n+\n+        testUploadMessages(ctx, tenantId,", "originalCommit": "d914e1c6ce29acb636dad0d07e970ae99e47c65b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6821687ed4dde97f29de615736acd3c97cd3dcf0", "chunk": "diff --git a/tests/src/test/java/org/eclipse/hono/tests/coap/CoapTestBase.java b/tests/src/test/java/org/eclipse/hono/tests/coap/CoapTestBase.java\nindex 5390fec45..64daed966 100644\n--- a/tests/src/test/java/org/eclipse/hono/tests/coap/CoapTestBase.java\n+++ b/tests/src/test/java/org/eclipse/hono/tests/coap/CoapTestBase.java\n\n@@ -420,44 +419,24 @@ public abstract class CoapTestBase {\n     @Test\n     public void testAutoProvisioningViaGateway(final VertxTestContext ctx) throws InterruptedException {\n \n-        // GIVEN a device that is connected via two gateways\n         final Tenant tenant = new Tenant();\n         final String gatewayId = helper.getRandomDeviceId(tenantId);\n         final Device gateway = new Device()\n                 .setAuthorities(Collections.singleton(RegistryManagementConstants.AUTHORITY_AUTO_PROVISIONING_ENABLED));\n \n-        final VertxTestContext setup = new VertxTestContext();\n-        helper.registry.addPskDeviceForTenant(tenantId, tenant, gatewayId, gateway, SECRET)\n-                .onComplete(setup.completing());\n-        ctx.verify(() -> assertThat(setup.awaitCompletion(5, TimeUnit.SECONDS)).isTrue());\n-\n-        final CoapClient gatewayClient = getCoapsClient(gatewayId, tenantId, SECRET);\n+        final String edgeDeviceId = helper.getRandomDeviceId(tenantId);\n+        helper.createAutoProvisioningMessageConsumers(ctx, tenantId, edgeDeviceId)\n+                .compose(ok -> helper.registry.addPskDeviceForTenant(tenantId, tenant, gatewayId, gateway, SECRET))\n+                .compose(ok -> {\n+                    final Promise<OptionSet> result = Promise.promise();\n+                    final Request request = createCoapsRequest(Code.PUT, getPutResource(tenantId, edgeDeviceId), 0);\n \n-        final VertxTestContext emptyEventReceived = new VertxTestContext();\n-        helper.applicationClientFactory.createEventConsumer(tenantId,\n-                msg -> emptyEventReceived.verify( () -> {\n-                    // ignore potential events of warmup\n-                    if (MessageHelper.getDeviceId(msg).equals(deviceId)) {\n-                        assertThat(msg.getContentType()).isEqualTo(EventConstants.CONTENT_TYPE_EMPTY_NOTIFICATION);\n-                        assertThat(MessageHelper.getRegistrationStatus(msg)).isEqualTo(EventConstants.RegistrationStatus.NEW.name());\n-                        emptyEventReceived.completeNow();\n-                    }\n-                }),\n-                close -> {});\n+                    final CoapClient client = getCoapsClient(gatewayId, tenantId, SECRET);\n+                    client.advanced(getHandler(result), request);\n \n-        testUploadMessages(ctx, tenantId,\n-                () -> warmUp(gatewayClient, createCoapsRequest(Code.PUT, getPutResource(tenantId, helper.getRandomDeviceId(tenantId)), 0)),\n-                null,\n-                count -> {\n-                    final Promise<OptionSet> result = Promise.promise();\n-                    final Request request = createCoapsRequest(Code.PUT, getPutResource(tenantId, deviceId), count);\n-                    gatewayClient.advanced(getHandler(result), request);\n                     return result.future();\n-                },\n-                1,\n-                null);\n-\n-        assertThat(emptyEventReceived.awaitCompletion(5, TimeUnit.SECONDS)).isTrue();\n+                })\n+                .onComplete(ctx.succeeding());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU0NDQ3Mw==", "url": "https://github.com/eclipse/hono/pull/2365#discussion_r557544473", "bodyText": "same here, simply send one request and handle its outcome directly ...", "author": "sophokles73", "createdAt": "2021-01-14T16:54:29Z", "path": "tests/src/test/java/org/eclipse/hono/tests/http/HttpTestBase.java", "diffHunk": "@@ -857,6 +859,64 @@ public void testUploadMessageFailsForUnauthorizedGateway(final VertxTestContext\n         .onComplete(ctx.completing());\n     }\n \n+    /**\n+     * Verifies that an edge device is auto-provisioned if it connects via a gateway equipped with the corresponding\n+     * authority.\n+     *\n+     * @param ctx The test context.\n+     * @throws InterruptedException if the test fails.\n+     */\n+    @Test\n+    public void testAutoProvisioningViaGateway(final VertxTestContext ctx) throws InterruptedException {\n+\n+        final Tenant tenant = new Tenant();\n+        final String gatewayId = helper.getRandomDeviceId(tenantId);\n+        final Device gateway = new Device()\n+                .setAuthorities(Collections.singleton(RegistryManagementConstants.AUTHORITY_AUTO_PROVISIONING_ENABLED));\n+\n+        final VertxTestContext setup = new VertxTestContext();\n+        helper.registry.addDeviceForTenant(tenantId, tenant, gatewayId, gateway, PWD)\n+                .onComplete(setup.completing());\n+\n+        assertThat(setup.awaitCompletion(5, TimeUnit.SECONDS)).isTrue();\n+        if (setup.failed()) {\n+            ctx.failNow(setup.causeOfFailure());\n+            return;\n+        }\n+\n+        final MultiMap requestHeaders = MultiMap.caseInsensitiveMultiMap()\n+                .add(HttpHeaders.CONTENT_TYPE, \"text/plain\")\n+                .add(HttpHeaders.AUTHORIZATION, getBasicAuth(tenantId, gatewayId, PWD))\n+                .add(HttpHeaders.ORIGIN, ORIGIN_URI);\n+\n+        final String uri = String.format(\"%s/%s/%s\", getEndpointUri(), tenantId, helper.getRandomDeviceId(tenantId));\n+\n+        helper.applicationClientFactory.createEventConsumer(tenantId, msg -> {\n+            ctx.verify(() -> {\n+                assertThat(msg.getContentType()).isEqualTo(EventConstants.CONTENT_TYPE_EMPTY_NOTIFICATION);\n+                assertThat(MessageHelper.getRegistrationStatus(msg)).isEqualTo(EventConstants.RegistrationStatus.NEW.name());\n+            });\n+        }, remoteClose -> {});\n+\n+        testUploadMessages(", "originalCommit": "d914e1c6ce29acb636dad0d07e970ae99e47c65b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6821687ed4dde97f29de615736acd3c97cd3dcf0", "chunk": "diff --git a/tests/src/test/java/org/eclipse/hono/tests/http/HttpTestBase.java b/tests/src/test/java/org/eclipse/hono/tests/http/HttpTestBase.java\nindex 301fecbc3..883c37266 100644\n--- a/tests/src/test/java/org/eclipse/hono/tests/http/HttpTestBase.java\n+++ b/tests/src/test/java/org/eclipse/hono/tests/http/HttpTestBase.java\n\n@@ -874,47 +873,24 @@ public abstract class HttpTestBase {\n         final Device gateway = new Device()\n                 .setAuthorities(Collections.singleton(RegistryManagementConstants.AUTHORITY_AUTO_PROVISIONING_ENABLED));\n \n-        final VertxTestContext setup = new VertxTestContext();\n-        helper.registry.addDeviceForTenant(tenantId, tenant, gatewayId, gateway, PWD)\n-                .onComplete(setup.completing());\n+        final String edgeDeviceId = helper.getRandomDeviceId(tenantId);\n+        helper.createAutoProvisioningMessageConsumers(ctx, tenantId, edgeDeviceId)\n+                .compose(ok -> helper.registry.addDeviceForTenant(tenantId, tenant, gatewayId, gateway, PWD))\n+                .compose(ok -> {\n+                    final MultiMap requestHeaders = MultiMap.caseInsensitiveMultiMap()\n+                            .add(HttpHeaders.CONTENT_TYPE, \"text/plain\")\n+                            .add(HttpHeaders.AUTHORIZATION, getBasicAuth(tenantId, gatewayId, PWD))\n+                            .add(HttpHeaders.ORIGIN, ORIGIN_URI);\n \n-        assertThat(setup.awaitCompletion(5, TimeUnit.SECONDS)).isTrue();\n-        if (setup.failed()) {\n-            ctx.failNow(setup.causeOfFailure());\n-            return;\n-        }\n+                    final String uri = String.format(\"%s/%s/%s\", getEndpointUri(), tenantId, edgeDeviceId);\n \n-        final MultiMap requestHeaders = MultiMap.caseInsensitiveMultiMap()\n-                .add(HttpHeaders.CONTENT_TYPE, \"text/plain\")\n-                .add(HttpHeaders.AUTHORIZATION, getBasicAuth(tenantId, gatewayId, PWD))\n-                .add(HttpHeaders.ORIGIN, ORIGIN_URI);\n-\n-        final String uri = String.format(\"%s/%s/%s\", getEndpointUri(), tenantId, helper.getRandomDeviceId(tenantId));\n-\n-        helper.applicationClientFactory.createEventConsumer(tenantId, msg -> {\n-            ctx.verify(() -> {\n-                assertThat(msg.getContentType()).isEqualTo(EventConstants.CONTENT_TYPE_EMPTY_NOTIFICATION);\n-                assertThat(MessageHelper.getRegistrationStatus(msg)).isEqualTo(EventConstants.RegistrationStatus.NEW.name());\n-            });\n-        }, remoteClose -> {});\n-\n-        testUploadMessages(\n-                ctx,\n-                tenantId,\n-                msg -> {\n-                    ctx.verify(()  -> {\n-                        assertThat(msg.getContentType()).isEqualTo(\"text/plain\");\n-                        assertMessageProperties(ctx, msg);\n-                    });\n-                    return Future.succeededFuture();\n-                },\n-                count -> httpClient.update( // GW uses PUT when acting on behalf of a device\n-                    uri,\n-                    Buffer.buffer(\"hello \" + count),\n-                    requestHeaders,\n-                    ResponsePredicate.status(HttpURLConnection.HTTP_ACCEPTED)),\n-                1,\n-                getExpectedQoS(null));\n+                    return httpClient.update(\n+                            uri,\n+                            Buffer.buffer(\"hello\"),\n+                            requestHeaders,\n+                            ResponsePredicate.status(HttpURLConnection.HTTP_ACCEPTED));\n+                })\n+                .onComplete(ctx.succeeding());\n     }\n \n     /**\n"}}, {"oid": "6821687ed4dde97f29de615736acd3c97cd3dcf0", "url": "https://github.com/eclipse/hono/commit/6821687ed4dde97f29de615736acd3c97cd3dcf0", "message": "Review suggestions:\n- Don't make the AMQP test parameterized\n- Fix docs\n- Using Checkpoints\n- Sending message in a simpler way\n\nImprovements:\n- Also verifying if the telemetry/event message which should be send after the empty notification is received\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-18T07:54:40Z", "type": "forcePushed"}, {"oid": "12dad65055b2b2f9af2a1d26f05035df063a3a40", "url": "https://github.com/eclipse/hono/commit/12dad65055b2b2f9af2a1d26f05035df063a3a40", "message": "Review suggestions:\n- Don't make the AMQP test parameterized\n- Fix docs\n- Using Checkpoints\n- Sending message in a simpler way\n\nImprovements:\n- Also verifying if the telemetry/event message which should be send after the empty notification is received\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-18T10:18:22Z", "type": "forcePushed"}, {"oid": "16202043d5107a1416aa2e5c6023942a31789cdf", "url": "https://github.com/eclipse/hono/commit/16202043d5107a1416aa2e5c6023942a31789cdf", "message": "[#2053] Adding integration tests for gateway-based auto provisioning.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-18T10:48:21Z", "type": "commit"}, {"oid": "d2092a14fcaf2243487606584f098353fe81bb33", "url": "https://github.com/eclipse/hono/commit/d2092a14fcaf2243487606584f098353fe81bb33", "message": "Review suggestions:\n- Don't make the AMQP test parameterized\n- Fix docs\n- Using Checkpoints\n- Sending message in a simpler way\n\nImprovements:\n- Also verifying if the telemetry/event message which should be send after the empty notification is received\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-18T13:40:18Z", "type": "commit"}, {"oid": "d2092a14fcaf2243487606584f098353fe81bb33", "url": "https://github.com/eclipse/hono/commit/d2092a14fcaf2243487606584f098353fe81bb33", "message": "Review suggestions:\n- Don't make the AMQP test parameterized\n- Fix docs\n- Using Checkpoints\n- Sending message in a simpler way\n\nImprovements:\n- Also verifying if the telemetry/event message which should be send after the empty notification is received\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-18T13:40:18Z", "type": "forcePushed"}]}