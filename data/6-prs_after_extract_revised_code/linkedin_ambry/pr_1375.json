{"pr_number": 1375, "pr_title": "Default to use netty bytebuf in network layer and remove getAndRelease method", "pr_createdAt": "2020-02-06T23:46:15Z", "pr_url": "https://github.com/linkedin/ambry/pull/1375", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0OTk0MA==", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378049940", "bodyText": "document return value", "author": "cgtz", "createdAt": "2020-02-12T05:43:25Z", "path": "ambry-api/src/main/java/com.github.ambry/network/NetworkRequest.java", "diffHunk": "@@ -35,5 +35,7 @@\n   /**\n    * Release any resource this request is holding.", "originalCommit": "1029456f79fe963617cbb1e4bb553d4efacf26b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "765be429f8ed63c4aad52647acbc73e293b05b48", "chunk": "diff --git a/ambry-api/src/main/java/com.github.ambry/network/NetworkRequest.java b/ambry-api/src/main/java/com.github.ambry/network/NetworkRequest.java\nindex e28ded14b..53b9e1f87 100644\n--- a/ambry-api/src/main/java/com.github.ambry/network/NetworkRequest.java\n+++ b/ambry-api/src/main/java/com.github.ambry/network/NetworkRequest.java\n\n@@ -33,9 +34,11 @@ public interface NetworkRequest {\n   long getStartTimeInMs();\n \n   /**\n-   * Release any resource this request is holding.\n+   * Release any resource this request is holding. By default it returns false so this method can be compatible\n+   * with {@link ByteBuf#release()}\n+   * @return {@code true} if and only if the reference count became {@code 0} and this object has been deallocated\n    */\n   default boolean release() {\n-    return true;\n-  };\n+    return false;\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA1MzIzMg==", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378053232", "bodyText": "A DefaultByteBufHolder interface may help to reduce some of the duplicated code for the different impls of of ByteBufHolder. Something like:\ninterface DefaultByteBufHolder<T extends ByteBufHolder> extends ByteBufHolder {\n\n  @Override\n  T replace(ByteBuf content);\n\n  @Override\n  default T copy() {\n    return replace(content().copy());\n  }\n\n  // ...\n  \n  @Override\n  default int refCnt() {\n    return content().refCnt();\n  }\n  \n  // ...\n}", "author": "cgtz", "createdAt": "2020-02-12T05:57:48Z", "path": "ambry-api/src/main/java/com.github.ambry/network/BoundedNettyByteBufReceive.java", "diffHunk": "@@ -100,31 +106,87 @@ public long readFrom(ReadableByteChannel channel) throws IOException {\n   }\n \n   /**\n-   * Returns the payload as {@link ByteBuf}, at the same time release the current reference to this payload.\n-   * It's not safe to call this function multiple times.\n+   * The total size in bytes that needs to receive from the channel\n+   * It will be initialized only after header is read.\n+   * @return the size of the data in bytes to receive after reading header, otherwise return 0\n+   */\n+  public long sizeRead() {\n+    return sizeRead;\n+  }\n+\n+  /**\n+   * Returns the byte buffer received.\n    * @return\n    */\n+  public ByteBuf content() {\n+    return buffer;\n+  }\n+\n   @Override\n-  public ByteBuf getAndRelease() {\n-    if (buffer == null) {\n-      return null;\n+  public BoundedNettyByteBufReceive copy() {\n+    return replace(content().copy());\n+  }\n+\n+  @Override\n+  public BoundedNettyByteBufReceive duplicate() {\n+    return replace(content().duplicate());\n+  }\n+\n+  @Override\n+  public BoundedNettyByteBufReceive retainedDuplicate() {", "originalCommit": "1029456f79fe963617cbb1e4bb553d4efacf26b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "765be429f8ed63c4aad52647acbc73e293b05b48", "chunk": "diff --git a/ambry-api/src/main/java/com.github.ambry/network/BoundedNettyByteBufReceive.java b/ambry-api/src/main/java/com.github.ambry/network/BoundedNettyByteBufReceive.java\nindex f88a437d0..449c1622f 100644\n--- a/ambry-api/src/main/java/com.github.ambry/network/BoundedNettyByteBufReceive.java\n+++ b/ambry-api/src/main/java/com.github.ambry/network/BoundedNettyByteBufReceive.java\n\n@@ -122,71 +123,9 @@ public class BoundedNettyByteBufReceive implements ByteBufHolder {\n     return buffer;\n   }\n \n-  @Override\n-  public BoundedNettyByteBufReceive copy() {\n-    return replace(content().copy());\n-  }\n-\n-  @Override\n-  public BoundedNettyByteBufReceive duplicate() {\n-    return replace(content().duplicate());\n-  }\n-\n-  @Override\n-  public BoundedNettyByteBufReceive retainedDuplicate() {\n-    return replace(content().retainedDuplicate());\n-  }\n-\n   @Override\n   public BoundedNettyByteBufReceive replace(ByteBuf content) {\n     BoundedNettyByteBufReceive receive = new BoundedNettyByteBufReceive(content, sizeToRead);\n     return receive;\n   }\n-\n-  @Override\n-  public int refCnt() {\n-    return buffer.refCnt();\n-  }\n-\n-  @Override\n-  public BoundedNettyByteBufReceive retain() {\n-    buffer.retain();\n-    return this;\n-  }\n-\n-  @Override\n-  public BoundedNettyByteBufReceive retain(int increment) {\n-    buffer.retain(increment);\n-    return this;\n-  }\n-\n-  @Override\n-  public BoundedNettyByteBufReceive touch() {\n-    buffer.touch();\n-    return this;\n-  }\n-\n-  @Override\n-  public BoundedNettyByteBufReceive touch(Object hint) {\n-    buffer.touch(hint);\n-    return this;\n-  }\n-\n-  @Override\n-  public boolean release() {\n-    if (buffer != null) {\n-      return buffer.release();\n-    } else {\n-      return false;\n-    }\n-  }\n-\n-  @Override\n-  public boolean release(int decrement) {\n-    if (buffer != null) {\n-      return buffer.release(decrement);\n-    } else {\n-      return false;\n-    }\n-  }\n }\n"}}, {"oid": "16a6664650fbe05439deeb25d710173093f074e9", "url": "https://github.com/linkedin/ambry/commit/16a6664650fbe05439deeb25d710173093f074e9", "message": "Default to use netty bytebuf in network layer and remove getAndRelease method", "committedDate": "2020-02-12T17:55:22Z", "type": "commit"}, {"oid": "548815aa66fc8945581741a16a396c8718c4ad7d", "url": "https://github.com/linkedin/ambry/commit/548815aa66fc8945581741a16a396c8718c4ad7d", "message": "Remove BoundedReceive", "committedDate": "2020-02-12T17:55:22Z", "type": "commit"}, {"oid": "21a3c4fa12c46a44a253fe38399d03de01ae0b8b", "url": "https://github.com/linkedin/ambry/commit/21a3c4fa12c46a44a253fe38399d03de01ae0b8b", "message": "Fix tests", "committedDate": "2020-02-12T17:55:22Z", "type": "commit"}, {"oid": "a8764756eae58484dd1ea77026b1958d3277ec11", "url": "https://github.com/linkedin/ambry/commit/a8764756eae58484dd1ea77026b1958d3277ec11", "message": "Another test", "committedDate": "2020-02-12T17:55:22Z", "type": "commit"}, {"oid": "765be429f8ed63c4aad52647acbc73e293b05b48", "url": "https://github.com/linkedin/ambry/commit/765be429f8ed63c4aad52647acbc73e293b05b48", "message": "Comments", "committedDate": "2020-02-12T18:41:23Z", "type": "commit"}, {"oid": "765be429f8ed63c4aad52647acbc73e293b05b48", "url": "https://github.com/linkedin/ambry/commit/765be429f8ed63c4aad52647acbc73e293b05b48", "message": "Comments", "committedDate": "2020-02-12T18:41:23Z", "type": "forcePushed"}, {"oid": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41", "url": "https://github.com/linkedin/ambry/commit/cb614f600cd5e1c26ab70b44b88493c7a68d6b41", "message": "Remove unused imports", "committedDate": "2020-02-12T19:28:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2OTQ0NQ==", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378569445", "bodyText": "variable receive is redundant.", "author": "jsjtzyy", "createdAt": "2020-02-12T23:19:42Z", "path": "ambry-api/src/main/java/com.github.ambry/network/BoundedNettyByteBufReceive.java", "diffHunk": "@@ -99,32 +105,26 @@ public long readFrom(ReadableByteChannel channel) throws IOException {\n     return bytesRead;\n   }\n \n-  /**\n-   * Returns the payload as {@link ByteBuf}, at the same time release the current reference to this payload.\n-   * It's not safe to call this function multiple times.\n-   * @return\n-   */\n-  @Override\n-  public ByteBuf getAndRelease() {\n-    if (buffer == null) {\n-      return null;\n-    } else {\n-      try {\n-        return buffer.retainedDuplicate();\n-      } finally {\n-        buffer.release();\n-        buffer = null;\n-      }\n-    }\n-  }\n-\n   /**\n    * The total size in bytes that needs to receive from the channel\n    * It will be initialized only after header is read.\n    * @return the size of the data in bytes to receive after reading header, otherwise return 0\n    */\n-  @Override\n   public long sizeRead() {\n     return sizeRead;\n   }\n+\n+  /**\n+   * Returns the byte buffer received.\n+   * @return\n+   */\n+  public ByteBuf content() {\n+    return buffer;\n+  }\n+\n+  @Override\n+  public BoundedNettyByteBufReceive replace(ByteBuf content) {\n+    BoundedNettyByteBufReceive receive = new BoundedNettyByteBufReceive(content, sizeToRead);\n+    return receive;", "originalCommit": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25be8c825f7c5f004472f8fa9340e05aedc1f101", "chunk": "diff --git a/ambry-api/src/main/java/com.github.ambry/network/BoundedNettyByteBufReceive.java b/ambry-api/src/main/java/com.github.ambry/network/BoundedNettyByteBufReceive.java\nindex 9fa60d9e0..74d91534e 100644\n--- a/ambry-api/src/main/java/com.github.ambry/network/BoundedNettyByteBufReceive.java\n+++ b/ambry-api/src/main/java/com.github.ambry/network/BoundedNettyByteBufReceive.java\n\n@@ -114,17 +114,13 @@ public class BoundedNettyByteBufReceive extends AbstractByteBufHolder<BoundedNet\n     return sizeRead;\n   }\n \n-  /**\n-   * Returns the byte buffer received.\n-   * @return\n-   */\n+  @Override\n   public ByteBuf content() {\n     return buffer;\n   }\n \n   @Override\n   public BoundedNettyByteBufReceive replace(ByteBuf content) {\n-    BoundedNettyByteBufReceive receive = new BoundedNettyByteBufReceive(content, sizeToRead);\n-    return receive;\n+    return new BoundedNettyByteBufReceive(content, sizeToRead);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3MzU5MQ==", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378573591", "bodyText": "nit: complete the java doc", "author": "jsjtzyy", "createdAt": "2020-02-12T23:32:48Z", "path": "ambry-api/src/main/java/com.github.ambry/network/BoundedNettyByteBufReceive.java", "diffHunk": "@@ -99,32 +105,26 @@ public long readFrom(ReadableByteChannel channel) throws IOException {\n     return bytesRead;\n   }\n \n-  /**\n-   * Returns the payload as {@link ByteBuf}, at the same time release the current reference to this payload.\n-   * It's not safe to call this function multiple times.\n-   * @return\n-   */\n-  @Override\n-  public ByteBuf getAndRelease() {\n-    if (buffer == null) {\n-      return null;\n-    } else {\n-      try {\n-        return buffer.retainedDuplicate();\n-      } finally {\n-        buffer.release();\n-        buffer = null;\n-      }\n-    }\n-  }\n-\n   /**\n    * The total size in bytes that needs to receive from the channel\n    * It will be initialized only after header is read.\n    * @return the size of the data in bytes to receive after reading header, otherwise return 0\n    */\n-  @Override\n   public long sizeRead() {\n     return sizeRead;\n   }\n+\n+  /**\n+   * Returns the byte buffer received.\n+   * @return", "originalCommit": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25be8c825f7c5f004472f8fa9340e05aedc1f101", "chunk": "diff --git a/ambry-api/src/main/java/com.github.ambry/network/BoundedNettyByteBufReceive.java b/ambry-api/src/main/java/com.github.ambry/network/BoundedNettyByteBufReceive.java\nindex 9fa60d9e0..74d91534e 100644\n--- a/ambry-api/src/main/java/com.github.ambry/network/BoundedNettyByteBufReceive.java\n+++ b/ambry-api/src/main/java/com.github.ambry/network/BoundedNettyByteBufReceive.java\n\n@@ -114,17 +114,13 @@ public class BoundedNettyByteBufReceive extends AbstractByteBufHolder<BoundedNet\n     return sizeRead;\n   }\n \n-  /**\n-   * Returns the byte buffer received.\n-   * @return\n-   */\n+  @Override\n   public ByteBuf content() {\n     return buffer;\n   }\n \n   @Override\n   public BoundedNettyByteBufReceive replace(ByteBuf content) {\n-    BoundedNettyByteBufReceive receive = new BoundedNettyByteBufReceive(content, sizeToRead);\n-    return receive;\n+    return new BoundedNettyByteBufReceive(content, sizeToRead);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5MDE5Ng==", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378590196", "bodyText": "info is redundant", "author": "jsjtzyy", "createdAt": "2020-02-13T00:30:21Z", "path": "ambry-api/src/main/java/com.github.ambry/network/ResponseInfo.java", "diffHunk": "@@ -99,7 +77,18 @@ public DataNodeId getDataNode() {\n \n   @Override\n   public String toString() {\n-    return \"ResponseInfo{\" + \"requestInfo=\" + requestInfo + \", error=\" + error + \", response=\" + response\n-        + \", dataNode=\" + dataNode + '}';\n+    return \"ResponseInfo{\" + \"requestInfo=\" + requestInfo + \", error=\" + error + \", response=\" + content + \", dataNode=\"\n+        + dataNode + '}';\n+  }\n+\n+  @Override\n+  public ByteBuf content() {\n+    return content;\n+  }\n+\n+  @Override\n+  public ResponseInfo replace(ByteBuf content) {\n+    ResponseInfo info = new ResponseInfo(requestInfo, error, content, dataNode);\n+    return info;", "originalCommit": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25be8c825f7c5f004472f8fa9340e05aedc1f101", "chunk": "diff --git a/ambry-api/src/main/java/com.github.ambry/network/ResponseInfo.java b/ambry-api/src/main/java/com.github.ambry/network/ResponseInfo.java\nindex e96bc624b..4bdb18e9c 100644\n--- a/ambry-api/src/main/java/com.github.ambry/network/ResponseInfo.java\n+++ b/ambry-api/src/main/java/com.github.ambry/network/ResponseInfo.java\n\n@@ -77,7 +77,7 @@ public class ResponseInfo extends AbstractByteBufHolder<ResponseInfo> {\n \n   @Override\n   public String toString() {\n-    return \"ResponseInfo{\" + \"requestInfo=\" + requestInfo + \", error=\" + error + \", response=\" + content + \", dataNode=\"\n+    return \"ResponseInfo{requestInfo=\" + requestInfo + \", error=\" + error + \", response=\" + content + \", dataNode=\"\n         + dataNode + '}';\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5MDYyNQ==", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378590625", "bodyText": "minor: combine \"ResponseInfo{\" + \"requestInfo=\" to a single string", "author": "jsjtzyy", "createdAt": "2020-02-13T00:31:41Z", "path": "ambry-api/src/main/java/com.github.ambry/network/ResponseInfo.java", "diffHunk": "@@ -99,7 +77,18 @@ public DataNodeId getDataNode() {\n \n   @Override\n   public String toString() {\n-    return \"ResponseInfo{\" + \"requestInfo=\" + requestInfo + \", error=\" + error + \", response=\" + response\n-        + \", dataNode=\" + dataNode + '}';\n+    return \"ResponseInfo{\" + \"requestInfo=\" + requestInfo + \", error=\" + error + \", response=\" + content + \", dataNode=\"", "originalCommit": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25be8c825f7c5f004472f8fa9340e05aedc1f101", "chunk": "diff --git a/ambry-api/src/main/java/com.github.ambry/network/ResponseInfo.java b/ambry-api/src/main/java/com.github.ambry/network/ResponseInfo.java\nindex e96bc624b..4bdb18e9c 100644\n--- a/ambry-api/src/main/java/com.github.ambry/network/ResponseInfo.java\n+++ b/ambry-api/src/main/java/com.github.ambry/network/ResponseInfo.java\n\n@@ -77,7 +77,7 @@ public class ResponseInfo extends AbstractByteBufHolder<ResponseInfo> {\n \n   @Override\n   public String toString() {\n-    return \"ResponseInfo{\" + \"requestInfo=\" + requestInfo + \", error=\" + error + \", response=\" + content + \", dataNode=\"\n+    return \"ResponseInfo{requestInfo=\" + requestInfo + \", error=\" + error + \", response=\" + content + \", dataNode=\"\n         + dataNode + '}';\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5ODAzNQ==", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378598035", "bodyText": "same here", "author": "jsjtzyy", "createdAt": "2020-02-13T00:55:39Z", "path": "ambry-messageformat/src/main/java/com.github.ambry.messageformat/BlobData.java", "diffHunk": "@@ -68,40 +51,14 @@ public long getSize() {\n     return size;\n   }\n \n-  /**\n-   * @return the {@link ByteBufferInputStream} containing the blob content.\n-   */\n-  @Deprecated\n-  public ByteBufferInputStream getStream() {\n-    if (stream != null) {\n-      return stream;\n-    }\n-    // The blob content is passed as a ByteBuf since the stream is nulle\n-    if (byteBuf == null) {\n-      return null;\n-    }\n-    ByteBuffer temp = ByteBuffer.allocate(byteBuf.readableBytes());\n-    byteBuf.readBytes(temp);\n-    byteBuf.release();\n-    byteBuf = null;\n-    temp.flip();\n-    stream = new ByteBufferInputStream(temp);\n-    return stream;\n+  @Override\n+  public ByteBuf content() {\n+    return content;\n   }\n \n-  /**\n-   * Return the netty {@link ByteBuf} and then transfer the ownership to the caller. It's not safe\n-   * to call this method more than once.\n-   */\n-  public ByteBuf getAndRelease() {\n-    if (byteBuf == null) {\n-      return null;\n-    }\n-    try {\n-      return byteBuf.retainedDuplicate();\n-    } finally {\n-      byteBuf.release();\n-      byteBuf = null;\n-    }\n+  @Override\n+  public BlobData replace(ByteBuf content) {\n+    BlobData data = new BlobData(blobType, size, content);\n+    return data;", "originalCommit": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25be8c825f7c5f004472f8fa9340e05aedc1f101", "chunk": "diff --git a/ambry-messageformat/src/main/java/com.github.ambry.messageformat/BlobData.java b/ambry-messageformat/src/main/java/com.github.ambry.messageformat/BlobData.java\nindex 3d8f4ac48..bae2404ad 100644\n--- a/ambry-messageformat/src/main/java/com.github.ambry.messageformat/BlobData.java\n+++ b/ambry-messageformat/src/main/java/com.github.ambry.messageformat/BlobData.java\n\n@@ -58,7 +58,6 @@ public class BlobData extends AbstractByteBufHolder<BlobData> {\n \n   @Override\n   public BlobData replace(ByteBuf content) {\n-    BlobData data = new BlobData(blobType, size, content);\n-    return data;\n+    return new BlobData(blobType, size, content);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYxNzI1OA==", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378617258", "bodyText": "minor: update java doc", "author": "jsjtzyy", "createdAt": "2020-02-13T02:13:02Z", "path": "ambry-network/src/main/java/com.github.ambry.network/LocalRequestResponseChannel.java", "diffHunk": "@@ -121,14 +122,13 @@ public void shutdown() {\n    * Utility to extract a byte buffer from a {@link Send} object, skipping the size header.\n    * @param payload the payload whose bytes we want.\n    */\n-  static ByteBuffer byteBufferFromPayload(Send payload) throws IOException {\n+  static ByteBuf byteBufFromPayload(Send payload) throws IOException {", "originalCommit": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25be8c825f7c5f004472f8fa9340e05aedc1f101", "chunk": "diff --git a/ambry-network/src/main/java/com.github.ambry.network/LocalRequestResponseChannel.java b/ambry-network/src/main/java/com.github.ambry.network/LocalRequestResponseChannel.java\nindex 8e29f6732..01ce94694 100644\n--- a/ambry-network/src/main/java/com.github.ambry.network/LocalRequestResponseChannel.java\n+++ b/ambry-network/src/main/java/com.github.ambry.network/LocalRequestResponseChannel.java\n\n@@ -119,7 +119,7 @@ public class LocalRequestResponseChannel implements RequestResponseChannel {\n   }\n \n   /**\n-   * Utility to extract a byte buffer from a {@link Send} object, skipping the size header.\n+   * Utility to extract a {@link ByteBuf} from a {@link Send} object, skipping the size header.\n    * @param payload the payload whose bytes we want.\n    */\n   static ByteBuf byteBufFromPayload(Send payload) throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYxNzYzNA==", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378617634", "bodyText": "same here", "author": "jsjtzyy", "createdAt": "2020-02-13T02:14:32Z", "path": "ambry-network/src/main/java/com.github.ambry.network/SocketRequestResponseChannel.java", "diffHunk": "@@ -53,21 +54,24 @@ public long getStartTimeInMs() {\n     return startTimeInMs;\n   }\n \n-  @Override\n-  public void release() {\n-    if (buffer != null) {\n-      ReferenceCountUtil.release(buffer);\n-      buffer = null;\n-    }\n-  }\n-\n   public int getProcessor() {\n     return processor;\n   }\n \n   public String getConnectionId() {\n     return connectionId;\n   }\n+\n+  @Override\n+  public ByteBuf content() {\n+    return content;\n+  }\n+\n+  @Override\n+  public SocketServerRequest replace(ByteBuf content) {\n+    SocketServerRequest request = new SocketServerRequest(getProcessor(), getConnectionId(), content);\n+    return request;", "originalCommit": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25be8c825f7c5f004472f8fa9340e05aedc1f101", "chunk": "diff --git a/ambry-network/src/main/java/com.github.ambry.network/SocketRequestResponseChannel.java b/ambry-network/src/main/java/com.github.ambry.network/SocketRequestResponseChannel.java\nindex 51ae9abbc..5029d4192 100644\n--- a/ambry-network/src/main/java/com.github.ambry.network/SocketRequestResponseChannel.java\n+++ b/ambry-network/src/main/java/com.github.ambry.network/SocketRequestResponseChannel.java\n\n@@ -69,8 +69,7 @@ class SocketServerRequest extends AbstractByteBufHolder<SocketServerRequest> imp\n \n   @Override\n   public SocketServerRequest replace(ByteBuf content) {\n-    SocketServerRequest request = new SocketServerRequest(getProcessor(), getConnectionId(), content);\n-    return request;\n+    return new SocketServerRequest(getProcessor(), getConnectionId(), content);\n   }\n }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYxODM4OQ==", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378618389", "bodyText": "who is supposed to release the buffer?", "author": "jsjtzyy", "createdAt": "2020-02-13T02:17:57Z", "path": "ambry-network/src/main/java/com.github.ambry.network/SocketServer.java", "diffHunk": "@@ -419,9 +420,8 @@ public void run() {\n         List<NetworkReceive> completedReceives = selector.completedReceives();\n         for (NetworkReceive networkReceive : completedReceives) {\n           String connectionId = networkReceive.getConnectionId();\n-          Object buffer = networkReceive.getReceivedBytes().getAndRelease();\n-          SocketServerRequest req = new SocketServerRequest(id, connectionId, buffer,\n-              Utils.createDataInputStreamFromBuffer(buffer, networkConfig.networkPutRequestShareMemory));\n+          ByteBuf buffer = networkReceive.getReceivedBytes().content();\n+          SocketServerRequest req = new SocketServerRequest(id, connectionId, buffer);", "originalCommit": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk2ODQ1Mw==", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378968453", "bodyText": "in the RequestHandler, we have a for loop to get the request out and after dealing with the request, we release it.", "author": "justinlin-linkedin", "createdAt": "2020-02-13T16:22:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYxODM4OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYxODkxMw==", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378618913", "bodyText": "did we release the payload?", "author": "jsjtzyy", "createdAt": "2020-02-13T02:20:10Z", "path": "ambry-network/src/test/java/com.github.ambry.network/SSLSelectorTest.java", "diffHunk": "@@ -212,11 +212,10 @@ public void testNormalOperation() throws Exception {\n \n       // handle any responses we may have gotten\n       for (NetworkReceive receive : selector.completedReceives()) {\n-        ByteBuffer payload = (ByteBuffer) (receive.getReceivedBytes().getAndRelease());\n+        ByteBuf payload = receive.getReceivedBytes().content();", "originalCommit": "cb614f600cd5e1c26ab70b44b88493c7a68d6b41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk2ODU3NQ==", "url": "https://github.com/linkedin/ambry/pull/1375#discussion_r378968575", "bodyText": "good catch. updated", "author": "justinlin-linkedin", "createdAt": "2020-02-13T16:22:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYxODkxMw=="}], "type": "inlineReview", "revised_code": {"commit": "25be8c825f7c5f004472f8fa9340e05aedc1f101", "chunk": "diff --git a/ambry-network/src/test/java/com.github.ambry.network/SSLSelectorTest.java b/ambry-network/src/test/java/com.github.ambry.network/SSLSelectorTest.java\nindex 350215fed..dac301c1d 100644\n--- a/ambry-network/src/test/java/com.github.ambry.network/SSLSelectorTest.java\n+++ b/ambry-network/src/test/java/com.github.ambry.network/SSLSelectorTest.java\n\n@@ -219,6 +232,7 @@ public class SSLSelectorTest {\n         assertTrue(\"Received connectionId is as expected \", connectionIds.contains(receive.getConnectionId()));\n         assertEquals(\"Check the request counter\", 0, Integer.parseInt(pieces[1]));\n         responseCount++;\n+        receive.getReceivedBytes().release();\n       }\n \n       // prepare new sends for the next round\n"}}, {"oid": "25be8c825f7c5f004472f8fa9340e05aedc1f101", "url": "https://github.com/linkedin/ambry/commit/25be8c825f7c5f004472f8fa9340e05aedc1f101", "message": "Comments", "committedDate": "2020-02-13T16:21:13Z", "type": "commit"}]}