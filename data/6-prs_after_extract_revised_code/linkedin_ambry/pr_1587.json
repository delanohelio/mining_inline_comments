{"pr_number": 1587, "pr_title": "Use ByteBuf in decrypt job", "pr_createdAt": "2020-07-13T19:56:21Z", "pr_url": "https://github.com/linkedin/ambry/pull/1587", "timeline": [{"oid": "175f08db338b470ade6416d9863effb6c3eae55c", "url": "https://github.com/linkedin/ambry/commit/175f08db338b470ade6416d9863effb6c3eae55c", "message": "Use ByteBuf in decrypt job", "committedDate": "2020-07-13T23:56:25Z", "type": "forcePushed"}, {"oid": "7258ab5446a02ae63519e8d1eea26448c5602e6a", "url": "https://github.com/linkedin/ambry/commit/7258ab5446a02ae63519e8d1eea26448c5602e6a", "message": "Fix memory leak", "committedDate": "2020-07-17T21:10:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY3OTUyNw==", "url": "https://github.com/linkedin/ambry/pull/1587#discussion_r456679527", "bodyText": "No longer valid.", "author": "zzmao", "createdAt": "2020-07-17T21:20:18Z", "path": "ambry-router/src/main/java/com/github/ambry/router/GCMCryptoService.java", "diffHunk": "@@ -123,33 +125,32 @@ public ByteBuf encrypt(ByteBuf toEncrypt, SecretKeySpec key, byte[] iv) throws G\n       int outputSize = encrypter.getOutputSize(toEncrypt.readableBytes());\n \n       // stick with heap memory for now so to compare with the java.nio.ByteBuffer.", "originalCommit": "bbb4160693b4f525181f31587cba105911e83c61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "149f61ecb1282cfc1008e6017c8c21dc4720fa6c", "chunk": "diff --git a/ambry-router/src/main/java/com/github/ambry/router/GCMCryptoService.java b/ambry-router/src/main/java/com/github/ambry/router/GCMCryptoService.java\nindex 80dcddd91..4eb2c8291 100644\n--- a/ambry-router/src/main/java/com/github/ambry/router/GCMCryptoService.java\n+++ b/ambry-router/src/main/java/com/github/ambry/router/GCMCryptoService.java\n\n@@ -124,7 +124,6 @@ public class GCMCryptoService implements CryptoService<SecretKeySpec> {\n       encrypter.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv));\n       int outputSize = encrypter.getOutputSize(toEncrypt.readableBytes());\n \n-      // stick with heap memory for now so to compare with the java.nio.ByteBuffer.\n       encryptedContent = PooledByteBufAllocator.DEFAULT.ioBuffer(IVRecord_Format_V1.getIVRecordSize(iv) + outputSize);\n       IVRecord_Format_V1.serializeIVRecord(encryptedContent, iv);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NjY1NQ==", "url": "https://github.com/linkedin/ambry/pull/1587#discussion_r458376655", "bodyText": "i'm a little worried about calling processCallbacks from a different thread in a callback. I don't think it was designed to be called from non event loop threads. Will take a deeper look to see if there's any alternative (or if it is already thread safe)", "author": "cgtz", "createdAt": "2020-07-21T20:44:56Z", "path": "ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java", "diffHunk": "@@ -1353,12 +1356,19 @@ private void handleMetadataBlob(BlobData blobData, byte[] userMetadata, ByteBuff\n                 new DecryptJob(blobId, encryptionKey, null, ByteBuffer.wrap(userMetadata), cryptoService, kms,\n                     decryptJobMetricsTracker, (DecryptJob.DecryptJobResult result, Exception exception) -> {\n                   routerMetrics.decryptTimeMs.update(System.currentTimeMillis() - startTimeMs);\n-                  decryptJobMetricsTracker.onJobCallbackProcessingStart();\n-                  logger.trace(\"Handling decrypt job call back for Metadata chunk {} to set decrypt callback results\",\n-                      blobId);\n-                  decryptCallbackResultInfo.setResultAndException(result, exception);\n-                  routerCallback.onPollReady();\n-                  decryptJobMetricsTracker.onJobCallbackProcessingComplete();\n+                  if (isOperationComplete() || operationException.get() != null) {\n+                    if (result != null && result.getDecryptedBlobContent() != null) {\n+                      result.getDecryptedBlobContent().release();\n+                    }\n+                  } else {\n+                    decryptJobMetricsTracker.onJobCallbackProcessingStart();\n+                    logger.trace(\"Handling decrypt job call back for Metadata chunk {} to set decrypt callback results\",\n+                        blobId);\n+                    decryptCallbackResultInfo.setResultAndException(result, exception);\n+                    routerCallback.onPollReady();\n+                    decryptJobMetricsTracker.onJobCallbackProcessingComplete();\n+                    processCallbacks();", "originalCommit": "8b352affefcace6a553a002fac31ff1e7a4a9d74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc4MzM2MA==", "url": "https://github.com/linkedin/ambry/pull/1587#discussion_r459783360", "bodyText": "you are right, the progresstracker and someother object is not thread safe and should probably only be used in event loop thread. I will update it.", "author": "justinlin-linkedin", "createdAt": "2020-07-23T23:30:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NjY1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e435c985bb62d11c6e5ad8c48736e5608b6764a7", "chunk": "diff --git a/ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java b/ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java\nindex 98f1a8173..5fd4ebbfe 100644\n--- a/ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java\n+++ b/ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java\n\n@@ -1356,19 +1361,12 @@ class GetBlobOperation extends GetOperation {\n                 new DecryptJob(blobId, encryptionKey, null, ByteBuffer.wrap(userMetadata), cryptoService, kms,\n                     decryptJobMetricsTracker, (DecryptJob.DecryptJobResult result, Exception exception) -> {\n                   routerMetrics.decryptTimeMs.update(System.currentTimeMillis() - startTimeMs);\n-                  if (isOperationComplete() || operationException.get() != null) {\n-                    if (result != null && result.getDecryptedBlobContent() != null) {\n-                      result.getDecryptedBlobContent().release();\n-                    }\n-                  } else {\n-                    decryptJobMetricsTracker.onJobCallbackProcessingStart();\n-                    logger.trace(\"Handling decrypt job call back for Metadata chunk {} to set decrypt callback results\",\n-                        blobId);\n-                    decryptCallbackResultInfo.setResultAndException(result, exception);\n-                    routerCallback.onPollReady();\n-                    decryptJobMetricsTracker.onJobCallbackProcessingComplete();\n-                    processCallbacks();\n-                  }\n+                  decryptJobMetricsTracker.onJobCallbackProcessingStart();\n+                  logger.trace(\"Handling decrypt job call back for Metadata chunk {} to set decrypt callback results\",\n+                      blobId);\n+                  decryptCallbackResultInfo.setResultAndException(result, exception);\n+                  routerCallback.onPollReady();\n+                  decryptJobMetricsTracker.onJobCallbackProcessingComplete();\n                 }));\n           }\n         }\n"}}, {"oid": "149f61ecb1282cfc1008e6017c8c21dc4720fa6c", "url": "https://github.com/linkedin/ambry/commit/149f61ecb1282cfc1008e6017c8c21dc4720fa6c", "message": "Make it thread safe", "committedDate": "2020-08-19T21:06:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxMjc3OQ==", "url": "https://github.com/linkedin/ambry/pull/1587#discussion_r477612779", "bodyText": "Probably the onPollReady call should come after processCallbacks() since that call also changes state that requires further processing on the event loop.", "author": "cgtz", "createdAt": "2020-08-26T21:57:55Z", "path": "ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java", "diffHunk": "@@ -1354,12 +1357,19 @@ private void handleMetadataBlob(BlobData blobData, byte[] userMetadata, ByteBuff\n                 new DecryptJob(blobId, encryptionKey, null, ByteBuffer.wrap(userMetadata), cryptoService, kms,\n                     decryptJobMetricsTracker, (DecryptJob.DecryptJobResult result, Exception exception) -> {\n                   routerMetrics.decryptTimeMs.update(System.currentTimeMillis() - startTimeMs);\n-                  decryptJobMetricsTracker.onJobCallbackProcessingStart();\n-                  logger.trace(\"Handling decrypt job call back for Metadata chunk {} to set decrypt callback results\",\n-                      blobId);\n-                  decryptCallbackResultInfo.setResultAndException(result, exception);\n-                  routerCallback.onPollReady();\n-                  decryptJobMetricsTracker.onJobCallbackProcessingComplete();\n+                  if (isOperationComplete() || operationException.get() != null) {\n+                    if (result != null && result.getDecryptedBlobContent() != null) {\n+                      result.getDecryptedBlobContent().release();\n+                    }\n+                  } else {\n+                    decryptJobMetricsTracker.onJobCallbackProcessingStart();\n+                    logger.trace(\"Handling decrypt job call back for Metadata chunk {} to set decrypt callback results\",\n+                        blobId);\n+                    decryptCallbackResultInfo.setResultAndException(result, exception);\n+                    routerCallback.onPollReady();", "originalCommit": "149f61ecb1282cfc1008e6017c8c21dc4720fa6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e435c985bb62d11c6e5ad8c48736e5608b6764a7", "chunk": "diff --git a/ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java b/ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java\nindex 2d35f15e4..5fd4ebbfe 100644\n--- a/ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java\n+++ b/ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java\n\n@@ -1357,19 +1361,12 @@ class GetBlobOperation extends GetOperation {\n                 new DecryptJob(blobId, encryptionKey, null, ByteBuffer.wrap(userMetadata), cryptoService, kms,\n                     decryptJobMetricsTracker, (DecryptJob.DecryptJobResult result, Exception exception) -> {\n                   routerMetrics.decryptTimeMs.update(System.currentTimeMillis() - startTimeMs);\n-                  if (isOperationComplete() || operationException.get() != null) {\n-                    if (result != null && result.getDecryptedBlobContent() != null) {\n-                      result.getDecryptedBlobContent().release();\n-                    }\n-                  } else {\n-                    decryptJobMetricsTracker.onJobCallbackProcessingStart();\n-                    logger.trace(\"Handling decrypt job call back for Metadata chunk {} to set decrypt callback results\",\n-                        blobId);\n-                    decryptCallbackResultInfo.setResultAndException(result, exception);\n-                    routerCallback.onPollReady();\n-                    decryptJobMetricsTracker.onJobCallbackProcessingComplete();\n-                    processCallbacks();\n-                  }\n+                  decryptJobMetricsTracker.onJobCallbackProcessingStart();\n+                  logger.trace(\"Handling decrypt job call back for Metadata chunk {} to set decrypt callback results\",\n+                      blobId);\n+                  decryptCallbackResultInfo.setResultAndException(result, exception);\n+                  routerCallback.onPollReady();\n+                  decryptJobMetricsTracker.onJobCallbackProcessingComplete();\n                 }));\n           }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxMzQ0NA==", "url": "https://github.com/linkedin/ambry/pull/1587#discussion_r477613444", "bodyText": "same comment about onPollReady", "author": "cgtz", "createdAt": "2020-08-26T21:59:26Z", "path": "ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java", "diffHunk": "@@ -892,9 +888,16 @@ protected boolean maybeLaunchCryptoJob(ByteBuf dataBuf, byte[] userMetadata, Byt\n               routerMetrics.decryptTimeMs.update(System.currentTimeMillis() - startTimeMs);\n               decryptJobMetricsTracker.onJobCallbackProcessingStart();\n               logger.trace(\"Handling decrypt job call back for blob {} to set decrypt callback results\", targetBlobId);\n+              if (isOperationComplete() || operationException.get() != null) {\n+                if (exception == null && result.getDecryptedBlobContent() != null) {\n+                  result.getDecryptedBlobContent().release();\n+                }\n+                return;\n+              }\n               decryptCallbackResultInfo.setResultAndException(result, exception);\n               routerCallback.onPollReady();", "originalCommit": "149f61ecb1282cfc1008e6017c8c21dc4720fa6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e435c985bb62d11c6e5ad8c48736e5608b6764a7", "chunk": "diff --git a/ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java b/ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java\nindex 2d35f15e4..5fd4ebbfe 100644\n--- a/ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java\n+++ b/ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java\n\n@@ -888,7 +892,7 @@ class GetBlobOperation extends GetOperation {\n               routerMetrics.decryptTimeMs.update(System.currentTimeMillis() - startTimeMs);\n               decryptJobMetricsTracker.onJobCallbackProcessingStart();\n               logger.trace(\"Handling decrypt job call back for blob {} to set decrypt callback results\", targetBlobId);\n-              if (isOperationComplete() || operationException.get() != null) {\n+              if (operationCompleted) {\n                 if (exception == null && result.getDecryptedBlobContent() != null) {\n                   result.getDecryptedBlobContent().release();\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxNDYxMg==", "url": "https://github.com/linkedin/ambry/pull/1587#discussion_r477614612", "bodyText": "Apologies if you already briefed me on this, but what was the original reason for moving the process callback logic to the callback? Does this prevent a specific leak situation?", "author": "cgtz", "createdAt": "2020-08-26T22:02:34Z", "path": "ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java", "diffHunk": "@@ -1354,12 +1357,19 @@ private void handleMetadataBlob(BlobData blobData, byte[] userMetadata, ByteBuff\n                 new DecryptJob(blobId, encryptionKey, null, ByteBuffer.wrap(userMetadata), cryptoService, kms,\n                     decryptJobMetricsTracker, (DecryptJob.DecryptJobResult result, Exception exception) -> {\n                   routerMetrics.decryptTimeMs.update(System.currentTimeMillis() - startTimeMs);\n-                  decryptJobMetricsTracker.onJobCallbackProcessingStart();\n-                  logger.trace(\"Handling decrypt job call back for Metadata chunk {} to set decrypt callback results\",\n-                      blobId);\n-                  decryptCallbackResultInfo.setResultAndException(result, exception);\n-                  routerCallback.onPollReady();\n-                  decryptJobMetricsTracker.onJobCallbackProcessingComplete();\n+                  if (isOperationComplete() || operationException.get() != null) {\n+                    if (result != null && result.getDecryptedBlobContent() != null) {\n+                      result.getDecryptedBlobContent().release();\n+                    }\n+                  } else {\n+                    decryptJobMetricsTracker.onJobCallbackProcessingStart();\n+                    logger.trace(\"Handling decrypt job call back for Metadata chunk {} to set decrypt callback results\",\n+                        blobId);\n+                    decryptCallbackResultInfo.setResultAndException(result, exception);\n+                    routerCallback.onPollReady();\n+                    decryptJobMetricsTracker.onJobCallbackProcessingComplete();\n+                    processCallbacks();", "originalCommit": "149f61ecb1282cfc1008e6017c8c21dc4720fa6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e435c985bb62d11c6e5ad8c48736e5608b6764a7", "chunk": "diff --git a/ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java b/ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java\nindex 2d35f15e4..5fd4ebbfe 100644\n--- a/ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java\n+++ b/ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java\n\n@@ -1357,19 +1361,12 @@ class GetBlobOperation extends GetOperation {\n                 new DecryptJob(blobId, encryptionKey, null, ByteBuffer.wrap(userMetadata), cryptoService, kms,\n                     decryptJobMetricsTracker, (DecryptJob.DecryptJobResult result, Exception exception) -> {\n                   routerMetrics.decryptTimeMs.update(System.currentTimeMillis() - startTimeMs);\n-                  if (isOperationComplete() || operationException.get() != null) {\n-                    if (result != null && result.getDecryptedBlobContent() != null) {\n-                      result.getDecryptedBlobContent().release();\n-                    }\n-                  } else {\n-                    decryptJobMetricsTracker.onJobCallbackProcessingStart();\n-                    logger.trace(\"Handling decrypt job call back for Metadata chunk {} to set decrypt callback results\",\n-                        blobId);\n-                    decryptCallbackResultInfo.setResultAndException(result, exception);\n-                    routerCallback.onPollReady();\n-                    decryptJobMetricsTracker.onJobCallbackProcessingComplete();\n-                    processCallbacks();\n-                  }\n+                  decryptJobMetricsTracker.onJobCallbackProcessingStart();\n+                  logger.trace(\"Handling decrypt job call back for Metadata chunk {} to set decrypt callback results\",\n+                      blobId);\n+                  decryptCallbackResultInfo.setResultAndException(result, exception);\n+                  routerCallback.onPollReady();\n+                  decryptJobMetricsTracker.onJobCallbackProcessingComplete();\n                 }));\n           }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxNTg1NQ==", "url": "https://github.com/linkedin/ambry/pull/1587#discussion_r477615855", "bodyText": "For 100% read-after-write across thread guarantee, the variables set in initializeDataChunks(), blobInfo, etc. should probably be volatile (possible I am misinterpreting the documentation). However, I suspect that we have a few other cases where this was not done which have not caused (discoverable) issues in practice :P\nhttps://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.4.4", "author": "cgtz", "createdAt": "2020-08-26T22:05:39Z", "path": "ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java", "diffHunk": "@@ -1139,49 +1142,49 @@ MessageFormatFlags getOperationFlag() {\n     }\n \n     @Override\n-    protected void maybeProcessCallbacks() {\n-      if (progressTracker.isCryptoJobRequired() && decryptCallbackResultInfo.decryptJobComplete) {\n-        decryptJobMetricsTracker.onJobResultProcessingStart();\n-        if (decryptCallbackResultInfo.exception != null) {\n-          decryptJobMetricsTracker.incrementOperationError();\n-          logger.trace(\"Decryption job callback invoked with exception for {} blob {} \", blobType, blobId,\n-              decryptCallbackResultInfo.exception);\n-          setOperationException(\n-              new RouterException(\"Exception thrown on decrypting content for \" + blobType + \" blob \" + blobId,\n-                  decryptCallbackResultInfo.exception, RouterErrorCode.UnexpectedInternalError));\n-          progressTracker.setCryptoJobFailed();\n+    protected void processCallbacks() {\n+      decryptJobMetricsTracker.onJobResultProcessingStart();\n+      if (decryptCallbackResultInfo.exception != null) {\n+        decryptJobMetricsTracker.incrementOperationError();\n+        logger.trace(\"Decryption job callback invoked with exception for {} blob {} \", blobType, blobId,\n+            decryptCallbackResultInfo.exception);\n+        setOperationException(\n+            new RouterException(\"Exception thrown on decrypting content for \" + blobType + \" blob \" + blobId,\n+                decryptCallbackResultInfo.exception, RouterErrorCode.UnexpectedInternalError));\n+        progressTracker.setCryptoJobFailed();\n+      } else {\n+        // in case of Metadata blob, only user-metadata needs decryption if the blob is encrypted\n+        if (blobType == BlobType.MetadataBlob) {\n+          logger.trace(\"Processing stored decryption callback result for Metadata blob {}\", blobId);\n+          initializeDataChunks();", "originalCommit": "149f61ecb1282cfc1008e6017c8c21dc4720fa6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e435c985bb62d11c6e5ad8c48736e5608b6764a7", "chunk": "diff --git a/ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java b/ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java\nindex 2d35f15e4..5fd4ebbfe 100644\n--- a/ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java\n+++ b/ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java\n\n@@ -1142,49 +1145,50 @@ class GetBlobOperation extends GetOperation {\n     }\n \n     @Override\n-    protected void processCallbacks() {\n-      decryptJobMetricsTracker.onJobResultProcessingStart();\n-      if (decryptCallbackResultInfo.exception != null) {\n-        decryptJobMetricsTracker.incrementOperationError();\n-        logger.trace(\"Decryption job callback invoked with exception for {} blob {} \", blobType, blobId,\n-            decryptCallbackResultInfo.exception);\n-        setOperationException(\n-            new RouterException(\"Exception thrown on decrypting content for \" + blobType + \" blob \" + blobId,\n-                decryptCallbackResultInfo.exception, RouterErrorCode.UnexpectedInternalError));\n-        progressTracker.setCryptoJobFailed();\n-      } else {\n-        // in case of Metadata blob, only user-metadata needs decryption if the blob is encrypted\n-        if (blobType == BlobType.MetadataBlob) {\n-          logger.trace(\"Processing stored decryption callback result for Metadata blob {}\", blobId);\n-          initializeDataChunks();\n-          blobInfo =\n-              new BlobInfo(serverBlobProperties, decryptCallbackResultInfo.result.getDecryptedUserMetadata().array(),\n-                  lifeVersion);\n-          progressTracker.setCryptoJobSuccess();\n-          logger.trace(\"BlobContent available to process for Metadata blob {}\", blobId);\n+    protected void maybeProcessCallbacks() {\n+      if (progressTracker.isCryptoJobRequired() && decryptCallbackResultInfo.decryptJobComplete) {\n+        decryptJobMetricsTracker.onJobResultProcessingStart();\n+        if (decryptCallbackResultInfo.exception != null) {\n+          decryptJobMetricsTracker.incrementOperationError();\n+          logger.trace(\"Decryption job callback invoked with exception for {} blob {} \", blobType, blobId,\n+              decryptCallbackResultInfo.exception);\n+          setOperationException(\n+              new RouterException(\"Exception thrown on decrypting content for \" + blobType + \" blob \" + blobId,\n+                  decryptCallbackResultInfo.exception, RouterErrorCode.UnexpectedInternalError));\n+          progressTracker.setCryptoJobFailed();\n         } else {\n-          logger.trace(\"Processing stored decryption callback result for simple blob {}\", blobId);\n-          // In case of simple blobs, user-metadata may or may not be passed into decryption job based on GetOptions flag.\n-          // Only in-case of GetBlobInfo and GetBlobAll, user-metadata is required to be decrypted\n-          if (decryptCallbackResultInfo.result.getDecryptedUserMetadata() != null) {\n+          // in case of Metadata blob, only user-metadata needs decryption if the blob is encrypted\n+          if (blobType == BlobType.MetadataBlob) {\n+            logger.trace(\"Processing stored decryption callback result for Metadata blob {}\", blobId);\n+            initializeDataChunks();\n             blobInfo =\n                 new BlobInfo(serverBlobProperties, decryptCallbackResultInfo.result.getDecryptedUserMetadata().array(),\n                     lifeVersion);\n-          }\n-          ByteBuf decryptedBlobContent = decryptCallbackResultInfo.result.getDecryptedBlobContent();\n-          totalSize = decryptedBlobContent.readableBytes();\n-          if (!resolveRange(totalSize)) {\n-            chunkIndexToBuf.put(0, filterChunkToRange(decryptedBlobContent));\n-            numChunksRetrieved.set(1);\n             progressTracker.setCryptoJobSuccess();\n-            logger.trace(\"BlobContent available to process for simple blob {}\", blobId);\n+            logger.trace(\"BlobContent available to process for Metadata blob {}\", blobId);\n           } else {\n-            decryptedBlobContent.release();\n-            progressTracker.setCryptoJobFailed();\n+            logger.trace(\"Processing stored decryption callback result for simple blob {}\", blobId);\n+            // In case of simple blobs, user-metadata may or may not be passed into decryption job based on GetOptions flag.\n+            // Only in-case of GetBlobInfo and GetBlobAll, user-metadata is required to be decrypted\n+            if (decryptCallbackResultInfo.result.getDecryptedUserMetadata() != null) {\n+              blobInfo = new BlobInfo(serverBlobProperties,\n+                  decryptCallbackResultInfo.result.getDecryptedUserMetadata().array(), lifeVersion);\n+            }\n+            ByteBuf decryptedBlobContent = decryptCallbackResultInfo.result.getDecryptedBlobContent();\n+            totalSize = decryptedBlobContent.readableBytes();\n+            if (!resolveRange(totalSize)) {\n+              chunkIndexToBuf.put(0, filterChunkToRange(decryptedBlobContent));\n+              numChunksRetrieved = 1;\n+              progressTracker.setCryptoJobSuccess();\n+              logger.trace(\"BlobContent available to process for simple blob {}\", blobId);\n+            } else {\n+              decryptedBlobContent.release();\n+              progressTracker.setCryptoJobFailed();\n+            }\n           }\n         }\n+        decryptJobMetricsTracker.onJobResultProcessingComplete();\n       }\n-      decryptJobMetricsTracker.onJobResultProcessingComplete();\n     }\n \n     /**\n"}}, {"oid": "e435c985bb62d11c6e5ad8c48736e5608b6764a7", "url": "https://github.com/linkedin/ambry/commit/e435c985bb62d11c6e5ad8c48736e5608b6764a7", "message": "WIP", "committedDate": "2020-09-10T20:11:41Z", "type": "commit"}, {"oid": "bbfa34473918729fea5484c232664bd837037977", "url": "https://github.com/linkedin/ambry/commit/bbfa34473918729fea5484c232664bd837037977", "message": "Use ByteBuf in decrypt job", "committedDate": "2020-09-10T20:11:41Z", "type": "commit"}, {"oid": "486403a55d727420f2c55ef50cb49d720bfc2256", "url": "https://github.com/linkedin/ambry/commit/486403a55d727420f2c55ef50cb49d720bfc2256", "message": "Fix memory leak", "committedDate": "2020-09-10T20:11:41Z", "type": "commit"}, {"oid": "e851a85b774f7969c6683c3f59f897448b08db5a", "url": "https://github.com/linkedin/ambry/commit/e851a85b774f7969c6683c3f59f897448b08db5a", "message": "Comments", "committedDate": "2020-09-10T20:11:41Z", "type": "commit"}, {"oid": "3d10ce062005a300eadfe9856a93778c4a1f8e9b", "url": "https://github.com/linkedin/ambry/commit/3d10ce062005a300eadfe9856a93778c4a1f8e9b", "message": "Comments", "committedDate": "2020-09-10T20:11:41Z", "type": "commit"}, {"oid": "2a43cd25e5a24d972723b566afe25af090373364", "url": "https://github.com/linkedin/ambry/commit/2a43cd25e5a24d972723b566afe25af090373364", "message": "Make it thread safe", "committedDate": "2020-09-10T20:11:41Z", "type": "commit"}, {"oid": "d6735f6d390851ee4cb1000940fe4e5b6e5bcedb", "url": "https://github.com/linkedin/ambry/commit/d6735f6d390851ee4cb1000940fe4e5b6e5bcedb", "message": "Address comments", "committedDate": "2020-09-11T00:38:22Z", "type": "commit"}, {"oid": "d6735f6d390851ee4cb1000940fe4e5b6e5bcedb", "url": "https://github.com/linkedin/ambry/commit/d6735f6d390851ee4cb1000940fe4e5b6e5bcedb", "message": "Address comments", "committedDate": "2020-09-11T00:38:22Z", "type": "forcePushed"}, {"oid": "8210805ed22d9eead8768cd2c38b526f07e9b2b8", "url": "https://github.com/linkedin/ambry/commit/8210805ed22d9eead8768cd2c38b526f07e9b2b8", "message": "Fix test failure", "committedDate": "2020-09-11T05:47:49Z", "type": "commit"}]}