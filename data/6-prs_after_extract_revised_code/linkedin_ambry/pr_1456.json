{"pr_number": 1456, "pr_title": "Add metrics to track progress of replication from cloud.", "pr_createdAt": "2020-04-07T00:17:50Z", "pr_url": "https://github.com/linkedin/ambry/pull/1456", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ4MjcwMg==", "url": "https://github.com/linkedin/ambry/pull/1456#discussion_r404482702", "bodyText": "If this is only for cloud replicas, should the metric name reflect that?", "author": "lightningrob", "createdAt": "2020-04-07T01:24:47Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java", "diffHunk": "@@ -671,6 +699,20 @@ public void updateLagMetricForRemoteReplica(RemoteReplicaInfo remoteReplicaInfo,\n     }\n   }\n \n+  /**\n+   * Update catch up point of local replica from the cloud replica.\n+   * @param remoteReplicaInfo {@link RemoteReplicaInfo} of the cloud replica.\n+   * @param catchUpPoint timestamp upto which local replica has caught with the cloud replica.\n+   */\n+  public void updateCatchupPointMetricForRemoteReplica(RemoteReplicaInfo remoteReplicaInfo, long catchUpPoint) {\n+    // update this metric only for cloud peer replica. There will only be one cloud replica peer per partition.\n+    if (remoteReplicaInfo.getReplicaId().getReplicaType() == ReplicaType.CLOUD_BACKED", "originalCommit": "7c0d5c9c1a409aca01574f41662fdaa03fcc6777", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0Mjc0Ng==", "url": "https://github.com/linkedin/ambry/pull/1456#discussion_r405842746", "bodyText": "done.", "author": "ankagrawal", "createdAt": "2020-04-08T22:06:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ4MjcwMg=="}], "type": "inlineReview", "revised_code": {"commit": "fc0a9bcd92e2b5ac79322e9ebcef87fdbf2355e3", "chunk": "diff --git a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java\nindex 8b9c0274a..c6c88814f 100644\n--- a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java\n+++ b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java\n\n@@ -704,12 +707,12 @@ public class ReplicationMetrics {\n    * @param remoteReplicaInfo {@link RemoteReplicaInfo} of the cloud replica.\n    * @param catchUpPoint timestamp upto which local replica has caught with the cloud replica.\n    */\n-  public void updateCatchupPointMetricForRemoteReplica(RemoteReplicaInfo remoteReplicaInfo, long catchUpPoint) {\n+  public void updateCatchupPointMetricForCloudReplica(RemoteReplicaInfo remoteReplicaInfo, long catchUpPoint) {\n     // update this metric only for cloud peer replica. There will only be one cloud replica peer per partition.\n     if (remoteReplicaInfo.getReplicaId().getReplicaType() == ReplicaType.CLOUD_BACKED\n-        && partitionCatchUpPoint.containsKey(remoteReplicaInfo.getLocalReplicaId().getPartitionId())) {\n+        && cloudReplicaCatchUpPoint.containsKey(remoteReplicaInfo.getLocalReplicaId().getPartitionId())) {\n       // update the partition's lag if and only if it was tracked.\n-      partitionCatchUpPoint.put(remoteReplicaInfo.getLocalReplicaId().getPartitionId(), catchUpPoint);\n+      cloudReplicaCatchUpPoint.put(remoteReplicaInfo.getLocalReplicaId().getPartitionId(), catchUpPoint);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0OTk5MQ==", "url": "https://github.com/linkedin/ambry/pull/1456#discussion_r405649991", "bodyText": "Not sure if its possible for there to be a conflict with removeCatchupPointMetricForPartition being called concurrently, but if there is, you could use cloudReplicaCatchUpPoint.computeIfPresent(remoteReplicaInfo.getLocalReplicaId().getPartitionId(), (k, v) -> catchUpPoint) instead.", "author": "cgtz", "createdAt": "2020-04-08T16:21:31Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java", "diffHunk": "@@ -671,6 +699,20 @@ public void updateLagMetricForRemoteReplica(RemoteReplicaInfo remoteReplicaInfo,\n     }\n   }\n \n+  /**\n+   * Update catch up point of local replica from the cloud replica.\n+   * @param remoteReplicaInfo {@link RemoteReplicaInfo} of the cloud replica.\n+   * @param catchUpPoint timestamp upto which local replica has caught with the cloud replica.\n+   */\n+  public void updateCatchupPointMetricForCloudReplica(RemoteReplicaInfo remoteReplicaInfo, long catchUpPoint) {\n+    // update this metric only for cloud peer replica. There will only be one cloud replica peer per partition.\n+    if (remoteReplicaInfo.getReplicaId().getReplicaType() == ReplicaType.CLOUD_BACKED\n+        && cloudReplicaCatchUpPoint.containsKey(remoteReplicaInfo.getLocalReplicaId().getPartitionId())) {", "originalCommit": "7651670598f1aa11044e4dc938ab07ee5c298e07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4NTAwOA==", "url": "https://github.com/linkedin/ambry/pull/1456#discussion_r406385008", "bodyText": "As discussed offline, since remove only removes the metric from the registry and not from the map, there shouldn't be any conflict here.", "author": "ankagrawal", "createdAt": "2020-04-09T18:09:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0OTk5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc38f3e50d9736be7af113a345886a49206bf423", "chunk": "diff --git a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java\nindex 9ed30d751..93adf6de2 100644\n--- a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java\n+++ b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java\n\n@@ -687,16 +713,18 @@ public class ReplicationMetrics {\n   }\n \n   /**\n-   * Update the lag between local and {@link RemoteReplicaInfo}.\n+   * Update the lag between local and {@link RemoteReplicaInfo}. The lag indicates how far local replica is behind remote\n+   * peer replica.\n    * @param remoteReplicaInfo the remote replica\n    * @param lag the new lag\n    */\n   public void updateLagMetricForRemoteReplica(RemoteReplicaInfo remoteReplicaInfo, long lag) {\n     ReplicaId replicaId = remoteReplicaInfo.getReplicaId();\n-    if (partitionLags.containsKey(replicaId.getPartitionId())) {\n-      // update the partition's lag if and only if it was tracked.\n-      partitionLags.get(replicaId.getPartitionId()).put(replicaId.getDataNodeId(), lag);\n-    }\n+    // update the partition's lag if and only if it was tracked.\n+    partitionLags.computeIfPresent(replicaId.getPartitionId(), (k, v) -> {\n+      v.put(replicaId.getDataNodeId(), lag);\n+      return v;\n+    });\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1Mjg5NQ==", "url": "https://github.com/linkedin/ambry/pull/1456#discussion_r405652895", "bodyText": "minor: I know it wasn't done for the other similar metrics, but since this name format is used in two methods you could probably make a helper method to generate the name\nString getCatchupPointFromCloudMetricName(PartitionId partitionId) { \n  return MetricRegistry.name(ReplicaThread.class, \"Partition-\" + partitionId.toPathString() + \"-catchupPointFromCloud\");\n}", "author": "cgtz", "createdAt": "2020-04-08T16:25:47Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java", "diffHunk": "@@ -434,6 +437,20 @@ public void addLagMetricForPartition(PartitionId partitionId) {\n     }\n   }\n \n+  /**\n+   * Add catchup point metric(local from cloud) for given partitionId.\n+   * @param partitionId partition to add metric for.\n+   */\n+  public void addCatchUpPointMetricForPartition(PartitionId partitionId) {\n+    if (!cloudReplicaCatchUpPoint.containsKey(partitionId)) {\n+      cloudReplicaCatchUpPoint.put(partitionId, 0L);\n+      // Set up metrics if and only if no mapping for this partition before.\n+      Gauge<Long> catchUpPoint = () -> cloudReplicaCatchUpPoint.get(partitionId);\n+      registry.register(MetricRegistry.name(ReplicaThread.class,\n+          \"Partition-\" + partitionId.toPathString() + \"-catchupPointFromCloud\"), catchUpPoint);", "originalCommit": "7651670598f1aa11044e4dc938ab07ee5c298e07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0ODk2Mg==", "url": "https://github.com/linkedin/ambry/pull/1456#discussion_r405848962", "bodyText": "done.", "author": "ankagrawal", "createdAt": "2020-04-08T22:22:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1Mjg5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc0a9bcd92e2b5ac79322e9ebcef87fdbf2355e3", "chunk": "diff --git a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java\nindex 9ed30d751..c6c88814f 100644\n--- a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java\n+++ b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicationMetrics.java\n\n@@ -433,7 +436,7 @@ public class ReplicationMetrics {\n       // Set up metrics if and only if no mapping for this partition before.\n       Gauge<Long> replicaLag = () -> getMaxLagForPartition(partitionId);\n       registry.register(MetricRegistry.name(ReplicaThread.class,\n-          \"Partition-\" + partitionId.toPathString() + \"-maxLagFromPeersInBytes\"), replicaLag);\n+          String.format(MAX_LAG_FROM_PEERS_IN_BYTE_METRIC_NAME_TEMPLATE, partitionId.toPathString())), replicaLag);\n     }\n   }\n \n"}}, {"oid": "fc0a9bcd92e2b5ac79322e9ebcef87fdbf2355e3", "url": "https://github.com/linkedin/ambry/commit/fc0a9bcd92e2b5ac79322e9ebcef87fdbf2355e3", "message": "Address review comments.", "committedDate": "2020-04-08T22:59:42Z", "type": "forcePushed"}, {"oid": "fc38f3e50d9736be7af113a345886a49206bf423", "url": "https://github.com/linkedin/ambry/commit/fc38f3e50d9736be7af113a345886a49206bf423", "message": "fix a code comment.", "committedDate": "2020-05-11T20:20:19Z", "type": "forcePushed"}, {"oid": "54a9e3af1cf7952aac2637db43f6205fadbae70a", "url": "https://github.com/linkedin/ambry/commit/54a9e3af1cf7952aac2637db43f6205fadbae70a", "message": "Add metrics to track progress of replcation from cloud.", "committedDate": "2020-05-26T18:24:58Z", "type": "commit"}, {"oid": "f7185054f8cb05ee948ef415581a198899410939", "url": "https://github.com/linkedin/ambry/commit/f7185054f8cb05ee948ef415581a198899410939", "message": "address review comments", "committedDate": "2020-05-26T18:24:58Z", "type": "commit"}, {"oid": "094a9575270abfb3cc1cc0911daa4d3ee51d3ed6", "url": "https://github.com/linkedin/ambry/commit/094a9575270abfb3cc1cc0911daa4d3ee51d3ed6", "message": "Address review comments.", "committedDate": "2020-05-26T18:24:58Z", "type": "commit"}, {"oid": "8d811331f80b7fb04f1ecd66ad96b5e99260f373", "url": "https://github.com/linkedin/ambry/commit/8d811331f80b7fb04f1ecd66ad96b5e99260f373", "message": "fix a code comment.", "committedDate": "2020-05-26T18:24:58Z", "type": "commit"}, {"oid": "8d811331f80b7fb04f1ecd66ad96b5e99260f373", "url": "https://github.com/linkedin/ambry/commit/8d811331f80b7fb04f1ecd66ad96b5e99260f373", "message": "fix a code comment.", "committedDate": "2020-05-26T18:24:58Z", "type": "forcePushed"}, {"oid": "d2367cacb632de3a67b4f801c05ab125edeaf5d8", "url": "https://github.com/linkedin/ambry/commit/d2367cacb632de3a67b4f801c05ab125edeaf5d8", "message": "Check the response size before getting data to update metric.", "committedDate": "2020-05-26T20:00:57Z", "type": "commit"}]}