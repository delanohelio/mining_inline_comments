{"pr_number": 1657, "pr_title": "Mysql error handling and retries", "pr_createdAt": "2020-10-13T00:28:13Z", "pr_url": "https://github.com/linkedin/ambry/pull/1657", "timeline": [{"oid": "1c8263b239cb5e10d334c1ff77b75cdfde545be6", "url": "https://github.com/linkedin/ambry/commit/1c8263b239cb5e10d334c1ff77b75cdfde545be6", "message": "Handle database errors and retry as needed", "committedDate": "2020-10-12T22:43:19Z", "type": "commit"}, {"oid": "9aba3f3d58f8dc8e58ddab8d35620957d0694a06", "url": "https://github.com/linkedin/ambry/commit/9aba3f3d58f8dc8e58ddab8d35620957d0694a06", "message": "Merge branch 'master' of github.com:linkedin/ambry into mysql-error-retry", "committedDate": "2020-10-12T23:39:03Z", "type": "commit"}, {"oid": "591bd21c04ebd8d082a5c62791592057f22a954f", "url": "https://github.com/linkedin/ambry/commit/591bd21c04ebd8d082a5c62791592057f22a954f", "message": "Merge branch 'master' of github.com:linkedin/ambry into mysql-error-retry", "committedDate": "2020-10-13T00:26:34Z", "type": "commit"}, {"oid": "379bcb720541e4e04f36fedf1d528832ded2ad80", "url": "https://github.com/linkedin/ambry/commit/379bcb720541e4e04f36fedf1d528832ded2ad80", "message": "Revert accidental property change", "committedDate": "2020-10-13T00:30:01Z", "type": "commit"}, {"oid": "6f5e2ad6b386ae048627cfa8b35e75dfe97c0e26", "url": "https://github.com/linkedin/ambry/commit/6f5e2ad6b386ae048627cfa8b35e75dfe97c0e26", "message": "Compile and test fixes", "committedDate": "2020-10-13T00:42:46Z", "type": "commit"}, {"oid": "edc6a27609e5da5cbc80e345777cc6b57534b386", "url": "https://github.com/linkedin/ambry/commit/edc6a27609e5da5cbc80e345777cc6b57534b386", "message": "Update tests that call AccountService.updateAccounts to handle exception", "committedDate": "2020-10-14T05:14:37Z", "type": "commit"}, {"oid": "6b0eb119bbed3c89b9c882aff6786e46054fd80b", "url": "https://github.com/linkedin/ambry/commit/6b0eb119bbed3c89b9c882aff6786e46054fd80b", "message": "Merge branch 'master' of github.com:linkedin/ambry into mysql-error-retry", "committedDate": "2020-10-14T05:19:47Z", "type": "commit"}, {"oid": "0a7c7b24081b2c19ed155555be4377c2100146f3", "url": "https://github.com/linkedin/ambry/commit/0a7c7b24081b2c19ed155555be4377c2100146f3", "message": "Fix merge issues", "committedDate": "2020-10-14T05:43:53Z", "type": "commit"}, {"oid": "4260a208aee1780dca219d3eecb6726593ea9da0", "url": "https://github.com/linkedin/ambry/commit/4260a208aee1780dca219d3eecb6726593ea9da0", "message": "Test fix and cleanup", "committedDate": "2020-10-14T06:00:07Z", "type": "commit"}, {"oid": "2f0ec1df12d06475ea55b3805d72db36ba2bd66f", "url": "https://github.com/linkedin/ambry/commit/2f0ec1df12d06475ea55b3805d72db36ba2bd66f", "message": "Test fix and minor refactoring", "committedDate": "2020-10-14T18:15:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyOTE0OQ==", "url": "https://github.com/linkedin/ambry/pull/1657#discussion_r505729149", "bodyText": "nit: typo for word cache", "author": "Arun-LinkedIn", "createdAt": "2020-10-15T17:49:47Z", "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "diffHunk": "@@ -152,6 +156,8 @@ void fetchAndUpdateCache() {\n         } finally {\n           infoMapLock.writeLock().unlock();\n         }\n+        // At this point we can safely say cash is refreshed", "originalCommit": "2f0ec1df12d06475ea55b3805d72db36ba2bd66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e14f107e27851f8c4ee1fe778a5ed447c98d5584", "chunk": "diff --git a/ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java b/ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java\nindex 4151c9adb..9e78ff43d 100644\n--- a/ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java\n+++ b/ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java\n\n@@ -156,7 +156,7 @@ public class MySqlAccountService extends AbstractAccountService {\n         } finally {\n           infoMapLock.writeLock().unlock();\n         }\n-        // At this point we can safely say cash is refreshed\n+        // At this point we can safely say cache is refreshed\n         needRefresh = false;\n \n         // Persist account metadata in cache to back up file on disk.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxNTE0OA==", "url": "https://github.com/linkedin/ambry/pull/1657#discussion_r507915148", "bodyText": "It seems this method uses both return false and AccountServiceException to handle failure cases. Can we throw AccountServiceException everywhere to make it consistent? Also we can consider removing boolean return value, if the method goes through without exception, then it should be a success.", "author": "jsjtzyy", "createdAt": "2020-10-19T17:08:58Z", "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -263,7 +263,7 @@ public boolean updateAccounts(Collection<Account> accounts) {\n    * @return True when the update operation succeeds.\n    */\n   boolean updateAccountsWithAccountMetadataStore(Collection<Account> accounts,\n-      AccountMetadataStore accountMetadataStore) {\n+      AccountMetadataStore accountMetadataStore) throws AccountServiceException {", "originalCommit": "2f0ec1df12d06475ea55b3805d72db36ba2bd66f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxNTYwMA==", "url": "https://github.com/linkedin/ambry/pull/1657#discussion_r507915600", "bodyText": "Feel free to add new type of error code to AccountServiceErrorCode", "author": "jsjtzyy", "createdAt": "2020-10-19T17:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxNTE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODExMzIyNw==", "url": "https://github.com/linkedin/ambry/pull/1657#discussion_r508113227", "bodyText": "I didn't know what to do about the case where config.updateDisabled = true.  What exception should that be?  Kind of seems like IllegalState.  Do we ever actually turn off account updates?", "author": "lightningrob", "createdAt": "2020-10-19T23:07:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxNTE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEyMzYxMg==", "url": "https://github.com/linkedin/ambry/pull/1657#discussion_r508123612", "bodyText": "Maybe this case justifies TemporaryDisabled and from customer point's of view, it's 503 (Unavailable) error.\nThis config was introduced to migrate ZK based metadata store to router based metadata store. It gives us an option to temporarily turn off any account update during the migration (to avoid potential race condition).\nWe can remove this or if you think it's useful for account service migration, then we can keep it.", "author": "jsjtzyy", "createdAt": "2020-10-19T23:41:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxNTE0OA=="}], "type": "inlineReview", "revised_code": {"commit": "e14f107e27851f8c4ee1fe778a5ed447c98d5584", "chunk": "diff --git a/ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java b/ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java\nindex 26629006d..940145238 100644\n--- a/ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java\n+++ b/ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java\n\n@@ -252,27 +252,25 @@ public class HelixAccountService extends AbstractAccountService implements Accou\n    * </p>\n    */\n   @Override\n-  public boolean updateAccounts(Collection<Account> accounts) throws AccountServiceException {\n-    return updateAccountsWithAccountMetadataStore(accounts, accountMetadataStore);\n+  public void updateAccounts(Collection<Account> accounts) throws AccountServiceException {\n+    updateAccountsWithAccountMetadataStore(accounts, accountMetadataStore);\n   }\n \n   /**\n    * Helper function to update {@link Account} metadata.\n    * @param accounts The {@link Account} metadata to update.\n    * @param accountMetadataStore The {@link AccountMetadataStore}.\n-   * @return True when the update operation succeeds.\n+   * @throws AccountServiceException when the update operation fails.\n    */\n-  boolean updateAccountsWithAccountMetadataStore(Collection<Account> accounts,\n+  void updateAccountsWithAccountMetadataStore(Collection<Account> accounts,\n       AccountMetadataStore accountMetadataStore) throws AccountServiceException {\n     checkOpen();\n     Objects.requireNonNull(accounts, \"accounts cannot be null\");\n     if (accounts.isEmpty()) {\n-      logger.debug(\"Empty account collection to update.\");\n-      return false;\n+      throw new IllegalArgumentException(\"Empty account collection to update.\");\n     }\n     if (config.updateDisabled) {\n-      logger.info(\"Updates has been disabled\");\n-      return false;\n+      throw new AccountServiceException(\"Updates have been disabled\", AccountServiceErrorCode.UpdateDisabled);\n     }\n     if (hasDuplicateAccountIdOrName(accounts)) {\n       accountServiceMetrics.updateAccountErrorCount.inc();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyMTEzNA==", "url": "https://github.com/linkedin/ambry/pull/1657#discussion_r507921134", "bodyText": "Is this because  throwing AccountServiceException will bring lots of changes in too many places?", "author": "jsjtzyy", "createdAt": "2020-10-19T17:18:55Z", "path": "ambry-test-utils/src/main/java/com/github/ambry/account/InMemAccountService.java", "diffHunk": "@@ -167,7 +167,11 @@ public synchronized void clear() {\n    */\n   public synchronized Account createAndAddRandomAccount() {\n     Account account = generateRandomAccount();\n-    updateAccounts(Collections.singletonList(account));\n+    try {\n+      updateAccounts(Collections.singletonList(account));\n+    } catch (AccountServiceException ase) {\n+      throw new IllegalStateException(ase);", "originalCommit": "2f0ec1df12d06475ea55b3805d72db36ba2bd66f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODExNDE5MQ==", "url": "https://github.com/linkedin/ambry/pull/1657#discussion_r508114191", "bodyText": "Pretty much.", "author": "lightningrob", "createdAt": "2020-10-19T23:10:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyMTEzNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "e14f107e27851f8c4ee1fe778a5ed447c98d5584", "url": "https://github.com/linkedin/ambry/commit/e14f107e27851f8c4ee1fe778a5ed447c98d5584", "message": "Address review comments, make AccountService.updateAccounts() return void.", "committedDate": "2020-10-20T00:43:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE4MDg0OQ==", "url": "https://github.com/linkedin/ambry/pull/1657#discussion_r508180849", "bodyText": "nit:  This can be BadRequest AccountServiceErrorCode. (We can do this in future PR)", "author": "jsjtzyy", "createdAt": "2020-10-20T03:05:30Z", "path": "ambry-account/src/main/java/com/github/ambry/account/MySqlAccountService.java", "diffHunk": "@@ -199,20 +199,17 @@ public Account getAccountByName(String accountName) {\n   }\n \n   @Override\n-  public boolean updateAccounts(Collection<Account> accounts) throws AccountServiceException {\n+  public void updateAccounts(Collection<Account> accounts) throws AccountServiceException {\n     Objects.requireNonNull(accounts, \"accounts cannot be null\");\n     if (accounts.isEmpty()) {\n-      logger.debug(\"Empty account collection to update.\");\n-      return false;\n+      throw new IllegalArgumentException(\"Empty account collection to update.\");", "originalCommit": "e14f107e27851f8c4ee1fe778a5ed447c98d5584", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIwMTg3MA==", "url": "https://github.com/linkedin/ambry/pull/1657#discussion_r508201870", "bodyText": "ok", "author": "lightningrob", "createdAt": "2020-10-20T04:28:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE4MDg0OQ=="}], "type": "inlineReview", "revised_code": null}]}