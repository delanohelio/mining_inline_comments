{"pr_number": 1594, "pr_title": "Introduce tool for migrating instance configs to property store", "pr_createdAt": "2020-07-29T16:09:29Z", "pr_url": "https://github.com/linkedin/ambry/pull/1594", "timeline": [{"oid": "aec5614e239794de15b0218e20972645eceea7f9", "url": "https://github.com/linkedin/ambry/commit/aec5614e239794de15b0218e20972645eceea7f9", "message": "Introduce tool for migrating instance configs to property store\n\nThis HelixBootstrapUpgradeTool operation will fetch all instance configs\nfor a cluster, convert them into the new format, and then persist them\nin the property store.", "committedDate": "2020-07-31T15:22:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4MDE0Mw==", "url": "https://github.com/linkedin/ambry/pull/1594#discussion_r464580143", "bodyText": "Optional: considering making this multi-threaded (one thread  per colo).\n(Never mind, it should be fine, as it's one-off operation)", "author": "jsjtzyy", "createdAt": "2020-08-03T18:10:46Z", "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixBootstrapUpgradeUtil.java", "diffHunk": "@@ -700,20 +718,47 @@ private void uploadClusterAdminInfos(Map<String, Map<String, Map<String, String>\n    * @param adminConfigZNodePath the znode path of admin config.\n    */\n   private void deleteClusterAdminInfos(String clusterAdminType, String adminConfigZNodePath) {\n-    Properties storeProps = new Properties();\n-    storeProps.setProperty(\"helix.property.store.root.path\", \"/\" + clusterName + \"/\" + PROPERTYSTORE_STR);\n-    HelixPropertyStoreConfig propertyStoreConfig = new HelixPropertyStoreConfig(new VerifiableProperties(storeProps));\n     for (Map.Entry<String, ClusterMapUtils.DcZkInfo> entry : dataCenterToZkAddress.entrySet()) {\n       info(\"Deleting {} infos for datacenter {}.\", clusterAdminType, entry.getKey());\n-      HelixPropertyStore<ZNRecord> helixPropertyStore =\n-          CommonUtils.createHelixPropertyStore(entry.getValue().getZkConnectStrs().get(0), propertyStoreConfig, null);\n+      HelixPropertyStore<ZNRecord> helixPropertyStore = createHelixPropertyStore(entry.getKey());\n       if (!helixPropertyStore.remove(adminConfigZNodePath, AccessOption.PERSISTENT)) {\n         logger.error(\"Failed to remove {} infos from datacenter {}\", clusterAdminType, entry.getKey());\n       }\n       helixPropertyStore.stop();\n     }\n   }\n \n+  /**\n+   * Convert instance configs to the new DataNodeConfig format and persist them in the property store.\n+   */\n+  private void migrateToPropertyStore() {\n+    adminForDc.forEach((dcName, helixAdmin) -> {", "originalCommit": "aec5614e239794de15b0218e20972645eceea7f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEzMTA3NA==", "url": "https://github.com/linkedin/ambry/pull/1594#discussion_r465131074", "bodyText": "Parallelism is a good idea anyways. I made this multi-threaded since it doesn't add much complexity to the code.", "author": "cgtz", "createdAt": "2020-08-04T15:20:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4MDE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "2d4f70983c96f8f4b56fcb7129cf26994b2d1da2", "chunk": "diff --git a/ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixBootstrapUpgradeUtil.java b/ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixBootstrapUpgradeUtil.java\nindex 028a324df..a8511ff3c 100644\n--- a/ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixBootstrapUpgradeUtil.java\n+++ b/ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixBootstrapUpgradeUtil.java\n\n@@ -731,32 +728,43 @@ public class HelixBootstrapUpgradeUtil {\n   /**\n    * Convert instance configs to the new DataNodeConfig format and persist them in the property store.\n    */\n-  private void migrateToPropertyStore() {\n-    adminForDc.forEach((dcName, helixAdmin) -> {\n-      logger.info(\"Starting property store migration in {}\", dcName);\n-      ClusterMapConfig config = getClusterMapConfig(clusterName, dcName, null);\n-      InstanceConfigToDataNodeConfigAdapter.Converter instanceConfigConverter =\n-          new InstanceConfigToDataNodeConfigAdapter.Converter(config);\n-      HelixPropertyStore<ZNRecord> propertyStore = createHelixPropertyStore(dcName);\n+  private void migrateToPropertyStore() throws InterruptedException {\n+    CountDownLatch migrationComplete = new CountDownLatch(adminForDc.size());\n+    // different DCs can be migrated in parallel\n+    adminForDc.forEach((dcName, helixAdmin) -> Utils.newThread(() -> {\n       try {\n-        PropertyStoreToDataNodeConfigAdapter propertyStoreAdapter =\n-            new PropertyStoreToDataNodeConfigAdapter(propertyStore, config, dcName);\n-        List<String> instanceNames = helixAdmin.getInstancesInCluster(clusterName);\n-        logger.info(\"Found {} instances in cluster\", instanceNames.size());\n-        instanceNames.forEach(instanceName -> {\n-          logger.info(\"Copying config for node {}\", instanceName);\n-          InstanceConfig instanceConfig = helixAdmin.getInstanceConfig(clusterName, instanceName);\n-          DataNodeConfig dataNodeConfig = instanceConfigConverter.convert(instanceConfig);\n-          logger.debug(\"Writing {} to property store in {}\", dataNodeConfig, dcName);\n-          if (!propertyStoreAdapter.set(dataNodeConfig)) {\n-            logger.error(\"Failed to persist config for node {} in the property store.\",\n-                dataNodeConfig.getInstanceName());\n-          }\n-        });\n+        logger.info(\"Starting property store migration in {}\", dcName);\n+        ClusterMapConfig config = getClusterMapConfig(clusterName, dcName, null);\n+        InstanceConfigToDataNodeConfigAdapter.Converter instanceConfigConverter =\n+            new InstanceConfigToDataNodeConfigAdapter.Converter(config);\n+        HelixPropertyStore<ZNRecord> propertyStore = createHelixPropertyStore(dcName);\n+        try {\n+          PropertyStoreToDataNodeConfigAdapter propertyStoreAdapter =\n+              new PropertyStoreToDataNodeConfigAdapter(propertyStore, config, dcName);\n+          List<String> instanceNames = helixAdmin.getInstancesInCluster(clusterName);\n+          logger.info(\"Found {} instances in cluster\", instanceNames.size());\n+          instanceNames.forEach(instanceName -> {\n+            logger.info(\"Copying config for node {}\", instanceName);\n+            InstanceConfig instanceConfig = helixAdmin.getInstanceConfig(clusterName, instanceName);\n+            DataNodeConfig dataNodeConfig = instanceConfigConverter.convert(instanceConfig);\n+            logger.debug(\"Writing {} to property store in {}\", dataNodeConfig, dcName);\n+            if (!propertyStoreAdapter.set(dataNodeConfig)) {\n+              logger.error(\"Failed to persist config for node {} in the property store.\",\n+                  dataNodeConfig.getInstanceName());\n+            }\n+          });\n+        } finally {\n+          propertyStore.stop();\n+        }\n+        logger.error(\"Successfully migrated to property store in {}\", dcName);\n+      } catch (Throwable t) {\n+        logger.error(\"Error while migrating to property store in {}\", dcName, t);\n       } finally {\n-        propertyStore.stop();\n+        migrationComplete.countDown();\n       }\n-    });\n+    }, false).start());\n+\n+    migrationComplete.await();\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5NjU1NA==", "url": "https://github.com/linkedin/ambry/pull/1594#discussion_r464596554", "bodyText": "Thanks for simplifying this. Could you also make the change for uploadClusterAdminInfos method as well (line 701 ~ 705)?", "author": "jsjtzyy", "createdAt": "2020-08-03T18:44:33Z", "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixBootstrapUpgradeUtil.java", "diffHunk": "@@ -700,20 +718,47 @@ private void uploadClusterAdminInfos(Map<String, Map<String, Map<String, String>\n    * @param adminConfigZNodePath the znode path of admin config.\n    */\n   private void deleteClusterAdminInfos(String clusterAdminType, String adminConfigZNodePath) {\n-    Properties storeProps = new Properties();\n-    storeProps.setProperty(\"helix.property.store.root.path\", \"/\" + clusterName + \"/\" + PROPERTYSTORE_STR);\n-    HelixPropertyStoreConfig propertyStoreConfig = new HelixPropertyStoreConfig(new VerifiableProperties(storeProps));", "originalCommit": "aec5614e239794de15b0218e20972645eceea7f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEzNDE3MQ==", "url": "https://github.com/linkedin/ambry/pull/1594#discussion_r465134171", "bodyText": "done", "author": "cgtz", "createdAt": "2020-08-04T15:24:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5NjU1NA=="}], "type": "inlineReview", "revised_code": {"commit": "2d4f70983c96f8f4b56fcb7129cf26994b2d1da2", "chunk": "diff --git a/ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixBootstrapUpgradeUtil.java b/ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixBootstrapUpgradeUtil.java\nindex 028a324df..a8511ff3c 100644\n--- a/ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixBootstrapUpgradeUtil.java\n+++ b/ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixBootstrapUpgradeUtil.java\n\n@@ -731,32 +728,43 @@ public class HelixBootstrapUpgradeUtil {\n   /**\n    * Convert instance configs to the new DataNodeConfig format and persist them in the property store.\n    */\n-  private void migrateToPropertyStore() {\n-    adminForDc.forEach((dcName, helixAdmin) -> {\n-      logger.info(\"Starting property store migration in {}\", dcName);\n-      ClusterMapConfig config = getClusterMapConfig(clusterName, dcName, null);\n-      InstanceConfigToDataNodeConfigAdapter.Converter instanceConfigConverter =\n-          new InstanceConfigToDataNodeConfigAdapter.Converter(config);\n-      HelixPropertyStore<ZNRecord> propertyStore = createHelixPropertyStore(dcName);\n+  private void migrateToPropertyStore() throws InterruptedException {\n+    CountDownLatch migrationComplete = new CountDownLatch(adminForDc.size());\n+    // different DCs can be migrated in parallel\n+    adminForDc.forEach((dcName, helixAdmin) -> Utils.newThread(() -> {\n       try {\n-        PropertyStoreToDataNodeConfigAdapter propertyStoreAdapter =\n-            new PropertyStoreToDataNodeConfigAdapter(propertyStore, config, dcName);\n-        List<String> instanceNames = helixAdmin.getInstancesInCluster(clusterName);\n-        logger.info(\"Found {} instances in cluster\", instanceNames.size());\n-        instanceNames.forEach(instanceName -> {\n-          logger.info(\"Copying config for node {}\", instanceName);\n-          InstanceConfig instanceConfig = helixAdmin.getInstanceConfig(clusterName, instanceName);\n-          DataNodeConfig dataNodeConfig = instanceConfigConverter.convert(instanceConfig);\n-          logger.debug(\"Writing {} to property store in {}\", dataNodeConfig, dcName);\n-          if (!propertyStoreAdapter.set(dataNodeConfig)) {\n-            logger.error(\"Failed to persist config for node {} in the property store.\",\n-                dataNodeConfig.getInstanceName());\n-          }\n-        });\n+        logger.info(\"Starting property store migration in {}\", dcName);\n+        ClusterMapConfig config = getClusterMapConfig(clusterName, dcName, null);\n+        InstanceConfigToDataNodeConfigAdapter.Converter instanceConfigConverter =\n+            new InstanceConfigToDataNodeConfigAdapter.Converter(config);\n+        HelixPropertyStore<ZNRecord> propertyStore = createHelixPropertyStore(dcName);\n+        try {\n+          PropertyStoreToDataNodeConfigAdapter propertyStoreAdapter =\n+              new PropertyStoreToDataNodeConfigAdapter(propertyStore, config, dcName);\n+          List<String> instanceNames = helixAdmin.getInstancesInCluster(clusterName);\n+          logger.info(\"Found {} instances in cluster\", instanceNames.size());\n+          instanceNames.forEach(instanceName -> {\n+            logger.info(\"Copying config for node {}\", instanceName);\n+            InstanceConfig instanceConfig = helixAdmin.getInstanceConfig(clusterName, instanceName);\n+            DataNodeConfig dataNodeConfig = instanceConfigConverter.convert(instanceConfig);\n+            logger.debug(\"Writing {} to property store in {}\", dataNodeConfig, dcName);\n+            if (!propertyStoreAdapter.set(dataNodeConfig)) {\n+              logger.error(\"Failed to persist config for node {} in the property store.\",\n+                  dataNodeConfig.getInstanceName());\n+            }\n+          });\n+        } finally {\n+          propertyStore.stop();\n+        }\n+        logger.error(\"Successfully migrated to property store in {}\", dcName);\n+      } catch (Throwable t) {\n+        logger.error(\"Error while migrating to property store in {}\", dcName, t);\n       } finally {\n-        propertyStore.stop();\n+        migrationComplete.countDown();\n       }\n-    });\n+    }, false).start());\n+\n+    migrationComplete.await();\n   }\n \n   /**\n"}}, {"oid": "c1a5a8767aa13109d5330f83783f2a3e52e84e1d", "url": "https://github.com/linkedin/ambry/commit/c1a5a8767aa13109d5330f83783f2a3e52e84e1d", "message": "Introduce tool for migrating instance configs to property store\n\nThis HelixBootstrapUpgradeTool operation will fetch all instance configs\nfor a cluster, convert them into the new format, and then persist them\nin the property store.", "committedDate": "2020-08-05T17:08:06Z", "type": "commit"}, {"oid": "2d4f70983c96f8f4b56fcb7129cf26994b2d1da2", "url": "https://github.com/linkedin/ambry/commit/2d4f70983c96f8f4b56fcb7129cf26994b2d1da2", "message": "Address comments", "committedDate": "2020-08-05T17:08:06Z", "type": "commit"}, {"oid": "2d4f70983c96f8f4b56fcb7129cf26994b2d1da2", "url": "https://github.com/linkedin/ambry/commit/2d4f70983c96f8f4b56fcb7129cf26994b2d1da2", "message": "Address comments", "committedDate": "2020-08-05T17:08:06Z", "type": "forcePushed"}, {"oid": "abad9b81598ad5ff40531d3fcd789b71c89ab927", "url": "https://github.com/linkedin/ambry/commit/abad9b81598ad5ff40531d3fcd789b71c89ab927", "message": "Fix after rebase", "committedDate": "2020-08-05T17:20:49Z", "type": "commit"}, {"oid": "abad9b81598ad5ff40531d3fcd789b71c89ab927", "url": "https://github.com/linkedin/ambry/commit/abad9b81598ad5ff40531d3fcd789b71c89ab927", "message": "Fix after rebase", "committedDate": "2020-08-05T17:20:49Z", "type": "forcePushed"}]}