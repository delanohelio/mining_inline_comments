{"pr_number": 1738, "pr_title": "[StorageQuota] Adding more logs to quota classes", "pr_createdAt": "2020-12-23T19:06:59Z", "pr_url": "https://github.com/linkedin/ambry/pull/1738", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAyNzA4MQ==", "url": "https://github.com/linkedin/ambry/pull/1738#discussion_r553027081", "bodyText": "The trimmed result is ignored.", "author": "jsjtzyy", "createdAt": "2021-01-07T00:06:11Z", "path": "ambry-api/src/main/java/com/github/ambry/config/StorageQuotaConfig.java", "diffHunk": "@@ -127,5 +138,14 @@ public StorageQuotaConfig(VerifiableProperties verifiableProperties) {\n     mysqlStoreRetryBackoffMs = verifiableProperties.getLong(MYSQL_STORE_RETRY_BACKOFF_MS, 10 * 60 * 1000);\n     mysqlStoreRetryMaxCount = verifiableProperties.getInt(MYSQL_STORE_RETRY_MAX_COUNT, 1);\n     mysqlMonthlyBaseFetchOffsetSec = verifiableProperties.getLong(MYSQL_MONTHLY_BASE_FETCH_OFFSET_SEC, 60 * 60);\n+    enforcerMode = QuotaMode.valueOf(\n+        capitalize(verifiableProperties.getString(ENFORCER_MODE, DEFAULT_VALUE_ENFORCE_MODE).toLowerCase()));\n+  }\n+\n+  private String capitalize(String str) {\n+    if (str == null || str.isEmpty() || str.trim().isEmpty()) {", "originalCommit": "808e192c72bbb9811272eebc2b4bd53f16b91591", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA1ODMzNQ==", "url": "https://github.com/linkedin/ambry/pull/1738#discussion_r553058335", "bodyText": "updated.", "author": "justinlin-linkedin", "createdAt": "2021-01-07T01:29:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAyNzA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a1fcea3c5d1cccbac46bf2a430b007932dc3c255", "chunk": "diff --git a/ambry-api/src/main/java/com/github/ambry/config/StorageQuotaConfig.java b/ambry-api/src/main/java/com/github/ambry/config/StorageQuotaConfig.java\nindex 8539a2fd8..bddc8b43f 100644\n--- a/ambry-api/src/main/java/com/github/ambry/config/StorageQuotaConfig.java\n+++ b/ambry-api/src/main/java/com/github/ambry/config/StorageQuotaConfig.java\n\n@@ -146,6 +146,7 @@ public class StorageQuotaConfig {\n     if (str == null || str.isEmpty() || str.trim().isEmpty()) {\n       return str;\n     }\n+    str = str.trim();\n     return str.substring(0, 1).toUpperCase() + str.substring(1).toLowerCase();\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAyOTQ4MQ==", "url": "https://github.com/linkedin/ambry/pull/1738#discussion_r553029481", "bodyText": "Could you add java doc for this method?", "author": "jsjtzyy", "createdAt": "2021-01-07T00:14:57Z", "path": "ambry-api/src/main/java/com/github/ambry/quota/StorageQuotaEnforcer.java", "diffHunk": "@@ -71,4 +71,12 @@\n    * @param mode The new value for {@link QuotaMode}.\n    */\n   void setQuotaMode(QuotaMode mode);\n+\n+  /**\n+   * Interface of callback method when the quota of certain account and container's quota is exceeded.\n+   */\n+  interface QuotaExceededCallback {\n+    void onQuotaExceeded(QuotaMode quotaMode, short accountId, short containerId, QuotaOperation op, long quota,", "originalCommit": "808e192c72bbb9811272eebc2b4bd53f16b91591", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1fcea3c5d1cccbac46bf2a430b007932dc3c255", "chunk": "diff --git a/ambry-api/src/main/java/com/github/ambry/quota/StorageQuotaEnforcer.java b/ambry-api/src/main/java/com/github/ambry/quota/StorageQuotaEnforcer.java\nindex 605ccd764..6f3fc0dee 100644\n--- a/ambry-api/src/main/java/com/github/ambry/quota/StorageQuotaEnforcer.java\n+++ b/ambry-api/src/main/java/com/github/ambry/quota/StorageQuotaEnforcer.java\n\n@@ -76,7 +76,18 @@ public interface StorageQuotaEnforcer {\n    * Interface of callback method when the quota of certain account and container's quota is exceeded.\n    */\n   interface QuotaExceededCallback {\n+\n+    /**\n+     * Method to call when the storage quota is exceeded.\n+     * @param quotaMode The current {@link QuotaMode} of Enforcer.\n+     * @param accountId The account id that exceeds the quota.\n+     * @param containerId The container id that exceeds the quota.\n+     * @param op The particular {@link QuotaOperation} that exceeds the quota.\n+     * @param quota The storage quota.\n+     * @param existingUsage The existing usage before the operation.\n+     * @param opSize The storage size of the operation.\n+     */\n     void onQuotaExceeded(QuotaMode quotaMode, short accountId, short containerId, QuotaOperation op, long quota,\n-        long existingUsage, long newSize);\n+        long existingUsage, long opSize);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAzMjE4MA==", "url": "https://github.com/linkedin/ambry/pull/1738#discussion_r553032180", "bodyText": "I am thinking if we can move this to caller method and use separate metrics for AccountService and AccountStatsReport. Thus, we have a clear view that how may QPS from AccountService, how many from Account Stats/ Quota Service.", "author": "jsjtzyy", "createdAt": "2021-01-07T00:24:48Z", "path": "ambry-mysql/src/main/java/com/github/ambry/mysql/MySqlDataAccessor.java", "diffHunk": "@@ -271,10 +271,13 @@ public static boolean isCredentialError(SQLException e) {\n   public void onException(SQLException e, OperationType operationType) {\n     if (e instanceof SQLTransientConnectionException) {\n       if (operationType == OperationType.Write) {\n+        metrics.writeRate.mark();", "originalCommit": "808e192c72bbb9811272eebc2b4bd53f16b91591", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA1ODQxNA==", "url": "https://github.com/linkedin/ambry/pull/1738#discussion_r553058414", "bodyText": "the metrics takes the store class as part of the metric name, so it's already separated.", "author": "justinlin-linkedin", "createdAt": "2021-01-07T01:29:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAzMjE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "61d7d03b5725854b7e273d7043fca68691441fc6", "chunk": "diff --git a/ambry-mysql/src/main/java/com/github/ambry/mysql/MySqlDataAccessor.java b/ambry-mysql/src/main/java/com/github/ambry/mysql/MySqlDataAccessor.java\nindex 99e33db55..2c8723a94 100644\n--- a/ambry-mysql/src/main/java/com/github/ambry/mysql/MySqlDataAccessor.java\n+++ b/ambry-mysql/src/main/java/com/github/ambry/mysql/MySqlDataAccessor.java\n\n@@ -271,13 +271,10 @@ public class MySqlDataAccessor {\n   public void onException(SQLException e, OperationType operationType) {\n     if (e instanceof SQLTransientConnectionException) {\n       if (operationType == OperationType.Write) {\n-        metrics.writeRate.mark();\n         metrics.writeFailureCount.inc();\n       } else if (operationType == OperationType.Read) {\n-        metrics.readRate.mark();\n         metrics.readFailureCount.inc();\n       } else if (operationType == OperationType.Copy) {\n-        metrics.copyRate.mark();\n         metrics.copyFailureCount.inc();\n       }\n       closeActiveConnection();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAzOTcxMQ==", "url": "https://github.com/linkedin/ambry/pull/1738#discussion_r553039711", "bodyText": "nit: try to avoid string concatenation in the log.\nlogger.info(\"Setting Quota mode to {}\", mode.name());", "author": "jsjtzyy", "createdAt": "2021-01-07T00:34:19Z", "path": "ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaEnforcer.java", "diffHunk": "@@ -54,28 +69,35 @@ public boolean shouldThrottle(short accountId, short containerId, QuotaOperation\n             return v;\n           }\n         });\n+    if (exceedQuota.get() && quota != Long.MAX_VALUE && quotaExceededCallback != null) {\n+      quotaExceededCallback.onQuotaExceeded(mode, accountId, containerId, op, quota, existingUsage.get(), size);\n+    }\n     return mode == QuotaMode.Throttling ? exceedQuota.get() : false;\n   }\n \n   @Override\n   public void setQuotaMode(QuotaMode mode) {\n+    logger.info(\"Setting Quota mode to \" + mode.name());", "originalCommit": "808e192c72bbb9811272eebc2b4bd53f16b91591", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1fcea3c5d1cccbac46bf2a430b007932dc3c255", "chunk": "diff --git a/ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaEnforcer.java b/ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaEnforcer.java\nindex 1de15a476..cb5337a95 100644\n--- a/ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaEnforcer.java\n+++ b/ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaEnforcer.java\n\n@@ -77,20 +77,20 @@ public class AmbryStorageQuotaEnforcer implements StorageQuotaEnforcer {\n \n   @Override\n   public void setQuotaMode(QuotaMode mode) {\n-    logger.info(\"Setting Quota mode to \" + mode.name());\n+    logger.info(\"Setting Quota mode to {}\", mode.name());\n     this.mode = mode;\n   }\n \n   @Override\n   public void initStorageUsage(Map<String, Map<String, Long>> usage) {\n-    logger.info(\"Initializing storage usage for \" + usage.size() + \" accounts\");\n+    logger.info(\"Initializing storage usage for {} accounts\", usage.size());\n     storageUsage = new ConcurrentHashMap<>();\n     initMap(usage, storageUsage, true);\n   }\n \n   @Override\n   public void initStorageQuota(Map<String, Map<String, Long>> quota) {\n-    logger.info(\"Initializing storage quota for \" + quota.size() + \" accounts\");\n+    logger.info(\"Initializing storage quota for {} accounts\");\n     storageQuota = new HashMap<>();\n     initMap(quota, storageQuota, false);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAzOTk3MQ==", "url": "https://github.com/linkedin/ambry/pull/1738#discussion_r553039971", "bodyText": "same here and please update whole class.", "author": "jsjtzyy", "createdAt": "2021-01-07T00:34:51Z", "path": "ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaEnforcer.java", "diffHunk": "@@ -54,28 +69,35 @@ public boolean shouldThrottle(short accountId, short containerId, QuotaOperation\n             return v;\n           }\n         });\n+    if (exceedQuota.get() && quota != Long.MAX_VALUE && quotaExceededCallback != null) {\n+      quotaExceededCallback.onQuotaExceeded(mode, accountId, containerId, op, quota, existingUsage.get(), size);\n+    }\n     return mode == QuotaMode.Throttling ? exceedQuota.get() : false;\n   }\n \n   @Override\n   public void setQuotaMode(QuotaMode mode) {\n+    logger.info(\"Setting Quota mode to \" + mode.name());\n     this.mode = mode;\n   }\n \n   @Override\n   public void initStorageUsage(Map<String, Map<String, Long>> usage) {\n+    logger.info(\"Initializing storage usage for \" + usage.size() + \" accounts\");", "originalCommit": "808e192c72bbb9811272eebc2b4bd53f16b91591", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1fcea3c5d1cccbac46bf2a430b007932dc3c255", "chunk": "diff --git a/ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaEnforcer.java b/ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaEnforcer.java\nindex 1de15a476..cb5337a95 100644\n--- a/ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaEnforcer.java\n+++ b/ambry-quota/src/main/java/com/github/ambry/quota/AmbryStorageQuotaEnforcer.java\n\n@@ -77,20 +77,20 @@ public class AmbryStorageQuotaEnforcer implements StorageQuotaEnforcer {\n \n   @Override\n   public void setQuotaMode(QuotaMode mode) {\n-    logger.info(\"Setting Quota mode to \" + mode.name());\n+    logger.info(\"Setting Quota mode to {}\", mode.name());\n     this.mode = mode;\n   }\n \n   @Override\n   public void initStorageUsage(Map<String, Map<String, Long>> usage) {\n-    logger.info(\"Initializing storage usage for \" + usage.size() + \" accounts\");\n+    logger.info(\"Initializing storage usage for {} accounts\", usage.size());\n     storageUsage = new ConcurrentHashMap<>();\n     initMap(usage, storageUsage, true);\n   }\n \n   @Override\n   public void initStorageQuota(Map<String, Map<String, Long>> quota) {\n-    logger.info(\"Initializing storage quota for \" + quota.size() + \" accounts\");\n+    logger.info(\"Initializing storage quota for {} accounts\");\n     storageQuota = new HashMap<>();\n     initMap(quota, storageQuota, false);\n   }\n"}}, {"oid": "61d7d03b5725854b7e273d7043fca68691441fc6", "url": "https://github.com/linkedin/ambry/commit/61d7d03b5725854b7e273d7043fca68691441fc6", "message": "[StorageQuota] Adding more logs to quota classes", "committedDate": "2021-01-07T01:19:34Z", "type": "commit"}, {"oid": "150cb3f5e6c25bb6386c5de2c0315cfad0a4420a", "url": "https://github.com/linkedin/ambry/commit/150cb3f5e6c25bb6386c5de2c0315cfad0a4420a", "message": "Add more metrics", "committedDate": "2021-01-07T01:19:34Z", "type": "commit"}, {"oid": "a1fcea3c5d1cccbac46bf2a430b007932dc3c255", "url": "https://github.com/linkedin/ambry/commit/a1fcea3c5d1cccbac46bf2a430b007932dc3c255", "message": "Comments", "committedDate": "2021-01-07T01:28:31Z", "type": "commit"}, {"oid": "a1fcea3c5d1cccbac46bf2a430b007932dc3c255", "url": "https://github.com/linkedin/ambry/commit/a1fcea3c5d1cccbac46bf2a430b007932dc3c255", "message": "Comments", "committedDate": "2021-01-07T01:28:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEyNDI3Nw==", "url": "https://github.com/linkedin/ambry/pull/1738#discussion_r553124277", "bodyText": "in practice, rate metrics behave pretty similarly to count metrics (since count metrics are partitioned into count/sec by the metrics sensors). Is there a specific reason for having both?", "author": "cgtz", "createdAt": "2021-01-07T05:57:46Z", "path": "ambry-mysql/src/main/java/com/github/ambry/mysql/MySqlMetrics.java", "diffHunk": "@@ -38,6 +42,9 @@\n   public final Histogram writeTimeMs;\n   public final Histogram readTimeMs;\n   public final Histogram copyTimeMs;\n+  public final Meter writeRate;\n+  public final Meter readRate;\n+  public final Meter copyRate;", "originalCommit": "a1fcea3c5d1cccbac46bf2a430b007932dc3c255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEzMzYxNg==", "url": "https://github.com/linkedin/ambry/pull/1738#discussion_r553133616", "bodyText": "Didn't think counter does that. If so, i will remove the meter.", "author": "justinlin-linkedin", "createdAt": "2021-01-07T06:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEyNDI3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e32cf5c9ab47acac8449541708c37dc6932278ad", "chunk": "diff --git a/ambry-mysql/src/main/java/com/github/ambry/mysql/MySqlMetrics.java b/ambry-mysql/src/main/java/com/github/ambry/mysql/MySqlMetrics.java\nindex 69e0e5d32..fcfaec85b 100644\n--- a/ambry-mysql/src/main/java/com/github/ambry/mysql/MySqlMetrics.java\n+++ b/ambry-mysql/src/main/java/com/github/ambry/mysql/MySqlMetrics.java\n\n@@ -42,9 +39,6 @@ public class MySqlMetrics {\n   public final Histogram writeTimeMs;\n   public final Histogram readTimeMs;\n   public final Histogram copyTimeMs;\n-  public final Meter writeRate;\n-  public final Meter readRate;\n-  public final Meter copyRate;\n   public final Counter writeSuccessCount;\n   public final Counter writeFailureCount;\n   public final Counter readSuccessCount;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEyNDg0Mg==", "url": "https://github.com/linkedin/ambry/pull/1738#discussion_r553124842", "bodyText": "nit: some remaining string concats in this class", "author": "cgtz", "createdAt": "2021-01-07T05:59:52Z", "path": "ambry-quota/src/main/java/com/github/ambry/quota/MySqlStorageUsageRefresher.java", "diffHunk": "@@ -388,6 +390,7 @@ void persistentBackupFile(String filename, Map<String, Map<String, Long>> usage)\n       if (backupFiles.contains(filename)) {\n         return;\n       }\n+      logger.trace(\"Persist container usage for \" + filename);", "originalCommit": "a1fcea3c5d1cccbac46bf2a430b007932dc3c255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEzMzUwMg==", "url": "https://github.com/linkedin/ambry/pull/1738#discussion_r553133502", "bodyText": "updated.", "author": "justinlin-linkedin", "createdAt": "2021-01-07T06:30:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEyNDg0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e32cf5c9ab47acac8449541708c37dc6932278ad", "chunk": "diff --git a/ambry-quota/src/main/java/com/github/ambry/quota/MySqlStorageUsageRefresher.java b/ambry-quota/src/main/java/com/github/ambry/quota/MySqlStorageUsageRefresher.java\nindex 794e0282a..07822c275 100644\n--- a/ambry-quota/src/main/java/com/github/ambry/quota/MySqlStorageUsageRefresher.java\n+++ b/ambry-quota/src/main/java/com/github/ambry/quota/MySqlStorageUsageRefresher.java\n\n@@ -390,7 +390,7 @@ public class MySqlStorageUsageRefresher implements StorageUsageRefresher {\n       if (backupFiles.contains(filename)) {\n         return;\n       }\n-      logger.trace(\"Persist container usage for \" + filename);\n+      logger.trace(\"Persist container usage for {}\", filename);\n       String tempFileName = filename + TEMP_FILE_SUFFIX;\n       Path tempFilePath = backupDirPath.resolve(tempFileName);\n       Path filePath = backupDirPath.resolve(filename);\n"}}, {"oid": "e32cf5c9ab47acac8449541708c37dc6932278ad", "url": "https://github.com/linkedin/ambry/commit/e32cf5c9ab47acac8449541708c37dc6932278ad", "message": "comments", "committedDate": "2021-01-07T06:29:46Z", "type": "commit"}]}