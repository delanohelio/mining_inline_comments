{"pr_number": 1404, "pr_title": "Fix for ResponseMetadata race condition.", "pr_createdAt": "2020-02-27T22:31:38Z", "pr_url": "https://github.com/linkedin/ambry/pull/1404", "timeline": [{"oid": "87f7ce756b3746b943bac96e2cc4eb169a614292", "url": "https://github.com/linkedin/ambry/commit/87f7ce756b3746b943bac96e2cc4eb169a614292", "message": "Fix for ResponseMetadata race condition.\n\nBefore this change, responseMetadata is accessed without confirming if it is ready or not.\nThis fix introduced a latch to avoid such race condition.", "committedDate": "2020-03-12T22:52:11Z", "type": "commit"}, {"oid": "754de3db73e00af5099edc66da8c4c9741257f13", "url": "https://github.com/linkedin/ambry/commit/754de3db73e00af5099edc66da8c4c9741257f13", "message": "fix", "committedDate": "2020-03-12T23:22:40Z", "type": "commit"}, {"oid": "754de3db73e00af5099edc66da8c4c9741257f13", "url": "https://github.com/linkedin/ambry/commit/754de3db73e00af5099edc66da8c4c9741257f13", "message": "fix", "committedDate": "2020-03-12T23:22:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5NzQ2Mg==", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r392497462", "bodyText": "this looks good, but can you add a test case for this logic?", "author": "justinlin-linkedin", "createdAt": "2020-03-13T21:41:16Z", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -148,6 +148,18 @@ public void onCompletion(Long result, Exception exception) {\n     if (!responseMetadataWriteInitiated.get()) {\n       maybeWriteResponseMetadata(responseMetadata, new ResponseMetadataWriteListener());\n     }\n+    if (finalResponseMetadata == null) {", "originalCommit": "754de3db73e00af5099edc66da8c4c9741257f13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1NTgxNQ==", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r395155815", "bodyText": "+1, I guess we can at least test the case where the channel becomes inactive", "author": "cgtz", "createdAt": "2020-03-19T16:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5NzQ2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "45e13ed06bf912a03532f2283686128ab3768324", "chunk": "diff --git a/ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java b/ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java\nindex 263de9711..ef5d79305 100644\n--- a/ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java\n+++ b/ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java\n\n@@ -152,12 +152,16 @@ class NettyResponseChannel implements RestResponseChannel {\n       // If finalResponseMetadata is still null, it indicates channel becomes inactive.\n       if (ctx.channel().isActive()) {\n         logger.warn(\"Channel should be inactive status. {}\", ctx.channel());\n+        nettyMetrics.channelStatusInconsistentCount.inc();\n       } else {\n         logger.debug(\"Scheduling a chunk cleanup on channel {} because response channel is closed.\", ctx.channel());\n         writeFuture.addListener(new CleanupCallback(new ClosedChannelException()));\n       }\n       FutureResult<Long> future = new FutureResult<Long>();\n-      future.done(-1L, null);\n+      future.done(0L, new ClosedChannelException());\n+      if (callback != null) {\n+        callback.onCompletion(0L, new ClosedChannelException());\n+      }\n       return future;\n     }\n     Chunk chunk = new Chunk(src, callback);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5NzcxMg==", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r392497712", "bodyText": "the exception should be ClosedChannelException, not null.", "author": "justinlin-linkedin", "createdAt": "2020-03-13T21:41:46Z", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -148,6 +148,18 @@ public void onCompletion(Long result, Exception exception) {\n     if (!responseMetadataWriteInitiated.get()) {\n       maybeWriteResponseMetadata(responseMetadata, new ResponseMetadataWriteListener());\n     }\n+    if (finalResponseMetadata == null) {\n+      // If finalResponseMetadata is still null, it indicates channel becomes inactive.\n+      if (ctx.channel().isActive()) {\n+        logger.warn(\"Channel should be inactive status. {}\", ctx.channel());\n+      } else {\n+        logger.debug(\"Scheduling a chunk cleanup on channel {} because response channel is closed.\", ctx.channel());\n+        writeFuture.addListener(new CleanupCallback(new ClosedChannelException()));\n+      }\n+      FutureResult<Long> future = new FutureResult<Long>();\n+      future.done(-1L, null);", "originalCommit": "754de3db73e00af5099edc66da8c4c9741257f13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "45e13ed06bf912a03532f2283686128ab3768324", "chunk": "diff --git a/ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java b/ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java\nindex 263de9711..ef5d79305 100644\n--- a/ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java\n+++ b/ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java\n\n@@ -152,12 +152,16 @@ class NettyResponseChannel implements RestResponseChannel {\n       // If finalResponseMetadata is still null, it indicates channel becomes inactive.\n       if (ctx.channel().isActive()) {\n         logger.warn(\"Channel should be inactive status. {}\", ctx.channel());\n+        nettyMetrics.channelStatusInconsistentCount.inc();\n       } else {\n         logger.debug(\"Scheduling a chunk cleanup on channel {} because response channel is closed.\", ctx.channel());\n         writeFuture.addListener(new CleanupCallback(new ClosedChannelException()));\n       }\n       FutureResult<Long> future = new FutureResult<Long>();\n-      future.done(-1L, null);\n+      future.done(0L, new ClosedChannelException());\n+      if (callback != null) {\n+        callback.onCompletion(0L, new ClosedChannelException());\n+      }\n       return future;\n     }\n     Chunk chunk = new Chunk(src, callback);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1NDg0Ng==", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r395154846", "bodyText": "Also call the callback here?", "author": "cgtz", "createdAt": "2020-03-19T16:24:51Z", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -148,6 +148,18 @@ public void onCompletion(Long result, Exception exception) {\n     if (!responseMetadataWriteInitiated.get()) {\n       maybeWriteResponseMetadata(responseMetadata, new ResponseMetadataWriteListener());\n     }\n+    if (finalResponseMetadata == null) {\n+      // If finalResponseMetadata is still null, it indicates channel becomes inactive.\n+      if (ctx.channel().isActive()) {\n+        logger.warn(\"Channel should be inactive status. {}\", ctx.channel());\n+      } else {\n+        logger.debug(\"Scheduling a chunk cleanup on channel {} because response channel is closed.\", ctx.channel());\n+        writeFuture.addListener(new CleanupCallback(new ClosedChannelException()));\n+      }\n+      FutureResult<Long> future = new FutureResult<Long>();\n+      future.done(-1L, null);", "originalCommit": "754de3db73e00af5099edc66da8c4c9741257f13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "45e13ed06bf912a03532f2283686128ab3768324", "chunk": "diff --git a/ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java b/ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java\nindex 263de9711..ef5d79305 100644\n--- a/ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java\n+++ b/ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java\n\n@@ -152,12 +152,16 @@ class NettyResponseChannel implements RestResponseChannel {\n       // If finalResponseMetadata is still null, it indicates channel becomes inactive.\n       if (ctx.channel().isActive()) {\n         logger.warn(\"Channel should be inactive status. {}\", ctx.channel());\n+        nettyMetrics.channelStatusInconsistentCount.inc();\n       } else {\n         logger.debug(\"Scheduling a chunk cleanup on channel {} because response channel is closed.\", ctx.channel());\n         writeFuture.addListener(new CleanupCallback(new ClosedChannelException()));\n       }\n       FutureResult<Long> future = new FutureResult<Long>();\n-      future.done(-1L, null);\n+      future.done(0L, new ClosedChannelException());\n+      if (callback != null) {\n+        callback.onCompletion(0L, new ClosedChannelException());\n+      }\n       return future;\n     }\n     Chunk chunk = new Chunk(src, callback);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1NjA1NA==", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r395156054", "bodyText": "Could you add a metric for this? We can set up an alert if this case ever occurs.", "author": "cgtz", "createdAt": "2020-03-19T16:26:37Z", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java", "diffHunk": "@@ -148,6 +148,18 @@ public void onCompletion(Long result, Exception exception) {\n     if (!responseMetadataWriteInitiated.get()) {\n       maybeWriteResponseMetadata(responseMetadata, new ResponseMetadataWriteListener());\n     }\n+    if (finalResponseMetadata == null) {\n+      // If finalResponseMetadata is still null, it indicates channel becomes inactive.\n+      if (ctx.channel().isActive()) {\n+        logger.warn(\"Channel should be inactive status. {}\", ctx.channel());", "originalCommit": "754de3db73e00af5099edc66da8c4c9741257f13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "45e13ed06bf912a03532f2283686128ab3768324", "chunk": "diff --git a/ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java b/ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java\nindex 263de9711..ef5d79305 100644\n--- a/ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java\n+++ b/ambry-rest/src/main/java/com.github.ambry.rest/NettyResponseChannel.java\n\n@@ -152,12 +152,16 @@ class NettyResponseChannel implements RestResponseChannel {\n       // If finalResponseMetadata is still null, it indicates channel becomes inactive.\n       if (ctx.channel().isActive()) {\n         logger.warn(\"Channel should be inactive status. {}\", ctx.channel());\n+        nettyMetrics.channelStatusInconsistentCount.inc();\n       } else {\n         logger.debug(\"Scheduling a chunk cleanup on channel {} because response channel is closed.\", ctx.channel());\n         writeFuture.addListener(new CleanupCallback(new ClosedChannelException()));\n       }\n       FutureResult<Long> future = new FutureResult<Long>();\n-      future.done(-1L, null);\n+      future.done(0L, new ClosedChannelException());\n+      if (callback != null) {\n+        callback.onCompletion(0L, new ClosedChannelException());\n+      }\n       return future;\n     }\n     Chunk chunk = new Chunk(src, callback);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyNDc0OA==", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r397424748", "bodyText": "add \"in channelInactiveTest()\"", "author": "cgtz", "createdAt": "2020-03-24T19:59:40Z", "path": "ambry-rest/src/test/java/com.github.ambry.rest/NettyResponseChannelTest.java", "diffHunk": "@@ -1713,3 +1746,221 @@ void compareWithFuture() throws InterruptedException, TimeoutException {\n     }\n   }\n }\n+\n+/**\n+ * Mock class for ChannelHandlerContext used in .", "originalCommit": "dfa39c5f48dd2d8f2148065458d387465a620746", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "45e13ed06bf912a03532f2283686128ab3768324", "chunk": "diff --git a/ambry-rest/src/test/java/com.github.ambry.rest/NettyResponseChannelTest.java b/ambry-rest/src/test/java/com.github.ambry.rest/NettyResponseChannelTest.java\nindex b81da2d9a..25775fb0c 100644\n--- a/ambry-rest/src/test/java/com.github.ambry.rest/NettyResponseChannelTest.java\n+++ b/ambry-rest/src/test/java/com.github.ambry.rest/NettyResponseChannelTest.java\n\n@@ -1748,7 +1749,7 @@ class ChannelWriteCallback implements Callback<Long> {\n }\n \n /**\n- * Mock class for ChannelHandlerContext used in .\n+ * Mock class for ChannelHandlerContext used in channelInactiveTest.\n  */\n class MockChannelHandlerContext implements ChannelHandlerContext {\n   private final EmbeddedChannel embeddedChannel;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNDk0MQ==", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r397434941", "bodyText": "please add a fail(\"\") after future.get();", "author": "justinlin-linkedin", "createdAt": "2020-03-24T20:19:28Z", "path": "ambry-rest/src/test/java/com.github.ambry.rest/NettyResponseChannelTest.java", "diffHunk": "@@ -636,6 +647,28 @@ public void closeTest() {\n     assertFalse(\"Channel should be closed\", channel.isOpen());\n   }\n \n+  /**\n+   * ClosedChannelException is expected when write to a NettyResponseChannel and channel is inactive.\n+   */\n+  @Test\n+  public void channelInactiveTest() {\n+    // request is keep-alive by default.\n+    HttpRequest request = createRequestWithHeaders(HttpMethod.GET, TestingUri.Close.toString());\n+    ChunkedWriteHandler chunkedWriteHandler = new ChunkedWriteHandler();\n+    EmbeddedChannel channel = new EmbeddedChannel(chunkedWriteHandler);\n+    NettyResponseChannel nettyResponseChannel =\n+        new NettyResponseChannel(new MockChannelHandlerContext(channel), new NettyMetrics(new MetricRegistry()),\n+            new PerformanceConfig(new VerifiableProperties(new Properties())));\n+    channel.disconnect().awaitUninterruptibly();\n+    assertFalse(\"Channel should be closed\", channel.isOpen());\n+    Future<Long> future = nettyResponseChannel.write(Unpooled.buffer(1), null);\n+    try {\n+      future.get();", "originalCommit": "dfa39c5f48dd2d8f2148065458d387465a620746", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "45e13ed06bf912a03532f2283686128ab3768324", "chunk": "diff --git a/ambry-rest/src/test/java/com.github.ambry.rest/NettyResponseChannelTest.java b/ambry-rest/src/test/java/com.github.ambry.rest/NettyResponseChannelTest.java\nindex b81da2d9a..25775fb0c 100644\n--- a/ambry-rest/src/test/java/com.github.ambry.rest/NettyResponseChannelTest.java\n+++ b/ambry-rest/src/test/java/com.github.ambry.rest/NettyResponseChannelTest.java\n\n@@ -664,6 +664,7 @@ public class NettyResponseChannelTest {\n     Future<Long> future = nettyResponseChannel.write(Unpooled.buffer(1), null);\n     try {\n       future.get();\n+      fail(\"Future.get() should throw exception.\");\n     } catch (InterruptedException | ExecutionException e) {\n       assertTrue(\"Should be ClosedChannelException\", e.getCause() instanceof ClosedChannelException);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNTIwMw==", "url": "https://github.com/linkedin/ambry/pull/1404#discussion_r397435203", "bodyText": "It seems like this may fit better as a counter, looking at other similar metrics (see line 107-113). However, they both should work about the same in practice, so if you prefer Meter keep it as is.", "author": "cgtz", "createdAt": "2020-03-24T20:19:58Z", "path": "ambry-rest/src/main/java/com.github.ambry.rest/NettyMetrics.java", "diffHunk": "@@ -170,6 +171,8 @@ public NettyMetrics(MetricRegistry metricRegistry) {\n     publicAccessLogRequestRate =\n         metricRegistry.meter(MetricRegistry.name(PublicAccessLogHandler.class, \"RequestArrivalRate\"));\n     healthCheckRequestRate = metricRegistry.meter(MetricRegistry.name(HealthCheckHandler.class, \"RequestArrivalRate\"));\n+    channelStatusInconsistent =", "originalCommit": "dfa39c5f48dd2d8f2148065458d387465a620746", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "45e13ed06bf912a03532f2283686128ab3768324", "chunk": "diff --git a/ambry-rest/src/main/java/com.github.ambry.rest/NettyMetrics.java b/ambry-rest/src/main/java/com.github.ambry.rest/NettyMetrics.java\nindex 35ee6fbc5..7478b1e4a 100644\n--- a/ambry-rest/src/main/java/com.github.ambry.rest/NettyMetrics.java\n+++ b/ambry-rest/src/main/java/com.github.ambry.rest/NettyMetrics.java\n\n@@ -171,8 +171,6 @@ public class NettyMetrics {\n     publicAccessLogRequestRate =\n         metricRegistry.meter(MetricRegistry.name(PublicAccessLogHandler.class, \"RequestArrivalRate\"));\n     healthCheckRequestRate = metricRegistry.meter(MetricRegistry.name(HealthCheckHandler.class, \"RequestArrivalRate\"));\n-    channelStatusInconsistent =\n-        metricRegistry.meter(MetricRegistry.name(NettyMessageProcessor.class, \"ChannelStatusInconsistent\"));\n \n     // Latencies\n     // NettyMessageProcessor\n"}}, {"oid": "45e13ed06bf912a03532f2283686128ab3768324", "url": "https://github.com/linkedin/ambry/commit/45e13ed06bf912a03532f2283686128ab3768324", "message": "Fix for EXC-209313", "committedDate": "2020-03-24T21:06:01Z", "type": "commit"}, {"oid": "1d1505ea9748441ba917b3add83cd6776cce7bc7", "url": "https://github.com/linkedin/ambry/commit/1d1505ea9748441ba917b3add83cd6776cce7bc7", "message": "add more log", "committedDate": "2020-03-24T21:21:36Z", "type": "commit"}, {"oid": "fdcd865c7287b379c9c99e3d96f788d1b52b6c67", "url": "https://github.com/linkedin/ambry/commit/fdcd865c7287b379c9c99e3d96f788d1b52b6c67", "message": "address comment", "committedDate": "2020-03-25T18:26:35Z", "type": "commit"}, {"oid": "dfa39c5f48dd2d8f2148065458d387465a620746", "url": "https://github.com/linkedin/ambry/commit/dfa39c5f48dd2d8f2148065458d387465a620746", "message": "add test", "committedDate": "2020-03-25T19:19:12Z", "type": "commit"}, {"oid": "825301b14c03705b93e777bbc34e7e9f5524c276", "url": "https://github.com/linkedin/ambry/commit/825301b14c03705b93e777bbc34e7e9f5524c276", "message": "final comments", "committedDate": "2020-03-24T20:56:02Z", "type": "commit"}]}