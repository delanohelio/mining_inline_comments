{"pr_number": 1490, "pr_title": "Introduce dc-level replication lag metrics", "pr_createdAt": "2020-04-28T16:17:29Z", "pr_url": "https://github.com/linkedin/ambry/pull/1490", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5NjAzNw==", "url": "https://github.com/linkedin/ambry/pull/1490#discussion_r418696037", "bodyText": "looks like this variable name may need adjusting since it is assigned to the per datacenter metric config", "author": "cgtz", "createdAt": "2020-05-01T19:19:37Z", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/VcrReplicationManager.java", "diffHunk": "@@ -77,6 +78,7 @@ public VcrReplicationManager(CloudConfig cloudConfig, ReplicationConfig replicat\n     this.cloudStorageCompactor =\n         cloudConfig.cloudBlobCompactionEnabled ? new CloudStorageCompactor(cloudDestination, cloudConfig,\n             partitionToPartitionInfo.keySet(), vcrMetrics) : null;\n+    trackPerPartitionLagInMetric = replicationConfig.replicationTrackRemoteFromLocalPerDatacenterLag;", "originalCommit": "bdde999e84d16ec52957615b836bec65a0db866d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5ODQ1Ng==", "url": "https://github.com/linkedin/ambry/pull/1490#discussion_r418698456", "bodyText": "ah, good catch, will change.\nFor naming, on second thought, I probably won't change the name of replicationTrackPerPartitionLagFromRemote (this is introduced by @zzmao ). As you can see, I renamed it in this PR but since it requires to change config name/ sensor name in closed source, I feel like I would change it back. What do you think? @cgtz @zzmao", "author": "jsjtzyy", "createdAt": "2020-05-01T19:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5NjAzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5OTk0MQ==", "url": "https://github.com/linkedin/ambry/pull/1490#discussion_r418699941", "bodyText": "It probably isn't used in too many places and isn't a required config so it may be okay to change if you think the new names are significantly more clear. Of course, you may need to keep both configs in src files temporarily so that it works before and after the deployment of this change and then remove the old config after this change is fully deployed. Up to you if you want to do this.", "author": "cgtz", "createdAt": "2020-05-01T19:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5NjAzNw=="}], "type": "inlineReview", "revised_code": {"commit": "0dc89fb2777099025653787e00eb74e8ae9ab97b", "chunk": "diff --git a/ambry-cloud/src/main/java/com/github/ambry/cloud/VcrReplicationManager.java b/ambry-cloud/src/main/java/com/github/ambry/cloud/VcrReplicationManager.java\nindex c8a79e17b..6e9799f78 100644\n--- a/ambry-cloud/src/main/java/com/github/ambry/cloud/VcrReplicationManager.java\n+++ b/ambry-cloud/src/main/java/com/github/ambry/cloud/VcrReplicationManager.java\n\n@@ -78,7 +78,7 @@ public class VcrReplicationManager extends ReplicationEngine {\n     this.cloudStorageCompactor =\n         cloudConfig.cloudBlobCompactionEnabled ? new CloudStorageCompactor(cloudDestination, cloudConfig,\n             partitionToPartitionInfo.keySet(), vcrMetrics) : null;\n-    trackPerPartitionLagInMetric = replicationConfig.replicationTrackRemoteFromLocalPerDatacenterLag;\n+    trackPerDatacenterLagInMetric = replicationConfig.replicationTrackPerDatacenterLagFromLocal;\n     // We need a datacenter to replicate from, which should be specified in the cloud config.\n     if (cloudConfig.vcrSourceDatacenters.isEmpty()) {\n       throw new IllegalStateException(\"One or more VCR cross colo replication peer datacenter should be specified\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5NzEzMQ==", "url": "https://github.com/linkedin/ambry/pull/1490#discussion_r418697131", "bodyText": "Why comment it?", "author": "zzmao", "createdAt": "2020-05-01T19:22:22Z", "path": "ambry-server/src/test/java/com/github/ambry/server/AmbryServerRequestsTest.java", "diffHunk": "@@ -318,7 +318,7 @@ public void scheduleCompactionFailureTest() throws InterruptedException, IOExcep\n    * @throws InterruptedException\n    * @throws IOException\n    */\n-  @Test\n+  //@Test", "originalCommit": "bdde999e84d16ec52957615b836bec65a0db866d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5ODk0OA==", "url": "https://github.com/linkedin/ambry/pull/1490#discussion_r418698948", "bodyText": "Good catch, it was previously disabled for debugging. I will remove it. Thanks.", "author": "jsjtzyy", "createdAt": "2020-05-01T19:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5NzEzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "8bbd3675779290509a346fe4def185a2d36c03b5", "chunk": "diff --git a/ambry-server/src/test/java/com/github/ambry/server/AmbryServerRequestsTest.java b/ambry-server/src/test/java/com/github/ambry/server/AmbryServerRequestsTest.java\nindex d31ceb8c7..b382924f7 100644\n--- a/ambry-server/src/test/java/com/github/ambry/server/AmbryServerRequestsTest.java\n+++ b/ambry-server/src/test/java/com/github/ambry/server/AmbryServerRequestsTest.java\n\n@@ -318,7 +318,7 @@ public class AmbryServerRequestsTest {\n    * @throws InterruptedException\n    * @throws IOException\n    */\n-  //@Test\n+  @Test\n   public void controlRequestSuccessTest() throws InterruptedException, IOException {\n     RequestOrResponseType[] requestOrResponseTypes =\n         {RequestOrResponseType.PutRequest, RequestOrResponseType.DeleteRequest, RequestOrResponseType.GetRequest,\n"}}, {"oid": "8bbd3675779290509a346fe4def185a2d36c03b5", "url": "https://github.com/linkedin/ambry/commit/8bbd3675779290509a346fe4def185a2d36c03b5", "message": "Introduce dc-level replication lag metrics.\n\nNow ReplicationMetrics tracks each remote replica lag from local by emitting a\ndedicated metric. As ambry grows, it brings more than one million metrics and\nit's hard to get a whole view of replication lag from remote dcs. This PR introduces\na config that allows us to track remote replica lags dc level. That is, it provides\nstatistics regarding replicas' lag in certain dc (min/max/avg/sum) which gives a\ndecent estimation of overall replication lag in each dc.", "committedDate": "2020-05-03T17:23:28Z", "type": "commit"}, {"oid": "95c863a2c19904a120d088379c6c51608edc9fb4", "url": "https://github.com/linkedin/ambry/commit/95c863a2c19904a120d088379c6c51608edc9fb4", "message": "added unit test", "committedDate": "2020-05-03T17:23:28Z", "type": "commit"}, {"oid": "0dc89fb2777099025653787e00eb74e8ae9ab97b", "url": "https://github.com/linkedin/ambry/commit/0dc89fb2777099025653787e00eb74e8ae9ab97b", "message": "comments", "committedDate": "2020-05-03T17:23:28Z", "type": "commit"}, {"oid": "322447425a44429194fa645e6a94fa53f5851165", "url": "https://github.com/linkedin/ambry/commit/322447425a44429194fa645e6a94fa53f5851165", "message": "added additional metrics to track cross-colo replication bytes rate", "committedDate": "2020-05-04T01:39:27Z", "type": "commit"}, {"oid": "322447425a44429194fa645e6a94fa53f5851165", "url": "https://github.com/linkedin/ambry/commit/322447425a44429194fa645e6a94fa53f5851165", "message": "added additional metrics to track cross-colo replication bytes rate", "committedDate": "2020-05-04T01:39:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU4ODkxOA==", "url": "https://github.com/linkedin/ambry/pull/1490#discussion_r419588918", "bodyText": "@Arun-LinkedIn these two metrics are what you need to track realtime cross-colo fetch/metadata request bytes rate. Note that, these metrics are emitted on source node, which are more accurate than existing metrics on puller to indicate cross-colo bandwidth usage.", "author": "jsjtzyy", "createdAt": "2020-05-04T17:06:26Z", "path": "ambry-commons/src/main/java/com/github/ambry/commons/ServerMetrics.java", "diffHunk": "@@ -211,12 +215,14 @@\n   public final Counter ttlAlreadyUpdatedError;\n   public final Counter ttlUpdateRejectedError;\n   public final Counter replicationResponseMessageSizeTooHigh;\n+  public final Map<String, Meter> crossColoFetchBytesRate = new HashMap<>();\n+  public final Map<String, Meter> crossColoMetadataExchangeBytesRate = new HashMap<>();", "originalCommit": "322447425a44429194fa645e6a94fa53f5851165", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de8b43cc6cc6e48fc1b612bc38c51a797f36a599", "chunk": "diff --git a/ambry-commons/src/main/java/com/github/ambry/commons/ServerMetrics.java b/ambry-commons/src/main/java/com/github/ambry/commons/ServerMetrics.java\nindex 9e5b9e0ea..e776d0141 100644\n--- a/ambry-commons/src/main/java/com/github/ambry/commons/ServerMetrics.java\n+++ b/ambry-commons/src/main/java/com/github/ambry/commons/ServerMetrics.java\n\n@@ -215,14 +213,19 @@ public class ServerMetrics {\n   public final Counter ttlAlreadyUpdatedError;\n   public final Counter ttlUpdateRejectedError;\n   public final Counter replicationResponseMessageSizeTooHigh;\n-  public final Map<String, Meter> crossColoFetchBytesRate = new HashMap<>();\n-  public final Map<String, Meter> crossColoMetadataExchangeBytesRate = new HashMap<>();\n+  public final Map<String, Meter> crossColoFetchBytesRate = new ConcurrentHashMap<>();\n+  public final Map<String, Meter> crossColoMetadataExchangeBytesRate = new ConcurrentHashMap<>();\n+\n+  private final MetricRegistry registry;\n+  private final Class<?> requestClass;\n \n   public ServerMetrics(MetricRegistry registry, Class<?> requestClass) {\n-    this(registry, requestClass, null, null);\n+    this(registry, requestClass, null);\n   }\n \n-  public ServerMetrics(MetricRegistry registry, Class<?> requestClass, Class<?> serverClass, ClusterMap clusterMap) {\n+  public ServerMetrics(MetricRegistry registry, Class<?> requestClass, Class<?> serverClass) {\n+    this.registry = registry;\n+    this.requestClass = requestClass;\n     putBlobRequestQueueTimeInMs = registry.histogram(MetricRegistry.name(requestClass, \"PutBlobRequestQueueTime\"));\n     putBlobProcessingTimeInMs = registry.histogram(MetricRegistry.name(requestClass, \"PutBlobProcessingTime\"));\n     putBlobResponseQueueTimeInMs = registry.histogram(MetricRegistry.name(requestClass, \"PutBlobResponseQueueTime\"));\n"}}, {"oid": "e8bcfdcfb07daeb89a9eb216f60bd25a50c2ccd1", "url": "https://github.com/linkedin/ambry/commit/e8bcfdcfb07daeb89a9eb216f60bd25a50c2ccd1", "message": "remove duplicate metrics", "committedDate": "2020-05-04T19:18:32Z", "type": "commit"}, {"oid": "d6b9ccc5dd9da3eaa66ee1bceeec8a59af4c0808", "url": "https://github.com/linkedin/ambry/commit/d6b9ccc5dd9da3eaa66ee1bceeec8a59af4c0808", "message": "minor", "committedDate": "2020-05-04T20:24:38Z", "type": "commit"}, {"oid": "de8b43cc6cc6e48fc1b612bc38c51a797f36a599", "url": "https://github.com/linkedin/ambry/commit/de8b43cc6cc6e48fc1b612bc38c51a797f36a599", "message": "fixed test failure and simplify code", "committedDate": "2020-05-05T05:45:42Z", "type": "commit"}, {"oid": "2c8a4cb66dbcef235583a0927ce0a20f95eee33a", "url": "https://github.com/linkedin/ambry/commit/2c8a4cb66dbcef235583a0927ce0a20f95eee33a", "message": "minor change for stats init value", "committedDate": "2020-05-05T18:33:08Z", "type": "commit"}]}